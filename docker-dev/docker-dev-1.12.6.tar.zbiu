EONG KAPYEOUNRIEUL
111C  ; [.316E.0020.0002] # HANGUL CHOSEONG MIEUM-PIEUP
316E  ; [.316E.0020.0004] # HANGUL LETTER MIEUM-PIEUP
111D  ; [.316F.0020.0002] # HANGUL CHOSEONG KAPYEOUNMIEUM
3171  ; [.316F.0020.0004] # HANGUL LETTER KAPYEOUNMIEUM
111E  ; [.3170.0020.0002] # HANGUL CHOSEONG PIEUP-KIYEOK
3172  ; [.3170.0020.0004] # HANGUL LETTER PIEUP-KIYEOK
111F  ; [.3171.0020.0002] # HANGUL CHOSEONG PIEUP-NIEUN
1120  ; [.3172.0020.0002] # HANGUL CHOSEONG PIEUP-TIKEUT
3173  ; [.3172.0020.0004] # HANGUL LETTER PIEUP-TIKEUT
1121  ; [.3173.0020.0002] # HANGUL CHOSEONG PIEUP-SIOS
3144  ; [.3173.0020.0004] # HANGUL LETTER PIEUP-SIOS
FFB4  ; [.3173.0020.0012] # HALFWIDTH HANGUL LETTER PIEUP-SIOS
1122  ; [.3174.0020.0002] # HANGUL CHOSEONG PIEUP-SIOS-KIYEOK
3174  ; [.3174.0020.0004] # HANGUL LETTER PIEUP-SIOS-KIYEOK
1123  ; [.3175.0020.0002] # HANGUL CHOSEONG PIEUP-SIOS-TIKEUT
3175  ; [.3175.0020.0004] # HANGUL LETTER PIEUP-SIOS-TIKEUT
1124  ; [.3176.0020.0002] # HANGUL CHOSEONG PIEUP-SIOS-PIEUP
1125  ; [.3177.0020.0002] # HANGUL CHOSEONG PIEUP-SSANGSIOS
1126  ; [.3178.0020.0002] # HANGUL CHOSEONG PIEUP-SIOS-CIEUC
1127  ; [.3179.0020.0002] # HANGUL CHOSEONG PIEUP-CIEUC
3176  ; [.3179.0020.0004] # HANGUL LETTER PIEUP-CIEUC
1128  ; [.317A.0020.0002] # HANGUL CHOSEONG PIEUP-CHIEUCH
1129  ; [.317B.0020.0002] # HANGUL CHOSEONG PIEUP-THIEUTH
3177  ; [.317B.0020.0004] # HANGUL LETTER PIEUP-THIEUTH
112A  ; [.317C.0020.0002] # HANGUL CHOSEONG PIEUP-PHIEUPH
112B  ; [.317D.0020.0002] # HANGUL CHOSEONG KAPYEOUNPIEUP
3178  ; [.317D.0020.0004] # HANGUL LETTER KAPYEOUNPIEUP
112C  ; [.317E.0020.0002] # HANGUL CHOSEONG KAPYEOUNSSANGPIEUP
3179  ; [.317E.0020.0004] # HANGUL LETTER KAPYEOUNSSANGPIEUP
112D  ; [.317F.0020.0002] # HANGUL CHOSEONG SIOS-KIYEOK
317A  ; [.317F.0020.0004] # HANGUL LETTER SIOS-KIYEOK
112E  ; [.3180.0020.0002] # HANGUL CHOSEONG SIOS-NIEUN
317B  ; [.3180.0020.0004] # HANGUL LETTER SIOS-NIEUN
112F  ; [.3181.0020.0002] # HANGUL CHOSEONG SIOS-TIKEUT
317C  ; [.3181.0020.0004] # HANGUL LETTER SIOS-TIKEUT
1130  ; [.3182.0020.0002] # HANGUL CHOSEONG SIOS-RIEUL
1131  ; [.3183.0020.0002] # HANGUL CHOSEONG SIOS-MIEUM
1132  ; [.3184.0020.0002] # HANGUL CHOSEONG SIOS-PIEUP
317D  ; [.3184.0020.0004] # HANGUL LETTER SIOS-PIEUP
1133  ; [.3185.0020.0002] # HANGUL CHOSEONG SIOS-PIEUP-KIYEOK
1134  ; [.3186.0020.0002] # HANGUL CHOSEONG SIOS-SSANGSIOS
1135  ; [.3187.0020.0002] # HANGUL CHOSEONG SIOS-IEUNG
1136  ; [.3188.0020.0002] # HANGUL CHOSEONG SIOS-CIEUC
317E  ; [.3188.0020.0004] # HANGUL LETTER SIOS-CIEUC
1137  ; [.3189.0020.0002] # HANGUL CHOSEONG SIOS-CHIEUCH
1138  ; [.318A.0020.0002] # HANGUL CHOSEONG SIOS-KHIEUKH
1139  ; [.318B.0020.0002] # HANGUL CHOSEONG SIOS-THIEUTH
113A  ; [.318C.0020.0002] # HANGUL CHOSEONG SIOS-PHIEUPH
113B  ; [.318D.0020.0002] # HANGUL CHOSEONG SIOS-HIEUH
113C  ; [.318E.0020.0002] # HANGUL CHOSEONG CHITUEUMSIOS
113D  ; [.318F.0020.0002] # HANGUL CHOSEONG CHITUEUMSSANGSIOS
113E  ; [.3190.0020.0002] # HANGUL CHOSEONG CEONGCHIEUMSIOS
113F  ; [.3191.0020.0002] # HANGUL CHOSEONG CEONGCHIEUMSSANGSIOS
1140  ; [.3192.0020.0002] # HANGUL CHOSEONG PANSIOS
317F  ; [.3192.0020.0004] # HANGUL LETTER PANSIOS
1141  ; [.3193.0020.0002] # HANGUL CHOSEONG IEUNG-KIYEOK
1142  ; [.3194.0020.0002] # HANGUL CHOSEONG IEUNG-TIKEUT
1143  ; [.3195.0020.0002] # HANGUL CHOSEONG IEUNG-MIEUM
1144  ; [.3196.0020.0002] # HANGUL CHOSEONG IEUNG-PIEUP
1145  ; [.3197.0020.0002] # HANGUL CHOSEONG IEUNG-SIOS
1146  ; [.3198.0020.0002] # HANGUL CHOSEONG IEUNG-PANSIOS
1147  ; [.3199.0020.0002] # HANGUL CHOSEONG SSANGIEUNG
3180  ; [.3199.0020.0004] # HANGUL LETTER SSANGIEUNG
1148  ; [.319A.0020.0002] # HANGUL CHOSEONG IEUNG-CIEUC
1149  ; [.319B.0020.0002] # HANGUL CHOSEONG IEUNG-CHIEUCH
114A  ; [.319C.0020.0002] # HANGUL CHOSEONG IEUNG-THIEUTH
114B  ; [.319D.0020.0002] # HANGUL CHOSEONG IEUNG-PHIEUPH
114C  ; [.319E.0020.0002] # HANGUL CHOSEONG YESIEUNG
3181  ; [.319E.0020.0004] # HANGUL LETTER YESIEUNG
114D  ; [.319F.0020.0002] # HANGUL CHOSEONG CIEUC-IEUNG
114E  ; [.31A0.0020.0002] # HANGUL CHOSEONG CHITUEUMCIEUC
114F  ; [.31A1.0020.0002] # HANGUL CHOSEONG CHITUEUMSSANGCIEUC
1150  ; [.31A2.0020.0002] # HANGUL CHOSEONG CEONGCHIEUMCIEUC
1151  ; [.31A3.0020.0002] # HANGUL CHOSEONG CEONGCHIEUMSSANGCIEUC
1152  ; [.31A4.0020.0002] # HANGUL CHOSEONG CHIEUCH-KHIEUKH
1153  ; [.31A5.0020.0002] # HANGUL CHOSEONG CHIEUCH-HIEUH
1154  ; [.31A6.0020.0002] # HANGUL CHOSEONG CHITUEUMCHIEUCH
1155  ; [.31A7.0020.0002] # HANGUL CHOSEONG CEONGCHIEUMCHIEUCH
1156  ; [.31A8.0020.0002] # HANGUL CHOSEONG PHIEUPH-PIEUP
1157  ; [.31A9.0020.0002] # HANGUL CHOSEONG KAPYEOUNPHIEUPH
3184  ; [.31A9.0020.0004] # HANGUL LETTER KAPYEOUNPHIEUPH
1158  ; [.31AA.0020.0002] # HANGUL CHOSEONG SSANGHIEUH
3185  ; [.31AA.0020.0004] # HANGUL LETTER SSANGHIEUH
1159  ; [.31AB.0020.0002] # HANGUL CHOSEONG YEORINHIEUH
3186  ; [.31AB.0020.0004] # HANGUL LETTER YEORINHIEUH
115A  ; [.31AC.0020.0002] # HANGUL CHOSEONG KIYEOK-TIKEUT
115B  ; [.31AD.0020.0002] # HANGUL CHOSEONG NIEUN-SIOS
115C  ; [.31AE.0020.0002] # HANGUL CHOSEONG NIEUN-CIEUC
115D  ; [.31AF.0020.0002] # HANGUL CHOSEONG NIEUN-HIEUH
115E  ; [.31B0.0020.0002] # HANGUL CHOSEONG TIKEUT-RIEUL
A960  ; [.31B1.0020.0002] # HANGUL CHOSEONG TIKEUT-MIEUM
A961  ; [.31B2.0020.0002] # HANGUL CHOSEONG TIKEUT-PIEUP
A962  ; [.31B3.0020.0002] # HANGUL CHOSEONG TIKEUT-SIOS
A963  ; [.31B4.0020.0002] # HANGUL CHOSEONG TIKEUT-CIEUC
A964  ; [.31B5.0020.0002] # HANGUL CHOSEONG RIEUL-KIYEOK
A965  ; [.31B6.0020.0002] # HANGUL CHOSEONG RIEUL-SSANGKIYEOK
A966  ; [.31B7.0020.0002] # HANGUL CHOSEONG RIEUL-TIKEUT
A967  ; [.31B8.0020.0002] # HANGUL CHOSEONG RIEUL-SSANGTIKEUT
A968  ; [.31B9.0020.0002] # HANGUL CHOSEONG RIEUL-MIEUM
A969  ; [.31BA.0020.0002] # HANGUL CHOSEONG RIEUL-PIEUP
A96A  ; [.31BB.0020.0002] # HANGUL CHOSEONG RIEUL-SSANGPIEUP
A96B  ; [.31BC.0020.0002] # HANGUL CHOSEONG RIEUL-KAPYEOUNPIEUP
A96C  ; [.31BD.0020.0002] # HANGUL CHOSEONG RIEUL-SIOS
A96D  ; [.31BE.0020.0002] # HANGUL CHOSEONG RIEUL-CIEUC
A96E  ; [.31BF.0020.0002] # HANGUL CHOSEONG RIEUL-KHIEUKH
A96F  ; [.31C0.0020.0002] # HANGUL CHOSEONG MIEUM-KIYEOK
A970  ; [.31C1.0020.0002] # HANGUL CHOSEONG MIEUM-TIKEUT
A971  ; [.31C2.0020.0002] # HANGUL CHOSEONG MIEUM-SIOS
A972  ; [.31C3.0020.0002] # HANGUL CHOSEONG PIEUP-SIOS-THIEUTH
A973  ; [.31C4.0020.0002] # HANGUL CHOSEONG PIEUP-KHIEUKH
A974  ; [.31C5.0020.0002] # HANGUL CHOSEONG PIEUP-HIEUH
A975  ; [.31C6.0020.0002] # HANGUL CHOSEONG SSANGSIOS-PIEUP
A976  ; [.31C7.0020.0002] # HANGUL CHOSEONG IEUNG-RIEUL
A977  ; [.31C8.0020.0002] # HANGUL CHOSEONG IEUNG-HIEUH
A978  ; [.31C9.0020.0002] # HANGUL CHOSEONG SSANGCIEUC-HIEUH
A979  ; [.31CA.0020.0002] # HANGUL CHOSEONG SSANGTHIEUTH
A97A  ; [.31CB.0020.0002] # HANGUL CHOSEONG PHIEUPH-HIEUH
A97B  ; [.31CC.0020.0002] # HANGUL CHOSEONG HIEUH-SIOS
A97C  ; [.31CD.0020.0002] # HANGUL CHOSEONG SSANGYEORINHIEUH
115F  ; [.31CE.0020.0002] # HANGUL CHOSEONG FILLER
1160  ; [.31CF.0020.0002] # HANGUL JUNGSEONG FILLER
3164  ; [.31CF.0020.0004] # HANGUL FILLER
FFA0  ; [.31CF.0020.0012] # HALFWIDTH HANGUL FILLER
1161  ; [.31D0.0020.0002] # HANGUL JUNGSEONG A
314F  ; [.31D0.0020.0004] # HANGUL LETTER A
FFC2  ; [.31D0.0020.0012] # HALFWIDTH HANGUL LETTER A
1162  ; [.31D1.0020.0002] # HANGUL JUNGSEONG AE
3150  ; [.31D1.0020.0004] # HANGUL LETTER AE
FFC3  ; [.31D1.0020.0012] # HALFWIDTH HANGUL LETTER AE
1163  ; [.31D2.0020.0002] # HANGUL JUNGSEONG YA
3151  ; [.31D2.0020.0004] # HANGUL LETTER YA
FFC4  ; [.31D2.0020.0012] # HALFWIDTH HANGUL LETTER YA
1164  ; [.31D3.0020.0002] # HANGUL JUNGSEONG YAE
3152  ; [.31D3.0020.0004] # HANGUL LETTER YAE
FFC5  ; [.31D3.0020.0012] # HALFWIDTH HANGUL LETTER YAE
1165  ; [.31D4.0020.0002] # HANGUL JUNGSEONG EO
3153  ; [.31D4.0020.0004] # HANGUL LETTER EO
FFC6  ; [.31D4.0020.0012] # HALFWIDTH HANGUL LETTER EO
1166  ; [.31D5.0020.0002] # HANGUL JUNGSEONG E
3154  ; [.31D5.0020.0004] # HANGUL LETTER E
FFC7  ; [.31D5.0020.0012] # HALFWIDTH HANGUL LETTER E
1167  ; [.31D6.0020.0002] # HANGUL JUNGSEONG YEO
3155  ; [.31D6.0020.0004] # HANGUL LETTER YEO
FFCA  ; [.31D6.0020.0012] # HALFWIDTH HANGUL LETTER YEO
1168  ; [.31D7.0020.0002] # HANGUL JUNGSEONG YE
3156  ; [.31D7.0020.0004] # HANGUL LETTER YE
FFCB  ; [.31D7.0020.0012] # HALFWIDTH HANGUL LETTER YE
1169  ; [.31D8.0020.0002] # HANGUL JUNGSEONG O
3157  ; [.31D8.0020.0004] # HANGUL LETTER O
FFCC  ; [.31D8.0020.0012] # HALFWIDTH HANGUL LETTER O
116A  ; [.31D9.0020.0002] # HANGUL JUNGSEONG WA
3158  ; [.31D9.0020.0004] # HANGUL LETTER WA
FFCD  ; [.31D9.0020.0012] # HALFWIDTH HANGUL LETTER WA
116B  ; [.31DA.0020.0002] # HANGUL JUNGSEONG WAE
3159  ; [.31DA.0020.0004] # HANGUL LETTER WAE
FFCE  ; [.31DA.0020.0012] # HALFWIDTH HANGUL LETTER WAE
116C  ; [.31DB.0020.0002] # HANGUL JUNGSEONG OE
315A  ; [.31DB.0020.0004] # HANGUL LETTER OE
FFCF  ; [.31DB.0020.0012] # HALFWIDTH HANGUL LETTER OE
116D  ; [.31DC.0020.0002] # HANGUL JUNGSEONG YO
315B  ; [.31DC.0020.0004] # HANGUL LETTER YO
FFD2  ; [.31DC.0020.0012] # HALFWIDTH HANGUL LETTER YO
116E  ; [.31DD.0020.0002] # HANGUL JUNGSEONG U
315C  ; [.31DD.0020.0004] # HANGUL LETTER U
FFD3  ; [.31DD.0020.0012] # HALFWIDTH HANGUL LETTER U
116F  ; [.31DE.0020.0002] # HANGUL JUNGSEONG WEO
315D  ; [.31DE.0020.0004] # HANGUL LETTER WEO
FFD4  ; [.31DE.0020.0012] # HALFWIDTH HANGUL LETTER WEO
1170  ; [.31DF.0020.0002] # HANGUL JUNGSEONG WE
315E  ; [.31DF.0020.0004] # HANGUL LETTER WE
FFD5  ; [.31DF.0020.0012] # HALFWIDTH HANGUL LETTER WE
1171  ; [.31E0.0020.0002] # HANGUL JUNGSEONG WI
315F  ; [.31E0.0020.0004] # HANGUL LETTER WI
FFD6  ; [.31E0.0020.0012] # HALFWIDTH HANGUL LETTER WI
1172  ; [.31E1.0020.0002] # HANGUL JUNGSEONG YU
3160  ; [.31E1.0020.0004] # HANGUL LETTER YU
FFD7  ; [.31E1.0020.0012] # HALFWIDTH HANGUL LETTER YU
1173  ; [.31E2.0020.0002] # HANGUL JUNGSEONG EU
3161  ; [.31E2.0020.0004] # HANGUL LETTER EU
FFDA  ; [.31E2.0020.0012] # HALFWIDTH HANGUL LETTER EU
1174  ; [.31E3.0020.0002] # HANGUL JUNGSEONG YI
3162  ; [.31E3.0020.0004] # HANGUL LETTER YI
FFDB  ; [.31E3.0020.0012] # HALFWIDTH HANGUL LETTER YI
1175  ; [.31E4.0020.0002] # HANGUL JUNGSEONG I
3163  ; [.31E4.0020.0004] # HANGUL LETTER I
FFDC  ; [.31E4.0020.0012] # HALFWIDTH HANGUL LETTER I
1176  ; [.31E5.0020.0002] # HANGUL JUNGSEONG A-O
1177  ; [.31E6.0020.0002] # HANGUL JUNGSEONG A-U
1178  ; [.31E7.0020.0002] # HANGUL JUNGSEONG YA-O
1179  ; [.31E8.0020.0002] # HANGUL JUNGSEONG YA-YO
117A  ; [.31E9.0020.0002] # HANGUL JUNGSEONG EO-O
117B  ; [.31EA.0020.0002] # HANGUL JUNGSEONG EO-U
117C  ; [.31EB.0020.0002] # HANGUL JUNGSEONG EO-EU
117D  ; [.31EC.0020.0002] # HANGUL JUNGSEONG YEO-O
117E  ; [.31ED.0020.0002] # HANGUL JUNGSEONG YEO-U
117F  ; [.31EE.0020.0002] # HANGUL JUNGSEONG O-EO
1180  ; [.31EF.0020.0002] # HANGUL JUNGSEONG O-E
1181  ; [.31F0.0020.0002] # HANGUL JUNGSEONG O-YE
1182  ; [.31F1.0020.0002] # HANGUL JUNGSEONG O-O
1183  ; [.31F2.0020.0002] # HANGUL JUNGSEONG O-U
1184  ; [.31F3.0020.0002] # HANGUL JUNGSEONG YO-YA
3187  ; [.31F3.0020.0004] # HANGUL LETTER YO-YA
1185  ; [.31F4.0020.0002] # HANGUL JUNGSEONG YO-YAE
3188  ; [.31F4.0020.0004] # HANGUL LETTER YO-YAE
1186  ; [.31F5.0020.0002] # HANGUL JUNGSEONG YO-YEO
1187  ; [.31F6.0020.0002] # HANGUL JUNGSEONG YO-O
1188  ; [.31F7.0020.0002] # HANGUL JUNGSEONG YO-I
3189  ; [.31F7.0020.0004] # HANGUL LETTER YO-I
1189  ; [.31F8.0020.0002] # HANGUL JUNGSEONG U-A
118A  ; [.31F9.0020.0002] # HANGUL JUNGSEONG U-AE
118B  ; [.31FA.0020.0002] # HANGUL JUNGSEONG U-EO-EU
118C  ; [.31FB.0020.0002] # HANGUL JUNGSEONG U-YE
118D  ; [.31FC.0020.0002] # HANGUL JUNGSEONG U-U
118E  ; [.31FD.0020.0002] # HANGUL JUNGSEONG YU-A
118F  ; [.31FE.0020.0002] # HANGUL JUNGSEONG YU-EO
1190  ; [.31FF.0020.0002] # HANGUL JUNGSEONG YU-E
1191  ; [.3200.0020.0002] # HANGUL JUNGSEONG YU-YEO
318A  ; [.3200.0020.0004] # HANGUL LETTER YU-YEO
1192  ; [.3201.0020.0002] # HANGUL JUNGSEONG YU-YE
318B  ; [.3201.0020.0004] # HANGUL LETTER YU-YE
1193  ; [.3202.0020.0002] # HANGUL JUNGSEONG YU-U
1194  ; [.3203.0020.0002] # HANGUL JUNGSEONG YU-I
318C  ; [.3203.0020.0004] # HANGUL LETTER YU-I
1195  ; [.3204.0020.0002] # HANGUL JUNGSEONG EU-U
1196  ; [.3205.0020.0002] # HANGUL JUNGSEONG EU-EU
1197  ; [.3206.0020.0002] # HANGUL JUNGSEONG YI-U
1198  ; [.3207.0020.0002] # HANGUL JUNGSEONG I-A
1199  ; [.3208.0020.0002] # HANGUL JUNGSEONG I-YA
119A  ; [.3209.0020.0002] # HANGUL JUNGSEONG I-O
119B  ; [.320A.0020.0002] # HANGUL JUNGSEONG I-U
119C  ; [.320B.0020.0002] # HANGUL JUNGSEONG I-EU
119D  ; [.320C.0020.0002] # HANGUL JUNGSEONG I-ARAEA
119E  ; [.320D.0020.0002] # HANGUL JUNGSEONG ARAEA
318D  ; [.320D.0020.0004] # HANGUL LETTER ARAEA
119F  ; [.320E.0020.0002] # HANGUL JUNGSEONG ARAEA-EO
11A0  ; [.320F.0020.0002] # HANGUL JUNGSEONG ARAEA-U
11A1  ; [.3210.0020.0002] # HANGUL JUNGSEONG ARAEA-I
318E  ; [.3210.0020.0004] # HANGUL LETTER ARAEAE
11A2  ; [.3211.0020.0002] # HANGUL JUNGSEONG SSANGARAEA
11A3  ; [.3212.0020.0002] # HANGUL JUNGSEONG A-EU
11A4  ; [.3213.0020.0002] # HANGUL JUNGSEONG YA-U
11A5  ; [.3214.0020.0002] # HANGUL JUNGSEONG YEO-YA
11A6  ; [.3215.0020.0002] # HANGUL JUNGSEONG O-YA
11A7  ; [.3216.0020.0002] # HANGUL JUNGSEONG O-YAE
D7B0  ; [.3217.0020.0002] # HANGUL JUNGSEONG O-YEO
D7B1  ; [.3218.0020.0002] # HANGUL JUNGSEONG O-O-I
D7B2  ; [.3219.0020.0002] # HANGUL JUNGSEONG YO-A
D7B3  ; [.321A.0020.0002] # HANGUL JUNGSEONG YO-AE
D7B4  ; [.321B.0020.0002] # HANGUL JUNGSEONG YO-EO
D7B5  ; [.321C.0020.0002] # HANGUL JUNGSEONG U-YEO
D7B6  ; [.321D.0020.0002] # HANGUL JUNGSEONG U-I-I
D7B7  ; [.321E.0020.0002] # HANGUL JUNGSEONG YU-AE
D7B8  ; [.321F.0020.0002] # HANGUL JUNGSEONG YU-O
D7B9  ; [.3220.0020.0002] # HANGUL JUNGSEONG EU-A
D7BA  ; [.3221.0020.0002] # HANGUL JUNGSEONG EU-EO
D7BB  ; [.3222.0020.0002] # HANGUL JUNGSEONG EU-E
D7BC  ; [.3223.0020.0002] # HANGUL JUNGSEONG EU-O
D7BD  ; [.3224.0020.0002] # HANGUL JUNGSEONG I-YA-O
D7BE  ; [.3225.0020.0002] # HANGUL JUNGSEONG I-YAE
D7BF  ; [.3226.0020.0002] # HANGUL JUNGSEONG I-YEO
D7C0  ; [.3227.0020.0002] # HANGUL JUNGSEONG I-YE
D7C1  ; [.3228.0020.0002] # HANGUL JUNGSEONG I-O-I
D7C2  ; [.3229.0020.0002] # HANGUL JUNGSEONG I-YO
D7C3  ; [.322A.0020.0002] # HANGUL JUNGSEONG I-YU
D7C4  ; [.322B.0020.0002] # HANGUL JUNGSEONG I-I
D7C5  ; [.322C.0020.0002] # HANGUL JUNGSEONG ARAEA-A
D7C6  ; [.322D.0020.0002] # HANGUL JUNGSEONG ARAEA-E
11A8  ; [.322E.0020.0002] # HANGUL JONGSEONG KIYEOK
11A9  ; [.322F.0020.0002] # HANGUL JONGSEONG SSANGKIYEOK
11AA  ; [.3230.0020.0002] # HANGUL JONGSEONG KIYEOK-SIOS
3133  ; [.3230.0020.0004] # HANGUL LETTER KIYEOK-SIOS
FFA3  ; [.3230.0020.0012] # HALFWIDTH HANGUL LETTER KIYEOK-SIOS
11AB  ; [.3231.0020.0002] # HANGUL JONGSEONG NIEUN
11AC  ; [.3232.0020.0002] # HANGUL JONGSEONG NIEUN-CIEUC
3135  ; [.3232.0020.0004] # HANGUL LETTER NIEUN-CIEUC
FFA5  ; [.3232.0020.0012] # HALFWIDTH HANGUL LETTER NIEUN-CIEUC
11AD  ; [.3233.0020.0002] # HANGUL JONGSEONG NIEUN-HIEUH
3136  ; [.3233.0020.0004] # HANGUL LETTER NIEUN-HIEUH
FFA6  ; [.3233.0020.0012] # HALFWIDTH HANGUL LETTER NIEUN-HIEUH
11AE  ; [.3234.0020.0002] # HANGUL JONGSEONG TIKEUT
11AF  ; [.3235.0020.0002] # HANGUL JONGSEONG RIEUL
11B0  ; [.3236.0020.0002] # HANGUL JONGSEONG RIEUL-KIYEOK
313A  ; [.3236.0020.0004] # HANGUL LETTER RIEUL-KIYEOK
FFAA  ; [.3236.0020.0012] # HALFWIDTH HANGUL LETTER RIEUL-KIYEOK
11B1  ; [.3237.0020.0002] # HANGUL JONGSEONG RIEUL-MIEUM
313B  ; [.3237.0020.0004] # HANGUL LETTER RIEUL-MIEUM
FFAB  ; [.3237.0020.0012] # HALFWIDTH HANGUL LETTER RIEUL-MIEUM
11B2  ; [.3238.0020.0002] # HANGUL JONGSEONG RIEUL-PIEUP
313C  ; [.3238.0020.0004] # HANGUL LETTER RIEUL-PIEUP
FFAC  ; [.3238.0020.0012] # HALFWIDTH HANGUL LETTER RIEUL-PIEUP
11B3  ; [.3239.0020.0002] # HANGUL JONGSEONG RIEUL-SIOS
313D  ; [.3239.0020.0004] # HANGUL LETTER RIEUL-SIOS
FFAD  ; [.3239.0020.0012] # HALFWIDTH HANGUL LETTER RIEUL-SIOS
11B4  ; [.323A.0020.0002] # HANGUL JONGSEONG RIEUL-THIEUTH
313E  ; [.323A.0020.0004] # HANGUL LETTER RIEUL-THIEUTH
FFAE  ; [.323A.0020.0012] # HALFWIDTH HANGUL LETTER RIEUL-THIEUTH
11B5  ; [.323B.0020.0002] # HANGUL JONGSEONG RIEUL-PHIEUPH
313F  ; [.323B.0020.0004] # HANGUL LETTER RIEUL-PHIEUPH
FFAF  ; [.323B.0020.0012] # HALFWIDTH HANGUL LETTER RIEUL-PHIEUPH
11B6  ; [.323C.0020.0002] # HANGUL JONGSEONG RIEUL-HIEUH
11B7  ; [.323D.0020.0002] # HANGUL JONGSEONG MIEUM
11B8  ; [.323E.0020.0002] # HANGUL JONGSEONG PIEUP
11B9  ; [.323F.0020.0002] # HANGUL JONGSEONG PIEUP-SIOS
11BA  ; [.3240.0020.0002] # HANGUL JONGSEONG SIOS
11BB  ; [.3241.0020.0002] # HANGUL JONGSEONG SSANGSIOS
11BC  ; [.3242.0020.0002] # HANGUL JONGSEONG IEUNG
11BD  ; [.3243.0020.0002] # HANGUL JONGSEONG CIEUC
11BE  ; [.3244.0020.0002] # HANGUL JONGSEONG CHIEUCH
11BF  ; [.3245.0020.0002] # HANGUL JONGSEONG KHIEUKH
11C0  ; [.3246.0020.0002] # HANGUL JONGSEONG THIEUTH
11C1  ; [.3247.0020.0002] # HANGUL JONGSEONG PHIEUPH
11C2  ; [.3248.0020.0002] # HANGUL JONGSEONG HIEUH
11C3  ; [.3249.0020.0002] # HANGUL JONGSEONG KIYEOK-RIEUL
11C4  ; [.324A.0020.0002] # HANGUL JONGSEONG KIYEOK-SIOS-KIYEOK
11C5  ; [.324B.0020.0002] # HANGUL JONGSEONG NIEUN-KIYEOK
11C6  ; [.324C.0020.0002] # HANGUL JONGSEONG NIEUN-TIKEUT
11C7  ; [.324D.0020.0002] # HANGUL JONGSEONG NIEUN-SIOS
3167  ; [.324D.0020.0004] # HANGUL LETTER NIEUN-SIOS
11C8  ; [.324E.0020.0002] # HANGUL JONGSEONG NIEUN-PANSIOS
3168  ; [.324E.0020.0004] # HANGUL LETTER NIEUN-PANSIOS
11C9  ; [.324F.0020.0002] # HANGUL JONGSEONG NIEUN-THIEUTH
11CA  ; [.3250.0020.0002] # HANGUL JONGSEONG TIKEUT-KIYEOK
11CB  ; [.3251.0020.0002] # HANGUL JONGSEONG TIKEUT-RIEUL
11CC  ; [.3252.0020.0002] # HANGUL JONGSEONG RIEUL-KIYEOK-SIOS
3169  ; [.3252.0020.0004] # HANGUL LETTER RIEUL-KIYEOK-SIOS
11CD  ; [.3253.0020.0002] # HANGUL JONGSEONG RIEUL-NIEUN
11CE  ; [.3254.0020.0002] # HANGUL JONGSEONG RIEUL-TIKEUT
316A  ; [.3254.0020.0004] # HANGUL LETTER RIEUL-TIKEUT
11CF  ; [.3255.0020.0002] # HANGUL JONGSEONG RIEUL-TIKEUT-HIEUH
11D0  ; [.3256.0020.0002] # HANGUL JONGSEONG SSANGRIEUL
11D1  ; [.3257.0020.0002] # HANGUL JONGSEONG RIEUL-MIEUM-KIYEOK
11D2  ; [.3258.0020.0002] # HANGUL JONGSEONG RIEUL-MIEUM-SIOS
11D3  ; [.3259.0020.0002] # HANGUL JONGSEONG RIEUL-PIEUP-SIOS
316B  ; [.3259.0020.0004] # HANGUL LETTER RIEUL-PIEUP-SIOS
11D4  ; [.325A.0020.0002] # HANGUL JONGSEONG RIEUL-PIEUP-HIEUH
11D5  ; [.325B.0020.0002] # HANGUL JONGSEONG RIEUL-KAPYEOUNPIEUP
11D6  ; [.325C.0020.0002] # HANGUL JONGSEONG RIEUL-SSANGSIOS
11D7  ; [.325D.0020.0002] # HANGUL JONGSEONG RIEUL-PANSIOS
316C  ; [.325D.0020.0004] # HANGUL LETTER RIEUL-PANSIOS
11D8  ; [.325E.0020.0002] # HANGUL JONGSEONG RIEUL-KHIEUKH
11D9  ; [.325F.0020.0002] # HANGUL JONGSEONG RIEUL-YEORINHIEUH
316D  ; [.325F.0020.0004] # HANGUL LETTER RIEUL-YEORINHIEUH
11DA  ; [.3260.0020.0002] # HANGUL JONGSEONG MIEUM-KIYEOK
11DB  ; [.3261.0020.0002] # HANGUL JONGSEONG MIEUM-RIEUL
11DC  ; [.3262.0020.0002] # HANGUL JONGSEONG MIEUM-PIEUP
11DD  ; [.3263.0020.0002] # HANGUL JONGSEONG MIEUM-SIOS
316F  ; [.3263.0020.0004] # HANGUL LETTER MIEUM-SIOS
11DE  ; [.3264.0020.0002] # HANGUL JONGSEONG MIEUM-SSANGSIOS
11DF  ; [.3265.0020.0002] # HANGUL JONGSEONG MIEUM-PANSIOS
3170  ; [.3265.0020.0004] # HANGUL LETTER MIEUM-PANSIOS
11E0  ; [.3266.0020.0002] # HANGUL JONGSEONG MIEUM-CHIEUCH
11E1  ; [.3267.0020.0002] # HANGUL JONGSEONG MIEUM-HIEUH
11E2  ; [.3268.0020.0002] # HANGUL JONGSEONG KAPYEOUNMIEUM
11E3  ; [.3269.0020.0002] # HANGUL JONGSEONG PIEUP-RIEUL
11E4  ; [.326A.0020.0002] # HANGUL JONGSEONG PIEUP-PHIEUPH
11E5  ; [.326B.0020.0002] # HANGUL JONGSEONG PIEUP-HIEUH
11E6  ; [.326C.0020.0002] # HANGUL JONGSEONG KAPYEOUNPIEUP
11E7  ; [.326D.0020.0002] # HANGUL JONGSEONG SIOS-KIYEOK
11E8  ; [.326E.0020.0002] # HANGUL JONGSEONG SIOS-TIKEUT
11E9  ; [.326F.0020.0002] # HANGUL JONGSEONG SIOS-RIEUL
11EA  ; [.3270.0020.0002] # HANGUL JONGSEONG SIOS-PIEUP
11EB  ; [.3271.0020.0002] # HANGUL JONGSEONG PANSIOS
11EC  ; [.3272.0020.0002] # HANGUL JONGSEONG IEUNG-KIYEOK
11ED  ; [.3273.0020.0002] # HANGUL JONGSEONG IEUNG-SSANGKIYEOK
11EE  ; [.3274.0020.0002] # HANGUL JONGSEONG SSANGIEUNG
11EF  ; [.3275.0020.0002] # HANGUL JONGSEONG IEUNG-KHIEUKH
11F0  ; [.3276.0020.0002] # HANGUL JONGSEONG YESIEUNG
11F1  ; [.3277.0020.0002] # HANGUL JONGSEONG YESIEUNG-SIOS
3182  ; [.3277.0020.0004] # HANGUL LETTER YESIEUNG-SIOS
11F2  ; [.3278.0020.0002] # HANGUL JONGSEONG YESIEUNG-PANSIOS
3183  ; [.3278.0020.0004] # HANGUL LETTER YESIEUNG-PANSIOS
11F3  ; [.3279.0020.0002] # HANGUL JONGSEONG PHIEUPH-PIEUP
11F4  ; [.327A.0020.0002] # HANGUL JONGSEONG KAPYEOUNPHIEUPH
11F5  ; [.327B.0020.0002] # HANGUL JONGSEONG HIEUH-NIEUN
11F6  ; [.327C.0020.0002] # HANGUL JONGSEONG HIEUH-RIEUL
11F7  ; [.327D.0020.0002] # HANGUL JONGSEONG HIEUH-MIEUM
11F8  ; [.327E.0020.0002] # HANGUL JONGSEONG HIEUH-PIEUP
11F9  ; [.327F.0020.0002] # HANGUL JONGSEONG YEORINHIEUH
11FA  ; [.3280.0020.0002] # HANGUL JONGSEONG KIYEOK-NIEUN
11FB  ; [.3281.0020.0002] # HANGUL JONGSEONG KIYEOK-PIEUP
11FC  ; [.3282.0020.0002] # HANGUL JONGSEONG KIYEOK-CHIEUCH
11FD  ; [.3283.0020.0002] # HANGUL JONGSEONG KIYEOK-KHIEUKH
11FE  ; [.3284.0020.0002] # HANGUL JONGSEONG KIYEOK-HIEUH
11FF  ; [.3285.0020.0002] # HANGUL JONGSEONG SSANGNIEUN
D7CB  ; [.3286.0020.0002] # HANGUL JONGSEONG NIEUN-RIEUL
D7CC  ; [.3287.0020.0002] # HANGUL JONGSEONG NIEUN-CHIEUCH
D7CD  ; [.3288.0020.0002] # HANGUL JONGSEONG SSANGTIKEUT
D7CE  ; [.3289.0020.0002] # HANGUL JONGSEONG SSANGTIKEUT-PIEUP
D7CF  ; [.328A.0020.0002] # HANGUL JONGSEONG TIKEUT-PIEUP
D7D0  ; [.328B.0020.0002] # HANGUL JONGSEONG TIKEUT-SIOS
D7D1  ; [.328C.0020.0002] # HANGUL JONGSEONG TIKEUT-SIOS-KIYEOK
D7D2  ; [.328D.0020.0002] # HANGUL JONGSEONG TIKEUT-CIEUC
D7D3  ; [.328E.0020.0002] # HANGUL JONGSEONG TIKEUT-CHIEUCH
D7D4  ; [.328F.0020.0002] # HANGUL JONGSEONG TIKEUT-THIEUTH
D7D5  ; [.3290.0020.0002] # HANGUL JONGSEONG RIEUL-SSANGKIYEOK
D7D6  ; [.3291.0020.0002] # HANGUL JONGSEONG RIEUL-KIYEOK-HIEUH
D7D7  ; [.3292.0020.0002] # HANGUL JONGSEONG SSANGRIEUL-KHIEUKH
D7D8  ; [.3293.0020.0002] # HANGUL JONGSEONG RIEUL-MIEUM-HIEUH
D7D9  ; [.3294.0020.0002] # HANGUL JONGSEONG RIEUL-PIEUP-TIKEUT
D7DA  ; [.3295.0020.0002] # HANGUL JONGSEONG RIEUL-PIEUP-PHIEUPH
D7DB  ; [.3296.0020.0002] # HANGUL JONGSEONG RIEUL-YESIEUNG
D7DC  ; [.3297.0020.0002] # HANGUL JONGSEONG RIEUL-YEORINHIEUH-HIEUH
D7DD  ; [.3298.0020.0002] # HANGUL JONGSEONG KAPYEOUNRIEUL
D7DE  ; [.3299.0020.0002] # HANGUL JONGSEONG MIEUM-NIEUN
D7DF  ; [.329A.0020.0002] # HANGUL JONGSEONG MIEUM-SSANGNIEUN
D7E0  ; [.329B.0020.0002] # HANGUL JONGSEONG SSANGMIEUM
D7E1  ; [.329C.0020.0002] # HANGUL JONGSEONG MIEUM-PIEUP-SIOS
D7E2  ; [.329D.0020.0002] # HANGUL JONGSEONG MIEUM-CIEUC
D7E3  ; [.329E.0020.0002] # HANGUL JONGSEONG PIEUP-TIKEUT
D7E4  ; [.329F.0020.0002] # HANGUL JONGSEONG PIEUP-RIEUL-PHIEUPH
D7E5  ; [.32A0.0020.0002] # HANGUL JONGSEONG PIEUP-MIEUM
D7E6  ; [.32A1.0020.0002] # HANGUL JONGSEONG SSANGPIEUP
D7E7  ; [.32A2.0020.0002] # HANGUL JONGSEONG PIEUP-SIOS-TIKEUT
D7E8  ; [.32A3.0020.0002] # HANGUL JONGSEONG PIEUP-CIEUC
D7E9  ; [.32A4.0020.0002] # HANGUL JONGSEONG PIEUP-CHIEUCH
D7EA  ; [.32A5.0020.0002] # HANGUL JONGSEONG SIOS-MIEUM
D7EB  ; [.32A6.0020.0002] # HANGUL JONGSEONG SIOS-KAPYEOUNPIEUP
D7EC  ; [.32A7.0020.0002] # HANGUL JONGSEONG SSANGSIOS-KIYEOK
D7ED  ; [.32A8.0020.0002] # HANGUL JONGSEONG SSANGSIOS-TIKEUT
D7EE  ; [.32A9.0020.0002] # HANGUL JONGSEONG SIOS-PANSIOS
D7EF  ; [.32AA.0020.0002] # HANGUL JONGSEONG SIOS-CIEUC
D7F0  ; [.32AB.0020.0002] # HANGUL JONGSEONG SIOS-CHIEUCH
D7F1  ; [.32AC.0020.0002] # HANGUL JONGSEONG SIOS-THIEUTH
D7F2  ; [.32AD.0020.0002] # HANGUL JONGSEONG SIOS-HIEUH
D7F3  ; [.32AE.0020.0002] # HANGUL JONGSEONG PANSIOS-PIEUP
D7F4  ; [.32AF.0020.0002] # HANGUL JONGSEONG PANSIOS-KAPYEOUNPIEUP
D7F5  ; [.32B0.0020.0002] # HANGUL JONGSEONG YESIEUNG-MIEUM
D7F6  ; [.32B1.0020.0002] # HANGUL JONGSEONG YESIEUNG-HIEUH
D7F7  ; [.32B2.0020.0002] # HANGUL JONGSEONG CIEUC-PIEUP
D7F8  ; [.32B3.0020.0002] # HANGUL JONGSEONG CIEUC-SSANGPIEUP
D7F9  ; [.32B4.0020.0002] # HANGUL JONGSEONG SSANGCIEUC
D7FA  ; [.32B5.0020.0002] # HANGUL JONGSEONG PHIEUPH-SIOS
D7FB  ; [.32B6.0020.0002] # HANGUL JONGSEONG PHIEUPH-THIEUTH
3041  ; [.32B7.0020.000D] # HIRAGANA LETTER SMALL A
3042  ; [.32B7.0020.000E] # HIRAGANA LETTER A
30A1  ; [.32B7.0020.000F] # KATAKANA LETTER SMALL A
FF67  ; [.32B7.0020.0010] # HALFWIDTH KATAKANA LETTER SMALL A
30A2  ; [.32B7.0020.0011] # KATAKANA LETTER A
FF71  ; [.32B7.0020.0012] # HALFWIDTH KATAKANA LETTER A
32D0  ; [.32B7.0020.0013] # CIRCLED KATAKANA A
3303  ; [.32B7.0020.001C][.15B6.0020.001C][.32E1.0020.001C] # SQUARE AARU
3300  ; [.32B7.0020.001C][.32D1.0020.001C][.0000.0038.001C][.15B6.0020.001C][.32CB.0020.001C] # SQUARE APAATO
3301  ; [.32B7.0020.001C][.32E1.0020.001C][.32D3.0020.001C][.32B7.0020.001C] # SQUARE ARUHUA
3302  ; [.32B7.0020.001C][.32E8.0020.001C][.32D4.0020.001C][.0000.0038.001C][.32B7.0020.001C] # SQUARE ANPEA
3043  ; [.32B8.0020.000D] # HIRAGANA LETTER SMALL I
3044  ; [.32B8.0020.000E] # HIRAGANA LETTER I
30A3  ; [.32B8.0020.000F] # KATAKANA LETTER SMALL I
FF68  ; [.32B8.0020.0010] # HALFWIDTH KATAKANA LETTER SMALL I
30A4  ; [.32B8.0020.0011] # KATAKANA LETTER I
FF72  ; [.32B8.0020.0012] # HALFWIDTH KATAKANA LETTER I
32D1  ; [.32B8.0020.0013] # CIRCLED KATAKANA I
3304  ; [.32B8.0020.001C][.32CD.0020.001C][.32E8.0020.001C][.32BF.0020.001C][.0000.0037.001C] # SQUARE ININGU
3305  ; [.32B8.0020.001C][.32E8.0020.001C][.32C8.0020.001C] # SQUARE INTI
3045  ; [.32B9.0020.000D] # HIRAGANA LETTER SMALL U
3046  ; [.32B9.0020.000E] # HIRAGANA LETTER U
30A5  ; [.32B9.0020.000F] # KATAKANA LETTER SMALL U
FF69  ; [.32B9.0020.0010] # HALFWIDTH KATAKANA LETTER SMALL U
30A6  ; [.32B9.0020.0011] # KATAKANA LETTER U
FF73  ; [.32B9.0020.0012] # HALFWIDTH KATAKANA LETTER U
32D2  ; [.32B9.0020.0013] # CIRCLED KATAKANA U
3094  ; [.32B9.0020.000E][.0000.0037.0002] # HIRAGANA LETTER VU
30F4  ; [.32B9.0020.0011][.0000.0037.0002] # KATAKANA LETTER VU
3306  ; [.32B9.0020.001C][.32BC.0020.001C][.32E8.0020.001C] # SQUARE UON
1B000 ; [.32BA.0020.0011] # KATAKANA LETTER ARCHAIC E
3047  ; [.32BB.0020.000D] # HIRAGANA LETTER SMALL E
3048  ; [.32BB.0020.000E] # HIRAGANA LETTER E
30A7  ; [.32BB.0020.000F] # KATAKANA LETTER SMALL E
FF6A  ; [.32BB.0020.0010] # HALFWIDTH KATAKANA LETTER SMALL E
30A8  ; [.32BB.0020.0011] # KATAKANA LETTER E
FF74  ; [.32BB.0020.0012] # HALFWIDTH KATAKANA LETTER E
32D3  ; [.32BB.0020.0013] # CIRCLED KATAKANA E
3308  ; [.32BB.0020.001C][.15B6.0020.001C][.32BD.0020.001C][.15B6.0020.001C] # SQUARE EEKAA
3307  ; [.32BB.0020.001C][.32C4.0020.001C][.32BF.0020.001C][.15B6.0020.001C][.32CB.0020.001C][.0000.0037.001C] # SQUARE ESUKUUDO
3049  ; [.32BC.0020.000D] # HIRAGANA LETTER SMALL O
304A  ; [.32BC.0020.000E] # HIRAGANA LETTER O
30A9  ; [.32BC.0020.000F] # KATAKANA LETTER SMALL O
FF6B  ; [.32BC.0020.0010] # HALFWIDTH KATAKANA LETTER SMALL O
30AA  ; [.32BC.0020.0011] # KATAKANA LETTER O
FF75  ; [.32BC.0020.0012] # HALFWIDTH KATAKANA LETTER O
32D4  ; [.32BC.0020.0013] # CIRCLED KATAKANA O
330A  ; [.32BC.0020.001C][.15B6.0020.001C][.32D8.0020.001C] # SQUARE OOMU
3309  ; [.32BC.0020.001C][.32E8.0020.001C][.32C4.0020.001C] # SQUARE ONSU
3095  ; [.32BD.0020.000D] # HIRAGANA LETTER SMALL KA
304B  ; [.32BD.0020.000E] # HIRAGANA LETTER KA
30F5  ; [.32BD.0020.000F] # KATAKANA LETTER SMALL KA
30AB  ; [.32BD.0020.0011] # KATAKANA LETTER KA
FF76  ; [.32BD.0020.0012] # HALFWIDTH KATAKANA LETTER KA
32D5  ; [.32BD.0020.0013] # CIRCLED KATAKANA KA
304C  ; [.32BD.0020.000E][.0000.0037.0002] # HIRAGANA LETTER GA
30AC  ; [.32BD.0020.0011][.0000.0037.0002] # KATAKANA LETTER GA
330B  ; [.32BD.0020.001C][.32B8.0020.001C][.32E0.0020.001C] # SQUARE KAIRI
330C  ; [.32BD.0020.001C][.32DF.0020.001C][.32C9.0020.001C][.32CB.0020.001C] # SQUARE KARATTO
330D  ; [.32BD.0020.001C][.32E3.0020.001C][.32E0.0020.001C][.15B6.0020.001C] # SQUARE KARORII
330E  ; [.32BD.0020.001C][.0000.0037.001C][.32E3.0020.001C][.32E8.0020.001C] # SQUARE GARON
330F  ; [.32BD.0020.001C][.0000.0037.001C][.32E8.0020.001C][.32D6.0020.001C] # SQUARE GANMA
304D  ; [.32BE.0020.000E] # HIRAGANA LETTER KI
30AD  ; [.32BE.0020.0011] # KATAKANA LETTER KI
FF77  ; [.32BE.0020.0012] # HALFWIDTH KATAKANA LETTER KI
32D6  ; [.32BE.0020.0013] # CIRCLED KATAKANA KI
304E  ; [.32BE.0020.000E][.0000.0037.0002] # HIRAGANA LETTER GI
30AE  ; [.32BE.0020.0011][.0000.0037.0002] # KATAKANA LETTER GI
3310  ; [.32BE.0020.001C][.0000.0037.001C][.32BD.0020.001C][.0000.0037.001C] # SQUARE GIGA
3311  ; [.32BE.0020.001C][.0000.0037.001C][.32CD.0020.001C][.15B6.0020.001C] # SQUARE GINII
3312  ; [.32BE.0020.001C][.32DC.0020.001C][.32E0.0020.001C][.15B6.0020.001C] # SQUARE KYURII
3313  ; [.32BE.0020.001C][.0000.0037.001C][.32E1.0020.001C][.32C7.0020.001C][.0000.0037.001C][.15B6.0020.001C] # SQUARE GIRUDAA
3314  ; [.32BE.0020.001C][.32E3.0020.001C] # SQUARE KIRO
3315  ; [.32BE.0020.001C][.32E3.0020.001C][.32BF.0020.001C][.0000.0037.001C][.32DF.0020.001C][.32D8.0020.001C] # SQUARE KIROGURAMU
3316  ; [.32BE.0020.001C][.32E3.0020.001C][.32D9.0020.001C][.15B6.0020.001C][.32CB.0020.001C][.32E1.0020.001C] # SQUARE KIROMEETORU
3317  ; [.32BE.0020.001C][.32E3.0020.001C][.32E4.0020.001C][.32C9.0020.001C][.32CB.0020.001C] # SQUARE KIROWATTO
304F  ; [.32BF.0020.000E] # HIRAGANA LETTER KU
31F0  ; [.32BF.0020.000F] # KATAKANA LETTER SMALL KU
30AF  ; [.32BF.0020.0011] # KATAKANA LETTER KU
FF78  ; [.32BF.0020.0012] # HALFWIDTH KATAKANA LETTER KU
32D7  ; [.32BF.0020.0013] # CIRCLED KATAKANA KU
3050  ; [.32BF.0020.000E][.0000.0037.0002] # HIRAGANA LETTER GU
30B0  ; [.32BF.0020.0011][.0000.0037.0002] # KATAKANA LETTER GU
3318  ; [.32BF.0020.001C][.0000.0037.001C][.32DF.0020.001C][.32D8.0020.001C] # SQUARE GURAMU
3319  ; [.32BF.0020.001C][.0000.0037.001C][.32DF.0020.001C][.32D8.0020.001C][.32CB.0020.001C][.32E8.0020.001C] # SQUARE GURAMUTON
331A  ; [.32BF.0020.001C][.32E1.0020.001C][.32C5.0020.001C][.0000.0037.001C][.32B8.0020.001C][.32E3.0020.001C] # SQUARE KURUZEIRO
331B  ; [.32BF.0020.001C][.32E3.0020.001C][.15B6.0020.001C][.32CF.0020.001C] # SQUARE KUROONE
3096  ; [.32C0.0020.000D] # HIRAGANA LETTER SMALL KE
3051  ; [.32C0.0020.000E] # HIRAGANA LETTER KE
30F6  ; [.32C0.0020.000F] # KATAKANA LETTER SMALL KE
30B1  ; [.32C0.0020.0011] # KATAKANA LETTER KE
FF79  ; [.32C0.0020.0012] # HALFWIDTH KATAKANA LETTER KE
32D8  ; [.32C0.0020.0013] # CIRCLED KATAKANA KE
3052  ; [.32C0.0020.000E][.0000.0037.0002] # HIRAGANA LETTER GE
30B2  ; [.32C0.0020.0011][.0000.0037.0002] # KATAKANA LETTER GE
331C  ; [.32C0.0020.001C][.15B6.0020.001C][.32C4.0020.001C] # SQUARE KEESU
3053  ; [.32C1.0020.000E] # HIRAGANA LETTER KO
30B3  ; [.32C1.0020.0011] # KATAKANA LETTER KO
FF7A  ; [.32C1.0020.0012] # HALFWIDTH KATAKANA LETTER KO
32D9  ; [.32C1.0020.0013] # CIRCLED KATAKANA KO
3054  ; [.32C1.0020.000E][.0000.0037.0002] # HIRAGANA LETTER GO
30B4  ; [.32C1.0020.0011][.0000.0037.0002] # KATAKANA LETTER GO
331E  ; [.32C1.0020.001C][.15B6.0020.001C][.32D5.0020.001C][.0000.0038.001C] # SQUARE KOOPO
1F201 ; [.32C1.0020.001C][.32C1.0020.001C] # SQUARED KATAKANA KOKO
30FF  ; [.32C1.0020.0016][.32CB.0020.0016] # KATAKANA DIGRAPH KOTO
331D  ; [.32C1.0020.001C][.32E1.0020.001C][.32CC.0020.001C] # SQUARE KORUNA
3055  ; [.32C2.0020.000E] # HIRAGANA LETTER SA
30B5  ; [.32C2.0020.0011] # KATAKANA LETTER SA
FF7B  ; [.32C2.0020.0012] # HALFWIDTH KATAKANA LETTER SA
32DA  ; [.32C2.0020.0013] # CIRCLED KATAKANA SA
1F202 ; [.32C2.0020.001C] # SQUARED KATAKANA SA
3056  ; [.32C2.0020.000E][.0000.0037.0002] # HIRAGANA LETTER ZA
30B6  ; [.32C2.0020.0011][.0000.0037.0002] # KATAKANA LETTER ZA
331F  ; [.32C2.0020.001C][.32B8.0020.001C][.32BF.0020.001C][.32E1.0020.001C] # SQUARE SAIKURU
3320  ; [.32C2.0020.001C][.32E8.0020.001C][.32C8.0020.001C][.15B6.0020.001C][.32D8.0020.001C] # SQUARE SANTIIMU
3057  ; [.32C3.0020.000E] # HIRAGANA LETTER SI
31F1  ; [.32C3.0020.000F] # KATAKANA LETTER SMALL SI
30B7  ; [.32C3.0020.0011] # KATAKANA LETTER SI
FF7C  ; [.32C3.0020.0012] # HALFWIDTH KATAKANA LETTER SI
32DB  ; [.32C3.0020.0013] # CIRCLED KATAKANA SI
3058  ; [.32C3.0020.000E][.0000.0037.0002] # HIRAGANA LETTER ZI
30B8  ; [.32C3.0020.0011][.0000.0037.0002] # KATAKANA LETTER ZI
3006  ; [.32C3.0020.0004][.32D9.0020.0004] # IDEOGRAPHIC CLOSING MARK
3321  ; [.32C3.0020.001C][.32E0.0020.001C][.32E8.0020.001C][.32BF.0020.001C][.0000.0037.001C] # SQUARE SIRINGU
3059  ; [.32C4.0020.000E] # HIRAGANA LETTER SU
31F2  ; [.32C4.0020.000F] # KATAKANA LETTER SMALL SU
30B9  ; [.32C4.0020.0011] # KATAKANA LETTER SU
FF7D  ; [.32C4.0020.0012] # HALFWIDTH KATAKANA LETTER SU
32DC  ; [.32C4.0020.0013] # CIRCLED KATAKANA SU
305A  ; [.32C4.0020.000E][.0000.0037.0002] # HIRAGANA LETTER ZU
30BA  ; [.32C4.0020.0011][.0000.0037.0002] # KATAKANA LETTER ZU
305B  ; [.32C5.0020.000E] # HIRAGANA LETTER SE
30BB  ; [.32C5.0020.0011] # KATAKANA LETTER SE
FF7E  ; [.32C5.0020.0012] # HALFWIDTH KATAKANA LETTER SE
32DD  ; [.32C5.0020.0013] # CIRCLED KATAKANA SE
305C  ; [.32C5.0020.000E][.0000.0037.0002] # HIRAGANA LETTER ZE
30BC  ; [.32C5.0020.0011][.0000.0037.0002] # KATAKANA LETTER ZE
3322  ; [.32C5.0020.001C][.32E8.0020.001C][.32C8.0020.001C] # SQUARE SENTI
3323  ; [.32C5.0020.001C][.32E8.0020.001C][.32CB.0020.001C] # SQUARE SENTO
305D  ; [.32C6.0020.000E] # HIRAGANA LETTER SO
30BD  ; [.32C6.0020.0011] # KATAKANA LETTER SO
FF7F  ; [.32C6.0020.0012] # HALFWIDTH KATAKANA LETTER SO
32DE  ; [.32C6.0020.0013] # CIRCLED KATAKANA SO
305E  ; [.32C6.0020.000E][.0000.0037.0002] # HIRAGANA LETTER ZO
30BE  ; [.32C6.0020.0011][.0000.0037.0002] # KATAKANA LETTER ZO
305F  ; [.32C7.0020.000E] # HIRAGANA LETTER TA
30BF  ; [.32C7.0020.0011] # KATAKANA LETTER TA
FF80  ; [.32C7.0020.0012] # HALFWIDTH KATAKANA LETTER TA
32DF  ; [.32C7.0020.0013] # CIRCLED KATAKANA TA
3060  ; [.32C7.0020.000E][.0000.0037.0002] # HIRAGANA LETTER DA
30C0  ; [.32C7.0020.0011][.0000.0037.0002] # KATAKANA LETTER DA
3324  ; [.32C7.0020.001C][.0000.0037.001C][.15B6.0020.001C][.32C4.0020.001C] # SQUARE DAASU
3061  ; [.32C8.0020.000E] # HIRAGANA LETTER TI
30C1  ; [.32C8.0020.0011] # KATAKANA LETTER TI
FF81  ; [.32C8.0020.0012] # HALFWIDTH KATAKANA LETTER TI
32E0  ; [.32C8.0020.0013] # CIRCLED KATAKANA TI
3062  ; [.32C8.0020.000E][.0000.0037.0002] # HIRAGANA LETTER DI
30C2  ; [.32C8.0020.0011][.0000.0037.0002] # KATAKANA LETTER DI
3063  ; [.32C9.0020.000D] # HIRAGANA LETTER SMALL TU
3064  ; [.32C9.0020.000E] # HIRAGANA LETTER TU
30C3  ; [.32C9.0020.000F] # KATAKANA LETTER SMALL TU
FF6F  ; [.32C9.0020.0010] # HALFWIDTH KATAKANA LETTER SMALL TU
30C4  ; [.32C9.0020.0011] # KATAKANA LETTER TU
FF82  ; [.32C9.0020.0012] # HALFWIDTH KATAKANA LETTER TU
32E1  ; [.32C9.0020.0013] # CIRCLED KATAKANA TU
3065  ; [.32C9.0020.000E][.0000.0037.0002] # HIRAGANA LETTER DU
30C5  ; [.32C9.0020.0011][.0000.0037.0002] # KATAKANA LETTER DU
3066  ; [.32CA.0020.000E] # HIRAGANA LETTER TE
30C6  ; [.32CA.0020.0011] # KATAKANA LETTER TE
FF83  ; [.32CA.0020.0012] # HALFWIDTH KATAKANA LETTER TE
32E2  ; [.32CA.0020.0013] # CIRCLED KATAKANA TE
3067  ; [.32CA.0020.000E][.0000.0037.0002] # HIRAGANA LETTER DE
30C7  ; [.32CA.0020.0011][.0000.0037.0002] # KATAKANA LETTER DE
1F213 ; [.32CA.0020.001C][.0000.0037.001C] # SQUARED KATAKANA DE
3325  ; [.32CA.0020.001C][.0000.0037.001C][.32C3.0020.001C] # SQUARE DESI
3068  ; [.32CB.0020.000E] # HIRAGANA LETTER TO
31F3  ; [.32CB.0020.000F] # KATAKANA LETTER SMALL TO
30C8  ; [.32CB.0020.0011] # KATAKANA LETTER TO
FF84  ; [.32CB.0020.0012] # HALFWIDTH KATAKANA LETTER TO
32E3  ; [.32CB.0020.0013] # CIRCLED KATAKANA TO
3069  ; [.32CB.0020.000E][.0000.0037.0002] # HIRAGANA LETTER DO
30C9  ; [.32CB.0020.0011][.0000.0037.0002] # KATAKANA LETTER DO
3326  ; [.32CB.0020.001C][.0000.0037.001C][.32E1.0020.001C] # SQUARE DORU
3327  ; [.32CB.0020.001C][.32E8.0020.001C] # SQUARE TON
306A  ; [.32CC.0020.000E] # HIRAGANA LETTER NA
30CA  ; [.32CC.0020.0011] # KATAKANA LETTER NA
FF85  ; [.32CC.0020.0012] # HALFWIDTH KATAKANA LETTER NA
32E4  ; [.32CC.0020.0013] # CIRCLED KATAKANA NA
3328  ; [.32CC.0020.001C][.32D0.0020.001C] # SQUARE NANO
306B  ; [.32CD.0020.000E] # HIRAGANA LETTER NI
30CB  ; [.32CD.0020.0011] # KATAKANA LETTER NI
FF86  ; [.32CD.0020.0012] # HALFWIDTH KATAKANA LETTER NI
32E5  ; [.32CD.0020.0013] # CIRCLED KATAKANA NI
306C  ; [.32CE.0020.000E] # HIRAGANA LETTER NU
31F4  ; [.32CE.0020.000F] # KATAKANA LETTER SMALL NU
30CC  ; [.32CE.0020.0011] # KATAKANA LETTER NU
FF87  ; [.32CE.0020.0012] # HALFWIDTH KATAKANA LETTER NU
32E6  ; [.32CE.0020.0013] # CIRCLED KATAKANA NU
306D  ; [.32CF.0020.000E] # HIRAGANA LETTER NE
30CD  ; [.32CF.0020.0011] # KATAKANA LETTER NE
FF88  ; [.32CF.0020.0012] # HALFWIDTH KATAKANA LETTER NE
32E7  ; [.32CF.0020.0013] # CIRCLED KATAKANA NE
306E  ; [.32D0.0020.000E] # HIRAGANA LETTER NO
30CE  ; [.32D0.0020.0011] # KATAKANA LETTER NO
FF89  ; [.32D0.0020.0012] # HALFWIDTH KATAKANA LETTER NO
32E8  ; [.32D0.0020.0013] # CIRCLED KATAKANA NO
3329  ; [.32D0.0020.001C][.32C9.0020.001C][.32CB.0020.001C] # SQUARE NOTTO
306F  ; [.32D1.0020.000E] # HIRAGANA LETTER HA
31F5  ; [.32D1.0020.000F] # KATAKANA LETTER SMALL HA
30CF  ; [.32D1.0020.0011] # KATAKANA LETTER HA
FF8A  ; [.32D1.0020.0012] # HALFWIDTH KATAKANA LETTER HA
32E9  ; [.32D1.0020.0013] # CIRCLED KATAKANA HA
3070  ; [.32D1.0020.000E][.0000.0037.0002] # HIRAGANA LETTER BA
30D0  ; [.32D1.0020.0011][.0000.0037.0002] # KATAKANA LETTER BA
3071  ; [.32D1.0020.000E][.0000.0038.0002] # HIRAGANA LETTER PA
30D1  ; [.32D1.0020.0011][.0000.0038.0002] # KATAKANA LETTER PA
332B  ; [.32D1.0020.001C][.0000.0038.001C][.15B6.0020.001C][.32C5.0020.001C][.32E8.0020.001C][.32CB.0020.001C] # SQUARE PAASENTO
332C  ; [.32D1.0020.001C][.0000.0038.001C][.15B6.0020.001C][.32C9.0020.001C] # SQUARE PAATU
332D  ; [.32D1.0020.001C][.0000.0037.001C][.15B6.0020.001C][.32E2.0020.001C][.32E1.0020.001C] # SQUARE BAARERU
332A  ; [.32D1.0020.001C][.32B8.0020.001C][.32C9.0020.001C] # SQUARE HAITU
3072  ; [.32D2.0020.000E] # HIRAGANA LETTER HI
31F6  ; [.32D2.0020.000F] # KATAKANA LETTER SMALL HI
30D2  ; [.32D2.0020.0011] # KATAKANA LETTER HI
FF8B  ; [.32D2.0020.0012] # HALFWIDTH KATAKANA LETTER HI
32EA  ; [.32D2.0020.0013] # CIRCLED KATAKANA HI
3073  ; [.32D2.0020.000E][.0000.0037.0002] # HIRAGANA LETTER BI
30D3  ; [.32D2.0020.0011][.0000.0037.0002] # KATAKANA LETTER BI
3074  ; [.32D2.0020.000E][.0000.0038.0002] # HIRAGANA LETTER PI
30D4  ; [.32D2.0020.0011][.0000.0038.0002] # KATAKANA LETTER PI
332E  ; [.32D2.0020.001C][.0000.0038.001C][.32B7.0020.001C][.32C4.0020.001C][.32CB.0020.001C][.32E1.0020.001C] # SQUARE PIASUTORU
332F  ; [.32D2.0020.001C][.0000.0038.001C][.32BF.0020.001C][.32E1.0020.001C] # SQUARE PIKURU
3330  ; [.32D2.0020.001C][.0000.0038.001C][.32C1.0020.001C] # SQUARE PIKO
3331  ; [.32D2.0020.001C][.0000.0037.001C][.32E1.0020.001C] # SQUARE BIRU
3075  ; [.32D3.0020.000E] # HIRAGANA LETTER HU
31F7  ; [.32D3.0020.000F] # KATAKANA LETTER SMALL HU
30D5  ; [.32D3.0020.0011] # KATAKANA LETTER HU
FF8C  ; [.32D3.0020.0012] # HALFWIDTH KATAKANA LETTER HU
32EB  ; [.32D3.0020.0013] # CIRCLED KATAKANA HU
3076  ; [.32D3.0020.000E][.0000.0037.0002] # HIRAGANA LETTER BU
30D6  ; [.32D3.0020.0011][.0000.0037.0002] # KATAKANA LETTER BU
3077  ; [.32D3.0020.000E][.0000.0038.0002] # HIRAGANA LETTER PU
30D7  ; [.32D3.0020.0011][.0000.0038.0002] # KATAKANA LETTER PU
3332  ; [.32D3.0020.001C][.32B7.0020.001C][.32DF.0020.001C][.32C9.0020.001C][.32CB.0020.001C][.0000.0037.001C] # SQUARE HUARADDO
3333  ; [.32D3.0020.001C][.32B8.0020.001C][.15B6.0020.001C][.32CB.0020.001C] # SQUARE HUIITO
3334  ; [.32D3.0020.001C][.0000.0037.001C][.32C9.0020.001C][.32C3.0020.001C][.32BB.0020.001C][.32E1.0020.001C] # SQUARE BUSSYERU
3335  ; [.32D3.0020.001C][.32DF.0020.001C][.32E8.0020.001C] # SQUARE HURAN
3078  ; [.32D4.0020.000E] # HIRAGANA LETTER HE
31F8  ; [.32D4.0020.000F] # KATAKANA LETTER SMALL HE
30D8  ; [.32D4.0020.0011] # KATAKANA LETTER HE
FF8D  ; [.32D4.0020.0012] # HALFWIDTH KATAKANA LETTER HE
32EC  ; [.32D4.0020.0013] # CIRCLED KATAKANA HE
3079  ; [.32D4.0020.000E][.0000.0037.0002] # HIRAGANA LETTER BE
30D9  ; [.32D4.0020.0011][.0000.0037.0002] # KATAKANA LETTER BE
307A  ; [.32D4.0020.000E][.0000.0038.0002] # HIRAGANA LETTER PE
30DA  ; [.32D4.0020.0011][.0000.0038.0002] # KATAKANA LETTER PE
333B  ; [.32D4.0020.001C][.0000.0038.001C][.15B6.0020.001C][.32C3.0020.001C][.0000.0037.001C] # SQUARE PEEZI
333C  ; [.32D4.0020.001C][.0000.0037.001C][.15B6.0020.001C][.32C7.0020.001C] # SQUARE BEETA
3336  ; [.32D4.0020.001C][.32BF.0020.001C][.32C7.0020.001C][.15B6.0020.001C][.32E1.0020.001C] # SQUARE HEKUTAARU
3337  ; [.32D4.0020.001C][.0000.0038.001C][.32C6.0020.001C] # SQUARE PESO
3338  ; [.32D4.0020.001C][.0000.0038.001C][.32CD.0020.001C][.32D2.0020.001C] # SQUARE PENIHI
3339  ; [.32D4.0020.001C][.32E1.0020.001C][.32C9.0020.001C] # SQUARE HERUTU
333A  ; [.32D4.0020.001C][.0000.0038.001C][.32E8.0020.001C][.32C4.0020.001C] # SQUARE PENSU
307B  ; [.32D5.0020.000E] # HIRAGANA LETTER HO
31F9  ; [.32D5.0020.000F] # KATAKANA LETTER SMALL HO
30DB  ; [.32D5.0020.0011] # KATAKANA LETTER HO
FF8E  ; [.32D5.0020.0012] # HALFWIDTH KATAKANA LETTER HO
32ED  ; [.32D5.0020.0013] # CIRCLED KATAKANA HO
307C  ; [.32D5.0020.000E][.0000.0037.0002] # HIRAGANA LETTER BO
30DC  ; [.32D5.0020.0011][.0000.0037.0002] # KATAKANA LETTER BO
307D  ; [.32D5.0020.000E][.0000.0038.0002] # HIRAGANA LETTER PO
30DD  ; [.32D5.0020.0011][.0000.0038.0002] # KATAKANA LETTER PO
3341  ; [.32D5.0020.001C][.15B6.0020.001C][.32E1.0020.001C] # SQUARE HOORU
3342  ; [.32D5.0020.001C][.15B6.0020.001C][.32E8.0020.001C] # SQUARE HOON
333D  ; [.32D5.0020.001C][.0000.0038.001C][.32B8.0020.001C][.32E8.0020.001C][.32CB.0020.001C] # SQUARE POINTO
1F200 ; [.32D5.0020.001C][.32BD.0020.001C] # SQUARE HIRAGANA HOKA
333E  ; [.32D5.0020.001C][.0000.0037.001C][.32E1.0020.001C][.32CB.0020.001C] # SQUARE BORUTO
333F  ; [.32D5.0020.001C][.32E8.0020.001C] # SQUARE HON
3340  ; [.32D5.0020.001C][.0000.0038.001C][.32E8.0020.001C][.32CB.0020.001C][.0000.0037.001C] # SQUARE PONDO
307E  ; [.32D6.0020.000E] # HIRAGANA LETTER MA
30DE  ; [.32D6.0020.0011] # KATAKANA LETTER MA
FF8F  ; [.32D6.0020.0012] # HALFWIDTH KATAKANA LETTER MA
32EE  ; [.32D6.0020.0013] # CIRCLED KATAKANA MA
3343  ; [.32D6.0020.001C][.32B8.0020.001C][.32BF.0020.001C][.32E3.0020.001C] # SQUARE MAIKURO
3344  ; [.32D6.0020.001C][.32B8.0020.001C][.32E1.0020.001C] # SQUARE MAIRU
303C  ; [.32D6.0020.0004][.32C4.0020.0004] # MASU MARK
3345  ; [.32D6.0020.001C][.32C9.0020.001C][.32D1.0020.001C] # SQUARE MAHHA
3346  ; [.32D6.0020.001C][.32E1.0020.001C][.32BF.0020.001C] # SQUARE MARUKU
3347  ; [.32D6.0020.001C][.32E8.0020.001C][.32C3.0020.001C][.32DE.0020.001C][.32E8.0020.001C] # SQUARE MANSYON
307F  ; [.32D7.0020.000E] # HIRAGANA LETTER MI
30DF  ; [.32D7.0020.0011] # KATAKANA LETTER MI
FF90  ; [.32D7.0020.0012] # HALFWIDTH KATAKANA LETTER MI
32EF  ; [.32D7.0020.0013] # CIRCLED KATAKANA MI
3348  ; [.32D7.0020.001C][.32BF.0020.001C][.32E3.0020.001C][.32E8.0020.001C] # SQUARE MIKURON
3349  ; [.32D7.0020.001C][.32E0.0020.001C] # SQUARE MIRI
334A  ; [.32D7.0020.001C][.32E0.0020.001C][.32D1.0020.001C][.0000.0037.001C][.15B6.0020.001C][.32E1.0020.001C] # SQUARE MIRIBAARU
3080  ; [.32D8.0020.000E] # HIRAGANA LETTER MU
31FA  ; [.32D8.0020.000F] # KATAKANA LETTER SMALL MU
30E0  ; [.32D8.0020.0011] # KATAKANA LETTER MU
FF91  ; [.32D8.0020.0012] # HALFWIDTH KATAKANA LETTER MU
32F0  ; [.32D8.0020.0013] # CIRCLED KATAKANA MU
3081  ; [.32D9.0020.000E] # HIRAGANA LETTER ME
30E1  ; [.32D9.0020.0011] # KATAKANA LETTER ME
FF92  ; [.32D9.0020.0012] # HALFWIDTH KATAKANA LETTER ME
32F1  ; [.32D9.0020.0013] # CIRCLED KATAKANA ME
334D  ; [.32D9.0020.001C][.15B6.0020.001C][.32CB.0020.001C][.32E1.0020.001C] # SQUARE MEETORU
334B  ; [.32D9.0020.001C][.32BD.0020.001C][.0000.0037.001C] # SQUARE MEGA
334C  ; [.32D9.0020.001C][.32BD.0020.001C][.0000.0037.001C][.32CB.0020.001C][.32E8.0020.001C] # SQUARE MEGATON
3082  ; [.32DA.0020.000E] # HIRAGANA LETTER MO
30E2  ; [.32DA.0020.0011] # KATAKANA LETTER MO
FF93  ; [.32DA.0020.0012] # HALFWIDTH KATAKANA LETTER MO
32F2  ; [.32DA.0020.0013] # CIRCLED KATAKANA MO
3083  ; [.32DB.0020.000D] # HIRAGANA LETTER SMALL YA
3084  ; [.32DB.0020.000E] # HIRAGANA LETTER YA
30E3  ; [.32DB.0020.000F] # KATAKANA LETTER SMALL YA
FF6C  ; [.32DB.0020.0010] # HALFWIDTH KATAKANA LETTER SMALL YA
30E4  ; [.32DB.0020.0011] # KATAKANA LETTER YA
FF94  ; [.32DB.0020.0012] # HALFWIDTH KATAKANA LETTER YA
32F3  ; [.32DB.0020.0013] # CIRCLED KATAKANA YA
334E  ; [.32DB.0020.001C][.15B6.0020.001C][.32CB.0020.001C][.0000.0037.001C] # SQUARE YAADO
334F  ; [.32DB.0020.001C][.15B6.0020.001C][.32E1.0020.001C] # SQUARE YAARU
3085  ; [.32DC.0020.000D] # HIRAGANA LETTER SMALL YU
3086  ; [.32DC.0020.000E] # HIRAGANA LETTER YU
30E5  ; [.32DC.0020.000F] # KATAKANA LETTER SMALL YU
FF6D  ; [.32DC.0020.0010] # HALFWIDTH KATAKANA LETTER SMALL YU
30E6  ; [.32DC.0020.0011] # KATAKANA LETTER YU
FF95  ; [.32DC.0020.0012] # HALFWIDTH KATAKANA LETTER YU
32F4  ; [.32DC.0020.0013] # CIRCLED KATAKANA YU
3350  ; [.32DC.0020.001C][.32B7.0020.001C][.32E8.0020.001C] # SQUARE YUAN
1B001 ; [.32DD.0020.000E] # HIRAGANA LETTER ARCHAIC YE
3087  ; [.32DE.0020.000D] # HIRAGANA LETTER SMALL YO
3088  ; [.32DE.0020.000E] # HIRAGANA LETTER YO
30E7  ; [.32DE.0020.000F] # KATAKANA LETTER SMALL YO
FF6E  ; [.32DE.0020.0010] # HALFWIDTH KATAKANA LETTER SMALL YO
30E8  ; [.32DE.0020.0011] # KATAKANA LETTER YO
FF96  ; [.32DE.0020.0012] # HALFWIDTH KATAKANA LETTER YO
32F5  ; [.32DE.0020.0013] # CIRCLED KATAKANA YO
309F  ; [.32DE.0020.0016][.32E0.0020.0016] # HIRAGANA DIGRAPH YORI
3089  ; [.32DF.0020.000E] # HIRAGANA LETTER RA
31FB  ; [.32DF.0020.000F] # KATAKANA LETTER SMALL RA
30E9  ; [.32DF.0020.0011] # KATAKANA LETTER RA
FF97  ; [.32DF.0020.0012] # HALFWIDTH KATAKANA LETTER RA
32F6  ; [.32DF.0020.0013] # CIRCLED KATAKANA RA
308A  ; [.32E0.0020.000E] # HIRAGANA LETTER RI
31FC  ; [.32E0.0020.000F] # KATAKANA LETTER SMALL RI
30EA  ; [.32E0.0020.0011] # KATAKANA LETTER RI
FF98  ; [.32E0.0020.0012] # HALFWIDTH KATAKANA LETTER RI
32F7  ; [.32E0.0020.0013] # CIRCLED KATAKANA RI
3351  ; [.32E0.0020.001C][.32C9.0020.001C][.32CB.0020.001C][.32E1.0020.001C] # SQUARE RITTORU
3352  ; [.32E0.0020.001C][.32DF.0020.001C] # SQUARE RIRA
308B  ; [.32E1.0020.000E] # HIRAGANA LETTER RU
31FD  ; [.32E1.0020.000F] # KATAKANA LETTER SMALL RU
30EB  ; [.32E1.0020.0011] # KATAKANA LETTER RU
FF99  ; [.32E1.0020.0012] # HALFWIDTH KATAKANA LETTER RU
32F8  ; [.32E1.0020.0013] # CIRCLED KATAKANA RU
3354  ; [.32E1.0020.001C][.15B6.0020.001C][.32D3.0020.001C][.0000.0037.001C][.32E1.0020.001C] # SQUARE RUUBURU
3353  ; [.32E1.0020.001C][.32D2.0020.001C][.0000.0038.001C][.15B6.0020.001C] # SQUARE RUPII
308C  ; [.32E2.0020.000E] # HIRAGANA LETTER RE
31FE  ; [.32E2.0020.000F] # KATAKANA LETTER SMALL RE
30EC  ; [.32E2.0020.0011] # KATAKANA LETTER RE
FF9A  ; [.32E2.0020.0012] # HALFWIDTH KATAKANA LETTER RE
32F9  ; [.32E2.0020.0013] # CIRCLED KATAKANA RE
3355  ; [.32E2.0020.001C][.32D8.0020.001C] # SQUARE REMU
3356  ; [.32E2.0020.001C][.32E8.0020.001C][.32CB.0020.001C][.32C0.0020.001C][.0000.0037.001C][.32E8.0020.001C] # SQUARE RENTOGEN
308D  ; [.32E3.0020.000E] # HIRAGANA LETTER RO
31FF  ; [.32E3.0020.000F] # KATAKANA LETTER SMALL RO
30ED  ; [.32E3.0020.0011] # KATAKANA LETTER RO
FF9B  ; [.32E3.0020.0012] # HALFWIDTH KATAKANA LETTER RO
32FA  ; [.32E3.0020.0013] # CIRCLED KATAKANA RO
308E  ; [.32E4.0020.000D] # HIRAGANA LETTER SMALL WA
308F  ; [.32E4.0020.000E] # HIRAGANA LETTER WA
30EE  ; [.32E4.0020.000F] # KATAKANA LETTER SMALL WA
30EF  ; [.32E4.0020.0011] # KATAKANA LETTER WA
FF9C  ; [.32E4.0020.0012] # HALFWIDTH KATAKANA LETTER WA
32FB  ; [.32E4.0020.0013] # CIRCLED KATAKANA WA
30F7  ; [.32E4.0020.0011][.0000.0037.0002] # KATAKANA LETTER VA
3357  ; [.32E4.0020.001C][.32C9.0020.001C][.32CB.0020.001C] # SQUARE WATTO
3090  ; [.32E5.0020.000E] # HIRAGANA LETTER WI
30F0  ; [.32E5.0020.0011] # KATAKANA LETTER WI
32FC  ; [.32E5.0020.0013] # CIRCLED KATAKANA WI
30F8  ; [.32E5.0020.0011][.0000.0037.0002] # KATAKANA LETTER VI
3091  ; [.32E6.0020.000E] # HIRAGANA LETTER WE
30F1  ; [.32E6.0020.0011] # KATAKANA LETTER WE
32FD  ; [.32E6.0020.0013] # CIRCLED KATAKANA WE
30F9  ; [.32E6.0020.0011][.0000.0037.0002] # KATAKANA LETTER VE
3092  ; [.32E7.0020.000E] # HIRAGANA LETTER WO
30F2  ; [.32E7.0020.0011] # KATAKANA LETTER WO
FF66  ; [.32E7.0020.0012] # HALFWIDTH KATAKANA LETTER WO
32FE  ; [.32E7.0020.0013] # CIRCLED KATAKANA WO
30FA  ; [.32E7.0020.0011][.0000.0037.0002] # KATAKANA LETTER VO
3093  ; [.32E8.0020.000E] # HIRAGANA LETTER N
30F3  ; [.32E8.0020.0011] # KATAKANA LETTER N
FF9D  ; [.32E8.0020.0012] # HALFWIDTH KATAKANA LETTER N
3105  ; [.32E9.0020.0002] # BOPOMOFO LETTER B
31A0  ; [.32E9.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER BU
3106  ; [.32EA.0020.0002] # BOPOMOFO LETTER P
31B4  ; [.32EA.0020.0019] # BOPOMOFO FINAL LETTER P
3107  ; [.32EB.0020.0002] # BOPOMOFO LETTER M
3108  ; [.32EC.0020.0002] # BOPOMOFO LETTER F
312A  ; [.32ED.0020.0002] # BOPOMOFO LETTER V
3109  ; [.32EE.0020.0002] # BOPOMOFO LETTER D
310A  ; [.32EF.0020.0002] # BOPOMOFO LETTER T
31B5  ; [.32EF.0020.0019] # BOPOMOFO FINAL LETTER T
310B  ; [.32F0.0020.0002] # BOPOMOFO LETTER N
310C  ; [.32F1.0020.0002] # BOPOMOFO LETTER L
310D  ; [.32F2.0020.0002] # BOPOMOFO LETTER G
31A3  ; [.32F2.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER GU
310E  ; [.32F3.0020.0002] # BOPOMOFO LETTER K
31B6  ; [.32F3.0020.0019] # BOPOMOFO FINAL LETTER K
312B  ; [.32F4.0020.0002] # BOPOMOFO LETTER NG
31AD  ; [.32F5.0020.0002] # BOPOMOFO LETTER NGG
310F  ; [.32F6.0020.0002] # BOPOMOFO LETTER H
31B7  ; [.32F6.0020.0019] # BOPOMOFO FINAL LETTER H
3110  ; [.32F7.0020.0002] # BOPOMOFO LETTER J
31A2  ; [.32F7.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER JI
3111  ; [.32F8.0020.0002] # BOPOMOFO LETTER Q
3112  ; [.32F9.0020.0002] # BOPOMOFO LETTER X
312C  ; [.32FA.0020.0002] # BOPOMOFO LETTER GN
3113  ; [.32FB.0020.0002] # BOPOMOFO LETTER ZH
3114  ; [.32FC.0020.0002] # BOPOMOFO LETTER CH
3115  ; [.32FD.0020.0002] # BOPOMOFO LETTER SH
3116  ; [.32FE.0020.0002] # BOPOMOFO LETTER R
3117  ; [.32FF.0020.0002] # BOPOMOFO LETTER Z
31A1  ; [.32FF.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER ZI
3118  ; [.3300.0020.0002] # BOPOMOFO LETTER C
3119  ; [.3301.0020.0002] # BOPOMOFO LETTER S
31B8  ; [.3302.0020.0002] # BOPOMOFO LETTER GH
31B9  ; [.3303.0020.0002] # BOPOMOFO LETTER LH
31BA  ; [.3304.0020.0002] # BOPOMOFO LETTER ZY
311A  ; [.3305.0020.0002] # BOPOMOFO LETTER A
31A9  ; [.3305.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER ANN
311B  ; [.3306.0020.0002] # BOPOMOFO LETTER O
31A7  ; [.3306.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER ONN
31A6  ; [.3307.0020.0002] # BOPOMOFO LETTER OO
311C  ; [.3308.0020.0002] # BOPOMOFO LETTER E
311D  ; [.3309.0020.0002] # BOPOMOFO LETTER EH
31A4  ; [.330A.0020.0002] # BOPOMOFO LETTER EE
31A5  ; [.330A.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER ENN
311E  ; [.330B.0020.0002] # BOPOMOFO LETTER AI
31AE  ; [.330B.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER AINN
311F  ; [.330C.0020.0002] # BOPOMOFO LETTER EI
3120  ; [.330D.0020.0002] # BOPOMOFO LETTER AU
31AF  ; [.330D.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER AUNN
3121  ; [.330E.0020.0002] # BOPOMOFO LETTER OU
3122  ; [.330F.0020.0002] # BOPOMOFO LETTER AN
3123  ; [.3310.0020.0002] # BOPOMOFO LETTER EN
3124  ; [.3311.0020.0002] # BOPOMOFO LETTER ANG
31B2  ; [.3312.0020.0002] # BOPOMOFO LETTER ONG
3125  ; [.3313.0020.0002] # BOPOMOFO LETTER ENG
31B0  ; [.3314.0020.0002] # BOPOMOFO LETTER AM
31B1  ; [.3315.0020.0002] # BOPOMOFO LETTER OM
31AC  ; [.3316.0020.0002] # BOPOMOFO LETTER IM
3126  ; [.3317.0020.0002] # BOPOMOFO LETTER ER
3127  ; [.3318.0020.0002] # BOPOMOFO LETTER I
31AA  ; [.3318.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER INN
31B3  ; [.3318.0020.0016][.0000.00FD.0016] # BOPOMOFO LETTER INNN
3128  ; [.3319.0020.0002] # BOPOMOFO LETTER U
31AB  ; [.3319.0020.0004][.0000.00FD.0004] # BOPOMOFO LETTER UNN
31A8  ; [.3319.0020.0004][.0000.00FE.0004] # BOPOMOFO LETTER IR
3129  ; [.331A.0020.0002] # BOPOMOFO LETTER IU
312D  ; [.331B.0020.0002] # BOPOMOFO LETTER IH
A000  ; [.331C.0020.0002] # YI SYLLABLE IT
A001  ; [.331D.0020.0002] # YI SYLLABLE IX
A002  ; [.331E.0020.0002] # YI SYLLABLE I
A003  ; [.331F.0020.0002] # YI SYLLABLE IP
A004  ; [.3320.0020.0002] # YI SYLLABLE IET
A005  ; [.3321.0020.0002] # YI SYLLABLE IEX
A006  ; [.3322.0020.0002] # YI SYLLABLE IE
A007  ; [.3323.0020.0002] # YI SYLLABLE IEP
A008  ; [.3324.0020.0002] # YI SYLLABLE AT
A009  ; [.3325.0020.0002] # YI SYLLABLE AX
A00A  ; [.3326.0020.0002] # YI SYLLABLE A
A00B  ; [.3327.0020.0002] # YI SYLLABLE AP
A00C  ; [.3328.0020.0002] # YI SYLLABLE UOX
A00D  ; [.3329.0020.0002] # YI SYLLABLE UO
A00E  ; [.332A.0020.0002] # YI SYLLABLE UOP
A00F  ; [.332B.0020.0002] # YI SYLLABLE OT
A010  ; [.332C.0020.0002] # YI SYLLABLE OX
A011  ; [.332D.0020.0002] # YI SYLLABLE O
A012  ; [.332E.0020.0002] # YI SYLLABLE OP
A013  ; [.332F.0020.0002] # YI SYLLABLE EX
A014  ; [.3330.0020.0002] # YI SYLLABLE E
A015  ; [.3331.0020.0002] # YI SYLLABLE WU
A016  ; [.3332.0020.0002] # YI SYLLABLE BIT
A017  ; [.3333.0020.0002] # YI SYLLABLE BIX
A018  ; [.3334.0020.0002] # YI SYLLABLE BI
A019  ; [.3335.0020.0002] # YI SYLLABLE BIP
A01A  ; [.3336.0020.0002] # YI SYLLABLE BIET
A01B  ; [.3337.0020.0002] # YI SYLLABLE BIEX
A01C  ; [.3338.0020.0002] # YI SYLLABLE BIE
A01D  ; [.3339.0020.0002] # YI SYLLABLE BIEP
A01E  ; [.333A.0020.0002] # YI SYLLABLE BAT
A01F  ; [.333B.0020.0002] # YI SYLLABLE BAX
A020  ; [.333C.0020.0002] # YI SYLLABLE BA
A021  ; [.333D.0020.0002] # YI SYLLABLE BAP
A022  ; [.333E.0020.0002] # YI SYLLABLE BUOX
A023  ; [.333F.0020.0002] # YI SYLLABLE BUO
A024  ; [.3340.0020.0002] # YI SYLLABLE BUOP
A025  ; [.3341.0020.0002] # YI SYLLABLE BOT
A026  ; [.3342.0020.0002] # YI SYLLABLE BOX
A027  ; [.3343.0020.0002] # YI SYLLABLE BO
A028  ; [.3344.0020.0002] # YI SYLLABLE BOP
A029  ; [.3345.0020.0002] # YI SYLLABLE BEX
A02A  ; [.3346.0020.0002] # YI SYLLABLE BE
A02B  ; [.3347.0020.0002] # YI SYLLABLE BEP
A02C  ; [.3348.0020.0002] # YI SYLLABLE BUT
A02D  ; [.3349.0020.0002] # YI SYLLABLE BUX
A02E  ; [.334A.0020.0002] # YI SYLLABLE BU
A02F  ; [.334B.0020.0002] # YI SYLLABLE BUP
A030  ; [.334C.0020.0002] # YI SYLLABLE BURX
A031  ; [.334D.0020.0002] # YI SYLLABLE BUR
A032  ; [.334E.0020.0002] # YI SYLLABLE BYT
A033  ; [.334F.0020.0002] # YI SYLLABLE BYX
A034  ; [.3350.0020.0002] # YI SYLLABLE BY
A035  ; [.3351.0020.0002] # YI SYLLABLE BYP
A036  ; [.3352.0020.0002] # YI SYLLABLE BYRX
A037  ; [.3353.0020.0002] # YI SYLLABLE BYR
A038  ; [.3354.0020.0002] # YI SYLLABLE PIT
A039  ; [.3355.0020.0002] # YI SYLLABLE PIX
A03A  ; [.3356.0020.0002] # YI SYLLABLE PI
A03B  ; [.3357.0020.0002] # YI SYLLABLE PIP
A03C  ; [.3358.0020.0002] # YI SYLLABLE PIEX
A03D  ; [.3359.0020.0002] # YI SYLLABLE PIE
A03E  ; [.335A.0020.0002] # YI SYLLABLE PIEP
A03F  ; [.335B.0020.0002] # YI SYLLABLE PAT
A040  ; [.335C.0020.0002] # YI SYLLABLE PAX
A041  ; [.335D.0020.0002] # YI SYLLABLE PA
A042  ; [.335E.0020.0002] # YI SYLLABLE PAP
A043  ; [.335F.0020.0002] # YI SYLLABLE PUOX
A044  ; [.3360.0020.0002] # YI SYLLABLE PUO
A045  ; [.3361.0020.0002] # YI SYLLABLE PUOP
A046  ; [.3362.0020.0002] # YI SYLLABLE POT
A047  ; [.3363.0020.0002] # YI SYLLABLE POX
A048  ; [.3364.0020.0002] # YI SYLLABLE PO
A049  ; [.3365.0020.0002] # YI SYLLABLE POP
A04A  ; [.3366.0020.0002] # YI SYLLABLE PUT
A04B  ; [.3367.0020.0002] # YI SYLLABLE PUX
A04C  ; [.3368.0020.0002] # YI SYLLABLE PU
A04D  ; [.3369.0020.0002] # YI SYLLABLE PUP
A04E  ; [.336A.0020.0002] # YI SYLLABLE PURX
A04F  ; [.336B.0020.0002] # YI SYLLABLE PUR
A050  ; [.336C.0020.0002] # YI SYLLABLE PYT
A051  ; [.336D.0020.0002] # YI SYLLABLE PYX
A052  ; [.336E.0020.0002] # YI SYLLABLE PY
A053  ; [.336F.0020.0002] # YI SYLLABLE PYP
A054  ; [.3370.0020.0002] # YI SYLLABLE PYRX
A055  ; [.3371.0020.0002] # YI SYLLABLE PYR
A056  ; [.3372.0020.0002] # YI SYLLABLE BBIT
A057  ; [.3373.0020.0002] # YI SYLLABLE BBIX
A058  ; [.3374.0020.0002] # YI SYLLABLE BBI
A059  ; [.3375.0020.0002] # YI SYLLABLE BBIP
A05A  ; [.3376.0020.0002] # YI SYLLABLE BBIET
A05B  ; [.3377.0020.0002] # YI SYLLABLE BBIEX
A05C  ; [.3378.0020.0002] # YI SYLLABLE BBIE
A05D  ; [.3379.0020.0002] # YI SYLLABLE BBIEP
A05E  ; [.337A.0020.0002] # YI SYLLABLE BBAT
A05F  ; [.337B.0020.0002] # YI SYLLABLE BBAX
A060  ; [.337C.0020.0002] # YI SYLLABLE BBA
A061  ; [.337D.0020.0002] # YI SYLLABLE BBAP
A062  ; [.337E.0020.0002] # YI SYLLABLE BBUOX
A063  ; [.337F.0020.0002] # YI SYLLABLE BBUO
A064  ; [.3380.0020.0002] # YI SYLLABLE BBUOP
A065  ; [.3381.0020.0002] # YI SYLLABLE BBOT
A066  ; [.3382.0020.0002] # YI SYLLABLE BBOX
A067  ; [.3383.0020.0002] # YI SYLLABLE BBO
A068  ; [.3384.0020.0002] # YI SYLLABLE BBOP
A069  ; [.3385.0020.0002] # YI SYLLABLE BBEX
A06A  ; [.3386.0020.0002] # YI SYLLABLE BBE
A06B  ; [.3387.0020.0002] # YI SYLLABLE BBEP
A06C  ; [.3388.0020.0002] # YI SYLLABLE BBUT
A06D  ; [.3389.0020.0002] # YI SYLLABLE BBUX
A06E  ; [.338A.0020.0002] # YI SYLLABLE BBU
A06F  ; [.338B.0020.0002] # YI SYLLABLE BBUP
A070  ; [.338C.0020.0002] # YI SYLLABLE BBURX
A071  ; [.338D.0020.0002] # YI SYLLABLE BBUR
A072  ; [.338E.0020.0002] # YI SYLLABLE BBYT
A073  ; [.338F.0020.0002] # YI SYLLABLE BBYX
A074  ; [.3390.0020.0002] # YI SYLLABLE BBY
A075  ; [.3391.0020.0002] # YI SYLLABLE BBYP
A076  ; [.3392.0020.0002] # YI SYLLABLE NBIT
A077  ; [.3393.0020.0002] # YI SYLLABLE NBIX
A078  ; [.3394.0020.0002] # YI SYLLABLE NBI
A079  ; [.3395.0020.0002] # YI SYLLABLE NBIP
A07A  ; [.3396.0020.0002] # YI SYLLABLE NBIEX
A07B  ; [.3397.0020.0002] # YI SYLLABLE NBIE
A07C  ; [.3398.0020.0002] # YI SYLLABLE NBIEP
A07D  ; [.3399.0020.0002] # YI SYLLABLE NBAT
A07E  ; [.339A.0020.0002] # YI SYLLABLE NBAX
A07F  ; [.339B.0020.0002] # YI SYLLABLE NBA
A080  ; [.339C.0020.0002] # YI SYLLABLE NBAP
A081  ; [.339D.0020.0002] # YI SYLLABLE NBOT
A082  ; [.339E.0020.0002] # YI SYLLABLE NBOX
A083  ; [.339F.0020.0002] # YI SYLLABLE NBO
A084  ; [.33A0.0020.0002] # YI SYLLABLE NBOP
A085  ; [.33A1.0020.0002] # YI SYLLABLE NBUT
A086  ; [.33A2.0020.0002] # YI SYLLABLE NBUX
A087  ; [.33A3.0020.0002] # YI SYLLABLE NBU
A088  ; [.33A4.0020.0002] # YI SYLLABLE NBUP
A089  ; [.33A5.0020.0002] # YI SYLLABLE NBURX
A08A  ; [.33A6.0020.0002] # YI SYLLABLE NBUR
A08B  ; [.33A7.0020.0002] # YI SYLLABLE NBYT
A08C  ; [.33A8.0020.0002] # YI SYLLABLE NBYX
A08D  ; [.33A9.0020.0002] # YI SYLLABLE NBY
A08E  ; [.33AA.0020.0002] # YI SYLLABLE NBYP
A08F  ; [.33AB.0020.0002] # YI SYLLABLE NBYRX
A090  ; [.33AC.0020.0002] # YI SYLLABLE NBYR
A091  ; [.33AD.0020.0002] # YI SYLLABLE HMIT
A092  ; [.33AE.0020.0002] # YI SYLLABLE HMIX
A093  ; [.33AF.0020.0002] # YI SYLLABLE HMI
A094  ; [.33B0.0020.0002] # YI SYLLABLE HMIP
A095  ; [.33B1.0020.0002] # YI SYLLABLE HMIEX
A096  ; [.33B2.0020.0002] # YI SYLLABLE HMIE
A097  ; [.33B3.0020.0002] # YI SYLLABLE HMIEP
A098  ; [.33B4.0020.0002] # YI SYLLABLE HMAT
A099  ; [.33B5.0020.0002] # YI SYLLABLE HMAX
A09A  ; [.33B6.0020.0002] # YI SYLLABLE HMA
A09B  ; [.33B7.0020.0002] # YI SYLLABLE HMAP
A09C  ; [.33B8.0020.0002] # YI SYLLABLE HMUOX
A09D  ; [.33B9.0020.0002] # YI SYLLABLE HMUO
A09E  ; [.33BA.0020.0002] # YI SYLLABLE HMUOP
A09F  ; [.33BB.0020.0002] # YI SYLLABLE HMOT
A0A0  ; [.33BC.0020.0002] # YI SYLLABLE HMOX
A0A1  ; [.33BD.0020.0002] # YI SYLLABLE HMO
A0A2  ; [.33BE.0020.0002] # YI SYLLABLE HMOP
A0A3  ; [.33BF.0020.0002] # YI SYLLABLE HMUT
A0A4  ; [.33C0.0020.0002] # YI SYLLABLE HMUX
A0A5  ; [.33C1.0020.0002] # YI SYLLABLE HMU
A0A6  ; [.33C2.0020.0002] # YI SYLLABLE HMUP
A0A7  ; [.33C3.0020.0002] # YI SYLLABLE HMURX
A0A8  ; [.33C4.0020.0002] # YI SYLLABLE HMUR
A0A9  ; [.33C5.0020.0002] # YI SYLLABLE HMYX
A0AA  ; [.33C6.0020.0002] # YI SYLLABLE HMY
A0AB  ; [.33C7.0020.0002] # YI SYLLABLE HMYP
A0AC  ; [.33C8.0020.0002] # YI SYLLABLE HMYRX
A0AD  ; [.33C9.0020.0002] # YI SYLLABLE HMYR
A0AE  ; [.33CA.0020.0002] # YI SYLLABLE MIT
A0AF  ; [.33CB.0020.0002] # YI SYLLABLE MIX
A0B0  ; [.33CC.0020.0002] # YI SYLLABLE MI
A0B1  ; [.33CD.0020.0002] # YI SYLLABLE MIP
A0B2  ; [.33CE.0020.0002] # YI SYLLABLE MIEX
A0B3  ; [.33CF.0020.0002] # YI SYLLABLE MIE
A0B4  ; [.33D0.0020.0002] # YI SYLLABLE MIEP
A0B5  ; [.33D1.0020.0002] # YI SYLLABLE MAT
A0B6  ; [.33D2.0020.0002] # YI SYLLABLE MAX
A0B7  ; [.33D3.0020.0002] # YI SYLLABLE MA
A0B8  ; [.33D4.0020.0002] # YI SYLLABLE MAP
A0B9  ; [.33D5.0020.0002] # YI SYLLABLE MUOT
A0BA  ; [.33D6.0020.0002] # YI SYLLABLE MUOX
A0BB  ; [.33D7.0020.0002] # YI SYLLABLE MUO
A0BC  ; [.33D8.0020.0002] # YI SYLLABLE MUOP
A0BD  ; [.33D9.0020.0002] # YI SYLLABLE MOT
A0BE  ; [.33DA.0020.0002] # YI SYLLABLE MOX
A0BF  ; [.33DB.0020.0002] # YI SYLLABLE MO
A0C0  ; [.33DC.0020.0002] # YI SYLLABLE MOP
A0C1  ; [.33DD.0020.0002] # YI SYLLABLE MEX
A0C2  ; [.33DE.0020.0002] # YI SYLLABLE ME
A0C3  ; [.33DF.0020.0002] # YI SYLLABLE MUT
A0C4  ; [.33E0.0020.0002] # YI SYLLABLE MUX
A0C5  ; [.33E1.0020.0002] # YI SYLLABLE MU
A0C6  ; [.33E2.0020.0002] # YI SYLLABLE MUP
A0C7  ; [.33E3.0020.0002] # YI SYLLABLE MURX
A0C8  ; [.33E4.0020.0002] # YI SYLLABLE MUR
A0C9  ; [.33E5.0020.0002] # YI SYLLABLE MYT
A0CA  ; [.33E6.0020.0002] # YI SYLLABLE MYX
A0CB  ; [.33E7.0020.0002] # YI SYLLABLE MY
A0CC  ; [.33E8.0020.0002] # YI SYLLABLE MYP
A0CD  ; [.33E9.0020.0002] # YI SYLLABLE FIT
A0CE  ; [.33EA.0020.0002] # YI SYLLABLE FIX
A0CF  ; [.33EB.0020.0002] # YI SYLLABLE FI
A0D0  ; [.33EC.0020.0002] # YI SYLLABLE FIP
A0D1  ; [.33ED.0020.0002] # YI SYLLABLE FAT
A0D2  ; [.33EE.0020.0002] # YI SYLLABLE FAX
A0D3  ; [.33EF.0020.0002] # YI SYLLABLE FA
A0D4  ; [.33F0.0020.0002] # YI SYLLABLE FAP
A0D5  ; [.33F1.0020.0002] # YI SYLLABLE FOX
A0D6  ; [.33F2.0020.0002] # YI SYLLABLE FO
A0D7  ; [.33F3.0020.0002] # YI SYLLABLE FOP
A0D8  ; [.33F4.0020.0002] # YI SYLLABLE FUT
A0D9  ; [.33F5.0020.0002] # YI SYLLABLE FUX
A0DA  ; [.33F6.0020.0002] # YI SYLLABLE FU
A0DB  ; [.33F7.0020.0002] # YI SYLLABLE FUP
A0DC  ; [.33F8.0020.0002] # YI SYLLABLE FURX
A0DD  ; [.33F9.0020.0002] # YI SYLLABLE FUR
A0DE  ; [.33FA.0020.0002] # YI SYLLABLE FYT
A0DF  ; [.33FB.0020.0002] # YI SYLLABLE FYX
A0E0  ; [.33FC.0020.0002] # YI SYLLABLE FY
A0E1  ; [.33FD.0020.0002] # YI SYLLABLE FYP
A0E2  ; [.33FE.0020.0002] # YI SYLLABLE VIT
A0E3  ; [.33FF.0020.0002] # YI SYLLABLE VIX
A0E4  ; [.3400.0020.0002] # YI SYLLABLE VI
A0E5  ; [.3401.0020.0002] # YI SYLLABLE VIP
A0E6  ; [.3402.0020.0002] # YI SYLLABLE VIET
A0E7  ; [.3403.0020.0002] # YI SYLLABLE VIEX
A0E8  ; [.3404.0020.0002] # YI SYLLABLE VIE
A0E9  ; [.3405.0020.0002] # YI SYLLABLE VIEP
A0EA  ; [.3406.0020.0002] # YI SYLLABLE VAT
A0EB  ; [.3407.0020.0002] # YI SYLLABLE VAX
A0EC  ; [.3408.0020.0002] # YI SYLLABLE VA
A0ED  ; [.3409.0020.0002] # YI SYLLABLE VAP
A0EE  ; [.340A.0020.0002] # YI SYLLABLE VOT
A0EF  ; [.340B.0020.0002] # YI SYLLABLE VOX
A0F0  ; [.340C.0020.0002] # YI SYLLABLE VO
A0F1  ; [.340D.0020.0002] # YI SYLLABLE VOP
A0F2  ; [.340E.0020.0002] # YI SYLLABLE VEX
A0F3  ; [.340F.0020.0002] # YI SYLLABLE VEP
A0F4  ; [.3410.0020.0002] # YI SYLLABLE VUT
A0F5  ; [.3411.0020.0002] # YI SYLLABLE VUX
A0F6  ; [.3412.0020.0002] # YI SYLLABLE VU
A0F7  ; [.3413.0020.0002] # YI SYLLABLE VUP
A0F8  ; [.3414.0020.0002] # YI SYLLABLE VURX
A0F9  ; [.3415.0020.0002] # YI SYLLABLE VUR
A0FA  ; [.3416.0020.0002] # YI SYLLABLE VYT
A0FB  ; [.3417.0020.0002] # YI SYLLABLE VYX
A0FC  ; [.3418.0020.0002] # YI SYLLABLE VY
A0FD  ; [.3419.0020.0002] # YI SYLLABLE VYP
A0FE  ; [.341A.0020.0002] # YI SYLLABLE VYRX
A0FF  ; [.341B.0020.0002] # YI SYLLABLE VYR
A100  ; [.341C.0020.0002] # YI SYLLABLE DIT
A101  ; [.341D.0020.0002] # YI SYLLABLE DIX
A102  ; [.341E.0020.0002] # YI SYLLABLE DI
A103  ; [.341F.0020.0002] # YI SYLLABLE DIP
A104  ; [.3420.0020.0002] # YI SYLLABLE DIEX
A105  ; [.3421.0020.0002] # YI SYLLABLE DIE
A106  ; [.3422.0020.0002] # YI SYLLABLE DIEP
A107  ; [.3423.0020.0002] # YI SYLLABLE DAT
A108  ; [.3424.0020.0002] # YI SYLLABLE DAX
A109  ; [.3425.0020.0002] # YI SYLLABLE DA
A10A  ; [.3426.0020.0002] # YI SYLLABLE DAP
A10B  ; [.3427.0020.0002] # YI SYLLABLE DUOX
A10C  ; [.3428.0020.0002] # YI SYLLABLE DUO
A10D  ; [.3429.0020.0002] # YI SYLLABLE DOT
A10E  ; [.342A.0020.0002] # YI SYLLABLE DOX
A10F  ; [.342B.0020.0002] # YI SYLLABLE DO
A110  ; [.342C.0020.0002] # YI SYLLABLE DOP
A111  ; [.342D.0020.0002] # YI SYLLABLE DEX
A112  ; [.342E.0020.0002] # YI SYLLABLE DE
A113  ; [.342F.0020.0002] # YI SYLLABLE DEP
A114  ; [.3430.0020.0002] # YI SYLLABLE DUT
A115  ; [.3431.0020.0002] # YI SYLLABLE DUX
A116  ; [.3432.0020.0002] # YI SYLLABLE DU
A117  ; [.3433.0020.0002] # YI SYLLABLE DUP
A118  ; [.3434.0020.0002] # YI SYLLABLE DURX
A119  ; [.3435.0020.0002] # YI SYLLABLE DUR
A11A  ; [.3436.0020.0002] # YI SYLLABLE TIT
A11B  ; [.3437.0020.0002] # YI SYLLABLE TIX
A11C  ; [.3438.0020.0002] # YI SYLLABLE TI
A11D  ; [.3439.0020.0002] # YI SYLLABLE TIP
A11E  ; [.343A.0020.0002] # YI SYLLABLE TIEX
A11F  ; [.343B.0020.0002] # YI SYLLABLE TIE
A120  ; [.343C.0020.0002] # YI SYLLABLE TIEP
A121  ; [.343D.0020.0002] # YI SYLLABLE TAT
A122  ; [.343E.0020.0002] # YI SYLLABLE TAX
A123  ; [.343F.0020.0002] # YI SYLLABLE TA
A124  ; [.3440.0020.0002] # YI SYLLABLE TAP
A125  ; [.3441.0020.0002] # YI SYLLABLE TUOT
A126  ; [.3442.0020.0002] # YI SYLLABLE TUOX
A127  ; [.3443.0020.0002] # YI SYLLABLE TUO
A128  ; [.3444.0020.0002] # YI SYLLABLE TUOP
A129  ; [.3445.0020.0002] # YI SYLLABLE TOT
A12A  ; [.3446.0020.0002] # YI SYLLABLE TOX
A12B  ; [.3447.0020.0002] # YI SYLLABLE TO
A12C  ; [.3448.0020.0002] # YI SYLLABLE TOP
A12D  ; [.3449.0020.0002] # YI SYLLABLE TEX
A12E  ; [.344A.0020.0002] # YI SYLLABLE TE
A12F  ; [.344B.0020.0002] # YI SYLLABLE TEP
A130  ; [.344C.0020.0002] # YI SYLLABLE TUT
A131  ; [.344D.0020.0002] # YI SYLLABLE TUX
A132  ; [.344E.0020.0002] # YI SYLLABLE TU
A133  ; [.344F.0020.0002] # YI SYLLABLE TUP
A134  ; [.3450.0020.0002] # YI SYLLABLE TURX
A135  ; [.3451.0020.0002] # YI SYLLABLE TUR
A136  ; [.3452.0020.0002] # YI SYLLABLE DDIT
A137  ; [.3453.0020.0002] # YI SYLLABLE DDIX
A138  ; [.3454.0020.0002] # YI SYLLABLE DDI
A139  ; [.3455.0020.0002] # YI SYLLABLE DDIP
A13A  ; [.3456.0020.0002] # YI SYLLABLE DDIEX
A13B  ; [.3457.0020.0002] # YI SYLLABLE DDIE
A13C  ; [.3458.0020.0002] # YI SYLLABLE DDIEP
A13D  ; [.3459.0020.0002] # YI SYLLABLE DDAT
A13E  ; [.345A.0020.0002] # YI SYLLABLE DDAX
A13F  ; [.345B.0020.0002] # YI SYLLABLE DDA
A140  ; [.345C.0020.0002] # YI SYLLABLE DDAP
A141  ; [.345D.0020.0002] # YI SYLLABLE DDUOX
A142  ; [.345E.0020.0002] # YI SYLLABLE DDUO
A143  ; [.345F.0020.0002] # YI SYLLABLE DDUOP
A144  ; [.3460.0020.0002] # YI SYLLABLE DDOT
A145  ; [.3461.0020.0002] # YI SYLLABLE DDOX
A146  ; [.3462.0020.0002] # YI SYLLABLE DDO
A147  ; [.3463.0020.0002] # YI SYLLABLE DDOP
A148  ; [.3464.0020.0002] # YI SYLLABLE DDEX
A149  ; [.3465.0020.0002] # YI SYLLABLE DDE
A14A  ; [.3466.0020.0002] # YI SYLLABLE DDEP
A14B  ; [.3467.0020.0002] # YI SYLLABLE DDUT
A14C  ; [.3468.0020.0002] # YI SYLLABLE DDUX
A14D  ; [.3469.0020.0002] # YI SYLLABLE DDU
A14E  ; [.346A.0020.0002] # YI SYLLABLE DDUP
A14F  ; [.346B.0020.0002] # YI SYLLABLE DDURX
A150  ; [.346C.0020.0002] # YI SYLLABLE DDUR
A151  ; [.346D.0020.0002] # YI SYLLABLE NDIT
A152  ; [.346E.0020.0002] # YI SYLLABLE NDIX
A153  ; [.346F.0020.0002] # YI SYLLABLE NDI
A154  ; [.3470.0020.0002] # YI SYLLABLE NDIP
A155  ; [.3471.0020.0002] # YI SYLLABLE NDIEX
A156  ; [.3472.0020.0002] # YI SYLLABLE NDIE
A157  ; [.3473.0020.0002] # YI SYLLABLE NDAT
A158  ; [.3474.0020.0002] # YI SYLLABLE NDAX
A159  ; [.3475.0020.0002] # YI SYLLABLE NDA
A15A  ; [.3476.0020.0002] # YI SYLLABLE NDAP
A15B  ; [.3477.0020.0002] # YI SYLLABLE NDOT
A15C  ; [.3478.0020.0002] # YI SYLLABLE NDOX
A15D  ; [.3479.0020.0002] # YI SYLLABLE NDO
A15E  ; [.347A.0020.0002] # YI SYLLABLE NDOP
A15F  ; [.347B.0020.0002] # YI SYLLABLE NDEX
A160  ; [.347C.0020.0002] # YI SYLLABLE NDE
A161  ; [.347D.0020.0002] # YI SYLLABLE NDEP
A162  ; [.347E.0020.0002] # YI SYLLABLE NDUT
A163  ; [.347F.0020.0002] # YI SYLLABLE NDUX
A164  ; [.3480.0020.0002] # YI SYLLABLE NDU
A165  ; [.3481.0020.0002] # YI SYLLABLE NDUP
A166  ; [.3482.0020.0002] # YI SYLLABLE NDURX
A167  ; [.3483.0020.0002] # YI SYLLABLE NDUR
A168  ; [.3484.0020.0002] # YI SYLLABLE HNIT
A169  ; [.3485.0020.0002] # YI SYLLABLE HNIX
A16A  ; [.3486.0020.0002] # YI SYLLABLE HNI
A16B  ; [.3487.0020.0002] # YI SYLLABLE HNIP
A16C  ; [.3488.0020.0002] # YI SYLLABLE HNIET
A16D  ; [.3489.0020.0002] # YI SYLLABLE HNIEX
A16E  ; [.348A.0020.0002] # YI SYLLABLE HNIE
A16F  ; [.348B.0020.0002] # YI SYLLABLE HNIEP
A170  ; [.348C.0020.0002] # YI SYLLABLE HNAT
A171  ; [.348D.0020.0002] # YI SYLLABLE HNAX
A172  ; [.348E.0020.0002] # YI SYLLABLE HNA
A173  ; [.348F.0020.0002] # YI SYLLABLE HNAP
A174  ; [.3490.0020.0002] # YI SYLLABLE HNUOX
A175  ; [.3491.0020.0002] # YI SYLLABLE HNUO
A176  ; [.3492.0020.0002] # YI SYLLABLE HNOT
A177  ; [.3493.0020.0002] # YI SYLLABLE HNOX
A178  ; [.3494.0020.0002] # YI SYLLABLE HNOP
A179  ; [.3495.0020.0002] # YI SYLLABLE HNEX
A17A  ; [.3496.0020.0002] # YI SYLLABLE HNE
A17B  ; [.3497.0020.0002] # YI SYLLABLE HNEP
A17C  ; [.3498.0020.0002] # YI SYLLABLE HNUT
A17D  ; [.3499.0020.0002] # YI SYLLABLE NIT
A17E  ; [.349A.0020.0002] # YI SYLLABLE NIX
A17F  ; [.349B.0020.0002] # YI SYLLABLE NI
A180  ; [.349C.0020.0002] # YI SYLLABLE NIP
A181  ; [.349D.0020.0002] # YI SYLLABLE NIEX
A182  ; [.349E.0020.0002] # YI SYLLABLE NIE
A183  ; [.349F.0020.0002] # YI SYLLABLE NIEP
A184  ; [.34A0.0020.0002] # YI SYLLABLE NAX
A185  ; [.34A1.0020.0002] # YI SYLLABLE NA
A186  ; [.34A2.0020.0002] # YI SYLLABLE NAP
A187  ; [.34A3.0020.0002] # YI SYLLABLE NUOX
A188  ; [.34A4.0020.0002] # YI SYLLABLE NUO
A189  ; [.34A5.0020.0002] # YI SYLLABLE NUOP
A18A  ; [.34A6.0020.0002] # YI SYLLABLE NOT
A18B  ; [.34A7.0020.0002] # YI SYLLABLE NOX
A18C  ; [.34A8.0020.0002] # YI SYLLABLE NO
A18D  ; [.34A9.0020.0002] # YI SYLLABLE NOP
A18E  ; [.34AA.0020.0002] # YI SYLLABLE NEX
A18F  ; [.34AB.0020.0002] # YI SYLLABLE NE
A190  ; [.34AC.0020.0002] # YI SYLLABLE NEP
A191  ; [.34AD.0020.0002] # YI SYLLABLE NUT
A192  ; [.34AE.0020.0002] # YI SYLLABLE NUX
A193  ; [.34AF.0020.0002] # YI SYLLABLE NU
A194  ; [.34B0.0020.0002] # YI SYLLABLE NUP
A195  ; [.34B1.0020.0002] # YI SYLLABLE NURX
A196  ; [.34B2.0020.0002] # YI SYLLABLE NUR
A197  ; [.34B3.0020.0002] # YI SYLLABLE HLIT
A198  ; [.34B4.0020.0002] # YI SYLLABLE HLIX
A199  ; [.34B5.0020.0002] # YI SYLLABLE HLI
A19A  ; [.34B6.0020.0002] # YI SYLLABLE HLIP
A19B  ; [.34B7.0020.0002] # YI SYLLABLE HLIEX
A19C  ; [.34B8.0020.0002] # YI SYLLABLE HLIE
A19D  ; [.34B9.0020.0002] # YI SYLLABLE HLIEP
A19E  ; [.34BA.0020.0002] # YI SYLLABLE HLAT
A19F  ; [.34BB.0020.0002] # YI SYLLABLE HLAX
A1A0  ; [.34BC.0020.0002] # YI SYLLABLE HLA
A1A1  ; [.34BD.0020.0002] # YI SYLLABLE HLAP
A1A2  ; [.34BE.0020.0002] # YI SYLLABLE HLUOX
A1A3  ; [.34BF.0020.0002] # YI SYLLABLE HLUO
A1A4  ; [.34C0.0020.0002] # YI SYLLABLE HLUOP
A1A5  ; [.34C1.0020.0002] # YI SYLLABLE HLOX
A1A6  ; [.34C2.0020.0002] # YI SYLLABLE HLO
A1A7  ; [.34C3.0020.0002] # YI SYLLABLE HLOP
A1A8  ; [.34C4.0020.0002] # YI SYLLABLE HLEX
A1A9  ; [.34C5.0020.0002] # YI SYLLABLE HLE
A1AA  ; [.34C6.0020.0002] # YI SYLLABLE HLEP
A1AB  ; [.34C7.0020.0002] # YI SYLLABLE HLUT
A1AC  ; [.34C8.0020.0002] # YI SYLLABLE HLUX
A1AD  ; [.34C9.0020.0002] # YI SYLLABLE HLU
A1AE  ; [.34CA.0020.0002] # YI SYLLABLE HLUP
A1AF  ; [.34CB.0020.0002] # YI SYLLABLE HLURX
A1B0  ; [.34CC.0020.0002] # YI SYLLABLE HLUR
A1B1  ; [.34CD.0020.0002] # YI SYLLABLE HLYT
A1B2  ; [.34CE.0020.0002] # YI SYLLABLE HLYX
A1B3  ; [.34CF.0020.0002] # YI SYLLABLE HLY
A1B4  ; [.34D0.0020.0002] # YI SYLLABLE HLYP
A1B5  ; [.34D1.0020.0002] # YI SYLLABLE HLYRX
A1B6  ; [.34D2.0020.0002] # YI SYLLABLE HLYR
A1B7  ; [.34D3.0020.0002] # YI SYLLABLE LIT
A1B8  ; [.34D4.0020.0002] # YI SYLLABLE LIX
A1B9  ; [.34D5.0020.0002] # YI SYLLABLE LI
A1BA  ; [.34D6.0020.0002] # YI SYLLABLE LIP
A1BB  ; [.34D7.0020.0002] # YI SYLLABLE LIET
A1BC  ; [.34D8.0020.0002] # YI SYLLABLE LIEX
A1BD  ; [.34D9.0020.0002] # YI SYLLABLE LIE
A1BE  ; [.34DA.0020.0002] # YI SYLLABLE LIEP
A1BF  ; [.34DB.0020.0002] # YI SYLLABLE LAT
A1C0  ; [.34DC.0020.0002] # YI SYLLABLE LAX
A1C1  ; [.34DD.0020.0002] # YI SYLLABLE LA
A1C2  ; [.34DE.0020.0002] # YI SYLLABLE LAP
A1C3  ; [.34DF.0020.0002] # YI SYLLABLE LUOT
A1C4  ; [.34E0.0020.0002] # YI SYLLABLE LUOX
A1C5  ; [.34E1.0020.0002] # YI SYLLABLE LUO
A1C6  ; [.34E2.0020.0002] # YI SYLLABLE LUOP
A1C7  ; [.34E3.0020.0002] # YI SYLLABLE LOT
A1C8  ; [.34E4.0020.0002] # YI SYLLABLE LOX
A1C9  ; [.34E5.0020.0002] # YI SYLLABLE LO
A1CA  ; [.34E6.0020.0002] # YI SYLLABLE LOP
A1CB  ; [.34E7.0020.0002] # YI SYLLABLE LEX
A1CC  ; [.34E8.0020.0002] # YI SYLLABLE LE
A1CD  ; [.34E9.0020.0002] # YI SYLLABLE LEP
A1CE  ; [.34EA.0020.0002] # YI SYLLABLE LUT
A1CF  ; [.34EB.0020.0002] # YI SYLLABLE LUX
A1D0  ; [.34EC.0020.0002] # YI SYLLABLE LU
A1D1  ; [.34ED.0020.0002] # YI SYLLABLE LUP
A1D2  ; [.34EE.0020.0002] # YI SYLLABLE LURX
A1D3  ; [.34EF.0020.0002] # YI SYLLABLE LUR
A1D4  ; [.34F0.0020.0002] # YI SYLLABLE LYT
A1D5  ; [.34F1.0020.0002] # YI SYLLABLE LYX
A1D6  ; [.34F2.0020.0002] # YI SYLLABLE LY
A1D7  ; [.34F3.0020.0002] # YI SYLLABLE LYP
A1D8  ; [.34F4.0020.0002] # YI SYLLABLE LYRX
A1D9  ; [.34F5.0020.0002] # YI SYLLABLE LYR
A1DA  ; [.34F6.0020.0002] # YI SYLLABLE GIT
A1DB  ; [.34F7.0020.0002] # YI SYLLABLE GIX
A1DC  ; [.34F8.0020.0002] # YI SYLLABLE GI
A1DD  ; [.34F9.0020.0002] # YI SYLLABLE GIP
A1DE  ; [.34FA.0020.0002] # YI SYLLABLE GIET
A1DF  ; [.34FB.0020.0002] # YI SYLLABLE GIEX
A1E0  ; [.34FC.0020.0002] # YI SYLLABLE GIE
A1E1  ; [.34FD.0020.0002] # YI SYLLABLE GIEP
A1E2  ; [.34FE.0020.0002] # YI SYLLABLE GAT
A1E3  ; [.34FF.0020.0002] # YI SYLLABLE GAX
A1E4  ; [.3500.0020.0002] # YI SYLLABLE GA
A1E5  ; [.3501.0020.0002] # YI SYLLABLE GAP
A1E6  ; [.3502.0020.0002] # YI SYLLABLE GUOT
A1E7  ; [.3503.0020.0002] # YI SYLLABLE GUOX
A1E8  ; [.3504.0020.0002] # YI SYLLABLE GUO
A1E9  ; [.3505.0020.0002] # YI SYLLABLE GUOP
A1EA  ; [.3506.0020.0002] # YI SYLLABLE GOT
A1EB  ; [.3507.0020.0002] # YI SYLLABLE GOX
A1EC  ; [.3508.0020.0002] # YI SYLLABLE GO
A1ED  ; [.3509.0020.0002] # YI SYLLABLE GOP
A1EE  ; [.350A.0020.0002] # YI SYLLABLE GET
A1EF  ; [.350B.0020.0002] # YI SYLLABLE GEX
A1F0  ; [.350C.0020.0002] # YI SYLLABLE GE
A1F1  ; [.350D.0020.0002] # YI SYLLABLE GEP
A1F2  ; [.350E.0020.0002] # YI SYLLABLE GUT
A1F3  ; [.350F.0020.0002] # YI SYLLABLE GUX
A1F4  ; [.3510.0020.0002] # YI SYLLABLE GU
A1F5  ; [.3511.0020.0002] # YI SYLLABLE GUP
A1F6  ; [.3512.0020.0002] # YI SYLLABLE GURX
A1F7  ; [.3513.0020.0002] # YI SYLLABLE GUR
A1F8  ; [.3514.0020.0002] # YI SYLLABLE KIT
A1F9  ; [.3515.0020.0002] # YI SYLLABLE KIX
A1FA  ; [.3516.0020.0002] # YI SYLLABLE KI
A1FB  ; [.3517.0020.0002] # YI SYLLABLE KIP
A1FC  ; [.3518.0020.0002] # YI SYLLABLE KIEX
A1FD  ; [.3519.0020.0002] # YI SYLLABLE KIE
A1FE  ; [.351A.0020.0002] # YI SYLLABLE KIEP
A1FF  ; [.351B.0020.0002] # YI SYLLABLE KAT
A200  ; [.351C.0020.0002] # YI SYLLABLE KAX
A201  ; [.351D.0020.0002] # YI SYLLABLE KA
A202  ; [.351E.0020.0002] # YI SYLLABLE KAP
A203  ; [.351F.0020.0002] # YI SYLLABLE KUOX
A204  ; [.3520.0020.0002] # YI SYLLABLE KUO
A205  ; [.3521.0020.0002] # YI SYLLABLE KUOP
A206  ; [.3522.0020.0002] # YI SYLLABLE KOT
A207  ; [.3523.0020.0002] # YI SYLLABLE KOX
A208  ; [.3524.0020.0002] # YI SYLLABLE KO
A209  ; [.3525.0020.0002] # YI SYLLABLE KOP
A20A  ; [.3526.0020.0002] # YI SYLLABLE KET
A20B  ; [.3527.0020.0002] # YI SYLLABLE KEX
A20C  ; [.3528.0020.0002] # YI SYLLABLE KE
A20D  ; [.3529.0020.0002] # YI SYLLABLE KEP
A20E  ; [.352A.0020.0002] # YI SYLLABLE KUT
A20F  ; [.352B.0020.0002] # YI SYLLABLE KUX
A210  ; [.352C.0020.0002] # YI SYLLABLE KU
A211  ; [.352D.0020.0002] # YI SYLLABLE KUP
A212  ; [.352E.0020.0002] # YI SYLLABLE KURX
A213  ; [.352F.0020.0002] # YI SYLLABLE KUR
A214  ; [.3530.0020.0002] # YI SYLLABLE GGIT
A215  ; [.3531.0020.0002] # YI SYLLABLE GGIX
A216  ; [.3532.0020.0002] # YI SYLLABLE GGI
A217  ; [.3533.0020.0002] # YI SYLLABLE GGIEX
A218  ; [.3534.0020.0002] # YI SYLLABLE GGIE
A219  ; [.3535.0020.0002] # YI SYLLABLE GGIEP
A21A  ; [.3536.0020.0002] # YI SYLLABLE GGAT
A21B  ; [.3537.0020.0002] # YI SYLLABLE GGAX
A21C  ; [.3538.0020.0002] # YI SYLLABLE GGA
A21D  ; [.3539.0020.0002] # YI SYLLABLE GGAP
A21E  ; [.353A.0020.0002] # YI SYLLABLE GGUOT
A21F  ; [.353B.0020.0002] # YI SYLLABLE GGUOX
A220  ; [.353C.0020.0002] # YI SYLLABLE GGUO
A221  ; [.353D.0020.0002] # YI SYLLABLE GGUOP
A222  ; [.353E.0020.0002] # YI SYLLABLE GGOT
A223  ; [.353F.0020.0002] # YI SYLLABLE GGOX
A224  ; [.3540.0020.0002] # YI SYLLABLE GGO
A225  ; [.3541.0020.0002] # YI SYLLABLE GGOP
A226  ; [.3542.0020.0002] # YI SYLLABLE GGET
A227  ; [.3543.0020.0002] # YI SYLLABLE GGEX
A228  ; [.3544.0020.0002] # YI SYLLABLE GGE
A229  ; [.3545.0020.0002] # YI SYLLABLE GGEP
A22A  ; [.3546.0020.0002] # YI SYLLABLE GGUT
A22B  ; [.3547.0020.0002] # YI SYLLABLE GGUX
A22C  ; [.3548.0020.0002] # YI SYLLABLE GGU
A22D  ; [.3549.0020.0002] # YI SYLLABLE GGUP
A22E  ; [.354A.0020.0002] # YI SYLLABLE GGURX
A22F  ; [.354B.0020.0002] # YI SYLLABLE GGUR
A230  ; [.354C.0020.0002] # YI SYLLABLE MGIEX
A231  ; [.354D.0020.0002] # YI SYLLABLE MGIE
A232  ; [.354E.0020.0002] # YI SYLLABLE MGAT
A233  ; [.354F.0020.0002] # YI SYLLABLE MGAX
A234  ; [.3550.0020.0002] # YI SYLLABLE MGA
A235  ; [.3551.0020.0002] # YI SYLLABLE MGAP
A236  ; [.3552.0020.0002] # YI SYLLABLE MGUOX
A237  ; [.3553.0020.0002] # YI SYLLABLE MGUO
A238  ; [.3554.0020.0002] # YI SYLLABLE MGUOP
A239  ; [.3555.0020.0002] # YI SYLLABLE MGOT
A23A  ; [.3556.0020.0002] # YI SYLLABLE MGOX
A23B  ; [.3557.0020.0002] # YI SYLLABLE MGO
A23C  ; [.3558.0020.0002] # YI SYLLABLE MGOP
A23D  ; [.3559.0020.0002] # YI SYLLABLE MGEX
A23E  ; [.355A.0020.0002] # YI SYLLABLE MGE
A23F  ; [.355B.0020.0002] # YI SYLLABLE MGEP
A240  ; [.355C.0020.0002] # YI SYLLABLE MGUT
A241  ; [.355D.0020.0002] # YI SYLLABLE MGUX
A242  ; [.355E.0020.0002] # YI SYLLABLE MGU
A243  ; [.355F.0020.0002] # YI SYLLABLE MGUP
A244  ; [.3560.0020.0002] # YI SYLLABLE MGURX
A245  ; [.3561.0020.0002] # YI SYLLABLE MGUR
A246  ; [.3562.0020.0002] # YI SYLLABLE HXIT
A247  ; [.3563.0020.0002] # YI SYLLABLE HXIX
A248  ; [.3564.0020.0002] # YI SYLLABLE HXI
A249  ; [.3565.0020.0002] # YI SYLLABLE HXIP
A24A  ; [.3566.0020.0002] # YI SYLLABLE HXIET
A24B  ; [.3567.0020.0002] # YI SYLLABLE HXIEX
A24C  ; [.3568.0020.0002] # YI SYLLABLE HXIE
A24D  ; [.3569.0020.0002] # YI SYLLABLE HXIEP
A24E  ; [.356A.0020.0002] # YI SYLLABLE HXAT
A24F  ; [.356B.0020.0002] # YI SYLLABLE HXAX
A250  ; [.356C.0020.0002] # YI SYLLABLE HXA
A251  ; [.356D.0020.0002] # YI SYLLABLE HXAP
A252  ; [.356E.0020.0002] # YI SYLLABLE HXUOT
A253  ; [.356F.0020.0002] # YI SYLLABLE HXUOX
A254  ; [.3570.0020.0002] # YI SYLLABLE HXUO
A255  ; [.3571.0020.0002] # YI SYLLABLE HXUOP
A256  ; [.3572.0020.0002] # YI SYLLABLE HXOT
A257  ; [.3573.0020.0002] # YI SYLLABLE HXOX
A258  ; [.3574.0020.0002] # YI SYLLABLE HXO
A259  ; [.3575.0020.0002] # YI SYLLABLE HXOP
A25A  ; [.3576.0020.0002] # YI SYLLABLE HXEX
A25B  ; [.3577.0020.0002] # YI SYLLABLE HXE
A25C  ; [.3578.0020.0002] # YI SYLLABLE HXEP
A25D  ; [.3579.0020.0002] # YI SYLLABLE NGIEX
A25E  ; [.357A.0020.0002] # YI SYLLABLE NGIE
A25F  ; [.357B.0020.0002] # YI SYLLABLE NGIEP
A260  ; [.357C.0020.0002] # YI SYLLABLE NGAT
A261  ; [.357D.0020.0002] # YI SYLLABLE NGAX
A262  ; [.357E.0020.0002] # YI SYLLABLE NGA
A263  ; [.357F.0020.0002] # YI SYLLABLE NGAP
A264  ; [.3580.0020.0002] # YI SYLLABLE NGUOT
A265  ; [.3581.0020.0002] # YI SYLLABLE NGUOX
A266  ; [.3582.0020.0002] # YI SYLLABLE NGUO
A267  ; [.3583.0020.0002] # YI SYLLABLE NGOT
A268  ; [.3584.0020.0002] # YI SYLLABLE NGOX
A269  ; [.3585.0020.0002] # YI SYLLABLE NGO
A26A  ; [.3586.0020.0002] # YI SYLLABLE NGOP
A26B  ; [.3587.0020.0002] # YI SYLLABLE NGEX
A26C  ; [.3588.0020.0002] # YI SYLLABLE NGE
A26D  ; [.3589.0020.0002] # YI SYLLABLE NGEP
A26E  ; [.358A.0020.0002] # YI SYLLABLE HIT
A26F  ; [.358B.0020.0002] # YI SYLLABLE HIEX
A270  ; [.358C.0020.0002] # YI SYLLABLE HIE
A271  ; [.358D.0020.0002] # YI SYLLABLE HAT
A272  ; [.358E.0020.0002] # YI SYLLABLE HAX
A273  ; [.358F.0020.0002] # YI SYLLABLE HA
A274  ; [.3590.0020.0002] # YI SYLLABLE HAP
A275  ; [.3591.0020.0002] # YI SYLLABLE HUOT
A276  ; [.3592.0020.0002] # YI SYLLABLE HUOX
A277  ; [.3593.0020.0002] # YI SYLLABLE HUO
A278  ; [.3594.0020.0002] # YI SYLLABLE HUOP
A279  ; [.3595.0020.0002] # YI SYLLABLE HOT
A27A  ; [.3596.0020.0002] # YI SYLLABLE HOX
A27B  ; [.3597.0020.0002] # YI SYLLABLE HO
A27C  ; [.3598.0020.0002] # YI SYLLABLE HOP
A27D  ; [.3599.0020.0002] # YI SYLLABLE HEX
A27E  ; [.359A.0020.0002] # YI SYLLABLE HE
A27F  ; [.359B.0020.0002] # YI SYLLABLE HEP
A280  ; [.359C.0020.0002] # YI SYLLABLE WAT
A281  ; [.359D.0020.0002] # YI SYLLABLE WAX
A282  ; [.359E.0020.0002] # YI SYLLABLE WA
A283  ; [.359F.0020.0002] # YI SYLLABLE WAP
A284  ; [.35A0.0020.0002] # YI SYLLABLE WUOX
A285  ; [.35A1.0020.0002] # YI SYLLABLE WUO
A286  ; [.35A2.0020.0002] # YI SYLLABLE WUOP
A287  ; [.35A3.0020.0002] # YI SYLLABLE WOX
A288  ; [.35A4.0020.0002] # YI SYLLABLE WO
A289  ; [.35A5.0020.0002] # YI SYLLABLE WOP
A28A  ; [.35A6.0020.0002] # YI SYLLABLE WEX
A28B  ; [.35A7.0020.0002] # YI SYLLABLE WE
A28C  ; [.35A8.0020.0002] # YI SYLLABLE WEP
A28D  ; [.35A9.0020.0002] # YI SYLLABLE ZIT
A28E  ; [.35AA.0020.0002] # YI SYLLABLE ZIX
A28F  ; [.35AB.0020.0002] # YI SYLLABLE ZI
A290  ; [.35AC.0020.0002] # YI SYLLABLE ZIP
A291  ; [.35AD.0020.0002] # YI SYLLABLE ZIEX
A292  ; [.35AE.0020.0002] # YI SYLLABLE ZIE
A293  ; [.35AF.0020.0002] # YI SYLLABLE ZIEP
A294  ; [.35B0.0020.0002] # YI SYLLABLE ZAT
A295  ; [.35B1.0020.0002] # YI SYLLABLE ZAX
A296  ; [.35B2.0020.0002] # YI SYLLABLE ZA
A297  ; [.35B3.0020.0002] # YI SYLLABLE ZAP
A298  ; [.35B4.0020.0002] # YI SYLLABLE ZUOX
A299  ; [.35B5.0020.0002] # YI SYLLABLE ZUO
A29A  ; [.35B6.0020.0002] # YI SYLLABLE ZUOP
A29B  ; [.35B7.0020.0002] # YI SYLLABLE ZOT
A29C  ; [.35B8.0020.0002] # YI SYLLABLE ZOX
A29D  ; [.35B9.0020.0002] # YI SYLLABLE ZO
A29E  ; [.35BA.0020.0002] # YI SYLLABLE ZOP
A29F  ; [.35BB.0020.0002] # YI SYLLABLE ZEX
A2A0  ; [.35BC.0020.0002] # YI SYLLABLE ZE
A2A1  ; [.35BD.0020.0002] # YI SYLLABLE ZEP
A2A2  ; [.35BE.0020.0002] # YI SYLLABLE ZUT
A2A3  ; [.35BF.0020.0002] # YI SYLLABLE ZUX
A2A4  ; [.35C0.0020.0002] # YI SYLLABLE ZU
A2A5  ; [.35C1.0020.0002] # YI SYLLABLE ZUP
A2A6  ; [.35C2.0020.0002] # YI SYLLABLE ZURX
A2A7  ; [.35C3.0020.0002] # YI SYLLABLE ZUR
A2A8  ; [.35C4.0020.0002] # YI SYLLABLE ZYT
A2A9  ; [.35C5.0020.0002] # YI SYLLABLE ZYX
A2AA  ; [.35C6.0020.0002] # YI SYLLABLE ZY
A2AB  ; [.35C7.0020.0002] # YI SYLLABLE ZYP
A2AC  ; [.35C8.0020.0002] # YI SYLLABLE ZYRX
A2AD  ; [.35C9.0020.0002] # YI SYLLABLE ZYR
A2AE  ; [.35CA.0020.0002] # YI SYLLABLE CIT
A2AF  ; [.35CB.0020.0002] # YI SYLLABLE CIX
A2B0  ; [.35CC.0020.0002] # YI SYLLABLE CI
A2B1  ; [.35CD.0020.0002] # YI SYLLABLE CIP
A2B2  ; [.35CE.0020.0002] # YI SYLLABLE CIET
A2B3  ; [.35CF.0020.0002] # YI SYLLABLE CIEX
A2B4  ; [.35D0.0020.0002] # YI SYLLABLE CIE
A2B5  ; [.35D1.0020.0002] # YI SYLLABLE CIEP
A2B6  ; [.35D2.0020.0002] # YI SYLLABLE CAT
A2B7  ; [.35D3.0020.0002] # YI SYLLABLE CAX
A2B8  ; [.35D4.0020.0002] # YI SYLLABLE CA
A2B9  ; [.35D5.0020.0002] # YI SYLLABLE CAP
A2BA  ; [.35D6.0020.0002] # YI SYLLABLE CUOX
A2BB  ; [.35D7.0020.0002] # YI SYLLABLE CUO
A2BC  ; [.35D8.0020.0002] # YI SYLLABLE CUOP
A2BD  ; [.35D9.0020.0002] # YI SYLLABLE COT
A2BE  ; [.35DA.0020.0002] # YI SYLLABLE COX
A2BF  ; [.35DB.0020.0002] # YI SYLLABLE CO
A2C0  ; [.35DC.0020.0002] # YI SYLLABLE COP
A2C1  ; [.35DD.0020.0002] # YI SYLLABLE CEX
A2C2  ; [.35DE.0020.0002] # YI SYLLABLE CE
A2C3  ; [.35DF.0020.0002] # YI SYLLABLE CEP
A2C4  ; [.35E0.0020.0002] # YI SYLLABLE CUT
A2C5  ; [.35E1.0020.0002] # YI SYLLABLE CUX
A2C6  ; [.35E2.0020.0002] # YI SYLLABLE CU
A2C7  ; [.35E3.0020.0002] # YI SYLLABLE CUP
A2C8  ; [.35E4.0020.0002] # YI SYLLABLE CURX
A2C9  ; [.35E5.0020.0002] # YI SYLLABLE CUR
A2CA  ; [.35E6.0020.0002] # YI SYLLABLE CYT
A2CB  ; [.35E7.0020.0002] # YI SYLLABLE CYX
A2CC  ; [.35E8.0020.0002] # YI SYLLABLE CY
A2CD  ; [.35E9.0020.0002] # YI SYLLABLE CYP
A2CE  ; [.35EA.0020.0002] # YI SYLLABLE CYRX
A2CF  ; [.35EB.0020.0002] # YI SYLLABLE CYR
A2D0  ; [.35EC.0020.0002] # YI SYLLABLE ZZIT
A2D1  ; [.35ED.0020.0002] # YI SYLLABLE ZZIX
A2D2  ; [.35EE.0020.0002] # YI SYLLABLE ZZI
A2D3  ; [.35EF.0020.0002] # YI SYLLABLE ZZIP
A2D4  ; [.35F0.0020.0002] # YI SYLLABLE ZZIET
A2D5  ; [.35F1.0020.0002] # YI SYLLABLE ZZIEX
A2D6  ; [.35F2.0020.0002] # YI SYLLABLE ZZIE
A2D7  ; [.35F3.0020.0002] # YI SYLLABLE ZZIEP
A2D8  ; [.35F4.0020.0002] # YI SYLLABLE ZZAT
A2D9  ; [.35F5.0020.0002] # YI SYLLABLE ZZAX
A2DA  ; [.35F6.0020.0002] # YI SYLLABLE ZZA
A2DB  ; [.35F7.0020.0002] # YI SYLLABLE ZZAP
A2DC  ; [.35F8.0020.0002] # YI SYLLABLE ZZOX
A2DD  ; [.35F9.0020.0002] # YI SYLLABLE ZZO
A2DE  ; [.35FA.0020.0002] # YI SYLLABLE ZZOP
A2DF  ; [.35FB.0020.0002] # YI SYLLABLE ZZEX
A2E0  ; [.35FC.0020.0002] # YI SYLLABLE ZZE
A2E1  ; [.35FD.0020.0002] # YI SYLLABLE ZZEP
A2E2  ; [.35FE.0020.0002] # YI SYLLABLE ZZUX
A2E3  ; [.35FF.0020.0002] # YI SYLLABLE ZZU
A2E4  ; [.3600.0020.0002] # YI SYLLABLE ZZUP
A2E5  ; [.3601.0020.0002] # YI SYLLABLE ZZURX
A2E6  ; [.3602.0020.0002] # YI SYLLABLE ZZUR
A2E7  ; [.3603.0020.0002] # YI SYLLABLE ZZYT
A2E8  ; [.3604.0020.0002] # YI SYLLABLE ZZYX
A2E9  ; [.3605.0020.0002] # YI SYLLABLE ZZY
A2EA  ; [.3606.0020.0002] # YI SYLLABLE ZZYP
A2EB  ; [.3607.0020.0002] # YI SYLLABLE ZZYRX
A2EC  ; [.3608.0020.0002] # YI SYLLABLE ZZYR
A2ED  ; [.3609.0020.0002] # YI SYLLABLE NZIT
A2EE  ; [.360A.0020.0002] # YI SYLLABLE NZIX
A2EF  ; [.360B.0020.0002] # YI SYLLABLE NZI
A2F0  ; [.360C.0020.0002] # YI SYLLABLE NZIP
A2F1  ; [.360D.0020.0002] # YI SYLLABLE NZIEX
A2F2  ; [.360E.0020.0002] # YI SYLLABLE NZIE
A2F3  ; [.360F.0020.0002] # YI SYLLABLE NZIEP
A2F4  ; [.3610.0020.0002] # YI SYLLABLE NZAT
A2F5  ; [.3611.0020.0002] # YI SYLLABLE NZAX
A2F6  ; [.3612.0020.0002] # YI SYLLABLE NZA
A2F7  ; [.3613.0020.0002] # YI SYLLABLE NZAP
A2F8  ; [.3614.0020.0002] # YI SYLLABLE NZUOX
A2F9  ; [.3615.0020.0002] # YI SYLLABLE NZUO
A2FA  ; [.3616.0020.0002] # YI SYLLABLE NZOX
A2FB  ; [.3617.0020.0002] # YI SYLLABLE NZOP
A2FC  ; [.3618.0020.0002] # YI SYLLABLE NZEX
A2FD  ; [.3619.0020.0002] # YI SYLLABLE NZE
A2FE  ; [.361A.0020.0002] # YI SYLLABLE NZUX
A2FF  ; [.361B.0020.0002] # YI SYLLABLE NZU
A300  ; [.361C.0020.0002] # YI SYLLABLE NZUP
A301  ; [.361D.0020.0002] # YI SYLLABLE NZURX
A302  ; [.361E.0020.0002] # YI SYLLABLE NZUR
A303  ; [.361F.0020.0002] # YI SYLLABLE NZYT
A304  ; [.3620.0020.0002] # YI SYLLABLE NZYX
A305  ; [.3621.0020.0002] # YI SYLLABLE NZY
A306  ; [.3622.0020.0002] # YI SYLLABLE NZYP
A307  ; [.3623.0020.0002] # YI SYLLABLE NZYRX
A308  ; [.3624.0020.0002] # YI SYLLABLE NZYR
A309  ; [.3625.0020.0002] # YI SYLLABLE SIT
A30A  ; [.3626.0020.0002] # YI SYLLABLE SIX
A30B  ; [.3627.0020.0002] # YI SYLLABLE SI
A30C  ; [.3628.0020.0002] # YI SYLLABLE SIP
A30D  ; [.3629.0020.0002] # YI SYLLABLE SIEX
A30E  ; [.362A.0020.0002] # YI SYLLABLE SIE
A30F  ; [.362B.0020.0002] # YI SYLLABLE SIEP
A310  ; [.362C.0020.0002] # YI SYLLABLE SAT
A311  ; [.362D.0020.0002] # YI SYLLABLE SAX
A312  ; [.362E.0020.0002] # YI SYLLABLE SA
A313  ; [.362F.0020.0002] # YI SYLLABLE SAP
A314  ; [.3630.0020.0002] # YI SYLLABLE SUOX
A315  ; [.3631.0020.0002] # YI SYLLABLE SUO
A316  ; [.3632.0020.0002] # YI SYLLABLE SUOP
A317  ; [.3633.0020.0002] # YI SYLLABLE SOT
A318  ; [.3634.0020.0002] # YI SYLLABLE SOX
A319  ; [.3635.0020.0002] # YI SYLLABLE SO
A31A  ; [.3636.0020.0002] # YI SYLLABLE SOP
A31B  ; [.3637.0020.0002] # YI SYLLABLE SEX
A31C  ; [.3638.0020.0002] # YI SYLLABLE SE
A31D  ; [.3639.0020.0002] # YI SYLLABLE SEP
A31E  ; [.363A.0020.0002] # YI SYLLABLE SUT
A31F  ; [.363B.0020.0002] # YI SYLLABLE SUX
A320  ; [.363C.0020.0002] # YI SYLLABLE SU
A321  ; [.363D.0020.0002] # YI SYLLABLE SUP
A322  ; [.363E.0020.0002] # YI SYLLABLE SURX
A323  ; [.363F.0020.0002] # YI SYLLABLE SUR
A324  ; [.3640.0020.0002] # YI SYLLABLE SYT
A325  ; [.3641.0020.0002] # YI SYLLABLE SYX
A326  ; [.3642.0020.0002] # YI SYLLABLE SY
A327  ; [.3643.0020.0002] # YI SYLLABLE SYP
A328  ; [.3644.0020.0002] # YI SYLLABLE SYRX
A329  ; [.3645.0020.0002] # YI SYLLABLE SYR
A32A  ; [.3646.0020.0002] # YI SYLLABLE SSIT
A32B  ; [.3647.0020.0002] # YI SYLLABLE SSIX
A32C  ; [.3648.0020.0002] # YI SYLLABLE SSI
A32D  ; [.3649.0020.0002] # YI SYLLABLE SSIP
A32E  ; [.364A.0020.0002] # YI SYLLABLE SSIEX
A32F  ; [.364B.0020.0002] # YI SYLLABLE SSIE
A330  ; [.364C.0020.0002] # YI SYLLABLE SSIEP
A331  ; [.364D.0020.0002] # YI SYLLABLE SSAT
A332  ; [.364E.0020.0002] # YI SYLLABLE SSAX
A333  ; [.364F.0020.0002] # YI SYLLABLE SSA
A334  ; [.3650.0020.0002] # YI SYLLABLE SSAP
A335  ; [.3651.0020.0002] # YI SYLLABLE SSOT
A336  ; [.3652.0020.0002] # YI SYLLABLE SSOX
A337  ; [.3653.0020.0002] # YI SYLLABLE SSO
A338  ; [.3654.0020.0002] # YI SYLLABLE SSOP
A339  ; [.3655.0020.0002] # YI SYLLABLE SSEX
A33A  ; [.3656.0020.0002] # YI SYLLABLE SSE
A33B  ; [.3657.0020.0002] # YI SYLLABLE SSEP
A33C  ; [.3658.0020.0002] # YI SYLLABLE SSUT
A33D  ; [.3659.0020.0002] # YI SYLLABLE SSUX
A33E  ; [.365A.0020.0002] # YI SYLLABLE SSU
A33F  ; [.365B.0020.0002] # YI SYLLABLE SSUP
A340  ; [.365C.0020.0002] # YI SYLLABLE SSYT
A341  ; [.365D.0020.0002] # YI SYLLABLE SSYX
A342  ; [.365E.0020.0002] # YI SYLLABLE SSY
A343  ; [.365F.0020.0002] # YI SYLLABLE SSYP
A344  ; [.3660.0020.0002] # YI SYLLABLE SSYRX
A345  ; [.3661.0020.0002] # YI SYLLABLE SSYR
A346  ; [.3662.0020.0002] # YI SYLLABLE ZHAT
A347  ; [.3663.0020.0002] # YI SYLLABLE ZHAX
A348  ; [.3664.0020.0002] # YI SYLLABLE ZHA
A349  ; [.3665.0020.0002] # YI SYLLABLE ZHAP
A34A  ; [.3666.0020.0002] # YI SYLLABLE ZHUOX
A34B  ; [.3667.0020.0002] # YI SYLLABLE ZHUO
A34C  ; [.3668.0020.0002] # YI SYLLABLE ZHUOP
A34D  ; [.3669.0020.0002] # YI SYLLABLE ZHOT
A34E  ; [.366A.0020.0002] # YI SYLLABLE ZHOX
A34F  ; [.366B.0020.0002] # YI SYLLABLE ZHO
A350  ; [.366C.0020.0002] # YI SYLLABLE ZHOP
A351  ; [.366D.0020.0002] # YI SYLLABLE ZHET
A352  ; [.366E.0020.0002] # YI SYLLABLE ZHEX
A353  ; [.366F.0020.0002] # YI SYLLABLE ZHE
A354  ; [.3670.0020.0002] # YI SYLLABLE ZHEP
A355  ; [.3671.0020.0002] # YI SYLLABLE ZHUT
A356  ; [.3672.0020.0002] # YI SYLLABLE ZHUX
A357  ; [.3673.0020.0002] # YI SYLLABLE ZHU
A358  ; [.3674.0020.0002] # YI SYLLABLE ZHUP
A359  ; [.3675.0020.0002] # YI SYLLABLE ZHURX
A35A  ; [.3676.0020.0002] # YI SYLLABLE ZHUR
A35B  ; [.3677.0020.0002] # YI SYLLABLE ZHYT
A35C  ; [.3678.0020.0002] # YI SYLLABLE ZHYX
A35D  ; [.3679.0020.0002] # YI SYLLABLE ZHY
A35E  ; [.367A.0020.0002] # YI SYLLABLE ZHYP
A35F  ; [.367B.0020.0002] # YI SYLLABLE ZHYRX
A360  ; [.367C.0020.0002] # YI SYLLABLE ZHYR
A361  ; [.367D.0020.0002] # YI SYLLABLE CHAT
A362  ; [.367E.0020.0002] # YI SYLLABLE CHAX
A363  ; [.367F.0020.0002] # YI SYLLABLE CHA
A364  ; [.3680.0020.0002] # YI SYLLABLE CHAP
A365  ; [.3681.0020.0002] # YI SYLLABLE CHUOT
A366  ; [.3682.0020.0002] # YI SYLLABLE CHUOX
A367  ; [.3683.0020.0002] # YI SYLLABLE CHUO
A368  ; [.3684.0020.0002] # YI SYLLABLE CHUOP
A369  ; [.3685.0020.0002] # YI SYLLABLE CHOT
A36A  ; [.3686.0020.0002] # YI SYLLABLE CHOX
A36B  ; [.3687.0020.0002] # YI SYLLABLE CHO
A36C  ; [.3688.0020.0002] # YI SYLLABLE CHOP
A36D  ; [.3689.0020.0002] # YI SYLLABLE CHET
A36E  ; [.368A.0020.0002] # YI SYLLABLE CHEX
A36F  ; [.368B.0020.0002] # YI SYLLABLE CHE
A370  ; [.368C.0020.0002] # YI SYLLABLE CHEP
A371  ; [.368D.0020.0002] # YI SYLLABLE CHUX
A372  ; [.368E.0020.0002] # YI SYLLABLE CHU
A373  ; [.368F.0020.0002] # YI SYLLABLE CHUP
A374  ; [.3690.0020.0002] # YI SYLLABLE CHURX
A375  ; [.3691.0020.0002] # YI SYLLABLE CHUR
A376  ; [.3692.0020.0002] # YI SYLLABLE CHYT
A377  ; [.3693.0020.0002] # YI SYLLABLE CHYX
A378  ; [.3694.0020.0002] # YI SYLLABLE CHY
A379  ; [.3695.0020.0002] # YI SYLLABLE CHYP
A37A  ; [.3696.0020.0002] # YI SYLLABLE CHYRX
A37B  ; [.3697.0020.0002] # YI SYLLABLE CHYR
A37C  ; [.3698.0020.0002] # YI SYLLABLE RRAX
A37D  ; [.3699.0020.0002] # YI SYLLABLE RRA
A37E  ; [.369A.0020.0002] # YI SYLLABLE RRUOX
A37F  ; [.369B.0020.0002] # YI SYLLABLE RRUO
A380  ; [.369C.0020.0002] # YI SYLLABLE RROT
A381  ; [.369D.0020.0002] # YI SYLLABLE RROX
A382  ; [.369E.0020.0002] # YI SYLLABLE RRO
A383  ; [.369F.0020.0002] # YI SYLLABLE RROP
A384  ; [.36A0.0020.0002] # YI SYLLABLE RRET
A385  ; [.36A1.0020.0002] # YI SYLLABLE RREX
A386  ; [.36A2.0020.0002] # YI SYLLABLE RRE
A387  ; [.36A3.0020.0002] # YI SYLLABLE RREP
A388  ; [.36A4.0020.0002] # YI SYLLABLE RRUT
A389  ; [.36A5.0020.0002] # YI SYLLABLE RRUX
A38A  ; [.36A6.0020.0002] # YI SYLLABLE RRU
A38B  ; [.36A7.0020.0002] # YI SYLLABLE RRUP
A38C  ; [.36A8.0020.0002] # YI SYLLABLE RRURX
A38D  ; [.36A9.0020.0002] # YI SYLLABLE RRUR
A38E  ; [.36AA.0020.0002] # YI SYLLABLE RRYT
A38F  ; [.36AB.0020.0002] # YI SYLLABLE RRYX
A390  ; [.36AC.0020.0002] # YI SYLLABLE RRY
A391  ; [.36AD.0020.0002] # YI SYLLABLE RRYP
A392  ; [.36AE.0020.0002] # YI SYLLABLE RRYRX
A393  ; [.36AF.0020.0002] # YI SYLLABLE RRYR
A394  ; [.36B0.0020.0002] # YI SYLLABLE NRAT
A395  ; [.36B1.0020.0002] # YI SYLLABLE NRAX
A396  ; [.36B2.0020.0002] # YI SYLLABLE NRA
A397  ; [.36B3.0020.0002] # YI SYLLABLE NRAP
A398  ; [.36B4.0020.0002] # YI SYLLABLE NROX
A399  ; [.36B5.0020.0002] # YI SYLLABLE NRO
A39A  ; [.36B6.0020.0002] # YI SYLLABLE NROP
A39B  ; [.36B7.0020.0002] # YI SYLLABLE NRET
A39C  ; [.36B8.0020.0002] # YI SYLLABLE NREX
A39D  ; [.36B9.0020.0002] # YI SYLLABLE NRE
A39E  ; [.36BA.0020.0002] # YI SYLLABLE NREP
A39F  ; [.36BB.0020.0002] # YI SYLLABLE NRUT
A3A0  ; [.36BC.0020.0002] # YI SYLLABLE NRUX
A3A1  ; [.36BD.0020.0002] # YI SYLLABLE NRU
A3A2  ; [.36BE.0020.0002] # YI SYLLABLE NRUP
A3A3  ; [.36BF.0020.0002] # YI SYLLABLE NRURX
A3A4  ; [.36C0.0020.0002] # YI SYLLABLE NRUR
A3A5  ; [.36C1.0020.0002] # YI SYLLABLE NRYT
A3A6  ; [.36C2.0020.0002] # YI SYLLABLE NRYX
A3A7  ; [.36C3.0020.0002] # YI SYLLABLE NRY
A3A8  ; [.36C4.0020.0002] # YI SYLLABLE NRYP
A3A9  ; [.36C5.0020.0002] # YI SYLLABLE NRYRX
A3AA  ; [.36C6.0020.0002] # YI SYLLABLE NRYR
A3AB  ; [.36C7.0020.0002] # YI SYLLABLE SHAT
A3AC  ; [.36C8.0020.0002] # YI SYLLABLE SHAX
A3AD  ; [.36C9.0020.0002] # YI SYLLABLE SHA
A3AE  ; [.36CA.0020.0002] # YI SYLLABLE SHAP
A3AF  ; [.36CB.0020.0002] # YI SYLLABLE SHUOX
A3B0  ; [.36CC.0020.0002] # YI SYLLABLE SHUO
A3B1  ; [.36CD.0020.0002] # YI SYLLABLE SHUOP
A3B2  ; [.36CE.0020.0002] # YI SYLLABLE SHOT
A3B3  ; [.36CF.0020.0002] # YI SYLLABLE SHOX
A3B4  ; [.36D0.0020.0002] # YI SYLLABLE SHO
A3B5  ; [.36D1.0020.0002] # YI SYLLABLE SHOP
A3B6  ; [.36D2.0020.0002] # YI SYLLABLE SHET
A3B7  ; [.36D3.0020.0002] # YI SYLLABLE SHEX
A3B8  ; [.36D4.0020.0002] # YI SYLLABLE SHE
A3B9  ; [.36D5.0020.0002] # YI SYLLABLE SHEP
A3BA  ; [.36D6.0020.0002] # YI SYLLABLE SHUT
A3BB  ; [.36D7.0020.0002] # YI SYLLABLE SHUX
A3BC  ; [.36D8.0020.0002] # YI SYLLABLE SHU
A3BD  ; [.36D9.0020.0002] # YI SYLLABLE SHUP
A3BE  ; [.36DA.0020.0002] # YI SYLLABLE SHURX
A3BF  ; [.36DB.0020.0002] # YI SYLLABLE SHUR
A3C0  ; [.36DC.0020.0002] # YI SYLLABLE SHYT
A3C1  ; [.36DD.0020.0002] # YI SYLLABLE SHYX
A3C2  ; [.36DE.0020.0002] # YI SYLLABLE SHY
A3C3  ; [.36DF.0020.0002] # YI SYLLABLE SHYP
A3C4  ; [.36E0.0020.0002] # YI SYLLABLE SHYRX
A3C5  ; [.36E1.0020.0002] # YI SYLLABLE SHYR
A3C6  ; [.36E2.0020.0002] # YI SYLLABLE RAT
A3C7  ; [.36E3.0020.0002] # YI SYLLABLE RAX
A3C8  ; [.36E4.0020.0002] # YI SYLLABLE RA
A3C9  ; [.36E5.0020.0002] # YI SYLLABLE RAP
A3CA  ; [.36E6.0020.0002] # YI SYLLABLE RUOX
A3CB  ; [.36E7.0020.0002] # YI SYLLABLE RUO
A3CC  ; [.36E8.0020.0002] # YI SYLLABLE RUOP
A3CD  ; [.36E9.0020.0002] # YI SYLLABLE ROT
A3CE  ; [.36EA.0020.0002] # YI SYLLABLE ROX
A3CF  ; [.36EB.0020.0002] # YI SYLLABLE RO
A3D0  ; [.36EC.0020.0002] # YI SYLLABLE ROP
A3D1  ; [.36ED.0020.0002] # YI SYLLABLE REX
A3D2  ; [.36EE.0020.0002] # YI SYLLABLE RE
A3D3  ; [.36EF.0020.0002] # YI SYLLABLE REP
A3D4  ; [.36F0.0020.0002] # YI SYLLABLE RUT
A3D5  ; [.36F1.0020.0002] # YI SYLLABLE RUX
A3D6  ; [.36F2.0020.0002] # YI SYLLABLE RU
A3D7  ; [.36F3.0020.0002] # YI SYLLABLE RUP
A3D8  ; [.36F4.0020.0002] # YI SYLLABLE RURX
A3D9  ; [.36F5.0020.0002] # YI SYLLABLE RUR
A3DA  ; [.36F6.0020.0002] # YI SYLLABLE RYT
A3DB  ; [.36F7.0020.0002] # YI SYLLABLE RYX
A3DC  ; [.36F8.0020.0002] # YI SYLLABLE RY
A3DD  ; [.36F9.0020.0002] # YI SYLLABLE RYP
A3DE  ; [.36FA.0020.0002] # YI SYLLABLE RYRX
A3DF  ; [.36FB.0020.0002] # YI SYLLABLE RYR
A3E0  ; [.36FC.0020.0002] # YI SYLLABLE JIT
A3E1  ; [.36FD.0020.0002] # YI SYLLABLE JIX
A3E2  ; [.36FE.0020.0002] # YI SYLLABLE JI
A3E3  ; [.36FF.0020.0002] # YI SYLLABLE JIP
A3E4  ; [.3700.0020.0002] # YI SYLLABLE JIET
A3E5  ; [.3701.0020.0002] # YI SYLLABLE JIEX
A3E6  ; [.3702.0020.0002] # YI SYLLABLE JIE
A3E7  ; [.3703.0020.0002] # YI SYLLABLE JIEP
A3E8  ; [.3704.0020.0002] # YI SYLLABLE JUOT
A3E9  ; [.3705.0020.0002] # YI SYLLABLE JUOX
A3EA  ; [.3706.0020.0002] # YI SYLLABLE JUO
A3EB  ; [.3707.0020.0002] # YI SYLLABLE JUOP
A3EC  ; [.3708.0020.0002] # YI SYLLABLE JOT
A3ED  ; [.3709.0020.0002] # YI SYLLABLE JOX
A3EE  ; [.370A.0020.0002] # YI SYLLABLE JO
A3EF  ; [.370B.0020.0002] # YI SYLLABLE JOP
A3F0  ; [.370C.0020.0002] # YI SYLLABLE JUT
A3F1  ; [.370D.0020.0002] # YI SYLLABLE JUX
A3F2  ; [.370E.0020.0002] # YI SYLLABLE JU
A3F3  ; [.370F.0020.0002] # YI SYLLABLE JUP
A3F4  ; [.3710.0020.0002] # YI SYLLABLE JURX
A3F5  ; [.3711.0020.0002] # YI SYLLABLE JUR
A3F6  ; [.3712.0020.0002] # YI SYLLABLE JYT
A3F7  ; [.3713.0020.0002] # YI SYLLABLE JYX
A3F8  ; [.3714.0020.0002] # YI SYLLABLE JY
A3F9  ; [.3715.0020.0002] # YI SYLLABLE JYP
A3FA  ; [.3716.0020.0002] # YI SYLLABLE JYRX
A3FB  ; [.3717.0020.0002] # YI SYLLABLE JYR
A3FC  ; [.3718.0020.0002] # YI SYLLABLE QIT
A3FD  ; [.3719.0020.0002] # YI SYLLABLE QIX
A3FE  ; [.371A.0020.0002] # YI SYLLABLE QI
A3FF  ; [.371B.0020.0002] # YI SYLLABLE QIP
A400  ; [.371C.0020.0002] # YI SYLLABLE QIET
A401  ; [.371D.0020.0002] # YI SYLLABLE QIEX
A402  ; [.371E.0020.0002] # YI SYLLABLE QIE
A403  ; [.371F.0020.0002] # YI SYLLABLE QIEP
A404  ; [.3720.0020.0002] # YI SYLLABLE QUOT
A405  ; [.3721.0020.0002] # YI SYLLABLE QUOX
A406  ; [.3722.0020.0002] # YI SYLLABLE QUO
A407  ; [.3723.0020.0002] # YI SYLLABLE QUOP
A408  ; [.3724.0020.0002] # YI SYLLABLE QOT
A409  ; [.3725.0020.0002] # YI SYLLABLE QOX
A40A  ; [.3726.0020.0002] # YI SYLLABLE QO
A40B  ; [.3727.0020.0002] # YI SYLLABLE QOP
A40C  ; [.3728.0020.0002] # YI SYLLABLE QUT
A40D  ; [.3729.0020.0002] # YI SYLLABLE QUX
A40E  ; [.372A.0020.0002] # YI SYLLABLE QU
A40F  ; [.372B.0020.0002] # YI SYLLABLE QUP
A410  ; [.372C.0020.0002] # YI SYLLABLE QURX
A411  ; [.372D.0020.0002] # YI SYLLABLE QUR
A412  ; [.372E.0020.0002] # YI SYLLABLE QYT
A413  ; [.372F.0020.0002] # YI SYLLABLE QYX
A414  ; [.3730.0020.0002] # YI SYLLABLE QY
A415  ; [.3731.0020.0002] # YI SYLLABLE QYP
A416  ; [.3732.0020.0002] # YI SYLLABLE QYRX
A417  ; [.3733.0020.0002] # YI SYLLABLE QYR
A418  ; [.3734.0020.0002] # YI SYLLABLE JJIT
A419  ; [.3735.0020.0002] # YI SYLLABLE JJIX
A41A  ; [.3736.0020.0002] # YI SYLLABLE JJI
A41B  ; [.3737.0020.0002] # YI SYLLABLE JJIP
A41C  ; [.3738.0020.0002] # YI SYLLABLE JJIET
A41D  ; [.3739.0020.0002] # YI SYLLABLE JJIEX
A41E  ; [.373A.0020.0002] # YI SYLLABLE JJIE
A41F  ; [.373B.0020.0002] # YI SYLLABLE JJIEP
A420  ; [.373C.0020.0002] # YI SYLLABLE JJUOX
A421  ; [.373D.0020.0002] # YI SYLLABLE JJUO
A422  ; [.373E.0020.0002] # YI SYLLABLE JJUOP
A423  ; [.373F.0020.0002] # YI SYLLABLE JJOT
A424  ; [.3740.0020.0002] # YI SYLLABLE JJOX
A425  ; [.3741.0020.0002] # YI SYLLABLE JJO
A426  ; [.3742.0020.0002] # YI SYLLABLE JJOP
A427  ; [.3743.0020.0002] # YI SYLLABLE JJUT
A428  ; [.3744.0020.0002] # YI SYLLABLE JJUX
A429  ; [.3745.0020.0002] # YI SYLLABLE JJU
A42A  ; [.3746.0020.0002] # YI SYLLABLE JJUP
A42B  ; [.3747.0020.0002] # YI SYLLABLE JJURX
A42C  ; [.3748.0020.0002] # YI SYLLABLE JJUR
A42D  ; [.3749.0020.0002] # YI SYLLABLE JJYT
A42E  ; [.374A.0020.0002] # YI SYLLABLE JJYX
A42F  ; [.374B.0020.0002] # YI SYLLABLE JJY
A430  ; [.374C.0020.0002] # YI SYLLABLE JJYP
A431  ; [.374D.0020.0002] # YI SYLLABLE NJIT
A432  ; [.374E.0020.0002] # YI SYLLABLE NJIX
A433  ; [.374F.0020.0002] # YI SYLLABLE NJI
A434  ; [.3750.0020.0002] # YI SYLLABLE NJIP
A435  ; [.3751.0020.0002] # YI SYLLABLE NJIET
A436  ; [.3752.0020.0002] # YI SYLLABLE NJIEX
A437  ; [.3753.0020.0002] # YI SYLLABLE NJIE
A438  ; [.3754.0020.0002] # YI SYLLABLE NJIEP
A439  ; [.3755.0020.0002] # YI SYLLABLE NJUOX
A43A  ; [.3756.0020.0002] # YI SYLLABLE NJUO
A43B  ; [.3757.0020.0002] # YI SYLLABLE NJOT
A43C  ; [.3758.0020.0002] # YI SYLLABLE NJOX
A43D  ; [.3759.0020.0002] # YI SYLLABLE NJO
A43E  ; [.375A.0020.0002] # YI SYLLABLE NJOP
A43F  ; [.375B.0020.0002] # YI SYLLABLE NJUX
A440  ; [.375C.0020.0002] # YI SYLLABLE NJU
A441  ; [.375D.0020.0002] # YI SYLLABLE NJUP
A442  ; [.375E.0020.0002] # YI SYLLABLE NJURX
A443  ; [.375F.0020.0002] # YI SYLLABLE NJUR
A444  ; [.3760.0020.0002] # YI SYLLABLE NJYT
A445  ; [.3761.0020.0002] # YI SYLLABLE NJYX
A446  ; [.3762.0020.0002] # YI SYLLABLE NJY
A447  ; [.3763.0020.0002] # YI SYLLABLE NJYP
A448  ; [.3764.0020.0002] # YI SYLLABLE NJYRX
A449  ; [.3765.0020.0002] # YI SYLLABLE NJYR
A44A  ; [.3766.0020.0002] # YI SYLLABLE NYIT
A44B  ; [.3767.0020.0002] # YI SYLLABLE NYIX
A44C  ; [.3768.0020.0002] # YI SYLLABLE NYI
A44D  ; [.3769.0020.0002] # YI SYLLABLE NYIP
A44E  ; [.376A.0020.0002] # YI SYLLABLE NYIET
A44F  ; [.376B.0020.0002] # YI SYLLABLE NYIEX
A450  ; [.376C.0020.0002] # YI SYLLABLE NYIE
A451  ; [.376D.0020.0002] # YI SYLLABLE NYIEP
A452  ; [.376E.0020.0002] # YI SYLLABLE NYUOX
A453  ; [.376F.0020.0002] # YI SYLLABLE NYUO
A454  ; [.3770.0020.0002] # YI SYLLABLE NYUOP
A455  ; [.3771.0020.0002] # YI SYLLABLE NYOT
A456  ; [.3772.0020.0002] # YI SYLLABLE NYOX
A457  ; [.3773.0020.0002] # YI SYLLABLE NYO
A458  ; [.3774.0020.0002] # YI SYLLABLE NYOP
A459  ; [.3775.0020.0002] # YI SYLLABLE NYUT
A45A  ; [.3776.0020.0002] # YI SYLLABLE NYUX
A45B  ; [.3777.0020.0002] # YI SYLLABLE NYU
A45C  ; [.3778.0020.0002] # YI SYLLABLE NYUP
A45D  ; [.3779.0020.0002] # YI SYLLABLE XIT
A45E  ; [.377A.0020.0002] # YI SYLLABLE XIX
A45F  ; [.377B.0020.0002] # YI SYLLABLE XI
A460  ; [.377C.0020.0002] # YI SYLLABLE XIP
A461  ; [.377D.0020.0002] # YI SYLLABLE XIET
A462  ; [.377E.0020.0002] # YI SYLLABLE XIEX
A463  ; [.377F.0020.0002] # YI SYLLABLE XIE
A464  ; [.3780.0020.0002] # YI SYLLABLE XIEP
A465  ; [.3781.0020.0002] # YI SYLLABLE XUOX
A466  ; [.3782.0020.0002] # YI SYLLABLE XUO
A467  ; [.3783.0020.0002] # YI SYLLABLE XOT
A468  ; [.3784.0020.0002] # YI SYLLABLE XOX
A469  ; [.3785.0020.0002] # YI SYLLABLE XO
A46A  ; [.3786.0020.0002] # YI SYLLABLE XOP
A46B  ; [.3787.0020.0002] # YI SYLLABLE XYT
A46C  ; [.3788.0020.0002] # YI SYLLABLE XYX
A46D  ; [.3789.0020.0002] # YI SYLLABLE XY
A46E  ; [.378A.0020.0002] # YI SYLLABLE XYP
A46F  ; [.378B.0020.0002] # YI SYLLABLE XYRX
A470  ; [.378C.0020.0002] # YI SYLLABLE XYR
A471  ; [.378D.0020.0002] # YI SYLLABLE YIT
A472  ; [.378E.0020.0002] # YI SYLLABLE YIX
A473  ; [.378F.0020.0002] # YI SYLLABLE YI
A474  ; [.3790.0020.0002] # YI SYLLABLE YIP
A475  ; [.3791.0020.0002] # YI SYLLABLE YIET
A476  ; [.3792.0020.0002] # YI SYLLABLE YIEX
A477  ; [.3793.0020.0002] # YI SYLLABLE YIE
A478  ; [.3794.0020.0002] # YI SYLLABLE YIEP
A479  ; [.3795.0020.0002] # YI SYLLABLE YUOT
A47A  ; [.3796.0020.0002] # YI SYLLABLE YUOX
A47B  ; [.3797.0020.0002] # YI SYLLABLE YUO
A47C  ; [.3798.0020.0002] # YI SYLLABLE YUOP
A47D  ; [.3799.0020.0002] # YI SYLLABLE YOT
A47E  ; [.379A.0020.0002] # YI SYLLABLE YOX
A47F  ; [.379B.0020.0002] # YI SYLLABLE YO
A480  ; [.379C.0020.0002] # YI SYLLABLE YOP
A481  ; [.379D.0020.0002] # YI SYLLABLE YUT
A482  ; [.379E.0020.0002] # YI SYLLABLE YUX
A483  ; [.379F.0020.0002] # YI SYLLABLE YU
A484  ; [.37A0.0020.0002] # YI SYLLABLE YUP
A485  ; [.37A1.0020.0002] # YI SYLLABLE YURX
A486  ; [.37A2.0020.0002] # YI SYLLABLE YUR
A487  ; [.37A3.0020.0002] # YI SYLLABLE YYT
A488  ; [.37A4.0020.0002] # YI SYLLABLE YYX
A489  ; [.37A5.0020.0002] # YI SYLLABLE YY
A48A  ; [.37A6.0020.0002] # YI SYLLABLE YYP
A48B  ; [.37A7.0020.0002] # YI SYLLABLE YYRX
A48C  ; [.37A8.0020.0002] # YI SYLLABLE YYR
A4F8  ; [.37A9.0020.0002] # LISU LETTER TONE MYA TI
A4F9  ; [.37AA.0020.0002] # LISU LETTER TONE NA PO
A4FA  ; [.37AB.0020.0002] # LISU LETTER TONE MYA CYA
A4FB  ; [.37AC.0020.0002] # LISU LETTER TONE MYA BO
A4FD  ; [.37AD.0020.0002] # LISU LETTER TONE MYA JEU
A4FC  ; [.37AE.0020.0002] # LISU LETTER TONE MYA NA
A4D0  ; [.37AF.0020.0002] # LISU LETTER BA
A4D1  ; [.37B0.0020.0002] # LISU LETTER PA
A4D2  ; [.37B1.0020.0002] # LISU LETTER PHA
A4D3  ; [.37B2.0020.0002] # LISU LETTER DA
A4D4  ; [.37B3.0020.0002] # LISU LETTER TA
A4D5  ; [.37B4.0020.0002] # LISU LETTER THA
A4D6  ; [.37B5.0020.0002] # LISU LETTER GA
A4D7  ; [.37B6.0020.0002] # LISU LETTER KA
A4D8  ; [.37B7.0020.0002] # LISU LETTER KHA
A4D9  ; [.37B8.0020.0002] # LISU LETTER JA
A4DA  ; [.37B9.0020.0002] # LISU LETTER CA
A4DB  ; [.37BA.0020.0002] # LISU LETTER CHA
A4DC  ; [.37BB.0020.0002] # LISU LETTER DZA
A4DD  ; [.37BC.0020.0002] # LISU LETTER TSA
A4DE  ; [.37BD.0020.0002] # LISU LETTER TSHA
A4DF  ; [.37BE.0020.0002] # LISU LETTER MA
A4E0  ; [.37BF.0020.0002] # LISU LETTER NA
A4E1  ; [.37C0.0020.0002] # LISU LETTER LA
A4E2  ; [.37C1.0020.0002] # LISU LETTER SA
A4E3  ; [.37C2.0020.0002] # LISU LETTER ZHA
A4E4  ; [.37C3.0020.0002] # LISU LETTER ZA
A4E5  ; [.37C4.0020.0002] # LISU LETTER NGA
A4E6  ; [.37C5.0020.0002] # LISU LETTER HA
A4E7  ; [.37C6.0020.0002] # LISU LETTER XA
A4E8  ; [.37C7.0020.0002] # LISU LETTER HHA
A4E9  ; [.37C8.0020.0002] # LISU LETTER FA
A4EB  ; [.37C9.0020.0002] # LISU LETTER SHA
A4ED  ; [.37CA.0020.0002] # LISU LETTER GHA
A4EA  ; [.37CB.0020.0002] # LISU LETTER WA
A4EC  ; [.37CC.0020.0002] # LISU LETTER YA
A4EE  ; [.37CD.0020.0002] # LISU LETTER A
A4EF  ; [.37CE.0020.0002] # LISU LETTER AE
A4F0  ; [.37CF.0020.0002] # LISU LETTER E
A4F1  ; [.37D0.0020.0002] # LISU LETTER EU
A4F2  ; [.37D1.0020.0002] # LISU LETTER I
A4F3  ; [.37D2.0020.0002] # LISU LETTER O
A4F4  ; [.37D3.0020.0002] # LISU LETTER U
A4F5  ; [.37D4.0020.0002] # LISU LETTER UE
A4F6  ; [.37D5.0020.0002] # LISU LETTER UH
A4F7  ; [.37D6.0020.0002] # LISU LETTER OE
16F00 ; [.37D7.0020.0002] # MIAO LETTER PA
16F01 ; [.37D8.0020.0002] # MIAO LETTER BA
16F02 ; [.37D9.0020.0002] # MIAO LETTER YI PA
16F03 ; [.37DA.0020.0002] # MIAO LETTER PLA
16F04 ; [.37DB.0020.0002] # MIAO LETTER MA
16F06 ; [.37DB.0020.0004] # MIAO LETTER ARCHAIC MA
16F05 ; [.37DC.0020.0002] # MIAO LETTER MHA
16F07 ; [.37DD.0020.0002] # MIAO LETTER FA
16F08 ; [.37DE.0020.0002] # MIAO LETTER VA
16F09 ; [.37DF.0020.0002] # MIAO LETTER VFA
16F0A ; [.37E0.0020.0002] # MIAO LETTER TA
16F0B ; [.37E1.0020.0002] # MIAO LETTER DA
16F0C ; [.37E2.0020.0002] # MIAO LETTER YI TTA
16F0D ; [.37E3.0020.0002] # MIAO LETTER YI TA
16F0E ; [.37E4.0020.0002] # MIAO LETTER TTA
16F0F ; [.37E5.0020.0002] # MIAO LETTER DDA
16F10 ; [.37E6.0020.0002] # MIAO LETTER NA
16F13 ; [.37E6.0020.0004] # MIAO LETTER ARCHAIC NA
16F11 ; [.37E7.0020.0002] # MIAO LETTER NHA
16F12 ; [.37E8.0020.0002] # MIAO LETTER YI NNA
16F14 ; [.37E9.0020.0002] # MIAO LETTER NNA
16F15 ; [.37EA.0020.0002] # MIAO LETTER NNHA
16F16 ; [.37EB.0020.0002] # MIAO LETTER LA
16F17 ; [.37EC.0020.0002] # MIAO LETTER LYA
16F18 ; [.37ED.0020.0002] # MIAO LETTER LHA
16F19 ; [.37EE.0020.0002] # MIAO LETTER LHYA
16F1A ; [.37EF.0020.0002] # MIAO LETTER TLHA
16F1B ; [.37F0.0020.0002] # MIAO LETTER DLHA
16F1C ; [.37F1.0020.0002] # MIAO LETTER TLHYA
16F1D ; [.37F2.0020.0002] # MIAO LETTER DLHYA
16F1E ; [.37F3.0020.0002] # MIAO LETTER KA
16F1F ; [.37F4.0020.0002] # MIAO LETTER GA
16F20 ; [.37F5.0020.0002] # MIAO LETTER YI KA
16F21 ; [.37F6.0020.0002] # MIAO LETTER QA
16F22 ; [.37F7.0020.0002] # MIAO LETTER QGA
16F23 ; [.37F8.0020.0002] # MIAO LETTER NGA
16F25 ; [.37F8.0020.0004] # MIAO LETTER ARCHAIC NGA
16F24 ; [.37F9.0020.0002] # MIAO LETTER NGHA
16F26 ; [.37FA.0020.0002] # MIAO LETTER HA
16F27 ; [.37FB.0020.0002] # MIAO LETTER XA
16F28 ; [.37FC.0020.0002] # MIAO LETTER GHA
16F29 ; [.37FD.0020.0002] # MIAO LETTER GHHA
16F2A ; [.37FE.0020.0002] # MIAO LETTER TSSA
16F2B ; [.37FF.0020.0002] # MIAO LETTER DZZA
16F2C ; [.3800.0020.0002] # MIAO LETTER NYA
16F2D ; [.3801.0020.0002] # MIAO LETTER NYHA
16F2E ; [.3802.0020.0002] # MIAO LETTER TSHA
16F2F ; [.3803.0020.0002] # MIAO LETTER DZHA
16F30 ; [.3804.0020.0002] # MIAO LETTER YI TSHA
16F31 ; [.3805.0020.0002] # MIAO LETTER YI DZHA
16F32 ; [.3806.0020.0002] # MIAO LETTER REFORMED TSHA
16F33 ; [.3807.0020.0002] # MIAO LETTER SHA
16F34 ; [.3808.0020.0002] # MIAO LETTER SSA
16F35 ; [.3809.0020.0002] # MIAO LETTER ZHA
16F36 ; [.380A.0020.0002] # MIAO LETTER ZSHA
16F37 ; [.380B.0020.0002] # MIAO LETTER TSA
16F38 ; [.380C.0020.0002] # MIAO LETTER DZA
16F39 ; [.380D.0020.0002] # MIAO LETTER YI TSA
16F3A ; [.380E.0020.0002] # MIAO LETTER SA
16F3B ; [.380F.0020.0002] # MIAO LETTER ZA
16F3C ; [.3810.0020.0002] # MIAO LETTER ZSA
16F3D ; [.3811.0020.0002] # MIAO LETTER ZZA
16F3F ; [.3811.0020.0004] # MIAO LETTER ARCHAIC ZZA
16F3E ; [.3812.0020.0002] # MIAO LETTER ZZSA
16F40 ; [.3813.0020.0002] # MIAO LETTER ZZYA
16F41 ; [.3814.0020.0002] # MIAO LETTER ZZSYA
16F42 ; [.3815.0020.0002] # MIAO LETTER WA
16F43 ; [.3816.0020.0002] # MIAO LETTER AH
16F44 ; [.3817.0020.0002] # MIAO LETTER HHA
16F50 ; [.3818.0020.0002] # MIAO LETTER NASALIZATION
16F51 ; [.3819.0020.0002] # MIAO SIGN ASPIRATION
16F52 ; [.381A.0020.0002] # MIAO SIGN REFORMED VOICING
16F53 ; [.381B.0020.0002] # MIAO SIGN REFORMED ASPIRATION
16F54 ; [.381C.0020.0002] # MIAO VOWEL SIGN A
16F55 ; [.381D.0020.0002] # MIAO VOWEL SIGN AA
16F56 ; [.381E.0020.0002] # MIAO VOWEL SIGN AHH
16F57 ; [.381F.0020.0002] # MIAO VOWEL SIGN AN
16F58 ; [.3820.0020.0002] # MIAO VOWEL SIGN ANG
16F59 ; [.3821.0020.0002] # MIAO VOWEL SIGN O
16F5A ; [.3822.0020.0002] # MIAO VOWEL SIGN OO
16F5B ; [.3823.0020.0002] # MIAO VOWEL SIGN WO
16F5C ; [.3824.0020.0002] # MIAO VOWEL SIGN W
16F5D ; [.3825.0020.0002] # MIAO VOWEL SIGN E
16F5E ; [.3826.0020.0002] # MIAO VOWEL SIGN EN
16F5F ; [.3827.0020.0002] # MIAO VOWEL SIGN ENG
16F60 ; [.3828.0020.0002] # MIAO VOWEL SIGN OEY
16F61 ; [.3829.0020.0002] # MIAO VOWEL SIGN I
16F62 ; [.382A.0020.0002] # MIAO VOWEL SIGN IA
16F63 ; [.382B.0020.0002] # MIAO VOWEL SIGN IAN
16F64 ; [.382C.0020.0002] # MIAO VOWEL SIGN IANG
16F65 ; [.382D.0020.0002] # MIAO VOWEL SIGN IO
16F66 ; [.382E.0020.0002] # MIAO VOWEL SIGN IE
16F67 ; [.382F.0020.0002] # MIAO VOWEL SIGN II
16F68 ; [.3830.0020.0002] # MIAO VOWEL SIGN IU
16F69 ; [.3831.0020.0002] # MIAO VOWEL SIGN ING
16F6A ; [.3832.0020.0002] # MIAO VOWEL SIGN U
16F6B ; [.3833.0020.0002] # MIAO VOWEL SIGN UA
16F6C ; [.3834.0020.0002] # MIAO VOWEL SIGN UAN
16F6D ; [.3835.0020.0002] # MIAO VOWEL SIGN UANG
16F6E ; [.3836.0020.0002] # MIAO VOWEL SIGN UU
16F6F ; [.3837.0020.0002] # MIAO VOWEL SIGN UEI
16F70 ; [.3838.0020.0002] # MIAO VOWEL SIGN UNG
16F71 ; [.3839.0020.0002] # MIAO VOWEL SIGN Y
16F72 ; [.383A.0020.0002] # MIAO VOWEL SIGN YI
16F73 ; [.383B.0020.0002] # MIAO VOWEL SIGN AE
16F74 ; [.383C.0020.0002] # MIAO VOWEL SIGN AEE
16F75 ; [.383D.0020.0002] # MIAO VOWEL SIGN ERR
16F76 ; [.383E.0020.0002] # MIAO VOWEL SIGN ROUNDED ERR
16F77 ; [.383F.0020.0002] # MIAO VOWEL SIGN ER
16F78 ; [.3840.0020.0002] # MIAO VOWEL SIGN ROUNDED ER
16F79 ; [.3841.0020.0002] # MIAO VOWEL SIGN AI
16F7A ; [.3842.0020.0002] # MIAO VOWEL SIGN EI
16F7B ; [.3843.0020.0002] # MIAO VOWEL SIGN AU
16F7C ; [.3844.0020.0002] # MIAO VOWEL SIGN OU
16F7D ; [.3845.0020.0002] # MIAO VOWEL SIGN N
16F7E ; [.3846.0020.0002] # MIAO VOWEL SIGN NG
16F8F ; [.3847.0020.0002] # MIAO TONE RIGHT
16F90 ; [.3848.0020.0002] # MIAO TONE TOP RIGHT
16F91 ; [.3849.0020.0002] # MIAO TONE ABOVE
16F92 ; [.384A.0020.0002] # MIAO TONE BELOW
16F93 ; [.384B.0020.0002] # MIAO LETTER TONE-2
16F94 ; [.384C.0020.0002] # MIAO LETTER TONE-3
16F95 ; [.384D.0020.0002] # MIAO LETTER TONE-4
16F96 ; [.384E.0020.0002] # MIAO LETTER TONE-5
16F97 ; [.384F.0020.0002] # MIAO LETTER TONE-6
16F98 ; [.3850.0020.0002] # MIAO LETTER TONE-7
16F99 ; [.3851.0020.0002] # MIAO LETTER TONE-8
16F9A ; [.3852.0020.0002] # MIAO LETTER REFORMED TONE-1
16F9B ; [.3853.0020.0002] # MIAO LETTER REFORMED TONE-2
16F9C ; [.3854.0020.0002] # MIAO LETTER REFORMED TONE-4
16F9D ; [.3855.0020.0002] # MIAO LETTER REFORMED TONE-5
16F9E ; [.3856.0020.0002] # MIAO LETTER REFORMED TONE-6
16F9F ; [.3857.0020.0002] # MIAO LETTER REFORMED TONE-8
10280 ; [.3858.0020.0002] # LYCIAN LETTER A
10281 ; [.3859.0020.0002] # LYCIAN LETTER E
10282 ; [.385A.0020.0002] # LYCIAN LETTER B
10283 ; [.385B.0020.0002] # LYCIAN LETTER BH
10284 ; [.385C.0020.0002] # LYCIAN LETTER G
10285 ; [.385D.0020.0002] # LYCIAN LETTER D
10286 ; [.385E.0020.0002] # LYCIAN LETTER I
10287 ; [.385F.0020.0002] # LYCIAN LETTER W
10288 ; [.3860.0020.0002] # LYCIAN LETTER Z
10289 ; [.3861.0020.0002] # LYCIAN LETTER TH
1028A ; [.3862.0020.0002] # LYCIAN LETTER J
1028B ; [.3863.0020.0002] # LYCIAN LETTER K
1028C ; [.3864.0020.0002] # LYCIAN LETTER Q
1028D ; [.3865.0020.0002] # LYCIAN LETTER L
1028E ; [.3866.0020.0002] # LYCIAN LETTER M
1028F ; [.3867.0020.0002] # LYCIAN LETTER N
10290 ; [.3868.0020.0002] # LYCIAN LETTER MM
10291 ; [.3869.0020.0002] # LYCIAN LETTER NN
10292 ; [.386A.0020.0002] # LYCIAN LETTER U
10293 ; [.386B.0020.0002] # LYCIAN LETTER P
10294 ; [.386C.0020.0002] # LYCIAN LETTER KK
10295 ; [.386D.0020.0002] # LYCIAN LETTER R
10296 ; [.386E.0020.0002] # LYCIAN LETTER S
10297 ; [.386F.0020.0002] # LYCIAN LETTER T
10298 ; [.3870.0020.0002] # LYCIAN LETTER TT
10299 ; [.3871.0020.0002] # LYCIAN LETTER AN
1029A ; [.3872.0020.0002] # LYCIAN LETTER EN
1029B ; [.3873.0020.0002] # LYCIAN LETTER H
1029C ; [.3874.0020.0002] # LYCIAN LETTER X
102A0 ; [.3875.0020.0002] # CARIAN LETTER A
102A1 ; [.3876.0020.0002] # CARIAN LETTER P2
102A2 ; [.3877.0020.0002] # CARIAN LETTER D
102A3 ; [.3878.0020.0002] # CARIAN LETTER L
102A4 ; [.3879.0020.0002] # CARIAN LETTER UUU
102A5 ; [.387A.0020.0002] # CARIAN LETTER R
102A6 ; [.387B.0020.0002] # CARIAN LETTER LD
102A7 ; [.387C.0020.0002] # CARIAN LETTER A2
102A8 ; [.387D.0020.0002] # CARIAN LETTER Q
102A9 ; [.387E.0020.0002] # CARIAN LETTER B
102AA ; [.387F.0020.0002] # CARIAN LETTER M
102AB ; [.3880.0020.0002] # CARIAN LETTER O
102AC ; [.3881.0020.0002] # CARIAN LETTER D2
102AD ; [.3882.0020.0002] # CARIAN LETTER T
102AE ; [.3883.0020.0002] # CARIAN LETTER SH
102AF ; [.3884.0020.0002] # CARIAN LETTER SH2
102B0 ; [.3885.0020.0002] # CARIAN LETTER S
102B1 ; [.3886.0020.0002] # CARIAN LETTER C-18
102B2 ; [.3887.0020.0002] # CARIAN LETTER U
102B3 ; [.3888.0020.0002] # CARIAN LETTER NN
102B4 ; [.3889.0020.0002] # CARIAN LETTER X
102B5 ; [.388A.0020.0002] # CARIAN LETTER N
102B6 ; [.388B.0020.0002] # CARIAN LETTER TT2
102B7 ; [.388C.0020.0002] # CARIAN LETTER P
102B8 ; [.388D.0020.0002] # CARIAN LETTER SS
102B9 ; [.388E.0020.0002] # CARIAN LETTER I
102BA ; [.388F.0020.0002] # CARIAN LETTER E
102BB ; [.3890.0020.0002] # CARIAN LETTER UUUU
102BC ; [.3891.0020.0002] # CARIAN LETTER K
102BD ; [.3892.0020.0002] # CARIAN LETTER K2
102BE ; [.3893.0020.0002] # CARIAN LETTER ND
102BF ; [.3894.0020.0002] # CARIAN LETTER UU
102C0 ; [.3895.0020.0002] # CARIAN LETTER G
102C1 ; [.3896.0020.0002] # CARIAN LETTER G2
102C2 ; [.3897.0020.0002] # CARIAN LETTER ST
102C3 ; [.3898.0020.0002] # CARIAN LETTER ST2
102C4 ; [.3899.0020.0002] # CARIAN LETTER NG
102C5 ; [.389A.0020.0002] # CARIAN LETTER II
102C6 ; [.389B.0020.0002] # CARIAN LETTER C-39
102C7 ; [.389C.0020.0002] # CARIAN LETTER TT
102C8 ; [.389D.0020.0002] # CARIAN LETTER UUU2
102C9 ; [.389E.0020.0002] # CARIAN LETTER RR
102CA ; [.389F.0020.0002] # CARIAN LETTER MB
102CB ; [.38A0.0020.0002] # CARIAN LETTER MB2
102CC ; [.38A1.0020.0002] # CARIAN LETTER MB3
102CD ; [.38A2.0020.0002] # CARIAN LETTER MB4
102CE ; [.38A3.0020.0002] # CARIAN LETTER LD2
102CF ; [.38A4.0020.0002] # CARIAN LETTER E2
102D0 ; [.38A5.0020.0002] # CARIAN LETTER UUU3
10920 ; [.38A6.0020.0002] # LYDIAN LETTER A
10921 ; [.38A7.0020.0002] # LYDIAN LETTER B
10922 ; [.38A8.0020.0002] # LYDIAN LETTER G
10923 ; [.38A9.0020.0002] # LYDIAN LETTER D
10924 ; [.38AA.0020.0002] # LYDIAN LETTER E
10925 ; [.38AB.0020.0002] # LYDIAN LETTER V
10926 ; [.38AC.0020.0002] # LYDIAN LETTER I
10927 ; [.38AD.0020.0002] # LYDIAN LETTER Y
10928 ; [.38AE.0020.0002] # LYDIAN LETTER K
10929 ; [.38AF.0020.0002] # LYDIAN LETTER L
1092A ; [.38B0.0020.0002] # LYDIAN LETTER M
1092B ; [.38B1.0020.0002] # LYDIAN LETTER N
1092C ; [.38B2.0020.0002] # LYDIAN LETTER O
1092D ; [.38B3.0020.0002] # LYDIAN LETTER R
1092E ; [.38B4.0020.0002] # LYDIAN LETTER SS
1092F ; [.38B5.0020.0002] # LYDIAN LETTER T
10930 ; [.38B6.0020.0002] # LYDIAN LETTER U
10931 ; [.38B7.0020.0002] # LYDIAN LETTER F
10932 ; [.38B8.0020.0002] # LYDIAN LETTER Q
10933 ; [.38B9.0020.0002] # LYDIAN LETTER S
10934 ; [.38BA.0020.0002] # LYDIAN LETTER TT
10935 ; [.38BB.0020.0002] # LYDIAN LETTER AN
10936 ; [.38BC.0020.0002] # LYDIAN LETTER EN
10937 ; [.38BD.0020.0002] # LYDIAN LETTER LY
10938 ; [.38BE.0020.0002] # LYDIAN LETTER NN
10939 ; [.38BF.0020.0002] # LYDIAN LETTER C
10300 ; [.38C0.0020.0002] # OLD ITALIC LETTER A
10301 ; [.38C1.0020.0002] # OLD ITALIC LETTER BE
10302 ; [.38C2.0020.0002] # OLD ITALIC LETTER KE
10303 ; [.38C3.0020.0002] # OLD ITALIC LETTER DE
10304 ; [.38C4.0020.0002] # OLD ITALIC LETTER E
10305 ; [.38C5.0020.0002] # OLD ITALIC LETTER VE
10306 ; [.38C6.0020.0002] # OLD ITALIC LETTER ZE
10307 ; [.38C7.0020.0002] # OLD ITALIC LETTER HE
10308 ; [.38C8.0020.0002] # OLD ITALIC LETTER THE
10309 ; [.38C9.0020.0002] # OLD ITALIC LETTER I
1030A ; [.38CA.0020.0002] # OLD ITALIC LETTER KA
1030B ; [.38CB.0020.0002] # OLD ITALIC LETTER EL
1030C ; [.38CC.0020.0002] # OLD ITALIC LETTER EM
1030D ; [.38CD.0020.0002] # OLD ITALIC LETTER EN
1030E ; [.38CE.0020.0002] # OLD ITALIC LETTER ESH
1030F ; [.38CF.0020.0002] # OLD ITALIC LETTER O
10310 ; [.38D0.0020.0002] # OLD ITALIC LETTER PE
10311 ; [.38D1.0020.0002] # OLD ITALIC LETTER SHE
10312 ; [.38D2.0020.0002] # OLD ITALIC LETTER KU
10313 ; [.38D3.0020.0002] # OLD ITALIC LETTER ER
10314 ; [.38D4.0020.0002] # OLD ITALIC LETTER ES
10315 ; [.38D5.0020.0002] # OLD ITALIC LETTER TE
10316 ; [.38D6.0020.0002] # OLD ITALIC LETTER U
10317 ; [.38D7.0020.0002] # OLD ITALIC LETTER EKS
10318 ; [.38D8.0020.0002] # OLD ITALIC LETTER PHE
10319 ; [.38D9.0020.0002] # OLD ITALIC LETTER KHE
1031A ; [.38DA.0020.0002] # OLD ITALIC LETTER EF
1031B ; [.38DB.0020.0002] # OLD ITALIC LETTER ERS
1031C ; [.38DC.0020.0002] # OLD ITALIC LETTER CHE
1031D ; [.38DD.0020.0002] # OLD ITALIC LETTER II
1031E ; [.38DE.0020.0002] # OLD ITALIC LETTER UU
10330 ; [.38DF.0020.0002] # GOTHIC LETTER AHSA
10331 ; [.38E0.0020.0002] # GOTHIC LETTER BAIRKAN
10332 ; [.38E1.0020.0002] # GOTHIC LETTER GIBA
10333 ; [.38E2.0020.0002] # GOTHIC LETTER DAGS
10334 ; [.38E3.0020.0002] # GOTHIC LETTER AIHVUS
10335 ; [.38E4.0020.0002] # GOTHIC LETTER QAIRTHRA
10336 ; [.38E5.0020.0002] # GOTHIC LETTER IUJA
10337 ; [.38E6.0020.0002] # GOTHIC LETTER HAGL
10338 ; [.38E7.0020.0002] # GOTHIC LETTER THIUTH
10339 ; [.38E8.0020.0002] # GOTHIC LETTER EIS
1033A ; [.38E9.0020.0002] # GOTHIC LETTER KUSMA
1033B ; [.38EA.0020.0002] # GOTHIC LETTER LAGUS
1033C ; [.38EB.0020.0002] # GOTHIC LETTER MANNA
1033D ; [.38EC.0020.0002] # GOTHIC LETTER NAUTHS
1033E ; [.38ED.0020.0002] # GOTHIC LETTER JER
1033F ; [.38EE.0020.0002] # GOTHIC LETTER URUS
10340 ; [.38EF.0020.0002] # GOTHIC LETTER PAIRTHRA
10341 ; [.38F0.0020.0002] # GOTHIC LETTER NINETY
10342 ; [.38F1.0020.0002] # GOTHIC LETTER RAIDA
10343 ; [.38F2.0020.0002] # GOTHIC LETTER SAUIL
10344 ; [.38F3.0020.0002] # GOTHIC LETTER TEIWS
10345 ; [.38F4.0020.0002] # GOTHIC LETTER WINJA
10346 ; [.38F5.0020.0002] # GOTHIC LETTER FAIHU
10347 ; [.38F6.0020.0002] # GOTHIC LETTER IGGWS
10348 ; [.38F7.0020.0002] # GOTHIC LETTER HWAIR
10349 ; [.38F8.0020.0002] # GOTHIC LETTER OTHAL
1034A ; [.38F9.0020.0002] # GOTHIC LETTER NINE HUNDRED
10428 ; [.38FA.0020.0002] # DESERET SMALL LETTER LONG I
10400 ; [.38FA.0020.0008] # DESERET CAPITAL LETTER LONG I
10429 ; [.38FB.0020.0002] # DESERET SMALL LETTER LONG E
10401 ; [.38FB.0020.0008] # DESERET CAPITAL LETTER LONG E
1042A ; [.38FC.0020.0002] # DESERET SMALL LETTER LONG A
10402 ; [.38FC.0020.0008] # DESERET CAPITAL LETTER LONG A
1042B ; [.38FD.0020.0002] # DESERET SMALL LETTER LONG AH
10403 ; [.38FD.0020.0008] # DESERET CAPITAL LETTER LONG AH
1042C ; [.38FE.0020.0002] # DESERET SMALL LETTER LONG O
10404 ; [.38FE.0020.0008] # DESERET CAPITAL LETTER LONG O
1042D ; [.38FF.0020.0002] # DESERET SMALL LETTER LONG OO
10405 ; [.38FF.0020.0008] # DESERET CAPITAL LETTER LONG OO
1042E ; [.3900.0020.0002] # DESERET SMALL LETTER SHORT I
10406 ; [.3900.0020.0008] # DESERET CAPITAL LETTER SHORT I
1042F ; [.3901.0020.0002] # DESERET SMALL LETTER SHORT E
10407 ; [.3901.0020.0008] # DESERET CAPITAL LETTER SHORT E
10430 ; [.3902.0020.0002] # DESERET SMALL LETTER SHORT A
10408 ; [.3902.0020.0008] # DESERET CAPITAL LETTER SHORT A
10431 ; [.3903.0020.0002] # DESERET SMALL LETTER SHORT AH
10409 ; [.3903.0020.0008] # DESERET CAPITAL LETTER SHORT AH
10432 ; [.3904.0020.0002] # DESERET SMALL LETTER SHORT O
1040A ; [.3904.0020.0008] # DESERET CAPITAL LETTER SHORT O
10433 ; [.3905.0020.0002] # DESERET SMALL LETTER SHORT OO
1040B ; [.3905.0020.0008] # DESERET CAPITAL LETTER SHORT OO
10434 ; [.3906.0020.0002] # DESERET SMALL LETTER AY
1040C ; [.3906.0020.0008] # DESERET CAPITAL LETTER AY
10435 ; [.3907.0020.0002] # DESERET SMALL LETTER OW
1040D ; [.3907.0020.0008] # DESERET CAPITAL LETTER OW
10436 ; [.3908.0020.0002] # DESERET SMALL LETTER WU
1040E ; [.3908.0020.0008] # DESERET CAPITAL LETTER WU
10437 ; [.3909.0020.0002] # DESERET SMALL LETTER YEE
1040F ; [.3909.0020.0008] # DESERET CAPITAL LETTER YEE
10438 ; [.390A.0020.0002] # DESERET SMALL LETTER H
10410 ; [.390A.0020.0008] # DESERET CAPITAL LETTER H
10439 ; [.390B.0020.0002] # DESERET SMALL LETTER PEE
10411 ; [.390B.0020.0008] # DESERET CAPITAL LETTER PEE
1043A ; [.390C.0020.0002] # DESERET SMALL LETTER BEE
10412 ; [.390C.0020.0008] # DESERET CAPITAL LETTER BEE
1043B ; [.390D.0020.0002] # DESERET SMALL LETTER TEE
10413 ; [.390D.0020.0008] # DESERET CAPITAL LETTER TEE
1043C ; [.390E.0020.0002] # DESERET SMALL LETTER DEE
10414 ; [.390E.0020.0008] # DESERET CAPITAL LETTER DEE
1043D ; [.390F.0020.0002] # DESERET SMALL LETTER CHEE
10415 ; [.390F.0020.0008] # DESERET CAPITAL LETTER CHEE
1043E ; [.3910.0020.0002] # DESERET SMALL LETTER JEE
10416 ; [.3910.0020.0008] # DESERET CAPITAL LETTER JEE
1043F ; [.3911.0020.0002] # DESERET SMALL LETTER KAY
10417 ; [.3911.0020.0008] # DESERET CAPITAL LETTER KAY
10440 ; [.3912.0020.0002] # DESERET SMALL LETTER GAY
10418 ; [.3912.0020.0008] # DESERET CAPITAL LETTER GAY
10441 ; [.3913.0020.0002] # DESERET SMALL LETTER EF
10419 ; [.3913.0020.0008] # DESERET CAPITAL LETTER EF
10442 ; [.3914.0020.0002] # DESERET SMALL LETTER VEE
1041A ; [.3914.0020.0008] # DESERET CAPITAL LETTER VEE
10443 ; [.3915.0020.0002] # DESERET SMALL LETTER ETH
1041B ; [.3915.0020.0008] # DESERET CAPITAL LETTER ETH
10444 ; [.3916.0020.0002] # DESERET SMALL LETTER THEE
1041C ; [.3916.0020.0008] # DESERET CAPITAL LETTER THEE
10445 ; [.3917.0020.0002] # DESERET SMALL LETTER ES
1041D ; [.3917.0020.0008] # DESERET CAPITAL LETTER ES
10446 ; [.3918.0020.0002] # DESERET SMALL LETTER ZEE
1041E ; [.3918.0020.0008] # DESERET CAPITAL LETTER ZEE
10447 ; [.3919.0020.0002] # DESERET SMALL LETTER ESH
1041F ; [.3919.0020.0008] # DESERET CAPITAL LETTER ESH
10448 ; [.391A.0020.0002] # DESERET SMALL LETTER ZHEE
10420 ; [.391A.0020.0008] # DESERET CAPITAL LETTER ZHEE
10449 ; [.391B.0020.0002] # DESERET SMALL LETTER ER
10421 ; [.391B.0020.0008] # DESERET CAPITAL LETTER ER
1044A ; [.391C.0020.0002] # DESERET SMALL LETTER EL
10422 ; [.391C.0020.0008] # DESERET CAPITAL LETTER EL
1044B ; [.391D.0020.0002] # DESERET SMALL LETTER EM
10423 ; [.391D.0020.0008] # DESERET CAPITAL LETTER EM
1044C ; [.391E.0020.0002] # DESERET SMALL LETTER EN
10424 ; [.391E.0020.0008] # DESERET CAPITAL LETTER EN
1044D ; [.391F.0020.0002] # DESERET SMALL LETTER ENG
10425 ; [.391F.0020.0008] # DESERET CAPITAL LETTER ENG
1044E ; [.3920.0020.0002] # DESERET SMALL LETTER OI
10426 ; [.3920.0020.0008] # DESERET CAPITAL LETTER OI
1044F ; [.3921.0020.0002] # DESERET SMALL LETTER EW
10427 ; [.3921.0020.0008] # DESERET CAPITAL LETTER EW
10450 ; [.3922.0020.0002] # SHAVIAN LETTER PEEP
10451 ; [.3923.0020.0002] # SHAVIAN LETTER TOT
10452 ; [.3924.0020.0002] # SHAVIAN LETTER KICK
10453 ; [.3925.0020.0002] # SHAVIAN LETTER FEE
10454 ; [.3926.0020.0002] # SHAVIAN LETTER THIGH
10455 ; [.3927.0020.0002] # SHAVIAN LETTER SO
10456 ; [.3928.0020.0002] # SHAVIAN LETTER SURE
10457 ; [.3929.0020.0002] # SHAVIAN LETTER CHURCH
10458 ; [.392A.0020.0002] # SHAVIAN LETTER YEA
10459 ; [.392B.0020.0002] # SHAVIAN LETTER HUNG
1045A ; [.392C.0020.0002] # SHAVIAN LETTER BIB
1045B ; [.392D.0020.0002] # SHAVIAN LETTER DEAD
1045C ; [.392E.0020.0002] # SHAVIAN LETTER GAG
1045D ; [.392F.0020.0002] # SHAVIAN LETTER VOW
1045E ; [.3930.0020.0002] # SHAVIAN LETTER THEY
1045F ; [.3931.0020.0002] # SHAVIAN LETTER ZOO
10460 ; [.3932.0020.0002] # SHAVIAN LETTER MEASURE
10461 ; [.3933.0020.0002] # SHAVIAN LETTER JUDGE
10462 ; [.3934.0020.0002] # SHAVIAN LETTER WOE
10463 ; [.3935.0020.0002] # SHAVIAN LETTER HA-HA
10464 ; [.3936.0020.0002] # SHAVIAN LETTER LOLL
10465 ; [.3937.0020.0002] # SHAVIAN LETTER MIME
10466 ; [.3938.0020.0002] # SHAVIAN LETTER IF
10467 ; [.3939.0020.0002] # SHAVIAN LETTER EGG
10468 ; [.393A.0020.0002] # SHAVIAN LETTER ASH
10469 ; [.393B.0020.0002] # SHAVIAN LETTER ADO
1046A ; [.393C.0020.0002] # SHAVIAN LETTER ON
1046B ; [.393D.0020.0002] # SHAVIAN LETTER WOOL
1046C ; [.393E.0020.0002] # SHAVIAN LETTER OUT
1046D ; [.393F.0020.0002] # SHAVIAN LETTER AH
1046E ; [.3940.0020.0002] # SHAVIAN LETTER ROAR
1046F ; [.3941.0020.0002] # SHAVIAN LETTER NUN
10470 ; [.3942.0020.0002] # SHAVIAN LETTER EAT
10471 ; [.3943.0020.0002] # SHAVIAN LETTER AGE
10472 ; [.3944.0020.0002] # SHAVIAN LETTER ICE
10473 ; [.3945.0020.0002] # SHAVIAN LETTER UP
10474 ; [.3946.0020.0002] # SHAVIAN LETTER OAK
10475 ; [.3947.0020.0002] # SHAVIAN LETTER OOZE
10476 ; [.3948.0020.0002] # SHAVIAN LETTER OIL
10477 ; [.3949.0020.0002] # SHAVIAN LETTER AWE
10478 ; [.394A.0020.0002] # SHAVIAN LETTER ARE
10479 ; [.394B.0020.0002] # SHAVIAN LETTER OR
1047A ; [.394C.0020.0002] # SHAVIAN LETTER AIR
1047B ; [.394D.0020.0002] # SHAVIAN LETTER ERR
1047C ; [.394E.0020.0002] # SHAVIAN LETTER ARRAY
1047D ; [.394F.0020.0002] # SHAVIAN LETTER EAR
1047E ; [.3950.0020.0002] # SHAVIAN LETTER IAN
1047F ; [.3951.0020.0002] # SHAVIAN LETTER YEW
10480 ; [.3952.0020.0002] # OSMANYA LETTER ALEF
10481 ; [.3953.0020.0002] # OSMANYA LETTER BA
10482 ; [.3954.0020.0002] # OSMANYA LETTER TA
10483 ; [.3955.0020.0002] # OSMANYA LETTER JA
10484 ; [.3956.0020.0002] # OSMANYA LETTER XA
10485 ; [.3957.0020.0002] # OSMANYA LETTER KHA
10486 ; [.3958.0020.0002] # OSMANYA LETTER DEEL
10487 ; [.3959.0020.0002] # OSMANYA LETTER RA
10488 ; [.395A.0020.0002] # OSMANYA LETTER SA
10489 ; [.395B.0020.0002] # OSMANYA LETTER SHIIN
1048A ; [.395C.0020.0002] # OSMANYA LETTER DHA
1048B ; [.395D.0020.0002] # OSMANYA LETTER CAYN
1048C ; [.395E.0020.0002] # OSMANYA LETTER GA
1048D ; [.395F.0020.0002] # OSMANYA LETTER FA
1048E ; [.3960.0020.0002] # OSMANYA LETTER QAAF
1048F ; [.3961.0020.0002] # OSMANYA LETTER KAAF
10490 ; [.3962.0020.0002] # OSMANYA LETTER LAAN
10491 ; [.3963.0020.0002] # OSMANYA LETTER MIIN
10492 ; [.3964.0020.0002] # OSMANYA LETTER NUUN
10493 ; [.3965.0020.0002] # OSMANYA LETTER WAW
10494 ; [.3966.0020.0002] # OSMANYA LETTER HA
10495 ; [.3967.0020.0002] # OSMANYA LETTER YA
10496 ; [.3968.0020.0002] # OSMANYA LETTER A
10497 ; [.3969.0020.0002] # OSMANYA LETTER E
10498 ; [.396A.0020.0002] # OSMANYA LETTER I
10499 ; [.396B.0020.0002] # OSMANYA LETTER O
1049A ; [.396C.0020.0002] # OSMANYA LETTER U
1049B ; [.396D.0020.0002] # OSMANYA LETTER AA
1049C ; [.396E.0020.0002] # OSMANYA LETTER EE
1049D ; [.396F.0020.0002] # OSMANYA LETTER OO
110D0 ; [.3970.0020.0002] # SORA SOMPENG LETTER SAH
110D1 ; [.3971.0020.0002] # SORA SOMPENG LETTER TAH
110D2 ; [.3972.0020.0002] # SORA SOMPENG LETTER BAH
110D3 ; [.3973.0020.0002] # SORA SOMPENG LETTER CAH
110D4 ; [.3974.0020.0002] # SORA SOMPENG LETTER DAH
110D5 ; [.3975.0020.0002] # SORA SOMPENG LETTER GAH
110D6 ; [.3976.0020.0002] # SORA SOMPENG LETTER MAH
110D7 ; [.3977.0020.0002] # SORA SOMPENG LETTER NGAH
110D8 ; [.3978.0020.0002] # SORA SOMPENG LETTER LAH
110D9 ; [.3979.0020.0002] # SORA SOMPENG LETTER NAH
110DA ; [.397A.0020.0002] # SORA SOMPENG LETTER VAH
110DB ; [.397B.0020.0002] # SORA SOMPENG LETTER PAH
110DC ; [.397C.0020.0002] # SORA SOMPENG LETTER YAH
110DD ; [.397D.0020.0002] # SORA SOMPENG LETTER RAH
110DE ; [.397E.0020.0002] # SORA SOMPENG LETTER HAH
110DF ; [.397F.0020.0002] # SORA SOMPENG LETTER KAH
110E0 ; [.3980.0020.0002] # SORA SOMPENG LETTER JAH
110E1 ; [.3981.0020.0002] # SORA SOMPENG LETTER NYAH
110E2 ; [.3982.0020.0002] # SORA SOMPENG LETTER AH
110E3 ; [.3983.0020.0002] # SORA SOMPENG LETTER EEH
110E4 ; [.3984.0020.0002] # SORA SOMPENG LETTER IH
110E5 ; [.3985.0020.0002] # SORA SOMPENG LETTER UH
110E6 ; [.3986.0020.0002] # SORA SOMPENG LETTER OH
110E7 ; [.3987.0020.0002] # SORA SOMPENG LETTER EH
110E8 ; [.3988.0020.0002] # SORA SOMPENG LETTER MAE
10000 ; [.3989.0020.0002] # LINEAR B SYLLABLE B008 A
10001 ; [.398A.0020.0002] # LINEAR B SYLLABLE B038 E
10002 ; [.398B.0020.0002] # LINEAR B SYLLABLE B028 I
10003 ; [.398C.0020.0002] # LINEAR B SYLLABLE B061 O
10004 ; [.398D.0020.0002] # LINEAR B SYLLABLE B010 U
10005 ; [.398E.0020.0002] # LINEAR B SYLLABLE B001 DA
10006 ; [.398F.0020.0002] # LINEAR B SYLLABLE B045 DE
10007 ; [.3990.0020.0002] # LINEAR B SYLLABLE B007 DI
10008 ; [.3991.0020.0002] # LINEAR B SYLLABLE B014 DO
10009 ; [.3992.0020.0002] # LINEAR B SYLLABLE B051 DU
1000A ; [.3993.0020.0002] # LINEAR B SYLLABLE B057 JA
1000B ; [.3994.0020.0002] # LINEAR B SYLLABLE B046 JE
1000D ; [.3995.0020.0002] # LINEAR B SYLLABLE B036 JO
1000E ; [.3996.0020.0002] # LINEAR B SYLLABLE B065 JU
1000F ; [.3997.0020.0002] # LINEAR B SYLLABLE B077 KA
10010 ; [.3998.0020.0002] # LINEAR B SYLLABLE B044 KE
10011 ; [.3999.0020.0002] # LINEAR B SYLLABLE B067 KI
10012 ; [.399A.0020.0002] # LINEAR B SYLLABLE B070 KO
10013 ; [.399B.0020.0002] # LINEAR B SYLLABLE B081 KU
10014 ; [.399C.0020.0002] # LINEAR B SYLLABLE B080 MA
10015 ; [.399D.0020.0002] # LINEAR B SYLLABLE B013 ME
10016 ; [.399E.0020.0002] # LINEAR B SYLLABLE B073 MI
10017 ; [.399F.0020.0002] # LINEAR B SYLLABLE B015 MO
10018 ; [.39A0.0020.0002] # LINEAR B SYLLABLE B023 MU
10019 ; [.39A1.0020.0002] # LINEAR B SYLLABLE B006 NA
1001A ; [.39A2.0020.0002] # LINEAR B SYLLABLE B024 NE
1001B ; [.39A3.0020.0002] # LINEAR B SYLLABLE B030 NI
1001C ; [.39A4.0020.0002] # LINEAR B SYLLABLE B052 NO
1001D ; [.39A5.0020.0002] # LINEAR B SYLLABLE B055 NU
1001E ; [.39A6.0020.0002] # LINEAR B SYLLABLE B003 PA
1001F ; [.39A7.0020.0002] # LINEAR B SYLLABLE B072 PE
10020 ; [.39A8.0020.0002] # LINEAR B SYLLABLE B039 PI
10021 ; [.39A9.0020.0002] # LINEAR B SYLLABLE B011 PO
10022 ; [.39AA.0020.0002] # LINEAR B SYLLABLE B050 PU
10023 ; [.39AB.0020.0002] # LINEAR B SYLLABLE B016 QA
10024 ; [.39AC.0020.0002] # LINEAR B SYLLABLE B078 QE
10025 ; [.39AD.0020.0002] # LINEAR B SYLLABLE B021 QI
10026 ; [.39AE.0020.0002] # LINEAR B SYLLABLE B032 QO
10028 ; [.39AF.0020.0002] # LINEAR B SYLLABLE B060 RA
10029 ; [.39B0.0020.0002] # LINEAR B SYLLABLE B027 RE
1002A ; [.39B1.0020.0002] # LINEAR B SYLLABLE B053 RI
1002B ; [.39B2.0020.0002] # LINEAR B SYLLABLE B002 RO
1002C ; [.39B3.0020.0002] # LINEAR B SYLLABLE B026 RU
1002D ; [.39B4.0020.0002] # LINEAR B SYLLABLE B031 SA
1002E ; [.39B5.0020.0002] # LINEAR B SYLLABLE B009 SE
1002F ; [.39B6.0020.0002] # LINEAR B SYLLABLE B041 SI
10030 ; [.39B7.0020.0002] # LINEAR B SYLLABLE B012 SO
10031 ; [.39B8.0020.0002] # LINEAR B SYLLABLE B058 SU
10032 ; [.39B9.0020.0002] # LINEAR B SYLLABLE B059 TA
10033 ; [.39BA.0020.0002] # LINEAR B SYLLABLE B004 TE
10034 ; [.39BB.0020.0002] # LINEAR B SYLLABLE B037 TI
10035 ; [.39BC.0020.0002] # LINEAR B SYLLABLE B005 TO
10036 ; [.39BD.0020.0002] # LINEAR B SYLLABLE B069 TU
10037 ; [.39BE.0020.0002] # LINEAR B SYLLABLE B054 WA
10038 ; [.39BF.0020.0002] # LINEAR B SYLLABLE B075 WE
10039 ; [.39C0.0020.0002] # LINEAR B SYLLABLE B040 WI
1003A ; [.39C1.0020.0002] # LINEAR B SYLLABLE B042 WO
1003C ; [.39C2.0020.0002] # LINEAR B SYLLABLE B017 ZA
1003D ; [.39C3.0020.0002] # LINEAR B SYLLABLE B074 ZE
1003F ; [.39C4.0020.0002] # LINEAR B SYLLABLE B020 ZO
10040 ; [.39C5.0020.0002] # LINEAR B SYLLABLE B025 A2
10041 ; [.39C6.0020.0002] # LINEAR B SYLLABLE B043 A3
10042 ; [.39C7.0020.0002] # LINEAR B SYLLABLE B085 AU
10043 ; [.39C8.0020.0002] # LINEAR B SYLLABLE B071 DWE
10044 ; [.39C9.0020.0002] # LINEAR B SYLLABLE B090 DWO
10045 ; [.39CA.0020.0002] # LINEAR B SYLLABLE B048 NWA
10046 ; [.39CB.0020.0002] # LINEAR B SYLLABLE B029 PU2
10047 ; [.39CC.0020.0002] # LINEAR B SYLLABLE B062 PTE
10048 ; [.39CD.0020.0002] # LINEAR B SYLLABLE B076 RA2
10049 ; [.39CE.0020.0002] # LINEAR B SYLLABLE B033 RA3
1004A ; [.39CF.0020.0002] # LINEAR B SYLLABLE B068 RO2
1004B ; [.39D0.0020.0002] # LINEAR B SYLLABLE B066 TA2
1004C ; [.39D1.0020.0002] # LINEAR B SYLLABLE B087 TWE
1004D ; [.39D2.0020.0002] # LINEAR B SYLLABLE B091 TWO
10050 ; [.39D3.0020.0002] # LINEAR B SYMBOL B018
10051 ; [.39D4.0020.0002] # LINEAR B SYMBOL B019
10052 ; [.39D5.0020.0002] # LINEAR B SYMBOL B022
10053 ; [.39D6.0020.0002] # LINEAR B SYMBOL B034
10054 ; [.39D7.0020.0002] # LINEAR B SYMBOL B047
10055 ; [.39D8.0020.0002] # LINEAR B SYMBOL B049
10056 ; [.39D9.0020.0002] # LINEAR B SYMBOL B056
10057 ; [.39DA.0020.0002] # LINEAR B SYMBOL B063
10058 ; [.39DB.0020.0002] # LINEAR B SYMBOL B064
10059 ; [.39DC.0020.0002] # LINEAR B SYMBOL B079
1005A ; [.39DD.0020.0002] # LINEAR B SYMBOL B082
1005B ; [.39DE.0020.0002] # LINEAR B SYMBOL B083
1005C ; [.39DF.0020.0002] # LINEAR B SYMBOL B086
1005D ; [.39E0.0020.0002] # LINEAR B SYMBOL B089
10080 ; [.39E1.0020.0002] # LINEAR B IDEOGRAM B100 MAN
10081 ; [.39E2.0020.0002] # LINEAR B IDEOGRAM B102 WOMAN
10082 ; [.39E3.0020.0002] # LINEAR B IDEOGRAM B104 DEER
10083 ; [.39E4.0020.0002] # LINEAR B IDEOGRAM B105 EQUID
10084 ; [.39E5.0020.0002] # LINEAR B IDEOGRAM B105F MARE
10085 ; [.39E6.0020.0002] # LINEAR B IDEOGRAM B105M STALLION
10086 ; [.39E7.0020.0002] # LINEAR B IDEOGRAM B106F EWE
10087 ; [.39E8.0020.0002] # LINEAR B IDEOGRAM B106M RAM
10088 ; [.39E9.0020.0002] # LINEAR B IDEOGRAM B107F SHE-GOAT
10089 ; [.39EA.0020.0002] # LINEAR B IDEOGRAM B107M HE-GOAT
1008A ; [.39EB.0020.0002] # LINEAR B IDEOGRAM B108F SOW
1008B ; [.39EC.0020.0002] # LINEAR B IDEOGRAM B108M BOAR
1008C ; [.39ED.0020.0002] # LINEAR B IDEOGRAM B109F COW
1008D ; [.39EE.0020.0002] # LINEAR B IDEOGRAM B109M BULL
1008E ; [.39EF.0020.0002] # LINEAR B IDEOGRAM B120 WHEAT
1008F ; [.39F0.0020.0002] # LINEAR B IDEOGRAM B121 BARLEY
10090 ; [.39F1.0020.0002] # LINEAR B IDEOGRAM B122 OLIVE
10091 ; [.39F2.0020.0002] # LINEAR B IDEOGRAM B123 SPICE
10092 ; [.39F3.0020.0002] # LINEAR B IDEOGRAM B125 CYPERUS
10093 ; [.39F4.0020.0002] # LINEAR B MONOGRAM B127 KAPO
10094 ; [.39F5.0020.0002] # LINEAR B MONOGRAM B128 KANAKO
10095 ; [.39F6.0020.0002] # LINEAR B IDEOGRAM B130 OIL
10096 ; [.39F7.0020.0002] # LINEAR B IDEOGRAM B131 WINE
10097 ; [.39F8.0020.0002] # LINEAR B IDEOGRAM B132
10098 ; [.39F9.0020.0002] # LINEAR B MONOGRAM B133 AREPA
10099 ; [.39FA.0020.0002] # LINEAR B MONOGRAM B135 MERI
1009A ; [.39FB.0020.0002] # LINEAR B IDEOGRAM B140 BRONZE
1009B ; [.39FC.0020.0002] # LINEAR B IDEOGRAM B141 GOLD
1009C ; [.39FD.0020.0002] # LINEAR B IDEOGRAM B142
1009D ; [.39FE.0020.0002] # LINEAR B IDEOGRAM B145 WOOL
1009E ; [.39FF.0020.0002] # LINEAR B IDEOGRAM B146
1009F ; [.3A00.0020.0002] # LINEAR B IDEOGRAM B150
100A0 ; [.3A01.0020.0002] # LINEAR B IDEOGRAM B151 HORN
100A1 ; [.3A02.0020.0002] # LINEAR B IDEOGRAM B152
100A2 ; [.3A03.0020.0002] # LINEAR B IDEOGRAM B153
100A3 ; [.3A04.0020.0002] # LINEAR B IDEOGRAM B154
100A4 ; [.3A05.0020.0002] # LINEAR B MONOGRAM B156 TURO2
100A5 ; [.3A06.0020.0002] # LINEAR B IDEOGRAM B157
100A6 ; [.3A07.0020.0002] # LINEAR B IDEOGRAM B158
100A7 ; [.3A08.0020.0002] # LINEAR B IDEOGRAM B159 CLOTH
100A8 ; [.3A09.0020.0002] # LINEAR B IDEOGRAM B160
100A9 ; [.3A0A.0020.0002] # LINEAR B IDEOGRAM B161
100AA ; [.3A0B.0020.0002] # LINEAR B IDEOGRAM B162 GARMENT
100AB ; [.3A0C.0020.0002] # LINEAR B IDEOGRAM B163 ARMOUR
100AC ; [.3A0D.0020.0002] # LINEAR B IDEOGRAM B164
100AD ; [.3A0E.0020.0002] # LINEAR B IDEOGRAM B165
100AE ; [.3A0F.0020.0002] # LINEAR B IDEOGRAM B166
100AF ; [.3A10.0020.0002] # LINEAR B IDEOGRAM B167
100B0 ; [.3A11.0020.0002] # LINEAR B IDEOGRAM B168
100B1 ; [.3A12.0020.0002] # LINEAR B IDEOGRAM B169
100B2 ; [.3A13.0020.0002] # LINEAR B IDEOGRAM B170
100B3 ; [.3A14.0020.0002] # LINEAR B IDEOGRAM B171
100B4 ; [.3A15.0020.0002] # LINEAR B IDEOGRAM B172
100B5 ; [.3A16.0020.0002] # LINEAR B IDEOGRAM B173 MONTH
100B6 ; [.3A17.0020.0002] # LINEAR B IDEOGRAM B174
100B7 ; [.3A18.0020.0002] # LINEAR B IDEOGRAM B176 TREE
100B8 ; [.3A19.0020.0002] # LINEAR B IDEOGRAM B177
100B9 ; [.3A1A.0020.0002] # LINEAR B IDEOGRAM B178
100BA ; [.3A1B.0020.0002] # LINEAR B IDEOGRAM B179
100BB ; [.3A1C.0020.0002] # LINEAR B IDEOGRAM B180
100BC ; [.3A1D.0020.0002] # LINEAR B IDEOGRAM B181
100BD ; [.3A1E.0020.0002] # LINEAR B IDEOGRAM B182
100BE ; [.3A1F.0020.0002] # LINEAR B IDEOGRAM B183
100BF ; [.3A20.0020.0002] # LINEAR B IDEOGRAM B184
100C0 ; [.3A21.0020.0002] # LINEAR B IDEOGRAM B185
100C1 ; [.3A22.0020.0002] # LINEAR B IDEOGRAM B189
100C2 ; [.3A23.0020.0002] # LINEAR B IDEOGRAM B190
100C3 ; [.3A24.0020.0002] # LINEAR B IDEOGRAM B191 HELMET
100C4 ; [.3A25.0020.0002] # LINEAR B IDEOGRAM B220 FOOTSTOOL
100C5 ; [.3A26.0020.0002] # LINEAR B IDEOGRAM B225 BATHTUB
100C6 ; [.3A27.0020.0002] # LINEAR B IDEOGRAM B230 SPEAR
100C7 ; [.3A28.0020.0002] # LINEAR B IDEOGRAM B231 ARROW
100C8 ; [.3A29.0020.0002] # LINEAR B IDEOGRAM B232
100C9 ; [.3A2A.0020.0002] # LINEAR B IDEOGRAM B233 SWORD
100CA ; [.3A2B.0020.0002] # LINEAR B IDEOGRAM B234
100CB ; [.3A2C.0020.0002] # LINEAR B IDEOGRAM B236
100CC ; [.3A2D.0020.0002] # LINEAR B IDEOGRAM B240 WHEELED CHARIOT
100CD ; [.3A2E.0020.0002] # LINEAR B IDEOGRAM B241 CHARIOT
100CE ; [.3A2F.0020.0002] # LINEAR B IDEOGRAM B242 CHARIOT FRAME
100CF ; [.3A30.0020.0002] # LINEAR B IDEOGRAM B243 WHEEL
100D0 ; [.3A31.0020.0002] # LINEAR B IDEOGRAM B245
100D1 ; [.3A32.0020.0002] # LINEAR B IDEOGRAM B246
100D2 ; [.3A33.0020.0002] # LINEAR B MONOGRAM B247 DIPTE
100D3 ; [.3A34.0020.0002] # LINEAR B IDEOGRAM B248
100D4 ; [.3A35.0020.0002] # LINEAR B IDEOGRAM B249
100D5 ; [.3A36.0020.0002] # LINEAR B IDEOGRAM B251
100D6 ; [.3A37.0020.0002] # LINEAR B IDEOGRAM B252
100D7 ; [.3A38.0020.0002] # LINEAR B IDEOGRAM B253
100D8 ; [.3A39.0020.0002] # LINEAR B IDEOGRAM B254 DART
100D9 ; [.3A3A.0020.0002] # LINEAR B IDEOGRAM B255
100DA ; [.3A3B.0020.0002] # LINEAR B IDEOGRAM B256
100DB ; [.3A3C.0020.0002] # LINEAR B IDEOGRAM B257
100DC ; [.3A3D.0020.0002] # LINEAR B IDEOGRAM B258
100DD ; [.3A3E.0020.0002] # LINEAR B IDEOGRAM B259
100DE ; [.3A3F.0020.0002] # LINEAR B IDEOGRAM VESSEL B155
100DF ; [.3A40.0020.0002] # LINEAR B IDEOGRAM VESSEL B200
100E0 ; [.3A41.0020.0002] # LINEAR B IDEOGRAM VESSEL B201
100E1 ; [.3A42.0020.0002] # LINEAR B IDEOGRAM VESSEL B202
100E2 ; [.3A43.0020.0002] # LINEAR B IDEOGRAM VESSEL B203
100E3 ; [.3A44.0020.0002] # LINEAR B IDEOGRAM VESSEL B204
100E4 ; [.3A45.0020.0002] # LINEAR B IDEOGRAM VESSEL B205
100E5 ; [.3A46.0020.0002] # LINEAR B IDEOGRAM VESSEL B206
100E6 ; [.3A47.0020.0002] # LINEAR B IDEOGRAM VESSEL B207
100E7 ; [.3A48.0020.0002] # LINEAR B IDEOGRAM VESSEL B208
100E8 ; [.3A49.0020.0002] # LINEAR B IDEOGRAM VESSEL B209
100E9 ; [.3A4A.0020.0002] # LINEAR B IDEOGRAM VESSEL B210
100EA ; [.3A4B.0020.0002] # LINEAR B IDEOGRAM VESSEL B211
100EB ; [.3A4C.0020.0002] # LINEAR B IDEOGRAM VESSEL B212
100EC ; [.3A4D.0020.0002] # LINEAR B IDEOGRAM VESSEL B213
100ED ; [.3A4E.0020.0002] # LINEAR B IDEOGRAM VESSEL B214
100EE ; [.3A4F.0020.0002] # LINEAR B IDEOGRAM VESSEL B215
100EF ; [.3A50.0020.0002] # LINEAR B IDEOGRAM VESSEL B216
100F0 ; [.3A51.0020.0002] # LINEAR B IDEOGRAM VESSEL B217
100F1 ; [.3A52.0020.0002] # LINEAR B IDEOGRAM VESSEL B218
100F2 ; [.3A53.0020.0002] # LINEAR B IDEOGRAM VESSEL B219
100F3 ; [.3A54.0020.0002] # LINEAR B IDEOGRAM VESSEL B221
100F4 ; [.3A55.0020.0002] # LINEAR B IDEOGRAM VESSEL B222
100F5 ; [.3A56.0020.0002] # LINEAR B IDEOGRAM VESSEL B226
100F6 ; [.3A57.0020.0002] # LINEAR B IDEOGRAM VESSEL B227
100F7 ; [.3A58.0020.0002] # LINEAR B IDEOGRAM VESSEL B228
100F8 ; [.3A59.0020.0002] # LINEAR B IDEOGRAM VESSEL B229
100F9 ; [.3A5A.0020.0002] # LINEAR B IDEOGRAM VESSEL B250
100FA ; [.3A5B.0020.0002] # LINEAR B IDEOGRAM VESSEL B305
10800 ; [.3A5C.0020.0002] # CYPRIOT SYLLABLE A
10801 ; [.3A5D.0020.0002] # CYPRIOT SYLLABLE E
10802 ; [.3A5E.0020.0002] # CYPRIOT SYLLABLE I
10803 ; [.3A5F.0020.0002] # CYPRIOT SYLLABLE O
10804 ; [.3A60.0020.0002] # CYPRIOT SYLLABLE U
10805 ; [.3A61.0020.0002] # CYPRIOT SYLLABLE JA
10808 ; [.3A62.0020.0002] # CYPRIOT SYLLABLE JO
1080A ; [.3A63.0020.0002] # CYPRIOT SYLLABLE KA
1080B ; [.3A64.0020.0002] # CYPRIOT SYLLABLE KE
1080C ; [.3A65.0020.0002] # CYPRIOT SYLLABLE KI
1080D ; [.3A66.0020.0002] # CYPRIOT SYLLABLE KO
1080E ; [.3A67.0020.0002] # CYPRIOT SYLLABLE KU
1080F ; [.3A68.0020.0002] # CYPRIOT SYLLABLE LA
10810 ; [.3A69.0020.0002] # CYPRIOT SYLLABLE LE
10811 ; [.3A6A.0020.0002] # CYPRIOT SYLLABLE LI
10812 ; [.3A6B.0020.0002] # CYPRIOT SYLLABLE LO
10813 ; [.3A6C.0020.0002] # CYPRIOT SYLLABLE LU
10814 ; [.3A6D.0020.0002] # CYPRIOT SYLLABLE MA
10815 ; [.3A6E.0020.0002] # CYPRIOT SYLLABLE ME
10816 ; [.3A6F.0020.0002] # CYPRIOT SYLLABLE MI
10817 ; [.3A70.0020.0002] # CYPRIOT SYLLABLE MO
10818 ; [.3A71.0020.0002] # CYPRIOT SYLLABLE MU
10819 ; [.3A72.0020.0002] # CYPRIOT SYLLABLE NA
1081A ; [.3A73.0020.0002] # CYPRIOT SYLLABLE NE
1081B ; [.3A74.0020.0002] # CYPRIOT SYLLABLE NI
1081C ; [.3A75.0020.0002] # CYPRIOT SYLLABLE NO
1081D ; [.3A76.0020.0002] # CYPRIOT SYLLABLE NU
1081E ; [.3A77.0020.0002] # CYPRIOT SYLLABLE PA
1081F ; [.3A78.0020.0002] # CYPRIOT SYLLABLE PE
10820 ; [.3A79.0020.0002] # CYPRIOT SYLLABLE PI
10821 ; [.3A7A.0020.0002] # CYPRIOT SYLLABLE PO
10822 ; [.3A7B.0020.0002] # CYPRIOT SYLLABLE PU
10823 ; [.3A7C.0020.0002] # CYPRIOT SYLLABLE RA
10824 ; [.3A7D.0020.0002] # CYPRIOT SYLLABLE RE
10825 ; [.3A7E.0020.0002] # CYPRIOT SYLLABLE RI
10826 ; [.3A7F.0020.0002] # CYPRIOT SYLLABLE RO
10827 ; [.3A80.0020.0002] # CYPRIOT SYLLABLE RU
10828 ; [.3A81.0020.0002] # CYPRIOT SYLLABLE SA
10829 ; [.3A82.0020.0002] # CYPRIOT SYLLABLE SE
1082A ; [.3A83.0020.0002] # CYPRIOT SYLLABLE SI
1082B ; [.3A84.0020.0002] # CYPRIOT SYLLABLE SO
1082C ; [.3A85.0020.0002] # CYPRIOT SYLLABLE SU
1082D ; [.3A86.0020.0002] # CYPRIOT SYLLABLE TA
1082E ; [.3A87.0020.0002] # CYPRIOT SYLLABLE TE
1082F ; [.3A88.0020.0002] # CYPRIOT SYLLABLE TI
10830 ; [.3A89.0020.0002] # CYPRIOT SYLLABLE TO
10831 ; [.3A8A.0020.0002] # CYPRIOT SYLLABLE TU
10832 ; [.3A8B.0020.0002] # CYPRIOT SYLLABLE WA
10833 ; [.3A8C.0020.0002] # CYPRIOT SYLLABLE WE
10834 ; [.3A8D.0020.0002] # CYPRIOT SYLLABLE WI
10835 ; [.3A8E.0020.0002] # CYPRIOT SYLLABLE WO
10837 ; [.3A8F.0020.0002] # CYPRIOT SYLLABLE XA
10838 ; [.3A90.0020.0002] # CYPRIOT SYLLABLE XE
1083C ; [.3A91.0020.0002] # CYPRIOT SYLLABLE ZA
1083F ; [.3A92.0020.0002] # CYPRIOT SYLLABLE ZO
10A60 ; [.3A93.0020.0002] # OLD SOUTH ARABIAN LETTER HE
10A61 ; [.3A94.0020.0002] # OLD SOUTH ARABIAN LETTER LAMEDH
10A62 ; [.3A95.0020.0002] # OLD SOUTH ARABIAN LETTER HETH
10A63 ; [.3A96.0020.0002] # OLD SOUTH ARABIAN LETTER MEM
10A64 ; [.3A97.0020.0002] # OLD SOUTH ARABIAN LETTER QOPH
10A65 ; [.3A98.0020.0002] # OLD SOUTH ARABIAN LETTER WAW
10A66 ; [.3A99.0020.0002] # OLD SOUTH ARABIAN LETTER SHIN
10A67 ; [.3A9A.0020.0002] # OLD SOUTH ARABIAN LETTER RESH
10A68 ; [.3A9B.0020.0002] # OLD SOUTH ARABIAN LETTER BETH
10A69 ; [.3A9C.0020.0002] # OLD SOUTH ARABIAN LETTER TAW
10A6A ; [.3A9D.0020.0002] # OLD SOUTH ARABIAN LETTER SAT
10A6B ; [.3A9E.0020.0002] # OLD SOUTH ARABIAN LETTER KAPH
10A6C ; [.3A9F.0020.0002] # OLD SOUTH ARABIAN LETTER NUN
10A6D ; [.3AA0.0020.0002] # OLD SOUTH ARABIAN LETTER KHETH
10A6E ; [.3AA1.0020.0002] # OLD SOUTH ARABIAN LETTER SADHE
10A6F ; [.3AA2.0020.0002] # OLD SOUTH ARABIAN LETTER SAMEKH
10A70 ; [.3AA3.0020.0002] # OLD SOUTH ARABIAN LETTER FE
10A71 ; [.3AA4.0020.0002] # OLD SOUTH ARABIAN LETTER ALEF
10A72 ; [.3AA5.0020.0002] # OLD SOUTH ARABIAN LETTER AYN
10A73 ; [.3AA6.0020.0002] # OLD SOUTH ARABIAN LETTER DHADHE
10A74 ; [.3AA7.0020.0002] # OLD SOUTH ARABIAN LETTER GIMEL
10A75 ; [.3AA8.0020.0002] # OLD SOUTH ARABIAN LETTER DALETH
10A76 ; [.3AA9.0020.0002] # OLD SOUTH ARABIAN LETTER GHAYN
10A77 ; [.3AAA.0020.0002] # OLD SOUTH ARABIAN LETTER TETH
10A78 ; [.3AAB.0020.0002] # OLD SOUTH ARABIAN LETTER ZAYN
10A79 ; [.3AAC.0020.0002] # OLD SOUTH ARABIAN LETTER DHALETH
10A7A ; [.3AAD.0020.0002] # OLD SOUTH ARABIAN LETTER YODH
10A7B ; [.3AAE.0020.0002] # OLD SOUTH ARABIAN LETTER THAW
10A7C ; [.3AAF.0020.0002] # OLD SOUTH ARABIAN LETTER THETH
10B00 ; [.3AB0.0020.0002] # AVESTAN LETTER A
10B01 ; [.3AB1.0020.0002] # AVESTAN LETTER AA
10B02 ; [.3AB2.0020.0002] # AVESTAN LETTER AO
10B03 ; [.3AB3.0020.0002] # AVESTAN LETTER AAO
10B04 ; [.3AB4.0020.0002] # AVESTAN LETTER AN
10B05 ; [.3AB5.0020.0002] # AVESTAN LETTER AAN
10B06 ; [.3AB6.0020.0002] # AVESTAN LETTER AE
10B07 ; [.3AB7.0020.0002] # AVESTAN LETTER AEE
10B08 ; [.3AB8.0020.0002] # AVESTAN LETTER E
10B09 ; [.3AB9.0020.0002] # AVESTAN LETTER EE
10B0A ; [.3ABA.0020.0002] # AVESTAN LETTER O
10B0B ; [.3ABB.0020.0002] # AVESTAN LETTER OO
10B0C ; [.3ABC.0020.0002] # AVESTAN LETTER I
10B0D ; [.3ABD.0020.0002] # AVESTAN LETTER II
10B0E ; [.3ABE.0020.0002] # AVESTAN LETTER U
10B0F ; [.3ABF.0020.0002] # AVESTAN LETTER UU
10B10 ; [.3AC0.0020.0002] # AVESTAN LETTER KE
10B11 ; [.3AC1.0020.0002] # AVESTAN LETTER XE
10B12 ; [.3AC2.0020.0002] # AVESTAN LETTER XYE
10B13 ; [.3AC3.0020.0002] # AVESTAN LETTER XVE
10B14 ; [.3AC4.0020.0002] # AVESTAN LETTER GE
10B15 ; [.3AC5.0020.0002] # AVESTAN LETTER GGE
10B16 ; [.3AC6.0020.0002] # AVESTAN LETTER GHE
10B17 ; [.3AC7.0020.0002] # AVESTAN LETTER CE
10B18 ; [.3AC8.0020.0002] # AVESTAN LETTER JE
10B19 ; [.3AC9.0020.0002] # AVESTAN LETTER TE
10B1A ; [.3ACA.0020.0002] # AVESTAN LETTER THE
10B1B ; [.3ACB.0020.0002] # AVESTAN LETTER DE
10B1C ; [.3ACC.0020.0002] # AVESTAN LETTER DHE
10B1D ; [.3ACD.0020.0002] # AVESTAN LETTER TTE
10B1E ; [.3ACE.0020.0002] # AVESTAN LETTER PE
10B1F ; [.3ACF.0020.0002] # AVESTAN LETTER FE
10B20 ; [.3AD0.0020.0002] # AVESTAN LETTER BE
10B21 ; [.3AD1.0020.0002] # AVESTAN LETTER BHE
10B22 ; [.3AD2.0020.0002] # AVESTAN LETTER NGE
10B23 ; [.3AD3.0020.0002] # AVESTAN LETTER NGYE
10B24 ; [.3AD4.0020.0002] # AVESTAN LETTER NGVE
10B25 ; [.3AD5.0020.0002] # AVESTAN LETTER NE
10B26 ; [.3AD6.0020.0002] # AVESTAN LETTER NYE
10B27 ; [.3AD7.0020.0002] # AVESTAN LETTER NNE
10B28 ; [.3AD8.0020.0002] # AVESTAN LETTER ME
10B29 ; [.3AD9.0020.0002] # AVESTAN LETTER HME
10B2A ; [.3ADA.0020.0002] # AVESTAN LETTER YYE
10B2B ; [.3ADB.0020.0002] # AVESTAN LETTER YE
10B2C ; [.3ADC.0020.0002] # AVESTAN LETTER VE
10B2D ; [.3ADD.0020.0002] # AVESTAN LETTER RE
10B2E ; [.3ADD.0020.0004][.0000.00FC.0004] # AVESTAN LETTER LE
10B2F ; [.3ADE.0020.0002] # AVESTAN LETTER SE
10B30 ; [.3ADF.0020.0002] # AVESTAN LETTER ZE
10B31 ; [.3AE0.0020.0002] # AVESTAN LETTER SHE
10B32 ; [.3AE1.0020.0002] # AVESTAN LETTER ZHE
10B33 ; [.3AE2.0020.0002] # AVESTAN LETTER SHYE
10B34 ; [.3AE3.0020.0002] # AVESTAN LETTER SSHE
10B35 ; [.3AE4.0020.0002] # AVESTAN LETTER HE
10840 ; [.3AE5.0020.0002] # IMPERIAL ARAMAIC LETTER ALEPH
10841 ; [.3AE6.0020.0002] # IMPERIAL ARAMAIC LETTER BETH
10842 ; [.3AE7.0020.0002] # IMPERIAL ARAMAIC LETTER GIMEL
10843 ; [.3AE8.0020.0002] # IMPERIAL ARAMAIC LETTER DALETH
10844 ; [.3AE9.0020.0002] # IMPERIAL ARAMAIC LETTER HE
10845 ; [.3AEA.0020.0002] # IMPERIAL ARAMAIC LETTER WAW
10846 ; [.3AEB.0020.0002] # IMPERIAL ARAMAIC LETTER ZAYIN
10847 ; [.3AEC.0020.0002] # IMPERIAL ARAMAIC LETTER HETH
10848 ; [.3AED.0020.0002] # IMPERIAL ARAMAIC LETTER TETH
10849 ; [.3AEE.0020.0002] # IMPERIAL ARAMAIC LETTER YODH
1084A ; [.3AEF.0020.0002] # IMPERIAL ARAMAIC LETTER KAPH
1084B ; [.3AF0.0020.0002] # IMPERIAL ARAMAIC LETTER LAMEDH
1084C ; [.3AF1.0020.0002] # IMPERIAL ARAMAIC LETTER MEM
1084D ; [.3AF2.0020.0002] # IMPERIAL ARAMAIC LETTER NUN
1084E ; [.3AF3.0020.0002] # IMPERIAL ARAMAIC LETTER SAMEKH
1084F ; [.3AF4.0020.0002] # IMPERIAL ARAMAIC LETTER AYIN
10850 ; [.3AF5.0020.0002] # IMPERIAL ARAMAIC LETTER PE
10851 ; [.3AF6.0020.0002] # IMPERIAL ARAMAIC LETTER SADHE
10852 ; [.3AF7.0020.0002] # IMPERIAL ARAMAIC LETTER QOPH
10853 ; [.3AF8.0020.0002] # IMPERIAL ARAMAIC LETTER RESH
10854 ; [.3AF9.0020.0002] # IMPERIAL ARAMAIC LETTER SHIN
10855 ; [.3AFA.0020.0002] # IMPERIAL ARAMAIC LETTER TAW
10B40 ; [.3AFB.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER ALEPH
10B41 ; [.3AFC.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER BETH
10B42 ; [.3AFD.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER GIMEL
10B43 ; [.3AFE.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER DALETH
10B44 ; [.3AFF.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER HE
10B45 ; [.3B00.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER WAW
10B46 ; [.3B01.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER ZAYIN
10B47 ; [.3B02.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER HETH
10B48 ; [.3B03.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER TETH
10B49 ; [.3B04.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER YODH
10B4A ; [.3B05.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER KAPH
10B4B ; [.3B06.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER LAMEDH
10B4C ; [.3B07.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER MEM
10B4D ; [.3B08.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER NUN
10B4E ; [.3B09.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER SAMEKH
10B4F ; [.3B0A.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER AYIN
10B50 ; [.3B0B.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER PE
10B51 ; [.3B0C.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER SADHE
10B52 ; [.3B0D.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER QOPH
10B53 ; [.3B0E.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER RESH
10B54 ; [.3B0F.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER SHIN
10B55 ; [.3B10.0020.0002] # INSCRIPTIONAL PARTHIAN LETTER TAW
10B60 ; [.3B11.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER ALEPH
10B61 ; [.3B12.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER BETH
10B62 ; [.3B13.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER GIMEL
10B63 ; [.3B14.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER DALETH
10B64 ; [.3B15.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER HE
10B65 ; [.3B16.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER WAW-AYIN-RESH
10B66 ; [.3B17.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER ZAYIN
10B67 ; [.3B18.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER HETH
10B68 ; [.3B19.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER TETH
10B69 ; [.3B1A.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER YODH
10B6A ; [.3B1B.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER KAPH
10B6B ; [.3B1C.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER LAMEDH
10B6C ; [.3B1D.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER MEM-QOPH
10B6D ; [.3B1E.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER NUN
10B6E ; [.3B1F.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER SAMEKH
10B6F ; [.3B20.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER PE
10B70 ; [.3B21.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER SADHE
10B71 ; [.3B22.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER SHIN
10B72 ; [.3B23.0020.0002] # INSCRIPTIONAL PAHLAVI LETTER TAW
10380 ; [.3B24.0020.0002] # UGARITIC LETTER ALPA
10381 ; [.3B25.0020.0002] # UGARITIC LETTER BETA
10382 ; [.3B26.0020.0002] # UGARITIC LETTER GAMLA
10383 ; [.3B27.0020.0002] # UGARITIC LETTER KHA
10384 ; [.3B28.0020.0002] # UGARITIC LETTER DELTA
10385 ; [.3B29.0020.0002] # UGARITIC LETTER HO
10386 ; [.3B2A.0020.0002] # UGARITIC LETTER WO
10387 ; [.3B2B.0020.0002] # UGARITIC LETTER ZETA
10388 ; [.3B2C.0020.0002] # UGARITIC LETTER HOTA
10389 ; [.3B2D.0020.0002] # UGARITIC LETTER TET
1038A ; [.3B2E.0020.0002] # UGARITIC LETTER YOD
1038B ; [.3B2F.0020.0002] # UGARITIC LETTER KAF
1038C ; [.3B30.0020.0002] # UGARITIC LETTER SHIN
1038D ; [.3B31.0020.0002] # UGARITIC LETTER LAMDA
1038E ; [.3B32.0020.0002] # UGARITIC LETTER MEM
1038F ; [.3B33.0020.0002] # UGARITIC LETTER DHAL
10390 ; [.3B34.0020.0002] # UGARITIC LETTER NUN
10391 ; [.3B35.0020.0002] # UGARITIC LETTER ZU
10392 ; [.3B36.0020.0002] # UGARITIC LETTER SAMKA
10393 ; [.3B37.0020.0002] # UGARITIC LETTER AIN
10394 ; [.3B38.0020.0002] # UGARITIC LETTER PU
10395 ; [.3B39.0020.0002] # UGARITIC LETTER SADE
10396 ; [.3B3A.0020.0002] # UGARITIC LETTER QOPA
10397 ; [.3B3B.0020.0002] # UGARITIC LETTER RASHA
10398 ; [.3B3C.0020.0002] # UGARITIC LETTER THANNA
10399 ; [.3B3D.0020.0002] # UGARITIC LETTER GHAIN
1039A ; [.3B3E.0020.0002] # UGARITIC LETTER TO
1039B ; [.3B3F.0020.0002] # UGARITIC LETTER I
1039C ; [.3B40.0020.0002] # UGARITIC LETTER U
1039D ; [.3B41.0020.0002] # UGARITIC LETTER SSU
103A0 ; [.3B42.0020.0002] # OLD PERSIAN SIGN A
103A1 ; [.3B43.0020.0002] # OLD PERSIAN SIGN I
103A2 ; [.3B44.0020.0002] # OLD PERSIAN SIGN U
103A3 ; [.3B45.0020.0002] # OLD PERSIAN SIGN KA
103A4 ; [.3B46.0020.0002] # OLD PERSIAN SIGN KU
103A5 ; [.3B47.0020.0002] # OLD PERSIAN SIGN GA
103A6 ; [.3B48.0020.0002] # OLD PERSIAN SIGN GU
103A7 ; [.3B49.0020.0002] # OLD PERSIAN SIGN XA
103A8 ; [.3B4A.0020.0002] # OLD PERSIAN SIGN CA
103A9 ; [.3B4B.0020.0002] # OLD PERSIAN SIGN JA
103AA ; [.3B4C.0020.0002] # OLD PERSIAN SIGN JI
103AB ; [.3B4D.0020.0002] # OLD PERSIAN SIGN TA
103AC ; [.3B4E.0020.0002] # OLD PERSIAN SIGN TU
103AD ; [.3B4F.0020.0002] # OLD PERSIAN SIGN DA
103AE ; [.3B50.0020.0002] # OLD PERSIAN SIGN DI
103AF ; [.3B51.0020.0002] # OLD PERSIAN SIGN DU
103B0 ; [.3B52.0020.0002] # OLD PERSIAN SIGN THA
103B1 ; [.3B53.0020.0002] # OLD PERSIAN SIGN PA
103B2 ; [.3B54.0020.0002] # OLD PERSIAN SIGN BA
103B3 ; [.3B55.0020.0002] # OLD PERSIAN SIGN FA
103B4 ; [.3B56.0020.0002] # OLD PERSIAN SIGN NA
103B5 ; [.3B57.0020.0002] # OLD PERSIAN SIGN NU
103B6 ; [.3B58.0020.0002] # OLD PERSIAN SIGN MA
103B7 ; [.3B59.0020.0002] # OLD PERSIAN SIGN MI
103B8 ; [.3B5A.0020.0002] # OLD PERSIAN SIGN MU
103B9 ; [.3B5B.0020.0002] # OLD PERSIAN SIGN YA
103BA ; [.3B5C.0020.0002] # OLD PERSIAN SIGN VA
103BB ; [.3B5D.0020.0002] # OLD PERSIAN SIGN VI
103BC ; [.3B5E.0020.0002] # OLD PERSIAN SIGN RA
103BD ; [.3B5F.0020.0002] # OLD PERSIAN SIGN RU
103BE ; [.3B60.0020.0002] # OLD PERSIAN SIGN LA
103BF ; [.3B61.0020.0002] # OLD PERSIAN SIGN SA
103C0 ; [.3B62.0020.0002] # OLD PERSIAN SIGN ZA
103C1 ; [.3B63.0020.0002] # OLD PERSIAN SIGN SHA
103C2 ; [.3B64.0020.0002] # OLD PERSIAN SIGN SSA
103C3 ; [.3B65.0020.0002] # OLD PERSIAN SIGN HA
103C8 ; [.3B66.0020.0002] # OLD PERSIAN SIGN AURAMAZDAA
103C9 ; [.3B67.0020.0002] # OLD PERSIAN SIGN AURAMAZDAA-2
103CA ; [.3B68.0020.0002] # OLD PERSIAN SIGN AURAMAZDAAHA
103CB ; [.3B69.0020.0002] # OLD PERSIAN SIGN XSHAAYATHIYA
103CC ; [.3B6A.0020.0002] # OLD PERSIAN SIGN DAHYAAUSH
103CD ; [.3B6B.0020.0002] # OLD PERSIAN SIGN DAHYAAUSH-2
103CE ; [.3B6C.0020.0002] # OLD PERSIAN SIGN BAGA
103CF ; [.3B6D.0020.0002] # OLD PERSIAN SIGN BUUMISH
12000 ; [.3B6E.0020.0002] # CUNEIFORM SIGN A
12001 ; [.3B6F.0020.0002] # CUNEIFORM SIGN A TIMES A
12002 ; [.3B70.0020.0002] # CUNEIFORM SIGN A TIMES BAD
12003 ; [.3B71.0020.0002] # CUNEIFORM SIGN A TIMES GAN2 TENU
12004 ; [.3B72.0020.0002] # CUNEIFORM SIGN A TIMES HA
12005 ; [.3B73.0020.0002] # CUNEIFORM SIGN A TIMES IGI
12006 ; [.3B74.0020.0002] # CUNEIFORM SIGN A TIMES LAGAR GUNU
12007 ; [.3B75.0020.0002] # CUNEIFORM SIGN A TIMES MUSH
12008 ; [.3B76.0020.0002] # CUNEIFORM SIGN A TIMES SAG
12009 ; [.3B77.0020.0002] # CUNEIFORM SIGN A2
1200A ; [.3B78.0020.0002] # CUNEIFORM SIGN AB
1200B ; [.3B79.0020.0002] # CUNEIFORM SIGN AB TIMES ASH2
1200C ; [.3B7A.0020.0002] # CUNEIFORM SIGN AB TIMES DUN3 GUNU
1200D ; [.3B7B.0020.0002] # CUNEIFORM SIGN AB TIMES GAL
1200E ; [.3B7C.0020.0002] # CUNEIFORM SIGN AB TIMES GAN2 TENU
1200F ; [.3B7D.0020.0002] # CUNEIFORM SIGN AB TIMES HA
12010 ; [.3B7E.0020.0002] # CUNEIFORM SIGN AB TIMES IGI GUNU
12011 ; [.3B7F.0020.0002] # CUNEIFORM SIGN AB TIMES IMIN
12012 ; [.3B80.0020.0002] # CUNEIFORM SIGN AB TIMES LAGAB
12013 ; [.3B81.0020.0002] # CUNEIFORM SIGN AB TIMES SHESH
12014 ; [.3B82.0020.0002] # CUNEIFORM SIGN AB TIMES U PLUS U PLUS U
12015 ; [.3B83.0020.0002] # CUNEIFORM SIGN AB GUNU
12016 ; [.3B84.0020.0002] # CUNEIFORM SIGN AB2
12017 ; [.3B85.0020.0002] # CUNEIFORM SIGN AB2 TIMES BALAG
12018 ; [.3B86.0020.0002] # CUNEIFORM SIGN AB2 TIMES GAN2 TENU
12019 ; [.3B87.0020.0002] # CUNEIFORM SIGN AB2 TIMES ME PLUS EN
1201A ; [.3B88.0020.0002] # CUNEIFORM SIGN AB2 TIMES SHA3
1201B ; [.3B89.0020.0002] # CUNEIFORM SIGN AB2 TIMES TAK4
1201C ; [.3B8A.0020.0002] # CUNEIFORM SIGN AD
1201D ; [.3B8B.0020.0002] # CUNEIFORM SIGN AK
1201E ; [.3B8C.0020.0002] # CUNEIFORM SIGN AK TIMES ERIN2
1201F ; [.3B8D.0020.0002] # CUNEIFORM SIGN AK TIMES SHITA PLUS GISH
12020 ; [.3B8E.0020.0002] # CUNEIFORM SIGN AL
12021 ; [.3B8F.0020.0002] # CUNEIFORM SIGN AL TIMES AL
12022 ; [.3B90.0020.0002] # CUNEIFORM SIGN AL TIMES DIM2
12023 ; [.3B91.0020.0002] # CUNEIFORM SIGN AL TIMES GISH
12024 ; [.3B92.0020.0002] # CUNEIFORM SIGN AL TIMES HA
12025 ; [.3B93.0020.0002] # CUNEIFORM SIGN AL TIMES KAD3
12026 ; [.3B94.0020.0002] # CUNEIFORM SIGN AL TIMES KI
12027 ; [.3B95.0020.0002] # CUNEIFORM SIGN AL TIMES SHE
12028 ; [.3B96.0020.0002] # CUNEIFORM SIGN AL TIMES USH
12029 ; [.3B97.0020.0002] # CUNEIFORM SIGN ALAN
1202A ; [.3B98.0020.0002] # CUNEIFORM SIGN ALEPH
1202B ; [.3B99.0020.0002] # CUNEIFORM SIGN AMAR
1202C ; [.3B9A.0020.0002] # CUNEIFORM SIGN AMAR TIMES SHE
1202D ; [.3B9B.0020.0002] # CUNEIFORM SIGN AN
1202E ; [.3B9C.0020.0002] # CUNEIFORM SIGN AN OVER AN
1202F ; [.3B9D.0020.0002] # CUNEIFORM SIGN AN THREE TIMES
12030 ; [.3B9E.0020.0002] # CUNEIFORM SIGN AN PLUS NAGA OPPOSING AN PLUS NAGA
12031 ; [.3B9F.0020.0002] # CUNEIFORM SIGN AN PLUS NAGA SQUARED
12032 ; [.3BA0.0020.0002] # CUNEIFORM SIGN ANSHE
12033 ; [.3BA1.0020.0002] # CUNEIFORM SIGN APIN
12034 ; [.3BA2.0020.0002] # CUNEIFORM SIGN ARAD
12035 ; [.3BA3.0020.0002] # CUNEIFORM SIGN ARAD TIMES KUR
12036 ; [.3BA4.0020.0002] # CUNEIFORM SIGN ARKAB
12037 ; [.3BA5.0020.0002] # CUNEIFORM SIGN ASAL2
12038 ; [.3BA6.0020.0002] # CUNEIFORM SIGN ASH
12039 ; [.3BA7.0020.0002] # CUNEIFORM SIGN ASH ZIDA TENU
1203A ; [.3BA8.0020.0002] # CUNEIFORM SIGN ASH KABA TENU
1203B ; [.3BA9.0020.0002] # CUNEIFORM SIGN ASH OVER ASH TUG2 OVER TUG2 TUG2 OVER TUG2 PAP
1203C ; [.3BAA.0020.0002] # CUNEIFORM SIGN ASH OVER ASH OVER ASH
1203D ; [.3BAB.0020.0002] # CUNEIFORM SIGN ASH OVER ASH OVER ASH CROSSING ASH OVER ASH OVER ASH
1203E ; [.3BAC.0020.0002] # CUNEIFORM SIGN ASH2
1203F ; [.3BAD.0020.0002] # CUNEIFORM SIGN ASHGAB
12040 ; [.3BAE.0020.0002] # CUNEIFORM SIGN BA
12041 ; [.3BAF.0020.0002] # CUNEIFORM SIGN BAD
12042 ; [.3BB0.0020.0002] # CUNEIFORM SIGN BAG3
12043 ; [.3BB1.0020.0002] # CUNEIFORM SIGN BAHAR2
12044 ; [.3BB2.0020.0002] # CUNEIFORM SIGN BAL
12045 ; [.3BB3.0020.0002] # CUNEIFORM SIGN BAL OVER BAL
12046 ; [.3BB4.0020.0002] # CUNEIFORM SIGN BALAG
12047 ; [.3BB5.0020.0002] # CUNEIFORM SIGN BAR
12048 ; [.3BB6.0020.0002] # CUNEIFORM SIGN BARA2
12049 ; [.3BB7.0020.0002] # CUNEIFORM SIGN BI
1204A ; [.3BB8.0020.0002] # CUNEIFORM SIGN BI TIMES A
1204B ; [.3BB9.0020.0002] # CUNEIFORM SIGN BI TIMES GAR
1204C ; [.3BBA.0020.0002] # CUNEIFORM SIGN BI TIMES IGI GUNU
1204D ; [.3BBB.0020.0002] # CUNEIFORM SIGN BU
1204E ; [.3BBC.0020.0002] # CUNEIFORM SIGN BU OVER BU AB
1204F ; [.3BBD.0020.0002] # CUNEIFORM SIGN BU OVER BU UN
12050 ; [.3BBE.0020.0002] # CUNEIFORM SIGN BU CROSSING BU
12051 ; [.3BBF.0020.0002] # CUNEIFORM SIGN BULUG
12052 ; [.3BC0.0020.0002] # CUNEIFORM SIGN BULUG OVER BULUG
12053 ; [.3BC1.0020.0002] # CUNEIFORM SIGN BUR
12054 ; [.3BC2.0020.0002] # CUNEIFORM SIGN BUR2
12055 ; [.3BC3.0020.0002] # CUNEIFORM SIGN DA
12056 ; [.3BC4.0020.0002] # CUNEIFORM SIGN DAG
12057 ; [.3BC5.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES A PLUS MASH
12058 ; [.3BC6.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES AMAR
12059 ; [.3BC7.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES BALAG
1205A ; [.3BC8.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES BI
1205B ; [.3BC9.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES GA
1205C ; [.3BCA.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES GA PLUS MASH
1205D ; [.3BCB.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES GI
1205E ; [.3BCC.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES GIR2
1205F ; [.3BCD.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES GUD
12060 ; [.3BCE.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES HA
12061 ; [.3BCF.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES IR
12062 ; [.3BD0.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES IR PLUS LU
12063 ; [.3BD1.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES KAK
12064 ; [.3BD2.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES LA
12065 ; [.3BD3.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES LU
12066 ; [.3BD4.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES LU PLUS MASH2
12067 ; [.3BD5.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES LUM
12068 ; [.3BD6.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES NE
12069 ; [.3BD7.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES PAP PLUS PAP
1206A ; [.3BD8.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES SI
1206B ; [.3BD9.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES TAK4
1206C ; [.3BDA.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES U2 PLUS GIR2
1206D ; [.3BDB.0020.0002] # CUNEIFORM SIGN DAG KISIM5 TIMES USH
1206E ; [.3BDC.0020.0002] # CUNEIFORM SIGN DAM
1206F ; [.3BDD.0020.0002] # CUNEIFORM SIGN DAR
12070 ; [.3BDE.0020.0002] # CUNEIFORM SIGN DARA3
12071 ; [.3BDF.0020.0002] # CUNEIFORM SIGN DARA4
12072 ; [.3BE0.0020.0002] # CUNEIFORM SIGN DI
12073 ; [.3BE1.0020.0002] # CUNEIFORM SIGN DIB
12074 ; [.3BE2.0020.0002] # CUNEIFORM SIGN DIM
12075 ; [.3BE3.0020.0002] # CUNEIFORM SIGN DIM TIMES SHE
12076 ; [.3BE4.0020.0002] # CUNEIFORM SIGN DIM2
12077 ; [.3BE5.0020.0002] # CUNEIFORM SIGN DIN
12078 ; [.3BE6.0020.0002] # CUNEIFORM SIGN DIN KASKAL U GUNU DISH
12079 ; [.3BE7.0020.0002] # CUNEIFORM SIGN DISH
1207A ; [.3BE8.0020.0002] # CUNEIFORM SIGN DU
1207B ; [.3BE9.0020.0002] # CUNEIFORM SIGN DU OVER DU
1207C ; [.3BEA.0020.0002] # CUNEIFORM SIGN DU GUNU
1207D ; [.3BEB.0020.0002] # CUNEIFORM SIGN DU SHESHIG
1207E ; [.3BEC.0020.0002] # CUNEIFORM SIGN DUB
1207F ; [.3BED.0020.0002] # CUNEIFORM SIGN DUB TIMES ESH2
12080 ; [.3BEE.0020.0002] # CUNEIFORM SIGN DUB2
12081 ; [.3BEF.0020.0002] # CUNEIFORM SIGN DUG
12082 ; [.3BF0.0020.0002] # CUNEIFORM SIGN DUGUD
12083 ; [.3BF1.0020.0002] # CUNEIFORM SIGN DUH
12084 ; [.3BF2.0020.0002] # CUNEIFORM SIGN DUN
12085 ; [.3BF3.0020.0002] # CUNEIFORM SIGN DUN3
12086 ; [.3BF4.0020.0002] # CUNEIFORM SIGN DUN3 GUNU
12087 ; [.3BF5.0020.0002] # CUNEIFORM SIGN DUN3 GUNU GUNU
12088 ; [.3BF6.0020.0002] # CUNEIFORM SIGN DUN4
12089 ; [.3BF7.0020.0002] # CUNEIFORM SIGN DUR2
1208A ; [.3BF8.0020.0002] # CUNEIFORM SIGN E
1208B ; [.3BF9.0020.0002] # CUNEIFORM SIGN E TIMES PAP
1208C ; [.3BFA.0020.0002] # CUNEIFORM SIGN E OVER E NUN OVER NUN
1208D ; [.3BFB.0020.0002] # CUNEIFORM SIGN E2
1208E ; [.3BFC.0020.0002] # CUNEIFORM SIGN E2 TIMES A PLUS HA PLUS DA
1208F ; [.3BFD.0020.0002] # CUNEIFORM SIGN E2 TIMES GAR
12090 ; [.3BFE.0020.0002] # CUNEIFORM SIGN E2 TIMES MI
12091 ; [.3BFF.0020.0002] # CUNEIFORM SIGN E2 TIMES SAL
12092 ; [.3C00.0020.0002] # CUNEIFORM SIGN E2 TIMES SHE
12093 ; [.3C01.0020.0002] # CUNEIFORM SIGN E2 TIMES U
12094 ; [.3C02.0020.0002] # CUNEIFORM SIGN EDIN
12095 ; [.3C03.0020.0002] # CUNEIFORM SIGN EGIR
12096 ; [.3C04.0020.0002] # CUNEIFORM SIGN EL
12097 ; [.3C05.0020.0002] # CUNEIFORM SIGN EN
12098 ; [.3C06.0020.0002] # CUNEIFORM SIGN EN TIMES GAN2
12099 ; [.3C07.0020.0002] # CUNEIFORM SIGN EN TIMES GAN2 TENU
1209A ; [.3C08.0020.0002] # CUNEIFORM SIGN EN TIMES ME
1209B ; [.3C09.0020.0002] # CUNEIFORM SIGN EN CROSSING EN
1209C ; [.3C0A.0020.0002] # CUNEIFORM SIGN EN OPPOSING EN
1209D ; [.3C0B.0020.0002] # CUNEIFORM SIGN EN SQUARED
1209E ; [.3C0C.0020.0002] # CUNEIFORM SIGN EREN
1209F ; [.3C0D.0020.0002] # CUNEIFORM SIGN ERIN2
120A0 ; [.3C0E.0020.0002] # CUNEIFORM SIGN ESH2
120A1 ; [.3C0F.0020.0002] # CUNEIFORM SIGN EZEN
120A2 ; [.3C10.0020.0002] # CUNEIFORM SIGN EZEN TIMES A
120A3 ; [.3C11.0020.0002] # CUNEIFORM SIGN EZEN TIMES A PLUS LAL
120A4 ; [.3C12.0020.0002] # CUNEIFORM SIGN EZEN TIMES A PLUS LAL TIMES LAL
120A5 ; [.3C13.0020.0002] # CUNEIFORM SIGN EZEN TIMES AN
120A6 ; [.3C14.0020.0002] # CUNEIFORM SIGN EZEN TIMES BAD
120A7 ; [.3C15.0020.0002] # CUNEIFORM SIGN EZEN TIMES DUN3 GUNU
120A8 ; [.3C16.0020.0002] # CUNEIFORM SIGN EZEN TIMES DUN3 GUNU GUNU
120A9 ; [.3C17.0020.0002] # CUNEIFORM SIGN EZEN TIMES HA
120AA ; [.3C18.0020.0002] # CUNEIFORM SIGN EZEN TIMES HA GUNU
120AB ; [.3C19.0020.0002] # CUNEIFORM SIGN EZEN TIMES IGI GUNU
120AC ; [.3C1A.0020.0002] # CUNEIFORM SIGN EZEN TIMES KASKAL
120AD ; [.3C1B.0020.0002] # CUNEIFORM SIGN EZEN TIMES KASKAL SQUARED
120AE ; [.3C1C.0020.0002] # CUNEIFORM SIGN EZEN TIMES KU3
120AF ; [.3C1D.0020.0002] # CUNEIFORM SIGN EZEN TIMES LA
120B0 ; [.3C1E.0020.0002] # CUNEIFORM SIGN EZEN TIMES LAL TIMES LAL
120B1 ; [.3C1F.0020.0002] # CUNEIFORM SIGN EZEN TIMES LI
120B2 ; [.3C20.0020.0002] # CUNEIFORM SIGN EZEN TIMES LU
120B3 ; [.3C21.0020.0002] # CUNEIFORM SIGN EZEN TIMES U2
120B4 ; [.3C22.0020.0002] # CUNEIFORM SIGN EZEN TIMES UD
120B5 ; [.3C23.0020.0002] # CUNEIFORM SIGN GA
120B6 ; [.3C24.0020.0002] # CUNEIFORM SIGN GA GUNU
120B7 ; [.3C25.0020.0002] # CUNEIFORM SIGN GA2
120B8 ; [.3C26.0020.0002] # CUNEIFORM SIGN GA2 TIMES A PLUS DA PLUS HA
120B9 ; [.3C27.0020.0002] # CUNEIFORM SIGN GA2 TIMES A PLUS HA
120BA ; [.3C28.0020.0002] # CUNEIFORM SIGN GA2 TIMES A PLUS IGI
120BB ; [.3C29.0020.0002] # CUNEIFORM SIGN GA2 TIMES AB2 TENU PLUS TAB
120BC ; [.3C2A.0020.0002] # CUNEIFORM SIGN GA2 TIMES AN
120BD ; [.3C2B.0020.0002] # CUNEIFORM SIGN GA2 TIMES ASH
120BE ; [.3C2C.0020.0002] # CUNEIFORM SIGN GA2 TIMES ASH2 PLUS GAL
120BF ; [.3C2D.0020.0002] # CUNEIFORM SIGN GA2 TIMES BAD
120C0 ; [.3C2E.0020.0002] # CUNEIFORM SIGN GA2 TIMES BAR PLUS RA
120C1 ; [.3C2F.0020.0002] # CUNEIFORM SIGN GA2 TIMES BUR
120C2 ; [.3C30.0020.0002] # CUNEIFORM SIGN GA2 TIMES BUR PLUS RA
120C3 ; [.3C31.0020.0002] # CUNEIFORM SIGN GA2 TIMES DA
120C4 ; [.3C32.0020.0002] # CUNEIFORM SIGN GA2 TIMES DI
120C5 ; [.3C33.0020.0002] # CUNEIFORM SIGN GA2 TIMES DIM TIMES SHE
120C6 ; [.3C34.0020.0002] # CUNEIFORM SIGN GA2 TIMES DUB
120C7 ; [.3C35.0020.0002] # CUNEIFORM SIGN GA2 TIMES EL
120C8 ; [.3C36.0020.0002] # CUNEIFORM SIGN GA2 TIMES EL PLUS LA
120C9 ; [.3C37.0020.0002] # CUNEIFORM SIGN GA2 TIMES EN
120CA ; [.3C38.0020.0002] # CUNEIFORM SIGN GA2 TIMES EN TIMES GAN2 TENU
120CB ; [.3C39.0020.0002] # CUNEIFORM SIGN GA2 TIMES GAN2 TENU
120CC ; [.3C3A.0020.0002] # CUNEIFORM SIGN GA2 TIMES GAR
120CD ; [.3C3B.0020.0002] # CUNEIFORM SIGN GA2 TIMES GI
120CE ; [.3C3C.0020.0002] # CUNEIFORM SIGN GA2 TIMES GI4
120CF ; [.3C3D.0020.0002] # CUNEIFORM SIGN GA2 TIMES GI4 PLUS A
120D0 ; [.3C3E.0020.0002] # CUNEIFORM SIGN GA2 TIMES GIR2 PLUS SU
120D1 ; [.3C3F.0020.0002] # CUNEIFORM SIGN GA2 TIMES HA PLUS LU PLUS ESH2
120D2 ; [.3C40.0020.0002] # CUNEIFORM SIGN GA2 TIMES HAL
120D3 ; [.3C41.0020.0002] # CUNEIFORM SIGN GA2 TIMES HAL PLUS LA
120D4 ; [.3C42.0020.0002] # CUNEIFORM SIGN GA2 TIMES HI PLUS LI
120D5 ; [.3C43.0020.0002] # CUNEIFORM SIGN GA2 TIMES HUB2
120D6 ; [.3C44.0020.0002] # CUNEIFORM SIGN GA2 TIMES IGI GUNU
120D7 ; [.3C45.0020.0002] # CUNEIFORM SIGN GA2 TIMES ISH PLUS HU PLUS ASH
120D8 ; [.3C46.0020.0002] # CUNEIFORM SIGN GA2 TIMES KAK
120D9 ; [.3C47.0020.0002] # CUNEIFORM SIGN GA2 TIMES KASKAL
120DA ; [.3C48.0020.0002] # CUNEIFORM SIGN GA2 TIMES KID
120DB ; [.3C49.0020.0002] # CUNEIFORM SIGN GA2 TIMES KID PLUS LAL
120DC ; [.3C4A.0020.0002] # CUNEIFORM SIGN GA2 TIMES KU3 PLUS AN
120DD ; [.3C4B.0020.0002] # CUNEIFORM SIGN GA2 TIMES LA
120DE ; [.3C4C.0020.0002] # CUNEIFORM SIGN GA2 TIMES ME PLUS EN
120DF ; [.3C4D.0020.0002] # CUNEIFORM SIGN GA2 TIMES MI
120E0 ; [.3C4E.0020.0002] # CUNEIFORM SIGN GA2 TIMES NUN
120E1 ; [.3C4F.0020.0002] # CUNEIFORM SIGN GA2 TIMES NUN OVER NUN
120E2 ; [.3C50.0020.0002] # CUNEIFORM SIGN GA2 TIMES PA
120E3 ; [.3C51.0020.0002] # CUNEIFORM SIGN GA2 TIMES SAL
120E4 ; [.3C52.0020.0002] # CUNEIFORM SIGN GA2 TIMES SAR
120E5 ; [.3C53.0020.0002] # CUNEIFORM SIGN GA2 TIMES SHE
120E6 ; [.3C54.0020.0002] # CUNEIFORM SIGN GA2 TIMES SHE PLUS TUR
120E7 ; [.3C55.0020.0002] # CUNEIFORM SIGN GA2 TIMES SHID
120E8 ; [.3C56.0020.0002] # CUNEIFORM SIGN GA2 TIMES SUM
120E9 ; [.3C57.0020.0002] # CUNEIFORM SIGN GA2 TIMES TAK4
120EA ; [.3C58.0020.0002] # CUNEIFORM SIGN GA2 TIMES U
120EB ; [.3C59.0020.0002] # CUNEIFORM SIGN GA2 TIMES UD
120EC ; [.3C5A.0020.0002] # CUNEIFORM SIGN GA2 TIMES UD PLUS DU
120ED ; [.3C5B.0020.0002] # CUNEIFORM SIGN GA2 OVER GA2
120EE ; [.3C5C.0020.0002] # CUNEIFORM SIGN GABA
120EF ; [.3C5D.0020.0002] # CUNEIFORM SIGN GABA CROSSING GABA
120F0 ; [.3C5E.0020.0002] # CUNEIFORM SIGN GAD
120F1 ; [.3C5F.0020.0002] # CUNEIFORM SIGN GAD OVER GAD GAR OVER GAR
120F2 ; [.3C60.0020.0002] # CUNEIFORM SIGN GAL
120F3 ; [.3C61.0020.0002] # CUNEIFORM SIGN GAL GAD OVER GAD GAR OVER GAR
120F4 ; [.3C62.0020.0002] # CUNEIFORM SIGN GALAM
120F5 ; [.3C63.0020.0002] # CUNEIFORM SIGN GAM
120F6 ; [.3C64.0020.0002] # CUNEIFORM SIGN GAN
120F7 ; [.3C65.0020.0002] # CUNEIFORM SIGN GAN2
120F8 ; [.3C66.0020.0002] # CUNEIFORM SIGN GAN2 TENU
120F9 ; [.3C67.0020.0002] # CUNEIFORM SIGN GAN2 OVER GAN2
120FA ; [.3C68.0020.0002] # CUNEIFORM SIGN GAN2 CROSSING GAN2
120FB ; [.3C69.0020.0002] # CUNEIFORM SIGN GAR
120FC ; [.3C6A.0020.0002] # CUNEIFORM SIGN GAR3
120FD ; [.3C6B.0020.0002] # CUNEIFORM SIGN GASHAN
120FE ; [.3C6C.0020.0002] # CUNEIFORM SIGN GESHTIN
120FF ; [.3C6D.0020.0002] # CUNEIFORM SIGN GESHTIN TIMES KUR
12100 ; [.3C6E.0020.0002] # CUNEIFORM SIGN GI
12101 ; [.3C6F.0020.0002] # CUNEIFORM SIGN GI TIMES E
12102 ; [.3C70.0020.0002] # CUNEIFORM SIGN GI TIMES U
12103 ; [.3C71.0020.0002] # CUNEIFORM SIGN GI CROSSING GI
12104 ; [.3C72.0020.0002] # CUNEIFORM SIGN GI4
12105 ; [.3C73.0020.0002] # CUNEIFORM SIGN GI4 OVER GI4
12106 ; [.3C74.0020.0002] # CUNEIFORM SIGN GI4 CROSSING GI4
12107 ; [.3C75.0020.0002] # CUNEIFORM SIGN GIDIM
12108 ; [.3C76.0020.0002] # CUNEIFORM SIGN GIR2
12109 ; [.3C77.0020.0002] # CUNEIFORM SIGN GIR2 GUNU
1210A ; [.3C78.0020.0002] # CUNEIFORM SIGN GIR3
1210B ; [.3C79.0020.0002] # CUNEIFORM SIGN GIR3 TIMES A PLUS IGI
1210C ; [.3C7A.0020.0002] # CUNEIFORM SIGN GIR3 TIMES GAN2 TENU
1210D ; [.3C7B.0020.0002] # CUNEIFORM SIGN GIR3 TIMES IGI
1210E ; [.3C7C.0020.0002] # CUNEIFORM SIGN GIR3 TIMES LU PLUS IGI
1210F ; [.3C7D.0020.0002] # CUNEIFORM SIGN GIR3 TIMES PA
12110 ; [.3C7E.0020.0002] # CUNEIFORM SIGN GISAL
12111 ; [.3C7F.0020.0002] # CUNEIFORM SIGN GISH
12112 ; [.3C80.0020.0002] # CUNEIFORM SIGN GISH CROSSING GISH
12113 ; [.3C81.0020.0002] # CUNEIFORM SIGN GISH TIMES BAD
12114 ; [.3C82.0020.0002] # CUNEIFORM SIGN GISH TIMES TAK4
12115 ; [.3C83.0020.0002] # CUNEIFORM SIGN GISH TENU
12116 ; [.3C84.0020.0002] # CUNEIFORM SIGN GU
12117 ; [.3C85.0020.0002] # CUNEIFORM SIGN GU CROSSING GU
12118 ; [.3C86.0020.0002] # CUNEIFORM SIGN GU2
12119 ; [.3C87.0020.0002] # CUNEIFORM SIGN GU2 TIMES KAK
1211A ; [.3C88.0020.0002] # CUNEIFORM SIGN GU2 TIMES KAK TIMES IGI GUNU
1211B ; [.3C89.0020.0002] # CUNEIFORM SIGN GU2 TIMES NUN
1211C ; [.3C8A.0020.0002] # CUNEIFORM SIGN GU2 TIMES SAL PLUS TUG2
1211D ; [.3C8B.0020.0002] # CUNEIFORM SIGN GU2 GUNU
1211E ; [.3C8C.0020.0002] # CUNEIFORM SIGN GUD
1211F ; [.3C8D.0020.0002] # CUNEIFORM SIGN GUD TIMES A PLUS KUR
12120 ; [.3C8E.0020.0002] # CUNEIFORM SIGN GUD TIMES KUR
12121 ; [.3C8F.0020.0002] # CUNEIFORM SIGN GUD OVER GUD LUGAL
12122 ; [.3C90.0020.0002] # CUNEIFORM SIGN GUL
12123 ; [.3C91.0020.0002] # CUNEIFORM SIGN GUM
12124 ; [.3C92.0020.0002] # CUNEIFORM SIGN GUM TIMES SHE
12125 ; [.3C93.0020.0002] # CUNEIFORM SIGN GUR
12126 ; [.3C94.0020.0002] # CUNEIFORM SIGN GUR7
12127 ; [.3C95.0020.0002] # CUNEIFORM SIGN GURUN
12128 ; [.3C96.0020.0002] # CUNEIFORM SIGN GURUSH
12129 ; [.3C97.0020.0002] # CUNEIFORM SIGN HA
1212A ; [.3C98.0020.0002] # CUNEIFORM SIGN HA TENU
1212B ; [.3C99.0020.0002] # CUNEIFORM SIGN HA GUNU
1212C ; [.3C9A.0020.0002] # CUNEIFORM SIGN HAL
1212D ; [.3C9B.0020.0002] # CUNEIFORM SIGN HI
1212E ; [.3C9C.0020.0002] # CUNEIFORM SIGN HI TIMES ASH
1212F ; [.3C9D.0020.0002] # CUNEIFORM SIGN HI TIMES ASH2
12130 ; [.3C9E.0020.0002] # CUNEIFORM SIGN HI TIMES BAD
12131 ; [.3C9F.0020.0002] # CUNEIFORM SIGN HI TIMES DISH
12132 ; [.3CA0.0020.0002] # CUNEIFORM SIGN HI TIMES GAD
12133 ; [.3CA1.0020.0002] # CUNEIFORM SIGN HI TIMES KIN
12134 ; [.3CA2.0020.0002] # CUNEIFORM SIGN HI TIMES NUN
12135 ; [.3CA3.0020.0002] # CUNEIFORM SIGN HI TIMES SHE
12136 ; [.3CA4.0020.0002] # CUNEIFORM SIGN HI TIMES U
12137 ; [.3CA5.0020.0002] # CUNEIFORM SIGN HU
12138 ; [.3CA6.0020.0002] # CUNEIFORM SIGN HUB2
12139 ; [.3CA7.0020.0002] # CUNEIFORM SIGN HUB2 TIMES AN
1213A ; [.3CA8.0020.0002] # CUNEIFORM SIGN HUB2 TIMES HAL
1213B ; [.3CA9.0020.0002] # CUNEIFORM SIGN HUB2 TIMES KASKAL
1213C ; [.3CAA.0020.0002] # CUNEIFORM SIGN HUB2 TIMES LISH
1213D ; [.3CAB.0020.0002] # CUNEIFORM SIGN HUB2 TIMES UD
1213E ; [.3CAC.0020.0002] # CUNEIFORM SIGN HUL2
1213F ; [.3CAD.0020.0002] # CUNEIFORM SIGN I
12140 ; [.3CAE.0020.0002] # CUNEIFORM SIGN I A
12141 ; [.3CAF.0020.0002] # CUNEIFORM SIGN IB
12142 ; [.3CB0.0020.0002] # CUNEIFORM SIGN IDIM
12143 ; [.3CB1.0020.0002] # CUNEIFORM SIGN IDIM OVER IDIM BUR
12144 ; [.3CB2.0020.0002] # CUNEIFORM SIGN IDIM OVER IDIM SQUARED
12145 ; [.3CB3.0020.0002] # CUNEIFORM SIGN IG
12146 ; [.3CB4.0020.0002] # CUNEIFORM SIGN IGI
12147 ; [.3CB5.0020.0002] # CUNEIFORM SIGN IGI DIB
12148 ; [.3CB6.0020.0002] # CUNEIFORM SIGN IGI RI
12149 ; [.3CB7.0020.0002] # CUNEIFORM SIGN IGI OVER IGI SHIR OVER SHIR UD OVER UD
1214A ; [.3CB8.0020.0002] # CUNEIFORM SIGN IGI GUNU
1214B ; [.3CB9.0020.0002] # CUNEIFORM SIGN IL
1214C ; [.3CBA.0020.0002] # CUNEIFORM SIGN IL TIMES GAN2 TENU
1214D ; [.3CBB.0020.0002] # CUNEIFORM SIGN IL2
1214E ; [.3CBC.0020.0002] # CUNEIFORM SIGN IM
1214F ; [.3CBD.0020.0002] # CUNEIFORM SIGN IM TIMES TAK4
12150 ; [.3CBE.0020.0002] # CUNEIFORM SIGN IM CROSSING IM
12151 ; [.3CBF.0020.0002] # CUNEIFORM SIGN IM OPPOSING IM
12152 ; [.3CC0.0020.0002] # CUNEIFORM SIGN IM SQUARED
12153 ; [.3CC1.0020.0002] # CUNEIFORM SIGN IMIN
12154 ; [.3CC2.0020.0002] # CUNEIFORM SIGN IN
12155 ; [.3CC3.0020.0002] # CUNEIFORM SIGN IR
12156 ; [.3CC4.0020.0002] # CUNEIFORM SIGN ISH
12157 ; [.3CC5.0020.0002] # CUNEIFORM SIGN KA
12158 ; [.3CC6.0020.0002] # CUNEIFORM SIGN KA TIMES A
12159 ; [.3CC7.0020.0002] # CUNEIFORM SIGN KA TIMES AD
1215A ; [.3CC8.0020.0002] # CUNEIFORM SIGN KA TIMES AD PLUS KU3
1215B ; [.3CC9.0020.0002] # CUNEIFORM SIGN KA TIMES ASH2
1215C ; [.3CCA.0020.0002] # CUNEIFORM SIGN KA TIMES BAD
1215D ; [.3CCB.0020.0002] # CUNEIFORM SIGN KA TIMES BALAG
1215E ; [.3CCC.0020.0002] # CUNEIFORM SIGN KA TIMES BAR
1215F ; [.3CCD.0020.0002] # CUNEIFORM SIGN KA TIMES BI
12160 ; [.3CCE.0020.0002] # CUNEIFORM SIGN KA TIMES ERIN2
12161 ; [.3CCF.0020.0002] # CUNEIFORM SIGN KA TIMES ESH2
12162 ; [.3CD0.0020.0002] # CUNEIFORM SIGN KA TIMES GA
12163 ; [.3CD1.0020.0002] # CUNEIFORM SIGN KA TIMES GAL
12164 ; [.3CD2.0020.0002] # CUNEIFORM SIGN KA TIMES GAN2 TENU
12165 ; [.3CD3.0020.0002] # CUNEIFORM SIGN KA TIMES GAR
12166 ; [.3CD4.0020.0002] # CUNEIFORM SIGN KA TIMES GAR PLUS SHA3 PLUS A
12167 ; [.3CD5.0020.0002] # CUNEIFORM SIGN KA TIMES GI
12168 ; [.3CD6.0020.0002] # CUNEIFORM SIGN KA TIMES GIR2
12169 ; [.3CD7.0020.0002] # CUNEIFORM SIGN KA TIMES GISH PLUS SAR
1216A ; [.3CD8.0020.0002] # CUNEIFORM SIGN KA TIMES GISH CROSSING GISH
1216B ; [.3CD9.0020.0002] # CUNEIFORM SIGN KA TIMES GU
1216C ; [.3CDA.0020.0002] # CUNEIFORM SIGN KA TIMES GUR7
1216D ; [.3CDB.0020.0002] # CUNEIFORM SIGN KA TIMES IGI
1216E ; [.3CDC.0020.0002] # CUNEIFORM SIGN KA TIMES IM
1216F ; [.3CDD.0020.0002] # CUNEIFORM SIGN KA TIMES KAK
12170 ; [.3CDE.0020.0002] # CUNEIFORM SIGN KA TIMES KI
12171 ; [.3CDF.0020.0002] # CUNEIFORM SIGN KA TIMES KID
12172 ; [.3CE0.0020.0002] # CUNEIFORM SIGN KA TIMES LI
12173 ; [.3CE1.0020.0002] # CUNEIFORM SIGN KA TIMES LU
12174 ; [.3CE2.0020.0002] # CUNEIFORM SIGN KA TIMES ME
12175 ; [.3CE3.0020.0002] # CUNEIFORM SIGN KA TIMES ME PLUS DU
12176 ; [.3CE4.0020.0002] # CUNEIFORM SIGN KA TIMES ME PLUS GI
12177 ; [.3CE5.0020.0002] # CUNEIFORM SIGN KA TIMES ME PLUS TE
12178 ; [.3CE6.0020.0002] # CUNEIFORM SIGN KA TIMES MI
12179 ; [.3CE7.0020.0002] # CUNEIFORM SIGN KA TIMES MI PLUS NUNUZ
1217A ; [.3CE8.0020.0002] # CUNEIFORM SIGN KA TIMES NE
1217B ; [.3CE9.0020.0002] # CUNEIFORM SIGN KA TIMES NUN
1217C ; [.3CEA.0020.0002] # CUNEIFORM SIGN KA TIMES PI
1217D ; [.3CEB.0020.0002] # CUNEIFORM SIGN KA TIMES RU
1217E ; [.3CEC.0020.0002] # CUNEIFORM SIGN KA TIMES SA
1217F ; [.3CED.0020.0002] # CUNEIFORM SIGN KA TIMES SAR
12180 ; [.3CEE.0020.0002] # CUNEIFORM SIGN KA TIMES SHA
12181 ; [.3CEF.0020.0002] # CUNEIFORM SIGN KA TIMES SHE
12182 ; [.3CF0.0020.0002] # CUNEIFORM SIGN KA TIMES SHID
12183 ; [.3CF1.0020.0002] # CUNEIFORM SIGN KA TIMES SHU
12184 ; [.3CF2.0020.0002] # CUNEIFORM SIGN KA TIMES SIG
12185 ; [.3CF3.0020.0002] # CUNEIFORM SIGN KA TIMES SUHUR
12186 ; [.3CF4.0020.0002] # CUNEIFORM SIGN KA TIMES TAR
12187 ; [.3CF5.0020.0002] # CUNEIFORM SIGN KA TIMES U
12188 ; [.3CF6.0020.0002] # CUNEIFORM SIGN KA TIMES U2
12189 ; [.3CF7.0020.0002] # CUNEIFORM SIGN KA TIMES UD
1218A ; [.3CF8.0020.0002] # CUNEIFORM SIGN KA TIMES UMUM TIMES PA
1218B ; [.3CF9.0020.0002] # CUNEIFORM SIGN KA TIMES USH
1218C ; [.3CFA.0020.0002] # CUNEIFORM SIGN KA TIMES ZI
1218D ; [.3CFB.0020.0002] # CUNEIFORM SIGN KA2
1218E ; [.3CFC.0020.0002] # CUNEIFORM SIGN KA2 CROSSING KA2
1218F ; [.3CFD.0020.0002] # CUNEIFORM SIGN KAB
12190 ; [.3CFE.0020.0002] # CUNEIFORM SIGN KAD2
12191 ; [.3CFF.0020.0002] # CUNEIFORM SIGN KAD3
12192 ; [.3D00.0020.0002] # CUNEIFORM SIGN KAD4
12193 ; [.3D01.0020.0002] # CUNEIFORM SIGN KAD5
12194 ; [.3D02.0020.0002] # CUNEIFORM SIGN KAD5 OVER KAD5
12195 ; [.3D03.0020.0002] # CUNEIFORM SIGN KAK
12196 ; [.3D04.0020.0002] # CUNEIFORM SIGN KAK TIMES IGI GUNU
12197 ; [.3D05.0020.0002] # CUNEIFORM SIGN KAL
12198 ; [.3D06.0020.0002] # CUNEIFORM SIGN KAL TIMES BAD
12199 ; [.3D07.0020.0002] # CUNEIFORM SIGN KAL CROSSING KAL
1219A ; [.3D08.0020.0002] # CUNEIFORM SIGN KAM2
1219B ; [.3D09.0020.0002] # CUNEIFORM SIGN KAM4
1219C ; [.3D0A.0020.0002] # CUNEIFORM SIGN KASKAL
1219D ; [.3D0B.0020.0002] # CUNEIFORM SIGN KASKAL LAGAB TIMES U OVER LAGAB TIMES U
1219E ; [.3D0C.0020.0002] # CUNEIFORM SIGN KASKAL OVER KASKAL LAGAB TIMES U OVER LAGAB TIMES U
1219F ; [.3D0D.0020.0002] # CUNEIFORM SIGN KESH2
121A0 ; [.3D0E.0020.0002] # CUNEIFORM SIGN KI
121A1 ; [.3D0F.0020.0002] # CUNEIFORM SIGN KI TIMES BAD
121A2 ; [.3D10.0020.0002] # CUNEIFORM SIGN KI TIMES U
121A3 ; [.3D11.0020.0002] # CUNEIFORM SIGN KI TIMES UD
121A4 ; [.3D12.0020.0002] # CUNEIFORM SIGN KID
121A5 ; [.3D13.0020.0002] # CUNEIFORM SIGN KIN
121A6 ; [.3D14.0020.0002] # CUNEIFORM SIGN KISAL
121A7 ; [.3D15.0020.0002] # CUNEIFORM SIGN KISH
121A8 ; [.3D16.0020.0002] # CUNEIFORM SIGN KISIM5
121A9 ; [.3D17.0020.0002] # CUNEIFORM SIGN KISIM5 OVER KISIM5
121AA ; [.3D18.0020.0002] # CUNEIFORM SIGN KU
121AB ; [.3D19.0020.0002] # CUNEIFORM SIGN KU OVER HI TIMES ASH2 KU OVER HI TIMES ASH2
121AC ; [.3D1A.0020.0002] # CUNEIFORM SIGN KU3
121AD ; [.3D1B.0020.0002] # CUNEIFORM SIGN KU4
121AE ; [.3D1C.0020.0002] # CUNEIFORM SIGN KU4 VARIANT FORM
121AF ; [.3D1D.0020.0002] # CUNEIFORM SIGN KU7
121B0 ; [.3D1E.0020.0002] # CUNEIFORM SIGN KUL
121B1 ; [.3D1F.0020.0002] # CUNEIFORM SIGN KUL GUNU
121B2 ; [.3D20.0020.0002] # CUNEIFORM SIGN KUN
121B3 ; [.3D21.0020.0002] # CUNEIFORM SIGN KUR
121B4 ; [.3D22.0020.0002] # CUNEIFORM SIGN KUR OPPOSING KUR
121B5 ; [.3D23.0020.0002] # CUNEIFORM SIGN KUSHU2
121B6 ; [.3D24.0020.0002] # CUNEIFORM SIGN KWU318
121B7 ; [.3D25.0020.0002] # CUNEIFORM SIGN LA
121B8 ; [.3D26.0020.0002] # CUNEIFORM SIGN LAGAB
121B9 ; [.3D27.0020.0002] # CUNEIFORM SIGN LAGAB TIMES A
121BA ; [.3D28.0020.0002] # CUNEIFORM SIGN LAGAB TIMES A PLUS DA PLUS HA
121BB ; [.3D29.0020.0002] # CUNEIFORM SIGN LAGAB TIMES A PLUS GAR
121BC ; [.3D2A.0020.0002] # CUNEIFORM SIGN LAGAB TIMES A PLUS LAL
121BD ; [.3D2B.0020.0002] # CUNEIFORM SIGN LAGAB TIMES AL
121BE ; [.3D2C.0020.0002] # CUNEIFORM SIGN LAGAB TIMES AN
121BF ; [.3D2D.0020.0002] # CUNEIFORM SIGN LAGAB TIMES ASH ZIDA TENU
121C0 ; [.3D2E.0020.0002] # CUNEIFORM SIGN LAGAB TIMES BAD
121C1 ; [.3D2F.0020.0002] # CUNEIFORM SIGN LAGAB TIMES BI
121C2 ; [.3D30.0020.0002] # CUNEIFORM SIGN LAGAB TIMES DAR
121C3 ; [.3D31.0020.0002] # CUNEIFORM SIGN LAGAB TIMES EN
121C4 ; [.3D32.0020.0002] # CUNEIFORM SIGN LAGAB TIMES GA
121C5 ; [.3D33.0020.0002] # CUNEIFORM SIGN LAGAB TIMES GAR
121C6 ; [.3D34.0020.0002] # CUNEIFORM SIGN LAGAB TIMES GUD
121C7 ; [.3D35.0020.0002] # CUNEIFORM SIGN LAGAB TIMES GUD PLUS GUD
121C8 ; [.3D36.0020.0002] # CUNEIFORM SIGN LAGAB TIMES HA
121C9 ; [.3D37.0020.0002] # CUNEIFORM SIGN LAGAB TIMES HAL
121CA ; [.3D38.0020.0002] # CUNEIFORM SIGN LAGAB TIMES HI TIMES NUN
121CB ; [.3D39.0020.0002] # CUNEIFORM SIGN LAGAB TIMES IGI GUNU
121CC ; [.3D3A.0020.0002] # CUNEIFORM SIGN LAGAB TIMES IM
121CD ; [.3D3B.0020.0002] # CUNEIFORM SIGN LAGAB TIMES IM PLUS HA
121CE ; [.3D3C.0020.0002] # CUNEIFORM SIGN LAGAB TIMES IM PLUS LU
121CF ; [.3D3D.0020.0002] # CUNEIFORM SIGN LAGAB TIMES KI
121D0 ; [.3D3E.0020.0002] # CUNEIFORM SIGN LAGAB TIMES KIN
121D1 ; [.3D3F.0020.0002] # CUNEIFORM SIGN LAGAB TIMES KU3
121D2 ; [.3D40.0020.0002] # CUNEIFORM SIGN LAGAB TIMES KUL
121D3 ; [.3D41.0020.0002] # CUNEIFORM SIGN LAGAB TIMES KUL PLUS HI PLUS A
121D4 ; [.3D42.0020.0002] # CUNEIFORM SIGN LAGAB TIMES LAGAB
121D5 ; [.3D43.0020.0002] # CUNEIFORM SIGN LAGAB TIMES LISH
121D6 ; [.3D44.0020.0002] # CUNEIFORM SIGN LAGAB TIMES LU
121D7 ; [.3D45.0020.0002] # CUNEIFORM SIGN LAGAB TIMES LUL
121D8 ; [.3D46.0020.0002] # CUNEIFORM SIGN LAGAB TIMES ME
121D9 ; [.3D47.0020.0002] # CUNEIFORM SIGN LAGAB TIMES ME PLUS EN
121DA ; [.3D48.0020.0002] # CUNEIFORM SIGN LAGAB TIMES MUSH
121DB ; [.3D49.0020.0002] # CUNEIFORM SIGN LAGAB TIMES NE
121DC ; [.3D4A.0020.0002] # CUNEIFORM SIGN LAGAB TIMES SHE PLUS SUM
121DD ; [.3D4B.0020.0002] # CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH PLUS ERIN2
121DE ; [.3D4C.0020.0002] # CUNEIFORM SIGN LAGAB TIMES SHITA PLUS GISH TENU
121DF ; [.3D4D.0020.0002] # CUNEIFORM SIGN LAGAB TIMES SHU2
121E0 ; [.3D4E.0020.0002] # CUNEIFORM SIGN LAGAB TIMES SHU2 PLUS SHU2
121E1 ; [.3D4F.0020.0002] # CUNEIFORM SIGN LAGAB TIMES SUM
121E2 ; [.3D50.0020.0002] # CUNEIFORM SIGN LAGAB TIMES TAG
121E3 ; [.3D51.0020.0002] # CUNEIFORM SIGN LAGAB TIMES TAK4
121E4 ; [.3D52.0020.0002] # CUNEIFORM SIGN LAGAB TIMES TE PLUS A PLUS SU PLUS NA
121E5 ; [.3D53.0020.0002] # CUNEIFORM SIGN LAGAB TIMES U
121E6 ; [.3D54.0020.0002] # CUNEIFORM SIGN LAGAB TIMES U PLUS A
121E7 ; [.3D55.0020.0002] # CUNEIFORM SIGN LAGAB TIMES U PLUS U PLUS U
121E8 ; [.3D56.0020.0002] # CUNEIFORM SIGN LAGAB TIMES U2 PLUS ASH
121E9 ; [.3D57.0020.0002] # CUNEIFORM SIGN LAGAB TIMES UD
121EA ; [.3D58.0020.0002] # CUNEIFORM SIGN LAGAB TIMES USH
121EB ; [.3D59.0020.0002] # CUNEIFORM SIGN LAGAB SQUARED
121EC ; [.3D5A.0020.0002] # CUNEIFORM SIGN LAGAR
121ED ; [.3D5B.0020.0002] # CUNEIFORM SIGN LAGAR TIMES SHE
121EE ; [.3D5C.0020.0002] # CUNEIFORM SIGN LAGAR TIMES SHE PLUS SUM
121EF ; [.3D5D.0020.0002] # CUNEIFORM SIGN LAGAR GUNU
121F0 ; [.3D5E.0020.0002] # CUNEIFORM SIGN LAGAR GUNU OVER LAGAR GUNU SHE
121F1 ; [.3D5F.0020.0002] # CUNEIFORM SIGN LAHSHU
121F2 ; [.3D60.0020.0002] # CUNEIFORM SIGN LAL
121F3 ; [.3D61.0020.0002] # CUNEIFORM SIGN LAL TIMES LAL
121F4 ; [.3D62.0020.0002] # CUNEIFORM SIGN LAM
121F5 ; [.3D63.0020.0002] # CUNEIFORM SIGN LAM TIMES KUR
121F6 ; [.3D64.0020.0002] # CUNEIFORM SIGN LAM TIMES KUR PLUS RU
121F7 ; [.3D65.0020.0002] # CUNEIFORM SIGN LI
121F8 ; [.3D66.0020.0002] # CUNEIFORM SIGN LIL
121F9 ; [.3D67.0020.0002] # CUNEIFORM SIGN LIMMU2
121FA ; [.3D68.0020.0002] # CUNEIFORM SIGN LISH
121FB ; [.3D69.0020.0002] # CUNEIFORM SIGN LU
121FC ; [.3D6A.0020.0002] # CUNEIFORM SIGN LU TIMES BAD
121FD ; [.3D6B.0020.0002] # CUNEIFORM SIGN LU2
121FE ; [.3D6C.0020.0002] # CUNEIFORM SIGN LU2 TIMES AL
121FF ; [.3D6D.0020.0002] # CUNEIFORM SIGN LU2 TIMES BAD
12200 ; [.3D6E.0020.0002] # CUNEIFORM SIGN LU2 TIMES ESH2
12201 ; [.3D6F.0020.0002] # CUNEIFORM SIGN LU2 TIMES ESH2 TENU
12202 ; [.3D70.0020.0002] # CUNEIFORM SIGN LU2 TIMES GAN2 TENU
12203 ; [.3D71.0020.0002] # CUNEIFORM SIGN LU2 TIMES HI TIMES BAD
12204 ; [.3D72.0020.0002] # CUNEIFORM SIGN LU2 TIMES IM
12205 ; [.3D73.0020.0002] # CUNEIFORM SIGN LU2 TIMES KAD2
12206 ; [.3D74.0020.0002] # CUNEIFORM SIGN LU2 TIMES KAD3
12207 ; [.3D75.0020.0002] # CUNEIFORM SIGN LU2 TIMES KAD3 PLUS ASH
12208 ; [.3D76.0020.0002] # CUNEIFORM SIGN LU2 TIMES KI
12209 ; [.3D77.0020.0002] # CUNEIFORM SIGN LU2 TIMES LA PLUS ASH
1220A ; [.3D78.0020.0002] # CUNEIFORM SIGN LU2 TIMES LAGAB
1220B ; [.3D79.0020.0002] # CUNEIFORM SIGN LU2 TIMES ME PLUS EN
1220C ; [.3D7A.0020.0002] # CUNEIFORM SIGN LU2 TIMES NE
1220D ; [.3D7B.0020.0002] # CUNEIFORM SIGN LU2 TIMES NU
1220E ; [.3D7C.0020.0002] # CUNEIFORM SIGN LU2 TIMES SI PLUS ASH
1220F ; [.3D7D.0020.0002] # CUNEIFORM SIGN LU2 TIMES SIK2 PLUS BU
12210 ; [.3D7E.0020.0002] # CUNEIFORM SIGN LU2 TIMES TUG2
12211 ; [.3D7F.0020.0002] # CUNEIFORM SIGN LU2 TENU
12212 ; [.3D80.0020.0002] # CUNEIFORM SIGN LU2 CROSSING LU2
12213 ; [.3D81.0020.0002] # CUNEIFORM SIGN LU2 OPPOSING LU2
12214 ; [.3D82.0020.0002] # CUNEIFORM SIGN LU2 SQUARED
12215 ; [.3D83.0020.0002] # CUNEIFORM SIGN LU2 SHESHIG
12216 ; [.3D84.0020.0002] # CUNEIFORM SIGN LU3
12217 ; [.3D85.0020.0002] # CUNEIFORM SIGN LUGAL
12218 ; [.3D86.0020.0002] # CUNEIFORM SIGN LUGAL OVER LUGAL
12219 ; [.3D87.0020.0002] # CUNEIFORM SIGN LUGAL OPPOSING LUGAL
1221A ; [.3D88.0020.0002] # CUNEIFORM SIGN LUGAL SHESHIG
1221B ; [.3D89.0020.0002] # CUNEIFORM SIGN LUH
1221C ; [.3D8A.0020.0002] # CUNEIFORM SIGN LUL
1221D ; [.3D8B.0020.0002] # CUNEIFORM SIGN LUM
1221E ; [.3D8C.0020.0002] # CUNEIFORM SIGN LUM OVER LUM
1221F ; [.3D8D.0020.0002] # CUNEIFORM SIGN LUM OVER LUM GAR OVER GAR
12220 ; [.3D8E.0020.0002] # CUNEIFORM SIGN MA
12221 ; [.3D8F.0020.0002] # CUNEIFORM SIGN MA TIMES TAK4
12222 ; [.3D90.0020.0002] # CUNEIFORM SIGN MA GUNU
12223 ; [.3D91.0020.0002] # CUNEIFORM SIGN MA2
12224 ; [.3D92.0020.0002] # CUNEIFORM SIGN MAH
12225 ; [.3D93.0020.0002] # CUNEIFORM SIGN MAR
12226 ; [.3D94.0020.0002] # CUNEIFORM SIGN MASH
12227 ; [.3D95.0020.0002] # CUNEIFORM SIGN MASH2
12228 ; [.3D96.0020.0002] # CUNEIFORM SIGN ME
12229 ; [.3D97.0020.0002] # CUNEIFORM SIGN MES
1222A ; [.3D98.0020.0002] # CUNEIFORM SIGN MI
1222B ; [.3D99.0020.0002] # CUNEIFORM SIGN MIN
1222C ; [.3D9A.0020.0002] # CUNEIFORM SIGN MU
1222D ; [.3D9B.0020.0002] # CUNEIFORM SIGN MU OVER MU
1222E ; [.3D9C.0020.0002] # CUNEIFORM SIGN MUG
1222F ; [.3D9D.0020.0002] # CUNEIFORM SIGN MUG GUNU
12230 ; [.3D9E.0020.0002] # CUNEIFORM SIGN MUNSUB
12231 ; [.3D9F.0020.0002] # CUNEIFORM SIGN MURGU2
12232 ; [.3DA0.0020.0002] # CUNEIFORM SIGN MUSH
12233 ; [.3DA1.0020.0002] # CUNEIFORM SIGN MUSH TIMES A
12234 ; [.3DA2.0020.0002] # CUNEIFORM SIGN MUSH TIMES KUR
12235 ; [.3DA3.0020.0002] # CUNEIFORM SIGN MUSH TIMES ZA
12236 ; [.3DA4.0020.0002] # CUNEIFORM SIGN MUSH OVER MUSH
12237 ; [.3DA5.0020.0002] # CUNEIFORM SIGN MUSH OVER MUSH TIMES A PLUS NA
12238 ; [.3DA6.0020.0002] # CUNEIFORM SIGN MUSH CROSSING MUSH
12239 ; [.3DA7.0020.0002] # CUNEIFORM SIGN MUSH3
1223A ; [.3DA8.0020.0002] # CUNEIFORM SIGN MUSH3 TIMES A
1223B ; [.3DA9.0020.0002] # CUNEIFORM SIGN MUSH3 TIMES A PLUS DI
1223C ; [.3DAA.0020.0002] # CUNEIFORM SIGN MUSH3 TIMES DI
1223D ; [.3DAB.0020.0002] # CUNEIFORM SIGN MUSH3 GUNU
1223E ; [.3DAC.0020.0002] # CUNEIFORM SIGN NA
1223F ; [.3DAD.0020.0002] # CUNEIFORM SIGN NA2
12240 ; [.3DAE.0020.0002] # CUNEIFORM SIGN NAGA
12241 ; [.3DAF.0020.0002] # CUNEIFORM SIGN NAGA INVERTED
12242 ; [.3DB0.0020.0002] # CUNEIFORM SIGN NAGA TIMES SHU TENU
12243 ; [.3DB1.0020.0002] # CUNEIFORM SIGN NAGA OPPOSING NAGA
12244 ; [.3DB2.0020.0002] # CUNEIFORM SIGN NAGAR
12245 ; [.3DB3.0020.0002] # CUNEIFORM SIGN NAM NUTILLU
12246 ; [.3DB4.0020.0002] # CUNEIFORM SIGN NAM
12247 ; [.3DB5.0020.0002] # CUNEIFORM SIGN NAM2
12248 ; [.3DB6.0020.0002] # CUNEIFORM SIGN NE
12249 ; [.3DB7.0020.0002] # CUNEIFORM SIGN NE TIMES A
1224A ; [.3DB8.0020.0002] # CUNEIFORM SIGN NE TIMES UD
1224B ; [.3DB9.0020.0002] # CUNEIFORM SIGN NE SHESHIG
1224C ; [.3DBA.0020.0002] # CUNEIFORM SIGN NI
1224D ; [.3DBB.0020.0002] # CUNEIFORM SIGN NI TIMES E
1224E ; [.3DBC.0020.0002] # CUNEIFORM SIGN NI2
1224F ; [.3DBD.0020.0002] # CUNEIFORM SIGN NIM
12250 ; [.3DBE.0020.0002] # CUNEIFORM SIGN NIM TIMES GAN2 TENU
12251 ; [.3DBF.0020.0002] # CUNEIFORM SIGN NIM TIMES GAR PLUS GAN2 TENU
12252 ; [.3DC0.0020.0002] # CUNEIFORM SIGN NINDA2
12253 ; [.3DC1.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES AN
12254 ; [.3DC2.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES ASH
12255 ; [.3DC3.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES ASH PLUS ASH
12256 ; [.3DC4.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES GUD
12257 ; [.3DC5.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES ME PLUS GAN2 TENU
12258 ; [.3DC6.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES NE
12259 ; [.3DC7.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES NUN
1225A ; [.3DC8.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES SHE
1225B ; [.3DC9.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES SHE PLUS A AN
1225C ; [.3DCA.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES SHE PLUS ASH
1225D ; [.3DCB.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES SHE PLUS ASH PLUS ASH
1225E ; [.3DCC.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES U2 PLUS ASH
1225F ; [.3DCD.0020.0002] # CUNEIFORM SIGN NINDA2 TIMES USH
12260 ; [.3DCE.0020.0002] # CUNEIFORM SIGN NISAG
12261 ; [.3DCF.0020.0002] # CUNEIFORM SIGN NU
12262 ; [.3DD0.0020.0002] # CUNEIFORM SIGN NU11
122D4 ; [.3DD1.0020.0002] # CUNEIFORM SIGN SHIR TENU
122D5 ; [.3DD2.0020.0002] # CUNEIFORM SIGN SHIR OVER SHIR BUR OVER BUR
12263 ; [.3DD3.0020.0002] # CUNEIFORM SIGN NUN
12264 ; [.3DD4.0020.0002] # CUNEIFORM SIGN NUN LAGAR TIMES GAR
12265 ; [.3DD5.0020.0002] # CUNEIFORM SIGN NUN LAGAR TIMES MASH
12266 ; [.3DD6.0020.0002] # CUNEIFORM SIGN NUN LAGAR TIMES SAL
12267 ; [.3DD7.0020.0002] # CUNEIFORM SIGN NUN LAGAR TIMES SAL OVER NUN LAGAR TIMES SAL
12268 ; [.3DD8.0020.0002] # CUNEIFORM SIGN NUN LAGAR TIMES USH
12269 ; [.3DD9.0020.0002] # CUNEIFORM SIGN NUN TENU
1226A ; [.3DDA.0020.0002] # CUNEIFORM SIGN NUN OVER NUN
1226B ; [.3DDB.0020.0002] # CUNEIFORM SIGN NUN CROSSING NUN
1226C ; [.3DDC.0020.0002] # CUNEIFORM SIGN NUN CROSSING NUN LAGAR OVER LAGAR
1226D ; [.3DDD.0020.0002] # CUNEIFORM SIGN NUNUZ
1226E ; [.3DDE.0020.0002] # CUNEIFORM SIGN NUNUZ AB2 TIMES ASHGAB
1226F ; [.3DDF.0020.0002] # CUNEIFORM SIGN NUNUZ AB2 TIMES BI
12270 ; [.3DE0.0020.0002] # CUNEIFORM SIGN NUNUZ AB2 TIMES DUG
12271 ; [.3DE1.0020.0002] # CUNEIFORM SIGN NUNUZ AB2 TIMES GUD
12272 ; [.3DE2.0020.0002] # CUNEIFORM SIGN NUNUZ AB2 TIMES IGI GUNU
12273 ; [.3DE3.0020.0002] # CUNEIFORM SIGN NUNUZ AB2 TIMES KAD3
12274 ; [.3DE4.0020.0002] # CUNEIFORM SIGN NUNUZ AB2 TIMES LA
12275 ; [.3DE5.0020.0002] # CUNEIFORM SIGN NUNUZ AB2 TIMES NE
12276 ; [.3DE6.0020.0002] # CUNEIFORM SIGN NUNUZ AB2 TIMES SILA3
12277 ; [.3DE7.0020.0002] # CUNEIFORM SIGN NUNUZ AB2 TIMES U2
12278 ; [.3DE8.0020.0002] # CUNEIFORM SIGN NUNUZ KISIM5 TIMES BI
12279 ; [.3DE9.0020.0002] # CUNEIFORM SIGN NUNUZ KISIM5 TIMES BI U
1227A ; [.3DEA.0020.0002] # CUNEIFORM SIGN PA
1227B ; [.3DEB.0020.0002] # CUNEIFORM SIGN PAD
1227C ; [.3DEC.0020.0002] # CUNEIFORM SIGN PAN
1227D ; [.3DED.0020.0002] # CUNEIFORM SIGN PAP
1227E ; [.3DEE.0020.0002] # CUNEIFORM SIGN PESH2
1227F ; [.3DEF.0020.0002] # CUNEIFORM SIGN PI
12280 ; [.3DF0.0020.0002] # CUNEIFORM SIGN PI TIMES A
12281 ; [.3DF1.0020.0002] # CUNEIFORM SIGN PI TIMES AB
12282 ; [.3DF2.0020.0002] # CUNEIFORM SIGN PI TIMES BI
12283 ; [.3DF3.0020.0002] # CUNEIFORM SIGN PI TIMES BU
12284 ; [.3DF4.0020.0002] # CUNEIFORM SIGN PI TIMES E
12285 ; [.3DF5.0020.0002] # CUNEIFORM SIGN PI TIMES I
12286 ; [.3DF6.0020.0002] # CUNEIFORM SIGN PI TIMES IB
12287 ; [.3DF7.0020.0002] # CUNEIFORM SIGN PI TIMES U
12288 ; [.3DF8.0020.0002] # CUNEIFORM SIGN PI TIMES U2
12289 ; [.3DF9.0020.0002] # CUNEIFORM SIGN PI CROSSING PI
1228A ; [.3DFA.0020.0002] # CUNEIFORM SIGN PIRIG
1228B ; [.3DFB.0020.0002] # CUNEIFORM SIGN PIRIG TIMES KAL
1228C ; [.3DFC.0020.0002] # CUNEIFORM SIGN PIRIG TIMES UD
1228D ; [.3DFD.0020.0002] # CUNEIFORM SIGN PIRIG TIMES ZA
1228E ; [.3DFE.0020.0002] # CUNEIFORM SIGN PIRIG OPPOSING PIRIG
1228F ; [.3DFF.0020.0002] # CUNEIFORM SIGN RA
12290 ; [.3E00.0020.0002] # CUNEIFORM SIGN RAB
12291 ; [.3E01.0020.0002] # CUNEIFORM SIGN RI
12292 ; [.3E02.0020.0002] # CUNEIFORM SIGN RU
12293 ; [.3E03.0020.0002] # CUNEIFORM SIGN SA
12294 ; [.3E04.0020.0002] # CUNEIFORM SIGN SAG NUTILLU
12295 ; [.3E05.0020.0002] # CUNEIFORM SIGN SAG
12296 ; [.3E06.0020.0002] # CUNEIFORM SIGN SAG TIMES A
12297 ; [.3E07.0020.0002] # CUNEIFORM SIGN SAG TIMES DU
12298 ; [.3E08.0020.0002] # CUNEIFORM SIGN SAG TIMES DUB
12299 ; [.3E09.0020.0002] # CUNEIFORM SIGN SAG TIMES HA
1229A ; [.3E0A.0020.0002] # CUNEIFORM SIGN SAG TIMES KAK
1229B ; [.3E0B.0020.0002] # CUNEIFORM SIGN SAG TIMES KUR
1229C ; [.3E0C.0020.0002] # CUNEIFORM SIGN SAG TIMES LUM
1229D ; [.3E0D.0020.0002] # CUNEIFORM SIGN SAG TIMES MI
1229E ; [.3E0E.0020.0002] # CUNEIFORM SIGN SAG TIMES NUN
1229F ; [.3E0F.0020.0002] # CUNEIFORM SIGN SAG TIMES SAL
122A0 ; [.3E10.0020.0002] # CUNEIFORM SIGN SAG TIMES SHID
122A1 ; [.3E11.0020.0002] # CUNEIFORM SIGN SAG TIMES TAB
122A2 ; [.3E12.0020.0002] # CUNEIFORM SIGN SAG TIMES U2
122A3 ; [.3E13.0020.0002] # CUNEIFORM SIGN SAG TIMES UB
122A4 ; [.3E14.0020.0002] # CUNEIFORM SIGN SAG TIMES UM
122A5 ; [.3E15.0020.0002] # CUNEIFORM SIGN SAG TIMES UR
122A6 ; [.3E16.0020.0002] # CUNEIFORM SIGN SAG TIMES USH
122A7 ; [.3E17.0020.0002] # CUNEIFORM SIGN SAG OVER SAG
122A8 ; [.3E18.0020.0002] # CUNEIFORM SIGN SAG GUNU
122A9 ; [.3E19.0020.0002] # CUNEIFORM SIGN SAL
122AA ; [.3E1A.0020.0002] # CUNEIFORM SIGN SAL LAGAB TIMES ASH2
122AB ; [.3E1B.0020.0002] # CUNEIFORM SIGN SANGA2
122AC ; [.3E1C.0020.0002] # CUNEIFORM SIGN SAR
122AD ; [.3E1D.0020.0002] # CUNEIFORM SIGN SHA
122AE ; [.3E1E.0020.0002] # CUNEIFORM SIGN SHA3
122AF ; [.3E1F.0020.0002] # CUNEIFORM SIGN SHA3 TIMES A
122B0 ; [.3E20.0020.0002] # CUNEIFORM SIGN SHA3 TIMES BAD
122B1 ; [.3E21.0020.0002] # CUNEIFORM SIGN SHA3 TIMES GISH
122B2 ; [.3E22.0020.0002] # CUNEIFORM SIGN SHA3 TIMES NE
122B3 ; [.3E23.0020.0002] # CUNEIFORM SIGN SHA3 TIMES SHU2
122B4 ; [.3E24.0020.0002] # CUNEIFORM SIGN SHA3 TIMES TUR
122B5 ; [.3E25.0020.0002] # CUNEIFORM SIGN SHA3 TIMES U
122B6 ; [.3E26.0020.0002] # CUNEIFORM SIGN SHA3 TIMES U PLUS A
122B7 ; [.3E27.0020.0002] # CUNEIFORM SIGN SHA6
122B8 ; [.3E28.0020.0002] # CUNEIFORM SIGN SHAB6
122B9 ; [.3E29.0020.0002] # CUNEIFORM SIGN SHAR2
122BA ; [.3E2A.0020.0002] # CUNEIFORM SIGN SHE
122BB ; [.3E2B.0020.0002] # CUNEIFORM SIGN SHE HU
122BC ; [.3E2C.0020.0002] # CUNEIFORM SIGN SHE OVER SHE GAD OVER GAD GAR OVER GAR
122BD ; [.3E2D.0020.0002] # CUNEIFORM SIGN SHE OVER SHE TAB OVER TAB GAR OVER GAR
122BE ; [.3E2E.0020.0002] # CUNEIFORM SIGN SHEG9
122BF ; [.3E2F.0020.0002] # CUNEIFORM SIGN SHEN
122C0 ; [.3E30.0020.0002] # CUNEIFORM SIGN SHESH
122C1 ; [.3E31.0020.0002] # CUNEIFORM SIGN SHESH2
122C2 ; [.3E32.0020.0002] # CUNEIFORM SIGN SHESHLAM
122C3 ; [.3E33.0020.0002] # CUNEIFORM SIGN SHID
122C4 ; [.3E34.0020.0002] # CUNEIFORM SIGN SHID TIMES A
122C5 ; [.3E35.0020.0002] # CUNEIFORM SIGN SHID TIMES IM
122C6 ; [.3E36.0020.0002] # CUNEIFORM SIGN SHIM
122C7 ; [.3E37.0020.0002] # CUNEIFORM SIGN SHIM TIMES A
122C8 ; [.3E38.0020.0002] # CUNEIFORM SIGN SHIM TIMES BAL
122C9 ; [.3E39.0020.0002] # CUNEIFORM SIGN SHIM TIMES BULUG
122CA ; [.3E3A.0020.0002] # CUNEIFORM SIGN SHIM TIMES DIN
122CB ; [.3E3B.0020.0002] # CUNEIFORM SIGN SHIM TIMES GAR
122CC ; [.3E3C.0020.0002] # CUNEIFORM SIGN SHIM TIMES IGI
122CD ; [.3E3D.0020.0002] # CUNEIFORM SIGN SHIM TIMES IGI GUNU
122CE ; [.3E3E.0020.0002] # CUNEIFORM SIGN SHIM TIMES KUSHU2
122CF ; [.3E3F.0020.0002] # CUNEIFORM SIGN SHIM TIMES LUL
122D0 ; [.3E40.0020.0002] # CUNEIFORM SIGN SHIM TIMES MUG
122D1 ; [.3E41.0020.0002] # CUNEIFORM SIGN SHIM TIMES SAL
122D2 ; [.3E42.0020.0002] # CUNEIFORM SIGN SHINIG
122D3 ; [.3E43.0020.0002] # CUNEIFORM SIGN SHIR
122D6 ; [.3E44.0020.0002] # CUNEIFORM SIGN SHITA
122D7 ; [.3E45.0020.0002] # CUNEIFORM SIGN SHU
122D8 ; [.3E46.0020.0002] # CUNEIFORM SIGN SHU OVER INVERTED SHU
122D9 ; [.3E47.0020.0002] # CUNEIFORM SIGN SHU2
122DA ; [.3E48.0020.0002] # CUNEIFORM SIGN SHUBUR
122DB ; [.3E49.0020.0002] # CUNEIFORM SIGN SI
122DC ; [.3E4A.0020.0002] # CUNEIFORM SIGN SI GUNU
122DD ; [.3E4B.0020.0002] # CUNEIFORM SIGN SIG
122DE ; [.3E4C.0020.0002] # CUNEIFORM SIGN SIG4
122DF ; [.3E4D.0020.0002] # CUNEIFORM SIGN SIG4 OVER SIG4 SHU2
122E0 ; [.3E4E.0020.0002] # CUNEIFORM SIGN SIK2
122E1 ; [.3E4F.0020.0002] # CUNEIFORM SIGN SILA3
122E2 ; [.3E50.0020.0002] # CUNEIFORM SIGN SU
122E3 ; [.3E51.0020.0002] # CUNEIFORM SIGN SU OVER SU
122E4 ; [.3E52.0020.0002] # CUNEIFORM SIGN SUD
122E5 ; [.3E53.0020.0002] # CUNEIFORM SIGN SUD2
122E6 ; [.3E54.0020.0002] # CUNEIFORM SIGN SUHUR
122E7 ; [.3E55.0020.0002] # CUNEIFORM SIGN SUM
122E8 ; [.3E56.0020.0002] # CUNEIFORM SIGN SUMASH
122E9 ; [.3E57.0020.0002] # CUNEIFORM SIGN SUR
122EA ; [.3E58.0020.0002] # CUNEIFORM SIGN SUR9
122EB ; [.3E59.0020.0002] # CUNEIFORM SIGN TA
122EC ; [.3E5A.0020.0002] # CUNEIFORM SIGN TA ASTERISK
122ED ; [.3E5B.0020.0002] # CUNEIFORM SIGN TA TIMES HI
122EE ; [.3E5C.0020.0002] # CUNEIFORM SIGN TA TIMES MI
122EF ; [.3E5D.0020.0002] # CUNEIFORM SIGN TA GUNU
122F0 ; [.3E5E.0020.0002] # CUNEIFORM SIGN TAB
122F1 ; [.3E5F.0020.0002] # CUNEIFORM SIGN TAB OVER TAB NI OVER NI DISH OVER DISH
122F2 ; [.3E60.0020.0002] # CUNEIFORM SIGN TAB SQUARED
122F3 ; [.3E61.0020.0002] # CUNEIFORM SIGN TAG
122F4 ; [.3E62.0020.0002] # CUNEIFORM SIGN TAG TIMES BI
122F5 ; [.3E63.0020.0002] # CUNEIFORM SIGN TAG TIMES GUD
122F6 ; [.3E64.0020.0002] # CUNEIFORM SIGN TAG TIMES SHE
122F7 ; [.3E65.0020.0002] # CUNEIFORM SIGN TAG TIMES SHU
122F8 ; [.3E66.0020.0002] # CUNEIFORM SIGN TAG TIMES TUG2
122F9 ; [.3E67.0020.0002] # CUNEIFORM SIGN TAG TIMES UD
122FA ; [.3E68.0020.0002] # CUNEIFORM SIGN TAK4
122FB ; [.3E69.0020.0002] # CUNEIFORM SIGN TAR
122FC ; [.3E6A.0020.0002] # CUNEIFORM SIGN TE
122FD ; [.3E6B.0020.0002] # CUNEIFORM SIGN TE GUNU
122FE ; [.3E6C.0020.0002] # CUNEIFORM SIGN TI
122FF ; [.3E6D.0020.0002] # CUNEIFORM SIGN TI TENU
12300 ; [.3E6E.0020.0002] # CUNEIFORM SIGN TIL
12301 ; [.3E6F.0020.0002] # CUNEIFORM SIGN TIR
12302 ; [.3E70.0020.0002] # CUNEIFORM SIGN TIR TIMES TAK4
12303 ; [.3E71.0020.0002] # CUNEIFORM SIGN TIR OVER TIR
12304 ; [.3E72.0020.0002] # CUNEIFORM SIGN TIR OVER TIR GAD OVER GAD GAR OVER GAR
12305 ; [.3E73.0020.0002] # CUNEIFORM SIGN TU
12306 ; [.3E74.0020.0002] # CUNEIFORM SIGN TUG2
12307 ; [.3E75.0020.0002] # CUNEIFORM SIGN TUK
12308 ; [.3E76.0020.0002] # CUNEIFORM SIGN TUM
12309 ; [.3E77.0020.0002] # CUNEIFORM SIGN TUR
1230A ; [.3E78.0020.0002] # CUNEIFORM SIGN TUR OVER TUR ZA OVER ZA
1230B ; [.3E79.0020.0002] # CUNEIFORM SIGN U
1230C ; [.3E7A.0020.0002] # CUNEIFORM SIGN U GUD
1230D ; [.3E7B.0020.0002] # CUNEIFORM SIGN U U U
1230E ; [.3E7C.0020.0002] # CUNEIFORM SIGN U OVER U PA OVER PA GAR OVER GAR
1230F ; [.3E7D.0020.0002] # CUNEIFORM SIGN U OVER U SUR OVER SUR
12310 ; [.3E7E.0020.0002] # CUNEIFORM SIGN U OVER U U REVERSED OVER U REVERSED
12311 ; [.3E7F.0020.0002] # CUNEIFORM SIGN U2
12312 ; [.3E80.0020.0002] # CUNEIFORM SIGN UB
12313 ; [.3E81.0020.0002] # CUNEIFORM SIGN UD
12314 ; [.3E82.0020.0002] # CUNEIFORM SIGN UD KUSHU2
12315 ; [.3E83.0020.0002] # CUNEIFORM SIGN UD TIMES BAD
12316 ; [.3E84.0020.0002] # CUNEIFORM SIGN UD TIMES MI
12317 ; [.3E85.0020.0002] # CUNEIFORM SIGN UD TIMES U PLUS U PLUS U
12318 ; [.3E86.0020.0002] # CUNEIFORM SIGN UD TIMES U PLUS U PLUS U GUNU
12319 ; [.3E87.0020.0002] # CUNEIFORM SIGN UD GUNU
1231A ; [.3E88.0020.0002] # CUNEIFORM SIGN UD SHESHIG
1231B ; [.3E89.0020.0002] # CUNEIFORM SIGN UD SHESHIG TIMES BAD
1231C ; [.3E8A.0020.0002] # CUNEIFORM SIGN UDUG
1231D ; [.3E8B.0020.0002] # CUNEIFORM SIGN UM
1231E ; [.3E8C.0020.0002] # CUNEIFORM SIGN UM TIMES LAGAB
1231F ; [.3E8D.0020.0002] # CUNEIFORM SIGN UM TIMES ME PLUS DA
12320 ; [.3E8E.0020.0002] # CUNEIFORM SIGN UM TIMES SHA3
12321 ; [.3E8F.0020.0002] # CUNEIFORM SIGN UM TIMES U
12322 ; [.3E90.0020.0002] # CUNEIFORM SIGN UMBIN
12323 ; [.3E91.0020.0002] # CUNEIFORM SIGN UMUM
12324 ; [.3E92.0020.0002] # CUNEIFORM SIGN UMUM TIMES KASKAL
12325 ; [.3E93.0020.0002] # CUNEIFORM SIGN UMUM TIMES PA
12326 ; [.3E94.0020.0002] # CUNEIFORM SIGN UN
12327 ; [.3E95.0020.0002] # CUNEIFORM SIGN UN GUNU
12328 ; [.3E96.0020.0002] # CUNEIFORM SIGN UR
12329 ; [.3E97.0020.0002] # CUNEIFORM SIGN UR CROSSING UR
1232A ; [.3E98.0020.0002] # CUNEIFORM SIGN UR SHESHIG
1232B ; [.3E99.0020.0002] # CUNEIFORM SIGN UR2
1232C ; [.3E9A.0020.0002] # CUNEIFORM SIGN UR2 TIMES A PLUS HA
1232D ; [.3E9B.0020.0002] # CUNEIFORM SIGN UR2 TIMES A PLUS NA
1232E ; [.3E9C.0020.0002] # CUNEIFORM SIGN UR2 TIMES AL
1232F ; [.3E9D.0020.0002] # CUNEIFORM SIGN UR2 TIMES HA
12330 ; [.3E9E.0020.0002] # CUNEIFORM SIGN UR2 TIMES NUN
12331 ; [.3E9F.0020.0002] # CUNEIFORM SIGN UR2 TIMES U2
12332 ; [.3EA0.0020.0002] # CUNEIFORM SIGN UR2 TIMES U2 PLUS ASH
12333 ; [.3EA1.0020.0002] # CUNEIFORM SIGN UR2 TIMES U2 PLUS BI
12334 ; [.3EA2.0020.0002] # CUNEIFORM SIGN UR4
12335 ; [.3EA3.0020.0002] # CUNEIFORM SIGN URI
12336 ; [.3EA4.0020.0002] # CUNEIFORM SIGN URI3
12337 ; [.3EA5.0020.0002] # CUNEIFORM SIGN URU
12338 ; [.3EA6.0020.0002] # CUNEIFORM SIGN URU TIMES A
12339 ; [.3EA7.0020.0002] # CUNEIFORM SIGN URU TIMES ASHGAB
1233A ; [.3EA8.0020.0002] # CUNEIFORM SIGN URU TIMES BAR
1233B ; [.3EA9.0020.0002] # CUNEIFORM SIGN URU TIMES DUN
1233C ; [.3EAA.0020.0002] # CUNEIFORM SIGN URU TIMES GA
1233D ; [.3EAB.0020.0002] # CUNEIFORM SIGN URU TIMES GAL
1233E ; [.3EAC.0020.0002] # CUNEIFORM SIGN URU TIMES GAN2 TENU
1233F ; [.3EAD.0020.0002] # CUNEIFORM SIGN URU TIMES GAR
12340 ; [.3EAE.0020.0002] # CUNEIFORM SIGN URU TIMES GU
12341 ; [.3EAF.0020.0002] # CUNEIFORM SIGN URU TIMES HA
12342 ; [.3EB0.0020.0002] # CUNEIFORM SIGN URU TIMES IGI
12343 ; [.3EB1.0020.0002] # CUNEIFORM SIGN URU TIMES IM
12344 ; [.3EB2.0020.0002] # CUNEIFORM SIGN URU TIMES ISH
12345 ; [.3EB3.0020.0002] # CUNEIFORM SIGN URU TIMES KI
12346 ; [.3EB4.0020.0002] # CUNEIFORM SIGN URU TIMES LUM
12347 ; [.3EB5.0020.0002] # CUNEIFORM SIGN URU TIMES MIN
12348 ; [.3EB6.0020.0002] # CUNEIFORM SIGN URU TIMES PA
12349 ; [.3EB7.0020.0002] # CUNEIFORM SIGN URU TIMES SHE
1234A ; [.3EB8.0020.0002] # CUNEIFORM SIGN URU TIMES SIG4
1234B ; [.3EB9.0020.0002] # CUNEIFORM SIGN URU TIMES TU
1234C ; [.3EBA.0020.0002] # CUNEIFORM SIGN URU TIMES U PLUS GUD
1234D ; [.3EBB.0020.0002] # CUNEIFORM SIGN URU TIMES UD
1234E ; [.3EBC.0020.0002] # CUNEIFORM SIGN URU TIMES URUDA
1234F ; [.3EBD.0020.0002] # CUNEIFORM SIGN URUDA
12350 ; [.3EBE.0020.0002] # CUNEIFORM SIGN URUDA TIMES U
12351 ; [.3EBF.0020.0002] # CUNEIFORM SIGN USH
12352 ; [.3EC0.0020.0002] # CUNEIFORM SIGN USH TIMES A
12353 ; [.3EC1.0020.0002] # CUNEIFORM SIGN USH TIMES KU
12354 ; [.3EC2.0020.0002] # CUNEIFORM SIGN USH TIMES KUR
12355 ; [.3EC3.0020.0002] # CUNEIFORM SIGN USH TIMES TAK4
12356 ; [.3EC4.0020.0002] # CUNEIFORM SIGN USHX
12357 ; [.3EC5.0020.0002] # CUNEIFORM SIGN USH2
12358 ; [.3EC6.0020.0002] # CUNEIFORM SIGN USHUMX
12359 ; [.3EC7.0020.0002] # CUNEIFORM SIGN UTUKI
1235A ; [.3EC8.0020.0002] # CUNEIFORM SIGN UZ3
1235B ; [.3EC9.0020.0002] # CUNEIFORM SIGN UZ3 TIMES KASKAL
1235C ; [.3ECA.0020.0002] # CUNEIFORM SIGN UZU
1235D ; [.3ECB.0020.0002] # CUNEIFORM SIGN ZA
1235E ; [.3ECC.0020.0002] # CUNEIFORM SIGN ZA TENU
1235F ; [.3ECD.0020.0002] # CUNEIFORM SIGN ZA SQUARED TIMES KUR
12360 ; [.3ECE.0020.0002] # CUNEIFORM SIGN ZAG
12361 ; [.3ECF.0020.0002] # CUNEIFORM SIGN ZAMX
12362 ; [.3ED0.0020.0002] # CUNEIFORM SIGN ZE2
12363 ; [.3ED1.0020.0002] # CUNEIFORM SIGN ZI
12364 ; [.3ED2.0020.0002] # CUNEIFORM SIGN ZI OVER ZI
12365 ; [.3ED3.0020.0002] # CUNEIFORM SIGN ZI3
12366 ; [.3ED4.0020.0002] # CUNEIFORM SIGN ZIB
12367 ; [.3ED5.0020.0002] # CUNEIFORM SIGN ZIB KABA TENU
12368 ; [.3ED6.0020.0002] # CUNEIFORM SIGN ZIG
12369 ; [.3ED7.0020.0002] # CUNEIFORM SIGN ZIZ2
1236A ; [.3ED8.0020.0002] # CUNEIFORM SIGN ZU
1236B ; [.3ED9.0020.0002] # CUNEIFORM SIGN ZU5
1236C ; [.3EDA.0020.0002] # CUNEIFORM SIGN ZU5 TIMES A
1236D ; [.3EDB.0020.0002] # CUNEIFORM SIGN ZUBUR
1236E ; [.3EDC.0020.0002] # CUNEIFORM SIGN ZUM
13000 ; [.3EDD.0020.0002] # EGYPTIAN HIEROGLYPH A001
13001 ; [.3EDE.0020.0002] # EGYPTIAN HIEROGLYPH A002
13002 ; [.3EDF.0020.0002] # EGYPTIAN HIEROGLYPH A003
13003 ; [.3EE0.0020.0002] # EGYPTIAN HIEROGLYPH A004
13004 ; [.3EE1.0020.0002] # EGYPTIAN HIEROGLYPH A005
13005 ; [.3EE2.0020.0002] # EGYPTIAN HIEROGLYPH A005A
13006 ; [.3EE3.0020.0002] # EGYPTIAN HIEROGLYPH A006
13007 ; [.3EE4.0020.0002] # EGYPTIAN HIEROGLYPH A006A
13008 ; [.3EE5.0020.0002] # EGYPTIAN HIEROGLYPH A006B
13009 ; [.3EE6.0020.0002] # EGYPTIAN HIEROGLYPH A007
1300A ; [.3EE7.0020.0002] # EGYPTIAN HIEROGLYPH A008
1300B ; [.3EE8.0020.0002] # EGYPTIAN HIEROGLYPH A009
1300C ; [.3EE9.0020.0002] # EGYPTIAN HIEROGLYPH A010
1300D ; [.3EEA.0020.0002] # EGYPTIAN HIEROGLYPH A011
1300E ; [.3EEB.0020.0002] # EGYPTIAN HIEROGLYPH A012
1300F ; [.3EEC.0020.0002] # EGYPTIAN HIEROGLYPH A013
13010 ; [.3EED.0020.0002] # EGYPTIAN HIEROGLYPH A014
13011 ; [.3EEE.0020.0002] # EGYPTIAN HIEROGLYPH A014A
13012 ; [.3EEF.0020.0002] # EGYPTIAN HIEROGLYPH A015
13013 ; [.3EF0.0020.0002] # EGYPTIAN HIEROGLYPH A016
13014 ; [.3EF1.0020.0002] # EGYPTIAN HIEROGLYPH A017
13015 ; [.3EF2.0020.0002] # EGYPTIAN HIEROGLYPH A017A
13016 ; [.3EF3.0020.0002] # EGYPTIAN HIEROGLYPH A018
13017 ; [.3EF4.0020.0002] # EGYPTIAN HIEROGLYPH A019
13018 ; [.3EF5.0020.0002] # EGYPTIAN HIEROGLYPH A020
13019 ; [.3EF6.0020.0002] # EGYPTIAN HIEROGLYPH A021
1301A ; [.3EF7.0020.0002] # EGYPTIAN HIEROGLYPH A022
1301B ; [.3EF8.0020.0002] # EGYPTIAN HIEROGLYPH A023
1301C ; [.3EF9.0020.0002] # EGYPTIAN HIEROGLYPH A024
1301D ; [.3EFA.0020.0002] # EGYPTIAN HIEROGLYPH A025
1301E ; [.3EFB.0020.0002] # EGYPTIAN HIEROGLYPH A026
1301F ; [.3EFC.0020.0002] # EGYPTIAN HIEROGLYPH A027
13020 ; [.3EFD.0020.0002] # EGYPTIAN HIEROGLYPH A028
13021 ; [.3EFE.0020.0002] # EGYPTIAN HIEROGLYPH A029
13022 ; [.3EFF.0020.0002] # EGYPTIAN HIEROGLYPH A030
13023 ; [.3F00.0020.0002] # EGYPTIAN HIEROGLYPH A031
13024 ; [.3F01.0020.0002] # EGYPTIAN HIEROGLYPH A032
13025 ; [.3F02.0020.0002] # EGYPTIAN HIEROGLYPH A032A
13026 ; [.3F03.0020.0002] # EGYPTIAN HIEROGLYPH A033
13027 ; [.3F04.0020.0002] # EGYPTIAN HIEROGLYPH A034
13028 ; [.3F05.0020.0002] # EGYPTIAN HIEROGLYPH A035
13029 ; [.3F06.0020.0002] # EGYPTIAN HIEROGLYPH A036
1302A ; [.3F07.0020.0002] # EGYPTIAN HIEROGLYPH A037
1302B ; [.3F08.0020.0002] # EGYPTIAN HIEROGLYPH A038
1302C ; [.3F09.0020.0002] # EGYPTIAN HIEROGLYPH A039
1302D ; [.3F0A.0020.0002] # EGYPTIAN HIEROGLYPH A040
1302E ; [.3F0B.0020.0002] # EGYPTIAN HIEROGLYPH A040A
1302F ; [.3F0C.0020.0002] # EGYPTIAN HIEROGLYPH A041
13030 ; [.3F0D.0020.0002] # EGYPTIAN HIEROGLYPH A042
13031 ; [.3F0E.0020.0002] # EGYPTIAN HIEROGLYPH A042A
13032 ; [.3F0F.0020.0002] # EGYPTIAN HIEROGLYPH A043
13033 ; [.3F10.0020.0002] # EGYPTIAN HIEROGLYPH A043A
13034 ; [.3F11.0020.0002] # EGYPTIAN HIEROGLYPH A044
13035 ; [.3F12.0020.0002] # EGYPTIAN HIEROGLYPH A045
13036 ; [.3F13.0020.0002] # EGYPTIAN HIEROGLYPH A045A
13037 ; [.3F14.0020.0002] # EGYPTIAN HIEROGLYPH A046
13038 ; [.3F15.0020.0002] # EGYPTIAN HIEROGLYPH A047
13039 ; [.3F16.0020.0002] # EGYPTIAN HIEROGLYPH A048
1303A ; [.3F17.0020.0002] # EGYPTIAN HIEROGLYPH A049
1303B ; [.3F18.0020.0002] # EGYPTIAN HIEROGLYPH A050
1303C ; [.3F19.0020.0002] # EGYPTIAN HIEROGLYPH A051
1303D ; [.3F1A.0020.0002] # EGYPTIAN HIEROGLYPH A052
1303E ; [.3F1B.0020.0002] # EGYPTIAN HIEROGLYPH A053
1303F ; [.3F1C.0020.0002] # EGYPTIAN HIEROGLYPH A054
13040 ; [.3F1D.0020.0002] # EGYPTIAN HIEROGLYPH A055
13041 ; [.3F1E.0020.0002] # EGYPTIAN HIEROGLYPH A056
13042 ; [.3F1F.0020.0002] # EGYPTIAN HIEROGLYPH A057
13043 ; [.3F20.0020.0002] # EGYPTIAN HIEROGLYPH A058
13044 ; [.3F21.0020.0002] # EGYPTIAN HIEROGLYPH A059
13045 ; [.3F22.0020.0002] # EGYPTIAN HIEROGLYPH A060
13046 ; [.3F23.0020.0002] # EGYPTIAN HIEROGLYPH A061
13047 ; [.3F24.0020.0002] # EGYPTIAN HIEROGLYPH A062
13048 ; [.3F25.0020.0002] # EGYPTIAN HIEROGLYPH A063
13049 ; [.3F26.0020.0002] # EGYPTIAN HIEROGLYPH A064
1304A ; [.3F27.0020.0002] # EGYPTIAN HIEROGLYPH A065
1304B ; [.3F28.0020.0002] # EGYPTIAN HIEROGLYPH A066
1304C ; [.3F29.0020.0002] # EGYPTIAN HIEROGLYPH A067
1304D ; [.3F2A.0020.0002] # EGYPTIAN HIEROGLYPH A068
1304E ; [.3F2B.0020.0002] # EGYPTIAN HIEROGLYPH A069
1304F ; [.3F2C.0020.0002] # EGYPTIAN HIEROGLYPH A070
13050 ; [.3F2D.0020.0002] # EGYPTIAN HIEROGLYPH B001
13051 ; [.3F2E.0020.0002] # EGYPTIAN HIEROGLYPH B002
13052 ; [.3F2F.0020.0002] # EGYPTIAN HIEROGLYPH B003
13053 ; [.3F30.0020.0002] # EGYPTIAN HIEROGLYPH B004
13054 ; [.3F31.0020.0002] # EGYPTIAN HIEROGLYPH B005
13055 ; [.3F32.0020.0002] # EGYPTIAN HIEROGLYPH B005A
13056 ; [.3F33.0020.0002] # EGYPTIAN HIEROGLYPH B006
13057 ; [.3F34.0020.0002] # EGYPTIAN HIEROGLYPH B007
13058 ; [.3F35.0020.0002] # EGYPTIAN HIEROGLYPH B008
13059 ; [.3F36.0020.0002] # EGYPTIAN HIEROGLYPH B009
1305A ; [.3F37.0020.0002] # EGYPTIAN HIEROGLYPH C001
1305B ; [.3F38.0020.0002] # EGYPTIAN HIEROGLYPH C002
1305C ; [.3F39.0020.0002] # EGYPTIAN HIEROGLYPH C002A
1305D ; [.3F3A.0020.0002] # EGYPTIAN HIEROGLYPH C002B
1305E ; [.3F3B.0020.0002] # EGYPTIAN HIEROGLYPH C002C
1305F ; [.3F3C.0020.0002] # EGYPTIAN HIEROGLYPH C003
13060 ; [.3F3D.0020.0002] # EGYPTIAN HIEROGLYPH C004
13061 ; [.3F3E.0020.0002] # EGYPTIAN HIEROGLYPH C005
13062 ; [.3F3F.0020.0002] # EGYPTIAN HIEROGLYPH C006
13063 ; [.3F40.0020.0002] # EGYPTIAN HIEROGLYPH C007
13064 ; [.3F41.0020.0002] # EGYPTIAN HIEROGLYPH C008
13065 ; [.3F42.0020.0002] # EGYPTIAN HIEROGLYPH C009
13066 ; [.3F43.0020.0002] # EGYPTIAN HIEROGLYPH C010
13067 ; [.3F44.0020.0002] # EGYPTIAN HIEROGLYPH C010A
13068 ; [.3F45.0020.0002] # EGYPTIAN HIEROGLYPH C011
13069 ; [.3F46.0020.0002] # EGYPTIAN HIEROGLYPH C012
1306A ; [.3F47.0020.0002] # EGYPTIAN HIEROGLYPH C013
1306B ; [.3F48.0020.0002] # EGYPTIAN HIEROGLYPH C014
1306C ; [.3F49.0020.0002] # EGYPTIAN HIEROGLYPH C015
1306D ; [.3F4A.0020.0002] # EGYPTIAN HIEROGLYPH C016
1306E ; [.3F4B.0020.0002] # EGYPTIAN HIEROGLYPH C017
1306F ; [.3F4C.0020.0002] # EGYPTIAN HIEROGLYPH C018
13070 ; [.3F4D.0020.0002] # EGYPTIAN HIEROGLYPH C019
13071 ; [.3F4E.0020.0002] # EGYPTIAN HIEROGLYPH C020
13072 ; [.3F4F.0020.0002] # EGYPTIAN HIEROGLYPH C021
13073 ; [.3F50.0020.0002] # EGYPTIAN HIEROGLYPH C022
13074 ; [.3F51.0020.0002] # EGYPTIAN HIEROGLYPH C023
13075 ; [.3F52.0020.0002] # EGYPTIAN HIEROGLYPH C024
13076 ; [.3F53.0020.0002] # EGYPTIAN HIEROGLYPH D001
13077 ; [.3F54.0020.0002] # EGYPTIAN HIEROGLYPH D002
13078 ; [.3F55.0020.0002] # EGYPTIAN HIEROGLYPH D003
13079 ; [.3F56.0020.0002] # EGYPTIAN HIEROGLYPH D004
1307A ; [.3F57.0020.0002] # EGYPTIAN HIEROGLYPH D005
1307B ; [.3F58.0020.0002] # EGYPTIAN HIEROGLYPH D006
1307C ; [.3F59.0020.0002] # EGYPTIAN HIEROGLYPH D007
1307D ; [.3F5A.0020.0002] # EGYPTIAN HIEROGLYPH D008
1307E ; [.3F5B.0020.0002] # EGYPTIAN HIEROGLYPH D008A
1307F ; [.3F5C.0020.0002] # EGYPTIAN HIEROGLYPH D009
13080 ; [.3F5D.0020.0002] # EGYPTIAN HIEROGLYPH D010
13081 ; [.3F5E.0020.0002] # EGYPTIAN HIEROGLYPH D011
13082 ; [.3F5F.0020.0002] # EGYPTIAN HIEROGLYPH D012
13083 ; [.3F60.0020.0002] # EGYPTIAN HIEROGLYPH D013
13084 ; [.3F61.0020.0002] # EGYPTIAN HIEROGLYPH D014
13085 ; [.3F62.0020.0002] # EGYPTIAN HIEROGLYPH D015
13086 ; [.3F63.0020.0002] # EGYPTIAN HIEROGLYPH D016
13087 ; [.3F64.0020.0002] # EGYPTIAN HIEROGLYPH D017
13088 ; [.3F65.0020.0002] # EGYPTIAN HIEROGLYPH D018
13089 ; [.3F66.0020.0002] # EGYPTIAN HIEROGLYPH D019
1308A ; [.3F67.0020.0002] # EGYPTIAN HIEROGLYPH D020
1308B ; [.3F68.0020.0002] # EGYPTIAN HIEROGLYPH D021
1308C ; [.3F69.0020.0002] # EGYPTIAN HIEROGLYPH D022
1308D ; [.3F6A.0020.0002] # EGYPTIAN HIEROGLYPH D023
1308E ; [.3F6B.0020.0002] # EGYPTIAN HIEROGLYPH D024
1308F ; [.3F6C.0020.0002] # EGYPTIAN HIEROGLYPH D025
13090 ; [.3F6D.0020.0002] # EGYPTIAN HIEROGLYPH D026
13091 ; [.3F6E.0020.0002] # EGYPTIAN HIEROGLYPH D027
13092 ; [.3F6F.0020.0002] # EGYPTIAN HIEROGLYPH D027A
13093 ; [.3F70.0020.0002] # EGYPTIAN HIEROGLYPH D028
13094 ; [.3F71.0020.0002] # EGYPTIAN HIEROGLYPH D029
13095 ; [.3F72.0020.0002] # EGYPTIAN HIEROGLYPH D030
13096 ; [.3F73.0020.0002] # EGYPTIAN HIEROGLYPH D031
13097 ; [.3F74.0020.0002] # EGYPTIAN HIEROGLYPH D031A
13098 ; [.3F75.0020.0002] # EGYPTIAN HIEROGLYPH D032
13099 ; [.3F76.0020.0002] # EGYPTIAN HIEROGLYPH D033
1309A ; [.3F77.0020.0002] # EGYPTIAN HIEROGLYPH D034
1309B ; [.3F78.0020.0002] # EGYPTIAN HIEROGLYPH D034A
1309C ; [.3F79.0020.0002] # EGYPTIAN HIEROGLYPH D035
1309D ; [.3F7A.0020.0002] # EGYPTIAN HIEROGLYPH D036
1309E ; [.3F7B.0020.0002] # EGYPTIAN HIEROGLYPH D037
1309F ; [.3F7C.0020.0002] # EGYPTIAN HIEROGLYPH D038
130A0 ; [.3F7D.0020.0002] # EGYPTIAN HIEROGLYPH D039
130A1 ; [.3F7E.0020.0002] # EGYPTIAN HIEROGLYPH D040
130A2 ; [.3F7F.0020.0002] # EGYPTIAN HIEROGLYPH D041
130A3 ; [.3F80.0020.0002] # EGYPTIAN HIEROGLYPH D042
130A4 ; [.3F81.0020.0002] # EGYPTIAN HIEROGLYPH D043
130A5 ; [.3F82.0020.0002] # EGYPTIAN HIEROGLYPH D044
130A6 ; [.3F83.0020.0002] # EGYPTIAN HIEROGLYPH D045
130A7 ; [.3F84.0020.0002] # EGYPTIAN HIEROGLYPH D046
130A8 ; [.3F85.0020.0002] # EGYPTIAN HIEROGLYPH D046A
130A9 ; [.3F86.0020.0002] # EGYPTIAN HIEROGLYPH D047
130AA ; [.3F87.0020.0002] # EGYPTIAN HIEROGLYPH D048
130AB ; [.3F88.0020.0002] # EGYPTIAN HIEROGLYPH D048A
130AC ; [.3F89.0020.0002] # EGYPTIAN HIEROGLYPH D049
130AD ; [.3F8A.0020.0002] # EGYPTIAN HIEROGLYPH D050
130AE ; [.3F8B.0020.0002] # EGYPTIAN HIEROGLYPH D050A
130AF ; [.3F8C.0020.0002] # EGYPTIAN HIEROGLYPH D050B
130B0 ; [.3F8D.0020.0002] # EGYPTIAN HIEROGLYPH D050C
130B1 ; [.3F8E.0020.0002] # EGYPTIAN HIEROGLYPH D050D
130B2 ; [.3F8F.0020.0002] # EGYPTIAN HIEROGLYPH D050E
130B3 ; [.3F90.0020.0002] # EGYPTIAN HIEROGLYPH D050F
130B4 ; [.3F91.0020.0002] # EGYPTIAN HIEROGLYPH D050G
130B5 ; [.3F92.0020.0002] # EGYPTIAN HIEROGLYPH D050H
130B6 ; [.3F93.0020.0002] # EGYPTIAN HIEROGLYPH D050I
130B7 ; [.3F94.0020.0002] # EGYPTIAN HIEROGLYPH D051
130B8 ; [.3F95.0020.0002] # EGYPTIAN HIEROGLYPH D052
130B9 ; [.3F96.0020.0002] # EGYPTIAN HIEROGLYPH D052A
130BA ; [.3F97.0020.0002] # EGYPTIAN HIEROGLYPH D053
130BB ; [.3F98.0020.0002] # EGYPTIAN HIEROGLYPH D054
130BC ; [.3F99.0020.0002] # EGYPTIAN HIEROGLYPH D054A
130BD ; [.3F9A.0020.0002] # EGYPTIAN HIEROGLYPH D055
130BE ; [.3F9B.0020.0002] # EGYPTIAN HIEROGLYPH D056
130BF ; [.3F9C.0020.0002] # EGYPTIAN HIEROGLYPH D057
130C0 ; [.3F9D.0020.0002] # EGYPTIAN HIEROGLYPH D058
130C1 ; [.3F9E.0020.0002] # EGYPTIAN HIEROGLYPH D059
130C2 ; [.3F9F.0020.0002] # EGYPTIAN HIEROGLYPH D060
130C3 ; [.3FA0.0020.0002] # EGYPTIAN HIEROGLYPH D061
130C4 ; [.3FA1.0020.0002] # EGYPTIAN HIEROGLYPH D062
130C5 ; [.3FA2.0020.0002] # EGYPTIAN HIEROGLYPH D063
130C6 ; [.3FA3.0020.0002] # EGYPTIAN HIEROGLYPH D064
130C7 ; [.3FA4.0020.0002] # EGYPTIAN HIEROGLYPH D065
130C8 ; [.3FA5.0020.0002] # EGYPTIAN HIEROGLYPH D066
130C9 ; [.3FA6.0020.0002] # EGYPTIAN HIEROGLYPH D067
130CA ; [.3FA7.0020.0002] # EGYPTIAN HIEROGLYPH D067A
130CB ; [.3FA8.0020.0002] # EGYPTIAN HIEROGLYPH D067B
130CC ; [.3FA9.0020.0002] # EGYPTIAN HIEROGLYPH D067C
130CD ; [.3FAA.0020.0002] # EGYPTIAN HIEROGLYPH D067D
130CE ; [.3FAB.0020.0002] # EGYPTIAN HIEROGLYPH D067E
130CF ; [.3FAC.0020.0002] # EGYPTIAN HIEROGLYPH D067F
130D0 ; [.3FAD.0020.0002] # EGYPTIAN HIEROGLYPH D067G
130D1 ; [.3FAE.0020.0002] # EGYPTIAN HIEROGLYPH D067H
130D2 ; [.3FAF.0020.0002] # EGYPTIAN HIEROGLYPH E001
130D3 ; [.3FB0.0020.0002] # EGYPTIAN HIEROGLYPH E002
130D4 ; [.3FB1.0020.0002] # EGYPTIAN HIEROGLYPH E003
130D5 ; [.3FB2.0020.0002] # EGYPTIAN HIEROGLYPH E004
130D6 ; [.3FB3.0020.0002] # EGYPTIAN HIEROGLYPH E005
130D7 ; [.3FB4.0020.0002] # EGYPTIAN HIEROGLYPH E006
130D8 ; [.3FB5.0020.0002] # EGYPTIAN HIEROGLYPH E007
130D9 ; [.3FB6.0020.0002] # EGYPTIAN HIEROGLYPH E008
130DA ; [.3FB7.0020.0002] # EGYPTIAN HIEROGLYPH E008A
130DB ; [.3FB8.0020.0002] # EGYPTIAN HIEROGLYPH E009
130DC ; [.3FB9.0020.0002] # EGYPTIAN HIEROGLYPH E009A
130DD ; [.3FBA.0020.0002] # EGYPTIAN HIEROGLYPH E010
130DE ; [.3FBB.0020.0002] # EGYPTIAN HIEROGLYPH E011
130DF ; [.3FBC.0020.0002] # EGYPTIAN HIEROGLYPH E012
130E0 ; [.3FBD.0020.0002] # EGYPTIAN HIEROGLYPH E013
130E1 ; [.3FBE.0020.0002] # EGYPTIAN HIEROGLYPH E014
130E2 ; [.3FBF.0020.0002] # EGYPTIAN HIEROGLYPH E015
130E3 ; [.3FC0.0020.0002] # EGYPTIAN HIEROGLYPH E016
130E4 ; [.3FC1.0020.0002] # EGYPTIAN HIEROGLYPH E016A
130E5 ; [.3FC2.0020.0002] # EGYPTIAN HIEROGLYPH E017
130E6 ; [.3FC3.0020.0002] # EGYPTIAN HIEROGLYPH E017A
130E7 ; [.3FC4.0020.0002] # EGYPTIAN HIEROGLYPH E018
130E8 ; [.3FC5.0020.0002] # EGYPTIAN HIEROGLYPH E019
130E9 ; [.3FC6.0020.0002] # EGYPTIAN HIEROGLYPH E020
130EA ; [.3FC7.0020.0002] # EGYPTIAN HIEROGLYPH E020A
130EB ; [.3FC8.0020.0002] # EGYPTIAN HIEROGLYPH E021
130EC ; [.3FC9.0020.0002] # EGYPTIAN HIEROGLYPH E022
130ED ; [.3FCA.0020.0002] # EGYPTIAN HIEROGLYPH E023
130EE ; [.3FCB.0020.0002] # EGYPTIAN HIEROGLYPH E024
130EF ; [.3FCC.0020.0002] # EGYPTIAN HIEROGLYPH E025
130F0 ; [.3FCD.0020.0002] # EGYPTIAN HIEROGLYPH E026
130F1 ; [.3FCE.0020.0002] # EGYPTIAN HIEROGLYPH E027
130F2 ; [.3FCF.0020.0002] # EGYPTIAN HIEROGLYPH E028
130F3 ; [.3FD0.0020.0002] # EGYPTIAN HIEROGLYPH E028A
130F4 ; [.3FD1.0020.0002] # EGYPTIAN HIEROGLYPH E029
130F5 ; [.3FD2.0020.0002] # EGYPTIAN HIEROGLYPH E030
130F6 ; [.3FD3.0020.0002] # EGYPTIAN HIEROGLYPH E031
130F7 ; [.3FD4.0020.0002] # EGYPTIAN HIEROGLYPH E032
130F8 ; [.3FD5.0020.0002] # EGYPTIAN HIEROGLYPH E033
130F9 ; [.3FD6.0020.0002] # EGYPTIAN HIEROGLYPH E034
130FA ; [.3FD7.0020.0002] # EGYPTIAN HIEROGLYPH E034A
130FB ; [.3FD8.0020.0002] # EGYPTIAN HIEROGLYPH E036
130FC ; [.3FD9.0020.0002] # EGYPTIAN HIEROGLYPH E037
130FD ; [.3FDA.0020.0002] # EGYPTIAN HIEROGLYPH E038
130FE ; [.3FDB.0020.0002] # EGYPTIAN HIEROGLYPH F001
130FF ; [.3FDC.0020.0002] # EGYPTIAN HIEROGLYPH F001A
13100 ; [.3FDD.0020.0002] # EGYPTIAN HIEROGLYPH F002
13101 ; [.3FDE.0020.0002] # EGYPTIAN HIEROGLYPH F003
13102 ; [.3FDF.0020.0002] # EGYPTIAN HIEROGLYPH F004
13103 ; [.3FE0.0020.0002] # EGYPTIAN HIEROGLYPH F005
13104 ; [.3FE1.0020.0002] # EGYPTIAN HIEROGLYPH F006
13105 ; [.3FE2.0020.0002] # EGYPTIAN HIEROGLYPH F007
13106 ; [.3FE3.0020.0002] # EGYPTIAN HIEROGLYPH F008
13107 ; [.3FE4.0020.0002] # EGYPTIAN HIEROGLYPH F009
13108 ; [.3FE5.0020.0002] # EGYPTIAN HIEROGLYPH F010
13109 ; [.3FE6.0020.0002] # EGYPTIAN HIEROGLYPH F011
1310A ; [.3FE7.0020.0002] # EGYPTIAN HIEROGLYPH F012
1310B ; [.3FE8.0020.0002] # EGYPTIAN HIEROGLYPH F013
1310C ; [.3FE9.0020.0002] # EGYPTIAN HIEROGLYPH F013A
1310D ; [.3FEA.0020.0002] # EGYPTIAN HIEROGLYPH F014
1310E ; [.3FEB.0020.0002] # EGYPTIAN HIEROGLYPH F015
1310F ; [.3FEC.0020.0002] # EGYPTIAN HIEROGLYPH F016
13110 ; [.3FED.0020.0002] # EGYPTIAN HIEROGLYPH F017
13111 ; [.3FEE.0020.0002] # EGYPTIAN HIEROGLYPH F018
13112 ; [.3FEF.0020.0002] # EGYPTIAN HIEROGLYPH F019
13113 ; [.3FF0.0020.0002] # EGYPTIAN HIEROGLYPH F020
13114 ; [.3FF1.0020.0002] # EGYPTIAN HIEROGLYPH F021
13115 ; [.3FF2.0020.0002] # EGYPTIAN HIEROGLYPH F021A
13116 ; [.3FF3.0020.0002] # EGYPTIAN HIEROGLYPH F022
13117 ; [.3FF4.0020.0002] # EGYPTIAN HIEROGLYPH F023
13118 ; [.3FF5.0020.0002] # EGYPTIAN HIEROGLYPH F024
13119 ; [.3FF6.0020.0002] # EGYPTIAN HIEROGLYPH F025
1311A ; [.3FF7.0020.0002] # EGYPTIAN HIEROGLYPH F026
1311B ; [.3FF8.0020.0002] # EGYPTIAN HIEROGLYPH F027
1311C ; [.3FF9.0020.0002] # EGYPTIAN HIEROGLYPH F028
1311D ; [.3FFA.0020.0002] # EGYPTIAN HIEROGLYPH F029
1311E ; [.3FFB.0020.0002] # EGYPTIAN HIEROGLYPH F030
1311F ; [.3FFC.0020.0002] # EGYPTIAN HIEROGLYPH F031
13120 ; [.3FFD.0020.0002] # EGYPTIAN HIEROGLYPH F031A
13121 ; [.3FFE.0020.0002] # EGYPTIAN HIEROGLYPH F032
13122 ; [.3FFF.0020.0002] # EGYPTIAN HIEROGLYPH F033
13123 ; [.4000.0020.0002] # EGYPTIAN HIEROGLYPH F034
13124 ; [.4001.0020.0002] # EGYPTIAN HIEROGLYPH F035
13125 ; [.4002.0020.0002] # EGYPTIAN HIEROGLYPH F036
13126 ; [.4003.0020.0002] # EGYPTIAN HIEROGLYPH F037
13127 ; [.4004.0020.0002] # EGYPTIAN HIEROGLYPH F037A
13128 ; [.4005.0020.0002] # EGYPTIAN HIEROGLYPH F038
13129 ; [.4006.0020.0002] # EGYPTIAN HIEROGLYPH F038A
1312A ; [.4007.0020.0002] # EGYPTIAN HIEROGLYPH F039
1312B ; [.4008.0020.0002] # EGYPTIAN HIEROGLYPH F040
1312C ; [.4009.0020.0002] # EGYPTIAN HIEROGLYPH F041
1312D ; [.400A.0020.0002] # EGYPTIAN HIEROGLYPH F042
1312E ; [.400B.0020.0002] # EGYPTIAN HIEROGLYPH F043
1312F ; [.400C.0020.0002] # EGYPTIAN HIEROGLYPH F044
13130 ; [.400D.0020.0002] # EGYPTIAN HIEROGLYPH F045
13131 ; [.400E.0020.0002] # EGYPTIAN HIEROGLYPH F045A
13132 ; [.400F.0020.0002] # EGYPTIAN HIEROGLYPH F046
13133 ; [.4010.0020.0002] # EGYPTIAN HIEROGLYPH F046A
13134 ; [.4011.0020.0002] # EGYPTIAN HIEROGLYPH F047
13135 ; [.4012.0020.0002] # EGYPTIAN HIEROGLYPH F047A
13136 ; [.4013.0020.0002] # EGYPTIAN HIEROGLYPH F048
13137 ; [.4014.0020.0002] # EGYPTIAN HIEROGLYPH F049
13138 ; [.4015.0020.0002] # EGYPTIAN HIEROGLYPH F050
13139 ; [.4016.0020.0002] # EGYPTIAN HIEROGLYPH F051
1313A ; [.4017.0020.0002] # EGYPTIAN HIEROGLYPH F051A
1313B ; [.4018.0020.0002] # EGYPTIAN HIEROGLYPH F051B
1313C ; [.4019.0020.0002] # EGYPTIAN HIEROGLYPH F051C
1313D ; [.401A.0020.0002] # EGYPTIAN HIEROGLYPH F052
1313E ; [.401B.0020.0002] # EGYPTIAN HIEROGLYPH F053
1313F ; [.401C.0020.0002] # EGYPTIAN HIEROGLYPH G001
13140 ; [.401D.0020.0002] # EGYPTIAN HIEROGLYPH G002
13141 ; [.401E.0020.0002] # EGYPTIAN HIEROGLYPH G003
13142 ; [.401F.0020.0002] # EGYPTIAN HIEROGLYPH G004
13143 ; [.4020.0020.0002] # EGYPTIAN HIEROGLYPH G005
13144 ; [.4021.0020.0002] # EGYPTIAN HIEROGLYPH G006
13145 ; [.4022.0020.0002] # EGYPTIAN HIEROGLYPH G006A
13146 ; [.4023.0020.0002] # EGYPTIAN HIEROGLYPH G007
13147 ; [.4024.0020.0002] # EGYPTIAN HIEROGLYPH G007A
13148 ; [.4025.0020.0002] # EGYPTIAN HIEROGLYPH G007B
13149 ; [.4026.0020.0002] # EGYPTIAN HIEROGLYPH G008
1314A ; [.4027.0020.0002] # EGYPTIAN HIEROGLYPH G009
1314B ; [.4028.0020.0002] # EGYPTIAN HIEROGLYPH G010
1314C ; [.4029.0020.0002] # EGYPTIAN HIEROGLYPH G011
1314D ; [.402A.0020.0002] # EGYPTIAN HIEROGLYPH G011A
1314E ; [.402B.0020.0002] # EGYPTIAN HIEROGLYPH G012
1314F ; [.402C.0020.0002] # EGYPTIAN HIEROGLYPH G013
13150 ; [.402D.0020.0002] # EGYPTIAN HIEROGLYPH G014
13151 ; [.402E.0020.0002] # EGYPTIAN HIEROGLYPH G015
13152 ; [.402F.0020.0002] # EGYPTIAN HIEROGLYPH G016
13153 ; [.4030.0020.0002] # EGYPTIAN HIEROGLYPH G017
13154 ; [.4031.0020.0002] # EGYPTIAN HIEROGLYPH G018
13155 ; [.4032.0020.0002] # EGYPTIAN HIEROGLYPH G019
13156 ; [.4033.0020.0002] # EGYPTIAN HIEROGLYPH G020
13157 ; [.4034.0020.0002] # EGYPTIAN HIEROGLYPH G020A
13158 ; [.4035.0020.0002] # EGYPTIAN HIEROGLYPH G021
13159 ; [.4036.0020.0002] # EGYPTIAN HIEROGLYPH G022
1315A ; [.4037.0020.0002] # EGYPTIAN HIEROGLYPH G023
1315B ; [.4038.0020.0002] # EGYPTIAN HIEROGLYPH G024
1315C ; [.4039.0020.0002] # EGYPTIAN HIEROGLYPH G025
1315D ; [.403A.0020.0002] # EGYPTIAN HIEROGLYPH G026
1315E ; [.403B.0020.0002] # EGYPTIAN HIEROGLYPH G026A
1315F ; [.403C.0020.0002] # EGYPTIAN HIEROGLYPH G027
13160 ; [.403D.0020.0002] # EGYPTIAN HIEROGLYPH G028
13161 ; [.403E.0020.0002] # EGYPTIAN HIEROGLYPH G029
13162 ; [.403F.0020.0002] # EGYPTIAN HIEROGLYPH G030
13163 ; [.4040.0020.0002] # EGYPTIAN HIEROGLYPH G031
13164 ; [.4041.0020.0002] # EGYPTIAN HIEROGLYPH G032
13165 ; [.4042.0020.0002] # EGYPTIAN HIEROGLYPH G033
13166 ; [.4043.0020.0002] # EGYPTIAN HIEROGLYPH G034
13167 ; [.4044.0020.0002] # EGYPTIAN HIEROGLYPH G035
13168 ; [.4045.0020.0002] # EGYPTIAN HIEROGLYPH G036
13169 ; [.4046.0020.0002] # EGYPTIAN HIEROGLYPH G036A
1316A ; [.4047.0020.0002] # EGYPTIAN HIEROGLYPH G037
1316B ; [.4048.0020.0002] # EGYPTIAN HIEROGLYPH G037A
1316C ; [.4049.0020.0002] # EGYPTIAN HIEROGLYPH G038
1316D ; [.404A.0020.0002] # EGYPTIAN HIEROGLYPH G039
1316E ; [.404B.0020.0002] # EGYPTIAN HIEROGLYPH G040
1316F ; [.404C.0020.0002] # EGYPTIAN HIEROGLYPH G041
13170 ; [.404D.0020.0002] # EGYPTIAN HIEROGLYPH G042
13171 ; [.404E.0020.0002] # EGYPTIAN HIEROGLYPH G043
13172 ; [.404F.0020.0002] # EGYPTIAN HIEROGLYPH G043A
13173 ; [.4050.0020.0002] # EGYPTIAN HIEROGLYPH G044
13174 ; [.4051.0020.0002] # EGYPTIAN HIEROGLYPH G045
13175 ; [.4052.0020.0002] # EGYPTIAN HIEROGLYPH G045A
13176 ; [.4053.0020.0002] # EGYPTIAN HIEROGLYPH G046
13177 ; [.4054.0020.0002] # EGYPTIAN HIEROGLYPH G047
13178 ; [.4055.0020.0002] # EGYPTIAN HIEROGLYPH G048
13179 ; [.4056.0020.0002] # EGYPTIAN HIEROGLYPH G049
1317A ; [.4057.0020.0002] # EGYPTIAN HIEROGLYPH G050
1317B ; [.4058.0020.0002] # EGYPTIAN HIEROGLYPH G051
1317C ; [.4059.0020.0002] # EGYPTIAN HIEROGLYPH G052
1317D ; [.405A.0020.0002] # EGYPTIAN HIEROGLYPH G053
1317E ; [.405B.0020.0002] # EGYPTIAN HIEROGLYPH G054
1317F ; [.405C.0020.0002] # EGYPTIAN HIEROGLYPH H001
13180 ; [.405D.0020.0002] # EGYPTIAN HIEROGLYPH H002
13181 ; [.405E.0020.0002] # EGYPTIAN HIEROGLYPH H003
13182 ; [.405F.0020.0002] # EGYPTIAN HIEROGLYPH H004
13183 ; [.4060.0020.0002] # EGYPTIAN HIEROGLYPH H005
13184 ; [.4061.0020.0002] # EGYPTIAN HIEROGLYPH H006
13185 ; [.4062.0020.0002] # EGYPTIAN HIEROGLYPH H006A
13186 ; [.4063.0020.0002] # EGYPTIAN HIEROGLYPH H007
13187 ; [.4064.0020.0002] # EGYPTIAN HIEROGLYPH H008
13188 ; [.4065.0020.0002] # EGYPTIAN HIEROGLYPH I001
13189 ; [.4066.0020.0002] # EGYPTIAN HIEROGLYPH I002
1318A ; [.4067.0020.0002] # EGYPTIAN HIEROGLYPH I003
1318B ; [.4068.0020.0002] # EGYPTIAN HIEROGLYPH I004
1318C ; [.4069.0020.0002] # EGYPTIAN HIEROGLYPH I005
1318D ; [.406A.0020.0002] # EGYPTIAN HIEROGLYPH I005A
1318E ; [.406B.0020.0002] # EGYPTIAN HIEROGLYPH I006
1318F ; [.406C.0020.0002] # EGYPTIAN HIEROGLYPH I007
13190 ; [.406D.0020.0002] # EGYPTIAN HIEROGLYPH I008
13191 ; [.406E.0020.0002] # EGYPTIAN HIEROGLYPH I009
13192 ; [.406F.0020.0002] # EGYPTIAN HIEROGLYPH I009A
13193 ; [.4070.0020.0002] # EGYPTIAN HIEROGLYPH I010
13194 ; [.4071.0020.0002] # EGYPTIAN HIEROGLYPH I010A
13195 ; [.4072.0020.0002] # EGYPTIAN HIEROGLYPH I011
13196 ; [.4073.0020.0002] # EGYPTIAN HIEROGLYPH I011A
13197 ; [.4074.0020.0002] # EGYPTIAN HIEROGLYPH I012
13198 ; [.4075.0020.0002] # EGYPTIAN HIEROGLYPH I013
13199 ; [.4076.0020.0002] # EGYPTIAN HIEROGLYPH I014
1319A ; [.4077.0020.0002] # EGYPTIAN HIEROGLYPH I015
1319B ; [.4078.0020.0002] # EGYPTIAN HIEROGLYPH K001
1319C ; [.4079.0020.0002] # EGYPTIAN HIEROGLYPH K002
1319D ; [.407A.0020.0002] # EGYPTIAN HIEROGLYPH K003
1319E ; [.407B.0020.0002] # EGYPTIAN HIEROGLYPH K004
1319F ; [.407C.0020.0002] # EGYPTIAN HIEROGLYPH K005
131A0 ; [.407D.0020.0002] # EGYPTIAN HIEROGLYPH K006
131A1 ; [.407E.0020.0002] # EGYPTIAN HIEROGLYPH K007
131A2 ; [.407F.0020.0002] # EGYPTIAN HIEROGLYPH K008
131A3 ; [.4080.0020.0002] # EGYPTIAN HIEROGLYPH L001
131A4 ; [.4081.0020.0002] # EGYPTIAN HIEROGLYPH L002
131A5 ; [.4082.0020.0002] # EGYPTIAN HIEROGLYPH L002A
131A6 ; [.4083.0020.0002] # EGYPTIAN HIEROGLYPH L003
131A7 ; [.4084.0020.0002] # EGYPTIAN HIEROGLYPH L004
131A8 ; [.4085.0020.0002] # EGYPTIAN HIEROGLYPH L005
131A9 ; [.4086.0020.0002] # EGYPTIAN HIEROGLYPH L006
131AA ; [.4087.0020.0002] # EGYPTIAN HIEROGLYPH L006A
131AB ; [.4088.0020.0002] # EGYPTIAN HIEROGLYPH L007
131AC ; [.4089.0020.0002] # EGYPTIAN HIEROGLYPH L008
131AD ; [.408A.0020.0002] # EGYPTIAN HIEROGLYPH M001
131AE ; [.408B.0020.0002] # EGYPTIAN HIEROGLYPH M001A
131AF ; [.408C.0020.0002] # EGYPTIAN HIEROGLYPH M001B
131B0 ; [.408D.0020.0002] # EGYPTIAN HIEROGLYPH M002
131B1 ; [.408E.0020.0002] # EGYPTIAN HIEROGLYPH M003
131B2 ; [.408F.0020.0002] # EGYPTIAN HIEROGLYPH M003A
131B3 ; [.4090.0020.0002] # EGYPTIAN HIEROGLYPH M004
131B4 ; [.4091.0020.0002] # EGYPTIAN HIEROGLYPH M005
131B5 ; [.4092.0020.0002] # EGYPTIAN HIEROGLYPH M006
131B6 ; [.4093.0020.0002] # EGYPTIAN HIEROGLYPH M007
131B7 ; [.4094.0020.0002] # EGYPTIAN HIEROGLYPH M008
131B8 ; [.4095.0020.0002] # EGYPTIAN HIEROGLYPH M009
131B9 ; [.4096.0020.0002] # EGYPTIAN HIEROGLYPH M010
131BA ; [.4097.0020.0002] # EGYPTIAN HIEROGLYPH M010A
131BB ; [.4098.0020.0002] # EGYPTIAN HIEROGLYPH M011
131BC ; [.4099.0020.0002] # EGYPTIAN HIEROGLYPH M012
131BD ; [.409A.0020.0002] # EGYPTIAN HIEROGLYPH M012A
131BE ; [.409B.0020.0002] # EGYPTIAN HIEROGLYPH M012B
131BF ; [.409C.0020.0002] # EGYPTIAN HIEROGLYPH M012C
131C0 ; [.409D.0020.0002] # EGYPTIAN HIEROGLYPH M012D
131C1 ; [.409E.0020.0002] # EGYPTIAN HIEROGLYPH M012E
131C2 ; [.409F.0020.0002] # EGYPTIAN HIEROGLYPH M012F
131C3 ; [.40A0.0020.0002] # EGYPTIAN HIEROGLYPH M012G
131C4 ; [.40A1.0020.0002] # EGYPTIAN HIEROGLYPH M012H
131C5 ; [.40A2.0020.0002] # EGYPTIAN HIEROGLYPH M013
131C6 ; [.40A3.0020.0002] # EGYPTIAN HIEROGLYPH M014
131C7 ; [.40A4.0020.0002] # EGYPTIAN HIEROGLYPH M015
131C8 ; [.40A5.0020.0002] # EGYPTIAN HIEROGLYPH M015A
131C9 ; [.40A6.0020.0002] # EGYPTIAN HIEROGLYPH M016
131CA ; [.40A7.0020.0002] # EGYPTIAN HIEROGLYPH M016A
131CB ; [.40A8.0020.0002] # EGYPTIAN HIEROGLYPH M017
131CC ; [.40A9.0020.0002] # EGYPTIAN HIEROGLYPH M017A
131CD ; [.40AA.0020.0002] # EGYPTIAN HIEROGLYPH M018
131CE ; [.40AB.0020.0002] # EGYPTIAN HIEROGLYPH M019
131CF ; [.40AC.0020.0002] # EGYPTIAN HIEROGLYPH M020
131D0 ; [.40AD.0020.0002] # EGYPTIAN HIEROGLYPH M021
131D1 ; [.40AE.0020.0002] # EGYPTIAN HIEROGLYPH M022
131D2 ; [.40AF.0020.0002] # EGYPTIAN HIEROGLYPH M022A
131D3 ; [.40B0.0020.0002] # EGYPTIAN HIEROGLYPH M023
131D4 ; [.40B1.0020.0002] # EGYPTIAN HIEROGLYPH M024
131D5 ; [.40B2.0020.0002] # EGYPTIAN HIEROGLYPH M024A
131D6 ; [.40B3.0020.0002] # EGYPTIAN HIEROGLYPH M025
131D7 ; [.40B4.0020.0002] # EGYPTIAN HIEROGLYPH M026
131D8 ; [.40B5.0020.0002] # EGYPTIAN HIEROGLYPH M027
131D9 ; [.40B6.0020.0002] # EGYPTIAN HIEROGLYPH M028
131DA ; [.40B7.0020.0002] # EGYPTIAN HIEROGLYPH M028A
131DB ; [.40B8.0020.0002] # EGYPTIAN HIEROGLYPH M029
131DC ; [.40B9.0020.0002] # EGYPTIAN HIEROGLYPH M030
131DD ; [.40BA.0020.0002] # EGYPTIAN HIEROGLYPH M031
131DE ; [.40BB.0020.0002] # EGYPTIAN HIEROGLYPH M031A
131DF ; [.40BC.0020.0002] # EGYPTIAN HIEROGLYPH M032
131E0 ; [.40BD.0020.0002] # EGYPTIAN HIEROGLYPH M033
131E1 ; [.40BE.0020.0002] # EGYPTIAN HIEROGLYPH M033A
131E2 ; [.40BF.0020.0002] # EGYPTIAN HIEROGLYPH M033B
131E3 ; [.40C0.0020.0002] # EGYPTIAN HIEROGLYPH M034
131E4 ; [.40C1.0020.0002] # EGYPTIAN HIEROGLYPH M035
131E5 ; [.40C2.0020.0002] # EGYPTIAN HIEROGLYPH M036
131E6 ; [.40C3.0020.0002] # EGYPTIAN HIEROGLYPH M037
131E7 ; [.40C4.0020.0002] # EGYPTIAN HIEROGLYPH M038
131E8 ; [.40C5.0020.0002] # EGYPTIAN HIEROGLYPH M039
131E9 ; [.40C6.0020.0002] # EGYPTIAN HIEROGLYPH M040
131EA ; [.40C7.0020.0002] # EGYPTIAN HIEROGLYPH M040A
131EB ; [.40C8.0020.0002] # EGYPTIAN HIEROGLYPH M041
131EC ; [.40C9.0020.0002] # EGYPTIAN HIEROGLYPH M042
131ED ; [.40CA.0020.0002] # EGYPTIAN HIEROGLYPH M043
131EE ; [.40CB.0020.0002] # EGYPTIAN HIEROGLYPH M044
131EF ; [.40CC.0020.0002] # EGYPTIAN HIEROGLYPH N001
131F0 ; [.40CD.0020.0002] # EGYPTIAN HIEROGLYPH N002
131F1 ; [.40CE.0020.0002] # EGYPTIAN HIEROGLYPH N003
131F2 ; [.40CF.0020.0002] # EGYPTIAN HIEROGLYPH N004
131F3 ; [.40D0.0020.0002] # EGYPTIAN HIEROGLYPH N005
131F4 ; [.40D1.0020.0002] # EGYPTIAN HIEROGLYPH N006
131F5 ; [.40D2.0020.0002] # EGYPTIAN HIEROGLYPH N007
131F6 ; [.40D3.0020.0002] # EGYPTIAN HIEROGLYPH N008
131F7 ; [.40D4.0020.0002] # EGYPTIAN HIEROGLYPH N009
131F8 ; [.40D5.0020.0002] # EGYPTIAN HIEROGLYPH N010
131F9 ; [.40D6.0020.0002] # EGYPTIAN HIEROGLYPH N011
131FA ; [.40D7.0020.0002] # EGYPTIAN HIEROGLYPH N012
131FB ; [.40D8.0020.0002] # EGYPTIAN HIEROGLYPH N013
131FC ; [.40D9.0020.0002] # EGYPTIAN HIEROGLYPH N014
131FD ; [.40DA.0020.0002] # EGYPTIAN HIEROGLYPH N015
131FE ; [.40DB.0020.0002] # EGYPTIAN HIEROGLYPH N016
131FF ; [.40DC.0020.0002] # EGYPTIAN HIEROGLYPH N017
13200 ; [.40DD.0020.0002] # EGYPTIAN HIEROGLYPH N018
13201 ; [.40DE.0020.0002] # EGYPTIAN HIEROGLYPH N018A
13202 ; [.40DF.0020.0002] # EGYPTIAN HIEROGLYPH N018B
13203 ; [.40E0.0020.0002] # EGYPTIAN HIEROGLYPH N019
13204 ; [.40E1.0020.0002] # EGYPTIAN HIEROGLYPH N020
13205 ; [.40E2.0020.0002] # EGYPTIAN HIEROGLYPH N021
13206 ; [.40E3.0020.0002] # EGYPTIAN HIEROGLYPH N022
13207 ; [.40E4.0020.0002] # EGYPTIAN HIEROGLYPH N023
13208 ; [.40E5.0020.0002] # EGYPTIAN HIEROGLYPH N024
13209 ; [.40E6.0020.0002] # EGYPTIAN HIEROGLYPH N025
1320A ; [.40E7.0020.0002] # EGYPTIAN HIEROGLYPH N025A
1320B ; [.40E8.0020.0002] # EGYPTIAN HIEROGLYPH N026
1320C ; [.40E9.0020.0002] # EGYPTIAN HIEROGLYPH N027
1320D ; [.40EA.0020.0002] # EGYPTIAN HIEROGLYPH N028
1320E ; [.40EB.0020.0002] # EGYPTIAN HIEROGLYPH N029
1320F ; [.40EC.0020.0002] # EGYPTIAN HIEROGLYPH N030
13210 ; [.40ED.0020.0002] # EGYPTIAN HIEROGLYPH N031
13211 ; [.40EE.0020.0002] # EGYPTIAN HIEROGLYPH N032
13212 ; [.40EF.0020.0002] # EGYPTIAN HIEROGLYPH N033
13213 ; [.40F0.0020.0002] # EGYPTIAN HIEROGLYPH N033A
13214 ; [.40F1.0020.0002] # EGYPTIAN HIEROGLYPH N034
13215 ; [.40F2.0020.0002] # EGYPTIAN HIEROGLYPH N034A
13216 ; [.40F3.0020.0002] # EGYPTIAN HIEROGLYPH N035
13217 ; [.40F4.0020.0002] # EGYPTIAN HIEROGLYPH N035A
13218 ; [.40F5.0020.0002] # EGYPTIAN HIEROGLYPH N036
13219 ; [.40F6.0020.0002] # EGYPTIAN HIEROGLYPH N037
1321A ; [.40F7.0020.0002] # EGYPTIAN HIEROGLYPH N037A
1321B ; [.40F8.0020.0002] # EGYPTIAN HIEROGLYPH N038
1321C ; [.40F9.0020.0002] # EGYPTIAN HIEROGLYPH N039
1321D ; [.40FA.0020.0002] # EGYPTIAN HIEROGLYPH N040
1321E ; [.40FB.0020.0002] # EGYPTIAN HIEROGLYPH N041
1321F ; [.40FC.0020.0002] # EGYPTIAN HIEROGLYPH N042
13220 ; [.40FD.0020.0002] # EGYPTIAN HIEROGLYPH NL001
13221 ; [.40FE.0020.0002] # EGYPTIAN HIEROGLYPH NL002
13222 ; [.40FF.0020.0002] # EGYPTIAN HIEROGLYPH NL003
13223 ; [.4100.0020.0002] # EGYPTIAN HIEROGLYPH NL004
13224 ; [.4101.0020.0002] # EGYPTIAN HIEROGLYPH NL005
13225 ; [.4102.0020.0002] # EGYPTIAN HIEROGLYPH NL005A
13226 ; [.4103.0020.0002] # EGYPTIAN HIEROGLYPH NL006
13227 ; [.4104.0020.0002] # EGYPTIAN HIEROGLYPH NL007
13228 ; [.4105.0020.0002] # EGYPTIAN HIEROGLYPH NL008
13229 ; [.4106.0020.0002] # EGYPTIAN HIEROGLYPH NL009
1322A ; [.4107.0020.0002] # EGYPTIAN HIEROGLYPH NL010
1322B ; [.4108.0020.0002] # EGYPTIAN HIEROGLYPH NL011
1322C ; [.4109.0020.0002] # EGYPTIAN HIEROGLYPH NL012
1322D ; [.410A.0020.0002] # EGYPTIAN HIEROGLYPH NL013
1322E ; [.410B.0020.0002] # EGYPTIAN HIEROGLYPH NL014
1322F ; [.410C.0020.0002] # EGYPTIAN HIEROGLYPH NL015
13230 ; [.410D.0020.0002] # EGYPTIAN HIEROGLYPH NL016
13231 ; [.410E.0020.0002] # EGYPTIAN HIEROGLYPH NL017
13232 ; [.410F.0020.0002] # EGYPTIAN HIEROGLYPH NL017A
13233 ; [.4110.0020.0002] # EGYPTIAN HIEROGLYPH NL018
13234 ; [.4111.0020.0002] # EGYPTIAN HIEROGLYPH NL019
13235 ; [.4112.0020.0002] # EGYPTIAN HIEROGLYPH NL020
13236 ; [.4113.0020.0002] # EGYPTIAN HIEROGLYPH NU001
13237 ; [.4114.0020.0002] # EGYPTIAN HIEROGLYPH NU002
13238 ; [.4115.0020.0002] # EGYPTIAN HIEROGLYPH NU003
13239 ; [.4116.0020.0002] # EGYPTIAN HIEROGLYPH NU004
1323A ; [.4117.0020.0002] # EGYPTIAN HIEROGLYPH NU005
1323B ; [.4118.0020.0002] # EGYPTIAN HIEROGLYPH NU006
1323C ; [.4119.0020.0002] # EGYPTIAN HIEROGLYPH NU007
1323D ; [.411A.0020.0002] # EGYPTIAN HIEROGLYPH NU008
1323E ; [.411B.0020.0002] # EGYPTIAN HIEROGLYPH NU009
1323F ; [.411C.0020.0002] # EGYPTIAN HIEROGLYPH NU010
13240 ; [.411D.0020.0002] # EGYPTIAN HIEROGLYPH NU010A
13241 ; [.411E.0020.0002] # EGYPTIAN HIEROGLYPH NU011
13242 ; [.411F.0020.0002] # EGYPTIAN HIEROGLYPH NU011A
13243 ; [.4120.0020.0002] # EGYPTIAN HIEROGLYPH NU012
13244 ; [.4121.0020.0002] # EGYPTIAN HIEROGLYPH NU013
13245 ; [.4122.0020.0002] # EGYPTIAN HIEROGLYPH NU014
13246 ; [.4123.0020.0002] # EGYPTIAN HIEROGLYPH NU015
13247 ; [.4124.0020.0002] # EGYPTIAN HIEROGLYPH NU016
13248 ; [.4125.0020.0002] # EGYPTIAN HIEROGLYPH NU017
13249 ; [.4126.0020.0002] # EGYPTIAN HIEROGLYPH NU018
1324A ; [.4127.0020.0002] # EGYPTIAN HIEROGLYPH NU018A
1324B ; [.4128.0020.0002] # EGYPTIAN HIEROGLYPH NU019
1324C ; [.4129.0020.0002] # EGYPTIAN HIEROGLYPH NU020
1324D ; [.412A.0020.0002] # EGYPTIAN HIEROGLYPH NU021
1324E ; [.412B.0020.0002] # EGYPTIAN HIEROGLYPH NU022
1324F ; [.412C.0020.0002] # EGYPTIAN HIEROGLYPH NU022A
13250 ; [.412D.0020.0002] # EGYPTIAN HIEROGLYPH O001
13251 ; [.412E.0020.0002] # EGYPTIAN HIEROGLYPH O001A
13252 ; [.412F.0020.0002] # EGYPTIAN HIEROGLYPH O002
13253 ; [.4130.0020.0002] # EGYPTIAN HIEROGLYPH O003
13254 ; [.4131.0020.0002] # EGYPTIAN HIEROGLYPH O004
13255 ; [.4132.0020.0002] # EGYPTIAN HIEROGLYPH O005
13256 ; [.4133.0020.0002] # EGYPTIAN HIEROGLYPH O005A
13257 ; [.4134.0020.0002] # EGYPTIAN HIEROGLYPH O006
13258 ; [.4135.0020.0002] # EGYPTIAN HIEROGLYPH O006A
13259 ; [.4136.0020.0002] # EGYPTIAN HIEROGLYPH O006B
1325A ; [.4137.0020.0002] # EGYPTIAN HIEROGLYPH O006C
1325B ; [.4138.0020.0002] # EGYPTIAN HIEROGLYPH O006D
1325C ; [.4139.0020.0002] # EGYPTIAN HIEROGLYPH O006E
1325D ; [.413A.0020.0002] # EGYPTIAN HIEROGLYPH O006F
1325E ; [.413B.0020.0002] # EGYPTIAN HIEROGLYPH O007
1325F ; [.413C.0020.0002] # EGYPTIAN HIEROGLYPH O008
13260 ; [.413D.0020.0002] # EGYPTIAN HIEROGLYPH O009
13261 ; [.413E.0020.0002] # EGYPTIAN HIEROGLYPH O010
13262 ; [.413F.0020.0002] # EGYPTIAN HIEROGLYPH O010A
13263 ; [.4140.0020.0002] # EGYPTIAN HIEROGLYPH O010B
13264 ; [.4141.0020.0002] # EGYPTIAN HIEROGLYPH O010C
13265 ; [.4142.0020.0002] # EGYPTIAN HIEROGLYPH O011
13266 ; [.4143.0020.0002] # EGYPTIAN HIEROGLYPH O012
13267 ; [.4144.0020.0002] # EGYPTIAN HIEROGLYPH O013
13268 ; [.4145.0020.0002] # EGYPTIAN HIEROGLYPH O014
13269 ; [.4146.0020.0002] # EGYPTIAN HIEROGLYPH O015
1326A ; [.4147.0020.0002] # EGYPTIAN HIEROGLYPH O016
1326B ; [.4148.0020.0002] # EGYPTIAN HIEROGLYPH O017
1326C ; [.4149.0020.0002] # EGYPTIAN HIEROGLYPH O018
1326D ; [.414A.0020.0002] # EGYPTIAN HIEROGLYPH O019
1326E ; [.414B.0020.0002] # EGYPTIAN HIEROGLYPH O019A
1326F ; [.414C.0020.0002] # EGYPTIAN HIEROGLYPH O020
13270 ; [.414D.0020.0002] # EGYPTIAN HIEROGLYPH O020A
13271 ; [.414E.0020.0002] # EGYPTIAN HIEROGLYPH O021
13272 ; [.414F.0020.0002] # EGYPTIAN HIEROGLYPH O022
13273 ; [.4150.0020.0002] # EGYPTIAN HIEROGLYPH O023
13274 ; [.4151.0020.0002] # EGYPTIAN HIEROGLYPH O024
13275 ; [.4152.0020.0002] # EGYPTIAN HIEROGLYPH O024A
13276 ; [.4153.0020.0002] # EGYPTIAN HIEROGLYPH O025
13277 ; [.4154.0020.0002] # EGYPTIAN HIEROGLYPH O025A
13278 ; [.4155.0020.0002] # EGYPTIAN HIEROGLYPH O026
13279 ; [.4156.0020.0002] # EGYPTIAN HIEROGLYPH O027
1327A ; [.4157.0020.0002] # EGYPTIAN HIEROGLYPH O028
1327B ; [.4158.0020.0002] # EGYPTIAN HIEROGLYPH O029
1327C ; [.4159.0020.0002] # EGYPTIAN HIEROGLYPH O029A
1327D ; [.415A.0020.0002] # EGYPTIAN HIEROGLYPH O030
1327E ; [.415B.0020.0002] # EGYPTIAN HIEROGLYPH O030A
1327F ; [.415C.0020.0002] # EGYPTIAN HIEROGLYPH O031
13280 ; [.415D.0020.0002] # EGYPTIAN HIEROGLYPH O032
13281 ; [.415E.0020.0002] # EGYPTIAN HIEROGLYPH O033
13282 ; [.415F.0020.0002] # EGYPTIAN HIEROGLYPH O033A
13283 ; [.4160.0020.0002] # EGYPTIAN HIEROGLYPH O034
13284 ; [.4161.0020.0002] # EGYPTIAN HIEROGLYPH O035
13285 ; [.4162.0020.0002] # EGYPTIAN HIEROGLYPH O036
13286 ; [.4163.0020.0002] # EGYPTIAN HIEROGLYPH O036A
13287 ; [.4164.0020.0002] # EGYPTIAN HIEROGLYPH O036B
13288 ; [.4165.0020.0002] # EGYPTIAN HIEROGLYPH O036C
13289 ; [.4166.0020.0002] # EGYPTIAN HIEROGLYPH O036D
1328A ; [.4167.0020.0002] # EGYPTIAN HIEROGLYPH O037
1328B ; [.4168.0020.0002] # EGYPTIAN HIEROGLYPH O038
1328C ; [.4169.0020.0002] # EGYPTIAN HIEROGLYPH O039
1328D ; [.416A.0020.0002] # EGYPTIAN HIEROGLYPH O040
1328E ; [.416B.0020.0002] # EGYPTIAN HIEROGLYPH O041
1328F ; [.416C.0020.0002] # EGYPTIAN HIEROGLYPH O042
13290 ; [.416D.0020.0002] # EGYPTIAN HIEROGLYPH O043
13291 ; [.416E.0020.0002] # EGYPTIAN HIEROGLYPH O044
13292 ; [.416F.0020.0002] # EGYPTIAN HIEROGLYPH O045
13293 ; [.4170.0020.0002] # EGYPTIAN HIEROGLYPH O046
13294 ; [.4171.0020.0002] # EGYPTIAN HIEROGLYPH O047
13295 ; [.4172.0020.0002] # EGYPTIAN HIEROGLYPH O048
13296 ; [.4173.0020.0002] # EGYPTIAN HIEROGLYPH O049
13297 ; [.4174.0020.0002] # EGYPTIAN HIEROGLYPH O050
13298 ; [.4175.0020.0002] # EGYPTIAN HIEROGLYPH O050A
13299 ; [.4176.0020.0002] # EGYPTIAN HIEROGLYPH O050B
1329A ; [.4177.0020.0002] # EGYPTIAN HIEROGLYPH O051
1329B ; [.4178.0020.0002] # EGYPTIAN HIEROGLYPH P001
1329C ; [.4179.0020.0002] # EGYPTIAN HIEROGLYPH P001A
1329D ; [.417A.0020.0002] # EGYPTIAN HIEROGLYPH P002
1329E ; [.417B.0020.0002] # EGYPTIAN HIEROGLYPH P003
1329F ; [.417C.0020.0002] # EGYPTIAN HIEROGLYPH P003A
132A0 ; [.417D.0020.0002] # EGYPTIAN HIEROGLYPH P004
132A1 ; [.417E.0020.0002] # EGYPTIAN HIEROGLYPH P005
132A2 ; [.417F.0020.0002] # EGYPTIAN HIEROGLYPH P006
132A3 ; [.4180.0020.0002] # EGYPTIAN HIEROGLYPH P007
132A4 ; [.4181.0020.0002] # EGYPTIAN HIEROGLYPH P008
132A5 ; [.4182.0020.0002] # EGYPTIAN HIEROGLYPH P009
132A6 ; [.4183.0020.0002] # EGYPTIAN HIEROGLYPH P010
132A7 ; [.4184.0020.0002] # EGYPTIAN HIEROGLYPH P011
132A8 ; [.4185.0020.0002] # EGYPTIAN HIEROGLYPH Q001
132A9 ; [.4186.0020.0002] # EGYPTIAN HIEROGLYPH Q002
132AA ; [.4187.0020.0002] # EGYPTIAN HIEROGLYPH Q003
132AB ; [.4188.0020.0002] # EGYPTIAN HIEROGLYPH Q004
132AC ; [.4189.0020.0002] # EGYPTIAN HIEROGLYPH Q005
132AD ; [.418A.0020.0002] # EGYPTIAN HIEROGLYPH Q006
132AE ; [.418B.0020.0002] # EGYPTIAN HIEROGLYPH Q007
132AF ; [.418C.0020.0002] # EGYPTIAN HIEROGLYPH R001
132B0 ; [.418D.0020.0002] # EGYPTIAN HIEROGLYPH R002
132B1 ; [.418E.0020.0002] # EGYPTIAN HIEROGLYPH R002A
132B2 ; [.418F.0020.0002] # EGYPTIAN HIEROGLYPH R003
132B3 ; [.4190.0020.0002] # EGYPTIAN HIEROGLYPH R003A
132B4 ; [.4191.0020.0002] # EGYPTIAN HIEROGLYPH R003B
132B5 ; [.4192.0020.0002] # EGYPTIAN HIEROGLYPH R004
132B6 ; [.4193.0020.0002] # EGYPTIAN HIEROGLYPH R005
132B7 ; [.4194.0020.0002] # EGYPTIAN HIEROGLYPH R006
132B8 ; [.4195.0020.0002] # EGYPTIAN HIEROGLYPH R007
132B9 ; [.4196.0020.0002] # EGYPTIAN HIEROGLYPH R008
132BA ; [.4197.0020.0002] # EGYPTIAN HIEROGLYPH R009
132BB ; [.4198.0020.0002] # EGYPTIAN HIEROGLYPH R010
132BC ; [.4199.0020.0002] # EGYPTIAN HIEROGLYPH R010A
132BD ; [.419A.0020.0002] # EGYPTIAN HIEROGLYPH R011
132BE ; [.419B.0020.0002] # EGYPTIAN HIEROGLYPH R012
132BF ; [.419C.0020.0002] # EGYPTIAN HIEROGLYPH R013
132C0 ; [.419D.0020.0002] # EGYPTIAN HIEROGLYPH R014
132C1 ; [.419E.0020.0002] # EGYPTIAN HIEROGLYPH R015
132C2 ; [.419F.0020.0002] # EGYPTIAN HIEROGLYPH R016
132C3 ; [.41A0.0020.0002] # EGYPTIAN HIEROGLYPH R016A
132C4 ; [.41A1.0020.0002] # EGYPTIAN HIEROGLYPH R017
132C5 ; [.41A2.0020.0002] # EGYPTIAN HIEROGLYPH R018
132C6 ; [.41A3.0020.0002] # EGYPTIAN HIEROGLYPH R019
132C7 ; [.41A4.0020.0002] # EGYPTIAN HIEROGLYPH R020
132C8 ; [.41A5.0020.0002] # EGYPTIAN HIEROGLYPH R021
132C9 ; [.41A6.0020.0002] # EGYPTIAN HIEROGLYPH R022
132CA ; [.41A7.0020.0002] # EGYPTIAN HIEROGLYPH R023
132CB ; [.41A8.0020.0002] # EGYPTIAN HIEROGLYPH R024
132CC ; [.41A9.0020.0002] # EGYPTIAN HIEROGLYPH R025
132CD ; [.41AA.0020.0002] # EGYPTIAN HIEROGLYPH R026
132CE ; [.41AB.0020.0002] # EGYPTIAN HIEROGLYPH R027
132CF ; [.41AC.0020.0002] # EGYPTIAN HIEROGLYPH R028
132D0 ; [.41AD.0020.0002] # EGYPTIAN HIEROGLYPH R029
132D1 ; [.41AE.0020.0002] # EGYPTIAN HIEROGLYPH S001
132D2 ; [.41AF.0020.0002] # EGYPTIAN HIEROGLYPH S002
132D3 ; [.41B0.0020.0002] # EGYPTIAN HIEROGLYPH S002A
132D4 ; [.41B1.0020.0002] # EGYPTIAN HIEROGLYPH S003
132D5 ; [.41B2.0020.0002] # EGYPTIAN HIEROGLYPH S004
132D6 ; [.41B3.0020.0002] # EGYPTIAN HIEROGLYPH S005
132D7 ; [.41B4.0020.0002] # EGYPTIAN HIEROGLYPH S006
132D8 ; [.41B5.0020.0002] # EGYPTIAN HIEROGLYPH S006A
132D9 ; [.41B6.0020.0002] # EGYPTIAN HIEROGLYPH S007
132DA ; [.41B7.0020.0002] # EGYPTIAN HIEROGLYPH S008
132DB ; [.41B8.0020.0002] # EGYPTIAN HIEROGLYPH S009
132DC ; [.41B9.0020.0002] # EGYPTIAN HIEROGLYPH S010
132DD ; [.41BA.0020.0002] # EGYPTIAN HIEROGLYPH S011
132DE ; [.41BB.0020.0002] # EGYPTIAN HIEROGLYPH S012
132DF ; [.41BC.0020.0002] # EGYPTIAN HIEROGLYPH S013
132E0 ; [.41BD.0020.0002] # EGYPTIAN HIEROGLYPH S014
132E1 ; [.41BE.0020.0002] # EGYPTIAN HIEROGLYPH S014A
132E2 ; [.41BF.0020.0002] # EGYPTIAN HIEROGLYPH S014B
132E3 ; [.41C0.0020.0002] # EGYPTIAN HIEROGLYPH S015
132E4 ; [.41C1.0020.0002] # EGYPTIAN HIEROGLYPH S016
132E5 ; [.41C2.0020.0002] # EGYPTIAN HIEROGLYPH S017
132E6 ; [.41C3.0020.0002] # EGYPTIAN HIEROGLYPH S017A
132E7 ; [.41C4.0020.0002] # EGYPTIAN HIEROGLYPH S018
132E8 ; [.41C5.0020.0002] # EGYPTIAN HIEROGLYPH S019
132E9 ; [.41C6.0020.0002] # EGYPTIAN HIEROGLYPH S020
132EA ; [.41C7.0020.0002] # EGYPTIAN HIEROGLYPH S021
132EB ; [.41C8.0020.0002] # EGYPTIAN HIEROGLYPH S022
132EC ; [.41C9.0020.0002] # EGYPTIAN HIEROGLYPH S023
132ED ; [.41CA.0020.0002] # EGYPTIAN HIEROGLYPH S024
132EE ; [.41CB.0020.0002] # EGYPTIAN HIEROGLYPH S025
132EF ; [.41CC.0020.0002] # EGYPTIAN HIEROGLYPH S026
132F0 ; [.41CD.0020.0002] # EGYPTIAN HIEROGLYPH S026A
132F1 ; [.41CE.0020.0002] # EGYPTIAN HIEROGLYPH S026B
132F2 ; [.41CF.0020.0002] # EGYPTIAN HIEROGLYPH S027
132F3 ; [.41D0.0020.0002] # EGYPTIAN HIEROGLYPH S028
132F4 ; [.41D1.0020.0002] # EGYPTIAN HIEROGLYPH S029
132F5 ; [.41D2.0020.0002] # EGYPTIAN HIEROGLYPH S030
132F6 ; [.41D3.0020.0002] # EGYPTIAN HIEROGLYPH S031
132F7 ; [.41D4.0020.0002] # EGYPTIAN HIEROGLYPH S032
132F8 ; [.41D5.0020.0002] # EGYPTIAN HIEROGLYPH S033
132F9 ; [.41D6.0020.0002] # EGYPTIAN HIEROGLYPH S034
132FA ; [.41D7.0020.0002] # EGYPTIAN HIEROGLYPH S035
132FB ; [.41D8.0020.0002] # EGYPTIAN HIEROGLYPH S035A
132FC ; [.41D9.0020.0002] # EGYPTIAN HIEROGLYPH S036
132FD ; [.41DA.0020.0002] # EGYPTIAN HIEROGLYPH S037
132FE ; [.41DB.0020.0002] # EGYPTIAN HIEROGLYPH S038
132FF ; [.41DC.0020.0002] # EGYPTIAN HIEROGLYPH S039
13300 ; [.41DD.0020.0002] # EGYPTIAN HIEROGLYPH S040
13301 ; [.41DE.0020.0002] # EGYPTIAN HIEROGLYPH S041
13302 ; [.41DF.0020.0002] # EGYPTIAN HIEROGLYPH S042
13303 ; [.41E0.0020.0002] # EGYPTIAN HIEROGLYPH S043
13304 ; [.41E1.0020.0002] # EGYPTIAN HIEROGLYPH S044
13305 ; [.41E2.0020.0002] # EGYPTIAN HIEROGLYPH S045
13306 ; [.41E3.0020.0002] # EGYPTIAN HIEROGLYPH S046
13307 ; [.41E4.0020.0002] # EGYPTIAN HIEROGLYPH T001
13308 ; [.41E5.0020.0002] # EGYPTIAN HIEROGLYPH T002
13309 ; [.41E6.0020.0002] # EGYPTIAN HIEROGLYPH T003
1330A ; [.41E7.0020.0002] # EGYPTIAN HIEROGLYPH T003A
1330B ; [.41E8.0020.0002] # EGYPTIAN HIEROGLYPH T004
1330C ; [.41E9.0020.0002] # EGYPTIAN HIEROGLYPH T005
1330D ; [.41EA.0020.0002] # EGYPTIAN HIEROGLYPH T006
1330E ; [.41EB.0020.0002] # EGYPTIAN HIEROGLYPH T007
1330F ; [.41EC.0020.0002] # EGYPTIAN HIEROGLYPH T007A
13310 ; [.41ED.0020.0002] # EGYPTIAN HIEROGLYPH T008
13311 ; [.41EE.0020.0002] # EGYPTIAN HIEROGLYPH T008A
13312 ; [.41EF.0020.0002] # EGYPTIAN HIEROGLYPH T009
13313 ; [.41F0.0020.0002] # EGYPTIAN HIEROGLYPH T009A
13314 ; [.41F1.0020.0002] # EGYPTIAN HIEROGLYPH T010
13315 ; [.41F2.0020.0002] # EGYPTIAN HIEROGLYPH T011
13316 ; [.41F3.0020.0002] # EGYPTIAN HIEROGLYPH T011A
13317 ; [.41F4.0020.0002] # EGYPTIAN HIEROGLYPH T012
13318 ; [.41F5.0020.0002] # EGYPTIAN HIEROGLYPH T013
13319 ; [.41F6.0020.0002] # EGYPTIAN HIEROGLYPH T014
1331A ; [.41F7.0020.0002] # EGYPTIAN HIEROGLYPH T015
1331B ; [.41F8.0020.0002] # EGYPTIAN HIEROGLYPH T016
1331C ; [.41F9.0020.0002] # EGYPTIAN HIEROGLYPH T016A
1331D ; [.41FA.0020.0002] # EGYPTIAN HIEROGLYPH T017
1331E ; [.41FB.0020.0002] # EGYPTIAN HIEROGLYPH T018
1331F ; [.41FC.0020.0002] # EGYPTIAN HIEROGLYPH T019
13320 ; [.41FD.0020.0002] # EGYPTIAN HIEROGLYPH T020
13321 ; [.41FE.0020.0002] # EGYPTIAN HIEROGLYPH T021
13322 ; [.41FF.0020.0002] # EGYPTIAN HIEROGLYPH T022
13323 ; [.4200.0020.0002] # EGYPTIAN HIEROGLYPH T023
13324 ; [.4201.0020.0002] # EGYPTIAN HIEROGLYPH T024
13325 ; [.4202.0020.0002] # EGYPTIAN HIEROGLYPH T025
13326 ; [.4203.0020.0002] # EGYPTIAN HIEROGLYPH T026
13327 ; [.4204.0020.0002] # EGYPTIAN HIEROGLYPH T027
13328 ; [.4205.0020.0002] # EGYPTIAN HIEROGLYPH T028
13329 ; [.4206.0020.0002] # EGYPTIAN HIEROGLYPH T029
1332A ; [.4207.0020.0002] # EGYPTIAN HIEROGLYPH T030
1332B ; [.4208.0020.0002] # EGYPTIAN HIEROGLYPH T031
1332C ; [.4209.0020.0002] # EGYPTIAN HIEROGLYPH T032
1332D ; [.420A.0020.0002] # EGYPTIAN HIEROGLYPH T032A
1332E ; [.420B.0020.0002] # EGYPTIAN HIEROGLYPH T033
1332F ; [.420C.0020.0002] # EGYPTIAN HIEROGLYPH T033A
13330 ; [.420D.0020.0002] # EGYPTIAN HIEROGLYPH T034
13331 ; [.420E.0020.0002] # EGYPTIAN HIEROGLYPH T035
13332 ; [.420F.0020.0002] # EGYPTIAN HIEROGLYPH T036
13333 ; [.4210.0020.0002] # EGYPTIAN HIEROGLYPH U001
13334 ; [.4211.0020.0002] # EGYPTIAN HIEROGLYPH U002
13335 ; [.4212.0020.0002] # EGYPTIAN HIEROGLYPH U003
13336 ; [.4213.0020.0002] # EGYPTIAN HIEROGLYPH U004
13337 ; [.4214.0020.0002] # EGYPTIAN HIEROGLYPH U005
13338 ; [.4215.0020.0002] # EGYPTIAN HIEROGLYPH U006
13339 ; [.4216.0020.0002] # EGYPTIAN HIEROGLYPH U006A
1333A ; [.4217.0020.0002] # EGYPTIAN HIEROGLYPH U006B
1333B ; [.4218.0020.0002] # EGYPTIAN HIEROGLYPH U007
1333C ; [.4219.0020.0002] # EGYPTIAN HIEROGLYPH U008
1333D ; [.421A.0020.0002] # EGYPTIAN HIEROGLYPH U009
1333E ; [.421B.0020.0002] # EGYPTIAN HIEROGLYPH U010
1333F ; [.421C.0020.0002] # EGYPTIAN HIEROGLYPH U011
13340 ; [.421D.0020.0002] # EGYPTIAN HIEROGLYPH U012
13341 ; [.421E.0020.0002] # EGYPTIAN HIEROGLYPH U013
13342 ; [.421F.0020.0002] # EGYPTIAN HIEROGLYPH U014
13343 ; [.4220.0020.0002] # EGYPTIAN HIEROGLYPH U015
13344 ; [.4221.0020.0002] # EGYPTIAN HIEROGLYPH U016
13345 ; [.4222.0020.0002] # EGYPTIAN HIEROGLYPH U017
13346 ; [.4223.0020.0002] # EGYPTIAN HIEROGLYPH U018
13347 ; [.4224.0020.0002] # EGYPTIAN HIEROGLYPH U019
13348 ; [.4225.0020.0002] # EGYPTIAN HIEROGLYPH U020
13349 ; [.4226.0020.0002] # EGYPTIAN HIEROGLYPH U021
1334A ; [.4227.0020.0002] # EGYPTIAN HIEROGLYPH U022
1334B ; [.4228.0020.0002] # EGYPTIAN HIEROGLYPH U023
1334C ; [.4229.0020.0002] # EGYPTIAN HIEROGLYPH U023A
1334D ; [.422A.0020.0002] # EGYPTIAN HIEROGLYPH U024
1334E ; [.422B.0020.0002] # EGYPTIAN HIEROGLYPH U025
1334F ; [.422C.0020.0002] # EGYPTIAN HIEROGLYPH U026
13350 ; [.422D.0020.0002] # EGYPTIAN HIEROGLYPH U027
13351 ; [.422E.0020.0002] # EGYPTIAN HIEROGLYPH U028
13352 ; [.422F.0020.0002] # EGYPTIAN HIEROGLYPH U029
13353 ; [.4230.0020.0002] # EGYPTIAN HIEROGLYPH U029A
13354 ; [.4231.0020.0002] # EGYPTIAN HIEROGLYPH U030
13355 ; [.4232.0020.0002] # EGYPTIAN HIEROGLYPH U031
13356 ; [.4233.0020.0002] # EGYPTIAN HIEROGLYPH U032
13357 ; [.4234.0020.0002] # EGYPTIAN HIEROGLYPH U032A
13358 ; [.4235.0020.0002] # EGYPTIAN HIEROGLYPH U033
13359 ; [.4236.0020.0002] # EGYPTIAN HIEROGLYPH U034
1335A ; [.4237.0020.0002] # EGYPTIAN HIEROGLYPH U035
1335B ; [.4238.0020.0002] # EGYPTIAN HIEROGLYPH U036
1335C ; [.4239.0020.0002] # EGYPTIAN HIEROGLYPH U037
1335D ; [.423A.0020.0002] # EGYPTIAN HIEROGLYPH U038
1335E ; [.423B.0020.0002] # EGYPTIAN HIEROGLYPH U039
1335F ; [.423C.0020.0002] # EGYPTIAN HIEROGLYPH U040
13360 ; [.423D.0020.0002] # EGYPTIAN HIEROGLYPH U041
13361 ; [.423E.0020.0002] # EGYPTIAN HIEROGLYPH U042
13362 ; [.423F.0020.0002] # EGYPTIAN HIEROGLYPH V001
13363 ; [.4240.0020.0002] # EGYPTIAN HIEROGLYPH V001A
13364 ; [.4241.0020.0002] # EGYPTIAN HIEROGLYPH V001B
13365 ; [.4242.0020.0002] # EGYPTIAN HIEROGLYPH V001C
13366 ; [.4243.0020.0002] # EGYPTIAN HIEROGLYPH V001D
13367 ; [.4244.0020.0002] # EGYPTIAN HIEROGLYPH V001E
13368 ; [.4245.0020.0002] # EGYPTIAN HIEROGLYPH V001F
13369 ; [.4246.0020.0002] # EGYPTIAN HIEROGLYPH V001G
1336A ; [.4247.0020.0002] # EGYPTIAN HIEROGLYPH V001H
1336B ; [.4248.0020.0002] # EGYPTIAN HIEROGLYPH V001I
1336C ; [.4249.0020.0002] # EGYPTIAN HIEROGLYPH V002
1336D ; [.424A.0020.0002] # EGYPTIAN HIEROGLYPH V002A
1336E ; [.424B.0020.0002] # EGYPTIAN HIEROGLYPH V003
1336F ; [.424C.0020.0002] # EGYPTIAN HIEROGLYPH V004
13370 ; [.424D.0020.0002] # EGYPTIAN HIEROGLYPH V005
13371 ; [.424E.0020.0002] # EGYPTIAN HIEROGLYPH V006
13372 ; [.424F.0020.0002] # EGYPTIAN HIEROGLYPH V007
13373 ; [.4250.0020.0002] # EGYPTIAN HIEROGLYPH V007A
13374 ; [.4251.0020.0002] # EGYPTIAN HIEROGLYPH V007B
13375 ; [.4252.0020.0002] # EGYPTIAN HIEROGLYPH V008
13376 ; [.4253.0020.0002] # EGYPTIAN HIEROGLYPH V009
13377 ; [.4254.0020.0002] # EGYPTIAN HIEROGLYPH V010
13378 ; [.4255.0020.0002] # EGYPTIAN HIEROGLYPH V011
13379 ; [.4256.0020.0002] # EGYPTIAN HIEROGLYPH V011A
1337A ; [.4257.0020.0002] # EGYPTIAN HIEROGLYPH V011B
1337B ; [.4258.0020.0002] # EGYPTIAN HIEROGLYPH V011C
1337C ; [.4259.0020.0002] # EGYPTIAN HIEROGLYPH V012
1337D ; [.425A.0020.0002] # EGYPTIAN HIEROGLYPH V012A
1337E ; [.425B.0020.0002] # EGYPTIAN HIEROGLYPH V012B
1337F ; [.425C.0020.0002] # EGYPTIAN HIEROGLYPH V013
13380 ; [.425D.0020.0002] # EGYPTIAN HIEROGLYPH V014
13381 ; [.425E.0020.0002] # EGYPTIAN HIEROGLYPH V015
13382 ; [.425F.0020.0002] # EGYPTIAN HIEROGLYPH V016
13383 ; [.4260.0020.0002] # EGYPTIAN HIEROGLYPH V017
13384 ; [.4261.0020.0002] # EGYPTIAN HIEROGLYPH V018
13385 ; [.4262.0020.0002] # EGYPTIAN HIEROGLYPH V019
13386 ; [.4263.0020.0002] # EGYPTIAN HIEROGLYPH V020
13387 ; [.4264.0020.0002] # EGYPTIAN HIEROGLYPH V020A
13388 ; [.4265.0020.0002] # EGYPTIAN HIEROGLYPH V020B
13389 ; [.4266.0020.0002] # EGYPTIAN HIEROGLYPH V020C
1338A ; [.4267.0020.0002] # EGYPTIAN HIEROGLYPH V020D
1338B ; [.4268.0020.0002] # EGYPTIAN HIEROGLYPH V020E
1338C ; [.4269.0020.0002] # EGYPTIAN HIEROGLYPH V020F
1338D ; [.426A.0020.0002] # EGYPTIAN HIEROGLYPH V020G
1338E ; [.426B.0020.0002] # EGYPTIAN HIEROGLYPH V020H
1338F ; [.426C.0020.0002] # EGYPTIAN HIEROGLYPH V020I
13390 ; [.426D.0020.0002] # EGYPTIAN HIEROGLYPH V020J
13391 ; [.426E.0020.0002] # EGYPTIAN HIEROGLYPH V020K
13392 ; [.426F.0020.0002] # EGYPTIAN HIEROGLYPH V020L
13393 ; [.4270.0020.0002] # EGYPTIAN HIEROGLYPH V021
13394 ; [.4271.0020.0002] # EGYPTIAN HIEROGLYPH V022
13395 ; [.4272.0020.0002] # EGYPTIAN HIEROGLYPH V023
13396 ; [.4273.0020.0002] # EGYPTIAN HIEROGLYPH V023A
13397 ; [.4274.0020.0002] # EGYPTIAN HIEROGLYPH V024
13398 ; [.4275.0020.0002] # EGYPTIAN HIEROGLYPH V025
13399 ; [.4276.0020.0002] # EGYPTIAN HIEROGLYPH V026
1339A ; [.4277.0020.0002] # EGYPTIAN HIEROGLYPH V027
1339B ; [.4278.0020.0002] # EGYPTIAN HIEROGLYPH V028
1339C ; [.4279.0020.0002] # EGYPTIAN HIEROGLYPH V028A
1339D ; [.427A.0020.0002] # EGYPTIAN HIEROGLYPH V029
1339E ; [.427B.0020.0002] # EGYPTIAN HIEROGLYPH V029A
1339F ; [.427C.0020.0002] # EGYPTIAN HIEROGLYPH V030
133A0 ; [.427D.0020.0002] # EGYPTIAN HIEROGLYPH V030A
133A1 ; [.427E.0020.0002] # EGYPTIAN HIEROGLYPH V031
133A2 ; [.427F.0020.0002] # EGYPTIAN HIEROGLYPH V031A
133A3 ; [.4280.0020.0002] # EGYPTIAN HIEROGLYPH V032
133A4 ; [.4281.0020.0002] # EGYPTIAN HIEROGLYPH V033
133A5 ; [.4282.0020.0002] # EGYPTIAN HIEROGLYPH V033A
133A6 ; [.4283.0020.0002] # EGYPTIAN HIEROGLYPH V034
133A7 ; [.4284.0020.0002] # EGYPTIAN HIEROGLYPH V035
133A8 ; [.4285.0020.0002] # EGYPTIAN HIEROGLYPH V036
133A9 ; [.4286.0020.0002] # EGYPTIAN HIEROGLYPH V037
133AA ; [.4287.0020.0002] # EGYPTIAN HIEROGLYPH V037A
133AB ; [.4288.0020.0002] # EGYPTIAN HIEROGLYPH V038
133AC ; [.4289.0020.0002] # EGYPTIAN HIEROGLYPH V039
133AD ; [.428A.0020.0002] # EGYPTIAN HIEROGLYPH V040
133AE ; [.428B.0020.0002] # EGYPTIAN HIEROGLYPH V040A
133AF ; [.428C.0020.0002] # EGYPTIAN HIEROGLYPH W001
133B0 ; [.428D.0020.0002] # EGYPTIAN HIEROGLYPH W002
133B1 ; [.428E.0020.0002] # EGYPTIAN HIEROGLYPH W003
133B2 ; [.428F.0020.0002] # EGYPTIAN HIEROGLYPH W003A
133B3 ; [.4290.0020.0002] # EGYPTIAN HIEROGLYPH W004
133B4 ; [.4291.0020.0002] # EGYPTIAN HIEROGLYPH W005
133B5 ; [.4292.0020.0002] # EGYPTIAN HIEROGLYPH W006
133B6 ; [.4293.0020.0002] # EGYPTIAN HIEROGLYPH W007
133B7 ; [.4294.0020.0002] # EGYPTIAN HIEROGLYPH W008
133B8 ; [.4295.0020.0002] # EGYPTIAN HIEROGLYPH W009
133B9 ; [.4296.0020.0002] # EGYPTIAN HIEROGLYPH W009A
133BA ; [.4297.0020.0002] # EGYPTIAN HIEROGLYPH W010
133BB ; [.4298.0020.0002] # EGYPTIAN HIEROGLYPH W010A
133BC ; [.4299.0020.0002] # EGYPTIAN HIEROGLYPH W011
133BD ; [.429A.0020.0002] # EGYPTIAN HIEROGLYPH W012
133BE ; [.429B.0020.0002] # EGYPTIAN HIEROGLYPH W013
133BF ; [.429C.0020.0002] # EGYPTIAN HIEROGLYPH W014
133C0 ; [.429D.0020.0002] # EGYPTIAN HIEROGLYPH W014A
133C1 ; [.429E.0020.0002] # EGYPTIAN HIEROGLYPH W015
133C2 ; [.429F.0020.0002] # EGYPTIAN HIEROGLYPH W016
133C3 ; [.42A0.0020.0002] # EGYPTIAN HIEROGLYPH W017
133C4 ; [.42A1.0020.0002] # EGYPTIAN HIEROGLYPH W017A
133C5 ; [.42A2.0020.0002] # EGYPTIAN HIEROGLYPH W018
133C6 ; [.42A3.0020.0002] # EGYPTIAN HIEROGLYPH W018A
133C7 ; [.42A4.0020.0002] # EGYPTIAN HIEROGLYPH W019
133C8 ; [.42A5.0020.0002] # EGYPTIAN HIEROGLYPH W020
133C9 ; [.42A6.0020.0002] # EGYPTIAN HIEROGLYPH W021
133CA ; [.42A7.0020.0002] # EGYPTIAN HIEROGLYPH W022
133CB ; [.42A8.0020.0002] # EGYPTIAN HIEROGLYPH W023
133CC ; [.42A9.0020.0002] # EGYPTIAN HIEROGLYPH W024
133CD ; [.42AA.0020.0002] # EGYPTIAN HIEROGLYPH W024A
133CE ; [.42AB.0020.0002] # EGYPTIAN HIEROGLYPH W025
133CF ; [.42AC.0020.0002] # EGYPTIAN HIEROGLYPH X001
133D0 ; [.42AD.0020.0002] # EGYPTIAN HIEROGLYPH X002
133D1 ; [.42AE.0020.0002] # EGYPTIAN HIEROGLYPH X003
133D2 ; [.42AF.0020.0002] # EGYPTIAN HIEROGLYPH X004
133D3 ; [.42B0.0020.0002] # EGYPTIAN HIEROGLYPH X004A
133D4 ; [.42B1.0020.0002] # EGYPTIAN HIEROGLYPH X004B
133D5 ; [.42B2.0020.0002] # EGYPTIAN HIEROGLYPH X005
133D6 ; [.42B3.0020.0002] # EGYPTIAN HIEROGLYPH X006
133D7 ; [.42B4.0020.0002] # EGYPTIAN HIEROGLYPH X006A
133D8 ; [.42B5.0020.0002] # EGYPTIAN HIEROGLYPH X007
133D9 ; [.42B6.0020.0002] # EGYPTIAN HIEROGLYPH X008
133DA ; [.42B7.0020.0002] # EGYPTIAN HIEROGLYPH X008A
133DB ; [.42B8.0020.0002] # EGYPTIAN HIEROGLYPH Y001
133DC ; [.42B9.0020.0002] # EGYPTIAN HIEROGLYPH Y001A
133DD ; [.42BA.0020.0002] # EGYPTIAN HIEROGLYPH Y002
133DE ; [.42BB.0020.0002] # EGYPTIAN HIEROGLYPH Y003
133DF ; [.42BC.0020.0002] # EGYPTIAN HIEROGLYPH Y004
133E0 ; [.42BD.0020.0002] # EGYPTIAN HIEROGLYPH Y005
133E1 ; [.42BE.0020.0002] # EGYPTIAN HIEROGLYPH Y006
133E2 ; [.42BF.0020.0002] # EGYPTIAN HIEROGLYPH Y007
133E3 ; [.42C0.0020.0002] # EGYPTIAN HIEROGLYPH Y008
133E4 ; [.42C1.0020.0002] # EGYPTIAN HIEROGLYPH Z001
133E5 ; [.42C2.0020.0002] # EGYPTIAN HIEROGLYPH Z002
133E6 ; [.42C3.0020.0002] # EGYPTIAN HIEROGLYPH Z002A
133E7 ; [.42C4.0020.0002] # EGYPTIAN HIEROGLYPH Z002B
133E8 ; [.42C5.0020.0002] # EGYPTIAN HIEROGLYPH Z002C
133E9 ; [.42C6.0020.0002] # EGYPTIAN HIEROGLYPH Z002D
133EA ; [.42C7.0020.0002] # EGYPTIAN HIEROGLYPH Z003
133EB ; [.42C8.0020.0002] # EGYPTIAN HIEROGLYPH Z003A
133EC ; [.42C9.0020.0002] # EGYPTIAN HIEROGLYPH Z003B
133ED ; [.42CA.0020.0002] # EGYPTIAN HIEROGLYPH Z004
133EE ; [.42CB.0020.0002] # EGYPTIAN HIEROGLYPH Z004A
133EF ; [.42CC.0020.0002] # EGYPTIAN HIEROGLYPH Z005
133F0 ; [.42CD.0020.0002] # EGYPTIAN HIEROGLYPH Z005A
133F1 ; [.42CE.0020.0002] # EGYPTIAN HIEROGLYPH Z006
133F2 ; [.42CF.0020.0002] # EGYPTIAN HIEROGLYPH Z007
133F3 ; [.42D0.0020.0002] # EGYPTIAN HIEROGLYPH Z008
133F4 ; [.42D1.0020.0002] # EGYPTIAN HIEROGLYPH Z009
133F5 ; [.42D2.0020.0002] # EGYPTIAN HIEROGLYPH Z010
133F6 ; [.42D3.0020.0002] # EGYPTIAN HIEROGLYPH Z011
133F7 ; [.42D4.0020.0002] # EGYPTIAN HIEROGLYPH Z012
133F8 ; [.42D5.0020.0002] # EGYPTIAN HIEROGLYPH Z013
133F9 ; [.42D6.0020.0002] # EGYPTIAN HIEROGLYPH Z014
133FA ; [.42D7.0020.0002] # EGYPTIAN HIEROGLYPH Z015
133FB ; [.42D8.0020.0002] # EGYPTIAN HIEROGLYPH Z015A
133FC ; [.42D9.0020.0002] # EGYPTIAN HIEROGLYPH Z015B
133FD ; [.42DA.0020.0002] # EGYPTIAN HIEROGLYPH Z015C
133FE ; [.42DB.0020.0002] # EGYPTIAN HIEROGLYPH Z015D
133FF ; [.42DC.0020.0002] # EGYPTIAN HIEROGLYPH Z015E
13400 ; [.42DD.0020.0002] # EGYPTIAN HIEROGLYPH Z015F
13401 ; [.42DE.0020.0002] # EGYPTIAN HIEROGLYPH Z015G
13402 ; [.42DF.0020.0002] # EGYPTIAN HIEROGLYPH Z015H
13403 ; [.42E0.0020.0002] # EGYPTIAN HIEROGLYPH Z015I
13404 ; [.42E1.0020.0002] # EGYPTIAN HIEROGLYPH Z016
13405 ; [.42E2.0020.0002] # EGYPTIAN HIEROGLYPH Z016A
13406 ; [.42E3.0020.0002] # EGYPTIAN HIEROGLYPH Z016B
13407 ; [.42E4.0020.0002] # EGYPTIAN HIEROGLYPH Z016C
13408 ; [.42E5.0020.0002] # EGYPTIAN HIEROGLYPH Z016D
13409 ; [.42E6.0020.0002] # EGYPTIAN HIEROGLYPH Z016E
1340A ; [.42E7.0020.0002] # EGYPTIAN HIEROGLYPH Z016F
1340B ; [.42E8.0020.0002] # EGYPTIAN HIEROGLYPH Z016G
1340C ; [.42E9.0020.0002] # EGYPTIAN HIEROGLYPH Z016H
1340D ; [.42EA.0020.0002] # EGYPTIAN HIEROGLYPH AA001
1340E ; [.42EB.0020.0002] # EGYPTIAN HIEROGLYPH AA002
1340F ; [.42EC.0020.0002] # EGYPTIAN HIEROGLYPH AA003
13410 ; [.42ED.0020.0002] # EGYPTIAN HIEROGLYPH AA004
13411 ; [.42EE.0020.0002] # EGYPTIAN HIEROGLYPH AA005
13412 ; [.42EF.0020.0002] # EGYPTIAN HIEROGLYPH AA006
13413 ; [.42F0.0020.0002] # EGYPTIAN HIEROGLYPH AA007
13414 ; [.42F1.0020.0002] # EGYPTIAN HIEROGLYPH AA007A
13415 ; [.42F2.0020.0002] # EGYPTIAN HIEROGLYPH AA007B
13416 ; [.42F3.0020.0002] # EGYPTIAN HIEROGLYPH AA008
13417 ; [.42F4.0020.0002] # EGYPTIAN HIEROGLYPH AA009
13418 ; [.42F5.0020.0002] # EGYPTIAN HIEROGLYPH AA010
13419 ; [.42F6.0020.0002] # EGYPTIAN HIEROGLYPH AA011
1341A ; [.42F7.0020.0002] # EGYPTIAN HIEROGLYPH AA012
1341B ; [.42F8.0020.0002] # EGYPTIAN HIEROGLYPH AA013
1341C ; [.42F9.0020.0002] # EGYPTIAN HIEROGLYPH AA014
1341D ; [.42FA.0020.0002] # EGYPTIAN HIEROGLYPH AA015
1341E ; [.42FB.0020.0002] # EGYPTIAN HIEROGLYPH AA016
1341F ; [.42FC.0020.0002] # EGYPTIAN HIEROGLYPH AA017
13420 ; [.42FD.0020.0002] # EGYPTIAN HIEROGLYPH AA018
13421 ; [.42FE.0020.0002] # EGYPTIAN HIEROGLYPH AA019
13422 ; [.42FF.0020.0002] # EGYPTIAN HIEROGLYPH AA020
13423 ; [.4300.0020.0002] # EGYPTIAN HIEROGLYPH AA021
13424 ; [.4301.0020.0002] # EGYPTIAN HIEROGLYPH AA022
13425 ; [.4302.0020.0002] # EGYPTIAN HIEROGLYPH AA023
13426 ; [.4303.0020.0002] # EGYPTIAN HIEROGLYPH AA024
13427 ; [.4304.0020.0002] # EGYPTIAN HIEROGLYPH AA025
13428 ; [.4305.0020.0002] # EGYPTIAN HIEROGLYPH AA026
13429 ; [.4306.0020.0002] # EGYPTIAN HIEROGLYPH AA027
1342A ; [.4307.0020.0002] # EGYPTIAN HIEROGLYPH AA028
1342B ; [.4308.0020.0002] # EGYPTIAN HIEROGLYPH AA029
1342C ; [.4309.0020.0002] # EGYPTIAN HIEROGLYPH AA030
1342D ; [.430A.0020.0002] # EGYPTIAN HIEROGLYPH AA031
1342E ; [.430B.0020.0002] # EGYPTIAN HIEROGLYPH AA032
109A0 ; [.430C.0020.0002] # MEROITIC CURSIVE LETTER A
10980 ; [.430C.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER A
109A1 ; [.430D.0020.0002] # MEROITIC CURSIVE LETTER E
10981 ; [.430D.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER E
109A2 ; [.430E.0020.0002] # MEROITIC CURSIVE LETTER I
10982 ; [.430E.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER I
109A3 ; [.430F.0020.0002] # MEROITIC CURSIVE LETTER O
10983 ; [.430F.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER O
109A4 ; [.4310.0020.0002] # MEROITIC CURSIVE LETTER YA
10984 ; [.4310.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER YA
109A5 ; [.4311.0020.0002] # MEROITIC CURSIVE LETTER WA
10985 ; [.4311.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER WA
109A6 ; [.4312.0020.0002] # MEROITIC CURSIVE LETTER BA
10986 ; [.4312.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER BA
10987 ; [.4312.0020.0004][.0000.00FD.0004] # MEROITIC HIEROGLYPHIC LETTER BA-2
109A7 ; [.4313.0020.0002] # MEROITIC CURSIVE LETTER PA
10988 ; [.4313.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER PA
109A8 ; [.4314.0020.0002] # MEROITIC CURSIVE LETTER MA
10989 ; [.4314.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER MA
109A9 ; [.4315.0020.0002] # MEROITIC CURSIVE LETTER NA
1098A ; [.4315.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER NA
1098B ; [.4315.0020.0004][.0000.00FD.0004] # MEROITIC HIEROGLYPHIC LETTER NA-2
109AA ; [.4316.0020.0002] # MEROITIC CURSIVE LETTER NE
1098C ; [.4316.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER NE
1098D ; [.4316.0020.0004][.0000.00FD.0004] # MEROITIC HIEROGLYPHIC LETTER NE-2
109AB ; [.4317.0020.0002] # MEROITIC CURSIVE LETTER RA
1098E ; [.4317.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER RA
1098F ; [.4317.0020.0004][.0000.00FD.0004] # MEROITIC HIEROGLYPHIC LETTER RA-2
109AC ; [.4318.0020.0002] # MEROITIC CURSIVE LETTER LA
10990 ; [.4318.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER LA
109AD ; [.4319.0020.0002] # MEROITIC CURSIVE LETTER KHA
10991 ; [.4319.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER KHA
109AE ; [.431A.0020.0002] # MEROITIC CURSIVE LETTER HHA
10992 ; [.431A.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER HHA
109AF ; [.431B.0020.0002] # MEROITIC CURSIVE LETTER SA
109B0 ; [.431B.0020.0004][.0000.00FC.0004] # MEROITIC CURSIVE LETTER ARCHAIC SA
10993 ; [.431B.0020.0004][.0000.00FD.0004] # MEROITIC HIEROGLYPHIC LETTER SA
10994 ; [.431B.0020.0004][.0000.00FE.0004] # MEROITIC HIEROGLYPHIC LETTER SA-2
109B1 ; [.431C.0020.0002] # MEROITIC CURSIVE LETTER SE
10995 ; [.431C.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER SE
109B2 ; [.431D.0020.0002] # MEROITIC CURSIVE LETTER KA
10996 ; [.431D.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER KA
109B3 ; [.431E.0020.0002] # MEROITIC CURSIVE LETTER QA
10997 ; [.431E.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER QA
109B4 ; [.431F.0020.0002] # MEROITIC CURSIVE LETTER TA
10998 ; [.431F.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER TA
10999 ; [.431F.0020.0004][.0000.00FD.0004] # MEROITIC HIEROGLYPHIC LETTER TA-2
109B5 ; [.4320.0020.0002] # MEROITIC CURSIVE LETTER TE
1099A ; [.4320.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER TE
1099B ; [.4320.0020.0004][.0000.00FD.0004] # MEROITIC HIEROGLYPHIC LETTER TE-2
109B6 ; [.4321.0020.0002] # MEROITIC CURSIVE LETTER TO
1099C ; [.4321.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER TO
109B7 ; [.4322.0020.0002] # MEROITIC CURSIVE LETTER DA
1099D ; [.4322.0020.0004][.0000.00FC.0004] # MEROITIC HIEROGLYPHIC LETTER DA
109BE ; [.4323.0020.0002] # MEROITIC CURSIVE LOGOGRAM RMT
109BF ; [.4324.0020.0002] # MEROITIC CURSIVE LOGOGRAM IMN
1099E ; [.4325.0020.0002] # MEROITIC HIEROGLYPHIC SYMBOL VIDJ
1099F ; [.4326.0020.0002] # MEROITIC HIEROGLYPHIC SYMBOL VIDJ-2
2F00  ; [.FB40.0020.0004][.CE00.0000.0000] # KANGXI RADICAL ONE
3220  ; [*02FA.0020.0004][.FB40.0020.0004][.CE00.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH ONE
3280  ; [.FB40.0020.0006][.CE00.0000.0000] # CIRCLED IDEOGRAPH ONE
3192  ; [.FB40.0020.0014][.CE00.0000.0000] # IDEOGRAPHIC ANNOTATION ONE MARK
1F229 ; [.FB40.0020.001C][.CE00.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-4E00
319C  ; [.FB40.0020.0014][.CE01.0000.0000] # IDEOGRAPHIC ANNOTATION FOURTH MARK
3226  ; [*02FA.0020.0004][.FB40.0020.0004][.CE03.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH SEVEN
3286  ; [.FB40.0020.0006][.CE03.0000.0000] # CIRCLED IDEOGRAPH SEVEN
3222  ; [*02FA.0020.0004][.FB40.0020.0004][.CE09.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH THREE
1F241 ; [*035C.0020.0004][.FB40.0020.0004][.CE09.0000.0000][*035D.0020.0004] # TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E09
3282  ; [.FB40.0020.0006][.CE09.0000.0000] # CIRCLED IDEOGRAPH THREE
3194  ; [.FB40.0020.0014][.CE09.0000.0000] # IDEOGRAPHIC ANNOTATION THREE MARK
1F22A ; [.FB40.0020.001C][.CE09.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-4E09
32A4  ; [.FB40.0020.0006][.CE0A.0000.0000] # CIRCLED IDEOGRAPH HIGH
3196  ; [.FB40.0020.0014][.CE0A.0000.0000] # IDEOGRAPHIC ANNOTATION TOP MARK
32A6  ; [.FB40.0020.0006][.CE0B.0000.0000] # CIRCLED IDEOGRAPH LOW
3198  ; [.FB40.0020.0014][.CE0B.0000.0000] # IDEOGRAPHIC ANNOTATION BOTTOM MARK
F967  ; [.FB40.0020.0002][.CE0D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F967
319B  ; [.FB40.0020.0014][.CE19.0000.0000] # IDEOGRAPHIC ANNOTATION THIRD MARK
FA70  ; [.FB40.0020.0002][.CE26.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA70
2F01  ; [.FB40.0020.0004][.CE28.0000.0000] # KANGXI RADICAL LINE
2EA6  ; [.FB40.0020.0004][.CE2C.0000.0000] # CJK RADICAL SIMPLIFIED HALF TREE TRUNK
32A5  ; [.FB40.0020.0006][.CE2D.0000.0000] # CIRCLED IDEOGRAPH CENTRE
3197  ; [.FB40.0020.0014][.CE2D.0000.0000] # IDEOGRAPHIC ANNOTATION MIDDLE MARK
1F22D ; [.FB40.0020.001C][.CE2D.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-4E2D
F905  ; [.FB40.0020.0002][.CE32.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F905
2F02  ; [.FB40.0020.0004][.CE36.0000.0000] # KANGXI RADICAL DOT
2E80  ; [.FB40.0020.0004][.CE36.0000.0000][.0000.00FC.0004] # CJK RADICAL REPEAT
2F801 ; [.FB40.0020.0002][.CE38.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F801
F95E  ; [.FB40.0020.0002][.CE39.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F95E
2F800 ; [.FB40.0020.0002][.CE3D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F800
2F03  ; [.FB40.0020.0004][.CE3F.0000.0000] # KANGXI RADICAL SLASH
2F802 ; [.FB40.0020.0002][.CE41.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F802
2F04  ; [.FB40.0020.0004][.CE59.0000.0000] # KANGXI RADICAL SECOND
319A  ; [.FB40.0020.0014][.CE59.0000.0000] # IDEOGRAPHIC ANNOTATION SECOND MARK
2E84  ; [.FB40.0020.0004][.CE59.0000.0000][.0000.00FC.0004] # CJK RADICAL SECOND THREE
2E83  ; [.FB40.0020.0004][.CE5A.0000.0000] # CJK RADICAL SECOND TWO
2E82  ; [.FB40.0020.0004][.CE5B.0000.0000] # CJK RADICAL SECOND ONE
3228  ; [*02FA.0020.0004][.FB40.0020.0004][.CE5D.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH NINE
3288  ; [.FB40.0020.0006][.CE5D.0000.0000] # CIRCLED IDEOGRAPH NINE
F91B  ; [.FB40.0020.0002][.CE82.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F91B
2F05  ; [.FB40.0020.0004][.CE85.0000.0000] # KANGXI RADICAL HOOK
F9BA  ; [.FB40.0020.0002][.CE86.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9BA
2F06  ; [.FB40.0020.0004][.CE8C.0000.0000] # KANGXI RADICAL TWO
3221  ; [*02FA.0020.0004][.FB40.0020.0004][.CE8C.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH TWO
1F242 ; [*035C.0020.0004][.FB40.0020.0004][.CE8C.0000.0000][*035D.0020.0004] # TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-4E8C
3281  ; [.FB40.0020.0006][.CE8C.0000.0000] # CIRCLED IDEOGRAPH TWO
3193  ; [.FB40.0020.0014][.CE8C.0000.0000] # IDEOGRAPHIC ANNOTATION TWO MARK
1F214 ; [.FB40.0020.001C][.CE8C.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-4E8C
3224  ; [*02FA.0020.0004][.FB40.0020.0004][.CE94.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH FIVE
3284  ; [.FB40.0020.0006][.CE94.0000.0000] # CIRCLED IDEOGRAPH FIVE
2F07  ; [.FB40.0020.0004][.CEA0.0000.0000] # KANGXI RADICAL LID
1F218 ; [.FB40.0020.001C][.CEA4.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-4EA4
F977  ; [.FB40.0020.0002][.CEAE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F977
2F08  ; [.FB40.0020.0004][.CEBA.0000.0000] # KANGXI RADICAL MAN
319F  ; [.FB40.0020.0014][.CEBA.0000.0000] # IDEOGRAPHIC ANNOTATION MAN MARK
2E85  ; [.FB40.0020.0004][.CEBB.0000.0000] # CJK RADICAL PERSON
F9FD  ; [.FB40.0020.0002][.CEC0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9FD
2F819 ; [.FB40.0020.0002][.CECC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F819
3239  ; [*02FA.0020.0004][.FB40.0020.0004][.CEE3.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH REPRESENT
F9A8  ; [.FB40.0020.0002][.CEE4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9A8
323D  ; [*02FA.0020.0004][.FB40.0020.0004][.CF01.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH ENTERPRISE
32AD  ; [.FB40.0020.0006][.CF01.0000.0000] # CIRCLED IDEOGRAPH ENTERPRISE
3241  ; [*02FA.0020.0004][.FB40.0020.0004][.CF11.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH REST
32A1  ; [.FB40.0020.0006][.CF11.0000.0000] # CIRCLED IDEOGRAPH REST
2F804 ; [.FB40.0020.0002][.CF60.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F804
FA73  ; [.FB40.0020.0002][.CF80.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA73
F92D  ; [.FB40.0020.0002][.CF86.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F92D
F9B5  ; [.FB40.0020.0002][.CF8B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9B5
FA30  ; [.FB40.0020.0002][.CFAE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA30
2F805 ; [.FB40.0020.0002][.CFAE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F805
2F806 ; [.FB40.0020.0002][.CFBB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F806
F965  ; [.FB40.0020.0002][.CFBF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F965
2F807 ; [.FB40.0020.0002][.D002.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F807
F9D4  ; [.FB40.0020.0002][.D02B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9D4
2F808 ; [.FB40.0020.0002][.D07A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F808
2F809 ; [.FB40.0020.0002][.D099.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F809
2F80B ; [.FB40.0020.0002][.D0CF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F80B
F9BB  ; [.FB40.0020.0002][.D0DA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9BB
FA31  ; [.FB40.0020.0002][.D0E7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA31
2F80A ; [.FB40.0020.0002][.D0E7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F80A
329D  ; [.FB40.0020.0006][.D12A.0000.0000] # CIRCLED IDEOGRAPH EXCELLENT
2F09  ; [.FB40.0020.0004][.D13F.0000.0000] # KANGXI RADICAL LEGS
FA0C  ; [.FB40.0020.0002][.D140.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA0C
FA74  ; [.FB40.0020.0002][.D145.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA74
FA32  ; [.FB40.0020.0002][.D14D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA32
2F80E ; [.FB40.0020.0002][.D14D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F80E
2F80F ; [.FB40.0020.0002][.D154.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F80F
2F810 ; [.FB40.0020.0002][.D164.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F810
2F0A  ; [.FB40.0020.0004][.D165.0000.0000] # KANGXI RADICAL ENTER
2F814 ; [.FB40.0020.0002][.D167.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F814
FA72  ; [.FB40.0020.0002][.D168.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA72
F978  ; [.FB40.0020.0002][.D169.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F978
2F0B  ; [.FB40.0020.0004][.D16B.0000.0000] # KANGXI RADICAL EIGHT
3227  ; [*02FA.0020.0004][.FB40.0020.0004][.D16B.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH EIGHT
3287  ; [.FB40.0020.0006][.D16B.0000.0000] # CIRCLED IDEOGRAPH EIGHT
F9D1  ; [.FB40.0020.0002][.D16D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9D1
3225  ; [*02FA.0020.0004][.FB40.0020.0004][.D16D.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH SIX
3285  ; [.FB40.0020.0006][.D16D.0000.0000] # CIRCLED IDEOGRAPH SIX
2F811 ; [.FB40.0020.0002][.D177.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F811
FA75  ; [.FB40.0020.0002][.D180.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA75
2F0C  ; [.FB40.0020.0004][.D182.0000.0000] # KANGXI RADICAL DOWN BOX
2E86  ; [.FB40.0020.0004][.D182.0000.0000][.0000.00FC.0004] # CJK RADICAL BOX
2F815 ; [.FB40.0020.0002][.D18D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F815
1F21E ; [.FB40.0020.001C][.D18D.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-518D
2F8D2 ; [.FB40.0020.0002][.D192.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8D2
2F8D3 ; [.FB40.0020.0002][.D195.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8D3
2F0D  ; [.FB40.0020.0004][.D196.0000.0000] # KANGXI RADICAL COVER
2F817 ; [.FB40.0020.0002][.D197.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F817
32A2  ; [.FB40.0020.0006][.D199.0000.0000] # CIRCLED IDEOGRAPH COPY
2F818 ; [.FB40.0020.0002][.D1A4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F818
2F0E  ; [.FB40.0020.0004][.D1AB.0000.0000] # KANGXI RADICAL ICE
2F81A ; [.FB40.0020.0002][.D1AC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F81A
FA71  ; [.FB40.0020.0002][.D1B5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA71
2F81B ; [.FB40.0020.0002][.D1B5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F81B
F92E  ; [.FB40.0020.0002][.D1B7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F92E
F979  ; [.FB40.0020.0002][.D1C9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F979
F955  ; [.FB40.0020.0002][.D1CC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F955
F954  ; [.FB40.0020.0002][.D1DC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F954
FA15  ; [.FB40.0020.0002][.D1DE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA15
2F0F  ; [.FB40.0020.0004][.D1E0.0000.0000] # KANGXI RADICAL TABLE
2E87  ; [.FB40.0020.0004][.D1E0.0000.0000][.0000.00FC.0004] # CJK RADICAL TABLE
2F81D ; [.FB40.0020.0002][.D1F5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F81D
2F10  ; [.FB40.0020.0004][.D1F5.0000.0000] # KANGXI RADICAL OPEN BOX
2F11  ; [.FB40.0020.0004][.D200.0000.0000] # KANGXI RADICAL KNIFE
2E88  ; [.FB40.0020.0004][.D200.0000.0000][.0000.00FC.0004] # CJK RADICAL KNIFE ONE
2E89  ; [.FB40.0020.0004][.D202.0000.0000] # CJK RADICAL KNIFE TWO
2F81E ; [.FB40.0020.0002][.D203.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F81E
FA00  ; [.FB40.0020.0002][.D207.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA00
2F850 ; [.FB40.0020.0002][.D207.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F850
F99C  ; [.FB40.0020.0002][.D217.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F99C
1F220 ; [.FB40.0020.001C][.D21D.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-521D
F9DD  ; [.FB40.0020.0002][.D229.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9DD
F9FF  ; [.FB40.0020.0002][.D23A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9FF
2F820 ; [.FB40.0020.0002][.D23B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F820
2F821 ; [.FB40.0020.0002][.D246.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F821
1F21C ; [.FB40.0020.001C][.D24D.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-524D
2F822 ; [.FB40.0020.0002][.D272.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F822
1F239 ; [.FB40.0020.001C][.D272.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-5272
2F823 ; [.FB40.0020.0002][.D277.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F823
F9C7  ; [.FB40.0020.0002][.D289.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9C7
F98A  ; [.FB40.0020.0002][.D29B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F98A
2F12  ; [.FB40.0020.0004][.D29B.0000.0000] # KANGXI RADICAL POWER
F99D  ; [.FB40.0020.0002][.D2A3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F99D
2F992 ; [.FB40.0020.0002][.D2B3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F992
3238  ; [*02FA.0020.0004][.FB40.0020.0004][.D2B4.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH LABOR
3298  ; [.FB40.0020.0006][.D2B4.0000.0000] # CIRCLED IDEOGRAPH LABOR
FA76  ; [.FB40.0020.0002][.D2C7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA76
2F825 ; [.FB40.0020.0002][.D2C7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F825
FA33  ; [.FB40.0020.0002][.D2C9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA33
2F826 ; [.FB40.0020.0002][.D2C9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F826
F952  ; [.FB40.0020.0002][.D2D2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F952
1F247 ; [*035C.0020.0004][.FB40.0020.0004][.D2DD.0000.0000][*035D.0020.0004] # TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-52DD
F92F  ; [.FB40.0020.0002][.D2DE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F92F
FA34  ; [.FB40.0020.0002][.D2E4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA34
2F827 ; [.FB40.0020.0002][.D2E4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F827
F97F  ; [.FB40.0020.0002][.D2F5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F97F
2F13  ; [.FB40.0020.0004][.D2F9.0000.0000] # KANGXI RADICAL WRAP
FA77  ; [.FB40.0020.0002][.D2FA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA77
2F828 ; [.FB40.0020.0002][.D2FA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F828
2F829 ; [.FB40.0020.0002][.D305.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F829
2F82A ; [.FB40.0020.0002][.D306.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F82A
2F14  ; [.FB40.0020.0004][.D315.0000.0000] # KANGXI RADICAL SPOON
F963  ; [.FB40.0020.0002][.D317.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F963
2F82B ; [.FB40.0020.0002][.D317.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F82B
2F15  ; [.FB40.0020.0004][.D31A.0000.0000] # KANGXI RADICAL RIGHT OPEN BOX
2F16  ; [.FB40.0020.0004][.D338.0000.0000] # KANGXI RADICAL HIDING ENCLOSURE
32A9  ; [.FB40.0020.0006][.D33B.0000.0000] # CIRCLED IDEOGRAPH MEDICINE
F9EB  ; [.FB40.0020.0002][.D33F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9EB
2F17  ; [.FB40.0020.0004][.D341.0000.0000] # KANGXI RADICAL TEN
3038  ; [.FB40.0020.0004][.D341.0000.0000] # HANGZHOU NUMERAL TEN
3229  ; [*02FA.0020.0004][.FB40.0020.0004][.D341.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH TEN
3289  ; [.FB40.0020.0006][.D341.0000.0000] # CIRCLED IDEOGRAPH TEN
3039  ; [.FB40.0020.0004][.D344.0000.0000] # HANGZHOU NUMERAL TWENTY
303A  ; [.FB40.0020.0004][.D345.0000.0000] # HANGZHOU NUMERAL THIRTY
2F82C ; [.FB40.0020.0002][.D349.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F82C
FA35  ; [.FB40.0020.0002][.D351.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA35
2F82D ; [.FB40.0020.0002][.D351.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F82D
323F  ; [*02FA.0020.0004][.FB40.0020.0004][.D354.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH ALLIANCE
32AF  ; [.FB40.0020.0006][.D354.0000.0000] # CIRCLED IDEOGRAPH ALLIANCE
2F82E ; [.FB40.0020.0002][.D35A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F82E
2F18  ; [.FB40.0020.0004][.D35C.0000.0000] # KANGXI RADICAL DIVINATION
2E8A  ; [.FB40.0020.0004][.D35C.0000.0000][.0000.00FC.0004] # CJK RADICAL DIVINATION
2F19  ; [.FB40.0020.0004][.D369.0000.0000] # KANGXI RADICAL SEAL
2E8B  ; [.FB40.0020.0004][.D369.0000.0000][.0000.00FC.0004] # CJK RADICAL SEAL
329E  ; [.FB40.0020.0006][.D370.0000.0000] # CIRCLED IDEOGRAPH PRINT
2F82F ; [.FB40.0020.0002][.D373.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F82F
F91C  ; [.FB40.0020.0002][.D375.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F91C
2F830 ; [.FB40.0020.0002][.D37D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F830
2F831 ; [.FB40.0020.0002][.D37F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F831
2F832 ; [.FB40.0020.0002][.D37F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F832
2F833 ; [.FB40.0020.0002][.D37F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F833
2F1A  ; [.FB40.0020.0004][.D382.0000.0000] # KANGXI RADICAL CLIFF
2E81  ; [.FB40.0020.0004][.D382.0000.0000][.0000.00FC.0004] # CJK RADICAL CLIFF
2F1B  ; [.FB40.0020.0004][.D3B6.0000.0000] # KANGXI RADICAL PRIVATE
F96B  ; [.FB40.0020.0002][.D3C3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F96B
2F1C  ; [.FB40.0020.0004][.D3C8.0000.0000] # KANGXI RADICAL AGAIN
2F836 ; [.FB40.0020.0002][.D3CA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F836
1F212 ; [.FB40.0020.001C][.D3CC.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-53CC
2F837 ; [.FB40.0020.0002][.D3DF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F837
2F1D  ; [.FB40.0020.0004][.D3E3.0000.0000] # KANGXI RADICAL MOUTH
F906  ; [.FB40.0020.0002][.D3E5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F906
2F839 ; [.FB40.0020.0002][.D3EB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F839
1F251 ; [.FB40.0020.0006][.D3EF.0000.0000] # CIRCLED IDEOGRAPH ACCEPT
2F83A ; [.FB40.0020.0002][.D3F1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F83A
32A8  ; [.FB40.0020.0006][.D3F3.0000.0000] # CIRCLED IDEOGRAPH RIGHT
1F22E ; [.FB40.0020.001C][.D3F3.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-53F3
2F83B ; [.FB40.0020.0002][.D406.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F83B
1F234 ; [.FB40.0020.001C][.D408.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-5408
3234  ; [*02FA.0020.0004][.FB40.0020.0004][.D40D.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH NAME
3294  ; [.FB40.0020.0006][.D40D.0000.0000] # CIRCLED IDEOGRAPH NAME
F9DE  ; [.FB40.0020.0002][.D40F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9DE
F9ED  ; [.FB40.0020.0002][.D41D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9ED
2F83D ; [.FB40.0020.0002][.D438.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F83D
1F225 ; [.FB40.0020.001C][.D439.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-5439
F980  ; [.FB40.0020.0002][.D442.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F980
2F83E ; [.FB40.0020.0002][.D448.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F83E
2F83F ; [.FB40.0020.0002][.D468.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F83F
323A  ; [*02FA.0020.0004][.FB40.0020.0004][.D47C.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH CALL
2F83C ; [.FB40.0020.0002][.D49E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F83C
2F840 ; [.FB40.0020.0002][.D4A2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F840
F99E  ; [.FB40.0020.0002][.D4BD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F99E
2F841 ; [.FB40.0020.0002][.D4F6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F841
2F842 ; [.FB40.0020.0002][.D510.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F842
3244  ; [.FB40.0020.0006][.D54F.0000.0000] # CIRCLED IDEOGRAPH QUESTION
2F843 ; [.FB40.0020.0002][.D553.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F843
FA79  ; [.FB40.0020.0002][.D555.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA79
2F844 ; [.FB40.0020.0002][.D563.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F844
2F845 ; [.FB40.0020.0002][.D584.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F845
2F846 ; [.FB40.0020.0002][.D584.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F846
F90B  ; [.FB40.0020.0002][.D587.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F90B
FA7A  ; [.FB40.0020.0002][.D599.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA7A
2F847 ; [.FB40.0020.0002][.D599.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F847
FA36  ; [.FB40.0020.0002][.D59D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA36
FA78  ; [.FB40.0020.0002][.D59D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA78
2F848 ; [.FB40.0020.0002][.D5AB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F848
2F849 ; [.FB40.0020.0002][.D5B3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F849
1F23A ; [.FB40.0020.001C][.D5B6.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-55B6
FA0D  ; [.FB40.0020.0002][.D5C0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA0D
2F84A ; [.FB40.0020.0002][.D5C2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F84A
FA7B  ; [.FB40.0020.0002][.D5E2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA7B
FA37  ; [.FB40.0020.0002][.D606.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA37
2F84C ; [.FB40.0020.0002][.D606.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F84C
2F84E ; [.FB40.0020.0002][.D651.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F84E
FA38  ; [.FB40.0020.0002][.D668.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA38
2F84F ; [.FB40.0020.0002][.D674.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F84F
2F1E  ; [.FB40.0020.0004][.D6D7.0000.0000] # KANGXI RADICAL ENCLOSURE
3223  ; [*02FA.0020.0004][.FB40.0020.0004][.D6DB.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH FOUR
3283  ; [.FB40.0020.0006][.D6DB.0000.0000] # CIRCLED IDEOGRAPH FOUR
3195  ; [.FB40.0020.0014][.D6DB.0000.0000] # IDEOGRAPHIC ANNOTATION FOUR MARK
F9A9  ; [.FB40.0020.0002][.D6F9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9A9
2F84B ; [.FB40.0020.0002][.D716.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F84B
2F84D ; [.FB40.0020.0002][.D717.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F84D
2F1F  ; [.FB40.0020.0004][.D71F.0000.0000] # KANGXI RADICAL EARTH
322F  ; [*02FA.0020.0004][.FB40.0020.0004][.D71F.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH EARTH
328F  ; [.FB40.0020.0006][.D71F.0000.0000] # CIRCLED IDEOGRAPH EARTH
319E  ; [.FB40.0020.0014][.D730.0000.0000] # IDEOGRAPHIC ANNOTATION EARTH MARK
2F855 ; [.FB40.0020.0002][.D78B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F855
2F852 ; [.FB40.0020.0002][.D7CE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F852
2F853 ; [.FB40.0020.0002][.D7F4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F853
2F854 ; [.FB40.0020.0002][.D80D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F854
2F857 ; [.FB40.0020.0002][.D831.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F857
2F856 ; [.FB40.0020.0002][.D832.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F856
FA39  ; [.FB40.0020.0002][.D840.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA39
FA10  ; [.FB40.0020.0002][.D85A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA10
FA7C  ; [.FB40.0020.0002][.D85A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA7C
F96C  ; [.FB40.0020.0002][.D85E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F96C
FA3A  ; [.FB40.0020.0002][.D8A8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA3A
2F858 ; [.FB40.0020.0002][.D8AC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F858
FA7D  ; [.FB40.0020.0002][.D8B3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA7D
F94A  ; [.FB40.0020.0002][.D8D8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F94A
F942  ; [.FB40.0020.0002][.D8DF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F942
2F20  ; [.FB40.0020.0004][.D8EB.0000.0000] # KANGXI RADICAL SCHOLAR
2F851 ; [.FB40.0020.0002][.D8EE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F851
1F224 ; [.FB40.0020.001C][.D8F0.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-58F0
2F85A ; [.FB40.0020.0002][.D8F2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F85A
2F85B ; [.FB40.0020.0002][.D8F7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F85B
2F21  ; [.FB40.0020.0004][.D902.0000.0000] # KANGXI RADICAL GO
2F85C ; [.FB40.0020.0002][.D906.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F85C
2F22  ; [.FB40.0020.0004][.D90A.0000.0000] # KANGXI RADICAL GO SLOWLY
2F23  ; [.FB40.0020.0004][.D915.0000.0000] # KANGXI RADICAL EVENING
2F85D ; [.FB40.0020.0002][.D91A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F85D
1F215 ; [.FB40.0020.001C][.D91A.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-591A
32B0  ; [.FB40.0020.0006][.D91C.0000.0000] # CIRCLED IDEOGRAPH NIGHT
2F85E ; [.FB40.0020.0002][.D922.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F85E
2F24  ; [.FB40.0020.0004][.D927.0000.0000] # KANGXI RADICAL BIG
337D  ; [.FB40.0020.001C][.D927.0000.0000][.FB40.0020.001C][.EB63.0000.0000] # SQUARE ERA NAME TAISYOU
319D  ; [.FB40.0020.0014][.D929.0000.0000] # IDEOGRAPHIC ANNOTATION HEAVEN MARK
1F217 ; [.FB40.0020.001C][.D929.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-5929
FA7E  ; [.FB40.0020.0002][.D944.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA7E
F90C  ; [.FB40.0020.0002][.D948.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F90C
F909  ; [.FB40.0020.0002][.D951.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F909
FA7F  ; [.FB40.0020.0002][.D954.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA7F
2F85F ; [.FB40.0020.0002][.D962.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F85F
F981  ; [.FB40.0020.0002][.D973.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F981
2F25  ; [.FB40.0020.0004][.D973.0000.0000] # KANGXI RADICAL WOMAN
329B  ; [.FB40.0020.0006][.D973.0000.0000] # CIRCLED IDEOGRAPH FEMALE
2F865 ; [.FB40.0020.0002][.D9D8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F865
2F862 ; [.FB40.0020.0002][.D9EC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F862
2F863 ; [.FB40.0020.0002][.DA1B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F863
2F864 ; [.FB40.0020.0002][.DA27.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F864
FA80  ; [.FB40.0020.0002][.DA62.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA80
2F866 ; [.FB40.0020.0002][.DA66.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F866
2F986 ; [.FB40.0020.0002][.DAB5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F986
2F869 ; [.FB40.0020.0002][.DB08.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F869
FA81  ; [.FB40.0020.0002][.DB28.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA81
2F86A ; [.FB40.0020.0002][.DB3E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F86A
2F86B ; [.FB40.0020.0002][.DB3E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F86B
2F26  ; [.FB40.0020.0004][.DB50.0000.0000] # KANGXI RADICAL CHILD
1F211 ; [.FB40.0020.001C][.DB57.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-5B57
323B  ; [*02FA.0020.0004][.FB40.0020.0004][.DB66.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH STUDY
32AB  ; [.FB40.0020.0006][.DB66.0000.0000] # CIRCLED IDEOGRAPH STUDY
2F27  ; [.FB40.0020.0004][.DB80.0000.0000] # KANGXI RADICAL ROOF
FA04  ; [.FB40.0020.0002][.DB85.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA04
1F243 ; [*035C.0020.0004][.FB40.0020.0004][.DB89.0000.0000][*035D.0020.0004] # TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-5B89
32AA  ; [.FB40.0020.0006][.DB97.0000.0000] # CIRCLED IDEOGRAPH RELIGION
2F86D ; [.FB40.0020.0002][.DBC3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F86D
2F86E ; [.FB40.0020.0002][.DBD8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F86E
F95F  ; [.FB40.0020.0002][.DBE7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F95F
F9AA  ; [.FB40.0020.0002][.DBE7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9AA
2F86F ; [.FB40.0020.0002][.DBE7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F86F
F9BC  ; [.FB40.0020.0002][.DBEE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9BC
2F870 ; [.FB40.0020.0002][.DBF3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F870
2F28  ; [.FB40.0020.0004][.DBF8.0000.0000] # KANGXI RADICAL INCH
2F872 ; [.FB40.0020.0002][.DBFF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F872
2F873 ; [.FB40.0020.0002][.DC06.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F873
2F29  ; [.FB40.0020.0004][.DC0F.0000.0000] # KANGXI RADICAL SMALL
2E8C  ; [.FB40.0020.0004][.DC0F.0000.0000][.0000.00FC.0004] # CJK RADICAL SMALL ONE
2E8D  ; [.FB40.0020.0004][.DC0F.0000.0000][.0000.00FD.0004] # CJK RADICAL SMALL TWO
2F875 ; [.FB40.0020.0002][.DC22.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F875
2E90  ; [.FB40.0020.0004][.DC22.0000.0000] # CJK RADICAL LAME THREE
2F2A  ; [.FB40.0020.0004][.DC22.0000.0000] # KANGXI RADICAL LAME
2E8E  ; [.FB40.0020.0004][.DC22.0000.0000][.0000.00FC.0004] # CJK RADICAL LAME ONE
2E8F  ; [.FB40.0020.0004][.DC23.0000.0000] # CJK RADICAL LAME TWO
2E91  ; [.FB40.0020.0004][.DC23.0000.0000][.0000.00FC.0004] # CJK RADICAL LAME FOUR
2F2B  ; [.FB40.0020.0004][.DC38.0000.0000] # KANGXI RADICAL CORPSE
F9BD  ; [.FB40.0020.0002][.DC3F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9BD
2F877 ; [.FB40.0020.0002][.DC60.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F877
F94B  ; [.FB40.0020.0002][.DC62.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F94B
FA3B  ; [.FB40.0020.0002][.DC64.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA3B
F9DF  ; [.FB40.0020.0002][.DC65.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9DF
FA3C  ; [.FB40.0020.0002][.DC6E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA3C
2F878 ; [.FB40.0020.0002][.DC6E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F878
2F2C  ; [.FB40.0020.0004][.DC6E.0000.0000] # KANGXI RADICAL SPROUT
2F2D  ; [.FB40.0020.0004][.DC71.0000.0000] # KANGXI RADICAL MOUNTAIN
2F87A ; [.FB40.0020.0002][.DC8D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F87A
2F879 ; [.FB40.0020.0002][.DCC0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F879
F9D5  ; [.FB40.0020.0002][.DD19.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9D5
2F87C ; [.FB40.0020.0002][.DD43.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F87C
F921  ; [.FB40.0020.0002][.DD50.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F921
2F87F ; [.FB40.0020.0002][.DD6B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F87F
2F87E ; [.FB40.0020.0002][.DD6E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F87E
2F880 ; [.FB40.0020.0002][.DD7C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F880
2F9F4 ; [.FB40.0020.0002][.DDB2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9F4
F9AB  ; [.FB40.0020.0002][.DDBA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9AB
2F2E  ; [.FB40.0020.0004][.DDDB.0000.0000] # KANGXI RADICAL RIVER
2F881 ; [.FB40.0020.0002][.DDE1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F881
2F882 ; [.FB40.0020.0002][.DDE2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F882
2F2F  ; [.FB40.0020.0004][.DDE5.0000.0000] # KANGXI RADICAL WORK
32A7  ; [.FB40.0020.0006][.DDE6.0000.0000] # CIRCLED IDEOGRAPH LEFT
1F22C ; [.FB40.0020.001C][.DDE6.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-5DE6
2F30  ; [.FB40.0020.0004][.DDF1.0000.0000] # KANGXI RADICAL ONESELF
2E92  ; [.FB40.0020.0004][.DDF3.0000.0000] # CJK RADICAL SNAKE
2F884 ; [.FB40.0020.0002][.DDFD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F884
2F31  ; [.FB40.0020.0004][.DDFE.0000.0000] # KANGXI RADICAL TURBAN
2F885 ; [.FB40.0020.0002][.DE28.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F885
2F886 ; [.FB40.0020.0002][.DE3D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F886
2F887 ; [.FB40.0020.0002][.DE69.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F887
2F32  ; [.FB40.0020.0004][.DE72.0000.0000] # KANGXI RADICAL DRY
337B  ; [.FB40.0020.001C][.DE73.0000.0000][.FB40.0020.001C][.E210.0000.0000] # SQUARE ERA NAME HEISEI
F98E  ; [.FB40.0020.0002][.DE74.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F98E
2E93  ; [.FB40.0020.0004][.DE7A.0000.0000] # CJK RADICAL THREAD
2F33  ; [.FB40.0020.0004][.DE7A.0000.0000] # KANGXI RADICAL SHORT THREAD
3245  ; [.FB40.0020.0006][.DE7C.0000.0000] # CIRCLED IDEOGRAPH KINDERGARTEN
2F34  ; [.FB40.0020.0004][.DE7F.0000.0000] # KANGXI RADICAL DOTTED CLIFF
FA01  ; [.FB40.0020.0002][.DEA6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA01
2F88B ; [.FB40.0020.0002][.DEB0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F88B
2F88C ; [.FB40.0020.0002][.DEB3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F88C
2F88D ; [.FB40.0020.0002][.DEB6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F88D
F9A2  ; [.FB40.0020.0002][.DEC9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9A2
F928  ; [.FB40.0020.0002][.DECA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F928
2F88E ; [.FB40.0020.0002][.DECA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F88E
FA82  ; [.FB40.0020.0002][.DED2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA82
FA0B  ; [.FB40.0020.0002][.DED3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA0B
FA83  ; [.FB40.0020.0002][.DED9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA83
F982  ; [.FB40.0020.0002][.DEEC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F982
2F35  ; [.FB40.0020.0004][.DEF4.0000.0000] # KANGXI RADICAL LONG STRIDE
2F890 ; [.FB40.0020.0002][.DEFE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F890
2F36  ; [.FB40.0020.0004][.DEFE.0000.0000] # KANGXI RADICAL TWO HANDS
F943  ; [.FB40.0020.0002][.DF04.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F943
2F37  ; [.FB40.0020.0004][.DF0B.0000.0000] # KANGXI RADICAL SHOOT
2F38  ; [.FB40.0020.0004][.DF13.0000.0000] # KANGXI RADICAL BOW
2F894 ; [.FB40.0020.0002][.DF22.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F894
2F895 ; [.FB40.0020.0002][.DF22.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F895
2F39  ; [.FB40.0020.0004][.DF50.0000.0000] # KANGXI RADICAL SNOUT
2E95  ; [.FB40.0020.0004][.DF50.0000.0000][.0000.00FC.0004] # CJK RADICAL SNOUT TWO
2E94  ; [.FB40.0020.0004][.DF51.0000.0000] # CJK RADICAL SNOUT ONE
2F874 ; [.FB40.0020.0002][.DF53.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F874
2F3A  ; [.FB40.0020.0004][.DF61.0000.0000] # KANGXI RADICAL BRISTLE
2F899 ; [.FB40.0020.0002][.DF62.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F899
FA84  ; [.FB40.0020.0002][.DF69.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA84
2F89A ; [.FB40.0020.0002][.DF6B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F89A
2F3B  ; [.FB40.0020.0004][.DF73.0000.0000] # KANGXI RADICAL STEP
F9D8  ; [.FB40.0020.0002][.DF8B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9D8
1F21D ; [.FB40.0020.001C][.DF8C.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-5F8C
1F250 ; [.FB40.0020.0006][.DF97.0000.0000] # CIRCLED IDEOGRAPH ADVANTAGE
2F89C ; [.FB40.0020.0002][.DF9A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F89C
F966  ; [.FB40.0020.0002][.DFA9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F966
FA85  ; [.FB40.0020.0002][.DFAD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA85
2F3C  ; [.FB40.0020.0004][.DFC3.0000.0000] # KANGXI RADICAL HEART
2E97  ; [.FB40.0020.0004][.DFC3.0000.0000][.0000.00FC.0004] # CJK RADICAL HEART TWO
2E96  ; [.FB40.0020.0004][.DFC4.0000.0000] # CJK RADICAL HEART ONE
2F89D ; [.FB40.0020.0002][.DFCD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F89D
2F89E ; [.FB40.0020.0002][.DFD7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F89E
F9A3  ; [.FB40.0020.0002][.DFF5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9A3
2F89F ; [.FB40.0020.0002][.DFF9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F89F
F960  ; [.FB40.0020.0002][.E012.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F960
F9AC  ; [.FB40.0020.0002][.E01C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9AC
FA6B  ; [.FB40.0020.0002][.E075.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA6B
2F8A0 ; [.FB40.0020.0002][.E081.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8A0
FA3D  ; [.FB40.0020.0002][.E094.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA3D
2F8A3 ; [.FB40.0020.0002][.E094.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8A3
2F8A5 ; [.FB40.0020.0002][.E0C7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8A5
FA86  ; [.FB40.0020.0002][.E0D8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA86
F9B9  ; [.FB40.0020.0002][.E0E1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9B9
FA88  ; [.FB40.0020.0002][.E108.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA88
F9D9  ; [.FB40.0020.0002][.E144.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9D9
2F8A6 ; [.FB40.0020.0002][.E148.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8A6
2F8A7 ; [.FB40.0020.0002][.E14C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8A7
2F8A9 ; [.FB40.0020.0002][.E14C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8A9
FA87  ; [.FB40.0020.0002][.E14E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA87
2F8A8 ; [.FB40.0020.0002][.E14E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8A8
FA8A  ; [.FB40.0020.0002][.E160.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA8A
FA3E  ; [.FB40.0020.0002][.E168.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA3E
2F8AA ; [.FB40.0020.0002][.E17A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8AA
FA3F  ; [.FB40.0020.0002][.E18E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA3F
FA89  ; [.FB40.0020.0002][.E18E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA89
2F8AB ; [.FB40.0020.0002][.E18E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8AB
F98F  ; [.FB40.0020.0002][.E190.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F98F
2F8AD ; [.FB40.0020.0002][.E1A4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8AD
2F8AE ; [.FB40.0020.0002][.E1AF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8AE
2F8AC ; [.FB40.0020.0002][.E1B2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8AC
2F8AF ; [.FB40.0020.0002][.E1DE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8AF
FA40  ; [.FB40.0020.0002][.E1F2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA40
FA8B  ; [.FB40.0020.0002][.E1F2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA8B
2F8B0 ; [.FB40.0020.0002][.E1F2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8B0
F90D  ; [.FB40.0020.0002][.E1F6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F90D
2F8B1 ; [.FB40.0020.0002][.E1F6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8B1
F990  ; [.FB40.0020.0002][.E200.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F990
2F3D  ; [.FB40.0020.0004][.E208.0000.0000] # KANGXI RADICAL HALBERD
2F8B2 ; [.FB40.0020.0002][.E210.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8B2
2F8B3 ; [.FB40.0020.0002][.E21B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8B3
F9D2  ; [.FB40.0020.0002][.E22E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9D2
FA8C  ; [.FB40.0020.0002][.E234.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA8C
2F3E  ; [.FB40.0020.0004][.E236.0000.0000] # KANGXI RADICAL DOOR
2F3F  ; [.FB40.0020.0004][.E24B.0000.0000] # KANGXI RADICAL HAND
1F210 ; [.FB40.0020.001C][.E24B.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-624B
2E98  ; [.FB40.0020.0004][.E24C.0000.0000] # CJK RADICAL HAND
1F245 ; [*035C.0020.0004][.FB40.0020.0004][.E253.0000.0000][*035D.0020.0004] # TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6253
1F231 ; [.FB40.0020.001C][.E253.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-6253
2F8B4 ; [.FB40.0020.0002][.E25D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8B4
1F227 ; [.FB40.0020.001C][.E295.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-6295
2F8B5 ; [.FB40.0020.0002][.E2B1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8B5
F925  ; [.FB40.0020.0002][.E2C9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F925
F95B  ; [.FB40.0020.0002][.E2CF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F95B
FA02  ; [.FB40.0020.0002][.E2D3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA02
2F8B6 ; [.FB40.0020.0002][.E2D4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8B6
2F8BA ; [.FB40.0020.0002][.E2FC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8BA
F973  ; [.FB40.0020.0002][.E2FE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F973
1F22F ; [.FB40.0020.001C][.E307.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-6307
2F8B9 ; [.FB40.0020.0002][.E33D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8B9
2F8B7 ; [.FB40.0020.0002][.E350.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8B7
1F228 ; [.FB40.0020.001C][.E355.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-6355
2F8BB ; [.FB40.0020.0002][.E368.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8BB
F9A4  ; [.FB40.0020.0002][.E37B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9A4
2F8BC ; [.FB40.0020.0002][.E383.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8BC
F975  ; [.FB40.0020.0002][.E3A0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F975
2F8C1 ; [.FB40.0020.0002][.E3A9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8C1
FA8D  ; [.FB40.0020.0002][.E3C4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA8D
2F8C0 ; [.FB40.0020.0002][.E3C5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8C0
2F8BD ; [.FB40.0020.0002][.E3E4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8BD
FA8E  ; [.FB40.0020.0002][.E41C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA8E
2F8BF ; [.FB40.0020.0002][.E422.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8BF
FA8F  ; [.FB40.0020.0002][.E452.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA8F
2F8C3 ; [.FB40.0020.0002][.E469.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8C3
2F8C6 ; [.FB40.0020.0002][.E477.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8C6
2F8C4 ; [.FB40.0020.0002][.E47E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8C4
F991  ; [.FB40.0020.0002][.E49A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F991
2F8C5 ; [.FB40.0020.0002][.E49D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8C5
F930  ; [.FB40.0020.0002][.E4C4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F930
2F40  ; [.FB40.0020.0004][.E52F.0000.0000] # KANGXI RADICAL BRANCH
2F41  ; [.FB40.0020.0004][.E534.0000.0000] # KANGXI RADICAL RAP
2E99  ; [.FB40.0020.0004][.E535.0000.0000] # CJK RADICAL RAP
FA41  ; [.FB40.0020.0002][.E54F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA41
2F8C8 ; [.FB40.0020.0002][.E54F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8C8
FA90  ; [.FB40.0020.0002][.E556.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA90
1F248 ; [*035C.0020.0004][.FB40.0020.0004][.E557.0000.0000][*035D.0020.0004] # TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-6557
2F8C9 ; [.FB40.0020.0002][.E56C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8C9
F969  ; [.FB40.0020.0002][.E578.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F969
2F42  ; [.FB40.0020.0004][.E587.0000.0000] # KANGXI RADICAL SCRIPT
3246  ; [.FB40.0020.0006][.E587.0000.0000] # CIRCLED IDEOGRAPH SCHOOL
2F43  ; [.FB40.0020.0004][.E597.0000.0000] # KANGXI RADICAL DIPPER
F9BE  ; [.FB40.0020.0002][.E599.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9BE
1F21B ; [.FB40.0020.001C][.E599.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-6599
2F44  ; [.FB40.0020.0004][.E5A4.0000.0000] # KANGXI RADICAL AXE
1F21F ; [.FB40.0020.001C][.E5B0.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-65B0
2F45  ; [.FB40.0020.0004][.E5B9.0000.0000] # KANGXI RADICAL SQUARE
F983  ; [.FB40.0020.0002][.E5C5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F983
2F46  ; [.FB40.0020.0004][.E5E0.0000.0000] # KANGXI RADICAL NOT
2E9B  ; [.FB40.0020.0004][.E5E1.0000.0000] # CJK RADICAL CHOKE
FA42  ; [.FB40.0020.0002][.E5E2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA42
2F8CB ; [.FB40.0020.0002][.E5E3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8CB
2F47  ; [.FB40.0020.0004][.E5E5.0000.0000] # KANGXI RADICAL SUN
3230  ; [*02FA.0020.0004][.FB40.0020.0004][.E5E5.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH SUN
3290  ; [.FB40.0020.0006][.E5E5.0000.0000] # CIRCLED IDEOGRAPH SUN
2E9C  ; [.FB40.0020.0004][.E5E5.0000.0000][.0000.00FC.0004] # CJK RADICAL SUN
337E  ; [.FB40.0020.001C][.E60E.0000.0000][.FB40.0020.001C][.ECBB.0000.0000] # SQUARE ERA NAME MEIZI
F9E0  ; [.FB40.0020.0002][.E613.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9E0
1F219 ; [.FB40.0020.001C][.E620.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-6620
337C  ; [.FB40.0020.001C][.E62D.0000.0000][.FB40.0020.001C][.D48C.0000.0000] # SQUARE ERA NAME SYOUWA
2F8CD ; [.FB40.0020.0002][.E649.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8CD
FA12  ; [.FB40.0020.0002][.E674.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA12
FA91  ; [.FB40.0020.0002][.E674.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA91
F9C5  ; [.FB40.0020.0002][.E688.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9C5
FA43  ; [.FB40.0020.0002][.E691.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA43
2F8CF ; [.FB40.0020.0002][.E691.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8CF
2F8D5 ; [.FB40.0020.0002][.E69C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8D5
FA06  ; [.FB40.0020.0002][.E6B4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA06
F98B  ; [.FB40.0020.0002][.E6C6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F98B
2F48  ; [.FB40.0020.0004][.E6F0.0000.0000] # KANGXI RADICAL SAY
F901  ; [.FB40.0020.0002][.E6F4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F901
2F8CC ; [.FB40.0020.0002][.E6F8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8CC
2F8D4 ; [.FB40.0020.0002][.E700.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8D4
2F49  ; [.FB40.0020.0004][.E708.0000.0000] # KANGXI RADICAL MOON
322A  ; [*02FA.0020.0004][.FB40.0020.0004][.E708.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH MOON
328A  ; [.FB40.0020.0006][.E708.0000.0000] # CIRCLED IDEOGRAPH MOON
1F237 ; [.FB40.0020.001C][.E708.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-6708
2E9D  ; [.FB40.0020.0004][.E708.0000.0000][.0000.00FC.0004] # CJK RADICAL MOON
3232  ; [*02FA.0020.0004][.FB40.0020.0004][.E709.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH HAVE
3292  ; [.FB40.0020.0006][.E709.0000.0000] # CIRCLED IDEOGRAPH HAVE
1F236 ; [.FB40.0020.001C][.E709.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-6709
F929  ; [.FB40.0020.0002][.E717.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F929
FA92  ; [.FB40.0020.0002][.E717.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA92
2F8D8 ; [.FB40.0020.0002][.E717.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8D8
FA93  ; [.FB40.0020.0002][.E71B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA93
2F8D9 ; [.FB40.0020.0002][.E71B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8D9
2F8DA ; [.FB40.0020.0002][.E721.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8DA
2F4A  ; [.FB40.0020.0004][.E728.0000.0000] # KANGXI RADICAL TREE
322D  ; [*02FA.0020.0004][.FB40.0020.0004][.E728.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH WOOD
328D  ; [.FB40.0020.0006][.E728.0000.0000] # CIRCLED IDEOGRAPH WOOD
1F240 ; [*035C.0020.0004][.FB40.0020.0004][.E72C.0000.0000][*035D.0020.0004] # TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-672C
F9E1  ; [.FB40.0020.0002][.E74E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9E1
2F8DC ; [.FB40.0020.0002][.E753.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8DC
FA94  ; [.FB40.0020.0002][.E756.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA94
2F8DB ; [.FB40.0020.0002][.E75E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8DB
F9C8  ; [.FB40.0020.0002][.E77B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9C8
2F8E0 ; [.FB40.0020.0002][.E785.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8E0
F9F4  ; [.FB40.0020.0002][.E797.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9F4
F9C9  ; [.FB40.0020.0002][.E7F3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9C9
2F8DF ; [.FB40.0020.0002][.E7FA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8DF
F9DA  ; [.FB40.0020.0002][.E817.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9DA
2F8E5 ; [.FB40.0020.0002][.E81F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8E5
3231  ; [*02FA.0020.0004][.FB40.0020.0004][.E82A.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH STOCK
3291  ; [.FB40.0020.0006][.E82A.0000.0000] # CIRCLED IDEOGRAPH STOCK
337F  ; [.FB40.0020.001C][.E82A.0000.0000][.FB40.0020.001C][.DF0F.0000.0000][.FB40.0020.001C][.CF1A.0000.0000][.FB40.0020.001C][.F93E.0000.0000] # SQUARE CORPORATION
2F8E1 ; [.FB40.0020.0002][.E852.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8E1
F97A  ; [.FB40.0020.0002][.E881.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F97A
FA44  ; [.FB40.0020.0002][.E885.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA44
2F8E2 ; [.FB40.0020.0002][.E885.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8E2
2F8E4 ; [.FB40.0020.0002][.E88E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8E4
F9E2  ; [.FB40.0020.0002][.E8A8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9E2
2F8E6 ; [.FB40.0020.0002][.E914.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8E6
2F8E8 ; [.FB40.0020.0002][.E942.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8E8
2F8E9 ; [.FB40.0020.0002][.E9A3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8E9
2F8EA ; [.FB40.0020.0002][.E9EA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8EA
F914  ; [.FB40.0020.0002][.EA02.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F914
F95C  ; [.FB40.0020.0002][.EA02.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F95C
F9BF  ; [.FB40.0020.0002][.EA02.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9BF
F94C  ; [.FB40.0020.0002][.EA13.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F94C
2F8EB ; [.FB40.0020.0002][.EAA8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8EB
F931  ; [.FB40.0020.0002][.EAD3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F931
2F8ED ; [.FB40.0020.0002][.EADB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8ED
F91D  ; [.FB40.0020.0002][.EB04.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F91D
2F4B  ; [.FB40.0020.0004][.EB20.0000.0000] # KANGXI RADICAL LACK
2F8EF ; [.FB40.0020.0002][.EB21.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8EF
2F8F1 ; [.FB40.0020.0002][.EB54.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8F1
2F4C  ; [.FB40.0020.0004][.EB62.0000.0000] # KANGXI RADICAL STOP
32A3  ; [.FB40.0020.0006][.EB63.0000.0000] # CIRCLED IDEOGRAPH CORRECT
2F8F3 ; [.FB40.0020.0002][.EB72.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8F3
F98C  ; [.FB40.0020.0002][.EB77.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F98C
FA95  ; [.FB40.0020.0002][.EB79.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA95
2F4D  ; [.FB40.0020.0004][.EB79.0000.0000] # KANGXI RADICAL DEATH
2E9E  ; [.FB40.0020.0004][.EB7A.0000.0000][.0000.00FC.0004] # CJK RADICAL DEATH
2F8F4 ; [.FB40.0020.0002][.EB9F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8F4
F9A5  ; [.FB40.0020.0002][.EBAE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9A5
2F4E  ; [.FB40.0020.0004][.EBB3.0000.0000] # KANGXI RADICAL WEAPON
F970  ; [.FB40.0020.0002][.EBBA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F970
FA96  ; [.FB40.0020.0002][.EBBA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA96
2F8F5 ; [.FB40.0020.0002][.EBBA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8F5
2F8F6 ; [.FB40.0020.0002][.EBBB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8F6
2F4F  ; [.FB40.0020.0004][.EBCB.0000.0000] # KANGXI RADICAL DO NOT
2E9F  ; [.FB40.0020.0004][.EBCD.0000.0000] # CJK RADICAL MOTHER
2F50  ; [.FB40.0020.0004][.EBD4.0000.0000] # KANGXI RADICAL COMPARE
2F51  ; [.FB40.0020.0004][.EBDB.0000.0000] # KANGXI RADICAL FUR
2F52  ; [.FB40.0020.0004][.EC0F.0000.0000] # KANGXI RADICAL CLAN
2EA0  ; [.FB40.0020.0004][.EC11.0000.0000] # CJK RADICAL CIVILIAN
2F53  ; [.FB40.0020.0004][.EC14.0000.0000] # KANGXI RADICAL STEAM
2F54  ; [.FB40.0020.0004][.EC34.0000.0000] # KANGXI RADICAL WATER
322C  ; [*02FA.0020.0004][.FB40.0020.0004][.EC34.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH WATER
328C  ; [.FB40.0020.0006][.EC34.0000.0000] # CIRCLED IDEOGRAPH WATER
2EA1  ; [.FB40.0020.0004][.EC35.0000.0000] # CJK RADICAL WATER ONE
2EA2  ; [.FB40.0020.0004][.EC3A.0000.0000] # CJK RADICAL WATER TWO
2F8FA ; [.FB40.0020.0002][.EC4E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8FA
2F8FE ; [.FB40.0020.0002][.EC67.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8FE
F972  ; [.FB40.0020.0002][.EC88.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F972
2F8FC ; [.FB40.0020.0002][.ECBF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8FC
F968  ; [.FB40.0020.0002][.ECCC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F968
2F8FD ; [.FB40.0020.0002][.ECCD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8FD
F9E3  ; [.FB40.0020.0002][.ECE5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9E3
329F  ; [.FB40.0020.0006][.ECE8.0000.0000] # CIRCLED IDEOGRAPH ATTENTION
2F8FF ; [.FB40.0020.0002][.ED16.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8FF
F915  ; [.FB40.0020.0002][.ED1B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F915
FA05  ; [.FB40.0020.0002][.ED1E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA05
2F907 ; [.FB40.0020.0002][.ED34.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F907
2F900 ; [.FB40.0020.0002][.ED3E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F900
F9CA  ; [.FB40.0020.0002][.ED41.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9CA
FA97  ; [.FB40.0020.0002][.ED41.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA97
2F902 ; [.FB40.0020.0002][.ED41.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F902
2F903 ; [.FB40.0020.0002][.ED69.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F903
F92A  ; [.FB40.0020.0002][.ED6A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F92A
FA45  ; [.FB40.0020.0002][.ED77.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA45
2F901 ; [.FB40.0020.0002][.ED77.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F901
2F904 ; [.FB40.0020.0002][.ED78.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F904
2F905 ; [.FB40.0020.0002][.ED85.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F905
F9F5  ; [.FB40.0020.0002][.EDCB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9F5
F94D  ; [.FB40.0020.0002][.EDDA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F94D
F9D6  ; [.FB40.0020.0002][.EDEA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9D6
2F90E ; [.FB40.0020.0002][.EDF9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F90E
FA46  ; [.FB40.0020.0002][.EE1A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA46
2F908 ; [.FB40.0020.0002][.EE2F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F908
2F909 ; [.FB40.0020.0002][.EE6E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F909
1F235 ; [.FB40.0020.001C][.EE80.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-6E80
F9CB  ; [.FB40.0020.0002][.EE9C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9CB
F9EC  ; [.FB40.0020.0002][.EEBA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9EC
2F90C ; [.FB40.0020.0002][.EEC7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F90C
FA99  ; [.FB40.0020.0002][.EECB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA99
2F90B ; [.FB40.0020.0002][.EECB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F90B
F904  ; [.FB40.0020.0002][.EED1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F904
FA98  ; [.FB40.0020.0002][.EEDB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA98
F94E  ; [.FB40.0020.0002][.EF0F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F94E
1F226 ; [.FB40.0020.001C][.EF14.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-6F14
FA47  ; [.FB40.0020.0002][.EF22.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA47
FA9A  ; [.FB40.0020.0002][.EF22.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA9A
F992  ; [.FB40.0020.0002][.EF23.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F992
2F90F ; [.FB40.0020.0002][.EF6E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F90F
2F912 ; [.FB40.0020.0002][.EFC6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F912
F922  ; [.FB40.0020.0002][.EFEB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F922
F984  ; [.FB40.0020.0002][.EFFE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F984
2F915 ; [.FB40.0020.0002][.F01B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F915
FA9B  ; [.FB40.0020.0002][.F01E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA9B
2F914 ; [.FB40.0020.0002][.F01E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F914
2F913 ; [.FB40.0020.0002][.F039.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F913
2F917 ; [.FB40.0020.0002][.F04A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F917
2F55  ; [.FB40.0020.0004][.F06B.0000.0000] # KANGXI RADICAL FIRE
322B  ; [*02FA.0020.0004][.FB40.0020.0004][.F06B.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH FIRE
328B  ; [.FB40.0020.0006][.F06B.0000.0000] # CIRCLED IDEOGRAPH FIRE
2EA3  ; [.FB40.0020.0004][.F06C.0000.0000] # CJK RADICAL FIRE
2F835 ; [.FB40.0020.0002][.F070.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F835
2F919 ; [.FB40.0020.0002][.F077.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F919
2F918 ; [.FB40.0020.0002][.F07D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F918
F9FB  ; [.FB40.0020.0002][.F099.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9FB
2F91A ; [.FB40.0020.0002][.F0AD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F91A
1F244 ; [*035C.0020.0004][.FB40.0020.0004][.F0B9.0000.0000][*035D.0020.0004] # TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-70B9
F99F  ; [.FB40.0020.0002][.F0C8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F99F
F916  ; [.FB40.0020.0002][.F0D9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F916
1F21A ; [.FB40.0020.001C][.F121.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-7121
2F91C ; [.FB40.0020.0002][.F145.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F91C
F993  ; [.FB40.0020.0002][.F149.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F993
FA48  ; [.FB40.0020.0002][.F16E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA48
FA9C  ; [.FB40.0020.0002][.F16E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA9C
2F91E ; [.FB40.0020.0002][.F19C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F91E
F9C0  ; [.FB40.0020.0002][.F1CE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9C0
F9EE  ; [.FB40.0020.0002][.F1D0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9EE
F932  ; [.FB40.0020.0002][.F210.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F932
F91E  ; [.FB40.0020.0002][.F21B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F91E
2F920 ; [.FB40.0020.0002][.F228.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F920
2F56  ; [.FB40.0020.0004][.F22A.0000.0000] # KANGXI RADICAL CLAW
FA49  ; [.FB40.0020.0002][.F22B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA49
2EA4  ; [.FB40.0020.0004][.F22B.0000.0000] # CJK RADICAL PAW ONE
2EA5  ; [.FB40.0020.0004][.F22B.0000.0000][.0000.00FC.0004] # CJK RADICAL PAW TWO
FA9E  ; [.FB40.0020.0002][.F235.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA9E
2F921 ; [.FB40.0020.0002][.F235.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F921
2F57  ; [.FB40.0020.0004][.F236.0000.0000] # KANGXI RADICAL FATHER
2F58  ; [.FB40.0020.0004][.F23B.0000.0000] # KANGXI RADICAL DOUBLE X
2F59  ; [.FB40.0020.0004][.F23F.0000.0000] # KANGXI RADICAL HALF TREE TRUNK
2F5A  ; [.FB40.0020.0004][.F247.0000.0000] # KANGXI RADICAL SLICE
2F922 ; [.FB40.0020.0002][.F250.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F922
2F5B  ; [.FB40.0020.0004][.F259.0000.0000] # KANGXI RADICAL FANG
2F5C  ; [.FB40.0020.0004][.F25B.0000.0000] # KANGXI RADICAL COW
2EA7  ; [.FB40.0020.0004][.F25B.0000.0000][.0000.00FC.0004] # CJK RADICAL COW
F946  ; [.FB40.0020.0002][.F262.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F946
3235  ; [*02FA.0020.0004][.FB40.0020.0004][.F279.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH SPECIAL
3295  ; [.FB40.0020.0006][.F279.0000.0000] # CIRCLED IDEOGRAPH SPECIAL
2F924 ; [.FB40.0020.0002][.F280.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F924
2F925 ; [.FB40.0020.0002][.F295.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F925
2F5D  ; [.FB40.0020.0004][.F2AC.0000.0000] # KANGXI RADICAL DOG
2EA8  ; [.FB40.0020.0004][.F2AD.0000.0000] # CJK RADICAL DOG
FA9F  ; [.FB40.0020.0002][.F2AF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA9F
F9FA  ; [.FB40.0020.0002][.F2C0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9FA
F92B  ; [.FB40.0020.0002][.F2FC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F92B
FA16  ; [.FB40.0020.0002][.F32A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA16
FAA0  ; [.FB40.0020.0002][.F32A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAA0
F9A7  ; [.FB40.0020.0002][.F375.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9A7
2F928 ; [.FB40.0020.0002][.F37A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F928
2F5E  ; [.FB40.0020.0004][.F384.0000.0000] # KANGXI RADICAL PROFOUND
F961  ; [.FB40.0020.0002][.F387.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F961
F9DB  ; [.FB40.0020.0002][.F387.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9DB
2F5F  ; [.FB40.0020.0004][.F389.0000.0000] # KANGXI RADICAL JADE
2F929 ; [.FB40.0020.0002][.F38B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F929
2EA9  ; [.FB40.0020.0004][.F38B.0000.0000][.0000.00FC.0004] # CJK RADICAL JADE
2F92B ; [.FB40.0020.0002][.F3A5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F92B
F9AD  ; [.FB40.0020.0002][.F3B2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9AD
F917  ; [.FB40.0020.0002][.F3DE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F917
F9E4  ; [.FB40.0020.0002][.F406.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9E4
F9CC  ; [.FB40.0020.0002][.F409.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9CC
FA4A  ; [.FB40.0020.0002][.F422.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA4A
2F92E ; [.FB40.0020.0002][.F447.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F92E
2F92F ; [.FB40.0020.0002][.F45C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F92F
F9AE  ; [.FB40.0020.0002][.F469.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9AE
FAA1  ; [.FB40.0020.0002][.F471.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAA1
2F930 ; [.FB40.0020.0002][.F471.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F930
2F931 ; [.FB40.0020.0002][.F485.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F931
F994  ; [.FB40.0020.0002][.F489.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F994
F9EF  ; [.FB40.0020.0002][.F498.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9EF
2F932 ; [.FB40.0020.0002][.F4CA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F932
2F60  ; [.FB40.0020.0004][.F4DC.0000.0000] # KANGXI RADICAL MELON
2F61  ; [.FB40.0020.0004][.F4E6.0000.0000] # KANGXI RADICAL TILE
FAA2  ; [.FB40.0020.0002][.F506.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAA2
2F62  ; [.FB40.0020.0004][.F518.0000.0000] # KANGXI RADICAL SWEET
2F63  ; [.FB40.0020.0004][.F51F.0000.0000] # KANGXI RADICAL LIFE
1F222 ; [.FB40.0020.001C][.F51F.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-751F
2F934 ; [.FB40.0020.0002][.F524.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F934
2F64  ; [.FB40.0020.0004][.F528.0000.0000] # KANGXI RADICAL USE
2F65  ; [.FB40.0020.0004][.F530.0000.0000] # KANGXI RADICAL FIELD
3199  ; [.FB40.0020.0014][.F532.0000.0000] # IDEOGRAPHIC ANNOTATION FIRST MARK
1F238 ; [.FB40.0020.001C][.F533.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-7533
329A  ; [.FB40.0020.0006][.F537.0000.0000] # CIRCLED IDEOGRAPH MALE
FAA3  ; [.FB40.0020.0002][.F53B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAA3
2F936 ; [.FB40.0020.0002][.F53E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F936
F9CD  ; [.FB40.0020.0002][.F559.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9CD
F976  ; [.FB40.0020.0002][.F565.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F976
F962  ; [.FB40.0020.0002][.F570.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F962
2F938 ; [.FB40.0020.0002][.F570.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F938
2F66  ; [.FB40.0020.0004][.F58B.0000.0000] # KANGXI RADICAL BOLT OF CLOTH
2EAA  ; [.FB40.0020.0004][.F58B.0000.0000][.0000.00FC.0004] # CJK RADICAL BOLT OF CLOTH
2F67  ; [.FB40.0020.0004][.F592.0000.0000] # KANGXI RADICAL SICKNESS
F9E5  ; [.FB40.0020.0002][.F5E2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9E5
2F93A ; [.FB40.0020.0002][.F610.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F93A
FAA4  ; [.FB40.0020.0002][.F61D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAA4
FAA5  ; [.FB40.0020.0002][.F61F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAA5
F9C1  ; [.FB40.0020.0002][.F642.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9C1
F90E  ; [.FB40.0020.0002][.F669.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F90E
2F68  ; [.FB40.0020.0004][.F676.0000.0000] # KANGXI RADICAL DOTTED TENT
2F69  ; [.FB40.0020.0004][.F67D.0000.0000] # KANGXI RADICAL WHITE
2F6A  ; [.FB40.0020.0004][.F6AE.0000.0000] # KANGXI RADICAL SKIN
2F6B  ; [.FB40.0020.0004][.F6BF.0000.0000] # KANGXI RADICAL DISH
FA17  ; [.FB40.0020.0002][.F6CA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA17
FAA6  ; [.FB40.0020.0002][.F6CA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAA6
1F246 ; [*035C.0020.0004][.FB40.0020.0004][.F6D7.0000.0000][*035D.0020.0004] # TORTOISE SHELL BRACKETED CJK UNIFIED IDEOGRAPH-76D7
FAA7  ; [.FB40.0020.0002][.F6DB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAA7
323C  ; [*02FA.0020.0004][.FB40.0020.0004][.F6E3.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH SUPERVISE
32AC  ; [.FB40.0020.0006][.F6E3.0000.0000] # CIRCLED IDEOGRAPH SUPERVISE
F933  ; [.FB40.0020.0002][.F6E7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F933
2F6C  ; [.FB40.0020.0004][.F6EE.0000.0000] # KANGXI RADICAL EYE
2EAB  ; [.FB40.0020.0004][.F6EE.0000.0000][.0000.00FC.0004] # CJK RADICAL EYE
FAA8  ; [.FB40.0020.0002][.F6F4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAA8
2F940 ; [.FB40.0020.0002][.F6F4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F940
F96D  ; [.FB40.0020.0002][.F701.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F96D
2F945 ; [.FB40.0020.0002][.F71E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F945
2F946 ; [.FB40.0020.0002][.F71F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F946
2F947 ; [.FB40.0020.0002][.F71F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F947
FAAA  ; [.FB40.0020.0002][.F740.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAAA
FAA9  ; [.FB40.0020.0002][.F74A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAA9
2F948 ; [.FB40.0020.0002][.F74A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F948
2F94A ; [.FB40.0020.0002][.F78B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F94A
FA9D  ; [.FB40.0020.0002][.F7A7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA9D
2F6D  ; [.FB40.0020.0004][.F7DB.0000.0000] # KANGXI RADICAL SPEAR
2F6E  ; [.FB40.0020.0004][.F7E2.0000.0000] # KANGXI RADICAL ARROW
2F6F  ; [.FB40.0020.0004][.F7F3.0000.0000] # KANGXI RADICAL STONE
2F94E ; [.FB40.0020.0002][.F84E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F94E
F9CE  ; [.FB40.0020.0002][.F86B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9CE
F93B  ; [.FB40.0020.0002][.F88C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F93B
2F94F ; [.FB40.0020.0002][.F88C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F94F
FA4B  ; [.FB40.0020.0002][.F891.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA4B
F947  ; [.FB40.0020.0002][.F8CA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F947
FAAB  ; [.FB40.0020.0002][.F8CC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAAB
2F950 ; [.FB40.0020.0002][.F8CC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F950
F964  ; [.FB40.0020.0002][.F8FB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F964
F985  ; [.FB40.0020.0002][.F92A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F985
2F70  ; [.FB40.0020.0004][.F93A.0000.0000] # KANGXI RADICAL SPIRIT
2EAC  ; [.FB40.0020.0004][.F93A.0000.0000][.0000.00FC.0004] # CJK RADICAL SPIRIT ONE
2EAD  ; [.FB40.0020.0004][.F93B.0000.0000] # CJK RADICAL SPIRIT TWO
FA18  ; [.FB40.0020.0002][.F93C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA18
FA4C  ; [.FB40.0020.0002][.F93E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA4C
3233  ; [*02FA.0020.0004][.FB40.0020.0004][.F93E.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH SOCIETY
3293  ; [.FB40.0020.0006][.F93E.0000.0000] # CIRCLED IDEOGRAPH SOCIETY
FA4E  ; [.FB40.0020.0002][.F948.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA4E
FA4D  ; [.FB40.0020.0002][.F949.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA4D
FA4F  ; [.FB40.0020.0002][.F950.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA4F
FA50  ; [.FB40.0020.0002][.F956.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA50
2F953 ; [.FB40.0020.0002][.F956.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F953
FA51  ; [.FB40.0020.0002][.F95D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA51
3237  ; [*02FA.0020.0004][.FB40.0020.0004][.F95D.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH CONGRATULATION
3297  ; [.FB40.0020.0006][.F95D.0000.0000] # CIRCLED IDEOGRAPH CONGRATULATION
FA19  ; [.FB40.0020.0002][.F95E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA19
FA1A  ; [.FB40.0020.0002][.F965.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA1A
3240  ; [*02FA.0020.0004][.FB40.0020.0004][.F96D.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH FESTIVAL
F93C  ; [.FB40.0020.0002][.F97F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F93C
1F232 ; [.FB40.0020.001C][.F981.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-7981
FA52  ; [.FB40.0020.0002][.F98D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA52
FA53  ; [.FB40.0020.0002][.F98E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA53
FA1B  ; [.FB40.0020.0002][.F98F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA1B
2F956 ; [.FB40.0020.0002][.F98F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F956
F9B6  ; [.FB40.0020.0002][.F9AE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9B6
2F71  ; [.FB40.0020.0004][.F9B8.0000.0000] # KANGXI RADICAL TRACK
2F72  ; [.FB40.0020.0004][.F9BE.0000.0000] # KANGXI RADICAL GRAIN
F995  ; [.FB40.0020.0002][.F9CA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F995
3299  ; [.FB40.0020.0006][.F9D8.0000.0000] # CIRCLED IDEOGRAPH SECRET
2F957 ; [.FB40.0020.0002][.F9EB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F957
F956  ; [.FB40.0020.0002][.FA1C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F956
FA54  ; [.FB40.0020.0002][.FA40.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA54
2F959 ; [.FB40.0020.0002][.FA40.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F959
2F95A ; [.FB40.0020.0002][.FA4A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F95A
2F95B ; [.FB40.0020.0002][.FA4F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F95B
2F73  ; [.FB40.0020.0004][.FA74.0000.0000] # KANGXI RADICAL CAVE
1F233 ; [.FB40.0020.001C][.FA7A.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-7A7A
FA55  ; [.FB40.0020.0002][.FA81.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA55
FAAC  ; [.FB40.0020.0002][.FAB1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAAC
F9F7  ; [.FB40.0020.0002][.FACB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9F7
2F74  ; [.FB40.0020.0004][.FACB.0000.0000] # KANGXI RADICAL STAND
2F95F ; [.FB40.0020.0002][.FAEE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F95F
2F75  ; [.FB40.0020.0004][.FAF9.0000.0000] # KANGXI RADICAL BAMBOO
2EAE  ; [.FB40.0020.0004][.FAF9.0000.0000][.0000.00FC.0004] # CJK RADICAL BAMBOO
F9F8  ; [.FB40.0020.0002][.FB20.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9F8
3247  ; [.FB40.0020.0006][.FB8F.0000.0000] # CIRCLED IDEOGRAPH KOTO
FA56  ; [.FB40.0020.0002][.FBC0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA56
FAAD  ; [.FB40.0020.0002][.FBC0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAAD
2F962 ; [.FB40.0020.0002][.FBC6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F962
2F963 ; [.FB40.0020.0002][.FBC9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F963
F9A6  ; [.FB40.0020.0002][.FC3E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9A6
F944  ; [.FB40.0020.0002][.FC60.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F944
2F76  ; [.FB40.0020.0004][.FC73.0000.0000] # KANGXI RADICAL RICE
FAAE  ; [.FB40.0020.0002][.FC7B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAAE
F9F9  ; [.FB40.0020.0002][.FC92.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9F9
FA1D  ; [.FB40.0020.0002][.FCBE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA1D
2F966 ; [.FB40.0020.0002][.FCD2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F966
FA03  ; [.FB40.0020.0002][.FCD6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA03
2F969 ; [.FB40.0020.0002][.FCE3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F969
F97B  ; [.FB40.0020.0002][.FCE7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F97B
2F968 ; [.FB40.0020.0002][.FCE8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F968
2F77  ; [.FB40.0020.0004][.FCF8.0000.0000] # KANGXI RADICAL SILK
2EAF  ; [.FB40.0020.0004][.FCF9.0000.0000] # CJK RADICAL SILK
2F96A ; [.FB40.0020.0002][.FD00.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F96A
F9CF  ; [.FB40.0020.0002][.FD10.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9CF
F96A  ; [.FB40.0020.0002][.FD22.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F96A
F94F  ; [.FB40.0020.0002][.FD2F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F94F
1F221 ; [.FB40.0020.001C][.FD42.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-7D42
FAAF  ; [.FB40.0020.0002][.FD5B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAAF
2F96C ; [.FB40.0020.0002][.FD63.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F96C
F93D  ; [.FB40.0020.0002][.FDA0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F93D
F957  ; [.FB40.0020.0002][.FDBE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F957
2F96E ; [.FB40.0020.0002][.FDC7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F96E
F996  ; [.FB40.0020.0002][.FDF4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F996
FA57  ; [.FB40.0020.0002][.FDF4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA57
FAB0  ; [.FB40.0020.0002][.FDF4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAB0
2F96F ; [.FB40.0020.0002][.FE02.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F96F
FA58  ; [.FB40.0020.0002][.FE09.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA58
F950  ; [.FB40.0020.0002][.FE37.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F950
FA59  ; [.FB40.0020.0002][.FE41.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA59
2F970 ; [.FB40.0020.0002][.FE45.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F970
2EB0  ; [.FB40.0020.0004][.FE9F.0000.0000] # CJK RADICAL C-SIMPLIFIED SILK
2F78  ; [.FB40.0020.0004][.FF36.0000.0000] # KANGXI RADICAL JAR
FAB1  ; [.FB40.0020.0002][.FF3E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAB1
2F79  ; [.FB40.0020.0004][.FF51.0000.0000] # KANGXI RADICAL NET
2EB2  ; [.FB40.0020.0004][.FF52.0000.0000] # CJK RADICAL NET TWO
2EB5  ; [.FB40.0020.0004][.FF52.0000.0000][.0000.00FC.0004] # CJK RADICAL MESH
2EB1  ; [.FB40.0020.0004][.FF53.0000.0000] # CJK RADICAL NET ONE
2EB3  ; [.FB40.0020.0004][.FF53.0000.0000][.0000.00FC.0004] # CJK RADICAL NET THREE
2EB4  ; [.FB40.0020.0004][.FF53.0000.0000][.0000.00FD.0004] # CJK RADICAL NET FOUR
FA5A  ; [.FB40.0020.0002][.FF72.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA5A
F9E6  ; [.FB40.0020.0002][.FF79.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9E6
2F976 ; [.FB40.0020.0002][.FF7A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F976
F90F  ; [.FB40.0020.0002][.FF85.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F90F
2F7A  ; [.FB40.0020.0004][.FF8A.0000.0000] # KANGXI RADICAL SHEEP
2EB6  ; [.FB40.0020.0004][.FF8A.0000.0000][.0000.00FC.0004] # CJK RADICAL SHEEP
2EB7  ; [.FB40.0020.0004][.FF8A.0000.0000][.0000.00FD.0004] # CJK RADICAL RAM
2EB8  ; [.FB40.0020.0004][.FF8B.0000.0000] # CJK RADICAL EWE
2F978 ; [.FB40.0020.0002][.FF95.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F978
F9AF  ; [.FB40.0020.0002][.FF9A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9AF
FA1E  ; [.FB40.0020.0002][.FFBD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA1E
2F7B  ; [.FB40.0020.0004][.FFBD.0000.0000] # KANGXI RADICAL FEATHER
2F979 ; [.FB40.0020.0002][.FFFA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F979
F934  ; [.FB41.0020.0002][.8001.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F934
2F7C  ; [.FB41.0020.0004][.8001.0000.0000] # KANGXI RADICAL OLD
2EB9  ; [.FB41.0020.0004][.8002.0000.0000] # CJK RADICAL OLD
FA5B  ; [.FB41.0020.0002][.8005.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA5B
FAB2  ; [.FB41.0020.0002][.8005.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAB2
2F97A ; [.FB41.0020.0002][.8005.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F97A
2F7D  ; [.FB41.0020.0004][.800C.0000.0000] # KANGXI RADICAL AND
2F7E  ; [.FB41.0020.0004][.8012.0000.0000] # KANGXI RADICAL PLOW
2F7F  ; [.FB41.0020.0004][.8033.0000.0000] # KANGXI RADICAL EAR
F9B0  ; [.FB41.0020.0002][.8046.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9B0
2F97D ; [.FB41.0020.0002][.8060.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F97D
F997  ; [.FB41.0020.0002][.806F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F997
2F97F ; [.FB41.0020.0002][.8070.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F97F
F945  ; [.FB41.0020.0002][.807E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F945
2F80  ; [.FB41.0020.0004][.807F.0000.0000] # KANGXI RADICAL BRUSH
2EBB  ; [.FB41.0020.0004][.807F.0000.0000][.0000.00FC.0004] # CJK RADICAL BRUSH TWO
2EBA  ; [.FB41.0020.0004][.8080.0000.0000] # CJK RADICAL BRUSH ONE
2F81  ; [.FB41.0020.0004][.8089.0000.0000] # KANGXI RADICAL MEAT
2EBC  ; [.FB41.0020.0004][.8089.0000.0000][.0000.00FC.0004] # CJK RADICAL MEAT
F953  ; [.FB41.0020.0002][.808B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F953
2F8D6 ; [.FB41.0020.0002][.80AD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8D6
2F982 ; [.FB41.0020.0002][.80B2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F982
2F983 ; [.FB41.0020.0002][.8103.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F983
2F985 ; [.FB41.0020.0002][.813E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F985
F926  ; [.FB41.0020.0002][.81D8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F926
2F82  ; [.FB41.0020.0004][.81E3.0000.0000] # KANGXI RADICAL MINISTER
F9F6  ; [.FB41.0020.0002][.81E8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9F6
2F83  ; [.FB41.0020.0004][.81EA.0000.0000] # KANGXI RADICAL SELF
3242  ; [*02FA.0020.0004][.FB41.0020.0004][.81EA.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH SELF
FA5C  ; [.FB41.0020.0002][.81ED.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA5C
2F84  ; [.FB41.0020.0004][.81F3.0000.0000] # KANGXI RADICAL ARRIVE
3243  ; [*02FA.0020.0004][.FB41.0020.0004][.81F3.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH REACH
2F85  ; [.FB41.0020.0004][.81FC.0000.0000] # KANGXI RADICAL MORTAR
2EBD  ; [.FB41.0020.0004][.81FC.0000.0000][.0000.00FC.0004] # CJK RADICAL MORTAR
2F893 ; [.FB41.0020.0002][.8201.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F893
2F98B ; [.FB41.0020.0002][.8201.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F98B
2F98C ; [.FB41.0020.0002][.8204.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F98C
2F86  ; [.FB41.0020.0004][.820C.0000.0000] # KANGXI RADICAL TONGUE
FA6D  ; [.FB41.0020.0002][.8218.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA6D
2F87  ; [.FB41.0020.0004][.821B.0000.0000] # KANGXI RADICAL OPPOSE
2F88  ; [.FB41.0020.0004][.821F.0000.0000] # KANGXI RADICAL BOAT
2F89  ; [.FB41.0020.0004][.826E.0000.0000] # KANGXI RADICAL STOPPING
F97C  ; [.FB41.0020.0002][.826F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F97C
2F8A  ; [.FB41.0020.0004][.8272.0000.0000] # KANGXI RADICAL COLOR
2F8B  ; [.FB41.0020.0004][.8278.0000.0000] # KANGXI RADICAL GRASS
FA5D  ; [.FB41.0020.0002][.8279.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA5D
FA5E  ; [.FB41.0020.0002][.8279.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA5E
2EBE  ; [.FB41.0020.0004][.8279.0000.0000] # CJK RADICAL GRASS ONE
2EBF  ; [.FB41.0020.0004][.8279.0000.0000][.0000.00FC.0004] # CJK RADICAL GRASS TWO
2EC0  ; [.FB41.0020.0004][.8279.0000.0000][.0000.00FD.0004] # CJK RADICAL GRASS THREE
2F990 ; [.FB41.0020.0002][.828B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F990
2F98F ; [.FB41.0020.0002][.8291.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F98F
2F991 ; [.FB41.0020.0002][.829D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F991
2F993 ; [.FB41.0020.0002][.82B1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F993
2F994 ; [.FB41.0020.0002][.82B3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F994
2F995 ; [.FB41.0020.0002][.82BD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F995
F974  ; [.FB41.0020.0002][.82E5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F974
2F998 ; [.FB41.0020.0002][.82E5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F998
2F996 ; [.FB41.0020.0002][.82E6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F996
2F999 ; [.FB41.0020.0002][.831D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F999
2F99C ; [.FB41.0020.0002][.8323.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F99C
F9FE  ; [.FB41.0020.0002][.8336.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9FE
FAB3  ; [.FB41.0020.0002][.8352.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAB3
2F9A0 ; [.FB41.0020.0002][.8353.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9A0
2F99A ; [.FB41.0020.0002][.8363.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F99A
2F99B ; [.FB41.0020.0002][.83AD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F99B
2F99D ; [.FB41.0020.0002][.83BD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F99D
F93E  ; [.FB41.0020.0002][.83C9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F93E
2F9A1 ; [.FB41.0020.0002][.83CA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9A1
2F9A2 ; [.FB41.0020.0002][.83CC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9A2
2F9A3 ; [.FB41.0020.0002][.83DC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9A3
2F99E ; [.FB41.0020.0002][.83E7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F99E
FAB4  ; [.FB41.0020.0002][.83EF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAB4
F958  ; [.FB41.0020.0002][.83F1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F958
F918  ; [.FB41.0020.0002][.843D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F918
F96E  ; [.FB41.0020.0002][.8449.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F96E
FA5F  ; [.FB41.0020.0002][.8457.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA5F
2F99F ; [.FB41.0020.0002][.8457.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F99F
F999  ; [.FB41.0020.0002][.84EE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F999
2F9A8 ; [.FB41.0020.0002][.84F1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9A8
2F9A9 ; [.FB41.0020.0002][.84F3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9A9
F9C2  ; [.FB41.0020.0002][.84FC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9C2
2F9AA ; [.FB41.0020.0002][.8516.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9AA
2F9AC ; [.FB41.0020.0002][.8564.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9AC
F923  ; [.FB41.0020.0002][.85CD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F923
F9F0  ; [.FB41.0020.0002][.85FA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9F0
F935  ; [.FB41.0020.0002][.8606.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F935
FA20  ; [.FB41.0020.0002][.8612.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA20
F91F  ; [.FB41.0020.0002][.862D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F91F
F910  ; [.FB41.0020.0002][.863F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F910
2F8C  ; [.FB41.0020.0004][.864D.0000.0000] # KANGXI RADICAL TIGER
2EC1  ; [.FB41.0020.0004][.864E.0000.0000] # CJK RADICAL TIGER
2F9B3 ; [.FB41.0020.0002][.8650.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9B3
F936  ; [.FB41.0020.0002][.865C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F936
2F9B4 ; [.FB41.0020.0002][.865C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9B4
2F9B5 ; [.FB41.0020.0002][.8667.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9B5
2F9B6 ; [.FB41.0020.0002][.8669.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9B6
2F8D  ; [.FB41.0020.0004][.866B.0000.0000] # KANGXI RADICAL INSECT
2F9B8 ; [.FB41.0020.0002][.8688.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9B8
2F9B7 ; [.FB41.0020.0002][.86A9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9B7
2F9BA ; [.FB41.0020.0002][.86E2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9BA
2F9B9 ; [.FB41.0020.0002][.870E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9B9
2F9BC ; [.FB41.0020.0002][.8728.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9BC
2F9BD ; [.FB41.0020.0002][.876B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9BD
FAB5  ; [.FB41.0020.0002][.8779.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAB5
2F9BB ; [.FB41.0020.0002][.8779.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9BB
2F9BE ; [.FB41.0020.0002][.8786.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9BE
F911  ; [.FB41.0020.0002][.87BA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F911
2F9C0 ; [.FB41.0020.0002][.87E1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9C0
2F9C1 ; [.FB41.0020.0002][.8801.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9C1
F927  ; [.FB41.0020.0002][.881F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F927
2F8E  ; [.FB41.0020.0004][.8840.0000.0000] # KANGXI RADICAL BLOOD
FA08  ; [.FB41.0020.0002][.884C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA08
2F8F  ; [.FB41.0020.0004][.884C.0000.0000] # KANGXI RADICAL WALK ENCLOSURE
2F9C3 ; [.FB41.0020.0002][.8860.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9C3
2F9C4 ; [.FB41.0020.0002][.8863.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9C4
2F90  ; [.FB41.0020.0004][.8863.0000.0000] # KANGXI RADICAL CLOTHES
2EC2  ; [.FB41.0020.0004][.8864.0000.0000] # CJK RADICAL CLOTHES
F9A0  ; [.FB41.0020.0002][.88C2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9A0
F9E7  ; [.FB41.0020.0002][.88CF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9E7
2F9C6 ; [.FB41.0020.0002][.88D7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9C6
2F9C7 ; [.FB41.0020.0002][.88DE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9C7
F9E8  ; [.FB41.0020.0002][.88E1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9E8
F912  ; [.FB41.0020.0002][.88F8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F912
2F9C9 ; [.FB41.0020.0002][.88FA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9C9
FA60  ; [.FB41.0020.0002][.8910.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA60
FAB6  ; [.FB41.0020.0002][.8941.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAB6
F924  ; [.FB41.0020.0002][.8964.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F924
2F91  ; [.FB41.0020.0004][.897E.0000.0000] # KANGXI RADICAL WEST
2EC4  ; [.FB41.0020.0004][.897F.0000.0000] # CJK RADICAL WEST TWO
2EC3  ; [.FB41.0020.0004][.8980.0000.0000] # CJK RADICAL WEST ONE
FAB7  ; [.FB41.0020.0002][.8986.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAB7
FA0A  ; [.FB41.0020.0002][.898B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA0A
2F92  ; [.FB41.0020.0004][.898B.0000.0000] # KANGXI RADICAL SEE
FA61  ; [.FB41.0020.0002][.8996.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA61
FAB8  ; [.FB41.0020.0002][.8996.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAB8
2EC5  ; [.FB41.0020.0004][.89C1.0000.0000] # CJK RADICAL C-SIMPLIFIED SEE
2EC6  ; [.FB41.0020.0004][.89D2.0000.0000] # CJK RADICAL SIMPLIFIED HORN
2F93  ; [.FB41.0020.0004][.89D2.0000.0000] # KANGXI RADICAL HORN
2EC7  ; [.FB41.0020.0004][.89D2.0000.0000][.0000.00FC.0004] # CJK RADICAL HORN
1F216 ; [.FB41.0020.001C][.89E3.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-89E3
2F94  ; [.FB41.0020.0004][.8A00.0000.0000] # KANGXI RADICAL SPEECH
2F9CF ; [.FB41.0020.0002][.8AA0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9CF
F96F  ; [.FB41.0020.0002][.8AAA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F96F
F9A1  ; [.FB41.0020.0002][.8AAA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9A1
FAB9  ; [.FB41.0020.0002][.8ABF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAB9
FABB  ; [.FB41.0020.0002][.8ACB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FABB
F97D  ; [.FB41.0020.0002][.8AD2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F97D
F941  ; [.FB41.0020.0002][.8AD6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F941
FABE  ; [.FB41.0020.0002][.8AED.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FABE
2F9D0 ; [.FB41.0020.0002][.8AED.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9D0
FA22  ; [.FB41.0020.0002][.8AF8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA22
FABA  ; [.FB41.0020.0002][.8AF8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FABA
F95D  ; [.FB41.0020.0002][.8AFE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F95D
FABD  ; [.FB41.0020.0002][.8AFE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FABD
FA62  ; [.FB41.0020.0002][.8B01.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA62
FABC  ; [.FB41.0020.0002][.8B01.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FABC
FA63  ; [.FB41.0020.0002][.8B39.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA63
FABF  ; [.FB41.0020.0002][.8B39.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FABF
F9FC  ; [.FB41.0020.0002][.8B58.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9FC
F95A  ; [.FB41.0020.0002][.8B80.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F95A
FAC0  ; [.FB41.0020.0002][.8B8A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAC0
2F9D1 ; [.FB41.0020.0002][.8B8A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9D1
2EC8  ; [.FB41.0020.0004][.8BA0.0000.0000] # CJK RADICAL C-SIMPLIFIED SPEECH
2F95  ; [.FB41.0020.0004][.8C37.0000.0000] # KANGXI RADICAL VALLEY
2F96  ; [.FB41.0020.0004][.8C46.0000.0000] # KANGXI RADICAL BEAN
F900  ; [.FB41.0020.0002][.8C48.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F900
2F9D2 ; [.FB41.0020.0002][.8C55.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9D2
2F97  ; [.FB41.0020.0004][.8C55.0000.0000] # KANGXI RADICAL PIG
2F98  ; [.FB41.0020.0004][.8C78.0000.0000] # KANGXI RADICAL BADGER
2F99  ; [.FB41.0020.0004][.8C9D.0000.0000] # KANGXI RADICAL SHELL
3236  ; [*02FA.0020.0004][.FB41.0020.0004][.8CA1.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH FINANCIAL
3296  ; [.FB41.0020.0006][.8CA1.0000.0000] # CIRCLED IDEOGRAPH FINANCIAL
1F223 ; [.FB41.0020.001C][.8CA9.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-8CA9
2F9D4 ; [.FB41.0020.0002][.8CAB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9D4
2F9D5 ; [.FB41.0020.0002][.8CC1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9D5
F948  ; [.FB41.0020.0002][.8CC2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F948
323E  ; [*02FA.0020.0004][.FB41.0020.0004][.8CC7.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH RESOURCE
32AE  ; [.FB41.0020.0006][.8CC7.0000.0000] # CIRCLED IDEOGRAPH RESOURCE
F903  ; [.FB41.0020.0002][.8CC8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F903
FA64  ; [.FB41.0020.0002][.8CD3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA64
FA65  ; [.FB41.0020.0002][.8D08.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA65
FAC1  ; [.FB41.0020.0002][.8D08.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAC1
2F9D6 ; [.FB41.0020.0002][.8D1B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9D6
2EC9  ; [.FB41.0020.0004][.8D1D.0000.0000] # CJK RADICAL C-SIMPLIFIED SHELL
2F9A  ; [.FB41.0020.0004][.8D64.0000.0000] # KANGXI RADICAL RED
2F9B  ; [.FB41.0020.0004][.8D70.0000.0000] # KANGXI RADICAL RUN
1F230 ; [.FB41.0020.001C][.8D70.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-8D70
2F9D7 ; [.FB41.0020.0002][.8D77.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9D7
2F9C  ; [.FB41.0020.0004][.8DB3.0000.0000] # KANGXI RADICAL FOOT
2ECA  ; [.FB41.0020.0004][.8DB3.0000.0000][.0000.00FC.0004] # CJK RADICAL FOOT
2F9DB ; [.FB41.0020.0002][.8DBC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9DB
2F9DA ; [.FB41.0020.0002][.8DCB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9DA
F937  ; [.FB41.0020.0002][.8DEF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F937
2F9DC ; [.FB41.0020.0002][.8DF0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9DC
2F9D  ; [.FB41.0020.0004][.8EAB.0000.0000] # KANGXI RADICAL BODY
F902  ; [.FB41.0020.0002][.8ECA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F902
2F9E  ; [.FB41.0020.0004][.8ECA.0000.0000] # KANGXI RADICAL CART
2F9DE ; [.FB41.0020.0002][.8ED4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9DE
F998  ; [.FB41.0020.0002][.8F26.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F998
F9D7  ; [.FB41.0020.0002][.8F2A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9D7
FAC2  ; [.FB41.0020.0002][.8F38.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAC2
2F9DF ; [.FB41.0020.0002][.8F38.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9DF
FA07  ; [.FB41.0020.0002][.8F3B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA07
F98D  ; [.FB41.0020.0002][.8F62.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F98D
2ECB  ; [.FB41.0020.0004][.8F66.0000.0000] # CJK RADICAL C-SIMPLIFIED CART
2F9F  ; [.FB41.0020.0004][.8F9B.0000.0000] # KANGXI RADICAL BITTER
2F98D ; [.FB41.0020.0002][.8F9E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F98D
F971  ; [.FB41.0020.0002][.8FB0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F971
2FA0  ; [.FB41.0020.0004][.8FB0.0000.0000] # KANGXI RADICAL MORNING
2FA1  ; [.FB41.0020.0004][.8FB5.0000.0000] # KANGXI RADICAL WALK
FA66  ; [.FB41.0020.0002][.8FB6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA66
2ECC  ; [.FB41.0020.0004][.8FB6.0000.0000] # CJK RADICAL SIMPLIFIED WALK
2ECD  ; [.FB41.0020.0004][.8FB6.0000.0000][.0000.00FC.0004] # CJK RADICAL WALK ONE
2ECE  ; [.FB41.0020.0004][.8FB6.0000.0000][.0000.00FD.0004] # CJK RADICAL WALK TWO
F99A  ; [.FB41.0020.0002][.9023.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F99A
FA25  ; [.FB41.0020.0002][.9038.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA25
FA67  ; [.FB41.0020.0002][.9038.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA67
1F22B ; [.FB41.0020.001C][.904A.0000.0000] # SQUARED CJK UNIFIED IDEOGRAPH-904A
329C  ; [.FB41.0020.0006][.9069.0000.0000] # CIRCLED IDEOGRAPH SUITABLE
FAC3  ; [.FB41.0020.0002][.9072.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAC3
F9C3  ; [.FB41.0020.0002][.907C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9C3
F913  ; [.FB41.0020.0002][.908F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F913
2FA2  ; [.FB41.0020.0004][.9091.0000.0000] # KANGXI RADICAL CITY
2ECF  ; [.FB41.0020.0004][.9091.0000.0000][.0000.00FC.0004] # CJK RADICAL CITY
2F9E2 ; [.FB41.0020.0002][.9094.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9E2
F92C  ; [.FB41.0020.0002][.90CE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F92C
FA2E  ; [.FB41.0020.0002][.90DE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA2E
2F9E3 ; [.FB41.0020.0002][.90F1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9E3
FA26  ; [.FB41.0020.0002][.90FD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA26
2F9E4 ; [.FB41.0020.0002][.9111.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9E4
2F9E6 ; [.FB41.0020.0002][.911B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9E6
2FA3  ; [.FB41.0020.0004][.9149.0000.0000] # KANGXI RADICAL WINE
F919  ; [.FB41.0020.0002][.916A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F919
FAC4  ; [.FB41.0020.0002][.9199.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAC4
F9B7  ; [.FB41.0020.0002][.91B4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9B7
2FA4  ; [.FB41.0020.0004][.91C6.0000.0000] # KANGXI RADICAL DISTINGUISH
F9E9  ; [.FB41.0020.0002][.91CC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9E9
2FA5  ; [.FB41.0020.0004][.91CC.0000.0000] # KANGXI RADICAL VILLAGE
F97E  ; [.FB41.0020.0002][.91CF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F97E
F90A  ; [.FB41.0020.0002][.91D1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F90A
2FA6  ; [.FB41.0020.0004][.91D1.0000.0000] # KANGXI RADICAL GOLD
322E  ; [*02FA.0020.0004][.FB41.0020.0004][.91D1.0000.0000][*02FB.0020.0004] # PARENTHESIZED IDEOGRAPH METAL
328E  ; [.FB41.0020.0006][.91D1.0000.0000] # CIRCLED IDEOGRAPH METAL
F9B1  ; [.FB41.0020.0002][.9234.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9B1
2F9E7 ; [.FB41.0020.0002][.9238.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9E7
FAC5  ; [.FB41.0020.0002][.9276.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAC5
2F9EA ; [.FB41.0020.0002][.927C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9EA
2F9E8 ; [.FB41.0020.0002][.92D7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9E8
2F9E9 ; [.FB41.0020.0002][.92D8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9E9
F93F  ; [.FB41.0020.0002][.9304.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F93F
F99B  ; [.FB41.0020.0002][.934A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F99B
2F9EB ; [.FB41.0020.0002][.93F9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9EB
2F9EC ; [.FB41.0020.0002][.9415.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9EC
2ED0  ; [.FB41.0020.0004][.9485.0000.0000] # CJK RADICAL C-SIMPLIFIED GOLD
2ED1  ; [.FB41.0020.0004][.9577.0000.0000] # CJK RADICAL LONG ONE
2FA7  ; [.FB41.0020.0004][.9577.0000.0000] # KANGXI RADICAL LONG
2ED2  ; [.FB41.0020.0004][.9578.0000.0000] # CJK RADICAL LONG TWO
2ED3  ; [.FB41.0020.0004][.957F.0000.0000] # CJK RADICAL C-SIMPLIFIED LONG
2FA8  ; [.FB41.0020.0004][.9580.0000.0000] # KANGXI RADICAL GATE
2F9EE ; [.FB41.0020.0002][.958B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9EE
F986  ; [.FB41.0020.0002][.95AD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F986
2F9F0 ; [.FB41.0020.0002][.95B7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9F0
2ED4  ; [.FB41.0020.0004][.95E8.0000.0000] # CJK RADICAL C-SIMPLIFIED GATE
2FA9  ; [.FB41.0020.0004][.961C.0000.0000] # KANGXI RADICAL MOUND
2ED5  ; [.FB41.0020.0004][.961C.0000.0000][.0000.00FC.0004] # CJK RADICAL MOUND ONE
2ED6  ; [.FB41.0020.0004][.961D.0000.0000] # CJK RADICAL MOUND TWO
F9C6  ; [.FB41.0020.0002][.962E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9C6
F951  ; [.FB41.0020.0002][.964B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F951
FA09  ; [.FB41.0020.0002][.964D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA09
F959  ; [.FB41.0020.0002][.9675.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F959
F9D3  ; [.FB41.0020.0002][.9678.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9D3
FAC6  ; [.FB41.0020.0002][.967C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAC6
F9DC  ; [.FB41.0020.0002][.9686.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9DC
F9F1  ; [.FB41.0020.0002][.96A3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9F1
2FAA  ; [.FB41.0020.0004][.96B6.0000.0000] # KANGXI RADICAL SLAVE
FA2F  ; [.FB41.0020.0002][.96B7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA2F
F9B8  ; [.FB41.0020.0002][.96B8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9B8
2FAB  ; [.FB41.0020.0004][.96B9.0000.0000] # KANGXI RADICAL SHORT TAILED BIRD
2F9F3 ; [.FB41.0020.0002][.96C3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9F3
F9EA  ; [.FB41.0020.0002][.96E2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9EA
FA68  ; [.FB41.0020.0002][.96E3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA68
FAC7  ; [.FB41.0020.0002][.96E3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAC7
2FAC  ; [.FB41.0020.0004][.96E8.0000.0000] # KANGXI RADICAL RAIN
2ED7  ; [.FB41.0020.0004][.96E8.0000.0000][.0000.00FC.0004] # CJK RADICAL RAIN
F9B2  ; [.FB41.0020.0002][.96F6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9B2
F949  ; [.FB41.0020.0002][.96F7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F949
2F9F5 ; [.FB41.0020.0002][.9723.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9F5
F938  ; [.FB41.0020.0002][.9732.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F938
F9B3  ; [.FB41.0020.0002][.9748.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9B3
2FAD  ; [.FB41.0020.0004][.9751.0000.0000] # KANGXI RADICAL BLUE
2ED8  ; [.FB41.0020.0004][.9752.0000.0000] # CJK RADICAL BLUE
FA1C  ; [.FB41.0020.0002][.9756.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA1C
FAC8  ; [.FB41.0020.0002][.9756.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAC8
2FAE  ; [.FB41.0020.0004][.975E.0000.0000] # KANGXI RADICAL WRONG
2FAF  ; [.FB41.0020.0004][.9762.0000.0000] # KANGXI RADICAL FACE
2FB0  ; [.FB41.0020.0004][.9769.0000.0000] # KANGXI RADICAL LEATHER
2FB1  ; [.FB41.0020.0004][.97CB.0000.0000] # KANGXI RADICAL TANNED LEATHER
FAC9  ; [.FB41.0020.0002][.97DB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAC9
2F9FA ; [.FB41.0020.0002][.97E0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9FA
2ED9  ; [.FB41.0020.0004][.97E6.0000.0000] # CJK RADICAL C-SIMPLIFIED TANNED LEATHER
2FB2  ; [.FB41.0020.0004][.97ED.0000.0000] # KANGXI RADICAL LEEK
2FB3  ; [.FB41.0020.0004][.97F3.0000.0000] # KANGXI RADICAL SOUND
FA69  ; [.FB41.0020.0002][.97FF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA69
FACA  ; [.FB41.0020.0002][.97FF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FACA
2FB4  ; [.FB41.0020.0004][.9801.0000.0000] # KANGXI RADICAL LEAF
32A0  ; [.FB41.0020.0006][.9805.0000.0000] # CIRCLED IDEOGRAPH ITEM
FACB  ; [.FB41.0020.0002][.980B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FACB
2F9FE ; [.FB41.0020.0002][.980B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9FE
2F9FF ; [.FB41.0020.0002][.980B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9FF
F9B4  ; [.FB41.0020.0002][.9818.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9B4
2FA00 ; [.FB41.0020.0002][.9829.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA00
FA6A  ; [.FB41.0020.0002][.983B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA6A
FACC  ; [.FB41.0020.0002][.983B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FACC
F9D0  ; [.FB41.0020.0002][.985E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9D0
2EDA  ; [.FB41.0020.0004][.9875.0000.0000] # CJK RADICAL C-SIMPLIFIED LEAF
2FB5  ; [.FB41.0020.0004][.98A8.0000.0000] # KANGXI RADICAL WIND
2EDB  ; [.FB41.0020.0004][.98CE.0000.0000] # CJK RADICAL C-SIMPLIFIED WIND
2FB6  ; [.FB41.0020.0004][.98DB.0000.0000] # KANGXI RADICAL FLY
2EDC  ; [.FB41.0020.0004][.98DE.0000.0000] # CJK RADICAL C-SIMPLIFIED FLY
2EDD  ; [.FB41.0020.0004][.98DF.0000.0000] # CJK RADICAL EAT ONE
2FB7  ; [.FB41.0020.0004][.98DF.0000.0000] # KANGXI RADICAL EAT
2EDF  ; [.FB41.0020.0004][.98E0.0000.0000] # CJK RADICAL EAT THREE
2EDE  ; [.FB41.0020.0004][.98E0.0000.0000][.0000.00FC.0004] # CJK RADICAL EAT TWO
2FA02 ; [.FB41.0020.0002][.98E2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA02
FA2A  ; [.FB41.0020.0002][.98EF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA2A
FA2B  ; [.FB41.0020.0002][.98FC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA2B
FA2C  ; [.FB41.0020.0002][.9928.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA2C
2FA04 ; [.FB41.0020.0002][.9929.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA04
2EE0  ; [.FB41.0020.0004][.9963.0000.0000] # CJK RADICAL C-SIMPLIFIED EAT
2FB8  ; [.FB41.0020.0004][.9996.0000.0000] # KANGXI RADICAL HEAD
2EE1  ; [.FB41.0020.0004][.9996.0000.0000][.0000.00FC.0004] # CJK RADICAL HEAD
2FB9  ; [.FB41.0020.0004][.9999.0000.0000] # KANGXI RADICAL FRAGRANT
2FA05 ; [.FB41.0020.0002][.99A7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA05
2FBA  ; [.FB41.0020.0004][.99AC.0000.0000] # KANGXI RADICAL HORSE
2FA06 ; [.FB41.0020.0002][.99C2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA06
F91A  ; [.FB41.0020.0002][.99F1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F91A
2FA07 ; [.FB41.0020.0002][.99FE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA07
F987  ; [.FB41.0020.0002][.9A6A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F987
2EE2  ; [.FB41.0020.0004][.9A6C.0000.0000] # CJK RADICAL C-SIMPLIFIED HORSE
2FBB  ; [.FB41.0020.0004][.9AA8.0000.0000] # KANGXI RADICAL BONE
2EE3  ; [.FB41.0020.0004][.9AA8.0000.0000][.0000.00FC.0004] # CJK RADICAL BONE
2FBC  ; [.FB41.0020.0004][.9AD8.0000.0000] # KANGXI RADICAL TALL
2FBD  ; [.FB41.0020.0004][.9ADF.0000.0000] # KANGXI RADICAL HAIR
FACD  ; [.FB41.0020.0002][.9B12.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FACD
2FA0A ; [.FB41.0020.0002][.9B12.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA0A
2FBE  ; [.FB41.0020.0004][.9B25.0000.0000] # KANGXI RADICAL FIGHT
2FBF  ; [.FB41.0020.0004][.9B2F.0000.0000] # KANGXI RADICAL SACRIFICIAL WINE
2FC0  ; [.FB41.0020.0004][.9B32.0000.0000] # KANGXI RADICAL CAULDRON
2FC1  ; [.FB41.0020.0004][.9B3C.0000.0000] # KANGXI RADICAL GHOST
2EE4  ; [.FB41.0020.0004][.9B3C.0000.0000][.0000.00FC.0004] # CJK RADICAL GHOST
2FC2  ; [.FB41.0020.0004][.9B5A.0000.0000] # KANGXI RADICAL FISH
F939  ; [.FB41.0020.0002][.9B6F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F939
2FA0B ; [.FB41.0020.0002][.9C40.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA0B
F9F2  ; [.FB41.0020.0002][.9C57.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9F2
2EE5  ; [.FB41.0020.0004][.9C7C.0000.0000] # CJK RADICAL C-SIMPLIFIED FISH
2FC3  ; [.FB41.0020.0004][.9CE5.0000.0000] # KANGXI RADICAL BIRD
2FA0C ; [.FB41.0020.0002][.9CFD.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA0C
2FA0F ; [.FB41.0020.0002][.9D67.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA0F
FA2D  ; [.FB41.0020.0002][.9DB4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA2D
F93A  ; [.FB41.0020.0002][.9DFA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F93A
F920  ; [.FB41.0020.0002][.9E1E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F920
2EE6  ; [.FB41.0020.0004][.9E1F.0000.0000] # CJK RADICAL C-SIMPLIFIED BIRD
2FC4  ; [.FB41.0020.0004][.9E75.0000.0000] # KANGXI RADICAL SALT
2EE7  ; [.FB41.0020.0004][.9E75.0000.0000][.0000.00FC.0004] # CJK RADICAL C-SIMPLIFIED SALT
F940  ; [.FB41.0020.0002][.9E7F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F940
2FC5  ; [.FB41.0020.0004][.9E7F.0000.0000] # KANGXI RADICAL DEER
F988  ; [.FB41.0020.0002][.9E97.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F988
F9F3  ; [.FB41.0020.0002][.9E9F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9F3
2FC6  ; [.FB41.0020.0004][.9EA5.0000.0000] # KANGXI RADICAL WHEAT
2EE8  ; [.FB41.0020.0004][.9EA6.0000.0000] # CJK RADICAL SIMPLIFIED WHEAT
2FA15 ; [.FB41.0020.0002][.9EBB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA15
2FC7  ; [.FB41.0020.0004][.9EBB.0000.0000] # KANGXI RADICAL HEMP
2FC8  ; [.FB41.0020.0004][.9EC3.0000.0000] # KANGXI RADICAL YELLOW
2EE9  ; [.FB41.0020.0004][.9EC4.0000.0000] # CJK RADICAL SIMPLIFIED YELLOW
2FC9  ; [.FB41.0020.0004][.9ECD.0000.0000] # KANGXI RADICAL MILLET
F989  ; [.FB41.0020.0002][.9ECE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F989
2FCA  ; [.FB41.0020.0004][.9ED1.0000.0000] # KANGXI RADICAL BLACK
2FA17 ; [.FB41.0020.0002][.9EF9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA17
2FCB  ; [.FB41.0020.0004][.9EF9.0000.0000] # KANGXI RADICAL EMBROIDERY
2FCC  ; [.FB41.0020.0004][.9EFD.0000.0000] # KANGXI RADICAL FROG
2FA18 ; [.FB41.0020.0002][.9EFE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA18
2EEA  ; [.FB41.0020.0004][.9EFE.0000.0000] # CJK RADICAL C-SIMPLIFIED FROG
2FA19 ; [.FB41.0020.0002][.9F05.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA19
2FCD  ; [.FB41.0020.0004][.9F0E.0000.0000] # KANGXI RADICAL TRIPOD
2FA1A ; [.FB41.0020.0002][.9F0F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA1A
2FCE  ; [.FB41.0020.0004][.9F13.0000.0000] # KANGXI RADICAL DRUM
2FA1B ; [.FB41.0020.0002][.9F16.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA1B
2FCF  ; [.FB41.0020.0004][.9F20.0000.0000] # KANGXI RADICAL RAT
2FA1C ; [.FB41.0020.0002][.9F3B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA1C
2FD0  ; [.FB41.0020.0004][.9F3B.0000.0000] # KANGXI RADICAL NOSE
FAD8  ; [.FB41.0020.0002][.9F43.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAD8
2FD1  ; [.FB41.0020.0004][.9F4A.0000.0000] # KANGXI RADICAL EVEN
2EEB  ; [.FB41.0020.0004][.9F4A.0000.0000][.0000.00FC.0004] # CJK RADICAL J-SIMPLIFIED EVEN
2EEC  ; [.FB41.0020.0004][.9F50.0000.0000] # CJK RADICAL C-SIMPLIFIED EVEN
2FD2  ; [.FB41.0020.0004][.9F52.0000.0000] # KANGXI RADICAL TOOTH
2EED  ; [.FB41.0020.0004][.9F52.0000.0000][.0000.00FC.0004] # CJK RADICAL J-SIMPLIFIED TOOTH
2EEE  ; [.FB41.0020.0004][.9F7F.0000.0000] # CJK RADICAL C-SIMPLIFIED TOOTH
F9C4  ; [.FB41.0020.0002][.9F8D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F9C4
2FD3  ; [.FB41.0020.0004][.9F8D.0000.0000] # KANGXI RADICAL DRAGON
2EEF  ; [.FB41.0020.0004][.9F8D.0000.0000][.0000.00FC.0004] # CJK RADICAL J-SIMPLIFIED DRAGON
FAD9  ; [.FB41.0020.0002][.9F8E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAD9
2EF0  ; [.FB41.0020.0004][.9F99.0000.0000] # CJK RADICAL C-SIMPLIFIED DRAGON
F907  ; [.FB41.0020.0002][.9F9C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F907
F908  ; [.FB41.0020.0002][.9F9C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-F908
FACE  ; [.FB41.0020.0002][.9F9C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FACE
2FD4  ; [.FB41.0020.0004][.9F9C.0000.0000] # KANGXI RADICAL TURTLE
2EF1  ; [.FB41.0020.0004][.9F9C.0000.0000][.0000.00FC.0004] # CJK RADICAL TURTLE
2EF2  ; [.FB41.0020.0004][.9F9C.0000.0000][.0000.00FD.0004] # CJK RADICAL J-SIMPLIFIED TURTLE
2EF3  ; [.FB41.0020.0004][.9F9F.0000.0000] # CJK RADICAL C-SIMPLIFIED TURTLE
2FD5  ; [.FB41.0020.0004][.9FA0.0000.0000] # KANGXI RADICAL FLUTE
FA0E  ; [.FB41.0020.0002][.FA0E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA0E
FA0F  ; [.FB41.0020.0002][.FA0F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA0F
FA11  ; [.FB41.0020.0002][.FA11.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA11
FA13  ; [.FB41.0020.0002][.FA13.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA13
FA14  ; [.FB41.0020.0002][.FA14.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA14
FA1F  ; [.FB41.0020.0002][.FA1F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA1F
FA21  ; [.FB41.0020.0002][.FA21.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA21
FA23  ; [.FB41.0020.0002][.FA23.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA23
FA24  ; [.FB41.0020.0002][.FA24.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA24
FA27  ; [.FB41.0020.0002][.FA27.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA27
FA28  ; [.FB41.0020.0002][.FA28.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA28
FA29  ; [.FB41.0020.0002][.FA29.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA29
2F80C ; [.FB80.0020.0002][.B49E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F80C
2F813 ; [.FB80.0020.0002][.B4B9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F813
2F9CA ; [.FB80.0020.0002][.B4BB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9CA
2F81F ; [.FB80.0020.0002][.B4DF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F81F
2F824 ; [.FB80.0020.0002][.B515.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F824
2F867 ; [.FB80.0020.0002][.B6EE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F867
2F868 ; [.FB80.0020.0002][.B6FC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F868
2F876 ; [.FB80.0020.0002][.B781.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F876
2F883 ; [.FB80.0020.0002][.B82F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F883
2F888 ; [.FB80.0020.0002][.B862.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F888
2F88A ; [.FB80.0020.0002][.B87C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F88A
2F896 ; [.FB80.0020.0002][.B8C7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F896
2F89B ; [.FB80.0020.0002][.B8E3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F89B
2F8A2 ; [.FB80.0020.0002][.B91C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8A2
2F8A1 ; [.FB80.0020.0002][.B93A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8A1
2F8C2 ; [.FB80.0020.0002][.BA2E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8C2
2F8C7 ; [.FB80.0020.0002][.BA6C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8C7
2F8D1 ; [.FB80.0020.0002][.BAE4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8D1
2F8D0 ; [.FB80.0020.0002][.BB08.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8D0
2F8CE ; [.FB80.0020.0002][.BB19.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8CE
2F8DE ; [.FB80.0020.0002][.BB49.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8DE
FAD2  ; [.FB80.0020.0002][.BB9D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAD2
2F8E7 ; [.FB80.0020.0002][.BB9D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8E7
2F8EE ; [.FB80.0020.0002][.BC18.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8EE
2F8F2 ; [.FB80.0020.0002][.BC4E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8F2
2F90A ; [.FB80.0020.0002][.BD33.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F90A
2F916 ; [.FB80.0020.0002][.BD96.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F916
2F92A ; [.FB80.0020.0002][.BEAC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F92A
2F92C ; [.FB80.0020.0002][.BEB8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F92C
2F92D ; [.FB80.0020.0002][.BEB8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F92D
2F933 ; [.FB80.0020.0002][.BF1B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F933
2F93E ; [.FB80.0020.0002][.BFFC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F93E
2F93F ; [.FB80.0020.0002][.C008.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F93F
FAD3  ; [.FB80.0020.0002][.C018.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAD3
FAD4  ; [.FB80.0020.0002][.C039.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAD4
2F949 ; [.FB80.0020.0002][.C039.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F949
2F94B ; [.FB80.0020.0002][.C046.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F94B
2F94C ; [.FB80.0020.0002][.C096.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F94C
2F951 ; [.FB80.0020.0002][.C0E3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F951
2F958 ; [.FB80.0020.0002][.C12F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F958
2F960 ; [.FB80.0020.0002][.C202.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F960
2F964 ; [.FB80.0020.0002][.C227.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F964
2F967 ; [.FB80.0020.0002][.C2A0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F967
2F96D ; [.FB80.0020.0002][.C301.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F96D
2F971 ; [.FB80.0020.0002][.C334.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F971
2F974 ; [.FB80.0020.0002][.C359.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F974
2F981 ; [.FB80.0020.0002][.C3D5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F981
2F8D7 ; [.FB80.0020.0002][.C3D9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8D7
2F984 ; [.FB80.0020.0002][.C40B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F984
2F98E ; [.FB80.0020.0002][.C46B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F98E
2F9A7 ; [.FB80.0020.0002][.C52B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9A7
2F9AE ; [.FB80.0020.0002][.C55D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9AE
2F9AF ; [.FB80.0020.0002][.C561.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9AF
2F9B2 ; [.FB80.0020.0002][.C56B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9B2
2F9BF ; [.FB80.0020.0002][.C5D7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9BF
2F9C2 ; [.FB80.0020.0002][.C5F9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9C2
2F9C8 ; [.FB80.0020.0002][.C635.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9C8
2F9CD ; [.FB80.0020.0002][.C6BE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9CD
2F9CE ; [.FB80.0020.0002][.C6C7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9CE
2F9EF ; [.FB80.0020.0002][.C995.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9EF
2F9F2 ; [.FB80.0020.0002][.C9E6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9F2
2F9F8 ; [.FB80.0020.0002][.CA6E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9F8
2F9F9 ; [.FB80.0020.0002][.CA76.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9F9
2F9FC ; [.FB80.0020.0002][.CAB2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9FC
2FA03 ; [.FB80.0020.0002][.CB33.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA03
2FA08 ; [.FB80.0020.0002][.CBCE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA08
2FA0D ; [.FB80.0020.0002][.CCCE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA0D
2FA0E ; [.FB80.0020.0002][.CCED.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA0E
2FA11 ; [.FB80.0020.0002][.CCF8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA11
2FA16 ; [.FB80.0020.0002][.CD56.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA16
2F803 ; [.FB84.0020.0002][.8122.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F803
2F812 ; [.FB84.0020.0002][.851C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F812
2F91B ; [.FB84.0020.0002][.8525.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F91B
2F816 ; [.FB84.0020.0002][.854B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F816
2F80D ; [.FB84.0020.0002][.863A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F80D
2F9D9 ; [.FB84.0020.0002][.8804.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9D9
2F9DD ; [.FB84.0020.0002][.88DE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9DD
2F834 ; [.FB84.0020.0002][.8A2C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F834
2F838 ; [.FB84.0020.0002][.8B63.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F838
2F859 ; [.FB84.0020.0002][.94E4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F859
2F860 ; [.FB84.0020.0002][.96A8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F860
2F861 ; [.FB84.0020.0002][.96EA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F861
2F86C ; [.FB84.0020.0002][.99C8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F86C
2F871 ; [.FB84.0020.0002][.9B18.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F871
2F8F8 ; [.FB84.0020.0002][.9D0B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8F8
2F87B ; [.FB84.0020.0002][.9DE4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F87B
2F87D ; [.FB84.0020.0002][.9DE6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F87D
2F889 ; [.FB84.0020.0002][.A183.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F889
2F939 ; [.FB84.0020.0002][.A19F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F939
2F891 ; [.FB84.0020.0002][.A331.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F891
2F892 ; [.FB84.0020.0002][.A331.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F892
2F8A4 ; [.FB84.0020.0002][.A6D4.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8A4
FAD0  ; [.FB84.0020.0002][.A844.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAD0
FACF  ; [.FB84.0020.0002][.A84A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FACF
2F8B8 ; [.FB84.0020.0002][.AB0C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8B8
2F8BE ; [.FB84.0020.0002][.ABF1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8BE
2F8CA ; [.FB84.0020.0002][.B00A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8CA
2F897 ; [.FB84.0020.0002][.B2B8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F897
2F980 ; [.FB84.0020.0002][.B35F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F980
2F989 ; [.FB84.0020.0002][.B393.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F989
2F98A ; [.FB84.0020.0002][.B39C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F98A
2F8DD ; [.FB84.0020.0002][.B3C3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8DD
FAD1  ; [.FB84.0020.0002][.B3D5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAD1
2F8E3 ; [.FB84.0020.0002][.B46D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8E3
2F8EC ; [.FB84.0020.0002][.B6A3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8EC
2F8F0 ; [.FB84.0020.0002][.B8A7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8F0
2F8F7 ; [.FB84.0020.0002][.BA8D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8F7
2F8F9 ; [.FB84.0020.0002][.BAFA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8F9
2F8FB ; [.FB84.0020.0002][.BCBC.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F8FB
2F906 ; [.FB84.0020.0002][.BD1E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F906
2F90D ; [.FB84.0020.0002][.BED1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F90D
2F910 ; [.FB84.0020.0002][.BF5E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F910
2F911 ; [.FB84.0020.0002][.BF8E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F911
2F91D ; [.FB84.0020.0002][.C263.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F91D
FA6C  ; [.FB84.0020.0002][.C2EE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FA6C
2F91F ; [.FB84.0020.0002][.C3AB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F91F
2F923 ; [.FB84.0020.0002][.C608.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F923
2F926 ; [.FB84.0020.0002][.C735.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F926
2F927 ; [.FB84.0020.0002][.C814.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F927
2F935 ; [.FB84.0020.0002][.CC36.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F935
2F937 ; [.FB84.0020.0002][.CC92.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F937
2F93B ; [.FB84.0020.0002][.CFA1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F93B
2F93C ; [.FB84.0020.0002][.CFB8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F93C
2F93D ; [.FB84.0020.0002][.D044.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F93D
2F942 ; [.FB84.0020.0002][.D0F2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F942
2F941 ; [.FB84.0020.0002][.D0F3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F941
2F943 ; [.FB84.0020.0002][.D119.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F943
2F944 ; [.FB84.0020.0002][.D133.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F944
FAD5  ; [.FB84.0020.0002][.D249.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAD5
2F94D ; [.FB84.0020.0002][.D41D.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F94D
2F952 ; [.FB84.0020.0002][.D626.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F952
2F954 ; [.FB84.0020.0002][.D69A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F954
2F955 ; [.FB84.0020.0002][.D6C5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F955
2F95C ; [.FB84.0020.0002][.D97C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F95C
2F95D ; [.FB84.0020.0002][.DAA7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F95D
2F95E ; [.FB84.0020.0002][.DAA7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F95E
2F961 ; [.FB84.0020.0002][.DBAB.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F961
2F965 ; [.FB84.0020.0002][.DC80.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F965
FAD6  ; [.FB84.0020.0002][.DCD0.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAD6
2F96B ; [.FB84.0020.0002][.DF86.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F96B
2F898 ; [.FB84.0020.0002][.E1DA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F898
2F972 ; [.FB84.0020.0002][.E228.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F972
2F973 ; [.FB84.0020.0002][.E247.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F973
2F975 ; [.FB84.0020.0002][.E2D9.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F975
2F977 ; [.FB84.0020.0002][.E33E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F977
2F97B ; [.FB84.0020.0002][.E4DA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F97B
2F97C ; [.FB84.0020.0002][.E523.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F97C
2F97E ; [.FB84.0020.0002][.E5A8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F97E
2F987 ; [.FB84.0020.0002][.E7A7.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F987
2F988 ; [.FB84.0020.0002][.E7B5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F988
2F997 ; [.FB84.0020.0002][.EB3C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F997
2F9A4 ; [.FB84.0020.0002][.EC36.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9A4
2F9A6 ; [.FB84.0020.0002][.ECD5.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9A6
2F9A5 ; [.FB84.0020.0002][.ED6B.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9A5
2F9AD ; [.FB84.0020.0002][.EF2C.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9AD
2F9B0 ; [.FB84.0020.0002][.EFB1.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9B0
2F9B1 ; [.FB84.0020.0002][.F0D2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9B1
2F9AB ; [.FB84.0020.0002][.F3CA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9AB
2F9C5 ; [.FB84.0020.0002][.F667.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9C5
2F9CB ; [.FB84.0020.0002][.F8AE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9CB
2F9CC ; [.FB84.0020.0002][.F966.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9CC
2F9D3 ; [.FB84.0020.0002][.FCA8.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9D3
FAD7  ; [.FB84.0020.0002][.FED3.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-FAD7
2F9D8 ; [.FB84.0020.0002][.FF2F.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9D8
2F9E0 ; [.FB85.0020.0002][.85D2.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9E0
2F9E1 ; [.FB85.0020.0002][.85ED.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9E1
2F9E5 ; [.FB85.0020.0002][.872E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9E5
2F9ED ; [.FB85.0020.0002][.8BFA.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9ED
2F9F1 ; [.FB85.0020.0002][.8D77.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9F1
2F9F6 ; [.FB85.0020.0002][.9145.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9F6
2F81C ; [.FB85.0020.0002][.91DF.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F81C
2F9F7 ; [.FB85.0020.0002][.921A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9F7
2F9FB ; [.FB85.0020.0002][.940A.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9FB
2F9FD ; [.FB85.0020.0002][.9496.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F9FD
2FA01 ; [.FB85.0020.0002][.95B6.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA01
2FA09 ; [.FB85.0020.0002][.9B30.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA09
2FA10 ; [.FB85.0020.0002][.A0CE.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA10
2FA12 ; [.FB85.0020.0002][.A105.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA12
2FA13 ; [.FB85.0020.0002][.A20E.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA13
2FA14 ; [.FB85.0020.0002][.A291.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA14
2F88F ; [.FB85.0020.0002][.A392.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2F88F
2FA1D ; [.FB85.0020.0002][.A600.0000.0000] # CJK COMPATIBILITY IDEOGRAPH-2FA1D
FFFD  ; [.FFFD.0020.0002] # REPLACEMENT CHARACTER
                                                                                                                                                                                                      usr/share/perl/5.20.2/Unicode/Collate/keys.txt                                                      0100644 0000000 0000000 00000147146 12744441327 017360  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        #### This file is generated from allkeys-3.1.1.txt (unicode.org)
#### by deleting many many entries.
####
#### This table is intended ONLY for doing a test
#### of Unicode/Collate.pm, a Perl module.
####
#### The entries contained here ARE:
####    0000..007F   # Basic Latin
####    0080..00FF   # Latin-1 Supplement
####    0300..036F   # Combining Diacritical Marks
####    1100..11FF   # Hangul Jamo
####    2000..206F   # General Punctuation
####    3040..309F   # Hiragana
####    30A0..30FF   # Katakana
####
#### To fetch the original file, access to this:
#### http://www.unicode.org/reports/tr10/allkeys.txt
####
@version 3.1.1
0000  ; [.0000.0000.0000.0000] # [0000] NULL (in 6429)
0001  ; [.0000.0000.0000.0000] # [0001] START OF HEADING (in 6429)
0002  ; [.0000.0000.0000.0000] # [0002] START OF TEXT (in 6429)
0003  ; [.0000.0000.0000.0000] # [0003] END OF TEXT (in 6429)
0004  ; [.0000.0000.0000.0000] # [0004] END OF TRANSMISSION (in 6429)
0005  ; [.0000.0000.0000.0000] # [0005] ENQUIRY (in 6429)
0006  ; [.0000.0000.0000.0000] # [0006] ACKNOWLEDGE (in 6429)
0007  ; [.0000.0000.0000.0000] # [0007] BELL (in 6429)
0008  ; [.0000.0000.0000.0000] # [0008] BACKSPACE (in 6429)
000E  ; [.0000.0000.0000.0000] # [000E] SHIFT OUT (in 6429)
000F  ; [.0000.0000.0000.0000] # [000F] SHIFT IN (in 6429)
0010  ; [.0000.0000.0000.0000] # [0010] DATA LINK ESCAPE (in 6429)
0011  ; [.0000.0000.0000.0000] # [0011] DEVICE CONTROL ONE (in 6429)
0012  ; [.0000.0000.0000.0000] # [0012] DEVICE CONTROL TWO (in 6429)
0013  ; [.0000.0000.0000.0000] # [0013] DEVICE CONTROL THREE (in 6429)
0014  ; [.0000.0000.0000.0000] # [0014] DEVICE CONTROL FOUR (in 6429)
0015  ; [.0000.0000.0000.0000] # [0015] NEGATIVE ACKNOWLEDGE (in 6429)
0016  ; [.0000.0000.0000.0000] # [0016] SYNCHRONOUS IDLE (in 6429)
0017  ; [.0000.0000.0000.0000] # [0017] END OF TRANSMISSION BLOCK (in 6429)
0018  ; [.0000.0000.0000.0000] # [0018] CANCEL (in 6429)
0019  ; [.0000.0000.0000.0000] # [0019] END OF MEDIUM (in 6429)
001A  ; [.0000.0000.0000.0000] # [001A] SUBSTITUTE (in 6429)
001B  ; [.0000.0000.0000.0000] # [001B] ESCAPE (in 6429)
001C  ; [.0000.0000.0000.0000] # [001C] FILE SEPARATOR (in 6429)
001D  ; [.0000.0000.0000.0000] # [001D] GROUP SEPARATOR (in 6429)
001E  ; [.0000.0000.0000.0000] # [001E] RECORD SEPARATOR (in 6429)
001F  ; [.0000.0000.0000.0000] # [001F] UNIT SEPARATOR (in 6429)
007F  ; [.0000.0000.0000.0000] # [007F] DELETE (in 6429)
0080  ; [.0000.0000.0000.0000] # [0080] <control>
0081  ; [.0000.0000.0000.0000] # [0081] <control>
0082  ; [.0000.0000.0000.0000] # [0082] BREAK PERMITTED HERE (in 6429)
0083  ; [.0000.0000.0000.0000] # [0083] NO BREAK HERE (in 6429)
0084  ; [.0000.0000.0000.0000] # [0084] <control>
0086  ; [.0000.0000.0000.0000] # [0086] START OF SELECTED AREA (in 6429)
0087  ; [.0000.0000.0000.0000] # [0087] END OF SELECTED AREA (in 6429)
0088  ; [.0000.0000.0000.0000] # [0088] CHARACTER TABULATION SET (in 6429)
0089  ; [.0000.0000.0000.0000] # [0089] CHARACTER TABULATION WITH JUSTIFICATION (in 6429)
008A  ; [.0000.0000.0000.0000] # [008A] LINE TABULATION SET (in 6429)
008B  ; [.0000.0000.0000.0000] # [008B] PARTIAL LINE FORWARD (in 6429)
008C  ; [.0000.0000.0000.0000] # [008C] PARTIAL LINE BACKWARD (in 6429)
008D  ; [.0000.0000.0000.0000] # [008D] PARTIAL LINE FEED (in 6429)
008E  ; [.0000.0000.0000.0000] # [008E] SINGLE SHIFT TWO (in 6429)
008F  ; [.0000.0000.0000.0000] # [008F] SINGLE SHIFT THREE (in 6429)
0090  ; [.0000.0000.0000.0000] # [0090] DEVICE CONTROL STRING (in 6429)
0091  ; [.0000.0000.0000.0000] # [0091] PRIVATE USE ONE (in 6429)
0092  ; [.0000.0000.0000.0000] # [0092] PRIVATE USE TWO (in 6429)
0093  ; [.0000.0000.0000.0000] # [0093] SET TRANSMIT STATE (in 6429)
0094  ; [.0000.0000.0000.0000] # [0094] CANCEL CHARACTER (in 6429)
0095  ; [.0000.0000.0000.0000] # [0095] MESSAGE WAITING (in 6429)
0096  ; [.0000.0000.0000.0000] # [0096] START OF GUARDED AREA (in 6429)
0097  ; [.0000.0000.0000.0000] # [0097] END OF GUARDED AREA (in 6429)
0098  ; [.0000.0000.0000.0000] # [0098] START OF STRING (in 6429)
0099  ; [.0000.0000.0000.0000] # [0099] <control>
009A  ; [.0000.0000.0000.0000] # [009A] SINGLE CHARACTER INTRODUCER (in 6429)
009B  ; [.0000.0000.0000.0000] # [009B] CONTROL SEQUENCE INTRODUCER (in 6429)
009C  ; [.0000.0000.0000.0000] # [009C] STRING TERMINATOR (in 6429)
009D  ; [.0000.0000.0000.0000] # [009D] OPERATING SYSTEM COMMAND (in 6429)
009E  ; [.0000.0000.0000.0000] # [009E] PRIVACY MESSAGE (in 6429)
009F  ; [.0000.0000.0000.0000] # [009F] APPLICATION PROGRAM COMMAND (in 6429)
200B  ; [.0000.0000.0000.0000] # [200B] ZERO WIDTH SPACE
200C  ; [.0000.0000.0000.0000] # [200C] ZERO WIDTH NON-JOINER
200D  ; [.0000.0000.0000.0000] # [200D] ZERO WIDTH JOINER
200E  ; [.0000.0000.0000.0000] # [200E] LEFT-TO-RIGHT MARK
200F  ; [.0000.0000.0000.0000] # [200F] RIGHT-TO-LEFT MARK
202A  ; [.0000.0000.0000.0000] # [202A] LEFT-TO-RIGHT EMBEDDING
202B  ; [.0000.0000.0000.0000] # [202B] RIGHT-TO-LEFT EMBEDDING
202C  ; [.0000.0000.0000.0000] # [202C] POP DIRECTIONAL FORMATTING
202D  ; [.0000.0000.0000.0000] # [202D] LEFT-TO-RIGHT OVERRIDE
202E  ; [.0000.0000.0000.0000] # [202E] RIGHT-TO-LEFT OVERRIDE
206A  ; [.0000.0000.0000.0000] # [206A] INHIBIT SYMMETRIC SWAPPING
206B  ; [.0000.0000.0000.0000] # [206B] ACTIVATE SYMMETRIC SWAPPING
206C  ; [.0000.0000.0000.0000] # [206C] INHIBIT ARABIC FORM SHAPING
206D  ; [.0000.0000.0000.0000] # [206D] ACTIVATE ARABIC FORM SHAPING
206E  ; [.0000.0000.0000.0000] # [206E] NATIONAL DIGIT SHAPES
206F  ; [.0000.0000.0000.0000] # [206F] NOMINAL DIGIT SHAPES
0009  ; [*0201.0020.0002.0009] # HORIZONTAL TABULATION (in 6429)
000A  ; [*0202.0020.0002.000A] # LINE FEED (in 6429)
000B  ; [*0203.0020.0002.000B] # VERTICAL TABULATION (in 6429)
000C  ; [*0204.0020.0002.000C] # FORM FEED (in 6429)
000D  ; [*0205.0020.0002.000D] # CARRIAGE RETURN (in 6429)
0020  ; [*0209.0020.0002.0020] # SPACE
0021  ; [*024B.0020.0002.0021] # EXCLAMATION MARK
0022  ; [*0270.0020.0002.0022] # QUOTATION MARK
0023  ; [*02A9.0020.0002.0023] # NUMBER SIGN
0025  ; [*02AA.0020.0002.0025] # PERCENT SIGN
0026  ; [*02A7.0020.0002.0026] # AMPERSAND
0027  ; [*0269.0020.0002.0027] # APOSTROPHE
0028  ; [*027A.0020.0002.0028] # LEFT PARENTHESIS
0029  ; [*027B.0020.0002.0029] # RIGHT PARENTHESIS
002A  ; [*02A2.0020.0002.002A] # ASTERISK
002B  ; [*039F.0020.0002.002B] # PLUS SIGN
002C  ; [*022D.0020.0002.002C] # COMMA
002D  ; [*0221.0020.0002.002D] # HYPHEN-MINUS
002E  ; [*0255.0020.0002.002E] # FULL STOP
002F  ; [*02A4.0020.0002.002F] # SOLIDUS
003A  ; [*0237.0020.0002.003A] # COLON
003B  ; [*0235.0020.0002.003B] # SEMICOLON
003C  ; [*03A3.0020.0002.003C] # LESS-THAN SIGN
003D  ; [*03A4.0020.0002.003D] # EQUALS SIGN
003E  ; [*03A5.0020.0002.003E] # GREATER-THAN SIGN
003F  ; [*024E.0020.0002.003F] # QUESTION MARK
0040  ; [*02A1.0020.0002.0040] # COMMERCIAL AT
005B  ; [*027C.0020.0002.005B] # LEFT SQUARE BRACKET
005C  ; [*02A6.0020.0002.005C] # REVERSE SOLIDUS
005D  ; [*027D.0020.0002.005D] # RIGHT SQUARE BRACKET
005E  ; [*020F.0020.0002.005E] # CIRCUMFLEX ACCENT
005F  ; [*021B.0020.0002.005F] # LOW LINE
0060  ; [*020C.0020.0002.0060] # GRAVE ACCENT
007B  ; [*027E.0020.0002.007B] # LEFT CURLY BRACKET
007C  ; [*03A7.0020.0002.007C] # VERTICAL LINE
007D  ; [*027F.0020.0002.007D] # RIGHT CURLY BRACKET
007E  ; [*03AA.0020.0002.007E] # TILDE
0085  ; [*0206.0020.0002.0085] # NEXT LINE (in 6429)
00A0  ; [*0209.0020.001B.00A0] # NO-BREAK SPACE; QQK
00A1  ; [*024C.0020.0002.00A1] # INVERTED EXCLAMATION MARK
00A6  ; [*03A8.0020.0002.00A6] # BROKEN BAR
00A7  ; [*029C.0020.0002.00A7] # SECTION SIGN
00A8  ; [*0214.0020.0002.00A8] # DIAERESIS
00A9  ; [*029F.0020.0002.00A9] # COPYRIGHT SIGN
00AB  ; [*0278.0020.0002.00AB] # LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
00AC  ; [*03A6.0020.0002.00AC] # NOT SIGN
00AD  ; [*0220.0020.0002.00AD] # SOFT HYPHEN
00AE  ; [*02A0.0020.0002.00AE] # REGISTERED SIGN
00AF  ; [*0210.0020.0002.00AF] # MACRON
00B0  ; [*030A.0020.0002.00B0] # DEGREE SIGN
00B1  ; [*03A0.0020.0002.00B1] # PLUS-MINUS SIGN
00B4  ; [*020D.0020.0002.00B4] # ACUTE ACCENT
00B6  ; [*029D.0020.0002.00B6] # PILCROW SIGN
00B7  ; [*025F.0020.0002.00B7] # MIDDLE DOT
00B8  ; [*0219.0020.0002.00B8] # CEDILLA
00BB  ; [*0279.0020.0002.00BB] # RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
00BF  ; [*024F.0020.0002.00BF] # INVERTED QUESTION MARK
00D7  ; [*03A2.0020.0002.00D7] # MULTIPLICATION SIGN
00F7  ; [*03A1.0020.0002.00F7] # DIVISION SIGN
2000  ; [*0209.0020.0004.2000] # EN QUAD; QQK
2001  ; [*0209.0020.0004.2001] # EM QUAD; QQK
2002  ; [*0209.0020.0004.2002] # EN SPACE; QQK
2003  ; [*0209.0020.0004.2003] # EM SPACE; QQK
2004  ; [*0209.0020.0004.2004] # THREE-PER-EM SPACE; QQK
2005  ; [*0209.0020.0004.2005] # FOUR-PER-EM SPACE; QQK
2006  ; [*0209.0020.0004.2006] # SIX-PER-EM SPACE; QQK
2007  ; [*0209.0020.001B.2007] # FIGURE SPACE; QQK
2008  ; [*0209.0020.0004.2008] # PUNCTUATION SPACE; QQK
2009  ; [*0209.0020.0004.2009] # THIN SPACE; QQK
200A  ; [*0209.0020.0004.200A] # HAIR SPACE; QQK
2010  ; [*0225.0020.0002.2010] # HYPHEN
2011  ; [*0225.0020.001B.2011] # NON-BREAKING HYPHEN; QQK
2012  ; [*0226.0020.0002.2012] # FIGURE DASH
2013  ; [*0227.0020.0002.2013] # EN DASH
2014  ; [*0228.0020.0002.2014] # EM DASH
2015  ; [*0229.0020.0002.2015] # HORIZONTAL BAR
2016  ; [*03A9.0020.0002.2016] # DOUBLE VERTICAL LINE
2017  ; [*021C.0020.0002.2017] # DOUBLE LOW LINE
2018  ; [*026A.0020.0002.2018] # LEFT SINGLE QUOTATION MARK
2019  ; [*026B.0020.0002.2019] # RIGHT SINGLE QUOTATION MARK
201A  ; [*026C.0020.0002.201A] # SINGLE LOW-9 QUOTATION MARK
201B  ; [*026D.0020.0002.201B] # SINGLE HIGH-REVERSED-9 QUOTATION MARK
201C  ; [*0271.0020.0002.201C] # LEFT DOUBLE QUOTATION MARK
201D  ; [*0272.0020.0002.201D] # RIGHT DOUBLE QUOTATION MARK
201E  ; [*0273.0020.0002.201E] # DOUBLE LOW-9 QUOTATION MARK
201F  ; [*0274.0020.0002.201F] # DOUBLE HIGH-REVERSED-9 QUOTATION MARK
2020  ; [*02AE.0020.0002.2020] # DAGGER
2021  ; [*02AF.0020.0002.2021] # DOUBLE DAGGER
2022  ; [*02B0.0020.0002.2022] # BULLET
2023  ; [*02B1.0020.0002.2023] # TRIANGULAR BULLET
2024  ; [*0255.0020.0004.2024] # ONE DOT LEADER; QQK
2025  ; [*0255.0020.0004.2025][*0255.0020.0004.2025] # TWO DOT LEADER; QQKN
2026  ; [*0255.0020.0004.2026][*0255.0020.0004.2026][*0255.0020.001F.2026] # HORIZONTAL ELLIPSIS; QQKN
2027  ; [*02B2.0020.0002.2027] # HYPHENATION POINT
2028  ; [*0207.0020.0002.2028] # LINE SEPARATOR
2029  ; [*0208.0020.0002.2029] # PARAGRAPH SEPARATOR
202F  ; [*0209.0020.001B.202F] # NARROW NO-BREAK SPACE; QQK
2030  ; [*02AC.0020.0002.2030] # PER MILLE SIGN
2031  ; [*02AD.0020.0002.2031] # PER TEN THOUSAND SIGN
2032  ; [*02B6.0020.0002.2032] # PRIME
2033  ; [*02B6.0020.0004.2033][*02B6.0020.0004.2033] # DOUBLE PRIME; QQKN
2034  ; [*02B6.0020.0004.2034][*02B6.0020.0004.2034][*02B6.0020.001F.2034] # TRIPLE PRIME; QQKN
2035  ; [*02B7.0020.0002.2035] # REVERSED PRIME
2036  ; [*02B7.0020.0004.2036][*02B7.0020.0004.2036] # REVERSED DOUBLE PRIME; QQKN
2037  ; [*02B7.0020.0004.2037][*02B7.0020.0004.2037][*02B7.0020.001F.2037] # REVERSED TRIPLE PRIME; QQKN
2038  ; [*02B9.0020.0002.2038] # CARET
2039  ; [*026E.0020.0002.2039] # SINGLE LEFT-POINTING ANGLE QUOTATION MARK
203A  ; [*026F.0020.0002.203A] # SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
203B  ; [*02BA.0020.0002.203B] # REFERENCE MARK
203C  ; [*024B.0020.0004.203C][*024B.0020.0004.203C] # DOUBLE EXCLAMATION MARK; QQKN
203D  ; [*0254.0020.0002.203D] # INTERROBANG
203E  ; [*0211.0020.0002.203E] # OVERLINE
203F  ; [*02BB.0020.0002.203F] # UNDERTIE
2040  ; [*02BC.0020.0002.2040] # CHARACTER TIE
2041  ; [*02BD.0020.0002.2041] # CARET INSERTION POINT
2042  ; [*02BE.0020.0002.2042] # ASTERISM
2043  ; [*02B3.0020.0002.2043] # HYPHEN BULLET
2044  ; [*02A5.0020.0002.2044] # FRACTION SLASH
2045  ; [*0286.0020.0002.2045] # LEFT SQUARE BRACKET WITH QUILL
2046  ; [*0287.0020.0002.2046] # RIGHT SQUARE BRACKET WITH QUILL
2048  ; [*024E.0020.0004.2048][*024B.0020.0004.2048] # QUESTION EXCLAMATION MARK; QQKN
2049  ; [*024B.0020.0004.2049][*024E.0020.0004.2049] # EXCLAMATION QUESTION MARK; QQKN
204A  ; [*02A8.0020.0002.204A] # TIRONIAN SIGN ET
204B  ; [*029E.0020.0002.204B] # REVERSED PILCROW SIGN
204C  ; [*02B4.0020.0002.204C] # BLACK LEFTWARDS BULLET
204D  ; [*02B5.0020.0002.204D] # BLACK RIGHTWARDS BULLET
309B  ; [*021E.0020.0002.309B] # KATAKANA-HIRAGANA VOICED SOUND MARK
309C  ; [*021F.0020.0002.309C] # KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
30FB  ; [*022C.0020.0002.30FB] # KATAKANA MIDDLE DOT
0332  ; [.0000.0021.0002.0332] # COMBINING LOW LINE
0313  ; [.0000.0022.0002.0313] # COMBINING COMMA ABOVE
0343  ; [.0000.0022.0002.0343] # COMBINING GREEK KORONIS; QQC
0314  ; [.0000.002A.0002.0314] # COMBINING REVERSED COMMA ABOVE
0301  ; [.0000.0032.0002.0301] # COMBINING ACUTE ACCENT
0341  ; [.0000.0032.0002.0341] # COMBINING ACUTE TONE MARK; QQC
0300  ; [.0000.0035.0002.0300] # COMBINING GRAVE ACCENT
0340  ; [.0000.0035.0002.0340] # COMBINING GRAVE TONE MARK; QQC
0306  ; [.0000.0037.0002.0306] # COMBINING BREVE
0302  ; [.0000.003C.0002.0302] # COMBINING CIRCUMFLEX ACCENT
030C  ; [.0000.0041.0002.030C] # COMBINING CARON
030A  ; [.0000.0043.0002.030A] # COMBINING RING ABOVE
0342  ; [.0000.0045.0002.0342] # COMBINING GREEK PERISPOMENI
0308  ; [.0000.0047.0002.0308] # COMBINING DIAERESIS
0344  ; [.0000.0047.0002.0308][.0000.0032.0002.0301] # COMBINING GREEK DIALYTIKA TONOS; QQCM
030B  ; [.0000.004D.0002.030B] # COMBINING DOUBLE ACUTE ACCENT
0303  ; [.0000.004E.0002.0303] # COMBINING TILDE
0307  ; [.0000.0052.0002.0307] # COMBINING DOT ABOVE
0338  ; [.0000.0054.0002.0338] # COMBINING LONG SOLIDUS OVERLAY
0327  ; [.0000.0055.0002.0327] # COMBINING CEDILLA
0328  ; [.0000.0058.0002.0328] # COMBINING OGONEK
0304  ; [.0000.005A.0002.0304] # COMBINING MACRON
0305  ; [.0000.005E.0002.0305] # COMBINING OVERLINE
0309  ; [.0000.005F.0002.0309] # COMBINING HOOK ABOVE
030D  ; [.0000.0060.0002.030D] # COMBINING VERTICAL LINE ABOVE
030E  ; [.0000.0061.0002.030E] # COMBINING DOUBLE VERTICAL LINE ABOVE
030F  ; [.0000.0062.0002.030F] # COMBINING DOUBLE GRAVE ACCENT
0310  ; [.0000.0063.0002.0310] # COMBINING CANDRABINDU
0311  ; [.0000.0064.0002.0311] # COMBINING INVERTED BREVE
0312  ; [.0000.0065.0002.0312] # COMBINING TURNED COMMA ABOVE
0315  ; [.0000.0066.0002.0315] # COMBINING COMMA ABOVE RIGHT
0316  ; [.0000.0067.0002.0316] # COMBINING GRAVE ACCENT BELOW
0317  ; [.0000.0068.0002.0317] # COMBINING ACUTE ACCENT BELOW
0318  ; [.0000.0069.0002.0318] # COMBINING LEFT TACK BELOW
0319  ; [.0000.006A.0002.0319] # COMBINING RIGHT TACK BELOW
031A  ; [.0000.006B.0002.031A] # COMBINING LEFT ANGLE ABOVE
031B  ; [.0000.006C.0002.031B] # COMBINING HORN
031C  ; [.0000.0072.0002.031C] # COMBINING LEFT HALF RING BELOW
031D  ; [.0000.0073.0002.031D] # COMBINING UP TACK BELOW
031E  ; [.0000.0074.0002.031E] # COMBINING DOWN TACK BELOW
031F  ; [.0000.0075.0002.031F] # COMBINING PLUS SIGN BELOW
0320  ; [.0000.0076.0002.0320] # COMBINING MINUS SIGN BELOW
0321  ; [.0000.0077.0002.0321] # COMBINING PALATALIZED HOOK BELOW
0322  ; [.0000.0078.0002.0322] # COMBINING RETROFLEX HOOK BELOW
0323  ; [.0000.0079.0002.0323] # COMBINING DOT BELOW
0324  ; [.0000.007E.0002.0324] # COMBINING DIAERESIS BELOW
0325  ; [.0000.007F.0002.0325] # COMBINING RING BELOW
0326  ; [.0000.0080.0002.0326] # COMBINING COMMA BELOW
0329  ; [.0000.0081.0002.0329] # COMBINING VERTICAL LINE BELOW
032A  ; [.0000.0082.0002.032A] # COMBINING BRIDGE BELOW
032B  ; [.0000.0083.0002.032B] # COMBINING INVERTED DOUBLE ARCH BELOW
032C  ; [.0000.0084.0002.032C] # COMBINING CARON BELOW
032D  ; [.0000.0085.0002.032D] # COMBINING CIRCUMFLEX ACCENT BELOW
032E  ; [.0000.0086.0002.032E] # COMBINING BREVE BELOW
032F  ; [.0000.0087.0002.032F] # COMBINING INVERTED BREVE BELOW
0330  ; [.0000.0088.0002.0330] # COMBINING TILDE BELOW
0331  ; [.0000.0089.0002.0331] # COMBINING MACRON BELOW
0333  ; [.0000.008A.0002.0333] # COMBINING DOUBLE LOW LINE
0334  ; [.0000.008B.0002.0334] # COMBINING TILDE OVERLAY
0335  ; [.0000.008C.0002.0335] # COMBINING SHORT STROKE OVERLAY
0336  ; [.0000.008D.0002.0336] # COMBINING LONG STROKE OVERLAY
0337  ; [.0000.008E.0002.0337] # COMBINING SHORT SOLIDUS OVERLAY
0339  ; [.0000.008F.0002.0339] # COMBINING RIGHT HALF RING BELOW
033A  ; [.0000.0090.0002.033A] # COMBINING INVERTED BRIDGE BELOW
033B  ; [.0000.0091.0002.033B] # COMBINING SQUARE BELOW
033C  ; [.0000.0092.0002.033C] # COMBINING SEAGULL BELOW
033D  ; [.0000.0093.0002.033D] # COMBINING X ABOVE
033E  ; [.0000.0094.0002.033E] # COMBINING VERTICAL TILDE
033F  ; [.0000.0095.0002.033F] # COMBINING DOUBLE OVERLINE
0345  ; [.0000.0096.0002.0345] # COMBINING GREEK YPOGEGRAMMENI
0346  ; [.0000.0097.0002.0346] # COMBINING BRIDGE ABOVE
0347  ; [.0000.0098.0002.0347] # COMBINING EQUALS SIGN BELOW
0348  ; [.0000.0099.0002.0348] # COMBINING DOUBLE VERTICAL LINE BELOW
0349  ; [.0000.009A.0002.0349] # COMBINING LEFT ANGLE BELOW
034A  ; [.0000.009B.0002.034A] # COMBINING NOT TILDE ABOVE
034B  ; [.0000.009C.0002.034B] # COMBINING HOMOTHETIC ABOVE
034C  ; [.0000.009D.0002.034C] # COMBINING ALMOST EQUAL TO ABOVE
034D  ; [.0000.009E.0002.034D] # COMBINING LEFT RIGHT ARROW BELOW
034E  ; [.0000.009F.0002.034E] # COMBINING UPWARDS ARROW BELOW
0360  ; [.0000.00A0.0002.0360] # COMBINING DOUBLE TILDE
0361  ; [.0000.00A1.0002.0361] # COMBINING DOUBLE INVERTED BREVE
0362  ; [.0000.00A2.0002.0362] # COMBINING DOUBLE RIGHTWARDS ARROW BELOW
3099  ; [.0000.013D.0002.3099] # COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK
309A  ; [.0000.013E.0002.309A] # COMBINING KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK
309D  ; [.09DB.0020.0002.309D] # HIRAGANA ITERATION MARK
309E  ; [.09DB.0020.0002.309D][.0000.013D.0002.3099] # HIRAGANA VOICED ITERATION MARK; QQCM
30FC  ; [.09DC.0020.0002.30FC] # KATAKANA-HIRAGANA PROLONGED SOUND MARK
30FD  ; [.09DD.0020.0002.30FD] # KATAKANA ITERATION MARK
30FE  ; [.09DD.0020.0002.30FD][.0000.013D.0002.3099] # KATAKANA VOICED ITERATION MARK; QQCM
00A4  ; [.09DE.0020.0002.00A4] # CURRENCY SIGN
00A2  ; [.09DF.0020.0002.00A2] # CENT SIGN
0024  ; [.09E0.0020.0002.0024] # DOLLAR SIGN
00A3  ; [.09E1.0020.0002.00A3] # POUND SIGN
00A5  ; [.09E2.0020.0002.00A5] # YEN SIGN
0030  ; [.0A0B.0020.0002.0030] # DIGIT ZERO
0031  ; [.0A0C.0020.0002.0031] # DIGIT ONE
00B9  ; [.0A0C.0020.0014.00B9] # SUPERSCRIPT ONE; QQK
00BD  ; [.0A0C.0020.001E.00BD][*02A5.0020.001E.00BD][.0A0D.0020.001F.00BD] # VULGAR FRACTION ONE HALF; QQKN
00BC  ; [.0A0C.0020.001E.00BC][*02A5.0020.001E.00BC][.0A0F.0020.001F.00BC] # VULGAR FRACTION ONE QUARTER; QQKN
0032  ; [.0A0D.0020.0002.0032] # DIGIT TWO
00B2  ; [.0A0D.0020.0014.00B2] # SUPERSCRIPT TWO; QQK
0033  ; [.0A0E.0020.0002.0033] # DIGIT THREE
00B3  ; [.0A0E.0020.0014.00B3] # SUPERSCRIPT THREE; QQK
00BE  ; [.0A0E.0020.001E.00BE][*02A5.0020.001E.00BE][.0A0F.0020.001F.00BE] # VULGAR FRACTION THREE QUARTERS; QQKN
0034  ; [.0A0F.0020.0002.0034] # DIGIT FOUR
0035  ; [.0A10.0020.0002.0035] # DIGIT FIVE
0036  ; [.0A11.0020.0002.0036] # DIGIT SIX
0037  ; [.0A12.0020.0002.0037] # DIGIT SEVEN
0038  ; [.0A13.0020.0002.0038] # DIGIT EIGHT
0039  ; [.0A14.0020.0002.0039] # DIGIT NINE
0061  ; [.0A15.0020.0002.0061] # LATIN SMALL LETTER A
0041  ; [.0A15.0020.0008.0041] # LATIN CAPITAL LETTER A
00AA  ; [.0A15.0020.0014.00AA] # FEMININE ORDINAL INDICATOR; QQK
00E1  ; [.0A15.0020.0002.0061][.0000.0032.0002.0301] # LATIN SMALL LETTER A WITH ACUTE; QQCM
00C1  ; [.0A15.0020.0008.0041][.0000.0032.0002.0301] # LATIN CAPITAL LETTER A WITH ACUTE; QQCM
00E0  ; [.0A15.0020.0002.0061][.0000.0035.0002.0300] # LATIN SMALL LETTER A WITH GRAVE; QQCM
00C0  ; [.0A15.0020.0008.0041][.0000.0035.0002.0300] # LATIN CAPITAL LETTER A WITH GRAVE; QQCM
00E2  ; [.0A15.0020.0002.0061][.0000.003C.0002.0302] # LATIN SMALL LETTER A WITH CIRCUMFLEX; QQCM
00C2  ; [.0A15.0020.0008.0041][.0000.003C.0002.0302] # LATIN CAPITAL LETTER A WITH CIRCUMFLEX; QQCM
00E5  ; [.0A15.0020.0002.0061][.0000.0043.0002.030A] # LATIN SMALL LETTER A WITH RING ABOVE; QQCM
00C5  ; [.0A15.0020.0008.0041][.0000.0043.0002.030A] # LATIN CAPITAL LETTER A WITH RING ABOVE; QQCM
00E4  ; [.0A15.0020.0002.0061][.0000.0047.0002.0308] # LATIN SMALL LETTER A WITH DIAERESIS; QQCM
00C4  ; [.0A15.0020.0008.0041][.0000.0047.0002.0308] # LATIN CAPITAL LETTER A WITH DIAERESIS; QQCM
00E3  ; [.0A15.0020.0002.0061][.0000.004E.0002.0303] # LATIN SMALL LETTER A WITH TILDE; QQCM
00C3  ; [.0A15.0020.0008.0041][.0000.004E.0002.0303] # LATIN CAPITAL LETTER A WITH TILDE; QQCM
00E6  ; [.0A19.0020.0002.00E6] # LATIN SMALL LETTER AE
00C6  ; [.0A19.0020.0008.00C6] # LATIN CAPITAL LETTER AE
0062  ; [.0A29.0020.0002.0062] # LATIN SMALL LETTER B
0042  ; [.0A29.0020.0008.0042] # LATIN CAPITAL LETTER B
0063  ; [.0A3D.0020.0002.0063] # LATIN SMALL LETTER C
0043  ; [.0A3D.0020.0008.0043] # LATIN CAPITAL LETTER C
00E7  ; [.0A3D.0020.0002.0063][.0000.0055.0002.0327] # LATIN SMALL LETTER C WITH CEDILLA; QQCM
00C7  ; [.0A3D.0020.0008.0043][.0000.0055.0002.0327] # LATIN CAPITAL LETTER C WITH CEDILLA; QQCM
0064  ; [.0A49.0020.0002.0064] # LATIN SMALL LETTER D
0044  ; [.0A49.0020.0008.0044] # LATIN CAPITAL LETTER D
00F0  ; [.0A5D.0020.0002.00F0] # LATIN SMALL LETTER ETH
00D0  ; [.0A5D.0020.0008.00D0] # LATIN CAPITAL LETTER ETH
0065  ; [.0A65.0020.0002.0065] # LATIN SMALL LETTER E
0045  ; [.0A65.0020.0008.0045] # LATIN CAPITAL LETTER E
00E9  ; [.0A65.0020.0002.0065][.0000.0032.0002.0301] # LATIN SMALL LETTER E WITH ACUTE; QQCM
00C9  ; [.0A65.0020.0008.0045][.0000.0032.0002.0301] # LATIN CAPITAL LETTER E WITH ACUTE; QQCM
00E8  ; [.0A65.0020.0002.0065][.0000.0035.0002.0300] # LATIN SMALL LETTER E WITH GRAVE; QQCM
00C8  ; [.0A65.0020.0008.0045][.0000.0035.0002.0300] # LATIN CAPITAL LETTER E WITH GRAVE; QQCM
00EA  ; [.0A65.0020.0002.0065][.0000.003C.0002.0302] # LATIN SMALL LETTER E WITH CIRCUMFLEX; QQCM
00CA  ; [.0A65.0020.0008.0045][.0000.003C.0002.0302] # LATIN CAPITAL LETTER E WITH CIRCUMFLEX; QQCM
00EB  ; [.0A65.0020.0002.0065][.0000.0047.0002.0308] # LATIN SMALL LETTER E WITH DIAERESIS; QQCM
00CB  ; [.0A65.0020.0008.0045][.0000.0047.0002.0308] # LATIN CAPITAL LETTER E WITH DIAERESIS; QQCM
0066  ; [.0A91.0020.0002.0066] # LATIN SMALL LETTER F
0046  ; [.0A91.0020.0008.0046] # LATIN CAPITAL LETTER F
0067  ; [.0A99.0020.0002.0067] # LATIN SMALL LETTER G
0047  ; [.0A99.0020.0008.0047] # LATIN CAPITAL LETTER G
0068  ; [.0AB9.0020.0002.0068] # LATIN SMALL LETTER H
0048  ; [.0AB9.0020.0008.0048] # LATIN CAPITAL LETTER H
0069  ; [.0AD3.0020.0002.0069] # LATIN SMALL LETTER I
0049  ; [.0AD3.0020.0008.0049] # LATIN CAPITAL LETTER I
00ED  ; [.0AD3.0020.0002.0069][.0000.0032.0002.0301] # LATIN SMALL LETTER I WITH ACUTE; QQCM
00CD  ; [.0AD3.0020.0008.0049][.0000.0032.0002.0301] # LATIN CAPITAL LETTER I WITH ACUTE; QQCM
00EC  ; [.0AD3.0020.0002.0069][.0000.0035.0002.0300] # LATIN SMALL LETTER I WITH GRAVE; QQCM
00CC  ; [.0AD3.0020.0008.0049][.0000.0035.0002.0300] # LATIN CAPITAL LETTER I WITH GRAVE; QQCM
00EE  ; [.0AD3.0020.0002.0069][.0000.003C.0002.0302] # LATIN SMALL LETTER I WITH CIRCUMFLEX; QQCM
00CE  ; [.0AD3.0020.0008.0049][.0000.003C.0002.0302] # LATIN CAPITAL LETTER I WITH CIRCUMFLEX; QQCM
00EF  ; [.0AD3.0020.0002.0069][.0000.0047.0002.0308] # LATIN SMALL LETTER I WITH DIAERESIS; QQCM
00CF  ; [.0AD3.0020.0008.0049][.0000.0047.0002.0308] # LATIN CAPITAL LETTER I WITH DIAERESIS; QQCM
006A  ; [.0AE7.0020.0002.006A] # LATIN SMALL LETTER J
004A  ; [.0AE7.0020.0008.004A] # LATIN CAPITAL LETTER J
006B  ; [.0AF7.0020.0002.006B] # LATIN SMALL LETTER K
004B  ; [.0AF7.0020.0008.004B] # LATIN CAPITAL LETTER K
006C  ; [.0B03.0020.0002.006C] # LATIN SMALL LETTER L
004C  ; [.0B03.0020.0008.004C] # LATIN CAPITAL LETTER L
006D  ; [.0B2B.0020.0002.006D] # LATIN SMALL LETTER M
004D  ; [.0B2B.0020.0008.004D] # LATIN CAPITAL LETTER M
006E  ; [.0B33.0020.0002.006E] # LATIN SMALL LETTER N
004E  ; [.0B33.0020.0008.004E] # LATIN CAPITAL LETTER N
00F1  ; [.0B33.0020.0002.006E][.0000.004E.0002.0303] # LATIN SMALL LETTER N WITH TILDE; QQCM
00D1  ; [.0B33.0020.0008.004E][.0000.004E.0002.0303] # LATIN CAPITAL LETTER N WITH TILDE; QQCM
006F  ; [.0B4B.0020.0002.006F] # LATIN SMALL LETTER O
004F  ; [.0B4B.0020.0008.004F] # LATIN CAPITAL LETTER O
00BA  ; [.0B4B.0020.0014.00BA] # MASCULINE ORDINAL INDICATOR; QQK
00F3  ; [.0B4B.0020.0002.006F][.0000.0032.0002.0301] # LATIN SMALL LETTER O WITH ACUTE; QQCM
00D3  ; [.0B4B.0020.0008.004F][.0000.0032.0002.0301] # LATIN CAPITAL LETTER O WITH ACUTE; QQCM
00F2  ; [.0B4B.0020.0002.006F][.0000.0035.0002.0300] # LATIN SMALL LETTER O WITH GRAVE; QQCM
00D2  ; [.0B4B.0020.0008.004F][.0000.0035.0002.0300] # LATIN CAPITAL LETTER O WITH GRAVE; QQCM
00F4  ; [.0B4B.0020.0002.006F][.0000.003C.0002.0302] # LATIN SMALL LETTER O WITH CIRCUMFLEX; QQCM
00D4  ; [.0B4B.0020.0008.004F][.0000.003C.0002.0302] # LATIN CAPITAL LETTER O WITH CIRCUMFLEX; QQCM
00F6  ; [.0B4B.0020.0002.006F][.0000.0047.0002.0308] # LATIN SMALL LETTER O WITH DIAERESIS; QQCM
00D6  ; [.0B4B.0020.0008.004F][.0000.0047.0002.0308] # LATIN CAPITAL LETTER O WITH DIAERESIS; QQCM
00F5  ; [.0B4B.0020.0002.006F][.0000.004E.0002.0303] # LATIN SMALL LETTER O WITH TILDE; QQCM
00D5  ; [.0B4B.0020.0008.004F][.0000.004E.0002.0303] # LATIN CAPITAL LETTER O WITH TILDE; QQCM
00F8  ; [.0B53.0020.0002.00F8] # LATIN SMALL LETTER O WITH STROKE
00D8  ; [.0B53.0020.0008.00D8] # LATIN CAPITAL LETTER O WITH STROKE
0070  ; [.0B67.0020.0002.0070] # LATIN SMALL LETTER P
0050  ; [.0B67.0020.0008.0050] # LATIN CAPITAL LETTER P
0071  ; [.0B73.0020.0002.0071] # LATIN SMALL LETTER Q
0051  ; [.0B73.0020.0008.0051] # LATIN CAPITAL LETTER Q
0072  ; [.0B7F.0020.0002.0072] # LATIN SMALL LETTER R
0052  ; [.0B7F.0020.0008.0052] # LATIN CAPITAL LETTER R
0073  ; [.0BA7.0020.0002.0073] # LATIN SMALL LETTER S
0053  ; [.0BA7.0020.0008.0053] # LATIN CAPITAL LETTER S
00DF  ; [.0BA7.0020.0004.00DF][.0000.0153.0004.00DF][.0BA7.0020.001F.00DF] # LATIN SMALL LETTER SHARP S; QQKN
0074  ; [.0BBF.0020.0002.0074] # LATIN SMALL LETTER T
0054  ; [.0BBF.0020.0008.0054] # LATIN CAPITAL LETTER T
0075  ; [.0BD7.0020.0002.0075] # LATIN SMALL LETTER U
0055  ; [.0BD7.0020.0008.0055] # LATIN CAPITAL LETTER U
00FA  ; [.0BD7.0020.0002.0075][.0000.0032.0002.0301] # LATIN SMALL LETTER U WITH ACUTE; QQCM
00DA  ; [.0BD7.0020.0008.0055][.0000.0032.0002.0301] # LATIN CAPITAL LETTER U WITH ACUTE; QQCM
00F9  ; [.0BD7.0020.0002.0075][.0000.0035.0002.0300] # LATIN SMALL LETTER U WITH GRAVE; QQCM
00D9  ; [.0BD7.0020.0008.0055][.0000.0035.0002.0300] # LATIN CAPITAL LETTER U WITH GRAVE; QQCM
00FB  ; [.0BD7.0020.0002.0075][.0000.003C.0002.0302] # LATIN SMALL LETTER U WITH CIRCUMFLEX; QQCM
00DB  ; [.0BD7.0020.0008.0055][.0000.003C.0002.0302] # LATIN CAPITAL LETTER U WITH CIRCUMFLEX; QQCM
00FC  ; [.0BD7.0020.0002.0075][.0000.0047.0002.0308] # LATIN SMALL LETTER U WITH DIAERESIS; QQCM
00DC  ; [.0BD7.0020.0008.0055][.0000.0047.0002.0308] # LATIN CAPITAL LETTER U WITH DIAERESIS; QQCM
0076  ; [.0BEF.0020.0002.0076] # LATIN SMALL LETTER V
0056  ; [.0BEF.0020.0008.0056] # LATIN CAPITAL LETTER V
0077  ; [.0BFB.0020.0002.0077] # LATIN SMALL LETTER W
0057  ; [.0BFB.0020.0008.0057] # LATIN CAPITAL LETTER W
0078  ; [.0C03.0020.0002.0078] # LATIN SMALL LETTER X
0058  ; [.0C03.0020.0008.0058] # LATIN CAPITAL LETTER X
0079  ; [.0C07.0020.0002.0079] # LATIN SMALL LETTER Y
0059  ; [.0C07.0020.0008.0059] # LATIN CAPITAL LETTER Y
00FD  ; [.0C07.0020.0002.0079][.0000.0032.0002.0301] # LATIN SMALL LETTER Y WITH ACUTE; QQCM
00DD  ; [.0C07.0020.0008.0059][.0000.0032.0002.0301] # LATIN CAPITAL LETTER Y WITH ACUTE; QQCM
00FF  ; [.0C07.0020.0002.0079][.0000.0047.0002.0308] # LATIN SMALL LETTER Y WITH DIAERESIS; QQCM
007A  ; [.0C13.0020.0002.007A] # LATIN SMALL LETTER Z
005A  ; [.0C13.0020.0008.005A] # LATIN CAPITAL LETTER Z
00FE  ; [.0C3B.0020.0002.00FE] # LATIN SMALL LETTER THORN
00DE  ; [.0C3B.0020.0008.00DE] # LATIN CAPITAL LETTER THORN
00B5  ; [.0C9F.0020.0004.00B5] # MICRO SIGN; QQK
1100  ; [.1831.0020.0002.1100] # HANGUL CHOSEONG KIYEOK
1101  ; [.1832.0020.0002.1101] # HANGUL CHOSEONG SSANGKIYEOK
1102  ; [.1833.0020.0002.1102] # HANGUL CHOSEONG NIEUN
1103  ; [.1834.0020.0002.1103] # HANGUL CHOSEONG TIKEUT
1104  ; [.1835.0020.0002.1104] # HANGUL CHOSEONG SSANGTIKEUT
1105  ; [.1836.0020.0002.1105] # HANGUL CHOSEONG RIEUL
1106  ; [.1837.0020.0002.1106] # HANGUL CHOSEONG MIEUM
1107  ; [.1838.0020.0002.1107] # HANGUL CHOSEONG PIEUP
1108  ; [.1839.0020.0002.1108] # HANGUL CHOSEONG SSANGPIEUP
1109  ; [.183A.0020.0002.1109] # HANGUL CHOSEONG SIOS
110A  ; [.183B.0020.0002.110A] # HANGUL CHOSEONG SSANGSIOS
110B  ; [.183C.0020.0002.110B] # HANGUL CHOSEONG IEUNG
110C  ; [.183D.0020.0002.110C] # HANGUL CHOSEONG CIEUC
110D  ; [.183E.0020.0002.110D] # HANGUL CHOSEONG SSANGCIEUC
110E  ; [.183F.0020.0002.110E] # HANGUL CHOSEONG CHIEUCH
110F  ; [.1840.0020.0002.110F] # HANGUL CHOSEONG KHIEUKH
1110  ; [.1841.0020.0002.1110] # HANGUL CHOSEONG THIEUTH
1111  ; [.1842.0020.0002.1111] # HANGUL CHOSEONG PHIEUPH
1112  ; [.1843.0020.0002.1112] # HANGUL CHOSEONG HIEUH
1113  ; [.1844.0020.0002.1113] # HANGUL CHOSEONG NIEUN-KIYEOK
1114  ; [.1845.0020.0002.1114] # HANGUL CHOSEONG SSANGNIEUN
1115  ; [.1846.0020.0002.1115] # HANGUL CHOSEONG NIEUN-TIKEUT
1116  ; [.1847.0020.0002.1116] # HANGUL CHOSEONG NIEUN-PIEUP
1117  ; [.1848.0020.0002.1117] # HANGUL CHOSEONG TIKEUT-KIYEOK
1118  ; [.1849.0020.0002.1118] # HANGUL CHOSEONG RIEUL-NIEUN
1119  ; [.184A.0020.0002.1119] # HANGUL CHOSEONG SSANGRIEUL
111A  ; [.184B.0020.0002.111A] # HANGUL CHOSEONG RIEUL-HIEUH
111B  ; [.184C.0020.0002.111B] # HANGUL CHOSEONG KAPYEOUNRIEUL
111C  ; [.184D.0020.0002.111C] # HANGUL CHOSEONG MIEUM-PIEUP
111D  ; [.184E.0020.0002.111D] # HANGUL CHOSEONG KAPYEOUNMIEUM
111E  ; [.184F.0020.0002.111E] # HANGUL CHOSEONG PIEUP-KIYEOK
111F  ; [.1850.0020.0002.111F] # HANGUL CHOSEONG PIEUP-NIEUN
1120  ; [.1851.0020.0002.1120] # HANGUL CHOSEONG PIEUP-TIKEUT
1121  ; [.1852.0020.0002.1121] # HANGUL CHOSEONG PIEUP-SIOS
1122  ; [.1853.0020.0002.1122] # HANGUL CHOSEONG PIEUP-SIOS-KIYEOK
1123  ; [.1854.0020.0002.1123] # HANGUL CHOSEONG PIEUP-SIOS-TIKEUT
1124  ; [.1855.0020.0002.1124] # HANGUL CHOSEONG PIEUP-SIOS-PIEUP
1125  ; [.1856.0020.0002.1125] # HANGUL CHOSEONG PIEUP-SSANGSIOS
1126  ; [.1857.0020.0002.1126] # HANGUL CHOSEONG PIEUP-SIOS-CIEUC
1127  ; [.1858.0020.0002.1127] # HANGUL CHOSEONG PIEUP-CIEUC
1128  ; [.1859.0020.0002.1128] # HANGUL CHOSEONG PIEUP-CHIEUCH
1129  ; [.185A.0020.0002.1129] # HANGUL CHOSEONG PIEUP-THIEUTH
112A  ; [.185B.0020.0002.112A] # HANGUL CHOSEONG PIEUP-PHIEUPH
112B  ; [.185C.0020.0002.112B] # HANGUL CHOSEONG KAPYEOUNPIEUP
112C  ; [.185D.0020.0002.112C] # HANGUL CHOSEONG KAPYEOUNSSANGPIEUP
112D  ; [.185E.0020.0002.112D] # HANGUL CHOSEONG SIOS-KIYEOK
112E  ; [.185F.0020.0002.112E] # HANGUL CHOSEONG SIOS-NIEUN
112F  ; [.1860.0020.0002.112F] # HANGUL CHOSEONG SIOS-TIKEUT
1130  ; [.1861.0020.0002.1130] # HANGUL CHOSEONG SIOS-RIEUL
1131  ; [.1862.0020.0002.1131] # HANGUL CHOSEONG SIOS-MIEUM
1132  ; [.1863.0020.0002.1132] # HANGUL CHOSEONG SIOS-PIEUP
1133  ; [.1864.0020.0002.1133] # HANGUL CHOSEONG SIOS-PIEUP-KIYEOK
1134  ; [.1865.0020.0002.1134] # HANGUL CHOSEONG SIOS-SSANGSIOS
1135  ; [.1866.0020.0002.1135] # HANGUL CHOSEONG SIOS-IEUNG
1136  ; [.1867.0020.0002.1136] # HANGUL CHOSEONG SIOS-CIEUC
1137  ; [.1868.0020.0002.1137] # HANGUL CHOSEONG SIOS-CHIEUCH
1138  ; [.1869.0020.0002.1138] # HANGUL CHOSEONG SIOS-KHIEUKH
1139  ; [.186A.0020.0002.1139] # HANGUL CHOSEONG SIOS-THIEUTH
113A  ; [.186B.0020.0002.113A] # HANGUL CHOSEONG SIOS-PHIEUPH
113B  ; [.186C.0020.0002.113B] # HANGUL CHOSEONG SIOS-HIEUH
113C  ; [.186D.0020.0002.113C] # HANGUL CHOSEONG CHITUEUMSIOS
113D  ; [.186E.0020.0002.113D] # HANGUL CHOSEONG CHITUEUMSSANGSIOS
113E  ; [.186F.0020.0002.113E] # HANGUL CHOSEONG CEONGCHIEUMSIOS
113F  ; [.1870.0020.0002.113F] # HANGUL CHOSEONG CEONGCHIEUMSSANGSIOS
1140  ; [.1871.0020.0002.1140] # HANGUL CHOSEONG PANSIOS
1141  ; [.1872.0020.0002.1141] # HANGUL CHOSEONG IEUNG-KIYEOK
1142  ; [.1873.0020.0002.1142] # HANGUL CHOSEONG IEUNG-TIKEUT
1143  ; [.1874.0020.0002.1143] # HANGUL CHOSEONG IEUNG-MIEUM
1144  ; [.1875.0020.0002.1144] # HANGUL CHOSEONG IEUNG-PIEUP
1145  ; [.1876.0020.0002.1145] # HANGUL CHOSEONG IEUNG-SIOS
1146  ; [.1877.0020.0002.1146] # HANGUL CHOSEONG IEUNG-PANSIOS
1147  ; [.1878.0020.0002.1147] # HANGUL CHOSEONG SSANGIEUNG
1148  ; [.1879.0020.0002.1148] # HANGUL CHOSEONG IEUNG-CIEUC
1149  ; [.187A.0020.0002.1149] # HANGUL CHOSEONG IEUNG-CHIEUCH
114A  ; [.187B.0020.0002.114A] # HANGUL CHOSEONG IEUNG-THIEUTH
114B  ; [.187C.0020.0002.114B] # HANGUL CHOSEONG IEUNG-PHIEUPH
114C  ; [.187D.0020.0002.114C] # HANGUL CHOSEONG YESIEUNG
114D  ; [.187E.0020.0002.114D] # HANGUL CHOSEONG CIEUC-IEUNG
114E  ; [.187F.0020.0002.114E] # HANGUL CHOSEONG CHITUEUMCIEUC
114F  ; [.1880.0020.0002.114F] # HANGUL CHOSEONG CHITUEUMSSANGCIEUC
1150  ; [.1881.0020.0002.1150] # HANGUL CHOSEONG CEONGCHIEUMCIEUC
1151  ; [.1882.0020.0002.1151] # HANGUL CHOSEONG CEONGCHIEUMSSANGCIEUC
1152  ; [.1883.0020.0002.1152] # HANGUL CHOSEONG CHIEUCH-KHIEUKH
1153  ; [.1884.0020.0002.1153] # HANGUL CHOSEONG CHIEUCH-HIEUH
1154  ; [.1885.0020.0002.1154] # HANGUL CHOSEONG CHITUEUMCHIEUCH
1155  ; [.1886.0020.0002.1155] # HANGUL CHOSEONG CEONGCHIEUMCHIEUCH
1156  ; [.1887.0020.0002.1156] # HANGUL CHOSEONG PHIEUPH-PIEUP
1157  ; [.1888.0020.0002.1157] # HANGUL CHOSEONG KAPYEOUNPHIEUPH
1158  ; [.1889.0020.0002.1158] # HANGUL CHOSEONG SSANGHIEUH
1159  ; [.188A.0020.0002.1159] # HANGUL CHOSEONG YEORINHIEUH
115F  ; [.188B.0020.0002.115F] # HANGUL CHOSEONG FILLER
1160  ; [.188C.0020.0002.1160] # HANGUL JUNGSEONG FILLER
1161  ; [.188D.0020.0002.1161] # HANGUL JUNGSEONG A
1162  ; [.188E.0020.0002.1162] # HANGUL JUNGSEONG AE
1163  ; [.188F.0020.0002.1163] # HANGUL JUNGSEONG YA
1164  ; [.1890.0020.0002.1164] # HANGUL JUNGSEONG YAE
1165  ; [.1891.0020.0002.1165] # HANGUL JUNGSEONG EO
1166  ; [.1892.0020.0002.1166] # HANGUL JUNGSEONG E
1167  ; [.1893.0020.0002.1167] # HANGUL JUNGSEONG YEO
1168  ; [.1894.0020.0002.1168] # HANGUL JUNGSEONG YE
1169  ; [.1895.0020.0002.1169] # HANGUL JUNGSEONG O
116A  ; [.1896.0020.0002.116A] # HANGUL JUNGSEONG WA
116B  ; [.1897.0020.0002.116B] # HANGUL JUNGSEONG WAE
116C  ; [.1898.0020.0002.116C] # HANGUL JUNGSEONG OE
116D  ; [.1899.0020.0002.116D] # HANGUL JUNGSEONG YO
116E  ; [.189A.0020.0002.116E] # HANGUL JUNGSEONG U
116F  ; [.189B.0020.0002.116F] # HANGUL JUNGSEONG WEO
1170  ; [.189C.0020.0002.1170] # HANGUL JUNGSEONG WE
1171  ; [.189D.0020.0002.1171] # HANGUL JUNGSEONG WI
1172  ; [.189E.0020.0002.1172] # HANGUL JUNGSEONG YU
1173  ; [.189F.0020.0002.1173] # HANGUL JUNGSEONG EU
1174  ; [.18A0.0020.0002.1174] # HANGUL JUNGSEONG YI
1175  ; [.18A1.0020.0002.1175] # HANGUL JUNGSEONG I
1176  ; [.18A2.0020.0002.1176] # HANGUL JUNGSEONG A-O
1177  ; [.18A3.0020.0002.1177] # HANGUL JUNGSEONG A-U
1178  ; [.18A4.0020.0002.1178] # HANGUL JUNGSEONG YA-O
1179  ; [.18A5.0020.0002.1179] # HANGUL JUNGSEONG YA-YO
117A  ; [.18A6.0020.0002.117A] # HANGUL JUNGSEONG EO-O
117B  ; [.18A7.0020.0002.117B] # HANGUL JUNGSEONG EO-U
117C  ; [.18A8.0020.0002.117C] # HANGUL JUNGSEONG EO-EU
117D  ; [.18A9.0020.0002.117D] # HANGUL JUNGSEONG YEO-O
117E  ; [.18AA.0020.0002.117E] # HANGUL JUNGSEONG YEO-U
117F  ; [.18AB.0020.0002.117F] # HANGUL JUNGSEONG O-EO
1180  ; [.18AC.0020.0002.1180] # HANGUL JUNGSEONG O-E
1181  ; [.18AD.0020.0002.1181] # HANGUL JUNGSEONG O-YE
1182  ; [.18AE.0020.0002.1182] # HANGUL JUNGSEONG O-O
1183  ; [.18AF.0020.0002.1183] # HANGUL JUNGSEONG O-U
1184  ; [.18B0.0020.0002.1184] # HANGUL JUNGSEONG YO-YA
1185  ; [.18B1.0020.0002.1185] # HANGUL JUNGSEONG YO-YAE
1186  ; [.18B2.0020.0002.1186] # HANGUL JUNGSEONG YO-YEO
1187  ; [.18B3.0020.0002.1187] # HANGUL JUNGSEONG YO-O
1188  ; [.18B4.0020.0002.1188] # HANGUL JUNGSEONG YO-I
1189  ; [.18B5.0020.0002.1189] # HANGUL JUNGSEONG U-A
118A  ; [.18B6.0020.0002.118A] # HANGUL JUNGSEONG U-AE
118B  ; [.18B7.0020.0002.118B] # HANGUL JUNGSEONG U-EO-EU
118C  ; [.18B8.0020.0002.118C] # HANGUL JUNGSEONG U-YE
118D  ; [.18B9.0020.0002.118D] # HANGUL JUNGSEONG U-U
118E  ; [.18BA.0020.0002.118E] # HANGUL JUNGSEONG YU-A
118F  ; [.18BB.0020.0002.118F] # HANGUL JUNGSEONG YU-EO
1190  ; [.18BC.0020.0002.1190] # HANGUL JUNGSEONG YU-E
1191  ; [.18BD.0020.0002.1191] # HANGUL JUNGSEONG YU-YEO
1192  ; [.18BE.0020.0002.1192] # HANGUL JUNGSEONG YU-YE
1193  ; [.18BF.0020.0002.1193] # HANGUL JUNGSEONG YU-U
1194  ; [.18C0.0020.0002.1194] # HANGUL JUNGSEONG YU-I
1195  ; [.18C1.0020.0002.1195] # HANGUL JUNGSEONG EU-U
1196  ; [.18C2.0020.0002.1196] # HANGUL JUNGSEONG EU-EU
1197  ; [.18C3.0020.0002.1197] # HANGUL JUNGSEONG YI-U
1198  ; [.18C4.0020.0002.1198] # HANGUL JUNGSEONG I-A
1199  ; [.18C5.0020.0002.1199] # HANGUL JUNGSEONG I-YA
119A  ; [.18C6.0020.0002.119A] # HANGUL JUNGSEONG I-O
119B  ; [.18C7.0020.0002.119B] # HANGUL JUNGSEONG I-U
119C  ; [.18C8.0020.0002.119C] # HANGUL JUNGSEONG I-EU
119D  ; [.18C9.0020.0002.119D] # HANGUL JUNGSEONG I-ARAEA
119E  ; [.18CA.0020.0002.119E] # HANGUL JUNGSEONG ARAEA
119F  ; [.18CB.0020.0002.119F] # HANGUL JUNGSEONG ARAEA-EO
11A0  ; [.18CC.0020.0002.11A0] # HANGUL JUNGSEONG ARAEA-U
11A1  ; [.18CD.0020.0002.11A1] # HANGUL JUNGSEONG ARAEA-I
11A2  ; [.18CE.0020.0002.11A2] # HANGUL JUNGSEONG SSANGARAEA
11A8  ; [.18CF.0020.0002.11A8] # HANGUL JONGSEONG KIYEOK
11A9  ; [.18D0.0020.0002.11A9] # HANGUL JONGSEONG SSANGKIYEOK
11AA  ; [.18D1.0020.0002.11AA] # HANGUL JONGSEONG KIYEOK-SIOS
11AB  ; [.18D2.0020.0002.11AB] # HANGUL JONGSEONG NIEUN
11AC  ; [.18D3.0020.0002.11AC] # HANGUL JONGSEONG NIEUN-CIEUC
11AD  ; [.18D4.0020.0002.11AD] # HANGUL JONGSEONG NIEUN-HIEUH
11AE  ; [.18D5.0020.0002.11AE] # HANGUL JONGSEONG TIKEUT
11AF  ; [.18D6.0020.0002.11AF] # HANGUL JONGSEONG RIEUL
11B0  ; [.18D7.0020.0002.11B0] # HANGUL JONGSEONG RIEUL-KIYEOK
11B1  ; [.18D8.0020.0002.11B1] # HANGUL JONGSEONG RIEUL-MIEUM
11B2  ; [.18D9.0020.0002.11B2] # HANGUL JONGSEONG RIEUL-PIEUP
11B3  ; [.18DA.0020.0002.11B3] # HANGUL JONGSEONG RIEUL-SIOS
11B4  ; [.18DB.0020.0002.11B4] # HANGUL JONGSEONG RIEUL-THIEUTH
11B5  ; [.18DC.0020.0002.11B5] # HANGUL JONGSEONG RIEUL-PHIEUPH
11B6  ; [.18DD.0020.0002.11B6] # HANGUL JONGSEONG RIEUL-HIEUH
11B7  ; [.18DE.0020.0002.11B7] # HANGUL JONGSEONG MIEUM
11B8  ; [.18DF.0020.0002.11B8] # HANGUL JONGSEONG PIEUP
11B9  ; [.18E0.0020.0002.11B9] # HANGUL JONGSEONG PIEUP-SIOS
11BA  ; [.18E1.0020.0002.11BA] # HANGUL JONGSEONG SIOS
11BB  ; [.18E2.0020.0002.11BB] # HANGUL JONGSEONG SSANGSIOS
11BC  ; [.18E3.0020.0002.11BC] # HANGUL JONGSEONG IEUNG
11BD  ; [.18E4.0020.0002.11BD] # HANGUL JONGSEONG CIEUC
11BE  ; [.18E5.0020.0002.11BE] # HANGUL JONGSEONG CHIEUCH
11BF  ; [.18E6.0020.0002.11BF] # HANGUL JONGSEONG KHIEUKH
11C0  ; [.18E7.0020.0002.11C0] # HANGUL JONGSEONG THIEUTH
11C1  ; [.18E8.0020.0002.11C1] # HANGUL JONGSEONG PHIEUPH
11C2  ; [.18E9.0020.0002.11C2] # HANGUL JONGSEONG HIEUH
11C3  ; [.18EA.0020.0002.11C3] # HANGUL JONGSEONG KIYEOK-RIEUL
11C4  ; [.18EB.0020.0002.11C4] # HANGUL JONGSEONG KIYEOK-SIOS-KIYEOK
11C5  ; [.18EC.0020.0002.11C5] # HANGUL JONGSEONG NIEUN-KIYEOK
11C6  ; [.18ED.0020.0002.11C6] # HANGUL JONGSEONG NIEUN-TIKEUT
11C7  ; [.18EE.0020.0002.11C7] # HANGUL JONGSEONG NIEUN-SIOS
11C8  ; [.18EF.0020.0002.11C8] # HANGUL JONGSEONG NIEUN-PANSIOS
11C9  ; [.18F0.0020.0002.11C9] # HANGUL JONGSEONG NIEUN-THIEUTH
11CA  ; [.18F1.0020.0002.11CA] # HANGUL JONGSEONG TIKEUT-KIYEOK
11CB  ; [.18F2.0020.0002.11CB] # HANGUL JONGSEONG TIKEUT-RIEUL
11CC  ; [.18F3.0020.0002.11CC] # HANGUL JONGSEONG RIEUL-KIYEOK-SIOS
11CD  ; [.18F4.0020.0002.11CD] # HANGUL JONGSEONG RIEUL-NIEUN
11CE  ; [.18F5.0020.0002.11CE] # HANGUL JONGSEONG RIEUL-TIKEUT
11CF  ; [.18F6.0020.0002.11CF] # HANGUL JONGSEONG RIEUL-TIKEUT-HIEUH
11D0  ; [.18F7.0020.0002.11D0] # HANGUL JONGSEONG SSANGRIEUL
11D1  ; [.18F8.0020.0002.11D1] # HANGUL JONGSEONG RIEUL-MIEUM-KIYEOK
11D2  ; [.18F9.0020.0002.11D2] # HANGUL JONGSEONG RIEUL-MIEUM-SIOS
11D3  ; [.18FA.0020.0002.11D3] # HANGUL JONGSEONG RIEUL-PIEUP-SIOS
11D4  ; [.18FB.0020.0002.11D4] # HANGUL JONGSEONG RIEUL-PIEUP-HIEUH
11D5  ; [.18FC.0020.0002.11D5] # HANGUL JONGSEONG RIEUL-KAPYEOUNPIEUP
11D6  ; [.18FD.0020.0002.11D6] # HANGUL JONGSEONG RIEUL-SSANGSIOS
11D7  ; [.18FE.0020.0002.11D7] # HANGUL JONGSEONG RIEUL-PANSIOS
11D8  ; [.18FF.0020.0002.11D8] # HANGUL JONGSEONG RIEUL-KHIEUKH
11D9  ; [.1900.0020.0002.11D9] # HANGUL JONGSEONG RIEUL-YEORINHIEUH
11DA  ; [.1901.0020.0002.11DA] # HANGUL JONGSEONG MIEUM-KIYEOK
11DB  ; [.1902.0020.0002.11DB] # HANGUL JONGSEONG MIEUM-RIEUL
11DC  ; [.1903.0020.0002.11DC] # HANGUL JONGSEONG MIEUM-PIEUP
11DD  ; [.1904.0020.0002.11DD] # HANGUL JONGSEONG MIEUM-SIOS
11DE  ; [.1905.0020.0002.11DE] # HANGUL JONGSEONG MIEUM-SSANGSIOS
11DF  ; [.1906.0020.0002.11DF] # HANGUL JONGSEONG MIEUM-PANSIOS
11E0  ; [.1907.0020.0002.11E0] # HANGUL JONGSEONG MIEUM-CHIEUCH
11E1  ; [.1908.0020.0002.11E1] # HANGUL JONGSEONG MIEUM-HIEUH
11E2  ; [.1909.0020.0002.11E2] # HANGUL JONGSEONG KAPYEOUNMIEUM
11E3  ; [.190A.0020.0002.11E3] # HANGUL JONGSEONG PIEUP-RIEUL
11E4  ; [.190B.0020.0002.11E4] # HANGUL JONGSEONG PIEUP-PHIEUPH
11E5  ; [.190C.0020.0002.11E5] # HANGUL JONGSEONG PIEUP-HIEUH
11E6  ; [.190D.0020.0002.11E6] # HANGUL JONGSEONG KAPYEOUNPIEUP
11E7  ; [.190E.0020.0002.11E7] # HANGUL JONGSEONG SIOS-KIYEOK
11E8  ; [.190F.0020.0002.11E8] # HANGUL JONGSEONG SIOS-TIKEUT
11E9  ; [.1910.0020.0002.11E9] # HANGUL JONGSEONG SIOS-RIEUL
11EA  ; [.1911.0020.0002.11EA] # HANGUL JONGSEONG SIOS-PIEUP
11EB  ; [.1912.0020.0002.11EB] # HANGUL JONGSEONG PANSIOS
11EC  ; [.1913.0020.0002.11EC] # HANGUL JONGSEONG IEUNG-KIYEOK
11ED  ; [.1914.0020.0002.11ED] # HANGUL JONGSEONG IEUNG-SSANGKIYEOK
11EE  ; [.1915.0020.0002.11EE] # HANGUL JONGSEONG SSANGIEUNG
11EF  ; [.1916.0020.0002.11EF] # HANGUL JONGSEONG IEUNG-KHIEUKH
11F0  ; [.1917.0020.0002.11F0] # HANGUL JONGSEONG YESIEUNG
11F1  ; [.1918.0020.0002.11F1] # HANGUL JONGSEONG YESIEUNG-SIOS
11F2  ; [.1919.0020.0002.11F2] # HANGUL JONGSEONG YESIEUNG-PANSIOS
11F3  ; [.191A.0020.0002.11F3] # HANGUL JONGSEONG PHIEUPH-PIEUP
11F4  ; [.191B.0020.0002.11F4] # HANGUL JONGSEONG KAPYEOUNPHIEUPH
11F5  ; [.191C.0020.0002.11F5] # HANGUL JONGSEONG HIEUH-NIEUN
11F6  ; [.191D.0020.0002.11F6] # HANGUL JONGSEONG HIEUH-RIEUL
11F7  ; [.191E.0020.0002.11F7] # HANGUL JONGSEONG HIEUH-MIEUM
11F8  ; [.191F.0020.0002.11F8] # HANGUL JONGSEONG HIEUH-PIEUP
11F9  ; [.1920.0020.0002.11F9] # HANGUL JONGSEONG YEORINHIEUH
3041  ; [.1921.0020.000D.3041] # HIRAGANA LETTER SMALL A
3042  ; [.1921.0020.000E.3042] # HIRAGANA LETTER A
30A1  ; [.1921.0020.000F.30A1] # KATAKANA LETTER SMALL A
30A2  ; [.1921.0020.0011.30A2] # KATAKANA LETTER A
3043  ; [.1922.0020.000D.3043] # HIRAGANA LETTER SMALL I
3044  ; [.1922.0020.000E.3044] # HIRAGANA LETTER I
30A3  ; [.1922.0020.000F.30A3] # KATAKANA LETTER SMALL I
30A4  ; [.1922.0020.0011.30A4] # KATAKANA LETTER I
3045  ; [.1923.0020.000D.3045] # HIRAGANA LETTER SMALL U
3046  ; [.1923.0020.000E.3046] # HIRAGANA LETTER U
30A5  ; [.1923.0020.000F.30A5] # KATAKANA LETTER SMALL U
30A6  ; [.1923.0020.0011.30A6] # KATAKANA LETTER U
3094  ; [.1923.0020.000E.3046][.0000.013D.0002.3099] # HIRAGANA LETTER VU; QQCM
30F4  ; [.1923.0020.0011.30A6][.0000.013D.0002.3099] # KATAKANA LETTER VU; QQCM
3047  ; [.1924.0020.000D.3047] # HIRAGANA LETTER SMALL E
3048  ; [.1924.0020.000E.3048] # HIRAGANA LETTER E
30A7  ; [.1924.0020.000F.30A7] # KATAKANA LETTER SMALL E
30A8  ; [.1924.0020.0011.30A8] # KATAKANA LETTER E
3049  ; [.1925.0020.000D.3049] # HIRAGANA LETTER SMALL O
304A  ; [.1925.0020.000E.304A] # HIRAGANA LETTER O
30A9  ; [.1925.0020.000F.30A9] # KATAKANA LETTER SMALL O
30AA  ; [.1925.0020.0011.30AA] # KATAKANA LETTER O
304B  ; [.1926.0020.000E.304B] # HIRAGANA LETTER KA
30F5  ; [.1926.0020.000F.30F5] # KATAKANA LETTER SMALL KA
30AB  ; [.1926.0020.0011.30AB] # KATAKANA LETTER KA
304C  ; [.1926.0020.000E.304B][.0000.013D.0002.3099] # HIRAGANA LETTER GA; QQCM
30AC  ; [.1926.0020.0011.30AB][.0000.013D.0002.3099] # KATAKANA LETTER GA; QQCM
304D  ; [.1927.0020.000E.304D] # HIRAGANA LETTER KI
30AD  ; [.1927.0020.0011.30AD] # KATAKANA LETTER KI
304E  ; [.1927.0020.000E.304D][.0000.013D.0002.3099] # HIRAGANA LETTER GI; QQCM
30AE  ; [.1927.0020.0011.30AD][.0000.013D.0002.3099] # KATAKANA LETTER GI; QQCM
304F  ; [.1928.0020.000E.304F] # HIRAGANA LETTER KU
30AF  ; [.1928.0020.0011.30AF] # KATAKANA LETTER KU
3050  ; [.1928.0020.000E.304F][.0000.013D.0002.3099] # HIRAGANA LETTER GU; QQCM
30B0  ; [.1928.0020.0011.30AF][.0000.013D.0002.3099] # KATAKANA LETTER GU; QQCM
3051  ; [.1929.0020.000E.3051] # HIRAGANA LETTER KE
30F6  ; [.1929.0020.000F.30F6] # KATAKANA LETTER SMALL KE
30B1  ; [.1929.0020.0011.30B1] # KATAKANA LETTER KE
3052  ; [.1929.0020.000E.3051][.0000.013D.0002.3099] # HIRAGANA LETTER GE; QQCM
30B2  ; [.1929.0020.0011.30B1][.0000.013D.0002.3099] # KATAKANA LETTER GE; QQCM
3053  ; [.192A.0020.000E.3053] # HIRAGANA LETTER KO
30B3  ; [.192A.0020.0011.30B3] # KATAKANA LETTER KO
3054  ; [.192A.0020.000E.3053][.0000.013D.0002.3099] # HIRAGANA LETTER GO; QQCM
30B4  ; [.192A.0020.0011.30B3][.0000.013D.0002.3099] # KATAKANA LETTER GO; QQCM
3055  ; [.192B.0020.000E.3055] # HIRAGANA LETTER SA
30B5  ; [.192B.0020.0011.30B5] # KATAKANA LETTER SA
3056  ; [.192B.0020.000E.3055][.0000.013D.0002.3099] # HIRAGANA LETTER ZA; QQCM
30B6  ; [.192B.0020.0011.30B5][.0000.013D.0002.3099] # KATAKANA LETTER ZA; QQCM
3057  ; [.192C.0020.000E.3057] # HIRAGANA LETTER SI
30B7  ; [.192C.0020.0011.30B7] # KATAKANA LETTER SI
3058  ; [.192C.0020.000E.3057][.0000.013D.0002.3099] # HIRAGANA LETTER ZI; QQCM
30B8  ; [.192C.0020.0011.30B7][.0000.013D.0002.3099] # KATAKANA LETTER ZI; QQCM
3059  ; [.192D.0020.000E.3059] # HIRAGANA LETTER SU
30B9  ; [.192D.0020.0011.30B9] # KATAKANA LETTER SU
305A  ; [.192D.0020.000E.3059][.0000.013D.0002.3099] # HIRAGANA LETTER ZU; QQCM
30BA  ; [.192D.0020.0011.30B9][.0000.013D.0002.3099] # KATAKANA LETTER ZU; QQCM
305B  ; [.192E.0020.000E.305B] # HIRAGANA LETTER SE
30BB  ; [.192E.0020.0011.30BB] # KATAKANA LETTER SE
305C  ; [.192E.0020.000E.305B][.0000.013D.0002.3099] # HIRAGANA LETTER ZE; QQCM
30BC  ; [.192E.0020.0011.30BB][.0000.013D.0002.3099] # KATAKANA LETTER ZE; QQCM
305D  ; [.192F.0020.000E.305D] # HIRAGANA LETTER SO
30BD  ; [.192F.0020.0011.30BD] # KATAKANA LETTER SO
305E  ; [.192F.0020.000E.305D][.0000.013D.0002.3099] # HIRAGANA LETTER ZO; QQCM
30BE  ; [.192F.0020.0011.30BD][.0000.013D.0002.3099] # KATAKANA LETTER ZO; QQCM
305F  ; [.1930.0020.000E.305F] # HIRAGANA LETTER TA
30BF  ; [.1930.0020.0011.30BF] # KATAKANA LETTER TA
3060  ; [.1930.0020.000E.305F][.0000.013D.0002.3099] # HIRAGANA LETTER DA; QQCM
30C0  ; [.1930.0020.0011.30BF][.0000.013D.0002.3099] # KATAKANA LETTER DA; QQCM
3061  ; [.1931.0020.000E.3061] # HIRAGANA LETTER TI
30C1  ; [.1931.0020.0011.30C1] # KATAKANA LETTER TI
3062  ; [.1931.0020.000E.3061][.0000.013D.0002.3099] # HIRAGANA LETTER DI; QQCM
30C2  ; [.1931.0020.0011.30C1][.0000.013D.0002.3099] # KATAKANA LETTER DI; QQCM
3063  ; [.1932.0020.000D.3063] # HIRAGANA LETTER SMALL TU
3064  ; [.1932.0020.000E.3064] # HIRAGANA LETTER TU
30C3  ; [.1932.0020.000F.30C3] # KATAKANA LETTER SMALL TU
30C4  ; [.1932.0020.0011.30C4] # KATAKANA LETTER TU
3065  ; [.1932.0020.000E.3064][.0000.013D.0002.3099] # HIRAGANA LETTER DU; QQCM
30C5  ; [.1932.0020.0011.30C4][.0000.013D.0002.3099] # KATAKANA LETTER DU; QQCM
3066  ; [.1933.0020.000E.3066] # HIRAGANA LETTER TE
30C6  ; [.1933.0020.0011.30C6] # KATAKANA LETTER TE
3067  ; [.1933.0020.000E.3066][.0000.013D.0002.3099] # HIRAGANA LETTER DE; QQCM
30C7  ; [.1933.0020.0011.30C6][.0000.013D.0002.3099] # KATAKANA LETTER DE; QQCM
3068  ; [.1934.0020.000E.3068] # HIRAGANA LETTER TO
30C8  ; [.1934.0020.0011.30C8] # KATAKANA LETTER TO
3069  ; [.1934.0020.000E.3068][.0000.013D.0002.3099] # HIRAGANA LETTER DO; QQCM
30C9  ; [.1934.0020.0011.30C8][.0000.013D.0002.3099] # KATAKANA LETTER DO; QQCM
306A  ; [.1935.0020.000E.306A] # HIRAGANA LETTER NA
30CA  ; [.1935.0020.0011.30CA] # KATAKANA LETTER NA
306B  ; [.1936.0020.000E.306B] # HIRAGANA LETTER NI
30CB  ; [.1936.0020.0011.30CB] # KATAKANA LETTER NI
306C  ; [.1937.0020.000E.306C] # HIRAGANA LETTER NU
30CC  ; [.1937.0020.0011.30CC] # KATAKANA LETTER NU
306D  ; [.1938.0020.000E.306D] # HIRAGANA LETTER NE
30CD  ; [.1938.0020.0011.30CD] # KATAKANA LETTER NE
306E  ; [.1939.0020.000E.306E] # HIRAGANA LETTER NO
30CE  ; [.1939.0020.0011.30CE] # KATAKANA LETTER NO
306F  ; [.193A.0020.000E.306F] # HIRAGANA LETTER HA
30CF  ; [.193A.0020.0011.30CF] # KATAKANA LETTER HA
3070  ; [.193A.0020.000E.306F][.0000.013D.0002.3099] # HIRAGANA LETTER BA; QQCM
30D0  ; [.193A.0020.0011.30CF][.0000.013D.0002.3099] # KATAKANA LETTER BA; QQCM
3071  ; [.193A.0020.000E.306F][.0000.013E.0002.309A] # HIRAGANA LETTER PA; QQCM
30D1  ; [.193A.0020.0011.30CF][.0000.013E.0002.309A] # KATAKANA LETTER PA; QQCM
3072  ; [.193B.0020.000E.3072] # HIRAGANA LETTER HI
30D2  ; [.193B.0020.0011.30D2] # KATAKANA LETTER HI
3073  ; [.193B.0020.000E.3072][.0000.013D.0002.3099] # HIRAGANA LETTER BI; QQCM
30D3  ; [.193B.0020.0011.30D2][.0000.013D.0002.3099] # KATAKANA LETTER BI; QQCM
3074  ; [.193B.0020.000E.3072][.0000.013E.0002.309A] # HIRAGANA LETTER PI; QQCM
30D4  ; [.193B.0020.0011.30D2][.0000.013E.0002.309A] # KATAKANA LETTER PI; QQCM
3075  ; [.193C.0020.000E.3075] # HIRAGANA LETTER HU
30D5  ; [.193C.0020.0011.30D5] # KATAKANA LETTER HU
3076  ; [.193C.0020.000E.3075][.0000.013D.0002.3099] # HIRAGANA LETTER BU; QQCM
30D6  ; [.193C.0020.0011.30D5][.0000.013D.0002.3099] # KATAKANA LETTER BU; QQCM
3077  ; [.193C.0020.000E.3075][.0000.013E.0002.309A] # HIRAGANA LETTER PU; QQCM
30D7  ; [.193C.0020.0011.30D5][.0000.013E.0002.309A] # KATAKANA LETTER PU; QQCM
3078  ; [.193D.0020.000E.3078] # HIRAGANA LETTER HE
30D8  ; [.193D.0020.0011.30D8] # KATAKANA LETTER HE
3079  ; [.193D.0020.000E.3078][.0000.013D.0002.3099] # HIRAGANA LETTER BE; QQCM
30D9  ; [.193D.0020.0011.30D8][.0000.013D.0002.3099] # KATAKANA LETTER BE; QQCM
307A  ; [.193D.0020.000E.3078][.0000.013E.0002.309A] # HIRAGANA LETTER PE; QQCM
30DA  ; [.193D.0020.0011.30D8][.0000.013E.0002.309A] # KATAKANA LETTER PE; QQCM
307B  ; [.193E.0020.000E.307B] # HIRAGANA LETTER HO
30DB  ; [.193E.0020.0011.30DB] # KATAKANA LETTER HO
307C  ; [.193E.0020.000E.307B][.0000.013D.0002.3099] # HIRAGANA LETTER BO; QQCM
30DC  ; [.193E.0020.0011.30DB][.0000.013D.0002.3099] # KATAKANA LETTER BO; QQCM
307D  ; [.193E.0020.000E.307B][.0000.013E.0002.309A] # HIRAGANA LETTER PO; QQCM
30DD  ; [.193E.0020.0011.30DB][.0000.013E.0002.309A] # KATAKANA LETTER PO; QQCM
307E  ; [.193F.0020.000E.307E] # HIRAGANA LETTER MA
30DE  ; [.193F.0020.0011.30DE] # KATAKANA LETTER MA
307F  ; [.1940.0020.000E.307F] # HIRAGANA LETTER MI
30DF  ; [.1940.0020.0011.30DF] # KATAKANA LETTER MI
3080  ; [.1941.0020.000E.3080] # HIRAGANA LETTER MU
30E0  ; [.1941.0020.0011.30E0] # KATAKANA LETTER MU
3081  ; [.1942.0020.000E.3081] # HIRAGANA LETTER ME
30E1  ; [.1942.0020.0011.30E1] # KATAKANA LETTER ME
3082  ; [.1943.0020.000E.3082] # HIRAGANA LETTER MO
30E2  ; [.1943.0020.0011.30E2] # KATAKANA LETTER MO
3083  ; [.1944.0020.000D.3083] # HIRAGANA LETTER SMALL YA
3084  ; [.1944.0020.000E.3084] # HIRAGANA LETTER YA
30E3  ; [.1944.0020.000F.30E3] # KATAKANA LETTER SMALL YA
30E4  ; [.1944.0020.0011.30E4] # KATAKANA LETTER YA
3085  ; [.1945.0020.000D.3085] # HIRAGANA LETTER SMALL YU
3086  ; [.1945.0020.000E.3086] # HIRAGANA LETTER YU
30E5  ; [.1945.0020.000F.30E5] # KATAKANA LETTER SMALL YU
30E6  ; [.1945.0020.0011.30E6] # KATAKANA LETTER YU
3087  ; [.1946.0020.000D.3087] # HIRAGANA LETTER SMALL YO
3088  ; [.1946.0020.000E.3088] # HIRAGANA LETTER YO
30E7  ; [.1946.0020.000F.30E7] # KATAKANA LETTER SMALL YO
30E8  ; [.1946.0020.0011.30E8] # KATAKANA LETTER YO
3089  ; [.1947.0020.000E.3089] # HIRAGANA LETTER RA
30E9  ; [.1947.0020.0011.30E9] # KATAKANA LETTER RA
308A  ; [.1948.0020.000E.308A] # HIRAGANA LETTER RI
30EA  ; [.1948.0020.0011.30EA] # KATAKANA LETTER RI
308B  ; [.1949.0020.000E.308B] # HIRAGANA LETTER RU
30EB  ; [.1949.0020.0011.30EB] # KATAKANA LETTER RU
308C  ; [.194A.0020.000E.308C] # HIRAGANA LETTER RE
30EC  ; [.194A.0020.0011.30EC] # KATAKANA LETTER RE
308D  ; [.194B.0020.000E.308D] # HIRAGANA LETTER RO
30ED  ; [.194B.0020.0011.30ED] # KATAKANA LETTER RO
308E  ; [.194C.0020.000D.308E] # HIRAGANA LETTER SMALL WA
308F  ; [.194C.0020.000E.308F] # HIRAGANA LETTER WA
30EE  ; [.194C.0020.000F.30EE] # KATAKANA LETTER SMALL WA
30EF  ; [.194C.0020.0011.30EF] # KATAKANA LETTER WA
30F7  ; [.194C.0020.0011.30EF][.0000.013D.0002.3099] # KATAKANA LETTER VA; QQCM
3090  ; [.194D.0020.000E.3090] # HIRAGANA LETTER WI
30F0  ; [.194D.0020.0011.30F0] # KATAKANA LETTER WI
30F8  ; [.194D.0020.0011.30F0][.0000.013D.0002.3099] # KATAKANA LETTER VI; QQCM
3091  ; [.194E.0020.000E.3091] # HIRAGANA LETTER WE
30F1  ; [.194E.0020.0011.30F1] # KATAKANA LETTER WE
30F9  ; [.194E.0020.0011.30F1][.0000.013D.0002.3099] # KATAKANA LETTER VE; QQCM
3092  ; [.194F.0020.000E.3092] # HIRAGANA LETTER WO
30F2  ; [.194F.0020.0011.30F2] # KATAKANA LETTER WO
30FA  ; [.194F.0020.0011.30F2][.0000.013D.0002.3099] # KATAKANA LETTER VO; QQCM
3093  ; [.1950.0020.000E.3093] # HIRAGANA LETTER N
30F3  ; [.1950.0020.0011.30F3] # KATAKANA LETTER N
                                                                                                                                                                                                                                                                                                                                                                                                                          usr/share/perl/5.20.2/Unicode/UCD.pm                                                                0100644 0000000 0000000 00000426003 12744441327 015222  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package Unicode::UCD;

use strict;
use warnings;
no warnings 'surrogate';    # surrogates can be inputs to this
use charnames ();

our $VERSION = '0.58';

require Exporter;

our @ISA = qw(Exporter);

our @EXPORT_OK = qw(charinfo
		    charblock charscript
		    charblocks charscripts
		    charinrange
		    general_categories bidi_types
		    compexcl
		    casefold all_casefolds casespec
		    namedseq
                    num
                    prop_aliases
                    prop_value_aliases
                    prop_invlist
                    prop_invmap
                    search_invlist
                    MAX_CP
                );

use Carp;

sub IS_ASCII_PLATFORM { ord("A") == 65 }

=head1 NAME

Unicode::UCD - Unicode character database

=head1 SYNOPSIS

    use Unicode::UCD 'charinfo';
    my $charinfo   = charinfo($codepoint);

    use Unicode::UCD 'casefold';
    my $casefold = casefold(0xFB00);

    use Unicode::UCD 'all_casefolds';
    my $all_casefolds_ref = all_casefolds();

    use Unicode::UCD 'casespec';
    my $casespec = casespec(0xFB00);

    use Unicode::UCD 'charblock';
    my $charblock  = charblock($codepoint);

    use Unicode::UCD 'charscript';
    my $charscript = charscript($codepoint);

    use Unicode::UCD 'charblocks';
    my $charblocks = charblocks();

    use Unicode::UCD 'charscripts';
    my $charscripts = charscripts();

    use Unicode::UCD qw(charscript charinrange);
    my $range = charscript($script);
    print "looks like $script\n" if charinrange($range, $codepoint);

    use Unicode::UCD qw(general_categories bidi_types);
    my $categories = general_categories();
    my $types = bidi_types();

    use Unicode::UCD 'prop_aliases';
    my @space_names = prop_aliases("space");

    use Unicode::UCD 'prop_value_aliases';
    my @gc_punct_names = prop_value_aliases("Gc", "Punct");

    use Unicode::UCD 'prop_invlist';
    my @puncts = prop_invlist("gc=punctuation");

    use Unicode::UCD 'prop_invmap';
    my ($list_ref, $map_ref, $format, $missing)
                                      = prop_invmap("General Category");

    use Unicode::UCD 'search_invlist';
    my $index = search_invlist(\@invlist, $code_point);

    use Unicode::UCD 'compexcl';
    my $compexcl = compexcl($codepoint);

    use Unicode::UCD 'namedseq';
    my $namedseq = namedseq($named_sequence_name);

    my $unicode_version = Unicode::UCD::UnicodeVersion();

    my $convert_to_numeric =
              Unicode::UCD::num("\N{RUMI DIGIT ONE}\N{RUMI DIGIT TWO}");

=head1 DESCRIPTION

The Unicode::UCD module offers a series of functions that
provide a simple interface to the Unicode
Character Database.

=head2 code point argument

Some of the functions are called with a I<code point argument>, which is either
a decimal or a hexadecimal scalar designating a code point in the platform's
native character set (extended to Unicode), or C<U+> followed by hexadecimals
designating a Unicode code point.  A leading 0 will force a hexadecimal
interpretation, as will a hexadecimal digit that isn't a decimal digit.

Examples:

    223     # Decimal 223 in native character set
    0223    # Hexadecimal 223, native (= 547 decimal)
    0xDF    # Hexadecimal DF, native (= 223 decimal
    U+DF    # Hexadecimal DF, in Unicode's character set
                              (= LATIN SMALL LETTER SHARP S)

Note that the largest code point in Unicode is U+10FFFF.

=cut

my $BLOCKSFH;
my $VERSIONFH;
my $CASEFOLDFH;
my $CASESPECFH;
my $NAMEDSEQFH;
my $v_unicode_version;  # v-string.

sub openunicode {
    my ($rfh, @path) = @_;
    my $f;
    unless (defined $$rfh) {
	for my $d (@INC) {
	    use File::Spec;
	    $f = File::Spec->catfile($d, "unicore", @path);
	    last if open($$rfh, $f);
	    undef $f;
	}
	croak __PACKAGE__, ": failed to find ",
              File::Spec->catfile(@path), " in @INC"
	    unless defined $f;
    }
    return $f;
}

sub _dclone ($) {   # Use Storable::dclone if available; otherwise emulate it.

    use if defined &DynaLoader::boot_DynaLoader, Storable => qw(dclone);

    return dclone(shift) if defined &dclone;

    my $arg = shift;
    my $type = ref $arg;
    return $arg unless $type;   # No deep cloning needed for scalars

    if ($type eq 'ARRAY') {
        my @return;
        foreach my $element (@$arg) {
            push @return, &_dclone($element);
        }
        return \@return;
    }
    elsif ($type eq 'HASH') {
        my %return;
        foreach my $key (keys %$arg) {
            $return{$key} = &_dclone($arg->{$key});
        }
        return \%return;
    }
    else {
        croak "_dclone can't handle " . $type;
    }
}

=head2 B<charinfo()>

    use Unicode::UCD 'charinfo';

    my $charinfo = charinfo(0x41);

This returns information about the input L</code point argument>
as a reference to a hash of fields as defined by the Unicode
standard.  If the L</code point argument> is not assigned in the standard
(i.e., has the general category C<Cn> meaning C<Unassigned>)
or is a non-character (meaning it is guaranteed to never be assigned in
the standard),
C<undef> is returned.

Fields that aren't applicable to the particular code point argument exist in the
returned hash, and are empty. 

The keys in the hash with the meanings of their values are:

=over

=item B<code>

the input native L</code point argument> expressed in hexadecimal, with
leading zeros
added if necessary to make it contain at least four hexdigits

=item B<name>

name of I<code>, all IN UPPER CASE.
Some control-type code points do not have names.
This field will be empty for C<Surrogate> and C<Private Use> code points,
and for the others without a name,
it will contain a description enclosed in angle brackets, like
C<E<lt>controlE<gt>>.


=item B<category>

The short name of the general category of I<code>.
This will match one of the keys in the hash returned by L</general_categories()>.

The L</prop_value_aliases()> function can be used to get all the synonyms
of the category name.

=item B<combining>

the combining class number for I<code> used in the Canonical Ordering Algorithm.
For Unicode 5.1, this is described in Section 3.11 C<Canonical Ordering Behavior>
available at
L<http://www.unicode.org/versions/Unicode5.1.0/>

The L</prop_value_aliases()> function can be used to get all the synonyms
of the combining class number.

=item B<bidi>

bidirectional type of I<code>.
This will match one of the keys in the hash returned by L</bidi_types()>.

The L</prop_value_aliases()> function can be used to get all the synonyms
of the bidi type name.

=item B<decomposition>

is empty if I<code> has no decomposition; or is one or more codes
(separated by spaces) that, taken in order, represent a decomposition for
I<code>.  Each has at least four hexdigits.
The codes may be preceded by a word enclosed in angle brackets, then a space,
like C<E<lt>compatE<gt> >, giving the type of decomposition

This decomposition may be an intermediate one whose components are also
decomposable.  Use L<Unicode::Normalize> to get the final decomposition.

=item B<decimal>

if I<code> represents a decimal digit this is its integer numeric value

=item B<digit>

if I<code> represents some other digit-like number, this is its integer
numeric value

=item B<numeric>

if I<code> represents a whole or rational number, this is its numeric value.
Rational values are expressed as a string like C<1/4>.

=item B<mirrored>

C<Y> or C<N> designating if I<code> is mirrored in bidirectional text

=item B<unicode10>

name of I<code> in the Unicode 1.0 standard if one
existed for this code point and is different from the current name

=item B<comment>

As of Unicode 6.0, this is always empty.

=item B<upper>

is empty if there is no single code point uppercase mapping for I<code>
(its uppercase mapping is itself);
otherwise it is that mapping expressed as at least four hexdigits.
(L</casespec()> should be used in addition to B<charinfo()>
for case mappings when the calling program can cope with multiple code point
mappings.)

=item B<lower>

is empty if there is no single code point lowercase mapping for I<code>
(its lowercase mapping is itself);
otherwise it is that mapping expressed as at least four hexdigits.
(L</casespec()> should be used in addition to B<charinfo()>
for case mappings when the calling program can cope with multiple code point
mappings.)

=item B<title>

is empty if there is no single code point titlecase mapping for I<code>
(its titlecase mapping is itself);
otherwise it is that mapping expressed as at least four hexdigits.
(L</casespec()> should be used in addition to B<charinfo()>
for case mappings when the calling program can cope with multiple code point
mappings.)

=item B<block>

the block I<code> belongs to (used in C<\p{Blk=...}>).
See L</Blocks versus Scripts>.


=item B<script>

the script I<code> belongs to.
See L</Blocks versus Scripts>.

=back

Note that you cannot do (de)composition and casing based solely on the
I<decomposition>, I<combining>, I<lower>, I<upper>, and I<title> fields;
you will need also the L</compexcl()>, and L</casespec()> functions.

=cut

# NB: This function is nearly duplicated in charnames.pm
sub _getcode {
    my $arg = shift;

    if ($arg =~ /^[1-9]\d*$/) {
	return $arg;
    }
    elsif ($arg =~ /^(?:0[xX])?([[:xdigit:]]+)$/) {
	return CORE::hex($1);
    }
    elsif ($arg =~ /^[Uu]\+([[:xdigit:]]+)$/) { # Is of form U+0000, means
                                                # wants the Unicode code
                                                # point, not the native one
        my $decimal = CORE::hex($1);
        return $decimal if IS_ASCII_PLATFORM;
        return utf8::unicode_to_native($decimal);
    }

    return;
}

# Populated by _num.  Converts real number back to input rational
my %real_to_rational;

# To store the contents of files found on disk.
my @BIDIS;
my @CATEGORIES;
my @DECOMPOSITIONS;
my @NUMERIC_TYPES;
my %SIMPLE_LOWER;
my %SIMPLE_TITLE;
my %SIMPLE_UPPER;
my %UNICODE_1_NAMES;
my %ISO_COMMENT;

sub charinfo {

    # This function has traditionally mimicked what is in UnicodeData.txt,
    # warts and all.  This is a re-write that avoids UnicodeData.txt so that
    # it can be removed to save disk space.  Instead, this assembles
    # information gotten by other methods that get data from various other
    # files.  It uses charnames to get the character name; and various
    # mktables tables.

    use feature 'unicode_strings';

    # Will fail if called under minitest
    use if defined &DynaLoader::boot_DynaLoader, "Unicode::Normalize" => qw(getCombinClass NFD);

    my $arg  = shift;
    my $code = _getcode($arg);
    croak __PACKAGE__, "::charinfo: unknown code '$arg'" unless defined $code;

    # Non-unicode implies undef.
    return if $code > 0x10FFFF;

    my %prop;
    my $char = chr($code);

    @CATEGORIES =_read_table("To/Gc.pl") unless @CATEGORIES;
    $prop{'category'} = _search(\@CATEGORIES, 0, $#CATEGORIES, $code)
                        // $utf8::SwashInfo{'ToGc'}{'missing'};

    return if $prop{'category'} eq 'Cn';    # Unassigned code points are undef

    $prop{'code'} = sprintf "%04X", $code;
    $prop{'name'} = ($char =~ /\p{Cntrl}/) ? '<control>'
                                           : (charnames::viacode($code) // "");

    $prop{'combining'} = getCombinClass($code);

    @BIDIS =_read_table("To/Bc.pl") unless @BIDIS;
    $prop{'bidi'} = _search(\@BIDIS, 0, $#BIDIS, $code)
                    // $utf8::SwashInfo{'ToBc'}{'missing'};

    # For most code points, we can just read in "unicore/Decomposition.pl", as
    # its contents are exactly what should be output.  But that file doesn't
    # contain the data for the Hangul syllable decompositions, which can be
    # algorithmically computed, and NFD() does that, so we call NFD() for
    # those.  We can't use NFD() for everything, as it does a complete
    # recursive decomposition, and what this function has always done is to
    # return what's in UnicodeData.txt which doesn't show that recursiveness.
    # Fortunately, the NFD() of the Hanguls doesn't have any recursion
    # issues.
    # Having no decomposition implies an empty field; otherwise, all but
    # "Canonical" imply a compatible decomposition, and the type is prefixed
    # to that, as it is in UnicodeData.txt
    UnicodeVersion() unless defined $v_unicode_version;
    if ($v_unicode_version ge v2.0.0 && $char =~ /\p{Block=Hangul_Syllables}/) {
        # The code points of the decomposition are output in standard Unicode
        # hex format, separated by blanks.
        $prop{'decomposition'} = join " ", map { sprintf("%04X", $_)}
                                           unpack "U*", NFD($char);
    }
    else {
        @DECOMPOSITIONS = _read_table("Decomposition.pl")
                          unless @DECOMPOSITIONS;
        $prop{'decomposition'} = _search(\@DECOMPOSITIONS, 0, $#DECOMPOSITIONS,
                                                                $code) // "";
    }

    # Can use num() to get the numeric values, if any.
    if (! defined (my $value = num($char))) {
        $prop{'decimal'} = $prop{'digit'} = $prop{'numeric'} = "";
    }
    else {
        if ($char =~ /\d/) {
            $prop{'decimal'} = $prop{'digit'} = $prop{'numeric'} = $value;
        }
        else {

            # For non-decimal-digits, we have to read in the Numeric type
            # to distinguish them.  It is not just a matter of integer vs.
            # rational, as some whole number values are not considered digits,
            # e.g., TAMIL NUMBER TEN.
            $prop{'decimal'} = "";

            @NUMERIC_TYPES =_read_table("To/Nt.pl") unless @NUMERIC_TYPES;
            if ((_search(\@NUMERIC_TYPES, 0, $#NUMERIC_TYPES, $code) // "")
                eq 'Digit')
            {
                $prop{'digit'} = $prop{'numeric'} = $value;
            }
            else {
                $prop{'digit'} = "";
                $prop{'numeric'} = $real_to_rational{$value} // $value;
            }
        }
    }

    $prop{'mirrored'} = ($char =~ /\p{Bidi_Mirrored}/) ? 'Y' : 'N';

    %UNICODE_1_NAMES =_read_table("To/Na1.pl", "use_hash") unless %UNICODE_1_NAMES;
    $prop{'unicode10'} = $UNICODE_1_NAMES{$code} // "";

    UnicodeVersion() unless defined $v_unicode_version;
    if ($v_unicode_version ge v6.0.0) {
        $prop{'comment'} = "";
    }
    else {
        %ISO_COMMENT = _read_table("To/Isc.pl", "use_hash") unless %ISO_COMMENT;
        $prop{'comment'} = (defined $ISO_COMMENT{$code})
                           ? $ISO_COMMENT{$code}
                           : "";
    }

    %SIMPLE_UPPER = _read_table("To/Uc.pl", "use_hash") unless %SIMPLE_UPPER;
    $prop{'upper'} = (defined $SIMPLE_UPPER{$code})
                     ? sprintf("%04X", $SIMPLE_UPPER{$code})
                     : "";

    %SIMPLE_LOWER = _read_table("To/Lc.pl", "use_hash") unless %SIMPLE_LOWER;
    $prop{'lower'} = (defined $SIMPLE_LOWER{$code})
                     ? sprintf("%04X", $SIMPLE_LOWER{$code})
                     : "";

    %SIMPLE_TITLE = _read_table("To/Tc.pl", "use_hash") unless %SIMPLE_TITLE;
    $prop{'title'} = (defined $SIMPLE_TITLE{$code})
                     ? sprintf("%04X", $SIMPLE_TITLE{$code})
                     : "";

    $prop{block}  = charblock($code);
    $prop{script} = charscript($code);
    return \%prop;
}

sub _search { # Binary search in a [[lo,hi,prop],[...],...] table.
    my ($table, $lo, $hi, $code) = @_;

    return if $lo > $hi;

    my $mid = int(($lo+$hi) / 2);

    if ($table->[$mid]->[0] < $code) {
	if ($table->[$mid]->[1] >= $code) {
	    return $table->[$mid]->[2];
	} else {
	    _search($table, $mid + 1, $hi, $code);
	}
    } elsif ($table->[$mid]->[0] > $code) {
	_search($table, $lo, $mid - 1, $code);
    } else {
	return $table->[$mid]->[2];
    }
}

sub _read_table ($;$) {

    # Returns the contents of the mktables generated table file located at $1
    # in the form of either an array of arrays or a hash, depending on if the
    # optional second parameter is true (for hash return) or not.  In the case
    # of a hash return, each key is a code point, and its corresponding value
    # is what the table gives as the code point's corresponding value.  In the
    # case of an array return, each outer array denotes a range with [0] the
    # start point of that range; [1] the end point; and [2] the value that
    # every code point in the range has.  The hash return is useful for fast
    # lookup when the table contains only single code point ranges.  The array
    # return takes much less memory when there are large ranges.
    #
    # This function has the side effect of setting
    # $utf8::SwashInfo{$property}{'format'} to be the mktables format of the
    #                                       table; and
    # $utf8::SwashInfo{$property}{'missing'} to be the value for all entries
    #                                        not listed in the table.
    # where $property is the Unicode property name, preceded by 'To' for map
    # properties., e.g., 'ToSc'.
    #
    # Table entries look like one of:
    # 0000	0040	Common	# [65]
    # 00AA		Latin

    my $table = shift;
    my $return_hash = shift;
    $return_hash = 0 unless defined $return_hash;
    my @return;
    my %return;
    local $_;
    my $list = do "unicore/$table";

    # Look up if this property requires adjustments, which we do below if it
    # does.
    require "unicore/Heavy.pl";
    my $property = $table =~ s/\.pl//r;
    $property = $utf8::file_to_swash_name{$property};
    my $to_adjust = defined $property
                    && $utf8::SwashInfo{$property}{'format'} =~ / ^ a /x;

    for (split /^/m, $list) {
        my ($start, $end, $value) = / ^ (.+?) \t (.*?) \t (.+?)
                                        \s* ( \# .* )?  # Optional comment
                                        $ /x;
        my $decimal_start = hex $start;
        my $decimal_end = ($end eq "") ? $decimal_start : hex $end;
        $value = hex $value if $to_adjust
                               && $utf8::SwashInfo{$property}{'format'} eq 'ax';
        if ($return_hash) {
            foreach my $i ($decimal_start .. $decimal_end) {
                $return{$i} = ($to_adjust)
                              ? $value + $i - $decimal_start
                              : $value;
            }
        }
        elsif (! $to_adjust
               && @return
               && $return[-1][1] == $decimal_start - 1
               && $return[-1][2] eq $value)
        {
            # If this is merely extending the previous range, do just that.
            $return[-1]->[1] = $decimal_end;
        }
        else {
            push @return, [ $decimal_start, $decimal_end, $value ];
        }
    }
    return ($return_hash) ? %return : @return;
}

sub charinrange {
    my ($range, $arg) = @_;
    my $code = _getcode($arg);
    croak __PACKAGE__, "::charinrange: unknown code '$arg'"
	unless defined $code;
    _search($range, 0, $#$range, $code);
}

=head2 B<charblock()>

    use Unicode::UCD 'charblock';

    my $charblock = charblock(0x41);
    my $charblock = charblock(1234);
    my $charblock = charblock(0x263a);
    my $charblock = charblock("U+263a");

    my $range     = charblock('Armenian');

With a L</code point argument> C<charblock()> returns the I<block> the code point
belongs to, e.g.  C<Basic Latin>.  The old-style block name is returned (see
L</Old-style versus new-style block names>).
If the code point is unassigned, this returns the block it would belong to if
it were assigned.  (If the Unicode version being used is so early as to not
have blocks, all code points are considered to be in C<No_Block>.)

See also L</Blocks versus Scripts>.

If supplied with an argument that can't be a code point, C<charblock()> tries to
do the opposite and interpret the argument as an old-style block name.  On an
ASCII platform, the return value is a I<range set> with one range: an
anonymous list with a single element that consists of another anonymous list
whose first element is the first code point in the block, and whose second
element is the final code point in the block.  On an EBCDIC
platform, the first two Unicode blocks are not contiguous.  Their range sets
are lists containing I<start-of-range>, I<end-of-range> code point pairs.  You
can test whether a code point is in a range set using the L</charinrange()>
function.  (To be precise, each I<range set> contains a third array element,
after the range boundary ones: the old_style block name.)

If the argument to C<charblock()> is not a known block, C<undef> is
returned.

=cut

my @BLOCKS;
my %BLOCKS;

sub _charblocks {

    # Can't read from the mktables table because it loses the hyphens in the
    # original.
    unless (@BLOCKS) {
        UnicodeVersion() unless defined $v_unicode_version;
        if ($v_unicode_version lt v2.0.0) {
            my $subrange = [ 0, 0x10FFFF, 'No_Block' ];
            push @BLOCKS, $subrange;
            push @{$BLOCKS{'No_Block'}}, $subrange;
        }
        elsif (openunicode(\$BLOCKSFH, "Blocks.txt")) {
	    local $_;
	    local $/ = "\n";
	    while (<$BLOCKSFH>) {
		if (/^([0-9A-F]+)\.\.([0-9A-F]+);\s+(.+)/) {
		    my ($lo, $hi) = (hex($1), hex($2));
		    my $subrange = [ $lo, $hi, $3 ];
		    push @BLOCKS, $subrange;
		    push @{$BLOCKS{$3}}, $subrange;
		}
	    }
	    close($BLOCKSFH);
            if (! IS_ASCII_PLATFORM) {
                # The first two blocks, through 0xFF, are wrong on EBCDIC
                # platforms.

                my @new_blocks = _read_table("To/Blk.pl");

                # Get rid of the first two ranges in the Unicode version, and
                # replace them with the ones computed by mktables.
                shift @BLOCKS;
                shift @BLOCKS;
                delete $BLOCKS{'Basic Latin'};
                delete $BLOCKS{'Latin-1 Supplement'};

                # But there are multiple entries in the computed versions, and
                # we change their names to (which we know) to be the old-style
                # ones.
                for my $i (0.. @new_blocks - 1) {
                    if ($new_blocks[$i][2] =~ s/Basic_Latin/Basic Latin/
                        or $new_blocks[$i][2] =~
                                    s/Latin_1_Supplement/Latin-1 Supplement/)
                    {
                        push @{$BLOCKS{$new_blocks[$i][2]}}, $new_blocks[$i];
                    }
                    else {
                        splice @new_blocks, $i;
                        last;
                    }
                }
                unshift @BLOCKS, @new_blocks;
            }
	}
    }
}

sub charblock {
    my $arg = shift;

    _charblocks() unless @BLOCKS;

    my $code = _getcode($arg);

    if (defined $code) {
	my $result = _search(\@BLOCKS, 0, $#BLOCKS, $code);
        return $result if defined $result;
        return 'No_Block';
    }
    elsif (exists $BLOCKS{$arg}) {
        return _dclone $BLOCKS{$arg};
    }
}

=head2 B<charscript()>

    use Unicode::UCD 'charscript';

    my $charscript = charscript(0x41);
    my $charscript = charscript(1234);
    my $charscript = charscript("U+263a");

    my $range      = charscript('Thai');

With a L</code point argument>, C<charscript()> returns the I<script> the
code point belongs to, e.g., C<Latin>, C<Greek>, C<Han>.
If the code point is unassigned or the Unicode version being used is so early
that it doesn't have scripts, this function returns C<"Unknown">.

If supplied with an argument that can't be a code point, charscript() tries
to do the opposite and interpret the argument as a script name. The
return value is a I<range set>: an anonymous list of lists that contain
I<start-of-range>, I<end-of-range> code point pairs. You can test whether a
code point is in a range set using the L</charinrange()> function.
(To be precise, each I<range set> contains a third array element,
after the range boundary ones: the script name.)

If the C<charscript()> argument is not a known script, C<undef> is returned.

See also L</Blocks versus Scripts>.

=cut

my @SCRIPTS;
my %SCRIPTS;

sub _charscripts {
    unless (@SCRIPTS) {
        UnicodeVersion() unless defined $v_unicode_version;
        if ($v_unicode_version lt v3.1.0) {
            push @SCRIPTS, [ 0, 0x10FFFF, 'Unknown' ];
        }
        else {
            @SCRIPTS =_read_table("To/Sc.pl");
        }
    }
    foreach my $entry (@SCRIPTS) {
        $entry->[2] =~ s/(_\w)/\L$1/g;  # Preserve old-style casing
        push @{$SCRIPTS{$entry->[2]}}, $entry;
    }
}

sub charscript {
    my $arg = shift;

    _charscripts() unless @SCRIPTS;

    my $code = _getcode($arg);

    if (defined $code) {
	my $result = _search(\@SCRIPTS, 0, $#SCRIPTS, $code);
        return $result if defined $result;
        return $utf8::SwashInfo{'ToSc'}{'missing'};
    } elsif (exists $SCRIPTS{$arg}) {
        return _dclone $SCRIPTS{$arg};
    }

    return;
}

=head2 B<charblocks()>

    use Unicode::UCD 'charblocks';

    my $charblocks = charblocks();

C<charblocks()> returns a reference to a hash with the known block names
as the keys, and the code point ranges (see L</charblock()>) as the values.

The names are in the old-style (see L</Old-style versus new-style block
names>).

L<prop_invmap("block")|/prop_invmap()> can be used to get this same data in a
different type of data structure.

See also L</Blocks versus Scripts>.

=cut

sub charblocks {
    _charblocks() unless %BLOCKS;
    return _dclone \%BLOCKS;
}

=head2 B<charscripts()>

    use Unicode::UCD 'charscripts';

    my $charscripts = charscripts();

C<charscripts()> returns a reference to a hash with the known script
names as the keys, and the code point ranges (see L</charscript()>) as
the values.

L<prop_invmap("script")|/prop_invmap()> can be used to get this same data in a
different type of data structure.

See also L</Blocks versus Scripts>.

=cut

sub charscripts {
    _charscripts() unless %SCRIPTS;
    return _dclone \%SCRIPTS;
}

=head2 B<charinrange()>

In addition to using the C<\p{Blk=...}> and C<\P{Blk=...}> constructs, you
can also test whether a code point is in the I<range> as returned by
L</charblock()> and L</charscript()> or as the values of the hash returned
by L</charblocks()> and L</charscripts()> by using C<charinrange()>:

    use Unicode::UCD qw(charscript charinrange);

    $range = charscript('Hiragana');
    print "looks like hiragana\n" if charinrange($range, $codepoint);

=cut

my %GENERAL_CATEGORIES =
 (
    'L'  =>         'Letter',
    'LC' =>         'CasedLetter',
    'Lu' =>         'UppercaseLetter',
    'Ll' =>         'LowercaseLetter',
    'Lt' =>         'TitlecaseLetter',
    'Lm' =>         'ModifierLetter',
    'Lo' =>         'OtherLetter',
    'M'  =>         'Mark',
    'Mn' =>         'NonspacingMark',
    'Mc' =>         'SpacingMark',
    'Me' =>         'EnclosingMark',
    'N'  =>         'Number',
    'Nd' =>         'DecimalNumber',
    'Nl' =>         'LetterNumber',
    'No' =>         'OtherNumber',
    'P'  =>         'Punctuation',
    'Pc' =>         'ConnectorPunctuation',
    'Pd' =>         'DashPunctuation',
    'Ps' =>         'OpenPunctuation',
    'Pe' =>         'ClosePunctuation',
    'Pi' =>         'InitialPunctuation',
    'Pf' =>         'FinalPunctuation',
    'Po' =>         'OtherPunctuation',
    'S'  =>         'Symbol',
    'Sm' =>         'MathSymbol',
    'Sc' =>         'CurrencySymbol',
    'Sk' =>         'ModifierSymbol',
    'So' =>         'OtherSymbol',
    'Z'  =>         'Separator',
    'Zs' =>         'SpaceSeparator',
    'Zl' =>         'LineSeparator',
    'Zp' =>         'ParagraphSeparator',
    'C'  =>         'Other',
    'Cc' =>         'Control',
    'Cf' =>         'Format',
    'Cs' =>         'Surrogate',
    'Co' =>         'PrivateUse',
    'Cn' =>         'Unassigned',
 );

sub general_categories {
    return _dclone \%GENERAL_CATEGORIES;
}

=head2 B<general_categories()>

    use Unicode::UCD 'general_categories';

    my $categories = general_categories();

This returns a reference to a hash which has short
general category names (such as C<Lu>, C<Nd>, C<Zs>, C<S>) as keys and long
names (such as C<UppercaseLetter>, C<DecimalNumber>, C<SpaceSeparator>,
C<Symbol>) as values.  The hash is reversible in case you need to go
from the long names to the short names.  The general category is the
one returned from
L</charinfo()> under the C<category> key.

The L</prop_value_aliases()> function can be used to get all the synonyms of
the category name.

=cut

my %BIDI_TYPES =
 (
   'L'   => 'Left-to-Right',
   'LRE' => 'Left-to-Right Embedding',
   'LRO' => 'Left-to-Right Override',
   'R'   => 'Right-to-Left',
   'AL'  => 'Right-to-Left Arabic',
   'RLE' => 'Right-to-Left Embedding',
   'RLO' => 'Right-to-Left Override',
   'PDF' => 'Pop Directional Format',
   'EN'  => 'European Number',
   'ES'  => 'European Number Separator',
   'ET'  => 'European Number Terminator',
   'AN'  => 'Arabic Number',
   'CS'  => 'Common Number Separator',
   'NSM' => 'Non-Spacing Mark',
   'BN'  => 'Boundary Neutral',
   'B'   => 'Paragraph Separator',
   'S'   => 'Segment Separator',
   'WS'  => 'Whitespace',
   'ON'  => 'Other Neutrals',
 ); 

=head2 B<bidi_types()>

    use Unicode::UCD 'bidi_types';

    my $categories = bidi_types();

This returns a reference to a hash which has the short
bidi (bidirectional) type names (such as C<L>, C<R>) as keys and long
names (such as C<Left-to-Right>, C<Right-to-Left>) as values.  The
hash is reversible in case you need to go from the long names to the
short names.  The bidi type is the one returned from
L</charinfo()>
under the C<bidi> key.  For the exact meaning of the various bidi classes
the Unicode TR9 is recommended reading:
L<http://www.unicode.org/reports/tr9/>
(as of Unicode 5.0.0)

The L</prop_value_aliases()> function can be used to get all the synonyms of
the bidi type name.

=cut

sub bidi_types {
    return _dclone \%BIDI_TYPES;
}

=head2 B<compexcl()>

    use Unicode::UCD 'compexcl';

    my $compexcl = compexcl(0x09dc);

This routine returns C<undef> if the Unicode version being used is so early
that it doesn't have this property.

C<compexcl()> is included for backwards
compatibility, but as of Perl 5.12 and more modern Unicode versions, for
most purposes it is probably more convenient to use one of the following
instead:

    my $compexcl = chr(0x09dc) =~ /\p{Comp_Ex};
    my $compexcl = chr(0x09dc) =~ /\p{Full_Composition_Exclusion};

or even

    my $compexcl = chr(0x09dc) =~ /\p{CE};
    my $compexcl = chr(0x09dc) =~ /\p{Composition_Exclusion};

The first two forms return B<true> if the L</code point argument> should not
be produced by composition normalization.  For the final two forms to return
B<true>, it is additionally required that this fact not otherwise be
determinable from the Unicode data base.

This routine behaves identically to the final two forms.  That is,
it does not return B<true> if the code point has a decomposition
consisting of another single code point, nor if its decomposition starts
with a code point whose combining class is non-zero.  Code points that meet
either of these conditions should also not be produced by composition
normalization, which is probably why you should use the
C<Full_Composition_Exclusion> property instead, as shown above.

The routine returns B<false> otherwise.

=cut

sub compexcl {
    my $arg  = shift;
    my $code = _getcode($arg);
    croak __PACKAGE__, "::compexcl: unknown code '$arg'"
	unless defined $code;

    UnicodeVersion() unless defined $v_unicode_version;
    return if $v_unicode_version lt v3.0.0;

    no warnings "non_unicode";     # So works on non-Unicode code points
    return chr($code) =~ /\p{Composition_Exclusion}/;
}

=head2 B<casefold()>

    use Unicode::UCD 'casefold';

    my $casefold = casefold(0xDF);
    if (defined $casefold) {
        my @full_fold_hex = split / /, $casefold->{'full'};
        my $full_fold_string =
                    join "", map {chr(hex($_))} @full_fold_hex;
        my @turkic_fold_hex =
                        split / /, ($casefold->{'turkic'} ne "")
                                        ? $casefold->{'turkic'}
                                        : $casefold->{'full'};
        my $turkic_fold_string =
                        join "", map {chr(hex($_))} @turkic_fold_hex;
    }
    if (defined $casefold && $casefold->{'simple'} ne "") {
        my $simple_fold_hex = $casefold->{'simple'};
        my $simple_fold_string = chr(hex($simple_fold_hex));
    }

This returns the (almost) locale-independent case folding of the
character specified by the L</code point argument>.  (Starting in Perl v5.16,
the core function C<fc()> returns the C<full> mapping (described below)
faster than this does, and for entire strings.)

If there is no case folding for the input code point, C<undef> is returned.

If there is a case folding for that code point, a reference to a hash
with the following fields is returned:

=over

=item B<code>

the input native L</code point argument> expressed in hexadecimal, with
leading zeros
added if necessary to make it contain at least four hexdigits

=item B<full>

one or more codes (separated by spaces) that, taken in order, give the
code points for the case folding for I<code>.
Each has at least four hexdigits.

=item B<simple>

is empty, or is exactly one code with at least four hexdigits which can be used
as an alternative case folding when the calling program cannot cope with the
fold being a sequence of multiple code points.  If I<full> is just one code
point, then I<simple> equals I<full>.  If there is no single code point folding
defined for I<code>, then I<simple> is the empty string.  Otherwise, it is an
inferior, but still better-than-nothing alternative folding to I<full>.

=item B<mapping>

is the same as I<simple> if I<simple> is not empty, and it is the same as I<full>
otherwise.  It can be considered to be the simplest possible folding for
I<code>.  It is defined primarily for backwards compatibility.

=item B<status>

is C<C> (for C<common>) if the best possible fold is a single code point
(I<simple> equals I<full> equals I<mapping>).  It is C<S> if there are distinct
folds, I<simple> and I<full> (I<mapping> equals I<simple>).  And it is C<F> if
there is only a I<full> fold (I<mapping> equals I<full>; I<simple> is empty).
Note that this
describes the contents of I<mapping>.  It is defined primarily for backwards
compatibility.

For Unicode versions between 3.1 and 3.1.1 inclusive, I<status> can also be
C<I> which is the same as C<C> but is a special case for dotted uppercase I and
dotless lowercase i:

=over

=item Z<>B<*> If you use this C<I> mapping

the result is case-insensitive,
but dotless and dotted I's are not distinguished

=item Z<>B<*> If you exclude this C<I> mapping

the result is not fully case-insensitive, but
dotless and dotted I's are distinguished

=back

=item B<turkic>

contains any special folding for Turkic languages.  For versions of Unicode
starting with 3.2, this field is empty unless I<code> has a different folding
in Turkic languages, in which case it is one or more codes (separated by
spaces) that, taken in order, give the code points for the case folding for
I<code> in those languages.
Each code has at least four hexdigits.
Note that this folding does not maintain canonical equivalence without
additional processing.

For Unicode versions between 3.1 and 3.1.1 inclusive, this field is empty unless
there is a
special folding for Turkic languages, in which case I<status> is C<I>, and
I<mapping>, I<full>, I<simple>, and I<turkic> are all equal.  

=back

Programs that want complete generality and the best folding results should use
the folding contained in the I<full> field.  But note that the fold for some
code points will be a sequence of multiple code points.

Programs that can't cope with the fold mapping being multiple code points can
use the folding contained in the I<simple> field, with the loss of some
generality.  In Unicode 5.1, about 7% of the defined foldings have no single
code point folding.

The I<mapping> and I<status> fields are provided for backwards compatibility for
existing programs.  They contain the same values as in previous versions of
this function.

Locale is not completely independent.  The I<turkic> field contains results to
use when the locale is a Turkic language.

For more information about case mappings see
L<http://www.unicode.org/unicode/reports/tr21>

=cut

my %CASEFOLD;

sub _casefold {
    unless (%CASEFOLD) {   # Populate the hash
        my ($full_invlist_ref, $full_invmap_ref, undef, $default)
                                                = prop_invmap('Case_Folding');

        # Use the recipe given in the prop_invmap() pod to convert the
        # inversion map into the hash.
        for my $i (0 .. @$full_invlist_ref - 1 - 1) {
            next if $full_invmap_ref->[$i] == $default;
            my $adjust = -1;
            for my $j ($full_invlist_ref->[$i] .. $full_invlist_ref->[$i+1] -1) {
                $adjust++;
                if (! ref $full_invmap_ref->[$i]) {

                    # This is a single character mapping
                    $CASEFOLD{$j}{'status'} = 'C';
                    $CASEFOLD{$j}{'simple'}
                        = $CASEFOLD{$j}{'full'}
                        = $CASEFOLD{$j}{'mapping'}
                        = sprintf("%04X", $full_invmap_ref->[$i] + $adjust);
                    $CASEFOLD{$j}{'code'} = sprintf("%04X", $j);
                    $CASEFOLD{$j}{'turkic'} = "";
                }
                else {  # prop_invmap ensures that $adjust is 0 for a ref
                    $CASEFOLD{$j}{'status'} = 'F';
                    $CASEFOLD{$j}{'full'}
                    = $CASEFOLD{$j}{'mapping'}
                    = join " ", map { sprintf "%04X", $_ }
                                                    @{$full_invmap_ref->[$i]};
                    $CASEFOLD{$j}{'simple'} = "";
                    $CASEFOLD{$j}{'code'} = sprintf("%04X", $j);
                    $CASEFOLD{$j}{'turkic'} = "";
                }
            }
        }

        # We have filled in the full mappings above, assuming there were no
        # simple ones for the ones with multi-character maps.  Now, we find
        # and fix the cases where that assumption was false.
        (my ($simple_invlist_ref, $simple_invmap_ref, undef), $default)
                                        = prop_invmap('Simple_Case_Folding');
        for my $i (0 .. @$simple_invlist_ref - 1 - 1) {
            next if $simple_invmap_ref->[$i] == $default;
            my $adjust = -1;
            for my $j ($simple_invlist_ref->[$i]
                       .. $simple_invlist_ref->[$i+1] -1)
            {
                $adjust++;
                next if $CASEFOLD{$j}{'status'} eq 'C';
                $CASEFOLD{$j}{'status'} = 'S';
                $CASEFOLD{$j}{'simple'}
                    = $CASEFOLD{$j}{'mapping'}
                    = sprintf("%04X", $simple_invmap_ref->[$i] + $adjust);
                $CASEFOLD{$j}{'code'} = sprintf("%04X", $j);
                $CASEFOLD{$j}{'turkic'} = "";
            }
        }

        # We hard-code in the turkish rules
        UnicodeVersion() unless defined $v_unicode_version;
        if ($v_unicode_version ge v3.2.0) {

            # These two code points should already have regular entries, so
            # just fill in the turkish fields
            $CASEFOLD{ord('I')}{'turkic'} = '0131';
            $CASEFOLD{0x130}{'turkic'} = sprintf "%04X", ord('i');
        }
        elsif ($v_unicode_version ge v3.1.0) {

            # These two code points don't have entries otherwise.
            $CASEFOLD{0x130}{'code'} = '0130';
            $CASEFOLD{0x131}{'code'} = '0131';
            $CASEFOLD{0x130}{'status'} = $CASEFOLD{0x131}{'status'} = 'I';
            $CASEFOLD{0x130}{'turkic'}
                = $CASEFOLD{0x130}{'mapping'}
                = $CASEFOLD{0x130}{'full'}
                = $CASEFOLD{0x130}{'simple'}
                = $CASEFOLD{0x131}{'turkic'}
                = $CASEFOLD{0x131}{'mapping'}
                = $CASEFOLD{0x131}{'full'}
                = $CASEFOLD{0x131}{'simple'}
                = sprintf "%04X", ord('i');
        }
    }
}

sub casefold {
    my $arg  = shift;
    my $code = _getcode($arg);
    croak __PACKAGE__, "::casefold: unknown code '$arg'"
	unless defined $code;

    _casefold() unless %CASEFOLD;

    return $CASEFOLD{$code};
}

=head2 B<all_casefolds()>


    use Unicode::UCD 'all_casefolds';

    my $all_folds_ref = all_casefolds();
    foreach my $char_with_casefold (sort { $a <=> $b }
                                    keys %$all_folds_ref)
    {
        printf "%04X:", $char_with_casefold;
        my $casefold = $all_folds_ref->{$char_with_casefold};

        # Get folds for $char_with_casefold

        my @full_fold_hex = split / /, $casefold->{'full'};
        my $full_fold_string =
                    join "", map {chr(hex($_))} @full_fold_hex;
        print " full=", join " ", @full_fold_hex;
        my @turkic_fold_hex =
                        split / /, ($casefold->{'turkic'} ne "")
                                        ? $casefold->{'turkic'}
                                        : $casefold->{'full'};
        my $turkic_fold_string =
                        join "", map {chr(hex($_))} @turkic_fold_hex;
        print "; turkic=", join " ", @turkic_fold_hex;
        if (defined $casefold && $casefold->{'simple'} ne "") {
            my $simple_fold_hex = $casefold->{'simple'};
            my $simple_fold_string = chr(hex($simple_fold_hex));
            print "; simple=$simple_fold_hex";
        }
        print "\n";
    }

This returns all the case foldings in the current version of Unicode in the
form of a reference to a hash.  Each key to the hash is the decimal
representation of a Unicode character that has a casefold to other than
itself.  The casefold of a semi-colon is itself, so it isn't in the hash;
likewise for a lowercase "a", but there is an entry for a capital "A".  The
hash value for each key is another hash, identical to what is returned by
L</casefold()> if called with that code point as its argument.  So the value
C<< all_casefolds()->{ord("A")}' >> is equivalent to C<casefold(ord("A"))>;

=cut

sub all_casefolds () {
    _casefold() unless %CASEFOLD;
    return _dclone \%CASEFOLD;
}

=head2 B<casespec()>

    use Unicode::UCD 'casespec';

    my $casespec = casespec(0xFB00);

This returns the potentially locale-dependent case mappings of the L</code point
argument>.  The mappings may be longer than a single code point (which the basic
Unicode case mappings as returned by L</charinfo()> never are).

If there are no case mappings for the L</code point argument>, or if all three
possible mappings (I<lower>, I<title> and I<upper>) result in single code
points and are locale independent and unconditional, C<undef> is returned
(which means that the case mappings, if any, for the code point are those
returned by L</charinfo()>).

Otherwise, a reference to a hash giving the mappings (or a reference to a hash
of such hashes, explained below) is returned with the following keys and their
meanings:

The keys in the bottom layer hash with the meanings of their values are:

=over

=item B<code>

the input native L</code point argument> expressed in hexadecimal, with
leading zeros
added if necessary to make it contain at least four hexdigits

=item B<lower>

one or more codes (separated by spaces) that, taken in order, give the
code points for the lower case of I<code>.
Each has at least four hexdigits.

=item B<title>

one or more codes (separated by spaces) that, taken in order, give the
code points for the title case of I<code>.
Each has at least four hexdigits.

=item B<upper>

one or more codes (separated by spaces) that, taken in order, give the
code points for the upper case of I<code>.
Each has at least four hexdigits.

=item B<condition>

the conditions for the mappings to be valid.
If C<undef>, the mappings are always valid.
When defined, this field is a list of conditions,
all of which must be true for the mappings to be valid.
The list consists of one or more
I<locales> (see below)
and/or I<contexts> (explained in the next paragraph),
separated by spaces.
(Other than as used to separate elements, spaces are to be ignored.)
Case distinctions in the condition list are not significant.
Conditions preceded by "NON_" represent the negation of the condition.

A I<context> is one of those defined in the Unicode standard.
For Unicode 5.1, they are defined in Section 3.13 C<Default Case Operations>
available at
L<http://www.unicode.org/versions/Unicode5.1.0/>.
These are for context-sensitive casing.

=back

The hash described above is returned for locale-independent casing, where
at least one of the mappings has length longer than one.  If C<undef> is
returned, the code point may have mappings, but if so, all are length one,
and are returned by L</charinfo()>.
Note that when this function does return a value, it will be for the complete
set of mappings for a code point, even those whose length is one.

If there are additional casing rules that apply only in certain locales,
an additional key for each will be defined in the returned hash.  Each such key
will be its locale name, defined as a 2-letter ISO 3166 country code, possibly
followed by a "_" and a 2-letter ISO language code (possibly followed by a "_"
and a variant code).  You can find the lists of all possible locales, see
L<Locale::Country> and L<Locale::Language>.
(In Unicode 6.0, the only locales returned by this function
are C<lt>, C<tr>, and C<az>.)

Each locale key is a reference to a hash that has the form above, and gives
the casing rules for that particular locale, which take precedence over the
locale-independent ones when in that locale.

If the only casing for a code point is locale-dependent, then the returned
hash will not have any of the base keys, like C<code>, C<upper>, etc., but
will contain only locale keys.

For more information about case mappings see
L<http://www.unicode.org/unicode/reports/tr21/>

=cut

my %CASESPEC;

sub _casespec {
    unless (%CASESPEC) {
        UnicodeVersion() unless defined $v_unicode_version;
        if ($v_unicode_version lt v2.1.8) {
            %CASESPEC = {};
        }
	elsif (openunicode(\$CASESPECFH, "SpecialCasing.txt")) {
	    local $_;
	    local $/ = "\n";
	    while (<$CASESPECFH>) {
		if (/^([0-9A-F]+); ([0-9A-F]+(?: [0-9A-F]+)*)?; ([0-9A-F]+(?: [0-9A-F]+)*)?; ([0-9A-F]+(?: [0-9A-F]+)*)?; (\w+(?: \w+)*)?/) {

		    my ($hexcode, $lower, $title, $upper, $condition) =
			($1, $2, $3, $4, $5);
                    if (! IS_ASCII_PLATFORM) { # Remap entry to native
                        foreach my $var_ref (\$hexcode,
                                             \$lower,
                                             \$title,
                                             \$upper)
                        {
                            next unless defined $$var_ref;
                            $$var_ref = join " ",
                                        map { sprintf("%04X",
                                              utf8::unicode_to_native(hex $_)) }
                                        split " ", $$var_ref;
                        }
                    }

		    my $code = hex($hexcode);

                    # In 2.1.8, there were duplicate entries; ignore all but
                    # the first one -- there were no conditions in the file
                    # anyway.
		    if (exists $CASESPEC{$code} && $v_unicode_version ne v2.1.8)
                    {
			if (exists $CASESPEC{$code}->{code}) {
			    my ($oldlower,
				$oldtitle,
				$oldupper,
				$oldcondition) =
				    @{$CASESPEC{$code}}{qw(lower
							   title
							   upper
							   condition)};
			    if (defined $oldcondition) {
				my ($oldlocale) =
				($oldcondition =~ /^([a-z][a-z](?:_\S+)?)/);
				delete $CASESPEC{$code};
				$CASESPEC{$code}->{$oldlocale} =
				{ code      => $hexcode,
				  lower     => $oldlower,
				  title     => $oldtitle,
				  upper     => $oldupper,
				  condition => $oldcondition };
			    }
			}
			my ($locale) =
			    ($condition =~ /^([a-z][a-z](?:_\S+)?)/);
			$CASESPEC{$code}->{$locale} =
			{ code      => $hexcode,
			  lower     => $lower,
			  title     => $title,
			  upper     => $upper,
			  condition => $condition };
		    } else {
			$CASESPEC{$code} =
			{ code      => $hexcode,
			  lower     => $lower,
			  title     => $title,
			  upper     => $upper,
			  condition => $condition };
		    }
		}
	    }
	    close($CASESPECFH);
	}
    }
}

sub casespec {
    my $arg  = shift;
    my $code = _getcode($arg);
    croak __PACKAGE__, "::casespec: unknown code '$arg'"
	unless defined $code;

    _casespec() unless %CASESPEC;

    return ref $CASESPEC{$code} ? _dclone $CASESPEC{$code} : $CASESPEC{$code};
}

=head2 B<namedseq()>

    use Unicode::UCD 'namedseq';

    my $namedseq = namedseq("KATAKANA LETTER AINU P");
    my @namedseq = namedseq("KATAKANA LETTER AINU P");
    my %namedseq = namedseq();

If used with a single argument in a scalar context, returns the string
consisting of the code points of the named sequence, or C<undef> if no
named sequence by that name exists.  If used with a single argument in
a list context, it returns the list of the ordinals of the code points.

If used with no
arguments in a list context, it returns a hash with the names of all the
named sequences as the keys and their sequences as strings as
the values.  Otherwise, it returns C<undef> or an empty list depending
on the context.

This function only operates on officially approved (not provisional) named
sequences.

Note that as of Perl 5.14, C<\N{KATAKANA LETTER AINU P}> will insert the named
sequence into double-quoted strings, and C<charnames::string_vianame("KATAKANA
LETTER AINU P")> will return the same string this function does, but will also
operate on character names that aren't named sequences, without you having to
know which are which.  See L<charnames>.

=cut

my %NAMEDSEQ;

sub _namedseq {
    unless (%NAMEDSEQ) {
	if (openunicode(\$NAMEDSEQFH, "Name.pl")) {
	    local $_;
	    local $/ = "\n";
	    while (<$NAMEDSEQFH>) {
		if (/^ [0-9A-F]+ \  /x) {
                    chomp;
                    my ($sequence, $name) = split /\t/;
		    my @s = map { chr(hex($_)) } split(' ', $sequence);
		    $NAMEDSEQ{$name} = join("", @s);
		}
	    }
	    close($NAMEDSEQFH);
	}
    }
}

sub namedseq {

    # Use charnames::string_vianame() which now returns this information,
    # unless the caller wants the hash returned, in which case we read it in,
    # and thereafter use it instead of calling charnames, as it is faster.

    my $wantarray = wantarray();
    if (defined $wantarray) {
	if ($wantarray) {
	    if (@_ == 0) {
                _namedseq() unless %NAMEDSEQ;
		return %NAMEDSEQ;
	    } elsif (@_ == 1) {
		my $s;
                if (%NAMEDSEQ) {
                    $s = $NAMEDSEQ{ $_[0] };
                }
                else {
                    $s = charnames::string_vianame($_[0]);
                }
		return defined $s ? map { ord($_) } split('', $s) : ();
	    }
	} elsif (@_ == 1) {
            return $NAMEDSEQ{ $_[0] } if %NAMEDSEQ;
            return charnames::string_vianame($_[0]);
	}
    }
    return;
}

my %NUMERIC;

sub _numeric {
    my @numbers = _read_table("To/Nv.pl");
    foreach my $entry (@numbers) {
        my ($start, $end, $value) = @$entry;

        # If value contains a slash, convert to decimal, add a reverse hash
        # used by charinfo.
        if ((my @rational = split /\//, $value) == 2) {
            my $real = $rational[0] / $rational[1];
            $real_to_rational{$real} = $value;
            $value = $real;

            # Should only be single element, but just in case...
            for my $i ($start .. $end) {
                $NUMERIC{$i} = $value;
            }
        }
        else {
            # The values require adjusting, as is in 'a' format
            for my $i ($start .. $end) {
                $NUMERIC{$i} = $value + $i - $start;
            }
        }
    }

    # Decided unsafe to use these that aren't officially part of the Unicode
    # standard.
    #use Math::Trig;
    #my $pi = acos(-1.0);
    #$NUMERIC{0x03C0} = $pi;

    # Euler's constant, not to be confused with Euler's number
    #$NUMERIC{0x2107} = 0.57721566490153286060651209008240243104215933593992;

    # Euler's number
    #$NUMERIC{0x212F} = 2.7182818284590452353602874713526624977572;

    return;
}

=pod

=head2 B<num()>

    use Unicode::UCD 'num';

    my $val = num("123");
    my $one_quarter = num("\N{VULGAR FRACTION 1/4}");

C<num()> returns the numeric value of the input Unicode string; or C<undef> if it
doesn't think the entire string has a completely valid, safe numeric value.

If the string is just one character in length, the Unicode numeric value
is returned if it has one, or C<undef> otherwise.  Note that this need
not be a whole number.  C<num("\N{TIBETAN DIGIT HALF ZERO}")>, for
example returns -0.5.

=cut

#A few characters to which Unicode doesn't officially
#assign a numeric value are considered numeric by C<num>.
#These are:

# EULER CONSTANT             0.5772...  (this is NOT Euler's number)
# SCRIPT SMALL E             2.71828... (this IS Euler's number)
# GREEK SMALL LETTER PI      3.14159...

=pod

If the string is more than one character, C<undef> is returned unless
all its characters are decimal digits (that is, they would match C<\d+>),
from the same script.  For example if you have an ASCII '0' and a Bengali
'3', mixed together, they aren't considered a valid number, and C<undef>
is returned.  A further restriction is that the digits all have to be of
the same form.  A half-width digit mixed with a full-width one will
return C<undef>.  The Arabic script has two sets of digits;  C<num> will
return C<undef> unless all the digits in the string come from the same
set.

C<num> errs on the side of safety, and there may be valid strings of
decimal digits that it doesn't recognize.  Note that Unicode defines
a number of "digit" characters that aren't "decimal digit" characters.
"Decimal digits" have the property that they have a positional value, i.e.,
there is a units position, a 10's position, a 100's, etc, AND they are
arranged in Unicode in blocks of 10 contiguous code points.  The Chinese
digits, for example, are not in such a contiguous block, and so Unicode
doesn't view them as decimal digits, but merely digits, and so C<\d> will not
match them.  A single-character string containing one of these digits will
have its decimal value returned by C<num>, but any longer string containing
only these digits will return C<undef>.

Strings of multiple sub- and superscripts are not recognized as numbers.  You
can use either of the compatibility decompositions in Unicode::Normalize to
change these into digits, and then call C<num> on the result.

=cut

# To handle sub, superscripts, this could if called in list context,
# consider those, and return the <decomposition> type in the second
# array element.

sub num {
    my $string = $_[0];

    _numeric unless %NUMERIC;

    my $length = length($string);
    return $NUMERIC{ord($string)} if $length == 1;
    return if $string =~ /\D/;
    my $first_ord = ord(substr($string, 0, 1));
    my $value = $NUMERIC{$first_ord};

    # To be a valid decimal number, it should be in a block of 10 consecutive
    # characters, whose values are 0, 1, 2, ... 9.  Therefore this digit's
    # value is its offset in that block from the character that means zero.
    my $zero_ord = $first_ord - $value;

    # Unicode 6.0 instituted the rule that only digits in a consecutive
    # block of 10 would be considered decimal digits.  If this is an earlier
    # release, we verify that this first character is a member of such a
    # block.  That is, that the block of characters surrounding this one
    # consists of all \d characters whose numeric values are the expected
    # ones.
    UnicodeVersion() unless defined $v_unicode_version;
    if ($v_unicode_version lt v6.0.0) {
        for my $i (0 .. 9) {
            my $ord = $zero_ord + $i;
            return unless chr($ord) =~ /\d/;
            my $numeric = $NUMERIC{$ord};
            return unless defined $numeric;
            return unless $numeric == $i;
        }
    }

    for my $i (1 .. $length -1) {

        # Here we know either by verifying, or by fact of the first character
        # being a \d in Unicode 6.0 or later, that any character between the
        # character that means 0, and 9 positions above it must be \d, and
        # must have its value correspond to its offset from the zero.  Any
        # characters outside these 10 do not form a legal number for this
        # function.
        my $ord = ord(substr($string, $i, 1));
        my $digit = $ord - $zero_ord;
        return unless $digit >= 0 && $digit <= 9;
        $value = $value * 10 + $digit;
    }

    return $value;
}

=pod

=head2 B<prop_aliases()>

    use Unicode::UCD 'prop_aliases';

    my ($short_name, $full_name, @other_names) = prop_aliases("space");
    my $same_full_name = prop_aliases("Space");     # Scalar context
    my ($same_short_name) = prop_aliases("Space");  # gets 0th element
    print "The full name is $full_name\n";
    print "The short name is $short_name\n";
    print "The other aliases are: ", join(", ", @other_names), "\n";

    prints:
    The full name is White_Space
    The short name is WSpace
    The other aliases are: Space

Most Unicode properties have several synonymous names.  Typically, there is at
least a short name, convenient to type, and a long name that more fully
describes the property, and hence is more easily understood.

If you know one name for a Unicode property, you can use C<prop_aliases> to find
either the long name (when called in scalar context), or a list of all of the
names, somewhat ordered so that the short name is in the 0th element, the long
name in the next element, and any other synonyms are in the remaining
elements, in no particular order.

The long name is returned in a form nicely capitalized, suitable for printing.

The input parameter name is loosely matched, which means that white space,
hyphens, and underscores are ignored (except for the trailing underscore in
the old_form grandfathered-in C<"L_">, which is better written as C<"LC">, and
both of which mean C<General_Category=Cased Letter>).

If the name is unknown, C<undef> is returned (or an empty list in list
context).  Note that Perl typically recognizes property names in regular
expressions with an optional C<"Is_>" (with or without the underscore)
prefixed to them, such as C<\p{isgc=punct}>.  This function does not recognize
those in the input, returning C<undef>.  Nor are they included in the output
as possible synonyms.

C<prop_aliases> does know about the Perl extensions to Unicode properties,
such as C<Any> and C<XPosixAlpha>, and the single form equivalents to Unicode
properties such as C<XDigit>, C<Greek>, C<In_Greek>, and C<Is_Greek>.  The
final example demonstrates that the C<"Is_"> prefix is recognized for these
extensions; it is needed to resolve ambiguities.  For example,
C<prop_aliases('lc')> returns the list C<(lc, Lowercase_Mapping)>, but
C<prop_aliases('islc')> returns C<(Is_LC, Cased_Letter)>.  This is
because C<islc> is a Perl extension which is short for
C<General_Category=Cased Letter>.  The lists returned for the Perl extensions
will not include the C<"Is_"> prefix (whether or not the input had it) unless
needed to resolve ambiguities, as shown in the C<"islc"> example, where the
returned list had one element containing C<"Is_">, and the other without.

It is also possible for the reverse to happen:  C<prop_aliases('isc')> returns
the list C<(isc, ISO_Comment)>; whereas C<prop_aliases('c')> returns
C<(C, Other)> (the latter being a Perl extension meaning
C<General_Category=Other>.
L<perluniprops/Properties accessible through Unicode::UCD> lists the available
forms, including which ones are discouraged from use.

Those discouraged forms are accepted as input to C<prop_aliases>, but are not
returned in the lists.  C<prop_aliases('isL&')> and C<prop_aliases('isL_')>,
which are old synonyms for C<"Is_LC"> and should not be used in new code, are
examples of this.  These both return C<(Is_LC, Cased_Letter)>.  Thus this
function allows you to take a discouraged form, and find its acceptable
alternatives.  The same goes with single-form Block property equivalences.
Only the forms that begin with C<"In_"> are not discouraged; if you pass
C<prop_aliases> a discouraged form, you will get back the equivalent ones that
begin with C<"In_">.  It will otherwise look like a new-style block name (see.
L</Old-style versus new-style block names>).

C<prop_aliases> does not know about any user-defined properties, and will
return C<undef> if called with one of those.  Likewise for Perl internal
properties, with the exception of "Perl_Decimal_Digit" which it does know
about (and which is documented below in L</prop_invmap()>).

=cut

# It may be that there are use cases where the discouraged forms should be
# returned.  If that comes up, an optional boolean second parameter to the
# function could be created, for example.

# These are created by mktables for this routine and stored in unicore/UCD.pl
# where their structures are described.
our %string_property_loose_to_name;
our %ambiguous_names;
our %loose_perlprop_to_name;
our %prop_aliases;

sub prop_aliases ($) {
    my $prop = $_[0];
    return unless defined $prop;

    require "unicore/UCD.pl";
    require "unicore/Heavy.pl";
    require "utf8_heavy.pl";

    # The property name may be loosely or strictly matched; we don't know yet.
    # But both types use lower-case.
    $prop = lc $prop;

    # It is loosely matched if its lower case isn't known to be strict.
    my $list_ref;
    if (! exists $utf8::stricter_to_file_of{$prop}) {
        my $loose = utf8::_loose_name($prop);

        # There is a hash that converts from any loose name to its standard
        # form, mapping all synonyms for a  name to one name that can be used
        # as a key into another hash.  The whole concept is for memory
        # savings, as the second hash doesn't have to have all the
        # combinations.  Actually, there are two hashes that do the
        # converstion.  One is used in utf8_heavy.pl (stored in Heavy.pl) for
        # looking up properties matchable in regexes.  This function needs to
        # access string properties, which aren't available in regexes, so a
        # second conversion hash is made for them (stored in UCD.pl).  Look in
        # the string one now, as the rest can have an optional 'is' prefix,
        # which these don't.
        if (exists $string_property_loose_to_name{$loose}) {

            # Convert to its standard loose name.
            $prop = $string_property_loose_to_name{$loose};
        }
        else {
            my $retrying = 0;   # bool.  ? Has an initial 'is' been stripped
        RETRY:
            if (exists $utf8::loose_property_name_of{$loose}
                && (! $retrying
                    || ! exists $ambiguous_names{$loose}))
            {
                # Found an entry giving the standard form.  We don't get here
                # (in the test above) when we've stripped off an
                # 'is' and the result is an ambiguous name.  That is because
                # these are official Unicode properties (though Perl can have
                # an optional 'is' prefix meaning the official property), and
                # all ambiguous cases involve a Perl single-form extension
                # for the gc, script, or block properties, and the stripped
                # 'is' means that they mean one of those, and not one of
                # these
                $prop = $utf8::loose_property_name_of{$loose};
            }
            elsif (exists $loose_perlprop_to_name{$loose}) {

                # This hash is specifically for this function to list Perl
                # extensions that aren't in the earlier hashes.  If there is
                # only one element, the short and long names are identical.
                # Otherwise the form is already in the same form as
                # %prop_aliases, which is handled at the end of the function.
                $list_ref = $loose_perlprop_to_name{$loose};
                if (@$list_ref == 1) {
                    my @list = ($list_ref->[0], $list_ref->[0]);
                    $list_ref = \@list;
                }
            }
            elsif (! exists $utf8::loose_to_file_of{$loose}) {

                # loose_to_file_of is a complete list of loose names.  If not
                # there, the input is unknown.
                return;
            }
            elsif ($loose =~ / [:=] /x) {

                # Here we found the name but not its aliases, so it has to
                # exist.  Exclude property-value combinations.  (This shows up
                # for something like ccc=vr which matches loosely, but is a
                # synonym for ccc=9 which matches only strictly.
                return;
            }
            else {

                # Here it has to exist, and isn't a property-value
                # combination.  This means it must be one of the Perl
                # single-form extensions.  First see if it is for a
                # property-value combination in one of the following
                # properties.
                my @list;
                foreach my $property ("gc", "script") {
                    @list = prop_value_aliases($property, $loose);
                    last if @list;
                }
                if (@list) {

                    # Here, it is one of those property-value combination
                    # single-form synonyms.  There are ambiguities with some
                    # of these.  Check against the list for these, and adjust
                    # if necessary.
                    for my $i (0 .. @list -1) {
                        if (exists $ambiguous_names
                                   {utf8::_loose_name(lc $list[$i])})
                        {
                            # The ambiguity is resolved by toggling whether or
                            # not it has an 'is' prefix
                            $list[$i] =~ s/^Is_// or $list[$i] =~ s/^/Is_/;
                        }
                    }
                    return @list;
                }

                # Here, it wasn't one of the gc or script single-form
                # extensions.  It could be a block property single-form
                # extension.  An 'in' prefix definitely means that, and should
                # be looked up without the prefix.  However, starting in
                # Unicode 6.1, we have to special case 'indic...', as there
                # is a property that begins with that name.   We shouldn't
                # strip the 'in' from that.   I'm (khw) generalizing this to
                # 'indic' instead of the single property, because I suspect
                # that others of this class may come along in the future.
                # However, this could backfire and a block created whose name
                # begins with 'dic...', and we would want to strip the 'in'.
                # At which point this would have to be tweaked.
                my $began_with_in = $loose =~ s/^in(?!dic)//;
                @list = prop_value_aliases("block", $loose);
                if (@list) {
                    map { $_ =~ s/^/In_/ } @list;
                    return @list;
                }

                # Here still haven't found it.  The last opportunity for it
                # being valid is only if it began with 'is'.  We retry without
                # the 'is', setting a flag to that effect so that we don't
                # accept things that begin with 'isis...'
                if (! $retrying && ! $began_with_in && $loose =~ s/^is//) {
                    $retrying = 1;
                    goto RETRY;
                }

                # Here, didn't find it.  Since it was in %loose_to_file_of, we
                # should have been able to find it.
                carp __PACKAGE__, "::prop_aliases: Unexpectedly could not find '$prop'.  Send bug report to perlbug\@perl.org";
                return;
            }
        }
    }

    if (! $list_ref) {
        # Here, we have set $prop to a standard form name of the input.  Look
        # it up in the structure created by mktables for this purpose, which
        # contains both strict and loosely matched properties.  Avoid
        # autovivifying.
        $list_ref = $prop_aliases{$prop} if exists $prop_aliases{$prop};
        return unless $list_ref;
    }

    # The full name is in element 1.
    return $list_ref->[1] unless wantarray;

    return @{_dclone $list_ref};
}

=pod

=head2 B<prop_value_aliases()>

    use Unicode::UCD 'prop_value_aliases';

    my ($short_name, $full_name, @other_names)
                                   = prop_value_aliases("Gc", "Punct");
    my $same_full_name = prop_value_aliases("Gc", "P");   # Scalar cntxt
    my ($same_short_name) = prop_value_aliases("Gc", "P"); # gets 0th
                                                           # element
    print "The full name is $full_name\n";
    print "The short name is $short_name\n";
    print "The other aliases are: ", join(", ", @other_names), "\n";

    prints:
    The full name is Punctuation
    The short name is P
    The other aliases are: Punct

Some Unicode properties have a restricted set of legal values.  For example,
all binary properties are restricted to just C<true> or C<false>; and there
are only a few dozen possible General Categories.

For such properties, there are usually several synonyms for each possible
value.  For example, in binary properties, I<truth> can be represented by any of
the strings "Y", "Yes", "T", or "True"; and the General Category
"Punctuation" by that string, or "Punct", or simply "P".

Like property names, there is typically at least a short name for each such
property-value, and a long name.  If you know any name of the property-value,
you can use C<prop_value_aliases>() to get the long name (when called in
scalar context), or a list of all the names, with the short name in the 0th
element, the long name in the next element, and any other synonyms in the
remaining elements, in no particular order, except that any all-numeric
synonyms will be last.

The long name is returned in a form nicely capitalized, suitable for printing.

Case, white space, hyphens, and underscores are ignored in the input parameters
(except for the trailing underscore in the old-form grandfathered-in general
category property value C<"L_">, which is better written as C<"LC">).

If either name is unknown, C<undef> is returned.  Note that Perl typically
recognizes property names in regular expressions with an optional C<"Is_>"
(with or without the underscore) prefixed to them, such as C<\p{isgc=punct}>.
This function does not recognize those in the property parameter, returning
C<undef>.

If called with a property that doesn't have synonyms for its values, it
returns the input value, possibly normalized with capitalization and
underscores.

For the block property, new-style block names are returned (see
L</Old-style versus new-style block names>).

To find the synonyms for single-forms, such as C<\p{Any}>, use
L</prop_aliases()> instead.

C<prop_value_aliases> does not know about any user-defined properties, and
will return C<undef> if called with one of those.

=cut

# These are created by mktables for this routine and stored in unicore/UCD.pl
# where their structures are described.
our %loose_to_standard_value;
our %prop_value_aliases;

sub prop_value_aliases ($$) {
    my ($prop, $value) = @_;
    return unless defined $prop && defined $value;

    require "unicore/UCD.pl";
    require "utf8_heavy.pl";

    # Find the property name synonym that's used as the key in other hashes,
    # which is element 0 in the returned list.
    ($prop) = prop_aliases($prop);
    return if ! $prop;
    $prop = utf8::_loose_name(lc $prop);

    # Here is a legal property, but the hash below (created by mktables for
    # this purpose) only knows about the properties that have a very finite
    # number of potential values, that is not ones whose value could be
    # anything, like most (if not all) string properties.  These don't have
    # synonyms anyway.  Simply return the input.  For example, there is no
    # synonym for ('Uppercase_Mapping', A').
    return $value if ! exists $prop_value_aliases{$prop};

    # The value name may be loosely or strictly matched; we don't know yet.
    # But both types use lower-case.
    $value = lc $value;

    # If the name isn't found under loose matching, it certainly won't be
    # found under strict
    my $loose_value = utf8::_loose_name($value);
    return unless exists $loose_to_standard_value{"$prop=$loose_value"};

    # Similarly if the combination under loose matching doesn't exist, it
    # won't exist under strict.
    my $standard_value = $loose_to_standard_value{"$prop=$loose_value"};
    return unless exists $prop_value_aliases{$prop}{$standard_value};

    # Here we did find a combination under loose matching rules.  But it could
    # be that is a strict property match that shouldn't have matched.
    # %prop_value_aliases is set up so that the strict matches will appear as
    # if they were in loose form.  Thus, if the non-loose version is legal,
    # we're ok, can skip the further check.
    if (! exists $utf8::stricter_to_file_of{"$prop=$value"}

        # We're also ok and skip the further check if value loosely matches.
        # mktables has verified that no strict name under loose rules maps to
        # an existing loose name.  This code relies on the very limited
        # circumstances that strict names can be here.  Strict name matching
        # happens under two conditions:
        # 1) when the name begins with an underscore.  But this function
        #    doesn't accept those, and %prop_value_aliases doesn't have
        #    them.
        # 2) When the values are numeric, in which case we need to look
        #    further, but their squeezed-out loose values will be in
        #    %stricter_to_file_of
        && exists $utf8::stricter_to_file_of{"$prop=$loose_value"})
    {
        # The only thing that's legal loosely under strict is that can have an
        # underscore between digit pairs XXX
        while ($value =~ s/(\d)_(\d)/$1$2/g) {}
        return unless exists $utf8::stricter_to_file_of{"$prop=$value"};
    }

    # Here, we know that the combination exists.  Return it.
    my $list_ref = $prop_value_aliases{$prop}{$standard_value};
    if (@$list_ref > 1) {
        # The full name is in element 1.
        return $list_ref->[1] unless wantarray;

        return @{_dclone $list_ref};
    }

    return $list_ref->[0] unless wantarray;

    # Only 1 element means that it repeats
    return ( $list_ref->[0], $list_ref->[0] );
}

# All 1 bits is the largest possible UV.
$Unicode::UCD::MAX_CP = ~0;

=pod

=head2 B<prop_invlist()>

C<prop_invlist> returns an inversion list (described below) that defines all the
code points for the binary Unicode property (or "property=value" pair) given
by the input parameter string:

 use feature 'say';
 use Unicode::UCD 'prop_invlist';
 say join ", ", prop_invlist("Any");

 prints:
 0, 1114112

If the input is unknown C<undef> is returned in scalar context; an empty-list
in list context.  If the input is known, the number of elements in
the list is returned if called in scalar context.

L<perluniprops|perluniprops/Properties accessible through \p{} and \P{}> gives
the list of properties that this function accepts, as well as all the possible
forms for them (including with the optional "Is_" prefixes).  (Except this
function doesn't accept any Perl-internal properties, some of which are listed
there.) This function uses the same loose or tighter matching rules for
resolving the input property's name as is done for regular expressions.  These
are also specified in L<perluniprops|perluniprops/Properties accessible
through \p{} and \P{}>.  Examples of using the "property=value" form are:

 say join ", ", prop_invlist("Script=Shavian");

 prints:
 66640, 66688

 say join ", ", prop_invlist("ASCII_Hex_Digit=No");

 prints:
 0, 48, 58, 65, 71, 97, 103

 say join ", ", prop_invlist("ASCII_Hex_Digit=Yes");

 prints:
 48, 58, 65, 71, 97, 103

Inversion lists are a compact way of specifying Unicode property-value
definitions.  The 0th item in the list is the lowest code point that has the
property-value.  The next item (item [1]) is the lowest code point beyond that
one that does NOT have the property-value.  And the next item beyond that
([2]) is the lowest code point beyond that one that does have the
property-value, and so on.  Put another way, each element in the list gives
the beginning of a range that has the property-value (for even numbered
elements), or doesn't have the property-value (for odd numbered elements).
The name for this data structure stems from the fact that each element in the
list toggles (or inverts) whether the corresponding range is or isn't on the
list.

In the final example above, the first ASCII Hex digit is code point 48, the
character "0", and all code points from it through 57 (a "9") are ASCII hex
digits.  Code points 58 through 64 aren't, but 65 (an "A") through 70 (an "F")
are, as are 97 ("a") through 102 ("f").  103 starts a range of code points
that aren't ASCII hex digits.  That range extends to infinity, which on your
computer can be found in the variable C<$Unicode::UCD::MAX_CP>.  (This
variable is as close to infinity as Perl can get on your platform, and may be
too high for some operations to work; you may wish to use a smaller number for
your purposes.)

Note that the inversion lists returned by this function can possibly include
non-Unicode code points, that is anything above 0x10FFFF.  Unicode properties
are not defined on such code points.  You might wish to change the output to
not include these.  Simply add 0x110000 at the end of the non-empty returned
list if it isn't already that value; and pop that value if it is; like:

 my @list = prop_invlist("foo");
 if (@list) {
     if ($list[-1] == 0x110000) {
         pop @list;  # Defeat the turning on for above Unicode
     }
     else {
         push @list, 0x110000; # Turn off for above Unicode
     }
 }

It is a simple matter to expand out an inversion list to a full list of all
code points that have the property-value:

 my @invlist = prop_invlist($property_name);
 die "empty" unless @invlist;
 my @full_list;
 for (my $i = 0; $i < @invlist; $i += 2) {
    my $upper = ($i + 1) < @invlist
                ? $invlist[$i+1] - 1      # In range
                : $Unicode::UCD::MAX_CP;  # To infinity.  You may want
                                          # to stop much much earlier;
                                          # going this high may expose
                                          # perl deficiencies with very
                                          # large numbers.
    for my $j ($invlist[$i] .. $upper) {
        push @full_list, $j;
    }
 }

C<prop_invlist> does not know about any user-defined nor Perl internal-only
properties, and will return C<undef> if called with one of those.

The L</search_invlist()> function is provided for finding a code point within
an inversion list.

=cut

# User-defined properties could be handled with some changes to utf8_heavy.pl;
# and implementing here of dealing with EXTRAS.  If done, consideration should
# be given to the fact that the user subroutine could return different results
# with each call; security issues need to be thought about.

# These are created by mktables for this routine and stored in unicore/UCD.pl
# where their structures are described.
our %loose_defaults;
our $MAX_UNICODE_CODEPOINT;

sub prop_invlist ($;$) {
    my $prop = $_[0];

    # Undocumented way to get at Perl internal properties
    my $internal_ok = defined $_[1] && $_[1] eq '_perl_core_internal_ok';

    return if ! defined $prop;

    require "utf8_heavy.pl";

    # Warnings for these are only for regexes, so not applicable to us
    no warnings 'deprecated';

    # Get the swash definition of the property-value.
    my $swash = utf8::SWASHNEW(__PACKAGE__, $prop, undef, 1, 0);

    # Fail if not found, or isn't a boolean property-value, or is a
    # user-defined property, or is internal-only.
    return if ! $swash
              || ref $swash eq ""
              || $swash->{'BITS'} != 1
              || $swash->{'USER_DEFINED'}
              || (! $internal_ok && $prop =~ /^\s*_/);

    if ($swash->{'EXTRAS'}) {
        carp __PACKAGE__, "::prop_invlist: swash returned for $prop unexpectedly has EXTRAS magic";
        return;
    }
    if ($swash->{'SPECIALS'}) {
        carp __PACKAGE__, "::prop_invlist: swash returned for $prop unexpectedly has SPECIALS magic";
        return;
    }

    my @invlist;

    if ($swash->{'LIST'} =~ /^V/) {

        # A 'V' as the first character marks the input as already an inversion
        # list, in which case, all we need to do is put the remaining lines
        # into our array.
        @invlist = split "\n", $swash->{'LIST'} =~ s/ \s* (?: \# .* )? $ //xmgr;
        shift @invlist;
    }
    else {
        # The input lines look like:
        # 0041\t005A   # [26]
        # 005F

        # Split into lines, stripped of trailing comments
        foreach my $range (split "\n",
                              $swash->{'LIST'} =~ s/ \s* (?: \# .* )? $ //xmgr)
        {
            # And find the beginning and end of the range on the line
            my ($hex_begin, $hex_end) = split "\t", $range;
            my $begin = hex $hex_begin;

            # If the new range merely extends the old, we remove the marker
            # created the last time through the loop for the old's end, which
            # causes the new one's end to be used instead.
            if (@invlist && $begin == $invlist[-1]) {
                pop @invlist;
            }
            else {
                # Add the beginning of the range
                push @invlist, $begin;
            }

            if (defined $hex_end) { # The next item starts with the code point 1
                                    # beyond the end of the range.
                no warnings 'portable';
                my $end = hex $hex_end;
                last if $end == $Unicode::UCD::MAX_CP;
                push @invlist, $end + 1;
            }
            else {  # No end of range, is a single code point.
                push @invlist, $begin + 1;
            }
        }
    }

    # Could need to be inverted: add or subtract a 0 at the beginning of the
    # list.
    if ($swash->{'INVERT_IT'}) {
        if (@invlist && $invlist[0] == 0) {
            shift @invlist;
        }
        else {
            unshift @invlist, 0;
        }
    }

    return @invlist;
}

=pod

=head2 B<prop_invmap()>

 use Unicode::UCD 'prop_invmap';
 my ($list_ref, $map_ref, $format, $default)
                                      = prop_invmap("General Category");

C<prop_invmap> is used to get the complete mapping definition for a property,
in the form of an inversion map.  An inversion map consists of two parallel
arrays.  One is an ordered list of code points that mark range beginnings, and
the other gives the value (or mapping) that all code points in the
corresponding range have.

C<prop_invmap> is called with the name of the desired property.  The name is
loosely matched, meaning that differences in case, white-space, hyphens, and
underscores are not meaningful (except for the trailing underscore in the
old-form grandfathered-in property C<"L_">, which is better written as C<"LC">,
or even better, C<"Gc=LC">).

Many Unicode properties have more than one name (or alias).  C<prop_invmap>
understands all of these, including Perl extensions to them.  Ambiguities are
resolved as described above for L</prop_aliases()>.  The Perl internal
property "Perl_Decimal_Digit, described below, is also accepted.  An empty
list is returned if the property name is unknown.
See L<perluniprops/Properties accessible through Unicode::UCD> for the
properties acceptable as inputs to this function.

It is a fatal error to call this function except in list context.

In addition to the two arrays that form the inversion map, C<prop_invmap>
returns two other values; one is a scalar that gives some details as to the
format of the entries of the map array; the other is a default value, useful
in maps whose format name begins with the letter C<"a">, as described
L<below in its subsection|/a>; and for specialized purposes, such as
converting to another data structure, described at the end of this main
section.

This means that C<prop_invmap> returns a 4 element list.  For example,

 my ($blocks_ranges_ref, $blocks_maps_ref, $format, $default)
                                                 = prop_invmap("Block");

In this call, the two arrays will be populated as shown below (for Unicode
6.0):

 Index  @blocks_ranges  @blocks_maps
   0        0x0000      Basic Latin
   1        0x0080      Latin-1 Supplement
   2        0x0100      Latin Extended-A
   3        0x0180      Latin Extended-B
   4        0x0250      IPA Extensions
   5        0x02B0      Spacing Modifier Letters
   6        0x0300      Combining Diacritical Marks
   7        0x0370      Greek and Coptic
   8        0x0400      Cyrillic
  ...
 233        0x2B820     No_Block
 234        0x2F800     CJK Compatibility Ideographs Supplement
 235        0x2FA20     No_Block
 236        0xE0000     Tags
 237        0xE0080     No_Block
 238        0xE0100     Variation Selectors Supplement
 239        0xE01F0     No_Block
 240        0xF0000     Supplementary Private Use Area-A
 241        0x100000    Supplementary Private Use Area-B
 242        0x110000    No_Block

The first line (with Index [0]) means that the value for code point 0 is "Basic
Latin".  The entry "0x0080" in the @blocks_ranges column in the second line
means that the value from the first line, "Basic Latin", extends to all code
points in the range from 0 up to but not including 0x0080, that is, through
127.  In other words, the code points from 0 to 127 are all in the "Basic
Latin" block.  Similarly, all code points in the range from 0x0080 up to (but
not including) 0x0100 are in the block named "Latin-1 Supplement", etc.
(Notice that the return is the old-style block names; see L</Old-style versus
new-style block names>).

The final line (with Index [242]) means that the value for all code points above
the legal Unicode maximum code point have the value "No_Block", which is the
term Unicode uses for a non-existing block.

The arrays completely specify the mappings for all possible code points.
The final element in an inversion map returned by this function will always be
for the range that consists of all the code points that aren't legal Unicode,
but that are expressible on the platform.  (That is, it starts with code point
0x110000, the first code point above the legal Unicode maximum, and extends to
infinity.) The value for that range will be the same that any typical
unassigned code point has for the specified property.  (Certain unassigned
code points are not "typical"; for example the non-character code points, or
those in blocks that are to be written right-to-left.  The above-Unicode
range's value is not based on these atypical code points.)  It could be argued
that, instead of treating these as unassigned Unicode code points, the value
for this range should be C<undef>.  If you wish, you can change the returned
arrays accordingly.

The maps for almost all properties are simple scalars that should be
interpreted as-is.
These values are those given in the Unicode-supplied data files, which may be
inconsistent as to capitalization and as to which synonym for a property-value
is given.  The results may be normalized by using the L</prop_value_aliases()>
function.

There are exceptions to the simple scalar maps.  Some properties have some
elements in their map list that are themselves lists of scalars; and some
special strings are returned that are not to be interpreted as-is.  Element
[2] (placed into C<$format> in the example above) of the returned four element
list tells you if the map has any of these special elements or not, as follows:

=over

=item B<C<s>>

means all the elements of the map array are simple scalars, with no special
elements.  Almost all properties are like this, like the C<block> example
above.

=item B<C<sl>>

means that some of the map array elements have the form given by C<"s">, and
the rest are lists of scalars.  For example, here is a portion of the output
of calling C<prop_invmap>() with the "Script Extensions" property:

 @scripts_ranges  @scripts_maps
      ...
      0x0953      Devanagari
      0x0964      [ Bengali, Devanagari, Gurumukhi, Oriya ]
      0x0966      Devanagari
      0x0970      Common

Here, the code points 0x964 and 0x965 are both used in Bengali,
Devanagari, Gurmukhi, and Oriya, but no other scripts.

The Name_Alias property is also of this form.  But each scalar consists of two
components:  1) the name, and 2) the type of alias this is.  They are
separated by a colon and a space.  In Unicode 6.1, there are several alias types:

=over

=item C<correction>

indicates that the name is a corrected form for the
original name (which remains valid) for the same code point.

=item C<control>

adds a new name for a control character.

=item C<alternate>

is an alternate name for a character

=item C<figment>

is a name for a character that has been documented but was never in any
actual standard.

=item C<abbreviation>

is a common abbreviation for a character

=back

The lists are ordered (roughly) so the most preferred names come before less
preferred ones.

For example,

 @aliases_ranges        @alias_maps
    ...
    0x009E        [ 'PRIVACY MESSAGE: control', 'PM: abbreviation' ]
    0x009F        [ 'APPLICATION PROGRAM COMMAND: control',
                    'APC: abbreviation'
                  ]
    0x00A0        'NBSP: abbreviation'
    0x00A1        ""
    0x00AD        'SHY: abbreviation'
    0x00AE        ""
    0x01A2        'LATIN CAPITAL LETTER GHA: correction'
    0x01A3        'LATIN SMALL LETTER GHA: correction'
    0x01A4        ""
    ...

A map to the empty string means that there is no alias defined for the code
point.

=item B<C<a>>

is like C<"s"> in that all the map array elements are scalars, but here they are
restricted to all being integers, and some have to be adjusted (hence the name
C<"a">) to get the correct result.  For example, in:

 my ($uppers_ranges_ref, $uppers_maps_ref, $format, $default)
                          = prop_invmap("Simple_Uppercase_Mapping");

the returned arrays look like this:

 @$uppers_ranges_ref    @$uppers_maps_ref   Note
       0                      0
      97                     65          'a' maps to 'A', b => B ...
     123                      0
     181                    924          MICRO SIGN => Greek Cap MU
     182                      0
     ...

and C<$default> is 0.

Let's start with the second line.  It says that the uppercase of code point 97
is 65; or C<uc("a")> == "A".  But the line is for the entire range of code
points 97 through 122.  To get the mapping for any code point in this range,
you take the offset it has from the beginning code point of the range, and add
that to the mapping for that first code point.  So, the mapping for 122 ("z")
is derived by taking the offset of 122 from 97 (=25) and adding that to 65,
yielding 90 ("z").  Likewise for everything in between.

Requiring this simple adjustment allows the returned arrays to be
significantly smaller than otherwise, up to a factor of 10, speeding up
searching through them.

Ranges that map to C<$default>, C<"0">, behave somewhat differently.  For
these, each code point maps to itself.  So, in the first line in the example,
S<C<ord(uc(chr(0)))>> is 0, S<C<ord(uc(chr(1)))>> is 1, ..
S<C<ord(uc(chr(96)))>> is 96.

=item B<C<al>>

means that some of the map array elements have the form given by C<"a">, and
the rest are ordered lists of code points.
For example, in:

 my ($uppers_ranges_ref, $uppers_maps_ref, $format, $default)
                                 = prop_invmap("Uppercase_Mapping");

the returned arrays look like this:

 @$uppers_ranges_ref    @$uppers_maps_ref
       0                      0
      97                     65
     123                      0
     181                    924
     182                      0
     ...
    0x0149              [ 0x02BC 0x004E ]
    0x014A                    0
    0x014B                  330
     ...

This is the full Uppercase_Mapping property (as opposed to the
Simple_Uppercase_Mapping given in the example for format C<"a">).  The only
difference between the two in the ranges shown is that the code point at
0x0149 (LATIN SMALL LETTER N PRECEDED BY APOSTROPHE) maps to a string of two
characters, 0x02BC (MODIFIER LETTER APOSTROPHE) followed by 0x004E (LATIN
CAPITAL LETTER N).

No adjustments are needed to entries that are references to arrays; each such
entry will have exactly one element in its range, so the offset is always 0.

The fourth (index [3]) element (C<$default>) in the list returned for this
format is 0.

=item B<C<ae>>

This is like C<"a">, but some elements are the empty string, and should not be
adjusted.
The one internal Perl property accessible by C<prop_invmap> is of this type:
"Perl_Decimal_Digit" returns an inversion map which gives the numeric values
that are represented by the Unicode decimal digit characters.  Characters that
don't represent decimal digits map to the empty string, like so:

 @digits    @values
 0x0000       ""
 0x0030        0
 0x003A:      ""
 0x0660:       0
 0x066A:      ""
 0x06F0:       0
 0x06FA:      ""
 0x07C0:       0
 0x07CA:      ""
 0x0966:       0
 ...

This means that the code points from 0 to 0x2F do not represent decimal digits;
the code point 0x30 (DIGIT ZERO) represents 0;  code point 0x31, (DIGIT ONE),
represents 0+1-0 = 1; ... code point 0x39, (DIGIT NINE), represents 0+9-0 = 9;
... code points 0x3A through 0x65F do not represent decimal digits; 0x660
(ARABIC-INDIC DIGIT ZERO), represents 0; ... 0x07C1 (NKO DIGIT ONE),
represents 0+1-0 = 1 ...

The fourth (index [3]) element (C<$default>) in the list returned for this
format is the empty string.

=item B<C<ale>>

is a combination of the C<"al"> type and the C<"ae"> type.  Some of
the map array elements have the forms given by C<"al">, and
the rest are the empty string.  The property C<NFKC_Casefold> has this form.
An example slice is:

 @$ranges_ref  @$maps_ref         Note
    ...
   0x00AA       97                FEMININE ORDINAL INDICATOR => 'a'
   0x00AB        0
   0x00AD                         SOFT HYPHEN => ""
   0x00AE        0
   0x00AF     [ 0x0020, 0x0304 ]  MACRON => SPACE . COMBINING MACRON
   0x00B0        0
   ...

The fourth (index [3]) element (C<$default>) in the list returned for this
format is 0.

=item B<C<ar>>

means that all the elements of the map array are either rational numbers or
the string C<"NaN">, meaning "Not a Number".  A rational number is either an
integer, or two integers separated by a solidus (C<"/">).  The second integer
represents the denominator of the division implied by the solidus, and is
actually always positive, so it is guaranteed not to be 0 and to not be
signed.  When the element is a plain integer (without the
solidus), it may need to be adjusted to get the correct value by adding the
offset, just as other C<"a"> properties.  No adjustment is needed for
fractions, as the range is guaranteed to have just a single element, and so
the offset is always 0.

If you want to convert the returned map to entirely scalar numbers, you
can use something like this:

 my ($invlist_ref, $invmap_ref, $format) = prop_invmap($property);
 if ($format && $format eq "ar") {
     map { $_ = eval $_ if $_ ne 'NaN' } @$map_ref;
 }

Here's some entries from the output of the property "Nv", which has format
C<"ar">.

 @numerics_ranges  @numerics_maps       Note
        0x00           "NaN"
        0x30             0           DIGIT 0 .. DIGIT 9
        0x3A           "NaN"
        0xB2             2           SUPERSCRIPTs 2 and 3
        0xB4           "NaN"
        0xB9             1           SUPERSCRIPT 1
        0xBA           "NaN"
        0xBC            1/4          VULGAR FRACTION 1/4
        0xBD            1/2          VULGAR FRACTION 1/2
        0xBE            3/4          VULGAR FRACTION 3/4
        0xBF           "NaN"
        0x660            0           ARABIC-INDIC DIGIT ZERO .. NINE
        0x66A          "NaN"

The fourth (index [3]) element (C<$default>) in the list returned for this
format is C<"NaN">.

=item B<C<n>>

means the Name property.  All the elements of the map array are simple
scalars, but some of them contain special strings that require more work to
get the actual name.

Entries such as:

 CJK UNIFIED IDEOGRAPH-<code point>

mean that the name for the code point is "CJK UNIFIED IDEOGRAPH-"
with the code point (expressed in hexadecimal) appended to it, like "CJK
UNIFIED IDEOGRAPH-3403" (similarly for S<C<CJK COMPATIBILITY IDEOGRAPH-E<lt>code
pointE<gt>>>).

Also, entries like

 <hangul syllable>

means that the name is algorithmically calculated.  This is easily done by
the function L<charnames/charnames::viacode(code)>.

Note that for control characters (C<Gc=cc>), Unicode's data files have the
string "C<E<lt>controlE<gt>>", but the real name of each of these characters is the empty
string.  This function returns that real name, the empty string.  (There are
names for these characters, but they are considered aliases, not the Name
property name, and are contained in the C<Name_Alias> property.)

=item B<C<ad>>

means the Decomposition_Mapping property.  This property is like C<"al">
properties, except that one of the scalar elements is of the form:

 <hangul syllable>

This signifies that this entry should be replaced by the decompositions for
all the code points whose decomposition is algorithmically calculated.  (All
of them are currently in one range and no others outside the range are likely
to ever be added to Unicode; the C<"n"> format
has this same entry.)  These can be generated via the function
L<Unicode::Normalize::NFD()|Unicode::Normalize>.

Note that the mapping is the one that is specified in the Unicode data files,
and to get the final decomposition, it may need to be applied recursively.

The fourth (index [3]) element (C<$default>) in the list returned for this
format is 0.

=back

Note that a format begins with the letter "a" if and only the property it is
for requires adjustments by adding the offsets in multi-element ranges.  For
all these properties, an entry should be adjusted only if the map is a scalar
which is an integer.  That is, it must match the regular expression:

    / ^ -? \d+ $ /xa

Further, the first element in a range never needs adjustment, as the
adjustment would be just adding 0.

A binary search such as that provided by L</search_invlist()>, can be used to
quickly find a code point in the inversion list, and hence its corresponding
mapping.

The final, fourth element (index [3], assigned to C<$default> in the "block"
example) in the four element list returned by this function is used with the
C<"a"> format types; it may also be useful for applications
that wish to convert the returned inversion map data structure into some
other, such as a hash.  It gives the mapping that most code points map to
under the property.  If you establish the convention that any code point not
explicitly listed in your data structure maps to this value, you can
potentially make your data structure much smaller.  As you construct your data
structure from the one returned by this function, simply ignore those ranges
that map to this value.  For example, to
convert to the data structure searchable by L</charinrange()>, you can follow
this recipe for properties that don't require adjustments:

 my ($list_ref, $map_ref, $format, $default) = prop_invmap($property);
 my @range_list;

 # Look at each element in the list, but the -2 is needed because we
 # look at $i+1 in the loop, and the final element is guaranteed to map
 # to $default by prop_invmap(), so we would skip it anyway.
 for my $i (0 .. @$list_ref - 2) {
    next if $map_ref->[$i] eq $default;
    push @range_list, [ $list_ref->[$i],
                        $list_ref->[$i+1],
                        $map_ref->[$i]
                      ];
 }

 print charinrange(\@range_list, $code_point), "\n";

With this, C<charinrange()> will return C<undef> if its input code point maps
to C<$default>.  You can avoid this by omitting the C<next> statement, and adding
a line after the loop to handle the final element of the inversion map.

Similarly, this recipe can be used for properties that do require adjustments:

 for my $i (0 .. @$list_ref - 2) {
    next if $map_ref->[$i] eq $default;

    # prop_invmap() guarantees that if the mapping is to an array, the
    # range has just one element, so no need to worry about adjustments.
    if (ref $map_ref->[$i]) {
        push @range_list,
                   [ $list_ref->[$i], $list_ref->[$i], $map_ref->[$i] ];
    }
    else {  # Otherwise each element is actually mapped to a separate
            # value, so the range has to be split into single code point
            # ranges.

        my $adjustment = 0;

        # For each code point that gets mapped to something...
        for my $j ($list_ref->[$i] .. $list_ref->[$i+1] -1 ) {

            # ... add a range consisting of just it mapping to the
            # original plus the adjustment, which is incremented for the
            # next time through the loop, as the offset increases by 1
            # for each element in the range
            push @range_list,
                             [ $j, $j, $map_ref->[$i] + $adjustment++ ];
        }
    }
 }

Note that the inversion maps returned for the C<Case_Folding> and
C<Simple_Case_Folding> properties do not include the Turkic-locale mappings.
Use L</casefold()> for these.

C<prop_invmap> does not know about any user-defined properties, and will
return C<undef> if called with one of those.

=cut

# User-defined properties could be handled with some changes to utf8_heavy.pl;
# if done, consideration should be given to the fact that the user subroutine
# could return different results with each call, which could lead to some
# security issues.

# One could store things in memory so they don't have to be recalculated, but
# it is unlikely this will be called often, and some properties would take up
# significant memory.

# These are created by mktables for this routine and stored in unicore/UCD.pl
# where their structures are described.
our @algorithmic_named_code_points;
our $HANGUL_BEGIN;
our $HANGUL_COUNT;

sub prop_invmap ($) {

    croak __PACKAGE__, "::prop_invmap: must be called in list context" unless wantarray;

    my $prop = $_[0];
    return unless defined $prop;

    # Fail internal properties
    return if $prop =~ /^_/;

    # The values returned by this function.
    my (@invlist, @invmap, $format, $missing);

    # The swash has two components we look at, the base list, and a hash,
    # named 'SPECIALS', containing any additional members whose mappings don't
    # fit into the base list scheme of things.  These generally 'override'
    # any value in the base list for the same code point.
    my $overrides;

    require "utf8_heavy.pl";
    require "unicore/UCD.pl";

RETRY:

    # If there are multiple entries for a single code point
    my $has_multiples = 0;

    # Try to get the map swash for the property.  They have 'To' prepended to
    # the property name, and 32 means we will accept 32 bit return values.
    # The 0 means we aren't calling this from tr///.
    my $swash = utf8::SWASHNEW(__PACKAGE__, "To$prop", undef, 32, 0);

    # If didn't find it, could be because needs a proxy.  And if was the
    # 'Block' or 'Name' property, use a proxy even if did find it.  Finding it
    # in these cases would be the result of the installation changing mktables
    # to output the Block or Name tables.  The Block table gives block names
    # in the new-style, and this routine is supposed to return old-style block
    # names.  The Name table is valid, but we need to execute the special code
    # below to add in the algorithmic-defined name entries.
    # And NFKCCF needs conversion, so handle that here too.
    if (ref $swash eq ""
        || $swash->{'TYPE'} =~ / ^ To (?: Blk | Na | NFKCCF ) $ /x)
    {

        # Get the short name of the input property, in standard form
        my ($second_try) = prop_aliases($prop);
        return unless $second_try;
        $second_try = utf8::_loose_name(lc $second_try);

        if ($second_try eq "in") {

            # This property is identical to age for inversion map purposes
            $prop = "age";
            goto RETRY;
        }
        elsif ($second_try =~ / ^ s ( cf | fc | [ltu] c ) $ /x) {

            # These properties use just the LIST part of the full mapping,
            # which includes the simple maps that are otherwise overridden by
            # the SPECIALS.  So all we need do is to not look at the SPECIALS;
            # set $overrides to indicate that
            $overrides = -1;

            # The full name is the simple name stripped of its initial 's'
            $prop = $1;

            # .. except for this case
            $prop = 'cf' if $prop eq 'fc';

            goto RETRY;
        }
        elsif ($second_try eq "blk") {

            # We use the old block names.  Just create a fake swash from its
            # data.
            _charblocks();
            my %blocks;
            $blocks{'LIST'} = "";
            $blocks{'TYPE'} = "ToBlk";
            $utf8::SwashInfo{ToBlk}{'missing'} = "No_Block";
            $utf8::SwashInfo{ToBlk}{'format'} = "s";

            foreach my $block (@BLOCKS) {
                $blocks{'LIST'} .= sprintf "%x\t%x\t%s\n",
                                           $block->[0],
                                           $block->[1],
                                           $block->[2];
            }
            $swash = \%blocks;
        }
        elsif ($second_try eq "na") {

            # Use the combo file that has all the Name-type properties in it,
            # extracting just the ones that are for the actual 'Name'
            # property.  And create a fake swash from it.
            my %names;
            $names{'LIST'} = "";
            my $original = do "unicore/Name.pl";
            my $algorithm_names = \@algorithmic_named_code_points;

            # We need to remove the names from it that are aliases.  For that
            # we need to also read in that table.  Create a hash with the keys
            # being the code points, and the values being a list of the
            # aliases for the code point key.
            my ($aliases_code_points, $aliases_maps, undef, undef) =
                                                &prop_invmap('Name_Alias');
            my %aliases;
            for (my $i = 0; $i < @$aliases_code_points; $i++) {
                my $code_point = $aliases_code_points->[$i];
                $aliases{$code_point} = $aliases_maps->[$i];

                # If not already a list, make it into one, so that later we
                # can treat things uniformly
                if (! ref $aliases{$code_point}) {
                    $aliases{$code_point} = [ $aliases{$code_point} ];
                }

                # Remove the alias type from the entry, retaining just the
                # name.
                map { s/:.*// } @{$aliases{$code_point}};
            }

            my $i = 0;
            foreach my $line (split "\n", $original) {
                my ($hex_code_point, $name) = split "\t", $line;

                # Weeds out all comments, blank lines, and named sequences
                next if $hex_code_point =~ /[^[:xdigit:]]/a;

                my $code_point = hex $hex_code_point;

                # The name of all controls is the default: the empty string.
                # The set of controls is immutable
                next if chr($code_point) =~ /[[:cntrl:]]/u;

                # If this is a name_alias, it isn't a name
                next if grep { $_ eq $name } @{$aliases{$code_point}};

                # If we are beyond where one of the special lines needs to
                # be inserted ...
                while ($i < @$algorithm_names
                    && $code_point > $algorithm_names->[$i]->{'low'})
                {

                    # ... then insert it, ahead of what we were about to
                    # output
                    $names{'LIST'} .= sprintf "%x\t%x\t%s\n",
                                            $algorithm_names->[$i]->{'low'},
                                            $algorithm_names->[$i]->{'high'},
                                            $algorithm_names->[$i]->{'name'};

                    # Done with this range.
                    $i++;

                    # We loop until all special lines that precede the next
                    # regular one are output.
                }

                # Here, is a normal name.
                $names{'LIST'} .= sprintf "%x\t\t%s\n", $code_point, $name;
            } # End of loop through all the names

            $names{'TYPE'} = "ToNa";
            $utf8::SwashInfo{ToNa}{'missing'} = "";
            $utf8::SwashInfo{ToNa}{'format'} = "n";
            $swash = \%names;
        }
        elsif ($second_try =~ / ^ ( d [mt] ) $ /x) {

            # The file is a combination of dt and dm properties.  Create a
            # fake swash from the portion that we want.
            my $original = do "unicore/Decomposition.pl";
            my %decomps;

            if ($second_try eq 'dt') {
                $decomps{'TYPE'} = "ToDt";
                $utf8::SwashInfo{'ToDt'}{'missing'} = "None";
                $utf8::SwashInfo{'ToDt'}{'format'} = "s";
            }   # 'dm' is handled below, with 'nfkccf'

            $decomps{'LIST'} = "";

            # This property has one special range not in the file: for the
            # hangul syllables.  But not in Unicode version 1.
            UnicodeVersion() unless defined $v_unicode_version;
            my $done_hangul = ($v_unicode_version lt v2.0.0)
                              ? 1
                              : 0;    # Have we done the hangul range ?
            foreach my $line (split "\n", $original) {
                my ($hex_lower, $hex_upper, $type_and_map) = split "\t", $line;
                my $code_point = hex $hex_lower;
                my $value;
                my $redo = 0;

                # The type, enclosed in <...>, precedes the mapping separated
                # by blanks
                if ($type_and_map =~ / ^ < ( .* ) > \s+ (.*) $ /x) {
                    $value = ($second_try eq 'dt') ? $1 : $2
                }
                else {  # If there is no type specified, it's canonical
                    $value = ($second_try eq 'dt')
                             ? "Canonical" :
                             $type_and_map;
                }

                # Insert the hangul range at the appropriate spot.
                if (! $done_hangul && $code_point > $HANGUL_BEGIN) {
                    $done_hangul = 1;
                    $decomps{'LIST'} .=
                                sprintf "%x\t%x\t%s\n",
                                        $HANGUL_BEGIN,
                                        $HANGUL_BEGIN + $HANGUL_COUNT - 1,
                                        ($second_try eq 'dt')
                                        ? "Canonical"
                                        : "<hangul syllable>";
                }

                if ($value =~ / / && $hex_upper ne "" && $hex_upper ne $hex_lower) {
                    $line = sprintf("%04X\t%s\t%s", hex($hex_lower) + 1, $hex_upper, $value);
                    $hex_upper = "";
                    $redo = 1;
                }

                # And append this to our constructed LIST.
                $decomps{'LIST'} .= "$hex_lower\t$hex_upper\t$value\n";

                redo if $redo;
            }
            $swash = \%decomps;
        }
        elsif ($second_try ne 'nfkccf') { # Don't know this property. Fail.
            return;
        }

        if ($second_try eq 'nfkccf' || $second_try eq 'dm') {

            # The 'nfkccf' property is stored in the old format for backwards
            # compatibility for any applications that has read its file
            # directly before prop_invmap() existed.
            # And the code above has extracted the 'dm' property from its file
            # yielding the same format.  So here we convert them to adjusted
            # format for compatibility with the other properties similar to
            # them.
            my %revised_swash;

            # We construct a new converted list.
            my $list = "";

            my @ranges = split "\n", $swash->{'LIST'};
            for (my $i = 0; $i < @ranges; $i++) {
                my ($hex_begin, $hex_end, $map) = split "\t", $ranges[$i];

                # The dm property has maps that are space separated sequences
                # of code points, as well as the special entry "<hangul
                # syllable>, which also contains a blank.
                my @map = split " ", $map;
                if (@map > 1) {

                    # If it's just the special entry, append as-is.
                    if ($map eq '<hangul syllable>') {
                        $list .= "$ranges[$i]\n";
                    }
                    else {

                        # These should all be single-element ranges.
                        croak __PACKAGE__, "::prop_invmap: Not expecting a mapping with multiple code points in a multi-element range, $ranges[$i]" if $hex_end ne "" && $hex_end ne $hex_begin;

                        # Convert them to decimal, as that's what's expected.
                        $list .= "$hex_begin\t\t"
                            . join(" ", map { hex } @map)
                            . "\n";
                    }
                    next;
                }

                # Here, the mapping doesn't have a blank, is for a single code
                # point.
                my $begin = hex $hex_begin;
                my $end = (defined $hex_end && $hex_end ne "")
                        ? hex $hex_end
                        : $begin;

                # Again, the output is to be in decimal.
                my $decimal_map = hex $map;

                # We know that multi-element ranges with the same mapping
                # should not be adjusted, as after the adjustment
                # multi-element ranges are for consecutive increasing code
                # points.  Further, the final element in the list won't be
                # adjusted, as there is nothing after it to include in the
                # adjustment
                if ($begin != $end || $i == @ranges -1) {

                    # So just convert these to single-element ranges
                    foreach my $code_point ($begin .. $end) {
                        $list .= sprintf("%04X\t\t%d\n",
                                        $code_point, $decimal_map);
                    }
                }
                else {

                    # Here, we have a candidate for adjusting.  What we do is
                    # look through the subsequent adjacent elements in the
                    # input.  If the map to the next one differs by 1 from the
                    # one before, then we combine into a larger range with the
                    # initial map.  Loop doing this until we find one that
                    # can't be combined.

                    my $offset = 0;     # How far away are we from the initial
                                        # map
                    my $squished = 0;   # ? Did we squish at least two
                                        # elements together into one range
                    for ( ; $i < @ranges; $i++) {
                        my ($next_hex_begin, $next_hex_end, $next_map)
                                                = split "\t", $ranges[$i+1];

                        # In the case of 'dm', the map may be a sequence of
                        # multiple code points, which are never combined with
                        # another range
                        last if $next_map =~ / /;

                        $offset++;
                        my $next_decimal_map = hex $next_map;

                        # If the next map is not next in sequence, it
                        # shouldn't be combined.
                        last if $next_decimal_map != $decimal_map + $offset;

                        my $next_begin = hex $next_hex_begin;

                        # Likewise, if the next element isn't adjacent to the
                        # previous one, it shouldn't be combined.
                        last if $next_begin != $begin + $offset;

                        my $next_end = (defined $next_hex_end
                                        && $next_hex_end ne "")
                                            ? hex $next_hex_end
                                            : $next_begin;

                        # And finally, if the next element is a multi-element
                        # range, it shouldn't be combined.
                        last if $next_end != $next_begin;

                        # Here, we will combine.  Loop to see if we should
                        # combine the next element too.
                        $squished = 1;
                    }

                    if ($squished) {

                        # Here, 'i' is the element number of the last element to
                        # be combined, and the range is single-element, or we
                        # wouldn't be combining.  Get it's code point.
                        my ($hex_end, undef, undef) = split "\t", $ranges[$i];
                        $list .= "$hex_begin\t$hex_end\t$decimal_map\n";
                    } else {

                        # Here, no combining done.  Just append the initial
                        # (and current) values.
                        $list .= "$hex_begin\t\t$decimal_map\n";
                    }
                }
            } # End of loop constructing the converted list

            # Finish up the data structure for our converted swash
            my $type = ($second_try eq 'nfkccf') ? 'ToNFKCCF' : 'ToDm';
            $revised_swash{'LIST'} = $list;
            $revised_swash{'TYPE'} = $type;
            $revised_swash{'SPECIALS'} = $swash->{'SPECIALS'};
            $swash = \%revised_swash;

            $utf8::SwashInfo{$type}{'missing'} = 0;
            $utf8::SwashInfo{$type}{'format'} = 'a';
        }
    }

    if ($swash->{'EXTRAS'}) {
        carp __PACKAGE__, "::prop_invmap: swash returned for $prop unexpectedly has EXTRAS magic";
        return;
    }

    # Here, have a valid swash return.  Examine it.
    my $returned_prop = $swash->{'TYPE'};

    # All properties but binary ones should have 'missing' and 'format'
    # entries
    $missing = $utf8::SwashInfo{$returned_prop}{'missing'};
    $missing = 'N' unless defined $missing;

    $format = $utf8::SwashInfo{$returned_prop}{'format'};
    $format = 'b' unless defined $format;

    my $requires_adjustment = $format =~ /^a/;

    if ($swash->{'LIST'} =~ /^V/) {
        @invlist = split "\n", $swash->{'LIST'} =~ s/ \s* (?: \# .* )? $ //xmgr;
        shift @invlist;
        foreach my $i (0 .. @invlist - 1) {
            $invmap[$i] = ($i % 2 == 0) ? 'Y' : 'N'
        }

        # The map includes lines for all code points; add one for the range
        # from 0 to the first Y.
        if ($invlist[0] != 0) {
            unshift @invlist, 0;
            unshift @invmap, 'N';
        }
    }
    else {
        # The LIST input lines look like:
        # ...
        # 0374\t\tCommon
        # 0375\t0377\tGreek   # [3]
        # 037A\t037D\tGreek   # [4]
        # 037E\t\tCommon
        # 0384\t\tGreek
        # ...
        #
        # Convert them to like
        # 0374 => Common
        # 0375 => Greek
        # 0378 => $missing
        # 037A => Greek
        # 037E => Common
        # 037F => $missing
        # 0384 => Greek
        #
        # For binary properties, the final non-comment column is absent, and
        # assumed to be 'Y'.

        foreach my $range (split "\n", $swash->{'LIST'}) {
            $range =~ s/ \s* (?: \# .* )? $ //xg; # rmv trailing space, comments

            # Find the beginning and end of the range on the line
            my ($hex_begin, $hex_end, $map) = split "\t", $range;
            my $begin = hex $hex_begin;
            no warnings 'portable';
            my $end = (defined $hex_end && $hex_end ne "")
                    ? hex $hex_end
                    : $begin;

            # Each time through the loop (after the first):
            # $invlist[-2] contains the beginning of the previous range processed
            # $invlist[-1] contains the end+1 of the previous range processed
            # $invmap[-2] contains the value of the previous range processed
            # $invmap[-1] contains the default value for missing ranges
            #                                                       ($missing)
            #
            # Thus, things are set up for the typical case of a new
            # non-adjacent range of non-missings to be added.  But, if the new
            # range is adjacent, it needs to replace the [-1] element; and if
            # the new range is a multiple value of the previous one, it needs
            # to be added to the [-2] map element.

            # The first time through, everything will be empty.  If the
            # property doesn't have a range that begins at 0, add one that
            # maps to $missing
            if (! @invlist) {
                if ($begin != 0) {
                    push @invlist, 0;
                    push @invmap, $missing;
                }
            }
            elsif (@invlist > 1 && $invlist[-2] == $begin) {

                # Here we handle the case where the input has multiple entries
                # for each code point.  mktables should have made sure that
                # each such range contains only one code point.  At this
                # point, $invlist[-1] is the $missing that was added at the
                # end of the last loop iteration, and [-2] is the last real
                # input code point, and that code point is the same as the one
                # we are adding now, making the new one a multiple entry.  Add
                # it to the existing entry, either by pushing it to the
                # existing list of multiple entries, or converting the single
                # current entry into a list with both on it.  This is all we
                # need do for this iteration.

                if ($end != $begin) {
                    croak __PACKAGE__, ":prop_invmap: Multiple maps per code point in '$prop' require single-element ranges: begin=$begin, end=$end, map=$map";
                }
                if (! ref $invmap[-2]) {
                    $invmap[-2] = [ $invmap[-2], $map ];
                }
                else {
                    push @{$invmap[-2]}, $map;
                }
                $has_multiples = 1;
                next;
            }
            elsif ($invlist[-1] == $begin) {

                # If the input isn't in the most compact form, so that there
                # are two adjacent ranges that map to the same thing, they
                # should be combined (EXCEPT where the arrays require
                # adjustments, in which case everything is already set up
                # correctly).  This happens in our constructed dt mapping, as
                # Element [-2] is the map for the latest range so far
                # processed.  Just set the beginning point of the map to
                # $missing (in invlist[-1]) to 1 beyond where this range ends.
                # For example, in
                # 12\t13\tXYZ
                # 14\t17\tXYZ
                # we have set it up so that it looks like
                # 12 => XYZ
                # 14 => $missing
                #
                # We now see that it should be
                # 12 => XYZ
                # 18 => $missing
                if (! $requires_adjustment && @invlist > 1 && ( (defined $map)
                                    ? $invmap[-2] eq $map
                                    : $invmap[-2] eq 'Y'))
                {
                    $invlist[-1] = $end + 1;
                    next;
                }

                # Here, the range started in the previous iteration that maps
                # to $missing starts at the same code point as this range.
                # That means there is no gap to fill that that range was
                # intended for, so we just pop it off the parallel arrays.
                pop @invlist;
                pop @invmap;
            }

            # Add the range beginning, and the range's map.
            push @invlist, $begin;
            if ($returned_prop eq 'ToDm') {

                # The decomposition maps are either a line like <hangul
                # syllable> which are to be taken as is; or a sequence of code
                # points in hex and separated by blanks.  Convert them to
                # decimal, and if there is more than one, use an anonymous
                # array as the map.
                if ($map =~ /^ < /x) {
                    push @invmap, $map;
                }
                else {
                    my @map = split " ", $map;
                    if (@map == 1) {
                        push @invmap, $map[0];
                    }
                    else {
                        push @invmap, \@map;
                    }
                }
            }
            else {

                # Otherwise, convert hex formatted list entries to decimal;
                # add a 'Y' map for the missing value in binary properties, or
                # otherwise, use the input map unchanged.
                $map = ($format eq 'x' || $format eq 'ax')
                    ? hex $map
                    : $format eq 'b'
                    ? 'Y'
                    : $map;
                push @invmap, $map;
            }

            # We just started a range.  It ends with $end.  The gap between it
            # and the next element in the list must be filled with a range
            # that maps to the default value.  If there is no gap, the next
            # iteration will pop this, unless there is no next iteration, and
            # we have filled all of the Unicode code space, so check for that
            # and skip.
            if ($end < $Unicode::UCD::MAX_CP) {
                push @invlist, $end + 1;
                push @invmap, $missing;
            }
        }
    }

    # If the property is empty, make all code points use the value for missing
    # ones.
    if (! @invlist) {
        push @invlist, 0;
        push @invmap, $missing;
    }

    # The final element is always for just the above-Unicode code points.  If
    # not already there, add it.  It merely splits the current final range
    # that extends to infinity into two elements, each with the same map.
    # (This is to conform with the API that says the final element is for
    # $MAX_UNICODE_CODEPOINT + 1 .. INFINITY.)
    if ($invlist[-1] != $MAX_UNICODE_CODEPOINT + 1) {
        push @invmap, $invmap[-1];
        push @invlist, $MAX_UNICODE_CODEPOINT + 1;
    }

    # The second component of the map are those values that require
    # non-standard specification, stored in SPECIALS.  These override any
    # duplicate code points in LIST.  If we are using a proxy, we may have
    # already set $overrides based on the proxy.
    $overrides = $swash->{'SPECIALS'} unless defined $overrides;
    if ($overrides) {

        # A negative $overrides implies that the SPECIALS should be ignored,
        # and a simple 'a' list is the value.
        if ($overrides < 0) {
            $format = 'a';
        }
        else {

            # Currently, all overrides are for properties that normally map to
            # single code points, but now some will map to lists of code
            # points (but there is an exception case handled below).
            $format = 'al';

            # Look through the overrides.
            foreach my $cp_maybe_utf8 (keys %$overrides) {
                my $cp;
                my @map;

                # If the overrides came from SPECIALS, the code point keys are
                # packed UTF-8.
                if ($overrides == $swash->{'SPECIALS'}) {
                    $cp = unpack("C0U", $cp_maybe_utf8);
                    @map = unpack "U0U*", $swash->{'SPECIALS'}{$cp_maybe_utf8};

                    # The empty string will show up unpacked as an empty
                    # array.
                    $format = 'ale' if @map == 0;
                }
                else {

                    # But if we generated the overrides, we didn't bother to
                    # pack them, and we, so far, do this only for properties
                    # that are 'a' ones.
                    $cp = $cp_maybe_utf8;
                    @map = hex $overrides->{$cp};
                    $format = 'a';
                }

                # Find the range that the override applies to.
                my $i = search_invlist(\@invlist, $cp);
                if ($cp < $invlist[$i] || $cp >= $invlist[$i + 1]) {
                    croak __PACKAGE__, "::prop_invmap: wrong_range, cp=$cp; i=$i, current=$invlist[$i]; next=$invlist[$i + 1]"
                }

                # And what that range currently maps to
                my $cur_map = $invmap[$i];

                # If there is a gap between the next range and the code point
                # we are overriding, we have to add elements to both arrays to
                # fill that gap, using the map that applies to it, which is
                # $cur_map, since it is part of the current range.
                if ($invlist[$i + 1] > $cp + 1) {
                    #use feature 'say';
                    #say "Before splice:";
                    #say 'i-2=[', $i-2, ']', sprintf("%04X maps to %s", $invlist[$i-2], $invmap[$i-2]) if $i >= 2;
                    #say 'i-1=[', $i-1, ']', sprintf("%04X maps to %s", $invlist[$i-1], $invmap[$i-1]) if $i >= 1;
                    #say 'i  =[', $i, ']', sprintf("%04X maps to %s", $invlist[$i], $invmap[$i]);
                    #say 'i+1=[', $i+1, ']', sprintf("%04X maps to %s", $invlist[$i+1], $invmap[$i+1]) if $i < @invlist + 1;
                    #say 'i+2=[', $i+2, ']', sprintf("%04X maps to %s", $invlist[$i+2], $invmap[$i+2]) if $i < @invlist + 2;

                    splice @invlist, $i + 1, 0, $cp + 1;
                    splice @invmap, $i + 1, 0, $cur_map;

                    #say "After splice:";
                    #say 'i-2=[', $i-2, ']', sprintf("%04X maps to %s", $invlist[$i-2], $invmap[$i-2]) if $i >= 2;
                    #say 'i-1=[', $i-1, ']', sprintf("%04X maps to %s", $invlist[$i-1], $invmap[$i-1]) if $i >= 1;
                    #say 'i  =[', $i, ']', sprintf("%04X maps to %s", $invlist[$i], $invmap[$i]);
                    #say 'i+1=[', $i+1, ']', sprintf("%04X maps to %s", $invlist[$i+1], $invmap[$i+1]) if $i < @invlist + 1;
                    #say 'i+2=[', $i+2, ']', sprintf("%04X maps to %s", $invlist[$i+2], $invmap[$i+2]) if $i < @invlist + 2;
                }

                # If the remaining portion of the range is multiple code
                # points (ending with the one we are replacing, guaranteed by
                # the earlier splice).  We must split it into two
                if ($invlist[$i] < $cp) {
                    $i++;   # Compensate for the new element

                    #use feature 'say';
                    #say "Before splice:";
                    #say 'i-2=[', $i-2, ']', sprintf("%04X maps to %s", $invlist[$i-2], $invmap[$i-2]) if $i >= 2;
                    #say 'i-1=[', $i-1, ']', sprintf("%04X maps to %s", $invlist[$i-1], $invmap[$i-1]) if $i >= 1;
                    #say 'i  =[', $i, ']', sprintf("%04X maps to %s", $invlist[$i], $invmap[$i]);
                    #say 'i+1=[', $i+1, ']', sprintf("%04X maps to %s", $invlist[$i+1], $invmap[$i+1]) if $i < @invlist + 1;
                    #say 'i+2=[', $i+2, ']', sprintf("%04X maps to %s", $invlist[$i+2], $invmap[$i+2]) if $i < @invlist + 2;

                    splice @invlist, $i, 0, $cp;
                    splice @invmap, $i, 0, 'dummy';

                    #say "After splice:";
                    #say 'i-2=[', $i-2, ']', sprintf("%04X maps to %s", $invlist[$i-2], $invmap[$i-2]) if $i >= 2;
                    #say 'i-1=[', $i-1, ']', sprintf("%04X maps to %s", $invlist[$i-1], $invmap[$i-1]) if $i >= 1;
                    #say 'i  =[', $i, ']', sprintf("%04X maps to %s", $invlist[$i], $invmap[$i]);
                    #say 'i+1=[', $i+1, ']', sprintf("%04X maps to %s", $invlist[$i+1], $invmap[$i+1]) if $i < @invlist + 1;
                    #say 'i+2=[', $i+2, ']', sprintf("%04X maps to %s", $invlist[$i+2], $invmap[$i+2]) if $i < @invlist + 2;
                }

                # Here, the range we are overriding contains a single code
                # point.  The result could be the empty string, a single
                # value, or a list.  If the last case, we use an anonymous
                # array.
                $invmap[$i] = (scalar @map == 0)
                               ? ""
                               : (scalar @map > 1)
                                  ? \@map
                                  : $map[0];
            }
        }
    }
    elsif ($format eq 'x') {

        # All hex-valued properties are really to code points, and have been
        # converted to decimal.
        $format = 's';
    }
    elsif ($returned_prop eq 'ToDm') {
        $format = 'ad';
    }
    elsif ($format eq 'sw') { # blank-separated elements to form a list.
        map { $_ = [ split " ", $_  ] if $_ =~ / / } @invmap;
        $format = 'sl';
    }
    elsif ($returned_prop eq 'ToNameAlias') {

        # This property currently doesn't have any lists, but theoretically
        # could
        $format = 'sl';
    }
    elsif ($returned_prop eq 'ToPerlDecimalDigit') {
        $format = 'ae';
    }
    elsif ($returned_prop eq 'ToNv') {

        # The one property that has this format is stored as a delta, so needs
        # to indicate that need to add code point to it.
        $format = 'ar';
    }
    elsif ($format ne 'n' && $format ne 'a') {

        # All others are simple scalars
        $format = 's';
    }
    if ($has_multiples &&  $format !~ /l/) {
	croak __PACKAGE__, "::prop_invmap: Wrong format '$format' for prop_invmap('$prop'); should indicate has lists";
    }

    return (\@invlist, \@invmap, $format, $missing);
}

sub search_invlist {

=pod

=head2 B<search_invlist()>

 use Unicode::UCD qw(prop_invmap prop_invlist);
 use Unicode::UCD 'search_invlist';

 my @invlist = prop_invlist($property_name);
 print $code_point, ((search_invlist(\@invlist, $code_point) // -1) % 2)
                     ? " isn't"
                     : " is",
     " in $property_name\n";

 my ($blocks_ranges_ref, $blocks_map_ref) = prop_invmap("Block");
 my $index = search_invlist($blocks_ranges_ref, $code_point);
 print "$code_point is in block ", $blocks_map_ref->[$index], "\n";

C<search_invlist> is used to search an inversion list returned by
C<prop_invlist> or C<prop_invmap> for a particular L</code point argument>.
C<undef> is returned if the code point is not found in the inversion list
(this happens only when it is not a legal L<code point argument>, or is less
than the list's first element).  A warning is raised in the first instance.

Otherwise, it returns the index into the list of the range that contains the
code point.; that is, find C<i> such that

    list[i]<= code_point < list[i+1].

As explained in L</prop_invlist()>, whether a code point is in the list or not
depends on if the index is even (in) or odd (not in).  And as explained in
L</prop_invmap()>, the index is used with the returned parallel array to find
the mapping.

=cut


    my $list_ref = shift;
    my $input_code_point = shift;
    my $code_point = _getcode($input_code_point);

    if (! defined $code_point) {
        carp __PACKAGE__, "::search_invlist: unknown code '$input_code_point'";
        return;
    }

    my $max_element = @$list_ref - 1;

    # Return undef if list is empty or requested item is before the first element.
    return if $max_element < 0;
    return if $code_point < $list_ref->[0];

    # Short cut something at the far-end of the table.  This also allows us to
    # refer to element [$i+1] without fear of being out-of-bounds in the loop
    # below.
    return $max_element if $code_point >= $list_ref->[$max_element];

    use integer;        # want integer division

    my $i = $max_element / 2;

    my $lower = 0;
    my $upper = $max_element;
    while (1) {

        if ($code_point >= $list_ref->[$i]) {

            # Here we have met the lower constraint.  We can quit if we
            # also meet the upper one.
            last if $code_point < $list_ref->[$i+1];

            $lower = $i;        # Still too low.

        }
        else {

            # Here, $code_point < $list_ref[$i], so look lower down.
            $upper = $i;
        }

        # Split search domain in half to try again.
        my $temp = ($upper + $lower) / 2;

        # No point in continuing unless $i changes for next time
        # in the loop.
        return $i if $temp == $i;
        $i = $temp;
    } # End of while loop

    # Here we have found the offset
    return $i;
}

=head2 Unicode::UCD::UnicodeVersion

This returns the version of the Unicode Character Database, in other words, the
version of the Unicode standard the database implements.  The version is a
string of numbers delimited by dots (C<'.'>).

=cut

my $UNICODEVERSION;

sub UnicodeVersion {
    unless (defined $UNICODEVERSION) {
	openunicode(\$VERSIONFH, "version");
	local $/ = "\n";
	chomp($UNICODEVERSION = <$VERSIONFH>);
	close($VERSIONFH);
	croak __PACKAGE__, "::VERSION: strange version '$UNICODEVERSION'"
	    unless $UNICODEVERSION =~ /^\d+(?:\.\d+)+$/;
    }
    $v_unicode_version = pack "C*", split /\./, $UNICODEVERSION;
    return $UNICODEVERSION;
}

=head2 B<Blocks versus Scripts>

The difference between a block and a script is that scripts are closer
to the linguistic notion of a set of code points required to present
languages, while block is more of an artifact of the Unicode code point
numbering and separation into blocks of consecutive code points (so far the
size of a block is some multiple of 16, like 128 or 256).

For example the Latin B<script> is spread over several B<blocks>, such
as C<Basic Latin>, C<Latin 1 Supplement>, C<Latin Extended-A>, and
C<Latin Extended-B>.  On the other hand, the Latin script does not
contain all the characters of the C<Basic Latin> block (also known as
ASCII): it includes only the letters, and not, for example, the digits
or the punctuation.

For blocks see L<http://www.unicode.org/Public/UNIDATA/Blocks.txt>

For scripts see UTR #24: L<http://www.unicode.org/unicode/reports/tr24/>

=head2 B<Matching Scripts and Blocks>

Scripts are matched with the regular-expression construct
C<\p{...}> (e.g. C<\p{Tibetan}> matches characters of the Tibetan script),
while C<\p{Blk=...}> is used for blocks (e.g. C<\p{Blk=Tibetan}> matches
any of the 256 code points in the Tibetan block).

=head2 Old-style versus new-style block names

Unicode publishes the names of blocks in two different styles, though the two
are equivalent under Unicode's loose matching rules.

The original style uses blanks and hyphens in the block names (except for
C<No_Block>), like so:

 Miscellaneous Mathematical Symbols-B

The newer style replaces these with underscores, like this:

 Miscellaneous_Mathematical_Symbols_B

This newer style is consistent with the values of other Unicode properties.
To preserve backward compatibility, all the functions in Unicode::UCD that
return block names (except one) return the old-style ones.  That one function,
L</prop_value_aliases()> can be used to convert from old-style to new-style:

 my $new_style = prop_values_aliases("block", $old_style);

Perl also has single-form extensions that refer to blocks, C<In_Cyrillic>,
meaning C<Block=Cyrillic>.  These have always been written in the new style.

To convert from new-style to old-style, follow this recipe:

 $old_style = charblock((prop_invlist("block=$new_style"))[0]);

(which finds the range of code points in the block using C<prop_invlist>,
gets the lower end of the range (0th element) and then looks up the old name
for its block using C<charblock>).

Note that starting in Unicode 6.1, many of the block names have shorter
synonyms.  These are always given in the new style.

=head1 AUTHOR

Jarkko Hietaniemi.  Now maintained by perl5 porters.

=cut

1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/share/perl/5.20.2/User/                                                                         0040755 0000000 0000000 00000000000 13077704254 013600  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/User/grent.pm                                                                 0100644 0000000 0000000 00000005526 12744441327 015261  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package User::grent;
use strict;

use 5.006_001;
our $VERSION = '1.01';
our(@EXPORT, @EXPORT_OK, %EXPORT_TAGS);
BEGIN { 
    use Exporter   ();
    @EXPORT      = qw(getgrent getgrgid getgrnam getgr);
    @EXPORT_OK   = qw($gr_name $gr_gid $gr_passwd $gr_mem @gr_members);
    %EXPORT_TAGS = ( FIELDS => [ @EXPORT_OK, @EXPORT ] );
}
use vars      @EXPORT_OK;

# Class::Struct forbids use of @ISA
sub import { goto &Exporter::import }

use Class::Struct qw(struct);
struct 'User::grent' => [
    name    => '$',
    passwd  => '$',
    gid	    => '$',
    members => '@',
];

sub populate (@) {
    return unless @_;
    my $gob = new();
    ($gr_name, $gr_passwd, $gr_gid) = @$gob[0,1,2] = @_[0,1,2];
    @gr_members = @{$gob->[3]} = split ' ', $_[3];
    return $gob;
} 

sub getgrent ( ) { populate(CORE::getgrent()) } 
sub getgrnam ($) { populate(CORE::getgrnam(shift)) } 
sub getgrgid ($) { populate(CORE::getgrgid(shift)) } 
sub getgr    ($) { ($_[0] =~ /^\d+/) ? &getgrgid : &getgrnam } 

1;
__END__

=head1 NAME

User::grent - by-name interface to Perl's built-in getgr*() functions

=head1 SYNOPSIS

 use User::grent;
 $gr = getgrgid(0) or die "No group zero";
 if ( $gr->name eq 'wheel' && @{$gr->members} > 1 ) {
     print "gid zero name wheel, with other members";
 } 

 use User::grent qw(:FIELDS);
 getgrgid(0) or die "No group zero";
 if ( $gr_name eq 'wheel' && @gr_members > 1 ) {
     print "gid zero name wheel, with other members";
 } 

 $gr = getgr($whoever);

=head1 DESCRIPTION

This module's default exports override the core getgrent(), getgruid(),
and getgrnam() functions, replacing them with versions that return
"User::grent" objects.  This object has methods that return the similarly
named structure field name from the C's passwd structure from F<grp.h>; 
namely name, passwd, gid, and members (not mem).  The first three
return scalars, the last an array reference.

You may also import all the structure fields directly into your namespace
as regular variables using the :FIELDS import tag.  (Note that this still
overrides your core functions.)  Access these fields as variables named
with a preceding C<gr_>.  Thus, C<$group_obj-E<gt>gid()> corresponds
to $gr_gid if you import the fields.  Array references are available as
regular array variables, so C<@{ $group_obj-E<gt>members() }> would be
simply @gr_members.

The getpw() function is a simple front-end that forwards
a numeric argument to getpwuid() and the rest to getpwnam().

To access this functionality without the core overrides,
pass the C<use> an empty import list, and then access
function functions with their full qualified names.
On the other hand, the built-ins are still available
via the C<CORE::> pseudo-package.

=head1 NOTE

While this class is currently implemented using the Class::Struct
module to build a struct-like class, you shouldn't rely upon this.

=head1 AUTHOR

Tom Christiansen
                                                                                                                                                                          usr/share/perl/5.20.2/User/pwent.pm                                                                 0100644 0000000 0000000 00000023217 12744441327 015274  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package User::pwent;

use 5.006;
our $VERSION = '1.00';

use strict;
use warnings;

use Config;
use Carp;

our(@EXPORT, @EXPORT_OK, %EXPORT_TAGS);
BEGIN {
    use Exporter   ();
    @EXPORT      = qw(getpwent getpwuid getpwnam getpw);
    @EXPORT_OK   = qw(
                        pw_has

                        $pw_name    $pw_passwd  $pw_uid  $pw_gid
                        $pw_gecos   $pw_dir     $pw_shell
                        $pw_expire  $pw_change  $pw_class
                        $pw_age
                        $pw_quota   $pw_comment
                        $pw_expire

                   );
    %EXPORT_TAGS = (
        FIELDS => [ grep(/^\$pw_/, @EXPORT_OK), @EXPORT ],
        ALL    => [ @EXPORT, @EXPORT_OK ],
    );
}
use vars grep /^\$pw_/, @EXPORT_OK;

#
# XXX: these mean somebody hacked this module's source
#      without understanding the underlying assumptions.
#
my $IE = "[INTERNAL ERROR]";

# Class::Struct forbids use of @ISA
sub import { goto &Exporter::import }

use Class::Struct qw(struct);
struct 'User::pwent' => [
    name    => '$',         # pwent[0]
    passwd  => '$',         # pwent[1]
    uid     => '$',         # pwent[2]
    gid     => '$',         # pwent[3]

    # you'll only have one/none of these three
    change  => '$',         # pwent[4]
    age     => '$',         # pwent[4]
    quota   => '$',         # pwent[4]

    # you'll only have one/none of these two
    comment => '$',         # pwent[5]
    class   => '$',         # pwent[5]

    # you might not have this one
    gecos   => '$',         # pwent[6]

    dir     => '$',         # pwent[7]
    shell   => '$',         # pwent[8]

    # you might not have this one
    expire  => '$',         # pwent[9]

];


# init our groks hash to be true if the built platform knew how
# to do each struct pwd field that perl can ever under any circumstances
# know about.  we do not use /^pw_?/, but just the tails.
sub _feature_init {
    our %Groks;         # whether build system knew how to do this feature
    for my $feep ( qw{
                         pwage      pwchange   pwclass    pwcomment
                         pwexpire   pwgecos    pwpasswd   pwquota
                     }
                 )
    {
        my $short = $feep =~ /^pw(.*)/
                  ? $1
                  : do {
                        # not cluck, as we know we called ourselves,
                        # and a confession is probably imminent anyway
                        warn("$IE $feep is a funny struct pwd field");
                        $feep;
                    };

        exists $Config{ "d_" . $feep }
            || confess("$IE Configure doesn't d_$feep");
        $Groks{$short} = defined $Config{ "d_" . $feep };
    }
    # assume that any that are left are always there
    for my $feep (grep /^\$pw_/s, @EXPORT_OK) {
        $feep =~ /^\$pw_(.*)/;
        $Groks{$1} = 1 unless defined $Groks{$1};
    }
}

# With arguments, reports whether one or more fields are all implemented
# in the build machine's struct pwd pw_*.  May be whitespace separated.
# We do not use /^pw_?/, just the tails.
#
# Without arguments, returns the list of fields implemented on build
# machine, space separated in scalar context.
#
# Takes exception to being asked whether this machine's struct pwd has
# a field that Perl never knows how to provide under any circumstances.
# If the module does this idiocy to itself, the explosion is noisier.
#
sub pw_has {
    our %Groks;         # whether build system knew how to do this feature
    my $cando = 1;
    my $sploder = caller() ne __PACKAGE__
                    ? \&croak
                    : sub { confess("$IE @_") };
    if (@_ == 0) {
        my @valid = sort grep { $Groks{$_} } keys %Groks;
        return wantarray ? @valid : "@valid";
    }
    for my $feep (map { split } @_) {
        defined $Groks{$feep}
            || $sploder->("$feep is never a valid struct pwd field");
        $cando &&= $Groks{$feep};
    }
    return $cando;
}

sub _populate (@) {
    return unless @_;
    my $pwob = new();

    # Any that haven't been pw_had are assumed on "all" platforms of
    # course, this may not be so, but you can't get here otherwise,
    # since the underlying core call already took exception to your
    # impudence.

    $pw_name    = $pwob->name   ( $_[0] );
    $pw_passwd  = $pwob->passwd ( $_[1] )   if pw_has("passwd");
    $pw_uid     = $pwob->uid    ( $_[2] );
    $pw_gid     = $pwob->gid    ( $_[3] );

    if (pw_has("change")) {
        $pw_change      = $pwob->change ( $_[4] );
    }
    elsif (pw_has("age")) {
        $pw_age         = $pwob->age    ( $_[4] );
    }
    elsif (pw_has("quota")) {
        $pw_quota       = $pwob->quota  ( $_[4] );
    }

    if (pw_has("class")) {
        $pw_class       = $pwob->class  ( $_[5] );
    }
    elsif (pw_has("comment")) {
        $pw_comment     = $pwob->comment( $_[5] );
    }

    $pw_gecos   = $pwob->gecos  ( $_[6] ) if pw_has("gecos");

    $pw_dir     = $pwob->dir    ( $_[7] );
    $pw_shell   = $pwob->shell  ( $_[8] );

    $pw_expire  = $pwob->expire ( $_[9] ) if pw_has("expire");

    return $pwob;
}

sub getpwent ( ) { _populate(CORE::getpwent()) }
sub getpwnam ($) { _populate(CORE::getpwnam(shift)) }
sub getpwuid ($) { _populate(CORE::getpwuid(shift)) }
sub getpw    ($) { ($_[0] =~ /^\d+\z/s) ? &getpwuid : &getpwnam }

_feature_init();

1;
__END__

=head1 NAME

User::pwent - by-name interface to Perl's built-in getpw*() functions

=head1 SYNOPSIS

 use User::pwent;
 $pw = getpwnam('daemon')       || die "No daemon user";
 if ( $pw->uid == 1 && $pw->dir =~ m#^/(bin|tmp)?\z#s ) {
     print "gid 1 on root dir";
 }

 $real_shell = $pw->shell || '/bin/sh';

 for (($fullname, $office, $workphone, $homephone) =
        split /\s*,\s*/, $pw->gecos)
 {
    s/&/ucfirst(lc($pw->name))/ge;
 }

 use User::pwent qw(:FIELDS);
 getpwnam('daemon')             || die "No daemon user";
 if ( $pw_uid == 1 && $pw_dir =~ m#^/(bin|tmp)?\z#s ) {
     print "gid 1 on root dir";
 }

 $pw = getpw($whoever);

 use User::pwent qw/:DEFAULT pw_has/;
 if (pw_has(qw[gecos expire quota])) { .... }
 if (pw_has("name uid gid passwd"))  { .... }
 print "Your struct pwd has: ", scalar pw_has(), "\n";

=head1 DESCRIPTION

This module's default exports override the core getpwent(), getpwuid(),
and getpwnam() functions, replacing them with versions that return
C<User::pwent> objects.  This object has methods that return the
similarly named structure field name from the C's passwd structure
from F<pwd.h>, stripped of their leading "pw_" parts, namely C<name>,
C<passwd>, C<uid>, C<gid>, C<change>, C<age>, C<quota>, C<comment>,
C<class>, C<gecos>, C<dir>, C<shell>, and C<expire>.  The C<passwd>,
C<gecos>, and C<shell> fields are tainted when running in taint mode.

You may also import all the structure fields directly into your
namespace as regular variables using the :FIELDS import tag.  (Note
that this still overrides your core functions.)  Access these fields
as variables named with a preceding C<pw_> in front their method
names.  Thus, C<< $passwd_obj->shell >> corresponds to $pw_shell
if you import the fields.

The getpw() function is a simple front-end that forwards
a numeric argument to getpwuid() and the rest to getpwnam().

To access this functionality without the core overrides, pass the
C<use> an empty import list, and then access function functions
with their full qualified names.  The built-ins are always still
available via the C<CORE::> pseudo-package.

=head2 System Specifics

Perl believes that no machine ever has more than one of C<change>,
C<age>, or C<quota> implemented, nor more than one of either
C<comment> or C<class>.  Some machines do not support C<expire>,
C<gecos>, or allegedly, C<passwd>.  You may call these methods
no matter what machine you're on, but they return C<undef> if
unimplemented.

You may ask whether one of these was implemented on the system Perl
was built on by asking the importable C<pw_has> function about them.
This function returns true if all parameters are supported fields
on the build platform, false if one or more were not, and raises
an exception if you asked about a field that Perl never knows how
to provide.  Parameters may be in a space-separated string, or as
separate arguments.  If you pass no parameters, the function returns
the list of C<struct pwd> fields supported by your build platform's
C library, as a list in list context, or a space-separated string
in scalar context.  Note that just because your C library had
a field doesn't necessarily mean that it's fully implemented on
that system.

Interpretation of the C<gecos> field varies between systems, but
traditionally holds 4 comma-separated fields containing the user's
full name, office location, work phone number, and home phone number.
An C<&> in the gecos field should be replaced by the user's properly
capitalized login C<name>.  The C<shell> field, if blank, must be
assumed to be F</bin/sh>.  Perl does not do this for you.  The
C<passwd> is one-way hashed garble, not clear text, and may not be
unhashed save by brute-force guessing.  Secure systems use more a
more secure hashing than DES.  On systems supporting shadow password
systems, Perl automatically returns the shadow password entry when
called by a suitably empowered user, even if your underlying
vendor-provided C library was too short-sighted to realize it should
do this.

See passwd(5) and getpwent(3) for details.

=head1 NOTE

While this class is currently implemented using the Class::Struct
module to build a struct-like class, you shouldn't rely upon this.

=head1 AUTHOR

Tom Christiansen

=head1 HISTORY

=over 4

=item March 18th, 2000

Reworked internals to support better interface to dodgey fields
than normal Perl function provides.  Added pw_has() field.  Improved
documentation.

=back
                                                                                                                                                                                                                                                                                                                                                                                 usr/share/perl/5.20.2/_charnames.pm                                                                 0100644 0000000 0000000 00000077202 12744441327 015324  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # !!!!!!!   INTERNAL PERL USE ONLY   !!!!!!!
# This helper module is for internal use by core Perl only.  This module is
# subject to change or removal at any time without notice.  Don't use it
# directly.  Use the public <charnames> module instead.

package _charnames;
use strict;
use warnings;
use File::Spec;
our $VERSION = '1.39';
use unicore::Name;    # mktables-generated algorithmically-defined names

use bytes ();          # for $bytes::hint_bits
use re "/aa";          # Everything in here should be ASCII

$Carp::Internal{ (__PACKAGE__) } = 1;

# Translate between Unicode character names and their code points.  This is a
# submodule of package <charnames>, used to allow \N{...} to be autoloaded,
# but it was decided not to autoload the various functions in charnames; the
# splitting allows this behavior.
#
# The official names with their code points are stored in a table in
# lib/unicore/Name.pl which is read in as a large string (almost 3/4 Mb in
# Unicode 6.0).  Each code point/name combination is separated by a \n in the
# string.  (Some of the CJK and the Hangul syllable names are determined
# instead algorithmically via subroutines stored instead in
# lib/unicore/Name.pm).  Because of the large size of this table, it isn't
# converted into hashes for faster lookup.
#
# But, user defined aliases are stored in their own hashes, as are Perl
# extensions to the official names.  These are checked first before looking at
# the official table.
#
# Basically, the table is grepped for the input code point (viacode()) or
# name (the other functions), and the corresponding value on the same line is
# returned.  The grepping is done by turning the input into a regular
# expression.  Thus, the same table does double duty, used by both name and
# code point lookup.  (If we were to have hashes, we would need two, one for
# each lookup direction.)
#
# For loose name matching, the logical thing would be to have a table
# with all the ignorable characters squeezed out, and then grep it with the
# similiarly-squeezed input name.  (And this is in fact how the lookups are
# done with the small Perl extension hashes.)  But since we need to be able to
# go from code point to official name, the original table would still need to
# exist.  Due to the large size of the table, it was decided to not read
# another very large string into memory for a second table.  Instead, the
# regular expression of the input name is modified to have optional spaces and
# dashes between characters.  For example, in strict matching, the regular
# expression would be:
#   qr/\tDIGIT ONE$/m
# Under loose matching, the blank would be squeezed out, and the re would be:
#   qr/\tD[- ]?I[- ]?G[- ]?I[- ]?T[- ]?O[- ]?N[- ]?E$/m
# which matches a blank or dash between any characters in the official table.
#
# This is also how script lookup is done.  Basically the re looks like
#   qr/ (?:LATIN|GREEK|CYRILLIC) (?:SMALL )?LETTER $name/
# where $name is the loose or strict regex for the remainder of the name.

# The hashes are stored as utf8 strings.  This makes it easier to deal with
# sequences.  I (khw) also tried making Name.pl utf8, but it slowed things
# down by a factor of 7.  I then tried making Name.pl store the ut8
# equivalents but not calling them utf8.  That led to similar speed as leaving
# it alone, but since that is harder for a human to parse, I left it as-is.

my %system_aliases = (

    'SINGLE-SHIFT 2'                => pack("U", utf8::unicode_to_native(0x8E)),
    'SINGLE-SHIFT 3'                => pack("U", utf8::unicode_to_native(0x8F)),
    'PRIVATE USE 1'                 => pack("U", utf8::unicode_to_native(0x91)),
    'PRIVATE USE 2'                 => pack("U", utf8::unicode_to_native(0x92)),
);

# These are the aliases above that differ under :loose and :full matching
# because the :full versions have blanks or hyphens in them.
#my %loose_system_aliases = (
#);

#my %deprecated_aliases;
#$deprecated_aliases{'BELL'} = pack("U", utf8::unicode_to_native(0x07)) if $^V lt v5.17.0;

#my %loose_deprecated_aliases = (
#);

# These are special cased in :loose matching, differing only in a medial
# hyphen
my $HANGUL_JUNGSEONG_O_E_utf8 = pack("U", 0x1180);
my $HANGUL_JUNGSEONG_OE_utf8 = pack("U", 0x116C);


my $txt;  # The table of official character names

my %full_names_cache; # Holds already-looked-up names, so don't have to
# re-look them up again.  The previous versions of charnames had scoping
# bugs.  For example if we use script A in one scope and find and cache
# what Z resolves to, we can't use that cache in a different scope that
# uses script B instead of A, as Z might be an entirely different letter
# there; or there might be different aliases in effect in different
# scopes, or :short may be in effect or not effect in different scopes,
# or various combinations thereof.  This was solved in this version
# mostly by moving things to %^H.  But some things couldn't be moved
# there.  One of them was the cache of runtime looked-up names, in part
# because %^H is read-only at runtime.  I (khw) don't know why the cache
# was run-time only in the previous versions: perhaps oversight; perhaps
# that compile time looking doesn't happen in a loop so didn't think it
# was worthwhile; perhaps not wanting to make the cache too large.  But
# I decided to make it compile time as well; this could easily be
# changed.
# Anyway, this hash is not scoped, and is added to at runtime.  It
# doesn't have scoping problems because the data in it is restricted to
# official names, which are always invariant, and we only set it and
# look at it at during :full lookups, so is unaffected by any other
# scoped options.  I put this in to maintain parity with the older
# version.  If desired, a %short_names cache could also be made, as well
# as one for each script, say in %script_names_cache, with each key
# being a hash for a script named in a 'use charnames' statement.  I
# decided not to do that for now, just because it's added complication,
# and because I'm just trying to maintain parity, not extend it.

# Like %full_names_cache, but for use when :loose is in effect.  There needs
# to be two caches because :loose may not be in effect for a scope, and a
# loose name could inappropriately be returned when only exact matching is
# called for.
my %loose_names_cache;

# Designed so that test decimal first, and then hex.  Leading zeros
# imply non-decimal, as do non-[0-9]
my $decimal_qr = qr/^[1-9]\d*$/;

# Returns the hex number in $1.
my $hex_qr = qr/^(?:[Uu]\+|0[xX])?([[:xdigit:]]+)$/;

sub croak
{
  require Carp; goto &Carp::croak;
} # croak

sub carp
{
  require Carp; goto &Carp::carp;
} # carp

sub alias (@) # Set up a single alias
{
  my @errors;

  my $alias = ref $_[0] ? $_[0] : { @_ };
  foreach my $name (sort keys %$alias) {  # Sort only because it helps having
                                          # deterministic output for
                                          # t/lib/charnames/alias
    my $value = $alias->{$name};
    next unless defined $value;          # Omit if screwed up.

    # Is slightly slower to just after this statement see if it is
    # decimal, since we already know it is after having converted from
    # hex, but makes the code easier to maintain, and is called
    # infrequently, only at compile-time
    if ($value !~ $decimal_qr && $value =~ $hex_qr) {
      my $temp = CORE::hex $1;
      $temp = utf8::unicode_to_native($temp) if $value =~ /^[Uu]\+/;
      $value = $temp;
    }
    if ($value =~ $decimal_qr) {
        no warnings qw(non_unicode surrogate nonchar); # Allow any of these
        $^H{charnames_ord_aliases}{$name} = pack("U", $value);

        # Use a canonical form.
        $^H{charnames_inverse_ords}{sprintf("%05X", $value)} = $name;
    }
    else {
        # This regex needs to be sync'd with the code in toke.c that checks
        # for the same thing
        if ($name !~ / ^
                       \p{_Perl_Charname_Begin}
                       \p{_Perl_Charname_Continue}*
                       $ /x) {

          push @errors, $name;
        }
        else {
          $^H{charnames_name_aliases}{$name} = $value;

          if (warnings::enabled('deprecated')) {
            if ($name =~ / ( .* \s ) ( \s* ) $ /x) {
              carp "Trailing white-space in a charnames alias definition is deprecated; marked by <-- HERE in '$1 <-- HERE " . $2 . "'";
            }

            # Use '+' instead of '*' in this regex, because any trailing
            # blanks have already been warned about.
            if ($name =~ / ( .*? \s{2} ) ( .+ ) /x) {
              carp "A sequence of multiple spaces in a charnames alias definition is deprecated; marked by <-- HERE in '$1 <-- HERE " . $2 . "'";
            }
          }
        }
    }
  }

  # We find and output all errors from this :alias definition, rather than
  # failing on the first one, so fewer runs are needed to get it to compile
  if (@errors) {
    foreach my $name (@errors) {
      my $ok = "";
      my $nbsp = chr utf8::unicode_to_native(0xa0);
      $ok = $1 if $name =~ / ^ ( \p{Alpha} [-\p{XPosixWord} ():$nbsp]* ) /x;
      my $first_bad = substr($name, length($ok), 1);
      $name = "Invalid character in charnames alias definition; marked by <-- HERE in '$ok$first_bad<-- HERE " . substr($name, length($ok) + 1) . "'";
    }
    croak join "\n", @errors;
  }

  return;
} # alias

sub not_legal_use_bytes_msg {
  my ($name, $utf8) = @_;
  my $return;

  if (length($utf8) == 1) {
    $return = sprintf("Character 0x%04x with name '%s' is", ord $utf8, $name);
  } else {
    $return = sprintf("String with name '%s' (and ordinals %s) contains character(s)", $name, join(" ", map { sprintf "0x%04X", ord $_ } split(//, $utf8)));
  }
  return $return . " above 0xFF with 'use bytes' in effect";
}

sub alias_file ($)  # Reads a file containing alias definitions
{
  my ($arg, $file) = @_;
  if (-f $arg && File::Spec->file_name_is_absolute ($arg)) {
    $file = $arg;
  }
  elsif ($arg =~ m/ ^ \p{_Perl_IDStart} \p{_Perl_IDCont}* $/x) {
    $file = "unicore/${arg}_alias.pl";
  }
  else {
    croak "Charnames alias file names can only have identifier characters";
  }
  if (my @alias = do $file) {
    @alias == 1 && !defined $alias[0] and
      croak "$file cannot be used as alias file for charnames";
    @alias % 2 and
      croak "$file did not return a (valid) list of alias pairs";
    alias (@alias);
    return (1);
  }
  0;
} # alias_file

# For use when don't import anything.  This structure must be kept in
# sync with the one that import() fills up.
my %dummy_H = (
                charnames_stringified_names => "",
                charnames_stringified_ords => "",
                charnames_scripts => "",
                charnames_full => 1,
                charnames_loose => 0,
                charnames_short => 0,
              );


sub lookup_name ($$$) {
  my ($name, $wants_ord, $runtime) = @_;

  # Lookup the name or sequence $name in the tables.  If $wants_ord is false,
  # returns the string equivalent of $name; if true, returns the ordinal value
  # instead, but in this case $name must not be a sequence; otherwise undef is
  # returned and a warning raised.  $runtime is 0 if compiletime, otherwise
  # gives the number of stack frames to go back to get the application caller
  # info.
  # If $name is not found, returns undef in runtime with no warning; and in
  # compiletime, the Unicode replacement character, with a warning.

  # It looks first in the aliases, then in the large table of official Unicode
  # names.

  my $utf8;       # The string result
  my $save_input;

  if ($runtime) {

    my $hints_ref = (caller($runtime))[10];

    # If we didn't import anything (which happens with 'use charnames ()',
    # substitute a dummy structure.
    $hints_ref = \%dummy_H if ! defined $hints_ref
                              || (! defined $hints_ref->{charnames_full}
                                  && ! defined $hints_ref->{charnames_loose});

    # At runtime, but currently not at compile time, $^H gets
    # stringified, so un-stringify back to the original data structures.
    # These get thrown away by perl before the next invocation
    # Also fill in the hash with the non-stringified data.
    # N.B.  New fields must be also added to %dummy_H

    %{$^H{charnames_name_aliases}} = split ',',
                                      $hints_ref->{charnames_stringified_names};
    %{$^H{charnames_ord_aliases}} = split ',',
                                      $hints_ref->{charnames_stringified_ords};
    $^H{charnames_scripts} = $hints_ref->{charnames_scripts};
    $^H{charnames_full} = $hints_ref->{charnames_full};
    $^H{charnames_loose} = $hints_ref->{charnames_loose};
    $^H{charnames_short} = $hints_ref->{charnames_short};
  }

  my $loose = $^H{charnames_loose};
  my $lookup_name;  # Input name suitably modified for grepping for in the
                    # table

  # User alias should be checked first or else can't override ours, and if we
  # were to add any, could conflict with theirs.
  if (exists $^H{charnames_ord_aliases}{$name}) {
    $utf8 = $^H{charnames_ord_aliases}{$name};
  }
  elsif (exists $^H{charnames_name_aliases}{$name}) {
    $name = $^H{charnames_name_aliases}{$name};
    $save_input = $lookup_name = $name;  # Cache the result for any error
                                         # message
    # The aliases are documented to not match loosely, so change loose match
    # into full.
    if ($loose) {
      $loose = 0;
      $^H{charnames_full} = 1;
    }
  }
  else {

    # Here, not a user alias.  That means that loose matching may be in
    # effect; will have to modify the input name.
    $lookup_name = $name;
    if ($loose) {
      $lookup_name = uc $lookup_name;

      # Squeeze out all underscores
      $lookup_name =~ s/_//g;

      # Remove all medial hyphens
      $lookup_name =~ s/ (?<= \S  ) - (?= \S  )//gx;

      # Squeeze out all spaces
      $lookup_name =~ s/\s//g;
    }

    # Here, $lookup_name has been modified as necessary for looking in the
    # hashes.  Check the system alias files next.  Most of these aliases are
    # the same for both strict and loose matching.  To save space, the ones
    # which differ are in their own separate hash, which is checked if loose
    # matching is selected and the regular match fails.  To save time, the
    # loose hashes could be expanded to include all aliases, and there would
    # only have to be one check.  But if someone specifies :loose, they are
    # interested in convenience over speed, and the time for this second check
    # is miniscule compared to the rest of the routine.
    if (exists $system_aliases{$lookup_name}) {
      $utf8 = $system_aliases{$lookup_name};
    }
    # There are currently no entries in this hash, so don't waste time looking
    # for them.  But the code is retained for the unlikely possibility that
    # some will be added in the future.
#    elsif ($loose && exists $loose_system_aliases{$lookup_name}) {
#      $utf8 = $loose_system_aliases{$lookup_name};
#    }
#    if (exists $deprecated_aliases{$lookup_name}) {
#      require warnings;
#      warnings::warnif('deprecated',
#                       "Unicode character name \"$name\" is deprecated, use \""
#                       . viacode(ord $deprecated_aliases{$lookup_name})
#                       . "\" instead");
#      $utf8 = $deprecated_aliases{$lookup_name};
#    }
    # There are currently no entries in this hash, so don't waste time looking
    # for them.  But the code is retained for the unlikely possibility that
    # some will be added in the future.
#    elsif ($loose && exists $loose_deprecated_aliases{$lookup_name}) {
#      require warnings;
#      warnings::warnif('deprecated',
#                       "Unicode character name \"$name\" is deprecated, use \""
#                       . viacode(ord $loose_deprecated_aliases{$lookup_name})
#                       . "\" instead");
#      $utf8 = $loose_deprecated_aliases{$lookup_name};
#    }
  }

  my @off;  # Offsets into table of pattern match begin and end

  # If haven't found it yet...
  if (! defined $utf8) {

    # See if has looked this input up earlier.
    if (! $loose && $^H{charnames_full} && exists $full_names_cache{$name}) {
      $utf8 = $full_names_cache{$name};
    }
    elsif ($loose && exists $loose_names_cache{$name}) {
      $utf8 = $loose_names_cache{$name};
    }
    else { # Here, must do a look-up

      # If full or loose matching succeeded, points to where to cache the
      # result
      my $cache_ref;

      ## Suck in the code/name list as a big string.
      ## Lines look like:
      ##     "00052\tLATIN CAPITAL LETTER R\n"
      # or
      #      "0052 0303\tLATIN CAPITAL LETTER R WITH TILDE\n"
      $txt = do "unicore/Name.pl" unless $txt;

      ## @off will hold the index into the code/name string of the start and
      ## end of the name as we find it.

      ## If :loose, look for a loose match; if :full, look for the name
      ## exactly
      # First, see if the name is one which is algorithmically determinable.
      # The subroutine is included in Name.pl.  The table contained in
      # $txt doesn't contain these.  Experiments show that checking
      # for these before checking for the regular names has no
      # noticeable impact on performance for the regular names, but
      # the other way around slows down finding these immensely.
      # Algorithmically determinables are not placed in the cache because
      # that uses up memory, and finding these again is fast.
      if (($loose || $^H{charnames_full})
          && (defined (my $ord = charnames::name_to_code_point_special($lookup_name, $loose))))
      {
        $utf8 = pack("U", $ord);
      }
      else {

        # Not algorithmically determinable; look up in the table.  The name
        # will be turned into a regex, so quote any meta characters.
        $lookup_name = quotemeta $lookup_name;

        if ($loose) {

          # For loose matches, $lookup_name has already squeezed out the
          # non-essential characters.  We have to add in code to make the
          # squeezed version match the non-squeezed equivalent in the table.
          # The only remaining hyphens are ones that start or end a word in
          # the original.  They have been quoted in $lookup_name so they look
          # like "\-".  Change all other characters except the backslash
          # quotes for any metacharacters, and the final character, so that
          # e.g., COLON gets transformed into: /C[- ]?O[- ]?L[- ]?O[- ]?N/
          $lookup_name =~ s/ (?! \\ -)    # Don't do this to the \- sequence
                             ( [^-\\] )   # Nor the "-" within that sequence,
                                          # nor the "\" that quotes metachars,
                                          # but otherwise put the char into $1
                             (?=.)        # And don't do it for the final char
                           /$1\[- \]?/gx; # And add an optional blank or
                                          # '-' after each $1 char

          # Those remaining hyphens were originally at the beginning or end of
          # a word, so they can match either a blank before or after, but not
          # both.  (Keep in mind that they have been quoted, so are a '\-'
          # sequence)
          $lookup_name =~ s/\\ -/(?:- | -)/xg;
        }

        # Do the lookup in the full table if asked for, and if succeeds
        # save the offsets and set where to cache the result.
        if (($loose || $^H{charnames_full}) && $txt =~ /\t$lookup_name$/m) {
          @off = ($-[0] + 1, $+[0]);    # The 1 is for the tab
          $cache_ref = ($loose) ? \%loose_names_cache : \%full_names_cache;
        }
        else {

          # Here, didn't look for, or didn't find the name.
          # If :short is allowed, see if input is like "greek:Sigma".
          # Keep in mind that $lookup_name has had the metas quoted.
          my $scripts_trie = "";
          my $name_has_uppercase;
          if (($^H{charnames_short})
              && $lookup_name =~ /^ (?: \\ \s)*   # Quoted space
                                    (.+?)         # $1 = the script
                                    (?: \\ \s)*
                                    \\ :          # Quoted colon
                                    (?: \\ \s)*
                                    (.+?)         # $2 = the name
                                    (?: \\ \s)* $
                                  /xs)
          {
              # Even in non-loose matching, the script traditionally has been
              # case insensitive
              $scripts_trie = "\U$1";
              $lookup_name = $2;

              # Use original name to find its input casing, but ignore the
              # script part of that to make the determination.
              $save_input = $name if ! defined $save_input;
              $name =~ s/.*?://;
              $name_has_uppercase = $name =~ /[[:upper:]]/;
          }
          else { # Otherwise look in allowed scripts
              $scripts_trie = $^H{charnames_scripts};

              # Use original name to find its input casing
              $name_has_uppercase = $name =~ /[[:upper:]]/;
          }

          my $case = $name_has_uppercase ? "CAPITAL" : "SMALL";
          return if (! $scripts_trie || $txt !~
             /\t (?: $scripts_trie ) \ (?:$case\ )? LETTER \ \U$lookup_name $/xm);

          # Here have found the input name in the table.
          @off = ($-[0] + 1, $+[0]);  # The 1 is for the tab
        }

        # Here, the input name has been found; we haven't set up the output,
        # but we know where in the string
        # the name starts.  The string is set up so that for single characters
        # (and not named sequences), the name is preceded immediately by a
        # tab and 5 hex digits for its code, with a \n before those.  Named
        # sequences won't have the 7th preceding character be a \n.
        # (Actually, for the very first entry in the table this isn't strictly
        # true: subtracting 7 will yield -1, and the substr below will
        # therefore yield the very last character in the table, which should
        # also be a \n, so the statement works anyway.)
        if (substr($txt, $off[0] - 7, 1) eq "\n") {
          $utf8 = pack("U", CORE::hex substr($txt, $off[0] - 6, 5));

          # Handle the single loose matching special case, in which two names
          # differ only by a single medial hyphen.  If the original had a
          # hyphen (or more) in the right place, then it is that one.
          $utf8 = $HANGUL_JUNGSEONG_O_E_utf8
                  if $loose
                     && $utf8 eq $HANGUL_JUNGSEONG_OE_utf8
                     && $name =~ m/O \s* - [-\s]* E/ix;
                     # Note that this wouldn't work if there were a 2nd
                     # OE in the name
        }
        else {

          # Here, is a named sequence.  Need to go looking for the beginning,
          # which is just after the \n from the previous entry in the table.
          # The +1 skips past that newline, or, if the rindex() fails, to put
          # us to an offset of zero.
          my $charstart = rindex($txt, "\n", $off[0] - 7) + 1;
          $utf8 = pack("U*", map { CORE::hex }
              split " ", substr($txt, $charstart, $off[0] - $charstart - 1));
        }
      }

      # Cache the input so as to not have to search the large table
      # again, but only if it came from the one search that we cache.
      # (Haven't bothered with the pain of sorting out scoping issues for the
      # scripts searches.)
      $cache_ref->{$name} = $utf8 if defined $cache_ref;
    }
  }


  # Here, have the utf8.  If the return is to be an ord, must be any single
  # character.
  if ($wants_ord) {
    return ord($utf8) if length $utf8 == 1;
  }
  else {

    # Here, wants string output.  If utf8 is acceptable, just return what
    # we've got; otherwise attempt to convert it to non-utf8 and return that.
    my $in_bytes = ($runtime)
                   ? (caller $runtime)[8] & $bytes::hint_bits
                   : $^H & $bytes::hint_bits;
    return $utf8 if (! $in_bytes || utf8::downgrade($utf8, 1)) # The 1 arg
                                                  # means don't die on failure
  }

  # Here, there is an error:  either there are too many characters, or the
  # result string needs to be non-utf8, and at least one character requires
  # utf8.  Prefer any official name over the input one for the error message.
  if (@off) {
    $name = substr($txt, $off[0], $off[1] - $off[0]) if @off;
  }
  else {
    $name = (defined $save_input) ? $save_input : $_[0];
  }

  if ($wants_ord) {
    # Only way to get here in this case is if result too long.  Message
    # assumes that our only caller that requires single char result is
    # vianame.
    carp "charnames::vianame() doesn't handle named sequences ($name).  Use charnames::string_vianame() instead";
    return;
  }

  # Only other possible failure here is from use bytes.
  if ($runtime) {
    carp not_legal_use_bytes_msg($name, $utf8);
    return;
  } else {
    croak not_legal_use_bytes_msg($name, $utf8);
  }

} # lookup_name

sub charnames {

  # For \N{...}.  Looks up the character name and returns the string
  # representation of it.

  # The first 0 arg means wants a string returned; the second that we are in
  # compile time
  return lookup_name($_[0], 0, 0);
}

sub import
{
  shift; ## ignore class name

  if (not @_) {
    carp("'use charnames' needs explicit imports list");
  }
  $^H{charnames} = \&charnames ;
  $^H{charnames_ord_aliases} = {};
  $^H{charnames_name_aliases} = {};
  $^H{charnames_inverse_ords} = {};
  # New fields must be added to %dummy_H, and the code in lookup_name()
  # that copies fields from the runtime structure

  ##
  ## fill %h keys with our @_ args.
  ##
  my ($promote, %h, @args) = (0);
  while (my $arg = shift) {
    if ($arg eq ":alias") {
      @_ or
        croak ":alias needs an argument in charnames";
      my $alias = shift;
      if (ref $alias) {
        ref $alias eq "HASH" or
          croak "Only HASH reference supported as argument to :alias";
        alias ($alias);
        $promote = 1;
        next;
      }
      if ($alias =~ m{:(\w+)$}) {
        $1 eq "full" || $1 eq "loose" || $1 eq "short" and
          croak ":alias cannot use existing pragma :$1 (reversed order?)";
        alias_file ($1) and $promote = 1;
        next;
      }
      alias_file ($alias) and $promote = 1;
      next;
    }
    if (substr($arg, 0, 1) eq ':'
      and ! ($arg eq ":full" || $arg eq ":short" || $arg eq ":loose"))
    {
      warn "unsupported special '$arg' in charnames";
      next;
    }
    push @args, $arg;
  }

  @args == 0 && $promote and @args = (":full");
  @h{@args} = (1) x @args;

  # Don't leave these undefined as are tested for in lookup_names
  $^H{charnames_full} = delete $h{':full'} || 0;
  $^H{charnames_loose} = delete $h{':loose'} || 0;
  $^H{charnames_short} = delete $h{':short'} || 0;
  my @scripts = map { uc quotemeta } keys %h;

  ##
  ## If utf8? warnings are enabled, and some scripts were given,
  ## see if at least we can find one letter from each script.
  ##
  if (warnings::enabled('utf8') && @scripts) {
    $txt = do "unicore/Name.pl" unless $txt;

    for my $script (@scripts) {
      if (not $txt =~ m/\t$script (?:CAPITAL |SMALL )?LETTER /) {
        warnings::warn('utf8',  "No such script: '$script'");
        $script = quotemeta $script;  # Escape it, for use in the re.
      }
    }
  }

  # %^H gets stringified, so serialize it ourselves so can extract the
  # real data back later.
  $^H{charnames_stringified_ords} = join ",", %{$^H{charnames_ord_aliases}};
  $^H{charnames_stringified_names} = join ",", %{$^H{charnames_name_aliases}};
  $^H{charnames_stringified_inverse_ords} = join ",", %{$^H{charnames_inverse_ords}};

  # Modify the input script names for loose name matching if that is also
  # specified, similar to the way the base character name is prepared.  They
  # don't (currently, and hopefully never will) have dashes.  These go into a
  # regex, and have already been uppercased and quotemeta'd.  Squeeze out all
  # input underscores, blanks, and dashes.  Then convert so will match a blank
  # between any characters.
  if ($^H{charnames_loose}) {
    for (my $i = 0; $i < @scripts; $i++) {
      $scripts[$i] =~ s/[_ -]//g;
      $scripts[$i] =~ s/ ( [^\\] ) (?= . ) /$1\\ ?/gx;
    }
  }

  $^H{charnames_scripts} = join "|", @scripts;  # Stringifiy them as a trie
} # import

# Cache of already looked-up values.  This is set to only contain
# official values, and user aliases can't override them, so scoping is
# not an issue.
my %viacode;

my $no_name_code_points_re = join "|", map { sprintf("%05X",
                                             utf8::unicode_to_native($_)) }
                                            0x80, 0x81, 0x84, 0x99;
$no_name_code_points_re = qr/$no_name_code_points_re/;

sub viacode {

  # Returns the name of the code point argument

  if (@_ != 1) {
    carp "charnames::viacode() expects one argument";
    return;
  }

  my $arg = shift;

  # This is derived from Unicode::UCD, where it is nearly the same as the
  # function _getcode(), but here it makes sure that even a hex argument
  # has the proper number of leading zeros, which is critical in
  # matching against $txt below
  # Must check if decimal first; see comments at that definition
  my $hex;
  if ($arg =~ $decimal_qr) {
    $hex = sprintf "%05X", $arg;
  } elsif ($arg =~ $hex_qr) {
    $hex = CORE::hex $1;
    $hex = utf8::unicode_to_native($hex) if $arg =~ /^[Uu]\+/;
    # Below is the line that differs from the _getcode() source
    $hex = sprintf "%05X", $hex;
  } else {
    carp("unexpected arg \"$arg\" to charnames::viacode()");
    return;
  }

  return $viacode{$hex} if exists $viacode{$hex};

  my $return;

  # If the code point is above the max in the table, there's no point
  # looking through it.  Checking the length first is slightly faster
  if (length($hex) <= 5 || CORE::hex($hex) <= 0x10FFFF) {
    $txt = do "unicore/Name.pl" unless $txt;

    # See if the name is algorithmically determinable.
    my $algorithmic = charnames::code_point_to_name_special(CORE::hex $hex);
    if (defined $algorithmic) {
      $viacode{$hex} = $algorithmic;
      return $algorithmic;
    }

    # Return the official name, if exists.  It's unclear to me (khw) at
    # this juncture if it is better to return a user-defined override, so
    # leaving it as is for now.
    if ($txt =~ m/^$hex\t/m) {

        # The name starts with the next character and goes up to the
        # next new-line.  Using capturing parentheses above instead of
        # @+ more than doubles the execution time in Perl 5.13
        $return = substr($txt, $+[0], index($txt, "\n", $+[0]) - $+[0]);

        # If not one of these 4 code points, return what we've found.
        if ($hex !~ / ^ $no_name_code_points_re $ /x) {
          $viacode{$hex} = $return;
          return $return;
        }

        # For backwards compatibility, we don't return the official name of
        # the 4 code points if there are user-defined aliases for them -- so
        # continue looking.
    }
  }

  # See if there is a user name for it, before giving up completely.
  # First get the scoped aliases, give up if have none.
  my $H_ref = (caller(1))[10];
  return if ! defined $return
              && (! defined $H_ref
                  || ! exists $H_ref->{charnames_stringified_inverse_ords});

  my %code_point_aliases;
  if (defined $H_ref->{charnames_stringified_inverse_ords}) {
    %code_point_aliases = split ',',
                          $H_ref->{charnames_stringified_inverse_ords};
    return $code_point_aliases{$hex} if exists $code_point_aliases{$hex};
  }

  # Here there is no user-defined alias, return any official one.
  return $return if defined $return;

  if (CORE::hex($hex) > 0x10FFFF
      && warnings::enabled('non_unicode'))
  {
      carp "Unicode characters only allocated up to U+10FFFF (you asked for U+$hex)";
  }
  return;

} # viacode

1;

# ex: set ts=8 sts=2 sw=2 et:
                                                                                                                                                                                                                                                                                                                                                                                              usr/share/perl/5.20.2/autodie/                                                                      0040755 0000000 0000000 00000000000 13077704254 014314  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/autodie/exception/                                                            0040755 0000000 0000000 00000000000 13077704254 016312  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/autodie/exception/system.pm                                                   0100644 0000000 0000000 00000003135 12744441327 020172  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package autodie::exception::system;
use 5.008;
use strict;
use warnings;
use base 'autodie::exception';
use Carp qw(croak);

our $VERSION = '2.23'; # VERSION: Generated by DZP::OurPkg:Version

# ABSTRACT: Exceptions from autodying system().

my $PACKAGE = __PACKAGE__;

=head1 NAME

autodie::exception::system - Exceptions from autodying system().

=head1 SYNOPSIS

    eval {
        use autodie qw(system);

        system($cmd, @args);

    };

    if (my $E = $@) {
        say "Ooops!  ",$E->caller," had problems: $@";
    }


=head1 DESCRIPTION

This is a L<autodie::exception> class for failures from the
C<system> command.

Presently there is no way to interrogate an C<autodie::exception::system>
object for the command, exit status, and other information you'd expect
such an object to hold.  The interface will be expanded to accommodate
this in the future.

=cut

sub _init {
    my ($this, %args) = @_;

    $this->{$PACKAGE}{message} = $args{message}
        || croak "'message' arg not supplied to autodie::exception::system->new";

    return $this->SUPER::_init(%args);

}

=head2 stringify

When stringified, C<autodie::exception::system> objects currently
use the message generated by L<IPC::System::Simple>.

=cut

sub stringify {

    my ($this) = @_;

    return $this->{$PACKAGE}{message} . $this->add_file_and_line;

}

1;

__END__

=head1 LICENSE

Copyright (C)2008 Paul Fenwick

This is free software.  You may modify and/or redistribute this
code under the same terms as Perl 5.10 itself, or, at your option,
any later version of Perl 5.

=head1 AUTHOR

Paul Fenwick E<lt>pjf@perltraining.com.auE<gt>
                                                                                                                                                                                                                                                                                                                                                                                                                                   usr/share/perl/5.20.2/autodie/exception.pm                                                          0100644 0000000 0000000 00000044612 12744441327 016653  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package autodie::exception;
use 5.008;
use strict;
use warnings;
use Carp qw(croak);

our $VERSION = '2.23'; # VERSION: Generated by DZP::OurPkg:Version
# ABSTRACT: Exceptions from autodying functions.

our $DEBUG = 0;

use overload
    q{""} => "stringify"
;

# Overload smart-match only if we're using 5.10

use if ($] >= 5.010), overload => '~~'  => "matches";

my $PACKAGE = __PACKAGE__;  # Useful to have a scalar for hash keys.

=head1 NAME

autodie::exception - Exceptions from autodying functions.

=head1 SYNOPSIS

    eval {
        use autodie;

        open(my $fh, '<', 'some_file.txt');

        ...
    };

    if (my $E = $@) {
        say "Ooops!  ",$E->caller," had problems: $@";
    }


=head1 DESCRIPTION

When an L<autodie> enabled function fails, it generates an
C<autodie::exception> object.  This can be interrogated to
determine further information about the error that occurred.

This document is broken into two sections; those methods that
are most useful to the end-developer, and those methods for
anyone wishing to subclass or get very familiar with
C<autodie::exception>.

=head2 Common Methods

These methods are intended to be used in the everyday dealing
of exceptions.

The following assume that the error has been copied into
a separate scalar:

    if ($E = $@) {
        ...
    }

This is not required, but is recommended in case any code
is called which may reset or alter C<$@>.

=cut

=head3 args

    my $array_ref = $E->args;

Provides a reference to the arguments passed to the subroutine
that died.

=cut

sub args        { return $_[0]->{$PACKAGE}{args}; }

=head3 function

    my $sub = $E->function;

The subroutine (including package) that threw the exception.

=cut

sub function   { return $_[0]->{$PACKAGE}{function};  }

=head3 file

    my $file = $E->file;

The file in which the error occurred (eg, C<myscript.pl> or
C<MyTest.pm>).

=cut

sub file        { return $_[0]->{$PACKAGE}{file};  }

=head3 package

    my $package = $E->package;

The package from which the exceptional subroutine was called.

=cut

sub package     { return $_[0]->{$PACKAGE}{package}; }

=head3 caller

    my $caller = $E->caller;

The subroutine that I<called> the exceptional code.

=cut

sub caller      { return $_[0]->{$PACKAGE}{caller};  }

=head3 line

    my $line = $E->line;

The line in C<< $E->file >> where the exceptional code was called.

=cut

sub line        { return $_[0]->{$PACKAGE}{line};  }

=head3 context

    my $context = $E->context;

The context in which the subroutine was called by autodie; usually
the same as the context in which you called the autodying subroutine.
This can be 'list', 'scalar', or undefined (unknown).  It will never
be 'void', as C<autodie> always captures the return value in one way
or another.

For some core functions that always return a scalar value regardless
of their context (eg, C<chown>), this may be 'scalar', even if you
used a list context.

=cut

# TODO: The comments above say this can be undefined. Is that actually
# the case? (With 'system', perhaps?)

sub context     { return $_[0]->{$PACKAGE}{context} }

=head3 return

    my $return_value = $E->return;

The value(s) returned by the failed subroutine.  When the subroutine
was called in a list context, this will always be a reference to an
array containing the results.  When the subroutine was called in
a scalar context, this will be the actual scalar returned.

=cut

sub return      { return $_[0]->{$PACKAGE}{return} }

=head3 errno

    my $errno = $E->errno;

The value of C<$!> at the time when the exception occurred.

B<NOTE>: This method will leave the main C<autodie::exception> class
and become part of a role in the future.  You should only call
C<errno> for exceptions where C<$!> would reasonably have been
set on failure.

=cut

# TODO: Make errno part of a role.  It doesn't make sense for
# everything.

sub errno       { return $_[0]->{$PACKAGE}{errno}; }

=head3 eval_error

    my $old_eval_error = $E->eval_error;

The contents of C<$@> immediately after autodie triggered an
exception.  This may be useful when dealing with modules such
as L<Text::Balanced> that set (but do not throw) C<$@> on error.

=cut

sub eval_error { return $_[0]->{$PACKAGE}{eval_error}; }

=head3 matches

    if ( $e->matches('open') ) { ... }

    if ( $e ~~ 'open' ) { ... }

C<matches> is used to determine whether a
given exception matches a particular role.  On Perl 5.10,
using smart-match (C<~~>) with an C<autodie::exception> object
will use C<matches> underneath.

An exception is considered to match a string if:

=over 4

=item *

For a string not starting with a colon, the string exactly matches the
package and subroutine that threw the exception.  For example,
C<MyModule::log>.  If the string does not contain a package name,
C<CORE::> is assumed.

=item *

For a string that does start with a colon, if the subroutine
throwing the exception I<does> that behaviour.  For example, the
C<CORE::open> subroutine does C<:file>, C<:io> and C<:all>.

See L<autodie/CATEGORIES> for further information.

=back

=cut

{
    my (%cache);

    sub matches {
        my ($this, $that) = @_;

        # TODO - Handle references
        croak "UNIMPLEMENTED" if ref $that;

        my $sub = $this->function;

        if ($DEBUG) {
            my $sub2 = $this->function;
            warn "Smart-matching $that against $sub / $sub2\n";
        }

        # Direct subname match.
        return 1 if $that eq $sub;
        return 1 if $that !~ /:/ and "CORE::$that" eq $sub;
        return 0 if $that !~ /^:/;

        # Cached match / check tags.
        require Fatal;

        if (exists $cache{$sub}{$that}) {
            return $cache{$sub}{$that};
        }

        # This rather awful looking line checks to see if our sub is in the
        # list of expanded tags, caches it, and returns the result.

        return $cache{$sub}{$that} = grep { $_ eq $sub } @{ $this->_expand_tag($that) };
    }
}

# This exists primarily so that child classes can override or
# augment it if they wish.

sub _expand_tag {
    my ($this, @args) = @_;

    return Fatal->_expand_tag(@args);
}

=head2 Advanced methods

The following methods, while usable from anywhere, are primarily
intended for developers wishing to subclass C<autodie::exception>,
write code that registers custom error messages, or otherwise
work closely with the C<autodie::exception> model.

=cut

# The table below records customer formatters.
# TODO - Should this be a package var instead?
# TODO - Should these be in a completely different file, or
#        perhaps loaded on demand?  Most formatters will never
#        get used in most programs.

my %formatter_of = (
    'CORE::close'   => \&_format_close,
    'CORE::open'    => \&_format_open,
    'CORE::dbmopen' => \&_format_dbmopen,
    'CORE::flock'   => \&_format_flock,
);

# TODO: Our tests only check LOCK_EX | LOCK_NB is properly
# formatted.  Try other combinations and ensure they work
# correctly.

sub _format_flock {
    my ($this) = @_;

    require Fcntl;

    my $filehandle = $this->args->[0];
    my $raw_mode   = $this->args->[1];

    my $mode_type;
    my $lock_unlock;

    if ($raw_mode & Fcntl::LOCK_EX() ) {
        $lock_unlock = "lock";
        $mode_type = "for exclusive access";
    }
    elsif ($raw_mode & Fcntl::LOCK_SH() ) {
        $lock_unlock = "lock";
        $mode_type = "for shared access";
    }
    elsif ($raw_mode & Fcntl::LOCK_UN() ) {
        $lock_unlock = "unlock";
        $mode_type = "";
    }
    else {
        # I've got no idea what they're trying to do.
        $lock_unlock = "lock";
        $mode_type = "with mode $raw_mode";
    }

    my $cooked_filehandle;

    if ($filehandle and not ref $filehandle) {

        # A package filehandle with a name!

        $cooked_filehandle = " $filehandle";
    }
    else {
        # Otherwise we have a scalar filehandle.

        $cooked_filehandle = '';

    }

    local $! = $this->errno;

    return "Can't $lock_unlock filehandle$cooked_filehandle $mode_type: $!";

}

# Default formatter for CORE::dbmopen
sub _format_dbmopen {
    my ($this) = @_;
    my @args   = @{$this->args};

    # TODO: Presently, $args flattens out the (usually empty) hash
    # which is passed as the first argument to dbmopen.  This is
    # a bug in our args handling code (taking a reference to it would
    # be better), but for the moment we'll just examine the end of
    # our arguments list for message formatting.

    my $mode = $args[-1];
    my $file = $args[-2];

    # If we have a mask, then display it in octal, not decimal.
    # We don't do this if it already looks octalish, or doesn't
    # look like a number.

    if ($mode =~ /^[^\D0]\d+$/) {
        $mode = sprintf("0%lo", $mode);
    };

    local $! = $this->errno;

    return "Can't dbmopen(%hash, '$file', $mode): '$!'";
}

# Default formatter for CORE::close

sub _format_close {
    my ($this) = @_;
    my $close_arg = $this->args->[0];

    local $! = $this->errno;

    # If we've got an old-style filehandle, mention it.
    if ($close_arg and not ref $close_arg) {
        return "Can't close filehandle '$close_arg': '$!'";
    }

    # TODO - This will probably produce an ugly error.  Test and fix.
    return "Can't close($close_arg) filehandle: '$!'";

}

# Default formatter for CORE::open

use constant _FORMAT_OPEN => "Can't open '%s' for %s: '%s'";

sub _format_open_with_mode {
    my ($this, $mode, $file, $error) = @_;

    my $wordy_mode;

    if    ($mode eq '<')  { $wordy_mode = 'reading';   }
    elsif ($mode eq '>')  { $wordy_mode = 'writing';   }
    elsif ($mode eq '>>') { $wordy_mode = 'appending'; }

    $file = '<undef>' if not defined $file;

    return sprintf _FORMAT_OPEN, $file, $wordy_mode, $error if $wordy_mode;

    Carp::confess("Internal autodie::exception error: Don't know how to format mode '$mode'.");

}

sub _format_open {
    my ($this) = @_;

    my @open_args = @{$this->args};

    # Use the default formatter for single-arg and many-arg open
    if (@open_args <= 1 or @open_args >= 4) {
        return $this->format_default;
    }

    # For two arg open, we have to extract the mode
    if (@open_args == 2) {
        my ($fh, $file) = @open_args;

        if (ref($fh) eq "GLOB") {
            $fh = '$fh';
        }

        my ($mode) = $file =~ m{
            ^\s*                # Spaces before mode
            (
                (?>             # Non-backtracking subexp.
                    <           # Reading
                    |>>?        # Writing/appending
                )
            )
            [^&]                # Not an ampersand (which means a dup)
        }x;

        if (not $mode) {
            # Maybe it's a 2-arg open without any mode at all?
            # Detect the most simple case for this, where our
            # file consists only of word characters.

            if ( $file =~ m{^\s*\w+\s*$} ) {
                $mode = '<'
            }
            else {
                # Otherwise, we've got no idea what's going on.
                # Use the default.
                return $this->format_default;
            }
        }

        # Localising $! means perl makes it a pretty error for us.
        local $! = $this->errno;

        return $this->_format_open_with_mode($mode, $file, $!);
    }

    # Here we must be using three arg open.

    my $file = $open_args[2];

    local $! = $this->errno;

    my $mode = $open_args[1];

    local $@;

    my $msg = eval { $this->_format_open_with_mode($mode, $file, $!); };

    return $msg if $msg;

    # Default message (for pipes and odd things)

    return "Can't open '$file' with mode '$open_args[1]': '$!'";
}

=head3 register

    autodie::exception->register( 'CORE::open' => \&mysub );

The C<register> method allows for the registration of a message
handler for a given subroutine.  The full subroutine name including
the package should be used.

Registered message handlers will receive the C<autodie::exception>
object as the first parameter.

=cut

sub register {
    my ($class, $symbol, $handler) = @_;

    croak "Incorrect call to autodie::register" if @_ != 3;

    $formatter_of{$symbol} = $handler;

}

=head3 add_file_and_line

    say "Problem occurred",$@->add_file_and_line;

Returns the string C< at %s line %d>, where C<%s> is replaced with
the filename, and C<%d> is replaced with the line number.

Primarily intended for use by format handlers.

=cut

# Simply produces the file and line number; intended to be added
# to the end of error messages.

sub add_file_and_line {
    my ($this) = @_;

    return sprintf(" at %s line %d\n", $this->file, $this->line);
}

=head3 stringify

    say "The error was: ",$@->stringify;

Formats the error as a human readable string.  Usually there's no
reason to call this directly, as it is used automatically if an
C<autodie::exception> object is ever used as a string.

Child classes can override this method to change how they're
stringified.

=cut

sub stringify {
    my ($this) = @_;

    my $call        =  $this->function;

    if ($DEBUG) {
        my $dying_pkg   = $this->package;
        my $sub   = $this->function;
        my $caller = $this->caller;
        warn "Stringifing exception for $dying_pkg :: $sub / $caller / $call\n";
    }

    # TODO - This isn't using inheritance.  Should it?
    if ( my $sub = $formatter_of{$call} ) {
        return $sub->($this) . $this->add_file_and_line;
    }

    return $this->format_default . $this->add_file_and_line;

}

=head3 format_default

    my $error_string = $E->format_default;

This produces the default error string for the given exception,
I<without using any registered message handlers>.  It is primarily
intended to be called from a message handler when they have
been passed an exception they don't want to format.

Child classes can override this method to change how default
messages are formatted.

=cut

# TODO: This produces ugly errors.  Is there any way we can
# dig around to find the actual variable names?  I know perl 5.10
# does some dark and terrible magicks to find them for undef warnings.

sub format_default {
    my ($this) = @_;

    my $call        =  $this->function;

    local $! = $this->errno;

    # TODO: This is probably a good idea for CORE, is it
    # a good idea for other subs?

    # Trim package name off dying sub for error messages.
    $call =~ s/.*:://;

    # Walk through all our arguments, and...
    #
    #   * Replace undef with the word 'undef'
    #   * Replace globs with the string '$fh'
    #   * Quote all other args.

    my @args = @{ $this->args() };

    foreach my $arg (@args) {
       if    (not defined($arg))   { $arg = 'undef' }
       elsif (ref($arg) eq "GLOB") { $arg = '$fh'   }
       else                        { $arg = qq{'$arg'} }
    }

    # Format our beautiful error.

    return "Can't $call(".  join(q{, }, @args) . "): $!" ;

    # TODO - Handle user-defined errors from hash.

    # TODO - Handle default error messages.

}

=head3 new

    my $error = autodie::exception->new(
        args => \@_,
        function => "CORE::open",
        errno => $!,
        context => 'scalar',
        return => undef,
    );


Creates a new C<autodie::exception> object.  Normally called
directly from an autodying function.  The C<function> argument
is required, its the function we were trying to call that
generated the exception.  The C<args> parameter is optional.

The C<errno> value is optional.  In versions of C<autodie::exception>
1.99 and earlier the code would try to automatically use the
current value of C<$!>, but this was unreliable and is no longer
supported.

Atrributes such as package, file, and caller are determined
automatically, and cannot be specified.

=cut

sub new {
    my ($class, @args) = @_;

    my $this = {};

    bless($this,$class);

    # I'd love to use EVERY here, but it causes our code to die
    # because it wants to stringify our objects before they're
    # initialised, causing everything to explode.

    $this->_init(@args);

    return $this;
}

sub _init {

    my ($this, %args) = @_;

    # Capturing errno here is not necessarily reliable.
    my $original_errno = $!;

    our $init_called = 1;

    my $class = ref $this;

    # We're going to walk up our call stack, looking for the
    # first thing that doesn't look like our exception
    # code, autodie/Fatal, or some whacky eval.

    my ($package, $file, $line, $sub);

    my $depth = 0;

    while (1) {
        $depth++;

        ($package, $file, $line, $sub) = CORE::caller($depth);

        # Skip up the call stack until we find something outside
        # of the Fatal/autodie/eval space.

        next if $package->isa('Fatal');
        next if $package->isa($class);
        next if $package->isa(__PACKAGE__);

        # Anything with the 'autodie::skip' role wants us to skip it.
        # https://github.com/pjf/autodie/issues/15

        next if ($package->can('DOES') and $package->DOES('autodie::skip'));

        next if $file =~ /^\(eval\s\d+\)$/;

        last;

    }

    # We now have everything correct, *except* for our subroutine
    # name.  If it's __ANON__ or (eval), then we need to keep on
    # digging deeper into our stack to find the real name.  However we
    # don't update our other information, since that will be correct
    # for our current exception.

    my $first_guess_subroutine = $sub;

    while (defined $sub and $sub =~ /^\(eval\)$|::__ANON__$/) {
        $depth++;

        $sub = (CORE::caller($depth))[3];
    }

    # If we end up falling out the bottom of our stack, then our
    # __ANON__ guess is the best we can get.  This includes situations
    # where we were called from the top level of a program.

    if (not defined $sub) {
        $sub = $first_guess_subroutine;
    }

    $this->{$PACKAGE}{package} = $package;
    $this->{$PACKAGE}{file}    = $file;
    $this->{$PACKAGE}{line}    = $line;
    $this->{$PACKAGE}{caller}  = $sub;
    $this->{$PACKAGE}{package} = $package;

    $this->{$PACKAGE}{errno}   = $args{errno} || 0;

    $this->{$PACKAGE}{context} = $args{context};
    $this->{$PACKAGE}{return}  = $args{return};
    $this->{$PACKAGE}{eval_error}  = $args{eval_error};

    $this->{$PACKAGE}{args}    = $args{args} || [];
    $this->{$PACKAGE}{function}= $args{function} or
              croak("$class->new() called without function arg");

    return $this;

}

1;

__END__

=head1 SEE ALSO

L<autodie>, L<autodie::exception::system>

=head1 LICENSE

Copyright (C)2008 Paul Fenwick

This is free software.  You may modify and/or redistribute this
code under the same terms as Perl 5.10 itself, or, at your option,
any later version of Perl 5.

=head1 AUTHOR

Paul Fenwick E<lt>pjf@perltraining.com.auE<gt>
                                                                                                                      usr/share/perl/5.20.2/autodie/hints.pm                                                              0100644 0000000 0000000 00000040550 12744441327 015777  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package autodie::hints;

use strict;
use warnings;

use constant PERL58 => ( $] < 5.009 );

our $VERSION = '2.23'; # VERSION: Generated by DZP::OurPkg:Version

# ABSTRACT: Provide hints about user subroutines to autodie

=head1 NAME

autodie::hints - Provide hints about user subroutines to autodie

=head1 SYNOPSIS

    package Your::Module;

    our %DOES = ( 'autodie::hints::provider' => 1 );

    sub AUTODIE_HINTS {
        return {
            foo => { scalar => HINTS, list => SOME_HINTS },
            bar => { scalar => HINTS, list => MORE_HINTS },
        }
    }

    # Later, in your main program...

    use Your::Module qw(foo bar);
    use autodie      qw(:default foo bar);

    foo();         # succeeds or dies based on scalar hints

    # Alternatively, hints can be set on subroutines we've
    # imported.

    use autodie::hints;
    use Some::Module qw(think_positive);

    BEGIN {
        autodie::hints->set_hints_for(
            \&think_positive,
            {
                fail => sub { $_[0] <= 0 }
            }
        )
    }
    use autodie qw(think_positive);

    think_positive(...);    # Returns positive or dies.


=head1 DESCRIPTION

=head2 Introduction

The L<autodie> pragma is very smart when it comes to working with
Perl's built-in functions.  The behaviour for these functions are
fixed, and C<autodie> knows exactly how they try to signal failure.

But what about user-defined subroutines from modules?  If you use
C<autodie> on a user-defined subroutine then it assumes the following
behaviour to demonstrate failure:

=over

=item *

A false value, in scalar context

=item * 

An empty list, in list context

=item *

A list containing a single undef, in list context

=back

All other return values (including the list of the single zero, and the
list containing a single empty string) are considered successful.  However,
real-world code isn't always that easy.  Perhaps the code you're working
with returns a string containing the word "FAIL" upon failure, or a
two element list containing C<(undef, "human error message")>.  To make
autodie work with these sorts of subroutines, we have
the I<hinting interface>.

The hinting interface allows I<hints> to be provided to C<autodie>
on how it should detect failure from user-defined subroutines.  While
these I<can> be provided by the end-user of C<autodie>, they are ideally
written into the module itself, or into a helper module or sub-class
of C<autodie> itself.

=head2 What are hints?

A I<hint> is a subroutine or value that is checked against the
return value of an autodying subroutine.  If the match returns true,
C<autodie> considers the subroutine to have failed.

If the hint provided is a subroutine, then C<autodie> will pass
the complete return value to that subroutine.  If the hint is
any other value, then C<autodie> will smart-match against the
value provided.  In Perl 5.8.x there is no smart-match operator, and as such
only subroutine hints are supported in these versions.

Hints can be provided for both scalar and list contexts.  Note
that an autodying subroutine will never see a void context, as
C<autodie> always needs to capture the return value for examination.
Autodying subroutines called in void context act as if they're called
in a scalar context, but their return value is discarded after it
has been checked.

=head2 Example hints

Hints may consist of scalars, array references, regular expressions and
subroutine references.  You can specify different hints for how
failure should be identified in scalar and list contexts.

These examples apply for use in the C<AUTODIE_HINTS> subroutine and when
calling C<autodie::hints->set_hints_for()>.

The most common context-specific hints are:

        # Scalar failures always return undef:
            {  scalar => undef  }

        # Scalar failures return any false value [default expectation]:
            {  scalar => sub { ! $_[0] }  }

        # Scalar failures always return zero explicitly:
            {  scalar => '0'  }

        # List failures always return an empty list:
            {  list => []  }

        # List failures return () or (undef) [default expectation]:
            {  list => sub { ! @_ || @_ == 1 && !defined $_[0] }  }

        # List failures return () or a single false value:
            {  list => sub { ! @_ || @_ == 1 && !$_[0] }  }

        # List failures return (undef, "some string")
            {  list => sub { @_ == 2 && !defined $_[0] }  }

        # Unsuccessful foo() returns 'FAIL' or '_FAIL' in scalar context,
        #                    returns (-1) in list context...
        autodie::hints->set_hints_for(
            \&foo,
            {
                scalar => qr/^ _? FAIL $/xms,
                list   => [-1],
            }
        );

        # Unsuccessful foo() returns 0 in all contexts...
        autodie::hints->set_hints_for(
            \&foo,
            {
                scalar => 0,
                list   => [0],
            }
        );

This "in all contexts" construction is very common, and can be
abbreviated, using the 'fail' key.  This sets both the C<scalar>
and C<list> hints to the same value:

        # Unsuccessful foo() returns 0 in all contexts...
        autodie::hints->set_hints_for(
            \&foo,
            {
                fail => sub { @_ == 1 and defined $_[0] and $_[0] == 0 }
            }
	);

        # Unsuccessful think_positive() returns negative number on failure...
        autodie::hints->set_hints_for(
            \&think_positive,
            {
                fail => sub { $_[0] < 0 }
            }
	);

        # Unsuccessful my_system() returns non-zero on failure...
        autodie::hints->set_hints_for(
            \&my_system,
            {
                fail => sub { $_[0] != 0 }
            }
	);

=head1 Manually setting hints from within your program

If you are using a module which returns something special on failure, then
you can manually create hints for each of the desired subroutines.  Once
the hints are specified, they are available for all files and modules loaded
thereafter, thus you can move this work into a module and it will still
work.

	use Some::Module qw(foo bar);
	use autodie::hints;

	autodie::hints->set_hints_for(
		\&foo,
		{
			scalar => SCALAR_HINT,
			list   => LIST_HINT,
		}
	);
	autodie::hints->set_hints_for(
		\&bar,
                { fail => SOME_HINT, }
	);

It is possible to pass either a subroutine reference (recommended) or a fully
qualified subroutine name as the first argument.  This means you can set hints
on modules that I<might> get loaded:

	use autodie::hints;
	autodie::hints->set_hints_for(
		'Some::Module:bar', { fail => SCALAR_HINT, }
	);

This technique is most useful when you have a project that uses a
lot of third-party modules.  You can define all your possible hints
in one-place.  This can even be in a sub-class of autodie.  For
example:

        package my::autodie;

        use parent qw(autodie);
        use autodie::hints;

        autodie::hints->set_hints_for(...);

        1;

You can now C<use my::autodie>, which will work just like the standard
C<autodie>, but is now aware of any hints that you've set.

=head1 Adding hints to your module

C<autodie> provides a passive interface to allow you to declare hints for
your module.  These hints will be found and used by C<autodie> if it
is loaded, but otherwise have no effect (or dependencies) without autodie.
To set these, your module needs to declare that it I<does> the
C<autodie::hints::provider> role.  This can be done by writing your
own C<DOES> method, using a system such as C<Class::DOES> to handle
the heavy-lifting for you, or declaring a C<%DOES> package variable
with a C<autodie::hints::provider> key and a corresponding true value.

Note that checking for a C<%DOES> hash is an C<autodie>-only
short-cut.  Other modules do not use this mechanism for checking
roles, although you can use the C<Class::DOES> module from the
CPAN to allow it.

In addition, you must define a C<AUTODIE_HINTS> subroutine that returns
a hash-reference containing the hints for your subroutines:

        package Your::Module;

        # We can use the Class::DOES from the CPAN to declare adherence
        # to a role.

        use Class::DOES 'autodie::hints::provider' => 1;

        # Alternatively, we can declare the role in %DOES.  Note that
        # this is an autodie specific optimisation, although Class::DOES
        # can be used to promote this to a true role declaration.

        our %DOES = ( 'autodie::hints::provider' => 1 );

        # Finally, we must define the hints themselves.

	sub AUTODIE_HINTS {
	    return {
	        foo => { scalar => HINTS, list => SOME_HINTS },
	        bar => { scalar => HINTS, list => MORE_HINTS },
	        baz => { fail => HINTS },
	    }
	}

This allows your code to set hints without relying on C<autodie> and
C<autodie::hints> being loaded, or even installed.  In this way your
code can do the right thing when C<autodie> is installed, but does not
need to depend upon it to function.

=head1 Insisting on hints

When a user-defined subroutine is wrapped by C<autodie>, it will
use hints if they are available, and otherwise reverts to the
I<default behaviour> described in the introduction of this document.
This can be problematic if we expect a hint to exist, but (for
whatever reason) it has not been loaded.

We can ask autodie to I<insist> that a hint be used by prefixing
an exclamation mark to the start of the subroutine name.  A lone
exclamation mark indicates that I<all> subroutines after it must
have hints declared.

	# foo() and bar() must have their hints defined
	use autodie qw( !foo !bar baz );

	# Everything must have hints (recommended).
	use autodie qw( ! foo bar baz );

	# bar() and baz() must have their hints defined
	use autodie qw( foo ! bar baz );

        # Enable autodie for all of Perl's supported built-ins,
        # as well as for foo(), bar() and baz().  Everything must
        # have hints.
        use autodie qw( ! :all foo bar baz );

If hints are not available for the specified subroutines, this will cause a
compile-time error.  Insisting on hints for Perl's built-in functions
(eg, C<open> and C<close>) is always successful.

Insisting on hints is I<strongly> recommended.

=cut

# TODO: implement regular expression hints

use constant UNDEF_ONLY       => sub { not defined $_[0] };
use constant EMPTY_OR_UNDEF   => sub {
    ! @_ or
    @_==1 && !defined $_[0]
};

use constant EMPTY_ONLY     => sub { @_ == 0 };
use constant EMPTY_OR_FALSE => sub {
    ! @_ or
    @_==1 && !$_[0]
};

use constant SINGLE_TRUE => sub { @_ == 1 and not $_[0] };

use constant DEFAULT_HINTS => {
    scalar => UNDEF_ONLY,
    list   => EMPTY_OR_UNDEF,
};


use constant HINTS_PROVIDER => 'autodie::hints::provider';

use base qw(Exporter);

our $DEBUG = 0;

# Only ( undef ) is a strange but possible situation for very
# badly written code.  It's not supported yet.

my %Hints = (
    'File::Copy::copy' => { scalar => SINGLE_TRUE, list => SINGLE_TRUE },
    'File::Copy::move' => { scalar => SINGLE_TRUE, list => SINGLE_TRUE },
    'File::Copy::cp'   => { scalar => SINGLE_TRUE, list => SINGLE_TRUE },
    'File::Copy::mv'   => { scalar => SINGLE_TRUE, list => SINGLE_TRUE },
);

# Start by using Sub::Identify if it exists on this system.

eval { require Sub::Identify; Sub::Identify->import('get_code_info'); };

# If it doesn't exist, we'll define our own.  This code is directly
# taken from Rafael Garcia's Sub::Identify 0.04, used under the same
# license as Perl itself.

if ($@) {
    require B;

    no warnings 'once';

    *get_code_info = sub ($) {

        my ($coderef) = @_;
        ref $coderef or return;
        my $cv = B::svref_2object($coderef);
        $cv->isa('B::CV') or return;
        # bail out if GV is undefined
        $cv->GV->isa('B::SPECIAL') and return;

        return ($cv->GV->STASH->NAME, $cv->GV->NAME);
    };

}

sub sub_fullname {
    return join( '::', get_code_info( $_[1] ) );
}

my %Hints_loaded = ();

sub load_hints {
    my ($class, $sub) = @_;

    my ($package) = ( $sub =~ /(.*)::/ );

    if (not defined $package) {
        require Carp;
        Carp::croak(
            "Internal error in autodie::hints::load_hints - no package found.
        ");
    }

    # Do nothing if we've already tried to load hints for
    # this package.
    return if $Hints_loaded{$package}++;

    my $hints_available = 0;

    {
        no strict 'refs';   ## no critic

        if ($package->can('DOES') and $package->DOES(HINTS_PROVIDER) ) {
            $hints_available = 1;
        }
        elsif ( PERL58 and $package->isa(HINTS_PROVIDER) ) {
            $hints_available = 1;
        }
        elsif ( ${"${package}::DOES"}{HINTS_PROVIDER.""} ) {
            $hints_available = 1;
        }
    }

    return if not $hints_available;

    my %package_hints = %{ $package->AUTODIE_HINTS };

    foreach my $sub (keys %package_hints) {

        my $hint = $package_hints{$sub};

        # Ensure we have a package name.
        $sub = "${package}::$sub" if $sub !~ /::/;

        # TODO - Currently we don't check for conflicts, should we?
        $Hints{$sub} = $hint;

        $class->normalise_hints(\%Hints, $sub);
    }

    return;

}

sub normalise_hints {
    my ($class, $hints, $sub) = @_;

    if ( exists $hints->{$sub}->{fail} ) {

        if ( exists $hints->{$sub}->{scalar} or
             exists $hints->{$sub}->{list}
        ) {
            # TODO: Turn into a proper diagnostic.
            require Carp;
            local $Carp::CarpLevel = 1;
            Carp::croak("fail hints cannot be provided with either scalar or list hints for $sub");
        }

        # Set our scalar and list hints.

        $hints->{$sub}->{scalar} = 
        $hints->{$sub}->{list} = delete $hints->{$sub}->{fail};

        return;

    }

    # Check to make sure all our hints exist.

    foreach my $hint (qw(scalar list)) {
        if ( not exists $hints->{$sub}->{$hint} ) {
            # TODO: Turn into a proper diagnostic.
            require Carp;
            local $Carp::CarpLevel = 1;
            Carp::croak("$hint hint missing for $sub");
        }
    }

    return;
}

sub get_hints_for {
    my ($class, $sub) = @_;

    my $subname = $class->sub_fullname( $sub );

    # If we have hints loaded for a sub, then return them.

    if ( exists $Hints{ $subname } ) {
        return $Hints{ $subname };
    }

    # If not, we try to load them...

    $class->load_hints( $subname );

    # ...and try again!

    if ( exists $Hints{ $subname } ) {
        return $Hints{ $subname };
    }

    # It's the caller's responsibility to use defaults if desired.
    # This allows on autodie to insist on hints if needed.

    return;

}

sub set_hints_for {
    my ($class, $sub, $hints) = @_;

    if (ref $sub) {
        $sub = $class->sub_fullname( $sub );

        require Carp;

        $sub or Carp::croak("Attempts to set_hints_for unidentifiable subroutine");
    }

    if ($DEBUG) {
        warn "autodie::hints: Setting $sub to hints: $hints\n";
    }

    $Hints{ $sub } = $hints;

    $class->normalise_hints(\%Hints, $sub);

    return;
}

1;

__END__


=head1 Diagnostics

=over 4

=item Attempts to set_hints_for unidentifiable subroutine

You've called C<< autodie::hints->set_hints_for() >> using a subroutine
reference, but that reference could not be resolved back to a
subroutine name.  It may be an anonymous subroutine (which can't
be made autodying), or may lack a name for other reasons.

If you receive this error with a subroutine that has a real name,
then you may have found a bug in autodie.  See L<autodie/BUGS>
for how to report this.

=item fail hints cannot be provided with either scalar or list hints for %s

When defining hints, you can either supply both C<list> and
C<scalar> keywords, I<or> you can provide a single C<fail> keyword.
You can't mix and match them.

=item %s hint missing for %s

You've provided either a C<scalar> hint without supplying
a C<list> hint, or vice-versa.  You I<must> supply both C<scalar>
and C<list> hints, I<or> a single C<fail> hint.

=back

=head1 ACKNOWLEDGEMENTS

=over 

=item *

Dr Damian Conway for suggesting the hinting interface and providing the
example usage.

=item *

Jacinta Richardson for translating much of my ideas into this
documentation.

=back

=head1 AUTHOR

Copyright 2009, Paul Fenwick E<lt>pjf@perltraining.com.auE<gt>

=head1 LICENSE

This module is free software.  You may distribute it under the
same terms as Perl itself.

=head1 SEE ALSO

L<autodie>, L<Class::DOES>

=for Pod::Coverage get_hints_for load_hints normalise_hints sub_fullname

=cut
                                                                                                                                                        usr/share/perl/5.20.2/autodie/skip.pm                                                               0100644 0000000 0000000 00000002246 12744441327 015620  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package autodie::skip;
use strict;
use warnings;

our $VERSION = '2.23'; # VERSION

# This package exists purely so people can inherit from it,
# which isn't at all how roles are supposed to work, but it's
# how people will use them anyway.

if ($] < 5.010) {
    # Older Perls don't have a native ->DOES.  Let's provide a cheap
    # imitation here.

    *DOES = sub { return shift->isa(@_); };
}

1;

__END__

=head1 NAME

autodie::skip - Skip a package when throwing autodie exceptions

=head1 SYNPOSIS

    use parent qw(autodie::skip);

=head1 DESCRIPTION

This dummy class exists to signal that the class inheriting it should
be skipped when reporting exceptions from autodie.  This is useful
for utility classes like L<Path::Tiny> that wish to report the location
of where they were called on failure.

If your class has a better way of doing roles, then you should not
load this class and instead simply say that your class I<DOES>
C<autodie::skip> instead.

=head1 AUTHOR

Copyright 2013, Paul Fenwick <pjf@cpan.org>

=head1 LICENSE

This module is free software. You may distribute it under the same
terms as Perl itself.

=head1 SEE ALSO

L<autodie>, L<autodie::exception>

=cut
                                                                                                                                                                                                                                                                                                                                                          usr/share/perl/5.20.2/autodie.pm                                                                    0100644 0000000 0000000 00000027631 12744441327 014657  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package autodie;
use 5.008;
use strict;
use warnings;

use Fatal ();
our @ISA = qw(Fatal);
our $VERSION;

# ABSTRACT: Replace functions with ones that succeed or die with lexical scope

BEGIN {
    our $VERSION = '2.23'; # VERSION: Generated by DZP::OurPkg::Version
}

use constant ERROR_WRONG_FATAL => q{
Incorrect version of Fatal.pm loaded by autodie.

The autodie pragma uses an updated version of Fatal to do its
heavy lifting.  We seem to have loaded Fatal version %s, which is
probably the version that came with your version of Perl.  However
autodie needs version %s, which would have come bundled with
autodie.

You may be able to solve this problem by adding the following
line of code to your main program, before any use of Fatal or
autodie.

    use lib "%s";

};

# We have to check we've got the right version of Fatal before we
# try to compile the rest of our code, lest we use a constant
# that doesn't exist.

BEGIN {

    # If we have the wrong Fatal, then we've probably loaded the system
    # one, not our own.  Complain, and give a useful hint. ;)

    if ($Fatal::VERSION ne $VERSION) {
        my $autodie_path = $INC{'autodie.pm'};

        $autodie_path =~ s/autodie\.pm//;

        require Carp;

        Carp::croak sprintf(
            ERROR_WRONG_FATAL, $Fatal::VERSION, $VERSION, $autodie_path
        );
    }
}

# When passing args to Fatal we want to keep the first arg
# (our package) in place.  Hence the splice.

sub import {
        splice(@_,1,0,Fatal::LEXICAL_TAG);
        goto &Fatal::import;
}

sub unimport {
        splice(@_,1,0,Fatal::LEXICAL_TAG);
        goto &Fatal::unimport;
}

1;

__END__

=head1 NAME

autodie - Replace functions with ones that succeed or die with lexical scope

=head1 SYNOPSIS

    use autodie;            # Recommended: implies 'use autodie qw(:default)'

    use autodie qw(:all);   # Recommended more: defaults and system/exec.

    use autodie qw(open close);   # open/close succeed or die

    open(my $fh, "<", $filename); # No need to check!

    {
        no autodie qw(open);          # open failures won't die
        open(my $fh, "<", $filename); # Could fail silently!
        no autodie;                   # disable all autodies
    }

=head1 DESCRIPTION

        bIlujDI' yIchegh()Qo'; yIHegh()!

        It is better to die() than to return() in failure.

                -- Klingon programming proverb.

The C<autodie> pragma provides a convenient way to replace functions
that normally return false on failure with equivalents that throw
an exception on failure.

The C<autodie> pragma has I<lexical scope>, meaning that functions
and subroutines altered with C<autodie> will only change their behaviour
until the end of the enclosing block, file, or C<eval>.

If C<system> is specified as an argument to C<autodie>, then it
uses L<IPC::System::Simple> to do the heavy lifting.  See the
description of that module for more information.

=head1 EXCEPTIONS

Exceptions produced by the C<autodie> pragma are members of the
L<autodie::exception> class.  The preferred way to work with
these exceptions under Perl 5.10 is as follows:

    use feature qw(switch);

    eval {
        use autodie;

        open(my $fh, '<', $some_file);

        my @records = <$fh>;

        # Do things with @records...

        close($fh);

    };

    given ($@) {
        when (undef)   { say "No error";                    }
        when ('open')  { say "Error from open";             }
        when (':io')   { say "Non-open, IO error.";         }
        when (':all')  { say "All other autodie errors."    }
        default        { say "Not an autodie error at all." }
    }

Under Perl 5.8, the C<given/when> structure is not available, so the
following structure may be used:

    eval {
        use autodie;

        open(my $fh, '<', $some_file);

        my @records = <$fh>;

        # Do things with @records...

        close($fh);
    };

    if ($@ and $@->isa('autodie::exception')) {
        if ($@->matches('open')) { print "Error from open\n";   }
        if ($@->matches(':io' )) { print "Non-open, IO error."; }
    } elsif ($@) {
        # A non-autodie exception.
    }

See L<autodie::exception> for further information on interrogating
exceptions.

=head1 CATEGORIES

Autodie uses a simple set of categories to group together similar
built-ins.  Requesting a category type (starting with a colon) will
enable autodie for all built-ins beneath that category.  For example,
requesting C<:file> will enable autodie for C<close>, C<fcntl>,
C<fileno>, C<open> and C<sysopen>.

The categories are currently:

    :all
        :default
            :io
                read
                seek
                sysread
                sysseek
                syswrite
                :dbm
                    dbmclose
                    dbmopen
                :file
                    binmode
                    close
                    chmod
                    chown
                    fcntl
                    fileno
                    flock
                    ioctl
                    open
                    sysopen
                    truncate
                :filesys
                    chdir
                    closedir
                    opendir
                    link
                    mkdir
                    readlink
                    rename
                    rmdir
                    symlink
                    unlink
                :ipc
                    pipe
                    :msg
                        msgctl
                        msgget
                        msgrcv
                        msgsnd
                    :semaphore
                        semctl
                        semget
                        semop
                    :shm
                        shmctl
                        shmget
                        shmread
                :socket
                    accept
                    bind
                    connect
                    getsockopt
                    listen
                    recv
                    send
                    setsockopt
                    shutdown
                    socketpair
            :threads
                fork
        :system
            system
            exec


Note that while the above category system is presently a strict
hierarchy, this should not be assumed.

A plain C<use autodie> implies C<use autodie qw(:default)>.  Note that
C<system> and C<exec> are not enabled by default.  C<system> requires
the optional L<IPC::System::Simple> module to be installed, and enabling
C<system> or C<exec> will invalidate their exotic forms.  See L</BUGS>
below for more details.

The syntax:

    use autodie qw(:1.994);

allows the C<:default> list from a particular version to be used.  This
provides the convenience of using the default methods, but the surety
that no behavioral changes will occur if the C<autodie> module is
upgraded.

C<autodie> can be enabled for all of Perl's built-ins, including
C<system> and C<exec> with:

    use autodie qw(:all);

=head1 FUNCTION SPECIFIC NOTES

=head2 print

The autodie pragma B<<does not check calls to C<print>>>.

=head2 flock

It is not considered an error for C<flock> to return false if it fails
due to an C<EWOULDBLOCK> (or equivalent) condition.  This means one can
still use the common convention of testing the return value of
C<flock> when called with the C<LOCK_NB> option:

    use autodie;

    if ( flock($fh, LOCK_EX | LOCK_NB) ) {
        # We have a lock
    }

Autodying C<flock> will generate an exception if C<flock> returns
false with any other error.

=head2 system/exec

The C<system> built-in is considered to have failed in the following
circumstances:

=over 4

=item *

The command does not start.

=item *

The command is killed by a signal.

=item *

The command returns a non-zero exit value (but see below).

=back

On success, the autodying form of C<system> returns the I<exit value>
rather than the contents of C<$?>.

Additional allowable exit values can be supplied as an optional first
argument to autodying C<system>:

    system( [ 0, 1, 2 ], $cmd, @args);  # 0,1,2 are good exit values

C<autodie> uses the L<IPC::System::Simple> module to change C<system>.
See its documentation for further information.

Applying C<autodie> to C<system> or C<exec> causes the exotic
forms C<system { $cmd } @args > or C<exec { $cmd } @args>
to be considered a syntax error until the end of the lexical scope.
If you really need to use the exotic form, you can call C<CORE::system>
or C<CORE::exec> instead, or use C<no autodie qw(system exec)> before
calling the exotic form.

=head1 GOTCHAS

Functions called in list context are assumed to have failed if they
return an empty list, or a list consisting only of a single undef
element.

=head1 DIAGNOSTICS

=over 4

=item :void cannot be used with lexical scope

The C<:void> option is supported in L<Fatal>, but not
C<autodie>.  To workaround this, C<autodie> may be explicitly disabled until
the end of the current block with C<no autodie>.
To disable autodie for only a single function (eg, open)
use C<no autodie qw(open)>.

C<autodie> performs no checking of called context to determine whether to throw
an exception; the explicitness of error handling with C<autodie> is a deliberate
feature.

=item No user hints defined for %s

You've insisted on hints for user-subroutines, either by pre-pending
a C<!> to the subroutine name itself, or earlier in the list of arguments
to C<autodie>.  However the subroutine in question does not have
any hints available.

=back

See also L<Fatal/DIAGNOSTICS>.

=head1 BUGS

"Used only once" warnings can be generated when C<autodie> or C<Fatal>
is used with package filehandles (eg, C<FILE>).  Scalar filehandles are
strongly recommended instead.

When using C<autodie> or C<Fatal> with user subroutines, the
declaration of those subroutines must appear before the first use of
C<Fatal> or C<autodie>, or have been exported from a module.
Attempting to use C<Fatal> or C<autodie> on other user subroutines will
result in a compile-time error.

Due to a bug in Perl, C<autodie> may "lose" any format which has the
same name as an autodying built-in or function.

C<autodie> may not work correctly if used inside a file with a
name that looks like a string eval, such as F<eval (3)>.

=head2 autodie and string eval

Due to the current implementation of C<autodie>, unexpected results
may be seen when used near or with the string version of eval.
I<None of these bugs exist when using block eval>.

Under Perl 5.8 only, C<autodie> I<does not> propagate into string C<eval>
statements, although it can be explicitly enabled inside a string
C<eval>.

Under Perl 5.10 only, using a string eval when C<autodie> is in
effect can cause the autodie behaviour to leak into the surrounding
scope.  This can be worked around by using a C<no autodie> at the
end of the scope to explicitly remove autodie's effects, or by
avoiding the use of string eval.

I<None of these bugs exist when using block eval>.  The use of
C<autodie> with block eval is considered good practice.

=head2 REPORTING BUGS

Please report bugs via the CPAN Request Tracker at
L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=autodie>.

=head1 FEEDBACK

If you find this module useful, please consider rating it on the
CPAN Ratings service at
L<http://cpanratings.perl.org/rate?distribution=autodie> .

The module author loves to hear how C<autodie> has made your life
better (or worse).  Feedback can be sent to
E<lt>pjf@perltraining.com.auE<gt>.

=head1 AUTHOR

Copyright 2008-2009, Paul Fenwick E<lt>pjf@perltraining.com.auE<gt>

=head1 LICENSE

This module is free software.  You may distribute it under the
same terms as Perl itself.

=head1 SEE ALSO

L<Fatal>, L<autodie::exception>, L<autodie::hints>, L<IPC::System::Simple>

I<Perl tips, autodie> at
L<http://perltraining.com.au/tips/2008-08-20.html>

=head1 ACKNOWLEDGEMENTS

Mark Reed and Roland Giersig -- Klingon translators.

See the F<AUTHORS> file for full credits.  The latest version of this
file can be found at
L<https://github.com/pjf/autodie/tree/master/AUTHORS> .

=cut
                                                                                                       usr/share/perl/5.20.2/autouse.pm                                                                    0100644 0000000 0000000 00000010216 12744441327 014701  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package autouse;

#use strict;		# debugging only
use 5.006;		# use warnings

$autouse::VERSION = '1.08';

$autouse::DEBUG ||= 0;

sub vet_import ($);

sub croak {
    require Carp;
    Carp::croak(@_);
}

sub import {
    my $class = @_ ? shift : 'autouse';
    croak "usage: use $class MODULE [,SUBS...]" unless @_;
    my $module = shift;

    (my $pm = $module) =~ s{::}{/}g;
    $pm .= '.pm';
    if (exists $INC{$pm}) {
	vet_import $module;
	local $Exporter::ExportLevel = $Exporter::ExportLevel + 1;
	# $Exporter::Verbose = 1;
	return $module->import(map { (my $f = $_) =~ s/\(.*?\)$//; $f } @_);
    }

    # It is not loaded: need to do real work.
    my $callpkg = caller(0);
    print "autouse called from $callpkg\n" if $autouse::DEBUG;

    my $index;
    for my $f (@_) {
	my $proto;
	$proto = $1 if (my $func = $f) =~ s/\((.*)\)$//;

	my $closure_import_func = $func;	# Full name
	my $closure_func = $func;		# Name inside package
	my $index = rindex($func, '::');
	if ($index == -1) {
	    $closure_import_func = "${callpkg}::$func";
	} else {
	    $closure_func = substr $func, $index + 2;
	    croak "autouse into different package attempted"
		unless substr($func, 0, $index) eq $module;
	}

	my $load_sub = sub {
	    unless ($INC{$pm}) {
		require $pm;
		vet_import $module;
	    }
            no warnings qw(redefine prototype);
	    *$closure_import_func = \&{"${module}::$closure_func"};
	    print "autousing $module; "
		  ."imported $closure_func as $closure_import_func\n"
		if $autouse::DEBUG;
	    goto &$closure_import_func;
	};

	if (defined $proto) {
	    *$closure_import_func = eval "sub ($proto) { goto &\$load_sub }"
	        || die;
	} else {
	    *$closure_import_func = $load_sub;
	}
    }
}

sub vet_import ($) {
    my $module = shift;
    if (my $import = $module->can('import')) {
	croak "autoused module $module has unique import() method"
	    unless defined(&Exporter::import)
		   && ($import == \&Exporter::import ||
		       $import == \&UNIVERSAL::import)
    }
}

1;

__END__

=head1 NAME

autouse - postpone load of modules until a function is used

=head1 SYNOPSIS

  use autouse 'Carp' => qw(carp croak);
  carp "this carp was predeclared and autoused ";

=head1 DESCRIPTION

If the module C<Module> is already loaded, then the declaration

  use autouse 'Module' => qw(func1 func2($;$));

is equivalent to

  use Module qw(func1 func2);

if C<Module> defines func2() with prototype C<($;$)>, and func1() has
no prototypes.  (At least if C<Module> uses C<Exporter>'s C<import>,
otherwise it is a fatal error.)

If the module C<Module> is not loaded yet, then the above declaration
declares functions func1() and func2() in the current package.  When
these functions are called, they load the package C<Module> if needed,
and substitute themselves with the correct definitions.

=begin _deprecated

   use Module qw(Module::func3);

will work and is the equivalent to:

   use Module qw(func3);

It is not a very useful feature and has been deprecated.

=end _deprecated


=head1 WARNING

Using C<autouse> will move important steps of your program's execution
from compile time to runtime.  This can

=over 4

=item *

Break the execution of your program if the module you C<autouse>d has
some initialization which it expects to be done early.

=item *

hide bugs in your code since important checks (like correctness of
prototypes) is moved from compile time to runtime.  In particular, if
the prototype you specified on C<autouse> line is wrong, you will not
find it out until the corresponding function is executed.  This will be
very unfortunate for functions which are not always called (note that
for such functions C<autouse>ing gives biggest win, for a workaround
see below).

=back

To alleviate the second problem (partially) it is advised to write
your scripts like this:

  use Module;
  use autouse Module => qw(carp($) croak(&$));
  carp "this carp was predeclared and autoused ";

The first line ensures that the errors in your argument specification
are found early.  When you ship your application you should comment
out the first line, since it makes the second one useless.

=head1 AUTHOR

Ilya Zakharevich (ilya@math.ohio-state.edu)

=head1 SEE ALSO

perl(1).

=cut
                                                                                                                                                                                                                                                                                                                                                                                  usr/share/perl/5.20.2/bigint.pm                                                                     0100644 0000000 0000000 00000044544 12744441327 014503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package bigint;
use 5.006;

$VERSION = '0.36';
use Exporter;
@ISA		= qw( Exporter );
@EXPORT_OK	= qw( PI e bpi bexp hex oct );
@EXPORT		= qw( inf NaN );

use strict;
use overload;

############################################################################## 

# These are all alike, and thus faked by AUTOLOAD

my @faked = qw/round_mode accuracy precision div_scale/;
use vars qw/$VERSION $AUTOLOAD $_lite/;		# _lite for testsuite

sub AUTOLOAD
  {
  my $name = $AUTOLOAD;

  $name =~ s/.*:://;    # split package
  no strict 'refs';
  foreach my $n (@faked)
    {
    if ($n eq $name)
      {
      *{"bigint::$name"} = sub 
        {
        my $self = shift;
        no strict 'refs';
        if (defined $_[0])
          {
          return Math::BigInt->$name($_[0]);
          }
        return Math::BigInt->$name();
        };
      return &$name;
      }
    }
 
  # delayed load of Carp and avoid recursion
  require Carp;
  Carp::croak ("Can't call bigint\-\>$name, not a valid method");
  }

sub upgrade
  {
  $Math::BigInt::upgrade;
  }

sub _binary_constant
  {
  # this takes a binary/hexadecimal/octal constant string and returns it
  # as string suitable for new. Basically it converts octal to decimal, and
  # passes every thing else unmodified back.
  my $string = shift;

  return Math::BigInt->new($string) if $string =~ /^0[bx]/;

  # so it must be an octal constant
  Math::BigInt->from_oct($string);
  }

sub _float_constant
  {
  # this takes a floating point constant string and returns it truncated to
  # integer. For instance, '4.5' => '4', '1.234e2' => '123' etc
  my $float = shift;

  # some simple cases first
  return $float if ($float =~ /^[+-]?[0-9]+$/);		# '+123','-1','0' etc
  return $float 
    if ($float =~ /^[+-]?[0-9]+\.?[eE]\+?[0-9]+$/);	# 123e2, 123.e+2
  return '0' if ($float =~ /^[+-]?[0]*\.[0-9]+$/);	# .2, 0.2, -.1
  if ($float =~ /^[+-]?[0-9]+\.[0-9]*$/)		# 1., 1.23, -1.2 etc
    {
    $float =~ s/\..*//;
    return $float;
    }
  my ($mis,$miv,$mfv,$es,$ev) = Math::BigInt::_split($float);
  return $float if !defined $mis; 	# doesn't look like a number to me
  my $ec = int($$ev);
  my $sign = $$mis; $sign = '' if $sign eq '+';
  if ($$es eq '-')
    {
    # ignore fraction part entirely
    if ($ec >= length($$miv))			# 123.23E-4
      {
      return '0';
      }
    return $sign . substr ($$miv,0,length($$miv)-$ec);	# 1234.45E-2 = 12
    }
  # xE+y
  if ($ec >= length($$mfv))
    {
    $ec -= length($$mfv);			
    return $sign.$$miv.$$mfv if $ec == 0;	# 123.45E+2 => 12345
    return $sign.$$miv.$$mfv.'E'.$ec; 		# 123.45e+3 => 12345e1
    }
  $mfv = substr($$mfv,0,$ec);
  $sign.$$miv.$mfv; 				# 123.45e+1 => 1234
  }

sub unimport
  {
  $^H{bigint} = undef;					# no longer in effect
  overload::remove_constant('binary','','float','','integer');
  }

sub in_effect
  {
  my $level = shift || 0;
  my $hinthash = (caller($level))[10];
  $hinthash->{bigint};
  }

#############################################################################
# the following two routines are for "use bigint qw/hex oct/;":

use constant LEXICAL => $] > 5.009004;

{
    my $proto = LEXICAL ? '_' : ';$';
    eval '
sub hex(' . $proto . ')' . <<'.';
  {
  my $i = @_ ? $_[0] : $_;
  $i = '0x'.$i unless $i =~ /^0x/;
  Math::BigInt->new($i);
  }
.
    eval '
sub oct(' . $proto . ')' . <<'.';
  {
  my $i = @_ ? $_[0] : $_;
  # oct() should never fall back to decimal
  return Math::BigInt->from_oct($i) if $i =~ s/^(?=0[0-9]|[1-9])/0/;
  Math::BigInt->new($i);
  }
.
}

#############################################################################
# the following two routines are for Perl 5.9.4 or later and are lexical

my ($prev_oct, $prev_hex, $overridden);

if (LEXICAL) { eval <<'.' }
sub _hex(_)
  {
  my $hh = (caller 0)[10];
  return $prev_hex ? &$prev_hex($_[0]) : CORE::hex($_[0])
    unless $$hh{bigint}||$$hh{bignum}||$$hh{bigrat};
  my $i = $_[0];
  $i = '0x'.$i unless $i =~ /^0x/;
  Math::BigInt->new($i);
  }

sub _oct(_)
  {
  my $hh = (caller 0)[10];
  return $prev_oct ? &$prev_oct($_[0]) : CORE::oct($_[0])
    unless $$hh{bigint}||$$hh{bignum}||$$hh{bigrat};
  my $i = $_[0];
  # oct() should never fall back to decimal
  return Math::BigInt->from_oct($i) if $i =~ s/^(?=0[0-9]|[1-9])/0/;
  Math::BigInt->new($i);
  }
.

sub _override
  {
  return if $overridden;
  $prev_oct = *CORE::GLOBAL::oct{CODE};
  $prev_hex = *CORE::GLOBAL::hex{CODE};
  no warnings 'redefine';
  *CORE::GLOBAL::oct = \&_oct;
  *CORE::GLOBAL::hex = \&_hex;
  $overridden++;
  }

sub import 
  {
  my $self = shift;

  $^H{bigint} = 1;					# we are in effect

  # for newer Perls always override hex() and oct() with a lexical version:
  if (LEXICAL)
    {
    _override();
    }
  # some defaults
  my $lib = ''; my $lib_kind = 'try';

  my @import = ( ':constant' );				# drive it w/ constant
  my @a = @_; my $l = scalar @_; my $j = 0;
  my ($ver,$trace);					# version? trace?
  my ($a,$p);						# accuracy, precision
  for ( my $i = 0; $i < $l ; $i++,$j++ )
    {
    if ($_[$i] =~ /^(l|lib|try|only)$/)
      {
      # this causes a different low lib to take care...
      $lib_kind = $1; $lib_kind = 'lib' if $lib_kind eq 'l';
      $lib = $_[$i+1] || '';
      my $s = 2; $s = 1 if @a-$j < 2;	# avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(a|accuracy)$/)
      {
      $a = $_[$i+1];
      my $s = 2; $s = 1 if @a-$j < 2;	# avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(p|precision)$/)
      {
      $p = $_[$i+1];
      my $s = 2; $s = 1 if @a-$j < 2;	# avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(v|version)$/)
      {
      $ver = 1;
      splice @a, $j, 1; $j --;
      }
    elsif ($_[$i] =~ /^(t|trace)$/)
      {
      $trace = 1;
      splice @a, $j, 1; $j --;
      }
    elsif ($_[$i] !~ /^(PI|e|bpi|bexp|hex|oct)\z/)
      {
      die ("unknown option $_[$i]");
      }
    }
  my $class;
  $_lite = 0;					# using M::BI::L ?
  if ($trace)
    {
    require Math::BigInt::Trace; $class = 'Math::BigInt::Trace';
    }
  else
    {
    # see if we can find Math::BigInt::Lite
    if (!defined $a && !defined $p)		# rounding won't work to well
      {
      local @INC = @INC;
      pop @INC if $INC[-1] eq '.';
      eval 'require Math::BigInt::Lite;';
      if ($@ eq '')
        {
        @import = ( );				# :constant in Lite, not MBI
        Math::BigInt::Lite->import( ':constant' );
        $_lite= 1;				# signal okay
        }
      }
    require Math::BigInt if $_lite == 0;	# not already loaded?
    $class = 'Math::BigInt';			# regardless of MBIL or not
    }
  push @import, $lib_kind => $lib if $lib ne '';
  # Math::BigInt::Trace or plain Math::BigInt
  $class->import(@import);

  bigint->accuracy($a) if defined $a;
  bigint->precision($p) if defined $p;
  if ($ver)
    {
    print "bigint\t\t\t v$VERSION\n";
    print "Math::BigInt::Lite\t v$Math::BigInt::Lite::VERSION\n" if $_lite;
    print "Math::BigInt\t\t v$Math::BigInt::VERSION";
    my $config = Math::BigInt->config();
    print " lib => $config->{lib} v$config->{lib_version}\n";
    exit;
    }
  # we take care of floating point constants, since BigFloat isn't available
  # and BigInt doesn't like them:
  overload::constant float => sub { Math::BigInt->new( _float_constant(shift) ); };
  # Take care of octal/hexadecimal constants
  overload::constant binary => sub { _binary_constant(shift) };

  # if another big* was already loaded:
  my ($package) = caller();

  no strict 'refs';
  if (!defined *{"${package}::inf"})
    {
    $self->export_to_level(1,$self,@a);           # export inf and NaN, e and PI
    }
  }

sub inf () { Math::BigInt::binf(); }
sub NaN () { Math::BigInt::bnan(); }

sub PI () { Math::BigInt->new(3); }
sub e () { Math::BigInt->new(2); }
sub bpi ($) { Math::BigInt->new(3); }
sub bexp ($$) { my $x = Math::BigInt->new($_[0]); $x->bexp($_[1]); }

1;

__END__

=head1 NAME

bigint - Transparent BigInteger support for Perl

=head1 SYNOPSIS

  use bigint;

  $x = 2 + 4.5,"\n";			# BigInt 6
  print 2 ** 512,"\n";			# really is what you think it is
  print inf + 42,"\n";			# inf
  print NaN * 7,"\n";			# NaN
  print hex("0x1234567890123490"),"\n";	# Perl v5.10.0 or later

  {
    no bigint;
    print 2 ** 256,"\n";		# a normal Perl scalar now
  }

  # Import into current package:
  use bigint qw/hex oct/;
  print hex("0x1234567890123490"),"\n";
  print oct("01234567890123490"),"\n";

=head1 DESCRIPTION

All operators (including basic math operations) except the range operator C<..>
are overloaded. Integer constants are created as proper BigInts.

Floating point constants are truncated to integer. All parts and results of
expressions are also truncated.

Unlike L<integer>, this pragma creates integer constants that are only
limited in their size by the available memory and CPU time.

=head2 use integer vs. use bigint

There is one small difference between C<use integer> and C<use bigint>: the
former will not affect assignments to variables and the return value of
some functions. C<bigint> truncates these results to integer too:

	# perl -Minteger -wle 'print 3.2'
	3.2
	# perl -Minteger -wle 'print 3.2 + 0'
	3
	# perl -Mbigint -wle 'print 3.2'
	3
	# perl -Mbigint -wle 'print 3.2 + 0'
	3

	# perl -Mbigint -wle 'print exp(1) + 0'
	2
	# perl -Mbigint -wle 'print exp(1)'
	2
	# perl -Minteger -wle 'print exp(1)'
	2.71828182845905
	# perl -Minteger -wle 'print exp(1) + 0'
	2

In practice this makes seldom a difference as B<parts and results> of
expressions will be truncated anyway, but this can, for instance, affect the
return value of subroutines:

    sub three_integer { use integer; return 3.2; } 
    sub three_bigint { use bigint; return 3.2; }

    print three_integer(), " ", three_bigint(),"\n";	# prints "3.2 3"

=head2 Options

bigint recognizes some options that can be passed while loading it via use.
The options can (currently) be either a single letter form, or the long form.
The following options exist:

=over 2

=item a or accuracy

This sets the accuracy for all math operations. The argument must be greater
than or equal to zero. See Math::BigInt's bround() function for details.

	perl -Mbigint=a,2 -le 'print 12345+1'

Note that setting precision and accuracy at the same time is not possible.

=item p or precision

This sets the precision for all math operations. The argument can be any
integer. Negative values mean a fixed number of digits after the dot, and
are <B>ignored</B> since all operations happen in integer space.
A positive value rounds to this digit left from the dot. 0 or 1 mean round to
integer and are ignore like negative values.

See Math::BigInt's bfround() function for details.

	perl -Mbignum=p,5 -le 'print 123456789+123'

Note that setting precision and accuracy at the same time is not possible.

=item t or trace

This enables a trace mode and is primarily for debugging bigint or
Math::BigInt.

=item hex

Override the built-in hex() method with a version that can handle big
integers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as hex() is lexically
overridden in the current scope whenever the bigint pragma is active.

=item oct

Override the built-in oct() method with a version that can handle big
integers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as oct() is lexically
overridden in the current scope whenever the bigint pragma is active.

=item l, lib, try or only

Load a different math lib, see L<Math Library>.

	perl -Mbigint=lib,GMP -e 'print 2 ** 512'
	perl -Mbigint=try,GMP -e 'print 2 ** 512'
	perl -Mbigint=only,GMP -e 'print 2 ** 512'

Currently there is no way to specify more than one library on the command
line. This means the following does not work:

	perl -Mbignum=l,GMP,Pari -e 'print 2 ** 512'

This will be hopefully fixed soon ;)

=item v or version

This prints out the name and version of all modules used and then exits.

	perl -Mbigint=v

=back

=head2 Math Library

Math with the numbers is done (by default) by a module called
Math::BigInt::Calc. This is equivalent to saying:

	use bigint lib => 'Calc';

You can change this by using:

	use bignum lib => 'GMP';

The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:

	use bigint lib => 'Foo,Math::BigInt::Bar';

Using C<lib> warns if none of the specified libraries can be found and
L<Math::BigInt> did fall back to one of the default libraries.
To suppress this warning, use C<try> instead:

        use bignum try => 'GMP';

If you want the code to die instead of falling back, use C<only> instead:

        use bignum only => 'GMP';

Please see respective module documentation for further details.

=head2 Internal Format

The numbers are stored as objects, and their internals might change at anytime,
especially between math operations. The objects also might belong to different
classes, like Math::BigInt, or Math::BigInt::Lite. Mixing them together, even
with normal scalars is not extraordinary, but normal and expected.

You should not depend on the internal format, all accesses must go through
accessor methods. E.g. looking at $x->{sign} is not a good idea since there
is no guaranty that the object in question has such a hash key, nor is a hash
underneath at all.

=head2 Sign

The sign is either '+', '-', 'NaN', '+inf' or '-inf'.
You can access it with the sign() method.

A sign of 'NaN' is used to represent the result when input arguments are not
numbers or as a result of 0/0. '+inf' and '-inf' represent plus respectively
minus infinity. You will get '+inf' when dividing a positive number by 0, and
'-inf' when dividing any negative number by 0.

=head2 Method calls

Since all numbers are now objects, you can use all functions that are part of
the BigInt API. You can only use the bxxx() notation, and not the fxxx()
notation, though. 

But a warning is in order. When using the following to make a copy of a number,
only a shallow copy will be made.

	$x = 9; $y = $x;
	$x = $y = 7;

Using the copy or the original with overloaded math is okay, e.g. the
following work:

	$x = 9; $y = $x;
	print $x + 1, " ", $y,"\n";	# prints 10 9

but calling any method that modifies the number directly will result in
B<both> the original and the copy being destroyed:

	$x = 9; $y = $x;
	print $x->badd(1), " ", $y,"\n";	# prints 10 10

	$x = 9; $y = $x;
	print $x->binc(1), " ", $y,"\n";	# prints 10 10

	$x = 9; $y = $x;
	print $x->bmul(2), " ", $y,"\n";	# prints 18 18

Using methods that do not modify, but test that the contents works:

	$x = 9; $y = $x;
	$z = 9 if $x->is_zero();		# works fine

See the documentation about the copy constructor and C<=> in overload, as
well as the documentation in BigInt for further details.

=head2 Methods

=over 2

=item inf()

A shortcut to return Math::BigInt->binf(). Useful because Perl does not always
handle bareword C<inf> properly.

=item NaN()

A shortcut to return Math::BigInt->bnan(). Useful because Perl does not always
handle bareword C<NaN> properly.

=item e

	# perl -Mbigint=e -wle 'print e'

Returns Euler's number C<e>, aka exp(1). Note that under bigint, this is
truncated to an integer, and hence simple '2'.

=item PI

	# perl -Mbigint=PI -wle 'print PI'

Returns PI. Note that under bigint, this is truncated to an integer, and hence
simple '3'.

=item bexp()

	bexp($power,$accuracy);

Returns Euler's number C<e> raised to the appropriate power, to
the wanted accuracy.

Note that under bigint, the result is truncated to an integer.

Example:

	# perl -Mbigint=bexp -wle 'print bexp(1,80)'

=item bpi()

	bpi($accuracy);

Returns PI to the wanted accuracy. Note that under bigint, this is truncated
to an integer, and hence simple '3'.

Example:

	# perl -Mbigint=bpi -wle 'print bpi(80)'

=item upgrade()

Return the class that numbers are upgraded to, is in fact returning
C<$Math::BigInt::upgrade>.

=item in_effect()

	use bigint;

	print "in effect\n" if bigint::in_effect;	# true
	{
	  no bigint;
	  print "in effect\n" if bigint::in_effect;	# false
	}

Returns true or false if C<bigint> is in effect in the current scope.

This method only works on Perl v5.9.4 or later.

=back

=head1 CAVEATS

=over 2

=item ranges

Perl does not allow overloading of ranges, so you can neither safely use
ranges with bigint endpoints, nor is the iterator variable a bigint.

	use 5.010;
	for my $i (12..13) {
	  for my $j (20..21) {
	    say $i ** $j;  # produces a floating-point number,
	                   # not a big integer
	  }
	}


=item in_effect()

This method only works on Perl v5.9.4 or later.

=item hex()/oct()

C<bigint> overrides these routines with versions that can also handle
big integer values. Under Perl prior to version v5.9.4, however, this
will not happen unless you specifically ask for it with the two
import tags "hex" and "oct" - and then it will be global and cannot be
disabled inside a scope with "no bigint":

	use bigint qw/hex oct/;

	print hex("0x1234567890123456");
	{
		no bigint;
		print hex("0x1234567890123456");
	}

The second call to hex() will warn about a non-portable constant.

Compare this to:

	use bigint;

	# will warn only under Perl older than v5.9.4
	print hex("0x1234567890123456");

=back

=head1 MODULES USED

C<bigint> is just a thin wrapper around various modules of the Math::BigInt
family. Think of it as the head of the family, who runs the shop, and orders
the others to do the work.

The following modules are currently used by bigint:

	Math::BigInt::Lite	(for speed, and only if it is loadable)
	Math::BigInt

=head1 EXAMPLES

Some cool command line examples to impress the Python crowd ;) You might want
to compare them to the results under -Mbignum or -Mbigrat:

	perl -Mbigint -le 'print sqrt(33)'
	perl -Mbigint -le 'print 2*255'
	perl -Mbigint -le 'print 4.5+2*255'
	perl -Mbigint -le 'print 3/7 + 5/7 + 8/3'
	perl -Mbigint -le 'print 123->is_odd()'
	perl -Mbigint -le 'print log(2)'
	perl -Mbigint -le 'print 2 ** 0.5'
	perl -Mbigint=a,65 -le 'print 2 ** 0.2'
	perl -Mbignum=a,65,l,GMP -le 'print 7 ** 7777'

=head1 LICENSE

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=head1 SEE ALSO

Especially L<bigrat> as in C<perl -Mbigrat -le 'print 1/3+1/4'> and
L<bignum> as in C<perl -Mbignum -le 'print sqrt(2)'>.

L<Math::BigInt>, L<Math::BigRat> and L<Math::Big> as well
as L<Math::BigInt::Pari> and  L<Math::BigInt::GMP>.

=head1 AUTHORS

(C) by Tels L<http://bloodgate.com/> in early 2002 - 2007.

=cut
                                                                                                                                                            usr/share/perl/5.20.2/bignum.pm                                                                     0100644 0000000 0000000 00000043405 12744441327 014503  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package bignum;
use 5.006;

$VERSION = '0.37';
use Exporter;
@ISA 		= qw( bigint );
@EXPORT_OK	= qw( PI e bexp bpi hex oct ); 
@EXPORT 	= qw( inf NaN ); 

use strict;
use overload;
use bigint ();

############################################################################## 

BEGIN 
  {
  *inf = \&bigint::inf;
  *NaN = \&bigint::NaN;
  *hex = \&bigint::hex;
  *oct = \&bigint::oct;
  }

# These are all alike, and thus faked by AUTOLOAD

my @faked = qw/round_mode accuracy precision div_scale/;
use vars qw/$VERSION $AUTOLOAD $_lite/;		# _lite for testsuite

sub AUTOLOAD
  {
  my $name = $AUTOLOAD;

  $name =~ s/.*:://;    # split package
  no strict 'refs';
  foreach my $n (@faked)
    {
    if ($n eq $name)
      {
      *{"bignum::$name"} = sub 
        {
        my $self = shift;
        no strict 'refs';
        if (defined $_[0])
          {
          Math::BigInt->$name($_[0]);
          return Math::BigFloat->$name($_[0]);
          }
        return Math::BigInt->$name();
        };
      return &$name;
      }
    }
 
  # delayed load of Carp and avoid recursion
  require Carp;
  Carp::croak ("Can't call bignum\-\>$name, not a valid method");
  }

sub unimport
  {
  $^H{bignum} = undef;					# no longer in effect
  overload::remove_constant('binary','','float','','integer');
  }

sub in_effect
  {
  my $level = shift || 0;
  my $hinthash = (caller($level))[10];
  $hinthash->{bignum};
  }

#############################################################################

sub import 
  {
  my $self = shift;

  $^H{bignum} = 1;					# we are in effect

  # for newer Perls override hex() and oct() with a lexical version:
  if ($] > 5.009004)
    {
    bigint::_override();
    }

  # some defaults
  my $lib = ''; my $lib_kind = 'try';
  my $upgrade = 'Math::BigFloat';
  my $downgrade = 'Math::BigInt';

  my @import = ( ':constant' );				# drive it w/ constant
  my @a = @_; my $l = scalar @_; my $j = 0;
  my ($ver,$trace);					# version? trace?
  my ($a,$p);						# accuracy, precision
  for ( my $i = 0; $i < $l ; $i++,$j++ )
    {
    if ($_[$i] eq 'upgrade')
      {
      # this causes upgrading
      $upgrade = $_[$i+1];		# or undef to disable
      my $s = 2; $s = 1 if @a-$j < 2;	# avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] eq 'downgrade')
      {
      # this causes downgrading
      $downgrade = $_[$i+1];		# or undef to disable
      my $s = 2; $s = 1 if @a-$j < 2;	# avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(l|lib|try|only)$/)
      {
      # this causes a different low lib to take care...
      $lib_kind = $1; $lib_kind = 'lib' if $lib_kind eq 'l';
      $lib = $_[$i+1] || '';
      my $s = 2; $s = 1 if @a-$j < 2;	# avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(a|accuracy)$/)
      {
      $a = $_[$i+1];
      my $s = 2; $s = 1 if @a-$j < 2;	# avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(p|precision)$/)
      {
      $p = $_[$i+1];
      my $s = 2; $s = 1 if @a-$j < 2;	# avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(v|version)$/)
      {
      $ver = 1;
      splice @a, $j, 1; $j --;
      }
    elsif ($_[$i] =~ /^(t|trace)$/)
      {
      $trace = 1;
      splice @a, $j, 1; $j --;
      }
    elsif ($_[$i] !~ /^(PI|e|bexp|bpi|hex|oct)\z/)
      {
      die ("unknown option $_[$i]");
      }
    }
  my $class;
  $_lite = 0;					# using M::BI::L ?
  if ($trace)
    {
    require Math::BigInt::Trace; $class = 'Math::BigInt::Trace';
    $upgrade = 'Math::BigFloat::Trace';	
    }
  else
    {
    # see if we can find Math::BigInt::Lite
    if (!defined $a && !defined $p)		# rounding won't work to well
      {
      local @INC = @INC;
      pop @INC if $INC[-1] eq '.';
      eval 'require Math::BigInt::Lite;';
      if ($@ eq '')
        {
        @import = ( );				# :constant in Lite, not MBI
        Math::BigInt::Lite->import( ':constant' );
        $_lite= 1;				# signal okay
        }
      }
    require Math::BigInt if $_lite == 0;	# not already loaded?
    $class = 'Math::BigInt';			# regardless of MBIL or not
    }
  push @import, $lib_kind => $lib if $lib ne ''; 
  # Math::BigInt::Trace or plain Math::BigInt
  $class->import(@import, upgrade => $upgrade);

  if ($trace)
    {
    require Math::BigFloat::Trace; $class = 'Math::BigFloat::Trace';
    $downgrade = 'Math::BigInt::Trace';	
    }
  else
    {
    require Math::BigFloat; $class = 'Math::BigFloat';
    }
  $class->import(':constant','downgrade',$downgrade);

  bignum->accuracy($a) if defined $a;
  bignum->precision($p) if defined $p;
  if ($ver)
    {
    print "bignum\t\t\t v$VERSION\n";
    print "Math::BigInt::Lite\t v$Math::BigInt::Lite::VERSION\n" if $_lite;
    print "Math::BigInt\t\t v$Math::BigInt::VERSION";
    my $config = Math::BigInt->config();
    print " lib => $config->{lib} v$config->{lib_version}\n";
    print "Math::BigFloat\t\t v$Math::BigFloat::VERSION\n";
    exit;
    }

  # Take care of octal/hexadecimal constants
  overload::constant binary => sub { bigint::_binary_constant(shift) };

  # if another big* was already loaded:
  my ($package) = caller();

  no strict 'refs';
  if (!defined *{"${package}::inf"})
    {
    $self->export_to_level(1,$self,@a);           # export inf and NaN
    }
  }

sub PI () { Math::BigFloat->new('3.141592653589793238462643383279502884197'); }
sub e () { Math::BigFloat->new('2.718281828459045235360287471352662497757'); }
sub bpi ($) { Math::BigFloat::bpi(@_); }
sub bexp ($$) { my $x = Math::BigFloat->new($_[0]); $x->bexp($_[1]); }

1;

__END__

=head1 NAME

bignum - Transparent BigNumber support for Perl

=head1 SYNOPSIS

  use bignum;

  $x = 2 + 4.5,"\n";			# BigFloat 6.5
  print 2 ** 512 * 0.1,"\n";		# really is what you think it is
  print inf * inf,"\n";			# prints inf
  print NaN * 3,"\n";			# prints NaN

  {
    no bignum;
    print 2 ** 256,"\n";		# a normal Perl scalar now
  }

  # for older Perls, import into current package:
  use bignum qw/hex oct/;
  print hex("0x1234567890123490"),"\n";
  print oct("01234567890123490"),"\n";

=head1 DESCRIPTION

All operators (including basic math operations) are overloaded. Integer and
floating-point constants are created as proper BigInts or BigFloats,
respectively.

If you do 

        use bignum;

at the top of your script, Math::BigFloat and Math::BigInt will be loaded
and any constant number will be converted to an object (Math::BigFloat for
floats like 3.1415 and Math::BigInt for integers like 1234).

So, the following line:

        $x = 1234;

creates actually a Math::BigInt and stores a reference to in $x.
This happens transparently and behind your back, so to speak.

You can see this with the following:

        perl -Mbignum -le 'print ref(1234)'

Don't worry if it says Math::BigInt::Lite, bignum and friends will use Lite
if it is installed since it is faster for some operations. It will be
automatically upgraded to BigInt whenever necessary:

        perl -Mbignum -le 'print ref(2**255)'

This also means it is a bad idea to check for some specific package, since
the actual contents of $x might be something unexpected. Due to the
transparent way of bignum C<ref()> should not be necessary, anyway.

Since Math::BigInt and BigFloat also overload the normal math operations,
the following line will still work:

        perl -Mbignum -le 'print ref(1234+1234)'

Since numbers are actually objects, you can call all the usual methods from
BigInt/BigFloat on them. This even works to some extent on expressions:

        perl -Mbignum -le '$x = 1234; print $x->bdec()'
        perl -Mbignum -le 'print 1234->copy()->binc();'
        perl -Mbignum -le 'print 1234->copy()->binc->badd(6);'
        perl -Mbignum -le 'print +(1234)->copy()->binc()'

(Note that print doesn't do what you expect if the expression starts with
'(' hence the C<+>)

You can even chain the operations together as usual:

        perl -Mbignum -le 'print 1234->copy()->binc->badd(6);'
        1241

Under bignum (or bigint or bigrat), Perl will "upgrade" the numbers
appropriately. This means that:

        perl -Mbignum -le 'print 1234+4.5'
        1238.5

will work correctly. These mixed cases don't do always work when using
Math::BigInt or Math::BigFloat alone, or at least not in the way normal Perl
scalars work. 

If you do want to work with large integers like under C<use integer;>, try
C<use bigint;>:

        perl -Mbigint -le 'print 1234.5+4.5'
        1238

There is also C<use bigrat;> which gives you big rationals:

        perl -Mbigrat -le 'print 1234+4.1'
        12381/10

The entire upgrading/downgrading is still experimental and might not work
as you expect or may even have bugs. You might get errors like this:

        Can't use an undefined value as an ARRAY reference at
        /usr/local/lib/perl5/5.8.0/Math/BigInt/Calc.pm line 864

This means somewhere a routine got a BigFloat/Lite but expected a BigInt (or
vice versa) and the upgrade/downgrad path was missing. This is a bug, please
report it so that we can fix it.

You might consider using just Math::BigInt or Math::BigFloat, since they
allow you finer control over what get's done in which module/space. For
instance, simple loop counters will be Math::BigInts under C<use bignum;> and
this is slower than keeping them as Perl scalars:

    perl -Mbignum -le 'for ($i = 0; $i < 10; $i++) { print ref($i); }'

Please note the following does not work as expected (prints nothing), since
overloading of '..' is not yet possible in Perl (as of v5.8.0):

    perl -Mbignum -le 'for (1..2) { print ref($_); }'

=head2 Options

bignum recognizes some options that can be passed while loading it via use.
The options can (currently) be either a single letter form, or the long form.
The following options exist:

=over 2

=item a or accuracy

This sets the accuracy for all math operations. The argument must be greater
than or equal to zero. See Math::BigInt's bround() function for details.

	perl -Mbignum=a,50 -le 'print sqrt(20)'

Note that setting precision and accuracy at the same time is not possible.

=item p or precision

This sets the precision for all math operations. The argument can be any
integer. Negative values mean a fixed number of digits after the dot, while
a positive value rounds to this digit left from the dot. 0 or 1 mean round to
integer. See Math::BigInt's bfround() function for details.

	perl -Mbignum=p,-50 -le 'print sqrt(20)'

Note that setting precision and accuracy at the same time is not possible.

=item t or trace

This enables a trace mode and is primarily for debugging bignum or
Math::BigInt/Math::BigFloat.

=item l or lib

Load a different math lib, see L<Math Library>.

	perl -Mbignum=l,GMP -e 'print 2 ** 512'

Currently there is no way to specify more than one library on the command
line. This means the following does not work:

	perl -Mbignum=l,GMP,Pari -e 'print 2 ** 512'

This will be hopefully fixed soon ;)

=item hex

Override the built-in hex() method with a version that can handle big
numbers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as hex() is lexically
overridden in the current scope whenever the bignum pragma is active.

=item oct

Override the built-in oct() method with a version that can handle big
numbers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as oct() is lexically
overridden in the current scope whenever the bigint pragma is active.

=item v or version

This prints out the name and version of all modules used and then exits.

	perl -Mbignum=v

=back

=head2 Methods

Beside import() and AUTOLOAD() there are only a few other methods.

Since all numbers are now objects, you can use all functions that are part of
the BigInt or BigFloat API. It is wise to use only the bxxx() notation, and not
the fxxx() notation, though. This makes it possible that the underlying object
might morph into a different class than BigFloat.

=head2 Caveats

But a warning is in order. When using the following to make a copy of a number,
only a shallow copy will be made.

        $x = 9; $y = $x;
        $x = $y = 7;

If you want to make a real copy, use the following:

        $y = $x->copy();

Using the copy or the original with overloaded math is okay, e.g. the
following work:

        $x = 9; $y = $x;
        print $x + 1, " ", $y,"\n";     # prints 10 9

but calling any method that modifies the number directly will result in
B<both> the original and the copy being destroyed:

        $x = 9; $y = $x;
        print $x->badd(1), " ", $y,"\n";        # prints 10 10

        $x = 9; $y = $x;
        print $x->binc(1), " ", $y,"\n";        # prints 10 10

        $x = 9; $y = $x;
        print $x->bmul(2), " ", $y,"\n";        # prints 18 18

Using methods that do not modify, but test the contents works:

        $x = 9; $y = $x;
        $z = 9 if $x->is_zero();                # works fine

See the documentation about the copy constructor and C<=> in overload, as
well as the documentation in BigInt for further details.

=over 2

=item inf()

A shortcut to return Math::BigInt->binf(). Useful because Perl does not always
handle bareword C<inf> properly.

=item NaN()

A shortcut to return Math::BigInt->bnan(). Useful because Perl does not always
handle bareword C<NaN> properly.

=item e

	# perl -Mbignum=e -wle 'print e'

Returns Euler's number C<e>, aka exp(1).

=item PI()

	# perl -Mbignum=PI -wle 'print PI'

Returns PI.

=item bexp()

	bexp($power,$accuracy);

Returns Euler's number C<e> raised to the appropriate power, to
the wanted accuracy.

Example:

	# perl -Mbignum=bexp -wle 'print bexp(1,80)'

=item bpi()

	bpi($accuracy);

Returns PI to the wanted accuracy.

Example:

	# perl -Mbignum=bpi -wle 'print bpi(80)'

=item upgrade()

Return the class that numbers are upgraded to, is in fact returning
C<$Math::BigInt::upgrade>.

=item in_effect()

	use bignum;

	print "in effect\n" if bignum::in_effect;	# true
	{
	  no bignum;
	  print "in effect\n" if bignum::in_effect;	# false
	}

Returns true or false if C<bignum> is in effect in the current scope.

This method only works on Perl v5.9.4 or later.

=back

=head2 Math Library

Math with the numbers is done (by default) by a module called
Math::BigInt::Calc. This is equivalent to saying:

	use bignum lib => 'Calc';

You can change this by using:

	use bignum lib => 'GMP';

The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:

	use bignum lib => 'Foo,Math::BigInt::Bar';

Please see respective module documentation for further details.

Using C<lib> warns if none of the specified libraries can be found and
L<Math::BigInt> did fall back to one of the default libraries.
To suppress this warning, use C<try> instead:

	use bignum try => 'GMP';

If you want the code to die instead of falling back, use C<only> instead:

	use bignum only => 'GMP';

=head2 INTERNAL FORMAT

The numbers are stored as objects, and their internals might change at anytime,
especially between math operations. The objects also might belong to different
classes, like Math::BigInt, or Math::BigFloat. Mixing them together, even
with normal scalars is not extraordinary, but normal and expected.

You should not depend on the internal format, all accesses must go through
accessor methods. E.g. looking at $x->{sign} is not a bright idea since there
is no guaranty that the object in question has such a hashkey, nor is a hash
underneath at all.

=head2 SIGN

The sign is either '+', '-', 'NaN', '+inf' or '-inf' and stored separately.
You can access it with the sign() method.

A sign of 'NaN' is used to represent the result when input arguments are not
numbers or as a result of 0/0. '+inf' and '-inf' represent plus respectively
minus infinity. You will get '+inf' when dividing a positive number by 0, and
'-inf' when dividing any negative number by 0.

=head1 CAVEATS

=over 2

=item in_effect()

This method only works on Perl v5.9.4 or later.

=item hex()/oct()

C<bigint> overrides these routines with versions that can also handle
big integer values. Under Perl prior to version v5.9.4, however, this
will not happen unless you specifically ask for it with the two
import tags "hex" and "oct" - and then it will be global and cannot be
disabled inside a scope with "no bigint":

	use bigint qw/hex oct/;

	print hex("0x1234567890123456");
	{
		no bigint;
		print hex("0x1234567890123456");
	}

The second call to hex() will warn about a non-portable constant.

Compare this to:

	use bigint;

	# will warn only under older than v5.9.4
	print hex("0x1234567890123456");

=back

=head1 MODULES USED

C<bignum> is just a thin wrapper around various modules of the Math::BigInt
family. Think of it as the head of the family, who runs the shop, and orders
the others to do the work.

The following modules are currently used by bignum:

	Math::BigInt::Lite	(for speed, and only if it is loadable)
	Math::BigInt
	Math::BigFloat

=head1 EXAMPLES

Some cool command line examples to impress the Python crowd ;)

	perl -Mbignum -le 'print sqrt(33)'
	perl -Mbignum -le 'print 2*255'
	perl -Mbignum -le 'print 4.5+2*255'
	perl -Mbignum -le 'print 3/7 + 5/7 + 8/3'
	perl -Mbignum -le 'print 123->is_odd()'
	perl -Mbignum -le 'print log(2)'
	perl -Mbignum -le 'print exp(1)'
	perl -Mbignum -le 'print 2 ** 0.5'
	perl -Mbignum=a,65 -le 'print 2 ** 0.2'
	perl -Mbignum=a,65,l,GMP -le 'print 7 ** 7777'

=head1 LICENSE

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=head1 SEE ALSO

Especially L<bigrat> as in C<perl -Mbigrat -le 'print 1/3+1/4'>.

L<Math::BigFloat>, L<Math::BigInt>, L<Math::BigRat> and L<Math::Big> as well
as L<Math::BigInt::Pari> and  L<Math::BigInt::GMP>.

=head1 AUTHORS

(C) by Tels L<http://bloodgate.com/> in early 2002 - 2007.

=cut
                                                                                                                                                                                                                                                           usr/share/perl/5.20.2/bigrat.pm                                                                     0100644 0000000 0000000 00000033220 12744441327 014464  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package bigrat;
use 5.006;

$VERSION = '0.36';
require Exporter;
@ISA		= qw( bigint );
@EXPORT_OK 	= qw( PI e bpi bexp hex oct );
@EXPORT		= qw( inf NaN );

use strict;
use overload;
use bigint ();

############################################################################## 

BEGIN 
  {
  *inf = \&bigint::inf;
  *NaN = \&bigint::NaN;
  *hex = \&bigint::hex;
  *oct = \&bigint::oct;
  }

# These are all alike, and thus faked by AUTOLOAD

my @faked = qw/round_mode accuracy precision div_scale/;
use vars qw/$VERSION $AUTOLOAD $_lite/;		# _lite for testsuite

sub AUTOLOAD
  {
  my $name = $AUTOLOAD;

  $name =~ s/.*:://;    # split package
  no strict 'refs';
  foreach my $n (@faked)
    {
    if ($n eq $name)
      {
      *{"bigrat::$name"} = sub 
        {
        my $self = shift;
        no strict 'refs';
        if (defined $_[0])
          {
          Math::BigInt->$name($_[0]);
          Math::BigFloat->$name($_[0]);
          return Math::BigRat->$name($_[0]);
          }
        return Math::BigInt->$name();
        };
      return &$name;
      }
    }
 
  # delayed load of Carp and avoid recursion
  require Carp;
  Carp::croak ("Can't call bigrat\-\>$name, not a valid method");
  }

sub unimport
  {
  $^H{bigrat} = undef;					# no longer in effect
  overload::remove_constant('binary','','float','','integer');
  }

sub in_effect
  {
  my $level = shift || 0;
  my $hinthash = (caller($level))[10];
  $hinthash->{bigrat};
  }

#############################################################################

sub import 
  {
  my $self = shift;

  # see also bignum->import() for additional comments

  $^H{bigrat} = 1;					# we are in effect

  # for newer Perls always override hex() and oct() with a lexical version:
  if ($] > 5.009004)
    {
    bigint::_override();
    }
  # some defaults
  my $lib = ''; my $lib_kind = 'try'; my $upgrade = 'Math::BigFloat';

  my @import = ( ':constant' );				# drive it w/ constant
  my @a = @_; my $l = scalar @_; my $j = 0;
  my ($a,$p);
  my ($ver,$trace);					# version? trace?
  for ( my $i = 0; $i < $l ; $i++,$j++ )
    {
    if ($_[$i] eq 'upgrade')
      {
      # this causes upgrading
      $upgrade = $_[$i+1];		# or undef to disable
      my $s = 2; $s = 1 if @a-$j < 2;	# avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s;
      }
    elsif ($_[$i] =~ /^(l|lib|try|only)$/)
      {
      # this causes a different low lib to take care...
      $lib_kind = $1; $lib_kind = 'lib' if $lib_kind eq 'l';
      $lib = $_[$i+1] || '';
      my $s = 2; $s = 1 if @a-$j < 2;	# avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(a|accuracy)$/)
      {
      $a = $_[$i+1];
      my $s = 2; $s = 1 if @a-$j < 2;   # avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(p|precision)$/)
      {
      $p = $_[$i+1];
      my $s = 2; $s = 1 if @a-$j < 2;   # avoid "can not modify non-existent..."
      splice @a, $j, $s; $j -= $s; $i++;
      }
    elsif ($_[$i] =~ /^(v|version)$/)
      {
      $ver = 1;
      splice @a, $j, 1; $j --;
      }
    elsif ($_[$i] =~ /^(t|trace)$/)
      {
      $trace = 1;
      splice @a, $j, 1; $j --;
      }
    elsif ($_[$i] !~ /^(PI|e|bpi|bexp|hex|oct)\z/)
      {
      die ("unknown option $_[$i]");
      }
    }
  my $class;
  $_lite = 0;                                   # using M::BI::L ?
  if ($trace)
    {
    require Math::BigInt::Trace; $class = 'Math::BigInt::Trace';
    $upgrade = 'Math::BigFloat::Trace';
    }
  else
    {
    # see if we can find Math::BigInt::Lite
    if (!defined $a && !defined $p)             # rounding won't work to well
      {
      local @INC = @INC;
      pop @INC if $INC[-1] eq '.';
      eval 'require Math::BigInt::Lite;';
      if ($@ eq '')
        {
        @import = ( );                          # :constant in Lite, not MBI
        Math::BigInt::Lite->import( ':constant' );
        $_lite= 1;                              # signal okay
        }
      }
    require Math::BigInt if $_lite == 0;        # not already loaded?
    $class = 'Math::BigInt';                    # regardless of MBIL or not
    }
  push @import, $lib_kind => $lib if $lib ne ''; 
  # Math::BigInt::Trace or plain Math::BigInt
  $class->import(@import, upgrade => $upgrade);

  require Math::BigFloat;
  Math::BigFloat->import( upgrade => 'Math::BigRat', ':constant' );
  require Math::BigRat;
  Math::BigRat->import( @import );

  bigrat->accuracy($a) if defined $a;
  bigrat->precision($p) if defined $p;
  if ($ver)
    {
    print "bigrat\t\t\t v$VERSION\n";
    print "Math::BigInt::Lite\t v$Math::BigInt::Lite::VERSION\n" if $_lite;  
    print "Math::BigInt\t\t v$Math::BigInt::VERSION";
    my $config = Math::BigInt->config();
    print " lib => $config->{lib} v$config->{lib_version}\n";
    print "Math::BigFloat\t\t v$Math::BigFloat::VERSION\n";
    print "Math::BigRat\t\t v$Math::BigRat::VERSION\n";
    exit;
    }

  # Take care of octal/hexadecimal constants
  overload::constant binary => sub { bigint::_binary_constant(shift) };

  # if another big* was already loaded:
  my ($package) = caller();

  no strict 'refs';
  if (!defined *{"${package}::inf"})
    {
    $self->export_to_level(1,$self,@a);           # export inf and NaN
    }
  }

sub PI () { Math::BigFloat->new('3.141592653589793238462643383279502884197'); }
sub e () { Math::BigFloat->new('2.718281828459045235360287471352662497757'); }

sub bpi ($) { local $Math::BigFloat::upgrade; Math::BigFloat::bpi(@_); }

sub bexp ($$)
  {
  local $Math::BigFloat::upgrade;
  my $x = Math::BigFloat->new($_[0]); $x->bexp($_[1]);
  }

1;

__END__

=head1 NAME

bigrat - Transparent BigNumber/BigRational support for Perl

=head1 SYNOPSIS

  use bigrat;

  print 2 + 4.5,"\n";			# BigFloat 6.5
  print 1/3 + 1/4,"\n";			# produces 7/12

  {
    no bigrat;
    print 1/3,"\n";			# 0.33333...
  }

  # Import into current package:
  use bigrat qw/hex oct/;
  print hex("0x1234567890123490"),"\n";
  print oct("01234567890123490"),"\n";

=head1 DESCRIPTION

All operators (including basic math operations) are overloaded. Integer and
floating-point constants are created as proper BigInts or BigFloats,
respectively.

Other than L<bignum>, this module upgrades to Math::BigRat, meaning that
instead of 2.5 you will get 2+1/2 as output.

=head2 Modules Used

C<bigrat> is just a thin wrapper around various modules of the Math::BigInt
family. Think of it as the head of the family, who runs the shop, and orders
the others to do the work.

The following modules are currently used by bignum:

        Math::BigInt::Lite      (for speed, and only if it is loadable)
        Math::BigInt
        Math::BigFloat
        Math::BigRat

=head2 Math Library

Math with the numbers is done (by default) by a module called
Math::BigInt::Calc. This is equivalent to saying:

	use bigrat lib => 'Calc';

You can change this by using:

        use bignum lib => 'GMP';

The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:

	use bigrat lib => 'Foo,Math::BigInt::Bar';

Using C<lib> warns if none of the specified libraries can be found and
L<Math::BigInt> did fall back to one of the default libraries.
To suppress this warning, use C<try> instead:

        use bignum try => 'GMP';

If you want the code to die instead of falling back, use C<only> instead:

        use bignum only => 'GMP';

Please see respective module documentation for further details.

=head2 Sign

The sign is either '+', '-', 'NaN', '+inf' or '-inf'.

A sign of 'NaN' is used to represent the result when input arguments are not
numbers or as a result of 0/0. '+inf' and '-inf' represent plus respectively
minus infinity. You will get '+inf' when dividing a positive number by 0, and
'-inf' when dividing any negative number by 0.

=head2 Methods

Since all numbers are not objects, you can use all functions that are part of
the BigInt or BigFloat API. It is wise to use only the bxxx() notation, and not
the fxxx() notation, though. This makes you independent on the fact that the
underlying object might morph into a different class than BigFloat.

=over 2

=item inf()

A shortcut to return Math::BigInt->binf(). Useful because Perl does not always
handle bareword C<inf> properly.

=item NaN()

A shortcut to return Math::BigInt->bnan(). Useful because Perl does not always
handle bareword C<NaN> properly.

=item e

	# perl -Mbigrat=e -wle 'print e'

Returns Euler's number C<e>, aka exp(1).

=item PI

	# perl -Mbigrat=PI -wle 'print PI'

Returns PI.

=item bexp()

	bexp($power,$accuracy);


Returns Euler's number C<e> raised to the appropriate power, to
the wanted accuracy.

Example:

	# perl -Mbigrat=bexp -wle 'print bexp(1,80)'

=item bpi()

	bpi($accuracy);

Returns PI to the wanted accuracy.

Example:

	# perl -Mbigrat=bpi -wle 'print bpi(80)'

=item upgrade()

Return the class that numbers are upgraded to, is in fact returning
C<$Math::BigInt::upgrade>.

=item in_effect()

	use bigrat;

	print "in effect\n" if bigrat::in_effect;	# true
	{
	  no bigrat;
	  print "in effect\n" if bigrat::in_effect;	# false
	}

Returns true or false if C<bigrat> is in effect in the current scope.

This method only works on Perl v5.9.4 or later.

=back

=head2 MATH LIBRARY

Math with the numbers is done (by default) by a module called

=head2 Caveat

But a warning is in order. When using the following to make a copy of a number,
only a shallow copy will be made.

        $x = 9; $y = $x;
        $x = $y = 7;

If you want to make a real copy, use the following:

	$y = $x->copy();

Using the copy or the original with overloaded math is okay, e.g. the
following work:

        $x = 9; $y = $x;
        print $x + 1, " ", $y,"\n";     # prints 10 9

but calling any method that modifies the number directly will result in
B<both> the original and the copy being destroyed:

        $x = 9; $y = $x;
        print $x->badd(1), " ", $y,"\n";        # prints 10 10

        $x = 9; $y = $x;
        print $x->binc(1), " ", $y,"\n";        # prints 10 10

        $x = 9; $y = $x;
        print $x->bmul(2), " ", $y,"\n";        # prints 18 18

Using methods that do not modify, but testthe contents works:

        $x = 9; $y = $x;
        $z = 9 if $x->is_zero();                # works fine

See the documentation about the copy constructor and C<=> in overload, as
well as the documentation in BigInt for further details.

=head2 Options

bignum recognizes some options that can be passed while loading it via use.
The options can (currently) be either a single letter form, or the long form.
The following options exist:

=over 2

=item a or accuracy

This sets the accuracy for all math operations. The argument must be greater
than or equal to zero. See Math::BigInt's bround() function for details.

	perl -Mbigrat=a,50 -le 'print sqrt(20)'

Note that setting precision and accuracy at the same time is not possible.

=item p or precision

This sets the precision for all math operations. The argument can be any
integer. Negative values mean a fixed number of digits after the dot, while
a positive value rounds to this digit left from the dot. 0 or 1 mean round to
integer. See Math::BigInt's bfround() function for details.

	perl -Mbigrat=p,-50 -le 'print sqrt(20)'

Note that setting precision and accuracy at the same time is not possible.

=item t or trace

This enables a trace mode and is primarily for debugging bignum or
Math::BigInt/Math::BigFloat.

=item l or lib

Load a different math lib, see L<MATH LIBRARY>.

	perl -Mbigrat=l,GMP -e 'print 2 ** 512'

Currently there is no way to specify more than one library on the command
line. This means the following does not work:

	perl -Mbignum=l,GMP,Pari -e 'print 2 ** 512'

This will be hopefully fixed soon ;)

=item hex

Override the built-in hex() method with a version that can handle big
numbers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as hex() is lexically
overridden in the current scope whenever the bigrat pragma is active.

=item oct

Override the built-in oct() method with a version that can handle big
numbers. This overrides it by exporting it to the current package. Under
Perl v5.10.0 and higher, this is not so necessary, as oct() is lexically
overridden in the current scope whenever the bigrat pragma is active.

=item v or version

This prints out the name and version of all modules used and then exits.

	perl -Mbigrat=v

=back

=head1 CAVEATS

=over 2

=item in_effect()

This method only works on Perl v5.9.4 or later.

=item hex()/oct()

C<bigint> overrides these routines with versions that can also handle
big integer values. Under Perl prior to version v5.9.4, however, this
will not happen unless you specifically ask for it with the two
import tags "hex" and "oct" - and then it will be global and cannot be
disabled inside a scope with "no bigint":

	use bigint qw/hex oct/;

	print hex("0x1234567890123456");
	{
		no bigint;
		print hex("0x1234567890123456");
	}

The second call to hex() will warn about a non-portable constant.

Compare this to:

	use bigint;

	# will warn only under Perl older than v5.9.4
	print hex("0x1234567890123456");

=back

=head1 EXAMPLES

	perl -Mbigrat -le 'print sqrt(33)'
	perl -Mbigrat -le 'print 2*255'
	perl -Mbigrat -le 'print 4.5+2*255'
	perl -Mbigrat -le 'print 3/7 + 5/7 + 8/3'
	perl -Mbigrat -le 'print 12->is_odd()';
	perl -Mbignum=l,GMP -le 'print 7 ** 7777'

=head1 LICENSE

This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.

=head1 SEE ALSO

Especially L<bignum>.

L<Math::BigFloat>, L<Math::BigInt>, L<Math::BigRat> and L<Math::Big> as well
as L<Math::BigInt::Pari> and  L<Math::BigInt::GMP>.

=head1 AUTHORS

(C) by Tels L<http://bloodgate.com/> in early 2002 - 2007.

=cut
                                                                                                                                                                                                                                                                                                                                                                                usr/share/perl/5.20.2/blib.pm                                                                       0100644 0000000 0000000 00000004046 12744441327 014130  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package blib;

=head1 NAME

blib - Use MakeMaker's uninstalled version of a package

=head1 SYNOPSIS

 perl -Mblib script [args...]

 perl -Mblib=dir script [args...]

=head1 DESCRIPTION

Looks for MakeMaker-like I<'blib'> directory structure starting in
I<dir> (or current directory) and working back up to five levels of '..'.

Intended for use on command line with B<-M> option as a way of testing
arbitrary scripts against an uninstalled version of a package.

However it is possible to :

 use blib;
 or
 use blib '..';

etc. if you really must.

=head1 BUGS

Pollutes global name space for development only task.

=head1 AUTHOR

Nick Ing-Simmons nik@tiuk.ti.com

=cut

use Cwd;
use File::Spec;

use vars qw($VERSION $Verbose);
$VERSION = '1.06';
$Verbose = 0;

sub import
{
 my $package = shift;
 my $dir;
 if ($^O eq "MSWin32" && -f "Win32.xs") {
     # We don't use getcwd() on Windows because it will internally
     # call Win32::GetCwd(), which will get the Win32 module loaded.
     # That means that it would not be possible to run `make test`
     # for the Win32 module because blib.pm would always load the
     # installed version before @INC gets updated with the blib path.
     chomp($dir = `cd`);
 }
 else {
     $dir = getcwd;
 }
 if ($^O eq 'VMS') { ($dir = VMS::Filespec::unixify($dir)) =~ s-/\z--; }
 if (@_)
  {
   $dir = shift;
   $dir =~ s/blib\z//;
   $dir =~ s,/+\z,,;
   $dir = File::Spec->curdir unless ($dir);
   die "$dir is not a directory\n" unless (-d $dir);
  }

 # detaint: if the user asked for blib, s/he presumably knew
 # what s/he wanted
 $dir = $1 if $dir =~ /^(.*)$/;

 my $i = 5;
 my($blib, $blib_lib, $blib_arch);
 while ($i--)
  {
   $blib = File::Spec->catdir($dir, "blib");
   $blib_lib = File::Spec->catdir($blib, "lib");
   $blib_arch = File::Spec->catdir($blib, "arch");

   if (-d $blib && -d $blib_arch && -d $blib_lib)
    {
     unshift(@INC,$blib_arch,$blib_lib);
     warn "Using $blib\n" if $Verbose;
     return;
    }
   $dir = File::Spec->catdir($dir, File::Spec->updir);
  }
 die "Cannot find blib even in $dir\n";
}

1;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          usr/share/perl/5.20.2/charnames.pm                                                                  0100644 0000000 0000000 00000050620 12744441327 015160  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package charnames;
use strict;
use warnings;
our $VERSION = '1.40';
use unicore::Name;    # mktables-generated algorithmically-defined names
use _charnames ();    # The submodule for this where most of the work gets done

use bytes ();          # for $bytes::hint_bits
use re "/aa";          # Everything in here should be ASCII

# Translate between Unicode character names and their code points.
# This is a wrapper around the submodule C<_charnames>.  This design allows
# C<_charnames> to be autoloaded to enable use of \N{...}, but requires this
# module to be explicitly requested for the functions API.

$Carp::Internal{ (__PACKAGE__) } = 1;

sub import
{
  shift; ## ignore class name
  _charnames->import(@_);
}

# Cache of already looked-up values.  This is set to only contain
# official values, and user aliases can't override them, so scoping is
# not an issue.
my %viacode;

sub viacode {
  return _charnames::viacode(@_);
}

sub vianame
{
  if (@_ != 1) {
    _charnames::carp "charnames::vianame() expects one name argument";
    return ()
  }

  # Looks up the character name and returns its ordinal if
  # found, undef otherwise.

  my $arg = shift;

  if ($arg =~ /^U\+([0-9a-fA-F]+)$/) {

    # khw claims that this is poor interface design.  The function should
    # return either a an ord or a chr for all inputs; not be bipolar.  But
    # can't change it because of backward compatibility.  New code can use
    # string_vianame() instead.
    my $ord = CORE::hex $1;
    return chr $ord if $ord <= 255 || ! ((caller 0)[8] & $bytes::hint_bits);
    _charnames::carp _charnames::not_legal_use_bytes_msg($arg, chr $ord);
    return;
  }

  # The first 1 arg means wants an ord returned; the second that we are in
  # runtime, and this is the first level routine called from the user
  return _charnames::lookup_name($arg, 1, 1);
} # vianame

sub string_vianame {

  # Looks up the character name and returns its string representation if
  # found, undef otherwise.

  if (@_ != 1) {
    _charnames::carp "charnames::string_vianame() expects one name argument";
    return;
  }

  my $arg = shift;

  if ($arg =~ /^U\+([0-9a-fA-F]+)$/) {

    my $ord = CORE::hex $1;
    return chr $ord if $ord <= 255 || ! ((caller 0)[8] & $bytes::hint_bits);

    _charnames::carp _charnames::not_legal_use_bytes_msg($arg, chr $ord);
    return;
  }

  # The 0 arg means wants a string returned; the 1 arg means that we are in
  # runtime, and this is the first level routine called from the user
  return _charnames::lookup_name($arg, 0, 1);
} # string_vianame

1;
__END__

=encoding utf8

=head1 NAME

charnames - access to Unicode character names and named character sequences; also define character names

=head1 SYNOPSIS

 use charnames ':full';
 print "\N{GREEK SMALL LETTER SIGMA} is called sigma.\n";
 print "\N{LATIN CAPITAL LETTER E WITH VERTICAL LINE BELOW}",
       " is an officially named sequence of two Unicode characters\n";

 use charnames ':loose';
 print "\N{Greek small-letter  sigma}",
        "can be used to ignore case, underscores, most blanks,"
        "and when you aren't sure if the official name has hyphens\n";

 use charnames ':short';
 print "\N{greek:Sigma} is an upper-case sigma.\n";

 use charnames qw(cyrillic greek);
 print "\N{sigma} is Greek sigma, and \N{be} is Cyrillic b.\n";

 use utf8;
 use charnames ":full", ":alias" => {
   e_ACUTE => "LATIN SMALL LETTER E WITH ACUTE",
   mychar => 0xE8000,  # Private use area
   "自転車に乗る人" => "BICYCLIST"
 };
 print "\N{e_ACUTE} is a small letter e with an acute.\n";
 print "\N{mychar} allows me to name private use characters.\n";
 print "And I can create synonyms in other languages,",
       " such as \N{自転車に乗る人} for "BICYCLIST (U+1F6B4)\n";

 use charnames ();
 print charnames::viacode(0x1234); # prints "ETHIOPIC SYLLABLE SEE"
 printf "%04X", charnames::vianame("GOTHIC LETTER AHSA"); # prints
                                                          # "10330"
 print charnames::vianame("LATIN CAPITAL LETTER A"); # prints 65 on
                                                     # ASCII platforms;
                                                     # 193 on EBCDIC
 print charnames::string_vianame("LATIN CAPITAL LETTER A"); # prints "A"

=head1 DESCRIPTION

Pragma C<use charnames> is used to gain access to the names of the
Unicode characters and named character sequences, and to allow you to define
your own character and character sequence names.

All forms of the pragma enable use of the following 3 functions:

=over

=item *

L</charnames::string_vianame(I<name>)> for run-time lookup of a
either a character name or a named character sequence, returning its string
representation

=item *

L</charnames::vianame(I<name>)> for run-time lookup of a
character name (but not a named character sequence) to get its ordinal value
(code point)

=item *

L</charnames::viacode(I<code>)> for run-time lookup of a code point to get its
Unicode name.

=back

Starting in Perl v5.16, any occurrence of C<\N{I<CHARNAME>}> sequences
in a double-quotish string automatically loads this module with arguments
C<:full> and C<:short> (described below) if it hasn't already been loaded with
different arguments, in order to compile the named Unicode character into
position in the string.  Prior to v5.16, an explicit S<C<use charnames>> was
required to enable this usage.  (However, prior to v5.16, the form C<S<"use
charnames ();">> did not enable C<\N{I<CHARNAME>}>.)

Note that C<\N{U+I<...>}>, where the I<...> is a hexadecimal number,
also inserts a character into a string.
The character it inserts is the one whose Unicode code point
(ordinal value) is equal to the number.  For example, C<"\N{U+263a}"> is
the Unicode (white background, black foreground) smiley face
equivalent to C<"\N{WHITE SMILING FACE}">.
Also note, C<\N{I<...>}> can mean a regex quantifier instead of a character
name, when the I<...> is a number (or comma separated pair of numbers
(see L<perlreref/QUANTIFIERS>), and is not related to this pragma.

The C<charnames> pragma supports arguments C<:full>, C<:loose>, C<:short>,
script names and L<customized aliases|/CUSTOM ALIASES>.

If C<:full> is present, for expansion of
C<\N{I<CHARNAME>}>, the string I<CHARNAME> is first looked up in the list of
standard Unicode character names.

C<:loose> is a variant of C<:full> which allows I<CHARNAME> to be less
precisely specified.  Details are in L</LOOSE MATCHES>.

If C<:short> is present, and
I<CHARNAME> has the form C<I<SCRIPT>:I<CNAME>>, then I<CNAME> is looked up
as a letter in script I<SCRIPT>, as described in the next paragraph.
Or, if C<use charnames> is used
with script name arguments, then for C<\N{I<CHARNAME>}> the name
I<CHARNAME> is looked up as a letter in the given scripts (in the
specified order). Customized aliases can override these, and are explained in
L</CUSTOM ALIASES>.

For lookup of I<CHARNAME> inside a given script I<SCRIPTNAME>,
this pragma looks in the table of standard Unicode names for the names

  SCRIPTNAME CAPITAL LETTER CHARNAME
  SCRIPTNAME SMALL LETTER CHARNAME
  SCRIPTNAME LETTER CHARNAME

If I<CHARNAME> is all lowercase,
then the C<CAPITAL> variant is ignored, otherwise the C<SMALL> variant
is ignored, and both I<CHARNAME> and I<SCRIPTNAME> are converted to all
uppercase for look-up.  Other than that, both of them follow L<loose|/LOOSE
MATCHES> rules if C<:loose> is also specified; strict otherwise.

Note that C<\N{...}> is compile-time; it's a special form of string
constant used inside double-quotish strings; this means that you cannot
use variables inside the C<\N{...}>.  If you want similar run-time
functionality, use
L<charnames::string_vianame()|/charnames::string_vianame(I<name>)>.

Note, starting in Perl 5.18, the name C<BELL> refers to the Unicode character
U+1F514, instead of the traditional U+0007.  For the latter, use C<ALERT>
or C<BEL>.

It is a syntax error to use C<\N{NAME}> where C<NAME> is unknown.

For C<\N{NAME}>, it is a fatal error if C<use bytes> is in effect and the
input name is that of a character that won't fit into a byte (i.e., whose
ordinal is above 255).

Otherwise, any string that includes a C<\N{I<charname>}> or
C<S<\N{U+I<code point>}>> will automatically have Unicode rules (see
L<perlunicode/Byte and Character Semantics>).

=head1 LOOSE MATCHES

By specifying C<:loose>, Unicode's L<loose character name
matching|http://www.unicode.org/reports/tr44#Matching_Rules> rules are
selected instead of the strict exact match used otherwise.
That means that I<CHARNAME> doesn't have to be so precisely specified.
Upper/lower case doesn't matter (except with scripts as mentioned above), nor
do any underscores, and the only hyphens that matter are those at the
beginning or end of a word in the name (with one exception:  the hyphen in
U+1180 C<HANGUL JUNGSEONG O-E> does matter).
Also, blanks not adjacent to hyphens don't matter.
The official Unicode names are quite variable as to where they use hyphens
versus spaces to separate word-like units, and this option allows you to not
have to care as much.
The reason non-medial hyphens matter is because of cases like
U+0F60 C<TIBETAN LETTER -A> versus U+0F68 C<TIBETAN LETTER A>.
The hyphen here is significant, as is the space before it, and so both must be
included.

C<:loose> slows down look-ups by a factor of 2 to 3 versus
C<:full>, but the trade-off may be worth it to you.  Each individual look-up
takes very little time, and the results are cached, so the speed difference
would become a factor only in programs that do look-ups of many different
spellings, and probably only when those look-ups are through C<vianame()> and
C<string_vianame()>, since C<\N{...}> look-ups are done at compile time.

=head1 ALIASES

Starting in Unicode 6.1 and Perl v5.16, Unicode defines many abbreviations and
names that were formerly Perl extensions, and some additional ones that Perl
did not previously accept.  The list is getting too long to reproduce here,
but you can get the complete list from the Unicode web site:
L<http://www.unicode.org/Public/UNIDATA/NameAliases.txt>.

Earlier versions of Perl accepted almost all the 6.1 names.  These were most
extensively documented in the v5.14 version of this pod:
L<http://perldoc.perl.org/5.14.0/charnames.html#ALIASES>.

=head1 CUSTOM ALIASES

You can add customized aliases to standard (C<:full>) Unicode naming
conventions.  The aliases override any standard definitions, so, if
you're twisted enough, you can change C<"\N{LATIN CAPITAL LETTER A}"> to
mean C<"B">, etc.

Aliases must begin with a character that is alphabetic.  After that, each may
contain any combination of word (C<\w>) characters, SPACE (U+0020),
HYPHEN-MINUS (U+002D), LEFT PARENTHESIS (U+0028), RIGHT PARENTHESIS (U+0029),
and NO-BREAK SPACE (U+00A0).  These last three should never have been allowed
in names, and are retained for backwards compatibility only; they may be
deprecated and removed in future releases of Perl, so don't use them for new
names.  (More precisely, the first character of a name you specify must be
something that matches all of C<\p{ID_Start}>, C<\p{Alphabetic}>, and
C<\p{Gc=Letter}>.  This makes sure it is what any reasonable person would view
as an alphabetic character.  And, the continuation characters that match C<\w>
must also match C<\p{ID_Continue}>.)  Starting with Perl v5.18, any Unicode
characters meeting the above criteria may be used; prior to that only
Latin1-range characters were acceptable.

An alias can map to either an official Unicode character name (not a loose
matched name) or to a
numeric code point (ordinal).  The latter is useful for assigning names
to code points in Unicode private use areas such as U+E800 through
U+F8FF.
A numeric code point must be a non-negative integer or a string beginning
with C<"U+"> or C<"0x"> with the remainder considered to be a
hexadecimal integer.  A literal numeric constant must be unsigned; it
will be interpreted as hex if it has a leading zero or contains
non-decimal hex digits; otherwise it will be interpreted as decimal.
If it begins with C<"U+">, it is interpreted as the Unicode code point;
otherwise it is interpreted as native.  (Only code points below 256 can
differ between Unicode and native.)  Thus C<U+41> is always the Latin letter
"A"; but C<0x41> can be "NO-BREAK SPACE" on EBCDIC platforms.

Aliases are added either by the use of anonymous hashes:

    use charnames ":alias" => {
        e_ACUTE => "LATIN SMALL LETTER E WITH ACUTE",
        mychar1 => 0xE8000,
        };
    my $str = "\N{e_ACUTE}";

or by using a file containing aliases:

    use charnames ":alias" => "pro";

This will try to read C<"unicore/pro_alias.pl"> from the C<@INC> path. This
file should return a list in plain perl:

    (
    A_GRAVE         => "LATIN CAPITAL LETTER A WITH GRAVE",
    A_CIRCUM        => "LATIN CAPITAL LETTER A WITH CIRCUMFLEX",
    A_DIAERES       => "LATIN CAPITAL LETTER A WITH DIAERESIS",
    A_TILDE         => "LATIN CAPITAL LETTER A WITH TILDE",
    A_BREVE         => "LATIN CAPITAL LETTER A WITH BREVE",
    A_RING          => "LATIN CAPITAL LETTER A WITH RING ABOVE",
    A_MACRON        => "LATIN CAPITAL LETTER A WITH MACRON",
    mychar2         => "U+E8001",
    );

Both these methods insert C<":full"> automatically as the first argument (if no
other argument is given), and you can give the C<":full"> explicitly as
well, like

    use charnames ":full", ":alias" => "pro";

C<":loose"> has no effect with these.  Input names must match exactly, using
C<":full"> rules.

Also, both these methods currently allow only single characters to be named.
To name a sequence of characters, use a
L<custom translator|/CUSTOM TRANSLATORS> (described below).

=head1 charnames::string_vianame(I<name>)

This is a runtime equivalent to C<\N{...}>.  I<name> can be any expression
that evaluates to a name accepted by C<\N{...}> under the L<C<:full>
option|/DESCRIPTION> to C<charnames>.  In addition, any other options for the
controlling C<"use charnames"> in the same scope apply, like C<:loose> or any
L<script list, C<:short> option|/DESCRIPTION>, or L<custom aliases|/CUSTOM
ALIASES> you may have defined.

The only differences are due to the fact that C<string_vianame> is run-time
and C<\N{}> is compile time.  You can't interpolate inside a C<\N{}>, (so
C<\N{$variable}> doesn't work); and if the input name is unknown,
C<string_vianame> returns C<undef> instead of it being a syntax error.

=head1 charnames::vianame(I<name>)

This is similar to C<string_vianame>.  The main difference is that under most
circumstances, C<vianame> returns an ordinal code
point, whereas C<string_vianame> returns a string.  For example,

   printf "U+%04X", charnames::vianame("FOUR TEARDROP-SPOKED ASTERISK");

prints "U+2722".

This leads to the other two differences.  Since a single code point is
returned, the function can't handle named character sequences, as these are
composed of multiple characters (it returns C<undef> for these.  And, the code
point can be that of any
character, even ones that aren't legal under the C<S<use bytes>> pragma,

See L</BUGS> for the circumstances in which the behavior differs
from  that described above.

=head1 charnames::viacode(I<code>)

Returns the full name of the character indicated by the numeric code.
For example,

    print charnames::viacode(0x2722);

prints "FOUR TEARDROP-SPOKED ASTERISK".

The name returned is the "best" (defined below) official name or alias
for the code point, if
available; otherwise your custom alias for it, if defined; otherwise C<undef>.
This means that your alias will only be returned for code points that don't
have an official Unicode name (nor alias) such as private use code points.

If you define more than one name for the code point, it is indeterminate
which one will be returned.

As mentioned, the function returns C<undef> if no name is known for the code
point.  In Unicode the proper name for these is the empty string, which
C<undef> stringifies to.  (If you ask for a code point past the legal
Unicode maximum of U+10FFFF that you haven't assigned an alias to, you
get C<undef> plus a warning.)

The input number must be a non-negative integer, or a string beginning
with C<"U+"> or C<"0x"> with the remainder considered to be a
hexadecimal integer.  A literal numeric constant must be unsigned; it
will be interpreted as hex if it has a leading zero or contains
non-decimal hex digits; otherwise it will be interpreted as decimal.
If it begins with C<"U+">, it is interpreted as the Unicode code point;
otherwise it is interpreted as native.  (Only code points below 256 can
differ between Unicode and native.)  Thus C<U+41> is always the Latin letter
"A"; but C<0x41> can be "NO-BREAK SPACE" on EBCDIC platforms.

As mentioned above under L</ALIASES>, Unicode 6.1 defines extra names
(synonyms or aliases) for some code points, most of which were already
available as Perl extensions.  All these are accepted by C<\N{...}> and the
other functions in this module, but C<viacode> has to choose which one
name to return for a given input code point, so it returns the "best" name.
To understand how this works, it is helpful to know more about the Unicode
name properties.  All code points actually have only a single name, which
(starting in Unicode 2.0) can never change once a character has been assigned
to the code point.  But mistakes have been made in assigning names, for
example sometimes a clerical error was made during the publishing of the
Standard which caused words to be misspelled, and there was no way to correct
those.  The Name_Alias property was eventually created to handle these
situations.  If a name was wrong, a corrected synonym would be published for
it, using Name_Alias.  C<viacode> will return that corrected synonym as the
"best" name for a code point.  (It is even possible, though it hasn't happened
yet, that the correction itself will need to be corrected, and so another
Name_Alias can be created for that code point; C<viacode> will return the
most recent correction.)

The Unicode name for each of the control characters (such as LINE FEED) is the
empty string.  However almost all had names assigned by other standards, such
as the ASCII Standard, or were in common use.  C<viacode> returns these names
as the "best" ones available.  Unicode 6.1 has created Name_Aliases for each
of them, including alternate names, like NEW LINE.  C<viacode> uses the
original name, "LINE FEED" in preference to the alternate.  Similarly the
name returned for U+FEFF is "ZERO WIDTH NO-BREAK SPACE", not "BYTE ORDER
MARK".

Until Unicode 6.1, the 4 control characters U+0080, U+0081, U+0084, and U+0099
did not have names nor aliases.
To preserve backwards compatibility, any alias you define for these code
points will be returned by this function, in preference to the official name.

Some code points also have abbreviated names, such as "LF" or "NL".
C<viacode> never returns these.

Because a name correction may be added in future Unicode releases, the name
that C<viacode> returns may change as a result.  This is a rare event, but it
does happen.

=head1 CUSTOM TRANSLATORS

The mechanism of translation of C<\N{...}> escapes is general and not
hardwired into F<charnames.pm>.  A module can install custom
translations (inside the scope which C<use>s the module) with the
following magic incantation:

    sub import {
        shift;
        $^H{charnames} = \&translator;
    }

Here translator() is a subroutine which takes I<CHARNAME> as an
argument, and returns text to insert into the string instead of the
C<\N{I<CHARNAME>}> escape.

This is the only way you can create a custom named sequence of code points.

Since the text to insert should be different
in C<bytes> mode and out of it, the function should check the current
state of C<bytes>-flag as in:

    use bytes ();                      # for $bytes::hint_bits
    sub translator {
        if ($^H & $bytes::hint_bits) {
            return bytes_translator(@_);
        }
        else {
            return utf8_translator(@_);
        }
    }

See L</CUSTOM ALIASES> above for restrictions on I<CHARNAME>.

Of course, C<vianame>, C<viacode>, and C<string_vianame> would need to be
overridden as well.

=head1 BUGS

vianame() normally returns an ordinal code point, but when the input name is of
the form C<U+...>, it returns a chr instead.  In this case, if C<use bytes> is
in effect and the character won't fit into a byte, it returns C<undef> and
raises a warning.

Since evaluation of the translation function (see L</CUSTOM
TRANSLATORS>) happens in the middle of compilation (of a string
literal), the translation function should not do any C<eval>s or
C<require>s.  This restriction should be lifted (but is low priority) in
a future version of Perl.

=cut

# ex: set ts=8 sts=2 sw=2 et:
                                                                                                                usr/share/perl/5.20.2/deprecate.pm                                                                  0100644 0000000 0000000 00000007514 12744441327 015157  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package deprecate;
use strict;
use warnings;
our $VERSION = 0.03;

# our %Config can ignore %Config::Config, e.g. for testing
our %Config;
unless (%Config) { require Config; *Config = \%Config::Config; }

# Debian-specific change: recommend the separate Debian packages of
# deprecated modules where available

our %DEBIAN_PACKAGES = (
    'CGI' => 'libcgi-pm-perl',
    'CGI::Apache' => 'libcgi-pm-perl',
    'CGI::Carp' => 'libcgi-pm-perl',
    'CGI::Cookie' => 'libcgi-pm-perl',
    'CGI::Fast' => 'libcgi-fast-perl',
    'CGI::Pretty' => 'libcgi-pm-perl',
    'CGI::Push' => 'libcgi-pm-perl',
    'CGI::Switch' => 'libcgi-pm-perl',
    'CGI::Util' => 'libcgi-pm-perl',
    'Module::Build' => 'libmodule-build-perl',
    'Package::Constants' => 'libpackage-constants-perl',
);

# This isn't a public API. It's internal to code maintained by the perl-porters
# If you would like it to be a public API, please send a patch with
# documentation and tests. Until then, it may change without warning.
sub __loaded_from_core {
    my ($package, $file, $expect_leaf) = @_;

    foreach my $pair ([qw(sitearchexp archlibexp)],
		      [qw(sitelibexp privlibexp)]) {
	my ($site, $priv) = @Config{@$pair};
	if ($^O eq 'VMS') {
	    for my $d ($site, $priv) { $d = VMS::Filespec::unixify($d) };
	}
	# Just in case anyone managed to configure with trailing /s
	s!/*$!!g foreach $site, $priv;

	next if $site eq $priv;
	if (uc("$priv/$expect_leaf") eq uc($file)) {
	    return 1;
	}
    }
    return 0;
}

sub import {
    my ($package, $file) = caller;

    my $expect_leaf = "$package.pm";
    $expect_leaf =~ s!::!/!g;

    if (__loaded_from_core($package, $file, $expect_leaf)) {
	my $call_depth=1;
	my @caller;
	while (@caller = caller $call_depth++) {
	    last if $caller[7]			# use/require
		and $caller[6] eq $expect_leaf;	# the package file
	}
	unless (@caller) {
	    require Carp;
	    Carp::cluck(<<"EOM");
Can't find use/require $expect_leaf in caller stack
EOM
	    return;
	}

	# This is fragile, because it
	# is directly poking in the internals of warnings.pm
	my ($call_file, $call_line, $callers_bitmask) = @caller[1,2,9];

	if (defined $callers_bitmask
	    && (vec($callers_bitmask, $warnings::Offsets{deprecated}, 1)
		|| vec($callers_bitmask, $warnings::Offsets{all}, 1))) {
		if (my $deb = $DEBIAN_PACKAGES{$package}) {
		    warn <<"EOM";
$package will be removed from the Perl core distribution in the next major release. Please install the separate $deb package. It is being used at $call_file, line $call_line.
EOM
		} else {
		    warn <<"EOM";
$package will be removed from the Perl core distribution in the next major release. Please install it from CPAN. It is being used at $call_file, line $call_line.
EOM
		}
	}
    }
}

1;

__END__

=head1 NAME

deprecate - Perl pragma for deprecating the core version of a module

=head1 SYNOPSIS

    use deprecate;  # always deprecate the module in which this occurs

    use if $] > 5.010, 'deprecate'; # conditionally deprecate the module


=head1 DESCRIPTION

This module is used using C<use deprecate;> (or something that calls
C<< deprecate->import() >>, for example C<use if COND, deprecate;>).

If the module that includes C<use deprecate> is located in a core library
directory, a deprecation warning is issued, encouraging the user to use
the version on CPAN.  If that module is located in a site library, it is
the CPAN version, and no warning is issued.

=head2 EXPORT

None by default.  The only method is C<import>, called by C<use deprecate;>.


=head1 SEE ALSO

First example to C<use deprecate;> was L<Switch>.


=head1 AUTHOR

Original version by Nicholas Clark


=head1 COPYRIGHT AND LICENSE

Copyright (C) 2009, 2011

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.10.0 or,
at your option, any later version of Perl 5 you may have available.


=cut
                                                                                                                                                                                    usr/share/perl/5.20.2/diagnostics.pm                                                                0100644 0000000 0000000 00000044410 12744441327 015526  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package diagnostics;

=head1 NAME

diagnostics, splain - produce verbose warning diagnostics

=head1 SYNOPSIS

Using the C<diagnostics> pragma:

    use diagnostics;
    use diagnostics -verbose;

    enable  diagnostics;
    disable diagnostics;

Using the C<splain> standalone filter program:

    perl program 2>diag.out
    splain [-v] [-p] diag.out

Using diagnostics to get stack traces from a misbehaving script:

    perl -Mdiagnostics=-traceonly my_script.pl

=head1 DESCRIPTION

=head2 The C<diagnostics> Pragma

This module extends the terse diagnostics normally emitted by both the
perl compiler and the perl interpreter (from running perl with a -w 
switch or C<use warnings>), augmenting them with the more
explicative and endearing descriptions found in L<perldiag>.  Like the
other pragmata, it affects the compilation phase of your program rather
than merely the execution phase.

To use in your program as a pragma, merely invoke

    use diagnostics;

at the start (or near the start) of your program.  (Note 
that this I<does> enable perl's B<-w> flag.)  Your whole
compilation will then be subject(ed :-) to the enhanced diagnostics.
These still go out B<STDERR>.

Due to the interaction between runtime and compiletime issues,
and because it's probably not a very good idea anyway,
you may not use C<no diagnostics> to turn them off at compiletime.
However, you may control their behaviour at runtime using the 
disable() and enable() methods to turn them off and on respectively.

The B<-verbose> flag first prints out the L<perldiag> introduction before
any other diagnostics.  The $diagnostics::PRETTY variable can generate nicer
escape sequences for pagers.

Warnings dispatched from perl itself (or more accurately, those that match
descriptions found in L<perldiag>) are only displayed once (no duplicate
descriptions).  User code generated warnings a la warn() are unaffected,
allowing duplicate user messages to be displayed.

This module also adds a stack trace to the error message when perl dies.
This is useful for pinpointing what
caused the death.  The B<-traceonly> (or
just B<-t>) flag turns off the explanations of warning messages leaving just
the stack traces.  So if your script is dieing, run it again with

  perl -Mdiagnostics=-traceonly my_bad_script

to see the call stack at the time of death.  By supplying the B<-warntrace>
(or just B<-w>) flag, any warnings emitted will also come with a stack
trace.

=head2 The I<splain> Program

While apparently a whole nuther program, I<splain> is actually nothing
more than a link to the (executable) F<diagnostics.pm> module, as well as
a link to the F<diagnostics.pod> documentation.  The B<-v> flag is like
the C<use diagnostics -verbose> directive.
The B<-p> flag is like the
$diagnostics::PRETTY variable.  Since you're post-processing with 
I<splain>, there's no sense in being able to enable() or disable() processing.

Output from I<splain> is directed to B<STDOUT>, unlike the pragma.

=head1 EXAMPLES

The following file is certain to trigger a few errors at both
runtime and compiletime:

    use diagnostics;
    print NOWHERE "nothing\n";
    print STDERR "\n\tThis message should be unadorned.\n";
    warn "\tThis is a user warning";
    print "\nDIAGNOSTIC TESTER: Please enter a <CR> here: ";
    my $a, $b = scalar <STDIN>;
    print "\n";
    print $x/$y;

If you prefer to run your program first and look at its problem
afterwards, do this:

    perl -w test.pl 2>test.out
    ./splain < test.out

Note that this is not in general possible in shells of more dubious heritage, 
as the theoretical 

    (perl -w test.pl >/dev/tty) >& test.out
    ./splain < test.out

Because you just moved the existing B<stdout> to somewhere else.

If you don't want to modify your source code, but still have on-the-fly
warnings, do this:

    exec 3>&1; perl -w test.pl 2>&1 1>&3 3>&- | splain 1>&2 3>&- 

Nifty, eh?

If you want to control warnings on the fly, do something like this.
Make sure you do the C<use> first, or you won't be able to get
at the enable() or disable() methods.

    use diagnostics; # checks entire compilation phase 
	print "\ntime for 1st bogus diags: SQUAWKINGS\n";
	print BOGUS1 'nada';
	print "done with 1st bogus\n";

    disable diagnostics; # only turns off runtime warnings
	print "\ntime for 2nd bogus: (squelched)\n";
	print BOGUS2 'nada';
	print "done with 2nd bogus\n";

    enable diagnostics; # turns back on runtime warnings
	print "\ntime for 3rd bogus: SQUAWKINGS\n";
	print BOGUS3 'nada';
	print "done with 3rd bogus\n";

    disable diagnostics;
	print "\ntime for 4th bogus: (squelched)\n";
	print BOGUS4 'nada';
	print "done with 4th bogus\n";

=head1 INTERNALS

Diagnostic messages derive from the F<perldiag.pod> file when available at
runtime.  Otherwise, they may be embedded in the file itself when the
splain package is built.   See the F<Makefile> for details.

If an extant $SIG{__WARN__} handler is discovered, it will continue
to be honored, but only after the diagnostics::splainthis() function 
(the module's $SIG{__WARN__} interceptor) has had its way with your
warnings.

There is a $diagnostics::DEBUG variable you may set if you're desperately
curious what sorts of things are being intercepted.

    BEGIN { $diagnostics::DEBUG = 1 } 


=head1 BUGS

Not being able to say "no diagnostics" is annoying, but may not be
insurmountable.

The C<-pretty> directive is called too late to affect matters.
You have to do this instead, and I<before> you load the module.

    BEGIN { $diagnostics::PRETTY = 1 } 

I could start up faster by delaying compilation until it should be
needed, but this gets a "panic: top_level" when using the pragma form
in Perl 5.001e.

While it's true that this documentation is somewhat subserious, if you use
a program named I<splain>, you should expect a bit of whimsy.

=head1 AUTHOR

Tom Christiansen <F<tchrist@mox.perl.com>>, 25 June 1995.

=cut

use strict;
use 5.009001;
use Carp;
$Carp::Internal{__PACKAGE__.""}++;

our $VERSION = '1.34';
our $DEBUG;
our $VERBOSE;
our $PRETTY;
our $TRACEONLY = 0;
our $WARNTRACE = 0;

use Config;
use Text::Tabs 'expand';
my $privlib = $Config{privlibexp};
if ($^O eq 'VMS') {
    require VMS::Filespec;
    $privlib = VMS::Filespec::unixify($privlib);
}
my @trypod = (
	   "$privlib/pod/perldiag.pod",
	   "$privlib/pods/perldiag.pod",
	  );
# handy for development testing of new warnings etc
unshift @trypod, "./pod/perldiag.pod" if -e "pod/perldiag.pod";
(my $PODFILE) = ((grep { -e } @trypod), $trypod[$#trypod])[0];

$DEBUG ||= 0;

local $| = 1;
local $_;
local $.;

my $standalone;
my(%HTML_2_Troff, %HTML_2_Latin_1, %HTML_2_ASCII_7);

CONFIG: {
    our $opt_p = our $opt_d = our $opt_v = our $opt_f = '';

    unless (caller) {
	$standalone++;
	require Getopt::Std;
	Getopt::Std::getopts('pdvf:')
	    or die "Usage: $0 [-v] [-p] [-f splainpod]";
	$PODFILE = $opt_f if $opt_f;
	$DEBUG = 2 if $opt_d;
	$VERBOSE = $opt_v;
	$PRETTY = $opt_p;
    }

    if (open(POD_DIAG, $PODFILE)) {
	warn "Happy happy podfile from real $PODFILE\n" if $DEBUG;
	last CONFIG;
    } 

    if (caller) {
	INCPATH: {
	    for my $file ( (map { "$_/".__PACKAGE__.".pm" } @INC), $0) {
		warn "Checking $file\n" if $DEBUG;
		if (open(POD_DIAG, $file)) {
		    while (<POD_DIAG>) {
			next unless
			    /^__END__\s*# wish diag dbase were more accessible/;
			print STDERR "podfile is $file\n" if $DEBUG;
			last INCPATH;
		    }
		}
	    } 
	}
    } else { 
	print STDERR "podfile is <DATA>\n" if $DEBUG;
	*POD_DIAG = *main::DATA;
    }
}
if (eof(POD_DIAG)) { 
    die "couldn't find diagnostic data in $PODFILE @INC $0";
}


%HTML_2_Troff = (
    'amp'	=>	'&',	#   ampersand
    'lt'	=>	'<',	#   left chevron, less-than
    'gt'	=>	'>',	#   right chevron, greater-than
    'quot'	=>	'"',	#   double quote

    "Aacute"	=>	"A\\*'",	#   capital A, acute accent
    # etc

);

%HTML_2_Latin_1 = (
    'amp'	=>	'&',	#   ampersand
    'lt'	=>	'<',	#   left chevron, less-than
    'gt'	=>	'>',	#   right chevron, greater-than
    'quot'	=>	'"',	#   double quote

    "Aacute"	=>	"\xC1"	#   capital A, acute accent

    # etc
);

%HTML_2_ASCII_7 = (
    'amp'	=>	'&',	#   ampersand
    'lt'	=>	'<',	#   left chevron, less-than
    'gt'	=>	'>',	#   right chevron, greater-than
    'quot'	=>	'"',	#   double quote

    "Aacute"	=>	"A"	#   capital A, acute accent
    # etc
);

our %HTML_Escapes;
*HTML_Escapes = do {
    if ($standalone) {
	$PRETTY ? \%HTML_2_Latin_1 : \%HTML_2_ASCII_7; 
    } else {
	\%HTML_2_Latin_1; 
    }
}; 

*THITHER = $standalone ? *STDOUT : *STDERR;

my %transfmt = (); 
my $transmo = <<EOFUNC;
sub transmo {
    #local \$^W = 0;  # recursive warnings we do NOT need!
EOFUNC

my %msg;
{
    print STDERR "FINISHING COMPILATION for $_\n" if $DEBUG;
    local $/ = '';
    local $_;
    my $header;
    my @headers;
    my $for_item;
    my $seen_body;
    while (<POD_DIAG>) {

	sub _split_pod_link {
	    $_[0] =~ m'(?:([^|]*)\|)?([^/]*)(?:/("?)(.*)\3)?'s;
	    ($1,$2,$4);
	}

	unescape();
	if ($PRETTY) {
	    sub noop   { return $_[0] }  # spensive for a noop
	    sub bold   { my $str =$_[0];  $str =~ s/(.)/$1\b$1/g; return $str; } 
	    sub italic { my $str = $_[0]; $str =~ s/(.)/_\b$1/g;  return $str; } 
	    s/C<<< (.*?) >>>|C<< (.*?) >>|[BC]<(.*?)>/bold($+)/ges;
	    s/[IF]<(.*?)>/italic($1)/ges;
	    s/L<(.*?)>/
	       my($text,$page,$sect) = _split_pod_link($1);
	       defined $text
	        ? $text
	        : defined $sect
	           ? italic($sect) . ' in ' . italic($page)
	           : italic($page)
	     /ges;
	     s/S<(.*?)>/
               $1
             /ges;
	} else {
	    s/C<<< (.*?) >>>|C<< (.*?) >>|[BC]<(.*?)>/$+/gs;
	    s/[IF]<(.*?)>/$1/gs;
	    s/L<(.*?)>/
	       my($text,$page,$sect) = _split_pod_link($1);
	       defined $text
	        ? $text
	        : defined $sect
	           ? qq '"$sect" in $page'
	           : $page
	     /ges;
	    s/S<(.*?)>/
               $1
             /ges;
	} 
	unless (/^=/) {
	    if (defined $header) { 
		if ( $header eq 'DESCRIPTION' && 
		    (   /Optional warnings are enabled/ 
		     || /Some of these messages are generic./
		    ) )
		{
		    next;
		}
		$_ = expand $_;
		s/^/    /gm;
		$msg{$header} .= $_;
		for my $h(@headers) { $msg{$h} .= $_ }
		++$seen_body;
	 	undef $for_item;	
	    }
	    next;
	} 

	# If we have not come across the body of the description yet, then
	# the previous header needs to share the same description.
	if ($seen_body) {
	    @headers = ();
	}
	else {
	    push @headers, $header if defined $header;
	}

	unless ( s/=item (.*?)\s*\z//s) {

	    if ( s/=head1\sDESCRIPTION//) {
		$msg{$header = 'DESCRIPTION'} = '';
		undef $for_item;
	    }
	    elsif( s/^=for\s+diagnostics\s*\n(.*?)\s*\z// ) {
		$for_item = $1;
	    }
	    elsif( /^=back/ ) { # Stop processing body here
		undef $header;
		undef $for_item;
		$seen_body = 0;
		next;
	    }
	    next;
	}

	if( $for_item ) { $header = $for_item; undef $for_item } 
	else {
	    $header = $1;

	    $header =~ s/\n/ /gs; # Allow multi-line headers
	}

	# strip formatting directives from =item line
	$header =~ s/[A-Z]<(.*?)>/$1/g;

	# Since we strip "(\.\s*)\n" when we search a warning, strip it here as well
	$header =~ s/(\.\s*)?$//;

        my @toks = split( /(%l?[dxX]|%[ucp]|%(?:\.\d+)?[fs])/, $header );
	if (@toks > 1) {
            my $conlen = 0;
            for my $i (0..$#toks){
                if( $i % 2 ){
                    if(      $toks[$i] eq '%c' ){
                        $toks[$i] = '.';
                    } elsif( $toks[$i] =~ /^%(?:d|u)$/ ){
                        $toks[$i] = '\d+';
                    } elsif( $toks[$i] =~ '^%(?:s|.*f)$' ){
                        $toks[$i] = $i == $#toks ? '.*' : '.*?';
                    } elsif( $toks[$i] =~ '%.(\d+)s' ){
                        $toks[$i] = ".{$1}";
                    } elsif( $toks[$i] =~ '^%l*([pxX])$' ){
                        $toks[$i] = $1 eq 'X' ? '[\dA-F]+' : '[\da-f]+';
                    }
                } elsif( length( $toks[$i] ) ){
                    $toks[$i] = quotemeta $toks[$i];
                    $conlen += length( $toks[$i] );
                }
            }  
            my $lhs = join( '', @toks );
            $lhs =~ s/(\\\s)+/\\s+/g; # Replace lit space with multi-space match
	    $transfmt{$header}{pat} =
              "    s^\\s*$lhs\\s*\Q$header\Es\n\t&& return 1;\n";
            $transfmt{$header}{len} = $conlen;
	} else {
            my $lhs = "\Q$header\E";
            $lhs =~ s/(\\\s)+/\\s+/g; # Replace lit space with multi-space match
            $transfmt{$header}{pat} =
	      "    s^\\s*$lhs\\s*\Q$header\E\n\t && return 1;\n";
            $transfmt{$header}{len} = length( $header );
	} 

	print STDERR __PACKAGE__.": Duplicate entry: \"$header\"\n"
	    if $msg{$header};

	$msg{$header} = '';
	$seen_body = 0;
    } 


    close POD_DIAG unless *main::DATA eq *POD_DIAG;

    die "No diagnostics?" unless %msg;

    # Apply patterns in order of decreasing sum of lengths of fixed parts
    # Seems the best way of hitting the right one.
    for my $hdr ( sort { $transfmt{$b}{len} <=> $transfmt{$a}{len} }
                  keys %transfmt ){
        $transmo .= $transfmt{$hdr}{pat};
    }
    $transmo .= "    return 0;\n}\n";
    print STDERR $transmo if $DEBUG;
    eval $transmo;
    die $@ if $@;
}

if ($standalone) {
    if (!@ARGV and -t STDIN) { print STDERR "$0: Reading from STDIN\n" } 
    while (defined (my $error = <>)) {
	splainthis($error) || print THITHER $error;
    } 
    exit;
} 

my $olddie;
my $oldwarn;

sub import {
    shift;
    $^W = 1; # yup, clobbered the global variable; 
	     # tough, if you want diags, you want diags.
    return if defined $SIG{__WARN__} && ($SIG{__WARN__} eq \&warn_trap);

    for (@_) {

	/^-d(ebug)?$/ 	   	&& do {
				    $DEBUG++;
				    next;
				   };

	/^-v(erbose)?$/ 	&& do {
				    $VERBOSE++;
				    next;
				   };

	/^-p(retty)?$/ 		&& do {
				    print STDERR "$0: I'm afraid it's too late for prettiness.\n";
				    $PRETTY++;
				    next;
			       };
	# matches trace and traceonly for legacy doc mixup reasons
	/^-t(race(only)?)?$/	&& do {
				    $TRACEONLY++;
				    next;
			       };
	/^-w(arntrace)?$/ 	&& do {
				    $WARNTRACE++;
				    next;
			       };

	warn "Unknown flag: $_";
    } 

    $oldwarn = $SIG{__WARN__};
    $olddie = $SIG{__DIE__};
    $SIG{__WARN__} = \&warn_trap;
    $SIG{__DIE__} = \&death_trap;
} 

sub enable { &import }

sub disable {
    shift;
    return unless $SIG{__WARN__} eq \&warn_trap;
    $SIG{__WARN__} = $oldwarn || '';
    $SIG{__DIE__} = $olddie || '';
} 

sub warn_trap {
    my $warning = $_[0];
    if (caller eq __PACKAGE__ or !splainthis($warning)) {
	if ($WARNTRACE) {
	    print STDERR Carp::longmess($warning);
	} else {
	    print STDERR $warning;
	}
    } 
    goto &$oldwarn if defined $oldwarn and $oldwarn and $oldwarn ne \&warn_trap;
};

sub death_trap {
    my $exception = $_[0];

    # See if we are coming from anywhere within an eval. If so we don't
    # want to explain the exception because it's going to get caught.
    my $in_eval = 0;
    my $i = 0;
    while (my $caller = (caller($i++))[3]) {
      if ($caller eq '(eval)') {
	$in_eval = 1;
	last;
      }
    }

    splainthis($exception) unless $in_eval;
    if (caller eq __PACKAGE__) {
	print STDERR "INTERNAL EXCEPTION: $exception";
    } 
    &$olddie if defined $olddie and $olddie and $olddie ne \&death_trap;

    return if $in_eval;

    # We don't want to unset these if we're coming from an eval because
    # then we've turned off diagnostics.

    # Switch off our die/warn handlers so we don't wind up in our own
    # traps.
    $SIG{__DIE__} = $SIG{__WARN__} = '';

    $exception =~ s/\n(?=.)/\n\t/gas;

    die Carp::longmess("__diagnostics__")
	  =~ s/^__diagnostics__.*?line \d+\.?\n/
		  "Uncaught exception from user code:\n\t$exception"
	      /re;
	# up we go; where we stop, nobody knows, but i think we die now
	# but i'm deeply afraid of the &$olddie guy reraising and us getting
	# into an indirect recursion loop
};

my %exact_duplicate;
my %old_diag;
my $count;
my $wantspace;
sub splainthis {
  return 0 if $TRACEONLY;
  for (my $tmp = shift) {
    local $\;
    local $!;
    ### &finish_compilation unless %msg;
    s/(\.\s*)?\n+$//;
    my $orig = $_;
    # return unless defined;

    # get rid of the where-are-we-in-input part
    s/, <.*?> (?:line|chunk).*$//;

    # Discard 1st " at <file> line <no>" and all text beyond
    # but be aware of messages containing " at this-or-that"
    my $real = 0;
    my @secs = split( / at / );
    return unless @secs;
    $_ = $secs[0];
    for my $i ( 1..$#secs ){
        if( $secs[$i] =~ /.+? (?:line|chunk) \d+/ ){
            $real = 1;
            last;
        } else {
            $_ .= ' at ' . $secs[$i];
	}
    }

    # remove parenthesis occurring at the end of some messages 
    s/^\((.*)\)$/$1/;

    if ($exact_duplicate{$orig}++) {
	return &transmo;
    } else {
	return 0 unless &transmo;
    }

    my $short = shorten($orig);
    if ($old_diag{$_}) {
	autodescribe();
	print THITHER "$short (#$old_diag{$_})\n";
	$wantspace = 1;
    } elsif (!$msg{$_} && $orig =~ /\n./s) {
	# A multiline message, like "Attempt to reload /
	# Compilation failed"
	my $found;
	for (split /^/, $orig) {
	    splainthis($_) and $found = 1;
	}
	return $found;
    } else {
	autodescribe();
	$old_diag{$_} = ++$count;
	print THITHER "\n" if $wantspace;
	$wantspace = 0;
	print THITHER "$short (#$old_diag{$_})\n";
	if ($msg{$_}) {
	    print THITHER $msg{$_};
	} else {
	    if (0 and $standalone) { 
		print THITHER "    **** Error #$old_diag{$_} ",
			($real ? "is" : "appears to be"),
			" an unknown diagnostic message.\n\n";
	    }
	    return 0;
	} 
    }
    return 1;
  }
} 

sub autodescribe {
    if ($VERBOSE and not $count) {
	print THITHER &{$PRETTY ? \&bold : \&noop}("DESCRIPTION OF DIAGNOSTICS"),
		"\n$msg{DESCRIPTION}\n";
    } 
} 

sub unescape { 
    s {
            E<  
            ( [A-Za-z]+ )       
            >   
    } { 
         do {   
             exists $HTML_Escapes{$1}
                ? do { $HTML_Escapes{$1} }
                : do {
                    warn "Unknown escape: E<$1> in $_";
                    "E<$1>";
                } 
         } 
    }egx;
}

sub shorten {
    my $line = $_[0];
    if (length($line) > 79 and index($line, "\n") == -1) {
	my $space_place = rindex($line, ' ', 79);
	if ($space_place != -1) {
	    substr($line, $space_place, 1) = "\n\t";
	} 
    } 
    return $line;
} 


1 unless $standalone;  # or it'll complain about itself
__END__ # wish diag dbase were more accessible
                                                                                                                                                                                                                                                        usr/share/perl/5.20.2/dumpvar.pl                                                                    0100644 0000000 0000000 00000036370 12744441327 014702  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        require 5.014;			# For more reliable $@ after eval
package dumpvar;

# Needed for PrettyPrinter only:

# require 5.001;  # Well, it coredumps anyway undef DB in 5.000 (not now)

# translate control chars to ^X - Randal Schwartz
# Modifications to print types by Peter Gordon v1.0

# Ilya Zakharevich -- patches after 5.001 (and some before ;-)

# Won't dump symbol tables and contents of debugged files by default

$winsize = 80 unless defined $winsize;


# Defaults

# $globPrint = 1;
$printUndef = 1 unless defined $printUndef;
$tick = "auto" unless defined $tick;
$unctrl = 'quote' unless defined $unctrl;
$subdump = 1;
$dumpReused = 0 unless defined $dumpReused;
$bareStringify = 1 unless defined $bareStringify;

sub main::dumpValue {
  local %address;
  local $^W=0;
  (print "undef\n"), return unless defined $_[0];
  (print &stringify($_[0]), "\n"), return unless ref $_[0];
  push @_, -1 if @_ == 1;
  dumpvar::unwrap($_[0], 0, $_[1]);
}

# This one is good for variable names:

sub unctrl {
    for (my($dummy) = shift) {
	local($v) ; 

	return \$_ if ref \$_ eq "GLOB";
        if (ord('A') == 193) { # EBCDIC.
	    # EBCDIC has no concept of "\cA" or "A" being related
	    # to each other by a linear/boolean mapping.
	} else {
	    s/([\001-\037\177])/'^'.pack('c',ord($1)^64)/eg;
	}
	return $_;
    }
}

sub uniescape {
    join("",
	 map { $_ > 255 ? sprintf("\\x{%04X}", $_) : chr($_) }
	     unpack("U*", $_[0]));
}

sub stringify {
  my $string;
  if (eval { $string = _stringify(@_); 1 }) {
    return $string;
  }

  return "<< value could not be dumped: $@ >>";
}

sub _stringify {
    (my $__, local $noticks) = @_;
    for ($__) {
	local($v) ; 
	my $tick = $tick;

	return 'undef' unless defined $_ or not $printUndef;
	return $_ . "" if ref \$_ eq 'GLOB';
	$_ = &{'overload::StrVal'}($_) 
	  if $bareStringify and ref $_ 
	    and %overload:: and defined &{'overload::StrVal'};
	
	if ($tick eq 'auto') {
	    if (ord('A') == 193) {
		if (/[\000-\011]/ or /[\013-\024\31-\037\177]/) {
		    $tick = '"';
		} else {
		    $tick = "'";
		}
            }  else {
		if (/[\000-\011\013-\037\177]/) {
		    $tick = '"';
		} else {
		    $tick = "'";
		}
	    }
	}
	if ($tick eq "'") {
	  s/([\'\\])/\\$1/g;
	} elsif ($unctrl eq 'unctrl') {
	  s/([\"\\])/\\$1/g ;
	  s/([\000-\037\177])/'^'.pack('c',ord($1)^64)/eg;
	  # uniescape?
	  s/([\200-\377])/'\\0x'.sprintf('%2X',ord($1))/eg 
	    if $quoteHighBit;
	} elsif ($unctrl eq 'quote') {
	  s/([\"\\\$\@])/\\$1/g if $tick eq '"';
	  s/\033/\\e/g;
	  if (ord('A') == 193) { # EBCDIC.
	      s/([\000-\037\177])/'\\c'.chr(193)/eg; # Unfinished.
	  } else {
	      s/([\000-\037\177])/'\\c'._escaped_ord($1)/eg;
	  }
	}
	$_ = uniescape($_);
	s/([\200-\377])/'\\'.sprintf('%3o',ord($1))/eg if $quoteHighBit;
	return ($noticks || /^\d+(\.\d*)?\Z/) 
	  ? $_ 
	  : $tick . $_ . $tick;
    }
}

# Ensure a resulting \ is escaped to be \\
sub _escaped_ord {
    my $chr = shift;
    $chr = chr(ord($chr)^64);
    $chr =~ s{\\}{\\\\}g;
    return $chr;
}

sub ShortArray {
  my $tArrayDepth = $#{$_[0]} ; 
  $tArrayDepth = $#{$_[0]} < $arrayDepth-1 ? $#{$_[0]} : $arrayDepth-1 
    unless  $arrayDepth eq '' ; 
  my $shortmore = "";
  $shortmore = " ..." if $tArrayDepth < $#{$_[0]} ;
  if (!grep(ref $_, @{$_[0]})) {
    $short = "0..$#{$_[0]}  '" . 
      join("' '", @{$_[0]}[0..$tArrayDepth]) . "'$shortmore";
    return $short if length $short <= $compactDump;
  }
  undef;
}

sub DumpElem {
  my $short = &stringify($_[0], ref $_[0]);
  if ($veryCompact && ref $_[0]
      && (ref $_[0] eq 'ARRAY' and !grep(ref $_, @{$_[0]}) )) {
    my $end = "0..$#{$v}  '" . 
      join("' '", @{$_[0]}[0..$tArrayDepth]) . "'$shortmore";
  } elsif ($veryCompact && ref $_[0]
      && (ref $_[0] eq 'HASH') and !grep(ref $_, values %{$_[0]})) {
    my $end = 1;
	  $short = $sp . "0..$#{$v}  '" . 
	    join("' '", @{$v}[0..$tArrayDepth]) . "'$shortmore";
  } else {
    print "$short\n";
    unwrap($_[0],$_[1],$_[2]) if ref $_[0];
  }
}

sub unwrap {
    return if $DB::signal;
    local($v) = shift ; 
    local($s) = shift ; # extra no of spaces
    local($m) = shift ; # maximum recursion depth
    return if $m == 0;
    local(%v,@v,$sp,$value,$key,@sortKeys,$more,$shortmore,$short) ;
    local($tHashDepth,$tArrayDepth) ;

    $sp = " " x $s ;
    $s += 3 ; 

    eval {
    # Check for reused addresses
    if (ref $v) { 
      my $val = $v;
      $val = &{'overload::StrVal'}($v) 
	if %overload:: and defined &{'overload::StrVal'};
      # Match type and address.                      
      # Unblessed references will look like TYPE(0x...)
      # Blessed references will look like Class=TYPE(0x...)
      $val =~ s/^.*=//; # suppress the Class part, just keep TYPE(0x...)
      ($item_type, $address) = 
        $val =~ /([^\(]+)        # Keep stuff that's     
                                 # not an open paren
                 \(              # Skip open paren
                 (0x[0-9a-f]+)   # Save the address
                 \)              # Skip close paren
                 $/x;            # Should be at end now

      if (!$dumpReused && defined $address) { 
	$address{$address}++ ;
	if ( $address{$address} > 1 ) { 
	  print "${sp}-> REUSED_ADDRESS\n" ; 
	  return ; 
	} 
      }
    } elsif (ref \$v eq 'GLOB') {
      # This is a raw glob. Special handling for that.
      $address = "$v" . "";	# To avoid a bug with globs
      $address{$address}++ ;
      if ( $address{$address} > 1 ) { 
	print "${sp}*DUMPED_GLOB*\n" ; 
	return ; 
      } 
    }

    if (ref $v eq 'Regexp') {
      # Reformat the regexp to look the standard way.
      my $re = "$v";
      $re =~ s,/,\\/,g;
      print "$sp-> qr/$re/\n";
      return;
    }

    if ( $item_type eq 'HASH' ) { 
        # Hash ref or hash-based object.
	my @sortKeys = sort keys(%$v) ;
	undef $more ; 
	$tHashDepth = $#sortKeys ; 
	$tHashDepth = $#sortKeys < $hashDepth-1 ? $#sortKeys : $hashDepth-1
	  unless $hashDepth eq '' ; 
	$more = "....\n" if $tHashDepth < $#sortKeys ; 
	$shortmore = "";
	$shortmore = ", ..." if $tHashDepth < $#sortKeys ; 
	$#sortKeys = $tHashDepth ; 
	if ($compactDump && !grep(ref $_, values %{$v})) {
	  #$short = $sp . 
	  #  (join ', ', 
# Next row core dumps during require from DB on 5.000, even with map {"_"}
	  #   map {&stringify($_) . " => " . &stringify($v->{$_})} 
	  #   @sortKeys) . "'$shortmore";
	  $short = $sp;
	  my @keys;
	  for (@sortKeys) {
	    push @keys, &stringify($_) . " => " . &stringify($v->{$_});
	  }
	  $short .= join ', ', @keys;
	  $short .= $shortmore;
	  (print "$short\n"), return if length $short <= $compactDump;
	}
	for $key (@sortKeys) {
	    return if $DB::signal;
	    $value = $ {$v}{$key} ;
	    print "$sp", &stringify($key), " => ";
	    DumpElem $value, $s, $m-1;
	}
	print "$sp  empty hash\n" unless @sortKeys;
	print "$sp$more" if defined $more ;
    } elsif ( $item_type eq 'ARRAY' ) { 
        # Array ref or array-based object. Also: undef.
        # See how big the array is.
	$tArrayDepth = $#{$v} ; 
	undef $more ; 
        # Bigger than the max?
	$tArrayDepth = $#{$v} < $arrayDepth-1 ? $#{$v} : $arrayDepth-1 
	  if defined $arrayDepth && $arrayDepth ne '';
        # Yep. Don't show it all.
	$more = "....\n" if $tArrayDepth < $#{$v} ; 
	$shortmore = "";
	$shortmore = " ..." if $tArrayDepth < $#{$v} ;

	if ($compactDump && !grep(ref $_, @{$v})) {
	  if ($#$v >= 0) {
	    $short = $sp . "0..$#{$v}  " . 
	      join(" ", 
		   map {exists $v->[$_] ? stringify $v->[$_] : "empty"} (0..$tArrayDepth)
		  ) . "$shortmore";
	  } else {
	    $short = $sp . "empty array";
	  }
	  (print "$short\n"), return if length $short <= $compactDump;
	}
	#if ($compactDump && $short = ShortArray($v)) {
	#  print "$short\n";
	#  return;
	#}
	for $num (0 .. $tArrayDepth) {
	    return if $DB::signal;
	    print "$sp$num  ";
	    if (exists $v->[$num]) {
                if (defined $v->[$num]) {
	          DumpElem $v->[$num], $s, $m-1;
                } 
                else {
                  print "undef\n";
                }
	    } else {
	    	print "empty slot\n";
	    }
	}
	print "$sp  empty array\n" unless @$v;
	print "$sp$more" if defined $more ;  
    } elsif ( $item_type eq 'SCALAR' ) { 
            unless (defined $$v) {
              print "$sp-> undef\n";
              return;
            }
	    print "$sp-> ";
	    DumpElem $$v, $s, $m-1;
    } elsif ( $item_type eq 'REF' ) { 
	    print "$sp-> $$v\n";
            return unless defined $$v;
	    unwrap($$v, $s+3, $m-1);
    } elsif ( $item_type eq 'CODE' ) { 
            # Code object or reference.
	    print "$sp-> ";
	    dumpsub (0, $v);
    } elsif ( $item_type eq 'GLOB' ) {
      # Glob object or reference.
      print "$sp-> ",&stringify($$v,1),"\n";
      if ($globPrint) {
	$s += 3;
       dumpglob($s, "{$$v}", $$v, 1, $m-1);
      } elsif (defined ($fileno = eval {fileno($v)})) {
	print( (' ' x ($s+3)) .  "FileHandle({$$v}) => fileno($fileno)\n" );
      }
    } elsif (ref \$v eq 'GLOB') {
      # Raw glob (again?)
      if ($globPrint) {
       dumpglob($s, "{$v}", $v, 1, $m-1) if $globPrint;
      } elsif (defined ($fileno = eval {fileno(\$v)})) {
	print( (' ' x $s) .  "FileHandle({$v}) => fileno($fileno)\n" );
      }
    }
    };
    if ($@) {
      print( (' ' x $s) .  "<< value could not be dumped: $@ >>\n");
    }

    return;
}

sub matchlex {
  (my $var = $_[0]) =~ s/.//;
  $var eq $_[1] or 
    ($_[1] =~ /^([!~])(.)([\x00-\xff]*)/) and 
      ($1 eq '!') ^ (eval { $var =~ /$2$3/ });
}

sub matchvar {
  $_[0] eq $_[1] or 
    ($_[1] =~ /^([!~])(.)([\x00-\xff]*)/) and 
      ($1 eq '!') ^ (eval {($_[2] . "::" . $_[0]) =~ /$2$3/});
}

sub compactDump {
  $compactDump = shift if @_;
  $compactDump = 6*80-1 if $compactDump and $compactDump < 2;
  $compactDump;
}

sub veryCompact {
  $veryCompact = shift if @_;
  compactDump(1) if !$compactDump and $veryCompact;
  $veryCompact;
}

sub unctrlSet {
  if (@_) {
    my $in = shift;
    if ($in eq 'unctrl' or $in eq 'quote') {
      $unctrl = $in;
    } else {
      print "Unknown value for 'unctrl'.\n";
    }
  }
  $unctrl;
}

sub quote {
  if (@_ and $_[0] eq '"') {
    $tick = '"';
    $unctrl = 'quote';
  } elsif (@_ and $_[0] eq 'auto') {
    $tick = 'auto';
    $unctrl = 'quote';
  } elsif (@_) {		# Need to set
    $tick = "'";
    $unctrl = 'unctrl';
  }
  $tick;
}

sub dumpglob {
    return if $DB::signal;
    my ($off,$key, $val, $all, $m) = @_;
    local(*entry) = $val;
    my $fileno;
    if (($key !~ /^_</ or $dumpDBFiles) and defined $entry) {
      print( (' ' x $off) . "\$", &unctrl($key), " = " );
      DumpElem $entry, 3+$off, $m;
    }
    if (($key !~ /^_</ or $dumpDBFiles) and @entry) {
      print( (' ' x $off) . "\@$key = (\n" );
      unwrap(\@entry,3+$off,$m) ;
      print( (' ' x $off) .  ")\n" );
    }
    if ($key ne "main::" && $key ne "DB::" && %entry
	&& ($dumpPackages or $key !~ /::$/)
	&& ($key !~ /^_</ or $dumpDBFiles)
	&& !($package eq "dumpvar" and $key eq "stab")) {
      print( (' ' x $off) . "\%$key = (\n" );
      unwrap(\%entry,3+$off,$m) ;
      print( (' ' x $off) .  ")\n" );
    }
    if (defined ($fileno = eval{fileno(*entry)})) {
      print( (' ' x $off) .  "FileHandle($key) => fileno($fileno)\n" );
    }
    if ($all) {
      if (defined &entry) {
	dumpsub($off, $key);
      }
    }
}

sub dumplex {
  return if $DB::signal;
  my ($key, $val, $m, @vars) = @_;
  return if @vars && !grep( matchlex($key, $_), @vars );
  local %address;
  my $off = 0;  # It reads better this way
  my $fileno;
  if (UNIVERSAL::isa($val,'ARRAY')) {
    print( (' ' x $off) . "$key = (\n" );
    unwrap($val,3+$off,$m) ;
    print( (' ' x $off) .  ")\n" );
  }
  elsif (UNIVERSAL::isa($val,'HASH')) {
    print( (' ' x $off) . "$key = (\n" );
    unwrap($val,3+$off,$m) ;
    print( (' ' x $off) .  ")\n" );
  }
  elsif (UNIVERSAL::isa($val,'IO')) {
    print( (' ' x $off) .  "FileHandle($key) => fileno($fileno)\n" );
  }
  #  No lexical subroutines yet...
  #  elsif (UNIVERSAL::isa($val,'CODE')) {
  #    dumpsub($off, $$val);
  #  }
  else {
    print( (' ' x $off) . &unctrl($key), " = " );
    DumpElem $$val, 3+$off, $m;
  }
}

sub CvGV_name_or_bust {
  my $in = shift;
  return if $skipCvGV;		# Backdoor to avoid problems if XS broken...
  $in = \&$in;			# Hard reference...
  eval {require Devel::Peek; 1} or return;
  my $gv = Devel::Peek::CvGV($in) or return;
  *$gv{PACKAGE} . '::' . *$gv{NAME};
}

sub dumpsub {
    my ($off,$sub) = @_;
    my $ini = $sub;
    my $s;
    $sub = $1 if $sub =~ /^\{\*(.*)\}$/;
    my $subref = defined $1 ? \&$sub : \&$ini;
    my $place = $DB::sub{$sub} || (($s = $subs{"$subref"}) && $DB::sub{$s})
      || (($s = CvGV_name_or_bust($subref)) && $DB::sub{$s})
      || ($subdump && ($s = findsubs("$subref")) && $DB::sub{$s});
    $place = '???' unless defined $place;
    $s = $sub unless defined $s;
    print( (' ' x $off) .  "&$s in $place\n" );
}

sub findsubs {
  return undef unless %DB::sub;
  my ($addr, $name, $loc);
  while (($name, $loc) = each %DB::sub) {
    $addr = \&$name;
    $subs{"$addr"} = $name;
  }
  $subdump = 0;
  $subs{ shift() };
}

sub main::dumpvar {
    my ($package,$m,@vars) = @_;
    local(%address,$key,$val,$^W);
    $package .= "::" unless $package =~ /::$/;
    *stab = *{"main::"};
    while ($package =~ /(\w+?::)/g){
      *stab = $ {stab}{$1};
    }
    local $TotalStrings = 0;
    local $Strings = 0;
    local $CompleteTotal = 0;
    while (($key,$val) = each(%stab)) {
      return if $DB::signal;
      next if @vars && !grep( matchvar($key, $_), @vars );
      if ($usageOnly) {
	globUsage(\$val, $key)
	  if ($package ne 'dumpvar' or $key ne 'stab')
	     and ref(\$val) eq 'GLOB';
      } else {
       dumpglob(0,$key, $val, 0, $m);
      }
    }
    if ($usageOnly) {
      print "String space: $TotalStrings bytes in $Strings strings.\n";
      $CompleteTotal += $TotalStrings;
      print "Grand total = $CompleteTotal bytes (1 level deep) + overhead.\n";
    }
}

sub scalarUsage {
  my $size = length($_[0]);
  $TotalStrings += $size;
  $Strings++;
  $size;
}

sub arrayUsage {		# array ref, name
  my $size = 0;
  map {$size += scalarUsage($_)} @{$_[0]};
  my $len = @{$_[0]};
  print "\@$_[1] = $len item", ($len > 1 ? "s" : ""),
    " (data: $size bytes)\n"
      if defined $_[1];
  $CompleteTotal +=  $size;
  $size;
}

sub hashUsage {		# hash ref, name
  my @keys = keys %{$_[0]};
  my @values = values %{$_[0]};
  my $keys = arrayUsage \@keys;
  my $values = arrayUsage \@values;
  my $len = @keys;
  my $total = $keys + $values;
  print "\%$_[1] = $len item", ($len > 1 ? "s" : ""),
    " (keys: $keys; values: $values; total: $total bytes)\n"
      if defined $_[1];
  $total;
}

sub globUsage {			# glob ref, name
  local *name = *{$_[0]};
  $total = 0;
  $total += scalarUsage $name if defined $name;
  $total += arrayUsage \@name, $_[1] if @name;
  $total += hashUsage \%name, $_[1] if %name and $_[1] ne "main::" 
    and $_[1] ne "DB::";   #and !($package eq "dumpvar" and $key eq "stab"));
  $total;
}

sub packageUsage {
  my ($package,@vars) = @_;
  $package .= "::" unless $package =~ /::$/;
  local *stab = *{"main::"};
  while ($package =~ /(\w+?::)/g){
    *stab = $ {stab}{$1};
  }
  local $TotalStrings = 0;
  local $CompleteTotal = 0;
  my ($key,$val);
  while (($key,$val) = each(%stab)) {
    next if @vars && !grep($key eq $_,@vars);
    globUsage \$val, $key unless $package eq 'dumpvar' and $key eq 'stab';
  }
  print "String space: $TotalStrings.\n";
  $CompleteTotal += $TotalStrings;
  print "\nGrand total = $CompleteTotal bytes\n";
}

1;

                                                                                                                                                                                                                                                                        usr/share/perl/5.20.2/encoding/                                                                     0040755 0000000 0000000 00000000000 13077704254 014450  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/encoding/warnings.pm                                                          0100644 0000000 0000000 00000014134 12744441327 016635  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package encoding::warnings;
$encoding::warnings::VERSION = '0.11';

use strict;
use 5.007;

=head1 NAME

encoding::warnings - Warn on implicit encoding conversions

=head1 VERSION

This document describes version 0.11 of encoding::warnings, released
June 5, 2007.

=head1 SYNOPSIS

    use encoding::warnings; # or 'FATAL' to raise fatal exceptions

    utf8::encode($a = chr(20000));  # a byte-string (raw bytes)
    $b = chr(20000);		    # a unicode-string (wide characters)

    # "Bytes implicitly upgraded into wide characters as iso-8859-1"
    $c = $a . $b;

=head1 DESCRIPTION

=head2 Overview of the problem

By default, there is a fundamental asymmetry in Perl's unicode model:
implicit upgrading from byte-strings to unicode-strings assumes that
they were encoded in I<ISO 8859-1 (Latin-1)>, but unicode-strings are
downgraded with UTF-8 encoding.  This happens because the first 256
codepoints in Unicode happens to agree with Latin-1.  

However, this silent upgrading can easily cause problems, if you happen
to mix unicode strings with non-Latin1 data -- i.e. byte-strings encoded
in UTF-8 or other encodings.  The error will not manifest until the
combined string is written to output, at which time it would be impossible
to see where did the silent upgrading occur.

=head2 Detecting the problem

This module simplifies the process of diagnosing such problems.  Just put
this line on top of your main program:

    use encoding::warnings;

Afterwards, implicit upgrading of high-bit bytes will raise a warning.
Ex.: C<Bytes implicitly upgraded into wide characters as iso-8859-1 at
- line 7>.

However, strings composed purely of ASCII code points (C<0x00>..C<0x7F>)
will I<not> trigger this warning.

You can also make the warnings fatal by importing this module as:

    use encoding::warnings 'FATAL';

=head2 Solving the problem

Most of the time, this warning occurs when a byte-string is concatenated
with a unicode-string.  There are a number of ways to solve it:

=over 4

=item * Upgrade both sides to unicode-strings

If your program does not need compatibility for Perl 5.6 and earlier,
the recommended approach is to apply appropriate IO disciplines, so all
data in your program become unicode-strings.  See L<encoding>, L<open> and
L<perlfunc/binmode> for how.

=item * Downgrade both sides to byte-strings

The other way works too, especially if you are sure that all your data
are under the same encoding, or if compatibility with older versions
of Perl is desired.

You may downgrade strings with C<Encode::encode> and C<utf8::encode>.
See L<Encode> and L<utf8> for details.

=item * Specify the encoding for implicit byte-string upgrading

If you are confident that all byte-strings will be in a specific
encoding like UTF-8, I<and> need not support older versions of Perl,
use the C<encoding> pragma:

    use encoding 'utf8';

Similarly, this will silence warnings from this module, and preserve the
default behaviour:

    use encoding 'iso-8859-1';

However, note that C<use encoding> actually had three distinct effects:

=over 4

=item * PerlIO layers for B<STDIN> and B<STDOUT>

This is similar to what L<open> pragma does.

=item * Literal conversions

This turns I<all> literal string in your program into unicode-strings
(equivalent to a C<use utf8>), by decoding them using the specified
encoding.

=item * Implicit upgrading for byte-strings

This will silence warnings from this module, as shown above.

=back

Because literal conversions also work on empty strings, it may surprise
some people:

    use encoding 'big5';

    my $byte_string = pack("C*", 0xA4, 0x40);
    print length $a;	# 2 here.
    $a .= "";		# concatenating with a unicode string...
    print length $a;	# 1 here!

In other words, do not C<use encoding> unless you are certain that the
program will not deal with any raw, 8-bit binary data at all.

However, the C<Filter =E<gt> 1> flavor of C<use encoding> will I<not>
affect implicit upgrading for byte-strings, and is thus incapable of
silencing warnings from this module.  See L<encoding> for more details.

=back

=head1 CAVEATS

For Perl 5.9.4 or later, this module's effect is lexical.

For Perl versions prior to 5.9.4, this module affects the whole script,
instead of inside its lexical block.

=cut

# Constants.
sub ASCII  () { 0 }
sub LATIN1 () { 1 }
sub FATAL  () { 2 }

# Install a ${^ENCODING} handler if no other one are already in place.
sub import {
    my $class = shift;
    my $fatal = shift || '';

    local $@;
    return if ${^ENCODING} and ref(${^ENCODING}) ne $class;
    return unless eval { require Encode; 1 };

    my $ascii  = Encode::find_encoding('us-ascii') or return;
    my $latin1 = Encode::find_encoding('iso-8859-1') or return;

    # Have to undef explicitly here
    undef ${^ENCODING};

    # Install a warning handler for decode()
    my $decoder = bless(
	[
	    $ascii,
	    $latin1,
	    (($fatal eq 'FATAL') ? 'Carp::croak' : 'Carp::carp'),
	], $class,
    );

    ${^ENCODING} = $decoder;
    $^H{$class} = 1;
}

sub unimport {
    my $class = shift;
    $^H{$class} = undef;
    undef ${^ENCODING};
}

# Don't worry about source code literals.
sub cat_decode {
    my $self = shift;
    return $self->[LATIN1]->cat_decode(@_);
}

# Warn if the data is not purely US-ASCII.
sub decode {
    my $self = shift;

    DO_WARN: {
        if ($] >= 5.009004) {
            my $hints = (caller(0))[10];
            $hints->{ref($self)} or last DO_WARN;
        }

        local $@;
        my $rv = eval { $self->[ASCII]->decode($_[0], Encode::FB_CROAK()) };
        return $rv unless $@;

        require Carp;
        no strict 'refs';
        $self->[FATAL]->(
            "Bytes implicitly upgraded into wide characters as iso-8859-1"
        );

    }

    return $self->[LATIN1]->decode(@_);
}

sub name { 'iso-8859-1' }

1;

__END__

=head1 SEE ALSO

L<perlunicode>, L<perluniintro>

L<open>, L<utf8>, L<encoding>, L<Encode>

=head1 AUTHORS

Audrey Tang

=head1 COPYRIGHT

Copyright 2004, 2005, 2006, 2007 by Audrey Tang E<lt>cpan@audreyt.orgE<gt>.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

See L<http://www.perl.com/perl/misc/Artistic.html>

=cut
                                                                                                                                                                                                                                                                                                                                                                                                                                    usr/share/perl/5.20.2/experimental.pm                                                               0100644 0000000 0000000 00000007602 12744441327 015716  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package experimental;
$experimental::VERSION = '0.007';
use strict;
use warnings;

use feature ();
use Carp qw/croak carp/;

my %warnings = map { $_ => 1 } grep { /^experimental::/ } keys %warnings::Offsets;
my %features = map { $_ => 1 } keys %feature::feature;

my %min_version = (
	array_base    => 5,
	autoderef     => 5.014000,
	lexical_topic => 5.010000,
	regex_sets    => 5.018000,
	smartmatch    => 5.010001,
	signatures    => 5.019009, # change to 5.20.0 someday? -- rjbs, 2014-02-08
);

my %additional = (
	postderef  => ['postderef_qq'],
	switch     => ['smartmatch'],
);

sub _enable {
	my $pragma = shift;
	if ($warnings{"experimental::$pragma"}) {
		warnings->unimport("experimental::$pragma");
		feature->import($pragma) if exists $features{$pragma};
		_enable(@{ $additional{$pragma} }) if $additional{$pragma};
	}
	elsif ($features{$pragma}) {
		feature->import($pragma);
		_enable(@{ $additional{$pragma} }) if $additional{$pragma};
	}
	elsif (not exists $min_version{$pragma}) {
		croak "Can't enable unknown feature $pragma";
	}
	elsif ($min_version{$pragma} > $]) {
		croak "Need perl version $min_version{$pragma} or later for feature $pragma";
	}
}

sub import {
	my ($self, @pragmas) = @_;

	for my $pragma (@pragmas) {
		_enable($pragma);
	}
	return;
}

sub _disable {
	my $pragma = shift;
	if ($warnings{"experimental::$pragma"}) {
		warnings->import("experimental::$pragma");
		feature->unimport($pragma) if exists $features{$pragma};
		_disable(@{ $additional{$pragma} }) if $additional{$pragma};
	}
	elsif ($features{$pragma}) {
		feature->unimport($pragma);
		_disable(@{ $additional{$pragma} }) if $additional{$pragma};
	}
	elsif (not exists $min_version{$pragma}) {
		carp "Can't disable unknown feature $pragma, ignoring";
	}
}

sub unimport {
	my ($self, @pragmas) = @_;

	for my $pragma (@pragmas) {
		_disable($pragma);
	}
	return;
}

1;

#ABSTRACT: Experimental features made easy

__END__

=pod

=encoding UTF-8

=head1 NAME

experimental - Experimental features made easy

=head1 VERSION

version 0.007

=head1 SYNOPSIS

 use experimental 'lexical_subs', 'smartmatch';
 my sub foo { $_[0] ~~ 1 }

=head1 DESCRIPTION

This pragma provides an easy and convenient way to enable or disable
experimental features.

Every version of perl has some number of features present but considered
"experimental."  For much of the life of Perl 5, this was only a designation
found in the documentation.  Starting in Perl v5.10.0, and more aggressively in
v5.18.0, experimental features were placed behind pragmata used to enable the
feature and disable associated warnings.

The C<experimental> pragma exists to combine the required incantations into a
single interface stable across releases of perl.  For every experimental
feature, this should enable the feature and silence warnings for the enclosing
lexical scope:

  use experimental 'feature-name';

To disable the feature and, if applicable, re-enable any warnings, use:

  no experimental 'feature-name';

The supported features, documented further below, are:

	array_base    - allow the use of $[ to change the starting index of @array
	autoderef     - allow push, each, keys, and other built-ins on references
	lexical_topic - allow the use of lexical $_ via "my $_"
	postderef     - allow the use of postfix dereferencing expressions, including
	                in interpolating strings
	regex_sets    - allow extended bracketed character classes in regexps
	signatures    - allow subroutine signatures (for named arguments)
	smartmatch    - allow the use of ~~, given, and when

=head2 Disclaimer

Because of the nature of the features it enables, forward compatibility can not
be guaranteed in any way.

=head1 AUTHOR

Leon Timmermans <leont@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2013 by Leon Timmermans.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
                                                                                                                              usr/share/perl/5.20.2/filetest.pm                                                                   0100644 0000000 0000000 00000007643 12744441327 015045  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package filetest;

our $VERSION = '1.03';

=head1 NAME

filetest - Perl pragma to control the filetest permission operators

=head1 SYNOPSIS

    $can_perhaps_read = -r "file";	# use the mode bits
    {
        use filetest 'access';		# intuit harder
        $can_really_read = -r "file";
    }
    $can_perhaps_read = -r "file";	# use the mode bits again

=head1 DESCRIPTION

This pragma tells the compiler to change the behaviour of the filetest
permission operators, C<-r> C<-w> C<-x> C<-R> C<-W> C<-X>
(see L<perlfunc>).

The default behaviour of file test operators is to use the simple
mode bits as returned by the stat() family of system calls.  However,
many operating systems have additional features to define more complex
access rights, for example ACLs (Access Control Lists).
For such environments, C<use filetest> may help the permission
operators to return results more consistent with other tools.

The C<use filetest> or C<no filetest> statements affect file tests defined in
their block, up to the end of the closest enclosing block (they are lexically
block-scoped).

Currently, only the C<access> sub-pragma is implemented.  It enables (or
disables) the use of access() when available, that is, on most UNIX systems and
other POSIX environments.  See details below.

=head2 Consider this carefully

The stat() mode bits are probably right for most of the files and
directories found on your system, because few people want to use the
additional features offered by access(). But you may encounter surprises
if your program runs on a system that uses ACLs, since the stat()
information won't reflect the actual permissions.

There may be a slight performance decrease in the filetest operations
when the filetest pragma is in effect, because checking bits is very
cheap.

Also, note that using the file tests for security purposes is a lost cause
from the start: there is a window open for race conditions (who is to
say that the permissions will not change between the test and the real
operation?).  Therefore if you are serious about security, just try
the real operation and test for its success - think in terms of atomic
operations.  Filetests are more useful for filesystem administrative
tasks, when you have no need for the content of the elements on disk.

=head2 The "access" sub-pragma

UNIX and POSIX systems provide an abstract access() operating system call,
which should be used to query the read, write, and execute rights. This
function hides various distinct approaches in additional operating system
specific security features, like Access Control Lists (ACLs)

The extended filetest functionality is used by Perl only when the argument
of the operators is a filename, not when it is a filehandle.

=head2 Limitation with regard to C<_>

Because access() does not invoke stat() (at least not in a way visible
to Perl), B<the stat result cache "_" is not set>.  This means that the
outcome of the following two tests is different.  The first has the stat
bits of F</etc/passwd> in C<_>, and in the second case this still
contains the bits of C</etc>.

 { -d '/etc';
   -w '/etc/passwd';
   print -f _ ? 'Yes' : 'No';   # Yes
 }

 { use filetest 'access';
   -d '/etc';
   -w '/etc/passwd';
   print -f _ ? 'Yes' : 'No';   # No
 }

Of course, unless your OS does not implement access(), in which case the
pragma is simply ignored.  Best not to use C<_> at all in a file where
the filetest pragma is active!

As a side effect, as C<_> doesn't work, stacked filetest operators
(C<-f -w $file>) won't work either.

This limitation might be removed in a future version of perl.

=cut

$filetest::hint_bits = 0x00400000; # HINT_FILETEST_ACCESS

sub import {
    if ( $_[1] eq 'access' ) {
	$^H |= $filetest::hint_bits;
    } else {
	die "filetest: the only implemented subpragma is 'access'.\n";
    }
}

sub unimport {
    if ( $_[1] eq 'access' ) {
	$^H &= ~$filetest::hint_bits;
    } else {
	die "filetest: the only implemented subpragma is 'access'.\n";
    }
}

1;
                                                                                             usr/share/perl/5.20.2/if.pm                                                                         0100644 0000000 0000000 00000005201 12744441327 013610  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package if;

$VERSION = '0.0603';

sub work {
  my $method = shift() ? 'import' : 'unimport';
  die "Too few arguments to 'use if' (some code returning an empty list in list context?)"
    unless @_ >= 2;
  return unless shift;		# CONDITION

  my $p = $_[0];		# PACKAGE
  (my $file = "$p.pm") =~ s!::!/!g;
  require $file;		# Works even if $_[0] is a keyword (like open)
  my $m = $p->can($method);
  goto &$m if $m;
}

sub import   { shift; unshift @_, 1; goto &work }
sub unimport { shift; unshift @_, 0; goto &work }

1;
__END__

=head1 NAME

if - C<use> a Perl module if a condition holds

=head1 SYNOPSIS

  use if CONDITION, MODULE => ARGUMENTS;

=head1 DESCRIPTION

The C<if> module is used to conditionally load another module.
The construct

  use if CONDITION, MODULE => ARGUMENTS;

will load MODULE only if CONDITION evaluates to true.
The above statement has no effect unless C<CONDITION> is true.
If the CONDITION does evaluate to true, then the above line has
the same effect as:

  use MODULE ARGUMENTS;

The use of C<< => >> above provides necessary quoting of C<MODULE>.
If you don't use the fat comma (eg you don't have any ARGUMENTS),
then you'll need to quote the MODULE.

=head2 EXAMPLES

The following line is taken from the testsuite for L<File::Map>:

  use if $^O ne 'MSWin32', POSIX => qw/setlocale LC_ALL/;

If run on any operating system other than Windows,
this will import the functions C<setlocale> and C<LC_ALL> from L<POSIX>.
On Windows it does nothing.

The following is used to L<deprecate> core modules beyond a certain version of Perl:

  use if $] > 5.016, 'deprecate';

This line is taken from L<Text::Soundex> 3.04,
and marks it as deprecated beyond Perl 5.16.
If you C<use Text::Soundex> in Perl 5.18, for example,
and you have used L<warnings>,
then you'll get a warning message
(the deprecate module looks to see whether the
calling module was C<use>'d from a core library directory,
and if so, generates a warning),
unless you've installed a more recent version of L<Text::Soundex> from CPAN.

=head1 BUGS

The current implementation does not allow specification of the
required version of the module.

=head1 SEE ALSO

L<Module::Requires> can be used to conditionally load one or modules,
with constraints based on the version of the module.
Unlike C<if> though, L<Module::Requires> is not a core module.

L<Module::Load::Conditional> provides a number of functions you can use to
query what modules are available, and then load one or more of them at runtime.

L<provide> can be used to select one of several possible modules to load,
based on what version of Perl is running.

=head1 AUTHOR

Ilya Zakharevich L<mailto:ilyaz@cpan.org>.

=cut

                                                                                                                                                                                                                                                                                                                                                                                               usr/share/perl/5.20.2/inc/                                                                          0040755 0000000 0000000 00000000000 13077704254 013433  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/inc/latest/                                                                   0040755 0000000 0000000 00000000000 13077704254 014727  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/inc/latest/private.pm                                                         0100644 0000000 0000000 00000004347 12744441327 016743  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package inc::latest::private;

use if $] >= 5.019, 'deprecate';

use strict;
use vars qw($VERSION);
$VERSION = '0.4205';
$VERSION = eval $VERSION;

use File::Spec;

# must ultimately "goto" the import routine of the module to be loaded
# so that the calling package is correct when $mod->import() runs.
sub import {
  my ($package, $mod, @args) = @_;
  my $file = $package->_mod2path($mod);

  if ($INC{$file}) {
    # Already loaded, but let _load_module handle import args
    goto \&_load_module;
  }

  # A bundled copy must be present
  my ($bundled, $bundled_dir) = $package->_search_bundled($file)
    or die "No bundled copy of $mod found";

  my $from_inc = $package->_search_INC($file);
  unless ($from_inc) {
    # Only bundled is available
    unshift(@INC, $bundled_dir);
    goto \&_load_module;
  }

  if (_version($from_inc) >= _version($bundled)) {
    # Ignore the bundled copy
    goto \&_load_module;
  }

  # Load the bundled copy
  unshift(@INC, $bundled_dir);
  goto \&_load_module;
}

sub _version {
  require ExtUtils::MakeMaker;
  return ExtUtils::MM->parse_version(shift);
}

# use "goto" for import to preserve caller
sub _load_module {
  my $package = shift; # remaining @_ is ready for goto
  my ($mod, @args) = @_;
  eval "require $mod; 1" or die $@;
  if ( my $import = $mod->can('import') ) {
    goto $import;
  }
  return 1;
}

sub _search_bundled {
  my ($self, $file) = @_;

  my $mypath = 'inc';

  opendir my $DH, $mypath or die "Can't open directory $mypath: $!";

  while (defined(my $e = readdir $DH)) {
    next unless $e =~ /^inc_/;
    my $try = File::Spec->catfile($mypath, $e, $file);

    return($try, File::Spec->catdir($mypath, $e)) if -e $try;
  }
  return;
}

# Look for the given path in @INC.
sub _search_INC {
  # TODO: doesn't handle coderefs or arrayrefs or objects in @INC, but
  # it probably should
  my ($self, $file) = @_;

  foreach my $dir (@INC) {
    next if ref $dir;
    my $try = File::Spec->catfile($dir, $file);
    return $try if -e $try;
  }

  return;
}

# Translate a module name into a directory/file.pm to search for in @INC
sub _mod2path {
  my ($self, $mod) = @_;
  my @parts = split /::/, $mod;
  $parts[-1] .= '.pm';
  return $parts[0] if @parts == 1;
  return File::Spec->catfile(@parts);
}

1;


                                                                                                                                                                                                                                                                                         usr/share/perl/5.20.2/inc/latest.pm                                                                 0100644 0000000 0000000 00000016547 12744441327 015276  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package inc::latest;

use if $] >= 5.019, 'deprecate';

use strict;
use vars qw($VERSION);
$VERSION = '0.4205';
$VERSION = eval $VERSION;

use Carp;
use File::Basename  ();
use File::Spec      ();
use File::Path      ();
use File::Copy      ();

# track and return modules loaded by inc::latest
my @loaded_modules;
sub loaded_modules {@loaded_modules}

# must ultimately "goto" the import routine of the module to be loaded
# so that the calling package is correct when $mod->import() runs.
sub import {
  my ($package, $mod, @args) = @_;
  return unless(defined $mod);

  my $private_path = 'inc/latest/private.pm';
  if(-e $private_path) {
    # user mode - delegate work to bundled private module
    require $private_path;
    splice( @_, 0, 1, 'inc::latest::private');
    goto \&inc::latest::private::import;
  }

  # author mode - just record and load the modules
  push(@loaded_modules, $mod);
  require inc::latest::private;
  goto \&inc::latest::private::_load_module;
}

sub write {
  my $package = shift;
  my ($where, @preload) = @_;

  warn "should really be writing in inc/" unless $where =~ /inc$/;

  # write inc/latest.pm
  File::Path::mkpath( $where );
  open my $fh, '>', File::Spec->catfile($where,'latest.pm');
  print {$fh} "# This stub created by inc::latest $VERSION\n";
  print {$fh} <<'HERE';
package inc::latest;
use strict;
use vars '@ISA';
require inc::latest::private;
@ISA = qw/inc::latest::private/;
HERE
  if (@preload) {
    print {$fh} "\npackage inc::latest::preload;\n";
    for my $mod (@preload) {
      print {$fh} "inc::latest->import('$mod');\n";
    }
  }
  print {$fh} "\n1;\n";
  close $fh;

  # write inc/latest/private;
  require inc::latest::private;
  File::Path::mkpath( File::Spec->catdir( $where, 'latest' ) );
  my $from = $INC{'inc/latest/private.pm'};
  my $to = File::Spec->catfile($where,'latest','private.pm');
  File::Copy::copy( $from, $to ) or die "Couldn't copy '$from' to '$to': $!";

  return 1;
}

sub bundle_module {
  my ($package, $module, $where) = @_;

  # create inc/inc_$foo
  (my $dist = $module) =~ s{::}{-}g;
  my $inc_lib = File::Spec->catdir($where,"inc_$dist");
  File::Path::mkpath $inc_lib;

  # get list of files to copy
  require ExtUtils::Installed;
  # workaround buggy EU::Installed check of @INC
  my $inst = ExtUtils::Installed->new(extra_libs => [@INC]);
  my $packlist = $inst->packlist( $module ) or die "Couldn't find packlist";
  my @files = grep { /\.pm$/ } keys %$packlist;


  # figure out prefix
  my $mod_path = quotemeta $package->_mod2path( $module );
  my ($prefix) = grep { /$mod_path$/ } @files;
  $prefix =~ s{$mod_path$}{};

  # copy files
  for my $from ( @files ) {
    next unless $from =~ /\.pm$/;
    (my $mod_path = $from) =~ s{^\Q$prefix\E}{};
    my $to = File::Spec->catfile( $inc_lib, $mod_path );
    File::Path::mkpath(File::Basename::dirname($to));
    File::Copy::copy( $from, $to ) or die "Couldn't copy '$from' to '$to': $!";
  }
  return 1;
}

# Translate a module name into a directory/file.pm to search for in @INC
sub _mod2path {
  my ($self, $mod) = @_;
  my @parts = split /::/, $mod;
  $parts[-1] .= '.pm';
  return $parts[0] if @parts == 1;
  return File::Spec->catfile(@parts);
}

1;


=head1 NAME

inc::latest - use modules bundled in inc/ if they are newer than installed ones

=head1 SYNOPSIS

  # in Build.PL
  use inc::latest 'Module::Build';

=head1 DESCRIPTION

The C<inc::latest> module helps bootstrap configure-time dependencies for CPAN
distributions.  These dependencies get bundled into the C<inc> directory within
a distribution and are used by Build.PL (or Makefile.PL).

Arguments to C<inc::latest> are module names that are checked against both the
current C<@INC> array and against specially-named directories in C<inc>.  If
the bundled version is newer than the installed one (or the module isn't
installed, then, the bundled directory is added to the start of <@INC> and the
module is loaded from there.

There are actually two variations of C<inc::latest> -- one for authors and one
for the C<inc> directory.  For distribution authors, the C<inc::latest>
installed in the system will record modules loaded via C<inc::latest> and can
be used to create the bundled files in C<inc>, including writing the second
variation as C<inc/latest.pm>.

This second C<inc::latest> is the one that is loaded in a distribution being
installed (e.g. from Build.PL).  This bundled C<inc::latest> is the one
that determines which module to load.

=head2 Special notes on bundling

The C<inc::latest> module creates bundled directories based on the packlist
file of an installed distribution.  Even though C<inc::latest> takes module
name arguments, it is better to think of it as bundling and making available
entire I<distributions>.  When a module is loaded through C<inc::latest>,
it looks in all bundled distributions in C<inc/> for a newer module than
can be found in the existing C<@INC> array.

Thus, the module-name provided should usually be the "top-level" module name of
a distribution, though this is not strictly required.  For example,
L<Module::Build> has a number of heuristics to map module names to packlists,
allowing users to do things like this:

  use inc::latest 'Devel::AssertOS::Unix';

even though Devel::AssertOS::Unix is contained within the Devel-CheckOS
distribution.

At the current time, packlists are required.  Thus, bundling dual-core modules
may require a 'forced install' over versions in the latest version of perl
in order to create the necessary packlist for bundling.

=head1 USAGE

When calling C<use>, the bundled C<inc::latest> takes a single module name and
optional arguments to pass to that module's own import method.

  use 'inc::latest' 'Foo::Bar' qw/foo bar baz/;

=head2 Author-mode

You are in author-mode inc::latest if any of the Author-mode methods are
available.  For example:

  if ( inc::latest->can('write') ) {
    inc::latest->write('inc');
  }

=over 4

=item loaded_modules()

  my @list = inc::latest->loaded_modules;

This takes no arguments and always returns a list of module names requested for
loading via "use inc::latest 'MODULE'", regardless of whether the load was
successful or not.

=item write()

  inc::latest->write( 'inc' );

This writes the bundled version of inc::latest to the directory name given as an
argument.  It almost all cases, it should be 'C<inc>'.

=item bundle_module()

  for my $mod ( inc::latest->loaded_modules ) {
    inc::latest->bundle_module($mod, $dir);
  }

If $mod corresponds to a packlist, then this function creates a specially-named
directory in $dir and copies all .pm files from the modlist to the new
directory (which almost always should just be 'inc').  For example, if Foo::Bar
is the name of the module, and $dir is 'inc', then the directory would be
'inc/inc_Foo-Bar' and contain files like this:

  inc/inc_Foo-Bar/Foo/Bar.pm

Currently, $mod B<must> have a packlist.  If this is not the case (e.g. for a
dual-core module), then the bundling will fail.  You may be able to create a
packlist by forced installing the module on top of the version that came with
core Perl.

=back

=head2 As bundled in inc/

All methods are private.  Only the C<import> method is public.

=head1 AUTHOR

Eric Wilhelm <ewilhelm@cpan.org>, David Golden <dagolden@cpan.org>

=head1 COPYRIGHT

Copyright (c) 2009 by Eric Wilhelm and David Golden

This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=head1 SEE ALSO

L<Module::Build>

=cut

                                                                                                                                                         usr/share/perl/5.20.2/less.pm                                                                       0100644 0000000 0000000 00000006204 12744441327 014164  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package less;
use strict;
use warnings;

our $VERSION = '0.03';

sub _pack_tags {
    return join ' ', @_;
}

sub _unpack_tags {
    return grep { defined and length }
        map  { split ' ' }
        grep {defined} @_;
}

sub stash_name { $_[0] }

sub of {
    my $class = shift @_;

    # If no one wants the result, don't bother computing it.
    return unless defined wantarray;

    my $hinthash = ( caller 0 )[10];
    my %tags;
    @tags{ _unpack_tags( $hinthash->{ $class->stash_name } ) } = ();

    if (@_) {
        exists $tags{$_} and return !!1 for @_;
        return;
    }
    else {
        return keys %tags;
    }
}

sub import {
    my $class = shift @_;
    my $stash = $class->stash_name;

    @_ = 'please' if not @_;
    my %tags;
    @tags{ _unpack_tags( @_, $^H{ $stash } ) } = ();

    $^H{$stash} = _pack_tags( keys %tags );
    return;
}

sub unimport {
    my $class = shift @_;

    if (@_) {
        my %tags;
        @tags{ _unpack_tags( $^H{$class} ) } = ();
        delete @tags{ _unpack_tags(@_) };
        my $new = _pack_tags( keys %tags );

        if ( not length $new ) {
            delete $^H{ $class->stash_name };
        }
        else {
            $^H{ $class->stash_name } = $new;
        }
    }
    else {
        delete $^H{ $class->stash_name };
    }

    return;
}

1;

__END__

=head1 NAME

less - perl pragma to request less of something

=head1 SYNOPSIS

    use less 'CPU';

=head1 DESCRIPTION

This is a user-pragma. If you're very lucky some code you're using
will know that you asked for less CPU usage or ram or fat or... we
just can't know. Consult your documentation on everything you're
currently using.

For general suggestions, try requesting C<CPU> or C<memory>.

    use less 'memory';
    use less 'CPU';
    use less 'fat';

If you ask for nothing in particular, you'll be asking for C<less
'please'>.

    use less 'please';

=head1 FOR MODULE AUTHORS

L<less> has been in the core as a "joke" module for ages now and it
hasn't had any real way to communicating any information to
anything. Thanks to Nicholas Clark we have user pragmas (see
L<perlpragma>) and now C<less> can do something.

You can probably expect your users to be able to guess that they can
request less CPU or memory or just "less" overall.

If the user didn't specify anything, it's interpreted as having used
the C<please> tag. It's up to you to make this useful.

  # equivalent
  use less;
  use less 'please';

=head2 C<< BOOLEAN = less->of( FEATURE ) >>

The class method C<< less->of( NAME ) >> returns a boolean to tell you
whether your user requested less of something.

  if ( less->of( 'CPU' ) ) {
      ...
  }
  elsif ( less->of( 'memory' ) ) {

  }

=head2 C<< FEATURES = less->of() >>

If you don't ask for any feature, you get the list of features that
the user requested you to be nice to. This has the nice side effect
that if you don't respect anything in particular then you can just ask
for it and use it like a boolean.

  if ( less->of ) {
      ...
  }
  else {
      ...
  }

=head1 CAVEATS

=over

=item This probably does nothing.

=item This works only on 5.10+

At least it's backwards compatible in not doing much.

=back

=cut
                                                                                                                                                                                                                                                                                                                                                                                            usr/share/perl/5.20.2/open.pm                                                                       0100644 0000000 0000000 00000017520 12744441327 014162  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        package open;
use warnings;

our $VERSION = '1.10';

require 5.008001; # for PerlIO::get_layers()

my $locale_encoding;

sub _get_encname {
    return ($1, Encode::resolve_alias($1)) if $_[0] =~ /^:?encoding\((.+)\)$/;
    return;
}

sub croak {
    require Carp; goto &Carp::croak;
}

sub _drop_oldenc {
    # If by the time we arrive here there already is at the top of the
    # perlio layer stack an encoding identical to what we would like
    # to push via this open pragma, we will pop away the old encoding
    # (+utf8) so that we can push ourselves in place (this is easier
    # than ignoring pushing ourselves because of the way how ${^OPEN}
    # works).  So we are looking for something like
    #
    #   stdio encoding(xxx) utf8
    #
    # in the existing layer stack, and in the new stack chunk for
    #
    #   :encoding(xxx)
    #
    # If we find a match, we pop the old stack (once, since
    # the utf8 is just a flag on the encoding layer)
    my ($h, @new) = @_;
    return unless @new >= 1 && $new[-1] =~ /^:encoding\(.+\)$/;
    my @old = PerlIO::get_layers($h);
    return unless @old >= 3 &&
	          $old[-1] eq 'utf8' &&
                  $old[-2] =~ /^encoding\(.+\)$/;
    require Encode;
    my ($loname, $lcname) = _get_encname($old[-2]);
    unless (defined $lcname) { # Should we trust get_layers()?
	croak("open: Unknown encoding '$loname'");
    }
    my ($voname, $vcname) = _get_encname($new[-1]);
    unless (defined $vcname) {
	croak("open: Unknown encoding '$voname'");
    }
    if ($lcname eq $vcname) {
	binmode($h, ":pop"); # utf8 is part of the encoding layer
    }
}

sub import {
    my ($class,@args) = @_;
    croak("open: needs explicit list of PerlIO layers") unless @args;
    my $std;
    my ($in,$out) = split(/\0/,(${^OPEN} || "\0"), -1);
    while (@args) {
	my $type = shift(@args);
	my $dscp;
	if ($type =~ /^:?(utf8|locale|encoding\(.+\))$/) {
	    $type = 'IO';
	    $dscp = ":$1";
	} elsif ($type eq ':std') {
	    $std = 1;
	    next;
	} else {
	    $dscp = shift(@args) || '';
	}
	my @val;
	foreach my $layer (split(/\s+/,$dscp)) {
            $layer =~ s/^://;
	    if ($layer eq 'locale') {
		require Encode;
		require encoding;
		$locale_encoding = encoding::_get_locale_encoding()
		    unless defined $locale_encoding;
		(warnings::warnif("layer", "Cannot figure out an encoding to use"), last)
		    unless defined $locale_encoding;
                $layer = "encoding($locale_encoding)";
		$std = 1;
	    } else {
		my $target = $layer;		# the layer name itself
		$target =~ s/^(\w+)\(.+\)$/$1/;	# strip parameters

		unless(PerlIO::Layer::->find($target,1)) {
		    warnings::warnif("layer", "Unknown PerlIO layer '$target'");
		}
	    }
	    push(@val,":$layer");
	    if ($layer =~ /^(crlf|raw)$/) {
		$^H{"open_$type"} = $layer;
	    }
	}
	if ($type eq 'IN') {
	    _drop_oldenc(*STDIN, @val) if $std;
	    $in  = join(' ', @val);
	}
	elsif ($type eq 'OUT') {
	    if ($std) {
		_drop_oldenc(*STDOUT, @val);
		_drop_oldenc(*STDERR, @val);
	    }
	    $out = join(' ', @val);
	}
	elsif ($type eq 'IO') {
	    if ($std) {
		_drop_oldenc(*STDIN, @val);
		_drop_oldenc(*STDOUT, @val);
		_drop_oldenc(*STDERR, @val);
	    }
	    $in = $out = join(' ', @val);
	}
	else {
	    croak "Unknown PerlIO layer class '$type' (need IN, OUT or IO)";
	}
    }
    ${^OPEN} = join("\0", $in, $out);
    if ($std) {
	if ($in) {
	    if ($in =~ /:utf8\b/) {
		    binmode(STDIN,  ":utf8");
		} elsif ($in =~ /(\w+\(.+\))/) {
		    binmode(STDIN,  ":$1");
		}
	}
	if ($out) {
	    if ($out =~ /:utf8\b/) {
		binmode(STDOUT,  ":utf8");
		binmode(STDERR,  ":utf8");
	    } elsif ($out =~ /(\w+\(.+\))/) {
		binmode(STDOUT,  ":$1");
		binmode(STDERR,  ":$1");
	    }
	}
    }
}

1;
__END__

=head1 NAME

open - perl pragma to set default PerlIO layers for input and output

=head1 SYNOPSIS

    use open IN  => ":crlf", OUT => ":bytes";
    use open OUT => ':utf8';
    use open IO  => ":encoding(iso-8859-7)";

    use open IO  => ':locale';

    use open ':encoding(utf8)';
    use open ':locale';
    use open ':encoding(iso-8859-7)';

    use open ':std';

=head1 DESCRIPTION

Full-fledged support for I/O layers is now implemented provided
Perl is configured to use PerlIO as its IO system (which is now the
default).

The C<open> pragma serves as one of the interfaces to declare default
"layers" (also known as "disciplines") for all I/O. Any two-argument
open(), readpipe() (aka qx//) and similar operators found within the
lexical scope of this pragma will use the declared defaults.
Even three-argument opens may be affected by this pragma
when they don't specify IO layers in MODE.

With the C<IN> subpragma you can declare the default layers
of input streams, and with the C<OUT> subpragma you can declare
the default layers of output streams.  With the C<IO>  subpragma
you can control both input and output streams simultaneously.

If you have a legacy encoding, you can use the C<:encoding(...)> tag.

If you want to set your encoding layers based on your
locale environment variables, you can use the C<:locale> tag.
For example:

    $ENV{LANG} = 'ru_RU.KOI8-R';
    # the :locale will probe the locale environment variables like LANG
    use open OUT => ':locale';
    open(O, ">koi8");
    print O chr(0x430); # Unicode CYRILLIC SMALL LETTER A = KOI8-R 0xc1
    close O;
    open(I, "<koi8");
    printf "%#x\n", ord(<I>), "\n"; # this should print 0xc1
    close I;

These are equivalent

    use open ':encoding(utf8)';
    use open IO => ':encoding(utf8)';

as are these

    use open ':locale';
    use open IO => ':locale';

and these

    use open ':encoding(iso-8859-7)';
    use open IO => ':encoding(iso-8859-7)';

The matching of encoding names is loose: case does not matter, and
many encodings have several aliases.  See L<Encode::Supported> for
details and the list of supported locales.

When open() is given an explicit list of layers (with the three-arg
syntax), they override the list declared using this pragma.  open() can
also be given a single colon (:) for a layer name, to override this pragma
and use the default (C<:raw> on Unix, C<:crlf> on Windows).

The C<:std> subpragma on its own has no effect, but if combined with
the C<:utf8> or C<:encoding> subpragmas, it converts the standard
filehandles (STDIN, STDOUT, STDERR) to comply with encoding selected
for input/output handles.  For example, if both input and out are
chosen to be C<:encoding(utf8)>, a C<:std> will mean that STDIN, STDOUT,
and STDERR are also in C<:encoding(utf8)>.  On the other hand, if only
output is chosen to be in C<< :encoding(koi8r) >>, a C<:std> will cause
only the STDOUT and STDERR to be in C<koi8r>.  The C<:locale> subpragma
implicitly turns on C<:std>.

The logic of C<:locale> is described in full in L<encoding>,
but in short it is first trying nl_langinfo(CODESET) and then
guessing from the LC_ALL and LANG locale environment variables.

Directory handles may also support PerlIO layers in the future.

=head1 NONPERLIO FUNCTIONALITY

If Perl is not built to use PerlIO as its IO system then only the two
pseudo-layers C<:bytes> and C<:crlf> are available.

The C<:bytes> layer corresponds to "binary mode" and the C<:crlf>
layer corresponds to "text mode" on platforms that distinguish
between the two modes when opening files (which is many DOS-like
platforms, including Windows).  These two layers are no-ops on
platforms where binmode() is a no-op, but perform their functions
everywhere if PerlIO is enabled.

=head1 IMPLEMENTATION DETAILS

There is a class method in C<PerlIO::Layer> C<find> which is
implemented as XS code.  It is called by C<import> to validate the
layers:

   PerlIO::Layer::->find("perlio")

The return value (if defined) is a Perl object, of class
C<PerlIO::Layer> which is created by the C code in F<perlio.c>.  As
yet there is nothing useful you can do with the object at the perl
level.

=head1 SEE ALSO

L<perlfunc/"binmode">, L<perlfunc/"open">, L<perlunicode>, L<PerlIO>,
L<encoding>

=cut
                                                                                                                                                                                usr/share/perl/5.20.2/overload/                                                                     0040755 0000000 0000000 00000000000 13077704254 014475  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        usr/share/perl/5.20.2/overload/numbers.pm                                                           0100644 0000000 0000000 00000003423 12744441327 016504  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        # -*- buffer-read-only: t -*-
#
#    lib/overload/numbers.pm
#
#    Copyright (C) 2008 by Larry Wall and others
#
#    You may distribute under the terms of either the GNU General Public
#    License or the Artistic License, as specified in the README file.
#
# !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
# This file is built by regen/overload.pl.
# Any changes made here will be lost!

package overload::numbers;

our @names = qw#
    ()
    (${}
    (@{}
    (%{}
    (*{}
    (&{}
    (++
    (--
    (bool
    (0+
    (""
    (!
    (=
    (abs
    (neg
    (<>
    (int
    (<
    (<=
    (>
    (>=
    (==
    (!=
    (lt
    (le
    (gt
    (ge
    (eq
    (ne
    (nomethod
    (+
    (+=
    (-
    (-=
    (*
    (*=
    (/
    (/=
    (%
    (%=
    (**
    (**=
    (<<
    (<<=
    (>>
    (>>=
    (&
    (&=
    (|
    (|=
    (^
    (^=
    (<=>
    (cmp
    (~
    (atan2
    (cos
    (sin
    (exp
    (log
    (sqrt
    (x
    (x=
    (.
    (.=
    (~~
    (-X
    (qr
#;

our @enums = qw#
    fallback
    to_sv
    to_av
    to_hv
    to_gv
    to_cv
    inc
    dec
    bool_
    numer
    string
    not
    copy
    abs
    neg
    iter
    int
    lt
    le
    gt
    ge
    eq
    ne
    slt
    sle
    sgt
    sge
    seq
    sne
    nomethod
    add
    add_ass
    subtr
    subtr_ass
    mult
    mult_ass
    div
    div_ass
    modulo
    modulo_ass
    pow
    pow_ass
    lshift
    lshift_ass
    rshift
    rshift_ass
    band
    band_ass
    bor
    bor_ass
    bxor
    bxor_ass
    ncmp
    scmp
    compl
    atan2
    cos
    sin
    exp
    log
    sqrt
    repeat
    repeat_ass
    concat
    concat_ass
    smart
    ftest
    regexp
#;

{ my $i = 0; our %names = map { $_ => $i++ } @names }

{ my $i = 0; our %enums = map { $_ => $i++ } @enums }

# ex: set ro:
                                                                                                                                                                                                                                             usr/share/perl/5.20.2/perl5db.pl                                                                    0100644 0000000 0000000 00001146333 12744441327 014563  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        
=head1 NAME

perl5db.pl - the perl debugger

=head1 SYNOPSIS

    perl -d  your_Perl_script

=head1 DESCRIPTION

C<perl5db.pl> is the perl debugger. It is loaded automatically by Perl when
you invoke a script with C<perl -d>. This documentation tries to outline the
structure and services provided by C<perl5db.pl>, and to describe how you
can use them.

=head1 GENERAL NOTES

The debugger can look pretty forbidding to many Perl programmers. There are
a number of reasons for this, many stemming out of the debugger's history.

When the debugger was first written, Perl didn't have a lot of its nicer
features - no references, no lexical variables, no closures, no object-oriented
programming. So a lot of the things one would normally have done using such
features was done using global variables, globs and the C<local()> operator
in creative ways.

Some of these have survived into the current debugger; a few of the more
interesting and still-useful idioms are noted in this section, along with notes
on the comments themselves.

=head2 Why not use more lexicals?

Experienced Perl programmers will note that the debugger code tends to use
mostly package globals rather than lexically-scoped variables. This is done
to allow a significant amount of control of the debugger from outside the
debugger itself.

Unfortunately, though the variables are accessible, they're not well
documented, so it's generally been a decision that hasn't made a lot of
difference to most users. Where appropriate, comments have been added to
make variables more accessible and usable, with the understanding that these
I<are> debugger internals, and are therefore subject to change. Future
development should probably attempt to replace the globals with a well-defined
API, but for now, the variables are what we've got.

=head2 Automated variable stacking via C<local()>

As you may recall from reading C<perlfunc>, the C<local()> operator makes a
temporary copy of a variable in the current scope. When the scope ends, the
old copy is restored. This is often used in the debugger to handle the
automatic stacking of variables during recursive calls:

     sub foo {
        local $some_global++;

        # Do some stuff, then ...
        return;
     }

What happens is that on entry to the subroutine, C<$some_global> is localized,
then altered. When the subroutine returns, Perl automatically undoes the
localization, restoring the previous value. Voila, automatic stack management.

The debugger uses this trick a I<lot>. Of particular note is C<DB::eval>,
which lets the debugger get control inside of C<eval>'ed code. The debugger
localizes a saved copy of C<$@> inside the subroutine, which allows it to
keep C<$@> safe until it C<DB::eval> returns, at which point the previous
value of C<$@> is restored. This makes it simple (well, I<simpler>) to keep
track of C<$@> inside C<eval>s which C<eval> other C<eval's>.

In any case, watch for this pattern. It occurs fairly often.

=head2 The C<^> trick

This is used to cleverly reverse the sense of a logical test depending on
the value of an auxiliary variable. For instance, the debugger's C<S>
(search for subroutines by pattern) allows you to negate the pattern
like this:

   # Find all non-'foo' subs:
   S !/foo/

Boolean algebra states that the truth table for XOR looks like this:

=over 4

=item * 0 ^ 0 = 0

(! not present and no match) --> false, don't print

=item * 0 ^ 1 = 1

(! not present and matches) --> true, print

=item * 1 ^ 0 = 1

(! present and no match) --> true, print

=item * 1 ^ 1 = 0

(! present and matches) --> false, don't print

=back

As you can see, the first pair applies when C<!> isn't supplied, and
the second pair applies when it is. The XOR simply allows us to
compact a more complicated if-then-elseif-else into a more elegant
(but perhaps overly clever) single test. After all, it needed this
explanation...

=head2 FLAGS, FLAGS, FLAGS

There is a certain C programming legacy in the debugger. Some variables,
such as C<$single>, C<$trace>, and C<$frame>, have I<magical> values composed
of 1, 2, 4, etc. (powers of 2) OR'ed together. This allows several pieces
of state to be stored independently in a single scalar.

A test like

    if ($scalar & 4) ...

is checking to see if the appropriate bit is on. Since each bit can be
"addressed" independently in this way, C<$scalar> is acting sort of like
an array of bits. Obviously, since the contents of C<$scalar> are just a
bit-pattern, we can save and restore it easily (it will just look like
a number).

The problem, is of course, that this tends to leave magic numbers scattered
all over your program whenever a bit is set, cleared, or checked. So why do
it?

=over 4

=item *

First, doing an arithmetical or bitwise operation on a scalar is
just about the fastest thing you can do in Perl: C<use constant> actually
creates a subroutine call, and array and hash lookups are much slower. Is
this over-optimization at the expense of readability? Possibly, but the
debugger accesses these  variables a I<lot>. Any rewrite of the code will
probably have to benchmark alternate implementations and see which is the
best balance of readability and speed, and then document how it actually
works.

=item *

Second, it's very easy to serialize a scalar number. This is done in
the restart code; the debugger state variables are saved in C<%ENV> and then
restored when the debugger is restarted. Having them be just numbers makes
this trivial.

=item *

Third, some of these variables are being shared with the Perl core
smack in the middle of the interpreter's execution loop. It's much faster for
a C program (like the interpreter) to check a bit in a scalar than to access
several different variables (or a Perl array).

=back

=head2 What are those C<XXX> comments for?

Any comment containing C<XXX> means that the comment is either somewhat
speculative - it's not exactly clear what a given variable or chunk of
code is doing, or that it is incomplete - the basics may be clear, but the
subtleties are not completely documented.

Send in a patch if you can clear up, fill out, or clarify an C<XXX>.

=head1 DATA STRUCTURES MAINTAINED BY CORE

There are a number of special data structures provided to the debugger by
the Perl interpreter.

The array C<@{$main::{'_<'.$filename}}> (aliased locally to C<@dbline>
via glob assignment) contains the text from C<$filename>, with each
element corresponding to a single line of C<$filename>. Additionally,
breakable lines will be dualvars with the numeric component being the
memory address of a COP node. Non-breakable lines are dualvar to 0.

The hash C<%{'_<'.$filename}> (aliased locally to C<%dbline> via glob
assignment) contains breakpoints and actions.  The keys are line numbers;
you can set individual values, but not the whole hash. The Perl interpreter
uses this hash to determine where breakpoints have been set. Any true value is
considered to be a breakpoint; C<perl5db.pl> uses C<$break_condition\0$action>.
Values are magical in numeric context: 1 if the line is breakable, 0 if not.

The scalar C<${"_<$filename"}> simply contains the string C<$filename>.
This is also the case for evaluated strings that contain subroutines, or
which are currently being executed.  The $filename for C<eval>ed strings looks
like C<(eval 34).

=head1 DEBUGGER STARTUP

When C<perl5db.pl> starts, it reads an rcfile (C<perl5db.ini> for
non-interactive sessions, C<.perldb> for interactive ones) that can set a number
of options. In addition, this file may define a subroutine C<&afterinit>
that will be executed (in the debugger's context) after the debugger has
initialized itself.

Next, it checks the C<PERLDB_OPTS> environment variable and treats its
contents as the argument of a C<o> command in the debugger.

=head2 STARTUP-ONLY OPTIONS

The following options can only be specified at startup.
To set them in your rcfile, add a call to
C<&parse_options("optionName=new_value")>.

=over 4

=item * TTY

the TTY to use for debugging i/o.

=item * noTTY

if set, goes in NonStop mode.  On interrupt, if TTY is not set,
uses the value of noTTY or F<$HOME/.perldbtty$$> to find TTY using
Term::Rendezvous.  Current variant is to have the name of TTY in this
file.

=item * ReadLine

if false, a dummy ReadLine is used, so you can debug
ReadLine applications.

=item * NonStop

if true, no i/o is performed until interrupt.

=item * LineInfo

file or pipe to print line number info to.  If it is a
pipe, a short "emacs like" message is used.

=item * RemotePort

host:port to connect to on remote host for remote debugging.

=item * HistFile

file to store session history to. There is no default and so no
history file is written unless this variable is explicitly set.

=item * HistSize

number of commands to store to the file specified in C<HistFile>.
Default is 100.

=back

=head3 SAMPLE RCFILE

 &parse_options("NonStop=1 LineInfo=db.out");
  sub afterinit { $trace = 1; }

The script will run without human intervention, putting trace
information into C<db.out>.  (If you interrupt it, you had better
reset C<LineInfo> to something I<interactive>!)

=head1 INTERNALS DESCRIPTION

=head2 DEBUGGER INTERFACE VARIABLES

Perl supplies the values for C<%sub>.  It effectively inserts
a C<&DB::DB();> in front of each place that can have a
breakpoint. At each subroutine call, it calls C<&DB::sub> with
C<$DB::sub> set to the called subroutine. It also inserts a C<BEGIN
{require 'perl5db.pl'}> before the first line.

After each C<require>d file is compiled, but before it is executed, a
call to C<&DB::postponed($main::{'_<'.$filename})> is done. C<$filename>
is the expanded name of the C<require>d file (as found via C<%INC>).

=head3 IMPORTANT INTERNAL VARIABLES

=head4 C<$CreateTTY>

Used to control when the debugger will attempt to acquire another TTY to be
used for input.

=over

=item * 1 -  on C<fork()>

=item * 2 - debugger is started inside debugger

=item * 4 -  on startup

=back

=head4 C<$doret>

The value -2 indicates that no return value should be printed.
Any other positive value causes C<DB::sub> to print return values.

=head4 C<$evalarg>

The item to be eval'ed by C<DB::eval>. Used to prevent messing with the current
contents of C<@_> when C<DB::eval> is called.

=head4 C<$frame>

Determines what messages (if any) will get printed when a subroutine (or eval)
is entered or exited.

=over 4

=item * 0 -  No enter/exit messages

=item * 1 - Print I<entering> messages on subroutine entry

=item * 2 - Adds exit messages on subroutine exit. If no other flag is on, acts like 1+2.

=item * 4 - Extended messages: C<< <in|out> I<context>=I<fully-qualified sub name> from I<file>:I<line> >>. If no other flag is on, acts like 1+4.

=item * 8 - Adds parameter information to messages, and overloaded stringify and tied FETCH is enabled on the printed arguments. Ignored if C<4> is not on.

=item * 16 - Adds C<I<context> return from I<subname>: I<value>> messages on subroutine/eval exit. Ignored if C<4> is not on.

=back

To get everything, use C<$frame=30> (or C<o f=30> as a debugger command).
The debugger internally juggles the value of C<$frame> during execution to
protect external modules that the debugger uses from getting traced.

=head4 C<$level>

Tracks current debugger nesting level. Used to figure out how many
C<E<lt>E<gt>> pairs to surround the line number with when the debugger
outputs a prompt. Also used to help determine if the program has finished
during command parsing.

=head4 C<$onetimeDump>

Controls what (if anything) C<DB::eval()> will print after evaluating an
expression.

=over 4

=item * C<undef> - don't print anything

=item * C<dump> - use C<dumpvar.pl> to display the value returned

=item * C<methods> - print the methods callable on the first item returned

=back

=head4 C<$onetimeDumpDepth>

Controls how far down C<dumpvar.pl> will go before printing C<...> while
dumping a structure. Numeric. If C<undef>, print all levels.

=head4 C<$signal>

Used to track whether or not an C<INT> signal has been detected. C<DB::DB()>,
which is called before every statement, checks this and puts the user into
command mode if it finds C<$signal> set to a true value.

=head4 C<$single>

Controls behavior during single-stepping. Stacked in C<@stack> on entry to
each subroutine; popped again at the end of each subroutine.

=over 4

=item * 0 - run continuously.

=item * 1 - single-step, go into subs. The C<s> command.

=item * 2 - single-step, don't go into subs. The C<n> command.

=item * 4 - print current sub depth (turned on to force this when C<too much
recursion> occurs.

=back

=head4 C<$trace>

Controls the output of trace information.

=over 4

=item * 1 - The C<t> command was entered to turn on tracing (every line executed is printed)

=item * 2 - watch expressions are active

=item * 4 - user defined a C<watchfunction()> in C<afterinit()>

=back

=head4 C<$slave_editor>

1 if C<LINEINFO> was directed to a pipe; 0 otherwise.

=head4 C<@cmdfhs>

Stack of filehandles that C<DB::readline()> will read commands from.
Manipulated by the debugger's C<source> command and C<DB::readline()> itself.

=head4 C<@dbline>

Local alias to the magical line array, C<@{$main::{'_<'.$filename}}> ,
supplied by the Perl interpreter to the debugger. Contains the source.

=head4 C<@old_watch>

Previous values of watch expressions. First set when the expression is
entered; reset whenever the watch expression changes.

=head4 C<@saved>

Saves important globals (C<$@>, C<$!>, C<$^E>, C<$,>, C<$/>, C<$\>, C<$^W>)
so that the debugger can substitute safe values while it's running, and
restore them when it returns control.

=head4 C<@stack>

Saves the current value of C<$single> on entry to a subroutine.
Manipulated by the C<c> command to turn off tracing in all subs above the
current one.

=head4 C<@to_watch>

The 'watch' expressions: to be evaluated before each line is executed.

=head4 C<@typeahead>

The typeahead buffer, used by C<DB::readline>.

=head4 C<%alias>

Command aliases. Stored as character strings to be substituted for a command
entered.

=head4 C<%break_on_load>

Keys are file names, values are 1 (break when this file is loaded) or undef
(don't break when it is loaded).

=head4 C<%dbline>

Keys are line numbers, values are C<condition\0action>. If used in numeric
context, values are 0 if not breakable, 1 if breakable, no matter what is
in the actual hash entry.

=head4 C<%had_breakpoints>

Keys are file names; values are bitfields:

=over 4

=item * 1 - file has a breakpoint in it.

=item * 2 - file has an action in it.

=back

A zero or undefined value means this file has neither.

=head4 C<%option>

Stores the debugger options. These are character string values.

=head4 C<%postponed>

Saves breakpoints for code that hasn't been compiled yet.
Keys are subroutine names, values are:

=over 4

=item * C<compile> - break when this sub is compiled

=item * C<< break +0 if <condition> >> - break (conditionally) at the start of this routine. The condition will be '1' if no condition was specified.

=back

=head4 C<%postponed_file>

This hash keeps track of breakpoints that need to be set for files that have
not yet been compiled. Keys are filenames; values are references to hashes.
Each of these hashes is keyed by line number, and its values are breakpoint
definitions (C<condition\0action>).

=head1 DEBUGGER INITIALIZATION

The debugger's initialization actually jumps all over the place inside this
package. This is because there are several BEGIN blocks (which of course
execute immediately) spread through the code. Why is that?

The debugger needs to be able to change some things and set some things up
before the debugger code is compiled; most notably, the C<$deep> variable that
C<DB::sub> uses to tell when a program has recursed deeply. In addition, the
debugger has to turn off warnings while the debugger code is compiled, but then
restore them to their original setting before the program being debugged begins
executing.

The first C<BEGIN> block simply turns off warnings by saving the current
setting of C<$^W> and then setting it to zero. The second one initializes
the debugger variables that are needed before the debugger begins executing.
The third one puts C<$^X> back to its former value.

We'll detail the second C<BEGIN> block later; just remember that if you need
to initialize something before the debugger starts really executing, that's
where it has to go.

=cut

package DB;

use strict;

BEGIN {eval 'use IO::Handle'}; # Needed for flush only? breaks under miniperl

BEGIN {
    require feature;
    $^V =~ /^v(\d+\.\d+)/;
    feature->import(":$1");
}

# Debugger for Perl 5.00x; perl5db.pl patch level:
use vars qw($VERSION $header);

$VERSION = '1.44';

$header = "perl5db.pl version $VERSION";

=head1 DEBUGGER ROUTINES

=head2 C<DB::eval()>

This function replaces straight C<eval()> inside the debugger; it simplifies
the process of evaluating code in the user's context.

The code to be evaluated is passed via the package global variable
C<$DB::evalarg>; this is done to avoid fiddling with the contents of C<@_>.

Before we do the C<eval()>, we preserve the current settings of C<$trace>,
C<$single>, C<$^D> and C<$usercontext>.  The latter contains the
preserved values of C<$@>, C<$!>, C<$^E>, C<$,>, C<$/>, C<$\>, C<$^W> and the
user's current package, grabbed when C<DB::DB> got control.  This causes the
proper context to be used when the eval is actually done.  Afterward, we
restore C<$trace>, C<$single>, and C<$^D>.

Next we need to handle C<$@> without getting confused. We save C<$@> in a
local lexical, localize C<$saved[0]> (which is where C<save()> will put
C<$@>), and then call C<save()> to capture C<$@>, C<$!>, C<$^E>, C<$,>,
C<$/>, C<$\>, and C<$^W>) and set C<$,>, C<$/>, C<$\>, and C<$^W> to values
considered sane by the debugger. If there was an C<eval()> error, we print
it on the debugger's output. If C<$onetimedump> is defined, we call
C<dumpit> if it's set to 'dump', or C<methods> if it's set to
'methods'. Setting it to something else causes the debugger to do the eval
but not print the result - handy if you want to do something else with it
(the "watch expressions" code does this to get the value of the watch
expression but not show it unless it matters).

In any case, we then return the list of output from C<eval> to the caller,
and unwinding restores the former version of C<$@> in C<@saved> as well
(the localization of C<$saved[0]> goes away at the end of this scope).

=head3 Parameters and variables influencing execution of DB::eval()

C<DB::eval> isn't parameterized in the standard way; this is to keep the
debugger's calls to C<DB::eval()> from mucking with C<@_>, among other things.
The variables listed below influence C<DB::eval()>'s execution directly.

=over 4

=item C<$evalarg> - the thing to actually be eval'ed

=item C<$trace> - Current state of execution tracing

=item C<$single> - Current state of single-stepping

=item C<$onetimeDump> - what is to be displayed after the evaluation

=item C<$onetimeDumpDepth> - how deep C<dumpit()> should go when dumping results

=back

The following variables are altered by C<DB::eval()> during its execution. They
are "stacked" via C<local()>, enabling recursive calls to C<DB::eval()>.

=over 4

=item C<@res> - used to capture output from actual C<eval>.

=item C<$otrace> - saved value of C<$trace>.

=item C<$osingle> - saved value of C<$single>.

=item C<$od> - saved value of C<$^D>.

=item C<$saved[0]> - saved value of C<$@>.

=item $\ - for output of C<$@> if there is an evaluation error.

=back

=head3 The problem of lexicals

The context of C<DB::eval()> presents us with some problems. Obviously,
we want to be 'sandboxed' away from the debugger's internals when we do
the eval, but we need some way to control how punctuation variables and
debugger globals are used.

We can't use local, because the code inside C<DB::eval> can see localized
variables; and we can't use C<my> either for the same reason. The code
in this routine compromises and uses C<my>.

After this routine is over, we don't have user code executing in the debugger's
context, so we can use C<my> freely.

=cut

############################################## Begin lexical danger zone

# 'my' variables used here could leak into (that is, be visible in)
# the context that the code being evaluated is executing in. This means that
# the code could modify the debugger's variables.
#
# Fiddling with the debugger's context could be Bad. We insulate things as
# much as we can.

use vars qw(
    @args
    %break_on_load
    $CommandSet
    $CreateTTY
    $DBGR
    @dbline
    $dbline
    %dbline
    $dieLevel
    $filename
    $histfile
    $histsize
    $IN
    $inhibit_exit
    @ini_INC
    $ini_warn
    $maxtrace
    $od
    @options
    $osingle
    $otrace
    $pager
    $post
    %postponed
    $prc
    $pre
    $pretype
    $psh
    @RememberOnROptions
    $remoteport
    @res
    $rl
    @saved
    $signalLevel
    $sub
    $term
    $usercontext
    $warnLevel
);

our (
    @cmdfhs,
    $evalarg,
    $frame,
    $hist,
    $ImmediateStop,
    $line,
    $onetimeDump,
    $onetimedumpDepth,
    %option,
    $OUT,
    $packname,
    $signal,
    $single,
    $start,
    %sub,
    $subname,
    $trace,
    $window,
);

# Used to save @ARGV and extract any debugger-related flags.
use vars qw(@ARGS);

# Used to prevent multiple entries to diesignal()
# (if for instance diesignal() itself dies)
use vars qw($panic);

# Used to prevent the debugger from running nonstop
# after a restart
our ($second_time);

sub _calc_usercontext {
    my ($package) = @_;

    # Cancel strict completely for the evaluated code, so the code
    # the user evaluates won't be affected by it. (Shlomi Fish)
    return 'no strict; ($@, $!, $^E, $,, $/, $\, $^W) = @DB::saved;'
    . "package $package;";    # this won't let them modify, alas
}

sub eval {

    # 'my' would make it visible from user code
    #    but so does local! --tchrist
    # Remember: this localizes @DB::res, not @main::res.
    local @res;
    {

        # Try to keep the user code from messing  with us. Save these so that
        # even if the eval'ed code changes them, we can put them back again.
        # Needed because the user could refer directly to the debugger's
        # package globals (and any 'my' variables in this containing scope)
        # inside the eval(), and we want to try to stay safe.
        local $otrace  = $trace;
        local $osingle = $single;
        local $od      = $^D;

        # Untaint the incoming eval() argument.
        { ($evalarg) = $evalarg =~ /(.*)/s; }

        # $usercontext built in DB::DB near the comment
        # "set up the context for DB::eval ..."
        # Evaluate and save any results.
        @res = eval "$usercontext $evalarg;\n";  # '\n' for nice recursive debug

        # Restore those old values.
        $trace  = $otrace;
        $single = $osingle;
        $^D     = $od;
    }

    # Save the current value of $@, and preserve it in the debugger's copy
    # of the saved precious globals.
    my $at = $@;

    # Since we're only saving $@, we only have to localize the array element
    # that it will be stored in.
    local $saved[0];    # Preserve the old value of $@
    eval { &DB::save };

    # Now see whether we need to report an error back to the user.
    if ($at) {
        local $\ = '';
        print $OUT $at;
    }

    # Display as required by the caller. $onetimeDump and $onetimedumpDepth
    # are package globals.
    elsif ($onetimeDump) {
        if ( $onetimeDump eq 'dump' ) {
            local $option{dumpDepth} = $onetimedumpDepth
              if defined $onetimedumpDepth;
            dumpit( $OUT, \@res );
        }
        elsif ( $onetimeDump eq 'methods' ) {
            methods( $res[0] );
        }
    } ## end elsif ($onetimeDump)
    @res;
} ## end sub eval

############################################## End lexical danger zone

# After this point it is safe to introduce lexicals.
# The code being debugged will be executing in its own context, and
# can't see the inside of the debugger.
#
# However, one should not overdo it: leave as much control from outside as
# possible. If you make something a lexical, it's not going to be addressable
# from outside the debugger even if you know its name.

# This file is automatically included if you do perl -d.
# It's probably not useful to include this yourself.
#
# Before venturing further into these twisty passages, it is
# wise to read the perldebguts man page or risk the ire of dragons.
#
# (It should be noted that perldebguts will tell you a lot about
# the underlying mechanics of how the debugger interfaces into the
# Perl interpreter, but not a lot about the debugger itself. The new
# comments in this code try to address this problem.)

# Note that no subroutine call is possible until &DB::sub is defined
# (for subroutines defined outside of the package DB). In fact the same is
# true if $deep is not defined.

# Enhanced by ilya@math.ohio-state.edu (Ilya Zakharevich)

# modified Perl debugger, to be run from Emacs in perldb-mode
# Ray Lischner (uunet!mntgfx!lisch) as of 5 Nov 1990
# Johan Vromans -- upgrade to 4.0 pl 10
# Ilya Zakharevich -- patches after 5.001 (and some before ;-)
########################################################################

=head1 DEBUGGER INITIALIZATION

The debugger starts up in phases.

=head2 BASIC SETUP

First, it initializes the environment it wants to run in: turning off
warnings during its own compilation, defining variables which it will need
to avoid warnings later, setting itself up to not exit when the program
terminates, and defaulting to printing return values for the C<r> command.

=cut

# Needed for the statement after exec():
#
# This BEGIN block is simply used to switch off warnings during debugger
# compilation. Probably it would be better practice to fix the warnings,
# but this is how it's done at the moment.

BEGIN {
    $ini_warn = $^W;
    $^W       = 0;
}    # Switch compilation warnings off until another BEGIN.

local ($^W) = 0;    # Switch run-time warnings off during init.

=head2 THREADS SUPPORT

If we are running under a threaded Perl, we require threads and threads::shared
if the environment variable C<PERL5DB_THREADED> is set, to enable proper
threaded debugger control.  C<-dt> can also be used to set this.

Each new thread will be announced and the debugger prompt will always inform
you of each new thread created.  It will also indicate the thread id in which
we are currently running within the prompt like this:

    [tid] DB<$i>

Where C<[tid]> is an integer thread id and C<$i> is the familiar debugger
command prompt.  The prompt will show: C<[0]> when running under threads, but
not actually in a thread.  C<[tid]> is consistent with C<gdb> usage.

While running under threads, when you set or delete a breakpoint (etc.), this
will apply to all threads, not just the currently running one.  When you are
in a currently executing thread, you will stay there until it completes.  With
the current implementation it is not currently possible to hop from one thread
to another.

The C<e> and C<E> commands are currently fairly minimal - see C<h e> and C<h E>.

Note that threading support was built into the debugger as of Perl version
C<5.8.6> and debugger version C<1.2.8>.

=cut

BEGIN {
    # ensure we can share our non-threaded variables or no-op
    if ($ENV{PERL5DB_THREADED}) {
        require threads;
        require threads::shared;
        import threads::shared qw(share);
        $DBGR;
        share(\$DBGR);
        lock($DBGR);
        print "Threads support enabled\n";
    } else {
        *lock = sub(*) {};
        *share = sub(\[$@%]) {};
    }
}

# These variables control the execution of 'dumpvar.pl'.
{
    package dumpvar;
    use vars qw(
    $hashDepth
    $arrayDepth
    $dumpDBFiles
    $dumpPackages
    $quoteHighBit
    $printUndef
    $globPrint
    $usageOnly
    );
}

# used to control die() reporting in diesignal()
{
    package Carp;
    use vars qw($CarpLevel);
}

# without threads, $filename is not defined until DB::DB is called
share($main::{'_<'.$filename}) if defined $filename;

# Command-line + PERLLIB:
# Save the contents of @INC before they are modified elsewhere.
@ini_INC = @INC;

# This was an attempt to clear out the previous values of various
# trapped errors. Apparently it didn't help. XXX More info needed!
# $prevwarn = $prevdie = $prevbus = $prevsegv = ''; # Does not help?!

# We set these variables to safe values. We don't want to blindly turn
# off warnings, because other packages may still want them.
$trace = $signal = $single = 0;    # Uninitialized warning suppression
                                   # (local $^W cannot help - other packages!).

# Default to not exiting when program finishes; print the return
# value when the 'r' command is used to return from a subroutine.
$inhibit_exit = $option{PrintRet} = 1;

use vars qw($trace_to_depth);

# Default to 1E9 so it won't be limited to a certain recursion depth.
$trace_to_depth = 1E9;

=head1 OPTION PROCESSING

The debugger's options are actually spread out over the debugger itself and
C<dumpvar.pl>; some of these are variables to be set, while others are
subs to be called with a value. To try to make this a little easier to
manage, the debugger uses a few data structures to define what options
are legal and how they are to be processed.

First, the C<@options> array defines the I<names> of all the options that
are to be accepted.

=cut

@options = qw(
  CommandSet   HistFile      HistSize
  hashDepth    arrayDepth    dumpDepth
  DumpDBFiles  DumpPackages  DumpReused
  compactDump  veryCompact   quote
  HighBit      undefPrint    globPrint
  PrintRet     UsageOnly     frame
  AutoTrace    TTY           noTTY
  ReadLine     NonStop       LineInfo
  maxTraceLen  recallCommand ShellBang
  pager        tkRunning     ornaments
  signalLevel  warnLevel     dieLevel
  inhibit_exit ImmediateStop bareStringify
  CreateTTY    RemotePort    windowSize
  DollarCaretP
);

@RememberOnROptions = qw(DollarCaretP);

=pod

Second, C<optionVars> lists the variables that each option uses to save its
state.

=cut

use vars qw(%optionVars);

%optionVars = (
    hashDepth     => \$dumpvar::hashDepth,
    arrayDepth    => \$dumpvar::arrayDepth,
    CommandSet    => \$CommandSet,
    DumpDBFiles   => \$dumpvar::dumpDBFiles,
    DumpPackages  => \$dumpvar::dumpPackages,
    DumpReused    => \$dumpvar::dumpReused,
    HighBit       => \$dumpvar::quoteHighBit,
    undefPrint    => \$dumpvar::printUndef,
    globPrint     => \$dumpvar::globPrint,
    UsageOnly     => \$dumpvar::usageOnly,
    CreateTTY     => \$CreateTTY,
    bareStringify => \$dumpvar::bareStringify,
    frame         => \$frame,
    AutoTrace     => \$trace,
    inhibit_exit  => \$inhibit_exit,
    maxTraceLen   => \$maxtrace,
    ImmediateStop => \$ImmediateStop,
    RemotePort    => \$remoteport,
    windowSize    => \$window,
    HistFile      => \$histfile,
    HistSize      => \$histsize,
);

=pod

Third, C<%optionAction> defines the subroutine to be called to process each
option.

=cut

use vars qw(%optionAction);

%optionAction = (
    compactDump   => \&dumpvar::compactDump,
    veryCompact   => \&dumpvar::veryCompact,
    quote         => \&dumpvar::quote,
    TTY           => \&TTY,
    noTTY         => \&noTTY,
    ReadLine      => \&ReadLine,
    NonStop       => \&NonStop,
    LineInfo      => \&LineInfo,
    recallCommand => \&recallCommand,
    ShellBang     => \&shellBang,
    pager         => \&pager,
    signalLevel   => \&signalLevel,
    warnLevel     => \&warnLevel,
    dieLevel      => \&dieLevel,
    tkRunning     => \&tkRunning,
    ornaments     => \&ornaments,
    RemotePort    => \&RemotePort,
    DollarCaretP  => \&DollarCaretP,
);

=pod

Last, the C<%optionRequire> notes modules that must be C<require>d if an
option is used.

=cut

# Note that this list is not complete: several options not listed here
# actually require that dumpvar.pl be loaded for them to work, but are
# not in the table. A subsequent patch will correct this problem; for
# the moment, we're just recommenting, and we are NOT going to change
# function.
use vars qw(%optionRequire);

%optionRequire = (
    compactDump => 'dumpvar.pl',
    veryCompact => 'dumpvar.pl',
    quote       => 'dumpvar.pl',
);

=pod

There are a number of initialization-related variables which can be set
by putting code to set them in a BEGIN block in the C<PERL5DB> environment
variable. These are:

=over 4

=item C<$rl> - readline control XXX needs more explanation

=item C<$warnLevel> - whether or not debugger takes over warning handling

=item C<$dieLevel> - whether or not debugger takes over die handling

=item C<$signalLevel> - whether or not debugger takes over signal handling

=item C<$pre> - preprompt actions (array reference)

=item C<$post> - postprompt actions (array reference)

=item C<$pretype>

=item C<$CreateTTY> - whether or not to create a new TTY for this debugger

=item C<$CommandSet> - which command set to use (defaults to new, documented set)

=back

=cut

# These guys may be defined in $ENV{PERL5DB} :
$rl          = 1     unless defined $rl;
$warnLevel   = 1     unless defined $warnLevel;
$dieLevel    = 1     unless defined $dieLevel;
$signalLevel = 1     unless defined $signalLevel;
$pre         = []    unless defined $pre;
$post        = []    unless defined $post;
$pretype     = []    unless defined $pretype;
$CreateTTY   = 3     unless defined $CreateTTY;
$CommandSet  = '580' unless defined $CommandSet;

share($rl);
share($warnLevel);
share($dieLevel);
share($signalLevel);
share($pre);
share($post);
share($pretype);
share($rl);
share($CreateTTY);
share($CommandSet);

=pod

The default C<die>, C<warn>, and C<signal> handlers are set up.

=cut

warnLevel($warnLevel);
dieLevel($dieLevel);
signalLevel($signalLevel);

=pod

The pager to be used is needed next. We try to get it from the
environment first.  If it's not defined there, we try to find it in
the Perl C<Config.pm>.  If it's not there, we default to C<more>. We
then call the C<pager()> function to save the pager name.

=cut

# This routine makes sure $pager is set up so that '|' can use it.
pager(

    # If PAGER is defined in the environment, use it.
    defined $ENV{PAGER}
    ? $ENV{PAGER}

      # If not, see if Config.pm defines it.
    : eval { require Config }
      && defined $Config::Config{pager}
    ? $Config::Config{pager}

      # If not, fall back to 'more'.
    : 'more'
  )
  unless defined $pager;

=pod

We set up the command to be used to access the man pages, the command
recall character (C<!> unless otherwise defined) and the shell escape
character (C<!> unless otherwise defined). Yes, these do conflict, and
neither works in the debugger at the moment.

=cut

setman();

# Set up defaults for command recall and shell escape (note:
# these currently don't work in linemode debugging).
recallCommand("!") unless defined $prc;
shellBang("!")     unless defined $psh;

=pod

We then set up the gigantic string containing the debugger help.
We also set the limit on the number of arguments we'll display during a
trace.

=cut

sethelp();

# If we didn't get a default for the length of eval/stack trace args,
# set it here.
$maxtrace = 400 unless defined $maxtrace;

=head2 SETTING UP THE DEBUGGER GREETING

The debugger I<greeting> helps to inform the user how many debuggers are
running, and whether the current debugger is the primary or a child.

If we are the primary, we just hang onto our pid so we'll have it when
or if we start a child debugger. If we are a child, we'll set things up
so we'll have a unique greeting and so the parent will give us our own
TTY later.

We save the current contents of the C<PERLDB_PIDS> environment variable
because we mess around with it. We'll also need to hang onto it because
we'll need it if we restart.

Child debuggers make a label out of the current PID structure recorded in
PERLDB_PIDS plus the new PID. They also mark themselves as not having a TTY
yet so the parent will give them one later via C<resetterm()>.

=cut

# Save the current contents of the environment; we're about to
# much with it. We'll need this if we have to restart.
use vars qw($ini_pids);
$ini_pids = $ENV{PERLDB_PIDS};

use vars qw ($pids $term_pid);

if ( defined $ENV{PERLDB_PIDS} ) {

    # We're a child. Make us a label out of the current PID structure
    # recorded in PERLDB_PIDS plus our (new) PID. Mark us as not having
    # a term yet so the parent will give us one later via resetterm().

    my $env_pids = $ENV{PERLDB_PIDS};
    $pids = "[$env_pids]";

    # Unless we are on OpenVMS, all programs under the DCL shell run under
    # the same PID.

    if (($^O eq 'VMS') && ($env_pids =~ /\b$$\b/)) {
        $term_pid         = $$;
    }
    else {
        $ENV{PERLDB_PIDS} .= "->$$";
        $term_pid = -1;
    }

} ## end if (defined $ENV{PERLDB_PIDS...
else {

    # We're the parent PID. Initialize PERLDB_PID in case we end up with a
    # child debugger, and mark us as the parent, so we'll know to set up
    # more TTY's is we have to.
    $ENV{PERLDB_PIDS} = "$$";
    $pids             = "[pid=$$]";
    $term_pid         = $$;
}

use vars qw($pidprompt);
$pidprompt = '';

# Sets up $emacs as a synonym for $slave_editor.
our ($slave_editor);
*emacs = $slave_editor if $slave_editor;    # May be used in afterinit()...

=head2 READING THE RC FILE

The debugger will read a file of initialization options if supplied. If
running interactively, this is C<.perldb>; if not, it's C<perldb.ini>.

=cut

# As noted, this test really doesn't check accurately that the debugger
# is running at a terminal or not.

use vars qw($rcfile);
{
    my $dev_tty = (($^O eq 'VMS') ? 'TT:' : '/dev/tty');
    # this is the wrong metric!
    $rcfile = ((-e $dev_tty) ? ".perldb" : "perldb.ini");
}

=pod

The debugger does a safety test of the file to be read. It must be owned
either by the current user or root, and must only be writable by the owner.

=cut

# This wraps a safety test around "do" to read and evaluate the init file.
#
# This isn't really safe, because there's a race
# between checking and opening.  The solution is to
# open and fstat the handle, but then you have to read and
# eval the contents.  But then the silly thing gets
# your lexical scope, which is unfortunate at best.
sub safe_do {
    my $file = shift;

    # Just exactly what part of the word "CORE::" don't you understand?
    local $SIG{__WARN__};
    local $SIG{__DIE__};

    unless ( is_safe_file($file) ) {
        CORE::warn <<EO_GRIPE;
perldb: Must not source insecure rcfile $file.
        You or the superuser must be the owner, and it must not
        be writable by anyone but its owner.
EO_GRIPE
        return;
    } ## end unless (is_safe_file($file...

    do $file;
    CORE::warn("perldb: couldn't parse $file: $@") if $@;
} ## end sub safe_do

# This is the safety test itself.
#
# Verifies that owner is either real user or superuser and that no
# one but owner may write to it.  This function is of limited use
# when called on a path instead of upon a handle, because there are
# no guarantees that filename (by dirent) whose file (by ino) is
# eventually accessed is the same as the one tested.
# Assumes that the file's existence is not in doubt.
sub is_safe_file {
    my $path = shift;
    stat($path) || return;    # mysteriously vaporized
    my ( $dev, $ino, $mode, $nlink, $uid, $gid ) = stat(_);

    return 0 if $uid != 0 && $uid != $<;
    return 0 if $mode & 022;
    return 1;
} ## end sub is_safe_file

# If the rcfile (whichever one we decided was the right one to read)
# exists, we safely do it.
if ( -f $rcfile ) {
    safe_do("./$rcfile");
}

# If there isn't one here, try the user's home directory.
elsif ( defined $ENV{HOME} && -f "$ENV{HOME}/$rcfile" ) {
    safe_do("$ENV{HOME}/$rcfile");
}

# Else try the login directory.
elsif ( defined $ENV{LOGDIR} && -f "$ENV{LOGDIR}/$rcfile" ) {
    safe_do("$ENV{LOGDIR}/$rcfile");
}

# If the PERLDB_OPTS variable has options in it, parse those out next.
if ( defined $ENV{PERLDB_OPTS} ) {
    parse_options( $ENV{PERLDB_OPTS} );
}

=pod

The last thing we do during initialization is determine which subroutine is
to be used to obtain a new terminal when a new debugger is started. Right now,
the debugger only handles TCP sockets, X11, OS/2, amd Mac OS X
(darwin).

=cut

# Set up the get_fork_TTY subroutine to be aliased to the proper routine.
# Works if you're running an xterm or xterm-like window, or you're on
# OS/2, or on Mac OS X. This may need some expansion.

if (not defined &get_fork_TTY)       # only if no routine exists
{
    if ( defined $remoteport ) {
                                                 # Expect an inetd-like server
        *get_fork_TTY = \&socket_get_fork_TTY;   # to listen to us
    }
    elsif (defined $ENV{TERM}                    # If we know what kind
                                                 # of terminal this is,
        and $ENV{TERM} eq 'xterm'                # and it's an xterm,
        and defined $ENV{DISPLAY}                # and what display it's on,
      )
    {
        *get_fork_TTY = \&xterm_get_fork_TTY;    # use the xterm version
    }
    elsif ( $^O eq 'os2' ) {                     # If this is OS/2,
        *get_fork_TTY = \&os2_get_fork_TTY;      # use the OS/2 version
    }
    elsif ( $^O eq 'darwin'                      # If this is Mac OS X
            and defined $ENV{TERM_PROGRAM}       # and we're running inside
            and $ENV{TERM_PROGRAM}
                eq 'Apple_Terminal'              # Terminal.app
            )
    {
        *get_fork_TTY = \&macosx_get_fork_TTY;   # use the Mac OS X version
    }
} ## end if (not defined &get_fork_TTY...

# untaint $^O, which may have been tainted by the last statement.
# see bug [perl #24674]
$^O =~ m/^(.*)\z/;
$^O = $1;

# Here begin the unreadable code.  It needs fixing.

=head2 RESTART PROCESSING

This section handles the restart command. When the C<R> command is invoked, it
tries to capture all of the state it can into environment variables, and
then sets C<PERLDB_RESTART>. When we start executing again, we check to see
if C<PERLDB_RESTART> is there; if so, we reload all the information that
the R command stuffed into the environment variables.

  PERLDB_RESTART   - flag only, contains no restart data itself.
  PERLDB_HIST      - command history, if it's available
  PERLDB_ON_LOAD   - breakpoints set by the rc file
  PERLDB_POSTPONE  - subs that have been loaded/not executed,
                     and have actions
  PERLDB_VISITED   - files that had breakpoints
  PERLDB_FILE_...  - breakpoints for a file
  PERLDB_OPT       - active options
  PERLDB_INC       - the original @INC
  PERLDB_PRETYPE   - preprompt debugger actions
  PERLDB_PRE       - preprompt Perl code
  PERLDB_POST      - post-prompt Perl code
  PERLDB_TYPEAHEAD - typeahead captured by readline()

We chug through all these variables and plug the values saved in them
back into the appropriate spots in the debugger.

=cut

use vars qw(%postponed_file @typeahead);

our (@hist, @truehist);

sub _restore_shared_globals_after_restart
{
    @hist          = get_list('PERLDB_HIST');
    %break_on_load = get_list("PERLDB_ON_LOAD");
    %postponed     = get_list("PERLDB_POSTPONE");

    share(@hist);
    share(@truehist);
    share(%break_on_load);
    share(%postponed);
}

sub _restore_breakpoints_and_actions {

    my @had_breakpoints = get_list("PERLDB_VISITED");

    for my $file_idx ( 0 .. $#had_breakpoints ) {
        my $filename = $had_breakpoints[$file_idx];
        my %pf = get_list("PERLDB_FILE_$file_idx");
        $postponed_file{ $filename } = \%pf if %pf;
        my @lines = sort {$a <=> $b} keys(%pf);
        my @enabled_statuses = get_list("PERLDB_FILE_ENABLED_$file_idx");
        for my $line_idx (0 .. $#lines) {
            _set_breakpoint_enabled_status(
                $filename,
                $lines[$line_idx],
                ($enabled_statuses[$line_idx] ? 1 : ''),
            );
        }
    }

    return;
}

sub _restore_options_after_restart
{
    my %options_map = get_list("PERLDB_OPT");

    while ( my ( $opt, $val ) = each %options_map ) {
        $val =~ s/[\\\']/\\$1/g;
        parse_options("$opt'$val'");
    }

    return;
}

sub _restore_globals_after_restart
{
    # restore original @INC
    @INC     = get_list("PERLDB_INC");
    @ini_INC = @INC;

    # return pre/postprompt actions and typeahead buffer
    $pretype   = [ get_list("PERLDB_PRETYPE") ];
    $pre       = [ get_list("PERLDB_PRE") ];
    $post      = [ get_list("PERLDB_POST") ];
    @typeahead = get_list( "PERLDB_TYPEAHEAD", @typeahead );

    return;
}


if ( exists $ENV{PERLDB_RESTART} ) {

    # We're restarting, so we don't need the flag that says to restart anymore.
    delete $ENV{PERLDB_RESTART};

    # $restart = 1;
    _restore_shared_globals_after_restart();

    _restore_breakpoints_and_actions();

    # restore options
    _restore_options_after_restart();

    _restore_globals_after_restart();
} ## end if (exists $ENV{PERLDB_RESTART...

=head2 SETTING UP THE TERMINAL

Now, we'll decide how the debugger is going to interact with the user.
If there's no TTY, we set the debugger to run non-stop; there's not going
to be anyone there to enter commands.

=cut

use vars qw($notty $console $tty $LINEINFO);
use vars qw($lineinfo $doccmd);

our ($runnonstop);

# Local autoflush to avoid rt#116769,
# as calling IO::File methods causes an unresolvable loop
# that results in debugger failure.
sub _autoflush {
    my $o = select($_[0]);
    $|++;
    select($o);
}

if ($notty) {
    $runnonstop = 1;
    share($runnonstop);
}

=pod

If there is a TTY, we have to determine who it belongs to before we can
proceed. If this is a slave editor or graphical debugger (denoted by
the first command-line switch being '-emacs'), we shift this off and
set C<$rl> to 0 (XXX ostensibly to do straight reads).

=cut

else {

    # Is Perl being run from a slave editor or graphical debugger?
    # If so, don't use readline, and set $slave_editor = 1.
    if ($slave_editor = ( @main::ARGV && ( $main::ARGV[0] eq '-emacs' ) )) {
        $rl = 0;
        shift(@main::ARGV);
    }

    #require Term::ReadLine;

=pod

We then determine what the console should be on various systems:

=over 4

=item * Cygwin - We use C<stdin> instead of a separate device.

=cut

    if ( $^O eq 'cygwin' ) {

        # /dev/tty is binary. use stdin for textmode
        undef $console;
    }

=item * Unix - use F</dev/tty>.

=cut

    elsif ( -e "/dev/tty" ) {
        $console = "/dev/tty";
    }

=item * Windows or MSDOS - use C<con>.

=cut

    elsif ( $^O eq 'dos' or -e "con" or $^O eq 'MSWin32' ) {
        $console = "con";
    }

=item * VMS - use C<sys$command>.

=cut

    else {

        # everything else is ...
        $console = "sys\$command";
    }

=pod

=back

Several other systems don't use a specific console. We C<undef $console>
for those (Windows using a slave editor/graphical debugger, NetWare, OS/2
with a slave editor).

=cut

    if ( ( $^O eq 'MSWin32' ) and ( $slave_editor or defined $ENV{EMACS} ) ) {

        # /dev/tty is binary. use stdin for textmode
        $console = undef;
    }

    if ( $^O eq 'NetWare' ) {

        # /dev/tty is binary. use stdin for textmode
        $console = undef;
    }

    # In OS/2, we need to use STDIN to get textmode too, even though
    # it pretty much looks like Unix otherwise.
    if ( defined $ENV{OS2_SHELL} and ( $slave_editor or $ENV{WINDOWID} ) )
    {    # In OS/2
        $console = undef;
    }

=pod

If there is a TTY hanging around from a parent, we use that as the console.

=cut

    $console = $tty if defined $tty;

=head2 SOCKET HANDLING

The debugger is capable of opening a socket and carrying out a debugging
session over the socket.

If C<RemotePort> was defined in the options, the debugger assumes that it
should try to start a debugging session on that port. It builds the socket
and then tries to connect the input and output filehandles to it.

=cut

    # Handle socket stuff.

    if ( defined $remoteport ) {

        # If RemotePort was defined in the options, connect input and output
        # to the socket.
        $IN = $OUT = connect_remoteport();
    } ## end if (defined $remoteport)

=pod

If no C<RemotePort> was defined, and we want to create a TTY on startup,
this is probably a situation where multiple debuggers are running (for example,
a backticked command that starts up another debugger). We create a new IN and
OUT filehandle, and do the necessary mojo to create a new TTY if we know how
and if we can.

=cut

    # Non-socket.
    else {

        # Two debuggers running (probably a system or a backtick that invokes
        # the debugger itself under the running one). create a new IN and OUT
        # filehandle, and do the necessary mojo to create a new tty if we
        # know how, and we can.
        create_IN_OUT(4) if $CreateTTY & 4;
        if ($console) {

            # If we have a console, check to see if there are separate ins and
            # outs to open. (They are assumed identical if not.)

            my ( $i, $o ) = split /,/, $console;
            $o = $i unless defined $o;

            # read/write on in, or just read, or read on STDIN.
            open( IN,      "+<$i" )
              || open( IN, "<$i" )
              || open( IN, "<&STDIN" );

            # read/write/create/clobber out, or write/create/clobber out,
            # or merge with STDERR, or merge with STDOUT.
                 open( OUT, "+>$o" )
              || open( OUT, ">$o" )
              || open( OUT, ">&STDERR" )
              || open( OUT, ">&STDOUT" );    # so we don't dongle stdout

        } ## end if ($console)
        elsif ( not defined $console ) {

            # No console. Open STDIN.
            open( IN, "<&STDIN" );

            # merge with STDERR, or with STDOUT.
            open( OUT,      ">&STDERR" )
              || open( OUT, ">&STDOUT" );    # so we don't dongle stdout
            $console = 'STDIN/OUT';
        } ## end elsif (not defined $console)

        # Keep copies of the filehandles so that when the pager runs, it
        # can close standard input without clobbering ours.
        if ($console or (not defined($console))) {
            $IN = \*IN;
            $OUT = \*OUT;
        }
    } ## end elsif (from if(defined $remoteport))

    # Unbuffer DB::OUT. We need to see responses right away.
    _autoflush($OUT);

    # Line info goes to debugger output unless pointed elsewhere.
    # Pointing elsewhere makes it possible for slave editors to
    # keep track of file and position. We have both a filehandle
    # and a I/O description to keep track of.
    $LINEINFO = $OUT     unless defined $LINEINFO;
    $lineinfo = $console unless defined $lineinfo;
    # share($LINEINFO); # <- unable to share globs
    share($lineinfo);   #

=pod

To finish initialization, we show the debugger greeting,
and then call the C<afterinit()> subroutine if there is one.

=cut

    # Show the debugger greeting.
    $header =~ s/.Header: ([^,]+),v(\s+\S+\s+\S+).*$/$1$2/;
    unless ($runnonstop) {
        local $\ = '';
        local $, = '';
        if ( $term_pid eq '-1' ) {
            print $OUT "\nDaughter DB session started...\n";
        }
        else {
            print $OUT "\nLoading DB routines from $header\n";
            print $OUT (
                "Editor support ",
                $slave_editor ? "enabled" : "available", ".\n"
            );
            print $OUT
"\nEnter h or 'h h' for help, or '$doccmd perldebug' for more help.\n\n";
        } ## end else [ if ($term_pid eq '-1')
    } ## end unless ($runnonstop)
} ## end else [ if ($notty)

# XXX This looks like a bug to me.
# Why copy to @ARGS and then futz with @args?
@ARGS = @ARGV;
# for (@args) {
    # Make sure backslashes before single quotes are stripped out, and
    # keep args unless they are numeric (XXX why?)
    # s/\'/\\\'/g;                      # removed while not justified understandably
    # s/(.*)/'$1'/ unless /^-?[\d.]+$/; # ditto
# }

# If there was an afterinit() sub defined, call it. It will get
# executed in our scope, so it can fiddle with debugger globals.
if ( defined &afterinit ) {    # May be defined in $rcfile
    afterinit();
}

# Inform us about "Stack dump during die enabled ..." in dieLevel().
use vars qw($I_m_init);

$I_m_init = 1;

############################################################ Subroutines

=head1 SUBROUTINES

=head2 DB

This gigantic subroutine is the heart of the debugger. Called before every
statement, its job is to determine if a breakpoint has been reached, and
stop if so; read commands from the user, parse them, and execute
them, and then send execution off to the next statement.

Note that the order in which the commands are processed is very important;
some commands earlier in the loop will actually alter the C<$cmd> variable
to create other commands to be executed later. This is all highly I<optimized>
but can be confusing. Check the comments for each C<$cmd ... && do {}> to
see what's happening in any given command.

=cut

# $cmd cannot be an our() variable unfortunately (possible perl bug?).

use vars qw(
    $action
    $cmd
    $file
    $filename_ini
    $finished
    %had_breakpoints
    $level
    $max
    $package
    $try
);

our (
    %alias,
    $doret,
    $end,
    $fall_off_end,
    $incr,
    $laststep,
    $rc,
    $sh,
    $stack_depth,
    @stack,
    @to_watch,
    @old_watch,
);

sub _DB__determine_if_we_should_break
{
    # if we have something here, see if we should break.
    # $stop is lexical and local to this block - $action on the other hand
    # is global.
    my $stop;

    if ( $dbline{$line}
        && _is_breakpoint_enabled($filename, $line)
        && (( $stop, $action ) = split( /\0/, $dbline{$line} ) ) )
    {

        # Stop if the stop criterion says to just stop.
        if ( $stop eq '1' ) {
            $signal |= 1;
        }

        # It's a conditional stop; eval it in the user's context and
        # see if we should stop. If so, remove the one-time sigil.
        elsif ($stop) {
            $evalarg = "\$DB::signal |= 1 if do {$stop}";
            # The &-call is here to ascertain the mutability of @_.
            &DB::eval;
            # If the breakpoint is temporary, then delete its enabled status.
            if ($dbline{$line} =~ s/;9($|\0)/$1/) {
                _cancel_breakpoint_temp_enabled_status($filename, $line);
            }
        }
    } ## end if ($dbline{$line} && ...
}

sub _DB__is_finished {
    if ($finished and $level <= 1) {
        end_report();
        return 1;
    }
    else {
        return;
    }
}

sub _DB__read_next_cmd
{
    my ($tid) = @_;

    # We have a terminal, or can get one ...
    if (!$term) {
        setterm();
    }

    # ... and it belongs to this PID or we get one for this PID ...
    if ($term_pid != $$) {
        resetterm(1);
    }

    # ... and we got a line of command input ...
    $cmd = DB::readline(
        "$pidprompt $tid DB"
        . ( '<' x $level )
        . ( $#hist + 1 )
        . ( '>' x $level ) . " "
    );

    return defined($cmd);
}

sub _DB__trim_command_and_return_first_component {
    my ($obj) = @_;

    $cmd =~ s/\A\s+//s;    # trim annoying leading whitespace
    $cmd =~ s/\s+\z//s;    # trim annoying trailing whitespace

    my ($verb, $args) = $cmd =~ m{\A(\S*)\s*(.*)}s;

    $obj->cmd_verb($verb);
    $obj->cmd_args($args);

    return;
}

sub _DB__handle_f_command {
    my ($obj) = @_;

    if ($file = $obj->cmd_args) {
        # help for no arguments (old-style was return from sub).
        if ( !$file ) {
            print $OUT
            "The old f command is now the r command.\n";    # hint
            print $OUT "The new f command switches filenames.\n";
            next CMD;
        } ## end if (!$file)

        # if not in magic file list, try a close match.
        if ( !defined $main::{ '_<' . $file } ) {
            if ( ($try) = grep( m#^_<.*$file#, keys %main:: ) ) {
                {
                    $try = substr( $try, 2 );
                    print $OUT "Choosing $try matching '$file':\n";
                    $file = $try;
                }
            } ## end if (($try) = grep(m#^_<.*$file#...
        } ## end if (!defined $main::{ ...

        # If not successfully switched now, we failed.
        if ( !defined $main::{ '_<' . $file } ) {
            print $OUT "No file matching '$file' is loaded.\n";
            next CMD;
        }

        # We switched, so switch the debugger internals around.
        elsif ( $file ne $filename ) {
            *dbline   = $main::{ '_<' . $file };
            $max      = $#dbline;
            $filename = $file;
            $start    = 1;
            $cmd      = "l";
        } ## end elsif ($file ne $filename)

        # We didn't switch; say we didn't.
        else {
            print $OUT "Already in $file.\n";
            next CMD;
        }
    }

    return;
}

sub _DB__handle_dot_command {
    my ($obj) = @_;

    # . command.
    if ($obj->_is_full('.')) {
        $incr = -1;    # stay at current line

        # Reset everything to the old location.
        $start    = $line;
        $filename = $filename_ini;
        *dbline   = $main::{ '_<' . $filename };
        $max      = $#dbline;

        # Now where are we?
        print_lineinfo($obj->position());
        next CMD;
    }

    return;
}

sub _DB__handle_y_command {
    my ($obj) = @_;

    if (my ($match_level, $match_vars)
        = $obj->cmd_args =~ /\A(?:(\d*)\s*(.*))?\z/) {

        # See if we've got the necessary support.
        if (!eval {
            local @INC = @INC;
            pop @INC if $INC[-1] eq '.';
            require PadWalker; PadWalker->VERSION(0.08) }) {
            my $Err = $@;
            _db_warn(
                $Err =~ /locate/
                ? "PadWalker module not found - please install\n"
                : $Err
            );
            next CMD;
        }

        # Load up dumpvar if we don't have it. If we can, that is.
        do 'dumpvar.pl' || die $@ unless defined &main::dumpvar;
        defined &main::dumpvar
            or print $OUT "dumpvar.pl not available.\n"
            and next CMD;

        # Got all the modules we need. Find them and print them.
        my @vars = split( ' ', $match_vars || '' );

        # Find the pad.
        my $h = eval { PadWalker::peek_my( ( $match_level || 0 ) + 1 ) };

        # Oops. Can't find it.
        if (my $Err = $@) {
            $Err =~ s/ at .*//;
            _db_warn($Err);
            next CMD;
        }

        # Show the desired vars with dumplex().
        my $savout = select($OUT);

        # Have dumplex dump the lexicals.
        foreach my $key (sort keys %$h) {
            dumpvar::dumplex( $key, $h->{$key},
                defined $option{dumpDepth} ? $option{dumpDepth} : -1,
                @vars );
        }
        select($savout);
        next CMD;
    }
}

sub _DB__handle_c_command {
    my ($obj) = @_;

    my $i = $obj->cmd_args;

    if ($i =~ m#\A[\w:]*\z#) {

        # Hey, show's over. The debugged program finished
        # executing already.
        next CMD if _DB__is_finished();

        # Capture the place to put a one-time break.
        $subname = $i;

        #  Probably not needed, since we finish an interactive
        #  sub-session anyway...
        # local $filename = $filename;
        # local *dbline = *dbline; # XXX Would this work?!
        #
        # The above question wonders if localizing the alias
        # to the magic array works or not. Since it's commented
        # out, we'll just leave that to speculation for now.

        # If the "subname" isn't all digits, we'll assume it
        # is a subroutine name, and try to find it.
        if ( $subname =~ /\D/ ) {    # subroutine name
            # Qualify it to the current package unless it's
            # already qualified.
            $subname = $package . "::" . $subname
            unless $subname =~ /::/;

            # find_sub will return "file:line_number" corresponding
            # to where the subroutine is defined; we call find_sub,
            # break up the return value, and assign it in one
            # operation.
            ( $file, $i ) = ( find_sub($subname) =~ /^(.*):(.*)$/ );

            # Force the line number to be numeric.
            $i = $i + 0;

            # If we got a line number, we found the sub.
            if ($i) {

                # Switch all the debugger's internals around so
                # we're actually working with that file.
                $filename = $file;
                *dbline   = $main::{ '_<' . $filename };

                # Mark that there's a breakpoint in this file.
                $had_breakpoints{$filename} |= 1;

                # Scan forward to the first executable line
                # after the 'sub whatever' line.
                $max = $#dbline;
                my $_line_num = $i;
                while ($dbline[$_line_num] == 0 && $_line_num< $max)
                {
                    $_line_num++;
                }
                $i = $_line_num;
            } ## end if ($i)

            # We didn't find a sub by that name.
            else {
                print $OUT "Subroutine $subname not found.\n";
                next CMD;
            }
        } ## end if ($subname =~ /\D/)

        # At this point, either the subname was all digits (an
        # absolute line-break request) or we've scanned through
        # the code following the definition of the sub, looking
        # for an executable, which we may or may not have found.
        #
        # If $i (which we set $subname from) is non-zero, we
        # got a request to break at some line somewhere. On
        # one hand, if there wasn't any real subroutine name
        # involved, this will be a request to break in the current
        # file at the specified line, so we have to check to make
        # sure that the line specified really is breakable.
        #
        # On the other hand, if there was a subname supplied, the
        # preceding block has moved us to the proper file and
        # location within that file, and then scanned forward
        # looking for the next executable line. We have to make
        # sure that one was found.
        #
        # On the gripping hand, we can't do anything unless the
        # current value of $i points to a valid breakable line.
        # Check that.
        if ($i) {

            # Breakable?
            if ( $dbline[$i] == 0 ) {
                print $OUT "Line $i not breakable.\n";
                next CMD;
            }

            # Yes. Set up the one-time-break sigil.
            $dbline{$i} =~ s/($|\0)/;9$1/;  # add one-time-only b.p.
            _enable_breakpoint_temp_enabled_status($filename, $i);
        } ## end if ($i)

        # Turn off stack tracing from here up.
        for my $j (0 .. $stack_depth) {
            $stack[ $j ] &= ~1;
        }
        last CMD;
    }

    return;
}

sub _DB__handle_forward_slash_command {
    my ($obj) = @_;

    # The pattern as a string.
    use vars qw($inpat);

    if (($inpat) = $cmd =~ m#\A/(.*)\z#) {

        # Remove the final slash.
        $inpat =~ s:([^\\])/$:$1:;

        # If the pattern isn't null ...
        if ( $inpat ne "" ) {

            # Turn off warn and die processing for a bit.
            local $SIG{__DIE__};
            local $SIG{__WARN__};

            # Create the pattern.
            eval 'no strict q/vars/; $inpat =~ m' . "\a$inpat\a";
            if ( $@ ne "" ) {

                # Oops. Bad pattern. No biscuit.
                # Print the eval error and go back for more
                # commands.
                print {$OUT} "$@";
                next CMD;
            }
            $obj->pat($inpat);
        } ## end if ($inpat ne "")

        # Set up to stop on wrap-around.
        $end = $start;

        # Don't move off the current line.
        $incr = -1;

        my $pat = $obj->pat;

        # Done in eval so nothing breaks if the pattern
        # does something weird.
        eval
        {
            no strict q/vars/;
            for (;;) {
                # Move ahead one line.
                ++$start;

                # Wrap if we pass the last line.
                if ($start > $max) {
                    $start = 1;
                }

                # Stop if we have gotten back to this line again,
                last if ($start == $end);

                # A hit! (Note, though, that we are doing
                # case-insensitive matching. Maybe a qr//
                # expression would be better, so the user could
                # do case-sensitive matching if desired.
                if ($dbline[$start] =~ m/$pat/i) {
                    if ($slave_editor) {
                        # Handle proper escaping in the slave.
                        print {$OUT} "\032\032$filename:$start:0\n";
                    }
                    else {
                        # Just print the line normally.
                        print {$OUT} "$start:\t",$dbline[$start],"\n";
                    }
                    # And quit since we found something.
                    last;
                }
            }
        };

        if ($@) {
            warn $@;
        }

        # If we wrapped, there never was a match.
        if ( $start == $end ) {
            print {$OUT} "/$pat/: not found\n";
        }
        next CMD;
    }

    return;
}

sub _DB__handle_question_mark_command {
    my ($obj) = @_;

    # ? - backward pattern search.
    if (my ($inpat) = $cmd =~ m#\A\?(.*)\z#) {

        # Get the pattern, remove trailing question mark.
        $inpat =~ s:([^\\])\?$:$1:;

        # If we've got one ...
        if ( $inpat ne "" ) {

            # Turn off die & warn handlers.
            local $SIG{__DIE__};
            local $SIG{__WARN__};
            eval '$inpat =~ m' . "\a$inpat\a";

            if ( $@ ne "" ) {

                # Ouch. Not good. Print the error.
                print $OUT $@;
                next CMD;
            }
            $obj->pat($inpat);
        } ## end if ($inpat ne "")

        # Where we are now is where to stop after wraparound.
        $end = $start;

        # Don't move away from this line.
        $incr = -1;

        my $pat = $obj->pat;
        # Search inside the eval to prevent pattern badness
        # from killing us.
        eval {
            no strict q/vars/;
            for (;;) {
                # Back up a line.
                --$start;

                # Wrap if we pass the first line.

                $start = $max if ($start <= 0);

                # Quit if we get back where we started,
                last if ($start == $end);

                # Match?
                if ($dbline[$start] =~ m/$pat/i) {
                    if ($slave_editor) {
                        # Yep, follow slave editor requirements.
                        print $OUT "\032\032$filename:$start:0\n";
                    }
                    else {
                        # Yep, just print normally.
                        print $OUT "$start:\t",$dbline[$start],"\n";
                    }

                    # Found, so done.
                    last;
                }
            }
        };

        # Say we failed if the loop never found anything,
        if ( $start == $end ) {
            print {$OUT} "?$pat?: not found\n";
        }
        next CMD;
    }

    return;
}

sub _DB__handle_restart_and_rerun_commands {
    my ($obj) = @_;

    my $cmd_cmd = $obj->cmd_verb;
    my $cmd_params = $obj->cmd_args;
    # R - restart execution.
    # rerun - controlled restart execution.
    if ($cmd_cmd eq 'rerun' or $cmd_params eq '') {
        my @args = ($cmd_cmd eq 'R' ? restart() : rerun($cmd_params));

        # Close all non-system fds for a clean restart.  A more
        # correct method would be to close all fds that were not
        # open when the process started, but this seems to be
        # hard.  See "debugger 'R'estart and open database
        # connections" on p5p.

        my $max_fd = 1024; # default if POSIX can't be loaded
        if (eval { require POSIX }) {
            eval { $max_fd = POSIX::sysconf(POSIX::_SC_OPEN_MAX()) };
        }

        if (defined $max_fd) {
            foreach ($^F+1 .. $max_fd-1) {
                next unless open FD_TO_CLOSE, "<&=$_";
                close(FD_TO_CLOSE);
            }
        }

        # And run Perl again.  We use exec() to keep the
        # PID stable (and that way $ini_pids is still valid).
        exec(@args) or print {$OUT} "exec failed: $!\n";

        last CMD;
    }

    return;
}

sub _DB__handle_run_command_in_pager_command {
    my ($obj) = @_;

    if ($cmd =~ m#\A\|\|?\s*[^|]#) {
        if ( $pager =~ /^\|/ ) {

            # Default pager is into a pipe. Redirect I/O.
            open( SAVEOUT, ">&STDOUT" )
            || _db_warn("Can't save STDOUT");
            open( STDOUT, ">&OUT" )
            || _db_warn("Can't redirect STDOUT");
        } ## end if ($pager =~ /^\|/)
        else {

            # Not into a pipe. STDOUT is safe.
            open( SAVEOUT, ">&OUT" ) || _db_warn("Can't save DB::OUT");
        }

        # Fix up environment to record we have less if so.
        fix_less();

        unless ( $obj->piped(scalar ( open( OUT, $pager ) ) ) ) {

            # Couldn't open pipe to pager.
            _db_warn("Can't pipe output to '$pager'");
            if ( $pager =~ /^\|/ ) {

                # Redirect I/O back again.
                open( OUT, ">&STDOUT" )    # XXX: lost message
                || _db_warn("Can't restore DB::OUT");
                open( STDOUT, ">&SAVEOUT" )
                || _db_warn("Can't restore STDOUT");
                close(SAVEOUT);
            } ## end if ($pager =~ /^\|/)
            else {

                # Redirect I/O. STDOUT already safe.
                open( OUT, ">&STDOUT" )    # XXX: lost message
                || _db_warn("Can't restore DB::OUT");
            }
            next CMD;
        } ## end unless ($piped = open(OUT,...

        # Set up broken-pipe handler if necessary.
        $SIG{PIPE} = \&DB::catch
        if $pager =~ /^\|/
        && ( "" eq $SIG{PIPE} || "DEFAULT" eq $SIG{PIPE} );

        _autoflush(\*OUT);
        # Save current filehandle, and put it back.
        $obj->selected(scalar( select(OUT) ));
        # Don't put it back if pager was a pipe.
        if ($cmd !~ /\A\|\|/)
        {
            select($obj->selected());
            $obj->selected("");
        }

        # Trim off the pipe symbols and run the command now.
        $cmd =~ s#\A\|+\s*##;
        redo PIPE;
    }

    return;
}

sub _DB__handle_m_command {
    my ($obj) = @_;

    if ($cmd =~ s#\Am\s+([\w:]+)\s*\z# #) {
        methods($1);
        next CMD;
    }

    # m expr - set up DB::eval to do the work
    if ($cmd =~ s#\Am\b# #) {    # Rest gets done by DB::eval()
        $onetimeDump = 'methods';   #  method output gets used there
    }

    return;
}

sub _DB__at_end_of_every_command {
    my ($obj) = @_;

    # At the end of every command:
    if ($obj->piped) {

        # Unhook the pipe mechanism now.
        if ( $pager =~ /^\|/ ) {

            # No error from the child.
            $? = 0;

            # we cannot warn here: the handle is missing --tchrist
            close(OUT) || print SAVEOUT "\nCan't close DB::OUT\n";

            # most of the $? crud was coping with broken cshisms
            # $? is explicitly set to 0, so this never runs.
            if ($?) {
                print SAVEOUT "Pager '$pager' failed: ";
                if ( $? == -1 ) {
                    print SAVEOUT "shell returned -1\n";
                }
                elsif ( $? >> 8 ) {
                    print SAVEOUT ( $? & 127 )
                    ? " (SIG#" . ( $? & 127 ) . ")"
                    : "", ( $? & 128 ) ? " -- core dumped" : "", "\n";
                }
                else {
                    print SAVEOUT "status ", ( $? >> 8 ), "\n";
                }
            } ## end if ($?)

            # Reopen filehandle for our output (if we can) and
            # restore STDOUT (if we can).
            open( OUT, ">&STDOUT" ) || _db_warn("Can't restore DB::OUT");
            open( STDOUT, ">&SAVEOUT" )
            || _db_warn("Can't restore STDOUT");

            # Turn off pipe exception handler if necessary.
            $SIG{PIPE} = "DEFAULT" if $SIG{PIPE} eq \&DB::catch;

            # Will stop ignoring SIGPIPE if done like nohup(1)
            # does SIGINT but Perl doesn't give us a choice.
        } ## end if ($pager =~ /^\|/)
        else {

            # Non-piped "pager". Just restore STDOUT.
            open( OUT, ">&SAVEOUT" ) || _db_warn("Can't restore DB::OUT");
        }

        # Let Readline know about the new filehandles.
        reset_IN_OUT( \*IN, \*OUT );

        # Close filehandle pager was using, restore the normal one
        # if necessary,
        close(SAVEOUT);

        if ($obj->selected() ne "") {
            select($obj->selected);
            $obj->selected("");
        }

        # No pipes now.
        $obj->piped("");
    } ## end if ($piped)

    return;
}

sub _DB__handle_watch_expressions
{
    my $self = shift;

    if ( $DB::trace & 2 ) {
        for my $n (0 .. $#DB::to_watch) {
            $DB::evalarg = $DB::to_watch[$n];
            local $DB::onetimeDump;    # Tell DB::eval() to not output results

            # Fix context DB::eval() wants to return an array, but
            # we need a scalar here.
            my ($val) = join( "', '", DB::eval(@_) );
            $val = ( ( defined $val ) ? "'$val'" : 'undef' );

            # Did it change?
            if ( $val ne $DB::old_watch[$n] ) {

                # Yep! Show the difference, and fake an interrupt.
                $DB::signal = 1;
                print {$DB::OUT} <<EOP;
Watchpoint $n:\t$DB::to_watch[$n] changed:
    old value:\t$DB::old_watch[$n]
    new value:\t$val
EOP
                $DB::old_watch[$n] = $val;
            } ## end if ($val ne $old_watch...
        } ## end for my $n (0 ..
    } ## end if ($trace & 2)

    return;
}

# 't' is type.
# 'm' is method.
# 'v' is the value (i.e: method name or subroutine ref).
# 's' is subroutine.
my %cmd_lookup =
(
    '-' => { t => 'm', v => '_handle_dash_command', },
    '.' => { t => 's', v => \&_DB__handle_dot_command, },
    '=' => { t => 'm', v => '_handle_equal_sign_command', },
    'H' => { t => 'm', v => '_handle_H_command', },
    'S' => { t => 'm', v => '_handle_S_command', },
    'T' => { t => 'm', v => '_handle_T_command', },
    'W' => { t => 'm', v => '_handle_W_command', },
    'c' => { t => 's', v => \&_DB__handle_c_command, },
    'f' => { t => 's', v => \&_DB__handle_f_command, },
    'm' => { t => 's', v => \&_DB__handle_m_command, },
    'n' => { t => 'm', v => '_handle_n_command', },
    'p' => { t => 'm', v => '_handle_p_command', },
    'q' => { t => 'm', v => '_handle_q_command', },
    'r' => { t => 'm', v => '_handle_r_command', },
    's' => { t => 'm', v => '_handle_s_command', },
    'save' => { t => 'm', v => '_handle_save_command', },
    'source' => { t => 'm', v => '_handle_source_command', },
    't' => { t => 'm', v => '_handle_t_command', },
    'w' => { t => 'm', v => '_handle_w_command', },
    'x' => { t => 'm', v => '_handle_x_command', },
    'y' => { t => 's', v => \&_DB__handle_y_command, },
    (map { $_ => { t => 'm', v => '_handle_V_command_and_X_command', }, }
        ('X', 'V')),
    (map { $_ => { t => 'm', v => '_handle_enable_disable_commands', }, }
        qw(enable disable)),
    (map { $_ =>
        { t => 's', v => \&_DB__handle_restart_and_rerun_commands, },
        } qw(R rerun)),
    (map { $_ => {t => 'm', v => '_handle_cmd_wrapper_commands' }, }
        qw(a A b B e E h i l L M o O v w W)),
);

sub DB {

    # lock the debugger and get the thread id for the prompt
    lock($DBGR);
    my $tid;
    my $position;
    my ($prefix, $after, $infix);
    my $pat;
    my $explicit_stop;
    my $piped;
    my $selected;

    if ($ENV{PERL5DB_THREADED}) {
        $tid = eval { "[".threads->tid."]" };
    }

    my $cmd_verb;
    my $cmd_args;

    my $obj = DB::Obj->new(
        {
            position => \$position,
            prefix => \$prefix,
            after => \$after,
            explicit_stop => \$explicit_stop,
            infix => \$infix,
            cmd_args => \$cmd_args,
            cmd_verb => \$cmd_verb,
            pat => \$pat,
            piped => \$piped,
            selected => \$selected,
        },
    );

    $obj->_DB_on_init__initialize_globals(@_);

    # Preserve current values of $@, $!, $^E, $,, $/, $\, $^W.
    # The code being debugged may have altered them.
    DB::save();

    # Since DB::DB gets called after every line, we can use caller() to
    # figure out where we last were executing. Sneaky, eh? This works because
    # caller is returning all the extra information when called from the
    # debugger.
    local ( $package, $filename, $line ) = caller;
    $filename_ini = $filename;

    # set up the context for DB::eval, so it can properly execute
    # code on behalf of the user. We add the package in so that the
    # code is eval'ed in the proper package (not in the debugger!).
    local $usercontext = _calc_usercontext($package);

    # Create an alias to the active file magical array to simplify
    # the code here.
    local (*dbline) = $main::{ '_<' . $filename };

    # Last line in the program.
    $max = $#dbline;

    # The &-call is here to ascertain the mutability of @_.
    &_DB__determine_if_we_should_break;

    # Preserve the current stop-or-not, and see if any of the W
    # (watch expressions) has changed.
    my $was_signal = $signal;

    # If we have any watch expressions ...
    _DB__handle_watch_expressions($obj);

=head2 C<watchfunction()>

C<watchfunction()> is a function that can be defined by the user; it is a
function which will be run on each entry to C<DB::DB>; it gets the
current package, filename, and line as its parameters.

The watchfunction can do anything it likes; it is executing in the
debugger's context, so it has access to all of the debugger's internal
data structures and functions.

C<watchfunction()> can control the debugger's actions. Any of the following
will cause the debugger to return control to the user's program after
C<watchfunction()> executes:

=over 4

=item *

Returning a false value from the C<watchfunction()> itself.

=item *

Altering C<$single> to a false value.

=item *

Altering C<$signal> to a false value.

=item *

Turning off the C<4> bit in C<$trace> (this also disables the
check for C<watchfunction()>. This can be done with

    $trace &= ~4;

=back

=cut

    # If there's a user-defined DB::watchfunction, call it with the
    # current package, filename, and line. The function executes in
    # the DB:: package.
    if ( $trace & 4 ) {    # User-installed watch
        return
          if watchfunction( $package, $filename, $line )
          and not $single
          and not $was_signal
          and not( $trace & ~4 );
    } ## end if ($trace & 4)

    # Pick up any alteration to $signal in the watchfunction, and
    # turn off the signal now.
    $was_signal = $signal;
    $signal     = 0;

=head2 GETTING READY TO EXECUTE COMMANDS

The debugger decides to take control if single-step mode is on, the
C<t> command was entered, or the user generated a signal. If the program
has fallen off the end, we set things up so that entering further commands
won't cause trouble, and we say that the program is over.

=cut

    # Make sure that we always print if asked for explicitly regardless
    # of $trace_to_depth .
    $explicit_stop = ($single || $was_signal);

    # Check to see if we should grab control ($single true,
    # trace set appropriately, or we got a signal).
    if ( $explicit_stop || ( $trace & 1 ) ) {
        $obj->_DB__grab_control(@_);
    } ## end if ($single || ($trace...

=pod

If there's an action to be executed for the line we stopped at, execute it.
If there are any preprompt actions, execute those as well.

=cut

    # If there's an action, do it now.
    if ($action) {
        $evalarg = $action;
        # The &-call is here to ascertain the mutability of @_.
        &DB::eval;
    }

    # Are we nested another level (e.g., did we evaluate a function
    # that had a breakpoint in it at the debugger prompt)?
    if ( $single || $was_signal ) {

        # Yes, go down a level.
        local $level = $level + 1;

        # Do any pre-prompt actions.
        foreach $evalarg (@$pre) {
            # The &-call is here to ascertain the mutability of @_.
            &DB::eval;
        }

        # Complain about too much recursion if we passed the limit.
        if ($single & 4) {
            print $OUT $stack_depth . " levels deep in subroutine calls!\n";
        }

        # The line we're currently on. Set $incr to -1 to stay here
        # until we get a command that tells us to advance.
        $start = $line;
        $incr  = -1;      # for backward motion.

        # Tack preprompt debugger actions ahead of any actual input.
        @typeahead = ( @$pretype, @typeahead );

=head2 WHERE ARE WE?

XXX Relocate this section?

The debugger normally shows the line corresponding to the current line of
execution. Sometimes, though, we want to see the next line, or to move elsewhere
in the file. This is done via the C<$incr>, C<$start>, and C<$max> variables.

C<$incr> controls by how many lines the I<current> line should move forward
after a command is executed. If set to -1, this indicates that the I<current>
line shouldn't change.

C<$start> is the I<current> line. It is used for things like knowing where to
move forwards or backwards from when doing an C<L> or C<-> command.

C<$max> tells the debugger where the last line of the current file is. It's
used to terminate loops most often.

=head2 THE COMMAND LOOP

Most of C<DB::DB> is actually a command parsing and dispatch loop. It comes
in two parts:

=over 4

=item *

The outer part of the loop, starting at the C<CMD> label. This loop
reads a command and then executes it.

=item *

The inner part of the loop, starting at the C<PIPE> label. This part
is wholly contained inside the C<CMD> block and only executes a command.
Used to handle commands running inside a pager.

=back

So why have two labels to restart the loop? Because sometimes, it's easier to
have a command I<generate> another command and then re-execute the loop to do
the new command. This is faster, but perhaps a bit more convoluted.

=cut

        # The big command dispatch loop. It keeps running until the
        # user yields up control again.
        #
        # If we have a terminal for input, and we get something back
        # from readline(), keep on processing.

      CMD:
        while (_DB__read_next_cmd($tid))
        {

            share($cmd);
            # ... try to execute the input as debugger commands.

            # Don't stop running.
            $single = 0;

            # No signal is active.
            $signal = 0;

            # Handle continued commands (ending with \):
            if ($cmd =~ s/\\\z/\n/) {
                $cmd .= DB::readline("  cont: ");
                redo CMD;
            }

=head4 The null command

A newline entered by itself means I<re-execute the last command>. We grab the
command out of C<$laststep> (where it was recorded previously), and copy it
back into C<$cmd> to be executed below. If there wasn't any previous command,
we'll do nothing below (no command will match). If there was, we also save it
in the command history and fall through to allow the command parsing to pick
it up.

=cut

            # Empty input means repeat the last command.
            if ($cmd eq '') {
                $cmd = $laststep;
            }
            chomp($cmd);    # get rid of the annoying extra newline
            if (length($cmd) >= 2) {
                push( @hist, $cmd );
            }
            push( @truehist, $cmd );
            share(@hist);
            share(@truehist);

            # This is a restart point for commands that didn't arrive
            # via direct user input. It allows us to 'redo PIPE' to
            # re-execute command processing without reading a new command.
          PIPE: {
                _DB__trim_command_and_return_first_component($obj);

=head3 COMMAND ALIASES

The debugger can create aliases for commands (these are stored in the
C<%alias> hash). Before a command is executed, the command loop looks it up
in the alias hash and substitutes the contents of the alias for the command,
completely replacing it.

=cut

                # See if there's an alias for the command, and set it up if so.
                if ( $alias{$cmd_verb} ) {

                    # Squelch signal handling; we want to keep control here
                    # if something goes loco during the alias eval.
                    local $SIG{__DIE__};
                    local $SIG{__WARN__};

                    # This is a command, so we eval it in the DEBUGGER's
                    # scope! Otherwise, we can't see the special debugger
                    # variables, or get to the debugger's subs. (Well, we
                    # _could_, but why make it even more complicated?)
                    eval "\$cmd =~ $alias{$cmd_verb}";
                    if ($@) {
                        local $\ = '';
                        print $OUT "Couldn't evaluate '$cmd_verb' alias: $@";
                        next CMD;
                    }
                    _DB__trim_command_and_return_first_component($obj);
                } ## end if ($alias{$cmd_verb})

=head3 MAIN-LINE COMMANDS

All of these commands work up to and after the program being debugged has
terminated.

=head4 C<q> - quit

Quit the debugger. This entails setting the C<$fall_off_end> flag, so we don't
try to execute further, cleaning any restart-related stuff out of the
environment, and executing with the last value of C<$?>.

=cut

                # All of these commands were remapped in perl 5.8.0;
                # we send them off to the secondary dispatcher (see below).
                $obj->_handle_special_char_cmd_wrapper_commands;
                _DB__trim_command_and_return_first_component($obj);

                if (my $cmd_rec = $cmd_lookup{$cmd_verb}) {
                    my $type = $cmd_rec->{t};
                    my $val = $cmd_rec->{v};
                    if ($type eq 'm') {
                        $obj->$val();
                    }
                    elsif ($type eq 's') {
                        $val->($obj);
                    }
                }

=head4 C<t> - trace [n]

Turn tracing on or off. Inverts the appropriate bit in C<$trace> (q.v.).
If level is specified, set C<$trace_to_depth>.

=head4 C<S> - list subroutines matching/not matching a pattern

Walks through C<%sub>, checking to see whether or not to print the name.

=head4 C<X> - list variables in current package

Since the C<V> command actually processes this, just change this to the
appropriate C<V> command and fall through.

=head4 C<V> - list variables

Uses C<dumpvar.pl> to dump out the current values for selected variables.

=head4 C<x> - evaluate and print an expression

Hands the expression off to C<DB::eval>, setting it up to print the value
via C<dumpvar.pl> instead of just printing it directly.

=head4 C<m> - print methods

Just uses C<DB::methods> to determine what methods are available.

=head4 C<f> - switch files

Switch to a different filename.

=head4 C<.> - return to last-executed line.

We set C<$incr> to -1 to indicate that the debugger shouldn't move ahead,
and then we look up the line in the magical C<%dbline> hash.

=head4 C<-> - back one window

We change C<$start> to be one window back; if we go back past the first line,
we set it to be the first line. We ser C<$incr> to put us back at the
currently-executing line, and then put a C<l $start +> (list one window from
C<$start>) in C<$cmd> to be executed later.

=head3 PRE-580 COMMANDS VS. NEW COMMANDS: C<a, A, b, B, h, l, L, M, o, O, P, v, w, W, E<lt>, E<lt>E<lt>, E<0x7B>, E<0x7B>E<0x7B>>

In Perl 5.8.0, a realignment of the commands was done to fix up a number of
problems, most notably that the default case of several commands destroying
the user's work in setting watchpoints, actions, etc. We wanted, however, to
retain the old commands for those who were used to using them or who preferred
them. At this point, we check for the new commands and call C<cmd_wrapper> to
deal with them instead of processing them in-line.

=head4 C<y> - List lexicals in higher scope

Uses C<PadWalker> to find the lexicals supplied as arguments in a scope
above the current one and then displays then using C<dumpvar.pl>.

=head3 COMMANDS NOT WORKING AFTER PROGRAM ENDS

All of the commands below this point don't work after the program being
debugged has ended. All of them check to see if the program has ended; this
allows the commands to be relocated without worrying about a 'line of
demarcation' above which commands can be entered anytime, and below which
they can't.

=head4 C<n> - single step, but don't trace down into subs

Done by setting C<$single> to 2, which forces subs to execute straight through
when entered (see C<DB::sub>). We also save the C<n> command in C<$laststep>,
so a null command knows what to re-execute.

=head4 C<s> - single-step, entering subs

Sets C<$single> to 1, which causes C<DB::sub> to continue tracing inside
subs. Also saves C<s> as C<$lastcmd>.

=head4 C<c> - run continuously, setting an optional breakpoint

Most of the code for this command is taken up with locating the optional
breakpoint, which is either a subroutine name or a line number. We set
the appropriate one-time-break in C<@dbline> and then turn off single-stepping
in this and all call levels above this one.

=head4 C<r> - return from a subroutine

For C<r> to work properly, the debugger has to stop execution again
immediately after the return is executed. This is done by forcing
single-stepping to be on in the call level above the current one. If
we are printing return values when a C<r> is executed, set C<$doret>
appropriately, and force us out of the command loop.

=head4 C<T> - stack trace

Just calls C<DB::print_trace>.

=head4 C<w> - List window around current line.

Just calls C<DB::cmd_w>.

=head4 C<W> - watch-expression processing.

Just calls C<DB::cmd_W>.

=head4 C</> - search forward for a string in the source

We take the argument and treat it as a pattern. If it turns out to be a
bad one, we return the error we got from trying to C<eval> it and exit.
If not, we create some code to do the search and C<eval> it so it can't
mess us up.

=cut

                _DB__handle_forward_slash_command($obj);

=head4 C<?> - search backward for a string in the source

Same as for C</>, except the loop runs backwards.

=cut

                _DB__handle_question_mark_command($obj);

=head4 C<$rc> - Recall command

Manages the commands in C<@hist> (which is created if C<Term::ReadLine> reports
that the terminal supports history). It finds the command required, puts it
into C<$cmd>, and redoes the loop to execute it.

=cut

                # $rc - recall command.
                $obj->_handle_rc_recall_command;

=head4 C<$sh$sh> - C<system()> command

Calls the C<_db_system()> to handle the command. This keeps the C<STDIN> and
C<STDOUT> from getting messed up.

=cut

                $obj->_handle_sh_command;

=head4 C<$rc I<pattern> $rc> - Search command history

Another command to manipulate C<@hist>: this one searches it with a pattern.
If a command is found, it is placed in C<$cmd> and executed via C<redo>.

=cut

                $obj->_handle_rc_search_history_command;

=head4 C<$sh> - Invoke a shell

Uses C<_db_system()> to invoke a shell.

=cut

=head4 C<$sh I<command>> - Force execution of a command in a shell

Like the above, but the command is passed to the shell. Again, we use
C<_db_system()> to avoid problems with C<STDIN> and C<STDOUT>.

=head4 C<H> - display commands in history

Prints the contents of C<@hist> (if any).

=head4 C<man, doc, perldoc> - look up documentation

Just calls C<runman()> to print the appropriate document.

=cut

                $obj->_handle_doc_command;

=head4 C<p> - print

Builds a C<print EXPR> expression in the C<$cmd>; this will get executed at
the bottom of the loop.

=head4 C<=> - define command alias

Manipulates C<%alias> to add or list command aliases.

=head4 C<source> - read commands from a file.

Opens a lexical filehandle and stacks it on C<@cmdfhs>; C<DB::readline> will
pick it up.

=head4 C<enable> C<disable> - enable or disable breakpoints

This enables or disables breakpoints.

=head4 C<save> - send current history to a file

Takes the complete history, (not the shrunken version you see with C<H>),
and saves it to the given filename, so it can be replayed using C<source>.

Note that all C<^(save|source)>'s are commented out with a view to minimise recursion.

=head4 C<R> - restart

Restart the debugger session.

=head4 C<rerun> - rerun the current session

Return to any given position in the B<true>-history list

=head4 C<|, ||> - pipe output through the pager.

For C<|>, we save C<OUT> (the debugger's output filehandle) and C<STDOUT>
(the program's standard output). For C<||>, we only save C<OUT>. We open a
pipe to the pager (restoring the output filehandles if this fails). If this
is the C<|> command, we also set up a C<SIGPIPE> handler which will simply
set C<$signal>, sending us back into the debugger.

We then trim off the pipe symbols and C<redo> the command loop at the
C<PIPE> label, causing us to evaluate the command in C<$cmd> without
reading another.

=cut

                # || - run command in the pager, with output to DB::OUT.
                _DB__handle_run_command_in_pager_command($obj);

=head3 END OF COMMAND PARSING

Anything left in C<$cmd> at this point is a Perl expression that we want to
evaluate. We'll always evaluate in the user's context, and fully qualify
any variables we might want to address in the C<DB> package.

=cut

            }    # PIPE:

            # trace an expression
            $cmd =~ s/^t\s/\$DB::trace |= 1;\n/;

            # Make sure the flag that says "the debugger's running" is
            # still on, to make sure we get control again.
            $evalarg = "\$^D = \$^D | \$DB::db_stop;\n$cmd";

            # Run *our* eval that executes in the caller's context.
            # The &-call is here to ascertain the mutability of @_.
            &DB::eval;

            # Turn off the one-time-dump stuff now.
            if ($onetimeDump) {
                $onetimeDump      = undef;
                $onetimedumpDepth = undef;
            }
            elsif ( $term_pid == $$ ) {
                eval { # May run under miniperl, when not available...
                    STDOUT->flush();
                    STDERR->flush();
                };

                # XXX If this is the master pid, print a newline.
                print {$OUT} "\n";
            }
        } ## end while (($term || &setterm...

=head3 POST-COMMAND PROCESSING

After each command, we check to see if the command output was piped anywhere.
If so, we go through the necessary code to unhook the pipe and go back to
our standard filehandles for input and output.

=cut

        continue {    # CMD:
            _DB__at_end_of_every_command($obj);
        }    # CMD:

=head3 COMMAND LOOP TERMINATION

When commands have finished executing, we come here. If the user closed the
input filehandle, we turn on C<$fall_off_end> to emulate a C<q> command. We
evaluate any post-prompt items. We restore C<$@>, C<$!>, C<$^E>, C<$,>, C<$/>,
C<$\>, and C<$^W>, and return a null list as expected by the Perl interpreter.
The interpreter will then execute the next line and then return control to us
again.

=cut

        # No more commands? Quit.
        $fall_off_end = 1 unless defined $cmd;    # Emulate 'q' on EOF

        # Evaluate post-prompt commands.
        foreach $evalarg (@$post) {
            # The &-call is here to ascertain the mutability of @_.
            &DB::eval;
        }
    }    # if ($single || $signal)

    # Put the user's globals back where you found them.
    ( $@, $!, $^E, $,, $/, $\, $^W ) = @saved;
    ();
} ## end sub DB

# Because DB::Obj is used above,
#
#   my $obj = DB::Obj->new(
#
# The following package declaration must come before that,
# or else runtime errors will occur with
#
#   PERLDB_OPTS="autotrace nonstop"
#
# ( rt#116771 )
BEGIN {

package DB::Obj;

sub new {
    my $class = shift;

    my $self = bless {}, $class;

    $self->_init(@_);

    return $self;
}

sub _init {
    my ($self, $args) = @_;

    %{$self} = (%$self, %$args);

    return;
}

{
    no strict 'refs';
    foreach my $slot_name (qw(
        after explicit_stop infix pat piped position prefix selected cmd_verb
        cmd_args
        )) {
        my $slot = $slot_name;
        *{$slot} = sub {
            my $self = shift;

            if (@_) {
                ${ $self->{$slot} } = shift;
            }

            return ${ $self->{$slot} };
        };

        *{"append_to_$slot"} = sub {
            my $self = shift;
            my $s = shift;

            return $self->$slot($self->$slot . $s);
        };
    }
}

sub _DB_on_init__initialize_globals
{
    my $self = shift;

    # Check for whether we should be running continuously or not.
    # _After_ the perl program is compiled, $single is set to 1:
    if ( $single and not $second_time++ ) {

        # Options say run non-stop. Run until we get an interrupt.
        if ($runnonstop) {    # Disable until signal
                # If there's any call stack in place, turn off single
                # stepping into subs throughout the stack.
            for my $i (0 .. $stack_depth) {
                $stack[ $i ] &= ~1;
            }

            # And we are now no longer in single-step mode.
            $single = 0;

            # If we simply returned at this point, we wouldn't get
            # the trace info. Fall on through.
            # return;
        } ## end if ($runnonstop)

        elsif ($ImmediateStop) {

            # We are supposed to stop here; XXX probably a break.
            $ImmediateStop = 0;    # We've processed it; turn it off
            $signal        = 1;    # Simulate an interrupt to force
                                   # us into the command loop
        }
    } ## end if ($single and not $second_time...

    # If we're in single-step mode, or an interrupt (real or fake)
    # has occurred, turn off non-stop mode.
    $runnonstop = 0 if $single or $signal;

    return;
}

sub _my_print_lineinfo
{
    my ($self, $i, $incr_pos) = @_;

    if ($frame) {
        # Print it indented if tracing is on.
        DB::print_lineinfo( ' ' x $stack_depth,
            "$i:\t$DB::dbline[$i]" . $self->after );
    }
    else {
        DB::depth_print_lineinfo($self->explicit_stop, $incr_pos);
    }
}

sub _curr_line {
    return $DB::dbline[$line];
}

sub _is_full {
    my ($self, $letter) = @_;

    return ($DB::cmd eq $letter);
}

sub _DB__grab_control
{
    my $self = shift;

    # Yes, grab control.
    if ($slave_editor) {

        # Tell the editor to update its position.
        $self->position("\032\032${DB::filename}:$line:0\n");
        DB::print_lineinfo($self->position());
    }

=pod

Special check: if we're in package C<DB::fake>, we've gone through the
C<END> block at least once. We set up everything so that we can continue
to enter commands and have a valid context to be in.

=cut

    elsif ( $DB::package eq 'DB::fake' ) {

        # Fallen off the end already.
        if (!$DB::term) {
            DB::setterm();
        }

        DB::print_help(<<EOP);
Debugged program terminated.  Use B<q> to quit or B<R> to restart,
use B<o> I<inhibit_exit> to avoid stopping after program termination,
B<h q>, B<h R> or B<h o> to get additional info.
EOP

        # Set the DB::eval context appropriately.
        $DB::package     = 'main';
        $DB::usercontext = DB::_calc_usercontext($DB::package);
    } ## end elsif ($package eq 'DB::fake')

=pod

If the program hasn't finished executing, we scan forward to the
next executable line, print that out, build the prompt from the file and line
number information, and print that.

=cut

    else {


        # Still somewhere in the midst of execution. Set up the
        #  debugger prompt.
        $DB::sub =~ s/\'/::/;    # Swap Perl 4 package separators (') to
                             # Perl 5 ones (sorry, we don't print Klingon
                             #module names)

        $self->prefix($DB::sub =~ /::/ ? "" : ($DB::package . '::'));
        $self->append_to_prefix( "$DB::sub(${DB::filename}:" );
        $self->after( $self->_curr_line =~ /\n$/ ? '' : "\n" );

        # Break up the prompt if it's really long.
        if ( length($self->prefix()) > 30 ) {
            $self->position($self->prefix . "$line):\n$line:\t" . $self->_curr_line . $self->after);
            $self->prefix("");
            $self->infix(":\t");
        }
        else {
            $self->infix("):\t");
            $self->position(
                $self->prefix . $line. $self->infix
                . $self->_curr_line . $self->after
            );
        }

        # Print current line info, indenting if necessary.
        $self->_my_print_lineinfo($line, $self->position);

        my $i;
        my $line_i = sub { return $DB::dbline[$i]; };

        # Scan forward, stopping at either the end or the next
        # unbreakable line.
        for ( $i = $line + 1 ; $i <= $DB::max && $line_i->() == 0 ; ++$i )
        {    #{ vi

            # Drop out on null statements, block closers, and comments.
            last if $line_i->() =~ /^\s*[\;\}\#\n]/;

            # Drop out if the user interrupted us.
            last if $signal;

            # Append a newline if the line doesn't have one. Can happen
            # in eval'ed text, for instance.
            $self->after( $line_i->() =~ /\n$/ ? '' : "\n" );

            # Next executable line.
            my $incr_pos = $self->prefix . $i . $self->infix . $line_i->()
                . $self->after;
            $self->append_to_position($incr_pos);
            $self->_my_print_lineinfo($i, $incr_pos);
        } ## end for ($i = $line + 1 ; $i...
    } ## end else [ if ($slave_editor)

    return;
}

sub _handle_t_command {
    my $self = shift;

    my $levels = $self->cmd_args();

    if ((!length($levels)) or ($levels !~ /\D/)) {
        $trace ^= 1;
        local $\ = '';
        $DB::trace_to_depth = $levels ? $stack_depth + $levels : 1E9;
        print {$OUT} "Trace = "
        . ( ( $trace & 1 )
            ? ( $levels ? "on (to level $DB::trace_to_depth)" : "on" )
            : "off" ) . "\n";
        next CMD;
    }

    return;
}


sub _handle_S_command {
    my $self = shift;

    if (my ($print_all_subs, $should_reverse, $Spatt)
        = $self->cmd_args =~ /\A((!)?(.+))?\z/) {
        # $Spatt is the pattern (if any) to use.
        # Reverse scan?
        my $Srev     = defined $should_reverse;
        # No args - print all subs.
        my $Snocheck = !defined $print_all_subs;

        # Need to make these sane here.
        local $\ = '';
        local $, = '';

        # Search through the debugger's magical hash of subs.
        # If $nocheck is true, just print the sub name.
        # Otherwise, check it against the pattern. We then use
        # the XOR trick to reverse the condition as required.
        foreach $subname ( sort( keys %sub ) ) {
            if ( $Snocheck or $Srev ^ ( $subname =~ /$Spatt/ ) ) {
                print $OUT $subname, "\n";
            }
        }
        next CMD;
    }

    return;
}

sub _handle_V_command_and_X_command {
    my $self = shift;

    $DB::cmd =~ s/^X\b/V $DB::package/;

    # Bare V commands get the currently-being-debugged package
    # added.
    if ($self->_is_full('V')) {
        $DB::cmd = "V $DB::package";
    }

    # V - show variables in package.
    if (my ($new_packname, $new_vars_str) =
        $DB::cmd =~ /\AV\b\s*(\S+)\s*(.*)/) {

        # Save the currently selected filehandle and
        # force output to debugger's filehandle (dumpvar
        # just does "print" for output).
        my $savout = select($OUT);

        # Grab package name and variables to dump.
        $packname = $new_packname;
        my @vars     = split( ' ', $new_vars_str );

        # If main::dumpvar isn't here, get it.
        do 'dumpvar.pl' || die $@ unless defined &main::dumpvar;
        if ( defined &main::dumpvar ) {

            # We got it. Turn off subroutine entry/exit messages
            # for the moment, along with return values.
            local $frame = 0;
            local $doret = -2;

            # must detect sigpipe failures  - not catching
            # then will cause the debugger to die.
            eval {
                main::dumpvar(
                    $packname,
                    defined $option{dumpDepth}
                    ? $option{dumpDepth}
                    : -1,    # assume -1 unless specified
                    @vars
                );
            };

            # The die doesn't need to include the $@, because
            # it will automatically get propagated for us.
            if ($@) {
                die unless $@ =~ /dumpvar print failed/;
            }
        } ## end if (defined &main::dumpvar)
        else {

            # Couldn't load dumpvar.
            print $OUT "dumpvar.pl not available.\n";
        }

        # Restore the output filehandle, and go round again.
        select($savout);
        next CMD;
    }

    return;
}

sub _handle_dash_command {
    my $self = shift;

    if ($self->_is_full('-')) {

        # back up by a window; go to 1 if back too far.
        $start -= $incr + $window + 1;
        $start = 1 if $start <= 0;
        $incr  = $window - 1;

        # Generate and execute a "l +" command (handled below).
        $DB::cmd = 'l ' . ($start) . '+';
        redo CMD;
    }
    return;
}

sub _n_or_s_commands_generic {
    my ($self, $new_val) = @_;
    # n - next
    next CMD if DB::_DB__is_finished();

    # Single step, but don't enter subs.
    $single = $new_val;

    # Save for empty command (repeat last).
    $laststep = $DB::cmd;
    last CMD;
}

sub _n_or_s {
    my ($self, $letter, $new_val) = @_;

    if ($self->_is_full($letter)) {
        $self->_n_or_s_commands_generic($new_val);
    }
    else {
        $self->_n_or_s_and_arg_commands_generic($letter, $new_val);
    }

    return;
}

sub _handle_n_command {
    my $self = shift;

    return $self->_n_or_s('n', 2);
}

sub _handle_s_command {
    my $self = shift;

    return $self->_n_or_s('s', 1);
}

sub _handle_r_command {
    my $self = shift;

    # r - return from the current subroutine.
    if ($self->_is_full('r')) {

        # Can't do anything if the program's over.
        next CMD if DB::_DB__is_finished();

        # Turn on stack trace.
        $stack[$stack_depth] |= 1;

        # Print return value unless the stack is empty.
        $doret = $option{PrintRet} ? $stack_depth - 1 : -2;
        last CMD;
    }

    return;
}

sub _handle_T_command {
    my $self = shift;

    if ($self->_is_full('T')) {
        DB::print_trace( $OUT, 1 );    # skip DB
        next CMD;
    }

    return;
}

sub _handle_w_command {
    my $self = shift;

    DB::cmd_w( 'w', $self->cmd_args() );
    next CMD;

    return;
}

sub _handle_W_command {
    my $self = shift;

    if (my $arg = $self->cmd_args) {
        DB::cmd_W( 'W', $arg );
        next CMD;
    }

    return;
}

sub _handle_rc_recall_command {
    my $self = shift;

    # $rc - recall command.
    if (my ($minus, $arg) = $DB::cmd =~ m#\A$rc+\s*(-)?(\d+)?\z#) {

        # No arguments, take one thing off history.
        pop(@hist) if length($DB::cmd) > 1;

        # Relative (- found)?
        #  Y - index back from most recent (by 1 if bare minus)
        #  N - go to that particular command slot or the last
        #      thing if nothing following.

        $self->cmd_verb(
            scalar($minus ? ( $#hist - ( $arg || 1 ) ) : ( $arg || $#hist ))
        );

        # Pick out the command desired.
        $DB::cmd = $hist[$self->cmd_verb];

        # Print the command to be executed and restart the loop
        # with that command in the buffer.
        print {$OUT} $DB::cmd, "\n";
        redo CMD;
    }

    return;
}

sub _handle_rc_search_history_command {
    my $self = shift;

    # $rc pattern $rc - find a command in the history.
    if (my ($arg) = $DB::cmd =~ /\A$rc([^$rc].*)\z/) {

        # Create the pattern to use.
        my $pat = "^$arg";
        $self->pat($pat);

        # Toss off last entry if length is >1 (and it always is).
        pop(@hist) if length($DB::cmd) > 1;

        my $i;

        # Look backward through the history.
        SEARCH_HIST:
        for ( $i = $#hist ; $i ; --$i ) {
            # Stop if we find it.
            last SEARCH_HIST if $hist[$i] =~ /$pat/;
        }

        if ( !$i ) {

            # Never found it.
            print $OUT "No such command!\n\n";
            next CMD;
        }

        # Found it. Put it in the buffer, print it, and process it.
        $DB::cmd = $hist[$i];
        print $OUT $DB::cmd, "\n";
        redo CMD;
    }

    return;
}

sub _handle_H_command {
    my $self = shift;

    if ($self->cmd_args =~ m#\A\*#) {
        @hist = @truehist = ();
        print $OUT "History cleansed\n";
        next CMD;
    }

    if (my ($num) = $self->cmd_args =~ /\A(?:-(\d+))?/) {

        # Anything other than negative numbers is ignored by
        # the (incorrect) pattern, so this test does nothing.
        $end = $num ? ( $#hist - $num ) : 0;

        # Set to the minimum if less than zero.
        $hist = 0 if $hist < 0;

        # Start at the end of the array.
        # Stay in while we're still above the ending value.
        # Tick back by one each time around the loop.
        my $i;

        for ( $i = $#hist ; $i > $end ; $i-- ) {

            # Print the command  unless it has no arguments.
            print $OUT "$i: ", $hist[$i], "\n"
            unless $hist[$i] =~ /^.?$/;
        }

        next CMD;
    }

    return;
}

sub _handle_doc_command {
    my $self = shift;

    # man, perldoc, doc - show manual pages.
    if (my ($man_page)
        = $DB::cmd =~ /\A(?:man|(?:perl)?doc)\b(?:\s+([^(]*))?\z/) {
        DB::runman($man_page);
        next CMD;
    }

    return;
}

sub _handle_p_command {
    my $self = shift;

    my $print_cmd = 'print {$DB::OUT} ';
    # p - print (no args): print $_.
    if ($self->_is_full('p')) {
        $DB::cmd = $print_cmd . '$_';
    }
    else {
        # p - print the given expression.
        $DB::cmd =~ s/\Ap\b/$print_cmd /;
    }

    return;
}

sub _handle_equal_sign_command {
    my $self = shift;

    if ($DB::cmd =~ s/\A=\s*//) {
        my @keys;
        if ( length $DB::cmd == 0 ) {

            # No args, get current aliases.
            @keys = sort keys %alias;
        }
        elsif ( my ( $k, $v ) = ( $DB::cmd =~ /^(\S+)\s+(\S.*)/ ) ) {

            # Creating a new alias. $k is alias name, $v is
            # alias value.

            # can't use $_ or kill //g state
            for my $x ( $k, $v ) {

                # Escape "alarm" characters.
                $x =~ s/\a/\\a/g;
            }

            # Substitute key for value, using alarm chars
            # as separators (which is why we escaped them in
            # the command).
            $alias{$k} = "s\a$k\a$v\a";

            # Turn off standard warn and die behavior.
            local $SIG{__DIE__};
            local $SIG{__WARN__};

            # Is it valid Perl?
            unless ( eval "sub { s\a$k\a$v\a }; 1" ) {

                # Nope. Bad alias. Say so and get out.
                print $OUT "Can't alias $k to $v: $@\n";
                delete $alias{$k};
                next CMD;
            }

            # We'll only list the new one.
            @keys = ($k);
        } ## end elsif (my ($k, $v) = ($DB::cmd...

        # The argument is the alias to list.
        else {
            @keys = ($DB::cmd);
        }

        # List aliases.
        for my $k (@keys) {

            # Messy metaquoting: Trim the substitution code off.
            # We use control-G as the delimiter because it's not
            # likely to appear in the alias.
            if ( ( my $v = $alias{$k} ) =~ ss\a$k\a(.*)\a$1 ) {

                # Print the alias.
                print $OUT "$k\t= $1\n";
            }
            elsif ( defined $alias{$k} ) {

                # Couldn't trim it off; just print the alias code.
                print $OUT "$k\t$alias{$k}\n";
            }
            else {

                # No such, dude.
                print "No alias for $k\n";
            }
        } ## end for my $k (@keys)
        next CMD;
    }

    return;
}

sub _handle_source_command {
    my $self = shift;

    # source - read commands from a file (or pipe!) and execute.
    if (my $sourced_fn = $self->cmd_args) {
        if ( open my $fh, $sourced_fn ) {

            # Opened OK; stick it in the list of file handles.
            push @cmdfhs, $fh;
        }
        else {

            # Couldn't open it.
            DB::_db_warn("Can't execute '$sourced_fn': $!\n");
        }
        next CMD;
    }

    return;
}

sub _handle_enable_disable_commands {
    my $self = shift;

    my $which_cmd = $self->cmd_verb;
    my $position = $self->cmd_args;

    if ($position !~ /\s/) {
        my ($fn, $line_num);
        if ($position =~ m{\A\d+\z})
        {
            $fn = $DB::filename;
            $line_num = $position;
        }
        elsif (my ($new_fn, $new_line_num)
            = $position =~ m{\A(.*):(\d+)\z}) {
            ($fn, $line_num) = ($new_fn, $new_line_num);
        }
        else
        {
            DB::_db_warn("Wrong spec for enable/disable argument.\n");
        }

        if (defined($fn)) {
            if (DB::_has_breakpoint_data_ref($fn, $line_num)) {
                DB::_set_breakpoint_enabled_status($fn, $line_num,
                    ($which_cmd eq 'enable' ? 1 : '')
                );
            }
            else {
                DB::_db_warn("No breakpoint set at ${fn}:${line_num}\n");
            }
        }

        next CMD;
    }

    return;
}

sub _handle_save_command {
    my $self = shift;

    if (my $new_fn = $self->cmd_args) {
        my $filename = $new_fn || '.perl5dbrc';    # default?
        if ( open my $fh, '>', $filename ) {

            # chomp to remove extraneous newlines from source'd files
            chomp( my @truelist =
                map { m/\A\s*(save|source)/ ? "#$_" : $_ }
                @truehist );
            print {$fh} join( "\n", @truelist );
            print "commands saved in $filename\n";
        }
        else {
            DB::_db_warn("Can't save debugger commands in '$new_fn': $!\n");
        }
        next CMD;
    }

    return;
}

sub _n_or_s_and_arg_commands_generic {
    my ($self, $letter, $new_val) = @_;

    # s - single-step. Remember the last command was 's'.
    if ($DB::cmd =~ s#\A\Q$letter\E\s#\$DB::single = $new_val;\n#) {
        $laststep = $letter;
    }

    return;
}

sub _handle_sh_command {
    my $self = shift;

    # $sh$sh - run a shell command (if it's all ASCII).
    # Can't run shell commands with Unicode in the debugger, hmm.
    my $my_cmd = $DB::cmd;
    if ($my_cmd =~ m#\A$sh#gms) {

        if ($my_cmd =~ m#\G\z#cgms) {
            # Run the user's shell. If none defined, run Bourne.
            # We resume execution when the shell terminates.
            DB::_db_system( $ENV{SHELL} || "/bin/sh" );
            next CMD;
        }
        elsif ($my_cmd =~ m#\G$sh\s*(.*)#cgms) {
            # System it.
            DB::_db_system($1);
            next CMD;
        }
        elsif ($my_cmd =~ m#\G\s*(.*)#cgms) {
            DB::_db_system( $ENV{SHELL} || "/bin/sh", "-c", $1 );
            next CMD;
        }
    }
}

sub _handle_x_command {
    my $self = shift;

    if ($DB::cmd =~ s#\Ax\b# #) {    # Remainder gets done by DB::eval()
        $onetimeDump = 'dump';    # main::dumpvar shows the output

        # handle special  "x 3 blah" syntax XXX propagate
        # doc back to special variables.
        if ( $DB::cmd =~ s#\A\s*(\d+)(?=\s)# #) {
            $onetimedumpDepth = $1;
        }
    }

    return;
}

sub _handle_q_command {
    my $self = shift;

    if ($self->_is_full('q')) {
        $fall_off_end = 1;
        DB::clean_ENV();
        exit $?;
    }

    return;
}

sub _handle_cmd_wrapper_commands {
    my $self = shift;

    DB::cmd_wrapper( $self->cmd_verb, $self->cmd_args, $line );
    next CMD;
}

sub _handle_special_char_cmd_wrapper_commands {
    my $self = shift;

    # All of these commands were remapped in perl 5.8.0;
    # we send them off to the secondary dispatcher (see below).
    if (my ($cmd_letter, $my_arg) = $DB::cmd =~ /\A([<>\{]{1,2})\s*(.*)/so) {
        DB::cmd_wrapper( $cmd_letter, $my_arg, $line );
        next CMD;
    }

    return;
}

} ## end DB::Obj

package DB;

# The following code may be executed now:
# BEGIN {warn 4}

=head2 sub

C<sub> is called whenever a subroutine call happens in the program being
debugged. The variable C<$DB::sub> contains the name of the subroutine
being called.

The core function of this subroutine is to actually call the sub in the proper
context, capturing its output. This of course causes C<DB::DB> to get called
again, repeating until the subroutine ends and returns control to C<DB::sub>
again. Once control returns, C<DB::sub> figures out whether or not to dump the
return value, and returns its captured copy of the return value as its own
return value. The value then feeds back into the program being debugged as if
C<DB::sub> hadn't been there at all.

C<sub> does all the work of printing the subroutine entry and exit messages
enabled by setting C<$frame>. It notes what sub the autoloader got called for,
and also prints the return value if needed (for the C<r> command and if
the 16 bit is set in C<$frame>).

It also tracks the subroutine call depth by saving the current setting of
C<$single> in the C<@stack> package global; if this exceeds the value in
C<$deep>, C<sub> automatically turns on printing of the current depth by
setting the C<4> bit in C<$single>. In any case, it keeps the current setting
of stop/don't stop on entry to subs set as it currently is set.

=head3 C<caller()> support

If C<caller()> is called from the package C<DB>, it provides some
additional data, in the following order:

=over 4

=item * C<$package>

The package name the sub was in

=item * C<$filename>

The filename it was defined in

=item * C<$line>

The line number it was defined on

=item * C<$subroutine>

The subroutine name; C<(eval)> if an C<eval>().

=item * C<$hasargs>

1 if it has arguments, 0 if not

=item * C<$wantarray>

1 if array context, 0 if scalar context

=item * C<$evaltext>

The C<eval>() text, if any (undefined for C<eval BLOCK>)

=item * C<$is_require>

frame was created by a C<use> or C<require> statement

=item * C<$hints>

pragma information; subject to change between versions

=item * C<$bitmask>

pragma information; subject to change between versions

=item * C<@DB::args>

arguments with which the subroutine was invoked

=back

=cut

use vars qw($deep);

# We need to fully qualify the name ("DB::sub") to make "use strict;"
# happy. -- Shlomi Fish

sub _indent_print_line_info {
    my ($offset, $str) = @_;

    print_lineinfo( ' ' x ($stack_depth - $offset), $str);

    return;
}

sub _print_frame_message {
    my ($al) = @_;

    if ($frame) {
        if ($frame & 4) {   # Extended frame entry message
            _indent_print_line_info(-1, "in  ");

            # Why -1? But it works! :-(
            # Because print_trace will call add 1 to it and then call
            # dump_trace; this results in our skipping -1+1 = 0 stack frames
            # in dump_trace.
            #
            # Now it's 0 because we extracted a function.
            print_trace( $LINEINFO, 0, 1, 1, "$sub$al" );
        }
        else {
            _indent_print_line_info(-1, "entering $sub$al\n" );
        }
    }

    return;
}

sub DB::sub {
    # lock ourselves under threads
    lock($DBGR);

    # Whether or not the autoloader was running, a scalar to put the
    # sub's return value in (if needed), and an array to put the sub's
    # return value in (if needed).
    my ( $al, $ret, @ret ) = "";
    if ($sub eq 'threads::new' && $ENV{PERL5DB_THREADED}) {
        print "creating new thread\n";
    }

    # If the last ten characters are '::AUTOLOAD', note we've traced
    # into AUTOLOAD for $sub.
    if ( length($sub) > 10 && substr( $sub, -10, 10 ) eq '::AUTOLOAD' ) {
        no strict 'refs';
        $al = " for $$sub" if defined $$sub;
    }

    # We stack the stack pointer and then increment it to protect us
    # from a situation that might unwind a whole bunch of call frames
    # at once. Localizing the stack pointer means that it will automatically
    # unwind the same amount when multiple stack frames are unwound.
    local $stack_depth = $stack_depth + 1;    # Protect from non-local exits

    # Expand @stack.
    $#stack = $stack_depth;

    # Save current single-step setting.
    $stack[-1] = $single;

    # Turn off all flags except single-stepping.
    $single &= 1;

    # If we've gotten really deeply recursed, turn on the flag that will
    # make us stop with the 'deep recursion' message.
    $single |= 4 if $stack_depth == $deep;

    # If frame messages are on ...

    _print_frame_message($al);
    # standard frame entry message

    my $print_exit_msg = sub {
        # Check for exit trace messages...
        if ($frame & 2)
        {
            if ($frame & 4)    # Extended exit message
            {
                _indent_print_line_info(0, "out ");
                print_trace( $LINEINFO, 0, 1, 1, "$sub$al" );
            }
            else
            {
                _indent_print_line_info(0, "exited $sub$al\n" );
            }
        }
        return;
    };

    # Determine the sub's return type, and capture appropriately.
    if (wantarray) {

        # Called in array context. call sub and capture output.
        # DB::DB will recursively get control again if appropriate; we'll come
        # back here when the sub is finished.
        {
            no strict 'refs';
            @ret = &$sub;
        }

        # Pop the single-step value back off the stack.
        $single |= $stack[ $stack_depth-- ];

        $print_exit_msg->();

        # Print the return info if we need to.
        if ( $doret eq $stack_depth or $frame & 16 ) {

            # Turn off output record separator.
            local $\ = '';
            my $fh = ( $doret eq $stack_depth ? $OUT : $LINEINFO );

            # Indent if we're printing because of $frame tracing.
            if ($frame & 16)
            {
                print {$fh} ' ' x $stack_depth;
            }

            # Print the return value.
            print {$fh} "list context return from $sub:\n";
            dumpit( $fh, \@ret );

            # And don't print it again.
            $doret = -2;
        } ## end if ($doret eq $stack_depth...
            # And we have to return the return value now.
        @ret;
    } ## end if (wantarray)

    # Scalar context.
    else {
        if ( defined wantarray ) {
            no strict 'refs';
            # Save the value if it's wanted at all.
            $ret = &$sub;
        }
        else {
            no strict 'refs';
            # Void return, explicitly.
            &$sub;
            undef $ret;
        }

        # Pop the single-step value off the stack.
        $single |= $stack[ $stack_depth-- ];

        # If we're doing exit messages...
        $print_exit_msg->();

        # If we are supposed to show the return value... same as before.
        if ( $doret eq $stack_depth or $frame & 16 and defined wantarray ) {
            local $\ = '';
            my $fh = ( $doret eq $stack_depth ? $OUT : $LINEINFO );
            print $fh ( ' ' x $stack_depth ) if $frame & 16;
            print $fh (
                defined wantarray
                ? "scalar context return from $sub: "
                : "void context return from $sub\n"
            );
            dumpit( $fh, $ret ) if defined wantarray;
            $doret = -2;
        } ## end if ($doret eq $stack_depth...

        # Return the appropriate scalar value.
        $ret;
    } ## end else [ if (wantarray)
} ## end sub _sub

sub lsub : lvalue {

    no strict 'refs';

    # lock ourselves under threads
    lock($DBGR);

    # Whether or not the autoloader was running, a scalar to put the
    # sub's return value in (if needed), and an array to put the sub's
    # return value in (if needed).
    my ( $al, $ret, @ret ) = "";
    if ($sub =~ /^threads::new$/ && $ENV{PERL5DB_THREADED}) {
        print "creating new thread\n";
    }

    # If the last ten characters are C'::AUTOLOAD', note we've traced
    # into AUTOLOAD for $sub.
    if ( length($sub) > 10 && substr( $sub, -10, 10 ) eq '::AUTOLOAD' ) {
        $al = " for $$sub";
    }

    # We stack the stack pointer and then increment it to protect us
    # from a situation that might unwind a whole bunch of call frames
    # at once. Localizing the stack pointer means that it will automatically
    # unwind the same amount when multiple stack frames are unwound.
    local $stack_depth = $stack_depth + 1;    # Protect from non-local exits

    # Expand @stack.
    $#stack = $stack_depth;

    # Save current single-step setting.
    $stack[-1] = $single;

    # Turn off all flags except single-stepping.
    # Use local so the single-step value is popped back off the
    # stack for us.
    local $single = $single & 1;

    # If we've gotten really deeply recursed, turn on the flag that will
    # make us stop with the 'deep recursion' message.
    $single |= 4 if $stack_depth == $deep;

    # If frame messages are on ...
    _print_frame_message($al);

    # call the original lvalue sub.
    &$sub;
}

# Abstracting common code from multiple places elsewhere:
sub depth_print_lineinfo {
    my $always_print = shift;

    print_lineinfo( @_ ) if ($always_print or $stack_depth < $trace_to_depth);
}

=head1 EXTENDED COMMAND HANDLING AND THE COMMAND API

In Perl 5.8.0, there was a major realignment of the commands and what they did,
Most of the changes were to systematize the command structure and to eliminate
commands that threw away user input without checking.

The following sections describe the code added to make it easy to support
multiple command sets with conflicting command names. This section is a start
at unifying all command processing to make it simpler to develop commands.

Note that all the cmd_[a-zA-Z] subroutines require the command name, a line
number, and C<$dbline> (the current line) as arguments.

Support functions in this section which have multiple modes of failure C<die>
on error; the rest simply return a false value.

The user-interface functions (all of the C<cmd_*> functions) just output
error messages.

=head2 C<%set>

The C<%set> hash defines the mapping from command letter to subroutine
name suffix.

C<%set> is a two-level hash, indexed by set name and then by command name.
Note that trying to set the CommandSet to C<foobar> simply results in the
5.8.0 command set being used, since there's no top-level entry for C<foobar>.

=cut

### The API section

my %set = (    #
    'pre580' => {
        'a' => 'pre580_a',
        'A' => 'pre580_null',
        'b' => 'pre580_b',
        'B' => 'pre580_null',
        'd' => 'pre580_null',
        'D' => 'pre580_D',
        'h' => 'pre580_h',
        'M' => 'pre580_null',
        'O' => 'o',
        'o' => 'pre580_null',
        'v' => 'M',
        'w' => 'v',
        'W' => 'pre580_W',
    },
    'pre590' => {
        '<'  => 'pre590_prepost',
        '<<' => 'pre590_prepost',
        '>'  => 'pre590_prepost',
        '>>' => 'pre590_prepost',
        '{'  => 'pre590_prepost',
        '{{' => 'pre590_prepost',
    },
);

my %breakpoints_data;

sub _has_breakpoint_data_ref {
    my ($filename, $line) = @_;

    return (
        exists( $breakpoints_data{$filename} )
            and
        exists( $breakpoints_data{$filename}{$line} )
    );
}

sub _get_breakpoint_data_ref {
    my ($filename, $line) = @_;

    return ($breakpoints_data{$filename}{$line} ||= +{});
}

sub _delete_breakpoint_data_ref {
    my ($filename, $line) = @_;

    delete($breakpoints_data{$filename}{$line});
    if (! scalar(keys( %{$breakpoints_data{$filename}} )) ) {
        delete($breakpoints_data{$filename});
    }

    return;
}

sub _set_breakpoint_enabled_status {
    my ($filename, $line, $status) = @_;

    _get_breakpoint_data_ref($filename, $line)->{'enabled'} =
        ($status ? 1 : '')
        ;

    return;
}

sub _enable_breakpoint_temp_enabled_status {
    my ($filename, $line) = @_;

    _get_breakpoint_data_ref($filename, $line)->{'temp_enabled'} = 1;

    return;
}

sub _cancel_breakpoint_temp_enabled_status {
    my ($filename, $line) = @_;

    my $ref = _get_breakpoint_data_ref($filename, $line);

    delete ($ref->{'temp_enabled'});

    if (! %$ref) {
        _delete_breakpoint_data_ref($filename, $line);
    }

    return;
}

sub _is_breakpoint_enabled {
    my ($filename, $line) = @_;

    my $data_ref = _get_breakpoint_data_ref($filename, $line);
    return ($data_ref->{'enabled'} || $data_ref->{'temp_enabled'});
}

=head2 C<cmd_wrapper()> (API)

C<cmd_wrapper()> allows the debugger to switch command sets
depending on the value of the C<CommandSet> option.

It tries to look up the command in the C<%set> package-level I<lexical>
(which means external entities can't fiddle with it) and create the name of
the sub to call based on the value found in the hash (if it's there). I<All>
of the commands to be handled in a set have to be added to C<%set>; if they
aren't found, the 5.8.0 equivalent is called (if there is one).

This code uses symbolic references.

=cut

sub cmd_wrapper {
    my $cmd      = shift;
    my $line     = shift;
    my $dblineno = shift;

    # Assemble the command subroutine's name by looking up the
    # command set and command name in %set. If we can't find it,
    # default to the older version of the command.
    my $call = 'cmd_'
      . ( $set{$CommandSet}{$cmd}
          || ( $cmd =~ /\A[<>{]+/o ? 'prepost' : $cmd ) );

    # Call the command subroutine, call it by name.
    return __PACKAGE__->can($call)->( $cmd, $line, $dblineno );
} ## end sub cmd_wrapper

=head3 C<cmd_a> (command)

The C<a> command handles pre-execution actions. These are associated with a
particular line, so they're stored in C<%dbline>. We default to the current
line if none is specified.

=cut

sub cmd_a {
    my $cmd    = shift;
    my $line   = shift || '';    # [.|line] expr
    my $dbline = shift;

    # If it's dot (here), or not all digits,  use the current line.
    $line =~ s/\A\./$dbline/;

    # Should be a line number followed by an expression.
    if ( my ($lineno, $expr) = $line =~ /^\s*(\d*)\s*(\S.+)/ ) {

        if (! length($lineno)) {
            $lineno = $dbline;
        }

        # If we have an expression ...
        if ( length $expr ) {

            # ... but the line isn't breakable, complain.
            if ( $dbline[$lineno] == 0 ) {
                print $OUT
                  "Line $lineno($dbline[$lineno]) does not have an action?\n";
            }
            else {

                # It's executable. Record that the line has an action.
                $had_breakpoints{$filename} |= 2;

                # Remove any action, temp breakpoint, etc.
                $dbline{$lineno} =~ s/\0[^\0]*//;

                # Add the action to the line.
                $dbline{$lineno} .= "\0" . action($expr);

                _set_breakpoint_enabled_status($filename, $lineno, 1);
            }
        } ## end if (length $expr)
    } ## end if ($line =~ /^\s*(\d*)\s*(\S.+)/)
    else {

        # Syntax wrong.
        print $OUT
          "Adding an action requires an optional lineno and an expression\n"
          ;    # hint
    }
} ## end sub cmd_a

=head3 C<cmd_A> (command)

Delete actions. Similar to above, except the delete code is in a separate
subroutine, C<delete_action>.

=cut

sub cmd_A {
    my $cmd    = shift;
    my $line   = shift || '';
    my $dbline = shift;

    # Dot is this line.
    $line =~ s/^\./$dbline/;

    # Call delete_action with a null param to delete them all.
    # The '1' forces the eval to be true. It'll be false only
    # if delete_action blows up for some reason, in which case
    # we print $@ and get out.
    if ( $line eq '*' ) {
        if (! eval { _delete_all_actions(); 1 }) {
            print {$OUT} $@;
            return;
        }
    }

    # There's a real line  number. Pass it to delete_action.
    # Error trapping is as above.
    elsif ( $line =~ /^(\S.*)/ ) {
        if (! eval { delete_action($1); 1 }) {
            print {$OUT} $@;
            return;
        }
    }

    # Swing and a miss. Bad syntax.
    else {
        print $OUT
          "Deleting an action requires a line number, or '*' for all\n" ; # hint
    }
} ## end sub cmd_A

=head3 C<delete_action> (API)

C<delete_action> accepts either a line number or C<undef>. If a line number
is specified, we check for the line being executable (if it's not, it
couldn't have had an  action). If it is, we just take the action off (this
will get any kind of an action, including breakpoints).

=cut

sub _remove_action_from_dbline {
    my $i = shift;

    $dbline{$i} =~ s/\0[^\0]*//;    # \^a
    delete $dbline{$i} if $dbline{$i} eq '';

    return;
}

sub _delete_all_actions {
    print {$OUT} "Deleting all actions...\n";

    for my $file ( keys %had_breakpoints ) {
        local *dbline = $main::{ '_<' . $file };
        $max = $#dbline;
        my $was;
        for my $i (1 .. $max) {
            if ( defined $dbline{$i} ) {
                _remove_action_from_dbline($i);
            }
        }

        unless ( $had_breakpoints{$file} &= ~2 ) {
            delete $had_breakpoints{$file};
        }
    }

    return;
}

sub delete_action {
    my $i = shift;

    if ( defined($i) ) {
        # Can there be one?
        die "Line $i has no action .\n" if $dbline[$i] == 0;

        # Nuke whatever's there.
        _remove_action_from_dbline($i);
    }
    else {
        _delete_all_actions();
    }
}

=head3 C<cmd_b> (command)

Set breakpoints. Since breakpoints can be set in so many places, in so many
ways, conditionally or not, the breakpoint code is kind of complex. Mostly,
we try to parse the command type, and then shuttle it off to an appropriate
subroutine to actually do the work of setting the breakpoint in the right
place.

=cut

sub cmd_b {
    my $cmd    = shift;
    my $line   = shift;    # [.|line] [cond]
    my $dbline = shift;

    my $default_cond = sub {
        my $cond = shift;
        return length($cond) ? $cond : '1';
    };

    # Make . the current line number if it's there..
    $line =~ s/^\.(\s|\z)/$dbline$1/;

    # No line number, no condition. Simple break on current line.
    if ( $line =~ /^\s*$/ ) {
        cmd_b_line( $dbline, 1 );
    }

    # Break on load for a file.
    elsif ( my ($file) = $line =~ /^load\b\s*(.*)/ ) {
        $file =~ s/\s+\z//;
        cmd_b_load($file);
    }

    # b compile|postpone <some sub> [<condition>]
    # The interpreter actually traps this one for us; we just put the
    # necessary condition in the %postponed hash.
    elsif ( my ($action, $subname, $cond)
        = $line =~ /^(postpone|compile)\b\s*([':A-Za-z_][':\w]*)\s*(.*)/ ) {

        # De-Perl4-ify the name - ' separators to ::.
        $subname =~ s/'/::/g;

        # Qualify it into the current package unless it's already qualified.
        $subname = "${package}::" . $subname unless $subname =~ /::/;

        # Add main if it starts with ::.
        $subname = "main" . $subname if substr( $subname, 0, 2 ) eq "::";

        # Save the break type for this sub.
        $postponed{$subname} = (($action eq 'postpone')
            ? ( "break +0 if " . $default_cond->($cond) )
            : "compile");
    } ## end elsif ($line =~ ...
    # b <filename>:<line> [<condition>]
    elsif (my ($filename, $line_num, $cond)
        = $line =~ /\A(\S+[^:]):(\d+)\s*(.*)/ms) {
        cmd_b_filename_line(
            $filename,
            $line_num,
            (length($cond) ? $cond : '1'),
        );
    }
    # b <sub name> [<condition>]
    elsif ( my ($new_subname, $new_cond) =
        $line =~ /^([':A-Za-z_][':\w]*(?:\[.*\])?)\s*(.*)/ ) {

        #
        $subname = $new_subname;
        cmd_b_sub( $subname, $default_cond->($new_cond) );
    }

    # b <line> [<condition>].
    elsif ( my ($line_n, $cond) = $line =~ /^(\d*)\s*(.*)/ ) {

        # Capture the line. If none, it's the current line.
        $line = $line_n || $dbline;

        # Break on line.
        cmd_b_line( $line, $default_cond->($cond) );
    }

    # Line didn't make sense.
    else {
        print "confused by line($line)?\n";
    }

    return;
} ## end sub cmd_b

=head3 C<break_on_load> (API)

We want to break when this file is loaded. Mark this file in the
C<%break_on_load> hash, and note that it has a breakpoint in
C<%had_breakpoints>.

=cut

sub break_on_load {
    my $file = shift;
    $break_on_load{$file} = 1;
    $had_breakpoints{$file} |= 1;
}

=head3 C<report_break_on_load> (API)

Gives us an array of filenames that are set to break on load. Note that
only files with break-on-load are in here, so simply showing the keys
suffices.

=cut

sub report_break_on_load {
    sort keys %break_on_load;
}

=head3 C<cmd_b_load> (command)

We take the file passed in and try to find it in C<%INC> (which maps modules
to files they came from). We mark those files for break-on-load via
C<break_on_load> and then report that it was done.

=cut

sub cmd_b_load {
    my $file = shift;
    my @files;

    # This is a block because that way we can use a redo inside it
    # even without there being any looping structure at all outside it.
    {

        # Save short name and full path if found.
        push @files, $file;
        push @files, $::INC{$file} if $::INC{$file};

        # Tack on .pm and do it again unless there was a '.' in the name
        # already.
        $file .= '.pm', redo unless $file =~ /\./;
    }

    # Do the real work here.
    break_on_load($_) for @files;

    # All the files that have break-on-load breakpoints.
    @files = report_break_on_load;

    # Normalize for the purposes of our printing this.
    local $\ = '';
    local $" = ' ';
    print $OUT "Will stop on load of '@files'.\n";
} ## end sub cmd_b_load

=head3 C<$filename_error> (API package global)

Several of the functions we need to implement in the API need to work both
on the current file and on other files. We don't want to duplicate code, so
C<$filename_error> is used to contain the name of the file that's being
worked on (if it's not the current one).

We can now build functions in pairs: the basic function works on the current
file, and uses C<$filename_error> as part of its error message. Since this is
initialized to C<"">, no filename will appear when we are working on the
current file.

The second function is a wrapper which does the following:

=over 4

=item *

Localizes C<$filename_error> and sets it to the name of the file to be processed.

=item *

Localizes the C<*dbline> glob and reassigns it to point to the file we want to process.

=item *

Calls the first function.

The first function works on the I<current> file (i.e., the one we changed to),
and prints C<$filename_error> in the error message (the name of the other file)
if it needs to. When the functions return, C<*dbline> is restored to point
to the actual current file (the one we're executing in) and
C<$filename_error> is restored to C<"">. This restores everything to
the way it was before the second function was called at all.

See the comments in C<breakable_line> and C<breakable_line_in_file> for more
details.

=back

=cut

use vars qw($filename_error);
$filename_error = '';

=head3 breakable_line(from, to) (API)

The subroutine decides whether or not a line in the current file is breakable.
It walks through C<@dbline> within the range of lines specified, looking for
the first line that is breakable.

If C<$to> is greater than C<$from>, the search moves forwards, finding the
first line I<after> C<$to> that's breakable, if there is one.

If C<$from> is greater than C<$to>, the search goes I<backwards>, finding the
first line I<before> C<$to> that's breakable, if there is one.

=cut

sub breakable_line {

    my ( $from, $to ) = @_;

    # $i is the start point. (Where are the FORTRAN programs of yesteryear?)
    my $i = $from;

    # If there are at least 2 arguments, we're trying to search a range.
    if ( @_ >= 2 ) {

        # $delta is positive for a forward search, negative for a backward one.
        my $delta = $from < $to ? +1 : -1;

        # Keep us from running off the ends of the file.
        my $limit = $delta > 0 ? $#dbline : 1;

        # Clever test. If you're a mathematician, it's obvious why this
        # test works. If not:
        # If $delta is positive (going forward), $limit will be $#dbline.
        #    If $to is less than $limit, ($limit - $to) will be positive, times
        #    $delta of 1 (positive), so the result is > 0 and we should use $to
        #    as the stopping point.
        #
        #    If $to is greater than $limit, ($limit - $to) is negative,
        #    times $delta of 1 (positive), so the result is < 0 and we should
        #    use $limit ($#dbline) as the stopping point.
        #
        # If $delta is negative (going backward), $limit will be 1.
        #    If $to is zero, ($limit - $to) will be 1, times $delta of -1
        #    (negative) so the result is > 0, and we use $to as the stopping
        #    point.
        #
        #    If $to is less than zero, ($limit - $to) will be positive,
        #    times $delta of -1 (negative), so the result is not > 0, and
        #    we use $limit (1) as the stopping point.
        #
        #    If $to is 1, ($limit - $to) will zero, times $delta of -1
        #    (negative), still giving zero; the result is not > 0, and
        #    we use $limit (1) as the stopping point.
        #
        #    if $to is >1, ($limit - $to) will be negative, times $delta of -1
        #    (negative), giving a positive (>0) value, so we'll set $limit to
        #    $to.

        $limit = $to if ( $limit - $to ) * $delta > 0;

        # The real search loop.
        # $i starts at $from (the point we want to start searching from).
        # We move through @dbline in the appropriate direction (determined
        # by $delta: either -1 (back) or +1 (ahead).
        # We stay in as long as we haven't hit an executable line
        # ($dbline[$i] == 0 means not executable) and we haven't reached
        # the limit yet (test similar to the above).
        $i += $delta while $dbline[$i] == 0 and ( $limit - $i ) * $delta > 0;

    } ## end if (@_ >= 2)

    # If $i points to a line that is executable, return that.
    return $i unless $dbline[$i] == 0;

    # Format the message and print it: no breakable lines in range.
    my ( $pl, $upto ) = ( '', '' );
    ( $pl, $upto ) = ( 's', "..$to" ) if @_ >= 2 and $from != $to;

    # If there's a filename in filename_error, we'll see it.
    # If not, not.
    die "Line$pl $from$upto$filename_error not breakable\n";
} ## end sub breakable_line

=head3 breakable_line_in_filename(file, from, to) (API)

Like C<breakable_line>, but look in another file.

=cut

sub breakable_line_in_filename {

    # Capture the file name.
    my ($f) = shift;

    # Swap the magic line array over there temporarily.
    local *dbline = $main::{ '_<' . $f };

    # If there's an error, it's in this other file.
    local $filename_error = " of '$f'";

    # Find the breakable line.
    breakable_line(@_);

    # *dbline and $filename_error get restored when this block ends.

} ## end sub breakable_line_in_filename

=head3 break_on_line(lineno, [condition]) (API)

Adds a breakpoint with the specified condition (or 1 if no condition was
specified) to the specified line. Dies if it can't.

=cut

sub break_on_line {
    my $i = shift;
    my $cond = @_ ? shift(@_) : 1;

    my $inii  = $i;
    my $after = '';
    my $pl    = '';

    # Woops, not a breakable line. $filename_error allows us to say
    # if it was in a different file.
    die "Line $i$filename_error not breakable.\n" if $dbline[$i] == 0;

    # Mark this file as having breakpoints in it.
    $had_breakpoints{$filename} |= 1;

    # If there is an action or condition here already ...
    if ( $dbline{$i} ) {

        # ... swap this condition for the existing one.
        $dbline{$i} =~ s/^[^\0]*/$cond/;
    }
    else {

        # Nothing here - just add the condition.
        $dbline{$i} = $cond;

        _set_breakpoint_enabled_status($filename, $i, 1);
    }

    return;
} ## end sub break_on_line

=head3 cmd_b_line(line, [condition]) (command)

Wrapper for C<break_on_line>. Prints the failure message if it
doesn't work.

=cut

sub cmd_b_line {
    if (not eval { break_on_line(@_); 1 }) {
        local $\ = '';
        print $OUT $@ and return;
    }

    return;
} ## end sub cmd_b_line

=head3 cmd_b_filename_line(line, [condition]) (command)

Wrapper for C<break_on_filename_line>. Prints the failure message if it
doesn't work.

=cut

sub cmd_b_filename_line {
    if (not eval { break_on_filename_line(@_); 1 }) {
        local $\ = '';
        print $OUT $@ and return;
    }

    return;
}

=head3 break_on_filename_line(file, line, [condition]) (API)

Switches to the file specified and then calls C<break_on_line> to set
the breakpoint.

=cut

sub break_on_filename_line {
    my $f = shift;
    my $i = shift;
    my $cond = @_ ? shift(@_) : 1;

    # Switch the magical hash temporarily.
    local *dbline = $main::{ '_<' . $f };

    # Localize the variables that break_on_line uses to make its message.
    local $filename_error = " of '$f'";
    local $filename       = $f;

    # Add the breakpoint.
    break_on_line( $i, $cond );

    return;
} ## end sub break_on_filename_line

=head3 break_on_filename_line_range(file, from, to, [condition]) (API)

Switch to another file, search the range of lines specified for an
executable one, and put a breakpoint on the first one you find.

=cut

sub break_on_filename_line_range {
    my $f = shift;
    my $from = shift;
    my $to = shift;
    my $cond = @_ ? shift(@_) : 1;

    # Find a breakable line if there is one.
    my $i = breakable_line_in_filename( $f, $from, $to );

    # Add the breakpoint.
    break_on_filename_line( $f, $i, $cond );

    return;
} ## end sub break_on_filename_line_range

=head3 subroutine_filename_lines(subname, [condition]) (API)

Search for a subroutine within a given file. The condition is ignored.
Uses C<find_sub> to locate the desired subroutine.

=cut

sub subroutine_filename_lines {
    my ( $subname ) = @_;

    # Returned value from find_sub() is fullpathname:startline-endline.
    # The match creates the list (fullpathname, start, end).
    return (find_sub($subname) =~ /^(.*):(\d+)-(\d+)$/);
} ## end sub subroutine_filename_lines

=head3 break_subroutine(subname) (API)

Places a break on the first line possible in the specified subroutine. Uses
C<subroutine_filename_lines> to find the subroutine, and
C<break_on_filename_line_range> to place the break.

=cut

sub break_subroutine {
    my $subname = shift;

    # Get filename, start, and end.
    my ( $file, $s, $e ) = subroutine_filename_lines($subname)
      or die "Subroutine $subname not found.\n";


    # Null condition changes to '1' (always true).
    my $cond = @_ ? shift(@_) : 1;

    # Put a break the first place possible in the range of lines
    # that make up this subroutine.
    break_on_filename_line_range( $file, $s, $e, $cond );

    return;
} ## end sub break_subroutine

=head3 cmd_b_sub(subname, [condition]) (command)

We take the incoming subroutine name and fully-qualify it as best we can.

=over 4

=item 1. If it's already fully-qualified, leave it alone.

=item 2. Try putting it in the current package.

=item 3. If it's not there, try putting it in CORE::GLOBAL if it exists there.

=item 4. If it starts with '::', put it in 'main::'.

=back

After all this cleanup, we call C<break_subroutine> to try to set the
breakpoint.

=cut

sub cmd_b_sub {
    my $subname = shift;
    my $cond = @_ ? shift : 1;

    # If the subname isn't a code reference, qualify it so that
    # break_subroutine() will work right.
    if ( ref($subname) ne 'CODE' ) {

        # Not Perl 4.
        $subname =~ s/'/::/g;
        my $s = $subname;

        # Put it in this package unless it's already qualified.
        if ($subname !~ /::/)
        {
            $subname = $package . '::' . $subname;
        };

        # Requalify it into CORE::GLOBAL if qualifying it into this
        # package resulted in its not being defined, but only do so
        # if it really is in CORE::GLOBAL.
        my $core_name = "CORE::GLOBAL::$s";
        if ((!defined(&$subname))
                and ($s !~ /::/)
                and (defined &{$core_name}))
        {
            $subname = $core_name;
        }

        # Put it in package 'main' if it has a leading ::.
        if ($subname =~ /\A::/)
        {
            $subname = "main" . $subname;
        }
    } ## end if ( ref($subname) ne 'CODE' ) {

    # Try to set the breakpoint.
    if (not eval { break_subroutine( $subname, $cond ); 1 }) {
        local $\ = '';
        print {$OUT} $@;
        return;
    }

    return;
} ## end sub cmd_b_sub

=head3 C<cmd_B> - delete breakpoint(s) (command)

The command mostly parses the command line and tries to turn the argument
into a line spec. If it can't, it uses the current line. It then calls
C<delete_breakpoint> to actually do the work.

If C<*> is  specified, C<cmd_B> calls C<delete_breakpoint> with no arguments,
thereby deleting all the breakpoints.

=cut

sub cmd_B {
    my $cmd = shift;

    # No line spec? Use dbline.
    # If there is one, use it if it's non-zero, or wipe it out if it is.
    my $line   = ( $_[0] =~ /\A\./ ) ? $dbline : (shift || '');
    my $dbline = shift;

    # If the line was dot, make the line the current one.
    $line =~ s/^\./$dbline/;

    # If it's * we're deleting all the breakpoints.
    if ( $line eq '*' ) {
        if (not eval { delete_breakpoint(); 1 }) {
            print {$OUT} $@;
        }
    }

    # If there is a line spec, delete the breakpoint on that line.
    elsif ( $line =~ /\A(\S.*)/ ) {
        if (not eval { delete_breakpoint( $line || $dbline ); 1 }) {
            local $\ = '';
            print {$OUT} $@;
        }
    } ## end elsif ($line =~ /^(\S.*)/)

    # No line spec.
    else {
        print {$OUT}
          "Deleting a breakpoint requires a line number, or '*' for all\n"
          ;    # hint
    }

    return;
} ## end sub cmd_B

=head3 delete_breakpoint([line]) (API)

This actually does the work of deleting either a single breakpoint, or all
of them.

For a single line, we look for it in C<@dbline>. If it's nonbreakable, we
just drop out with a message saying so. If it is, we remove the condition
part of the 'condition\0action' that says there's a breakpoint here. If,
after we've done that, there's nothing left, we delete the corresponding
line in C<%dbline> to signal that no action needs to be taken for this line.

For all breakpoints, we iterate through the keys of C<%had_breakpoints>,
which lists all currently-loaded files which have breakpoints. We then look
at each line in each of these files, temporarily switching the C<%dbline>
and C<@dbline> structures to point to the files in question, and do what
we did in the single line case: delete the condition in C<@dbline>, and
delete the key in C<%dbline> if nothing's left.

We then wholesale delete C<%postponed>, C<%postponed_file>, and
C<%break_on_load>, because these structures contain breakpoints for files
and code that haven't been loaded yet. We can just kill these off because there
are no magical debugger structures associated with them.

=cut

sub _remove_breakpoint_entry {
    my ($fn, $i) = @_;

    delete $dbline{$i};
    _delete_breakpoint_data_ref($fn, $i);

    return;
}

sub _delete_all_breakpoints {
    print {$OUT} "Deleting all breakpoints...\n";

    # %had_breakpoints lists every file that had at least one
    # breakpoint in it.
    for my $fn ( keys %had_breakpoints ) {

        # Switch to the desired file temporarily.
        local *dbline = $main::{ '_<' . $fn };

        $max = $#dbline;

        # For all lines in this file ...
        for my $i (1 .. $max) {

            # If there's a breakpoint or action on this line ...
            if ( defined $dbline{$i} ) {

                # ... remove the breakpoint.
                $dbline{$i} =~ s/\A[^\0]+//;
                if ( $dbline{$i} =~ s/\A\0?\z// ) {
                    # Remove the entry altogether if no action is there.
                    _remove_breakpoint_entry($fn, $i);
                }
            } ## end if (defined $dbline{$i...
        } ## end for $i (1 .. $max)

        # If, after we turn off the "there were breakpoints in this file"
        # bit, the entry in %had_breakpoints for this file is zero,
        # we should remove this file from the hash.
        if ( not $had_breakpoints{$fn} &= (~1) ) {
            delete $had_breakpoints{$fn};
        }
    } ## end for my $fn (keys %had_breakpoints)

    # Kill off all the other breakpoints that are waiting for files that
    # haven't been loaded yet.
    undef %postponed;
    undef %postponed_file;
    undef %break_on_load;

    return;
}

sub _delete_breakpoint_from_line {
    my ($i) = @_;

    # Woops. This line wasn't breakable at all.
    die "Line $i not breakable.\n" if $dbline[$i] == 0;

    # Kill the condition, but leave any action.
    $dbline{$i} =~ s/\A[^\0]*//;

    # Remove the entry entirely if there's no action left.
    if ($dbline{$i} eq '') {
        _remove_breakpoint_entry($filename, $i);
    }

    return;
}

sub delete_breakpoint {
    my $i = shift;

    # If we got a line, delete just that one.
    if ( defined($i) ) {
        _delete_breakpoint_from_line($i);
    }
    # No line; delete them all.
    else {
        _delete_all_breakpoints();
    }

    return;
}

=head3 cmd_stop (command)

This is meant to be part of the new command API, but it isn't called or used
anywhere else in the debugger. XXX It is probably meant for use in development
of new commands.

=cut

sub cmd_stop {    # As on ^C, but not signal-safy.
    $signal = 1;
}

=head3 C<cmd_e> - threads

Display the current thread id:

    e

This could be how (when implemented) to send commands to this thread id (e cmd)
or that thread id (e tid cmd).

=cut

sub cmd_e {
    my $cmd  = shift;
    my $line = shift;
    unless (exists($INC{'threads.pm'})) {
        print "threads not loaded($ENV{PERL5DB_THREADED})
        please run the debugger with PERL5DB_THREADED=1 set in the environment\n";
    } else {
        my $tid = threads->tid;
        print "thread id: $tid\n";
    }
} ## end sub cmd_e

=head3 C<cmd_E> - list of thread ids

Display the list of available thread ids:

    E

This could be used (when implemented) to send commands to all threads (E cmd).

=cut

sub cmd_E {
    my $cmd  = shift;
    my $line = shift;
    unless (exists($INC{'threads.pm'})) {
        print "threads not loaded($ENV{PERL5DB_THREADED})
        please run the debugger with PERL5DB_THREADED=1 set in the environment\n";
    } else {
        my $tid = threads->tid;
        print "thread ids: ".join(', ',
            map { ($tid == $_->tid ? '<'.$_->tid.'>' : $_->tid) } threads->list
        )."\n";
    }
} ## end sub cmd_E

=head3 C<cmd_h> - help command (command)

Does the work of either

=over 4

=item *

Showing all the debugger help

=item *

Showing help for a specific command

=back

=cut

use vars qw($help);
use vars qw($summary);

sub cmd_h {
    my $cmd = shift;

    # If we have no operand, assume null.
    my $line = shift || '';

    # 'h h'. Print the long-format help.
    if ( $line =~ /\Ah\s*\z/ ) {
        print_help($help);
    }

    # 'h <something>'. Search for the command and print only its help.
    elsif ( my ($asked) = $line =~ /\A(\S.*)\z/ ) {

        # support long commands; otherwise bogus errors
        # happen when you ask for h on <CR> for example
        my $qasked = quotemeta($asked);    # for searching; we don't
                                           # want to use it as a pattern.
                                           # XXX: finds CR but not <CR>

        # Search the help string for the command.
        if (
            $help =~ /^                    # Start of a line
                      <?                   # Optional '<'
                      (?:[IB]<)            # Optional markup
                      $qasked              # The requested command
                     /mx
          )
        {

            # It's there; pull it out and print it.
            while (
                $help =~ /^
                              (<?            # Optional '<'
                                 (?:[IB]<)   # Optional markup
                                 $qasked     # The command
                                 ([\s\S]*?)  # Description line(s)
                              \n)            # End of last description line
                              (?!\s)         # Next line not starting with
                                             # whitespace
                             /mgx
              )
            {
                print_help($1);
            }
        }

        # Not found; not a debugger command.
        else {
            print_help("B<$asked> is not a debugger command.\n");
        }
    } ## end elsif ($line =~ /^(\S.*)$/)

    # 'h' - print the summary help.
    else {
        print_help($summary);
    }
} ## end sub cmd_h

=head3 C<cmd_i> - inheritance display

Display the (nested) parentage of the module or object given.

=cut

sub cmd_i {
    my $cmd  = shift;
    my $line = shift;
    foreach my $isa ( split( /\s+/, $line ) ) {
        $evalarg = $isa;
        # The &-call is here to ascertain the mutability of @_.
        ($isa) = &DB::eval;
        no strict 'refs';
        print join(
            ', ',
            map {
                "$_"
                  . (
                    defined( ${"$_\::VERSION"} )
                    ? ' ' . ${"$_\::VERSION"}
                    : undef )
              } @{mro::get_linear_isa(ref($isa) || $isa)}
        );
        print "\n";
    }
} ## end sub cmd_i

=head3 C<cmd_l> - list lines (command)

Most of the command is taken up with transforming all the different line
specification syntaxes into 'start-stop'. After that is done, the command
runs a loop over C<@dbline> for the specified range of lines. It handles
the printing of each line and any markers (C<==E<gt>> for current line,
C<b> for break on this line, C<a> for action on this line, C<:> for this
line breakable).

We save the last line listed in the C<$start> global for further listing
later.

=cut

sub _min {
    my $min = shift;
    foreach my $v (@_) {
        if ($min > $v) {
            $min = $v;
        }
    }
    return $min;
}

sub _max {
    my $max = shift;
    foreach my $v (@_) {
        if ($max < $v) {
            $max = $v;
        }
    }
    return $max;
}

sub _minify_to_max {
    my $ref = shift;

    $$ref = _min($$ref, $max);

    return;
}

sub _cmd_l_handle_var_name {
    my $var_name = shift;

    $evalarg = $var_name;

    my ($s) = DB::eval();

    # Ooops. Bad scalar.
    if ($@) {
        print {$OUT} "Error: $@\n";
        next CMD;
    }

    # Good scalar. If it's a reference, find what it points to.
    $s = CvGV_name($s);
    print {$OUT} "Interpreted as: $1 $s\n";
    $line = "$1 $s";

    # Call self recursively to really do the command.
    return _cmd_l_main( $s );
}

sub _cmd_l_handle_subname {

    my $s = $subname;

    # De-Perl4.
    $subname =~ s/\'/::/;

    # Put it in this package unless it starts with ::.
    $subname = $package . "::" . $subname unless $subname =~ /::/;

    # Put it in CORE::GLOBAL if t doesn't start with :: and
    # it doesn't live in this package and it lives in CORE::GLOBAL.
    $subname = "CORE::GLOBAL::$s"
    if not defined &$subname
        and $s !~ /::/
        and defined &{"CORE::GLOBAL::$s"};

    # Put leading '::' names into 'main::'.
    $subname = "main" . $subname if substr( $subname, 0, 2 ) eq "::";

    # Get name:start-stop from find_sub, and break this up at
    # colons.
    my @pieces = split( /:/, find_sub($subname) || $sub{$subname} );

    # Pull off start-stop.
    my $subrange = pop @pieces;

    # If the name contained colons, the split broke it up.
    # Put it back together.
    $file = join( ':', @pieces );

    # If we're not in that file, switch over to it.
    if ( $file ne $filename ) {
        if (! $slave_editor) {
            print {$OUT} "Switching to file '$file'.\n";
        }

        # Switch debugger's magic structures.
        *dbline   = $main::{ '_<' . $file };
        $max      = $#dbline;
        $filename = $file;
    } ## end if ($file ne $filename)

    # Subrange is 'start-stop'. If this is less than a window full,
    # swap it to 'start+', which will list a window from the start point.
    if ($subrange) {
        if ( eval($subrange) < -$window ) {
            $subrange =~ s/-.*/+/;
        }

        # Call self recursively to list the range.
        return _cmd_l_main( $subrange );
    } ## end if ($subrange)

    # Couldn't find it.
    else {
        print {$OUT} "Subroutine $subname not found.\n";
        return;
    }
}

sub _cmd_l_empty {
    # Compute new range to list.
    $incr = $window - 1;

    # Recurse to do it.
    return _cmd_l_main( $start . '-' . ( $start + $incr ) );
}

sub _cmd_l_plus {
    my ($new_start, $new_incr) = @_;

    # Don't reset start for 'l +nnn'.
    $start = $new_start if $new_start;

    # Increment for list. Use window size if not specified.
    # (Allows 'l +' to work.)
    $incr = $new_incr || ($window - 1);

    # Create a line range we'll understand, and recurse to do it.
    return _cmd_l_main( $start . '-' . ( $start + $incr ) );
}

sub _cmd_l_calc_initial_end_and_i {
    my ($spec, $start_match, $end_match) = @_;

    # Determine end point; use end of file if not specified.
    my $end = ( !defined $start_match ) ? $max :
    ( $end_match ? $end_match : $start_match );

    # Go on to the end, and then stop.
    _minify_to_max(\$end);

    # Determine start line.
    my $i = $start_match;

    if ($i eq '.') {
        $i = $spec;
    }

    $i = _max($i, 1);

    $incr = $end - $i;

    return ($end, $i);
}

sub _cmd_l_range {
    my ($spec, $current_line, $start_match, $end_match) = @_;

    my ($end, $i) =
        _cmd_l_calc_initial_end_and_i($spec, $start_match, $end_match);

    # If we're running under a slave editor, force it to show the lines.
    if ($slave_editor) {
        print {$OUT} "\032\032$filename:$i:0\n";
        $i = $end;
    }
    # We're doing it ourselves. We want to show the line and special
    # markers for:
    # - the current line in execution
    # - whether a line is breakable or not
    # - whether a line has a break or not
    # - whether a line has an action or not
    else {
        I_TO_END:
        for ( ; $i <= $end ; $i++ ) {

            # Check for breakpoints and actions.
            my ( $stop, $action );
            if ($dbline{$i}) {
                ( $stop, $action ) = split( /\0/, $dbline{$i} );
            }

            # ==> if this is the current line in execution,
            # : if it's breakable.
            my $arrow =
            ( $i == $current_line and $filename eq $filename_ini )
            ? '==>'
            : ( $dbline[$i] + 0 ? ':' : ' ' );

            # Add break and action indicators.
            $arrow .= 'b' if $stop;
            $arrow .= 'a' if $action;

            # Print the line.
            print {$OUT} "$i$arrow\t", $dbline[$i];

            # Move on to the next line. Drop out on an interrupt.
            if ($signal) {
                $i++;
                last I_TO_END;
            }
        } ## end for (; $i <= $end ; $i++)

        # Line the prompt up; print a newline if the last line listed
        # didn't have a newline.
        if ($dbline[ $i - 1 ] !~ /\n\z/) {
            print {$OUT} "\n";
        }
    } ## end else [ if ($slave_editor)

    # Save the point we last listed to in case another relative 'l'
    # command is desired. Don't let it run off the end.
    $start = $i;
    _minify_to_max(\$start);

    return;
}

sub _cmd_l_main {
    my $spec = shift;

    # If this is '-something', delete any spaces after the dash.
    $spec =~ s/\A-\s*\z/-/;

    # If the line is '$something', assume this is a scalar containing a
    # line number.
    # Set up for DB::eval() - evaluate in *user* context.
    if ( my ($var_name) = $spec =~ /\A(\$.*)/s ) {
        return _cmd_l_handle_var_name($var_name);
    }
    # l name. Try to find a sub by that name.
    elsif ( ($subname) = $spec =~ /\A([\':A-Za-z_][\':\w]*(?:\[.*\])?)/s ) {
        return _cmd_l_handle_subname();
    }
    # Bare 'l' command.
    elsif ( $spec !~ /\S/ ) {
        return _cmd_l_empty();
    }
    # l [start]+number_of_lines
    elsif ( my ($new_start, $new_incr) = $spec =~ /\A(\d*)\+(\d*)\z/ ) {
        return _cmd_l_plus($new_start, $new_incr);
    }
    # l start-stop or l start,stop
    elsif (my ($s, $e) = $spec =~ /^(?:(-?[\d\$\.]+)(?:[-,]([\d\$\.]+))?)?/ ) {
        return _cmd_l_range($spec, $line, $s, $e);
    }

    return;
} ## end sub cmd_l

sub cmd_l {
    my (undef, $line) = @_;

    return _cmd_l_main($line);
}

=head3 C<cmd_L> - list breakpoints, actions, and watch expressions (command)

To list breakpoints, the command has to look determine where all of them are
first. It starts a C<%had_breakpoints>, which tells us what all files have
breakpoints and/or actions. For each file, we switch the C<*dbline> glob (the
magic source and breakpoint data structures) to the file, and then look
through C<%dbline> for lines with breakpoints and/or actions, listing them
out. We look through C<%postponed> not-yet-compiled subroutines that have
breakpoints, and through C<%postponed_file> for not-yet-C<require>'d files
that have breakpoints.

Watchpoints are simpler: we just list the entries in C<@to_watch>.

=cut

sub _cmd_L_calc_arg {
    # If no argument, list everything. Pre-5.8.0 version always lists
    # everything
    my $arg = shift || 'abw';
    if ($CommandSet ne '580')
    {
        $arg = 'abw';
    }

    return $arg;
}

sub _cmd_L_calc_wanted_flags {
    my $arg = _cmd_L_calc_arg(shift);

    return (map { index($arg, $_) >= 0 ? 1 : 0 } qw(a b w));
}


sub _cmd_L_handle_breakpoints {
    my ($handle_db_line) = @_;

    BREAKPOINTS_SCAN:
    # Look in all the files with breakpoints...
    for my $file ( keys %had_breakpoints ) {

        # Temporary switch to this file.
        local *dbline = $main::{ '_<' . $file };

        # Set up to look through the whole file.
        $max = $#dbline;
        my $was;    # Flag: did we print something
        # in this file?

        # For each line in the file ...
        for my $i (1 .. $max) {

            # We've got something on this line.
            if ( defined $dbline{$i} ) {

                # Print the header if we haven't.
                if (not $was++) {
                    print {$OUT} "$file:\n";
                }

                # Print the line.
                print {$OUT} " $i:\t", $dbline[$i];

                $handle_db_line->($dbline{$i});

                # Quit if the user hit interrupt.
                if ($signal) {
                    last BREAKPOINTS_SCAN;
                }
            } ## end if (defined $dbline{$i...
        } ## end for my $i (1 .. $max)
    } ## end for my $file (keys %had_breakpoints)

    return;
}

sub _cmd_L_handle_postponed_breakpoints {
    my ($handle_db_line) = @_;

    print {$OUT} "Postponed breakpoints in files:\n";

    POSTPONED_SCANS:
    for my $file ( keys %postponed_file ) {
        my $db = $postponed_file{$file};
        print {$OUT} " $file:\n";
        for my $line ( sort { $a <=> $b } keys %$db ) {
            print {$OUT} "  $line:\n";

            $handle_db_line->($db->{$line});

            if ($signal) {
                last POSTPONED_SCANS;
            }
        }
        if ($signal) {
            last POSTPONED_SCANS;
        }
    }

    return;
}


sub cmd_L {
    my $cmd = shift;

    my ($action_wanted, $break_wanted, $watch_wanted) =
        _cmd_L_calc_wanted_flags(shift);

    my $handle_db_line = sub {
        my ($l) = @_;

        my ( $stop, $action ) = split( /\0/, $l );

        if ($stop and $break_wanted) {
            print {$OUT} "    break if (", $stop, ")\n"
        }

        if ($action && $action_wanted) {
            print {$OUT} "    action:  ", $action, "\n"
        }

        return;
    };

    # Breaks and actions are found together, so we look in the same place
    # for both.
    if ( $break_wanted or $action_wanted ) {
        _cmd_L_handle_breakpoints($handle_db_line);
    }

    # Look for breaks in not-yet-compiled subs:
    if ( %postponed and $break_wanted ) {
        print {$OUT} "Postponed breakpoints in subroutines:\n";
        my $subname;
        SUBS_SCAN:
        for $subname ( keys %postponed ) {
            print {$OUT} " $subname\t$postponed{$subname}\n";
            if ($signal) {
                last SUBS_SCAN;
            }
        }
    } ## end if (%postponed and $break_wanted)

    # Find files that have not-yet-loaded breaks:
    my @have = map {    # Combined keys
        keys %{ $postponed_file{$_} }
    } keys %postponed_file;

    # If there are any, list them.
    if ( @have and ( $break_wanted or $action_wanted ) ) {
        _cmd_L_handle_postponed_breakpoints($handle_db_line);
    } ## end if (@have and ($break_wanted...

    if ( %break_on_load and $break_wanted ) {
        print {$OUT} "Breakpoints on load:\n";
        BREAK_ON_LOAD: for my $filename ( keys %break_on_load ) {
            print {$OUT} " $filename\n";
            last BREAK_ON_LOAD if $signal;
        }
    } ## end if (%break_on_load and...

    if ($watch_wanted and ( $trace & 2 )) {
        print {$OUT} "Watch-expressions:\n" if @to_watch;
        TO_WATCH: for my $expr (@to_watch) {
            print {$OUT} " $expr\n";
            last TO_WATCH if $signal;
        }
    }

    return;
} ## end sub cmd_L

=head3 C<cmd_M> - list modules (command)

Just call C<list_modules>.

=cut

sub cmd_M {
    list_modules();

    return;
}

=head3 C<cmd_o> - options (command)

If this is just C<o> by itself, we list the current settings via
C<dump_option>. If there's a nonblank value following it, we pass that on to
C<parse_options> for processing.

=cut

sub cmd_o {
    my $cmd = shift;
    my $opt = shift || '';    # opt[=val]

    # Nonblank. Try to parse and process.
    if ( $opt =~ /^(\S.*)/ ) {
        parse_options($1);
    }

    # Blank. List the current option settings.
    else {
        for (@options) {
            dump_option($_);
        }
    }
} ## end sub cmd_o

=head3 C<cmd_O> - nonexistent in 5.8.x (command)

Advises the user that the O command has been renamed.

=cut

sub cmd_O {
    print $OUT "The old O command is now the o command.\n";             # hint
    print $OUT "Use 'h' to get current command help synopsis or\n";     #
    print $OUT "use 'o CommandSet=pre580' to revert to old usage\n";    #
}

=head3 C<cmd_v> - view window (command)

Uses the C<$preview> variable set in the second C<BEGIN> block (q.v.) to
move back a few lines to list the selected line in context. Uses C<cmd_l>
to do the actual listing after figuring out the range of line to request.

=cut

use vars qw($preview);

sub cmd_v {
    my $cmd  = shift;
    my $line = shift;

    # Extract the line to list around. (Astute readers will have noted that
    # this pattern will match whether or not a numeric line is specified,
    # which means that we'll always enter this loop (though a non-numeric
    # argument results in no action at all)).
    if ( $line =~ /^(\d*)$/ ) {

        # Total number of lines to list (a windowful).
        $incr = $window - 1;

        # Set the start to the argument given (if there was one).
        $start = $1 if $1;

        # Back up by the context amount.
        $start -= $preview;

        # Put together a linespec that cmd_l will like.
        $line = $start . '-' . ( $start + $incr );

        # List the lines.
        cmd_l( 'l', $line );
    } ## end if ($line =~ /^(\d*)$/)
} ## end sub cmd_v

=head3 C<cmd_w> - add a watch expression (command)

The 5.8 version of this command adds a watch expression if one is specified;
it does nothing if entered with no operands.

We extract the expression, save it, evaluate it in the user's context, and
save the value. We'll re-evaluate it each time the debugger passes a line,
and will stop (see the code at the top of the command loop) if the value
of any of the expressions changes.

=cut

sub _add_watch_expr {
    my $expr = shift;

    # ... save it.
    push @to_watch, $expr;

    # Parameterize DB::eval and call it to get the expression's value
    # in the user's context. This version can handle expressions which
    # return a list value.
    $evalarg = $expr;
    # The &-call is here to ascertain the mutability of @_.
    my ($val) = join( ' ', &DB::eval);
    $val = ( defined $val ) ? "'$val'" : 'undef';

    # Save the current value of the expression.
    push @old_watch, $val;

    # We are now watching expressions.
    $trace |= 2;

    return;
}

sub cmd_w {
    my $cmd = shift;

    # Null expression if no arguments.
    my $expr = shift || '';

    # If expression is not null ...
    if ( $expr =~ /\A\S/ ) {
        _add_watch_expr($expr);
    } ## end if ($expr =~ /^(\S.*)/)

    # You have to give one to get one.
    else {
        print $OUT "Adding a watch-expression requires an expression\n";  # hint
    }

    return;
}

=head3 C<cmd_W> - delete watch expressions (command)

This command accepts either a watch expression to be removed from the list
of watch expressions, or C<*> to delete them all.

If C<*> is specified, we simply empty the watch expression list and the
watch expression value list. We also turn off the bit that says we've got
watch expressions.

If an expression (or partial expression) is specified, we pattern-match
through the expressions and remove the ones that match. We also discard
the corresponding values. If no watch expressions are left, we turn off
the I<watching expressions> bit.

=cut

sub cmd_W {
    my $cmd  = shift;
    my $expr = shift || '';

    # Delete them all.
    if ( $expr eq '*' ) {

        # Not watching now.
        $trace &= ~2;

        print $OUT "Deleting all watch expressions ...\n";

        # And all gone.
        @to_watch = @old_watch = ();
    }

    # Delete one of them.
    elsif ( $expr =~ /^(\S.*)/ ) {

        # Where we are in the list.
        my $i_cnt = 0;

        # For each expression ...
        foreach (@to_watch) {
            my $val = $to_watch[$i_cnt];

            # Does this one match the command argument?
            if ( $val eq $expr ) {    # =~ m/^\Q$i$/) {
                                      # Yes. Turn it off, and its value too.
                splice( @to_watch,  $i_cnt, 1 );
                splice( @old_watch, $i_cnt, 1 );
            }
            $i_cnt++;
        } ## end foreach (@to_watch)

        # We don't bother to turn watching off because
        #  a) we don't want to stop calling watchfunction() if it exists
        #  b) foreach over a null list doesn't do anything anyway

    } ## end elsif ($expr =~ /^(\S.*)/)

    # No command arguments entered.
    else {
        print $OUT
          "Deleting a watch-expression requires an expression, or '*' for all\n"
          ;    # hint
    }
} ## end sub cmd_W

### END of the API section

=head1 SUPPORT ROUTINES

These are general support routines that are used in a number of places
throughout the debugger.

=head2 save

save() saves the user's versions of globals that would mess us up in C<@saved>,
and installs the versions we like better.

=cut

sub save {

    # Save eval failure, command failure, extended OS error, output field
    # separator, input record separator, output record separator and
    # the warning setting.
    @saved = ( $@, $!, $^E, $,, $/, $\, $^W );

    $,  = "";      # output field separator is null string
    $/  = "\n";    # input record separator is newline
    $\  = "";      # output record separator is null string
    $^W = 0;       # warnings are off
} ## end sub save

=head2 C<print_lineinfo> - show where we are now

print_lineinfo prints whatever it is that it is handed; it prints it to the
C<$LINEINFO> filehandle instead of just printing it to STDOUT. This allows
us to feed line information to a slave editor without messing up the
debugger output.

=cut

sub print_lineinfo {

    # Make the terminal sensible if we're not the primary debugger.
    resetterm(1) if $LINEINFO eq $OUT and $term_pid != $$;
    local $\ = '';
    local $, = '';
    # $LINEINFO may be undef if $noTTY is set or some other issue.
    if ($LINEINFO)
    {
        print {$LINEINFO} @_;
    }
} ## end sub print_lineinfo

=head2 C<postponed_sub>

Handles setting postponed breakpoints in subroutines once they're compiled.
For breakpoints, we use C<DB::find_sub> to locate the source file and line
range for the subroutine, then mark the file as having a breakpoint,
temporarily switch the C<*dbline> glob over to the source file, and then
search the given range of lines to find a breakable line. If we find one,
we set the breakpoint on it, deleting the breakpoint from C<%postponed>.

=cut

# The following takes its argument via $evalarg to preserve current @_

sub postponed_sub {

    # Get the subroutine name.
    my $subname = shift;

    # If this is a 'break +<n> if <condition>' ...
    if ( $postponed{$subname} =~ s/^break\s([+-]?\d+)\s+if\s// ) {

        # If there's no offset, use '+0'.
        my $offset = $1 || 0;

        # find_sub's value is 'fullpath-filename:start-stop'. It's
        # possible that the filename might have colons in it too.
        my ( $file, $i ) = ( find_sub($subname) =~ /^(.*):(\d+)-.*$/ );
        if ($i) {

            # We got the start line. Add the offset '+<n>' from
            # $postponed{subname}.
            $i += $offset;

            # Switch to the file this sub is in, temporarily.
            local *dbline = $main::{ '_<' . $file };

            # No warnings, please.
            local $^W = 0;    # != 0 is magical below

            # This file's got a breakpoint in it.
            $had_breakpoints{$file} |= 1;

            # Last line in file.
            $max = $#dbline;

            # Search forward until we hit a breakable line or get to
            # the end of the file.
            ++$i until $dbline[$i] != 0 or $i >= $max;

            # Copy the breakpoint in and delete it from %postponed.
            $dbline{$i} = delete $postponed{$subname};
        } ## end if ($i)

        # find_sub didn't find the sub.
        else {
            local $\ = '';
            print $OUT "Subroutine $subname not found.\n";
        }
        return;
    } ## end if ($postponed{$subname...
    elsif ( $postponed{$subname} eq 'compile' ) { $signal = 1 }

    #print $OUT "In postponed_sub for '$subname'.\n";
} ## end sub postponed_sub

=head2 C<postponed>

Called after each required file is compiled, but before it is executed;
also called if the name of a just-compiled subroutine is a key of
C<%postponed>. Propagates saved breakpoints (from C<b compile>, C<b load>,
etc.) into the just-compiled code.

If this is a C<require>'d file, the incoming parameter is the glob
C<*{"_<$filename"}>, with C<$filename> the name of the C<require>'d file.

If it's a subroutine, the incoming parameter is the subroutine name.

=cut

sub postponed {

    # If there's a break, process it.
    if ($ImmediateStop) {

        # Right, we've stopped. Turn it off.
        $ImmediateStop = 0;

        # Enter the command loop when DB::DB gets called.
        $signal = 1;
    }

    # If this is a subroutine, let postponed_sub() deal with it.
    if (ref(\$_[0]) ne 'GLOB') {
        return postponed_sub(@_);
    }

    # Not a subroutine. Deal with the file.
    local *dbline = shift;
    my $filename = $dbline;
    $filename =~ s/^_<//;
    local $\ = '';
    $signal = 1, print $OUT "'$filename' loaded...\n"
      if $break_on_load{$filename};
    print_lineinfo( ' ' x $stack_depth, "Package $filename.\n" ) if $frame;

    # Do we have any breakpoints to put in this file?
    return unless $postponed_file{$filename};

    # Yes. Mark this file as having breakpoints.
    $had_breakpoints{$filename} |= 1;

    # "Cannot be done: insufficient magic" - we can't just put the
    # breakpoints saved in %postponed_file into %dbline by assigning
    # the whole hash; we have to do it one item at a time for the
    # breakpoints to be set properly.
    #%dbline = %{$postponed_file{$filename}};

    # Set the breakpoints, one at a time.
    my $key;

    for $key ( keys %{ $postponed_file{$filename} } ) {

        # Stash the saved breakpoint into the current file's magic line array.
        $dbline{$key} = ${ $postponed_file{$filename} }{$key};
    }

    # This file's been compiled; discard the stored breakpoints.
    delete $postponed_file{$filename};

} ## end sub postponed

=head2 C<dumpit>

C<dumpit> is the debugger's wrapper around dumpvar.pl.

It gets a filehandle (to which C<dumpvar.pl>'s output will be directed) and
a reference to a variable (the thing to be dumped) as its input.

The incoming filehandle is selected for output (C<dumpvar.pl> is printing to
the currently-selected filehandle, thank you very much). The current
values of the package globals C<$single> and C<$trace> are backed up in
lexicals, and they are turned off (this keeps the debugger from trying
to single-step through C<dumpvar.pl> (I think.)). C<$frame> is localized to
preserve its current value and it is set to zero to prevent entry/exit
messages from printing, and C<$doret> is localized as well and set to -2 to
prevent return values from being shown.

C<dumpit()> then checks to see if it needs to load C<dumpvar.pl> and
tries to load it (note: if you have a C<dumpvar.pl>  ahead of the
installed version in C<@INC>, yours will be used instead. Possible security
problem?).

It then checks to see if the subroutine C<main::dumpValue> is now defined
it should have been defined by C<dumpvar.pl>). If it has, C<dumpit()>
localizes the globals necessary for things to be sane when C<main::dumpValue()>
is called, and picks up the variable to be dumped from the parameter list.

It checks the package global C<%options> to see if there's a C<dumpDepth>
specified. If not, -1 is assumed; if so, the supplied value gets passed on to
C<dumpvar.pl>. This tells C<dumpvar.pl> where to leave off when dumping a
structure: -1 means dump everything.

C<dumpValue()> is then called if possible; if not, C<dumpit()>just prints a
warning.

In either case, C<$single>, C<$trace>, C<$frame>, and C<$doret> are restored
and we then return to the caller.

=cut

sub dumpit {

    # Save the current output filehandle and switch to the one
    # passed in as the first parameter.
    my $savout = select(shift);

    # Save current settings of $single and $trace, and then turn them off.
    my $osingle = $single;
    my $otrace  = $trace;
    $single = $trace = 0;

    # XXX Okay, what do $frame and $doret do, again?
    local $frame = 0;
    local $doret = -2;

    # Load dumpvar.pl unless we've already got the sub we need from it.
    unless ( defined &main::dumpValue ) {
        do 'dumpvar.pl' or die $@;
    }

    # If the load succeeded (or we already had dumpvalue()), go ahead
    # and dump things.
    if ( defined &main::dumpValue ) {
        local $\ = '';
        local $, = '';
        local $" = ' ';
        my $v = shift;
        my $maxdepth = shift || $option{dumpDepth};
        $maxdepth = -1 unless defined $maxdepth;    # -1 means infinite depth
        main::dumpValue( $v, $maxdepth );
    } ## end if (defined &main::dumpValue)

    # Oops, couldn't load dumpvar.pl.
    else {
        local $\ = '';
        print $OUT "dumpvar.pl not available.\n";
    }

    # Reset $single and $trace to their old values.
    $single = $osingle;
    $trace  = $otrace;

    # Restore the old filehandle.
    select($savout);
} ## end sub dumpit

=head2 C<print_trace>

C<print_trace>'s job is to print a stack trace. It does this via the
C<dump_trace> routine, which actually does all the ferreting-out of the
stack trace data. C<print_trace> takes care of formatting it nicely and
printing it to the proper filehandle.

Parameters:

=over 4

=item *

The filehandle to print to.

=item *

How many frames to skip before starting trace.

=item *

How many frames to print.

=item *

A flag: if true, print a I<short> trace without filenames, line numbers, or arguments

=back

The original comment below seems to be noting that the traceback may not be
correct if this routine is called in a tied method.

=cut

# Tied method do not create a context, so may get wrong message:

sub print_trace {
    local $\ = '';
    my $fh = shift;

    # If this is going to a slave editor, but we're not the primary
    # debugger, reset it first.
    resetterm(1)
      if $fh        eq $LINEINFO    # slave editor
      and $LINEINFO eq $OUT         # normal output
      and $term_pid != $$;          # not the primary

    # Collect the actual trace information to be formatted.
    # This is an array of hashes of subroutine call info.
    my @sub = dump_trace( $_[0] + 1, $_[1] );

    # Grab the "short report" flag from @_.
    my $short = $_[2];              # Print short report, next one for sub name

    # Run through the traceback info, format it, and print it.
    my $s;
    for my $i (0 .. $#sub) {

        # Drop out if the user has lost interest and hit control-C.
        last if $signal;

        # Set the separator so arrays print nice.
        local $" = ', ';

        # Grab and stringify the arguments if they are there.
        my $args =
          defined $sub[$i]{args}
          ? "(@{ $sub[$i]{args} })"
          : '';

        # Shorten them up if $maxtrace says they're too long.
        $args = ( substr $args, 0, $maxtrace - 3 ) . '...'
          if length $args > $maxtrace;

        # Get the file name.
        my $file = $sub[$i]{file};

        # Put in a filename header if short is off.
        $file = $file eq '-e' ? $file : "file '$file'" unless $short;

        # Get the actual sub's name, and shorten to $maxtrace's requirement.
        $s = $sub[$i]{'sub'};
        $s = ( substr $s, 0, $maxtrace - 3 ) . '...' if length $s > $maxtrace;

        # Short report uses trimmed file and sub names.
        if ($short) {
            my $sub = @_ >= 4 ? $_[3] : $s;
            print $fh "$sub[$i]{context}=$sub$args from $file:$sub[$i]{line}\n";
        } ## end if ($short)

        # Non-short report includes full names.
        else {
            print $fh "$sub[$i]{context} = $s$args"
              . " called from $file"
              . " line $sub[$i]{line}\n";
        }
    } ## end for my $i (0 .. $#sub)
} ## end sub print_trace

=head2 dump_trace(skip[,count])

Actually collect the traceback information available via C<caller()>. It does
some filtering and cleanup of the data, but mostly it just collects it to
make C<print_trace()>'s job easier.

C<skip> defines the number of stack frames to be skipped, working backwards
from the most current. C<count> determines the total number of frames to
be returned; all of them (well, the first 10^9) are returned if C<count>
is omitted.

This routine returns a list of hashes, from most-recent to least-recent
stack frame. Each has the following keys and values:

=over 4

=item * C<context> - C<.> (null), C<$> (scalar), or C<@> (array)

=item * C<sub> - subroutine name, or C<eval> information

=item * C<args> - undef, or a reference to an array of arguments

=item * C<file> - the file in which this item was defined (if any)

=item * C<line> - the line on which it was defined

=back

=cut

sub _dump_trace_calc_saved_single_arg
{
    my ($nothard, $arg) = @_;

    my $type;
    if ( not defined $arg ) {    # undefined parameter
        return "undef";
    }

    elsif ( $nothard and tied $arg ) {    # tied parameter
        return "tied";
    }
    elsif ( $nothard and $type = ref $arg ) {    # reference
        return "ref($type)";
    }
    else {                                       # can be stringified
        local $_ =
        "$arg";    # Safe to stringify now - should not call f().

        # Backslash any single-quotes or backslashes.
        s/([\'\\])/\\$1/g;

        # Single-quote it unless it's a number or a colon-separated
        # name.
        s/(.*)/'$1'/s
        unless /^(?: -?[\d.]+ | \*[\w:]* )$/x;

        # Turn high-bit characters into meta-whatever.
        s/([\200-\377])/sprintf("M-%c",ord($1)&0177)/eg;

        # Turn control characters into ^-whatever.
        s/([\0-\37\177])/sprintf("^%c",ord($1)^64)/eg;

        return $_;
    }
}

sub _dump_trace_calc_save_args {
    my ($nothard) = @_;

    return [
        map { _dump_trace_calc_saved_single_arg($nothard, $_) } @args
    ];
}

sub dump_trace {

    # How many levels to skip.
    my $skip = shift;

    # How many levels to show. (1e9 is a cheap way of saying "all of them";
    # it's unlikely that we'll have more than a billion stack frames. If you
    # do, you've got an awfully big machine...)
    my $count = shift || 1e9;

    # We increment skip because caller(1) is the first level *back* from
    # the current one.  Add $skip to the count of frames so we have a
    # simple stop criterion, counting from $skip to $count+$skip.
    $skip++;
    $count += $skip;

    # These variables are used to capture output from caller();
    my ( $p, $file, $line, $sub, $h, $context );

    my ( $e, $r, @sub, $args );

    # XXX Okay... why'd we do that?
    my $nothard = not $frame & 8;
    local $frame = 0;

    # Do not want to trace this.
    my $otrace = $trace;
    $trace = 0;

    # Start out at the skip count.
    # If we haven't reached the number of frames requested, and caller() is
    # still returning something, stay in the loop. (If we pass the requested
    # number of stack frames, or we run out - caller() returns nothing - we
    # quit.
    # Up the stack frame index to go back one more level each time.
    for (
        my $i = $skip ;
        $i < $count
        and ( $p, $file, $line, $sub, $h, $context, $e, $r ) = caller($i) ;
        $i++
    )
    {

        # Go through the arguments and save them for later.
        my $save_args = _dump_trace_calc_save_args($nothard);

        # If context is true, this is array (@)context.
        # If context is false, this is scalar ($) context.
        # If neither, context isn't defined. (This is apparently a 'can't
        # happen' trap.)
        $context = $context ? '@' : ( defined $context ? "\$" : '.' );

        # if the sub has args ($h true), make an anonymous array of the
        # dumped args.
        $args = $h ? $save_args : undef;

        # remove trailing newline-whitespace-semicolon-end of line sequence
        # from the eval text, if any.
        $e =~ s/\n\s*\;\s*\Z// if $e;

        # Escape backslashed single-quotes again if necessary.
        $e =~ s/([\\\'])/\\$1/g if $e;

        # if the require flag is true, the eval text is from a require.
        if ($r) {
            $sub = "require '$e'";
        }

        # if it's false, the eval text is really from an eval.
        elsif ( defined $r ) {
            $sub = "eval '$e'";
        }

        # If the sub is '(eval)', this is a block eval, meaning we don't
        # know what the eval'ed text actually was.
        elsif ( $sub eq '(eval)' ) {
            $sub = "eval {...}";
        }

        # Stick the collected information into @sub as an anonymous hash.
        push(
            @sub,
            {
                context => $context,
                sub     => $sub,
                args    => $args,
                file    => $file,
                line    => $line
