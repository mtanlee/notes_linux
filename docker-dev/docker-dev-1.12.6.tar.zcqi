fR if not.
.ie n .SS "_CLASSISA $string, $class"
.el .SS "_CLASSISA \f(CW$string\fP, \f(CW$class\fP"
.IX Subsection "_CLASSISA $string, $class"
The \f(CW\*(C`_CLASSISA\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a string that is a particularly class, or a subclass of it.
.PP
This function checks that the format is valid and calls the \->isa
method on the class name. It does not check that the class is actually
loaded.
.PP
It also assumes \*(L"normalised\*(R" form, and does
not accept class names such as \f(CW\*(C`::Foo\*(C'\fR or \f(CW\*(C`D\*(AqOh\*(C'\fR.
.PP
Returns the string as a convenience if it is a valid class name, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_CLASSDOES $string, $role"
.el .SS "_CLASSDOES \f(CW$string\fP, \f(CW$role\fP"
.IX Subsection "_CLASSDOES $string, $role"
This routine behaves exactly like \f(CW"_CLASSISA"\fR, but checks with \f(CW\*(C`\->DOES\*(C'\fR rather than \f(CW\*(C`\->isa\*(C'\fR.  This is probably only a good idea to use on Perl
5.10 or later, when \s-1UNIVERSAL::DOES\s0 has been
implemented.
.ie n .SS "_SUBCLASS $string, $class"
.el .SS "_SUBCLASS \f(CW$string\fP, \f(CW$class\fP"
.IX Subsection "_SUBCLASS $string, $class"
The \f(CW\*(C`_SUBCLASS\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a string that is a subclass of a specified class.
.PP
This function checks that the format is valid and calls the \->isa
method on the class name. It does not check that the class is actually
loaded.
.PP
It also assumes \*(L"normalised\*(R" form, and does
not accept class names such as \f(CW\*(C`::Foo\*(C'\fR or \f(CW\*(C`D\*(AqOh\*(C'\fR.
.PP
Returns the string as a convenience if it is a valid class name, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_NUMBER $scalar"
.el .SS "_NUMBER \f(CW$scalar\fP"
.IX Subsection "_NUMBER $scalar"
The \f(CW\*(C`_NUMBER\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a number. That is, it is defined and perl thinks it's a number.
.PP
This function is basically a Params::Util\-style wrapper around the
Scalar::Util \f(CW\*(C`looks_like_number\*(C'\fR function.
.PP
Returns the value as a convience, or \f(CW\*(C`undef\*(C'\fR if the value is not a
number.
.ie n .SS "_POSINT $integer"
.el .SS "_POSINT \f(CW$integer\fP"
.IX Subsection "_POSINT $integer"
The \f(CW\*(C`_POSINT\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a positive integer (of any length).
.PP
Returns the value as a convience, or \f(CW\*(C`undef\*(C'\fR if the value is not a
positive integer.
.PP
The name itself is derived from the \s-1XML\s0 schema constraint of the same
name.
.ie n .SS "_NONNEGINT $integer"
.el .SS "_NONNEGINT \f(CW$integer\fP"
.IX Subsection "_NONNEGINT $integer"
The \f(CW\*(C`_NONNEGINT\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a non-negative integer (of any length). That is, a positive integer,
or zero.
.PP
Returns the value as a convience, or \f(CW\*(C`undef\*(C'\fR if the value is not a
non-negative integer.
.PP
As with other tests that may return false values, care should be taken
to test via \*(L"defined\*(R" in boolean validy contexts.
.PP
.Vb 3
\&  unless ( defined _NONNEGINT($value) ) {
\&     die "Invalid value";
\&  }
.Ve
.PP
The name itself is derived from the \s-1XML\s0 schema constraint of the same
name.
.SS "_SCALAR \e$scalar"
.IX Subsection "_SCALAR $scalar"
The \f(CW\*(C`_SCALAR\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`SCALAR\*(C'\fR reference, with content of non-zero length.
.PP
For a version that allows zero length \f(CW\*(C`SCALAR\*(C'\fR references, see
the \f(CW\*(C`_SCALAR0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`SCALAR\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not a \f(CW\*(C`SCALAR\*(C'\fR reference.
.SS "_SCALAR0 \e$scalar"
.IX Subsection "_SCALAR0 $scalar"
The \f(CW\*(C`_SCALAR0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`SCALAR0\*(C'\fR reference, allowing content of zero-length.
.PP
For a simpler \*(L"give me some content\*(R" version that requires non-zero
length, \f(CW\*(C`_SCALAR\*(C'\fR function.
.PP
Returns the \f(CW\*(C`SCALAR\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not a \f(CW\*(C`SCALAR\*(C'\fR reference.
.ie n .SS "_ARRAY $value"
.el .SS "_ARRAY \f(CW$value\fP"
.IX Subsection "_ARRAY $value"
The \f(CW\*(C`_ARRAY\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`ARRAY\*(C'\fR reference containing \fBat least\fR one element of any kind.
.PP
For a more basic form that allows zero length \s-1ARRAY\s0 references, see
the \f(CW\*(C`_ARRAY0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`ARRAY\*(C'\fR reference.
.ie n .SS "_ARRAY0 $value"
.el .SS "_ARRAY0 \f(CW$value\fP"
.IX Subsection "_ARRAY0 $value"
The \f(CW\*(C`_ARRAY0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`ARRAY\*(C'\fR reference, allowing \f(CW\*(C`ARRAY\*(C'\fR references that contain no
elements.
.PP
For a more basic \*(L"An array of something\*(R" form that also requires at
least one element, see the \f(CW\*(C`_ARRAY\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`ARRAY\*(C'\fR reference.
.ie n .SS "_ARRAYLIKE $value"
.el .SS "_ARRAYLIKE \f(CW$value\fP"
.IX Subsection "_ARRAYLIKE $value"
The \f(CW\*(C`_ARRAYLIKE\*(C'\fR function tests whether a given scalar value can respond to
array dereferencing.  If it can, the value is returned.  If it cannot,
\&\f(CW\*(C`_ARRAYLIKE\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR.
.ie n .SS "_HASH $value"
.el .SS "_HASH \f(CW$value\fP"
.IX Subsection "_HASH $value"
The \f(CW\*(C`_HASH\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`HASH\*(C'\fR reference with at least one entry.
.PP
For a version of this function that allows the \f(CW\*(C`HASH\*(C'\fR to be empty,
see the \f(CW\*(C`_HASH0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`HASH\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`HASH\*(C'\fR reference.
.ie n .SS "_HASH0 $value"
.el .SS "_HASH0 \f(CW$value\fP"
.IX Subsection "_HASH0 $value"
The \f(CW\*(C`_HASH0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`HASH\*(C'\fR reference, regardless of the \f(CW\*(C`HASH\*(C'\fR content.
.PP
For a simpler \*(L"A hash of something\*(R" version that requires at least one
element, see the \f(CW\*(C`_HASH\*(C'\fR function.
.PP
Returns the \f(CW\*(C`HASH\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`HASH\*(C'\fR reference.
.ie n .SS "_HASHLIKE $value"
.el .SS "_HASHLIKE \f(CW$value\fP"
.IX Subsection "_HASHLIKE $value"
The \f(CW\*(C`_HASHLIKE\*(C'\fR function tests whether a given scalar value can respond to
hash dereferencing.  If it can, the value is returned.  If it cannot,
\&\f(CW\*(C`_HASHLIKE\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR.
.ie n .SS "_CODE $value"
.el .SS "_CODE \f(CW$value\fP"
.IX Subsection "_CODE $value"
The \f(CW\*(C`_CODE\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`CODE\*(C'\fR reference.
.PP
Returns the \f(CW\*(C`CODE\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`CODE\*(C'\fR reference.
.ie n .SS "_CODELIKE $value"
.el .SS "_CODELIKE \f(CW$value\fP"
.IX Subsection "_CODELIKE $value"
The \f(CW\*(C`_CODELIKE\*(C'\fR is the more generic version of \f(CW\*(C`_CODE\*(C'\fR. Unlike \f(CW\*(C`_CODE\*(C'\fR,
which checks for an explicit \f(CW\*(C`CODE\*(C'\fR reference, the \f(CW\*(C`_CODELIKE\*(C'\fR function
also includes things that act like them, such as blessed objects that
overload \f(CW\*(Aq&{}\*(Aq\fR.
.PP
Please note that in the case of objects overloaded with '&{}', you will
almost always end up also testing it in 'bool' context at some stage.
.PP
For example:
.PP
.Vb 7
\&  sub foo {
\&      my $code1 = _CODELIKE(shift) or die "No code param provided";
\&      my $code2 = _CODELIKE(shift);
\&      if ( $code2 ) {
\&           print "Got optional second code param";
\&      }
\&  }
.Ve
.PP
As such, you will most likely always want to make sure your class has
at least the following to allow it to evaluate to true in boolean
context.
.PP
.Vb 2
\&  # Always evaluate to true in boolean context
\&  use overload \*(Aqbool\*(Aq => sub () { 1 };
.Ve
.PP
Returns the callable value as a convenience, or \f(CW\*(C`undef\*(C'\fR if the
value provided is not callable.
.PP
Note \- This function was formerly known as _CALLABLE but has been renamed
for greater symmetry with the other _XXXXLIKE functions.
.PP
The use of _CALLABLE has been deprecated. It will continue to work, but
with a warning, until end\-2006, then will be removed.
.PP
I apologise for any inconvenience caused.
.ie n .SS "_INVOCANT $value"
.el .SS "_INVOCANT \f(CW$value\fP"
.IX Subsection "_INVOCANT $value"
This routine tests whether the given value is a valid method invocant.
This can be either an instance of an object, or a class name.
.PP
If so, the value itself is returned.  Otherwise, \f(CW\*(C`_INVOCANT\*(C'\fR
returns \f(CW\*(C`undef\*(C'\fR.
.ie n .SS "_INSTANCE $object, $class"
.el .SS "_INSTANCE \f(CW$object\fP, \f(CW$class\fP"
.IX Subsection "_INSTANCE $object, $class"
The \f(CW\*(C`_INSTANCE\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for an object of a particular class
in a strictly correct manner.
.PP
Returns the object itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if the value
provided is not an object of that type.
.ie n .SS "_INSTANCEDOES $object, $role"
.el .SS "_INSTANCEDOES \f(CW$object\fP, \f(CW$role\fP"
.IX Subsection "_INSTANCEDOES $object, $role"
This routine behaves exactly like \f(CW"_INSTANCE"\fR, but checks with \f(CW\*(C`\->DOES\*(C'\fR rather than \f(CW\*(C`\->isa\*(C'\fR.  This is probably only a good idea to use on Perl
5.10 or later, when \s-1UNIVERSAL::DOES\s0 has been
implemented.
.ie n .SS "_REGEX $value"
.el .SS "_REGEX \f(CW$value\fP"
.IX Subsection "_REGEX $value"
The \f(CW\*(C`_REGEX\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a regular expression.
.PP
Returns the value itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if the value
provided is not a regular expression.
.ie n .SS "_SET \e@array, $class"
.el .SS "_SET \e@array, \f(CW$class\fP"
.IX Subsection "_SET @array, $class"
The \f(CW\*(C`_SET\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for set of at least one object of
a particular class in a strictly correct manner.
.PP
The set is provided as a reference to an \f(CW\*(C`ARRAY\*(C'\fR of objects of the
class provided.
.PP
For an alternative function that allows zero-length sets, see the
\&\f(CW\*(C`_SET0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if
the value provided is not a set of that class.
.ie n .SS "_SET0 \e@array, $class"
.el .SS "_SET0 \e@array, \f(CW$class\fP"
.IX Subsection "_SET0 @array, $class"
The \f(CW\*(C`_SET0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a set of objects of a
particular class in a strictly correct manner, allowing for zero objects.
.PP
The set is provided as a reference to an \f(CW\*(C`ARRAY\*(C'\fR of objects of the
class provided.
.PP
For an alternative function that requires at least one object, see the
\&\f(CW\*(C`_SET\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if
the value provided is not a set of that class.
.SS "_HANDLE"
.IX Subsection "_HANDLE"
The \f(CW\*(C`_HANDLE\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test whether or not a single scalar
value is a file handle.
.PP
Unfortunately, in Perl the definition of a file handle can be a little
bit fuzzy, so this function is likely to be somewhat imperfect (at first
anyway).
.PP
That said, it is implement as well or better than the other file handle
detectors in existance (and we stole from the best of them).
.ie n .SS "_DRIVER $string"
.el .SS "_DRIVER \f(CW$string\fP"
.IX Subsection "_DRIVER $string"
.Vb 4
\&  sub foo {
\&    my $class = _DRIVER(shift, \*(AqMy::Driver::Base\*(Aq) or die "Bad driver";
\&    ...
\&  }
.Ve
.PP
The \f(CW\*(C`_DRIVER\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to load and validate
a driver class.
.PP
The most common pattern when taking a driver class as a parameter
is to check that the name is a class (i.e. check against _CLASS)
and then to load the class (if it exists) and then ensure that
the class returns true for the isa method on some base driver name.
.PP
Return the value as a convenience, or \f(CW\*(C`undef\*(C'\fR if the value is not
a class name, the module does not exist, the module does not load,
or the class fails the isa test.
.SH "TO DO"
.IX Header "TO DO"
\&\- Add _CAN to help resolve the UNIVERSAL::can debacle
.PP
\&\- Would be even nicer if someone would demonstrate how the hell to
build a Module::Install dist of the ::Util dual Perl/XS type. :/
.PP
\&\- Implement an assertion-like version of this module, that dies on
error.
.PP
\&\- Implement a Test:: version of this module, for use in testing
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Params\-Util <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Params-Util>
.PP
For other issues, contact the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Params::Validate
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005 \- 2012 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Params::Util5.18.3pm                         0100644 0001750 0001750 00000054656 12566242071 024077  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Params::Util 3"
.TH Params::Util 3 "2012-03-10" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Params::Util \- Simple, compact and correct param\-checking functions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Import some functions
\&  use Params::Util qw{_SCALAR _HASH _INSTANCE};
\&  
\&  # If you are lazy, or need a lot of them...
\&  use Params::Util \*(Aq:ALL\*(Aq;
\&  
\&  sub foo {
\&      my $object  = _INSTANCE(shift, \*(AqFoo\*(Aq) or return undef;
\&      my $image   = _SCALAR(shift)          or return undef;
\&      my $options = _HASH(shift)            or return undef;
\&      # etc...
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Params::Util\*(C'\fR provides a basic set of importable functions that makes
checking parameters a hell of a lot easier
.PP
While they can be (and are) used in other contexts, the main point
behind this module is that the functions \fBboth\fR Do What You Mean,
and Do The Right Thing, so they are most useful when you are getting
params passed into your code from someone and/or somewhere else
and you can't really trust the quality.
.PP
Thus, \f(CW\*(C`Params::Util\*(C'\fR is of most use at the edges of your \s-1API,\s0 where
params and data are coming in from outside your code.
.PP
The functions provided by \f(CW\*(C`Params::Util\*(C'\fR check in the most strictly
correct manner known, are documented as thoroughly as possible so their
exact behaviour is clear, and heavily tested so make sure they are not
fooled by weird data and Really Bad Things.
.PP
To use, simply load the module providing the functions you want to use
as arguments (as shown in the \s-1SYNOPSIS\s0).
.PP
To aid in maintainability, \f(CW\*(C`Params::Util\*(C'\fR will \fBnever\fR export by
default.
.PP
You must explicitly name the functions you want to export, or use the
\&\f(CW\*(C`:ALL\*(C'\fR param to just have it export everything (although this is not
recommended if you have any _FOO functions yourself with which future
additions to \f(CW\*(C`Params::Util\*(C'\fR may clash)
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "_STRING $string"
.el .SS "_STRING \f(CW$string\fP"
.IX Subsection "_STRING $string"
The \f(CW\*(C`_STRING\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a normal non-false string of non-zero length.
.PP
Note that this will \s-1NOT\s0 do anything magic to deal with the special
\&\f(CW\*(Aq0\*(Aq\fR false negative case, but will return it.
.PP
.Vb 2
\&  # \*(Aq0\*(Aq not considered valid data
\&  my $name = _STRING(shift) or die "Bad name";
\&  
\&  # \*(Aq0\*(Aq is considered valid data
\&  my $string = _STRING($_[0]) ? shift : die "Bad string";
.Ve
.PP
Please also note that this function expects a normal string. It does
not support overloading or other magic techniques to get a string.
.PP
Returns the string as a conveince if it is a valid string, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_IDENTIFIER $string"
.el .SS "_IDENTIFIER \f(CW$string\fP"
.IX Subsection "_IDENTIFIER $string"
The \f(CW\*(C`_IDENTIFIER\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a string that is a valid Perl identifier.
.PP
Returns the string as a convenience if it is a valid identifier, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_CLASS $string"
.el .SS "_CLASS \f(CW$string\fP"
.IX Subsection "_CLASS $string"
The \f(CW\*(C`_CLASS\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a string that is a valid Perl class.
.PP
This function only checks that the format is valid, not that the
class is actually loaded. It also assumes \*(L"normalised\*(R" form, and does
not accept class names such as \f(CW\*(C`::Foo\*(C'\fR or \f(CW\*(C`D\*(AqOh\*(C'\fR.
.PP
Returns the string as a convenience if it is a valid class name, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_CLASSISA $string, $class"
.el .SS "_CLASSISA \f(CW$string\fP, \f(CW$class\fP"
.IX Subsection "_CLASSISA $string, $class"
The \f(CW\*(C`_CLASSISA\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a string that is a particularly class, or a subclass of it.
.PP
This function checks that the format is valid and calls the \->isa
method on the class name. It does not check that the class is actually
loaded.
.PP
It also assumes \*(L"normalised\*(R" form, and does
not accept class names such as \f(CW\*(C`::Foo\*(C'\fR or \f(CW\*(C`D\*(AqOh\*(C'\fR.
.PP
Returns the string as a convenience if it is a valid class name, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_CLASSDOES $string, $role"
.el .SS "_CLASSDOES \f(CW$string\fP, \f(CW$role\fP"
.IX Subsection "_CLASSDOES $string, $role"
This routine behaves exactly like \f(CW"_CLASSISA"\fR, but checks with \f(CW\*(C`\->DOES\*(C'\fR rather than \f(CW\*(C`\->isa\*(C'\fR.  This is probably only a good idea to use on Perl
5.10 or later, when \s-1UNIVERSAL::DOES\s0 has been
implemented.
.ie n .SS "_SUBCLASS $string, $class"
.el .SS "_SUBCLASS \f(CW$string\fP, \f(CW$class\fP"
.IX Subsection "_SUBCLASS $string, $class"
The \f(CW\*(C`_SUBCLASS\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a string that is a subclass of a specified class.
.PP
This function checks that the format is valid and calls the \->isa
method on the class name. It does not check that the class is actually
loaded.
.PP
It also assumes \*(L"normalised\*(R" form, and does
not accept class names such as \f(CW\*(C`::Foo\*(C'\fR or \f(CW\*(C`D\*(AqOh\*(C'\fR.
.PP
Returns the string as a convenience if it is a valid class name, or
\&\f(CW\*(C`undef\*(C'\fR if not.
.ie n .SS "_NUMBER $scalar"
.el .SS "_NUMBER \f(CW$scalar\fP"
.IX Subsection "_NUMBER $scalar"
The \f(CW\*(C`_NUMBER\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a number. That is, it is defined and perl thinks it's a number.
.PP
This function is basically a Params::Util\-style wrapper around the
Scalar::Util \f(CW\*(C`looks_like_number\*(C'\fR function.
.PP
Returns the value as a convience, or \f(CW\*(C`undef\*(C'\fR if the value is not a
number.
.ie n .SS "_POSINT $integer"
.el .SS "_POSINT \f(CW$integer\fP"
.IX Subsection "_POSINT $integer"
The \f(CW\*(C`_POSINT\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a positive integer (of any length).
.PP
Returns the value as a convience, or \f(CW\*(C`undef\*(C'\fR if the value is not a
positive integer.
.PP
The name itself is derived from the \s-1XML\s0 schema constraint of the same
name.
.ie n .SS "_NONNEGINT $integer"
.el .SS "_NONNEGINT \f(CW$integer\fP"
.IX Subsection "_NONNEGINT $integer"
The \f(CW\*(C`_NONNEGINT\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to test to see if a value is
a non-negative integer (of any length). That is, a positive integer,
or zero.
.PP
Returns the value as a convience, or \f(CW\*(C`undef\*(C'\fR if the value is not a
non-negative integer.
.PP
As with other tests that may return false values, care should be taken
to test via \*(L"defined\*(R" in boolean validy contexts.
.PP
.Vb 3
\&  unless ( defined _NONNEGINT($value) ) {
\&     die "Invalid value";
\&  }
.Ve
.PP
The name itself is derived from the \s-1XML\s0 schema constraint of the same
name.
.SS "_SCALAR \e$scalar"
.IX Subsection "_SCALAR $scalar"
The \f(CW\*(C`_SCALAR\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`SCALAR\*(C'\fR reference, with content of non-zero length.
.PP
For a version that allows zero length \f(CW\*(C`SCALAR\*(C'\fR references, see
the \f(CW\*(C`_SCALAR0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`SCALAR\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not a \f(CW\*(C`SCALAR\*(C'\fR reference.
.SS "_SCALAR0 \e$scalar"
.IX Subsection "_SCALAR0 $scalar"
The \f(CW\*(C`_SCALAR0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`SCALAR0\*(C'\fR reference, allowing content of zero-length.
.PP
For a simpler \*(L"give me some content\*(R" version that requires non-zero
length, \f(CW\*(C`_SCALAR\*(C'\fR function.
.PP
Returns the \f(CW\*(C`SCALAR\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not a \f(CW\*(C`SCALAR\*(C'\fR reference.
.ie n .SS "_ARRAY $value"
.el .SS "_ARRAY \f(CW$value\fP"
.IX Subsection "_ARRAY $value"
The \f(CW\*(C`_ARRAY\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`ARRAY\*(C'\fR reference containing \fBat least\fR one element of any kind.
.PP
For a more basic form that allows zero length \s-1ARRAY\s0 references, see
the \f(CW\*(C`_ARRAY0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`ARRAY\*(C'\fR reference.
.ie n .SS "_ARRAY0 $value"
.el .SS "_ARRAY0 \f(CW$value\fP"
.IX Subsection "_ARRAY0 $value"
The \f(CW\*(C`_ARRAY0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`ARRAY\*(C'\fR reference, allowing \f(CW\*(C`ARRAY\*(C'\fR references that contain no
elements.
.PP
For a more basic \*(L"An array of something\*(R" form that also requires at
least one element, see the \f(CW\*(C`_ARRAY\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`ARRAY\*(C'\fR reference.
.ie n .SS "_ARRAYLIKE $value"
.el .SS "_ARRAYLIKE \f(CW$value\fP"
.IX Subsection "_ARRAYLIKE $value"
The \f(CW\*(C`_ARRAYLIKE\*(C'\fR function tests whether a given scalar value can respond to
array dereferencing.  If it can, the value is returned.  If it cannot,
\&\f(CW\*(C`_ARRAYLIKE\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR.
.ie n .SS "_HASH $value"
.el .SS "_HASH \f(CW$value\fP"
.IX Subsection "_HASH $value"
The \f(CW\*(C`_HASH\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`HASH\*(C'\fR reference with at least one entry.
.PP
For a version of this function that allows the \f(CW\*(C`HASH\*(C'\fR to be empty,
see the \f(CW\*(C`_HASH0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`HASH\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`HASH\*(C'\fR reference.
.ie n .SS "_HASH0 $value"
.el .SS "_HASH0 \f(CW$value\fP"
.IX Subsection "_HASH0 $value"
The \f(CW\*(C`_HASH0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`HASH\*(C'\fR reference, regardless of the \f(CW\*(C`HASH\*(C'\fR content.
.PP
For a simpler \*(L"A hash of something\*(R" version that requires at least one
element, see the \f(CW\*(C`_HASH\*(C'\fR function.
.PP
Returns the \f(CW\*(C`HASH\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`HASH\*(C'\fR reference.
.ie n .SS "_HASHLIKE $value"
.el .SS "_HASHLIKE \f(CW$value\fP"
.IX Subsection "_HASHLIKE $value"
The \f(CW\*(C`_HASHLIKE\*(C'\fR function tests whether a given scalar value can respond to
hash dereferencing.  If it can, the value is returned.  If it cannot,
\&\f(CW\*(C`_HASHLIKE\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR.
.ie n .SS "_CODE $value"
.el .SS "_CODE \f(CW$value\fP"
.IX Subsection "_CODE $value"
The \f(CW\*(C`_CODE\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a raw and unblessed
\&\f(CW\*(C`CODE\*(C'\fR reference.
.PP
Returns the \f(CW\*(C`CODE\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR
if the value provided is not an \f(CW\*(C`CODE\*(C'\fR reference.
.ie n .SS "_CODELIKE $value"
.el .SS "_CODELIKE \f(CW$value\fP"
.IX Subsection "_CODELIKE $value"
The \f(CW\*(C`_CODELIKE\*(C'\fR is the more generic version of \f(CW\*(C`_CODE\*(C'\fR. Unlike \f(CW\*(C`_CODE\*(C'\fR,
which checks for an explicit \f(CW\*(C`CODE\*(C'\fR reference, the \f(CW\*(C`_CODELIKE\*(C'\fR function
also includes things that act like them, such as blessed objects that
overload \f(CW\*(Aq&{}\*(Aq\fR.
.PP
Please note that in the case of objects overloaded with '&{}', you will
almost always end up also testing it in 'bool' context at some stage.
.PP
For example:
.PP
.Vb 7
\&  sub foo {
\&      my $code1 = _CODELIKE(shift) or die "No code param provided";
\&      my $code2 = _CODELIKE(shift);
\&      if ( $code2 ) {
\&           print "Got optional second code param";
\&      }
\&  }
.Ve
.PP
As such, you will most likely always want to make sure your class has
at least the following to allow it to evaluate to true in boolean
context.
.PP
.Vb 2
\&  # Always evaluate to true in boolean context
\&  use overload \*(Aqbool\*(Aq => sub () { 1 };
.Ve
.PP
Returns the callable value as a convenience, or \f(CW\*(C`undef\*(C'\fR if the
value provided is not callable.
.PP
Note \- This function was formerly known as _CALLABLE but has been renamed
for greater symmetry with the other _XXXXLIKE functions.
.PP
The use of _CALLABLE has been deprecated. It will continue to work, but
with a warning, until end\-2006, then will be removed.
.PP
I apologise for any inconvenience caused.
.ie n .SS "_INVOCANT $value"
.el .SS "_INVOCANT \f(CW$value\fP"
.IX Subsection "_INVOCANT $value"
This routine tests whether the given value is a valid method invocant.
This can be either an instance of an object, or a class name.
.PP
If so, the value itself is returned.  Otherwise, \f(CW\*(C`_INVOCANT\*(C'\fR
returns \f(CW\*(C`undef\*(C'\fR.
.ie n .SS "_INSTANCE $object, $class"
.el .SS "_INSTANCE \f(CW$object\fP, \f(CW$class\fP"
.IX Subsection "_INSTANCE $object, $class"
The \f(CW\*(C`_INSTANCE\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for an object of a particular class
in a strictly correct manner.
.PP
Returns the object itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if the value
provided is not an object of that type.
.ie n .SS "_INSTANCEDOES $object, $role"
.el .SS "_INSTANCEDOES \f(CW$object\fP, \f(CW$role\fP"
.IX Subsection "_INSTANCEDOES $object, $role"
This routine behaves exactly like \f(CW"_INSTANCE"\fR, but checks with \f(CW\*(C`\->DOES\*(C'\fR rather than \f(CW\*(C`\->isa\*(C'\fR.  This is probably only a good idea to use on Perl
5.10 or later, when \s-1UNIVERSAL::DOES\s0 has been
implemented.
.ie n .SS "_REGEX $value"
.el .SS "_REGEX \f(CW$value\fP"
.IX Subsection "_REGEX $value"
The \f(CW\*(C`_REGEX\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a regular expression.
.PP
Returns the value itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if the value
provided is not a regular expression.
.ie n .SS "_SET \e@array, $class"
.el .SS "_SET \e@array, \f(CW$class\fP"
.IX Subsection "_SET @array, $class"
The \f(CW\*(C`_SET\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for set of at least one object of
a particular class in a strictly correct manner.
.PP
The set is provided as a reference to an \f(CW\*(C`ARRAY\*(C'\fR of objects of the
class provided.
.PP
For an alternative function that allows zero-length sets, see the
\&\f(CW\*(C`_SET0\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if
the value provided is not a set of that class.
.ie n .SS "_SET0 \e@array, $class"
.el .SS "_SET0 \e@array, \f(CW$class\fP"
.IX Subsection "_SET0 @array, $class"
The \f(CW\*(C`_SET0\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test for a set of objects of a
particular class in a strictly correct manner, allowing for zero objects.
.PP
The set is provided as a reference to an \f(CW\*(C`ARRAY\*(C'\fR of objects of the
class provided.
.PP
For an alternative function that requires at least one object, see the
\&\f(CW\*(C`_SET\*(C'\fR function.
.PP
Returns the \f(CW\*(C`ARRAY\*(C'\fR reference itself as a convenience, or \f(CW\*(C`undef\*(C'\fR if
the value provided is not a set of that class.
.SS "_HANDLE"
.IX Subsection "_HANDLE"
The \f(CW\*(C`_HANDLE\*(C'\fR function is intended to be imported into your package,
and provides a convenient way to test whether or not a single scalar
value is a file handle.
.PP
Unfortunately, in Perl the definition of a file handle can be a little
bit fuzzy, so this function is likely to be somewhat imperfect (at first
anyway).
.PP
That said, it is implement as well or better than the other file handle
detectors in existance (and we stole from the best of them).
.ie n .SS "_DRIVER $string"
.el .SS "_DRIVER \f(CW$string\fP"
.IX Subsection "_DRIVER $string"
.Vb 4
\&  sub foo {
\&    my $class = _DRIVER(shift, \*(AqMy::Driver::Base\*(Aq) or die "Bad driver";
\&    ...
\&  }
.Ve
.PP
The \f(CW\*(C`_DRIVER\*(C'\fR function is intended to be imported into your
package, and provides a convenient way to load and validate
a driver class.
.PP
The most common pattern when taking a driver class as a parameter
is to check that the name is a class (i.e. check against _CLASS)
and then to load the class (if it exists) and then ensure that
the class returns true for the isa method on some base driver name.
.PP
Return the value as a convenience, or \f(CW\*(C`undef\*(C'\fR if the value is not
a class name, the module does not exist, the module does not load,
or the class fails the isa test.
.SH "TO DO"
.IX Header "TO DO"
\&\- Add _CAN to help resolve the UNIVERSAL::can debacle
.PP
\&\- Would be even nicer if someone would demonstrate how the hell to
build a Module::Install dist of the ::Util dual Perl/XS type. :/
.PP
\&\- Implement an assertion-like version of this module, that dies on
error.
.PP
\&\- Implement a Test:: version of this module, for use in testing
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Params\-Util>
.PP
For other issues, contact the author.
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Params::Validate
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2005 \- 2012 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Params::Validate.3pm                         0100644 0001750 0001750 00000072607 12566242316 024375  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Params::Validate 3"
.TH Params::Validate 3 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Params::Validate \- Validate method/function parameters
.SH "VERSION"
.IX Header "VERSION"
version 1.08
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Params::Validate qw(:all);
\&
\&    # takes named params (hash or hashref)
\&    sub foo {
\&        validate(
\&            @_, {
\&                foo => 1,    # mandatory
\&                bar => 0,    # optional
\&            }
\&        );
\&    }
\&
\&    # takes positional params
\&    sub bar {
\&        # first two are mandatory, third is optional
\&        validate_pos( @_, 1, 1, 0 );
\&    }
\&
\&    sub foo2 {
\&        validate(
\&            @_, {
\&                foo =>
\&                    # specify a type
\&                    { type => ARRAYREF },
\&                bar =>
\&                    # specify an interface
\&                    { can => [ \*(Aqprint\*(Aq, \*(Aqflush\*(Aq, \*(Aqfrobnicate\*(Aq ] },
\&                baz => {
\&                    type      => SCALAR,     # a scalar ...
\&                                             # ... that is a plain integer ...
\&                    regex     => qr/^\ed+$/,
\&                    callbacks => {           # ... and smaller than 90
\&                        \*(Aqless than 90\*(Aq => sub { shift() < 90 },
\&                    },
\&                }
\&            }
\&        );
\&    }
\&
\&    sub with_defaults {
\&        my %p = validate(
\&            @_, {
\&                # required
\&                foo => 1,
\&                # $p{bar} will be 99 if bar is not given.  bar is now
\&                # optional.
\&                bar => { default => 99 }
\&            }
\&        );
\&    }
\&
\&    sub pos_with_defaults {
\&        my @p = validate_pos( @_, 1, { default => 99 } );
\&    }
\&
\&    sub sets_options_on_call {
\&        my %p = validate_with(
\&            params => \e@_,
\&            spec   => { foo => { type => SCALAR, default => 2 } },
\&            normalize_keys => sub { $_[0] =~ s/^\-//; lc $_[0] },
\&        );
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Params::Validate module allows you to validate method or function
call parameters to an arbitrary level of specificity.  At the simplest
level, it is capable of validating the required parameters were given
and that no unspecified additional parameters were passed in.
.PP
It is also capable of determining that a parameter is of a specific
type, that it is an object of a certain class hierarchy, that it
possesses certain methods, or applying validation callbacks to
arguments.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
The module always exports the \f(CW\*(C`validate()\*(C'\fR and \f(CW\*(C`validate_pos()\*(C'\fR
functions.
.PP
It also has an additional function available for export,
\&\f(CW\*(C`validate_with\*(C'\fR, which can be used to validate any type of
parameters, and set various options on a per-invocation basis.
.PP
In addition, it can export the following constants, which are used as
part of the type checking.  These are \f(CW\*(C`SCALAR\*(C'\fR, \f(CW\*(C`ARRAYREF\*(C'\fR,
\&\f(CW\*(C`HASHREF\*(C'\fR, \f(CW\*(C`CODEREF\*(C'\fR, \f(CW\*(C`GLOB\*(C'\fR, \f(CW\*(C`GLOBREF\*(C'\fR, and \f(CW\*(C`SCALARREF\*(C'\fR,
\&\f(CW\*(C`UNDEF\*(C'\fR, \f(CW\*(C`OBJECT\*(C'\fR, \f(CW\*(C`BOOLEAN\*(C'\fR, and \f(CW\*(C`HANDLE\*(C'\fR.  These are explained
in the section on Type Validation.
.PP
The constants are available via the export tag \f(CW\*(C`:types\*(C'\fR.  There is
also an \f(CW\*(C`:all\*(C'\fR tag which includes all of the constants as well as the
\&\f(CW\*(C`validation_options()\*(C'\fR function.
.SH "PARAMETER VALIDATION"
.IX Header "PARAMETER VALIDATION"
The validation mechanisms provided by this module can handle both
named or positional parameters.  For the most part, the same features
are available for each.  The biggest difference is the way that the
validation specification is given to the relevant subroutine.  The
other difference is in the error messages produced when validation
checks fail.
.PP
When handling named parameters, the module will accept either a hash
or a hash reference.
.PP
Subroutines expecting named parameters should call the \f(CW\*(C`validate()\*(C'\fR
subroutine like this:
.PP
.Vb 7
\&    validate(
\&        @_, {
\&            parameter1 => validation spec,
\&            parameter2 => validation spec,
\&            ...
\&        }
\&    );
.Ve
.PP
Subroutines expecting positional parameters should call the
\&\f(CW\*(C`validate_pos()\*(C'\fR subroutine like this:
.PP
.Vb 1
\&    validate_pos( @_, { validation spec }, { validation spec } );
.Ve
.SS "Mandatory/Optional Parameters"
.IX Subsection "Mandatory/Optional Parameters"
If you just want to specify that some parameters are mandatory and
others are optional, this can be done very simply.
.PP
For a subroutine expecting named parameters, you would do this:
.PP
.Vb 1
\&    validate( @_, { foo => 1, bar => 1, baz => 0 } );
.Ve
.PP
This says that the \*(L"foo\*(R" and \*(L"bar\*(R" parameters are mandatory and that
the \*(L"baz\*(R" parameter is optional.  The presence of any other
parameters will cause an error.
.PP
For a subroutine expecting positional parameters, you would do this:
.PP
.Vb 1
\&    validate_pos( @_, 1, 1, 0, 0 );
.Ve
.PP
This says that you expect at least 2 and no more than 4 parameters.
If you have a subroutine that has a minimum number of parameters but
can take any maximum number, you can do this:
.PP
.Vb 1
\&    validate_pos( @_, 1, 1, (0) x (@_ \- 2) );
.Ve
.PP
This will always be valid as long as at least two parameters are
given.  A similar construct could be used for the more complex
validation parameters described further on.
.PP
Please note that this:
.PP
.Vb 1
\&    validate_pos( @_, 1, 1, 0, 1, 1 );
.Ve
.PP
makes absolutely no sense, so don't do it.  Any zeros must come at the
end of the validation specification.
.PP
In addition, if you specify that a parameter can have a default, then
it is considered optional.
.SS "Type Validation"
.IX Subsection "Type Validation"
This module supports the following simple types, which can be
exported as constants:
.IP "\(bu" 4
\&\s-1SCALAR\s0
.Sp
A scalar which is not a reference, such as \f(CW10\fR or \f(CW\*(Aqhello\*(Aq\fR.  A
parameter that is undefined is \fBnot\fR treated as a scalar.  If you
want to allow undefined values, you will have to specify \f(CW\*(C`SCALAR |
UNDEF\*(C'\fR.
.IP "\(bu" 4
\&\s-1ARRAYREF\s0
.Sp
An array reference such as \f(CW\*(C`[1, 2, 3]\*(C'\fR or \f(CW\*(C`\e@foo\*(C'\fR.
.IP "\(bu" 4
\&\s-1HASHREF\s0
.Sp
A hash reference such as \f(CW\*(C`{ a => 1, b => 2 }\*(C'\fR or \f(CW\*(C`\e%bar\*(C'\fR.
.IP "\(bu" 4
\&\s-1CODEREF\s0
.Sp
A subroutine reference such as \f(CW\*(C`\e&foo_sub\*(C'\fR or \f(CW\*(C`sub { print "hello" }\*(C'\fR.
.IP "\(bu" 4
\&\s-1GLOB\s0
.Sp
This one is a bit tricky.  A glob would be something like \f(CW*FOO\fR, but
not \f(CW\*(C`\e*FOO\*(C'\fR, which is a glob reference.  It should be noted that this
trick:
.Sp
.Vb 1
\&    my $fh = do { local *FH; };
.Ve
.Sp
makes \f(CW$fh\fR a glob, not a glob reference.  On the other hand, the
return value from \f(CW\*(C`Symbol::gensym\*(C'\fR is a glob reference.  Either can
be used as a file or directory handle.
.IP "\(bu" 4
\&\s-1GLOBREF\s0
.Sp
A glob reference such as \f(CW\*(C`\e*FOO\*(C'\fR.  See the \s-1GLOB\s0 entry above
for more details.
.IP "\(bu" 4
\&\s-1SCALARREF\s0
.Sp
A reference to a scalar such as \f(CW\*(C`\e$x\*(C'\fR.
.IP "\(bu" 4
\&\s-1UNDEF\s0
.Sp
An undefined value
.IP "\(bu" 4
\&\s-1OBJECT\s0
.Sp
A blessed reference.
.IP "\(bu" 4
\&\s-1BOOLEAN\s0
.Sp
This is a special option, and is just a shortcut for \f(CW\*(C`UNDEF | SCALAR\*(C'\fR.
.IP "\(bu" 4
\&\s-1HANDLE\s0
.Sp
This option is also special, and is just a shortcut for \f(CW\*(C`GLOB |
GLOBREF\*(C'\fR.  However, it seems likely that most people interested in
either globs or glob references are likely to really be interested in
whether the parameter in question could be a valid file or directory
handle.
.PP
To specify that a parameter must be of a given type when using named
parameters, do this:
.PP
.Vb 6
\&    validate(
\&        @_, {
\&            foo => { type => SCALAR },
\&            bar => { type => HASHREF }
\&        }
\&    );
.Ve
.PP
If a parameter can be of more than one type, just use the bitwise or
(\f(CW\*(C`|\*(C'\fR) operator to combine them.
.PP
.Vb 1
\&    validate( @_, { foo => { type => GLOB | GLOBREF } );
.Ve
.PP
For positional parameters, this can be specified as follows:
.PP
.Vb 1
\&    validate_pos( @_, { type => SCALAR | ARRAYREF }, { type => CODEREF } );
.Ve
.SS "Interface Validation"
.IX Subsection "Interface Validation"
To specify that a parameter is expected to have a certain set of
methods, we can do the following:
.PP
.Vb 7
\&    validate(
\&        @_, {
\&            foo =>
\&                # just has to be able to \->bar
\&                { can => \*(Aqbar\*(Aq }
\&        }
\&    );
\&
\& ... or ...
\&
\&    validate(
\&        @_, {
\&            foo =>
\&                # must be able to \->bar and \->print
\&                { can => [qw( bar print )] }
\&        }
\&    );
.Ve
.SS "Class Validation"
.IX Subsection "Class Validation"
A word of warning.  When constructing your external interfaces, it is
probably better to specify what methods you expect an object to
have rather than what class it should be of (or a child of).  This
will make your \s-1API\s0 much more flexible.
.PP
With that said, if you want to validate that an incoming parameter
belongs to a class (or child class) or classes, do:
.PP
.Vb 4
\&    validate(
\&        @_,
\&        { foo => { isa => \*(AqMy::Frobnicator\*(Aq } }
\&    );
\&
\& ... or ...
\&
\&    validate(
\&        @_,
\&        # must be both, not either!
\&        { foo => { isa => [qw( My::Frobnicator IO::Handle )] } }
\&    );
.Ve
.SS "Regex Validation"
.IX Subsection "Regex Validation"
If you want to specify that a given parameter must match a specific
regular expression, this can be done with \*(L"regex\*(R" spec key.  For
example:
.PP
.Vb 4
\&    validate(
\&        @_,
\&        { foo => { regex => qr/^\ed+$/ } }
\&    );
.Ve
.PP
The value of the \*(L"regex\*(R" key may be either a string or a pre-compiled
regex created via \f(CW\*(C`qr\*(C'\fR.
.PP
If the value being checked against a regex is undefined, the regex is
explicitly checked against the empty string ('') instead, in order to
avoid \*(L"Use of uninitialized value\*(R" warnings.
.PP
The \f(CW\*(C`Regexp::Common\*(C'\fR module on \s-1CPAN\s0 is an excellent source of regular
expressions suitable for validating input.
.SS "Callback Validation"
.IX Subsection "Callback Validation"
If none of the above are enough, it is possible to pass in one or more
callbacks to validate the parameter.  The callback will be given the
\&\fBvalue\fR of the parameter as its first argument.  Its second argument
will be all the parameters, as a reference to either a hash or array.
Callbacks are specified as hash reference.  The key is an id for the
callback (used in error messages) and the value is a subroutine
reference, such as:
.PP
.Vb 10
\&    validate(
\&        @_, {
\&            foo => {
\&                callbacks => {
\&                    \*(Aqsmaller than a breadbox\*(Aq => sub { shift() < $breadbox },
\&                    \*(Aqgreen or blue\*(Aq =>
\&                        sub { $_[0] eq \*(Aqgreen\*(Aq || $_[0] eq \*(Aqblue\*(Aq }
\&                }
\&            }
\&        );
\&
\&    validate(
\&        @_, {
\&            foo => {
\&                callbacks => {
\&                    \*(Aqbigger than baz\*(Aq => sub { $_[0] > $_[1]\->{baz} }
\&                }
\&            }
\&        }
\&    );
.Ve
.SS "Untainting"
.IX Subsection "Untainting"
If you want values untainted, set the \*(L"untaint\*(R" key in a spec hashref
to a true value, like this:
.PP
.Vb 6
\&    my %p = validate(
\&        @_, {
\&            foo => { type => SCALAR, untaint => 1 },
\&            bar => { type => ARRAYREF }
\&        }
\&    );
.Ve
.PP
This will untaint the \*(L"foo\*(R" parameter if the parameters are valid.
.PP
Note that untainting is only done if \fIall parameters\fR are valid.
Also, only the return values are untainted, not the original values
passed into the validation function.
.PP
Asking for untainting of a reference value will not do anything, as
\&\f(CW\*(C`Params::Validate\*(C'\fR will only attempt to untaint the reference itself.
.SS "Mandatory/Optional Revisited"
.IX Subsection "Mandatory/Optional Revisited"
If you want to specify something such as type or interface, plus the
fact that a parameter can be optional, do this:
.PP
.Vb 6
\&    validate(
\&        @_, {
\&            foo => { type => SCALAR },
\&            bar => { type => ARRAYREF, optional => 1 }
\&        }
\&    );
.Ve
.PP
or this for positional parameters:
.PP
.Vb 5
\&    validate_pos(
\&        @_,
\&        { type => SCALAR },
\&        { type => ARRAYREF, optional => 1 }
\&    );
.Ve
.PP
By default, parameters are assumed to be mandatory unless specified as
optional.
.SS "Dependencies"
.IX Subsection "Dependencies"
It also possible to specify that a given optional parameter depends on
the presence of one or more other optional parameters.
.PP
.Vb 11
\&    validate(
\&        @_, {
\&            cc_number => {
\&                type     => SCALAR,
\&                optional => 1,
\&                depends  => [ \*(Aqcc_expiration\*(Aq, \*(Aqcc_holder_name\*(Aq ],
\&            },
\&            cc_expiration  { type => SCALAR, optional => 1 },
\&            cc_holder_name { type => SCALAR, optional => 1 },
\&        }
\&    );
.Ve
.PP
In this case, \*(L"cc_number\*(R", \*(L"cc_expiration\*(R", and \*(L"cc_holder_name\*(R" are
all optional.  However, if \*(L"cc_number\*(R" is provided, then
\&\*(L"cc_expiration\*(R" and \*(L"cc_holder_name\*(R" must be provided as well.
.PP
This allows you to group together sets of parameters that all must be
provided together.
.PP
The \f(CW\*(C`validate_pos()\*(C'\fR version of dependencies is slightly different,
in that you can only depend on one other parameter.  Also, if for
example, the second parameter 2 depends on the fourth parameter, then
it implies a dependency on the third parameter as well.  This is
because if the fourth parameter is required, then the user must also
provide a third parameter so that there can be four parameters in
total.
.PP
\&\f(CW\*(C`Params::Validate\*(C'\fR will die if you try to depend on a parameter not
declared as part of your parameter specification.
.SS "Specifying defaults"
.IX Subsection "Specifying defaults"
If the \f(CW\*(C`validate()\*(C'\fR or \f(CW\*(C`validate_pos()\*(C'\fR functions are called in a list
context, they will return a hash or containing the original parameters plus
defaults as indicated by the validation spec.
.PP
If the function is not called in a list context, providing a default
in the validation spec still indicates that the parameter is optional.
.PP
The hash or array returned from the function will always be a copy of
the original parameters, in order to leave \f(CW@_\fR untouched for the
calling function.
.PP
Simple examples of defaults would be:
.PP
.Vb 1
\&    my %p = validate( @_, { foo => 1, bar => { default => 99 } } );
\&
\&    my @p = validate_pos( @_, 1, { default => 99 } );
.Ve
.PP
In scalar context, a hash reference or array reference will be
returned, as appropriate.
.SH "USAGE NOTES"
.IX Header "USAGE NOTES"
.SS "Validation failure"
.IX Subsection "Validation failure"
By default, when validation fails \f(CW\*(C`Params::Validate\*(C'\fR calls
\&\f(CW\*(C`Carp::confess()\*(C'\fR.  This can be overridden by setting the \f(CW\*(C`on_fail\*(C'\fR
option, which is described in the \*(L"\s-1GLOBAL\*(R" OPTIONS\s0
section.
.SS "Method calls"
.IX Subsection "Method calls"
When using this module to validate the parameters passed to a method
call, you will probably want to remove the class/object from the
parameter list \fBbefore\fR calling \f(CW\*(C`validate()\*(C'\fR or \f(CW\*(C`validate_pos()\*(C'\fR.
If your method expects named parameters, then this is necessary for
the \f(CW\*(C`validate()\*(C'\fR function to actually work, otherwise \f(CW@_\fR will not
be usable as a hash, because it will first have your object (or
class) \fBfollowed\fR by a set of keys and values.
.PP
Thus the idiomatic usage of \f(CW\*(C`validate()\*(C'\fR in a method call will look
something like this:
.PP
.Vb 2
\&    sub method {
\&        my $self = shift;
\&
\&        my %params = validate(
\&            @_, {
\&                foo => 1,
\&                bar => { type => ARRAYREF },
\&            }
\&        );
\&    }
.Ve
.SS "Speeding Up Validation"
.IX Subsection "Speeding Up Validation"
In most cases, the validation spec will remain the same for each call to a
subroutine. In that case, you can speed up validation by defining the
validation spec just once, rather than on each call to the subroutine:
.PP
.Vb 4
\&    my %spec = ( ... );
\&    sub foo {
\&        my %params = validate( @_, \e%spec );
\&    }
.Ve
.PP
You can also use the \f(CW\*(C`state\*(C'\fR feature to do this:
.PP
.Vb 1
\&    use feature \*(Aqstate\*(Aq;
\&
\&    sub foo {
\&        state $spec = { ... };
\&        my %params = validate( @_, $spec );
\&    }
.Ve
.ie n .SH """GLOBAL"" OPTIONS"
.el .SH "``GLOBAL'' OPTIONS"
.IX Header "GLOBAL OPTIONS"
Because the \s-1API\s0 for the \f(CW\*(C`validate()\*(C'\fR and \f(CW\*(C`validate_pos()\*(C'\fR functions does not
make it possible to specify any options other than the validation spec, it is
possible to set some options as pseudo\-'globals'.  These allow you to specify
such things as whether or not the validation of named parameters should be
case sensitive, for one example.
.PP
These options are called pseudo\-'globals' because these settings are
\&\fBonly applied to calls originating from the package that set the
options\fR.
.PP
In other words, if I am in package \f(CW\*(C`Foo\*(C'\fR and I call
\&\f(CW\*(C`validation_options()\*(C'\fR, those options are only in effect when I call
\&\f(CW\*(C`validate()\*(C'\fR from package \f(CW\*(C`Foo\*(C'\fR.
.PP
While this is quite different from how most other modules operate, I
feel that this is necessary in able to make it possible for one
module/application to use Params::Validate while still using other
modules that also use Params::Validate, perhaps with different
options set.
.PP
The downside to this is that if you are writing an app with a standard
calling style for all functions, and your app has ten modules, \fBeach
module must include a call to \f(CB\*(C`validation_options()\*(C'\fB\fR. You could of
course write a module that all your modules use which uses various
trickery to do this when imported.
.SS "Options"
.IX Subsection "Options"
.IP "\(bu" 4
normalize_keys => \f(CW$callback\fR
.Sp
This option is only relevant when dealing with named parameters.
.Sp
This callback will be used to transform the hash keys of both the
parameters and the parameter spec when \f(CW\*(C`validate()\*(C'\fR or
\&\f(CW\*(C`validate_with()\*(C'\fR are called.
.Sp
Any alterations made by this callback will be reflected in the
parameter hash that is returned by the validation function.  For
example:
.Sp
.Vb 7
\&    sub foo {
\&        return validate_with(
\&            params => \e@_,
\&            spec   => { foo => { type => SCALAR } },
\&            normalize_keys =>
\&                sub { my $k = shift; $k =~ s/^\-//; return uc $k },
\&        );
\&
\&    }
\&
\&    %p = foo( foo => 20 );
\&
\&    # $p{FOO} is now 20
\&
\&    %p = foo( \-fOo => 50 );
\&
\&    # $p{FOO} is now 50
.Ve
.Sp
The callback must return a defined value.
.Sp
If a callback is given then the deprecated \*(L"ignore_case\*(R" and
\&\*(L"strip_leading\*(R" options are ignored.
.IP "\(bu" 4
allow_extra => \f(CW$boolean\fR
.Sp
If true, then the validation routine will allow extra parameters not
named in the validation specification.  In the case of positional
parameters, this allows an unlimited number of maximum parameters
(though a minimum may still be set).  Defaults to false.
.IP "\(bu" 4
on_fail => \f(CW$callback\fR
.Sp
If given, this callback will be called whenever a validation check
fails.  It will be called with a single parameter, which will be a
string describing the failure.  This is useful if you wish to have
this module throw exceptions as objects rather than as strings, for
example.
.Sp
This callback is expected to \f(CW\*(C`die()\*(C'\fR internally.  If it does not, the
validation will proceed onwards, with unpredictable results.
.Sp
The default is to simply use the Carp module's \f(CW\*(C`confess()\*(C'\fR function.
.IP "\(bu" 4
stack_skip => \f(CW$number\fR
.Sp
This tells Params::Validate how many stack frames to skip when finding
a subroutine name to use in error messages.  By default, it looks one
frame back, at the immediate caller to \f(CW\*(C`validate()\*(C'\fR or
\&\f(CW\*(C`validate_pos()\*(C'\fR.  If this option is set, then the given number of
frames are skipped instead.
.IP "\(bu" 4
ignore_case => \f(CW$boolean\fR
.Sp
\&\s-1DEPRECATED\s0
.Sp
This is only relevant when dealing with named parameters.  If it is
true, then the validation code will ignore the case of parameter
names.  Defaults to false.
.IP "\(bu" 4
strip_leading => \f(CW$characters\fR
.Sp
\&\s-1DEPRECATED\s0
.Sp
This too is only relevant when dealing with named parameters.  If this
is given then any parameters starting with these characters will be
considered equivalent to parameters without them entirely.  For
example, if this is specified as '\-', then \f(CW\*(C`\-foo\*(C'\fR and \f(CW\*(C`foo\*(C'\fR would be
considered identical.
.SH "PER-INVOCATION OPTIONS"
.IX Header "PER-INVOCATION OPTIONS"
The \f(CW\*(C`validate_with()\*(C'\fR function can be used to set the options listed
above on a per-invocation basis.  For example:
.PP
.Vb 8
\&    my %p = validate_with(
\&        params => \e@_,
\&        spec   => {
\&            foo => { type    => SCALAR },
\&            bar => { default => 10 }
\&        },
\&        allow_extra => 1,
\&    );
.Ve
.PP
In addition to the options listed above, it is also possible to set
the option \*(L"called\*(R", which should be a string.  This string will be
used in any error messages caused by a failure to meet the validation
spec.
.PP
This subroutine will validate named parameters as a hash if the \*(L"spec\*(R"
parameter is a hash reference.  If it is an array reference, the
parameters are assumed to be positional.
.PP
.Vb 9
\&    my %p = validate_with(
\&        params => \e@_,
\&        spec   => {
\&            foo => { type    => SCALAR },
\&            bar => { default => 10 }
\&        },
\&        allow_extra => 1,
\&        called      => \*(AqThe Quux::Baz class constructor\*(Aq,
\&    );
\&
\&    my @p = validate_with(
\&        params => \e@_,
\&        spec   => [
\&            { type    => SCALAR },
\&            { default => 10 }
\&        ],
\&        allow_extra => 1,
\&        called      => \*(AqThe Quux::Baz class constructor\*(Aq,
\&    );
.Ve
.SH "DISABLING VALIDATION"
.IX Header "DISABLING VALIDATION"
If the environment variable \f(CW\*(C`PERL_NO_VALIDATION\*(C'\fR is set to something
true, then validation is turned off.  This may be useful if you only
want to use this module during development but don't want the speed
hit during production.
.PP
The only error that will be caught will be when an odd number of
parameters are passed into a function/method that expects a hash.
.PP
If you want to selectively turn validation on and off at runtime, you
can directly set the \f(CW$Params::Validate::NO_VALIDATION\fR global
variable.  It is \fBstrongly\fR recommended that you \fBlocalize\fR any
changes to this variable, because other modules you are using may
expect validation to be on when they execute.  For example:
.PP
.Vb 2
\&    {
\&        local $Params::Validate::NO_VALIDATION = 1;
\&
\&        # no error
\&        foo( bar => 2 );
\&    }
\&
\&    # error
\&    foo( bar => 2 );
\&
\&    sub foo {
\&        my %p = validate( @_, { foo => 1 } );
\&        ...;
\&    }
.Ve
.PP
But if you want to shoot yourself in the foot and just turn it off, go
ahead!
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
Right now there is no way (short of a callback) to specify that
something must be of one of a list of classes, or that it must possess
one of a list of methods.  If this is desired, it can be added in the
future.
.PP
Ideally, there would be only one validation function.  If someone
figures out how to do this, please let me know.
.SH "SUPPORT"
.IX Header "SUPPORT"
Please submit bugs and patches to the \s-1CPAN RT\s0 system at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Params%3A%3AValidate or
via email at bug\-params\-validate@rt.cpan.org.
.PP
Support questions can be sent to Dave at autarch@urth.org.
.SH "DONATIONS"
.IX Header "DONATIONS"
If you'd like to thank me for the work I've done on this module,
please consider making a \*(L"donation\*(R" to me via PayPal. I spend a lot of
free time creating free software, and would appreciate any support
you'd care to offer.
.PP
Please note that \fBI am not suggesting that you must do this\fR in order
for me to continue working on this particular software. I will
continue to do so, inasmuch as I have in the past, for as long as it
interests me.
.PP
Similarly, a donation made in this way will probably not make me work
on this software much more, unless I get so many donations that I can
consider working on free software full time, which seems unlikely at
best.
.PP
To donate, log into PayPal and send money to autarch@urth.org or use
the button on this page:
<http://www.urth.org/~autarch/fs\-donation.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky, <autarch@urth.org> and Ilya Martynov <ilya@martynov.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2013 by Dave Rolsky and Ilya Martynov.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Params::Validate5.16.3pm                     0100644 0001750 0001750 00000072364 12566242320 024702  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Params::Validate 3"
.TH Params::Validate 3 "2015-08-22" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Params::Validate \- Validate method/function parameters
.SH "VERSION"
.IX Header "VERSION"
version 1.06
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Params::Validate qw(:all);
\&
\&    # takes named params (hash or hashref)
\&    sub foo {
\&        validate(
\&            @_, {
\&                foo => 1,    # mandatory
\&                bar => 0,    # optional
\&            }
\&        );
\&    }
\&
\&    # takes positional params
\&    sub bar {
\&        # first two are mandatory, third is optional
\&        validate_pos( @_, 1, 1, 0 );
\&    }
\&
\&    sub foo2 {
\&        validate(
\&            @_, {
\&                foo =>
\&                    # specify a type
\&                    { type => ARRAYREF },
\&                bar =>
\&                    # specify an interface
\&                    { can => [ \*(Aqprint\*(Aq, \*(Aqflush\*(Aq, \*(Aqfrobnicate\*(Aq ] },
\&                baz => {
\&                    type      => SCALAR,     # a scalar ...
\&                                             # ... that is a plain integer ...
\&                    regex     => qr/^\ed+$/,
\&                    callbacks => {           # ... and smaller than 90
\&                        \*(Aqless than 90\*(Aq => sub { shift() < 90 },
\&                    },
\&                }
\&            }
\&        );
\&    }
\&
\&    sub with_defaults {
\&        my %p = validate(
\&            @_, {
\&                # required
\&                foo => 1,
\&                # $p{bar} will be 99 if bar is not given.  bar is now
\&                # optional.
\&                bar => { default => 99 }
\&            }
\&        );
\&    }
\&
\&    sub pos_with_defaults {
\&        my @p = validate_pos( @_, 1, { default => 99 } );
\&    }
\&
\&    sub sets_options_on_call {
\&        my %p = validate_with(
\&            params => \e@_,
\&            spec   => { foo => { type => SCALAR, default => 2 } },
\&            normalize_keys => sub { $_[0] =~ s/^\-//; lc $_[0] },
\&        );
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Params::Validate module allows you to validate method or function
call parameters to an arbitrary level of specificity.  At the simplest
level, it is capable of validating the required parameters were given
and that no unspecified additional parameters were passed in.
.PP
It is also capable of determining that a parameter is of a specific
type, that it is an object of a certain class hierarchy, that it
possesses certain methods, or applying validation callbacks to
arguments.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
The module always exports the \f(CW\*(C`validate()\*(C'\fR and \f(CW\*(C`validate_pos()\*(C'\fR
functions.
.PP
It also has an additional function available for export,
\&\f(CW\*(C`validate_with\*(C'\fR, which can be used to validate any type of
parameters, and set various options on a per-invocation basis.
.PP
In addition, it can export the following constants, which are used as
part of the type checking.  These are \f(CW\*(C`SCALAR\*(C'\fR, \f(CW\*(C`ARRAYREF\*(C'\fR,
\&\f(CW\*(C`HASHREF\*(C'\fR, \f(CW\*(C`CODEREF\*(C'\fR, \f(CW\*(C`GLOB\*(C'\fR, \f(CW\*(C`GLOBREF\*(C'\fR, and \f(CW\*(C`SCALARREF\*(C'\fR,
\&\f(CW\*(C`UNDEF\*(C'\fR, \f(CW\*(C`OBJECT\*(C'\fR, \f(CW\*(C`BOOLEAN\*(C'\fR, and \f(CW\*(C`HANDLE\*(C'\fR.  These are explained
in the section on Type Validation.
.PP
The constants are available via the export tag \f(CW\*(C`:types\*(C'\fR.  There is
also an \f(CW\*(C`:all\*(C'\fR tag which includes all of the constants as well as the
\&\f(CW\*(C`validation_options()\*(C'\fR function.
.SH "PARAMETER VALIDATION"
.IX Header "PARAMETER VALIDATION"
The validation mechanisms provided by this module can handle both
named or positional parameters.  For the most part, the same features
are available for each.  The biggest difference is the way that the
validation specification is given to the relevant subroutine.  The
other difference is in the error messages produced when validation
checks fail.
.PP
When handling named parameters, the module will accept either a hash
or a hash reference.
.PP
Subroutines expecting named parameters should call the \f(CW\*(C`validate()\*(C'\fR
subroutine like this:
.PP
.Vb 7
\&    validate(
\&        @_, {
\&            parameter1 => validation spec,
\&            parameter2 => validation spec,
\&            ...
\&        }
\&    );
.Ve
.PP
Subroutines expecting positional parameters should call the
\&\f(CW\*(C`validate_pos()\*(C'\fR subroutine like this:
.PP
.Vb 1
\&    validate_pos( @_, { validation spec }, { validation spec } );
.Ve
.SS "Mandatory/Optional Parameters"
.IX Subsection "Mandatory/Optional Parameters"
If you just want to specify that some parameters are mandatory and
others are optional, this can be done very simply.
.PP
For a subroutine expecting named parameters, you would do this:
.PP
.Vb 1
\&    validate( @_, { foo => 1, bar => 1, baz => 0 } );
.Ve
.PP
This says that the \*(L"foo\*(R" and \*(L"bar\*(R" parameters are mandatory and that
the \*(L"baz\*(R" parameter is optional.  The presence of any other
parameters will cause an error.
.PP
For a subroutine expecting positional parameters, you would do this:
.PP
.Vb 1
\&    validate_pos( @_, 1, 1, 0, 0 );
.Ve
.PP
This says that you expect at least 2 and no more than 4 parameters.
If you have a subroutine that has a minimum number of parameters but
can take any maximum number, you can do this:
.PP
.Vb 1
\&    validate_pos( @_, 1, 1, (0) x (@_ \- 2) );
.Ve
.PP
This will always be valid as long as at least two parameters are
given.  A similar construct could be used for the more complex
validation parameters described further on.
.PP
Please note that this:
.PP
.Vb 1
\&    validate_pos( @_, 1, 1, 0, 1, 1 );
.Ve
.PP
makes absolutely no sense, so don't do it.  Any zeros must come at the
end of the validation specification.
.PP
In addition, if you specify that a parameter can have a default, then
it is considered optional.
.SS "Type Validation"
.IX Subsection "Type Validation"
This module supports the following simple types, which can be
exported as constants:
.IP "\(bu" 4
\&\s-1SCALAR\s0
.Sp
A scalar which is not a reference, such as \f(CW10\fR or \f(CW\*(Aqhello\*(Aq\fR.  A
parameter that is undefined is \fBnot\fR treated as a scalar.  If you
want to allow undefined values, you will have to specify \f(CW\*(C`SCALAR |
UNDEF\*(C'\fR.
.IP "\(bu" 4
\&\s-1ARRAYREF\s0
.Sp
An array reference such as \f(CW\*(C`[1, 2, 3]\*(C'\fR or \f(CW\*(C`\e@foo\*(C'\fR.
.IP "\(bu" 4
\&\s-1HASHREF\s0
.Sp
A hash reference such as \f(CW\*(C`{ a => 1, b => 2 }\*(C'\fR or \f(CW\*(C`\e%bar\*(C'\fR.
.IP "\(bu" 4
\&\s-1CODEREF\s0
.Sp
A subroutine reference such as \f(CW\*(C`\e&foo_sub\*(C'\fR or \f(CW\*(C`sub { print "hello" }\*(C'\fR.
.IP "\(bu" 4
\&\s-1GLOB\s0
.Sp
This one is a bit tricky.  A glob would be something like \f(CW*FOO\fR, but
not \f(CW\*(C`\e*FOO\*(C'\fR, which is a glob reference.  It should be noted that this
trick:
.Sp
.Vb 1
\&    my $fh = do { local *FH; };
.Ve
.Sp
makes \f(CW$fh\fR a glob, not a glob reference.  On the other hand, the
return value from \f(CW\*(C`Symbol::gensym\*(C'\fR is a glob reference.  Either can
be used as a file or directory handle.
.IP "\(bu" 4
\&\s-1GLOBREF\s0
.Sp
A glob reference such as \f(CW\*(C`\e*FOO\*(C'\fR.  See the \s-1GLOB\s0 entry above
for more details.
.IP "\(bu" 4
\&\s-1SCALARREF\s0
.Sp
A reference to a scalar such as \f(CW\*(C`\e$x\*(C'\fR.
.IP "\(bu" 4
\&\s-1UNDEF\s0
.Sp
An undefined value
.IP "\(bu" 4
\&\s-1OBJECT\s0
.Sp
A blessed reference.
.IP "\(bu" 4
\&\s-1BOOLEAN\s0
.Sp
This is a special option, and is just a shortcut for \f(CW\*(C`UNDEF | SCALAR\*(C'\fR.
.IP "\(bu" 4
\&\s-1HANDLE\s0
.Sp
This option is also special, and is just a shortcut for \f(CW\*(C`GLOB |
GLOBREF\*(C'\fR.  However, it seems likely that most people interested in
either globs or glob references are likely to really be interested in
whether the parameter in question could be a valid file or directory
handle.
.PP
To specify that a parameter must be of a given type when using named
parameters, do this:
.PP
.Vb 6
\&    validate(
\&        @_, {
\&            foo => { type => SCALAR },
\&            bar => { type => HASHREF }
\&        }
\&    );
.Ve
.PP
If a parameter can be of more than one type, just use the bitwise or
(\f(CW\*(C`|\*(C'\fR) operator to combine them.
.PP
.Vb 1
\&    validate( @_, { foo => { type => GLOB | GLOBREF } );
.Ve
.PP
For positional parameters, this can be specified as follows:
.PP
.Vb 1
\&    validate_pos( @_, { type => SCALAR | ARRAYREF }, { type => CODEREF } );
.Ve
.SS "Interface Validation"
.IX Subsection "Interface Validation"
To specify that a parameter is expected to have a certain set of
methods, we can do the following:
.PP
.Vb 7
\&    validate(
\&        @_, {
\&            foo =>
\&                # just has to be able to \->bar
\&                { can => \*(Aqbar\*(Aq }
\&        }
\&    );
\&
\& ... or ...
\&
\&    validate(
\&        @_, {
\&            foo =>
\&                # must be able to \->bar and \->print
\&                { can => [qw( bar print )] }
\&        }
\&    );
.Ve
.SS "Class Validation"
.IX Subsection "Class Validation"
A word of warning.  When constructing your external interfaces, it is
probably better to specify what methods you expect an object to
have rather than what class it should be of (or a child of).  This
will make your \s-1API\s0 much more flexible.
.PP
With that said, if you want to validate that an incoming parameter
belongs to a class (or child class) or classes, do:
.PP
.Vb 4
\&    validate(
\&        @_,
\&        { foo => { isa => \*(AqMy::Frobnicator\*(Aq } }
\&    );
\&
\& ... or ...
\&
\&    validate(
\&        @_,
\&        # must be both, not either!
\&        { foo => { isa => [qw( My::Frobnicator IO::Handle )] } }
\&    );
.Ve
.SS "Regex Validation"
.IX Subsection "Regex Validation"
If you want to specify that a given parameter must match a specific
regular expression, this can be done with \*(L"regex\*(R" spec key.  For
example:
.PP
.Vb 4
\&    validate(
\&        @_,
\&        { foo => { regex => qr/^\ed+$/ } }
\&    );
.Ve
.PP
The value of the \*(L"regex\*(R" key may be either a string or a pre-compiled
regex created via \f(CW\*(C`qr\*(C'\fR.
.PP
If the value being checked against a regex is undefined, the regex is
explicitly checked against the empty string ('') instead, in order to
avoid \*(L"Use of uninitialized value\*(R" warnings.
.PP
The \f(CW\*(C`Regexp::Common\*(C'\fR module on \s-1CPAN\s0 is an excellent source of regular
expressions suitable for validating input.
.SS "Callback Validation"
.IX Subsection "Callback Validation"
If none of the above are enough, it is possible to pass in one or more
callbacks to validate the parameter.  The callback will be given the
\&\fBvalue\fR of the parameter as its first argument.  Its second argument
will be all the parameters, as a reference to either a hash or array.
Callbacks are specified as hash reference.  The key is an id for the
callback (used in error messages) and the value is a subroutine
reference, such as:
.PP
.Vb 10
\&    validate(
\&        @_, {
\&            foo => {
\&                callbacks => {
\&                    \*(Aqsmaller than a breadbox\*(Aq => sub { shift() < $breadbox },
\&                    \*(Aqgreen or blue\*(Aq =>
\&                        sub { $_[0] eq \*(Aqgreen\*(Aq || $_[0] eq \*(Aqblue\*(Aq }
\&                }
\&            }
\&        );
\&
\&    validate(
\&        @_, {
\&            foo => {
\&                callbacks => {
\&                    \*(Aqbigger than baz\*(Aq => sub { $_[0] > $_[1]\->{baz} }
\&                }
\&            }
\&        }
\&    );
.Ve
.SS "Untainting"
.IX Subsection "Untainting"
If you want values untainted, set the \*(L"untaint\*(R" key in a spec hashref
to a true value, like this:
.PP
.Vb 6
\&    my %p = validate(
\&        @_, {
\&            foo => { type => SCALAR, untaint => 1 },
\&            bar => { type => ARRAYREF }
\&        }
\&    );
.Ve
.PP
This will untaint the \*(L"foo\*(R" parameter if the parameters are valid.
.PP
Note that untainting is only done if \fIall parameters\fR are valid.
Also, only the return values are untainted, not the original values
passed into the validation function.
.PP
Asking for untainting of a reference value will not do anything, as
\&\f(CW\*(C`Params::Validate\*(C'\fR will only attempt to untaint the reference itself.
.SS "Mandatory/Optional Revisited"
.IX Subsection "Mandatory/Optional Revisited"
If you want to specify something such as type or interface, plus the
fact that a parameter can be optional, do this:
.PP
.Vb 6
\&    validate(
\&        @_, {
\&            foo => { type => SCALAR },
\&            bar => { type => ARRAYREF, optional => 1 }
\&        }
\&    );
.Ve
.PP
or this for positional parameters:
.PP
.Vb 5
\&    validate_pos(
\&        @_,
\&        { type => SCALAR },
\&        { type => ARRAYREF, optional => 1 }
\&    );
.Ve
.PP
By default, parameters are assumed to be mandatory unless specified as
optional.
.SS "Dependencies"
.IX Subsection "Dependencies"
It also possible to specify that a given optional parameter depends on
the presence of one or more other optional parameters.
.PP
.Vb 11
\&    validate(
\&        @_, {
\&            cc_number => {
\&                type     => SCALAR,
\&                optional => 1,
\&                depends  => [ \*(Aqcc_expiration\*(Aq, \*(Aqcc_holder_name\*(Aq ],
\&            },
\&            cc_expiration  { type => SCALAR, optional => 1 },
\&            cc_holder_name { type => SCALAR, optional => 1 },
\&        }
\&    );
.Ve
.PP
In this case, \*(L"cc_number\*(R", \*(L"cc_expiration\*(R", and \*(L"cc_holder_name\*(R" are
all optional.  However, if \*(L"cc_number\*(R" is provided, then
\&\*(L"cc_expiration\*(R" and \*(L"cc_holder_name\*(R" must be provided as well.
.PP
This allows you to group together sets of parameters that all must be
provided together.
.PP
The \f(CW\*(C`validate_pos()\*(C'\fR version of dependencies is slightly different,
in that you can only depend on one other parameter.  Also, if for
example, the second parameter 2 depends on the fourth parameter, then
it implies a dependency on the third parameter as well.  This is
because if the fourth parameter is required, then the user must also
provide a third parameter so that there can be four parameters in
total.
.PP
\&\f(CW\*(C`Params::Validate\*(C'\fR will die if you try to depend on a parameter not
declared as part of your parameter specification.
.SS "Specifying defaults"
.IX Subsection "Specifying defaults"
If the \f(CW\*(C`validate()\*(C'\fR or \f(CW\*(C`validate_pos()\*(C'\fR functions are called in a list
context, they will return a hash or containing the original parameters plus
defaults as indicated by the validation spec.
.PP
If the function is not called in a list context, providing a default
in the validation spec still indicates that the parameter is optional.
.PP
The hash or array returned from the function will always be a copy of
the original parameters, in order to leave \f(CW@_\fR untouched for the
calling function.
.PP
Simple examples of defaults would be:
.PP
.Vb 1
\&    my %p = validate( @_, { foo => 1, bar => { default => 99 } } );
\&
\&    my @p = validate_pos( @_, 1, { default => 99 } );
.Ve
.PP
In scalar context, a hash reference or array reference will be
returned, as appropriate.
.SH "USAGE NOTES"
.IX Header "USAGE NOTES"
.SS "Validation failure"
.IX Subsection "Validation failure"
By default, when validation fails \f(CW\*(C`Params::Validate\*(C'\fR calls
\&\f(CW\*(C`Carp::confess()\*(C'\fR.  This can be overridden by setting the \f(CW\*(C`on_fail\*(C'\fR
option, which is described in the \*(L"\s-1GLOBAL\s0\*(R" \s-1OPTIONS\s0
section.
.SS "Method calls"
.IX Subsection "Method calls"
When using this module to validate the parameters passed to a method
call, you will probably want to remove the class/object from the
parameter list \fBbefore\fR calling \f(CW\*(C`validate()\*(C'\fR or \f(CW\*(C`validate_pos()\*(C'\fR.
If your method expects named parameters, then this is necessary for
the \f(CW\*(C`validate()\*(C'\fR function to actually work, otherwise \f(CW@_\fR will not
be usable as a hash, because it will first have your object (or
class) \fBfollowed\fR by a set of keys and values.
.PP
Thus the idiomatic usage of \f(CW\*(C`validate()\*(C'\fR in a method call will look
something like this:
.PP
.Vb 2
\&    sub method {
\&        my $self = shift;
\&
\&        my %params = validate(
\&            @_, {
\&                foo => 1,
\&                bar => { type => ARRAYREF },
\&            }
\&        );
\&    }
.Ve
.SS "Speeding Up Validation"
.IX Subsection "Speeding Up Validation"
In most cases, the validation spec will remain the same for each call to a
subroutine. In that case, you can speed up validation by defining the
validation spec just once, rather than on each call to the subroutine:
.PP
.Vb 4
\&    my %spec = ( ... );
\&    sub foo {
\&        my %params = validate( @_, \e%spec );
\&    }
.Ve
.PP
You can also use the \f(CW\*(C`state\*(C'\fR feature to do this:
.PP
.Vb 1
\&    use feature \*(Aqstate\*(Aq;
\&
\&    sub foo {
\&        state %spec = ( ... );
\&        my %params = validate( @_, \e%spec );
\&    }
.Ve
.ie n .SH """GLOBAL"" OPTIONS"
.el .SH "``GLOBAL'' OPTIONS"
.IX Header "GLOBAL OPTIONS"
Because the \s-1API\s0 for the \f(CW\*(C`validate()\*(C'\fR and \f(CW\*(C`validate_pos()\*(C'\fR functions does not
make it possible to specify any options other than the validation spec, it is
possible to set some options as pseudo\-'globals'.  These allow you to specify
such things as whether or not the validation of named parameters should be
case sensitive, for one example.
.PP
These options are called pseudo\-'globals' because these settings are
\&\fBonly applied to calls originating from the package that set the
options\fR.
.PP
In other words, if I am in package \f(CW\*(C`Foo\*(C'\fR and I call
\&\f(CW\*(C`validation_options()\*(C'\fR, those options are only in effect when I call
\&\f(CW\*(C`validate()\*(C'\fR from package \f(CW\*(C`Foo\*(C'\fR.
.PP
While this is quite different from how most other modules operate, I
feel that this is necessary in able to make it possible for one
module/application to use Params::Validate while still using other
modules that also use Params::Validate, perhaps with different
options set.
.PP
The downside to this is that if you are writing an app with a standard
calling style for all functions, and your app has ten modules, \fBeach
module must include a call to \f(CB\*(C`validation_options()\*(C'\fB\fR. You could of
course write a module that all your modules use which uses various
trickery to do this when imported.
.SS "Options"
.IX Subsection "Options"
.IP "\(bu" 4
normalize_keys => \f(CW$callback\fR
.Sp
This option is only relevant when dealing with named parameters.
.Sp
This callback will be used to transform the hash keys of both the
parameters and the parameter spec when \f(CW\*(C`validate()\*(C'\fR or
\&\f(CW\*(C`validate_with()\*(C'\fR are called.
.Sp
Any alterations made by this callback will be reflected in the
parameter hash that is returned by the validation function.  For
example:
.Sp
.Vb 7
\&    sub foo {
\&        return validate_with(
\&            params => \e@_,
\&            spec   => { foo => { type => SCALAR } },
\&            normalize_keys =>
\&                sub { my $k = shift; $k =~ s/^\-//; return uc $k },
\&        );
\&
\&    }
\&
\&    %p = foo( foo => 20 );
\&
\&    # $p{FOO} is now 20
\&
\&    %p = foo( \-fOo => 50 );
\&
\&    # $p{FOO} is now 50
.Ve
.Sp
The callback must return a defined value.
.Sp
If a callback is given then the deprecated \*(L"ignore_case\*(R" and
\&\*(L"strip_leading\*(R" options are ignored.
.IP "\(bu" 4
allow_extra => \f(CW$boolean\fR
.Sp
If true, then the validation routine will allow extra parameters not
named in the validation specification.  In the case of positional
parameters, this allows an unlimited number of maximum parameters
(though a minimum may still be set).  Defaults to false.
.IP "\(bu" 4
on_fail => \f(CW$callback\fR
.Sp
If given, this callback will be called whenever a validation check
fails.  It will be called with a single parameter, which will be a
string describing the failure.  This is useful if you wish to have
this module throw exceptions as objects rather than as strings, for
example.
.Sp
This callback is expected to \f(CW\*(C`die()\*(C'\fR internally.  If it does not, the
validation will proceed onwards, with unpredictable results.
.Sp
The default is to simply use the Carp module's \f(CW\*(C`confess()\*(C'\fR function.
.IP "\(bu" 4
stack_skip => \f(CW$number\fR
.Sp
This tells Params::Validate how many stack frames to skip when finding
a subroutine name to use in error messages.  By default, it looks one
frame back, at the immediate caller to \f(CW\*(C`validate()\*(C'\fR or
\&\f(CW\*(C`validate_pos()\*(C'\fR.  If this option is set, then the given number of
frames are skipped instead.
.IP "\(bu" 4
ignore_case => \f(CW$boolean\fR
.Sp
\&\s-1DEPRECATED\s0
.Sp
This is only relevant when dealing with named parameters.  If it is
true, then the validation code will ignore the case of parameter
names.  Defaults to false.
.IP "\(bu" 4
strip_leading => \f(CW$characters\fR
.Sp
\&\s-1DEPRECATED\s0
.Sp
This too is only relevant when dealing with named parameters.  If this
is given then any parameters starting with these characters will be
considered equivalent to parameters without them entirely.  For
example, if this is specified as '\-', then \f(CW\*(C`\-foo\*(C'\fR and \f(CW\*(C`foo\*(C'\fR would be
considered identical.
.SH "PER-INVOCATION OPTIONS"
.IX Header "PER-INVOCATION OPTIONS"
The \f(CW\*(C`validate_with()\*(C'\fR function can be used to set the options listed
above on a per-invocation basis.  For example:
.PP
.Vb 8
\&    my %p = validate_with(
\&        params => \e@_,
\&        spec   => {
\&            foo => { type    => SCALAR },
\&            bar => { default => 10 }
\&        },
\&        allow_extra => 1,
\&    );
.Ve
.PP
In addition to the options listed above, it is also possible to set
the option \*(L"called\*(R", which should be a string.  This string will be
used in any error messages caused by a failure to meet the validation
spec.
.PP
This subroutine will validate named parameters as a hash if the \*(L"spec\*(R"
parameter is a hash reference.  If it is an array reference, the
parameters are assumed to be positional.
.PP
.Vb 9
\&    my %p = validate_with(
\&        params => \e@_,
\&        spec   => {
\&            foo => { type    => SCALAR },
\&            bar => { default => 10 }
\&        },
\&        allow_extra => 1,
\&        called      => \*(AqThe Quux::Baz class constructor\*(Aq,
\&    );
\&
\&    my @p = validate_with(
\&        params => \e@_,
\&        spec   => [
\&            { type    => SCALAR },
\&            { default => 10 }
\&        ],
\&        allow_extra => 1,
\&        called      => \*(AqThe Quux::Baz class constructor\*(Aq,
\&    );
.Ve
.SH "DISABLING VALIDATION"
.IX Header "DISABLING VALIDATION"
If the environment variable \f(CW\*(C`PERL_NO_VALIDATION\*(C'\fR is set to something
true, then validation is turned off.  This may be useful if you only
want to use this module during development but don't want the speed
hit during production.
.PP
The only error that will be caught will be when an odd number of
parameters are passed into a function/method that expects a hash.
.PP
If you want to selectively turn validation on and off at runtime, you
can directly set the \f(CW$Params::Validate::NO_VALIDATION\fR global
variable.  It is \fBstrongly\fR recommended that you \fBlocalize\fR any
changes to this variable, because other modules you are using may
expect validation to be on when they execute.  For example:
.PP
.Vb 2
\&    {
\&        local $Params::Validate::NO_VALIDATION = 1;
\&
\&        # no error
\&        foo( bar => 2 );
\&    }
\&
\&    # error
\&    foo( bar => 2 );
\&
\&    sub foo {
\&        my %p = validate( @_, { foo => 1 } );
\&        ...;
\&    }
.Ve
.PP
But if you want to shoot yourself in the foot and just turn it off, go
ahead!
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
Right now there is no way (short of a callback) to specify that
something must be of one of a list of classes, or that it must possess
one of a list of methods.  If this is desired, it can be added in the
future.
.PP
Ideally, there would be only one validation function.  If someone
figures out how to do this, please let me know.
.SH "SUPPORT"
.IX Header "SUPPORT"
Please submit bugs and patches to the \s-1CPAN\s0 \s-1RT\s0 system at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Params%3A%3AValidate or
via email at bug\-params\-validate@rt.cpan.org.
.PP
Support questions can be sent to Dave at autarch@urth.org.
.SH "DONATIONS"
.IX Header "DONATIONS"
If you'd like to thank me for the work I've done on this module,
please consider making a \*(L"donation\*(R" to me via PayPal. I spend a lot of
free time creating free software, and would appreciate any support
you'd care to offer.
.PP
Please note that \fBI am not suggesting that you must do this\fR in order
for me to continue working on this particular software. I will
continue to do so, inasmuch as I have in the past, for as long as it
interests me.
.PP
Similarly, a donation made in this way will probably not make me work
on this software much more, unless I get so many donations that I can
consider working on free software full time, which seems unlikely at
best.
.PP
To donate, log into PayPal and send money to autarch@urth.org or use
the button on this page:
http://www.urth.org/~autarch/fs\-donation.html <http://www.urth.org/~autarch/fs-donation.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky, <autarch@urth.org> and Ilya Martynov <ilya@martynov.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2012 by Dave Rolsky and Ilya Martynov.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Params::Validate5.18.3pm                     0100644 0001750 0001750 00000072607 12566242316 024711  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Params::Validate 3"
.TH Params::Validate 3 "2015-08-22" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Params::Validate \- Validate method/function parameters
.SH "VERSION"
.IX Header "VERSION"
version 1.08
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Params::Validate qw(:all);
\&
\&    # takes named params (hash or hashref)
\&    sub foo {
\&        validate(
\&            @_, {
\&                foo => 1,    # mandatory
\&                bar => 0,    # optional
\&            }
\&        );
\&    }
\&
\&    # takes positional params
\&    sub bar {
\&        # first two are mandatory, third is optional
\&        validate_pos( @_, 1, 1, 0 );
\&    }
\&
\&    sub foo2 {
\&        validate(
\&            @_, {
\&                foo =>
\&                    # specify a type
\&                    { type => ARRAYREF },
\&                bar =>
\&                    # specify an interface
\&                    { can => [ \*(Aqprint\*(Aq, \*(Aqflush\*(Aq, \*(Aqfrobnicate\*(Aq ] },
\&                baz => {
\&                    type      => SCALAR,     # a scalar ...
\&                                             # ... that is a plain integer ...
\&                    regex     => qr/^\ed+$/,
\&                    callbacks => {           # ... and smaller than 90
\&                        \*(Aqless than 90\*(Aq => sub { shift() < 90 },
\&                    },
\&                }
\&            }
\&        );
\&    }
\&
\&    sub with_defaults {
\&        my %p = validate(
\&            @_, {
\&                # required
\&                foo => 1,
\&                # $p{bar} will be 99 if bar is not given.  bar is now
\&                # optional.
\&                bar => { default => 99 }
\&            }
\&        );
\&    }
\&
\&    sub pos_with_defaults {
\&        my @p = validate_pos( @_, 1, { default => 99 } );
\&    }
\&
\&    sub sets_options_on_call {
\&        my %p = validate_with(
\&            params => \e@_,
\&            spec   => { foo => { type => SCALAR, default => 2 } },
\&            normalize_keys => sub { $_[0] =~ s/^\-//; lc $_[0] },
\&        );
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Params::Validate module allows you to validate method or function
call parameters to an arbitrary level of specificity.  At the simplest
level, it is capable of validating the required parameters were given
and that no unspecified additional parameters were passed in.
.PP
It is also capable of determining that a parameter is of a specific
type, that it is an object of a certain class hierarchy, that it
possesses certain methods, or applying validation callbacks to
arguments.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
The module always exports the \f(CW\*(C`validate()\*(C'\fR and \f(CW\*(C`validate_pos()\*(C'\fR
functions.
.PP
It also has an additional function available for export,
\&\f(CW\*(C`validate_with\*(C'\fR, which can be used to validate any type of
parameters, and set various options on a per-invocation basis.
.PP
In addition, it can export the following constants, which are used as
part of the type checking.  These are \f(CW\*(C`SCALAR\*(C'\fR, \f(CW\*(C`ARRAYREF\*(C'\fR,
\&\f(CW\*(C`HASHREF\*(C'\fR, \f(CW\*(C`CODEREF\*(C'\fR, \f(CW\*(C`GLOB\*(C'\fR, \f(CW\*(C`GLOBREF\*(C'\fR, and \f(CW\*(C`SCALARREF\*(C'\fR,
\&\f(CW\*(C`UNDEF\*(C'\fR, \f(CW\*(C`OBJECT\*(C'\fR, \f(CW\*(C`BOOLEAN\*(C'\fR, and \f(CW\*(C`HANDLE\*(C'\fR.  These are explained
in the section on Type Validation.
.PP
The constants are available via the export tag \f(CW\*(C`:types\*(C'\fR.  There is
also an \f(CW\*(C`:all\*(C'\fR tag which includes all of the constants as well as the
\&\f(CW\*(C`validation_options()\*(C'\fR function.
.SH "PARAMETER VALIDATION"
.IX Header "PARAMETER VALIDATION"
The validation mechanisms provided by this module can handle both
named or positional parameters.  For the most part, the same features
are available for each.  The biggest difference is the way that the
validation specification is given to the relevant subroutine.  The
other difference is in the error messages produced when validation
checks fail.
.PP
When handling named parameters, the module will accept either a hash
or a hash reference.
.PP
Subroutines expecting named parameters should call the \f(CW\*(C`validate()\*(C'\fR
subroutine like this:
.PP
.Vb 7
\&    validate(
\&        @_, {
\&            parameter1 => validation spec,
\&            parameter2 => validation spec,
\&            ...
\&        }
\&    );
.Ve
.PP
Subroutines expecting positional parameters should call the
\&\f(CW\*(C`validate_pos()\*(C'\fR subroutine like this:
.PP
.Vb 1
\&    validate_pos( @_, { validation spec }, { validation spec } );
.Ve
.SS "Mandatory/Optional Parameters"
.IX Subsection "Mandatory/Optional Parameters"
If you just want to specify that some parameters are mandatory and
others are optional, this can be done very simply.
.PP
For a subroutine expecting named parameters, you would do this:
.PP
.Vb 1
\&    validate( @_, { foo => 1, bar => 1, baz => 0 } );
.Ve
.PP
This says that the \*(L"foo\*(R" and \*(L"bar\*(R" parameters are mandatory and that
the \*(L"baz\*(R" parameter is optional.  The presence of any other
parameters will cause an error.
.PP
For a subroutine expecting positional parameters, you would do this:
.PP
.Vb 1
\&    validate_pos( @_, 1, 1, 0, 0 );
.Ve
.PP
This says that you expect at least 2 and no more than 4 parameters.
If you have a subroutine that has a minimum number of parameters but
can take any maximum number, you can do this:
.PP
.Vb 1
\&    validate_pos( @_, 1, 1, (0) x (@_ \- 2) );
.Ve
.PP
This will always be valid as long as at least two parameters are
given.  A similar construct could be used for the more complex
validation parameters described further on.
.PP
Please note that this:
.PP
.Vb 1
\&    validate_pos( @_, 1, 1, 0, 1, 1 );
.Ve
.PP
makes absolutely no sense, so don't do it.  Any zeros must come at the
end of the validation specification.
.PP
In addition, if you specify that a parameter can have a default, then
it is considered optional.
.SS "Type Validation"
.IX Subsection "Type Validation"
This module supports the following simple types, which can be
exported as constants:
.IP "\(bu" 4
\&\s-1SCALAR\s0
.Sp
A scalar which is not a reference, such as \f(CW10\fR or \f(CW\*(Aqhello\*(Aq\fR.  A
parameter that is undefined is \fBnot\fR treated as a scalar.  If you
want to allow undefined values, you will have to specify \f(CW\*(C`SCALAR |
UNDEF\*(C'\fR.
.IP "\(bu" 4
\&\s-1ARRAYREF\s0
.Sp
An array reference such as \f(CW\*(C`[1, 2, 3]\*(C'\fR or \f(CW\*(C`\e@foo\*(C'\fR.
.IP "\(bu" 4
\&\s-1HASHREF\s0
.Sp
A hash reference such as \f(CW\*(C`{ a => 1, b => 2 }\*(C'\fR or \f(CW\*(C`\e%bar\*(C'\fR.
.IP "\(bu" 4
\&\s-1CODEREF\s0
.Sp
A subroutine reference such as \f(CW\*(C`\e&foo_sub\*(C'\fR or \f(CW\*(C`sub { print "hello" }\*(C'\fR.
.IP "\(bu" 4
\&\s-1GLOB\s0
.Sp
This one is a bit tricky.  A glob would be something like \f(CW*FOO\fR, but
not \f(CW\*(C`\e*FOO\*(C'\fR, which is a glob reference.  It should be noted that this
trick:
.Sp
.Vb 1
\&    my $fh = do { local *FH; };
.Ve
.Sp
makes \f(CW$fh\fR a glob, not a glob reference.  On the other hand, the
return value from \f(CW\*(C`Symbol::gensym\*(C'\fR is a glob reference.  Either can
be used as a file or directory handle.
.IP "\(bu" 4
\&\s-1GLOBREF\s0
.Sp
A glob reference such as \f(CW\*(C`\e*FOO\*(C'\fR.  See the \s-1GLOB\s0 entry above
for more details.
.IP "\(bu" 4
\&\s-1SCALARREF\s0
.Sp
A reference to a scalar such as \f(CW\*(C`\e$x\*(C'\fR.
.IP "\(bu" 4
\&\s-1UNDEF\s0
.Sp
An undefined value
.IP "\(bu" 4
\&\s-1OBJECT\s0
.Sp
A blessed reference.
.IP "\(bu" 4
\&\s-1BOOLEAN\s0
.Sp
This is a special option, and is just a shortcut for \f(CW\*(C`UNDEF | SCALAR\*(C'\fR.
.IP "\(bu" 4
\&\s-1HANDLE\s0
.Sp
This option is also special, and is just a shortcut for \f(CW\*(C`GLOB |
GLOBREF\*(C'\fR.  However, it seems likely that most people interested in
either globs or glob references are likely to really be interested in
whether the parameter in question could be a valid file or directory
handle.
.PP
To specify that a parameter must be of a given type when using named
parameters, do this:
.PP
.Vb 6
\&    validate(
\&        @_, {
\&            foo => { type => SCALAR },
\&            bar => { type => HASHREF }
\&        }
\&    );
.Ve
.PP
If a parameter can be of more than one type, just use the bitwise or
(\f(CW\*(C`|\*(C'\fR) operator to combine them.
.PP
.Vb 1
\&    validate( @_, { foo => { type => GLOB | GLOBREF } );
.Ve
.PP
For positional parameters, this can be specified as follows:
.PP
.Vb 1
\&    validate_pos( @_, { type => SCALAR | ARRAYREF }, { type => CODEREF } );
.Ve
.SS "Interface Validation"
.IX Subsection "Interface Validation"
To specify that a parameter is expected to have a certain set of
methods, we can do the following:
.PP
.Vb 7
\&    validate(
\&        @_, {
\&            foo =>
\&                # just has to be able to \->bar
\&                { can => \*(Aqbar\*(Aq }
\&        }
\&    );
\&
\& ... or ...
\&
\&    validate(
\&        @_, {
\&            foo =>
\&                # must be able to \->bar and \->print
\&                { can => [qw( bar print )] }
\&        }
\&    );
.Ve
.SS "Class Validation"
.IX Subsection "Class Validation"
A word of warning.  When constructing your external interfaces, it is
probably better to specify what methods you expect an object to
have rather than what class it should be of (or a child of).  This
will make your \s-1API\s0 much more flexible.
.PP
With that said, if you want to validate that an incoming parameter
belongs to a class (or child class) or classes, do:
.PP
.Vb 4
\&    validate(
\&        @_,
\&        { foo => { isa => \*(AqMy::Frobnicator\*(Aq } }
\&    );
\&
\& ... or ...
\&
\&    validate(
\&        @_,
\&        # must be both, not either!
\&        { foo => { isa => [qw( My::Frobnicator IO::Handle )] } }
\&    );
.Ve
.SS "Regex Validation"
.IX Subsection "Regex Validation"
If you want to specify that a given parameter must match a specific
regular expression, this can be done with \*(L"regex\*(R" spec key.  For
example:
.PP
.Vb 4
\&    validate(
\&        @_,
\&        { foo => { regex => qr/^\ed+$/ } }
\&    );
.Ve
.PP
The value of the \*(L"regex\*(R" key may be either a string or a pre-compiled
regex created via \f(CW\*(C`qr\*(C'\fR.
.PP
If the value being checked against a regex is undefined, the regex is
explicitly checked against the empty string ('') instead, in order to
avoid \*(L"Use of uninitialized value\*(R" warnings.
.PP
The \f(CW\*(C`Regexp::Common\*(C'\fR module on \s-1CPAN\s0 is an excellent source of regular
expressions suitable for validating input.
.SS "Callback Validation"
.IX Subsection "Callback Validation"
If none of the above are enough, it is possible to pass in one or more
callbacks to validate the parameter.  The callback will be given the
\&\fBvalue\fR of the parameter as its first argument.  Its second argument
will be all the parameters, as a reference to either a hash or array.
Callbacks are specified as hash reference.  The key is an id for the
callback (used in error messages) and the value is a subroutine
reference, such as:
.PP
.Vb 10
\&    validate(
\&        @_, {
\&            foo => {
\&                callbacks => {
\&                    \*(Aqsmaller than a breadbox\*(Aq => sub { shift() < $breadbox },
\&                    \*(Aqgreen or blue\*(Aq =>
\&                        sub { $_[0] eq \*(Aqgreen\*(Aq || $_[0] eq \*(Aqblue\*(Aq }
\&                }
\&            }
\&        );
\&
\&    validate(
\&        @_, {
\&            foo => {
\&                callbacks => {
\&                    \*(Aqbigger than baz\*(Aq => sub { $_[0] > $_[1]\->{baz} }
\&                }
\&            }
\&        }
\&    );
.Ve
.SS "Untainting"
.IX Subsection "Untainting"
If you want values untainted, set the \*(L"untaint\*(R" key in a spec hashref
to a true value, like this:
.PP
.Vb 6
\&    my %p = validate(
\&        @_, {
\&            foo => { type => SCALAR, untaint => 1 },
\&            bar => { type => ARRAYREF }
\&        }
\&    );
.Ve
.PP
This will untaint the \*(L"foo\*(R" parameter if the parameters are valid.
.PP
Note that untainting is only done if \fIall parameters\fR are valid.
Also, only the return values are untainted, not the original values
passed into the validation function.
.PP
Asking for untainting of a reference value will not do anything, as
\&\f(CW\*(C`Params::Validate\*(C'\fR will only attempt to untaint the reference itself.
.SS "Mandatory/Optional Revisited"
.IX Subsection "Mandatory/Optional Revisited"
If you want to specify something such as type or interface, plus the
fact that a parameter can be optional, do this:
.PP
.Vb 6
\&    validate(
\&        @_, {
\&            foo => { type => SCALAR },
\&            bar => { type => ARRAYREF, optional => 1 }
\&        }
\&    );
.Ve
.PP
or this for positional parameters:
.PP
.Vb 5
\&    validate_pos(
\&        @_,
\&        { type => SCALAR },
\&        { type => ARRAYREF, optional => 1 }
\&    );
.Ve
.PP
By default, parameters are assumed to be mandatory unless specified as
optional.
.SS "Dependencies"
.IX Subsection "Dependencies"
It also possible to specify that a given optional parameter depends on
the presence of one or more other optional parameters.
.PP
.Vb 11
\&    validate(
\&        @_, {
\&            cc_number => {
\&                type     => SCALAR,
\&                optional => 1,
\&                depends  => [ \*(Aqcc_expiration\*(Aq, \*(Aqcc_holder_name\*(Aq ],
\&            },
\&            cc_expiration  { type => SCALAR, optional => 1 },
\&            cc_holder_name { type => SCALAR, optional => 1 },
\&        }
\&    );
.Ve
.PP
In this case, \*(L"cc_number\*(R", \*(L"cc_expiration\*(R", and \*(L"cc_holder_name\*(R" are
all optional.  However, if \*(L"cc_number\*(R" is provided, then
\&\*(L"cc_expiration\*(R" and \*(L"cc_holder_name\*(R" must be provided as well.
.PP
This allows you to group together sets of parameters that all must be
provided together.
.PP
The \f(CW\*(C`validate_pos()\*(C'\fR version of dependencies is slightly different,
in that you can only depend on one other parameter.  Also, if for
example, the second parameter 2 depends on the fourth parameter, then
it implies a dependency on the third parameter as well.  This is
because if the fourth parameter is required, then the user must also
provide a third parameter so that there can be four parameters in
total.
.PP
\&\f(CW\*(C`Params::Validate\*(C'\fR will die if you try to depend on a parameter not
declared as part of your parameter specification.
.SS "Specifying defaults"
.IX Subsection "Specifying defaults"
If the \f(CW\*(C`validate()\*(C'\fR or \f(CW\*(C`validate_pos()\*(C'\fR functions are called in a list
context, they will return a hash or containing the original parameters plus
defaults as indicated by the validation spec.
.PP
If the function is not called in a list context, providing a default
in the validation spec still indicates that the parameter is optional.
.PP
The hash or array returned from the function will always be a copy of
the original parameters, in order to leave \f(CW@_\fR untouched for the
calling function.
.PP
Simple examples of defaults would be:
.PP
.Vb 1
\&    my %p = validate( @_, { foo => 1, bar => { default => 99 } } );
\&
\&    my @p = validate_pos( @_, 1, { default => 99 } );
.Ve
.PP
In scalar context, a hash reference or array reference will be
returned, as appropriate.
.SH "USAGE NOTES"
.IX Header "USAGE NOTES"
.SS "Validation failure"
.IX Subsection "Validation failure"
By default, when validation fails \f(CW\*(C`Params::Validate\*(C'\fR calls
\&\f(CW\*(C`Carp::confess()\*(C'\fR.  This can be overridden by setting the \f(CW\*(C`on_fail\*(C'\fR
option, which is described in the \*(L"\s-1GLOBAL\*(R" OPTIONS\s0
section.
.SS "Method calls"
.IX Subsection "Method calls"
When using this module to validate the parameters passed to a method
call, you will probably want to remove the class/object from the
parameter list \fBbefore\fR calling \f(CW\*(C`validate()\*(C'\fR or \f(CW\*(C`validate_pos()\*(C'\fR.
If your method expects named parameters, then this is necessary for
the \f(CW\*(C`validate()\*(C'\fR function to actually work, otherwise \f(CW@_\fR will not
be usable as a hash, because it will first have your object (or
class) \fBfollowed\fR by a set of keys and values.
.PP
Thus the idiomatic usage of \f(CW\*(C`validate()\*(C'\fR in a method call will look
something like this:
.PP
.Vb 2
\&    sub method {
\&        my $self = shift;
\&
\&        my %params = validate(
\&            @_, {
\&                foo => 1,
\&                bar => { type => ARRAYREF },
\&            }
\&        );
\&    }
.Ve
.SS "Speeding Up Validation"
.IX Subsection "Speeding Up Validation"
In most cases, the validation spec will remain the same for each call to a
subroutine. In that case, you can speed up validation by defining the
validation spec just once, rather than on each call to the subroutine:
.PP
.Vb 4
\&    my %spec = ( ... );
\&    sub foo {
\&        my %params = validate( @_, \e%spec );
\&    }
.Ve
.PP
You can also use the \f(CW\*(C`state\*(C'\fR feature to do this:
.PP
.Vb 1
\&    use feature \*(Aqstate\*(Aq;
\&
\&    sub foo {
\&        state $spec = { ... };
\&        my %params = validate( @_, $spec );
\&    }
.Ve
.ie n .SH """GLOBAL"" OPTIONS"
.el .SH "``GLOBAL'' OPTIONS"
.IX Header "GLOBAL OPTIONS"
Because the \s-1API\s0 for the \f(CW\*(C`validate()\*(C'\fR and \f(CW\*(C`validate_pos()\*(C'\fR functions does not
make it possible to specify any options other than the validation spec, it is
possible to set some options as pseudo\-'globals'.  These allow you to specify
such things as whether or not the validation of named parameters should be
case sensitive, for one example.
.PP
These options are called pseudo\-'globals' because these settings are
\&\fBonly applied to calls originating from the package that set the
options\fR.
.PP
In other words, if I am in package \f(CW\*(C`Foo\*(C'\fR and I call
\&\f(CW\*(C`validation_options()\*(C'\fR, those options are only in effect when I call
\&\f(CW\*(C`validate()\*(C'\fR from package \f(CW\*(C`Foo\*(C'\fR.
.PP
While this is quite different from how most other modules operate, I
feel that this is necessary in able to make it possible for one
module/application to use Params::Validate while still using other
modules that also use Params::Validate, perhaps with different
options set.
.PP
The downside to this is that if you are writing an app with a standard
calling style for all functions, and your app has ten modules, \fBeach
module must include a call to \f(CB\*(C`validation_options()\*(C'\fB\fR. You could of
course write a module that all your modules use which uses various
trickery to do this when imported.
.SS "Options"
.IX Subsection "Options"
.IP "\(bu" 4
normalize_keys => \f(CW$callback\fR
.Sp
This option is only relevant when dealing with named parameters.
.Sp
This callback will be used to transform the hash keys of both the
parameters and the parameter spec when \f(CW\*(C`validate()\*(C'\fR or
\&\f(CW\*(C`validate_with()\*(C'\fR are called.
.Sp
Any alterations made by this callback will be reflected in the
parameter hash that is returned by the validation function.  For
example:
.Sp
.Vb 7
\&    sub foo {
\&        return validate_with(
\&            params => \e@_,
\&            spec   => { foo => { type => SCALAR } },
\&            normalize_keys =>
\&                sub { my $k = shift; $k =~ s/^\-//; return uc $k },
\&        );
\&
\&    }
\&
\&    %p = foo( foo => 20 );
\&
\&    # $p{FOO} is now 20
\&
\&    %p = foo( \-fOo => 50 );
\&
\&    # $p{FOO} is now 50
.Ve
.Sp
The callback must return a defined value.
.Sp
If a callback is given then the deprecated \*(L"ignore_case\*(R" and
\&\*(L"strip_leading\*(R" options are ignored.
.IP "\(bu" 4
allow_extra => \f(CW$boolean\fR
.Sp
If true, then the validation routine will allow extra parameters not
named in the validation specification.  In the case of positional
parameters, this allows an unlimited number of maximum parameters
(though a minimum may still be set).  Defaults to false.
.IP "\(bu" 4
on_fail => \f(CW$callback\fR
.Sp
If given, this callback will be called whenever a validation check
fails.  It will be called with a single parameter, which will be a
string describing the failure.  This is useful if you wish to have
this module throw exceptions as objects rather than as strings, for
example.
.Sp
This callback is expected to \f(CW\*(C`die()\*(C'\fR internally.  If it does not, the
validation will proceed onwards, with unpredictable results.
.Sp
The default is to simply use the Carp module's \f(CW\*(C`confess()\*(C'\fR function.
.IP "\(bu" 4
stack_skip => \f(CW$number\fR
.Sp
This tells Params::Validate how many stack frames to skip when finding
a subroutine name to use in error messages.  By default, it looks one
frame back, at the immediate caller to \f(CW\*(C`validate()\*(C'\fR or
\&\f(CW\*(C`validate_pos()\*(C'\fR.  If this option is set, then the given number of
frames are skipped instead.
.IP "\(bu" 4
ignore_case => \f(CW$boolean\fR
.Sp
\&\s-1DEPRECATED\s0
.Sp
This is only relevant when dealing with named parameters.  If it is
true, then the validation code will ignore the case of parameter
names.  Defaults to false.
.IP "\(bu" 4
strip_leading => \f(CW$characters\fR
.Sp
\&\s-1DEPRECATED\s0
.Sp
This too is only relevant when dealing with named parameters.  If this
is given then any parameters starting with these characters will be
considered equivalent to parameters without them entirely.  For
example, if this is specified as '\-', then \f(CW\*(C`\-foo\*(C'\fR and \f(CW\*(C`foo\*(C'\fR would be
considered identical.
.SH "PER-INVOCATION OPTIONS"
.IX Header "PER-INVOCATION OPTIONS"
The \f(CW\*(C`validate_with()\*(C'\fR function can be used to set the options listed
above on a per-invocation basis.  For example:
.PP
.Vb 8
\&    my %p = validate_with(
\&        params => \e@_,
\&        spec   => {
\&            foo => { type    => SCALAR },
\&            bar => { default => 10 }
\&        },
\&        allow_extra => 1,
\&    );
.Ve
.PP
In addition to the options listed above, it is also possible to set
the option \*(L"called\*(R", which should be a string.  This string will be
used in any error messages caused by a failure to meet the validation
spec.
.PP
This subroutine will validate named parameters as a hash if the \*(L"spec\*(R"
parameter is a hash reference.  If it is an array reference, the
parameters are assumed to be positional.
.PP
.Vb 9
\&    my %p = validate_with(
\&        params => \e@_,
\&        spec   => {
\&            foo => { type    => SCALAR },
\&            bar => { default => 10 }
\&        },
\&        allow_extra => 1,
\&        called      => \*(AqThe Quux::Baz class constructor\*(Aq,
\&    );
\&
\&    my @p = validate_with(
\&        params => \e@_,
\&        spec   => [
\&            { type    => SCALAR },
\&            { default => 10 }
\&        ],
\&        allow_extra => 1,
\&        called      => \*(AqThe Quux::Baz class constructor\*(Aq,
\&    );
.Ve
.SH "DISABLING VALIDATION"
.IX Header "DISABLING VALIDATION"
If the environment variable \f(CW\*(C`PERL_NO_VALIDATION\*(C'\fR is set to something
true, then validation is turned off.  This may be useful if you only
want to use this module during development but don't want the speed
hit during production.
.PP
The only error that will be caught will be when an odd number of
parameters are passed into a function/method that expects a hash.
.PP
If you want to selectively turn validation on and off at runtime, you
can directly set the \f(CW$Params::Validate::NO_VALIDATION\fR global
variable.  It is \fBstrongly\fR recommended that you \fBlocalize\fR any
changes to this variable, because other modules you are using may
expect validation to be on when they execute.  For example:
.PP
.Vb 2
\&    {
\&        local $Params::Validate::NO_VALIDATION = 1;
\&
\&        # no error
\&        foo( bar => 2 );
\&    }
\&
\&    # error
\&    foo( bar => 2 );
\&
\&    sub foo {
\&        my %p = validate( @_, { foo => 1 } );
\&        ...;
\&    }
.Ve
.PP
But if you want to shoot yourself in the foot and just turn it off, go
ahead!
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
Right now there is no way (short of a callback) to specify that
something must be of one of a list of classes, or that it must possess
one of a list of methods.  If this is desired, it can be added in the
future.
.PP
Ideally, there would be only one validation function.  If someone
figures out how to do this, please let me know.
.SH "SUPPORT"
.IX Header "SUPPORT"
Please submit bugs and patches to the \s-1CPAN RT\s0 system at
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Params%3A%3AValidate or
via email at bug\-params\-validate@rt.cpan.org.
.PP
Support questions can be sent to Dave at autarch@urth.org.
.SH "DONATIONS"
.IX Header "DONATIONS"
If you'd like to thank me for the work I've done on this module,
please consider making a \*(L"donation\*(R" to me via PayPal. I spend a lot of
free time creating free software, and would appreciate any support
you'd care to offer.
.PP
Please note that \fBI am not suggesting that you must do this\fR in order
for me to continue working on this particular software. I will
continue to do so, inasmuch as I have in the past, for as long as it
interests me.
.PP
Similarly, a donation made in this way will probably not make me work
on this software much more, unless I get so many donations that I can
consider working on free software full time, which seems unlikely at
best.
.PP
To donate, log into PayPal and send money to autarch@urth.org or use
the button on this page:
<http://www.urth.org/~autarch/fs\-donation.html>
.SH "AUTHOR"
.IX Header "AUTHOR"
Dave Rolsky, <autarch@urth.org> and Ilya Martynov <ilya@martynov.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is Copyright (c) 2013 by Dave Rolsky and Ilya Martynov.
.PP
This is free software, licensed under:
.PP
.Vb 1
\&  The Artistic License 2.0 (GPL Compatible)
.Ve
                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::CPAN::Meta.3pm                        0100644 0001750 0001750 00000022621 12566207462 024201  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::CPAN::Meta 3pm"
.TH Parse::CPAN::Meta 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::CPAN::Meta \- Parse META.yml and META.json CPAN metadata files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    #############################################
\&    # In your file
\&    
\&    \-\-\-
\&    name: My\-Distribution
\&    version: 1.23
\&    resources:
\&      homepage: "http://example.com/dist/My\-Distribution"
\&    
\&    
\&    #############################################
\&    # In your program
\&    
\&    use Parse::CPAN::Meta;
\&    
\&    my $distmeta = Parse::CPAN::Meta\->load_file(\*(AqMETA.yml\*(Aq);
\&    
\&    # Reading properties
\&    my $name     = $distmeta\->{name};
\&    my $version  = $distmeta\->{version};
\&    my $homepage = $distmeta\->{resources}{homepage};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBParse::CPAN::Meta\fR is a parser for \fI\s-1META\s0.json\fR and \fI\s-1META\s0.yml\fR files, using
\&\s-1JSON::PP\s0 and/or CPAN::Meta::YAML.
.PP
\&\fBParse::CPAN::Meta\fR provides three methods: \f(CW\*(C`load_file\*(C'\fR, \f(CW\*(C`load_json_string\*(C'\fR,
and \f(CW\*(C`load_yaml_string\*(C'\fR.  These will read and deserialize \s-1CPAN\s0 metafiles, and
are described below in detail.
.PP
\&\fBParse::CPAN::Meta\fR provides a legacy \s-1API\s0 of only two functions,
based on the \s-1YAML\s0 functions of the same name. Wherever possible,
identical calling semantics are used.  These may only be used with \s-1YAML\s0 sources.
.PP
All error reporting is done with exceptions (die'ing).
.PP
Note that \s-1META\s0 files are expected to be in \s-1UTF\-8\s0 encoding, only.  When
converted string data, it must first be decoded from \s-1UTF\-8.\s0
.SH "METHODS"
.IX Header "METHODS"
.SS "load_file"
.IX Subsection "load_file"
.Vb 1
\&  my $metadata_structure = Parse::CPAN::Meta\->load_file(\*(AqMETA.json\*(Aq);
\&
\&  my $metadata_structure = Parse::CPAN::Meta\->load_file(\*(AqMETA.yml\*(Aq);
.Ve
.PP
This method will read the named file and deserialize it to a data structure,
determining whether it should be \s-1JSON\s0 or \s-1YAML\s0 based on the filename.  On
Perl 5.8.1 or later, the file will be read using the \*(L":utf8\*(R" \s-1IO\s0 layer.
.SS "load_yaml_string"
.IX Subsection "load_yaml_string"
.Vb 1
\&  my $metadata_structure = Parse::CPAN::Meta\->load_yaml_string($yaml_string);
.Ve
.PP
This method deserializes the given string of \s-1YAML\s0 and returns the first
document in it.  (\s-1CPAN\s0 metadata files should always have only one document.)
If the source was \s-1UTF\-8\s0 encoded, the string must be decoded before calling
\&\f(CW\*(C`load_yaml_string\*(C'\fR.
.SS "load_json_string"
.IX Subsection "load_json_string"
.Vb 1
\&  my $metadata_structure = Parse::CPAN::Meta\->load_json_string($json_string);
.Ve
.PP
This method deserializes the given string of \s-1JSON\s0 and the result.  
If the source was \s-1UTF\-8\s0 encoded, the string must be decoded before calling
\&\f(CW\*(C`load_json_string\*(C'\fR.
.SS "yaml_backend"
.IX Subsection "yaml_backend"
.Vb 1
\&  my $backend = Parse::CPAN::Meta\->yaml_backend;
.Ve
.PP
Returns the module name of the \s-1YAML\s0 serializer. See \*(L"\s-1ENVIRONMENT\*(R"\s0
for details.
.SS "json_backend"
.IX Subsection "json_backend"
.Vb 1
\&  my $backend = Parse::CPAN::Meta\->json_backend;
.Ve
.PP
Returns the module name of the \s-1JSON\s0 serializer.  This will either
be \s-1JSON::PP\s0 or \s-1JSON\s0.  Even if \f(CW\*(C`PERL_JSON_BACKEND\*(C'\fR is set,
this will return \s-1JSON\s0 as further delegation is handled by
the \s-1JSON\s0 module.  See \*(L"\s-1ENVIRONMENT\*(R"\s0 for details.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
For maintenance clarity, no functions are exported.  These functions are
available for backwards compatibility only and are best avoided in favor of
\&\f(CW\*(C`load_file\*(C'\fR.
.SS "Load"
.IX Subsection "Load"
.Vb 1
\&  my @yaml = Parse::CPAN::Meta::Load( $string );
.Ve
.PP
Parses a string containing a valid \s-1YAML\s0 stream into a list of Perl data
structures.
.SS "LoadFile"
.IX Subsection "LoadFile"
.Vb 1
\&  my @yaml = Parse::CPAN::Meta::LoadFile( \*(AqMETA.yml\*(Aq );
.Ve
.PP
Reads the \s-1YAML\s0 stream from a file instead of a string.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.SS "\s-1PERL_JSON_BACKEND\s0"
.IX Subsection "PERL_JSON_BACKEND"
By default, \s-1JSON::PP\s0 will be used for deserializing \s-1JSON\s0 data. If the
\&\f(CW\*(C`PERL_JSON_BACKEND\*(C'\fR environment variable exists, is true and is not
\&\*(L"\s-1JSON::PP\*(R",\s0 then the \s-1JSON\s0 module (version 2.5 or greater) will be loaded and
used to interpret \f(CW\*(C`PERL_JSON_BACKEND\*(C'\fR.  If \s-1JSON\s0 is not installed or is too
old, an exception will be thrown.
.SS "\s-1PERL_YAML_BACKEND\s0"
.IX Subsection "PERL_YAML_BACKEND"
By default, CPAN::Meta::YAML will be used for deserializing \s-1YAML\s0 data. If
the \f(CW\*(C`PERL_YAML_BACKEND\*(C'\fR environment variable is defined, then it is intepreted
as a module to use for deserialization.  The given module must be installed,
must load correctly and must implement the \f(CW\*(C`Load()\*(C'\fR function or an exception
will be thrown.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Parse\-CPAN\-Meta>
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006 \- 2010 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::CPAN::Meta5.16.3pm                    0100644 0001750 0001750 00000022376 12566207454 024523  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::CPAN::Meta 3"
.TH Parse::CPAN::Meta 3 "2012-04-05" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::CPAN::Meta \- Parse META.yml and META.json CPAN metadata files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    #############################################
\&    # In your file
\&    
\&    \-\-\-
\&    name: My\-Distribution
\&    version: 1.23
\&    resources:
\&      homepage: "http://example.com/dist/My\-Distribution"
\&    
\&    
\&    #############################################
\&    # In your program
\&    
\&    use Parse::CPAN::Meta;
\&    
\&    my $distmeta = Parse::CPAN::Meta\->load_file(\*(AqMETA.yml\*(Aq);
\&    
\&    # Reading properties
\&    my $name     = $distmeta\->{name};
\&    my $version  = $distmeta\->{version};
\&    my $homepage = $distmeta\->{resources}{homepage};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBParse::CPAN::Meta\fR is a parser for \fI\s-1META\s0.json\fR and \fI\s-1META\s0.yml\fR files, using
\&\s-1JSON::PP\s0 and/or CPAN::Meta::YAML.
.PP
\&\fBParse::CPAN::Meta\fR provides three methods: \f(CW\*(C`load_file\*(C'\fR, \f(CW\*(C`load_json_string\*(C'\fR,
and \f(CW\*(C`load_yaml_string\*(C'\fR.  These will read and deserialize \s-1CPAN\s0 metafiles, and
are described below in detail.
.PP
\&\fBParse::CPAN::Meta\fR provides a legacy \s-1API\s0 of only two functions,
based on the \s-1YAML\s0 functions of the same name. Wherever possible,
identical calling semantics are used.  These may only be used with \s-1YAML\s0 sources.
.PP
All error reporting is done with exceptions (die'ing).
.PP
Note that \s-1META\s0 files are expected to be in \s-1UTF\-8\s0 encoding, only.  When
converted string data, it must first be decoded from \s-1UTF\-8\s0.
.SH "METHODS"
.IX Header "METHODS"
.SS "load_file"
.IX Subsection "load_file"
.Vb 1
\&  my $metadata_structure = Parse::CPAN::Meta\->load_file(\*(AqMETA.json\*(Aq);
\&
\&  my $metadata_structure = Parse::CPAN::Meta\->load_file(\*(AqMETA.yml\*(Aq);
.Ve
.PP
This method will read the named file and deserialize it to a data structure,
determining whether it should be \s-1JSON\s0 or \s-1YAML\s0 based on the filename.  On
Perl 5.8.1 or later, the file will be read using the \*(L":utf8\*(R" \s-1IO\s0 layer.
.SS "load_yaml_string"
.IX Subsection "load_yaml_string"
.Vb 1
\&  my $metadata_structure = Parse::CPAN::Meta\->load_yaml_string($yaml_string);
.Ve
.PP
This method deserializes the given string of \s-1YAML\s0 and returns the first
document in it.  (\s-1CPAN\s0 metadata files should always have only one document.)
If the source was \s-1UTF\-8\s0 encoded, the string must be decoded before calling
\&\f(CW\*(C`load_yaml_string\*(C'\fR.
.SS "load_json_string"
.IX Subsection "load_json_string"
.Vb 1
\&  my $metadata_structure = Parse::CPAN::Meta\->load_json_string($json_string);
.Ve
.PP
This method deserializes the given string of \s-1JSON\s0 and the result.  
If the source was \s-1UTF\-8\s0 encoded, the string must be decoded before calling
\&\f(CW\*(C`load_json_string\*(C'\fR.
.SS "yaml_backend"
.IX Subsection "yaml_backend"
.Vb 1
\&  my $backend = Parse::CPAN::Meta\->yaml_backend;
.Ve
.PP
Returns the module name of the \s-1YAML\s0 serializer. See \*(L"\s-1ENVIRONMENT\s0\*(R"
for details.
.SS "json_backend"
.IX Subsection "json_backend"
.Vb 1
\&  my $backend = Parse::CPAN::Meta\->json_backend;
.Ve
.PP
Returns the module name of the \s-1JSON\s0 serializer.  This will either
be \s-1JSON::PP\s0 or \s-1JSON\s0.  Even if \f(CW\*(C`PERL_JSON_BACKEND\*(C'\fR is set,
this will return \s-1JSON\s0 as further delegation is handled by
the \s-1JSON\s0 module.  See \*(L"\s-1ENVIRONMENT\s0\*(R" for details.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
For maintenance clarity, no functions are exported.  These functions are
available for backwards compatibility only and are best avoided in favor of
\&\f(CW\*(C`load_file\*(C'\fR.
.SS "Load"
.IX Subsection "Load"
.Vb 1
\&  my @yaml = Parse::CPAN::Meta::Load( $string );
.Ve
.PP
Parses a string containing a valid \s-1YAML\s0 stream into a list of Perl data
structures.
.SS "LoadFile"
.IX Subsection "LoadFile"
.Vb 1
\&  my @yaml = Parse::CPAN::Meta::LoadFile( \*(AqMETA.yml\*(Aq );
.Ve
.PP
Reads the \s-1YAML\s0 stream from a file instead of a string.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.SS "\s-1PERL_JSON_BACKEND\s0"
.IX Subsection "PERL_JSON_BACKEND"
By default, \s-1JSON::PP\s0 will be used for deserializing \s-1JSON\s0 data. If the
\&\f(CW\*(C`PERL_JSON_BACKEND\*(C'\fR environment variable exists, is true and is not
\&\*(L"\s-1JSON::PP\s0\*(R", then the \s-1JSON\s0 module (version 2.5 or greater) will be loaded and
used to interpret \f(CW\*(C`PERL_JSON_BACKEND\*(C'\fR.  If \s-1JSON\s0 is not installed or is too
old, an exception will be thrown.
.SS "\s-1PERL_YAML_BACKEND\s0"
.IX Subsection "PERL_YAML_BACKEND"
By default, CPAN::Meta::YAML will be used for deserializing \s-1YAML\s0 data. If
the \f(CW\*(C`PERL_YAML_BACKEND\*(C'\fR environment variable is defined, then it is intepreted
as a module to use for deserialization.  The given module must be installed,
must load correctly and must implement the \f(CW\*(C`Load()\*(C'\fR function or an exception
will be thrown.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Parse\-CPAN\-Meta <http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Parse-CPAN-Meta>
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006 \- 2010 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::CPAN::Meta5.18.3pm                    0100644 0001750 0001750 00000022621 12566207462 024515  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::CPAN::Meta 3pm"
.TH Parse::CPAN::Meta 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::CPAN::Meta \- Parse META.yml and META.json CPAN metadata files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    #############################################
\&    # In your file
\&    
\&    \-\-\-
\&    name: My\-Distribution
\&    version: 1.23
\&    resources:
\&      homepage: "http://example.com/dist/My\-Distribution"
\&    
\&    
\&    #############################################
\&    # In your program
\&    
\&    use Parse::CPAN::Meta;
\&    
\&    my $distmeta = Parse::CPAN::Meta\->load_file(\*(AqMETA.yml\*(Aq);
\&    
\&    # Reading properties
\&    my $name     = $distmeta\->{name};
\&    my $version  = $distmeta\->{version};
\&    my $homepage = $distmeta\->{resources}{homepage};
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBParse::CPAN::Meta\fR is a parser for \fI\s-1META\s0.json\fR and \fI\s-1META\s0.yml\fR files, using
\&\s-1JSON::PP\s0 and/or CPAN::Meta::YAML.
.PP
\&\fBParse::CPAN::Meta\fR provides three methods: \f(CW\*(C`load_file\*(C'\fR, \f(CW\*(C`load_json_string\*(C'\fR,
and \f(CW\*(C`load_yaml_string\*(C'\fR.  These will read and deserialize \s-1CPAN\s0 metafiles, and
are described below in detail.
.PP
\&\fBParse::CPAN::Meta\fR provides a legacy \s-1API\s0 of only two functions,
based on the \s-1YAML\s0 functions of the same name. Wherever possible,
identical calling semantics are used.  These may only be used with \s-1YAML\s0 sources.
.PP
All error reporting is done with exceptions (die'ing).
.PP
Note that \s-1META\s0 files are expected to be in \s-1UTF\-8\s0 encoding, only.  When
converted string data, it must first be decoded from \s-1UTF\-8.\s0
.SH "METHODS"
.IX Header "METHODS"
.SS "load_file"
.IX Subsection "load_file"
.Vb 1
\&  my $metadata_structure = Parse::CPAN::Meta\->load_file(\*(AqMETA.json\*(Aq);
\&
\&  my $metadata_structure = Parse::CPAN::Meta\->load_file(\*(AqMETA.yml\*(Aq);
.Ve
.PP
This method will read the named file and deserialize it to a data structure,
determining whether it should be \s-1JSON\s0 or \s-1YAML\s0 based on the filename.  On
Perl 5.8.1 or later, the file will be read using the \*(L":utf8\*(R" \s-1IO\s0 layer.
.SS "load_yaml_string"
.IX Subsection "load_yaml_string"
.Vb 1
\&  my $metadata_structure = Parse::CPAN::Meta\->load_yaml_string($yaml_string);
.Ve
.PP
This method deserializes the given string of \s-1YAML\s0 and returns the first
document in it.  (\s-1CPAN\s0 metadata files should always have only one document.)
If the source was \s-1UTF\-8\s0 encoded, the string must be decoded before calling
\&\f(CW\*(C`load_yaml_string\*(C'\fR.
.SS "load_json_string"
.IX Subsection "load_json_string"
.Vb 1
\&  my $metadata_structure = Parse::CPAN::Meta\->load_json_string($json_string);
.Ve
.PP
This method deserializes the given string of \s-1JSON\s0 and the result.  
If the source was \s-1UTF\-8\s0 encoded, the string must be decoded before calling
\&\f(CW\*(C`load_json_string\*(C'\fR.
.SS "yaml_backend"
.IX Subsection "yaml_backend"
.Vb 1
\&  my $backend = Parse::CPAN::Meta\->yaml_backend;
.Ve
.PP
Returns the module name of the \s-1YAML\s0 serializer. See \*(L"\s-1ENVIRONMENT\*(R"\s0
for details.
.SS "json_backend"
.IX Subsection "json_backend"
.Vb 1
\&  my $backend = Parse::CPAN::Meta\->json_backend;
.Ve
.PP
Returns the module name of the \s-1JSON\s0 serializer.  This will either
be \s-1JSON::PP\s0 or \s-1JSON\s0.  Even if \f(CW\*(C`PERL_JSON_BACKEND\*(C'\fR is set,
this will return \s-1JSON\s0 as further delegation is handled by
the \s-1JSON\s0 module.  See \*(L"\s-1ENVIRONMENT\*(R"\s0 for details.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
For maintenance clarity, no functions are exported.  These functions are
available for backwards compatibility only and are best avoided in favor of
\&\f(CW\*(C`load_file\*(C'\fR.
.SS "Load"
.IX Subsection "Load"
.Vb 1
\&  my @yaml = Parse::CPAN::Meta::Load( $string );
.Ve
.PP
Parses a string containing a valid \s-1YAML\s0 stream into a list of Perl data
structures.
.SS "LoadFile"
.IX Subsection "LoadFile"
.Vb 1
\&  my @yaml = Parse::CPAN::Meta::LoadFile( \*(AqMETA.yml\*(Aq );
.Ve
.PP
Reads the \s-1YAML\s0 stream from a file instead of a string.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.SS "\s-1PERL_JSON_BACKEND\s0"
.IX Subsection "PERL_JSON_BACKEND"
By default, \s-1JSON::PP\s0 will be used for deserializing \s-1JSON\s0 data. If the
\&\f(CW\*(C`PERL_JSON_BACKEND\*(C'\fR environment variable exists, is true and is not
\&\*(L"\s-1JSON::PP\*(R",\s0 then the \s-1JSON\s0 module (version 2.5 or greater) will be loaded and
used to interpret \f(CW\*(C`PERL_JSON_BACKEND\*(C'\fR.  If \s-1JSON\s0 is not installed or is too
old, an exception will be thrown.
.SS "\s-1PERL_YAML_BACKEND\s0"
.IX Subsection "PERL_YAML_BACKEND"
By default, CPAN::Meta::YAML will be used for deserializing \s-1YAML\s0 data. If
the \f(CW\*(C`PERL_YAML_BACKEND\*(C'\fR environment variable is defined, then it is intepreted
as a module to use for deserialization.  The given module must be installed,
must load correctly and must implement the \f(CW\*(C`Load()\*(C'\fR function or an exception
will be thrown.
.SH "SUPPORT"
.IX Header "SUPPORT"
Bugs should be reported via the \s-1CPAN\s0 bug tracker at
.PP
<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=Parse\-CPAN\-Meta>
.SH "AUTHOR"
.IX Header "AUTHOR"
Adam Kennedy <adamk@cpan.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2006 \- 2010 Adam Kennedy.
.PP
This program is free software; you can redistribute
it and/or modify it under the same terms as Perl itself.
.PP
The full text of the license can be found in the
\&\s-1LICENSE\s0 file included with this module.
                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp.3pm                             0100644 0001750 0001750 00000603163 12566242262 023546  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp 3"
.TH Parse::Eyapp 3 "2012-03-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp \- Bottom up parser generator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  # File \*(Aqcalc.eyp\*(Aq: translates infix expressions to postfix
\&  # Compile it with:  eyapp \-o calc.pl \-C Postfix.eyp
\&  # Execution:        ./calc.pl \-c \*(Aqa = 2*3+b\*(Aq
\&  %token NUM = /([0\-9]+(?:\e.[0\-9]+)?)/
\&  %token VAR = /([A\-Za\-z][A\-Za\-z0\-9_]*)/
\&
\&  %right  \*(Aq=\*(Aq
\&  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&  %left   NEG
\&
\&  %defaultaction { "$left $right $op"; }
\&
\&  %%
\&  line: $exp  { print "$exp\en" }
\&  ;
\&
\&  exp:        $NUM  { $NUM }            
\&          |   $VAR  { $VAR }            
\&          |   VAR.left \*(Aq=\*(Aq.op exp.right         
\&          |   exp.left \*(Aq+\*(Aq.op exp.right         
\&          |   exp.left \*(Aq\-\*(Aq.op exp.right        
\&          |   exp.left \*(Aq*\*(Aq.op exp.right       
\&          |   exp.left \*(Aq/\*(Aq.op exp.right      
\&          |   \*(Aq\-\*(Aq $exp %prec NEG { "$exp NEG" }
\&          |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq { $exp }      
\&  ;
\&
\&  %%
.Ve
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
Parse::Eyapp (Extended yapp) is a collection of modules that extends Francois
Desarmenien Parse::Yapp 1.05.  Eyapp extends yacc/yapp syntax with
functionalities like named attributes, EBNF-like expressions, modifiable
default action (like Parse::RecDescent autoaction), grammar reuse, 
automatic abstract syntax tree building,
syntax directed data generation,
translation schemes, tree regular
expressions, tree transformations, scope analysis support, directed acyclic
graphs and a few more.
.PP
Parse-Eyapp \s-1LALR\s0 parsing engine provides mechanisms for the \fIdynamic resolution\fR
(i.e. at parsing time and not at grammar compilation time) of shift-reduce and 
reduce-reduce conflicts that can not be satisfactorily solved
using static precedences.  Parse-Eyapp also provide means to solve the problem of 
languages where the token's type depends upon contextual information like in
the well known \s-1PL/I\s0 statement:
.PP
.Vb 1
\&         if then=if then if=then
.Ve
.SH "THE DOCUMENTATION OF Parse::Eyapp"
.IX Header "THE DOCUMENTATION OF Parse::Eyapp"
The documentation is distributed among several files:
.IP "\(bu" 4
To get familiar with  \f(CW\*(C`eyapp\*(C'\fR read Parse::Eyapp::eyappintro
It assumes a reader familiar with parsing techniques.
Familiarity with \f(CW\*(C`yacc\*(C'\fR or \f(CW\*(C`yapp\*(C'\fR, \f(CW\*(C`RecDescent\*(C'\fR, \f(CW\*(C`ANTLR\*(C'\fR or
similar tools will help but it is not indispensable.
.IP "\(bu" 4
To master conflict resolution read Parse::Eyapp::debuggingtut.
.IP "\(bu" 4
The document Parse::Eyapp::defaultactionsintro describes the use of
default actions and how to deal with \fIgrammar reuse\fR and factorization.
.IP "\(bu" 4
Parse::Eyapp can be used to generate data that conforms with a given grammar.
The tutorial Parse::Eyapp::datagenerationtut shows how.
.IP "\(bu" 4
The document Parse::Eyapp::eyapplanguageref 
describes the Eyapp language.
.IP "\(bu" 4
The document Parse::Eyapp::translationschemestut 
describes the use of Translation Schemes inside the Eyapp language.
.IP "\(bu" 4
The Treeregexp language is described in Parse::Eyapp::Treeregexp.
Treeregexp is a language to describe transformations of abstract syntax trees.
.IP "\(bu" 4
Read Parse::Eyapp::Scope to know
about the functionalities provided for Scope Analysis.
.IP "\(bu" 4
A set of basic miscellaneous support functions 
are described in Parse::Eyapp::Base. 
Several of these functions are related to the dynamic use of methods 
and subroutines.
.IP "\(bu" 4
Don't forget to read the section \*(L"\s-1BUGS AND LIMITATIONS\*(R"\s0
.PP
The examples used in this document can be found in
the directory \f(CW\*(C`examples/Eyapp\*(C'\fR accompanying this distribution.
As a general rule, each pod/tutorial has an associated subdirectory
of \f(CW\*(C`examples/Eyapp\*(C'\fR. Thus, the examples used in the documentation
of Parse::Eyapp::eyappintro can be found in \f(CW\*(C`examples/Eyapp/eyappintro\*(C'\fR;
The examples mentioned in Parse::Eyapp::Node can be found
in \f(CW\*(C`examples/Eyapp/Node\*(C'\fR. There are a few exceptions however.
For those exceptions the relative location where the file can be found
will be mentioned.
.SH "THE EYAPP LANGUAGE"
.IX Header "THE EYAPP LANGUAGE"
.SS "Eyapp Grammar"
.IX Subsection "Eyapp Grammar"
This section describes the syntax of the Eyapp language using its own notation.
The grammar extends yacc and yapp grammars.  Semicolons have been omitted
to save space.  Between C\-like comments you can find an (informal) explanation
of the language associated with each token.
.PP
.Vb 10
\&  %token ASSOC /* is %(left|right|nonassoc) */                                                                                                          
\&  %token BEGINCODE /* is %begin { Perl code ... } */                                                                                                    
\&  %token CODE /* is { Perl code ... } */                                                                                                                
\&  %token CONFLICT /* is %conflict */                                                                                                                    
\&  %token DEFAULTACTION /* is %defaultaction */                                                                                                          
\&  %token EXPECT /* is %expect */                                                                                                                        
\&  %token HEADCODE /* is %{ Perl code ... %} */                                                                                                          
\&  %token IDENT /* is [A\-Za\-z_][A\-Za\-z0\-9_]* */                                                                                                          
\&  %token LABEL /* is :[A\-Za\-z0\-9_]+ */                                                                                                                  
\&  %token LITERAL /* is a string literal like \*(Aqhello\*(Aq */                                                                                                 
\&  %token METATREE /* is %metatree */                                                                                                                    
\&  %token NAME /* is %name */                                                                                                                            
\&  %token NAMINGSCHEME /* is %namingscheme */                                                                                                            
\&  %token NOCOMPACT /* is %nocompact */                                                                                                                  
\&  %token NUMBER /* is \ed+ */                                                                                                                            
\&  %token OPTION /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e? */                                                                                                 
\&  %token PLUS /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e+ */                                                                                                   
\&  %token PREC /* is %prec */                                                                                                                            
\&  %token PREFIX /* is %prefix\es+([A\-Za\-z_][A\-Za\-z0\-9_:]*::) */                                                                                          
\&  %token SEMANTIC /* is %semantic\es+token */                                                                                                            
\&  %token STAR /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e* */                                                                                                   
\&  %token START /* is %start */                                                                                                                          
\&  %token STRICT /* is %strict */                                                                                                                        
\&  %token SYNTACTIC /* is %syntactic\es+token */                                                                                                          
\&  %token TAILCODE /* is { Perl code ... } */                                                                                                            
\&  %token TOKEN /* is %token */                                                                                                                          
\&  %token TREE /* is %tree */                                                                                                                            
\&  %token TYPE /* is %type */                                                                                                                            
\&  %token UNION /* is %union */                                                                                                                          
\&  %start eyapp                                                                                                                                          
\&
\&  %%
\&
\&  # Main rule
\&  eyapp:     
\&        head body tail 
\&  ;                    
\&  #Common rules:       
\&  symbol:              
\&        LITERAL        
\&      | ident #default action
\&  ;                          
\&  ident:                     
\&        IDENT                
\&  ;                          
\&  # Head section:            
\&  head:                      
\&        headsec \*(Aq%%\*(Aq         
\&  ;                          
\&  headsec:                   
\&        #empty  #default action
\&      | decls #default action  
\&  ;                            
\&  decls:                       
\&        decls decl #default action
\&      | decl #default action      
\&  ;                               
\&  decl:                           
\&        \*(Aq\en\*(Aq #default action      
\&      | SEMANTIC typedecl symlist \*(Aq\en\*(Aq
\&      | SYNTACTIC typedecl symlist \*(Aq\en\*(Aq
\&      | TOKEN typedecl toklist \*(Aq\en\*(Aq    
\&      | ASSOC typedecl symlist \*(Aq\en\*(Aq    
\&      | START ident \*(Aq\en\*(Aq               
\&      | PREFIX \*(Aq\en\*(Aq                    
\&      | WHITES CODE \*(Aq\en\*(Aq               
\&      | WHITES REGEXP \*(Aq\en\*(Aq             
\&      | WHITES \*(Aq=\*(Aq CODE \*(Aq\en\*(Aq           
\&      | WHITES \*(Aq=\*(Aq REGEXP \*(Aq\en\*(Aq         
\&      | NAMINGSCHEME CODE \*(Aq\en\*(Aq         
\&      | HEADCODE \*(Aq\en\*(Aq                  
\&      | UNION CODE \*(Aq\en\*(Aq  #ignore       
\&      | DEFAULTACTION CODE \*(Aq\en\*(Aq        
\&      | LEXER CODE \*(Aq\en\*(Aq                
\&      | TREE \*(Aq\en\*(Aq                      
\&      | METATREE \*(Aq\en\*(Aq                  
\&      | STRICT \*(Aq\en\*(Aq                    
\&      | NOCOMPACT \*(Aq\en\*(Aq                 
\&      | TYPE typedecl identlist \*(Aq\en\*(Aq   
\&      | CONFLICT ident CODE \*(Aq\en\*(Aq       
\&      | EXPECT NUMBER \*(Aq\en\*(Aq             
\&      | EXPECT NUMBER NUMBER \*(Aq\en\*(Aq      
\&      | EXPECTRR NUMBER \*(Aq\en\*(Aq           
\&      | error \*(Aq\en\*(Aq                     
\&  ;                                    
\&  typedecl:                            
\&        #empty                         
\&      | \*(Aq<\*(Aq IDENT \*(Aq>\*(Aq                  
\&  ;                                    
\&  symlist:                             
\&        symlist symbol                 
\&      | symbol                         
\&  ;                                    
\&  toklist:                             
\&        toklist tokendef               
\&      | tokendef                       
\&  ;                                    
\&  tokendef:                            
\&        symbol \*(Aq=\*(Aq REGEXP              
\&      | symbol \*(Aq=\*(Aq CODE                
\&      | symbol                         
\&  ;                                    
\&  identlist:                           
\&        identlist ident                
\&      | ident                          
\&  ;                                    
\&  # Rule section                       
\&  body:                                
\&        rulesec \*(Aq%%\*(Aq                   
\&      | \*(Aq%%\*(Aq                           
\&  ;                                    
\&  rulesec:                             
\&        rulesec rules #default action  
\&      | startrules #default action     
\&  ;                                    
\&  startrules:                          
\&        IDENT \*(Aq:\*(Aq  rhss \*(Aq;\*(Aq            
\&      | error \*(Aq;\*(Aq                      
\&  ;                                    
\&  rules:                               
\&        IDENT \*(Aq:\*(Aq rhss \*(Aq;\*(Aq             
\&      | error \*(Aq;\*(Aq                      
\&  ;                                    
\&  rhss:                                
\&        rhss \*(Aq|\*(Aq rule                  
\&      | rule                           
\&  ;                                    
\&  rule:                                
\&        optname rhs prec epscode       
\&      | optname rhs                    
\&  ;                                    
\&  rhs:                                 
\&        #empty      #default action (will return undef)
\&      | rhselts #default action                        
\&  ;                                                    
\&  rhselts:                                             
\&        rhselts rhseltwithid                           
\&      | rhseltwithid                                   
\&  ;                                                    
\&  rhseltwithid:                                        
\&        rhselt \*(Aq.\*(Aq IDENT
\&      | \*(Aq$\*(Aq rhselt
\&      | \*(Aq$\*(Aq error
\&      | rhselt
\&  ;
\&  rhselt:
\&        symbol
\&      | code
\&      | DPREC ident
\&      | \*(Aq(\*(Aq optname rhs \*(Aq)\*(Aq
\&      | rhselt STAR
\&      | rhselt \*(Aq<\*(Aq STAR symbol \*(Aq>\*(Aq
\&      | rhselt OPTION
\&      | rhselt \*(Aq<\*(Aq PLUS symbol \*(Aq>\*(Aq
\&      | rhselt PLUS
\&  ;
\&  optname:
\&        /* empty */
\&      | NAME IDENT
\&      | NAME IDENT LABEL
\&      | NAME LABEL
\&  ;
\&  prec:
\&        PREC symbol
\&  ;
\&  epscode:
\&      | code
\&  ;
\&  code:
\&        CODE
\&      | BEGINCODE
\&  ;
\&  # Tail section:
\&  tail:
\&        /*empty*/
\&      | TAILCODE
\&  ;
\&
\&  %%
.Ve
.PP
The semantic of \f(CW\*(C`Eyapp\*(C'\fR agrees with the semantic of \f(CW\*(C`yacc\*(C'\fR and \f(CW\*(C`yapp\*(C'\fR for
all the common constructions.
.SS "Comments"
.IX Subsection "Comments"
Comments are either Perl style, from \f(CW\*(C`#\*(C'\fR
up to the end of line, or C style, enclosed between  \f(CW\*(C`/*\*(C'\fR and \f(CW\*(C`*/\*(C'\fR.
.SS "Syntactic Variables, Symbolic Tokens and String Literals"
.IX Subsection "Syntactic Variables, Symbolic Tokens and String Literals"
Two kind of symbols may appear inside a Parse::Eyapp program:
\&\fINon-terminal\fR symbols or \fIsyntactic variables\fR, 
called also \fIleft-hand-side\fR symbols
and \fITerminal\fR symbols, called
also \fITokens\fR.
.PP
Tokens are the symbols the lexical analyzer function returns to the parser.
There are two kinds of tokens: \fIsymbolic tokens\fR and \fIstring
literals\fR.
.PP
\&\fISyntactic variables\fR and \fIsymbolic tokens\fR identifiers must conform
to the regular expression \f(CW\*(C`[A\-Za\-z][A\-Za\-z0\-9_]*\*(C'\fR.
.PP
When building the syntax tree (i.e. when running under the \f(CW%tree\fR
directive) \fIsymbolic tokens\fR will be considered \fIsemantic tokens\fR (see section
\&\*(L"Syntactic and Semantic tokens\*(R"). \fISymbolic tokens\fR yield nodes
in the Abstract Syntax Tree.
.PP
String literals are enclosed in single quotes and can contain almost
anything. They will be received by the parser as double-quoted strings. 
Any special character as \f(CW\*(Aq"\*(Aq\fR, \f(CW\*(Aq$\*(Aq\fR and \f(CW\*(Aq@\*(Aq\fR is escaped.
To have a single quote inside a literal, escape it with '\e'.
.PP
When building the syntax tree (i.e. when running under the \f(CW%tree\fR
directive) \fIstring literals\fR will be considered \fIsyntactic tokens\fR (see section
\&\*(L"Syntactic and Semantic tokens\*(R"). \fISyntactic tokens\fR do not produce
nodes in the Abstract Syntax Tree.
.PP
The examples used along this document can be found in the directory 
\&\f(CW\*(C`examples/eyapplanguageref\*(C'\fR accompanying this distribution.
.ie n .SS "Parts of an ""eyapp"" Program"
.el .SS "Parts of an \f(CWeyapp\fP Program"
.IX Subsection "Parts of an eyapp Program"
An Eyapp program has three parts called head, body and tail:
.PP
.Vb 1
\&                                 eyapp: head body tail ;
.Ve
.PP
Each part is separated from the former by the symbol \f(CW\*(C`%%\*(C'\fR:
.PP
.Vb 2
\&                                 head: headsec \*(Aq%%\*(Aq
\&                                 body: rulesec \*(Aq%%\*(Aq
.Ve
.SH "THE HEAD SECTION"
.IX Header "THE HEAD SECTION"
The head section contains a list of declarations
.PP
.Vb 1
\&                                 headsec:  decl *
.Ve
.PP
There are different kinds of declarations.
.PP
This reference does not 
fully describes all the declarations that are shared with \f(CW\*(C`yacc\*(C'\fR and 
yapp.
.SS "Example of Head Section"
.IX Subsection "Example of Head Section"
In this and the next sections we will describe the basics
of the Eyapp language using the file \f(CW\*(C`examples/eyapplanguageref/Calc.eyp\*(C'\fR 
that accompanies this distribution. This file implements a trivial 
calculator. Here is the header section:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,/%%/p\*(Aq Calc.eyp | cat \-n
\&     1  # examples/eyapplanguageref/Calc.eyp
\&     2  %whites    =  /([ \et]*(?:#.*)?)/
\&     3  %token NUM =  /([0\-9]+(?:\e.[0\-9]+)?)/
\&     4  %token VAR =  /([A\-Za\-z][A\-Za\-z0\-9_]*)/
\&     5
\&     6  %right  \*(Aq=\*(Aq
\&     7  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     8  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     9  %left   NEG
\&    10  %right  \*(Aq^\*(Aq
\&    11
\&    12  %{
\&    13  my %s; # symbol table
\&    14  %}
\&    15
\&    16  %%
.Ve
.PP
Eyapp produces a lexical generator from the descriptions given
by the \f(CW%token\fR and \f(CW%whites\fR directives plus the tokens used 
inside the body section.
.PP
.Vb 3
\&       %whites    =  /([ \et]*(?:#.*)?)/
\&       %token NUM =  /([0\-9]+(?:\e.[0\-9]+)?)/
\&       %token VAR =  /([A\-Za\-z][A\-Za\-z0\-9_]*)/
.Ve
.PP
See section \*(L"Automatic Generation of Lexical Analyzers\*(R" for more details.
.SS "Declarations and Precedence"
.IX Subsection "Declarations and Precedence"
Lines 2\-5 declare several tokens. The usual way to declare
tokens is through the \f(CW%token\fR directive. The declarations 
\&\f(CW%nonassoc\fR, \f(CW%left\fR and \f(CW%right\fR 
not only declare the tokens but also associate a \fIpriority\fR with them.  
Tokens declared in the same line have the same precedence. 
Tokens declared with these directives in lines below have more
precedence than those declared above. Thus, in the example
above
we are saying that \f(CW"+"\fR and \f(CW"\-"\fR have the same precedence
but higher precedence than =. The final effect of \f(CW"\-"\fR
having greater precedence than = will be that an
expression like:
.PP
.Vb 1
\&                        a = 4 \- 5
.Ve
.PP
will be interpreted as
.PP
.Vb 1
\&                        a = (4 \- 5)
.Ve
.PP
and not as
.PP
.Vb 1
\&                        (a = 4) \- 5
.Ve
.PP
The use of the \f(CW%left\fR indicates that \- in case of ambiguity 
and a match between precedences \- the parser must build the tree corresponding
to a left parenthesizing. Thus, the expression
.PP
.Vb 1
\&                         4 \- 5 \- 9
.Ve
.PP
will be interpreted as
.PP
.Vb 1
\&                         (4 \- 5) \- 9
.Ve
.PP
You can refer to the token end-of-input in the header section using the string \f(CW\*(Aq\*(Aq\fR (for example
to give it some priority, see the example in \f(CW\*(C`examples/debuggingtut/typicalrrwithprec.eyp\*(C'\fR).
.SS "Header Code"
.IX Subsection "Header Code"
Perl code surrounded by \f(CW\*(C`%{\*(C'\fR and \f(CW\*(C`%}\*(C'\fR
can be inserted in the head section. Such code will be inserted in the module
generated by \f(CW\*(C`eyapp\*(C'\fR near the beginning. Therefore, declarations like the
one of the calculator symbol table \f(CW%s\fR
.PP
.Vb 3
\&  7  %{
\&  8  my %s; # symbol table
\&  9  %}
.Ve
.PP
will be visible from almost any point in the file.
.SS "The Start Symbol of the Grammar"
.IX Subsection "The Start Symbol of the Grammar"
\&\f(CW\*(C`%start program\*(C'\fR declares \f(CW\*(C`program\*(C'\fR as the start symbol of 
the grammar. When \f(CW%start\fR is not
used, the first rule in the body section will be used.
.SS "Expect"
.IX Subsection "Expect"
The \f(CW\*(C`%expect #NUMBER\*(C'\fR directive works as in \f(CW\*(C`bison\*(C'\fR 
and  suppress warnings when the number of Shift/Reduce
conflicts is exactly \f(CW\*(C`#NUMBER\*(C'\fR.
.PP
The directive has been extended to be called with two numbers:
.PP
.Vb 1
\&  %expect NUMSHIFTRED NUMREDRED
.Ve
.PP
no warnings will be emitted if the number of shift-reduce 
conflicts is exactly \f(CW\*(C`NUMSHIFTRED\*(C'\fR and the number of reduce-reduce
conflicts is \f(CW\*(C`NUMREDRED\*(C'\fR.
.SS "Type and Union"
.IX Subsection "Type and Union"
C oriented declarations like \f(CW%type\fR and \f(CW%union\fR are
parsed but ignored.
.ie n .SS "The %strict Directive"
.el .SS "The \f(CW%strict\fP Directive"
.IX Subsection "The %strict Directive"
By default, identifiers appearing in the rule section
will be classified as terminal if they don't appear 
in the left hand side of any production rules.
.PP
The directive \f(CW%strict\fR forces the declaration of all tokens. 
The following \f(CW\*(C`eyapp\*(C'\fR program issues a warning:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n bugyapp2.eyp
\&       1  %strict
\&       2  %%
\&       3  expr: NUM;
\&       4  %%
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp bugyapp2.eyp
\&  Warning! Non declared token NUM at line 3 of bugyapp2.eyp
.Ve
.PP
To keep silent the compiler declare all tokens using
one of the token declaration directives (\f(CW%token\fR, \f(CW%left\fR, etc.)
.PP
.Vb 9
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n bugyapp3.eyp
\&       1  %strict
\&       2  %token NUM
\&       3  %%
\&       4  expr: NUM;
\&       5  %%
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp bugyapp3.eyp
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ls \-ltr | tail \-1
\&  \-rw\-r\-\-r\-\- 1 pl users 2395 2008\-10\-02 09:41 bugyapp3.pm
.Ve
.PP
It is a good practice to use \f(CW%strict\fR at the beginning of your grammar.
.ie n .SS "The %prefix Directive"
.el .SS "The \f(CW%prefix\fP Directive"
.IX Subsection "The %prefix Directive"
The \f(CW%prefix\fR directive 
is equivalent to the use of the \f(CW\*(C`yyprefix\*(C'\fR. The node classes are prefixed
with the specified prefix
.PP
.Vb 1
\&  %prefix Some::Prefix::
.Ve
.PP
See the example in \f(CW\*(C`examples/eyapplanguageref/alias_and_yyprefix.pl\*(C'\fR.
See also section \*(L"Grammar Reuse\*(R" in Parse::Eyapp::defaultactionsintro
for an example that does not involve the \f(CW%tree\fR directive.
.SS "Default Action Directive"
.IX Subsection "Default Action Directive"
In \f(CW\*(C`Parse::Eyapp\*(C'\fR you can modify the default action 
using the \f(CW\*(C`%defaultaction { Perl code }\*(C'\fR
directive. See section \*(L"\s-1DEFAULT ACTIONS\*(R"\s0.
The examples \f(CW\*(C`examples/eyapplanguageref/Postfix.eyp\*(C'\fR and 
\&\f(CW\*(C`examples/eyapplanguageref/Lhs.eyp\*(C'\fR illustrate the use of the directive.
.SS "Tree Construction Directives"
.IX Subsection "Tree Construction Directives"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR facilitates the construction of concrete syntax trees and 
abstract syntax trees (abbreviated \s-1AST\s0 from now on) through the \f(CW%tree\fR
and \f(CW%metatree\fR directives. See sections
\&\*(L"\s-1ABSTRACT SYNTAX TREES:\s0 \f(CW%tree\fR \s-1AND\s0 \f(CW%name\fR\*(R"
and
Parse::Eyapp::translationschemestut.
.SS "Tokens and the Abstract Syntax Tree"
.IX Subsection "Tokens and the Abstract Syntax Tree"
The new token declaration directives \f(CW\*(C`%syntactic token\*(C'\fR and
\&\f(CW\*(C`%semantic token\*(C'\fR can change the way \f(CW\*(C`eyapp\*(C'\fR builds the abstract syntax tree.
See section \*(L"Syntactic and Semantic tokens\*(R".
.ie n .SS "The %nocompact directive"
.el .SS "The \f(CW%nocompact\fP directive"
.IX Subsection "The %nocompact directive"
This directive influences the generation of the \s-1LALR\s0 tables.
They will not be compacted and the tokens
for the \f(CW\*(C`DEFAULT\*(C'\fR reduction will be explicitly set.
It can be used to produce an \f(CW\*(C`.output\*(C'\fR file (option \f(CW\*(C`\-v\*(C'\fR)
with more information.
.SH "THE BODY"
.IX Header "THE BODY"
The body section contains the rules describing the grammar:
.PP
.Vb 3
\&                       body:   rules * \*(Aq%%\*(Aq
\&                       rules:  IDENT \*(Aq:\*(Aq rhss \*(Aq;\*(Aq  
\&                       rhss:   (optname rhs (prec epscode)?) <+ \*(Aq|\*(Aq>
.Ve
.SS "Rules"
.IX Subsection "Rules"
A rule is made of a left-hand-side symbol (the \fIsyntactic variable\fR), 
followed by a \f(CW\*(Aq:\*(Aq\fR and one
or more \fIright-hand-sides\fR (or \fIproductions\fR)
 separated by \f(CW\*(Aq|\*(Aq\fR and terminated by a \f(CW\*(Aq;\*(Aq\fR
like in:
.PP
.Vb 5
\&                          exp: 
\&                               exp \*(Aq+\*(Aq exp
\&                            |  exp \*(Aq\-\*(Aq exp
\&                            |  NUM
\&                          ;
.Ve
.PP
A \fIproduction\fR (\fIright hand side\fR) may be empty:
.PP
.Vb 4
\&                          input:   
\&                               /* empty */
\&                            |  input line
\&                          ;
.Ve
.PP
The former two productions can be abbreviated as
.PP
.Vb 3
\&                          input: 
\&                               line *
\&                          ;
.Ve
.PP
The operators \f(CW\*(C`*\*(C'\fR, \f(CW\*(C`+\*(C'\fR and \f(CW\*(C`?\*(C'\fR are presented in section
\&\*(L"\s-1LISTS AND OPTIONALS\*(R"\s0.
.PP
A \fIsyntactic variable cannot appear more than once as
a rule name\fR (This differs from \f(CW\*(C`yacc\*(C'\fR).  So you can't 
write
.PP
.Vb 2
\&    thing: foo bar ;
\&    thing: foo baz ;
.Ve
.PP
instead, write:
.PP
.Vb 4
\&    thing: 
\&           foo bar 
\&         | foo baz 
\&    ;
.Ve
.SS "Semantic Values and Semantic Actions"
.IX Subsection "Semantic Values and Semantic Actions"
In \f(CW\*(C`Parse::Eyapp\*(C'\fR 
a production rule
.PP
.Vb 1
\&                          A \-> X_1 X_2 ... X_n
.Ve
.PP
can be followed by a 
\&\fIsemantic action\fR:
.PP
.Vb 1
\&                    A \-> X_1 X_2 ... X_n { Perl Code }
.Ve
.PP
Such
semantic action is nothing but Perl code that will be treated 
as an anonymous subroutine.  The semantic action associated 
with production rule \f(CW\*(C`A \-> X_1 X_2 ... X_n\*(C'\fR  is executed
after any actions associated with the subtrees of \f(CW\*(C`X_1\*(C'\fR,
\&\f(CW\*(C`X_2\*(C'\fR, ..., \f(CW\*(C`X_n\*(C'\fR.
\&\f(CW\*(C`Eyapp\*(C'\fR parsers build the syntax tree using a left-right
bottom-up traverse of the syntax tree. Each times
the Parser visits the node associated with the 
production \f(CW\*(C`A \-> X_1 X_2 ... X_n\*(C'\fR
the associated semantic action is called. 
Associated with each symbol
of a Parse::Eyapp grammar there is a scalar \fISemantic Value\fR
or \fIAttribute\fR. The semantic values of terminals are provided
by the lexical analyzer. In the calculator example
(see file \f(CW\*(C`examples/eyapplanguageref/Calc.yp\*(C'\fR in the distribution),
the semantic value associated with an expression
is its numeric value. Thus in the rule:
.PP
.Vb 1
\&                       exp \*(Aq+\*(Aq exp { $_[1] + $_[3] }
.Ve
.PP
\&\f(CW$_[1]\fR refers to the attribute of the first \f(CW\*(C`exp\*(C'\fR, \f(CW$_[2]\fR 
is the attribute associated with \f(CW\*(Aq+\*(Aq\fR, which is the second component of the 
pair provided by the lexical analyzer and \f(CW$_[3]\fR refers to the attribute of 
the second \f(CW\*(C`exp\*(C'\fR.
.PP
When the semantic action/anonymous subroutine is called,
the arguments are as follows:
.IP "\(bu" 4
\&\f(CW$_[1]\fR to \f(CW$_[n]\fR are the attributes of
the symbols \f(CW\*(C`X_1\*(C'\fR, \f(CW\*(C`X_2\*(C'\fR, ..., \f(CW\*(C`X_n\*(C'\fR. 
Just as \f(CW$1\fR to \f(CW$n\fR in \f(CW\*(C`yacc\*(C'\fR,
.IP "\(bu" 4
\&\f(CW$_[0]\fR is the parser object itself.
Having \f(CW$_[0]\fR being the parser object itself allows you to call
parser methods. Most \f(CW\*(C`yacc\*(C'\fR macros have been converted into
parser methods. See section \*(L"\s-1METHODS AVAILABLE IN THE GENERATED CLASS\*(R"\s0 in Parse::Eyapp.
.PP
The returned value will be the attribute associated 
with the left hand side of the production.
.PP
Names can be given to the attributes using the dot notation
(see file \f(CW\*(C`examples/eyapplanguageref/CalcSimple.eyp\*(C'\fR):
.PP
.Vb 1
\&                     exp.left \*(Aq+\*(Aq exp.right { $left + $right }
.Ve
.PP
See section \*(L"\s-1NAMES FOR ATTRIBUTES\*(R"\s0 for more details about the \fIdot\fR and \fIdollar\fR 
notations.
.PP
If no action is specified and no \f(CW%defaultaction\fR is specified
the default action
.PP
.Vb 1
\&                               { $_[1] }
.Ve
.PP
will be executed instead. See section \*(L"\s-1DEFAULT ACTIONS\*(R"\s0 to know more.
.SS "Actions in Mid-Rule"
.IX Subsection "Actions in Mid-Rule"
Actions can be inserted in the middle of a production like in:
.PP
.Vb 1
\& block: \*(Aq{\*(Aq.bracket { $ids\->begin_scope(); } declaration*.decs statement*.sts \*(Aq}\*(Aq { ... }
.Ve
.PP
A middle production action is managed by inserting a new rule in the grammar and associating
the semantic action with it:
.PP
.Vb 1
\&                     Temp: /* empty */ { $ids\->begin_scope(); }
.Ve
.PP
Middle production actions can refer to the attributes on its left. They count
as one of the components of the production. Thus the program:
.PP
.Vb 5
\&  ~/LEyapp/examples/eyapplanguageref$ cat intermediateaction2.yp 
\&  %%
\&  S:  \*(Aqa\*(Aq { $_[1]x4 }.mid \*(Aqa\*(Aq { print "\en<<$_[2], $mid, $_[3]>>\en"; }
\&  ;
\&  %%
.Ve
.PP
The auxiliar syntactic variables are named \f(CW\*(C`@#position\-#order\*(C'\fR where \f(CW\*(C`#position\*(C'\fR
is the position of the action in the rhs and \f(CW\*(C`order\*(C'\fR is an ordinal number. See
the \f(CW\*(C`.output\*(C'\fR file for the former example:
.PP
.Vb 7
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-v intermediateaction2.yp
\&  ~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,5p\*(Aq intermediateaction2.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:  $start \-> S $end
\&  1:  S \-> \*(Aqa\*(Aq @1\-1 \*(Aqa\*(Aq
\&  2:  @1\-1 \-> /* empty */
.Ve
.PP
We can build an executable \f(CW\*(C`ia.pl\*(C'\fR from the former grammar using \f(CW\*(C`eyapp\*(C'\fR option \f(CW\*(C`\-C\*(C'\fR:
.PP
.Vb 1
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-C \-o ia.pl intermediateaction2.yp
.Ve
.PP
The \f(CW\*(C`main\*(C'\fR, error and lexer methods are provided by \f(CW\*(C`Parse::Eyapp\*(C'\fR.
When given input \f(CW\*(C`aa\*(C'\fR the execution will produce as output \f(CW\*(C`aaaa, aaaa, a\*(C'\fR. The option
\&\f(CW\*(C`\-d\*(C'\fR activates the debug mode, the option \f(CW\*(C`\-c\*(C'\fR tells the program to get the input from the command line::
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ ./ia.pl \-d \-c \*(Aqaa\*(Aq
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 0:
\&  Stack: 0
\&  Need token. Got >a<
\&  Shift and go to state 2.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 2:
\&  Stack: 0\->\*(Aqa\*(Aq\->2
\&  Don\*(Aqt need token.
\&  Reduce using rule 2 (@1\-1 \-\-> /* empty */): Back to state 2, then go to state 4.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 4:
\&  Stack: 0\->\*(Aqa\*(Aq\->2\->\*(Aq@1\-1\*(Aq\->4
\&  Need token. Got >a<
\&  Shift and go to state 5.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 5:
\&  Stack: 0\->\*(Aqa\*(Aq\->2\->\*(Aq@1\-1\*(Aq\->4\->\*(Aqa\*(Aq\->5
\&  Don\*(Aqt need token.
\&  Reduce using rule 1 (S \-\-> a @1\-1 a): 
\&  <<aaaa, aaaa, a>>
\&  Back to state 0, then go to state 1.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 1:
\&  Stack: 0\->\*(AqS\*(Aq\->1
\&  Need token. Got ><
\&  Shift and go to state 3.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 3:
\&  Stack: 0\->\*(AqS\*(Aq\->1\->\*(Aq\*(Aq\->3
\&  Don\*(Aqt need token.
\&  Accept.
.Ve
.SS "Example of Body Section"
.IX Subsection "Example of Body Section"
Following with the calculator example, the body is:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq17,/%%/p\*(Aq Calc.eyp | cat \-n 
\&     1  start:                                                                              
\&     2      input { \e%s }                                                                   
\&     3  ;
\&     4
\&     5  input: line *
\&     6  ;
\&     7
\&     8  line:
\&     9      \*(Aq\en\*(Aq       { undef }
\&    10    | exp \*(Aq\en\*(Aq   {
\&    11                    print "$_[1]\en" if defined($_[1]);
\&    12                    $_[1]
\&    13                 }
\&    14    | error  \*(Aq\en\*(Aq
\&    15        {
\&    16          $_[0]\->YYErrok;
\&    17          undef
\&    18        }
\&    19  ;
\&    20
\&    21  exp:
\&    22      NUM
\&    23    | $VAR                   { $s{$VAR} }
\&    24    | $VAR \*(Aq=\*(Aq $exp          { $s{$VAR} = $exp }
\&    25    | exp.left \*(Aq+\*(Aq exp.right { $left + $right }
\&    26    | exp.left \*(Aq\-\*(Aq exp.right { $left \- $right }
\&    27    | exp.left \*(Aq*\*(Aq exp.right { $left * $right }
\&    28    | exp.left \*(Aq/\*(Aq exp.right
\&    29      {
\&    30         $_[3] and return($_[1] / $_[3]);
\&    31         $_[0]\->YYData\->{ERRMSG} = "Illegal division by zero.\en";
\&    32         $_[0]\->YYError;
\&    33         undef
\&    34      }
\&    35    | \*(Aq\-\*(Aq $exp %prec NEG     { \-$exp }
\&    36    | exp.left \*(Aq^\*(Aq exp.right { $left ** $right }
\&    37    | \*(Aq(\*(Aq $exp \*(Aq)\*(Aq           { $exp }
\&    38  ;
\&    39
\&    40  %%
.Ve
.PP
This body does not uses any of the Eyapp extensions (with the exception of the 
\&\f(CW\*(C`*\*(C'\fR operator at line 5) and the dot and dollar notations.
.SS "Solving Ambiguities and Conflicts"
.IX Subsection "Solving Ambiguities and Conflicts"
When Eyapp analyzes a grammar like:
.PP
.Vb 7
\&  examples/eyapplanguageref$ cat \-n ambiguities.eyp
\&     1  %%
\&     2  exp:
\&     3      NUM
\&     4    | exp \*(Aq\-\*(Aq exp
\&     5  ;
\&     6  %%
.Ve
.PP
it will produce a warning announcing the existence of 
\&\fIshift-reduce\fR conflicts:
.PP
.Vb 5
\&  examples/eyapplanguageref$ eyapp ambiguities.eyp
\&  1 shift/reduce conflict (see .output file)
\&  State 5: reduce by rule 2: exp \-> exp \*(Aq\-\*(Aq exp (default action)
\&  State 5: shifts:
\&    to state    3 with \*(Aq\-\*(Aq
.Ve
.PP
when \f(CW\*(C`eyapp\*(C'\fR finds warnings automatically produces a \f(CW\*(C`.output\*(C'\fR file
describing the conflict.
.PP
What the warning is saying is that an expression like \f(CW\*(C`exp \*(Aq\-\*(Aq exp\*(C'\fR (rule 2) followed by a
minus \f(CW\*(Aq\-\*(Aq\fR can be parsed in more than one way. If we
have an input like \f(CW\*(C`NUM \- NUM \- NUM\*(C'\fR the activity of a \s-1\fILALR\s0\fR\|(1) parser
(the family of parsers to which Eyapp belongs)
consists of a sequence of \fIshift and reduce actions\fR. A \fIshift action\fR
has as consequence the reading of the next token. A \fIreduce action\fR
is finding a production rule that matches and substituting 
the rhs of the production by the lhs.  For input \f(CW\*(C`NUM \- NUM \- NUM\*(C'\fR
the activity will be as follows (the dot is used to indicate where the next 
input token is):
.PP
.Vb 6
\&                           .NUM \- NUM \- NUM # shift
\&                            NUM.\- NUM \- NUM # reduce exp: NUM 
\&                            exp.\- NUM \- NUM # shift
\&                            exp \-.NUM \- NUM # shift
\&                            exp \- NUM.\- NUM # reduce exp: NUM
\&                            exp \- exp.\- NUM # shift/reduce conflict
.Ve
.PP
up this point two different decisions can be taken: the next description can be
.PP
.Vb 1
\&                                  exp.\- NUM # reduce by exp: exp \*(Aq\-\*(Aq exp (rule 2)
.Ve
.PP
or:
.PP
.Vb 1
\&                            exp \- exp \-.NUM # shift \*(Aq\-\*(Aq (to state 3)
.Ve
.PP
that is why it is called a \fIshift-reduce conflict\fR.
.PP
That is also the reason for the precedence declarations in the 
head section. Another kind of conflicts are \fIreduce-reduce conflicts\fR.
They arise when more that rhs can be applied for a reduction
action.
.PP
Eyapp solves the conflicts applying the following rules:
.IP "\(bu" 4
In a shift/reduce conflict, the default is the shift.
.IP "\(bu" 4
In a reduce/reduce conflict, the default is to reduce by the
earlier grammar production (in the input sequence).
.IP "\(bu" 4
Precedences and associativities can be given to tokens in
the declarations section. This is made by a sequence of lines beginning
with one of the directives: \f(CW%left\fR, \f(CW%right\fR, or \f(CW%nonassoc\fR, 
followed by a list of
tokens. All the tokens on the same line
have the same precedence and associativity; 
the lines are listed in order of increasing precedence.
.IP "\(bu" 4
A precedence and associativity is associated with each grammar
production; it is the precedence and associativity of the \fIlast token\fR 
or \fIliteral\fR in the right hand side of the production.
.IP "\(bu" 4
The \f(CW%prec\fR directive can be used when
a rhs is involved in a conflict and has no tokens
inside or it has but the precedence of the last token leads
to an incorrect interpretation. A rhs can be followed by 
an optional \f(CW\*(C`%prec token\*(C'\fR directive
giving the production the precedence of the \f(CW\*(C`token\*(C'\fR
.Sp
.Vb 1
\&                          exp:   \*(Aq\-\*(Aq exp %prec NEG { \-$_[1] }
.Ve
.IP "\(bu" 4
If there is a shift/reduce conflict, and both the grammar production
and the input token have precedence and associativity associated
with them, then the conflict is solved in favor of the action (shift or
reduce) associated with the higher precedence. If the precedences are the
same, then the associativity is used; left associative implies reduce,
right associative implies shift, and non associative implies error.
The last is used to describe operators, like the operator \f(CW\*(C`.LT.\*(C'\fR in \s-1FORTRAN, \s0
that may not associate with themselves. That is, because
.Sp
.Vb 1
\&                             A .LT. B .LT. C
.Ve
.Sp
is invalid in \s-1FORTRAN, \s0\f(CW\*(C`.LT.\*(C'\fR would be described with the keyword \f(CW%nonassoc\fR in eyapp.
.PP
To solve a shift-reduce conflict between a production \f(CW\*(C`A \-\-> SOMETHING\*(C'\fR
and a token \f(CW\*(Aqa\*(Aq\fR you can follow this procedure:
.ie n .IP "1. Edit the "".output"" file" 4
.el .IP "1. Edit the \f(CW.output\fR file" 4
.IX Item "1. Edit the .output file"
.PD 0
.IP "2. Search for the state where the conflict between the production and the token is. In our example it looks like:" 4
.IX Item "2. Search for the state where the conflict between the production and the token is. In our example it looks like:"
.PD
.Vb 2
\& pl@nereida:~/src/perl/YappWithDefaultAction/examples$ sed \-ne \*(Aq56,65p\*(Aq ambiguities.output
\& State 5:
\&
\&        exp \-> exp . \*(Aq\-\*(Aq exp    (Rule 2)
\&        exp \-> exp \*(Aq\-\*(Aq exp .    (Rule 2)
\&
\&        \*(Aq\-\*(Aq     shift, and go to state 3
\&
\&        \*(Aq\-\*(Aq     [reduce using rule 2 (exp)]
\&        $default        reduce using rule 2 (exp)
.Ve
.ie n .IP "3. Inside the state there has to be a production of the type ""A \-\-> SOMETHING."" (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form ""A \-\-> prefix . suffix"", where suffix can \fIstart\fR with the involved token \*(Aqa\*(Aq." 4
.el .IP "3. Inside the state there has to be a production of the type \f(CWA \-\-> SOMETHING.\fR (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form \f(CWA \-\-> prefix . suffix\fR, where suffix can \fIstart\fR with the involved token \f(CW\*(Aqa\*(Aq\fR." 4
.IX Item "3. Inside the state there has to be a production of the type A --> SOMETHING. (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form A --> prefix . suffix, where suffix can start with the involved token a."
.PD 0
.ie n .IP "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want ""NUM \- NUM \- NUM"" to produce a tree like ""MINUS(MINUS(NUM, NUM), NUM)"" and not ""MINUS(NUM, MINUS(NUM, NUM))"". We want the conflict in ""exp \- exp.\- NUM"" to be solved in favor of the reduction by ""exp: exp \*(Aq\-\*(Aq exp"". This is achieved by declaring ""%left \*(Aq\-\*(Aq""." 4
.el .IP "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want \f(CWNUM \- NUM \- NUM\fR to produce a tree like \f(CWMINUS(MINUS(NUM, NUM), NUM)\fR and not \f(CWMINUS(NUM, MINUS(NUM, NUM))\fR. We want the conflict in \f(CWexp \- exp.\- NUM\fR to be solved in favor of the reduction by \f(CWexp: exp \*(Aq\-\*(Aq exp\fR. This is achieved by declaring \f(CW%left \*(Aq\-\*(Aq\fR." 4
.IX Item "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want NUM - NUM - NUM to produce a tree like MINUS(MINUS(NUM, NUM), NUM) and not MINUS(NUM, MINUS(NUM, NUM)). We want the conflict in exp - exp.- NUM to be solved in favor of the reduction by exp: exp - exp. This is achieved by declaring %left -."
.PD
.SS "Error Recovery"
.IX Subsection "Error Recovery"
The token name \f(CW\*(C`error\*(C'\fR is reserved for error handling. This name can
be used in grammar productions; it suggests places where errors are
expected, and recovery can take place:
.PP
.Vb 8
\&     line:
\&       \*(Aq\en\*(Aq         { undef }
\&       | exp \*(Aq\en\*(Aq   { print "$_[1]\en" if defined($_[1]); $_[1] }
\&       | error  \*(Aq\en\*(Aq
\&           {
\&             $_[0]\->YYErrok;
\&             undef
\&           }
.Ve
.PP
The parser pops its stack until
it enters a state where the token \f(CW\*(C`error\*(C'\fR is legal. It then shifts
the token \f(CW\*(C`error\*(C'\fR and proceeds to discard tokens until finding 
one that is acceptable. In the example
all the tokens until finding a \f(CW\*(Aq\en\*(Aq\fR will be skipped. 
If no special error productions have been specified,
the processing will halt.
.PP
In order to prevent a cascade of error messages, the parser, after
detecting an error, remains in error state until three tokens have been
successfully read and shifted. If an error is detected when the parser
is already in error state, no message is given, and the input token is
quietly deleted. The method \f(CW\*(C`YYErrok\*(C'\fR used in the example 
communicates to the parser
that a satisfactory recovery has been reached 
and that it can safely emit new error
messages.
.PP
You cannot have a literal \fI'error'\fR in your grammar as it would
confuse the driver with the \fIerror\fR token. Use a symbolic token instead.
.SH "THE TAIL"
.IX Header "THE TAIL"
The tail section contains Perl code. Usually it is empty, but you
can if you want put here your own lexical analyzer and 
error management subroutines.
An example of this is in
files \f(CW\*(C`examples/eyapplanguageref/List3_tree_d_sem.yp\*(C'\fR (the grammar)
and \f(CW\*(C`use_list3_tree_d_dem.pl\*(C'\fR (the client).
.SH "THE LEXICAL ANALYZER"
.IX Header "THE LEXICAL ANALYZER"
The Lexical Analyzer 
is called each time the parser needs a new token.
It is called with only one argument (the parser object)
and returns a pair 
containing the next token and its associated attribute.
.PP
The fact that is a method of the parser object means that the parser
methods are accessible inside the lexical analyzer.
.PP
When the lexical analyzer reaches the end of input, it must return the
pair \f(CW\*(C`(\*(Aq\*(Aq, undef)\*(C'\fR
.SS "Automatic Generation of Lexical Analyzers"
.IX Subsection "Automatic Generation of Lexical Analyzers"
By default a lexical analyzer is built.
The \f(CW\*(C`eyapp\*(C'\fR option \f(CW\*(C`\-l\*(C'\fR
can be used to inhibit the generation of 
the default lexical analyzer. In such case,
one must be explictly provided.
.PP
\fINo token Definitions\fR
.IX Subsection "No token Definitions"
.PP
When no token definitions are given in the head section, 
the default lexical analyzer simply assumes
that the token is the string literal. See this example in 
file \f(CW\*(C`examples/lexergeneration/simple.yp\*(C'\fR:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat simple.yp
\&  %%
\&  A:    a
\&      | A d
\&  ;
\&  %%
.Ve
.PP
The grammar does not describes the lexical analyzer nor the error default subroutine.
Eyapp will generate default lexical and error subroutines:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-o simple.pl \-TC simple.yp
\&
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ls \-ltr | tail \-2
\&  \-rw\-r\-\-r\-\- 1 pl pl   27 2010\-06\-29 10:28 simple.yp
\&  \-rwxr\-xr\-x 1 pl pl 3245 2010\-06\-29 10:35 simple.pl
.Ve
.PP
The option \f(CW\*(C`\-T\*(C'\fR is equivalent to insert the \f(CW%tree\fR directive in the head section.
Since no names were explicitly given to the productions, the names of the productions are built using
the pattern \f(CW\*(C`Lhs_is_RHS\*(C'\fR.
.PP
Option \f(CW\*(C`\-C\*(C'\fR instructs the \f(CW\*(C`eyapp\*(C'\fR compiler to produce an executable by setting the execution permits
(see \f(CW\*(C`simple.pl\*(C'\fR permits above), inserting the appropriate she bang directive:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ head simple.pl | head \-1
\&  #!/usr/bin/perl
.Ve
.PP
and inserting a call to the package \f(CW\*(C`main\*(C'\fR subroutine at the end of the generated parser:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ tail \-6 simple.pl
\&  unless (caller) {
\&    exit !_\|_PACKAGE_\|_\->main(\*(Aq\*(Aq);
\&  }
.Ve
.PP
If no \f(CW\*(C`main\*(C'\fR was provided, \f(CW\*(C`eyapp\*(C'\fR will provide one.
.PP
Tokens \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`d\*(C'\fR are assumed to represent strings \f(CW\*(Aqa\*(Aq\fR
and \f(CW\*(Aqd\*(Aq\fR respectively.
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-i \-t \-c \*(Aqa d d\*(Aq
\&  A_is_A_d(A_is_A_d(A_is_a(TERMINAL[a]),TERMINAL[d]),TERMINAL[d])
.Ve
.PP
The \f(CW\*(C`main\*(C'\fR method provided by \f(CW\*(C`eyapp\*(C'\fR accepts several options in the command line:
.IP "\(bu" 2
\&\f(CW\*(C`\-t\*(C'\fR Prints the abstract syntax tree
.IP "\(bu" 2
\&\f(CW\*(C`\-i\*(C'\fR Shows the semantic value associated with each terminal
.IP "\(bu" 2
\&\f(CW\*(C`\-c string\*(C'\fR Indicates that the input is given by the \f(CW\*(C`string\*(C'\fR that follows the option
.PP
You can get the set of available options using \f(CW\*(C`\-\-help\*(C'\fR:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-h
\&  Available options:
\&    \-\-debug                    sets yydebug on
\&    \-\-nodebug                  sets yydebug off
\&    \-\-file filepath            read input from filepath
\&    \-\-commandinput string      read input from string
\&    \-\-tree                     prints $tree\->str
\&    \-\-notree                   does not print $tree\->str
\&    \-\-info                     When printing $tree\->str shows the value of TERMINALs
\&    \-\-help                     shows this help
\&    \-\-slurp                    read until EOF reached
\&    \-\-noslurp                  read until CR is reached
\&    \-\-argfile                  main() will take the input string from its @_
\&    \-\-noargfile                main() will not take the input string from its @_
\&    \-\-yaml                     dumps YAML for $tree: YAML module must be installed
\&    \-\-margin=i                 controls the indentation of $tree\->str (i.e. $Parse::Eyapp::Node::INDENT)
.Ve
.PP
If we try to feed it with an illegal input, an error message is emitted:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-i \-t \-c \*(Aqa e d\*(Aq
\&  Error inside the lexical analyzer near \*(Aqe\*(Aq. Line: 1. File: \*(Aqsimple.yp\*(Aq. No match found.
.Ve
.PP
In the example above we have taken advantage of the \f(CW\*(C`main\*(C'\fR method provided by Eyapp.
If we want to keep in control of the parsing process, we can write a client program that 
makes use of the generated modulino:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n usesimple.pl
\&     1  #!/usr/bin/env perl
\&     2  use warnings;
\&     3  use strict;
\&     4
\&     5  use simple;
\&     6
\&     7  # build a parser object
\&     8  my $parser = simple\->new();
\&     9
\&    10  # take the input from the command line arguments
\&    11  # or from STDIN
\&    12  my $input = join \*(Aq \*(Aq,@ARGV;
\&    13  $input = <> unless $input;
\&    14
\&    15  # set the input
\&    16  $parser\->input($input);
\&    17
\&    18  # parse the input and get the AST
\&    19  my $tree = $parser\->YYParse();
\&    20
\&    21  print $tree\->str()."\en";
.Ve
.PP
Here is an example of execution:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-T simple.yp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./usesimple.pl a d d
\&  A_is_A_d(A_is_A_d(A_is_a(TERMINAL),TERMINAL),TERMINAL)
.Ve
.PP
\fIToken Definitions: Regular Expressions\fR
.IX Subsection "Token Definitions: Regular Expressions"
.PP
Eyapp extends the \f(CW%token\fR directive with the syntax:
.PP
.Vb 1
\&     %token TOKENID = /regexp/
.Ve
.PP
If such definition is used, an entry with the shape:
.PP
.Vb 1
\&   /\eG$regexp/gc and return (\*(AqTOKENID\*(Aq, $1);
.Ve
.PP
will be added to the generated lexical analyzer.
Therefore the string associated with the first parenthesis in \f(CW\*(C`/regexp/\*(C'\fR
will be used as semantic value for \f(CW\*(C`TOKENID\*(C'\fR. If \f(CW\*(C`/regexp/\*(C'\fR has no
parenthesis \f(CW\*(C`undef\*(C'\fR will be the semantic value.
See this example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n numlist.eyp
\&     1  %token NUM = /(\ed+)/
\&     2  %token ID  = /(\ew+)/
\&     3
\&     4  %%
\&     5  A:
\&     6        B
\&     7      | A B
\&     8  ;
\&     9
\&    10  B:
\&    11        ID
\&    12      | a
\&    13      | NUM
\&    14  ;
\&    15  %%
.Ve
.PP
The order of the \f(CW%token\fR declarations is important. 
In the example the token \f(CW\*(C`NUM\*(C'\fR is a subset of the token \f(CW\*(C`ID\*(C'\fR.
Since it appears first, it will be tried first:
.PP
.Vb 2
\&     /\eG(\ed+)/gc and return (\*(AqNUM\*(Aq, $1);
\&     /\eG(\ew+)/gc and return (\*(AqID\*(Aq, $1);
.Ve
.PP
Also observe that token \f(CW\*(Aqa\*(Aq\fR (line 12) is contained
in token \f(CW\*(C`ID\*(C'\fR. However, any implicit token like this that appears in the
body section and was not 
declared using an explicit \f(CW%token\fR directive in the
head section takes priority over the ones declared.
See the behavior of the former program:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC numlist
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./numlist.pm \-t \-i \-c \*(Aq4 a b\*(Aq
\&  A_is_A_B(A_is_A_B(A_is_B(B_is_NUM(TERMINAL[4])),B_is_a(TERMINAL[a])),B_is_ID(TERMINAL[b]))
.Ve
.PP
The lexical analyzer returned \f(CW\*(C`NUM\*(C'\fR and not \f(CW\*(C`ID\*(C'\fR when \f(CW4\fR was processed,
also it returned \f(CW\*(C`a\*(C'\fR and not \f(CW\*(C`ID\*(C'\fR when \f(CW\*(Aqa\*(Aq\fR was 
processed.
.PP
A \f(CW%token\fR declaration without assignment like in:
.PP
.Vb 1
\&   %token A B
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&  %token A   = /(A)/
\&  %token B   = /(B)/
.Ve
.PP
(in that order).
.PP
\fIToken Definitions via Code\fR
.IX Subsection "Token Definitions via Code"
.PP
An alternative way to define a token is via Perl code:
.PP
.Vb 1
\&      %token TOKENID = { ... }
.Ve
.PP
in such case the code defining \f(CW\*(C`TOKENID\*(C'\fR will be inserted
verbatim in the corresponding place of the generated lexical 
analyzer. When the code \f(CW\*(C`{ ... }\*(C'\fR
is executed, the variable \f(CW$_\fR 
contains the input being parsed and
the special variable \f(CW$self\fR refers to the parser object.
The following example is equivalent to the one used in the previous
section:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n tokensemdef.eyp
\&     1  %token NUM = /(\ed+)/
\&     2  %token ID  = { /\eG(\ew+)/gc and return (\*(AqID\*(Aq, $1); }
\&     3
\&     4  %%
\&     5  A:
\&     6        B
\&     7      | A B
\&     8  ;
\&     9
\&    10  B:
\&    11        ID
\&    12      | a
\&    13      | NUM
\&    14  ;
\&    15  %%
.Ve
.PP
Follows an example of compilation and execution:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC tokensemdef.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./tokensemdef.pm \-t \-i \-nos
\&  4 a b
\&  A_is_A_B(A_is_A_B(A_is_B(B_is_NUM(TERMINAL[4])),B_is_a(TERMINAL[a])),B_is_ID(TERMINAL[b]))
.Ve
.PP
\fIToken Definitions: Controling whites\fR
.IX Subsection "Token Definitions: Controling whites"
.PP
By default, the generated lexical analyzer skips 
white spaces, defined as \f(CW\*(C`/\es*/\*(C'\fR. The programmer
can change this behavior using the \f(CW%whites\fR directive.
The following example permits Perl-like comments 
in the input:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n simplewithwhites.eyp
\&     1  %whites  /(\es*(?:#.*)?\es*)/
\&     2  %%
\&     3  A:    a
\&     4      | A d
\&     5  ;
\&     6  %%
.Ve
.PP
Follows an example of execution:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-nA input
\&       1  a # 1$
\&       2  $
\&       3  d ^I#2$
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC simplewithwhites.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simplewithwhites.pm \-t \-i \-f input
\&  A_is_A_d(A_is_a(TERMINAL[a]),TERMINAL[d])
.Ve
.PP
The \f(CW%white\fR directive can be followed by some Perl
code defining the white spaces:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n simplewithwhitescode.eyp
\&     1  %whites  { /\eG(\es*(?:#.*)?\es*)/gc and $self\->tokenline($1 =~ tr{\en}{}) }
\&     2  %%
\&     3  A:    a
\&     4      | A d
\&     5  ;
\&     6  %%
.Ve
.SS "Reading Input from File"
.IX Subsection "Reading Input from File"
You can use the method \f(CW\*(C`YYSlurpFile\*(C'\fR to read the input from a file
and set the input for the parser to its contents.
Yo can also use the \f(CW\*(C`YYInput\*(C'\fR method to set the input.
.PP
See the example below:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n usesimplefromfile.pl
\&     1  #!/usr/bin/env perl
\&     2  use warnings;
\&     3  use strict;
\&     4
\&     5  use simplewithwhites;
\&     6
\&     7  my $parser = simplewithwhites\->new();
\&     8
\&     9  # take the input from the specified file
\&    10  my $fn = shift;
\&    11
\&    12  $parser\->YYSlurpFile($fn);
\&    13
\&    14  # parse the input and get the AST
\&    15  my $tree = $parser\->YYParse();
\&    16
\&    17  print $tree\->str()."\en";
.Ve
.PP
First, compile the grammar \f(CW\*(C`simplewithwhites.eyp\*(C'\fR presented above:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-T simplewithwhites
.Ve
.PP
And then run it:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n  input
\&     1  a # 1
\&     2
\&     3  d       #2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./usesimplefromfile.pl input
\&  A_is_A_d(A_is_a(TERMINAL),TERMINAL)
.Ve
.SS "Huge input and Incremental Lexical Analyzers"
.IX Subsection "Huge input and Incremental Lexical Analyzers"
If your input is huge, try to make use of an incremental
lexical analyzer. In an incremental lexer the input
is read and parsed in chunks. Read up to a 
point where  it is safe to parse.
In the example below, the lexer reads a new line
each time we reach the end of the input string \f(CW\*(C`${$parser\->YYInput}\*(C'\fR.
In the case of the arithmetic expressions grammar below,
by reading up to \f(CW\*(Aq\en\*(Aq\fR, we are sure that the input is not
broken in the middle of a token.
Instead of having the whole huge input in memory,
we only keep a small substring.
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n Incremental.eyp                    
\&     1  %right  \*(Aq=\*(Aq                                                                     
\&     2  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq                                                                 
\&     3  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq                                                                 
\&     4  %left   NEG                                                                     
\&     5                                                                                  
\&     6  %tree                                                                           
\&     7                                                                                  
\&     8  %%                                                                              
\&     9  input:                                                                          
\&    10          |   input $line  { print $line\->str."\en" }                              
\&    11  ;                                                                               
\&    12                                                                                  
\&    13  line:     \*(Aq\en\*(Aq                                                                  
\&    14          | exp \*(Aq\en\*(Aq
\&    15          | error \*(Aq\en\*(Aq
\&    16  ;
\&    17
\&    18  exp:        NUM
\&    19          |   VAR
\&    20          |   VAR \*(Aq=\*(Aq exp
\&    21          |   exp \*(Aq+\*(Aq exp
\&    22          |   exp \*(Aq\-\*(Aq exp
\&    23          |   exp \*(Aq*\*(Aq exp
\&    24          |   exp \*(Aq/\*(Aq exp
\&    25          |   \*(Aq\-\*(Aq exp %prec NEG
\&    26          |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    27  ;
\&    28
\&    29  %%
\&    30
\&    31  sub _Lexer {
\&    32      my($parser)=shift;
\&    33
\&    34      if ($parser\->YYEndOfInput) {
\&    35        my $input = <STDIN>;
\&    36        return(\*(Aq\*(Aq, undef) unless $input;
\&    37        $parser\->input($input);
\&    38      };
\&    39
\&    40      for (${$parser\->YYInput}) {
\&    41          m/\eG[ \et]*/gc;
\&    42          m/\eG([0\-9]+(?:\e.[0\-9]+)?)/gc and return(\*(AqNUM\*(Aq,$1);
\&    43          m/\eG([A\-Za\-z][A\-Za\-z0\-9_]*)/gc and return(\*(AqVAR\*(Aq,$1);
\&    44          m/\eG(.)/gcs and return($1,$1);
\&    45          return(\*(Aq\*(Aq, undef);
\&    46      }
\&    47  }
\&    48
\&    49  _\|_PACKAGE_\|_\->lexer(\e&_Lexer);
.Ve
.PP
This approach has limitations. The code will get more tangled if some token
can take more than one line. For example, if we extend this language to accept 
C\-like comments \f(CW\*(C`/* ... */\*(C'\fR which expands over several lines.
.PP
Here follows an example of execution. 
This is the client program:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat useincremental.pl
\&  #!/usr/bin/perl \-w
\&  use Incremental;
\&
\&  Incremental\->new\->YYParse;
.Ve
.PP
This is a small test input file:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat inputforincremental
\&  a = 2
\&  a+3
\&  b=4
\&  b*2+a
.Ve
.PP
Finally, see the results of the execution:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./useincremental.pl < inputforincremental
\&  line_4(exp_8(TERMINAL,exp_6(TERMINAL)))
\&  line_4(exp_9(exp_7(TERMINAL),exp_6(TERMINAL)))
\&  line_4(exp_8(TERMINAL,exp_6(TERMINAL)))
\&  line_4(exp_9(exp_11(exp_7(TERMINAL),exp_6(TERMINAL)),exp_7(TERMINAL)))
.Ve
.PP
The numbers in the output refer to the production number:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-v Incremental.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ sed \-ne \*(Aq/Rules:/,/^$/p\*(Aq Incremental.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> input $end
\&  1:      input \-> /* empty */
\&  2:      input \-> input line
\&  3:      line \-> \*(Aq\en\*(Aq
\&  4:      line \-> exp \*(Aq\en\*(Aq
\&  5:      line \-> error \*(Aq\en\*(Aq
\&  6:      exp \-> NUM
\&  7:      exp \-> VAR
\&  8:      exp \-> VAR \*(Aq=\*(Aq exp
\&  9:      exp \-> exp \*(Aq+\*(Aq exp
\&  10:     exp \-> exp \*(Aq\-\*(Aq exp
\&  11:     exp \-> exp \*(Aq*\*(Aq exp
\&  12:     exp \-> exp \*(Aq/\*(Aq exp
\&  13:     exp \-> \*(Aq\-\*(Aq exp
\&  14:     exp \-> \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.SS "Using Several Lexical Analyzers for the Same Parser"
.IX Subsection "Using Several Lexical Analyzers for the Same Parser"
At any time during the parsing you can use the method
\&\f(CW\*(C`$parser\->YYLexer\*(C'\fR to set a new lexical analyzer.
.PP
The following grammar starts setting the lexer
to  sub \f(CW\*(C`Lexer1\*(C'\fR (line 44). It later changes
the lexer to \f(CW\*(C`Lexer2\*(C'\fR (ine 24)
after the token \f(CW\*(Aq%%\*(Aq\fR is seen. 
Inside \f(CW\*(C`Lexer2\*(C'\fR the token \f(CW\*(C`A\*(C'\fR represents a \f(CW\*(AqB\*(Aq\fR.
This capability
allows the parsing of languages where different sections 
require different lexical analysis. For example, in \f(CW\*(C`yacc\*(C'\fR,
carriage returns separates declarations in the header 
section but is considered a white space inside the
body and tail sections. This feature has 
similar power to the \fIstate\fR concept of the
lexical analyzer generator \f(CW\*(C`flex\*(C'\fR.
.PP
.Vb 10
\&  $ cat \-n twolexers.eyp 
\&     1  %%
\&     2  s:  first \*(Aq%%\*(Aq second
\&     3  ;
\&     4  
\&     5  first:
\&     6      A first
\&     7    | A
\&     8  ;
\&     9  
\&    10  second:
\&    11      A second
\&    12    | A
\&    13  ;
\&    14  
\&    15  %%
\&    16  
\&    17  sub Lexer1 {
\&    18      my($parser)=shift;
\&    19  
\&    20      print "In Lexer 1 \en";
\&    21      for (${$parser\->YYInput}) {
\&    22          m/\eG\es*/gc;
\&    23          m/\eG(%%)/gc and do {
\&    24            $parser\->YYLexer(\e&Lexer2);
\&    25            return ($1, undef);
\&    26          };
\&    27          m/\eG(.)/gcs and return($1,$1);
\&    28          return(\*(Aq\*(Aq, undef);
\&    29      }
\&    30  }
\&    31  
\&    32  sub Lexer2 {
\&    33      my($parser)=shift;
\&    34  
\&    35      print "In Lexer 2 \en";
\&    36      for (${$parser\->YYInput}) {
\&    37          m/\eG\es*/gc;
\&    38          m/\eGB/gc    and return(\*(AqA\*(Aq,\*(AqB\*(Aq);
\&    39          m/\eG(.)/gcs and die "Error. Expected \*(AqB\*(Aq, found $1\en";
\&    40      }
\&    41          return(\*(Aq\*(Aq, undef);
\&    42  }
\&    43  
\&    44  _\|_PACKAGE_\|_\->lexer(\e&Lexer1);
.Ve
.PP
When executed, it behaves like this:
.PP
.Vb 7
\&        $ ./twolexers.pm \-t \-i \-m 1 \-c \*(AqA A %% B B\*(Aq
\&        In Lexer 1 
\&        In Lexer 1 
\&        In Lexer 1 
\&        In Lexer 2 
\&        In Lexer 2 
\&        In Lexer 2 
\&
\&        s_is_first_second(
\&          first_is_A_first(
\&            TERMINAL[A],
\&            first_is_A(
\&              TERMINAL[A]
\&            )
\&          ),
\&          second_is_A_second(
\&            TERMINAL[B],
\&            second_is_A(
\&              TERMINAL[B]
\&            )
\&          )
\&        )
.Ve
.PP
The lexer can bechanged at any time. The following example
starts using the default lexer generated by \f(CW\*(C`eyapp\*(C'\fR.
It changes the lexer to \f(CW\*(C`Lexer2\*(C'\fRinside an intermediate semantic action (line 7).
Inside \f(CW\*(C`Lexer2\*(C'\fR  the token \f(CW\*(C`A\*(C'\fR is interpreted as a word \f(CW\*(C`\ew+\*(C'\fR.
.PP
.Vb 10
\&   $ cat \-n twolexers2.eyp 
\&     1  # Compile it with:
\&     2  # $ eyapp \-TC twolexers2.eyp 
\&     3  # Run it with:
\&     4  # $ ./twolexers2.pm \-t \-i \-c \*(AqA A %% d3 c2\*(Aq
\&     5  
\&     6  %%
\&     7  s:  first \*(Aq%%\*(Aq { $_[0]\->YYLexer(\e&Lexer2) } second
\&     8  ;
\&     9  
\&    10  first:
\&    11      A first
\&    12    | A
\&    13  ;
\&    14  
\&    15  second:
\&    16      A second
\&    17    | A
\&    18  ;
\&    19  
\&    20  %%
\&    21  
\&    22  sub Lexer2 {
\&    23      my($parser)=shift;
\&    24  
\&    25      print "In Lexer 2 \en";
\&    26      for (${$parser\->YYInput}) {
\&    27          m/\eG\es*/gc;
\&    28          m/\eG(\ew+)/gc    and return(\*(AqA\*(Aq,$1);
\&    29          m/\eG(.)/gcs and die "Error. Expected a word,Found $1\en";
\&    30      }
\&    31      return(\*(Aq\*(Aq, undef);
\&    32  }
.Ve
.SH "THE ERROR REPORT SUBROUTINE"
.IX Header "THE ERROR REPORT SUBROUTINE"
The Error Report subroutine is also a parser attribute, 
and must be defined. By default \f(CW\*(C`Parse::Eyapp\*(C'\fR
provides a convenient error handler.
.PP
See the Parse::Yapp pages and elsewhere documentation
on \f(CW\*(C`yacc\*(C'\fR and \f(CW\*(C`bison\*(C'\fR for more information.
.SH "USING AN EYAPP GRAMMAR"
.IX Header "USING AN EYAPP GRAMMAR"
The following is an example of a program that uses the calculator explained 
in the two previous sections:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n usecalc.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Calc;
\&     4
\&     5  my $parser = Calc\->new();
\&     6  $parser\->input(\e<<\*(AqEOI\*(Aq
\&     7  a = 2*3       # 1: 6
\&     8  d = 5/(a\-6)   # 2: division by zero
\&     9  b = (a+1)/7   # 3: 1
\&    10  c=a*3+4)\-5    # 4: syntax error
\&    11  a = a+1       # 5: 7
\&    12  EOI
\&    13  );
\&    14  my $t = $parser\->Run();
\&    15  print "========= Symbol Table ==============\en";
\&    16  print "$_ = $t\->{$_}\en" for sort keys %$t;
.Ve
.PP
The output for this program is (the input for each output
appear as a Perl comment on the right):
.PP
.Vb 1
\&  pl@nereida:~/src/perl/YappWithDefaultAction/examples$ eyapp Calc.eyp
\&
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./usecalc.pl
\&  6
\&  Illegal division by zero.
\&  1
\&
\&  Syntax error near \*(Aq)\*(Aq (line number 4).
\&  Expected one of these terminals: \*(Aq\-\*(Aq \*(Aq/\*(Aq \*(Aq^\*(Aq \*(Aq*\*(Aq \*(Aq+\*(Aq \*(Aq
\&  \*(Aq
\&  7
\&  ========= Symbol Table ==============
\&  a = 7
\&  b = 1
\&  c = 22
.Ve
.SH "LISTS AND OPTIONALS"
.IX Header "LISTS AND OPTIONALS"
The elements of the right hand side of a production (abbreviated \fIrhs\fR) can be one of these:
.PP
.Vb 9
\&  rhselt:     
\&        symbol    
\&      | code    
\&      | \*(Aq(\*(Aq optname rhs \*(Aq)\*(Aq 
\&      | rhselt STAR               /* STAR   is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e*  */
\&      | rhselt \*(Aq<\*(Aq STAR symbol \*(Aq>\*(Aq 
\&      | rhselt OPTION             /* OPTION is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e?  */
\&      | rhselt \*(Aq<\*(Aq PLUS symbol \*(Aq>\*(Aq
\&      | rhselt PLUS               /* PLUS   is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e+  */
.Ve
.PP
The \f(CW\*(C`STAR\*(C'\fR, \f(CW\*(C`OPTION\*(C'\fR and \f(CW\*(C`PLUS\*(C'\fR operators provide a simple mechanism
to express lists:
.IP "\(bu" 4
In Eyapp the \f(CW\*(C`+\*(C'\fR operator indicates one or more repetitions of the element
to the left of \f(CW\*(C`+\*(C'\fR, thus a rule like:
.Sp
.Vb 1
\&                        decls:  decl +
.Ve
.Sp
is the same as:
.Sp
.Vb 2
\&                        decls:  decls decl 
\&                             |  decl
.Ve
.Sp
An additional  symbol may be included  to indicate lists of elements 
separated by such symbol. Thus
.Sp
.Vb 1
\&                       rhss: rule <+ \*(Aq|\*(Aq>
.Ve
.Sp
is equivalent to:
.Sp
.Vb 2
\&                       rhss: rhss \*(Aq|\*(Aq rule 
\&                           | rule
.Ve
.IP "\(bu" 4
The operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`?\*(C'\fR have their usual meaning: 0 or more for
\&\f(CW\*(C`*\*(C'\fR and optionality for \f(CW\*(C`?\*(C'\fR. Is legal to parenthesize 
a \f(CW\*(C`rhs\*(C'\fR expression as in:
.Sp
.Vb 1
\&                       optname: (NAME IDENT)?
.Ve
.ie n .SS "The ""+"" operator"
.el .SS "The \f(CW+\fP operator"
.IX Subsection "The + operator"
The grammar:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat List3.yp 
\&  %semantic token \*(Aqc\*(Aq 
\&  %{
\&  use Data::Dumper;
\&  $Data::Dumper::Indent = 1;
\&  %}
\&  %%
\&  S:      \*(Aqc\*(Aq+  \*(Aqd\*(Aq+ 
\&             { 
\&                print Dumper($_[1]);
\&                print Dumper($_[2]);
\&             } 
\&  ;
\&  %%
.Ve
.PP
Is equivalent to:
.PP
.Vb 9
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-v List3.yp; head \-9 List3.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:  $start \-> S $end
\&  1:  PLUS\-1 \-> PLUS\-1 \*(Aqc\*(Aq
\&  2:  PLUS\-1 \-> \*(Aqc\*(Aq
\&  3:  PLUS\-2 \-> PLUS\-2 \*(Aqd\*(Aq
\&  4:  PLUS\-2 \-> \*(Aqd\*(Aq
\&  5:  S \-> PLUS\-1 PLUS\-2
.Ve
.PP
By default, the semantic action associated with a \f(CW\*(C`+\*(C'\fR returns the lists of attributes
to which the \f(CW\*(C`+\*(C'\fR applies:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./use_list3.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = [ \*(Aqc\*(Aq, \*(Aqc\*(Aq ];
\&  $VAR1 = [ \*(Aqd\*(Aq, \*(Aqd\*(Aq ];
.Ve
.PP
Observe that, in spite of \f(CW\*(Aqd\*(Aq\fR being a syntactic token
the actions related with the \f(CW\*(C`d+\*(C'\fR element (i.e. the actions associated
with the \f(CW\*(C`PLUS\-2\*(C'\fR productions) create the list of \f(CW\*(C`d\*(C'\fRs.
.PP
The semantic associated with a \f(CW\*(C`+\*(C'\fR changes 
when one of the tree creation directives is active (for instance \f(CW%tree\fR or \f(CW%metatree\fR)
or it has been explicitly requested with a call to the \f(CW\*(C`YYBuildingTree\*(C'\fR method:
.PP
.Vb 1
\&                            $self\->YYBuildingTree(1);
.Ve
.PP
Other ways to change the associated semantic are to use the 
\&\f(CW\*(C`yybuildingtree\*(C'\fR option of \f(CW\*(C`YYParse\*(C'\fR:
.PP
.Vb 4
\&         $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&                           yybuildingtree => 1,
\&                         # yydebug => 0x1F
\&         );
.Ve
.PP
In such case the associated semantic action creates a node labelled
.PP
.Vb 1
\&                     _PLUS_LIST
.Ve
.PP
whose children are the attributes associated with the items in the plus list. 
As it happens when using the \f(CW%tree\fR directive, \fIsyntactic tokens\fR are skipped.
.PP
When executing the example above but under the \f(CW%tree\fR directive
the output changes. The \f(CW\*(C`\-T\*(C'\fR option tells the \f(CW\*(C`eyapp\*(C'\fR compiler
to introduce an implicit \f(CW%tree\fR directive>:
.PP
.Vb 1
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-T List3.yp
.Ve
.PP
If we now run the client program with input \f(CW\*(C`ccdd\*(C'\fR we get
a couple of syntax trees:
.PP
.Vb 9
\&  ~/LEyapp/examples/eyapplanguageref$ ./use_list3.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  $VAR1 = bless( { \*(Aqchildren\*(Aq => [] }, \*(Aq_PLUS_LIST\*(Aq );
.Ve
.PP
The node associated with the list of \f(CW\*(C`d\*(C'\fRs is empty since
terminal \f(CW\*(C`d\*(C'\fR wasn't declared semantic.
.SS "When Nodes Disappear from Lists"
.IX Subsection "When Nodes Disappear from Lists"
When under the influence of the \f(CW%tree\fR directive
the action associated with a list operator
is to \fIflat\fR the children in a single list.
.PP
In the former example, the \f(CW\*(C`d\*(C'\fR nodes don't show up 
since \f(CW\*(Aqd\*(Aq\fR is a syntactic token. However, it may happen that changing the status
of \f(CW\*(Aqd\*(Aq\fR to semantic will not suffice.
.PP
When inserting the children, the tree (\f(CW%tree\fR)  node construction
method (\f(CW\*(C`YYBuildAST\*(C'\fR) omits any attribute that is not a reference.
Therefore, when inserting explicit actions, it is necessary to guarantee that 
the returned value is a reference or a semantic token 
to assure the presence of the value in the lists of children of the node.
Certainly you can use this property to prune parts of the tree.
Consider the following example:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat ListWithRefs1.eyp 
\&  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&  %{
\&  use Data::Dumper;
\&  $Data::Dumper::Indent = 1;
\&  %}
\&  %%
\&  S:      \*(Aqc\*(Aq+  D+ 
\&             { 
\&                print Dumper($_[1]);
\&                print $_[1]\->str."\en";
\&                print Dumper($_[2]);
\&                print $_[2]\->str."\en";
\&             } 
\&  ;
\&
\&  D: \*(Aqd\*(Aq
\&  ;
\&
\&  %%
\&
\&  sub Run {
\&    my ($self) = shift;
\&    return $self\->YYParse( yybuildingtree => 1 );
\&  }
.Ve
.PP
To activate the \fItree semantic\fR for lists we use the \f(CW\*(C`yybuildingtree\*(C'\fR
option of \f(CW\*(C`YYParse\*(C'\fR (line 26).
.PP
The execution gives an output like this:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp ListWithRefs1.eyp; ./use_listwithrefs1.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  _PLUS_LIST(TERMINAL,TERMINAL)
\&  $VAR1 = bless( { \*(Aqchildren\*(Aq => [] }, \*(Aq_PLUS_LIST\*(Aq ); _PLUS_LIST
.Ve
.PP
Though \f(CW\*(Aqd\*(Aq\fR was declared semantic the default action 
associated with the production \f(CW\*(C`D: \*(Aqd\*(Aq\*(C'\fR in line 16
returns \f(CW$_[1]\fR (that is, the scalar \f(CW\*(Aqd\*(Aq\fR). Since it is not
a reference it won't be inserted in the list of children of
\&\f(CW\*(C`_PLUS_LIST\*(C'\fR.
.SS "Recovering the Missing Nodes"
.IX Subsection "Recovering the Missing Nodes"
The solution is to be sure that the attribute is a reference:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat \-n ListWithRefs.eyp
\&     1  %semantic token \*(Aqc\*(Aq 
\&     2  %{
\&     3  use Data::Dumper;
\&     4  $Data::Dumper::Indent = 1;
\&     5  %}
\&     6  %%
\&     7  S:  \*(Aqc\*(Aq+  D+ 
\&     8        { 
\&     9           print Dumper($_[1]);
\&    10           print Dumper($_[2]);
\&    11        } 
\&    12  ;
\&    13  
\&    14  D: \*(Aqd\*(Aq
\&    15       {
\&    16         bless { attr => $_[1], children =>[]}, \*(AqDES\*(Aq;
\&    17       }
\&    18  ;
\&    19  
\&    20  %%
\&    21  
\&    22  sub Run {
\&    23    my ($self) = shift;
\&    24    return $self\->YYParse( yybuildingtree => 1 );
\&    25  }
.Ve
.PP
Now the attribute associated with \f(CW\*(C`D\*(C'\fR is a reference 
and appears in the list of children of \f(CW\*(C`_PLUS_LIST\*(C'\fR:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp ListWithRefs.eyp; ./use_listwithrefs.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqDES\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqDES\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
.Ve
.ie n .SS "Building a Tree with ""Parse::Eyapp::Node\->new"""
.el .SS "Building a Tree with \f(CWParse::Eyapp::Node\->new\fP"
.IX Subsection "Building a Tree with Parse::Eyapp::Node->new"
The former solution consisting on writing \fIby hand\fR the code to 
build the node may suffice when dealing with a single node.
Writing by hand the code to build a node is a cumbersome task.
Even worst: though the node built in the former example
looks like a \f(CW\*(C`Parse::Eyapp\*(C'\fR node actually isn't. \f(CW\*(C`Parse::Eyapp\*(C'\fR 
nodes always inherit from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR and 
consequently have access to the methods in such package.
The following execution using the debugger illustrates the point:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples$ perl \-wd use_listwithrefs.pl
\&
\&  Loading DB routines from perl5db.pl version 1.28
\&  Editor support available.
\&
\&  Enter h or \`h h\*(Aq for help, or \`man perldebug\*(Aq for more help.
\&
\&  main::(use_listwithrefs.pl:4):  $parser = new ListWithRefs();
\&    DB<1>  f ListWithRefs.eyp
\&  1       2       #line 3 "ListWithRefs.eyp"
\&  3
\&  4:      use Data::Dumper;
\&  5
\&  6       #line 7 "ListWithRefs.eyp"
\&  7       #line 8 "ListWithRefs.eyp"
\&  8
\&  9:                    print Dumper($_[1]);
\&  10:                   print $_[1]\->str."\en";
.Ve
.PP
through the command \f(CW\*(C`f ListWithRefs.eyp\*(C'\fR we inform the debugger
that subsequent commands will refer to such file. Next 
we execute the program up to the semantic action
associated with the production rule \f(CW\*(C`S: \*(Aqc\*(Aq+  D+\*(C'\fR (line 9)
.PP
.Vb 4
\&    DB<2> c 9     # Continue up to line 9 of ListWithRefs.eyp
\&  ccdd
\&  ListWithRefs::CODE(0x84ebe5c)(ListWithRefs.eyp:9):
\&  9:                    print Dumper($_[1]);
.Ve
.PP
Now we are in condition to look at the contents 
of the arguments:
.PP
.Vb 7
\&    DB<3> x $_[2]\->str
\&  0  \*(Aq_PLUS_LIST_2(DES,DES)\*(Aq
\&    DB<4> x $_[2]\->child(0)
\&  0  DES=HASH(0x85c4568)
\&     \*(Aqattr\*(Aq => \*(Aqd\*(Aq
\&     \*(Aqchildren\*(Aq => ARRAY(0x85c458c)
\&          empty array
.Ve
.PP
the \f(CW\*(C`str\*(C'\fR method works with the object \f(CW$_[2]\fR since
\&\f(CW\*(C`_PLUS_LIST_2\*(C'\fR nodes inherit from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR.
However, when we try with the \f(CW\*(C`DES\*(C'\fR node we get an
error:
.PP
.Vb 4
\&    DB<6> x $_[2]\->child(0)\->str
\&  Can\*(Aqt locate object method "str" via package "DES" at \e
\&    (eval 11)[/usr/share/perl/5.8/perl5db.pl:628] line 2, <STDIN> line 1.
\&    DB<7>
.Ve
.PP
More robust than the former solution of building the node \fIby hand\fR
is to use the constructor \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR:
The method \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
is uset to build forests of syntactic trees.
.PP
It receives a  list of terms describing the trees and \- optionally \-
a reference to a subroutine used to set up the attributes
of the just created nodes. After the creation 
of the trees the sub is called by \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
with arguments the list of references to the nodes (in the order
in which they appear in the terms, from left to right).
\&\f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR returns a list of references 
to the just created nodes. In a scalar context returns a reference to the first of such trees.
See an example:
.PP
.Vb 10
\&  ~/LEyapp/examples$ perl \-MParse::Eyapp \-MData::Dumper \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> @t = Parse::Eyapp::Node\->new(\*(AqA(C,D) E(F)\*(Aq, sub { my $i = 0; $_\->{n} = $i++ for @_ })
\&    DB<2> $Data::Dumper::Indent = 0
\&    DB<3> print Dumper($_)."\en" for @t
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 0,\*(Aqchildren\*(Aq => [bless( {\*(Aqn\*(Aq => 1,\*(Aqchildren\*(Aq => []}, \*(AqC\*(Aq ),
\&                                          bless( {\*(Aqn\*(Aq => 2,\*(Aqchildren\*(Aq => []}, \*(AqD\*(Aq )
\&                                         ]
\&                 }, \*(AqA\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 1,\*(Aqchildren\*(Aq => []}, \*(AqC\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 2,\*(Aqchildren\*(Aq => []}, \*(AqD\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 3,\*(Aqchildren\*(Aq => [bless( {\*(Aqn\*(Aq => 4,\*(Aqchildren\*(Aq => []}, \*(AqF\*(Aq )]}, \*(AqE\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 4,\*(Aqchildren\*(Aq => []}, \*(AqF\*(Aq );
.Ve
.PP
See the following example in which the nodes associated with \f(CW\*(Aqd\*(Aq\fR are
explicitly constructed:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat \-n ListWithRefs2.eyp 
\&     1  %semantic token \*(Aqc\*(Aq 
\&     2  %{
\&     3  use Data::Dumper;
\&     4  $Data::Dumper::Indent = 1;
\&     5  %}
\&     6  %%
\&     7  S:      \*(Aqc\*(Aq+  D+ 
\&     8             { 
\&     9                print Dumper($_[1]);
\&    10                print $_[1]\->str."\en";
\&    11                print Dumper($_[2]);
\&    12                print $_[2]\->str."\en";
\&    13             } 
\&    14  ;
\&    15  
\&    16  D: \*(Aqd\*(Aq.d
\&    17       {
\&    18         Parse::Eyapp::Node\->new(
\&    19           \*(AqDES(TERMINAL)\*(Aq, 
\&    20            sub { 
\&    21              my ($DES, $TERMINAL) = @_;
\&    22              $TERMINAL\->{attr} = $d;
\&    23            }
\&    24         );
\&    25       }
\&    26  ;
\&    27  
\&    28  %%
\&    29  
\&    30  sub Run {
\&    31    my ($self) = shift;
\&    32    return $self\->YYParse( yybuildingtree => 1 );
\&    33  }
.Ve
.PP
To know more about \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
see the section for \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
.PP
When the former eyapp program is executed produces the following
output:
.PP
.Vb 10
\&  $ eyapp ListWithRefs2.eyp; use_listwithrefs2.pl
\&  ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST_1\*(Aq );
\&  _PLUS_LIST_1(TERMINAL,TERMINAL)
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqDES\*(Aq ),
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqDES\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST_2\*(Aq );
\&  _PLUS_LIST_2(DES(TERMINAL),DES(TERMINAL))
.Ve
.ie n .SS "The ""*"" operator"
.el .SS "The \f(CW*\fP operator"
.IX Subsection "The * operator"
Any list operator operates on the factor to its left.
A list in the right hand side of a production rule
counts as a single symbol.
.PP
Both operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`+\*(C'\fR can be used 
with the format
\&\f(CW\*(C`X <* Separator>\*(C'\fR.
In such case they describe lists of \f(CW\*(C`X\*(C'\fRs separated by 
\&\f(CW\*(C`separator\*(C'\fR. See an example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-25 CsBetweenCommansAndD.eyp | cat \-n
\&   1  # CsBetweenCommansAndD.eyp
\&   2
\&   3  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&   4
\&   5  %{
\&   6  sub TERMINAL::info {
\&   7    $_[0]\->attr;
\&   8  }
\&   9  %}
\&  10  %tree
\&  11  %%
\&  12  S:
\&  13      (\*(Aqc\*(Aq <* \*(Aq,\*(Aq> \*(Aqd\*(Aq)*
\&  14        {
\&  15           print "\enNode\en";
\&  16           print $_[1]\->str."\en";
\&  17           print "\enChild 0\en";
\&  18           print $_[1]\->child(0)\->str."\en";
\&  19           print "\enChild 1\en";
\&  20           print $_[1]\->child(1)\->str."\en";
\&  21           $_[1]
\&  22        }
\&  23  ;
\&  24
\&  25  %%
.Ve
.PP
The rule
.PP
.Vb 1
\&                            S: (\*(Aqc\*(Aq <* \*(Aq,\*(Aq> \*(Aqd\*(Aq)*
.Ve
.PP
has only two items in its right hand side: the (separated by commas) list
of \f(CW\*(C`c\*(C'\fRs and the list of \f(CW\*(C`d\*(C'\fRs.  The production rule is equivalent to:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v CsBetweenCommansAndD.eyp
\&  pl@nereida:~/LEyapp/examples$ head \-11 CsBetweenCommansAndD.output | cat \-n
\&   1  Rules:
\&   2  \-\-\-\-\-\-
\&   3  0:      $start \-> S $end
\&   4  1:      STAR\-1 \-> STAR\-1 \*(Aq,\*(Aq \*(Aqc\*(Aq
\&   5  2:      STAR\-1 \-> \*(Aqc\*(Aq
\&   6  3:      STAR\-2 \-> STAR\-1
\&   7  4:      STAR\-2 \-> /* empty */
\&   8  5:      PAREN\-3 \-> STAR\-2 \*(Aqd\*(Aq
\&   9  6:      STAR\-4 \-> STAR\-4 PAREN\-3
\&  10  7:      STAR\-4 \-> /* empty */
\&  11  8:      S \-> STAR\-4
.Ve
.PP
The semantic action associated with \f(CW\*(C`*\*(C'\fR is to return 
a reference to a list with the attributes of the 
matching items.
.PP
When working \-as in the example \-
under a tree creation directive it returns
a node belonging to a class named \f(CW\*(C`_STAR_LIST_#number\*(C'\fR
whose children are the items in the list.
The \f(CW\*(C`#number\*(C'\fR is the ordinal number of the production rule
as it appears in the \f(CW\*(C`.output\*(C'\fR file. The attributes must be 
references or associated with semantic tokens to be included 
in the list. Notice \-in the execution of the former
example  that follows \-
how the node for \f(CW\*(C`PAREN\-3\*(C'\fR has been 
eliminated from the tree. Parenthesis nodes are \- generally \-
obviated:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples$ use_csbetweencommansandd.pl
\&  c,c,cd
\&
\&  Node
\&  _STAR_LIST_4(_STAR_LIST_1(TERMINAL[c],TERMINAL[c],TERMINAL[c]),TERMINAL[d])
\&
\&  Child 0
\&  _STAR_LIST_1(TERMINAL[c],TERMINAL[c],TERMINAL[c])
\&
\&  Child 1
\&  TERMINAL[d]
.Ve
.PP
Notice that the comma (since it is a syntactic token) has 
also been suppressed.
.SS "Giving Names to Lists"
.IX Subsection "Giving Names to Lists"
To set the name of the node associated with a list operator the
\&\f(CW%name\fR directive must precede the operator as in 
the following example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,27p\*(Aq CsBetweenCommansAndDWithNames.eyp | cat \-n
\&   1  # CsBetweenCommansAndDWithNames.eyp
\&   2
\&   3  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&   4
\&   5  %{
\&   6  sub TERMINAL::info {
\&   7    $_[0]\->attr;
\&   8  }
\&   9  %}
\&  10  %tree
\&  11  %%
\&  12  Start: S
\&  13  ;
\&  14  S:
\&  15      (\*(Aqc\*(Aq <%name Cs * \*(Aq,\*(Aq> \*(Aqd\*(Aq) %name Cs_and_d *
\&  16        {
\&  17           print "\enNode\en";
\&  18           print $_[1]\->str."\en";
\&  19           print "\enChild 0\en";
\&  20           print $_[1]\->child(0)\->str."\en";
\&  21           print "\enChild 1\en";
\&  22           print $_[1]\->child(1)\->str."\en";
\&  23           $_[1]
\&  24        }
\&  25  ;
\&  26
\&  27  %%
.Ve
.PP
The grammar describes the language of sequences
.PP
.Vb 1
\&                  c,...,cd c,...,cd c,...,cd ....
.Ve
.PP
The right hand side of the production has only one term which is a list, 
but the factor to which the star applies is itself a list. 
We are naming the term with the name \f(CW\*(C`Cs_and_d\*(C'\fR and the factor with 
the name \f(CW\*(C`Cs\*(C'\fR.
.PP
The execution shows the renamed nodes:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ use_csbetweencommansanddwithnames.pl
\&  c,c,c,cd
\&
\&  Node
\&  Cs_and_d(Cs(TERMINAL[c],TERMINAL[c],TERMINAL[c],TERMINAL[c]),TERMINAL[d])
\&
\&  Child 0
\&  Cs(TERMINAL[c],TERMINAL[c],TERMINAL[c],TERMINAL[c])
\&
\&  Child 1
\&  TERMINAL[d]
.Ve
.SS "Optionals"
.IX Subsection "Optionals"
The \f(CW\*(C`X?\*(C'\fR operator stands for the presence or omission
of \f(CW\*(C`X\*(C'\fR.
.PP
The grammar:
.PP
.Vb 12
\&  pl@nereida:~/LEyapp/examples$ head \-11 List5.yp | cat \-n
\&       1  %semantic token \*(Aqc\*(Aq
\&       2  %tree
\&       3  %%
\&       4  S: \*(Aqc\*(Aq \*(Aqc\*(Aq?
\&       5       {
\&       6         print $_[2]\->str."\en";
\&       7         print $_[2]\->child(0)\->attr."\en" if $_[2]\->children;
\&       8      }
\&       9  ;
\&      10
\&      11  %%
.Ve
.PP
is equivalent to:
.PP
.Vb 8
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v List5
\&  pl@nereida:~/LEyapp/examples$ head \-7 List5.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> S $end
\&  1:      OPTIONAL\-1 \-> \*(Aqc\*(Aq
\&  2:      OPTIONAL\-1 \-> /* empty */
\&  3:      S \-> \*(Aqc\*(Aq OPTIONAL\-1
.Ve
.PP
When \f(CW\*(C`yybuildingtree\*(C'\fR is false the associated attribute 
is a list that will be empty if \s-1CX\s0> does not show up.
.PP
Under the \f(CW%tree\fR directive the action creates an \f(CW\*(C`_OPTIONAL\*(C'\fR
node:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ use_list5.pl
\&  cc
\&  _OPTIONAL_1(TERMINAL)
\&  c
\&  pl@nereida:~/LEyapp/examples$ use_list5.pl
\&  c
\&  _OPTIONAL_1
.Ve
.SS "Parenthesis"
.IX Subsection "Parenthesis"
Any substring on the right hand side of a production rule can be grouped
using a parenthesis. The introduction of a parenthesis implies the introduction
of an additional syntactic variable whose only production 
is the sequence of symbols between the parenthesis. Thus the grammar:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ head \-6 Parenthesis.eyp | cat \-n
\&     1  %%
\&     2  S:
\&     3        (\*(Aqa\*(Aq S ) \*(Aqb\*(Aq  { shift; [ @_ ] }
\&     4      | \*(Aqc\*(Aq
\&     5  ;
\&     6  %%
.Ve
.PP
is equivalent to:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v Parenthesis.eyp; head \-6 Parenthesis.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> S $end
\&  1:      PAREN\-1 \-> \*(Aqa\*(Aq S
\&  2:      S \-> PAREN\-1 \*(Aqb\*(Aq
\&  3:      S \-> \*(Aqc\*(Aq
.Ve
.PP
By default the semantic rule associated with a parenthesis
returns an anonymous list with the attributes of the symbols 
between the parenthesis:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n use_parenthesis.pl
\&       1  #!/usr/bin/perl \-w
\&       2  use Parenthesis;
\&       3  use Data::Dumper;
\&       4
\&       5  $Data::Dumper::Indent = 1;
\&       6  $parser = Parenthesis\->new();
\&       7  print Dumper($parser\->Run);
\&  pl@nereida:~/LEyapp/examples$ use_parenthesis.pl
\&  acb
\&  $VAR1 = [
\&    [ \*(Aqa\*(Aq, \*(Aqc\*(Aq ], \*(Aqb\*(Aq
\&  ];
\&  pl@nereida:~/LEyapp/examples$ use_parenthesis.pl
\&  aacbb
\&  $VAR1 = [
\&    [
\&      \*(Aqa\*(Aq,
\&      [ [ \*(Aqa\*(Aq, \*(Aqc\*(Aq ], \*(Aqb\*(Aq ]
\&    ],
\&    \*(Aqb\*(Aq
\&  ];
.Ve
.PP
when working under a tree directive or when the attribute
\&\f(CW\*(C`buildingtree\*(C'\fR is set via the \f(CW\*(C`YYBuildingtree\*(C'\fR method
the semantic action returns a node with children the attributes
of the symbols between parenthesis. As usual attributes
which aren't references will be skipped from the list of children.
See an example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-23 List2.yp | cat \-n
\&   1  %{
\&   2  use Data::Dumper;
\&   3  %}
\&   4  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq \*(Aqc\*(Aq
\&   5  %tree
\&   6  %%
\&   7  S:
\&   8        (%name AS \*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&   9          {
\&  10            print "S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\en";
\&  11            print "Attribute of the first symbol:\en".Dumper($_[1]);
\&  12            print "Attribute of the second symbol: $_[2]\en";
\&  13            $_[0]\->YYBuildAST(@_[1..$#_]);
\&  14          }
\&  15      | \*(Aqc\*(Aq
\&  16          {
\&  17            print "S \-> \*(Aqc\*(Aq\en";
\&  18            my $r = Parse::Eyapp::Node\->new(qw(C(TERMINAL)), sub { $_[1]\->attr(\*(Aqc\*(Aq) }) ;
\&  19            print Dumper($r);
\&  20            $r;
\&  21          }
\&  22  ;
\&  23  %%
.Ve
.PP
The example shows (line 8)
how to rename a \f(CW\*(C`_PAREN\*(C'\fR node. The \f(CW\*(C`%name CLASSNAME\*(C'\fR goes
after the opening parenthesis.
.PP
The call to \f(CW\*(C`YYBuildAST\*(C'\fR at line 13
with argumetns the attributes of the symbols on the right hand side
returns the node describing the current production rule.
Notice that line 13 can be rewritten as:
.PP
.Vb 1
\&                    goto &Parse::Eyapp::Driver::YYBuildAST;
.Ve
.PP
At line 18 the node for the rule is explicitly created
using \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR. The handler passed as second argument
is responsible for setting the value of the atribute \f(CW\*(C`attr\*(C'\fR
of the just created \f(CW\*(C`TERMINAL\*(C'\fR node.
.PP
Let us see an execution:
.PP
.Vb 11
\&  pl@nereida:~/LEyapp/examples$ use_list2.pl
\&  aacbb
\&  S \-> \*(Aqc\*(Aq
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( {
\&        \*(Aqchildren\*(Aq => [],
\&        \*(Aqattr\*(Aq => \*(Aqc\*(Aq
\&      }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(AqC\*(Aq );
.Ve
.PP
the first reduction occurs by the non recursive rule. The execution
shows the tree built by the call to
\&\f(CW\*(C`Parse::Eyapp::Node\-\*(C'\fRnew>
at line 18.
.PP
The execution continues with the reduction or reverse derivation by the rule
\&\f(CW\*(C`S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\*(C'\fR. The action at lines 9\-14
dumps the attribute associated with \f(CW\*(C`(\*(Aqa\*(Aq S)\*(C'\fR
\&\- or, in other words,  the attribute associated with the variable 
\&\f(CW\*(C`PAREN\-1\*(C'\fR. It also dumps the attribute of \f(CW\*(Aqb\*(Aq\fR:
.PP
.Vb 11
\&  S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&  Attribute of the first symbol:
\&  $VAR1 = bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&        bless( { \*(Aqchildren\*(Aq => [ bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&       ]
\&     }, \*(AqC\*(Aq )
\&    ]
\&  }, \*(AqAS\*(Aq );
\&Attribute of the second symbol: b
.Ve
.PP
The last reduction shown is by the rule:
\&\f(CW\*(C`S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\*(C'\fR:
.PP
.Vb 10
\&  S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&  Attribute of the first symbol:
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( {
\&            \*(Aqchildren\*(Aq => [
\&              bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&              bless( {
\&                \*(Aqchildren\*(Aq => [
\&                  bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&                ]
\&              }, \*(AqC\*(Aq )
\&            ]
\&          }, \*(AqAS\*(Aq ),
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqb\*(Aq, \*(Aqtoken\*(Aq => \*(Aqb\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqS_2\*(Aq )
\&    ]
\&  }, \*(AqAS\*(Aq );
\&  Attribute of the second symbol: b
.Ve
.SS "Actions Inside Parenthesis"
.IX Subsection "Actions Inside Parenthesis"
Though is a practice to avoid, since it clutters
the code, it is certainly permitted to introduce
actions between the parenthesis, as in the example below:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-16 ListAndAction.eyp | cat \-n
\&   1  # ListAndAction.eyp
\&   2  %{
\&   3  my $num = 0;
\&   4  %}
\&   5
\&   6  %%
\&   7  S:      \*(Aqc\*(Aq
\&   8              {
\&   9                print "S \-> c\en"
\&  10              }
\&  11      |    (\*(Aqa\*(Aq {$num++; print "Seen <$num> \*(Aqa\*(Aqs\en"; $_[1] }) S \*(Aqb\*(Aq
\&  12              {
\&  13                print "S \-> (a ) S b\en"
\&  14              }
\&  15  ;
\&  16  %%
.Ve
.PP
This is the output when executing this program with input \f(CW\*(C`aaacbbb\*(C'\fR:
.PP
.Vb 9
\&  pl@nereida:~/LEyapp/examples$ use_listandaction.pl
\&  aaacbbb
\&  Seen <1> \*(Aqa\*(Aqs
\&  Seen <2> \*(Aqa\*(Aqs
\&  Seen <3> \*(Aqa\*(Aqs
\&  S \-> c
\&  S \-> (a ) S b
\&  S \-> (a ) S b
\&  S \-> (a ) S b
.Ve
.SH "NAMES FOR ATTRIBUTES"
.IX Header "NAMES FOR ATTRIBUTES"
Attributes can be referenced by meaningful names using the \fIdot notation\fR
instead of using the classic error-prone positional approach:
.PP
.Vb 5
\&                        rhs:  rhseltwithid *
\&                        rhseltwithid : 
\&                              rhselt \*(Aq.\*(Aq IDENT 
\&                            | \*(Aq$\*(Aq rhselt  
\&                            | rhselt
.Ve
.PP
for example:
.PP
.Vb 1
\&              exp : exp.left \*(Aq\-\*(Aq exp.right  { $left \- $right }
.Ve
.PP
By qualifying the first appearance of the syntactic variable \f(CW\*(C`exp\*(C'\fR
with the notation \f(CW\*(C`exp.left\*(C'\fR we can later refer inside the actions
to the associated attribute using the lexical variable
\&\f(CW$left\fR.
.PP
The \fIdollar notation\fR \f(CW$A\fR can be used as an abbreviation
of \f(CW\*(C`A.A\*(C'\fR.
.SH "DEFAULT ACTIONS"
.IX Header "DEFAULT ACTIONS"
When no action is specified both \f(CW\*(C`yapp\*(C'\fR and \f(CW\*(C`eyapp\*(C'\fR
implicitly insert the semantic action \f(CW\*(C`{ $_[1] }\*(C'\fR. 
In \f(CW\*(C`Parse::Eyapp\*(C'\fR you can modify such behavior using the \f(CW\*(C`%defaultaction { Perl code }\*(C'\fR
directive. The \f(CW\*(C`{ Perl code }\*(C'\fR clause that follows the \f(CW%defaultaction\fR
directive is
executed when reducing by any production for which no explicit
action was specified.
.SS "An Example of Default Action: Translator from Infix to Postfix"
.IX Subsection "An Example of Default Action: Translator from Infix to Postfix"
See an example that translates an infix expression
like \f(CW\*(C`a=b*\-3\*(C'\fR into a postfix expression like \f(CW\*(C`a b 3 NEG * = \*(C'\fR:
.PP
.Vb 5
\& # File Postfix.eyp (See the examples/ directory)
\& %right  \*(Aq=\*(Aq
\& %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\& %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\& %left   NEG
\&
\& %defaultaction { return  "$left $right $op"; }
\&
\& %%
\& line: $exp  { print "$exp\en" }
\& ;
\&
\& exp:        $NUM  { $NUM }
\&         |   $VAR  { $VAR }
\&         |   VAR.left \*(Aq=\*(Aq.op exp.right
\&         |   exp.left \*(Aq+\*(Aq.op exp.right
\&         |   exp.left \*(Aq\-\*(Aq.op exp.right
\&         |   exp.left \*(Aq*\*(Aq.op exp.right
\&         |   exp.left \*(Aq/\*(Aq.op exp.right
\&         |   \*(Aq\-\*(Aq $exp %prec NEG { "$exp NEG" }
\&         |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq { $exp }
\& ;
\&
\& %%
\&
\& # Support subroutines as in the Synopsis example
\& ...
.Ve
.PP
The file containing the \f(CW\*(C`Eyapp\*(C'\fR program must be compiled with \f(CW\*(C`eyapp\*(C'\fR:
.PP
.Vb 1
\& nereida:~/src/perl/YappWithDefaultAction/examples> eyapp Postfix.eyp
.Ve
.PP
Next, you have to write a client program:
.PP
.Vb 7
\& nereida:~/src/perl/YappWithDefaultAction/examples> cat \-n usepostfix.pl
\&      1  #!/usr/bin/perl \-w
\&      2  use strict;
\&      3  use Postfix;
\&      4
\&      5  my $parser = new Postfix();
\&      6  $parser\->Run;
.Ve
.PP
Now we can run the client program:
.PP
.Vb 3
\& nereida:~/src/perl/YappWithDefaultAction/examples> usepostfix.pl
\& Write an expression: \-(2*a\-b*\-3)
\& 2 a * b 3 NEG * \- NEG
.Ve
.ie n .SS "Default Actions, %name and ""YYName"""
.el .SS "Default Actions, \f(CW%name\fP and \f(CWYYName\fP"
.IX Subsection "Default Actions, %name and YYName"
In \f(CW\*(C`eyapp\*(C'\fR each production rule has a name.
The name of a rule can be explicitly given by the programmer 
using the \f(CW%name\fR directive. For example, in the piece of code
that follows the name \f(CW\*(C`ASSIGN\*(C'\fR is given to the rule \f(CW\*(C`exp: VAR \*(Aq=\*(Aq exp\*(C'\fR.
.PP
When no explicit name is given the rule has an implicit name.
The implicit name of a rule is shaped by concatenating
the name of the syntactic variable on its left, an underscore 
and the ordinal number of the production rule \f(CW\*(C`Lhs_#\*(C'\fR
as it appears in the \f(CW\*(C`.output\*(C'\fR file.
Avoid giving names matching such pattern to production rules.
The patterns
\&\f(CW\*(C`/${lhs}_\ed+$/\*(C'\fR where \f(CW\*(C`${lhs}\*(C'\fR is the name of the syntactic variable
are reserved for internal use by \f(CW\*(C`eyapp\*(C'\fR.
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n Lhs.eyp
\&   1  # Lhs.eyp
\&   2
\&   3  %right  \*(Aq=\*(Aq
\&   4  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&   5  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&   6  %left   NEG
\&   7
\&   8  %defaultaction {
\&   9    my $self = shift;
\&  10    my $name = $self\->YYName();
\&  11    bless { children => [ grep {ref($_)} @_] }, $name;
\&  12  }
\&  13
\&  14  %%
\&  15  input:
\&  16              /* empty */
\&  17                { [] }
\&  18          |   input line
\&  19                {
\&  20                  push @{$_[1]}, $_[2] if defined($_[2]);
\&  21                  $_[1]
\&  22                }
\&  23  ;
\&  24
\&  25  line:     \*(Aq\en\*(Aq       { }
\&  26          | exp \*(Aq\en\*(Aq   {  $_[1] }
\&  27  ;
\&  28
\&  29  exp:
\&  30              NUM   { $_[1] }
\&  31          |   VAR   { $_[1] }
\&  32          |   %name ASSIGN
\&  33              VAR \*(Aq=\*(Aq exp
\&  34          |   %name PLUS
\&  35              exp \*(Aq+\*(Aq exp
\&  36          |   %name MINUS
\&  37              exp \*(Aq\-\*(Aq exp
\&  38          |   %name TIMES
\&  39              exp \*(Aq*\*(Aq exp
\&  40          |   %name DIV
\&  41              exp \*(Aq/\*(Aq exp
\&  42          |   %name UMINUS
\&  43              \*(Aq\-\*(Aq exp %prec NEG
\&  44          |  \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&  45  ;
.Ve
.PP
Inside a semantic action
the name of the current rule can be recovered 
using the method \f(CW\*(C`YYName\*(C'\fR of the parser object.
.PP
The default action (lines 8\-12) computes as attribute of the left
hand side a reference to an object blessed in the name of the rule.
The object has an attribute \f(CW\*(C`children\*(C'\fR which is a reference 
to the list of children of the node.
The call to \f(CW\*(C`grep\*(C'\fR
.PP
.Vb 1
\&  11    bless { children => [ grep {ref($_)} @_] }, $name;
.Ve
.PP
excludes children that aren't references. Notice that the lexical analyzer 
only returns references for the \f(CW\*(C`NUM\*(C'\fR and \f(CW\*(C`VAR\*(C'\fR terminals:
.PP
.Vb 10
\&  59  sub _Lexer {
\&  60      my($parser)=shift;
\&  61
\&  62      for ($parser\->YYData\->{INPUT}) {
\&  63          s/^[ \et]+//;
\&  64          return(\*(Aq\*(Aq,undef) unless $_;
\&  65          s/^([0\-9]+(?:\e.[0\-9]+)?)//
\&  66                  and return(\*(AqNUM\*(Aq, bless { attr => $1}, \*(AqNUM\*(Aq);
\&  67          s/^([A\-Za\-z][A\-Za\-z0\-9_]*)//
\&  68                  and return(\*(AqVAR\*(Aq,bless {attr => $1}, \*(AqVAR\*(Aq);
\&  69          s/^(.)//s
\&  70                  and return($1, $1);
\&  71      }
\&  72      return(\*(Aq\*(Aq,undef);
\&  73  }
.Ve
.PP
follows the client program:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n uselhs.pl
\&       1  #!/usr/bin/perl \-w
\&       2  use Lhs;
\&       3  use Data::Dumper;
\&       4
\&       5  $parser = new Lhs();
\&       6  my $tree = $parser\->Run;
\&       7  $Data::Dumper::Indent = 1;
\&       8  if (defined($tree)) { print Dumper($tree); }
\&       9  else { print "Cadena no va\*'lida\en"; }
.Ve
.PP
When executed with input \f(CW\*(C`a=(2+3)*b\*(C'\fR the parser produces
the following tree:
.PP
.Vb 1
\&  ASSIGN(TIMES(PLUS(NUM[2],NUM[3]), VAR[b]))
.Ve
.PP
See the result of an execution:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ uselhs.pl
\&  a=(2+3)*b
\&  $VAR1 = [
\&    bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( { \*(Aqattr\*(Aq => \*(Aqa\*(Aq }, \*(AqVAR\*(Aq ),
\&        bless( {
\&          \*(Aqchildren\*(Aq => [
\&            bless( {
\&              \*(Aqchildren\*(Aq => [
\&                bless( { \*(Aqattr\*(Aq => \*(Aq2\*(Aq }, \*(AqNUM\*(Aq ),
\&                bless( { \*(Aqattr\*(Aq => \*(Aq3\*(Aq }, \*(AqNUM\*(Aq )
\&              ]
\&            }, \*(AqPLUS\*(Aq ),
\&            bless( { \*(Aqattr\*(Aq => \*(Aqb\*(Aq }, \*(AqVAR\*(Aq )
\&          ]
\&        }, \*(AqTIMES\*(Aq )
\&      ]
\&    }, \*(AqASSIGN\*(Aq )
\&  ];
.Ve
.PP
The name of a production rule can be changed at execution time.
See the following example:
.PP
.Vb 10
\&  $ sed \-n \*(Aq29,50p\*(Aq YYNameDynamic.eyp | cat \-n
\&     1  exp:
\&     2              NUM   { $_[1] }
\&     3          |   VAR   { $_[1] }
\&     4          |   %name ASSIGN
\&     5              VAR \*(Aq=\*(Aq exp
\&     6          |   %name PLUS
\&     7              exp \*(Aq+\*(Aq exp
\&     8          |   %name MINUS
\&     9              exp \*(Aq\-\*(Aq exp
\&    10                {
\&    11                  my $self = shift;
\&    12                  $self\->YYName(\*(AqSUBTRACT\*(Aq); # rename it
\&    13                  $self\->YYBuildAST(@_); # build the node
\&    14                }
\&    15          |   %name TIMES
\&    16              exp \*(Aq*\*(Aq exp
\&    17          |   %name DIV
\&    18              exp \*(Aq/\*(Aq exp
\&    19          |   %name UMINUS
\&    20              \*(Aq\-\*(Aq exp %prec NEG
\&    21          |  \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    22  ;
.Ve
.PP
When the client program is executed we can see the presence
of the \f(CW\*(C`SUBTRACT\*(C'\fR nodes:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ useyynamedynamic.pl
\&  2\-b
\&  $VAR1 = [
\&    bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( {
\&          \*(Aqattr\*(Aq => \*(Aq2\*(Aq
\&        }, \*(AqNUM\*(Aq ),
\&        bless( {
\&          \*(Aqattr\*(Aq => \*(Aqb\*(Aq
\&        }, \*(AqVAR\*(Aq )
\&      ]
\&    }, \*(AqSUBTRACT\*(Aq )
\&  ];
.Ve
.SH "GRAMMAR REUSE"
.IX Header "GRAMMAR REUSE"
.SS "Reusing Grammars Using Inheritance"
.IX Subsection "Reusing Grammars Using Inheritance"
An method to reuse a grammar is via inheritance. 
The client inherits the generated parser module and expands it 
with methods that inherit or overwrite the actions.
Here is an example. Initially we have this Eyapp grammar:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n NoacInh.eyp
\&     1  %left   \*(Aq+\*(Aq
\&     2  %left   \*(Aq*\*(Aq
\&     3
\&     4  %defaultaction {
\&     5    my $self = shift;
\&     6
\&     7    my $action = $self\->YYName;
\&     8
\&     9    $self\->$action(@_);
\&    10  }
\&    11
\&    12  %%
\&    13  exp:        %name NUM
\&    14                NUM
\&    15          |   %name PLUS
\&    16                exp \*(Aq+\*(Aq exp
\&    17          |   %name TIMES
\&    18                exp \*(Aq*\*(Aq exp
\&    19          |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    20                { $_[2] }
\&    21  ;
\&    22
\&    23  %%
\&    24
\&    25  sub _Error {
\&    26    my($token)=$_[0]\->YYCurval;
\&    27    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    28    my @expected = $_[0]\->YYExpect();
\&    29
\&    30    local $" = \*(Aq, \*(Aq;
\&    31    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&    32  }
\&    33
\&    34
\&    35  my $x = \*(Aq\*(Aq;
\&    36
\&    37  sub _Lexer {
\&    38    my($parser)=shift;
\&    39
\&    40    for ($x) {
\&    41      s/^\es+//;
\&    42      $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    43
\&    44      s/^([0\-9]+(?:\e.[0\-9]+)?)//   and return(\*(AqNUM\*(Aq,$1);
\&    45      s/^([A\-Za\-z][A\-Za\-z0\-9_]*)// and return(\*(AqVAR\*(Aq,$1);
\&    46      s/^(.)//s                    and return($1,$1);
\&    47    }
\&    48  }
\&    49
\&    50  sub Run {
\&    51    my($self)=shift;
\&    52    $x = shift;
\&    53    my $debug = shift;
\&    54
\&    55    $self\->YYParse(
\&    56      yylex => \e&_Lexer,
\&    57      yyerror => \e&_Error,
\&    58      yydebug => $debug,
\&    59    );
\&    60  }
.Ve
.PP
The following program defines two classes: \f(CW\*(C`CalcActions\*(C'\fR
that implements the actions for the calculator
and package \f(CW\*(C`PostActions\*(C'\fR that implements the actions
for the infix to postfix translation. This way we have an 
example that reuses the former grammar twice:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n icalcu_and_ipost.pl
\&     1  #!/usr/bin/perl \-w
\&     2  package CalcActions;
\&     3  use strict;
\&     4  use base qw{NoacInh};
\&     5
\&     6  sub NUM {
\&     7    return $_[1];
\&     8  }
\&     9
\&    10  sub PLUS {
\&    11    $_[1]+$_[3];
\&    12  }
\&    13
\&    14  sub TIMES {
\&    15    $_[1]*$_[3];
\&    16  }
\&    17
\&    18  package PostActions;
\&    19  use strict;
\&    20  use base qw{NoacInh};
\&    21
\&    22  sub NUM {
\&    23    return $_[1];
\&    24  }
\&    25
\&    26  sub PLUS {
\&    27    "$_[1] $_[3] +";
\&    28  }
\&    29
\&    30  sub TIMES {
\&    31    "$_[1] $_[3] *";
\&    32  }
\&    33
\&    34  package main;
\&    35  use strict;
\&    36
\&    37  my $calcparser = CalcActions\->new();
\&    38  print "Write an expression: ";
\&    39  my $x = <STDIN>;
\&    40  my $e = $calcparser\->Run($x);
\&    41
\&    42  print "$e\en";
\&    43
\&    44  my $postparser = PostActions\->new();
\&    45  my $p = $postparser\->Run($x);
\&    46
\&    47  print "$p\en";
.Ve
.PP
The subroutine used as default action in \f(CW\*(C`NoacInh.eyp\*(C'\fR is so useful 
that is packed as the Parse::Eyapp::Driver method 
\&\f(CW\*(C`YYDelegateaction\*(C'\fR.
.PP
See files \f(CW\*(C`examples/recycle/NoacYYDelegateaction.eyp\*(C'\fR
and \f(CW\*(C`examples/recycle/icalcu_and_ipost_yydel.pl\*(C'\fR
for an example of use of \f(CW\*(C`YYDelegateaction\*(C'\fR.
.SS "Reusing Grammars by Dynamic Substitution of Semantic Actions"
.IX Subsection "Reusing Grammars by Dynamic Substitution of Semantic Actions"
The methods \f(CW\*(C`YYSetaction\*(C'\fR and \f(CW\*(C`YYAction\*(C'\fR of the parser object provide a way
to selectively substitute some actions of a given grammar.
Let us consider once more a postfix to infix translator:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n PostfixWithActions.eyp
\&     1  # File PostfixWithActions.eyp
\&     2  %right  \*(Aq=\*(Aq
\&     3  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     4  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     5  %left   NEG
\&     6
\&     7  %%
\&     8  line: $exp  { print "$exp\en" }
\&     9  ;
\&    10
\&    11  exp:        $NUM
\&    12                  { $NUM }
\&    13          |   $VAR
\&    14                  { $VAR }
\&    15          |   %name ASSIGN
\&    16                VAR.left \*(Aq=\*(Aqexp.right
\&    17                  { "$_[3] &$_[1] ASSIGN"; }
\&    18          |   %name PLUS
\&    19                exp.left \*(Aq+\*(Aqexp.right
\&    20                  { "$_[1] $_[3] PLUS"; }
\&    21          |   %name MINUS
\&    22                exp.left \*(Aq\-\*(Aqexp.right
\&    23                  { "$_[1] $_[3] MINUS"; }
\&    24          |   %name TIMES
\&    25                exp.left \*(Aq*\*(Aqexp.right
\&    26                  { "$_[1] $_[3] TIMES"; }
\&    27          |   %name DIV
\&    28                exp.left \*(Aq/\*(Aqexp.right
\&    29                  { "$_[1] $_[3] DIV"; }
\&    30          |   %name NEG \*(Aq\-\*(Aq $exp %prec NEG
\&    31                  { "$exp NEG" }
\&    32          |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq
\&    33                  { $exp }
\&    34  ;
\&    35
\&    36  %%
\&    37
\&    38  sub _Error {
\&    39    my($token)=$_[0]\->YYCurval;
\&    40    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    41    my @expected = $_[0]\->YYExpect();
\&    42
\&    43    local $" = \*(Aq, \*(Aq;
\&    44    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&    45  }
\&    46
\&    47  my $x;
\&    48
\&    49  sub _Lexer {
\&    50    my($parser)=shift;
\&    51
\&    52    for ($x) {
\&    53      s/^\es+//;
\&    54      $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    55
\&    56      s/^([0\-9]+(?:\e.[0\-9]+)?)//   and return(\*(AqNUM\*(Aq,$1);
\&    57      s/^([A\-Za\-z][A\-Za\-z0\-9_]*)// and return(\*(AqVAR\*(Aq,$1);
\&    58      s/^(.)//s                    and return($1,$1);
\&    59    }
\&    60  }
\&    61
\&    62  sub Run {
\&    63    my($self)=shift;
\&    64    $x = shift;
\&    65    $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&    66      #yydebug => 0xFF
\&    67    );
\&    68  }
.Ve
.PP
The program \f(CW\*(C`rewritepostfixwithactions.pl\*(C'\fR uses the former grammar
to translate infix expressions to postfix expressions.
It also implements a calculator reusing the grammar in
\&\f(CW\*(C`PostfixWithActions.eyp\*(C'\fR. It does so using
the \f(CW\*(C`YYSetaction\*(C'\fR method.
The semantic actions for the productions named
.IP "\(bu" 2
\&\s-1ASSIGN\s0
.IP "\(bu" 2
\&\s-1PLUS\s0
.IP "\(bu" 2
\&\s-1TIMES\s0
.IP "\(bu" 2
\&\s-1DIV\s0
.IP "\(bu" 2
\&\s-1NEG\s0
.PP
are selectively substituted by the appropriate actions, while the other
semantic actions remain unchanged:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n rewritepostfixwithactions.pl
\&     1  #!/usr/bin/perl
\&     2  use warnings;
\&     3  use PostfixWithActions;
\&     4
\&     5  my $debug = shift || 0;
\&     6  my $pparser = PostfixWithActions\->new();
\&     7  print "Write an expression: ";
\&     8  my $x = <STDIN>;
\&     9
\&    10  # First, trasnlate to postfix ...
\&    11  $pparser\->Run($x, $debug);
\&    12
\&    13  # And then selectively substitute
\&    14  # some semantic actions
\&    15  # to obtain an infix calculator ...
\&    16  my %s;            # symbol table
\&    17  $pparser\->YYSetaction(
\&    18    ASSIGN => sub { $s{$_[1]} = $_[3] },
\&    19    PLUS   => sub { $_[1] + $_[3] },
\&    20    TIMES  => sub { $_[1] * $_[3] },
\&    21    DIV    => sub { $_[1] / $_[3] },
\&    22    NEG    => sub { \-$_[2] },
\&    23  );
\&    24
\&    25  $pparser\->Run($x, $debug);
.Ve
.PP
When running this program the output is:
.PP
.Vb 8
\&  examples/recycle$ ./rewritepostfixwithactions.pl
\&  Write an expression: 2*3+4
\&  2 3 TIMES 4 PLUS
\&  10
\&  examples/recycle$ rewritepostfixwithactions.pl
\&  Write an expression: a = 2*(b = 3+5)
\&  2 3 5 PLUS &b ASSIGN TIMES &a ASSIGN
\&  16
.Ve
.ie n .SH "ABSTRACT SYNTAX TREES: %tree AND %name"
.el .SH "ABSTRACT SYNTAX TREES: \f(CW%tree\fP AND \f(CW%name\fP"
.IX Header "ABSTRACT SYNTAX TREES: %tree AND %name"
.ie n .SS "%tree Default Names"
.el .SS "\f(CW%tree\fP Default Names"
.IX Subsection "%tree Default Names"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR facilitates the construction of concrete syntax trees and 
abstract syntax trees (abbreviated \s-1AST\s0 from now on) through the \f(CW%tree\fR
directive. Actually, the \f(CW%tree\fR directive is equivalent to a call
to the \f(CW\*(C`YYBuildAST\*(C'\fR method of the parser object.
.PP
Any production production rule \f(CW\*(C`A\->XYZ\*(C'\fR 
can be named using a directive \f(CW\*(C`%name someclass\*(C'\fR.
.PP
When reducing by a production rule \f(CW\*(C`A\->XYZ\*(C'\fR 
the \f(CW%tree\fR directive (i.e., the \f(CW\*(C`YYBuildAST\*(C'\fR method) 
builds an anonymous hash blessed in \f(CW\*(C`someclass\*(C'\fR.
The hash has an attribute \f(CW\*(C`children\*(C'\fR containing the references
to the \s-1AST\s0 trees associated with the symbols in the right hand
side \f(CW\*(C`X\*(C'\fR, C>Y>, etc.
.PP
If no explicit name was given to the production rule,
\&\f(CW\*(C`YYBuildAST\*(C'\fR blesses the node in the class name resulting 
from the concatenation
of the left hand side and the production number. The production number
is the ordinal number of the production as they appear in the associated 
\&\f(CW\*(C`.output\*(C'\fR file (see option \f(CW\*(C`\-v\*(C'\fR of eyapp). For example,
given the grammar:
.PP
.Vb 7
\&  pl@europa:~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq8,27p\*(Aq treewithoutnames.pl
\&  my $grammar = q{
\&    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    %tree           # Let us build an abstract syntax tree ...
\&
\&    %%
\&    line: exp <+ \*(Aq;\*(Aq>  { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    ;
\&
\&    exp:
\&         NUM           |   VAR       | VAR \*(Aq=\*(Aq exp
\&      | exp \*(Aq+\*(Aq exp    | exp \*(Aq\-\*(Aq exp |  exp \*(Aq*\*(Aq exp
\&      | exp \*(Aq/\*(Aq exp
\&      | \*(Aq\-\*(Aq exp %prec NEG
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    ;
\&
\&    %%
.Ve
.PP
The tree produced by the parser when feed with input \f(CW\*(C`a=2*b\*(C'\fR
is:
.PP
.Vb 1
\&  pl@europa:~/LEyapp/examples/eyapplanguageref$ ./treewithoutnames.pl
\&
\&  ************
\&  _PLUS_LIST(exp_6(TERMINAL[a],exp_9(exp_4(TERMINAL[2]),exp_5(TERMINAL[b]))))
\&  ************
.Ve
.PP
If we want to see the correspondence between names and rules we can generate and
check the corresponding file \f(CW\*(C`.output\*(C'\fR setting the \f(CW\*(C`outputfile\*(C'\fR
of \f(CW\*(C`Parse::Eyapp\*(C'\fR:
.PP
.Vb 6
\&  Parse::Eyapp\->new_grammar( # Create the parser package/class
\&    input=>$grammar,
\&    classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&    firstline=>9,      # String $grammar starts at line 9 (for error diagnostics)
\&    outputfile=>\*(Aqtreewithoutnames\*(Aq
\&  );
.Ve
.PP
The grammar with the expanded rules appears in the \f(CW\*(C`.output\*(C'\fR file:
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq28,42p\*(Aq treewithoutnames.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> line $end
\&  1:      PLUS\-1 \-> PLUS\-1 \*(Aq;\*(Aq exp
\&  2:      PLUS\-1 \-> exp
\&  3:      line \-> PLUS\-1
\&  4:      exp \-> NUM
\&  5:      exp \-> VAR
\&  6:      exp \-> VAR \*(Aq=\*(Aq exp
\&  7:      exp \-> exp \*(Aq+\*(Aq exp
\&  8:      exp \-> exp \*(Aq\-\*(Aq exp
\&  9:      exp \-> exp \*(Aq*\*(Aq exp
\&  10:     exp \-> exp \*(Aq/\*(Aq exp
\&  11:     exp \-> \*(Aq\-\*(Aq exp
\&  12:     exp \-> \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.PP
We can see now that the node \f(CW\*(C`exp_9\*(C'\fR corresponds to the production \f(CW\*(C`exp \-> exp \*(Aq*\*(Aq exp\*(C'\fR.
Observe also that the Eyapp production:
.PP
.Vb 2
\&                                line: exp <+ \*(Aq;\*(Aq>
\&actually produces the productions:
\&
\&                        1:      PLUS\-1 \-> PLUS\-1 \*(Aq;\*(Aq exp
\&                        2:      PLUS\-1 \-> exp
.Ve
.PP
and that the name of the class associated with the non empty list is \f(CW\*(C`_PLUS_LIST\*(C'\fR.
.ie n .SS "%tree Giving Explicit Names"
.el .SS "\f(CW%tree\fP Giving Explicit Names"
.IX Subsection "%tree Giving Explicit Names"
A production rule can be \fInamed\fR using the \f(CW\*(C`%name IDENTIFIER\*(C'\fR directive.  For
each production rule a namespace/package is created. \fIThe\fR \f(CW\*(C`IDENTIFIER\*(C'\fR 
\&\fIis the name of the associated package\fR.  Therefore, by modifying the former
grammar with additional \f(CW%name\fR directives:
.PP
.Vb 7
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq8,26p\*(Aq treewithnames.pl
\&  my $grammar = q{
\&    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    %tree           # Let us build an abstract syntax tree ...
\&
\&    %%
\&    line: exp <%name EXPS + \*(Aq;\*(Aq>  { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    ;
\&
\&    exp:
\&        %name NUM    NUM           | %name VAR   VAR         | %name ASSIGN VAR \*(Aq=\*(Aq exp
\&      | %name PLUS   exp \*(Aq+\*(Aq exp   | %name MINUS exp \*(Aq\-\*(Aq exp | %name TIMES  exp \*(Aq*\*(Aq exp
\&      | %name DIV    exp \*(Aq/\*(Aq exp
\&      | %name UMINUS \*(Aq\-\*(Aq exp %prec NEG
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    ;
.Ve
.PP
we are explicitly naming the productions. Thus, all the node instances 
corresponding to the production \f(CW\*(C`exp: VAR \*(Aq=\*(Aq exp\*(C'\fR will belong to the class \f(CW\*(C`ASSIGN\*(C'\fR. 
Now the tree for \f(CW\*(C`a=2*b\*(C'\fR becomes:
.PP
.Vb 1
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ ./treewithnames.pl
\&
\&  ************
\&  EXPS(ASSIGN(TERMINAL[a],TIMES(NUM(TERMINAL[2]),VAR(TERMINAL[b]))))
\&  ************
.Ve
.PP
Observe how the list has been named \f(CW\*(C`EXPS\*(C'\fR. The \f(CW%name\fR directive prefixes the 
list operator (\f(CW\*(C`[+*?]\*(C'\fR).
.SS "\s-1TERMINAL\s0 Nodes"
.IX Subsection "TERMINAL Nodes"
Nodes named \f(CW\*(C`TERMINAL\*(C'\fR are built from the tokens provided by the lexical
analyzer.  \f(CW\*(C`Parse::Eyapp\*(C'\fR follows the same protocol than Parse::Yapp for
communication between the parser and the lexical analyzer: A couple \f(CW\*(C`($token,
$attribute)\*(C'\fR is returned by the lexical analyzer.  These values are stored
under the keys \f(CW\*(C`token\*(C'\fR and \f(CW\*(C`attr\*(C'\fR.  \f(CW\*(C`TERMINAL\*(C'\fR nodes as all
\&\f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes also have the attribute \f(CW\*(C`children\*(C'\fR but is \- almost
always \- empty.
.ie n .SS "Explicit Actions Inside %tree"
.el .SS "Explicit Actions Inside \f(CW%tree\fP"
.IX Subsection "Explicit Actions Inside %tree"
Explicit actions can be specified by the programmer like in this line
from the Parse::Eyapp \s-1SYNOPSIS\s0 example:
.PP
.Vb 1
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }  /* Let us simplify a bit the tree */
.Ve
.PP
Explicit actions receive as arguments the references to the children nodes already 
built. The programmer can influence the shape of the tree by inserting
these explicit actions. In this example the programmer has decided to simplify the 
syntax tree: the nodes associated with the parenthesis are 
discarded and the reference to the subtree containing the proper
expression is returned. Such manoeuvre is called \fIbypassing\fR.
See section \*(L"The  bypass clause and the \f(CW%no\fR bypass directive\*(R"
to know more about \fIautomatic bypassing\fR
.ie n .SS "Explicitly Building Nodes With ""YYBuildAST"""
.el .SS "Explicitly Building Nodes With \f(CWYYBuildAST\fP"
.IX Subsection "Explicitly Building Nodes With YYBuildAST"
Sometimes the best time to decorate a node with some
attributes is just after being built.
In such cases the programmer can take \fImanual control\fR
building the node with \f(CW\*(C`YYBuildAST\*(C'\fR to 
inmediately proceed to decorate it.
.PP
The following example illustrates the situation (see
file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR 
inside \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR):
.PP
.Vb 10
\&  $ sed \-n \*(Aq397,408p\*(Aq lib/Simple/Types.eyp
\&  Variable:
\&      %name VAR
\&      ID
\&    | %name  VARARRAY
\&      $ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq) <%name INDEXSPEC +>
\&        {
\&          my $self = shift;
\&          my $node =  $self\->YYBuildAST(@_);
\&          $node\->{line} = $ID\->[1];# $_[1]\->[1]
\&          return $node;
\&        }
\&  ;
.Ve
.PP
This production rule defines the expression to access an array element 
as an identifier followed by
a non empty list of binary expressions \f(CW\*(C` Variable: ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq)+\*(C'\fR. 
Furthermore, the node corresponding
to the list of indices has been named \f(CW\*(C`INDEXSPEC\*(C'\fR.
.PP
When no explicit action is
inserted a binary node will be built having as first child the node
corresponding to the identifier \f(CW$ID\fR and as second child the reference 
to the list of binary expressions. The children corresponding to
\&\f(CW\*(Aq[\*(Aq\fR and \f(CW\*(Aq]\*(Aq\fR are discarded since they are \-by default\- \fIsyntactic tokens\fR
(see section \*(L"Syntactic and Semantic tokens\*(R").
However, the programmer wants to decorate
the node being built with a \f(CW\*(C`line\*(C'\fR attribute holding the line number in the source
code where the identifier being used appears. The call to the \f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR
method \f(CW\*(C`YYBuildAST\*(C'\fR does the job of building the node. After
that the node can be decorated and returned.
.PP
Actually, the \f(CW%tree\fR directive is semantically equivalent to:
.PP
.Vb 1
\&                %default action { goto &Parse::Eyapp::Driver::YYBuildAST }
.Ve
.ie n .SS "Returning non References Under %tree"
.el .SS "Returning non References Under \f(CW%tree\fP"
.IX Subsection "Returning non References Under %tree"
When a \fIexplicit user action returns s.t. that is not a reference
no node will be inserted\fR. This fact can be used to suppress nodes
in the \s-1AST\s0 being built. See the following example (file \f(CW\*(C`examples/returnnonode.yp\*(C'\fR):
.PP
.Vb 10
\&  $ sed \-ne \*(Aq1,17p\*(Aq returnnonode.yp | cat \-n
\&     1  %tree
\&     2  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq
\&     3  %%
\&     4  S:    %name EMPTY
\&     5          /* empty */
\&     6      | %name AES
\&     7          S A
\&     8      | %name BES
\&     9          S B
\&    10  ;
\&    11  A : %name A
\&    12        \*(Aqa\*(Aq
\&    13  ;
\&    14  B : %name B
\&    15        \*(Aqb\*(Aq { }
\&    16  ;
\&    17  %%
.Ve
.PP
since the action at line 15 returns \f(CW\*(C`undef\*(C'\fR
the \f(CW\*(C`B : \*(Aqb\*(Aq\*(C'\fR subtree will not be inserted in the \s-1AST:\s0
.PP
.Vb 3
\&  $ usereturnnonode.pl
\&  ababa
\&  AES(BES(AES(BES(AES(EMPTY,A(TERMINAL[a]))),A(TERMINAL[a]))),A(TERMINAL[a]))
.Ve
.PP
Observe the absence of \f(CW\*(C`B\*(C'\fRs and \f(CW\*(Aqb\*(Aq\fRs.
.ie n .SS "Intermediate actions and %tree"
.el .SS "Intermediate actions and \f(CW%tree\fP"
.IX Subsection "Intermediate actions and %tree"
Intermediate actions can be used to change the shape of the \s-1AST \s0(prune it,
decorate it, etc.) but the value returned by them is ignored. The grammar 
below has two intermediate actions. They modify the attributes of the
node to its left and return a reference \f(CW$f\fR to such node (lines 5 and 6):
.PP
.Vb 10
\&  $ sed \-ne \*(Aq1,15p\*(Aq intermediateactiontree.yp | cat \-n
\&     1  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq
\&     2  %tree bypass
\&     3  %%
\&     4  S:    %name EMPTY
\&     5         /* empty */
\&     6      | %name SA
\&     7         S A.f { $f\->{attr} = "A"; $f; } A
\&     8      | %name SB
\&     9         S B.f { $f\->{attr} = "B"; $f; } B
\&    10  ;
\&    11  A : %name A \*(Aqa\*(Aq
\&    12  ;
\&    13  B : %name B \*(Aqb\*(Aq
\&    14  ;
\&    15  %%
.Ve
.PP
See the client program:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> cat \-n useintermediateactiontree.pl
\&  1  #!/usr/bin/perl \-w
\&  2  use strict;
\&  3  use Parse::Eyapp;
\&  4  use intermediateactiontree;
\&  5
\&  6  { no warnings;
\&  7  *A::info = *B::info = sub { $_[0]{attr} };
\&  8  }
\&  9
\& 10  my $parser = intermediateactiontree\->new();
\& 11  my $t = $parser\->Run;
\& 12  print $t\->str,"\en";
.Ve
.PP
When it runs produces this output:
.PP
.Vb 3
\&  $ useintermediateactiontree.pl
\&  aabbaa
\&  SA(SB(SA(EMPTY,A[A],A[a]),B[B],B[b]),A[A],A[a])
.Ve
.PP
The 
attributes 
of left \f(CW\*(C`A\*(C'\fRs 
have been effectively changed by the intermediate actions
from \f(CW\*(Aqa\*(Aq\fR to \f(CW\*(AqA\*(Aq\fR.
However no further children have been inserted.
.SS "Syntactic and Semantic tokens"
.IX Subsection "Syntactic and Semantic tokens"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR differences between \f(CW\*(C`syntactic tokens\*(C'\fR
and \f(CW\*(C`semantic tokens\*(C'\fR. By default all tokens
declared using string notation (i.e. between quotes
like \f(CW\*(Aq+\*(Aq\fR, \f(CW\*(Aq=\*(Aq\fR)
are considered \fIsyntactic tokens\fR. Tokens declared by an identifier
(like \f(CW\*(C`NUM\*(C'\fR or \f(CW\*(C`VAR\*(C'\fR) are by default considered
\&\fIsemantic tokens\fR. \fBSyntactic tokens do not yield to nodes in the
syntactic tree\fR. Thus, the first print in the section Parse::Eyapp \s-1SYNOPSIS\s0 example:
.PP
.Vb 10
\&  $ cat \-n synopsis.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp;
\&     4  use Parse::Eyapp::Treeregexp;
\&     5
\&     6  sub TERMINAL::info {
\&     7    $_[0]{attr}
\&     8  }
\&     9
\&    10  my $grammar = q{
\&    11    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    12    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    13    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    14    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    15    %tree           # Let us build an abstract syntax tree ...
\&    16
\&    17    %%
\&    18    line:
\&    19        exp <%name EXPRESSION_LIST + \*(Aq;\*(Aq>
\&    20          { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    21    ;
\&    22
\&    23    /* The %name directive defines the name of the class */
\&    24    exp:
\&    25        %name NUM
\&    26        NUM
\&    27      | %name VAR
\&    28        VAR
\&    29      | %name ASSIGN
\&    30        VAR \*(Aq=\*(Aq exp
\&    31      | %name PLUS
\&    32        exp \*(Aq+\*(Aq exp
\&    33      | %name MINUS
\&    34        exp \*(Aq\-\*(Aq exp
\&    35      | %name TIMES
\&    36        exp \*(Aq*\*(Aq exp
\&    37      | %name DIV
\&    38        exp \*(Aq/\*(Aq exp
\&    39      | %name UMINUS
\&    40        \*(Aq\-\*(Aq exp %prec NEG
\&    41      | \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    42          { $_[2] }  /* Let us simplify a bit the tree */
\&    43    ;
\&    44
\&    45    %%
\&    46    sub _Error { die "Syntax error near ".($_[0]\->YYCurval?$_[0]\->YYCurval:"end of file")."\en" }
\&    47
\&    48    sub _Lexer {
\&    49      my($parser)=shift; # The parser object
\&    50
\&    51      for ($parser\->YYData\->{INPUT}) { # Topicalize
\&    52        m{\eG\es+}gc;
\&    53        $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    54        m{\eG([0\-9]+(?:\e.[0\-9]+)?)}gc and return(\*(AqNUM\*(Aq,$1);
\&    55        m{\eG([A\-Za\-z][A\-Za\-z0\-9_]*)}gc and return(\*(AqVAR\*(Aq,$1);
\&    56        m{\eG(.)}gcs and return($1,$1);
\&    57      }
\&    58      return(\*(Aq\*(Aq,undef);
\&    59    }
\&    60
\&    61    sub Run {
\&    62        my($self)=shift;
\&    63        $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error, );
\&    64    }
\&    65  }; # end grammar
\&    66
\&    67  our (@all, $uminus);
\&    68
\&    69  Parse::Eyapp\->new_grammar( # Create the parser package/class
\&    70    input=>$grammar,
\&    71    classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&    72    firstline=>7       # String $grammar starts at line 7 (for error diagnostics)
\&    73  );
\&    74  my $parser = Calc\->new();                # Create a parser
\&    75  $parser\->YYData\->{INPUT} = "2*\-3+b*0;\-\-2\en"; # Set the input
\&    76  my $t = $parser\->Run;                    # Parse it!
\&    77  local $Parse::Eyapp::Node::INDENT=2;
\&    78  print "Syntax Tree:",$t\->str;
\&    79
\&    80  # Let us transform the tree. Define the tree\-regular expressions ..
\&    81  my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&    82      { #  Example of support code
\&    83        my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&    84      }
\&    85      constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM($x), NUM($y))
\&    86        => {
\&    87          my $op = $Op{ref($bin)};
\&    88          $x\->{attr} = eval  "$x\->{attr} $op $y\->{attr}";
\&    89          $_[0] = $NUM[0];
\&    90        }
\&    91      uminus: UMINUS(NUM($x)) => { $x\->{attr} = \-$x\->{attr}; $_[0] = $NUM }
\&    92      zero_times_whatever: TIMES(NUM($x), .) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    93      whatever_times_zero: TIMES(., NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    94    },
\&    95    OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\&    96  );
\&    97  $p\->generate(); # Create the tranformations
\&    98
\&    99  $t\->s($uminus); # Transform UMINUS nodes
\&   100  $t\->s(@all);    # constant folding and mult. by zero
\&   101
\&   102  local $Parse::Eyapp::Node::INDENT=0;
\&   103  print "\enSyntax Tree after transformations:\en",$t\->str,"\en";
.Ve
.PP
gives as result the following output:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> synopsis.pl
\& Syntax Tree:
\& EXPRESSION_LIST(
\&   PLUS(
\&     TIMES(
\&       NUM(
\&         TERMINAL[2]
\&       ),
\&       UMINUS(
\&         NUM(
\&           TERMINAL[3]
\&         )
\&       ) # UMINUS
\&     ) # TIMES,
\&     TIMES(
\&       VAR(
\&         TERMINAL[b]
\&       ),
\&       NUM(
\&         TERMINAL[0]
\&       )
\&     ) # TIMES
\&   ) # PLUS,
\&   UMINUS(
\&     UMINUS(
\&       NUM(
\&         TERMINAL[2]
\&       )
\&     ) # UMINUS
\&   ) # UMINUS
\& ) # EXPRESSION_LIST
.Ve
.PP
\&\f(CW\*(C`TERMINAL\*(C'\fR nodes corresponding to tokens that were defined by strings like
\&\f(CW\*(Aq=\*(Aq\fR, \f(CW\*(Aq\-\*(Aq\fR, \f(CW\*(Aq+\*(Aq\fR, \f(CW\*(Aq/\*(Aq\fR, \f(CW\*(Aq*\*(Aq\fR, \f(CW\*(Aq(\*(Aq\fR and \f(CW\*(Aq)\*(Aq\fR  do not 
appear in the tree.  \f(CW\*(C`TERMINAL\*(C'\fR nodes corresponding to tokens that were defined
using an identifier, like \f(CW\*(C`NUM\*(C'\fR or \f(CW\*(C`VAR\*(C'\fR are, by default,  \fIsemantic tokens\fR
and appear in the \s-1AST.\s0
.SS "Changing the Status of a Token"
.IX Subsection "Changing the Status of a Token"
The new token declaration directives \f(CW\*(C`%syntactic token\*(C'\fR and
\&\f(CW\*(C`%semantic token\*(C'\fR can change the status of a token.
For example (file \f(CW\*(C`15treewithsyntactictoken.pl\*(C'\fR in the \f(CW\*(C`examples/\*(C'\fR directory), 
given the grammar:
.PP
.Vb 3
\&   %syntactic token b
\&   %semantic token \*(Aqa\*(Aq \*(Aqc\*(Aq
\&   %tree
\&
\&   %%
\&
\&   S: %name ABC
\&        A B C
\&    | %name BC
\&        B C
\&   ;
\&
\&   A: %name A
\&        \*(Aqa\*(Aq
\&   ;
\&
\&   B: %name B
\&        b
\&   ;
\&
\&   C: %name C
\&       \*(Aqc\*(Aq
\&   ;
\&   %%
.Ve
.PP
the tree build for input \f(CW\*(C`abc\*(C'\fR will be 
\&\f(CW\*(C`ABC(A(TERMINAL[a]),B,C(TERMINAL[c]))\*(C'\fR.
.SS "Saving the Information of Syntactic Tokens in their Father"
.IX Subsection "Saving the Information of Syntactic Tokens in their Father"
The reason for the adjective \f(CW%syntactic\fR applied to a token is to 
state that the token influences the shape of the syntax tree
but carries no other information. When the syntax tree is built
the node corresponding to the token is discarded.
.PP
Sometimes the difference between syntactic and semantic 
tokens is blurred. For example the line number associated
with an instance of the syntactic token \f(CW\*(Aq+\*(Aq\fR can be used later
\&\-say during type checking\- to emit a more accurate error
diagnostic. But if the node was discarded the information
about that line number is no longer available.
When building the syntax tree \f(CW\*(C`Parse::Eyapp\*(C'\fR (namely
the method \f(CW\*(C`Parse::Eyapp::YYBuildAST\*(C'\fR) checks 
if the method \f(CW\*(C`TERMINAL::save_attributes\*(C'\fR exists and if so
it will be called when dealing with a \fIsyntactic token\fR. 
The method receives as argument \- additionally
to the reference to the attribute of the token as it
is returned by the lexical analyzer \- a reference
to the node associated with the left hand side of the
production. Here is an example (file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR
in \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR)
of use:
.PP
.Vb 5
\&              sub TERMINAL::save_attributes {
\&                # $_[0] is a syntactic terminal
\&                # $_[1] is the father.
\&                push @{$_[1]\->{lines}}, $_[0]\->[1]; # save the line number
\&              }
.Ve
.ie n .SS "The  ""bypass"" clause and the ""%no bypass"" directive"
.el .SS "The  \f(CWbypass\fP clause and the \f(CW%no bypass\fP directive"
.IX Subsection "The bypass clause and the %no bypass directive"
The shape of the tree can be also modified using some \f(CW%tree\fR clauses
as \f(CW\*(C`%tree bypass\*(C'\fR which will produce an automatic \fIbypass\fR of any
node with only one child at tree-construction-time.
.PP
A \fIbypass operation\fR consists in \fIreturning the only child 
of the node being visited to the father of the node and re-typing (re-blessing)
the node in the name of the production\fR (if a name was provided).
.PP
A node may have only one child at tree-construction-time for one of
two reasons.
.IP "\(bu" 4
The first occurs when the right hand side of the production
was already unary like in:
.Sp
.Vb 2
\&                           exp:
\&                               %name NUM  NUM
.Ve
.Sp
Here \- if the \f(CW\*(C`bypass\*(C'\fR clause is used \- 
the \f(CW\*(C`NUM\*(C'\fR node will be bypassed and the child \f(CW\*(C`TERMINAL\*(C'\fR built
from the information provided by the lexical analyzer will be renamed/reblessed 
as \f(CW\*(C`NUM\*(C'\fR.
.IP "\(bu" 4
Another reason for a node to be \fIbypassed\fR is  the fact that though the right
hand side of the production may have more than one symbol, 
only one of them is not a syntactic token
like in:
.Sp
.Vb 1
\&                           exp: \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.PP
A consequence of the global scope application of \f(CW\*(C`%tree bypass\*(C'\fR
is that undesired bypasses may occur like in
.PP
.Vb 2
\&                           exp : %name UMINUS
\&                                 \*(Aq\-\*(Aq $exp %prec NEG
.Ve
.PP
though the right hand side has two symbols, token \f(CW\*(Aq\-\*(Aq\fR is
a syntactic token and therefore only \f(CW\*(C`exp\*(C'\fR is left. The \fIbypass\fR
operation will be applied when building this node.
This \fIbypass\fR can be avoided applying the \f(CW\*(C`no bypass ID\*(C'\fR directive to the corresponding 
production:
.PP
.Vb 2
\&                           exp : %no bypass UMINUS
\&                                 \*(Aq\-\*(Aq $exp %prec NEG
.Ve
.PP
The following example (file \f(CW\*(C`examples/bypass.pl\*(C'\fR) 
is the equivalent of the Parse::Eyapp \s-1SYNOPSIS\s0 example
but using the \f(CW\*(C`bypass\*(C'\fR clause instead:
.PP
.Vb 2
\& use Parse::Eyapp;
\& use Parse::Eyapp::Treeregexp;
\&
\& sub TERMINAL::info { $_[0]{attr} }
\& { no warnings; *VAR::info = *NUM::info = \e&TERMINAL::info; }
\&
\& my $grammar = q{
\&   %right  \*(Aq=\*(Aq     # Lowest precedence
\&   %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq 
\&   %left   \*(Aq*\*(Aq \*(Aq/\*(Aq 
\&   %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&   %tree bypass    # Let us build an abstract syntax tree ...
\&
\&   %%
\&   line: exp <%name EXPRESSION_LIST + \*(Aq;\*(Aq>  { $_[1] } 
\&   ;
\&
\&   exp:
\&       %name NUM  NUM            | %name VAR   VAR         | %name ASSIGN VAR \*(Aq=\*(Aq exp
\&     | %name PLUS exp \*(Aq+\*(Aq exp    | %name MINUS exp \*(Aq\-\*(Aq exp | %name TIMES  exp \*(Aq*\*(Aq exp
\&     | %name DIV     exp \*(Aq/\*(Aq exp
\&     | %no bypass UMINUS
\&       \*(Aq\-\*(Aq $exp %prec NEG
\&     |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&   ;
\&
\&   %%
\&   # sub _Error, _Lexer and Run like in the synopsis example
\&   # ...
\& }; # end grammar
\&
\& our (@all, $uminus);
\&
\& Parse::Eyapp\->new_grammar( # Create the parser package/class
\&   input=>$grammar,
\&   classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&   firstline=>7       # String $grammar starts at line 7 (for error diagnostics)
\& );
\& my $parser = Calc\->new();                # Create a parser
\& $parser\->YYData\->{INPUT} = "a=2*\-3+b*0\en"; # Set the input
\& my $t = $parser\->Run;                    # Parse it!
\&
\& print "\en************\en".$t\->str."\en************\en";
\&
\& # Let us transform the tree. Define the tree\-regular expressions ..
\& my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&   { #  Example of support code
\&     my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&   }
\&   constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM, NUM)
\&     => {
\&       my $op = $Op{ref($_[0])};
\&       $NUM[0]\->{attr} = eval  "$NUM[0]\->{attr} $op $NUM[1]\->{attr}";
\&       $_[0] = $NUM[0];
\&     }
\&   zero_times_whatever: TIMES(NUM, .) and { $NUM\->{attr} == 0 } => { $_[0] = $NUM }
\&   whatever_times_zero: TIMES(., NUM) and { $NUM\->{attr} == 0 } => { $_[0] = $NUM }
\&   uminus: UMINUS(NUM) => { $NUM\->{attr} = \-$NUM\->{attr}; $_[0] = $NUM }
\&   },
\&   OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\& );
\& $p\->generate(); # Create the tranformations
\&
\& $t\->s(@all);    # constant folding and mult. by zero
\&
\& print $t\->str,"\en";
.Ve
.PP
when running this example with input \f(CW"a=2*\-3+b*0\en"\fR
we obtain the following output:
.PP
.Vb 1
\& nereida:~/src/perl/YappWithDefaultAction/examples> bypass.pl
\&
\& ************
\& EXPRESSION_LIST(ASSIGN(TERMINAL[a],PLUS(TIMES(NUM[2],UMINUS(NUM[3])),TIMES(VAR[b],NUM[0]))))
\& ************
\& EXPRESSION_LIST(ASSIGN(TERMINAL[a],NUM[\-6]))
.Ve
.PP
As you can see the trees are more compact when using the \f(CW\*(C`bypass\*(C'\fR directive.
.ie n .SS "The ""alias"" clause of the %tree directive"
.el .SS "The \f(CWalias\fP clause of the \f(CW%tree\fP directive"
.IX Subsection "The alias clause of the %tree directive"
Access to children in Parse::Eyapp is made through the \f(CW\*(C`child\*(C'\fR and \f(CW\*(C`children\*(C'\fR
methods.
There are occasions however where access by name to the children may be preferable.
The use of the \f(CW\*(C`alias\*(C'\fR clause with the \f(CW%tree\fR directive creates accessors
to the children with names specified by the programmer. The \fIdot and dollar notations\fR
are used for this. When dealing with a production like:
.PP
.Vb 3
\&                       A: 
\&                          %name A_Node
\&                          Node B.bum N.pum $Chip
.Ve
.PP
methods \f(CW\*(C`bum\*(C'\fR, \f(CW\*(C`pum\*(C'\fR and \f(CW\*(C`Chip\*(C'\fR will be created for the class \f(CW\*(C`A_Node\*(C'\fR.
Those methods will provide access to the respective child (first, second and third in
the example). The methods are build at compile-time and therefore later 
transformations of the \s-1AST\s0 modifying the order of the children may 
invalidate the use of these getter-setters.
.PP
The \f(CW%prefix\fR directive used in line 7 of the following example
is equivalent to the use of the \f(CW\*(C`yyprefix\*(C'\fR. The node classes are prefixed
with the specified prefix: \f(CW\*(C`R::S::\*(C'\fR in this example.
.PP
.Vb 10
\& cat \-n alias_and_yyprefix.pl
\&     1  #!/usr/local/bin/perl
\&     2  use warnings;
\&     3  use strict;
\&     4  use Parse::Eyapp;
\&     5
\&     6  my $grammar = q{
\&     7    %prefix R::S::
\&     8
\&     9    %right  \*(Aq=\*(Aq
\&    10    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    11    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    12    %left   NEG
\&    13    %tree bypass alias
\&    14
\&    15    %%
\&    16    line: $exp  { $_[1] }
\&    17    ;
\&    18
\&    19    exp:
\&    20        %name NUM
\&    21              $NUM
\&    22      | %name VAR
\&    23              $VAR
\&    24      | %name ASSIGN
\&    25              $VAR \*(Aq=\*(Aq $exp
\&    26      | %name PLUS
\&    27              exp.left \*(Aq+\*(Aq exp.right
\&    28      | %name MINUS
\&    29              exp.left \*(Aq\-\*(Aq exp.right
\&    30      | %name TIMES
\&    31              exp.left \*(Aq*\*(Aq exp.right
\&    32      | %name DIV
\&    33              exp.left \*(Aq/\*(Aq exp.right
\&    34      | %no bypass UMINUS
\&    35              \*(Aq\-\*(Aq $exp %prec NEG
\&    36      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] } /* Let us simplify a bit the tree */
\&    37    ;
\&    38
\&    39    %%
\&    ..    ....
\&    76  }; # end grammar
\&    77
\&    78
\&    79  Parse::Eyapp\->new_grammar(
\&    80    input=>$grammar,
\&    81    classname=>\*(AqAlias\*(Aq,
\&    82    firstline =>7,
\&    83    outputfile => \*(Aqmain\*(Aq,
\&    84  );
\&    85  my $parser = Alias\->new();
\&    86  $parser\->YYData\->{INPUT} = "a = \-(2*3+5\-1)\en";
\&    87  my $t = $parser\->Run;
\&    88  $Parse::Eyapp::Node::INDENT=0;
\&    89  print $t\->VAR\->str."\en";             # a
\&    90  print "***************\en";
\&    91  print $t\->exp\->exp\->left\->str."\en";  # 2*3+5
\&    92  print "***************\en";
\&    93  print $t\->exp\->exp\->right\->str."\en"; # 1
.Ve
.PP
The tree \f(CW$t\fR for the expression \f(CW"a = \-(2*3+5\-1)\en"\fR is:
.PP
.Vb 9
\&  R::S::ASSIGN(
\&     R::S::TERMINAL,
\&     R::S::UMINUS(
\&       R::S::MINUS(
\&         R::S::PLUS(R::S::TIMES(R::S::NUM,R::S::NUM),R::S::NUM),
\&         R::S::NUM
\&       )
\&     )
\&  )
.Ve
.PP
The \f(CW\*(C`R::S::ASSIGN\*(C'\fR class has methods \f(CW\*(C`VAR\*(C'\fR (see line 89 above)
and \f(CW\*(C`exp\*(C'\fR (see lines 91 and 93) to refer to its two children. 
The result of the execution is:
.PP
.Vb 6
\&  $ alias_and_yyprefix.pl
\&  R::S::TERMINAL
\&  ***************
\&  R::S::PLUS(R::S::TIMES(R::S::NUM,R::S::NUM),R::S::NUM)
\&  ***************
\&  R::S::NUM
.Ve
.PP
As a second example of the use of \f(CW%alias\fR, the \s-1CPAN\s0 module Language::AttributeGrammar provides
\&\s-1AST\s0 decorators from an attribute grammar specification of the \s-1AST.\s0
To work  Language::AttributeGrammar requires named access to the children
of the \s-1AST\s0 nodes. Follows an example (file \f(CW\*(C`examples/CalcwithAttributeGrammar.pl\*(C'\fR)
of a small calculator:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n CalcwithAttributeGrammar.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp;
\&     4  use Data::Dumper;
\&     5  use Language::AttributeGrammar;
\&     6
\&     7  my $grammar = q{
\&     8  %{
\&     9  # use Data::Dumper;
\&    10  %}
\&    11  %right  \*(Aq=\*(Aq
\&    12  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    13  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    14  %left   NEG
\&    15  %tree bypass alias
\&    16
\&    17  %%
\&    18  line: $exp  { $_[1] }
\&    19  ;
\&    20
\&    21  exp:
\&    22      %name NUM
\&    23            $NUM
\&    24          | %name VAR
\&    25            $VAR
\&    26          | %name ASSIGN
\&    27            $VAR \*(Aq=\*(Aq $exp
\&    28          | %name PLUS
\&    29            exp.left \*(Aq+\*(Aq exp.right
\&    30          | %name MINUS
\&    31            exp.left \*(Aq\-\*(Aq exp.right
\&    32          | %name TIMES
\&    33            exp.left \*(Aq*\*(Aq exp.right
\&    34          | %name DIV
\&    35            exp.left \*(Aq/\*(Aq exp.right
\&    36          | %no bypass UMINUS
\&    37            \*(Aq\-\*(Aq $exp %prec NEG
\&    38    |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq  { $_[2] } /* Let us simplify a bit the tree */
\&    39  ;
\&    40
\&    41  %%
\&    42
\&    43  sub _Error {
\&    44          exists $_[0]\->YYData\->{ERRMSG}
\&    45      and do {
\&    46          print $_[0]\->YYData\->{ERRMSG};
\&    47          delete $_[0]\->YYData\->{ERRMSG};
\&    48          return;
\&    49      };
\&    50      print "Syntax error.\en";
\&    51  }
\&    52
\&    53  sub _Lexer {
\&    54      my($parser)=shift;
\&    55
\&    56          $parser\->YYData\->{INPUT}
\&    57      or  $parser\->YYData\->{INPUT} = <STDIN>
\&    58      or  return(\*(Aq\*(Aq,undef);
\&    59
\&    60      $parser\->YYData\->{INPUT}=~s/^\es+//;
\&    61
\&    62      for ($parser\->YYData\->{INPUT}) {
\&    63          s/^([0\-9]+(?:\e.[0\-9]+)?)//
\&    64                  and return(\*(AqNUM\*(Aq,$1);
\&    65          s/^([A\-Za\-z][A\-Za\-z0\-9_]*)//
\&    66                  and return(\*(AqVAR\*(Aq,$1);
\&    67          s/^(.)//s
\&    68                  and return($1,$1);
\&    69      }
\&    70  }
\&    71
\&    72  sub Run {
\&    73      my($self)=shift;
\&    74      $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&    75                      #yydebug =>0xFF
\&    76                    );
\&    77  }
\&    78  }; # end grammar
\&    79
\&    80
\&    81  $Data::Dumper::Indent = 1;
\&    82  Parse::Eyapp\->new_grammar(
\&    83    input=>$grammar,
\&    84    classname=>\*(AqRule6\*(Aq,
\&    85    firstline =>7,
\&    86    outputfile => \*(AqCalc.pm\*(Aq,
\&    87  );
\&    88  my $parser = Rule6\->new();
\&    89  $parser\->YYData\->{INPUT} = "a = \-(2*3+5\-1)\en";
\&    90  my $t = $parser\->Run;
\&    91  print "\en***** Before ******\en";
\&    92  print Dumper($t);
\&    93
\&    94  my $attgram = new Language::AttributeGrammar <<\*(AqEOG\*(Aq;
\&    95
\&    96  # Compute the expression
\&    97  NUM:    $/.val = { $<attr> }
\&    98  TIMES:  $/.val = { $<left>.val * $<right>.val }
\&    99  PLUS:   $/.val = { $<left>.val + $<right>.val }
\&   100  MINUS:  $/.val = { $<left>.val \- $<right>.val }
\&   101  UMINUS: $/.val = { \-$<exp>.val }
\&   102  ASSIGN: $/.val = { $<exp>.val }
\&   103  EOG
\&   104
\&   105  my $res = $attgram\->apply($t, \*(Aqval\*(Aq);
\&   106
\&   107  $Data::Dumper::Indent = 1;
\&   108  print "\en***** After ******\en";
\&   109  print Dumper($t);
\&   110  print Dumper($res);
\&
\& CalcwithAttributeGrammar.pl
.Ve
.PP
The program computes the tree for expression for expression
\&\f(CW\*(C`a = \-(2*3+5\-1)\*(C'\fR which is:
.PP
.Vb 1
\&  ASSIGN(TERMINAL,UMINUS(MINUS(PLUS(TIMES(NUM,NUM),NUM),NUM)))
.Ve
.PP
The children of the binary nodes can be accessed through the \f(CW\*(C`left\*(C'\fR
and \f(CW\*(C`right\*(C'\fR methods.
.SS "About the Encapsulation of Nodes"
.IX Subsection "About the Encapsulation of Nodes"
There is no encapsulation of nodes. The user/client 
knows that they are hashes that can be decorated with new keys/attributes.
All nodes in the \s-1AST\s0 created by \f(CW%tree\fR are \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes.
The only reserved field is \f(CW\*(C`children\*(C'\fR which is a reference to the
array of children. You can always create a \f(CW\*(C`Node\*(C'\fR class 
\&\fIby hand\fR by inheriting from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR.
.SH "SOLVING CONFLICTS WITH THE \fIPOSTPONED CONFLICT\fP STRATEGY"
.IX Header "SOLVING CONFLICTS WITH THE POSTPONED CONFLICT STRATEGY"
Yacc-like parser generators provide ways to solve shift-reduce mechanims
based on token precedence. No mechanisms are provided for the resolution
of reduce-reduce conflicts. The solution for such kind of conflicts is to modify
the grammar. The strategy We present here provides a way to broach conflicts
that can't be solved using static precedences.
.SS "The \fIPostponed Conflict Resolution\fP Strategy"
.IX Subsection "The Postponed Conflict Resolution Strategy"
The \fIpostponed conflict strategy\fR presented here can be used whenever there 
is a shift-reduce or reduce-reduce conflict that can not be solved using static 
precedences.
.SS "\fIPostponed Conflict Resolution\fP: Reduce-Reduce Conflicts"
.IX Subsection "Postponed Conflict Resolution: Reduce-Reduce Conflicts"
Let us assume we have a reduce-reduce conflict between to productions
.PP
.Vb 2
\&                      A \-> alpha .
\&                      B \-> beta .
.Ve
.PP
for some token \f(CW\*(C`@\*(C'\fR. Let also assume that production
.PP
.Vb 1
\&                      A \-> alpha
.Ve
.PP
has name \f(CW\*(C`ruleA\*(C'\fR and production
.PP
.Vb 1
\&                      B \-> beta
.Ve
.PP
has name \f(CW\*(C`ruleB\*(C'\fR.
.PP
The postponed conflict resolution strategy consists
in modifying the conflictive grammar by marking the points where the  conflict occurs
with the new \f(CW%PREC\fR directive. In this case at then end of the involved productions:
.PP
.Vb 2
\&                      A \-> alpha %PREC IsAorB 
\&                      B \-> beta  $PREC IsAorB
.Ve
.PP
The \f(CW\*(C`IsAorB\*(C'\fR identifier is called the \fIconflict name\fR.
.PP
Inside the head section, the programmer associates with the 
conflict name a code
whose mission is to solve the conflict by dynamically changing the
parsing table like this:
.PP
.Vb 2
\&                     %conflict IsAorB {
\&                          my $self = shift;
\&
\&                          if (looks_like_A($self)) {
\&                            $self\->YYSetReduce(\*(Aq@\*(Aq, \*(AqruleA\*(Aq );
\&                          }
\&                          else {
\&                            $self\->YYSetReduce(\*(Aq@\*(Aq, \*(AqruleB\*(Aq );
\&                          }
\&                       }
.Ve
.PP
The code associated with the \fIconflict name\fR
receives the name of \fI conflict handler\fR.
The code of \f(CW\*(C`looks_like_A\*(C'\fR stands for some form of nested parsing
which will decide which production applies.
.SS "Solving the Enumerated versus Range declarations conflict using the Posponed Conflict Resolution Strategy"
.IX Subsection "Solving the Enumerated versus Range declarations conflict using the Posponed Conflict Resolution Strategy"
In file \f(CW\*(C`pascalenumeratedvsrangesolvedviadyn.eyp\*(C'\fR we apply the postponed conflict resolution strategy
to the reduce reduce conflict that arises in Extended Pascal between the declaration of ranges and
the declaration of enumerated types (see section \*(L"Reduce-Reduce conflict: Enumerated versus Range declarations in Extended Pascal\*(R").
Here is the solution:
.PP
.Vb 10
\&  ~/LEyapp/examples/debuggingtut$ cat \-n pascalenumeratedvsrangesolvedviadyn.eyp
\&     1  %{
\&     2  =head1 SYNOPSIS
\&     3  
\&     4  See 
\&     5  
\&     6  =over 2
\&     7  
\&     8  =item * File pascalenumeratedvsrange.eyp in examples/debuggintut/
\&     9  
\&    10  =item * The Bison manual L<http://www.gnu.org/software/bison/manual/html_mono/bison.html>
\&    11  
\&    12  =back
\&    13  
\&    14  Compile it with:
\&    15  
\&    16              eyapp \-b \*(Aq\*(Aq pascalenumeratedvsrangesolvedviadyn.eyp
\&    17  
\&    18  run it with this options:
\&    19  
\&    20              ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&    21  
\&    22  Try these inputs:
\&    23  
\&    24                  type r = (x) ..  y ;
\&    25                  type r = (x+2)*3 ..  y/2 ;
\&    26                  type e = (x, y, z);
\&    27                  type e = (x);
\&    28  
\&    29  =cut
\&    30  
\&    31  use base q{DebugTail}; 
\&    32  
\&    33  my $ID = qr{[A\-Za\-z][A\-Za\-z0\-9_]*};
\&    34               # Identifiers separated by commas
\&    35  my $IDLIST = qr{ \es*(?:\es*,\es* $ID)* \es* }x;
\&    36               # list followed by a closing par and a semicolon 
\&    37  my $RESTOFLIST = qr{$IDLIST \e) \es* ; }x;
\&    38  %}
\&    39  
\&    40  %namingscheme {
\&    41    #Receives a Parse::Eyapp object describing the grammar
\&    42    my $self = shift;
\&    43  
\&    44    $self\->tokennames(
\&    45      \*(Aq(\*(Aq => \*(AqLP\*(Aq,
\&    46      \*(Aq..\*(Aq => \*(AqDOTDOT\*(Aq,
\&    47      \*(Aq,\*(Aq => \*(AqCOMMA\*(Aq,
\&    48      \*(Aq)\*(Aq => \*(AqRP\*(Aq,
\&    49      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    50      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    51      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    52      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    53    );
\&    54  
\&    55    # returns the handler that will give names
\&    56    # to the right hand sides
\&    57    \e&give_rhs_name;
\&    58  }
\&    59  
\&    60  %strict
\&    61  
\&    62  %token ID NUM DOTDOT TYPE
\&    63  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    64  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    65  
\&    66  %tree
\&    67  
\&    68  %%
\&    69  
\&    70  type_decl : TYPE ID \*(Aq=\*(Aq type \*(Aq;\*(Aq
\&    71  ;
\&    72  
\&    73  type : 
\&    74        %name ENUM
\&    75        \*(Aq(\*(Aq id_list \*(Aq)\*(Aq
\&    76      | %name RANGE
\&    77        expr DOTDOT expr
\&    78  ;
\&    79  
\&    80  id_list : 
\&    81        %name EnumID
\&    82        ID rangeORenum
\&    83      | id_list \*(Aq,\*(Aq ID
\&    84  ;
\&    85  
\&    86  expr : \*(Aq(\*(Aq expr \*(Aq)\*(Aq
\&    87      | expr \*(Aq+\*(Aq expr
\&    88      | expr \*(Aq\-\*(Aq expr
\&    89      | expr \*(Aq*\*(Aq expr
\&    90      | expr \*(Aq/\*(Aq expr
\&    91      | %name RangeID
\&    92        ID rangeORenum
\&    93      | NUM
\&    94  ;
\&    95  
\&    96  rangeORenum: /* empty: postponed conflict resolution */
\&    97        {
\&    98            my $parser = shift;
\&    99            if (${$parser\->input()} =~ m{\eG(?= $RESTOFLIST)}gcx) {
\&   100                $parser\->YYSetReduce(\*(Aq)\*(Aq, \*(AqEnumID\*(Aq );
\&   101              }
\&   102              else {
\&   103                $parser\->YYSetReduce(\*(Aq)\*(Aq, \*(AqRangeID\*(Aq );
\&   104              }
\&   105        }
\&   106  ;
\&   107  
\&   108  %%
\&   109  
\&   110  _\|_PACKAGE_\|_\->lexer(
\&   111    sub {
\&   112      my $parser = shift;
\&   113  
\&   114      for (${$parser\->input()}) {    # contextualize
\&   115        m{\eG(\es*)}gc;
\&   116        $parser\->tokenline($1 =~ tr{\en}{});
\&   117  
\&   118        m{\eGtype\eb}gic                 and return (\*(AqTYPE\*(Aq, \*(AqTYPE\*(Aq);
\&   119  
\&   120        m{\eG($ID)}gc                   and return (\*(AqID\*(Aq,  $1);
\&   121  
\&   122        m{\eG([0\-9]+)}gc                and return (\*(AqNUM\*(Aq, $1);
\&   123  
\&   124        m{\eG\e.\e.}gc                    and return (\*(AqDOTDOT\*(Aq,  \*(Aq..\*(Aq);
\&   125  
\&   126        m{\eG(.)}gc                     and return ($1,    $1);
\&   127  
\&   128        return(\*(Aq\*(Aq,undef);
\&   129      }
\&   130    }
\&   131  );
\&   132  
\&   133  unless (caller()) {
\&   134    $Parse::Eyapp::Node::INDENT = 1;
\&   135    my $prompt = << \*(AqEOP\*(Aq;
\&   136  Try this input:
\&   137      type 
\&   138      r
\&   139      =
\&   140      (x)
\&   141      ..
\&   142      y
\&   143      ;
\&   144  
\&   145  Here other inputs you can try:
\&   146  
\&   147      type r = (x+2)*3 ..  y/2 ;
\&   148      type e = (x, y, z);
\&   149      type e = (x);
\&   150  
\&   151  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&   152  EOP
\&   153    _\|_PACKAGE_\|_\->main($prompt); 
\&   154  }
.Ve
.PP
This example also illustrates how to modify the default production
naming schema. Follows the result of several executions:
.PP
.Vb 9
\&  ~/LEyapp/examples/debuggingtut$ ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&  Try this input:
\&      type 
\&      r
\&      =
\&      (x)
\&      ..
\&      y
\&      ;
\&
\&  Here other inputs you can try:
\&
\&      type r = (x+2)*3 ..  y/2 ;
\&      type e = (x, y, z);
\&      type e = (x);
\&
\&  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&  type r = (x+2)*3 ..  y/2 ;
\&  ^D
\&  type_decl_is_TYPE_ID_type(
\&    TERMINAL[TYPE],
\&    TERMINAL[r],
\&    RANGE(
\&      expr_is_expr_TIMES_expr(
\&        expr_is_LP_expr_RP(
\&          expr_is_expr_PLUS_expr(
\&            RangeID(
\&              TERMINAL[x]
\&            ),
\&            expr_is_NUM(
\&              TERMINAL[2]
\&            )
\&          )
\&        ),
\&        expr_is_NUM(
\&          TERMINAL[3]
\&        )
\&      ),
\&      TERMINAL[..],
\&      expr_is_expr_DIV_expr(
\&        RangeID(
\&          TERMINAL[y]
\&        ),
\&        expr_is_NUM(
\&          TERMINAL[2]
\&        )
\&      )
\&    )
\&  )
\&  ~/LEyapp/examples/debuggingtut$ ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&  Try this input:
\&      type 
\&      r
\&      =
\&      (x)
\&      ..
\&      y
\&      ;
\&
\&  Here other inputs you can try:
\&
\&      type r = (x+2)*3 ..  y/2 ;
\&      type e = (x, y, z);
\&      type e = (x);
\&
\&  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&  type e = (x);
\&  ^D
\&  type_decl_is_TYPE_ID_type(
\&    TERMINAL[TYPE],
\&    TERMINAL[e],
\&    ENUM(
\&      EnumID(
\&        TERMINAL[x]
\&      )
\&    )
\&  )
.Ve
.SS "\fIPostponed Conflict Resolution\fP: Shift-Reduce Conflicts"
.IX Subsection "Postponed Conflict Resolution: Shift-Reduce Conflicts"
The program in \f(CW\*(C`examples/debuggingtut/DynamicallyChangingTheParser2.eyp\*(C'\fR illustrates how the postponed
conflict strategy is used for shift-reduce conflicts.
This is an extension of the grammar in \f(CW\*(C`examples/debuggingtut/Debug.eyp\*(C'\fR.
The generated language is constituted by sequences like:
.PP
.Vb 1
\&    { D; D; S; S; S; } {D; S} { S }
.Ve
.PP
As you remember the conflict was:
.PP
.Vb 2
\&  ~/LEyapp/examples/debuggingtut$ sed \-ne \*(Aq/^St.*13:/,/^St.*14/p\*(Aq DynamicallyChangingTheParser.output  
\&  State 13:
\&
\&      ds \-> D conflict . \*(Aq;\*(Aq ds   (Rule 6)
\&      ds \-> D conflict .  (Rule 7)
\&
\&      \*(Aq;\*(Aq shift, and go to state 16
\&
\&      \*(Aq;\*(Aq [reduce using rule 7 (ds)]
\&
\&  State 14:
.Ve
.PP
The \f(CW\*(C`conflict\*(C'\fR handler below sets the \s-1LR\s0 action
to reduce by the production with name \f(CW\*(C`D1\*(C'\fR
.PP
.Vb 1
\&                 ds \-> D
.Ve
.PP
in the presence of token \f(CW\*(Aq;\*(Aq\fR if indeed is the last \f(CW\*(AqD\*(Aq\fR, that is, if:
.PP
.Vb 1
\&       ${$self\->input()} =~ m{^\es*;\es*S}
.Ve
.PP
Otherwise we set the \f(CW\*(C`shift\*(C'\fR action via a call to the 
\&\f(CW\*(C`YYSetShift\*(C'\fR method.
.PP
.Vb 10
\&  ~/LEyapp/examples/debuggingtut$ sed \-ne \*(Aq30,$p\*(Aq DynamicallyChangingTheParser.eyp | cat \-n
\&     1  %token D S
\&     2  
\&     3  %tree bypass
\&     4  
\&     5  # Expect just 1 shift\-reduce conflict
\&     6  %expect 1 
\&     7  
\&     8  %%
\&     9  p: %name PROG
\&    10      block +
\&    11  ;
\&    12  
\&    13  block:
\&    14      %name BLOCK_DS
\&    15      \*(Aq{\*(Aq ds \*(Aq;\*(Aq ss \*(Aq}\*(Aq 
\&    16    | %name BLOCK_S
\&    17      \*(Aq{\*(Aq ss \*(Aq}\*(Aq
\&    18  ;
\&    19  
\&    20  ds:
\&    21      %name D2
\&    22      D conflict \*(Aq;\*(Aq ds    
\&    23    | %name D1
\&    24      D conflict        
\&    25  ;
\&    26  
\&    27  ss:
\&    28      %name S2
\&    29      S \*(Aq;\*(Aq ss      
\&    30    | %name S1
\&    31      S       
\&    32  ;
\&    33  
\&    34  conflict:
\&    35        /* empty. This action solves the conflict using dynamic precedence */
\&    36        {
\&    37          my $self = shift;
\&    38  
\&    39          if (${$self\->input()} =~ m{^\es*;\es*S}) {
\&    40            $self\->YYSetReduce(\*(Aq;\*(Aq, \*(AqD1\*(Aq )
\&    41          }
\&    42          else {
\&    43            $self\->YYSetShift(\*(Aq;\*(Aq)
\&    44          }
\&    45  
\&    46          undef; # skip this node in the AST
\&    47        }
\&    48  ;
\&    49  
\&    50  %%
\&    51  
\&    52  my $prompt = \*(AqProvide a statement like "{D; S} {D; D; S}" and press <CR><CTRL\-D>: \*(Aq;
\&    53  _\|_PACKAGE_\|_\->main($prompt) unless caller;
.Ve
.SH "NAMING SCHEMES"
.IX Header "NAMING SCHEMES"
Explicit names can be given to grammar productions
via the \f(CW%name\fR directive. An alternative to explicitly gave 
names to rules is to define a \fInaming scheme\fR via the Eyapp directive
\&\f(CW%namingscheme\fR. This can be helpful when you inherit a large grammar
and want to quickly build a parser. The \s-1ANSI C\s0 parser in 
\&\f(CW\*(C`examples/languages/C/ansic.eyp\*(C'\fR is a good example. Another
example is the Pascal parser in \f(CW\*(C`examples/languages/pascal/pascal.eyp\*(C'\fR.
.PP
The Eyapp directive \f(CW%namingscheme\fR is followed by some Perl code. Such Perl
code must return a reference to a subroutine that will be called each time a new
production right hand side is parsed. The subroutine returns the name for the production.
.PP
The Perl code defining the handler receives a \f(CW\*(C`Parse::Eyapp\*(C'\fR object
that describes the grammar. The code after the \f(CW%namingscheme\fR
directive is evaluated during the early phases of the compilation of the input 
grammar. As an example of how to set a naming scheme, 
see lines 22\-38 below (you can find this example and others in the directory
\&\f(CW\*(C`examples/naming\*(C'\fR of the accompanying distribution):
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ cat \-n GiveNamesToCalc.eyp
\&     1  # GiveNamesToCalc.eyp
\&     2  %right  \*(Aq=\*(Aq
\&     3  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     4  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     5  %left   NEG
\&     6  %right  \*(Aq^\*(Aq
\&     7
\&     8  %tree bypass
\&     9
\&    10  %{
\&    11  use base q{Tail};
\&    12
\&    13  sub exp_is_NUM::info {
\&    14    my $self = shift;
\&    15
\&    16    $self\->{attr}[0];
\&    17  }
\&    18
\&    19  *exp_is_VAR::info = *var_is_VAR::info = \e&exp_is_NUM::info;
\&    20  %}
\&    21
\&    22  %namingscheme {
\&    23    #Receives a Parse::Eyapp object describing the grammar
\&    24    my $self = shift;
\&    25
\&    26    $self\->tokennames(
\&    27      \*(Aq=\*(Aq => \*(AqASSIGN\*(Aq,
\&    28      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    29      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    30      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    31      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    32      \*(Aq^\*(Aq => \*(AqEXP\*(Aq,
\&    33    );
\&    34
\&    35    # returns the handler that will give names
\&    36    # to the right hand sides
\&    37    \e&give_token_name;
\&    38  }
\&    39  %%
\&    40
\&    41  line:
\&    42      exp
\&    43  ;
\&    44
\&    45  exp:
\&    46      NUM
\&    47    | VAR
\&    48    | var \*(Aq=\*(Aq exp
\&    49    | exp \*(Aq+\*(Aq exp
\&    50    | exp \*(Aq\-\*(Aq exp
\&    51    | exp \*(Aq*\*(Aq exp
\&    52    | exp \*(Aq/\*(Aq exp
\&    53    | %no bypass exp_is_NEG
\&    54       \*(Aq\-\*(Aq exp %prec NEG
\&    55    | exp \*(Aq^\*(Aq exp
\&    56    | \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    57  ;
\&    58
\&    59  var:
\&    60      VAR
\&    61  ;
\&    62  %%
\&    63
\&    64  unless (caller) {
\&    65    my $t = _\|_PACKAGE_\|_\->main(@ARGV);
\&    66    print $t\->str."\en";
\&    67  }
.Ve
.PP
The example uses a naming scheme that is provided by \f(CW\*(C`Parse::Eyapp\*(C'\fR: \f(CW\*(C`Parse::Eyapp::Grammar::give_token_name\*(C'\fR.
The current provided naming schemes handlers are:
.IP "\(bu" 2
\&\f(CW\*(C`give_default_name\*(C'\fR: The name of the production is the name of the Left Hand Side of the Production Rule
concatenated with an underscore and the index of the production
.IP "\(bu" 2
\&\f(CW\*(C`give_lhs_name\*(C'\fR: The name of the production is the name of the Left Hand Side of the Production Rule (this
is the naming scheme used by the \f(CW%tree\fR directive when no explicit name was given)
.IP "\(bu" 2
\&\f(CW\*(C`give_token_name\*(C'\fR: The name of the production is the Left Hand Side of the Production Rule followed by the 
word \f(CW\*(C`_is_\*(C'\fR followed by the concatenation of the names of the tokens in the right and side (separated by underscores).
.PP
All of these handlers are implemented inside the class \f(CW\*(C`Parse::Eyapp::Grammar\*(C'\fR. There is no need at line 
37 to explicit the class name prefix since the naming scheme code is evaluated inside such class:
.PP
.Vb 10
\&    22  %namingscheme {
\&    23    #Receives a Parse::Eyapp object describing the grammar
\&    24    my $self = shift;
\&    25
\&    26    $self\->tokennames(
\&    27      \*(Aq=\*(Aq => \*(AqASSIGN\*(Aq,
\&    28      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    29      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    30      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    31      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    32      \*(Aq^\*(Aq => \*(AqEXP\*(Aq,
\&    33    );
\&    34
\&    35    # returns the handler that will give names
\&    36    # to the right hand sides
\&    37    \e&give_token_name;
\&    38  }
.Ve
.PP
As it is illustrated in this example, the method \f(CW\*(C`tokennames\*(C'\fR of \f(CW\*(C`Parse::Eyapp\*(C'\fR
objects provide a way to give identifier names to tokens that are defined by strings.
When we execute the former module/program (modulino) with input \f(CW\*(C`a=2*\-3\*(C'\fR we got the following
output:
.PP
.Vb 5
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ eyapp \-b \*(Aq\*(Aq GiveNamesToCalc.eyp
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ ./GiveNamesToCalc.pm
\&  Expressions. Press CTRL\-D (Unix) or CTRL\-Z (Windows) to finish:
\&  a=2*\-3
\&  line_is_exp(var_is_VAR[a],exp_is_TIMES(exp_is_NUM[2],exp_is_NEG(exp_is_NUM[3])))
.Ve
.PP
For each production rule the handler is called with arguments:
.IP "\(bu" 2
the \f(CW\*(C`Parse::Eyapp\*(C'\fR object,
.IP "\(bu" 2
the production index (inside the grammar),
.IP "\(bu" 2
the left hand side
symbol and a reference to a list with the symbols in the right hand side.
.PP
The following code of some version of \f(CW\*(C`give_token_name\*(C'\fR exemplifies how a
naming scheme handler can be written:
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp$ sed \-ne \*(Aq101,132p\*(Aq lib/Parse/Eyapp/Grammar.pm | cat \-n
\&     1  sub give_token_name {
\&     2    my ($self, $index, $lhs, $rhs) = @_;
\&     3
\&     4    my @rhs = @$rhs;
\&     5    $rhs = \*(Aq\*(Aq;
\&     6
\&     7    unless (@rhs) { # Empty RHS
\&     8      return $lhs.\*(Aq_is_empty\*(Aq;
\&     9    }
\&    10
\&    11    my $names = $self\->{GRAMMAR}{TOKENNAMES} || {};
\&    12    for (@rhs) {
\&    13      if ($self\->is_token($_)) {
\&    14        s/^\*(Aq(.*)\*(Aq$/$1/;
\&    15        my $name = $names\->{$_} || \*(Aq\*(Aq;
\&    16        unless ($name) {
\&    17          $name = $_ if /^\ew+$/;
\&    18        }
\&    19        $rhs .= "_$name" if $name;
\&    20      }
\&    21    }
\&    22
\&    23    unless ($rhs) { # no \*(Aqword\*(Aq tokens in the RHS
\&    24      for (@rhs) {
\&    25        $rhs .= "_$_" if /^\ew+$/;
\&    26      }
\&    27    }
\&    28
\&    29    # check if another production with such name exists?
\&    30    my $name = $lhs.\*(Aq_is\*(Aq.$rhs;
\&    31    return $name;
\&    32  }
.Ve
.ie n .SH """Parse::Eyapp"" METHODS"
.el .SH "\f(CWParse::Eyapp\fP METHODS"
.IX Header "Parse::Eyapp METHODS"
A \f(CW\*(C`Parse::Eyapp\*(C'\fR object holds the information 
about the \f(CW\*(C`Eyapp\*(C'\fR input grammar: parsing tables,
conflicts, semantic actions, etc.
.SS "Parse::Eyapp\->new_grammar"
.IX Subsection "Parse::Eyapp->new_grammar"
To translate an Eyapp grammar you must use
either the eyapp script or call the class constructor 
\&\f(CW\*(C`new_grammar\*(C'\fR.
The \f(CW\*(C`Parse::Eyapp\*(C'\fR method \f(CW\*(C`Parse::Eyapp\->new_grammar(input=>$grammar)\*(C'\fR 
creates a package containing the code that implements a \s-1LALR\s0 parser
for the input grammar:
.PP
.Vb 8
\&    my $p = Parse::Eyapp\->new_grammar(
\&      input=>$translationscheme,
\&      classname=>\*(AqGrammar\*(Aq,
\&      firstline => 6,
\&      outputfile => \*(Aqmain\*(Aq
\&    );
\&    die $p\->Warnings if $p\->Warnings;
\&    my $new_parser_for_grammar = Grammar\->new();
.Ve
.PP
The method returns a \f(CW\*(C`Parse::Eyapp\*(C'\fR object.
.PP
You can check the object to see if there were
problems during the construction of the parser
for your grammar:
.PP
.Vb 1
\&                die $p\->qtables() if $p\->Warnings;
.Ve
.PP
The method \f(CW\*(C`Warnings\*(C'\fR returns
the warnings produced during the parsing. The absence of warnings indicates
the correctness of the input program.
.PP
The call to \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR generates
a class/package containing the parser for
your input grammar. Such package lives in the namespace 
determined by the \f(CW\*(C`classname\*(C'\fR argument
of \f(CW\*(C`new_grammar\*(C'\fR. To create a parser for the 
grammar you call the constructor \f(CW\*(C`new\*(C'\fR of
the just created class:
.PP
.Vb 1
\&    my $new_parser_for_grammar = Grammar\->new();
.Ve
.PP
The meaning of the arguments of  \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR 
is:
.IP "\-   input" 4
.IX Item "- input"
The string containing the input
.IP "\-   classname" 4
.IX Item "- classname"
The name of the package that will held the code for the \s-1LALR\s0 parser.
The package of the caller will be used as default if none is specified.
.IP "\-   firstline" 4
.IX Item "- firstline"
For error diagnostics. The line where the definition of the Eyapp
grammar starts.
.IP "\-   linenumbers" 4
.IX Item "- linenumbers"
Include/not include  \f(CW\*(C`# line directives\*(C'\fR in the generated code
.IP "\-   outputfile" 4
.IX Item "- outputfile"
If defined the generated code fill be dumped in the specified filename (with extension .pm)
and the \s-1LALR\s0 information ambiguities and conflicts) in the specified filename 
with extension .output.
.ie n .SS "$eyapp\->qtables"
.el .SS "\f(CW$eyapp\fP\->qtables"
.IX Subsection "$eyapp->qtables"
Returns a string containing information
on warnings, ambiguities, conflicts, rules and the generated \s-1DFA\s0 tables.
Is the same information in \f(CW\*(C`file.output\*(C'\fR when using the command 
\&\f(CW\*(C`eyapp \-v file.eyp\*(C'\fR.
.PP
.Vb 6
\&  my $p = Parse::Eyapp\->new_grammar(
\&    input=>$eyappprogram,
\&    classname=>\*(AqSimpleC\*(Aq,
\&    outputfile => \*(AqSimpleC.pm\*(Aq,
\&    firstline=>12,
\&  );
\&
\&  print $p\->qtables() if $p\->Warnings;
.Ve
.ie n .SS "$eyapp\->outputtables"
.el .SS "\f(CW$eyapp\fP\->outputtables"
.IX Subsection "$eyapp->outputtables"
It receives two arguments
.PP
.Vb 1
\&  $eyapp\->outputtables($path, $base)
.Ve
.PP
Similar to \f(CW\*(C`qtables\*(C'\fR but prints 
the information on warnings, conflicts and rules
to the specified \f(CW\*(C`$path/$base\*(C'\fR.
.ie n .SS "$eyapp\->Warnings"
.el .SS "\f(CW$eyapp\fP\->Warnings"
.IX Subsection "$eyapp->Warnings"
Returns the warnings resulting from compiling the grammar:
.PP
.Vb 7
\&  my $p = Parse::Eyapp\->new_grammar(
\&    input=>$translationscheme,
\&    classname=>\*(Aqmain\*(Aq,
\&    firstline => 6,
\&    outputfile => \*(Aqmain\*(Aq
\&  );
\&  die $p\->Warnings if $p\->Warnings;
.Ve
.PP
Returns the empty string if there were no conflicts.
.ie n .SS "$eyapp\->ShowDfa"
.el .SS "\f(CW$eyapp\fP\->ShowDfa"
.IX Subsection "$eyapp->ShowDfa"
Returns a string with the information about the \s-1LALR\s0 generated
\&\s-1DFA.\s0
.ie n .SS "$eyapp\->Summary"
.el .SS "\f(CW$eyapp\fP\->Summary"
.IX Subsection "$eyapp->Summary"
Returns a string with summary information about the compilation
of the grammar. No arguments.
.ie n .SS "$eyapp\->Conflicts"
.el .SS "\f(CW$eyapp\fP\->Conflicts"
.IX Subsection "$eyapp->Conflicts"
Returns a string with summary information about the conflicts
that arose when compiling the grammar. No arguments.
.ie n .SS "$eyapp\->DfaTable"
.el .SS "\f(CW$eyapp\fP\->DfaTable"
.IX Subsection "$eyapp->DfaTable"
Returns a string with the parsing tables
.ie n .SS "$eyapp\->tokennames"
.el .SS "\f(CW$eyapp\fP\->tokennames"
.IX Subsection "$eyapp->tokennames"
Used when defining a naming scheme
to associate identifiers with (usually string) tokens.
See section \s-1NAMING SCHEMES\s0 of Parse::Eyapp
.ie n .SH "METHODS AVAILABLE IN THE GENERATED ""CLASS"""
.el .SH "METHODS AVAILABLE IN THE GENERATED \f(CWCLASS\fP"
.IX Header "METHODS AVAILABLE IN THE GENERATED CLASS"
See the documentation for Parse::Eyapp::Driver
.ie n .SH """Parse::Eyapp::Parse"" OBJECTS"
.el .SH "\f(CWParse::Eyapp::Parse\fP OBJECTS"
.IX Header "Parse::Eyapp::Parse OBJECTS"
The parser for the \f(CW\*(C`Eyapp\*(C'\fR language
was written and generated
using \f(CW\*(C`Parse::Eyapp\*(C'\fR and the \f(CW\*(C`eyapp\*(C'\fR compiler (actually
the first version 
was bootstrapped using the yapp compiler).
The Eyapp program parsing the \f(CW\*(C`Eyapp\*(C'\fR language
is in the file \f(CW\*(C`Parse/Eyapp/Parse.yp\*(C'\fR 
in the \f(CW\*(C`Parse::Eyapp\*(C'\fR distribution.
Therefore \f(CW\*(C`Parse::Eyapp::Parse\*(C'\fR 
objects have all the methods in \f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR.
.PP
A \f(CW\*(C`Parse::Eyapp::Parse\*(C'\fR is nothing but a particular kind of \f(CW\*(C`Parse::Eyapp\*(C'\fR
parser: \fIthe one that parses\fR \f(CW\*(C`Eyapp\*(C'\fR \fIgrammars\fR.
.ie n .SH "TRANSLATION SCHEMES AND THE %metatree DIRECTIVE"
.el .SH "TRANSLATION SCHEMES AND THE \f(CW%metatree\fP DIRECTIVE"
.IX Header "TRANSLATION SCHEMES AND THE %metatree DIRECTIVE"
See the documentation for Parse::Eyapp::translationschemestut
.SH "THE TREEREGEXP LANGUAGE"
.IX Header "THE TREEREGEXP LANGUAGE"
See the documentation for Parse::Eyapp::Treeregexp
.SH "MANIPULATING ABSTRACT SYNTAX TREES"
.IX Header "MANIPULATING ABSTRACT SYNTAX TREES"
See the documentation for Parse::Eyapp::Node
.SH "TREE TRANSFORMATION OBJECTS"
.IX Header "TREE TRANSFORMATION OBJECTS"
See the documentation for Parse::Eyapp::YATW
.ie n .SH "COMPILING WITH ""eyapp"" AND ""treereg"""
.el .SH "COMPILING WITH \f(CWeyapp\fP AND \f(CWtreereg\fP"
.IX Header "COMPILING WITH eyapp AND treereg"
A Treeregexp program can be isolated in a file
an compiled with the program \f(CW\*(C`treereg\*(C'\fR.
The default extension is \f(CW\*(C`.trg\*(C'\fR.
See the following example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/Eyapp$ cat \-n Shift.trg
\&     1  # File: Shift.trg
\&     2  {
\&     3  =head1 SYNOPSIS
\&     4
\&     5  Compile the grammar and tree transformations first:
\&     6
\&     7       $ eyapp Rule5
\&     8       $ treereg Shift
\&     9
\&    10  Then execute it with:
\&    11
\&    12       $ ./useruleandshift.pl
\&    13
\&    14  Try input:
\&    15
\&    16       a = b * 8
\&    17
\&    18  =cut
\&    19  }
\&    20
\&    21  {
\&    22    sub log2 {
\&    23      my $n = shift;
\&    24      return log($n)/log(2);
\&    25    }
\&    26
\&    27    my $power;
\&    28  }
\&    29  mult2shift: TIMES($e, NUM($m))
\&    30    and { $power = log2($m\->{attr}); (1 << $power) == $m\->{attr} } => {
\&    31      $_[0]\->delete(1);
\&    32      $_[0]\->{shift} = $power;
\&    33      $_[0]\->type(\*(AqSHIFTLEFT\*(Aq);
\&    34    }
.Ve
.PP
Note that auxiliary support code can be inserted at any point
between transformations (lines 21\-28). The code will be inserted (without 
the defining curly brackets) at that point. Note also
that the lexical variable \f(CW$power\fR is visible
inside the definition of the \f(CW\*(C`mult2shift\*(C'\fR transformation.
.PP
A treeregexp like \f(CW$e\fR matches any node (line 29). A reference to the node
is saved in the lexical variable \f(CW$e\fR. The scope of the variable
\&\f(CW$e\fR is the current tree transformation, i.e. \f(CW\*(C`mult2shift\*(C'\fR.
Such kind of treeregexps are called \fBscalar treeregexp\fRs.
.PP
The call to the \f(CW\*(C`delete\*(C'\fR method at line 31 deletes 
the second child of the node being visited (i.e. \f(CW\*(C`NUM($m)\*(C'\fR).
.PP
The call to \f(CW\*(C`type\*(C'\fR at line 33 retypes the node
as a \f(CW\*(C`SHIFTLEFT\*(C'\fR node.
.PP
The program is compiled using the script \f(CW\*(C`treereg\*(C'\fR:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/Eyapp$ eyapp Rule5
\&  pl@nereida:~/LEyapp/examples/Eyapp$ treereg Shift
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ls \-ltr | tail \-2
\&  \-rw\-r\-\-r\-\- 1 pl users 6439 2008\-09\-02 08:59 Rule5.pm
\&  \-rw\-r\-\-r\-\- 1 pl users 1424 2008\-09\-02 08:59 Shift.pm
.Ve
.PP
The Grammar \f(CW\*(C`examples/Eyapp/Rule5.yp\*(C'\fR is similar to the one in the \*(L"\s-1SYNOPSIS\*(R"\s0
section. Module \f(CW\*(C`Rule5.pm\*(C'\fR contains the parser.
The module \f(CW\*(C`Shift.pm\*(C'\fR contains the code implementing
the tree transformations.
.PP
The client program follows:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/Eyapp$ cat \-n useruleandshift.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Rule5;
\&     4  use Parse::Eyapp::Base qw(insert_function);
\&     5  use Shift;
\&     6
\&     7  =head1 SYNOPSIS
\&     8
\&     9  Compile the grammar and tree transformations first:
\&    10
\&    11       $ eyapp Rule5
\&    12       $ treereg Shift
\&    13
\&    14  Then execute it with:
\&    15
\&    16       $ ./useruleandshift.pl
\&    17
\&    18  Try inputs:
\&    19
\&    20       a = b * 8
\&    21       d = c * 16
\&    22
\&    23  =cut
\&    24
\&    25  sub SHIFTLEFT::info { $_[0]{shift} }
\&    26  insert_function(\*(AqTERMINAL::info\*(Aq, \e&TERMINAL::attr);
\&    27
\&    28  my $parser = new Rule5();
\&    29  $parser\->slurp_file(\*(Aq\*(Aq,\*(AqArithmetic expression: \*(Aq, "\en");
\&    30  my $t = $parser\->Run;
\&    31  unless ($parser\->YYNberr) {
\&    32    print "***********\en",$t\->str,"\en";
\&    33    $t\->s(@Shift::all);
\&    34    print "***********\en",$t\->str,"\en";
\&    35  }
.Ve
.PP
Lines 25 and 26 provide the node classes \f(CW\*(C`TERMINAL\*(C'\fR and \f(CW\*(C`SHIFTLEFT\*(C'\fR of \f(CW\*(C`info\*(C'\fR
methods to be used during the calls to the \f(CW\*(C`str\*(C'\fR method (lines 32 and 34).
.PP
Multiplications by a power of two are substituted by the corresponding shifts:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ./useruleandshift.pl
\&  Arithmetic expression: a = b * 8
\&  ***********
\&  ASSIGN(TERMINAL[a],TIMES(VAR(TERMINAL[b]),NUM(TERMINAL[8])))
\&  ***********
\&  ASSIGN(TERMINAL[a],SHIFTLEFT[3](VAR(TERMINAL[b])))
.Ve
.SS "Compiling: More Options"
.IX Subsection "Compiling: More Options"
See files \f(CW\*(C`Rule9.yp\*(C'\fR, \f(CW\*(C`Transform4.trg\*(C'\fR and \f(CW\*(C`foldand0rule9_4.pl\*(C'\fR 
in the examples directory for a more detailed vision of this example. 
File \f(CW\*(C`Rule9.yp\*(C'\fR is very much like the grammar
in the \*(L"\s-1SYNOPSIS\*(R"\s0 example.
To compile the grammar \f(CW\*(C`Rule9.yp\*(C'\fR and the treeregexp
file \f(CW\*(C`Transform4.trg\*(C'\fR use the commands:
.PP
.Vb 1
\&                eyapp \-m \*(AqCalc\*(Aq Rule9.yp
.Ve
.PP
That will produce a file \f(CW\*(C`Calc.pm\*(C'\fR containing a package \f(CW\*(C`Calc\*(C'\fR
that implements the \s-1LALR\s0 parser. 
Then the command:
.PP
.Vb 1
\&                treereg \-o T.pm \-p \*(AqR::\*(Aq \-m T Transform4
.Ve
.PP
produces a file \f(CW\*(C`T.pm\*(C'\fR containing a package \f(CW\*(C`T\*(C'\fR that implements
the tree transformation program. The \f(CW\*(C`\-p\*(C'\fR option announces that
node classes are prefixed by \f(CW\*(AqR::\*(Aq\fR.
.PP
With such parameters the client program uses the generated modules as 
follows:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/Eyapp$ cat \-n foldand0rule9_4.pl                   
\&     1  #!/usr/bin/env perl
\&     2  =head1 SYNOPSIS
\&     3
\&     4     foldand0rule9_4.pl
\&     5
\&     6  Try inputs:
\&     7
\&     8     a = 2*3+4   # Reducido a: a = 6
\&     9     a = 2*[3+b] # syntax error
\&    10     a = 2*3*b   # Reducido a: a = 6*b
\&    11
\&    12  Compile it with
\&    13
\&    14           eyapp \-m \*(AqCalc\*(Aq Rule9.yp
\&    15           treereg \-o T.pm \-p \*(AqR::\*(Aq \-m T Transform4
\&    16
\&    17  =cut
\&    18
\&    19  use warnings;
\&    20  use strict;
\&    21  use Calc;
\&    22  use T;
\&    23
\&    24  sub R::TERMINAL::info { $_[0]{attr} }
\&    25
\&    26  my $parser = new Calc(yyprefix => "R::");
\&    27                     # stdin, prompt              , read one line at time
\&    28  $parser\->slurp_file(\*(Aq\*(Aq,\*(AqArithmetic expression: \*(Aq, "\en");
\&    29
\&    30  my $t = $parser\->YYParse;
\&    31
\&    32  unless ($parser\->YYNberr) {
\&    33    print "\en***** Tree before the transformations ******\en";
\&    34    print $t\->str."\en";
\&    35
\&    36    $t\->s(@T::all);
\&    37    print "\en***** Tree after the transformations were applied ******\en";
\&    38    print $t\->str."\en";
\&    39  }
.Ve
.PP
running the program produces the following output:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ./foldand0rule9_4.pl
\&  Arithmetic expression: a = 2*3
\&
\&  ***** Tree before the transformations ******
\&  R::ASSIGN(R::TERMINAL[a],R::TERMINAL[=],R::TIMES(R::NUM(R::TERMINAL[2]),R::TERMINAL[*],R::NUM(R::TERMINAL[3])))
\&
\&  ***** Tree after the transformations were applied ******
\&  R::ASSIGN(R::TERMINAL[a],R::TERMINAL[=],R::NUM(R::TERMINAL[6]))
\&
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ./foldand0rule9_4.pl
\&  Arithmetic expression: a = 2*[3+b]
\&
\&  Syntax error near \*(Aq[\*(Aq.
\&  Expected one of these terminals: \*(Aq\-\*(Aq \*(AqNUM\*(Aq \*(AqVAR\*(Aq \*(Aq(\*(Aq
.Ve
.SH "Parse::Eyapp::Scope: SUPPORT FOR SCOPE ANALYSIS"
.IX Header "Parse::Eyapp::Scope: SUPPORT FOR SCOPE ANALYSIS"
See the documentation for Parse::Eyapp::Scope
.SH "MISCELLANEOUS SUPPORT FUNCTIONS IN Parse::Eyapp::Base"
.IX Header "MISCELLANEOUS SUPPORT FUNCTIONS IN Parse::Eyapp::Base"
See the documentation in Parse::Eyapp::Base
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Remember to set the environment variable \f(CW\*(C`PERL5LIB\*(C'\fR
if you decide to install \f(CW\*(C`Parse::Eyapp\*(C'\fR at a location other than the standard.
For example, on a bash or sh:
.PP
.Vb 1
\&  export PERL5LIB=/home/user/wherever_it_is/lib/:$PERL5LIB
.Ve
.PP
on a \f(CW\*(C`csh\*(C'\fR or \f(CW\*(C`tcsh\*(C'\fR
.PP
.Vb 1
\&  setenv PERL5LIB /home/user/wherever_it_is/lib/:$PERL5LIB
.Ve
.PP
Be sure the scripts \f(CW\*(C`eyapp\*(C'\fR and \f(CW\*(C`treereg\*(C'\fR are in the execution \s-1PATH.\s0
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
This distribution depends on the following modules:
.IP "\(bu" 4
List::Util
.IP "\(bu" 4
Data::Dumper
.IP "\(bu" 4
Pod::Usage
.PP
It seems that List::Util is in the core of Perl
distributions since version 5.73:
.PP
.Vb 2
\&  > perl \-MModule::CoreList \-e \*(Aqprint Module::CoreList\->first_release("List::Util")\*(Aq
\&  5.007003
.Ve
.PP
and Data::Dumper is also in the core since 5.5:
.PP
.Vb 2
\&  > perl \-MModule::CoreList \-e \*(Aqprint Module::CoreList\->first_release("Data::Dumper")\*(Aq
\&  5.005
.Ve
.PP
and Pod::Usage is also in the core since 5.6:
.PP
.Vb 2
\&  > perl \-MModule::CoreList \-e \*(Aqprint Module::CoreList\->first_release("Pod::Usage")\*(Aq
\&  5.006
.Ve
.PP
I also recommend the following modules:
.IP "\(bu" 4
Test::Pod
.IP "\(bu" 4
Test::Warn
.IP "\(bu" 4
Test::Exception
.PP
The dependence on  Test::Warn, Test::Pod and Test::Exception is merely for
the execution of tests. If the modules aren't installed the tests
depending on them will be skipped.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
To install it, follow the traditional mantra:
.PP
.Vb 4
\&                                 perl Makefile.PL
\&                                 make
\&                                 make test
\&                                 make install
.Ve
.PP
Also:
.IP "\(bu" 4
Make a local copy of the \f(CW\*(C`examples/\*(C'\fR directory in this distribution. They contain
the examples used in the tutorials
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
.IP "\(bu" 4
The way Parse::Eyapp parses Perl code is verbatim the way it does Parse::Yapp 1.05.
Quoting Francois Desarmenien Parse::Yapp documentation:
.Sp
"Be aware that matching braces in Perl is much more difficult than
in C: inside strings they don't need to match. While in C it is
very easy to detect the beginning of a string construct, or a
single character, it is much more difficult in Perl, as there
are so many ways of writing such literals. So there is no check
for that today. If you need a brace in a double-quoted string, just
quote it (\f(CW\*(C`\e{\*(C'\fR or \f(CW\*(C`\e}\*(C'\fR). For single-quoted strings, you will need
to make a comment matching it \fIin the right order\fR.
Sorry for the inconvenience.
.Sp
.Vb 9
\&    {
\&        "{ My string block }".
\&        "\e{ My other string block \e}".
\&        qq/ My unmatched brace \e} /.
\&        # Force the match: {
\&        q/ for my closing brace } /
\&        q/ My opening brace { /
\&        # must be closed: }
\&    }
.Ve
.Sp
All of these constructs should work."
.Sp
Alternative \fIexact solutions\fR were tried but resulted in much slower
code. Therefore, until something faster is found, I rather prefer for
Parse::Eyapp to live with this limitation.
.Sp
The same limitation may appear inside header code (code between \f(CW\*(C`%{\*(C'\fR and \f(CW\*(C`%}\*(C'\fR)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
The project home is at <http://code.google.com/p/parse\-eyapp/>.
Use a subversion client to anonymously check out the latest project source code:
.Sp
.Vb 1
\&   svn checkout http://parse\-eyapp.googlecode.com/svn/trunk/ parse\-eyapp\-read\-only
.Ve
.IP "\(bu" 4
The tutorial \fIParsing Strings and Trees with\fR \f(CW\*(C`Parse::Eyapp\*(C'\fR
(An Introduction to Compiler Construction in seven pages) in
<http://nereida.deioc.ull.es/~pl/eyapsimple/>
.IP "\(bu" 4
Parse::Eyapp, 
Parse::Eyapp::eyapplanguageref, 
Parse::Eyapp::debuggingtut,
Parse::Eyapp::defaultactionsintro,
Parse::Eyapp::translationschemestut,
Parse::Eyapp::Driver,
Parse::Eyapp::Node,
Parse::Eyapp::YATW,
Parse::Eyapp::Treeregexp,
Parse::Eyapp::Scope,
Parse::Eyapp::Base,
Parse::Eyapp::datagenerationtut
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/languageintro.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/debuggingtut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/eyapplanguageref.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Treeregexp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Node.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/YATW.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Eyapp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Base.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/translationschemestut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/treematchingtut.pdf>
.IP "\(bu" 4
perldoc eyapp,
.IP "\(bu" 4
perldoc treereg,
.IP "\(bu" 4
perldoc vgg,
.IP "\(bu" 4
The Syntax Highlight file for vim at <http://www.vim.org/scripts/script.php?script_id=2453>
and <http://nereida.deioc.ull.es/~vim/>
.IP "\(bu" 4
\&\fIAnalisis Lexico y Sintactico\fR, (Notes for a course in compiler 
construction) by  Casiano Rodriguez-Leon. 
Available at  <http://nereida.deioc.ull.es/~pl/perlexamples/>
Is the more complete and reliable source for Parse::Eyapp. However is in Spanish.
.IP "\(bu" 4
Parse::Yapp,
.IP "\(bu" 4
Man pages of \fIyacc\fR\|(1) and
\&\fIbison\fR\|(1),
<http://www.delorie.com/gnu/docs/bison/bison.html>
.IP "\(bu" 4
Language::AttributeGrammar
.IP "\(bu" 4
Parse::RecDescent.
.IP "\(bu" 4
HOP::Parser
.IP "\(bu" 4
HOP::Lexer
.IP "\(bu" 4
ocamlyacc tutorial at 
<http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex\-ocamlyacc/ocamlyacc\-tutorial/ocamlyacc\-tutorial.html>
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "\(bu" 4
The classic Dragon's book \fICompilers: Principles, Techniques, and Tools\fR 
by Alfred V. Aho, Ravi Sethi and
Jeffrey D. Ullman (Addison-Wesley 1986)
.IP "\(bu" 4
\&\fI\s-1CS2121:\s0 The Implementation and Power of Programming Languages\fR
(See <http://www.cs.man.ac.uk/~pjj>, <http://www.cs.man.ac.uk/~pjj/complang/g2lr.html> 
and <http://www.cs.man.ac.uk/~pjj/cs2121/ho/ho.html>) by 
Pete Jinks
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE \s0(\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04
\&\s0(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601
\&\s0(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\*(R"\s0 in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 2636:" 4
.IX Item "Around line 2636:"
Non-ASCII character seen before =encoding in 'va\*'lida\en";'. Assuming \s-1ISO8859\-1\s0
                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp5.16.3pm                         0100644 0001750 0001750 00000602670 12566242264 024064  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp 3"
.TH Parse::Eyapp 3 "2012-03-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp \- Bottom up parser generator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  # File \*(Aqcalc.eyp\*(Aq: translates infix expressions to postfix
\&  # Compile it with:  eyapp \-o calc.pl \-C Postfix.eyp
\&  # Execution:        ./calc.pl \-c \*(Aqa = 2*3+b\*(Aq
\&  %token NUM = /([0\-9]+(?:\e.[0\-9]+)?)/
\&  %token VAR = /([A\-Za\-z][A\-Za\-z0\-9_]*)/
\&
\&  %right  \*(Aq=\*(Aq
\&  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&  %left   NEG
\&
\&  %defaultaction { "$left $right $op"; }
\&
\&  %%
\&  line: $exp  { print "$exp\en" }
\&  ;
\&
\&  exp:        $NUM  { $NUM }            
\&          |   $VAR  { $VAR }            
\&          |   VAR.left \*(Aq=\*(Aq.op exp.right         
\&          |   exp.left \*(Aq+\*(Aq.op exp.right         
\&          |   exp.left \*(Aq\-\*(Aq.op exp.right        
\&          |   exp.left \*(Aq*\*(Aq.op exp.right       
\&          |   exp.left \*(Aq/\*(Aq.op exp.right      
\&          |   \*(Aq\-\*(Aq $exp %prec NEG { "$exp NEG" }
\&          |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq { $exp }      
\&  ;
\&
\&  %%
.Ve
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
Parse::Eyapp (Extended yapp) is a collection of modules that extends Francois
Desarmenien Parse::Yapp 1.05.  Eyapp extends yacc/yapp syntax with
functionalities like named attributes, EBNF-like expressions, modifiable
default action (like Parse::RecDescent autoaction), grammar reuse, 
automatic abstract syntax tree building,
syntax directed data generation,
translation schemes, tree regular
expressions, tree transformations, scope analysis support, directed acyclic
graphs and a few more.
.PP
Parse-Eyapp \s-1LALR\s0 parsing engine provides mechanisms for the \fIdynamic resolution\fR
(i.e. at parsing time and not at grammar compilation time) of shift-reduce and 
reduce-reduce conflicts that can not be satisfactorily solved
using static precedences.  Parse-Eyapp also provide means to solve the problem of 
languages where the token's type depends upon contextual information like in
the well known \s-1PL/I\s0 statement:
.PP
.Vb 1
\&         if then=if then if=then
.Ve
.SH "THE DOCUMENTATION OF Parse::Eyapp"
.IX Header "THE DOCUMENTATION OF Parse::Eyapp"
The documentation is distributed among several files:
.IP "\(bu" 4
To get familiar with  \f(CW\*(C`eyapp\*(C'\fR read Parse::Eyapp::eyappintro
It assumes a reader familiar with parsing techniques.
Familiarity with \f(CW\*(C`yacc\*(C'\fR or \f(CW\*(C`yapp\*(C'\fR, \f(CW\*(C`RecDescent\*(C'\fR, \f(CW\*(C`ANTLR\*(C'\fR or
similar tools will help but it is not indispensable.
.IP "\(bu" 4
To master conflict resolution read Parse::Eyapp::debuggingtut.
.IP "\(bu" 4
The document Parse::Eyapp::defaultactionsintro describes the use of
default actions and how to deal with \fIgrammar reuse\fR and factorization.
.IP "\(bu" 4
Parse::Eyapp can be used to generate data that conforms with a given grammar.
The tutorial Parse::Eyapp::datagenerationtut shows how.
.IP "\(bu" 4
The document Parse::Eyapp::eyapplanguageref 
describes the Eyapp language.
.IP "\(bu" 4
The document Parse::Eyapp::translationschemestut 
describes the use of Translation Schemes inside the Eyapp language.
.IP "\(bu" 4
The Treeregexp language is described in Parse::Eyapp::Treeregexp.
Treeregexp is a language to describe transformations of abstract syntax trees.
.IP "\(bu" 4
Read Parse::Eyapp::Scope to know
about the functionalities provided for Scope Analysis.
.IP "\(bu" 4
A set of basic miscellaneous support functions 
are described in Parse::Eyapp::Base. 
Several of these functions are related to the dynamic use of methods 
and subroutines.
.IP "\(bu" 4
Don't forget to read the section \*(L"\s-1BUGS\s0 \s-1AND\s0 \s-1LIMITATIONS\s0\*(R"
.PP
The examples used in this document can be found in
the directory \f(CW\*(C`examples/Eyapp\*(C'\fR accompanying this distribution.
As a general rule, each pod/tutorial has an associated subdirectory
of \f(CW\*(C`examples/Eyapp\*(C'\fR. Thus, the examples used in the documentation
of Parse::Eyapp::eyappintro can be found in \f(CW\*(C`examples/Eyapp/eyappintro\*(C'\fR;
The examples mentioned in Parse::Eyapp::Node can be found
in \f(CW\*(C`examples/Eyapp/Node\*(C'\fR. There are a few exceptions however.
For those exceptions the relative location where the file can be found
will be mentioned.
.SH "THE EYAPP LANGUAGE"
.IX Header "THE EYAPP LANGUAGE"
.SS "Eyapp Grammar"
.IX Subsection "Eyapp Grammar"
This section describes the syntax of the Eyapp language using its own notation.
The grammar extends yacc and yapp grammars.  Semicolons have been omitted
to save space.  Between C\-like comments you can find an (informal) explanation
of the language associated with each token.
.PP
.Vb 10
\&  %token ASSOC /* is %(left|right|nonassoc) */                                                                                                          
\&  %token BEGINCODE /* is %begin { Perl code ... } */                                                                                                    
\&  %token CODE /* is { Perl code ... } */                                                                                                                
\&  %token CONFLICT /* is %conflict */                                                                                                                    
\&  %token DEFAULTACTION /* is %defaultaction */                                                                                                          
\&  %token EXPECT /* is %expect */                                                                                                                        
\&  %token HEADCODE /* is %{ Perl code ... %} */                                                                                                          
\&  %token IDENT /* is [A\-Za\-z_][A\-Za\-z0\-9_]* */                                                                                                          
\&  %token LABEL /* is :[A\-Za\-z0\-9_]+ */                                                                                                                  
\&  %token LITERAL /* is a string literal like \*(Aqhello\*(Aq */                                                                                                 
\&  %token METATREE /* is %metatree */                                                                                                                    
\&  %token NAME /* is %name */                                                                                                                            
\&  %token NAMINGSCHEME /* is %namingscheme */                                                                                                            
\&  %token NOCOMPACT /* is %nocompact */                                                                                                                  
\&  %token NUMBER /* is \ed+ */                                                                                                                            
\&  %token OPTION /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e? */                                                                                                 
\&  %token PLUS /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e+ */                                                                                                   
\&  %token PREC /* is %prec */                                                                                                                            
\&  %token PREFIX /* is %prefix\es+([A\-Za\-z_][A\-Za\-z0\-9_:]*::) */                                                                                          
\&  %token SEMANTIC /* is %semantic\es+token */                                                                                                            
\&  %token STAR /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e* */                                                                                                   
\&  %token START /* is %start */                                                                                                                          
\&  %token STRICT /* is %strict */                                                                                                                        
\&  %token SYNTACTIC /* is %syntactic\es+token */                                                                                                          
\&  %token TAILCODE /* is { Perl code ... } */                                                                                                            
\&  %token TOKEN /* is %token */                                                                                                                          
\&  %token TREE /* is %tree */                                                                                                                            
\&  %token TYPE /* is %type */                                                                                                                            
\&  %token UNION /* is %union */                                                                                                                          
\&  %start eyapp                                                                                                                                          
\&
\&  %%
\&
\&  # Main rule
\&  eyapp:     
\&        head body tail 
\&  ;                    
\&  #Common rules:       
\&  symbol:              
\&        LITERAL        
\&      | ident #default action
\&  ;                          
\&  ident:                     
\&        IDENT                
\&  ;                          
\&  # Head section:            
\&  head:                      
\&        headsec \*(Aq%%\*(Aq         
\&  ;                          
\&  headsec:                   
\&        #empty  #default action
\&      | decls #default action  
\&  ;                            
\&  decls:                       
\&        decls decl #default action
\&      | decl #default action      
\&  ;                               
\&  decl:                           
\&        \*(Aq\en\*(Aq #default action      
\&      | SEMANTIC typedecl symlist \*(Aq\en\*(Aq
\&      | SYNTACTIC typedecl symlist \*(Aq\en\*(Aq
\&      | TOKEN typedecl toklist \*(Aq\en\*(Aq    
\&      | ASSOC typedecl symlist \*(Aq\en\*(Aq    
\&      | START ident \*(Aq\en\*(Aq               
\&      | PREFIX \*(Aq\en\*(Aq                    
\&      | WHITES CODE \*(Aq\en\*(Aq               
\&      | WHITES REGEXP \*(Aq\en\*(Aq             
\&      | WHITES \*(Aq=\*(Aq CODE \*(Aq\en\*(Aq           
\&      | WHITES \*(Aq=\*(Aq REGEXP \*(Aq\en\*(Aq         
\&      | NAMINGSCHEME CODE \*(Aq\en\*(Aq         
\&      | HEADCODE \*(Aq\en\*(Aq                  
\&      | UNION CODE \*(Aq\en\*(Aq  #ignore       
\&      | DEFAULTACTION CODE \*(Aq\en\*(Aq        
\&      | LEXER CODE \*(Aq\en\*(Aq                
\&      | TREE \*(Aq\en\*(Aq                      
\&      | METATREE \*(Aq\en\*(Aq                  
\&      | STRICT \*(Aq\en\*(Aq                    
\&      | NOCOMPACT \*(Aq\en\*(Aq                 
\&      | TYPE typedecl identlist \*(Aq\en\*(Aq   
\&      | CONFLICT ident CODE \*(Aq\en\*(Aq       
\&      | EXPECT NUMBER \*(Aq\en\*(Aq             
\&      | EXPECT NUMBER NUMBER \*(Aq\en\*(Aq      
\&      | EXPECTRR NUMBER \*(Aq\en\*(Aq           
\&      | error \*(Aq\en\*(Aq                     
\&  ;                                    
\&  typedecl:                            
\&        #empty                         
\&      | \*(Aq<\*(Aq IDENT \*(Aq>\*(Aq                  
\&  ;                                    
\&  symlist:                             
\&        symlist symbol                 
\&      | symbol                         
\&  ;                                    
\&  toklist:                             
\&        toklist tokendef               
\&      | tokendef                       
\&  ;                                    
\&  tokendef:                            
\&        symbol \*(Aq=\*(Aq REGEXP              
\&      | symbol \*(Aq=\*(Aq CODE                
\&      | symbol                         
\&  ;                                    
\&  identlist:                           
\&        identlist ident                
\&      | ident                          
\&  ;                                    
\&  # Rule section                       
\&  body:                                
\&        rulesec \*(Aq%%\*(Aq                   
\&      | \*(Aq%%\*(Aq                           
\&  ;                                    
\&  rulesec:                             
\&        rulesec rules #default action  
\&      | startrules #default action     
\&  ;                                    
\&  startrules:                          
\&        IDENT \*(Aq:\*(Aq  rhss \*(Aq;\*(Aq            
\&      | error \*(Aq;\*(Aq                      
\&  ;                                    
\&  rules:                               
\&        IDENT \*(Aq:\*(Aq rhss \*(Aq;\*(Aq             
\&      | error \*(Aq;\*(Aq                      
\&  ;                                    
\&  rhss:                                
\&        rhss \*(Aq|\*(Aq rule                  
\&      | rule                           
\&  ;                                    
\&  rule:                                
\&        optname rhs prec epscode       
\&      | optname rhs                    
\&  ;                                    
\&  rhs:                                 
\&        #empty      #default action (will return undef)
\&      | rhselts #default action                        
\&  ;                                                    
\&  rhselts:                                             
\&        rhselts rhseltwithid                           
\&      | rhseltwithid                                   
\&  ;                                                    
\&  rhseltwithid:                                        
\&        rhselt \*(Aq.\*(Aq IDENT
\&      | \*(Aq$\*(Aq rhselt
\&      | \*(Aq$\*(Aq error
\&      | rhselt
\&  ;
\&  rhselt:
\&        symbol
\&      | code
\&      | DPREC ident
\&      | \*(Aq(\*(Aq optname rhs \*(Aq)\*(Aq
\&      | rhselt STAR
\&      | rhselt \*(Aq<\*(Aq STAR symbol \*(Aq>\*(Aq
\&      | rhselt OPTION
\&      | rhselt \*(Aq<\*(Aq PLUS symbol \*(Aq>\*(Aq
\&      | rhselt PLUS
\&  ;
\&  optname:
\&        /* empty */
\&      | NAME IDENT
\&      | NAME IDENT LABEL
\&      | NAME LABEL
\&  ;
\&  prec:
\&        PREC symbol
\&  ;
\&  epscode:
\&      | code
\&  ;
\&  code:
\&        CODE
\&      | BEGINCODE
\&  ;
\&  # Tail section:
\&  tail:
\&        /*empty*/
\&      | TAILCODE
\&  ;
\&
\&  %%
.Ve
.PP
The semantic of \f(CW\*(C`Eyapp\*(C'\fR agrees with the semantic of \f(CW\*(C`yacc\*(C'\fR and \f(CW\*(C`yapp\*(C'\fR for
all the common constructions.
.SS "Comments"
.IX Subsection "Comments"
Comments are either Perl style, from \f(CW\*(C`#\*(C'\fR
up to the end of line, or C style, enclosed between  \f(CW\*(C`/*\*(C'\fR and \f(CW\*(C`*/\*(C'\fR.
.SS "Syntactic Variables, Symbolic Tokens and String Literals"
.IX Subsection "Syntactic Variables, Symbolic Tokens and String Literals"
Two kind of symbols may appear inside a Parse::Eyapp program:
\&\fINon-terminal\fR symbols or \fIsyntactic variables\fR, 
called also \fIleft-hand-side\fR symbols
and \fITerminal\fR symbols, called
also \fITokens\fR.
.PP
Tokens are the symbols the lexical analyzer function returns to the parser.
There are two kinds of tokens: \fIsymbolic tokens\fR and \fIstring
literals\fR.
.PP
\&\fISyntactic variables\fR and \fIsymbolic tokens\fR identifiers must conform
to the regular expression \f(CW\*(C`[A\-Za\-z][A\-Za\-z0\-9_]*\*(C'\fR.
.PP
When building the syntax tree (i.e. when running under the \f(CW%tree\fR
directive) \fIsymbolic tokens\fR will be considered \fIsemantic tokens\fR (see section
\&\*(L"Syntactic and Semantic tokens\*(R"). \fISymbolic tokens\fR yield nodes
in the Abstract Syntax Tree.
.PP
String literals are enclosed in single quotes and can contain almost
anything. They will be received by the parser as double-quoted strings. 
Any special character as \f(CW\*(Aq"\*(Aq\fR, \f(CW\*(Aq$\*(Aq\fR and \f(CW\*(Aq@\*(Aq\fR is escaped.
To have a single quote inside a literal, escape it with '\e'.
.PP
When building the syntax tree (i.e. when running under the \f(CW%tree\fR
directive) \fIstring literals\fR will be considered \fIsyntactic tokens\fR (see section
\&\*(L"Syntactic and Semantic tokens\*(R"). \fISyntactic tokens\fR do not produce
nodes in the Abstract Syntax Tree.
.PP
The examples used along this document can be found in the directory 
\&\f(CW\*(C`examples/eyapplanguageref\*(C'\fR accompanying this distribution.
.ie n .SS "Parts of an ""eyapp"" Program"
.el .SS "Parts of an \f(CWeyapp\fP Program"
.IX Subsection "Parts of an eyapp Program"
An Eyapp program has three parts called head, body and tail:
.PP
.Vb 1
\&                                 eyapp: head body tail ;
.Ve
.PP
Each part is separated from the former by the symbol \f(CW\*(C`%%\*(C'\fR:
.PP
.Vb 2
\&                                 head: headsec \*(Aq%%\*(Aq
\&                                 body: rulesec \*(Aq%%\*(Aq
.Ve
.SH "THE HEAD SECTION"
.IX Header "THE HEAD SECTION"
The head section contains a list of declarations
.PP
.Vb 1
\&                                 headsec:  decl *
.Ve
.PP
There are different kinds of declarations.
.PP
This reference does not 
fully describes all the declarations that are shared with \f(CW\*(C`yacc\*(C'\fR and 
yapp.
.SS "Example of Head Section"
.IX Subsection "Example of Head Section"
In this and the next sections we will describe the basics
of the Eyapp language using the file \f(CW\*(C`examples/eyapplanguageref/Calc.eyp\*(C'\fR 
that accompanies this distribution. This file implements a trivial 
calculator. Here is the header section:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,/%%/p\*(Aq Calc.eyp | cat \-n
\&     1  # examples/eyapplanguageref/Calc.eyp
\&     2  %whites    =  /([ \et]*(?:#.*)?)/
\&     3  %token NUM =  /([0\-9]+(?:\e.[0\-9]+)?)/
\&     4  %token VAR =  /([A\-Za\-z][A\-Za\-z0\-9_]*)/
\&     5
\&     6  %right  \*(Aq=\*(Aq
\&     7  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     8  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     9  %left   NEG
\&    10  %right  \*(Aq^\*(Aq
\&    11
\&    12  %{
\&    13  my %s; # symbol table
\&    14  %}
\&    15
\&    16  %%
.Ve
.PP
Eyapp produces a lexical generator from the descriptions given
by the \f(CW%token\fR and \f(CW%whites\fR directives plus the tokens used 
inside the body section.
.PP
.Vb 3
\&       %whites    =  /([ \et]*(?:#.*)?)/
\&       %token NUM =  /([0\-9]+(?:\e.[0\-9]+)?)/
\&       %token VAR =  /([A\-Za\-z][A\-Za\-z0\-9_]*)/
.Ve
.PP
See section \*(L"Automatic Generation of Lexical Analyzers\*(R" for more details.
.SS "Declarations and Precedence"
.IX Subsection "Declarations and Precedence"
Lines 2\-5 declare several tokens. The usual way to declare
tokens is through the \f(CW%token\fR directive. The declarations 
\&\f(CW%nonassoc\fR, \f(CW%left\fR and \f(CW%right\fR 
not only declare the tokens but also associate a \fIpriority\fR with them.  
Tokens declared in the same line have the same precedence. 
Tokens declared with these directives in lines below have more
precedence than those declared above. Thus, in the example
above
we are saying that \f(CW"+"\fR and \f(CW"\-"\fR have the same precedence
but higher precedence than =. The final effect of \f(CW"\-"\fR
having greater precedence than = will be that an
expression like:
.PP
.Vb 1
\&                        a = 4 \- 5
.Ve
.PP
will be interpreted as
.PP
.Vb 1
\&                        a = (4 \- 5)
.Ve
.PP
and not as
.PP
.Vb 1
\&                        (a = 4) \- 5
.Ve
.PP
The use of the \f(CW%left\fR indicates that \- in case of ambiguity 
and a match between precedences \- the parser must build the tree corresponding
to a left parenthesizing. Thus, the expression
.PP
.Vb 1
\&                         4 \- 5 \- 9
.Ve
.PP
will be interpreted as
.PP
.Vb 1
\&                         (4 \- 5) \- 9
.Ve
.PP
You can refer to the token end-of-input in the header section using the string \f(CW\*(Aq\*(Aq\fR (for example
to give it some priority, see the example in \f(CW\*(C`examples/debuggingtut/typicalrrwithprec.eyp\*(C'\fR).
.SS "Header Code"
.IX Subsection "Header Code"
Perl code surrounded by \f(CW\*(C`%{\*(C'\fR and \f(CW\*(C`%}\*(C'\fR
can be inserted in the head section. Such code will be inserted in the module
generated by \f(CW\*(C`eyapp\*(C'\fR near the beginning. Therefore, declarations like the
one of the calculator symbol table \f(CW%s\fR
.PP
.Vb 3
\&  7  %{
\&  8  my %s; # symbol table
\&  9  %}
.Ve
.PP
will be visible from almost any point in the file.
.SS "The Start Symbol of the Grammar"
.IX Subsection "The Start Symbol of the Grammar"
\&\f(CW\*(C`%start program\*(C'\fR declares \f(CW\*(C`program\*(C'\fR as the start symbol of 
the grammar. When \f(CW%start\fR is not
used, the first rule in the body section will be used.
.SS "Expect"
.IX Subsection "Expect"
The \f(CW\*(C`%expect #NUMBER\*(C'\fR directive works as in \f(CW\*(C`bison\*(C'\fR 
and  suppress warnings when the number of Shift/Reduce
conflicts is exactly \f(CW\*(C`#NUMBER\*(C'\fR.
.PP
The directive has been extended to be called with two numbers:
.PP
.Vb 1
\&  %expect NUMSHIFTRED NUMREDRED
.Ve
.PP
no warnings will be emitted if the number of shift-reduce 
conflicts is exactly \f(CW\*(C`NUMSHIFTRED\*(C'\fR and the number of reduce-reduce
conflicts is \f(CW\*(C`NUMREDRED\*(C'\fR.
.SS "Type and Union"
.IX Subsection "Type and Union"
C oriented declarations like \f(CW%type\fR and \f(CW%union\fR are
parsed but ignored.
.ie n .SS "The %strict Directive"
.el .SS "The \f(CW%strict\fP Directive"
.IX Subsection "The %strict Directive"
By default, identifiers appearing in the rule section
will be classified as terminal if they don't appear 
in the left hand side of any production rules.
.PP
The directive \f(CW%strict\fR forces the declaration of all tokens. 
The following \f(CW\*(C`eyapp\*(C'\fR program issues a warning:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n bugyapp2.eyp
\&       1  %strict
\&       2  %%
\&       3  expr: NUM;
\&       4  %%
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp bugyapp2.eyp
\&  Warning! Non declared token NUM at line 3 of bugyapp2.eyp
.Ve
.PP
To keep silent the compiler declare all tokens using
one of the token declaration directives (\f(CW%token\fR, \f(CW%left\fR, etc.)
.PP
.Vb 9
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n bugyapp3.eyp
\&       1  %strict
\&       2  %token NUM
\&       3  %%
\&       4  expr: NUM;
\&       5  %%
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp bugyapp3.eyp
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ls \-ltr | tail \-1
\&  \-rw\-r\-\-r\-\- 1 pl users 2395 2008\-10\-02 09:41 bugyapp3.pm
.Ve
.PP
It is a good practice to use \f(CW%strict\fR at the beginning of your grammar.
.ie n .SS "The %prefix Directive"
.el .SS "The \f(CW%prefix\fP Directive"
.IX Subsection "The %prefix Directive"
The \f(CW%prefix\fR directive 
is equivalent to the use of the \f(CW\*(C`yyprefix\*(C'\fR. The node classes are prefixed
with the specified prefix
.PP
.Vb 1
\&  %prefix Some::Prefix::
.Ve
.PP
See the example in \f(CW\*(C`examples/eyapplanguageref/alias_and_yyprefix.pl\*(C'\fR.
See also section \*(L"Grammar Reuse\*(R" in Parse::Eyapp::defaultactionsintro
for an example that does not involve the \f(CW%tree\fR directive.
.SS "Default Action Directive"
.IX Subsection "Default Action Directive"
In \f(CW\*(C`Parse::Eyapp\*(C'\fR you can modify the default action 
using the \f(CW\*(C`%defaultaction { Perl code }\*(C'\fR
directive. See section \*(L"\s-1DEFAULT\s0 \s-1ACTIONS\s0\*(R".
The examples \f(CW\*(C`examples/eyapplanguageref/Postfix.eyp\*(C'\fR and 
\&\f(CW\*(C`examples/eyapplanguageref/Lhs.eyp\*(C'\fR illustrate the use of the directive.
.SS "Tree Construction Directives"
.IX Subsection "Tree Construction Directives"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR facilitates the construction of concrete syntax trees and 
abstract syntax trees (abbreviated \s-1AST\s0 from now on) through the \f(CW%tree\fR
and \f(CW%metatree\fR directives. See sections
\&\*(L"\s-1ABSTRACT\s0 \s-1SYNTAX\s0 \s-1TREES:\s0 \f(CW%tree\fR \s-1AND\s0 \f(CW%name\fR\*(R"
and
Parse::Eyapp::translationschemestut.
.SS "Tokens and the Abstract Syntax Tree"
.IX Subsection "Tokens and the Abstract Syntax Tree"
The new token declaration directives \f(CW\*(C`%syntactic token\*(C'\fR and
\&\f(CW\*(C`%semantic token\*(C'\fR can change the way \f(CW\*(C`eyapp\*(C'\fR builds the abstract syntax tree.
See section \*(L"Syntactic and Semantic tokens\*(R".
.ie n .SS "The %nocompact directive"
.el .SS "The \f(CW%nocompact\fP directive"
.IX Subsection "The %nocompact directive"
This directive influences the generation of the \s-1LALR\s0 tables.
They will not be compacted and the tokens
for the \f(CW\*(C`DEFAULT\*(C'\fR reduction will be explicitly set.
It can be used to produce an \f(CW\*(C`.output\*(C'\fR file (option \f(CW\*(C`\-v\*(C'\fR)
with more information.
.SH "THE BODY"
.IX Header "THE BODY"
The body section contains the rules describing the grammar:
.PP
.Vb 3
\&                       body:   rules * \*(Aq%%\*(Aq
\&                       rules:  IDENT \*(Aq:\*(Aq rhss \*(Aq;\*(Aq  
\&                       rhss:   (optname rhs (prec epscode)?) <+ \*(Aq|\*(Aq>
.Ve
.SS "Rules"
.IX Subsection "Rules"
A rule is made of a left-hand-side symbol (the \fIsyntactic variable\fR), 
followed by a \f(CW\*(Aq:\*(Aq\fR and one
or more \fIright-hand-sides\fR (or \fIproductions\fR)
 separated by \f(CW\*(Aq|\*(Aq\fR and terminated by a \f(CW\*(Aq;\*(Aq\fR
like in:
.PP
.Vb 5
\&                          exp: 
\&                               exp \*(Aq+\*(Aq exp
\&                            |  exp \*(Aq\-\*(Aq exp
\&                            |  NUM
\&                          ;
.Ve
.PP
A \fIproduction\fR (\fIright hand side\fR) may be empty:
.PP
.Vb 4
\&                          input:   
\&                               /* empty */
\&                            |  input line
\&                          ;
.Ve
.PP
The former two productions can be abbreviated as
.PP
.Vb 3
\&                          input: 
\&                               line *
\&                          ;
.Ve
.PP
The operators \f(CW\*(C`*\*(C'\fR, \f(CW\*(C`+\*(C'\fR and \f(CW\*(C`?\*(C'\fR are presented in section
\&\*(L"\s-1LISTS\s0 \s-1AND\s0 \s-1OPTIONALS\s0\*(R".
.PP
A \fIsyntactic variable cannot appear more than once as
a rule name\fR (This differs from \f(CW\*(C`yacc\*(C'\fR).  So you can't 
write
.PP
.Vb 2
\&    thing: foo bar ;
\&    thing: foo baz ;
.Ve
.PP
instead, write:
.PP
.Vb 4
\&    thing: 
\&           foo bar 
\&         | foo baz 
\&    ;
.Ve
.SS "Semantic Values and Semantic Actions"
.IX Subsection "Semantic Values and Semantic Actions"
In \f(CW\*(C`Parse::Eyapp\*(C'\fR 
a production rule
.PP
.Vb 1
\&                          A \-> X_1 X_2 ... X_n
.Ve
.PP
can be followed by a 
\&\fIsemantic action\fR:
.PP
.Vb 1
\&                    A \-> X_1 X_2 ... X_n { Perl Code }
.Ve
.PP
Such
semantic action is nothing but Perl code that will be treated 
as an anonymous subroutine.  The semantic action associated 
with production rule \f(CW\*(C`A \-> X_1 X_2 ... X_n\*(C'\fR  is executed
after any actions associated with the subtrees of \f(CW\*(C`X_1\*(C'\fR,
\&\f(CW\*(C`X_2\*(C'\fR, ..., \f(CW\*(C`X_n\*(C'\fR.
\&\f(CW\*(C`Eyapp\*(C'\fR parsers build the syntax tree using a left-right
bottom-up traverse of the syntax tree. Each times
the Parser visits the node associated with the 
production \f(CW\*(C`A \-> X_1 X_2 ... X_n\*(C'\fR
the associated semantic action is called. 
Associated with each symbol
of a Parse::Eyapp grammar there is a scalar \fISemantic Value\fR
or \fIAttribute\fR. The semantic values of terminals are provided
by the lexical analyzer. In the calculator example
(see file \f(CW\*(C`examples/eyapplanguageref/Calc.yp\*(C'\fR in the distribution),
the semantic value associated with an expression
is its numeric value. Thus in the rule:
.PP
.Vb 1
\&                       exp \*(Aq+\*(Aq exp { $_[1] + $_[3] }
.Ve
.PP
\&\f(CW$_[1]\fR refers to the attribute of the first \f(CW\*(C`exp\*(C'\fR, \f(CW$_[2]\fR 
is the attribute associated with \f(CW\*(Aq+\*(Aq\fR, which is the second component of the 
pair provided by the lexical analyzer and \f(CW$_[3]\fR refers to the attribute of 
the second \f(CW\*(C`exp\*(C'\fR.
.PP
When the semantic action/anonymous subroutine is called,
the arguments are as follows:
.IP "\(bu" 4
\&\f(CW$_[1]\fR to \f(CW$_[n]\fR are the attributes of
the symbols \f(CW\*(C`X_1\*(C'\fR, \f(CW\*(C`X_2\*(C'\fR, ..., \f(CW\*(C`X_n\*(C'\fR. 
Just as \f(CW$1\fR to \f(CW$n\fR in \f(CW\*(C`yacc\*(C'\fR,
.IP "\(bu" 4
\&\f(CW$_[0]\fR is the parser object itself.
Having \f(CW$_[0]\fR being the parser object itself allows you to call
parser methods. Most \f(CW\*(C`yacc\*(C'\fR macros have been converted into
parser methods. See section \*(L"\s-1METHODS\s0 \s-1AVAILABLE\s0 \s-1IN\s0 \s-1THE\s0 \s-1GENERATED\s0 \s-1CLASS\s0\*(R" in Parse::Eyapp.
.PP
The returned value will be the attribute associated 
with the left hand side of the production.
.PP
Names can be given to the attributes using the dot notation
(see file \f(CW\*(C`examples/eyapplanguageref/CalcSimple.eyp\*(C'\fR):
.PP
.Vb 1
\&                     exp.left \*(Aq+\*(Aq exp.right { $left + $right }
.Ve
.PP
See section \*(L"\s-1NAMES\s0 \s-1FOR\s0 \s-1ATTRIBUTES\s0\*(R" for more details about the \fIdot\fR and \fIdollar\fR 
notations.
.PP
If no action is specified and no \f(CW%defaultaction\fR is specified
the default action
.PP
.Vb 1
\&                               { $_[1] }
.Ve
.PP
will be executed instead. See section \*(L"\s-1DEFAULT\s0 \s-1ACTIONS\s0\*(R" to know more.
.SS "Actions in Mid-Rule"
.IX Subsection "Actions in Mid-Rule"
Actions can be inserted in the middle of a production like in:
.PP
.Vb 1
\& block: \*(Aq{\*(Aq.bracket { $ids\->begin_scope(); } declaration*.decs statement*.sts \*(Aq}\*(Aq { ... }
.Ve
.PP
A middle production action is managed by inserting a new rule in the grammar and associating
the semantic action with it:
.PP
.Vb 1
\&                     Temp: /* empty */ { $ids\->begin_scope(); }
.Ve
.PP
Middle production actions can refer to the attributes on its left. They count
as one of the components of the production. Thus the program:
.PP
.Vb 5
\&  ~/LEyapp/examples/eyapplanguageref$ cat intermediateaction2.yp 
\&  %%
\&  S:  \*(Aqa\*(Aq { $_[1]x4 }.mid \*(Aqa\*(Aq { print "\en<<$_[2], $mid, $_[3]>>\en"; }
\&  ;
\&  %%
.Ve
.PP
The auxiliar syntactic variables are named \f(CW\*(C`@#position\-#order\*(C'\fR where \f(CW\*(C`#position\*(C'\fR
is the position of the action in the rhs and \f(CW\*(C`order\*(C'\fR is an ordinal number. See
the \f(CW\*(C`.output\*(C'\fR file for the former example:
.PP
.Vb 7
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-v intermediateaction2.yp
\&  ~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,5p\*(Aq intermediateaction2.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:  $start \-> S $end
\&  1:  S \-> \*(Aqa\*(Aq @1\-1 \*(Aqa\*(Aq
\&  2:  @1\-1 \-> /* empty */
.Ve
.PP
We can build an executable \f(CW\*(C`ia.pl\*(C'\fR from the former grammar using \f(CW\*(C`eyapp\*(C'\fR option \f(CW\*(C`\-C\*(C'\fR:
.PP
.Vb 1
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-C \-o ia.pl intermediateaction2.yp
.Ve
.PP
The \f(CW\*(C`main\*(C'\fR, error and lexer methods are provided by \f(CW\*(C`Parse::Eyapp\*(C'\fR.
When given input \f(CW\*(C`aa\*(C'\fR the execution will produce as output \f(CW\*(C`aaaa, aaaa, a\*(C'\fR. The option
\&\f(CW\*(C`\-d\*(C'\fR activates the debug mode, the option \f(CW\*(C`\-c\*(C'\fR tells the program to get the input from the command line::
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ ./ia.pl \-d \-c \*(Aqaa\*(Aq
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 0:
\&  Stack: 0
\&  Need token. Got >a<
\&  Shift and go to state 2.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 2:
\&  Stack: 0\->\*(Aqa\*(Aq\->2
\&  Don\*(Aqt need token.
\&  Reduce using rule 2 (@1\-1 \-\-> /* empty */): Back to state 2, then go to state 4.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 4:
\&  Stack: 0\->\*(Aqa\*(Aq\->2\->\*(Aq@1\-1\*(Aq\->4
\&  Need token. Got >a<
\&  Shift and go to state 5.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 5:
\&  Stack: 0\->\*(Aqa\*(Aq\->2\->\*(Aq@1\-1\*(Aq\->4\->\*(Aqa\*(Aq\->5
\&  Don\*(Aqt need token.
\&  Reduce using rule 1 (S \-\-> a @1\-1 a): 
\&  <<aaaa, aaaa, a>>
\&  Back to state 0, then go to state 1.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 1:
\&  Stack: 0\->\*(AqS\*(Aq\->1
\&  Need token. Got ><
\&  Shift and go to state 3.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 3:
\&  Stack: 0\->\*(AqS\*(Aq\->1\->\*(Aq\*(Aq\->3
\&  Don\*(Aqt need token.
\&  Accept.
.Ve
.SS "Example of Body Section"
.IX Subsection "Example of Body Section"
Following with the calculator example, the body is:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq17,/%%/p\*(Aq Calc.eyp | cat \-n 
\&     1  start:                                                                              
\&     2      input { \e%s }                                                                   
\&     3  ;
\&     4
\&     5  input: line *
\&     6  ;
\&     7
\&     8  line:
\&     9      \*(Aq\en\*(Aq       { undef }
\&    10    | exp \*(Aq\en\*(Aq   {
\&    11                    print "$_[1]\en" if defined($_[1]);
\&    12                    $_[1]
\&    13                 }
\&    14    | error  \*(Aq\en\*(Aq
\&    15        {
\&    16          $_[0]\->YYErrok;
\&    17          undef
\&    18        }
\&    19  ;
\&    20
\&    21  exp:
\&    22      NUM
\&    23    | $VAR                   { $s{$VAR} }
\&    24    | $VAR \*(Aq=\*(Aq $exp          { $s{$VAR} = $exp }
\&    25    | exp.left \*(Aq+\*(Aq exp.right { $left + $right }
\&    26    | exp.left \*(Aq\-\*(Aq exp.right { $left \- $right }
\&    27    | exp.left \*(Aq*\*(Aq exp.right { $left * $right }
\&    28    | exp.left \*(Aq/\*(Aq exp.right
\&    29      {
\&    30         $_[3] and return($_[1] / $_[3]);
\&    31         $_[0]\->YYData\->{ERRMSG} = "Illegal division by zero.\en";
\&    32         $_[0]\->YYError;
\&    33         undef
\&    34      }
\&    35    | \*(Aq\-\*(Aq $exp %prec NEG     { \-$exp }
\&    36    | exp.left \*(Aq^\*(Aq exp.right { $left ** $right }
\&    37    | \*(Aq(\*(Aq $exp \*(Aq)\*(Aq           { $exp }
\&    38  ;
\&    39
\&    40  %%
.Ve
.PP
This body does not uses any of the Eyapp extensions (with the exception of the 
\&\f(CW\*(C`*\*(C'\fR operator at line 5) and the dot and dollar notations.
.SS "Solving Ambiguities and Conflicts"
.IX Subsection "Solving Ambiguities and Conflicts"
When Eyapp analyzes a grammar like:
.PP
.Vb 7
\&  examples/eyapplanguageref$ cat \-n ambiguities.eyp
\&     1  %%
\&     2  exp:
\&     3      NUM
\&     4    | exp \*(Aq\-\*(Aq exp
\&     5  ;
\&     6  %%
.Ve
.PP
it will produce a warning announcing the existence of 
\&\fIshift-reduce\fR conflicts:
.PP
.Vb 5
\&  examples/eyapplanguageref$ eyapp ambiguities.eyp
\&  1 shift/reduce conflict (see .output file)
\&  State 5: reduce by rule 2: exp \-> exp \*(Aq\-\*(Aq exp (default action)
\&  State 5: shifts:
\&    to state    3 with \*(Aq\-\*(Aq
.Ve
.PP
when \f(CW\*(C`eyapp\*(C'\fR finds warnings automatically produces a \f(CW\*(C`.output\*(C'\fR file
describing the conflict.
.PP
What the warning is saying is that an expression like \f(CW\*(C`exp \*(Aq\-\*(Aq exp\*(C'\fR (rule 2) followed by a
minus \f(CW\*(Aq\-\*(Aq\fR can be parsed in more than one way. If we
have an input like \f(CW\*(C`NUM \- NUM \- NUM\*(C'\fR the activity of a \s-1\fILALR\s0\fR\|(1) parser
(the family of parsers to which Eyapp belongs)
consists of a sequence of \fIshift and reduce actions\fR. A \fIshift action\fR
has as consequence the reading of the next token. A \fIreduce action\fR
is finding a production rule that matches and substituting 
the rhs of the production by the lhs.  For input \f(CW\*(C`NUM \- NUM \- NUM\*(C'\fR
the activity will be as follows (the dot is used to indicate where the next 
input token is):
.PP
.Vb 6
\&                           .NUM \- NUM \- NUM # shift
\&                            NUM.\- NUM \- NUM # reduce exp: NUM 
\&                            exp.\- NUM \- NUM # shift
\&                            exp \-.NUM \- NUM # shift
\&                            exp \- NUM.\- NUM # reduce exp: NUM
\&                            exp \- exp.\- NUM # shift/reduce conflict
.Ve
.PP
up this point two different decisions can be taken: the next description can be
.PP
.Vb 1
\&                                  exp.\- NUM # reduce by exp: exp \*(Aq\-\*(Aq exp (rule 2)
.Ve
.PP
or:
.PP
.Vb 1
\&                            exp \- exp \-.NUM # shift \*(Aq\-\*(Aq (to state 3)
.Ve
.PP
that is why it is called a \fIshift-reduce conflict\fR.
.PP
That is also the reason for the precedence declarations in the 
head section. Another kind of conflicts are \fIreduce-reduce conflicts\fR.
They arise when more that rhs can be applied for a reduction
action.
.PP
Eyapp solves the conflicts applying the following rules:
.IP "\(bu" 4
In a shift/reduce conflict, the default is the shift.
.IP "\(bu" 4
In a reduce/reduce conflict, the default is to reduce by the
earlier grammar production (in the input sequence).
.IP "\(bu" 4
Precedences and associativities can be given to tokens in
the declarations section. This is made by a sequence of lines beginning
with one of the directives: \f(CW%left\fR, \f(CW%right\fR, or \f(CW%nonassoc\fR, 
followed by a list of
tokens. All the tokens on the same line
have the same precedence and associativity; 
the lines are listed in order of increasing precedence.
.IP "\(bu" 4
A precedence and associativity is associated with each grammar
production; it is the precedence and associativity of the \fIlast token\fR 
or \fIliteral\fR in the right hand side of the production.
.IP "\(bu" 4
The \f(CW%prec\fR directive can be used when
a rhs is involved in a conflict and has no tokens
inside or it has but the precedence of the last token leads
to an incorrect interpretation. A rhs can be followed by 
an optional \f(CW\*(C`%prec token\*(C'\fR directive
giving the production the precedence of the \f(CW\*(C`token\*(C'\fR
.Sp
.Vb 1
\&                          exp:   \*(Aq\-\*(Aq exp %prec NEG { \-$_[1] }
.Ve
.IP "\(bu" 4
If there is a shift/reduce conflict, and both the grammar production
and the input token have precedence and associativity associated
with them, then the conflict is solved in favor of the action (shift or
reduce) associated with the higher precedence. If the precedences are the
same, then the associativity is used; left associative implies reduce,
right associative implies shift, and non associative implies error.
The last is used to describe operators, like the operator \f(CW\*(C`.LT.\*(C'\fR in \s-1FORTRAN\s0, 
that may not associate with themselves. That is, because
.Sp
.Vb 1
\&                             A .LT. B .LT. C
.Ve
.Sp
is invalid in \s-1FORTRAN\s0, \f(CW\*(C`.LT.\*(C'\fR would be described with the keyword \f(CW%nonassoc\fR in eyapp.
.PP
To solve a shift-reduce conflict between a production \f(CW\*(C`A \-\-> SOMETHING\*(C'\fR
and a token \f(CW\*(Aqa\*(Aq\fR you can follow this procedure:
.ie n .IP "1. Edit the "".output"" file" 4
.el .IP "1. Edit the \f(CW.output\fR file" 4
.IX Item "1. Edit the .output file"
.PD 0
.IP "2. Search for the state where the conflict between the production and the token is. In our example it looks like:" 4
.IX Item "2. Search for the state where the conflict between the production and the token is. In our example it looks like:"
.PD
.Vb 2
\& pl@nereida:~/src/perl/YappWithDefaultAction/examples$ sed \-ne \*(Aq56,65p\*(Aq ambiguities.output
\& State 5:
\&
\&        exp \-> exp . \*(Aq\-\*(Aq exp    (Rule 2)
\&        exp \-> exp \*(Aq\-\*(Aq exp .    (Rule 2)
\&
\&        \*(Aq\-\*(Aq     shift, and go to state 3
\&
\&        \*(Aq\-\*(Aq     [reduce using rule 2 (exp)]
\&        $default        reduce using rule 2 (exp)
.Ve
.ie n .IP "3. Inside the state there has to be a production of the type ""A \-\-> SOMETHING."" (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form ""A \-\-> prefix . suffix"", where suffix can \fIstart\fR with the involved token \*(Aqa\*(Aq." 4
.el .IP "3. Inside the state there has to be a production of the type \f(CWA \-\-> SOMETHING.\fR (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form \f(CWA \-\-> prefix . suffix\fR, where suffix can \fIstart\fR with the involved token \f(CW\*(Aqa\*(Aq\fR." 4
.IX Item "3. Inside the state there has to be a production of the type A --> SOMETHING. (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form A --> prefix . suffix, where suffix can start with the involved token a."
.PD 0
.ie n .IP "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want ""NUM \- NUM \- NUM"" to produce a tree like ""MINUS(MINUS(NUM, NUM), NUM)"" and not ""MINUS(NUM, MINUS(NUM, NUM))"". We want the conflict in ""exp \- exp.\- NUM"" to be solved in favor of the reduction by ""exp: exp \*(Aq\-\*(Aq exp"". This is achieved by declaring ""%left \*(Aq\-\*(Aq""." 4
.el .IP "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want \f(CWNUM \- NUM \- NUM\fR to produce a tree like \f(CWMINUS(MINUS(NUM, NUM), NUM)\fR and not \f(CWMINUS(NUM, MINUS(NUM, NUM))\fR. We want the conflict in \f(CWexp \- exp.\- NUM\fR to be solved in favor of the reduction by \f(CWexp: exp \*(Aq\-\*(Aq exp\fR. This is achieved by declaring \f(CW%left \*(Aq\-\*(Aq\fR." 4
.IX Item "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want NUM - NUM - NUM to produce a tree like MINUS(MINUS(NUM, NUM), NUM) and not MINUS(NUM, MINUS(NUM, NUM)). We want the conflict in exp - exp.- NUM to be solved in favor of the reduction by exp: exp - exp. This is achieved by declaring %left -."
.PD
.SS "Error Recovery"
.IX Subsection "Error Recovery"
The token name \f(CW\*(C`error\*(C'\fR is reserved for error handling. This name can
be used in grammar productions; it suggests places where errors are
expected, and recovery can take place:
.PP
.Vb 8
\&     line:
\&       \*(Aq\en\*(Aq         { undef }
\&       | exp \*(Aq\en\*(Aq   { print "$_[1]\en" if defined($_[1]); $_[1] }
\&       | error  \*(Aq\en\*(Aq
\&           {
\&             $_[0]\->YYErrok;
\&             undef
\&           }
.Ve
.PP
The parser pops its stack until
it enters a state where the token \f(CW\*(C`error\*(C'\fR is legal. It then shifts
the token \f(CW\*(C`error\*(C'\fR and proceeds to discard tokens until finding 
one that is acceptable. In the example
all the tokens until finding a \f(CW\*(Aq\en\*(Aq\fR will be skipped. 
If no special error productions have been specified,
the processing will halt.
.PP
In order to prevent a cascade of error messages, the parser, after
detecting an error, remains in error state until three tokens have been
successfully read and shifted. If an error is detected when the parser
is already in error state, no message is given, and the input token is
quietly deleted. The method \f(CW\*(C`YYErrok\*(C'\fR used in the example 
communicates to the parser
that a satisfactory recovery has been reached 
and that it can safely emit new error
messages.
.PP
You cannot have a literal \fI'error'\fR in your grammar as it would
confuse the driver with the \fIerror\fR token. Use a symbolic token instead.
.SH "THE TAIL"
.IX Header "THE TAIL"
The tail section contains Perl code. Usually it is empty, but you
can if you want put here your own lexical analyzer and 
error management subroutines.
An example of this is in
files \f(CW\*(C`examples/eyapplanguageref/List3_tree_d_sem.yp\*(C'\fR (the grammar)
and \f(CW\*(C`use_list3_tree_d_dem.pl\*(C'\fR (the client).
.SH "THE LEXICAL ANALYZER"
.IX Header "THE LEXICAL ANALYZER"
The Lexical Analyzer 
is called each time the parser needs a new token.
It is called with only one argument (the parser object)
and returns a pair 
containing the next token and its associated attribute.
.PP
The fact that is a method of the parser object means that the parser
methods are accessible inside the lexical analyzer.
.PP
When the lexical analyzer reaches the end of input, it must return the
pair \f(CW\*(C`(\*(Aq\*(Aq, undef)\*(C'\fR
.SS "Automatic Generation of Lexical Analyzers"
.IX Subsection "Automatic Generation of Lexical Analyzers"
By default a lexical analyzer is built.
The \f(CW\*(C`eyapp\*(C'\fR option \f(CW\*(C`\-l\*(C'\fR
can be used to inhibit the generation of 
the default lexical analyzer. In such case,
one must be explictly provided.
.PP
\fINo token Definitions\fR
.IX Subsection "No token Definitions"
.PP
When no token definitions are given in the head section, 
the default lexical analyzer simply assumes
that the token is the string literal. See this example in 
file \f(CW\*(C`examples/lexergeneration/simple.yp\*(C'\fR:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat simple.yp
\&  %%
\&  A:    a
\&      | A d
\&  ;
\&  %%
.Ve
.PP
The grammar does not describes the lexical analyzer nor the error default subroutine.
Eyapp will generate default lexical and error subroutines:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-o simple.pl \-TC simple.yp
\&
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ls \-ltr | tail \-2
\&  \-rw\-r\-\-r\-\- 1 pl pl   27 2010\-06\-29 10:28 simple.yp
\&  \-rwxr\-xr\-x 1 pl pl 3245 2010\-06\-29 10:35 simple.pl
.Ve
.PP
The option \f(CW\*(C`\-T\*(C'\fR is equivalent to insert the \f(CW%tree\fR directive in the head section.
Since no names were explicitly given to the productions, the names of the productions are built using
the pattern \f(CW\*(C`Lhs_is_RHS\*(C'\fR.
.PP
Option \f(CW\*(C`\-C\*(C'\fR instructs the \f(CW\*(C`eyapp\*(C'\fR compiler to produce an executable by setting the execution permits
(see \f(CW\*(C`simple.pl\*(C'\fR permits above), inserting the appropriate she bang directive:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ head simple.pl | head \-1
\&  #!/usr/bin/perl
.Ve
.PP
and inserting a call to the package \f(CW\*(C`main\*(C'\fR subroutine at the end of the generated parser:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ tail \-6 simple.pl
\&  unless (caller) {
\&    exit !_\|_PACKAGE_\|_\->main(\*(Aq\*(Aq);
\&  }
.Ve
.PP
If no \f(CW\*(C`main\*(C'\fR was provided, \f(CW\*(C`eyapp\*(C'\fR will provide one.
.PP
Tokens \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`d\*(C'\fR are assumed to represent strings \f(CW\*(Aqa\*(Aq\fR
and \f(CW\*(Aqd\*(Aq\fR respectively.
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-i \-t \-c \*(Aqa d d\*(Aq
\&  A_is_A_d(A_is_A_d(A_is_a(TERMINAL[a]),TERMINAL[d]),TERMINAL[d])
.Ve
.PP
The \f(CW\*(C`main\*(C'\fR method provided by \f(CW\*(C`eyapp\*(C'\fR accepts several options in the command line:
.IP "\(bu" 2
\&\f(CW\*(C`\-t\*(C'\fR Prints the abstract syntax tree
.IP "\(bu" 2
\&\f(CW\*(C`\-i\*(C'\fR Shows the semantic value associated with each terminal
.IP "\(bu" 2
\&\f(CW\*(C`\-c string\*(C'\fR Indicates that the input is given by the \f(CW\*(C`string\*(C'\fR that follows the option
.PP
You can get the set of available options using \f(CW\*(C`\-\-help\*(C'\fR:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-h
\&  Available options:
\&    \-\-debug                    sets yydebug on
\&    \-\-nodebug                  sets yydebug off
\&    \-\-file filepath            read input from filepath
\&    \-\-commandinput string      read input from string
\&    \-\-tree                     prints $tree\->str
\&    \-\-notree                   does not print $tree\->str
\&    \-\-info                     When printing $tree\->str shows the value of TERMINALs
\&    \-\-help                     shows this help
\&    \-\-slurp                    read until EOF reached
\&    \-\-noslurp                  read until CR is reached
\&    \-\-argfile                  main() will take the input string from its @_
\&    \-\-noargfile                main() will not take the input string from its @_
\&    \-\-yaml                     dumps YAML for $tree: YAML module must be installed
\&    \-\-margin=i                 controls the indentation of $tree\->str (i.e. $Parse::Eyapp::Node::INDENT)
.Ve
.PP
If we try to feed it with an illegal input, an error message is emitted:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-i \-t \-c \*(Aqa e d\*(Aq
\&  Error inside the lexical analyzer near \*(Aqe\*(Aq. Line: 1. File: \*(Aqsimple.yp\*(Aq. No match found.
.Ve
.PP
In the example above we have taken advantage of the \f(CW\*(C`main\*(C'\fR method provided by Eyapp.
If we want to keep in control of the parsing process, we can write a client program that 
makes use of the generated modulino:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n usesimple.pl
\&     1  #!/usr/bin/env perl
\&     2  use warnings;
\&     3  use strict;
\&     4
\&     5  use simple;
\&     6
\&     7  # build a parser object
\&     8  my $parser = simple\->new();
\&     9
\&    10  # take the input from the command line arguments
\&    11  # or from STDIN
\&    12  my $input = join \*(Aq \*(Aq,@ARGV;
\&    13  $input = <> unless $input;
\&    14
\&    15  # set the input
\&    16  $parser\->input($input);
\&    17
\&    18  # parse the input and get the AST
\&    19  my $tree = $parser\->YYParse();
\&    20
\&    21  print $tree\->str()."\en";
.Ve
.PP
Here is an example of execution:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-T simple.yp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./usesimple.pl a d d
\&  A_is_A_d(A_is_A_d(A_is_a(TERMINAL),TERMINAL),TERMINAL)
.Ve
.PP
\fIToken Definitions: Regular Expressions\fR
.IX Subsection "Token Definitions: Regular Expressions"
.PP
Eyapp extends the \f(CW%token\fR directive with the syntax:
.PP
.Vb 1
\&     %token TOKENID = /regexp/
.Ve
.PP
If such definition is used, an entry with the shape:
.PP
.Vb 1
\&   /\eG$regexp/gc and return (\*(AqTOKENID\*(Aq, $1);
.Ve
.PP
will be added to the generated lexical analyzer.
Therefore the string associated with the first parenthesis in \f(CW\*(C`/regexp/\*(C'\fR
will be used as semantic value for \f(CW\*(C`TOKENID\*(C'\fR. If \f(CW\*(C`/regexp/\*(C'\fR has no
parenthesis \f(CW\*(C`undef\*(C'\fR will be the semantic value.
See this example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n numlist.eyp
\&     1  %token NUM = /(\ed+)/
\&     2  %token ID  = /(\ew+)/
\&     3
\&     4  %%
\&     5  A:
\&     6        B
\&     7      | A B
\&     8  ;
\&     9
\&    10  B:
\&    11        ID
\&    12      | a
\&    13      | NUM
\&    14  ;
\&    15  %%
.Ve
.PP
The order of the \f(CW%token\fR declarations is important. 
In the example the token \f(CW\*(C`NUM\*(C'\fR is a subset of the token \f(CW\*(C`ID\*(C'\fR.
Since it appears first, it will be tried first:
.PP
.Vb 2
\&     /\eG(\ed+)/gc and return (\*(AqNUM\*(Aq, $1);
\&     /\eG(\ew+)/gc and return (\*(AqID\*(Aq, $1);
.Ve
.PP
Also observe that token \f(CW\*(Aqa\*(Aq\fR (line 12) is contained
in token \f(CW\*(C`ID\*(C'\fR. However, any implicit token like this that appears in the
body section and was not 
declared using an explicit \f(CW%token\fR directive in the
head section takes priority over the ones declared.
See the behavior of the former program:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC numlist
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./numlist.pm \-t \-i \-c \*(Aq4 a b\*(Aq
\&  A_is_A_B(A_is_A_B(A_is_B(B_is_NUM(TERMINAL[4])),B_is_a(TERMINAL[a])),B_is_ID(TERMINAL[b]))
.Ve
.PP
The lexical analyzer returned \f(CW\*(C`NUM\*(C'\fR and not \f(CW\*(C`ID\*(C'\fR when \f(CW4\fR was processed,
also it returned \f(CW\*(C`a\*(C'\fR and not \f(CW\*(C`ID\*(C'\fR when \f(CW\*(Aqa\*(Aq\fR was 
processed.
.PP
A \f(CW%token\fR declaration without assignment like in:
.PP
.Vb 1
\&   %token A B
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&  %token A   = /(A)/
\&  %token B   = /(B)/
.Ve
.PP
(in that order).
.PP
\fIToken Definitions via Code\fR
.IX Subsection "Token Definitions via Code"
.PP
An alternative way to define a token is via Perl code:
.PP
.Vb 1
\&      %token TOKENID = { ... }
.Ve
.PP
in such case the code defining \f(CW\*(C`TOKENID\*(C'\fR will be inserted
verbatim in the corresponding place of the generated lexical 
analyzer. When the code \f(CW\*(C`{ ... }\*(C'\fR
is executed, the variable \f(CW$_\fR 
contains the input being parsed and
the special variable \f(CW$self\fR refers to the parser object.
The following example is equivalent to the one used in the previous
section:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n tokensemdef.eyp
\&     1  %token NUM = /(\ed+)/
\&     2  %token ID  = { /\eG(\ew+)/gc and return (\*(AqID\*(Aq, $1); }
\&     3
\&     4  %%
\&     5  A:
\&     6        B
\&     7      | A B
\&     8  ;
\&     9
\&    10  B:
\&    11        ID
\&    12      | a
\&    13      | NUM
\&    14  ;
\&    15  %%
.Ve
.PP
Follows an example of compilation and execution:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC tokensemdef.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./tokensemdef.pm \-t \-i \-nos
\&  4 a b
\&  A_is_A_B(A_is_A_B(A_is_B(B_is_NUM(TERMINAL[4])),B_is_a(TERMINAL[a])),B_is_ID(TERMINAL[b]))
.Ve
.PP
\fIToken Definitions: Controling whites\fR
.IX Subsection "Token Definitions: Controling whites"
.PP
By default, the generated lexical analyzer skips 
white spaces, defined as \f(CW\*(C`/\es*/\*(C'\fR. The programmer
can change this behavior using the \f(CW%whites\fR directive.
The following example permits Perl-like comments 
in the input:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n simplewithwhites.eyp
\&     1  %whites  /(\es*(?:#.*)?\es*)/
\&     2  %%
\&     3  A:    a
\&     4      | A d
\&     5  ;
\&     6  %%
.Ve
.PP
Follows an example of execution:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-nA input
\&       1  a # 1$
\&       2  $
\&       3  d ^I#2$
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC simplewithwhites.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simplewithwhites.pm \-t \-i \-f input
\&  A_is_A_d(A_is_a(TERMINAL[a]),TERMINAL[d])
.Ve
.PP
The \f(CW%white\fR directive can be followed by some Perl
code defining the white spaces:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n simplewithwhitescode.eyp
\&     1  %whites  { /\eG(\es*(?:#.*)?\es*)/gc and $self\->tokenline($1 =~ tr{\en}{}) }
\&     2  %%
\&     3  A:    a
\&     4      | A d
\&     5  ;
\&     6  %%
.Ve
.SS "Reading Input from File"
.IX Subsection "Reading Input from File"
You can use the method \f(CW\*(C`YYSlurpFile\*(C'\fR to read the input from a file
and set the input for the parser to its contents.
Yo can also use the \f(CW\*(C`YYInput\*(C'\fR method to set the input.
.PP
See the example below:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n usesimplefromfile.pl
\&     1  #!/usr/bin/env perl
\&     2  use warnings;
\&     3  use strict;
\&     4
\&     5  use simplewithwhites;
\&     6
\&     7  my $parser = simplewithwhites\->new();
\&     8
\&     9  # take the input from the specified file
\&    10  my $fn = shift;
\&    11
\&    12  $parser\->YYSlurpFile($fn);
\&    13
\&    14  # parse the input and get the AST
\&    15  my $tree = $parser\->YYParse();
\&    16
\&    17  print $tree\->str()."\en";
.Ve
.PP
First, compile the grammar \f(CW\*(C`simplewithwhites.eyp\*(C'\fR presented above:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-T simplewithwhites
.Ve
.PP
And then run it:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n  input
\&     1  a # 1
\&     2
\&     3  d       #2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./usesimplefromfile.pl input
\&  A_is_A_d(A_is_a(TERMINAL),TERMINAL)
.Ve
.SS "Huge input and Incremental Lexical Analyzers"
.IX Subsection "Huge input and Incremental Lexical Analyzers"
If your input is huge, try to make use of an incremental
lexical analyzer. In an incremental lexer the input
is read and parsed in chunks. Read up to a 
point where  it is safe to parse.
In the example below, the lexer reads a new line
each time we reach the end of the input string \f(CW\*(C`${$parser\->YYInput}\*(C'\fR.
In the case of the arithmetic expressions grammar below,
by reading up to \f(CW\*(Aq\en\*(Aq\fR, we are sure that the input is not
broken in the middle of a token.
Instead of having the whole huge input in memory,
we only keep a small substring.
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n Incremental.eyp                    
\&     1  %right  \*(Aq=\*(Aq                                                                     
\&     2  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq                                                                 
\&     3  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq                                                                 
\&     4  %left   NEG                                                                     
\&     5                                                                                  
\&     6  %tree                                                                           
\&     7                                                                                  
\&     8  %%                                                                              
\&     9  input:                                                                          
\&    10          |   input $line  { print $line\->str."\en" }                              
\&    11  ;                                                                               
\&    12                                                                                  
\&    13  line:     \*(Aq\en\*(Aq                                                                  
\&    14          | exp \*(Aq\en\*(Aq
\&    15          | error \*(Aq\en\*(Aq
\&    16  ;
\&    17
\&    18  exp:        NUM
\&    19          |   VAR
\&    20          |   VAR \*(Aq=\*(Aq exp
\&    21          |   exp \*(Aq+\*(Aq exp
\&    22          |   exp \*(Aq\-\*(Aq exp
\&    23          |   exp \*(Aq*\*(Aq exp
\&    24          |   exp \*(Aq/\*(Aq exp
\&    25          |   \*(Aq\-\*(Aq exp %prec NEG
\&    26          |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    27  ;
\&    28
\&    29  %%
\&    30
\&    31  sub _Lexer {
\&    32      my($parser)=shift;
\&    33
\&    34      if ($parser\->YYEndOfInput) {
\&    35        my $input = <STDIN>;
\&    36        return(\*(Aq\*(Aq, undef) unless $input;
\&    37        $parser\->input($input);
\&    38      };
\&    39
\&    40      for (${$parser\->YYInput}) {
\&    41          m/\eG[ \et]*/gc;
\&    42          m/\eG([0\-9]+(?:\e.[0\-9]+)?)/gc and return(\*(AqNUM\*(Aq,$1);
\&    43          m/\eG([A\-Za\-z][A\-Za\-z0\-9_]*)/gc and return(\*(AqVAR\*(Aq,$1);
\&    44          m/\eG(.)/gcs and return($1,$1);
\&    45          return(\*(Aq\*(Aq, undef);
\&    46      }
\&    47  }
\&    48
\&    49  _\|_PACKAGE_\|_\->lexer(\e&_Lexer);
.Ve
.PP
This approach has limitations. The code will get more tangled if some token
can take more than one line. For example, if we extend this language to accept 
C\-like comments \f(CW\*(C`/* ... */\*(C'\fR which expands over several lines.
.PP
Here follows an example of execution. 
This is the client program:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat useincremental.pl
\&  #!/usr/bin/perl \-w
\&  use Incremental;
\&
\&  Incremental\->new\->YYParse;
.Ve
.PP
This is a small test input file:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat inputforincremental
\&  a = 2
\&  a+3
\&  b=4
\&  b*2+a
.Ve
.PP
Finally, see the results of the execution:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./useincremental.pl < inputforincremental
\&  line_4(exp_8(TERMINAL,exp_6(TERMINAL)))
\&  line_4(exp_9(exp_7(TERMINAL),exp_6(TERMINAL)))
\&  line_4(exp_8(TERMINAL,exp_6(TERMINAL)))
\&  line_4(exp_9(exp_11(exp_7(TERMINAL),exp_6(TERMINAL)),exp_7(TERMINAL)))
.Ve
.PP
The numbers in the output refer to the production number:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-v Incremental.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ sed \-ne \*(Aq/Rules:/,/^$/p\*(Aq Incremental.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> input $end
\&  1:      input \-> /* empty */
\&  2:      input \-> input line
\&  3:      line \-> \*(Aq\en\*(Aq
\&  4:      line \-> exp \*(Aq\en\*(Aq
\&  5:      line \-> error \*(Aq\en\*(Aq
\&  6:      exp \-> NUM
\&  7:      exp \-> VAR
\&  8:      exp \-> VAR \*(Aq=\*(Aq exp
\&  9:      exp \-> exp \*(Aq+\*(Aq exp
\&  10:     exp \-> exp \*(Aq\-\*(Aq exp
\&  11:     exp \-> exp \*(Aq*\*(Aq exp
\&  12:     exp \-> exp \*(Aq/\*(Aq exp
\&  13:     exp \-> \*(Aq\-\*(Aq exp
\&  14:     exp \-> \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.SS "Using Several Lexical Analyzers for the Same Parser"
.IX Subsection "Using Several Lexical Analyzers for the Same Parser"
At any time during the parsing you can use the method
\&\f(CW\*(C`$parser\->YYLexer\*(C'\fR to set a new lexical analyzer.
.PP
The following grammar starts setting the lexer
to  sub \f(CW\*(C`Lexer1\*(C'\fR (line 44). It later changes
the lexer to \f(CW\*(C`Lexer2\*(C'\fR (ine 24)
after the token \f(CW\*(Aq%%\*(Aq\fR is seen. 
Inside \f(CW\*(C`Lexer2\*(C'\fR the token \f(CW\*(C`A\*(C'\fR represents a \f(CW\*(AqB\*(Aq\fR.
This capability
allows the parsing of languages where different sections 
require different lexical analysis. For example, in \f(CW\*(C`yacc\*(C'\fR,
carriage returns separates declarations in the header 
section but is considered a white space inside the
body and tail sections. This feature has 
similar power to the \fIstate\fR concept of the
lexical analyzer generator \f(CW\*(C`flex\*(C'\fR.
.PP
.Vb 10
\&  $ cat \-n twolexers.eyp 
\&     1  %%
\&     2  s:  first \*(Aq%%\*(Aq second
\&     3  ;
\&     4  
\&     5  first:
\&     6      A first
\&     7    | A
\&     8  ;
\&     9  
\&    10  second:
\&    11      A second
\&    12    | A
\&    13  ;
\&    14  
\&    15  %%
\&    16  
\&    17  sub Lexer1 {
\&    18      my($parser)=shift;
\&    19  
\&    20      print "In Lexer 1 \en";
\&    21      for (${$parser\->YYInput}) {
\&    22          m/\eG\es*/gc;
\&    23          m/\eG(%%)/gc and do {
\&    24            $parser\->YYLexer(\e&Lexer2);
\&    25            return ($1, undef);
\&    26          };
\&    27          m/\eG(.)/gcs and return($1,$1);
\&    28          return(\*(Aq\*(Aq, undef);
\&    29      }
\&    30  }
\&    31  
\&    32  sub Lexer2 {
\&    33      my($parser)=shift;
\&    34  
\&    35      print "In Lexer 2 \en";
\&    36      for (${$parser\->YYInput}) {
\&    37          m/\eG\es*/gc;
\&    38          m/\eGB/gc    and return(\*(AqA\*(Aq,\*(AqB\*(Aq);
\&    39          m/\eG(.)/gcs and die "Error. Expected \*(AqB\*(Aq, found $1\en";
\&    40      }
\&    41          return(\*(Aq\*(Aq, undef);
\&    42  }
\&    43  
\&    44  _\|_PACKAGE_\|_\->lexer(\e&Lexer1);
.Ve
.PP
When executed, it behaves like this:
.PP
.Vb 7
\&        $ ./twolexers.pm \-t \-i \-m 1 \-c \*(AqA A %% B B\*(Aq
\&        In Lexer 1 
\&        In Lexer 1 
\&        In Lexer 1 
\&        In Lexer 2 
\&        In Lexer 2 
\&        In Lexer 2 
\&
\&        s_is_first_second(
\&          first_is_A_first(
\&            TERMINAL[A],
\&            first_is_A(
\&              TERMINAL[A]
\&            )
\&          ),
\&          second_is_A_second(
\&            TERMINAL[B],
\&            second_is_A(
\&              TERMINAL[B]
\&            )
\&          )
\&        )
.Ve
.PP
The lexer can bechanged at any time. The following example
starts using the default lexer generated by \f(CW\*(C`eyapp\*(C'\fR.
It changes the lexer to \f(CW\*(C`Lexer2\*(C'\fRinside an intermediate semantic action (line 7).
Inside \f(CW\*(C`Lexer2\*(C'\fR  the token \f(CW\*(C`A\*(C'\fR is interpreted as a word \f(CW\*(C`\ew+\*(C'\fR.
.PP
.Vb 10
\&   $ cat \-n twolexers2.eyp 
\&     1  # Compile it with:
\&     2  # $ eyapp \-TC twolexers2.eyp 
\&     3  # Run it with:
\&     4  # $ ./twolexers2.pm \-t \-i \-c \*(AqA A %% d3 c2\*(Aq
\&     5  
\&     6  %%
\&     7  s:  first \*(Aq%%\*(Aq { $_[0]\->YYLexer(\e&Lexer2) } second
\&     8  ;
\&     9  
\&    10  first:
\&    11      A first
\&    12    | A
\&    13  ;
\&    14  
\&    15  second:
\&    16      A second
\&    17    | A
\&    18  ;
\&    19  
\&    20  %%
\&    21  
\&    22  sub Lexer2 {
\&    23      my($parser)=shift;
\&    24  
\&    25      print "In Lexer 2 \en";
\&    26      for (${$parser\->YYInput}) {
\&    27          m/\eG\es*/gc;
\&    28          m/\eG(\ew+)/gc    and return(\*(AqA\*(Aq,$1);
\&    29          m/\eG(.)/gcs and die "Error. Expected a word,Found $1\en";
\&    30      }
\&    31      return(\*(Aq\*(Aq, undef);
\&    32  }
.Ve
.SH "THE ERROR REPORT SUBROUTINE"
.IX Header "THE ERROR REPORT SUBROUTINE"
The Error Report subroutine is also a parser attribute, 
and must be defined. By default \f(CW\*(C`Parse::Eyapp\*(C'\fR
provides a convenient error handler.
.PP
See the Parse::Yapp pages and elsewhere documentation
on \f(CW\*(C`yacc\*(C'\fR and \f(CW\*(C`bison\*(C'\fR for more information.
.SH "USING AN EYAPP GRAMMAR"
.IX Header "USING AN EYAPP GRAMMAR"
The following is an example of a program that uses the calculator explained 
in the two previous sections:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n usecalc.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Calc;
\&     4
\&     5  my $parser = Calc\->new();
\&     6  $parser\->input(\e<<\*(AqEOI\*(Aq
\&     7  a = 2*3       # 1: 6
\&     8  d = 5/(a\-6)   # 2: division by zero
\&     9  b = (a+1)/7   # 3: 1
\&    10  c=a*3+4)\-5    # 4: syntax error
\&    11  a = a+1       # 5: 7
\&    12  EOI
\&    13  );
\&    14  my $t = $parser\->Run();
\&    15  print "========= Symbol Table ==============\en";
\&    16  print "$_ = $t\->{$_}\en" for sort keys %$t;
.Ve
.PP
The output for this program is (the input for each output
appear as a Perl comment on the right):
.PP
.Vb 1
\&  pl@nereida:~/src/perl/YappWithDefaultAction/examples$ eyapp Calc.eyp
\&
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./usecalc.pl
\&  6
\&  Illegal division by zero.
\&  1
\&
\&  Syntax error near \*(Aq)\*(Aq (line number 4).
\&  Expected one of these terminals: \*(Aq\-\*(Aq \*(Aq/\*(Aq \*(Aq^\*(Aq \*(Aq*\*(Aq \*(Aq+\*(Aq \*(Aq
\&  \*(Aq
\&  7
\&  ========= Symbol Table ==============
\&  a = 7
\&  b = 1
\&  c = 22
.Ve
.SH "LISTS AND OPTIONALS"
.IX Header "LISTS AND OPTIONALS"
The elements of the right hand side of a production (abbreviated \fIrhs\fR) can be one of these:
.PP
.Vb 9
\&  rhselt:     
\&        symbol    
\&      | code    
\&      | \*(Aq(\*(Aq optname rhs \*(Aq)\*(Aq 
\&      | rhselt STAR               /* STAR   is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e*  */
\&      | rhselt \*(Aq<\*(Aq STAR symbol \*(Aq>\*(Aq 
\&      | rhselt OPTION             /* OPTION is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e?  */
\&      | rhselt \*(Aq<\*(Aq PLUS symbol \*(Aq>\*(Aq
\&      | rhselt PLUS               /* PLUS   is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e+  */
.Ve
.PP
The \f(CW\*(C`STAR\*(C'\fR, \f(CW\*(C`OPTION\*(C'\fR and \f(CW\*(C`PLUS\*(C'\fR operators provide a simple mechanism
to express lists:
.IP "\(bu" 4
In Eyapp the \f(CW\*(C`+\*(C'\fR operator indicates one or more repetitions of the element
to the left of \f(CW\*(C`+\*(C'\fR, thus a rule like:
.Sp
.Vb 1
\&                        decls:  decl +
.Ve
.Sp
is the same as:
.Sp
.Vb 2
\&                        decls:  decls decl 
\&                             |  decl
.Ve
.Sp
An additional  symbol may be included  to indicate lists of elements 
separated by such symbol. Thus
.Sp
.Vb 1
\&                       rhss: rule <+ \*(Aq|\*(Aq>
.Ve
.Sp
is equivalent to:
.Sp
.Vb 2
\&                       rhss: rhss \*(Aq|\*(Aq rule 
\&                           | rule
.Ve
.IP "\(bu" 4
The operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`?\*(C'\fR have their usual meaning: 0 or more for
\&\f(CW\*(C`*\*(C'\fR and optionality for \f(CW\*(C`?\*(C'\fR. Is legal to parenthesize 
a \f(CW\*(C`rhs\*(C'\fR expression as in:
.Sp
.Vb 1
\&                       optname: (NAME IDENT)?
.Ve
.ie n .SS "The ""+"" operator"
.el .SS "The \f(CW+\fP operator"
.IX Subsection "The + operator"
The grammar:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat List3.yp 
\&  %semantic token \*(Aqc\*(Aq 
\&  %{
\&  use Data::Dumper;
\&  $Data::Dumper::Indent = 1;
\&  %}
\&  %%
\&  S:      \*(Aqc\*(Aq+  \*(Aqd\*(Aq+ 
\&             { 
\&                print Dumper($_[1]);
\&                print Dumper($_[2]);
\&             } 
\&  ;
\&  %%
.Ve
.PP
Is equivalent to:
.PP
.Vb 9
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-v List3.yp; head \-9 List3.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:  $start \-> S $end
\&  1:  PLUS\-1 \-> PLUS\-1 \*(Aqc\*(Aq
\&  2:  PLUS\-1 \-> \*(Aqc\*(Aq
\&  3:  PLUS\-2 \-> PLUS\-2 \*(Aqd\*(Aq
\&  4:  PLUS\-2 \-> \*(Aqd\*(Aq
\&  5:  S \-> PLUS\-1 PLUS\-2
.Ve
.PP
By default, the semantic action associated with a \f(CW\*(C`+\*(C'\fR returns the lists of attributes
to which the \f(CW\*(C`+\*(C'\fR applies:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./use_list3.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = [ \*(Aqc\*(Aq, \*(Aqc\*(Aq ];
\&  $VAR1 = [ \*(Aqd\*(Aq, \*(Aqd\*(Aq ];
.Ve
.PP
Observe that, in spite of \f(CW\*(Aqd\*(Aq\fR being a syntactic token
the actions related with the \f(CW\*(C`d+\*(C'\fR element (i.e. the actions associated
with the \f(CW\*(C`PLUS\-2\*(C'\fR productions) create the list of \f(CW\*(C`d\*(C'\fRs.
.PP
The semantic associated with a \f(CW\*(C`+\*(C'\fR changes 
when one of the tree creation directives is active (for instance \f(CW%tree\fR or \f(CW%metatree\fR)
or it has been explicitly requested with a call to the \f(CW\*(C`YYBuildingTree\*(C'\fR method:
.PP
.Vb 1
\&                            $self\->YYBuildingTree(1);
.Ve
.PP
Other ways to change the associated semantic are to use the 
\&\f(CW\*(C`yybuildingtree\*(C'\fR option of \f(CW\*(C`YYParse\*(C'\fR:
.PP
.Vb 4
\&         $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&                           yybuildingtree => 1,
\&                         # yydebug => 0x1F
\&         );
.Ve
.PP
In such case the associated semantic action creates a node labelled
.PP
.Vb 1
\&                     _PLUS_LIST
.Ve
.PP
whose children are the attributes associated with the items in the plus list. 
As it happens when using the \f(CW%tree\fR directive, \fIsyntactic tokens\fR are skipped.
.PP
When executing the example above but under the \f(CW%tree\fR directive
the output changes. The \f(CW\*(C`\-T\*(C'\fR option tells the \f(CW\*(C`eyapp\*(C'\fR compiler
to introduce an implicit \f(CW%tree\fR directive>:
.PP
.Vb 1
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-T List3.yp
.Ve
.PP
If we now run the client program with input \f(CW\*(C`ccdd\*(C'\fR we get
a couple of syntax trees:
.PP
.Vb 9
\&  ~/LEyapp/examples/eyapplanguageref$ ./use_list3.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  $VAR1 = bless( { \*(Aqchildren\*(Aq => [] }, \*(Aq_PLUS_LIST\*(Aq );
.Ve
.PP
The node associated with the list of \f(CW\*(C`d\*(C'\fRs is empty since
terminal \f(CW\*(C`d\*(C'\fR wasn't declared semantic.
.SS "When Nodes Disappear from Lists"
.IX Subsection "When Nodes Disappear from Lists"
When under the influence of the \f(CW%tree\fR directive
the action associated with a list operator
is to \fIflat\fR the children in a single list.
.PP
In the former example, the \f(CW\*(C`d\*(C'\fR nodes don't show up 
since \f(CW\*(Aqd\*(Aq\fR is a syntactic token. However, it may happen that changing the status
of \f(CW\*(Aqd\*(Aq\fR to semantic will not suffice.
.PP
When inserting the children, the tree (\f(CW%tree\fR)  node construction
method (\f(CW\*(C`YYBuildAST\*(C'\fR) omits any attribute that is not a reference.
Therefore, when inserting explicit actions, it is necessary to guarantee that 
the returned value is a reference or a semantic token 
to assure the presence of the value in the lists of children of the node.
Certainly you can use this property to prune parts of the tree.
Consider the following example:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat ListWithRefs1.eyp 
\&  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&  %{
\&  use Data::Dumper;
\&  $Data::Dumper::Indent = 1;
\&  %}
\&  %%
\&  S:      \*(Aqc\*(Aq+  D+ 
\&             { 
\&                print Dumper($_[1]);
\&                print $_[1]\->str."\en";
\&                print Dumper($_[2]);
\&                print $_[2]\->str."\en";
\&             } 
\&  ;
\&
\&  D: \*(Aqd\*(Aq
\&  ;
\&
\&  %%
\&
\&  sub Run {
\&    my ($self) = shift;
\&    return $self\->YYParse( yybuildingtree => 1 );
\&  }
.Ve
.PP
To activate the \fItree semantic\fR for lists we use the \f(CW\*(C`yybuildingtree\*(C'\fR
option of \f(CW\*(C`YYParse\*(C'\fR (line 26).
.PP
The execution gives an output like this:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp ListWithRefs1.eyp; ./use_listwithrefs1.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  _PLUS_LIST(TERMINAL,TERMINAL)
\&  $VAR1 = bless( { \*(Aqchildren\*(Aq => [] }, \*(Aq_PLUS_LIST\*(Aq ); _PLUS_LIST
.Ve
.PP
Though \f(CW\*(Aqd\*(Aq\fR was declared semantic the default action 
associated with the production \f(CW\*(C`D: \*(Aqd\*(Aq\*(C'\fR in line 16
returns \f(CW$_[1]\fR (that is, the scalar \f(CW\*(Aqd\*(Aq\fR). Since it is not
a reference it won't be inserted in the list of children of
\&\f(CW\*(C`_PLUS_LIST\*(C'\fR.
.SS "Recovering the Missing Nodes"
.IX Subsection "Recovering the Missing Nodes"
The solution is to be sure that the attribute is a reference:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat \-n ListWithRefs.eyp
\&     1  %semantic token \*(Aqc\*(Aq 
\&     2  %{
\&     3  use Data::Dumper;
\&     4  $Data::Dumper::Indent = 1;
\&     5  %}
\&     6  %%
\&     7  S:  \*(Aqc\*(Aq+  D+ 
\&     8        { 
\&     9           print Dumper($_[1]);
\&    10           print Dumper($_[2]);
\&    11        } 
\&    12  ;
\&    13  
\&    14  D: \*(Aqd\*(Aq
\&    15       {
\&    16         bless { attr => $_[1], children =>[]}, \*(AqDES\*(Aq;
\&    17       }
\&    18  ;
\&    19  
\&    20  %%
\&    21  
\&    22  sub Run {
\&    23    my ($self) = shift;
\&    24    return $self\->YYParse( yybuildingtree => 1 );
\&    25  }
.Ve
.PP
Now the attribute associated with \f(CW\*(C`D\*(C'\fR is a reference 
and appears in the list of children of \f(CW\*(C`_PLUS_LIST\*(C'\fR:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp ListWithRefs.eyp; ./use_listwithrefs.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqDES\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqDES\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
.Ve
.ie n .SS "Building a Tree with ""Parse::Eyapp::Node\->new"""
.el .SS "Building a Tree with \f(CWParse::Eyapp::Node\->new\fP"
.IX Subsection "Building a Tree with Parse::Eyapp::Node->new"
The former solution consisting on writing \fIby hand\fR the code to 
build the node may suffice when dealing with a single node.
Writing by hand the code to build a node is a cumbersome task.
Even worst: though the node built in the former example
looks like a \f(CW\*(C`Parse::Eyapp\*(C'\fR node actually isn't. \f(CW\*(C`Parse::Eyapp\*(C'\fR 
nodes always inherit from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR and 
consequently have access to the methods in such package.
The following execution using the debugger illustrates the point:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples$ perl \-wd use_listwithrefs.pl
\&
\&  Loading DB routines from perl5db.pl version 1.28
\&  Editor support available.
\&
\&  Enter h or \`h h\*(Aq for help, or \`man perldebug\*(Aq for more help.
\&
\&  main::(use_listwithrefs.pl:4):  $parser = new ListWithRefs();
\&    DB<1>  f ListWithRefs.eyp
\&  1       2       #line 3 "ListWithRefs.eyp"
\&  3
\&  4:      use Data::Dumper;
\&  5
\&  6       #line 7 "ListWithRefs.eyp"
\&  7       #line 8 "ListWithRefs.eyp"
\&  8
\&  9:                    print Dumper($_[1]);
\&  10:                   print $_[1]\->str."\en";
.Ve
.PP
through the command \f(CW\*(C`f ListWithRefs.eyp\*(C'\fR we inform the debugger
that subsequent commands will refer to such file. Next 
we execute the program up to the semantic action
associated with the production rule \f(CW\*(C`S: \*(Aqc\*(Aq+  D+\*(C'\fR (line 9)
.PP
.Vb 4
\&    DB<2> c 9     # Continue up to line 9 of ListWithRefs.eyp
\&  ccdd
\&  ListWithRefs::CODE(0x84ebe5c)(ListWithRefs.eyp:9):
\&  9:                    print Dumper($_[1]);
.Ve
.PP
Now we are in condition to look at the contents 
of the arguments:
.PP
.Vb 7
\&    DB<3> x $_[2]\->str
\&  0  \*(Aq_PLUS_LIST_2(DES,DES)\*(Aq
\&    DB<4> x $_[2]\->child(0)
\&  0  DES=HASH(0x85c4568)
\&     \*(Aqattr\*(Aq => \*(Aqd\*(Aq
\&     \*(Aqchildren\*(Aq => ARRAY(0x85c458c)
\&          empty array
.Ve
.PP
the \f(CW\*(C`str\*(C'\fR method works with the object \f(CW$_[2]\fR since
\&\f(CW\*(C`_PLUS_LIST_2\*(C'\fR nodes inherit from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR.
However, when we try with the \f(CW\*(C`DES\*(C'\fR node we get an
error:
.PP
.Vb 4
\&    DB<6> x $_[2]\->child(0)\->str
\&  Can\*(Aqt locate object method "str" via package "DES" at \e
\&    (eval 11)[/usr/share/perl/5.8/perl5db.pl:628] line 2, <STDIN> line 1.
\&    DB<7>
.Ve
.PP
More robust than the former solution of building the node \fIby hand\fR
is to use the constructor \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR:
The method \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
is uset to build forests of syntactic trees.
.PP
It receives a  list of terms describing the trees and \- optionally \-
a reference to a subroutine used to set up the attributes
of the just created nodes. After the creation 
of the trees the sub is called by \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
with arguments the list of references to the nodes (in the order
in which they appear in the terms, from left to right).
\&\f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR returns a list of references 
to the just created nodes. In a scalar context returns a reference to the first of such trees.
See an example:
.PP
.Vb 10
\&  ~/LEyapp/examples$ perl \-MParse::Eyapp \-MData::Dumper \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> @t = Parse::Eyapp::Node\->new(\*(AqA(C,D) E(F)\*(Aq, sub { my $i = 0; $_\->{n} = $i++ for @_ })
\&    DB<2> $Data::Dumper::Indent = 0
\&    DB<3> print Dumper($_)."\en" for @t
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 0,\*(Aqchildren\*(Aq => [bless( {\*(Aqn\*(Aq => 1,\*(Aqchildren\*(Aq => []}, \*(AqC\*(Aq ),
\&                                          bless( {\*(Aqn\*(Aq => 2,\*(Aqchildren\*(Aq => []}, \*(AqD\*(Aq )
\&                                         ]
\&                 }, \*(AqA\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 1,\*(Aqchildren\*(Aq => []}, \*(AqC\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 2,\*(Aqchildren\*(Aq => []}, \*(AqD\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 3,\*(Aqchildren\*(Aq => [bless( {\*(Aqn\*(Aq => 4,\*(Aqchildren\*(Aq => []}, \*(AqF\*(Aq )]}, \*(AqE\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 4,\*(Aqchildren\*(Aq => []}, \*(AqF\*(Aq );
.Ve
.PP
See the following example in which the nodes associated with \f(CW\*(Aqd\*(Aq\fR are
explicitly constructed:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat \-n ListWithRefs2.eyp 
\&     1  %semantic token \*(Aqc\*(Aq 
\&     2  %{
\&     3  use Data::Dumper;
\&     4  $Data::Dumper::Indent = 1;
\&     5  %}
\&     6  %%
\&     7  S:      \*(Aqc\*(Aq+  D+ 
\&     8             { 
\&     9                print Dumper($_[1]);
\&    10                print $_[1]\->str."\en";
\&    11                print Dumper($_[2]);
\&    12                print $_[2]\->str."\en";
\&    13             } 
\&    14  ;
\&    15  
\&    16  D: \*(Aqd\*(Aq.d
\&    17       {
\&    18         Parse::Eyapp::Node\->new(
\&    19           \*(AqDES(TERMINAL)\*(Aq, 
\&    20            sub { 
\&    21              my ($DES, $TERMINAL) = @_;
\&    22              $TERMINAL\->{attr} = $d;
\&    23            }
\&    24         );
\&    25       }
\&    26  ;
\&    27  
\&    28  %%
\&    29  
\&    30  sub Run {
\&    31    my ($self) = shift;
\&    32    return $self\->YYParse( yybuildingtree => 1 );
\&    33  }
.Ve
.PP
To know more about \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
see the section for \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
.PP
When the former eyapp program is executed produces the following
output:
.PP
.Vb 10
\&  $ eyapp ListWithRefs2.eyp; use_listwithrefs2.pl
\&  ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST_1\*(Aq );
\&  _PLUS_LIST_1(TERMINAL,TERMINAL)
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqDES\*(Aq ),
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqDES\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST_2\*(Aq );
\&  _PLUS_LIST_2(DES(TERMINAL),DES(TERMINAL))
.Ve
.ie n .SS "The ""*"" operator"
.el .SS "The \f(CW*\fP operator"
.IX Subsection "The * operator"
Any list operator operates on the factor to its left.
A list in the right hand side of a production rule
counts as a single symbol.
.PP
Both operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`+\*(C'\fR can be used 
with the format
\&\f(CW\*(C`X <* Separator>\*(C'\fR.
In such case they describe lists of \f(CW\*(C`X\*(C'\fRs separated by 
\&\f(CW\*(C`separator\*(C'\fR. See an example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-25 CsBetweenCommansAndD.eyp | cat \-n
\&   1  # CsBetweenCommansAndD.eyp
\&   2
\&   3  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&   4
\&   5  %{
\&   6  sub TERMINAL::info {
\&   7    $_[0]\->attr;
\&   8  }
\&   9  %}
\&  10  %tree
\&  11  %%
\&  12  S:
\&  13      (\*(Aqc\*(Aq <* \*(Aq,\*(Aq> \*(Aqd\*(Aq)*
\&  14        {
\&  15           print "\enNode\en";
\&  16           print $_[1]\->str."\en";
\&  17           print "\enChild 0\en";
\&  18           print $_[1]\->child(0)\->str."\en";
\&  19           print "\enChild 1\en";
\&  20           print $_[1]\->child(1)\->str."\en";
\&  21           $_[1]
\&  22        }
\&  23  ;
\&  24
\&  25  %%
.Ve
.PP
The rule
.PP
.Vb 1
\&                            S: (\*(Aqc\*(Aq <* \*(Aq,\*(Aq> \*(Aqd\*(Aq)*
.Ve
.PP
has only two items in its right hand side: the (separated by commas) list
of \f(CW\*(C`c\*(C'\fRs and the list of \f(CW\*(C`d\*(C'\fRs.  The production rule is equivalent to:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v CsBetweenCommansAndD.eyp
\&  pl@nereida:~/LEyapp/examples$ head \-11 CsBetweenCommansAndD.output | cat \-n
\&   1  Rules:
\&   2  \-\-\-\-\-\-
\&   3  0:      $start \-> S $end
\&   4  1:      STAR\-1 \-> STAR\-1 \*(Aq,\*(Aq \*(Aqc\*(Aq
\&   5  2:      STAR\-1 \-> \*(Aqc\*(Aq
\&   6  3:      STAR\-2 \-> STAR\-1
\&   7  4:      STAR\-2 \-> /* empty */
\&   8  5:      PAREN\-3 \-> STAR\-2 \*(Aqd\*(Aq
\&   9  6:      STAR\-4 \-> STAR\-4 PAREN\-3
\&  10  7:      STAR\-4 \-> /* empty */
\&  11  8:      S \-> STAR\-4
.Ve
.PP
The semantic action associated with \f(CW\*(C`*\*(C'\fR is to return 
a reference to a list with the attributes of the 
matching items.
.PP
When working \-as in the example \-
under a tree creation directive it returns
a node belonging to a class named \f(CW\*(C`_STAR_LIST_#number\*(C'\fR
whose children are the items in the list.
The \f(CW\*(C`#number\*(C'\fR is the ordinal number of the production rule
as it appears in the \f(CW\*(C`.output\*(C'\fR file. The attributes must be 
references or associated with semantic tokens to be included 
in the list. Notice \-in the execution of the former
example  that follows \-
how the node for \f(CW\*(C`PAREN\-3\*(C'\fR has been 
eliminated from the tree. Parenthesis nodes are \- generally \-
obviated:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples$ use_csbetweencommansandd.pl
\&  c,c,cd
\&
\&  Node
\&  _STAR_LIST_4(_STAR_LIST_1(TERMINAL[c],TERMINAL[c],TERMINAL[c]),TERMINAL[d])
\&
\&  Child 0
\&  _STAR_LIST_1(TERMINAL[c],TERMINAL[c],TERMINAL[c])
\&
\&  Child 1
\&  TERMINAL[d]
.Ve
.PP
Notice that the comma (since it is a syntactic token) has 
also been suppressed.
.SS "Giving Names to Lists"
.IX Subsection "Giving Names to Lists"
To set the name of the node associated with a list operator the
\&\f(CW%name\fR directive must precede the operator as in 
the following example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,27p\*(Aq CsBetweenCommansAndDWithNames.eyp | cat \-n
\&   1  # CsBetweenCommansAndDWithNames.eyp
\&   2
\&   3  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&   4
\&   5  %{
\&   6  sub TERMINAL::info {
\&   7    $_[0]\->attr;
\&   8  }
\&   9  %}
\&  10  %tree
\&  11  %%
\&  12  Start: S
\&  13  ;
\&  14  S:
\&  15      (\*(Aqc\*(Aq <%name Cs * \*(Aq,\*(Aq> \*(Aqd\*(Aq) %name Cs_and_d *
\&  16        {
\&  17           print "\enNode\en";
\&  18           print $_[1]\->str."\en";
\&  19           print "\enChild 0\en";
\&  20           print $_[1]\->child(0)\->str."\en";
\&  21           print "\enChild 1\en";
\&  22           print $_[1]\->child(1)\->str."\en";
\&  23           $_[1]
\&  24        }
\&  25  ;
\&  26
\&  27  %%
.Ve
.PP
The grammar describes the language of sequences
.PP
.Vb 1
\&                  c,...,cd c,...,cd c,...,cd ....
.Ve
.PP
The right hand side of the production has only one term which is a list, 
but the factor to which the star applies is itself a list. 
We are naming the term with the name \f(CW\*(C`Cs_and_d\*(C'\fR and the factor with 
the name \f(CW\*(C`Cs\*(C'\fR.
.PP
The execution shows the renamed nodes:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ use_csbetweencommansanddwithnames.pl
\&  c,c,c,cd
\&
\&  Node
\&  Cs_and_d(Cs(TERMINAL[c],TERMINAL[c],TERMINAL[c],TERMINAL[c]),TERMINAL[d])
\&
\&  Child 0
\&  Cs(TERMINAL[c],TERMINAL[c],TERMINAL[c],TERMINAL[c])
\&
\&  Child 1
\&  TERMINAL[d]
.Ve
.SS "Optionals"
.IX Subsection "Optionals"
The \f(CW\*(C`X?\*(C'\fR operator stands for the presence or omission
of \f(CW\*(C`X\*(C'\fR.
.PP
The grammar:
.PP
.Vb 12
\&  pl@nereida:~/LEyapp/examples$ head \-11 List5.yp | cat \-n
\&       1  %semantic token \*(Aqc\*(Aq
\&       2  %tree
\&       3  %%
\&       4  S: \*(Aqc\*(Aq \*(Aqc\*(Aq?
\&       5       {
\&       6         print $_[2]\->str."\en";
\&       7         print $_[2]\->child(0)\->attr."\en" if $_[2]\->children;
\&       8      }
\&       9  ;
\&      10
\&      11  %%
.Ve
.PP
is equivalent to:
.PP
.Vb 8
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v List5
\&  pl@nereida:~/LEyapp/examples$ head \-7 List5.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> S $end
\&  1:      OPTIONAL\-1 \-> \*(Aqc\*(Aq
\&  2:      OPTIONAL\-1 \-> /* empty */
\&  3:      S \-> \*(Aqc\*(Aq OPTIONAL\-1
.Ve
.PP
When \f(CW\*(C`yybuildingtree\*(C'\fR is false the associated attribute 
is a list that will be empty if \s-1CX\s0> does not show up.
.PP
Under the \f(CW%tree\fR directive the action creates an \f(CW\*(C`_OPTIONAL\*(C'\fR
node:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ use_list5.pl
\&  cc
\&  _OPTIONAL_1(TERMINAL)
\&  c
\&  pl@nereida:~/LEyapp/examples$ use_list5.pl
\&  c
\&  _OPTIONAL_1
.Ve
.SS "Parenthesis"
.IX Subsection "Parenthesis"
Any substring on the right hand side of a production rule can be grouped
using a parenthesis. The introduction of a parenthesis implies the introduction
of an additional syntactic variable whose only production 
is the sequence of symbols between the parenthesis. Thus the grammar:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ head \-6 Parenthesis.eyp | cat \-n
\&     1  %%
\&     2  S:
\&     3        (\*(Aqa\*(Aq S ) \*(Aqb\*(Aq  { shift; [ @_ ] }
\&     4      | \*(Aqc\*(Aq
\&     5  ;
\&     6  %%
.Ve
.PP
is equivalent to:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v Parenthesis.eyp; head \-6 Parenthesis.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> S $end
\&  1:      PAREN\-1 \-> \*(Aqa\*(Aq S
\&  2:      S \-> PAREN\-1 \*(Aqb\*(Aq
\&  3:      S \-> \*(Aqc\*(Aq
.Ve
.PP
By default the semantic rule associated with a parenthesis
returns an anonymous list with the attributes of the symbols 
between the parenthesis:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n use_parenthesis.pl
\&       1  #!/usr/bin/perl \-w
\&       2  use Parenthesis;
\&       3  use Data::Dumper;
\&       4
\&       5  $Data::Dumper::Indent = 1;
\&       6  $parser = Parenthesis\->new();
\&       7  print Dumper($parser\->Run);
\&  pl@nereida:~/LEyapp/examples$ use_parenthesis.pl
\&  acb
\&  $VAR1 = [
\&    [ \*(Aqa\*(Aq, \*(Aqc\*(Aq ], \*(Aqb\*(Aq
\&  ];
\&  pl@nereida:~/LEyapp/examples$ use_parenthesis.pl
\&  aacbb
\&  $VAR1 = [
\&    [
\&      \*(Aqa\*(Aq,
\&      [ [ \*(Aqa\*(Aq, \*(Aqc\*(Aq ], \*(Aqb\*(Aq ]
\&    ],
\&    \*(Aqb\*(Aq
\&  ];
.Ve
.PP
when working under a tree directive or when the attribute
\&\f(CW\*(C`buildingtree\*(C'\fR is set via the \f(CW\*(C`YYBuildingtree\*(C'\fR method
the semantic action returns a node with children the attributes
of the symbols between parenthesis. As usual attributes
which aren't references will be skipped from the list of children.
See an example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-23 List2.yp | cat \-n
\&   1  %{
\&   2  use Data::Dumper;
\&   3  %}
\&   4  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq \*(Aqc\*(Aq
\&   5  %tree
\&   6  %%
\&   7  S:
\&   8        (%name AS \*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&   9          {
\&  10            print "S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\en";
\&  11            print "Attribute of the first symbol:\en".Dumper($_[1]);
\&  12            print "Attribute of the second symbol: $_[2]\en";
\&  13            $_[0]\->YYBuildAST(@_[1..$#_]);
\&  14          }
\&  15      | \*(Aqc\*(Aq
\&  16          {
\&  17            print "S \-> \*(Aqc\*(Aq\en";
\&  18            my $r = Parse::Eyapp::Node\->new(qw(C(TERMINAL)), sub { $_[1]\->attr(\*(Aqc\*(Aq) }) ;
\&  19            print Dumper($r);
\&  20            $r;
\&  21          }
\&  22  ;
\&  23  %%
.Ve
.PP
The example shows (line 8)
how to rename a \f(CW\*(C`_PAREN\*(C'\fR node. The \f(CW\*(C`%name CLASSNAME\*(C'\fR goes
after the opening parenthesis.
.PP
The call to \f(CW\*(C`YYBuildAST\*(C'\fR at line 13
with argumetns the attributes of the symbols on the right hand side
returns the node describing the current production rule.
Notice that line 13 can be rewritten as:
.PP
.Vb 1
\&                    goto &Parse::Eyapp::Driver::YYBuildAST;
.Ve
.PP
At line 18 the node for the rule is explicitly created
using \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR. The handler passed as second argument
is responsible for setting the value of the atribute \f(CW\*(C`attr\*(C'\fR
of the just created \f(CW\*(C`TERMINAL\*(C'\fR node.
.PP
Let us see an execution:
.PP
.Vb 11
\&  pl@nereida:~/LEyapp/examples$ use_list2.pl
\&  aacbb
\&  S \-> \*(Aqc\*(Aq
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( {
\&        \*(Aqchildren\*(Aq => [],
\&        \*(Aqattr\*(Aq => \*(Aqc\*(Aq
\&      }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(AqC\*(Aq );
.Ve
.PP
the first reduction occurs by the non recursive rule. The execution
shows the tree built by the call to
\&\f(CW\*(C`Parse::Eyapp::Node\-\*(C'\fRnew>
at line 18.
.PP
The execution continues with the reduction or reverse derivation by the rule
\&\f(CW\*(C`S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\*(C'\fR. The action at lines 9\-14
dumps the attribute associated with \f(CW\*(C`(\*(Aqa\*(Aq S)\*(C'\fR
\&\- or, in other words,  the attribute associated with the variable 
\&\f(CW\*(C`PAREN\-1\*(C'\fR. It also dumps the attribute of \f(CW\*(Aqb\*(Aq\fR:
.PP
.Vb 11
\&  S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&  Attribute of the first symbol:
\&  $VAR1 = bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&        bless( { \*(Aqchildren\*(Aq => [ bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&       ]
\&     }, \*(AqC\*(Aq )
\&    ]
\&  }, \*(AqAS\*(Aq );
\&Attribute of the second symbol: b
.Ve
.PP
The last reduction shown is by the rule:
\&\f(CW\*(C`S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\*(C'\fR:
.PP
.Vb 10
\&  S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&  Attribute of the first symbol:
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( {
\&            \*(Aqchildren\*(Aq => [
\&              bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&              bless( {
\&                \*(Aqchildren\*(Aq => [
\&                  bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&                ]
\&              }, \*(AqC\*(Aq )
\&            ]
\&          }, \*(AqAS\*(Aq ),
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqb\*(Aq, \*(Aqtoken\*(Aq => \*(Aqb\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqS_2\*(Aq )
\&    ]
\&  }, \*(AqAS\*(Aq );
\&  Attribute of the second symbol: b
.Ve
.SS "Actions Inside Parenthesis"
.IX Subsection "Actions Inside Parenthesis"
Though is a practice to avoid, since it clutters
the code, it is certainly permitted to introduce
actions between the parenthesis, as in the example below:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-16 ListAndAction.eyp | cat \-n
\&   1  # ListAndAction.eyp
\&   2  %{
\&   3  my $num = 0;
\&   4  %}
\&   5
\&   6  %%
\&   7  S:      \*(Aqc\*(Aq
\&   8              {
\&   9                print "S \-> c\en"
\&  10              }
\&  11      |    (\*(Aqa\*(Aq {$num++; print "Seen <$num> \*(Aqa\*(Aqs\en"; $_[1] }) S \*(Aqb\*(Aq
\&  12              {
\&  13                print "S \-> (a ) S b\en"
\&  14              }
\&  15  ;
\&  16  %%
.Ve
.PP
This is the output when executing this program with input \f(CW\*(C`aaacbbb\*(C'\fR:
.PP
.Vb 9
\&  pl@nereida:~/LEyapp/examples$ use_listandaction.pl
\&  aaacbbb
\&  Seen <1> \*(Aqa\*(Aqs
\&  Seen <2> \*(Aqa\*(Aqs
\&  Seen <3> \*(Aqa\*(Aqs
\&  S \-> c
\&  S \-> (a ) S b
\&  S \-> (a ) S b
\&  S \-> (a ) S b
.Ve
.SH "NAMES FOR ATTRIBUTES"
.IX Header "NAMES FOR ATTRIBUTES"
Attributes can be referenced by meaningful names using the \fIdot notation\fR
instead of using the classic error-prone positional approach:
.PP
.Vb 5
\&                        rhs:  rhseltwithid *
\&                        rhseltwithid : 
\&                              rhselt \*(Aq.\*(Aq IDENT 
\&                            | \*(Aq$\*(Aq rhselt  
\&                            | rhselt
.Ve
.PP
for example:
.PP
.Vb 1
\&              exp : exp.left \*(Aq\-\*(Aq exp.right  { $left \- $right }
.Ve
.PP
By qualifying the first appearance of the syntactic variable \f(CW\*(C`exp\*(C'\fR
with the notation \f(CW\*(C`exp.left\*(C'\fR we can later refer inside the actions
to the associated attribute using the lexical variable
\&\f(CW$left\fR.
.PP
The \fIdollar notation\fR \f(CW$A\fR can be used as an abbreviation
of \f(CW\*(C`A.A\*(C'\fR.
.SH "DEFAULT ACTIONS"
.IX Header "DEFAULT ACTIONS"
When no action is specified both \f(CW\*(C`yapp\*(C'\fR and \f(CW\*(C`eyapp\*(C'\fR
implicitly insert the semantic action \f(CW\*(C`{ $_[1] }\*(C'\fR. 
In \f(CW\*(C`Parse::Eyapp\*(C'\fR you can modify such behavior using the \f(CW\*(C`%defaultaction { Perl code }\*(C'\fR
directive. The \f(CW\*(C`{ Perl code }\*(C'\fR clause that follows the \f(CW%defaultaction\fR
directive is
executed when reducing by any production for which no explicit
action was specified.
.SS "An Example of Default Action: Translator from Infix to Postfix"
.IX Subsection "An Example of Default Action: Translator from Infix to Postfix"
See an example that translates an infix expression
like \f(CW\*(C`a=b*\-3\*(C'\fR into a postfix expression like \f(CW\*(C`a b 3 NEG * = \*(C'\fR:
.PP
.Vb 5
\& # File Postfix.eyp (See the examples/ directory)
\& %right  \*(Aq=\*(Aq
\& %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\& %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\& %left   NEG
\&
\& %defaultaction { return  "$left $right $op"; }
\&
\& %%
\& line: $exp  { print "$exp\en" }
\& ;
\&
\& exp:        $NUM  { $NUM }
\&         |   $VAR  { $VAR }
\&         |   VAR.left \*(Aq=\*(Aq.op exp.right
\&         |   exp.left \*(Aq+\*(Aq.op exp.right
\&         |   exp.left \*(Aq\-\*(Aq.op exp.right
\&         |   exp.left \*(Aq*\*(Aq.op exp.right
\&         |   exp.left \*(Aq/\*(Aq.op exp.right
\&         |   \*(Aq\-\*(Aq $exp %prec NEG { "$exp NEG" }
\&         |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq { $exp }
\& ;
\&
\& %%
\&
\& # Support subroutines as in the Synopsis example
\& ...
.Ve
.PP
The file containing the \f(CW\*(C`Eyapp\*(C'\fR program must be compiled with \f(CW\*(C`eyapp\*(C'\fR:
.PP
.Vb 1
\& nereida:~/src/perl/YappWithDefaultAction/examples> eyapp Postfix.eyp
.Ve
.PP
Next, you have to write a client program:
.PP
.Vb 7
\& nereida:~/src/perl/YappWithDefaultAction/examples> cat \-n usepostfix.pl
\&      1  #!/usr/bin/perl \-w
\&      2  use strict;
\&      3  use Postfix;
\&      4
\&      5  my $parser = new Postfix();
\&      6  $parser\->Run;
.Ve
.PP
Now we can run the client program:
.PP
.Vb 3
\& nereida:~/src/perl/YappWithDefaultAction/examples> usepostfix.pl
\& Write an expression: \-(2*a\-b*\-3)
\& 2 a * b 3 NEG * \- NEG
.Ve
.ie n .SS "Default Actions, %name and ""YYName"""
.el .SS "Default Actions, \f(CW%name\fP and \f(CWYYName\fP"
.IX Subsection "Default Actions, %name and YYName"
In \f(CW\*(C`eyapp\*(C'\fR each production rule has a name.
The name of a rule can be explicitly given by the programmer 
using the \f(CW%name\fR directive. For example, in the piece of code
that follows the name \f(CW\*(C`ASSIGN\*(C'\fR is given to the rule \f(CW\*(C`exp: VAR \*(Aq=\*(Aq exp\*(C'\fR.
.PP
When no explicit name is given the rule has an implicit name.
The implicit name of a rule is shaped by concatenating
the name of the syntactic variable on its left, an underscore 
and the ordinal number of the production rule \f(CW\*(C`Lhs_#\*(C'\fR
as it appears in the \f(CW\*(C`.output\*(C'\fR file.
Avoid giving names matching such pattern to production rules.
The patterns
\&\f(CW\*(C`/${lhs}_\ed+$/\*(C'\fR where \f(CW\*(C`${lhs}\*(C'\fR is the name of the syntactic variable
are reserved for internal use by \f(CW\*(C`eyapp\*(C'\fR.
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n Lhs.eyp
\&   1  # Lhs.eyp
\&   2
\&   3  %right  \*(Aq=\*(Aq
\&   4  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&   5  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&   6  %left   NEG
\&   7
\&   8  %defaultaction {
\&   9    my $self = shift;
\&  10    my $name = $self\->YYName();
\&  11    bless { children => [ grep {ref($_)} @_] }, $name;
\&  12  }
\&  13
\&  14  %%
\&  15  input:
\&  16              /* empty */
\&  17                { [] }
\&  18          |   input line
\&  19                {
\&  20                  push @{$_[1]}, $_[2] if defined($_[2]);
\&  21                  $_[1]
\&  22                }
\&  23  ;
\&  24
\&  25  line:     \*(Aq\en\*(Aq       { }
\&  26          | exp \*(Aq\en\*(Aq   {  $_[1] }
\&  27  ;
\&  28
\&  29  exp:
\&  30              NUM   { $_[1] }
\&  31          |   VAR   { $_[1] }
\&  32          |   %name ASSIGN
\&  33              VAR \*(Aq=\*(Aq exp
\&  34          |   %name PLUS
\&  35              exp \*(Aq+\*(Aq exp
\&  36          |   %name MINUS
\&  37              exp \*(Aq\-\*(Aq exp
\&  38          |   %name TIMES
\&  39              exp \*(Aq*\*(Aq exp
\&  40          |   %name DIV
\&  41              exp \*(Aq/\*(Aq exp
\&  42          |   %name UMINUS
\&  43              \*(Aq\-\*(Aq exp %prec NEG
\&  44          |  \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&  45  ;
.Ve
.PP
Inside a semantic action
the name of the current rule can be recovered 
using the method \f(CW\*(C`YYName\*(C'\fR of the parser object.
.PP
The default action (lines 8\-12) computes as attribute of the left
hand side a reference to an object blessed in the name of the rule.
The object has an attribute \f(CW\*(C`children\*(C'\fR which is a reference 
to the list of children of the node.
The call to \f(CW\*(C`grep\*(C'\fR
.PP
.Vb 1
\&  11    bless { children => [ grep {ref($_)} @_] }, $name;
.Ve
.PP
excludes children that aren't references. Notice that the lexical analyzer 
only returns references for the \f(CW\*(C`NUM\*(C'\fR and \f(CW\*(C`VAR\*(C'\fR terminals:
.PP
.Vb 10
\&  59  sub _Lexer {
\&  60      my($parser)=shift;
\&  61
\&  62      for ($parser\->YYData\->{INPUT}) {
\&  63          s/^[ \et]+//;
\&  64          return(\*(Aq\*(Aq,undef) unless $_;
\&  65          s/^([0\-9]+(?:\e.[0\-9]+)?)//
\&  66                  and return(\*(AqNUM\*(Aq, bless { attr => $1}, \*(AqNUM\*(Aq);
\&  67          s/^([A\-Za\-z][A\-Za\-z0\-9_]*)//
\&  68                  and return(\*(AqVAR\*(Aq,bless {attr => $1}, \*(AqVAR\*(Aq);
\&  69          s/^(.)//s
\&  70                  and return($1, $1);
\&  71      }
\&  72      return(\*(Aq\*(Aq,undef);
\&  73  }
.Ve
.PP
follows the client program:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n uselhs.pl
\&       1  #!/usr/bin/perl \-w
\&       2  use Lhs;
\&       3  use Data::Dumper;
\&       4
\&       5  $parser = new Lhs();
\&       6  my $tree = $parser\->Run;
\&       7  $Data::Dumper::Indent = 1;
\&       8  if (defined($tree)) { print Dumper($tree); }
\&       9  else { print "Cadena no va\*'lida\en"; }
.Ve
.PP
When executed with input \f(CW\*(C`a=(2+3)*b\*(C'\fR the parser produces
the following tree:
.PP
.Vb 1
\&  ASSIGN(TIMES(PLUS(NUM[2],NUM[3]), VAR[b]))
.Ve
.PP
See the result of an execution:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ uselhs.pl
\&  a=(2+3)*b
\&  $VAR1 = [
\&    bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( { \*(Aqattr\*(Aq => \*(Aqa\*(Aq }, \*(AqVAR\*(Aq ),
\&        bless( {
\&          \*(Aqchildren\*(Aq => [
\&            bless( {
\&              \*(Aqchildren\*(Aq => [
\&                bless( { \*(Aqattr\*(Aq => \*(Aq2\*(Aq }, \*(AqNUM\*(Aq ),
\&                bless( { \*(Aqattr\*(Aq => \*(Aq3\*(Aq }, \*(AqNUM\*(Aq )
\&              ]
\&            }, \*(AqPLUS\*(Aq ),
\&            bless( { \*(Aqattr\*(Aq => \*(Aqb\*(Aq }, \*(AqVAR\*(Aq )
\&          ]
\&        }, \*(AqTIMES\*(Aq )
\&      ]
\&    }, \*(AqASSIGN\*(Aq )
\&  ];
.Ve
.PP
The name of a production rule can be changed at execution time.
See the following example:
.PP
.Vb 10
\&  $ sed \-n \*(Aq29,50p\*(Aq YYNameDynamic.eyp | cat \-n
\&     1  exp:
\&     2              NUM   { $_[1] }
\&     3          |   VAR   { $_[1] }
\&     4          |   %name ASSIGN
\&     5              VAR \*(Aq=\*(Aq exp
\&     6          |   %name PLUS
\&     7              exp \*(Aq+\*(Aq exp
\&     8          |   %name MINUS
\&     9              exp \*(Aq\-\*(Aq exp
\&    10                {
\&    11                  my $self = shift;
\&    12                  $self\->YYName(\*(AqSUBTRACT\*(Aq); # rename it
\&    13                  $self\->YYBuildAST(@_); # build the node
\&    14                }
\&    15          |   %name TIMES
\&    16              exp \*(Aq*\*(Aq exp
\&    17          |   %name DIV
\&    18              exp \*(Aq/\*(Aq exp
\&    19          |   %name UMINUS
\&    20              \*(Aq\-\*(Aq exp %prec NEG
\&    21          |  \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    22  ;
.Ve
.PP
When the client program is executed we can see the presence
of the \f(CW\*(C`SUBTRACT\*(C'\fR nodes:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ useyynamedynamic.pl
\&  2\-b
\&  $VAR1 = [
\&    bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( {
\&          \*(Aqattr\*(Aq => \*(Aq2\*(Aq
\&        }, \*(AqNUM\*(Aq ),
\&        bless( {
\&          \*(Aqattr\*(Aq => \*(Aqb\*(Aq
\&        }, \*(AqVAR\*(Aq )
\&      ]
\&    }, \*(AqSUBTRACT\*(Aq )
\&  ];
.Ve
.SH "GRAMMAR REUSE"
.IX Header "GRAMMAR REUSE"
.SS "Reusing Grammars Using Inheritance"
.IX Subsection "Reusing Grammars Using Inheritance"
An method to reuse a grammar is via inheritance. 
The client inherits the generated parser module and expands it 
with methods that inherit or overwrite the actions.
Here is an example. Initially we have this Eyapp grammar:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n NoacInh.eyp
\&     1  %left   \*(Aq+\*(Aq
\&     2  %left   \*(Aq*\*(Aq
\&     3
\&     4  %defaultaction {
\&     5    my $self = shift;
\&     6
\&     7    my $action = $self\->YYName;
\&     8
\&     9    $self\->$action(@_);
\&    10  }
\&    11
\&    12  %%
\&    13  exp:        %name NUM
\&    14                NUM
\&    15          |   %name PLUS
\&    16                exp \*(Aq+\*(Aq exp
\&    17          |   %name TIMES
\&    18                exp \*(Aq*\*(Aq exp
\&    19          |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    20                { $_[2] }
\&    21  ;
\&    22
\&    23  %%
\&    24
\&    25  sub _Error {
\&    26    my($token)=$_[0]\->YYCurval;
\&    27    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    28    my @expected = $_[0]\->YYExpect();
\&    29
\&    30    local $" = \*(Aq, \*(Aq;
\&    31    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&    32  }
\&    33
\&    34
\&    35  my $x = \*(Aq\*(Aq;
\&    36
\&    37  sub _Lexer {
\&    38    my($parser)=shift;
\&    39
\&    40    for ($x) {
\&    41      s/^\es+//;
\&    42      $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    43
\&    44      s/^([0\-9]+(?:\e.[0\-9]+)?)//   and return(\*(AqNUM\*(Aq,$1);
\&    45      s/^([A\-Za\-z][A\-Za\-z0\-9_]*)// and return(\*(AqVAR\*(Aq,$1);
\&    46      s/^(.)//s                    and return($1,$1);
\&    47    }
\&    48  }
\&    49
\&    50  sub Run {
\&    51    my($self)=shift;
\&    52    $x = shift;
\&    53    my $debug = shift;
\&    54
\&    55    $self\->YYParse(
\&    56      yylex => \e&_Lexer,
\&    57      yyerror => \e&_Error,
\&    58      yydebug => $debug,
\&    59    );
\&    60  }
.Ve
.PP
The following program defines two classes: \f(CW\*(C`CalcActions\*(C'\fR
that implements the actions for the calculator
and package \f(CW\*(C`PostActions\*(C'\fR that implements the actions
for the infix to postfix translation. This way we have an 
example that reuses the former grammar twice:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n icalcu_and_ipost.pl
\&     1  #!/usr/bin/perl \-w
\&     2  package CalcActions;
\&     3  use strict;
\&     4  use base qw{NoacInh};
\&     5
\&     6  sub NUM {
\&     7    return $_[1];
\&     8  }
\&     9
\&    10  sub PLUS {
\&    11    $_[1]+$_[3];
\&    12  }
\&    13
\&    14  sub TIMES {
\&    15    $_[1]*$_[3];
\&    16  }
\&    17
\&    18  package PostActions;
\&    19  use strict;
\&    20  use base qw{NoacInh};
\&    21
\&    22  sub NUM {
\&    23    return $_[1];
\&    24  }
\&    25
\&    26  sub PLUS {
\&    27    "$_[1] $_[3] +";
\&    28  }
\&    29
\&    30  sub TIMES {
\&    31    "$_[1] $_[3] *";
\&    32  }
\&    33
\&    34  package main;
\&    35  use strict;
\&    36
\&    37  my $calcparser = CalcActions\->new();
\&    38  print "Write an expression: ";
\&    39  my $x = <STDIN>;
\&    40  my $e = $calcparser\->Run($x);
\&    41
\&    42  print "$e\en";
\&    43
\&    44  my $postparser = PostActions\->new();
\&    45  my $p = $postparser\->Run($x);
\&    46
\&    47  print "$p\en";
.Ve
.PP
The subroutine used as default action in \f(CW\*(C`NoacInh.eyp\*(C'\fR is so useful 
that is packed as the Parse::Eyapp::Driver method 
\&\f(CW\*(C`YYDelegateaction\*(C'\fR.
.PP
See files \f(CW\*(C`examples/recycle/NoacYYDelegateaction.eyp\*(C'\fR
and \f(CW\*(C`examples/recycle/icalcu_and_ipost_yydel.pl\*(C'\fR
for an example of use of \f(CW\*(C`YYDelegateaction\*(C'\fR.
.SS "Reusing Grammars by Dynamic Substitution of Semantic Actions"
.IX Subsection "Reusing Grammars by Dynamic Substitution of Semantic Actions"
The methods \f(CW\*(C`YYSetaction\*(C'\fR and \f(CW\*(C`YYAction\*(C'\fR of the parser object provide a way
to selectively substitute some actions of a given grammar.
Let us consider once more a postfix to infix translator:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n PostfixWithActions.eyp
\&     1  # File PostfixWithActions.eyp
\&     2  %right  \*(Aq=\*(Aq
\&     3  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     4  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     5  %left   NEG
\&     6
\&     7  %%
\&     8  line: $exp  { print "$exp\en" }
\&     9  ;
\&    10
\&    11  exp:        $NUM
\&    12                  { $NUM }
\&    13          |   $VAR
\&    14                  { $VAR }
\&    15          |   %name ASSIGN
\&    16                VAR.left \*(Aq=\*(Aqexp.right
\&    17                  { "$_[3] &$_[1] ASSIGN"; }
\&    18          |   %name PLUS
\&    19                exp.left \*(Aq+\*(Aqexp.right
\&    20                  { "$_[1] $_[3] PLUS"; }
\&    21          |   %name MINUS
\&    22                exp.left \*(Aq\-\*(Aqexp.right
\&    23                  { "$_[1] $_[3] MINUS"; }
\&    24          |   %name TIMES
\&    25                exp.left \*(Aq*\*(Aqexp.right
\&    26                  { "$_[1] $_[3] TIMES"; }
\&    27          |   %name DIV
\&    28                exp.left \*(Aq/\*(Aqexp.right
\&    29                  { "$_[1] $_[3] DIV"; }
\&    30          |   %name NEG \*(Aq\-\*(Aq $exp %prec NEG
\&    31                  { "$exp NEG" }
\&    32          |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq
\&    33                  { $exp }
\&    34  ;
\&    35
\&    36  %%
\&    37
\&    38  sub _Error {
\&    39    my($token)=$_[0]\->YYCurval;
\&    40    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    41    my @expected = $_[0]\->YYExpect();
\&    42
\&    43    local $" = \*(Aq, \*(Aq;
\&    44    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&    45  }
\&    46
\&    47  my $x;
\&    48
\&    49  sub _Lexer {
\&    50    my($parser)=shift;
\&    51
\&    52    for ($x) {
\&    53      s/^\es+//;
\&    54      $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    55
\&    56      s/^([0\-9]+(?:\e.[0\-9]+)?)//   and return(\*(AqNUM\*(Aq,$1);
\&    57      s/^([A\-Za\-z][A\-Za\-z0\-9_]*)// and return(\*(AqVAR\*(Aq,$1);
\&    58      s/^(.)//s                    and return($1,$1);
\&    59    }
\&    60  }
\&    61
\&    62  sub Run {
\&    63    my($self)=shift;
\&    64    $x = shift;
\&    65    $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&    66      #yydebug => 0xFF
\&    67    );
\&    68  }
.Ve
.PP
The program \f(CW\*(C`rewritepostfixwithactions.pl\*(C'\fR uses the former grammar
to translate infix expressions to postfix expressions.
It also implements a calculator reusing the grammar in
\&\f(CW\*(C`PostfixWithActions.eyp\*(C'\fR. It does so using
the \f(CW\*(C`YYSetaction\*(C'\fR method.
The semantic actions for the productions named
.IP "\(bu" 2
\&\s-1ASSIGN\s0
.IP "\(bu" 2
\&\s-1PLUS\s0
.IP "\(bu" 2
\&\s-1TIMES\s0
.IP "\(bu" 2
\&\s-1DIV\s0
.IP "\(bu" 2
\&\s-1NEG\s0
.PP
are selectively substituted by the appropriate actions, while the other
semantic actions remain unchanged:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n rewritepostfixwithactions.pl
\&     1  #!/usr/bin/perl
\&     2  use warnings;
\&     3  use PostfixWithActions;
\&     4
\&     5  my $debug = shift || 0;
\&     6  my $pparser = PostfixWithActions\->new();
\&     7  print "Write an expression: ";
\&     8  my $x = <STDIN>;
\&     9
\&    10  # First, trasnlate to postfix ...
\&    11  $pparser\->Run($x, $debug);
\&    12
\&    13  # And then selectively substitute
\&    14  # some semantic actions
\&    15  # to obtain an infix calculator ...
\&    16  my %s;            # symbol table
\&    17  $pparser\->YYSetaction(
\&    18    ASSIGN => sub { $s{$_[1]} = $_[3] },
\&    19    PLUS   => sub { $_[1] + $_[3] },
\&    20    TIMES  => sub { $_[1] * $_[3] },
\&    21    DIV    => sub { $_[1] / $_[3] },
\&    22    NEG    => sub { \-$_[2] },
\&    23  );
\&    24
\&    25  $pparser\->Run($x, $debug);
.Ve
.PP
When running this program the output is:
.PP
.Vb 8
\&  examples/recycle$ ./rewritepostfixwithactions.pl
\&  Write an expression: 2*3+4
\&  2 3 TIMES 4 PLUS
\&  10
\&  examples/recycle$ rewritepostfixwithactions.pl
\&  Write an expression: a = 2*(b = 3+5)
\&  2 3 5 PLUS &b ASSIGN TIMES &a ASSIGN
\&  16
.Ve
.ie n .SH "ABSTRACT SYNTAX TREES: %tree AND %name"
.el .SH "ABSTRACT SYNTAX TREES: \f(CW%tree\fP AND \f(CW%name\fP"
.IX Header "ABSTRACT SYNTAX TREES: %tree AND %name"
.ie n .SS "%tree Default Names"
.el .SS "\f(CW%tree\fP Default Names"
.IX Subsection "%tree Default Names"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR facilitates the construction of concrete syntax trees and 
abstract syntax trees (abbreviated \s-1AST\s0 from now on) through the \f(CW%tree\fR
directive. Actually, the \f(CW%tree\fR directive is equivalent to a call
to the \f(CW\*(C`YYBuildAST\*(C'\fR method of the parser object.
.PP
Any production production rule \f(CW\*(C`A\->XYZ\*(C'\fR 
can be named using a directive \f(CW\*(C`%name someclass\*(C'\fR.
.PP
When reducing by a production rule \f(CW\*(C`A\->XYZ\*(C'\fR 
the \f(CW%tree\fR directive (i.e., the \f(CW\*(C`YYBuildAST\*(C'\fR method) 
builds an anonymous hash blessed in \f(CW\*(C`someclass\*(C'\fR.
The hash has an attribute \f(CW\*(C`children\*(C'\fR containing the references
to the \s-1AST\s0 trees associated with the symbols in the right hand
side \f(CW\*(C`X\*(C'\fR, C>Y>, etc.
.PP
If no explicit name was given to the production rule,
\&\f(CW\*(C`YYBuildAST\*(C'\fR blesses the node in the class name resulting 
from the concatenation
of the left hand side and the production number. The production number
is the ordinal number of the production as they appear in the associated 
\&\f(CW\*(C`.output\*(C'\fR file (see option \f(CW\*(C`\-v\*(C'\fR of eyapp). For example,
given the grammar:
.PP
.Vb 7
\&  pl@europa:~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq8,27p\*(Aq treewithoutnames.pl
\&  my $grammar = q{
\&    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    %tree           # Let us build an abstract syntax tree ...
\&
\&    %%
\&    line: exp <+ \*(Aq;\*(Aq>  { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    ;
\&
\&    exp:
\&         NUM           |   VAR       | VAR \*(Aq=\*(Aq exp
\&      | exp \*(Aq+\*(Aq exp    | exp \*(Aq\-\*(Aq exp |  exp \*(Aq*\*(Aq exp
\&      | exp \*(Aq/\*(Aq exp
\&      | \*(Aq\-\*(Aq exp %prec NEG
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    ;
\&
\&    %%
.Ve
.PP
The tree produced by the parser when feed with input \f(CW\*(C`a=2*b\*(C'\fR
is:
.PP
.Vb 1
\&  pl@europa:~/LEyapp/examples/eyapplanguageref$ ./treewithoutnames.pl
\&
\&  ************
\&  _PLUS_LIST(exp_6(TERMINAL[a],exp_9(exp_4(TERMINAL[2]),exp_5(TERMINAL[b]))))
\&  ************
.Ve
.PP
If we want to see the correspondence between names and rules we can generate and
check the corresponding file \f(CW\*(C`.output\*(C'\fR setting the \f(CW\*(C`outputfile\*(C'\fR
of \f(CW\*(C`Parse::Eyapp\*(C'\fR:
.PP
.Vb 6
\&  Parse::Eyapp\->new_grammar( # Create the parser package/class
\&    input=>$grammar,
\&    classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&    firstline=>9,      # String $grammar starts at line 9 (for error diagnostics)
\&    outputfile=>\*(Aqtreewithoutnames\*(Aq
\&  );
.Ve
.PP
The grammar with the expanded rules appears in the \f(CW\*(C`.output\*(C'\fR file:
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq28,42p\*(Aq treewithoutnames.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> line $end
\&  1:      PLUS\-1 \-> PLUS\-1 \*(Aq;\*(Aq exp
\&  2:      PLUS\-1 \-> exp
\&  3:      line \-> PLUS\-1
\&  4:      exp \-> NUM
\&  5:      exp \-> VAR
\&  6:      exp \-> VAR \*(Aq=\*(Aq exp
\&  7:      exp \-> exp \*(Aq+\*(Aq exp
\&  8:      exp \-> exp \*(Aq\-\*(Aq exp
\&  9:      exp \-> exp \*(Aq*\*(Aq exp
\&  10:     exp \-> exp \*(Aq/\*(Aq exp
\&  11:     exp \-> \*(Aq\-\*(Aq exp
\&  12:     exp \-> \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.PP
We can see now that the node \f(CW\*(C`exp_9\*(C'\fR corresponds to the production \f(CW\*(C`exp \-> exp \*(Aq*\*(Aq exp\*(C'\fR.
Observe also that the Eyapp production:
.PP
.Vb 2
\&                                line: exp <+ \*(Aq;\*(Aq>
\&actually produces the productions:
\&
\&                        1:      PLUS\-1 \-> PLUS\-1 \*(Aq;\*(Aq exp
\&                        2:      PLUS\-1 \-> exp
.Ve
.PP
and that the name of the class associated with the non empty list is \f(CW\*(C`_PLUS_LIST\*(C'\fR.
.ie n .SS "%tree Giving Explicit Names"
.el .SS "\f(CW%tree\fP Giving Explicit Names"
.IX Subsection "%tree Giving Explicit Names"
A production rule can be \fInamed\fR using the \f(CW\*(C`%name IDENTIFIER\*(C'\fR directive.  For
each production rule a namespace/package is created. \fIThe\fR \f(CW\*(C`IDENTIFIER\*(C'\fR 
\&\fIis the name of the associated package\fR.  Therefore, by modifying the former
grammar with additional \f(CW%name\fR directives:
.PP
.Vb 7
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq8,26p\*(Aq treewithnames.pl
\&  my $grammar = q{
\&    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    %tree           # Let us build an abstract syntax tree ...
\&
\&    %%
\&    line: exp <%name EXPS + \*(Aq;\*(Aq>  { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    ;
\&
\&    exp:
\&        %name NUM    NUM           | %name VAR   VAR         | %name ASSIGN VAR \*(Aq=\*(Aq exp
\&      | %name PLUS   exp \*(Aq+\*(Aq exp   | %name MINUS exp \*(Aq\-\*(Aq exp | %name TIMES  exp \*(Aq*\*(Aq exp
\&      | %name DIV    exp \*(Aq/\*(Aq exp
\&      | %name UMINUS \*(Aq\-\*(Aq exp %prec NEG
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    ;
.Ve
.PP
we are explicitly naming the productions. Thus, all the node instances 
corresponding to the production \f(CW\*(C`exp: VAR \*(Aq=\*(Aq exp\*(C'\fR will belong to the class \f(CW\*(C`ASSIGN\*(C'\fR. 
Now the tree for \f(CW\*(C`a=2*b\*(C'\fR becomes:
.PP
.Vb 1
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ ./treewithnames.pl
\&
\&  ************
\&  EXPS(ASSIGN(TERMINAL[a],TIMES(NUM(TERMINAL[2]),VAR(TERMINAL[b]))))
\&  ************
.Ve
.PP
Observe how the list has been named \f(CW\*(C`EXPS\*(C'\fR. The \f(CW%name\fR directive prefixes the 
list operator (\f(CW\*(C`[+*?]\*(C'\fR).
.SS "\s-1TERMINAL\s0 Nodes"
.IX Subsection "TERMINAL Nodes"
Nodes named \f(CW\*(C`TERMINAL\*(C'\fR are built from the tokens provided by the lexical
analyzer.  \f(CW\*(C`Parse::Eyapp\*(C'\fR follows the same protocol than Parse::Yapp for
communication between the parser and the lexical analyzer: A couple \f(CW\*(C`($token,
$attribute)\*(C'\fR is returned by the lexical analyzer.  These values are stored
under the keys \f(CW\*(C`token\*(C'\fR and \f(CW\*(C`attr\*(C'\fR.  \f(CW\*(C`TERMINAL\*(C'\fR nodes as all
\&\f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes also have the attribute \f(CW\*(C`children\*(C'\fR but is \- almost
always \- empty.
.ie n .SS "Explicit Actions Inside %tree"
.el .SS "Explicit Actions Inside \f(CW%tree\fP"
.IX Subsection "Explicit Actions Inside %tree"
Explicit actions can be specified by the programmer like in this line
from the Parse::Eyapp \s-1SYNOPSIS\s0 example:
.PP
.Vb 1
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }  /* Let us simplify a bit the tree */
.Ve
.PP
Explicit actions receive as arguments the references to the children nodes already 
built. The programmer can influence the shape of the tree by inserting
these explicit actions. In this example the programmer has decided to simplify the 
syntax tree: the nodes associated with the parenthesis are 
discarded and the reference to the subtree containing the proper
expression is returned. Such manoeuvre is called \fIbypassing\fR.
See section \*(L"The  bypass clause and the \f(CW%no\fR bypass directive\*(R"
to know more about \fIautomatic bypassing\fR
.ie n .SS "Explicitly Building Nodes With ""YYBuildAST"""
.el .SS "Explicitly Building Nodes With \f(CWYYBuildAST\fP"
.IX Subsection "Explicitly Building Nodes With YYBuildAST"
Sometimes the best time to decorate a node with some
attributes is just after being built.
In such cases the programmer can take \fImanual control\fR
building the node with \f(CW\*(C`YYBuildAST\*(C'\fR to 
inmediately proceed to decorate it.
.PP
The following example illustrates the situation (see
file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR 
inside \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR):
.PP
.Vb 10
\&  $ sed \-n \*(Aq397,408p\*(Aq lib/Simple/Types.eyp
\&  Variable:
\&      %name VAR
\&      ID
\&    | %name  VARARRAY
\&      $ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq) <%name INDEXSPEC +>
\&        {
\&          my $self = shift;
\&          my $node =  $self\->YYBuildAST(@_);
\&          $node\->{line} = $ID\->[1];# $_[1]\->[1]
\&          return $node;
\&        }
\&  ;
.Ve
.PP
This production rule defines the expression to access an array element 
as an identifier followed by
a non empty list of binary expressions \f(CW\*(C` Variable: ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq)+\*(C'\fR. 
Furthermore, the node corresponding
to the list of indices has been named \f(CW\*(C`INDEXSPEC\*(C'\fR.
.PP
When no explicit action is
inserted a binary node will be built having as first child the node
corresponding to the identifier \f(CW$ID\fR and as second child the reference 
to the list of binary expressions. The children corresponding to
\&\f(CW\*(Aq[\*(Aq\fR and \f(CW\*(Aq]\*(Aq\fR are discarded since they are \-by default\- \fIsyntactic tokens\fR
(see section \*(L"Syntactic and Semantic tokens\*(R").
However, the programmer wants to decorate
the node being built with a \f(CW\*(C`line\*(C'\fR attribute holding the line number in the source
code where the identifier being used appears. The call to the \f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR
method \f(CW\*(C`YYBuildAST\*(C'\fR does the job of building the node. After
that the node can be decorated and returned.
.PP
Actually, the \f(CW%tree\fR directive is semantically equivalent to:
.PP
.Vb 1
\&                %default action { goto &Parse::Eyapp::Driver::YYBuildAST }
.Ve
.ie n .SS "Returning non References Under %tree"
.el .SS "Returning non References Under \f(CW%tree\fP"
.IX Subsection "Returning non References Under %tree"
When a \fIexplicit user action returns s.t. that is not a reference
no node will be inserted\fR. This fact can be used to suppress nodes
in the \s-1AST\s0 being built. See the following example (file \f(CW\*(C`examples/returnnonode.yp\*(C'\fR):
.PP
.Vb 10
\&  $ sed \-ne \*(Aq1,17p\*(Aq returnnonode.yp | cat \-n
\&     1  %tree
\&     2  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq
\&     3  %%
\&     4  S:    %name EMPTY
\&     5          /* empty */
\&     6      | %name AES
\&     7          S A
\&     8      | %name BES
\&     9          S B
\&    10  ;
\&    11  A : %name A
\&    12        \*(Aqa\*(Aq
\&    13  ;
\&    14  B : %name B
\&    15        \*(Aqb\*(Aq { }
\&    16  ;
\&    17  %%
.Ve
.PP
since the action at line 15 returns \f(CW\*(C`undef\*(C'\fR
the \f(CW\*(C`B : \*(Aqb\*(Aq\*(C'\fR subtree will not be inserted in the \s-1AST:\s0
.PP
.Vb 3
\&  $ usereturnnonode.pl
\&  ababa
\&  AES(BES(AES(BES(AES(EMPTY,A(TERMINAL[a]))),A(TERMINAL[a]))),A(TERMINAL[a]))
.Ve
.PP
Observe the absence of \f(CW\*(C`B\*(C'\fRs and \f(CW\*(Aqb\*(Aq\fRs.
.ie n .SS "Intermediate actions and %tree"
.el .SS "Intermediate actions and \f(CW%tree\fP"
.IX Subsection "Intermediate actions and %tree"
Intermediate actions can be used to change the shape of the \s-1AST\s0 (prune it,
decorate it, etc.) but the value returned by them is ignored. The grammar 
below has two intermediate actions. They modify the attributes of the
node to its left and return a reference \f(CW$f\fR to such node (lines 5 and 6):
.PP
.Vb 10
\&  $ sed \-ne \*(Aq1,15p\*(Aq intermediateactiontree.yp | cat \-n
\&     1  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq
\&     2  %tree bypass
\&     3  %%
\&     4  S:    %name EMPTY
\&     5         /* empty */
\&     6      | %name SA
\&     7         S A.f { $f\->{attr} = "A"; $f; } A
\&     8      | %name SB
\&     9         S B.f { $f\->{attr} = "B"; $f; } B
\&    10  ;
\&    11  A : %name A \*(Aqa\*(Aq
\&    12  ;
\&    13  B : %name B \*(Aqb\*(Aq
\&    14  ;
\&    15  %%
.Ve
.PP
See the client program:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> cat \-n useintermediateactiontree.pl
\&  1  #!/usr/bin/perl \-w
\&  2  use strict;
\&  3  use Parse::Eyapp;
\&  4  use intermediateactiontree;
\&  5
\&  6  { no warnings;
\&  7  *A::info = *B::info = sub { $_[0]{attr} };
\&  8  }
\&  9
\& 10  my $parser = intermediateactiontree\->new();
\& 11  my $t = $parser\->Run;
\& 12  print $t\->str,"\en";
.Ve
.PP
When it runs produces this output:
.PP
.Vb 3
\&  $ useintermediateactiontree.pl
\&  aabbaa
\&  SA(SB(SA(EMPTY,A[A],A[a]),B[B],B[b]),A[A],A[a])
.Ve
.PP
The 
attributes 
of left \f(CW\*(C`A\*(C'\fRs 
have been effectively changed by the intermediate actions
from \f(CW\*(Aqa\*(Aq\fR to \f(CW\*(AqA\*(Aq\fR.
However no further children have been inserted.
.SS "Syntactic and Semantic tokens"
.IX Subsection "Syntactic and Semantic tokens"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR differences between \f(CW\*(C`syntactic tokens\*(C'\fR
and \f(CW\*(C`semantic tokens\*(C'\fR. By default all tokens
declared using string notation (i.e. between quotes
like \f(CW\*(Aq+\*(Aq\fR, \f(CW\*(Aq=\*(Aq\fR)
are considered \fIsyntactic tokens\fR. Tokens declared by an identifier
(like \f(CW\*(C`NUM\*(C'\fR or \f(CW\*(C`VAR\*(C'\fR) are by default considered
\&\fIsemantic tokens\fR. \fBSyntactic tokens do not yield to nodes in the
syntactic tree\fR. Thus, the first print in the section Parse::Eyapp \s-1SYNOPSIS\s0 example:
.PP
.Vb 10
\&  $ cat \-n synopsis.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp;
\&     4  use Parse::Eyapp::Treeregexp;
\&     5
\&     6  sub TERMINAL::info {
\&     7    $_[0]{attr}
\&     8  }
\&     9
\&    10  my $grammar = q{
\&    11    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    12    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    13    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    14    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    15    %tree           # Let us build an abstract syntax tree ...
\&    16
\&    17    %%
\&    18    line:
\&    19        exp <%name EXPRESSION_LIST + \*(Aq;\*(Aq>
\&    20          { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    21    ;
\&    22
\&    23    /* The %name directive defines the name of the class */
\&    24    exp:
\&    25        %name NUM
\&    26        NUM
\&    27      | %name VAR
\&    28        VAR
\&    29      | %name ASSIGN
\&    30        VAR \*(Aq=\*(Aq exp
\&    31      | %name PLUS
\&    32        exp \*(Aq+\*(Aq exp
\&    33      | %name MINUS
\&    34        exp \*(Aq\-\*(Aq exp
\&    35      | %name TIMES
\&    36        exp \*(Aq*\*(Aq exp
\&    37      | %name DIV
\&    38        exp \*(Aq/\*(Aq exp
\&    39      | %name UMINUS
\&    40        \*(Aq\-\*(Aq exp %prec NEG
\&    41      | \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    42          { $_[2] }  /* Let us simplify a bit the tree */
\&    43    ;
\&    44
\&    45    %%
\&    46    sub _Error { die "Syntax error near ".($_[0]\->YYCurval?$_[0]\->YYCurval:"end of file")."\en" }
\&    47
\&    48    sub _Lexer {
\&    49      my($parser)=shift; # The parser object
\&    50
\&    51      for ($parser\->YYData\->{INPUT}) { # Topicalize
\&    52        m{\eG\es+}gc;
\&    53        $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    54        m{\eG([0\-9]+(?:\e.[0\-9]+)?)}gc and return(\*(AqNUM\*(Aq,$1);
\&    55        m{\eG([A\-Za\-z][A\-Za\-z0\-9_]*)}gc and return(\*(AqVAR\*(Aq,$1);
\&    56        m{\eG(.)}gcs and return($1,$1);
\&    57      }
\&    58      return(\*(Aq\*(Aq,undef);
\&    59    }
\&    60
\&    61    sub Run {
\&    62        my($self)=shift;
\&    63        $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error, );
\&    64    }
\&    65  }; # end grammar
\&    66
\&    67  our (@all, $uminus);
\&    68
\&    69  Parse::Eyapp\->new_grammar( # Create the parser package/class
\&    70    input=>$grammar,
\&    71    classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&    72    firstline=>7       # String $grammar starts at line 7 (for error diagnostics)
\&    73  );
\&    74  my $parser = Calc\->new();                # Create a parser
\&    75  $parser\->YYData\->{INPUT} = "2*\-3+b*0;\-\-2\en"; # Set the input
\&    76  my $t = $parser\->Run;                    # Parse it!
\&    77  local $Parse::Eyapp::Node::INDENT=2;
\&    78  print "Syntax Tree:",$t\->str;
\&    79
\&    80  # Let us transform the tree. Define the tree\-regular expressions ..
\&    81  my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&    82      { #  Example of support code
\&    83        my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&    84      }
\&    85      constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM($x), NUM($y))
\&    86        => {
\&    87          my $op = $Op{ref($bin)};
\&    88          $x\->{attr} = eval  "$x\->{attr} $op $y\->{attr}";
\&    89          $_[0] = $NUM[0];
\&    90        }
\&    91      uminus: UMINUS(NUM($x)) => { $x\->{attr} = \-$x\->{attr}; $_[0] = $NUM }
\&    92      zero_times_whatever: TIMES(NUM($x), .) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    93      whatever_times_zero: TIMES(., NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    94    },
\&    95    OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\&    96  );
\&    97  $p\->generate(); # Create the tranformations
\&    98
\&    99  $t\->s($uminus); # Transform UMINUS nodes
\&   100  $t\->s(@all);    # constant folding and mult. by zero
\&   101
\&   102  local $Parse::Eyapp::Node::INDENT=0;
\&   103  print "\enSyntax Tree after transformations:\en",$t\->str,"\en";
.Ve
.PP
gives as result the following output:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> synopsis.pl
\& Syntax Tree:
\& EXPRESSION_LIST(
\&   PLUS(
\&     TIMES(
\&       NUM(
\&         TERMINAL[2]
\&       ),
\&       UMINUS(
\&         NUM(
\&           TERMINAL[3]
\&         )
\&       ) # UMINUS
\&     ) # TIMES,
\&     TIMES(
\&       VAR(
\&         TERMINAL[b]
\&       ),
\&       NUM(
\&         TERMINAL[0]
\&       )
\&     ) # TIMES
\&   ) # PLUS,
\&   UMINUS(
\&     UMINUS(
\&       NUM(
\&         TERMINAL[2]
\&       )
\&     ) # UMINUS
\&   ) # UMINUS
\& ) # EXPRESSION_LIST
.Ve
.PP
\&\f(CW\*(C`TERMINAL\*(C'\fR nodes corresponding to tokens that were defined by strings like
\&\f(CW\*(Aq=\*(Aq\fR, \f(CW\*(Aq\-\*(Aq\fR, \f(CW\*(Aq+\*(Aq\fR, \f(CW\*(Aq/\*(Aq\fR, \f(CW\*(Aq*\*(Aq\fR, \f(CW\*(Aq(\*(Aq\fR and \f(CW\*(Aq)\*(Aq\fR  do not 
appear in the tree.  \f(CW\*(C`TERMINAL\*(C'\fR nodes corresponding to tokens that were defined
using an identifier, like \f(CW\*(C`NUM\*(C'\fR or \f(CW\*(C`VAR\*(C'\fR are, by default,  \fIsemantic tokens\fR
and appear in the \s-1AST\s0.
.SS "Changing the Status of a Token"
.IX Subsection "Changing the Status of a Token"
The new token declaration directives \f(CW\*(C`%syntactic token\*(C'\fR and
\&\f(CW\*(C`%semantic token\*(C'\fR can change the status of a token.
For example (file \f(CW\*(C`15treewithsyntactictoken.pl\*(C'\fR in the \f(CW\*(C`examples/\*(C'\fR directory), 
given the grammar:
.PP
.Vb 3
\&   %syntactic token b
\&   %semantic token \*(Aqa\*(Aq \*(Aqc\*(Aq
\&   %tree
\&
\&   %%
\&
\&   S: %name ABC
\&        A B C
\&    | %name BC
\&        B C
\&   ;
\&
\&   A: %name A
\&        \*(Aqa\*(Aq
\&   ;
\&
\&   B: %name B
\&        b
\&   ;
\&
\&   C: %name C
\&       \*(Aqc\*(Aq
\&   ;
\&   %%
.Ve
.PP
the tree build for input \f(CW\*(C`abc\*(C'\fR will be 
\&\f(CW\*(C`ABC(A(TERMINAL[a]),B,C(TERMINAL[c]))\*(C'\fR.
.SS "Saving the Information of Syntactic Tokens in their Father"
.IX Subsection "Saving the Information of Syntactic Tokens in their Father"
The reason for the adjective \f(CW%syntactic\fR applied to a token is to 
state that the token influences the shape of the syntax tree
but carries no other information. When the syntax tree is built
the node corresponding to the token is discarded.
.PP
Sometimes the difference between syntactic and semantic 
tokens is blurred. For example the line number associated
with an instance of the syntactic token \f(CW\*(Aq+\*(Aq\fR can be used later
\&\-say during type checking\- to emit a more accurate error
diagnostic. But if the node was discarded the information
about that line number is no longer available.
When building the syntax tree \f(CW\*(C`Parse::Eyapp\*(C'\fR (namely
the method \f(CW\*(C`Parse::Eyapp::YYBuildAST\*(C'\fR) checks 
if the method \f(CW\*(C`TERMINAL::save_attributes\*(C'\fR exists and if so
it will be called when dealing with a \fIsyntactic token\fR. 
The method receives as argument \- additionally
to the reference to the attribute of the token as it
is returned by the lexical analyzer \- a reference
to the node associated with the left hand side of the
production. Here is an example (file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR
in \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR)
of use:
.PP
.Vb 5
\&              sub TERMINAL::save_attributes {
\&                # $_[0] is a syntactic terminal
\&                # $_[1] is the father.
\&                push @{$_[1]\->{lines}}, $_[0]\->[1]; # save the line number
\&              }
.Ve
.ie n .SS "The  ""bypass"" clause and the ""%no bypass"" directive"
.el .SS "The  \f(CWbypass\fP clause and the \f(CW%no bypass\fP directive"
.IX Subsection "The  bypass clause and the %no bypass directive"
The shape of the tree can be also modified using some \f(CW%tree\fR clauses
as \f(CW\*(C`%tree bypass\*(C'\fR which will produce an automatic \fIbypass\fR of any
node with only one child at tree-construction-time.
.PP
A \fIbypass operation\fR consists in \fIreturning the only child 
of the node being visited to the father of the node and re-typing (re-blessing)
the node in the name of the production\fR (if a name was provided).
.PP
A node may have only one child at tree-construction-time for one of
two reasons.
.IP "\(bu" 4
The first occurs when the right hand side of the production
was already unary like in:
.Sp
.Vb 2
\&                           exp:
\&                               %name NUM  NUM
.Ve
.Sp
Here \- if the \f(CW\*(C`bypass\*(C'\fR clause is used \- 
the \f(CW\*(C`NUM\*(C'\fR node will be bypassed and the child \f(CW\*(C`TERMINAL\*(C'\fR built
from the information provided by the lexical analyzer will be renamed/reblessed 
as \f(CW\*(C`NUM\*(C'\fR.
.IP "\(bu" 4
Another reason for a node to be \fIbypassed\fR is  the fact that though the right
hand side of the production may have more than one symbol, 
only one of them is not a syntactic token
like in:
.Sp
.Vb 1
\&                           exp: \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.PP
A consequence of the global scope application of \f(CW\*(C`%tree bypass\*(C'\fR
is that undesired bypasses may occur like in
.PP
.Vb 2
\&                           exp : %name UMINUS
\&                                 \*(Aq\-\*(Aq $exp %prec NEG
.Ve
.PP
though the right hand side has two symbols, token \f(CW\*(Aq\-\*(Aq\fR is
a syntactic token and therefore only \f(CW\*(C`exp\*(C'\fR is left. The \fIbypass\fR
operation will be applied when building this node.
This \fIbypass\fR can be avoided applying the \f(CW\*(C`no bypass ID\*(C'\fR directive to the corresponding 
production:
.PP
.Vb 2
\&                           exp : %no bypass UMINUS
\&                                 \*(Aq\-\*(Aq $exp %prec NEG
.Ve
.PP
The following example (file \f(CW\*(C`examples/bypass.pl\*(C'\fR) 
is the equivalent of the Parse::Eyapp \s-1SYNOPSIS\s0 example
but using the \f(CW\*(C`bypass\*(C'\fR clause instead:
.PP
.Vb 2
\& use Parse::Eyapp;
\& use Parse::Eyapp::Treeregexp;
\&
\& sub TERMINAL::info { $_[0]{attr} }
\& { no warnings; *VAR::info = *NUM::info = \e&TERMINAL::info; }
\&
\& my $grammar = q{
\&   %right  \*(Aq=\*(Aq     # Lowest precedence
\&   %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq 
\&   %left   \*(Aq*\*(Aq \*(Aq/\*(Aq 
\&   %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&   %tree bypass    # Let us build an abstract syntax tree ...
\&
\&   %%
\&   line: exp <%name EXPRESSION_LIST + \*(Aq;\*(Aq>  { $_[1] } 
\&   ;
\&
\&   exp:
\&       %name NUM  NUM            | %name VAR   VAR         | %name ASSIGN VAR \*(Aq=\*(Aq exp
\&     | %name PLUS exp \*(Aq+\*(Aq exp    | %name MINUS exp \*(Aq\-\*(Aq exp | %name TIMES  exp \*(Aq*\*(Aq exp
\&     | %name DIV     exp \*(Aq/\*(Aq exp
\&     | %no bypass UMINUS
\&       \*(Aq\-\*(Aq $exp %prec NEG
\&     |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&   ;
\&
\&   %%
\&   # sub _Error, _Lexer and Run like in the synopsis example
\&   # ...
\& }; # end grammar
\&
\& our (@all, $uminus);
\&
\& Parse::Eyapp\->new_grammar( # Create the parser package/class
\&   input=>$grammar,
\&   classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&   firstline=>7       # String $grammar starts at line 7 (for error diagnostics)
\& );
\& my $parser = Calc\->new();                # Create a parser
\& $parser\->YYData\->{INPUT} = "a=2*\-3+b*0\en"; # Set the input
\& my $t = $parser\->Run;                    # Parse it!
\&
\& print "\en************\en".$t\->str."\en************\en";
\&
\& # Let us transform the tree. Define the tree\-regular expressions ..
\& my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&   { #  Example of support code
\&     my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&   }
\&   constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM, NUM)
\&     => {
\&       my $op = $Op{ref($_[0])};
\&       $NUM[0]\->{attr} = eval  "$NUM[0]\->{attr} $op $NUM[1]\->{attr}";
\&       $_[0] = $NUM[0];
\&     }
\&   zero_times_whatever: TIMES(NUM, .) and { $NUM\->{attr} == 0 } => { $_[0] = $NUM }
\&   whatever_times_zero: TIMES(., NUM) and { $NUM\->{attr} == 0 } => { $_[0] = $NUM }
\&   uminus: UMINUS(NUM) => { $NUM\->{attr} = \-$NUM\->{attr}; $_[0] = $NUM }
\&   },
\&   OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\& );
\& $p\->generate(); # Create the tranformations
\&
\& $t\->s(@all);    # constant folding and mult. by zero
\&
\& print $t\->str,"\en";
.Ve
.PP
when running this example with input \f(CW"a=2*\-3+b*0\en"\fR
we obtain the following output:
.PP
.Vb 1
\& nereida:~/src/perl/YappWithDefaultAction/examples> bypass.pl
\&
\& ************
\& EXPRESSION_LIST(ASSIGN(TERMINAL[a],PLUS(TIMES(NUM[2],UMINUS(NUM[3])),TIMES(VAR[b],NUM[0]))))
\& ************
\& EXPRESSION_LIST(ASSIGN(TERMINAL[a],NUM[\-6]))
.Ve
.PP
As you can see the trees are more compact when using the \f(CW\*(C`bypass\*(C'\fR directive.
.ie n .SS "The ""alias"" clause of the %tree directive"
.el .SS "The \f(CWalias\fP clause of the \f(CW%tree\fP directive"
.IX Subsection "The alias clause of the %tree directive"
Access to children in Parse::Eyapp is made through the \f(CW\*(C`child\*(C'\fR and \f(CW\*(C`children\*(C'\fR
methods.
There are occasions however where access by name to the children may be preferable.
The use of the \f(CW\*(C`alias\*(C'\fR clause with the \f(CW%tree\fR directive creates accessors
to the children with names specified by the programmer. The \fIdot and dollar notations\fR
are used for this. When dealing with a production like:
.PP
.Vb 3
\&                       A: 
\&                          %name A_Node
\&                          Node B.bum N.pum $Chip
.Ve
.PP
methods \f(CW\*(C`bum\*(C'\fR, \f(CW\*(C`pum\*(C'\fR and \f(CW\*(C`Chip\*(C'\fR will be created for the class \f(CW\*(C`A_Node\*(C'\fR.
Those methods will provide access to the respective child (first, second and third in
the example). The methods are build at compile-time and therefore later 
transformations of the \s-1AST\s0 modifying the order of the children may 
invalidate the use of these getter-setters.
.PP
The \f(CW%prefix\fR directive used in line 7 of the following example
is equivalent to the use of the \f(CW\*(C`yyprefix\*(C'\fR. The node classes are prefixed
with the specified prefix: \f(CW\*(C`R::S::\*(C'\fR in this example.
.PP
.Vb 10
\& cat \-n alias_and_yyprefix.pl
\&     1  #!/usr/local/bin/perl
\&     2  use warnings;
\&     3  use strict;
\&     4  use Parse::Eyapp;
\&     5
\&     6  my $grammar = q{
\&     7    %prefix R::S::
\&     8
\&     9    %right  \*(Aq=\*(Aq
\&    10    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    11    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    12    %left   NEG
\&    13    %tree bypass alias
\&    14
\&    15    %%
\&    16    line: $exp  { $_[1] }
\&    17    ;
\&    18
\&    19    exp:
\&    20        %name NUM
\&    21              $NUM
\&    22      | %name VAR
\&    23              $VAR
\&    24      | %name ASSIGN
\&    25              $VAR \*(Aq=\*(Aq $exp
\&    26      | %name PLUS
\&    27              exp.left \*(Aq+\*(Aq exp.right
\&    28      | %name MINUS
\&    29              exp.left \*(Aq\-\*(Aq exp.right
\&    30      | %name TIMES
\&    31              exp.left \*(Aq*\*(Aq exp.right
\&    32      | %name DIV
\&    33              exp.left \*(Aq/\*(Aq exp.right
\&    34      | %no bypass UMINUS
\&    35              \*(Aq\-\*(Aq $exp %prec NEG
\&    36      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] } /* Let us simplify a bit the tree */
\&    37    ;
\&    38
\&    39    %%
\&    ..    ....
\&    76  }; # end grammar
\&    77
\&    78
\&    79  Parse::Eyapp\->new_grammar(
\&    80    input=>$grammar,
\&    81    classname=>\*(AqAlias\*(Aq,
\&    82    firstline =>7,
\&    83    outputfile => \*(Aqmain\*(Aq,
\&    84  );
\&    85  my $parser = Alias\->new();
\&    86  $parser\->YYData\->{INPUT} = "a = \-(2*3+5\-1)\en";
\&    87  my $t = $parser\->Run;
\&    88  $Parse::Eyapp::Node::INDENT=0;
\&    89  print $t\->VAR\->str."\en";             # a
\&    90  print "***************\en";
\&    91  print $t\->exp\->exp\->left\->str."\en";  # 2*3+5
\&    92  print "***************\en";
\&    93  print $t\->exp\->exp\->right\->str."\en"; # 1
.Ve
.PP
The tree \f(CW$t\fR for the expression \f(CW"a = \-(2*3+5\-1)\en"\fR is:
.PP
.Vb 9
\&  R::S::ASSIGN(
\&     R::S::TERMINAL,
\&     R::S::UMINUS(
\&       R::S::MINUS(
\&         R::S::PLUS(R::S::TIMES(R::S::NUM,R::S::NUM),R::S::NUM),
\&         R::S::NUM
\&       )
\&     )
\&  )
.Ve
.PP
The \f(CW\*(C`R::S::ASSIGN\*(C'\fR class has methods \f(CW\*(C`VAR\*(C'\fR (see line 89 above)
and \f(CW\*(C`exp\*(C'\fR (see lines 91 and 93) to refer to its two children. 
The result of the execution is:
.PP
.Vb 6
\&  $ alias_and_yyprefix.pl
\&  R::S::TERMINAL
\&  ***************
\&  R::S::PLUS(R::S::TIMES(R::S::NUM,R::S::NUM),R::S::NUM)
\&  ***************
\&  R::S::NUM
.Ve
.PP
As a second example of the use of \f(CW%alias\fR, the \s-1CPAN\s0 module Language::AttributeGrammar provides
\&\s-1AST\s0 decorators from an attribute grammar specification of the \s-1AST\s0.
To work  Language::AttributeGrammar requires named access to the children
of the \s-1AST\s0 nodes. Follows an example (file \f(CW\*(C`examples/CalcwithAttributeGrammar.pl\*(C'\fR)
of a small calculator:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n CalcwithAttributeGrammar.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp;
\&     4  use Data::Dumper;
\&     5  use Language::AttributeGrammar;
\&     6
\&     7  my $grammar = q{
\&     8  %{
\&     9  # use Data::Dumper;
\&    10  %}
\&    11  %right  \*(Aq=\*(Aq
\&    12  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    13  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    14  %left   NEG
\&    15  %tree bypass alias
\&    16
\&    17  %%
\&    18  line: $exp  { $_[1] }
\&    19  ;
\&    20
\&    21  exp:
\&    22      %name NUM
\&    23            $NUM
\&    24          | %name VAR
\&    25            $VAR
\&    26          | %name ASSIGN
\&    27            $VAR \*(Aq=\*(Aq $exp
\&    28          | %name PLUS
\&    29            exp.left \*(Aq+\*(Aq exp.right
\&    30          | %name MINUS
\&    31            exp.left \*(Aq\-\*(Aq exp.right
\&    32          | %name TIMES
\&    33            exp.left \*(Aq*\*(Aq exp.right
\&    34          | %name DIV
\&    35            exp.left \*(Aq/\*(Aq exp.right
\&    36          | %no bypass UMINUS
\&    37            \*(Aq\-\*(Aq $exp %prec NEG
\&    38    |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq  { $_[2] } /* Let us simplify a bit the tree */
\&    39  ;
\&    40
\&    41  %%
\&    42
\&    43  sub _Error {
\&    44          exists $_[0]\->YYData\->{ERRMSG}
\&    45      and do {
\&    46          print $_[0]\->YYData\->{ERRMSG};
\&    47          delete $_[0]\->YYData\->{ERRMSG};
\&    48          return;
\&    49      };
\&    50      print "Syntax error.\en";
\&    51  }
\&    52
\&    53  sub _Lexer {
\&    54      my($parser)=shift;
\&    55
\&    56          $parser\->YYData\->{INPUT}
\&    57      or  $parser\->YYData\->{INPUT} = <STDIN>
\&    58      or  return(\*(Aq\*(Aq,undef);
\&    59
\&    60      $parser\->YYData\->{INPUT}=~s/^\es+//;
\&    61
\&    62      for ($parser\->YYData\->{INPUT}) {
\&    63          s/^([0\-9]+(?:\e.[0\-9]+)?)//
\&    64                  and return(\*(AqNUM\*(Aq,$1);
\&    65          s/^([A\-Za\-z][A\-Za\-z0\-9_]*)//
\&    66                  and return(\*(AqVAR\*(Aq,$1);
\&    67          s/^(.)//s
\&    68                  and return($1,$1);
\&    69      }
\&    70  }
\&    71
\&    72  sub Run {
\&    73      my($self)=shift;
\&    74      $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&    75                      #yydebug =>0xFF
\&    76                    );
\&    77  }
\&    78  }; # end grammar
\&    79
\&    80
\&    81  $Data::Dumper::Indent = 1;
\&    82  Parse::Eyapp\->new_grammar(
\&    83    input=>$grammar,
\&    84    classname=>\*(AqRule6\*(Aq,
\&    85    firstline =>7,
\&    86    outputfile => \*(AqCalc.pm\*(Aq,
\&    87  );
\&    88  my $parser = Rule6\->new();
\&    89  $parser\->YYData\->{INPUT} = "a = \-(2*3+5\-1)\en";
\&    90  my $t = $parser\->Run;
\&    91  print "\en***** Before ******\en";
\&    92  print Dumper($t);
\&    93
\&    94  my $attgram = new Language::AttributeGrammar <<\*(AqEOG\*(Aq;
\&    95
\&    96  # Compute the expression
\&    97  NUM:    $/.val = { $<attr> }
\&    98  TIMES:  $/.val = { $<left>.val * $<right>.val }
\&    99  PLUS:   $/.val = { $<left>.val + $<right>.val }
\&   100  MINUS:  $/.val = { $<left>.val \- $<right>.val }
\&   101  UMINUS: $/.val = { \-$<exp>.val }
\&   102  ASSIGN: $/.val = { $<exp>.val }
\&   103  EOG
\&   104
\&   105  my $res = $attgram\->apply($t, \*(Aqval\*(Aq);
\&   106
\&   107  $Data::Dumper::Indent = 1;
\&   108  print "\en***** After ******\en";
\&   109  print Dumper($t);
\&   110  print Dumper($res);
\&
\& CalcwithAttributeGrammar.pl
.Ve
.PP
The program computes the tree for expression for expression
\&\f(CW\*(C`a = \-(2*3+5\-1)\*(C'\fR which is:
.PP
.Vb 1
\&  ASSIGN(TERMINAL,UMINUS(MINUS(PLUS(TIMES(NUM,NUM),NUM),NUM)))
.Ve
.PP
The children of the binary nodes can be accessed through the \f(CW\*(C`left\*(C'\fR
and \f(CW\*(C`right\*(C'\fR methods.
.SS "About the Encapsulation of Nodes"
.IX Subsection "About the Encapsulation of Nodes"
There is no encapsulation of nodes. The user/client 
knows that they are hashes that can be decorated with new keys/attributes.
All nodes in the \s-1AST\s0 created by \f(CW%tree\fR are \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes.
The only reserved field is \f(CW\*(C`children\*(C'\fR which is a reference to the
array of children. You can always create a \f(CW\*(C`Node\*(C'\fR class 
\&\fIby hand\fR by inheriting from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR.
.SH "SOLVING CONFLICTS WITH THE \fIPOSTPONED CONFLICT\fP STRATEGY"
.IX Header "SOLVING CONFLICTS WITH THE POSTPONED CONFLICT STRATEGY"
Yacc-like parser generators provide ways to solve shift-reduce mechanims
based on token precedence. No mechanisms are provided for the resolution
of reduce-reduce conflicts. The solution for such kind of conflicts is to modify
the grammar. The strategy We present here provides a way to broach conflicts
that can't be solved using static precedences.
.SS "The \fIPostponed Conflict Resolution\fP Strategy"
.IX Subsection "The Postponed Conflict Resolution Strategy"
The \fIpostponed conflict strategy\fR presented here can be used whenever there 
is a shift-reduce or reduce-reduce conflict that can not be solved using static 
precedences.
.SS "\fIPostponed Conflict Resolution\fP: Reduce-Reduce Conflicts"
.IX Subsection "Postponed Conflict Resolution: Reduce-Reduce Conflicts"
Let us assume we have a reduce-reduce conflict between to productions
.PP
.Vb 2
\&                      A \-> alpha .
\&                      B \-> beta .
.Ve
.PP
for some token \f(CW\*(C`@\*(C'\fR. Let also assume that production
.PP
.Vb 1
\&                      A \-> alpha
.Ve
.PP
has name \f(CW\*(C`ruleA\*(C'\fR and production
.PP
.Vb 1
\&                      B \-> beta
.Ve
.PP
has name \f(CW\*(C`ruleB\*(C'\fR.
.PP
The postponed conflict resolution strategy consists
in modifying the conflictive grammar by marking the points where the  conflict occurs
with the new \f(CW%PREC\fR directive. In this case at then end of the involved productions:
.PP
.Vb 2
\&                      A \-> alpha %PREC IsAorB 
\&                      B \-> beta  $PREC IsAorB
.Ve
.PP
The \f(CW\*(C`IsAorB\*(C'\fR identifier is called the \fIconflict name\fR.
.PP
Inside the head section, the programmer associates with the 
conflict name a code
whose mission is to solve the conflict by dynamically changing the
parsing table like this:
.PP
.Vb 2
\&                     %conflict IsAorB {
\&                          my $self = shift;
\&
\&                          if (looks_like_A($self)) {
\&                            $self\->YYSetReduce(\*(Aq@\*(Aq, \*(AqruleA\*(Aq );
\&                          }
\&                          else {
\&                            $self\->YYSetReduce(\*(Aq@\*(Aq, \*(AqruleB\*(Aq );
\&                          }
\&                       }
.Ve
.PP
The code associated with the \fIconflict name\fR
receives the name of \fI conflict handler\fR.
The code of \f(CW\*(C`looks_like_A\*(C'\fR stands for some form of nested parsing
which will decide which production applies.
.SS "Solving the Enumerated versus Range declarations conflict using the Posponed Conflict Resolution Strategy"
.IX Subsection "Solving the Enumerated versus Range declarations conflict using the Posponed Conflict Resolution Strategy"
In file \f(CW\*(C`pascalenumeratedvsrangesolvedviadyn.eyp\*(C'\fR we apply the postponed conflict resolution strategy
to the reduce reduce conflict that arises in Extended Pascal between the declaration of ranges and
the declaration of enumerated types (see section \*(L"Reduce-Reduce conflict: Enumerated versus Range declarations in Extended Pascal\*(R").
Here is the solution:
.PP
.Vb 10
\&  ~/LEyapp/examples/debuggingtut$ cat \-n pascalenumeratedvsrangesolvedviadyn.eyp
\&     1  %{
\&     2  =head1 SYNOPSIS
\&     3  
\&     4  See 
\&     5  
\&     6  =over 2
\&     7  
\&     8  =item * File pascalenumeratedvsrange.eyp in examples/debuggintut/
\&     9  
\&    10  =item * The Bison manual L<http://www.gnu.org/software/bison/manual/html_mono/bison.html>
\&    11  
\&    12  =back
\&    13  
\&    14  Compile it with:
\&    15  
\&    16              eyapp \-b \*(Aq\*(Aq pascalenumeratedvsrangesolvedviadyn.eyp
\&    17  
\&    18  run it with this options:
\&    19  
\&    20              ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&    21  
\&    22  Try these inputs:
\&    23  
\&    24                  type r = (x) ..  y ;
\&    25                  type r = (x+2)*3 ..  y/2 ;
\&    26                  type e = (x, y, z);
\&    27                  type e = (x);
\&    28  
\&    29  =cut
\&    30  
\&    31  use base q{DebugTail}; 
\&    32  
\&    33  my $ID = qr{[A\-Za\-z][A\-Za\-z0\-9_]*};
\&    34               # Identifiers separated by commas
\&    35  my $IDLIST = qr{ \es*(?:\es*,\es* $ID)* \es* }x;
\&    36               # list followed by a closing par and a semicolon 
\&    37  my $RESTOFLIST = qr{$IDLIST \e) \es* ; }x;
\&    38  %}
\&    39  
\&    40  %namingscheme {
\&    41    #Receives a Parse::Eyapp object describing the grammar
\&    42    my $self = shift;
\&    43  
\&    44    $self\->tokennames(
\&    45      \*(Aq(\*(Aq => \*(AqLP\*(Aq,
\&    46      \*(Aq..\*(Aq => \*(AqDOTDOT\*(Aq,
\&    47      \*(Aq,\*(Aq => \*(AqCOMMA\*(Aq,
\&    48      \*(Aq)\*(Aq => \*(AqRP\*(Aq,
\&    49      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    50      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    51      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    52      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    53    );
\&    54  
\&    55    # returns the handler that will give names
\&    56    # to the right hand sides
\&    57    \e&give_rhs_name;
\&    58  }
\&    59  
\&    60  %strict
\&    61  
\&    62  %token ID NUM DOTDOT TYPE
\&    63  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    64  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    65  
\&    66  %tree
\&    67  
\&    68  %%
\&    69  
\&    70  type_decl : TYPE ID \*(Aq=\*(Aq type \*(Aq;\*(Aq
\&    71  ;
\&    72  
\&    73  type : 
\&    74        %name ENUM
\&    75        \*(Aq(\*(Aq id_list \*(Aq)\*(Aq
\&    76      | %name RANGE
\&    77        expr DOTDOT expr
\&    78  ;
\&    79  
\&    80  id_list : 
\&    81        %name EnumID
\&    82        ID rangeORenum
\&    83      | id_list \*(Aq,\*(Aq ID
\&    84  ;
\&    85  
\&    86  expr : \*(Aq(\*(Aq expr \*(Aq)\*(Aq
\&    87      | expr \*(Aq+\*(Aq expr
\&    88      | expr \*(Aq\-\*(Aq expr
\&    89      | expr \*(Aq*\*(Aq expr
\&    90      | expr \*(Aq/\*(Aq expr
\&    91      | %name RangeID
\&    92        ID rangeORenum
\&    93      | NUM
\&    94  ;
\&    95  
\&    96  rangeORenum: /* empty: postponed conflict resolution */
\&    97        {
\&    98            my $parser = shift;
\&    99            if (${$parser\->input()} =~ m{\eG(?= $RESTOFLIST)}gcx) {
\&   100                $parser\->YYSetReduce(\*(Aq)\*(Aq, \*(AqEnumID\*(Aq );
\&   101              }
\&   102              else {
\&   103                $parser\->YYSetReduce(\*(Aq)\*(Aq, \*(AqRangeID\*(Aq );
\&   104              }
\&   105        }
\&   106  ;
\&   107  
\&   108  %%
\&   109  
\&   110  _\|_PACKAGE_\|_\->lexer(
\&   111    sub {
\&   112      my $parser = shift;
\&   113  
\&   114      for (${$parser\->input()}) {    # contextualize
\&   115        m{\eG(\es*)}gc;
\&   116        $parser\->tokenline($1 =~ tr{\en}{});
\&   117  
\&   118        m{\eGtype\eb}gic                 and return (\*(AqTYPE\*(Aq, \*(AqTYPE\*(Aq);
\&   119  
\&   120        m{\eG($ID)}gc                   and return (\*(AqID\*(Aq,  $1);
\&   121  
\&   122        m{\eG([0\-9]+)}gc                and return (\*(AqNUM\*(Aq, $1);
\&   123  
\&   124        m{\eG\e.\e.}gc                    and return (\*(AqDOTDOT\*(Aq,  \*(Aq..\*(Aq);
\&   125  
\&   126        m{\eG(.)}gc                     and return ($1,    $1);
\&   127  
\&   128        return(\*(Aq\*(Aq,undef);
\&   129      }
\&   130    }
\&   131  );
\&   132  
\&   133  unless (caller()) {
\&   134    $Parse::Eyapp::Node::INDENT = 1;
\&   135    my $prompt = << \*(AqEOP\*(Aq;
\&   136  Try this input:
\&   137      type 
\&   138      r
\&   139      =
\&   140      (x)
\&   141      ..
\&   142      y
\&   143      ;
\&   144  
\&   145  Here other inputs you can try:
\&   146  
\&   147      type r = (x+2)*3 ..  y/2 ;
\&   148      type e = (x, y, z);
\&   149      type e = (x);
\&   150  
\&   151  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&   152  EOP
\&   153    _\|_PACKAGE_\|_\->main($prompt); 
\&   154  }
.Ve
.PP
This example also illustrates how to modify the default production
naming schema. Follows the result of several executions:
.PP
.Vb 9
\&  ~/LEyapp/examples/debuggingtut$ ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&  Try this input:
\&      type 
\&      r
\&      =
\&      (x)
\&      ..
\&      y
\&      ;
\&
\&  Here other inputs you can try:
\&
\&      type r = (x+2)*3 ..  y/2 ;
\&      type e = (x, y, z);
\&      type e = (x);
\&
\&  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&  type r = (x+2)*3 ..  y/2 ;
\&  ^D
\&  type_decl_is_TYPE_ID_type(
\&    TERMINAL[TYPE],
\&    TERMINAL[r],
\&    RANGE(
\&      expr_is_expr_TIMES_expr(
\&        expr_is_LP_expr_RP(
\&          expr_is_expr_PLUS_expr(
\&            RangeID(
\&              TERMINAL[x]
\&            ),
\&            expr_is_NUM(
\&              TERMINAL[2]
\&            )
\&          )
\&        ),
\&        expr_is_NUM(
\&          TERMINAL[3]
\&        )
\&      ),
\&      TERMINAL[..],
\&      expr_is_expr_DIV_expr(
\&        RangeID(
\&          TERMINAL[y]
\&        ),
\&        expr_is_NUM(
\&          TERMINAL[2]
\&        )
\&      )
\&    )
\&  )
\&  ~/LEyapp/examples/debuggingtut$ ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&  Try this input:
\&      type 
\&      r
\&      =
\&      (x)
\&      ..
\&      y
\&      ;
\&
\&  Here other inputs you can try:
\&
\&      type r = (x+2)*3 ..  y/2 ;
\&      type e = (x, y, z);
\&      type e = (x);
\&
\&  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&  type e = (x);
\&  ^D
\&  type_decl_is_TYPE_ID_type(
\&    TERMINAL[TYPE],
\&    TERMINAL[e],
\&    ENUM(
\&      EnumID(
\&        TERMINAL[x]
\&      )
\&    )
\&  )
.Ve
.SS "\fIPostponed Conflict Resolution\fP: Shift-Reduce Conflicts"
.IX Subsection "Postponed Conflict Resolution: Shift-Reduce Conflicts"
The program in \f(CW\*(C`examples/debuggingtut/DynamicallyChangingTheParser2.eyp\*(C'\fR illustrates how the postponed
conflict strategy is used for shift-reduce conflicts.
This is an extension of the grammar in \f(CW\*(C`examples/debuggingtut/Debug.eyp\*(C'\fR.
The generated language is constituted by sequences like:
.PP
.Vb 1
\&    { D; D; S; S; S; } {D; S} { S }
.Ve
.PP
As you remember the conflict was:
.PP
.Vb 2
\&  ~/LEyapp/examples/debuggingtut$ sed \-ne \*(Aq/^St.*13:/,/^St.*14/p\*(Aq DynamicallyChangingTheParser.output  
\&  State 13:
\&
\&      ds \-> D conflict . \*(Aq;\*(Aq ds   (Rule 6)
\&      ds \-> D conflict .  (Rule 7)
\&
\&      \*(Aq;\*(Aq shift, and go to state 16
\&
\&      \*(Aq;\*(Aq [reduce using rule 7 (ds)]
\&
\&  State 14:
.Ve
.PP
The \f(CW\*(C`conflict\*(C'\fR handler below sets the \s-1LR\s0 action
to reduce by the production with name \f(CW\*(C`D1\*(C'\fR
.PP
.Vb 1
\&                 ds \-> D
.Ve
.PP
in the presence of token \f(CW\*(Aq;\*(Aq\fR if indeed is the last \f(CW\*(AqD\*(Aq\fR, that is, if:
.PP
.Vb 1
\&       ${$self\->input()} =~ m{^\es*;\es*S}
.Ve
.PP
Otherwise we set the \f(CW\*(C`shift\*(C'\fR action via a call to the 
\&\f(CW\*(C`YYSetShift\*(C'\fR method.
.PP
.Vb 10
\&  ~/LEyapp/examples/debuggingtut$ sed \-ne \*(Aq30,$p\*(Aq DynamicallyChangingTheParser.eyp | cat \-n
\&     1  %token D S
\&     2  
\&     3  %tree bypass
\&     4  
\&     5  # Expect just 1 shift\-reduce conflict
\&     6  %expect 1 
\&     7  
\&     8  %%
\&     9  p: %name PROG
\&    10      block +
\&    11  ;
\&    12  
\&    13  block:
\&    14      %name BLOCK_DS
\&    15      \*(Aq{\*(Aq ds \*(Aq;\*(Aq ss \*(Aq}\*(Aq 
\&    16    | %name BLOCK_S
\&    17      \*(Aq{\*(Aq ss \*(Aq}\*(Aq
\&    18  ;
\&    19  
\&    20  ds:
\&    21      %name D2
\&    22      D conflict \*(Aq;\*(Aq ds    
\&    23    | %name D1
\&    24      D conflict        
\&    25  ;
\&    26  
\&    27  ss:
\&    28      %name S2
\&    29      S \*(Aq;\*(Aq ss      
\&    30    | %name S1
\&    31      S       
\&    32  ;
\&    33  
\&    34  conflict:
\&    35        /* empty. This action solves the conflict using dynamic precedence */
\&    36        {
\&    37          my $self = shift;
\&    38  
\&    39          if (${$self\->input()} =~ m{^\es*;\es*S}) {
\&    40            $self\->YYSetReduce(\*(Aq;\*(Aq, \*(AqD1\*(Aq )
\&    41          }
\&    42          else {
\&    43            $self\->YYSetShift(\*(Aq;\*(Aq)
\&    44          }
\&    45  
\&    46          undef; # skip this node in the AST
\&    47        }
\&    48  ;
\&    49  
\&    50  %%
\&    51  
\&    52  my $prompt = \*(AqProvide a statement like "{D; S} {D; D; S}" and press <CR><CTRL\-D>: \*(Aq;
\&    53  _\|_PACKAGE_\|_\->main($prompt) unless caller;
.Ve
.SH "NAMING SCHEMES"
.IX Header "NAMING SCHEMES"
Explicit names can be given to grammar productions
via the \f(CW%name\fR directive. An alternative to explicitly gave 
names to rules is to define a \fInaming scheme\fR via the Eyapp directive
\&\f(CW%namingscheme\fR. This can be helpful when you inherit a large grammar
and want to quickly build a parser. The \s-1ANSI\s0 C parser in 
\&\f(CW\*(C`examples/languages/C/ansic.eyp\*(C'\fR is a good example. Another
example is the Pascal parser in \f(CW\*(C`examples/languages/pascal/pascal.eyp\*(C'\fR.
.PP
The Eyapp directive \f(CW%namingscheme\fR is followed by some Perl code. Such Perl
code must return a reference to a subroutine that will be called each time a new
production right hand side is parsed. The subroutine returns the name for the production.
.PP
The Perl code defining the handler receives a \f(CW\*(C`Parse::Eyapp\*(C'\fR object
that describes the grammar. The code after the \f(CW%namingscheme\fR
directive is evaluated during the early phases of the compilation of the input 
grammar. As an example of how to set a naming scheme, 
see lines 22\-38 below (you can find this example and others in the directory
\&\f(CW\*(C`examples/naming\*(C'\fR of the accompanying distribution):
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ cat \-n GiveNamesToCalc.eyp
\&     1  # GiveNamesToCalc.eyp
\&     2  %right  \*(Aq=\*(Aq
\&     3  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     4  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     5  %left   NEG
\&     6  %right  \*(Aq^\*(Aq
\&     7
\&     8  %tree bypass
\&     9
\&    10  %{
\&    11  use base q{Tail};
\&    12
\&    13  sub exp_is_NUM::info {
\&    14    my $self = shift;
\&    15
\&    16    $self\->{attr}[0];
\&    17  }
\&    18
\&    19  *exp_is_VAR::info = *var_is_VAR::info = \e&exp_is_NUM::info;
\&    20  %}
\&    21
\&    22  %namingscheme {
\&    23    #Receives a Parse::Eyapp object describing the grammar
\&    24    my $self = shift;
\&    25
\&    26    $self\->tokennames(
\&    27      \*(Aq=\*(Aq => \*(AqASSIGN\*(Aq,
\&    28      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    29      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    30      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    31      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    32      \*(Aq^\*(Aq => \*(AqEXP\*(Aq,
\&    33    );
\&    34
\&    35    # returns the handler that will give names
\&    36    # to the right hand sides
\&    37    \e&give_token_name;
\&    38  }
\&    39  %%
\&    40
\&    41  line:
\&    42      exp
\&    43  ;
\&    44
\&    45  exp:
\&    46      NUM
\&    47    | VAR
\&    48    | var \*(Aq=\*(Aq exp
\&    49    | exp \*(Aq+\*(Aq exp
\&    50    | exp \*(Aq\-\*(Aq exp
\&    51    | exp \*(Aq*\*(Aq exp
\&    52    | exp \*(Aq/\*(Aq exp
\&    53    | %no bypass exp_is_NEG
\&    54       \*(Aq\-\*(Aq exp %prec NEG
\&    55    | exp \*(Aq^\*(Aq exp
\&    56    | \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    57  ;
\&    58
\&    59  var:
\&    60      VAR
\&    61  ;
\&    62  %%
\&    63
\&    64  unless (caller) {
\&    65    my $t = _\|_PACKAGE_\|_\->main(@ARGV);
\&    66    print $t\->str."\en";
\&    67  }
.Ve
.PP
The example uses a naming scheme that is provided by \f(CW\*(C`Parse::Eyapp\*(C'\fR: \f(CW\*(C`Parse::Eyapp::Grammar::give_token_name\*(C'\fR.
The current provided naming schemes handlers are:
.IP "\(bu" 2
\&\f(CW\*(C`give_default_name\*(C'\fR: The name of the production is the name of the Left Hand Side of the Production Rule
concatenated with an underscore and the index of the production
.IP "\(bu" 2
\&\f(CW\*(C`give_lhs_name\*(C'\fR: The name of the production is the name of the Left Hand Side of the Production Rule (this
is the naming scheme used by the \f(CW%tree\fR directive when no explicit name was given)
.IP "\(bu" 2
\&\f(CW\*(C`give_token_name\*(C'\fR: The name of the production is the Left Hand Side of the Production Rule followed by the 
word \f(CW\*(C`_is_\*(C'\fR followed by the concatenation of the names of the tokens in the right and side (separated by underscores).
.PP
All of these handlers are implemented inside the class \f(CW\*(C`Parse::Eyapp::Grammar\*(C'\fR. There is no need at line 
37 to explicit the class name prefix since the naming scheme code is evaluated inside such class:
.PP
.Vb 10
\&    22  %namingscheme {
\&    23    #Receives a Parse::Eyapp object describing the grammar
\&    24    my $self = shift;
\&    25
\&    26    $self\->tokennames(
\&    27      \*(Aq=\*(Aq => \*(AqASSIGN\*(Aq,
\&    28      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    29      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    30      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    31      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    32      \*(Aq^\*(Aq => \*(AqEXP\*(Aq,
\&    33    );
\&    34
\&    35    # returns the handler that will give names
\&    36    # to the right hand sides
\&    37    \e&give_token_name;
\&    38  }
.Ve
.PP
As it is illustrated in this example, the method \f(CW\*(C`tokennames\*(C'\fR of \f(CW\*(C`Parse::Eyapp\*(C'\fR
objects provide a way to give identifier names to tokens that are defined by strings.
When we execute the former module/program (modulino) with input \f(CW\*(C`a=2*\-3\*(C'\fR we got the following
output:
.PP
.Vb 5
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ eyapp \-b \*(Aq\*(Aq GiveNamesToCalc.eyp
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ ./GiveNamesToCalc.pm
\&  Expressions. Press CTRL\-D (Unix) or CTRL\-Z (Windows) to finish:
\&  a=2*\-3
\&  line_is_exp(var_is_VAR[a],exp_is_TIMES(exp_is_NUM[2],exp_is_NEG(exp_is_NUM[3])))
.Ve
.PP
For each production rule the handler is called with arguments:
.IP "\(bu" 2
the \f(CW\*(C`Parse::Eyapp\*(C'\fR object,
.IP "\(bu" 2
the production index (inside the grammar),
.IP "\(bu" 2
the left hand side
symbol and a reference to a list with the symbols in the right hand side.
.PP
The following code of some version of \f(CW\*(C`give_token_name\*(C'\fR exemplifies how a
naming scheme handler can be written:
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp$ sed \-ne \*(Aq101,132p\*(Aq lib/Parse/Eyapp/Grammar.pm | cat \-n
\&     1  sub give_token_name {
\&     2    my ($self, $index, $lhs, $rhs) = @_;
\&     3
\&     4    my @rhs = @$rhs;
\&     5    $rhs = \*(Aq\*(Aq;
\&     6
\&     7    unless (@rhs) { # Empty RHS
\&     8      return $lhs.\*(Aq_is_empty\*(Aq;
\&     9    }
\&    10
\&    11    my $names = $self\->{GRAMMAR}{TOKENNAMES} || {};
\&    12    for (@rhs) {
\&    13      if ($self\->is_token($_)) {
\&    14        s/^\*(Aq(.*)\*(Aq$/$1/;
\&    15        my $name = $names\->{$_} || \*(Aq\*(Aq;
\&    16        unless ($name) {
\&    17          $name = $_ if /^\ew+$/;
\&    18        }
\&    19        $rhs .= "_$name" if $name;
\&    20      }
\&    21    }
\&    22
\&    23    unless ($rhs) { # no \*(Aqword\*(Aq tokens in the RHS
\&    24      for (@rhs) {
\&    25        $rhs .= "_$_" if /^\ew+$/;
\&    26      }
\&    27    }
\&    28
\&    29    # check if another production with such name exists?
\&    30    my $name = $lhs.\*(Aq_is\*(Aq.$rhs;
\&    31    return $name;
\&    32  }
.Ve
.ie n .SH """Parse::Eyapp"" METHODS"
.el .SH "\f(CWParse::Eyapp\fP METHODS"
.IX Header "Parse::Eyapp METHODS"
A \f(CW\*(C`Parse::Eyapp\*(C'\fR object holds the information 
about the \f(CW\*(C`Eyapp\*(C'\fR input grammar: parsing tables,
conflicts, semantic actions, etc.
.SS "Parse::Eyapp\->new_grammar"
.IX Subsection "Parse::Eyapp->new_grammar"
To translate an Eyapp grammar you must use
either the eyapp script or call the class constructor 
\&\f(CW\*(C`new_grammar\*(C'\fR.
The \f(CW\*(C`Parse::Eyapp\*(C'\fR method \f(CW\*(C`Parse::Eyapp\->new_grammar(input=>$grammar)\*(C'\fR 
creates a package containing the code that implements a \s-1LALR\s0 parser
for the input grammar:
.PP
.Vb 8
\&    my $p = Parse::Eyapp\->new_grammar(
\&      input=>$translationscheme,
\&      classname=>\*(AqGrammar\*(Aq,
\&      firstline => 6,
\&      outputfile => \*(Aqmain\*(Aq
\&    );
\&    die $p\->Warnings if $p\->Warnings;
\&    my $new_parser_for_grammar = Grammar\->new();
.Ve
.PP
The method returns a \f(CW\*(C`Parse::Eyapp\*(C'\fR object.
.PP
You can check the object to see if there were
problems during the construction of the parser
for your grammar:
.PP
.Vb 1
\&                die $p\->qtables() if $p\->Warnings;
.Ve
.PP
The method \f(CW\*(C`Warnings\*(C'\fR returns
the warnings produced during the parsing. The absence of warnings indicates
the correctness of the input program.
.PP
The call to \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR generates
a class/package containing the parser for
your input grammar. Such package lives in the namespace 
determined by the \f(CW\*(C`classname\*(C'\fR argument
of \f(CW\*(C`new_grammar\*(C'\fR. To create a parser for the 
grammar you call the constructor \f(CW\*(C`new\*(C'\fR of
the just created class:
.PP
.Vb 1
\&    my $new_parser_for_grammar = Grammar\->new();
.Ve
.PP
The meaning of the arguments of  \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR 
is:
.IP "\-   input" 4
.IX Item "-   input"
The string containing the input
.IP "\-   classname" 4
.IX Item "-   classname"
The name of the package that will held the code for the \s-1LALR\s0 parser.
The package of the caller will be used as default if none is specified.
.IP "\-   firstline" 4
.IX Item "-   firstline"
For error diagnostics. The line where the definition of the Eyapp
grammar starts.
.IP "\-   linenumbers" 4
.IX Item "-   linenumbers"
Include/not include  \f(CW\*(C`# line directives\*(C'\fR in the generated code
.IP "\-   outputfile" 4
.IX Item "-   outputfile"
If defined the generated code fill be dumped in the specified filename (with extension .pm)
and the \s-1LALR\s0 information ambiguities and conflicts) in the specified filename 
with extension .output.
.ie n .SS "$eyapp\->qtables"
.el .SS "\f(CW$eyapp\fP\->qtables"
.IX Subsection "$eyapp->qtables"
Returns a string containing information
on warnings, ambiguities, conflicts, rules and the generated \s-1DFA\s0 tables.
Is the same information in \f(CW\*(C`file.output\*(C'\fR when using the command 
\&\f(CW\*(C`eyapp \-v file.eyp\*(C'\fR.
.PP
.Vb 6
\&  my $p = Parse::Eyapp\->new_grammar(
\&    input=>$eyappprogram,
\&    classname=>\*(AqSimpleC\*(Aq,
\&    outputfile => \*(AqSimpleC.pm\*(Aq,
\&    firstline=>12,
\&  );
\&
\&  print $p\->qtables() if $p\->Warnings;
.Ve
.ie n .SS "$eyapp\->outputtables"
.el .SS "\f(CW$eyapp\fP\->outputtables"
.IX Subsection "$eyapp->outputtables"
It receives two arguments
.PP
.Vb 1
\&  $eyapp\->outputtables($path, $base)
.Ve
.PP
Similar to \f(CW\*(C`qtables\*(C'\fR but prints 
the information on warnings, conflicts and rules
to the specified \f(CW\*(C`$path/$base\*(C'\fR.
.ie n .SS "$eyapp\->Warnings"
.el .SS "\f(CW$eyapp\fP\->Warnings"
.IX Subsection "$eyapp->Warnings"
Returns the warnings resulting from compiling the grammar:
.PP
.Vb 7
\&  my $p = Parse::Eyapp\->new_grammar(
\&    input=>$translationscheme,
\&    classname=>\*(Aqmain\*(Aq,
\&    firstline => 6,
\&    outputfile => \*(Aqmain\*(Aq
\&  );
\&  die $p\->Warnings if $p\->Warnings;
.Ve
.PP
Returns the empty string if there were no conflicts.
.ie n .SS "$eyapp\->ShowDfa"
.el .SS "\f(CW$eyapp\fP\->ShowDfa"
.IX Subsection "$eyapp->ShowDfa"
Returns a string with the information about the \s-1LALR\s0 generated
\&\s-1DFA\s0.
.ie n .SS "$eyapp\->Summary"
.el .SS "\f(CW$eyapp\fP\->Summary"
.IX Subsection "$eyapp->Summary"
Returns a string with summary information about the compilation
of the grammar. No arguments.
.ie n .SS "$eyapp\->Conflicts"
.el .SS "\f(CW$eyapp\fP\->Conflicts"
.IX Subsection "$eyapp->Conflicts"
Returns a string with summary information about the conflicts
that arose when compiling the grammar. No arguments.
.ie n .SS "$eyapp\->DfaTable"
.el .SS "\f(CW$eyapp\fP\->DfaTable"
.IX Subsection "$eyapp->DfaTable"
Returns a string with the parsing tables
.ie n .SS "$eyapp\->tokennames"
.el .SS "\f(CW$eyapp\fP\->tokennames"
.IX Subsection "$eyapp->tokennames"
Used when defining a naming scheme
to associate identifiers with (usually string) tokens.
See section \s-1NAMING\s0 \s-1SCHEMES\s0 of Parse::Eyapp
.ie n .SH "METHODS AVAILABLE IN THE GENERATED ""CLASS"""
.el .SH "METHODS AVAILABLE IN THE GENERATED \f(CWCLASS\fP"
.IX Header "METHODS AVAILABLE IN THE GENERATED CLASS"
See the documentation for Parse::Eyapp::Driver
.ie n .SH """Parse::Eyapp::Parse"" OBJECTS"
.el .SH "\f(CWParse::Eyapp::Parse\fP OBJECTS"
.IX Header "Parse::Eyapp::Parse OBJECTS"
The parser for the \f(CW\*(C`Eyapp\*(C'\fR language
was written and generated
using \f(CW\*(C`Parse::Eyapp\*(C'\fR and the \f(CW\*(C`eyapp\*(C'\fR compiler (actually
the first version 
was bootstrapped using the yapp compiler).
The Eyapp program parsing the \f(CW\*(C`Eyapp\*(C'\fR language
is in the file \f(CW\*(C`Parse/Eyapp/Parse.yp\*(C'\fR 
in the \f(CW\*(C`Parse::Eyapp\*(C'\fR distribution.
Therefore \f(CW\*(C`Parse::Eyapp::Parse\*(C'\fR 
objects have all the methods in \f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR.
.PP
A \f(CW\*(C`Parse::Eyapp::Parse\*(C'\fR is nothing but a particular kind of \f(CW\*(C`Parse::Eyapp\*(C'\fR
parser: \fIthe one that parses\fR \f(CW\*(C`Eyapp\*(C'\fR \fIgrammars\fR.
.ie n .SH "TRANSLATION SCHEMES AND THE %metatree DIRECTIVE"
.el .SH "TRANSLATION SCHEMES AND THE \f(CW%metatree\fP DIRECTIVE"
.IX Header "TRANSLATION SCHEMES AND THE %metatree DIRECTIVE"
See the documentation for Parse::Eyapp::translationschemestut
.SH "THE TREEREGEXP LANGUAGE"
.IX Header "THE TREEREGEXP LANGUAGE"
See the documentation for Parse::Eyapp::Treeregexp
.SH "MANIPULATING ABSTRACT SYNTAX TREES"
.IX Header "MANIPULATING ABSTRACT SYNTAX TREES"
See the documentation for Parse::Eyapp::Node
.SH "TREE TRANSFORMATION OBJECTS"
.IX Header "TREE TRANSFORMATION OBJECTS"
See the documentation for Parse::Eyapp::YATW
.ie n .SH "COMPILING WITH ""eyapp"" AND ""treereg"""
.el .SH "COMPILING WITH \f(CWeyapp\fP AND \f(CWtreereg\fP"
.IX Header "COMPILING WITH eyapp AND treereg"
A Treeregexp program can be isolated in a file
an compiled with the program \f(CW\*(C`treereg\*(C'\fR.
The default extension is \f(CW\*(C`.trg\*(C'\fR.
See the following example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/Eyapp$ cat \-n Shift.trg
\&     1  # File: Shift.trg
\&     2  {
\&     3  =head1 SYNOPSIS
\&     4
\&     5  Compile the grammar and tree transformations first:
\&     6
\&     7       $ eyapp Rule5
\&     8       $ treereg Shift
\&     9
\&    10  Then execute it with:
\&    11
\&    12       $ ./useruleandshift.pl
\&    13
\&    14  Try input:
\&    15
\&    16       a = b * 8
\&    17
\&    18  =cut
\&    19  }
\&    20
\&    21  {
\&    22    sub log2 {
\&    23      my $n = shift;
\&    24      return log($n)/log(2);
\&    25    }
\&    26
\&    27    my $power;
\&    28  }
\&    29  mult2shift: TIMES($e, NUM($m))
\&    30    and { $power = log2($m\->{attr}); (1 << $power) == $m\->{attr} } => {
\&    31      $_[0]\->delete(1);
\&    32      $_[0]\->{shift} = $power;
\&    33      $_[0]\->type(\*(AqSHIFTLEFT\*(Aq);
\&    34    }
.Ve
.PP
Note that auxiliary support code can be inserted at any point
between transformations (lines 21\-28). The code will be inserted (without 
the defining curly brackets) at that point. Note also
that the lexical variable \f(CW$power\fR is visible
inside the definition of the \f(CW\*(C`mult2shift\*(C'\fR transformation.
.PP
A treeregexp like \f(CW$e\fR matches any node (line 29). A reference to the node
is saved in the lexical variable \f(CW$e\fR. The scope of the variable
\&\f(CW$e\fR is the current tree transformation, i.e. \f(CW\*(C`mult2shift\*(C'\fR.
Such kind of treeregexps are called \fBscalar treeregexp\fRs.
.PP
The call to the \f(CW\*(C`delete\*(C'\fR method at line 31 deletes 
the second child of the node being visited (i.e. \f(CW\*(C`NUM($m)\*(C'\fR).
.PP
The call to \f(CW\*(C`type\*(C'\fR at line 33 retypes the node
as a \f(CW\*(C`SHIFTLEFT\*(C'\fR node.
.PP
The program is compiled using the script \f(CW\*(C`treereg\*(C'\fR:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/Eyapp$ eyapp Rule5
\&  pl@nereida:~/LEyapp/examples/Eyapp$ treereg Shift
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ls \-ltr | tail \-2
\&  \-rw\-r\-\-r\-\- 1 pl users 6439 2008\-09\-02 08:59 Rule5.pm
\&  \-rw\-r\-\-r\-\- 1 pl users 1424 2008\-09\-02 08:59 Shift.pm
.Ve
.PP
The Grammar \f(CW\*(C`examples/Eyapp/Rule5.yp\*(C'\fR is similar to the one in the \*(L"\s-1SYNOPSIS\s0\*(R"
section. Module \f(CW\*(C`Rule5.pm\*(C'\fR contains the parser.
The module \f(CW\*(C`Shift.pm\*(C'\fR contains the code implementing
the tree transformations.
.PP
The client program follows:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/Eyapp$ cat \-n useruleandshift.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Rule5;
\&     4  use Parse::Eyapp::Base qw(insert_function);
\&     5  use Shift;
\&     6
\&     7  =head1 SYNOPSIS
\&     8
\&     9  Compile the grammar and tree transformations first:
\&    10
\&    11       $ eyapp Rule5
\&    12       $ treereg Shift
\&    13
\&    14  Then execute it with:
\&    15
\&    16       $ ./useruleandshift.pl
\&    17
\&    18  Try inputs:
\&    19
\&    20       a = b * 8
\&    21       d = c * 16
\&    22
\&    23  =cut
\&    24
\&    25  sub SHIFTLEFT::info { $_[0]{shift} }
\&    26  insert_function(\*(AqTERMINAL::info\*(Aq, \e&TERMINAL::attr);
\&    27
\&    28  my $parser = new Rule5();
\&    29  $parser\->slurp_file(\*(Aq\*(Aq,\*(AqArithmetic expression: \*(Aq, "\en");
\&    30  my $t = $parser\->Run;
\&    31  unless ($parser\->YYNberr) {
\&    32    print "***********\en",$t\->str,"\en";
\&    33    $t\->s(@Shift::all);
\&    34    print "***********\en",$t\->str,"\en";
\&    35  }
.Ve
.PP
Lines 25 and 26 provide the node classes \f(CW\*(C`TERMINAL\*(C'\fR and \f(CW\*(C`SHIFTLEFT\*(C'\fR of \f(CW\*(C`info\*(C'\fR
methods to be used during the calls to the \f(CW\*(C`str\*(C'\fR method (lines 32 and 34).
.PP
Multiplications by a power of two are substituted by the corresponding shifts:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ./useruleandshift.pl
\&  Arithmetic expression: a = b * 8
\&  ***********
\&  ASSIGN(TERMINAL[a],TIMES(VAR(TERMINAL[b]),NUM(TERMINAL[8])))
\&  ***********
\&  ASSIGN(TERMINAL[a],SHIFTLEFT[3](VAR(TERMINAL[b])))
.Ve
.SS "Compiling: More Options"
.IX Subsection "Compiling: More Options"
See files \f(CW\*(C`Rule9.yp\*(C'\fR, \f(CW\*(C`Transform4.trg\*(C'\fR and \f(CW\*(C`foldand0rule9_4.pl\*(C'\fR 
in the examples directory for a more detailed vision of this example. 
File \f(CW\*(C`Rule9.yp\*(C'\fR is very much like the grammar
in the \*(L"\s-1SYNOPSIS\s0\*(R" example.
To compile the grammar \f(CW\*(C`Rule9.yp\*(C'\fR and the treeregexp
file \f(CW\*(C`Transform4.trg\*(C'\fR use the commands:
.PP
.Vb 1
\&                eyapp \-m \*(AqCalc\*(Aq Rule9.yp
.Ve
.PP
That will produce a file \f(CW\*(C`Calc.pm\*(C'\fR containing a package \f(CW\*(C`Calc\*(C'\fR
that implements the \s-1LALR\s0 parser. 
Then the command:
.PP
.Vb 1
\&                treereg \-o T.pm \-p \*(AqR::\*(Aq \-m T Transform4
.Ve
.PP
produces a file \f(CW\*(C`T.pm\*(C'\fR containing a package \f(CW\*(C`T\*(C'\fR that implements
the tree transformation program. The \f(CW\*(C`\-p\*(C'\fR option announces that
node classes are prefixed by \f(CW\*(AqR::\*(Aq\fR.
.PP
With such parameters the client program uses the generated modules as 
follows:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/Eyapp$ cat \-n foldand0rule9_4.pl                   
\&     1  #!/usr/bin/env perl
\&     2  =head1 SYNOPSIS
\&     3
\&     4     foldand0rule9_4.pl
\&     5
\&     6  Try inputs:
\&     7
\&     8     a = 2*3+4   # Reducido a: a = 6
\&     9     a = 2*[3+b] # syntax error
\&    10     a = 2*3*b   # Reducido a: a = 6*b
\&    11
\&    12  Compile it with
\&    13
\&    14           eyapp \-m \*(AqCalc\*(Aq Rule9.yp
\&    15           treereg \-o T.pm \-p \*(AqR::\*(Aq \-m T Transform4
\&    16
\&    17  =cut
\&    18
\&    19  use warnings;
\&    20  use strict;
\&    21  use Calc;
\&    22  use T;
\&    23
\&    24  sub R::TERMINAL::info { $_[0]{attr} }
\&    25
\&    26  my $parser = new Calc(yyprefix => "R::");
\&    27                     # stdin, prompt              , read one line at time
\&    28  $parser\->slurp_file(\*(Aq\*(Aq,\*(AqArithmetic expression: \*(Aq, "\en");
\&    29
\&    30  my $t = $parser\->YYParse;
\&    31
\&    32  unless ($parser\->YYNberr) {
\&    33    print "\en***** Tree before the transformations ******\en";
\&    34    print $t\->str."\en";
\&    35
\&    36    $t\->s(@T::all);
\&    37    print "\en***** Tree after the transformations were applied ******\en";
\&    38    print $t\->str."\en";
\&    39  }
.Ve
.PP
running the program produces the following output:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ./foldand0rule9_4.pl
\&  Arithmetic expression: a = 2*3
\&
\&  ***** Tree before the transformations ******
\&  R::ASSIGN(R::TERMINAL[a],R::TERMINAL[=],R::TIMES(R::NUM(R::TERMINAL[2]),R::TERMINAL[*],R::NUM(R::TERMINAL[3])))
\&
\&  ***** Tree after the transformations were applied ******
\&  R::ASSIGN(R::TERMINAL[a],R::TERMINAL[=],R::NUM(R::TERMINAL[6]))
\&
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ./foldand0rule9_4.pl
\&  Arithmetic expression: a = 2*[3+b]
\&
\&  Syntax error near \*(Aq[\*(Aq.
\&  Expected one of these terminals: \*(Aq\-\*(Aq \*(AqNUM\*(Aq \*(AqVAR\*(Aq \*(Aq(\*(Aq
.Ve
.SH "Parse::Eyapp::Scope: SUPPORT FOR SCOPE ANALYSIS"
.IX Header "Parse::Eyapp::Scope: SUPPORT FOR SCOPE ANALYSIS"
See the documentation for Parse::Eyapp::Scope
.SH "MISCELLANEOUS SUPPORT FUNCTIONS IN Parse::Eyapp::Base"
.IX Header "MISCELLANEOUS SUPPORT FUNCTIONS IN Parse::Eyapp::Base"
See the documentation in Parse::Eyapp::Base
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Remember to set the environment variable \f(CW\*(C`PERL5LIB\*(C'\fR
if you decide to install \f(CW\*(C`Parse::Eyapp\*(C'\fR at a location other than the standard.
For example, on a bash or sh:
.PP
.Vb 1
\&  export PERL5LIB=/home/user/wherever_it_is/lib/:$PERL5LIB
.Ve
.PP
on a \f(CW\*(C`csh\*(C'\fR or \f(CW\*(C`tcsh\*(C'\fR
.PP
.Vb 1
\&  setenv PERL5LIB /home/user/wherever_it_is/lib/:$PERL5LIB
.Ve
.PP
Be sure the scripts \f(CW\*(C`eyapp\*(C'\fR and \f(CW\*(C`treereg\*(C'\fR are in the execution \s-1PATH\s0.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
This distribution depends on the following modules:
.IP "\(bu" 4
List::Util
.IP "\(bu" 4
Data::Dumper
.IP "\(bu" 4
Pod::Usage
.PP
It seems that List::Util is in the core of Perl
distributions since version 5.73:
.PP
.Vb 2
\&  > perl \-MModule::CoreList \-e \*(Aqprint Module::CoreList\->first_release("List::Util")\*(Aq
\&  5.007003
.Ve
.PP
and Data::Dumper is also in the core since 5.5:
.PP
.Vb 2
\&  > perl \-MModule::CoreList \-e \*(Aqprint Module::CoreList\->first_release("Data::Dumper")\*(Aq
\&  5.005
.Ve
.PP
and Pod::Usage is also in the core since 5.6:
.PP
.Vb 2
\&  > perl \-MModule::CoreList \-e \*(Aqprint Module::CoreList\->first_release("Pod::Usage")\*(Aq
\&  5.006
.Ve
.PP
I also recommend the following modules:
.IP "\(bu" 4
Test::Pod
.IP "\(bu" 4
Test::Warn
.IP "\(bu" 4
Test::Exception
.PP
The dependence on  Test::Warn, Test::Pod and Test::Exception is merely for
the execution of tests. If the modules aren't installed the tests
depending on them will be skipped.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
To install it, follow the traditional mantra:
.PP
.Vb 4
\&                                 perl Makefile.PL
\&                                 make
\&                                 make test
\&                                 make install
.Ve
.PP
Also:
.IP "\(bu" 4
Make a local copy of the \f(CW\*(C`examples/\*(C'\fR directory in this distribution. They contain
the examples used in the tutorials
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
.IP "\(bu" 4
The way Parse::Eyapp parses Perl code is verbatim the way it does Parse::Yapp 1.05.
Quoting Francois Desarmenien Parse::Yapp documentation:
.Sp
"Be aware that matching braces in Perl is much more difficult than
in C: inside strings they don't need to match. While in C it is
very easy to detect the beginning of a string construct, or a
single character, it is much more difficult in Perl, as there
are so many ways of writing such literals. So there is no check
for that today. If you need a brace in a double-quoted string, just
quote it (\f(CW\*(C`\e{\*(C'\fR or \f(CW\*(C`\e}\*(C'\fR). For single-quoted strings, you will need
to make a comment matching it \fIin the right order\fR.
Sorry for the inconvenience.
.Sp
.Vb 9
\&    {
\&        "{ My string block }".
\&        "\e{ My other string block \e}".
\&        qq/ My unmatched brace \e} /.
\&        # Force the match: {
\&        q/ for my closing brace } /
\&        q/ My opening brace { /
\&        # must be closed: }
\&    }
.Ve
.Sp
All of these constructs should work."
.Sp
Alternative \fIexact solutions\fR were tried but resulted in much slower
code. Therefore, until something faster is found, I rather prefer for
Parse::Eyapp to live with this limitation.
.Sp
The same limitation may appear inside header code (code between \f(CW\*(C`%{\*(C'\fR and \f(CW\*(C`%}\*(C'\fR)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
The project home is at http://code.google.com/p/parse\-eyapp/ <http://code.google.com/p/parse-eyapp/>.
Use a subversion client to anonymously check out the latest project source code:
.Sp
.Vb 1
\&   svn checkout http://parse\-eyapp.googlecode.com/svn/trunk/ parse\-eyapp\-read\-only
.Ve
.IP "\(bu" 4
The tutorial \fIParsing Strings and Trees with\fR \f(CW\*(C`Parse::Eyapp\*(C'\fR
(An Introduction to Compiler Construction in seven pages) in
<http://nereida.deioc.ull.es/~pl/eyapsimple/>
.IP "\(bu" 4
Parse::Eyapp, 
Parse::Eyapp::eyapplanguageref, 
Parse::Eyapp::debuggingtut,
Parse::Eyapp::defaultactionsintro,
Parse::Eyapp::translationschemestut,
Parse::Eyapp::Driver,
Parse::Eyapp::Node,
Parse::Eyapp::YATW,
Parse::Eyapp::Treeregexp,
Parse::Eyapp::Scope,
Parse::Eyapp::Base,
Parse::Eyapp::datagenerationtut
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/languageintro.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/debuggingtut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/eyapplanguageref.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Treeregexp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Node.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/YATW.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Eyapp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Base.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/translationschemestut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/treematchingtut.pdf>
.IP "\(bu" 4
perldoc eyapp,
.IP "\(bu" 4
perldoc treereg,
.IP "\(bu" 4
perldoc vgg,
.IP "\(bu" 4
The Syntax Highlight file for vim at <http://www.vim.org/scripts/script.php?script_id=2453>
and <http://nereida.deioc.ull.es/~vim/>
.IP "\(bu" 4
\&\fIAnalisis Lexico y Sintactico\fR, (Notes for a course in compiler 
construction) by  Casiano Rodriguez-Leon. 
Available at  <http://nereida.deioc.ull.es/~pl/perlexamples/>
Is the more complete and reliable source for Parse::Eyapp. However is in Spanish.
.IP "\(bu" 4
Parse::Yapp,
.IP "\(bu" 4
Man pages of \fIyacc\fR\|(1) and
\&\fIbison\fR\|(1),
<http://www.delorie.com/gnu/docs/bison/bison.html>
.IP "\(bu" 4
Language::AttributeGrammar
.IP "\(bu" 4
Parse::RecDescent.
.IP "\(bu" 4
HOP::Parser
.IP "\(bu" 4
HOP::Lexer
.IP "\(bu" 4
ocamlyacc tutorial at 
http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex\-ocamlyacc/ocamlyacc\-tutorial/ocamlyacc\-tutorial.html <http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/ocamlyacc-tutorial.html>
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "\(bu" 4
The classic Dragon's book \fICompilers: Principles, Techniques, and Tools\fR 
by Alfred V. Aho, Ravi Sethi and
Jeffrey D. Ullman (Addison-Wesley 1986)
.IP "\(bu" 4
\&\fI\s-1CS2121:\s0 The Implementation and Power of Programming Languages\fR
(See <http://www.cs.man.ac.uk/~pjj>, <http://www.cs.man.ac.uk/~pjj/complang/g2lr.html> 
and <http://www.cs.man.ac.uk/~pjj/cs2121/ho/ho.html>) by 
Pete Jinks
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE\s0 (\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04\s0
(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601\s0
(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\s0\*(R" in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp5.18.3pm                         0100644 0001750 0001750 00000603163 12566242262 024062  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp 3"
.TH Parse::Eyapp 3 "2012-03-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp \- Bottom up parser generator
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&  # File \*(Aqcalc.eyp\*(Aq: translates infix expressions to postfix
\&  # Compile it with:  eyapp \-o calc.pl \-C Postfix.eyp
\&  # Execution:        ./calc.pl \-c \*(Aqa = 2*3+b\*(Aq
\&  %token NUM = /([0\-9]+(?:\e.[0\-9]+)?)/
\&  %token VAR = /([A\-Za\-z][A\-Za\-z0\-9_]*)/
\&
\&  %right  \*(Aq=\*(Aq
\&  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&  %left   NEG
\&
\&  %defaultaction { "$left $right $op"; }
\&
\&  %%
\&  line: $exp  { print "$exp\en" }
\&  ;
\&
\&  exp:        $NUM  { $NUM }            
\&          |   $VAR  { $VAR }            
\&          |   VAR.left \*(Aq=\*(Aq.op exp.right         
\&          |   exp.left \*(Aq+\*(Aq.op exp.right         
\&          |   exp.left \*(Aq\-\*(Aq.op exp.right        
\&          |   exp.left \*(Aq*\*(Aq.op exp.right       
\&          |   exp.left \*(Aq/\*(Aq.op exp.right      
\&          |   \*(Aq\-\*(Aq $exp %prec NEG { "$exp NEG" }
\&          |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq { $exp }      
\&  ;
\&
\&  %%
.Ve
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
Parse::Eyapp (Extended yapp) is a collection of modules that extends Francois
Desarmenien Parse::Yapp 1.05.  Eyapp extends yacc/yapp syntax with
functionalities like named attributes, EBNF-like expressions, modifiable
default action (like Parse::RecDescent autoaction), grammar reuse, 
automatic abstract syntax tree building,
syntax directed data generation,
translation schemes, tree regular
expressions, tree transformations, scope analysis support, directed acyclic
graphs and a few more.
.PP
Parse-Eyapp \s-1LALR\s0 parsing engine provides mechanisms for the \fIdynamic resolution\fR
(i.e. at parsing time and not at grammar compilation time) of shift-reduce and 
reduce-reduce conflicts that can not be satisfactorily solved
using static precedences.  Parse-Eyapp also provide means to solve the problem of 
languages where the token's type depends upon contextual information like in
the well known \s-1PL/I\s0 statement:
.PP
.Vb 1
\&         if then=if then if=then
.Ve
.SH "THE DOCUMENTATION OF Parse::Eyapp"
.IX Header "THE DOCUMENTATION OF Parse::Eyapp"
The documentation is distributed among several files:
.IP "\(bu" 4
To get familiar with  \f(CW\*(C`eyapp\*(C'\fR read Parse::Eyapp::eyappintro
It assumes a reader familiar with parsing techniques.
Familiarity with \f(CW\*(C`yacc\*(C'\fR or \f(CW\*(C`yapp\*(C'\fR, \f(CW\*(C`RecDescent\*(C'\fR, \f(CW\*(C`ANTLR\*(C'\fR or
similar tools will help but it is not indispensable.
.IP "\(bu" 4
To master conflict resolution read Parse::Eyapp::debuggingtut.
.IP "\(bu" 4
The document Parse::Eyapp::defaultactionsintro describes the use of
default actions and how to deal with \fIgrammar reuse\fR and factorization.
.IP "\(bu" 4
Parse::Eyapp can be used to generate data that conforms with a given grammar.
The tutorial Parse::Eyapp::datagenerationtut shows how.
.IP "\(bu" 4
The document Parse::Eyapp::eyapplanguageref 
describes the Eyapp language.
.IP "\(bu" 4
The document Parse::Eyapp::translationschemestut 
describes the use of Translation Schemes inside the Eyapp language.
.IP "\(bu" 4
The Treeregexp language is described in Parse::Eyapp::Treeregexp.
Treeregexp is a language to describe transformations of abstract syntax trees.
.IP "\(bu" 4
Read Parse::Eyapp::Scope to know
about the functionalities provided for Scope Analysis.
.IP "\(bu" 4
A set of basic miscellaneous support functions 
are described in Parse::Eyapp::Base. 
Several of these functions are related to the dynamic use of methods 
and subroutines.
.IP "\(bu" 4
Don't forget to read the section \*(L"\s-1BUGS AND LIMITATIONS\*(R"\s0
.PP
The examples used in this document can be found in
the directory \f(CW\*(C`examples/Eyapp\*(C'\fR accompanying this distribution.
As a general rule, each pod/tutorial has an associated subdirectory
of \f(CW\*(C`examples/Eyapp\*(C'\fR. Thus, the examples used in the documentation
of Parse::Eyapp::eyappintro can be found in \f(CW\*(C`examples/Eyapp/eyappintro\*(C'\fR;
The examples mentioned in Parse::Eyapp::Node can be found
in \f(CW\*(C`examples/Eyapp/Node\*(C'\fR. There are a few exceptions however.
For those exceptions the relative location where the file can be found
will be mentioned.
.SH "THE EYAPP LANGUAGE"
.IX Header "THE EYAPP LANGUAGE"
.SS "Eyapp Grammar"
.IX Subsection "Eyapp Grammar"
This section describes the syntax of the Eyapp language using its own notation.
The grammar extends yacc and yapp grammars.  Semicolons have been omitted
to save space.  Between C\-like comments you can find an (informal) explanation
of the language associated with each token.
.PP
.Vb 10
\&  %token ASSOC /* is %(left|right|nonassoc) */                                                                                                          
\&  %token BEGINCODE /* is %begin { Perl code ... } */                                                                                                    
\&  %token CODE /* is { Perl code ... } */                                                                                                                
\&  %token CONFLICT /* is %conflict */                                                                                                                    
\&  %token DEFAULTACTION /* is %defaultaction */                                                                                                          
\&  %token EXPECT /* is %expect */                                                                                                                        
\&  %token HEADCODE /* is %{ Perl code ... %} */                                                                                                          
\&  %token IDENT /* is [A\-Za\-z_][A\-Za\-z0\-9_]* */                                                                                                          
\&  %token LABEL /* is :[A\-Za\-z0\-9_]+ */                                                                                                                  
\&  %token LITERAL /* is a string literal like \*(Aqhello\*(Aq */                                                                                                 
\&  %token METATREE /* is %metatree */                                                                                                                    
\&  %token NAME /* is %name */                                                                                                                            
\&  %token NAMINGSCHEME /* is %namingscheme */                                                                                                            
\&  %token NOCOMPACT /* is %nocompact */                                                                                                                  
\&  %token NUMBER /* is \ed+ */                                                                                                                            
\&  %token OPTION /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e? */                                                                                                 
\&  %token PLUS /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e+ */                                                                                                   
\&  %token PREC /* is %prec */                                                                                                                            
\&  %token PREFIX /* is %prefix\es+([A\-Za\-z_][A\-Za\-z0\-9_:]*::) */                                                                                          
\&  %token SEMANTIC /* is %semantic\es+token */                                                                                                            
\&  %token STAR /* is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e* */                                                                                                   
\&  %token START /* is %start */                                                                                                                          
\&  %token STRICT /* is %strict */                                                                                                                        
\&  %token SYNTACTIC /* is %syntactic\es+token */                                                                                                          
\&  %token TAILCODE /* is { Perl code ... } */                                                                                                            
\&  %token TOKEN /* is %token */                                                                                                                          
\&  %token TREE /* is %tree */                                                                                                                            
\&  %token TYPE /* is %type */                                                                                                                            
\&  %token UNION /* is %union */                                                                                                                          
\&  %start eyapp                                                                                                                                          
\&
\&  %%
\&
\&  # Main rule
\&  eyapp:     
\&        head body tail 
\&  ;                    
\&  #Common rules:       
\&  symbol:              
\&        LITERAL        
\&      | ident #default action
\&  ;                          
\&  ident:                     
\&        IDENT                
\&  ;                          
\&  # Head section:            
\&  head:                      
\&        headsec \*(Aq%%\*(Aq         
\&  ;                          
\&  headsec:                   
\&        #empty  #default action
\&      | decls #default action  
\&  ;                            
\&  decls:                       
\&        decls decl #default action
\&      | decl #default action      
\&  ;                               
\&  decl:                           
\&        \*(Aq\en\*(Aq #default action      
\&      | SEMANTIC typedecl symlist \*(Aq\en\*(Aq
\&      | SYNTACTIC typedecl symlist \*(Aq\en\*(Aq
\&      | TOKEN typedecl toklist \*(Aq\en\*(Aq    
\&      | ASSOC typedecl symlist \*(Aq\en\*(Aq    
\&      | START ident \*(Aq\en\*(Aq               
\&      | PREFIX \*(Aq\en\*(Aq                    
\&      | WHITES CODE \*(Aq\en\*(Aq               
\&      | WHITES REGEXP \*(Aq\en\*(Aq             
\&      | WHITES \*(Aq=\*(Aq CODE \*(Aq\en\*(Aq           
\&      | WHITES \*(Aq=\*(Aq REGEXP \*(Aq\en\*(Aq         
\&      | NAMINGSCHEME CODE \*(Aq\en\*(Aq         
\&      | HEADCODE \*(Aq\en\*(Aq                  
\&      | UNION CODE \*(Aq\en\*(Aq  #ignore       
\&      | DEFAULTACTION CODE \*(Aq\en\*(Aq        
\&      | LEXER CODE \*(Aq\en\*(Aq                
\&      | TREE \*(Aq\en\*(Aq                      
\&      | METATREE \*(Aq\en\*(Aq                  
\&      | STRICT \*(Aq\en\*(Aq                    
\&      | NOCOMPACT \*(Aq\en\*(Aq                 
\&      | TYPE typedecl identlist \*(Aq\en\*(Aq   
\&      | CONFLICT ident CODE \*(Aq\en\*(Aq       
\&      | EXPECT NUMBER \*(Aq\en\*(Aq             
\&      | EXPECT NUMBER NUMBER \*(Aq\en\*(Aq      
\&      | EXPECTRR NUMBER \*(Aq\en\*(Aq           
\&      | error \*(Aq\en\*(Aq                     
\&  ;                                    
\&  typedecl:                            
\&        #empty                         
\&      | \*(Aq<\*(Aq IDENT \*(Aq>\*(Aq                  
\&  ;                                    
\&  symlist:                             
\&        symlist symbol                 
\&      | symbol                         
\&  ;                                    
\&  toklist:                             
\&        toklist tokendef               
\&      | tokendef                       
\&  ;                                    
\&  tokendef:                            
\&        symbol \*(Aq=\*(Aq REGEXP              
\&      | symbol \*(Aq=\*(Aq CODE                
\&      | symbol                         
\&  ;                                    
\&  identlist:                           
\&        identlist ident                
\&      | ident                          
\&  ;                                    
\&  # Rule section                       
\&  body:                                
\&        rulesec \*(Aq%%\*(Aq                   
\&      | \*(Aq%%\*(Aq                           
\&  ;                                    
\&  rulesec:                             
\&        rulesec rules #default action  
\&      | startrules #default action     
\&  ;                                    
\&  startrules:                          
\&        IDENT \*(Aq:\*(Aq  rhss \*(Aq;\*(Aq            
\&      | error \*(Aq;\*(Aq                      
\&  ;                                    
\&  rules:                               
\&        IDENT \*(Aq:\*(Aq rhss \*(Aq;\*(Aq             
\&      | error \*(Aq;\*(Aq                      
\&  ;                                    
\&  rhss:                                
\&        rhss \*(Aq|\*(Aq rule                  
\&      | rule                           
\&  ;                                    
\&  rule:                                
\&        optname rhs prec epscode       
\&      | optname rhs                    
\&  ;                                    
\&  rhs:                                 
\&        #empty      #default action (will return undef)
\&      | rhselts #default action                        
\&  ;                                                    
\&  rhselts:                                             
\&        rhselts rhseltwithid                           
\&      | rhseltwithid                                   
\&  ;                                                    
\&  rhseltwithid:                                        
\&        rhselt \*(Aq.\*(Aq IDENT
\&      | \*(Aq$\*(Aq rhselt
\&      | \*(Aq$\*(Aq error
\&      | rhselt
\&  ;
\&  rhselt:
\&        symbol
\&      | code
\&      | DPREC ident
\&      | \*(Aq(\*(Aq optname rhs \*(Aq)\*(Aq
\&      | rhselt STAR
\&      | rhselt \*(Aq<\*(Aq STAR symbol \*(Aq>\*(Aq
\&      | rhselt OPTION
\&      | rhselt \*(Aq<\*(Aq PLUS symbol \*(Aq>\*(Aq
\&      | rhselt PLUS
\&  ;
\&  optname:
\&        /* empty */
\&      | NAME IDENT
\&      | NAME IDENT LABEL
\&      | NAME LABEL
\&  ;
\&  prec:
\&        PREC symbol
\&  ;
\&  epscode:
\&      | code
\&  ;
\&  code:
\&        CODE
\&      | BEGINCODE
\&  ;
\&  # Tail section:
\&  tail:
\&        /*empty*/
\&      | TAILCODE
\&  ;
\&
\&  %%
.Ve
.PP
The semantic of \f(CW\*(C`Eyapp\*(C'\fR agrees with the semantic of \f(CW\*(C`yacc\*(C'\fR and \f(CW\*(C`yapp\*(C'\fR for
all the common constructions.
.SS "Comments"
.IX Subsection "Comments"
Comments are either Perl style, from \f(CW\*(C`#\*(C'\fR
up to the end of line, or C style, enclosed between  \f(CW\*(C`/*\*(C'\fR and \f(CW\*(C`*/\*(C'\fR.
.SS "Syntactic Variables, Symbolic Tokens and String Literals"
.IX Subsection "Syntactic Variables, Symbolic Tokens and String Literals"
Two kind of symbols may appear inside a Parse::Eyapp program:
\&\fINon-terminal\fR symbols or \fIsyntactic variables\fR, 
called also \fIleft-hand-side\fR symbols
and \fITerminal\fR symbols, called
also \fITokens\fR.
.PP
Tokens are the symbols the lexical analyzer function returns to the parser.
There are two kinds of tokens: \fIsymbolic tokens\fR and \fIstring
literals\fR.
.PP
\&\fISyntactic variables\fR and \fIsymbolic tokens\fR identifiers must conform
to the regular expression \f(CW\*(C`[A\-Za\-z][A\-Za\-z0\-9_]*\*(C'\fR.
.PP
When building the syntax tree (i.e. when running under the \f(CW%tree\fR
directive) \fIsymbolic tokens\fR will be considered \fIsemantic tokens\fR (see section
\&\*(L"Syntactic and Semantic tokens\*(R"). \fISymbolic tokens\fR yield nodes
in the Abstract Syntax Tree.
.PP
String literals are enclosed in single quotes and can contain almost
anything. They will be received by the parser as double-quoted strings. 
Any special character as \f(CW\*(Aq"\*(Aq\fR, \f(CW\*(Aq$\*(Aq\fR and \f(CW\*(Aq@\*(Aq\fR is escaped.
To have a single quote inside a literal, escape it with '\e'.
.PP
When building the syntax tree (i.e. when running under the \f(CW%tree\fR
directive) \fIstring literals\fR will be considered \fIsyntactic tokens\fR (see section
\&\*(L"Syntactic and Semantic tokens\*(R"). \fISyntactic tokens\fR do not produce
nodes in the Abstract Syntax Tree.
.PP
The examples used along this document can be found in the directory 
\&\f(CW\*(C`examples/eyapplanguageref\*(C'\fR accompanying this distribution.
.ie n .SS "Parts of an ""eyapp"" Program"
.el .SS "Parts of an \f(CWeyapp\fP Program"
.IX Subsection "Parts of an eyapp Program"
An Eyapp program has three parts called head, body and tail:
.PP
.Vb 1
\&                                 eyapp: head body tail ;
.Ve
.PP
Each part is separated from the former by the symbol \f(CW\*(C`%%\*(C'\fR:
.PP
.Vb 2
\&                                 head: headsec \*(Aq%%\*(Aq
\&                                 body: rulesec \*(Aq%%\*(Aq
.Ve
.SH "THE HEAD SECTION"
.IX Header "THE HEAD SECTION"
The head section contains a list of declarations
.PP
.Vb 1
\&                                 headsec:  decl *
.Ve
.PP
There are different kinds of declarations.
.PP
This reference does not 
fully describes all the declarations that are shared with \f(CW\*(C`yacc\*(C'\fR and 
yapp.
.SS "Example of Head Section"
.IX Subsection "Example of Head Section"
In this and the next sections we will describe the basics
of the Eyapp language using the file \f(CW\*(C`examples/eyapplanguageref/Calc.eyp\*(C'\fR 
that accompanies this distribution. This file implements a trivial 
calculator. Here is the header section:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,/%%/p\*(Aq Calc.eyp | cat \-n
\&     1  # examples/eyapplanguageref/Calc.eyp
\&     2  %whites    =  /([ \et]*(?:#.*)?)/
\&     3  %token NUM =  /([0\-9]+(?:\e.[0\-9]+)?)/
\&     4  %token VAR =  /([A\-Za\-z][A\-Za\-z0\-9_]*)/
\&     5
\&     6  %right  \*(Aq=\*(Aq
\&     7  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     8  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     9  %left   NEG
\&    10  %right  \*(Aq^\*(Aq
\&    11
\&    12  %{
\&    13  my %s; # symbol table
\&    14  %}
\&    15
\&    16  %%
.Ve
.PP
Eyapp produces a lexical generator from the descriptions given
by the \f(CW%token\fR and \f(CW%whites\fR directives plus the tokens used 
inside the body section.
.PP
.Vb 3
\&       %whites    =  /([ \et]*(?:#.*)?)/
\&       %token NUM =  /([0\-9]+(?:\e.[0\-9]+)?)/
\&       %token VAR =  /([A\-Za\-z][A\-Za\-z0\-9_]*)/
.Ve
.PP
See section \*(L"Automatic Generation of Lexical Analyzers\*(R" for more details.
.SS "Declarations and Precedence"
.IX Subsection "Declarations and Precedence"
Lines 2\-5 declare several tokens. The usual way to declare
tokens is through the \f(CW%token\fR directive. The declarations 
\&\f(CW%nonassoc\fR, \f(CW%left\fR and \f(CW%right\fR 
not only declare the tokens but also associate a \fIpriority\fR with them.  
Tokens declared in the same line have the same precedence. 
Tokens declared with these directives in lines below have more
precedence than those declared above. Thus, in the example
above
we are saying that \f(CW"+"\fR and \f(CW"\-"\fR have the same precedence
but higher precedence than =. The final effect of \f(CW"\-"\fR
having greater precedence than = will be that an
expression like:
.PP
.Vb 1
\&                        a = 4 \- 5
.Ve
.PP
will be interpreted as
.PP
.Vb 1
\&                        a = (4 \- 5)
.Ve
.PP
and not as
.PP
.Vb 1
\&                        (a = 4) \- 5
.Ve
.PP
The use of the \f(CW%left\fR indicates that \- in case of ambiguity 
and a match between precedences \- the parser must build the tree corresponding
to a left parenthesizing. Thus, the expression
.PP
.Vb 1
\&                         4 \- 5 \- 9
.Ve
.PP
will be interpreted as
.PP
.Vb 1
\&                         (4 \- 5) \- 9
.Ve
.PP
You can refer to the token end-of-input in the header section using the string \f(CW\*(Aq\*(Aq\fR (for example
to give it some priority, see the example in \f(CW\*(C`examples/debuggingtut/typicalrrwithprec.eyp\*(C'\fR).
.SS "Header Code"
.IX Subsection "Header Code"
Perl code surrounded by \f(CW\*(C`%{\*(C'\fR and \f(CW\*(C`%}\*(C'\fR
can be inserted in the head section. Such code will be inserted in the module
generated by \f(CW\*(C`eyapp\*(C'\fR near the beginning. Therefore, declarations like the
one of the calculator symbol table \f(CW%s\fR
.PP
.Vb 3
\&  7  %{
\&  8  my %s; # symbol table
\&  9  %}
.Ve
.PP
will be visible from almost any point in the file.
.SS "The Start Symbol of the Grammar"
.IX Subsection "The Start Symbol of the Grammar"
\&\f(CW\*(C`%start program\*(C'\fR declares \f(CW\*(C`program\*(C'\fR as the start symbol of 
the grammar. When \f(CW%start\fR is not
used, the first rule in the body section will be used.
.SS "Expect"
.IX Subsection "Expect"
The \f(CW\*(C`%expect #NUMBER\*(C'\fR directive works as in \f(CW\*(C`bison\*(C'\fR 
and  suppress warnings when the number of Shift/Reduce
conflicts is exactly \f(CW\*(C`#NUMBER\*(C'\fR.
.PP
The directive has been extended to be called with two numbers:
.PP
.Vb 1
\&  %expect NUMSHIFTRED NUMREDRED
.Ve
.PP
no warnings will be emitted if the number of shift-reduce 
conflicts is exactly \f(CW\*(C`NUMSHIFTRED\*(C'\fR and the number of reduce-reduce
conflicts is \f(CW\*(C`NUMREDRED\*(C'\fR.
.SS "Type and Union"
.IX Subsection "Type and Union"
C oriented declarations like \f(CW%type\fR and \f(CW%union\fR are
parsed but ignored.
.ie n .SS "The %strict Directive"
.el .SS "The \f(CW%strict\fP Directive"
.IX Subsection "The %strict Directive"
By default, identifiers appearing in the rule section
will be classified as terminal if they don't appear 
in the left hand side of any production rules.
.PP
The directive \f(CW%strict\fR forces the declaration of all tokens. 
The following \f(CW\*(C`eyapp\*(C'\fR program issues a warning:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n bugyapp2.eyp
\&       1  %strict
\&       2  %%
\&       3  expr: NUM;
\&       4  %%
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp bugyapp2.eyp
\&  Warning! Non declared token NUM at line 3 of bugyapp2.eyp
.Ve
.PP
To keep silent the compiler declare all tokens using
one of the token declaration directives (\f(CW%token\fR, \f(CW%left\fR, etc.)
.PP
.Vb 9
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n bugyapp3.eyp
\&       1  %strict
\&       2  %token NUM
\&       3  %%
\&       4  expr: NUM;
\&       5  %%
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp bugyapp3.eyp
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ls \-ltr | tail \-1
\&  \-rw\-r\-\-r\-\- 1 pl users 2395 2008\-10\-02 09:41 bugyapp3.pm
.Ve
.PP
It is a good practice to use \f(CW%strict\fR at the beginning of your grammar.
.ie n .SS "The %prefix Directive"
.el .SS "The \f(CW%prefix\fP Directive"
.IX Subsection "The %prefix Directive"
The \f(CW%prefix\fR directive 
is equivalent to the use of the \f(CW\*(C`yyprefix\*(C'\fR. The node classes are prefixed
with the specified prefix
.PP
.Vb 1
\&  %prefix Some::Prefix::
.Ve
.PP
See the example in \f(CW\*(C`examples/eyapplanguageref/alias_and_yyprefix.pl\*(C'\fR.
See also section \*(L"Grammar Reuse\*(R" in Parse::Eyapp::defaultactionsintro
for an example that does not involve the \f(CW%tree\fR directive.
.SS "Default Action Directive"
.IX Subsection "Default Action Directive"
In \f(CW\*(C`Parse::Eyapp\*(C'\fR you can modify the default action 
using the \f(CW\*(C`%defaultaction { Perl code }\*(C'\fR
directive. See section \*(L"\s-1DEFAULT ACTIONS\*(R"\s0.
The examples \f(CW\*(C`examples/eyapplanguageref/Postfix.eyp\*(C'\fR and 
\&\f(CW\*(C`examples/eyapplanguageref/Lhs.eyp\*(C'\fR illustrate the use of the directive.
.SS "Tree Construction Directives"
.IX Subsection "Tree Construction Directives"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR facilitates the construction of concrete syntax trees and 
abstract syntax trees (abbreviated \s-1AST\s0 from now on) through the \f(CW%tree\fR
and \f(CW%metatree\fR directives. See sections
\&\*(L"\s-1ABSTRACT SYNTAX TREES:\s0 \f(CW%tree\fR \s-1AND\s0 \f(CW%name\fR\*(R"
and
Parse::Eyapp::translationschemestut.
.SS "Tokens and the Abstract Syntax Tree"
.IX Subsection "Tokens and the Abstract Syntax Tree"
The new token declaration directives \f(CW\*(C`%syntactic token\*(C'\fR and
\&\f(CW\*(C`%semantic token\*(C'\fR can change the way \f(CW\*(C`eyapp\*(C'\fR builds the abstract syntax tree.
See section \*(L"Syntactic and Semantic tokens\*(R".
.ie n .SS "The %nocompact directive"
.el .SS "The \f(CW%nocompact\fP directive"
.IX Subsection "The %nocompact directive"
This directive influences the generation of the \s-1LALR\s0 tables.
They will not be compacted and the tokens
for the \f(CW\*(C`DEFAULT\*(C'\fR reduction will be explicitly set.
It can be used to produce an \f(CW\*(C`.output\*(C'\fR file (option \f(CW\*(C`\-v\*(C'\fR)
with more information.
.SH "THE BODY"
.IX Header "THE BODY"
The body section contains the rules describing the grammar:
.PP
.Vb 3
\&                       body:   rules * \*(Aq%%\*(Aq
\&                       rules:  IDENT \*(Aq:\*(Aq rhss \*(Aq;\*(Aq  
\&                       rhss:   (optname rhs (prec epscode)?) <+ \*(Aq|\*(Aq>
.Ve
.SS "Rules"
.IX Subsection "Rules"
A rule is made of a left-hand-side symbol (the \fIsyntactic variable\fR), 
followed by a \f(CW\*(Aq:\*(Aq\fR and one
or more \fIright-hand-sides\fR (or \fIproductions\fR)
 separated by \f(CW\*(Aq|\*(Aq\fR and terminated by a \f(CW\*(Aq;\*(Aq\fR
like in:
.PP
.Vb 5
\&                          exp: 
\&                               exp \*(Aq+\*(Aq exp
\&                            |  exp \*(Aq\-\*(Aq exp
\&                            |  NUM
\&                          ;
.Ve
.PP
A \fIproduction\fR (\fIright hand side\fR) may be empty:
.PP
.Vb 4
\&                          input:   
\&                               /* empty */
\&                            |  input line
\&                          ;
.Ve
.PP
The former two productions can be abbreviated as
.PP
.Vb 3
\&                          input: 
\&                               line *
\&                          ;
.Ve
.PP
The operators \f(CW\*(C`*\*(C'\fR, \f(CW\*(C`+\*(C'\fR and \f(CW\*(C`?\*(C'\fR are presented in section
\&\*(L"\s-1LISTS AND OPTIONALS\*(R"\s0.
.PP
A \fIsyntactic variable cannot appear more than once as
a rule name\fR (This differs from \f(CW\*(C`yacc\*(C'\fR).  So you can't 
write
.PP
.Vb 2
\&    thing: foo bar ;
\&    thing: foo baz ;
.Ve
.PP
instead, write:
.PP
.Vb 4
\&    thing: 
\&           foo bar 
\&         | foo baz 
\&    ;
.Ve
.SS "Semantic Values and Semantic Actions"
.IX Subsection "Semantic Values and Semantic Actions"
In \f(CW\*(C`Parse::Eyapp\*(C'\fR 
a production rule
.PP
.Vb 1
\&                          A \-> X_1 X_2 ... X_n
.Ve
.PP
can be followed by a 
\&\fIsemantic action\fR:
.PP
.Vb 1
\&                    A \-> X_1 X_2 ... X_n { Perl Code }
.Ve
.PP
Such
semantic action is nothing but Perl code that will be treated 
as an anonymous subroutine.  The semantic action associated 
with production rule \f(CW\*(C`A \-> X_1 X_2 ... X_n\*(C'\fR  is executed
after any actions associated with the subtrees of \f(CW\*(C`X_1\*(C'\fR,
\&\f(CW\*(C`X_2\*(C'\fR, ..., \f(CW\*(C`X_n\*(C'\fR.
\&\f(CW\*(C`Eyapp\*(C'\fR parsers build the syntax tree using a left-right
bottom-up traverse of the syntax tree. Each times
the Parser visits the node associated with the 
production \f(CW\*(C`A \-> X_1 X_2 ... X_n\*(C'\fR
the associated semantic action is called. 
Associated with each symbol
of a Parse::Eyapp grammar there is a scalar \fISemantic Value\fR
or \fIAttribute\fR. The semantic values of terminals are provided
by the lexical analyzer. In the calculator example
(see file \f(CW\*(C`examples/eyapplanguageref/Calc.yp\*(C'\fR in the distribution),
the semantic value associated with an expression
is its numeric value. Thus in the rule:
.PP
.Vb 1
\&                       exp \*(Aq+\*(Aq exp { $_[1] + $_[3] }
.Ve
.PP
\&\f(CW$_[1]\fR refers to the attribute of the first \f(CW\*(C`exp\*(C'\fR, \f(CW$_[2]\fR 
is the attribute associated with \f(CW\*(Aq+\*(Aq\fR, which is the second component of the 
pair provided by the lexical analyzer and \f(CW$_[3]\fR refers to the attribute of 
the second \f(CW\*(C`exp\*(C'\fR.
.PP
When the semantic action/anonymous subroutine is called,
the arguments are as follows:
.IP "\(bu" 4
\&\f(CW$_[1]\fR to \f(CW$_[n]\fR are the attributes of
the symbols \f(CW\*(C`X_1\*(C'\fR, \f(CW\*(C`X_2\*(C'\fR, ..., \f(CW\*(C`X_n\*(C'\fR. 
Just as \f(CW$1\fR to \f(CW$n\fR in \f(CW\*(C`yacc\*(C'\fR,
.IP "\(bu" 4
\&\f(CW$_[0]\fR is the parser object itself.
Having \f(CW$_[0]\fR being the parser object itself allows you to call
parser methods. Most \f(CW\*(C`yacc\*(C'\fR macros have been converted into
parser methods. See section \*(L"\s-1METHODS AVAILABLE IN THE GENERATED CLASS\*(R"\s0 in Parse::Eyapp.
.PP
The returned value will be the attribute associated 
with the left hand side of the production.
.PP
Names can be given to the attributes using the dot notation
(see file \f(CW\*(C`examples/eyapplanguageref/CalcSimple.eyp\*(C'\fR):
.PP
.Vb 1
\&                     exp.left \*(Aq+\*(Aq exp.right { $left + $right }
.Ve
.PP
See section \*(L"\s-1NAMES FOR ATTRIBUTES\*(R"\s0 for more details about the \fIdot\fR and \fIdollar\fR 
notations.
.PP
If no action is specified and no \f(CW%defaultaction\fR is specified
the default action
.PP
.Vb 1
\&                               { $_[1] }
.Ve
.PP
will be executed instead. See section \*(L"\s-1DEFAULT ACTIONS\*(R"\s0 to know more.
.SS "Actions in Mid-Rule"
.IX Subsection "Actions in Mid-Rule"
Actions can be inserted in the middle of a production like in:
.PP
.Vb 1
\& block: \*(Aq{\*(Aq.bracket { $ids\->begin_scope(); } declaration*.decs statement*.sts \*(Aq}\*(Aq { ... }
.Ve
.PP
A middle production action is managed by inserting a new rule in the grammar and associating
the semantic action with it:
.PP
.Vb 1
\&                     Temp: /* empty */ { $ids\->begin_scope(); }
.Ve
.PP
Middle production actions can refer to the attributes on its left. They count
as one of the components of the production. Thus the program:
.PP
.Vb 5
\&  ~/LEyapp/examples/eyapplanguageref$ cat intermediateaction2.yp 
\&  %%
\&  S:  \*(Aqa\*(Aq { $_[1]x4 }.mid \*(Aqa\*(Aq { print "\en<<$_[2], $mid, $_[3]>>\en"; }
\&  ;
\&  %%
.Ve
.PP
The auxiliar syntactic variables are named \f(CW\*(C`@#position\-#order\*(C'\fR where \f(CW\*(C`#position\*(C'\fR
is the position of the action in the rhs and \f(CW\*(C`order\*(C'\fR is an ordinal number. See
the \f(CW\*(C`.output\*(C'\fR file for the former example:
.PP
.Vb 7
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-v intermediateaction2.yp
\&  ~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,5p\*(Aq intermediateaction2.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:  $start \-> S $end
\&  1:  S \-> \*(Aqa\*(Aq @1\-1 \*(Aqa\*(Aq
\&  2:  @1\-1 \-> /* empty */
.Ve
.PP
We can build an executable \f(CW\*(C`ia.pl\*(C'\fR from the former grammar using \f(CW\*(C`eyapp\*(C'\fR option \f(CW\*(C`\-C\*(C'\fR:
.PP
.Vb 1
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-C \-o ia.pl intermediateaction2.yp
.Ve
.PP
The \f(CW\*(C`main\*(C'\fR, error and lexer methods are provided by \f(CW\*(C`Parse::Eyapp\*(C'\fR.
When given input \f(CW\*(C`aa\*(C'\fR the execution will produce as output \f(CW\*(C`aaaa, aaaa, a\*(C'\fR. The option
\&\f(CW\*(C`\-d\*(C'\fR activates the debug mode, the option \f(CW\*(C`\-c\*(C'\fR tells the program to get the input from the command line::
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ ./ia.pl \-d \-c \*(Aqaa\*(Aq
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 0:
\&  Stack: 0
\&  Need token. Got >a<
\&  Shift and go to state 2.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 2:
\&  Stack: 0\->\*(Aqa\*(Aq\->2
\&  Don\*(Aqt need token.
\&  Reduce using rule 2 (@1\-1 \-\-> /* empty */): Back to state 2, then go to state 4.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 4:
\&  Stack: 0\->\*(Aqa\*(Aq\->2\->\*(Aq@1\-1\*(Aq\->4
\&  Need token. Got >a<
\&  Shift and go to state 5.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 5:
\&  Stack: 0\->\*(Aqa\*(Aq\->2\->\*(Aq@1\-1\*(Aq\->4\->\*(Aqa\*(Aq\->5
\&  Don\*(Aqt need token.
\&  Reduce using rule 1 (S \-\-> a @1\-1 a): 
\&  <<aaaa, aaaa, a>>
\&  Back to state 0, then go to state 1.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 1:
\&  Stack: 0\->\*(AqS\*(Aq\->1
\&  Need token. Got ><
\&  Shift and go to state 3.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 3:
\&  Stack: 0\->\*(AqS\*(Aq\->1\->\*(Aq\*(Aq\->3
\&  Don\*(Aqt need token.
\&  Accept.
.Ve
.SS "Example of Body Section"
.IX Subsection "Example of Body Section"
Following with the calculator example, the body is:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq17,/%%/p\*(Aq Calc.eyp | cat \-n 
\&     1  start:                                                                              
\&     2      input { \e%s }                                                                   
\&     3  ;
\&     4
\&     5  input: line *
\&     6  ;
\&     7
\&     8  line:
\&     9      \*(Aq\en\*(Aq       { undef }
\&    10    | exp \*(Aq\en\*(Aq   {
\&    11                    print "$_[1]\en" if defined($_[1]);
\&    12                    $_[1]
\&    13                 }
\&    14    | error  \*(Aq\en\*(Aq
\&    15        {
\&    16          $_[0]\->YYErrok;
\&    17          undef
\&    18        }
\&    19  ;
\&    20
\&    21  exp:
\&    22      NUM
\&    23    | $VAR                   { $s{$VAR} }
\&    24    | $VAR \*(Aq=\*(Aq $exp          { $s{$VAR} = $exp }
\&    25    | exp.left \*(Aq+\*(Aq exp.right { $left + $right }
\&    26    | exp.left \*(Aq\-\*(Aq exp.right { $left \- $right }
\&    27    | exp.left \*(Aq*\*(Aq exp.right { $left * $right }
\&    28    | exp.left \*(Aq/\*(Aq exp.right
\&    29      {
\&    30         $_[3] and return($_[1] / $_[3]);
\&    31         $_[0]\->YYData\->{ERRMSG} = "Illegal division by zero.\en";
\&    32         $_[0]\->YYError;
\&    33         undef
\&    34      }
\&    35    | \*(Aq\-\*(Aq $exp %prec NEG     { \-$exp }
\&    36    | exp.left \*(Aq^\*(Aq exp.right { $left ** $right }
\&    37    | \*(Aq(\*(Aq $exp \*(Aq)\*(Aq           { $exp }
\&    38  ;
\&    39
\&    40  %%
.Ve
.PP
This body does not uses any of the Eyapp extensions (with the exception of the 
\&\f(CW\*(C`*\*(C'\fR operator at line 5) and the dot and dollar notations.
.SS "Solving Ambiguities and Conflicts"
.IX Subsection "Solving Ambiguities and Conflicts"
When Eyapp analyzes a grammar like:
.PP
.Vb 7
\&  examples/eyapplanguageref$ cat \-n ambiguities.eyp
\&     1  %%
\&     2  exp:
\&     3      NUM
\&     4    | exp \*(Aq\-\*(Aq exp
\&     5  ;
\&     6  %%
.Ve
.PP
it will produce a warning announcing the existence of 
\&\fIshift-reduce\fR conflicts:
.PP
.Vb 5
\&  examples/eyapplanguageref$ eyapp ambiguities.eyp
\&  1 shift/reduce conflict (see .output file)
\&  State 5: reduce by rule 2: exp \-> exp \*(Aq\-\*(Aq exp (default action)
\&  State 5: shifts:
\&    to state    3 with \*(Aq\-\*(Aq
.Ve
.PP
when \f(CW\*(C`eyapp\*(C'\fR finds warnings automatically produces a \f(CW\*(C`.output\*(C'\fR file
describing the conflict.
.PP
What the warning is saying is that an expression like \f(CW\*(C`exp \*(Aq\-\*(Aq exp\*(C'\fR (rule 2) followed by a
minus \f(CW\*(Aq\-\*(Aq\fR can be parsed in more than one way. If we
have an input like \f(CW\*(C`NUM \- NUM \- NUM\*(C'\fR the activity of a \s-1\fILALR\s0\fR\|(1) parser
(the family of parsers to which Eyapp belongs)
consists of a sequence of \fIshift and reduce actions\fR. A \fIshift action\fR
has as consequence the reading of the next token. A \fIreduce action\fR
is finding a production rule that matches and substituting 
the rhs of the production by the lhs.  For input \f(CW\*(C`NUM \- NUM \- NUM\*(C'\fR
the activity will be as follows (the dot is used to indicate where the next 
input token is):
.PP
.Vb 6
\&                           .NUM \- NUM \- NUM # shift
\&                            NUM.\- NUM \- NUM # reduce exp: NUM 
\&                            exp.\- NUM \- NUM # shift
\&                            exp \-.NUM \- NUM # shift
\&                            exp \- NUM.\- NUM # reduce exp: NUM
\&                            exp \- exp.\- NUM # shift/reduce conflict
.Ve
.PP
up this point two different decisions can be taken: the next description can be
.PP
.Vb 1
\&                                  exp.\- NUM # reduce by exp: exp \*(Aq\-\*(Aq exp (rule 2)
.Ve
.PP
or:
.PP
.Vb 1
\&                            exp \- exp \-.NUM # shift \*(Aq\-\*(Aq (to state 3)
.Ve
.PP
that is why it is called a \fIshift-reduce conflict\fR.
.PP
That is also the reason for the precedence declarations in the 
head section. Another kind of conflicts are \fIreduce-reduce conflicts\fR.
They arise when more that rhs can be applied for a reduction
action.
.PP
Eyapp solves the conflicts applying the following rules:
.IP "\(bu" 4
In a shift/reduce conflict, the default is the shift.
.IP "\(bu" 4
In a reduce/reduce conflict, the default is to reduce by the
earlier grammar production (in the input sequence).
.IP "\(bu" 4
Precedences and associativities can be given to tokens in
the declarations section. This is made by a sequence of lines beginning
with one of the directives: \f(CW%left\fR, \f(CW%right\fR, or \f(CW%nonassoc\fR, 
followed by a list of
tokens. All the tokens on the same line
have the same precedence and associativity; 
the lines are listed in order of increasing precedence.
.IP "\(bu" 4
A precedence and associativity is associated with each grammar
production; it is the precedence and associativity of the \fIlast token\fR 
or \fIliteral\fR in the right hand side of the production.
.IP "\(bu" 4
The \f(CW%prec\fR directive can be used when
a rhs is involved in a conflict and has no tokens
inside or it has but the precedence of the last token leads
to an incorrect interpretation. A rhs can be followed by 
an optional \f(CW\*(C`%prec token\*(C'\fR directive
giving the production the precedence of the \f(CW\*(C`token\*(C'\fR
.Sp
.Vb 1
\&                          exp:   \*(Aq\-\*(Aq exp %prec NEG { \-$_[1] }
.Ve
.IP "\(bu" 4
If there is a shift/reduce conflict, and both the grammar production
and the input token have precedence and associativity associated
with them, then the conflict is solved in favor of the action (shift or
reduce) associated with the higher precedence. If the precedences are the
same, then the associativity is used; left associative implies reduce,
right associative implies shift, and non associative implies error.
The last is used to describe operators, like the operator \f(CW\*(C`.LT.\*(C'\fR in \s-1FORTRAN, \s0
that may not associate with themselves. That is, because
.Sp
.Vb 1
\&                             A .LT. B .LT. C
.Ve
.Sp
is invalid in \s-1FORTRAN, \s0\f(CW\*(C`.LT.\*(C'\fR would be described with the keyword \f(CW%nonassoc\fR in eyapp.
.PP
To solve a shift-reduce conflict between a production \f(CW\*(C`A \-\-> SOMETHING\*(C'\fR
and a token \f(CW\*(Aqa\*(Aq\fR you can follow this procedure:
.ie n .IP "1. Edit the "".output"" file" 4
.el .IP "1. Edit the \f(CW.output\fR file" 4
.IX Item "1. Edit the .output file"
.PD 0
.IP "2. Search for the state where the conflict between the production and the token is. In our example it looks like:" 4
.IX Item "2. Search for the state where the conflict between the production and the token is. In our example it looks like:"
.PD
.Vb 2
\& pl@nereida:~/src/perl/YappWithDefaultAction/examples$ sed \-ne \*(Aq56,65p\*(Aq ambiguities.output
\& State 5:
\&
\&        exp \-> exp . \*(Aq\-\*(Aq exp    (Rule 2)
\&        exp \-> exp \*(Aq\-\*(Aq exp .    (Rule 2)
\&
\&        \*(Aq\-\*(Aq     shift, and go to state 3
\&
\&        \*(Aq\-\*(Aq     [reduce using rule 2 (exp)]
\&        $default        reduce using rule 2 (exp)
.Ve
.ie n .IP "3. Inside the state there has to be a production of the type ""A \-\-> SOMETHING."" (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form ""A \-\-> prefix . suffix"", where suffix can \fIstart\fR with the involved token \*(Aqa\*(Aq." 4
.el .IP "3. Inside the state there has to be a production of the type \f(CWA \-\-> SOMETHING.\fR (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form \f(CWA \-\-> prefix . suffix\fR, where suffix can \fIstart\fR with the involved token \f(CW\*(Aqa\*(Aq\fR." 4
.IX Item "3. Inside the state there has to be a production of the type A --> SOMETHING. (with the dot at the end) indicating that a reduction must take place. There has to be also another production of the form A --> prefix . suffix, where suffix can start with the involved token a."
.PD 0
.ie n .IP "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want ""NUM \- NUM \- NUM"" to produce a tree like ""MINUS(MINUS(NUM, NUM), NUM)"" and not ""MINUS(NUM, MINUS(NUM, NUM))"". We want the conflict in ""exp \- exp.\- NUM"" to be solved in favor of the reduction by ""exp: exp \*(Aq\-\*(Aq exp"". This is achieved by declaring ""%left \*(Aq\-\*(Aq""." 4
.el .IP "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want \f(CWNUM \- NUM \- NUM\fR to produce a tree like \f(CWMINUS(MINUS(NUM, NUM), NUM)\fR and not \f(CWMINUS(NUM, MINUS(NUM, NUM))\fR. We want the conflict in \f(CWexp \- exp.\- NUM\fR to be solved in favor of the reduction by \f(CWexp: exp \*(Aq\-\*(Aq exp\fR. This is achieved by declaring \f(CW%left \*(Aq\-\*(Aq\fR." 4
.IX Item "4. Decide what action shift or reduce matches the kind of trees you want. In this example we want NUM - NUM - NUM to produce a tree like MINUS(MINUS(NUM, NUM), NUM) and not MINUS(NUM, MINUS(NUM, NUM)). We want the conflict in exp - exp.- NUM to be solved in favor of the reduction by exp: exp - exp. This is achieved by declaring %left -."
.PD
.SS "Error Recovery"
.IX Subsection "Error Recovery"
The token name \f(CW\*(C`error\*(C'\fR is reserved for error handling. This name can
be used in grammar productions; it suggests places where errors are
expected, and recovery can take place:
.PP
.Vb 8
\&     line:
\&       \*(Aq\en\*(Aq         { undef }
\&       | exp \*(Aq\en\*(Aq   { print "$_[1]\en" if defined($_[1]); $_[1] }
\&       | error  \*(Aq\en\*(Aq
\&           {
\&             $_[0]\->YYErrok;
\&             undef
\&           }
.Ve
.PP
The parser pops its stack until
it enters a state where the token \f(CW\*(C`error\*(C'\fR is legal. It then shifts
the token \f(CW\*(C`error\*(C'\fR and proceeds to discard tokens until finding 
one that is acceptable. In the example
all the tokens until finding a \f(CW\*(Aq\en\*(Aq\fR will be skipped. 
If no special error productions have been specified,
the processing will halt.
.PP
In order to prevent a cascade of error messages, the parser, after
detecting an error, remains in error state until three tokens have been
successfully read and shifted. If an error is detected when the parser
is already in error state, no message is given, and the input token is
quietly deleted. The method \f(CW\*(C`YYErrok\*(C'\fR used in the example 
communicates to the parser
that a satisfactory recovery has been reached 
and that it can safely emit new error
messages.
.PP
You cannot have a literal \fI'error'\fR in your grammar as it would
confuse the driver with the \fIerror\fR token. Use a symbolic token instead.
.SH "THE TAIL"
.IX Header "THE TAIL"
The tail section contains Perl code. Usually it is empty, but you
can if you want put here your own lexical analyzer and 
error management subroutines.
An example of this is in
files \f(CW\*(C`examples/eyapplanguageref/List3_tree_d_sem.yp\*(C'\fR (the grammar)
and \f(CW\*(C`use_list3_tree_d_dem.pl\*(C'\fR (the client).
.SH "THE LEXICAL ANALYZER"
.IX Header "THE LEXICAL ANALYZER"
The Lexical Analyzer 
is called each time the parser needs a new token.
It is called with only one argument (the parser object)
and returns a pair 
containing the next token and its associated attribute.
.PP
The fact that is a method of the parser object means that the parser
methods are accessible inside the lexical analyzer.
.PP
When the lexical analyzer reaches the end of input, it must return the
pair \f(CW\*(C`(\*(Aq\*(Aq, undef)\*(C'\fR
.SS "Automatic Generation of Lexical Analyzers"
.IX Subsection "Automatic Generation of Lexical Analyzers"
By default a lexical analyzer is built.
The \f(CW\*(C`eyapp\*(C'\fR option \f(CW\*(C`\-l\*(C'\fR
can be used to inhibit the generation of 
the default lexical analyzer. In such case,
one must be explictly provided.
.PP
\fINo token Definitions\fR
.IX Subsection "No token Definitions"
.PP
When no token definitions are given in the head section, 
the default lexical analyzer simply assumes
that the token is the string literal. See this example in 
file \f(CW\*(C`examples/lexergeneration/simple.yp\*(C'\fR:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat simple.yp
\&  %%
\&  A:    a
\&      | A d
\&  ;
\&  %%
.Ve
.PP
The grammar does not describes the lexical analyzer nor the error default subroutine.
Eyapp will generate default lexical and error subroutines:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-o simple.pl \-TC simple.yp
\&
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ls \-ltr | tail \-2
\&  \-rw\-r\-\-r\-\- 1 pl pl   27 2010\-06\-29 10:28 simple.yp
\&  \-rwxr\-xr\-x 1 pl pl 3245 2010\-06\-29 10:35 simple.pl
.Ve
.PP
The option \f(CW\*(C`\-T\*(C'\fR is equivalent to insert the \f(CW%tree\fR directive in the head section.
Since no names were explicitly given to the productions, the names of the productions are built using
the pattern \f(CW\*(C`Lhs_is_RHS\*(C'\fR.
.PP
Option \f(CW\*(C`\-C\*(C'\fR instructs the \f(CW\*(C`eyapp\*(C'\fR compiler to produce an executable by setting the execution permits
(see \f(CW\*(C`simple.pl\*(C'\fR permits above), inserting the appropriate she bang directive:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ head simple.pl | head \-1
\&  #!/usr/bin/perl
.Ve
.PP
and inserting a call to the package \f(CW\*(C`main\*(C'\fR subroutine at the end of the generated parser:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ tail \-6 simple.pl
\&  unless (caller) {
\&    exit !_\|_PACKAGE_\|_\->main(\*(Aq\*(Aq);
\&  }
.Ve
.PP
If no \f(CW\*(C`main\*(C'\fR was provided, \f(CW\*(C`eyapp\*(C'\fR will provide one.
.PP
Tokens \f(CW\*(C`a\*(C'\fR and \f(CW\*(C`d\*(C'\fR are assumed to represent strings \f(CW\*(Aqa\*(Aq\fR
and \f(CW\*(Aqd\*(Aq\fR respectively.
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-i \-t \-c \*(Aqa d d\*(Aq
\&  A_is_A_d(A_is_A_d(A_is_a(TERMINAL[a]),TERMINAL[d]),TERMINAL[d])
.Ve
.PP
The \f(CW\*(C`main\*(C'\fR method provided by \f(CW\*(C`eyapp\*(C'\fR accepts several options in the command line:
.IP "\(bu" 2
\&\f(CW\*(C`\-t\*(C'\fR Prints the abstract syntax tree
.IP "\(bu" 2
\&\f(CW\*(C`\-i\*(C'\fR Shows the semantic value associated with each terminal
.IP "\(bu" 2
\&\f(CW\*(C`\-c string\*(C'\fR Indicates that the input is given by the \f(CW\*(C`string\*(C'\fR that follows the option
.PP
You can get the set of available options using \f(CW\*(C`\-\-help\*(C'\fR:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-h
\&  Available options:
\&    \-\-debug                    sets yydebug on
\&    \-\-nodebug                  sets yydebug off
\&    \-\-file filepath            read input from filepath
\&    \-\-commandinput string      read input from string
\&    \-\-tree                     prints $tree\->str
\&    \-\-notree                   does not print $tree\->str
\&    \-\-info                     When printing $tree\->str shows the value of TERMINALs
\&    \-\-help                     shows this help
\&    \-\-slurp                    read until EOF reached
\&    \-\-noslurp                  read until CR is reached
\&    \-\-argfile                  main() will take the input string from its @_
\&    \-\-noargfile                main() will not take the input string from its @_
\&    \-\-yaml                     dumps YAML for $tree: YAML module must be installed
\&    \-\-margin=i                 controls the indentation of $tree\->str (i.e. $Parse::Eyapp::Node::INDENT)
.Ve
.PP
If we try to feed it with an illegal input, an error message is emitted:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simple.pl \-i \-t \-c \*(Aqa e d\*(Aq
\&  Error inside the lexical analyzer near \*(Aqe\*(Aq. Line: 1. File: \*(Aqsimple.yp\*(Aq. No match found.
.Ve
.PP
In the example above we have taken advantage of the \f(CW\*(C`main\*(C'\fR method provided by Eyapp.
If we want to keep in control of the parsing process, we can write a client program that 
makes use of the generated modulino:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n usesimple.pl
\&     1  #!/usr/bin/env perl
\&     2  use warnings;
\&     3  use strict;
\&     4
\&     5  use simple;
\&     6
\&     7  # build a parser object
\&     8  my $parser = simple\->new();
\&     9
\&    10  # take the input from the command line arguments
\&    11  # or from STDIN
\&    12  my $input = join \*(Aq \*(Aq,@ARGV;
\&    13  $input = <> unless $input;
\&    14
\&    15  # set the input
\&    16  $parser\->input($input);
\&    17
\&    18  # parse the input and get the AST
\&    19  my $tree = $parser\->YYParse();
\&    20
\&    21  print $tree\->str()."\en";
.Ve
.PP
Here is an example of execution:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-T simple.yp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./usesimple.pl a d d
\&  A_is_A_d(A_is_A_d(A_is_a(TERMINAL),TERMINAL),TERMINAL)
.Ve
.PP
\fIToken Definitions: Regular Expressions\fR
.IX Subsection "Token Definitions: Regular Expressions"
.PP
Eyapp extends the \f(CW%token\fR directive with the syntax:
.PP
.Vb 1
\&     %token TOKENID = /regexp/
.Ve
.PP
If such definition is used, an entry with the shape:
.PP
.Vb 1
\&   /\eG$regexp/gc and return (\*(AqTOKENID\*(Aq, $1);
.Ve
.PP
will be added to the generated lexical analyzer.
Therefore the string associated with the first parenthesis in \f(CW\*(C`/regexp/\*(C'\fR
will be used as semantic value for \f(CW\*(C`TOKENID\*(C'\fR. If \f(CW\*(C`/regexp/\*(C'\fR has no
parenthesis \f(CW\*(C`undef\*(C'\fR will be the semantic value.
See this example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n numlist.eyp
\&     1  %token NUM = /(\ed+)/
\&     2  %token ID  = /(\ew+)/
\&     3
\&     4  %%
\&     5  A:
\&     6        B
\&     7      | A B
\&     8  ;
\&     9
\&    10  B:
\&    11        ID
\&    12      | a
\&    13      | NUM
\&    14  ;
\&    15  %%
.Ve
.PP
The order of the \f(CW%token\fR declarations is important. 
In the example the token \f(CW\*(C`NUM\*(C'\fR is a subset of the token \f(CW\*(C`ID\*(C'\fR.
Since it appears first, it will be tried first:
.PP
.Vb 2
\&     /\eG(\ed+)/gc and return (\*(AqNUM\*(Aq, $1);
\&     /\eG(\ew+)/gc and return (\*(AqID\*(Aq, $1);
.Ve
.PP
Also observe that token \f(CW\*(Aqa\*(Aq\fR (line 12) is contained
in token \f(CW\*(C`ID\*(C'\fR. However, any implicit token like this that appears in the
body section and was not 
declared using an explicit \f(CW%token\fR directive in the
head section takes priority over the ones declared.
See the behavior of the former program:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC numlist
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./numlist.pm \-t \-i \-c \*(Aq4 a b\*(Aq
\&  A_is_A_B(A_is_A_B(A_is_B(B_is_NUM(TERMINAL[4])),B_is_a(TERMINAL[a])),B_is_ID(TERMINAL[b]))
.Ve
.PP
The lexical analyzer returned \f(CW\*(C`NUM\*(C'\fR and not \f(CW\*(C`ID\*(C'\fR when \f(CW4\fR was processed,
also it returned \f(CW\*(C`a\*(C'\fR and not \f(CW\*(C`ID\*(C'\fR when \f(CW\*(Aqa\*(Aq\fR was 
processed.
.PP
A \f(CW%token\fR declaration without assignment like in:
.PP
.Vb 1
\&   %token A B
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&  %token A   = /(A)/
\&  %token B   = /(B)/
.Ve
.PP
(in that order).
.PP
\fIToken Definitions via Code\fR
.IX Subsection "Token Definitions via Code"
.PP
An alternative way to define a token is via Perl code:
.PP
.Vb 1
\&      %token TOKENID = { ... }
.Ve
.PP
in such case the code defining \f(CW\*(C`TOKENID\*(C'\fR will be inserted
verbatim in the corresponding place of the generated lexical 
analyzer. When the code \f(CW\*(C`{ ... }\*(C'\fR
is executed, the variable \f(CW$_\fR 
contains the input being parsed and
the special variable \f(CW$self\fR refers to the parser object.
The following example is equivalent to the one used in the previous
section:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n tokensemdef.eyp
\&     1  %token NUM = /(\ed+)/
\&     2  %token ID  = { /\eG(\ew+)/gc and return (\*(AqID\*(Aq, $1); }
\&     3
\&     4  %%
\&     5  A:
\&     6        B
\&     7      | A B
\&     8  ;
\&     9
\&    10  B:
\&    11        ID
\&    12      | a
\&    13      | NUM
\&    14  ;
\&    15  %%
.Ve
.PP
Follows an example of compilation and execution:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC tokensemdef.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./tokensemdef.pm \-t \-i \-nos
\&  4 a b
\&  A_is_A_B(A_is_A_B(A_is_B(B_is_NUM(TERMINAL[4])),B_is_a(TERMINAL[a])),B_is_ID(TERMINAL[b]))
.Ve
.PP
\fIToken Definitions: Controling whites\fR
.IX Subsection "Token Definitions: Controling whites"
.PP
By default, the generated lexical analyzer skips 
white spaces, defined as \f(CW\*(C`/\es*/\*(C'\fR. The programmer
can change this behavior using the \f(CW%whites\fR directive.
The following example permits Perl-like comments 
in the input:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n simplewithwhites.eyp
\&     1  %whites  /(\es*(?:#.*)?\es*)/
\&     2  %%
\&     3  A:    a
\&     4      | A d
\&     5  ;
\&     6  %%
.Ve
.PP
Follows an example of execution:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-nA input
\&       1  a # 1$
\&       2  $
\&       3  d ^I#2$
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-TC simplewithwhites.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./simplewithwhites.pm \-t \-i \-f input
\&  A_is_A_d(A_is_a(TERMINAL[a]),TERMINAL[d])
.Ve
.PP
The \f(CW%white\fR directive can be followed by some Perl
code defining the white spaces:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n simplewithwhitescode.eyp
\&     1  %whites  { /\eG(\es*(?:#.*)?\es*)/gc and $self\->tokenline($1 =~ tr{\en}{}) }
\&     2  %%
\&     3  A:    a
\&     4      | A d
\&     5  ;
\&     6  %%
.Ve
.SS "Reading Input from File"
.IX Subsection "Reading Input from File"
You can use the method \f(CW\*(C`YYSlurpFile\*(C'\fR to read the input from a file
and set the input for the parser to its contents.
Yo can also use the \f(CW\*(C`YYInput\*(C'\fR method to set the input.
.PP
See the example below:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n usesimplefromfile.pl
\&     1  #!/usr/bin/env perl
\&     2  use warnings;
\&     3  use strict;
\&     4
\&     5  use simplewithwhites;
\&     6
\&     7  my $parser = simplewithwhites\->new();
\&     8
\&     9  # take the input from the specified file
\&    10  my $fn = shift;
\&    11
\&    12  $parser\->YYSlurpFile($fn);
\&    13
\&    14  # parse the input and get the AST
\&    15  my $tree = $parser\->YYParse();
\&    16
\&    17  print $tree\->str()."\en";
.Ve
.PP
First, compile the grammar \f(CW\*(C`simplewithwhites.eyp\*(C'\fR presented above:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-T simplewithwhites
.Ve
.PP
And then run it:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n  input
\&     1  a # 1
\&     2
\&     3  d       #2
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./usesimplefromfile.pl input
\&  A_is_A_d(A_is_a(TERMINAL),TERMINAL)
.Ve
.SS "Huge input and Incremental Lexical Analyzers"
.IX Subsection "Huge input and Incremental Lexical Analyzers"
If your input is huge, try to make use of an incremental
lexical analyzer. In an incremental lexer the input
is read and parsed in chunks. Read up to a 
point where  it is safe to parse.
In the example below, the lexer reads a new line
each time we reach the end of the input string \f(CW\*(C`${$parser\->YYInput}\*(C'\fR.
In the case of the arithmetic expressions grammar below,
by reading up to \f(CW\*(Aq\en\*(Aq\fR, we are sure that the input is not
broken in the middle of a token.
Instead of having the whole huge input in memory,
we only keep a small substring.
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat \-n Incremental.eyp                    
\&     1  %right  \*(Aq=\*(Aq                                                                     
\&     2  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq                                                                 
\&     3  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq                                                                 
\&     4  %left   NEG                                                                     
\&     5                                                                                  
\&     6  %tree                                                                           
\&     7                                                                                  
\&     8  %%                                                                              
\&     9  input:                                                                          
\&    10          |   input $line  { print $line\->str."\en" }                              
\&    11  ;                                                                               
\&    12                                                                                  
\&    13  line:     \*(Aq\en\*(Aq                                                                  
\&    14          | exp \*(Aq\en\*(Aq
\&    15          | error \*(Aq\en\*(Aq
\&    16  ;
\&    17
\&    18  exp:        NUM
\&    19          |   VAR
\&    20          |   VAR \*(Aq=\*(Aq exp
\&    21          |   exp \*(Aq+\*(Aq exp
\&    22          |   exp \*(Aq\-\*(Aq exp
\&    23          |   exp \*(Aq*\*(Aq exp
\&    24          |   exp \*(Aq/\*(Aq exp
\&    25          |   \*(Aq\-\*(Aq exp %prec NEG
\&    26          |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    27  ;
\&    28
\&    29  %%
\&    30
\&    31  sub _Lexer {
\&    32      my($parser)=shift;
\&    33
\&    34      if ($parser\->YYEndOfInput) {
\&    35        my $input = <STDIN>;
\&    36        return(\*(Aq\*(Aq, undef) unless $input;
\&    37        $parser\->input($input);
\&    38      };
\&    39
\&    40      for (${$parser\->YYInput}) {
\&    41          m/\eG[ \et]*/gc;
\&    42          m/\eG([0\-9]+(?:\e.[0\-9]+)?)/gc and return(\*(AqNUM\*(Aq,$1);
\&    43          m/\eG([A\-Za\-z][A\-Za\-z0\-9_]*)/gc and return(\*(AqVAR\*(Aq,$1);
\&    44          m/\eG(.)/gcs and return($1,$1);
\&    45          return(\*(Aq\*(Aq, undef);
\&    46      }
\&    47  }
\&    48
\&    49  _\|_PACKAGE_\|_\->lexer(\e&_Lexer);
.Ve
.PP
This approach has limitations. The code will get more tangled if some token
can take more than one line. For example, if we extend this language to accept 
C\-like comments \f(CW\*(C`/* ... */\*(C'\fR which expands over several lines.
.PP
Here follows an example of execution. 
This is the client program:
.PP
.Vb 3
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat useincremental.pl
\&  #!/usr/bin/perl \-w
\&  use Incremental;
\&
\&  Incremental\->new\->YYParse;
.Ve
.PP
This is a small test input file:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ cat inputforincremental
\&  a = 2
\&  a+3
\&  b=4
\&  b*2+a
.Ve
.PP
Finally, see the results of the execution:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ ./useincremental.pl < inputforincremental
\&  line_4(exp_8(TERMINAL,exp_6(TERMINAL)))
\&  line_4(exp_9(exp_7(TERMINAL),exp_6(TERMINAL)))
\&  line_4(exp_8(TERMINAL,exp_6(TERMINAL)))
\&  line_4(exp_9(exp_11(exp_7(TERMINAL),exp_6(TERMINAL)),exp_7(TERMINAL)))
.Ve
.PP
The numbers in the output refer to the production number:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ eyapp \-v Incremental.eyp
\&  pl@nereida:~/LEyapp/examples/lexergeneration$ sed \-ne \*(Aq/Rules:/,/^$/p\*(Aq Incremental.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> input $end
\&  1:      input \-> /* empty */
\&  2:      input \-> input line
\&  3:      line \-> \*(Aq\en\*(Aq
\&  4:      line \-> exp \*(Aq\en\*(Aq
\&  5:      line \-> error \*(Aq\en\*(Aq
\&  6:      exp \-> NUM
\&  7:      exp \-> VAR
\&  8:      exp \-> VAR \*(Aq=\*(Aq exp
\&  9:      exp \-> exp \*(Aq+\*(Aq exp
\&  10:     exp \-> exp \*(Aq\-\*(Aq exp
\&  11:     exp \-> exp \*(Aq*\*(Aq exp
\&  12:     exp \-> exp \*(Aq/\*(Aq exp
\&  13:     exp \-> \*(Aq\-\*(Aq exp
\&  14:     exp \-> \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.SS "Using Several Lexical Analyzers for the Same Parser"
.IX Subsection "Using Several Lexical Analyzers for the Same Parser"
At any time during the parsing you can use the method
\&\f(CW\*(C`$parser\->YYLexer\*(C'\fR to set a new lexical analyzer.
.PP
The following grammar starts setting the lexer
to  sub \f(CW\*(C`Lexer1\*(C'\fR (line 44). It later changes
the lexer to \f(CW\*(C`Lexer2\*(C'\fR (ine 24)
after the token \f(CW\*(Aq%%\*(Aq\fR is seen. 
Inside \f(CW\*(C`Lexer2\*(C'\fR the token \f(CW\*(C`A\*(C'\fR represents a \f(CW\*(AqB\*(Aq\fR.
This capability
allows the parsing of languages where different sections 
require different lexical analysis. For example, in \f(CW\*(C`yacc\*(C'\fR,
carriage returns separates declarations in the header 
section but is considered a white space inside the
body and tail sections. This feature has 
similar power to the \fIstate\fR concept of the
lexical analyzer generator \f(CW\*(C`flex\*(C'\fR.
.PP
.Vb 10
\&  $ cat \-n twolexers.eyp 
\&     1  %%
\&     2  s:  first \*(Aq%%\*(Aq second
\&     3  ;
\&     4  
\&     5  first:
\&     6      A first
\&     7    | A
\&     8  ;
\&     9  
\&    10  second:
\&    11      A second
\&    12    | A
\&    13  ;
\&    14  
\&    15  %%
\&    16  
\&    17  sub Lexer1 {
\&    18      my($parser)=shift;
\&    19  
\&    20      print "In Lexer 1 \en";
\&    21      for (${$parser\->YYInput}) {
\&    22          m/\eG\es*/gc;
\&    23          m/\eG(%%)/gc and do {
\&    24            $parser\->YYLexer(\e&Lexer2);
\&    25            return ($1, undef);
\&    26          };
\&    27          m/\eG(.)/gcs and return($1,$1);
\&    28          return(\*(Aq\*(Aq, undef);
\&    29      }
\&    30  }
\&    31  
\&    32  sub Lexer2 {
\&    33      my($parser)=shift;
\&    34  
\&    35      print "In Lexer 2 \en";
\&    36      for (${$parser\->YYInput}) {
\&    37          m/\eG\es*/gc;
\&    38          m/\eGB/gc    and return(\*(AqA\*(Aq,\*(AqB\*(Aq);
\&    39          m/\eG(.)/gcs and die "Error. Expected \*(AqB\*(Aq, found $1\en";
\&    40      }
\&    41          return(\*(Aq\*(Aq, undef);
\&    42  }
\&    43  
\&    44  _\|_PACKAGE_\|_\->lexer(\e&Lexer1);
.Ve
.PP
When executed, it behaves like this:
.PP
.Vb 7
\&        $ ./twolexers.pm \-t \-i \-m 1 \-c \*(AqA A %% B B\*(Aq
\&        In Lexer 1 
\&        In Lexer 1 
\&        In Lexer 1 
\&        In Lexer 2 
\&        In Lexer 2 
\&        In Lexer 2 
\&
\&        s_is_first_second(
\&          first_is_A_first(
\&            TERMINAL[A],
\&            first_is_A(
\&              TERMINAL[A]
\&            )
\&          ),
\&          second_is_A_second(
\&            TERMINAL[B],
\&            second_is_A(
\&              TERMINAL[B]
\&            )
\&          )
\&        )
.Ve
.PP
The lexer can bechanged at any time. The following example
starts using the default lexer generated by \f(CW\*(C`eyapp\*(C'\fR.
It changes the lexer to \f(CW\*(C`Lexer2\*(C'\fRinside an intermediate semantic action (line 7).
Inside \f(CW\*(C`Lexer2\*(C'\fR  the token \f(CW\*(C`A\*(C'\fR is interpreted as a word \f(CW\*(C`\ew+\*(C'\fR.
.PP
.Vb 10
\&   $ cat \-n twolexers2.eyp 
\&     1  # Compile it with:
\&     2  # $ eyapp \-TC twolexers2.eyp 
\&     3  # Run it with:
\&     4  # $ ./twolexers2.pm \-t \-i \-c \*(AqA A %% d3 c2\*(Aq
\&     5  
\&     6  %%
\&     7  s:  first \*(Aq%%\*(Aq { $_[0]\->YYLexer(\e&Lexer2) } second
\&     8  ;
\&     9  
\&    10  first:
\&    11      A first
\&    12    | A
\&    13  ;
\&    14  
\&    15  second:
\&    16      A second
\&    17    | A
\&    18  ;
\&    19  
\&    20  %%
\&    21  
\&    22  sub Lexer2 {
\&    23      my($parser)=shift;
\&    24  
\&    25      print "In Lexer 2 \en";
\&    26      for (${$parser\->YYInput}) {
\&    27          m/\eG\es*/gc;
\&    28          m/\eG(\ew+)/gc    and return(\*(AqA\*(Aq,$1);
\&    29          m/\eG(.)/gcs and die "Error. Expected a word,Found $1\en";
\&    30      }
\&    31      return(\*(Aq\*(Aq, undef);
\&    32  }
.Ve
.SH "THE ERROR REPORT SUBROUTINE"
.IX Header "THE ERROR REPORT SUBROUTINE"
The Error Report subroutine is also a parser attribute, 
and must be defined. By default \f(CW\*(C`Parse::Eyapp\*(C'\fR
provides a convenient error handler.
.PP
See the Parse::Yapp pages and elsewhere documentation
on \f(CW\*(C`yacc\*(C'\fR and \f(CW\*(C`bison\*(C'\fR for more information.
.SH "USING AN EYAPP GRAMMAR"
.IX Header "USING AN EYAPP GRAMMAR"
The following is an example of a program that uses the calculator explained 
in the two previous sections:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat \-n usecalc.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Calc;
\&     4
\&     5  my $parser = Calc\->new();
\&     6  $parser\->input(\e<<\*(AqEOI\*(Aq
\&     7  a = 2*3       # 1: 6
\&     8  d = 5/(a\-6)   # 2: division by zero
\&     9  b = (a+1)/7   # 3: 1
\&    10  c=a*3+4)\-5    # 4: syntax error
\&    11  a = a+1       # 5: 7
\&    12  EOI
\&    13  );
\&    14  my $t = $parser\->Run();
\&    15  print "========= Symbol Table ==============\en";
\&    16  print "$_ = $t\->{$_}\en" for sort keys %$t;
.Ve
.PP
The output for this program is (the input for each output
appear as a Perl comment on the right):
.PP
.Vb 1
\&  pl@nereida:~/src/perl/YappWithDefaultAction/examples$ eyapp Calc.eyp
\&
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./usecalc.pl
\&  6
\&  Illegal division by zero.
\&  1
\&
\&  Syntax error near \*(Aq)\*(Aq (line number 4).
\&  Expected one of these terminals: \*(Aq\-\*(Aq \*(Aq/\*(Aq \*(Aq^\*(Aq \*(Aq*\*(Aq \*(Aq+\*(Aq \*(Aq
\&  \*(Aq
\&  7
\&  ========= Symbol Table ==============
\&  a = 7
\&  b = 1
\&  c = 22
.Ve
.SH "LISTS AND OPTIONALS"
.IX Header "LISTS AND OPTIONALS"
The elements of the right hand side of a production (abbreviated \fIrhs\fR) can be one of these:
.PP
.Vb 9
\&  rhselt:     
\&        symbol    
\&      | code    
\&      | \*(Aq(\*(Aq optname rhs \*(Aq)\*(Aq 
\&      | rhselt STAR               /* STAR   is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e*  */
\&      | rhselt \*(Aq<\*(Aq STAR symbol \*(Aq>\*(Aq 
\&      | rhselt OPTION             /* OPTION is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e?  */
\&      | rhselt \*(Aq<\*(Aq PLUS symbol \*(Aq>\*(Aq
\&      | rhselt PLUS               /* PLUS   is (%name\es*([A\-Za\-z_]\ew*)\es*)?\e+  */
.Ve
.PP
The \f(CW\*(C`STAR\*(C'\fR, \f(CW\*(C`OPTION\*(C'\fR and \f(CW\*(C`PLUS\*(C'\fR operators provide a simple mechanism
to express lists:
.IP "\(bu" 4
In Eyapp the \f(CW\*(C`+\*(C'\fR operator indicates one or more repetitions of the element
to the left of \f(CW\*(C`+\*(C'\fR, thus a rule like:
.Sp
.Vb 1
\&                        decls:  decl +
.Ve
.Sp
is the same as:
.Sp
.Vb 2
\&                        decls:  decls decl 
\&                             |  decl
.Ve
.Sp
An additional  symbol may be included  to indicate lists of elements 
separated by such symbol. Thus
.Sp
.Vb 1
\&                       rhss: rule <+ \*(Aq|\*(Aq>
.Ve
.Sp
is equivalent to:
.Sp
.Vb 2
\&                       rhss: rhss \*(Aq|\*(Aq rule 
\&                           | rule
.Ve
.IP "\(bu" 4
The operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`?\*(C'\fR have their usual meaning: 0 or more for
\&\f(CW\*(C`*\*(C'\fR and optionality for \f(CW\*(C`?\*(C'\fR. Is legal to parenthesize 
a \f(CW\*(C`rhs\*(C'\fR expression as in:
.Sp
.Vb 1
\&                       optname: (NAME IDENT)?
.Ve
.ie n .SS "The ""+"" operator"
.el .SS "The \f(CW+\fP operator"
.IX Subsection "The + operator"
The grammar:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat List3.yp 
\&  %semantic token \*(Aqc\*(Aq 
\&  %{
\&  use Data::Dumper;
\&  $Data::Dumper::Indent = 1;
\&  %}
\&  %%
\&  S:      \*(Aqc\*(Aq+  \*(Aqd\*(Aq+ 
\&             { 
\&                print Dumper($_[1]);
\&                print Dumper($_[2]);
\&             } 
\&  ;
\&  %%
.Ve
.PP
Is equivalent to:
.PP
.Vb 9
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-v List3.yp; head \-9 List3.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:  $start \-> S $end
\&  1:  PLUS\-1 \-> PLUS\-1 \*(Aqc\*(Aq
\&  2:  PLUS\-1 \-> \*(Aqc\*(Aq
\&  3:  PLUS\-2 \-> PLUS\-2 \*(Aqd\*(Aq
\&  4:  PLUS\-2 \-> \*(Aqd\*(Aq
\&  5:  S \-> PLUS\-1 PLUS\-2
.Ve
.PP
By default, the semantic action associated with a \f(CW\*(C`+\*(C'\fR returns the lists of attributes
to which the \f(CW\*(C`+\*(C'\fR applies:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./use_list3.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = [ \*(Aqc\*(Aq, \*(Aqc\*(Aq ];
\&  $VAR1 = [ \*(Aqd\*(Aq, \*(Aqd\*(Aq ];
.Ve
.PP
Observe that, in spite of \f(CW\*(Aqd\*(Aq\fR being a syntactic token
the actions related with the \f(CW\*(C`d+\*(C'\fR element (i.e. the actions associated
with the \f(CW\*(C`PLUS\-2\*(C'\fR productions) create the list of \f(CW\*(C`d\*(C'\fRs.
.PP
The semantic associated with a \f(CW\*(C`+\*(C'\fR changes 
when one of the tree creation directives is active (for instance \f(CW%tree\fR or \f(CW%metatree\fR)
or it has been explicitly requested with a call to the \f(CW\*(C`YYBuildingTree\*(C'\fR method:
.PP
.Vb 1
\&                            $self\->YYBuildingTree(1);
.Ve
.PP
Other ways to change the associated semantic are to use the 
\&\f(CW\*(C`yybuildingtree\*(C'\fR option of \f(CW\*(C`YYParse\*(C'\fR:
.PP
.Vb 4
\&         $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&                           yybuildingtree => 1,
\&                         # yydebug => 0x1F
\&         );
.Ve
.PP
In such case the associated semantic action creates a node labelled
.PP
.Vb 1
\&                     _PLUS_LIST
.Ve
.PP
whose children are the attributes associated with the items in the plus list. 
As it happens when using the \f(CW%tree\fR directive, \fIsyntactic tokens\fR are skipped.
.PP
When executing the example above but under the \f(CW%tree\fR directive
the output changes. The \f(CW\*(C`\-T\*(C'\fR option tells the \f(CW\*(C`eyapp\*(C'\fR compiler
to introduce an implicit \f(CW%tree\fR directive>:
.PP
.Vb 1
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp \-T List3.yp
.Ve
.PP
If we now run the client program with input \f(CW\*(C`ccdd\*(C'\fR we get
a couple of syntax trees:
.PP
.Vb 9
\&  ~/LEyapp/examples/eyapplanguageref$ ./use_list3.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  $VAR1 = bless( { \*(Aqchildren\*(Aq => [] }, \*(Aq_PLUS_LIST\*(Aq );
.Ve
.PP
The node associated with the list of \f(CW\*(C`d\*(C'\fRs is empty since
terminal \f(CW\*(C`d\*(C'\fR wasn't declared semantic.
.SS "When Nodes Disappear from Lists"
.IX Subsection "When Nodes Disappear from Lists"
When under the influence of the \f(CW%tree\fR directive
the action associated with a list operator
is to \fIflat\fR the children in a single list.
.PP
In the former example, the \f(CW\*(C`d\*(C'\fR nodes don't show up 
since \f(CW\*(Aqd\*(Aq\fR is a syntactic token. However, it may happen that changing the status
of \f(CW\*(Aqd\*(Aq\fR to semantic will not suffice.
.PP
When inserting the children, the tree (\f(CW%tree\fR)  node construction
method (\f(CW\*(C`YYBuildAST\*(C'\fR) omits any attribute that is not a reference.
Therefore, when inserting explicit actions, it is necessary to guarantee that 
the returned value is a reference or a semantic token 
to assure the presence of the value in the lists of children of the node.
Certainly you can use this property to prune parts of the tree.
Consider the following example:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat ListWithRefs1.eyp 
\&  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&  %{
\&  use Data::Dumper;
\&  $Data::Dumper::Indent = 1;
\&  %}
\&  %%
\&  S:      \*(Aqc\*(Aq+  D+ 
\&             { 
\&                print Dumper($_[1]);
\&                print $_[1]\->str."\en";
\&                print Dumper($_[2]);
\&                print $_[2]\->str."\en";
\&             } 
\&  ;
\&
\&  D: \*(Aqd\*(Aq
\&  ;
\&
\&  %%
\&
\&  sub Run {
\&    my ($self) = shift;
\&    return $self\->YYParse( yybuildingtree => 1 );
\&  }
.Ve
.PP
To activate the \fItree semantic\fR for lists we use the \f(CW\*(C`yybuildingtree\*(C'\fR
option of \f(CW\*(C`YYParse\*(C'\fR (line 26).
.PP
The execution gives an output like this:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ eyapp ListWithRefs1.eyp; ./use_listwithrefs1.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  _PLUS_LIST(TERMINAL,TERMINAL)
\&  $VAR1 = bless( { \*(Aqchildren\*(Aq => [] }, \*(Aq_PLUS_LIST\*(Aq ); _PLUS_LIST
.Ve
.PP
Though \f(CW\*(Aqd\*(Aq\fR was declared semantic the default action 
associated with the production \f(CW\*(C`D: \*(Aqd\*(Aq\*(C'\fR in line 16
returns \f(CW$_[1]\fR (that is, the scalar \f(CW\*(Aqd\*(Aq\fR). Since it is not
a reference it won't be inserted in the list of children of
\&\f(CW\*(C`_PLUS_LIST\*(C'\fR.
.SS "Recovering the Missing Nodes"
.IX Subsection "Recovering the Missing Nodes"
The solution is to be sure that the attribute is a reference:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat \-n ListWithRefs.eyp
\&     1  %semantic token \*(Aqc\*(Aq 
\&     2  %{
\&     3  use Data::Dumper;
\&     4  $Data::Dumper::Indent = 1;
\&     5  %}
\&     6  %%
\&     7  S:  \*(Aqc\*(Aq+  D+ 
\&     8        { 
\&     9           print Dumper($_[1]);
\&    10           print Dumper($_[2]);
\&    11        } 
\&    12  ;
\&    13  
\&    14  D: \*(Aqd\*(Aq
\&    15       {
\&    16         bless { attr => $_[1], children =>[]}, \*(AqDES\*(Aq;
\&    17       }
\&    18  ;
\&    19  
\&    20  %%
\&    21  
\&    22  sub Run {
\&    23    my ($self) = shift;
\&    24    return $self\->YYParse( yybuildingtree => 1 );
\&    25  }
.Ve
.PP
Now the attribute associated with \f(CW\*(C`D\*(C'\fR is a reference 
and appears in the list of children of \f(CW\*(C`_PLUS_LIST\*(C'\fR:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ eyapp ListWithRefs.eyp; ./use_listwithrefs.pl
\&  Try input \*(Aqccdd\*(Aq: ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqDES\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqDES\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST\*(Aq );
.Ve
.ie n .SS "Building a Tree with ""Parse::Eyapp::Node\->new"""
.el .SS "Building a Tree with \f(CWParse::Eyapp::Node\->new\fP"
.IX Subsection "Building a Tree with Parse::Eyapp::Node->new"
The former solution consisting on writing \fIby hand\fR the code to 
build the node may suffice when dealing with a single node.
Writing by hand the code to build a node is a cumbersome task.
Even worst: though the node built in the former example
looks like a \f(CW\*(C`Parse::Eyapp\*(C'\fR node actually isn't. \f(CW\*(C`Parse::Eyapp\*(C'\fR 
nodes always inherit from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR and 
consequently have access to the methods in such package.
The following execution using the debugger illustrates the point:
.PP
.Vb 1
\&  pl@nereida:~/LEyapp/examples$ perl \-wd use_listwithrefs.pl
\&
\&  Loading DB routines from perl5db.pl version 1.28
\&  Editor support available.
\&
\&  Enter h or \`h h\*(Aq for help, or \`man perldebug\*(Aq for more help.
\&
\&  main::(use_listwithrefs.pl:4):  $parser = new ListWithRefs();
\&    DB<1>  f ListWithRefs.eyp
\&  1       2       #line 3 "ListWithRefs.eyp"
\&  3
\&  4:      use Data::Dumper;
\&  5
\&  6       #line 7 "ListWithRefs.eyp"
\&  7       #line 8 "ListWithRefs.eyp"
\&  8
\&  9:                    print Dumper($_[1]);
\&  10:                   print $_[1]\->str."\en";
.Ve
.PP
through the command \f(CW\*(C`f ListWithRefs.eyp\*(C'\fR we inform the debugger
that subsequent commands will refer to such file. Next 
we execute the program up to the semantic action
associated with the production rule \f(CW\*(C`S: \*(Aqc\*(Aq+  D+\*(C'\fR (line 9)
.PP
.Vb 4
\&    DB<2> c 9     # Continue up to line 9 of ListWithRefs.eyp
\&  ccdd
\&  ListWithRefs::CODE(0x84ebe5c)(ListWithRefs.eyp:9):
\&  9:                    print Dumper($_[1]);
.Ve
.PP
Now we are in condition to look at the contents 
of the arguments:
.PP
.Vb 7
\&    DB<3> x $_[2]\->str
\&  0  \*(Aq_PLUS_LIST_2(DES,DES)\*(Aq
\&    DB<4> x $_[2]\->child(0)
\&  0  DES=HASH(0x85c4568)
\&     \*(Aqattr\*(Aq => \*(Aqd\*(Aq
\&     \*(Aqchildren\*(Aq => ARRAY(0x85c458c)
\&          empty array
.Ve
.PP
the \f(CW\*(C`str\*(C'\fR method works with the object \f(CW$_[2]\fR since
\&\f(CW\*(C`_PLUS_LIST_2\*(C'\fR nodes inherit from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR.
However, when we try with the \f(CW\*(C`DES\*(C'\fR node we get an
error:
.PP
.Vb 4
\&    DB<6> x $_[2]\->child(0)\->str
\&  Can\*(Aqt locate object method "str" via package "DES" at \e
\&    (eval 11)[/usr/share/perl/5.8/perl5db.pl:628] line 2, <STDIN> line 1.
\&    DB<7>
.Ve
.PP
More robust than the former solution of building the node \fIby hand\fR
is to use the constructor \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR:
The method \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
is uset to build forests of syntactic trees.
.PP
It receives a  list of terms describing the trees and \- optionally \-
a reference to a subroutine used to set up the attributes
of the just created nodes. After the creation 
of the trees the sub is called by \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
with arguments the list of references to the nodes (in the order
in which they appear in the terms, from left to right).
\&\f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR returns a list of references 
to the just created nodes. In a scalar context returns a reference to the first of such trees.
See an example:
.PP
.Vb 10
\&  ~/LEyapp/examples$ perl \-MParse::Eyapp \-MData::Dumper \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> @t = Parse::Eyapp::Node\->new(\*(AqA(C,D) E(F)\*(Aq, sub { my $i = 0; $_\->{n} = $i++ for @_ })
\&    DB<2> $Data::Dumper::Indent = 0
\&    DB<3> print Dumper($_)."\en" for @t
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 0,\*(Aqchildren\*(Aq => [bless( {\*(Aqn\*(Aq => 1,\*(Aqchildren\*(Aq => []}, \*(AqC\*(Aq ),
\&                                          bless( {\*(Aqn\*(Aq => 2,\*(Aqchildren\*(Aq => []}, \*(AqD\*(Aq )
\&                                         ]
\&                 }, \*(AqA\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 1,\*(Aqchildren\*(Aq => []}, \*(AqC\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 2,\*(Aqchildren\*(Aq => []}, \*(AqD\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 3,\*(Aqchildren\*(Aq => [bless( {\*(Aqn\*(Aq => 4,\*(Aqchildren\*(Aq => []}, \*(AqF\*(Aq )]}, \*(AqE\*(Aq );
\&  $VAR1 = bless( {\*(Aqn\*(Aq => 4,\*(Aqchildren\*(Aq => []}, \*(AqF\*(Aq );
.Ve
.PP
See the following example in which the nodes associated with \f(CW\*(Aqd\*(Aq\fR are
explicitly constructed:
.PP
.Vb 10
\&  ~/LEyapp/examples/eyapplanguageref$ cat \-n ListWithRefs2.eyp 
\&     1  %semantic token \*(Aqc\*(Aq 
\&     2  %{
\&     3  use Data::Dumper;
\&     4  $Data::Dumper::Indent = 1;
\&     5  %}
\&     6  %%
\&     7  S:      \*(Aqc\*(Aq+  D+ 
\&     8             { 
\&     9                print Dumper($_[1]);
\&    10                print $_[1]\->str."\en";
\&    11                print Dumper($_[2]);
\&    12                print $_[2]\->str."\en";
\&    13             } 
\&    14  ;
\&    15  
\&    16  D: \*(Aqd\*(Aq.d
\&    17       {
\&    18         Parse::Eyapp::Node\->new(
\&    19           \*(AqDES(TERMINAL)\*(Aq, 
\&    20            sub { 
\&    21              my ($DES, $TERMINAL) = @_;
\&    22              $TERMINAL\->{attr} = $d;
\&    23            }
\&    24         );
\&    25       }
\&    26  ;
\&    27  
\&    28  %%
\&    29  
\&    30  sub Run {
\&    31    my ($self) = shift;
\&    32    return $self\->YYParse( yybuildingtree => 1 );
\&    33  }
.Ve
.PP
To know more about \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
see the section for \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
.PP
When the former eyapp program is executed produces the following
output:
.PP
.Vb 10
\&  $ eyapp ListWithRefs2.eyp; use_listwithrefs2.pl
\&  ccdd
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq, \*(Aqtoken\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST_1\*(Aq );
\&  _PLUS_LIST_1(TERMINAL,TERMINAL)
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqDES\*(Aq ),
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqd\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqDES\*(Aq )
\&    ]
\&  }, \*(Aq_PLUS_LIST_2\*(Aq );
\&  _PLUS_LIST_2(DES(TERMINAL),DES(TERMINAL))
.Ve
.ie n .SS "The ""*"" operator"
.el .SS "The \f(CW*\fP operator"
.IX Subsection "The * operator"
Any list operator operates on the factor to its left.
A list in the right hand side of a production rule
counts as a single symbol.
.PP
Both operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`+\*(C'\fR can be used 
with the format
\&\f(CW\*(C`X <* Separator>\*(C'\fR.
In such case they describe lists of \f(CW\*(C`X\*(C'\fRs separated by 
\&\f(CW\*(C`separator\*(C'\fR. See an example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-25 CsBetweenCommansAndD.eyp | cat \-n
\&   1  # CsBetweenCommansAndD.eyp
\&   2
\&   3  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&   4
\&   5  %{
\&   6  sub TERMINAL::info {
\&   7    $_[0]\->attr;
\&   8  }
\&   9  %}
\&  10  %tree
\&  11  %%
\&  12  S:
\&  13      (\*(Aqc\*(Aq <* \*(Aq,\*(Aq> \*(Aqd\*(Aq)*
\&  14        {
\&  15           print "\enNode\en";
\&  16           print $_[1]\->str."\en";
\&  17           print "\enChild 0\en";
\&  18           print $_[1]\->child(0)\->str."\en";
\&  19           print "\enChild 1\en";
\&  20           print $_[1]\->child(1)\->str."\en";
\&  21           $_[1]
\&  22        }
\&  23  ;
\&  24
\&  25  %%
.Ve
.PP
The rule
.PP
.Vb 1
\&                            S: (\*(Aqc\*(Aq <* \*(Aq,\*(Aq> \*(Aqd\*(Aq)*
.Ve
.PP
has only two items in its right hand side: the (separated by commas) list
of \f(CW\*(C`c\*(C'\fRs and the list of \f(CW\*(C`d\*(C'\fRs.  The production rule is equivalent to:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v CsBetweenCommansAndD.eyp
\&  pl@nereida:~/LEyapp/examples$ head \-11 CsBetweenCommansAndD.output | cat \-n
\&   1  Rules:
\&   2  \-\-\-\-\-\-
\&   3  0:      $start \-> S $end
\&   4  1:      STAR\-1 \-> STAR\-1 \*(Aq,\*(Aq \*(Aqc\*(Aq
\&   5  2:      STAR\-1 \-> \*(Aqc\*(Aq
\&   6  3:      STAR\-2 \-> STAR\-1
\&   7  4:      STAR\-2 \-> /* empty */
\&   8  5:      PAREN\-3 \-> STAR\-2 \*(Aqd\*(Aq
\&   9  6:      STAR\-4 \-> STAR\-4 PAREN\-3
\&  10  7:      STAR\-4 \-> /* empty */
\&  11  8:      S \-> STAR\-4
.Ve
.PP
The semantic action associated with \f(CW\*(C`*\*(C'\fR is to return 
a reference to a list with the attributes of the 
matching items.
.PP
When working \-as in the example \-
under a tree creation directive it returns
a node belonging to a class named \f(CW\*(C`_STAR_LIST_#number\*(C'\fR
whose children are the items in the list.
The \f(CW\*(C`#number\*(C'\fR is the ordinal number of the production rule
as it appears in the \f(CW\*(C`.output\*(C'\fR file. The attributes must be 
references or associated with semantic tokens to be included 
in the list. Notice \-in the execution of the former
example  that follows \-
how the node for \f(CW\*(C`PAREN\-3\*(C'\fR has been 
eliminated from the tree. Parenthesis nodes are \- generally \-
obviated:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples$ use_csbetweencommansandd.pl
\&  c,c,cd
\&
\&  Node
\&  _STAR_LIST_4(_STAR_LIST_1(TERMINAL[c],TERMINAL[c],TERMINAL[c]),TERMINAL[d])
\&
\&  Child 0
\&  _STAR_LIST_1(TERMINAL[c],TERMINAL[c],TERMINAL[c])
\&
\&  Child 1
\&  TERMINAL[d]
.Ve
.PP
Notice that the comma (since it is a syntactic token) has 
also been suppressed.
.SS "Giving Names to Lists"
.IX Subsection "Giving Names to Lists"
To set the name of the node associated with a list operator the
\&\f(CW%name\fR directive must precede the operator as in 
the following example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq1,27p\*(Aq CsBetweenCommansAndDWithNames.eyp | cat \-n
\&   1  # CsBetweenCommansAndDWithNames.eyp
\&   2
\&   3  %semantic token \*(Aqc\*(Aq \*(Aqd\*(Aq
\&   4
\&   5  %{
\&   6  sub TERMINAL::info {
\&   7    $_[0]\->attr;
\&   8  }
\&   9  %}
\&  10  %tree
\&  11  %%
\&  12  Start: S
\&  13  ;
\&  14  S:
\&  15      (\*(Aqc\*(Aq <%name Cs * \*(Aq,\*(Aq> \*(Aqd\*(Aq) %name Cs_and_d *
\&  16        {
\&  17           print "\enNode\en";
\&  18           print $_[1]\->str."\en";
\&  19           print "\enChild 0\en";
\&  20           print $_[1]\->child(0)\->str."\en";
\&  21           print "\enChild 1\en";
\&  22           print $_[1]\->child(1)\->str."\en";
\&  23           $_[1]
\&  24        }
\&  25  ;
\&  26
\&  27  %%
.Ve
.PP
The grammar describes the language of sequences
.PP
.Vb 1
\&                  c,...,cd c,...,cd c,...,cd ....
.Ve
.PP
The right hand side of the production has only one term which is a list, 
but the factor to which the star applies is itself a list. 
We are naming the term with the name \f(CW\*(C`Cs_and_d\*(C'\fR and the factor with 
the name \f(CW\*(C`Cs\*(C'\fR.
.PP
The execution shows the renamed nodes:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ use_csbetweencommansanddwithnames.pl
\&  c,c,c,cd
\&
\&  Node
\&  Cs_and_d(Cs(TERMINAL[c],TERMINAL[c],TERMINAL[c],TERMINAL[c]),TERMINAL[d])
\&
\&  Child 0
\&  Cs(TERMINAL[c],TERMINAL[c],TERMINAL[c],TERMINAL[c])
\&
\&  Child 1
\&  TERMINAL[d]
.Ve
.SS "Optionals"
.IX Subsection "Optionals"
The \f(CW\*(C`X?\*(C'\fR operator stands for the presence or omission
of \f(CW\*(C`X\*(C'\fR.
.PP
The grammar:
.PP
.Vb 12
\&  pl@nereida:~/LEyapp/examples$ head \-11 List5.yp | cat \-n
\&       1  %semantic token \*(Aqc\*(Aq
\&       2  %tree
\&       3  %%
\&       4  S: \*(Aqc\*(Aq \*(Aqc\*(Aq?
\&       5       {
\&       6         print $_[2]\->str."\en";
\&       7         print $_[2]\->child(0)\->attr."\en" if $_[2]\->children;
\&       8      }
\&       9  ;
\&      10
\&      11  %%
.Ve
.PP
is equivalent to:
.PP
.Vb 8
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v List5
\&  pl@nereida:~/LEyapp/examples$ head \-7 List5.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> S $end
\&  1:      OPTIONAL\-1 \-> \*(Aqc\*(Aq
\&  2:      OPTIONAL\-1 \-> /* empty */
\&  3:      S \-> \*(Aqc\*(Aq OPTIONAL\-1
.Ve
.PP
When \f(CW\*(C`yybuildingtree\*(C'\fR is false the associated attribute 
is a list that will be empty if \s-1CX\s0> does not show up.
.PP
Under the \f(CW%tree\fR directive the action creates an \f(CW\*(C`_OPTIONAL\*(C'\fR
node:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ use_list5.pl
\&  cc
\&  _OPTIONAL_1(TERMINAL)
\&  c
\&  pl@nereida:~/LEyapp/examples$ use_list5.pl
\&  c
\&  _OPTIONAL_1
.Ve
.SS "Parenthesis"
.IX Subsection "Parenthesis"
Any substring on the right hand side of a production rule can be grouped
using a parenthesis. The introduction of a parenthesis implies the introduction
of an additional syntactic variable whose only production 
is the sequence of symbols between the parenthesis. Thus the grammar:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ head \-6 Parenthesis.eyp | cat \-n
\&     1  %%
\&     2  S:
\&     3        (\*(Aqa\*(Aq S ) \*(Aqb\*(Aq  { shift; [ @_ ] }
\&     4      | \*(Aqc\*(Aq
\&     5  ;
\&     6  %%
.Ve
.PP
is equivalent to:
.PP
.Vb 7
\&  pl@nereida:~/LEyapp/examples$ eyapp \-v Parenthesis.eyp; head \-6 Parenthesis.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> S $end
\&  1:      PAREN\-1 \-> \*(Aqa\*(Aq S
\&  2:      S \-> PAREN\-1 \*(Aqb\*(Aq
\&  3:      S \-> \*(Aqc\*(Aq
.Ve
.PP
By default the semantic rule associated with a parenthesis
returns an anonymous list with the attributes of the symbols 
between the parenthesis:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n use_parenthesis.pl
\&       1  #!/usr/bin/perl \-w
\&       2  use Parenthesis;
\&       3  use Data::Dumper;
\&       4
\&       5  $Data::Dumper::Indent = 1;
\&       6  $parser = Parenthesis\->new();
\&       7  print Dumper($parser\->Run);
\&  pl@nereida:~/LEyapp/examples$ use_parenthesis.pl
\&  acb
\&  $VAR1 = [
\&    [ \*(Aqa\*(Aq, \*(Aqc\*(Aq ], \*(Aqb\*(Aq
\&  ];
\&  pl@nereida:~/LEyapp/examples$ use_parenthesis.pl
\&  aacbb
\&  $VAR1 = [
\&    [
\&      \*(Aqa\*(Aq,
\&      [ [ \*(Aqa\*(Aq, \*(Aqc\*(Aq ], \*(Aqb\*(Aq ]
\&    ],
\&    \*(Aqb\*(Aq
\&  ];
.Ve
.PP
when working under a tree directive or when the attribute
\&\f(CW\*(C`buildingtree\*(C'\fR is set via the \f(CW\*(C`YYBuildingtree\*(C'\fR method
the semantic action returns a node with children the attributes
of the symbols between parenthesis. As usual attributes
which aren't references will be skipped from the list of children.
See an example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-23 List2.yp | cat \-n
\&   1  %{
\&   2  use Data::Dumper;
\&   3  %}
\&   4  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq \*(Aqc\*(Aq
\&   5  %tree
\&   6  %%
\&   7  S:
\&   8        (%name AS \*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&   9          {
\&  10            print "S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\en";
\&  11            print "Attribute of the first symbol:\en".Dumper($_[1]);
\&  12            print "Attribute of the second symbol: $_[2]\en";
\&  13            $_[0]\->YYBuildAST(@_[1..$#_]);
\&  14          }
\&  15      | \*(Aqc\*(Aq
\&  16          {
\&  17            print "S \-> \*(Aqc\*(Aq\en";
\&  18            my $r = Parse::Eyapp::Node\->new(qw(C(TERMINAL)), sub { $_[1]\->attr(\*(Aqc\*(Aq) }) ;
\&  19            print Dumper($r);
\&  20            $r;
\&  21          }
\&  22  ;
\&  23  %%
.Ve
.PP
The example shows (line 8)
how to rename a \f(CW\*(C`_PAREN\*(C'\fR node. The \f(CW\*(C`%name CLASSNAME\*(C'\fR goes
after the opening parenthesis.
.PP
The call to \f(CW\*(C`YYBuildAST\*(C'\fR at line 13
with argumetns the attributes of the symbols on the right hand side
returns the node describing the current production rule.
Notice that line 13 can be rewritten as:
.PP
.Vb 1
\&                    goto &Parse::Eyapp::Driver::YYBuildAST;
.Ve
.PP
At line 18 the node for the rule is explicitly created
using \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR. The handler passed as second argument
is responsible for setting the value of the atribute \f(CW\*(C`attr\*(C'\fR
of the just created \f(CW\*(C`TERMINAL\*(C'\fR node.
.PP
Let us see an execution:
.PP
.Vb 11
\&  pl@nereida:~/LEyapp/examples$ use_list2.pl
\&  aacbb
\&  S \-> \*(Aqc\*(Aq
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( {
\&        \*(Aqchildren\*(Aq => [],
\&        \*(Aqattr\*(Aq => \*(Aqc\*(Aq
\&      }, \*(AqTERMINAL\*(Aq )
\&    ]
\&  }, \*(AqC\*(Aq );
.Ve
.PP
the first reduction occurs by the non recursive rule. The execution
shows the tree built by the call to
\&\f(CW\*(C`Parse::Eyapp::Node\-\*(C'\fRnew>
at line 18.
.PP
The execution continues with the reduction or reverse derivation by the rule
\&\f(CW\*(C`S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\*(C'\fR. The action at lines 9\-14
dumps the attribute associated with \f(CW\*(C`(\*(Aqa\*(Aq S)\*(C'\fR
\&\- or, in other words,  the attribute associated with the variable 
\&\f(CW\*(C`PAREN\-1\*(C'\fR. It also dumps the attribute of \f(CW\*(Aqb\*(Aq\fR:
.PP
.Vb 11
\&  S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&  Attribute of the first symbol:
\&  $VAR1 = bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&        bless( { \*(Aqchildren\*(Aq => [ bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&       ]
\&     }, \*(AqC\*(Aq )
\&    ]
\&  }, \*(AqAS\*(Aq );
\&Attribute of the second symbol: b
.Ve
.PP
The last reduction shown is by the rule:
\&\f(CW\*(C`S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq\*(C'\fR:
.PP
.Vb 10
\&  S \-> (\*(Aqa\*(Aq S )\*(Aqb\*(Aq
\&  Attribute of the first symbol:
\&  $VAR1 = bless( {
\&    \*(Aqchildren\*(Aq => [
\&      bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&      bless( {
\&        \*(Aqchildren\*(Aq => [
\&          bless( {
\&            \*(Aqchildren\*(Aq => [
\&              bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqa\*(Aq, \*(Aqtoken\*(Aq => \*(Aqa\*(Aq }, \*(AqTERMINAL\*(Aq ),
\&              bless( {
\&                \*(Aqchildren\*(Aq => [
\&                  bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqc\*(Aq }, \*(AqTERMINAL\*(Aq )
\&                ]
\&              }, \*(AqC\*(Aq )
\&            ]
\&          }, \*(AqAS\*(Aq ),
\&          bless( { \*(Aqchildren\*(Aq => [], \*(Aqattr\*(Aq => \*(Aqb\*(Aq, \*(Aqtoken\*(Aq => \*(Aqb\*(Aq }, \*(AqTERMINAL\*(Aq )
\&        ]
\&      }, \*(AqS_2\*(Aq )
\&    ]
\&  }, \*(AqAS\*(Aq );
\&  Attribute of the second symbol: b
.Ve
.SS "Actions Inside Parenthesis"
.IX Subsection "Actions Inside Parenthesis"
Though is a practice to avoid, since it clutters
the code, it is certainly permitted to introduce
actions between the parenthesis, as in the example below:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ head \-16 ListAndAction.eyp | cat \-n
\&   1  # ListAndAction.eyp
\&   2  %{
\&   3  my $num = 0;
\&   4  %}
\&   5
\&   6  %%
\&   7  S:      \*(Aqc\*(Aq
\&   8              {
\&   9                print "S \-> c\en"
\&  10              }
\&  11      |    (\*(Aqa\*(Aq {$num++; print "Seen <$num> \*(Aqa\*(Aqs\en"; $_[1] }) S \*(Aqb\*(Aq
\&  12              {
\&  13                print "S \-> (a ) S b\en"
\&  14              }
\&  15  ;
\&  16  %%
.Ve
.PP
This is the output when executing this program with input \f(CW\*(C`aaacbbb\*(C'\fR:
.PP
.Vb 9
\&  pl@nereida:~/LEyapp/examples$ use_listandaction.pl
\&  aaacbbb
\&  Seen <1> \*(Aqa\*(Aqs
\&  Seen <2> \*(Aqa\*(Aqs
\&  Seen <3> \*(Aqa\*(Aqs
\&  S \-> c
\&  S \-> (a ) S b
\&  S \-> (a ) S b
\&  S \-> (a ) S b
.Ve
.SH "NAMES FOR ATTRIBUTES"
.IX Header "NAMES FOR ATTRIBUTES"
Attributes can be referenced by meaningful names using the \fIdot notation\fR
instead of using the classic error-prone positional approach:
.PP
.Vb 5
\&                        rhs:  rhseltwithid *
\&                        rhseltwithid : 
\&                              rhselt \*(Aq.\*(Aq IDENT 
\&                            | \*(Aq$\*(Aq rhselt  
\&                            | rhselt
.Ve
.PP
for example:
.PP
.Vb 1
\&              exp : exp.left \*(Aq\-\*(Aq exp.right  { $left \- $right }
.Ve
.PP
By qualifying the first appearance of the syntactic variable \f(CW\*(C`exp\*(C'\fR
with the notation \f(CW\*(C`exp.left\*(C'\fR we can later refer inside the actions
to the associated attribute using the lexical variable
\&\f(CW$left\fR.
.PP
The \fIdollar notation\fR \f(CW$A\fR can be used as an abbreviation
of \f(CW\*(C`A.A\*(C'\fR.
.SH "DEFAULT ACTIONS"
.IX Header "DEFAULT ACTIONS"
When no action is specified both \f(CW\*(C`yapp\*(C'\fR and \f(CW\*(C`eyapp\*(C'\fR
implicitly insert the semantic action \f(CW\*(C`{ $_[1] }\*(C'\fR. 
In \f(CW\*(C`Parse::Eyapp\*(C'\fR you can modify such behavior using the \f(CW\*(C`%defaultaction { Perl code }\*(C'\fR
directive. The \f(CW\*(C`{ Perl code }\*(C'\fR clause that follows the \f(CW%defaultaction\fR
directive is
executed when reducing by any production for which no explicit
action was specified.
.SS "An Example of Default Action: Translator from Infix to Postfix"
.IX Subsection "An Example of Default Action: Translator from Infix to Postfix"
See an example that translates an infix expression
like \f(CW\*(C`a=b*\-3\*(C'\fR into a postfix expression like \f(CW\*(C`a b 3 NEG * = \*(C'\fR:
.PP
.Vb 5
\& # File Postfix.eyp (See the examples/ directory)
\& %right  \*(Aq=\*(Aq
\& %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\& %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\& %left   NEG
\&
\& %defaultaction { return  "$left $right $op"; }
\&
\& %%
\& line: $exp  { print "$exp\en" }
\& ;
\&
\& exp:        $NUM  { $NUM }
\&         |   $VAR  { $VAR }
\&         |   VAR.left \*(Aq=\*(Aq.op exp.right
\&         |   exp.left \*(Aq+\*(Aq.op exp.right
\&         |   exp.left \*(Aq\-\*(Aq.op exp.right
\&         |   exp.left \*(Aq*\*(Aq.op exp.right
\&         |   exp.left \*(Aq/\*(Aq.op exp.right
\&         |   \*(Aq\-\*(Aq $exp %prec NEG { "$exp NEG" }
\&         |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq { $exp }
\& ;
\&
\& %%
\&
\& # Support subroutines as in the Synopsis example
\& ...
.Ve
.PP
The file containing the \f(CW\*(C`Eyapp\*(C'\fR program must be compiled with \f(CW\*(C`eyapp\*(C'\fR:
.PP
.Vb 1
\& nereida:~/src/perl/YappWithDefaultAction/examples> eyapp Postfix.eyp
.Ve
.PP
Next, you have to write a client program:
.PP
.Vb 7
\& nereida:~/src/perl/YappWithDefaultAction/examples> cat \-n usepostfix.pl
\&      1  #!/usr/bin/perl \-w
\&      2  use strict;
\&      3  use Postfix;
\&      4
\&      5  my $parser = new Postfix();
\&      6  $parser\->Run;
.Ve
.PP
Now we can run the client program:
.PP
.Vb 3
\& nereida:~/src/perl/YappWithDefaultAction/examples> usepostfix.pl
\& Write an expression: \-(2*a\-b*\-3)
\& 2 a * b 3 NEG * \- NEG
.Ve
.ie n .SS "Default Actions, %name and ""YYName"""
.el .SS "Default Actions, \f(CW%name\fP and \f(CWYYName\fP"
.IX Subsection "Default Actions, %name and YYName"
In \f(CW\*(C`eyapp\*(C'\fR each production rule has a name.
The name of a rule can be explicitly given by the programmer 
using the \f(CW%name\fR directive. For example, in the piece of code
that follows the name \f(CW\*(C`ASSIGN\*(C'\fR is given to the rule \f(CW\*(C`exp: VAR \*(Aq=\*(Aq exp\*(C'\fR.
.PP
When no explicit name is given the rule has an implicit name.
The implicit name of a rule is shaped by concatenating
the name of the syntactic variable on its left, an underscore 
and the ordinal number of the production rule \f(CW\*(C`Lhs_#\*(C'\fR
as it appears in the \f(CW\*(C`.output\*(C'\fR file.
Avoid giving names matching such pattern to production rules.
The patterns
\&\f(CW\*(C`/${lhs}_\ed+$/\*(C'\fR where \f(CW\*(C`${lhs}\*(C'\fR is the name of the syntactic variable
are reserved for internal use by \f(CW\*(C`eyapp\*(C'\fR.
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n Lhs.eyp
\&   1  # Lhs.eyp
\&   2
\&   3  %right  \*(Aq=\*(Aq
\&   4  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&   5  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&   6  %left   NEG
\&   7
\&   8  %defaultaction {
\&   9    my $self = shift;
\&  10    my $name = $self\->YYName();
\&  11    bless { children => [ grep {ref($_)} @_] }, $name;
\&  12  }
\&  13
\&  14  %%
\&  15  input:
\&  16              /* empty */
\&  17                { [] }
\&  18          |   input line
\&  19                {
\&  20                  push @{$_[1]}, $_[2] if defined($_[2]);
\&  21                  $_[1]
\&  22                }
\&  23  ;
\&  24
\&  25  line:     \*(Aq\en\*(Aq       { }
\&  26          | exp \*(Aq\en\*(Aq   {  $_[1] }
\&  27  ;
\&  28
\&  29  exp:
\&  30              NUM   { $_[1] }
\&  31          |   VAR   { $_[1] }
\&  32          |   %name ASSIGN
\&  33              VAR \*(Aq=\*(Aq exp
\&  34          |   %name PLUS
\&  35              exp \*(Aq+\*(Aq exp
\&  36          |   %name MINUS
\&  37              exp \*(Aq\-\*(Aq exp
\&  38          |   %name TIMES
\&  39              exp \*(Aq*\*(Aq exp
\&  40          |   %name DIV
\&  41              exp \*(Aq/\*(Aq exp
\&  42          |   %name UMINUS
\&  43              \*(Aq\-\*(Aq exp %prec NEG
\&  44          |  \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&  45  ;
.Ve
.PP
Inside a semantic action
the name of the current rule can be recovered 
using the method \f(CW\*(C`YYName\*(C'\fR of the parser object.
.PP
The default action (lines 8\-12) computes as attribute of the left
hand side a reference to an object blessed in the name of the rule.
The object has an attribute \f(CW\*(C`children\*(C'\fR which is a reference 
to the list of children of the node.
The call to \f(CW\*(C`grep\*(C'\fR
.PP
.Vb 1
\&  11    bless { children => [ grep {ref($_)} @_] }, $name;
.Ve
.PP
excludes children that aren't references. Notice that the lexical analyzer 
only returns references for the \f(CW\*(C`NUM\*(C'\fR and \f(CW\*(C`VAR\*(C'\fR terminals:
.PP
.Vb 10
\&  59  sub _Lexer {
\&  60      my($parser)=shift;
\&  61
\&  62      for ($parser\->YYData\->{INPUT}) {
\&  63          s/^[ \et]+//;
\&  64          return(\*(Aq\*(Aq,undef) unless $_;
\&  65          s/^([0\-9]+(?:\e.[0\-9]+)?)//
\&  66                  and return(\*(AqNUM\*(Aq, bless { attr => $1}, \*(AqNUM\*(Aq);
\&  67          s/^([A\-Za\-z][A\-Za\-z0\-9_]*)//
\&  68                  and return(\*(AqVAR\*(Aq,bless {attr => $1}, \*(AqVAR\*(Aq);
\&  69          s/^(.)//s
\&  70                  and return($1, $1);
\&  71      }
\&  72      return(\*(Aq\*(Aq,undef);
\&  73  }
.Ve
.PP
follows the client program:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n uselhs.pl
\&       1  #!/usr/bin/perl \-w
\&       2  use Lhs;
\&       3  use Data::Dumper;
\&       4
\&       5  $parser = new Lhs();
\&       6  my $tree = $parser\->Run;
\&       7  $Data::Dumper::Indent = 1;
\&       8  if (defined($tree)) { print Dumper($tree); }
\&       9  else { print "Cadena no va\*'lida\en"; }
.Ve
.PP
When executed with input \f(CW\*(C`a=(2+3)*b\*(C'\fR the parser produces
the following tree:
.PP
.Vb 1
\&  ASSIGN(TIMES(PLUS(NUM[2],NUM[3]), VAR[b]))
.Ve
.PP
See the result of an execution:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ uselhs.pl
\&  a=(2+3)*b
\&  $VAR1 = [
\&    bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( { \*(Aqattr\*(Aq => \*(Aqa\*(Aq }, \*(AqVAR\*(Aq ),
\&        bless( {
\&          \*(Aqchildren\*(Aq => [
\&            bless( {
\&              \*(Aqchildren\*(Aq => [
\&                bless( { \*(Aqattr\*(Aq => \*(Aq2\*(Aq }, \*(AqNUM\*(Aq ),
\&                bless( { \*(Aqattr\*(Aq => \*(Aq3\*(Aq }, \*(AqNUM\*(Aq )
\&              ]
\&            }, \*(AqPLUS\*(Aq ),
\&            bless( { \*(Aqattr\*(Aq => \*(Aqb\*(Aq }, \*(AqVAR\*(Aq )
\&          ]
\&        }, \*(AqTIMES\*(Aq )
\&      ]
\&    }, \*(AqASSIGN\*(Aq )
\&  ];
.Ve
.PP
The name of a production rule can be changed at execution time.
See the following example:
.PP
.Vb 10
\&  $ sed \-n \*(Aq29,50p\*(Aq YYNameDynamic.eyp | cat \-n
\&     1  exp:
\&     2              NUM   { $_[1] }
\&     3          |   VAR   { $_[1] }
\&     4          |   %name ASSIGN
\&     5              VAR \*(Aq=\*(Aq exp
\&     6          |   %name PLUS
\&     7              exp \*(Aq+\*(Aq exp
\&     8          |   %name MINUS
\&     9              exp \*(Aq\-\*(Aq exp
\&    10                {
\&    11                  my $self = shift;
\&    12                  $self\->YYName(\*(AqSUBTRACT\*(Aq); # rename it
\&    13                  $self\->YYBuildAST(@_); # build the node
\&    14                }
\&    15          |   %name TIMES
\&    16              exp \*(Aq*\*(Aq exp
\&    17          |   %name DIV
\&    18              exp \*(Aq/\*(Aq exp
\&    19          |   %name UMINUS
\&    20              \*(Aq\-\*(Aq exp %prec NEG
\&    21          |  \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    22  ;
.Ve
.PP
When the client program is executed we can see the presence
of the \f(CW\*(C`SUBTRACT\*(C'\fR nodes:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ useyynamedynamic.pl
\&  2\-b
\&  $VAR1 = [
\&    bless( {
\&      \*(Aqchildren\*(Aq => [
\&        bless( {
\&          \*(Aqattr\*(Aq => \*(Aq2\*(Aq
\&        }, \*(AqNUM\*(Aq ),
\&        bless( {
\&          \*(Aqattr\*(Aq => \*(Aqb\*(Aq
\&        }, \*(AqVAR\*(Aq )
\&      ]
\&    }, \*(AqSUBTRACT\*(Aq )
\&  ];
.Ve
.SH "GRAMMAR REUSE"
.IX Header "GRAMMAR REUSE"
.SS "Reusing Grammars Using Inheritance"
.IX Subsection "Reusing Grammars Using Inheritance"
An method to reuse a grammar is via inheritance. 
The client inherits the generated parser module and expands it 
with methods that inherit or overwrite the actions.
Here is an example. Initially we have this Eyapp grammar:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n NoacInh.eyp
\&     1  %left   \*(Aq+\*(Aq
\&     2  %left   \*(Aq*\*(Aq
\&     3
\&     4  %defaultaction {
\&     5    my $self = shift;
\&     6
\&     7    my $action = $self\->YYName;
\&     8
\&     9    $self\->$action(@_);
\&    10  }
\&    11
\&    12  %%
\&    13  exp:        %name NUM
\&    14                NUM
\&    15          |   %name PLUS
\&    16                exp \*(Aq+\*(Aq exp
\&    17          |   %name TIMES
\&    18                exp \*(Aq*\*(Aq exp
\&    19          |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    20                { $_[2] }
\&    21  ;
\&    22
\&    23  %%
\&    24
\&    25  sub _Error {
\&    26    my($token)=$_[0]\->YYCurval;
\&    27    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    28    my @expected = $_[0]\->YYExpect();
\&    29
\&    30    local $" = \*(Aq, \*(Aq;
\&    31    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&    32  }
\&    33
\&    34
\&    35  my $x = \*(Aq\*(Aq;
\&    36
\&    37  sub _Lexer {
\&    38    my($parser)=shift;
\&    39
\&    40    for ($x) {
\&    41      s/^\es+//;
\&    42      $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    43
\&    44      s/^([0\-9]+(?:\e.[0\-9]+)?)//   and return(\*(AqNUM\*(Aq,$1);
\&    45      s/^([A\-Za\-z][A\-Za\-z0\-9_]*)// and return(\*(AqVAR\*(Aq,$1);
\&    46      s/^(.)//s                    and return($1,$1);
\&    47    }
\&    48  }
\&    49
\&    50  sub Run {
\&    51    my($self)=shift;
\&    52    $x = shift;
\&    53    my $debug = shift;
\&    54
\&    55    $self\->YYParse(
\&    56      yylex => \e&_Lexer,
\&    57      yyerror => \e&_Error,
\&    58      yydebug => $debug,
\&    59    );
\&    60  }
.Ve
.PP
The following program defines two classes: \f(CW\*(C`CalcActions\*(C'\fR
that implements the actions for the calculator
and package \f(CW\*(C`PostActions\*(C'\fR that implements the actions
for the infix to postfix translation. This way we have an 
example that reuses the former grammar twice:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n icalcu_and_ipost.pl
\&     1  #!/usr/bin/perl \-w
\&     2  package CalcActions;
\&     3  use strict;
\&     4  use base qw{NoacInh};
\&     5
\&     6  sub NUM {
\&     7    return $_[1];
\&     8  }
\&     9
\&    10  sub PLUS {
\&    11    $_[1]+$_[3];
\&    12  }
\&    13
\&    14  sub TIMES {
\&    15    $_[1]*$_[3];
\&    16  }
\&    17
\&    18  package PostActions;
\&    19  use strict;
\&    20  use base qw{NoacInh};
\&    21
\&    22  sub NUM {
\&    23    return $_[1];
\&    24  }
\&    25
\&    26  sub PLUS {
\&    27    "$_[1] $_[3] +";
\&    28  }
\&    29
\&    30  sub TIMES {
\&    31    "$_[1] $_[3] *";
\&    32  }
\&    33
\&    34  package main;
\&    35  use strict;
\&    36
\&    37  my $calcparser = CalcActions\->new();
\&    38  print "Write an expression: ";
\&    39  my $x = <STDIN>;
\&    40  my $e = $calcparser\->Run($x);
\&    41
\&    42  print "$e\en";
\&    43
\&    44  my $postparser = PostActions\->new();
\&    45  my $p = $postparser\->Run($x);
\&    46
\&    47  print "$p\en";
.Ve
.PP
The subroutine used as default action in \f(CW\*(C`NoacInh.eyp\*(C'\fR is so useful 
that is packed as the Parse::Eyapp::Driver method 
\&\f(CW\*(C`YYDelegateaction\*(C'\fR.
.PP
See files \f(CW\*(C`examples/recycle/NoacYYDelegateaction.eyp\*(C'\fR
and \f(CW\*(C`examples/recycle/icalcu_and_ipost_yydel.pl\*(C'\fR
for an example of use of \f(CW\*(C`YYDelegateaction\*(C'\fR.
.SS "Reusing Grammars by Dynamic Substitution of Semantic Actions"
.IX Subsection "Reusing Grammars by Dynamic Substitution of Semantic Actions"
The methods \f(CW\*(C`YYSetaction\*(C'\fR and \f(CW\*(C`YYAction\*(C'\fR of the parser object provide a way
to selectively substitute some actions of a given grammar.
Let us consider once more a postfix to infix translator:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n PostfixWithActions.eyp
\&     1  # File PostfixWithActions.eyp
\&     2  %right  \*(Aq=\*(Aq
\&     3  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     4  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     5  %left   NEG
\&     6
\&     7  %%
\&     8  line: $exp  { print "$exp\en" }
\&     9  ;
\&    10
\&    11  exp:        $NUM
\&    12                  { $NUM }
\&    13          |   $VAR
\&    14                  { $VAR }
\&    15          |   %name ASSIGN
\&    16                VAR.left \*(Aq=\*(Aqexp.right
\&    17                  { "$_[3] &$_[1] ASSIGN"; }
\&    18          |   %name PLUS
\&    19                exp.left \*(Aq+\*(Aqexp.right
\&    20                  { "$_[1] $_[3] PLUS"; }
\&    21          |   %name MINUS
\&    22                exp.left \*(Aq\-\*(Aqexp.right
\&    23                  { "$_[1] $_[3] MINUS"; }
\&    24          |   %name TIMES
\&    25                exp.left \*(Aq*\*(Aqexp.right
\&    26                  { "$_[1] $_[3] TIMES"; }
\&    27          |   %name DIV
\&    28                exp.left \*(Aq/\*(Aqexp.right
\&    29                  { "$_[1] $_[3] DIV"; }
\&    30          |   %name NEG \*(Aq\-\*(Aq $exp %prec NEG
\&    31                  { "$exp NEG" }
\&    32          |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq
\&    33                  { $exp }
\&    34  ;
\&    35
\&    36  %%
\&    37
\&    38  sub _Error {
\&    39    my($token)=$_[0]\->YYCurval;
\&    40    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    41    my @expected = $_[0]\->YYExpect();
\&    42
\&    43    local $" = \*(Aq, \*(Aq;
\&    44    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&    45  }
\&    46
\&    47  my $x;
\&    48
\&    49  sub _Lexer {
\&    50    my($parser)=shift;
\&    51
\&    52    for ($x) {
\&    53      s/^\es+//;
\&    54      $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    55
\&    56      s/^([0\-9]+(?:\e.[0\-9]+)?)//   and return(\*(AqNUM\*(Aq,$1);
\&    57      s/^([A\-Za\-z][A\-Za\-z0\-9_]*)// and return(\*(AqVAR\*(Aq,$1);
\&    58      s/^(.)//s                    and return($1,$1);
\&    59    }
\&    60  }
\&    61
\&    62  sub Run {
\&    63    my($self)=shift;
\&    64    $x = shift;
\&    65    $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&    66      #yydebug => 0xFF
\&    67    );
\&    68  }
.Ve
.PP
The program \f(CW\*(C`rewritepostfixwithactions.pl\*(C'\fR uses the former grammar
to translate infix expressions to postfix expressions.
It also implements a calculator reusing the grammar in
\&\f(CW\*(C`PostfixWithActions.eyp\*(C'\fR. It does so using
the \f(CW\*(C`YYSetaction\*(C'\fR method.
The semantic actions for the productions named
.IP "\(bu" 2
\&\s-1ASSIGN\s0
.IP "\(bu" 2
\&\s-1PLUS\s0
.IP "\(bu" 2
\&\s-1TIMES\s0
.IP "\(bu" 2
\&\s-1DIV\s0
.IP "\(bu" 2
\&\s-1NEG\s0
.PP
are selectively substituted by the appropriate actions, while the other
semantic actions remain unchanged:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ cat \-n rewritepostfixwithactions.pl
\&     1  #!/usr/bin/perl
\&     2  use warnings;
\&     3  use PostfixWithActions;
\&     4
\&     5  my $debug = shift || 0;
\&     6  my $pparser = PostfixWithActions\->new();
\&     7  print "Write an expression: ";
\&     8  my $x = <STDIN>;
\&     9
\&    10  # First, trasnlate to postfix ...
\&    11  $pparser\->Run($x, $debug);
\&    12
\&    13  # And then selectively substitute
\&    14  # some semantic actions
\&    15  # to obtain an infix calculator ...
\&    16  my %s;            # symbol table
\&    17  $pparser\->YYSetaction(
\&    18    ASSIGN => sub { $s{$_[1]} = $_[3] },
\&    19    PLUS   => sub { $_[1] + $_[3] },
\&    20    TIMES  => sub { $_[1] * $_[3] },
\&    21    DIV    => sub { $_[1] / $_[3] },
\&    22    NEG    => sub { \-$_[2] },
\&    23  );
\&    24
\&    25  $pparser\->Run($x, $debug);
.Ve
.PP
When running this program the output is:
.PP
.Vb 8
\&  examples/recycle$ ./rewritepostfixwithactions.pl
\&  Write an expression: 2*3+4
\&  2 3 TIMES 4 PLUS
\&  10
\&  examples/recycle$ rewritepostfixwithactions.pl
\&  Write an expression: a = 2*(b = 3+5)
\&  2 3 5 PLUS &b ASSIGN TIMES &a ASSIGN
\&  16
.Ve
.ie n .SH "ABSTRACT SYNTAX TREES: %tree AND %name"
.el .SH "ABSTRACT SYNTAX TREES: \f(CW%tree\fP AND \f(CW%name\fP"
.IX Header "ABSTRACT SYNTAX TREES: %tree AND %name"
.ie n .SS "%tree Default Names"
.el .SS "\f(CW%tree\fP Default Names"
.IX Subsection "%tree Default Names"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR facilitates the construction of concrete syntax trees and 
abstract syntax trees (abbreviated \s-1AST\s0 from now on) through the \f(CW%tree\fR
directive. Actually, the \f(CW%tree\fR directive is equivalent to a call
to the \f(CW\*(C`YYBuildAST\*(C'\fR method of the parser object.
.PP
Any production production rule \f(CW\*(C`A\->XYZ\*(C'\fR 
can be named using a directive \f(CW\*(C`%name someclass\*(C'\fR.
.PP
When reducing by a production rule \f(CW\*(C`A\->XYZ\*(C'\fR 
the \f(CW%tree\fR directive (i.e., the \f(CW\*(C`YYBuildAST\*(C'\fR method) 
builds an anonymous hash blessed in \f(CW\*(C`someclass\*(C'\fR.
The hash has an attribute \f(CW\*(C`children\*(C'\fR containing the references
to the \s-1AST\s0 trees associated with the symbols in the right hand
side \f(CW\*(C`X\*(C'\fR, C>Y>, etc.
.PP
If no explicit name was given to the production rule,
\&\f(CW\*(C`YYBuildAST\*(C'\fR blesses the node in the class name resulting 
from the concatenation
of the left hand side and the production number. The production number
is the ordinal number of the production as they appear in the associated 
\&\f(CW\*(C`.output\*(C'\fR file (see option \f(CW\*(C`\-v\*(C'\fR of eyapp). For example,
given the grammar:
.PP
.Vb 7
\&  pl@europa:~/LEyapp/examples/eyapplanguageref$ sed \-ne \*(Aq8,27p\*(Aq treewithoutnames.pl
\&  my $grammar = q{
\&    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    %tree           # Let us build an abstract syntax tree ...
\&
\&    %%
\&    line: exp <+ \*(Aq;\*(Aq>  { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    ;
\&
\&    exp:
\&         NUM           |   VAR       | VAR \*(Aq=\*(Aq exp
\&      | exp \*(Aq+\*(Aq exp    | exp \*(Aq\-\*(Aq exp |  exp \*(Aq*\*(Aq exp
\&      | exp \*(Aq/\*(Aq exp
\&      | \*(Aq\-\*(Aq exp %prec NEG
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    ;
\&
\&    %%
.Ve
.PP
The tree produced by the parser when feed with input \f(CW\*(C`a=2*b\*(C'\fR
is:
.PP
.Vb 1
\&  pl@europa:~/LEyapp/examples/eyapplanguageref$ ./treewithoutnames.pl
\&
\&  ************
\&  _PLUS_LIST(exp_6(TERMINAL[a],exp_9(exp_4(TERMINAL[2]),exp_5(TERMINAL[b]))))
\&  ************
.Ve
.PP
If we want to see the correspondence between names and rules we can generate and
check the corresponding file \f(CW\*(C`.output\*(C'\fR setting the \f(CW\*(C`outputfile\*(C'\fR
of \f(CW\*(C`Parse::Eyapp\*(C'\fR:
.PP
.Vb 6
\&  Parse::Eyapp\->new_grammar( # Create the parser package/class
\&    input=>$grammar,
\&    classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&    firstline=>9,      # String $grammar starts at line 9 (for error diagnostics)
\&    outputfile=>\*(Aqtreewithoutnames\*(Aq
\&  );
.Ve
.PP
The grammar with the expanded rules appears in the \f(CW\*(C`.output\*(C'\fR file:
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq28,42p\*(Aq treewithoutnames.output
\&  Rules:
\&  \-\-\-\-\-\-
\&  0:      $start \-> line $end
\&  1:      PLUS\-1 \-> PLUS\-1 \*(Aq;\*(Aq exp
\&  2:      PLUS\-1 \-> exp
\&  3:      line \-> PLUS\-1
\&  4:      exp \-> NUM
\&  5:      exp \-> VAR
\&  6:      exp \-> VAR \*(Aq=\*(Aq exp
\&  7:      exp \-> exp \*(Aq+\*(Aq exp
\&  8:      exp \-> exp \*(Aq\-\*(Aq exp
\&  9:      exp \-> exp \*(Aq*\*(Aq exp
\&  10:     exp \-> exp \*(Aq/\*(Aq exp
\&  11:     exp \-> \*(Aq\-\*(Aq exp
\&  12:     exp \-> \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.PP
We can see now that the node \f(CW\*(C`exp_9\*(C'\fR corresponds to the production \f(CW\*(C`exp \-> exp \*(Aq*\*(Aq exp\*(C'\fR.
Observe also that the Eyapp production:
.PP
.Vb 2
\&                                line: exp <+ \*(Aq;\*(Aq>
\&actually produces the productions:
\&
\&                        1:      PLUS\-1 \-> PLUS\-1 \*(Aq;\*(Aq exp
\&                        2:      PLUS\-1 \-> exp
.Ve
.PP
and that the name of the class associated with the non empty list is \f(CW\*(C`_PLUS_LIST\*(C'\fR.
.ie n .SS "%tree Giving Explicit Names"
.el .SS "\f(CW%tree\fP Giving Explicit Names"
.IX Subsection "%tree Giving Explicit Names"
A production rule can be \fInamed\fR using the \f(CW\*(C`%name IDENTIFIER\*(C'\fR directive.  For
each production rule a namespace/package is created. \fIThe\fR \f(CW\*(C`IDENTIFIER\*(C'\fR 
\&\fIis the name of the associated package\fR.  Therefore, by modifying the former
grammar with additional \f(CW%name\fR directives:
.PP
.Vb 7
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ sed \-ne \*(Aq8,26p\*(Aq treewithnames.pl
\&  my $grammar = q{
\&    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    %tree           # Let us build an abstract syntax tree ...
\&
\&    %%
\&    line: exp <%name EXPS + \*(Aq;\*(Aq>  { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    ;
\&
\&    exp:
\&        %name NUM    NUM           | %name VAR   VAR         | %name ASSIGN VAR \*(Aq=\*(Aq exp
\&      | %name PLUS   exp \*(Aq+\*(Aq exp   | %name MINUS exp \*(Aq\-\*(Aq exp | %name TIMES  exp \*(Aq*\*(Aq exp
\&      | %name DIV    exp \*(Aq/\*(Aq exp
\&      | %name UMINUS \*(Aq\-\*(Aq exp %prec NEG
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }
\&    ;
.Ve
.PP
we are explicitly naming the productions. Thus, all the node instances 
corresponding to the production \f(CW\*(C`exp: VAR \*(Aq=\*(Aq exp\*(C'\fR will belong to the class \f(CW\*(C`ASSIGN\*(C'\fR. 
Now the tree for \f(CW\*(C`a=2*b\*(C'\fR becomes:
.PP
.Vb 1
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/eyapplanguageref$ ./treewithnames.pl
\&
\&  ************
\&  EXPS(ASSIGN(TERMINAL[a],TIMES(NUM(TERMINAL[2]),VAR(TERMINAL[b]))))
\&  ************
.Ve
.PP
Observe how the list has been named \f(CW\*(C`EXPS\*(C'\fR. The \f(CW%name\fR directive prefixes the 
list operator (\f(CW\*(C`[+*?]\*(C'\fR).
.SS "\s-1TERMINAL\s0 Nodes"
.IX Subsection "TERMINAL Nodes"
Nodes named \f(CW\*(C`TERMINAL\*(C'\fR are built from the tokens provided by the lexical
analyzer.  \f(CW\*(C`Parse::Eyapp\*(C'\fR follows the same protocol than Parse::Yapp for
communication between the parser and the lexical analyzer: A couple \f(CW\*(C`($token,
$attribute)\*(C'\fR is returned by the lexical analyzer.  These values are stored
under the keys \f(CW\*(C`token\*(C'\fR and \f(CW\*(C`attr\*(C'\fR.  \f(CW\*(C`TERMINAL\*(C'\fR nodes as all
\&\f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes also have the attribute \f(CW\*(C`children\*(C'\fR but is \- almost
always \- empty.
.ie n .SS "Explicit Actions Inside %tree"
.el .SS "Explicit Actions Inside \f(CW%tree\fP"
.IX Subsection "Explicit Actions Inside %tree"
Explicit actions can be specified by the programmer like in this line
from the Parse::Eyapp \s-1SYNOPSIS\s0 example:
.PP
.Vb 1
\&      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] }  /* Let us simplify a bit the tree */
.Ve
.PP
Explicit actions receive as arguments the references to the children nodes already 
built. The programmer can influence the shape of the tree by inserting
these explicit actions. In this example the programmer has decided to simplify the 
syntax tree: the nodes associated with the parenthesis are 
discarded and the reference to the subtree containing the proper
expression is returned. Such manoeuvre is called \fIbypassing\fR.
See section \*(L"The  bypass clause and the \f(CW%no\fR bypass directive\*(R"
to know more about \fIautomatic bypassing\fR
.ie n .SS "Explicitly Building Nodes With ""YYBuildAST"""
.el .SS "Explicitly Building Nodes With \f(CWYYBuildAST\fP"
.IX Subsection "Explicitly Building Nodes With YYBuildAST"
Sometimes the best time to decorate a node with some
attributes is just after being built.
In such cases the programmer can take \fImanual control\fR
building the node with \f(CW\*(C`YYBuildAST\*(C'\fR to 
inmediately proceed to decorate it.
.PP
The following example illustrates the situation (see
file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR 
inside \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR):
.PP
.Vb 10
\&  $ sed \-n \*(Aq397,408p\*(Aq lib/Simple/Types.eyp
\&  Variable:
\&      %name VAR
\&      ID
\&    | %name  VARARRAY
\&      $ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq) <%name INDEXSPEC +>
\&        {
\&          my $self = shift;
\&          my $node =  $self\->YYBuildAST(@_);
\&          $node\->{line} = $ID\->[1];# $_[1]\->[1]
\&          return $node;
\&        }
\&  ;
.Ve
.PP
This production rule defines the expression to access an array element 
as an identifier followed by
a non empty list of binary expressions \f(CW\*(C` Variable: ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq)+\*(C'\fR. 
Furthermore, the node corresponding
to the list of indices has been named \f(CW\*(C`INDEXSPEC\*(C'\fR.
.PP
When no explicit action is
inserted a binary node will be built having as first child the node
corresponding to the identifier \f(CW$ID\fR and as second child the reference 
to the list of binary expressions. The children corresponding to
\&\f(CW\*(Aq[\*(Aq\fR and \f(CW\*(Aq]\*(Aq\fR are discarded since they are \-by default\- \fIsyntactic tokens\fR
(see section \*(L"Syntactic and Semantic tokens\*(R").
However, the programmer wants to decorate
the node being built with a \f(CW\*(C`line\*(C'\fR attribute holding the line number in the source
code where the identifier being used appears. The call to the \f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR
method \f(CW\*(C`YYBuildAST\*(C'\fR does the job of building the node. After
that the node can be decorated and returned.
.PP
Actually, the \f(CW%tree\fR directive is semantically equivalent to:
.PP
.Vb 1
\&                %default action { goto &Parse::Eyapp::Driver::YYBuildAST }
.Ve
.ie n .SS "Returning non References Under %tree"
.el .SS "Returning non References Under \f(CW%tree\fP"
.IX Subsection "Returning non References Under %tree"
When a \fIexplicit user action returns s.t. that is not a reference
no node will be inserted\fR. This fact can be used to suppress nodes
in the \s-1AST\s0 being built. See the following example (file \f(CW\*(C`examples/returnnonode.yp\*(C'\fR):
.PP
.Vb 10
\&  $ sed \-ne \*(Aq1,17p\*(Aq returnnonode.yp | cat \-n
\&     1  %tree
\&     2  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq
\&     3  %%
\&     4  S:    %name EMPTY
\&     5          /* empty */
\&     6      | %name AES
\&     7          S A
\&     8      | %name BES
\&     9          S B
\&    10  ;
\&    11  A : %name A
\&    12        \*(Aqa\*(Aq
\&    13  ;
\&    14  B : %name B
\&    15        \*(Aqb\*(Aq { }
\&    16  ;
\&    17  %%
.Ve
.PP
since the action at line 15 returns \f(CW\*(C`undef\*(C'\fR
the \f(CW\*(C`B : \*(Aqb\*(Aq\*(C'\fR subtree will not be inserted in the \s-1AST:\s0
.PP
.Vb 3
\&  $ usereturnnonode.pl
\&  ababa
\&  AES(BES(AES(BES(AES(EMPTY,A(TERMINAL[a]))),A(TERMINAL[a]))),A(TERMINAL[a]))
.Ve
.PP
Observe the absence of \f(CW\*(C`B\*(C'\fRs and \f(CW\*(Aqb\*(Aq\fRs.
.ie n .SS "Intermediate actions and %tree"
.el .SS "Intermediate actions and \f(CW%tree\fP"
.IX Subsection "Intermediate actions and %tree"
Intermediate actions can be used to change the shape of the \s-1AST \s0(prune it,
decorate it, etc.) but the value returned by them is ignored. The grammar 
below has two intermediate actions. They modify the attributes of the
node to its left and return a reference \f(CW$f\fR to such node (lines 5 and 6):
.PP
.Vb 10
\&  $ sed \-ne \*(Aq1,15p\*(Aq intermediateactiontree.yp | cat \-n
\&     1  %semantic token \*(Aqa\*(Aq \*(Aqb\*(Aq
\&     2  %tree bypass
\&     3  %%
\&     4  S:    %name EMPTY
\&     5         /* empty */
\&     6      | %name SA
\&     7         S A.f { $f\->{attr} = "A"; $f; } A
\&     8      | %name SB
\&     9         S B.f { $f\->{attr} = "B"; $f; } B
\&    10  ;
\&    11  A : %name A \*(Aqa\*(Aq
\&    12  ;
\&    13  B : %name B \*(Aqb\*(Aq
\&    14  ;
\&    15  %%
.Ve
.PP
See the client program:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> cat \-n useintermediateactiontree.pl
\&  1  #!/usr/bin/perl \-w
\&  2  use strict;
\&  3  use Parse::Eyapp;
\&  4  use intermediateactiontree;
\&  5
\&  6  { no warnings;
\&  7  *A::info = *B::info = sub { $_[0]{attr} };
\&  8  }
\&  9
\& 10  my $parser = intermediateactiontree\->new();
\& 11  my $t = $parser\->Run;
\& 12  print $t\->str,"\en";
.Ve
.PP
When it runs produces this output:
.PP
.Vb 3
\&  $ useintermediateactiontree.pl
\&  aabbaa
\&  SA(SB(SA(EMPTY,A[A],A[a]),B[B],B[b]),A[A],A[a])
.Ve
.PP
The 
attributes 
of left \f(CW\*(C`A\*(C'\fRs 
have been effectively changed by the intermediate actions
from \f(CW\*(Aqa\*(Aq\fR to \f(CW\*(AqA\*(Aq\fR.
However no further children have been inserted.
.SS "Syntactic and Semantic tokens"
.IX Subsection "Syntactic and Semantic tokens"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR differences between \f(CW\*(C`syntactic tokens\*(C'\fR
and \f(CW\*(C`semantic tokens\*(C'\fR. By default all tokens
declared using string notation (i.e. between quotes
like \f(CW\*(Aq+\*(Aq\fR, \f(CW\*(Aq=\*(Aq\fR)
are considered \fIsyntactic tokens\fR. Tokens declared by an identifier
(like \f(CW\*(C`NUM\*(C'\fR or \f(CW\*(C`VAR\*(C'\fR) are by default considered
\&\fIsemantic tokens\fR. \fBSyntactic tokens do not yield to nodes in the
syntactic tree\fR. Thus, the first print in the section Parse::Eyapp \s-1SYNOPSIS\s0 example:
.PP
.Vb 10
\&  $ cat \-n synopsis.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp;
\&     4  use Parse::Eyapp::Treeregexp;
\&     5
\&     6  sub TERMINAL::info {
\&     7    $_[0]{attr}
\&     8  }
\&     9
\&    10  my $grammar = q{
\&    11    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    12    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    13    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    14    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    15    %tree           # Let us build an abstract syntax tree ...
\&    16
\&    17    %%
\&    18    line:
\&    19        exp <%name EXPRESSION_LIST + \*(Aq;\*(Aq>
\&    20          { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    21    ;
\&    22
\&    23    /* The %name directive defines the name of the class */
\&    24    exp:
\&    25        %name NUM
\&    26        NUM
\&    27      | %name VAR
\&    28        VAR
\&    29      | %name ASSIGN
\&    30        VAR \*(Aq=\*(Aq exp
\&    31      | %name PLUS
\&    32        exp \*(Aq+\*(Aq exp
\&    33      | %name MINUS
\&    34        exp \*(Aq\-\*(Aq exp
\&    35      | %name TIMES
\&    36        exp \*(Aq*\*(Aq exp
\&    37      | %name DIV
\&    38        exp \*(Aq/\*(Aq exp
\&    39      | %name UMINUS
\&    40        \*(Aq\-\*(Aq exp %prec NEG
\&    41      | \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    42          { $_[2] }  /* Let us simplify a bit the tree */
\&    43    ;
\&    44
\&    45    %%
\&    46    sub _Error { die "Syntax error near ".($_[0]\->YYCurval?$_[0]\->YYCurval:"end of file")."\en" }
\&    47
\&    48    sub _Lexer {
\&    49      my($parser)=shift; # The parser object
\&    50
\&    51      for ($parser\->YYData\->{INPUT}) { # Topicalize
\&    52        m{\eG\es+}gc;
\&    53        $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&    54        m{\eG([0\-9]+(?:\e.[0\-9]+)?)}gc and return(\*(AqNUM\*(Aq,$1);
\&    55        m{\eG([A\-Za\-z][A\-Za\-z0\-9_]*)}gc and return(\*(AqVAR\*(Aq,$1);
\&    56        m{\eG(.)}gcs and return($1,$1);
\&    57      }
\&    58      return(\*(Aq\*(Aq,undef);
\&    59    }
\&    60
\&    61    sub Run {
\&    62        my($self)=shift;
\&    63        $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error, );
\&    64    }
\&    65  }; # end grammar
\&    66
\&    67  our (@all, $uminus);
\&    68
\&    69  Parse::Eyapp\->new_grammar( # Create the parser package/class
\&    70    input=>$grammar,
\&    71    classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&    72    firstline=>7       # String $grammar starts at line 7 (for error diagnostics)
\&    73  );
\&    74  my $parser = Calc\->new();                # Create a parser
\&    75  $parser\->YYData\->{INPUT} = "2*\-3+b*0;\-\-2\en"; # Set the input
\&    76  my $t = $parser\->Run;                    # Parse it!
\&    77  local $Parse::Eyapp::Node::INDENT=2;
\&    78  print "Syntax Tree:",$t\->str;
\&    79
\&    80  # Let us transform the tree. Define the tree\-regular expressions ..
\&    81  my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&    82      { #  Example of support code
\&    83        my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&    84      }
\&    85      constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM($x), NUM($y))
\&    86        => {
\&    87          my $op = $Op{ref($bin)};
\&    88          $x\->{attr} = eval  "$x\->{attr} $op $y\->{attr}";
\&    89          $_[0] = $NUM[0];
\&    90        }
\&    91      uminus: UMINUS(NUM($x)) => { $x\->{attr} = \-$x\->{attr}; $_[0] = $NUM }
\&    92      zero_times_whatever: TIMES(NUM($x), .) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    93      whatever_times_zero: TIMES(., NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    94    },
\&    95    OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\&    96  );
\&    97  $p\->generate(); # Create the tranformations
\&    98
\&    99  $t\->s($uminus); # Transform UMINUS nodes
\&   100  $t\->s(@all);    # constant folding and mult. by zero
\&   101
\&   102  local $Parse::Eyapp::Node::INDENT=0;
\&   103  print "\enSyntax Tree after transformations:\en",$t\->str,"\en";
.Ve
.PP
gives as result the following output:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> synopsis.pl
\& Syntax Tree:
\& EXPRESSION_LIST(
\&   PLUS(
\&     TIMES(
\&       NUM(
\&         TERMINAL[2]
\&       ),
\&       UMINUS(
\&         NUM(
\&           TERMINAL[3]
\&         )
\&       ) # UMINUS
\&     ) # TIMES,
\&     TIMES(
\&       VAR(
\&         TERMINAL[b]
\&       ),
\&       NUM(
\&         TERMINAL[0]
\&       )
\&     ) # TIMES
\&   ) # PLUS,
\&   UMINUS(
\&     UMINUS(
\&       NUM(
\&         TERMINAL[2]
\&       )
\&     ) # UMINUS
\&   ) # UMINUS
\& ) # EXPRESSION_LIST
.Ve
.PP
\&\f(CW\*(C`TERMINAL\*(C'\fR nodes corresponding to tokens that were defined by strings like
\&\f(CW\*(Aq=\*(Aq\fR, \f(CW\*(Aq\-\*(Aq\fR, \f(CW\*(Aq+\*(Aq\fR, \f(CW\*(Aq/\*(Aq\fR, \f(CW\*(Aq*\*(Aq\fR, \f(CW\*(Aq(\*(Aq\fR and \f(CW\*(Aq)\*(Aq\fR  do not 
appear in the tree.  \f(CW\*(C`TERMINAL\*(C'\fR nodes corresponding to tokens that were defined
using an identifier, like \f(CW\*(C`NUM\*(C'\fR or \f(CW\*(C`VAR\*(C'\fR are, by default,  \fIsemantic tokens\fR
and appear in the \s-1AST.\s0
.SS "Changing the Status of a Token"
.IX Subsection "Changing the Status of a Token"
The new token declaration directives \f(CW\*(C`%syntactic token\*(C'\fR and
\&\f(CW\*(C`%semantic token\*(C'\fR can change the status of a token.
For example (file \f(CW\*(C`15treewithsyntactictoken.pl\*(C'\fR in the \f(CW\*(C`examples/\*(C'\fR directory), 
given the grammar:
.PP
.Vb 3
\&   %syntactic token b
\&   %semantic token \*(Aqa\*(Aq \*(Aqc\*(Aq
\&   %tree
\&
\&   %%
\&
\&   S: %name ABC
\&        A B C
\&    | %name BC
\&        B C
\&   ;
\&
\&   A: %name A
\&        \*(Aqa\*(Aq
\&   ;
\&
\&   B: %name B
\&        b
\&   ;
\&
\&   C: %name C
\&       \*(Aqc\*(Aq
\&   ;
\&   %%
.Ve
.PP
the tree build for input \f(CW\*(C`abc\*(C'\fR will be 
\&\f(CW\*(C`ABC(A(TERMINAL[a]),B,C(TERMINAL[c]))\*(C'\fR.
.SS "Saving the Information of Syntactic Tokens in their Father"
.IX Subsection "Saving the Information of Syntactic Tokens in their Father"
The reason for the adjective \f(CW%syntactic\fR applied to a token is to 
state that the token influences the shape of the syntax tree
but carries no other information. When the syntax tree is built
the node corresponding to the token is discarded.
.PP
Sometimes the difference between syntactic and semantic 
tokens is blurred. For example the line number associated
with an instance of the syntactic token \f(CW\*(Aq+\*(Aq\fR can be used later
\&\-say during type checking\- to emit a more accurate error
diagnostic. But if the node was discarded the information
about that line number is no longer available.
When building the syntax tree \f(CW\*(C`Parse::Eyapp\*(C'\fR (namely
the method \f(CW\*(C`Parse::Eyapp::YYBuildAST\*(C'\fR) checks 
if the method \f(CW\*(C`TERMINAL::save_attributes\*(C'\fR exists and if so
it will be called when dealing with a \fIsyntactic token\fR. 
The method receives as argument \- additionally
to the reference to the attribute of the token as it
is returned by the lexical analyzer \- a reference
to the node associated with the left hand side of the
production. Here is an example (file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR
in \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR)
of use:
.PP
.Vb 5
\&              sub TERMINAL::save_attributes {
\&                # $_[0] is a syntactic terminal
\&                # $_[1] is the father.
\&                push @{$_[1]\->{lines}}, $_[0]\->[1]; # save the line number
\&              }
.Ve
.ie n .SS "The  ""bypass"" clause and the ""%no bypass"" directive"
.el .SS "The  \f(CWbypass\fP clause and the \f(CW%no bypass\fP directive"
.IX Subsection "The bypass clause and the %no bypass directive"
The shape of the tree can be also modified using some \f(CW%tree\fR clauses
as \f(CW\*(C`%tree bypass\*(C'\fR which will produce an automatic \fIbypass\fR of any
node with only one child at tree-construction-time.
.PP
A \fIbypass operation\fR consists in \fIreturning the only child 
of the node being visited to the father of the node and re-typing (re-blessing)
the node in the name of the production\fR (if a name was provided).
.PP
A node may have only one child at tree-construction-time for one of
two reasons.
.IP "\(bu" 4
The first occurs when the right hand side of the production
was already unary like in:
.Sp
.Vb 2
\&                           exp:
\&                               %name NUM  NUM
.Ve
.Sp
Here \- if the \f(CW\*(C`bypass\*(C'\fR clause is used \- 
the \f(CW\*(C`NUM\*(C'\fR node will be bypassed and the child \f(CW\*(C`TERMINAL\*(C'\fR built
from the information provided by the lexical analyzer will be renamed/reblessed 
as \f(CW\*(C`NUM\*(C'\fR.
.IP "\(bu" 4
Another reason for a node to be \fIbypassed\fR is  the fact that though the right
hand side of the production may have more than one symbol, 
only one of them is not a syntactic token
like in:
.Sp
.Vb 1
\&                           exp: \*(Aq(\*(Aq exp \*(Aq)\*(Aq
.Ve
.PP
A consequence of the global scope application of \f(CW\*(C`%tree bypass\*(C'\fR
is that undesired bypasses may occur like in
.PP
.Vb 2
\&                           exp : %name UMINUS
\&                                 \*(Aq\-\*(Aq $exp %prec NEG
.Ve
.PP
though the right hand side has two symbols, token \f(CW\*(Aq\-\*(Aq\fR is
a syntactic token and therefore only \f(CW\*(C`exp\*(C'\fR is left. The \fIbypass\fR
operation will be applied when building this node.
This \fIbypass\fR can be avoided applying the \f(CW\*(C`no bypass ID\*(C'\fR directive to the corresponding 
production:
.PP
.Vb 2
\&                           exp : %no bypass UMINUS
\&                                 \*(Aq\-\*(Aq $exp %prec NEG
.Ve
.PP
The following example (file \f(CW\*(C`examples/bypass.pl\*(C'\fR) 
is the equivalent of the Parse::Eyapp \s-1SYNOPSIS\s0 example
but using the \f(CW\*(C`bypass\*(C'\fR clause instead:
.PP
.Vb 2
\& use Parse::Eyapp;
\& use Parse::Eyapp::Treeregexp;
\&
\& sub TERMINAL::info { $_[0]{attr} }
\& { no warnings; *VAR::info = *NUM::info = \e&TERMINAL::info; }
\&
\& my $grammar = q{
\&   %right  \*(Aq=\*(Aq     # Lowest precedence
\&   %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq 
\&   %left   \*(Aq*\*(Aq \*(Aq/\*(Aq 
\&   %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&   %tree bypass    # Let us build an abstract syntax tree ...
\&
\&   %%
\&   line: exp <%name EXPRESSION_LIST + \*(Aq;\*(Aq>  { $_[1] } 
\&   ;
\&
\&   exp:
\&       %name NUM  NUM            | %name VAR   VAR         | %name ASSIGN VAR \*(Aq=\*(Aq exp
\&     | %name PLUS exp \*(Aq+\*(Aq exp    | %name MINUS exp \*(Aq\-\*(Aq exp | %name TIMES  exp \*(Aq*\*(Aq exp
\&     | %name DIV     exp \*(Aq/\*(Aq exp
\&     | %no bypass UMINUS
\&       \*(Aq\-\*(Aq $exp %prec NEG
\&     |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&   ;
\&
\&   %%
\&   # sub _Error, _Lexer and Run like in the synopsis example
\&   # ...
\& }; # end grammar
\&
\& our (@all, $uminus);
\&
\& Parse::Eyapp\->new_grammar( # Create the parser package/class
\&   input=>$grammar,
\&   classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&   firstline=>7       # String $grammar starts at line 7 (for error diagnostics)
\& );
\& my $parser = Calc\->new();                # Create a parser
\& $parser\->YYData\->{INPUT} = "a=2*\-3+b*0\en"; # Set the input
\& my $t = $parser\->Run;                    # Parse it!
\&
\& print "\en************\en".$t\->str."\en************\en";
\&
\& # Let us transform the tree. Define the tree\-regular expressions ..
\& my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&   { #  Example of support code
\&     my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&   }
\&   constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM, NUM)
\&     => {
\&       my $op = $Op{ref($_[0])};
\&       $NUM[0]\->{attr} = eval  "$NUM[0]\->{attr} $op $NUM[1]\->{attr}";
\&       $_[0] = $NUM[0];
\&     }
\&   zero_times_whatever: TIMES(NUM, .) and { $NUM\->{attr} == 0 } => { $_[0] = $NUM }
\&   whatever_times_zero: TIMES(., NUM) and { $NUM\->{attr} == 0 } => { $_[0] = $NUM }
\&   uminus: UMINUS(NUM) => { $NUM\->{attr} = \-$NUM\->{attr}; $_[0] = $NUM }
\&   },
\&   OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\& );
\& $p\->generate(); # Create the tranformations
\&
\& $t\->s(@all);    # constant folding and mult. by zero
\&
\& print $t\->str,"\en";
.Ve
.PP
when running this example with input \f(CW"a=2*\-3+b*0\en"\fR
we obtain the following output:
.PP
.Vb 1
\& nereida:~/src/perl/YappWithDefaultAction/examples> bypass.pl
\&
\& ************
\& EXPRESSION_LIST(ASSIGN(TERMINAL[a],PLUS(TIMES(NUM[2],UMINUS(NUM[3])),TIMES(VAR[b],NUM[0]))))
\& ************
\& EXPRESSION_LIST(ASSIGN(TERMINAL[a],NUM[\-6]))
.Ve
.PP
As you can see the trees are more compact when using the \f(CW\*(C`bypass\*(C'\fR directive.
.ie n .SS "The ""alias"" clause of the %tree directive"
.el .SS "The \f(CWalias\fP clause of the \f(CW%tree\fP directive"
.IX Subsection "The alias clause of the %tree directive"
Access to children in Parse::Eyapp is made through the \f(CW\*(C`child\*(C'\fR and \f(CW\*(C`children\*(C'\fR
methods.
There are occasions however where access by name to the children may be preferable.
The use of the \f(CW\*(C`alias\*(C'\fR clause with the \f(CW%tree\fR directive creates accessors
to the children with names specified by the programmer. The \fIdot and dollar notations\fR
are used for this. When dealing with a production like:
.PP
.Vb 3
\&                       A: 
\&                          %name A_Node
\&                          Node B.bum N.pum $Chip
.Ve
.PP
methods \f(CW\*(C`bum\*(C'\fR, \f(CW\*(C`pum\*(C'\fR and \f(CW\*(C`Chip\*(C'\fR will be created for the class \f(CW\*(C`A_Node\*(C'\fR.
Those methods will provide access to the respective child (first, second and third in
the example). The methods are build at compile-time and therefore later 
transformations of the \s-1AST\s0 modifying the order of the children may 
invalidate the use of these getter-setters.
.PP
The \f(CW%prefix\fR directive used in line 7 of the following example
is equivalent to the use of the \f(CW\*(C`yyprefix\*(C'\fR. The node classes are prefixed
with the specified prefix: \f(CW\*(C`R::S::\*(C'\fR in this example.
.PP
.Vb 10
\& cat \-n alias_and_yyprefix.pl
\&     1  #!/usr/local/bin/perl
\&     2  use warnings;
\&     3  use strict;
\&     4  use Parse::Eyapp;
\&     5
\&     6  my $grammar = q{
\&     7    %prefix R::S::
\&     8
\&     9    %right  \*(Aq=\*(Aq
\&    10    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    11    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    12    %left   NEG
\&    13    %tree bypass alias
\&    14
\&    15    %%
\&    16    line: $exp  { $_[1] }
\&    17    ;
\&    18
\&    19    exp:
\&    20        %name NUM
\&    21              $NUM
\&    22      | %name VAR
\&    23              $VAR
\&    24      | %name ASSIGN
\&    25              $VAR \*(Aq=\*(Aq $exp
\&    26      | %name PLUS
\&    27              exp.left \*(Aq+\*(Aq exp.right
\&    28      | %name MINUS
\&    29              exp.left \*(Aq\-\*(Aq exp.right
\&    30      | %name TIMES
\&    31              exp.left \*(Aq*\*(Aq exp.right
\&    32      | %name DIV
\&    33              exp.left \*(Aq/\*(Aq exp.right
\&    34      | %no bypass UMINUS
\&    35              \*(Aq\-\*(Aq $exp %prec NEG
\&    36      |   \*(Aq(\*(Aq exp \*(Aq)\*(Aq  { $_[2] } /* Let us simplify a bit the tree */
\&    37    ;
\&    38
\&    39    %%
\&    ..    ....
\&    76  }; # end grammar
\&    77
\&    78
\&    79  Parse::Eyapp\->new_grammar(
\&    80    input=>$grammar,
\&    81    classname=>\*(AqAlias\*(Aq,
\&    82    firstline =>7,
\&    83    outputfile => \*(Aqmain\*(Aq,
\&    84  );
\&    85  my $parser = Alias\->new();
\&    86  $parser\->YYData\->{INPUT} = "a = \-(2*3+5\-1)\en";
\&    87  my $t = $parser\->Run;
\&    88  $Parse::Eyapp::Node::INDENT=0;
\&    89  print $t\->VAR\->str."\en";             # a
\&    90  print "***************\en";
\&    91  print $t\->exp\->exp\->left\->str."\en";  # 2*3+5
\&    92  print "***************\en";
\&    93  print $t\->exp\->exp\->right\->str."\en"; # 1
.Ve
.PP
The tree \f(CW$t\fR for the expression \f(CW"a = \-(2*3+5\-1)\en"\fR is:
.PP
.Vb 9
\&  R::S::ASSIGN(
\&     R::S::TERMINAL,
\&     R::S::UMINUS(
\&       R::S::MINUS(
\&         R::S::PLUS(R::S::TIMES(R::S::NUM,R::S::NUM),R::S::NUM),
\&         R::S::NUM
\&       )
\&     )
\&  )
.Ve
.PP
The \f(CW\*(C`R::S::ASSIGN\*(C'\fR class has methods \f(CW\*(C`VAR\*(C'\fR (see line 89 above)
and \f(CW\*(C`exp\*(C'\fR (see lines 91 and 93) to refer to its two children. 
The result of the execution is:
.PP
.Vb 6
\&  $ alias_and_yyprefix.pl
\&  R::S::TERMINAL
\&  ***************
\&  R::S::PLUS(R::S::TIMES(R::S::NUM,R::S::NUM),R::S::NUM)
\&  ***************
\&  R::S::NUM
.Ve
.PP
As a second example of the use of \f(CW%alias\fR, the \s-1CPAN\s0 module Language::AttributeGrammar provides
\&\s-1AST\s0 decorators from an attribute grammar specification of the \s-1AST.\s0
To work  Language::AttributeGrammar requires named access to the children
of the \s-1AST\s0 nodes. Follows an example (file \f(CW\*(C`examples/CalcwithAttributeGrammar.pl\*(C'\fR)
of a small calculator:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n CalcwithAttributeGrammar.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp;
\&     4  use Data::Dumper;
\&     5  use Language::AttributeGrammar;
\&     6
\&     7  my $grammar = q{
\&     8  %{
\&     9  # use Data::Dumper;
\&    10  %}
\&    11  %right  \*(Aq=\*(Aq
\&    12  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    13  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    14  %left   NEG
\&    15  %tree bypass alias
\&    16
\&    17  %%
\&    18  line: $exp  { $_[1] }
\&    19  ;
\&    20
\&    21  exp:
\&    22      %name NUM
\&    23            $NUM
\&    24          | %name VAR
\&    25            $VAR
\&    26          | %name ASSIGN
\&    27            $VAR \*(Aq=\*(Aq $exp
\&    28          | %name PLUS
\&    29            exp.left \*(Aq+\*(Aq exp.right
\&    30          | %name MINUS
\&    31            exp.left \*(Aq\-\*(Aq exp.right
\&    32          | %name TIMES
\&    33            exp.left \*(Aq*\*(Aq exp.right
\&    34          | %name DIV
\&    35            exp.left \*(Aq/\*(Aq exp.right
\&    36          | %no bypass UMINUS
\&    37            \*(Aq\-\*(Aq $exp %prec NEG
\&    38    |   \*(Aq(\*(Aq $exp \*(Aq)\*(Aq  { $_[2] } /* Let us simplify a bit the tree */
\&    39  ;
\&    40
\&    41  %%
\&    42
\&    43  sub _Error {
\&    44          exists $_[0]\->YYData\->{ERRMSG}
\&    45      and do {
\&    46          print $_[0]\->YYData\->{ERRMSG};
\&    47          delete $_[0]\->YYData\->{ERRMSG};
\&    48          return;
\&    49      };
\&    50      print "Syntax error.\en";
\&    51  }
\&    52
\&    53  sub _Lexer {
\&    54      my($parser)=shift;
\&    55
\&    56          $parser\->YYData\->{INPUT}
\&    57      or  $parser\->YYData\->{INPUT} = <STDIN>
\&    58      or  return(\*(Aq\*(Aq,undef);
\&    59
\&    60      $parser\->YYData\->{INPUT}=~s/^\es+//;
\&    61
\&    62      for ($parser\->YYData\->{INPUT}) {
\&    63          s/^([0\-9]+(?:\e.[0\-9]+)?)//
\&    64                  and return(\*(AqNUM\*(Aq,$1);
\&    65          s/^([A\-Za\-z][A\-Za\-z0\-9_]*)//
\&    66                  and return(\*(AqVAR\*(Aq,$1);
\&    67          s/^(.)//s
\&    68                  and return($1,$1);
\&    69      }
\&    70  }
\&    71
\&    72  sub Run {
\&    73      my($self)=shift;
\&    74      $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error,
\&    75                      #yydebug =>0xFF
\&    76                    );
\&    77  }
\&    78  }; # end grammar
\&    79
\&    80
\&    81  $Data::Dumper::Indent = 1;
\&    82  Parse::Eyapp\->new_grammar(
\&    83    input=>$grammar,
\&    84    classname=>\*(AqRule6\*(Aq,
\&    85    firstline =>7,
\&    86    outputfile => \*(AqCalc.pm\*(Aq,
\&    87  );
\&    88  my $parser = Rule6\->new();
\&    89  $parser\->YYData\->{INPUT} = "a = \-(2*3+5\-1)\en";
\&    90  my $t = $parser\->Run;
\&    91  print "\en***** Before ******\en";
\&    92  print Dumper($t);
\&    93
\&    94  my $attgram = new Language::AttributeGrammar <<\*(AqEOG\*(Aq;
\&    95
\&    96  # Compute the expression
\&    97  NUM:    $/.val = { $<attr> }
\&    98  TIMES:  $/.val = { $<left>.val * $<right>.val }
\&    99  PLUS:   $/.val = { $<left>.val + $<right>.val }
\&   100  MINUS:  $/.val = { $<left>.val \- $<right>.val }
\&   101  UMINUS: $/.val = { \-$<exp>.val }
\&   102  ASSIGN: $/.val = { $<exp>.val }
\&   103  EOG
\&   104
\&   105  my $res = $attgram\->apply($t, \*(Aqval\*(Aq);
\&   106
\&   107  $Data::Dumper::Indent = 1;
\&   108  print "\en***** After ******\en";
\&   109  print Dumper($t);
\&   110  print Dumper($res);
\&
\& CalcwithAttributeGrammar.pl
.Ve
.PP
The program computes the tree for expression for expression
\&\f(CW\*(C`a = \-(2*3+5\-1)\*(C'\fR which is:
.PP
.Vb 1
\&  ASSIGN(TERMINAL,UMINUS(MINUS(PLUS(TIMES(NUM,NUM),NUM),NUM)))
.Ve
.PP
The children of the binary nodes can be accessed through the \f(CW\*(C`left\*(C'\fR
and \f(CW\*(C`right\*(C'\fR methods.
.SS "About the Encapsulation of Nodes"
.IX Subsection "About the Encapsulation of Nodes"
There is no encapsulation of nodes. The user/client 
knows that they are hashes that can be decorated with new keys/attributes.
All nodes in the \s-1AST\s0 created by \f(CW%tree\fR are \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes.
The only reserved field is \f(CW\*(C`children\*(C'\fR which is a reference to the
array of children. You can always create a \f(CW\*(C`Node\*(C'\fR class 
\&\fIby hand\fR by inheriting from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR.
.SH "SOLVING CONFLICTS WITH THE \fIPOSTPONED CONFLICT\fP STRATEGY"
.IX Header "SOLVING CONFLICTS WITH THE POSTPONED CONFLICT STRATEGY"
Yacc-like parser generators provide ways to solve shift-reduce mechanims
based on token precedence. No mechanisms are provided for the resolution
of reduce-reduce conflicts. The solution for such kind of conflicts is to modify
the grammar. The strategy We present here provides a way to broach conflicts
that can't be solved using static precedences.
.SS "The \fIPostponed Conflict Resolution\fP Strategy"
.IX Subsection "The Postponed Conflict Resolution Strategy"
The \fIpostponed conflict strategy\fR presented here can be used whenever there 
is a shift-reduce or reduce-reduce conflict that can not be solved using static 
precedences.
.SS "\fIPostponed Conflict Resolution\fP: Reduce-Reduce Conflicts"
.IX Subsection "Postponed Conflict Resolution: Reduce-Reduce Conflicts"
Let us assume we have a reduce-reduce conflict between to productions
.PP
.Vb 2
\&                      A \-> alpha .
\&                      B \-> beta .
.Ve
.PP
for some token \f(CW\*(C`@\*(C'\fR. Let also assume that production
.PP
.Vb 1
\&                      A \-> alpha
.Ve
.PP
has name \f(CW\*(C`ruleA\*(C'\fR and production
.PP
.Vb 1
\&                      B \-> beta
.Ve
.PP
has name \f(CW\*(C`ruleB\*(C'\fR.
.PP
The postponed conflict resolution strategy consists
in modifying the conflictive grammar by marking the points where the  conflict occurs
with the new \f(CW%PREC\fR directive. In this case at then end of the involved productions:
.PP
.Vb 2
\&                      A \-> alpha %PREC IsAorB 
\&                      B \-> beta  $PREC IsAorB
.Ve
.PP
The \f(CW\*(C`IsAorB\*(C'\fR identifier is called the \fIconflict name\fR.
.PP
Inside the head section, the programmer associates with the 
conflict name a code
whose mission is to solve the conflict by dynamically changing the
parsing table like this:
.PP
.Vb 2
\&                     %conflict IsAorB {
\&                          my $self = shift;
\&
\&                          if (looks_like_A($self)) {
\&                            $self\->YYSetReduce(\*(Aq@\*(Aq, \*(AqruleA\*(Aq );
\&                          }
\&                          else {
\&                            $self\->YYSetReduce(\*(Aq@\*(Aq, \*(AqruleB\*(Aq );
\&                          }
\&                       }
.Ve
.PP
The code associated with the \fIconflict name\fR
receives the name of \fI conflict handler\fR.
The code of \f(CW\*(C`looks_like_A\*(C'\fR stands for some form of nested parsing
which will decide which production applies.
.SS "Solving the Enumerated versus Range declarations conflict using the Posponed Conflict Resolution Strategy"
.IX Subsection "Solving the Enumerated versus Range declarations conflict using the Posponed Conflict Resolution Strategy"
In file \f(CW\*(C`pascalenumeratedvsrangesolvedviadyn.eyp\*(C'\fR we apply the postponed conflict resolution strategy
to the reduce reduce conflict that arises in Extended Pascal between the declaration of ranges and
the declaration of enumerated types (see section \*(L"Reduce-Reduce conflict: Enumerated versus Range declarations in Extended Pascal\*(R").
Here is the solution:
.PP
.Vb 10
\&  ~/LEyapp/examples/debuggingtut$ cat \-n pascalenumeratedvsrangesolvedviadyn.eyp
\&     1  %{
\&     2  =head1 SYNOPSIS
\&     3  
\&     4  See 
\&     5  
\&     6  =over 2
\&     7  
\&     8  =item * File pascalenumeratedvsrange.eyp in examples/debuggintut/
\&     9  
\&    10  =item * The Bison manual L<http://www.gnu.org/software/bison/manual/html_mono/bison.html>
\&    11  
\&    12  =back
\&    13  
\&    14  Compile it with:
\&    15  
\&    16              eyapp \-b \*(Aq\*(Aq pascalenumeratedvsrangesolvedviadyn.eyp
\&    17  
\&    18  run it with this options:
\&    19  
\&    20              ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&    21  
\&    22  Try these inputs:
\&    23  
\&    24                  type r = (x) ..  y ;
\&    25                  type r = (x+2)*3 ..  y/2 ;
\&    26                  type e = (x, y, z);
\&    27                  type e = (x);
\&    28  
\&    29  =cut
\&    30  
\&    31  use base q{DebugTail}; 
\&    32  
\&    33  my $ID = qr{[A\-Za\-z][A\-Za\-z0\-9_]*};
\&    34               # Identifiers separated by commas
\&    35  my $IDLIST = qr{ \es*(?:\es*,\es* $ID)* \es* }x;
\&    36               # list followed by a closing par and a semicolon 
\&    37  my $RESTOFLIST = qr{$IDLIST \e) \es* ; }x;
\&    38  %}
\&    39  
\&    40  %namingscheme {
\&    41    #Receives a Parse::Eyapp object describing the grammar
\&    42    my $self = shift;
\&    43  
\&    44    $self\->tokennames(
\&    45      \*(Aq(\*(Aq => \*(AqLP\*(Aq,
\&    46      \*(Aq..\*(Aq => \*(AqDOTDOT\*(Aq,
\&    47      \*(Aq,\*(Aq => \*(AqCOMMA\*(Aq,
\&    48      \*(Aq)\*(Aq => \*(AqRP\*(Aq,
\&    49      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    50      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    51      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    52      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    53    );
\&    54  
\&    55    # returns the handler that will give names
\&    56    # to the right hand sides
\&    57    \e&give_rhs_name;
\&    58  }
\&    59  
\&    60  %strict
\&    61  
\&    62  %token ID NUM DOTDOT TYPE
\&    63  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&    64  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&    65  
\&    66  %tree
\&    67  
\&    68  %%
\&    69  
\&    70  type_decl : TYPE ID \*(Aq=\*(Aq type \*(Aq;\*(Aq
\&    71  ;
\&    72  
\&    73  type : 
\&    74        %name ENUM
\&    75        \*(Aq(\*(Aq id_list \*(Aq)\*(Aq
\&    76      | %name RANGE
\&    77        expr DOTDOT expr
\&    78  ;
\&    79  
\&    80  id_list : 
\&    81        %name EnumID
\&    82        ID rangeORenum
\&    83      | id_list \*(Aq,\*(Aq ID
\&    84  ;
\&    85  
\&    86  expr : \*(Aq(\*(Aq expr \*(Aq)\*(Aq
\&    87      | expr \*(Aq+\*(Aq expr
\&    88      | expr \*(Aq\-\*(Aq expr
\&    89      | expr \*(Aq*\*(Aq expr
\&    90      | expr \*(Aq/\*(Aq expr
\&    91      | %name RangeID
\&    92        ID rangeORenum
\&    93      | NUM
\&    94  ;
\&    95  
\&    96  rangeORenum: /* empty: postponed conflict resolution */
\&    97        {
\&    98            my $parser = shift;
\&    99            if (${$parser\->input()} =~ m{\eG(?= $RESTOFLIST)}gcx) {
\&   100                $parser\->YYSetReduce(\*(Aq)\*(Aq, \*(AqEnumID\*(Aq );
\&   101              }
\&   102              else {
\&   103                $parser\->YYSetReduce(\*(Aq)\*(Aq, \*(AqRangeID\*(Aq );
\&   104              }
\&   105        }
\&   106  ;
\&   107  
\&   108  %%
\&   109  
\&   110  _\|_PACKAGE_\|_\->lexer(
\&   111    sub {
\&   112      my $parser = shift;
\&   113  
\&   114      for (${$parser\->input()}) {    # contextualize
\&   115        m{\eG(\es*)}gc;
\&   116        $parser\->tokenline($1 =~ tr{\en}{});
\&   117  
\&   118        m{\eGtype\eb}gic                 and return (\*(AqTYPE\*(Aq, \*(AqTYPE\*(Aq);
\&   119  
\&   120        m{\eG($ID)}gc                   and return (\*(AqID\*(Aq,  $1);
\&   121  
\&   122        m{\eG([0\-9]+)}gc                and return (\*(AqNUM\*(Aq, $1);
\&   123  
\&   124        m{\eG\e.\e.}gc                    and return (\*(AqDOTDOT\*(Aq,  \*(Aq..\*(Aq);
\&   125  
\&   126        m{\eG(.)}gc                     and return ($1,    $1);
\&   127  
\&   128        return(\*(Aq\*(Aq,undef);
\&   129      }
\&   130    }
\&   131  );
\&   132  
\&   133  unless (caller()) {
\&   134    $Parse::Eyapp::Node::INDENT = 1;
\&   135    my $prompt = << \*(AqEOP\*(Aq;
\&   136  Try this input:
\&   137      type 
\&   138      r
\&   139      =
\&   140      (x)
\&   141      ..
\&   142      y
\&   143      ;
\&   144  
\&   145  Here other inputs you can try:
\&   146  
\&   147      type r = (x+2)*3 ..  y/2 ;
\&   148      type e = (x, y, z);
\&   149      type e = (x);
\&   150  
\&   151  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&   152  EOP
\&   153    _\|_PACKAGE_\|_\->main($prompt); 
\&   154  }
.Ve
.PP
This example also illustrates how to modify the default production
naming schema. Follows the result of several executions:
.PP
.Vb 9
\&  ~/LEyapp/examples/debuggingtut$ ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&  Try this input:
\&      type 
\&      r
\&      =
\&      (x)
\&      ..
\&      y
\&      ;
\&
\&  Here other inputs you can try:
\&
\&      type r = (x+2)*3 ..  y/2 ;
\&      type e = (x, y, z);
\&      type e = (x);
\&
\&  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&  type r = (x+2)*3 ..  y/2 ;
\&  ^D
\&  type_decl_is_TYPE_ID_type(
\&    TERMINAL[TYPE],
\&    TERMINAL[r],
\&    RANGE(
\&      expr_is_expr_TIMES_expr(
\&        expr_is_LP_expr_RP(
\&          expr_is_expr_PLUS_expr(
\&            RangeID(
\&              TERMINAL[x]
\&            ),
\&            expr_is_NUM(
\&              TERMINAL[2]
\&            )
\&          )
\&        ),
\&        expr_is_NUM(
\&          TERMINAL[3]
\&        )
\&      ),
\&      TERMINAL[..],
\&      expr_is_expr_DIV_expr(
\&        RangeID(
\&          TERMINAL[y]
\&        ),
\&        expr_is_NUM(
\&          TERMINAL[2]
\&        )
\&      )
\&    )
\&  )
\&  ~/LEyapp/examples/debuggingtut$ ./pascalenumeratedvsrangesolvedviadyn.pm \-t
\&  Try this input:
\&      type 
\&      r
\&      =
\&      (x)
\&      ..
\&      y
\&      ;
\&
\&  Here other inputs you can try:
\&
\&      type r = (x+2)*3 ..  y/2 ;
\&      type e = (x, y, z);
\&      type e = (x);
\&
\&  Press CTRL\-D (CTRL\-W in windows) to produce the end\-of\-file
\&  type e = (x);
\&  ^D
\&  type_decl_is_TYPE_ID_type(
\&    TERMINAL[TYPE],
\&    TERMINAL[e],
\&    ENUM(
\&      EnumID(
\&        TERMINAL[x]
\&      )
\&    )
\&  )
.Ve
.SS "\fIPostponed Conflict Resolution\fP: Shift-Reduce Conflicts"
.IX Subsection "Postponed Conflict Resolution: Shift-Reduce Conflicts"
The program in \f(CW\*(C`examples/debuggingtut/DynamicallyChangingTheParser2.eyp\*(C'\fR illustrates how the postponed
conflict strategy is used for shift-reduce conflicts.
This is an extension of the grammar in \f(CW\*(C`examples/debuggingtut/Debug.eyp\*(C'\fR.
The generated language is constituted by sequences like:
.PP
.Vb 1
\&    { D; D; S; S; S; } {D; S} { S }
.Ve
.PP
As you remember the conflict was:
.PP
.Vb 2
\&  ~/LEyapp/examples/debuggingtut$ sed \-ne \*(Aq/^St.*13:/,/^St.*14/p\*(Aq DynamicallyChangingTheParser.output  
\&  State 13:
\&
\&      ds \-> D conflict . \*(Aq;\*(Aq ds   (Rule 6)
\&      ds \-> D conflict .  (Rule 7)
\&
\&      \*(Aq;\*(Aq shift, and go to state 16
\&
\&      \*(Aq;\*(Aq [reduce using rule 7 (ds)]
\&
\&  State 14:
.Ve
.PP
The \f(CW\*(C`conflict\*(C'\fR handler below sets the \s-1LR\s0 action
to reduce by the production with name \f(CW\*(C`D1\*(C'\fR
.PP
.Vb 1
\&                 ds \-> D
.Ve
.PP
in the presence of token \f(CW\*(Aq;\*(Aq\fR if indeed is the last \f(CW\*(AqD\*(Aq\fR, that is, if:
.PP
.Vb 1
\&       ${$self\->input()} =~ m{^\es*;\es*S}
.Ve
.PP
Otherwise we set the \f(CW\*(C`shift\*(C'\fR action via a call to the 
\&\f(CW\*(C`YYSetShift\*(C'\fR method.
.PP
.Vb 10
\&  ~/LEyapp/examples/debuggingtut$ sed \-ne \*(Aq30,$p\*(Aq DynamicallyChangingTheParser.eyp | cat \-n
\&     1  %token D S
\&     2  
\&     3  %tree bypass
\&     4  
\&     5  # Expect just 1 shift\-reduce conflict
\&     6  %expect 1 
\&     7  
\&     8  %%
\&     9  p: %name PROG
\&    10      block +
\&    11  ;
\&    12  
\&    13  block:
\&    14      %name BLOCK_DS
\&    15      \*(Aq{\*(Aq ds \*(Aq;\*(Aq ss \*(Aq}\*(Aq 
\&    16    | %name BLOCK_S
\&    17      \*(Aq{\*(Aq ss \*(Aq}\*(Aq
\&    18  ;
\&    19  
\&    20  ds:
\&    21      %name D2
\&    22      D conflict \*(Aq;\*(Aq ds    
\&    23    | %name D1
\&    24      D conflict        
\&    25  ;
\&    26  
\&    27  ss:
\&    28      %name S2
\&    29      S \*(Aq;\*(Aq ss      
\&    30    | %name S1
\&    31      S       
\&    32  ;
\&    33  
\&    34  conflict:
\&    35        /* empty. This action solves the conflict using dynamic precedence */
\&    36        {
\&    37          my $self = shift;
\&    38  
\&    39          if (${$self\->input()} =~ m{^\es*;\es*S}) {
\&    40            $self\->YYSetReduce(\*(Aq;\*(Aq, \*(AqD1\*(Aq )
\&    41          }
\&    42          else {
\&    43            $self\->YYSetShift(\*(Aq;\*(Aq)
\&    44          }
\&    45  
\&    46          undef; # skip this node in the AST
\&    47        }
\&    48  ;
\&    49  
\&    50  %%
\&    51  
\&    52  my $prompt = \*(AqProvide a statement like "{D; S} {D; D; S}" and press <CR><CTRL\-D>: \*(Aq;
\&    53  _\|_PACKAGE_\|_\->main($prompt) unless caller;
.Ve
.SH "NAMING SCHEMES"
.IX Header "NAMING SCHEMES"
Explicit names can be given to grammar productions
via the \f(CW%name\fR directive. An alternative to explicitly gave 
names to rules is to define a \fInaming scheme\fR via the Eyapp directive
\&\f(CW%namingscheme\fR. This can be helpful when you inherit a large grammar
and want to quickly build a parser. The \s-1ANSI C\s0 parser in 
\&\f(CW\*(C`examples/languages/C/ansic.eyp\*(C'\fR is a good example. Another
example is the Pascal parser in \f(CW\*(C`examples/languages/pascal/pascal.eyp\*(C'\fR.
.PP
The Eyapp directive \f(CW%namingscheme\fR is followed by some Perl code. Such Perl
code must return a reference to a subroutine that will be called each time a new
production right hand side is parsed. The subroutine returns the name for the production.
.PP
The Perl code defining the handler receives a \f(CW\*(C`Parse::Eyapp\*(C'\fR object
that describes the grammar. The code after the \f(CW%namingscheme\fR
directive is evaluated during the early phases of the compilation of the input 
grammar. As an example of how to set a naming scheme, 
see lines 22\-38 below (you can find this example and others in the directory
\&\f(CW\*(C`examples/naming\*(C'\fR of the accompanying distribution):
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ cat \-n GiveNamesToCalc.eyp
\&     1  # GiveNamesToCalc.eyp
\&     2  %right  \*(Aq=\*(Aq
\&     3  %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq
\&     4  %left   \*(Aq*\*(Aq \*(Aq/\*(Aq
\&     5  %left   NEG
\&     6  %right  \*(Aq^\*(Aq
\&     7
\&     8  %tree bypass
\&     9
\&    10  %{
\&    11  use base q{Tail};
\&    12
\&    13  sub exp_is_NUM::info {
\&    14    my $self = shift;
\&    15
\&    16    $self\->{attr}[0];
\&    17  }
\&    18
\&    19  *exp_is_VAR::info = *var_is_VAR::info = \e&exp_is_NUM::info;
\&    20  %}
\&    21
\&    22  %namingscheme {
\&    23    #Receives a Parse::Eyapp object describing the grammar
\&    24    my $self = shift;
\&    25
\&    26    $self\->tokennames(
\&    27      \*(Aq=\*(Aq => \*(AqASSIGN\*(Aq,
\&    28      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    29      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    30      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    31      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    32      \*(Aq^\*(Aq => \*(AqEXP\*(Aq,
\&    33    );
\&    34
\&    35    # returns the handler that will give names
\&    36    # to the right hand sides
\&    37    \e&give_token_name;
\&    38  }
\&    39  %%
\&    40
\&    41  line:
\&    42      exp
\&    43  ;
\&    44
\&    45  exp:
\&    46      NUM
\&    47    | VAR
\&    48    | var \*(Aq=\*(Aq exp
\&    49    | exp \*(Aq+\*(Aq exp
\&    50    | exp \*(Aq\-\*(Aq exp
\&    51    | exp \*(Aq*\*(Aq exp
\&    52    | exp \*(Aq/\*(Aq exp
\&    53    | %no bypass exp_is_NEG
\&    54       \*(Aq\-\*(Aq exp %prec NEG
\&    55    | exp \*(Aq^\*(Aq exp
\&    56    | \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&    57  ;
\&    58
\&    59  var:
\&    60      VAR
\&    61  ;
\&    62  %%
\&    63
\&    64  unless (caller) {
\&    65    my $t = _\|_PACKAGE_\|_\->main(@ARGV);
\&    66    print $t\->str."\en";
\&    67  }
.Ve
.PP
The example uses a naming scheme that is provided by \f(CW\*(C`Parse::Eyapp\*(C'\fR: \f(CW\*(C`Parse::Eyapp::Grammar::give_token_name\*(C'\fR.
The current provided naming schemes handlers are:
.IP "\(bu" 2
\&\f(CW\*(C`give_default_name\*(C'\fR: The name of the production is the name of the Left Hand Side of the Production Rule
concatenated with an underscore and the index of the production
.IP "\(bu" 2
\&\f(CW\*(C`give_lhs_name\*(C'\fR: The name of the production is the name of the Left Hand Side of the Production Rule (this
is the naming scheme used by the \f(CW%tree\fR directive when no explicit name was given)
.IP "\(bu" 2
\&\f(CW\*(C`give_token_name\*(C'\fR: The name of the production is the Left Hand Side of the Production Rule followed by the 
word \f(CW\*(C`_is_\*(C'\fR followed by the concatenation of the names of the tokens in the right and side (separated by underscores).
.PP
All of these handlers are implemented inside the class \f(CW\*(C`Parse::Eyapp::Grammar\*(C'\fR. There is no need at line 
37 to explicit the class name prefix since the naming scheme code is evaluated inside such class:
.PP
.Vb 10
\&    22  %namingscheme {
\&    23    #Receives a Parse::Eyapp object describing the grammar
\&    24    my $self = shift;
\&    25
\&    26    $self\->tokennames(
\&    27      \*(Aq=\*(Aq => \*(AqASSIGN\*(Aq,
\&    28      \*(Aq+\*(Aq => \*(AqPLUS\*(Aq,
\&    29      \*(Aq*\*(Aq => \*(AqTIMES\*(Aq,
\&    30      \*(Aq\-\*(Aq => \*(AqMINUS\*(Aq,
\&    31      \*(Aq/\*(Aq => \*(AqDIV\*(Aq,
\&    32      \*(Aq^\*(Aq => \*(AqEXP\*(Aq,
\&    33    );
\&    34
\&    35    # returns the handler that will give names
\&    36    # to the right hand sides
\&    37    \e&give_token_name;
\&    38  }
.Ve
.PP
As it is illustrated in this example, the method \f(CW\*(C`tokennames\*(C'\fR of \f(CW\*(C`Parse::Eyapp\*(C'\fR
objects provide a way to give identifier names to tokens that are defined by strings.
When we execute the former module/program (modulino) with input \f(CW\*(C`a=2*\-3\*(C'\fR we got the following
output:
.PP
.Vb 5
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ eyapp \-b \*(Aq\*(Aq GiveNamesToCalc.eyp
\&  lusasoft@LusaSoft:~/src/perl/Eyapp/examples/naming$ ./GiveNamesToCalc.pm
\&  Expressions. Press CTRL\-D (Unix) or CTRL\-Z (Windows) to finish:
\&  a=2*\-3
\&  line_is_exp(var_is_VAR[a],exp_is_TIMES(exp_is_NUM[2],exp_is_NEG(exp_is_NUM[3])))
.Ve
.PP
For each production rule the handler is called with arguments:
.IP "\(bu" 2
the \f(CW\*(C`Parse::Eyapp\*(C'\fR object,
.IP "\(bu" 2
the production index (inside the grammar),
.IP "\(bu" 2
the left hand side
symbol and a reference to a list with the symbols in the right hand side.
.PP
The following code of some version of \f(CW\*(C`give_token_name\*(C'\fR exemplifies how a
naming scheme handler can be written:
.PP
.Vb 10
\&  lusasoft@LusaSoft:~/src/perl/Eyapp$ sed \-ne \*(Aq101,132p\*(Aq lib/Parse/Eyapp/Grammar.pm | cat \-n
\&     1  sub give_token_name {
\&     2    my ($self, $index, $lhs, $rhs) = @_;
\&     3
\&     4    my @rhs = @$rhs;
\&     5    $rhs = \*(Aq\*(Aq;
\&     6
\&     7    unless (@rhs) { # Empty RHS
\&     8      return $lhs.\*(Aq_is_empty\*(Aq;
\&     9    }
\&    10
\&    11    my $names = $self\->{GRAMMAR}{TOKENNAMES} || {};
\&    12    for (@rhs) {
\&    13      if ($self\->is_token($_)) {
\&    14        s/^\*(Aq(.*)\*(Aq$/$1/;
\&    15        my $name = $names\->{$_} || \*(Aq\*(Aq;
\&    16        unless ($name) {
\&    17          $name = $_ if /^\ew+$/;
\&    18        }
\&    19        $rhs .= "_$name" if $name;
\&    20      }
\&    21    }
\&    22
\&    23    unless ($rhs) { # no \*(Aqword\*(Aq tokens in the RHS
\&    24      for (@rhs) {
\&    25        $rhs .= "_$_" if /^\ew+$/;
\&    26      }
\&    27    }
\&    28
\&    29    # check if another production with such name exists?
\&    30    my $name = $lhs.\*(Aq_is\*(Aq.$rhs;
\&    31    return $name;
\&    32  }
.Ve
.ie n .SH """Parse::Eyapp"" METHODS"
.el .SH "\f(CWParse::Eyapp\fP METHODS"
.IX Header "Parse::Eyapp METHODS"
A \f(CW\*(C`Parse::Eyapp\*(C'\fR object holds the information 
about the \f(CW\*(C`Eyapp\*(C'\fR input grammar: parsing tables,
conflicts, semantic actions, etc.
.SS "Parse::Eyapp\->new_grammar"
.IX Subsection "Parse::Eyapp->new_grammar"
To translate an Eyapp grammar you must use
either the eyapp script or call the class constructor 
\&\f(CW\*(C`new_grammar\*(C'\fR.
The \f(CW\*(C`Parse::Eyapp\*(C'\fR method \f(CW\*(C`Parse::Eyapp\->new_grammar(input=>$grammar)\*(C'\fR 
creates a package containing the code that implements a \s-1LALR\s0 parser
for the input grammar:
.PP
.Vb 8
\&    my $p = Parse::Eyapp\->new_grammar(
\&      input=>$translationscheme,
\&      classname=>\*(AqGrammar\*(Aq,
\&      firstline => 6,
\&      outputfile => \*(Aqmain\*(Aq
\&    );
\&    die $p\->Warnings if $p\->Warnings;
\&    my $new_parser_for_grammar = Grammar\->new();
.Ve
.PP
The method returns a \f(CW\*(C`Parse::Eyapp\*(C'\fR object.
.PP
You can check the object to see if there were
problems during the construction of the parser
for your grammar:
.PP
.Vb 1
\&                die $p\->qtables() if $p\->Warnings;
.Ve
.PP
The method \f(CW\*(C`Warnings\*(C'\fR returns
the warnings produced during the parsing. The absence of warnings indicates
the correctness of the input program.
.PP
The call to \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR generates
a class/package containing the parser for
your input grammar. Such package lives in the namespace 
determined by the \f(CW\*(C`classname\*(C'\fR argument
of \f(CW\*(C`new_grammar\*(C'\fR. To create a parser for the 
grammar you call the constructor \f(CW\*(C`new\*(C'\fR of
the just created class:
.PP
.Vb 1
\&    my $new_parser_for_grammar = Grammar\->new();
.Ve
.PP
The meaning of the arguments of  \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR 
is:
.IP "\-   input" 4
.IX Item "- input"
The string containing the input
.IP "\-   classname" 4
.IX Item "- classname"
The name of the package that will held the code for the \s-1LALR\s0 parser.
The package of the caller will be used as default if none is specified.
.IP "\-   firstline" 4
.IX Item "- firstline"
For error diagnostics. The line where the definition of the Eyapp
grammar starts.
.IP "\-   linenumbers" 4
.IX Item "- linenumbers"
Include/not include  \f(CW\*(C`# line directives\*(C'\fR in the generated code
.IP "\-   outputfile" 4
.IX Item "- outputfile"
If defined the generated code fill be dumped in the specified filename (with extension .pm)
and the \s-1LALR\s0 information ambiguities and conflicts) in the specified filename 
with extension .output.
.ie n .SS "$eyapp\->qtables"
.el .SS "\f(CW$eyapp\fP\->qtables"
.IX Subsection "$eyapp->qtables"
Returns a string containing information
on warnings, ambiguities, conflicts, rules and the generated \s-1DFA\s0 tables.
Is the same information in \f(CW\*(C`file.output\*(C'\fR when using the command 
\&\f(CW\*(C`eyapp \-v file.eyp\*(C'\fR.
.PP
.Vb 6
\&  my $p = Parse::Eyapp\->new_grammar(
\&    input=>$eyappprogram,
\&    classname=>\*(AqSimpleC\*(Aq,
\&    outputfile => \*(AqSimpleC.pm\*(Aq,
\&    firstline=>12,
\&  );
\&
\&  print $p\->qtables() if $p\->Warnings;
.Ve
.ie n .SS "$eyapp\->outputtables"
.el .SS "\f(CW$eyapp\fP\->outputtables"
.IX Subsection "$eyapp->outputtables"
It receives two arguments
.PP
.Vb 1
\&  $eyapp\->outputtables($path, $base)
.Ve
.PP
Similar to \f(CW\*(C`qtables\*(C'\fR but prints 
the information on warnings, conflicts and rules
to the specified \f(CW\*(C`$path/$base\*(C'\fR.
.ie n .SS "$eyapp\->Warnings"
.el .SS "\f(CW$eyapp\fP\->Warnings"
.IX Subsection "$eyapp->Warnings"
Returns the warnings resulting from compiling the grammar:
.PP
.Vb 7
\&  my $p = Parse::Eyapp\->new_grammar(
\&    input=>$translationscheme,
\&    classname=>\*(Aqmain\*(Aq,
\&    firstline => 6,
\&    outputfile => \*(Aqmain\*(Aq
\&  );
\&  die $p\->Warnings if $p\->Warnings;
.Ve
.PP
Returns the empty string if there were no conflicts.
.ie n .SS "$eyapp\->ShowDfa"
.el .SS "\f(CW$eyapp\fP\->ShowDfa"
.IX Subsection "$eyapp->ShowDfa"
Returns a string with the information about the \s-1LALR\s0 generated
\&\s-1DFA.\s0
.ie n .SS "$eyapp\->Summary"
.el .SS "\f(CW$eyapp\fP\->Summary"
.IX Subsection "$eyapp->Summary"
Returns a string with summary information about the compilation
of the grammar. No arguments.
.ie n .SS "$eyapp\->Conflicts"
.el .SS "\f(CW$eyapp\fP\->Conflicts"
.IX Subsection "$eyapp->Conflicts"
Returns a string with summary information about the conflicts
that arose when compiling the grammar. No arguments.
.ie n .SS "$eyapp\->DfaTable"
.el .SS "\f(CW$eyapp\fP\->DfaTable"
.IX Subsection "$eyapp->DfaTable"
Returns a string with the parsing tables
.ie n .SS "$eyapp\->tokennames"
.el .SS "\f(CW$eyapp\fP\->tokennames"
.IX Subsection "$eyapp->tokennames"
Used when defining a naming scheme
to associate identifiers with (usually string) tokens.
See section \s-1NAMING SCHEMES\s0 of Parse::Eyapp
.ie n .SH "METHODS AVAILABLE IN THE GENERATED ""CLASS"""
.el .SH "METHODS AVAILABLE IN THE GENERATED \f(CWCLASS\fP"
.IX Header "METHODS AVAILABLE IN THE GENERATED CLASS"
See the documentation for Parse::Eyapp::Driver
.ie n .SH """Parse::Eyapp::Parse"" OBJECTS"
.el .SH "\f(CWParse::Eyapp::Parse\fP OBJECTS"
.IX Header "Parse::Eyapp::Parse OBJECTS"
The parser for the \f(CW\*(C`Eyapp\*(C'\fR language
was written and generated
using \f(CW\*(C`Parse::Eyapp\*(C'\fR and the \f(CW\*(C`eyapp\*(C'\fR compiler (actually
the first version 
was bootstrapped using the yapp compiler).
The Eyapp program parsing the \f(CW\*(C`Eyapp\*(C'\fR language
is in the file \f(CW\*(C`Parse/Eyapp/Parse.yp\*(C'\fR 
in the \f(CW\*(C`Parse::Eyapp\*(C'\fR distribution.
Therefore \f(CW\*(C`Parse::Eyapp::Parse\*(C'\fR 
objects have all the methods in \f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR.
.PP
A \f(CW\*(C`Parse::Eyapp::Parse\*(C'\fR is nothing but a particular kind of \f(CW\*(C`Parse::Eyapp\*(C'\fR
parser: \fIthe one that parses\fR \f(CW\*(C`Eyapp\*(C'\fR \fIgrammars\fR.
.ie n .SH "TRANSLATION SCHEMES AND THE %metatree DIRECTIVE"
.el .SH "TRANSLATION SCHEMES AND THE \f(CW%metatree\fP DIRECTIVE"
.IX Header "TRANSLATION SCHEMES AND THE %metatree DIRECTIVE"
See the documentation for Parse::Eyapp::translationschemestut
.SH "THE TREEREGEXP LANGUAGE"
.IX Header "THE TREEREGEXP LANGUAGE"
See the documentation for Parse::Eyapp::Treeregexp
.SH "MANIPULATING ABSTRACT SYNTAX TREES"
.IX Header "MANIPULATING ABSTRACT SYNTAX TREES"
See the documentation for Parse::Eyapp::Node
.SH "TREE TRANSFORMATION OBJECTS"
.IX Header "TREE TRANSFORMATION OBJECTS"
See the documentation for Parse::Eyapp::YATW
.ie n .SH "COMPILING WITH ""eyapp"" AND ""treereg"""
.el .SH "COMPILING WITH \f(CWeyapp\fP AND \f(CWtreereg\fP"
.IX Header "COMPILING WITH eyapp AND treereg"
A Treeregexp program can be isolated in a file
an compiled with the program \f(CW\*(C`treereg\*(C'\fR.
The default extension is \f(CW\*(C`.trg\*(C'\fR.
See the following example:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/Eyapp$ cat \-n Shift.trg
\&     1  # File: Shift.trg
\&     2  {
\&     3  =head1 SYNOPSIS
\&     4
\&     5  Compile the grammar and tree transformations first:
\&     6
\&     7       $ eyapp Rule5
\&     8       $ treereg Shift
\&     9
\&    10  Then execute it with:
\&    11
\&    12       $ ./useruleandshift.pl
\&    13
\&    14  Try input:
\&    15
\&    16       a = b * 8
\&    17
\&    18  =cut
\&    19  }
\&    20
\&    21  {
\&    22    sub log2 {
\&    23      my $n = shift;
\&    24      return log($n)/log(2);
\&    25    }
\&    26
\&    27    my $power;
\&    28  }
\&    29  mult2shift: TIMES($e, NUM($m))
\&    30    and { $power = log2($m\->{attr}); (1 << $power) == $m\->{attr} } => {
\&    31      $_[0]\->delete(1);
\&    32      $_[0]\->{shift} = $power;
\&    33      $_[0]\->type(\*(AqSHIFTLEFT\*(Aq);
\&    34    }
.Ve
.PP
Note that auxiliary support code can be inserted at any point
between transformations (lines 21\-28). The code will be inserted (without 
the defining curly brackets) at that point. Note also
that the lexical variable \f(CW$power\fR is visible
inside the definition of the \f(CW\*(C`mult2shift\*(C'\fR transformation.
.PP
A treeregexp like \f(CW$e\fR matches any node (line 29). A reference to the node
is saved in the lexical variable \f(CW$e\fR. The scope of the variable
\&\f(CW$e\fR is the current tree transformation, i.e. \f(CW\*(C`mult2shift\*(C'\fR.
Such kind of treeregexps are called \fBscalar treeregexp\fRs.
.PP
The call to the \f(CW\*(C`delete\*(C'\fR method at line 31 deletes 
the second child of the node being visited (i.e. \f(CW\*(C`NUM($m)\*(C'\fR).
.PP
The call to \f(CW\*(C`type\*(C'\fR at line 33 retypes the node
as a \f(CW\*(C`SHIFTLEFT\*(C'\fR node.
.PP
The program is compiled using the script \f(CW\*(C`treereg\*(C'\fR:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/Eyapp$ eyapp Rule5
\&  pl@nereida:~/LEyapp/examples/Eyapp$ treereg Shift
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ls \-ltr | tail \-2
\&  \-rw\-r\-\-r\-\- 1 pl users 6439 2008\-09\-02 08:59 Rule5.pm
\&  \-rw\-r\-\-r\-\- 1 pl users 1424 2008\-09\-02 08:59 Shift.pm
.Ve
.PP
The Grammar \f(CW\*(C`examples/Eyapp/Rule5.yp\*(C'\fR is similar to the one in the \*(L"\s-1SYNOPSIS\*(R"\s0
section. Module \f(CW\*(C`Rule5.pm\*(C'\fR contains the parser.
The module \f(CW\*(C`Shift.pm\*(C'\fR contains the code implementing
the tree transformations.
.PP
The client program follows:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/Eyapp$ cat \-n useruleandshift.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Rule5;
\&     4  use Parse::Eyapp::Base qw(insert_function);
\&     5  use Shift;
\&     6
\&     7  =head1 SYNOPSIS
\&     8
\&     9  Compile the grammar and tree transformations first:
\&    10
\&    11       $ eyapp Rule5
\&    12       $ treereg Shift
\&    13
\&    14  Then execute it with:
\&    15
\&    16       $ ./useruleandshift.pl
\&    17
\&    18  Try inputs:
\&    19
\&    20       a = b * 8
\&    21       d = c * 16
\&    22
\&    23  =cut
\&    24
\&    25  sub SHIFTLEFT::info { $_[0]{shift} }
\&    26  insert_function(\*(AqTERMINAL::info\*(Aq, \e&TERMINAL::attr);
\&    27
\&    28  my $parser = new Rule5();
\&    29  $parser\->slurp_file(\*(Aq\*(Aq,\*(AqArithmetic expression: \*(Aq, "\en");
\&    30  my $t = $parser\->Run;
\&    31  unless ($parser\->YYNberr) {
\&    32    print "***********\en",$t\->str,"\en";
\&    33    $t\->s(@Shift::all);
\&    34    print "***********\en",$t\->str,"\en";
\&    35  }
.Ve
.PP
Lines 25 and 26 provide the node classes \f(CW\*(C`TERMINAL\*(C'\fR and \f(CW\*(C`SHIFTLEFT\*(C'\fR of \f(CW\*(C`info\*(C'\fR
methods to be used during the calls to the \f(CW\*(C`str\*(C'\fR method (lines 32 and 34).
.PP
Multiplications by a power of two are substituted by the corresponding shifts:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ./useruleandshift.pl
\&  Arithmetic expression: a = b * 8
\&  ***********
\&  ASSIGN(TERMINAL[a],TIMES(VAR(TERMINAL[b]),NUM(TERMINAL[8])))
\&  ***********
\&  ASSIGN(TERMINAL[a],SHIFTLEFT[3](VAR(TERMINAL[b])))
.Ve
.SS "Compiling: More Options"
.IX Subsection "Compiling: More Options"
See files \f(CW\*(C`Rule9.yp\*(C'\fR, \f(CW\*(C`Transform4.trg\*(C'\fR and \f(CW\*(C`foldand0rule9_4.pl\*(C'\fR 
in the examples directory for a more detailed vision of this example. 
File \f(CW\*(C`Rule9.yp\*(C'\fR is very much like the grammar
in the \*(L"\s-1SYNOPSIS\*(R"\s0 example.
To compile the grammar \f(CW\*(C`Rule9.yp\*(C'\fR and the treeregexp
file \f(CW\*(C`Transform4.trg\*(C'\fR use the commands:
.PP
.Vb 1
\&                eyapp \-m \*(AqCalc\*(Aq Rule9.yp
.Ve
.PP
That will produce a file \f(CW\*(C`Calc.pm\*(C'\fR containing a package \f(CW\*(C`Calc\*(C'\fR
that implements the \s-1LALR\s0 parser. 
Then the command:
.PP
.Vb 1
\&                treereg \-o T.pm \-p \*(AqR::\*(Aq \-m T Transform4
.Ve
.PP
produces a file \f(CW\*(C`T.pm\*(C'\fR containing a package \f(CW\*(C`T\*(C'\fR that implements
the tree transformation program. The \f(CW\*(C`\-p\*(C'\fR option announces that
node classes are prefixed by \f(CW\*(AqR::\*(Aq\fR.
.PP
With such parameters the client program uses the generated modules as 
follows:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/Eyapp$ cat \-n foldand0rule9_4.pl                   
\&     1  #!/usr/bin/env perl
\&     2  =head1 SYNOPSIS
\&     3
\&     4     foldand0rule9_4.pl
\&     5
\&     6  Try inputs:
\&     7
\&     8     a = 2*3+4   # Reducido a: a = 6
\&     9     a = 2*[3+b] # syntax error
\&    10     a = 2*3*b   # Reducido a: a = 6*b
\&    11
\&    12  Compile it with
\&    13
\&    14           eyapp \-m \*(AqCalc\*(Aq Rule9.yp
\&    15           treereg \-o T.pm \-p \*(AqR::\*(Aq \-m T Transform4
\&    16
\&    17  =cut
\&    18
\&    19  use warnings;
\&    20  use strict;
\&    21  use Calc;
\&    22  use T;
\&    23
\&    24  sub R::TERMINAL::info { $_[0]{attr} }
\&    25
\&    26  my $parser = new Calc(yyprefix => "R::");
\&    27                     # stdin, prompt              , read one line at time
\&    28  $parser\->slurp_file(\*(Aq\*(Aq,\*(AqArithmetic expression: \*(Aq, "\en");
\&    29
\&    30  my $t = $parser\->YYParse;
\&    31
\&    32  unless ($parser\->YYNberr) {
\&    33    print "\en***** Tree before the transformations ******\en";
\&    34    print $t\->str."\en";
\&    35
\&    36    $t\->s(@T::all);
\&    37    print "\en***** Tree after the transformations were applied ******\en";
\&    38    print $t\->str."\en";
\&    39  }
.Ve
.PP
running the program produces the following output:
.PP
.Vb 2
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ./foldand0rule9_4.pl
\&  Arithmetic expression: a = 2*3
\&
\&  ***** Tree before the transformations ******
\&  R::ASSIGN(R::TERMINAL[a],R::TERMINAL[=],R::TIMES(R::NUM(R::TERMINAL[2]),R::TERMINAL[*],R::NUM(R::TERMINAL[3])))
\&
\&  ***** Tree after the transformations were applied ******
\&  R::ASSIGN(R::TERMINAL[a],R::TERMINAL[=],R::NUM(R::TERMINAL[6]))
\&
\&  pl@nereida:~/LEyapp/examples/Eyapp$ ./foldand0rule9_4.pl
\&  Arithmetic expression: a = 2*[3+b]
\&
\&  Syntax error near \*(Aq[\*(Aq.
\&  Expected one of these terminals: \*(Aq\-\*(Aq \*(AqNUM\*(Aq \*(AqVAR\*(Aq \*(Aq(\*(Aq
.Ve
.SH "Parse::Eyapp::Scope: SUPPORT FOR SCOPE ANALYSIS"
.IX Header "Parse::Eyapp::Scope: SUPPORT FOR SCOPE ANALYSIS"
See the documentation for Parse::Eyapp::Scope
.SH "MISCELLANEOUS SUPPORT FUNCTIONS IN Parse::Eyapp::Base"
.IX Header "MISCELLANEOUS SUPPORT FUNCTIONS IN Parse::Eyapp::Base"
See the documentation in Parse::Eyapp::Base
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Remember to set the environment variable \f(CW\*(C`PERL5LIB\*(C'\fR
if you decide to install \f(CW\*(C`Parse::Eyapp\*(C'\fR at a location other than the standard.
For example, on a bash or sh:
.PP
.Vb 1
\&  export PERL5LIB=/home/user/wherever_it_is/lib/:$PERL5LIB
.Ve
.PP
on a \f(CW\*(C`csh\*(C'\fR or \f(CW\*(C`tcsh\*(C'\fR
.PP
.Vb 1
\&  setenv PERL5LIB /home/user/wherever_it_is/lib/:$PERL5LIB
.Ve
.PP
Be sure the scripts \f(CW\*(C`eyapp\*(C'\fR and \f(CW\*(C`treereg\*(C'\fR are in the execution \s-1PATH.\s0
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
This distribution depends on the following modules:
.IP "\(bu" 4
List::Util
.IP "\(bu" 4
Data::Dumper
.IP "\(bu" 4
Pod::Usage
.PP
It seems that List::Util is in the core of Perl
distributions since version 5.73:
.PP
.Vb 2
\&  > perl \-MModule::CoreList \-e \*(Aqprint Module::CoreList\->first_release("List::Util")\*(Aq
\&  5.007003
.Ve
.PP
and Data::Dumper is also in the core since 5.5:
.PP
.Vb 2
\&  > perl \-MModule::CoreList \-e \*(Aqprint Module::CoreList\->first_release("Data::Dumper")\*(Aq
\&  5.005
.Ve
.PP
and Pod::Usage is also in the core since 5.6:
.PP
.Vb 2
\&  > perl \-MModule::CoreList \-e \*(Aqprint Module::CoreList\->first_release("Pod::Usage")\*(Aq
\&  5.006
.Ve
.PP
I also recommend the following modules:
.IP "\(bu" 4
Test::Pod
.IP "\(bu" 4
Test::Warn
.IP "\(bu" 4
Test::Exception
.PP
The dependence on  Test::Warn, Test::Pod and Test::Exception is merely for
the execution of tests. If the modules aren't installed the tests
depending on them will be skipped.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
To install it, follow the traditional mantra:
.PP
.Vb 4
\&                                 perl Makefile.PL
\&                                 make
\&                                 make test
\&                                 make install
.Ve
.PP
Also:
.IP "\(bu" 4
Make a local copy of the \f(CW\*(C`examples/\*(C'\fR directory in this distribution. They contain
the examples used in the tutorials
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
.IP "\(bu" 4
The way Parse::Eyapp parses Perl code is verbatim the way it does Parse::Yapp 1.05.
Quoting Francois Desarmenien Parse::Yapp documentation:
.Sp
"Be aware that matching braces in Perl is much more difficult than
in C: inside strings they don't need to match. While in C it is
very easy to detect the beginning of a string construct, or a
single character, it is much more difficult in Perl, as there
are so many ways of writing such literals. So there is no check
for that today. If you need a brace in a double-quoted string, just
quote it (\f(CW\*(C`\e{\*(C'\fR or \f(CW\*(C`\e}\*(C'\fR). For single-quoted strings, you will need
to make a comment matching it \fIin the right order\fR.
Sorry for the inconvenience.
.Sp
.Vb 9
\&    {
\&        "{ My string block }".
\&        "\e{ My other string block \e}".
\&        qq/ My unmatched brace \e} /.
\&        # Force the match: {
\&        q/ for my closing brace } /
\&        q/ My opening brace { /
\&        # must be closed: }
\&    }
.Ve
.Sp
All of these constructs should work."
.Sp
Alternative \fIexact solutions\fR were tried but resulted in much slower
code. Therefore, until something faster is found, I rather prefer for
Parse::Eyapp to live with this limitation.
.Sp
The same limitation may appear inside header code (code between \f(CW\*(C`%{\*(C'\fR and \f(CW\*(C`%}\*(C'\fR)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
The project home is at <http://code.google.com/p/parse\-eyapp/>.
Use a subversion client to anonymously check out the latest project source code:
.Sp
.Vb 1
\&   svn checkout http://parse\-eyapp.googlecode.com/svn/trunk/ parse\-eyapp\-read\-only
.Ve
.IP "\(bu" 4
The tutorial \fIParsing Strings and Trees with\fR \f(CW\*(C`Parse::Eyapp\*(C'\fR
(An Introduction to Compiler Construction in seven pages) in
<http://nereida.deioc.ull.es/~pl/eyapsimple/>
.IP "\(bu" 4
Parse::Eyapp, 
Parse::Eyapp::eyapplanguageref, 
Parse::Eyapp::debuggingtut,
Parse::Eyapp::defaultactionsintro,
Parse::Eyapp::translationschemestut,
Parse::Eyapp::Driver,
Parse::Eyapp::Node,
Parse::Eyapp::YATW,
Parse::Eyapp::Treeregexp,
Parse::Eyapp::Scope,
Parse::Eyapp::Base,
Parse::Eyapp::datagenerationtut
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/languageintro.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/debuggingtut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/eyapplanguageref.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Treeregexp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Node.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/YATW.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Eyapp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Base.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/translationschemestut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/treematchingtut.pdf>
.IP "\(bu" 4
perldoc eyapp,
.IP "\(bu" 4
perldoc treereg,
.IP "\(bu" 4
perldoc vgg,
.IP "\(bu" 4
The Syntax Highlight file for vim at <http://www.vim.org/scripts/script.php?script_id=2453>
and <http://nereida.deioc.ull.es/~vim/>
.IP "\(bu" 4
\&\fIAnalisis Lexico y Sintactico\fR, (Notes for a course in compiler 
construction) by  Casiano Rodriguez-Leon. 
Available at  <http://nereida.deioc.ull.es/~pl/perlexamples/>
Is the more complete and reliable source for Parse::Eyapp. However is in Spanish.
.IP "\(bu" 4
Parse::Yapp,
.IP "\(bu" 4
Man pages of \fIyacc\fR\|(1) and
\&\fIbison\fR\|(1),
<http://www.delorie.com/gnu/docs/bison/bison.html>
.IP "\(bu" 4
Language::AttributeGrammar
.IP "\(bu" 4
Parse::RecDescent.
.IP "\(bu" 4
HOP::Parser
.IP "\(bu" 4
HOP::Lexer
.IP "\(bu" 4
ocamlyacc tutorial at 
<http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex\-ocamlyacc/ocamlyacc\-tutorial/ocamlyacc\-tutorial.html>
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "\(bu" 4
The classic Dragon's book \fICompilers: Principles, Techniques, and Tools\fR 
by Alfred V. Aho, Ravi Sethi and
Jeffrey D. Ullman (Addison-Wesley 1986)
.IP "\(bu" 4
\&\fI\s-1CS2121:\s0 The Implementation and Power of Programming Languages\fR
(See <http://www.cs.man.ac.uk/~pjj>, <http://www.cs.man.ac.uk/~pjj/complang/g2lr.html> 
and <http://www.cs.man.ac.uk/~pjj/cs2121/ho/ho.html>) by 
Pete Jinks
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE \s0(\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04
\&\s0(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601
\&\s0(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\*(R"\s0 in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 2636:" 4
.IX Item "Around line 2636:"
Non-ASCII character seen before =encoding in 'va\*'lida\en";'. Assuming \s-1ISO8859\-1\s0
                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp::Base.3pm                       0100644 0001750 0001750 00000055540 12566242262 024525  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::Base 3"
.TH Parse::Eyapp::Base 3 "2012-03-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::Base \- Miscellaneous support functions for Parse::Eyapp
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Parse::Eyapp::Base qw(:all)
.Ve
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
\&\f(CW\*(C`Parse::Eyapp::Base\*(C'\fR holds a set of utility functions that give support to the other 
modules that made \f(CW\*(C`Parse::Eyapp\*(C'\fR. Several of them are related to the dynamic use of methods 
and subroutines.
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.ie n .SS "Function ""insert_method"""
.el .SS "Function \f(CWinsert_method\fP"
.IX Subsection "Function insert_method"
Function \f(CW\*(C`insert_method\*(C'\fR receives as arguments
a list of class names, the name of the method that will be inserted in such classes
and a reference to the code implementing such method.
.PP
.Vb 1
\&          insert_method( qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq, sub { ... } )
.Ve
.PP
It inserts the method in the specified classes. 
A second way to call it is without the last argument, the handler:
.PP
.Vb 1
\&          insert_method( qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq )
.Ve
.PP
In such case the function is  deleted from all the specified classes
and it no longer exists.
.PP
The caller class is assumed if no classes are specified:
.PP
.Vb 1
\&          insert_method(\*(Aqsubname\*(Aq, sub { ... } )
.Ve
.PP
See the following session with the debugger:
.PP
.Vb 8
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> insert_method( qw{PLUS MINUS TIMES }, \*(Aqprintclass\*(Aq, sub { print "$_[0]\en" } )
\&    DB<3> $_\->printclass for qw{PLUS MINUS TIMES }
\&  PLUS
\&  MINUS
\&  TIMES
\&
\&    DB<4> insert_method( qw{PLUS MINUS TIMES }, \*(Aqprintclass\*(Aq)
\&    DB<5> print $_\->can(\*(Aqprintclass\*(Aq)?"Yes\en":"No\en"  for qw{PLUS MINUS TIMES }
\&  No
\&  No
\&  No
.Ve
.ie n .SS "Function ""insert_function"""
.el .SS "Function \f(CWinsert_function\fP"
.IX Subsection "Function insert_function"
It works as \f(CW\*(C`insert_method\*(C'\fR (see section \*(L"Function insert_method\*(R"), 
only that instead of classes 
receives the full names of the functions to install and a reference 
to the code implementing such function. See an example of call:
.PP
.Vb 4
\&  insert_function(
\&    qw{ FUNCTIONCALL::type_info VARARRAY::type_info VAR::type_info },
\&    \e&type_info
\&  );
.Ve
.PP
When the package is unspecified the caller package is assumed. See the following 
example:
.PP
.Vb 6
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> insert_function(\*(AqTutu::tata\*(Aq, \*(Aqtiti\*(Aq, sub{ print "Inside titi\en"})
\&    DB<3> titi()
\&  Inside titi
\&
\&    DB<4> Tutu::tata()
\&  Inside titi
.Ve
.ie n .SS "Function ""empty_method"""
.el .SS "Function \f(CWempty_method\fP"
.IX Subsection "Function empty_method"
The call to
.PP
.Vb 1
\&                           empty_method(qw{CLASSES ... }, \*(Aqsubname\*(Aq)
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&                          insert_method(qw{CLASSES ... }, \*(Aqsubname\*(Aq, sub {})
.Ve
.PP
Consequently \f(CW\*(C`empty_method\*(C'\fR replaces the current \f(CW\*(C`CODE\*(C'\fR for
function \f(CW\*(C`subname\*(C'\fR by an empty subroutine
.ie n .SS "Function ""push_method"""
.el .SS "Function \f(CWpush_method\fP"
.IX Subsection "Function push_method"
The call
.PP
.Vb 1
\&      push_method( qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq, sub { ... } )
.Ve
.PP
saves the current methods \f(CW\*(C`CLASS1::subname\*(C'\fR, \f(CW\*(C`CLASS2::subname\*(C'\fR, etc. in a stack
and proceeds to install the new handler specified through the last argument.
See an example:
.PP
.Vb 7
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> sub Tutu::titi { print "Inside first Tutu::titi!\en" }
\&    DB<3> push_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq, sub { print "New titi!\en" })
\&    DB<4> Tutu::titi()
\&  New titi!
\&
\&    DB<5> pop_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq)
\&    DB<6> Tutu::titi()
\&  Inside first Tutu::titi!
\&
\&    DB<7> push_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq) # No handler: sub Tutu::titi no longer exists
\&    DB<8> print "Can\*(Aqt titi\en" unless Tutu\->can(\*(Aqtiti\*(Aq)
\&  Can\*(Aqt titi
\&
\&    DB<9> pop_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq) # Give me the old sub
\&    DB<10> Tutu::titi()
\&  Inside first Tutu::titi!
.Ve
.PP
The caller class is assumed if no classes are specified.
.PP
In list context the \f(CW\*(C`push_method\*(C'\fR  function returns an array of pointers to the old
versions of the function. In a scalar context returns the first \f(CW\*(C`CODE\*(C'\fR reference. 
See the following example:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/YappWithDefaultAction/examples$ cat \-n returnedbypushmethod.pl
\&     1  #!/usr/local/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp::Base qw(:all);
\&     4
\&     5  sub tutu { "tutu" }
\&     6  sub Chum::tutu { "chum" }
\&     7
\&     8  my @classes = qw{main Cham Chum};
\&     9
\&    10  my %oldf;
\&    11  our $tutu = 5;
\&    12  our @tutu = 9..12;
\&    13  $Cham::tutu = 8;
\&    14  @Cham::tutu = 1..3;
\&    15
\&    16  @oldf{@classes} = push_method(@classes, \*(Aqtutu\*(Aq, sub { "titi" });
\&    17
\&    18  print "Calling new function \*(Aqtutu\*(Aq:".&tutu()."\en";
\&    19
\&    20  for (@classes) {
\&    21    if (defined($oldf{$_})) {
\&    22      print "Old function \*(Aqtutu\*(Aq in $_ gives: ".$oldf{$_}\->()."\en";
\&    23    }
\&    24    else {
\&    25       print "Function \*(Aqtutu\*(Aq wasn\*(Aqt defined in $_\en";
\&    26    }
\&    27  }
.Ve
.PP
The following session with the debugger shows that:
.IP "\(bu" 2
Package variables with the same name 
like \f(CW$tutu\fR or \f(CW@tutu\fR aren't changed by
\&\f(CW\*(C`insert_method\*(C'\fR
.IP "\(bu" 2
References to the old versions of function \f(CW\*(C`tutu\*(C'\fR
are returned by \f(CW\*(C`insert_method\*(C'\fR
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ perl \-wd returnedbypushmethod.pl
\&  main::(returnedbypushmethod.pl:8):
\&  8:      my @classes = qw{main Cham Chum};
\&    DB<1> c 18
\&  main::(returnedbypushmethod.pl:18):
\&  18:     print "Calling new function \*(Aqtutu\*(Aq:".&tutu()."\en";
\&    DB<2> n
\&  Calling new function \*(Aqtutu\*(Aq:titi
\&  main::(returnedbypushmethod.pl:20):
\&  20:     for (@classes) {
\&    DB<2> x @tutu
\&  0  9
\&  1  10
\&  2  11
\&  3  12
\&    DB<3> x @Cham::tutu
\&  0  1
\&  1  2
\&  2  3
\&    DB<4> p $Cham::tutu
\&  8
\&    DB<5> c
\&  Old function \*(Aqtutu\*(Aq in main gives: tutu
\&  Function \*(Aqtutu\*(Aq wasn\*(Aqt defined in Cham
\&  Old function \*(Aqtutu\*(Aq in Chum gives: chum
.Ve
.ie n .SS "Function ""pop_method"""
.el .SS "Function \f(CWpop_method\fP"
.IX Subsection "Function pop_method"
The call
.PP
.Vb 1
\&                     pop_method(qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq )
.Ve
.PP
pops the methods in the tops of the stacks associated with
\&\f(CW\*(C`CLASS1::subname\*(C'\fR, \f(CW\*(C`CLASS2::subname\*(C'\fR, etc. 
See the example in the section push_method above.
.IP "\(bu" 4
The caller class is assumed if no classes are specified.
.IP "\(bu" 4
If the stack for \f(CW\*(C`CLASS::subname\*(C'\fR is empty the old specification
of \f(CW\*(C`subname\*(C'\fR will remain.
.Sp
.Vb 4
\&  pl@nereida:~/LEyapp/examples$ cat returnedbypopmethod.pl
\&  #!/usr/local/bin/perl \-w
\&  use strict;
\&  use Parse::Eyapp::Base qw(:all);
\&
\&  sub tutu { "tutu" }
\&
\&  my $old = pop_method(\*(Aqtutu\*(Aq);
\&
\&  print "Function \*(Aqtutu\*(Aq is available\en" if main\->can(\*(Aqtutu\*(Aq);
\&  print "Old function \*(Aqtutu\*(Aq gives: ".$old\->()."\en";
.Ve
.Sp
When executed gives the following output:
.Sp
.Vb 3
\&  pl@nereida:~/LEyapp/examples$ returnedbypopmethod.pl
\&  Function \*(Aqtutu\*(Aq is available
\&  Old function \*(Aqtutu\*(Aq gives: tutu
.Ve
.IP "\(bu" 4
In list context the \f(CW\*(C`pop_method\*(C'\fR  function returns an array of pointers to the old
versions of the function. In a scalar context returns the first function 
reference. When the stack is empty the function(s) are deleted.
.ie n .SS "Examples of ""push_method"" and ""pop_method"""
.el .SS "Examples of \f(CWpush_method\fP and \f(CWpop_method\fP"
.IX Subsection "Examples of push_method and pop_method"
\fIHiding functions\fR
.IX Subsection "Hiding functions"
.PP
See the following example:
.PP
.Vb 2
\&  package Tutu;
\&  use Parse::Eyapp::Base qw(:all);
\&
\&  sub tutu {
\&    print "Inside tutu\en"
\&  }
\&
\&  sub plim {
\&
\&    # When the stack is empty the old \*(Aqtutu\*(Aq remains ...
\&    pop_method(\*(Aqtutu\*(Aq);
\&
\&    &tutu(); # Inside tutu
\&
\&    push_method(\*(Aqtutu\*(Aq); # Tutu disapears
\&  }
\&
\&  package main;
\&
\&  Tutu::plim(); 
\&  # main can\*(Aqt call \*(Aqtutu\*(Aq
\&  print "Can\*(Aqt tutu\en" unless Tutu\->can(\*(Aqtutu\*(Aq);
\&  Tutu::plim();
.Ve
.PP
When executed the former program produces this output:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples$ localsubbase.pl
\&  Inside tutu
\&  Can\*(Aqt tutu
\&  Inside tutu
.Ve
.PP
\fIChanging the Behavior of Method-parametric Methods\fR
.IX Subsection "Changing the Behavior of Method-parametric Methods"
.PP
A common situation where I need the couple (\f(CW\*(C`push_method\*(C'\fR, \f(CW\*(C`pop_method\*(C'\fR) 
is to control the behavior of method \f(CW\*(C`str\*(C'\fR when debugging:
.PP
.Vb 12
\&  pl@nereida:~/Lbook/code/Simple\-Types/script$ perl \-wd usetypes.pl prueba26.c 2
\&  Loading DB routines from perl5db.pl version 1.28
\&  Editor support available.
\&  main::(usetypes.pl:5):  my $filename = shift || die "Usage:\en$0 file.c\en";
\&    DB<1> c Parse::Eyapp::Node::str
\&  1 int f() {
\&  2   int a[30];
\&  3
\&  4   return;
\&  5 }
\&  Parse::Eyapp::Node::str(/home/pl/src/perl/YappWithDefaultAction/lib//Parse/Eyapp/Node.pm:716):
\&  716:      my @terms;
.Ve
.PP
Let us assume I want to see the syntax tree for this program. 
I can see it using \f(CW\*(C`$_[0]\->str\*(C'\fR
but the problem is that nodes \f(CW\*(C`PROGRAM\*(C'\fR and \f(CW\*(C`FUNCTION\*(C'\fR
have defined a \f(CW\*(C`footnote\*(C'\fR method that will dump their symbol and type tables producing 
hundred of lines of output and making difficult to see the shape of the tree.
This is because method \f(CW\*(C`str\*(C'\fR calls method \f(CW\*(C`footnote\*(C'\fR wherever the node being
visited \fIcan\fR do \f(CW\*(C`footnote\*(C'\fR. The solution is to use \f(CW\*(C`push_method\*(C'\fR to make
the \f(CW\*(C`footnote\*(C'\fR methods disappear:
.PP
.Vb 2
\&    DB<2> use Parse::Eyapp::Base qw(:all)
\&    DB<3> push_method(qw{PROGRAM FUNCTION}, \*(Aqfootnote\*(Aq)
.Ve
.PP
The use of \f(CW\*(C`push_method\*(C'\fR without an explicit code handler eliminates
the \s-1CODE\s0 entry for \f(CW\*(C`footnote\*(C'\fR:
.PP
.Vb 3
\&    DB<4> p $_\->can(\*(Aqfootnote\*(Aq)? "1\en" : "0\en" for (qw{PROGRAM FUNCTION})
\&  0
\&  0
.Ve
.PP
Now I can see the shape of the tree:
.PP
.Vb 1
\&    DB<5> p $_[0]\->str
\&
\&  PROGRAM(
\&    FUNCTION[f](
\&      EMPTYRETURN
\&    )
\&  ) # PROGRAM
.Ve
.PP
If I want back the \f(CW\*(C`footnote\*(C'\fR methods I can use \f(CW\*(C`pop_method\*(C'\fR:
.PP
.Vb 4
\&    DB<6> pop_method(qw{PROGRAM FUNCTION}, \*(Aqfootnote\*(Aq)
\&    DB<7> p $_\->can(\*(Aqfootnote\*(Aq)? "1\en" : "0\en" for (qw{PROGRAM FUNCTION})
\&    1
\&    1
.Ve
.PP
Now the information will be profuse:
.PP
.Vb 1
\&    DB<8> p $_[0]\->str
\&
\&  PROGRAM^{0}(
\&    FUNCTION[f]^{1}(
\&      EMPTYRETURN
\&    )
\&  ) # PROGRAM
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  0)
\&  Types:
\&  $VAR1 = {
\&    \*(AqCHAR\*(Aq => bless( {
\&      \*(Aqchildren\*(Aq => []
\&    }, \*(AqCHAR\*(Aq ),
\&    ..... etc, etc.
\&    \*(AqA_30(INT)\*(Aq => bless( {
\&      \*(Aqchildren\*(Aq => [
\&        $VAR1\->{\*(AqINT\*(Aq}
\&      ]
\&    }, \*(AqA_30\*(Aq )
\&  };
\&  Symbol Table:
\&  $VAR1 = {
\&    \*(Aqf\*(Aq => {
\&      \*(Aqtype\*(Aq => \*(AqF(X_0(),INT)\*(Aq,
\&      \*(Aqline\*(Aq => 1
\&    }
\&  };
\&
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  1)
\&  $VAR1 = {
\&    \*(Aqa\*(Aq => {
\&      \*(Aqtype\*(Aq => \*(AqA_30(INT)\*(Aq,
\&      \*(Aqline\*(Aq => 2
\&    }
\&  };
.Ve
.PP
You can still do something like this to achieve a similar effect:
.PP
.Vb 1
\&  DB<9> p eval { local (*PROGRAM::footnote, *FUNCTION::footnote) = (sub {}, sub {}); $_[0]\->str }
\&
\&  PROGRAM(
\&    FUNCTION[f](
\&      EMPTYRETURN
\&    )
\&  ) # PROGRAM
.Ve
.PP
but is certainly more verbose and does not eliminate function \f(CW\*(C`footnote\*(C'\fR
from the \f(CW\*(C`PROGRAM\*(C'\fR and \f(CW\*(C`FUNCTION\*(C'\fR classes.
.PP
Therefore the usefulness of \f(CW\*(C`push_method\*(C'\fR is when you either want to
temporarily delete your function/methods or localize them not necessarily in a 
scope basis.
.ie n .SS "Function ""compute_lines"""
.el .SS "Function \f(CWcompute_lines\fP"
.IX Subsection "Function compute_lines"
The call
.PP
.Vb 1
\&                compute_lines(\e$text, $filename, $pattern)
.Ve
.PP
Substitutes all the occurrences of 
\&\f(CW$pattern\fR by \f(CW\*(C`#line $number $filename\*(C'\fR in string \f(CW$text\fR.
where \f(CW$number\fR is the line number.
.ie n .SS "Function ""slurp_file"""
.el .SS "Function \f(CWslurp_file\fP"
.IX Subsection "Function slurp_file"
The call
.PP
.Vb 1
\&                my $input = slurp_file($filename, "c");
.Ve
.PP
returns a string with the contents of the file \f(CW$filename\fR assuming
extension \f(CW"c"\fR.
.PP
.Vb 8
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> !!ls *yp # There are two files with extension .yp in this directory
\&  Parse.yp  Treeregexp.yp
\&    DB<3> $x = slurp_file(\*(AqParse\*(Aq, \*(Aqyp\*(Aq) # read the whole file
\&    DB<4> p $x =~ tr/\en// # file Parse.yp has 1038 lines
\&  1038
.Ve
.ie n .SS "Function ""valid_keys"""
.el .SS "Function \f(CWvalid_keys\fP"
.IX Subsection "Function valid_keys"
The call
.PP
.Vb 1
\&              valid_keys(%hash)
.Ve
.PP
Returns a string with the keys of the \f(CW%hash\fR separated by commas:
.PP
.Vb 7
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> %h = ( SCOPE_NAME => \*(AqSTRING\*(Aq, ENTRY_NAME => \*(AqSTRING\*(Aq, SCOPE_DEPTH => \*(AqSTRING\*(Aq)
\&    DB<3> $x = valid_keys(%h)
\&    DB<4> p $x
\&  ENTRY_NAME, SCOPE_DEPTH, SCOPE_NAME
.Ve
.ie n .SS "Function ""invalid_keys"""
.el .SS "Function \f(CWinvalid_keys\fP"
.IX Subsection "Function invalid_keys"
It is called with two hash references:
.PP
.Vb 2
\&    DB<5> p invalid_keys(\e%h, { SCOPE_NAME => \*(Aqa\*(Aq, ENTRY_NAMe => \*(Aqb\*(Aq, SCOPE_DEPTH => \*(Aqc\*(Aq})
\&  ENTRY_NAMe
.Ve
.PP
It returns the first key in the second hash that does not appear in the first hash.
See a more complete example:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ head \-31 Scope.pm | cat \-n
\&     1  package Parse::Eyapp::Scope;
\&     2  use strict;
\&     3  use warnings;
\&     4  use Carp;
\&     5  use List::MoreUtils qw(part);
\&     6  use Parse::Eyapp::Base qw(valid_keys invalid_keys);
\&     7
\&     8  my %_new_scope = (
\&     9    SCOPE_NAME      => \*(AqSTRING\*(Aq,
\&    10    ENTRY_NAME      => \*(AqSTRING\*(Aq,
\&    11    SCOPE_DEPTH     => \*(AqSTRING\*(Aq,
\&    12  );
\&    13  my $valid_scope_keys = valid_keys(%_new_scope);
\&    14
\&    15  sub new {
\&    16   my $class = shift;
\&    17    my %args = @_;
\&    18
\&    19    if (defined($a = invalid_keys(\e%_new_scope, \e%args))) {
\&    20      croak("Parse::Eyapp::Scope::new Error!:\en"
\&    21           ."unknown argument $a. Valid arguments for new are:\en  $valid_scope_keys")
\&    22    }
\&    23    $args{ENTRY_NAME}      = \*(Aqentry\*(Aq unless defined($args{ENTRY_NAME});
\&    24    $args{SCOPE_NAME}      = \*(Aqscope\*(Aq unless defined($args{SCOPE_NAME});
\&    25    $args{SCOPE_DEPTH}     = \*(Aq\*(Aq      unless defined($args{SCOPE_DEPTH});
\&    26    $args{PENDING_DECL}    = [];
\&    27    $args{SCOPE_MARK}      = 0;
\&    28    $args{DEPTH}           = \-1; # first depth is 0
\&    29
\&    30    bless \e%args, $class;
\&    31  }
.Ve
.ie n .SS "Function ""write_file"""
.el .SS "Function \f(CWwrite_file\fP"
.IX Subsection "Function write_file"
The call
.PP
.Vb 1
\&              write_file($filename, $textref)
.Ve
.PP
simply opens a file  with name \f(CW$filename\fR
writes in it the text referenced by \f(CW$texterf\fR and closes the file
.ie n .SS "Function ""numbered"""
.el .SS "Function \f(CWnumbered\fP"
.IX Subsection "Function numbered"
The call
.PP
.Vb 1
\&                numbered($input)
.Ve
.PP
Returns a string like \f(CW$input\fR but with lines numbered and the numbers correctly
indented. See an example:
.PP
.Vb 10
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> $input = "Another line!\en"x12
\&    DB<3> $output = numbered($input)
\&    DB<4> p $output
\&   1 Another line!
\&   2 Another line!
\&   3 Another line!
\&   4 Another line!
\&   5 Another line!
\&   6 Another line!
\&   7 Another line!
\&   8 Another line!
\&   9 Another line!
\&  10 Another line!
\&  11 Another line!
\&  12 Another line!
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Parse::Eyapp,
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE \s0(\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04
\&\s0(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601
\&\s0(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\*(R"\s0 in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0
                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp::Base5.16.3pm                   0100644 0001750 0001750 00000055255 12566242264 025044  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::Base 3"
.TH Parse::Eyapp::Base 3 "2012-03-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::Base \- Miscellaneous support functions for Parse::Eyapp
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Parse::Eyapp::Base qw(:all)
.Ve
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
\&\f(CW\*(C`Parse::Eyapp::Base\*(C'\fR holds a set of utility functions that give support to the other 
modules that made \f(CW\*(C`Parse::Eyapp\*(C'\fR. Several of them are related to the dynamic use of methods 
and subroutines.
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.ie n .SS "Function ""insert_method"""
.el .SS "Function \f(CWinsert_method\fP"
.IX Subsection "Function insert_method"
Function \f(CW\*(C`insert_method\*(C'\fR receives as arguments
a list of class names, the name of the method that will be inserted in such classes
and a reference to the code implementing such method.
.PP
.Vb 1
\&          insert_method( qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq, sub { ... } )
.Ve
.PP
It inserts the method in the specified classes. 
A second way to call it is without the last argument, the handler:
.PP
.Vb 1
\&          insert_method( qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq )
.Ve
.PP
In such case the function is  deleted from all the specified classes
and it no longer exists.
.PP
The caller class is assumed if no classes are specified:
.PP
.Vb 1
\&          insert_method(\*(Aqsubname\*(Aq, sub { ... } )
.Ve
.PP
See the following session with the debugger:
.PP
.Vb 8
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> insert_method( qw{PLUS MINUS TIMES }, \*(Aqprintclass\*(Aq, sub { print "$_[0]\en" } )
\&    DB<3> $_\->printclass for qw{PLUS MINUS TIMES }
\&  PLUS
\&  MINUS
\&  TIMES
\&
\&    DB<4> insert_method( qw{PLUS MINUS TIMES }, \*(Aqprintclass\*(Aq)
\&    DB<5> print $_\->can(\*(Aqprintclass\*(Aq)?"Yes\en":"No\en"  for qw{PLUS MINUS TIMES }
\&  No
\&  No
\&  No
.Ve
.ie n .SS "Function ""insert_function"""
.el .SS "Function \f(CWinsert_function\fP"
.IX Subsection "Function insert_function"
It works as \f(CW\*(C`insert_method\*(C'\fR (see section \*(L"Function insert_method\*(R"), 
only that instead of classes 
receives the full names of the functions to install and a reference 
to the code implementing such function. See an example of call:
.PP
.Vb 4
\&  insert_function(
\&    qw{ FUNCTIONCALL::type_info VARARRAY::type_info VAR::type_info },
\&    \e&type_info
\&  );
.Ve
.PP
When the package is unspecified the caller package is assumed. See the following 
example:
.PP
.Vb 6
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> insert_function(\*(AqTutu::tata\*(Aq, \*(Aqtiti\*(Aq, sub{ print "Inside titi\en"})
\&    DB<3> titi()
\&  Inside titi
\&
\&    DB<4> Tutu::tata()
\&  Inside titi
.Ve
.ie n .SS "Function ""empty_method"""
.el .SS "Function \f(CWempty_method\fP"
.IX Subsection "Function empty_method"
The call to
.PP
.Vb 1
\&                           empty_method(qw{CLASSES ... }, \*(Aqsubname\*(Aq)
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&                          insert_method(qw{CLASSES ... }, \*(Aqsubname\*(Aq, sub {})
.Ve
.PP
Consequently \f(CW\*(C`empty_method\*(C'\fR replaces the current \f(CW\*(C`CODE\*(C'\fR for
function \f(CW\*(C`subname\*(C'\fR by an empty subroutine
.ie n .SS "Function ""push_method"""
.el .SS "Function \f(CWpush_method\fP"
.IX Subsection "Function push_method"
The call
.PP
.Vb 1
\&      push_method( qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq, sub { ... } )
.Ve
.PP
saves the current methods \f(CW\*(C`CLASS1::subname\*(C'\fR, \f(CW\*(C`CLASS2::subname\*(C'\fR, etc. in a stack
and proceeds to install the new handler specified through the last argument.
See an example:
.PP
.Vb 7
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> sub Tutu::titi { print "Inside first Tutu::titi!\en" }
\&    DB<3> push_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq, sub { print "New titi!\en" })
\&    DB<4> Tutu::titi()
\&  New titi!
\&
\&    DB<5> pop_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq)
\&    DB<6> Tutu::titi()
\&  Inside first Tutu::titi!
\&
\&    DB<7> push_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq) # No handler: sub Tutu::titi no longer exists
\&    DB<8> print "Can\*(Aqt titi\en" unless Tutu\->can(\*(Aqtiti\*(Aq)
\&  Can\*(Aqt titi
\&
\&    DB<9> pop_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq) # Give me the old sub
\&    DB<10> Tutu::titi()
\&  Inside first Tutu::titi!
.Ve
.PP
The caller class is assumed if no classes are specified.
.PP
In list context the \f(CW\*(C`push_method\*(C'\fR  function returns an array of pointers to the old
versions of the function. In a scalar context returns the first \f(CW\*(C`CODE\*(C'\fR reference. 
See the following example:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/YappWithDefaultAction/examples$ cat \-n returnedbypushmethod.pl
\&     1  #!/usr/local/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp::Base qw(:all);
\&     4
\&     5  sub tutu { "tutu" }
\&     6  sub Chum::tutu { "chum" }
\&     7
\&     8  my @classes = qw{main Cham Chum};
\&     9
\&    10  my %oldf;
\&    11  our $tutu = 5;
\&    12  our @tutu = 9..12;
\&    13  $Cham::tutu = 8;
\&    14  @Cham::tutu = 1..3;
\&    15
\&    16  @oldf{@classes} = push_method(@classes, \*(Aqtutu\*(Aq, sub { "titi" });
\&    17
\&    18  print "Calling new function \*(Aqtutu\*(Aq:".&tutu()."\en";
\&    19
\&    20  for (@classes) {
\&    21    if (defined($oldf{$_})) {
\&    22      print "Old function \*(Aqtutu\*(Aq in $_ gives: ".$oldf{$_}\->()."\en";
\&    23    }
\&    24    else {
\&    25       print "Function \*(Aqtutu\*(Aq wasn\*(Aqt defined in $_\en";
\&    26    }
\&    27  }
.Ve
.PP
The following session with the debugger shows that:
.IP "\(bu" 2
Package variables with the same name 
like \f(CW$tutu\fR or \f(CW@tutu\fR aren't changed by
\&\f(CW\*(C`insert_method\*(C'\fR
.IP "\(bu" 2
References to the old versions of function \f(CW\*(C`tutu\*(C'\fR
are returned by \f(CW\*(C`insert_method\*(C'\fR
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ perl \-wd returnedbypushmethod.pl
\&  main::(returnedbypushmethod.pl:8):
\&  8:      my @classes = qw{main Cham Chum};
\&    DB<1> c 18
\&  main::(returnedbypushmethod.pl:18):
\&  18:     print "Calling new function \*(Aqtutu\*(Aq:".&tutu()."\en";
\&    DB<2> n
\&  Calling new function \*(Aqtutu\*(Aq:titi
\&  main::(returnedbypushmethod.pl:20):
\&  20:     for (@classes) {
\&    DB<2> x @tutu
\&  0  9
\&  1  10
\&  2  11
\&  3  12
\&    DB<3> x @Cham::tutu
\&  0  1
\&  1  2
\&  2  3
\&    DB<4> p $Cham::tutu
\&  8
\&    DB<5> c
\&  Old function \*(Aqtutu\*(Aq in main gives: tutu
\&  Function \*(Aqtutu\*(Aq wasn\*(Aqt defined in Cham
\&  Old function \*(Aqtutu\*(Aq in Chum gives: chum
.Ve
.ie n .SS "Function ""pop_method"""
.el .SS "Function \f(CWpop_method\fP"
.IX Subsection "Function pop_method"
The call
.PP
.Vb 1
\&                     pop_method(qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq )
.Ve
.PP
pops the methods in the tops of the stacks associated with
\&\f(CW\*(C`CLASS1::subname\*(C'\fR, \f(CW\*(C`CLASS2::subname\*(C'\fR, etc. 
See the example in the section push_method above.
.IP "\(bu" 4
The caller class is assumed if no classes are specified.
.IP "\(bu" 4
If the stack for \f(CW\*(C`CLASS::subname\*(C'\fR is empty the old specification
of \f(CW\*(C`subname\*(C'\fR will remain.
.Sp
.Vb 4
\&  pl@nereida:~/LEyapp/examples$ cat returnedbypopmethod.pl
\&  #!/usr/local/bin/perl \-w
\&  use strict;
\&  use Parse::Eyapp::Base qw(:all);
\&
\&  sub tutu { "tutu" }
\&
\&  my $old = pop_method(\*(Aqtutu\*(Aq);
\&
\&  print "Function \*(Aqtutu\*(Aq is available\en" if main\->can(\*(Aqtutu\*(Aq);
\&  print "Old function \*(Aqtutu\*(Aq gives: ".$old\->()."\en";
.Ve
.Sp
When executed gives the following output:
.Sp
.Vb 3
\&  pl@nereida:~/LEyapp/examples$ returnedbypopmethod.pl
\&  Function \*(Aqtutu\*(Aq is available
\&  Old function \*(Aqtutu\*(Aq gives: tutu
.Ve
.IP "\(bu" 4
In list context the \f(CW\*(C`pop_method\*(C'\fR  function returns an array of pointers to the old
versions of the function. In a scalar context returns the first function 
reference. When the stack is empty the function(s) are deleted.
.ie n .SS "Examples of ""push_method"" and ""pop_method"""
.el .SS "Examples of \f(CWpush_method\fP and \f(CWpop_method\fP"
.IX Subsection "Examples of push_method and pop_method"
\fIHiding functions\fR
.IX Subsection "Hiding functions"
.PP
See the following example:
.PP
.Vb 2
\&  package Tutu;
\&  use Parse::Eyapp::Base qw(:all);
\&
\&  sub tutu {
\&    print "Inside tutu\en"
\&  }
\&
\&  sub plim {
\&
\&    # When the stack is empty the old \*(Aqtutu\*(Aq remains ...
\&    pop_method(\*(Aqtutu\*(Aq);
\&
\&    &tutu(); # Inside tutu
\&
\&    push_method(\*(Aqtutu\*(Aq); # Tutu disapears
\&  }
\&
\&  package main;
\&
\&  Tutu::plim(); 
\&  # main can\*(Aqt call \*(Aqtutu\*(Aq
\&  print "Can\*(Aqt tutu\en" unless Tutu\->can(\*(Aqtutu\*(Aq);
\&  Tutu::plim();
.Ve
.PP
When executed the former program produces this output:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples$ localsubbase.pl
\&  Inside tutu
\&  Can\*(Aqt tutu
\&  Inside tutu
.Ve
.PP
\fIChanging the Behavior of Method-parametric Methods\fR
.IX Subsection "Changing the Behavior of Method-parametric Methods"
.PP
A common situation where I need the couple (\f(CW\*(C`push_method\*(C'\fR, \f(CW\*(C`pop_method\*(C'\fR) 
is to control the behavior of method \f(CW\*(C`str\*(C'\fR when debugging:
.PP
.Vb 12
\&  pl@nereida:~/Lbook/code/Simple\-Types/script$ perl \-wd usetypes.pl prueba26.c 2
\&  Loading DB routines from perl5db.pl version 1.28
\&  Editor support available.
\&  main::(usetypes.pl:5):  my $filename = shift || die "Usage:\en$0 file.c\en";
\&    DB<1> c Parse::Eyapp::Node::str
\&  1 int f() {
\&  2   int a[30];
\&  3
\&  4   return;
\&  5 }
\&  Parse::Eyapp::Node::str(/home/pl/src/perl/YappWithDefaultAction/lib//Parse/Eyapp/Node.pm:716):
\&  716:      my @terms;
.Ve
.PP
Let us assume I want to see the syntax tree for this program. 
I can see it using \f(CW\*(C`$_[0]\->str\*(C'\fR
but the problem is that nodes \f(CW\*(C`PROGRAM\*(C'\fR and \f(CW\*(C`FUNCTION\*(C'\fR
have defined a \f(CW\*(C`footnote\*(C'\fR method that will dump their symbol and type tables producing 
hundred of lines of output and making difficult to see the shape of the tree.
This is because method \f(CW\*(C`str\*(C'\fR calls method \f(CW\*(C`footnote\*(C'\fR wherever the node being
visited \fIcan\fR do \f(CW\*(C`footnote\*(C'\fR. The solution is to use \f(CW\*(C`push_method\*(C'\fR to make
the \f(CW\*(C`footnote\*(C'\fR methods disappear:
.PP
.Vb 2
\&    DB<2> use Parse::Eyapp::Base qw(:all)
\&    DB<3> push_method(qw{PROGRAM FUNCTION}, \*(Aqfootnote\*(Aq)
.Ve
.PP
The use of \f(CW\*(C`push_method\*(C'\fR without an explicit code handler eliminates
the \s-1CODE\s0 entry for \f(CW\*(C`footnote\*(C'\fR:
.PP
.Vb 3
\&    DB<4> p $_\->can(\*(Aqfootnote\*(Aq)? "1\en" : "0\en" for (qw{PROGRAM FUNCTION})
\&  0
\&  0
.Ve
.PP
Now I can see the shape of the tree:
.PP
.Vb 1
\&    DB<5> p $_[0]\->str
\&
\&  PROGRAM(
\&    FUNCTION[f](
\&      EMPTYRETURN
\&    )
\&  ) # PROGRAM
.Ve
.PP
If I want back the \f(CW\*(C`footnote\*(C'\fR methods I can use \f(CW\*(C`pop_method\*(C'\fR:
.PP
.Vb 4
\&    DB<6> pop_method(qw{PROGRAM FUNCTION}, \*(Aqfootnote\*(Aq)
\&    DB<7> p $_\->can(\*(Aqfootnote\*(Aq)? "1\en" : "0\en" for (qw{PROGRAM FUNCTION})
\&    1
\&    1
.Ve
.PP
Now the information will be profuse:
.PP
.Vb 1
\&    DB<8> p $_[0]\->str
\&
\&  PROGRAM^{0}(
\&    FUNCTION[f]^{1}(
\&      EMPTYRETURN
\&    )
\&  ) # PROGRAM
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  0)
\&  Types:
\&  $VAR1 = {
\&    \*(AqCHAR\*(Aq => bless( {
\&      \*(Aqchildren\*(Aq => []
\&    }, \*(AqCHAR\*(Aq ),
\&    ..... etc, etc.
\&    \*(AqA_30(INT)\*(Aq => bless( {
\&      \*(Aqchildren\*(Aq => [
\&        $VAR1\->{\*(AqINT\*(Aq}
\&      ]
\&    }, \*(AqA_30\*(Aq )
\&  };
\&  Symbol Table:
\&  $VAR1 = {
\&    \*(Aqf\*(Aq => {
\&      \*(Aqtype\*(Aq => \*(AqF(X_0(),INT)\*(Aq,
\&      \*(Aqline\*(Aq => 1
\&    }
\&  };
\&
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  1)
\&  $VAR1 = {
\&    \*(Aqa\*(Aq => {
\&      \*(Aqtype\*(Aq => \*(AqA_30(INT)\*(Aq,
\&      \*(Aqline\*(Aq => 2
\&    }
\&  };
.Ve
.PP
You can still do something like this to achieve a similar effect:
.PP
.Vb 1
\&  DB<9> p eval { local (*PROGRAM::footnote, *FUNCTION::footnote) = (sub {}, sub {}); $_[0]\->str }
\&
\&  PROGRAM(
\&    FUNCTION[f](
\&      EMPTYRETURN
\&    )
\&  ) # PROGRAM
.Ve
.PP
but is certainly more verbose and does not eliminate function \f(CW\*(C`footnote\*(C'\fR
from the \f(CW\*(C`PROGRAM\*(C'\fR and \f(CW\*(C`FUNCTION\*(C'\fR classes.
.PP
Therefore the usefulness of \f(CW\*(C`push_method\*(C'\fR is when you either want to
temporarily delete your function/methods or localize them not necessarily in a 
scope basis.
.ie n .SS "Function ""compute_lines"""
.el .SS "Function \f(CWcompute_lines\fP"
.IX Subsection "Function compute_lines"
The call
.PP
.Vb 1
\&                compute_lines(\e$text, $filename, $pattern)
.Ve
.PP
Substitutes all the occurrences of 
\&\f(CW$pattern\fR by \f(CW\*(C`#line $number $filename\*(C'\fR in string \f(CW$text\fR.
where \f(CW$number\fR is the line number.
.ie n .SS "Function ""slurp_file"""
.el .SS "Function \f(CWslurp_file\fP"
.IX Subsection "Function slurp_file"
The call
.PP
.Vb 1
\&                my $input = slurp_file($filename, "c");
.Ve
.PP
returns a string with the contents of the file \f(CW$filename\fR assuming
extension \f(CW"c"\fR.
.PP
.Vb 8
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> !!ls *yp # There are two files with extension .yp in this directory
\&  Parse.yp  Treeregexp.yp
\&    DB<3> $x = slurp_file(\*(AqParse\*(Aq, \*(Aqyp\*(Aq) # read the whole file
\&    DB<4> p $x =~ tr/\en// # file Parse.yp has 1038 lines
\&  1038
.Ve
.ie n .SS "Function ""valid_keys"""
.el .SS "Function \f(CWvalid_keys\fP"
.IX Subsection "Function valid_keys"
The call
.PP
.Vb 1
\&              valid_keys(%hash)
.Ve
.PP
Returns a string with the keys of the \f(CW%hash\fR separated by commas:
.PP
.Vb 7
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> %h = ( SCOPE_NAME => \*(AqSTRING\*(Aq, ENTRY_NAME => \*(AqSTRING\*(Aq, SCOPE_DEPTH => \*(AqSTRING\*(Aq)
\&    DB<3> $x = valid_keys(%h)
\&    DB<4> p $x
\&  ENTRY_NAME, SCOPE_DEPTH, SCOPE_NAME
.Ve
.ie n .SS "Function ""invalid_keys"""
.el .SS "Function \f(CWinvalid_keys\fP"
.IX Subsection "Function invalid_keys"
It is called with two hash references:
.PP
.Vb 2
\&    DB<5> p invalid_keys(\e%h, { SCOPE_NAME => \*(Aqa\*(Aq, ENTRY_NAMe => \*(Aqb\*(Aq, SCOPE_DEPTH => \*(Aqc\*(Aq})
\&  ENTRY_NAMe
.Ve
.PP
It returns the first key in the second hash that does not appear in the first hash.
See a more complete example:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ head \-31 Scope.pm | cat \-n
\&     1  package Parse::Eyapp::Scope;
\&     2  use strict;
\&     3  use warnings;
\&     4  use Carp;
\&     5  use List::MoreUtils qw(part);
\&     6  use Parse::Eyapp::Base qw(valid_keys invalid_keys);
\&     7
\&     8  my %_new_scope = (
\&     9    SCOPE_NAME      => \*(AqSTRING\*(Aq,
\&    10    ENTRY_NAME      => \*(AqSTRING\*(Aq,
\&    11    SCOPE_DEPTH     => \*(AqSTRING\*(Aq,
\&    12  );
\&    13  my $valid_scope_keys = valid_keys(%_new_scope);
\&    14
\&    15  sub new {
\&    16   my $class = shift;
\&    17    my %args = @_;
\&    18
\&    19    if (defined($a = invalid_keys(\e%_new_scope, \e%args))) {
\&    20      croak("Parse::Eyapp::Scope::new Error!:\en"
\&    21           ."unknown argument $a. Valid arguments for new are:\en  $valid_scope_keys")
\&    22    }
\&    23    $args{ENTRY_NAME}      = \*(Aqentry\*(Aq unless defined($args{ENTRY_NAME});
\&    24    $args{SCOPE_NAME}      = \*(Aqscope\*(Aq unless defined($args{SCOPE_NAME});
\&    25    $args{SCOPE_DEPTH}     = \*(Aq\*(Aq      unless defined($args{SCOPE_DEPTH});
\&    26    $args{PENDING_DECL}    = [];
\&    27    $args{SCOPE_MARK}      = 0;
\&    28    $args{DEPTH}           = \-1; # first depth is 0
\&    29
\&    30    bless \e%args, $class;
\&    31  }
.Ve
.ie n .SS "Function ""write_file"""
.el .SS "Function \f(CWwrite_file\fP"
.IX Subsection "Function write_file"
The call
.PP
.Vb 1
\&              write_file($filename, $textref)
.Ve
.PP
simply opens a file  with name \f(CW$filename\fR
writes in it the text referenced by \f(CW$texterf\fR and closes the file
.ie n .SS "Function ""numbered"""
.el .SS "Function \f(CWnumbered\fP"
.IX Subsection "Function numbered"
The call
.PP
.Vb 1
\&                numbered($input)
.Ve
.PP
Returns a string like \f(CW$input\fR but with lines numbered and the numbers correctly
indented. See an example:
.PP
.Vb 10
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> $input = "Another line!\en"x12
\&    DB<3> $output = numbered($input)
\&    DB<4> p $output
\&   1 Another line!
\&   2 Another line!
\&   3 Another line!
\&   4 Another line!
\&   5 Another line!
\&   6 Another line!
\&   7 Another line!
\&   8 Another line!
\&   9 Another line!
\&  10 Another line!
\&  11 Another line!
\&  12 Another line!
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Parse::Eyapp,
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE\s0 (\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04\s0
(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601\s0
(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\s0\*(R" in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp::Base5.18.3pm                   0100644 0001750 0001750 00000055540 12566242262 025041  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::Base 3"
.TH Parse::Eyapp::Base 3 "2012-03-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::Base \- Miscellaneous support functions for Parse::Eyapp
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Parse::Eyapp::Base qw(:all)
.Ve
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
\&\f(CW\*(C`Parse::Eyapp::Base\*(C'\fR holds a set of utility functions that give support to the other 
modules that made \f(CW\*(C`Parse::Eyapp\*(C'\fR. Several of them are related to the dynamic use of methods 
and subroutines.
.SH "SUBROUTINES"
.IX Header "SUBROUTINES"
.ie n .SS "Function ""insert_method"""
.el .SS "Function \f(CWinsert_method\fP"
.IX Subsection "Function insert_method"
Function \f(CW\*(C`insert_method\*(C'\fR receives as arguments
a list of class names, the name of the method that will be inserted in such classes
and a reference to the code implementing such method.
.PP
.Vb 1
\&          insert_method( qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq, sub { ... } )
.Ve
.PP
It inserts the method in the specified classes. 
A second way to call it is without the last argument, the handler:
.PP
.Vb 1
\&          insert_method( qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq )
.Ve
.PP
In such case the function is  deleted from all the specified classes
and it no longer exists.
.PP
The caller class is assumed if no classes are specified:
.PP
.Vb 1
\&          insert_method(\*(Aqsubname\*(Aq, sub { ... } )
.Ve
.PP
See the following session with the debugger:
.PP
.Vb 8
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> insert_method( qw{PLUS MINUS TIMES }, \*(Aqprintclass\*(Aq, sub { print "$_[0]\en" } )
\&    DB<3> $_\->printclass for qw{PLUS MINUS TIMES }
\&  PLUS
\&  MINUS
\&  TIMES
\&
\&    DB<4> insert_method( qw{PLUS MINUS TIMES }, \*(Aqprintclass\*(Aq)
\&    DB<5> print $_\->can(\*(Aqprintclass\*(Aq)?"Yes\en":"No\en"  for qw{PLUS MINUS TIMES }
\&  No
\&  No
\&  No
.Ve
.ie n .SS "Function ""insert_function"""
.el .SS "Function \f(CWinsert_function\fP"
.IX Subsection "Function insert_function"
It works as \f(CW\*(C`insert_method\*(C'\fR (see section \*(L"Function insert_method\*(R"), 
only that instead of classes 
receives the full names of the functions to install and a reference 
to the code implementing such function. See an example of call:
.PP
.Vb 4
\&  insert_function(
\&    qw{ FUNCTIONCALL::type_info VARARRAY::type_info VAR::type_info },
\&    \e&type_info
\&  );
.Ve
.PP
When the package is unspecified the caller package is assumed. See the following 
example:
.PP
.Vb 6
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> insert_function(\*(AqTutu::tata\*(Aq, \*(Aqtiti\*(Aq, sub{ print "Inside titi\en"})
\&    DB<3> titi()
\&  Inside titi
\&
\&    DB<4> Tutu::tata()
\&  Inside titi
.Ve
.ie n .SS "Function ""empty_method"""
.el .SS "Function \f(CWempty_method\fP"
.IX Subsection "Function empty_method"
The call to
.PP
.Vb 1
\&                           empty_method(qw{CLASSES ... }, \*(Aqsubname\*(Aq)
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&                          insert_method(qw{CLASSES ... }, \*(Aqsubname\*(Aq, sub {})
.Ve
.PP
Consequently \f(CW\*(C`empty_method\*(C'\fR replaces the current \f(CW\*(C`CODE\*(C'\fR for
function \f(CW\*(C`subname\*(C'\fR by an empty subroutine
.ie n .SS "Function ""push_method"""
.el .SS "Function \f(CWpush_method\fP"
.IX Subsection "Function push_method"
The call
.PP
.Vb 1
\&      push_method( qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq, sub { ... } )
.Ve
.PP
saves the current methods \f(CW\*(C`CLASS1::subname\*(C'\fR, \f(CW\*(C`CLASS2::subname\*(C'\fR, etc. in a stack
and proceeds to install the new handler specified through the last argument.
See an example:
.PP
.Vb 7
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> sub Tutu::titi { print "Inside first Tutu::titi!\en" }
\&    DB<3> push_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq, sub { print "New titi!\en" })
\&    DB<4> Tutu::titi()
\&  New titi!
\&
\&    DB<5> pop_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq)
\&    DB<6> Tutu::titi()
\&  Inside first Tutu::titi!
\&
\&    DB<7> push_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq) # No handler: sub Tutu::titi no longer exists
\&    DB<8> print "Can\*(Aqt titi\en" unless Tutu\->can(\*(Aqtiti\*(Aq)
\&  Can\*(Aqt titi
\&
\&    DB<9> pop_method(\*(AqTutu\*(Aq, \*(Aqtiti\*(Aq) # Give me the old sub
\&    DB<10> Tutu::titi()
\&  Inside first Tutu::titi!
.Ve
.PP
The caller class is assumed if no classes are specified.
.PP
In list context the \f(CW\*(C`push_method\*(C'\fR  function returns an array of pointers to the old
versions of the function. In a scalar context returns the first \f(CW\*(C`CODE\*(C'\fR reference. 
See the following example:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/YappWithDefaultAction/examples$ cat \-n returnedbypushmethod.pl
\&     1  #!/usr/local/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp::Base qw(:all);
\&     4
\&     5  sub tutu { "tutu" }
\&     6  sub Chum::tutu { "chum" }
\&     7
\&     8  my @classes = qw{main Cham Chum};
\&     9
\&    10  my %oldf;
\&    11  our $tutu = 5;
\&    12  our @tutu = 9..12;
\&    13  $Cham::tutu = 8;
\&    14  @Cham::tutu = 1..3;
\&    15
\&    16  @oldf{@classes} = push_method(@classes, \*(Aqtutu\*(Aq, sub { "titi" });
\&    17
\&    18  print "Calling new function \*(Aqtutu\*(Aq:".&tutu()."\en";
\&    19
\&    20  for (@classes) {
\&    21    if (defined($oldf{$_})) {
\&    22      print "Old function \*(Aqtutu\*(Aq in $_ gives: ".$oldf{$_}\->()."\en";
\&    23    }
\&    24    else {
\&    25       print "Function \*(Aqtutu\*(Aq wasn\*(Aqt defined in $_\en";
\&    26    }
\&    27  }
.Ve
.PP
The following session with the debugger shows that:
.IP "\(bu" 2
Package variables with the same name 
like \f(CW$tutu\fR or \f(CW@tutu\fR aren't changed by
\&\f(CW\*(C`insert_method\*(C'\fR
.IP "\(bu" 2
References to the old versions of function \f(CW\*(C`tutu\*(C'\fR
are returned by \f(CW\*(C`insert_method\*(C'\fR
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ perl \-wd returnedbypushmethod.pl
\&  main::(returnedbypushmethod.pl:8):
\&  8:      my @classes = qw{main Cham Chum};
\&    DB<1> c 18
\&  main::(returnedbypushmethod.pl:18):
\&  18:     print "Calling new function \*(Aqtutu\*(Aq:".&tutu()."\en";
\&    DB<2> n
\&  Calling new function \*(Aqtutu\*(Aq:titi
\&  main::(returnedbypushmethod.pl:20):
\&  20:     for (@classes) {
\&    DB<2> x @tutu
\&  0  9
\&  1  10
\&  2  11
\&  3  12
\&    DB<3> x @Cham::tutu
\&  0  1
\&  1  2
\&  2  3
\&    DB<4> p $Cham::tutu
\&  8
\&    DB<5> c
\&  Old function \*(Aqtutu\*(Aq in main gives: tutu
\&  Function \*(Aqtutu\*(Aq wasn\*(Aqt defined in Cham
\&  Old function \*(Aqtutu\*(Aq in Chum gives: chum
.Ve
.ie n .SS "Function ""pop_method"""
.el .SS "Function \f(CWpop_method\fP"
.IX Subsection "Function pop_method"
The call
.PP
.Vb 1
\&                     pop_method(qw{CLASS1 CLASS2 ... }, \*(Aqsubname\*(Aq )
.Ve
.PP
pops the methods in the tops of the stacks associated with
\&\f(CW\*(C`CLASS1::subname\*(C'\fR, \f(CW\*(C`CLASS2::subname\*(C'\fR, etc. 
See the example in the section push_method above.
.IP "\(bu" 4
The caller class is assumed if no classes are specified.
.IP "\(bu" 4
If the stack for \f(CW\*(C`CLASS::subname\*(C'\fR is empty the old specification
of \f(CW\*(C`subname\*(C'\fR will remain.
.Sp
.Vb 4
\&  pl@nereida:~/LEyapp/examples$ cat returnedbypopmethod.pl
\&  #!/usr/local/bin/perl \-w
\&  use strict;
\&  use Parse::Eyapp::Base qw(:all);
\&
\&  sub tutu { "tutu" }
\&
\&  my $old = pop_method(\*(Aqtutu\*(Aq);
\&
\&  print "Function \*(Aqtutu\*(Aq is available\en" if main\->can(\*(Aqtutu\*(Aq);
\&  print "Old function \*(Aqtutu\*(Aq gives: ".$old\->()."\en";
.Ve
.Sp
When executed gives the following output:
.Sp
.Vb 3
\&  pl@nereida:~/LEyapp/examples$ returnedbypopmethod.pl
\&  Function \*(Aqtutu\*(Aq is available
\&  Old function \*(Aqtutu\*(Aq gives: tutu
.Ve
.IP "\(bu" 4
In list context the \f(CW\*(C`pop_method\*(C'\fR  function returns an array of pointers to the old
versions of the function. In a scalar context returns the first function 
reference. When the stack is empty the function(s) are deleted.
.ie n .SS "Examples of ""push_method"" and ""pop_method"""
.el .SS "Examples of \f(CWpush_method\fP and \f(CWpop_method\fP"
.IX Subsection "Examples of push_method and pop_method"
\fIHiding functions\fR
.IX Subsection "Hiding functions"
.PP
See the following example:
.PP
.Vb 2
\&  package Tutu;
\&  use Parse::Eyapp::Base qw(:all);
\&
\&  sub tutu {
\&    print "Inside tutu\en"
\&  }
\&
\&  sub plim {
\&
\&    # When the stack is empty the old \*(Aqtutu\*(Aq remains ...
\&    pop_method(\*(Aqtutu\*(Aq);
\&
\&    &tutu(); # Inside tutu
\&
\&    push_method(\*(Aqtutu\*(Aq); # Tutu disapears
\&  }
\&
\&  package main;
\&
\&  Tutu::plim(); 
\&  # main can\*(Aqt call \*(Aqtutu\*(Aq
\&  print "Can\*(Aqt tutu\en" unless Tutu\->can(\*(Aqtutu\*(Aq);
\&  Tutu::plim();
.Ve
.PP
When executed the former program produces this output:
.PP
.Vb 4
\&  pl@nereida:~/LEyapp/examples$ localsubbase.pl
\&  Inside tutu
\&  Can\*(Aqt tutu
\&  Inside tutu
.Ve
.PP
\fIChanging the Behavior of Method-parametric Methods\fR
.IX Subsection "Changing the Behavior of Method-parametric Methods"
.PP
A common situation where I need the couple (\f(CW\*(C`push_method\*(C'\fR, \f(CW\*(C`pop_method\*(C'\fR) 
is to control the behavior of method \f(CW\*(C`str\*(C'\fR when debugging:
.PP
.Vb 12
\&  pl@nereida:~/Lbook/code/Simple\-Types/script$ perl \-wd usetypes.pl prueba26.c 2
\&  Loading DB routines from perl5db.pl version 1.28
\&  Editor support available.
\&  main::(usetypes.pl:5):  my $filename = shift || die "Usage:\en$0 file.c\en";
\&    DB<1> c Parse::Eyapp::Node::str
\&  1 int f() {
\&  2   int a[30];
\&  3
\&  4   return;
\&  5 }
\&  Parse::Eyapp::Node::str(/home/pl/src/perl/YappWithDefaultAction/lib//Parse/Eyapp/Node.pm:716):
\&  716:      my @terms;
.Ve
.PP
Let us assume I want to see the syntax tree for this program. 
I can see it using \f(CW\*(C`$_[0]\->str\*(C'\fR
but the problem is that nodes \f(CW\*(C`PROGRAM\*(C'\fR and \f(CW\*(C`FUNCTION\*(C'\fR
have defined a \f(CW\*(C`footnote\*(C'\fR method that will dump their symbol and type tables producing 
hundred of lines of output and making difficult to see the shape of the tree.
This is because method \f(CW\*(C`str\*(C'\fR calls method \f(CW\*(C`footnote\*(C'\fR wherever the node being
visited \fIcan\fR do \f(CW\*(C`footnote\*(C'\fR. The solution is to use \f(CW\*(C`push_method\*(C'\fR to make
the \f(CW\*(C`footnote\*(C'\fR methods disappear:
.PP
.Vb 2
\&    DB<2> use Parse::Eyapp::Base qw(:all)
\&    DB<3> push_method(qw{PROGRAM FUNCTION}, \*(Aqfootnote\*(Aq)
.Ve
.PP
The use of \f(CW\*(C`push_method\*(C'\fR without an explicit code handler eliminates
the \s-1CODE\s0 entry for \f(CW\*(C`footnote\*(C'\fR:
.PP
.Vb 3
\&    DB<4> p $_\->can(\*(Aqfootnote\*(Aq)? "1\en" : "0\en" for (qw{PROGRAM FUNCTION})
\&  0
\&  0
.Ve
.PP
Now I can see the shape of the tree:
.PP
.Vb 1
\&    DB<5> p $_[0]\->str
\&
\&  PROGRAM(
\&    FUNCTION[f](
\&      EMPTYRETURN
\&    )
\&  ) # PROGRAM
.Ve
.PP
If I want back the \f(CW\*(C`footnote\*(C'\fR methods I can use \f(CW\*(C`pop_method\*(C'\fR:
.PP
.Vb 4
\&    DB<6> pop_method(qw{PROGRAM FUNCTION}, \*(Aqfootnote\*(Aq)
\&    DB<7> p $_\->can(\*(Aqfootnote\*(Aq)? "1\en" : "0\en" for (qw{PROGRAM FUNCTION})
\&    1
\&    1
.Ve
.PP
Now the information will be profuse:
.PP
.Vb 1
\&    DB<8> p $_[0]\->str
\&
\&  PROGRAM^{0}(
\&    FUNCTION[f]^{1}(
\&      EMPTYRETURN
\&    )
\&  ) # PROGRAM
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  0)
\&  Types:
\&  $VAR1 = {
\&    \*(AqCHAR\*(Aq => bless( {
\&      \*(Aqchildren\*(Aq => []
\&    }, \*(AqCHAR\*(Aq ),
\&    ..... etc, etc.
\&    \*(AqA_30(INT)\*(Aq => bless( {
\&      \*(Aqchildren\*(Aq => [
\&        $VAR1\->{\*(AqINT\*(Aq}
\&      ]
\&    }, \*(AqA_30\*(Aq )
\&  };
\&  Symbol Table:
\&  $VAR1 = {
\&    \*(Aqf\*(Aq => {
\&      \*(Aqtype\*(Aq => \*(AqF(X_0(),INT)\*(Aq,
\&      \*(Aqline\*(Aq => 1
\&    }
\&  };
\&
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  1)
\&  $VAR1 = {
\&    \*(Aqa\*(Aq => {
\&      \*(Aqtype\*(Aq => \*(AqA_30(INT)\*(Aq,
\&      \*(Aqline\*(Aq => 2
\&    }
\&  };
.Ve
.PP
You can still do something like this to achieve a similar effect:
.PP
.Vb 1
\&  DB<9> p eval { local (*PROGRAM::footnote, *FUNCTION::footnote) = (sub {}, sub {}); $_[0]\->str }
\&
\&  PROGRAM(
\&    FUNCTION[f](
\&      EMPTYRETURN
\&    )
\&  ) # PROGRAM
.Ve
.PP
but is certainly more verbose and does not eliminate function \f(CW\*(C`footnote\*(C'\fR
from the \f(CW\*(C`PROGRAM\*(C'\fR and \f(CW\*(C`FUNCTION\*(C'\fR classes.
.PP
Therefore the usefulness of \f(CW\*(C`push_method\*(C'\fR is when you either want to
temporarily delete your function/methods or localize them not necessarily in a 
scope basis.
.ie n .SS "Function ""compute_lines"""
.el .SS "Function \f(CWcompute_lines\fP"
.IX Subsection "Function compute_lines"
The call
.PP
.Vb 1
\&                compute_lines(\e$text, $filename, $pattern)
.Ve
.PP
Substitutes all the occurrences of 
\&\f(CW$pattern\fR by \f(CW\*(C`#line $number $filename\*(C'\fR in string \f(CW$text\fR.
where \f(CW$number\fR is the line number.
.ie n .SS "Function ""slurp_file"""
.el .SS "Function \f(CWslurp_file\fP"
.IX Subsection "Function slurp_file"
The call
.PP
.Vb 1
\&                my $input = slurp_file($filename, "c");
.Ve
.PP
returns a string with the contents of the file \f(CW$filename\fR assuming
extension \f(CW"c"\fR.
.PP
.Vb 8
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> !!ls *yp # There are two files with extension .yp in this directory
\&  Parse.yp  Treeregexp.yp
\&    DB<3> $x = slurp_file(\*(AqParse\*(Aq, \*(Aqyp\*(Aq) # read the whole file
\&    DB<4> p $x =~ tr/\en// # file Parse.yp has 1038 lines
\&  1038
.Ve
.ie n .SS "Function ""valid_keys"""
.el .SS "Function \f(CWvalid_keys\fP"
.IX Subsection "Function valid_keys"
The call
.PP
.Vb 1
\&              valid_keys(%hash)
.Ve
.PP
Returns a string with the keys of the \f(CW%hash\fR separated by commas:
.PP
.Vb 7
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ perl \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> %h = ( SCOPE_NAME => \*(AqSTRING\*(Aq, ENTRY_NAME => \*(AqSTRING\*(Aq, SCOPE_DEPTH => \*(AqSTRING\*(Aq)
\&    DB<3> $x = valid_keys(%h)
\&    DB<4> p $x
\&  ENTRY_NAME, SCOPE_DEPTH, SCOPE_NAME
.Ve
.ie n .SS "Function ""invalid_keys"""
.el .SS "Function \f(CWinvalid_keys\fP"
.IX Subsection "Function invalid_keys"
It is called with two hash references:
.PP
.Vb 2
\&    DB<5> p invalid_keys(\e%h, { SCOPE_NAME => \*(Aqa\*(Aq, ENTRY_NAMe => \*(Aqb\*(Aq, SCOPE_DEPTH => \*(Aqc\*(Aq})
\&  ENTRY_NAMe
.Ve
.PP
It returns the first key in the second hash that does not appear in the first hash.
See a more complete example:
.PP
.Vb 10
\&  pl@nereida:~/src/perl/YappWithDefaultAction/lib/Parse/Eyapp$ head \-31 Scope.pm | cat \-n
\&     1  package Parse::Eyapp::Scope;
\&     2  use strict;
\&     3  use warnings;
\&     4  use Carp;
\&     5  use List::MoreUtils qw(part);
\&     6  use Parse::Eyapp::Base qw(valid_keys invalid_keys);
\&     7
\&     8  my %_new_scope = (
\&     9    SCOPE_NAME      => \*(AqSTRING\*(Aq,
\&    10    ENTRY_NAME      => \*(AqSTRING\*(Aq,
\&    11    SCOPE_DEPTH     => \*(AqSTRING\*(Aq,
\&    12  );
\&    13  my $valid_scope_keys = valid_keys(%_new_scope);
\&    14
\&    15  sub new {
\&    16   my $class = shift;
\&    17    my %args = @_;
\&    18
\&    19    if (defined($a = invalid_keys(\e%_new_scope, \e%args))) {
\&    20      croak("Parse::Eyapp::Scope::new Error!:\en"
\&    21           ."unknown argument $a. Valid arguments for new are:\en  $valid_scope_keys")
\&    22    }
\&    23    $args{ENTRY_NAME}      = \*(Aqentry\*(Aq unless defined($args{ENTRY_NAME});
\&    24    $args{SCOPE_NAME}      = \*(Aqscope\*(Aq unless defined($args{SCOPE_NAME});
\&    25    $args{SCOPE_DEPTH}     = \*(Aq\*(Aq      unless defined($args{SCOPE_DEPTH});
\&    26    $args{PENDING_DECL}    = [];
\&    27    $args{SCOPE_MARK}      = 0;
\&    28    $args{DEPTH}           = \-1; # first depth is 0
\&    29
\&    30    bless \e%args, $class;
\&    31  }
.Ve
.ie n .SS "Function ""write_file"""
.el .SS "Function \f(CWwrite_file\fP"
.IX Subsection "Function write_file"
The call
.PP
.Vb 1
\&              write_file($filename, $textref)
.Ve
.PP
simply opens a file  with name \f(CW$filename\fR
writes in it the text referenced by \f(CW$texterf\fR and closes the file
.ie n .SS "Function ""numbered"""
.el .SS "Function \f(CWnumbered\fP"
.IX Subsection "Function numbered"
The call
.PP
.Vb 1
\&                numbered($input)
.Ve
.PP
Returns a string like \f(CW$input\fR but with lines numbered and the numbers correctly
indented. See an example:
.PP
.Vb 10
\&    DB<1> use Parse::Eyapp::Base qw(:all)
\&    DB<2> $input = "Another line!\en"x12
\&    DB<3> $output = numbered($input)
\&    DB<4> p $output
\&   1 Another line!
\&   2 Another line!
\&   3 Another line!
\&   4 Another line!
\&   5 Another line!
\&   6 Another line!
\&   7 Another line!
\&   8 Another line!
\&   9 Another line!
\&  10 Another line!
\&  11 Another line!
\&  12 Another line!
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Parse::Eyapp,
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE \s0(\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04
\&\s0(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601
\&\s0(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\*(R"\s0 in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0
                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp::Driver.3pm                     0100644 0001750 0001750 00000130772 12566242262 025107  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::Driver 3"
.TH Parse::Eyapp::Driver 3 "2012-03-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::Driver \- The LR parser
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
This class has the method \f(CW\*(C`YYParse\*(C'\fR implementing the \s-1LR\s0 generic
parsing algorithm plus the methods that give support to the generated
parser.
.ie n .SH "THE ""YYParse"" METHOD"
.el .SH "THE \f(CWYYParse\fP METHOD"
.IX Header "THE YYParse METHOD"
The \f(CW\*(C`YYParse\*(C'\fR methods implements the generic \s-1LR\s0 parsing algorithm.
It very much works \f(CW\*(C`Parse::Yapp::YYParse\*(C'\fR and as yacc/bison \f(CW\*(C`yyparse\*(C'\fR.
It accepts almost the same arguments as \f(CW\*(C`Class\->new\*(C'\fR (Being \f(CW\*(C`Class\*(C'\fR the name 
of the generated class).
.PP
The parser uses two tables and a stack. The two tables
are called the \fIaction\fR table and the \fIgoto\fR table.
The stack is used to keep track of the states visited.
.PP
At each step the generated parser consults the 
\&\f(CW\*(C`action\*(C'\fR table and takes one decision:
To shift to a new state consuming one token (and pushing 
the current state in the stack) or to reduce by some
production rule. In the last case the parser pops
from its stack as many states as symbols are on the right hand side
of the production rule. Here is a Perl/C like pseudocode
summarizing the activity of \f(CW\*(C`YYParse\*(C'\fR:
.PP
.Vb 10
\&     1   my $parser = shift; # The parser object
\&     2   push(@stack, $parser\->{startstate});
\&     3   $b = $parser\->YYLexer(); # Get the first token
\&     4   FOREVER: {
\&     5     $s = top(0);  # Get the state on top of the stack
\&     6     $a = $b;
\&     7     switch ($parser\->action[$s\->state][$a]) {
\&     8       case "shift t" : 
\&     9         my $t;
\&    10         $t\->{state} = t;
\&    11         $t\->{attr}  = $a\->{attr};
\&    12         push($t); 
\&    13         $b = $parser\->YYLexer(); # Call the lexical analyzer
\&    14         break;
\&    15       case "reduce A\->alpha" : 
\&    16         # Call the semantic action with the attributes of the rhs as args
\&    17         my $semantic  = $parser\->Semantic{A \->alpha}; # The semantic action
\&    18         my $r;
\&    19         $r\->{attr} = $semantic\->($parser, top(|alpha|\-1)\->attr, ... , top(0)\->attr); 
\&    20  
\&    21         # Pop as many states as symbols on the rhs of A\->alpha
\&    22         pop(|alpha|);  
\&    23  
\&    24         # Goto next state 
\&    25         $r\->{state} = $parser\->goto[top(0)][A]; 
\&    26         push($r); 
\&    27         break;
\&    28       case "accept" : return (1); 
\&    29       default : $parser\->YYError("syntax error"); 
\&    30     }
\&    31     redo FOREVER;
\&    32   }
.Ve
.PP
Here \f(CW\*(C`|alpha|\*(C'\fR stands for the length of \f(CW\*(C`alpha\*(C'\fR. Function \f(CWtop(k)\fR returns
the state in position \f(CW\*(C`k\*(C'\fR from the top of the stack, i.e. the state at depth \f(CW\*(C`k\*(C'\fR.
Function \f(CWpop(k)\fR extracts \f(CW\*(C`k\*(C'\fR states from the stack. The call \f(CW\*(C`$state\->attr\*(C'\fR
returns the attribute associated with \f(CW$state\fR. The call \f(CW\*(C`$parser\->Semantic{A \->alpha}\*(C'\fR
returns the semantic action associated with production \f(CW\*(C`A \->alpha\*(C'\fR.
.PP
Let us see a trace for the small grammar in \f(CW\*(C`examples/debuggingtut/aSb.yp\*(C'\fR:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples$ /usr/local/bin/paste.pl aSb.yp aSb.output | head \-5
\&  %%                                             | Rules:
\&  S:                 { print "S \-> epsilon\en" }  | \-\-\-\-\-\-
\&      |   \*(Aqa\*(Aq S \*(Aqb\*(Aq  { print "S \-> a S b\en" }    | 0:    $start \-> S $end
\&  ;                                              | 1:    S \-> /* empty */
\&  %%                                             | 2:    S \-> \*(Aqa\*(Aq S \*(Aqb\*(Aq
.Ve
.PP
The tables in file \f(CW\*(C`aSb.output\*(C'\fR describe the 
actions and transitions to take:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n aSb.output
\&     .  .........................................
\&     7  States:
\&     8  \-\-\-\-\-\-\-
\&     9  State 0:
\&    10
\&    11          $start \-> . S $end      (Rule 0)
\&    12
\&    13          \*(Aqa\*(Aq     shift, and go to state 2
\&    14
\&    15          $default        reduce using rule 1 (S)
\&    16
\&    17          S       go to state 1
\&    18
\&    19  State 1:
\&    20
\&    21          $start \-> S . $end      (Rule 0)
\&    22
\&    23          $end    shift, and go to state 3
\&    24
\&    25  State 2:
\&    26
\&    27          S \-> \*(Aqa\*(Aq . S \*(Aqb\*(Aq        (Rule 2)
\&    28
\&    29          \*(Aqa\*(Aq     shift, and go to state 2
\&    30
\&    31          $default        reduce using rule 1 (S)
\&    32
\&    33          S       go to state 4
\&    34
\&    35  State 3:
\&    36
\&    37          $start \-> S $end .      (Rule 0)
\&    38
\&    39          $default        accept
\&    40
\&    41  State 4:
\&    42
\&    43          S \-> \*(Aqa\*(Aq S . \*(Aqb\*(Aq        (Rule 2)
\&    44
\&    45          \*(Aqb\*(Aq     shift, and go to state 5
\&    46
\&    47  State 5:
\&    48
\&    49          S \-> \*(Aqa\*(Aq S \*(Aqb\*(Aq .        (Rule 2)
\&    50
\&    51          $default        reduce using rule 2 (S)
\&    52
\&    53
\&    54  Summary:
\&    55  \-\-\-\-\-\-\-\-
\&    56  Number of rules         : 3
\&    57  Number of terminals     : 3
\&    58  Number of non\-terminals : 2
\&    59  Number of states        : 6
.Ve
.PP
When executed with \f(CW\*(C`yydebug\*(C'\fR set and input \f(CW\*(C`aabb\*(C'\fR  we obtain the following 
output:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/debuggingtut$ eyapp \-b \*(Aq\*(Aq \-o use_aSb.pl aSb
\&  pl@nereida:~/LEyapp/examples/debuggingtut$ ./use_aSb.pl \-d
\&  Provide a statement like "a a b b" and press <CR><CTRL\-D>: aabb
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-                       
\&  In state 0:                                                    
\&  Stack:[0]                                                      
\&  Need token. Got >a<                                            
\&  Shift and go to state 2.                                       
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-                       
\&  In state 2:                                                    
\&  Stack:[0,2]                                                    
\&  Need token. Got >a<
\&  Shift and go to state 2.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 2:
\&  Stack:[0,2,2]
\&  Need token. Got >b<
\&  Reduce using rule 1 (S \-\-> /* empty */): S \-> epsilon
\&  Back to state 2, then go to state 4.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 4:
\&  Stack:[0,2,2,4]
\&  Shift and go to state 5.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 5:
\&  Stack:[0,2,2,4,5]
\&  Don\*(Aqt need token.
\&  Reduce using rule 2 (S \-\-> a S b): S \-> a S b
\&  Back to state 2, then go to state 4.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
As a result of reducing by rule 2 
the three last
visited states are popped
from the stack, and the stack becomes \f(CW\*(C`[0,2]\*(C'\fR. But 
that means that we are now in state 2 seeing a \f(CW\*(C`S\*(C'\fR. 
If you look at the table above being in state 2 and seeing a \f(CW\*(C`S\*(C'\fR
we go to state 4.
.PP
.Vb 10
\&  In state 4:
\&  Stack:[0,2,4]
\&  Need token. Got >b<
\&  Shift and go to state 5.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 5:
\&  Stack:[0,2,4,5]
\&  Don\*(Aqt need token.
\&  Reduce using rule 2 (S \-\-> a S b): S \-> a S b
\&  Back to state 0, then go to state 1.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 1:
\&  Stack:[0,1]
\&  Need token. Got ><
\&  Shift and go to state 3.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 3:
\&  Stack:[0,1,3]
\&  Don\*(Aqt need token.
\&  Accept.
.Ve
.ie n .SH "METHODS IN THE GENERATED CLASS: ""Parse::Eyapp::Driver"" METHODS"
.el .SH "METHODS IN THE GENERATED CLASS: \f(CWParse::Eyapp::Driver\fP METHODS"
.IX Header "METHODS IN THE GENERATED CLASS: Parse::Eyapp::Driver METHODS"
The class containing the parser generated by \f(CW\*(C`Parse::Eyapp\*(C'\fR inherits
from \f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR. Therefore all the methods in
\&\f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR  are available in the generated class.
.PP
This section describes the methods and objects belonging
to the class generated either using eyapp 
or \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR. In the incoming paragraphs
we will assume that \f(CW\*(C`Class\*(C'\fR was the 
value selected for the \f(CW\*(C`classname\*(C'\fR argument
when \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR was called.
Objects belonging to  \f(CW\*(C`Class\*(C'\fR are the actual parsers for the 
input grammar.
.SS "Class\->new"
.IX Subsection "Class->new"
The method \f(CW\*(C`Class\->new\*(C'\fR returns a new \s-1LALR\s0 parser object.
Here \f(CW\*(C`Class\*(C'\fR stands for the name of the class containing the parser.
See an example of call:
.PP
.Vb 5
\&  my $parser = main\->new(yyprefix => \*(AqParse::Eyapp::Node::\*(Aq,
\&                         yylex    => \e&main::_Lexer,
\&                         yyerror  => \e&main::_Error,
\&                         yydebug => 0x1F,
\&  );
.Ve
.PP
The meaning of the arguments used in the example are as follows:
.IP "\- yyprefix" 4
.IX Item "- yyprefix"
Used with \f(CW%tree\fR or \f(CW%metatree\fR. 
When used, the type names of the nodes of the syntax tree will
be build prefixing the value associated to \f(CW\*(C`yyprefix\*(C'\fR to the name of the production
rule. The name of the production rule is either explicitly given through a \f(CW%name\fR
directive or the concatenation of the left hand side of the rule with the
ordinal of the right hand side of the production. 
See section \*(L"Compiling with eyapp and treereg\*(R" in Parse::Eyapp for an example.
.IP "\- yylex" 4
.IX Item "- yylex"
Reference to the lexical analyzer subroutine
.IP "\- yyerror" 4
.IX Item "- yyerror"
Reference to the error subroutine. The error subroutine receives
as first argument the reference to the \f(CW\*(C`Class\*(C'\fR parser object.
This way it can take advantage of methods like \f(CW\*(C`YYCurval\*(C'\fR
and YYExpect (see below):
.Sp
.Vb 4
\&  sub _Error {
\&    my($token)=$_[0]\->YYCurval;
\&    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    my @expected = $_[0]\->YYExpect();
\&
\&    local $" = \*(Aq, \*(Aq;
\&    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&  }
.Ve
.IP "\- yydebug" 4
.IX Item "- yydebug"
Controls the level of debugging. Must be a number.
.PP
The package produced from the grammar has several methods.
.PP
The parser object has the following methods that work at parsing time
exactly as in Parse::Yapp. These methods can be found
in the module Parse::Eyapp::Driver. 
Assume you have in \f(CW$parser\fR the reference
to your parser object:
.ie n .SS "$parser\->YYAction"
.el .SS "\f(CW$parser\fP\->YYAction"
.IX Subsection "$parser->YYAction"
Receives the name of a production and a subroutine reference implementing the new semantic action.
If no subroutine reference is set returns the reference to the current semantic action. See 
the tutorial Parse::Eyapp::defaultaction and the examples in the \f(CW\*(C`examples/recycle/\*(C'\fR directory
.ie n .SS " $parser\->YYAccept"
.el .SS " \f(CW$parser\fP\->YYAccept"
.IX Subsection " $parser->YYAccept"
Works as yacc/bison \f(CW\*(C`YYACCEPT\*(C'\fR.
The parser finishes returning 
the current semantic value to indicate success.
.ie n .SS " $parser\->YYAbort"
.el .SS " \f(CW$parser\fP\->YYAbort"
.IX Subsection " $parser->YYAbort"
Works as yacc/bison \f(CW\*(C`YYABORT\*(C'\fR. 
The parser finishes returning 
\&\f(CW\*(C`undef\*(C'\fR to indicate failure.
.SS "Parse::Eyapp::Driver::BeANode"
.IX Subsection "Parse::Eyapp::Driver::BeANode"
Is not a method.
Receives as input a \f(CW\*(C`Class\*(C'\fR name. 
Introduces \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR as an ancestor class
of \f(CW\*(C`Class\*(C'\fR. To work correctly, objects belonging to 
\&\f(CW\*(C`Class\*(C'\fR must be hashes
with a \f(CW\*(C`children\*(C'\fR key whose value must be a reference
to the array of children. The children must be also
\&\f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes.
Actually you can circumvent this call by directly introducing
\&\f(CW\*(C`Parse::Eyapp::Node\*(C'\fR in the ancestors of \f(CW\*(C`Class\*(C'\fR:
.PP
.Vb 1
\&         push @{$class."::ISA"}, "Parse::Eyapp::Node"
.Ve
.ie n .SS "$parser\->YYBuildAST"
.el .SS "\f(CW$parser\fP\->YYBuildAST"
.IX Subsection "$parser->YYBuildAST"
Sometimes the best time to decorate a node with some attributes is just
after being built. In such cases the programmer can take manual control
building the node with \f(CW\*(C`YYBuildAST\*(C'\fR to immediately proceed to decorate it.
.PP
The following example from the file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR
in the tarball in \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR
illustrates the idea:
.PP
.Vb 9
\& Variable:
\&     %name  VARARRAY
\&     $ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq) <%name INDEXSPEC +>
\&       {
\&         my $self = shift;
\&         my $node =  $self\->YYBuildAST(@_);
\&         $node\->{line} = $ID\->[1];
\&         return $node;
\&       }
.Ve
.PP
Actually, the \f(CW%tree\fR directive is semantically equivalent to:
.PP
.Vb 1
\&  %default action { goto &Parse::Eyapp::Driver::YYBuildAST }
.Ve
.ie n .SS " $parser\->YYBuildingTree"
.el .SS " \f(CW$parser\fP\->YYBuildingTree"
.IX Subsection " $parser->YYBuildingTree"
Influences the semantic of list operators. 
If true the action associated with \f(CW\*(C`X+\*(C'\fR
will be to build a \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR node
with all the attributes of the elements in the list
as children. This is the appropriate semantic
when working under the \f(CW%tree\fR directive.
If set to false the semantic action will return
an anonymous list with the attributes 
associated with the \f(CW\*(C`X\*(C'\fR in the plus list.
Same thing with the operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`?\*(C'\fR.
.ie n .SS "$parser\->YYBuildTS"
.el .SS "\f(CW$parser\fP\->YYBuildTS"
.IX Subsection "$parser->YYBuildTS"
Similar to \f(CW\*(C`$parser\->YYBuildAST\*(C'\fR but builds nodes for translation schemes.
.ie n .SS "$parser\->YYBypass"
.el .SS "\f(CW$parser\fP\->YYBypass"
.IX Subsection "$parser->YYBypass"
Returns \s-1TRUE\s0 if running under the \f(CW\*(C`%tree bypass\*(C'\fR clause
.ie n .SS "$parser\->YYBypassrule"
.el .SS "\f(CW$parser\fP\->YYBypassrule"
.IX Subsection "$parser->YYBypassrule"
Returns \s-1TRUE\s0 if the production being
used for reduction was marked to be bypassed.
.ie n .SS " $parser\->YYCurtok"
.el .SS " \f(CW$parser\fP\->YYCurtok"
.IX Subsection " $parser->YYCurtok"
Gives the current token
.ie n .SS " $parser\->YYCurval"
.el .SS " \f(CW$parser\fP\->YYCurval"
.IX Subsection " $parser->YYCurval"
Gives the attribute associated with the current token
.ie n .SS "$parser\->YYDelegateaction"
.el .SS "\f(CW$parser\fP\->YYDelegateaction"
.IX Subsection "$parser->YYDelegateaction"
Use it as \f(CW\*(C`defaultaction\*(C'\fR if you want to recycle your grammar.
It is equivalent to:
.PP
.Vb 2
\&  sub YYDelegateaction {
\&    my $self = shift;
\&
\&    my $action = $self\->YYName;
\&
\&    $self\->$action(@_);
\&  }
.Ve
.PP
For a full example illustrating how to use it, see files \f(CW\*(C`examples/recycle/NoacInh.eyp\*(C'\fR
and \f(CW\*(C`examples/recycle/icalcu_and_ipost.pl\*(C'\fR
in the Parse::Eyapp distribution
.ie n .SS " $parser\->YYEndOfInput"
.el .SS " \f(CW$parser\fP\->YYEndOfInput"
.IX Subsection " $parser->YYEndOfInput"
True if the \f(CW\*(C`pos()\*(C'\fR of the input being scanned in \f(CW\*(C`${$parser\->input}\*(C'\fR is at the end
.ie n .SS " $parser\->YYErrok"
.el .SS " \f(CW$parser\fP\->YYErrok"
.IX Subsection " $parser->YYErrok"
Works as yacc/bison \f(CW\*(C`yyerrok\*(C'\fR. 
Modifies the error status
so that subsequent 
error messages will be emitted.
.ie n .SS " $parser\->YYError"
.el .SS " \f(CW$parser\fP\->YYError"
.IX Subsection " $parser->YYError"
Works as yacc/bison \f(CW\*(C`YYERROR\*(C'\fR.
Pretends that a syntax error has been detected.
.ie n .SS " $parser\->YYExpect"
.el .SS " \f(CW$parser\fP\->YYExpect"
.IX Subsection " $parser->YYExpect"
Returns the list of tokens the parser 
expected when the failure occurred
.PP
.Vb 6
\& pl@nereida:~/src/perl/YappWithDefaultAction/examples$ \e
\&                            sed \-ne \*(Aq26,33p\*(Aq Postfix.eyp
\& sub _Error {
\&   my($token)=$_[0]\->YYCurval;
\&   my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&   my @expected = $_[0]\->YYExpect();
\&
\&   local $" = \*(Aq, \*(Aq;
\&   die "Syntax error near $what. Expected one of these tokens: @expected\en";
\& }
.Ve
.PP
See the tutorial Parse::Eyapp::datagenerationtut and 
the section \fI\s-1TOKENS DEPENDING ON THE SYNTACTIC CONTEXT\s0\fR
in the tutorial Parse::Eyapp::debuggingtut for more detailed 
examples of use of \f(CW\*(C`YYExpect\*(C'\fR.
.ie n .SS "$parser\->YYFirstline"
.el .SS "\f(CW$parser\fP\->YYFirstline"
.IX Subsection "$parser->YYFirstline"
First line of the input string describing the grammar
.ie n .SS "$parser\->YYGrammar"
.el .SS "\f(CW$parser\fP\->YYGrammar"
.IX Subsection "$parser->YYGrammar"
Return the list of grammar items.
Each item is an anonymous list containing
.IP "\(bu" 2
The name of the production
.IP "\(bu" 2
The \s-1LHS\s0 of the production
.IP "\(bu" 2
An anonymous list containing the symbols in the \s-1RHS\s0
.PP
If it receives an index as argument returns the corresponding item
The following debugger session explain its use:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&    DB<1> n
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&    DB<1> x $parser\->YYGrammar
\&  0  ARRAY(0xde5e20)
\&     0  \*(Aq_SUPERSTART\*(Aq
\&     1  \*(Aq$start\*(Aq
\&     2  ARRAY(0xc85e80)
\&        0  \*(Aqline\*(Aq
\&        1  \*(Aq$end\*(Aq
\&     3  0
\&  1  ARRAY(0xe2b6b0)
\&     0  \*(Aqline_1\*(Aq
\&     1  \*(Aqline\*(Aq
\&     2  ARRAY(0xe3abc0)
\&        0  \*(Aqexp\*(Aq
\&     3  0
\&  2  ARRAY(0xa05530)
\&     0  \*(Aqexp_2\*(Aq
\&     1  \*(Aqexp\*(Aq
\&     2  ARRAY(0x75bdc0)
\&        0  \*(AqNUM\*(Aq
\&     3  0
\&
\&     ...  etc, etc
.Ve
.PP
If an index is provided it returns the item for such number:
.PP
.Vb 8
\&    DB<2> x $parser\->YYGrammar(10)
\&  0  \*(Aqexp_10\*(Aq
\&  1  \*(Aqexp\*(Aq
\&  2  ARRAY(0xa05f80)
\&     0  \*(Aq(\*(Aq
\&     1  \*(Aqexp\*(Aq
\&     2  \*(Aq)\*(Aq
\&  3  0
.Ve
.PP
You can also use a production name as argument:
.PP
.Vb 8
\&    DB<3> x $parser\->YYGrammar(\*(Aqexp_7\*(Aq)
\&  0  \*(Aqexp_7\*(Aq
\&  1  \*(Aqexp\*(Aq
\&  2  ARRAY(0xa05890)
\&     0  \*(Aqexp\*(Aq
\&     1  \*(Aq*\*(Aq
\&     2  \*(Aqexp\*(Aq
\&  3  0
.Ve
.ie n .SS "$parser\->YYGetLRAction($state, $token)"
.el .SS "\f(CW$parser\fP\->YYGetLRAction($state, \f(CW$token\fP)"
.IX Subsection "$parser->YYGetLRAction($state, $token)"
Returns the shift-reduce action for state \f(CW$state\fR
and token \f(CW$token\fR. A positive number must be interpreted as a shift 
to the state with that number. A negative number \f(CW\*(C`\-m\*(C'\fR indicates a reduction
by production with index \f(CW\*(C`m\*(C'\fR.  Returns \f(CW\*(C`undef\*(C'\fR if no action is defined
for such combination \f(CW\*(C`($state, $token)\*(C'\fR.
.PP
See example \f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR in the directory \f(CW\*(C`examples/debuggintut\*(C'\fR
for an example of use.
.ie n .SS "$parser\->YYIssemantic"
.el .SS "\f(CW$parser\fP\->YYIssemantic"
.IX Subsection "$parser->YYIssemantic"
Returns \s-1TRUE\s0 if the terminal is \fIsemantic\fR. \fISemantics token\fR can be declared
using the directive \f(CW\*(C`%semantic token\*(C'\fR. The opposite of a \fISemantic token\fR
is a \fISyntactic token\fR. \fISyntactic tokens\fR can be declared
using the directive  \f(CW\*(C`%syntactic token\*(C'\fR.
.PP
When using the \f(CW%tree\fR directive all the nodes corresponding to syntactic
tokens are pruned from the tree. Under this directive
tokens in the text delimited by simple quotes (like \f(CW\*(Aq+\*(Aq\fR)
are, by default, considered syntactic tokens.
.PP
When using the \f(CW%metatree\fR directive all the tokens 
are considered, by default, \fIsemantic tokens\fR.
Thus, no nodes will be \- by default\- pruned when construction
the code augmented tree. The exception are string tokens
used as separators in the definition of
lists,  like in \f(CW\*(C`S <* \*(Aq;\*(Aq>\*(C'\fR. If you want the separating string token
to appear include an explicit semantic declaration for it (example \f(CW\*(C`%semantic token \*(Aq;\*(Aq\*(C'\fR).
.ie n .SS "$parser\->YYIndex"
.el .SS "\f(CW$parser\fP\->YYIndex"
.IX Subsection "$parser->YYIndex"
Receives the name of production (right hand side).
Returns the index in the grammar of the production with such name.
When called in a list context and without a name return the hash
containing the relation
.PP
.Vb 1
\&           production name => production index
.Ve
.PP
The following debugger session illustrates its use:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&  DB<1> x $parser\->YYIndex
\&  0  \*(Aqline_1\*(Aq
\&  1  1
\&  2  \*(Aqexp_3\*(Aq
\&  3  3
\&  4  \*(Aqexp_6\*(Aq
\&  5  6
\&  6  \*(Aqexp_4\*(Aq
\&  7  4
\&  8  \*(Aqexp_10\*(Aq
\&  9  10
\&  10  \*(Aqexp_8\*(Aq
\&  11  8
\&  12  \*(Aqexp_5\*(Aq
\&  13  5
\&  14  \*(Aqexp_7\*(Aq
\&  15  7
\&  16  \*(Aqexp_2\*(Aq
\&  17  2
\&  18  \*(Aq_SUPERSTART\*(Aq
\&  19  0
\&  20  \*(Aqexp_9\*(Aq
\&  21  9
.Ve
.PP
We can specify a list of names:
.PP
.Vb 5
\&  DB<2> x $parser\->YYIndex(qw{exp_4 exp_7})
\&  0  4
\&  1  7
\&  DB<3> x $parser\->YYIndex(qw{exp_4})
\&  0  4
.Ve
.ie n .SS "$parser\->YYInput"
.el .SS "\f(CW$parser\fP\->YYInput"
.IX Subsection "$parser->YYInput"
Alias \f(CW\*(C`input\*(C'\fR. If an argument is provided, sets the input for the parser object.
The argument is a string or a reference to a string.
It returns a reference to the input string or \f(CW\*(C`undef\*(C'\fR if not set.
.ie n .SS "$parser\->YYIsterm"
.el .SS "\f(CW$parser\fP\->YYIsterm"
.IX Subsection "$parser->YYIsterm"
Returns \s-1TRUE \s0 if the symbol given as argument is a terminal. Example:
.PP
.Vb 4
\&  DB<0> x $self\->YYIsterm(\*(Aqexp\*(Aq)
\& 0  \*(Aq\*(Aq
\&  DB<1> x $self\->YYIsterm(\*(Aq*\*(Aq)
\& 0  1
.Ve
.PP
An example of combined 
use of \f(CW\*(C`YYRightside\*(C'\fR, \f(CW\*(C`YYRuleindex\*(C'\fR, \f(CW\*(C`YYLhs\*(C'\fR and \f(CW\*(C`YYIsterm\*(C'\fR
can be found \f(CW\*(C`examples/Eyapp/Rule3.yp\*(C'\fR:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> sed \-n \-e \*(Aq4,22p\*(Aq Rule3.yp | cat \-n
\&  1  sub build_node {
\&  2    my $self = shift;
\&  3    my @children = @_;
\&  4    my @right = $self\->YYRightside();
\&  5    my $var = $self\->YYLhs;
\&  6    my $rule = $self\->YYRuleindex();
\&  7
\&  8    for(my $i = 0; $i < @right; $i++) {
\&  9      $_ = $right[$i];
\& 10      if ($self\->YYIsterm($_)) {
\& 11        $children[$i] = bless { token => $_, attr => $children[$i] },
\& 12                                            _\|_PACKAGE_\|_.\*(Aq::TERMINAL\*(Aq;
\& 13      }
\& 14    }
\& 15    bless {
\& 16            children => \e@children,
\& 17            info => "$var \-> @right"
\& 18          }, _\|_PACKAGE_\|_."::${var}_$rule"
\& 19  }
.Ve
.PP
when executed an output similar to this is produced:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> userule3.pl
\& 2*3
\& $VAR1 = bless( {
\&   \*(Aqinfo\*(Aq => \*(Aqexp \-> exp * exp\*(Aq,
\&   \*(Aqchildren\*(Aq => [
\&     bless( {
\&       \*(Aqinfo\*(Aq => \*(Aqexp \-> NUM\*(Aq,
\&       \*(Aqchildren\*(Aq => [ bless( { \*(Aqattr\*(Aq => \*(Aq2\*(Aq, \*(Aqtoken\*(Aq => \*(AqNUM\*(Aq }, \*(AqRule3::TERMINAL\*(Aq ) ]
\&     }, \*(AqRule3::exp_6\*(Aq ),
\&     bless( { \*(Aqattr\*(Aq => \*(Aq*\*(Aq, \*(Aqtoken\*(Aq => \*(Aq*\*(Aq }, \*(AqRule3::TERMINAL\*(Aq ),
\&     bless( {
\&       \*(Aqinfo\*(Aq => \*(Aqexp \-> NUM\*(Aq,
\&       \*(Aqchildren\*(Aq => [ bless( { \*(Aqattr\*(Aq => \*(Aq3\*(Aq, \*(Aqtoken\*(Aq => \*(AqNUM\*(Aq }, \*(AqRule3::TERMINAL\*(Aq )
\&       ]
\&     }, \*(AqRule3::exp_6\*(Aq )
\&   ]
\& }, \*(AqRule3::exp_11\*(Aq );
.Ve
.ie n .SS " $parser\->YYLexer"
.el .SS " \f(CW$parser\fP\->YYLexer"
.IX Subsection " $parser->YYLexer"
Returns a reference to the lexical analyzer
.ie n .SS " $parser\->YYLhs"
.el .SS " \f(CW$parser\fP\->YYLhs"
.IX Subsection " $parser->YYLhs"
Returns the identifier of the left hand side of the current production (the one
that is being used for reduction/reverse derivation. An example 
of use can be found in \f(CW\*(C`examples/Eyapp/Lhs1.yp\*(C'\fR:
.PP
.Vb 1
\&  %defaultaction { print $_[0]\->YYLhs,"\en" }
.Ve
.ie n .SS "$parser\->YYMain"
.el .SS "\f(CW$parser\fP\->YYMain"
.IX Subsection "$parser->YYMain"
Alias is also \f(CW\*(C`main\*(C'\fR.
.PP
Other than the package, it has as optional arguments the \f(CW\*(C`prompt\*(C'\fR 
(shown each time it ask for input), the name of the input file
(if it wasn't specified in the command line using \f(CW\*(C`\-\-file filename\*(C'\fR)
and also the input string.
.PP
This method provides a default \f(CW\*(C`main\*(C'\fR for testing the generated parser.
It parses the commandline searching for a number of options. See
an example of use:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat use_list2.pl
\&  #!/usr/bin/env perl
\&  use warnings;
\&  use strict;
\&  use List2;
\&
\&  unshift @ARGV, \*(Aq\-\-noslurp\*(Aq;
\&  List2\->new\->main("Try input \*(Aqaacbb\*(Aq: ");
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./use_list2.pl \-\-help
\&  Available options:
\&      \-\-debug                    sets yydebug on
\&      \-\-nodebug                  sets yydebug off
\&      \-\-file filepath            read input from filepath
\&      \-\-commandinput string      read input from string
\&      \-\-tree                     prints $tree\->str
\&      \-\-notree                   does not print $tree\->str
\&      \-\-info                     When printing $tree\->str shows the value of TERMINALs
\&      \-\-help                     shows this help
\&      \-\-slurp                    read until EOF reached
\&      \-\-noslurp                  read until CR is reached
\&      \-\-argfile                  main() will take the input string from its @_
\&      \-\-noargfile                main() will not take the input string from its @_
\&      \-\-yaml                     dumps YAML for $tree: YAML module must be installed
\&      \-\-margin=i                 controls the indentation of $tree\->str (i.e. $Parse::Eyapp::Node::INDENT)
.Ve
.ie n .SS "$parser\->YYName"
.el .SS "\f(CW$parser\fP\->YYName"
.IX Subsection "$parser->YYName"
Returns the name of the current rule (The production whose reduction
gave place to the execution of the current semantic action).
.PP
.Vb 2
\&  DB<12> x $self\->YYName
\& 0  \*(Aqexp_11\*(Aq
.Ve
.ie n .SS "$parser\->YYNames"
.el .SS "\f(CW$parser\fP\->YYNames"
.IX Subsection "$parser->YYNames"
Return the list of production names. In a scalar context returns
a reference to such list.
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ eyapp Postfix
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&  DB<1> x $parser\->YYNames
\&  0  \*(Aq_SUPERSTART\*(Aq
\&  1  \*(Aqline_1\*(Aq
\&  2  \*(Aqexp_2\*(Aq
\&  3  \*(Aqexp_3\*(Aq
\&  4  \*(Aqexp_4\*(Aq
\&  5  \*(Aqexp_5\*(Aq
\&  6  \*(Aqexp_6\*(Aq
\&  7  \*(Aqexp_7\*(Aq
\&  8  \*(Aqexp_8\*(Aq
\&  9  \*(Aqexp_9\*(Aq
\&  10  \*(Aqexp_10\*(Aq
.Ve
.ie n .SS "$parser\->YYNberr"
.el .SS "\f(CW$parser\fP\->YYNberr"
.IX Subsection "$parser->YYNberr"
The current number of errors
.ie n .SS "$parser\->\fIYYNextState()\fP;"
.el .SS "\f(CW$parser\fP\->\fIYYNextState()\fP;"
.IX Subsection "$parser->YYNextState();"
If called inside a semantic
action, returns the state after the reduction
by the current production.
.PP
Provide a token if called from any other side:
.PP
.Vb 1
\&  $parser\->YYNextState($token);
.Ve
.PP
It will return the state given by the action table
for the state in the top of the stack and the given token.
.PP
For an example, see the program \f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR 
in the directory \f(CW\*(C`examples/debuggintut/\*(C'\fR.
.ie n .SS "$parser\->YYPrefix"
.el .SS "\f(CW$parser\fP\->YYPrefix"
.IX Subsection "$parser->YYPrefix"
Return and/or sets the \f(CW\*(C`yyprefix\*(C'\fR attribute. This a string that will be concatenated
as a prefix to any \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes in the syntax tree.
.ie n .SS " $parser\->\fIYYParse()\fP"
.el .SS " \f(CW$parser\fP\->\fIYYParse()\fP"
.IX Subsection " $parser->YYParse()"
It very much works \f(CW\*(C`Parse::Yapp::YYParse\*(C'\fR and as yacc/bison \f(CW\*(C`yyparse\*(C'\fR.
It accepts almost the same arguments as \f(CW\*(C`Class\->new\*(C'\fR with the exception
of \f(CW\*(C`yyprefix\*(C'\fR which can be used only with \f(CW\*(C`new\*(C'\fR.
.ie n .SS " $parser\->YYRecovering"
.el .SS " \f(CW$parser\fP\->YYRecovering"
.IX Subsection " $parser->YYRecovering"
Works as yacc/bison \f(CW\*(C`YYRECOVERING\*(C'\fR.
Returns \f(CW\*(C`TRUE\*(C'\fR if the parser is recovering from a syntax error.
.ie n .SS "$parser\->YYRestoreLRAction('conflictname', $token)"
.el .SS "\f(CW$parser\fP\->YYRestoreLRAction('conflictname', \f(CW$token\fP)"
.IX Subsection "$parser->YYRestoreLRAction('conflictname', $token)"
This method has been designed to solve shift-reduce and reduce-reduce conflicts
at parsing-time using the \fIpostponed conflict\fR strategy. 
It has to be called inside the semantic
action associated with the postponed conflict rule. The \s-1LALR\s0 table is changed
so that the action in the presence of the token \f(CW$token\fR is restored
the one before the last call to
.PP
.Vb 1
\&  $parser\->YYSetReduce($token, $productionname )
.Ve
.PP
See the examples in \f(CW\*(C`examples/debuggingtut/\*(C'\fR in files 
\&\f(CW\*(C`DynamicallyChangingTheParser2.eyp\*(C'\fR
and \f(CW\*(C`Cplusplus.eyp\*(C'\fR.
.ie n .SS "$parser\->YYRHSLength($productionindex)"
.el .SS "\f(CW$parser\fP\->YYRHSLength($productionindex)"
.IX Subsection "$parser->YYRHSLength($productionindex)"
Also:
.PP
.Vb 1
\&  $parser\->YYRHSLength
.Ve
.PP
returns the length of the right hand side (the number of symbols) of 
\&\f(CW$productionindex\fR. The name of the production can be used instead of its index.
If no index or name is provided and the method is called inside a semantic
action, the length of the current production is returned.
.ie n .SS "$parser\->YYRightside"
.el .SS "\f(CW$parser\fP\->YYRightside"
.IX Subsection "$parser->YYRightside"
Also:
.PP
.Vb 1
\&  $parser\->YYRightside($index)
.Ve
.PP
Returns an array of strings describing the right hand side of the rule. 
The name of the production can be given instead of \f(CW$index\fR. If no 
\&\f(CW$index\fR is provided and the method is called inside a semantic action
the right hand side of the current production is returned.
.ie n .SS "$parser\->YYRuleindex"
.el .SS "\f(CW$parser\fP\->YYRuleindex"
.IX Subsection "$parser->YYRuleindex"
To be called inside a semantic action.
Returns the index of the current production rule, counting the super rule as rule 0.
.PP
To know the numbers have a look at  the \f(CW\*(C`.output\*(C'\fR file.
To get a \f(CW\*(C`.output\*(C'\fR file use the option \f(CW\*(C`\-v\*(C'\fR of \f(CW\*(C`eyapp\*(C'\fR or the \f(CW\*(C`outputfile\*(C'\fR
parameter when using method \f(CW\*(C`new_grammar\*(C'\fR (see the documentation for eyapp).
.ie n .SS "$parser\->YYRule"
.el .SS "\f(CW$parser\fP\->YYRule"
.IX Subsection "$parser->YYRule"
Return the list of rules. 
The following debugger session illustrates its use:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&  0  ARRAY(0xa068e0)
\&     0  \*(Aq$start\*(Aq
\&     1  2
\&     2  undef
\&  1  ARRAY(0xa06940)
\&     0  \*(Aqline\*(Aq
\&     1  1
\&     2  CODE(0xc22360)
\&        \-> &Postfix::_\|_ANON_\|_[Postfix.eyp:10] in Postfix.eyp:227\-10
\&  ... etc, etc.
.Ve
.PP
Each item has three components: the \s-1LHS\s0 of the production, the number of symbols
in the \s-1RHS\s0 and the \s-1CODE\s0 reference to the semantic action.
.PP
If an index is specified as argument it returns the corresponding item:
.PP
.Vb 5
\&     DB<2> x $parser\->YYRule(7)
\&  0  \*(Aqexp\*(Aq
\&  1  3
\&  2  CODE(0xc1fce0)
\&     \-> &Postfix::_\|_ANON_\|_[Postfix.eyp:7] in Postfix.eyp:276\-7
.Ve
.PP
To know to what production an item is associated we can use the \f(CW\*(C`YYGrammar\*(C'\fR method:
.PP
.Vb 8
\&     DB<3> x $parser\->YYGrammar(\*(Aqexp_7\*(Aq)
\&  0  \*(Aqexp_7\*(Aq
\&  1  \*(Aqexp\*(Aq
\&  2  ARRAY(0xa05290)
\&     0  \*(Aqexp\*(Aq
\&     1  \*(Aq*\*(Aq
\&     2  \*(Aqexp\*(Aq
\&  3  0
.Ve
.PP
We can also use the name of the rule to get the item:
.PP
.Vb 5
\&   DB<4> x $parser\->YYRule(\*(Aqexp_7\*(Aq)
\&  0  \*(Aqexp\*(Aq
\&  1  3
\&  2  CODE(0xc1fce0)
\&     \-> &Postfix::_\|_ANON_\|_[Postfix.eyp:7] in Postfix.eyp:276\-7
.Ve
.ie n .SS "$parser\->YYSetaction"
.el .SS "\f(CW$parser\fP\->YYSetaction"
.IX Subsection "$parser->YYSetaction"
Receives a hash with keys the names of the production rules (right hand sides) and values
the new semantic actions. Used to reuse a grammar without overwriting all the semantic actions.
See section \fIReusing Grammars by Dynamic Substitution of Semantic Actions\fR
in Parse::Eyapp::defaultactionsintro.
.ie n .SS "$parser\->YYSetLRAction($conflictstate, $token, $shiftreduceaction )"
.el .SS "\f(CW$parser\fP\->YYSetLRAction($conflictstate, \f(CW$token\fP, \f(CW$shiftreduceaction\fP )"
.IX Subsection "$parser->YYSetLRAction($conflictstate, $token, $shiftreduceaction )"
It also accepts the syntax:
.PP
.Vb 1
\&  $parser\->YYSetLRAction($conflictstate, [$token1, ... ], $shiftreduceaction )
.Ve
.PP
This method has been designed to solve shift-reduce and reduce-reduce conflicts
at parsing-time (not at parser-generation time).
.PP
The \s-1LR\s0 table is changed so that the action in state \f(CW$conflictstate\fR
in the presence of the token \f(CW$token\fR will be given by \f(CW$shiftreduceaction\fR. 
The current shift-reduce action isn't saved.
.PP
See an example in
\&\f(CW\*(C`Cplusplus2.eyp\*(C'\fR in the directory \f(CW\*(C`examples/debuggintut\*(C'\fR.
.ie n .SS "$parser\->YYSetReduce($token, $productionname )"
.el .SS "\f(CW$parser\fP\->YYSetReduce($token, \f(CW$productionname\fP )"
.IX Subsection "$parser->YYSetReduce($token, $productionname )"
This method has been designed to solve shift-reduce and reduce-reduce conflicts
at parsing-time using the \fIpostponed conflict\fR strategy. See the corresponding 
section in Parse::Eyapp::debuggintut. It has to be called inside the semantic
action associated with the postponed conflict rule \f(CW\*(C`conflictname\*(C'\fR. 
The \s-1LALR\s0 table is changed
so that the action in the presence of the token \f(CW$token\fR will be to reduce
by \f(CW$productionname\fR. The current shift-reduce action is saved
to be restored using
.PP
.Vb 1
\&  $parser\->YYRestoreLRAction(\*(Aqconflictname\*(Aq, $token)
.Ve
.PP
See the examples in \f(CW\*(C`examples/debuggingtut/\*(C'\fR in files
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser2.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`confusingsolveddynamic.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DebugDynamicResolution.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser2.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser3.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicvsTieIns.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`nolr_k_grammarsolveddynamic.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`pascalenumeratedvsrangesolvedviadyn.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`Cplusplus.eyp\*(C'\fR.
.ie n .SS "$parser\->YYSetShift($token)"
.el .SS "\f(CW$parser\fP\->YYSetShift($token)"
.IX Subsection "$parser->YYSetShift($token)"
Also:
.PP
.Vb 1
\&      $parser\->YYSetShift([$token1, $token2, ... ])
.Ve
.PP
This method has been designed to solve shift-reduce 
at parsing-time using the \fIpostponed conflict\fR strategy. See the corresponding 
section in Parse::Eyapp::debuggintut. It has to be called inside the semantic
action associated with the postponed conflict rule \f(CW\*(C`conflictname\*(C'\fR. 
The \s-1LALR\s0 table is changed
so that the action in the presence of the token \f(CW$token\fR will be to shift.
.PP
See the examples in \f(CW\*(C`examples/debuggingtut/\*(C'\fR in files
.IP "\(bu" 2
\&\f(CW\*(C`DebugDynamicResolution.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR
.ie n .SS "$parser\->YYSlurpFile"
.el .SS "\f(CW$parser\fP\->YYSlurpFile"
.IX Subsection "$parser->YYSlurpFile"
alias:
.PP
.Vb 1
\& $parser\->slurp_file($filename[,$prompt[,$mode]])
.Ve
.PP
Receives the name of the file, reads its contents
and stores it in \f(CW\*(C`$parser\->input\*(C'\fR.
.PP
If the file does not exists, it proceeds to read from \f(CW\*(C`STDIN\*(C'\fR.
If a prompt was set with \f(CW\*(C`$parser\->YYPrompt\*(C'\fR, it will be shown.
The additional optional parameter \f(CW$mode\fR is used in such case to set 
\&\f(CW$/\fR. It can also be used as a class method.
.ie n .SS "$parser\->YYState"
.el .SS "\f(CW$parser\fP\->YYState"
.IX Subsection "$parser->YYState"
\&\f(CW\*(C`YYState\*(C'\fR returns a reference to the list of states containing the \s-1\fILALR\s0\fR\|(1) tables: the 
action and \s-1GOTO\s0 tables.  Each state is an anonymous hash:
.PP
.Vb 5
\&  DB<4> x $parser\->YYState(2)
\&  0  HASH(0xfa7120)
\&     \*(AqACTIONS\*(Aq => HASH(0xfa70f0) # token => state
\&           \*(Aq:\*(Aq => \*(Aq\-7\*(Aq
\&     \*(AqDEFAULT\*(Aq => \*(Aq\-6\*(Aq
.Ve
.PP
A negative number means reduction using the corresponding production 
rule (opposite) number. The former example tells to reduce by rule 7
when in state 2 and seeing token \f(CW\*(Aq:\*(Aq\fR. By default, the action when
in state 2 is to reduce by rule number 6.
.PP
There are three keys: \s-1ACTIONS, GOTOS\s0 and  \s-1DEFAULT\s0
.PP
.Vb 6
\&  DB<7> x $parser\->YYState(13)
\& 0  HASH(0xfa8b50)
\&    \*(AqACTIONS\*(Aq => HASH(0xfa7530)
\&       \*(AqVAR\*(Aq => 17
\&    \*(AqGOTOS\*(Aq => HASH(0xfa8b20)
\&       \*(Aqtype\*(Aq => 19
.Ve
.PP
The \s-1GOTOS\s0 tables contains the \s-1DFA\s0 transition tables for
the syntactic variables. The former example tells
to move to state 19 when in state 13 after seeing
the syntactic variable \f(CW\*(C`type\*(C'\fR (i.e. if after reducing by a 
rule of \f(CW\*(C`type\*(C'\fR we are in state 13).
.ie n .SS "$parser\->YYTopState($length)"
.el .SS "\f(CW$parser\fP\->YYTopState($length)"
.IX Subsection "$parser->YYTopState($length)"
If \f(CW$length\fR is zero or not provided 
it returns the state on top of the stack.
Otherwise, returns the state \f(CW$length\fR units deep in the stack.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE \s0(\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04
\&\s0(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601
\&\s0(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\*(R"\s0 in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0
      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp::Driver5.16.3pm                 0100644 0001750 0001750 00000130561 12566242265 025420  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::Driver 3"
.TH Parse::Eyapp::Driver 3 "2012-03-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::Driver \- The LR parser
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
This class has the method \f(CW\*(C`YYParse\*(C'\fR implementing the \s-1LR\s0 generic
parsing algorithm plus the methods that give support to the generated
parser.
.ie n .SH "THE ""YYParse"" METHOD"
.el .SH "THE \f(CWYYParse\fP METHOD"
.IX Header "THE YYParse METHOD"
The \f(CW\*(C`YYParse\*(C'\fR methods implements the generic \s-1LR\s0 parsing algorithm.
It very much works \f(CW\*(C`Parse::Yapp::YYParse\*(C'\fR and as yacc/bison \f(CW\*(C`yyparse\*(C'\fR.
It accepts almost the same arguments as \f(CW\*(C`Class\->new\*(C'\fR (Being \f(CW\*(C`Class\*(C'\fR the name 
of the generated class).
.PP
The parser uses two tables and a stack. The two tables
are called the \fIaction\fR table and the \fIgoto\fR table.
The stack is used to keep track of the states visited.
.PP
At each step the generated parser consults the 
\&\f(CW\*(C`action\*(C'\fR table and takes one decision:
To shift to a new state consuming one token (and pushing 
the current state in the stack) or to reduce by some
production rule. In the last case the parser pops
from its stack as many states as symbols are on the right hand side
of the production rule. Here is a Perl/C like pseudocode
summarizing the activity of \f(CW\*(C`YYParse\*(C'\fR:
.PP
.Vb 10
\&     1   my $parser = shift; # The parser object
\&     2   push(@stack, $parser\->{startstate});
\&     3   $b = $parser\->YYLexer(); # Get the first token
\&     4   FOREVER: {
\&     5     $s = top(0);  # Get the state on top of the stack
\&     6     $a = $b;
\&     7     switch ($parser\->action[$s\->state][$a]) {
\&     8       case "shift t" : 
\&     9         my $t;
\&    10         $t\->{state} = t;
\&    11         $t\->{attr}  = $a\->{attr};
\&    12         push($t); 
\&    13         $b = $parser\->YYLexer(); # Call the lexical analyzer
\&    14         break;
\&    15       case "reduce A\->alpha" : 
\&    16         # Call the semantic action with the attributes of the rhs as args
\&    17         my $semantic  = $parser\->Semantic{A \->alpha}; # The semantic action
\&    18         my $r;
\&    19         $r\->{attr} = $semantic\->($parser, top(|alpha|\-1)\->attr, ... , top(0)\->attr); 
\&    20  
\&    21         # Pop as many states as symbols on the rhs of A\->alpha
\&    22         pop(|alpha|);  
\&    23  
\&    24         # Goto next state 
\&    25         $r\->{state} = $parser\->goto[top(0)][A]; 
\&    26         push($r); 
\&    27         break;
\&    28       case "accept" : return (1); 
\&    29       default : $parser\->YYError("syntax error"); 
\&    30     }
\&    31     redo FOREVER;
\&    32   }
.Ve
.PP
Here \f(CW\*(C`|alpha|\*(C'\fR stands for the length of \f(CW\*(C`alpha\*(C'\fR. Function \f(CWtop(k)\fR returns
the state in position \f(CW\*(C`k\*(C'\fR from the top of the stack, i.e. the state at depth \f(CW\*(C`k\*(C'\fR.
Function \f(CWpop(k)\fR extracts \f(CW\*(C`k\*(C'\fR states from the stack. The call \f(CW\*(C`$state\->attr\*(C'\fR
returns the attribute associated with \f(CW$state\fR. The call \f(CW\*(C`$parser\->Semantic{A \->alpha}\*(C'\fR
returns the semantic action associated with production \f(CW\*(C`A \->alpha\*(C'\fR.
.PP
Let us see a trace for the small grammar in \f(CW\*(C`examples/debuggingtut/aSb.yp\*(C'\fR:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples$ /usr/local/bin/paste.pl aSb.yp aSb.output | head \-5
\&  %%                                             | Rules:
\&  S:                 { print "S \-> epsilon\en" }  | \-\-\-\-\-\-
\&      |   \*(Aqa\*(Aq S \*(Aqb\*(Aq  { print "S \-> a S b\en" }    | 0:    $start \-> S $end
\&  ;                                              | 1:    S \-> /* empty */
\&  %%                                             | 2:    S \-> \*(Aqa\*(Aq S \*(Aqb\*(Aq
.Ve
.PP
The tables in file \f(CW\*(C`aSb.output\*(C'\fR describe the 
actions and transitions to take:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n aSb.output
\&     .  .........................................
\&     7  States:
\&     8  \-\-\-\-\-\-\-
\&     9  State 0:
\&    10
\&    11          $start \-> . S $end      (Rule 0)
\&    12
\&    13          \*(Aqa\*(Aq     shift, and go to state 2
\&    14
\&    15          $default        reduce using rule 1 (S)
\&    16
\&    17          S       go to state 1
\&    18
\&    19  State 1:
\&    20
\&    21          $start \-> S . $end      (Rule 0)
\&    22
\&    23          $end    shift, and go to state 3
\&    24
\&    25  State 2:
\&    26
\&    27          S \-> \*(Aqa\*(Aq . S \*(Aqb\*(Aq        (Rule 2)
\&    28
\&    29          \*(Aqa\*(Aq     shift, and go to state 2
\&    30
\&    31          $default        reduce using rule 1 (S)
\&    32
\&    33          S       go to state 4
\&    34
\&    35  State 3:
\&    36
\&    37          $start \-> S $end .      (Rule 0)
\&    38
\&    39          $default        accept
\&    40
\&    41  State 4:
\&    42
\&    43          S \-> \*(Aqa\*(Aq S . \*(Aqb\*(Aq        (Rule 2)
\&    44
\&    45          \*(Aqb\*(Aq     shift, and go to state 5
\&    46
\&    47  State 5:
\&    48
\&    49          S \-> \*(Aqa\*(Aq S \*(Aqb\*(Aq .        (Rule 2)
\&    50
\&    51          $default        reduce using rule 2 (S)
\&    52
\&    53
\&    54  Summary:
\&    55  \-\-\-\-\-\-\-\-
\&    56  Number of rules         : 3
\&    57  Number of terminals     : 3
\&    58  Number of non\-terminals : 2
\&    59  Number of states        : 6
.Ve
.PP
When executed with \f(CW\*(C`yydebug\*(C'\fR set and input \f(CW\*(C`aabb\*(C'\fR  we obtain the following 
output:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/debuggingtut$ eyapp \-b \*(Aq\*(Aq \-o use_aSb.pl aSb
\&  pl@nereida:~/LEyapp/examples/debuggingtut$ ./use_aSb.pl \-d
\&  Provide a statement like "a a b b" and press <CR><CTRL\-D>: aabb
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-                       
\&  In state 0:                                                    
\&  Stack:[0]                                                      
\&  Need token. Got >a<                                            
\&  Shift and go to state 2.                                       
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-                       
\&  In state 2:                                                    
\&  Stack:[0,2]                                                    
\&  Need token. Got >a<
\&  Shift and go to state 2.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 2:
\&  Stack:[0,2,2]
\&  Need token. Got >b<
\&  Reduce using rule 1 (S \-\-> /* empty */): S \-> epsilon
\&  Back to state 2, then go to state 4.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 4:
\&  Stack:[0,2,2,4]
\&  Shift and go to state 5.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 5:
\&  Stack:[0,2,2,4,5]
\&  Don\*(Aqt need token.
\&  Reduce using rule 2 (S \-\-> a S b): S \-> a S b
\&  Back to state 2, then go to state 4.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
As a result of reducing by rule 2 
the three last
visited states are popped
from the stack, and the stack becomes \f(CW\*(C`[0,2]\*(C'\fR. But 
that means that we are now in state 2 seeing a \f(CW\*(C`S\*(C'\fR. 
If you look at the table above being in state 2 and seeing a \f(CW\*(C`S\*(C'\fR
we go to state 4.
.PP
.Vb 10
\&  In state 4:
\&  Stack:[0,2,4]
\&  Need token. Got >b<
\&  Shift and go to state 5.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 5:
\&  Stack:[0,2,4,5]
\&  Don\*(Aqt need token.
\&  Reduce using rule 2 (S \-\-> a S b): S \-> a S b
\&  Back to state 0, then go to state 1.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 1:
\&  Stack:[0,1]
\&  Need token. Got ><
\&  Shift and go to state 3.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 3:
\&  Stack:[0,1,3]
\&  Don\*(Aqt need token.
\&  Accept.
.Ve
.ie n .SH "METHODS IN THE GENERATED CLASS: ""Parse::Eyapp::Driver"" METHODS"
.el .SH "METHODS IN THE GENERATED CLASS: \f(CWParse::Eyapp::Driver\fP METHODS"
.IX Header "METHODS IN THE GENERATED CLASS: Parse::Eyapp::Driver METHODS"
The class containing the parser generated by \f(CW\*(C`Parse::Eyapp\*(C'\fR inherits
from \f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR. Therefore all the methods in
\&\f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR  are available in the generated class.
.PP
This section describes the methods and objects belonging
to the class generated either using eyapp 
or \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR. In the incoming paragraphs
we will assume that \f(CW\*(C`Class\*(C'\fR was the 
value selected for the \f(CW\*(C`classname\*(C'\fR argument
when \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR was called.
Objects belonging to  \f(CW\*(C`Class\*(C'\fR are the actual parsers for the 
input grammar.
.SS "Class\->new"
.IX Subsection "Class->new"
The method \f(CW\*(C`Class\->new\*(C'\fR returns a new \s-1LALR\s0 parser object.
Here \f(CW\*(C`Class\*(C'\fR stands for the name of the class containing the parser.
See an example of call:
.PP
.Vb 5
\&  my $parser = main\->new(yyprefix => \*(AqParse::Eyapp::Node::\*(Aq,
\&                         yylex    => \e&main::_Lexer,
\&                         yyerror  => \e&main::_Error,
\&                         yydebug => 0x1F,
\&  );
.Ve
.PP
The meaning of the arguments used in the example are as follows:
.IP "\- yyprefix" 4
.IX Item "- yyprefix"
Used with \f(CW%tree\fR or \f(CW%metatree\fR. 
When used, the type names of the nodes of the syntax tree will
be build prefixing the value associated to \f(CW\*(C`yyprefix\*(C'\fR to the name of the production
rule. The name of the production rule is either explicitly given through a \f(CW%name\fR
directive or the concatenation of the left hand side of the rule with the
ordinal of the right hand side of the production. 
See section \*(L"Compiling with eyapp and treereg\*(R" in Parse::Eyapp for an example.
.IP "\- yylex" 4
.IX Item "- yylex"
Reference to the lexical analyzer subroutine
.IP "\- yyerror" 4
.IX Item "- yyerror"
Reference to the error subroutine. The error subroutine receives
as first argument the reference to the \f(CW\*(C`Class\*(C'\fR parser object.
This way it can take advantage of methods like \f(CW\*(C`YYCurval\*(C'\fR
and YYExpect (see below):
.Sp
.Vb 4
\&  sub _Error {
\&    my($token)=$_[0]\->YYCurval;
\&    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    my @expected = $_[0]\->YYExpect();
\&
\&    local $" = \*(Aq, \*(Aq;
\&    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&  }
.Ve
.IP "\- yydebug" 4
.IX Item "- yydebug"
Controls the level of debugging. Must be a number.
.PP
The package produced from the grammar has several methods.
.PP
The parser object has the following methods that work at parsing time
exactly as in Parse::Yapp. These methods can be found
in the module Parse::Eyapp::Driver. 
Assume you have in \f(CW$parser\fR the reference
to your parser object:
.ie n .SS "$parser\->YYAction"
.el .SS "\f(CW$parser\fP\->YYAction"
.IX Subsection "$parser->YYAction"
Receives the name of a production and a subroutine reference implementing the new semantic action.
If no subroutine reference is set returns the reference to the current semantic action. See 
the tutorial Parse::Eyapp::defaultaction and the examples in the \f(CW\*(C`examples/recycle/\*(C'\fR directory
.ie n .SS " $parser\->YYAccept"
.el .SS " \f(CW$parser\fP\->YYAccept"
.IX Subsection " $parser->YYAccept"
Works as yacc/bison \f(CW\*(C`YYACCEPT\*(C'\fR.
The parser finishes returning 
the current semantic value to indicate success.
.ie n .SS " $parser\->YYAbort"
.el .SS " \f(CW$parser\fP\->YYAbort"
.IX Subsection " $parser->YYAbort"
Works as yacc/bison \f(CW\*(C`YYABORT\*(C'\fR. 
The parser finishes returning 
\&\f(CW\*(C`undef\*(C'\fR to indicate failure.
.SS "Parse::Eyapp::Driver::BeANode"
.IX Subsection "Parse::Eyapp::Driver::BeANode"
Is not a method.
Receives as input a \f(CW\*(C`Class\*(C'\fR name. 
Introduces \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR as an ancestor class
of \f(CW\*(C`Class\*(C'\fR. To work correctly, objects belonging to 
\&\f(CW\*(C`Class\*(C'\fR must be hashes
with a \f(CW\*(C`children\*(C'\fR key whose value must be a reference
to the array of children. The children must be also
\&\f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes.
Actually you can circumvent this call by directly introducing
\&\f(CW\*(C`Parse::Eyapp::Node\*(C'\fR in the ancestors of \f(CW\*(C`Class\*(C'\fR:
.PP
.Vb 1
\&         push @{$class."::ISA"}, "Parse::Eyapp::Node"
.Ve
.ie n .SS "$parser\->YYBuildAST"
.el .SS "\f(CW$parser\fP\->YYBuildAST"
.IX Subsection "$parser->YYBuildAST"
Sometimes the best time to decorate a node with some attributes is just
after being built. In such cases the programmer can take manual control
building the node with \f(CW\*(C`YYBuildAST\*(C'\fR to immediately proceed to decorate it.
.PP
The following example from the file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR
in the tarball in \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR
illustrates the idea:
.PP
.Vb 9
\& Variable:
\&     %name  VARARRAY
\&     $ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq) <%name INDEXSPEC +>
\&       {
\&         my $self = shift;
\&         my $node =  $self\->YYBuildAST(@_);
\&         $node\->{line} = $ID\->[1];
\&         return $node;
\&       }
.Ve
.PP
Actually, the \f(CW%tree\fR directive is semantically equivalent to:
.PP
.Vb 1
\&  %default action { goto &Parse::Eyapp::Driver::YYBuildAST }
.Ve
.ie n .SS " $parser\->YYBuildingTree"
.el .SS " \f(CW$parser\fP\->YYBuildingTree"
.IX Subsection " $parser->YYBuildingTree"
Influences the semantic of list operators. 
If true the action associated with \f(CW\*(C`X+\*(C'\fR
will be to build a \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR node
with all the attributes of the elements in the list
as children. This is the appropriate semantic
when working under the \f(CW%tree\fR directive.
If set to false the semantic action will return
an anonymous list with the attributes 
associated with the \f(CW\*(C`X\*(C'\fR in the plus list.
Same thing with the operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`?\*(C'\fR.
.ie n .SS "$parser\->YYBuildTS"
.el .SS "\f(CW$parser\fP\->YYBuildTS"
.IX Subsection "$parser->YYBuildTS"
Similar to \f(CW\*(C`$parser\->YYBuildAST\*(C'\fR but builds nodes for translation schemes.
.ie n .SS "$parser\->YYBypass"
.el .SS "\f(CW$parser\fP\->YYBypass"
.IX Subsection "$parser->YYBypass"
Returns \s-1TRUE\s0 if running under the \f(CW\*(C`%tree bypass\*(C'\fR clause
.ie n .SS "$parser\->YYBypassrule"
.el .SS "\f(CW$parser\fP\->YYBypassrule"
.IX Subsection "$parser->YYBypassrule"
Returns \s-1TRUE\s0 if the production being
used for reduction was marked to be bypassed.
.ie n .SS " $parser\->YYCurtok"
.el .SS " \f(CW$parser\fP\->YYCurtok"
.IX Subsection " $parser->YYCurtok"
Gives the current token
.ie n .SS " $parser\->YYCurval"
.el .SS " \f(CW$parser\fP\->YYCurval"
.IX Subsection " $parser->YYCurval"
Gives the attribute associated with the current token
.ie n .SS "$parser\->YYDelegateaction"
.el .SS "\f(CW$parser\fP\->YYDelegateaction"
.IX Subsection "$parser->YYDelegateaction"
Use it as \f(CW\*(C`defaultaction\*(C'\fR if you want to recycle your grammar.
It is equivalent to:
.PP
.Vb 2
\&  sub YYDelegateaction {
\&    my $self = shift;
\&
\&    my $action = $self\->YYName;
\&
\&    $self\->$action(@_);
\&  }
.Ve
.PP
For a full example illustrating how to use it, see files \f(CW\*(C`examples/recycle/NoacInh.eyp\*(C'\fR
and \f(CW\*(C`examples/recycle/icalcu_and_ipost.pl\*(C'\fR
in the Parse::Eyapp distribution
.ie n .SS " $parser\->YYEndOfInput"
.el .SS " \f(CW$parser\fP\->YYEndOfInput"
.IX Subsection " $parser->YYEndOfInput"
True if the \f(CW\*(C`pos()\*(C'\fR of the input being scanned in \f(CW\*(C`${$parser\->input}\*(C'\fR is at the end
.ie n .SS " $parser\->YYErrok"
.el .SS " \f(CW$parser\fP\->YYErrok"
.IX Subsection " $parser->YYErrok"
Works as yacc/bison \f(CW\*(C`yyerrok\*(C'\fR. 
Modifies the error status
so that subsequent 
error messages will be emitted.
.ie n .SS " $parser\->YYError"
.el .SS " \f(CW$parser\fP\->YYError"
.IX Subsection " $parser->YYError"
Works as yacc/bison \f(CW\*(C`YYERROR\*(C'\fR.
Pretends that a syntax error has been detected.
.ie n .SS " $parser\->YYExpect"
.el .SS " \f(CW$parser\fP\->YYExpect"
.IX Subsection " $parser->YYExpect"
Returns the list of tokens the parser 
expected when the failure occurred
.PP
.Vb 6
\& pl@nereida:~/src/perl/YappWithDefaultAction/examples$ \e
\&                            sed \-ne \*(Aq26,33p\*(Aq Postfix.eyp
\& sub _Error {
\&   my($token)=$_[0]\->YYCurval;
\&   my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&   my @expected = $_[0]\->YYExpect();
\&
\&   local $" = \*(Aq, \*(Aq;
\&   die "Syntax error near $what. Expected one of these tokens: @expected\en";
\& }
.Ve
.PP
See the tutorial Parse::Eyapp::datagenerationtut and 
the section \fI\s-1TOKENS\s0 \s-1DEPENDING\s0 \s-1ON\s0 \s-1THE\s0 \s-1SYNTACTIC\s0 \s-1CONTEXT\s0\fR
in the tutorial Parse::Eyapp::debuggingtut for more detailed 
examples of use of \f(CW\*(C`YYExpect\*(C'\fR.
.ie n .SS "$parser\->YYFirstline"
.el .SS "\f(CW$parser\fP\->YYFirstline"
.IX Subsection "$parser->YYFirstline"
First line of the input string describing the grammar
.ie n .SS "$parser\->YYGrammar"
.el .SS "\f(CW$parser\fP\->YYGrammar"
.IX Subsection "$parser->YYGrammar"
Return the list of grammar items.
Each item is an anonymous list containing
.IP "\(bu" 2
The name of the production
.IP "\(bu" 2
The \s-1LHS\s0 of the production
.IP "\(bu" 2
An anonymous list containing the symbols in the \s-1RHS\s0
.PP
If it receives an index as argument returns the corresponding item
The following debugger session explain its use:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&    DB<1> n
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&    DB<1> x $parser\->YYGrammar
\&  0  ARRAY(0xde5e20)
\&     0  \*(Aq_SUPERSTART\*(Aq
\&     1  \*(Aq$start\*(Aq
\&     2  ARRAY(0xc85e80)
\&        0  \*(Aqline\*(Aq
\&        1  \*(Aq$end\*(Aq
\&     3  0
\&  1  ARRAY(0xe2b6b0)
\&     0  \*(Aqline_1\*(Aq
\&     1  \*(Aqline\*(Aq
\&     2  ARRAY(0xe3abc0)
\&        0  \*(Aqexp\*(Aq
\&     3  0
\&  2  ARRAY(0xa05530)
\&     0  \*(Aqexp_2\*(Aq
\&     1  \*(Aqexp\*(Aq
\&     2  ARRAY(0x75bdc0)
\&        0  \*(AqNUM\*(Aq
\&     3  0
\&
\&     ...  etc, etc
.Ve
.PP
If an index is provided it returns the item for such number:
.PP
.Vb 8
\&    DB<2> x $parser\->YYGrammar(10)
\&  0  \*(Aqexp_10\*(Aq
\&  1  \*(Aqexp\*(Aq
\&  2  ARRAY(0xa05f80)
\&     0  \*(Aq(\*(Aq
\&     1  \*(Aqexp\*(Aq
\&     2  \*(Aq)\*(Aq
\&  3  0
.Ve
.PP
You can also use a production name as argument:
.PP
.Vb 8
\&    DB<3> x $parser\->YYGrammar(\*(Aqexp_7\*(Aq)
\&  0  \*(Aqexp_7\*(Aq
\&  1  \*(Aqexp\*(Aq
\&  2  ARRAY(0xa05890)
\&     0  \*(Aqexp\*(Aq
\&     1  \*(Aq*\*(Aq
\&     2  \*(Aqexp\*(Aq
\&  3  0
.Ve
.ie n .SS "$parser\->YYGetLRAction($state, $token)"
.el .SS "\f(CW$parser\fP\->YYGetLRAction($state, \f(CW$token\fP)"
.IX Subsection "$parser->YYGetLRAction($state, $token)"
Returns the shift-reduce action for state \f(CW$state\fR
and token \f(CW$token\fR. A positive number must be interpreted as a shift 
to the state with that number. A negative number \f(CW\*(C`\-m\*(C'\fR indicates a reduction
by production with index \f(CW\*(C`m\*(C'\fR.  Returns \f(CW\*(C`undef\*(C'\fR if no action is defined
for such combination \f(CW\*(C`($state, $token)\*(C'\fR.
.PP
See example \f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR in the directory \f(CW\*(C`examples/debuggintut\*(C'\fR
for an example of use.
.ie n .SS "$parser\->YYIssemantic"
.el .SS "\f(CW$parser\fP\->YYIssemantic"
.IX Subsection "$parser->YYIssemantic"
Returns \s-1TRUE\s0 if the terminal is \fIsemantic\fR. \fISemantics token\fR can be declared
using the directive \f(CW\*(C`%semantic token\*(C'\fR. The opposite of a \fISemantic token\fR
is a \fISyntactic token\fR. \fISyntactic tokens\fR can be declared
using the directive  \f(CW\*(C`%syntactic token\*(C'\fR.
.PP
When using the \f(CW%tree\fR directive all the nodes corresponding to syntactic
tokens are pruned from the tree. Under this directive
tokens in the text delimited by simple quotes (like \f(CW\*(Aq+\*(Aq\fR)
are, by default, considered syntactic tokens.
.PP
When using the \f(CW%metatree\fR directive all the tokens 
are considered, by default, \fIsemantic tokens\fR.
Thus, no nodes will be \- by default\- pruned when construction
the code augmented tree. The exception are string tokens
used as separators in the definition of
lists,  like in \f(CW\*(C`S <* \*(Aq;\*(Aq>\*(C'\fR. If you want the separating string token
to appear include an explicit semantic declaration for it (example \f(CW\*(C`%semantic token \*(Aq;\*(Aq\*(C'\fR).
.ie n .SS "$parser\->YYIndex"
.el .SS "\f(CW$parser\fP\->YYIndex"
.IX Subsection "$parser->YYIndex"
Receives the name of production (right hand side).
Returns the index in the grammar of the production with such name.
When called in a list context and without a name return the hash
containing the relation
.PP
.Vb 1
\&           production name => production index
.Ve
.PP
The following debugger session illustrates its use:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&  DB<1> x $parser\->YYIndex
\&  0  \*(Aqline_1\*(Aq
\&  1  1
\&  2  \*(Aqexp_3\*(Aq
\&  3  3
\&  4  \*(Aqexp_6\*(Aq
\&  5  6
\&  6  \*(Aqexp_4\*(Aq
\&  7  4
\&  8  \*(Aqexp_10\*(Aq
\&  9  10
\&  10  \*(Aqexp_8\*(Aq
\&  11  8
\&  12  \*(Aqexp_5\*(Aq
\&  13  5
\&  14  \*(Aqexp_7\*(Aq
\&  15  7
\&  16  \*(Aqexp_2\*(Aq
\&  17  2
\&  18  \*(Aq_SUPERSTART\*(Aq
\&  19  0
\&  20  \*(Aqexp_9\*(Aq
\&  21  9
.Ve
.PP
We can specify a list of names:
.PP
.Vb 5
\&  DB<2> x $parser\->YYIndex(qw{exp_4 exp_7})
\&  0  4
\&  1  7
\&  DB<3> x $parser\->YYIndex(qw{exp_4})
\&  0  4
.Ve
.ie n .SS "$parser\->YYInput"
.el .SS "\f(CW$parser\fP\->YYInput"
.IX Subsection "$parser->YYInput"
Alias \f(CW\*(C`input\*(C'\fR. If an argument is provided, sets the input for the parser object.
The argument is a string or a reference to a string.
It returns a reference to the input string or \f(CW\*(C`undef\*(C'\fR if not set.
.ie n .SS "$parser\->YYIsterm"
.el .SS "\f(CW$parser\fP\->YYIsterm"
.IX Subsection "$parser->YYIsterm"
Returns \s-1TRUE\s0  if the symbol given as argument is a terminal. Example:
.PP
.Vb 4
\&  DB<0> x $self\->YYIsterm(\*(Aqexp\*(Aq)
\& 0  \*(Aq\*(Aq
\&  DB<1> x $self\->YYIsterm(\*(Aq*\*(Aq)
\& 0  1
.Ve
.PP
An example of combined 
use of \f(CW\*(C`YYRightside\*(C'\fR, \f(CW\*(C`YYRuleindex\*(C'\fR, \f(CW\*(C`YYLhs\*(C'\fR and \f(CW\*(C`YYIsterm\*(C'\fR
can be found \f(CW\*(C`examples/Eyapp/Rule3.yp\*(C'\fR:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> sed \-n \-e \*(Aq4,22p\*(Aq Rule3.yp | cat \-n
\&  1  sub build_node {
\&  2    my $self = shift;
\&  3    my @children = @_;
\&  4    my @right = $self\->YYRightside();
\&  5    my $var = $self\->YYLhs;
\&  6    my $rule = $self\->YYRuleindex();
\&  7
\&  8    for(my $i = 0; $i < @right; $i++) {
\&  9      $_ = $right[$i];
\& 10      if ($self\->YYIsterm($_)) {
\& 11        $children[$i] = bless { token => $_, attr => $children[$i] },
\& 12                                            _\|_PACKAGE_\|_.\*(Aq::TERMINAL\*(Aq;
\& 13      }
\& 14    }
\& 15    bless {
\& 16            children => \e@children,
\& 17            info => "$var \-> @right"
\& 18          }, _\|_PACKAGE_\|_."::${var}_$rule"
\& 19  }
.Ve
.PP
when executed an output similar to this is produced:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> userule3.pl
\& 2*3
\& $VAR1 = bless( {
\&   \*(Aqinfo\*(Aq => \*(Aqexp \-> exp * exp\*(Aq,
\&   \*(Aqchildren\*(Aq => [
\&     bless( {
\&       \*(Aqinfo\*(Aq => \*(Aqexp \-> NUM\*(Aq,
\&       \*(Aqchildren\*(Aq => [ bless( { \*(Aqattr\*(Aq => \*(Aq2\*(Aq, \*(Aqtoken\*(Aq => \*(AqNUM\*(Aq }, \*(AqRule3::TERMINAL\*(Aq ) ]
\&     }, \*(AqRule3::exp_6\*(Aq ),
\&     bless( { \*(Aqattr\*(Aq => \*(Aq*\*(Aq, \*(Aqtoken\*(Aq => \*(Aq*\*(Aq }, \*(AqRule3::TERMINAL\*(Aq ),
\&     bless( {
\&       \*(Aqinfo\*(Aq => \*(Aqexp \-> NUM\*(Aq,
\&       \*(Aqchildren\*(Aq => [ bless( { \*(Aqattr\*(Aq => \*(Aq3\*(Aq, \*(Aqtoken\*(Aq => \*(AqNUM\*(Aq }, \*(AqRule3::TERMINAL\*(Aq )
\&       ]
\&     }, \*(AqRule3::exp_6\*(Aq )
\&   ]
\& }, \*(AqRule3::exp_11\*(Aq );
.Ve
.ie n .SS " $parser\->YYLexer"
.el .SS " \f(CW$parser\fP\->YYLexer"
.IX Subsection " $parser->YYLexer"
Returns a reference to the lexical analyzer
.ie n .SS " $parser\->YYLhs"
.el .SS " \f(CW$parser\fP\->YYLhs"
.IX Subsection " $parser->YYLhs"
Returns the identifier of the left hand side of the current production (the one
that is being used for reduction/reverse derivation. An example 
of use can be found in \f(CW\*(C`examples/Eyapp/Lhs1.yp\*(C'\fR:
.PP
.Vb 1
\&  %defaultaction { print $_[0]\->YYLhs,"\en" }
.Ve
.ie n .SS "$parser\->YYMain"
.el .SS "\f(CW$parser\fP\->YYMain"
.IX Subsection "$parser->YYMain"
Alias is also \f(CW\*(C`main\*(C'\fR.
.PP
Other than the package, it has as optional arguments the \f(CW\*(C`prompt\*(C'\fR 
(shown each time it ask for input), the name of the input file
(if it wasn't specified in the command line using \f(CW\*(C`\-\-file filename\*(C'\fR)
and also the input string.
.PP
This method provides a default \f(CW\*(C`main\*(C'\fR for testing the generated parser.
It parses the commandline searching for a number of options. See
an example of use:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat use_list2.pl
\&  #!/usr/bin/env perl
\&  use warnings;
\&  use strict;
\&  use List2;
\&
\&  unshift @ARGV, \*(Aq\-\-noslurp\*(Aq;
\&  List2\->new\->main("Try input \*(Aqaacbb\*(Aq: ");
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./use_list2.pl \-\-help
\&  Available options:
\&      \-\-debug                    sets yydebug on
\&      \-\-nodebug                  sets yydebug off
\&      \-\-file filepath            read input from filepath
\&      \-\-commandinput string      read input from string
\&      \-\-tree                     prints $tree\->str
\&      \-\-notree                   does not print $tree\->str
\&      \-\-info                     When printing $tree\->str shows the value of TERMINALs
\&      \-\-help                     shows this help
\&      \-\-slurp                    read until EOF reached
\&      \-\-noslurp                  read until CR is reached
\&      \-\-argfile                  main() will take the input string from its @_
\&      \-\-noargfile                main() will not take the input string from its @_
\&      \-\-yaml                     dumps YAML for $tree: YAML module must be installed
\&      \-\-margin=i                 controls the indentation of $tree\->str (i.e. $Parse::Eyapp::Node::INDENT)
.Ve
.ie n .SS "$parser\->YYName"
.el .SS "\f(CW$parser\fP\->YYName"
.IX Subsection "$parser->YYName"
Returns the name of the current rule (The production whose reduction
gave place to the execution of the current semantic action).
.PP
.Vb 2
\&  DB<12> x $self\->YYName
\& 0  \*(Aqexp_11\*(Aq
.Ve
.ie n .SS "$parser\->YYNames"
.el .SS "\f(CW$parser\fP\->YYNames"
.IX Subsection "$parser->YYNames"
Return the list of production names. In a scalar context returns
a reference to such list.
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ eyapp Postfix
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&  DB<1> x $parser\->YYNames
\&  0  \*(Aq_SUPERSTART\*(Aq
\&  1  \*(Aqline_1\*(Aq
\&  2  \*(Aqexp_2\*(Aq
\&  3  \*(Aqexp_3\*(Aq
\&  4  \*(Aqexp_4\*(Aq
\&  5  \*(Aqexp_5\*(Aq
\&  6  \*(Aqexp_6\*(Aq
\&  7  \*(Aqexp_7\*(Aq
\&  8  \*(Aqexp_8\*(Aq
\&  9  \*(Aqexp_9\*(Aq
\&  10  \*(Aqexp_10\*(Aq
.Ve
.ie n .SS "$parser\->YYNberr"
.el .SS "\f(CW$parser\fP\->YYNberr"
.IX Subsection "$parser->YYNberr"
The current number of errors
.ie n .SS "$parser\->\fIYYNextState()\fP;"
.el .SS "\f(CW$parser\fP\->\fIYYNextState()\fP;"
.IX Subsection "$parser->YYNextState();"
If called inside a semantic
action, returns the state after the reduction
by the current production.
.PP
Provide a token if called from any other side:
.PP
.Vb 1
\&  $parser\->YYNextState($token);
.Ve
.PP
It will return the state given by the action table
for the state in the top of the stack and the given token.
.PP
For an example, see the program \f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR 
in the directory \f(CW\*(C`examples/debuggintut/\*(C'\fR.
.ie n .SS "$parser\->YYPrefix"
.el .SS "\f(CW$parser\fP\->YYPrefix"
.IX Subsection "$parser->YYPrefix"
Return and/or sets the \f(CW\*(C`yyprefix\*(C'\fR attribute. This a string that will be concatenated
as a prefix to any \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes in the syntax tree.
.ie n .SS " $parser\->\fIYYParse()\fP"
.el .SS " \f(CW$parser\fP\->\fIYYParse()\fP"
.IX Subsection " $parser->YYParse()"
It very much works \f(CW\*(C`Parse::Yapp::YYParse\*(C'\fR and as yacc/bison \f(CW\*(C`yyparse\*(C'\fR.
It accepts almost the same arguments as \f(CW\*(C`Class\->new\*(C'\fR with the exception
of \f(CW\*(C`yyprefix\*(C'\fR which can be used only with \f(CW\*(C`new\*(C'\fR.
.ie n .SS " $parser\->YYRecovering"
.el .SS " \f(CW$parser\fP\->YYRecovering"
.IX Subsection " $parser->YYRecovering"
Works as yacc/bison \f(CW\*(C`YYRECOVERING\*(C'\fR.
Returns \f(CW\*(C`TRUE\*(C'\fR if the parser is recovering from a syntax error.
.ie n .SS "$parser\->YYRestoreLRAction('conflictname', $token)"
.el .SS "\f(CW$parser\fP\->YYRestoreLRAction('conflictname', \f(CW$token\fP)"
.IX Subsection "$parser->YYRestoreLRAction('conflictname', $token)"
This method has been designed to solve shift-reduce and reduce-reduce conflicts
at parsing-time using the \fIpostponed conflict\fR strategy. 
It has to be called inside the semantic
action associated with the postponed conflict rule. The \s-1LALR\s0 table is changed
so that the action in the presence of the token \f(CW$token\fR is restored
the one before the last call to
.PP
.Vb 1
\&  $parser\->YYSetReduce($token, $productionname )
.Ve
.PP
See the examples in \f(CW\*(C`examples/debuggingtut/\*(C'\fR in files 
\&\f(CW\*(C`DynamicallyChangingTheParser2.eyp\*(C'\fR
and \f(CW\*(C`Cplusplus.eyp\*(C'\fR.
.ie n .SS "$parser\->YYRHSLength($productionindex)"
.el .SS "\f(CW$parser\fP\->YYRHSLength($productionindex)"
.IX Subsection "$parser->YYRHSLength($productionindex)"
Also:
.PP
.Vb 1
\&  $parser\->YYRHSLength
.Ve
.PP
returns the length of the right hand side (the number of symbols) of 
\&\f(CW$productionindex\fR. The name of the production can be used instead of its index.
If no index or name is provided and the method is called inside a semantic
action, the length of the current production is returned.
.ie n .SS "$parser\->YYRightside"
.el .SS "\f(CW$parser\fP\->YYRightside"
.IX Subsection "$parser->YYRightside"
Also:
.PP
.Vb 1
\&  $parser\->YYRightside($index)
.Ve
.PP
Returns an array of strings describing the right hand side of the rule. 
The name of the production can be given instead of \f(CW$index\fR. If no 
\&\f(CW$index\fR is provided and the method is called inside a semantic action
the right hand side of the current production is returned.
.ie n .SS "$parser\->YYRuleindex"
.el .SS "\f(CW$parser\fP\->YYRuleindex"
.IX Subsection "$parser->YYRuleindex"
To be called inside a semantic action.
Returns the index of the current production rule, counting the super rule as rule 0.
.PP
To know the numbers have a look at  the \f(CW\*(C`.output\*(C'\fR file.
To get a \f(CW\*(C`.output\*(C'\fR file use the option \f(CW\*(C`\-v\*(C'\fR of \f(CW\*(C`eyapp\*(C'\fR or the \f(CW\*(C`outputfile\*(C'\fR
parameter when using method \f(CW\*(C`new_grammar\*(C'\fR (see the documentation for eyapp).
.ie n .SS "$parser\->YYRule"
.el .SS "\f(CW$parser\fP\->YYRule"
.IX Subsection "$parser->YYRule"
Return the list of rules. 
The following debugger session illustrates its use:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&  0  ARRAY(0xa068e0)
\&     0  \*(Aq$start\*(Aq
\&     1  2
\&     2  undef
\&  1  ARRAY(0xa06940)
\&     0  \*(Aqline\*(Aq
\&     1  1
\&     2  CODE(0xc22360)
\&        \-> &Postfix::_\|_ANON_\|_[Postfix.eyp:10] in Postfix.eyp:227\-10
\&  ... etc, etc.
.Ve
.PP
Each item has three components: the \s-1LHS\s0 of the production, the number of symbols
in the \s-1RHS\s0 and the \s-1CODE\s0 reference to the semantic action.
.PP
If an index is specified as argument it returns the corresponding item:
.PP
.Vb 5
\&     DB<2> x $parser\->YYRule(7)
\&  0  \*(Aqexp\*(Aq
\&  1  3
\&  2  CODE(0xc1fce0)
\&     \-> &Postfix::_\|_ANON_\|_[Postfix.eyp:7] in Postfix.eyp:276\-7
.Ve
.PP
To know to what production an item is associated we can use the \f(CW\*(C`YYGrammar\*(C'\fR method:
.PP
.Vb 8
\&     DB<3> x $parser\->YYGrammar(\*(Aqexp_7\*(Aq)
\&  0  \*(Aqexp_7\*(Aq
\&  1  \*(Aqexp\*(Aq
\&  2  ARRAY(0xa05290)
\&     0  \*(Aqexp\*(Aq
\&     1  \*(Aq*\*(Aq
\&     2  \*(Aqexp\*(Aq
\&  3  0
.Ve
.PP
We can also use the name of the rule to get the item:
.PP
.Vb 5
\&   DB<4> x $parser\->YYRule(\*(Aqexp_7\*(Aq)
\&  0  \*(Aqexp\*(Aq
\&  1  3
\&  2  CODE(0xc1fce0)
\&     \-> &Postfix::_\|_ANON_\|_[Postfix.eyp:7] in Postfix.eyp:276\-7
.Ve
.ie n .SS "$parser\->YYSetaction"
.el .SS "\f(CW$parser\fP\->YYSetaction"
.IX Subsection "$parser->YYSetaction"
Receives a hash with keys the names of the production rules (right hand sides) and values
the new semantic actions. Used to reuse a grammar without overwriting all the semantic actions.
See section \fIReusing Grammars by Dynamic Substitution of Semantic Actions\fR
in Parse::Eyapp::defaultactionsintro.
.ie n .SS "$parser\->YYSetLRAction($conflictstate, $token, $shiftreduceaction )"
.el .SS "\f(CW$parser\fP\->YYSetLRAction($conflictstate, \f(CW$token\fP, \f(CW$shiftreduceaction\fP )"
.IX Subsection "$parser->YYSetLRAction($conflictstate, $token, $shiftreduceaction )"
It also accepts the syntax:
.PP
.Vb 1
\&  $parser\->YYSetLRAction($conflictstate, [$token1, ... ], $shiftreduceaction )
.Ve
.PP
This method has been designed to solve shift-reduce and reduce-reduce conflicts
at parsing-time (not at parser-generation time).
.PP
The \s-1LR\s0 table is changed so that the action in state \f(CW$conflictstate\fR
in the presence of the token \f(CW$token\fR will be given by \f(CW$shiftreduceaction\fR. 
The current shift-reduce action isn't saved.
.PP
See an example in
\&\f(CW\*(C`Cplusplus2.eyp\*(C'\fR in the directory \f(CW\*(C`examples/debuggintut\*(C'\fR.
.ie n .SS "$parser\->YYSetReduce($token, $productionname )"
.el .SS "\f(CW$parser\fP\->YYSetReduce($token, \f(CW$productionname\fP )"
.IX Subsection "$parser->YYSetReduce($token, $productionname )"
This method has been designed to solve shift-reduce and reduce-reduce conflicts
at parsing-time using the \fIpostponed conflict\fR strategy. See the corresponding 
section in Parse::Eyapp::debuggintut. It has to be called inside the semantic
action associated with the postponed conflict rule \f(CW\*(C`conflictname\*(C'\fR. 
The \s-1LALR\s0 table is changed
so that the action in the presence of the token \f(CW$token\fR will be to reduce
by \f(CW$productionname\fR. The current shift-reduce action is saved
to be restored using
.PP
.Vb 1
\&  $parser\->YYRestoreLRAction(\*(Aqconflictname\*(Aq, $token)
.Ve
.PP
See the examples in \f(CW\*(C`examples/debuggingtut/\*(C'\fR in files
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser2.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`confusingsolveddynamic.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DebugDynamicResolution.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser2.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser3.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicvsTieIns.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`nolr_k_grammarsolveddynamic.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`pascalenumeratedvsrangesolvedviadyn.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`Cplusplus.eyp\*(C'\fR.
.ie n .SS "$parser\->YYSetShift($token)"
.el .SS "\f(CW$parser\fP\->YYSetShift($token)"
.IX Subsection "$parser->YYSetShift($token)"
Also:
.PP
.Vb 1
\&      $parser\->YYSetShift([$token1, $token2, ... ])
.Ve
.PP
This method has been designed to solve shift-reduce 
at parsing-time using the \fIpostponed conflict\fR strategy. See the corresponding 
section in Parse::Eyapp::debuggintut. It has to be called inside the semantic
action associated with the postponed conflict rule \f(CW\*(C`conflictname\*(C'\fR. 
The \s-1LALR\s0 table is changed
so that the action in the presence of the token \f(CW$token\fR will be to shift.
.PP
See the examples in \f(CW\*(C`examples/debuggingtut/\*(C'\fR in files
.IP "\(bu" 2
\&\f(CW\*(C`DebugDynamicResolution.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR
.ie n .SS "$parser\->YYSlurpFile"
.el .SS "\f(CW$parser\fP\->YYSlurpFile"
.IX Subsection "$parser->YYSlurpFile"
alias:
.PP
.Vb 1
\& $parser\->slurp_file($filename[,$prompt[,$mode]])
.Ve
.PP
Receives the name of the file, reads its contents
and stores it in \f(CW\*(C`$parser\->input\*(C'\fR.
.PP
If the file does not exists, it proceeds to read from \f(CW\*(C`STDIN\*(C'\fR.
If a prompt was set with \f(CW\*(C`$parser\->YYPrompt\*(C'\fR, it will be shown.
The additional optional parameter \f(CW$mode\fR is used in such case to set 
\&\f(CW$/\fR. It can also be used as a class method.
.ie n .SS "$parser\->YYState"
.el .SS "\f(CW$parser\fP\->YYState"
.IX Subsection "$parser->YYState"
\&\f(CW\*(C`YYState\*(C'\fR returns a reference to the list of states containing the \s-1\fILALR\s0\fR\|(1) tables: the 
action and \s-1GOTO\s0 tables.  Each state is an anonymous hash:
.PP
.Vb 5
\&  DB<4> x $parser\->YYState(2)
\&  0  HASH(0xfa7120)
\&     \*(AqACTIONS\*(Aq => HASH(0xfa70f0) # token => state
\&           \*(Aq:\*(Aq => \*(Aq\-7\*(Aq
\&     \*(AqDEFAULT\*(Aq => \*(Aq\-6\*(Aq
.Ve
.PP
A negative number means reduction using the corresponding production 
rule (opposite) number. The former example tells to reduce by rule 7
when in state 2 and seeing token \f(CW\*(Aq:\*(Aq\fR. By default, the action when
in state 2 is to reduce by rule number 6.
.PP
There are three keys: \s-1ACTIONS\s0, \s-1GOTOS\s0 and  \s-1DEFAULT\s0
.PP
.Vb 6
\&  DB<7> x $parser\->YYState(13)
\& 0  HASH(0xfa8b50)
\&    \*(AqACTIONS\*(Aq => HASH(0xfa7530)
\&       \*(AqVAR\*(Aq => 17
\&    \*(AqGOTOS\*(Aq => HASH(0xfa8b20)
\&       \*(Aqtype\*(Aq => 19
.Ve
.PP
The \s-1GOTOS\s0 tables contains the \s-1DFA\s0 transition tables for
the syntactic variables. The former example tells
to move to state 19 when in state 13 after seeing
the syntactic variable \f(CW\*(C`type\*(C'\fR (i.e. if after reducing by a 
rule of \f(CW\*(C`type\*(C'\fR we are in state 13).
.ie n .SS "$parser\->YYTopState($length)"
.el .SS "\f(CW$parser\fP\->YYTopState($length)"
.IX Subsection "$parser->YYTopState($length)"
If \f(CW$length\fR is zero or not provided 
it returns the state on top of the stack.
Otherwise, returns the state \f(CW$length\fR units deep in the stack.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE\s0 (\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04\s0
(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601\s0
(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\s0\*(R" in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp::Driver5.18.3pm                 0100644 0001750 0001750 00000130772 12566242262 025423  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::Driver 3"
.TH Parse::Eyapp::Driver 3 "2012-03-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::Driver \- The LR parser
.SH "INTRODUCTION"
.IX Header "INTRODUCTION"
This class has the method \f(CW\*(C`YYParse\*(C'\fR implementing the \s-1LR\s0 generic
parsing algorithm plus the methods that give support to the generated
parser.
.ie n .SH "THE ""YYParse"" METHOD"
.el .SH "THE \f(CWYYParse\fP METHOD"
.IX Header "THE YYParse METHOD"
The \f(CW\*(C`YYParse\*(C'\fR methods implements the generic \s-1LR\s0 parsing algorithm.
It very much works \f(CW\*(C`Parse::Yapp::YYParse\*(C'\fR and as yacc/bison \f(CW\*(C`yyparse\*(C'\fR.
It accepts almost the same arguments as \f(CW\*(C`Class\->new\*(C'\fR (Being \f(CW\*(C`Class\*(C'\fR the name 
of the generated class).
.PP
The parser uses two tables and a stack. The two tables
are called the \fIaction\fR table and the \fIgoto\fR table.
The stack is used to keep track of the states visited.
.PP
At each step the generated parser consults the 
\&\f(CW\*(C`action\*(C'\fR table and takes one decision:
To shift to a new state consuming one token (and pushing 
the current state in the stack) or to reduce by some
production rule. In the last case the parser pops
from its stack as many states as symbols are on the right hand side
of the production rule. Here is a Perl/C like pseudocode
summarizing the activity of \f(CW\*(C`YYParse\*(C'\fR:
.PP
.Vb 10
\&     1   my $parser = shift; # The parser object
\&     2   push(@stack, $parser\->{startstate});
\&     3   $b = $parser\->YYLexer(); # Get the first token
\&     4   FOREVER: {
\&     5     $s = top(0);  # Get the state on top of the stack
\&     6     $a = $b;
\&     7     switch ($parser\->action[$s\->state][$a]) {
\&     8       case "shift t" : 
\&     9         my $t;
\&    10         $t\->{state} = t;
\&    11         $t\->{attr}  = $a\->{attr};
\&    12         push($t); 
\&    13         $b = $parser\->YYLexer(); # Call the lexical analyzer
\&    14         break;
\&    15       case "reduce A\->alpha" : 
\&    16         # Call the semantic action with the attributes of the rhs as args
\&    17         my $semantic  = $parser\->Semantic{A \->alpha}; # The semantic action
\&    18         my $r;
\&    19         $r\->{attr} = $semantic\->($parser, top(|alpha|\-1)\->attr, ... , top(0)\->attr); 
\&    20  
\&    21         # Pop as many states as symbols on the rhs of A\->alpha
\&    22         pop(|alpha|);  
\&    23  
\&    24         # Goto next state 
\&    25         $r\->{state} = $parser\->goto[top(0)][A]; 
\&    26         push($r); 
\&    27         break;
\&    28       case "accept" : return (1); 
\&    29       default : $parser\->YYError("syntax error"); 
\&    30     }
\&    31     redo FOREVER;
\&    32   }
.Ve
.PP
Here \f(CW\*(C`|alpha|\*(C'\fR stands for the length of \f(CW\*(C`alpha\*(C'\fR. Function \f(CWtop(k)\fR returns
the state in position \f(CW\*(C`k\*(C'\fR from the top of the stack, i.e. the state at depth \f(CW\*(C`k\*(C'\fR.
Function \f(CWpop(k)\fR extracts \f(CW\*(C`k\*(C'\fR states from the stack. The call \f(CW\*(C`$state\->attr\*(C'\fR
returns the attribute associated with \f(CW$state\fR. The call \f(CW\*(C`$parser\->Semantic{A \->alpha}\*(C'\fR
returns the semantic action associated with production \f(CW\*(C`A \->alpha\*(C'\fR.
.PP
Let us see a trace for the small grammar in \f(CW\*(C`examples/debuggingtut/aSb.yp\*(C'\fR:
.PP
.Vb 6
\&  pl@nereida:~/LEyapp/examples$ /usr/local/bin/paste.pl aSb.yp aSb.output | head \-5
\&  %%                                             | Rules:
\&  S:                 { print "S \-> epsilon\en" }  | \-\-\-\-\-\-
\&      |   \*(Aqa\*(Aq S \*(Aqb\*(Aq  { print "S \-> a S b\en" }    | 0:    $start \-> S $end
\&  ;                                              | 1:    S \-> /* empty */
\&  %%                                             | 2:    S \-> \*(Aqa\*(Aq S \*(Aqb\*(Aq
.Ve
.PP
The tables in file \f(CW\*(C`aSb.output\*(C'\fR describe the 
actions and transitions to take:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples$ cat \-n aSb.output
\&     .  .........................................
\&     7  States:
\&     8  \-\-\-\-\-\-\-
\&     9  State 0:
\&    10
\&    11          $start \-> . S $end      (Rule 0)
\&    12
\&    13          \*(Aqa\*(Aq     shift, and go to state 2
\&    14
\&    15          $default        reduce using rule 1 (S)
\&    16
\&    17          S       go to state 1
\&    18
\&    19  State 1:
\&    20
\&    21          $start \-> S . $end      (Rule 0)
\&    22
\&    23          $end    shift, and go to state 3
\&    24
\&    25  State 2:
\&    26
\&    27          S \-> \*(Aqa\*(Aq . S \*(Aqb\*(Aq        (Rule 2)
\&    28
\&    29          \*(Aqa\*(Aq     shift, and go to state 2
\&    30
\&    31          $default        reduce using rule 1 (S)
\&    32
\&    33          S       go to state 4
\&    34
\&    35  State 3:
\&    36
\&    37          $start \-> S $end .      (Rule 0)
\&    38
\&    39          $default        accept
\&    40
\&    41  State 4:
\&    42
\&    43          S \-> \*(Aqa\*(Aq S . \*(Aqb\*(Aq        (Rule 2)
\&    44
\&    45          \*(Aqb\*(Aq     shift, and go to state 5
\&    46
\&    47  State 5:
\&    48
\&    49          S \-> \*(Aqa\*(Aq S \*(Aqb\*(Aq .        (Rule 2)
\&    50
\&    51          $default        reduce using rule 2 (S)
\&    52
\&    53
\&    54  Summary:
\&    55  \-\-\-\-\-\-\-\-
\&    56  Number of rules         : 3
\&    57  Number of terminals     : 3
\&    58  Number of non\-terminals : 2
\&    59  Number of states        : 6
.Ve
.PP
When executed with \f(CW\*(C`yydebug\*(C'\fR set and input \f(CW\*(C`aabb\*(C'\fR  we obtain the following 
output:
.PP
.Vb 10
\&  pl@nereida:~/LEyapp/examples/debuggingtut$ eyapp \-b \*(Aq\*(Aq \-o use_aSb.pl aSb
\&  pl@nereida:~/LEyapp/examples/debuggingtut$ ./use_aSb.pl \-d
\&  Provide a statement like "a a b b" and press <CR><CTRL\-D>: aabb
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-                       
\&  In state 0:                                                    
\&  Stack:[0]                                                      
\&  Need token. Got >a<                                            
\&  Shift and go to state 2.                                       
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-                       
\&  In state 2:                                                    
\&  Stack:[0,2]                                                    
\&  Need token. Got >a<
\&  Shift and go to state 2.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 2:
\&  Stack:[0,2,2]
\&  Need token. Got >b<
\&  Reduce using rule 1 (S \-\-> /* empty */): S \-> epsilon
\&  Back to state 2, then go to state 4.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 4:
\&  Stack:[0,2,2,4]
\&  Shift and go to state 5.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 5:
\&  Stack:[0,2,2,4,5]
\&  Don\*(Aqt need token.
\&  Reduce using rule 2 (S \-\-> a S b): S \-> a S b
\&  Back to state 2, then go to state 4.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
.Ve
.PP
As a result of reducing by rule 2 
the three last
visited states are popped
from the stack, and the stack becomes \f(CW\*(C`[0,2]\*(C'\fR. But 
that means that we are now in state 2 seeing a \f(CW\*(C`S\*(C'\fR. 
If you look at the table above being in state 2 and seeing a \f(CW\*(C`S\*(C'\fR
we go to state 4.
.PP
.Vb 10
\&  In state 4:
\&  Stack:[0,2,4]
\&  Need token. Got >b<
\&  Shift and go to state 5.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 5:
\&  Stack:[0,2,4,5]
\&  Don\*(Aqt need token.
\&  Reduce using rule 2 (S \-\-> a S b): S \-> a S b
\&  Back to state 0, then go to state 1.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 1:
\&  Stack:[0,1]
\&  Need token. Got ><
\&  Shift and go to state 3.
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  In state 3:
\&  Stack:[0,1,3]
\&  Don\*(Aqt need token.
\&  Accept.
.Ve
.ie n .SH "METHODS IN THE GENERATED CLASS: ""Parse::Eyapp::Driver"" METHODS"
.el .SH "METHODS IN THE GENERATED CLASS: \f(CWParse::Eyapp::Driver\fP METHODS"
.IX Header "METHODS IN THE GENERATED CLASS: Parse::Eyapp::Driver METHODS"
The class containing the parser generated by \f(CW\*(C`Parse::Eyapp\*(C'\fR inherits
from \f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR. Therefore all the methods in
\&\f(CW\*(C`Parse::Eyapp::Driver\*(C'\fR  are available in the generated class.
.PP
This section describes the methods and objects belonging
to the class generated either using eyapp 
or \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR. In the incoming paragraphs
we will assume that \f(CW\*(C`Class\*(C'\fR was the 
value selected for the \f(CW\*(C`classname\*(C'\fR argument
when \f(CW\*(C`Parse::Eyapp\->new_grammar\*(C'\fR was called.
Objects belonging to  \f(CW\*(C`Class\*(C'\fR are the actual parsers for the 
input grammar.
.SS "Class\->new"
.IX Subsection "Class->new"
The method \f(CW\*(C`Class\->new\*(C'\fR returns a new \s-1LALR\s0 parser object.
Here \f(CW\*(C`Class\*(C'\fR stands for the name of the class containing the parser.
See an example of call:
.PP
.Vb 5
\&  my $parser = main\->new(yyprefix => \*(AqParse::Eyapp::Node::\*(Aq,
\&                         yylex    => \e&main::_Lexer,
\&                         yyerror  => \e&main::_Error,
\&                         yydebug => 0x1F,
\&  );
.Ve
.PP
The meaning of the arguments used in the example are as follows:
.IP "\- yyprefix" 4
.IX Item "- yyprefix"
Used with \f(CW%tree\fR or \f(CW%metatree\fR. 
When used, the type names of the nodes of the syntax tree will
be build prefixing the value associated to \f(CW\*(C`yyprefix\*(C'\fR to the name of the production
rule. The name of the production rule is either explicitly given through a \f(CW%name\fR
directive or the concatenation of the left hand side of the rule with the
ordinal of the right hand side of the production. 
See section \*(L"Compiling with eyapp and treereg\*(R" in Parse::Eyapp for an example.
.IP "\- yylex" 4
.IX Item "- yylex"
Reference to the lexical analyzer subroutine
.IP "\- yyerror" 4
.IX Item "- yyerror"
Reference to the error subroutine. The error subroutine receives
as first argument the reference to the \f(CW\*(C`Class\*(C'\fR parser object.
This way it can take advantage of methods like \f(CW\*(C`YYCurval\*(C'\fR
and YYExpect (see below):
.Sp
.Vb 4
\&  sub _Error {
\&    my($token)=$_[0]\->YYCurval;
\&    my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&    my @expected = $_[0]\->YYExpect();
\&
\&    local $" = \*(Aq, \*(Aq;
\&    die "Syntax error near $what. Expected one of these tokens: @expected\en";
\&  }
.Ve
.IP "\- yydebug" 4
.IX Item "- yydebug"
Controls the level of debugging. Must be a number.
.PP
The package produced from the grammar has several methods.
.PP
The parser object has the following methods that work at parsing time
exactly as in Parse::Yapp. These methods can be found
in the module Parse::Eyapp::Driver. 
Assume you have in \f(CW$parser\fR the reference
to your parser object:
.ie n .SS "$parser\->YYAction"
.el .SS "\f(CW$parser\fP\->YYAction"
.IX Subsection "$parser->YYAction"
Receives the name of a production and a subroutine reference implementing the new semantic action.
If no subroutine reference is set returns the reference to the current semantic action. See 
the tutorial Parse::Eyapp::defaultaction and the examples in the \f(CW\*(C`examples/recycle/\*(C'\fR directory
.ie n .SS " $parser\->YYAccept"
.el .SS " \f(CW$parser\fP\->YYAccept"
.IX Subsection " $parser->YYAccept"
Works as yacc/bison \f(CW\*(C`YYACCEPT\*(C'\fR.
The parser finishes returning 
the current semantic value to indicate success.
.ie n .SS " $parser\->YYAbort"
.el .SS " \f(CW$parser\fP\->YYAbort"
.IX Subsection " $parser->YYAbort"
Works as yacc/bison \f(CW\*(C`YYABORT\*(C'\fR. 
The parser finishes returning 
\&\f(CW\*(C`undef\*(C'\fR to indicate failure.
.SS "Parse::Eyapp::Driver::BeANode"
.IX Subsection "Parse::Eyapp::Driver::BeANode"
Is not a method.
Receives as input a \f(CW\*(C`Class\*(C'\fR name. 
Introduces \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR as an ancestor class
of \f(CW\*(C`Class\*(C'\fR. To work correctly, objects belonging to 
\&\f(CW\*(C`Class\*(C'\fR must be hashes
with a \f(CW\*(C`children\*(C'\fR key whose value must be a reference
to the array of children. The children must be also
\&\f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes.
Actually you can circumvent this call by directly introducing
\&\f(CW\*(C`Parse::Eyapp::Node\*(C'\fR in the ancestors of \f(CW\*(C`Class\*(C'\fR:
.PP
.Vb 1
\&         push @{$class."::ISA"}, "Parse::Eyapp::Node"
.Ve
.ie n .SS "$parser\->YYBuildAST"
.el .SS "\f(CW$parser\fP\->YYBuildAST"
.IX Subsection "$parser->YYBuildAST"
Sometimes the best time to decorate a node with some attributes is just
after being built. In such cases the programmer can take manual control
building the node with \f(CW\*(C`YYBuildAST\*(C'\fR to immediately proceed to decorate it.
.PP
The following example from the file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR
in the tarball in \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR
illustrates the idea:
.PP
.Vb 9
\& Variable:
\&     %name  VARARRAY
\&     $ID (\*(Aq[\*(Aq binary \*(Aq]\*(Aq) <%name INDEXSPEC +>
\&       {
\&         my $self = shift;
\&         my $node =  $self\->YYBuildAST(@_);
\&         $node\->{line} = $ID\->[1];
\&         return $node;
\&       }
.Ve
.PP
Actually, the \f(CW%tree\fR directive is semantically equivalent to:
.PP
.Vb 1
\&  %default action { goto &Parse::Eyapp::Driver::YYBuildAST }
.Ve
.ie n .SS " $parser\->YYBuildingTree"
.el .SS " \f(CW$parser\fP\->YYBuildingTree"
.IX Subsection " $parser->YYBuildingTree"
Influences the semantic of list operators. 
If true the action associated with \f(CW\*(C`X+\*(C'\fR
will be to build a \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR node
with all the attributes of the elements in the list
as children. This is the appropriate semantic
when working under the \f(CW%tree\fR directive.
If set to false the semantic action will return
an anonymous list with the attributes 
associated with the \f(CW\*(C`X\*(C'\fR in the plus list.
Same thing with the operators \f(CW\*(C`*\*(C'\fR and \f(CW\*(C`?\*(C'\fR.
.ie n .SS "$parser\->YYBuildTS"
.el .SS "\f(CW$parser\fP\->YYBuildTS"
.IX Subsection "$parser->YYBuildTS"
Similar to \f(CW\*(C`$parser\->YYBuildAST\*(C'\fR but builds nodes for translation schemes.
.ie n .SS "$parser\->YYBypass"
.el .SS "\f(CW$parser\fP\->YYBypass"
.IX Subsection "$parser->YYBypass"
Returns \s-1TRUE\s0 if running under the \f(CW\*(C`%tree bypass\*(C'\fR clause
.ie n .SS "$parser\->YYBypassrule"
.el .SS "\f(CW$parser\fP\->YYBypassrule"
.IX Subsection "$parser->YYBypassrule"
Returns \s-1TRUE\s0 if the production being
used for reduction was marked to be bypassed.
.ie n .SS " $parser\->YYCurtok"
.el .SS " \f(CW$parser\fP\->YYCurtok"
.IX Subsection " $parser->YYCurtok"
Gives the current token
.ie n .SS " $parser\->YYCurval"
.el .SS " \f(CW$parser\fP\->YYCurval"
.IX Subsection " $parser->YYCurval"
Gives the attribute associated with the current token
.ie n .SS "$parser\->YYDelegateaction"
.el .SS "\f(CW$parser\fP\->YYDelegateaction"
.IX Subsection "$parser->YYDelegateaction"
Use it as \f(CW\*(C`defaultaction\*(C'\fR if you want to recycle your grammar.
It is equivalent to:
.PP
.Vb 2
\&  sub YYDelegateaction {
\&    my $self = shift;
\&
\&    my $action = $self\->YYName;
\&
\&    $self\->$action(@_);
\&  }
.Ve
.PP
For a full example illustrating how to use it, see files \f(CW\*(C`examples/recycle/NoacInh.eyp\*(C'\fR
and \f(CW\*(C`examples/recycle/icalcu_and_ipost.pl\*(C'\fR
in the Parse::Eyapp distribution
.ie n .SS " $parser\->YYEndOfInput"
.el .SS " \f(CW$parser\fP\->YYEndOfInput"
.IX Subsection " $parser->YYEndOfInput"
True if the \f(CW\*(C`pos()\*(C'\fR of the input being scanned in \f(CW\*(C`${$parser\->input}\*(C'\fR is at the end
.ie n .SS " $parser\->YYErrok"
.el .SS " \f(CW$parser\fP\->YYErrok"
.IX Subsection " $parser->YYErrok"
Works as yacc/bison \f(CW\*(C`yyerrok\*(C'\fR. 
Modifies the error status
so that subsequent 
error messages will be emitted.
.ie n .SS " $parser\->YYError"
.el .SS " \f(CW$parser\fP\->YYError"
.IX Subsection " $parser->YYError"
Works as yacc/bison \f(CW\*(C`YYERROR\*(C'\fR.
Pretends that a syntax error has been detected.
.ie n .SS " $parser\->YYExpect"
.el .SS " \f(CW$parser\fP\->YYExpect"
.IX Subsection " $parser->YYExpect"
Returns the list of tokens the parser 
expected when the failure occurred
.PP
.Vb 6
\& pl@nereida:~/src/perl/YappWithDefaultAction/examples$ \e
\&                            sed \-ne \*(Aq26,33p\*(Aq Postfix.eyp
\& sub _Error {
\&   my($token)=$_[0]\->YYCurval;
\&   my($what)= $token ? "input: \*(Aq$token\*(Aq" : "end of input";
\&   my @expected = $_[0]\->YYExpect();
\&
\&   local $" = \*(Aq, \*(Aq;
\&   die "Syntax error near $what. Expected one of these tokens: @expected\en";
\& }
.Ve
.PP
See the tutorial Parse::Eyapp::datagenerationtut and 
the section \fI\s-1TOKENS DEPENDING ON THE SYNTACTIC CONTEXT\s0\fR
in the tutorial Parse::Eyapp::debuggingtut for more detailed 
examples of use of \f(CW\*(C`YYExpect\*(C'\fR.
.ie n .SS "$parser\->YYFirstline"
.el .SS "\f(CW$parser\fP\->YYFirstline"
.IX Subsection "$parser->YYFirstline"
First line of the input string describing the grammar
.ie n .SS "$parser\->YYGrammar"
.el .SS "\f(CW$parser\fP\->YYGrammar"
.IX Subsection "$parser->YYGrammar"
Return the list of grammar items.
Each item is an anonymous list containing
.IP "\(bu" 2
The name of the production
.IP "\(bu" 2
The \s-1LHS\s0 of the production
.IP "\(bu" 2
An anonymous list containing the symbols in the \s-1RHS\s0
.PP
If it receives an index as argument returns the corresponding item
The following debugger session explain its use:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&    DB<1> n
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&    DB<1> x $parser\->YYGrammar
\&  0  ARRAY(0xde5e20)
\&     0  \*(Aq_SUPERSTART\*(Aq
\&     1  \*(Aq$start\*(Aq
\&     2  ARRAY(0xc85e80)
\&        0  \*(Aqline\*(Aq
\&        1  \*(Aq$end\*(Aq
\&     3  0
\&  1  ARRAY(0xe2b6b0)
\&     0  \*(Aqline_1\*(Aq
\&     1  \*(Aqline\*(Aq
\&     2  ARRAY(0xe3abc0)
\&        0  \*(Aqexp\*(Aq
\&     3  0
\&  2  ARRAY(0xa05530)
\&     0  \*(Aqexp_2\*(Aq
\&     1  \*(Aqexp\*(Aq
\&     2  ARRAY(0x75bdc0)
\&        0  \*(AqNUM\*(Aq
\&     3  0
\&
\&     ...  etc, etc
.Ve
.PP
If an index is provided it returns the item for such number:
.PP
.Vb 8
\&    DB<2> x $parser\->YYGrammar(10)
\&  0  \*(Aqexp_10\*(Aq
\&  1  \*(Aqexp\*(Aq
\&  2  ARRAY(0xa05f80)
\&     0  \*(Aq(\*(Aq
\&     1  \*(Aqexp\*(Aq
\&     2  \*(Aq)\*(Aq
\&  3  0
.Ve
.PP
You can also use a production name as argument:
.PP
.Vb 8
\&    DB<3> x $parser\->YYGrammar(\*(Aqexp_7\*(Aq)
\&  0  \*(Aqexp_7\*(Aq
\&  1  \*(Aqexp\*(Aq
\&  2  ARRAY(0xa05890)
\&     0  \*(Aqexp\*(Aq
\&     1  \*(Aq*\*(Aq
\&     2  \*(Aqexp\*(Aq
\&  3  0
.Ve
.ie n .SS "$parser\->YYGetLRAction($state, $token)"
.el .SS "\f(CW$parser\fP\->YYGetLRAction($state, \f(CW$token\fP)"
.IX Subsection "$parser->YYGetLRAction($state, $token)"
Returns the shift-reduce action for state \f(CW$state\fR
and token \f(CW$token\fR. A positive number must be interpreted as a shift 
to the state with that number. A negative number \f(CW\*(C`\-m\*(C'\fR indicates a reduction
by production with index \f(CW\*(C`m\*(C'\fR.  Returns \f(CW\*(C`undef\*(C'\fR if no action is defined
for such combination \f(CW\*(C`($state, $token)\*(C'\fR.
.PP
See example \f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR in the directory \f(CW\*(C`examples/debuggintut\*(C'\fR
for an example of use.
.ie n .SS "$parser\->YYIssemantic"
.el .SS "\f(CW$parser\fP\->YYIssemantic"
.IX Subsection "$parser->YYIssemantic"
Returns \s-1TRUE\s0 if the terminal is \fIsemantic\fR. \fISemantics token\fR can be declared
using the directive \f(CW\*(C`%semantic token\*(C'\fR. The opposite of a \fISemantic token\fR
is a \fISyntactic token\fR. \fISyntactic tokens\fR can be declared
using the directive  \f(CW\*(C`%syntactic token\*(C'\fR.
.PP
When using the \f(CW%tree\fR directive all the nodes corresponding to syntactic
tokens are pruned from the tree. Under this directive
tokens in the text delimited by simple quotes (like \f(CW\*(Aq+\*(Aq\fR)
are, by default, considered syntactic tokens.
.PP
When using the \f(CW%metatree\fR directive all the tokens 
are considered, by default, \fIsemantic tokens\fR.
Thus, no nodes will be \- by default\- pruned when construction
the code augmented tree. The exception are string tokens
used as separators in the definition of
lists,  like in \f(CW\*(C`S <* \*(Aq;\*(Aq>\*(C'\fR. If you want the separating string token
to appear include an explicit semantic declaration for it (example \f(CW\*(C`%semantic token \*(Aq;\*(Aq\*(C'\fR).
.ie n .SS "$parser\->YYIndex"
.el .SS "\f(CW$parser\fP\->YYIndex"
.IX Subsection "$parser->YYIndex"
Receives the name of production (right hand side).
Returns the index in the grammar of the production with such name.
When called in a list context and without a name return the hash
containing the relation
.PP
.Vb 1
\&           production name => production index
.Ve
.PP
The following debugger session illustrates its use:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&  DB<1> x $parser\->YYIndex
\&  0  \*(Aqline_1\*(Aq
\&  1  1
\&  2  \*(Aqexp_3\*(Aq
\&  3  3
\&  4  \*(Aqexp_6\*(Aq
\&  5  6
\&  6  \*(Aqexp_4\*(Aq
\&  7  4
\&  8  \*(Aqexp_10\*(Aq
\&  9  10
\&  10  \*(Aqexp_8\*(Aq
\&  11  8
\&  12  \*(Aqexp_5\*(Aq
\&  13  5
\&  14  \*(Aqexp_7\*(Aq
\&  15  7
\&  16  \*(Aqexp_2\*(Aq
\&  17  2
\&  18  \*(Aq_SUPERSTART\*(Aq
\&  19  0
\&  20  \*(Aqexp_9\*(Aq
\&  21  9
.Ve
.PP
We can specify a list of names:
.PP
.Vb 5
\&  DB<2> x $parser\->YYIndex(qw{exp_4 exp_7})
\&  0  4
\&  1  7
\&  DB<3> x $parser\->YYIndex(qw{exp_4})
\&  0  4
.Ve
.ie n .SS "$parser\->YYInput"
.el .SS "\f(CW$parser\fP\->YYInput"
.IX Subsection "$parser->YYInput"
Alias \f(CW\*(C`input\*(C'\fR. If an argument is provided, sets the input for the parser object.
The argument is a string or a reference to a string.
It returns a reference to the input string or \f(CW\*(C`undef\*(C'\fR if not set.
.ie n .SS "$parser\->YYIsterm"
.el .SS "\f(CW$parser\fP\->YYIsterm"
.IX Subsection "$parser->YYIsterm"
Returns \s-1TRUE \s0 if the symbol given as argument is a terminal. Example:
.PP
.Vb 4
\&  DB<0> x $self\->YYIsterm(\*(Aqexp\*(Aq)
\& 0  \*(Aq\*(Aq
\&  DB<1> x $self\->YYIsterm(\*(Aq*\*(Aq)
\& 0  1
.Ve
.PP
An example of combined 
use of \f(CW\*(C`YYRightside\*(C'\fR, \f(CW\*(C`YYRuleindex\*(C'\fR, \f(CW\*(C`YYLhs\*(C'\fR and \f(CW\*(C`YYIsterm\*(C'\fR
can be found \f(CW\*(C`examples/Eyapp/Rule3.yp\*(C'\fR:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> sed \-n \-e \*(Aq4,22p\*(Aq Rule3.yp | cat \-n
\&  1  sub build_node {
\&  2    my $self = shift;
\&  3    my @children = @_;
\&  4    my @right = $self\->YYRightside();
\&  5    my $var = $self\->YYLhs;
\&  6    my $rule = $self\->YYRuleindex();
\&  7
\&  8    for(my $i = 0; $i < @right; $i++) {
\&  9      $_ = $right[$i];
\& 10      if ($self\->YYIsterm($_)) {
\& 11        $children[$i] = bless { token => $_, attr => $children[$i] },
\& 12                                            _\|_PACKAGE_\|_.\*(Aq::TERMINAL\*(Aq;
\& 13      }
\& 14    }
\& 15    bless {
\& 16            children => \e@children,
\& 17            info => "$var \-> @right"
\& 18          }, _\|_PACKAGE_\|_."::${var}_$rule"
\& 19  }
.Ve
.PP
when executed an output similar to this is produced:
.PP
.Vb 10
\& nereida:~/src/perl/YappWithDefaultAction/examples> userule3.pl
\& 2*3
\& $VAR1 = bless( {
\&   \*(Aqinfo\*(Aq => \*(Aqexp \-> exp * exp\*(Aq,
\&   \*(Aqchildren\*(Aq => [
\&     bless( {
\&       \*(Aqinfo\*(Aq => \*(Aqexp \-> NUM\*(Aq,
\&       \*(Aqchildren\*(Aq => [ bless( { \*(Aqattr\*(Aq => \*(Aq2\*(Aq, \*(Aqtoken\*(Aq => \*(AqNUM\*(Aq }, \*(AqRule3::TERMINAL\*(Aq ) ]
\&     }, \*(AqRule3::exp_6\*(Aq ),
\&     bless( { \*(Aqattr\*(Aq => \*(Aq*\*(Aq, \*(Aqtoken\*(Aq => \*(Aq*\*(Aq }, \*(AqRule3::TERMINAL\*(Aq ),
\&     bless( {
\&       \*(Aqinfo\*(Aq => \*(Aqexp \-> NUM\*(Aq,
\&       \*(Aqchildren\*(Aq => [ bless( { \*(Aqattr\*(Aq => \*(Aq3\*(Aq, \*(Aqtoken\*(Aq => \*(AqNUM\*(Aq }, \*(AqRule3::TERMINAL\*(Aq )
\&       ]
\&     }, \*(AqRule3::exp_6\*(Aq )
\&   ]
\& }, \*(AqRule3::exp_11\*(Aq );
.Ve
.ie n .SS " $parser\->YYLexer"
.el .SS " \f(CW$parser\fP\->YYLexer"
.IX Subsection " $parser->YYLexer"
Returns a reference to the lexical analyzer
.ie n .SS " $parser\->YYLhs"
.el .SS " \f(CW$parser\fP\->YYLhs"
.IX Subsection " $parser->YYLhs"
Returns the identifier of the left hand side of the current production (the one
that is being used for reduction/reverse derivation. An example 
of use can be found in \f(CW\*(C`examples/Eyapp/Lhs1.yp\*(C'\fR:
.PP
.Vb 1
\&  %defaultaction { print $_[0]\->YYLhs,"\en" }
.Ve
.ie n .SS "$parser\->YYMain"
.el .SS "\f(CW$parser\fP\->YYMain"
.IX Subsection "$parser->YYMain"
Alias is also \f(CW\*(C`main\*(C'\fR.
.PP
Other than the package, it has as optional arguments the \f(CW\*(C`prompt\*(C'\fR 
(shown each time it ask for input), the name of the input file
(if it wasn't specified in the command line using \f(CW\*(C`\-\-file filename\*(C'\fR)
and also the input string.
.PP
This method provides a default \f(CW\*(C`main\*(C'\fR for testing the generated parser.
It parses the commandline searching for a number of options. See
an example of use:
.PP
.Vb 5
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ cat use_list2.pl
\&  #!/usr/bin/env perl
\&  use warnings;
\&  use strict;
\&  use List2;
\&
\&  unshift @ARGV, \*(Aq\-\-noslurp\*(Aq;
\&  List2\->new\->main("Try input \*(Aqaacbb\*(Aq: ");
\&  pl@nereida:~/LEyapp/examples/eyapplanguageref$ ./use_list2.pl \-\-help
\&  Available options:
\&      \-\-debug                    sets yydebug on
\&      \-\-nodebug                  sets yydebug off
\&      \-\-file filepath            read input from filepath
\&      \-\-commandinput string      read input from string
\&      \-\-tree                     prints $tree\->str
\&      \-\-notree                   does not print $tree\->str
\&      \-\-info                     When printing $tree\->str shows the value of TERMINALs
\&      \-\-help                     shows this help
\&      \-\-slurp                    read until EOF reached
\&      \-\-noslurp                  read until CR is reached
\&      \-\-argfile                  main() will take the input string from its @_
\&      \-\-noargfile                main() will not take the input string from its @_
\&      \-\-yaml                     dumps YAML for $tree: YAML module must be installed
\&      \-\-margin=i                 controls the indentation of $tree\->str (i.e. $Parse::Eyapp::Node::INDENT)
.Ve
.ie n .SS "$parser\->YYName"
.el .SS "\f(CW$parser\fP\->YYName"
.IX Subsection "$parser->YYName"
Returns the name of the current rule (The production whose reduction
gave place to the execution of the current semantic action).
.PP
.Vb 2
\&  DB<12> x $self\->YYName
\& 0  \*(Aqexp_11\*(Aq
.Ve
.ie n .SS "$parser\->YYNames"
.el .SS "\f(CW$parser\fP\->YYNames"
.IX Subsection "$parser->YYNames"
Return the list of production names. In a scalar context returns
a reference to such list.
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ eyapp Postfix
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&  DB<1> x $parser\->YYNames
\&  0  \*(Aq_SUPERSTART\*(Aq
\&  1  \*(Aqline_1\*(Aq
\&  2  \*(Aqexp_2\*(Aq
\&  3  \*(Aqexp_3\*(Aq
\&  4  \*(Aqexp_4\*(Aq
\&  5  \*(Aqexp_5\*(Aq
\&  6  \*(Aqexp_6\*(Aq
\&  7  \*(Aqexp_7\*(Aq
\&  8  \*(Aqexp_8\*(Aq
\&  9  \*(Aqexp_9\*(Aq
\&  10  \*(Aqexp_10\*(Aq
.Ve
.ie n .SS "$parser\->YYNberr"
.el .SS "\f(CW$parser\fP\->YYNberr"
.IX Subsection "$parser->YYNberr"
The current number of errors
.ie n .SS "$parser\->\fIYYNextState()\fP;"
.el .SS "\f(CW$parser\fP\->\fIYYNextState()\fP;"
.IX Subsection "$parser->YYNextState();"
If called inside a semantic
action, returns the state after the reduction
by the current production.
.PP
Provide a token if called from any other side:
.PP
.Vb 1
\&  $parser\->YYNextState($token);
.Ve
.PP
It will return the state given by the action table
for the state in the top of the stack and the given token.
.PP
For an example, see the program \f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR 
in the directory \f(CW\*(C`examples/debuggintut/\*(C'\fR.
.ie n .SS "$parser\->YYPrefix"
.el .SS "\f(CW$parser\fP\->YYPrefix"
.IX Subsection "$parser->YYPrefix"
Return and/or sets the \f(CW\*(C`yyprefix\*(C'\fR attribute. This a string that will be concatenated
as a prefix to any \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR nodes in the syntax tree.
.ie n .SS " $parser\->\fIYYParse()\fP"
.el .SS " \f(CW$parser\fP\->\fIYYParse()\fP"
.IX Subsection " $parser->YYParse()"
It very much works \f(CW\*(C`Parse::Yapp::YYParse\*(C'\fR and as yacc/bison \f(CW\*(C`yyparse\*(C'\fR.
It accepts almost the same arguments as \f(CW\*(C`Class\->new\*(C'\fR with the exception
of \f(CW\*(C`yyprefix\*(C'\fR which can be used only with \f(CW\*(C`new\*(C'\fR.
.ie n .SS " $parser\->YYRecovering"
.el .SS " \f(CW$parser\fP\->YYRecovering"
.IX Subsection " $parser->YYRecovering"
Works as yacc/bison \f(CW\*(C`YYRECOVERING\*(C'\fR.
Returns \f(CW\*(C`TRUE\*(C'\fR if the parser is recovering from a syntax error.
.ie n .SS "$parser\->YYRestoreLRAction('conflictname', $token)"
.el .SS "\f(CW$parser\fP\->YYRestoreLRAction('conflictname', \f(CW$token\fP)"
.IX Subsection "$parser->YYRestoreLRAction('conflictname', $token)"
This method has been designed to solve shift-reduce and reduce-reduce conflicts
at parsing-time using the \fIpostponed conflict\fR strategy. 
It has to be called inside the semantic
action associated with the postponed conflict rule. The \s-1LALR\s0 table is changed
so that the action in the presence of the token \f(CW$token\fR is restored
the one before the last call to
.PP
.Vb 1
\&  $parser\->YYSetReduce($token, $productionname )
.Ve
.PP
See the examples in \f(CW\*(C`examples/debuggingtut/\*(C'\fR in files 
\&\f(CW\*(C`DynamicallyChangingTheParser2.eyp\*(C'\fR
and \f(CW\*(C`Cplusplus.eyp\*(C'\fR.
.ie n .SS "$parser\->YYRHSLength($productionindex)"
.el .SS "\f(CW$parser\fP\->YYRHSLength($productionindex)"
.IX Subsection "$parser->YYRHSLength($productionindex)"
Also:
.PP
.Vb 1
\&  $parser\->YYRHSLength
.Ve
.PP
returns the length of the right hand side (the number of symbols) of 
\&\f(CW$productionindex\fR. The name of the production can be used instead of its index.
If no index or name is provided and the method is called inside a semantic
action, the length of the current production is returned.
.ie n .SS "$parser\->YYRightside"
.el .SS "\f(CW$parser\fP\->YYRightside"
.IX Subsection "$parser->YYRightside"
Also:
.PP
.Vb 1
\&  $parser\->YYRightside($index)
.Ve
.PP
Returns an array of strings describing the right hand side of the rule. 
The name of the production can be given instead of \f(CW$index\fR. If no 
\&\f(CW$index\fR is provided and the method is called inside a semantic action
the right hand side of the current production is returned.
.ie n .SS "$parser\->YYRuleindex"
.el .SS "\f(CW$parser\fP\->YYRuleindex"
.IX Subsection "$parser->YYRuleindex"
To be called inside a semantic action.
Returns the index of the current production rule, counting the super rule as rule 0.
.PP
To know the numbers have a look at  the \f(CW\*(C`.output\*(C'\fR file.
To get a \f(CW\*(C`.output\*(C'\fR file use the option \f(CW\*(C`\-v\*(C'\fR of \f(CW\*(C`eyapp\*(C'\fR or the \f(CW\*(C`outputfile\*(C'\fR
parameter when using method \f(CW\*(C`new_grammar\*(C'\fR (see the documentation for eyapp).
.ie n .SS "$parser\->YYRule"
.el .SS "\f(CW$parser\fP\->YYRule"
.IX Subsection "$parser->YYRule"
Return the list of rules. 
The following debugger session illustrates its use:
.PP
.Vb 10
\&  pl@europa:~/LEyapp/examples/recycle$ perl \-wd usepostfix.pl
\&  main::(usepostfix.pl:5):        my $parser = new Postfix();
\&  main::(usepostfix.pl:6):        $parser\->Run;
\&  0  ARRAY(0xa068e0)
\&     0  \*(Aq$start\*(Aq
\&     1  2
\&     2  undef
\&  1  ARRAY(0xa06940)
\&     0  \*(Aqline\*(Aq
\&     1  1
\&     2  CODE(0xc22360)
\&        \-> &Postfix::_\|_ANON_\|_[Postfix.eyp:10] in Postfix.eyp:227\-10
\&  ... etc, etc.
.Ve
.PP
Each item has three components: the \s-1LHS\s0 of the production, the number of symbols
in the \s-1RHS\s0 and the \s-1CODE\s0 reference to the semantic action.
.PP
If an index is specified as argument it returns the corresponding item:
.PP
.Vb 5
\&     DB<2> x $parser\->YYRule(7)
\&  0  \*(Aqexp\*(Aq
\&  1  3
\&  2  CODE(0xc1fce0)
\&     \-> &Postfix::_\|_ANON_\|_[Postfix.eyp:7] in Postfix.eyp:276\-7
.Ve
.PP
To know to what production an item is associated we can use the \f(CW\*(C`YYGrammar\*(C'\fR method:
.PP
.Vb 8
\&     DB<3> x $parser\->YYGrammar(\*(Aqexp_7\*(Aq)
\&  0  \*(Aqexp_7\*(Aq
\&  1  \*(Aqexp\*(Aq
\&  2  ARRAY(0xa05290)
\&     0  \*(Aqexp\*(Aq
\&     1  \*(Aq*\*(Aq
\&     2  \*(Aqexp\*(Aq
\&  3  0
.Ve
.PP
We can also use the name of the rule to get the item:
.PP
.Vb 5
\&   DB<4> x $parser\->YYRule(\*(Aqexp_7\*(Aq)
\&  0  \*(Aqexp\*(Aq
\&  1  3
\&  2  CODE(0xc1fce0)
\&     \-> &Postfix::_\|_ANON_\|_[Postfix.eyp:7] in Postfix.eyp:276\-7
.Ve
.ie n .SS "$parser\->YYSetaction"
.el .SS "\f(CW$parser\fP\->YYSetaction"
.IX Subsection "$parser->YYSetaction"
Receives a hash with keys the names of the production rules (right hand sides) and values
the new semantic actions. Used to reuse a grammar without overwriting all the semantic actions.
See section \fIReusing Grammars by Dynamic Substitution of Semantic Actions\fR
in Parse::Eyapp::defaultactionsintro.
.ie n .SS "$parser\->YYSetLRAction($conflictstate, $token, $shiftreduceaction )"
.el .SS "\f(CW$parser\fP\->YYSetLRAction($conflictstate, \f(CW$token\fP, \f(CW$shiftreduceaction\fP )"
.IX Subsection "$parser->YYSetLRAction($conflictstate, $token, $shiftreduceaction )"
It also accepts the syntax:
.PP
.Vb 1
\&  $parser\->YYSetLRAction($conflictstate, [$token1, ... ], $shiftreduceaction )
.Ve
.PP
This method has been designed to solve shift-reduce and reduce-reduce conflicts
at parsing-time (not at parser-generation time).
.PP
The \s-1LR\s0 table is changed so that the action in state \f(CW$conflictstate\fR
in the presence of the token \f(CW$token\fR will be given by \f(CW$shiftreduceaction\fR. 
The current shift-reduce action isn't saved.
.PP
See an example in
\&\f(CW\*(C`Cplusplus2.eyp\*(C'\fR in the directory \f(CW\*(C`examples/debuggintut\*(C'\fR.
.ie n .SS "$parser\->YYSetReduce($token, $productionname )"
.el .SS "\f(CW$parser\fP\->YYSetReduce($token, \f(CW$productionname\fP )"
.IX Subsection "$parser->YYSetReduce($token, $productionname )"
This method has been designed to solve shift-reduce and reduce-reduce conflicts
at parsing-time using the \fIpostponed conflict\fR strategy. See the corresponding 
section in Parse::Eyapp::debuggintut. It has to be called inside the semantic
action associated with the postponed conflict rule \f(CW\*(C`conflictname\*(C'\fR. 
The \s-1LALR\s0 table is changed
so that the action in the presence of the token \f(CW$token\fR will be to reduce
by \f(CW$productionname\fR. The current shift-reduce action is saved
to be restored using
.PP
.Vb 1
\&  $parser\->YYRestoreLRAction(\*(Aqconflictname\*(Aq, $token)
.Ve
.PP
See the examples in \f(CW\*(C`examples/debuggingtut/\*(C'\fR in files
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser2.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`confusingsolveddynamic.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DebugDynamicResolution.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser2.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser3.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicvsTieIns.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`nolr_k_grammarsolveddynamic.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`pascalenumeratedvsrangesolvedviadyn.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`Cplusplus.eyp\*(C'\fR.
.ie n .SS "$parser\->YYSetShift($token)"
.el .SS "\f(CW$parser\fP\->YYSetShift($token)"
.IX Subsection "$parser->YYSetShift($token)"
Also:
.PP
.Vb 1
\&      $parser\->YYSetShift([$token1, $token2, ... ])
.Ve
.PP
This method has been designed to solve shift-reduce 
at parsing-time using the \fIpostponed conflict\fR strategy. See the corresponding 
section in Parse::Eyapp::debuggintut. It has to be called inside the semantic
action associated with the postponed conflict rule \f(CW\*(C`conflictname\*(C'\fR. 
The \s-1LALR\s0 table is changed
so that the action in the presence of the token \f(CW$token\fR will be to shift.
.PP
See the examples in \f(CW\*(C`examples/debuggingtut/\*(C'\fR in files
.IP "\(bu" 2
\&\f(CW\*(C`DebugDynamicResolution.eyp\*(C'\fR
.IP "\(bu" 2
\&\f(CW\*(C`DynamicallyChangingTheParser.eyp\*(C'\fR
.ie n .SS "$parser\->YYSlurpFile"
.el .SS "\f(CW$parser\fP\->YYSlurpFile"
.IX Subsection "$parser->YYSlurpFile"
alias:
.PP
.Vb 1
\& $parser\->slurp_file($filename[,$prompt[,$mode]])
.Ve
.PP
Receives the name of the file, reads its contents
and stores it in \f(CW\*(C`$parser\->input\*(C'\fR.
.PP
If the file does not exists, it proceeds to read from \f(CW\*(C`STDIN\*(C'\fR.
If a prompt was set with \f(CW\*(C`$parser\->YYPrompt\*(C'\fR, it will be shown.
The additional optional parameter \f(CW$mode\fR is used in such case to set 
\&\f(CW$/\fR. It can also be used as a class method.
.ie n .SS "$parser\->YYState"
.el .SS "\f(CW$parser\fP\->YYState"
.IX Subsection "$parser->YYState"
\&\f(CW\*(C`YYState\*(C'\fR returns a reference to the list of states containing the \s-1\fILALR\s0\fR\|(1) tables: the 
action and \s-1GOTO\s0 tables.  Each state is an anonymous hash:
.PP
.Vb 5
\&  DB<4> x $parser\->YYState(2)
\&  0  HASH(0xfa7120)
\&     \*(AqACTIONS\*(Aq => HASH(0xfa70f0) # token => state
\&           \*(Aq:\*(Aq => \*(Aq\-7\*(Aq
\&     \*(AqDEFAULT\*(Aq => \*(Aq\-6\*(Aq
.Ve
.PP
A negative number means reduction using the corresponding production 
rule (opposite) number. The former example tells to reduce by rule 7
when in state 2 and seeing token \f(CW\*(Aq:\*(Aq\fR. By default, the action when
in state 2 is to reduce by rule number 6.
.PP
There are three keys: \s-1ACTIONS, GOTOS\s0 and  \s-1DEFAULT\s0
.PP
.Vb 6
\&  DB<7> x $parser\->YYState(13)
\& 0  HASH(0xfa8b50)
\&    \*(AqACTIONS\*(Aq => HASH(0xfa7530)
\&       \*(AqVAR\*(Aq => 17
\&    \*(AqGOTOS\*(Aq => HASH(0xfa8b20)
\&       \*(Aqtype\*(Aq => 19
.Ve
.PP
The \s-1GOTOS\s0 tables contains the \s-1DFA\s0 transition tables for
the syntactic variables. The former example tells
to move to state 19 when in state 13 after seeing
the syntactic variable \f(CW\*(C`type\*(C'\fR (i.e. if after reducing by a 
rule of \f(CW\*(C`type\*(C'\fR we are in state 13).
.ie n .SS "$parser\->YYTopState($length)"
.el .SS "\f(CW$parser\fP\->YYTopState($length)"
.IX Subsection "$parser->YYTopState($length)"
If \f(CW$length\fR is zero or not provided 
it returns the state on top of the stack.
Otherwise, returns the state \f(CW$length\fR units deep in the stack.
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE \s0(\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04
\&\s0(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601
\&\s0(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\*(R"\s0 in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0
      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp::MatchingTrees.3pm              0100644 0001750 0001750 00000046622 12566242263 026412  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::MatchingTrees 3"
.TH Parse::Eyapp::MatchingTrees 3 "2012-03-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::treematchingtut \- Tree Matching and Tree substitution: an introduction
.SH "TREE MATCHING AND TREE SUBSTITUTION"
.IX Header "TREE MATCHING AND TREE SUBSTITUTION"
Most of the examples in this section can be found in the directory
\&\f(CW\*(C`examples/MatchingTrees\*(C'\fR that comes with the distribution of Parse::Eyapp.
.SS "Matching Trees"
.IX Subsection "Matching Trees"
Both the transformation objects in \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR
and the nodes in \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR have a method 
named \f(CW\*(C`m\*(C'\fR for matching. 
For a \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR object, the method \-when called
in a list context\- returns a list of 
\&\f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR nodes.
.PP
.Vb 1
\&                    @R = $t\->m($yatw1, $yatw2, $yatw3, ...)
.Ve
.PP
A \f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR 
object describes 
the nodes of the actual tree that have matched.
The nodes in the returned list are organized in a hierarchy.
They appear in the list 
sorted according to a depth-first visit of the actual tree \f(CW$t\fR.
In a scalar context \f(CW\*(C`m\*(C'\fR returns the first element of
the list.
.PP
Let us denote by \f(CW$t\fR the actual tree being searched
and \f(CW$r\fR one of the \f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR
nodes in the resulting forest \f(CW@R\fR.
Then we have the following methods:
.IP "\(bu" 4
The method \f(CW\*(C`$r\->node\*(C'\fR return the node \f(CW$t\fR of the actual 
tree that matched
.IP "\(bu" 4
The method \f(CW\*(C`$r\->father\*(C'\fR returns the father of \f(CW$r\fR
in the matching forest.
The father of \f(CW$r\fR is defined by this property:
\&\f(CW\*(C`$r\->father\->node\*(C'\fR is the nearest ancestor of
\&\f(CW\*(C`$r\->node\*(C'\fR that matched with the treeregexp pattern.
That is, there is no ancestor that matched between
\&\f(CW\*(C`$r\->node\*(C'\fR and \f(CW\*(C`$r\->father\->node\*(C'\fR.
Otherwise \f(CW\*(C`$r\->father\*(C'\fR is \f(CW\*(C`undef\*(C'\fR
.IP "\(bu" 4
The method \f(CW\*(C`$r\->coord\*(C'\fR returns the coordinates of \f(CW\*(C`$r\->node\*(C'\fR 
relative to \f(CW$t\fR.
For example, the coordinate \f(CW".1.3.2"\fR 
denotes the node \f(CW\*(C`$t\->child(1)\->child(3)\->child(2)\*(C'\fR, where \f(CW$t\fR
is the root of the search.
.IP "\(bu" 4
The method \f(CW\*(C`$r\->depth\*(C'\fR returns the depth of \f(CW\*(C`$r\->node\*(C'\fR 
in \f(CW$t\fR.
.IP "\(bu" 4
When \f(CW\*(C`m\*(C'\fR was called as a \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR method, i. e. 
with potentially more than one \f(CW\*(C`YATW\*(C'\fR treeregexp, the method \f(CW\*(C`$r\->names\*(C'\fR
returns the array of names of the transformations that matched with
\&\f(CW\*(C`$r\->node\*(C'\fR.
.PP
\fIUse of \f(CI\*(C`m\*(C'\fI as a Parse::Eyapp::Node Method\fR
.IX Subsection "Use of m as a Parse::Eyapp::Node Method"
.PP
The example in \f(CW\*(C`examples/MatchingTrees/m2.pl\*(C'\fR shows the use of \f(CW\*(C`m\*(C'\fR as
a \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR method.
.PP
.Vb 10
\&  examples/MatchingTrees$ cat \-n m2.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Rule6;
\&     4  use Parse::Eyapp::Treeregexp;
\&     5
\&     6  Parse::Eyapp::Treeregexp\->new( STRING => q{
\&     7    fold: /TIMES|PLUS|DIV|MINUS/(NUM, NUM)
\&     8    zxw: TIMES(NUM($x), .) and { $x\->{attr} == 0 }
\&     9    wxz: TIMES(., NUM($x)) and { $x\->{attr} == 0 }
\&    10  })\->generate();
\&    11
\&    12  # Syntax analysis
\&    13  my $parser = new Rule6();
\&    14  my $input = "0*0*0";
\&    15  my $t = $parser\->Run(\e$input);
\&    16  print "Tree:",$t\->str,"\en";
\&    17
\&    18  # Search
\&    19  my $m = $t\->m(our ($fold, $zxw, $wxz));
\&    20  print "Match Node:\en",$m\->str,"\en";
.Ve
.PP
When executed with input \f(CW\*(C`0*0*0\*(C'\fR the program generates this output:
.PP
.Vb 4
\&  examples/MatchingTrees$ m2.pl
\&  Tree:TIMES(TIMES(NUM(TERMINAL),NUM(TERMINAL)),NUM(TERMINAL))
\&  Match Node:
\&  Match[[TIMES:0:wxz]](Match[[TIMES:1:fold,zxw,wxz]])
.Ve
.PP
The representation of \f(CW\*(C`Match\*(C'\fR nodes by \f(CW\*(C`str\*(C'\fR deserves a comment.
\&\f(CW\*(C`Match\*(C'\fR nodes have their own \f(CW\*(C`info\*(C'\fR method. It returns a string
containing the concatenation of the class of \f(CW\*(C`$r\->node\*(C'\fR 
(i.e. the actual node that matched), the depth
(\f(CW\*(C`$r\->depth\*(C'\fR) and the names of the transformations
that matched (as provided by the method \f(CW\*(C`$r\->names\*(C'\fR)
.PP
\fIUse of \f(CI\*(C`m\*(C'\fI as a Parse::Eyapp::YATW Method\fR
.IX Subsection "Use of m as a Parse::Eyapp::YATW Method"
.PP
A second example can be found 
inside the file \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR.
It illustrates a use of \f(CW\*(C`m\*(C'\fR as 
a \f(CW\*(C`Parse::Eyapp:YATW\*(C'\fR method.
It solves a problem of scope analysis in a C compiler:
matching each \f(CW\*(C`RETURN\*(C'\fR statement with the function
that surrounds it. The parsing was already done, the 
\&\s-1AST\s0 was built and left in \f(CW$t\fR. The treeregexp used 
(see \f(CW\*(C`lib/Simple/Trans.trg\*(C'\fR) is:
.PP
.Vb 1
\&  retscope: /FUNCTION|RETURN/
.Ve
.PP
and the code that solves the problem (see
subroutine \f(CW\*(C`compile\*(C'\fR in file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR
is:
.PP
.Vb 10
\& # Associate each "return exp" with its "function"
\& my @returns = $retscope\->m($t); 
\& for (@returns) {
\&   my $node = $_\->node;
\&   if (ref($node) eq \*(AqRETURN\*(Aq) {
\&     my $function = $_\->father\->node; 
\&     $node\->{function}  = $function;  
\&     $node\->{t} = $function\->{t};
\&   }
\& }
.Ve
.PP
The first line gets a list of \f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR nodes 
describing  the actual nodes that matched \f(CW\*(C`/FUNCTION|RETURN/\*(C'\fR. 
If the node described by \f(CW$_\fR is a \f(CW\*(AqRETURN\*(Aq\fR node,
the expresion \f(CW\*(C` $_\->father\->node\*(C'\fR must necessarily point
to the function node that encloses it.
.ie n .SS "The ""SEVERITY"" option of ""Parse::Eyapp::Treeregexp::new"""
.el .SS "The \f(CWSEVERITY\fP option of \f(CWParse::Eyapp::Treeregexp::new\fP"
.IX Subsection "The SEVERITY option of Parse::Eyapp::Treeregexp::new"
The \f(CW\*(C`SEVERITY\*(C'\fR option of \f(CW\*(C`Parse::Eyapp::Treeregexp::new\*(C'\fR controls the
way matching succeeds regarding the number of children.
To illustrate its use let us consider the following example.
The grammar used \f(CW\*(C`Rule6.yp\*(C'\fR is similar
to the example in the section \*(L"\s-1SYNOPSIS\*(R"\s0 in Parse::Eyapp::Node.
.PP
.Vb 10
\&  examples/MatchingTrees$ cat \-n numchildren.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Rule6;
\&     4  use Parse::Eyapp::Treeregexp;
\&     5
\&     6  sub TERMINAL::info { $_[0]{attr} }
\&     7
\&     8  my $severity = shift || 0;
\&     9  my $input = shift || \*(Aq0*2\*(Aq;
\&    10
\&    11  my $parser = new Rule6();
\&    12  my $t = $parser\->Run(\e$input);
\&    13
\&    14  my $transform = Parse::Eyapp::Treeregexp\->new(
\&    15    STRING => q{
\&    16      zero_times_whatever: TIMES(NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    17    },
\&    18    SEVERITY => $severity,
\&    19    FIRSTLINE => 14,
\&    20  )\->generate;
\&    21
\&    22  $t\->s(our @all);
\&    23
\&    24  print $t\->str,"\en";
.Ve
.PP
The program gets the severity level from the command line (line 9).
The specification of the term \f(CW\*(C`TIMES(NUM($x))\*(C'\fR inside the
transformation \f(CW\*(C`zero_times_whatever\*(C'\fR does not
clearly state that \f(CW\*(C`TIMES\*(C'\fR must have two children.
There are several interpretations of the treregexp depending
on the level fixed for \f(CW\*(C`SEVERITY\*(C'\fR:
.IP "\(bu" 4
0: \f(CW\*(C`TIMES\*(C'\fR must have at least one child. Don't care if it has more.
.IP "\(bu" 4
1: \f(CW\*(C`TIMES\*(C'\fR must have exactly one child.
.IP "\(bu" 4
2: \f(CW\*(C`TIMES\*(C'\fR must have exactly one child. When visit a 
\&\f(CW\*(C`TIMES\*(C'\fR node with a different number of children issue a warning.
.IP "\(bu" 4
3: \f(CW\*(C`TIMES\*(C'\fR must have exactly one child.  When visit a
\&\f(CW\*(C`TIMES\*(C'\fR node with a different number of children issue an
error.
.PP
Observe the change in behavior according to the level of \f(CW\*(C`SEVERITY\*(C'\fR:
.PP
.Vb 12
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 0 \*(Aq0*2\*(Aq
\&  NUM(TERMINAL[0])
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 1 \*(Aq0*2\*(Aq
\&  TIMES(NUM(TERMINAL[0]),NUM(TERMINAL[2]))
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 2 \*(Aq0*2\*(Aq
\&  Warning! found node TIMES with 2 children.
\&  Expected 1 children (see line 15 of ./numchildren.pl)"
\&  TIMES(NUM(TERMINAL[0]),NUM(TERMINAL[2]))
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 3 \*(Aq0*2\*(Aq
\&  Error! found node TIMES with 2 children.
\&  Expected 1 children (see line 15 of ./numchildren.pl)"
\&   at (eval 3) line 29
.Ve
.ie n .SS "Tree Substitution: The ""s"" methods"
.el .SS "Tree Substitution: The \f(CWs\fP methods"
.IX Subsection "Tree Substitution: The s methods"
Both \f(CW\*(C`Parse::Eyapp:Node\*(C'\fR and \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR objects (i.e.
nodes and tree transformations) are provided with a \f(CW\*(C`s\*(C'\fR method.
.PP
In the case of a \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR object the method \f(CW\*(C`s\*(C'\fR
applies the tree transformation using a single bottom-up traversing:
the transformation is recursively applied to the children and 
then to the current node.
.PP
For \f(CW\*(C`Parse::Eyapp:Node\*(C'\fR nodes the set of transformations is applied
to each node until no transformation matches any more.
The example in the section \*(L"\s-1SYNOPSIS\*(R"\s0 in Parse::Eyapp::Node illustrates the use:
.PP
.Vb 10
\&  1  # Let us transform the tree. Define the tree\-regular expressions ..
\&  2  my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&  3    { #  Example of support code
\&  4      my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&  5    }
\&  6    constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM($x), NUM($y))
\&  7      => {
\&  8        my $op = $Op{ref($_[0])};
\&  9        $x\->{attr} = eval  "$x\->{attr} $op $y\->{attr}";
\& 10        $_[0] = $NUM[0];
\& 11      }
\& 12    uminus: UMINUS(NUM($x)) => { $x\->{attr} = \-$x\->{attr}; $_[0] = $NUM }
\& 13    zero_times_whatever: TIMES(NUM($x), .) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\& 14    whatever_times_zero: TIMES(., NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\& 15    },
\& 16    OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\& 17  );
\& 18  $p\->generate(); # Create the tranformations
\& 19 
\& 20  $t\->s($uminus); # Transform UMINUS nodes
\& 21  $t\->s(@all);    # constant folding and mult. by zero
.Ve
.PP
The call at line 20 can be substituted by \f(CW\*(C`$uminus\->s($t)\*(C'\fR
without changes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
The project home is at <http://code.google.com/p/parse\-eyapp/>.
Use a subversion client to anonymously check out the latest project source code:
.Sp
.Vb 1
\&   svn checkout http://parse\-eyapp.googlecode.com/svn/trunk/ parse\-eyapp\-read\-only
.Ve
.IP "\(bu" 4
The tutorial \fIParsing Strings and Trees with\fR \f(CW\*(C`Parse::Eyapp\*(C'\fR
(An Introduction to Compiler Construction in seven pages) in
<http://nereida.deioc.ull.es/~pl/eyapsimple/>
.IP "\(bu" 4
Parse::Eyapp, 
Parse::Eyapp::eyapplanguageref, 
Parse::Eyapp::debuggingtut,
Parse::Eyapp::defaultactionsintro,
Parse::Eyapp::translationschemestut,
Parse::Eyapp::Driver,
Parse::Eyapp::Node,
Parse::Eyapp::YATW,
Parse::Eyapp::Treeregexp,
Parse::Eyapp::Scope,
Parse::Eyapp::Base,
Parse::Eyapp::datagenerationtut
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/languageintro.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/debuggingtut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/eyapplanguageref.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Treeregexp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Node.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/YATW.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Eyapp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Base.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/translationschemestut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/treematchingtut.pdf>
.IP "\(bu" 4
perldoc eyapp,
.IP "\(bu" 4
perldoc treereg,
.IP "\(bu" 4
perldoc vgg,
.IP "\(bu" 4
The Syntax Highlight file for vim at <http://www.vim.org/scripts/script.php?script_id=2453>
and <http://nereida.deioc.ull.es/~vim/>
.IP "\(bu" 4
\&\fIAnalisis Lexico y Sintactico\fR, (Notes for a course in compiler 
construction) by  Casiano Rodriguez-Leon. 
Available at  <http://nereida.deioc.ull.es/~pl/perlexamples/>
Is the more complete and reliable source for Parse::Eyapp. However is in Spanish.
.IP "\(bu" 4
Parse::Yapp,
.IP "\(bu" 4
Man pages of \fIyacc\fR\|(1) and
\&\fIbison\fR\|(1),
<http://www.delorie.com/gnu/docs/bison/bison.html>
.IP "\(bu" 4
Language::AttributeGrammar
.IP "\(bu" 4
Parse::RecDescent.
.IP "\(bu" 4
HOP::Parser
.IP "\(bu" 4
HOP::Lexer
.IP "\(bu" 4
ocamlyacc tutorial at 
<http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex\-ocamlyacc/ocamlyacc\-tutorial/ocamlyacc\-tutorial.html>
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "\(bu" 4
The classic Dragon's book \fICompilers: Principles, Techniques, and Tools\fR 
by Alfred V. Aho, Ravi Sethi and
Jeffrey D. Ullman (Addison-Wesley 1986)
.IP "\(bu" 4
\&\fI\s-1CS2121:\s0 The Implementation and Power of Programming Languages\fR
(See <http://www.cs.man.ac.uk/~pjj>, <http://www.cs.man.ac.uk/~pjj/complang/g2lr.html> 
and <http://www.cs.man.ac.uk/~pjj/cs2121/ho/ho.html>) by 
Pete Jinks
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE \s0(\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04
\&\s0(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601
\&\s0(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\*(R"\s0 in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0
                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp::MatchingTrees5.16.3pm          0100644 0001750 0001750 00000046547 12566242264 026733  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::MatchingTrees 3"
.TH Parse::Eyapp::MatchingTrees 3 "2012-03-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::treematchingtut \- Tree Matching and Tree substitution: an introduction
.SH "TREE MATCHING AND TREE SUBSTITUTION"
.IX Header "TREE MATCHING AND TREE SUBSTITUTION"
Most of the examples in this section can be found in the directory
\&\f(CW\*(C`examples/MatchingTrees\*(C'\fR that comes with the distribution of Parse::Eyapp.
.SS "Matching Trees"
.IX Subsection "Matching Trees"
Both the transformation objects in \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR
and the nodes in \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR have a method 
named \f(CW\*(C`m\*(C'\fR for matching. 
For a \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR object, the method \-when called
in a list context\- returns a list of 
\&\f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR nodes.
.PP
.Vb 1
\&                    @R = $t\->m($yatw1, $yatw2, $yatw3, ...)
.Ve
.PP
A \f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR 
object describes 
the nodes of the actual tree that have matched.
The nodes in the returned list are organized in a hierarchy.
They appear in the list 
sorted according to a depth-first visit of the actual tree \f(CW$t\fR.
In a scalar context \f(CW\*(C`m\*(C'\fR returns the first element of
the list.
.PP
Let us denote by \f(CW$t\fR the actual tree being searched
and \f(CW$r\fR one of the \f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR
nodes in the resulting forest \f(CW@R\fR.
Then we have the following methods:
.IP "\(bu" 4
The method \f(CW\*(C`$r\->node\*(C'\fR return the node \f(CW$t\fR of the actual 
tree that matched
.IP "\(bu" 4
The method \f(CW\*(C`$r\->father\*(C'\fR returns the father of \f(CW$r\fR
in the matching forest.
The father of \f(CW$r\fR is defined by this property:
\&\f(CW\*(C`$r\->father\->node\*(C'\fR is the nearest ancestor of
\&\f(CW\*(C`$r\->node\*(C'\fR that matched with the treeregexp pattern.
That is, there is no ancestor that matched between
\&\f(CW\*(C`$r\->node\*(C'\fR and \f(CW\*(C`$r\->father\->node\*(C'\fR.
Otherwise \f(CW\*(C`$r\->father\*(C'\fR is \f(CW\*(C`undef\*(C'\fR
.IP "\(bu" 4
The method \f(CW\*(C`$r\->coord\*(C'\fR returns the coordinates of \f(CW\*(C`$r\->node\*(C'\fR 
relative to \f(CW$t\fR.
For example, the coordinate \f(CW".1.3.2"\fR 
denotes the node \f(CW\*(C`$t\->child(1)\->child(3)\->child(2)\*(C'\fR, where \f(CW$t\fR
is the root of the search.
.IP "\(bu" 4
The method \f(CW\*(C`$r\->depth\*(C'\fR returns the depth of \f(CW\*(C`$r\->node\*(C'\fR 
in \f(CW$t\fR.
.IP "\(bu" 4
When \f(CW\*(C`m\*(C'\fR was called as a \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR method, i. e. 
with potentially more than one \f(CW\*(C`YATW\*(C'\fR treeregexp, the method \f(CW\*(C`$r\->names\*(C'\fR
returns the array of names of the transformations that matched with
\&\f(CW\*(C`$r\->node\*(C'\fR.
.PP
\fIUse of \f(CI\*(C`m\*(C'\fI as a Parse::Eyapp::Node Method\fR
.IX Subsection "Use of m as a Parse::Eyapp::Node Method"
.PP
The example in \f(CW\*(C`examples/MatchingTrees/m2.pl\*(C'\fR shows the use of \f(CW\*(C`m\*(C'\fR as
a \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR method.
.PP
.Vb 10
\&  examples/MatchingTrees$ cat \-n m2.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Rule6;
\&     4  use Parse::Eyapp::Treeregexp;
\&     5
\&     6  Parse::Eyapp::Treeregexp\->new( STRING => q{
\&     7    fold: /TIMES|PLUS|DIV|MINUS/(NUM, NUM)
\&     8    zxw: TIMES(NUM($x), .) and { $x\->{attr} == 0 }
\&     9    wxz: TIMES(., NUM($x)) and { $x\->{attr} == 0 }
\&    10  })\->generate();
\&    11
\&    12  # Syntax analysis
\&    13  my $parser = new Rule6();
\&    14  my $input = "0*0*0";
\&    15  my $t = $parser\->Run(\e$input);
\&    16  print "Tree:",$t\->str,"\en";
\&    17
\&    18  # Search
\&    19  my $m = $t\->m(our ($fold, $zxw, $wxz));
\&    20  print "Match Node:\en",$m\->str,"\en";
.Ve
.PP
When executed with input \f(CW\*(C`0*0*0\*(C'\fR the program generates this output:
.PP
.Vb 4
\&  examples/MatchingTrees$ m2.pl
\&  Tree:TIMES(TIMES(NUM(TERMINAL),NUM(TERMINAL)),NUM(TERMINAL))
\&  Match Node:
\&  Match[[TIMES:0:wxz]](Match[[TIMES:1:fold,zxw,wxz]])
.Ve
.PP
The representation of \f(CW\*(C`Match\*(C'\fR nodes by \f(CW\*(C`str\*(C'\fR deserves a comment.
\&\f(CW\*(C`Match\*(C'\fR nodes have their own \f(CW\*(C`info\*(C'\fR method. It returns a string
containing the concatenation of the class of \f(CW\*(C`$r\->node\*(C'\fR 
(i.e. the actual node that matched), the depth
(\f(CW\*(C`$r\->depth\*(C'\fR) and the names of the transformations
that matched (as provided by the method \f(CW\*(C`$r\->names\*(C'\fR)
.PP
\fIUse of \f(CI\*(C`m\*(C'\fI as a Parse::Eyapp::YATW Method\fR
.IX Subsection "Use of m as a Parse::Eyapp::YATW Method"
.PP
A second example can be found 
inside the file \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR.
It illustrates a use of \f(CW\*(C`m\*(C'\fR as 
a \f(CW\*(C`Parse::Eyapp:YATW\*(C'\fR method.
It solves a problem of scope analysis in a C compiler:
matching each \f(CW\*(C`RETURN\*(C'\fR statement with the function
that surrounds it. The parsing was already done, the 
\&\s-1AST\s0 was built and left in \f(CW$t\fR. The treeregexp used 
(see \f(CW\*(C`lib/Simple/Trans.trg\*(C'\fR) is:
.PP
.Vb 1
\&  retscope: /FUNCTION|RETURN/
.Ve
.PP
and the code that solves the problem (see
subroutine \f(CW\*(C`compile\*(C'\fR in file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR
is:
.PP
.Vb 10
\& # Associate each "return exp" with its "function"
\& my @returns = $retscope\->m($t); 
\& for (@returns) {
\&   my $node = $_\->node;
\&   if (ref($node) eq \*(AqRETURN\*(Aq) {
\&     my $function = $_\->father\->node; 
\&     $node\->{function}  = $function;  
\&     $node\->{t} = $function\->{t};
\&   }
\& }
.Ve
.PP
The first line gets a list of \f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR nodes 
describing  the actual nodes that matched \f(CW\*(C`/FUNCTION|RETURN/\*(C'\fR. 
If the node described by \f(CW$_\fR is a \f(CW\*(AqRETURN\*(Aq\fR node,
the expresion \f(CW\*(C` $_\->father\->node\*(C'\fR must necessarily point
to the function node that encloses it.
.ie n .SS "The ""SEVERITY"" option of ""Parse::Eyapp::Treeregexp::new"""
.el .SS "The \f(CWSEVERITY\fP option of \f(CWParse::Eyapp::Treeregexp::new\fP"
.IX Subsection "The SEVERITY option of Parse::Eyapp::Treeregexp::new"
The \f(CW\*(C`SEVERITY\*(C'\fR option of \f(CW\*(C`Parse::Eyapp::Treeregexp::new\*(C'\fR controls the
way matching succeeds regarding the number of children.
To illustrate its use let us consider the following example.
The grammar used \f(CW\*(C`Rule6.yp\*(C'\fR is similar
to the example in the section \*(L"\s-1SYNOPSIS\s0\*(R" in Parse::Eyapp::Node.
.PP
.Vb 10
\&  examples/MatchingTrees$ cat \-n numchildren.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Rule6;
\&     4  use Parse::Eyapp::Treeregexp;
\&     5
\&     6  sub TERMINAL::info { $_[0]{attr} }
\&     7
\&     8  my $severity = shift || 0;
\&     9  my $input = shift || \*(Aq0*2\*(Aq;
\&    10
\&    11  my $parser = new Rule6();
\&    12  my $t = $parser\->Run(\e$input);
\&    13
\&    14  my $transform = Parse::Eyapp::Treeregexp\->new(
\&    15    STRING => q{
\&    16      zero_times_whatever: TIMES(NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    17    },
\&    18    SEVERITY => $severity,
\&    19    FIRSTLINE => 14,
\&    20  )\->generate;
\&    21
\&    22  $t\->s(our @all);
\&    23
\&    24  print $t\->str,"\en";
.Ve
.PP
The program gets the severity level from the command line (line 9).
The specification of the term \f(CW\*(C`TIMES(NUM($x))\*(C'\fR inside the
transformation \f(CW\*(C`zero_times_whatever\*(C'\fR does not
clearly state that \f(CW\*(C`TIMES\*(C'\fR must have two children.
There are several interpretations of the treregexp depending
on the level fixed for \f(CW\*(C`SEVERITY\*(C'\fR:
.IP "\(bu" 4
0: \f(CW\*(C`TIMES\*(C'\fR must have at least one child. Don't care if it has more.
.IP "\(bu" 4
1: \f(CW\*(C`TIMES\*(C'\fR must have exactly one child.
.IP "\(bu" 4
2: \f(CW\*(C`TIMES\*(C'\fR must have exactly one child. When visit a 
\&\f(CW\*(C`TIMES\*(C'\fR node with a different number of children issue a warning.
.IP "\(bu" 4
3: \f(CW\*(C`TIMES\*(C'\fR must have exactly one child.  When visit a
\&\f(CW\*(C`TIMES\*(C'\fR node with a different number of children issue an
error.
.PP
Observe the change in behavior according to the level of \f(CW\*(C`SEVERITY\*(C'\fR:
.PP
.Vb 12
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 0 \*(Aq0*2\*(Aq
\&  NUM(TERMINAL[0])
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 1 \*(Aq0*2\*(Aq
\&  TIMES(NUM(TERMINAL[0]),NUM(TERMINAL[2]))
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 2 \*(Aq0*2\*(Aq
\&  Warning! found node TIMES with 2 children.
\&  Expected 1 children (see line 15 of ./numchildren.pl)"
\&  TIMES(NUM(TERMINAL[0]),NUM(TERMINAL[2]))
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 3 \*(Aq0*2\*(Aq
\&  Error! found node TIMES with 2 children.
\&  Expected 1 children (see line 15 of ./numchildren.pl)"
\&   at (eval 3) line 29
.Ve
.ie n .SS "Tree Substitution: The ""s"" methods"
.el .SS "Tree Substitution: The \f(CWs\fP methods"
.IX Subsection "Tree Substitution: The s methods"
Both \f(CW\*(C`Parse::Eyapp:Node\*(C'\fR and \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR objects (i.e.
nodes and tree transformations) are provided with a \f(CW\*(C`s\*(C'\fR method.
.PP
In the case of a \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR object the method \f(CW\*(C`s\*(C'\fR
applies the tree transformation using a single bottom-up traversing:
the transformation is recursively applied to the children and 
then to the current node.
.PP
For \f(CW\*(C`Parse::Eyapp:Node\*(C'\fR nodes the set of transformations is applied
to each node until no transformation matches any more.
The example in the section \*(L"\s-1SYNOPSIS\s0\*(R" in Parse::Eyapp::Node illustrates the use:
.PP
.Vb 10
\&  1  # Let us transform the tree. Define the tree\-regular expressions ..
\&  2  my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&  3    { #  Example of support code
\&  4      my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&  5    }
\&  6    constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM($x), NUM($y))
\&  7      => {
\&  8        my $op = $Op{ref($_[0])};
\&  9        $x\->{attr} = eval  "$x\->{attr} $op $y\->{attr}";
\& 10        $_[0] = $NUM[0];
\& 11      }
\& 12    uminus: UMINUS(NUM($x)) => { $x\->{attr} = \-$x\->{attr}; $_[0] = $NUM }
\& 13    zero_times_whatever: TIMES(NUM($x), .) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\& 14    whatever_times_zero: TIMES(., NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\& 15    },
\& 16    OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\& 17  );
\& 18  $p\->generate(); # Create the tranformations
\& 19 
\& 20  $t\->s($uminus); # Transform UMINUS nodes
\& 21  $t\->s(@all);    # constant folding and mult. by zero
.Ve
.PP
The call at line 20 can be substituted by \f(CW\*(C`$uminus\->s($t)\*(C'\fR
without changes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
The project home is at http://code.google.com/p/parse\-eyapp/ <http://code.google.com/p/parse-eyapp/>.
Use a subversion client to anonymously check out the latest project source code:
.Sp
.Vb 1
\&   svn checkout http://parse\-eyapp.googlecode.com/svn/trunk/ parse\-eyapp\-read\-only
.Ve
.IP "\(bu" 4
The tutorial \fIParsing Strings and Trees with\fR \f(CW\*(C`Parse::Eyapp\*(C'\fR
(An Introduction to Compiler Construction in seven pages) in
<http://nereida.deioc.ull.es/~pl/eyapsimple/>
.IP "\(bu" 4
Parse::Eyapp, 
Parse::Eyapp::eyapplanguageref, 
Parse::Eyapp::debuggingtut,
Parse::Eyapp::defaultactionsintro,
Parse::Eyapp::translationschemestut,
Parse::Eyapp::Driver,
Parse::Eyapp::Node,
Parse::Eyapp::YATW,
Parse::Eyapp::Treeregexp,
Parse::Eyapp::Scope,
Parse::Eyapp::Base,
Parse::Eyapp::datagenerationtut
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/languageintro.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/debuggingtut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/eyapplanguageref.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Treeregexp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Node.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/YATW.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Eyapp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Base.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/translationschemestut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/treematchingtut.pdf>
.IP "\(bu" 4
perldoc eyapp,
.IP "\(bu" 4
perldoc treereg,
.IP "\(bu" 4
perldoc vgg,
.IP "\(bu" 4
The Syntax Highlight file for vim at <http://www.vim.org/scripts/script.php?script_id=2453>
and <http://nereida.deioc.ull.es/~vim/>
.IP "\(bu" 4
\&\fIAnalisis Lexico y Sintactico\fR, (Notes for a course in compiler 
construction) by  Casiano Rodriguez-Leon. 
Available at  <http://nereida.deioc.ull.es/~pl/perlexamples/>
Is the more complete and reliable source for Parse::Eyapp. However is in Spanish.
.IP "\(bu" 4
Parse::Yapp,
.IP "\(bu" 4
Man pages of \fIyacc\fR\|(1) and
\&\fIbison\fR\|(1),
<http://www.delorie.com/gnu/docs/bison/bison.html>
.IP "\(bu" 4
Language::AttributeGrammar
.IP "\(bu" 4
Parse::RecDescent.
.IP "\(bu" 4
HOP::Parser
.IP "\(bu" 4
HOP::Lexer
.IP "\(bu" 4
ocamlyacc tutorial at 
http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex\-ocamlyacc/ocamlyacc\-tutorial/ocamlyacc\-tutorial.html <http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/ocamlyacc-tutorial.html>
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "\(bu" 4
The classic Dragon's book \fICompilers: Principles, Techniques, and Tools\fR 
by Alfred V. Aho, Ravi Sethi and
Jeffrey D. Ullman (Addison-Wesley 1986)
.IP "\(bu" 4
\&\fI\s-1CS2121:\s0 The Implementation and Power of Programming Languages\fR
(See <http://www.cs.man.ac.uk/~pjj>, <http://www.cs.man.ac.uk/~pjj/complang/g2lr.html> 
and <http://www.cs.man.ac.uk/~pjj/cs2121/ho/ho.html>) by 
Pete Jinks
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE\s0 (\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04\s0
(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601\s0
(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\s0\*(R" in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT\s0 \s-1ANY\s0 \s-1WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0.
                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp::MatchingTrees5.18.3pm          0100644 0001750 0001750 00000046622 12566242263 026726  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::MatchingTrees 3"
.TH Parse::Eyapp::MatchingTrees 3 "2012-03-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::treematchingtut \- Tree Matching and Tree substitution: an introduction
.SH "TREE MATCHING AND TREE SUBSTITUTION"
.IX Header "TREE MATCHING AND TREE SUBSTITUTION"
Most of the examples in this section can be found in the directory
\&\f(CW\*(C`examples/MatchingTrees\*(C'\fR that comes with the distribution of Parse::Eyapp.
.SS "Matching Trees"
.IX Subsection "Matching Trees"
Both the transformation objects in \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR
and the nodes in \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR have a method 
named \f(CW\*(C`m\*(C'\fR for matching. 
For a \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR object, the method \-when called
in a list context\- returns a list of 
\&\f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR nodes.
.PP
.Vb 1
\&                    @R = $t\->m($yatw1, $yatw2, $yatw3, ...)
.Ve
.PP
A \f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR 
object describes 
the nodes of the actual tree that have matched.
The nodes in the returned list are organized in a hierarchy.
They appear in the list 
sorted according to a depth-first visit of the actual tree \f(CW$t\fR.
In a scalar context \f(CW\*(C`m\*(C'\fR returns the first element of
the list.
.PP
Let us denote by \f(CW$t\fR the actual tree being searched
and \f(CW$r\fR one of the \f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR
nodes in the resulting forest \f(CW@R\fR.
Then we have the following methods:
.IP "\(bu" 4
The method \f(CW\*(C`$r\->node\*(C'\fR return the node \f(CW$t\fR of the actual 
tree that matched
.IP "\(bu" 4
The method \f(CW\*(C`$r\->father\*(C'\fR returns the father of \f(CW$r\fR
in the matching forest.
The father of \f(CW$r\fR is defined by this property:
\&\f(CW\*(C`$r\->father\->node\*(C'\fR is the nearest ancestor of
\&\f(CW\*(C`$r\->node\*(C'\fR that matched with the treeregexp pattern.
That is, there is no ancestor that matched between
\&\f(CW\*(C`$r\->node\*(C'\fR and \f(CW\*(C`$r\->father\->node\*(C'\fR.
Otherwise \f(CW\*(C`$r\->father\*(C'\fR is \f(CW\*(C`undef\*(C'\fR
.IP "\(bu" 4
The method \f(CW\*(C`$r\->coord\*(C'\fR returns the coordinates of \f(CW\*(C`$r\->node\*(C'\fR 
relative to \f(CW$t\fR.
For example, the coordinate \f(CW".1.3.2"\fR 
denotes the node \f(CW\*(C`$t\->child(1)\->child(3)\->child(2)\*(C'\fR, where \f(CW$t\fR
is the root of the search.
.IP "\(bu" 4
The method \f(CW\*(C`$r\->depth\*(C'\fR returns the depth of \f(CW\*(C`$r\->node\*(C'\fR 
in \f(CW$t\fR.
.IP "\(bu" 4
When \f(CW\*(C`m\*(C'\fR was called as a \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR method, i. e. 
with potentially more than one \f(CW\*(C`YATW\*(C'\fR treeregexp, the method \f(CW\*(C`$r\->names\*(C'\fR
returns the array of names of the transformations that matched with
\&\f(CW\*(C`$r\->node\*(C'\fR.
.PP
\fIUse of \f(CI\*(C`m\*(C'\fI as a Parse::Eyapp::Node Method\fR
.IX Subsection "Use of m as a Parse::Eyapp::Node Method"
.PP
The example in \f(CW\*(C`examples/MatchingTrees/m2.pl\*(C'\fR shows the use of \f(CW\*(C`m\*(C'\fR as
a \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR method.
.PP
.Vb 10
\&  examples/MatchingTrees$ cat \-n m2.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Rule6;
\&     4  use Parse::Eyapp::Treeregexp;
\&     5
\&     6  Parse::Eyapp::Treeregexp\->new( STRING => q{
\&     7    fold: /TIMES|PLUS|DIV|MINUS/(NUM, NUM)
\&     8    zxw: TIMES(NUM($x), .) and { $x\->{attr} == 0 }
\&     9    wxz: TIMES(., NUM($x)) and { $x\->{attr} == 0 }
\&    10  })\->generate();
\&    11
\&    12  # Syntax analysis
\&    13  my $parser = new Rule6();
\&    14  my $input = "0*0*0";
\&    15  my $t = $parser\->Run(\e$input);
\&    16  print "Tree:",$t\->str,"\en";
\&    17
\&    18  # Search
\&    19  my $m = $t\->m(our ($fold, $zxw, $wxz));
\&    20  print "Match Node:\en",$m\->str,"\en";
.Ve
.PP
When executed with input \f(CW\*(C`0*0*0\*(C'\fR the program generates this output:
.PP
.Vb 4
\&  examples/MatchingTrees$ m2.pl
\&  Tree:TIMES(TIMES(NUM(TERMINAL),NUM(TERMINAL)),NUM(TERMINAL))
\&  Match Node:
\&  Match[[TIMES:0:wxz]](Match[[TIMES:1:fold,zxw,wxz]])
.Ve
.PP
The representation of \f(CW\*(C`Match\*(C'\fR nodes by \f(CW\*(C`str\*(C'\fR deserves a comment.
\&\f(CW\*(C`Match\*(C'\fR nodes have their own \f(CW\*(C`info\*(C'\fR method. It returns a string
containing the concatenation of the class of \f(CW\*(C`$r\->node\*(C'\fR 
(i.e. the actual node that matched), the depth
(\f(CW\*(C`$r\->depth\*(C'\fR) and the names of the transformations
that matched (as provided by the method \f(CW\*(C`$r\->names\*(C'\fR)
.PP
\fIUse of \f(CI\*(C`m\*(C'\fI as a Parse::Eyapp::YATW Method\fR
.IX Subsection "Use of m as a Parse::Eyapp::YATW Method"
.PP
A second example can be found 
inside the file \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR.
It illustrates a use of \f(CW\*(C`m\*(C'\fR as 
a \f(CW\*(C`Parse::Eyapp:YATW\*(C'\fR method.
It solves a problem of scope analysis in a C compiler:
matching each \f(CW\*(C`RETURN\*(C'\fR statement with the function
that surrounds it. The parsing was already done, the 
\&\s-1AST\s0 was built and left in \f(CW$t\fR. The treeregexp used 
(see \f(CW\*(C`lib/Simple/Trans.trg\*(C'\fR) is:
.PP
.Vb 1
\&  retscope: /FUNCTION|RETURN/
.Ve
.PP
and the code that solves the problem (see
subroutine \f(CW\*(C`compile\*(C'\fR in file \f(CW\*(C`lib/Simple/Types.eyp\*(C'\fR
is:
.PP
.Vb 10
\& # Associate each "return exp" with its "function"
\& my @returns = $retscope\->m($t); 
\& for (@returns) {
\&   my $node = $_\->node;
\&   if (ref($node) eq \*(AqRETURN\*(Aq) {
\&     my $function = $_\->father\->node; 
\&     $node\->{function}  = $function;  
\&     $node\->{t} = $function\->{t};
\&   }
\& }
.Ve
.PP
The first line gets a list of \f(CW\*(C`Parse::Eyapp::Node::Match\*(C'\fR nodes 
describing  the actual nodes that matched \f(CW\*(C`/FUNCTION|RETURN/\*(C'\fR. 
If the node described by \f(CW$_\fR is a \f(CW\*(AqRETURN\*(Aq\fR node,
the expresion \f(CW\*(C` $_\->father\->node\*(C'\fR must necessarily point
to the function node that encloses it.
.ie n .SS "The ""SEVERITY"" option of ""Parse::Eyapp::Treeregexp::new"""
.el .SS "The \f(CWSEVERITY\fP option of \f(CWParse::Eyapp::Treeregexp::new\fP"
.IX Subsection "The SEVERITY option of Parse::Eyapp::Treeregexp::new"
The \f(CW\*(C`SEVERITY\*(C'\fR option of \f(CW\*(C`Parse::Eyapp::Treeregexp::new\*(C'\fR controls the
way matching succeeds regarding the number of children.
To illustrate its use let us consider the following example.
The grammar used \f(CW\*(C`Rule6.yp\*(C'\fR is similar
to the example in the section \*(L"\s-1SYNOPSIS\*(R"\s0 in Parse::Eyapp::Node.
.PP
.Vb 10
\&  examples/MatchingTrees$ cat \-n numchildren.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Rule6;
\&     4  use Parse::Eyapp::Treeregexp;
\&     5
\&     6  sub TERMINAL::info { $_[0]{attr} }
\&     7
\&     8  my $severity = shift || 0;
\&     9  my $input = shift || \*(Aq0*2\*(Aq;
\&    10
\&    11  my $parser = new Rule6();
\&    12  my $t = $parser\->Run(\e$input);
\&    13
\&    14  my $transform = Parse::Eyapp::Treeregexp\->new(
\&    15    STRING => q{
\&    16      zero_times_whatever: TIMES(NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    17    },
\&    18    SEVERITY => $severity,
\&    19    FIRSTLINE => 14,
\&    20  )\->generate;
\&    21
\&    22  $t\->s(our @all);
\&    23
\&    24  print $t\->str,"\en";
.Ve
.PP
The program gets the severity level from the command line (line 9).
The specification of the term \f(CW\*(C`TIMES(NUM($x))\*(C'\fR inside the
transformation \f(CW\*(C`zero_times_whatever\*(C'\fR does not
clearly state that \f(CW\*(C`TIMES\*(C'\fR must have two children.
There are several interpretations of the treregexp depending
on the level fixed for \f(CW\*(C`SEVERITY\*(C'\fR:
.IP "\(bu" 4
0: \f(CW\*(C`TIMES\*(C'\fR must have at least one child. Don't care if it has more.
.IP "\(bu" 4
1: \f(CW\*(C`TIMES\*(C'\fR must have exactly one child.
.IP "\(bu" 4
2: \f(CW\*(C`TIMES\*(C'\fR must have exactly one child. When visit a 
\&\f(CW\*(C`TIMES\*(C'\fR node with a different number of children issue a warning.
.IP "\(bu" 4
3: \f(CW\*(C`TIMES\*(C'\fR must have exactly one child.  When visit a
\&\f(CW\*(C`TIMES\*(C'\fR node with a different number of children issue an
error.
.PP
Observe the change in behavior according to the level of \f(CW\*(C`SEVERITY\*(C'\fR:
.PP
.Vb 12
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 0 \*(Aq0*2\*(Aq
\&  NUM(TERMINAL[0])
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 1 \*(Aq0*2\*(Aq
\&  TIMES(NUM(TERMINAL[0]),NUM(TERMINAL[2]))
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 2 \*(Aq0*2\*(Aq
\&  Warning! found node TIMES with 2 children.
\&  Expected 1 children (see line 15 of ./numchildren.pl)"
\&  TIMES(NUM(TERMINAL[0]),NUM(TERMINAL[2]))
\&  pl@nereida:~/LEyapp/examples/MatchingTrees$ numchildren.pl 3 \*(Aq0*2\*(Aq
\&  Error! found node TIMES with 2 children.
\&  Expected 1 children (see line 15 of ./numchildren.pl)"
\&   at (eval 3) line 29
.Ve
.ie n .SS "Tree Substitution: The ""s"" methods"
.el .SS "Tree Substitution: The \f(CWs\fP methods"
.IX Subsection "Tree Substitution: The s methods"
Both \f(CW\*(C`Parse::Eyapp:Node\*(C'\fR and \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR objects (i.e.
nodes and tree transformations) are provided with a \f(CW\*(C`s\*(C'\fR method.
.PP
In the case of a \f(CW\*(C`Parse::Eyapp::YATW\*(C'\fR object the method \f(CW\*(C`s\*(C'\fR
applies the tree transformation using a single bottom-up traversing:
the transformation is recursively applied to the children and 
then to the current node.
.PP
For \f(CW\*(C`Parse::Eyapp:Node\*(C'\fR nodes the set of transformations is applied
to each node until no transformation matches any more.
The example in the section \*(L"\s-1SYNOPSIS\*(R"\s0 in Parse::Eyapp::Node illustrates the use:
.PP
.Vb 10
\&  1  # Let us transform the tree. Define the tree\-regular expressions ..
\&  2  my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&  3    { #  Example of support code
\&  4      my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&  5    }
\&  6    constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM($x), NUM($y))
\&  7      => {
\&  8        my $op = $Op{ref($_[0])};
\&  9        $x\->{attr} = eval  "$x\->{attr} $op $y\->{attr}";
\& 10        $_[0] = $NUM[0];
\& 11      }
\& 12    uminus: UMINUS(NUM($x)) => { $x\->{attr} = \-$x\->{attr}; $_[0] = $NUM }
\& 13    zero_times_whatever: TIMES(NUM($x), .) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\& 14    whatever_times_zero: TIMES(., NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\& 15    },
\& 16    OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\& 17  );
\& 18  $p\->generate(); # Create the tranformations
\& 19 
\& 20  $t\->s($uminus); # Transform UMINUS nodes
\& 21  $t\->s(@all);    # constant folding and mult. by zero
.Ve
.PP
The call at line 20 can be substituted by \f(CW\*(C`$uminus\->s($t)\*(C'\fR
without changes.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
The project home is at <http://code.google.com/p/parse\-eyapp/>.
Use a subversion client to anonymously check out the latest project source code:
.Sp
.Vb 1
\&   svn checkout http://parse\-eyapp.googlecode.com/svn/trunk/ parse\-eyapp\-read\-only
.Ve
.IP "\(bu" 4
The tutorial \fIParsing Strings and Trees with\fR \f(CW\*(C`Parse::Eyapp\*(C'\fR
(An Introduction to Compiler Construction in seven pages) in
<http://nereida.deioc.ull.es/~pl/eyapsimple/>
.IP "\(bu" 4
Parse::Eyapp, 
Parse::Eyapp::eyapplanguageref, 
Parse::Eyapp::debuggingtut,
Parse::Eyapp::defaultactionsintro,
Parse::Eyapp::translationschemestut,
Parse::Eyapp::Driver,
Parse::Eyapp::Node,
Parse::Eyapp::YATW,
Parse::Eyapp::Treeregexp,
Parse::Eyapp::Scope,
Parse::Eyapp::Base,
Parse::Eyapp::datagenerationtut
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/languageintro.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/debuggingtut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/eyapplanguageref.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Treeregexp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Node.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/YATW.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Eyapp.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/Base.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/translationschemestut.pdf>
.IP "\(bu" 4
The pdf file in <http://nereida.deioc.ull.es/~pl/perlexamples/treematchingtut.pdf>
.IP "\(bu" 4
perldoc eyapp,
.IP "\(bu" 4
perldoc treereg,
.IP "\(bu" 4
perldoc vgg,
.IP "\(bu" 4
The Syntax Highlight file for vim at <http://www.vim.org/scripts/script.php?script_id=2453>
and <http://nereida.deioc.ull.es/~vim/>
.IP "\(bu" 4
\&\fIAnalisis Lexico y Sintactico\fR, (Notes for a course in compiler 
construction) by  Casiano Rodriguez-Leon. 
Available at  <http://nereida.deioc.ull.es/~pl/perlexamples/>
Is the more complete and reliable source for Parse::Eyapp. However is in Spanish.
.IP "\(bu" 4
Parse::Yapp,
.IP "\(bu" 4
Man pages of \fIyacc\fR\|(1) and
\&\fIbison\fR\|(1),
<http://www.delorie.com/gnu/docs/bison/bison.html>
.IP "\(bu" 4
Language::AttributeGrammar
.IP "\(bu" 4
Parse::RecDescent.
.IP "\(bu" 4
HOP::Parser
.IP "\(bu" 4
HOP::Lexer
.IP "\(bu" 4
ocamlyacc tutorial at 
<http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex\-ocamlyacc/ocamlyacc\-tutorial/ocamlyacc\-tutorial.html>
.SH "REFERENCES"
.IX Header "REFERENCES"
.IP "\(bu" 4
The classic Dragon's book \fICompilers: Principles, Techniques, and Tools\fR 
by Alfred V. Aho, Ravi Sethi and
Jeffrey D. Ullman (Addison-Wesley 1986)
.IP "\(bu" 4
\&\fI\s-1CS2121:\s0 The Implementation and Power of Programming Languages\fR
(See <http://www.cs.man.ac.uk/~pjj>, <http://www.cs.man.ac.uk/~pjj/complang/g2lr.html> 
and <http://www.cs.man.ac.uk/~pjj/cs2121/ho/ho.html>) by 
Pete Jinks
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
.IP "\(bu" 2
Hal Finkel <http://www.halssoftware.com/>
.IP "\(bu" 2
G. Williams <http://kasei.us/>
.IP "\(bu" 2
Thomas L. Shinnick <http://search.cpan.org/~tshinnic/>
.IP "\(bu" 2
Frank Leray
.SH "AUTHOR"
.IX Header "AUTHOR"
Casiano Rodriguez-Leon (casiano@ull.es)
.SH "ACKNOWLEDGMENTS"
.IX Header "ACKNOWLEDGMENTS"
This work has been supported by \s-1CEE \s0(\s-1FEDER\s0) and the Spanish Ministry of
\&\fIEducacion y Ciencia\fR through \fIPlan Nacional I+D+I\fR number \s-1TIN2005\-08818\-C04\-04
\&\s0(\s-1ULL::OPLINK\s0 project <http://www.oplink.ull.es/>). 
Support from Gobierno de Canarias was through \s-1GC02210601
\&\s0(\fIGrupos Consolidados\fR).
The University of La Laguna has also supported my work in many ways
and for many years.
.PP
A large percentage of  code is verbatim taken from Parse::Yapp 1.05.
The author of Parse::Yapp is Francois Desarmenien.
.PP
I wish to thank Francois Desarmenien for his Parse::Yapp module, 
to my students at La Laguna and to the Perl Community. Thanks to 
the people who have contributed to improve the module (see \*(L"\s-1CONTRIBUTORS\*(R"\s0 in Parse::Eyapp).
Thanks to Larry Wall for giving us Perl.
Special thanks to Juana.
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2006\-2008 Casiano Rodriguez-Leon (casiano@ull.es). All rights reserved.
.PP
Parse::Yapp copyright is of Francois Desarmenien, all rights reserved. 1998\-2001
.PP
These modules are free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
.PP
This program is distributed in the hope that it will be useful,
but \s-1WITHOUT ANY WARRANTY\s0; without even the implied warranty of
\&\s-1MERCHANTABILITY\s0 or \s-1FITNESS FOR A PARTICULAR PURPOSE. \s0
                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Parse::Eyapp::Node.3pm                       0100644 0001750 0001750 00000223213 12566242263 024533  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Parse::Eyapp::Node 3"
.TH Parse::Eyapp::Node 3 "2012-03-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Parse::Eyapp::Node \- The nodes of the Syntax Trees
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Parse::Eyapp;
\&  use Parse::Eyapp::Treeregexp;
\&
\&  sub TERMINAL::info {
\&    $_[0]{attr}
\&  }
\&
\&  my $grammar = q{
\&    %right  \*(Aq=\*(Aq     # Lowest precedence
\&    %left   \*(Aq\-\*(Aq \*(Aq+\*(Aq # + and \- have more precedence than = Disambiguate a\-b\-c as (a\-b)\-c
\&    %left   \*(Aq*\*(Aq \*(Aq/\*(Aq # * and / have more precedence than + Disambiguate a/b/c as (a/b)/c
\&    %left   NEG     # Disambiguate \-a\-b as (\-a)\-b and not as \-(a\-b)
\&    %tree           # Let us build an abstract syntax tree ...
\&
\&    %%
\&    line:
\&        exp <%name EXPRESSION_LIST + \*(Aq;\*(Aq>
\&          { $_[1] } /* list of expressions separated by \*(Aq;\*(Aq */
\&    ;
\&
\&    /* The %name directive defines the name of the class to 
\&       which the node being built belongs */
\&    exp:
\&        %name NUM
\&        NUM
\&      | %name VAR
\&        VAR
\&      | %name ASSIGN
\&        VAR \*(Aq=\*(Aq exp
\&      | %name PLUS
\&        exp \*(Aq+\*(Aq exp
\&      | %name MINUS
\&        exp \*(Aq\-\*(Aq exp
\&      | %name TIMES
\&        exp \*(Aq*\*(Aq exp
\&      | %name DIV
\&        exp \*(Aq/\*(Aq exp
\&      | %name UMINUS
\&        \*(Aq\-\*(Aq exp %prec NEG
\&      | \*(Aq(\*(Aq exp \*(Aq)\*(Aq
\&          { $_[2] }  /* Let us simplify a bit the tree */
\&    ;
\&
\&    %%
\&    sub _Error { die "Syntax error near ".($_[0]\->YYCurval?$_[0]\->YYCurval:"end of file")."\en" }
\&
\&    sub _Lexer {
\&      my($parser)=shift; # The parser object
\&
\&      for ($parser\->YYData\->{INPUT}) { # Topicalize
\&        m{\eG\es+}gc;
\&        $_ eq \*(Aq\*(Aq and return(\*(Aq\*(Aq,undef);
\&        m{\eG([0\-9]+(?:\e.[0\-9]+)?)}gc and return(\*(AqNUM\*(Aq,$1);
\&        m{\eG([A\-Za\-z][A\-Za\-z0\-9_]*)}gc and return(\*(AqVAR\*(Aq,$1);
\&        m{\eG(.)}gcs and return($1,$1);
\&      }
\&      return(\*(Aq\*(Aq,undef);
\&    }
\&
\&    sub Run {
\&        my($self)=shift;
\&        $self\->YYParse( yylex => \e&_Lexer, yyerror => \e&_Error, );
\&    }
\&  }; # end grammar
\&
\&  our (@all, $uminus);
\&
\&  Parse::Eyapp\->new_grammar( # Create the parser package/class
\&    input=>$grammar,
\&    classname=>\*(AqCalc\*(Aq, # The name of the package containing the parser
\&    firstline=>7       # String $grammar starts at line 7 (for error diagnostics)
\&  );
\&  my $parser = Calc\->new();                # Create a parser
\&  $parser\->YYData\->{INPUT} = "2*\-3+b*0;\-\-2\en"; # Set the input
\&  my $t = $parser\->Run;                    # Parse it!
\&  local $Parse::Eyapp::Node::INDENT=2;
\&  print "Syntax Tree:",$t\->str;
\&
\&  # Let us transform the tree. Define the tree\-regular expressions ..
\&  my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&      { #  Example of support code
\&        my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&      }
\&      constantfold: /TIMES|PLUS|DIV|MINUS/:bin(NUM($x), NUM($y))
\&        => {
\&          my $op = $Op{ref($bin)};
\&          $x\->{attr} = eval  "$x\->{attr} $op $y\->{attr}";
\&          $_[0] = $NUM[0];
\&        }
\&      uminus: UMINUS(NUM($x)) => { $x\->{attr} = \-$x\->{attr}; $_[0] = $NUM }
\&      zero_times_whatever: TIMES(NUM($x), .) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&      whatever_times_zero: TIMES(., NUM($x)) and { $x\->{attr} == 0 } => { $_[0] = $NUM }
\&    },
\&    OUTPUTFILE=> \*(Aqmain.pm\*(Aq
\&  );
\&  $p\->generate(); # Create the tranformations
\&
\&  $t\->s($uminus); # Transform UMINUS nodes
\&  $t\->s(@all);    # constant folding and mult. by zero
\&
\&  local $Parse::Eyapp::Node::INDENT=0;
\&  print "\enSyntax Tree after transformations:\en",$t\->str,"\en";
.Ve
.SH "METHODS"
.IX Header "METHODS"
The \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR objects represent the nodes of the syntax
tree. 
All the node classes build by \f(CW%tree\fR and \f(CW%metatree\fR directives
inherit from \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR and consequently have
acces to the methods provided in such module.
.PP
The examples used in this document can be found in the directory
\&\f(CW\*(C`examples/Node\*(C'\fR accompanying the distribution of Parse::Eyapp.
.SS "Parse::Eyapp::Node\->new"
.IX Subsection "Parse::Eyapp::Node->new"
Nodes are usually created from a Eyapp grammar 
using the \f(CW%tree\fR or \f(CW%metatree\fR
directives. The \f(CW\*(C`Parse::Eyapp::Node\*(C'\fR constructor \f(CW\*(C`new\*(C'\fR
offers an alternative way to create forests.
.PP
This class method can be used to build multiple nodes on a row.
It receives a string describing the tree and optionally a
reference to a subroutine. Such subroutine (called the attribute
handler) is in charge to initialize
the attributes of the just created nodes.
The attribute handler is called with the array of references to the
nodes as they appear in the string from left to right.
.PP
\&\f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR returns an array of pointers to the nodes created
as they appear in the input string from left to right.
In scalar context returns a pointer to the first of these trees.
.PP
The following example (see file \f(CW\*(C`examples/Node/28foldwithnewwithvars.pl\*(C'\fR) of
a treeregexp transformation creates a new \f(CW\*(C`NUM(TERMINAL)\*(C'\fR node
using \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR:
.PP
.Vb 7
\& my $p = Parse::Eyapp::Treeregexp\->new( STRING => q{
\&   {
\&     my %Op = (PLUS=>\*(Aq+\*(Aq, MINUS => \*(Aq\-\*(Aq, TIMES=>\*(Aq*\*(Aq, DIV => \*(Aq/\*(Aq);
\&   }
\&   constantfold: /TIMES|PLUS|MINUS|DIV/(NUM($x), NUM($y))
\&      => {
\&     my $op = $Op{ref($_[0])};
\&
\&     my $res = Parse::Eyapp::Node\->new(
\&       q{NUM(TERMINAL)},
\&       sub {
\&         my ($NUM, $TERMINAL) = @_;
\&         $TERMINAL\->{attr} = eval "$x\->{attr} $op $y\->{attr}";
\&         $TERMINAL\->{token} = \*(AqNUM\*(Aq;
\&       },
\&     );
\&     $_[0] = $res;
\&   }
\&   },
\& );
.Ve
.PP
The call to \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR creates a tree \f(CW\*(C`NUM(TERMINAL)\*(C'\fR
and decorates the \f(CW\*(C`TERMINAL\*(C'\fR leaf with attributes \f(CW\*(C`attr\*(C'\fR
and \f(CW\*(C`token\*(C'\fR. The \f(CW\*(C`constantfold\*(C'\fR transformation substitutes
all the binary operation trees whose children are numbers
for a \f(CW\*(C`NUM(TERMINAL)\*(C'\fR tree holding as attribute the 
number resulting of operating the two numbers.
.PP
The input string can describe more than one tree. Different trees 
are separated by white spaces. Consider the following example
(in \f(CW\*(C`examples/Node/builder.pl\*(C'\fR):
.PP
.Vb 10
\&  $ cat \-n builder.pl
\&     1  #!/usr/bin/perl \-w
\&     2  use strict;
\&     3  use Parse::Eyapp::Node;
\&     4
\&     5  use Data::Dumper;
\&     6  $Data::Dumper::Indent = 1;
\&     7  $Data::Dumper::Purity = 1;
\&     8
\&     9  my $string = shift || \*(AqASSIGN(VAR(TERMINAL), TIMES(NUM(TERMINAL),NUM(TERMINAL)))  \*(Aq;
\&    10  my @t = Parse::Eyapp::Node\->new(
\&    11             $string,
\&    12             sub { my $i = 0; $_\->{n} = $i++ for @_ }
\&    13          );
\&    14
\&    15  print "****************\en";
\&    16  print Dumper(\e@t);
.Ve
.PP
When feed with input \f(CW\*(AqA(C,D) E(F)\*(Aq\fR 
the following forest is built:
.PP
.Vb 10
\&  $ builder.pl \*(AqA(C,D) E(F)\*(Aq
\&  ****************
\&  $VAR1 = [
\&    bless( {
\&      \*(Aqn\*(Aq => 0,
\&      \*(Aqchildren\*(Aq => [
\&        bless( { \*(Aqn\*(Aq => 1, \*(Aqchildren\*(Aq => [] }, \*(AqC\*(Aq ),
\&        bless( { \*(Aqn\*(Aq => 2, \*(Aqchildren\*(Aq => [] }, \*(AqD\*(Aq )
\&      ]
\&    }, \*(AqA\*(Aq ),
\&    {},
\&    {},
\&    bless( {
\&      \*(Aqn\*(Aq => 3,
\&      \*(Aqchildren\*(Aq => [
\&        bless( { \*(Aqn\*(Aq => 4, \*(Aqchildren\*(Aq => [] }, \*(AqF\*(Aq )
\&      ]
\&    }, \*(AqE\*(Aq ),
\&    {}
\&  ];
\&  $VAR1\->[1] = $VAR1\->[0]{\*(Aqchildren\*(Aq}[0];
\&  $VAR1\->[2] = $VAR1\->[0]{\*(Aqchildren\*(Aq}[1];
\&  $VAR1\->[4] = $VAR1\->[3]{\*(Aqchildren\*(Aq}[0];
.Ve
.PP
Thusm, the forest \f(CW@t\fR contains 5 subtrees 
\&\f(CW\*(C`A(C,D), C, D, E(F)\*(C'\fR and \f(CW\*(C`F\*(C'\fR.
.ie n .SS "Directed Acyclic Graphs with ""Parse::Eyapp::Node\->hnew"""
.el .SS "Directed Acyclic Graphs with \f(CWParse::Eyapp::Node\->hnew\fP"
.IX Subsection "Directed Acyclic Graphs with Parse::Eyapp::Node->hnew"
\&\f(CW\*(C`Parse::Eyapp\*(C'\fR provides the method \f(CW\*(C`Parse::Eyapp::Node\->hnew\*(C'\fR
to build \fIDirected Acyclic Graphs\fR (DAGs) instead of trees. They are built using 
\&\fIhashed consing\fR, i.e. \fImemoizing\fR the creation of nodes.
.PP
The method \f(CW\*(C`Parse::Eyapp::Node\->hnew\*(C'\fR works very much like \f(CW\*(C`Parse::Eyapp::Node\->new\*(C'\fR
but if one of the implied trees was previously built, \f(CW\*(C`hnew\*(C'\fR 
returns a reference to the existing one.
.PP
See the following debugger session where several DAGs describing
\&\fItype expressions\fR are built:
.PP
.Vb 10
\&  DB<2> x $a = Parse::Eyapp::Node\->hnew(\*(AqF(X_3(A_3(A_5(INT)), CHAR, A_5(INT)),CHAR)\*(Aq)
\& 0  F=HASH(0x85f6a20)
\&    \*(Aqchildren\*(Aq => ARRAY(0x85e92e4)
\&    |\- 0  X_3=HASH(0x83f55fc)
\&    |     \*(Aqchildren\*(Aq => ARRAY(0x83f5608)
\&    |     |\- 0  A_3=HASH(0x85a0488)
\&    |     |     \*(Aqchildren\*(Aq => ARRAY(0x859fad4)
\&    |     |        0  A_5=HASH(0x85e5d3c)
\&    |     |           \*(Aqchildren\*(Aq => ARRAY(0x83f4120)
\&    |     |              0  INT=HASH(0x83f5200)
\&    |     |                 \*(Aqchildren\*(Aq => ARRAY(0x852ccb4)
\&    |     |                      empty array
\&    |     |\- 1  CHAR=HASH(0x8513564)
\&    |     |     \*(Aqchildren\*(Aq => ARRAY(0x852cad4)
\&    |     |          empty array
\&    |     \`\- 2  A_5=HASH(0x85e5d3c)
\&    |           \-> REUSED_ADDRESS
\&    \`\- 1  CHAR=HASH(0x8513564)
\&          \-> REUSED_ADDRESS
\&  DB<3> x $a\->str
\& 0  \*(AqF(X_3(A_3(A_5(INT)),CHAR,A_5(INT)),CHAR)\*(Aq
.Ve
.PP
The second occurrence of \f(CW\*(C`A_5(INT)\*(C'\fR is labelled \f(CW\*(C`REUSED_ADDRESS\*(C'\fR. The
same occurs with the second instance  of \f(CW\*(C`CHAR\*(C'\fR.
.PP
\&\f(CW\*(C`Parse::Eyapp::Node\->hnew\*(C'\fR
can be more convenient than \f(CW\*(C`new\*(C'\fR 
in some compiler phases and tasks like 
detecting \fIcommon subexpressions\fR
or during \fItype checking\fR. 
See file \f(CW\*(C`Types.eyp\*(C'\fR in \f(CW\*(C`examples/typechecking/Simple\-Types\-XXX.tar.gz\*(C'\fR
for a more comprehensive example.
.ie n .SS "Expanding Directed Acyclic Graphs with ""Parse::Eyapp::Node\->hexpand"""
.el .SS "Expanding Directed Acyclic Graphs with \f(CWParse::Eyapp::Node\->hexpand\fP"
.IX Subsection "Expanding Directed Acyclic Graphs with Parse::Eyapp::Node->hexpand"
Calls to \f(CW\*(C`Parse::Eyapp::Node\->hexpand\*(C'\fR have the syntax
.PP
.Vb 1
\&    $z = Parse::Eyapp::Node\->hexpand(\*(AqCLASS\*(Aq, @children, \e&handler)
.Ve
.PP
Creates a dag of type \f(CW\*(AqCLASS\*(Aq\fR with children \f(CW@children\fR in a way compatible with
\&\f(CW\*(C`hnew\*(C'\fR. The last 
optional argument can be a reference to a sub.  Such sub will be called after the
creation of the \s-1DAG\s0 with a reference to the root of the \s-1DAG\s0 as single argument.
The following session with the debugger illustrates the use of
 \f(CW\*(C`Parse::Eyapp::Node\->hexpand\*(C'\fR. First we create a \s-1DAG\s0 using \f(CW\*(C`hnew\*(C'\fR:
.PP
.Vb 10
\&  pl@nereida:~/Lbook/code/Simple\-Types/script$ perl \-MParse::Eyapp::Node \-wde 0
\&  main::(\-e:1):   0
\&    DB<1> $x = Parse::Eyapp::Node\->hnew(\*(AqA(C(B),C(B))\*(Aq)
\&    DB<2> x $x
\&  0  A=HASH(0x850c850)
\&     \*(Aqchildren\*(Aq => ARRAY(0x850ca30)
\&        0  C=HASH(0x850c928)
\&           \*(Aqchildren\*(Aq => ARRAY(0x850c9e8)
\&              0  B=HASH(0x850c9a0)
\&                 \*(Aqchildren\*(Aq => ARRAY(0x83268c8)
\&                      empty array
\&        1  C=HASH(0x850c928)
\&           \-> REUSED_ADDRESS
.Ve
.PP
We obtain the \f(CW\*(C`REUSED_ADDRESS\*(C'\fR for the second child since
the \f(CWC(B)\fR subtree appears twice.
Now, suppose we want to expand the exsting tree/DAG \f(CWC(B)\fR to \f(CW\*(C`A(C(B))\*(C'\fR. We can do
that using \f(CW\*(C`hexpand\*(C'\fR:
.PP
.Vb 12
\&    DB<3> $y = Parse::Eyapp::Node\->hexpand(\*(AqA\*(Aq, $x\->child(0))
\&    DB<4> x $y
\&  0  A=HASH(0x8592558)
\&     \*(Aqchildren\*(Aq => ARRAY(0x832613c)
\&        0  C=HASH(0x850c928)
\&           \*(Aqchildren\*(Aq => ARRAY(0x850c9e8)
\&              0  B=HASH(0x850c9a0)
\&                 \*(Aqchildren\*(Aq => ARRAY(0x83268c8)
\&                      empty array
\&We get new memory for C<$y>: C<HASH(0x8592558)> is anew address.
\&Assume we want to expand the tree/DAG C<C(B)> to C<A(C(B),C(B))>.
\&We can do it this way:
\&
\&    DB<5> $z = Parse::Eyapp::Node\->hexpand(\*(AqA\*(Aq, $x\->children)
\&    DB<6> x $z
\&  0  A=HASH(0x850c850)
\&     \*(Aqchildren\*(Aq => ARRAY(0x850ca30)
\&        0  C=HASH(0x850c928)
\&           \*(Aqchildren\*(Aq => ARRAY(0x850c9e8)
\&              0  B=HASH(0x850c9a0)
\&                 \*(Aqchildren\*(Aq => ARRAY(0x83268c8)
\&                      empty array
\&        1  C=HASH(0x850c928)
\&           \-> REUSED_ADDRESS
.Ve
.PP
Notice that the address c<0x850c850> for \f(CW$z\fR is the same than the address for \f(CW$x\fR.
No new memory has been allocated for \f(CW$z\fR.
.PP
The following command illu