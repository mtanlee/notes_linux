he name of a class as the first argument.
This is purely a matter of convention, so a class may contain both
methods and subroutines which \fIdon't\fR operate on an object or class.
.PP
Each package contains a special array called \f(CW@ISA\fR. The \f(CW@ISA\fR array
contains a list of that class's parent classes, if any. This array is
examined when Perl does method resolution, which we will cover later.
.PP
It is possible to manually set \f(CW@ISA\fR, and you may see this in older
Perl code. Much older code also uses the base pragma. For new code,
we recommend that you use the parent pragma to declare your parents.
This pragma will take care of setting \f(CW@ISA\fR.  It will also load the
parent classes and make sure that the package doesn't inherit from
itself.
.PP
However the parent classes are set, the package's \f(CW@ISA\fR variable will
contain a list of those parents. This is simply a list of scalars, each
of which is a string that corresponds to a package name.
.PP
All classes inherit from the \s-1UNIVERSAL\s0 class implicitly. The
\&\s-1UNIVERSAL\s0 class is implemented by the Perl core, and provides
several default methods, such as \f(CW\*(C`isa()\*(C'\fR, \f(CW\*(C`can()\*(C'\fR, and \f(CW\*(C`VERSION()\*(C'\fR.
The \f(CW\*(C`UNIVERSAL\*(C'\fR class will \fInever\fR appear in a package's \f(CW@ISA\fR
variable.
.PP
Perl \fIonly\fR provides method inheritance as a built-in feature.
Attribute inheritance is left up the class to implement. See the
\&\*(L"Writing Accessors\*(R" section for details.
.SS "A Method is Simply a Subroutine"
.IX Xref "method"
.IX Subsection "A Method is Simply a Subroutine"
Perl does not provide any special syntax for defining a method. A
method is simply a regular subroutine, and is declared with \f(CW\*(C`sub\*(C'\fR.
What makes a method special is that it expects to receive either an
object or a class name as its first argument.
.PP
Perl \fIdoes\fR provide special syntax for method invocation, the \f(CW\*(C`\->\*(C'\fR operator. We will cover this in more detail later.
.PP
Most methods you write will expect to operate on objects:
.PP
.Vb 2
\&  sub save {
\&      my $self = shift;
\&
\&      open my $fh, \*(Aq>\*(Aq, $self\->path() or die $!;
\&      print {$fh} $self\->data()       or die $!;
\&      close $fh                       or die $!;
\&  }
.Ve
.SS "Method Invocation"
.IX Xref "invocation method arrow ->"
.IX Subsection "Method Invocation"
Calling a method on an object is written as \f(CW\*(C`$object\->method\*(C'\fR.
.PP
The left hand side of the method invocation (or arrow) operator is the
object (or class name), and the right hand side is the method name.
.PP
.Vb 2
\&  my $pod = File\->new( \*(Aqperlobj.pod\*(Aq, $data );
\&  $pod\->save();
.Ve
.PP
The \f(CW\*(C`\->\*(C'\fR syntax is also used when dereferencing a reference.  It
looks like the same operator, but these are two different operations.
.PP
When you call a method, the thing on the left side of the arrow is
passed as the first argument to the method. That means when we call \f(CW\*(C`Critter\->new()\*(C'\fR, the \f(CW\*(C`new()\*(C'\fR method receives the string \f(CW"Critter"\fR
as its first argument. When we call \f(CW\*(C`$fred\->speak()\*(C'\fR, the \f(CW$fred\fR
variable is passed as the first argument to \f(CW\*(C`speak()\*(C'\fR.
.PP
Just as with any Perl subroutine, all of the arguments passed in \f(CW@_\fR
are aliases to the original argument. This includes the object itself.
If you assign directly to \f(CW$_[0]\fR you will change the contents of the
variable that holds the reference to the object. We recommend that you
don't do this unless you know exactly what you're doing.
.PP
Perl knows what package the method is in by looking at the left side of
the arrow. If the left hand side is a package name, it looks for the
method in that package. If the left hand side is an object, then Perl
looks for the method in the package that the object has been blessed
into.
.PP
If the left hand side is neither a package name nor an object, then the
method call will cause an error, but see the section on \*(L"Method Call
Variations\*(R" for more nuances.
.SS "Inheritance"
.IX Xref "inheritance"
.IX Subsection "Inheritance"
We already talked about the special \f(CW@ISA\fR array and the parent
pragma.
.PP
When a class inherits from another class, any methods defined in the
parent class are available to the child class. If you attempt to call a
method on an object that isn't defined in its own class, Perl will also
look for that method in any parent classes it may have.
.PP
.Vb 2
\&  package File::MP3;
\&  use parent \*(AqFile\*(Aq;    # sets @File::MP3::ISA = (\*(AqFile\*(Aq);
\&
\&  my $mp3 = File::MP3\->new( \*(AqAndvari.mp3\*(Aq, $data );
\&  $mp3\->save();
.Ve
.PP
Since we didn't define a \f(CW\*(C`save()\*(C'\fR method in the \f(CW\*(C`File::MP3\*(C'\fR class,
Perl will look at the \f(CW\*(C`File::MP3\*(C'\fR class's parent classes to find the
\&\f(CW\*(C`save()\*(C'\fR method. If Perl cannot find a \f(CW\*(C`save()\*(C'\fR method anywhere in
the inheritance hierarchy, it will die.
.PP
In this case, it finds a \f(CW\*(C`save()\*(C'\fR method in the \f(CW\*(C`File\*(C'\fR class. Note
that the object passed to \f(CW\*(C`save()\*(C'\fR in this case is still a
\&\f(CW\*(C`File::MP3\*(C'\fR object, even though the method is found in the \f(CW\*(C`File\*(C'\fR
class.
.PP
We can override a parent's method in a child class. When we do so, we
can still call the parent class's method with the \f(CW\*(C`SUPER\*(C'\fR
pseudo-class.
.PP
.Vb 2
\&  sub save {
\&      my $self = shift;
\&
\&      say \*(AqPrepare to rock\*(Aq;
\&      $self\->SUPER::save();
\&  }
.Ve
.PP
The \f(CW\*(C`SUPER\*(C'\fR modifier can \fIonly\fR be used for method calls. You can't
use it for regular subroutine calls or class methods:
.PP
.Vb 1
\&  SUPER::save($thing);     # FAIL: looks for save() sub in package SUPER
\&
\&  SUPER\->save($thing);     # FAIL: looks for save() method in class
\&                           #       SUPER
\&
\&  $thing\->SUPER::save();   # Okay: looks for save() method in parent
\&                           #       classes
.Ve
.PP
\fIHow \s-1SUPER\s0 is Resolved\fR
.IX Xref "SUPER"
.IX Subsection "How SUPER is Resolved"
.PP
The \f(CW\*(C`SUPER\*(C'\fR pseudo-class is resolved from the package where the call
is made. It is \fInot\fR resolved based on the object's class. This is
important, because it lets methods at different levels within a deep
inheritance hierarchy each correctly call their respective parent
methods.
.PP
.Vb 1
\&  package A;
\&
\&  sub new {
\&      return bless {}, shift;
\&  }
\&
\&  sub speak {
\&      my $self = shift;
\&
\&      $self\->SUPER::speak();
\&
\&      say \*(AqA\*(Aq;
\&  }
\&
\&  package B;
\&
\&  use parent \*(AqA\*(Aq;
\&
\&  sub speak {
\&      my $self = shift;
\&
\&      $self\->SUPER::speak();
\&
\&      say \*(AqB\*(Aq;
\&  }
\&
\&  package C;
\&
\&  use parent \*(AqB\*(Aq;
\&
\&  sub speak {
\&      my $self = shift;
\&
\&      $self\->SUPER::speak();
\&
\&      say \*(AqC\*(Aq;
\&  }
\&
\&  my $c = C\->new();
\&  $c\->speak();
.Ve
.PP
In this example, we will get the following output:
.PP
.Vb 3
\&  A
\&  B
\&  C
.Ve
.PP
This demonstrates how \f(CW\*(C`SUPER\*(C'\fR is resolved. Even though the object is
blessed into the \f(CW\*(C`C\*(C'\fR class, the \f(CW\*(C`speak()\*(C'\fR method in the \f(CW\*(C`B\*(C'\fR class
can still call \f(CW\*(C`SUPER::speak()\*(C'\fR and expect it to correctly look in the
parent class of \f(CW\*(C`B\*(C'\fR (i.e the class the method call is in), not in the
parent class of \f(CW\*(C`C\*(C'\fR (i.e. the class the object belongs to).
.PP
There are rare cases where this package-based resolution can be a
problem. If you copy a subroutine from one package to another, \f(CW\*(C`SUPER\*(C'\fR
resolution will be done based on the original package.
.PP
\fIMultiple Inheritance\fR
.IX Xref "multiple inheritance"
.IX Subsection "Multiple Inheritance"
.PP
Multiple inheritance often indicates a design problem, but Perl always
gives you enough rope to hang yourself with if you ask for it.
.PP
To declare multiple parents, you simply need to pass multiple class
names to \f(CW\*(C`use parent\*(C'\fR:
.PP
.Vb 1
\&  package MultiChild;
\&
\&  use parent \*(AqParent1\*(Aq, \*(AqParent2\*(Aq;
.Ve
.PP
\fIMethod Resolution Order\fR
.IX Xref "method resolution order mro"
.IX Subsection "Method Resolution Order"
.PP
Method resolution order only matters in the case of multiple
inheritance. In the case of single inheritance, Perl simply looks up
the inheritance chain to find a method:
.PP
.Vb 5
\&  Grandparent
\&    |
\&  Parent
\&    |
\&  Child
.Ve
.PP
If we call a method on a \f(CW\*(C`Child\*(C'\fR object and that method is not defined
in the \f(CW\*(C`Child\*(C'\fR class, Perl will look for that method in the \f(CW\*(C`Parent\*(C'\fR
class and then, if necessary, in the \f(CW\*(C`Grandparent\*(C'\fR class.
.PP
If Perl cannot find the method in any of these classes, it will die
with an error message.
.PP
When a class has multiple parents, the method lookup order becomes more
complicated.
.PP
By default, Perl does a depth-first left-to-right search for a method.
That means it starts with the first parent in the \f(CW@ISA\fR array, and
then searches all of its parents, grandparents, etc. If it fails to
find the method, it then goes to the next parent in the original
class's \f(CW@ISA\fR array and searches from there.
.PP
.Vb 7
\&            SharedGreatGrandParent
\&            /                    \e
\&  PaternalGrandparent       MaternalGrandparent
\&            \e                    /
\&             Father        Mother
\&                   \e      /
\&                    Child
.Ve
.PP
So given the diagram above, Perl will search \f(CW\*(C`Child\*(C'\fR, \f(CW\*(C`Father\*(C'\fR,
\&\f(CW\*(C`PaternalGrandparent\*(C'\fR, \f(CW\*(C`SharedGreatGrandParent\*(C'\fR, \f(CW\*(C`Mother\*(C'\fR, and
finally \f(CW\*(C`MaternalGrandparent\*(C'\fR. This may be a problem because now we're
looking in \f(CW\*(C`SharedGreatGrandParent\*(C'\fR \fIbefore\fR we've checked all its
derived classes (i.e. before we tried \f(CW\*(C`Mother\*(C'\fR and
\&\f(CW\*(C`MaternalGrandparent\*(C'\fR).
.PP
It is possible to ask for a different method resolution order with the
mro pragma.
.PP
.Vb 1
\&  package Child;
\&
\&  use mro \*(Aqc3\*(Aq;
\&  use parent \*(AqFather\*(Aq, \*(AqMother\*(Aq;
.Ve
.PP
This pragma lets you switch to the \*(L"C3\*(R" resolution order. In simple
terms, \*(L"C3\*(R" order ensures that shared parent classes are never searched
before child classes, so Perl will now search: \f(CW\*(C`Child\*(C'\fR, \f(CW\*(C`Father\*(C'\fR,
\&\f(CW\*(C`PaternalGrandparent\*(C'\fR, \f(CW\*(C`Mother\*(C'\fR \f(CW\*(C`MaternalGrandparent\*(C'\fR, and finally
\&\f(CW\*(C`SharedGreatGrandParent\*(C'\fR. Note however that this is not
\&\*(L"breadth-first\*(R" searching: All the \f(CW\*(C`Father\*(C'\fR ancestors (except the
common ancestor) are searched before any of the \f(CW\*(C`Mother\*(C'\fR ancestors are
considered.
.PP
The C3 order also lets you call methods in sibling classes with the
\&\f(CW\*(C`next\*(C'\fR pseudo-class. See the mro documentation for more details on
this feature.
.PP
\fIMethod Resolution Caching\fR
.IX Subsection "Method Resolution Caching"
.PP
When Perl searches for a method, it caches the lookup so that future
calls to the method do not need to search for it again. Changing a
class's parent class or adding subroutines to a class will invalidate
the cache for that class.
.PP
The mro pragma provides some functions for manipulating the method
cache directly.
.SS "Writing Constructors"
.IX Xref "constructor"
.IX Subsection "Writing Constructors"
As we mentioned earlier, Perl provides no special constructor syntax.
This means that a class must implement its own constructor. A
constructor is simply a class method that returns a reference to a new
object.
.PP
The constructor can also accept additional parameters that define the
object. Let's write a real constructor for the \f(CW\*(C`File\*(C'\fR class we used
earlier:
.PP
.Vb 1
\&  package File;
\&
\&  sub new {
\&      my $class = shift;
\&      my ( $path, $data ) = @_;
\&
\&      my $self = bless {
\&          path => $path,
\&          data => $data,
\&      }, $class;
\&
\&      return $self;
\&  }
.Ve
.PP
As you can see, we've stored the path and file data in the object
itself. Remember, under the hood, this object is still just a hash.
Later, we'll write accessors to manipulate this data.
.PP
For our File::MP3 class, we can check to make sure that the path we're
given ends with \*(L".mp3\*(R":
.PP
.Vb 1
\&  package File::MP3;
\&
\&  sub new {
\&      my $class = shift;
\&      my ( $path, $data ) = @_;
\&
\&      die "You cannot create a File::MP3 without an mp3 extension\en"
\&          unless $path =~ /\e.mp3\ez/;
\&
\&      return $class\->SUPER::new(@_);
\&  }
.Ve
.PP
This constructor lets its parent class do the actual object
construction.
.SS "Attributes"
.IX Xref "attribute"
.IX Subsection "Attributes"
An attribute is a piece of data belonging to a particular object.
Unlike most object-oriented languages, Perl provides no special syntax
or support for declaring and manipulating attributes.
.PP
Attributes are often stored in the object itself. For example, if the
object is an anonymous hash, we can store the attribute values in the
hash using the attribute name as the key.
.PP
While it's possible to refer directly to these hash keys outside of the
class, it's considered a best practice to wrap all access to the
attribute with accessor methods.
.PP
This has several advantages. Accessors make it easier to change the
implementation of an object later while still preserving the original
\&\s-1API\s0.
.PP
An accessor lets you add additional code around attribute access. For
example, you could apply a default to an attribute that wasn't set in
the constructor, or you could validate that a new value for the
attribute is acceptable.
.PP
Finally, using accessors makes inheritance much simpler. Subclasses can
use the accessors rather than having to know how a parent class is
implemented internally.
.PP
\fIWriting Accessors\fR
.IX Xref "accessor"
.IX Subsection "Writing Accessors"
.PP
As with constructors, Perl provides no special accessor declaration
syntax, so classes must provide explicitly written accessor methods.
There are two common types of accessors, read-only and read-write.
.PP
A simple read-only accessor simply gets the value of a single
attribute:
.PP
.Vb 2
\&  sub path {
\&      my $self = shift;
\&
\&      return $self\->{path};
\&  }
.Ve
.PP
A read-write accessor will allow the caller to set the value as well as
get it:
.PP
.Vb 2
\&  sub path {
\&      my $self = shift;
\&
\&      if (@_) {
\&          $self\->{path} = shift;
\&      }
\&
\&      return $self\->{path};
\&  }
.Ve
.SS "An Aside About Smarter and Safer Code"
.IX Subsection "An Aside About Smarter and Safer Code"
Our constructor and accessors are not very smart. They don't check that
a \f(CW$path\fR is defined, nor do they check that a \f(CW$path\fR is a valid
filesystem path.
.PP
Doing these checks by hand can quickly become tedious. Writing a bunch
of accessors by hand is also incredibly tedious. There are a lot of
modules on \s-1CPAN\s0 that can help you write safer and more concise code,
including the modules we recommend in perlootut.
.SS "Method Call Variations"
.IX Xref "method"
.IX Subsection "Method Call Variations"
Perl supports several other ways to call methods besides the \f(CW\*(C`$object\->method()\*(C'\fR usage we've seen so far.
.PP
\fIMethod Names as Strings\fR
.IX Subsection "Method Names as Strings"
.PP
Perl lets you use a scalar variable containing a string as a method
name:
.PP
.Vb 1
\&  my $file = File\->new( $path, $data );
\&
\&  my $method = \*(Aqsave\*(Aq;
\&  $file\->$method();
.Ve
.PP
This works exactly like calling \f(CW\*(C`$file\->save()\*(C'\fR. This can be very
useful for writing dynamic code. For example, it allows you to pass a
method name to be called as a parameter to another method.
.PP
\fIClass Names as Strings\fR
.IX Subsection "Class Names as Strings"
.PP
Perl also lets you use a scalar containing a string as a class name:
.PP
.Vb 1
\&  my $class = \*(AqFile\*(Aq;
\&
\&  my $file = $class\->new( $path, $data );
.Ve
.PP
Again, this allows for very dynamic code.
.PP
\fISubroutine References as Methods\fR
.IX Subsection "Subroutine References as Methods"
.PP
You can also use a subroutine reference as a method:
.PP
.Vb 2
\&  my $sub = sub {
\&      my $self = shift;
\&
\&      $self\->save();
\&  };
\&
\&  $file\->$sub();
.Ve
.PP
This is exactly equivalent to writing \f(CW\*(C`$sub\->($file)\*(C'\fR. You may see
this idiom in the wild combined with a call to \f(CW\*(C`can\*(C'\fR:
.PP
.Vb 3
\&  if ( my $meth = $object\->can(\*(Aqfoo\*(Aq) ) {
\&      $object\->$meth();
\&  }
.Ve
.PP
\fIDeferencing Method Call\fR
.IX Subsection "Deferencing Method Call"
.PP
Perl also lets you use a dereferenced scalar reference in a method
call. That's a mouthful, so let's look at some code:
.PP
.Vb 4
\&  $file\->${ \e\*(Aqsave\*(Aq };
\&  $file\->${ returns_scalar_ref() };
\&  $file\->${ \e( returns_scalar() ) };
\&  $file\->${ returns_sub_ref() };
.Ve
.PP
This works if the dereference produces a string \fIor\fR a subroutine
reference.
.PP
\fIMethod Calls on Filehandles\fR
.IX Subsection "Method Calls on Filehandles"
.PP
Under the hood, Perl filehandles are instances of the \f(CW\*(C`IO::Handle\*(C'\fR or
\&\f(CW\*(C`IO::File\*(C'\fR class. Once you have an open filehandle, you can call
methods on it. Additionally, you can call methods on the \f(CW\*(C`STDIN\*(C'\fR,
\&\f(CW\*(C`STDOUT\*(C'\fR, and \f(CW\*(C`STDERR\*(C'\fR filehandles.
.PP
.Vb 3
\&  open my $fh, \*(Aq>\*(Aq, \*(Aqpath/to/file\*(Aq;
\&  $fh\->autoflush();
\&  $fh\->print(\*(Aqcontent\*(Aq);
\&
\&  STDOUT\->autoflush();
.Ve
.SS "Invoking Class Methods"
.IX Xref "invocation"
.IX Subsection "Invoking Class Methods"
Because Perl allows you to use barewords for package names and
subroutine names, it sometimes interprets a bareword's meaning
incorrectly. For example, the construct \f(CW\*(C`Class\->new()\*(C'\fR can be
interpreted as either \f(CW\*(C`\*(AqClass\*(Aq\->new()\*(C'\fR or \f(CW\*(C`Class()\->new()\*(C'\fR.
In English, that second interpretation reads as \*(L"call a subroutine
named \fIClass()\fR, then call \fInew()\fR as a method on the return value of
\&\fIClass()\fR\*(R". If there is a subroutine named \f(CW\*(C`Class()\*(C'\fR in the current
namespace, Perl will always interpret \f(CW\*(C`Class\->new()\*(C'\fR as the second
alternative: a call to \f(CW\*(C`new()\*(C'\fR on the object  returned by a call to
\&\f(CW\*(C`Class()\*(C'\fR
.PP
You can force Perl to use the first interpretation (i.e. as a method
call on the class named \*(L"Class\*(R") in two ways. First, you can append a
\&\f(CW\*(C`::\*(C'\fR to the class name:
.PP
.Vb 1
\&    Class::\->new()
.Ve
.PP
Perl will always interpret this as a method call.
.PP
Alternatively, you can quote the class name:
.PP
.Vb 1
\&    \*(AqClass\*(Aq\->new()
.Ve
.PP
Of course, if the class name is in a scalar Perl will do the right
thing as well:
.PP
.Vb 2
\&    my $class = \*(AqClass\*(Aq;
\&    $class\->new();
.Ve
.PP
\fIIndirect Object Syntax\fR
.IX Xref "indirect object"
.IX Subsection "Indirect Object Syntax"
.PP
\&\fBOutside of the file handle case, use of this syntax is discouraged,
as it can confuse the Perl interpreter. See below for more details.\fR
.PP
Perl suports another method invocation syntax called \*(L"indirect object\*(R"
notation. This syntax is called \*(L"indirect\*(R" because the method comes
before the object it is being invoked on.
.PP
This syntax can be used with any class or object method:
.PP
.Vb 2
\&    my $file = new File $path, $data;
\&    save $file;
.Ve
.PP
We recommend that you avoid this syntax, for several reasons.
.PP
First, it can be confusing to read. In the above example, it's not
clear if \f(CW\*(C`save\*(C'\fR is a method provided by the \f(CW\*(C`File\*(C'\fR class or simply a
subroutine that expects a file object as its first argument.
.PP
When used with class methods, the problem is even worse. Because Perl
allows subroutine names to be written as barewords, Perl has to guess
whether the bareword after the method is a class name or subroutine
name. In other words, Perl can resolve the syntax as either \f(CW\*(C`File\->new( $path, $data )\*(C'\fR \fBor\fR \f(CW\*(C`new( File( $path, $data ) )\*(C'\fR.
.PP
To parse this code, Perl uses a heuristic based on what package names
it has seen, what subroutines exist in the current package, what
barewords it has previously seen, and other input. Needless to say,
heuristics can produce very surprising results!
.PP
Older documentation (and some \s-1CPAN\s0 modules) encouraged this syntax,
particularly for constructors, so you may still find it in the wild.
However, we encourage you to avoid using it in new code.
.PP
You can force Perl to interpret the bareword as a class name by
appending \*(L"::\*(R" to it, like we saw earlier:
.PP
.Vb 1
\&  my $file = new File:: $path, $data;
.Ve
.ie n .SS """bless"", ""blessed"", and ""ref"""
.el .SS "\f(CWbless\fP, \f(CWblessed\fP, and \f(CWref\fP"
.IX Subsection "bless, blessed, and ref"
As we saw earlier, an object is simply a data structure that has been
blessed into a class via the \f(CW\*(C`bless\*(C'\fR function. The \f(CW\*(C`bless\*(C'\fR function
can take either one or two arguments:
.PP
.Vb 2
\&  my $object = bless {}, $class;
\&  my $object = bless {};
.Ve
.PP
In the first form, the anonymous hash is being blessed into the class
in \f(CW$class\fR. In the second form, the anonymous hash is blessed into
the current package.
.PP
The second form is strongly discouraged, because it breaks the ability
of a subclass to reuse the parent's constructor, but you may still run
across it in existing code.
.PP
If you want to know whether a particular scalar refers to an object,
you can use the \f(CW\*(C`blessed\*(C'\fR function exported by Scalar::Util, which
is shipped with the Perl core.
.PP
.Vb 1
\&  use Scalar::Util \*(Aqblessed\*(Aq;
\&
\&  if ( defined blessed($thing) ) { ... }
.Ve
.PP
If \f(CW$thing\fR refers to an object, then this function returns the name
of the package the object has been blessed into. If \f(CW$thing\fR doesn't
contain a reference to a blessed object, the \f(CW\*(C`blessed\*(C'\fR function
returns \f(CW\*(C`undef\*(C'\fR.
.PP
Note that \f(CW\*(C`blessed($thing)\*(C'\fR will also return false if \f(CW$thing\fR has
been blessed into a class named \*(L"0\*(R". This is a possible, but quite
pathological. Don't create a class named \*(L"0\*(R" unless you know what
you're doing.
.PP
Similarly, Perl's built-in \f(CW\*(C`ref\*(C'\fR function treats a reference to a
blessed object specially. If you call \f(CW\*(C`ref($thing)\*(C'\fR and \f(CW$thing\fR
holds a reference to an object, it will return the name of the class
that the object has been blessed into.
.PP
If you simply want to check that a variable contains an object
reference, we recommend that you use \f(CW\*(C`defined blessed($object)\*(C'\fR, since
\&\f(CW\*(C`ref\*(C'\fR returns true values for all references, not just objects.
.SS "The \s-1UNIVERSAL\s0 Class"
.IX Xref "UNIVERSAL"
.IX Subsection "The UNIVERSAL Class"
All classes automatically inherit from the \s-1UNIVERSAL\s0 class, which is
built-in to the Perl core. This class provides a number of methods, all
of which can be called on either a class or an object. You can also
choose to override some of these methods in your class. If you do so,
we recommend that you follow the built-in semantics described below.
.IP "isa($class)" 4
.IX Xref "isa"
.IX Item "isa($class)"
The \f(CW\*(C`isa\*(C'\fR method returns \fItrue\fR if the object is a member of the
class in \f(CW$class\fR, or a member of a subclass of \f(CW$class\fR.
.Sp
If you override this method, it should never throw an exception.
.IP "\s-1DOES\s0($role)" 4
.IX Xref "DOES"
.IX Item "DOES($role)"
The \f(CW\*(C`DOES\*(C'\fR method returns \fItrue\fR if its object claims to perform the
role \f(CW$role\fR. By default, this is equivalent to \f(CW\*(C`isa\*(C'\fR. This method is
provided for use by object system extensions that implement roles, like
\&\f(CW\*(C`Moose\*(C'\fR and \f(CW\*(C`Role::Tiny\*(C'\fR.
.Sp
You can also override \f(CW\*(C`DOES\*(C'\fR directly in your own classes. If you
override this method, it should never throw an exception.
.IP "can($method)" 4
.IX Xref "can"
.IX Item "can($method)"
The \f(CW\*(C`can\*(C'\fR method checks to see if the class or object it was called on
has a method named \f(CW$method\fR. This checks for the method in the class
and all of its parents. If the method exists, then a reference to the
subroutine is returned. If it does not then \f(CW\*(C`undef\*(C'\fR is returned.
.Sp
If your class responds to method calls via \f(CW\*(C`AUTOLOAD\*(C'\fR, you may want to
overload \f(CW\*(C`can\*(C'\fR to return a subroutine reference for methods which your
\&\f(CW\*(C`AUTOLOAD\*(C'\fR method handles.
.Sp
If you override this method, it should never throw an exception.
.IP "\s-1VERSION\s0($need)" 4
.IX Xref "VERSION"
.IX Item "VERSION($need)"
The \f(CW\*(C`VERSION\*(C'\fR method returns the version number of the class
(package).
.Sp
If the \f(CW$need\fR argument is given then it will check that the current
version (as defined by the \f(CW$VERSION\fR variable in the package) is greater
than or equal to \f(CW$need\fR; it will die if this is not the case. This
method is called automatically by the \f(CW\*(C`VERSION\*(C'\fR form of \f(CW\*(C`use\*(C'\fR.
.Sp
.Vb 3
\&    use Package 1.2 qw(some imported subs);
\&    # implies:
\&    Package\->VERSION(1.2);
.Ve
.Sp
We recommend that you use this method to access another package's
version, rather than looking directly at \f(CW$Package::VERSION\fR. The
package you are looking at could have overridden the \f(CW\*(C`VERSION\*(C'\fR method.
.Sp
We also recommend using this method to check whether a module has a
sufficient version. The internal implementation uses the version
module to make sure that different types of version numbers are
compared correctly.
.SS "\s-1AUTOLOAD\s0"
.IX Xref "AUTOLOAD"
.IX Subsection "AUTOLOAD"
If you call a method that doesn't exist in a class, Perl will throw an
error. However, if that class or any of its parent classes defines an
\&\f(CW\*(C`AUTOLOAD\*(C'\fR method, that \f(CW\*(C`AUTOLOAD\*(C'\fR method is called instead.
.PP
\&\f(CW\*(C`AUTOLOAD\*(C'\fR is called as a regular method, and the caller will not know
the difference. Whatever value your \f(CW\*(C`AUTOLOAD\*(C'\fR method returns is
returned to the caller.
.PP
The fully qualified method name that was called is available in the
\&\f(CW$AUTOLOAD\fR package global for your class. Since this is a global, if
you want to refer to do it without a package name prefix under \f(CW\*(C`strict
\&\*(Aqvars\*(Aq\*(C'\fR, you need to declare it.
.PP
.Vb 5
\&  # XXX \- this is a terrible way to implement accessors, but it makes
\&  # for a simple example.
\&  our $AUTOLOAD;
\&  sub AUTOLOAD {
\&      my $self = shift;
\&
\&      # Remove qualifier from original method name...
\&      my $called =  $AUTOLOAD =~ s/.*:://r;
\&
\&      # Is there an attribute of that name?
\&      die "No such attribute: $called"
\&          unless exists $self\->{$called};
\&
\&      # If so, return it...
\&      return $self\->{$called};
\&  }
\&
\&  sub DESTROY { } # see below
.Ve
.PP
Without the \f(CW\*(C`our $AUTOLOAD\*(C'\fR declaration, this code will not compile
under the strict pragma.
.PP
As the comment says, this is not a good way to implement accessors. 
It's slow and too clever by far. However, you may see this as a way to
provide accessors in older Perl code. See perlootut for
recommendations on \s-1OO\s0 coding in Perl.
.PP
If your class does have an \f(CW\*(C`AUTOLOAD\*(C'\fR method, we strongly recommend
that you override \f(CW\*(C`can\*(C'\fR in your class as well. Your overridden \f(CW\*(C`can\*(C'\fR
method should return a subroutine reference for any method that your
\&\f(CW\*(C`AUTOLOAD\*(C'\fR responds to.
.SS "Destructors"
.IX Xref "destructor DESTROY"
.IX Subsection "Destructors"
When the last reference to an object goes away, the object is
destroyed. If you only have one reference to an object stored in a
lexical scalar, the object is destroyed when that scalar goes out of
scope. If you store the object in a package global, that object may not
go out of scope until the program exits.
.PP
If you want to do something when the object is destroyed, you can
define a \f(CW\*(C`DESTROY\*(C'\fR method in your class. This method will always be
called by Perl at the appropriate time, unless the method is empty.
.PP
This is called just like any other method, with the object as the first
argument. It does not receive any additional arguments. However, the
\&\f(CW$_[0]\fR variable will be read-only in the destructor, so you cannot
assign a value to it.
.PP
If your \f(CW\*(C`DESTROY\*(C'\fR method throws an error, this error will be ignored.
It will not be sent to \f(CW\*(C`STDERR\*(C'\fR and it will not cause the program to
die. However, if your destructor is running inside an \f(CW\*(C`eval {}\*(C'\fR block,
then the error will change the value of \f(CW$@\fR.
.PP
Because \f(CW\*(C`DESTROY\*(C'\fR methods can be called at any time, you should
localize any global variables you might update in your \f(CW\*(C`DESTROY\*(C'\fR. In
particular, if you use \f(CW\*(C`eval {}\*(C'\fR you should localize \f(CW$@\fR, and if you
use \f(CW\*(C`system\*(C'\fR or backticks, you should localize \f(CW$?\fR.
.PP
If you define an \f(CW\*(C`AUTOLOAD\*(C'\fR in your class, then Perl will call your
\&\f(CW\*(C`AUTOLOAD\*(C'\fR to handle the \f(CW\*(C`DESTROY\*(C'\fR method. You can prevent this by
defining an empty \f(CW\*(C`DESTROY\*(C'\fR, like we did in the autoloading example.
You can also check the value of \f(CW$AUTOLOAD\fR and return without doing
anything when called to handle \f(CW\*(C`DESTROY\*(C'\fR.
.PP
\fIGlobal Destruction\fR
.IX Subsection "Global Destruction"
.PP
The order in which objects are destroyed during the global destruction
before the program exits is unpredictable. This means that any objects
contained by your object may already have been destroyed. You should
check that a contained object is defined before calling a method on it:
.PP
.Vb 2
\&  sub DESTROY {
\&      my $self = shift;
\&
\&      $self\->{handle}\->close() if $self\->{handle};
\&  }
.Ve
.PP
You can use the \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR variable to detect if you are
currently in the global destruction phase:
.PP
.Vb 2
\&  sub DESTROY {
\&      my $self = shift;
\&
\&      return if ${^GLOBAL_PHASE} eq \*(AqDESTRUCT\*(Aq;
\&
\&      $self\->{handle}\->close();
\&  }
.Ve
.PP
Note that this variable was added in Perl 5.14.0. If you want to detect
the global destruction phase on older versions of Perl, you can use the
\&\f(CW\*(C`Devel::GlobalDestruction\*(C'\fR module on \s-1CPAN\s0.
.PP
If your \f(CW\*(C`DESTROY\*(C'\fR method issues a warning during global destruction,
the Perl interpreter will append the string \*(L" during global
destruction\*(R" the warning.
.PP
During global destruction, Perl will always garbage collect objects
before unblessed references. See \*(L"\s-1PERL_DESTRUCT_LEVEL\s0\*(R" in perlhacktips
for more information about global destruction.
.SS "Non-Hash Objects"
.IX Subsection "Non-Hash Objects"
All the examples so far have shown objects based on a blessed hash.
However, it's possible to bless any type of data structure or referent,
including scalars, globs, and subroutines. You may see this sort of
thing when looking at code in the wild.
.PP
Here's an example of a module as a blessed scalar:
.PP
.Vb 1
\&  package Time;
\&
\&  use strict;
\&  use warnings;
\&
\&  sub new {
\&      my $class = shift;
\&
\&      my $time = time;
\&      return bless \e$time, $class;
\&  }
\&
\&  sub epoch {
\&      my $self = shift;
\&      return ${ $self };
\&  }
\&
\&  my $time = Time\->new();
\&  print $time\->epoch();
.Ve
.SS "Inside-Out objects"
.IX Subsection "Inside-Out objects"
In the past, the Perl community experimented with a technique called
\&\*(L"inside-out objects\*(R". An inside-out object stores its data outside of
the object's reference, indexed on a unique property of the object,
such as its memory address, rather than in the object itself. This has
the advantage of enforcing the encapsulation of object attributes,
since their data is not stored in the object itself.
.PP
This technique was popular for a while (and was recommended in Damian
Conway's \fIPerl Best Practices\fR), but never achieved universal
adoption. The Object::InsideOut module on \s-1CPAN\s0 provides a
comprehensive implementation of this technique, and you may see it or
other inside-out modules in the wild.
.PP
Here is a simple example of the technique, using the
Hash::Util::FieldHash core module. This module was added to the core
to support inside-out object implementations.
.PP
.Vb 1
\&  package Time;
\&
\&  use strict;
\&  use warnings;
\&
\&  use Hash::Util::FieldHash \*(Aqfieldhash\*(Aq;
\&
\&  fieldhash my %time_for;
\&
\&  sub new {
\&      my $class = shift;
\&
\&      my $self = bless \e( my $object ), $class;
\&
\&      $time_for{$self} = time;
\&
\&      return $self;
\&  }
\&
\&  sub epoch {
\&      my $self = shift;
\&
\&      return $time_for{$self};
\&  }
\&
\&  my $time = Time\->new;
\&  print $time\->epoch;
.Ve
.SS "Pseudo-hashes"
.IX Subsection "Pseudo-hashes"
The pseudo-hash feature was an experimental feature introduced in
earlier versions of Perl and removed in 5.10.0. A pseudo-hash is an
array reference which can be accessed using named keys like a hash. You
may run in to some code in the wild which uses it. See the fields
pragma for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
A kinder, gentler tutorial on object-oriented programming in Perl can
be found in perlootut. You should also check out perlmodlib for
some style guides on constructing both modules and classes.
                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlobj5.18.1                                0100644 0001750 0001750 00000126105 12566207442 022716  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOBJ 1"
.TH PERLOBJ 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlobj \- Perl object reference
.IX Xref "object OOP"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides a reference for Perl's object orientation
features. If you're looking for an introduction to object-oriented
programming in Perl, please see perlootut.
.PP
In order to understand Perl objects, you first need to understand
references in Perl. See perlref for details.
.PP
This document describes all of Perl's object-oriented (\s-1OO\s0) features
from the ground up. If you're just looking to write some
object-oriented code of your own, you are probably better served by
using one of the object systems from \s-1CPAN\s0 described in perlootut.
.PP
If you're looking to write your own object system, or you need to
maintain code which implements objects from scratch then this document
will help you understand exactly how Perl does object orientation.
.PP
There are a few basic principles which define object oriented Perl:
.IP "1." 4
An object is simply a data structure that knows to which class it
belongs.
.IP "2." 4
A class is simply a package. A class provides methods that expect to
operate on objects.
.IP "3." 4
A method is simply a subroutine that expects a reference to an object
(or a package name, for class methods) as the first argument.
.PP
Let's look at each of these principles in depth.
.SS "An Object is Simply a Data Structure"
.IX Xref "object bless constructor new"
.IX Subsection "An Object is Simply a Data Structure"
Unlike many other languages which support object orientation, Perl does
not provide any special syntax for constructing an object. Objects are
merely Perl data structures (hashes, arrays, scalars, filehandles,
etc.) that have been explicitly associated with a particular class.
.PP
That explicit association is created by the built-in \f(CW\*(C`bless\*(C'\fR function,
which is typically used within the \fIconstructor\fR subroutine of the
class.
.PP
Here is a simple constructor:
.PP
.Vb 1
\&  package File;
\&
\&  sub new {
\&      my $class = shift;
\&
\&      return bless {}, $class;
\&  }
.Ve
.PP
The name \f(CW\*(C`new\*(C'\fR isn't special. We could name our constructor something
else:
.PP
.Vb 1
\&  package File;
\&
\&  sub load {
\&      my $class = shift;
\&
\&      return bless {}, $class;
\&  }
.Ve
.PP
The modern convention for \s-1OO\s0 modules is to always use \f(CW\*(C`new\*(C'\fR as the
name for the constructor, but there is no requirement to do so. Any
subroutine that blesses a data structure into a class is a valid
constructor in Perl.
.PP
In the previous examples, the \f(CW\*(C`{}\*(C'\fR code creates a reference to an
empty anonymous hash. The \f(CW\*(C`bless\*(C'\fR function then takes that reference
and associates the hash with the class in \f(CW$class\fR. In the simplest
case, the \f(CW$class\fR variable will end up containing the string \*(L"File\*(R".
.PP
We can also use a variable to store a reference to the data structure
that is being blessed as our object:
.PP
.Vb 2
\&  sub new {
\&      my $class = shift;
\&
\&      my $self = {};
\&      bless $self, $class;
\&
\&      return $self;
\&  }
.Ve
.PP
Once we've blessed the hash referred to by \f(CW$self\fR we can start
calling methods on it. This is useful if you want to put object
initialization in its own separate method:
.PP
.Vb 2
\&  sub new {
\&      my $class = shift;
\&
\&      my $self = {};
\&      bless $self, $class;
\&
\&      $self\->_initialize();
\&
\&      return $self;
\&  }
.Ve
.PP
Since the object is also a hash, you can treat it as one, using it to
store data associated with the object. Typically, code inside the class
can treat the hash as an accessible data structure, while code outside
the class should always treat the object as opaque. This is called
\&\fBencapsulation\fR. Encapsulation means that the user of an object does
not have to know how it is implemented. The user simply calls
documented methods on the object.
.PP
Note, however, that (unlike most other \s-1OO\s0 languages) Perl does not
ensure or enforce encapsulation in any way. If you want objects to
actually \fIbe\fR opaque you need to arrange for that yourself. This can
be done in a varierty of ways, including using \*(L"Inside-Out objects\*(R"
or modules from \s-1CPAN.\s0
.PP
\fIObjects Are Blessed; Variables Are Not\fR
.IX Subsection "Objects Are Blessed; Variables Are Not"
.PP
When we bless something, we are not blessing the variable which
contains a reference to that thing, nor are we blessing the reference
that the variable stores; we are blessing the thing that the variable
refers to (sometimes known as the \fIreferent\fR). This is best
demonstrated with this code:
.PP
.Vb 1
\&  use Scalar::Util \*(Aqblessed\*(Aq;
\&
\&  my $foo = {};
\&  my $bar = $foo;
\&
\&  bless $foo, \*(AqClass\*(Aq;
\&  print blessed( $bar );      # prints "Class"
\&
\&  $bar = "some other value";
\&  print blessed( $bar );      # prints undef
.Ve
.PP
When we call \f(CW\*(C`bless\*(C'\fR on a variable, we are actually blessing the
underlying data structure that the variable refers to. We are not
blessing the reference itself, nor the variable that contains that
reference. That's why the second call to \f(CW\*(C`blessed( $bar )\*(C'\fR returns
false. At that point \f(CW$bar\fR is no longer storing a reference to an
object.
.PP
You will sometimes see older books or documentation mention \*(L"blessing a
reference\*(R" or describe an object as a \*(L"blessed reference\*(R", but this is
incorrect. It isn't the reference that is blessed as an object; it's
the thing the reference refers to (i.e. the referent).
.SS "A Class is Simply a Package"
.IX Xref "class package @ISA inheritance"
.IX Subsection "A Class is Simply a Package"
Perl does not provide any special syntax for class definitions. A
package is simply a namespace containing variables and subroutines. The
only difference is that in a class, the subroutines may expect a
reference to an object or the name of a class as the first argument.
This is purely a matter of convention, so a class may contain both
methods and subroutines which \fIdon't\fR operate on an object or class.
.PP
Each package contains a special array called \f(CW@ISA\fR. The \f(CW@ISA\fR array
contains a list of that class's parent classes, if any. This array is
examined when Perl does method resolution, which we will cover later.
.PP
It is possible to manually set \f(CW@ISA\fR, and you may see this in older
Perl code. Much older code also uses the base pragma. For new code,
we recommend that you use the parent pragma to declare your parents.
This pragma will take care of setting \f(CW@ISA\fR. It will also load the
parent classes and make sure that the package doesn't inherit from
itself.
.PP
However the parent classes are set, the package's \f(CW@ISA\fR variable will
contain a list of those parents. This is simply a list of scalars, each
of which is a string that corresponds to a package name.
.PP
All classes inherit from the \s-1UNIVERSAL\s0 class implicitly. The
\&\s-1UNIVERSAL\s0 class is implemented by the Perl core, and provides
several default methods, such as \f(CW\*(C`isa()\*(C'\fR, \f(CW\*(C`can()\*(C'\fR, and \f(CW\*(C`VERSION()\*(C'\fR.
The \f(CW\*(C`UNIVERSAL\*(C'\fR class will \fInever\fR appear in a package's \f(CW@ISA\fR
variable.
.PP
Perl \fIonly\fR provides method inheritance as a built-in feature.
Attribute inheritance is left up the class to implement. See the
\&\*(L"Writing Accessors\*(R" section for details.
.SS "A Method is Simply a Subroutine"
.IX Xref "method"
.IX Subsection "A Method is Simply a Subroutine"
Perl does not provide any special syntax for defining a method. A
method is simply a regular subroutine, and is declared with \f(CW\*(C`sub\*(C'\fR.
What makes a method special is that it expects to receive either an
object or a class name as its first argument.
.PP
Perl \fIdoes\fR provide special syntax for method invocation, the \f(CW\*(C`\->\*(C'\fR operator. We will cover this in more detail later.
.PP
Most methods you write will expect to operate on objects:
.PP
.Vb 2
\&  sub save {
\&      my $self = shift;
\&
\&      open my $fh, \*(Aq>\*(Aq, $self\->path() or die $!;
\&      print {$fh} $self\->data()       or die $!;
\&      close $fh                       or die $!;
\&  }
.Ve
.SS "Method Invocation"
.IX Xref "invocation method arrow ->"
.IX Subsection "Method Invocation"
Calling a method on an object is written as \f(CW\*(C`$object\->method\*(C'\fR.
.PP
The left hand side of the method invocation (or arrow) operator is the
object (or class name), and the right hand side is the method name.
.PP
.Vb 2
\&  my $pod = File\->new( \*(Aqperlobj.pod\*(Aq, $data );
\&  $pod\->save();
.Ve
.PP
The \f(CW\*(C`\->\*(C'\fR syntax is also used when dereferencing a reference. It
looks like the same operator, but these are two different operations.
.PP
When you call a method, the thing on the left side of the arrow is
passed as the first argument to the method. That means when we call \f(CW\*(C`Critter\->new()\*(C'\fR, the \f(CW\*(C`new()\*(C'\fR method receives the string \f(CW"Critter"\fR
as its first argument. When we call \f(CW\*(C`$fred\->speak()\*(C'\fR, the \f(CW$fred\fR
variable is passed as the first argument to \f(CW\*(C`speak()\*(C'\fR.
.PP
Just as with any Perl subroutine, all of the arguments passed in \f(CW@_\fR
are aliases to the original argument. This includes the object itself.
If you assign directly to \f(CW$_[0]\fR you will change the contents of the
variable that holds the reference to the object. We recommend that you
don't do this unless you know exactly what you're doing.
.PP
Perl knows what package the method is in by looking at the left side of
the arrow. If the left hand side is a package name, it looks for the
method in that package. If the left hand side is an object, then Perl
looks for the method in the package that the object has been blessed
into.
.PP
If the left hand side is neither a package name nor an object, then the
method call will cause an error, but see the section on \*(L"Method Call
Variations\*(R" for more nuances.
.SS "Inheritance"
.IX Xref "inheritance"
.IX Subsection "Inheritance"
We already talked about the special \f(CW@ISA\fR array and the parent
pragma.
.PP
When a class inherits from another class, any methods defined in the
parent class are available to the child class. If you attempt to call a
method on an object that isn't defined in its own class, Perl will also
look for that method in any parent classes it may have.
.PP
.Vb 2
\&  package File::MP3;
\&  use parent \*(AqFile\*(Aq;    # sets @File::MP3::ISA = (\*(AqFile\*(Aq);
\&
\&  my $mp3 = File::MP3\->new( \*(AqAndvari.mp3\*(Aq, $data );
\&  $mp3\->save();
.Ve
.PP
Since we didn't define a \f(CW\*(C`save()\*(C'\fR method in the \f(CW\*(C`File::MP3\*(C'\fR class,
Perl will look at the \f(CW\*(C`File::MP3\*(C'\fR class's parent classes to find the
\&\f(CW\*(C`save()\*(C'\fR method. If Perl cannot find a \f(CW\*(C`save()\*(C'\fR method anywhere in
the inheritance hierarchy, it will die.
.PP
In this case, it finds a \f(CW\*(C`save()\*(C'\fR method in the \f(CW\*(C`File\*(C'\fR class. Note
that the object passed to \f(CW\*(C`save()\*(C'\fR in this case is still a
\&\f(CW\*(C`File::MP3\*(C'\fR object, even though the method is found in the \f(CW\*(C`File\*(C'\fR
class.
.PP
We can override a parent's method in a child class. When we do so, we
can still call the parent class's method with the \f(CW\*(C`SUPER\*(C'\fR
pseudo-class.
.PP
.Vb 2
\&  sub save {
\&      my $self = shift;
\&
\&      say \*(AqPrepare to rock\*(Aq;
\&      $self\->SUPER::save();
\&  }
.Ve
.PP
The \f(CW\*(C`SUPER\*(C'\fR modifier can \fIonly\fR be used for method calls. You can't
use it for regular subroutine calls or class methods:
.PP
.Vb 1
\&  SUPER::save($thing);     # FAIL: looks for save() sub in package SUPER
\&
\&  SUPER\->save($thing);     # FAIL: looks for save() method in class
\&                           #       SUPER
\&
\&  $thing\->SUPER::save();   # Okay: looks for save() method in parent
\&                           #       classes
.Ve
.PP
\fIHow \s-1SUPER\s0 is Resolved\fR
.IX Xref "SUPER"
.IX Subsection "How SUPER is Resolved"
.PP
The \f(CW\*(C`SUPER\*(C'\fR pseudo-class is resolved from the package where the call
is made. It is \fInot\fR resolved based on the object's class. This is
important, because it lets methods at different levels within a deep
inheritance hierarchy each correctly call their respective parent
methods.
.PP
.Vb 1
\&  package A;
\&
\&  sub new {
\&      return bless {}, shift;
\&  }
\&
\&  sub speak {
\&      my $self = shift;
\&
\&      say \*(AqA\*(Aq;
\&  }
\&
\&  package B;
\&
\&  use parent \-norequire, \*(AqA\*(Aq;
\&
\&  sub speak {
\&      my $self = shift;
\&
\&      $self\->SUPER::speak();
\&
\&      say \*(AqB\*(Aq;
\&  }
\&
\&  package C;
\&
\&  use parent \-norequire, \*(AqB\*(Aq;
\&
\&  sub speak {
\&      my $self = shift;
\&
\&      $self\->SUPER::speak();
\&
\&      say \*(AqC\*(Aq;
\&  }
\&
\&  my $c = C\->new();
\&  $c\->speak();
.Ve
.PP
In this example, we will get the following output:
.PP
.Vb 3
\&  A
\&  B
\&  C
.Ve
.PP
This demonstrates how \f(CW\*(C`SUPER\*(C'\fR is resolved. Even though the object is
blessed into the \f(CW\*(C`C\*(C'\fR class, the \f(CW\*(C`speak()\*(C'\fR method in the \f(CW\*(C`B\*(C'\fR class
can still call \f(CW\*(C`SUPER::speak()\*(C'\fR and expect it to correctly look in the
parent class of \f(CW\*(C`B\*(C'\fR (i.e the class the method call is in), not in the
parent class of \f(CW\*(C`C\*(C'\fR (i.e. the class the object belongs to).
.PP
There are rare cases where this package-based resolution can be a
problem. If you copy a subroutine from one package to another, \f(CW\*(C`SUPER\*(C'\fR
resolution will be done based on the original package.
.PP
\fIMultiple Inheritance\fR
.IX Xref "multiple inheritance"
.IX Subsection "Multiple Inheritance"
.PP
Multiple inheritance often indicates a design problem, but Perl always
gives you enough rope to hang yourself with if you ask for it.
.PP
To declare multiple parents, you simply need to pass multiple class
names to \f(CW\*(C`use parent\*(C'\fR:
.PP
.Vb 1
\&  package MultiChild;
\&
\&  use parent \*(AqParent1\*(Aq, \*(AqParent2\*(Aq;
.Ve
.PP
\fIMethod Resolution Order\fR
.IX Xref "method resolution order mro"
.IX Subsection "Method Resolution Order"
.PP
Method resolution order only matters in the case of multiple
inheritance. In the case of single inheritance, Perl simply looks up
the inheritance chain to find a method:
.PP
.Vb 5
\&  Grandparent
\&    |
\&  Parent
\&    |
\&  Child
.Ve
.PP
If we call a method on a \f(CW\*(C`Child\*(C'\fR object and that method is not defined
in the \f(CW\*(C`Child\*(C'\fR class, Perl will look for that method in the \f(CW\*(C`Parent\*(C'\fR
class and then, if necessary, in the \f(CW\*(C`Grandparent\*(C'\fR class.
.PP
If Perl cannot find the method in any of these classes, it will die
with an error message.
.PP
When a class has multiple parents, the method lookup order becomes more
complicated.
.PP
By default, Perl does a depth-first left-to-right search for a method.
That means it starts with the first parent in the \f(CW@ISA\fR array, and
then searches all of its parents, grandparents, etc. If it fails to
find the method, it then goes to the next parent in the original
class's \f(CW@ISA\fR array and searches from there.
.PP
.Vb 7
\&            SharedGreatGrandParent
\&            /                    \e
\&  PaternalGrandparent       MaternalGrandparent
\&            \e                    /
\&             Father        Mother
\&                   \e      /
\&                    Child
.Ve
.PP
So given the diagram above, Perl will search \f(CW\*(C`Child\*(C'\fR, \f(CW\*(C`Father\*(C'\fR,
\&\f(CW\*(C`PaternalGrandparent\*(C'\fR, \f(CW\*(C`SharedGreatGrandParent\*(C'\fR, \f(CW\*(C`Mother\*(C'\fR, and
finally \f(CW\*(C`MaternalGrandparent\*(C'\fR. This may be a problem because now we're
looking in \f(CW\*(C`SharedGreatGrandParent\*(C'\fR \fIbefore\fR we've checked all its
derived classes (i.e. before we tried \f(CW\*(C`Mother\*(C'\fR and
\&\f(CW\*(C`MaternalGrandparent\*(C'\fR).
.PP
It is possible to ask for a different method resolution order with the
mro pragma.
.PP
.Vb 1
\&  package Child;
\&
\&  use mro \*(Aqc3\*(Aq;
\&  use parent \*(AqFather\*(Aq, \*(AqMother\*(Aq;
.Ve
.PP
This pragma lets you switch to the \*(L"C3\*(R" resolution order. In simple
terms, \*(L"C3\*(R" order ensures that shared parent classes are never searched
before child classes, so Perl will now search: \f(CW\*(C`Child\*(C'\fR, \f(CW\*(C`Father\*(C'\fR,
\&\f(CW\*(C`PaternalGrandparent\*(C'\fR, \f(CW\*(C`Mother\*(C'\fR \f(CW\*(C`MaternalGrandparent\*(C'\fR, and finally
\&\f(CW\*(C`SharedGreatGrandParent\*(C'\fR. Note however that this is not
\&\*(L"breadth-first\*(R" searching: All the \f(CW\*(C`Father\*(C'\fR ancestors (except the
common ancestor) are searched before any of the \f(CW\*(C`Mother\*(C'\fR ancestors are
considered.
.PP
The C3 order also lets you call methods in sibling classes with the
\&\f(CW\*(C`next\*(C'\fR pseudo-class. See the mro documentation for more details on
this feature.
.PP
\fIMethod Resolution Caching\fR
.IX Subsection "Method Resolution Caching"
.PP
When Perl searches for a method, it caches the lookup so that future
calls to the method do not need to search for it again. Changing a
class's parent class or adding subroutines to a class will invalidate
the cache for that class.
.PP
The mro pragma provides some functions for manipulating the method
cache directly.
.SS "Writing Constructors"
.IX Xref "constructor"
.IX Subsection "Writing Constructors"
As we mentioned earlier, Perl provides no special constructor syntax.
This means that a class must implement its own constructor. A
constructor is simply a class method that returns a reference to a new
object.
.PP
The constructor can also accept additional parameters that define the
object. Let's write a real constructor for the \f(CW\*(C`File\*(C'\fR class we used
earlier:
.PP
.Vb 1
\&  package File;
\&
\&  sub new {
\&      my $class = shift;
\&      my ( $path, $data ) = @_;
\&
\&      my $self = bless {
\&          path => $path,
\&          data => $data,
\&      }, $class;
\&
\&      return $self;
\&  }
.Ve
.PP
As you can see, we've stored the path and file data in the object
itself. Remember, under the hood, this object is still just a hash.
Later, we'll write accessors to manipulate this data.
.PP
For our File::MP3 class, we can check to make sure that the path we're
given ends with \*(L".mp3\*(R":
.PP
.Vb 1
\&  package File::MP3;
\&
\&  sub new {
\&      my $class = shift;
\&      my ( $path, $data ) = @_;
\&
\&      die "You cannot create a File::MP3 without an mp3 extension\en"
\&          unless $path =~ /\e.mp3\ez/;
\&
\&      return $class\->SUPER::new(@_);
\&  }
.Ve
.PP
This constructor lets its parent class do the actual object
construction.
.SS "Attributes"
.IX Xref "attribute"
.IX Subsection "Attributes"
An attribute is a piece of data belonging to a particular object.
Unlike most object-oriented languages, Perl provides no special syntax
or support for declaring and manipulating attributes.
.PP
Attributes are often stored in the object itself. For example, if the
object is an anonymous hash, we can store the attribute values in the
hash using the attribute name as the key.
.PP
While it's possible to refer directly to these hash keys outside of the
class, it's considered a best practice to wrap all access to the
attribute with accessor methods.
.PP
This has several advantages. Accessors make it easier to change the
implementation of an object later while still preserving the original
\&\s-1API.\s0
.PP
An accessor lets you add additional code around attribute access. For
example, you could apply a default to an attribute that wasn't set in
the constructor, or you could validate that a new value for the
attribute is acceptable.
.PP
Finally, using accessors makes inheritance much simpler. Subclasses can
use the accessors rather than having to know how a parent class is
implemented internally.
.PP
\fIWriting Accessors\fR
.IX Xref "accessor"
.IX Subsection "Writing Accessors"
.PP
As with constructors, Perl provides no special accessor declaration
syntax, so classes must provide explicitly written accessor methods.
There are two common types of accessors, read-only and read-write.
.PP
A simple read-only accessor simply gets the value of a single
attribute:
.PP
.Vb 2
\&  sub path {
\&      my $self = shift;
\&
\&      return $self\->{path};
\&  }
.Ve
.PP
A read-write accessor will allow the caller to set the value as well as
get it:
.PP
.Vb 2
\&  sub path {
\&      my $self = shift;
\&
\&      if (@_) {
\&          $self\->{path} = shift;
\&      }
\&
\&      return $self\->{path};
\&  }
.Ve
.SS "An Aside About Smarter and Safer Code"
.IX Subsection "An Aside About Smarter and Safer Code"
Our constructor and accessors are not very smart. They don't check that
a \f(CW$path\fR is defined, nor do they check that a \f(CW$path\fR is a valid
filesystem path.
.PP
Doing these checks by hand can quickly become tedious. Writing a bunch
of accessors by hand is also incredibly tedious. There are a lot of
modules on \s-1CPAN\s0 that can help you write safer and more concise code,
including the modules we recommend in perlootut.
.SS "Method Call Variations"
.IX Xref "method"
.IX Subsection "Method Call Variations"
Perl supports several other ways to call methods besides the \f(CW\*(C`$object\->method()\*(C'\fR usage we've seen so far.
.PP
\fIMethod Names as Strings\fR
.IX Subsection "Method Names as Strings"
.PP
Perl lets you use a scalar variable containing a string as a method
name:
.PP
.Vb 1
\&  my $file = File\->new( $path, $data );
\&
\&  my $method = \*(Aqsave\*(Aq;
\&  $file\->$method();
.Ve
.PP
This works exactly like calling \f(CW\*(C`$file\->save()\*(C'\fR. This can be very
useful for writing dynamic code. For example, it allows you to pass a
method name to be called as a parameter to another method.
.PP
\fIClass Names as Strings\fR
.IX Subsection "Class Names as Strings"
.PP
Perl also lets you use a scalar containing a string as a class name:
.PP
.Vb 1
\&  my $class = \*(AqFile\*(Aq;
\&
\&  my $file = $class\->new( $path, $data );
.Ve
.PP
Again, this allows for very dynamic code.
.PP
\fISubroutine References as Methods\fR
.IX Subsection "Subroutine References as Methods"
.PP
You can also use a subroutine reference as a method:
.PP
.Vb 2
\&  my $sub = sub {
\&      my $self = shift;
\&
\&      $self\->save();
\&  };
\&
\&  $file\->$sub();
.Ve
.PP
This is exactly equivalent to writing \f(CW\*(C`$sub\->($file)\*(C'\fR. You may see
this idiom in the wild combined with a call to \f(CW\*(C`can\*(C'\fR:
.PP
.Vb 3
\&  if ( my $meth = $object\->can(\*(Aqfoo\*(Aq) ) {
\&      $object\->$meth();
\&  }
.Ve
.PP
\fIDeferencing Method Call\fR
.IX Subsection "Deferencing Method Call"
.PP
Perl also lets you use a dereferenced scalar reference in a method
call. That's a mouthful, so let's look at some code:
.PP
.Vb 4
\&  $file\->${ \e\*(Aqsave\*(Aq };
\&  $file\->${ returns_scalar_ref() };
\&  $file\->${ \e( returns_scalar() ) };
\&  $file\->${ returns_ref_to_sub_ref() };
.Ve
.PP
This works if the dereference produces a string \fIor\fR a subroutine
reference.
.PP
\fIMethod Calls on Filehandles\fR
.IX Subsection "Method Calls on Filehandles"
.PP
Under the hood, Perl filehandles are instances of the \f(CW\*(C`IO::Handle\*(C'\fR or
\&\f(CW\*(C`IO::File\*(C'\fR class. Once you have an open filehandle, you can call
methods on it. Additionally, you can call methods on the \f(CW\*(C`STDIN\*(C'\fR,
\&\f(CW\*(C`STDOUT\*(C'\fR, and \f(CW\*(C`STDERR\*(C'\fR filehandles.
.PP
.Vb 3
\&  open my $fh, \*(Aq>\*(Aq, \*(Aqpath/to/file\*(Aq;
\&  $fh\->autoflush();
\&  $fh\->print(\*(Aqcontent\*(Aq);
\&
\&  STDOUT\->autoflush();
.Ve
.SS "Invoking Class Methods"
.IX Xref "invocation"
.IX Subsection "Invoking Class Methods"
Because Perl allows you to use barewords for package names and
subroutine names, it sometimes interprets a bareword's meaning
incorrectly. For example, the construct \f(CW\*(C`Class\->new()\*(C'\fR can be
interpreted as either \f(CW\*(C`\*(AqClass\*(Aq\->new()\*(C'\fR or \f(CW\*(C`Class()\->new()\*(C'\fR.
In English, that second interpretation reads as \*(L"call a subroutine
named \fIClass()\fR, then call \fInew()\fR as a method on the return value of
\&\fIClass()\fR\*(R". If there is a subroutine named \f(CW\*(C`Class()\*(C'\fR in the current
namespace, Perl will always interpret \f(CW\*(C`Class\->new()\*(C'\fR as the second
alternative: a call to \f(CW\*(C`new()\*(C'\fR on the object  returned by a call to
\&\f(CW\*(C`Class()\*(C'\fR
.PP
You can force Perl to use the first interpretation (i.e. as a method
call on the class named \*(L"Class\*(R") in two ways. First, you can append a
\&\f(CW\*(C`::\*(C'\fR to the class name:
.PP
.Vb 1
\&    Class::\->new()
.Ve
.PP
Perl will always interpret this as a method call.
.PP
Alternatively, you can quote the class name:
.PP
.Vb 1
\&    \*(AqClass\*(Aq\->new()
.Ve
.PP
Of course, if the class name is in a scalar Perl will do the right
thing as well:
.PP
.Vb 2
\&    my $class = \*(AqClass\*(Aq;
\&    $class\->new();
.Ve
.PP
\fIIndirect Object Syntax\fR
.IX Xref "indirect object"
.IX Subsection "Indirect Object Syntax"
.PP
\&\fBOutside of the file handle case, use of this syntax is discouraged as
it can confuse the Perl interpreter. See below for more details.\fR
.PP
Perl suports another method invocation syntax called \*(L"indirect object\*(R"
notation. This syntax is called \*(L"indirect\*(R" because the method comes
before the object it is being invoked on.
.PP
This syntax can be used with any class or object method:
.PP
.Vb 2
\&    my $file = new File $path, $data;
\&    save $file;
.Ve
.PP
We recommend that you avoid this syntax, for several reasons.
.PP
First, it can be confusing to read. In the above example, it's not
clear if \f(CW\*(C`save\*(C'\fR is a method provided by the \f(CW\*(C`File\*(C'\fR class or simply a
subroutine that expects a file object as its first argument.
.PP
When used with class methods, the problem is even worse. Because Perl
allows subroutine names to be written as barewords, Perl has to guess
whether the bareword after the method is a class name or subroutine
name. In other words, Perl can resolve the syntax as either \f(CW\*(C`File\->new( $path, $data )\*(C'\fR \fBor\fR \f(CW\*(C`new( File( $path, $data ) )\*(C'\fR.
.PP
To parse this code, Perl uses a heuristic based on what package names
it has seen, what subroutines exist in the current package, what
barewords it has previously seen, and other input. Needless to say,
heuristics can produce very surprising results!
.PP
Older documentation (and some \s-1CPAN\s0 modules) encouraged this syntax,
particularly for constructors, so you may still find it in the wild.
However, we encourage you to avoid using it in new code.
.PP
You can force Perl to interpret the bareword as a class name by
appending \*(L"::\*(R" to it, like we saw earlier:
.PP
.Vb 1
\&  my $file = new File:: $path, $data;
.Ve
.ie n .SS """bless"", ""blessed"", and ""ref"""
.el .SS "\f(CWbless\fP, \f(CWblessed\fP, and \f(CWref\fP"
.IX Subsection "bless, blessed, and ref"
As we saw earlier, an object is simply a data structure that has been
blessed into a class via the \f(CW\*(C`bless\*(C'\fR function. The \f(CW\*(C`bless\*(C'\fR function
can take either one or two arguments:
.PP
.Vb 2
\&  my $object = bless {}, $class;
\&  my $object = bless {};
.Ve
.PP
In the first form, the anonymous hash is being blessed into the class
in \f(CW$class\fR. In the second form, the anonymous hash is blessed into
the current package.
.PP
The second form is strongly discouraged, because it breaks the ability
of a subclass to reuse the parent's constructor, but you may still run
across it in existing code.
.PP
If you want to know whether a particular scalar refers to an object,
you can use the \f(CW\*(C`blessed\*(C'\fR function exported by Scalar::Util, which
is shipped with the Perl core.
.PP
.Vb 1
\&  use Scalar::Util \*(Aqblessed\*(Aq;
\&
\&  if ( defined blessed($thing) ) { ... }
.Ve
.PP
If \f(CW$thing\fR refers to an object, then this function returns the name
of the package the object has been blessed into. If \f(CW$thing\fR doesn't
contain a reference to a blessed object, the \f(CW\*(C`blessed\*(C'\fR function
returns \f(CW\*(C`undef\*(C'\fR.
.PP
Note that \f(CW\*(C`blessed($thing)\*(C'\fR will also return false if \f(CW$thing\fR has
been blessed into a class named \*(L"0\*(R". This is a possible, but quite
pathological. Don't create a class named \*(L"0\*(R" unless you know what
you're doing.
.PP
Similarly, Perl's built-in \f(CW\*(C`ref\*(C'\fR function treats a reference to a
blessed object specially. If you call \f(CW\*(C`ref($thing)\*(C'\fR and \f(CW$thing\fR
holds a reference to an object, it will return the name of the class
that the object has been blessed into.
.PP
If you simply want to check that a variable contains an object
reference, we recommend that you use \f(CW\*(C`defined blessed($object)\*(C'\fR, since
\&\f(CW\*(C`ref\*(C'\fR returns true values for all references, not just objects.
.SS "The \s-1UNIVERSAL\s0 Class"
.IX Xref "UNIVERSAL"
.IX Subsection "The UNIVERSAL Class"
All classes automatically inherit from the \s-1UNIVERSAL\s0 class, which is
built-in to the Perl core. This class provides a number of methods, all
of which can be called on either a class or an object. You can also
choose to override some of these methods in your class. If you do so,
we recommend that you follow the built-in semantics described below.
.IP "isa($class)" 4
.IX Xref "isa"
.IX Item "isa($class)"
The \f(CW\*(C`isa\*(C'\fR method returns \fItrue\fR if the object is a member of the
class in \f(CW$class\fR, or a member of a subclass of \f(CW$class\fR.
.Sp
If you override this method, it should never throw an exception.
.IP "\s-1DOES\s0($role)" 4
.IX Xref "DOES"
.IX Item "DOES($role)"
The \f(CW\*(C`DOES\*(C'\fR method returns \fItrue\fR if its object claims to perform the
role \f(CW$role\fR. By default, this is equivalent to \f(CW\*(C`isa\*(C'\fR. This method is
provided for use by object system extensions that implement roles, like
\&\f(CW\*(C`Moose\*(C'\fR and \f(CW\*(C`Role::Tiny\*(C'\fR.
.Sp
You can also override \f(CW\*(C`DOES\*(C'\fR directly in your own classes. If you
override this method, it should never throw an exception.
.IP "can($method)" 4
.IX Xref "can"
.IX Item "can($method)"
The \f(CW\*(C`can\*(C'\fR method checks to see if the class or object it was called on
has a method named \f(CW$method\fR. This checks for the method in the class
and all of its parents. If the method exists, then a reference to the
subroutine is returned. If it does not then \f(CW\*(C`undef\*(C'\fR is returned.
.Sp
If your class responds to method calls via \f(CW\*(C`AUTOLOAD\*(C'\fR, you may want to
overload \f(CW\*(C`can\*(C'\fR to return a subroutine reference for methods which your
\&\f(CW\*(C`AUTOLOAD\*(C'\fR method handles.
.Sp
If you override this method, it should never throw an exception.
.IP "\s-1VERSION\s0($need)" 4
.IX Xref "VERSION"
.IX Item "VERSION($need)"
The \f(CW\*(C`VERSION\*(C'\fR method returns the version number of the class
(package).
.Sp
If the \f(CW$need\fR argument is given then it will check that the current
version (as defined by the \f(CW$VERSION\fR variable in the package) is greater
than or equal to \f(CW$need\fR; it will die if this is not the case. This
method is called automatically by the \f(CW\*(C`VERSION\*(C'\fR form of \f(CW\*(C`use\*(C'\fR.
.Sp
.Vb 3
\&    use Package 1.2 qw(some imported subs);
\&    # implies:
\&    Package\->VERSION(1.2);
.Ve
.Sp
We recommend that you use this method to access another package's
version, rather than looking directly at \f(CW$Package::VERSION\fR. The
package you are looking at could have overridden the \f(CW\*(C`VERSION\*(C'\fR method.
.Sp
We also recommend using this method to check whether a module has a
sufficient version. The internal implementation uses the version
module to make sure that different types of version numbers are
compared correctly.
.SS "\s-1AUTOLOAD \s0"
.IX Xref "AUTOLOAD"
.IX Subsection "AUTOLOAD "
If you call a method that doesn't exist in a class, Perl will throw an
error. However, if that class or any of its parent classes defines an
\&\f(CW\*(C`AUTOLOAD\*(C'\fR method, that \f(CW\*(C`AUTOLOAD\*(C'\fR method is called instead.
.PP
\&\f(CW\*(C`AUTOLOAD\*(C'\fR is called as a regular method, and the caller will not know
the difference. Whatever value your \f(CW\*(C`AUTOLOAD\*(C'\fR method returns is
returned to the caller.
.PP
The fully qualified method name that was called is available in the
\&\f(CW$AUTOLOAD\fR package global for your class. Since this is a global, if
you want to refer to do it without a package name prefix under \f(CW\*(C`strict
\&\*(Aqvars\*(Aq\*(C'\fR, you need to declare it.
.PP
.Vb 5
\&  # XXX \- this is a terrible way to implement accessors, but it makes
\&  # for a simple example.
\&  our $AUTOLOAD;
\&  sub AUTOLOAD {
\&      my $self = shift;
\&
\&      # Remove qualifier from original method name...
\&      my $called =  $AUTOLOAD =~ s/.*:://r;
\&
\&      # Is there an attribute of that name?
\&      die "No such attribute: $called"
\&          unless exists $self\->{$called};
\&
\&      # If so, return it...
\&      return $self\->{$called};
\&  }
\&
\&  sub DESTROY { } # see below
.Ve
.PP
Without the \f(CW\*(C`our $AUTOLOAD\*(C'\fR declaration, this code will not compile
under the strict pragma.
.PP
As the comment says, this is not a good way to implement accessors.
It's slow and too clever by far. However, you may see this as a way to
provide accessors in older Perl code. See perlootut for
recommendations on \s-1OO\s0 coding in Perl.
.PP
If your class does have an \f(CW\*(C`AUTOLOAD\*(C'\fR method, we strongly recommend
that you override \f(CW\*(C`can\*(C'\fR in your class as well. Your overridden \f(CW\*(C`can\*(C'\fR
method should return a subroutine reference for any method that your
\&\f(CW\*(C`AUTOLOAD\*(C'\fR responds to.
.SS "Destructors"
.IX Xref "destructor DESTROY"
.IX Subsection "Destructors"
When the last reference to an object goes away, the object is
destroyed. If you only have one reference to an object stored in a
lexical scalar, the object is destroyed when that scalar goes out of
scope. If you store the object in a package global, that object may not
go out of scope until the program exits.
.PP
If you want to do something when the object is destroyed, you can
define a \f(CW\*(C`DESTROY\*(C'\fR method in your class. This method will always be
called by Perl at the appropriate time, unless the method is empty.
.PP
This is called just like any other method, with the object as the first
argument. It does not receive any additional arguments. However, the
\&\f(CW$_[0]\fR variable will be read-only in the destructor, so you cannot
assign a value to it.
.PP
If your \f(CW\*(C`DESTROY\*(C'\fR method throws an error, this error will be ignored.
It will not be sent to \f(CW\*(C`STDERR\*(C'\fR and it will not cause the program to
die. However, if your destructor is running inside an \f(CW\*(C`eval {}\*(C'\fR block,
then the error will change the value of \f(CW$@\fR.
.PP
Because \f(CW\*(C`DESTROY\*(C'\fR methods can be called at any time, you should
localize any global variables you might update in your \f(CW\*(C`DESTROY\*(C'\fR. In
particular, if you use \f(CW\*(C`eval {}\*(C'\fR you should localize \f(CW$@\fR, and if you
use \f(CW\*(C`system\*(C'\fR or backticks you should localize \f(CW$?\fR.
.PP
If you define an \f(CW\*(C`AUTOLOAD\*(C'\fR in your class, then Perl will call your
\&\f(CW\*(C`AUTOLOAD\*(C'\fR to handle the \f(CW\*(C`DESTROY\*(C'\fR method. You can prevent this by
defining an empty \f(CW\*(C`DESTROY\*(C'\fR, like we did in the autoloading example.
You can also check the value of \f(CW$AUTOLOAD\fR and return without doing
anything when called to handle \f(CW\*(C`DESTROY\*(C'\fR.
.PP
\fIGlobal Destruction\fR
.IX Subsection "Global Destruction"
.PP
The order in which objects are destroyed during the global destruction
before the program exits is unpredictable. This means that any objects
contained by your object may already have been destroyed. You should
check that a contained object is defined before calling a method on it:
.PP
.Vb 2
\&  sub DESTROY {
\&      my $self = shift;
\&
\&      $self\->{handle}\->close() if $self\->{handle};
\&  }
.Ve
.PP
You can use the \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR variable to detect if you are
currently in the global destruction phase:
.PP
.Vb 2
\&  sub DESTROY {
\&      my $self = shift;
\&
\&      return if ${^GLOBAL_PHASE} eq \*(AqDESTRUCT\*(Aq;
\&
\&      $self\->{handle}\->close();
\&  }
.Ve
.PP
Note that this variable was added in Perl 5.14.0. If you want to detect
the global destruction phase on older versions of Perl, you can use the
\&\f(CW\*(C`Devel::GlobalDestruction\*(C'\fR module on \s-1CPAN.\s0
.PP
If your \f(CW\*(C`DESTROY\*(C'\fR method issues a warning during global destruction,
the Perl interpreter will append the string \*(L" during global
destruction\*(R" the warning.
.PP
During global destruction, Perl will always garbage collect objects
before unblessed references. See \*(L"\s-1PERL_DESTRUCT_LEVEL\*(R"\s0 in perlhacktips
for more information about global destruction.
.SS "Non-Hash Objects"
.IX Subsection "Non-Hash Objects"
All the examples so far have shown objects based on a blessed hash.
However, it's possible to bless any type of data structure or referent,
including scalars, globs, and subroutines. You may see this sort of
thing when looking at code in the wild.
.PP
Here's an example of a module as a blessed scalar:
.PP
.Vb 1
\&  package Time;
\&
\&  use strict;
\&  use warnings;
\&
\&  sub new {
\&      my $class = shift;
\&
\&      my $time = time;
\&      return bless \e$time, $class;
\&  }
\&
\&  sub epoch {
\&      my $self = shift;
\&      return ${ $self };
\&  }
\&
\&  my $time = Time\->new();
\&  print $time\->epoch();
.Ve
.SS "Inside-Out objects"
.IX Subsection "Inside-Out objects"
In the past, the Perl community experimented with a technique called
\&\*(L"inside-out objects\*(R". An inside-out object stores its data outside of
the object's reference, indexed on a unique property of the object,
such as its memory address, rather than in the object itself. This has
the advantage of enforcing the encapsulation of object attributes,
since their data is not stored in the object itself.
.PP
This technique was popular for a while (and was recommended in Damian
Conway's \fIPerl Best Practices\fR), but never achieved universal
adoption. The Object::InsideOut module on \s-1CPAN\s0 provides a
comprehensive implementation of this technique, and you may see it or
other inside-out modules in the wild.
.PP
Here is a simple example of the technique, using the
Hash::Util::FieldHash core module. This module was added to the core
to support inside-out object implementations.
.PP
.Vb 1
\&  package Time;
\&
\&  use strict;
\&  use warnings;
\&
\&  use Hash::Util::FieldHash \*(Aqfieldhash\*(Aq;
\&
\&  fieldhash my %time_for;
\&
\&  sub new {
\&      my $class = shift;
\&
\&      my $self = bless \e( my $object ), $class;
\&
\&      $time_for{$self} = time;
\&
\&      return $self;
\&  }
\&
\&  sub epoch {
\&      my $self = shift;
\&
\&      return $time_for{$self};
\&  }
\&
\&  my $time = Time\->new;
\&  print $time\->epoch;
.Ve
.SS "Pseudo-hashes"
.IX Subsection "Pseudo-hashes"
The pseudo-hash feature was an experimental feature introduced in
earlier versions of Perl and removed in 5.10.0. A pseudo-hash is an
array reference which can be accessed using named keys like a hash. You
may run in to some code in the wild which uses it. See the fields
pragma for more information.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
A kinder, gentler tutorial on object-oriented programming in Perl can
be found in perlootut. You should also check out perlmodlib for
some style guides on constructing both modules and classes.
                                                                                                                                                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlootut.1                                  0100644 0001750 0001750 00000104004 12566207442 022774  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOOTUT 1"
.TH PERLOOTUT 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlootut \- Object\-Oriented Programming in Perl Tutorial
.SH "DATE"
.IX Header "DATE"
This document was created in February, 2011, and the last major
revision was in February, 2013.
.PP
If you are reading this in the future then it's possible that the state
of the art has changed. We recommend you start by reading the perlootut
document in the latest stable release of Perl, rather than this
version.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides an introduction to object-oriented programming
in Perl. It begins with a brief overview of the concepts behind object
oriented design. Then it introduces several different \s-1OO\s0 systems from
\&\s-1CPAN\s0 <http://search.cpan.org> which build on top of what Perl
provides.
.PP
By default, Perl's built-in \s-1OO\s0 system is very minimal, leaving you to
do most of the work. This minimalism made a lot of sense in 1994, but
in the years since Perl 5.0 we've seen a number of common patterns
emerge in Perl \s-1OO.\s0 Fortunately, Perl's flexibility has allowed a rich
ecosystem of Perl \s-1OO\s0 systems to flourish.
.PP
If you want to know how Perl \s-1OO\s0 works under the hood, the perlobj
document explains the nitty gritty details.
.PP
This document assumes that you already understand the basics of Perl
syntax, variable types, operators, and subroutine calls. If you don't
understand these concepts yet, please read perlintro first. You
should also read the perlsyn, perlop, and perlsub documents.
.SH "OBJECT-ORIENTED FUNDAMENTALS"
.IX Header "OBJECT-ORIENTED FUNDAMENTALS"
Most object systems share a number of common concepts. You've probably
heard terms like \*(L"class\*(R", \*(L"object, \*(R"method\*(L", and \*(R"attribute" before.
Understanding the concepts will make it much easier to read and write
object-oriented code. If you're already familiar with these terms, you
should still skim this section, since it explains each concept in terms
of Perl's \s-1OO\s0 implementation.
.PP
Perl's \s-1OO\s0 system is class-based. Class-based \s-1OO\s0 is fairly common. It's
used by Java, \*(C+, C#, Python, Ruby, and many other languages. There
are other object orientation paradigms as well. JavaScript is the most
popular language to use another paradigm. JavaScript's \s-1OO\s0 system is
prototype-based.
.SS "Object"
.IX Subsection "Object"
An \fBobject\fR is a data structure that bundles together data and
subroutines which operate on that data. An object's data is called
\&\fBattributes\fR, and its subroutines are called \fBmethods\fR. An object can
be thought of as a noun (a person, a web service, a computer).
.PP
An object represents a single discrete thing. For example, an object
might represent a file. The attributes for a file object might include
its path, content, and last modification time. If we created an object
to represent \fI/etc/hostname\fR on a machine named \*(L"foo.example.com\*(R",
that object's path would be \*(L"/etc/hostname\*(R", its content would be
\&\*(L"foo\en\*(R", and it's last modification time would be 1304974868 seconds
since the beginning of the epoch.
.PP
The methods associated with a file might include \f(CW\*(C`rename()\*(C'\fR and
\&\f(CW\*(C`write()\*(C'\fR.
.PP
In Perl most objects are hashes, but the \s-1OO\s0 systems we recommend keep
you from having to worry about this. In practice, it's best to consider
an object's internal data structure opaque.
.SS "Class"
.IX Subsection "Class"
A \fBclass\fR defines the behavior of a category of objects. A class is a
name for a category (like \*(L"File\*(R"), and a class also defines the
behavior of objects in that category.
.PP
All objects belong to a specific class. For example, our
\&\fI/etc/hostname\fR object belongs to the \f(CW\*(C`File\*(C'\fR class. When we want to
create a specific object, we start with its class, and \fBconstruct\fR or
\&\fBinstantiate\fR an object. A specific object is often referred to as an
\&\fBinstance\fR of a class.
.PP
In Perl, any package can be a class. The difference between a package
which is a class and one which isn't is based on how the package is
used. Here's our \*(L"class declaration\*(R" for the \f(CW\*(C`File\*(C'\fR class:
.PP
.Vb 1
\&  package File;
.Ve
.PP
In Perl, there is no special keyword for constructing an object.
However, most \s-1OO\s0 modules on \s-1CPAN\s0 use a method named \f(CW\*(C`new()\*(C'\fR to
construct a new object:
.PP
.Vb 5
\&  my $hostname = File\->new(
\&      path          => \*(Aq/etc/hostname\*(Aq,
\&      content       => "foo\en",
\&      last_mod_time => 1304974868,
\&  );
.Ve
.PP
(Don't worry about that \f(CW\*(C`\->\*(C'\fR operator, it will be explained
later.)
.PP
\fIBlessing\fR
.IX Subsection "Blessing"
.PP
As we said earlier, most Perl objects are hashes, but an object can be
an instance of any Perl data type (scalar, array, etc.). Turning a
plain data structure into an object is done by \fBblessing\fR that data
structure using Perl's \f(CW\*(C`bless\*(C'\fR function.
.PP
While we strongly suggest you don't build your objects from scratch,
you should know the term \fBbless\fR. A \fBblessed\fR data structure (aka \*(L"a
referent\*(R") is an object. We sometimes say that an object has been
\&\*(L"blessed into a class\*(R".
.PP
Once a referent has been blessed, the \f(CW\*(C`blessed\*(C'\fR function from the
Scalar::Util core module can tell us its class name. This subroutine
returns an object's class when passed an object, and false otherwise.
.PP
.Vb 1
\&  use Scalar::Util \*(Aqblessed\*(Aq;
\&
\&  print blessed($hash);      # undef
\&  print blessed($hostname);  # File
.Ve
.PP
\fIConstructor\fR
.IX Subsection "Constructor"
.PP
A \fBconstructor\fR creates a new object. In Perl, a class's constructor
is just another method, unlike some other languages, which provide
syntax for constructors. Most Perl classes use \f(CW\*(C`new\*(C'\fR as the name for
their constructor:
.PP
.Vb 1
\&  my $file = File\->new(...);
.Ve
.SS "Methods"
.IX Subsection "Methods"
You already learned that a \fBmethod\fR is a subroutine that operates on
an object. You can think of a method as the things that an object can
\&\fIdo\fR. If an object is a noun, then methods are its verbs (save, print,
open).
.PP
In Perl, methods are simply subroutines that live in a class's package.
Methods are always written to receive the object as their first
argument:
.PP
.Vb 2
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
\&
\&  $file\->print_info;
\&  # The file is at /etc/hostname
.Ve
.PP
What makes a method special is \fIhow it's called\fR. The arrow operator
(\f(CW\*(C`\->\*(C'\fR) tells Perl that we are calling a method.
.PP
When we make a method call, Perl arranges for the method's \fBinvocant\fR
to be passed as the first argument. \fBInvocant\fR is a fancy name for the
thing on the left side of the arrow. The invocant can either be a class
name or an object. We can also pass additional arguments to the method:
.PP
.Vb 3
\&  sub print_info {
\&      my $self   = shift;
\&      my $prefix = shift // "This file is at ";
\&
\&      print $prefix, ", ", $self\->path, "\en";
\&  }
\&
\&  $file\->print_info("The file is located at ");
\&  # The file is located at /etc/hostname
.Ve
.SS "Attributes"
.IX Subsection "Attributes"
Each class can define its \fBattributes\fR. When we instantiate an object,
we assign values to those attributes. For example, every \f(CW\*(C`File\*(C'\fR object
has a path. Attributes are sometimes called \fBproperties\fR.
.PP
Perl has no special syntax for attributes. Under the hood, attributes
are often stored as keys in the object's underlying hash, but don't
worry about this.
.PP
We recommend that you only access attributes via \fBaccessor\fR methods.
These are methods that can get or set the value of each attribute. We
saw this earlier in the \f(CW\*(C`print_info()\*(C'\fR example, which calls \f(CW\*(C`$self\->path\*(C'\fR.
.PP
You might also see the terms \fBgetter\fR and \fBsetter\fR. These are two
types of accessors. A getter gets the attribute's value, while a setter
sets it. Another term for a setter is \fBmutator\fR
.PP
Attributes are typically defined as read-only or read-write. Read-only
attributes can only be set when the object is first created, while
read-write attributes can be altered at any time.
.PP
The value of an attribute may itself be another object. For example,
instead of returning its last mod time as a number, the \f(CW\*(C`File\*(C'\fR class
could return a DateTime object representing that value.
.PP
It's possible to have a class that does not expose any publicly
settable attributes. Not every class has attributes and methods.
.SS "Polymorphism"
.IX Subsection "Polymorphism"
\&\fBPolymorphism\fR is a fancy way of saying that objects from two
different classes share an \s-1API.\s0 For example, we could have \f(CW\*(C`File\*(C'\fR and
\&\f(CW\*(C`WebPage\*(C'\fR classes which both have a \f(CW\*(C`print_content()\*(C'\fR method. This
method might produce different output for each class, but they share a
common interface.
.PP
While the two classes may differ in many ways, when it comes to the
\&\f(CW\*(C`print_content()\*(C'\fR method, they are the same. This means that we can
try to call the \f(CW\*(C`print_content()\*(C'\fR method on an object of either class,
and \fBwe don't have to know what class the object belongs to!\fR
.PP
Polymorphism is one of the key concepts of object-oriented design.
.SS "Inheritance"
.IX Subsection "Inheritance"
\&\fBInheritance\fR lets you create a specialized version of an existing
class. Inheritance lets the new class reuse the methods and attributes
of another class.
.PP
For example, we could create an \f(CW\*(C`File::MP3\*(C'\fR class which \fBinherits\fR
from \f(CW\*(C`File\*(C'\fR. An \f(CW\*(C`File::MP3\*(C'\fR \fBis-a\fR \fImore specific\fR type of \f(CW\*(C`File\*(C'\fR.
All mp3 files are files, but not all files are mp3 files.
.PP
We often refer to inheritance relationships as \fBparent-child\fR or
\&\f(CW\*(C`superclass/subclass\*(C'\fR relationships. Sometimes we say that the child
has an \fBis-a\fR relationship with its parent class.
.PP
\&\f(CW\*(C`File\*(C'\fR is a \fBsuperclass\fR of \f(CW\*(C`File::MP3\*(C'\fR, and \f(CW\*(C`File::MP3\*(C'\fR is a
\&\fBsubclass\fR of \f(CW\*(C`File\*(C'\fR.
.PP
.Vb 1
\&  package File::MP3;
\&
\&  use parent \*(AqFile\*(Aq;
.Ve
.PP
The parent module is one of several ways that Perl lets you define
inheritance relationships.
.PP
Perl allows multiple inheritance, which means that a class can inherit
from multiple parents. While this is possible, we strongly recommend
against it. Generally, you can use \fBroles\fR to do everything you can do
with multiple inheritance, but in a cleaner way.
.PP
Note that there's nothing wrong with defining multiple subclasses of a
given class. This is both common and safe. For example, we might define
\&\f(CW\*(C`File::MP3::FixedBitrate\*(C'\fR and \f(CW\*(C`File::MP3::VariableBitrate\*(C'\fR classes to
distinguish between different types of mp3 file.
.PP
\fIOverriding methods and method resolution\fR
.IX Subsection "Overriding methods and method resolution"
.PP
Inheritance allows two classes to share code. By default, every method
in the parent class is also available in the child. The child can
explicitly \fBoverride\fR a parent's method to provide its own
implementation. For example, if we have an \f(CW\*(C`File::MP3\*(C'\fR object, it has
the \f(CW\*(C`print_info()\*(C'\fR method from \f(CW\*(C`File\*(C'\fR:
.PP
.Vb 6
\&  my $cage = File::MP3\->new(
\&      path          => \*(Aqmp3s/My\-Body\-Is\-a\-Cage.mp3\*(Aq,
\&      content       => $mp3_data,
\&      last_mod_time => 1304974868,
\&      title         => \*(AqMy Body Is a Cage\*(Aq,
\&  );
\&
\&  $cage\->print_info;
\&  # The file is at mp3s/My\-Body\-Is\-a\-Cage.mp3
.Ve
.PP
If we wanted to include the mp3's title in the greeting, we could
override the method:
.PP
.Vb 1
\&  package File::MP3;
\&
\&  use parent \*(AqFile\*(Aq;
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&      print "Its title is ", $self\->title, "\en";
\&  }
\&
\&  $cage\->print_info;
\&  # The file is at mp3s/My\-Body\-Is\-a\-Cage.mp3
\&  # Its title is My Body Is a Cage
.Ve
.PP
The process of determining what method should be used is called
\&\fBmethod resolution\fR. What Perl does is look at the object's class
first (\f(CW\*(C`File::MP3\*(C'\fR in this case). If that class defines the method,
then that class's version of the method is called. If not, Perl looks
at each parent class in turn. For \f(CW\*(C`File::MP3\*(C'\fR, its only parent is
\&\f(CW\*(C`File\*(C'\fR. If \f(CW\*(C`File::MP3\*(C'\fR does not define the method, but \f(CW\*(C`File\*(C'\fR does,
then Perl calls the method in \f(CW\*(C`File\*(C'\fR.
.PP
If \f(CW\*(C`File\*(C'\fR inherited from \f(CW\*(C`DataSource\*(C'\fR, which inherited from \f(CW\*(C`Thing\*(C'\fR,
then Perl would keep looking \*(L"up the chain\*(R" if necessary.
.PP
It is possible to explicitly call a parent method from a child:
.PP
.Vb 1
\&  package File::MP3;
\&
\&  use parent \*(AqFile\*(Aq;
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      $self\->SUPER::print_info();
\&      print "Its title is ", $self\->title, "\en";
\&  }
.Ve
.PP
The \f(CW\*(C`SUPER::\*(C'\fR bit tells Perl to look for the \f(CW\*(C`print_info()\*(C'\fR in the
\&\f(CW\*(C`File::MP3\*(C'\fR class's inheritance chain. When it finds the parent class
that implements this method, the method is called.
.PP
We mentioned multiple inheritance earlier. The main problem with
multiple inheritance is that it greatly complicates method resolution.
See perlobj for more details.
.SS "Encapsulation"
.IX Subsection "Encapsulation"
\&\fBEncapsulation\fR is the idea that an object is opaque. When another
developer uses your class, they don't need to know \fIhow\fR it is
implemented, they just need to know \fIwhat\fR it does.
.PP
Encapsulation is important for several reasons. First, it allows you to
separate the public \s-1API\s0 from the private implementation. This means you
can change that implementation without breaking the \s-1API.\s0
.PP
Second, when classes are well encapsulated, they become easier to
subclass. Ideally, a subclass uses the same APIs to access object data
that its parent class uses. In reality, subclassing sometimes involves
violating encapsulation, but a good \s-1API\s0 can minimize the need to do
this.
.PP
We mentioned earlier that most Perl objects are implemented as hashes
under the hood. The principle of encapsulation tells us that we should
not rely on this. Instead, we should use accessor methods to access the
data in that hash. The object systems that we recommend below all
automate the generation of accessor methods. If you use one of them,
you should never have to access the object as a hash directly.
.SS "Composition"
.IX Subsection "Composition"
In object-oriented code, we often find that one object references
another object. This is called \fBcomposition\fR, or a \fBhas-a\fR
relationship.
.PP
Earlier, we mentioned that the \f(CW\*(C`File\*(C'\fR class's \f(CW\*(C`last_mod_time\*(C'\fR
accessor could return a DateTime object. This is a perfect example
of composition. We could go even further, and make the \f(CW\*(C`path\*(C'\fR and
\&\f(CW\*(C`content\*(C'\fR accessors return objects as well. The \f(CW\*(C`File\*(C'\fR class would
then be \fBcomposed\fR of several other objects.
.SS "Roles"
.IX Subsection "Roles"
\&\fBRoles\fR are something that a class \fIdoes\fR, rather than something that
it \fIis\fR. Roles are relatively new to Perl, but have become rather
popular. Roles are \fBapplied\fR to classes. Sometimes we say that classes
\&\fBconsume\fR roles.
.PP
Roles are an alternative to inheritance for providing polymorphism.
Let's assume we have two classes, \f(CW\*(C`Radio\*(C'\fR and \f(CW\*(C`Computer\*(C'\fR. Both of
these things have on/off switches. We want to model that in our class
definitions.
.PP
We could have both classes inherit from a common parent, like
\&\f(CW\*(C`Machine\*(C'\fR, but not all machines have on/off switches. We could create
a parent class called \f(CW\*(C`HasOnOffSwitch\*(C'\fR, but that is very artificial.
Radios and computers are not specializations of this parent. This
parent is really a rather ridiculous creation.
.PP
This is where roles come in. It makes a lot of sense to create a
\&\f(CW\*(C`HasOnOffSwitch\*(C'\fR role and apply it to both classes. This role would
define a known \s-1API\s0 like providing \f(CW\*(C`turn_on()\*(C'\fR and \f(CW\*(C`turn_off()\*(C'\fR
methods.
.PP
Perl does not have any built-in way to express roles. In the past,
people just bit the bullet and used multiple inheritance. Nowadays,
there are several good choices on \s-1CPAN\s0 for using roles.
.SS "When to Use \s-1OO\s0"
.IX Subsection "When to Use OO"
Object Orientation is not the best solution to every problem. In \fIPerl
Best Practices\fR (copyright 2004, Published by O'Reilly Media, Inc.),
Damian Conway provides a list of criteria to use when deciding if \s-1OO\s0 is
the right fit for your problem:
.IP "\(bu" 4
The system being designed is large, or is likely to become large.
.IP "\(bu" 4
The data can be aggregated into obvious structures, especially if
there's a large amount of data in each aggregate.
.IP "\(bu" 4
The various types of data aggregate form a natural hierarchy that
facilitates the use of inheritance and polymorphism.
.IP "\(bu" 4
You have a piece of data on which many different operations are
applied.
.IP "\(bu" 4
You need to perform the same general operations on related types of
data, but with slight variations depending on the specific type of data
the operations are applied to.
.IP "\(bu" 4
It's likely you'll have to add new data types later.
.IP "\(bu" 4
The typical interactions between pieces of data are best represented by
operators.
.IP "\(bu" 4
The implementation of individual components of the system is likely to
change over time.
.IP "\(bu" 4
The system design is already object-oriented.
.IP "\(bu" 4
Large numbers of other programmers will be using your code modules.
.SH "PERL OO SYSTEMS"
.IX Header "PERL OO SYSTEMS"
As we mentioned before, Perl's built-in \s-1OO\s0 system is very minimal, but
also quite flexible. Over the years, many people have developed systems
which build on top of Perl's built-in system to provide more features
and convenience.
.PP
We strongly recommend that you use one of these systems. Even the most
minimal of them eliminates a lot of repetitive boilerplate. There's
really no good reason to write your classes from scratch in Perl.
.PP
If you are interested in the guts underlying these systems, check out
perlobj.
.SS "Moose"
.IX Subsection "Moose"
Moose bills itself as a \*(L"postmodern object system for Perl 5\*(R". Don't
be scared, the \*(L"postmodern\*(R" label is a callback to Larry's description
of Perl as \*(L"the first postmodern computer language\*(R".
.PP
\&\f(CW\*(C`Moose\*(C'\fR provides a complete, modern \s-1OO\s0 system. Its biggest influence
is the Common Lisp Object System, but it also borrows ideas from
Smalltalk and several other languages. \f(CW\*(C`Moose\*(C'\fR was created by Stevan
Little, and draws heavily from his work on the Perl 6 \s-1OO\s0 design.
.PP
Here is our \f(CW\*(C`File\*(C'\fR class using \f(CW\*(C`Moose\*(C'\fR:
.PP
.Vb 2
\&  package File;
\&  use Moose;
\&
\&  has path          => ( is => \*(Aqro\*(Aq );
\&  has content       => ( is => \*(Aqro\*(Aq );
\&  has last_mod_time => ( is => \*(Aqro\*(Aq );
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
.Ve
.PP
\&\f(CW\*(C`Moose\*(C'\fR provides a number of features:
.IP "\(bu" 4
Declarative sugar
.Sp
\&\f(CW\*(C`Moose\*(C'\fR provides a layer of declarative \*(L"sugar\*(R" for defining classes.
That sugar is just a set of exported functions that make declaring how
your class works simpler and more palatable.  This lets you describe
\&\fIwhat\fR your class is, rather than having to tell Perl \fIhow\fR to
implement your class.
.Sp
The \f(CW\*(C`has()\*(C'\fR subroutine declares an attribute, and \f(CW\*(C`Moose\*(C'\fR
automatically creates accessors for these attributes. It also takes
care of creating a \f(CW\*(C`new()\*(C'\fR method for you. This constructor knows
about the attributes you declared, so you can set them when creating a
new \f(CW\*(C`File\*(C'\fR.
.IP "\(bu" 4
Roles built-in
.Sp
\&\f(CW\*(C`Moose\*(C'\fR lets you define roles the same way you define classes:
.Sp
.Vb 2
\&  package HasOnOfSwitch;
\&  use Moose::Role;
\&
\&  has is_on => (
\&      is  => \*(Aqrw\*(Aq,
\&      isa => \*(AqBool\*(Aq,
\&  );
\&
\&  sub turn_on {
\&      my $self = shift;
\&      $self\->is_on(1);
\&  }
\&
\&  sub turn_off {
\&      my $self = shift;
\&      $self\->is_on(0);
\&  }
.Ve
.IP "\(bu" 4
A miniature type system
.Sp
In the example above, you can see that we passed \f(CW\*(C`isa => \*(AqBool\*(Aq\*(C'\fR
to \f(CW\*(C`has()\*(C'\fR when creating our \f(CW\*(C`is_on\*(C'\fR attribute. This tells \f(CW\*(C`Moose\*(C'\fR
that this attribute must be a boolean value. If we try to set it to an
invalid value, our code will throw an error.
.IP "\(bu" 4
Full introspection and manipulation
.Sp
Perl's built-in introspection features are fairly minimal. \f(CW\*(C`Moose\*(C'\fR
builds on top of them and creates a full introspection layer for your
classes. This lets you ask questions like \*(L"what methods does the File
class implement?\*(R" It also lets you modify your classes
programmatically.
.IP "\(bu" 4
Self-hosted and extensible
.Sp
\&\f(CW\*(C`Moose\*(C'\fR describes itself using its own introspection \s-1API.\s0 Besides
being a cool trick, this means that you can extend \f(CW\*(C`Moose\*(C'\fR using
\&\f(CW\*(C`Moose\*(C'\fR itself.
.IP "\(bu" 4
Rich ecosystem
.Sp
There is a rich ecosystem of \f(CW\*(C`Moose\*(C'\fR extensions on \s-1CPAN\s0 under the
MooseX <http://search.cpan.org/search?query=MooseX&mode=dist>
namespace. In addition, many modules on \s-1CPAN\s0 already use \f(CW\*(C`Moose\*(C'\fR,
providing you with lots of examples to learn from.
.IP "\(bu" 4
Many more features
.Sp
\&\f(CW\*(C`Moose\*(C'\fR is a very powerful tool, and we can't cover all of its
features here. We encourage you to learn more by reading the \f(CW\*(C`Moose\*(C'\fR
documentation, starting with
Moose::Manual <http://search.cpan.org/perldoc?Moose::Manual>.
.PP
Of course, \f(CW\*(C`Moose\*(C'\fR isn't perfect.
.PP
\&\f(CW\*(C`Moose\*(C'\fR can make your code slower to load. \f(CW\*(C`Moose\*(C'\fR itself is not
small, and it does a \fIlot\fR of code generation when you define your
class. This code generation means that your runtime code is as fast as
it can be, but you pay for this when your modules are first loaded.
.PP
This load time hit can be a problem when startup speed is important,
such as with a command-line script or a \*(L"plain vanilla\*(R" \s-1CGI\s0 script that
must be loaded each time it is executed.
.PP
Before you panic, know that many people do use \f(CW\*(C`Moose\*(C'\fR for
command-line tools and other startup-sensitive code. We encourage you
to try \f(CW\*(C`Moose\*(C'\fR out first before worrying about startup speed.
.PP
\&\f(CW\*(C`Moose\*(C'\fR also has several dependencies on other modules. Most of these
are small stand-alone modules, a number of which have been spun off
from \f(CW\*(C`Moose\*(C'\fR. \f(CW\*(C`Moose\*(C'\fR itself, and some of its dependencies, require a
compiler. If you need to install your software on a system without a
compiler, or if having \fIany\fR dependencies is a problem, then \f(CW\*(C`Moose\*(C'\fR
may not be right for you.
.PP
\fIMoo\fR
.IX Subsection "Moo"
.PP
If you try \f(CW\*(C`Moose\*(C'\fR and find that one of these issues is preventing you
from using \f(CW\*(C`Moose\*(C'\fR, we encourage you to consider Moo next. \f(CW\*(C`Moo\*(C'\fR
implements a subset of \f(CW\*(C`Moose\*(C'\fR's functionality in a simpler package.
For most features that it does implement, the end-user \s-1API\s0 is
\&\fIidentical\fR to \f(CW\*(C`Moose\*(C'\fR, meaning you can switch from \f(CW\*(C`Moo\*(C'\fR to
\&\f(CW\*(C`Moose\*(C'\fR quite easily.
.PP
\&\f(CW\*(C`Moo\*(C'\fR does not implement most of \f(CW\*(C`Moose\*(C'\fR's introspection \s-1API,\s0 so it's
often faster when loading your modules. Additionally, none of its
dependencies require \s-1XS,\s0 so it can be installed on machines without a
compiler.
.PP
One of \f(CW\*(C`Moo\*(C'\fR's most compelling features is its interoperability with
\&\f(CW\*(C`Moose\*(C'\fR. When someone tries to use \f(CW\*(C`Moose\*(C'\fR's introspection \s-1API\s0 on a
\&\f(CW\*(C`Moo\*(C'\fR class or role, it is transparently inflated into a \f(CW\*(C`Moose\*(C'\fR
class or role. This makes it easier to incorporate \f(CW\*(C`Moo\*(C'\fR\-using code
into a \f(CW\*(C`Moose\*(C'\fR code base and vice versa.
.PP
For example, a \f(CW\*(C`Moose\*(C'\fR class can subclass a \f(CW\*(C`Moo\*(C'\fR class using
\&\f(CW\*(C`extends\*(C'\fR or consume a \f(CW\*(C`Moo\*(C'\fR role using \f(CW\*(C`with\*(C'\fR.
.PP
The \f(CW\*(C`Moose\*(C'\fR authors hope that one day \f(CW\*(C`Moo\*(C'\fR can be made obsolete by
improving \f(CW\*(C`Moose\*(C'\fR enough, but for now it provides a worthwhile
alternative to \f(CW\*(C`Moose\*(C'\fR.
.SS "Class::Accessor"
.IX Subsection "Class::Accessor"
Class::Accessor is the polar opposite of \f(CW\*(C`Moose\*(C'\fR. It provides very
few features, nor is it self-hosting.
.PP
It is, however, very simple, pure Perl, and it has no non-core
dependencies. It also provides a \*(L"Moose-like\*(R" \s-1API\s0 on demand for the
features it supports.
.PP
Even though it doesn't do much, it is still preferable to writing your
own classes from scratch.
.PP
Here's our \f(CW\*(C`File\*(C'\fR class with \f(CW\*(C`Class::Accessor\*(C'\fR:
.PP
.Vb 2
\&  package File;
\&  use Class::Accessor \*(Aqantlers\*(Aq;
\&
\&  has path          => ( is => \*(Aqro\*(Aq );
\&  has content       => ( is => \*(Aqro\*(Aq );
\&  has last_mod_time => ( is => \*(Aqro\*(Aq );
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
.Ve
.PP
The \f(CW\*(C`antlers\*(C'\fR import flag tells \f(CW\*(C`Class::Accessor\*(C'\fR that you want to
define your attributes using \f(CW\*(C`Moose\*(C'\fR\-like syntax. The only parameter
that you can pass to \f(CW\*(C`has\*(C'\fR is \f(CW\*(C`is\*(C'\fR. We recommend that you use this
Moose-like syntax if you choose \f(CW\*(C`Class::Accessor\*(C'\fR since it means you
will have a smoother upgrade path if you later decide to move to
\&\f(CW\*(C`Moose\*(C'\fR.
.PP
Like \f(CW\*(C`Moose\*(C'\fR, \f(CW\*(C`Class::Accessor\*(C'\fR generates accessor methods and a
constructor for your class.
.SS "Object::Tiny"
.IX Subsection "Object::Tiny"
Finally, we have Object::Tiny. This module truly lives up to its
name. It has an incredibly minimal \s-1API\s0 and absolutely no dependencies
(core or not). Still, we think it's a lot easier to use than writing
your own \s-1OO\s0 code from scratch.
.PP
Here's our \f(CW\*(C`File\*(C'\fR class once more:
.PP
.Vb 2
\&  package File;
\&  use Object::Tiny qw( path content last_mod_time );
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
.Ve
.PP
That's it!
.PP
With \f(CW\*(C`Object::Tiny\*(C'\fR, all accessors are read-only. It generates a
constructor for you, as well as the accessors you define.
.SS "Role::Tiny"
.IX Subsection "Role::Tiny"
As we mentioned before, roles provide an alternative to inheritance,
but Perl does not have any built-in role support. If you choose to use
Moose, it comes with a full-fledged role implementation. However, if
you use one of our other recommended \s-1OO\s0 modules, you can still use
roles with Role::Tiny
.PP
\&\f(CW\*(C`Role::Tiny\*(C'\fR provides some of the same features as Moose's role
system, but in a much smaller package. Most notably, it doesn't support
any sort of attribute declaration, so you have to do that by hand.
Still, it's useful, and works well with \f(CW\*(C`Class::Accessor\*(C'\fR and
\&\f(CW\*(C`Object::Tiny\*(C'\fR
.SS "\s-1OO\s0 System Summary"
.IX Subsection "OO System Summary"
Here's a brief recap of the options we covered:
.IP "\(bu" 4
Moose
.Sp
\&\f(CW\*(C`Moose\*(C'\fR is the maximal option. It has a lot of features, a big
ecosystem, and a thriving user base. We also covered Moo briefly.
\&\f(CW\*(C`Moo\*(C'\fR is \f(CW\*(C`Moose\*(C'\fR lite, and a reasonable alternative when Moose
doesn't work for your application.
.IP "\(bu" 4
Class::Accessor
.Sp
\&\f(CW\*(C`Class::Accessor\*(C'\fR does a lot less than \f(CW\*(C`Moose\*(C'\fR, and is a nice
alternative if you find \f(CW\*(C`Moose\*(C'\fR overwhelming. It's been around a long
time and is well battle-tested. It also has a minimal \f(CW\*(C`Moose\*(C'\fR
compatibility mode which makes moving from \f(CW\*(C`Class::Accessor\*(C'\fR to
\&\f(CW\*(C`Moose\*(C'\fR easy.
.IP "\(bu" 4
Object::Tiny
.Sp
\&\f(CW\*(C`Object::Tiny\*(C'\fR is the absolute minimal option. It has no dependencies,
and almost no syntax to learn. It's a good option for a super minimal
environment and for throwing something together quickly without having
to worry about details.
.IP "\(bu" 4
Role::Tiny
.Sp
Use \f(CW\*(C`Role::Tiny\*(C'\fR with \f(CW\*(C`Class::Accessor\*(C'\fR or \f(CW\*(C`Object::Tiny\*(C'\fR if you
find yourself considering multiple inheritance. If you go with
\&\f(CW\*(C`Moose\*(C'\fR, it comes with its own role implementation.
.SS "Other \s-1OO\s0 Systems"
.IX Subsection "Other OO Systems"
There are literally dozens of other OO-related modules on \s-1CPAN\s0 besides
those covered here, and you're likely to run across one or more of them
if you work with other people's code.
.PP
In addition, plenty of code in the wild does all of its \s-1OO \s0\*(L"by hand\*(R",
using just the Perl built-in \s-1OO\s0 features. If you need to maintain such
code, you should read perlobj to understand exactly how Perl's
built-in \s-1OO\s0 works.
.SH "CONCLUSION"
.IX Header "CONCLUSION"
As we said before, Perl's minimal \s-1OO\s0 system has led to a profusion of
\&\s-1OO\s0 systems on \s-1CPAN.\s0 While you can still drop down to the bare metal and
write your classes by hand, there's really no reason to do that with
modern Perl.
.PP
For small systems, Object::Tiny and Class::Accessor both provide
minimal object systems that take care of basic boilerplate for you.
.PP
For bigger projects, Moose provides a rich set of features that will
let you focus on implementing your business logic.
.PP
We encourage you to play with and evaluate Moose,
Class::Accessor, and Object::Tiny to see which \s-1OO\s0 system is right
for you.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlootut5.16.1                              0100644 0001750 0001750 00000102460 12566207421 023307  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOOTUT 1"
.TH PERLOOTUT 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlootut \- Object\-Oriented Programming in Perl Tutorial
.SH "DATE"
.IX Header "DATE"
This document was created in February, 2011.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides an introduction to object-oriented programming
in Perl. It begins with a brief overview of the concepts behind object
oriented design. Then it introduces several different \s-1OO\s0 systems from
\&\s-1CPAN\s0 <http://search.cpan.org> which build on top of what Perl
provides.
.PP
By default, Perl's built-in \s-1OO\s0 system is very minimal, leaving you to
do most of the work. This minimalism made a lot of sense in 1994, but
in the years since Perl 5.0 we've seen a number of common patterns
emerge in Perl \s-1OO\s0. Fortunately, Perl's flexibility has allowed a rich
ecosystem of Perl \s-1OO\s0 systems to flourish.
.PP
If you want to know how Perl \s-1OO\s0 works under the hood, the perlobj
document explains the nitty gritty details.
.PP
This document assumes that you already understand the basics of Perl
syntax, variable types, operators, and subroutine calls. If you don't
understand these concepts yet, please read perlintro first. You
should also read the perlsyn, perlop, and perlsub documents.
.SH "OBJECT-ORIENTED FUNDAMENTALS"
.IX Header "OBJECT-ORIENTED FUNDAMENTALS"
Most object systems share a number of common concepts. You've probably
heard terms like \*(L"class\*(R", \*(L"object, \*(R"method\*(L", and \*(R"attribute" before.
Understanding the concepts will make it much easier to read and write
object-oriented code. If you're already familiar with these terms, you
should still skim this section, since it explains each concept in terms
of Perl's \s-1OO\s0 implementation.
.PP
Perl's \s-1OO\s0 system is class-based. Class-based \s-1OO\s0 is fairly common. It's
used by Java, \*(C+, C#, Python, Ruby, and many other languages. There
are other object orientation paradigms as well. JavaScript is the most
popular language to use another paradigm. JavaScript's \s-1OO\s0 system is
prototype-based.
.SS "Object"
.IX Subsection "Object"
An \fBobject\fR is a data structure that bundles together data and
subroutines which operate on that data. An object's data is called
\&\fBattributes\fR, and its subroutines are called \fBmethods\fR. An object can
be thought of as a noun (a person, a web service, a computer).
.PP
An object represents a single discrete thing. For example, an object
might represent a file. The attributes for a file object might include
its path, content, and last modification time. If we created an object
to represent \fI/etc/hostname\fR on a machine named \*(L"foo.example.com\*(R",
that object's path would be \*(L"/etc/hostname\*(R", its content would be
\&\*(L"foo\en\*(R", and it's last modification time would be 1304974868 seconds
since the beginning of the epoch.
.PP
The methods associated with a file might include \f(CW\*(C`rename()\*(C'\fR and
\&\f(CW\*(C`write()\*(C'\fR.
.PP
In Perl most objects are hashes, but the \s-1OO\s0 systems we recommend keep
you from having to worry about this. In practice, it's best to consider
an object's internal data structure opaque.
.SS "Class"
.IX Subsection "Class"
A \fBclass\fR defines the behavior of a category of objects. A class is a
name for a category (like \*(L"File\*(R"), and a class also defines the
behavior of objects in that category.
.PP
All objects belong to a specific class. For example, our
\&\fI/etc/hostname\fR object belongs to the \f(CW\*(C`File\*(C'\fR class. When we want to
create a specific object, we start with its class, and \fBconstruct\fR or
\&\fBinstantiate\fR an object. A specific object is often referred to as an
\&\fBinstance\fR of a class.
.PP
In Perl, any package can be a class. The difference between a package
which is a class and one which isn't is based on how the package is
used. Here's our \*(L"class declaration\*(R" for the \f(CW\*(C`File\*(C'\fR class:
.PP
.Vb 1
\&  package File;
.Ve
.PP
In Perl, there is no special keyword for constructing an object.
However, most \s-1OO\s0 modules on \s-1CPAN\s0 use a method named \f(CW\*(C`new()\*(C'\fR to
construct a new object:
.PP
.Vb 5
\&  my $hostname = File\->new(
\&      path          => \*(Aq/etc/hostname\*(Aq,
\&      content       => "foo\en",
\&      last_mod_time => 1304974868,
\&  );
.Ve
.PP
(Don't worry about that \f(CW\*(C`\->\*(C'\fR operator, it will be explained
later.)
.PP
\fIBlessing\fR
.IX Subsection "Blessing"
.PP
As we said earlier, most Perl objects are hashes, but an object can be
an instance of any Perl data type (scalar, array, etc.). Turning a
plain data structure into an object is done by \fBblessing\fR that data
structure using Perl's \f(CW\*(C`bless\*(C'\fR function.
.PP
While we strongly suggest you don't build your objects from scratch,
you should know the term \fBbless\fR. A \fBblessed\fR data structure (aka \*(L"a
referent\*(R") is an object. We sometimes say that an object has been
\&\*(L"blessed into a class\*(R".
.PP
Once a referent has been blessed, the \f(CW\*(C`blessed\*(C'\fR function from the
Scalar::Util core module can tell us its class name. This subroutine
returns an object's class when passed an object, and false otherwise.
.PP
.Vb 1
\&  use Scalar::Util \*(Aqblessed\*(Aq;
\&
\&  print blessed($hash);      # undef
\&  print blessed($hostname);  # File
.Ve
.PP
\fIConstructor\fR
.IX Subsection "Constructor"
.PP
A \fBconstructor\fR creates a new object. In Perl, a class's constructor
is just another method, unlike some other languages, which provide
syntax for constructors. Most Perl classes use \f(CW\*(C`new\*(C'\fR as the name for
their constructor:
.PP
.Vb 1
\&  my $file = File\->new(...);
.Ve
.SS "Methods"
.IX Subsection "Methods"
You already learned that a \fBmethod\fR is a subroutine that operates on
an object. You can think of a method as the things that an object can
\&\fIdo\fR. If an object is a noun, then methods are its verbs (save, print,
open).
.PP
In Perl, methods are simply subroutines that live in a class's package.
Methods are always written to receive the object as their first
argument:
.PP
.Vb 2
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
\&
\&  $file\->print_info;
\&  # The file is at /etc/hostname
.Ve
.PP
What makes a method special is \fIhow it's called\fR. The arrow operator
(\f(CW\*(C`\->\*(C'\fR) tells Perl that we are calling a method.
.PP
When we make a method call, Perl arranges for the method's \fBinvocant\fR
to be passed as the first argument. \fBInvocant\fR is a fancy name for the
thing on the left side of the arrow. The invocant can either be a class
name or an object. We can also pass additional arguments to the method:
.PP
.Vb 3
\&  sub print_info {
\&      my $self   = shift;
\&      my $prefix = shift // "This file is at ";
\&
\&      print $prefix, ", ", $self\->path, "\en";
\&  }
\&
\&  $file\->print_info("The file is located at ");
\&  # The file is located at /etc/hostname
.Ve
.SS "Attributes"
.IX Subsection "Attributes"
Each class can define its \fBattributes\fR. When we instantiate an object,
we assign values to those attributes. For example, every \f(CW\*(C`File\*(C'\fR object
has a path. Attributes are sometimes called \fBproperties\fR.
.PP
Perl has no special syntax for attributes. Under the hood, attributes
are often stored as keys in the object's underlying hash, but don't
worry about this.
.PP
We recommend that you only access attributes via \fBaccessor\fR methods.
These are methods that can get or set the value of each attribute. We
saw this earlier in the \f(CW\*(C`print_info()\*(C'\fR example, which calls \f(CW\*(C`$self\->path\*(C'\fR.
.PP
You might also see the terms \fBgetter\fR and \fBsetter\fR. These are two
types of accessors. A getter gets the attribute's value, while a setter
sets it. Another term for a setter is \fBmutator\fR
.PP
Attributes are typically defined as read-only or read-write. Read-only
attributes can only be set when the object is first created, while
read-write attributes can be altered at any time.
.PP
The value of an attribute may itself be another object. For example,
instead of returning its last mod time as a number, the \f(CW\*(C`File\*(C'\fR class
could return a DateTime object representing that value.
.PP
It's possible to have a class that does not expose any publicly
settable attributes. Not every class has attributes and methods.
.SS "Polymorphism"
.IX Subsection "Polymorphism"
\&\fBPolymorphism\fR is a fancy way of saying that objects from two
different classes share an \s-1API\s0. For example, we could have \f(CW\*(C`File\*(C'\fR and
\&\f(CW\*(C`WebPage\*(C'\fR classes which both have a \f(CW\*(C`print_content()\*(C'\fR method. This
method might produce different output for each class, but they share a
common interface.
.PP
While the two classes may differ in many ways, when it comes to the
\&\f(CW\*(C`print_content()\*(C'\fR method, they are the same. This means that we can
try to call the \f(CW\*(C`print_content()\*(C'\fR method on an object of either class,
and \fBwe don't have to know what class the object belongs to!\fR
.PP
Polymorphism is one of the key concepts of object-oriented design.
.SS "Inheritance"
.IX Subsection "Inheritance"
\&\fBInheritance\fR lets you create a specialized version of an existing
class. Inheritance lets the new class to reuse the methods and
attributes of another class.
.PP
For example, we could create an \f(CW\*(C`File::MP3\*(C'\fR class which \fBinherits\fR
from \f(CW\*(C`File\*(C'\fR. An \f(CW\*(C`File::MP3\*(C'\fR \fBis-a\fR \fImore specific\fR type of \f(CW\*(C`File\*(C'\fR.
All mp3 files are files, but not all files are mp3 files.
.PP
We often refer to inheritance relationships as \fBparent-child\fR or
\&\f(CW\*(C`superclass/subclass\*(C'\fR relationships. Sometimes we say that the child
has an \fBis-a\fR relationship with its parent class.
.PP
\&\f(CW\*(C`File\*(C'\fR is a \fBsuperclass\fR of \f(CW\*(C`File::MP3\*(C'\fR, and \f(CW\*(C`File::MP3\*(C'\fR is a
\&\fBsubclass\fR of \f(CW\*(C`File\*(C'\fR.
.PP
.Vb 1
\&  package File::MP3;
\&
\&  use parent \*(AqFile\*(Aq;
.Ve
.PP
The parent module is one of several ways that Perl lets you define
inheritance relationships.
.PP
Perl allows multiple inheritance, which means that a class can inherit
from multiple parents. While this is possible, we strongly recommend
against it. Generally, you can use \fBroles\fR to do everything you can do
with multiple inheritance, but in a cleaner way.
.PP
Note that there's nothing wrong with defining multiple subclasses of a
given class. This is both common and safe. For example, we might define
\&\f(CW\*(C`File::MP3::FixedBitrate\*(C'\fR and \f(CW\*(C`File::MP3::VariableBitrate\*(C'\fR classes to
distinguish between different types of mp3 file.
.PP
\fIOverriding methods and method resolution\fR
.IX Subsection "Overriding methods and method resolution"
.PP
Inheritance allows two classes to share code. By default, every method
in the parent class is also available in the child. The child can
explicitly \fBoverride\fR a parent's method to provide its own
implementation. For example, if we have an \f(CW\*(C`File::MP3\*(C'\fR object, it has
the \f(CW\*(C`print_info()\*(C'\fR method from \f(CW\*(C`File\*(C'\fR:
.PP
.Vb 6
\&  my $cage = File::MP3\->new(
\&      path          => \*(Aqmp3s/My\-Body\-Is\-a\-Cage.mp3\*(Aq,
\&      content       => $mp3_data,
\&      last_mod_time => 1304974868,
\&      title         => \*(AqMy Body Is a Cage\*(Aq,
\&  );
\&
\&  $cage\->print_info;
\&  # The file is at mp3s/My\-Body\-Is\-a\-Cage.mp3
.Ve
.PP
If we wanted to include the mp3's title in the greeting, we could
override the method:
.PP
.Vb 1
\&  package File::MP3;
\&
\&  use parent \*(AqFile\*(Aq;
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&      print "Its title is ", $self\->title, "\en";
\&  }
\&
\&  $cage\->print_info;
\&  # The file is at mp3s/My\-Body\-Is\-a\-Cage.mp3
\&  # Its title is My Body Is a Cage
.Ve
.PP
The process of determining what method should be used is called
\&\fBmethod resolution\fR. What Perl does is look at the object's class
first (\f(CW\*(C`File::MP3\*(C'\fR in this case). If that class defines the method,
then that class's version of the method is called. If not, Perl looks
at each parent class in turn. For \f(CW\*(C`File::MP3\*(C'\fR, its only parent is
\&\f(CW\*(C`File\*(C'\fR. If \f(CW\*(C`File::MP3\*(C'\fR does not define the method, but \f(CW\*(C`File\*(C'\fR does,
then Perl calls the method in \f(CW\*(C`File\*(C'\fR.
.PP
If \f(CW\*(C`File\*(C'\fR inherited from \f(CW\*(C`DataSource\*(C'\fR, which inherited from \f(CW\*(C`Thing\*(C'\fR,
then Perl would keep looking \*(L"up the chain\*(R" if necessary.
.PP
It is possible to explicitly call a parent method from a child:
.PP
.Vb 1
\&  package File::MP3;
\&
\&  use parent \*(AqFile\*(Aq;
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      $self\->SUPER::print_info();
\&      print "Its title is ", $self\->title, "\en";
\&  }
.Ve
.PP
The \f(CW\*(C`SUPER::\*(C'\fR bit tells Perl to look for the \f(CW\*(C`print_info()\*(C'\fR in the
\&\f(CW\*(C`File::MP3\*(C'\fR class's inheritance chain. When it finds the parent class
that implements this method, the method is called.
.PP
We mentioned multiple inheritance earlier. The main problem with
multiple inheritance is that it greatly complicates method resolution.
See perlobj for more details.
.SS "Encapsulation"
.IX Subsection "Encapsulation"
\&\fBEncapsulation\fR is the idea that an object is opaque. When another
developer uses your class, they don't need to know \fIhow\fR it is
implemented, they just need to know \fIwhat\fR it does.
.PP
Encapsulation is important for several reasons. First, it allows you to
separate the public \s-1API\s0 from the private implementation. This means you
can change that implementation without breaking the \s-1API\s0.
.PP
Second, when classes are well encapsulated, they become easier to
subclass. Ideally, a subclass uses the same APIs to access object data
that its parent class uses. In reality, subclassing sometimes involves
violating encapsulation, but a good \s-1API\s0 can minimize the need to do
this.
.PP
We mentioned earlier that most Perl objects are implemented as hashes
under the hood. The principle of encapsulation tells us that we should
not rely on this. Instead, we should use accessor methods to access the
data in that hash. The object systems that we recommend below all
automate the generation of accessor methods. If you use one of them,
you should never have to access the object as a hash directly.
.SS "Composition"
.IX Subsection "Composition"
In object-oriented code, we often find that one object references
another object. This is called \fBcomposition\fR, or a \fBhas-a\fR
relationship.
.PP
Earlier, we mentioned that the \f(CW\*(C`File\*(C'\fR class's \f(CW\*(C`last_mod_time\*(C'\fR
accessor could return a DateTime object. This is a perfect example
of composition. We could go even further, and make the \f(CW\*(C`path\*(C'\fR and
\&\f(CW\*(C`content\*(C'\fR accessors return objects as well. The \f(CW\*(C`File\*(C'\fR class would
then be \fBcomposed\fR of several other objects.
.SS "Roles"
.IX Subsection "Roles"
\&\fBRoles\fR are something that a class \fIdoes\fR, rather than something that
it \fIis\fR. Roles are relatively new to Perl, but have become rather
popular. Roles are \fBapplied\fR to classes. Sometimes we say that classes
\&\fBconsume\fR roles.
.PP
Roles are an alternative to inheritance for providing polymorphism.
Let's assume we have two classes, \f(CW\*(C`Radio\*(C'\fR and \f(CW\*(C`Computer\*(C'\fR. Both of
these things have on/off switches. We want to model that in our class
definitions.
.PP
We could have both classes inherit from a common parent, like
\&\f(CW\*(C`Machine\*(C'\fR, but not all machines have on/off switches. We could create
a parent class called \f(CW\*(C`HasOnOffSwitch\*(C'\fR, but that is very artificial.
Radios and computers are not specializations of this parent. This
parent is really a rather ridiculous creation.
.PP
This is where roles come in. It makes a lot of sense to create a
\&\f(CW\*(C`HasOnOffSwitch\*(C'\fR role and apply it to both classes. This role would
define a known \s-1API\s0 like providing \f(CW\*(C`turn_on()\*(C'\fR and \f(CW\*(C`turn_off()\*(C'\fR
methods.
.PP
Perl does not have any built-in way to express roles. In the past,
people just bit the bullet and used multiple inheritance. Nowadays,
there are several good choices on \s-1CPAN\s0 for using roles.
.SS "When to Use \s-1OO\s0"
.IX Subsection "When to Use OO"
Object Orientation is not the best solution to every problem. In \fIPerl
Best Practices\fR (copyright 2004, Published by O'Reilly Media, Inc.),
Damian Conway provides a list of criteria to use when deciding if \s-1OO\s0 is
the right fit for your problem:
.IP "\(bu" 4
The system being designed is large, or is likely to become large.
.IP "\(bu" 4
The data can be aggregated into obvious structures, especially if
there's a large amount of data in each aggregate.
.IP "\(bu" 4
The various types of data aggregate form a natural hierarchy that
facilitates the use of inheritance and polymorphism.
.IP "\(bu" 4
You have a piece of data on which many different operations are
applied.
.IP "\(bu" 4
You need to perform the same general operations on related types of
data, but with slight variations depending on the specific type of data
the operations are applied to.
.IP "\(bu" 4
It's likely you'll have to add new data types later.
.IP "\(bu" 4
The typical interactions between pieces of data are best represented by
operators.
.IP "\(bu" 4
The implementation of individual components of the system is likely to
change over time.
.IP "\(bu" 4
The system design is already object-oriented.
.IP "\(bu" 4
Large numbers of other programmers will be using your code modules.
.SH "PERL OO SYSTEMS"
.IX Header "PERL OO SYSTEMS"
As we mentioned before, Perl's built-in \s-1OO\s0 system is very minimal, but
also quite flexible. Over the years, many people have developed systems
which build on top of Perl's built-in system to provide more features
and convenience.
.PP
We strongly recommend that you use one of these systems. Even the most
minimal of them eliminates a lot of repetitive boilerplate. There's
really no good reason to write your classes from scratch in Perl.
.PP
If you are interested in the guts underlying these systems, check out
perlobj.
.SS "Moose"
.IX Subsection "Moose"
Moose bills itself as a \*(L"postmodern object system for Perl 5\*(R". Don't
be scared, the \*(L"postmodern\*(R" label is a callback to Larry's description
of Perl as \*(L"the first postmodern computer language\*(R".
.PP
\&\f(CW\*(C`Moose\*(C'\fR provides a complete, modern \s-1OO\s0 system. Its biggest influence
is the Common Lisp Object System, but it also borrows ideas from
Smalltalk and several other languages. \f(CW\*(C`Moose\*(C'\fR was created by Stevan
Little, and draws heavily from his work on the Perl 6 \s-1OO\s0 design.
.PP
Here is our \f(CW\*(C`File\*(C'\fR class using \f(CW\*(C`Moose\*(C'\fR:
.PP
.Vb 2
\&  package File;
\&  use Moose;
\&
\&  has path          => ( is => \*(Aqro\*(Aq );
\&  has content       => ( is => \*(Aqro\*(Aq );
\&  has last_mod_time => ( is => \*(Aqro\*(Aq );
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
.Ve
.PP
\&\f(CW\*(C`Moose\*(C'\fR provides a number of features:
.IP "\(bu" 4
Declarative sugar
.Sp
\&\f(CW\*(C`Moose\*(C'\fR provides a layer of declarative \*(L"sugar\*(R" for defining classes.
That sugar is just a set of exported functions that make declaring how
your class works simpler and more palatable.  This lets you describe
\&\fIwhat\fR your class is, rather than having to tell Perl \fIhow\fR to
implement your class.
.Sp
The \f(CW\*(C`has()\*(C'\fR subroutine declares an attribute, and \f(CW\*(C`Moose\*(C'\fR
automatically creates accessors for these attributes. It also takes
care of creating a \f(CW\*(C`new()\*(C'\fR method for you. This constructor knows
about the attributes you declared, so you can set them when creating a
new \f(CW\*(C`File\*(C'\fR.
.IP "\(bu" 4
Roles built-in
.Sp
\&\f(CW\*(C`Moose\*(C'\fR lets you define roles the same way you define classes:
.Sp
.Vb 2
\&  package HasOnOfSwitch;
\&  use Moose::Role;
\&
\&  has is_on => (
\&      is  => \*(Aqrw\*(Aq,
\&      isa => \*(AqBool\*(Aq,
\&  );
\&
\&  sub turn_on {
\&      my $self = shift;
\&      $self\->is_on(1);
\&  }
\&
\&  sub turn_off {
\&      my $self = shift;
\&      $self\->is_on(0);
\&  }
.Ve
.IP "\(bu" 4
A miniature type system
.Sp
In the example above, you can see that we passed \f(CW\*(C`isa => \*(AqBool\*(Aq\*(C'\fR
to \f(CW\*(C`has()\*(C'\fR when creating our \f(CW\*(C`is_on\*(C'\fR attribute. This tells \f(CW\*(C`Moose\*(C'\fR
that this attribute must be a boolean value. If we try to set it to an
invalid value, our code will throw an error.
.IP "\(bu" 4
Full introspection and manipulation
.Sp
Perl's built-in introspection features are fairly minimal. \f(CW\*(C`Moose\*(C'\fR
builds on top of them and creates a full introspection layer for your
classes. This lets you ask questions like \*(L"what methods does the File
class implement?\*(R" It also lets you modify your classes
programmatically.
.IP "\(bu" 4
Self-hosted and extensible
.Sp
\&\f(CW\*(C`Moose\*(C'\fR describes itself using its own introspection \s-1API\s0. Besides
being a cool trick, this means that you can extend \f(CW\*(C`Moose\*(C'\fR using
\&\f(CW\*(C`Moose\*(C'\fR itself.
.IP "\(bu" 4
Rich ecosystem
.Sp
There is a rich ecosystem of \f(CW\*(C`Moose\*(C'\fR extensions on \s-1CPAN\s0 under the
MooseX <http://search.cpan.org/search?query=MooseX&mode=dist>
namespace. In addition, many modules on \s-1CPAN\s0 already use \f(CW\*(C`Moose\*(C'\fR,
providing you with lots of examples to learn from.
.IP "\(bu" 4
Many more features
.Sp
\&\f(CW\*(C`Moose\*(C'\fR is a very powerful tool, and we can't cover all of its
features here. We encourage you to learn more by reading the \f(CW\*(C`Moose\*(C'\fR
documentation, starting with
Moose::Manual <http://search.cpan.org/perldoc?Moose::Manual>.
.PP
Of course, \f(CW\*(C`Moose\*(C'\fR isn't perfect.
.PP
\&\f(CW\*(C`Moose\*(C'\fR can make your code slower to load. \f(CW\*(C`Moose\*(C'\fR itself is not
small, and it does a \fIlot\fR of code generation when you define your
class. This code generation means that your runtime code is as fast as
it can be, but you pay for this when your modules are first loaded.
.PP
This load time hit can be a problem when startup speed is important,
such as with a command-line script or a \*(L"plain vanilla\*(R" \s-1CGI\s0 script that
must be loaded each time it is executed.
.PP
Before you panic, know that many people do use \f(CW\*(C`Moose\*(C'\fR for
command-line tools and other startup-sensitive code. We encourage you
to try \f(CW\*(C`Moose\*(C'\fR out first before worrying about startup speed.
.PP
\&\f(CW\*(C`Moose\*(C'\fR also has several dependencies on other modules. Most of these
are small stand-alone modules, a number of which have been spun off
from \f(CW\*(C`Moose\*(C'\fR. \f(CW\*(C`Moose\*(C'\fR itself, and some of its dependencies, require a
compiler. If you need to install your software on a system without a
compiler, or if having \fIany\fR dependencies is a problem, then \f(CW\*(C`Moose\*(C'\fR
may not be right for you.
.PP
\fIMouse\fR
.IX Subsection "Mouse"
.PP
If you try \f(CW\*(C`Moose\*(C'\fR and find that one of these issues is preventing you
from using \f(CW\*(C`Moose\*(C'\fR, we encourage you to consider Mouse next.
\&\f(CW\*(C`Mouse\*(C'\fR implements a subset of \f(CW\*(C`Moose\*(C'\fR's functionality in a simpler
package. For all features that it does implement, the end-user \s-1API\s0 is
\&\fIidentical\fR to \f(CW\*(C`Moose\*(C'\fR, meaning you can switch from \f(CW\*(C`Mouse\*(C'\fR to
\&\f(CW\*(C`Moose\*(C'\fR quite easily.
.PP
\&\f(CW\*(C`Mouse\*(C'\fR does not implement most of \f(CW\*(C`Moose\*(C'\fR's introspection \s-1API\s0, so
it's often faster when loading your modules. Additionally, all of its
\&\fIrequired\fR dependencies ship with the Perl core, and it can run
without a compiler. If you do have a compiler, \f(CW\*(C`Mouse\*(C'\fR will use it to
compile some of its code for a speed boost.
.PP
Finally, it ships with a \f(CW\*(C`Mouse::Tiny\*(C'\fR module that takes most of
\&\f(CW\*(C`Mouse\*(C'\fR's features and bundles them up in a single module file. You
can copy this module file into your application's library directory for
easy bundling.
.PP
The \f(CW\*(C`Moose\*(C'\fR authors hope that one day \f(CW\*(C`Mouse\*(C'\fR can be made obsolete by
improving \f(CW\*(C`Moose\*(C'\fR enough, but for now it provides a worthwhile
alternative to \f(CW\*(C`Moose\*(C'\fR.
.SS "Class::Accessor"
.IX Subsection "Class::Accessor"
Class::Accessor is the polar opposite of \f(CW\*(C`Moose\*(C'\fR. It provides very
few features, nor is it self-hosting.
.PP
It is, however, very simple, pure Perl, and it has no non-core
dependencies. It also provides a \*(L"Moose-like\*(R" \s-1API\s0 on demand for the
features it supports.
.PP
Even though it doesn't do much, it is still preferable to writing your
own classes from scratch.
.PP
Here's our \f(CW\*(C`File\*(C'\fR class with \f(CW\*(C`Class::Accessor\*(C'\fR:
.PP
.Vb 2
\&  package File;
\&  use Class::Accessor \*(Aqantlers\*(Aq;
\&
\&  has path          => ( is => \*(Aqro\*(Aq );
\&  has content       => ( is => \*(Aqro\*(Aq );
\&  has last_mod_time => ( is => \*(Aqro\*(Aq );
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
.Ve
.PP
The \f(CW\*(C`antlers\*(C'\fR import flag tells \f(CW\*(C`Class::Accessor\*(C'\fR that you want to
define your attributes using \f(CW\*(C`Moose\*(C'\fR\-like syntax. The only parameter
that you can pass to \f(CW\*(C`has\*(C'\fR is \f(CW\*(C`is\*(C'\fR. We recommend that you use this
Moose-like syntax if you choose \f(CW\*(C`Class::Accessor\*(C'\fR since it means you
will have a smoother upgrade path if you later decide to move to
\&\f(CW\*(C`Moose\*(C'\fR.
.PP
Like \f(CW\*(C`Moose\*(C'\fR, \f(CW\*(C`Class::Accessor\*(C'\fR generates accessor methods and a
constructor for your class.
.SS "Object::Tiny"
.IX Subsection "Object::Tiny"
Finally, we have Object::Tiny. This module truly lives up to its
name. It has an incredibly minimal \s-1API\s0 and absolutely no dependencies
(core or not). Still, we think it's a lot easier to use than writing
your own \s-1OO\s0 code from scratch.
.PP
Here's our \f(CW\*(C`File\*(C'\fR class once more:
.PP
.Vb 2
\&  package File;
\&  use Object::Tiny qw( path content last_mod_time );
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
.Ve
.PP
That's it!
.PP
With \f(CW\*(C`Object::Tiny\*(C'\fR, all accessors are read-only. It generates a
constructor for you, as well as the accessors you define.
.SS "Role::Tiny"
.IX Subsection "Role::Tiny"
As we mentioned before, roles provide an alternative to inheritance,
but Perl does not have any built-in role support. If you choose to use
Moose, it comes with a full-fledged role implementation. However, if
you use one of our other recommended \s-1OO\s0 modules, you can still use
roles with Role::Tiny
.PP
\&\f(CW\*(C`Role::Tiny\*(C'\fR provides some of the same features as Moose's role
system, but in a much smaller package. Most notably, it doesn't support
any sort of attribute declaration, so you have to do that by hand.
Still, it's useful, and works well with \f(CW\*(C`Class::Accessor\*(C'\fR and
\&\f(CW\*(C`Object::Tiny\*(C'\fR
.SS "\s-1OO\s0 System Summary"
.IX Subsection "OO System Summary"
Here's a brief recap of the options we covered:
.IP "\(bu" 4
Moose
.Sp
\&\f(CW\*(C`Moose\*(C'\fR is the maximal option. It has a lot of features, a big
ecosystem, and a thriving user base. We also covered Mouse briefly.
\&\f(CW\*(C`Mouse\*(C'\fR is \f(CW\*(C`Moose\*(C'\fR lite, and a reasonable alternative when Moose
doesn't work for your application.
.IP "\(bu" 4
Class::Accessor
.Sp
\&\f(CW\*(C`Class::Accessor\*(C'\fR does a lot less than \f(CW\*(C`Moose\*(C'\fR, and is a nice
alternative if you find \f(CW\*(C`Moose\*(C'\fR overwhelming. It's been around a long
time and is well battle-tested. It also has a minimal \f(CW\*(C`Moose\*(C'\fR
compatibility mode which makes moving from \f(CW\*(C`Class::Accessor\*(C'\fR to
\&\f(CW\*(C`Moose\*(C'\fR easy.
.IP "\(bu" 4
Object::Tiny
.Sp
\&\f(CW\*(C`Object::Tiny\*(C'\fR is the absolute minimal option. It has no dependencies,
and almost no syntax to learn. It's a good option for a super minimal
environment and for throwing something together quickly without having
to worry about details.
.IP "\(bu" 4
Role::Tiny
.Sp
Use \f(CW\*(C`Role::Tiny\*(C'\fR with \f(CW\*(C`Class::Accessor\*(C'\fR or \f(CW\*(C`Object::Tiny\*(C'\fR if you
find yourself considering multiple inheritance. If you go with
\&\f(CW\*(C`Moose\*(C'\fR, it comes with its own role implementation.
.SS "Other \s-1OO\s0 Systems"
.IX Subsection "Other OO Systems"
There are literally dozens of other OO-related modules on \s-1CPAN\s0 besides
those covered here, and you're likely to run across one or more of them
if you work with other people's code.
.PP
In addition, plenty of code in the wild does all of its \s-1OO\s0 \*(L"by hand\*(R",
using just the Perl built-in \s-1OO\s0 features. If you need to maintain such
code, you should read perlobj to understand exactly how Perl's
built-in \s-1OO\s0 works.
.SH "CONCLUSION"
.IX Header "CONCLUSION"
As we said before, Perl's minimal \s-1OO\s0 system has led to a profusion of
\&\s-1OO\s0 systems on \s-1CPAN\s0. While you can still drop down to the bare metal and
write your classes by hand, there's really no reason to do that with
modern Perl.
.PP
For small systems, Object::Tiny and Class::Accessor both provide
minimal object systems that take care of basic boilerplate for you.
.PP
For bigger projects, Moose provides a rich set of features that will
let you focus on implementing your business logic.
.PP
We encourage you to play with and evaluate Moose,
Class::Accessor, and Object::Tiny to see which \s-1OO\s0 system is right
for you.
                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlootut5.18.1                              0100644 0001750 0001750 00000104004 12566207442 023310  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOOTUT 1"
.TH PERLOOTUT 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlootut \- Object\-Oriented Programming in Perl Tutorial
.SH "DATE"
.IX Header "DATE"
This document was created in February, 2011, and the last major
revision was in February, 2013.
.PP
If you are reading this in the future then it's possible that the state
of the art has changed. We recommend you start by reading the perlootut
document in the latest stable release of Perl, rather than this
version.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides an introduction to object-oriented programming
in Perl. It begins with a brief overview of the concepts behind object
oriented design. Then it introduces several different \s-1OO\s0 systems from
\&\s-1CPAN\s0 <http://search.cpan.org> which build on top of what Perl
provides.
.PP
By default, Perl's built-in \s-1OO\s0 system is very minimal, leaving you to
do most of the work. This minimalism made a lot of sense in 1994, but
in the years since Perl 5.0 we've seen a number of common patterns
emerge in Perl \s-1OO.\s0 Fortunately, Perl's flexibility has allowed a rich
ecosystem of Perl \s-1OO\s0 systems to flourish.
.PP
If you want to know how Perl \s-1OO\s0 works under the hood, the perlobj
document explains the nitty gritty details.
.PP
This document assumes that you already understand the basics of Perl
syntax, variable types, operators, and subroutine calls. If you don't
understand these concepts yet, please read perlintro first. You
should also read the perlsyn, perlop, and perlsub documents.
.SH "OBJECT-ORIENTED FUNDAMENTALS"
.IX Header "OBJECT-ORIENTED FUNDAMENTALS"
Most object systems share a number of common concepts. You've probably
heard terms like \*(L"class\*(R", \*(L"object, \*(R"method\*(L", and \*(R"attribute" before.
Understanding the concepts will make it much easier to read and write
object-oriented code. If you're already familiar with these terms, you
should still skim this section, since it explains each concept in terms
of Perl's \s-1OO\s0 implementation.
.PP
Perl's \s-1OO\s0 system is class-based. Class-based \s-1OO\s0 is fairly common. It's
used by Java, \*(C+, C#, Python, Ruby, and many other languages. There
are other object orientation paradigms as well. JavaScript is the most
popular language to use another paradigm. JavaScript's \s-1OO\s0 system is
prototype-based.
.SS "Object"
.IX Subsection "Object"
An \fBobject\fR is a data structure that bundles together data and
subroutines which operate on that data. An object's data is called
\&\fBattributes\fR, and its subroutines are called \fBmethods\fR. An object can
be thought of as a noun (a person, a web service, a computer).
.PP
An object represents a single discrete thing. For example, an object
might represent a file. The attributes for a file object might include
its path, content, and last modification time. If we created an object
to represent \fI/etc/hostname\fR on a machine named \*(L"foo.example.com\*(R",
that object's path would be \*(L"/etc/hostname\*(R", its content would be
\&\*(L"foo\en\*(R", and it's last modification time would be 1304974868 seconds
since the beginning of the epoch.
.PP
The methods associated with a file might include \f(CW\*(C`rename()\*(C'\fR and
\&\f(CW\*(C`write()\*(C'\fR.
.PP
In Perl most objects are hashes, but the \s-1OO\s0 systems we recommend keep
you from having to worry about this. In practice, it's best to consider
an object's internal data structure opaque.
.SS "Class"
.IX Subsection "Class"
A \fBclass\fR defines the behavior of a category of objects. A class is a
name for a category (like \*(L"File\*(R"), and a class also defines the
behavior of objects in that category.
.PP
All objects belong to a specific class. For example, our
\&\fI/etc/hostname\fR object belongs to the \f(CW\*(C`File\*(C'\fR class. When we want to
create a specific object, we start with its class, and \fBconstruct\fR or
\&\fBinstantiate\fR an object. A specific object is often referred to as an
\&\fBinstance\fR of a class.
.PP
In Perl, any package can be a class. The difference between a package
which is a class and one which isn't is based on how the package is
used. Here's our \*(L"class declaration\*(R" for the \f(CW\*(C`File\*(C'\fR class:
.PP
.Vb 1
\&  package File;
.Ve
.PP
In Perl, there is no special keyword for constructing an object.
However, most \s-1OO\s0 modules on \s-1CPAN\s0 use a method named \f(CW\*(C`new()\*(C'\fR to
construct a new object:
.PP
.Vb 5
\&  my $hostname = File\->new(
\&      path          => \*(Aq/etc/hostname\*(Aq,
\&      content       => "foo\en",
\&      last_mod_time => 1304974868,
\&  );
.Ve
.PP
(Don't worry about that \f(CW\*(C`\->\*(C'\fR operator, it will be explained
later.)
.PP
\fIBlessing\fR
.IX Subsection "Blessing"
.PP
As we said earlier, most Perl objects are hashes, but an object can be
an instance of any Perl data type (scalar, array, etc.). Turning a
plain data structure into an object is done by \fBblessing\fR that data
structure using Perl's \f(CW\*(C`bless\*(C'\fR function.
.PP
While we strongly suggest you don't build your objects from scratch,
you should know the term \fBbless\fR. A \fBblessed\fR data structure (aka \*(L"a
referent\*(R") is an object. We sometimes say that an object has been
\&\*(L"blessed into a class\*(R".
.PP
Once a referent has been blessed, the \f(CW\*(C`blessed\*(C'\fR function from the
Scalar::Util core module can tell us its class name. This subroutine
returns an object's class when passed an object, and false otherwise.
.PP
.Vb 1
\&  use Scalar::Util \*(Aqblessed\*(Aq;
\&
\&  print blessed($hash);      # undef
\&  print blessed($hostname);  # File
.Ve
.PP
\fIConstructor\fR
.IX Subsection "Constructor"
.PP
A \fBconstructor\fR creates a new object. In Perl, a class's constructor
is just another method, unlike some other languages, which provide
syntax for constructors. Most Perl classes use \f(CW\*(C`new\*(C'\fR as the name for
their constructor:
.PP
.Vb 1
\&  my $file = File\->new(...);
.Ve
.SS "Methods"
.IX Subsection "Methods"
You already learned that a \fBmethod\fR is a subroutine that operates on
an object. You can think of a method as the things that an object can
\&\fIdo\fR. If an object is a noun, then methods are its verbs (save, print,
open).
.PP
In Perl, methods are simply subroutines that live in a class's package.
Methods are always written to receive the object as their first
argument:
.PP
.Vb 2
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
\&
\&  $file\->print_info;
\&  # The file is at /etc/hostname
.Ve
.PP
What makes a method special is \fIhow it's called\fR. The arrow operator
(\f(CW\*(C`\->\*(C'\fR) tells Perl that we are calling a method.
.PP
When we make a method call, Perl arranges for the method's \fBinvocant\fR
to be passed as the first argument. \fBInvocant\fR is a fancy name for the
thing on the left side of the arrow. The invocant can either be a class
name or an object. We can also pass additional arguments to the method:
.PP
.Vb 3
\&  sub print_info {
\&      my $self   = shift;
\&      my $prefix = shift // "This file is at ";
\&
\&      print $prefix, ", ", $self\->path, "\en";
\&  }
\&
\&  $file\->print_info("The file is located at ");
\&  # The file is located at /etc/hostname
.Ve
.SS "Attributes"
.IX Subsection "Attributes"
Each class can define its \fBattributes\fR. When we instantiate an object,
we assign values to those attributes. For example, every \f(CW\*(C`File\*(C'\fR object
has a path. Attributes are sometimes called \fBproperties\fR.
.PP
Perl has no special syntax for attributes. Under the hood, attributes
are often stored as keys in the object's underlying hash, but don't
worry about this.
.PP
We recommend that you only access attributes via \fBaccessor\fR methods.
These are methods that can get or set the value of each attribute. We
saw this earlier in the \f(CW\*(C`print_info()\*(C'\fR example, which calls \f(CW\*(C`$self\->path\*(C'\fR.
.PP
You might also see the terms \fBgetter\fR and \fBsetter\fR. These are two
types of accessors. A getter gets the attribute's value, while a setter
sets it. Another term for a setter is \fBmutator\fR
.PP
Attributes are typically defined as read-only or read-write. Read-only
attributes can only be set when the object is first created, while
read-write attributes can be altered at any time.
.PP
The value of an attribute may itself be another object. For example,
instead of returning its last mod time as a number, the \f(CW\*(C`File\*(C'\fR class
could return a DateTime object representing that value.
.PP
It's possible to have a class that does not expose any publicly
settable attributes. Not every class has attributes and methods.
.SS "Polymorphism"
.IX Subsection "Polymorphism"
\&\fBPolymorphism\fR is a fancy way of saying that objects from two
different classes share an \s-1API.\s0 For example, we could have \f(CW\*(C`File\*(C'\fR and
\&\f(CW\*(C`WebPage\*(C'\fR classes which both have a \f(CW\*(C`print_content()\*(C'\fR method. This
method might produce different output for each class, but they share a
common interface.
.PP
While the two classes may differ in many ways, when it comes to the
\&\f(CW\*(C`print_content()\*(C'\fR method, they are the same. This means that we can
try to call the \f(CW\*(C`print_content()\*(C'\fR method on an object of either class,
and \fBwe don't have to know what class the object belongs to!\fR
.PP
Polymorphism is one of the key concepts of object-oriented design.
.SS "Inheritance"
.IX Subsection "Inheritance"
\&\fBInheritance\fR lets you create a specialized version of an existing
class. Inheritance lets the new class reuse the methods and attributes
of another class.
.PP
For example, we could create an \f(CW\*(C`File::MP3\*(C'\fR class which \fBinherits\fR
from \f(CW\*(C`File\*(C'\fR. An \f(CW\*(C`File::MP3\*(C'\fR \fBis-a\fR \fImore specific\fR type of \f(CW\*(C`File\*(C'\fR.
All mp3 files are files, but not all files are mp3 files.
.PP
We often refer to inheritance relationships as \fBparent-child\fR or
\&\f(CW\*(C`superclass/subclass\*(C'\fR relationships. Sometimes we say that the child
has an \fBis-a\fR relationship with its parent class.
.PP
\&\f(CW\*(C`File\*(C'\fR is a \fBsuperclass\fR of \f(CW\*(C`File::MP3\*(C'\fR, and \f(CW\*(C`File::MP3\*(C'\fR is a
\&\fBsubclass\fR of \f(CW\*(C`File\*(C'\fR.
.PP
.Vb 1
\&  package File::MP3;
\&
\&  use parent \*(AqFile\*(Aq;
.Ve
.PP
The parent module is one of several ways that Perl lets you define
inheritance relationships.
.PP
Perl allows multiple inheritance, which means that a class can inherit
from multiple parents. While this is possible, we strongly recommend
against it. Generally, you can use \fBroles\fR to do everything you can do
with multiple inheritance, but in a cleaner way.
.PP
Note that there's nothing wrong with defining multiple subclasses of a
given class. This is both common and safe. For example, we might define
\&\f(CW\*(C`File::MP3::FixedBitrate\*(C'\fR and \f(CW\*(C`File::MP3::VariableBitrate\*(C'\fR classes to
distinguish between different types of mp3 file.
.PP
\fIOverriding methods and method resolution\fR
.IX Subsection "Overriding methods and method resolution"
.PP
Inheritance allows two classes to share code. By default, every method
in the parent class is also available in the child. The child can
explicitly \fBoverride\fR a parent's method to provide its own
implementation. For example, if we have an \f(CW\*(C`File::MP3\*(C'\fR object, it has
the \f(CW\*(C`print_info()\*(C'\fR method from \f(CW\*(C`File\*(C'\fR:
.PP
.Vb 6
\&  my $cage = File::MP3\->new(
\&      path          => \*(Aqmp3s/My\-Body\-Is\-a\-Cage.mp3\*(Aq,
\&      content       => $mp3_data,
\&      last_mod_time => 1304974868,
\&      title         => \*(AqMy Body Is a Cage\*(Aq,
\&  );
\&
\&  $cage\->print_info;
\&  # The file is at mp3s/My\-Body\-Is\-a\-Cage.mp3
.Ve
.PP
If we wanted to include the mp3's title in the greeting, we could
override the method:
.PP
.Vb 1
\&  package File::MP3;
\&
\&  use parent \*(AqFile\*(Aq;
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&      print "Its title is ", $self\->title, "\en";
\&  }
\&
\&  $cage\->print_info;
\&  # The file is at mp3s/My\-Body\-Is\-a\-Cage.mp3
\&  # Its title is My Body Is a Cage
.Ve
.PP
The process of determining what method should be used is called
\&\fBmethod resolution\fR. What Perl does is look at the object's class
first (\f(CW\*(C`File::MP3\*(C'\fR in this case). If that class defines the method,
then that class's version of the method is called. If not, Perl looks
at each parent class in turn. For \f(CW\*(C`File::MP3\*(C'\fR, its only parent is
\&\f(CW\*(C`File\*(C'\fR. If \f(CW\*(C`File::MP3\*(C'\fR does not define the method, but \f(CW\*(C`File\*(C'\fR does,
then Perl calls the method in \f(CW\*(C`File\*(C'\fR.
.PP
If \f(CW\*(C`File\*(C'\fR inherited from \f(CW\*(C`DataSource\*(C'\fR, which inherited from \f(CW\*(C`Thing\*(C'\fR,
then Perl would keep looking \*(L"up the chain\*(R" if necessary.
.PP
It is possible to explicitly call a parent method from a child:
.PP
.Vb 1
\&  package File::MP3;
\&
\&  use parent \*(AqFile\*(Aq;
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      $self\->SUPER::print_info();
\&      print "Its title is ", $self\->title, "\en";
\&  }
.Ve
.PP
The \f(CW\*(C`SUPER::\*(C'\fR bit tells Perl to look for the \f(CW\*(C`print_info()\*(C'\fR in the
\&\f(CW\*(C`File::MP3\*(C'\fR class's inheritance chain. When it finds the parent class
that implements this method, the method is called.
.PP
We mentioned multiple inheritance earlier. The main problem with
multiple inheritance is that it greatly complicates method resolution.
See perlobj for more details.
.SS "Encapsulation"
.IX Subsection "Encapsulation"
\&\fBEncapsulation\fR is the idea that an object is opaque. When another
developer uses your class, they don't need to know \fIhow\fR it is
implemented, they just need to know \fIwhat\fR it does.
.PP
Encapsulation is important for several reasons. First, it allows you to
separate the public \s-1API\s0 from the private implementation. This means you
can change that implementation without breaking the \s-1API.\s0
.PP
Second, when classes are well encapsulated, they become easier to
subclass. Ideally, a subclass uses the same APIs to access object data
that its parent class uses. In reality, subclassing sometimes involves
violating encapsulation, but a good \s-1API\s0 can minimize the need to do
this.
.PP
We mentioned earlier that most Perl objects are implemented as hashes
under the hood. The principle of encapsulation tells us that we should
not rely on this. Instead, we should use accessor methods to access the
data in that hash. The object systems that we recommend below all
automate the generation of accessor methods. If you use one of them,
you should never have to access the object as a hash directly.
.SS "Composition"
.IX Subsection "Composition"
In object-oriented code, we often find that one object references
another object. This is called \fBcomposition\fR, or a \fBhas-a\fR
relationship.
.PP
Earlier, we mentioned that the \f(CW\*(C`File\*(C'\fR class's \f(CW\*(C`last_mod_time\*(C'\fR
accessor could return a DateTime object. This is a perfect example
of composition. We could go even further, and make the \f(CW\*(C`path\*(C'\fR and
\&\f(CW\*(C`content\*(C'\fR accessors return objects as well. The \f(CW\*(C`File\*(C'\fR class would
then be \fBcomposed\fR of several other objects.
.SS "Roles"
.IX Subsection "Roles"
\&\fBRoles\fR are something that a class \fIdoes\fR, rather than something that
it \fIis\fR. Roles are relatively new to Perl, but have become rather
popular. Roles are \fBapplied\fR to classes. Sometimes we say that classes
\&\fBconsume\fR roles.
.PP
Roles are an alternative to inheritance for providing polymorphism.
Let's assume we have two classes, \f(CW\*(C`Radio\*(C'\fR and \f(CW\*(C`Computer\*(C'\fR. Both of
these things have on/off switches. We want to model that in our class
definitions.
.PP
We could have both classes inherit from a common parent, like
\&\f(CW\*(C`Machine\*(C'\fR, but not all machines have on/off switches. We could create
a parent class called \f(CW\*(C`HasOnOffSwitch\*(C'\fR, but that is very artificial.
Radios and computers are not specializations of this parent. This
parent is really a rather ridiculous creation.
.PP
This is where roles come in. It makes a lot of sense to create a
\&\f(CW\*(C`HasOnOffSwitch\*(C'\fR role and apply it to both classes. This role would
define a known \s-1API\s0 like providing \f(CW\*(C`turn_on()\*(C'\fR and \f(CW\*(C`turn_off()\*(C'\fR
methods.
.PP
Perl does not have any built-in way to express roles. In the past,
people just bit the bullet and used multiple inheritance. Nowadays,
there are several good choices on \s-1CPAN\s0 for using roles.
.SS "When to Use \s-1OO\s0"
.IX Subsection "When to Use OO"
Object Orientation is not the best solution to every problem. In \fIPerl
Best Practices\fR (copyright 2004, Published by O'Reilly Media, Inc.),
Damian Conway provides a list of criteria to use when deciding if \s-1OO\s0 is
the right fit for your problem:
.IP "\(bu" 4
The system being designed is large, or is likely to become large.
.IP "\(bu" 4
The data can be aggregated into obvious structures, especially if
there's a large amount of data in each aggregate.
.IP "\(bu" 4
The various types of data aggregate form a natural hierarchy that
facilitates the use of inheritance and polymorphism.
.IP "\(bu" 4
You have a piece of data on which many different operations are
applied.
.IP "\(bu" 4
You need to perform the same general operations on related types of
data, but with slight variations depending on the specific type of data
the operations are applied to.
.IP "\(bu" 4
It's likely you'll have to add new data types later.
.IP "\(bu" 4
The typical interactions between pieces of data are best represented by
operators.
.IP "\(bu" 4
The implementation of individual components of the system is likely to
change over time.
.IP "\(bu" 4
The system design is already object-oriented.
.IP "\(bu" 4
Large numbers of other programmers will be using your code modules.
.SH "PERL OO SYSTEMS"
.IX Header "PERL OO SYSTEMS"
As we mentioned before, Perl's built-in \s-1OO\s0 system is very minimal, but
also quite flexible. Over the years, many people have developed systems
which build on top of Perl's built-in system to provide more features
and convenience.
.PP
We strongly recommend that you use one of these systems. Even the most
minimal of them eliminates a lot of repetitive boilerplate. There's
really no good reason to write your classes from scratch in Perl.
.PP
If you are interested in the guts underlying these systems, check out
perlobj.
.SS "Moose"
.IX Subsection "Moose"
Moose bills itself as a \*(L"postmodern object system for Perl 5\*(R". Don't
be scared, the \*(L"postmodern\*(R" label is a callback to Larry's description
of Perl as \*(L"the first postmodern computer language\*(R".
.PP
\&\f(CW\*(C`Moose\*(C'\fR provides a complete, modern \s-1OO\s0 system. Its biggest influence
is the Common Lisp Object System, but it also borrows ideas from
Smalltalk and several other languages. \f(CW\*(C`Moose\*(C'\fR was created by Stevan
Little, and draws heavily from his work on the Perl 6 \s-1OO\s0 design.
.PP
Here is our \f(CW\*(C`File\*(C'\fR class using \f(CW\*(C`Moose\*(C'\fR:
.PP
.Vb 2
\&  package File;
\&  use Moose;
\&
\&  has path          => ( is => \*(Aqro\*(Aq );
\&  has content       => ( is => \*(Aqro\*(Aq );
\&  has last_mod_time => ( is => \*(Aqro\*(Aq );
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
.Ve
.PP
\&\f(CW\*(C`Moose\*(C'\fR provides a number of features:
.IP "\(bu" 4
Declarative sugar
.Sp
\&\f(CW\*(C`Moose\*(C'\fR provides a layer of declarative \*(L"sugar\*(R" for defining classes.
That sugar is just a set of exported functions that make declaring how
your class works simpler and more palatable.  This lets you describe
\&\fIwhat\fR your class is, rather than having to tell Perl \fIhow\fR to
implement your class.
.Sp
The \f(CW\*(C`has()\*(C'\fR subroutine declares an attribute, and \f(CW\*(C`Moose\*(C'\fR
automatically creates accessors for these attributes. It also takes
care of creating a \f(CW\*(C`new()\*(C'\fR method for you. This constructor knows
about the attributes you declared, so you can set them when creating a
new \f(CW\*(C`File\*(C'\fR.
.IP "\(bu" 4
Roles built-in
.Sp
\&\f(CW\*(C`Moose\*(C'\fR lets you define roles the same way you define classes:
.Sp
.Vb 2
\&  package HasOnOfSwitch;
\&  use Moose::Role;
\&
\&  has is_on => (
\&      is  => \*(Aqrw\*(Aq,
\&      isa => \*(AqBool\*(Aq,
\&  );
\&
\&  sub turn_on {
\&      my $self = shift;
\&      $self\->is_on(1);
\&  }
\&
\&  sub turn_off {
\&      my $self = shift;
\&      $self\->is_on(0);
\&  }
.Ve
.IP "\(bu" 4
A miniature type system
.Sp
In the example above, you can see that we passed \f(CW\*(C`isa => \*(AqBool\*(Aq\*(C'\fR
to \f(CW\*(C`has()\*(C'\fR when creating our \f(CW\*(C`is_on\*(C'\fR attribute. This tells \f(CW\*(C`Moose\*(C'\fR
that this attribute must be a boolean value. If we try to set it to an
invalid value, our code will throw an error.
.IP "\(bu" 4
Full introspection and manipulation
.Sp
Perl's built-in introspection features are fairly minimal. \f(CW\*(C`Moose\*(C'\fR
builds on top of them and creates a full introspection layer for your
classes. This lets you ask questions like \*(L"what methods does the File
class implement?\*(R" It also lets you modify your classes
programmatically.
.IP "\(bu" 4
Self-hosted and extensible
.Sp
\&\f(CW\*(C`Moose\*(C'\fR describes itself using its own introspection \s-1API.\s0 Besides
being a cool trick, this means that you can extend \f(CW\*(C`Moose\*(C'\fR using
\&\f(CW\*(C`Moose\*(C'\fR itself.
.IP "\(bu" 4
Rich ecosystem
.Sp
There is a rich ecosystem of \f(CW\*(C`Moose\*(C'\fR extensions on \s-1CPAN\s0 under the
MooseX <http://search.cpan.org/search?query=MooseX&mode=dist>
namespace. In addition, many modules on \s-1CPAN\s0 already use \f(CW\*(C`Moose\*(C'\fR,
providing you with lots of examples to learn from.
.IP "\(bu" 4
Many more features
.Sp
\&\f(CW\*(C`Moose\*(C'\fR is a very powerful tool, and we can't cover all of its
features here. We encourage you to learn more by reading the \f(CW\*(C`Moose\*(C'\fR
documentation, starting with
Moose::Manual <http://search.cpan.org/perldoc?Moose::Manual>.
.PP
Of course, \f(CW\*(C`Moose\*(C'\fR isn't perfect.
.PP
\&\f(CW\*(C`Moose\*(C'\fR can make your code slower to load. \f(CW\*(C`Moose\*(C'\fR itself is not
small, and it does a \fIlot\fR of code generation when you define your
class. This code generation means that your runtime code is as fast as
it can be, but you pay for this when your modules are first loaded.
.PP
This load time hit can be a problem when startup speed is important,
such as with a command-line script or a \*(L"plain vanilla\*(R" \s-1CGI\s0 script that
must be loaded each time it is executed.
.PP
Before you panic, know that many people do use \f(CW\*(C`Moose\*(C'\fR for
command-line tools and other startup-sensitive code. We encourage you
to try \f(CW\*(C`Moose\*(C'\fR out first before worrying about startup speed.
.PP
\&\f(CW\*(C`Moose\*(C'\fR also has several dependencies on other modules. Most of these
are small stand-alone modules, a number of which have been spun off
from \f(CW\*(C`Moose\*(C'\fR. \f(CW\*(C`Moose\*(C'\fR itself, and some of its dependencies, require a
compiler. If you need to install your software on a system without a
compiler, or if having \fIany\fR dependencies is a problem, then \f(CW\*(C`Moose\*(C'\fR
may not be right for you.
.PP
\fIMoo\fR
.IX Subsection "Moo"
.PP
If you try \f(CW\*(C`Moose\*(C'\fR and find that one of these issues is preventing you
from using \f(CW\*(C`Moose\*(C'\fR, we encourage you to consider Moo next. \f(CW\*(C`Moo\*(C'\fR
implements a subset of \f(CW\*(C`Moose\*(C'\fR's functionality in a simpler package.
For most features that it does implement, the end-user \s-1API\s0 is
\&\fIidentical\fR to \f(CW\*(C`Moose\*(C'\fR, meaning you can switch from \f(CW\*(C`Moo\*(C'\fR to
\&\f(CW\*(C`Moose\*(C'\fR quite easily.
.PP
\&\f(CW\*(C`Moo\*(C'\fR does not implement most of \f(CW\*(C`Moose\*(C'\fR's introspection \s-1API,\s0 so it's
often faster when loading your modules. Additionally, none of its
dependencies require \s-1XS,\s0 so it can be installed on machines without a
compiler.
.PP
One of \f(CW\*(C`Moo\*(C'\fR's most compelling features is its interoperability with
\&\f(CW\*(C`Moose\*(C'\fR. When someone tries to use \f(CW\*(C`Moose\*(C'\fR's introspection \s-1API\s0 on a
\&\f(CW\*(C`Moo\*(C'\fR class or role, it is transparently inflated into a \f(CW\*(C`Moose\*(C'\fR
class or role. This makes it easier to incorporate \f(CW\*(C`Moo\*(C'\fR\-using code
into a \f(CW\*(C`Moose\*(C'\fR code base and vice versa.
.PP
For example, a \f(CW\*(C`Moose\*(C'\fR class can subclass a \f(CW\*(C`Moo\*(C'\fR class using
\&\f(CW\*(C`extends\*(C'\fR or consume a \f(CW\*(C`Moo\*(C'\fR role using \f(CW\*(C`with\*(C'\fR.
.PP
The \f(CW\*(C`Moose\*(C'\fR authors hope that one day \f(CW\*(C`Moo\*(C'\fR can be made obsolete by
improving \f(CW\*(C`Moose\*(C'\fR enough, but for now it provides a worthwhile
alternative to \f(CW\*(C`Moose\*(C'\fR.
.SS "Class::Accessor"
.IX Subsection "Class::Accessor"
Class::Accessor is the polar opposite of \f(CW\*(C`Moose\*(C'\fR. It provides very
few features, nor is it self-hosting.
.PP
It is, however, very simple, pure Perl, and it has no non-core
dependencies. It also provides a \*(L"Moose-like\*(R" \s-1API\s0 on demand for the
features it supports.
.PP
Even though it doesn't do much, it is still preferable to writing your
own classes from scratch.
.PP
Here's our \f(CW\*(C`File\*(C'\fR class with \f(CW\*(C`Class::Accessor\*(C'\fR:
.PP
.Vb 2
\&  package File;
\&  use Class::Accessor \*(Aqantlers\*(Aq;
\&
\&  has path          => ( is => \*(Aqro\*(Aq );
\&  has content       => ( is => \*(Aqro\*(Aq );
\&  has last_mod_time => ( is => \*(Aqro\*(Aq );
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
.Ve
.PP
The \f(CW\*(C`antlers\*(C'\fR import flag tells \f(CW\*(C`Class::Accessor\*(C'\fR that you want to
define your attributes using \f(CW\*(C`Moose\*(C'\fR\-like syntax. The only parameter
that you can pass to \f(CW\*(C`has\*(C'\fR is \f(CW\*(C`is\*(C'\fR. We recommend that you use this
Moose-like syntax if you choose \f(CW\*(C`Class::Accessor\*(C'\fR since it means you
will have a smoother upgrade path if you later decide to move to
\&\f(CW\*(C`Moose\*(C'\fR.
.PP
Like \f(CW\*(C`Moose\*(C'\fR, \f(CW\*(C`Class::Accessor\*(C'\fR generates accessor methods and a
constructor for your class.
.SS "Object::Tiny"
.IX Subsection "Object::Tiny"
Finally, we have Object::Tiny. This module truly lives up to its
name. It has an incredibly minimal \s-1API\s0 and absolutely no dependencies
(core or not). Still, we think it's a lot easier to use than writing
your own \s-1OO\s0 code from scratch.
.PP
Here's our \f(CW\*(C`File\*(C'\fR class once more:
.PP
.Vb 2
\&  package File;
\&  use Object::Tiny qw( path content last_mod_time );
\&
\&  sub print_info {
\&      my $self = shift;
\&
\&      print "This file is at ", $self\->path, "\en";
\&  }
.Ve
.PP
That's it!
.PP
With \f(CW\*(C`Object::Tiny\*(C'\fR, all accessors are read-only. It generates a
constructor for you, as well as the accessors you define.
.SS "Role::Tiny"
.IX Subsection "Role::Tiny"
As we mentioned before, roles provide an alternative to inheritance,
but Perl does not have any built-in role support. If you choose to use
Moose, it comes with a full-fledged role implementation. However, if
you use one of our other recommended \s-1OO\s0 modules, you can still use
roles with Role::Tiny
.PP
\&\f(CW\*(C`Role::Tiny\*(C'\fR provides some of the same features as Moose's role
system, but in a much smaller package. Most notably, it doesn't support
any sort of attribute declaration, so you have to do that by hand.
Still, it's useful, and works well with \f(CW\*(C`Class::Accessor\*(C'\fR and
\&\f(CW\*(C`Object::Tiny\*(C'\fR
.SS "\s-1OO\s0 System Summary"
.IX Subsection "OO System Summary"
Here's a brief recap of the options we covered:
.IP "\(bu" 4
Moose
.Sp
\&\f(CW\*(C`Moose\*(C'\fR is the maximal option. It has a lot of features, a big
ecosystem, and a thriving user base. We also covered Moo briefly.
\&\f(CW\*(C`Moo\*(C'\fR is \f(CW\*(C`Moose\*(C'\fR lite, and a reasonable alternative when Moose
doesn't work for your application.
.IP "\(bu" 4
Class::Accessor
.Sp
\&\f(CW\*(C`Class::Accessor\*(C'\fR does a lot less than \f(CW\*(C`Moose\*(C'\fR, and is a nice
alternative if you find \f(CW\*(C`Moose\*(C'\fR overwhelming. It's been around a long
time and is well battle-tested. It also has a minimal \f(CW\*(C`Moose\*(C'\fR
compatibility mode which makes moving from \f(CW\*(C`Class::Accessor\*(C'\fR to
\&\f(CW\*(C`Moose\*(C'\fR easy.
.IP "\(bu" 4
Object::Tiny
.Sp
\&\f(CW\*(C`Object::Tiny\*(C'\fR is the absolute minimal option. It has no dependencies,
and almost no syntax to learn. It's a good option for a super minimal
environment and for throwing something together quickly without having
to worry about details.
.IP "\(bu" 4
Role::Tiny
.Sp
Use \f(CW\*(C`Role::Tiny\*(C'\fR with \f(CW\*(C`Class::Accessor\*(C'\fR or \f(CW\*(C`Object::Tiny\*(C'\fR if you
find yourself considering multiple inheritance. If you go with
\&\f(CW\*(C`Moose\*(C'\fR, it comes with its own role implementation.
.SS "Other \s-1OO\s0 Systems"
.IX Subsection "Other OO Systems"
There are literally dozens of other OO-related modules on \s-1CPAN\s0 besides
those covered here, and you're likely to run across one or more of them
if you work with other people's code.
.PP
In addition, plenty of code in the wild does all of its \s-1OO \s0\*(L"by hand\*(R",
using just the Perl built-in \s-1OO\s0 features. If you need to maintain such
code, you should read perlobj to understand exactly how Perl's
built-in \s-1OO\s0 works.
.SH "CONCLUSION"
.IX Header "CONCLUSION"
As we said before, Perl's minimal \s-1OO\s0 system has led to a profusion of
\&\s-1OO\s0 systems on \s-1CPAN.\s0 While you can still drop down to the bare metal and
write your classes by hand, there's really no reason to do that with
modern Perl.
.PP
For small systems, Object::Tiny and Class::Accessor both provide
minimal object systems that take care of basic boilerplate for you.
.PP
For bigger projects, Moose provides a rich set of features that will
let you focus on implementing your business logic.
.PP
We encourage you to play with and evaluate Moose,
Class::Accessor, and Object::Tiny to see which \s-1OO\s0 system is right
for you.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlop.1                                     0100644 0001750 0001750 00000451117 12566207442 022252  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOP 1"
.TH PERLOP 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlop \- Perl operators and precedence
.IX Xref "operator"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Operator Precedence and Associativity"
.IX Xref "operator, precedence precedence associativity"
.IX Subsection "Operator Precedence and Associativity"
Operator precedence and associativity work in Perl more or less like
they do in mathematics.
.PP
\&\fIOperator precedence\fR means some operators are evaluated before
others.  For example, in \f(CW\*(C`2 + 4 * 5\*(C'\fR, the multiplication has higher
precedence so \f(CW\*(C`4 * 5\*(C'\fR is evaluated first yielding \f(CW\*(C`2 + 20 ==
22\*(C'\fR and not \f(CW\*(C`6 * 5 == 30\*(C'\fR.
.PP
\&\fIOperator associativity\fR defines what happens if a sequence of the
same operators is used one after another: whether the evaluator will
evaluate the left operations first or the right.  For example, in \f(CW\*(C`8
\&\- 4 \- 2\*(C'\fR, subtraction is left associative so Perl evaluates the
expression left to right.  \f(CW\*(C`8 \- 4\*(C'\fR is evaluated first making the
expression \f(CW\*(C`4 \- 2 == 2\*(C'\fR and not \f(CW\*(C`8 \- 2 == 6\*(C'\fR.
.PP
Perl operators have the following associativity and precedence,
listed from highest precedence to lowest.  Operators borrowed from
C keep the same precedence relationship with each other, even where
C's precedence is slightly screwy.  (This makes learning Perl easier
for C folks.)  With very few exceptions, these all operate on scalar
values only, not array values.
.PP
.Vb 10
\&    left        terms and list operators (leftward)
\&    left        \->
\&    nonassoc    ++ \-\-
\&    right       **
\&    right       ! ~ \e and unary + and \-
\&    left        =~ !~
\&    left        * / % x
\&    left        + \- .
\&    left        << >>
\&    nonassoc    named unary operators
\&    nonassoc    < > <= >= lt gt le ge
\&    nonassoc    == != <=> eq ne cmp ~~
\&    left        &
\&    left        | ^
\&    left        &&
\&    left        || //
\&    nonassoc    ..  ...
\&    right       ?:
\&    right       = += \-= *= etc. goto last next redo dump
\&    left        , =>
\&    nonassoc    list operators (rightward)
\&    right       not
\&    left        and
\&    left        or xor
.Ve
.PP
In the following sections, these operators are covered in precedence order.
.PP
Many operators can be overloaded for objects.  See overload.
.SS "Terms and List Operators (Leftward)"
.IX Xref "list operator operator, list term"
.IX Subsection "Terms and List Operators (Leftward)"
A \s-1TERM\s0 has the highest precedence in Perl.  They include variables,
quote and quote-like operators, any expression in parentheses,
and any function whose arguments are parenthesized.  Actually, there
aren't really functions in this sense, just list operators and unary
operators behaving as functions because you put parentheses around
the arguments.  These are all documented in perlfunc.
.PP
If any list operator (\fIprint()\fR, etc.) or any unary operator (\fIchdir()\fR, etc.)
is followed by a left parenthesis as the next token, the operator and
arguments within parentheses are taken to be of highest precedence,
just like a normal function call.
.PP
In the absence of parentheses, the precedence of list operators such as
\&\f(CW\*(C`print\*(C'\fR, \f(CW\*(C`sort\*(C'\fR, or \f(CW\*(C`chmod\*(C'\fR is either very high or very low depending on
whether you are looking at the left side or the right side of the operator.
For example, in
.PP
.Vb 2
\&    @ary = (1, 3, sort 4, 2);
\&    print @ary;         # prints 1324
.Ve
.PP
the commas on the right of the sort are evaluated before the sort,
but the commas on the left are evaluated after.  In other words,
list operators tend to gobble up all arguments that follow, and
then act like a simple \s-1TERM\s0 with regard to the preceding expression.
Be careful with parentheses:
.PP
.Vb 3
\&    # These evaluate exit before doing the print:
\&    print($foo, exit);  # Obviously not what you want.
\&    print $foo, exit;   # Nor is this.
\&
\&    # These do the print before evaluating exit:
\&    (print $foo), exit; # This is what you want.
\&    print($foo), exit;  # Or this.
\&    print ($foo), exit; # Or even this.
.Ve
.PP
Also note that
.PP
.Vb 1
\&    print ($foo & 255) + 1, "\en";
.Ve
.PP
probably doesn't do what you expect at first glance.  The parentheses
enclose the argument list for \f(CW\*(C`print\*(C'\fR which is evaluated (printing
the result of \f(CW\*(C`$foo & 255\*(C'\fR).  Then one is added to the return value
of \f(CW\*(C`print\*(C'\fR (usually 1).  The result is something like this:
.PP
.Vb 1
\&    1 + 1, "\en";    # Obviously not what you meant.
.Ve
.PP
To do what you meant properly, you must write:
.PP
.Vb 1
\&    print(($foo & 255) + 1, "\en");
.Ve
.PP
See \*(L"Named Unary Operators\*(R" for more discussion of this.
.PP
Also parsed as terms are the \f(CW\*(C`do {}\*(C'\fR and \f(CW\*(C`eval {}\*(C'\fR constructs, as
well as subroutine and method calls, and the anonymous
constructors \f(CW\*(C`[]\*(C'\fR and \f(CW\*(C`{}\*(C'\fR.
.PP
See also \*(L"Quote and Quote-like Operators\*(R" toward the end of this section,
as well as \*(L"I/O Operators\*(R".
.SS "The Arrow Operator"
.IX Xref "arrow dereference ->"
.IX Subsection "The Arrow Operator"
"\f(CW\*(C`\->\*(C'\fR" is an infix dereference operator, just as it is in C
and \*(C+.  If the right side is either a \f(CW\*(C`[...]\*(C'\fR, \f(CW\*(C`{...}\*(C'\fR, or a
\&\f(CW\*(C`(...)\*(C'\fR subscript, then the left side must be either a hard or
symbolic reference to an array, a hash, or a subroutine respectively.
(Or technically speaking, a location capable of holding a hard
reference, if it's an array or hash reference being used for
assignment.)  See perlreftut and perlref.
.PP
Otherwise, the right side is a method name or a simple scalar
variable containing either the method name or a subroutine reference,
and the left side must be either an object (a blessed reference)
or a class name (that is, a package name).  See perlobj.
.SS "Auto-increment and Auto-decrement"
.IX Xref "increment auto-increment ++ decrement auto-decrement --"
.IX Subsection "Auto-increment and Auto-decrement"
\&\*(L"++\*(R" and \*(L"\-\-\*(R" work as in C.  That is, if placed before a variable,
they increment or decrement the variable by one before returning the
value, and if placed after, increment or decrement after returning the
value.
.PP
.Vb 3
\&    $i = 0;  $j = 0;
\&    print $i++;  # prints 0
\&    print ++$j;  # prints 1
.Ve
.PP
Note that just as in C, Perl doesn't define \fBwhen\fR the variable is
incremented or decremented. You just know it will be done sometime
before or after the value is returned. This also means that modifying
a variable twice in the same statement will lead to undefined behavior.
Avoid statements like:
.PP
.Vb 2
\&    $i = $i ++;
\&    print ++ $i + $i ++;
.Ve
.PP
Perl will not guarantee what the result of the above statements is.
.PP
The auto-increment operator has a little extra builtin magic to it.  If
you increment a variable that is numeric, or that has ever been used in
a numeric context, you get a normal increment.  If, however, the
variable has been used in only string contexts since it was set, and
has a value that is not the empty string and matches the pattern
\&\f(CW\*(C`/^[a\-zA\-Z]*[0\-9]*\ez/\*(C'\fR, the increment is done as a string, preserving each
character within its range, with carry:
.PP
.Vb 4
\&    print ++($foo = "99");      # prints "100"
\&    print ++($foo = "a0");      # prints "a1"
\&    print ++($foo = "Az");      # prints "Ba"
\&    print ++($foo = "zz");      # prints "aaa"
.Ve
.PP
\&\f(CW\*(C`undef\*(C'\fR is always treated as numeric, and in particular is changed
to \f(CW0\fR before incrementing (so that a post-increment of an undef value
will return \f(CW0\fR rather than \f(CW\*(C`undef\*(C'\fR).
.PP
The auto-decrement operator is not magical.
.SS "Exponentiation"
.IX Xref "** exponentiation power"
.IX Subsection "Exponentiation"
Binary \*(L"**\*(R" is the exponentiation operator.  It binds even more
tightly than unary minus, so \-2**4 is \-(2**4), not (\-2)**4. (This is
implemented using C's \fIpow\fR\|(3) function, which actually works on doubles
internally.)
.SS "Symbolic Unary Operators"
.IX Xref "unary operator operator, unary"
.IX Subsection "Symbolic Unary Operators"
Unary \*(L"!\*(R" performs logical negation, that is, \*(L"not\*(R".  See also \f(CW\*(C`not\*(C'\fR for a lower
precedence version of this.
.IX Xref "!"
.PP
Unary \*(L"\-\*(R" performs arithmetic negation if the operand is numeric,
including any string that looks like a number.  If the operand is
an identifier, a string consisting of a minus sign concatenated
with the identifier is returned.  Otherwise, if the string starts
with a plus or minus, a string starting with the opposite sign is
returned.  One effect of these rules is that \-bareword is equivalent
to the string \*(L"\-bareword\*(R".  If, however, the string begins with a
non-alphabetic character (excluding \*(L"+\*(R" or \*(L"\-\*(R"), Perl will attempt to convert
the string to a numeric and the arithmetic negation is performed. If the
string cannot be cleanly converted to a numeric, Perl will give the warning
\&\fBArgument \*(L"the string\*(R" isn't numeric in negation (\-) at ...\fR.
.IX Xref "- negation, arithmetic"
.PP
Unary \*(L"~\*(R" performs bitwise negation, that is, 1's complement.  For
example, \f(CW\*(C`0666 & ~027\*(C'\fR is 0640.  (See also \*(L"Integer Arithmetic\*(R" and
\&\*(L"Bitwise String Operators\*(R".)  Note that the width of the result is
platform-dependent: ~0 is 32 bits wide on a 32\-bit platform, but 64
bits wide on a 64\-bit platform, so if you are expecting a certain bit
width, remember to use the \*(L"&\*(R" operator to mask off the excess bits.
.IX Xref "~ negation, binary"
.PP
When complementing strings, if all characters have ordinal values under
256, then their complements will, also.  But if they do not, all
characters will be in either 32\- or 64\-bit complements, depending on your
architecture.  So for example, \f(CW\*(C`~"\ex{3B1}"\*(C'\fR is \f(CW"\ex{FFFF_FC4E}"\fR on
32\-bit machines and \f(CW"\ex{FFFF_FFFF_FFFF_FC4E}"\fR on 64\-bit machines.
.PP
Unary \*(L"+\*(R" has no effect whatsoever, even on strings.  It is useful
syntactically for separating a function name from a parenthesized expression
that would otherwise be interpreted as the complete list of function
arguments.  (See examples above under Terms and List Operators (Leftward).)
.IX Xref "+"
.PP
Unary \*(L"\e\*(R" creates a reference to whatever follows it.  See perlreftut
and perlref.  Do not confuse this behavior with the behavior of
backslash within a string, although both forms do convey the notion
of protecting the next thing from interpolation.
.IX Xref "\\ reference backslash"
.SS "Binding Operators"
.IX Xref "binding operator, binding =~ !~"
.IX Subsection "Binding Operators"
Binary \*(L"=~\*(R" binds a scalar expression to a pattern match.  Certain operations
search or modify the string \f(CW$_\fR by default.  This operator makes that kind
of operation work on some other string.  The right argument is a search
pattern, substitution, or transliteration.  The left argument is what is
supposed to be searched, substituted, or transliterated instead of the default
\&\f(CW$_\fR.  When used in scalar context, the return value generally indicates the
success of the operation.  The exceptions are substitution (s///)
and transliteration (y///) with the \f(CW\*(C`/r\*(C'\fR (non-destructive) option,
which cause the \fBr\fReturn value to be the result of the substitution.
Behavior in list context depends on the particular operator.
See \*(L"Regexp Quote-Like Operators\*(R" for details and perlretut for
examples using these operators.
.PP
If the right argument is an expression rather than a search pattern,
substitution, or transliteration, it is interpreted as a search pattern at run
time. Note that this means that its contents will be interpolated twice, so
.PP
.Vb 1
\&    \*(Aq\e\e\*(Aq =~ q\*(Aq\e\e\*(Aq;
.Ve
.PP
is not ok, as the regex engine will end up trying to compile the
pattern \f(CW\*(C`\e\*(C'\fR, which it will consider a syntax error.
.PP
Binary \*(L"!~\*(R" is just like \*(L"=~\*(R" except the return value is negated in
the logical sense.
.PP
Binary \*(L"!~\*(R" with a non-destructive substitution (s///r) or transliteration
(y///r) is a syntax error.
.SS "Multiplicative Operators"
.IX Xref "operator, multiplicative"
.IX Subsection "Multiplicative Operators"
Binary \*(L"*\*(R" multiplies two numbers.
.IX Xref "*"
.PP
Binary \*(L"/\*(R" divides two numbers.
.IX Xref "slash"
.PP
Binary \*(L"%\*(R" is the modulo operator, which computes the division
remainder of its first argument with respect to its second argument.
Given integer
operands \f(CW$a\fR and \f(CW$b\fR: If \f(CW$b\fR is positive, then \f(CW\*(C`$a % $b\*(C'\fR is
\&\f(CW$a\fR minus the largest multiple of \f(CW$b\fR less than or equal to
\&\f(CW$a\fR.  If \f(CW$b\fR is negative, then \f(CW\*(C`$a % $b\*(C'\fR is \f(CW$a\fR minus the
smallest multiple of \f(CW$b\fR that is not less than \f(CW$a\fR (that is, the
result will be less than or equal to zero).  If the operands
\&\f(CW$a\fR and \f(CW$b\fR are floating point values and the absolute value of
\&\f(CW$b\fR (that is \f(CW\*(C`abs($b)\*(C'\fR) is less than \f(CW\*(C`(UV_MAX + 1)\*(C'\fR, only
the integer portion of \f(CW$a\fR and \f(CW$b\fR will be used in the operation
(Note: here \f(CW\*(C`UV_MAX\*(C'\fR means the maximum of the unsigned integer type).
If the absolute value of the right operand (\f(CW\*(C`abs($b)\*(C'\fR) is greater than
or equal to \f(CW\*(C`(UV_MAX + 1)\*(C'\fR, \*(L"%\*(R" computes the floating-point remainder
\&\f(CW$r\fR in the equation \f(CW\*(C`($r = $a \- $i*$b)\*(C'\fR where \f(CW$i\fR is a certain
integer that makes \f(CW$r\fR have the same sign as the right operand
\&\f(CW$b\fR (\fBnot\fR as the left operand \f(CW$a\fR like C function \f(CW\*(C`fmod()\*(C'\fR)
and the absolute value less than that of \f(CW$b\fR.
Note that when \f(CW\*(C`use integer\*(C'\fR is in scope, \*(L"%\*(R" gives you direct access
to the modulo operator as implemented by your C compiler.  This
operator is not as well defined for negative operands, but it will
execute faster.
.IX Xref "% remainder modulo mod"
.PP
Binary \*(L"x\*(R" is the repetition operator.  In scalar context or if the left
operand is not enclosed in parentheses, it returns a string consisting
of the left operand repeated the number of times specified by the right
operand.  In list context, if the left operand is enclosed in
parentheses or is a list formed by \f(CW\*(C`qw/STRING/\*(C'\fR, it repeats the list.
If the right operand is zero or negative, it returns an empty string
or an empty list, depending on the context.
.IX Xref "x"
.PP
.Vb 1
\&    print \*(Aq\-\*(Aq x 80;             # print row of dashes
\&
\&    print "\et" x ($tab/8), \*(Aq \*(Aq x ($tab%8);      # tab over
\&
\&    @ones = (1) x 80;           # a list of 80 1\*(Aqs
\&    @ones = (5) x @ones;        # set all elements to 5
.Ve
.SS "Additive Operators"
.IX Xref "operator, additive"
.IX Subsection "Additive Operators"
Binary \f(CW\*(C`+\*(C'\fR returns the sum of two numbers.
.IX Xref "+"
.PP
Binary \f(CW\*(C`\-\*(C'\fR returns the difference of two numbers.
.IX Xref "-"
.PP
Binary \f(CW\*(C`.\*(C'\fR concatenates two strings.
.IX Xref "string, concatenation concatenation cat concat concatenate ."
.SS "Shift Operators"
.IX Xref "shift operator operator, shift << >> right shift left shift bitwise shift shl shr shift, right shift, left"
.IX Subsection "Shift Operators"
Binary \f(CW\*(C`<<\*(C'\fR returns the value of its left argument shifted left by the
number of bits specified by the right argument.  Arguments should be
integers.  (See also \*(L"Integer Arithmetic\*(R".)
.PP
Binary \f(CW\*(C`>>\*(C'\fR returns the value of its left argument shifted right by
the number of bits specified by the right argument.  Arguments should
be integers.  (See also \*(L"Integer Arithmetic\*(R".)
.PP
Note that both \f(CW\*(C`<<\*(C'\fR and \f(CW\*(C`>>\*(C'\fR in Perl are implemented directly using
\&\f(CW\*(C`<<\*(C'\fR and \f(CW\*(C`>>\*(C'\fR  in C.  If \f(CW\*(C`use integer\*(C'\fR (see \*(L"Integer Arithmetic\*(R") is
in force then signed C integers are used, else unsigned C integers are
used.  Either way, the implementation isn't going to generate results
larger than the size of the integer type Perl was built with (32 bits
or 64 bits).
.PP
The result of overflowing the range of the integers is undefined
because it is undefined also in C.  In other words, using 32\-bit
integers, \f(CW\*(C`1 << 32\*(C'\fR is undefined.  Shifting by a negative number
of bits is also undefined.
.PP
If you get tired of being subject to your platform's native integers,
the \f(CW\*(C`use bigint\*(C'\fR pragma neatly sidesteps the issue altogether:
.PP
.Vb 5
\&    print 20 << 20;  # 20971520
\&    print 20 << 40;  # 5120 on 32\-bit machines, 
\&                     # 21990232555520 on 64\-bit machines
\&    use bigint;
\&    print 20 << 100; # 25353012004564588029934064107520
.Ve
.SS "Named Unary Operators"
.IX Xref "operator, named unary"
.IX Subsection "Named Unary Operators"
The various named unary operators are treated as functions with one
argument, with optional parentheses.
.PP
If any list operator (\fIprint()\fR, etc.) or any unary operator (\fIchdir()\fR, etc.)
is followed by a left parenthesis as the next token, the operator and
arguments within parentheses are taken to be of highest precedence,
just like a normal function call.  For example,
because named unary operators are higher precedence than \f(CW\*(C`||\*(C'\fR:
.PP
.Vb 4
\&    chdir $foo    || die;       # (chdir $foo) || die
\&    chdir($foo)   || die;       # (chdir $foo) || die
\&    chdir ($foo)  || die;       # (chdir $foo) || die
\&    chdir +($foo) || die;       # (chdir $foo) || die
.Ve
.PP
but, because * is higher precedence than named operators:
.PP
.Vb 4
\&    chdir $foo * 20;    # chdir ($foo * 20)
\&    chdir($foo) * 20;   # (chdir $foo) * 20
\&    chdir ($foo) * 20;  # (chdir $foo) * 20
\&    chdir +($foo) * 20; # chdir ($foo * 20)
\&
\&    rand 10 * 20;       # rand (10 * 20)
\&    rand(10) * 20;      # (rand 10) * 20
\&    rand (10) * 20;     # (rand 10) * 20
\&    rand +(10) * 20;    # rand (10 * 20)
.Ve
.PP
Regarding precedence, the filetest operators, like \f(CW\*(C`\-f\*(C'\fR, \f(CW\*(C`\-M\*(C'\fR, etc. are
treated like named unary operators, but they don't follow this functional
parenthesis rule.  That means, for example, that \f(CW\*(C`\-f($file).".bak"\*(C'\fR is
equivalent to \f(CW\*(C`\-f "$file.bak"\*(C'\fR.
.IX Xref "-X filetest operator, filetest"
.PP
See also \*(L"Terms and List Operators (Leftward)\*(R".
.SS "Relational Operators"
.IX Xref "relational operator operator, relational"
.IX Subsection "Relational Operators"
Perl operators that return true or false generally return values 
that can be safely used as numbers.  For example, the relational
operators in this section and the equality operators in the next
one return \f(CW1\fR for true and a special version of the defined empty
string, \f(CW""\fR, which counts as a zero but is exempt from warnings
about improper numeric conversions, just as \f(CW"0 but true"\fR is.
.PP
Binary \*(L"<\*(R" returns true if the left argument is numerically less than
the right argument.
.IX Xref "<"
.PP
Binary \*(L">\*(R" returns true if the left argument is numerically greater
than the right argument.
.IX Xref ">"
.PP
Binary \*(L"<=\*(R" returns true if the left argument is numerically less than
or equal to the right argument.
.IX Xref "<="
.PP
Binary \*(L">=\*(R" returns true if the left argument is numerically greater
than or equal to the right argument.
.IX Xref ">="
.PP
Binary \*(L"lt\*(R" returns true if the left argument is stringwise less than
the right argument.
.IX Xref "lt"
.PP
Binary \*(L"gt\*(R" returns true if the left argument is stringwise greater
than the right argument.
.IX Xref "gt"
.PP
Binary \*(L"le\*(R" returns true if the left argument is stringwise less than
or equal to the right argument.
.IX Xref "le"
.PP
Binary \*(L"ge\*(R" returns true if the left argument is stringwise greater
than or equal to the right argument.
.IX Xref "ge"
.SS "Equality Operators"
.IX Xref "equality equal equals operator, equality"
.IX Subsection "Equality Operators"
Binary \*(L"==\*(R" returns true if the left argument is numerically equal to
the right argument.
.IX Xref "=="
.PP
Binary \*(L"!=\*(R" returns true if the left argument is numerically not equal
to the right argument.
.IX Xref "!="
.PP
Binary \*(L"<=>\*(R" returns \-1, 0, or 1 depending on whether the left
argument is numerically less than, equal to, or greater than the right
argument.  If your platform supports NaNs (not-a-numbers) as numeric
values, using them with \*(L"<=>\*(R" returns undef.  NaN is not \*(L"<\*(R", \*(L"==\*(R", \*(L">\*(R",
\&\*(L"<=\*(R" or \*(L">=\*(R" anything (even NaN), so those 5 return false. NaN != NaN
returns true, as does NaN != anything else. If your platform doesn't
support NaNs then NaN is just a string with numeric value 0.
.IX Xref "<=> spaceship"
.PP
.Vb 2
\&    $ perl \-le \*(Aq$a = "NaN"; print "No NaN support here" if $a == $a\*(Aq
\&    $ perl \-le \*(Aq$a = "NaN"; print "NaN support here" if $a != $a\*(Aq
.Ve
.PP
(Note that the bigint, bigrat, and bignum pragmas all 
support \*(L"NaN\*(R".)
.PP
Binary \*(L"eq\*(R" returns true if the left argument is stringwise equal to
the right argument.
.IX Xref "eq"
.PP
Binary \*(L"ne\*(R" returns true if the left argument is stringwise not equal
to the right argument.
.IX Xref "ne"
.PP
Binary \*(L"cmp\*(R" returns \-1, 0, or 1 depending on whether the left
argument is stringwise less than, equal to, or greater than the right
argument.
.IX Xref "cmp"
.PP
Binary \*(L"~~\*(R" does a smartmatch between its arguments.  Smart matching
is described in the next section.
.IX Xref "~~"
.PP
\&\*(L"lt\*(R", \*(L"le\*(R", \*(L"ge\*(R", \*(L"gt\*(R" and \*(L"cmp\*(R" use the collation (sort) order specified
by the current locale if a legacy \f(CW\*(C`use locale\*(C'\fR (but not
\&\f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR) is in effect.  See
perllocale.  Do not mix these with Unicode, only with legacy binary
encodings.  The standard Unicode::Collate and
Unicode::Collate::Locale modules offer much more powerful solutions to
collation issues.
.SS "Smartmatch Operator"
.IX Subsection "Smartmatch Operator"
First available in Perl 5.10.1 (the 5.10.0 version behaved differently),
binary \f(CW\*(C`~~\*(C'\fR does a \*(L"smartmatch\*(R" between its arguments.  This is mostly
used implicitly in the \f(CW\*(C`when\*(C'\fR construct described in perlsyn, although
not all \f(CW\*(C`when\*(C'\fR clauses call the smartmatch operator.  Unique among all of
Perl's operators, the smartmatch operator can recurse.
.PP
It is also unique in that all other Perl operators impose a context
(usually string or numeric context) on their operands, autoconverting
those operands to those imposed contexts.  In contrast, smartmatch
\&\fIinfers\fR contexts from the actual types of its operands and uses that
type information to select a suitable comparison mechanism.
.PP
The \f(CW\*(C`~~\*(C'\fR operator compares its operands \*(L"polymorphically\*(R", determining how
to compare them according to their actual types (numeric, string, array,
hash, etc.)  Like the equality operators with which it shares the same
precedence, \f(CW\*(C`~~\*(C'\fR returns 1 for true and \f(CW""\fR for false.  It is often best
read aloud as \*(L"in\*(R", \*(L"inside of\*(R", or \*(L"is contained in\*(R", because the left
operand is often looked for \fIinside\fR the right operand.  That makes the
order of the operands to the smartmatch operand often opposite that of
the regular match operator.  In other words, the \*(L"smaller\*(R" thing is usually
placed in the left operand and the larger one in the right.
.PP
The behavior of a smartmatch depends on what type of things its arguments
are, as determined by the following table.  The first row of the table
whose types apply determines the smartmatch behavior.  Because what
actually happens is mostly determined by the type of the second operand,
the table is sorted on the right operand instead of on the left.
.PP
.Vb 4
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& Any       undef      check whether Any is undefined                    
\&                like: !defined Any
\&
\& Any       Object     invoke ~~ overloading on Object, or die
\&
\& Right operand is an ARRAY:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& ARRAY1    ARRAY2     recurse on paired elements of ARRAY1 and ARRAY2[2]
\&                like: (ARRAY1[0] ~~ ARRAY2[0])
\&                        && (ARRAY1[1] ~~ ARRAY2[1]) && ...
\& HASH      ARRAY      any ARRAY elements exist as HASH keys             
\&                like: grep { exists HASH\->{$_} } ARRAY
\& Regexp    ARRAY      any ARRAY elements pattern match Regexp
\&                like: grep { /Regexp/ } ARRAY
\& undef     ARRAY      undef in ARRAY                                    
\&                like: grep { !defined } ARRAY
\& Any       ARRAY      smartmatch each ARRAY element[3]                   
\&                like: grep { Any ~~ $_ } ARRAY
\&
\& Right operand is a HASH:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& HASH1     HASH2      all same keys in both HASHes                      
\&                like: keys HASH1 ==
\&                         grep { exists HASH2\->{$_} } keys HASH1
\& ARRAY     HASH       any ARRAY elements exist as HASH keys             
\&                like: grep { exists HASH\->{$_} } ARRAY
\& Regexp    HASH       any HASH keys pattern match Regexp                
\&                like: grep { /Regexp/ } keys HASH
\& undef     HASH       always false (undef can\*(Aqt be a key)               
\&                like: 0 == 1
\& Any       HASH       HASH key existence                                
\&                like: exists HASH\->{Any}
\&
\& Right operand is CODE:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& ARRAY     CODE       sub returns true on all ARRAY elements[1]
\&                like: !grep { !CODE\->($_) } ARRAY
\& HASH      CODE       sub returns true on all HASH keys[1]
\&                like: !grep { !CODE\->($_) } keys HASH
\& Any       CODE       sub passed Any returns true              
\&                like: CODE\->(Any)
.Ve
.PP
Right operand is a Regexp:
.PP
.Vb 8
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& ARRAY     Regexp     any ARRAY elements match Regexp                   
\&                like: grep { /Regexp/ } ARRAY
\& HASH      Regexp     any HASH keys match Regexp                        
\&                like: grep { /Regexp/ } keys HASH
\& Any       Regexp     pattern match                                     
\&                like: Any =~ /Regexp/
\&
\& Other:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& Object    Any        invoke ~~ overloading on Object,
\&                      or fall back to...
\&
\& Any       Num        numeric equality                                  
\&                 like: Any == Num
\& Num       nummy[4]    numeric equality
\&                 like: Num == nummy
\& undef     Any        check whether undefined
\&                 like: !defined(Any)
\& Any       Any        string equality                                   
\&                 like: Any eq Any
.Ve
.PP
Notes:
.IP "1. Empty hashes or arrays match." 4
.IX Item "1. Empty hashes or arrays match."
.PD 0
.IP "2. That is, each element smartmatches the element of the same index in the other array.[3]" 4
.IX Item "2. That is, each element smartmatches the element of the same index in the other array.[3]"
.IP "3. If a circular reference is found, fall back to referential equality." 4
.IX Item "3. If a circular reference is found, fall back to referential equality."
.IP "4. Either an actual number, or a string that looks like one." 4
.IX Item "4. Either an actual number, or a string that looks like one."
.PD
.PP
The smartmatch implicitly dereferences any non-blessed hash or array
reference, so the \f(CW\*(C`\f(CIHASH\f(CW\*(C'\fR and \f(CW\*(C`\f(CIARRAY\f(CW\*(C'\fR entries apply in those cases.
For blessed references, the \f(CW\*(C`\f(CIObject\f(CW\*(C'\fR entries apply.  Smartmatches
involving hashes only consider hash keys, never hash values.
.PP
The \*(L"like\*(R" code entry is not always an exact rendition.  For example, the
smartmatch operator short-circuits whenever possible, but \f(CW\*(C`grep\*(C'\fR does
not.  Also, \f(CW\*(C`grep\*(C'\fR in scalar context returns the number of matches, but
\&\f(CW\*(C`~~\*(C'\fR returns only true or false.
.PP
Unlike most operators, the smartmatch operator knows to treat \f(CW\*(C`undef\*(C'\fR
specially:
.PP
.Vb 3
\&    use v5.10.1;
\&    @array = (1, 2, 3, undef, 4, 5);
\&    say "some elements undefined" if undef ~~ @array;
.Ve
.PP
Each operand is considered in a modified scalar context, the modification
being that array and hash variables are passed by reference to the
operator, which implicitly dereferences them.  Both elements
of each pair are the same:
.PP
.Vb 1
\&    use v5.10.1;
\&
\&    my %hash = (red    => 1, blue   => 2, green  => 3,
\&                orange => 4, yellow => 5, purple => 6,
\&                black  => 7, grey   => 8, white  => 9);
\&
\&    my @array = qw(red blue green);
\&
\&    say "some array elements in hash keys" if  @array ~~  %hash;
\&    say "some array elements in hash keys" if \e@array ~~ \e%hash;
\&
\&    say "red in array" if "red" ~~  @array;
\&    say "red in array" if "red" ~~ \e@array;
\&
\&    say "some keys end in e" if /e$/ ~~  %hash;
\&    say "some keys end in e" if /e$/ ~~ \e%hash;
.Ve
.PP
Two arrays smartmatch if each element in the first array smartmatches
(that is, is \*(L"in\*(R") the corresponding element in the second array,
recursively.
.PP
.Vb 6
\&    use v5.10.1;
\&    my @little = qw(red blue green);
\&    my @bigger = ("red", "blue", [ "orange", "green" ] );
\&    if (@little ~~ @bigger) {  # true!
\&        say "little is contained in bigger";
\&    }
.Ve
.PP
Because the smartmatch operator recurses on nested arrays, this
will still report that \*(L"red\*(R" is in the array.
.PP
.Vb 4
\&    use v5.10.1;
\&    my @array = qw(red blue green);
\&    my $nested_array = [[[[[[[ @array ]]]]]]];
\&    say "red in array" if "red" ~~ $nested_array;
.Ve
.PP
If two arrays smartmatch each other, then they are deep
copies of each others' values, as this example reports:
.PP
.Vb 3
\&    use v5.12.0;
\&    my @a = (0, 1, 2, [3, [4, 5], 6], 7); 
\&    my @b = (0, 1, 2, [3, [4, 5], 6], 7); 
\&
\&    if (@a ~~ @b && @b ~~ @a) {
\&        say "a and b are deep copies of each other";
\&    } 
\&    elsif (@a ~~ @b) {
\&        say "a smartmatches in b";
\&    } 
\&    elsif (@b ~~ @a) {
\&        say "b smartmatches in a";
\&    } 
\&    else {
\&        say "a and b don\*(Aqt smartmatch each other at all";
\&    }
.Ve
.PP
If you were to set \f(CW\*(C`$b[3] = 4\*(C'\fR, then instead of reporting that \*(L"a and b
are deep copies of each other\*(R", it now reports that \*(L"b smartmatches in a\*(R".
That because the corresponding position in \f(CW@a\fR contains an array that
(eventually) has a 4 in it.
.PP
Smartmatching one hash against another reports whether both contain the
same keys, no more and no less. This could be used to see whether two
records have the same field names, without caring what values those fields
might have.  For example:
.PP
.Vb 3
\&    use v5.10.1;
\&    sub make_dogtag {
\&        state $REQUIRED_FIELDS = { name=>1, rank=>1, serial_num=>1 };
\&
\&        my ($class, $init_fields) = @_;
\&
\&        die "Must supply (only) name, rank, and serial number"
\&            unless $init_fields ~~ $REQUIRED_FIELDS;
\&
\&        ...
\&    }
.Ve
.PP
or, if other non-required fields are allowed, use \s-1ARRAY\s0 ~~ \s-1HASH:\s0
.PP
.Vb 3
\&    use v5.10.1;
\&    sub make_dogtag {
\&        state $REQUIRED_FIELDS = { name=>1, rank=>1, serial_num=>1 };
\&
\&        my ($class, $init_fields) = @_;
\&
\&        die "Must supply (at least) name, rank, and serial number"
\&            unless [keys %{$init_fields}] ~~ $REQUIRED_FIELDS;
\&
\&        ...
\&    }
.Ve
.PP
The smartmatch operator is most often used as the implicit operator of a
\&\f(CW\*(C`when\*(C'\fR clause.  See the section on \*(L"Switch Statements\*(R" in perlsyn.
.PP
\fISmartmatching of Objects\fR
.IX Subsection "Smartmatching of Objects"
.PP
To avoid relying on an object's underlying representation, if the
smartmatch's right operand is an object that doesn't overload \f(CW\*(C`~~\*(C'\fR,
it raises the exception "\f(CW\*(C`Smartmatching a non\-overloaded object
breaks encapsulation\*(C'\fR\*(L". That's because one has no business digging
around to see whether something is \*(R"in" an object. These are all
illegal on objects without a \f(CW\*(C`~~\*(C'\fR overload:
.PP
.Vb 3
\&    %hash ~~ $object
\&       42 ~~ $object
\&   "fred" ~~ $object
.Ve
.PP
However, you can change the way an object is smartmatched by overloading
the \f(CW\*(C`~~\*(C'\fR operator. This is allowed to extend the usual smartmatch semantics.
For objects that do have an \f(CW\*(C`~~\*(C'\fR overload, see overload.
.PP
Using an object as the left operand is allowed, although not very useful.
Smartmatching rules take precedence over overloading, so even if the
object in the left operand has smartmatch overloading, this will be
ignored.  A left operand that is a non-overloaded object falls back on a
string or numeric comparison of whatever the \f(CW\*(C`ref\*(C'\fR operator returns.  That
means that
.PP
.Vb 1
\&    $object ~~ X
.Ve
.PP
does \fInot\fR invoke the overload method with \f(CW\*(C`\f(CIX\f(CW\*(C'\fR as an argument.
Instead the above table is consulted as normal, and based on the type of
\&\f(CW\*(C`\f(CIX\f(CW\*(C'\fR, overloading may or may not be invoked.  For simple strings or
numbers, in becomes equivalent to this:
.PP
.Vb 2
\&    $object ~~ $number          ref($object) == $number
\&    $object ~~ $string          ref($object) eq $string
.Ve
.PP
For example, this reports that the handle smells IOish
(but please don't really do this!):
.PP
.Vb 5
\&    use IO::Handle;
\&    my $fh = IO::Handle\->new();
\&    if ($fh ~~ /\ebIO\eb/) {
\&        say "handle smells IOish";
\&    }
.Ve
.PP
That's because it treats \f(CW$fh\fR as a string like
\&\f(CW"IO::Handle=GLOB(0x8039e0)"\fR, then pattern matches against that.
.SS "Bitwise And"
.IX Xref "operator, bitwise, and bitwise and &"
.IX Subsection "Bitwise And"
Binary \*(L"&\*(R" returns its operands ANDed together bit by bit.
(See also \*(L"Integer Arithmetic\*(R" and \*(L"Bitwise String Operators\*(R".)
.PP
Note that \*(L"&\*(R" has lower priority than relational operators, so for example
the parentheses are essential in a test like
.PP
.Vb 1
\&    print "Even\en" if ($x & 1) == 0;
.Ve
.SS "Bitwise Or and Exclusive Or"
.IX Xref "operator, bitwise, or bitwise or | operator, bitwise, xor bitwise xor ^"
.IX Subsection "Bitwise Or and Exclusive Or"
Binary \*(L"|\*(R" returns its operands ORed together bit by bit.
(See also \*(L"Integer Arithmetic\*(R" and \*(L"Bitwise String Operators\*(R".)
.PP
Binary \*(L"^\*(R" returns its operands XORed together bit by bit.
(See also \*(L"Integer Arithmetic\*(R" and \*(L"Bitwise String Operators\*(R".)
.PP
Note that \*(L"|\*(R" and \*(L"^\*(R" have lower priority than relational operators, so
for example the brackets are essential in a test like
.PP
.Vb 1
\&    print "false\en" if (8 | 2) != 10;
.Ve
.SS "C\-style Logical And"
.IX Xref "&& logical and operator, logical, and"
.IX Subsection "C-style Logical And"
Binary \*(L"&&\*(R" performs a short-circuit logical \s-1AND\s0 operation.  That is,
if the left operand is false, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it
is evaluated.
.SS "C\-style Logical Or"
.IX Xref "|| operator, logical, or"
.IX Subsection "C-style Logical Or"
Binary \*(L"||\*(R" performs a short-circuit logical \s-1OR\s0 operation.  That is,
if the left operand is true, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it
is evaluated.
.SS "Logical Defined-Or"
.IX Xref "operator, logical, defined-or"
.IX Subsection "Logical Defined-Or"
Although it has no direct equivalent in C, Perl's \f(CW\*(C`//\*(C'\fR operator is related
to its C\-style or.  In fact, it's exactly the same as \f(CW\*(C`||\*(C'\fR, except that it
tests the left hand side's definedness instead of its truth.  Thus,
\&\f(CW\*(C`EXPR1 // EXPR2\*(C'\fR returns the value of \f(CW\*(C`EXPR1\*(C'\fR if it's defined,
otherwise, the value of \f(CW\*(C`EXPR2\*(C'\fR is returned. (\f(CW\*(C`EXPR1\*(C'\fR is evaluated
in scalar context, \f(CW\*(C`EXPR2\*(C'\fR in the context of \f(CW\*(C`//\*(C'\fR itself). Usually,
this is the same result as \f(CW\*(C`defined(EXPR1) ? EXPR1 : EXPR2\*(C'\fR (except that
the ternary-operator form can be used as a lvalue, while \f(CW\*(C`EXPR1 // EXPR2\*(C'\fR
cannot). This is very useful for
providing default values for variables.  If you actually want to test if
at least one of \f(CW$a\fR and \f(CW$b\fR is defined, use \f(CW\*(C`defined($a // $b)\*(C'\fR.
.PP
The \f(CW\*(C`||\*(C'\fR, \f(CW\*(C`//\*(C'\fR and \f(CW\*(C`&&\*(C'\fR operators return the last value evaluated
(unlike C's \f(CW\*(C`||\*(C'\fR and \f(CW\*(C`&&\*(C'\fR, which return 0 or 1). Thus, a reasonably
portable way to find out the home directory might be:
.PP
.Vb 4
\&    $home =  $ENV{HOME}
\&          // $ENV{LOGDIR}
\&          // (getpwuid($<))[7]
\&          // die "You\*(Aqre homeless!\en";
.Ve
.PP
In particular, this means that you shouldn't use this
for selecting between two aggregates for assignment:
.PP
.Vb 3
\&    @a = @b || @c;              # this is wrong
\&    @a = scalar(@b) || @c;      # really meant this
\&    @a = @b ? @b : @c;          # this works fine, though
.Ve
.PP
As alternatives to \f(CW\*(C`&&\*(C'\fR and \f(CW\*(C`||\*(C'\fR when used for
control flow, Perl provides the \f(CW\*(C`and\*(C'\fR and \f(CW\*(C`or\*(C'\fR operators (see below).
The short-circuit behavior is identical.  The precedence of \*(L"and\*(R"
and \*(L"or\*(R" is much lower, however, so that you can safely use them after a
list operator without the need for parentheses:
.PP
.Vb 2
\&    unlink "alpha", "beta", "gamma"
\&            or gripe(), next LINE;
.Ve
.PP
With the C\-style operators that would have been written like this:
.PP
.Vb 2
\&    unlink("alpha", "beta", "gamma")
\&            || (gripe(), next LINE);
.Ve
.PP
It would be even more readable to write that this way:
.PP
.Vb 4
\&    unless(unlink("alpha", "beta", "gamma")) {
\&        gripe();
\&        next LINE;
\&    }
.Ve
.PP
Using \*(L"or\*(R" for assignment is unlikely to do what you want; see below.
.SS "Range Operators"
.IX Xref "operator, range range .. ..."
.IX Subsection "Range Operators"
Binary \*(L"..\*(R" is the range operator, which is really two different
operators depending on the context.  In list context, it returns a
list of values counting (up by ones) from the left value to the right
value.  If the left value is greater than the right value then it
returns the empty list.  The range operator is useful for writing
\&\f(CW\*(C`foreach (1..10)\*(C'\fR loops and for doing slice operations on arrays. In
the current implementation, no temporary array is created when the
range operator is used as the expression in \f(CW\*(C`foreach\*(C'\fR loops, but older
versions of Perl might burn a lot of memory when you write something
like this:
.PP
.Vb 3
\&    for (1 .. 1_000_000) {
\&        # code
\&    }
.Ve
.PP
The range operator also works on strings, using the magical
auto-increment, see below.
.PP
In scalar context, \*(L"..\*(R" returns a boolean value.  The operator is
bistable, like a flip-flop, and emulates the line-range (comma)
operator of \fBsed\fR, \fBawk\fR, and various editors. Each \*(L"..\*(R" operator
maintains its own boolean state, even across calls to a subroutine
that contains it. It is false as long as its left operand is false.
Once the left operand is true, the range operator stays true until the
right operand is true, \fI\s-1AFTER\s0\fR which the range operator becomes false
again.  It doesn't become false till the next time the range operator
is evaluated.  It can test the right operand and become false on the
same evaluation it became true (as in \fBawk\fR), but it still returns
true once. If you don't want it to test the right operand until the
next evaluation, as in \fBsed\fR, just use three dots (\*(L"...\*(R") instead of
two.  In all other regards, \*(L"...\*(R" behaves just like \*(L"..\*(R" does.
.PP
The right operand is not evaluated while the operator is in the
\&\*(L"false\*(R" state, and the left operand is not evaluated while the
operator is in the \*(L"true\*(R" state.  The precedence is a little lower
than || and &&.  The value returned is either the empty string for
false, or a sequence number (beginning with 1) for true.  The sequence
number is reset for each range encountered.  The final sequence number
in a range has the string \*(L"E0\*(R" appended to it, which doesn't affect
its numeric value, but gives you something to search for if you want
to exclude the endpoint.  You can exclude the beginning point by
waiting for the sequence number to be greater than 1.
.PP
If either operand of scalar \*(L"..\*(R" is a constant expression,
that operand is considered true if it is equal (\f(CW\*(C`==\*(C'\fR) to the current
input line number (the \f(CW$.\fR variable).
.PP
To be pedantic, the comparison is actually \f(CW\*(C`int(EXPR) == int(EXPR)\*(C'\fR,
but that is only an issue if you use a floating point expression; when
implicitly using \f(CW$.\fR as described in the previous paragraph, the
comparison is \f(CW\*(C`int(EXPR) == int($.)\*(C'\fR which is only an issue when \f(CW$.\fR
is set to a floating point value and you are not reading from a file.
Furthermore, \f(CW"span" .. "spat"\fR or \f(CW\*(C`2.18 .. 3.14\*(C'\fR will not do what
you want in scalar context because each of the operands are evaluated
using their integer representation.
.PP
Examples:
.PP
As a scalar operator:
.PP
.Vb 2
\&    if (101 .. 200) { print; } # print 2nd hundred lines, short for
\&                               #  if ($. == 101 .. $. == 200) { print; }
\&
\&    next LINE if (1 .. /^$/);  # skip header lines, short for
\&                               #   next LINE if ($. == 1 .. /^$/);
\&                               # (typically in a loop labeled LINE)
\&
\&    s/^/> / if (/^$/ .. eof());  # quote body
\&
\&    # parse mail messages
\&    while (<>) {
\&        $in_header =   1  .. /^$/;
\&        $in_body   = /^$/ .. eof;
\&        if ($in_header) {
\&            # do something
\&        } else { # in body
\&            # do something else
\&        }
\&    } continue {
\&        close ARGV if eof;             # reset $. each file
\&    }
.Ve
.PP
Here's a simple example to illustrate the difference between
the two range operators:
.PP
.Vb 4
\&    @lines = ("   \- Foo",
\&              "01 \- Bar",
\&              "1  \- Baz",
\&              "   \- Quux");
\&
\&    foreach (@lines) {
\&        if (/0/ .. /1/) {
\&            print "$_\en";
\&        }
\&    }
.Ve
.PP
This program will print only the line containing \*(L"Bar\*(R". If
the range operator is changed to \f(CW\*(C`...\*(C'\fR, it will also print the
\&\*(L"Baz\*(R" line.
.PP
And now some examples as a list operator:
.PP
.Vb 3
\&    for (101 .. 200) { print }      # print $_ 100 times
\&    @foo = @foo[0 .. $#foo];        # an expensive no\-op
\&    @foo = @foo[$#foo\-4 .. $#foo];  # slice last 5 items
.Ve
.PP
The range operator (in list context) makes use of the magical
auto-increment algorithm if the operands are strings.  You
can say
.PP
.Vb 1
\&    @alphabet = ("A" .. "Z");
.Ve
.PP
to get all normal letters of the English alphabet, or
.PP
.Vb 1
\&    $hexdigit = (0 .. 9, "a" .. "f")[$num & 15];
.Ve
.PP
to get a hexadecimal digit, or
.PP
.Vb 2
\&    @z2 = ("01" .. "31");
\&    print $z2[$mday];
.Ve
.PP
to get dates with leading zeros.
.PP
If the final value specified is not in the sequence that the magical
increment would produce, the sequence goes until the next value would
be longer than the final value specified.
.PP
If the initial value specified isn't part of a magical increment
sequence (that is, a non-empty string matching \f(CW\*(C`/^[a\-zA\-Z]*[0\-9]*\ez/\*(C'\fR),
only the initial value will be returned.  So the following will only
return an alpha:
.PP
.Vb 2
\&    use charnames "greek";
\&    my @greek_small =  ("\eN{alpha}" .. "\eN{omega}");
.Ve
.PP
To get the 25 traditional lowercase Greek letters, including both sigmas,
you could use this instead:
.PP
.Vb 5
\&    use charnames "greek";
\&    my @greek_small =  map { chr } ( ord("\eN{alpha}") 
\&                                        ..
\&                                     ord("\eN{omega}") 
\&                                   );
.Ve
.PP
However, because there are \fImany\fR other lowercase Greek characters than
just those, to match lowercase Greek characters in a regular expression,
you would use the pattern \f(CW\*(C`/(?:(?=\ep{Greek})\ep{Lower})+/\*(C'\fR.
.PP
Because each operand is evaluated in integer form, \f(CW\*(C`2.18 .. 3.14\*(C'\fR will
return two elements in list context.
.PP
.Vb 1
\&    @list = (2.18 .. 3.14); # same as @list = (2 .. 3);
.Ve
.SS "Conditional Operator"
.IX Xref "operator, conditional operator, ternary ternary ?:"
.IX Subsection "Conditional Operator"
Ternary \*(L"?:\*(R" is the conditional operator, just as in C.  It works much
like an if-then-else.  If the argument before the ? is true, the
argument before the : is returned, otherwise the argument after the :
is returned.  For example:
.PP
.Vb 2
\&    printf "I have %d dog%s.\en", $n,
\&            ($n == 1) ? "" : "s";
.Ve
.PP
Scalar or list context propagates downward into the 2nd
or 3rd argument, whichever is selected.
.PP
.Vb 3
\&    $a = $ok ? $b : $c;  # get a scalar
\&    @a = $ok ? @b : @c;  # get an array
\&    $a = $ok ? @b : @c;  # oops, that\*(Aqs just a count!
.Ve
.PP
The operator may be assigned to if both the 2nd and 3rd arguments are
legal lvalues (meaning that you can assign to them):
.PP
.Vb 1
\&    ($a_or_b ? $a : $b) = $c;
.Ve
.PP
Because this operator produces an assignable result, using assignments
without parentheses will get you in trouble.  For example, this:
.PP
.Vb 1
\&    $a % 2 ? $a += 10 : $a += 2
.Ve
.PP
Really means this:
.PP
.Vb 1
\&    (($a % 2) ? ($a += 10) : $a) += 2
.Ve
.PP
Rather than this:
.PP
.Vb 1
\&    ($a % 2) ? ($a += 10) : ($a += 2)
.Ve
.PP
That should probably be written more simply as:
.PP
.Vb 1
\&    $a += ($a % 2) ? 10 : 2;
.Ve
.SS "Assignment Operators"
.IX Xref "assignment operator, assignment = **= += *= &= <<= &&= -= = |= >>= ||= = .= %= ^= x="
.IX Subsection "Assignment Operators"
\&\*(L"=\*(R" is the ordinary assignment operator.
.PP
Assignment operators work as in C.  That is,
.PP
.Vb 1
\&    $a += 2;
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&    $a = $a + 2;
.Ve
.PP
although without duplicating any side effects that dereferencing the lvalue
might trigger, such as from \fItie()\fR.  Other assignment operators work similarly.
The following are recognized:
.PP
.Vb 4
\&    **=    +=    *=    &=    <<=    &&=
\&           \-=    /=    |=    >>=    ||=
\&           .=    %=    ^=           //=
\&                 x=
.Ve
.PP
Although these are grouped by family, they all have the precedence
of assignment.
.PP
Unlike in C, the scalar assignment operator produces a valid lvalue.
Modifying an assignment is equivalent to doing the assignment and
then modifying the variable that was assigned to.  This is useful
for modifying a copy of something, like this:
.PP
.Vb 1
\&    ($tmp = $global) =~ tr/13579/24680/;
.Ve
.PP
Although as of 5.14, that can be also be accomplished this way:
.PP
.Vb 2
\&    use v5.14;
\&    $tmp = ($global =~  tr/13579/24680/r);
.Ve
.PP
Likewise,
.PP
.Vb 1
\&    ($a += 2) *= 3;
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&    $a += 2;
\&    $a *= 3;
.Ve
.PP
Similarly, a list assignment in list context produces the list of
lvalues assigned to, and a list assignment in scalar context returns
the number of elements produced by the expression on the right hand
side of the assignment.
.SS "Comma Operator"
.IX Xref "comma operator, comma ,"
.IX Subsection "Comma Operator"
Binary \*(L",\*(R" is the comma operator.  In scalar context it evaluates
its left argument, throws that value away, then evaluates its right
argument and returns that value.  This is just like C's comma operator.
.PP
In list context, it's just the list argument separator, and inserts
both its arguments into the list.  These arguments are also evaluated
from left to right.
.PP
The \f(CW\*(C`=>\*(C'\fR operator is a synonym for the comma except that it causes a
word on its left to be interpreted as a string if it begins with a letter
or underscore and is composed only of letters, digits and underscores.
This includes operands that might otherwise be interpreted as operators,
constants, single number v\-strings or function calls. If in doubt about
this behavior, the left operand can be quoted explicitly.
.PP
Otherwise, the \f(CW\*(C`=>\*(C'\fR operator behaves exactly as the comma operator
or list argument separator, according to context.
.PP
For example:
.PP
.Vb 1
\&    use constant FOO => "something";
\&
\&    my %h = ( FOO => 23 );
.Ve
.PP
is equivalent to:
.PP
.Vb 1
\&    my %h = ("FOO", 23);
.Ve
.PP
It is \fI\s-1NOT\s0\fR:
.PP
.Vb 1
\&    my %h = ("something", 23);
.Ve
.PP
The \f(CW\*(C`=>\*(C'\fR operator is helpful in documenting the correspondence
between keys and values in hashes, and other paired elements in lists.
.PP
.Vb 2
\&    %hash = ( $key => $value );
\&    login( $username => $password );
.Ve
.PP
The special quoting behavior ignores precedence, and hence may apply to
\&\fIpart\fR of the left operand:
.PP
.Vb 1
\&    print time.shift => "bbb";
.Ve
.PP
That example prints something like \*(L"1314363215shiftbbb\*(R", because the
\&\f(CW\*(C`=>\*(C'\fR implicitly quotes the \f(CW\*(C`shift\*(C'\fR immediately on its left, ignoring
the fact that \f(CW\*(C`time.shift\*(C'\fR is the entire left operand.
.SS "List Operators (Rightward)"
.IX Xref "operator, list, rightward list operator"
.IX Subsection "List Operators (Rightward)"
On the right side of a list operator, the comma has very low precedence,
such that it controls all comma-separated expressions found there.
The only operators with lower precedence are the logical operators
\&\*(L"and\*(R", \*(L"or\*(R", and \*(L"not\*(R", which may be used to evaluate calls to list
operators without the need for parentheses:
.PP
.Vb 1
\&    open HANDLE, "< :utf8", "filename" or die "Can\*(Aqt open: $!\en";
.Ve
.PP
However, some people find that code harder to read than writing
it with parentheses:
.PP
.Vb 1
\&    open(HANDLE, "< :utf8", "filename") or die "Can\*(Aqt open: $!\en";
.Ve
.PP
in which case you might as well just use the more customary \*(L"||\*(R" operator:
.PP
.Vb 1
\&    open(HANDLE, "< :utf8", "filename") || die "Can\*(Aqt open: $!\en";
.Ve
.PP
See also discussion of list operators in Terms and List Operators (Leftward).
.SS "Logical Not"
.IX Xref "operator, logical, not not"
.IX Subsection "Logical Not"
Unary \*(L"not\*(R" returns the logical negation of the expression to its right.
It's the equivalent of \*(L"!\*(R" except for the very low precedence.
.SS "Logical And"
.IX Xref "operator, logical, and and"
.IX Subsection "Logical And"
Binary \*(L"and\*(R" returns the logical conjunction of the two surrounding
expressions.  It's equivalent to \f(CW\*(C`&&\*(C'\fR except for the very low
precedence.  This means that it short-circuits: the right
expression is evaluated only if the left expression is true.
.SS "Logical or and Exclusive Or"
.IX Xref "operator, logical, or operator, logical, xor operator, logical, exclusive or or xor"
.IX Subsection "Logical or and Exclusive Or"
Binary \*(L"or\*(R" returns the logical disjunction of the two surrounding
expressions.  It's equivalent to \f(CW\*(C`||\*(C'\fR except for the very low precedence.
This makes it useful for control flow:
.PP
.Vb 1
\&    print FH $data              or die "Can\*(Aqt write to FH: $!";
.Ve
.PP
This means that it short-circuits: the right expression is evaluated
only if the left expression is false.  Due to its precedence, you must
be careful to avoid using it as replacement for the \f(CW\*(C`||\*(C'\fR operator.
It usually works out better for flow control than in assignments:
.PP
.Vb 3
\&    $a = $b or $c;              # bug: this is wrong
\&    ($a = $b) or $c;            # really means this
\&    $a = $b || $c;              # better written this way
.Ve
.PP
However, when it's a list-context assignment and you're trying to use
\&\f(CW\*(C`||\*(C'\fR for control flow, you probably need \*(L"or\*(R" so that the assignment
takes higher precedence.
.PP
.Vb 2
\&    @info = stat($file) || die;     # oops, scalar sense of stat!
\&    @info = stat($file) or die;     # better, now @info gets its due
.Ve
.PP
Then again, you could always use parentheses.
.PP
Binary \f(CW\*(C`xor\*(C'\fR returns the exclusive-OR of the two surrounding expressions.
It cannot short-circuit (of course).
.PP
There is no low precedence operator for defined-OR.
.SS "C Operators Missing From Perl"
.IX Xref "operator, missing from perl & * typecasting (TYPE)"
.IX Subsection "C Operators Missing From Perl"
Here is what C has that Perl doesn't:
.IP "unary &" 8
.IX Item "unary &"
Address-of operator.  (But see the \*(L"\e\*(R" operator for taking a reference.)
.IP "unary *" 8
.IX Item "unary *"
Dereference-address operator. (Perl's prefix dereferencing
operators are typed: $, @, %, and &.)
.IP "(\s-1TYPE\s0)" 8
.IX Item "(TYPE)"
Type-casting operator.
.SS "Quote and Quote-like Operators"
.IX Xref "operator, quote operator, quote-like q qq qx qw m qr s tr ' '' "" """" ` `` << escape sequence escape"
.IX Subsection "Quote and Quote-like Operators"
While we usually think of quotes as literal values, in Perl they
function as operators, providing various kinds of interpolating and
pattern matching capabilities.  Perl provides customary quote characters
for these behaviors, but also provides a way for you to choose your
quote character for any of them.  In the following table, a \f(CW\*(C`{}\*(C'\fR represents
any pair of delimiters you choose.
.PP
.Vb 11
\&    Customary  Generic        Meaning        Interpolates
\&        \*(Aq\*(Aq       q{}          Literal             no
\&        ""      qq{}          Literal             yes
\&        \`\`      qx{}          Command             yes*
\&                qw{}         Word list            no
\&        //       m{}       Pattern match          yes*
\&                qr{}          Pattern             yes*
\&                 s{}{}      Substitution          yes*
\&                tr{}{}    Transliteration         no (but see below)
\&                 y{}{}    Transliteration         no (but see below)
\&        <<EOF                 here\-doc            yes*
\&
\&        * unless the delimiter is \*(Aq\*(Aq.
.Ve
.PP
Non-bracketing delimiters use the same character fore and aft, but the four
sorts of \s-1ASCII\s0 brackets (round, angle, square, curly) all nest, which means
that
.PP
.Vb 1
\&    q{foo{bar}baz}
.Ve
.PP
is the same as
.PP
.Vb 1
\&    \*(Aqfoo{bar}baz\*(Aq
.Ve
.PP
Note, however, that this does not always work for quoting Perl code:
.PP
.Vb 1
\&    $s = q{ if($a eq "}") ... }; # WRONG
.Ve
.PP
is a syntax error. The \f(CW\*(C`Text::Balanced\*(C'\fR module (standard as of v5.8,
and from \s-1CPAN\s0 before then) is able to do this properly.
.PP
There can be whitespace between the operator and the quoting
characters, except when \f(CW\*(C`#\*(C'\fR is being used as the quoting character.
\&\f(CW\*(C`q#foo#\*(C'\fR is parsed as the string \f(CW\*(C`foo\*(C'\fR, while \f(CW\*(C`q #foo#\*(C'\fR is the
operator \f(CW\*(C`q\*(C'\fR followed by a comment.  Its argument will be taken
from the next line.  This allows you to write:
.PP
.Vb 2
\&    s {foo}  # Replace foo
\&      {bar}  # with bar.
.Ve
.PP
The following escape sequences are available in constructs that interpolate,
and in transliterations:
.IX Xref "\\t \\n \\r \\f \\b \\a \\e \\x \\0 \\c \\N \\N{} \\o{}"
.PP
.Vb 10
\&    Sequence     Note  Description
\&    \et                  tab               (HT, TAB)
\&    \en                  newline           (NL)
\&    \er                  return            (CR)
\&    \ef                  form feed         (FF)
\&    \eb                  backspace         (BS)
\&    \ea                  alarm (bell)      (BEL)
\&    \ee                  escape            (ESC)
\&    \ex{263A}     [1,8]  hex char          (example: SMILEY)
\&    \ex1b         [2,8]  restricted range hex char (example: ESC)
\&    \eN{name}     [3]    named Unicode character or character sequence
\&    \eN{U+263D}   [4,8]  Unicode character (example: FIRST QUARTER MOON)
\&    \ec[          [5]    control char      (example: chr(27))
\&    \eo{23072}    [6,8]  octal char        (example: SMILEY)
\&    \e033         [7,8]  restricted range octal char  (example: ESC)
.Ve
.IP "[1]" 4
.IX Item "[1]"
The result is the character specified by the hexadecimal number between
the braces.  See \*(L"[8]\*(R" below for details on which character.
.Sp
Only hexadecimal digits are valid between the braces. If an invalid
character is encountered, a warning will be issued and the invalid
character and all subsequent characters (valid or invalid) within the
braces will be discarded.
.Sp
If there are no valid digits between the braces, the generated character is
the \s-1NULL\s0 character (\f(CW\*(C`\ex{00}\*(C'\fR).  However, an explicit empty brace (\f(CW\*(C`\ex{}\*(C'\fR)
will not cause a warning (currently).
.IP "[2]" 4
.IX Item "[2]"
The result is the character specified by the hexadecimal number in the range
0x00 to 0xFF.  See \*(L"[8]\*(R" below for details on which character.
.Sp
Only hexadecimal digits are valid following \f(CW\*(C`\ex\*(C'\fR.  When \f(CW\*(C`\ex\*(C'\fR is followed
by fewer than two valid digits, any valid digits will be zero-padded.  This
means that \f(CW\*(C`\ex7\*(C'\fR will be interpreted as \f(CW\*(C`\ex07\*(C'\fR, and a lone <\ex> will be
interpreted as \f(CW\*(C`\ex00\*(C'\fR.  Except at the end of a string, having fewer than
two valid digits will result in a warning.  Note that although the warning
says the illegal character is ignored, it is only ignored as part of the
escape and will still be used as the subsequent character in the string.
For example:
.Sp
.Vb 5
\&  Original    Result    Warns?
\&  "\ex7"       "\ex07"    no
\&  "\ex"        "\ex00"    no
\&  "\ex7q"      "\ex07q"   yes
\&  "\exq"       "\ex00q"   yes
.Ve
.IP "[3]" 4
.IX Item "[3]"
The result is the Unicode character or character sequence given by \fIname\fR.
See charnames.
.IP "[4]" 4
.IX Item "[4]"
\&\f(CW\*(C`\eN{U+\f(CIhexadecimal number\f(CW}\*(C'\fR means the Unicode character whose Unicode code
point is \fIhexadecimal number\fR.
.IP "[5]" 4
.IX Item "[5]"
The character following \f(CW\*(C`\ec\*(C'\fR is mapped to some other character as shown in the
table:
.Sp
.Vb 10
\& Sequence   Value
\&   \ec@      chr(0)
\&   \ecA      chr(1)
\&   \eca      chr(1)
\&   \ecB      chr(2)
\&   \ecb      chr(2)
\&   ...
\&   \ecZ      chr(26)
\&   \ecz      chr(26)
\&   \ec[      chr(27)
\&   \ec]      chr(29)
\&   \ec^      chr(30)
\&   \ec?      chr(127)
.Ve
.Sp
In other words, it's the character whose code point has had 64 xor'd with
its uppercase.  \f(CW\*(C`\ec?\*(C'\fR is \s-1DELETE\s0 because \f(CW\*(C`ord("?") ^ 64\*(C'\fR is 127, and
\&\f(CW\*(C`\ec@\*(C'\fR is \s-1NULL\s0 because the ord of \*(L"@\*(R" is 64, so xor'ing 64 itself produces 0.
.Sp
Also, \f(CW\*(C`\ec\e\f(CIX\f(CW\*(C'\fR yields \f(CW\*(C` chr(28) . "\f(CIX\f(CW"\*(C'\fR for any \fIX\fR, but cannot come at the
end of a string, because the backslash would be parsed as escaping the end
quote.
.Sp
On \s-1ASCII\s0 platforms, the resulting characters from the list above are the
complete set of \s-1ASCII\s0 controls.  This isn't the case on \s-1EBCDIC\s0 platforms; see
\&\*(L"\s-1OPERATOR DIFFERENCES\*(R"\s0 in perlebcdic for the complete list of what these
sequences mean on both \s-1ASCII\s0 and \s-1EBCDIC\s0 platforms.
.Sp
Use of any other character following the \*(L"c\*(R" besides those listed above is
discouraged, and some are deprecated with the intention of removing
those in a later Perl version.  What happens for any of these
other characters currently though, is that the value is derived by xor'ing
with the seventh bit, which is 64.
.Sp
To get platform independent controls, you can use \f(CW\*(C`\eN{...}\*(C'\fR.
.IP "[6]" 4
.IX Item "[6]"
The result is the character specified by the octal number between the braces.
See \*(L"[8]\*(R" below for details on which character.
.Sp
If a character that isn't an octal digit is encountered, a warning is raised,
and the value is based on the octal digits before it, discarding it and all
following characters up to the closing brace.  It is a fatal error if there are
no octal digits at all.
.IP "[7]" 4
.IX Item "[7]"
The result is the character specified by the three-digit octal number in the
range 000 to 777 (but best to not use above 077, see next paragraph).  See
\&\*(L"[8]\*(R" below for details on which character.
.Sp
Some contexts allow 2 or even 1 digit, but any usage without exactly
three digits, the first being a zero, may give unintended results.  (For
example, in a regular expression it may be confused with a backreference;
see \*(L"Octal escapes\*(R" in perlrebackslash.)  Starting in Perl 5.14, you may
use \f(CW\*(C`\eo{}\*(C'\fR instead, which avoids all these problems.  Otherwise, it is best to
use this construct only for ordinals \f(CW\*(C`\e077\*(C'\fR and below, remembering to pad to
the left with zeros to make three digits.  For larger ordinals, either use
\&\f(CW\*(C`\eo{}\*(C'\fR, or convert to something else, such as to hex and use \f(CW\*(C`\ex{}\*(C'\fR
instead.
.Sp
Having fewer than 3 digits may lead to a misleading warning message that says
that what follows is ignored.  For example, \f(CW"\e128"\fR in the \s-1ASCII\s0 character set
is equivalent to the two characters \f(CW"\en8"\fR, but the warning \f(CW\*(C`Illegal octal
digit \*(Aq8\*(Aq ignored\*(C'\fR will be thrown.  If \f(CW"\en8"\fR is what you want, you can
avoid this warning by padding your octal number with \f(CW0\fR's: \f(CW"\e0128"\fR.
.IP "[8]" 4
.IX Item "[8]"
Several constructs above specify a character by a number.  That number
gives the character's position in the character set encoding (indexed from 0).
This is called synonymously its ordinal, code position, or code point.  Perl
works on platforms that have a native encoding currently of either ASCII/Latin1
or \s-1EBCDIC,\s0 each of which allow specification of 256 characters.  In general, if
the number is 255 (0xFF, 0377) or below, Perl interprets this in the platform's
native encoding.  If the number is 256 (0x100, 0400) or above, Perl interprets
it as a Unicode code point and the result is the corresponding Unicode
character.  For example \f(CW\*(C`\ex{50}\*(C'\fR and \f(CW\*(C`\eo{120}\*(C'\fR both are the number 80 in
decimal, which is less than 256, so the number is interpreted in the native
character set encoding.  In \s-1ASCII\s0 the character in the 80th position (indexed
from 0) is the letter \*(L"P\*(R", and in \s-1EBCDIC\s0 it is the ampersand symbol \*(L"&\*(R".
\&\f(CW\*(C`\ex{100}\*(C'\fR and \f(CW\*(C`\eo{400}\*(C'\fR are both 256 in decimal, so the number is interpreted
as a Unicode code point no matter what the native encoding is.  The name of the
character in the 256th position (indexed by 0) in Unicode is
\&\f(CW\*(C`LATIN CAPITAL LETTER A WITH MACRON\*(C'\fR.
.Sp
There are a couple of exceptions to the above rule.  \f(CW\*(C`\eN{U+\f(CIhex\ number\f(CW}\*(C'\fR is
always interpreted as a Unicode code point, so that \f(CW\*(C`\eN{U+0050}\*(C'\fR is \*(L"P\*(R" even
on \s-1EBCDIC\s0 platforms.  And if \f(CW\*(C`use\ encoding\*(C'\fR is in effect, the
number is considered to be in that encoding, and is translated from that into
the platform's native encoding if there is a corresponding native character;
otherwise to Unicode.
.PP
\&\fB\s-1NOTE\s0\fR: Unlike C and other languages, Perl has no \f(CW\*(C`\ev\*(C'\fR escape sequence for
the vertical tab (\s-1VT,\s0 which is 11 in both \s-1ASCII\s0 and \s-1EBCDIC\s0), but you may
use \f(CW\*(C`\eck\*(C'\fR or
\&\f(CW\*(C`\ex0b\*(C'\fR.  (\f(CW\*(C`\ev\*(C'\fR
does have meaning in regular expression patterns in Perl, see perlre.)
.PP
The following escape sequences are available in constructs that interpolate,
but not in transliterations.
.IX Xref "\\l \\u \\L \\U \\E \\Q \\F"
.PP
.Vb 9
\&    \el          lowercase next character only
\&    \eu          titlecase (not uppercase!) next character only
\&    \eL          lowercase all characters till \eE or end of string
\&    \eU          uppercase all characters till \eE or end of string
\&    \eF          foldcase all characters till \eE or end of string
\&    \eQ          quote (disable) pattern metacharacters till \eE or
\&                end of string
\&    \eE          end either case modification or quoted section
\&                (whichever was last seen)
.Ve
.PP
See \*(L"quotemeta\*(R" in perlfunc for the exact definition of characters that
are quoted by \f(CW\*(C`\eQ\*(C'\fR.
.PP
\&\f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR, and \f(CW\*(C`\eQ\*(C'\fR can stack, in which case you need one
\&\f(CW\*(C`\eE\*(C'\fR for each.  For example:
.PP
.Vb 2
\& say"This \eQquoting \eubusiness \eUhere isn\*(Aqt quite\eE done yet,\eE is it?";
\& This quoting\e Business\e HERE\e ISN\e\*(AqT\e QUITE\e done\e yet\e, is it?
.Ve
.PP
If \f(CW\*(C`use locale\*(C'\fR is in effect (but not \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR),
the case map used by \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR,
\&\f(CW\*(C`\eu\*(C'\fR, and \f(CW\*(C`\eU\*(C'\fR is taken from the current locale.  See perllocale.
If Unicode (for example, \f(CW\*(C`\eN{}\*(C'\fR or code points of 0x100 or
beyond) is being used, the case map used by \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, and
\&\f(CW\*(C`\eU\*(C'\fR is as defined by Unicode.  That means that case-mapping
a single character can sometimes produce several characters.
Under \f(CW\*(C`use locale\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR produces the same results as \f(CW\*(C`\eL\*(C'\fR.
.PP
All systems use the virtual \f(CW"\en"\fR to represent a line terminator,
called a \*(L"newline\*(R".  There is no such thing as an unvarying, physical
newline character.  It is only an illusion that the operating system,
device drivers, C libraries, and Perl all conspire to preserve.  Not all
systems read \f(CW"\er"\fR as \s-1ASCII CR\s0 and \f(CW"\en"\fR as \s-1ASCII LF. \s0 For example,
on the ancient Macs (pre-MacOS X) of yesteryear, these used to be reversed,
and on systems without line terminator,
printing \f(CW"\en"\fR might emit no actual data.  In general, use \f(CW"\en"\fR when
you mean a \*(L"newline\*(R" for your system, but use the literal \s-1ASCII\s0 when you
need an exact character.  For example, most networking protocols expect
and prefer a \s-1CR+LF \s0(\f(CW"\e015\e012"\fR or \f(CW"\ecM\ecJ"\fR) for line terminators,
and although they often accept just \f(CW"\e012"\fR, they seldom tolerate just
\&\f(CW"\e015"\fR.  If you get in the habit of using \f(CW"\en"\fR for networking,
you may be burned some day.
.IX Xref "newline line terminator eol end of line \\n \\r \\r\\n"
.PP
For constructs that do interpolate, variables beginning with "\f(CW\*(C`$\*(C'\fR\*(L"
or \*(R"\f(CW\*(C`@\*(C'\fR" are interpolated.  Subscripted variables such as \f(CW$a[3]\fR or
\&\f(CW\*(C`$href\->{key}[0]\*(C'\fR are also interpolated, as are array and hash slices.
But method calls such as \f(CW\*(C`$obj\->meth\*(C'\fR are not.
.PP
Interpolating an array or slice interpolates the elements in order,
separated by the value of \f(CW$"\fR, so is equivalent to interpolating
\&\f(CW\*(C`join $", @array\*(C'\fR.  \*(L"Punctuation\*(R" arrays such as \f(CW\*(C`@*\*(C'\fR are usually
interpolated only if the name is enclosed in braces \f(CW\*(C`@{*}\*(C'\fR, but the
arrays \f(CW@_\fR, \f(CW\*(C`@+\*(C'\fR, and \f(CW\*(C`@\-\*(C'\fR are interpolated even without braces.
.PP
For double-quoted strings, the quoting from \f(CW\*(C`\eQ\*(C'\fR is applied after
interpolation and escapes are processed.
.PP
.Vb 1
\&    "abc\eQfoo\etbar$s\eExyz"
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&    "abc" . quotemeta("foo\etbar$s") . "xyz"
.Ve
.PP
For the pattern of regex operators (\f(CW\*(C`qr//\*(C'\fR, \f(CW\*(C`m//\*(C'\fR and \f(CW\*(C`s///\*(C'\fR),
the quoting from \f(CW\*(C`\eQ\*(C'\fR is applied after interpolation is processed,
but before escapes are processed. This allows the pattern to match
literally (except for \f(CW\*(C`$\*(C'\fR and \f(CW\*(C`@\*(C'\fR). For example, the following matches:
.PP
.Vb 1
\&    \*(Aq\es\et\*(Aq =~ /\eQ\es\et/
.Ve
.PP
Because \f(CW\*(C`$\*(C'\fR or \f(CW\*(C`@\*(C'\fR trigger interpolation, you'll need to use something
like \f(CW\*(C`/\eQuser\eE\e@\eQhost/\*(C'\fR to match them literally.
.PP
Patterns are subject to an additional level of interpretation as a
regular expression.  This is done as a second pass, after variables are
interpolated, so that regular expressions may be incorporated into the
pattern from the variables.  If this is not what you want, use \f(CW\*(C`\eQ\*(C'\fR to
interpolate a variable literally.
.PP
Apart from the behavior described above, Perl does not expand
multiple levels of interpolation.  In particular, contrary to the
expectations of shell programmers, back-quotes do \fI\s-1NOT\s0\fR interpolate
within double quotes, nor do single quotes impede evaluation of
variables when used within double quotes.
.SS "Regexp Quote-Like Operators"
.IX Xref "operator, regexp"
.IX Subsection "Regexp Quote-Like Operators"
Here are the quote-like operators that apply to pattern
matching and related activities.
.IP "qr/STRING/msixpodual" 8
.IX Xref "qr i m o s x p"
.IX Item "qr/STRING/msixpodual"
This operator quotes (and possibly compiles) its \fI\s-1STRING\s0\fR as a regular
expression.  \fI\s-1STRING\s0\fR is interpolated the same way as \fI\s-1PATTERN\s0\fR
in \f(CW\*(C`m/PATTERN/\*(C'\fR.  If \*(L"'\*(R" is used as the delimiter, no interpolation
is done.  Returns a Perl value which may be used instead of the
corresponding \f(CW\*(C`/STRING/msixpodual\*(C'\fR expression. The returned value is a
normalized version of the original pattern. It magically differs from
a string containing the same characters: \f(CW\*(C`ref(qr/x/)\*(C'\fR returns \*(L"Regexp\*(R";
however, dereferencing it is not well defined (you currently get the 
normalized version of the original pattern, but this may change).
.Sp
For example,
.Sp
.Vb 3
\&    $rex = qr/my.STRING/is;
\&    print $rex;                 # prints (?si\-xm:my.STRING)
\&    s/$rex/foo/;
.Ve
.Sp
is equivalent to
.Sp
.Vb 1
\&    s/my.STRING/foo/is;
.Ve
.Sp
The result may be used as a subpattern in a match:
.Sp
.Vb 5
\&    $re = qr/$pattern/;
\&    $string =~ /foo${re}bar/;   # can be interpolated in other
\&                                # patterns
\&    $string =~ $re;             # or used standalone
\&    $string =~ /$re/;           # or this way
.Ve
.Sp
Since Perl may compile the pattern at the moment of execution of the \fIqr()\fR
operator, using \fIqr()\fR may have speed advantages in some situations,
notably if the result of \fIqr()\fR is used standalone:
.Sp
.Vb 11
\&    sub match {
\&        my $patterns = shift;
\&        my @compiled = map qr/$_/i, @$patterns;
\&        grep {
\&            my $success = 0;
\&            foreach my $pat (@compiled) {
\&                $success = 1, last if /$pat/;
\&            }
\&            $success;
\&        } @_;
\&    }
.Ve
.Sp
Precompilation of the pattern into an internal representation at
the moment of \fIqr()\fR avoids a need to recompile the pattern every
time a match \f(CW\*(C`/$pat/\*(C'\fR is attempted.  (Perl has many other internal
optimizations, but none would be triggered in the above example if
we did not use \fIqr()\fR operator.)
.Sp
Options (specified by the following modifiers) are:
.Sp
.Vb 10
\&    m   Treat string as multiple lines.
\&    s   Treat string as single line. (Make . match a newline)
\&    i   Do case\-insensitive pattern matching.
\&    x   Use extended regular expressions.
\&    p   When matching preserve a copy of the matched string so
\&        that ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} will be
\&        defined.
\&    o   Compile pattern only once.
\&    a   ASCII\-restrict: Use ASCII for \ed, \es, \ew; specifying two
\&        a\*(Aqs further restricts /i matching so that no ASCII
\&        character will match a non\-ASCII one.
\&    l   Use the locale.
\&    u   Use Unicode rules.
\&    d   Use Unicode or native charset, as in 5.12 and earlier.
.Ve
.Sp
If a precompiled pattern is embedded in a larger pattern then the effect
of \*(L"msixpluad\*(R" will be propagated appropriately.  The effect the \*(L"o\*(R"
modifier has is not propagated, being restricted to those patterns
explicitly using it.
.Sp
The last four modifiers listed above, added in Perl 5.14,
control the character set semantics, but \f(CW\*(C`/a\*(C'\fR is the only one you are likely
to want to specify explicitly; the other three are selected
automatically by various pragmas.
.Sp
See perlre for additional information on valid syntax for \s-1STRING,\s0 and
for a detailed look at the semantics of regular expressions.  In
particular, all modifiers except the largely obsolete \f(CW\*(C`/o\*(C'\fR are further
explained in \*(L"Modifiers\*(R" in perlre.  \f(CW\*(C`/o\*(C'\fR is described in the next section.
.IP "m/PATTERN/msixpodualgc" 8
.IX Xref "m operator, match regexp, options regexp regex, options regex m s i x p o g c"
.IX Item "m/PATTERN/msixpodualgc"
.PD 0
.IP "/PATTERN/msixpodualgc" 8
.IX Item "/PATTERN/msixpodualgc"
.PD
Searches a string for a pattern match, and in scalar context returns
true if it succeeds, false if it fails.  If no string is specified
via the \f(CW\*(C`=~\*(C'\fR or \f(CW\*(C`!~\*(C'\fR operator, the \f(CW$_\fR string is searched.  (The
string specified with \f(CW\*(C`=~\*(C'\fR need not be an lvalue\*(--it may be the
result of an expression evaluation, but remember the \f(CW\*(C`=~\*(C'\fR binds
rather tightly.)  See also perlre.
.Sp
Options are as described in \f(CW\*(C`qr//\*(C'\fR above; in addition, the following match
process modifiers are available:
.Sp
.Vb 3
\& g  Match globally, i.e., find all occurrences.
\& c  Do not reset search position on a failed match when /g is
\&    in effect.
.Ve
.Sp
If \*(L"/\*(R" is the delimiter then the initial \f(CW\*(C`m\*(C'\fR is optional.  With the \f(CW\*(C`m\*(C'\fR
you can use any pair of non-whitespace (\s-1ASCII\s0) characters
as delimiters.  This is particularly useful for matching path names
that contain \*(L"/\*(R", to avoid \s-1LTS \s0(leaning toothpick syndrome).  If \*(L"?\*(R" is
the delimiter, then a match-only-once rule applies,
described in \f(CW\*(C`m?PATTERN?\*(C'\fR below.
If \*(L"'\*(R" is the delimiter, no interpolation is performed on the \s-1PATTERN.\s0
When using a character valid in an identifier, whitespace is required
after the \f(CW\*(C`m\*(C'\fR.
.Sp
\&\s-1PATTERN\s0 may contain variables, which will be interpolated
every time the pattern search is evaluated, except
for when the delimiter is a single quote.  (Note that \f(CW$(\fR, \f(CW$)\fR, and
\&\f(CW$|\fR are not interpolated because they look like end-of-string tests.)
Perl will not recompile the pattern unless an interpolated
variable that it contains changes.  You can force Perl to skip the
test and never recompile by adding a \f(CW\*(C`/o\*(C'\fR (which stands for \*(L"once\*(R")
after the trailing delimiter.
Once upon a time, Perl would recompile regular expressions
unnecessarily, and this modifier was useful to tell it not to do so, in the
interests of speed.  But now, the only reasons to use \f(CW\*(C`/o\*(C'\fR are either:
.RS 8
.IP "1." 4
The variables are thousands of characters long and you know that they
don't change, and you need to wring out the last little bit of speed by
having Perl skip testing for that.  (There is a maintenance penalty for
doing this, as mentioning \f(CW\*(C`/o\*(C'\fR constitutes a promise that you won't
change the variables in the pattern.  If you do change them, Perl won't
even notice.)
.IP "2." 4
you want the pattern to use the initial values of the variables
regardless of whether they change or not.  (But there are saner ways
of accomplishing this than using \f(CW\*(C`/o\*(C'\fR.)
.IP "3." 4
If the pattern contains embedded code, such as
.Sp
.Vb 3
\&    use re \*(Aqeval\*(Aq;
\&    $code = \*(Aqfoo(?{ $x })\*(Aq;
\&    /$code/
.Ve
.Sp
then perl will recompile each time, even though the pattern string hasn't
changed, to ensure that the current value of \f(CW$x\fR is seen each time.
Use \f(CW\*(C`/o\*(C'\fR if you want to avoid this.
.RE
.RS 8
.Sp
The bottom line is that using \f(CW\*(C`/o\*(C'\fR is almost never a good idea.
.RE
.IP "The empty pattern //" 8
.IX Item "The empty pattern //"
If the \s-1PATTERN\s0 evaluates to the empty string, the last
\&\fIsuccessfully\fR matched regular expression is used instead. In this
case, only the \f(CW\*(C`g\*(C'\fR and \f(CW\*(C`c\*(C'\fR flags on the empty pattern are honored;
the other flags are taken from the original pattern. If no match has
previously succeeded, this will (silently) act instead as a genuine
empty pattern (which will always match).
.Sp
Note that it's possible to confuse Perl into thinking \f(CW\*(C`//\*(C'\fR (the empty
regex) is really \f(CW\*(C`//\*(C'\fR (the defined-or operator).  Perl is usually pretty
good about this, but some pathological cases might trigger this, such as
\&\f(CW\*(C`$a///\*(C'\fR (is that \f(CW\*(C`($a) / (//)\*(C'\fR or \f(CW\*(C`$a // /\*(C'\fR?) and \f(CW\*(C`print $fh //\*(C'\fR
(\f(CW\*(C`print $fh(//\*(C'\fR or \f(CW\*(C`print($fh //\*(C'\fR?).  In all of these examples, Perl
will assume you meant defined-or.  If you meant the empty regex, just
use parentheses or spaces to disambiguate, or even prefix the empty
regex with an \f(CW\*(C`m\*(C'\fR (so \f(CW\*(C`//\*(C'\fR becomes \f(CW\*(C`m//\*(C'\fR).
.IP "Matching in list context" 8
.IX Item "Matching in list context"
If the \f(CW\*(C`/g\*(C'\fR option is not used, \f(CW\*(C`m//\*(C'\fR in list context returns a
list consisting of the subexpressions matched by the parentheses in the
pattern, that is, (\f(CW$1\fR, \f(CW$2\fR, \f(CW$3\fR...)  (Note that here \f(CW$1\fR etc. are
also set).  When there are no parentheses in the pattern, the return
value is the list \f(CW\*(C`(1)\*(C'\fR for success.  
With or without parentheses, an empty list is returned upon failure.
.Sp
Examples:
.Sp
.Vb 2
\& open(TTY, "+</dev/tty")
\&    || die "can\*(Aqt access /dev/tty: $!";
\&
\& <TTY> =~ /^y/i && foo();       # do foo if desired
\&
\& if (/Version: *([0\-9.]*)/) { $version = $1; }
\&
\& next if m#^/usr/spool/uucp#;
\&
\& # poor man\*(Aqs grep
\& $arg = shift;
\& while (<>) {
\&    print if /$arg/o; # compile only once (no longer needed!)
\& }
\&
\& if (($F1, $F2, $Etc) = ($foo =~ /^(\eS+)\es+(\eS+)\es*(.*)/))
.Ve
.Sp
This last example splits \f(CW$foo\fR into the first two words and the
remainder of the line, and assigns those three fields to \f(CW$F1\fR, \f(CW$F2\fR, and
\&\f(CW$Etc\fR.  The conditional is true if any variables were assigned; that is,
if the pattern matched.
.Sp
The \f(CW\*(C`/g\*(C'\fR modifier specifies global pattern matching\*(--that is,
matching as many times as possible within the string. How it behaves
depends on the context. In list context, it returns a list of the
substrings matched by any capturing parentheses in the regular
expression. If there are no parentheses, it returns a list of all
the matched strings, as if there were parentheses around the whole
pattern.
.Sp
In scalar context, each execution of \f(CW\*(C`m//g\*(C'\fR finds the next match,
returning true if it matches, and false if there is no further match.
The position after the last match can be read or set using the \f(CW\*(C`pos()\*(C'\fR
function; see \*(L"pos\*(R" in perlfunc. A failed match normally resets the
search position to the beginning of the string, but you can avoid that
by adding the \f(CW\*(C`/c\*(C'\fR modifier (for example, \f(CW\*(C`m//gc\*(C'\fR). Modifying the target
string also resets the search position.
.IP "\eG assertion" 8
.IX Item "G assertion"
You can intermix \f(CW\*(C`m//g\*(C'\fR matches with \f(CW\*(C`m/\eG.../g\*(C'\fR, where \f(CW\*(C`\eG\*(C'\fR is a
zero-width assertion that matches the exact position where the
previous \f(CW\*(C`m//g\*(C'\fR, if any, left off. Without the \f(CW\*(C`/g\*(C'\fR modifier, the
\&\f(CW\*(C`\eG\*(C'\fR assertion still anchors at \f(CW\*(C`pos()\*(C'\fR as it was at the start of
the operation (see \*(L"pos\*(R" in perlfunc), but the match is of course only
attempted once. Using \f(CW\*(C`\eG\*(C'\fR without \f(CW\*(C`/g\*(C'\fR on a target string that has
not previously had a \f(CW\*(C`/g\*(C'\fR match applied to it is the same as using
the \f(CW\*(C`\eA\*(C'\fR assertion to match the beginning of the string.  Note also
that, currently, \f(CW\*(C`\eG\*(C'\fR is only properly supported when anchored at the
very beginning of the pattern.
.Sp
Examples:
.Sp
.Vb 2
\&    # list context
\&    ($one,$five,$fifteen) = (\`uptime\` =~ /(\ed+\e.\ed+)/g);
\&
\&    # scalar context
\&    local $/ = "";
\&    while ($paragraph = <>) {
\&        while ($paragraph =~ /\ep{Ll}[\*(Aq")]*[.!?]+[\*(Aq")]*\es/g) {
\&            $sentences++;
\&        }
\&    }
\&    say $sentences;
.Ve
.Sp
Here's another way to check for sentences in a paragraph:
.Sp
.Vb 10
\& my $sentence_rx = qr{
\&    (?: (?<= ^ ) | (?<= \es ) )  # after start\-of\-string or
\&                                # whitespace
\&    \ep{Lu}                      # capital letter
\&    .*?                         # a bunch of anything
\&    (?<= \eS )                   # that ends in non\-
\&                                # whitespace
\&    (?<! \eb [DMS]r  )           # but isn\*(Aqt a common abbr.
\&    (?<! \eb Mrs )
\&    (?<! \eb Sra )
\&    (?<! \eb St  )
\&    [.?!]                       # followed by a sentence
\&                                # ender
\&    (?= $ | \es )                # in front of end\-of\-string
\&                                # or whitespace
\& }sx;
\& local $/ = "";
\& while (my $paragraph = <>) {
\&    say "NEW PARAGRAPH";
\&    my $count = 0;
\&    while ($paragraph =~ /($sentence_rx)/g) {
\&        printf "\etgot sentence %d: <%s>\en", ++$count, $1;
\&    }
\& }
.Ve
.Sp
Here's how to use \f(CW\*(C`m//gc\*(C'\fR with \f(CW\*(C`\eG\*(C'\fR:
.Sp
.Vb 10
\&    $_ = "ppooqppqq";
\&    while ($i++ < 2) {
\&        print "1: \*(Aq";
\&        print $1 while /(o)/gc; print "\*(Aq, pos=", pos, "\en";
\&        print "2: \*(Aq";
\&        print $1 if /\eG(q)/gc;  print "\*(Aq, pos=", pos, "\en";
\&        print "3: \*(Aq";
\&        print $1 while /(p)/gc; print "\*(Aq, pos=", pos, "\en";
\&    }
\&    print "Final: \*(Aq$1\*(Aq, pos=",pos,"\en" if /\eG(.)/;
.Ve
.Sp
The last example should print:
.Sp
.Vb 7
\&    1: \*(Aqoo\*(Aq, pos=4
\&    2: \*(Aqq\*(Aq, pos=5
\&    3: \*(Aqpp\*(Aq, pos=7
\&    1: \*(Aq\*(Aq, pos=7
\&    2: \*(Aqq\*(Aq, pos=8
\&    3: \*(Aq\*(Aq, pos=8
\&    Final: \*(Aqq\*(Aq, pos=8
.Ve
.Sp
Notice that the final match matched \f(CW\*(C`q\*(C'\fR instead of \f(CW\*(C`p\*(C'\fR, which a match
without the \f(CW\*(C`\eG\*(C'\fR anchor would have done. Also note that the final match
did not update \f(CW\*(C`pos\*(C'\fR. \f(CW\*(C`pos\*(C'\fR is only updated on a \f(CW\*(C`/g\*(C'\fR match. If the
final match did indeed match \f(CW\*(C`p\*(C'\fR, it's a good bet that you're running a
very old (pre\-5.6.0) version of Perl.
.Sp
A useful idiom for \f(CW\*(C`lex\*(C'\fR\-like scanners is \f(CW\*(C`/\eG.../gc\*(C'\fR.  You can
combine several regexps like this to process a string part-by-part,
doing different actions depending on which regexp matched.  Each
regexp tries to match where the previous one leaves off.
.Sp
.Vb 4
\& $_ = <<\*(AqEOL\*(Aq;
\&    $url = URI::URL\->new( "http://example.com/" );
\&    die if $url eq "xXx";
\& EOL
\&
\& LOOP: {
\&     print(" digits"),       redo LOOP if /\eG\ed+\eb[,.;]?\es*/gc;
\&     print(" lowercase"),    redo LOOP
\&                                    if /\eG\ep{Ll}+\eb[,.;]?\es*/gc;
\&     print(" UPPERCASE"),    redo LOOP
\&                                    if /\eG\ep{Lu}+\eb[,.;]?\es*/gc;
\&     print(" Capitalized"),  redo LOOP
\&                              if /\eG\ep{Lu}\ep{Ll}+\eb[,.;]?\es*/gc;
\&     print(" MiXeD"),        redo LOOP if /\eG\epL+\eb[,.;]?\es*/gc;
\&     print(" alphanumeric"), redo LOOP
\&                            if /\eG[\ep{Alpha}\epN]+\eb[,.;]?\es*/gc;
\&     print(" line\-noise"),   redo LOOP if /\eG\eW+/gc;
\&     print ". That\*(Aqs all!\en";
\& }
.Ve
.Sp
Here is the output (split into several lines):
.Sp
.Vb 4
\& line\-noise lowercase line\-noise UPPERCASE line\-noise UPPERCASE
\& line\-noise lowercase line\-noise lowercase line\-noise lowercase
\& lowercase line\-noise lowercase lowercase line\-noise lowercase
\& lowercase line\-noise MiXeD line\-noise. That\*(Aqs all!
.Ve
.IP "m?PATTERN?msixpodualgc" 8
.IX Xref "? operator, match-once"
.IX Item "m?PATTERN?msixpodualgc"
.PD 0
.IP "?PATTERN?msixpodualgc" 8
.IX Item "?PATTERN?msixpodualgc"
.PD
This is just like the \f(CW\*(C`m/PATTERN/\*(C'\fR search, except that it matches
only once between calls to the \fIreset()\fR operator.  This is a useful
optimization when you want to see only the first occurrence of
something in each file of a set of files, for instance.  Only \f(CW\*(C`m??\*(C'\fR
patterns local to the current package are reset.
.Sp
.Vb 7
\&    while (<>) {
\&        if (m?^$?) {
\&                            # blank line between header and body
\&        }
\&    } continue {
\&        reset if eof;       # clear m?? status for next file
\&    }
.Ve
.Sp
Another example switched the first \*(L"latin1\*(R" encoding it finds
to \*(L"utf8\*(R" in a pod file:
.Sp
.Vb 1
\&    s//utf8/ if m? ^ =encoding \eh+ \eK latin1 ?x;
.Ve
.Sp
The match-once behavior is controlled by the match delimiter being
\&\f(CW\*(C`?\*(C'\fR; with any other delimiter this is the normal \f(CW\*(C`m//\*(C'\fR operator.
.Sp
For historical reasons, the leading \f(CW\*(C`m\*(C'\fR in \f(CW\*(C`m?PATTERN?\*(C'\fR is optional,
but the resulting \f(CW\*(C`?PATTERN?\*(C'\fR syntax is deprecated, will warn on
usage and might be removed from a future stable release of Perl (without
further notice!).
.IP "s/PATTERN/REPLACEMENT/msixpodualgcer" 8
.IX Xref "substitute substitution replace regexp, replace regexp, substitute m s i x p o g c e r"
.IX Item "s/PATTERN/REPLACEMENT/msixpodualgcer"
Searches a string for a pattern, and if found, replaces that pattern
with the replacement text and returns the number of substitutions
made.  Otherwise it returns false (specifically, the empty string).
.Sp
If the \f(CW\*(C`/r\*(C'\fR (non-destructive) option is used then it runs the
substitution on a copy of the string and instead of returning the
number of substitutions, it returns the copy whether or not a
substitution occurred.  The original string is never changed when
\&\f(CW\*(C`/r\*(C'\fR is used.  The copy will always be a plain string, even if the
input is an object or a tied variable.
.Sp
If no string is specified via the \f(CW\*(C`=~\*(C'\fR or \f(CW\*(C`!~\*(C'\fR operator, the \f(CW$_\fR
variable is searched and modified.  Unless the \f(CW\*(C`/r\*(C'\fR option is used,
the string specified must be a scalar variable, an array element, a
hash element, or an assignment to one of those; that is, some sort of
scalar lvalue.
.Sp
If the delimiter chosen is a single quote, no interpolation is
done on either the \s-1PATTERN\s0 or the \s-1REPLACEMENT. \s0 Otherwise, if the
\&\s-1PATTERN\s0 contains a $ that looks like a variable rather than an
end-of-string test, the variable will be interpolated into the pattern
at run-time.  If you want the pattern compiled only once the first time
the variable is interpolated, use the \f(CW\*(C`/o\*(C'\fR option.  If the pattern
evaluates to the empty string, the last successfully executed regular
expression is used instead.  See perlre for further explanation on these.
.Sp
Options are as with m// with the addition of the following replacement
specific options:
.Sp
.Vb 5
\&    e   Evaluate the right side as an expression.
\&    ee  Evaluate the right side as a string then eval the
\&        result.
\&    r   Return substitution and leave the original string
\&        untouched.
.Ve
.Sp
Any non-whitespace delimiter may replace the slashes.  Add space after
the \f(CW\*(C`s\*(C'\fR when using a character allowed in identifiers.  If single quotes
are used, no interpretation is done on the replacement string (the \f(CW\*(C`/e\*(C'\fR
modifier overrides this, however).  Note that Perl treats backticks
as normal delimiters; the replacement text is not evaluated as a command.
If the \s-1PATTERN\s0 is delimited by bracketing quotes, the \s-1REPLACEMENT\s0 has
its own pair of quotes, which may or may not be bracketing quotes, for example,
\&\f(CW\*(C`s(foo)(bar)\*(C'\fR or \f(CW\*(C`s<foo>/bar/\*(C'\fR.  A \f(CW\*(C`/e\*(C'\fR will cause the
replacement portion to be treated as a full-fledged Perl expression
and evaluated right then and there.  It is, however, syntax checked at
compile-time. A second \f(CW\*(C`e\*(C'\fR modifier will cause the replacement portion
to be \f(CW\*(C`eval\*(C'\fRed before being run as a Perl expression.
.Sp
Examples:
.Sp
.Vb 1
\&    s/\ebgreen\eb/mauve/g;              # don\*(Aqt change wintergreen
\&
\&    $path =~ s|/usr/bin|/usr/local/bin|;
\&
\&    s/Login: $foo/Login: $bar/; # run\-time pattern
\&
\&    ($foo = $bar) =~ s/this/that/;      # copy first, then
\&                                        # change
\&    ($foo = "$bar") =~ s/this/that/;    # convert to string,
\&                                        # copy, then change
\&    $foo = $bar =~ s/this/that/r;       # Same as above using /r
\&    $foo = $bar =~ s/this/that/r
\&                =~ s/that/the other/r;  # Chained substitutes
\&                                        # using /r
\&    @foo = map { s/this/that/r } @bar   # /r is very useful in
\&                                        # maps
\&
\&    $count = ($paragraph =~ s/Mister\eb/Mr./g);  # get change\-cnt
\&
\&    $_ = \*(Aqabc123xyz\*(Aq;
\&    s/\ed+/$&*2/e;               # yields \*(Aqabc246xyz\*(Aq
\&    s/\ed+/sprintf("%5d",$&)/e;  # yields \*(Aqabc  246xyz\*(Aq
\&    s/\ew/$& x 2/eg;             # yields \*(Aqaabbcc  224466xxyyzz\*(Aq
\&
\&    s/%(.)/$percent{$1}/g;      # change percent escapes; no /e
\&    s/%(.)/$percent{$1} || $&/ge;       # expr now, so /e
\&    s/^=(\ew+)/pod($1)/ge;       # use function call
\&
\&    $_ = \*(Aqabc123xyz\*(Aq;
\&    $a = s/abc/def/r;           # $a is \*(Aqdef123xyz\*(Aq and
\&                                # $_ remains \*(Aqabc123xyz\*(Aq.
\&
\&    # expand variables in $_, but dynamics only, using
\&    # symbolic dereferencing
\&    s/\e$(\ew+)/${$1}/g;
\&
\&    # Add one to the value of any numbers in the string
\&    s/(\ed+)/1 + $1/eg;
\&
\&    # Titlecase words in the last 30 characters only
\&    substr($str, \-30) =~ s/\eb(\ep{Alpha}+)\eb/\eu\eL$1/g;
\&
\&    # This will expand any embedded scalar variable
\&    # (including lexicals) in $_ : First $1 is interpolated
\&    # to the variable name, and then evaluated
\&    s/(\e$\ew+)/$1/eeg;
\&
\&    # Delete (most) C comments.
\&    $program =~ s {
\&        /\e*     # Match the opening delimiter.
\&        .*?     # Match a minimal number of characters.
\&        \e*/     # Match the closing delimiter.
\&    } []gsx;
\&
\&    s/^\es*(.*?)\es*$/$1/;        # trim whitespace in $_,
\&                                # expensively
\&
\&    for ($variable) {           # trim whitespace in $variable,
\&                                # cheap
\&        s/^\es+//;
\&        s/\es+$//;
\&    }
\&
\&    s/([^ ]*) *([^ ]*)/$2 $1/;  # reverse 1st two fields
.Ve
.Sp
Note the use of $ instead of \e in the last example.  Unlike
\&\fBsed\fR, we use the \e<\fIdigit\fR> form in only the left hand side.
Anywhere else it's $<\fIdigit\fR>.
.Sp
Occasionally, you can't use just a \f(CW\*(C`/g\*(C'\fR to get all the changes
to occur that you might want.  Here are two common cases:
.Sp
.Vb 2
\&    # put commas in the right places in an integer
\&    1 while s/(\ed)(\ed\ed\ed)(?!\ed)/$1,$2/g;
\&
\&    # expand tabs to 8\-column spacing
\&    1 while s/\et+/\*(Aq \*(Aq x (length($&)*8 \- length($\`)%8)/e;
.Ve
.SS "Quote-Like Operators"
.IX Xref "operator, quote-like"
.IX Subsection "Quote-Like Operators"
.IP "q/STRING/" 4
.IX Xref "q quote, single ' ''"
.IX Item "q/STRING/"
.PD 0
.IP "'\s-1STRING\s0'" 4
.IX Item "'STRING'"
.PD
A single-quoted, literal string.  A backslash represents a backslash
unless followed by the delimiter or another backslash, in which case
the delimiter or backslash is interpolated.
.Sp
.Vb 3
\&    $foo = q!I said, "You said, \*(AqShe said it.\*(Aq"!;
\&    $bar = q(\*(AqThis is it.\*(Aq);
\&    $baz = \*(Aq\en\*(Aq;                # a two\-character string
.Ve
.IP "qq/STRING/" 4
.IX Xref "qq quote, double "" """""
.IX Item "qq/STRING/"
.PD 0
.ie n .IP """\s-1STRING""\s0" 4
.el .IP "``\s-1STRING''\s0" 4
.IX Item "STRING"
.PD
A double-quoted, interpolated string.
.Sp
.Vb 4
\&    $_ .= qq
\&     (*** The previous line contains the naughty word "$1".\en)
\&                if /\eb(tcl|java|python)\eb/i;      # :\-)
\&    $baz = "\en";                # a one\-character string
.Ve
.IP "qx/STRING/" 4
.IX Xref "qx ` `` backtick"
.IX Item "qx/STRING/"
.PD 0
.IP "`STRING`" 4
.IX Item "`STRING`"
.PD
A string which is (possibly) interpolated and then executed as a
system command with \fI/bin/sh\fR or its equivalent.  Shell wildcards,
pipes, and redirections will be honored.  The collected standard
output of the command is returned; standard error is unaffected.  In
scalar context, it comes back as a single (potentially multi-line)
string, or undef if the command failed.  In list context, returns a
list of lines (however you've defined lines with $/ or
\&\f(CW$INPUT_RECORD_SEPARATOR\fR), or an empty list if the command failed.
.Sp
Because backticks do not affect standard error, use shell file descriptor
syntax (assuming the shell supports this) if you care to address this.
To capture a command's \s-1STDERR\s0 and \s-1STDOUT\s0 together:
.Sp
.Vb 1
\&    $output = \`cmd 2>&1\`;
.Ve
.Sp
To capture a command's \s-1STDOUT\s0 but discard its \s-1STDERR:\s0
.Sp
.Vb 1
\&    $output = \`cmd 2>/dev/null\`;
.Ve
.Sp
To capture a command's \s-1STDERR\s0 but discard its \s-1STDOUT \s0(ordering is
important here):
.Sp
.Vb 1
\&    $output = \`cmd 2>&1 1>/dev/null\`;
.Ve
.Sp
To exchange a command's \s-1STDOUT\s0 and \s-1STDERR\s0 in order to capture the \s-1STDERR\s0
but leave its \s-1STDOUT\s0 to come out the old \s-1STDERR:\s0
.Sp
.Vb 1
\&    $output = \`cmd 3>&1 1>&2 2>&3 3>&\-\`;
.Ve
.Sp
To read both a command's \s-1STDOUT\s0 and its \s-1STDERR\s0 separately, it's easiest
to redirect them separately to files, and then read from those files
when the program is done:
.Sp
.Vb 1
\&    system("program args 1>program.stdout 2>program.stderr");
.Ve
.Sp
The \s-1STDIN\s0 filehandle used by the command is inherited from Perl's \s-1STDIN.\s0
For example:
.Sp
.Vb 3
\&    open(SPLAT, "stuff")   || die "can\*(Aqt open stuff: $!";
\&    open(STDIN, "<&SPLAT") || die "can\*(Aqt dupe SPLAT: $!";
\&    print STDOUT \`sort\`;
.Ve
.Sp
will print the sorted contents of the file named \fI\*(L"stuff\*(R"\fR.
.Sp
Using single-quote as a delimiter protects the command from Perl's
double-quote interpolation, passing it on to the shell instead:
.Sp
.Vb 2
\&    $perl_info  = qx(ps $$);            # that\*(Aqs Perl\*(Aqs $$
\&    $shell_info = qx\*(Aqps $$\*(Aq;            # that\*(Aqs the new shell\*(Aqs $$
.Ve
.Sp
How that string gets evaluated is entirely subject to the command
interpreter on your system.  On most platforms, you will have to protect
shell metacharacters if you want them treated literally.  This is in
practice difficult to do, as it's unclear how to escape which characters.
See perlsec for a clean and safe example of a manual \fIfork()\fR and \fIexec()\fR
to emulate backticks safely.
.Sp
On some platforms (notably DOS-like ones), the shell may not be
capable of dealing with multiline commands, so putting newlines in
the string may not get you what you want.  You may be able to evaluate
multiple commands in a single line by separating them with the command
separator character, if your shell supports that (for example, \f(CW\*(C`;\*(C'\fR on 
many Unix shells and \f(CW\*(C`&\*(C'\fR on the Windows \s-1NT \s0\f(CW\*(C`cmd\*(C'\fR shell).
.Sp
Perl will attempt to flush all files opened for
output before starting the child process, but this may not be supported
on some platforms (see perlport).  To be safe, you may need to set
\&\f(CW$|\fR ($AUTOFLUSH in English) or call the \f(CW\*(C`autoflush()\*(C'\fR method of
\&\f(CW\*(C`IO::Handle\*(C'\fR on any open handles.
.Sp
Beware that some command shells may place restrictions on the length
of the command line.  You must ensure your strings don't exceed this
limit after any necessary interpolations.  See the platform-specific
release notes for more details about your particular environment.
.Sp
Using this operator can lead to programs that are difficult to port,
because the shell commands called vary between systems, and may in
fact not be present at all.  As one example, the \f(CW\*(C`type\*(C'\fR command under
the \s-1POSIX\s0 shell is very different from the \f(CW\*(C`type\*(C'\fR command under \s-1DOS.\s0
That doesn't mean you should go out of your way to avoid backticks
when they're the right way to get something done.  Perl was made to be
a glue language, and one of the things it glues together is commands.
Just understand what you're getting yourself into.
.Sp
See \*(L"I/O Operators\*(R" for more discussion.
.IP "qw/STRING/" 4
.IX Xref "qw quote, list quote, words"
.IX Item "qw/STRING/"
Evaluates to a list of the words extracted out of \s-1STRING,\s0 using embedded
whitespace as the word delimiters.  It can be understood as being roughly
equivalent to:
.Sp
.Vb 1
\&    split(" ", q/STRING/);
.Ve
.Sp
the differences being that it generates a real list at compile time, and
in scalar context it returns the last element in the list.  So
this expression:
.Sp
.Vb 1
\&    qw(foo bar baz)
.Ve
.Sp
is semantically equivalent to the list:
.Sp
.Vb 1
\&    "foo", "bar", "baz"
.Ve
.Sp
Some frequently seen examples:
.Sp
.Vb 2
\&    use POSIX qw( setlocale localeconv )
\&    @EXPORT = qw( foo bar baz );
.Ve
.Sp
A common mistake is to try to separate the words with comma or to
put comments into a multi-line \f(CW\*(C`qw\*(C'\fR\-string.  For this reason, the
\&\f(CW\*(C`use warnings\*(C'\fR pragma and the \fB\-w\fR switch (that is, the \f(CW$^W\fR variable)
produces warnings if the \s-1STRING\s0 contains the \*(L",\*(R" or the \*(L"#\*(R" character.
.IP "tr/SEARCHLIST/REPLACEMENTLIST/cdsr" 4
.IX Xref "tr y transliterate c d s"
.IX Item "tr/SEARCHLIST/REPLACEMENTLIST/cdsr"
.PD 0
.IP "y/SEARCHLIST/REPLACEMENTLIST/cdsr" 4
.IX Item "y/SEARCHLIST/REPLACEMENTLIST/cdsr"
.PD
Transliterates all occurrences of the characters found in the search list
with the corresponding character in the replacement list.  It returns
the number of characters replaced or deleted.  If no string is
specified via the \f(CW\*(C`=~\*(C'\fR or \f(CW\*(C`!~\*(C'\fR operator, the \f(CW$_\fR string is transliterated.
.Sp
If the \f(CW\*(C`/r\*(C'\fR (non-destructive) option is present, a new copy of the string
is made and its characters transliterated, and this copy is returned no
matter whether it was modified or not: the original string is always
left unchanged.  The new copy is always a plain string, even if the input
string is an object or a tied variable.
.Sp
Unless the \f(CW\*(C`/r\*(C'\fR option is used, the string specified with \f(CW\*(C`=~\*(C'\fR must be a
scalar variable, an array element, a hash element, or an assignment to one
of those; in other words, an lvalue.
.Sp
A character range may be specified with a hyphen, so \f(CW\*(C`tr/A\-J/0\-9/\*(C'\fR
does the same replacement as \f(CW\*(C`tr/ACEGIBDFHJ/0246813579/\*(C'\fR.
For \fBsed\fR devotees, \f(CW\*(C`y\*(C'\fR is provided as a synonym for \f(CW\*(C`tr\*(C'\fR.  If the
\&\s-1SEARCHLIST\s0 is delimited by bracketing quotes, the \s-1REPLACEMENTLIST\s0 has
its own pair of quotes, which may or may not be bracketing quotes;
for example, \f(CW\*(C`tr[aeiouy][yuoiea]\*(C'\fR or \f(CW\*(C`tr(+\e\-*/)/ABCD/\*(C'\fR.
.Sp
Note that \f(CW\*(C`tr\*(C'\fR does \fBnot\fR do regular expression character classes such as
\&\f(CW\*(C`\ed\*(C'\fR or \f(CW\*(C`\epL\*(C'\fR.  The \f(CW\*(C`tr\*(C'\fR operator is not equivalent to the \fItr\fR\|(1)
utility.  If you want to map strings between lower/upper cases, see
\&\*(L"lc\*(R" in perlfunc and \*(L"uc\*(R" in perlfunc, and in general consider using the \f(CW\*(C`s\*(C'\fR
operator if you need regular expressions.  The \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, and
\&\f(CW\*(C`\el\*(C'\fR string-interpolation escapes on the right side of a substitution
operator will perform correct case-mappings, but \f(CW\*(C`tr[a\-z][A\-Z]\*(C'\fR will not
(except sometimes on legacy 7\-bit data).
.Sp
Note also that the whole range idea is rather unportable between
character sets\*(--and even within character sets they may cause results
you probably didn't expect.  A sound principle is to use only ranges
that begin from and end at either alphabets of equal case (a\-e, A\-E),
or digits (0\-4).  Anything else is unsafe.  If in doubt, spell out the
character sets in full.
.Sp
Options:
.Sp
.Vb 5
\&    c   Complement the SEARCHLIST.
\&    d   Delete found but unreplaced characters.
\&    s   Squash duplicate replaced characters.
\&    r   Return the modified string and leave the original string
\&        untouched.
.Ve
.Sp
If the \f(CW\*(C`/c\*(C'\fR modifier is specified, the \s-1SEARCHLIST\s0 character set
is complemented.  If the \f(CW\*(C`/d\*(C'\fR modifier is specified, any characters
specified by \s-1SEARCHLIST\s0 not found in \s-1REPLACEMENTLIST\s0 are deleted.
(Note that this is slightly more flexible than the behavior of some
\&\fBtr\fR programs, which delete anything they find in the \s-1SEARCHLIST,\s0
period.) If the \f(CW\*(C`/s\*(C'\fR modifier is specified, sequences of characters
that were transliterated to the same character are squashed down
to a single instance of the character.
.Sp
If the \f(CW\*(C`/d\*(C'\fR modifier is used, the \s-1REPLACEMENTLIST\s0 is always interpreted
exactly as specified.  Otherwise, if the \s-1REPLACEMENTLIST\s0 is shorter
than the \s-1SEARCHLIST,\s0 the final character is replicated till it is long
enough.  If the \s-1REPLACEMENTLIST\s0 is empty, the \s-1SEARCHLIST\s0 is replicated.
This latter is useful for counting characters in a class or for
squashing character sequences in a class.
.Sp
Examples:
.Sp
.Vb 1
\&    $ARGV[1] =~ tr/A\-Z/a\-z/;    # canonicalize to lower case ASCII
\&
\&    $cnt = tr/*/*/;             # count the stars in $_
\&
\&    $cnt = $sky =~ tr/*/*/;     # count the stars in $sky
\&
\&    $cnt = tr/0\-9//;            # count the digits in $_
\&
\&    tr/a\-zA\-Z//s;               # bookkeeper \-> bokeper
\&
\&    ($HOST = $host) =~ tr/a\-z/A\-Z/;
\&     $HOST = $host  =~ tr/a\-z/A\-Z/r;   # same thing
\&
\&    $HOST = $host =~ tr/a\-z/A\-Z/r    # chained with s///r
\&                  =~ s/:/ \-p/r;
\&
\&    tr/a\-zA\-Z/ /cs;             # change non\-alphas to single space
\&
\&    @stripped = map tr/a\-zA\-Z/ /csr, @original;
\&                                # /r with map
\&
\&    tr [\e200\-\e377]
\&       [\e000\-\e177];             # wickedly delete 8th bit
.Ve
.Sp
If multiple transliterations are given for a character, only the
first one is used:
.Sp
.Vb 1
\&    tr/AAA/XYZ/
.Ve
.Sp
will transliterate any A to X.
.Sp
Because the transliteration table is built at compile time, neither
the \s-1SEARCHLIST\s0 nor the \s-1REPLACEMENTLIST\s0 are subjected to double quote
interpolation.  That means that if you want to use variables, you
must use an \fIeval()\fR:
.Sp
.Vb 2
\&    eval "tr/$oldlist/$newlist/";
\&    die $@ if $@;
\&
\&    eval "tr/$oldlist/$newlist/, 1" or die $@;
.Ve
.IP "<<\s-1EOF \s0" 4
.IX Xref "here-doc heredoc here-document <<"
.IX Item "<<EOF "
A line-oriented form of quoting is based on the shell \*(L"here-document\*(R"
syntax.  Following a \f(CW\*(C`<<\*(C'\fR you specify a string to terminate
the quoted material, and all lines following the current line down to
the terminating string are the value of the item.
.Sp
The terminating string may be either an identifier (a word), or some
quoted text.  An unquoted identifier works like double quotes.
There may not be a space between the \f(CW\*(C`<<\*(C'\fR and the identifier,
unless the identifier is explicitly quoted.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the
first empty line.)  The terminating string must appear by itself
(unquoted and with no surrounding whitespace) on the terminating line.
.Sp
If the terminating string is quoted, the type of quotes used determine
the treatment of the text.
.RS 4
.IP "Double Quotes" 4
.IX Item "Double Quotes"
Double quotes indicate that the text will be interpolated using exactly
the same rules as normal double quoted strings.
.Sp
.Vb 3
\&       print <<EOF;
\&    The price is $Price.
\&    EOF
\&
\&       print << "EOF"; # same as above
\&    The price is $Price.
\&    EOF
.Ve
.IP "Single Quotes" 4
.IX Item "Single Quotes"
Single quotes indicate the text is to be treated literally with no
interpolation of its content. This is similar to single quoted
strings except that backslashes have no special meaning, with \f(CW\*(C`\e\e\*(C'\fR
being treated as two backslashes and not one as they would in every
other quoting construct.
.Sp
Just as in the shell, a backslashed bareword following the \f(CW\*(C`<<\*(C'\fR
means the same thing as a single-quoted string does:
.Sp
.Vb 3
\&        $cost = <<\*(AqVISTA\*(Aq;  # hasta la ...
\&    That\*(Aqll be $10 please, ma\*(Aqam.
\&    VISTA
\&
\&        $cost = <<\eVISTA;   # Same thing!
\&    That\*(Aqll be $10 please, ma\*(Aqam.
\&    VISTA
.Ve
.Sp
This is the only form of quoting in perl where there is no need
to worry about escaping content, something that code generators
can and do make good use of.
.IP "Backticks" 4
.IX Item "Backticks"
The content of the here doc is treated just as it would be if the
string were embedded in backticks. Thus the content is interpolated
as though it were double quoted and then executed via the shell, with
the results of the execution returned.
.Sp
.Vb 3
\&       print << \`EOC\`; # execute command and get results
\&    echo hi there
\&    EOC
.Ve
.RE
.RS 4
.Sp
It is possible to stack multiple here-docs in a row:
.Sp
.Vb 5
\&       print <<"foo", <<"bar"; # you can stack them
\&    I said foo.
\&    foo
\&    I said bar.
\&    bar
\&
\&       myfunc(<< "THIS", 23, <<\*(AqTHAT\*(Aq);
\&    Here\*(Aqs a line
\&    or two.
\&    THIS
\&    and here\*(Aqs another.
\&    THAT
.Ve
.Sp
Just don't forget that you have to put a semicolon on the end
to finish the statement, as Perl doesn't know you're not going to
try to do this:
.Sp
.Vb 4
\&       print <<ABC
\&    179231
\&    ABC
\&       + 20;
.Ve
.Sp
If you want to remove the line terminator from your here-docs,
use \f(CW\*(C`chomp()\*(C'\fR.
.Sp
.Vb 3
\&    chomp($string = <<\*(AqEND\*(Aq);
\&    This is a string.
\&    END
.Ve
.Sp
If you want your here-docs to be indented with the rest of the code,
you'll need to remove leading whitespace from each line manually:
.Sp
.Vb 4
\&    ($quote = <<\*(AqFINIS\*(Aq) =~ s/^\es+//gm;
\&       The Road goes ever on and on,
\&       down from the door where it began.
\&    FINIS
.Ve
.Sp
If you use a here-doc within a delimited construct, such as in \f(CW\*(C`s///eg\*(C'\fR,
the quoted material must still come on the line following the
\&\f(CW\*(C`<<FOO\*(C'\fR marker, which means it may be inside the delimited
construct:
.Sp
.Vb 4
\&    s/this/<<E . \*(Aqthat\*(Aq
\&    the other
\&    E
\&     . \*(Aqmore \*(Aq/eg;
.Ve
.Sp
It works this way as of Perl 5.18.  Historically, it was inconsistent, and
you would have to write
.Sp
.Vb 4
\&    s/this/<<E . \*(Aqthat\*(Aq
\&     . \*(Aqmore \*(Aq/eg;
\&    the other
\&    E
.Ve
.Sp
outside of string evals.
.Sp
Additionally, quoting rules for the end-of-string identifier are
unrelated to Perl's quoting rules. \f(CW\*(C`q()\*(C'\fR, \f(CW\*(C`qq()\*(C'\fR, and the like are not
supported in place of \f(CW\*(Aq\*(Aq\fR and \f(CW""\fR, and the only interpolation is for
backslashing the quoting character:
.Sp
.Vb 3
\&    print << "abc\e"def";
\&    testing...
\&    abc"def
.Ve
.Sp
Finally, quoted strings cannot span multiple lines.  The general rule is
that the identifier must be a string literal.  Stick with that, and you
should be safe.
.RE
.SS "Gory details of parsing quoted constructs"
.IX Xref "quote, gory details"
.IX Subsection "Gory details of parsing quoted constructs"
When presented with something that might have several different
interpretations, Perl uses the \fB\s-1DWIM\s0\fR (that's \*(L"Do What I Mean\*(R")
principle to pick the most probable interpretation.  This strategy
is so successful that Perl programmers often do not suspect the
ambivalence of what they write.  But from time to time, Perl's
notions differ substantially from what the author honestly meant.
.PP
This section hopes to clarify how Perl handles quoted constructs.
Although the most common reason to learn this is to unravel labyrinthine
regular expressions, because the initial steps of parsing are the
same for all quoting operators, they are all discussed together.
.PP
The most important Perl parsing rule is the first one discussed
below: when processing a quoted construct, Perl first finds the end
of that construct, then interprets its contents.  If you understand
this rule, you may skip the rest of this section on the first
reading.  The other rules are likely to contradict the user's
expectations much less frequently than this first one.
.PP
Some passes discussed below are performed concurrently, but because
their results are the same, we consider them individually.  For different
quoting constructs, Perl performs different numbers of passes, from
one to four, but these passes are always performed in the same order.
.IP "Finding the end" 4
.IX Item "Finding the end"
The first pass is finding the end of the quoted construct, where
the information about the delimiters is used in parsing.
During this search, text between the starting and ending delimiters
is copied to a safe location. The text copied gets delimiter-independent.
.Sp
If the construct is a here-doc, the ending delimiter is a line
that has a terminating string as the content. Therefore \f(CW\*(C`<<EOF\*(C'\fR is
terminated by \f(CW\*(C`EOF\*(C'\fR immediately followed by \f(CW"\en"\fR and starting
from the first column of the terminating line.
When searching for the terminating line of a here-doc, nothing
is skipped. In other words, lines after the here-doc syntax
are compared with the terminating string line by line.
.Sp
For the constructs except here-docs, single characters are used as starting
and ending delimiters. If the starting delimiter is an opening punctuation
(that is \f(CW\*(C`(\*(C'\fR, \f(CW\*(C`[\*(C'\fR, \f(CW\*(C`{\*(C'\fR, or \f(CW\*(C`<\*(C'\fR), the ending delimiter is the
corresponding closing punctuation (that is \f(CW\*(C`)\*(C'\fR, \f(CW\*(C`]\*(C'\fR, \f(CW\*(C`}\*(C'\fR, or \f(CW\*(C`>\*(C'\fR).
If the starting delimiter is an unpaired character like \f(CW\*(C`/\*(C'\fR or a closing
punctuation, the ending delimiter is same as the starting delimiter.
Therefore a \f(CW\*(C`/\*(C'\fR terminates a \f(CW\*(C`qq//\*(C'\fR construct, while a \f(CW\*(C`]\*(C'\fR terminates
\&\f(CW\*(C`qq[]\*(C'\fR and \f(CW\*(C`qq]]\*(C'\fR constructs.
.Sp
When searching for single-character delimiters, escaped delimiters
and \f(CW\*(C`\e\e\*(C'\fR are skipped.  For example, while searching for terminating \f(CW\*(C`/\*(C'\fR,
combinations of \f(CW\*(C`\e\e\*(C'\fR and \f(CW\*(C`\e/\*(C'\fR are skipped.  If the delimiters are
bracketing, nested pairs are also skipped.  For example, while searching
for closing \f(CW\*(C`]\*(C'\fR paired with the opening \f(CW\*(C`[\*(C'\fR, combinations of \f(CW\*(C`\e\e\*(C'\fR, \f(CW\*(C`\e]\*(C'\fR,
and \f(CW\*(C`\e[\*(C'\fR are all skipped, and nested \f(CW\*(C`[\*(C'\fR and \f(CW\*(C`]\*(C'\fR are skipped as well.
However, when backslashes are used as the delimiters (like \f(CW\*(C`qq\e\e\*(C'\fR and
\&\f(CW\*(C`tr\e\e\e\*(C'\fR), nothing is skipped.
During the search for the end, backslashes that escape delimiters or
other backslashes are removed (exactly speaking, they are not copied to the
safe location).
.Sp
For constructs with three-part delimiters (\f(CW\*(C`s///\*(C'\fR, \f(CW\*(C`y///\*(C'\fR, and
\&\f(CW\*(C`tr///\*(C'\fR), the search is repeated once more.
If the first delimiter is not an opening punctuation, three delimiters must
be same such as \f(CW\*(C`s!!!\*(C'\fR and \f(CW\*(C`tr)))\*(C'\fR, in which case the second delimiter
terminates the left part and starts the right part at once.
If the left part is delimited by bracketing punctuation (that is \f(CW\*(C`()\*(C'\fR,
\&\f(CW\*(C`[]\*(C'\fR, \f(CW\*(C`{}\*(C'\fR, or \f(CW\*(C`<>\*(C'\fR), the right part needs another pair of
delimiters such as \f(CW\*(C`s(){}\*(C'\fR and \f(CW\*(C`tr[]//\*(C'\fR.  In these cases, whitespace
and comments are allowed between both parts, though the comment must follow
at least one whitespace character; otherwise a character expected as the 
start of the comment may be regarded as the starting delimiter of the right part.
.Sp
During this search no attention is paid to the semantics of the construct.
Thus:
.Sp
.Vb 1
\&    "$hash{"$foo/$bar"}"
.Ve
.Sp
or:
.Sp
.Vb 3
\&    m/
\&      bar       # NOT a comment, this slash / terminated m//!
\&     /x
.Ve
.Sp
do not form legal quoted expressions.   The quoted part ends on the
first \f(CW\*(C`"\*(C'\fR and \f(CW\*(C`/\*(C'\fR, and the rest happens to be a syntax error.
Because the slash that terminated \f(CW\*(C`m//\*(C'\fR was followed by a \f(CW\*(C`SPACE\*(C'\fR,
the example above is not \f(CW\*(C`m//x\*(C'\fR, but rather \f(CW\*(C`m//\*(C'\fR with no \f(CW\*(C`/x\*(C'\fR
modifier.  So the embedded \f(CW\*(C`#\*(C'\fR is interpreted as a literal \f(CW\*(C`#\*(C'\fR.
.Sp
Also no attention is paid to \f(CW\*(C`\ec\e\*(C'\fR (multichar control char syntax) during
this search. Thus the second \f(CW\*(C`\e\*(C'\fR in \f(CW\*(C`qq/\ec\e/\*(C'\fR is interpreted as a part
of \f(CW\*(C`\e/\*(C'\fR, and the following \f(CW\*(C`/\*(C'\fR is not recognized as a delimiter.
Instead, use \f(CW\*(C`\e034\*(C'\fR or \f(CW\*(C`\ex1c\*(C'\fR at the end of quoted constructs.
.IP "Interpolation" 4
.IX Xref "interpolation"
.IX Item "Interpolation"
The next step is interpolation in the text obtained, which is now
delimiter-independent.  There are multiple cases.
.RS 4
.ie n .IP """<<\*(AqEOF\*(Aq""" 4
.el .IP "\f(CW<<\*(AqEOF\*(Aq\fR" 4
.IX Item "<<EOF"
No interpolation is performed.
Note that the combination \f(CW\*(C`\e\e\*(C'\fR is left intact, since escaped delimiters
are not available for here-docs.
.ie n .IP """m\*(Aq\*(Aq"", the pattern of ""s\*(Aq\*(Aq\*(Aq""" 4
.el .IP "\f(CWm\*(Aq\*(Aq\fR, the pattern of \f(CWs\*(Aq\*(Aq\*(Aq\fR" 4
.IX Item "m, the pattern of s"
No interpolation is performed at this stage.
Any backslashed sequences including \f(CW\*(C`\e\e\*(C'\fR are treated at the stage
to \*(L"parsing regular expressions\*(R".
.ie n .IP "\*(Aq\*(Aq, ""q//"", ""tr\*(Aq\*(Aq\*(Aq"", ""y\*(Aq\*(Aq\*(Aq"", the replacement of ""s\*(Aq\*(Aq\*(Aq""" 4
.el .IP "\f(CW\*(Aq\*(Aq\fR, \f(CWq//\fR, \f(CWtr\*(Aq\*(Aq\*(Aq\fR, \f(CWy\*(Aq\*(Aq\*(Aq\fR, the replacement of \f(CWs\*(Aq\*(Aq\*(Aq\fR" 4
.IX Item ", q//, tr, y, the replacement of s"
The only interpolation is removal of \f(CW\*(C`\e\*(C'\fR from pairs of \f(CW\*(C`\e\e\*(C'\fR.
Therefore \f(CW\*(C`\-\*(C'\fR in \f(CW\*(C`tr\*(Aq\*(Aq\*(Aq\*(C'\fR and \f(CW\*(C`y\*(Aq\*(Aq\*(Aq\*(C'\fR is treated literally
as a hyphen and no character range is available.
\&\f(CW\*(C`\e1\*(C'\fR in the replacement of \f(CW\*(C`s\*(Aq\*(Aq\*(Aq\*(C'\fR does not work as \f(CW$1\fR.
.ie n .IP """tr///"", ""y///""" 4
.el .IP "\f(CWtr///\fR, \f(CWy///\fR" 4
.IX Item "tr///, y///"
No variable interpolation occurs.  String modifying combinations for
case and quoting such as \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, and \f(CW\*(C`\eE\*(C'\fR are not recognized.
The other escape sequences such as \f(CW\*(C`\e200\*(C'\fR and \f(CW\*(C`\et\*(C'\fR and backslashed
characters such as \f(CW\*(C`\e\e\*(C'\fR and \f(CW\*(C`\e\-\*(C'\fR are converted to appropriate literals.
The character \f(CW\*(C`\-\*(C'\fR is treated specially and therefore \f(CW\*(C`\e\-\*(C'\fR is treated
as a literal \f(CW\*(C`\-\*(C'\fR.
.ie n .IP """"", ""\`\`"", ""qq//"", ""qx//"", ""<file*glob>"", ""<<""EOF""""" 4
.el .IP "\f(CW``''\fR, \f(CW\`\`\fR, \f(CWqq//\fR, \f(CWqx//\fR, \f(CW<file*glob>\fR, \f(CW<<``EOF''\fR" 4
.IX Item """"", , qq//, qx//, <file*glob>, <<""EOF"""
\&\f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR (possibly paired with \f(CW\*(C`\eE\*(C'\fR) are
converted to corresponding Perl constructs.  Thus, \f(CW"$foo\eQbaz$bar"\fR
is converted to \f(CW\*(C`$foo . (quotemeta("baz" . $bar))\*(C'\fR internally.
The other escape sequences such as \f(CW\*(C`\e200\*(C'\fR and \f(CW\*(C`\et\*(C'\fR and backslashed
characters such as \f(CW\*(C`\e\e\*(C'\fR and \f(CW\*(C`\e\-\*(C'\fR are replaced with appropriate
expansions.
.Sp
Let it be stressed that \fIwhatever falls between \f(CI\*(C`\eQ\*(C'\fI and \f(CI\*(C`\eE\*(C'\fI\fR
is interpolated in the usual way.  Something like \f(CW"\eQ\e\eE"\fR has
no \f(CW\*(C`\eE\*(C'\fR inside.  Instead, it has \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\e\e\*(C'\fR, and \f(CW\*(C`E\*(C'\fR, so the
result is the same as for \f(CW"\e\e\e\eE"\fR.  As a general rule, backslashes
between \f(CW\*(C`\eQ\*(C'\fR and \f(CW\*(C`\eE\*(C'\fR may lead to counterintuitive results.  So,
\&\f(CW"\eQ\et\eE"\fR is converted to \f(CW\*(C`quotemeta("\et")\*(C'\fR, which is the same
as \f(CW"\e\e\et"\fR (since \s-1TAB\s0 is not alphanumeric).  Note also that:
.Sp
.Vb 2
\&  $str = \*(Aq\et\*(Aq;
\&  return "\eQ$str";
.Ve
.Sp
may be closer to the conjectural \fIintention\fR of the writer of \f(CW"\eQ\et\eE"\fR.
.Sp
Interpolated scalars and arrays are converted internally to the \f(CW\*(C`join\*(C'\fR and
\&\f(CW\*(C`.\*(C'\fR catenation operations.  Thus, \f(CW"$foo XXX \*(Aq@arr\*(Aq"\fR becomes:
.Sp
.Vb 1
\&  $foo . " XXX \*(Aq" . (join $", @arr) . "\*(Aq";
.Ve
.Sp
All operations above are performed simultaneously, left to right.
.Sp
Because the result of \f(CW"\eQ STRING \eE"\fR has all metacharacters
quoted, there is no way to insert a literal \f(CW\*(C`$\*(C'\fR or \f(CW\*(C`@\*(C'\fR inside a
\&\f(CW\*(C`\eQ\eE\*(C'\fR pair.  If protected by \f(CW\*(C`\e\*(C'\fR, \f(CW\*(C`$\*(C'\fR will be quoted to became
\&\f(CW"\e\e\e$"\fR; if not, it is interpreted as the start of an interpolated
scalar.
.Sp
Note also that the interpolation code needs to make a decision on
where the interpolated scalar ends.  For instance, whether
\&\f(CW"a $b \-> {c}"\fR really means:
.Sp
.Vb 1
\&  "a " . $b . " \-> {c}";
.Ve
.Sp
or:
.Sp
.Vb 1
\&  "a " . $b \-> {c};
.Ve
.Sp
Most of the time, the longest possible text that does not include
spaces between components and which contains matching braces or
brackets.  because the outcome may be determined by voting based
on heuristic estimators, the result is not strictly predictable.
Fortunately, it's usually correct for ambiguous cases.
.ie n .IP "the replacement of ""s///""" 4
.el .IP "the replacement of \f(CWs///\fR" 4
.IX Item "the replacement of s///"
Processing of \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR and interpolation
happens as with \f(CW\*(C`qq//\*(C'\fR constructs.
.Sp
It is at this step that \f(CW\*(C`\e1\*(C'\fR is begrudgingly converted to \f(CW$1\fR in
the replacement text of \f(CW\*(C`s///\*(C'\fR, in order to correct the incorrigible
\&\fIsed\fR hackers who haven't picked up the saner idiom yet.  A warning
is emitted if the \f(CW\*(C`use warnings\*(C'\fR pragma or the \fB\-w\fR command-line flag
(that is, the \f(CW$^W\fR variable) was set.
.ie n .IP """RE"" in ""?RE?"", ""/RE/"", ""m/RE/"", ""s/RE/foo/""," 4
.el .IP "\f(CWRE\fR in \f(CW?RE?\fR, \f(CW/RE/\fR, \f(CWm/RE/\fR, \f(CWs/RE/foo/\fR," 4
.IX Item "RE in ?RE?, /RE/, m/RE/, s/RE/foo/,"
Processing of \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR, \f(CW\*(C`\eE\*(C'\fR,
and interpolation happens (almost) as with \f(CW\*(C`qq//\*(C'\fR constructs.
.Sp
Processing of \f(CW\*(C`\eN{...}\*(C'\fR is also done here, and compiled into an intermediate
form for the regex compiler.  (This is because, as mentioned below, the regex
compilation may be done at execution time, and \f(CW\*(C`\eN{...}\*(C'\fR is a compile-time
construct.)
.Sp
However any other combinations of \f(CW\*(C`\e\*(C'\fR followed by a character
are not substituted but only skipped, in order to parse them
as regular expressions at the following step.
As \f(CW\*(C`\ec\*(C'\fR is skipped at this step, \f(CW\*(C`@\*(C'\fR of \f(CW\*(C`\ec@\*(C'\fR in \s-1RE\s0 is possibly
treated as an array symbol (for example \f(CW@foo\fR),
even though the same text in \f(CW\*(C`qq//\*(C'\fR gives interpolation of \f(CW\*(C`\ec@\*(C'\fR.
.Sp
Code blocks such as \f(CW\*(C`(?{BLOCK})\*(C'\fR are handled by temporarily passing control
back to the perl parser, in a similar way that an interpolated array
subscript expression such as \f(CW"foo$array[1+f("[xyz")]bar"\fR would be.
.Sp
Moreover, inside \f(CW\*(C`(?{BLOCK})\*(C'\fR, \f(CW\*(C`(?# comment )\*(C'\fR, and
a \f(CW\*(C`#\*(C'\fR\-comment in a \f(CW\*(C`//x\*(C'\fR\-regular expression, no processing is
performed whatsoever.  This is the first step at which the presence
of the \f(CW\*(C`//x\*(C'\fR modifier is relevant.
.Sp
Interpolation in patterns has several quirks: \f(CW$|\fR, \f(CW$(\fR, \f(CW$)\fR, \f(CW\*(C`@+\*(C'\fR
and \f(CW\*(C`@\-\*(C'\fR are not interpolated, and constructs \f(CW$var[SOMETHING]\fR are
voted (by several different estimators) to be either an array element
or \f(CW$var\fR followed by an \s-1RE\s0 alternative.  This is where the notation
\&\f(CW\*(C`${arr[$bar]}\*(C'\fR comes handy: \f(CW\*(C`/${arr[0\-9]}/\*(C'\fR is interpreted as
array element \f(CW\*(C`\-9\*(C'\fR, not as a regular expression from the variable
\&\f(CW$arr\fR followed by a digit, which would be the interpretation of
\&\f(CW\*(C`/$arr[0\-9]/\*(C'\fR.  Since voting among different estimators may occur,
the result is not predictable.
.Sp
The lack of processing of \f(CW\*(C`\e\e\*(C'\fR creates specific restrictions on
the post-processed text.  If the delimiter is \f(CW\*(C`/\*(C'\fR, one cannot get
the combination \f(CW\*(C`\e/\*(C'\fR into the result of this step.  \f(CW\*(C`/\*(C'\fR will
finish the regular expression, \f(CW\*(C`\e/\*(C'\fR will be stripped to \f(CW\*(C`/\*(C'\fR on
the previous step, and \f(CW\*(C`\e\e/\*(C'\fR will be left as is.  Because \f(CW\*(C`/\*(C'\fR is
equivalent to \f(CW\*(C`\e/\*(C'\fR inside a regular expression, this does not
matter unless the delimiter happens to be character special to the
\&\s-1RE\s0 engine, such as in \f(CW\*(C`s*foo*bar*\*(C'\fR, \f(CW\*(C`m[foo]\*(C'\fR, or \f(CW\*(C`?foo?\*(C'\fR; or an
alphanumeric char, as in:
.Sp
.Vb 1
\&  m m ^ a \es* b mmx;
.Ve
.Sp
In the \s-1RE\s0 above, which is intentionally obfuscated for illustration, the
delimiter is \f(CW\*(C`m\*(C'\fR, the modifier is \f(CW\*(C`mx\*(C'\fR, and after delimiter-removal the
\&\s-1RE\s0 is the same as for \f(CW\*(C`m/ ^ a \es* b /mx\*(C'\fR.  There's more than one
reason you're encouraged to restrict your delimiters to non-alphanumeric,
non-whitespace choices.
.RE
.RS 4
.Sp
This step is the last one for all constructs except regular expressions,
which are processed further.
.RE
.IP "parsing regular expressions" 4
.IX Xref "regexp, parse"
.IX Item "parsing regular expressions"
Previous steps were performed during the compilation of Perl code,
but this one happens at run time, although it may be optimized to
be calculated at compile time if appropriate.  After preprocessing
described above, and possibly after evaluation if concatenation,
joining, casing translation, or metaquoting are involved, the
resulting \fIstring\fR is passed to the \s-1RE\s0 engine for compilation.
.Sp
Whatever happens in the \s-1RE\s0 engine might be better discussed in perlre,
but for the sake of continuity, we shall do so here.
.Sp
This is another step where the presence of the \f(CW\*(C`//x\*(C'\fR modifier is
relevant.  The \s-1RE\s0 engine scans the string from left to right and
converts it to a finite automaton.
.Sp
Backslashed characters are either replaced with corresponding
literal strings (as with \f(CW\*(C`\e{\*(C'\fR), or else they generate special nodes
in the finite automaton (as with \f(CW\*(C`\eb\*(C'\fR).  Characters special to the
\&\s-1RE\s0 engine (such as \f(CW\*(C`|\*(C'\fR) generate corresponding nodes or groups of
nodes.  \f(CW\*(C`(?#...)\*(C'\fR comments are ignored.  All the rest is either
converted to literal strings to match, or else is ignored (as is
whitespace and \f(CW\*(C`#\*(C'\fR\-style comments if \f(CW\*(C`//x\*(C'\fR is present).
.Sp
Parsing of the bracketed character class construct, \f(CW\*(C`[...]\*(C'\fR, is
rather different than the rule used for the rest of the pattern.
The terminator of this construct is found using the same rules as
for finding the terminator of a \f(CW\*(C`{}\*(C'\fR\-delimited construct, the only
exception being that \f(CW\*(C`]\*(C'\fR immediately following \f(CW\*(C`[\*(C'\fR is treated as
though preceded by a backslash.
.Sp
The terminator of runtime \f(CW\*(C`(?{...})\*(C'\fR is found by temporarily switching
control to the perl parser, which should stop at the point where the
logically balancing terminating \f(CW\*(C`}\*(C'\fR is found.
.Sp
It is possible to inspect both the string given to \s-1RE\s0 engine and the
resulting finite automaton.  See the arguments \f(CW\*(C`debug\*(C'\fR/\f(CW\*(C`debugcolor\*(C'\fR
in the \f(CW\*(C`use re\*(C'\fR pragma, as well as Perl's \fB\-Dr\fR command-line
switch documented in \*(L"Command Switches\*(R" in perlrun.
.IP "Optimization of regular expressions" 4
.IX Xref "regexp, optimization"
.IX Item "Optimization of regular expressions"
This step is listed for completeness only.  Since it does not change
semantics, details of this step are not documented and are subject
to change without notice.  This step is performed over the finite
automaton that was generated during the previous pass.
.Sp
It is at this stage that \f(CW\*(C`split()\*(C'\fR silently optimizes \f(CW\*(C`/^/\*(C'\fR to
mean \f(CW\*(C`/^/m\*(C'\fR.
.SS "I/O Operators"
.IX Xref "operator, i o operator, io io while filehandle <> @ARGV"
.IX Subsection "I/O Operators"
There are several I/O operators you should know about.
.PP
A string enclosed by backticks (grave accents) first undergoes
double-quote interpolation.  It is then interpreted as an external
command, and the output of that command is the value of the
backtick string, like in a shell.  In scalar context, a single string
consisting of all output is returned.  In list context, a list of
values is returned, one per line of output.  (You can set \f(CW$/\fR to use
a different line terminator.)  The command is executed each time the
pseudo-literal is evaluated.  The status value of the command is
returned in \f(CW$?\fR (see perlvar for the interpretation of \f(CW$?\fR).
Unlike in \fBcsh\fR, no translation is done on the return data\*(--newlines
remain newlines.  Unlike in any of the shells, single quotes do not
hide variable names in the command from interpretation.  To pass a
literal dollar-sign through to the shell you need to hide it with a
backslash.  The generalized form of backticks is \f(CW\*(C`qx//\*(C'\fR.  (Because
backticks always undergo shell expansion as well, see perlsec for
security concerns.)
.IX Xref "qx ` `` backtick glob"
.PP
In scalar context, evaluating a filehandle in angle brackets yields
the next line from that file (the newline, if any, included), or
\&\f(CW\*(C`undef\*(C'\fR at end-of-file or on error.  When \f(CW$/\fR is set to \f(CW\*(C`undef\*(C'\fR
(sometimes known as file-slurp mode) and the file is empty, it
returns \f(CW\*(Aq\*(Aq\fR the first time, followed by \f(CW\*(C`undef\*(C'\fR subsequently.
.PP
Ordinarily you must assign the returned value to a variable, but
there is one situation where an automatic assignment happens.  If
and only if the input symbol is the only thing inside the conditional
of a \f(CW\*(C`while\*(C'\fR statement (even if disguised as a \f(CW\*(C`for(;;)\*(C'\fR loop),
the value is automatically assigned to the global variable \f(CW$_\fR,
destroying whatever was there previously.  (This may seem like an
odd thing to you, but you'll use the construct in almost every Perl
script you write.)  The \f(CW$_\fR variable is not implicitly localized.
You'll have to put a \f(CW\*(C`local $_;\*(C'\fR before the loop if you want that
to happen.
.PP
The following lines are equivalent:
.PP
.Vb 7
\&    while (defined($_ = <STDIN>)) { print; }
\&    while ($_ = <STDIN>) { print; }
\&    while (<STDIN>) { print; }
\&    for (;<STDIN>;) { print; }
\&    print while defined($_ = <STDIN>);
\&    print while ($_ = <STDIN>);
\&    print while <STDIN>;
.Ve
.PP
This also behaves similarly, but assigns to a lexical variable 
instead of to \f(CW$_\fR:
.PP
.Vb 1
\&    while (my $line = <STDIN>) { print $line }
.Ve
.PP
In these loop constructs, the assigned value (whether assignment
is automatic or explicit) is then tested to see whether it is
defined.  The defined test avoids problems where the line has a string
value that would be treated as false by Perl; for example a "\*(L" or
a \*(R"0" with no trailing newline.  If you really mean for such values
to terminate the loop, they should be tested for explicitly:
.PP
.Vb 2
\&    while (($_ = <STDIN>) ne \*(Aq0\*(Aq) { ... }
\&    while (<STDIN>) { last unless $_; ... }
.Ve
.PP
In other boolean contexts, \f(CW\*(C`<FILEHANDLE>\*(C'\fR without an
explicit \f(CW\*(C`defined\*(C'\fR test or comparison elicits a warning if the
\&\f(CW\*(C`use warnings\*(C'\fR pragma or the \fB\-w\fR
command-line switch (the \f(CW$^W\fR variable) is in effect.
.PP
The filehandles \s-1STDIN, STDOUT,\s0 and \s-1STDERR\s0 are predefined.  (The
filehandles \f(CW\*(C`stdin\*(C'\fR, \f(CW\*(C`stdout\*(C'\fR, and \f(CW\*(C`stderr\*(C'\fR will also work except
in packages, where they would be interpreted as local identifiers
rather than global.)  Additional filehandles may be created with
the \fIopen()\fR function, amongst others.  See perlopentut and
\&\*(L"open\*(R" in perlfunc for details on this.
.IX Xref "stdin stdout sterr"
.PP
If a <\s-1FILEHANDLE\s0> is used in a context that is looking for
a list, a list comprising all input lines is returned, one line per
list element.  It's easy to grow to a rather large data space this
way, so use with care.
.PP
<\s-1FILEHANDLE\s0> may also be spelled \f(CW\*(C`readline(*FILEHANDLE)\*(C'\fR.
See \*(L"readline\*(R" in perlfunc.
.PP
The null filehandle <> is special: it can be used to emulate the
behavior of \fBsed\fR and \fBawk\fR, and any other Unix filter program
that takes a list of filenames, doing the same to each line
of input from all of them.  Input from <> comes either from
standard input, or from each file listed on the command line.  Here's
how it works: the first time <> is evaluated, the \f(CW@ARGV\fR array is
checked, and if it is empty, \f(CW$ARGV[0]\fR is set to \*(L"\-\*(R", which when opened
gives you standard input.  The \f(CW@ARGV\fR array is then processed as a list
of filenames.  The loop
.PP
.Vb 3
\&    while (<>) {
\&        ...                     # code for each line
\&    }
.Ve
.PP
is equivalent to the following Perl-like pseudo code:
.PP
.Vb 7
\&    unshift(@ARGV, \*(Aq\-\*(Aq) unless @ARGV;
\&    while ($ARGV = shift) {
\&        open(ARGV, $ARGV);
\&        while (<ARGV>) {
\&            ...         # code for each line
\&        }
\&    }
.Ve
.PP
except that it isn't so cumbersome to say, and will actually work.
It really does shift the \f(CW@ARGV\fR array and put the current filename
into the \f(CW$ARGV\fR variable.  It also uses filehandle \fI\s-1ARGV\s0\fR
internally. <> is just a synonym for <\s-1ARGV\s0>, which
is magical.  (The pseudo code above doesn't work because it treats
<\s-1ARGV\s0> as non-magical.)
.PP
Since the null filehandle uses the two argument form of \*(L"open\*(R" in perlfunc
it interprets special characters, so if you have a script like this:
.PP
.Vb 3
\&    while (<>) {
\&        print;
\&    }
.Ve
.PP
and call it with \f(CW\*(C`perl dangerous.pl \*(Aqrm \-rfv *|\*(Aq\*(C'\fR, it actually opens a
pipe, executes the \f(CW\*(C`rm\*(C'\fR command and reads \f(CW\*(C`rm\*(C'\fR's output from that pipe.
If you want all items in \f(CW@ARGV\fR to be interpreted as file names, you
can use the module \f(CW\*(C`ARGV::readonly\*(C'\fR from \s-1CPAN.\s0
.PP
You can modify \f(CW@ARGV\fR before the first <> as long as the array ends up
containing the list of filenames you really want.  Line numbers (\f(CW$.\fR)
continue as though the input were one big happy file.  See the example
in \*(L"eof\*(R" in perlfunc for how to reset line numbers on each file.
.PP
If you want to set \f(CW@ARGV\fR to your own list of files, go right ahead.
This sets \f(CW@ARGV\fR to all plain text files if no \f(CW@ARGV\fR was given:
.PP
.Vb 1
\&    @ARGV = grep { \-f && \-T } glob(\*(Aq*\*(Aq) unless @ARGV;
.Ve
.PP
You can even set them to pipe commands.  For example, this automatically
filters compressed arguments through \fBgzip\fR:
.PP
.Vb 1
\&    @ARGV = map { /\e.(gz|Z)$/ ? "gzip \-dc < $_ |" : $_ } @ARGV;
.Ve
.PP
If you want to pass switches into your script, you can use one of the
Getopts modules or put a loop on the front like this:
.PP
.Vb 7
\&    while ($_ = $ARGV[0], /^\-/) {
\&        shift;
\&        last if /^\-\-$/;
\&        if (/^\-D(.*)/) { $debug = $1 }
\&        if (/^\-v/)     { $verbose++  }
\&        # ...           # other switches
\&    }
\&
\&    while (<>) {
\&        # ...           # code for each line
\&    }
.Ve
.PP
The <> symbol will return \f(CW\*(C`undef\*(C'\fR for end-of-file only once.
If you call it again after this, it will assume you are processing another
\&\f(CW@ARGV\fR list, and if you haven't set \f(CW@ARGV\fR, will read input from \s-1STDIN.\s0
.PP
If what the angle brackets contain is a simple scalar variable (for example,
<$foo>), then that variable contains the name of the
filehandle to input from, or its typeglob, or a reference to the
same.  For example:
.PP
.Vb 2
\&    $fh = \e*STDIN;
\&    $line = <$fh>;
.Ve
.PP
If what's within the angle brackets is neither a filehandle nor a simple
scalar variable containing a filehandle name, typeglob, or typeglob
reference, it is interpreted as a filename pattern to be globbed, and
either a list of filenames or the next filename in the list is returned,
depending on context.  This distinction is determined on syntactic
grounds alone.  That means \f(CW\*(C`<$x>\*(C'\fR is always a \fIreadline()\fR from
an indirect handle, but \f(CW\*(C`<$hash{key}>\*(C'\fR is always a \fIglob()\fR.
That's because \f(CW$x\fR is a simple scalar variable, but \f(CW$hash{key}\fR is
not\*(--it's a hash element.  Even \f(CW\*(C`<$x >\*(C'\fR (note the extra space)
is treated as \f(CW\*(C`glob("$x ")\*(C'\fR, not \f(CW\*(C`readline($x)\*(C'\fR.
.PP
One level of double-quote interpretation is done first, but you can't
say \f(CW\*(C`<$foo>\*(C'\fR because that's an indirect filehandle as explained
in the previous paragraph.  (In older versions of Perl, programmers
would insert curly brackets to force interpretation as a filename glob:
\&\f(CW\*(C`<${foo}>\*(C'\fR.  These days, it's considered cleaner to call the
internal function directly as \f(CW\*(C`glob($foo)\*(C'\fR, which is probably the right
way to have done it in the first place.)  For example:
.PP
.Vb 3
\&    while (<*.c>) {
\&        chmod 0644, $_;
\&    }
.Ve
.PP
is roughly equivalent to:
.PP
.Vb 5
\&    open(FOO, "echo *.c | tr \-s \*(Aq \et\er\ef\*(Aq \*(Aq\e\e012\e\e012\e\e012\e\e012\*(Aq|");
\&    while (<FOO>) {
\&        chomp;
\&        chmod 0644, $_;
\&    }
.Ve
.PP
except that the globbing is actually done internally using the standard
\&\f(CW\*(C`File::Glob\*(C'\fR extension.  Of course, the shortest way to do the above is:
.PP
.Vb 1
\&    chmod 0644, <*.c>;
.Ve
.PP
A (file)glob evaluates its (embedded) argument only when it is
starting a new list.  All values must be read before it will start
over.  In list context, this isn't important because you automatically
get them all anyway.  However, in scalar context the operator returns
the next value each time it's called, or \f(CW\*(C`undef\*(C'\fR when the list has
run out.  As with filehandle reads, an automatic \f(CW\*(C`defined\*(C'\fR is
generated when the glob occurs in the test part of a \f(CW\*(C`while\*(C'\fR,
because legal glob returns (for example,
a file called \fI0\fR) would otherwise
terminate the loop.  Again, \f(CW\*(C`undef\*(C'\fR is returned only once.  So if
you're expecting a single value from a glob, it is much better to
say
.PP
.Vb 1
\&    ($file) = <blurch*>;
.Ve
.PP
than
.PP
.Vb 1
\&    $file = <blurch*>;
.Ve
.PP
because the latter will alternate between returning a filename and
returning false.
.PP
If you're trying to do variable interpolation, it's definitely better
to use the \fIglob()\fR function, because the older notation can cause people
to become confused with the indirect filehandle notation.
.PP
.Vb 2
\&    @files = glob("$dir/*.[ch]");
\&    @files = glob($files[$i]);
.Ve
.SS "Constant Folding"
.IX Xref "constant folding folding"
.IX Subsection "Constant Folding"
Like C, Perl does a certain amount of expression evaluation at
compile time whenever it determines that all arguments to an
operator are static and have no side effects.  In particular, string
concatenation happens at compile time between literals that don't do
variable substitution.  Backslash interpolation also happens at
compile time.  You can say
.PP
.Vb 3
\&      \*(AqNow is the time for all\*(Aq
\&    . "\en" 
\&    .  \*(Aqgood men to come to.\*(Aq
.Ve
.PP
and this all reduces to one string internally.  Likewise, if
you say
.PP
.Vb 3
\&    foreach $file (@filenames) {
\&        if (\-s $file > 5 + 100 * 2**16) {  }
\&    }
.Ve
.PP
the compiler precomputes the number which that expression
represents so that the interpreter won't have to.
.SS "No-ops"
.IX Xref "no-op nop"
.IX Subsection "No-ops"
Perl doesn't officially have a no-op operator, but the bare constants
\&\f(CW0\fR and \f(CW1\fR are special-cased not to produce a warning in void
context, so you can for example safely do
.PP
.Vb 1
\&    1 while foo();
.Ve
.SS "Bitwise String Operators"
.IX Xref "operator, bitwise, string"
.IX Subsection "Bitwise String Operators"
Bitstrings of any size may be manipulated by the bitwise operators
(\f(CW\*(C`~ | & ^\*(C'\fR).
.PP
If the operands to a binary bitwise op are strings of different
sizes, \fB|\fR and \fB^\fR ops act as though the shorter operand had
additional zero bits on the right, while the \fB&\fR op acts as though
the longer operand were truncated to the length of the shorter.
The granularity for such extension or truncation is one or more
bytes.
.PP
.Vb 5
\&    # ASCII\-based examples
\&    print "j p \en" ^ " a h";            # prints "JAPH\en"
\&    print "JA" | "  ph\en";              # prints "japh\en"
\&    print "japh\enJunk" & \*(Aq_\|_\|_\|_\|_\*(Aq;       # prints "JAPH\en";
\&    print \*(Aqp N$\*(Aq ^ " E<H\en";            # prints "Perl\en";
.Ve
.PP
If you are intending to manipulate bitstrings, be certain that
you're supplying bitstrings: If an operand is a number, that will imply
a \fBnumeric\fR bitwise operation.  You may explicitly show which type of
operation you intend by using \f(CW""\fR or \f(CW\*(C`0+\*(C'\fR, as in the examples below.
.PP
.Vb 4
\&    $foo =  150  |  105;        # yields 255  (0x96 | 0x69 is 0xFF)
\&    $foo = \*(Aq150\*(Aq |  105;        # yields 255
\&    $foo =  150  | \*(Aq105\*(Aq;       # yields 255
\&    $foo = \*(Aq150\*(Aq | \*(Aq105\*(Aq;       # yields string \*(Aq155\*(Aq (under ASCII)
\&
\&    $baz = 0+$foo & 0+$bar;     # both ops explicitly numeric
\&    $biz = "$foo" ^ "$bar";     # both ops explicitly stringy
.Ve
.PP
See \*(L"vec\*(R" in perlfunc for information on how to manipulate individual bits
in a bit vector.
.SS "Integer Arithmetic"
.IX Xref "integer"
.IX Subsection "Integer Arithmetic"
By default, Perl assumes that it must do most of its arithmetic in
floating point.  But by saying
.PP
.Vb 1
\&    use integer;
.Ve
.PP
you may tell the compiler to use integer operations
(see integer for a detailed explanation) from here to the end of
the enclosing \s-1BLOCK. \s0 An inner \s-1BLOCK\s0 may countermand this by saying
.PP
.Vb 1
\&    no integer;
.Ve
.PP
which lasts until the end of that \s-1BLOCK. \s0 Note that this doesn't
mean everything is an integer, merely that Perl will use integer
operations for arithmetic, comparison, and bitwise operators.  For
example, even under \f(CW\*(C`use integer\*(C'\fR, if you take the \f(CWsqrt(2)\fR, you'll
still get \f(CW1.4142135623731\fR or so.
.PP
Used on numbers, the bitwise operators (\*(L"&\*(R", \*(L"|\*(R", \*(L"^\*(R", \*(L"~\*(R", \*(L"<<\*(R",
and \*(L">>\*(R") always produce integral results.  (But see also
\&\*(L"Bitwise String Operators\*(R".)  However, \f(CW\*(C`use integer\*(C'\fR still has meaning for
them.  By default, their results are interpreted as unsigned integers, but
if \f(CW\*(C`use integer\*(C'\fR is in effect, their results are interpreted
as signed integers.  For example, \f(CW\*(C`~0\*(C'\fR usually evaluates to a large
integral value.  However, \f(CW\*(C`use integer; ~0\*(C'\fR is \f(CW\*(C`\-1\*(C'\fR on two's-complement
machines.
.SS "Floating-point Arithmetic"
.IX Subsection "Floating-point Arithmetic"

.IX Xref "floating-point floating point float real"
.PP
While \f(CW\*(C`use integer\*(C'\fR provides integer-only arithmetic, there is no
analogous mechanism to provide automatic rounding or truncation to a
certain number of decimal places.  For rounding to a certain number
of digits, \fIsprintf()\fR or \fIprintf()\fR is usually the easiest route.
See perlfaq4.
.PP
Floating-point numbers are only approximations to what a mathematician
would call real numbers.  There are infinitely more reals than floats,
so some corners must be cut.  For example:
.PP
.Vb 2
\&    printf "%.20g\en", 123456789123456789;
\&    #        produces 123456789123456784
.Ve
.PP
Testing for exact floating-point equality or inequality is not a
good idea.  Here's a (relatively expensive) work-around to compare
whether two floating-point numbers are equal to a particular number of
decimal places.  See Knuth, volume \s-1II,\s0 for a more robust treatment of
this topic.
.PP
.Vb 7
\&    sub fp_equal {
\&        my ($X, $Y, $POINTS) = @_;
\&        my ($tX, $tY);
\&        $tX = sprintf("%.${POINTS}g", $X);
\&        $tY = sprintf("%.${POINTS}g", $Y);
\&        return $tX eq $tY;
\&    }
.Ve
.PP
The \s-1POSIX\s0 module (part of the standard perl distribution) implements
\&\fIceil()\fR, \fIfloor()\fR, and other mathematical and trigonometric functions.
The Math::Complex module (part of the standard perl distribution)
defines mathematical functions that work on both the reals and the
imaginary numbers.  Math::Complex not as efficient as \s-1POSIX,\s0 but
\&\s-1POSIX\s0 can't work with complex numbers.
.PP
Rounding in financial applications can have serious implications, and
the rounding method used should be specified precisely.  In these
cases, it probably pays not to trust whichever system rounding is
being used by Perl, but to instead implement the rounding function you
need yourself.
.SS "Bigger Numbers"
.IX Xref "number, arbitrary precision"
.IX Subsection "Bigger Numbers"
The standard \f(CW\*(C`Math::BigInt\*(C'\fR, \f(CW\*(C`Math::BigRat\*(C'\fR, and \f(CW\*(C`Math::BigFloat\*(C'\fR modules,
along with the \f(CW\*(C`bignum\*(C'\fR, \f(CW\*(C`bigint\*(C'\fR, and \f(CW\*(C`bigrat\*(C'\fR pragmas, provide
variable-precision arithmetic and overloaded operators, although
they're currently pretty slow. At the cost of some space and
considerable speed, they avoid the normal pitfalls associated with
limited-precision representations.
.PP
.Vb 5
\&        use 5.010;
\&        use bigint;  # easy interface to Math::BigInt
\&        $x = 123456789123456789;
\&        say $x * $x;
\&    +15241578780673678515622620750190521
.Ve
.PP
Or with rationals:
.PP
.Vb 8
\&        use 5.010;
\&        use bigrat;
\&        $a = 3/22;
\&        $b = 4/6;
\&        say "a/b is ", $a/$b;
\&        say "a*b is ", $a*$b;
\&    a/b is 9/44
\&    a*b is 1/11
.Ve
.PP
Several modules let you calculate with (bound only by memory and \s-1CPU\s0 time)
unlimited or fixed precision. There are also some non-standard modules that
provide faster implementations via external C libraries.
.PP
Here is a short, but incomplete summary:
.PP
.Vb 10
\&  Math::String           treat string sequences like numbers
\&  Math::FixedPrecision   calculate with a fixed precision
\&  Math::Currency         for currency calculations
\&  Bit::Vector            manipulate bit vectors fast (uses C)
\&  Math::BigIntFast       Bit::Vector wrapper for big numbers
\&  Math::Pari             provides access to the Pari C library
\&  Math::Cephes           uses the external Cephes C library (no
\&                         big numbers)
\&  Math::Cephes::Fraction fractions via the Cephes library
\&  Math::GMP              another one using an external C library
\&  Math::GMPz             an alternative interface to libgmp\*(Aqs big ints
\&  Math::GMPq             an interface to libgmp\*(Aqs fraction numbers
\&  Math::GMPf             an interface to libgmp\*(Aqs floating point numbers
.Ve
.PP
Choose wisely.
                                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlop5.16.1                                 0100644 0001750 0001750 00000447316 12566207422 022570  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOP 1"
.TH PERLOP 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlop \- Perl operators and precedence
.IX Xref "operator"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Operator Precedence and Associativity"
.IX Xref "operator, precedence precedence associativity"
.IX Subsection "Operator Precedence and Associativity"
Operator precedence and associativity work in Perl more or less like
they do in mathematics.
.PP
\&\fIOperator precedence\fR means some operators are evaluated before
others.  For example, in \f(CW\*(C`2 + 4 * 5\*(C'\fR, the multiplication has higher
precedence so \f(CW\*(C`4 * 5\*(C'\fR is evaluated first yielding \f(CW\*(C`2 + 20 ==
22\*(C'\fR and not \f(CW\*(C`6 * 5 == 30\*(C'\fR.
.PP
\&\fIOperator associativity\fR defines what happens if a sequence of the
same operators is used one after another: whether the evaluator will
evaluate the left operations first or the right.  For example, in \f(CW\*(C`8
\&\- 4 \- 2\*(C'\fR, subtraction is left associative so Perl evaluates the
expression left to right.  \f(CW\*(C`8 \- 4\*(C'\fR is evaluated first making the
expression \f(CW\*(C`4 \- 2 == 2\*(C'\fR and not \f(CW\*(C`8 \- 2 == 6\*(C'\fR.
.PP
Perl operators have the following associativity and precedence,
listed from highest precedence to lowest.  Operators borrowed from
C keep the same precedence relationship with each other, even where
C's precedence is slightly screwy.  (This makes learning Perl easier
for C folks.)  With very few exceptions, these all operate on scalar
values only, not array values.
.PP
.Vb 10
\&    left        terms and list operators (leftward)
\&    left        \->
\&    nonassoc    ++ \-\-
\&    right       **
\&    right       ! ~ \e and unary + and \-
\&    left        =~ !~
\&    left        * / % x
\&    left        + \- .
\&    left        << >>
\&    nonassoc    named unary operators
\&    nonassoc    < > <= >= lt gt le ge
\&    nonassoc    == != <=> eq ne cmp ~~
\&    left        &
\&    left        | ^
\&    left        &&
\&    left        || //
\&    nonassoc    ..  ...
\&    right       ?:
\&    right       = += \-= *= etc.
\&    left        , =>
\&    nonassoc    list operators (rightward)
\&    right       not
\&    left        and
\&    left        or xor
.Ve
.PP
In the following sections, these operators are covered in precedence order.
.PP
Many operators can be overloaded for objects.  See overload.
.SS "Terms and List Operators (Leftward)"
.IX Xref "list operator operator, list term"
.IX Subsection "Terms and List Operators (Leftward)"
A \s-1TERM\s0 has the highest precedence in Perl.  They include variables,
quote and quote-like operators, any expression in parentheses,
and any function whose arguments are parenthesized.  Actually, there
aren't really functions in this sense, just list operators and unary
operators behaving as functions because you put parentheses around
the arguments.  These are all documented in perlfunc.
.PP
If any list operator (\fIprint()\fR, etc.) or any unary operator (\fIchdir()\fR, etc.)
is followed by a left parenthesis as the next token, the operator and
arguments within parentheses are taken to be of highest precedence,
just like a normal function call.
.PP
In the absence of parentheses, the precedence of list operators such as
\&\f(CW\*(C`print\*(C'\fR, \f(CW\*(C`sort\*(C'\fR, or \f(CW\*(C`chmod\*(C'\fR is either very high or very low depending on
whether you are looking at the left side or the right side of the operator.
For example, in
.PP
.Vb 2
\&    @ary = (1, 3, sort 4, 2);
\&    print @ary;         # prints 1324
.Ve
.PP
the commas on the right of the sort are evaluated before the sort,
but the commas on the left are evaluated after.  In other words,
list operators tend to gobble up all arguments that follow, and
then act like a simple \s-1TERM\s0 with regard to the preceding expression.
Be careful with parentheses:
.PP
.Vb 3
\&    # These evaluate exit before doing the print:
\&    print($foo, exit);  # Obviously not what you want.
\&    print $foo, exit;   # Nor is this.
\&
\&    # These do the print before evaluating exit:
\&    (print $foo), exit; # This is what you want.
\&    print($foo), exit;  # Or this.
\&    print ($foo), exit; # Or even this.
.Ve
.PP
Also note that
.PP
.Vb 1
\&    print ($foo & 255) + 1, "\en";
.Ve
.PP
probably doesn't do what you expect at first glance.  The parentheses
enclose the argument list for \f(CW\*(C`print\*(C'\fR which is evaluated (printing
the result of \f(CW\*(C`$foo & 255\*(C'\fR).  Then one is added to the return value
of \f(CW\*(C`print\*(C'\fR (usually 1).  The result is something like this:
.PP
.Vb 1
\&    1 + 1, "\en";    # Obviously not what you meant.
.Ve
.PP
To do what you meant properly, you must write:
.PP
.Vb 1
\&    print(($foo & 255) + 1, "\en");
.Ve
.PP
See \*(L"Named Unary Operators\*(R" for more discussion of this.
.PP
Also parsed as terms are the \f(CW\*(C`do {}\*(C'\fR and \f(CW\*(C`eval {}\*(C'\fR constructs, as
well as subroutine and method calls, and the anonymous
constructors \f(CW\*(C`[]\*(C'\fR and \f(CW\*(C`{}\*(C'\fR.
.PP
See also \*(L"Quote and Quote-like Operators\*(R" toward the end of this section,
as well as \*(L"I/O Operators\*(R".
.SS "The Arrow Operator"
.IX Xref "arrow dereference ->"
.IX Subsection "The Arrow Operator"
"\f(CW\*(C`\->\*(C'\fR" is an infix dereference operator, just as it is in C
and \*(C+.  If the right side is either a \f(CW\*(C`[...]\*(C'\fR, \f(CW\*(C`{...}\*(C'\fR, or a
\&\f(CW\*(C`(...)\*(C'\fR subscript, then the left side must be either a hard or
symbolic reference to an array, a hash, or a subroutine respectively.
(Or technically speaking, a location capable of holding a hard
reference, if it's an array or hash reference being used for
assignment.)  See perlreftut and perlref.
.PP
Otherwise, the right side is a method name or a simple scalar
variable containing either the method name or a subroutine reference,
and the left side must be either an object (a blessed reference)
or a class name (that is, a package name).  See perlobj.
.SS "Auto-increment and Auto-decrement"
.IX Xref "increment auto-increment ++ decrement auto-decrement --"
.IX Subsection "Auto-increment and Auto-decrement"
\&\*(L"++\*(R" and \*(L"\-\-\*(R" work as in C.  That is, if placed before a variable,
they increment or decrement the variable by one before returning the
value, and if placed after, increment or decrement after returning the
value.
.PP
.Vb 3
\&    $i = 0;  $j = 0;
\&    print $i++;  # prints 0
\&    print ++$j;  # prints 1
.Ve
.PP
Note that just as in C, Perl doesn't define \fBwhen\fR the variable is
incremented or decremented. You just know it will be done sometime
before or after the value is returned. This also means that modifying
a variable twice in the same statement will lead to undefined behavior.
Avoid statements like:
.PP
.Vb 2
\&    $i = $i ++;
\&    print ++ $i + $i ++;
.Ve
.PP
Perl will not guarantee what the result of the above statements is.
.PP
The auto-increment operator has a little extra builtin magic to it.  If
you increment a variable that is numeric, or that has ever been used in
a numeric context, you get a normal increment.  If, however, the
variable has been used in only string contexts since it was set, and
has a value that is not the empty string and matches the pattern
\&\f(CW\*(C`/^[a\-zA\-Z]*[0\-9]*\ez/\*(C'\fR, the increment is done as a string, preserving each
character within its range, with carry:
.PP
.Vb 4
\&    print ++($foo = "99");      # prints "100"
\&    print ++($foo = "a0");      # prints "a1"
\&    print ++($foo = "Az");      # prints "Ba"
\&    print ++($foo = "zz");      # prints "aaa"
.Ve
.PP
\&\f(CW\*(C`undef\*(C'\fR is always treated as numeric, and in particular is changed
to \f(CW0\fR before incrementing (so that a post-increment of an undef value
will return \f(CW0\fR rather than \f(CW\*(C`undef\*(C'\fR).
.PP
The auto-decrement operator is not magical.
.SS "Exponentiation"
.IX Xref "** exponentiation power"
.IX Subsection "Exponentiation"
Binary \*(L"**\*(R" is the exponentiation operator.  It binds even more
tightly than unary minus, so \-2**4 is \-(2**4), not (\-2)**4. (This is
implemented using C's \fIpow\fR\|(3) function, which actually works on doubles
internally.)
.SS "Symbolic Unary Operators"
.IX Xref "unary operator operator, unary"
.IX Subsection "Symbolic Unary Operators"
Unary \*(L"!\*(R" performs logical negation, that is, \*(L"not\*(R".  See also \f(CW\*(C`not\*(C'\fR for a lower
precedence version of this.
.IX Xref "!"
.PP
Unary \*(L"\-\*(R" performs arithmetic negation if the operand is numeric,
including any string that looks like a number.  If the operand is
an identifier, a string consisting of a minus sign concatenated
with the identifier is returned.  Otherwise, if the string starts
with a plus or minus, a string starting with the opposite sign is
returned.  One effect of these rules is that \-bareword is equivalent
to the string \*(L"\-bareword\*(R".  If, however, the string begins with a
non-alphabetic character (excluding \*(L"+\*(R" or \*(L"\-\*(R"), Perl will attempt to convert
the string to a numeric and the arithmetic negation is performed. If the
string cannot be cleanly converted to a numeric, Perl will give the warning
\&\fBArgument \*(L"the string\*(R" isn't numeric in negation (\-) at ...\fR.
.IX Xref "- negation, arithmetic"
.PP
Unary \*(L"~\*(R" performs bitwise negation, that is, 1's complement.  For
example, \f(CW\*(C`0666 & ~027\*(C'\fR is 0640.  (See also \*(L"Integer Arithmetic\*(R" and
\&\*(L"Bitwise String Operators\*(R".)  Note that the width of the result is
platform-dependent: ~0 is 32 bits wide on a 32\-bit platform, but 64
bits wide on a 64\-bit platform, so if you are expecting a certain bit
width, remember to use the \*(L"&\*(R" operator to mask off the excess bits.
.IX Xref "~ negation, binary"
.PP
When complementing strings, if all characters have ordinal values under
256, then their complements will, also.  But if they do not, all
characters will be in either 32\- or 64\-bit complements, depending on your
architecture.  So for example, \f(CW\*(C`~"\ex{3B1}"\*(C'\fR is \f(CW"\ex{FFFF_FC4E}"\fR on
32\-bit machines and \f(CW"\ex{FFFF_FFFF_FFFF_FC4E}"\fR on 64\-bit machines.
.PP
Unary \*(L"+\*(R" has no effect whatsoever, even on strings.  It is useful
syntactically for separating a function name from a parenthesized expression
that would otherwise be interpreted as the complete list of function
arguments.  (See examples above under \*(L"Terms and List Operators (Leftward)\*(R".)
.IX Xref "+"
.PP
Unary \*(L"\e\*(R" creates a reference to whatever follows it.  See perlreftut
and perlref.  Do not confuse this behavior with the behavior of
backslash within a string, although both forms do convey the notion
of protecting the next thing from interpolation.
.IX Xref "\\ reference backslash"
.SS "Binding Operators"
.IX Xref "binding operator, binding =~ !~"
.IX Subsection "Binding Operators"
Binary \*(L"=~\*(R" binds a scalar expression to a pattern match.  Certain operations
search or modify the string \f(CW$_\fR by default.  This operator makes that kind
of operation work on some other string.  The right argument is a search
pattern, substitution, or transliteration.  The left argument is what is
supposed to be searched, substituted, or transliterated instead of the default
\&\f(CW$_\fR.  When used in scalar context, the return value generally indicates the
success of the operation.  The exceptions are substitution (s///)
and transliteration (y///) with the \f(CW\*(C`/r\*(C'\fR (non-destructive) option,
which cause the \fBr\fReturn value to be the result of the substitution.
Behavior in list context depends on the particular operator.
See \*(L"Regexp Quote-Like Operators\*(R" for details and perlretut for
examples using these operators.
.PP
If the right argument is an expression rather than a search pattern,
substitution, or transliteration, it is interpreted as a search pattern at run
time. Note that this means that its contents will be interpolated twice, so
.PP
.Vb 1
\&    \*(Aq\e\e\*(Aq =~ q\*(Aq\e\e\*(Aq;
.Ve
.PP
is not ok, as the regex engine will end up trying to compile the
pattern \f(CW\*(C`\e\*(C'\fR, which it will consider a syntax error.
.PP
Binary \*(L"!~\*(R" is just like \*(L"=~\*(R" except the return value is negated in
the logical sense.
.PP
Binary \*(L"!~\*(R" with a non-destructive substitution (s///r) or transliteration
(y///r) is a syntax error.
.SS "Multiplicative Operators"
.IX Xref "operator, multiplicative"
.IX Subsection "Multiplicative Operators"
Binary \*(L"*\*(R" multiplies two numbers.
.IX Xref "*"
.PP
Binary \*(L"/\*(R" divides two numbers.
.IX Xref "slash"
.PP
Binary \*(L"%\*(R" is the modulo operator, which computes the division
remainder of its first argument with respect to its second argument.
Given integer
operands \f(CW$a\fR and \f(CW$b\fR: If \f(CW$b\fR is positive, then \f(CW\*(C`$a % $b\*(C'\fR is
\&\f(CW$a\fR minus the largest multiple of \f(CW$b\fR less than or equal to
\&\f(CW$a\fR.  If \f(CW$b\fR is negative, then \f(CW\*(C`$a % $b\*(C'\fR is \f(CW$a\fR minus the
smallest multiple of \f(CW$b\fR that is not less than \f(CW$a\fR (that is, the
result will be less than or equal to zero).  If the operands
\&\f(CW$a\fR and \f(CW$b\fR are floating point values and the absolute value of
\&\f(CW$b\fR (that is \f(CW\*(C`abs($b)\*(C'\fR) is less than \f(CW\*(C`(UV_MAX + 1)\*(C'\fR, only
the integer portion of \f(CW$a\fR and \f(CW$b\fR will be used in the operation
(Note: here \f(CW\*(C`UV_MAX\*(C'\fR means the maximum of the unsigned integer type).
If the absolute value of the right operand (\f(CW\*(C`abs($b)\*(C'\fR) is greater than
or equal to \f(CW\*(C`(UV_MAX + 1)\*(C'\fR, \*(L"%\*(R" computes the floating-point remainder
\&\f(CW$r\fR in the equation \f(CW\*(C`($r = $a \- $i*$b)\*(C'\fR where \f(CW$i\fR is a certain
integer that makes \f(CW$r\fR have the same sign as the right operand
\&\f(CW$b\fR (\fBnot\fR as the left operand \f(CW$a\fR like C function \f(CW\*(C`fmod()\*(C'\fR)
and the absolute value less than that of \f(CW$b\fR.
Note that when \f(CW\*(C`use integer\*(C'\fR is in scope, \*(L"%\*(R" gives you direct access
to the modulo operator as implemented by your C compiler.  This
operator is not as well defined for negative operands, but it will
execute faster.
.IX Xref "% remainder modulo mod"
.PP
Binary \*(L"x\*(R" is the repetition operator.  In scalar context or if the left
operand is not enclosed in parentheses, it returns a string consisting
of the left operand repeated the number of times specified by the right
operand.  In list context, if the left operand is enclosed in
parentheses or is a list formed by \f(CW\*(C`qw/STRING/\*(C'\fR, it repeats the list.
If the right operand is zero or negative, it returns an empty string
or an empty list, depending on the context.
.IX Xref "x"
.PP
.Vb 1
\&    print \*(Aq\-\*(Aq x 80;             # print row of dashes
\&
\&    print "\et" x ($tab/8), \*(Aq \*(Aq x ($tab%8);      # tab over
\&
\&    @ones = (1) x 80;           # a list of 80 1\*(Aqs
\&    @ones = (5) x @ones;        # set all elements to 5
.Ve
.SS "Additive Operators"
.IX Xref "operator, additive"
.IX Subsection "Additive Operators"
Binary \f(CW\*(C`+\*(C'\fR returns the sum of two numbers.
.IX Xref "+"
.PP
Binary \f(CW\*(C`\-\*(C'\fR returns the difference of two numbers.
.IX Xref "-"
.PP
Binary \f(CW\*(C`.\*(C'\fR concatenates two strings.
.IX Xref "string, concatenation concatenation cat concat concatenate ."
.SS "Shift Operators"
.IX Xref "shift operator operator, shift << >> right shift left shift bitwise shift shl shr shift, right shift, left"
.IX Subsection "Shift Operators"
Binary \f(CW\*(C`<<\*(C'\fR returns the value of its left argument shifted left by the
number of bits specified by the right argument.  Arguments should be
integers.  (See also \*(L"Integer Arithmetic\*(R".)
.PP
Binary \f(CW\*(C`>>\*(C'\fR returns the value of its left argument shifted right by
the number of bits specified by the right argument.  Arguments should
be integers.  (See also \*(L"Integer Arithmetic\*(R".)
.PP
Note that both \f(CW\*(C`<<\*(C'\fR and \f(CW\*(C`>>\*(C'\fR in Perl are implemented directly using
\&\f(CW\*(C`<<\*(C'\fR and \f(CW\*(C`>>\*(C'\fR  in C.  If \f(CW\*(C`use integer\*(C'\fR (see \*(L"Integer Arithmetic\*(R") is
in force then signed C integers are used, else unsigned C integers are
used.  Either way, the implementation isn't going to generate results
larger than the size of the integer type Perl was built with (32 bits
or 64 bits).
.PP
The result of overflowing the range of the integers is undefined
because it is undefined also in C.  In other words, using 32\-bit
integers, \f(CW\*(C`1 << 32\*(C'\fR is undefined.  Shifting by a negative number
of bits is also undefined.
.PP
If you get tired of being subject to your platform's native integers,
the \f(CW\*(C`use bigint\*(C'\fR pragma neatly sidesteps the issue altogether:
.PP
.Vb 5
\&    print 20 << 20;  # 20971520
\&    print 20 << 40;  # 5120 on 32\-bit machines, 
\&                     # 21990232555520 on 64\-bit machines
\&    use bigint;
\&    print 20 << 100; # 25353012004564588029934064107520
.Ve
.SS "Named Unary Operators"
.IX Xref "operator, named unary"
.IX Subsection "Named Unary Operators"
The various named unary operators are treated as functions with one
argument, with optional parentheses.
.PP
If any list operator (\fIprint()\fR, etc.) or any unary operator (\fIchdir()\fR, etc.)
is followed by a left parenthesis as the next token, the operator and
arguments within parentheses are taken to be of highest precedence,
just like a normal function call.  For example,
because named unary operators are higher precedence than \f(CW\*(C`||\*(C'\fR:
.PP
.Vb 4
\&    chdir $foo    || die;       # (chdir $foo) || die
\&    chdir($foo)   || die;       # (chdir $foo) || die
\&    chdir ($foo)  || die;       # (chdir $foo) || die
\&    chdir +($foo) || die;       # (chdir $foo) || die
.Ve
.PP
but, because * is higher precedence than named operators:
.PP
.Vb 4
\&    chdir $foo * 20;    # chdir ($foo * 20)
\&    chdir($foo) * 20;   # (chdir $foo) * 20
\&    chdir ($foo) * 20;  # (chdir $foo) * 20
\&    chdir +($foo) * 20; # chdir ($foo * 20)
\&
\&    rand 10 * 20;       # rand (10 * 20)
\&    rand(10) * 20;      # (rand 10) * 20
\&    rand (10) * 20;     # (rand 10) * 20
\&    rand +(10) * 20;    # rand (10 * 20)
.Ve
.PP
Regarding precedence, the filetest operators, like \f(CW\*(C`\-f\*(C'\fR, \f(CW\*(C`\-M\*(C'\fR, etc. are
treated like named unary operators, but they don't follow this functional
parenthesis rule.  That means, for example, that \f(CW\*(C`\-f($file).".bak"\*(C'\fR is
equivalent to \f(CW\*(C`\-f "$file.bak"\*(C'\fR.
.IX Xref "-X filetest operator, filetest"
.PP
See also \*(L"Terms and List Operators (Leftward)\*(R".
.SS "Relational Operators"
.IX Xref "relational operator operator, relational"
.IX Subsection "Relational Operators"
Perl operators that return true or false generally return values 
that can be safely used as numbers.  For example, the relational
operators in this section and the equality operators in the next
one return \f(CW1\fR for true and a special version of the defined empty
string, \f(CW""\fR, which counts as a zero but is exempt from warnings
about improper numeric conversions, just as \f(CW"0 but true"\fR is.
.PP
Binary \*(L"<\*(R" returns true if the left argument is numerically less than
the right argument.
.IX Xref "<"
.PP
Binary \*(L">\*(R" returns true if the left argument is numerically greater
than the right argument.
.IX Xref ">"
.PP
Binary \*(L"<=\*(R" returns true if the left argument is numerically less than
or equal to the right argument.
.IX Xref "<="
.PP
Binary \*(L">=\*(R" returns true if the left argument is numerically greater
than or equal to the right argument.
.IX Xref ">="
.PP
Binary \*(L"lt\*(R" returns true if the left argument is stringwise less than
the right argument.
.IX Xref "lt"
.PP
Binary \*(L"gt\*(R" returns true if the left argument is stringwise greater
than the right argument.
.IX Xref "gt"
.PP
Binary \*(L"le\*(R" returns true if the left argument is stringwise less than
or equal to the right argument.
.IX Xref "le"
.PP
Binary \*(L"ge\*(R" returns true if the left argument is stringwise greater
than or equal to the right argument.
.IX Xref "ge"
.SS "Equality Operators"
.IX Xref "equality equal equals operator, equality"
.IX Subsection "Equality Operators"
Binary \*(L"==\*(R" returns true if the left argument is numerically equal to
the right argument.
.IX Xref "=="
.PP
Binary \*(L"!=\*(R" returns true if the left argument is numerically not equal
to the right argument.
.IX Xref "!="
.PP
Binary \*(L"<=>\*(R" returns \-1, 0, or 1 depending on whether the left
argument is numerically less than, equal to, or greater than the right
argument.  If your platform supports NaNs (not-a-numbers) as numeric
values, using them with \*(L"<=>\*(R" returns undef.  NaN is not \*(L"<\*(R", \*(L"==\*(R", \*(L">\*(R",
\&\*(L"<=\*(R" or \*(L">=\*(R" anything (even NaN), so those 5 return false. NaN != NaN
returns true, as does NaN != anything else. If your platform doesn't
support NaNs then NaN is just a string with numeric value 0.
.IX Xref "<=> spaceship"
.PP
.Vb 2
\&    $ perl \-le \*(Aq$a = "NaN"; print "No NaN support here" if $a == $a\*(Aq
\&    $ perl \-le \*(Aq$a = "NaN"; print "NaN support here" if $a != $a\*(Aq
.Ve
.PP
(Note that the bigint, bigrat, and bignum pragmas all 
support \*(L"NaN\*(R".)
.PP
Binary \*(L"eq\*(R" returns true if the left argument is stringwise equal to
the right argument.
.IX Xref "eq"
.PP
Binary \*(L"ne\*(R" returns true if the left argument is stringwise not equal
to the right argument.
.IX Xref "ne"
.PP
Binary \*(L"cmp\*(R" returns \-1, 0, or 1 depending on whether the left
argument is stringwise less than, equal to, or greater than the right
argument.
.IX Xref "cmp"
.PP
Binary \*(L"~~\*(R" does a smartmatch between its arguments.  Smart matching
is described in the next section.
.IX Xref "~~"
.PP
\&\*(L"lt\*(R", \*(L"le\*(R", \*(L"ge\*(R", \*(L"gt\*(R" and \*(L"cmp\*(R" use the collation (sort) order specified
by the current locale if a legacy \f(CW\*(C`use locale\*(C'\fR (but not
\&\f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR) is in effect.  See
perllocale.  Do not mix these with Unicode, only with legacy binary
encodings.  The standard Unicode::Collate and
Unicode::Collate::Locale modules offer much more powerful solutions to
collation issues.
.SS "Smartmatch Operator"
.IX Subsection "Smartmatch Operator"
First available in Perl 5.10.1 (the 5.10.0 version behaved differently),
binary \f(CW\*(C`~~\*(C'\fR does a \*(L"smartmatch\*(R" between its arguments.  This is mostly
used implicitly in the \f(CW\*(C`when\*(C'\fR construct described in perlsyn, although
not all \f(CW\*(C`when\*(C'\fR clauses call the smartmatch operator.  Unique among all of
Perl's operators, the smartmatch operator can recurse.
.PP
It is also unique in that all other Perl operators impose a context
(usually string or numeric context) on their operands, autoconverting
those operands to those imposed contexts.  In contrast, smartmatch
\&\fIinfers\fR contexts from the actual types of its operands and uses that
type information to select a suitable comparison mechanism.
.PP
The \f(CW\*(C`~~\*(C'\fR operator compares its operands \*(L"polymorphically\*(R", determining how
to compare them according to their actual types (numeric, string, array,
hash, etc.)  Like the equality operators with which it shares the same
precedence, \f(CW\*(C`~~\*(C'\fR returns 1 for true and \f(CW""\fR for false.  It is often best
read aloud as \*(L"in\*(R", \*(L"inside of\*(R", or \*(L"is contained in\*(R", because the left
operand is often looked for \fIinside\fR the right operand.  That makes the
order of the operands to the smartmatch operand often opposite that of
the regular match operator.  In other words, the \*(L"smaller\*(R" thing is usually
placed in the left operand and the larger one in the right.
.PP
The behavior of a smartmatch depends on what type of things its arguments
are, as determined by the following table.  The first row of the table
whose types apply determines the smartmatch behavior.  Because what
actually happens is mostly determined by the type of the second operand,
the table is sorted on the right operand instead of on the left.
.PP
.Vb 4
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& Any       undef      check whether Any is undefined                    
\&                like: !defined Any
\&
\& Any       Object     invoke ~~ overloading on Object, or die
\&
\& Right operand is an ARRAY:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& ARRAY1    ARRAY2     recurse on paired elements of ARRAY1 and ARRAY2[2]
\&                like: (ARRAY1[0] ~~ ARRAY2[0])
\&                        && (ARRAY1[1] ~~ ARRAY2[1]) && ...
\& HASH      ARRAY      any ARRAY elements exist as HASH keys             
\&                like: grep { exists HASH\->{$_} } ARRAY
\& Regexp    ARRAY      any ARRAY elements pattern match Regexp
\&                like: grep { /Regexp/ } ARRAY
\& undef     ARRAY      undef in ARRAY                                    
\&                like: grep { !defined } ARRAY
\& Any       ARRAY      smartmatch each ARRAY element[3]                   
\&                like: grep { Any ~~ $_ } ARRAY
\&
\& Right operand is a HASH:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& HASH1     HASH2      all same keys in both HASHes                      
\&                like: keys HASH1 ==
\&                         grep { exists HASH2\->{$_} } keys HASH1
\& ARRAY     HASH       any ARRAY elements exist as HASH keys             
\&                like: grep { exists HASH\->{$_} } ARRAY
\& Regexp    HASH       any HASH keys pattern match Regexp                
\&                like: grep { /Regexp/ } keys HASH
\& undef     HASH       always false (undef can\*(Aqt be a key)               
\&                like: 0 == 1
\& Any       HASH       HASH key existence                                
\&                like: exists HASH\->{Any}
\&
\& Right operand is CODE:
\&   
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& ARRAY     CODE       sub returns true on all ARRAY elements[1]
\&                like: !grep { !CODE\->($_) } ARRAY
\& HASH      CODE       sub returns true on all HASH keys[1]
\&                like: !grep { !CODE\->($_) } keys HASH
\& Any       CODE       sub passed Any returns true              
\&                like: CODE\->(Any)
.Ve
.PP
Right operand is a Regexp:
.PP
.Vb 8
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& ARRAY     Regexp     any ARRAY elements match Regexp                   
\&                like: grep { /Regexp/ } ARRAY
\& HASH      Regexp     any HASH keys match Regexp                        
\&                like: grep { /Regexp/ } keys HASH
\& Any       Regexp     pattern match                                     
\&                like: Any =~ /Regexp/
\&
\& Other:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& Object    Any        invoke ~~ overloading on Object,
\&                      or fall back to...
\&
\& Any       Num        numeric equality                                  
\&                 like: Any == Num
\& Num       nummy[4]    numeric equality
\&                 like: Num == nummy
\& undef     Any        check whether undefined
\&                 like: !defined(Any)
\& Any       Any        string equality                                   
\&                 like: Any eq Any
.Ve
.PP
Notes:
.IP "1. Empty hashes or arrays match." 4
.IX Item "1. Empty hashes or arrays match."
.PD 0
.IP "2. That is, each element smartmatches the element of the same index in the other array.[3]" 4
.IX Item "2. That is, each element smartmatches the element of the same index in the other array.[3]"
.IP "3. If a circular reference is found, fall back to referential equality." 4
.IX Item "3. If a circular reference is found, fall back to referential equality."
.IP "4. Either an actual number, or a string that looks like one." 4
.IX Item "4. Either an actual number, or a string that looks like one."
.PD
.PP
The smartmatch implicitly dereferences any non-blessed hash or array
reference, so the \f(CW\*(C`\f(CIHASH\f(CW\*(C'\fR and \f(CW\*(C`\f(CIARRAY\f(CW\*(C'\fR entries apply in those cases.
For blessed references, the \f(CW\*(C`\f(CIObject\f(CW\*(C'\fR entries apply.  Smartmatches
involving hashes only consider hash keys, never hash values.
.PP
The \*(L"like\*(R" code entry is not always an exact rendition.  For example, the
smartmatch operator short-circuits whenever possible, but \f(CW\*(C`grep\*(C'\fR does
not.  Also, \f(CW\*(C`grep\*(C'\fR in scalar context returns the number of matches, but
\&\f(CW\*(C`~~\*(C'\fR returns only true or false.
.PP
Unlike most operators, the smartmatch operator knows to treat \f(CW\*(C`undef\*(C'\fR
specially:
.PP
.Vb 3
\&    use v5.10.1;
\&    @array = (1, 2, 3, undef, 4, 5);
\&    say "some elements undefined" if undef ~~ @array;
.Ve
.PP
Each operand is considered in a modified scalar context, the modification
being that array and hash variables are passed by reference to the
operator, which implicitly dereferences them.  Both elements
of each pair are the same:
.PP
.Vb 1
\&    use v5.10.1;
\&
\&    my %hash = (red    => 1, blue   => 2, green  => 3,
\&                orange => 4, yellow => 5, purple => 6,
\&                black  => 7, grey   => 8, white  => 9);
\&
\&    my @array = qw(red blue green);
\&
\&    say "some array elements in hash keys" if  @array ~~  %hash;
\&    say "some array elements in hash keys" if \e@array ~~ \e%hash;
\&
\&    say "red in array" if "red" ~~  @array;
\&    say "red in array" if "red" ~~ \e@array;
\&
\&    say "some keys end in e" if /e$/ ~~  %hash;
\&    say "some keys end in e" if /e$/ ~~ \e%hash;
.Ve
.PP
Two arrays smartmatch if each element in the first array smartmatches
(that is, is \*(L"in\*(R") the corresponding element in the second array,
recursively.
.PP
.Vb 6
\&    use v5.10.1;
\&    my @little = qw(red blue green);
\&    my @bigger = ("red", "blue", [ "orange", "green" ] );
\&    if (@little ~~ @bigger) {  # true!
\&        say "little is contained in bigger";
\&    }
.Ve
.PP
Because the smartmatch operator recurses on nested arrays, this
will still report that \*(L"red\*(R" is in the array.
.PP
.Vb 4
\&    use v5.10.1;
\&    my @array = qw(red blue green);
\&    my $nested_array = [[[[[[[ @array ]]]]]]];
\&    say "red in array" if "red" ~~ $nested_array;
.Ve
.PP
If two arrays smartmatch each other, then they are deep
copies of each others' values, as this example reports:
.PP
.Vb 3
\&    use v5.12.0;
\&    my @a = (0, 1, 2, [3, [4, 5], 6], 7); 
\&    my @b = (0, 1, 2, [3, [4, 5], 6], 7); 
\&
\&    if (@a ~~ @b && @b ~~ @a) {
\&        say "a and b are deep copies of each other";
\&    } 
\&    elsif (@a ~~ @b) {
\&        say "a smartmatches in b";
\&    } 
\&    elsif (@b ~~ @a) {
\&        say "b smartmatches in a";
\&    } 
\&    else {
\&        say "a and b don\*(Aqt smartmatch each other at all";
\&    }
.Ve
.PP
If you were to set \f(CW\*(C`$b[3] = 4\*(C'\fR, then instead of reporting that \*(L"a and b
are deep copies of each other\*(R", it now reports that \*(L"b smartmatches in a\*(R".
That because the corresponding position in \f(CW@a\fR contains an array that
(eventually) has a 4 in it.
.PP
Smartmatching one hash against another reports whether both contain the
same keys, no more and no less. This could be used to see whether two
records have the same field names, without caring what values those fields
might have.  For example:
.PP
.Vb 3
\&    use v5.10.1;
\&    sub make_dogtag {
\&        state $REQUIRED_FIELDS = { name=>1, rank=>1, serial_num=>1 };
\&
\&        my ($class, $init_fields) = @_;
\&
\&        die "Must supply (only) name, rank, and serial number"
\&            unless $init_fields ~~ $REQUIRED_FIELDS;
\&
\&        ...
\&    }
.Ve
.PP
or, if other non-required fields are allowed, use \s-1ARRAY\s0 ~~ \s-1HASH:\s0
.PP
.Vb 3
\&    use v5.10.1;
\&    sub make_dogtag {
\&        state $REQUIRED_FIELDS = { name=>1, rank=>1, serial_num=>1 };
\&
\&        my ($class, $init_fields) = @_;
\&
\&        die "Must supply (at least) name, rank, and serial number"
\&            unless [keys %{$init_fields}] ~~ $REQUIRED_FIELDS;
\&
\&        ...
\&    }
.Ve
.PP
The smartmatch operator is most often used as the implicit operator of a
\&\f(CW\*(C`when\*(C'\fR clause.  See the section on \*(L"Switch Statements\*(R" in perlsyn.
.PP
\fISmartmatching of Objects\fR
.IX Subsection "Smartmatching of Objects"
.PP
To avoid relying on an object's underlying representation, if the
smartmatch's right operand is an object that doesn't overload \f(CW\*(C`~~\*(C'\fR,
it raises the exception "\f(CW\*(C`Smartmatching a non\-overloaded object
breaks encapsulation\*(C'\fR\*(L". That's because one has no business digging
around to see whether something is \*(R"in" an object. These are all
illegal on objects without a \f(CW\*(C`~~\*(C'\fR overload:
.PP
.Vb 3
\&    %hash ~~ $object
\&       42 ~~ $object
\&   "fred" ~~ $object
.Ve
.PP
However, you can change the way an object is smartmatched by overloading
the \f(CW\*(C`~~\*(C'\fR operator. This is allowed to extend the usual smartmatch semantics.
For objects that do have an \f(CW\*(C`~~\*(C'\fR overload, see overload.
.PP
Using an object as the left operand is allowed, although not very useful.
Smartmatching rules take precedence over overloading, so even if the
object in the left operand has smartmatch overloading, this will be
ignored.  A left operand that is a non-overloaded object falls back on a
string or numeric comparison of whatever the \f(CW\*(C`ref\*(C'\fR operator returns.  That
means that
.PP
.Vb 1
\&    $object ~~ X
.Ve
.PP
does \fInot\fR invoke the overload method with \f(CW\*(C`\f(CIX\f(CW\*(C'\fR as an argument.
Instead the above table is consulted as normal, and based on the type of
\&\f(CW\*(C`\f(CIX\f(CW\*(C'\fR, overloading may or may not be invoked.  For simple strings or
numbers, in becomes equivalent to this:
.PP
.Vb 2
\&    $object ~~ $number          ref($object) == $number
\&    $object ~~ $string          ref($object) eq $string
.Ve
.PP
For example, this reports that the handle smells IOish
(but please don't really do this!):
.PP
.Vb 5
\&    use IO::Handle;
\&    my $fh = IO::Handle\->new();
\&    if ($fh ~~ /\ebIO\eb/) {
\&        say "handle smells IOish";
\&    }
.Ve
.PP
That's because it treats \f(CW$fh\fR as a string like
\&\f(CW"IO::Handle=GLOB(0x8039e0)"\fR, then pattern matches against that.
.SS "Bitwise And"
.IX Xref "operator, bitwise, and bitwise and &"
.IX Subsection "Bitwise And"
Binary \*(L"&\*(R" returns its operands ANDed together bit by bit.
(See also \*(L"Integer Arithmetic\*(R" and \*(L"Bitwise String Operators\*(R".)
.PP
Note that \*(L"&\*(R" has lower priority than relational operators, so for example
the parentheses are essential in a test like
.PP
.Vb 1
\&    print "Even\en" if ($x & 1) == 0;
.Ve
.SS "Bitwise Or and Exclusive Or"
.IX Xref "operator, bitwise, or bitwise or | operator, bitwise, xor bitwise xor ^"
.IX Subsection "Bitwise Or and Exclusive Or"
Binary \*(L"|\*(R" returns its operands ORed together bit by bit.
(See also \*(L"Integer Arithmetic\*(R" and \*(L"Bitwise String Operators\*(R".)
.PP
Binary \*(L"^\*(R" returns its operands XORed together bit by bit.
(See also \*(L"Integer Arithmetic\*(R" and \*(L"Bitwise String Operators\*(R".)
.PP
Note that \*(L"|\*(R" and \*(L"^\*(R" have lower priority than relational operators, so
for example the brackets are essential in a test like
.PP
.Vb 1
\&    print "false\en" if (8 | 2) != 10;
.Ve
.SS "C\-style Logical And"
.IX Xref "&& logical and operator, logical, and"
.IX Subsection "C-style Logical And"
Binary \*(L"&&\*(R" performs a short-circuit logical \s-1AND\s0 operation.  That is,
if the left operand is false, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it
is evaluated.
.SS "C\-style Logical Or"
.IX Xref "|| operator, logical, or"
.IX Subsection "C-style Logical Or"
Binary \*(L"||\*(R" performs a short-circuit logical \s-1OR\s0 operation.  That is,
if the left operand is true, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it
is evaluated.
.SS "Logical Defined-Or"
.IX Xref "operator, logical, defined-or"
.IX Subsection "Logical Defined-Or"
Although it has no direct equivalent in C, Perl's \f(CW\*(C`//\*(C'\fR operator is related
to its C\-style or.  In fact, it's exactly the same as \f(CW\*(C`||\*(C'\fR, except that it
tests the left hand side's definedness instead of its truth.  Thus,
\&\f(CW\*(C`EXPR1 // EXPR2\*(C'\fR returns the value of \f(CW\*(C`EXPR1\*(C'\fR if it's defined,
otherwise, the value of \f(CW\*(C`EXPR2\*(C'\fR is returned. (\f(CW\*(C`EXPR1\*(C'\fR is evaluated
in scalar context, \f(CW\*(C`EXPR2\*(C'\fR in the context of \f(CW\*(C`//\*(C'\fR itself). Usually,
this is the same result as \f(CW\*(C`defined(EXPR1) ? EXPR1 : EXPR2\*(C'\fR (except that
the ternary-operator form can be used as a lvalue, while \f(CW\*(C`EXPR1 // EXPR2\*(C'\fR
cannot). This is very useful for
providing default values for variables.  If you actually want to test if
at least one of \f(CW$a\fR and \f(CW$b\fR is defined, use \f(CW\*(C`defined($a // $b)\*(C'\fR.
.PP
The \f(CW\*(C`||\*(C'\fR, \f(CW\*(C`//\*(C'\fR and \f(CW\*(C`&&\*(C'\fR operators return the last value evaluated
(unlike C's \f(CW\*(C`||\*(C'\fR and \f(CW\*(C`&&\*(C'\fR, which return 0 or 1). Thus, a reasonably
portable way to find out the home directory might be:
.PP
.Vb 4
\&    $home =  $ENV{HOME}
\&          // $ENV{LOGDIR}
\&          // (getpwuid($<))[7]
\&          // die "You\*(Aqre homeless!\en";
.Ve
.PP
In particular, this means that you shouldn't use this
for selecting between two aggregates for assignment:
.PP
.Vb 3
\&    @a = @b || @c;              # this is wrong
\&    @a = scalar(@b) || @c;      # really meant this
\&    @a = @b ? @b : @c;          # this works fine, though
.Ve
.PP
As alternatives to \f(CW\*(C`&&\*(C'\fR and \f(CW\*(C`||\*(C'\fR when used for
control flow, Perl provides the \f(CW\*(C`and\*(C'\fR and \f(CW\*(C`or\*(C'\fR operators (see below).
The short-circuit behavior is identical.  The precedence of \*(L"and\*(R"
and \*(L"or\*(R" is much lower, however, so that you can safely use them after a
list operator without the need for parentheses:
.PP
.Vb 2
\&    unlink "alpha", "beta", "gamma"
\&            or gripe(), next LINE;
.Ve
.PP
With the C\-style operators that would have been written like this:
.PP
.Vb 2
\&    unlink("alpha", "beta", "gamma")
\&            || (gripe(), next LINE);
.Ve
.PP
It would be even more readable to write that this way:
.PP
.Vb 4
\&    unless(unlink("alpha", "beta", "gamma")) {
\&        gripe();
\&        next LINE;
\&    }
.Ve
.PP
Using \*(L"or\*(R" for assignment is unlikely to do what you want; see below.
.SS "Range Operators"
.IX Xref "operator, range range .. ..."
.IX Subsection "Range Operators"
Binary \*(L"..\*(R" is the range operator, which is really two different
operators depending on the context.  In list context, it returns a
list of values counting (up by ones) from the left value to the right
value.  If the left value is greater than the right value then it
returns the empty list.  The range operator is useful for writing
\&\f(CW\*(C`foreach (1..10)\*(C'\fR loops and for doing slice operations on arrays. In
the current implementation, no temporary array is created when the
range operator is used as the expression in \f(CW\*(C`foreach\*(C'\fR loops, but older
versions of Perl might burn a lot of memory when you write something
like this:
.PP
.Vb 3
\&    for (1 .. 1_000_000) {
\&        # code
\&    }
.Ve
.PP
The range operator also works on strings, using the magical
auto-increment, see below.
.PP
In scalar context, \*(L"..\*(R" returns a boolean value.  The operator is
bistable, like a flip-flop, and emulates the line-range (comma)
operator of \fBsed\fR, \fBawk\fR, and various editors. Each \*(L"..\*(R" operator
maintains its own boolean state, even across calls to a subroutine
that contains it. It is false as long as its left operand is false.
Once the left operand is true, the range operator stays true until the
right operand is true, \fI\s-1AFTER\s0\fR which the range operator becomes false
again.  It doesn't become false till the next time the range operator
is evaluated.  It can test the right operand and become false on the
same evaluation it became true (as in \fBawk\fR), but it still returns
true once. If you don't want it to test the right operand until the
next evaluation, as in \fBsed\fR, just use three dots (\*(L"...\*(R") instead of
two.  In all other regards, \*(L"...\*(R" behaves just like \*(L"..\*(R" does.
.PP
The right operand is not evaluated while the operator is in the
\&\*(L"false\*(R" state, and the left operand is not evaluated while the
operator is in the \*(L"true\*(R" state.  The precedence is a little lower
than || and &&.  The value returned is either the empty string for
false, or a sequence number (beginning with 1) for true.  The sequence
number is reset for each range encountered.  The final sequence number
in a range has the string \*(L"E0\*(R" appended to it, which doesn't affect
its numeric value, but gives you something to search for if you want
to exclude the endpoint.  You can exclude the beginning point by
waiting for the sequence number to be greater than 1.
.PP
If either operand of scalar \*(L"..\*(R" is a constant expression,
that operand is considered true if it is equal (\f(CW\*(C`==\*(C'\fR) to the current
input line number (the \f(CW$.\fR variable).
.PP
To be pedantic, the comparison is actually \f(CW\*(C`int(EXPR) == int(EXPR)\*(C'\fR,
but that is only an issue if you use a floating point expression; when
implicitly using \f(CW$.\fR as described in the previous paragraph, the
comparison is \f(CW\*(C`int(EXPR) == int($.)\*(C'\fR which is only an issue when \f(CW$.\fR
is set to a floating point value and you are not reading from a file.
Furthermore, \f(CW"span" .. "spat"\fR or \f(CW\*(C`2.18 .. 3.14\*(C'\fR will not do what
you want in scalar context because each of the operands are evaluated
using their integer representation.
.PP
Examples:
.PP
As a scalar operator:
.PP
.Vb 2
\&    if (101 .. 200) { print; } # print 2nd hundred lines, short for
\&                               #  if ($. == 101 .. $. == 200) { print; }
\&
\&    next LINE if (1 .. /^$/);  # skip header lines, short for
\&                               #   next LINE if ($. == 1 .. /^$/);
\&                               # (typically in a loop labeled LINE)
\&
\&    s/^/> / if (/^$/ .. eof());  # quote body
\&
\&    # parse mail messages
\&    while (<>) {
\&        $in_header =   1  .. /^$/;
\&        $in_body   = /^$/ .. eof;
\&        if ($in_header) {
\&            # do something
\&        } else { # in body
\&            # do something else
\&        }
\&    } continue {
\&        close ARGV if eof;             # reset $. each file
\&    }
.Ve
.PP
Here's a simple example to illustrate the difference between
the two range operators:
.PP
.Vb 4
\&    @lines = ("   \- Foo",
\&              "01 \- Bar",
\&              "1  \- Baz",
\&              "   \- Quux");
\&
\&    foreach (@lines) {
\&        if (/0/ .. /1/) {
\&            print "$_\en";
\&        }
\&    }
.Ve
.PP
This program will print only the line containing \*(L"Bar\*(R". If
the range operator is changed to \f(CW\*(C`...\*(C'\fR, it will also print the
\&\*(L"Baz\*(R" line.
.PP
And now some examples as a list operator:
.PP
.Vb 3
\&    for (101 .. 200) { print }      # print $_ 100 times
\&    @foo = @foo[0 .. $#foo];        # an expensive no\-op
\&    @foo = @foo[$#foo\-4 .. $#foo];  # slice last 5 items
.Ve
.PP
The range operator (in list context) makes use of the magical
auto-increment algorithm if the operands are strings.  You
can say
.PP
.Vb 1
\&    @alphabet = ("A" .. "Z");
.Ve
.PP
to get all normal letters of the English alphabet, or
.PP
.Vb 1
\&    $hexdigit = (0 .. 9, "a" .. "f")[$num & 15];
.Ve
.PP
to get a hexadecimal digit, or
.PP
.Vb 2
\&    @z2 = ("01" .. "31");
\&    print $z2[$mday];
.Ve
.PP
to get dates with leading zeros.
.PP
If the final value specified is not in the sequence that the magical
increment would produce, the sequence goes until the next value would
be longer than the final value specified.
.PP
If the initial value specified isn't part of a magical increment
sequence (that is, a non-empty string matching \f(CW\*(C`/^[a\-zA\-Z]*[0\-9]*\ez/\*(C'\fR),
only the initial value will be returned.  So the following will only
return an alpha:
.PP
.Vb 2
\&    use charnames "greek";
\&    my @greek_small =  ("\eN{alpha}" .. "\eN{omega}");
.Ve
.PP
To get the 25 traditional lowercase Greek letters, including both sigmas,
you could use this instead:
.PP
.Vb 5
\&    use charnames "greek";
\&    my @greek_small =  map { chr } ( ord("\eN{alpha}") 
\&                                        ..
\&                                     ord("\eN{omega}") 
\&                                   );
.Ve
.PP
However, because there are \fImany\fR other lowercase Greek characters than
just those, to match lowercase Greek characters in a regular expression,
you would use the pattern \f(CW\*(C`/(?:(?=\ep{Greek})\ep{Lower})+/\*(C'\fR.
.PP
Because each operand is evaluated in integer form, \f(CW\*(C`2.18 .. 3.14\*(C'\fR will
return two elements in list context.
.PP
.Vb 1
\&    @list = (2.18 .. 3.14); # same as @list = (2 .. 3);
.Ve
.SS "Conditional Operator"
.IX Xref "operator, conditional operator, ternary ternary ?:"
.IX Subsection "Conditional Operator"
Ternary \*(L"?:\*(R" is the conditional operator, just as in C.  It works much
like an if-then-else.  If the argument before the ? is true, the
argument before the : is returned, otherwise the argument after the :
is returned.  For example:
.PP
.Vb 2
\&    printf "I have %d dog%s.\en", $n,
\&            ($n == 1) ? "" : "s";
.Ve
.PP
Scalar or list context propagates downward into the 2nd
or 3rd argument, whichever is selected.
.PP
.Vb 3
\&    $a = $ok ? $b : $c;  # get a scalar
\&    @a = $ok ? @b : @c;  # get an array
\&    $a = $ok ? @b : @c;  # oops, that\*(Aqs just a count!
.Ve
.PP
The operator may be assigned to if both the 2nd and 3rd arguments are
legal lvalues (meaning that you can assign to them):
.PP
.Vb 1
\&    ($a_or_b ? $a : $b) = $c;
.Ve
.PP
Because this operator produces an assignable result, using assignments
without parentheses will get you in trouble.  For example, this:
.PP
.Vb 1
\&    $a % 2 ? $a += 10 : $a += 2
.Ve
.PP
Really means this:
.PP
.Vb 1
\&    (($a % 2) ? ($a += 10) : $a) += 2
.Ve
.PP
Rather than this:
.PP
.Vb 1
\&    ($a % 2) ? ($a += 10) : ($a += 2)
.Ve
.PP
That should probably be written more simply as:
.PP
.Vb 1
\&    $a += ($a % 2) ? 10 : 2;
.Ve
.SS "Assignment Operators"
.IX Xref "assignment operator, assignment = **= += *= &= <<= &&= -=  = |= >>= ||=   = .= %= ^= x="
.IX Subsection "Assignment Operators"
\&\*(L"=\*(R" is the ordinary assignment operator.
.PP
Assignment operators work as in C.  That is,
.PP
.Vb 1
\&    $a += 2;
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&    $a = $a + 2;
.Ve
.PP
although without duplicating any side effects that dereferencing the lvalue
might trigger, such as from \fItie()\fR.  Other assignment operators work similarly.
The following are recognized:
.PP
.Vb 4
\&    **=    +=    *=    &=    <<=    &&=
\&           \-=    /=    |=    >>=    ||=
\&           .=    %=    ^=           //=
\&                 x=
.Ve
.PP
Although these are grouped by family, they all have the precedence
of assignment.
.PP
Unlike in C, the scalar assignment operator produces a valid lvalue.
Modifying an assignment is equivalent to doing the assignment and
then modifying the variable that was assigned to.  This is useful
for modifying a copy of something, like this:
.PP
.Vb 1
\&    ($tmp = $global) =~ tr/13579/24680/;
.Ve
.PP
Although as of 5.14, that can be also be accomplished this way:
.PP
.Vb 2
\&    use v5.14;
\&    $tmp = ($global =~  tr/13579/24680/r);
.Ve
.PP
Likewise,
.PP
.Vb 1
\&    ($a += 2) *= 3;
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&    $a += 2;
\&    $a *= 3;
.Ve
.PP
Similarly, a list assignment in list context produces the list of
lvalues assigned to, and a list assignment in scalar context returns
the number of elements produced by the expression on the right hand
side of the assignment.
.SS "Comma Operator"
.IX Xref "comma operator, comma ,"
.IX Subsection "Comma Operator"
Binary \*(L",\*(R" is the comma operator.  In scalar context it evaluates
its left argument, throws that value away, then evaluates its right
argument and returns that value.  This is just like C's comma operator.
.PP
In list context, it's just the list argument separator, and inserts
both its arguments into the list.  These arguments are also evaluated
from left to right.
.PP
The \f(CW\*(C`=>\*(C'\fR operator is a synonym for the comma except that it causes a
word on its left to be interpreted as a string if it begins with a letter
or underscore and is composed only of letters, digits and underscores.
This includes operands that might otherwise be interpreted as operators,
constants, single number v\-strings or function calls. If in doubt about
this behavior, the left operand can be quoted explicitly.
.PP
Otherwise, the \f(CW\*(C`=>\*(C'\fR operator behaves exactly as the comma operator
or list argument separator, according to context.
.PP
For example:
.PP
.Vb 1
\&    use constant FOO => "something";
\&
\&    my %h = ( FOO => 23 );
.Ve
.PP
is equivalent to:
.PP
.Vb 1
\&    my %h = ("FOO", 23);
.Ve
.PP
It is \fI\s-1NOT\s0\fR:
.PP
.Vb 1
\&    my %h = ("something", 23);
.Ve
.PP
The \f(CW\*(C`=>\*(C'\fR operator is helpful in documenting the correspondence
between keys and values in hashes, and other paired elements in lists.
.PP
.Vb 2
\&    %hash = ( $key => $value );
\&    login( $username => $password );
.Ve
.PP
The special quoting behavior ignores precedence, and hence may apply to
\&\fIpart\fR of the left operand:
.PP
.Vb 1
\&    print time.shift => "bbb";
.Ve
.PP
That example prints something like \*(L"1314363215shiftbbb\*(R", because the
\&\f(CW\*(C`=>\*(C'\fR implicitly quotes the \f(CW\*(C`shift\*(C'\fR immediately on its left, ignoring
the fact that \f(CW\*(C`time.shift\*(C'\fR is the entire left operand.
.SS "List Operators (Rightward)"
.IX Xref "operator, list, rightward list operator"
.IX Subsection "List Operators (Rightward)"
On the right side of a list operator, the comma has very low precedence,
such that it controls all comma-separated expressions found there.
The only operators with lower precedence are the logical operators
\&\*(L"and\*(R", \*(L"or\*(R", and \*(L"not\*(R", which may be used to evaluate calls to list
operators without the need for parentheses:
.PP
.Vb 1
\&    open HANDLE, "< :utf8", "filename" or die "Can\*(Aqt open: $!\en";
.Ve
.PP
However, some people find that code harder to read than writing
it with parentheses:
.PP
.Vb 1
\&    open(HANDLE, "< :utf8", "filename") or die "Can\*(Aqt open: $!\en";
.Ve
.PP
in which case you might as well just use the more customary \*(L"||\*(R" operator:
.PP
.Vb 1
\&    open(HANDLE, "< :utf8", "filename") || die "Can\*(Aqt open: $!\en";
.Ve
.PP
See also discussion of list operators in \*(L"Terms and List Operators (Leftward)\*(R".
.SS "Logical Not"
.IX Xref "operator, logical, not not"
.IX Subsection "Logical Not"
Unary \*(L"not\*(R" returns the logical negation of the expression to its right.
It's the equivalent of \*(L"!\*(R" except for the very low precedence.
.SS "Logical And"
.IX Xref "operator, logical, and and"
.IX Subsection "Logical And"
Binary \*(L"and\*(R" returns the logical conjunction of the two surrounding
expressions.  It's equivalent to \f(CW\*(C`&&\*(C'\fR except for the very low
precedence.  This means that it short-circuits: the right
expression is evaluated only if the left expression is true.
.SS "Logical or and Exclusive Or"
.IX Xref "operator, logical, or operator, logical, xor operator, logical, exclusive or or xor"
.IX Subsection "Logical or and Exclusive Or"
Binary \*(L"or\*(R" returns the logical disjunction of the two surrounding
expressions.  It's equivalent to \f(CW\*(C`||\*(C'\fR except for the very low precedence.
This makes it useful for control flow:
.PP
.Vb 1
\&    print FH $data              or die "Can\*(Aqt write to FH: $!";
.Ve
.PP
This means that it short-circuits: the right expression is evaluated
only if the left expression is false.  Due to its precedence, you must
be careful to avoid using it as replacement for the \f(CW\*(C`||\*(C'\fR operator.
It usually works out better for flow control than in assignments:
.PP
.Vb 3
\&    $a = $b or $c;              # bug: this is wrong
\&    ($a = $b) or $c;            # really means this
\&    $a = $b || $c;              # better written this way
.Ve
.PP
However, when it's a list-context assignment and you're trying to use
\&\f(CW\*(C`||\*(C'\fR for control flow, you probably need \*(L"or\*(R" so that the assignment
takes higher precedence.
.PP
.Vb 2
\&    @info = stat($file) || die;     # oops, scalar sense of stat!
\&    @info = stat($file) or die;     # better, now @info gets its due
.Ve
.PP
Then again, you could always use parentheses.
.PP
Binary \f(CW\*(C`xor\*(C'\fR returns the exclusive-OR of the two surrounding expressions.
It cannot short-circuit (of course).
.PP
There is no low precedence operator for defined-OR.
.SS "C Operators Missing From Perl"
.IX Xref "operator, missing from perl & * typecasting (TYPE)"
.IX Subsection "C Operators Missing From Perl"
Here is what C has that Perl doesn't:
.IP "unary &" 8
.IX Item "unary &"
Address-of operator.  (But see the \*(L"\e\*(R" operator for taking a reference.)
.IP "unary *" 8
.IX Item "unary *"
Dereference-address operator. (Perl's prefix dereferencing
operators are typed: $, @, %, and &.)
.IP "(\s-1TYPE\s0)" 8
.IX Item "(TYPE)"
Type-casting operator.
.SS "Quote and Quote-like Operators"
.IX Xref "operator, quote operator, quote-like q qq qx qw m qr s tr ' '' "" """" ` `` << escape sequence escape"
.IX Subsection "Quote and Quote-like Operators"
While we usually think of quotes as literal values, in Perl they
function as operators, providing various kinds of interpolating and
pattern matching capabilities.  Perl provides customary quote characters
for these behaviors, but also provides a way for you to choose your
quote character for any of them.  In the following table, a \f(CW\*(C`{}\*(C'\fR represents
any pair of delimiters you choose.
.PP
.Vb 11
\&    Customary  Generic        Meaning        Interpolates
\&        \*(Aq\*(Aq       q{}          Literal             no
\&        ""      qq{}          Literal             yes
\&        \`\`      qx{}          Command             yes*
\&                qw{}         Word list            no
\&        //       m{}       Pattern match          yes*
\&                qr{}          Pattern             yes*
\&                 s{}{}      Substitution          yes*
\&                tr{}{}    Transliteration         no (but see below)
\&                 y{}{}    Transliteration         no (but see below)
\&        <<EOF                 here\-doc            yes*
\&
\&        * unless the delimiter is \*(Aq\*(Aq.
.Ve
.PP
Non-bracketing delimiters use the same character fore and aft, but the four
sorts of \s-1ASCII\s0 brackets (round, angle, square, curly) all nest, which means
that
.PP
.Vb 1
\&    q{foo{bar}baz}
.Ve
.PP
is the same as
.PP
.Vb 1
\&    \*(Aqfoo{bar}baz\*(Aq
.Ve
.PP
Note, however, that this does not always work for quoting Perl code:
.PP
.Vb 1
\&    $s = q{ if($a eq "}") ... }; # WRONG
.Ve
.PP
is a syntax error. The \f(CW\*(C`Text::Balanced\*(C'\fR module (standard as of v5.8,
and from \s-1CPAN\s0 before then) is able to do this properly.
.PP
There can be whitespace between the operator and the quoting
characters, except when \f(CW\*(C`#\*(C'\fR is being used as the quoting character.
\&\f(CW\*(C`q#foo#\*(C'\fR is parsed as the string \f(CW\*(C`foo\*(C'\fR, while \f(CW\*(C`q #foo#\*(C'\fR is the
operator \f(CW\*(C`q\*(C'\fR followed by a comment.  Its argument will be taken
from the next line.  This allows you to write:
.PP
.Vb 2
\&    s {foo}  # Replace foo
\&      {bar}  # with bar.
.Ve
.PP
The following escape sequences are available in constructs that interpolate,
and in transliterations:
.IX Xref "\\t \\n \\r \\f \\b \\a \\e \\x \\0 \\c \\N \\N{} \\o{}"
.PP
.Vb 10
\&    Sequence     Note  Description
\&    \et                  tab               (HT, TAB)
\&    \en                  newline           (NL)
\&    \er                  return            (CR)
\&    \ef                  form feed         (FF)
\&    \eb                  backspace         (BS)
\&    \ea                  alarm (bell)      (BEL)
\&    \ee                  escape            (ESC)
\&    \ex{263A}     [1,8]  hex char          (example: SMILEY)
\&    \ex1b         [2,8]  restricted range hex char (example: ESC)
\&    \eN{name}     [3]    named Unicode character or character sequence
\&    \eN{U+263D}   [4,8]  Unicode character (example: FIRST QUARTER MOON)
\&    \ec[          [5]    control char      (example: chr(27))
\&    \eo{23072}    [6,8]  octal char        (example: SMILEY)
\&    \e033         [7,8]  restricted range octal char  (example: ESC)
.Ve
.IP "[1]" 4
.IX Item "[1]"
The result is the character specified by the hexadecimal number between
the braces.  See \*(L"[8]\*(R" below for details on which character.
.Sp
Only hexadecimal digits are valid between the braces. If an invalid
character is encountered, a warning will be issued and the invalid
character and all subsequent characters (valid or invalid) within the
braces will be discarded.
.Sp
If there are no valid digits between the braces, the generated character is
the \s-1NULL\s0 character (\f(CW\*(C`\ex{00}\*(C'\fR).  However, an explicit empty brace (\f(CW\*(C`\ex{}\*(C'\fR)
will not cause a warning (currently).
.IP "[2]" 4
.IX Item "[2]"
The result is the character specified by the hexadecimal number in the range
0x00 to 0xFF.  See \*(L"[8]\*(R" below for details on which character.
.Sp
Only hexadecimal digits are valid following \f(CW\*(C`\ex\*(C'\fR.  When \f(CW\*(C`\ex\*(C'\fR is followed
by fewer than two valid digits, any valid digits will be zero-padded.  This
means that \f(CW\*(C`\ex7\*(C'\fR will be interpreted as \f(CW\*(C`\ex07\*(C'\fR, and a lone <\ex> will be
interpreted as \f(CW\*(C`\ex00\*(C'\fR.  Except at the end of a string, having fewer than
two valid digits will result in a warning.  Note that although the warning
says the illegal character is ignored, it is only ignored as part of the
escape and will still be used as the subsequent character in the string.
For example:
.Sp
.Vb 5
\&  Original    Result    Warns?
\&  "\ex7"       "\ex07"    no
\&  "\ex"        "\ex00"    no
\&  "\ex7q"      "\ex07q"   yes
\&  "\exq"       "\ex00q"   yes
.Ve
.IP "[3]" 4
.IX Item "[3]"
The result is the Unicode character or character sequence given by \fIname\fR.
See charnames.
.IP "[4]" 4
.IX Item "[4]"
\&\f(CW\*(C`\eN{U+\f(CIhexadecimal number\f(CW}\*(C'\fR means the Unicode character whose Unicode code
point is \fIhexadecimal number\fR.
.IP "[5]" 4
.IX Item "[5]"
The character following \f(CW\*(C`\ec\*(C'\fR is mapped to some other character as shown in the
table:
.Sp
.Vb 10
\& Sequence   Value
\&   \ec@      chr(0)
\&   \ecA      chr(1)
\&   \eca      chr(1)
\&   \ecB      chr(2)
\&   \ecb      chr(2)
\&   ...
\&   \ecZ      chr(26)
\&   \ecz      chr(26)
\&   \ec[      chr(27)
\&   \ec]      chr(29)
\&   \ec^      chr(30)
\&   \ec?      chr(127)
.Ve
.Sp
In other words, it's the character whose code point has had 64 xor'd with
its uppercase.  \f(CW\*(C`\ec?\*(C'\fR is \s-1DELETE\s0 because \f(CW\*(C`ord("@") ^ 64\*(C'\fR is 127, and
\&\f(CW\*(C`\ec@\*(C'\fR is \s-1NULL\s0 because the ord of \*(L"@\*(R" is 64, so xor'ing 64 itself produces 0.
.Sp
Also, \f(CW\*(C`\ec\e\f(CIX\f(CW\*(C'\fR yields \f(CW\*(C` chr(28) . "\f(CIX\f(CW"\*(C'\fR for any \fIX\fR, but cannot come at the
end of a string, because the backslash would be parsed as escaping the end
quote.
.Sp
On \s-1ASCII\s0 platforms, the resulting characters from the list above are the
complete set of \s-1ASCII\s0 controls.  This isn't the case on \s-1EBCDIC\s0 platforms; see
\&\*(L"\s-1OPERATOR\s0 \s-1DIFFERENCES\s0\*(R" in perlebcdic for the complete list of what these
sequences mean on both \s-1ASCII\s0 and \s-1EBCDIC\s0 platforms.
.Sp
Use of any other character following the \*(L"c\*(R" besides those listed above is
discouraged, and some are deprecated with the intention of removing
those in a later Perl version.  What happens for any of these
other characters currently though, is that the value is derived by xor'ing
with the seventh bit, which is 64.
.Sp
To get platform independent controls, you can use \f(CW\*(C`\eN{...}\*(C'\fR.
.IP "[6]" 4
.IX Item "[6]"
The result is the character specified by the octal number between the braces.
See \*(L"[8]\*(R" below for details on which character.
.Sp
If a character that isn't an octal digit is encountered, a warning is raised,
and the value is based on the octal digits before it, discarding it and all
following characters up to the closing brace.  It is a fatal error if there are
no octal digits at all.
.IP "[7]" 4
.IX Item "[7]"
The result is the character specified by the three-digit octal number in the
range 000 to 777 (but best to not use above 077, see next paragraph).  See
\&\*(L"[8]\*(R" below for details on which character.
.Sp
Some contexts allow 2 or even 1 digit, but any usage without exactly
three digits, the first being a zero, may give unintended results.  (For
example, in a regular expression it may be confused with a backreference;
see \*(L"Octal escapes\*(R" in perlrebackslash.)  Starting in Perl 5.14, you may
use \f(CW\*(C`\eo{}\*(C'\fR instead, which avoids all these problems.  Otherwise, it is best to
use this construct only for ordinals \f(CW\*(C`\e077\*(C'\fR and below, remembering to pad to
the left with zeros to make three digits.  For larger ordinals, either use
\&\f(CW\*(C`\eo{}\*(C'\fR, or convert to something else, such as to hex and use \f(CW\*(C`\ex{}\*(C'\fR
instead.
.Sp
Having fewer than 3 digits may lead to a misleading warning message that says
that what follows is ignored.  For example, \f(CW"\e128"\fR in the \s-1ASCII\s0 character set
is equivalent to the two characters \f(CW"\en8"\fR, but the warning \f(CW\*(C`Illegal octal
digit \*(Aq8\*(Aq ignored\*(C'\fR will be thrown.  If \f(CW"\en8"\fR is what you want, you can
avoid this warning by padding your octal number with \f(CW0\fR's: \f(CW"\e0128"\fR.
.IP "[8]" 4
.IX Item "[8]"
Several constructs above specify a character by a number.  That number
gives the character's position in the character set encoding (indexed from 0).
This is called synonymously its ordinal, code position, or code point.  Perl
works on platforms that have a native encoding currently of either ASCII/Latin1
or \s-1EBCDIC\s0, each of which allow specification of 256 characters.  In general, if
the number is 255 (0xFF, 0377) or below, Perl interprets this in the platform's
native encoding.  If the number is 256 (0x100, 0400) or above, Perl interprets
it as a Unicode code point and the result is the corresponding Unicode
character.  For example \f(CW\*(C`\ex{50}\*(C'\fR and \f(CW\*(C`\eo{120}\*(C'\fR both are the number 80 in
decimal, which is less than 256, so the number is interpreted in the native
character set encoding.  In \s-1ASCII\s0 the character in the 80th position (indexed
from 0) is the letter \*(L"P\*(R", and in \s-1EBCDIC\s0 it is the ampersand symbol \*(L"&\*(R".
\&\f(CW\*(C`\ex{100}\*(C'\fR and \f(CW\*(C`\eo{400}\*(C'\fR are both 256 in decimal, so the number is interpreted
as a Unicode code point no matter what the native encoding is.  The name of the
character in the 256th position (indexed by 0) in Unicode is
\&\f(CW\*(C`LATIN CAPITAL LETTER A WITH MACRON\*(C'\fR.
.Sp
There are a couple of exceptions to the above rule.  \f(CW\*(C`\eN{U+\f(CIhex\ number\f(CW}\*(C'\fR is
always interpreted as a Unicode code point, so that \f(CW\*(C`\eN{U+0050}\*(C'\fR is \*(L"P\*(R" even
on \s-1EBCDIC\s0 platforms.  And if \f(CW\*(C`use\ encoding\*(C'\fR is in effect, the
number is considered to be in that encoding, and is translated from that into
the platform's native encoding if there is a corresponding native character;
otherwise to Unicode.
.PP
\&\fB\s-1NOTE\s0\fR: Unlike C and other languages, Perl has no \f(CW\*(C`\ev\*(C'\fR escape sequence for
the vertical tab (\s-1VT\s0 \- \s-1ASCII\s0 11), but you may use \f(CW\*(C`\eck\*(C'\fR or \f(CW\*(C`\ex0b\*(C'\fR.  (\f(CW\*(C`\ev\*(C'\fR
does have meaning in regular expression patterns in Perl, see perlre.)
.PP
The following escape sequences are available in constructs that interpolate,
but not in transliterations.
.IX Xref "\\l \\u \\L \\U \\E \\Q \\F"
.PP
.Vb 9
\&    \el          lowercase next character only
\&    \eu          titlecase (not uppercase!) next character only
\&    \eL          lowercase all characters till \eE or end of string
\&    \eU          uppercase all characters till \eE or end of string
\&    \eF          foldcase all characters till \eE or end of string
\&    \eQ          quote (disable) pattern metacharacters till \eE or
\&                end of string
\&    \eE          end either case modification or quoted section
\&                (whichever was last seen)
.Ve
.PP
See \*(L"quotemeta\*(R" in perlfunc for the exact definition of characters that
are quoted by \f(CW\*(C`\eQ\*(C'\fR.
.PP
\&\f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR, and \f(CW\*(C`\eQ\*(C'\fR can stack, in which case you need one
\&\f(CW\*(C`\eE\*(C'\fR for each.  For example:
.PP
.Vb 2
\& say"This \eQquoting \eubusiness \eUhere isn\*(Aqt quite\eE done yet,\eE is it?";
\& This quoting\e Business\e HERE\e ISN\e\*(AqT\e QUITE\e done\e yet\e, is it?
.Ve
.PP
If \f(CW\*(C`use locale\*(C'\fR is in effect (but not \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR),
the case map used by \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR,
\&\f(CW\*(C`\eu\*(C'\fR, and \f(CW\*(C`\eU\*(C'\fR is taken from the current locale.  See perllocale.
If Unicode (for example, \f(CW\*(C`\eN{}\*(C'\fR or code points of 0x100 or
beyond) is being used, the case map used by \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, and
\&\f(CW\*(C`\eU\*(C'\fR is as defined by Unicode.  That means that case-mapping
a single character can sometimes produce several characters.
Under \f(CW\*(C`use locale\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR produces the same results as \f(CW\*(C`\eL\*(C'\fR.
.PP
All systems use the virtual \f(CW"\en"\fR to represent a line terminator,
called a \*(L"newline\*(R".  There is no such thing as an unvarying, physical
newline character.  It is only an illusion that the operating system,
device drivers, C libraries, and Perl all conspire to preserve.  Not all
systems read \f(CW"\er"\fR as \s-1ASCII\s0 \s-1CR\s0 and \f(CW"\en"\fR as \s-1ASCII\s0 \s-1LF\s0.  For example,
on the ancient Macs (pre-MacOS X) of yesteryear, these used to be reversed,
and on systems without line terminator,
printing \f(CW"\en"\fR might emit no actual data.  In general, use \f(CW"\en"\fR when
you mean a \*(L"newline\*(R" for your system, but use the literal \s-1ASCII\s0 when you
need an exact character.  For example, most networking protocols expect
and prefer a \s-1CR+LF\s0 (\f(CW"\e015\e012"\fR or \f(CW"\ecM\ecJ"\fR) for line terminators,
and although they often accept just \f(CW"\e012"\fR, they seldom tolerate just
\&\f(CW"\e015"\fR.  If you get in the habit of using \f(CW"\en"\fR for networking,
you may be burned some day.
.IX Xref "newline line terminator eol end of line \\n \\r \\r\\n"
.PP
For constructs that do interpolate, variables beginning with "\f(CW\*(C`$\*(C'\fR\*(L"
or \*(R"\f(CW\*(C`@\*(C'\fR" are interpolated.  Subscripted variables such as \f(CW$a[3]\fR or
\&\f(CW\*(C`$href\->{key}[0]\*(C'\fR are also interpolated, as are array and hash slices.
But method calls such as \f(CW\*(C`$obj\->meth\*(C'\fR are not.
.PP
Interpolating an array or slice interpolates the elements in order,
separated by the value of \f(CW$"\fR, so is equivalent to interpolating
\&\f(CW\*(C`join $", @array\*(C'\fR.  \*(L"Punctuation\*(R" arrays such as \f(CW\*(C`@*\*(C'\fR are usually
interpolated only if the name is enclosed in braces \f(CW\*(C`@{*}\*(C'\fR, but the
arrays \f(CW@_\fR, \f(CW\*(C`@+\*(C'\fR, and \f(CW\*(C`@\-\*(C'\fR are interpolated even without braces.
.PP
For double-quoted strings, the quoting from \f(CW\*(C`\eQ\*(C'\fR is applied after
interpolation and escapes are processed.
.PP
.Vb 1
\&    "abc\eQfoo\etbar$s\eExyz"
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&    "abc" . quotemeta("foo\etbar$s") . "xyz"
.Ve
.PP
For the pattern of regex operators (\f(CW\*(C`qr//\*(C'\fR, \f(CW\*(C`m//\*(C'\fR and \f(CW\*(C`s///\*(C'\fR),
the quoting from \f(CW\*(C`\eQ\*(C'\fR is applied after interpolation is processed,
but before escapes are processed. This allows the pattern to match
literally (except for \f(CW\*(C`$\*(C'\fR and \f(CW\*(C`@\*(C'\fR). For example, the following matches:
.PP
.Vb 1
\&    \*(Aq\es\et\*(Aq =~ /\eQ\es\et/
.Ve
.PP
Because \f(CW\*(C`$\*(C'\fR or \f(CW\*(C`@\*(C'\fR trigger interpolation, you'll need to use something
like \f(CW\*(C`/\eQuser\eE\e@\eQhost/\*(C'\fR to match them literally.
.PP
Patterns are subject to an additional level of interpretation as a
regular expression.  This is done as a second pass, after variables are
interpolated, so that regular expressions may be incorporated into the
pattern from the variables.  If this is not what you want, use \f(CW\*(C`\eQ\*(C'\fR to
interpolate a variable literally.
.PP
Apart from the behavior described above, Perl does not expand
multiple levels of interpolation.  In particular, contrary to the
expectations of shell programmers, back-quotes do \fI\s-1NOT\s0\fR interpolate
within double quotes, nor do single quotes impede evaluation of
variables when used within double quotes.
.SS "Regexp Quote-Like Operators"
.IX Xref "operator, regexp"
.IX Subsection "Regexp Quote-Like Operators"
Here are the quote-like operators that apply to pattern
matching and related activities.
.IP "qr/STRING/msixpodual" 8
.IX Xref "qr  i  m  o  s  x  p"
.IX Item "qr/STRING/msixpodual"
This operator quotes (and possibly compiles) its \fI\s-1STRING\s0\fR as a regular
expression.  \fI\s-1STRING\s0\fR is interpolated the same way as \fI\s-1PATTERN\s0\fR
in \f(CW\*(C`m/PATTERN/\*(C'\fR.  If \*(L"'\*(R" is used as the delimiter, no interpolation
is done.  Returns a Perl value which may be used instead of the
corresponding \f(CW\*(C`/STRING/msixpodual\*(C'\fR expression. The returned value is a
normalized version of the original pattern. It magically differs from
a string containing the same characters: \f(CW\*(C`ref(qr/x/)\*(C'\fR returns \*(L"Regexp\*(R";
however, dereferencing it is not well defined (you currently get the 
normalized version of the original pattern, but this may change).
.Sp
For example,
.Sp
.Vb 3
\&    $rex = qr/my.STRING/is;
\&    print $rex;                 # prints (?si\-xm:my.STRING)
\&    s/$rex/foo/;
.Ve
.Sp
is equivalent to
.Sp
.Vb 1
\&    s/my.STRING/foo/is;
.Ve
.Sp
The result may be used as a subpattern in a match:
.Sp
.Vb 4
\&    $re = qr/$pattern/;
\&    $string =~ /foo${re}bar/;   # can be interpolated in other patterns
\&    $string =~ $re;             # or used standalone
\&    $string =~ /$re/;           # or this way
.Ve
.Sp
Since Perl may compile the pattern at the moment of execution of the \fIqr()\fR
operator, using \fIqr()\fR may have speed advantages in some situations,
notably if the result of \fIqr()\fR is used standalone:
.Sp
.Vb 11
\&    sub match {
\&        my $patterns = shift;
\&        my @compiled = map qr/$_/i, @$patterns;
\&        grep {
\&            my $success = 0;
\&            foreach my $pat (@compiled) {
\&                $success = 1, last if /$pat/;
\&            }
\&            $success;
\&        } @_;
\&    }
.Ve
.Sp
Precompilation of the pattern into an internal representation at
the moment of \fIqr()\fR avoids a need to recompile the pattern every
time a match \f(CW\*(C`/$pat/\*(C'\fR is attempted.  (Perl has many other internal
optimizations, but none would be triggered in the above example if
we did not use \fIqr()\fR operator.)
.Sp
Options (specified by the following modifiers) are:
.Sp
.Vb 10
\&    m   Treat string as multiple lines.
\&    s   Treat string as single line. (Make . match a newline)
\&    i   Do case\-insensitive pattern matching.
\&    x   Use extended regular expressions.
\&    p   When matching preserve a copy of the matched string so
\&        that ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} will be defined.
\&    o   Compile pattern only once.
\&    a   ASCII\-restrict: Use ASCII for \ed, \es, \ew; specifying two a\*(Aqs
\&        further restricts /i matching so that no ASCII character will
\&        match a non\-ASCII one
\&    l   Use the locale
\&    u   Use Unicode rules
\&    d   Use Unicode or native charset, as in 5.12 and earlier
.Ve
.Sp
If a precompiled pattern is embedded in a larger pattern then the effect
of \*(L"msixpluad\*(R" will be propagated appropriately.  The effect the \*(L"o\*(R"
modifier has is not propagated, being restricted to those patterns
explicitly using it.
.Sp
The last four modifiers listed above, added in Perl 5.14,
control the character set semantics, but \f(CW\*(C`/a\*(C'\fR is the only one you are likely
to want to specify explicitly; the other three are selected
automatically by various pragmas.
.Sp
See perlre for additional information on valid syntax for \s-1STRING\s0, and
for a detailed look at the semantics of regular expressions.  In
particular, all modifiers except the largely obsolete \f(CW\*(C`/o\*(C'\fR are further
explained in \*(L"Modifiers\*(R" in perlre.  \f(CW\*(C`/o\*(C'\fR is described in the next section.
.IP "m/PATTERN/msixpodualgc" 8
.IX Xref "m operator, match regexp, options regexp regex, options regex  m  s  i  x  p  o  g  c"
.IX Item "m/PATTERN/msixpodualgc"
.PD 0
.IP "/PATTERN/msixpodualgc" 8
.IX Item "/PATTERN/msixpodualgc"
.PD
Searches a string for a pattern match, and in scalar context returns
true if it succeeds, false if it fails.  If no string is specified
via the \f(CW\*(C`=~\*(C'\fR or \f(CW\*(C`!~\*(C'\fR operator, the \f(CW$_\fR string is searched.  (The
string specified with \f(CW\*(C`=~\*(C'\fR need not be an lvalue\*(--it may be the
result of an expression evaluation, but remember the \f(CW\*(C`=~\*(C'\fR binds
rather tightly.)  See also perlre.
.Sp
Options are as described in \f(CW\*(C`qr//\*(C'\fR above; in addition, the following match
process modifiers are available:
.Sp
.Vb 2
\& g  Match globally, i.e., find all occurrences.
\& c  Do not reset search position on a failed match when /g is in effect.
.Ve
.Sp
If \*(L"/\*(R" is the delimiter then the initial \f(CW\*(C`m\*(C'\fR is optional.  With the \f(CW\*(C`m\*(C'\fR
you can use any pair of non-whitespace (\s-1ASCII\s0) characters
as delimiters.  This is particularly useful for matching path names
that contain \*(L"/\*(R", to avoid \s-1LTS\s0 (leaning toothpick syndrome).  If \*(L"?\*(R" is
the delimiter, then a match-only-once rule applies,
described in \f(CW\*(C`m?PATTERN?\*(C'\fR below.
If \*(L"'\*(R" is the delimiter, no interpolation is performed on the \s-1PATTERN\s0.
When using a character valid in an identifier, whitespace is required
after the \f(CW\*(C`m\*(C'\fR.
.Sp
\&\s-1PATTERN\s0 may contain variables, which will be interpolated
every time the pattern search is evaluated, except
for when the delimiter is a single quote.  (Note that \f(CW$(\fR, \f(CW$)\fR, and
\&\f(CW$|\fR are not interpolated because they look like end-of-string tests.)
Perl will not recompile the pattern unless an interpolated
variable that it contains changes.  You can force Perl to skip the
test and never recompile by adding a \f(CW\*(C`/o\*(C'\fR (which stands for \*(L"once\*(R")
after the trailing delimiter.
Once upon a time, Perl would recompile regular expressions
unnecessarily, and this modifier was useful to tell it not to do so, in the
interests of speed.  But now, the only reasons to use \f(CW\*(C`/o\*(C'\fR are either:
.RS 8
.IP "1." 4
The variables are thousands of characters long and you know that they
don't change, and you need to wring out the last little bit of speed by
having Perl skip testing for that.  (There is a maintenance penalty for
doing this, as mentioning \f(CW\*(C`/o\*(C'\fR constitutes a promise that you won't
change the variables in the pattern.  If you do change them, Perl won't
even notice.)
.IP "2." 4
you want the pattern to use the initial values of the variables
regardless of whether they change or not.  (But there are saner ways
of accomplishing this than using \f(CW\*(C`/o\*(C'\fR.)
.RE
.RS 8
.Sp
The bottom line is that using \f(CW\*(C`/o\*(C'\fR is almost never a good idea.
.RE
.IP "The empty pattern //" 8
.IX Item "The empty pattern //"
If the \s-1PATTERN\s0 evaluates to the empty string, the last
\&\fIsuccessfully\fR matched regular expression is used instead. In this
case, only the \f(CW\*(C`g\*(C'\fR and \f(CW\*(C`c\*(C'\fR flags on the empty pattern are honored;
the other flags are taken from the original pattern. If no match has
previously succeeded, this will (silently) act instead as a genuine
empty pattern (which will always match).
.Sp
Note that it's possible to confuse Perl into thinking \f(CW\*(C`//\*(C'\fR (the empty
regex) is really \f(CW\*(C`//\*(C'\fR (the defined-or operator).  Perl is usually pretty
good about this, but some pathological cases might trigger this, such as
\&\f(CW\*(C`$a///\*(C'\fR (is that \f(CW\*(C`($a) / (//)\*(C'\fR or \f(CW\*(C`$a // /\*(C'\fR?) and \f(CW\*(C`print $fh //\*(C'\fR
(\f(CW\*(C`print $fh(//\*(C'\fR or \f(CW\*(C`print($fh //\*(C'\fR?).  In all of these examples, Perl
will assume you meant defined-or.  If you meant the empty regex, just
use parentheses or spaces to disambiguate, or even prefix the empty
regex with an \f(CW\*(C`m\*(C'\fR (so \f(CW\*(C`//\*(C'\fR becomes \f(CW\*(C`m//\*(C'\fR).
.IP "Matching in list context" 8
.IX Item "Matching in list context"
If the \f(CW\*(C`/g\*(C'\fR option is not used, \f(CW\*(C`m//\*(C'\fR in list context returns a
list consisting of the subexpressions matched by the parentheses in the
pattern, that is, (\f(CW$1\fR, \f(CW$2\fR, \f(CW$3\fR...).  (Note that here \f(CW$1\fR etc. are
also set, and that this differs from Perl 4's behavior.)  When there are
no parentheses in the pattern, the return value is the list \f(CW\*(C`(1)\*(C'\fR for
success.  With or without parentheses, an empty list is returned upon
failure.
.Sp
Examples:
.Sp
.Vb 2
\&    open(TTY, "+</dev/tty")
\&        || die "can\*(Aqt access /dev/tty: $!";
\&
\&    <TTY> =~ /^y/i && foo();    # do foo if desired
\&
\&    if (/Version: *([0\-9.]*)/) { $version = $1; }
\&
\&    next if m#^/usr/spool/uucp#;
\&
\&    # poor man\*(Aqs grep
\&    $arg = shift;
\&    while (<>) {
\&        print if /$arg/o;       # compile only once (no longer needed!)
\&    }
\&
\&    if (($F1, $F2, $Etc) = ($foo =~ /^(\eS+)\es+(\eS+)\es*(.*)/))
.Ve
.Sp
This last example splits \f(CW$foo\fR into the first two words and the
remainder of the line, and assigns those three fields to \f(CW$F1\fR, \f(CW$F2\fR, and
\&\f(CW$Etc\fR.  The conditional is true if any variables were assigned; that is,
if the pattern matched.
.Sp
The \f(CW\*(C`/g\*(C'\fR modifier specifies global pattern matching\*(--that is,
matching as many times as possible within the string. How it behaves
depends on the context. In list context, it returns a list of the
substrings matched by any capturing parentheses in the regular
expression. If there are no parentheses, it returns a list of all
the matched strings, as if there were parentheses around the whole
pattern.
.Sp
In scalar context, each execution of \f(CW\*(C`m//g\*(C'\fR finds the next match,
returning true if it matches, and false if there is no further match.
The position after the last match can be read or set using the \f(CW\*(C`pos()\*(C'\fR
function; see \*(L"pos\*(R" in perlfunc. A failed match normally resets the
search position to the beginning of the string, but you can avoid that
by adding the \f(CW\*(C`/c\*(C'\fR modifier (for example, \f(CW\*(C`m//gc\*(C'\fR). Modifying the target
string also resets the search position.
.IP "\eG assertion" 8
.IX Item "G assertion"
You can intermix \f(CW\*(C`m//g\*(C'\fR matches with \f(CW\*(C`m/\eG.../g\*(C'\fR, where \f(CW\*(C`\eG\*(C'\fR is a
zero-width assertion that matches the exact position where the
previous \f(CW\*(C`m//g\*(C'\fR, if any, left off. Without the \f(CW\*(C`/g\*(C'\fR modifier, the
\&\f(CW\*(C`\eG\*(C'\fR assertion still anchors at \f(CW\*(C`pos()\*(C'\fR as it was at the start of
the operation (see \*(L"pos\*(R" in perlfunc), but the match is of course only
attempted once. Using \f(CW\*(C`\eG\*(C'\fR without \f(CW\*(C`/g\*(C'\fR on a target string that has
not previously had a \f(CW\*(C`/g\*(C'\fR match applied to it is the same as using
the \f(CW\*(C`\eA\*(C'\fR assertion to match the beginning of the string.  Note also
that, currently, \f(CW\*(C`\eG\*(C'\fR is only properly supported when anchored at the
very beginning of the pattern.
.Sp
Examples:
.Sp
.Vb 2
\&    # list context
\&    ($one,$five,$fifteen) = (\`uptime\` =~ /(\ed+\e.\ed+)/g);
\&
\&    # scalar context
\&    local $/ = "";
\&    while ($paragraph = <>) {
\&        while ($paragraph =~ /\ep{Ll}[\*(Aq")]*[.!?]+[\*(Aq")]*\es/g) {
\&            $sentences++;
\&        }
\&    }
\&    say $sentences;
.Ve
.Sp
Here's another way to check for sentences in a paragraph:
.Sp
.Vb 10
\&    my $sentence_rx = qr{
\&        (?: (?<= ^ ) | (?<= \es ) )  # after start\-of\-string or whitespace
\&        \ep{Lu}                      # capital letter
\&        .*?                         # a bunch of anything
\&        (?<= \eS )                   # that ends in non\-whitespace
\&        (?<! \eb [DMS]r  )           # but isn\*(Aqt a common abbreviation
\&        (?<! \eb Mrs )
\&        (?<! \eb Sra )
\&        (?<! \eb St  )
\&        [.?!]                       # followed by a sentence ender
\&        (?= $ | \es )                # in front of end\-of\-string or whitespace
\&    }sx;
\&    local $/ = "";
\&    while (my $paragraph = <>) {
\&        say "NEW PARAGRAPH";
\&        my $count = 0;
\&        while ($paragraph =~ /($sentence_rx)/g) {
\&            printf "\etgot sentence %d: <%s>\en", ++$count, $1;
\&        }
\&    }
.Ve
.Sp
Here's how to use \f(CW\*(C`m//gc\*(C'\fR with \f(CW\*(C`\eG\*(C'\fR:
.Sp
.Vb 10
\&    $_ = "ppooqppqq";
\&    while ($i++ < 2) {
\&        print "1: \*(Aq";
\&        print $1 while /(o)/gc; print "\*(Aq, pos=", pos, "\en";
\&        print "2: \*(Aq";
\&        print $1 if /\eG(q)/gc;  print "\*(Aq, pos=", pos, "\en";
\&        print "3: \*(Aq";
\&        print $1 while /(p)/gc; print "\*(Aq, pos=", pos, "\en";
\&    }
\&    print "Final: \*(Aq$1\*(Aq, pos=",pos,"\en" if /\eG(.)/;
.Ve
.Sp
The last example should print:
.Sp
.Vb 7
\&    1: \*(Aqoo\*(Aq, pos=4
\&    2: \*(Aqq\*(Aq, pos=5
\&    3: \*(Aqpp\*(Aq, pos=7
\&    1: \*(Aq\*(Aq, pos=7
\&    2: \*(Aqq\*(Aq, pos=8
\&    3: \*(Aq\*(Aq, pos=8
\&    Final: \*(Aqq\*(Aq, pos=8
.Ve
.Sp
Notice that the final match matched \f(CW\*(C`q\*(C'\fR instead of \f(CW\*(C`p\*(C'\fR, which a match
without the \f(CW\*(C`\eG\*(C'\fR anchor would have done. Also note that the final match
did not update \f(CW\*(C`pos\*(C'\fR. \f(CW\*(C`pos\*(C'\fR is only updated on a \f(CW\*(C`/g\*(C'\fR match. If the
final match did indeed match \f(CW\*(C`p\*(C'\fR, it's a good bet that you're running a
very old (pre\-5.6.0) version of Perl.
.Sp
A useful idiom for \f(CW\*(C`lex\*(C'\fR\-like scanners is \f(CW\*(C`/\eG.../gc\*(C'\fR.  You can
combine several regexps like this to process a string part-by-part,
doing different actions depending on which regexp matched.  Each
regexp tries to match where the previous one leaves off.
.Sp
.Vb 3
\& $_ = <<\*(AqEOL\*(Aq;
\&    $url = URI::URL\->new( "http://example.com/" ); die if $url eq "xXx";
\& EOL
\&
\& LOOP: {
\&     print(" digits"),       redo LOOP if /\eG\ed+\eb[,.;]?\es*/gc;
\&     print(" lowercase"),    redo LOOP if /\eG\ep{Ll}+\eb[,.;]?\es*/gc;
\&     print(" UPPERCASE"),    redo LOOP if /\eG\ep{Lu}+\eb[,.;]?\es*/gc;
\&     print(" Capitalized"),  redo LOOP if /\eG\ep{Lu}\ep{Ll}+\eb[,.;]?\es*/gc;
\&     print(" MiXeD"),        redo LOOP if /\eG\epL+\eb[,.;]?\es*/gc;
\&     print(" alphanumeric"), redo LOOP if /\eG[\ep{Alpha}\epN]+\eb[,.;]?\es*/gc;
\&     print(" line\-noise"),   redo LOOP if /\eG\eW+/gc;
\&     print ". That\*(Aqs all!\en";
\& }
.Ve
.Sp
Here is the output (split into several lines):
.Sp
.Vb 4
\&    line\-noise lowercase line\-noise UPPERCASE line\-noise UPPERCASE
\&    line\-noise lowercase line\-noise lowercase line\-noise lowercase
\&    lowercase line\-noise lowercase lowercase line\-noise lowercase
\&    lowercase line\-noise MiXeD line\-noise. That\*(Aqs all!
.Ve
.IP "m?PATTERN?msixpodualgc" 8
.IX Xref "? operator, match-once"
.IX Item "m?PATTERN?msixpodualgc"
.PD 0
.IP "?PATTERN?msixpodualgc" 8
.IX Item "?PATTERN?msixpodualgc"
.PD
This is just like the \f(CW\*(C`m/PATTERN/\*(C'\fR search, except that it matches
only once between calls to the \fIreset()\fR operator.  This is a useful
optimization when you want to see only the first occurrence of
something in each file of a set of files, for instance.  Only \f(CW\*(C`m??\*(C'\fR
patterns local to the current package are reset.
.Sp
.Vb 7
\&    while (<>) {
\&        if (m?^$?) {
\&                            # blank line between header and body
\&        }
\&    } continue {
\&        reset if eof;       # clear m?? status for next file
\&    }
.Ve
.Sp
Another example switched the first \*(L"latin1\*(R" encoding it finds
to \*(L"utf8\*(R" in a pod file:
.Sp
.Vb 1
\&    s//utf8/ if m? ^ =encoding \eh+ \eK latin1 ?x;
.Ve
.Sp
The match-once behavior is controlled by the match delimiter being
\&\f(CW\*(C`?\*(C'\fR; with any other delimiter this is the normal \f(CW\*(C`m//\*(C'\fR operator.
.Sp
For historical reasons, the leading \f(CW\*(C`m\*(C'\fR in \f(CW\*(C`m?PATTERN?\*(C'\fR is optional,
but the resulting \f(CW\*(C`?PATTERN?\*(C'\fR syntax is deprecated, will warn on
usage and might be removed from a future stable release of Perl (without
further notice!).
.IP "s/PATTERN/REPLACEMENT/msixpodualgcer" 8
.IX Xref "substitute substitution replace regexp, replace regexp, substitute  m  s  i  x  p  o  g  c  e  r"
.IX Item "s/PATTERN/REPLACEMENT/msixpodualgcer"
Searches a string for a pattern, and if found, replaces that pattern
with the replacement text and returns the number of substitutions
made.  Otherwise it returns false (specifically, the empty string).
.Sp
If the \f(CW\*(C`/r\*(C'\fR (non-destructive) option is used then it runs the
substitution on a copy of the string and instead of returning the
number of substitutions, it returns the copy whether or not a
substitution occurred.  The original string is never changed when
\&\f(CW\*(C`/r\*(C'\fR is used.  The copy will always be a plain string, even if the
input is an object or a tied variable.
.Sp
If no string is specified via the \f(CW\*(C`=~\*(C'\fR or \f(CW\*(C`!~\*(C'\fR operator, the \f(CW$_\fR
variable is searched and modified.  Unless the \f(CW\*(C`/r\*(C'\fR option is used,
the string specified must be a scalar variable, an array element, a
hash element, or an assignment to one of those; that is, some sort of
scalar lvalue.
.Sp
If the delimiter chosen is a single quote, no interpolation is
done on either the \s-1PATTERN\s0 or the \s-1REPLACEMENT\s0.  Otherwise, if the
\&\s-1PATTERN\s0 contains a $ that looks like a variable rather than an
end-of-string test, the variable will be interpolated into the pattern
at run-time.  If you want the pattern compiled only once the first time
the variable is interpolated, use the \f(CW\*(C`/o\*(C'\fR option.  If the pattern
evaluates to the empty string, the last successfully executed regular
expression is used instead.  See perlre for further explanation on these.
.Sp
Options are as with m// with the addition of the following replacement
specific options:
.Sp
.Vb 3
\&    e   Evaluate the right side as an expression.
\&    ee  Evaluate the right side as a string then eval the result.
\&    r   Return substitution and leave the original string untouched.
.Ve
.Sp
Any non-whitespace delimiter may replace the slashes.  Add space after
the \f(CW\*(C`s\*(C'\fR when using a character allowed in identifiers.  If single quotes
are used, no interpretation is done on the replacement string (the \f(CW\*(C`/e\*(C'\fR
modifier overrides this, however).  Unlike Perl 4, Perl 5 treats backticks
as normal delimiters; the replacement text is not evaluated as a command.
If the \s-1PATTERN\s0 is delimited by bracketing quotes, the \s-1REPLACEMENT\s0 has
its own pair of quotes, which may or may not be bracketing quotes, for example,
\&\f(CW\*(C`s(foo)(bar)\*(C'\fR or \f(CW\*(C`s<foo>/bar/\*(C'\fR.  A \f(CW\*(C`/e\*(C'\fR will cause the
replacement portion to be treated as a full-fledged Perl expression
and evaluated right then and there.  It is, however, syntax checked at
compile-time. A second \f(CW\*(C`e\*(C'\fR modifier will cause the replacement portion
to be \f(CW\*(C`eval\*(C'\fRed before being run as a Perl expression.
.Sp
Examples:
.Sp
.Vb 1
\&    s/\ebgreen\eb/mauve/g;                # don\*(Aqt change wintergreen
\&
\&    $path =~ s|/usr/bin|/usr/local/bin|;
\&
\&    s/Login: $foo/Login: $bar/; # run\-time pattern
\&
\&    ($foo = $bar) =~ s/this/that/;      # copy first, then change
\&    ($foo = "$bar") =~ s/this/that/;    # convert to string, copy, then change
\&    $foo = $bar =~ s/this/that/r;       # Same as above using /r
\&    $foo = $bar =~ s/this/that/r
\&                =~ s/that/the other/r;  # Chained substitutes using /r
\&    @foo = map { s/this/that/r } @bar   # /r is very useful in maps
\&
\&    $count = ($paragraph =~ s/Mister\eb/Mr./g);  # get change\-count
\&
\&    $_ = \*(Aqabc123xyz\*(Aq;
\&    s/\ed+/$&*2/e;               # yields \*(Aqabc246xyz\*(Aq
\&    s/\ed+/sprintf("%5d",$&)/e;  # yields \*(Aqabc  246xyz\*(Aq
\&    s/\ew/$& x 2/eg;             # yields \*(Aqaabbcc  224466xxyyzz\*(Aq
\&
\&    s/%(.)/$percent{$1}/g;      # change percent escapes; no /e
\&    s/%(.)/$percent{$1} || $&/ge;       # expr now, so /e
\&    s/^=(\ew+)/pod($1)/ge;       # use function call
\&
\&    $_ = \*(Aqabc123xyz\*(Aq;
\&    $a = s/abc/def/r;           # $a is \*(Aqdef123xyz\*(Aq and
\&                                # $_ remains \*(Aqabc123xyz\*(Aq.
\&
\&    # expand variables in $_, but dynamics only, using
\&    # symbolic dereferencing
\&    s/\e$(\ew+)/${$1}/g;
\&
\&    # Add one to the value of any numbers in the string
\&    s/(\ed+)/1 + $1/eg;
\&
\&    # Titlecase words in the last 30 characters only
\&    substr($str, \-30) =~ s/\eb(\ep{Alpha}+)\eb/\eu\eL$1/g;
\&
\&    # This will expand any embedded scalar variable
\&    # (including lexicals) in $_ : First $1 is interpolated
\&    # to the variable name, and then evaluated
\&    s/(\e$\ew+)/$1/eeg;
\&
\&    # Delete (most) C comments.
\&    $program =~ s {
\&        /\e*     # Match the opening delimiter.
\&        .*?     # Match a minimal number of characters.
\&        \e*/     # Match the closing delimiter.
\&    } []gsx;
\&
\&    s/^\es*(.*?)\es*$/$1/;        # trim whitespace in $_, expensively
\&
\&    for ($variable) {           # trim whitespace in $variable, cheap
\&        s/^\es+//;
\&        s/\es+$//;
\&    }
\&
\&    s/([^ ]*) *([^ ]*)/$2 $1/;  # reverse 1st two fields
.Ve
.Sp
Note the use of $ instead of \e in the last example.  Unlike
\&\fBsed\fR, we use the \e<\fIdigit\fR> form in only the left hand side.
Anywhere else it's $<\fIdigit\fR>.
.Sp
Occasionally, you can't use just a \f(CW\*(C`/g\*(C'\fR to get all the changes
to occur that you might want.  Here are two common cases:
.Sp
.Vb 2
\&    # put commas in the right places in an integer
\&    1 while s/(\ed)(\ed\ed\ed)(?!\ed)/$1,$2/g;
\&
\&    # expand tabs to 8\-column spacing
\&    1 while s/\et+/\*(Aq \*(Aq x (length($&)*8 \- length($\`)%8)/e;
.Ve
.Sp
\&\f(CW\*(C`s///le\*(C'\fR is treated as a substitution followed by the \f(CW\*(C`le\*(C'\fR operator, not
the \f(CW\*(C`/le\*(C'\fR flags.  This may change in a future version of Perl.  It
produces a warning if warnings are enabled.  To disambiguate, use a space
or change the order of the flags:
.Sp
.Vb 2
\&    s/foo/bar/ le 5;  # "le" infix operator
\&    s/foo/bar/el;     # "e" and "l" flags
.Ve
.SS "Quote-Like Operators"
.IX Xref "operator, quote-like"
.IX Subsection "Quote-Like Operators"
.IP "q/STRING/" 4
.IX Xref "q quote, single ' ''"
.IX Item "q/STRING/"
.PD 0
.IP "'\s-1STRING\s0'" 4
.IX Item "'STRING'"
.PD
A single-quoted, literal string.  A backslash represents a backslash
unless followed by the delimiter or another backslash, in which case
the delimiter or backslash is interpolated.
.Sp
.Vb 3
\&    $foo = q!I said, "You said, \*(AqShe said it.\*(Aq"!;
\&    $bar = q(\*(AqThis is it.\*(Aq);
\&    $baz = \*(Aq\en\*(Aq;                # a two\-character string
.Ve
.IP "qq/STRING/" 4
.IX Xref "qq quote, double "" """""
.IX Item "qq/STRING/"
.PD 0
.ie n .IP """\s-1STRING\s0""" 4
.el .IP "``\s-1STRING\s0''" 4
.IX Item "STRING"
.PD
A double-quoted, interpolated string.
.Sp
.Vb 4
\&    $_ .= qq
\&     (*** The previous line contains the naughty word "$1".\en)
\&                if /\eb(tcl|java|python)\eb/i;      # :\-)
\&    $baz = "\en";                # a one\-character string
.Ve
.IP "qx/STRING/" 4
.IX Xref "qx ` `` backtick"
.IX Item "qx/STRING/"
.PD 0
.IP "`STRING`" 4
.IX Item "`STRING`"
.PD
A string which is (possibly) interpolated and then executed as a
system command with \f(CW\*(C`/bin/sh\*(C'\fR or its equivalent.  Shell wildcards,
pipes, and redirections will be honored.  The collected standard
output of the command is returned; standard error is unaffected.  In
scalar context, it comes back as a single (potentially multi-line)
string, or undef if the command failed.  In list context, returns a
list of lines (however you've defined lines with $/ or
\&\f(CW$INPUT_RECORD_SEPARATOR\fR), or an empty list if the command failed.
.Sp
Because backticks do not affect standard error, use shell file descriptor
syntax (assuming the shell supports this) if you care to address this.
To capture a command's \s-1STDERR\s0 and \s-1STDOUT\s0 together:
.Sp
.Vb 1
\&    $output = \`cmd 2>&1\`;
.Ve
.Sp
To capture a command's \s-1STDOUT\s0 but discard its \s-1STDERR:\s0
.Sp
.Vb 1
\&    $output = \`cmd 2>/dev/null\`;
.Ve
.Sp
To capture a command's \s-1STDERR\s0 but discard its \s-1STDOUT\s0 (ordering is
important here):
.Sp
.Vb 1
\&    $output = \`cmd 2>&1 1>/dev/null\`;
.Ve
.Sp
To exchange a command's \s-1STDOUT\s0 and \s-1STDERR\s0 in order to capture the \s-1STDERR\s0
but leave its \s-1STDOUT\s0 to come out the old \s-1STDERR:\s0
.Sp
.Vb 1
\&    $output = \`cmd 3>&1 1>&2 2>&3 3>&\-\`;
.Ve
.Sp
To read both a command's \s-1STDOUT\s0 and its \s-1STDERR\s0 separately, it's easiest
to redirect them separately to files, and then read from those files
when the program is done:
.Sp
.Vb 1
\&    system("program args 1>program.stdout 2>program.stderr");
.Ve
.Sp
The \s-1STDIN\s0 filehandle used by the command is inherited from Perl's \s-1STDIN\s0.
For example:
.Sp
.Vb 3
\&    open(SPLAT, "stuff")   || die "can\*(Aqt open stuff: $!";
\&    open(STDIN, "<&SPLAT") || die "can\*(Aqt dupe SPLAT: $!";
\&    print STDOUT \`sort\`;
.Ve
.Sp
will print the sorted contents of the file named \fI\*(L"stuff\*(R"\fR.
.Sp
Using single-quote as a delimiter protects the command from Perl's
double-quote interpolation, passing it on to the shell instead:
.Sp
.Vb 2
\&    $perl_info  = qx(ps $$);            # that\*(Aqs Perl\*(Aqs $$
\&    $shell_info = qx\*(Aqps $$\*(Aq;            # that\*(Aqs the new shell\*(Aqs $$
.Ve
.Sp
How that string gets evaluated is entirely subject to the command
interpreter on your system.  On most platforms, you will have to protect
shell metacharacters if you want them treated literally.  This is in
practice difficult to do, as it's unclear how to escape which characters.
See perlsec for a clean and safe example of a manual \fIfork()\fR and \fIexec()\fR
to emulate backticks safely.
.Sp
On some platforms (notably DOS-like ones), the shell may not be
capable of dealing with multiline commands, so putting newlines in
the string may not get you what you want.  You may be able to evaluate
multiple commands in a single line by separating them with the command
separator character, if your shell supports that (for example, \f(CW\*(C`;\*(C'\fR on 
many Unix shells and \f(CW\*(C`&\*(C'\fR on the Windows \s-1NT\s0 \f(CW\*(C`cmd\*(C'\fR shell).
.Sp
Beginning with v5.6.0, Perl will attempt to flush all files opened for
output before starting the child process, but this may not be supported
on some platforms (see perlport).  To be safe, you may need to set
\&\f(CW$|\fR ($AUTOFLUSH in English) or call the \f(CW\*(C`autoflush()\*(C'\fR method of
\&\f(CW\*(C`IO::Handle\*(C'\fR on any open handles.
.Sp
Beware that some command shells may place restrictions on the length
of the command line.  You must ensure your strings don't exceed this
limit after any necessary interpolations.  See the platform-specific
release notes for more details about your particular environment.
.Sp
Using this operator can lead to programs that are difficult to port,
because the shell commands called vary between systems, and may in
fact not be present at all.  As one example, the \f(CW\*(C`type\*(C'\fR command under
the \s-1POSIX\s0 shell is very different from the \f(CW\*(C`type\*(C'\fR command under \s-1DOS\s0.
That doesn't mean you should go out of your way to avoid backticks
when they're the right way to get something done.  Perl was made to be
a glue language, and one of the things it glues together is commands.
Just understand what you're getting yourself into.
.Sp
See \*(L"I/O Operators\*(R" for more discussion.
.IP "qw/STRING/" 4
.IX Xref "qw quote, list quote, words"
.IX Item "qw/STRING/"
Evaluates to a list of the words extracted out of \s-1STRING\s0, using embedded
whitespace as the word delimiters.  It can be understood as being roughly
equivalent to:
.Sp
.Vb 1
\&    split(" ", q/STRING/);
.Ve
.Sp
the differences being that it generates a real list at compile time, and
in scalar context it returns the last element in the list.  So
this expression:
.Sp
.Vb 1
\&    qw(foo bar baz)
.Ve
.Sp
is semantically equivalent to the list:
.Sp
.Vb 1
\&    "foo", "bar", "baz"
.Ve
.Sp
Some frequently seen examples:
.Sp
.Vb 2
\&    use POSIX qw( setlocale localeconv )
\&    @EXPORT = qw( foo bar baz );
.Ve
.Sp
A common mistake is to try to separate the words with comma or to
put comments into a multi-line \f(CW\*(C`qw\*(C'\fR\-string.  For this reason, the
\&\f(CW\*(C`use warnings\*(C'\fR pragma and the \fB\-w\fR switch (that is, the \f(CW$^W\fR variable)
produces warnings if the \s-1STRING\s0 contains the \*(L",\*(R" or the \*(L"#\*(R" character.
.IP "tr/SEARCHLIST/REPLACEMENTLIST/cdsr" 4
.IX Xref "tr y transliterate  c  d  s"
.IX Item "tr/SEARCHLIST/REPLACEMENTLIST/cdsr"
.PD 0
.IP "y/SEARCHLIST/REPLACEMENTLIST/cdsr" 4
.IX Item "y/SEARCHLIST/REPLACEMENTLIST/cdsr"
.PD
Transliterates all occurrences of the characters found in the search list
with the corresponding character in the replacement list.  It returns
the number of characters replaced or deleted.  If no string is
specified via the \f(CW\*(C`=~\*(C'\fR or \f(CW\*(C`!~\*(C'\fR operator, the \f(CW$_\fR string is transliterated.
.Sp
If the \f(CW\*(C`/r\*(C'\fR (non-destructive) option is present, a new copy of the string
is made and its characters transliterated, and this copy is returned no
matter whether it was modified or not: the original string is always
left unchanged.  The new copy is always a plain string, even if the input
string is an object or a tied variable.
.Sp
Unless the \f(CW\*(C`/r\*(C'\fR option is used, the string specified with \f(CW\*(C`=~\*(C'\fR must be a
scalar variable, an array element, a hash element, or an assignment to one
of those; in other words, an lvalue.
.Sp
A character range may be specified with a hyphen, so \f(CW\*(C`tr/A\-J/0\-9/\*(C'\fR
does the same replacement as \f(CW\*(C`tr/ACEGIBDFHJ/0246813579/\*(C'\fR.
For \fBsed\fR devotees, \f(CW\*(C`y\*(C'\fR is provided as a synonym for \f(CW\*(C`tr\*(C'\fR.  If the
\&\s-1SEARCHLIST\s0 is delimited by bracketing quotes, the \s-1REPLACEMENTLIST\s0 has
its own pair of quotes, which may or may not be bracketing quotes;
for example, \f(CW\*(C`tr[aeiouy][yuoiea]\*(C'\fR or \f(CW\*(C`tr(+\e\-*/)/ABCD/\*(C'\fR.
.Sp
Note that \f(CW\*(C`tr\*(C'\fR does \fBnot\fR do regular expression character classes such as
\&\f(CW\*(C`\ed\*(C'\fR or \f(CW\*(C`\epL\*(C'\fR.  The \f(CW\*(C`tr\*(C'\fR operator is not equivalent to the \fItr\fR\|(1)
utility.  If you want to map strings between lower/upper cases, see
\&\*(L"lc\*(R" in perlfunc and \*(L"uc\*(R" in perlfunc, and in general consider using the \f(CW\*(C`s\*(C'\fR
operator if you need regular expressions.  The \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, and
\&\f(CW\*(C`\el\*(C'\fR string-interpolation escapes on the right side of a substitution
operator will perform correct case-mappings, but \f(CW\*(C`tr[a\-z][A\-Z]\*(C'\fR will not
(except sometimes on legacy 7\-bit data).
.Sp
Note also that the whole range idea is rather unportable between
character sets\*(--and even within character sets they may cause results
you probably didn't expect.  A sound principle is to use only ranges
that begin from and end at either alphabets of equal case (a\-e, A\-E),
or digits (0\-4).  Anything else is unsafe.  If in doubt, spell out the
character sets in full.
.Sp
Options:
.Sp
.Vb 5
\&    c   Complement the SEARCHLIST.
\&    d   Delete found but unreplaced characters.
\&    s   Squash duplicate replaced characters.
\&    r   Return the modified string and leave the original string
\&        untouched.
.Ve
.Sp
If the \f(CW\*(C`/c\*(C'\fR modifier is specified, the \s-1SEARCHLIST\s0 character set
is complemented.  If the \f(CW\*(C`/d\*(C'\fR modifier is specified, any characters
specified by \s-1SEARCHLIST\s0 not found in \s-1REPLACEMENTLIST\s0 are deleted.
(Note that this is slightly more flexible than the behavior of some
\&\fBtr\fR programs, which delete anything they find in the \s-1SEARCHLIST\s0,
period.) If the \f(CW\*(C`/s\*(C'\fR modifier is specified, sequences of characters
that were transliterated to the same character are squashed down
to a single instance of the character.
.Sp
If the \f(CW\*(C`/d\*(C'\fR modifier is used, the \s-1REPLACEMENTLIST\s0 is always interpreted
exactly as specified.  Otherwise, if the \s-1REPLACEMENTLIST\s0 is shorter
than the \s-1SEARCHLIST\s0, the final character is replicated till it is long
enough.  If the \s-1REPLACEMENTLIST\s0 is empty, the \s-1SEARCHLIST\s0 is replicated.
This latter is useful for counting characters in a class or for
squashing character sequences in a class.
.Sp
Examples:
.Sp
.Vb 1
\&    $ARGV[1] =~ tr/A\-Z/a\-z/;    # canonicalize to lower case ASCII
\&
\&    $cnt = tr/*/*/;             # count the stars in $_
\&
\&    $cnt = $sky =~ tr/*/*/;     # count the stars in $sky
\&
\&    $cnt = tr/0\-9//;            # count the digits in $_
\&
\&    tr/a\-zA\-Z//s;               # bookkeeper \-> bokeper
\&
\&    ($HOST = $host) =~ tr/a\-z/A\-Z/;
\&     $HOST = $host  =~ tr/a\-z/A\-Z/r;   # same thing
\&
\&    $HOST = $host =~ tr/a\-z/A\-Z/r    # chained with s///r
\&                  =~ s/:/ \-p/r;
\&
\&    tr/a\-zA\-Z/ /cs;             # change non\-alphas to single space
\&
\&    @stripped = map tr/a\-zA\-Z/ /csr, @original;
\&                                # /r with map
\&
\&    tr [\e200\-\e377]
\&       [\e000\-\e177];             # wickedly delete 8th bit
.Ve
.Sp
If multiple transliterations are given for a character, only the
first one is used:
.Sp
.Vb 1
\&    tr/AAA/XYZ/
.Ve
.Sp
will transliterate any A to X.
.Sp
Because the transliteration table is built at compile time, neither
the \s-1SEARCHLIST\s0 nor the \s-1REPLACEMENTLIST\s0 are subjected to double quote
interpolation.  That means that if you want to use variables, you
must use an \fIeval()\fR:
.Sp
.Vb 2
\&    eval "tr/$oldlist/$newlist/";
\&    die $@ if $@;
\&
\&    eval "tr/$oldlist/$newlist/, 1" or die $@;
.Ve
.IP "<<\s-1EOF\s0" 4
.IX Xref "here-doc heredoc here-document <<"
.IX Item "<<EOF"
A line-oriented form of quoting is based on the shell \*(L"here-document\*(R"
syntax.  Following a \f(CW\*(C`<<\*(C'\fR you specify a string to terminate
the quoted material, and all lines following the current line down to
the terminating string are the value of the item.
.Sp
The terminating string may be either an identifier (a word), or some
quoted text.  An unquoted identifier works like double quotes.
There may not be a space between the \f(CW\*(C`<<\*(C'\fR and the identifier,
unless the identifier is explicitly quoted.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the
first empty line.)  The terminating string must appear by itself
(unquoted and with no surrounding whitespace) on the terminating line.
.Sp
If the terminating string is quoted, the type of quotes used determine
the treatment of the text.
.RS 4
.IP "Double Quotes" 4
.IX Item "Double Quotes"
Double quotes indicate that the text will be interpolated using exactly
the same rules as normal double quoted strings.
.Sp
.Vb 3
\&       print <<EOF;
\&    The price is $Price.
\&    EOF
\&
\&       print << "EOF"; # same as above
\&    The price is $Price.
\&    EOF
.Ve
.IP "Single Quotes" 4
.IX Item "Single Quotes"
Single quotes indicate the text is to be treated literally with no
interpolation of its content. This is similar to single quoted
strings except that backslashes have no special meaning, with \f(CW\*(C`\e\e\*(C'\fR
being treated as two backslashes and not one as they would in every
other quoting construct.
.Sp
Just as in the shell, a backslashed bareword following the \f(CW\*(C`<<\*(C'\fR
means the same thing as a single-quoted string does:
.Sp
.Vb 3
\&        $cost = <<\*(AqVISTA\*(Aq;  # hasta la ...
\&    That\*(Aqll be $10 please, ma\*(Aqam.
\&    VISTA
\&
\&        $cost = <<\eVISTA;   # Same thing!
\&    That\*(Aqll be $10 please, ma\*(Aqam.
\&    VISTA
.Ve
.Sp
This is the only form of quoting in perl where there is no need
to worry about escaping content, something that code generators
can and do make good use of.
.IP "Backticks" 4
.IX Item "Backticks"
The content of the here doc is treated just as it would be if the
string were embedded in backticks. Thus the content is interpolated
as though it were double quoted and then executed via the shell, with
the results of the execution returned.
.Sp
.Vb 3
\&       print << \`EOC\`; # execute command and get results
\&    echo hi there
\&    EOC
.Ve
.RE
.RS 4
.Sp
It is possible to stack multiple here-docs in a row:
.Sp
.Vb 5
\&       print <<"foo", <<"bar"; # you can stack them
\&    I said foo.
\&    foo
\&    I said bar.
\&    bar
\&
\&       myfunc(<< "THIS", 23, <<\*(AqTHAT\*(Aq);
\&    Here\*(Aqs a line
\&    or two.
\&    THIS
\&    and here\*(Aqs another.
\&    THAT
.Ve
.Sp
Just don't forget that you have to put a semicolon on the end
to finish the statement, as Perl doesn't know you're not going to
try to do this:
.Sp
.Vb 4
\&       print <<ABC
\&    179231
\&    ABC
\&       + 20;
.Ve
.Sp
If you want to remove the line terminator from your here-docs,
use \f(CW\*(C`chomp()\*(C'\fR.
.Sp
.Vb 3
\&    chomp($string = <<\*(AqEND\*(Aq);
\&    This is a string.
\&    END
.Ve
.Sp
If you want your here-docs to be indented with the rest of the code,
you'll need to remove leading whitespace from each line manually:
.Sp
.Vb 4
\&    ($quote = <<\*(AqFINIS\*(Aq) =~ s/^\es+//gm;
\&       The Road goes ever on and on,
\&       down from the door where it began.
\&    FINIS
.Ve
.Sp
If you use a here-doc within a delimited construct, such as in \f(CW\*(C`s///eg\*(C'\fR,
the quoted material must come on the lines following the final delimiter.
So instead of
.Sp
.Vb 4
\&    s/this/<<E . \*(Aqthat\*(Aq
\&    the other
\&    E
\&     . \*(Aqmore \*(Aq/eg;
.Ve
.Sp
you have to write
.Sp
.Vb 4
\&    s/this/<<E . \*(Aqthat\*(Aq
\&     . \*(Aqmore \*(Aq/eg;
\&    the other
\&    E
.Ve
.Sp
If the terminating identifier is on the last line of the program, you
must be sure there is a newline after it; otherwise, Perl will give the
warning \fBCan't find string terminator \*(L"\s-1END\s0\*(R" anywhere before \s-1EOF\s0...\fR.
.Sp
Additionally, quoting rules for the end-of-string identifier are
unrelated to Perl's quoting rules. \f(CW\*(C`q()\*(C'\fR, \f(CW\*(C`qq()\*(C'\fR, and the like are not
supported in place of \f(CW\*(Aq\*(Aq\fR and \f(CW""\fR, and the only interpolation is for
backslashing the quoting character:
.Sp
.Vb 3
\&    print << "abc\e"def";
\&    testing...
\&    abc"def
.Ve
.Sp
Finally, quoted strings cannot span multiple lines.  The general rule is
that the identifier must be a string literal.  Stick with that, and you
should be safe.
.RE
.SS "Gory details of parsing quoted constructs"
.IX Xref "quote, gory details"
.IX Subsection "Gory details of parsing quoted constructs"
When presented with something that might have several different
interpretations, Perl uses the \fB\s-1DWIM\s0\fR (that's \*(L"Do What I Mean\*(R")
principle to pick the most probable interpretation.  This strategy
is so successful that Perl programmers often do not suspect the
ambivalence of what they write.  But from time to time, Perl's
notions differ substantially from what the author honestly meant.
.PP
This section hopes to clarify how Perl handles quoted constructs.
Although the most common reason to learn this is to unravel labyrinthine
regular expressions, because the initial steps of parsing are the
same for all quoting operators, they are all discussed together.
.PP
The most important Perl parsing rule is the first one discussed
below: when processing a quoted construct, Perl first finds the end
of that construct, then interprets its contents.  If you understand
this rule, you may skip the rest of this section on the first
reading.  The other rules are likely to contradict the user's
expectations much less frequently than this first one.
.PP
Some passes discussed below are performed concurrently, but because
their results are the same, we consider them individually.  For different
quoting constructs, Perl performs different numbers of passes, from
one to four, but these passes are always performed in the same order.
.IP "Finding the end" 4
.IX Item "Finding the end"
The first pass is finding the end of the quoted construct, where
the information about the delimiters is used in parsing.
During this search, text between the starting and ending delimiters
is copied to a safe location. The text copied gets delimiter-independent.
.Sp
If the construct is a here-doc, the ending delimiter is a line
that has a terminating string as the content. Therefore \f(CW\*(C`<<EOF\*(C'\fR is
terminated by \f(CW\*(C`EOF\*(C'\fR immediately followed by \f(CW"\en"\fR and starting
from the first column of the terminating line.
When searching for the terminating line of a here-doc, nothing
is skipped. In other words, lines after the here-doc syntax
are compared with the terminating string line by line.
.Sp
For the constructs except here-docs, single characters are used as starting
and ending delimiters. If the starting delimiter is an opening punctuation
(that is \f(CW\*(C`(\*(C'\fR, \f(CW\*(C`[\*(C'\fR, \f(CW\*(C`{\*(C'\fR, or \f(CW\*(C`<\*(C'\fR), the ending delimiter is the
corresponding closing punctuation (that is \f(CW\*(C`)\*(C'\fR, \f(CW\*(C`]\*(C'\fR, \f(CW\*(C`}\*(C'\fR, or \f(CW\*(C`>\*(C'\fR).
If the starting delimiter is an unpaired character like \f(CW\*(C`/\*(C'\fR or a closing
punctuation, the ending delimiter is same as the starting delimiter.
Therefore a \f(CW\*(C`/\*(C'\fR terminates a \f(CW\*(C`qq//\*(C'\fR construct, while a \f(CW\*(C`]\*(C'\fR terminates
\&\f(CW\*(C`qq[]\*(C'\fR and \f(CW\*(C`qq]]\*(C'\fR constructs.
.Sp
When searching for single-character delimiters, escaped delimiters
and \f(CW\*(C`\e\e\*(C'\fR are skipped.  For example, while searching for terminating \f(CW\*(C`/\*(C'\fR,
combinations of \f(CW\*(C`\e\e\*(C'\fR and \f(CW\*(C`\e/\*(C'\fR are skipped.  If the delimiters are
bracketing, nested pairs are also skipped.  For example, while searching
for closing \f(CW\*(C`]\*(C'\fR paired with the opening \f(CW\*(C`[\*(C'\fR, combinations of \f(CW\*(C`\e\e\*(C'\fR, \f(CW\*(C`\e]\*(C'\fR,
and \f(CW\*(C`\e[\*(C'\fR are all skipped, and nested \f(CW\*(C`[\*(C'\fR and \f(CW\*(C`]\*(C'\fR are skipped as well.
However, when backslashes are used as the delimiters (like \f(CW\*(C`qq\e\e\*(C'\fR and
\&\f(CW\*(C`tr\e\e\e\*(C'\fR), nothing is skipped.
During the search for the end, backslashes that escape delimiters or
backslashes are removed (exactly speaking, they are not copied to the
safe location).
.Sp
For constructs with three-part delimiters (\f(CW\*(C`s///\*(C'\fR, \f(CW\*(C`y///\*(C'\fR, and
\&\f(CW\*(C`tr///\*(C'\fR), the search is repeated once more.
If the first delimiter is not an opening punctuation, three delimiters must
be same such as \f(CW\*(C`s!!!\*(C'\fR and \f(CW\*(C`tr)))\*(C'\fR, in which case the second delimiter
terminates the left part and starts the right part at once.
If the left part is delimited by bracketing punctuation (that is \f(CW\*(C`()\*(C'\fR,
\&\f(CW\*(C`[]\*(C'\fR, \f(CW\*(C`{}\*(C'\fR, or \f(CW\*(C`<>\*(C'\fR), the right part needs another pair of
delimiters such as \f(CW\*(C`s(){}\*(C'\fR and \f(CW\*(C`tr[]//\*(C'\fR.  In these cases, whitespace
and comments are allowed between both parts, though the comment must follow
at least one whitespace character; otherwise a character expected as the 
start of the comment may be regarded as the starting delimiter of the right part.
.Sp
During this search no attention is paid to the semantics of the construct.
Thus:
.Sp
.Vb 1
\&    "$hash{"$foo/$bar"}"
.Ve
.Sp
or:
.Sp
.Vb 3
\&    m/
\&      bar       # NOT a comment, this slash / terminated m//!
\&     /x
.Ve
.Sp
do not form legal quoted expressions.   The quoted part ends on the
first \f(CW\*(C`"\*(C'\fR and \f(CW\*(C`/\*(C'\fR, and the rest happens to be a syntax error.
Because the slash that terminated \f(CW\*(C`m//\*(C'\fR was followed by a \f(CW\*(C`SPACE\*(C'\fR,
the example above is not \f(CW\*(C`m//x\*(C'\fR, but rather \f(CW\*(C`m//\*(C'\fR with no \f(CW\*(C`/x\*(C'\fR
modifier.  So the embedded \f(CW\*(C`#\*(C'\fR is interpreted as a literal \f(CW\*(C`#\*(C'\fR.
.Sp
Also no attention is paid to \f(CW\*(C`\ec\e\*(C'\fR (multichar control char syntax) during
this search. Thus the second \f(CW\*(C`\e\*(C'\fR in \f(CW\*(C`qq/\ec\e/\*(C'\fR is interpreted as a part
of \f(CW\*(C`\e/\*(C'\fR, and the following \f(CW\*(C`/\*(C'\fR is not recognized as a delimiter.
Instead, use \f(CW\*(C`\e034\*(C'\fR or \f(CW\*(C`\ex1c\*(C'\fR at the end of quoted constructs.
.IP "Interpolation" 4
.IX Xref "interpolation"
.IX Item "Interpolation"
The next step is interpolation in the text obtained, which is now
delimiter-independent.  There are multiple cases.
.RS 4
.ie n .IP """<<\*(AqEOF\*(Aq""" 4
.el .IP "\f(CW<<\*(AqEOF\*(Aq\fR" 4
.IX Item "<<EOF"
No interpolation is performed.
Note that the combination \f(CW\*(C`\e\e\*(C'\fR is left intact, since escaped delimiters
are not available for here-docs.
.ie n .IP """m\*(Aq\*(Aq"", the pattern of ""s\*(Aq\*(Aq\*(Aq""" 4
.el .IP "\f(CWm\*(Aq\*(Aq\fR, the pattern of \f(CWs\*(Aq\*(Aq\*(Aq\fR" 4
.IX Item "m, the pattern of s"
No interpolation is performed at this stage.
Any backslashed sequences including \f(CW\*(C`\e\e\*(C'\fR are treated at the stage
to \*(L"parsing regular expressions\*(R".
.ie n .IP "\*(Aq\*(Aq, ""q//"", ""tr\*(Aq\*(Aq\*(Aq"", ""y\*(Aq\*(Aq\*(Aq"", the replacement of ""s\*(Aq\*(Aq\*(Aq""" 4
.el .IP "\f(CW\*(Aq\*(Aq\fR, \f(CWq//\fR, \f(CWtr\*(Aq\*(Aq\*(Aq\fR, \f(CWy\*(Aq\*(Aq\*(Aq\fR, the replacement of \f(CWs\*(Aq\*(Aq\*(Aq\fR" 4
.IX Item ", q//, tr, y, the replacement of s"
The only interpolation is removal of \f(CW\*(C`\e\*(C'\fR from pairs of \f(CW\*(C`\e\e\*(C'\fR.
Therefore \f(CW\*(C`\-\*(C'\fR in \f(CW\*(C`tr\*(Aq\*(Aq\*(Aq\*(C'\fR and \f(CW\*(C`y\*(Aq\*(Aq\*(Aq\*(C'\fR is treated literally
as a hyphen and no character range is available.
\&\f(CW\*(C`\e1\*(C'\fR in the replacement of \f(CW\*(C`s\*(Aq\*(Aq\*(Aq\*(C'\fR does not work as \f(CW$1\fR.
.ie n .IP """tr///"", ""y///""" 4
.el .IP "\f(CWtr///\fR, \f(CWy///\fR" 4
.IX Item "tr///, y///"
No variable interpolation occurs.  String modifying combinations for
case and quoting such as \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, and \f(CW\*(C`\eE\*(C'\fR are not recognized.
The other escape sequences such as \f(CW\*(C`\e200\*(C'\fR and \f(CW\*(C`\et\*(C'\fR and backslashed
characters such as \f(CW\*(C`\e\e\*(C'\fR and \f(CW\*(C`\e\-\*(C'\fR are converted to appropriate literals.
The character \f(CW\*(C`\-\*(C'\fR is treated specially and therefore \f(CW\*(C`\e\-\*(C'\fR is treated
as a literal \f(CW\*(C`\-\*(C'\fR.
.ie n .IP """"", ""\`\`"", ""qq//"", ""qx//"", ""<file*glob>"", ""<<""EOF""""" 4
.el .IP "\f(CW``''\fR, \f(CW\`\`\fR, \f(CWqq//\fR, \f(CWqx//\fR, \f(CW<file*glob>\fR, \f(CW<<``EOF''\fR" 4
.IX Item """"", , qq//, qx//, <file*glob>, <<""EOF"""
\&\f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR (possibly paired with \f(CW\*(C`\eE\*(C'\fR) are
converted to corresponding Perl constructs.  Thus, \f(CW"$foo\eQbaz$bar"\fR
is converted to \f(CW\*(C`$foo . (quotemeta("baz" . $bar))\*(C'\fR internally.
The other escape sequences such as \f(CW\*(C`\e200\*(C'\fR and \f(CW\*(C`\et\*(C'\fR and backslashed
characters such as \f(CW\*(C`\e\e\*(C'\fR and \f(CW\*(C`\e\-\*(C'\fR are replaced with appropriate
expansions.
.Sp
Let it be stressed that \fIwhatever falls between \f(CI\*(C`\eQ\*(C'\fI and \f(CI\*(C`\eE\*(C'\fI\fR
is interpolated in the usual way.  Something like \f(CW"\eQ\e\eE"\fR has
no \f(CW\*(C`\eE\*(C'\fR inside.  instead, it has \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\e\e\*(C'\fR, and \f(CW\*(C`E\*(C'\fR, so the
result is the same as for \f(CW"\e\e\e\eE"\fR.  As a general rule, backslashes
between \f(CW\*(C`\eQ\*(C'\fR and \f(CW\*(C`\eE\*(C'\fR may lead to counterintuitive results.  So,
\&\f(CW"\eQ\et\eE"\fR is converted to \f(CW\*(C`quotemeta("\et")\*(C'\fR, which is the same
as \f(CW"\e\e\et"\fR (since \s-1TAB\s0 is not alphanumeric).  Note also that:
.Sp
.Vb 2
\&  $str = \*(Aq\et\*(Aq;
\&  return "\eQ$str";
.Ve
.Sp
may be closer to the conjectural \fIintention\fR of the writer of \f(CW"\eQ\et\eE"\fR.
.Sp
Interpolated scalars and arrays are converted internally to the \f(CW\*(C`join\*(C'\fR and
\&\f(CW\*(C`.\*(C'\fR catenation operations.  Thus, \f(CW"$foo XXX \*(Aq@arr\*(Aq"\fR becomes:
.Sp
.Vb 1
\&  $foo . " XXX \*(Aq" . (join $", @arr) . "\*(Aq";
.Ve
.Sp
All operations above are performed simultaneously, left to right.
.Sp
Because the result of \f(CW"\eQ STRING \eE"\fR has all metacharacters
quoted, there is no way to insert a literal \f(CW\*(C`$\*(C'\fR or \f(CW\*(C`@\*(C'\fR inside a
\&\f(CW\*(C`\eQ\eE\*(C'\fR pair.  If protected by \f(CW\*(C`\e\*(C'\fR, \f(CW\*(C`$\*(C'\fR will be quoted to became
\&\f(CW"\e\e\e$"\fR; if not, it is interpreted as the start of an interpolated
scalar.
.Sp
Note also that the interpolation code needs to make a decision on
where the interpolated scalar ends.  For instance, whether
\&\f(CW"a $b \-> {c}"\fR really means:
.Sp
.Vb 1
\&  "a " . $b . " \-> {c}";
.Ve
.Sp
or:
.Sp
.Vb 1
\&  "a " . $b \-> {c};
.Ve
.Sp
Most of the time, the longest possible text that does not include
spaces between components and which contains matching braces or
brackets.  because the outcome may be determined by voting based
on heuristic estimators, the result is not strictly predictable.
Fortunately, it's usually correct for ambiguous cases.
.ie n .IP "the replacement of ""s///""" 4
.el .IP "the replacement of \f(CWs///\fR" 4
.IX Item "the replacement of s///"
Processing of \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR and interpolation
happens as with \f(CW\*(C`qq//\*(C'\fR constructs.
.Sp
It is at this step that \f(CW\*(C`\e1\*(C'\fR is begrudgingly converted to \f(CW$1\fR in
the replacement text of \f(CW\*(C`s///\*(C'\fR, in order to correct the incorrigible
\&\fIsed\fR hackers who haven't picked up the saner idiom yet.  A warning
is emitted if the \f(CW\*(C`use warnings\*(C'\fR pragma or the \fB\-w\fR command-line flag
(that is, the \f(CW$^W\fR variable) was set.
.ie n .IP """RE"" in ""?RE?"", ""/RE/"", ""m/RE/"", ""s/RE/foo/""," 4
.el .IP "\f(CWRE\fR in \f(CW?RE?\fR, \f(CW/RE/\fR, \f(CWm/RE/\fR, \f(CWs/RE/foo/\fR," 4
.IX Item "RE in ?RE?, /RE/, m/RE/, s/RE/foo/,"
Processing of \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR, \f(CW\*(C`\eE\*(C'\fR,
and interpolation happens (almost) as with \f(CW\*(C`qq//\*(C'\fR constructs.
.Sp
Processing of \f(CW\*(C`\eN{...}\*(C'\fR is also done here, and compiled into an intermediate
form for the regex compiler.  (This is because, as mentioned below, the regex
compilation may be done at execution time, and \f(CW\*(C`\eN{...}\*(C'\fR is a compile-time
construct.)
.Sp
However any other combinations of \f(CW\*(C`\e\*(C'\fR followed by a character
are not substituted but only skipped, in order to parse them
as regular expressions at the following step.
As \f(CW\*(C`\ec\*(C'\fR is skipped at this step, \f(CW\*(C`@\*(C'\fR of \f(CW\*(C`\ec@\*(C'\fR in \s-1RE\s0 is possibly
treated as an array symbol (for example \f(CW@foo\fR),
even though the same text in \f(CW\*(C`qq//\*(C'\fR gives interpolation of \f(CW\*(C`\ec@\*(C'\fR.
.Sp
Moreover, inside \f(CW\*(C`(?{BLOCK})\*(C'\fR, \f(CW\*(C`(?# comment )\*(C'\fR, and
a \f(CW\*(C`#\*(C'\fR\-comment in a \f(CW\*(C`//x\*(C'\fR\-regular expression, no processing is
performed whatsoever.  This is the first step at which the presence
of the \f(CW\*(C`//x\*(C'\fR modifier is relevant.
.Sp
Interpolation in patterns has several quirks: \f(CW$|\fR, \f(CW$(\fR, \f(CW$)\fR, \f(CW\*(C`@+\*(C'\fR
and \f(CW\*(C`@\-\*(C'\fR are not interpolated, and constructs \f(CW$var[SOMETHING]\fR are
voted (by several different estimators) to be either an array element
or \f(CW$var\fR followed by an \s-1RE\s0 alternative.  This is where the notation
\&\f(CW\*(C`${arr[$bar]}\*(C'\fR comes handy: \f(CW\*(C`/${arr[0\-9]}/\*(C'\fR is interpreted as
array element \f(CW\*(C`\-9\*(C'\fR, not as a regular expression from the variable
\&\f(CW$arr\fR followed by a digit, which would be the interpretation of
\&\f(CW\*(C`/$arr[0\-9]/\*(C'\fR.  Since voting among different estimators may occur,
the result is not predictable.
.Sp
The lack of processing of \f(CW\*(C`\e\e\*(C'\fR creates specific restrictions on
the post-processed text.  If the delimiter is \f(CW\*(C`/\*(C'\fR, one cannot get
the combination \f(CW\*(C`\e/\*(C'\fR into the result of this step.  \f(CW\*(C`/\*(C'\fR will
finish the regular expression, \f(CW\*(C`\e/\*(C'\fR will be stripped to \f(CW\*(C`/\*(C'\fR on
the previous step, and \f(CW\*(C`\e\e/\*(C'\fR will be left as is.  Because \f(CW\*(C`/\*(C'\fR is
equivalent to \f(CW\*(C`\e/\*(C'\fR inside a regular expression, this does not
matter unless the delimiter happens to be character special to the
\&\s-1RE\s0 engine, such as in \f(CW\*(C`s*foo*bar*\*(C'\fR, \f(CW\*(C`m[foo]\*(C'\fR, or \f(CW\*(C`?foo?\*(C'\fR; or an
alphanumeric char, as in:
.Sp
.Vb 1
\&  m m ^ a \es* b mmx;
.Ve
.Sp
In the \s-1RE\s0 above, which is intentionally obfuscated for illustration, the
delimiter is \f(CW\*(C`m\*(C'\fR, the modifier is \f(CW\*(C`mx\*(C'\fR, and after delimiter-removal the
\&\s-1RE\s0 is the same as for \f(CW\*(C`m/ ^ a \es* b /mx\*(C'\fR.  There's more than one
reason you're encouraged to restrict your delimiters to non-alphanumeric,
non-whitespace choices.
.RE
.RS 4
.Sp
This step is the last one for all constructs except regular expressions,
which are processed further.
.RE
.IP "parsing regular expressions" 4
.IX Xref "regexp, parse"
.IX Item "parsing regular expressions"
Previous steps were performed during the compilation of Perl code,
but this one happens at run time, although it may be optimized to
be calculated at compile time if appropriate.  After preprocessing
described above, and possibly after evaluation if concatenation,
joining, casing translation, or metaquoting are involved, the
resulting \fIstring\fR is passed to the \s-1RE\s0 engine for compilation.
.Sp
Whatever happens in the \s-1RE\s0 engine might be better discussed in perlre,
but for the sake of continuity, we shall do so here.
.Sp
This is another step where the presence of the \f(CW\*(C`//x\*(C'\fR modifier is
relevant.  The \s-1RE\s0 engine scans the string from left to right and
converts it to a finite automaton.
.Sp
Backslashed characters are either replaced with corresponding
literal strings (as with \f(CW\*(C`\e{\*(C'\fR), or else they generate special nodes
in the finite automaton (as with \f(CW\*(C`\eb\*(C'\fR).  Characters special to the
\&\s-1RE\s0 engine (such as \f(CW\*(C`|\*(C'\fR) generate corresponding nodes or groups of
nodes.  \f(CW\*(C`(?#...)\*(C'\fR comments are ignored.  All the rest is either
converted to literal strings to match, or else is ignored (as is
whitespace and \f(CW\*(C`#\*(C'\fR\-style comments if \f(CW\*(C`//x\*(C'\fR is present).
.Sp
Parsing of the bracketed character class construct, \f(CW\*(C`[...]\*(C'\fR, is
rather different than the rule used for the rest of the pattern.
The terminator of this construct is found using the same rules as
for finding the terminator of a \f(CW\*(C`{}\*(C'\fR\-delimited construct, the only
exception being that \f(CW\*(C`]\*(C'\fR immediately following \f(CW\*(C`[\*(C'\fR is treated as
though preceded by a backslash.  Similarly, the terminator of
\&\f(CW\*(C`(?{...})\*(C'\fR is found using the same rules as for finding the
terminator of a \f(CW\*(C`{}\*(C'\fR\-delimited construct.
.Sp
It is possible to inspect both the string given to \s-1RE\s0 engine and the
resulting finite automaton.  See the arguments \f(CW\*(C`debug\*(C'\fR/\f(CW\*(C`debugcolor\*(C'\fR
in the \f(CW\*(C`use re\*(C'\fR pragma, as well as Perl's \fB\-Dr\fR command-line
switch documented in \*(L"Command Switches\*(R" in perlrun.
.IP "Optimization of regular expressions" 4
.IX Xref "regexp, optimization"
.IX Item "Optimization of regular expressions"
This step is listed for completeness only.  Since it does not change
semantics, details of this step are not documented and are subject
to change without notice.  This step is performed over the finite
automaton that was generated during the previous pass.
.Sp
It is at this stage that \f(CW\*(C`split()\*(C'\fR silently optimizes \f(CW\*(C`/^/\*(C'\fR to
mean \f(CW\*(C`/^/m\*(C'\fR.
.SS "I/O Operators"
.IX Xref "operator, i o operator, io io while filehandle <> @ARGV"
.IX Subsection "I/O Operators"
There are several I/O operators you should know about.
.PP
A string enclosed by backticks (grave accents) first undergoes
double-quote interpolation.  It is then interpreted as an external
command, and the output of that command is the value of the
backtick string, like in a shell.  In scalar context, a single string
consisting of all output is returned.  In list context, a list of
values is returned, one per line of output.  (You can set \f(CW$/\fR to use
a different line terminator.)  The command is executed each time the
pseudo-literal is evaluated.  The status value of the command is
returned in \f(CW$?\fR (see perlvar for the interpretation of \f(CW$?\fR).
Unlike in \fBcsh\fR, no translation is done on the return data\*(--newlines
remain newlines.  Unlike in any of the shells, single quotes do not
hide variable names in the command from interpretation.  To pass a
literal dollar-sign through to the shell you need to hide it with a
backslash.  The generalized form of backticks is \f(CW\*(C`qx//\*(C'\fR.  (Because
backticks always undergo shell expansion as well, see perlsec for
security concerns.)
.IX Xref "qx ` `` backtick glob"
.PP
In scalar context, evaluating a filehandle in angle brackets yields
the next line from that file (the newline, if any, included), or
\&\f(CW\*(C`undef\*(C'\fR at end-of-file or on error.  When \f(CW$/\fR is set to \f(CW\*(C`undef\*(C'\fR
(sometimes known as file-slurp mode) and the file is empty, it
returns \f(CW\*(Aq\*(Aq\fR the first time, followed by \f(CW\*(C`undef\*(C'\fR subsequently.
.PP
Ordinarily you must assign the returned value to a variable, but
there is one situation where an automatic assignment happens.  If
and only if the input symbol is the only thing inside the conditional
of a \f(CW\*(C`while\*(C'\fR statement (even if disguised as a \f(CW\*(C`for(;;)\*(C'\fR loop),
the value is automatically assigned to the global variable \f(CW$_\fR,
destroying whatever was there previously.  (This may seem like an
odd thing to you, but you'll use the construct in almost every Perl
script you write.)  The \f(CW$_\fR variable is not implicitly localized.
You'll have to put a \f(CW\*(C`local $_;\*(C'\fR before the loop if you want that
to happen.
.PP
The following lines are equivalent:
.PP
.Vb 7
\&    while (defined($_ = <STDIN>)) { print; }
\&    while ($_ = <STDIN>) { print; }
\&    while (<STDIN>) { print; }
\&    for (;<STDIN>;) { print; }
\&    print while defined($_ = <STDIN>);
\&    print while ($_ = <STDIN>);
\&    print while <STDIN>;
.Ve
.PP
This also behaves similarly, but assigns to a lexical variable 
instead of to \f(CW$_\fR:
.PP
.Vb 1
\&    while (my $line = <STDIN>) { print $line }
.Ve
.PP
In these loop constructs, the assigned value (whether assignment
is automatic or explicit) is then tested to see whether it is
defined.  The defined test avoids problems where the line has a string
value that would be treated as false by Perl; for example a "\*(L" or
a \*(R"0" with no trailing newline.  If you really mean for such values
to terminate the loop, they should be tested for explicitly:
.PP
.Vb 2
\&    while (($_ = <STDIN>) ne \*(Aq0\*(Aq) { ... }
\&    while (<STDIN>) { last unless $_; ... }
.Ve
.PP
In other boolean contexts, \f(CW\*(C`<FILEHANDLE>\*(C'\fR without an
explicit \f(CW\*(C`defined\*(C'\fR test or comparison elicits a warning if the
\&\f(CW\*(C`use warnings\*(C'\fR pragma or the \fB\-w\fR
command-line switch (the \f(CW$^W\fR variable) is in effect.
.PP
The filehandles \s-1STDIN\s0, \s-1STDOUT\s0, and \s-1STDERR\s0 are predefined.  (The
filehandles \f(CW\*(C`stdin\*(C'\fR, \f(CW\*(C`stdout\*(C'\fR, and \f(CW\*(C`stderr\*(C'\fR will also work except
in packages, where they would be interpreted as local identifiers
rather than global.)  Additional filehandles may be created with
the \fIopen()\fR function, amongst others.  See perlopentut and
\&\*(L"open\*(R" in perlfunc for details on this.
.IX Xref "stdin stdout sterr"
.PP
If a <\s-1FILEHANDLE\s0> is used in a context that is looking for
a list, a list comprising all input lines is returned, one line per
list element.  It's easy to grow to a rather large data space this
way, so use with care.
.PP
<\s-1FILEHANDLE\s0> may also be spelled \f(CW\*(C`readline(*FILEHANDLE)\*(C'\fR.
See \*(L"readline\*(R" in perlfunc.
.PP
The null filehandle <> is special: it can be used to emulate the
behavior of \fBsed\fR and \fBawk\fR, and any other Unix filter program
that takes a list of filenames, doing the same to each line
of input from all of them.  Input from <> comes either from
standard input, or from each file listed on the command line.  Here's
how it works: the first time <> is evaluated, the \f(CW@ARGV\fR array is
checked, and if it is empty, \f(CW$ARGV[0]\fR is set to \*(L"\-\*(R", which when opened
gives you standard input.  The \f(CW@ARGV\fR array is then processed as a list
of filenames.  The loop
.PP
.Vb 3
\&    while (<>) {
\&        ...                     # code for each line
\&    }
.Ve
.PP
is equivalent to the following Perl-like pseudo code:
.PP
.Vb 7
\&    unshift(@ARGV, \*(Aq\-\*(Aq) unless @ARGV;
\&    while ($ARGV = shift) {
\&        open(ARGV, $ARGV);
\&        while (<ARGV>) {
\&            ...         # code for each line
\&        }
\&    }
.Ve
.PP
except that it isn't so cumbersome to say, and will actually work.
It really does shift the \f(CW@ARGV\fR array and put the current filename
into the \f(CW$ARGV\fR variable.  It also uses filehandle \fI\s-1ARGV\s0\fR
internally. <> is just a synonym for <\s-1ARGV\s0>, which
is magical.  (The pseudo code above doesn't work because it treats
<\s-1ARGV\s0> as non-magical.)
.PP
Since the null filehandle uses the two argument form of \*(L"open\*(R" in perlfunc
it interprets special characters, so if you have a script like this:
.PP
.Vb 3
\&    while (<>) {
\&        print;
\&    }
.Ve
.PP
and call it with \f(CW\*(C`perl dangerous.pl \*(Aqrm \-rfv *|\*(Aq\*(C'\fR, it actually opens a
pipe, executes the \f(CW\*(C`rm\*(C'\fR command and reads \f(CW\*(C`rm\*(C'\fR's output from that pipe.
If you want all items in \f(CW@ARGV\fR to be interpreted as file names, you
can use the module \f(CW\*(C`ARGV::readonly\*(C'\fR from \s-1CPAN\s0.
.PP
You can modify \f(CW@ARGV\fR before the first <> as long as the array ends up
containing the list of filenames you really want.  Line numbers (\f(CW$.\fR)
continue as though the input were one big happy file.  See the example
in \*(L"eof\*(R" in perlfunc for how to reset line numbers on each file.
.PP
If you want to set \f(CW@ARGV\fR to your own list of files, go right ahead.
This sets \f(CW@ARGV\fR to all plain text files if no \f(CW@ARGV\fR was given:
.PP
.Vb 1
\&    @ARGV = grep { \-f && \-T } glob(\*(Aq*\*(Aq) unless @ARGV;
.Ve
.PP
You can even set them to pipe commands.  For example, this automatically
filters compressed arguments through \fBgzip\fR:
.PP
.Vb 1
\&    @ARGV = map { /\e.(gz|Z)$/ ? "gzip \-dc < $_ |" : $_ } @ARGV;
.Ve
.PP
If you want to pass switches into your script, you can use one of the
Getopts modules or put a loop on the front like this:
.PP
.Vb 7
\&    while ($_ = $ARGV[0], /^\-/) {
\&        shift;
\&        last if /^\-\-$/;
\&        if (/^\-D(.*)/) { $debug = $1 }
\&        if (/^\-v/)     { $verbose++  }
\&        # ...           # other switches
\&    }
\&
\&    while (<>) {
\&        # ...           # code for each line
\&    }
.Ve
.PP
The <> symbol will return \f(CW\*(C`undef\*(C'\fR for end-of-file only once.
If you call it again after this, it will assume you are processing another
\&\f(CW@ARGV\fR list, and if you haven't set \f(CW@ARGV\fR, will read input from \s-1STDIN\s0.
.PP
If what the angle brackets contain is a simple scalar variable (for example,
<$foo>), then that variable contains the name of the
filehandle to input from, or its typeglob, or a reference to the
same.  For example:
.PP
.Vb 2
\&    $fh = \e*STDIN;
\&    $line = <$fh>;
.Ve
.PP
If what's within the angle brackets is neither a filehandle nor a simple
scalar variable containing a filehandle name, typeglob, or typeglob
reference, it is interpreted as a filename pattern to be globbed, and
either a list of filenames or the next filename in the list is returned,
depending on context.  This distinction is determined on syntactic
grounds alone.  That means \f(CW\*(C`<$x>\*(C'\fR is always a \fIreadline()\fR from
an indirect handle, but \f(CW\*(C`<$hash{key}>\*(C'\fR is always a \fIglob()\fR.
That's because \f(CW$x\fR is a simple scalar variable, but \f(CW$hash{key}\fR is
not\*(--it's a hash element.  Even \f(CW\*(C`<$x >\*(C'\fR (note the extra space)
is treated as \f(CW\*(C`glob("$x ")\*(C'\fR, not \f(CW\*(C`readline($x)\*(C'\fR.
.PP
One level of double-quote interpretation is done first, but you can't
say \f(CW\*(C`<$foo>\*(C'\fR because that's an indirect filehandle as explained
in the previous paragraph.  (In older versions of Perl, programmers
would insert curly brackets to force interpretation as a filename glob:
\&\f(CW\*(C`<${foo}>\*(C'\fR.  These days, it's considered cleaner to call the
internal function directly as \f(CW\*(C`glob($foo)\*(C'\fR, which is probably the right
way to have done it in the first place.)  For example:
.PP
.Vb 3
\&    while (<*.c>) {
\&        chmod 0644, $_;
\&    }
.Ve
.PP
is roughly equivalent to:
.PP
.Vb 5
\&    open(FOO, "echo *.c | tr \-s \*(Aq \et\er\ef\*(Aq \*(Aq\e\e012\e\e012\e\e012\e\e012\*(Aq|");
\&    while (<FOO>) {
\&        chomp;
\&        chmod 0644, $_;
\&    }
.Ve
.PP
except that the globbing is actually done internally using the standard
\&\f(CW\*(C`File::Glob\*(C'\fR extension.  Of course, the shortest way to do the above is:
.PP
.Vb 1
\&    chmod 0644, <*.c>;
.Ve
.PP
A (file)glob evaluates its (embedded) argument only when it is
starting a new list.  All values must be read before it will start
over.  In list context, this isn't important because you automatically
get them all anyway.  However, in scalar context the operator returns
the next value each time it's called, or \f(CW\*(C`undef\*(C'\fR when the list has
run out.  As with filehandle reads, an automatic \f(CW\*(C`defined\*(C'\fR is
generated when the glob occurs in the test part of a \f(CW\*(C`while\*(C'\fR,
because legal glob returns (for example,
a file called \fI0\fR) would otherwise
terminate the loop.  Again, \f(CW\*(C`undef\*(C'\fR is returned only once.  So if
you're expecting a single value from a glob, it is much better to
say
.PP
.Vb 1
\&    ($file) = <blurch*>;
.Ve
.PP
than
.PP
.Vb 1
\&    $file = <blurch*>;
.Ve
.PP
because the latter will alternate between returning a filename and
returning false.
.PP
If you're trying to do variable interpolation, it's definitely better
to use the \fIglob()\fR function, because the older notation can cause people
to become confused with the indirect filehandle notation.
.PP
.Vb 2
\&    @files = glob("$dir/*.[ch]");
\&    @files = glob($files[$i]);
.Ve
.SS "Constant Folding"
.IX Xref "constant folding folding"
.IX Subsection "Constant Folding"
Like C, Perl does a certain amount of expression evaluation at
compile time whenever it determines that all arguments to an
operator are static and have no side effects.  In particular, string
concatenation happens at compile time between literals that don't do
variable substitution.  Backslash interpolation also happens at
compile time.  You can say
.PP
.Vb 3
\&      \*(AqNow is the time for all\*(Aq
\&    . "\en" 
\&    .  \*(Aqgood men to come to.\*(Aq
.Ve
.PP
and this all reduces to one string internally.  Likewise, if
you say
.PP
.Vb 3
\&    foreach $file (@filenames) {
\&        if (\-s $file > 5 + 100 * 2**16) {  }
\&    }
.Ve
.PP
the compiler precomputes the number which that expression
represents so that the interpreter won't have to.
.SS "No-ops"
.IX Xref "no-op nop"
.IX Subsection "No-ops"
Perl doesn't officially have a no-op operator, but the bare constants
\&\f(CW0\fR and \f(CW1\fR are special-cased not to produce a warning in void
context, so you can for example safely do
.PP
.Vb 1
\&    1 while foo();
.Ve
.SS "Bitwise String Operators"
.IX Xref "operator, bitwise, string"
.IX Subsection "Bitwise String Operators"
Bitstrings of any size may be manipulated by the bitwise operators
(\f(CW\*(C`~ | & ^\*(C'\fR).
.PP
If the operands to a binary bitwise op are strings of different
sizes, \fB|\fR and \fB^\fR ops act as though the shorter operand had
additional zero bits on the right, while the \fB&\fR op acts as though
the longer operand were truncated to the length of the shorter.
The granularity for such extension or truncation is one or more
bytes.
.PP
.Vb 5
\&    # ASCII\-based examples
\&    print "j p \en" ^ " a h";            # prints "JAPH\en"
\&    print "JA" | "  ph\en";              # prints "japh\en"
\&    print "japh\enJunk" & \*(Aq_\|_\|_\|_\|_\*(Aq;       # prints "JAPH\en";
\&    print \*(Aqp N$\*(Aq ^ " E<H\en";            # prints "Perl\en";
.Ve
.PP
If you are intending to manipulate bitstrings, be certain that
you're supplying bitstrings: If an operand is a number, that will imply
a \fBnumeric\fR bitwise operation.  You may explicitly show which type of
operation you intend by using \f(CW""\fR or \f(CW\*(C`0+\*(C'\fR, as in the examples below.
.PP
.Vb 4
\&    $foo =  150  |  105;        # yields 255  (0x96 | 0x69 is 0xFF)
\&    $foo = \*(Aq150\*(Aq |  105;        # yields 255
\&    $foo =  150  | \*(Aq105\*(Aq;       # yields 255
\&    $foo = \*(Aq150\*(Aq | \*(Aq105\*(Aq;       # yields string \*(Aq155\*(Aq (under ASCII)
\&
\&    $baz = 0+$foo & 0+$bar;     # both ops explicitly numeric
\&    $biz = "$foo" ^ "$bar";     # both ops explicitly stringy
.Ve
.PP
See \*(L"vec\*(R" in perlfunc for information on how to manipulate individual bits
in a bit vector.
.SS "Integer Arithmetic"
.IX Xref "integer"
.IX Subsection "Integer Arithmetic"
By default, Perl assumes that it must do most of its arithmetic in
floating point.  But by saying
.PP
.Vb 1
\&    use integer;
.Ve
.PP
you may tell the compiler to use integer operations
(see integer for a detailed explanation) from here to the end of
the enclosing \s-1BLOCK\s0.  An inner \s-1BLOCK\s0 may countermand this by saying
.PP
.Vb 1
\&    no integer;
.Ve
.PP
which lasts until the end of that \s-1BLOCK\s0.  Note that this doesn't
mean everything is an integer, merely that Perl will use integer
operations for arithmetic, comparison, and bitwise operators.  For
example, even under \f(CW\*(C`use integer\*(C'\fR, if you take the \f(CWsqrt(2)\fR, you'll
still get \f(CW1.4142135623731\fR or so.
.PP
Used on numbers, the bitwise operators (\*(L"&\*(R", \*(L"|\*(R", \*(L"^\*(R", \*(L"~\*(R", \*(L"<<\*(R",
and \*(L">>\*(R") always produce integral results.  (But see also
\&\*(L"Bitwise String Operators\*(R".)  However, \f(CW\*(C`use integer\*(C'\fR still has meaning for
them.  By default, their results are interpreted as unsigned integers, but
if \f(CW\*(C`use integer\*(C'\fR is in effect, their results are interpreted
as signed integers.  For example, \f(CW\*(C`~0\*(C'\fR usually evaluates to a large
integral value.  However, \f(CW\*(C`use integer; ~0\*(C'\fR is \f(CW\*(C`\-1\*(C'\fR on two's-complement
machines.
.SS "Floating-point Arithmetic"
.IX Subsection "Floating-point Arithmetic"

.IX Xref "floating-point floating point float real"
.PP
While \f(CW\*(C`use integer\*(C'\fR provides integer-only arithmetic, there is no
analogous mechanism to provide automatic rounding or truncation to a
certain number of decimal places.  For rounding to a certain number
of digits, \fIsprintf()\fR or \fIprintf()\fR is usually the easiest route.
See perlfaq4.
.PP
Floating-point numbers are only approximations to what a mathematician
would call real numbers.  There are infinitely more reals than floats,
so some corners must be cut.  For example:
.PP
.Vb 2
\&    printf "%.20g\en", 123456789123456789;
\&    #        produces 123456789123456784
.Ve
.PP
Testing for exact floating-point equality or inequality is not a
good idea.  Here's a (relatively expensive) work-around to compare
whether two floating-point numbers are equal to a particular number of
decimal places.  See Knuth, volume \s-1II\s0, for a more robust treatment of
this topic.
.PP
.Vb 7
\&    sub fp_equal {
\&        my ($X, $Y, $POINTS) = @_;
\&        my ($tX, $tY);
\&        $tX = sprintf("%.${POINTS}g", $X);
\&        $tY = sprintf("%.${POINTS}g", $Y);
\&        return $tX eq $tY;
\&    }
.Ve
.PP
The \s-1POSIX\s0 module (part of the standard perl distribution) implements
\&\fIceil()\fR, \fIfloor()\fR, and other mathematical and trigonometric functions.
The Math::Complex module (part of the standard perl distribution)
defines mathematical functions that work on both the reals and the
imaginary numbers.  Math::Complex not as efficient as \s-1POSIX\s0, but
\&\s-1POSIX\s0 can't work with complex numbers.
.PP
Rounding in financial applications can have serious implications, and
the rounding method used should be specified precisely.  In these
cases, it probably pays not to trust whichever system rounding is
being used by Perl, but to instead implement the rounding function you
need yourself.
.SS "Bigger Numbers"
.IX Xref "number, arbitrary precision"
.IX Subsection "Bigger Numbers"
The standard \f(CW\*(C`Math::BigInt\*(C'\fR, \f(CW\*(C`Math::BigRat\*(C'\fR, and \f(CW\*(C`Math::BigFloat\*(C'\fR modules,
along with the \f(CW\*(C`bigint\*(C'\fR, \f(CW\*(C`bigrat\*(C'\fR, and \f(CW\*(C`bitfloat\*(C'\fR pragmas, provide
variable-precision arithmetic and overloaded operators, although
they're currently pretty slow. At the cost of some space and
considerable speed, they avoid the normal pitfalls associated with
limited-precision representations.
.PP
.Vb 5
\&        use 5.010;
\&        use bigint;  # easy interface to Math::BigInt
\&        $x = 123456789123456789;
\&        say $x * $x;
\&    +15241578780673678515622620750190521
.Ve
.PP
Or with rationals:
.PP
.Vb 8
\&        use 5.010;
\&        use bigrat;
\&        $a = 3/22;
\&        $b = 4/6;
\&        say "a/b is ", $a/$b;
\&        say "a*b is ", $a*$b;
\&    a/b is 9/44
\&    a*b is 1/11
.Ve
.PP
Several modules let you calculate with (bound only by memory and \s-1CPU\s0 time)
unlimited or fixed precision. There are also some non-standard modules that
provide faster implementations via external C libraries.
.PP
Here is a short, but incomplete summary:
.PP
.Vb 11
\&  Math::Fraction         big, unlimited fractions like 9973 / 12967
\&  Math::String           treat string sequences like numbers
\&  Math::FixedPrecision   calculate with a fixed precision
\&  Math::Currency         for currency calculations
\&  Bit::Vector            manipulate bit vectors fast (uses C)
\&  Math::BigIntFast       Bit::Vector wrapper for big numbers
\&  Math::Pari             provides access to the Pari C library
\&  Math::BigInteger       uses an external C library
\&  Math::Cephes           uses external Cephes C library (no big numbers)
\&  Math::Cephes::Fraction fractions via the Cephes library
\&  Math::GMP              another one using an external C library
.Ve
.PP
Choose wisely.
                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlop5.18.1                                 0100644 0001750 0001750 00000451117 12566207442 022566  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOP 1"
.TH PERLOP 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlop \- Perl operators and precedence
.IX Xref "operator"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Operator Precedence and Associativity"
.IX Xref "operator, precedence precedence associativity"
.IX Subsection "Operator Precedence and Associativity"
Operator precedence and associativity work in Perl more or less like
they do in mathematics.
.PP
\&\fIOperator precedence\fR means some operators are evaluated before
others.  For example, in \f(CW\*(C`2 + 4 * 5\*(C'\fR, the multiplication has higher
precedence so \f(CW\*(C`4 * 5\*(C'\fR is evaluated first yielding \f(CW\*(C`2 + 20 ==
22\*(C'\fR and not \f(CW\*(C`6 * 5 == 30\*(C'\fR.
.PP
\&\fIOperator associativity\fR defines what happens if a sequence of the
same operators is used one after another: whether the evaluator will
evaluate the left operations first or the right.  For example, in \f(CW\*(C`8
\&\- 4 \- 2\*(C'\fR, subtraction is left associative so Perl evaluates the
expression left to right.  \f(CW\*(C`8 \- 4\*(C'\fR is evaluated first making the
expression \f(CW\*(C`4 \- 2 == 2\*(C'\fR and not \f(CW\*(C`8 \- 2 == 6\*(C'\fR.
.PP
Perl operators have the following associativity and precedence,
listed from highest precedence to lowest.  Operators borrowed from
C keep the same precedence relationship with each other, even where
C's precedence is slightly screwy.  (This makes learning Perl easier
for C folks.)  With very few exceptions, these all operate on scalar
values only, not array values.
.PP
.Vb 10
\&    left        terms and list operators (leftward)
\&    left        \->
\&    nonassoc    ++ \-\-
\&    right       **
\&    right       ! ~ \e and unary + and \-
\&    left        =~ !~
\&    left        * / % x
\&    left        + \- .
\&    left        << >>
\&    nonassoc    named unary operators
\&    nonassoc    < > <= >= lt gt le ge
\&    nonassoc    == != <=> eq ne cmp ~~
\&    left        &
\&    left        | ^
\&    left        &&
\&    left        || //
\&    nonassoc    ..  ...
\&    right       ?:
\&    right       = += \-= *= etc. goto last next redo dump
\&    left        , =>
\&    nonassoc    list operators (rightward)
\&    right       not
\&    left        and
\&    left        or xor
.Ve
.PP
In the following sections, these operators are covered in precedence order.
.PP
Many operators can be overloaded for objects.  See overload.
.SS "Terms and List Operators (Leftward)"
.IX Xref "list operator operator, list term"
.IX Subsection "Terms and List Operators (Leftward)"
A \s-1TERM\s0 has the highest precedence in Perl.  They include variables,
quote and quote-like operators, any expression in parentheses,
and any function whose arguments are parenthesized.  Actually, there
aren't really functions in this sense, just list operators and unary
operators behaving as functions because you put parentheses around
the arguments.  These are all documented in perlfunc.
.PP
If any list operator (\fIprint()\fR, etc.) or any unary operator (\fIchdir()\fR, etc.)
is followed by a left parenthesis as the next token, the operator and
arguments within parentheses are taken to be of highest precedence,
just like a normal function call.
.PP
In the absence of parentheses, the precedence of list operators such as
\&\f(CW\*(C`print\*(C'\fR, \f(CW\*(C`sort\*(C'\fR, or \f(CW\*(C`chmod\*(C'\fR is either very high or very low depending on
whether you are looking at the left side or the right side of the operator.
For example, in
.PP
.Vb 2
\&    @ary = (1, 3, sort 4, 2);
\&    print @ary;         # prints 1324
.Ve
.PP
the commas on the right of the sort are evaluated before the sort,
but the commas on the left are evaluated after.  In other words,
list operators tend to gobble up all arguments that follow, and
then act like a simple \s-1TERM\s0 with regard to the preceding expression.
Be careful with parentheses:
.PP
.Vb 3
\&    # These evaluate exit before doing the print:
\&    print($foo, exit);  # Obviously not what you want.
\&    print $foo, exit;   # Nor is this.
\&
\&    # These do the print before evaluating exit:
\&    (print $foo), exit; # This is what you want.
\&    print($foo), exit;  # Or this.
\&    print ($foo), exit; # Or even this.
.Ve
.PP
Also note that
.PP
.Vb 1
\&    print ($foo & 255) + 1, "\en";
.Ve
.PP
probably doesn't do what you expect at first glance.  The parentheses
enclose the argument list for \f(CW\*(C`print\*(C'\fR which is evaluated (printing
the result of \f(CW\*(C`$foo & 255\*(C'\fR).  Then one is added to the return value
of \f(CW\*(C`print\*(C'\fR (usually 1).  The result is something like this:
.PP
.Vb 1
\&    1 + 1, "\en";    # Obviously not what you meant.
.Ve
.PP
To do what you meant properly, you must write:
.PP
.Vb 1
\&    print(($foo & 255) + 1, "\en");
.Ve
.PP
See \*(L"Named Unary Operators\*(R" for more discussion of this.
.PP
Also parsed as terms are the \f(CW\*(C`do {}\*(C'\fR and \f(CW\*(C`eval {}\*(C'\fR constructs, as
well as subroutine and method calls, and the anonymous
constructors \f(CW\*(C`[]\*(C'\fR and \f(CW\*(C`{}\*(C'\fR.
.PP
See also \*(L"Quote and Quote-like Operators\*(R" toward the end of this section,
as well as \*(L"I/O Operators\*(R".
.SS "The Arrow Operator"
.IX Xref "arrow dereference ->"
.IX Subsection "The Arrow Operator"
"\f(CW\*(C`\->\*(C'\fR" is an infix dereference operator, just as it is in C
and \*(C+.  If the right side is either a \f(CW\*(C`[...]\*(C'\fR, \f(CW\*(C`{...}\*(C'\fR, or a
\&\f(CW\*(C`(...)\*(C'\fR subscript, then the left side must be either a hard or
symbolic reference to an array, a hash, or a subroutine respectively.
(Or technically speaking, a location capable of holding a hard
reference, if it's an array or hash reference being used for
assignment.)  See perlreftut and perlref.
.PP
Otherwise, the right side is a method name or a simple scalar
variable containing either the method name or a subroutine reference,
and the left side must be either an object (a blessed reference)
or a class name (that is, a package name).  See perlobj.
.SS "Auto-increment and Auto-decrement"
.IX Xref "increment auto-increment ++ decrement auto-decrement --"
.IX Subsection "Auto-increment and Auto-decrement"
\&\*(L"++\*(R" and \*(L"\-\-\*(R" work as in C.  That is, if placed before a variable,
they increment or decrement the variable by one before returning the
value, and if placed after, increment or decrement after returning the
value.
.PP
.Vb 3
\&    $i = 0;  $j = 0;
\&    print $i++;  # prints 0
\&    print ++$j;  # prints 1
.Ve
.PP
Note that just as in C, Perl doesn't define \fBwhen\fR the variable is
incremented or decremented. You just know it will be done sometime
before or after the value is returned. This also means that modifying
a variable twice in the same statement will lead to undefined behavior.
Avoid statements like:
.PP
.Vb 2
\&    $i = $i ++;
\&    print ++ $i + $i ++;
.Ve
.PP
Perl will not guarantee what the result of the above statements is.
.PP
The auto-increment operator has a little extra builtin magic to it.  If
you increment a variable that is numeric, or that has ever been used in
a numeric context, you get a normal increment.  If, however, the
variable has been used in only string contexts since it was set, and
has a value that is not the empty string and matches the pattern
\&\f(CW\*(C`/^[a\-zA\-Z]*[0\-9]*\ez/\*(C'\fR, the increment is done as a string, preserving each
character within its range, with carry:
.PP
.Vb 4
\&    print ++($foo = "99");      # prints "100"
\&    print ++($foo = "a0");      # prints "a1"
\&    print ++($foo = "Az");      # prints "Ba"
\&    print ++($foo = "zz");      # prints "aaa"
.Ve
.PP
\&\f(CW\*(C`undef\*(C'\fR is always treated as numeric, and in particular is changed
to \f(CW0\fR before incrementing (so that a post-increment of an undef value
will return \f(CW0\fR rather than \f(CW\*(C`undef\*(C'\fR).
.PP
The auto-decrement operator is not magical.
.SS "Exponentiation"
.IX Xref "** exponentiation power"
.IX Subsection "Exponentiation"
Binary \*(L"**\*(R" is the exponentiation operator.  It binds even more
tightly than unary minus, so \-2**4 is \-(2**4), not (\-2)**4. (This is
implemented using C's \fIpow\fR\|(3) function, which actually works on doubles
internally.)
.SS "Symbolic Unary Operators"
.IX Xref "unary operator operator, unary"
.IX Subsection "Symbolic Unary Operators"
Unary \*(L"!\*(R" performs logical negation, that is, \*(L"not\*(R".  See also \f(CW\*(C`not\*(C'\fR for a lower
precedence version of this.
.IX Xref "!"
.PP
Unary \*(L"\-\*(R" performs arithmetic negation if the operand is numeric,
including any string that looks like a number.  If the operand is
an identifier, a string consisting of a minus sign concatenated
with the identifier is returned.  Otherwise, if the string starts
with a plus or minus, a string starting with the opposite sign is
returned.  One effect of these rules is that \-bareword is equivalent
to the string \*(L"\-bareword\*(R".  If, however, the string begins with a
non-alphabetic character (excluding \*(L"+\*(R" or \*(L"\-\*(R"), Perl will attempt to convert
the string to a numeric and the arithmetic negation is performed. If the
string cannot be cleanly converted to a numeric, Perl will give the warning
\&\fBArgument \*(L"the string\*(R" isn't numeric in negation (\-) at ...\fR.
.IX Xref "- negation, arithmetic"
.PP
Unary \*(L"~\*(R" performs bitwise negation, that is, 1's complement.  For
example, \f(CW\*(C`0666 & ~027\*(C'\fR is 0640.  (See also \*(L"Integer Arithmetic\*(R" and
\&\*(L"Bitwise String Operators\*(R".)  Note that the width of the result is
platform-dependent: ~0 is 32 bits wide on a 32\-bit platform, but 64
bits wide on a 64\-bit platform, so if you are expecting a certain bit
width, remember to use the \*(L"&\*(R" operator to mask off the excess bits.
.IX Xref "~ negation, binary"
.PP
When complementing strings, if all characters have ordinal values under
256, then their complements will, also.  But if they do not, all
characters will be in either 32\- or 64\-bit complements, depending on your
architecture.  So for example, \f(CW\*(C`~"\ex{3B1}"\*(C'\fR is \f(CW"\ex{FFFF_FC4E}"\fR on
32\-bit machines and \f(CW"\ex{FFFF_FFFF_FFFF_FC4E}"\fR on 64\-bit machines.
.PP
Unary \*(L"+\*(R" has no effect whatsoever, even on strings.  It is useful
syntactically for separating a function name from a parenthesized expression
that would otherwise be interpreted as the complete list of function
arguments.  (See examples above under Terms and List Operators (Leftward).)
.IX Xref "+"
.PP
Unary \*(L"\e\*(R" creates a reference to whatever follows it.  See perlreftut
and perlref.  Do not confuse this behavior with the behavior of
backslash within a string, although both forms do convey the notion
of protecting the next thing from interpolation.
.IX Xref "\\ reference backslash"
.SS "Binding Operators"
.IX Xref "binding operator, binding =~ !~"
.IX Subsection "Binding Operators"
Binary \*(L"=~\*(R" binds a scalar expression to a pattern match.  Certain operations
search or modify the string \f(CW$_\fR by default.  This operator makes that kind
of operation work on some other string.  The right argument is a search
pattern, substitution, or transliteration.  The left argument is what is
supposed to be searched, substituted, or transliterated instead of the default
\&\f(CW$_\fR.  When used in scalar context, the return value generally indicates the
success of the operation.  The exceptions are substitution (s///)
and transliteration (y///) with the \f(CW\*(C`/r\*(C'\fR (non-destructive) option,
which cause the \fBr\fReturn value to be the result of the substitution.
Behavior in list context depends on the particular operator.
See \*(L"Regexp Quote-Like Operators\*(R" for details and perlretut for
examples using these operators.
.PP
If the right argument is an expression rather than a search pattern,
substitution, or transliteration, it is interpreted as a search pattern at run
time. Note that this means that its contents will be interpolated twice, so
.PP
.Vb 1
\&    \*(Aq\e\e\*(Aq =~ q\*(Aq\e\e\*(Aq;
.Ve
.PP
is not ok, as the regex engine will end up trying to compile the
pattern \f(CW\*(C`\e\*(C'\fR, which it will consider a syntax error.
.PP
Binary \*(L"!~\*(R" is just like \*(L"=~\*(R" except the return value is negated in
the logical sense.
.PP
Binary \*(L"!~\*(R" with a non-destructive substitution (s///r) or transliteration
(y///r) is a syntax error.
.SS "Multiplicative Operators"
.IX Xref "operator, multiplicative"
.IX Subsection "Multiplicative Operators"
Binary \*(L"*\*(R" multiplies two numbers.
.IX Xref "*"
.PP
Binary \*(L"/\*(R" divides two numbers.
.IX Xref "slash"
.PP
Binary \*(L"%\*(R" is the modulo operator, which computes the division
remainder of its first argument with respect to its second argument.
Given integer
operands \f(CW$a\fR and \f(CW$b\fR: If \f(CW$b\fR is positive, then \f(CW\*(C`$a % $b\*(C'\fR is
\&\f(CW$a\fR minus the largest multiple of \f(CW$b\fR less than or equal to
\&\f(CW$a\fR.  If \f(CW$b\fR is negative, then \f(CW\*(C`$a % $b\*(C'\fR is \f(CW$a\fR minus the
smallest multiple of \f(CW$b\fR that is not less than \f(CW$a\fR (that is, the
result will be less than or equal to zero).  If the operands
\&\f(CW$a\fR and \f(CW$b\fR are floating point values and the absolute value of
\&\f(CW$b\fR (that is \f(CW\*(C`abs($b)\*(C'\fR) is less than \f(CW\*(C`(UV_MAX + 1)\*(C'\fR, only
the integer portion of \f(CW$a\fR and \f(CW$b\fR will be used in the operation
(Note: here \f(CW\*(C`UV_MAX\*(C'\fR means the maximum of the unsigned integer type).
If the absolute value of the right operand (\f(CW\*(C`abs($b)\*(C'\fR) is greater than
or equal to \f(CW\*(C`(UV_MAX + 1)\*(C'\fR, \*(L"%\*(R" computes the floating-point remainder
\&\f(CW$r\fR in the equation \f(CW\*(C`($r = $a \- $i*$b)\*(C'\fR where \f(CW$i\fR is a certain
integer that makes \f(CW$r\fR have the same sign as the right operand
\&\f(CW$b\fR (\fBnot\fR as the left operand \f(CW$a\fR like C function \f(CW\*(C`fmod()\*(C'\fR)
and the absolute value less than that of \f(CW$b\fR.
Note that when \f(CW\*(C`use integer\*(C'\fR is in scope, \*(L"%\*(R" gives you direct access
to the modulo operator as implemented by your C compiler.  This
operator is not as well defined for negative operands, but it will
execute faster.
.IX Xref "% remainder modulo mod"
.PP
Binary \*(L"x\*(R" is the repetition operator.  In scalar context or if the left
operand is not enclosed in parentheses, it returns a string consisting
of the left operand repeated the number of times specified by the right
operand.  In list context, if the left operand is enclosed in
parentheses or is a list formed by \f(CW\*(C`qw/STRING/\*(C'\fR, it repeats the list.
If the right operand is zero or negative, it returns an empty string
or an empty list, depending on the context.
.IX Xref "x"
.PP
.Vb 1
\&    print \*(Aq\-\*(Aq x 80;             # print row of dashes
\&
\&    print "\et" x ($tab/8), \*(Aq \*(Aq x ($tab%8);      # tab over
\&
\&    @ones = (1) x 80;           # a list of 80 1\*(Aqs
\&    @ones = (5) x @ones;        # set all elements to 5
.Ve
.SS "Additive Operators"
.IX Xref "operator, additive"
.IX Subsection "Additive Operators"
Binary \f(CW\*(C`+\*(C'\fR returns the sum of two numbers.
.IX Xref "+"
.PP
Binary \f(CW\*(C`\-\*(C'\fR returns the difference of two numbers.
.IX Xref "-"
.PP
Binary \f(CW\*(C`.\*(C'\fR concatenates two strings.
.IX Xref "string, concatenation concatenation cat concat concatenate ."
.SS "Shift Operators"
.IX Xref "shift operator operator, shift << >> right shift left shift bitwise shift shl shr shift, right shift, left"
.IX Subsection "Shift Operators"
Binary \f(CW\*(C`<<\*(C'\fR returns the value of its left argument shifted left by the
number of bits specified by the right argument.  Arguments should be
integers.  (See also \*(L"Integer Arithmetic\*(R".)
.PP
Binary \f(CW\*(C`>>\*(C'\fR returns the value of its left argument shifted right by
the number of bits specified by the right argument.  Arguments should
be integers.  (See also \*(L"Integer Arithmetic\*(R".)
.PP
Note that both \f(CW\*(C`<<\*(C'\fR and \f(CW\*(C`>>\*(C'\fR in Perl are implemented directly using
\&\f(CW\*(C`<<\*(C'\fR and \f(CW\*(C`>>\*(C'\fR  in C.  If \f(CW\*(C`use integer\*(C'\fR (see \*(L"Integer Arithmetic\*(R") is
in force then signed C integers are used, else unsigned C integers are
used.  Either way, the implementation isn't going to generate results
larger than the size of the integer type Perl was built with (32 bits
or 64 bits).
.PP
The result of overflowing the range of the integers is undefined
because it is undefined also in C.  In other words, using 32\-bit
integers, \f(CW\*(C`1 << 32\*(C'\fR is undefined.  Shifting by a negative number
of bits is also undefined.
.PP
If you get tired of being subject to your platform's native integers,
the \f(CW\*(C`use bigint\*(C'\fR pragma neatly sidesteps the issue altogether:
.PP
.Vb 5
\&    print 20 << 20;  # 20971520
\&    print 20 << 40;  # 5120 on 32\-bit machines, 
\&                     # 21990232555520 on 64\-bit machines
\&    use bigint;
\&    print 20 << 100; # 25353012004564588029934064107520
.Ve
.SS "Named Unary Operators"
.IX Xref "operator, named unary"
.IX Subsection "Named Unary Operators"
The various named unary operators are treated as functions with one
argument, with optional parentheses.
.PP
If any list operator (\fIprint()\fR, etc.) or any unary operator (\fIchdir()\fR, etc.)
is followed by a left parenthesis as the next token, the operator and
arguments within parentheses are taken to be of highest precedence,
just like a normal function call.  For example,
because named unary operators are higher precedence than \f(CW\*(C`||\*(C'\fR:
.PP
.Vb 4
\&    chdir $foo    || die;       # (chdir $foo) || die
\&    chdir($foo)   || die;       # (chdir $foo) || die
\&    chdir ($foo)  || die;       # (chdir $foo) || die
\&    chdir +($foo) || die;       # (chdir $foo) || die
.Ve
.PP
but, because * is higher precedence than named operators:
.PP
.Vb 4
\&    chdir $foo * 20;    # chdir ($foo * 20)
\&    chdir($foo) * 20;   # (chdir $foo) * 20
\&    chdir ($foo) * 20;  # (chdir $foo) * 20
\&    chdir +($foo) * 20; # chdir ($foo * 20)
\&
\&    rand 10 * 20;       # rand (10 * 20)
\&    rand(10) * 20;      # (rand 10) * 20
\&    rand (10) * 20;     # (rand 10) * 20
\&    rand +(10) * 20;    # rand (10 * 20)
.Ve
.PP
Regarding precedence, the filetest operators, like \f(CW\*(C`\-f\*(C'\fR, \f(CW\*(C`\-M\*(C'\fR, etc. are
treated like named unary operators, but they don't follow this functional
parenthesis rule.  That means, for example, that \f(CW\*(C`\-f($file).".bak"\*(C'\fR is
equivalent to \f(CW\*(C`\-f "$file.bak"\*(C'\fR.
.IX Xref "-X filetest operator, filetest"
.PP
See also \*(L"Terms and List Operators (Leftward)\*(R".
.SS "Relational Operators"
.IX Xref "relational operator operator, relational"
.IX Subsection "Relational Operators"
Perl operators that return true or false generally return values 
that can be safely used as numbers.  For example, the relational
operators in this section and the equality operators in the next
one return \f(CW1\fR for true and a special version of the defined empty
string, \f(CW""\fR, which counts as a zero but is exempt from warnings
about improper numeric conversions, just as \f(CW"0 but true"\fR is.
.PP
Binary \*(L"<\*(R" returns true if the left argument is numerically less than
the right argument.
.IX Xref "<"
.PP
Binary \*(L">\*(R" returns true if the left argument is numerically greater
than the right argument.
.IX Xref ">"
.PP
Binary \*(L"<=\*(R" returns true if the left argument is numerically less than
or equal to the right argument.
.IX Xref "<="
.PP
Binary \*(L">=\*(R" returns true if the left argument is numerically greater
than or equal to the right argument.
.IX Xref ">="
.PP
Binary \*(L"lt\*(R" returns true if the left argument is stringwise less than
the right argument.
.IX Xref "lt"
.PP
Binary \*(L"gt\*(R" returns true if the left argument is stringwise greater
than the right argument.
.IX Xref "gt"
.PP
Binary \*(L"le\*(R" returns true if the left argument is stringwise less than
or equal to the right argument.
.IX Xref "le"
.PP
Binary \*(L"ge\*(R" returns true if the left argument is stringwise greater
than or equal to the right argument.
.IX Xref "ge"
.SS "Equality Operators"
.IX Xref "equality equal equals operator, equality"
.IX Subsection "Equality Operators"
Binary \*(L"==\*(R" returns true if the left argument is numerically equal to
the right argument.
.IX Xref "=="
.PP
Binary \*(L"!=\*(R" returns true if the left argument is numerically not equal
to the right argument.
.IX Xref "!="
.PP
Binary \*(L"<=>\*(R" returns \-1, 0, or 1 depending on whether the left
argument is numerically less than, equal to, or greater than the right
argument.  If your platform supports NaNs (not-a-numbers) as numeric
values, using them with \*(L"<=>\*(R" returns undef.  NaN is not \*(L"<\*(R", \*(L"==\*(R", \*(L">\*(R",
\&\*(L"<=\*(R" or \*(L">=\*(R" anything (even NaN), so those 5 return false. NaN != NaN
returns true, as does NaN != anything else. If your platform doesn't
support NaNs then NaN is just a string with numeric value 0.
.IX Xref "<=> spaceship"
.PP
.Vb 2
\&    $ perl \-le \*(Aq$a = "NaN"; print "No NaN support here" if $a == $a\*(Aq
\&    $ perl \-le \*(Aq$a = "NaN"; print "NaN support here" if $a != $a\*(Aq
.Ve
.PP
(Note that the bigint, bigrat, and bignum pragmas all 
support \*(L"NaN\*(R".)
.PP
Binary \*(L"eq\*(R" returns true if the left argument is stringwise equal to
the right argument.
.IX Xref "eq"
.PP
Binary \*(L"ne\*(R" returns true if the left argument is stringwise not equal
to the right argument.
.IX Xref "ne"
.PP
Binary \*(L"cmp\*(R" returns \-1, 0, or 1 depending on whether the left
argument is stringwise less than, equal to, or greater than the right
argument.
.IX Xref "cmp"
.PP
Binary \*(L"~~\*(R" does a smartmatch between its arguments.  Smart matching
is described in the next section.
.IX Xref "~~"
.PP
\&\*(L"lt\*(R", \*(L"le\*(R", \*(L"ge\*(R", \*(L"gt\*(R" and \*(L"cmp\*(R" use the collation (sort) order specified
by the current locale if a legacy \f(CW\*(C`use locale\*(C'\fR (but not
\&\f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR) is in effect.  See
perllocale.  Do not mix these with Unicode, only with legacy binary
encodings.  The standard Unicode::Collate and
Unicode::Collate::Locale modules offer much more powerful solutions to
collation issues.
.SS "Smartmatch Operator"
.IX Subsection "Smartmatch Operator"
First available in Perl 5.10.1 (the 5.10.0 version behaved differently),
binary \f(CW\*(C`~~\*(C'\fR does a \*(L"smartmatch\*(R" between its arguments.  This is mostly
used implicitly in the \f(CW\*(C`when\*(C'\fR construct described in perlsyn, although
not all \f(CW\*(C`when\*(C'\fR clauses call the smartmatch operator.  Unique among all of
Perl's operators, the smartmatch operator can recurse.
.PP
It is also unique in that all other Perl operators impose a context
(usually string or numeric context) on their operands, autoconverting
those operands to those imposed contexts.  In contrast, smartmatch
\&\fIinfers\fR contexts from the actual types of its operands and uses that
type information to select a suitable comparison mechanism.
.PP
The \f(CW\*(C`~~\*(C'\fR operator compares its operands \*(L"polymorphically\*(R", determining how
to compare them according to their actual types (numeric, string, array,
hash, etc.)  Like the equality operators with which it shares the same
precedence, \f(CW\*(C`~~\*(C'\fR returns 1 for true and \f(CW""\fR for false.  It is often best
read aloud as \*(L"in\*(R", \*(L"inside of\*(R", or \*(L"is contained in\*(R", because the left
operand is often looked for \fIinside\fR the right operand.  That makes the
order of the operands to the smartmatch operand often opposite that of
the regular match operator.  In other words, the \*(L"smaller\*(R" thing is usually
placed in the left operand and the larger one in the right.
.PP
The behavior of a smartmatch depends on what type of things its arguments
are, as determined by the following table.  The first row of the table
whose types apply determines the smartmatch behavior.  Because what
actually happens is mostly determined by the type of the second operand,
the table is sorted on the right operand instead of on the left.
.PP
.Vb 4
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& Any       undef      check whether Any is undefined                    
\&                like: !defined Any
\&
\& Any       Object     invoke ~~ overloading on Object, or die
\&
\& Right operand is an ARRAY:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& ARRAY1    ARRAY2     recurse on paired elements of ARRAY1 and ARRAY2[2]
\&                like: (ARRAY1[0] ~~ ARRAY2[0])
\&                        && (ARRAY1[1] ~~ ARRAY2[1]) && ...
\& HASH      ARRAY      any ARRAY elements exist as HASH keys             
\&                like: grep { exists HASH\->{$_} } ARRAY
\& Regexp    ARRAY      any ARRAY elements pattern match Regexp
\&                like: grep { /Regexp/ } ARRAY
\& undef     ARRAY      undef in ARRAY                                    
\&                like: grep { !defined } ARRAY
\& Any       ARRAY      smartmatch each ARRAY element[3]                   
\&                like: grep { Any ~~ $_ } ARRAY
\&
\& Right operand is a HASH:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& HASH1     HASH2      all same keys in both HASHes                      
\&                like: keys HASH1 ==
\&                         grep { exists HASH2\->{$_} } keys HASH1
\& ARRAY     HASH       any ARRAY elements exist as HASH keys             
\&                like: grep { exists HASH\->{$_} } ARRAY
\& Regexp    HASH       any HASH keys pattern match Regexp                
\&                like: grep { /Regexp/ } keys HASH
\& undef     HASH       always false (undef can\*(Aqt be a key)               
\&                like: 0 == 1
\& Any       HASH       HASH key existence                                
\&                like: exists HASH\->{Any}
\&
\& Right operand is CODE:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& ARRAY     CODE       sub returns true on all ARRAY elements[1]
\&                like: !grep { !CODE\->($_) } ARRAY
\& HASH      CODE       sub returns true on all HASH keys[1]
\&                like: !grep { !CODE\->($_) } keys HASH
\& Any       CODE       sub passed Any returns true              
\&                like: CODE\->(Any)
.Ve
.PP
Right operand is a Regexp:
.PP
.Vb 8
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& ARRAY     Regexp     any ARRAY elements match Regexp                   
\&                like: grep { /Regexp/ } ARRAY
\& HASH      Regexp     any HASH keys match Regexp                        
\&                like: grep { /Regexp/ } keys HASH
\& Any       Regexp     pattern match                                     
\&                like: Any =~ /Regexp/
\&
\& Other:
\&
\& Left      Right      Description and pseudocode                               
\& ===============================================================
\& Object    Any        invoke ~~ overloading on Object,
\&                      or fall back to...
\&
\& Any       Num        numeric equality                                  
\&                 like: Any == Num
\& Num       nummy[4]    numeric equality
\&                 like: Num == nummy
\& undef     Any        check whether undefined
\&                 like: !defined(Any)
\& Any       Any        string equality                                   
\&                 like: Any eq Any
.Ve
.PP
Notes:
.IP "1. Empty hashes or arrays match." 4
.IX Item "1. Empty hashes or arrays match."
.PD 0
.IP "2. That is, each element smartmatches the element of the same index in the other array.[3]" 4
.IX Item "2. That is, each element smartmatches the element of the same index in the other array.[3]"
.IP "3. If a circular reference is found, fall back to referential equality." 4
.IX Item "3. If a circular reference is found, fall back to referential equality."
.IP "4. Either an actual number, or a string that looks like one." 4
.IX Item "4. Either an actual number, or a string that looks like one."
.PD
.PP
The smartmatch implicitly dereferences any non-blessed hash or array
reference, so the \f(CW\*(C`\f(CIHASH\f(CW\*(C'\fR and \f(CW\*(C`\f(CIARRAY\f(CW\*(C'\fR entries apply in those cases.
For blessed references, the \f(CW\*(C`\f(CIObject\f(CW\*(C'\fR entries apply.  Smartmatches
involving hashes only consider hash keys, never hash values.
.PP
The \*(L"like\*(R" code entry is not always an exact rendition.  For example, the
smartmatch operator short-circuits whenever possible, but \f(CW\*(C`grep\*(C'\fR does
not.  Also, \f(CW\*(C`grep\*(C'\fR in scalar context returns the number of matches, but
\&\f(CW\*(C`~~\*(C'\fR returns only true or false.
.PP
Unlike most operators, the smartmatch operator knows to treat \f(CW\*(C`undef\*(C'\fR
specially:
.PP
.Vb 3
\&    use v5.10.1;
\&    @array = (1, 2, 3, undef, 4, 5);
\&    say "some elements undefined" if undef ~~ @array;
.Ve
.PP
Each operand is considered in a modified scalar context, the modification
being that array and hash variables are passed by reference to the
operator, which implicitly dereferences them.  Both elements
of each pair are the same:
.PP
.Vb 1
\&    use v5.10.1;
\&
\&    my %hash = (red    => 1, blue   => 2, green  => 3,
\&                orange => 4, yellow => 5, purple => 6,
\&                black  => 7, grey   => 8, white  => 9);
\&
\&    my @array = qw(red blue green);
\&
\&    say "some array elements in hash keys" if  @array ~~  %hash;
\&    say "some array elements in hash keys" if \e@array ~~ \e%hash;
\&
\&    say "red in array" if "red" ~~  @array;
\&    say "red in array" if "red" ~~ \e@array;
\&
\&    say "some keys end in e" if /e$/ ~~  %hash;
\&    say "some keys end in e" if /e$/ ~~ \e%hash;
.Ve
.PP
Two arrays smartmatch if each element in the first array smartmatches
(that is, is \*(L"in\*(R") the corresponding element in the second array,
recursively.
.PP
.Vb 6
\&    use v5.10.1;
\&    my @little = qw(red blue green);
\&    my @bigger = ("red", "blue", [ "orange", "green" ] );
\&    if (@little ~~ @bigger) {  # true!
\&        say "little is contained in bigger";
\&    }
.Ve
.PP
Because the smartmatch operator recurses on nested arrays, this
will still report that \*(L"red\*(R" is in the array.
.PP
.Vb 4
\&    use v5.10.1;
\&    my @array = qw(red blue green);
\&    my $nested_array = [[[[[[[ @array ]]]]]]];
\&    say "red in array" if "red" ~~ $nested_array;
.Ve
.PP
If two arrays smartmatch each other, then they are deep
copies of each others' values, as this example reports:
.PP
.Vb 3
\&    use v5.12.0;
\&    my @a = (0, 1, 2, [3, [4, 5], 6], 7); 
\&    my @b = (0, 1, 2, [3, [4, 5], 6], 7); 
\&
\&    if (@a ~~ @b && @b ~~ @a) {
\&        say "a and b are deep copies of each other";
\&    } 
\&    elsif (@a ~~ @b) {
\&        say "a smartmatches in b";
\&    } 
\&    elsif (@b ~~ @a) {
\&        say "b smartmatches in a";
\&    } 
\&    else {
\&        say "a and b don\*(Aqt smartmatch each other at all";
\&    }
.Ve
.PP
If you were to set \f(CW\*(C`$b[3] = 4\*(C'\fR, then instead of reporting that \*(L"a and b
are deep copies of each other\*(R", it now reports that \*(L"b smartmatches in a\*(R".
That because the corresponding position in \f(CW@a\fR contains an array that
(eventually) has a 4 in it.
.PP
Smartmatching one hash against another reports whether both contain the
same keys, no more and no less. This could be used to see whether two
records have the same field names, without caring what values those fields
might have.  For example:
.PP
.Vb 3
\&    use v5.10.1;
\&    sub make_dogtag {
\&        state $REQUIRED_FIELDS = { name=>1, rank=>1, serial_num=>1 };
\&
\&        my ($class, $init_fields) = @_;
\&
\&        die "Must supply (only) name, rank, and serial number"
\&            unless $init_fields ~~ $REQUIRED_FIELDS;
\&
\&        ...
\&    }
.Ve
.PP
or, if other non-required fields are allowed, use \s-1ARRAY\s0 ~~ \s-1HASH:\s0
.PP
.Vb 3
\&    use v5.10.1;
\&    sub make_dogtag {
\&        state $REQUIRED_FIELDS = { name=>1, rank=>1, serial_num=>1 };
\&
\&        my ($class, $init_fields) = @_;
\&
\&        die "Must supply (at least) name, rank, and serial number"
\&            unless [keys %{$init_fields}] ~~ $REQUIRED_FIELDS;
\&
\&        ...
\&    }
.Ve
.PP
The smartmatch operator is most often used as the implicit operator of a
\&\f(CW\*(C`when\*(C'\fR clause.  See the section on \*(L"Switch Statements\*(R" in perlsyn.
.PP
\fISmartmatching of Objects\fR
.IX Subsection "Smartmatching of Objects"
.PP
To avoid relying on an object's underlying representation, if the
smartmatch's right operand is an object that doesn't overload \f(CW\*(C`~~\*(C'\fR,
it raises the exception "\f(CW\*(C`Smartmatching a non\-overloaded object
breaks encapsulation\*(C'\fR\*(L". That's because one has no business digging
around to see whether something is \*(R"in" an object. These are all
illegal on objects without a \f(CW\*(C`~~\*(C'\fR overload:
.PP
.Vb 3
\&    %hash ~~ $object
\&       42 ~~ $object
\&   "fred" ~~ $object
.Ve
.PP
However, you can change the way an object is smartmatched by overloading
the \f(CW\*(C`~~\*(C'\fR operator. This is allowed to extend the usual smartmatch semantics.
For objects that do have an \f(CW\*(C`~~\*(C'\fR overload, see overload.
.PP
Using an object as the left operand is allowed, although not very useful.
Smartmatching rules take precedence over overloading, so even if the
object in the left operand has smartmatch overloading, this will be
ignored.  A left operand that is a non-overloaded object falls back on a
string or numeric comparison of whatever the \f(CW\*(C`ref\*(C'\fR operator returns.  That
means that
.PP
.Vb 1
\&    $object ~~ X
.Ve
.PP
does \fInot\fR invoke the overload method with \f(CW\*(C`\f(CIX\f(CW\*(C'\fR as an argument.
Instead the above table is consulted as normal, and based on the type of
\&\f(CW\*(C`\f(CIX\f(CW\*(C'\fR, overloading may or may not be invoked.  For simple strings or
numbers, in becomes equivalent to this:
.PP
.Vb 2
\&    $object ~~ $number          ref($object) == $number
\&    $object ~~ $string          ref($object) eq $string
.Ve
.PP
For example, this reports that the handle smells IOish
(but please don't really do this!):
.PP
.Vb 5
\&    use IO::Handle;
\&    my $fh = IO::Handle\->new();
\&    if ($fh ~~ /\ebIO\eb/) {
\&        say "handle smells IOish";
\&    }
.Ve
.PP
That's because it treats \f(CW$fh\fR as a string like
\&\f(CW"IO::Handle=GLOB(0x8039e0)"\fR, then pattern matches against that.
.SS "Bitwise And"
.IX Xref "operator, bitwise, and bitwise and &"
.IX Subsection "Bitwise And"
Binary \*(L"&\*(R" returns its operands ANDed together bit by bit.
(See also \*(L"Integer Arithmetic\*(R" and \*(L"Bitwise String Operators\*(R".)
.PP
Note that \*(L"&\*(R" has lower priority than relational operators, so for example
the parentheses are essential in a test like
.PP
.Vb 1
\&    print "Even\en" if ($x & 1) == 0;
.Ve
.SS "Bitwise Or and Exclusive Or"
.IX Xref "operator, bitwise, or bitwise or | operator, bitwise, xor bitwise xor ^"
.IX Subsection "Bitwise Or and Exclusive Or"
Binary \*(L"|\*(R" returns its operands ORed together bit by bit.
(See also \*(L"Integer Arithmetic\*(R" and \*(L"Bitwise String Operators\*(R".)
.PP
Binary \*(L"^\*(R" returns its operands XORed together bit by bit.
(See also \*(L"Integer Arithmetic\*(R" and \*(L"Bitwise String Operators\*(R".)
.PP
Note that \*(L"|\*(R" and \*(L"^\*(R" have lower priority than relational operators, so
for example the brackets are essential in a test like
.PP
.Vb 1
\&    print "false\en" if (8 | 2) != 10;
.Ve
.SS "C\-style Logical And"
.IX Xref "&& logical and operator, logical, and"
.IX Subsection "C-style Logical And"
Binary \*(L"&&\*(R" performs a short-circuit logical \s-1AND\s0 operation.  That is,
if the left operand is false, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it
is evaluated.
.SS "C\-style Logical Or"
.IX Xref "|| operator, logical, or"
.IX Subsection "C-style Logical Or"
Binary \*(L"||\*(R" performs a short-circuit logical \s-1OR\s0 operation.  That is,
if the left operand is true, the right operand is not even evaluated.
Scalar or list context propagates down to the right operand if it
is evaluated.
.SS "Logical Defined-Or"
.IX Xref "operator, logical, defined-or"
.IX Subsection "Logical Defined-Or"
Although it has no direct equivalent in C, Perl's \f(CW\*(C`//\*(C'\fR operator is related
to its C\-style or.  In fact, it's exactly the same as \f(CW\*(C`||\*(C'\fR, except that it
tests the left hand side's definedness instead of its truth.  Thus,
\&\f(CW\*(C`EXPR1 // EXPR2\*(C'\fR returns the value of \f(CW\*(C`EXPR1\*(C'\fR if it's defined,
otherwise, the value of \f(CW\*(C`EXPR2\*(C'\fR is returned. (\f(CW\*(C`EXPR1\*(C'\fR is evaluated
in scalar context, \f(CW\*(C`EXPR2\*(C'\fR in the context of \f(CW\*(C`//\*(C'\fR itself). Usually,
this is the same result as \f(CW\*(C`defined(EXPR1) ? EXPR1 : EXPR2\*(C'\fR (except that
the ternary-operator form can be used as a lvalue, while \f(CW\*(C`EXPR1 // EXPR2\*(C'\fR
cannot). This is very useful for
providing default values for variables.  If you actually want to test if
at least one of \f(CW$a\fR and \f(CW$b\fR is defined, use \f(CW\*(C`defined($a // $b)\*(C'\fR.
.PP
The \f(CW\*(C`||\*(C'\fR, \f(CW\*(C`//\*(C'\fR and \f(CW\*(C`&&\*(C'\fR operators return the last value evaluated
(unlike C's \f(CW\*(C`||\*(C'\fR and \f(CW\*(C`&&\*(C'\fR, which return 0 or 1). Thus, a reasonably
portable way to find out the home directory might be:
.PP
.Vb 4
\&    $home =  $ENV{HOME}
\&          // $ENV{LOGDIR}
\&          // (getpwuid($<))[7]
\&          // die "You\*(Aqre homeless!\en";
.Ve
.PP
In particular, this means that you shouldn't use this
for selecting between two aggregates for assignment:
.PP
.Vb 3
\&    @a = @b || @c;              # this is wrong
\&    @a = scalar(@b) || @c;      # really meant this
\&    @a = @b ? @b : @c;          # this works fine, though
.Ve
.PP
As alternatives to \f(CW\*(C`&&\*(C'\fR and \f(CW\*(C`||\*(C'\fR when used for
control flow, Perl provides the \f(CW\*(C`and\*(C'\fR and \f(CW\*(C`or\*(C'\fR operators (see below).
The short-circuit behavior is identical.  The precedence of \*(L"and\*(R"
and \*(L"or\*(R" is much lower, however, so that you can safely use them after a
list operator without the need for parentheses:
.PP
.Vb 2
\&    unlink "alpha", "beta", "gamma"
\&            or gripe(), next LINE;
.Ve
.PP
With the C\-style operators that would have been written like this:
.PP
.Vb 2
\&    unlink("alpha", "beta", "gamma")
\&            || (gripe(), next LINE);
.Ve
.PP
It would be even more readable to write that this way:
.PP
.Vb 4
\&    unless(unlink("alpha", "beta", "gamma")) {
\&        gripe();
\&        next LINE;
\&    }
.Ve
.PP
Using \*(L"or\*(R" for assignment is unlikely to do what you want; see below.
.SS "Range Operators"
.IX Xref "operator, range range .. ..."
.IX Subsection "Range Operators"
Binary \*(L"..\*(R" is the range operator, which is really two different
operators depending on the context.  In list context, it returns a
list of values counting (up by ones) from the left value to the right
value.  If the left value is greater than the right value then it
returns the empty list.  The range operator is useful for writing
\&\f(CW\*(C`foreach (1..10)\*(C'\fR loops and for doing slice operations on arrays. In
the current implementation, no temporary array is created when the
range operator is used as the expression in \f(CW\*(C`foreach\*(C'\fR loops, but older
versions of Perl might burn a lot of memory when you write something
like this:
.PP
.Vb 3
\&    for (1 .. 1_000_000) {
\&        # code
\&    }
.Ve
.PP
The range operator also works on strings, using the magical
auto-increment, see below.
.PP
In scalar context, \*(L"..\*(R" returns a boolean value.  The operator is
bistable, like a flip-flop, and emulates the line-range (comma)
operator of \fBsed\fR, \fBawk\fR, and various editors. Each \*(L"..\*(R" operator
maintains its own boolean state, even across calls to a subroutine
that contains it. It is false as long as its left operand is false.
Once the left operand is true, the range operator stays true until the
right operand is true, \fI\s-1AFTER\s0\fR which the range operator becomes false
again.  It doesn't become false till the next time the range operator
is evaluated.  It can test the right operand and become false on the
same evaluation it became true (as in \fBawk\fR), but it still returns
true once. If you don't want it to test the right operand until the
next evaluation, as in \fBsed\fR, just use three dots (\*(L"...\*(R") instead of
two.  In all other regards, \*(L"...\*(R" behaves just like \*(L"..\*(R" does.
.PP
The right operand is not evaluated while the operator is in the
\&\*(L"false\*(R" state, and the left operand is not evaluated while the
operator is in the \*(L"true\*(R" state.  The precedence is a little lower
than || and &&.  The value returned is either the empty string for
false, or a sequence number (beginning with 1) for true.  The sequence
number is reset for each range encountered.  The final sequence number
in a range has the string \*(L"E0\*(R" appended to it, which doesn't affect
its numeric value, but gives you something to search for if you want
to exclude the endpoint.  You can exclude the beginning point by
waiting for the sequence number to be greater than 1.
.PP
If either operand of scalar \*(L"..\*(R" is a constant expression,
that operand is considered true if it is equal (\f(CW\*(C`==\*(C'\fR) to the current
input line number (the \f(CW$.\fR variable).
.PP
To be pedantic, the comparison is actually \f(CW\*(C`int(EXPR) == int(EXPR)\*(C'\fR,
but that is only an issue if you use a floating point expression; when
implicitly using \f(CW$.\fR as described in the previous paragraph, the
comparison is \f(CW\*(C`int(EXPR) == int($.)\*(C'\fR which is only an issue when \f(CW$.\fR
is set to a floating point value and you are not reading from a file.
Furthermore, \f(CW"span" .. "spat"\fR or \f(CW\*(C`2.18 .. 3.14\*(C'\fR will not do what
you want in scalar context because each of the operands are evaluated
using their integer representation.
.PP
Examples:
.PP
As a scalar operator:
.PP
.Vb 2
\&    if (101 .. 200) { print; } # print 2nd hundred lines, short for
\&                               #  if ($. == 101 .. $. == 200) { print; }
\&
\&    next LINE if (1 .. /^$/);  # skip header lines, short for
\&                               #   next LINE if ($. == 1 .. /^$/);
\&                               # (typically in a loop labeled LINE)
\&
\&    s/^/> / if (/^$/ .. eof());  # quote body
\&
\&    # parse mail messages
\&    while (<>) {
\&        $in_header =   1  .. /^$/;
\&        $in_body   = /^$/ .. eof;
\&        if ($in_header) {
\&            # do something
\&        } else { # in body
\&            # do something else
\&        }
\&    } continue {
\&        close ARGV if eof;             # reset $. each file
\&    }
.Ve
.PP
Here's a simple example to illustrate the difference between
the two range operators:
.PP
.Vb 4
\&    @lines = ("   \- Foo",
\&              "01 \- Bar",
\&              "1  \- Baz",
\&              "   \- Quux");
\&
\&    foreach (@lines) {
\&        if (/0/ .. /1/) {
\&            print "$_\en";
\&        }
\&    }
.Ve
.PP
This program will print only the line containing \*(L"Bar\*(R". If
the range operator is changed to \f(CW\*(C`...\*(C'\fR, it will also print the
\&\*(L"Baz\*(R" line.
.PP
And now some examples as a list operator:
.PP
.Vb 3
\&    for (101 .. 200) { print }      # print $_ 100 times
\&    @foo = @foo[0 .. $#foo];        # an expensive no\-op
\&    @foo = @foo[$#foo\-4 .. $#foo];  # slice last 5 items
.Ve
.PP
The range operator (in list context) makes use of the magical
auto-increment algorithm if the operands are strings.  You
can say
.PP
.Vb 1
\&    @alphabet = ("A" .. "Z");
.Ve
.PP
to get all normal letters of the English alphabet, or
.PP
.Vb 1
\&    $hexdigit = (0 .. 9, "a" .. "f")[$num & 15];
.Ve
.PP
to get a hexadecimal digit, or
.PP
.Vb 2
\&    @z2 = ("01" .. "31");
\&    print $z2[$mday];
.Ve
.PP
to get dates with leading zeros.
.PP
If the final value specified is not in the sequence that the magical
increment would produce, the sequence goes until the next value would
be longer than the final value specified.
.PP
If the initial value specified isn't part of a magical increment
sequence (that is, a non-empty string matching \f(CW\*(C`/^[a\-zA\-Z]*[0\-9]*\ez/\*(C'\fR),
only the initial value will be returned.  So the following will only
return an alpha:
.PP
.Vb 2
\&    use charnames "greek";
\&    my @greek_small =  ("\eN{alpha}" .. "\eN{omega}");
.Ve
.PP
To get the 25 traditional lowercase Greek letters, including both sigmas,
you could use this instead:
.PP
.Vb 5
\&    use charnames "greek";
\&    my @greek_small =  map { chr } ( ord("\eN{alpha}") 
\&                                        ..
\&                                     ord("\eN{omega}") 
\&                                   );
.Ve
.PP
However, because there are \fImany\fR other lowercase Greek characters than
just those, to match lowercase Greek characters in a regular expression,
you would use the pattern \f(CW\*(C`/(?:(?=\ep{Greek})\ep{Lower})+/\*(C'\fR.
.PP
Because each operand is evaluated in integer form, \f(CW\*(C`2.18 .. 3.14\*(C'\fR will
return two elements in list context.
.PP
.Vb 1
\&    @list = (2.18 .. 3.14); # same as @list = (2 .. 3);
.Ve
.SS "Conditional Operator"
.IX Xref "operator, conditional operator, ternary ternary ?:"
.IX Subsection "Conditional Operator"
Ternary \*(L"?:\*(R" is the conditional operator, just as in C.  It works much
like an if-then-else.  If the argument before the ? is true, the
argument before the : is returned, otherwise the argument after the :
is returned.  For example:
.PP
.Vb 2
\&    printf "I have %d dog%s.\en", $n,
\&            ($n == 1) ? "" : "s";
.Ve
.PP
Scalar or list context propagates downward into the 2nd
or 3rd argument, whichever is selected.
.PP
.Vb 3
\&    $a = $ok ? $b : $c;  # get a scalar
\&    @a = $ok ? @b : @c;  # get an array
\&    $a = $ok ? @b : @c;  # oops, that\*(Aqs just a count!
.Ve
.PP
The operator may be assigned to if both the 2nd and 3rd arguments are
legal lvalues (meaning that you can assign to them):
.PP
.Vb 1
\&    ($a_or_b ? $a : $b) = $c;
.Ve
.PP
Because this operator produces an assignable result, using assignments
without parentheses will get you in trouble.  For example, this:
.PP
.Vb 1
\&    $a % 2 ? $a += 10 : $a += 2
.Ve
.PP
Really means this:
.PP
.Vb 1
\&    (($a % 2) ? ($a += 10) : $a) += 2
.Ve
.PP
Rather than this:
.PP
.Vb 1
\&    ($a % 2) ? ($a += 10) : ($a += 2)
.Ve
.PP
That should probably be written more simply as:
.PP
.Vb 1
\&    $a += ($a % 2) ? 10 : 2;
.Ve
.SS "Assignment Operators"
.IX Xref "assignment operator, assignment = **= += *= &= <<= &&= -= = |= >>= ||= = .= %= ^= x="
.IX Subsection "Assignment Operators"
\&\*(L"=\*(R" is the ordinary assignment operator.
.PP
Assignment operators work as in C.  That is,
.PP
.Vb 1
\&    $a += 2;
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&    $a = $a + 2;
.Ve
.PP
although without duplicating any side effects that dereferencing the lvalue
might trigger, such as from \fItie()\fR.  Other assignment operators work similarly.
The following are recognized:
.PP
.Vb 4
\&    **=    +=    *=    &=    <<=    &&=
\&           \-=    /=    |=    >>=    ||=
\&           .=    %=    ^=           //=
\&                 x=
.Ve
.PP
Although these are grouped by family, they all have the precedence
of assignment.
.PP
Unlike in C, the scalar assignment operator produces a valid lvalue.
Modifying an assignment is equivalent to doing the assignment and
then modifying the variable that was assigned to.  This is useful
for modifying a copy of something, like this:
.PP
.Vb 1
\&    ($tmp = $global) =~ tr/13579/24680/;
.Ve
.PP
Although as of 5.14, that can be also be accomplished this way:
.PP
.Vb 2
\&    use v5.14;
\&    $tmp = ($global =~  tr/13579/24680/r);
.Ve
.PP
Likewise,
.PP
.Vb 1
\&    ($a += 2) *= 3;
.Ve
.PP
is equivalent to
.PP
.Vb 2
\&    $a += 2;
\&    $a *= 3;
.Ve
.PP
Similarly, a list assignment in list context produces the list of
lvalues assigned to, and a list assignment in scalar context returns
the number of elements produced by the expression on the right hand
side of the assignment.
.SS "Comma Operator"
.IX Xref "comma operator, comma ,"
.IX Subsection "Comma Operator"
Binary \*(L",\*(R" is the comma operator.  In scalar context it evaluates
its left argument, throws that value away, then evaluates its right
argument and returns that value.  This is just like C's comma operator.
.PP
In list context, it's just the list argument separator, and inserts
both its arguments into the list.  These arguments are also evaluated
from left to right.
.PP
The \f(CW\*(C`=>\*(C'\fR operator is a synonym for the comma except that it causes a
word on its left to be interpreted as a string if it begins with a letter
or underscore and is composed only of letters, digits and underscores.
This includes operands that might otherwise be interpreted as operators,
constants, single number v\-strings or function calls. If in doubt about
this behavior, the left operand can be quoted explicitly.
.PP
Otherwise, the \f(CW\*(C`=>\*(C'\fR operator behaves exactly as the comma operator
or list argument separator, according to context.
.PP
For example:
.PP
.Vb 1
\&    use constant FOO => "something";
\&
\&    my %h = ( FOO => 23 );
.Ve
.PP
is equivalent to:
.PP
.Vb 1
\&    my %h = ("FOO", 23);
.Ve
.PP
It is \fI\s-1NOT\s0\fR:
.PP
.Vb 1
\&    my %h = ("something", 23);
.Ve
.PP
The \f(CW\*(C`=>\*(C'\fR operator is helpful in documenting the correspondence
between keys and values in hashes, and other paired elements in lists.
.PP
.Vb 2
\&    %hash = ( $key => $value );
\&    login( $username => $password );
.Ve
.PP
The special quoting behavior ignores precedence, and hence may apply to
\&\fIpart\fR of the left operand:
.PP
.Vb 1
\&    print time.shift => "bbb";
.Ve
.PP
That example prints something like \*(L"1314363215shiftbbb\*(R", because the
\&\f(CW\*(C`=>\*(C'\fR implicitly quotes the \f(CW\*(C`shift\*(C'\fR immediately on its left, ignoring
the fact that \f(CW\*(C`time.shift\*(C'\fR is the entire left operand.
.SS "List Operators (Rightward)"
.IX Xref "operator, list, rightward list operator"
.IX Subsection "List Operators (Rightward)"
On the right side of a list operator, the comma has very low precedence,
such that it controls all comma-separated expressions found there.
The only operators with lower precedence are the logical operators
\&\*(L"and\*(R", \*(L"or\*(R", and \*(L"not\*(R", which may be used to evaluate calls to list
operators without the need for parentheses:
.PP
.Vb 1
\&    open HANDLE, "< :utf8", "filename" or die "Can\*(Aqt open: $!\en";
.Ve
.PP
However, some people find that code harder to read than writing
it with parentheses:
.PP
.Vb 1
\&    open(HANDLE, "< :utf8", "filename") or die "Can\*(Aqt open: $!\en";
.Ve
.PP
in which case you might as well just use the more customary \*(L"||\*(R" operator:
.PP
.Vb 1
\&    open(HANDLE, "< :utf8", "filename") || die "Can\*(Aqt open: $!\en";
.Ve
.PP
See also discussion of list operators in Terms and List Operators (Leftward).
.SS "Logical Not"
.IX Xref "operator, logical, not not"
.IX Subsection "Logical Not"
Unary \*(L"not\*(R" returns the logical negation of the expression to its right.
It's the equivalent of \*(L"!\*(R" except for the very low precedence.
.SS "Logical And"
.IX Xref "operator, logical, and and"
.IX Subsection "Logical And"
Binary \*(L"and\*(R" returns the logical conjunction of the two surrounding
expressions.  It's equivalent to \f(CW\*(C`&&\*(C'\fR except for the very low
precedence.  This means that it short-circuits: the right
expression is evaluated only if the left expression is true.
.SS "Logical or and Exclusive Or"
.IX Xref "operator, logical, or operator, logical, xor operator, logical, exclusive or or xor"
.IX Subsection "Logical or and Exclusive Or"
Binary \*(L"or\*(R" returns the logical disjunction of the two surrounding
expressions.  It's equivalent to \f(CW\*(C`||\*(C'\fR except for the very low precedence.
This makes it useful for control flow:
.PP
.Vb 1
\&    print FH $data              or die "Can\*(Aqt write to FH: $!";
.Ve
.PP
This means that it short-circuits: the right expression is evaluated
only if the left expression is false.  Due to its precedence, you must
be careful to avoid using it as replacement for the \f(CW\*(C`||\*(C'\fR operator.
It usually works out better for flow control than in assignments:
.PP
.Vb 3
\&    $a = $b or $c;              # bug: this is wrong
\&    ($a = $b) or $c;            # really means this
\&    $a = $b || $c;              # better written this way
.Ve
.PP
However, when it's a list-context assignment and you're trying to use
\&\f(CW\*(C`||\*(C'\fR for control flow, you probably need \*(L"or\*(R" so that the assignment
takes higher precedence.
.PP
.Vb 2
\&    @info = stat($file) || die;     # oops, scalar sense of stat!
\&    @info = stat($file) or die;     # better, now @info gets its due
.Ve
.PP
Then again, you could always use parentheses.
.PP
Binary \f(CW\*(C`xor\*(C'\fR returns the exclusive-OR of the two surrounding expressions.
It cannot short-circuit (of course).
.PP
There is no low precedence operator for defined-OR.
.SS "C Operators Missing From Perl"
.IX Xref "operator, missing from perl & * typecasting (TYPE)"
.IX Subsection "C Operators Missing From Perl"
Here is what C has that Perl doesn't:
.IP "unary &" 8
.IX Item "unary &"
Address-of operator.  (But see the \*(L"\e\*(R" operator for taking a reference.)
.IP "unary *" 8
.IX Item "unary *"
Dereference-address operator. (Perl's prefix dereferencing
operators are typed: $, @, %, and &.)
.IP "(\s-1TYPE\s0)" 8
.IX Item "(TYPE)"
Type-casting operator.
.SS "Quote and Quote-like Operators"
.IX Xref "operator, quote operator, quote-like q qq qx qw m qr s tr ' '' "" """" ` `` << escape sequence escape"
.IX Subsection "Quote and Quote-like Operators"
While we usually think of quotes as literal values, in Perl they
function as operators, providing various kinds of interpolating and
pattern matching capabilities.  Perl provides customary quote characters
for these behaviors, but also provides a way for you to choose your
quote character for any of them.  In the following table, a \f(CW\*(C`{}\*(C'\fR represents
any pair of delimiters you choose.
.PP
.Vb 11
\&    Customary  Generic        Meaning        Interpolates
\&        \*(Aq\*(Aq       q{}          Literal             no
\&        ""      qq{}          Literal             yes
\&        \`\`      qx{}          Command             yes*
\&                qw{}         Word list            no
\&        //       m{}       Pattern match          yes*
\&                qr{}          Pattern             yes*
\&                 s{}{}      Substitution          yes*
\&                tr{}{}    Transliteration         no (but see below)
\&                 y{}{}    Transliteration         no (but see below)
\&        <<EOF                 here\-doc            yes*
\&
\&        * unless the delimiter is \*(Aq\*(Aq.
.Ve
.PP
Non-bracketing delimiters use the same character fore and aft, but the four
sorts of \s-1ASCII\s0 brackets (round, angle, square, curly) all nest, which means
that
.PP
.Vb 1
\&    q{foo{bar}baz}
.Ve
.PP
is the same as
.PP
.Vb 1
\&    \*(Aqfoo{bar}baz\*(Aq
.Ve
.PP
Note, however, that this does not always work for quoting Perl code:
.PP
.Vb 1
\&    $s = q{ if($a eq "}") ... }; # WRONG
.Ve
.PP
is a syntax error. The \f(CW\*(C`Text::Balanced\*(C'\fR module (standard as of v5.8,
and from \s-1CPAN\s0 before then) is able to do this properly.
.PP
There can be whitespace between the operator and the quoting
characters, except when \f(CW\*(C`#\*(C'\fR is being used as the quoting character.
\&\f(CW\*(C`q#foo#\*(C'\fR is parsed as the string \f(CW\*(C`foo\*(C'\fR, while \f(CW\*(C`q #foo#\*(C'\fR is the
operator \f(CW\*(C`q\*(C'\fR followed by a comment.  Its argument will be taken
from the next line.  This allows you to write:
.PP
.Vb 2
\&    s {foo}  # Replace foo
\&      {bar}  # with bar.
.Ve
.PP
The following escape sequences are available in constructs that interpolate,
and in transliterations:
.IX Xref "\\t \\n \\r \\f \\b \\a \\e \\x \\0 \\c \\N \\N{} \\o{}"
.PP
.Vb 10
\&    Sequence     Note  Description
\&    \et                  tab               (HT, TAB)
\&    \en                  newline           (NL)
\&    \er                  return            (CR)
\&    \ef                  form feed         (FF)
\&    \eb                  backspace         (BS)
\&    \ea                  alarm (bell)      (BEL)
\&    \ee                  escape            (ESC)
\&    \ex{263A}     [1,8]  hex char          (example: SMILEY)
\&    \ex1b         [2,8]  restricted range hex char (example: ESC)
\&    \eN{name}     [3]    named Unicode character or character sequence
\&    \eN{U+263D}   [4,8]  Unicode character (example: FIRST QUARTER MOON)
\&    \ec[          [5]    control char      (example: chr(27))
\&    \eo{23072}    [6,8]  octal char        (example: SMILEY)
\&    \e033         [7,8]  restricted range octal char  (example: ESC)
.Ve
.IP "[1]" 4
.IX Item "[1]"
The result is the character specified by the hexadecimal number between
the braces.  See \*(L"[8]\*(R" below for details on which character.
.Sp
Only hexadecimal digits are valid between the braces. If an invalid
character is encountered, a warning will be issued and the invalid
character and all subsequent characters (valid or invalid) within the
braces will be discarded.
.Sp
If there are no valid digits between the braces, the generated character is
the \s-1NULL\s0 character (\f(CW\*(C`\ex{00}\*(C'\fR).  However, an explicit empty brace (\f(CW\*(C`\ex{}\*(C'\fR)
will not cause a warning (currently).
.IP "[2]" 4
.IX Item "[2]"
The result is the character specified by the hexadecimal number in the range
0x00 to 0xFF.  See \*(L"[8]\*(R" below for details on which character.
.Sp
Only hexadecimal digits are valid following \f(CW\*(C`\ex\*(C'\fR.  When \f(CW\*(C`\ex\*(C'\fR is followed
by fewer than two valid digits, any valid digits will be zero-padded.  This
means that \f(CW\*(C`\ex7\*(C'\fR will be interpreted as \f(CW\*(C`\ex07\*(C'\fR, and a lone <\ex> will be
interpreted as \f(CW\*(C`\ex00\*(C'\fR.  Except at the end of a string, having fewer than
two valid digits will result in a warning.  Note that although the warning
says the illegal character is ignored, it is only ignored as part of the
escape and will still be used as the subsequent character in the string.
For example:
.Sp
.Vb 5
\&  Original    Result    Warns?
\&  "\ex7"       "\ex07"    no
\&  "\ex"        "\ex00"    no
\&  "\ex7q"      "\ex07q"   yes
\&  "\exq"       "\ex00q"   yes
.Ve
.IP "[3]" 4
.IX Item "[3]"
The result is the Unicode character or character sequence given by \fIname\fR.
See charnames.
.IP "[4]" 4
.IX Item "[4]"
\&\f(CW\*(C`\eN{U+\f(CIhexadecimal number\f(CW}\*(C'\fR means the Unicode character whose Unicode code
point is \fIhexadecimal number\fR.
.IP "[5]" 4
.IX Item "[5]"
The character following \f(CW\*(C`\ec\*(C'\fR is mapped to some other character as shown in the
table:
.Sp
.Vb 10
\& Sequence   Value
\&   \ec@      chr(0)
\&   \ecA      chr(1)
\&   \eca      chr(1)
\&   \ecB      chr(2)
\&   \ecb      chr(2)
\&   ...
\&   \ecZ      chr(26)
\&   \ecz      chr(26)
\&   \ec[      chr(27)
\&   \ec]      chr(29)
\&   \ec^      chr(30)
\&   \ec?      chr(127)
.Ve
.Sp
In other words, it's the character whose code point has had 64 xor'd with
its uppercase.  \f(CW\*(C`\ec?\*(C'\fR is \s-1DELETE\s0 because \f(CW\*(C`ord("?") ^ 64\*(C'\fR is 127, and
\&\f(CW\*(C`\ec@\*(C'\fR is \s-1NULL\s0 because the ord of \*(L"@\*(R" is 64, so xor'ing 64 itself produces 0.
.Sp
Also, \f(CW\*(C`\ec\e\f(CIX\f(CW\*(C'\fR yields \f(CW\*(C` chr(28) . "\f(CIX\f(CW"\*(C'\fR for any \fIX\fR, but cannot come at the
end of a string, because the backslash would be parsed as escaping the end
quote.
.Sp
On \s-1ASCII\s0 platforms, the resulting characters from the list above are the
complete set of \s-1ASCII\s0 controls.  This isn't the case on \s-1EBCDIC\s0 platforms; see
\&\*(L"\s-1OPERATOR DIFFERENCES\*(R"\s0 in perlebcdic for the complete list of what these
sequences mean on both \s-1ASCII\s0 and \s-1EBCDIC\s0 platforms.
.Sp
Use of any other character following the \*(L"c\*(R" besides those listed above is
discouraged, and some are deprecated with the intention of removing
those in a later Perl version.  What happens for any of these
other characters currently though, is that the value is derived by xor'ing
with the seventh bit, which is 64.
.Sp
To get platform independent controls, you can use \f(CW\*(C`\eN{...}\*(C'\fR.
.IP "[6]" 4
.IX Item "[6]"
The result is the character specified by the octal number between the braces.
See \*(L"[8]\*(R" below for details on which character.
.Sp
If a character that isn't an octal digit is encountered, a warning is raised,
and the value is based on the octal digits before it, discarding it and all
following characters up to the closing brace.  It is a fatal error if there are
no octal digits at all.
.IP "[7]" 4
.IX Item "[7]"
The result is the character specified by the three-digit octal number in the
range 000 to 777 (but best to not use above 077, see next paragraph).  See
\&\*(L"[8]\*(R" below for details on which character.
.Sp
Some contexts allow 2 or even 1 digit, but any usage without exactly
three digits, the first being a zero, may give unintended results.  (For
example, in a regular expression it may be confused with a backreference;
see \*(L"Octal escapes\*(R" in perlrebackslash.)  Starting in Perl 5.14, you may
use \f(CW\*(C`\eo{}\*(C'\fR instead, which avoids all these problems.  Otherwise, it is best to
use this construct only for ordinals \f(CW\*(C`\e077\*(C'\fR and below, remembering to pad to
the left with zeros to make three digits.  For larger ordinals, either use
\&\f(CW\*(C`\eo{}\*(C'\fR, or convert to something else, such as to hex and use \f(CW\*(C`\ex{}\*(C'\fR
instead.
.Sp
Having fewer than 3 digits may lead to a misleading warning message that says
that what follows is ignored.  For example, \f(CW"\e128"\fR in the \s-1ASCII\s0 character set
is equivalent to the two characters \f(CW"\en8"\fR, but the warning \f(CW\*(C`Illegal octal
digit \*(Aq8\*(Aq ignored\*(C'\fR will be thrown.  If \f(CW"\en8"\fR is what you want, you can
avoid this warning by padding your octal number with \f(CW0\fR's: \f(CW"\e0128"\fR.
.IP "[8]" 4
.IX Item "[8]"
Several constructs above specify a character by a number.  That number
gives the character's position in the character set encoding (indexed from 0).
This is called synonymously its ordinal, code position, or code point.  Perl
works on platforms that have a native encoding currently of either ASCII/Latin1
or \s-1EBCDIC,\s0 each of which allow specification of 256 characters.  In general, if
the number is 255 (0xFF, 0377) or below, Perl interprets this in the platform's
native encoding.  If the number is 256 (0x100, 0400) or above, Perl interprets
it as a Unicode code point and the result is the corresponding Unicode
character.  For example \f(CW\*(C`\ex{50}\*(C'\fR and \f(CW\*(C`\eo{120}\*(C'\fR both are the number 80 in
decimal, which is less than 256, so the number is interpreted in the native
character set encoding.  In \s-1ASCII\s0 the character in the 80th position (indexed
from 0) is the letter \*(L"P\*(R", and in \s-1EBCDIC\s0 it is the ampersand symbol \*(L"&\*(R".
\&\f(CW\*(C`\ex{100}\*(C'\fR and \f(CW\*(C`\eo{400}\*(C'\fR are both 256 in decimal, so the number is interpreted
as a Unicode code point no matter what the native encoding is.  The name of the
character in the 256th position (indexed by 0) in Unicode is
\&\f(CW\*(C`LATIN CAPITAL LETTER A WITH MACRON\*(C'\fR.
.Sp
There are a couple of exceptions to the above rule.  \f(CW\*(C`\eN{U+\f(CIhex\ number\f(CW}\*(C'\fR is
always interpreted as a Unicode code point, so that \f(CW\*(C`\eN{U+0050}\*(C'\fR is \*(L"P\*(R" even
on \s-1EBCDIC\s0 platforms.  And if \f(CW\*(C`use\ encoding\*(C'\fR is in effect, the
number is considered to be in that encoding, and is translated from that into
the platform's native encoding if there is a corresponding native character;
otherwise to Unicode.
.PP
\&\fB\s-1NOTE\s0\fR: Unlike C and other languages, Perl has no \f(CW\*(C`\ev\*(C'\fR escape sequence for
the vertical tab (\s-1VT,\s0 which is 11 in both \s-1ASCII\s0 and \s-1EBCDIC\s0), but you may
use \f(CW\*(C`\eck\*(C'\fR or
\&\f(CW\*(C`\ex0b\*(C'\fR.  (\f(CW\*(C`\ev\*(C'\fR
does have meaning in regular expression patterns in Perl, see perlre.)
.PP
The following escape sequences are available in constructs that interpolate,
but not in transliterations.
.IX Xref "\\l \\u \\L \\U \\E \\Q \\F"
.PP
.Vb 9
\&    \el          lowercase next character only
\&    \eu          titlecase (not uppercase!) next character only
\&    \eL          lowercase all characters till \eE or end of string
\&    \eU          uppercase all characters till \eE or end of string
\&    \eF          foldcase all characters till \eE or end of string
\&    \eQ          quote (disable) pattern metacharacters till \eE or
\&                end of string
\&    \eE          end either case modification or quoted section
\&                (whichever was last seen)
.Ve
.PP
See \*(L"quotemeta\*(R" in perlfunc for the exact definition of characters that
are quoted by \f(CW\*(C`\eQ\*(C'\fR.
.PP
\&\f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR, and \f(CW\*(C`\eQ\*(C'\fR can stack, in which case you need one
\&\f(CW\*(C`\eE\*(C'\fR for each.  For example:
.PP
.Vb 2
\& say"This \eQquoting \eubusiness \eUhere isn\*(Aqt quite\eE done yet,\eE is it?";
\& This quoting\e Business\e HERE\e ISN\e\*(AqT\e QUITE\e done\e yet\e, is it?
.Ve
.PP
If \f(CW\*(C`use locale\*(C'\fR is in effect (but not \f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR),
the case map used by \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR,
\&\f(CW\*(C`\eu\*(C'\fR, and \f(CW\*(C`\eU\*(C'\fR is taken from the current locale.  See perllocale.
If Unicode (for example, \f(CW\*(C`\eN{}\*(C'\fR or code points of 0x100 or
beyond) is being used, the case map used by \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, and
\&\f(CW\*(C`\eU\*(C'\fR is as defined by Unicode.  That means that case-mapping
a single character can sometimes produce several characters.
Under \f(CW\*(C`use locale\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR produces the same results as \f(CW\*(C`\eL\*(C'\fR.
.PP
All systems use the virtual \f(CW"\en"\fR to represent a line terminator,
called a \*(L"newline\*(R".  There is no such thing as an unvarying, physical
newline character.  It is only an illusion that the operating system,
device drivers, C libraries, and Perl all conspire to preserve.  Not all
systems read \f(CW"\er"\fR as \s-1ASCII CR\s0 and \f(CW"\en"\fR as \s-1ASCII LF. \s0 For example,
on the ancient Macs (pre-MacOS X) of yesteryear, these used to be reversed,
and on systems without line terminator,
printing \f(CW"\en"\fR might emit no actual data.  In general, use \f(CW"\en"\fR when
you mean a \*(L"newline\*(R" for your system, but use the literal \s-1ASCII\s0 when you
need an exact character.  For example, most networking protocols expect
and prefer a \s-1CR+LF \s0(\f(CW"\e015\e012"\fR or \f(CW"\ecM\ecJ"\fR) for line terminators,
and although they often accept just \f(CW"\e012"\fR, they seldom tolerate just
\&\f(CW"\e015"\fR.  If you get in the habit of using \f(CW"\en"\fR for networking,
you may be burned some day.
.IX Xref "newline line terminator eol end of line \\n \\r \\r\\n"
.PP
For constructs that do interpolate, variables beginning with "\f(CW\*(C`$\*(C'\fR\*(L"
or \*(R"\f(CW\*(C`@\*(C'\fR" are interpolated.  Subscripted variables such as \f(CW$a[3]\fR or
\&\f(CW\*(C`$href\->{key}[0]\*(C'\fR are also interpolated, as are array and hash slices.
But method calls such as \f(CW\*(C`$obj\->meth\*(C'\fR are not.
.PP
Interpolating an array or slice interpolates the elements in order,
separated by the value of \f(CW$"\fR, so is equivalent to interpolating
\&\f(CW\*(C`join $", @array\*(C'\fR.  \*(L"Punctuation\*(R" arrays such as \f(CW\*(C`@*\*(C'\fR are usually
interpolated only if the name is enclosed in braces \f(CW\*(C`@{*}\*(C'\fR, but the
arrays \f(CW@_\fR, \f(CW\*(C`@+\*(C'\fR, and \f(CW\*(C`@\-\*(C'\fR are interpolated even without braces.
.PP
For double-quoted strings, the quoting from \f(CW\*(C`\eQ\*(C'\fR is applied after
interpolation and escapes are processed.
.PP
.Vb 1
\&    "abc\eQfoo\etbar$s\eExyz"
.Ve
.PP
is equivalent to
.PP
.Vb 1
\&    "abc" . quotemeta("foo\etbar$s") . "xyz"
.Ve
.PP
For the pattern of regex operators (\f(CW\*(C`qr//\*(C'\fR, \f(CW\*(C`m//\*(C'\fR and \f(CW\*(C`s///\*(C'\fR),
the quoting from \f(CW\*(C`\eQ\*(C'\fR is applied after interpolation is processed,
but before escapes are processed. This allows the pattern to match
literally (except for \f(CW\*(C`$\*(C'\fR and \f(CW\*(C`@\*(C'\fR). For example, the following matches:
.PP
.Vb 1
\&    \*(Aq\es\et\*(Aq =~ /\eQ\es\et/
.Ve
.PP
Because \f(CW\*(C`$\*(C'\fR or \f(CW\*(C`@\*(C'\fR trigger interpolation, you'll need to use something
like \f(CW\*(C`/\eQuser\eE\e@\eQhost/\*(C'\fR to match them literally.
.PP
Patterns are subject to an additional level of interpretation as a
regular expression.  This is done as a second pass, after variables are
interpolated, so that regular expressions may be incorporated into the
pattern from the variables.  If this is not what you want, use \f(CW\*(C`\eQ\*(C'\fR to
interpolate a variable literally.
.PP
Apart from the behavior described above, Perl does not expand
multiple levels of interpolation.  In particular, contrary to the
expectations of shell programmers, back-quotes do \fI\s-1NOT\s0\fR interpolate
within double quotes, nor do single quotes impede evaluation of
variables when used within double quotes.
.SS "Regexp Quote-Like Operators"
.IX Xref "operator, regexp"
.IX Subsection "Regexp Quote-Like Operators"
Here are the quote-like operators that apply to pattern
matching and related activities.
.IP "qr/STRING/msixpodual" 8
.IX Xref "qr i m o s x p"
.IX Item "qr/STRING/msixpodual"
This operator quotes (and possibly compiles) its \fI\s-1STRING\s0\fR as a regular
expression.  \fI\s-1STRING\s0\fR is interpolated the same way as \fI\s-1PATTERN\s0\fR
in \f(CW\*(C`m/PATTERN/\*(C'\fR.  If \*(L"'\*(R" is used as the delimiter, no interpolation
is done.  Returns a Perl value which may be used instead of the
corresponding \f(CW\*(C`/STRING/msixpodual\*(C'\fR expression. The returned value is a
normalized version of the original pattern. It magically differs from
a string containing the same characters: \f(CW\*(C`ref(qr/x/)\*(C'\fR returns \*(L"Regexp\*(R";
however, dereferencing it is not well defined (you currently get the 
normalized version of the original pattern, but this may change).
.Sp
For example,
.Sp
.Vb 3
\&    $rex = qr/my.STRING/is;
\&    print $rex;                 # prints (?si\-xm:my.STRING)
\&    s/$rex/foo/;
.Ve
.Sp
is equivalent to
.Sp
.Vb 1
\&    s/my.STRING/foo/is;
.Ve
.Sp
The result may be used as a subpattern in a match:
.Sp
.Vb 5
\&    $re = qr/$pattern/;
\&    $string =~ /foo${re}bar/;   # can be interpolated in other
\&                                # patterns
\&    $string =~ $re;             # or used standalone
\&    $string =~ /$re/;           # or this way
.Ve
.Sp
Since Perl may compile the pattern at the moment of execution of the \fIqr()\fR
operator, using \fIqr()\fR may have speed advantages in some situations,
notably if the result of \fIqr()\fR is used standalone:
.Sp
.Vb 11
\&    sub match {
\&        my $patterns = shift;
\&        my @compiled = map qr/$_/i, @$patterns;
\&        grep {
\&            my $success = 0;
\&            foreach my $pat (@compiled) {
\&                $success = 1, last if /$pat/;
\&            }
\&            $success;
\&        } @_;
\&    }
.Ve
.Sp
Precompilation of the pattern into an internal representation at
the moment of \fIqr()\fR avoids a need to recompile the pattern every
time a match \f(CW\*(C`/$pat/\*(C'\fR is attempted.  (Perl has many other internal
optimizations, but none would be triggered in the above example if
we did not use \fIqr()\fR operator.)
.Sp
Options (specified by the following modifiers) are:
.Sp
.Vb 10
\&    m   Treat string as multiple lines.
\&    s   Treat string as single line. (Make . match a newline)
\&    i   Do case\-insensitive pattern matching.
\&    x   Use extended regular expressions.
\&    p   When matching preserve a copy of the matched string so
\&        that ${^PREMATCH}, ${^MATCH}, ${^POSTMATCH} will be
\&        defined.
\&    o   Compile pattern only once.
\&    a   ASCII\-restrict: Use ASCII for \ed, \es, \ew; specifying two
\&        a\*(Aqs further restricts /i matching so that no ASCII
\&        character will match a non\-ASCII one.
\&    l   Use the locale.
\&    u   Use Unicode rules.
\&    d   Use Unicode or native charset, as in 5.12 and earlier.
.Ve
.Sp
If a precompiled pattern is embedded in a larger pattern then the effect
of \*(L"msixpluad\*(R" will be propagated appropriately.  The effect the \*(L"o\*(R"
modifier has is not propagated, being restricted to those patterns
explicitly using it.
.Sp
The last four modifiers listed above, added in Perl 5.14,
control the character set semantics, but \f(CW\*(C`/a\*(C'\fR is the only one you are likely
to want to specify explicitly; the other three are selected
automatically by various pragmas.
.Sp
See perlre for additional information on valid syntax for \s-1STRING,\s0 and
for a detailed look at the semantics of regular expressions.  In
particular, all modifiers except the largely obsolete \f(CW\*(C`/o\*(C'\fR are further
explained in \*(L"Modifiers\*(R" in perlre.  \f(CW\*(C`/o\*(C'\fR is described in the next section.
.IP "m/PATTERN/msixpodualgc" 8
.IX Xref "m operator, match regexp, options regexp regex, options regex m s i x p o g c"
.IX Item "m/PATTERN/msixpodualgc"
.PD 0
.IP "/PATTERN/msixpodualgc" 8
.IX Item "/PATTERN/msixpodualgc"
.PD
Searches a string for a pattern match, and in scalar context returns
true if it succeeds, false if it fails.  If no string is specified
via the \f(CW\*(C`=~\*(C'\fR or \f(CW\*(C`!~\*(C'\fR operator, the \f(CW$_\fR string is searched.  (The
string specified with \f(CW\*(C`=~\*(C'\fR need not be an lvalue\*(--it may be the
result of an expression evaluation, but remember the \f(CW\*(C`=~\*(C'\fR binds
rather tightly.)  See also perlre.
.Sp
Options are as described in \f(CW\*(C`qr//\*(C'\fR above; in addition, the following match
process modifiers are available:
.Sp
.Vb 3
\& g  Match globally, i.e., find all occurrences.
\& c  Do not reset search position on a failed match when /g is
\&    in effect.
.Ve
.Sp
If \*(L"/\*(R" is the delimiter then the initial \f(CW\*(C`m\*(C'\fR is optional.  With the \f(CW\*(C`m\*(C'\fR
you can use any pair of non-whitespace (\s-1ASCII\s0) characters
as delimiters.  This is particularly useful for matching path names
that contain \*(L"/\*(R", to avoid \s-1LTS \s0(leaning toothpick syndrome).  If \*(L"?\*(R" is
the delimiter, then a match-only-once rule applies,
described in \f(CW\*(C`m?PATTERN?\*(C'\fR below.
If \*(L"'\*(R" is the delimiter, no interpolation is performed on the \s-1PATTERN.\s0
When using a character valid in an identifier, whitespace is required
after the \f(CW\*(C`m\*(C'\fR.
.Sp
\&\s-1PATTERN\s0 may contain variables, which will be interpolated
every time the pattern search is evaluated, except
for when the delimiter is a single quote.  (Note that \f(CW$(\fR, \f(CW$)\fR, and
\&\f(CW$|\fR are not interpolated because they look like end-of-string tests.)
Perl will not recompile the pattern unless an interpolated
variable that it contains changes.  You can force Perl to skip the
test and never recompile by adding a \f(CW\*(C`/o\*(C'\fR (which stands for \*(L"once\*(R")
after the trailing delimiter.
Once upon a time, Perl would recompile regular expressions
unnecessarily, and this modifier was useful to tell it not to do so, in the
interests of speed.  But now, the only reasons to use \f(CW\*(C`/o\*(C'\fR are either:
.RS 8
.IP "1." 4
The variables are thousands of characters long and you know that they
don't change, and you need to wring out the last little bit of speed by
having Perl skip testing for that.  (There is a maintenance penalty for
doing this, as mentioning \f(CW\*(C`/o\*(C'\fR constitutes a promise that you won't
change the variables in the pattern.  If you do change them, Perl won't
even notice.)
.IP "2." 4
you want the pattern to use the initial values of the variables
regardless of whether they change or not.  (But there are saner ways
of accomplishing this than using \f(CW\*(C`/o\*(C'\fR.)
.IP "3." 4
If the pattern contains embedded code, such as
.Sp
.Vb 3
\&    use re \*(Aqeval\*(Aq;
\&    $code = \*(Aqfoo(?{ $x })\*(Aq;
\&    /$code/
.Ve
.Sp
then perl will recompile each time, even though the pattern string hasn't
changed, to ensure that the current value of \f(CW$x\fR is seen each time.
Use \f(CW\*(C`/o\*(C'\fR if you want to avoid this.
.RE
.RS 8
.Sp
The bottom line is that using \f(CW\*(C`/o\*(C'\fR is almost never a good idea.
.RE
.IP "The empty pattern //" 8
.IX Item "The empty pattern //"
If the \s-1PATTERN\s0 evaluates to the empty string, the last
\&\fIsuccessfully\fR matched regular expression is used instead. In this
case, only the \f(CW\*(C`g\*(C'\fR and \f(CW\*(C`c\*(C'\fR flags on the empty pattern are honored;
the other flags are taken from the original pattern. If no match has
previously succeeded, this will (silently) act instead as a genuine
empty pattern (which will always match).
.Sp
Note that it's possible to confuse Perl into thinking \f(CW\*(C`//\*(C'\fR (the empty
regex) is really \f(CW\*(C`//\*(C'\fR (the defined-or operator).  Perl is usually pretty
good about this, but some pathological cases might trigger this, such as
\&\f(CW\*(C`$a///\*(C'\fR (is that \f(CW\*(C`($a) / (//)\*(C'\fR or \f(CW\*(C`$a // /\*(C'\fR?) and \f(CW\*(C`print $fh //\*(C'\fR
(\f(CW\*(C`print $fh(//\*(C'\fR or \f(CW\*(C`print($fh //\*(C'\fR?).  In all of these examples, Perl
will assume you meant defined-or.  If you meant the empty regex, just
use parentheses or spaces to disambiguate, or even prefix the empty
regex with an \f(CW\*(C`m\*(C'\fR (so \f(CW\*(C`//\*(C'\fR becomes \f(CW\*(C`m//\*(C'\fR).
.IP "Matching in list context" 8
.IX Item "Matching in list context"
If the \f(CW\*(C`/g\*(C'\fR option is not used, \f(CW\*(C`m//\*(C'\fR in list context returns a
list consisting of the subexpressions matched by the parentheses in the
pattern, that is, (\f(CW$1\fR, \f(CW$2\fR, \f(CW$3\fR...)  (Note that here \f(CW$1\fR etc. are
also set).  When there are no parentheses in the pattern, the return
value is the list \f(CW\*(C`(1)\*(C'\fR for success.  
With or without parentheses, an empty list is returned upon failure.
.Sp
Examples:
.Sp
.Vb 2
\& open(TTY, "+</dev/tty")
\&    || die "can\*(Aqt access /dev/tty: $!";
\&
\& <TTY> =~ /^y/i && foo();       # do foo if desired
\&
\& if (/Version: *([0\-9.]*)/) { $version = $1; }
\&
\& next if m#^/usr/spool/uucp#;
\&
\& # poor man\*(Aqs grep
\& $arg = shift;
\& while (<>) {
\&    print if /$arg/o; # compile only once (no longer needed!)
\& }
\&
\& if (($F1, $F2, $Etc) = ($foo =~ /^(\eS+)\es+(\eS+)\es*(.*)/))
.Ve
.Sp
This last example splits \f(CW$foo\fR into the first two words and the
remainder of the line, and assigns those three fields to \f(CW$F1\fR, \f(CW$F2\fR, and
\&\f(CW$Etc\fR.  The conditional is true if any variables were assigned; that is,
if the pattern matched.
.Sp
The \f(CW\*(C`/g\*(C'\fR modifier specifies global pattern matching\*(--that is,
matching as many times as possible within the string. How it behaves
depends on the context. In list context, it returns a list of the
substrings matched by any capturing parentheses in the regular
expression. If there are no parentheses, it returns a list of all
the matched strings, as if there were parentheses around the whole
pattern.
.Sp
In scalar context, each execution of \f(CW\*(C`m//g\*(C'\fR finds the next match,
returning true if it matches, and false if there is no further match.
The position after the last match can be read or set using the \f(CW\*(C`pos()\*(C'\fR
function; see \*(L"pos\*(R" in perlfunc. A failed match normally resets the
search position to the beginning of the string, but you can avoid that
by adding the \f(CW\*(C`/c\*(C'\fR modifier (for example, \f(CW\*(C`m//gc\*(C'\fR). Modifying the target
string also resets the search position.
.IP "\eG assertion" 8
.IX Item "G assertion"
You can intermix \f(CW\*(C`m//g\*(C'\fR matches with \f(CW\*(C`m/\eG.../g\*(C'\fR, where \f(CW\*(C`\eG\*(C'\fR is a
zero-width assertion that matches the exact position where the
previous \f(CW\*(C`m//g\*(C'\fR, if any, left off. Without the \f(CW\*(C`/g\*(C'\fR modifier, the
\&\f(CW\*(C`\eG\*(C'\fR assertion still anchors at \f(CW\*(C`pos()\*(C'\fR as it was at the start of
the operation (see \*(L"pos\*(R" in perlfunc), but the match is of course only
attempted once. Using \f(CW\*(C`\eG\*(C'\fR without \f(CW\*(C`/g\*(C'\fR on a target string that has
not previously had a \f(CW\*(C`/g\*(C'\fR match applied to it is the same as using
the \f(CW\*(C`\eA\*(C'\fR assertion to match the beginning of the string.  Note also
that, currently, \f(CW\*(C`\eG\*(C'\fR is only properly supported when anchored at the
very beginning of the pattern.
.Sp
Examples:
.Sp
.Vb 2
\&    # list context
\&    ($one,$five,$fifteen) = (\`uptime\` =~ /(\ed+\e.\ed+)/g);
\&
\&    # scalar context
\&    local $/ = "";
\&    while ($paragraph = <>) {
\&        while ($paragraph =~ /\ep{Ll}[\*(Aq")]*[.!?]+[\*(Aq")]*\es/g) {
\&            $sentences++;
\&        }
\&    }
\&    say $sentences;
.Ve
.Sp
Here's another way to check for sentences in a paragraph:
.Sp
.Vb 10
\& my $sentence_rx = qr{
\&    (?: (?<= ^ ) | (?<= \es ) )  # after start\-of\-string or
\&                                # whitespace
\&    \ep{Lu}                      # capital letter
\&    .*?                         # a bunch of anything
\&    (?<= \eS )                   # that ends in non\-
\&                                # whitespace
\&    (?<! \eb [DMS]r  )           # but isn\*(Aqt a common abbr.
\&    (?<! \eb Mrs )
\&    (?<! \eb Sra )
\&    (?<! \eb St  )
\&    [.?!]                       # followed by a sentence
\&                                # ender
\&    (?= $ | \es )                # in front of end\-of\-string
\&                                # or whitespace
\& }sx;
\& local $/ = "";
\& while (my $paragraph = <>) {
\&    say "NEW PARAGRAPH";
\&    my $count = 0;
\&    while ($paragraph =~ /($sentence_rx)/g) {
\&        printf "\etgot sentence %d: <%s>\en", ++$count, $1;
\&    }
\& }
.Ve
.Sp
Here's how to use \f(CW\*(C`m//gc\*(C'\fR with \f(CW\*(C`\eG\*(C'\fR:
.Sp
.Vb 10
\&    $_ = "ppooqppqq";
\&    while ($i++ < 2) {
\&        print "1: \*(Aq";
\&        print $1 while /(o)/gc; print "\*(Aq, pos=", pos, "\en";
\&        print "2: \*(Aq";
\&        print $1 if /\eG(q)/gc;  print "\*(Aq, pos=", pos, "\en";
\&        print "3: \*(Aq";
\&        print $1 while /(p)/gc; print "\*(Aq, pos=", pos, "\en";
\&    }
\&    print "Final: \*(Aq$1\*(Aq, pos=",pos,"\en" if /\eG(.)/;
.Ve
.Sp
The last example should print:
.Sp
.Vb 7
\&    1: \*(Aqoo\*(Aq, pos=4
\&    2: \*(Aqq\*(Aq, pos=5
\&    3: \*(Aqpp\*(Aq, pos=7
\&    1: \*(Aq\*(Aq, pos=7
\&    2: \*(Aqq\*(Aq, pos=8
\&    3: \*(Aq\*(Aq, pos=8
\&    Final: \*(Aqq\*(Aq, pos=8
.Ve
.Sp
Notice that the final match matched \f(CW\*(C`q\*(C'\fR instead of \f(CW\*(C`p\*(C'\fR, which a match
without the \f(CW\*(C`\eG\*(C'\fR anchor would have done. Also note that the final match
did not update \f(CW\*(C`pos\*(C'\fR. \f(CW\*(C`pos\*(C'\fR is only updated on a \f(CW\*(C`/g\*(C'\fR match. If the
final match did indeed match \f(CW\*(C`p\*(C'\fR, it's a good bet that you're running a
very old (pre\-5.6.0) version of Perl.
.Sp
A useful idiom for \f(CW\*(C`lex\*(C'\fR\-like scanners is \f(CW\*(C`/\eG.../gc\*(C'\fR.  You can
combine several regexps like this to process a string part-by-part,
doing different actions depending on which regexp matched.  Each
regexp tries to match where the previous one leaves off.
.Sp
.Vb 4
\& $_ = <<\*(AqEOL\*(Aq;
\&    $url = URI::URL\->new( "http://example.com/" );
\&    die if $url eq "xXx";
\& EOL
\&
\& LOOP: {
\&     print(" digits"),       redo LOOP if /\eG\ed+\eb[,.;]?\es*/gc;
\&     print(" lowercase"),    redo LOOP
\&                                    if /\eG\ep{Ll}+\eb[,.;]?\es*/gc;
\&     print(" UPPERCASE"),    redo LOOP
\&                                    if /\eG\ep{Lu}+\eb[,.;]?\es*/gc;
\&     print(" Capitalized"),  redo LOOP
\&                              if /\eG\ep{Lu}\ep{Ll}+\eb[,.;]?\es*/gc;
\&     print(" MiXeD"),        redo LOOP if /\eG\epL+\eb[,.;]?\es*/gc;
\&     print(" alphanumeric"), redo LOOP
\&                            if /\eG[\ep{Alpha}\epN]+\eb[,.;]?\es*/gc;
\&     print(" line\-noise"),   redo LOOP if /\eG\eW+/gc;
\&     print ". That\*(Aqs all!\en";
\& }
.Ve
.Sp
Here is the output (split into several lines):
.Sp
.Vb 4
\& line\-noise lowercase line\-noise UPPERCASE line\-noise UPPERCASE
\& line\-noise lowercase line\-noise lowercase line\-noise lowercase
\& lowercase line\-noise lowercase lowercase line\-noise lowercase
\& lowercase line\-noise MiXeD line\-noise. That\*(Aqs all!
.Ve
.IP "m?PATTERN?msixpodualgc" 8
.IX Xref "? operator, match-once"
.IX Item "m?PATTERN?msixpodualgc"
.PD 0
.IP "?PATTERN?msixpodualgc" 8
.IX Item "?PATTERN?msixpodualgc"
.PD
This is just like the \f(CW\*(C`m/PATTERN/\*(C'\fR search, except that it matches
only once between calls to the \fIreset()\fR operator.  This is a useful
optimization when you want to see only the first occurrence of
something in each file of a set of files, for instance.  Only \f(CW\*(C`m??\*(C'\fR
patterns local to the current package are reset.
.Sp
.Vb 7
\&    while (<>) {
\&        if (m?^$?) {
\&                            # blank line between header and body
\&        }
\&    } continue {
\&        reset if eof;       # clear m?? status for next file
\&    }
.Ve
.Sp
Another example switched the first \*(L"latin1\*(R" encoding it finds
to \*(L"utf8\*(R" in a pod file:
.Sp
.Vb 1
\&    s//utf8/ if m? ^ =encoding \eh+ \eK latin1 ?x;
.Ve
.Sp
The match-once behavior is controlled by the match delimiter being
\&\f(CW\*(C`?\*(C'\fR; with any other delimiter this is the normal \f(CW\*(C`m//\*(C'\fR operator.
.Sp
For historical reasons, the leading \f(CW\*(C`m\*(C'\fR in \f(CW\*(C`m?PATTERN?\*(C'\fR is optional,
but the resulting \f(CW\*(C`?PATTERN?\*(C'\fR syntax is deprecated, will warn on
usage and might be removed from a future stable release of Perl (without
further notice!).
.IP "s/PATTERN/REPLACEMENT/msixpodualgcer" 8
.IX Xref "substitute substitution replace regexp, replace regexp, substitute m s i x p o g c e r"
.IX Item "s/PATTERN/REPLACEMENT/msixpodualgcer"
Searches a string for a pattern, and if found, replaces that pattern
with the replacement text and returns the number of substitutions
made.  Otherwise it returns false (specifically, the empty string).
.Sp
If the \f(CW\*(C`/r\*(C'\fR (non-destructive) option is used then it runs the
substitution on a copy of the string and instead of returning the
number of substitutions, it returns the copy whether or not a
substitution occurred.  The original string is never changed when
\&\f(CW\*(C`/r\*(C'\fR is used.  The copy will always be a plain string, even if the
input is an object or a tied variable.
.Sp
If no string is specified via the \f(CW\*(C`=~\*(C'\fR or \f(CW\*(C`!~\*(C'\fR operator, the \f(CW$_\fR
variable is searched and modified.  Unless the \f(CW\*(C`/r\*(C'\fR option is used,
the string specified must be a scalar variable, an array element, a
hash element, or an assignment to one of those; that is, some sort of
scalar lvalue.
.Sp
If the delimiter chosen is a single quote, no interpolation is
done on either the \s-1PATTERN\s0 or the \s-1REPLACEMENT. \s0 Otherwise, if the
\&\s-1PATTERN\s0 contains a $ that looks like a variable rather than an
end-of-string test, the variable will be interpolated into the pattern
at run-time.  If you want the pattern compiled only once the first time
the variable is interpolated, use the \f(CW\*(C`/o\*(C'\fR option.  If the pattern
evaluates to the empty string, the last successfully executed regular
expression is used instead.  See perlre for further explanation on these.
.Sp
Options are as with m// with the addition of the following replacement
specific options:
.Sp
.Vb 5
\&    e   Evaluate the right side as an expression.
\&    ee  Evaluate the right side as a string then eval the
\&        result.
\&    r   Return substitution and leave the original string
\&        untouched.
.Ve
.Sp
Any non-whitespace delimiter may replace the slashes.  Add space after
the \f(CW\*(C`s\*(C'\fR when using a character allowed in identifiers.  If single quotes
are used, no interpretation is done on the replacement string (the \f(CW\*(C`/e\*(C'\fR
modifier overrides this, however).  Note that Perl treats backticks
as normal delimiters; the replacement text is not evaluated as a command.
If the \s-1PATTERN\s0 is delimited by bracketing quotes, the \s-1REPLACEMENT\s0 has
its own pair of quotes, which may or may not be bracketing quotes, for example,
\&\f(CW\*(C`s(foo)(bar)\*(C'\fR or \f(CW\*(C`s<foo>/bar/\*(C'\fR.  A \f(CW\*(C`/e\*(C'\fR will cause the
replacement portion to be treated as a full-fledged Perl expression
and evaluated right then and there.  It is, however, syntax checked at
compile-time. A second \f(CW\*(C`e\*(C'\fR modifier will cause the replacement portion
to be \f(CW\*(C`eval\*(C'\fRed before being run as a Perl expression.
.Sp
Examples:
.Sp
.Vb 1
\&    s/\ebgreen\eb/mauve/g;              # don\*(Aqt change wintergreen
\&
\&    $path =~ s|/usr/bin|/usr/local/bin|;
\&
\&    s/Login: $foo/Login: $bar/; # run\-time pattern
\&
\&    ($foo = $bar) =~ s/this/that/;      # copy first, then
\&                                        # change
\&    ($foo = "$bar") =~ s/this/that/;    # convert to string,
\&                                        # copy, then change
\&    $foo = $bar =~ s/this/that/r;       # Same as above using /r
\&    $foo = $bar =~ s/this/that/r
\&                =~ s/that/the other/r;  # Chained substitutes
\&                                        # using /r
\&    @foo = map { s/this/that/r } @bar   # /r is very useful in
\&                                        # maps
\&
\&    $count = ($paragraph =~ s/Mister\eb/Mr./g);  # get change\-cnt
\&
\&    $_ = \*(Aqabc123xyz\*(Aq;
\&    s/\ed+/$&*2/e;               # yields \*(Aqabc246xyz\*(Aq
\&    s/\ed+/sprintf("%5d",$&)/e;  # yields \*(Aqabc  246xyz\*(Aq
\&    s/\ew/$& x 2/eg;             # yields \*(Aqaabbcc  224466xxyyzz\*(Aq
\&
\&    s/%(.)/$percent{$1}/g;      # change percent escapes; no /e
\&    s/%(.)/$percent{$1} || $&/ge;       # expr now, so /e
\&    s/^=(\ew+)/pod($1)/ge;       # use function call
\&
\&    $_ = \*(Aqabc123xyz\*(Aq;
\&    $a = s/abc/def/r;           # $a is \*(Aqdef123xyz\*(Aq and
\&                                # $_ remains \*(Aqabc123xyz\*(Aq.
\&
\&    # expand variables in $_, but dynamics only, using
\&    # symbolic dereferencing
\&    s/\e$(\ew+)/${$1}/g;
\&
\&    # Add one to the value of any numbers in the string
\&    s/(\ed+)/1 + $1/eg;
\&
\&    # Titlecase words in the last 30 characters only
\&    substr($str, \-30) =~ s/\eb(\ep{Alpha}+)\eb/\eu\eL$1/g;
\&
\&    # This will expand any embedded scalar variable
\&    # (including lexicals) in $_ : First $1 is interpolated
\&    # to the variable name, and then evaluated
\&    s/(\e$\ew+)/$1/eeg;
\&
\&    # Delete (most) C comments.
\&    $program =~ s {
\&        /\e*     # Match the opening delimiter.
\&        .*?     # Match a minimal number of characters.
\&        \e*/     # Match the closing delimiter.
\&    } []gsx;
\&
\&    s/^\es*(.*?)\es*$/$1/;        # trim whitespace in $_,
\&                                # expensively
\&
\&    for ($variable) {           # trim whitespace in $variable,
\&                                # cheap
\&        s/^\es+//;
\&        s/\es+$//;
\&    }
\&
\&    s/([^ ]*) *([^ ]*)/$2 $1/;  # reverse 1st two fields
.Ve
.Sp
Note the use of $ instead of \e in the last example.  Unlike
\&\fBsed\fR, we use the \e<\fIdigit\fR> form in only the left hand side.
Anywhere else it's $<\fIdigit\fR>.
.Sp
Occasionally, you can't use just a \f(CW\*(C`/g\*(C'\fR to get all the changes
to occur that you might want.  Here are two common cases:
.Sp
.Vb 2
\&    # put commas in the right places in an integer
\&    1 while s/(\ed)(\ed\ed\ed)(?!\ed)/$1,$2/g;
\&
\&    # expand tabs to 8\-column spacing
\&    1 while s/\et+/\*(Aq \*(Aq x (length($&)*8 \- length($\`)%8)/e;
.Ve
.SS "Quote-Like Operators"
.IX Xref "operator, quote-like"
.IX Subsection "Quote-Like Operators"
.IP "q/STRING/" 4
.IX Xref "q quote, single ' ''"
.IX Item "q/STRING/"
.PD 0
.IP "'\s-1STRING\s0'" 4
.IX Item "'STRING'"
.PD
A single-quoted, literal string.  A backslash represents a backslash
unless followed by the delimiter or another backslash, in which case
the delimiter or backslash is interpolated.
.Sp
.Vb 3
\&    $foo = q!I said, "You said, \*(AqShe said it.\*(Aq"!;
\&    $bar = q(\*(AqThis is it.\*(Aq);
\&    $baz = \*(Aq\en\*(Aq;                # a two\-character string
.Ve
.IP "qq/STRING/" 4
.IX Xref "qq quote, double "" """""
.IX Item "qq/STRING/"
.PD 0
.ie n .IP """\s-1STRING""\s0" 4
.el .IP "``\s-1STRING''\s0" 4
.IX Item "STRING"
.PD
A double-quoted, interpolated string.
.Sp
.Vb 4
\&    $_ .= qq
\&     (*** The previous line contains the naughty word "$1".\en)
\&                if /\eb(tcl|java|python)\eb/i;      # :\-)
\&    $baz = "\en";                # a one\-character string
.Ve
.IP "qx/STRING/" 4
.IX Xref "qx ` `` backtick"
.IX Item "qx/STRING/"
.PD 0
.IP "`STRING`" 4
.IX Item "`STRING`"
.PD
A string which is (possibly) interpolated and then executed as a
system command with \fI/bin/sh\fR or its equivalent.  Shell wildcards,
pipes, and redirections will be honored.  The collected standard
output of the command is returned; standard error is unaffected.  In
scalar context, it comes back as a single (potentially multi-line)
string, or undef if the command failed.  In list context, returns a
list of lines (however you've defined lines with $/ or
\&\f(CW$INPUT_RECORD_SEPARATOR\fR), or an empty list if the command failed.
.Sp
Because backticks do not affect standard error, use shell file descriptor
syntax (assuming the shell supports this) if you care to address this.
To capture a command's \s-1STDERR\s0 and \s-1STDOUT\s0 together:
.Sp
.Vb 1
\&    $output = \`cmd 2>&1\`;
.Ve
.Sp
To capture a command's \s-1STDOUT\s0 but discard its \s-1STDERR:\s0
.Sp
.Vb 1
\&    $output = \`cmd 2>/dev/null\`;
.Ve
.Sp
To capture a command's \s-1STDERR\s0 but discard its \s-1STDOUT \s0(ordering is
important here):
.Sp
.Vb 1
\&    $output = \`cmd 2>&1 1>/dev/null\`;
.Ve
.Sp
To exchange a command's \s-1STDOUT\s0 and \s-1STDERR\s0 in order to capture the \s-1STDERR\s0
but leave its \s-1STDOUT\s0 to come out the old \s-1STDERR:\s0
.Sp
.Vb 1
\&    $output = \`cmd 3>&1 1>&2 2>&3 3>&\-\`;
.Ve
.Sp
To read both a command's \s-1STDOUT\s0 and its \s-1STDERR\s0 separately, it's easiest
to redirect them separately to files, and then read from those files
when the program is done:
.Sp
.Vb 1
\&    system("program args 1>program.stdout 2>program.stderr");
.Ve
.Sp
The \s-1STDIN\s0 filehandle used by the command is inherited from Perl's \s-1STDIN.\s0
For example:
.Sp
.Vb 3
\&    open(SPLAT, "stuff")   || die "can\*(Aqt open stuff: $!";
\&    open(STDIN, "<&SPLAT") || die "can\*(Aqt dupe SPLAT: $!";
\&    print STDOUT \`sort\`;
.Ve
.Sp
will print the sorted contents of the file named \fI\*(L"stuff\*(R"\fR.
.Sp
Using single-quote as a delimiter protects the command from Perl's
double-quote interpolation, passing it on to the shell instead:
.Sp
.Vb 2
\&    $perl_info  = qx(ps $$);            # that\*(Aqs Perl\*(Aqs $$
\&    $shell_info = qx\*(Aqps $$\*(Aq;            # that\*(Aqs the new shell\*(Aqs $$
.Ve
.Sp
How that string gets evaluated is entirely subject to the command
interpreter on your system.  On most platforms, you will have to protect
shell metacharacters if you want them treated literally.  This is in
practice difficult to do, as it's unclear how to escape which characters.
See perlsec for a clean and safe example of a manual \fIfork()\fR and \fIexec()\fR
to emulate backticks safely.
.Sp
On some platforms (notably DOS-like ones), the shell may not be
capable of dealing with multiline commands, so putting newlines in
the string may not get you what you want.  You may be able to evaluate
multiple commands in a single line by separating them with the command
separator character, if your shell supports that (for example, \f(CW\*(C`;\*(C'\fR on 
many Unix shells and \f(CW\*(C`&\*(C'\fR on the Windows \s-1NT \s0\f(CW\*(C`cmd\*(C'\fR shell).
.Sp
Perl will attempt to flush all files opened for
output before starting the child process, but this may not be supported
on some platforms (see perlport).  To be safe, you may need to set
\&\f(CW$|\fR ($AUTOFLUSH in English) or call the \f(CW\*(C`autoflush()\*(C'\fR method of
\&\f(CW\*(C`IO::Handle\*(C'\fR on any open handles.
.Sp
Beware that some command shells may place restrictions on the length
of the command line.  You must ensure your strings don't exceed this
limit after any necessary interpolations.  See the platform-specific
release notes for more details about your particular environment.
.Sp
Using this operator can lead to programs that are difficult to port,
because the shell commands called vary between systems, and may in
fact not be present at all.  As one example, the \f(CW\*(C`type\*(C'\fR command under
the \s-1POSIX\s0 shell is very different from the \f(CW\*(C`type\*(C'\fR command under \s-1DOS.\s0
That doesn't mean you should go out of your way to avoid backticks
when they're the right way to get something done.  Perl was made to be
a glue language, and one of the things it glues together is commands.
Just understand what you're getting yourself into.
.Sp
See \*(L"I/O Operators\*(R" for more discussion.
.IP "qw/STRING/" 4
.IX Xref "qw quote, list quote, words"
.IX Item "qw/STRING/"
Evaluates to a list of the words extracted out of \s-1STRING,\s0 using embedded
whitespace as the word delimiters.  It can be understood as being roughly
equivalent to:
.Sp
.Vb 1
\&    split(" ", q/STRING/);
.Ve
.Sp
the differences being that it generates a real list at compile time, and
in scalar context it returns the last element in the list.  So
this expression:
.Sp
.Vb 1
\&    qw(foo bar baz)
.Ve
.Sp
is semantically equivalent to the list:
.Sp
.Vb 1
\&    "foo", "bar", "baz"
.Ve
.Sp
Some frequently seen examples:
.Sp
.Vb 2
\&    use POSIX qw( setlocale localeconv )
\&    @EXPORT = qw( foo bar baz );
.Ve
.Sp
A common mistake is to try to separate the words with comma or to
put comments into a multi-line \f(CW\*(C`qw\*(C'\fR\-string.  For this reason, the
\&\f(CW\*(C`use warnings\*(C'\fR pragma and the \fB\-w\fR switch (that is, the \f(CW$^W\fR variable)
produces warnings if the \s-1STRING\s0 contains the \*(L",\*(R" or the \*(L"#\*(R" character.
.IP "tr/SEARCHLIST/REPLACEMENTLIST/cdsr" 4
.IX Xref "tr y transliterate c d s"
.IX Item "tr/SEARCHLIST/REPLACEMENTLIST/cdsr"
.PD 0
.IP "y/SEARCHLIST/REPLACEMENTLIST/cdsr" 4
.IX Item "y/SEARCHLIST/REPLACEMENTLIST/cdsr"
.PD
Transliterates all occurrences of the characters found in the search list
with the corresponding character in the replacement list.  It returns
the number of characters replaced or deleted.  If no string is
specified via the \f(CW\*(C`=~\*(C'\fR or \f(CW\*(C`!~\*(C'\fR operator, the \f(CW$_\fR string is transliterated.
.Sp
If the \f(CW\*(C`/r\*(C'\fR (non-destructive) option is present, a new copy of the string
is made and its characters transliterated, and this copy is returned no
matter whether it was modified or not: the original string is always
left unchanged.  The new copy is always a plain string, even if the input
string is an object or a tied variable.
.Sp
Unless the \f(CW\*(C`/r\*(C'\fR option is used, the string specified with \f(CW\*(C`=~\*(C'\fR must be a
scalar variable, an array element, a hash element, or an assignment to one
of those; in other words, an lvalue.
.Sp
A character range may be specified with a hyphen, so \f(CW\*(C`tr/A\-J/0\-9/\*(C'\fR
does the same replacement as \f(CW\*(C`tr/ACEGIBDFHJ/0246813579/\*(C'\fR.
For \fBsed\fR devotees, \f(CW\*(C`y\*(C'\fR is provided as a synonym for \f(CW\*(C`tr\*(C'\fR.  If the
\&\s-1SEARCHLIST\s0 is delimited by bracketing quotes, the \s-1REPLACEMENTLIST\s0 has
its own pair of quotes, which may or may not be bracketing quotes;
for example, \f(CW\*(C`tr[aeiouy][yuoiea]\*(C'\fR or \f(CW\*(C`tr(+\e\-*/)/ABCD/\*(C'\fR.
.Sp
Note that \f(CW\*(C`tr\*(C'\fR does \fBnot\fR do regular expression character classes such as
\&\f(CW\*(C`\ed\*(C'\fR or \f(CW\*(C`\epL\*(C'\fR.  The \f(CW\*(C`tr\*(C'\fR operator is not equivalent to the \fItr\fR\|(1)
utility.  If you want to map strings between lower/upper cases, see
\&\*(L"lc\*(R" in perlfunc and \*(L"uc\*(R" in perlfunc, and in general consider using the \f(CW\*(C`s\*(C'\fR
operator if you need regular expressions.  The \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, and
\&\f(CW\*(C`\el\*(C'\fR string-interpolation escapes on the right side of a substitution
operator will perform correct case-mappings, but \f(CW\*(C`tr[a\-z][A\-Z]\*(C'\fR will not
(except sometimes on legacy 7\-bit data).
.Sp
Note also that the whole range idea is rather unportable between
character sets\*(--and even within character sets they may cause results
you probably didn't expect.  A sound principle is to use only ranges
that begin from and end at either alphabets of equal case (a\-e, A\-E),
or digits (0\-4).  Anything else is unsafe.  If in doubt, spell out the
character sets in full.
.Sp
Options:
.Sp
.Vb 5
\&    c   Complement the SEARCHLIST.
\&    d   Delete found but unreplaced characters.
\&    s   Squash duplicate replaced characters.
\&    r   Return the modified string and leave the original string
\&        untouched.
.Ve
.Sp
If the \f(CW\*(C`/c\*(C'\fR modifier is specified, the \s-1SEARCHLIST\s0 character set
is complemented.  If the \f(CW\*(C`/d\*(C'\fR modifier is specified, any characters
specified by \s-1SEARCHLIST\s0 not found in \s-1REPLACEMENTLIST\s0 are deleted.
(Note that this is slightly more flexible than the behavior of some
\&\fBtr\fR programs, which delete anything they find in the \s-1SEARCHLIST,\s0
period.) If the \f(CW\*(C`/s\*(C'\fR modifier is specified, sequences of characters
that were transliterated to the same character are squashed down
to a single instance of the character.
.Sp
If the \f(CW\*(C`/d\*(C'\fR modifier is used, the \s-1REPLACEMENTLIST\s0 is always interpreted
exactly as specified.  Otherwise, if the \s-1REPLACEMENTLIST\s0 is shorter
than the \s-1SEARCHLIST,\s0 the final character is replicated till it is long
enough.  If the \s-1REPLACEMENTLIST\s0 is empty, the \s-1SEARCHLIST\s0 is replicated.
This latter is useful for counting characters in a class or for
squashing character sequences in a class.
.Sp
Examples:
.Sp
.Vb 1
\&    $ARGV[1] =~ tr/A\-Z/a\-z/;    # canonicalize to lower case ASCII
\&
\&    $cnt = tr/*/*/;             # count the stars in $_
\&
\&    $cnt = $sky =~ tr/*/*/;     # count the stars in $sky
\&
\&    $cnt = tr/0\-9//;            # count the digits in $_
\&
\&    tr/a\-zA\-Z//s;               # bookkeeper \-> bokeper
\&
\&    ($HOST = $host) =~ tr/a\-z/A\-Z/;
\&     $HOST = $host  =~ tr/a\-z/A\-Z/r;   # same thing
\&
\&    $HOST = $host =~ tr/a\-z/A\-Z/r    # chained with s///r
\&                  =~ s/:/ \-p/r;
\&
\&    tr/a\-zA\-Z/ /cs;             # change non\-alphas to single space
\&
\&    @stripped = map tr/a\-zA\-Z/ /csr, @original;
\&                                # /r with map
\&
\&    tr [\e200\-\e377]
\&       [\e000\-\e177];             # wickedly delete 8th bit
.Ve
.Sp
If multiple transliterations are given for a character, only the
first one is used:
.Sp
.Vb 1
\&    tr/AAA/XYZ/
.Ve
.Sp
will transliterate any A to X.
.Sp
Because the transliteration table is built at compile time, neither
the \s-1SEARCHLIST\s0 nor the \s-1REPLACEMENTLIST\s0 are subjected to double quote
interpolation.  That means that if you want to use variables, you
must use an \fIeval()\fR:
.Sp
.Vb 2
\&    eval "tr/$oldlist/$newlist/";
\&    die $@ if $@;
\&
\&    eval "tr/$oldlist/$newlist/, 1" or die $@;
.Ve
.IP "<<\s-1EOF \s0" 4
.IX Xref "here-doc heredoc here-document <<"
.IX Item "<<EOF "
A line-oriented form of quoting is based on the shell \*(L"here-document\*(R"
syntax.  Following a \f(CW\*(C`<<\*(C'\fR you specify a string to terminate
the quoted material, and all lines following the current line down to
the terminating string are the value of the item.
.Sp
The terminating string may be either an identifier (a word), or some
quoted text.  An unquoted identifier works like double quotes.
There may not be a space between the \f(CW\*(C`<<\*(C'\fR and the identifier,
unless the identifier is explicitly quoted.  (If you put a space it
will be treated as a null identifier, which is valid, and matches the
first empty line.)  The terminating string must appear by itself
(unquoted and with no surrounding whitespace) on the terminating line.
.Sp
If the terminating string is quoted, the type of quotes used determine
the treatment of the text.
.RS 4
.IP "Double Quotes" 4
.IX Item "Double Quotes"
Double quotes indicate that the text will be interpolated using exactly
the same rules as normal double quoted strings.
.Sp
.Vb 3
\&       print <<EOF;
\&    The price is $Price.
\&    EOF
\&
\&       print << "EOF"; # same as above
\&    The price is $Price.
\&    EOF
.Ve
.IP "Single Quotes" 4
.IX Item "Single Quotes"
Single quotes indicate the text is to be treated literally with no
interpolation of its content. This is similar to single quoted
strings except that backslashes have no special meaning, with \f(CW\*(C`\e\e\*(C'\fR
being treated as two backslashes and not one as they would in every
other quoting construct.
.Sp
Just as in the shell, a backslashed bareword following the \f(CW\*(C`<<\*(C'\fR
means the same thing as a single-quoted string does:
.Sp
.Vb 3
\&        $cost = <<\*(AqVISTA\*(Aq;  # hasta la ...
\&    That\*(Aqll be $10 please, ma\*(Aqam.
\&    VISTA
\&
\&        $cost = <<\eVISTA;   # Same thing!
\&    That\*(Aqll be $10 please, ma\*(Aqam.
\&    VISTA
.Ve
.Sp
This is the only form of quoting in perl where there is no need
to worry about escaping content, something that code generators
can and do make good use of.
.IP "Backticks" 4
.IX Item "Backticks"
The content of the here doc is treated just as it would be if the
string were embedded in backticks. Thus the content is interpolated
as though it were double quoted and then executed via the shell, with
the results of the execution returned.
.Sp
.Vb 3
\&       print << \`EOC\`; # execute command and get results
\&    echo hi there
\&    EOC
.Ve
.RE
.RS 4
.Sp
It is possible to stack multiple here-docs in a row:
.Sp
.Vb 5
\&       print <<"foo", <<"bar"; # you can stack them
\&    I said foo.
\&    foo
\&    I said bar.
\&    bar
\&
\&       myfunc(<< "THIS", 23, <<\*(AqTHAT\*(Aq);
\&    Here\*(Aqs a line
\&    or two.
\&    THIS
\&    and here\*(Aqs another.
\&    THAT
.Ve
.Sp
Just don't forget that you have to put a semicolon on the end
to finish the statement, as Perl doesn't know you're not going to
try to do this:
.Sp
.Vb 4
\&       print <<ABC
\&    179231
\&    ABC
\&       + 20;
.Ve
.Sp
If you want to remove the line terminator from your here-docs,
use \f(CW\*(C`chomp()\*(C'\fR.
.Sp
.Vb 3
\&    chomp($string = <<\*(AqEND\*(Aq);
\&    This is a string.
\&    END
.Ve
.Sp
If you want your here-docs to be indented with the rest of the code,
you'll need to remove leading whitespace from each line manually:
.Sp
.Vb 4
\&    ($quote = <<\*(AqFINIS\*(Aq) =~ s/^\es+//gm;
\&       The Road goes ever on and on,
\&       down from the door where it began.
\&    FINIS
.Ve
.Sp
If you use a here-doc within a delimited construct, such as in \f(CW\*(C`s///eg\*(C'\fR,
the quoted material must still come on the line following the
\&\f(CW\*(C`<<FOO\*(C'\fR marker, which means it may be inside the delimited
construct:
.Sp
.Vb 4
\&    s/this/<<E . \*(Aqthat\*(Aq
\&    the other
\&    E
\&     . \*(Aqmore \*(Aq/eg;
.Ve
.Sp
It works this way as of Perl 5.18.  Historically, it was inconsistent, and
you would have to write
.Sp
.Vb 4
\&    s/this/<<E . \*(Aqthat\*(Aq
\&     . \*(Aqmore \*(Aq/eg;
\&    the other
\&    E
.Ve
.Sp
outside of string evals.
.Sp
Additionally, quoting rules for the end-of-string identifier are
unrelated to Perl's quoting rules. \f(CW\*(C`q()\*(C'\fR, \f(CW\*(C`qq()\*(C'\fR, and the like are not
supported in place of \f(CW\*(Aq\*(Aq\fR and \f(CW""\fR, and the only interpolation is for
backslashing the quoting character:
.Sp
.Vb 3
\&    print << "abc\e"def";
\&    testing...
\&    abc"def
.Ve
.Sp
Finally, quoted strings cannot span multiple lines.  The general rule is
that the identifier must be a string literal.  Stick with that, and you
should be safe.
.RE
.SS "Gory details of parsing quoted constructs"
.IX Xref "quote, gory details"
.IX Subsection "Gory details of parsing quoted constructs"
When presented with something that might have several different
interpretations, Perl uses the \fB\s-1DWIM\s0\fR (that's \*(L"Do What I Mean\*(R")
principle to pick the most probable interpretation.  This strategy
is so successful that Perl programmers often do not suspect the
ambivalence of what they write.  But from time to time, Perl's
notions differ substantially from what the author honestly meant.
.PP
This section hopes to clarify how Perl handles quoted constructs.
Although the most common reason to learn this is to unravel labyrinthine
regular expressions, because the initial steps of parsing are the
same for all quoting operators, they are all discussed together.
.PP
The most important Perl parsing rule is the first one discussed
below: when processing a quoted construct, Perl first finds the end
of that construct, then interprets its contents.  If you understand
this rule, you may skip the rest of this section on the first
reading.  The other rules are likely to contradict the user's
expectations much less frequently than this first one.
.PP
Some passes discussed below are performed concurrently, but because
their results are the same, we consider them individually.  For different
quoting constructs, Perl performs different numbers of passes, from
one to four, but these passes are always performed in the same order.
.IP "Finding the end" 4
.IX Item "Finding the end"
The first pass is finding the end of the quoted construct, where
the information about the delimiters is used in parsing.
During this search, text between the starting and ending delimiters
is copied to a safe location. The text copied gets delimiter-independent.
.Sp
If the construct is a here-doc, the ending delimiter is a line
that has a terminating string as the content. Therefore \f(CW\*(C`<<EOF\*(C'\fR is
terminated by \f(CW\*(C`EOF\*(C'\fR immediately followed by \f(CW"\en"\fR and starting
from the first column of the terminating line.
When searching for the terminating line of a here-doc, nothing
is skipped. In other words, lines after the here-doc syntax
are compared with the terminating string line by line.
.Sp
For the constructs except here-docs, single characters are used as starting
and ending delimiters. If the starting delimiter is an opening punctuation
(that is \f(CW\*(C`(\*(C'\fR, \f(CW\*(C`[\*(C'\fR, \f(CW\*(C`{\*(C'\fR, or \f(CW\*(C`<\*(C'\fR), the ending delimiter is the
corresponding closing punctuation (that is \f(CW\*(C`)\*(C'\fR, \f(CW\*(C`]\*(C'\fR, \f(CW\*(C`}\*(C'\fR, or \f(CW\*(C`>\*(C'\fR).
If the starting delimiter is an unpaired character like \f(CW\*(C`/\*(C'\fR or a closing
punctuation, the ending delimiter is same as the starting delimiter.
Therefore a \f(CW\*(C`/\*(C'\fR terminates a \f(CW\*(C`qq//\*(C'\fR construct, while a \f(CW\*(C`]\*(C'\fR terminates
\&\f(CW\*(C`qq[]\*(C'\fR and \f(CW\*(C`qq]]\*(C'\fR constructs.
.Sp
When searching for single-character delimiters, escaped delimiters
and \f(CW\*(C`\e\e\*(C'\fR are skipped.  For example, while searching for terminating \f(CW\*(C`/\*(C'\fR,
combinations of \f(CW\*(C`\e\e\*(C'\fR and \f(CW\*(C`\e/\*(C'\fR are skipped.  If the delimiters are
bracketing, nested pairs are also skipped.  For example, while searching
for closing \f(CW\*(C`]\*(C'\fR paired with the opening \f(CW\*(C`[\*(C'\fR, combinations of \f(CW\*(C`\e\e\*(C'\fR, \f(CW\*(C`\e]\*(C'\fR,
and \f(CW\*(C`\e[\*(C'\fR are all skipped, and nested \f(CW\*(C`[\*(C'\fR and \f(CW\*(C`]\*(C'\fR are skipped as well.
However, when backslashes are used as the delimiters (like \f(CW\*(C`qq\e\e\*(C'\fR and
\&\f(CW\*(C`tr\e\e\e\*(C'\fR), nothing is skipped.
During the search for the end, backslashes that escape delimiters or
other backslashes are removed (exactly speaking, they are not copied to the
safe location).
.Sp
For constructs with three-part delimiters (\f(CW\*(C`s///\*(C'\fR, \f(CW\*(C`y///\*(C'\fR, and
\&\f(CW\*(C`tr///\*(C'\fR), the search is repeated once more.
If the first delimiter is not an opening punctuation, three delimiters must
be same such as \f(CW\*(C`s!!!\*(C'\fR and \f(CW\*(C`tr)))\*(C'\fR, in which case the second delimiter
terminates the left part and starts the right part at once.
If the left part is delimited by bracketing punctuation (that is \f(CW\*(C`()\*(C'\fR,
\&\f(CW\*(C`[]\*(C'\fR, \f(CW\*(C`{}\*(C'\fR, or \f(CW\*(C`<>\*(C'\fR), the right part needs another pair of
delimiters such as \f(CW\*(C`s(){}\*(C'\fR and \f(CW\*(C`tr[]//\*(C'\fR.  In these cases, whitespace
and comments are allowed between both parts, though the comment must follow
at least one whitespace character; otherwise a character expected as the 
start of the comment may be regarded as the starting delimiter of the right part.
.Sp
During this search no attention is paid to the semantics of the construct.
Thus:
.Sp
.Vb 1
\&    "$hash{"$foo/$bar"}"
.Ve
.Sp
or:
.Sp
.Vb 3
\&    m/
\&      bar       # NOT a comment, this slash / terminated m//!
\&     /x
.Ve
.Sp
do not form legal quoted expressions.   The quoted part ends on the
first \f(CW\*(C`"\*(C'\fR and \f(CW\*(C`/\*(C'\fR, and the rest happens to be a syntax error.
Because the slash that terminated \f(CW\*(C`m//\*(C'\fR was followed by a \f(CW\*(C`SPACE\*(C'\fR,
the example above is not \f(CW\*(C`m//x\*(C'\fR, but rather \f(CW\*(C`m//\*(C'\fR with no \f(CW\*(C`/x\*(C'\fR
modifier.  So the embedded \f(CW\*(C`#\*(C'\fR is interpreted as a literal \f(CW\*(C`#\*(C'\fR.
.Sp
Also no attention is paid to \f(CW\*(C`\ec\e\*(C'\fR (multichar control char syntax) during
this search. Thus the second \f(CW\*(C`\e\*(C'\fR in \f(CW\*(C`qq/\ec\e/\*(C'\fR is interpreted as a part
of \f(CW\*(C`\e/\*(C'\fR, and the following \f(CW\*(C`/\*(C'\fR is not recognized as a delimiter.
Instead, use \f(CW\*(C`\e034\*(C'\fR or \f(CW\*(C`\ex1c\*(C'\fR at the end of quoted constructs.
.IP "Interpolation" 4
.IX Xref "interpolation"
.IX Item "Interpolation"
The next step is interpolation in the text obtained, which is now
delimiter-independent.  There are multiple cases.
.RS 4
.ie n .IP """<<\*(AqEOF\*(Aq""" 4
.el .IP "\f(CW<<\*(AqEOF\*(Aq\fR" 4
.IX Item "<<EOF"
No interpolation is performed.
Note that the combination \f(CW\*(C`\e\e\*(C'\fR is left intact, since escaped delimiters
are not available for here-docs.
.ie n .IP """m\*(Aq\*(Aq"", the pattern of ""s\*(Aq\*(Aq\*(Aq""" 4
.el .IP "\f(CWm\*(Aq\*(Aq\fR, the pattern of \f(CWs\*(Aq\*(Aq\*(Aq\fR" 4
.IX Item "m, the pattern of s"
No interpolation is performed at this stage.
Any backslashed sequences including \f(CW\*(C`\e\e\*(C'\fR are treated at the stage
to \*(L"parsing regular expressions\*(R".
.ie n .IP "\*(Aq\*(Aq, ""q//"", ""tr\*(Aq\*(Aq\*(Aq"", ""y\*(Aq\*(Aq\*(Aq"", the replacement of ""s\*(Aq\*(Aq\*(Aq""" 4
.el .IP "\f(CW\*(Aq\*(Aq\fR, \f(CWq//\fR, \f(CWtr\*(Aq\*(Aq\*(Aq\fR, \f(CWy\*(Aq\*(Aq\*(Aq\fR, the replacement of \f(CWs\*(Aq\*(Aq\*(Aq\fR" 4
.IX Item ", q//, tr, y, the replacement of s"
The only interpolation is removal of \f(CW\*(C`\e\*(C'\fR from pairs of \f(CW\*(C`\e\e\*(C'\fR.
Therefore \f(CW\*(C`\-\*(C'\fR in \f(CW\*(C`tr\*(Aq\*(Aq\*(Aq\*(C'\fR and \f(CW\*(C`y\*(Aq\*(Aq\*(Aq\*(C'\fR is treated literally
as a hyphen and no character range is available.
\&\f(CW\*(C`\e1\*(C'\fR in the replacement of \f(CW\*(C`s\*(Aq\*(Aq\*(Aq\*(C'\fR does not work as \f(CW$1\fR.
.ie n .IP """tr///"", ""y///""" 4
.el .IP "\f(CWtr///\fR, \f(CWy///\fR" 4
.IX Item "tr///, y///"
No variable interpolation occurs.  String modifying combinations for
case and quoting such as \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, and \f(CW\*(C`\eE\*(C'\fR are not recognized.
The other escape sequences such as \f(CW\*(C`\e200\*(C'\fR and \f(CW\*(C`\et\*(C'\fR and backslashed
characters such as \f(CW\*(C`\e\e\*(C'\fR and \f(CW\*(C`\e\-\*(C'\fR are converted to appropriate literals.
The character \f(CW\*(C`\-\*(C'\fR is treated specially and therefore \f(CW\*(C`\e\-\*(C'\fR is treated
as a literal \f(CW\*(C`\-\*(C'\fR.
.ie n .IP """"", ""\`\`"", ""qq//"", ""qx//"", ""<file*glob>"", ""<<""EOF""""" 4
.el .IP "\f(CW``''\fR, \f(CW\`\`\fR, \f(CWqq//\fR, \f(CWqx//\fR, \f(CW<file*glob>\fR, \f(CW<<``EOF''\fR" 4
.IX Item """"", , qq//, qx//, <file*glob>, <<""EOF"""
\&\f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR (possibly paired with \f(CW\*(C`\eE\*(C'\fR) are
converted to corresponding Perl constructs.  Thus, \f(CW"$foo\eQbaz$bar"\fR
is converted to \f(CW\*(C`$foo . (quotemeta("baz" . $bar))\*(C'\fR internally.
The other escape sequences such as \f(CW\*(C`\e200\*(C'\fR and \f(CW\*(C`\et\*(C'\fR and backslashed
characters such as \f(CW\*(C`\e\e\*(C'\fR and \f(CW\*(C`\e\-\*(C'\fR are replaced with appropriate
expansions.
.Sp
Let it be stressed that \fIwhatever falls between \f(CI\*(C`\eQ\*(C'\fI and \f(CI\*(C`\eE\*(C'\fI\fR
is interpolated in the usual way.  Something like \f(CW"\eQ\e\eE"\fR has
no \f(CW\*(C`\eE\*(C'\fR inside.  Instead, it has \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\e\e\*(C'\fR, and \f(CW\*(C`E\*(C'\fR, so the
result is the same as for \f(CW"\e\e\e\eE"\fR.  As a general rule, backslashes
between \f(CW\*(C`\eQ\*(C'\fR and \f(CW\*(C`\eE\*(C'\fR may lead to counterintuitive results.  So,
\&\f(CW"\eQ\et\eE"\fR is converted to \f(CW\*(C`quotemeta("\et")\*(C'\fR, which is the same
as \f(CW"\e\e\et"\fR (since \s-1TAB\s0 is not alphanumeric).  Note also that:
.Sp
.Vb 2
\&  $str = \*(Aq\et\*(Aq;
\&  return "\eQ$str";
.Ve
.Sp
may be closer to the conjectural \fIintention\fR of the writer of \f(CW"\eQ\et\eE"\fR.
.Sp
Interpolated scalars and arrays are converted internally to the \f(CW\*(C`join\*(C'\fR and
\&\f(CW\*(C`.\*(C'\fR catenation operations.  Thus, \f(CW"$foo XXX \*(Aq@arr\*(Aq"\fR becomes:
.Sp
.Vb 1
\&  $foo . " XXX \*(Aq" . (join $", @arr) . "\*(Aq";
.Ve
.Sp
All operations above are performed simultaneously, left to right.
.Sp
Because the result of \f(CW"\eQ STRING \eE"\fR has all metacharacters
quoted, there is no way to insert a literal \f(CW\*(C`$\*(C'\fR or \f(CW\*(C`@\*(C'\fR inside a
\&\f(CW\*(C`\eQ\eE\*(C'\fR pair.  If protected by \f(CW\*(C`\e\*(C'\fR, \f(CW\*(C`$\*(C'\fR will be quoted to became
\&\f(CW"\e\e\e$"\fR; if not, it is interpreted as the start of an interpolated
scalar.
.Sp
Note also that the interpolation code needs to make a decision on
where the interpolated scalar ends.  For instance, whether
\&\f(CW"a $b \-> {c}"\fR really means:
.Sp
.Vb 1
\&  "a " . $b . " \-> {c}";
.Ve
.Sp
or:
.Sp
.Vb 1
\&  "a " . $b \-> {c};
.Ve
.Sp
Most of the time, the longest possible text that does not include
spaces between components and which contains matching braces or
brackets.  because the outcome may be determined by voting based
on heuristic estimators, the result is not strictly predictable.
Fortunately, it's usually correct for ambiguous cases.
.ie n .IP "the replacement of ""s///""" 4
.el .IP "the replacement of \f(CWs///\fR" 4
.IX Item "the replacement of s///"
Processing of \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR and interpolation
happens as with \f(CW\*(C`qq//\*(C'\fR constructs.
.Sp
It is at this step that \f(CW\*(C`\e1\*(C'\fR is begrudgingly converted to \f(CW$1\fR in
the replacement text of \f(CW\*(C`s///\*(C'\fR, in order to correct the incorrigible
\&\fIsed\fR hackers who haven't picked up the saner idiom yet.  A warning
is emitted if the \f(CW\*(C`use warnings\*(C'\fR pragma or the \fB\-w\fR command-line flag
(that is, the \f(CW$^W\fR variable) was set.
.ie n .IP """RE"" in ""?RE?"", ""/RE/"", ""m/RE/"", ""s/RE/foo/""," 4
.el .IP "\f(CWRE\fR in \f(CW?RE?\fR, \f(CW/RE/\fR, \f(CWm/RE/\fR, \f(CWs/RE/foo/\fR," 4
.IX Item "RE in ?RE?, /RE/, m/RE/, s/RE/foo/,"
Processing of \f(CW\*(C`\eQ\*(C'\fR, \f(CW\*(C`\eU\*(C'\fR, \f(CW\*(C`\eu\*(C'\fR, \f(CW\*(C`\eL\*(C'\fR, \f(CW\*(C`\el\*(C'\fR, \f(CW\*(C`\eF\*(C'\fR, \f(CW\*(C`\eE\*(C'\fR,
and interpolation happens (almost) as with \f(CW\*(C`qq//\*(C'\fR constructs.
.Sp
Processing of \f(CW\*(C`\eN{...}\*(C'\fR is also done here, and compiled into an intermediate
form for the regex compiler.  (This is because, as mentioned below, the regex
compilation may be done at execution time, and \f(CW\*(C`\eN{...}\*(C'\fR is a compile-time
construct.)
.Sp
However any other combinations of \f(CW\*(C`\e\*(C'\fR followed by a character
are not substituted but only skipped, in order to parse them
as regular expressions at the following step.
As \f(CW\*(C`\ec\*(C'\fR is skipped at this step, \f(CW\*(C`@\*(C'\fR of \f(CW\*(C`\ec@\*(C'\fR in \s-1RE\s0 is possibly
treated as an array symbol (for example \f(CW@foo\fR),
even though the same text in \f(CW\*(C`qq//\*(C'\fR gives interpolation of \f(CW\*(C`\ec@\*(C'\fR.
.Sp
Code blocks such as \f(CW\*(C`(?{BLOCK})\*(C'\fR are handled by temporarily passing control
back to the perl parser, in a similar way that an interpolated array
subscript expression such as \f(CW"foo$array[1+f("[xyz")]bar"\fR would be.
.Sp
Moreover, inside \f(CW\*(C`(?{BLOCK})\*(C'\fR, \f(CW\*(C`(?# comment )\*(C'\fR, and
a \f(CW\*(C`#\*(C'\fR\-comment in a \f(CW\*(C`//x\*(C'\fR\-regular expression, no processing is
performed whatsoever.  This is the first step at which the presence
of the \f(CW\*(C`//x\*(C'\fR modifier is relevant.
.Sp
Interpolation in patterns has several quirks: \f(CW$|\fR, \f(CW$(\fR, \f(CW$)\fR, \f(CW\*(C`@+\*(C'\fR
and \f(CW\*(C`@\-\*(C'\fR are not interpolated, and constructs \f(CW$var[SOMETHING]\fR are
voted (by several different estimators) to be either an array element
or \f(CW$var\fR followed by an \s-1RE\s0 alternative.  This is where the notation
\&\f(CW\*(C`${arr[$bar]}\*(C'\fR comes handy: \f(CW\*(C`/${arr[0\-9]}/\*(C'\fR is interpreted as
array element \f(CW\*(C`\-9\*(C'\fR, not as a regular expression from the variable
\&\f(CW$arr\fR followed by a digit, which would be the interpretation of
\&\f(CW\*(C`/$arr[0\-9]/\*(C'\fR.  Since voting among different estimators may occur,
the result is not predictable.
.Sp
The lack of processing of \f(CW\*(C`\e\e\*(C'\fR creates specific restrictions on
the post-processed text.  If the delimiter is \f(CW\*(C`/\*(C'\fR, one cannot get
the combination \f(CW\*(C`\e/\*(C'\fR into the result of this step.  \f(CW\*(C`/\*(C'\fR will
finish the regular expression, \f(CW\*(C`\e/\*(C'\fR will be stripped to \f(CW\*(C`/\*(C'\fR on
the previous step, and \f(CW\*(C`\e\e/\*(C'\fR will be left as is.  Because \f(CW\*(C`/\*(C'\fR is
equivalent to \f(CW\*(C`\e/\*(C'\fR inside a regular expression, this does not
matter unless the delimiter happens to be character special to the
\&\s-1RE\s0 engine, such as in \f(CW\*(C`s*foo*bar*\*(C'\fR, \f(CW\*(C`m[foo]\*(C'\fR, or \f(CW\*(C`?foo?\*(C'\fR; or an
alphanumeric char, as in:
.Sp
.Vb 1
\&  m m ^ a \es* b mmx;
.Ve
.Sp
In the \s-1RE\s0 above, which is intentionally obfuscated for illustration, the
delimiter is \f(CW\*(C`m\*(C'\fR, the modifier is \f(CW\*(C`mx\*(C'\fR, and after delimiter-removal the
\&\s-1RE\s0 is the same as for \f(CW\*(C`m/ ^ a \es* b /mx\*(C'\fR.  There's more than one
reason you're encouraged to restrict your delimiters to non-alphanumeric,
non-whitespace choices.
.RE
.RS 4
.Sp
This step is the last one for all constructs except regular expressions,
which are processed further.
.RE
.IP "parsing regular expressions" 4
.IX Xref "regexp, parse"
.IX Item "parsing regular expressions"
Previous steps were performed during the compilation of Perl code,
but this one happens at run time, although it may be optimized to
be calculated at compile time if appropriate.  After preprocessing
described above, and possibly after evaluation if concatenation,
joining, casing translation, or metaquoting are involved, the
resulting \fIstring\fR is passed to the \s-1RE\s0 engine for compilation.
.Sp
Whatever happens in the \s-1RE\s0 engine might be better discussed in perlre,
but for the sake of continuity, we shall do so here.
.Sp
This is another step where the presence of the \f(CW\*(C`//x\*(C'\fR modifier is
relevant.  The \s-1RE\s0 engine scans the string from left to right and
converts it to a finite automaton.
.Sp
Backslashed characters are either replaced with corresponding
literal strings (as with \f(CW\*(C`\e{\*(C'\fR), or else they generate special nodes
in the finite automaton (as with \f(CW\*(C`\eb\*(C'\fR).  Characters special to the
\&\s-1RE\s0 engine (such as \f(CW\*(C`|\*(C'\fR) generate corresponding nodes or groups of
nodes.  \f(CW\*(C`(?#...)\*(C'\fR comments are ignored.  All the rest is either
converted to literal strings to match, or else is ignored (as is
whitespace and \f(CW\*(C`#\*(C'\fR\-style comments if \f(CW\*(C`//x\*(C'\fR is present).
.Sp
Parsing of the bracketed character class construct, \f(CW\*(C`[...]\*(C'\fR, is
rather different than the rule used for the rest of the pattern.
The terminator of this construct is found using the same rules as
for finding the terminator of a \f(CW\*(C`{}\*(C'\fR\-delimited construct, the only
exception being that \f(CW\*(C`]\*(C'\fR immediately following \f(CW\*(C`[\*(C'\fR is treated as
though preceded by a backslash.
.Sp
The terminator of runtime \f(CW\*(C`(?{...})\*(C'\fR is found by temporarily switching
control to the perl parser, which should stop at the point where the
logically balancing terminating \f(CW\*(C`}\*(C'\fR is found.
.Sp
It is possible to inspect both the string given to \s-1RE\s0 engine and the
resulting finite automaton.  See the arguments \f(CW\*(C`debug\*(C'\fR/\f(CW\*(C`debugcolor\*(C'\fR
in the \f(CW\*(C`use re\*(C'\fR pragma, as well as Perl's \fB\-Dr\fR command-line
switch documented in \*(L"Command Switches\*(R" in perlrun.
.IP "Optimization of regular expressions" 4
.IX Xref "regexp, optimization"
.IX Item "Optimization of regular expressions"
This step is listed for completeness only.  Since it does not change
semantics, details of this step are not documented and are subject
to change without notice.  This step is performed over the finite
automaton that was generated during the previous pass.
.Sp
It is at this stage that \f(CW\*(C`split()\*(C'\fR silently optimizes \f(CW\*(C`/^/\*(C'\fR to
mean \f(CW\*(C`/^/m\*(C'\fR.
.SS "I/O Operators"
.IX Xref "operator, i o operator, io io while filehandle <> @ARGV"
.IX Subsection "I/O Operators"
There are several I/O operators you should know about.
.PP
A string enclosed by backticks (grave accents) first undergoes
double-quote interpolation.  It is then interpreted as an external
command, and the output of that command is the value of the
backtick string, like in a shell.  In scalar context, a single string
consisting of all output is returned.  In list context, a list of
values is returned, one per line of output.  (You can set \f(CW$/\fR to use
a different line terminator.)  The command is executed each time the
pseudo-literal is evaluated.  The status value of the command is
returned in \f(CW$?\fR (see perlvar for the interpretation of \f(CW$?\fR).
Unlike in \fBcsh\fR, no translation is done on the return data\*(--newlines
remain newlines.  Unlike in any of the shells, single quotes do not
hide variable names in the command from interpretation.  To pass a
literal dollar-sign through to the shell you need to hide it with a
backslash.  The generalized form of backticks is \f(CW\*(C`qx//\*(C'\fR.  (Because
backticks always undergo shell expansion as well, see perlsec for
security concerns.)
.IX Xref "qx ` `` backtick glob"
.PP
In scalar context, evaluating a filehandle in angle brackets yields
the next line from that file (the newline, if any, included), or
\&\f(CW\*(C`undef\*(C'\fR at end-of-file or on error.  When \f(CW$/\fR is set to \f(CW\*(C`undef\*(C'\fR
(sometimes known as file-slurp mode) and the file is empty, it
returns \f(CW\*(Aq\*(Aq\fR the first time, followed by \f(CW\*(C`undef\*(C'\fR subsequently.
.PP
Ordinarily you must assign the returned value to a variable, but
there is one situation where an automatic assignment happens.  If
and only if the input symbol is the only thing inside the conditional
of a \f(CW\*(C`while\*(C'\fR statement (even if disguised as a \f(CW\*(C`for(;;)\*(C'\fR loop),
the value is automatically assigned to the global variable \f(CW$_\fR,
destroying whatever was there previously.  (This may seem like an
odd thing to you, but you'll use the construct in almost every Perl
script you write.)  The \f(CW$_\fR variable is not implicitly localized.
You'll have to put a \f(CW\*(C`local $_;\*(C'\fR before the loop if you want that
to happen.
.PP
The following lines are equivalent:
.PP
.Vb 7
\&    while (defined($_ = <STDIN>)) { print; }
\&    while ($_ = <STDIN>) { print; }
\&    while (<STDIN>) { print; }
\&    for (;<STDIN>;) { print; }
\&    print while defined($_ = <STDIN>);
\&    print while ($_ = <STDIN>);
\&    print while <STDIN>;
.Ve
.PP
This also behaves similarly, but assigns to a lexical variable 
instead of to \f(CW$_\fR:
.PP
.Vb 1
\&    while (my $line = <STDIN>) { print $line }
.Ve
.PP
In these loop constructs, the assigned value (whether assignment
is automatic or explicit) is then tested to see whether it is
defined.  The defined test avoids problems where the line has a string
value that would be treated as false by Perl; for example a "\*(L" or
a \*(R"0" with no trailing newline.  If you really mean for such values
to terminate the loop, they should be tested for explicitly:
.PP
.Vb 2
\&    while (($_ = <STDIN>) ne \*(Aq0\*(Aq) { ... }
\&    while (<STDIN>) { last unless $_; ... }
.Ve
.PP
In other boolean contexts, \f(CW\*(C`<FILEHANDLE>\*(C'\fR without an
explicit \f(CW\*(C`defined\*(C'\fR test or comparison elicits a warning if the
\&\f(CW\*(C`use warnings\*(C'\fR pragma or the \fB\-w\fR
command-line switch (the \f(CW$^W\fR variable) is in effect.
.PP
The filehandles \s-1STDIN, STDOUT,\s0 and \s-1STDERR\s0 are predefined.  (The
filehandles \f(CW\*(C`stdin\*(C'\fR, \f(CW\*(C`stdout\*(C'\fR, and \f(CW\*(C`stderr\*(C'\fR will also work except
in packages, where they would be interpreted as local identifiers
rather than global.)  Additional filehandles may be created with
the \fIopen()\fR function, amongst others.  See perlopentut and
\&\*(L"open\*(R" in perlfunc for details on this.
.IX Xref "stdin stdout sterr"
.PP
If a <\s-1FILEHANDLE\s0> is used in a context that is looking for
a list, a list comprising all input lines is returned, one line per
list element.  It's easy to grow to a rather large data space this
way, so use with care.
.PP
<\s-1FILEHANDLE\s0> may also be spelled \f(CW\*(C`readline(*FILEHANDLE)\*(C'\fR.
See \*(L"readline\*(R" in perlfunc.
.PP
The null filehandle <> is special: it can be used to emulate the
behavior of \fBsed\fR and \fBawk\fR, and any other Unix filter program
that takes a list of filenames, doing the same to each line
of input from all of them.  Input from <> comes either from
standard input, or from each file listed on the command line.  Here's
how it works: the first time <> is evaluated, the \f(CW@ARGV\fR array is
checked, and if it is empty, \f(CW$ARGV[0]\fR is set to \*(L"\-\*(R", which when opened
gives you standard input.  The \f(CW@ARGV\fR array is then processed as a list
of filenames.  The loop
.PP
.Vb 3
\&    while (<>) {
\&        ...                     # code for each line
\&    }
.Ve
.PP
is equivalent to the following Perl-like pseudo code:
.PP
.Vb 7
\&    unshift(@ARGV, \*(Aq\-\*(Aq) unless @ARGV;
\&    while ($ARGV = shift) {
\&        open(ARGV, $ARGV);
\&        while (<ARGV>) {
\&            ...         # code for each line
\&        }
\&    }
.Ve
.PP
except that it isn't so cumbersome to say, and will actually work.
It really does shift the \f(CW@ARGV\fR array and put the current filename
into the \f(CW$ARGV\fR variable.  It also uses filehandle \fI\s-1ARGV\s0\fR
internally. <> is just a synonym for <\s-1ARGV\s0>, which
is magical.  (The pseudo code above doesn't work because it treats
<\s-1ARGV\s0> as non-magical.)
.PP
Since the null filehandle uses the two argument form of \*(L"open\*(R" in perlfunc
it interprets special characters, so if you have a script like this:
.PP
.Vb 3
\&    while (<>) {
\&        print;
\&    }
.Ve
.PP
and call it with \f(CW\*(C`perl dangerous.pl \*(Aqrm \-rfv *|\*(Aq\*(C'\fR, it actually opens a
pipe, executes the \f(CW\*(C`rm\*(C'\fR command and reads \f(CW\*(C`rm\*(C'\fR's output from that pipe.
If you want all items in \f(CW@ARGV\fR to be interpreted as file names, you
can use the module \f(CW\*(C`ARGV::readonly\*(C'\fR from \s-1CPAN.\s0
.PP
You can modify \f(CW@ARGV\fR before the first <> as long as the array ends up
containing the list of filenames you really want.  Line numbers (\f(CW$.\fR)
continue as though the input were one big happy file.  See the example
in \*(L"eof\*(R" in perlfunc for how to reset line numbers on each file.
.PP
If you want to set \f(CW@ARGV\fR to your own list of files, go right ahead.
This sets \f(CW@ARGV\fR to all plain text files if no \f(CW@ARGV\fR was given:
.PP
.Vb 1
\&    @ARGV = grep { \-f && \-T } glob(\*(Aq*\*(Aq) unless @ARGV;
.Ve
.PP
You can even set them to pipe commands.  For example, this automatically
filters compressed arguments through \fBgzip\fR:
.PP
.Vb 1
\&    @ARGV = map { /\e.(gz|Z)$/ ? "gzip \-dc < $_ |" : $_ } @ARGV;
.Ve
.PP
If you want to pass switches into your script, you can use one of the
Getopts modules or put a loop on the front like this:
.PP
.Vb 7
\&    while ($_ = $ARGV[0], /^\-/) {
\&        shift;
\&        last if /^\-\-$/;
\&        if (/^\-D(.*)/) { $debug = $1 }
\&        if (/^\-v/)     { $verbose++  }
\&        # ...           # other switches
\&    }
\&
\&    while (<>) {
\&        # ...           # code for each line
\&    }
.Ve
.PP
The <> symbol will return \f(CW\*(C`undef\*(C'\fR for end-of-file only once.
If you call it again after this, it will assume you are processing another
\&\f(CW@ARGV\fR list, and if you haven't set \f(CW@ARGV\fR, will read input from \s-1STDIN.\s0
.PP
If what the angle brackets contain is a simple scalar variable (for example,
<$foo>), then that variable contains the name of the
filehandle to input from, or its typeglob, or a reference to the
same.  For example:
.PP
.Vb 2
\&    $fh = \e*STDIN;
\&    $line = <$fh>;
.Ve
.PP
If what's within the angle brackets is neither a filehandle nor a simple
scalar variable containing a filehandle name, typeglob, or typeglob
reference, it is interpreted as a filename pattern to be globbed, and
either a list of filenames or the next filename in the list is returned,
depending on context.  This distinction is determined on syntactic
grounds alone.  That means \f(CW\*(C`<$x>\*(C'\fR is always a \fIreadline()\fR from
an indirect handle, but \f(CW\*(C`<$hash{key}>\*(C'\fR is always a \fIglob()\fR.
That's because \f(CW$x\fR is a simple scalar variable, but \f(CW$hash{key}\fR is
not\*(--it's a hash element.  Even \f(CW\*(C`<$x >\*(C'\fR (note the extra space)
is treated as \f(CW\*(C`glob("$x ")\*(C'\fR, not \f(CW\*(C`readline($x)\*(C'\fR.
.PP
One level of double-quote interpretation is done first, but you can't
say \f(CW\*(C`<$foo>\*(C'\fR because that's an indirect filehandle as explained
in the previous paragraph.  (In older versions of Perl, programmers
would insert curly brackets to force interpretation as a filename glob:
\&\f(CW\*(C`<${foo}>\*(C'\fR.  These days, it's considered cleaner to call the
internal function directly as \f(CW\*(C`glob($foo)\*(C'\fR, which is probably the right
way to have done it in the first place.)  For example:
.PP
.Vb 3
\&    while (<*.c>) {
\&        chmod 0644, $_;
\&    }
.Ve
.PP
is roughly equivalent to:
.PP
.Vb 5
\&    open(FOO, "echo *.c | tr \-s \*(Aq \et\er\ef\*(Aq \*(Aq\e\e012\e\e012\e\e012\e\e012\*(Aq|");
\&    while (<FOO>) {
\&        chomp;
\&        chmod 0644, $_;
\&    }
.Ve
.PP
except that the globbing is actually done internally using the standard
\&\f(CW\*(C`File::Glob\*(C'\fR extension.  Of course, the shortest way to do the above is:
.PP
.Vb 1
\&    chmod 0644, <*.c>;
.Ve
.PP
A (file)glob evaluates its (embedded) argument only when it is
starting a new list.  All values must be read before it will start
over.  In list context, this isn't important because you automatically
get them all anyway.  However, in scalar context the operator returns
the next value each time it's called, or \f(CW\*(C`undef\*(C'\fR when the list has
run out.  As with filehandle reads, an automatic \f(CW\*(C`defined\*(C'\fR is
generated when the glob occurs in the test part of a \f(CW\*(C`while\*(C'\fR,
because legal glob returns (for example,
a file called \fI0\fR) would otherwise
terminate the loop.  Again, \f(CW\*(C`undef\*(C'\fR is returned only once.  So if
you're expecting a single value from a glob, it is much better to
say
.PP
.Vb 1
\&    ($file) = <blurch*>;
.Ve
.PP
than
.PP
.Vb 1
\&    $file = <blurch*>;
.Ve
.PP
because the latter will alternate between returning a filename and
returning false.
.PP
If you're trying to do variable interpolation, it's definitely better
to use the \fIglob()\fR function, because the older notation can cause people
to become confused with the indirect filehandle notation.
.PP
.Vb 2
\&    @files = glob("$dir/*.[ch]");
\&    @files = glob($files[$i]);
.Ve
.SS "Constant Folding"
.IX Xref "constant folding folding"
.IX Subsection "Constant Folding"
Like C, Perl does a certain amount of expression evaluation at
compile time whenever it determines that all arguments to an
operator are static and have no side effects.  In particular, string
concatenation happens at compile time between literals that don't do
variable substitution.  Backslash interpolation also happens at
compile time.  You can say
.PP
.Vb 3
\&      \*(AqNow is the time for all\*(Aq
\&    . "\en" 
\&    .  \*(Aqgood men to come to.\*(Aq
.Ve
.PP
and this all reduces to one string internally.  Likewise, if
you say
.PP
.Vb 3
\&    foreach $file (@filenames) {
\&        if (\-s $file > 5 + 100 * 2**16) {  }
\&    }
.Ve
.PP
the compiler precomputes the number which that expression
represents so that the interpreter won't have to.
.SS "No-ops"
.IX Xref "no-op nop"
.IX Subsection "No-ops"
Perl doesn't officially have a no-op operator, but the bare constants
\&\f(CW0\fR and \f(CW1\fR are special-cased not to produce a warning in void
context, so you can for example safely do
.PP
.Vb 1
\&    1 while foo();
.Ve
.SS "Bitwise String Operators"
.IX Xref "operator, bitwise, string"
.IX Subsection "Bitwise String Operators"
Bitstrings of any size may be manipulated by the bitwise operators
(\f(CW\*(C`~ | & ^\*(C'\fR).
.PP
If the operands to a binary bitwise op are strings of different
sizes, \fB|\fR and \fB^\fR ops act as though the shorter operand had
additional zero bits on the right, while the \fB&\fR op acts as though
the longer operand were truncated to the length of the shorter.
The granularity for such extension or truncation is one or more
bytes.
.PP
.Vb 5
\&    # ASCII\-based examples
\&    print "j p \en" ^ " a h";            # prints "JAPH\en"
\&    print "JA" | "  ph\en";              # prints "japh\en"
\&    print "japh\enJunk" & \*(Aq_\|_\|_\|_\|_\*(Aq;       # prints "JAPH\en";
\&    print \*(Aqp N$\*(Aq ^ " E<H\en";            # prints "Perl\en";
.Ve
.PP
If you are intending to manipulate bitstrings, be certain that
you're supplying bitstrings: If an operand is a number, that will imply
a \fBnumeric\fR bitwise operation.  You may explicitly show which type of
operation you intend by using \f(CW""\fR or \f(CW\*(C`0+\*(C'\fR, as in the examples below.
.PP
.Vb 4
\&    $foo =  150  |  105;        # yields 255  (0x96 | 0x69 is 0xFF)
\&    $foo = \*(Aq150\*(Aq |  105;        # yields 255
\&    $foo =  150  | \*(Aq105\*(Aq;       # yields 255
\&    $foo = \*(Aq150\*(Aq | \*(Aq105\*(Aq;       # yields string \*(Aq155\*(Aq (under ASCII)
\&
\&    $baz = 0+$foo & 0+$bar;     # both ops explicitly numeric
\&    $biz = "$foo" ^ "$bar";     # both ops explicitly stringy
.Ve
.PP
See \*(L"vec\*(R" in perlfunc for information on how to manipulate individual bits
in a bit vector.
.SS "Integer Arithmetic"
.IX Xref "integer"
.IX Subsection "Integer Arithmetic"
By default, Perl assumes that it must do most of its arithmetic in
floating point.  But by saying
.PP
.Vb 1
\&    use integer;
.Ve
.PP
you may tell the compiler to use integer operations
(see integer for a detailed explanation) from here to the end of
the enclosing \s-1BLOCK. \s0 An inner \s-1BLOCK\s0 may countermand this by saying
.PP
.Vb 1
\&    no integer;
.Ve
.PP
which lasts until the end of that \s-1BLOCK. \s0 Note that this doesn't
mean everything is an integer, merely that Perl will use integer
operations for arithmetic, comparison, and bitwise operators.  For
example, even under \f(CW\*(C`use integer\*(C'\fR, if you take the \f(CWsqrt(2)\fR, you'll
still get \f(CW1.4142135623731\fR or so.
.PP
Used on numbers, the bitwise operators (\*(L"&\*(R", \*(L"|\*(R", \*(L"^\*(R", \*(L"~\*(R", \*(L"<<\*(R",
and \*(L">>\*(R") always produce integral results.  (But see also
\&\*(L"Bitwise String Operators\*(R".)  However, \f(CW\*(C`use integer\*(C'\fR still has meaning for
them.  By default, their results are interpreted as unsigned integers, but
if \f(CW\*(C`use integer\*(C'\fR is in effect, their results are interpreted
as signed integers.  For example, \f(CW\*(C`~0\*(C'\fR usually evaluates to a large
integral value.  However, \f(CW\*(C`use integer; ~0\*(C'\fR is \f(CW\*(C`\-1\*(C'\fR on two's-complement
machines.
.SS "Floating-point Arithmetic"
.IX Subsection "Floating-point Arithmetic"

.IX Xref "floating-point floating point float real"
.PP
While \f(CW\*(C`use integer\*(C'\fR provides integer-only arithmetic, there is no
analogous mechanism to provide automatic rounding or truncation to a
certain number of decimal places.  For rounding to a certain number
of digits, \fIsprintf()\fR or \fIprintf()\fR is usually the easiest route.
See perlfaq4.
.PP
Floating-point numbers are only approximations to what a mathematician
would call real numbers.  There are infinitely more reals than floats,
so some corners must be cut.  For example:
.PP
.Vb 2
\&    printf "%.20g\en", 123456789123456789;
\&    #        produces 123456789123456784
.Ve
.PP
Testing for exact floating-point equality or inequality is not a
good idea.  Here's a (relatively expensive) work-around to compare
whether two floating-point numbers are equal to a particular number of
decimal places.  See Knuth, volume \s-1II,\s0 for a more robust treatment of
this topic.
.PP
.Vb 7
\&    sub fp_equal {
\&        my ($X, $Y, $POINTS) = @_;
\&        my ($tX, $tY);
\&        $tX = sprintf("%.${POINTS}g", $X);
\&        $tY = sprintf("%.${POINTS}g", $Y);
\&        return $tX eq $tY;
\&    }
.Ve
.PP
The \s-1POSIX\s0 module (part of the standard perl distribution) implements
\&\fIceil()\fR, \fIfloor()\fR, and other mathematical and trigonometric functions.
The Math::Complex module (part of the standard perl distribution)
defines mathematical functions that work on both the reals and the
imaginary numbers.  Math::Complex not as efficient as \s-1POSIX,\s0 but
\&\s-1POSIX\s0 can't work with complex numbers.
.PP
Rounding in financial applications can have serious implications, and
the rounding method used should be specified precisely.  In these
cases, it probably pays not to trust whichever system rounding is
being used by Perl, but to instead implement the rounding function you
need yourself.
.SS "Bigger Numbers"
.IX Xref "number, arbitrary precision"
.IX Subsection "Bigger Numbers"
The standard \f(CW\*(C`Math::BigInt\*(C'\fR, \f(CW\*(C`Math::BigRat\*(C'\fR, and \f(CW\*(C`Math::BigFloat\*(C'\fR modules,
along with the \f(CW\*(C`bignum\*(C'\fR, \f(CW\*(C`bigint\*(C'\fR, and \f(CW\*(C`bigrat\*(C'\fR pragmas, provide
variable-precision arithmetic and overloaded operators, although
they're currently pretty slow. At the cost of some space and
considerable speed, they avoid the normal pitfalls associated with
limited-precision representations.
.PP
.Vb 5
\&        use 5.010;
\&        use bigint;  # easy interface to Math::BigInt
\&        $x = 123456789123456789;
\&        say $x * $x;
\&    +15241578780673678515622620750190521
.Ve
.PP
Or with rationals:
.PP
.Vb 8
\&        use 5.010;
\&        use bigrat;
\&        $a = 3/22;
\&        $b = 4/6;
\&        say "a/b is ", $a/$b;
\&        say "a*b is ", $a*$b;
\&    a/b is 9/44
\&    a*b is 1/11
.Ve
.PP
Several modules let you calculate with (bound only by memory and \s-1CPU\s0 time)
unlimited or fixed precision. There are also some non-standard modules that
provide faster implementations via external C libraries.
.PP
Here is a short, but incomplete summary:
.PP
.Vb 10
\&  Math::String           treat string sequences like numbers
\&  Math::FixedPrecision   calculate with a fixed precision
\&  Math::Currency         for currency calculations
\&  Bit::Vector            manipulate bit vectors fast (uses C)
\&  Math::BigIntFast       Bit::Vector wrapper for big numbers
\&  Math::Pari             provides access to the Pari C library
\&  Math::Cephes           uses the external Cephes C library (no
\&                         big numbers)
\&  Math::Cephes::Fraction fractions via the Cephes library
\&  Math::GMP              another one using an external C library
\&  Math::GMPz             an alternative interface to libgmp\*(Aqs big ints
\&  Math::GMPq             an interface to libgmp\*(Aqs fraction numbers
\&  Math::GMPf             an interface to libgmp\*(Aqs floating point numbers
.Ve
.PP
Choose wisely.
                                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlopenbsd.1                                0100644 0001750 0001750 00000012134 12566207442 023256  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOPENBSD 1"
.TH PERLOPENBSD 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlopenbsd \- Perl version 5 on OpenBSD systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of OpenBSD that will affect how Perl
version 5 (hereafter just Perl) is compiled and/or runs.
.SS "OpenBSD core dumps from getprotobyname_r and getservbyname_r with ithreads"
.IX Subsection "OpenBSD core dumps from getprotobyname_r and getservbyname_r with ithreads"
When Perl is configured to use ithreads, it will use re-entrant library calls
in preference to non-re-entrant versions.  There is an incompatibility in
OpenBSD's \f(CW\*(C`getprotobyname_r\*(C'\fR and \f(CW\*(C`getservbyname_r\*(C'\fR function in versions 3.7
and later that will cause a \s-1SEGV\s0 when called without doing a \f(CW\*(C`bzero\*(C'\fR on
their return structs prior to calling these functions.  Current Perl's
should handle this problem correctly.  Older threaded Perls (5.8.6 or earlier)
will run into this problem.  If you want to run a threaded Perl on OpenBSD
3.7 or higher, you will need to upgrade to at least Perl 5.8.7.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Peters <steve@fisharerojo.org>
.PP
Please report any errors, updates, or suggestions to \fIperlbug@perl.org\fR.
                                                                                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlopenbsd5.16.1                            0100644 0001750 0001750 00000011613 12566207422 023567  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOPENBSD 1"
.TH PERLOPENBSD 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlopenbsd \- Perl version 5 on OpenBSD systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of OpenBSD that will affect how Perl
version 5 (hereafter just Perl) is compiled and/or runs.
.SS "OpenBSD core dumps from getprotobyname_r and getservbyname_r with ithreads"
.IX Subsection "OpenBSD core dumps from getprotobyname_r and getservbyname_r with ithreads"
When Perl is configured to use ithreads, it will use re-entrant library calls
in preference to non-re-entrant versions.  There is an incompatibility in
OpenBSD's \f(CW\*(C`getprotobyname_r\*(C'\fR and \f(CW\*(C`getservbyname_r\*(C'\fR function in versions 3.7
and later that will cause a \s-1SEGV\s0 when called without doing a \f(CW\*(C`bzero\*(C'\fR on
their return structs prior to calling these functions.  Current Perl's
should handle this problem correctly.  Older threaded Perls (5.8.6 or earlier)
will run into this problem.  If you want to run a threaded Perl on OpenBSD
3.7 or higher, you will need to upgrade to at least Perl 5.8.7.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Peters <steve@fisharerojo.org>
.PP
Please report any errors, updates, or suggestions to \fIperlbug@perl.org\fR.
                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlopenbsd5.18.1                            0100644 0001750 0001750 00000012134 12566207442 023572  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOPENBSD 1"
.TH PERLOPENBSD 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlopenbsd \- Perl version 5 on OpenBSD systems
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document describes various features of OpenBSD that will affect how Perl
version 5 (hereafter just Perl) is compiled and/or runs.
.SS "OpenBSD core dumps from getprotobyname_r and getservbyname_r with ithreads"
.IX Subsection "OpenBSD core dumps from getprotobyname_r and getservbyname_r with ithreads"
When Perl is configured to use ithreads, it will use re-entrant library calls
in preference to non-re-entrant versions.  There is an incompatibility in
OpenBSD's \f(CW\*(C`getprotobyname_r\*(C'\fR and \f(CW\*(C`getservbyname_r\*(C'\fR function in versions 3.7
and later that will cause a \s-1SEGV\s0 when called without doing a \f(CW\*(C`bzero\*(C'\fR on
their return structs prior to calling these functions.  Current Perl's
should handle this problem correctly.  Older threaded Perls (5.8.6 or earlier)
will run into this problem.  If you want to run a threaded Perl on OpenBSD
3.7 or higher, you will need to upgrade to at least Perl 5.8.7.
.SH "AUTHOR"
.IX Header "AUTHOR"
Steve Peters <steve@fisharerojo.org>
.PP
Please report any errors, updates, or suggestions to \fIperlbug@perl.org\fR.
                                                                                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlopentut.1                                0100644 0001750 0001750 00000135332 12566207442 023330  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOPENTUT 1"
.TH PERLOPENTUT 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlopentut \- tutorial on opening things in Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl has two simple, built-in ways to open files: the shell way for
convenience, and the C way for precision.  The shell way also has 2\- and
3\-argument forms, which have different semantics for handling the filename.
The choice is yours.
.SH "Open a\*` la shell"
.IX Header "Open a` la shell"
Perl's \f(CW\*(C`open\*(C'\fR function was designed to mimic the way command-line
redirection in the shell works.  Here are some basic examples
from the shell:
.PP
.Vb 6
\&    $ myprogram file1 file2 file3
\&    $ myprogram    <  inputfile
\&    $ myprogram    >  outputfile
\&    $ myprogram    >> outputfile
\&    $ myprogram    |  otherprogram 
\&    $ otherprogram |  myprogram
.Ve
.PP
And here are some more advanced examples:
.PP
.Vb 4
\&    $ otherprogram      | myprogram f1 \- f2
\&    $ otherprogram 2>&1 | myprogram \-
\&    $ myprogram     <&3
\&    $ myprogram     >&4
.Ve
.PP
Programmers accustomed to constructs like those above can take comfort
in learning that Perl directly supports these familiar constructs using
virtually the same syntax as the shell.
.SS "Simple Opens"
.IX Subsection "Simple Opens"
The \f(CW\*(C`open\*(C'\fR function takes two arguments: the first is a filehandle,
and the second is a single string comprising both what to open and how
to open it.  \f(CW\*(C`open\*(C'\fR returns true when it works, and when it fails,
returns a false value and sets the special variable \f(CW$!\fR to reflect
the system error.  If the filehandle was previously opened, it will
be implicitly closed first.
.PP
For example:
.PP
.Vb 4
\&    open(INFO,      "datafile") || die("can\*(Aqt open datafile: $!");
\&    open(INFO,   "<  datafile") || die("can\*(Aqt open datafile: $!");
\&    open(RESULTS,">  runstats") || die("can\*(Aqt open runstats: $!");
\&    open(LOG,    ">> logfile ") || die("can\*(Aqt open logfile:  $!");
.Ve
.PP
If you prefer the low-punctuation version, you could write that this way:
.PP
.Vb 3
\&    open INFO,   "<  datafile"  or die "can\*(Aqt open datafile: $!";
\&    open RESULTS,">  runstats"  or die "can\*(Aqt open runstats: $!";
\&    open LOG,    ">> logfile "  or die "can\*(Aqt open logfile:  $!";
.Ve
.PP
A few things to notice.  First, the leading \f(CW\*(C`<\*(C'\fR is optional.
If omitted, Perl assumes that you want to open the file for reading.
.PP
Note also that the first example uses the \f(CW\*(C`||\*(C'\fR logical operator, and the
second uses \f(CW\*(C`or\*(C'\fR, which has lower precedence.  Using \f(CW\*(C`||\*(C'\fR in the latter
examples would effectively mean
.PP
.Vb 1
\&    open INFO, ( "<  datafile"  || die "can\*(Aqt open datafile: $!" );
.Ve
.PP
which is definitely not what you want.
.PP
The other important thing to notice is that, just as in the shell,
any whitespace before or after the filename is ignored.  This is good,
because you wouldn't want these to do different things:
.PP
.Vb 3
\&    open INFO,   "<datafile"   
\&    open INFO,   "< datafile" 
\&    open INFO,   "<  datafile"
.Ve
.PP
Ignoring surrounding whitespace also helps for when you read a filename
in from a different file, and forget to trim it before opening:
.PP
.Vb 2
\&    $filename = <INFO>;         # oops, \en still there
\&    open(EXTRA, "< $filename") || die "can\*(Aqt open $filename: $!";
.Ve
.PP
This is not a bug, but a feature.  Because \f(CW\*(C`open\*(C'\fR mimics the shell in
its style of using redirection arrows to specify how to open the file, it
also does so with respect to extra whitespace around the filename itself
as well.  For accessing files with naughty names, see 
\&\*(L"Dispelling the Dweomer\*(R".
.PP
There is also a 3\-argument version of \f(CW\*(C`open\*(C'\fR, which lets you put the
special redirection characters into their own argument:
.PP
.Vb 1
\&    open( INFO, ">", $datafile ) || die "Can\*(Aqt create $datafile: $!";
.Ve
.PP
In this case, the filename to open is the actual string in \f(CW$datafile\fR,
so you don't have to worry about \f(CW$datafile\fR containing characters
that might influence the open mode, or whitespace at the beginning of
the filename that would be absorbed in the 2\-argument version.  Also,
any reduction of unnecessary string interpolation is a good thing.
.SS "Indirect Filehandles"
.IX Subsection "Indirect Filehandles"
\&\f(CW\*(C`open\*(C'\fR's first argument can be a reference to a filehandle.  As of
perl 5.6.0, if the argument is uninitialized, Perl will automatically
create a filehandle and put a reference to it in the first argument,
like so:
.PP
.Vb 5
\&    open( my $in, $infile )   or die "Couldn\*(Aqt read $infile: $!";
\&    while ( <$in> ) {
\&        # do something with $_
\&    }
\&    close $in;
.Ve
.PP
Indirect filehandles make namespace management easier.  Since filehandles
are global to the current package, two subroutines trying to open
\&\f(CW\*(C`INFILE\*(C'\fR will clash.  With two functions opening indirect filehandles
like \f(CW\*(C`my $infile\*(C'\fR, there's no clash and no need to worry about future
conflicts.
.PP
Another convenient behavior is that an indirect filehandle automatically
closes when there are no more references to it:
.PP
.Vb 4
\&    sub firstline {
\&        open( my $in, shift ) && return scalar <$in>;
\&        # no close() required
\&    }
.Ve
.PP
Indirect filehandles also make it easy to pass filehandles to and return
filehandles from subroutines:
.PP
.Vb 5
\&    for my $file ( qw(this.conf that.conf) ) {
\&        my $fin = open_or_throw(\*(Aq<\*(Aq, $file);
\&        process_conf( $fin );
\&        # no close() needed
\&    }
\&
\&    use Carp;
\&    sub open_or_throw {
\&        my ($mode, $filename) = @_;
\&        open my $h, $mode, $filename
\&            or croak "Could not open \*(Aq$filename\*(Aq: $!";
\&        return $h;
\&    }
.Ve
.SS "Pipe Opens"
.IX Subsection "Pipe Opens"
In C, when you want to open a file using the standard I/O library,
you use the \f(CW\*(C`fopen\*(C'\fR function, but when opening a pipe, you use the
\&\f(CW\*(C`popen\*(C'\fR function.  But in the shell, you just use a different redirection
character.  That's also the case for Perl.  The \f(CW\*(C`open\*(C'\fR call 
remains the same\*(--just its argument differs.
.PP
If the leading character is a pipe symbol, \f(CW\*(C`open\*(C'\fR starts up a new
command and opens a write-only filehandle leading into that command.
This lets you write into that handle and have what you write show up on
that command's standard input.  For example:
.PP
.Vb 3
\&    open(PRINTER, "| lpr \-Plp1")    || die "can\*(Aqt run lpr: $!";
\&    print PRINTER "stuff\en";
\&    close(PRINTER)                  || die "can\*(Aqt close lpr: $!";
.Ve
.PP
If the trailing character is a pipe, you start up a new command and open a
read-only filehandle leading out of that command.  This lets whatever that
command writes to its standard output show up on your handle for reading.
For example:
.PP
.Vb 3
\&    open(NET, "netstat \-i \-n |")    || die "can\*(Aqt fork netstat: $!";
\&    while (<NET>) { }               # do something with input
\&    close(NET)                      || die "can\*(Aqt close netstat: $!";
.Ve
.PP
What happens if you try to open a pipe to or from a non-existent
command?  If possible, Perl will detect the failure and set \f(CW$!\fR as
usual.  But if the command contains special shell characters, such as
\&\f(CW\*(C`>\*(C'\fR or \f(CW\*(C`*\*(C'\fR, called 'metacharacters', Perl does not execute the
command directly.  Instead, Perl runs the shell, which then tries to
run the command.  This means that it's the shell that gets the error
indication.  In such a case, the \f(CW\*(C`open\*(C'\fR call will only indicate
failure if Perl can't even run the shell.  See \*(L"How can I
capture \s-1STDERR\s0 from an external command?\*(R" in perlfaq8 to see how to cope with
this.  There's also an explanation in perlipc.
.PP
If you would like to open a bidirectional pipe, the IPC::Open2
library will handle this for you.  Check out 
\&\*(L"Bidirectional Communication with Another Process\*(R" in perlipc
.PP
perl\-5.6.x introduced a version of piped open that executes a process
based on its command line arguments without relying on the shell. (Similar
to the \f(CW\*(C`system(@LIST)\*(C'\fR notation.) This is safer and faster than executing
a single argument pipe-command, but does not allow special shell
constructs. (It is also not supported on Microsoft Windows, Mac \s-1OS\s0 Classic
or \s-1RISC OS.\s0)
.PP
Here's an example of \f(CW\*(C`open \*(Aq\-|\*(Aq\*(C'\fR, which prints a random Unix
fortune cookie as uppercase:
.PP
.Vb 8
\&    my $collection = shift(@ARGV);
\&    open my $fortune, \*(Aq\-|\*(Aq, \*(Aqfortune\*(Aq, $collection
\&        or die "Could not find fortune \- $!";
\&    while (<$fortune>)
\&    {
\&        print uc($_);
\&    }
\&    close($fortune);
.Ve
.PP
And this \f(CW\*(C`open \*(Aq|\-\*(Aq\*(C'\fR pipes into lpr:
.PP
.Vb 5
\&    open my $printer, \*(Aq|\-\*(Aq, \*(Aqlpr\*(Aq, \*(Aq\-Plp1\*(Aq
\&        or die "can\*(Aqt run lpr: $!";
\&    print {$printer} "stuff\en";
\&    close($printer)
\&        or die "can\*(Aqt close lpr: $!";
.Ve
.SS "The Minus File"
.IX Subsection "The Minus File"
Again following the lead of the standard shell utilities, Perl's
\&\f(CW\*(C`open\*(C'\fR function treats a file whose name is a single minus, \*(L"\-\*(R", in a
special way.  If you open minus for reading, it really means to access
the standard input.  If you open minus for writing, it really means to
access the standard output.
.PP
If minus can be used as the default input or default output, what happens
if you open a pipe into or out of minus?  What's the default command it
would run?  The same script as you're currently running!  This is actually
a stealth \f(CW\*(C`fork\*(C'\fR hidden inside an \f(CW\*(C`open\*(C'\fR call.  See 
\&\*(L"Safe Pipe Opens\*(R" in perlipc for details.
.SS "Mixing Reads and Writes"
.IX Subsection "Mixing Reads and Writes"
It is possible to specify both read and write access.  All you do is
add a \*(L"+\*(R" symbol in front of the redirection.  But as in the shell,
using a less-than on a file never creates a new file; it only opens an
existing one.  On the other hand, using a greater-than always clobbers
(truncates to zero length) an existing file, or creates a brand-new one
if there isn't an old one.  Adding a \*(L"+\*(R" for read-write doesn't affect
whether it only works on existing files or always clobbers existing ones.
.PP
.Vb 2
\&    open(WTMP, "+< /usr/adm/wtmp") 
\&        || die "can\*(Aqt open /usr/adm/wtmp: $!";
\&
\&    open(SCREEN, "+> lkscreen")
\&        || die "can\*(Aqt open lkscreen: $!";
\&
\&    open(LOGFILE, "+>> /var/log/applog")
\&        || die "can\*(Aqt open /var/log/applog: $!";
.Ve
.PP
The first one won't create a new file, and the second one will always
clobber an old one.  The third one will create a new file if necessary
and not clobber an old one, and it will allow you to read at any point
in the file, but all writes will always go to the end.  In short,
the first case is substantially more common than the second and third
cases, which are almost always wrong.  (If you know C, the plus in
Perl's \f(CW\*(C`open\*(C'\fR is historically derived from the one in C's fopen(3S),
which it ultimately calls.)
.PP
In fact, when it comes to updating a file, unless you're working on
a binary file as in the \s-1WTMP\s0 case above, you probably don't want to
use this approach for updating.  Instead, Perl's \fB\-i\fR flag comes to
the rescue.  The following command takes all the C, \*(C+, or yacc source
or header files and changes all their foo's to bar's, leaving
the old version in the original filename with a \*(L".orig\*(R" tacked
on the end:
.PP
.Vb 1
\&    $ perl \-i.orig \-pe \*(Aqs/\ebfoo\eb/bar/g\*(Aq *.[Cchy]
.Ve
.PP
This is a short cut for some renaming games that are really
the best way to update textfiles.  See the second question in 
perlfaq5 for more details.
.SS "Filters"
.IX Subsection "Filters"
One of the most common uses for \f(CW\*(C`open\*(C'\fR is one you never
even notice.  When you process the \s-1ARGV\s0 filehandle using
\&\f(CW\*(C`<ARGV>\*(C'\fR, Perl actually does an implicit open 
on each file in \f(CW@ARGV\fR.  Thus a program called like this:
.PP
.Vb 1
\&    $ myprogram file1 file2 file3
.Ve
.PP
can have all its files opened and processed one at a time
using a construct no more complex than:
.PP
.Vb 3
\&    while (<>) {
\&        # do something with $_
\&    }
.Ve
.PP
If \f(CW@ARGV\fR is empty when the loop first begins, Perl pretends you've opened
up minus, that is, the standard input.  In fact, \f(CW$ARGV\fR, the currently
open file during \f(CW\*(C`<ARGV>\*(C'\fR processing, is even set to \*(L"\-\*(R"
in these circumstances.
.PP
You are welcome to pre-process your \f(CW@ARGV\fR before starting the loop to
make sure it's to your liking.  One reason to do this might be to remove
command options beginning with a minus.  While you can always roll the
simple ones by hand, the Getopts modules are good for this:
.PP
.Vb 1
\&    use Getopt::Std;
\&
\&    # \-v, \-D, \-o ARG, sets $opt_v, $opt_D, $opt_o
\&    getopts("vDo:");            
\&
\&    # \-v, \-D, \-o ARG, sets $args{v}, $args{D}, $args{o}
\&    getopts("vDo:", \e%args);
.Ve
.PP
Or the standard Getopt::Long module to permit named arguments:
.PP
.Vb 5
\&    use Getopt::Long;
\&    GetOptions( "verbose"  => \e$verbose,        # \-\-verbose
\&                "Debug"    => \e$debug,          # \-\-Debug
\&                "output=s" => \e$output );       
\&            # \-\-output=somestring or \-\-output somestring
.Ve
.PP
Another reason for preprocessing arguments is to make an empty
argument list default to all files:
.PP
.Vb 1
\&    @ARGV = glob("*") unless @ARGV;
.Ve
.PP
You could even filter out all but plain, text files.  This is a bit
silent, of course, and you might prefer to mention them on the way.
.PP
.Vb 1
\&    @ARGV = grep { \-f && \-T } @ARGV;
.Ve
.PP
If you're using the \fB\-n\fR or \fB\-p\fR command-line options, you
should put changes to \f(CW@ARGV\fR in a \f(CW\*(C`BEGIN{}\*(C'\fR block.
.PP
Remember that a normal \f(CW\*(C`open\*(C'\fR has special properties, in that it might
call fopen(3S) or it might called popen(3S), depending on what its
argument looks like; that's why it's sometimes called \*(L"magic open\*(R".
Here's an example:
.PP
.Vb 3
\&    $pwdinfo = \`domainname\` =~ /^(\e(none\e))?$/
\&                    ? \*(Aq< /etc/passwd\*(Aq
\&                    : \*(Aqypcat passwd |\*(Aq;
\&
\&    open(PWD, $pwdinfo)                 
\&                or die "can\*(Aqt open $pwdinfo: $!";
.Ve
.PP
This sort of thing also comes into play in filter processing.  Because
\&\f(CW\*(C`<ARGV>\*(C'\fR processing employs the normal, shell-style Perl \f(CW\*(C`open\*(C'\fR,
it respects all the special things we've already seen:
.PP
.Vb 1
\&    $ myprogram f1 "cmd1|" \- f2 "cmd2|" f3 < tmpfile
.Ve
.PP
That program will read from the file \fIf1\fR, the process \fIcmd1\fR, standard
input (\fItmpfile\fR in this case), the \fIf2\fR file, the \fIcmd2\fR command,
and finally the \fIf3\fR file.
.PP
Yes, this also means that if you have files named \*(L"\-\*(R" (and so on) in
your directory, they won't be processed as literal files by \f(CW\*(C`open\*(C'\fR.
You'll need to pass them as \*(L"./\-\*(R", much as you would for the \fIrm\fR program,
or you could use \f(CW\*(C`sysopen\*(C'\fR as described below.
.PP
One of the more interesting applications is to change files of a certain
name into pipes.  For example, to autoprocess gzipped or compressed
files by decompressing them with \fIgzip\fR:
.PP
.Vb 1
\&    @ARGV = map { /\e.(gz|Z)$/ ? "gzip \-dc $_ |" : $_  } @ARGV;
.Ve
.PP
Or, if you have the \fI\s-1GET\s0\fR program installed from \s-1LWP,\s0
you can fetch URLs before processing them:
.PP
.Vb 1
\&    @ARGV = map { m#^\ew+://# ? "GET $_ |" : $_ } @ARGV;
.Ve
.PP
It's not for nothing that this is called magic \f(CW\*(C`<ARGV>\*(C'\fR.
Pretty nifty, eh?
.SH "Open a\*` la C"
.IX Header "Open a` la C"
If you want the convenience of the shell, then Perl's \f(CW\*(C`open\*(C'\fR is
definitely the way to go.  On the other hand, if you want finer precision
than C's simplistic fopen(3S) provides you should look to Perl's
\&\f(CW\*(C`sysopen\*(C'\fR, which is a direct hook into the \fIopen\fR\|(2) system call.
That does mean it's a bit more involved, but that's the price of 
precision.
.PP
\&\f(CW\*(C`sysopen\*(C'\fR takes 3 (or 4) arguments.
.PP
.Vb 1
\&    sysopen HANDLE, PATH, FLAGS, [MASK]
.Ve
.PP
The \s-1HANDLE\s0 argument is a filehandle just as with \f(CW\*(C`open\*(C'\fR.  The \s-1PATH\s0 is
a literal path, one that doesn't pay attention to any greater-thans or
less-thans or pipes or minuses, nor ignore whitespace.  If it's there,
it's part of the path.  The \s-1FLAGS\s0 argument contains one or more values
derived from the Fcntl module that have been or'd together using the
bitwise \*(L"|\*(R" operator.  The final argument, the \s-1MASK,\s0 is optional; if
present, it is combined with the user's current umask for the creation
mode of the file.  You should usually omit this.
.PP
Although the traditional values of read-only, write-only, and read-write
are 0, 1, and 2 respectively, this is known not to hold true on some
systems.  Instead, it's best to load in the appropriate constants first
from the Fcntl module, which supplies the following standard flags:
.PP
.Vb 8
\&    O_RDONLY            Read only
\&    O_WRONLY            Write only
\&    O_RDWR              Read and write
\&    O_CREAT             Create the file if it doesn\*(Aqt exist
\&    O_EXCL              Fail if the file already exists
\&    O_APPEND            Append to the file
\&    O_TRUNC             Truncate the file
\&    O_NONBLOCK          Non\-blocking access
.Ve
.PP
Less common flags that are sometimes available on some operating
systems include \f(CW\*(C`O_BINARY\*(C'\fR, \f(CW\*(C`O_TEXT\*(C'\fR, \f(CW\*(C`O_SHLOCK\*(C'\fR, \f(CW\*(C`O_EXLOCK\*(C'\fR,
\&\f(CW\*(C`O_DEFER\*(C'\fR, \f(CW\*(C`O_SYNC\*(C'\fR, \f(CW\*(C`O_ASYNC\*(C'\fR, \f(CW\*(C`O_DSYNC\*(C'\fR, \f(CW\*(C`O_RSYNC\*(C'\fR,
\&\f(CW\*(C`O_NOCTTY\*(C'\fR, \f(CW\*(C`O_NDELAY\*(C'\fR and \f(CW\*(C`O_LARGEFILE\*(C'\fR.  Consult your \fIopen\fR\|(2)
manpage or its local equivalent for details.  (Note: starting from
Perl release 5.6 the \f(CW\*(C`O_LARGEFILE\*(C'\fR flag, if available, is automatically
added to the \fIsysopen()\fR flags because large files are the default.)
.PP
Here's how to use \f(CW\*(C`sysopen\*(C'\fR to emulate the simple \f(CW\*(C`open\*(C'\fR calls we had
before.  We'll omit the \f(CW\*(C`|| die $!\*(C'\fR checks for clarity, but make sure
you always check the return values in real code.  These aren't quite
the same, since \f(CW\*(C`open\*(C'\fR will trim leading and trailing whitespace,
but you'll get the idea.
.PP
To open a file for reading:
.PP
.Vb 2
\&    open(FH, "< $path");
\&    sysopen(FH, $path, O_RDONLY);
.Ve
.PP
To open a file for writing, creating a new file if needed or else truncating
an old file:
.PP
.Vb 2
\&    open(FH, "> $path");
\&    sysopen(FH, $path, O_WRONLY | O_TRUNC | O_CREAT);
.Ve
.PP
To open a file for appending, creating one if necessary:
.PP
.Vb 2
\&    open(FH, ">> $path");
\&    sysopen(FH, $path, O_WRONLY | O_APPEND | O_CREAT);
.Ve
.PP
To open a file for update, where the file must already exist:
.PP
.Vb 2
\&    open(FH, "+< $path");
\&    sysopen(FH, $path, O_RDWR);
.Ve
.PP
And here are things you can do with \f(CW\*(C`sysopen\*(C'\fR that you cannot do with
a regular \f(CW\*(C`open\*(C'\fR.  As you'll see, it's just a matter of controlling the
flags in the third argument.
.PP
To open a file for writing, creating a new file which must not previously
exist:
.PP
.Vb 1
\&    sysopen(FH, $path, O_WRONLY | O_EXCL | O_CREAT);
.Ve
.PP
To open a file for appending, where that file must already exist:
.PP
.Vb 1
\&    sysopen(FH, $path, O_WRONLY | O_APPEND);
.Ve
.PP
To open a file for update, creating a new file if necessary:
.PP
.Vb 1
\&    sysopen(FH, $path, O_RDWR | O_CREAT);
.Ve
.PP
To open a file for update, where that file must not already exist:
.PP
.Vb 1
\&    sysopen(FH, $path, O_RDWR | O_EXCL | O_CREAT);
.Ve
.PP
To open a file without blocking, creating one if necessary:
.PP
.Vb 1
\&    sysopen(FH, $path, O_WRONLY | O_NONBLOCK | O_CREAT);
.Ve
.SS "Permissions a\*` la mode"
.IX Subsection "Permissions a` la mode"
If you omit the \s-1MASK\s0 argument to \f(CW\*(C`sysopen\*(C'\fR, Perl uses the octal value
0666.  The normal \s-1MASK\s0 to use for executables and directories should
be 0777, and for anything else, 0666.
.PP
Why so permissive?  Well, it isn't really.  The \s-1MASK\s0 will be modified
by your process's current \f(CW\*(C`umask\*(C'\fR.  A umask is a number representing
\&\fIdisabled\fR permissions bits; that is, bits that will not be turned on
in the created file's permissions field.
.PP
For example, if your \f(CW\*(C`umask\*(C'\fR were 027, then the 020 part would
disable the group from writing, and the 007 part would disable others
from reading, writing, or executing.  Under these conditions, passing
\&\f(CW\*(C`sysopen\*(C'\fR 0666 would create a file with mode 0640, since \f(CW\*(C`0666 & ~027\*(C'\fR
is 0640.
.PP
You should seldom use the \s-1MASK\s0 argument to \f(CW\*(C`sysopen()\*(C'\fR.  That takes
away the user's freedom to choose what permission new files will have.
Denying choice is almost always a bad thing.  One exception would be for
cases where sensitive or private data is being stored, such as with mail
folders, cookie files, and internal temporary files.
.SH "Obscure Open Tricks"
.IX Header "Obscure Open Tricks"
.SS "Re-Opening Files (dups)"
.IX Subsection "Re-Opening Files (dups)"
Sometimes you already have a filehandle open, and want to make another
handle that's a duplicate of the first one.  In the shell, we place an
ampersand in front of a file descriptor number when doing redirections.
For example, \f(CW\*(C`2>&1\*(C'\fR makes descriptor 2 (that's \s-1STDERR\s0 in Perl)
be redirected into descriptor 1 (which is usually Perl's \s-1STDOUT\s0).
The same is essentially true in Perl: a filename that begins with an
ampersand is treated instead as a file descriptor if a number, or as a
filehandle if a string.
.PP
.Vb 2
\&    open(SAVEOUT, ">&SAVEERR") || die "couldn\*(Aqt dup SAVEERR: $!";
\&    open(MHCONTEXT, "<&4")     || die "couldn\*(Aqt dup fd4: $!";
.Ve
.PP
That means that if a function is expecting a filename, but you don't
want to give it a filename because you already have the file open, you
can just pass the filehandle with a leading ampersand.  It's best to
use a fully qualified handle though, just in case the function happens
to be in a different package:
.PP
.Vb 1
\&    somefunction("&main::LOGFILE");
.Ve
.PP
This way if \fIsomefunction()\fR is planning on opening its argument, it can
just use the already opened handle.  This differs from passing a handle,
because with a handle, you don't open the file.  Here you have something
you can pass to open.
.PP
If you have one of those tricky, newfangled I/O objects that the \*(C+
folks are raving about, then this doesn't work because those aren't a
proper filehandle in the native Perl sense.  You'll have to use \fIfileno()\fR
to pull out the proper descriptor number, assuming you can:
.PP
.Vb 4
\&    use IO::Socket;
\&    $handle = IO::Socket::INET\->new("www.perl.com:80");
\&    $fd = $handle\->fileno;
\&    somefunction("&$fd");  # not an indirect function call
.Ve
.PP
It can be easier (and certainly will be faster) just to use real
filehandles though:
.PP
.Vb 4
\&    use IO::Socket;
\&    local *REMOTE = IO::Socket::INET\->new("www.perl.com:80");
\&    die "can\*(Aqt connect" unless defined(fileno(REMOTE));
\&    somefunction("&main::REMOTE");
.Ve
.PP
If the filehandle or descriptor number is preceded not just with a simple
\&\*(L"&\*(R" but rather with a \*(L"&=\*(R" combination, then Perl will not create a
completely new descriptor opened to the same place using the \fIdup\fR\|(2)
system call.  Instead, it will just make something of an alias to the
existing one using the fdopen(3S) library call.  This is slightly more
parsimonious of systems resources, although this is less a concern
these days.  Here's an example of that:
.PP
.Vb 2
\&    $fd = $ENV{"MHCONTEXTFD"};
\&    open(MHCONTEXT, "<&=$fd")   or die "couldn\*(Aqt fdopen $fd: $!";
.Ve
.PP
If you're using magic \f(CW\*(C`<ARGV>\*(C'\fR, you could even pass in as a
command line argument in \f(CW@ARGV\fR something like \f(CW"<&=$MHCONTEXTFD"\fR,
but we've never seen anyone actually do this.
.SS "Dispelling the Dweomer"
.IX Subsection "Dispelling the Dweomer"
Perl is more of a DWIMmer language than something like Java\*(--where \s-1DWIM\s0
is an acronym for \*(L"do what I mean\*(R".  But this principle sometimes leads
to more hidden magic than one knows what to do with.  In this way, Perl
is also filled with \fIdweomer\fR, an obscure word meaning an enchantment.
Sometimes, Perl's DWIMmer is just too much like dweomer for comfort.
.PP
If magic \f(CW\*(C`open\*(C'\fR is a bit too magical for you, you don't have to turn
to \f(CW\*(C`sysopen\*(C'\fR.  To open a file with arbitrary weird characters in
it, it's necessary to protect any leading and trailing whitespace.
Leading whitespace is protected by inserting a \f(CW"./"\fR in front of a
filename that starts with whitespace.  Trailing whitespace is protected
by appending an \s-1ASCII NUL\s0 byte (\f(CW"\e0"\fR) at the end of the string.
.PP
.Vb 2
\&    $file =~ s#^(\es)#./$1#;
\&    open(FH, "< $file\e0")   || die "can\*(Aqt open $file: $!";
.Ve
.PP
This assumes, of course, that your system considers dot the current
working directory, slash the directory separator, and disallows \s-1ASCII\s0
NULs within a valid filename.  Most systems follow these conventions,
including all \s-1POSIX\s0 systems as well as proprietary Microsoft systems.
The only vaguely popular system that doesn't work this way is the
\&\*(L"Classic\*(R" Macintosh system, which uses a colon where the rest of us
use a slash.  Maybe \f(CW\*(C`sysopen\*(C'\fR isn't such a bad idea after all.
.PP
If you want to use \f(CW\*(C`<ARGV>\*(C'\fR processing in a totally boring
and non-magical way, you could do this first:
.PP
.Vb 10
\&    #   "Sam sat on the ground and put his head in his hands.  
\&    #   \*(AqI wish I had never come here, and I don\*(Aqt want to see 
\&    #   no more magic,\*(Aq he said, and fell silent."
\&    for (@ARGV) { 
\&        s#^([^./])#./$1#;
\&        $_ .= "\e0";
\&    } 
\&    while (<>) {  
\&        # now process $_
\&    }
.Ve
.PP
But be warned that users will not appreciate being unable to use \*(L"\-\*(R"
to mean standard input, per the standard convention.
.SS "Paths as Opens"
.IX Subsection "Paths as Opens"
You've probably noticed how Perl's \f(CW\*(C`warn\*(C'\fR and \f(CW\*(C`die\*(C'\fR functions can
produce messages like:
.PP
.Vb 1
\&    Some warning at scriptname line 29, <FH> line 7.
.Ve
.PP
That's because you opened a filehandle \s-1FH,\s0 and had read in seven records
from it.  But what was the name of the file, rather than the handle?
.PP
If you aren't running with \f(CW\*(C`strict refs\*(C'\fR, or if you've turned them off
temporarily, then all you have to do is this:
.PP
.Vb 4
\&    open($path, "< $path") || die "can\*(Aqt open $path: $!";
\&    while (<$path>) {
\&        # whatever
\&    }
.Ve
.PP
Since you're using the pathname of the file as its handle,
you'll get warnings more like
.PP
.Vb 1
\&    Some warning at scriptname line 29, </etc/motd> line 7.
.Ve
.SS "Single Argument Open"
.IX Subsection "Single Argument Open"
Remember how we said that Perl's open took two arguments?  That was a
passive prevarication.  You see, it can also take just one argument.
If and only if the variable is a global variable, not a lexical, you
can pass \f(CW\*(C`open\*(C'\fR just one argument, the filehandle, and it will 
get the path from the global scalar variable of the same name.
.PP
.Vb 5
\&    $FILE = "/etc/motd";
\&    open FILE or die "can\*(Aqt open $FILE: $!";
\&    while (<FILE>) {
\&        # whatever
\&    }
.Ve
.PP
Why is this here?  Someone has to cater to the hysterical porpoises.
It's something that's been in Perl since the very beginning, if not
before.
.SS "Playing with \s-1STDIN\s0 and \s-1STDOUT\s0"
.IX Subsection "Playing with STDIN and STDOUT"
One clever move with \s-1STDOUT\s0 is to explicitly close it when you're done
with the program.
.PP
.Vb 1
\&    END { close(STDOUT) || die "can\*(Aqt close stdout: $!" }
.Ve
.PP
If you don't do this, and your program fills up the disk partition due
to a command line redirection, it won't report the error exit with a
failure status.
.PP
You don't have to accept the \s-1STDIN\s0 and \s-1STDOUT\s0 you were given.  You are
welcome to reopen them if you'd like.
.PP
.Vb 2
\&    open(STDIN, "< datafile")
\&        || die "can\*(Aqt open datafile: $!";
\&
\&    open(STDOUT, "> output")
\&        || die "can\*(Aqt open output: $!";
.Ve
.PP
And then these can be accessed directly or passed on to subprocesses.
This makes it look as though the program were initially invoked
with those redirections from the command line.
.PP
It's probably more interesting to connect these to pipes.  For example:
.PP
.Vb 3
\&    $pager = $ENV{PAGER} || "(less || more)";
\&    open(STDOUT, "| $pager")
\&        || die "can\*(Aqt fork a pager: $!";
.Ve
.PP
This makes it appear as though your program were called with its stdout
already piped into your pager.  You can also use this kind of thing
in conjunction with an implicit fork to yourself.  You might do this
if you would rather handle the post processing in your own program,
just in a different process:
.PP
.Vb 4
\&    head(100);
\&    while (<>) {
\&        print;
\&    } 
\&
\&    sub head {
\&        my $lines = shift || 20;
\&        return if $pid = open(STDOUT, "|\-");       # return if parent
\&        die "cannot fork: $!" unless defined $pid;
\&        while (<STDIN>) {
\&            last if \-\-$lines < 0;
\&            print;
\&        } 
\&        exit;
\&    }
.Ve
.PP
This technique can be applied to repeatedly push as many filters on your
output stream as you wish.
.SH "Other I/O Issues"
.IX Header "Other I/O Issues"
These topics aren't really arguments related to \f(CW\*(C`open\*(C'\fR or \f(CW\*(C`sysopen\*(C'\fR,
but they do affect what you do with your open files.
.SS "Opening Non-File Files"
.IX Subsection "Opening Non-File Files"
When is a file not a file?  Well, you could say when it exists but
isn't a plain file.   We'll check whether it's a symbolic link first,
just in case.
.PP
.Vb 3
\&    if (\-l $file || ! \-f _) {
\&        print "$file is not a plain file\en";
\&    }
.Ve
.PP
What other kinds of files are there than, well, files?  Directories,
symbolic links, named pipes, Unix-domain sockets, and block and character
devices.  Those are all files, too\*(--just not \fIplain\fR files.  This isn't
the same issue as being a text file. Not all text files are plain files.
Not all plain files are text files.  That's why there are separate \f(CW\*(C`\-f\*(C'\fR
and \f(CW\*(C`\-T\*(C'\fR file tests.
.PP
To open a directory, you should use the \f(CW\*(C`opendir\*(C'\fR function, then
process it with \f(CW\*(C`readdir\*(C'\fR, carefully restoring the directory 
name if necessary:
.PP
.Vb 5
\&    opendir(DIR, $dirname) or die "can\*(Aqt opendir $dirname: $!";
\&    while (defined($file = readdir(DIR))) {
\&        # do something with "$dirname/$file"
\&    }
\&    closedir(DIR);
.Ve
.PP
If you want to process directories recursively, it's better to use the
File::Find module.  For example, this prints out all files recursively
and adds a slash to their names if the file is a directory.
.PP
.Vb 3
\&    @ARGV = qw(.) unless @ARGV;
\&    use File::Find;
\&    find sub { print $File::Find::name, \-d && \*(Aq/\*(Aq, "\en" }, @ARGV;
.Ve
.PP
This finds all bogus symbolic links beneath a particular directory:
.PP
.Vb 1
\&    find sub { print "$File::Find::name\en" if \-l && !\-e }, $dir;
.Ve
.PP
As you see, with symbolic links, you can just pretend that it is
what it points to.  Or, if you want to know \fIwhat\fR it points to, then
\&\f(CW\*(C`readlink\*(C'\fR is called for:
.PP
.Vb 7
\&    if (\-l $file) {
\&        if (defined($whither = readlink($file))) {
\&            print "$file points to $whither\en";
\&        } else {
\&            print "$file points nowhere: $!\en";
\&        } 
\&    }
.Ve
.SS "Opening Named Pipes"
.IX Subsection "Opening Named Pipes"
Named pipes are a different matter.  You pretend they're regular files,
but their opens will normally block until there is both a reader and
a writer.  You can read more about them in \*(L"Named Pipes\*(R" in perlipc.
Unix-domain sockets are rather different beasts as well; they're
described in \*(L"Unix-Domain \s-1TCP\s0 Clients and Servers\*(R" in perlipc.
.PP
When it comes to opening devices, it can be easy and it can be tricky.
We'll assume that if you're opening up a block device, you know what
you're doing.  The character devices are more interesting.  These are
typically used for modems, mice, and some kinds of printers.  This is
described in \*(L"How do I read and write the serial port?\*(R" in perlfaq8
It's often enough to open them carefully:
.PP
.Vb 5
\&    sysopen(TTYIN, "/dev/ttyS1", O_RDWR | O_NDELAY | O_NOCTTY)
\&                # (O_NOCTTY no longer needed on POSIX systems)
\&        or die "can\*(Aqt open /dev/ttyS1: $!";
\&    open(TTYOUT, "+>&TTYIN")
\&        or die "can\*(Aqt dup TTYIN: $!";
\&
\&    $ofh = select(TTYOUT); $| = 1; select($ofh);
\&
\&    print TTYOUT "+++at\e015";
\&    $answer = <TTYIN>;
.Ve
.PP
With descriptors that you haven't opened using \f(CW\*(C`sysopen\*(C'\fR, such as
sockets, you can set them to be non-blocking using \f(CW\*(C`fcntl\*(C'\fR:
.PP
.Vb 5
\&    use Fcntl;
\&    my $old_flags = fcntl($handle, F_GETFL, 0) 
\&        or die "can\*(Aqt get flags: $!";
\&    fcntl($handle, F_SETFL, $old_flags | O_NONBLOCK) 
\&        or die "can\*(Aqt set non blocking: $!";
.Ve
.PP
Rather than losing yourself in a morass of twisting, turning \f(CW\*(C`ioctl\*(C'\fRs,
all dissimilar, if you're going to manipulate ttys, it's best to
make calls out to the \fIstty\fR\|(1) program if you have it, or else use the
portable \s-1POSIX\s0 interface.  To figure this all out, you'll need to read the
\&\fItermios\fR\|(3) manpage, which describes the \s-1POSIX\s0 interface to tty devices,
and then \s-1POSIX\s0, which describes Perl's interface to \s-1POSIX. \s0 There are
also some high-level modules on \s-1CPAN\s0 that can help you with these games.
Check out Term::ReadKey and Term::ReadLine.
.SS "Opening Sockets"
.IX Subsection "Opening Sockets"
What else can you open?  To open a connection using sockets, you won't use
one of Perl's two open functions.  See 
\&\*(L"Sockets: Client/Server Communication\*(R" in perlipc for that.  Here's an 
example.  Once you have it, you can use \s-1FH\s0 as a bidirectional filehandle.
.PP
.Vb 2
\&    use IO::Socket;
\&    local *FH = IO::Socket::INET\->new("www.perl.com:80");
.Ve
.PP
For opening up a \s-1URL,\s0 the \s-1LWP\s0 modules from \s-1CPAN\s0 are just what
the doctor ordered.  There's no filehandle interface, but
it's still easy to get the contents of a document:
.PP
.Vb 2
\&    use LWP::Simple;
\&    $doc = get(\*(Aqhttp://www.cpan.org/\*(Aq);
.Ve
.SS "Binary Files"
.IX Subsection "Binary Files"
On certain legacy systems with what could charitably be called terminally
convoluted (some would say broken) I/O models, a file isn't a file\*(--at
least, not with respect to the C standard I/O library.  On these old
systems whose libraries (but not kernels) distinguish between text and
binary streams, to get files to behave properly you'll have to bend over
backwards to avoid nasty problems.  On such infelicitous systems, sockets
and pipes are already opened in binary mode, and there is currently no
way to turn that off.  With files, you have more options.
.PP
Another option is to use the \f(CW\*(C`binmode\*(C'\fR function on the appropriate
handles before doing regular I/O on them:
.PP
.Vb 3
\&    binmode(STDIN);
\&    binmode(STDOUT);
\&    while (<STDIN>) { print }
.Ve
.PP
Passing \f(CW\*(C`sysopen\*(C'\fR a non-standard flag option will also open the file in
binary mode on those systems that support it.  This is the equivalent of
opening the file normally, then calling \f(CW\*(C`binmode\*(C'\fR on the handle.
.PP
.Vb 2
\&    sysopen(BINDAT, "records.data", O_RDWR | O_BINARY)
\&        || die "can\*(Aqt open records.data: $!";
.Ve
.PP
Now you can use \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`print\*(C'\fR on that handle without worrying
about the non-standard system I/O library breaking your data.  It's not
a pretty picture, but then, legacy systems seldom are.  \s-1CP/M\s0 will be
with us until the end of days, and after.
.PP
On systems with exotic I/O systems, it turns out that, astonishingly
enough, even unbuffered I/O using \f(CW\*(C`sysread\*(C'\fR and \f(CW\*(C`syswrite\*(C'\fR might do
sneaky data mutilation behind your back.
.PP
.Vb 3
\&    while (sysread(WHENCE, $buf, 1024)) {
\&        syswrite(WHITHER, $buf, length($buf));
\&    }
.Ve
.PP
Depending on the vicissitudes of your runtime system, even these calls
may need \f(CW\*(C`binmode\*(C'\fR or \f(CW\*(C`O_BINARY\*(C'\fR first.  Systems known to be free of
such difficulties include Unix, the Mac \s-1OS,\s0 Plan 9, and Inferno.
.SS "File Locking"
.IX Subsection "File Locking"
In a multitasking environment, you may need to be careful not to collide
with other processes who want to do I/O on the same files as you
are working on.  You'll often need shared or exclusive locks
on files for reading and writing respectively.  You might just
pretend that only exclusive locks exist.
.PP
Never use the existence of a file \f(CW\*(C`\-e $file\*(C'\fR as a locking indication,
because there is a race condition between the test for the existence of
the file and its creation.  It's possible for another process to create
a file in the slice of time between your existence check and your attempt
to create the file.  Atomicity is critical.
.PP
Perl's most portable locking interface is via the \f(CW\*(C`flock\*(C'\fR function,
whose simplicity is emulated on systems that don't directly support it
such as SysV or Windows.  The underlying semantics may affect how
it all works, so you should learn how \f(CW\*(C`flock\*(C'\fR is implemented on your
system's port of Perl.
.PP
File locking \fIdoes not\fR lock out another process that would like to
do I/O.  A file lock only locks out others trying to get a lock, not
processes trying to do I/O.  Because locks are advisory, if one process
uses locking and another doesn't, all bets are off.
.PP
By default, the \f(CW\*(C`flock\*(C'\fR call will block until a lock is granted.
A request for a shared lock will be granted as soon as there is no
exclusive locker.  A request for an exclusive lock will be granted as
soon as there is no locker of any kind.  Locks are on file descriptors,
not file names.  You can't lock a file until you open it, and you can't
hold on to a lock once the file has been closed.
.PP
Here's how to get a blocking shared lock on a file, typically used
for reading:
.PP
.Vb 5
\&    use 5.004;
\&    use Fcntl qw(:DEFAULT :flock);
\&    open(FH, "< filename")  or die "can\*(Aqt open filename: $!";
\&    flock(FH, LOCK_SH)      or die "can\*(Aqt lock filename: $!";
\&    # now read from FH
.Ve
.PP
You can get a non-blocking lock by using \f(CW\*(C`LOCK_NB\*(C'\fR.
.PP
.Vb 2
\&    flock(FH, LOCK_SH | LOCK_NB)
\&        or die "can\*(Aqt lock filename: $!";
.Ve
.PP
This can be useful for producing more user-friendly behaviour by warning
if you're going to be blocking:
.PP
.Vb 10
\&    use 5.004;
\&    use Fcntl qw(:DEFAULT :flock);
\&    open(FH, "< filename")  or die "can\*(Aqt open filename: $!";
\&    unless (flock(FH, LOCK_SH | LOCK_NB)) {
\&        $| = 1;
\&        print "Waiting for lock...";
\&        flock(FH, LOCK_SH)  or die "can\*(Aqt lock filename: $!";
\&        print "got it.\en"
\&    } 
\&    # now read from FH
.Ve
.PP
To get an exclusive lock, typically used for writing, you have to be
careful.  We \f(CW\*(C`sysopen\*(C'\fR the file so it can be locked before it gets
emptied.  You can get a nonblocking version using \f(CW\*(C`LOCK_EX | LOCK_NB\*(C'\fR.
.PP
.Vb 9
\&    use 5.004;
\&    use Fcntl qw(:DEFAULT :flock);
\&    sysopen(FH, "filename", O_WRONLY | O_CREAT)
\&        or die "can\*(Aqt open filename: $!";
\&    flock(FH, LOCK_EX)
\&        or die "can\*(Aqt lock filename: $!";
\&    truncate(FH, 0)
\&        or die "can\*(Aqt truncate filename: $!";
\&    # now write to FH
.Ve
.PP
Finally, due to the uncounted millions who cannot be dissuaded from
wasting cycles on useless vanity devices called hit counters, here's
how to increment a number in a file safely:
.PP
.Vb 1
\&    use Fcntl qw(:DEFAULT :flock);
\&
\&    sysopen(FH, "numfile", O_RDWR | O_CREAT)
\&        or die "can\*(Aqt open numfile: $!";
\&    # autoflush FH
\&    $ofh = select(FH); $| = 1; select ($ofh);
\&    flock(FH, LOCK_EX)
\&        or die "can\*(Aqt write\-lock numfile: $!";
\&
\&    $num = <FH> || 0;
\&    seek(FH, 0, 0)
\&        or die "can\*(Aqt rewind numfile : $!";
\&    print FH $num+1, "\en"
\&        or die "can\*(Aqt write numfile: $!";
\&
\&    truncate(FH, tell(FH))
\&        or die "can\*(Aqt truncate numfile: $!";
\&    close(FH)
\&        or die "can\*(Aqt close numfile: $!";
.Ve
.SS "\s-1IO\s0 Layers"
.IX Subsection "IO Layers"
In Perl 5.8.0 a new I/O framework called \*(L"PerlIO\*(R" was introduced.
This is a new \*(L"plumbing\*(R" for all the I/O happening in Perl; for the
most part everything will work just as it did, but PerlIO also brought
in some new features such as the ability to think of I/O as \*(L"layers\*(R".
One I/O layer may in addition to just moving the data also do
transformations on the data.  Such transformations may include
compression and decompression, encryption and decryption, and transforming
between various character encodings.
.PP
Full discussion about the features of PerlIO is out of scope for this
tutorial, but here is how to recognize the layers being used:
.IP "\(bu" 4
The three\-(or more)\-argument form of \f(CW\*(C`open\*(C'\fR is being used and the
second argument contains something else in addition to the usual
\&\f(CW\*(Aq<\*(Aq\fR, \f(CW\*(Aq>\*(Aq\fR, \f(CW\*(Aq>>\*(Aq\fR, \f(CW\*(Aq|\*(Aq\fR and their variants,
for example:
.Sp
.Vb 1
\&    open(my $fh, "<:crlf", $fn);
.Ve
.IP "\(bu" 4
The two-argument form of \f(CW\*(C`binmode\*(C'\fR is being used, for example
.Sp
.Vb 1
\&    binmode($fh, ":encoding(utf16)");
.Ve
.PP
For more detailed discussion about PerlIO see PerlIO;
for more detailed discussion about Unicode and I/O see perluniintro.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \f(CW\*(C`open\*(C'\fR and \f(CW\*(C`sysopen\*(C'\fR functions in \fIperlfunc\fR\|(1);
the system \fIopen\fR\|(2), \fIdup\fR\|(2), \fIfopen\fR\|(3), and \fIfdopen\fR\|(3) manpages;
the \s-1POSIX\s0 documentation.
.SH "AUTHOR and COPYRIGHT"
.IX Header "AUTHOR and COPYRIGHT"
Copyright 1998 Tom Christiansen.
.PP
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
Irrespective of its distribution, all code examples in these files are
hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun or for profit
as you see fit.  A simple comment in the code giving credit would be
courteous but is not required.
.SH "HISTORY"
.IX Header "HISTORY"
First release: Sat Jan  9 08:09:11 \s-1MST 1999\s0
                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlopentut5.16.1                            0100644 0001750 0001750 00000135027 12566207422 023641  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOPENTUT 1"
.TH PERLOPENTUT 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlopentut \- tutorial on opening things in Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl has two simple, built-in ways to open files: the shell way for
convenience, and the C way for precision.  The shell way also has 2\- and
3\-argument forms, which have different semantics for handling the filename.
The choice is yours.
.SH "Open a\*` la shell"
.IX Header "Open a` la shell"
Perl's \f(CW\*(C`open\*(C'\fR function was designed to mimic the way command-line
redirection in the shell works.  Here are some basic examples
from the shell:
.PP
.Vb 6
\&    $ myprogram file1 file2 file3
\&    $ myprogram    <  inputfile
\&    $ myprogram    >  outputfile
\&    $ myprogram    >> outputfile
\&    $ myprogram    |  otherprogram 
\&    $ otherprogram |  myprogram
.Ve
.PP
And here are some more advanced examples:
.PP
.Vb 4
\&    $ otherprogram      | myprogram f1 \- f2
\&    $ otherprogram 2>&1 | myprogram \-
\&    $ myprogram     <&3
\&    $ myprogram     >&4
.Ve
.PP
Programmers accustomed to constructs like those above can take comfort
in learning that Perl directly supports these familiar constructs using
virtually the same syntax as the shell.
.SS "Simple Opens"
.IX Subsection "Simple Opens"
The \f(CW\*(C`open\*(C'\fR function takes two arguments: the first is a filehandle,
and the second is a single string comprising both what to open and how
to open it.  \f(CW\*(C`open\*(C'\fR returns true when it works, and when it fails,
returns a false value and sets the special variable \f(CW$!\fR to reflect
the system error.  If the filehandle was previously opened, it will
be implicitly closed first.
.PP
For example:
.PP
.Vb 4
\&    open(INFO,      "datafile") || die("can\*(Aqt open datafile: $!");
\&    open(INFO,   "<  datafile") || die("can\*(Aqt open datafile: $!");
\&    open(RESULTS,">  runstats") || die("can\*(Aqt open runstats: $!");
\&    open(LOG,    ">> logfile ") || die("can\*(Aqt open logfile:  $!");
.Ve
.PP
If you prefer the low-punctuation version, you could write that this way:
.PP
.Vb 3
\&    open INFO,   "<  datafile"  or die "can\*(Aqt open datafile: $!";
\&    open RESULTS,">  runstats"  or die "can\*(Aqt open runstats: $!";
\&    open LOG,    ">> logfile "  or die "can\*(Aqt open logfile:  $!";
.Ve
.PP
A few things to notice.  First, the leading \f(CW\*(C`<\*(C'\fR is optional.
If omitted, Perl assumes that you want to open the file for reading.
.PP
Note also that the first example uses the \f(CW\*(C`||\*(C'\fR logical operator, and the
second uses \f(CW\*(C`or\*(C'\fR, which has lower precedence.  Using \f(CW\*(C`||\*(C'\fR in the latter
examples would effectively mean
.PP
.Vb 1
\&    open INFO, ( "<  datafile"  || die "can\*(Aqt open datafile: $!" );
.Ve
.PP
which is definitely not what you want.
.PP
The other important thing to notice is that, just as in the shell,
any whitespace before or after the filename is ignored.  This is good,
because you wouldn't want these to do different things:
.PP
.Vb 3
\&    open INFO,   "<datafile"   
\&    open INFO,   "< datafile" 
\&    open INFO,   "<  datafile"
.Ve
.PP
Ignoring surrounding whitespace also helps for when you read a filename
in from a different file, and forget to trim it before opening:
.PP
.Vb 2
\&    $filename = <INFO>;         # oops, \en still there
\&    open(EXTRA, "< $filename") || die "can\*(Aqt open $filename: $!";
.Ve
.PP
This is not a bug, but a feature.  Because \f(CW\*(C`open\*(C'\fR mimics the shell in
its style of using redirection arrows to specify how to open the file, it
also does so with respect to extra whitespace around the filename itself
as well.  For accessing files with naughty names, see 
\&\*(L"Dispelling the Dweomer\*(R".
.PP
There is also a 3\-argument version of \f(CW\*(C`open\*(C'\fR, which lets you put the
special redirection characters into their own argument:
.PP
.Vb 1
\&    open( INFO, ">", $datafile ) || die "Can\*(Aqt create $datafile: $!";
.Ve
.PP
In this case, the filename to open is the actual string in \f(CW$datafile\fR,
so you don't have to worry about \f(CW$datafile\fR containing characters
that might influence the open mode, or whitespace at the beginning of
the filename that would be absorbed in the 2\-argument version.  Also,
any reduction of unnecessary string interpolation is a good thing.
.SS "Indirect Filehandles"
.IX Subsection "Indirect Filehandles"
\&\f(CW\*(C`open\*(C'\fR's first argument can be a reference to a filehandle.  As of
perl 5.6.0, if the argument is uninitialized, Perl will automatically
create a filehandle and put a reference to it in the first argument,
like so:
.PP
.Vb 5
\&    open( my $in, $infile )   or die "Couldn\*(Aqt read $infile: $!";
\&    while ( <$in> ) {
\&        # do something with $_
\&    }
\&    close $in;
.Ve
.PP
Indirect filehandles make namespace management easier.  Since filehandles
are global to the current package, two subroutines trying to open
\&\f(CW\*(C`INFILE\*(C'\fR will clash.  With two functions opening indirect filehandles
like \f(CW\*(C`my $infile\*(C'\fR, there's no clash and no need to worry about future
conflicts.
.PP
Another convenient behavior is that an indirect filehandle automatically
closes when there are no more references to it:
.PP
.Vb 4
\&    sub firstline {
\&        open( my $in, shift ) && return scalar <$in>;
\&        # no close() required
\&    }
.Ve
.PP
Indirect filehandles also make it easy to pass filehandles to and return
filehandles from subroutines:
.PP
.Vb 5
\&    for my $file ( qw(this.conf that.conf) ) {
\&        my $fin = open_or_throw(\*(Aq<\*(Aq, $file);
\&        process_conf( $fin );
\&        # no close() needed
\&    }
\&
\&    use Carp;
\&    sub open_or_throw {
\&        my ($mode, $filename) = @_;
\&        open my $h, $mode, $filename
\&            or croak "Could not open \*(Aq$filename\*(Aq: $!";
\&        return $h;
\&    }
.Ve
.SS "Pipe Opens"
.IX Subsection "Pipe Opens"
In C, when you want to open a file using the standard I/O library,
you use the \f(CW\*(C`fopen\*(C'\fR function, but when opening a pipe, you use the
\&\f(CW\*(C`popen\*(C'\fR function.  But in the shell, you just use a different redirection
character.  That's also the case for Perl.  The \f(CW\*(C`open\*(C'\fR call 
remains the same\*(--just its argument differs.
.PP
If the leading character is a pipe symbol, \f(CW\*(C`open\*(C'\fR starts up a new
command and opens a write-only filehandle leading into that command.
This lets you write into that handle and have what you write show up on
that command's standard input.  For example:
.PP
.Vb 3
\&    open(PRINTER, "| lpr \-Plp1")    || die "can\*(Aqt run lpr: $!";
\&    print PRINTER "stuff\en";
\&    close(PRINTER)                  || die "can\*(Aqt close lpr: $!";
.Ve
.PP
If the trailing character is a pipe, you start up a new command and open a
read-only filehandle leading out of that command.  This lets whatever that
command writes to its standard output show up on your handle for reading.
For example:
.PP
.Vb 3
\&    open(NET, "netstat \-i \-n |")    || die "can\*(Aqt fork netstat: $!";
\&    while (<NET>) { }               # do something with input
\&    close(NET)                      || die "can\*(Aqt close netstat: $!";
.Ve
.PP
What happens if you try to open a pipe to or from a non-existent
command?  If possible, Perl will detect the failure and set \f(CW$!\fR as
usual.  But if the command contains special shell characters, such as
\&\f(CW\*(C`>\*(C'\fR or \f(CW\*(C`*\*(C'\fR, called 'metacharacters', Perl does not execute the
command directly.  Instead, Perl runs the shell, which then tries to
run the command.  This means that it's the shell that gets the error
indication.  In such a case, the \f(CW\*(C`open\*(C'\fR call will only indicate
failure if Perl can't even run the shell.  See \*(L"How can I
capture \s-1STDERR\s0 from an external command?\*(R" in perlfaq8 to see how to cope with
this.  There's also an explanation in perlipc.
.PP
If you would like to open a bidirectional pipe, the IPC::Open2
library will handle this for you.  Check out 
\&\*(L"Bidirectional Communication with Another Process\*(R" in perlipc
.PP
perl\-5.6.x introduced a version of piped open that executes a process
based on its command line arguments without relying on the shell. (Similar
to the \f(CW\*(C`system(@LIST)\*(C'\fR notation.) This is safer and faster than executing
a single argument pipe-command, but does not allow special shell
constructs. (It is also not supported on Microsoft Windows, Mac \s-1OS\s0 Classic
or \s-1RISC\s0 \s-1OS\s0.)
.PP
Here's an example of \f(CW\*(C`open \*(Aq\-|\*(Aq\*(C'\fR, which prints a random Unix
fortune cookie as uppercase:
.PP
.Vb 8
\&    my $collection = shift(@ARGV);
\&    open my $fortune, \*(Aq\-|\*(Aq, \*(Aqfortune\*(Aq, $collection
\&        or die "Could not find fortune \- $!";
\&    while (<$fortune>)
\&    {
\&        print uc($_);
\&    }
\&    close($fortune);
.Ve
.PP
And this \f(CW\*(C`open \*(Aq|\-\*(Aq\*(C'\fR pipes into lpr:
.PP
.Vb 5
\&    open my $printer, \*(Aq|\-\*(Aq, \*(Aqlpr\*(Aq, \*(Aq\-Plp1\*(Aq
\&        or die "can\*(Aqt run lpr: $!";
\&    print {$printer} "stuff\en";
\&    close($printer)
\&        or die "can\*(Aqt close lpr: $!";
.Ve
.SS "The Minus File"
.IX Subsection "The Minus File"
Again following the lead of the standard shell utilities, Perl's
\&\f(CW\*(C`open\*(C'\fR function treats a file whose name is a single minus, \*(L"\-\*(R", in a
special way.  If you open minus for reading, it really means to access
the standard input.  If you open minus for writing, it really means to
access the standard output.
.PP
If minus can be used as the default input or default output, what happens
if you open a pipe into or out of minus?  What's the default command it
would run?  The same script as you're currently running!  This is actually
a stealth \f(CW\*(C`fork\*(C'\fR hidden inside an \f(CW\*(C`open\*(C'\fR call.  See 
\&\*(L"Safe Pipe Opens\*(R" in perlipc for details.
.SS "Mixing Reads and Writes"
.IX Subsection "Mixing Reads and Writes"
It is possible to specify both read and write access.  All you do is
add a \*(L"+\*(R" symbol in front of the redirection.  But as in the shell,
using a less-than on a file never creates a new file; it only opens an
existing one.  On the other hand, using a greater-than always clobbers
(truncates to zero length) an existing file, or creates a brand-new one
if there isn't an old one.  Adding a \*(L"+\*(R" for read-write doesn't affect
whether it only works on existing files or always clobbers existing ones.
.PP
.Vb 2
\&    open(WTMP, "+< /usr/adm/wtmp") 
\&        || die "can\*(Aqt open /usr/adm/wtmp: $!";
\&
\&    open(SCREEN, "+> lkscreen")
\&        || die "can\*(Aqt open lkscreen: $!";
\&
\&    open(LOGFILE, "+>> /var/log/applog")
\&        || die "can\*(Aqt open /var/log/applog: $!";
.Ve
.PP
The first one won't create a new file, and the second one will always
clobber an old one.  The third one will create a new file if necessary
and not clobber an old one, and it will allow you to read at any point
in the file, but all writes will always go to the end.  In short,
the first case is substantially more common than the second and third
cases, which are almost always wrong.  (If you know C, the plus in
Perl's \f(CW\*(C`open\*(C'\fR is historically derived from the one in C's fopen(3S),
which it ultimately calls.)
.PP
In fact, when it comes to updating a file, unless you're working on
a binary file as in the \s-1WTMP\s0 case above, you probably don't want to
use this approach for updating.  Instead, Perl's \fB\-i\fR flag comes to
the rescue.  The following command takes all the C, \*(C+, or yacc source
or header files and changes all their foo's to bar's, leaving
the old version in the original filename with a \*(L".orig\*(R" tacked
on the end:
.PP
.Vb 1
\&    $ perl \-i.orig \-pe \*(Aqs/\ebfoo\eb/bar/g\*(Aq *.[Cchy]
.Ve
.PP
This is a short cut for some renaming games that are really
the best way to update textfiles.  See the second question in 
perlfaq5 for more details.
.SS "Filters"
.IX Subsection "Filters"
One of the most common uses for \f(CW\*(C`open\*(C'\fR is one you never
even notice.  When you process the \s-1ARGV\s0 filehandle using
\&\f(CW\*(C`<ARGV>\*(C'\fR, Perl actually does an implicit open 
on each file in \f(CW@ARGV\fR.  Thus a program called like this:
.PP
.Vb 1
\&    $ myprogram file1 file2 file3
.Ve
.PP
can have all its files opened and processed one at a time
using a construct no more complex than:
.PP
.Vb 3
\&    while (<>) {
\&        # do something with $_
\&    }
.Ve
.PP
If \f(CW@ARGV\fR is empty when the loop first begins, Perl pretends you've opened
up minus, that is, the standard input.  In fact, \f(CW$ARGV\fR, the currently
open file during \f(CW\*(C`<ARGV>\*(C'\fR processing, is even set to \*(L"\-\*(R"
in these circumstances.
.PP
You are welcome to pre-process your \f(CW@ARGV\fR before starting the loop to
make sure it's to your liking.  One reason to do this might be to remove
command options beginning with a minus.  While you can always roll the
simple ones by hand, the Getopts modules are good for this:
.PP
.Vb 1
\&    use Getopt::Std;
\&
\&    # \-v, \-D, \-o ARG, sets $opt_v, $opt_D, $opt_o
\&    getopts("vDo:");            
\&
\&    # \-v, \-D, \-o ARG, sets $args{v}, $args{D}, $args{o}
\&    getopts("vDo:", \e%args);
.Ve
.PP
Or the standard Getopt::Long module to permit named arguments:
.PP
.Vb 5
\&    use Getopt::Long;
\&    GetOptions( "verbose"  => \e$verbose,        # \-\-verbose
\&                "Debug"    => \e$debug,          # \-\-Debug
\&                "output=s" => \e$output );       
\&            # \-\-output=somestring or \-\-output somestring
.Ve
.PP
Another reason for preprocessing arguments is to make an empty
argument list default to all files:
.PP
.Vb 1
\&    @ARGV = glob("*") unless @ARGV;
.Ve
.PP
You could even filter out all but plain, text files.  This is a bit
silent, of course, and you might prefer to mention them on the way.
.PP
.Vb 1
\&    @ARGV = grep { \-f && \-T } @ARGV;
.Ve
.PP
If you're using the \fB\-n\fR or \fB\-p\fR command-line options, you
should put changes to \f(CW@ARGV\fR in a \f(CW\*(C`BEGIN{}\*(C'\fR block.
.PP
Remember that a normal \f(CW\*(C`open\*(C'\fR has special properties, in that it might
call fopen(3S) or it might called popen(3S), depending on what its
argument looks like; that's why it's sometimes called \*(L"magic open\*(R".
Here's an example:
.PP
.Vb 3
\&    $pwdinfo = \`domainname\` =~ /^(\e(none\e))?$/
\&                    ? \*(Aq< /etc/passwd\*(Aq
\&                    : \*(Aqypcat passwd |\*(Aq;
\&
\&    open(PWD, $pwdinfo)                 
\&                or die "can\*(Aqt open $pwdinfo: $!";
.Ve
.PP
This sort of thing also comes into play in filter processing.  Because
\&\f(CW\*(C`<ARGV>\*(C'\fR processing employs the normal, shell-style Perl \f(CW\*(C`open\*(C'\fR,
it respects all the special things we've already seen:
.PP
.Vb 1
\&    $ myprogram f1 "cmd1|" \- f2 "cmd2|" f3 < tmpfile
.Ve
.PP
That program will read from the file \fIf1\fR, the process \fIcmd1\fR, standard
input (\fItmpfile\fR in this case), the \fIf2\fR file, the \fIcmd2\fR command,
and finally the \fIf3\fR file.
.PP
Yes, this also means that if you have files named \*(L"\-\*(R" (and so on) in
your directory, they won't be processed as literal files by \f(CW\*(C`open\*(C'\fR.
You'll need to pass them as \*(L"./\-\*(R", much as you would for the \fIrm\fR program,
or you could use \f(CW\*(C`sysopen\*(C'\fR as described below.
.PP
One of the more interesting applications is to change files of a certain
name into pipes.  For example, to autoprocess gzipped or compressed
files by decompressing them with \fIgzip\fR:
.PP
.Vb 1
\&    @ARGV = map { /\e.(gz|Z)$/ ? "gzip \-dc $_ |" : $_  } @ARGV;
.Ve
.PP
Or, if you have the \fI\s-1GET\s0\fR program installed from \s-1LWP\s0,
you can fetch URLs before processing them:
.PP
.Vb 1
\&    @ARGV = map { m#^\ew+://# ? "GET $_ |" : $_ } @ARGV;
.Ve
.PP
It's not for nothing that this is called magic \f(CW\*(C`<ARGV>\*(C'\fR.
Pretty nifty, eh?
.SH "Open a\*` la C"
.IX Header "Open a` la C"
If you want the convenience of the shell, then Perl's \f(CW\*(C`open\*(C'\fR is
definitely the way to go.  On the other hand, if you want finer precision
than C's simplistic fopen(3S) provides you should look to Perl's
\&\f(CW\*(C`sysopen\*(C'\fR, which is a direct hook into the \fIopen\fR\|(2) system call.
That does mean it's a bit more involved, but that's the price of 
precision.
.PP
\&\f(CW\*(C`sysopen\*(C'\fR takes 3 (or 4) arguments.
.PP
.Vb 1
\&    sysopen HANDLE, PATH, FLAGS, [MASK]
.Ve
.PP
The \s-1HANDLE\s0 argument is a filehandle just as with \f(CW\*(C`open\*(C'\fR.  The \s-1PATH\s0 is
a literal path, one that doesn't pay attention to any greater-thans or
less-thans or pipes or minuses, nor ignore whitespace.  If it's there,
it's part of the path.  The \s-1FLAGS\s0 argument contains one or more values
derived from the Fcntl module that have been or'd together using the
bitwise \*(L"|\*(R" operator.  The final argument, the \s-1MASK\s0, is optional; if
present, it is combined with the user's current umask for the creation
mode of the file.  You should usually omit this.
.PP
Although the traditional values of read-only, write-only, and read-write
are 0, 1, and 2 respectively, this is known not to hold true on some
systems.  Instead, it's best to load in the appropriate constants first
from the Fcntl module, which supplies the following standard flags:
.PP
.Vb 8
\&    O_RDONLY            Read only
\&    O_WRONLY            Write only
\&    O_RDWR              Read and write
\&    O_CREAT             Create the file if it doesn\*(Aqt exist
\&    O_EXCL              Fail if the file already exists
\&    O_APPEND            Append to the file
\&    O_TRUNC             Truncate the file
\&    O_NONBLOCK          Non\-blocking access
.Ve
.PP
Less common flags that are sometimes available on some operating
systems include \f(CW\*(C`O_BINARY\*(C'\fR, \f(CW\*(C`O_TEXT\*(C'\fR, \f(CW\*(C`O_SHLOCK\*(C'\fR, \f(CW\*(C`O_EXLOCK\*(C'\fR,
\&\f(CW\*(C`O_DEFER\*(C'\fR, \f(CW\*(C`O_SYNC\*(C'\fR, \f(CW\*(C`O_ASYNC\*(C'\fR, \f(CW\*(C`O_DSYNC\*(C'\fR, \f(CW\*(C`O_RSYNC\*(C'\fR,
\&\f(CW\*(C`O_NOCTTY\*(C'\fR, \f(CW\*(C`O_NDELAY\*(C'\fR and \f(CW\*(C`O_LARGEFILE\*(C'\fR.  Consult your \fIopen\fR\|(2)
manpage or its local equivalent for details.  (Note: starting from
Perl release 5.6 the \f(CW\*(C`O_LARGEFILE\*(C'\fR flag, if available, is automatically
added to the \fIsysopen()\fR flags because large files are the default.)
.PP
Here's how to use \f(CW\*(C`sysopen\*(C'\fR to emulate the simple \f(CW\*(C`open\*(C'\fR calls we had
before.  We'll omit the \f(CW\*(C`|| die $!\*(C'\fR checks for clarity, but make sure
you always check the return values in real code.  These aren't quite
the same, since \f(CW\*(C`open\*(C'\fR will trim leading and trailing whitespace,
but you'll get the idea.
.PP
To open a file for reading:
.PP
.Vb 2
\&    open(FH, "< $path");
\&    sysopen(FH, $path, O_RDONLY);
.Ve
.PP
To open a file for writing, creating a new file if needed or else truncating
an old file:
.PP
.Vb 2
\&    open(FH, "> $path");
\&    sysopen(FH, $path, O_WRONLY | O_TRUNC | O_CREAT);
.Ve
.PP
To open a file for appending, creating one if necessary:
.PP
.Vb 2
\&    open(FH, ">> $path");
\&    sysopen(FH, $path, O_WRONLY | O_APPEND | O_CREAT);
.Ve
.PP
To open a file for update, where the file must already exist:
.PP
.Vb 2
\&    open(FH, "+< $path");
\&    sysopen(FH, $path, O_RDWR);
.Ve
.PP
And here are things you can do with \f(CW\*(C`sysopen\*(C'\fR that you cannot do with
a regular \f(CW\*(C`open\*(C'\fR.  As you'll see, it's just a matter of controlling the
flags in the third argument.
.PP
To open a file for writing, creating a new file which must not previously
exist:
.PP
.Vb 1
\&    sysopen(FH, $path, O_WRONLY | O_EXCL | O_CREAT);
.Ve
.PP
To open a file for appending, where that file must already exist:
.PP
.Vb 1
\&    sysopen(FH, $path, O_WRONLY | O_APPEND);
.Ve
.PP
To open a file for update, creating a new file if necessary:
.PP
.Vb 1
\&    sysopen(FH, $path, O_RDWR | O_CREAT);
.Ve
.PP
To open a file for update, where that file must not already exist:
.PP
.Vb 1
\&    sysopen(FH, $path, O_RDWR | O_EXCL | O_CREAT);
.Ve
.PP
To open a file without blocking, creating one if necessary:
.PP
.Vb 1
\&    sysopen(FH, $path, O_WRONLY | O_NONBLOCK | O_CREAT);
.Ve
.SS "Permissions a\*` la mode"
.IX Subsection "Permissions a` la mode"
If you omit the \s-1MASK\s0 argument to \f(CW\*(C`sysopen\*(C'\fR, Perl uses the octal value
0666.  The normal \s-1MASK\s0 to use for executables and directories should
be 0777, and for anything else, 0666.
.PP
Why so permissive?  Well, it isn't really.  The \s-1MASK\s0 will be modified
by your process's current \f(CW\*(C`umask\*(C'\fR.  A umask is a number representing
\&\fIdisabled\fR permissions bits; that is, bits that will not be turned on
in the created file's permissions field.
.PP
For example, if your \f(CW\*(C`umask\*(C'\fR were 027, then the 020 part would
disable the group from writing, and the 007 part would disable others
from reading, writing, or executing.  Under these conditions, passing
\&\f(CW\*(C`sysopen\*(C'\fR 0666 would create a file with mode 0640, since \f(CW\*(C`0666 & ~027\*(C'\fR
is 0640.
.PP
You should seldom use the \s-1MASK\s0 argument to \f(CW\*(C`sysopen()\*(C'\fR.  That takes
away the user's freedom to choose what permission new files will have.
Denying choice is almost always a bad thing.  One exception would be for
cases where sensitive or private data is being stored, such as with mail
folders, cookie files, and internal temporary files.
.SH "Obscure Open Tricks"
.IX Header "Obscure Open Tricks"
.SS "Re-Opening Files (dups)"
.IX Subsection "Re-Opening Files (dups)"
Sometimes you already have a filehandle open, and want to make another
handle that's a duplicate of the first one.  In the shell, we place an
ampersand in front of a file descriptor number when doing redirections.
For example, \f(CW\*(C`2>&1\*(C'\fR makes descriptor 2 (that's \s-1STDERR\s0 in Perl)
be redirected into descriptor 1 (which is usually Perl's \s-1STDOUT\s0).
The same is essentially true in Perl: a filename that begins with an
ampersand is treated instead as a file descriptor if a number, or as a
filehandle if a string.
.PP
.Vb 2
\&    open(SAVEOUT, ">&SAVEERR") || die "couldn\*(Aqt dup SAVEERR: $!";
\&    open(MHCONTEXT, "<&4")     || die "couldn\*(Aqt dup fd4: $!";
.Ve
.PP
That means that if a function is expecting a filename, but you don't
want to give it a filename because you already have the file open, you
can just pass the filehandle with a leading ampersand.  It's best to
use a fully qualified handle though, just in case the function happens
to be in a different package:
.PP
.Vb 1
\&    somefunction("&main::LOGFILE");
.Ve
.PP
This way if \fIsomefunction()\fR is planning on opening its argument, it can
just use the already opened handle.  This differs from passing a handle,
because with a handle, you don't open the file.  Here you have something
you can pass to open.
.PP
If you have one of those tricky, newfangled I/O objects that the \*(C+
folks are raving about, then this doesn't work because those aren't a
proper filehandle in the native Perl sense.  You'll have to use \fIfileno()\fR
to pull out the proper descriptor number, assuming you can:
.PP
.Vb 4
\&    use IO::Socket;
\&    $handle = IO::Socket::INET\->new("www.perl.com:80");
\&    $fd = $handle\->fileno;
\&    somefunction("&$fd");  # not an indirect function call
.Ve
.PP
It can be easier (and certainly will be faster) just to use real
filehandles though:
.PP
.Vb 4
\&    use IO::Socket;
\&    local *REMOTE = IO::Socket::INET\->new("www.perl.com:80");
\&    die "can\*(Aqt connect" unless defined(fileno(REMOTE));
\&    somefunction("&main::REMOTE");
.Ve
.PP
If the filehandle or descriptor number is preceded not just with a simple
\&\*(L"&\*(R" but rather with a \*(L"&=\*(R" combination, then Perl will not create a
completely new descriptor opened to the same place using the \fIdup\fR\|(2)
system call.  Instead, it will just make something of an alias to the
existing one using the fdopen(3S) library call.  This is slightly more
parsimonious of systems resources, although this is less a concern
these days.  Here's an example of that:
.PP
.Vb 2
\&    $fd = $ENV{"MHCONTEXTFD"};
\&    open(MHCONTEXT, "<&=$fd")   or die "couldn\*(Aqt fdopen $fd: $!";
.Ve
.PP
If you're using magic \f(CW\*(C`<ARGV>\*(C'\fR, you could even pass in as a
command line argument in \f(CW@ARGV\fR something like \f(CW"<&=$MHCONTEXTFD"\fR,
but we've never seen anyone actually do this.
.SS "Dispelling the Dweomer"
.IX Subsection "Dispelling the Dweomer"
Perl is more of a DWIMmer language than something like Java\*(--where \s-1DWIM\s0
is an acronym for \*(L"do what I mean\*(R".  But this principle sometimes leads
to more hidden magic than one knows what to do with.  In this way, Perl
is also filled with \fIdweomer\fR, an obscure word meaning an enchantment.
Sometimes, Perl's DWIMmer is just too much like dweomer for comfort.
.PP
If magic \f(CW\*(C`open\*(C'\fR is a bit too magical for you, you don't have to turn
to \f(CW\*(C`sysopen\*(C'\fR.  To open a file with arbitrary weird characters in
it, it's necessary to protect any leading and trailing whitespace.
Leading whitespace is protected by inserting a \f(CW"./"\fR in front of a
filename that starts with whitespace.  Trailing whitespace is protected
by appending an \s-1ASCII\s0 \s-1NUL\s0 byte (\f(CW"\e0"\fR) at the end of the string.
.PP
.Vb 2
\&    $file =~ s#^(\es)#./$1#;
\&    open(FH, "< $file\e0")   || die "can\*(Aqt open $file: $!";
.Ve
.PP
This assumes, of course, that your system considers dot the current
working directory, slash the directory separator, and disallows \s-1ASCII\s0
NULs within a valid filename.  Most systems follow these conventions,
including all \s-1POSIX\s0 systems as well as proprietary Microsoft systems.
The only vaguely popular system that doesn't work this way is the
\&\*(L"Classic\*(R" Macintosh system, which uses a colon where the rest of us
use a slash.  Maybe \f(CW\*(C`sysopen\*(C'\fR isn't such a bad idea after all.
.PP
If you want to use \f(CW\*(C`<ARGV>\*(C'\fR processing in a totally boring
and non-magical way, you could do this first:
.PP
.Vb 10
\&    #   "Sam sat on the ground and put his head in his hands.  
\&    #   \*(AqI wish I had never come here, and I don\*(Aqt want to see 
\&    #   no more magic,\*(Aq he said, and fell silent."
\&    for (@ARGV) { 
\&        s#^([^./])#./$1#;
\&        $_ .= "\e0";
\&    } 
\&    while (<>) {  
\&        # now process $_
\&    }
.Ve
.PP
But be warned that users will not appreciate being unable to use \*(L"\-\*(R"
to mean standard input, per the standard convention.
.SS "Paths as Opens"
.IX Subsection "Paths as Opens"
You've probably noticed how Perl's \f(CW\*(C`warn\*(C'\fR and \f(CW\*(C`die\*(C'\fR functions can
produce messages like:
.PP
.Vb 1
\&    Some warning at scriptname line 29, <FH> line 7.
.Ve
.PP
That's because you opened a filehandle \s-1FH\s0, and had read in seven records
from it.  But what was the name of the file, rather than the handle?
.PP
If you aren't running with \f(CW\*(C`strict refs\*(C'\fR, or if you've turned them off
temporarily, then all you have to do is this:
.PP
.Vb 4
\&    open($path, "< $path") || die "can\*(Aqt open $path: $!";
\&    while (<$path>) {
\&        # whatever
\&    }
.Ve
.PP
Since you're using the pathname of the file as its handle,
you'll get warnings more like
.PP
.Vb 1
\&    Some warning at scriptname line 29, </etc/motd> line 7.
.Ve
.SS "Single Argument Open"
.IX Subsection "Single Argument Open"
Remember how we said that Perl's open took two arguments?  That was a
passive prevarication.  You see, it can also take just one argument.
If and only if the variable is a global variable, not a lexical, you
can pass \f(CW\*(C`open\*(C'\fR just one argument, the filehandle, and it will 
get the path from the global scalar variable of the same name.
.PP
.Vb 5
\&    $FILE = "/etc/motd";
\&    open FILE or die "can\*(Aqt open $FILE: $!";
\&    while (<FILE>) {
\&        # whatever
\&    }
.Ve
.PP
Why is this here?  Someone has to cater to the hysterical porpoises.
It's something that's been in Perl since the very beginning, if not
before.
.SS "Playing with \s-1STDIN\s0 and \s-1STDOUT\s0"
.IX Subsection "Playing with STDIN and STDOUT"
One clever move with \s-1STDOUT\s0 is to explicitly close it when you're done
with the program.
.PP
.Vb 1
\&    END { close(STDOUT) || die "can\*(Aqt close stdout: $!" }
.Ve
.PP
If you don't do this, and your program fills up the disk partition due
to a command line redirection, it won't report the error exit with a
failure status.
.PP
You don't have to accept the \s-1STDIN\s0 and \s-1STDOUT\s0 you were given.  You are
welcome to reopen them if you'd like.
.PP
.Vb 2
\&    open(STDIN, "< datafile")
\&        || die "can\*(Aqt open datafile: $!";
\&
\&    open(STDOUT, "> output")
\&        || die "can\*(Aqt open output: $!";
.Ve
.PP
And then these can be accessed directly or passed on to subprocesses.
This makes it look as though the program were initially invoked
with those redirections from the command line.
.PP
It's probably more interesting to connect these to pipes.  For example:
.PP
.Vb 3
\&    $pager = $ENV{PAGER} || "(less || more)";
\&    open(STDOUT, "| $pager")
\&        || die "can\*(Aqt fork a pager: $!";
.Ve
.PP
This makes it appear as though your program were called with its stdout
already piped into your pager.  You can also use this kind of thing
in conjunction with an implicit fork to yourself.  You might do this
if you would rather handle the post processing in your own program,
just in a different process:
.PP
.Vb 4
\&    head(100);
\&    while (<>) {
\&        print;
\&    } 
\&
\&    sub head {
\&        my $lines = shift || 20;
\&        return if $pid = open(STDOUT, "|\-");       # return if parent
\&        die "cannot fork: $!" unless defined $pid;
\&        while (<STDIN>) {
\&            last if \-\-$lines < 0;
\&            print;
\&        } 
\&        exit;
\&    }
.Ve
.PP
This technique can be applied to repeatedly push as many filters on your
output stream as you wish.
.SH "Other I/O Issues"
.IX Header "Other I/O Issues"
These topics aren't really arguments related to \f(CW\*(C`open\*(C'\fR or \f(CW\*(C`sysopen\*(C'\fR,
but they do affect what you do with your open files.
.SS "Opening Non-File Files"
.IX Subsection "Opening Non-File Files"
When is a file not a file?  Well, you could say when it exists but
isn't a plain file.   We'll check whether it's a symbolic link first,
just in case.
.PP
.Vb 3
\&    if (\-l $file || ! \-f _) {
\&        print "$file is not a plain file\en";
\&    }
.Ve
.PP
What other kinds of files are there than, well, files?  Directories,
symbolic links, named pipes, Unix-domain sockets, and block and character
devices.  Those are all files, too\*(--just not \fIplain\fR files.  This isn't
the same issue as being a text file. Not all text files are plain files.
Not all plain files are text files.  That's why there are separate \f(CW\*(C`\-f\*(C'\fR
and \f(CW\*(C`\-T\*(C'\fR file tests.
.PP
To open a directory, you should use the \f(CW\*(C`opendir\*(C'\fR function, then
process it with \f(CW\*(C`readdir\*(C'\fR, carefully restoring the directory 
name if necessary:
.PP
.Vb 5
\&    opendir(DIR, $dirname) or die "can\*(Aqt opendir $dirname: $!";
\&    while (defined($file = readdir(DIR))) {
\&        # do something with "$dirname/$file"
\&    }
\&    closedir(DIR);
.Ve
.PP
If you want to process directories recursively, it's better to use the
File::Find module.  For example, this prints out all files recursively
and adds a slash to their names if the file is a directory.
.PP
.Vb 3
\&    @ARGV = qw(.) unless @ARGV;
\&    use File::Find;
\&    find sub { print $File::Find::name, \-d && \*(Aq/\*(Aq, "\en" }, @ARGV;
.Ve
.PP
This finds all bogus symbolic links beneath a particular directory:
.PP
.Vb 1
\&    find sub { print "$File::Find::name\en" if \-l && !\-e }, $dir;
.Ve
.PP
As you see, with symbolic links, you can just pretend that it is
what it points to.  Or, if you want to know \fIwhat\fR it points to, then
\&\f(CW\*(C`readlink\*(C'\fR is called for:
.PP
.Vb 7
\&    if (\-l $file) {
\&        if (defined($whither = readlink($file))) {
\&            print "$file points to $whither\en";
\&        } else {
\&            print "$file points nowhere: $!\en";
\&        } 
\&    }
.Ve
.SS "Opening Named Pipes"
.IX Subsection "Opening Named Pipes"
Named pipes are a different matter.  You pretend they're regular files,
but their opens will normally block until there is both a reader and
a writer.  You can read more about them in \*(L"Named Pipes\*(R" in perlipc.
Unix-domain sockets are rather different beasts as well; they're
described in \*(L"Unix-Domain \s-1TCP\s0 Clients and Servers\*(R" in perlipc.
.PP
When it comes to opening devices, it can be easy and it can be tricky.
We'll assume that if you're opening up a block device, you know what
you're doing.  The character devices are more interesting.  These are
typically used for modems, mice, and some kinds of printers.  This is
described in \*(L"How do I read and write the serial port?\*(R" in perlfaq8
It's often enough to open them carefully:
.PP
.Vb 5
\&    sysopen(TTYIN, "/dev/ttyS1", O_RDWR | O_NDELAY | O_NOCTTY)
\&                # (O_NOCTTY no longer needed on POSIX systems)
\&        or die "can\*(Aqt open /dev/ttyS1: $!";
\&    open(TTYOUT, "+>&TTYIN")
\&        or die "can\*(Aqt dup TTYIN: $!";
\&
\&    $ofh = select(TTYOUT); $| = 1; select($ofh);
\&
\&    print TTYOUT "+++at\e015";
\&    $answer = <TTYIN>;
.Ve
.PP
With descriptors that you haven't opened using \f(CW\*(C`sysopen\*(C'\fR, such as
sockets, you can set them to be non-blocking using \f(CW\*(C`fcntl\*(C'\fR:
.PP
.Vb 5
\&    use Fcntl;
\&    my $old_flags = fcntl($handle, F_GETFL, 0) 
\&        or die "can\*(Aqt get flags: $!";
\&    fcntl($handle, F_SETFL, $old_flags | O_NONBLOCK) 
\&        or die "can\*(Aqt set non blocking: $!";
.Ve
.PP
Rather than losing yourself in a morass of twisting, turning \f(CW\*(C`ioctl\*(C'\fRs,
all dissimilar, if you're going to manipulate ttys, it's best to
make calls out to the \fIstty\fR\|(1) program if you have it, or else use the
portable \s-1POSIX\s0 interface.  To figure this all out, you'll need to read the
\&\fItermios\fR\|(3) manpage, which describes the \s-1POSIX\s0 interface to tty devices,
and then \s-1POSIX\s0, which describes Perl's interface to \s-1POSIX\s0.  There are
also some high-level modules on \s-1CPAN\s0 that can help you with these games.
Check out Term::ReadKey and Term::ReadLine.
.SS "Opening Sockets"
.IX Subsection "Opening Sockets"
What else can you open?  To open a connection using sockets, you won't use
one of Perl's two open functions.  See 
\&\*(L"Sockets: Client/Server Communication\*(R" in perlipc for that.  Here's an 
example.  Once you have it, you can use \s-1FH\s0 as a bidirectional filehandle.
.PP
.Vb 2
\&    use IO::Socket;
\&    local *FH = IO::Socket::INET\->new("www.perl.com:80");
.Ve
.PP
For opening up a \s-1URL\s0, the \s-1LWP\s0 modules from \s-1CPAN\s0 are just what
the doctor ordered.  There's no filehandle interface, but
it's still easy to get the contents of a document:
.PP
.Vb 2
\&    use LWP::Simple;
\&    $doc = get(\*(Aqhttp://www.cpan.org/\*(Aq);
.Ve
.SS "Binary Files"
.IX Subsection "Binary Files"
On certain legacy systems with what could charitably be called terminally
convoluted (some would say broken) I/O models, a file isn't a file\*(--at
least, not with respect to the C standard I/O library.  On these old
systems whose libraries (but not kernels) distinguish between text and
binary streams, to get files to behave properly you'll have to bend over
backwards to avoid nasty problems.  On such infelicitous systems, sockets
and pipes are already opened in binary mode, and there is currently no
way to turn that off.  With files, you have more options.
.PP
Another option is to use the \f(CW\*(C`binmode\*(C'\fR function on the appropriate
handles before doing regular I/O on them:
.PP
.Vb 3
\&    binmode(STDIN);
\&    binmode(STDOUT);
\&    while (<STDIN>) { print }
.Ve
.PP
Passing \f(CW\*(C`sysopen\*(C'\fR a non-standard flag option will also open the file in
binary mode on those systems that support it.  This is the equivalent of
opening the file normally, then calling \f(CW\*(C`binmode\*(C'\fR on the handle.
.PP
.Vb 2
\&    sysopen(BINDAT, "records.data", O_RDWR | O_BINARY)
\&        || die "can\*(Aqt open records.data: $!";
.Ve
.PP
Now you can use \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`print\*(C'\fR on that handle without worrying
about the non-standard system I/O library breaking your data.  It's not
a pretty picture, but then, legacy systems seldom are.  \s-1CP/M\s0 will be
with us until the end of days, and after.
.PP
On systems with exotic I/O systems, it turns out that, astonishingly
enough, even unbuffered I/O using \f(CW\*(C`sysread\*(C'\fR and \f(CW\*(C`syswrite\*(C'\fR might do
sneaky data mutilation behind your back.
.PP
.Vb 3
\&    while (sysread(WHENCE, $buf, 1024)) {
\&        syswrite(WHITHER, $buf, length($buf));
\&    }
.Ve
.PP
Depending on the vicissitudes of your runtime system, even these calls
may need \f(CW\*(C`binmode\*(C'\fR or \f(CW\*(C`O_BINARY\*(C'\fR first.  Systems known to be free of
such difficulties include Unix, the Mac \s-1OS\s0, Plan 9, and Inferno.
.SS "File Locking"
.IX Subsection "File Locking"
In a multitasking environment, you may need to be careful not to collide
with other processes who want to do I/O on the same files as you
are working on.  You'll often need shared or exclusive locks
on files for reading and writing respectively.  You might just
pretend that only exclusive locks exist.
.PP
Never use the existence of a file \f(CW\*(C`\-e $file\*(C'\fR as a locking indication,
because there is a race condition between the test for the existence of
the file and its creation.  It's possible for another process to create
a file in the slice of time between your existence check and your attempt
to create the file.  Atomicity is critical.
.PP
Perl's most portable locking interface is via the \f(CW\*(C`flock\*(C'\fR function,
whose simplicity is emulated on systems that don't directly support it
such as SysV or Windows.  The underlying semantics may affect how
it all works, so you should learn how \f(CW\*(C`flock\*(C'\fR is implemented on your
system's port of Perl.
.PP
File locking \fIdoes not\fR lock out another process that would like to
do I/O.  A file lock only locks out others trying to get a lock, not
processes trying to do I/O.  Because locks are advisory, if one process
uses locking and another doesn't, all bets are off.
.PP
By default, the \f(CW\*(C`flock\*(C'\fR call will block until a lock is granted.
A request for a shared lock will be granted as soon as there is no
exclusive locker.  A request for an exclusive lock will be granted as
soon as there is no locker of any kind.  Locks are on file descriptors,
not file names.  You can't lock a file until you open it, and you can't
hold on to a lock once the file has been closed.
.PP
Here's how to get a blocking shared lock on a file, typically used
for reading:
.PP
.Vb 5
\&    use 5.004;
\&    use Fcntl qw(:DEFAULT :flock);
\&    open(FH, "< filename")  or die "can\*(Aqt open filename: $!";
\&    flock(FH, LOCK_SH)      or die "can\*(Aqt lock filename: $!";
\&    # now read from FH
.Ve
.PP
You can get a non-blocking lock by using \f(CW\*(C`LOCK_NB\*(C'\fR.
.PP
.Vb 2
\&    flock(FH, LOCK_SH | LOCK_NB)
\&        or die "can\*(Aqt lock filename: $!";
.Ve
.PP
This can be useful for producing more user-friendly behaviour by warning
if you're going to be blocking:
.PP
.Vb 10
\&    use 5.004;
\&    use Fcntl qw(:DEFAULT :flock);
\&    open(FH, "< filename")  or die "can\*(Aqt open filename: $!";
\&    unless (flock(FH, LOCK_SH | LOCK_NB)) {
\&        $| = 1;
\&        print "Waiting for lock...";
\&        flock(FH, LOCK_SH)  or die "can\*(Aqt lock filename: $!";
\&        print "got it.\en"
\&    } 
\&    # now read from FH
.Ve
.PP
To get an exclusive lock, typically used for writing, you have to be
careful.  We \f(CW\*(C`sysopen\*(C'\fR the file so it can be locked before it gets
emptied.  You can get a nonblocking version using \f(CW\*(C`LOCK_EX | LOCK_NB\*(C'\fR.
.PP
.Vb 9
\&    use 5.004;
\&    use Fcntl qw(:DEFAULT :flock);
\&    sysopen(FH, "filename", O_WRONLY | O_CREAT)
\&        or die "can\*(Aqt open filename: $!";
\&    flock(FH, LOCK_EX)
\&        or die "can\*(Aqt lock filename: $!";
\&    truncate(FH, 0)
\&        or die "can\*(Aqt truncate filename: $!";
\&    # now write to FH
.Ve
.PP
Finally, due to the uncounted millions who cannot be dissuaded from
wasting cycles on useless vanity devices called hit counters, here's
how to increment a number in a file safely:
.PP
.Vb 1
\&    use Fcntl qw(:DEFAULT :flock);
\&
\&    sysopen(FH, "numfile", O_RDWR | O_CREAT)
\&        or die "can\*(Aqt open numfile: $!";
\&    # autoflush FH
\&    $ofh = select(FH); $| = 1; select ($ofh);
\&    flock(FH, LOCK_EX)
\&        or die "can\*(Aqt write\-lock numfile: $!";
\&
\&    $num = <FH> || 0;
\&    seek(FH, 0, 0)
\&        or die "can\*(Aqt rewind numfile : $!";
\&    print FH $num+1, "\en"
\&        or die "can\*(Aqt write numfile: $!";
\&
\&    truncate(FH, tell(FH))
\&        or die "can\*(Aqt truncate numfile: $!";
\&    close(FH)
\&        or die "can\*(Aqt close numfile: $!";
.Ve
.SS "\s-1IO\s0 Layers"
.IX Subsection "IO Layers"
In Perl 5.8.0 a new I/O framework called \*(L"PerlIO\*(R" was introduced.
This is a new \*(L"plumbing\*(R" for all the I/O happening in Perl; for the
most part everything will work just as it did, but PerlIO also brought
in some new features such as the ability to think of I/O as \*(L"layers\*(R".
One I/O layer may in addition to just moving the data also do
transformations on the data.  Such transformations may include
compression and decompression, encryption and decryption, and transforming
between various character encodings.
.PP
Full discussion about the features of PerlIO is out of scope for this
tutorial, but here is how to recognize the layers being used:
.IP "\(bu" 4
The three\-(or more)\-argument form of \f(CW\*(C`open\*(C'\fR is being used and the
second argument contains something else in addition to the usual
\&\f(CW\*(Aq<\*(Aq\fR, \f(CW\*(Aq>\*(Aq\fR, \f(CW\*(Aq>>\*(Aq\fR, \f(CW\*(Aq|\*(Aq\fR and their variants,
for example:
.Sp
.Vb 1
\&    open(my $fh, "<:crlf", $fn);
.Ve
.IP "\(bu" 4
The two-argument form of \f(CW\*(C`binmode\*(C'\fR is being used, for example
.Sp
.Vb 1
\&    binmode($fh, ":encoding(utf16)");
.Ve
.PP
For more detailed discussion about PerlIO see PerlIO;
for more detailed discussion about Unicode and I/O see perluniintro.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \f(CW\*(C`open\*(C'\fR and \f(CW\*(C`sysopen\*(C'\fR functions in \fIperlfunc\fR\|(1);
the system \fIopen\fR\|(2), \fIdup\fR\|(2), \fIfopen\fR\|(3), and \fIfdopen\fR\|(3) manpages;
the \s-1POSIX\s0 documentation.
.SH "AUTHOR and COPYRIGHT"
.IX Header "AUTHOR and COPYRIGHT"
Copyright 1998 Tom Christiansen.
.PP
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
Irrespective of its distribution, all code examples in these files are
hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun or for profit
as you see fit.  A simple comment in the code giving credit would be
courteous but is not required.
.SH "HISTORY"
.IX Header "HISTORY"
First release: Sat Jan  9 08:09:11 \s-1MST\s0 1999
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlopentut5.18.1                            0100644 0001750 0001750 00000135332 12566207442 023644  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOPENTUT 1"
.TH PERLOPENTUT 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlopentut \- tutorial on opening things in Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl has two simple, built-in ways to open files: the shell way for
convenience, and the C way for precision.  The shell way also has 2\- and
3\-argument forms, which have different semantics for handling the filename.
The choice is yours.
.SH "Open a\*` la shell"
.IX Header "Open a` la shell"
Perl's \f(CW\*(C`open\*(C'\fR function was designed to mimic the way command-line
redirection in the shell works.  Here are some basic examples
from the shell:
.PP
.Vb 6
\&    $ myprogram file1 file2 file3
\&    $ myprogram    <  inputfile
\&    $ myprogram    >  outputfile
\&    $ myprogram    >> outputfile
\&    $ myprogram    |  otherprogram 
\&    $ otherprogram |  myprogram
.Ve
.PP
And here are some more advanced examples:
.PP
.Vb 4
\&    $ otherprogram      | myprogram f1 \- f2
\&    $ otherprogram 2>&1 | myprogram \-
\&    $ myprogram     <&3
\&    $ myprogram     >&4
.Ve
.PP
Programmers accustomed to constructs like those above can take comfort
in learning that Perl directly supports these familiar constructs using
virtually the same syntax as the shell.
.SS "Simple Opens"
.IX Subsection "Simple Opens"
The \f(CW\*(C`open\*(C'\fR function takes two arguments: the first is a filehandle,
and the second is a single string comprising both what to open and how
to open it.  \f(CW\*(C`open\*(C'\fR returns true when it works, and when it fails,
returns a false value and sets the special variable \f(CW$!\fR to reflect
the system error.  If the filehandle was previously opened, it will
be implicitly closed first.
.PP
For example:
.PP
.Vb 4
\&    open(INFO,      "datafile") || die("can\*(Aqt open datafile: $!");
\&    open(INFO,   "<  datafile") || die("can\*(Aqt open datafile: $!");
\&    open(RESULTS,">  runstats") || die("can\*(Aqt open runstats: $!");
\&    open(LOG,    ">> logfile ") || die("can\*(Aqt open logfile:  $!");
.Ve
.PP
If you prefer the low-punctuation version, you could write that this way:
.PP
.Vb 3
\&    open INFO,   "<  datafile"  or die "can\*(Aqt open datafile: $!";
\&    open RESULTS,">  runstats"  or die "can\*(Aqt open runstats: $!";
\&    open LOG,    ">> logfile "  or die "can\*(Aqt open logfile:  $!";
.Ve
.PP
A few things to notice.  First, the leading \f(CW\*(C`<\*(C'\fR is optional.
If omitted, Perl assumes that you want to open the file for reading.
.PP
Note also that the first example uses the \f(CW\*(C`||\*(C'\fR logical operator, and the
second uses \f(CW\*(C`or\*(C'\fR, which has lower precedence.  Using \f(CW\*(C`||\*(C'\fR in the latter
examples would effectively mean
.PP
.Vb 1
\&    open INFO, ( "<  datafile"  || die "can\*(Aqt open datafile: $!" );
.Ve
.PP
which is definitely not what you want.
.PP
The other important thing to notice is that, just as in the shell,
any whitespace before or after the filename is ignored.  This is good,
because you wouldn't want these to do different things:
.PP
.Vb 3
\&    open INFO,   "<datafile"   
\&    open INFO,   "< datafile" 
\&    open INFO,   "<  datafile"
.Ve
.PP
Ignoring surrounding whitespace also helps for when you read a filename
in from a different file, and forget to trim it before opening:
.PP
.Vb 2
\&    $filename = <INFO>;         # oops, \en still there
\&    open(EXTRA, "< $filename") || die "can\*(Aqt open $filename: $!";
.Ve
.PP
This is not a bug, but a feature.  Because \f(CW\*(C`open\*(C'\fR mimics the shell in
its style of using redirection arrows to specify how to open the file, it
also does so with respect to extra whitespace around the filename itself
as well.  For accessing files with naughty names, see 
\&\*(L"Dispelling the Dweomer\*(R".
.PP
There is also a 3\-argument version of \f(CW\*(C`open\*(C'\fR, which lets you put the
special redirection characters into their own argument:
.PP
.Vb 1
\&    open( INFO, ">", $datafile ) || die "Can\*(Aqt create $datafile: $!";
.Ve
.PP
In this case, the filename to open is the actual string in \f(CW$datafile\fR,
so you don't have to worry about \f(CW$datafile\fR containing characters
that might influence the open mode, or whitespace at the beginning of
the filename that would be absorbed in the 2\-argument version.  Also,
any reduction of unnecessary string interpolation is a good thing.
.SS "Indirect Filehandles"
.IX Subsection "Indirect Filehandles"
\&\f(CW\*(C`open\*(C'\fR's first argument can be a reference to a filehandle.  As of
perl 5.6.0, if the argument is uninitialized, Perl will automatically
create a filehandle and put a reference to it in the first argument,
like so:
.PP
.Vb 5
\&    open( my $in, $infile )   or die "Couldn\*(Aqt read $infile: $!";
\&    while ( <$in> ) {
\&        # do something with $_
\&    }
\&    close $in;
.Ve
.PP
Indirect filehandles make namespace management easier.  Since filehandles
are global to the current package, two subroutines trying to open
\&\f(CW\*(C`INFILE\*(C'\fR will clash.  With two functions opening indirect filehandles
like \f(CW\*(C`my $infile\*(C'\fR, there's no clash and no need to worry about future
conflicts.
.PP
Another convenient behavior is that an indirect filehandle automatically
closes when there are no more references to it:
.PP
.Vb 4
\&    sub firstline {
\&        open( my $in, shift ) && return scalar <$in>;
\&        # no close() required
\&    }
.Ve
.PP
Indirect filehandles also make it easy to pass filehandles to and return
filehandles from subroutines:
.PP
.Vb 5
\&    for my $file ( qw(this.conf that.conf) ) {
\&        my $fin = open_or_throw(\*(Aq<\*(Aq, $file);
\&        process_conf( $fin );
\&        # no close() needed
\&    }
\&
\&    use Carp;
\&    sub open_or_throw {
\&        my ($mode, $filename) = @_;
\&        open my $h, $mode, $filename
\&            or croak "Could not open \*(Aq$filename\*(Aq: $!";
\&        return $h;
\&    }
.Ve
.SS "Pipe Opens"
.IX Subsection "Pipe Opens"
In C, when you want to open a file using the standard I/O library,
you use the \f(CW\*(C`fopen\*(C'\fR function, but when opening a pipe, you use the
\&\f(CW\*(C`popen\*(C'\fR function.  But in the shell, you just use a different redirection
character.  That's also the case for Perl.  The \f(CW\*(C`open\*(C'\fR call 
remains the same\*(--just its argument differs.
.PP
If the leading character is a pipe symbol, \f(CW\*(C`open\*(C'\fR starts up a new
command and opens a write-only filehandle leading into that command.
This lets you write into that handle and have what you write show up on
that command's standard input.  For example:
.PP
.Vb 3
\&    open(PRINTER, "| lpr \-Plp1")    || die "can\*(Aqt run lpr: $!";
\&    print PRINTER "stuff\en";
\&    close(PRINTER)                  || die "can\*(Aqt close lpr: $!";
.Ve
.PP
If the trailing character is a pipe, you start up a new command and open a
read-only filehandle leading out of that command.  This lets whatever that
command writes to its standard output show up on your handle for reading.
For example:
.PP
.Vb 3
\&    open(NET, "netstat \-i \-n |")    || die "can\*(Aqt fork netstat: $!";
\&    while (<NET>) { }               # do something with input
\&    close(NET)                      || die "can\*(Aqt close netstat: $!";
.Ve
.PP
What happens if you try to open a pipe to or from a non-existent
command?  If possible, Perl will detect the failure and set \f(CW$!\fR as
usual.  But if the command contains special shell characters, such as
\&\f(CW\*(C`>\*(C'\fR or \f(CW\*(C`*\*(C'\fR, called 'metacharacters', Perl does not execute the
command directly.  Instead, Perl runs the shell, which then tries to
run the command.  This means that it's the shell that gets the error
indication.  In such a case, the \f(CW\*(C`open\*(C'\fR call will only indicate
failure if Perl can't even run the shell.  See \*(L"How can I
capture \s-1STDERR\s0 from an external command?\*(R" in perlfaq8 to see how to cope with
this.  There's also an explanation in perlipc.
.PP
If you would like to open a bidirectional pipe, the IPC::Open2
library will handle this for you.  Check out 
\&\*(L"Bidirectional Communication with Another Process\*(R" in perlipc
.PP
perl\-5.6.x introduced a version of piped open that executes a process
based on its command line arguments without relying on the shell. (Similar
to the \f(CW\*(C`system(@LIST)\*(C'\fR notation.) This is safer and faster than executing
a single argument pipe-command, but does not allow special shell
constructs. (It is also not supported on Microsoft Windows, Mac \s-1OS\s0 Classic
or \s-1RISC OS.\s0)
.PP
Here's an example of \f(CW\*(C`open \*(Aq\-|\*(Aq\*(C'\fR, which prints a random Unix
fortune cookie as uppercase:
.PP
.Vb 8
\&    my $collection = shift(@ARGV);
\&    open my $fortune, \*(Aq\-|\*(Aq, \*(Aqfortune\*(Aq, $collection
\&        or die "Could not find fortune \- $!";
\&    while (<$fortune>)
\&    {
\&        print uc($_);
\&    }
\&    close($fortune);
.Ve
.PP
And this \f(CW\*(C`open \*(Aq|\-\*(Aq\*(C'\fR pipes into lpr:
.PP
.Vb 5
\&    open my $printer, \*(Aq|\-\*(Aq, \*(Aqlpr\*(Aq, \*(Aq\-Plp1\*(Aq
\&        or die "can\*(Aqt run lpr: $!";
\&    print {$printer} "stuff\en";
\&    close($printer)
\&        or die "can\*(Aqt close lpr: $!";
.Ve
.SS "The Minus File"
.IX Subsection "The Minus File"
Again following the lead of the standard shell utilities, Perl's
\&\f(CW\*(C`open\*(C'\fR function treats a file whose name is a single minus, \*(L"\-\*(R", in a
special way.  If you open minus for reading, it really means to access
the standard input.  If you open minus for writing, it really means to
access the standard output.
.PP
If minus can be used as the default input or default output, what happens
if you open a pipe into or out of minus?  What's the default command it
would run?  The same script as you're currently running!  This is actually
a stealth \f(CW\*(C`fork\*(C'\fR hidden inside an \f(CW\*(C`open\*(C'\fR call.  See 
\&\*(L"Safe Pipe Opens\*(R" in perlipc for details.
.SS "Mixing Reads and Writes"
.IX Subsection "Mixing Reads and Writes"
It is possible to specify both read and write access.  All you do is
add a \*(L"+\*(R" symbol in front of the redirection.  But as in the shell,
using a less-than on a file never creates a new file; it only opens an
existing one.  On the other hand, using a greater-than always clobbers
(truncates to zero length) an existing file, or creates a brand-new one
if there isn't an old one.  Adding a \*(L"+\*(R" for read-write doesn't affect
whether it only works on existing files or always clobbers existing ones.
.PP
.Vb 2
\&    open(WTMP, "+< /usr/adm/wtmp") 
\&        || die "can\*(Aqt open /usr/adm/wtmp: $!";
\&
\&    open(SCREEN, "+> lkscreen")
\&        || die "can\*(Aqt open lkscreen: $!";
\&
\&    open(LOGFILE, "+>> /var/log/applog")
\&        || die "can\*(Aqt open /var/log/applog: $!";
.Ve
.PP
The first one won't create a new file, and the second one will always
clobber an old one.  The third one will create a new file if necessary
and not clobber an old one, and it will allow you to read at any point
in the file, but all writes will always go to the end.  In short,
the first case is substantially more common than the second and third
cases, which are almost always wrong.  (If you know C, the plus in
Perl's \f(CW\*(C`open\*(C'\fR is historically derived from the one in C's fopen(3S),
which it ultimately calls.)
.PP
In fact, when it comes to updating a file, unless you're working on
a binary file as in the \s-1WTMP\s0 case above, you probably don't want to
use this approach for updating.  Instead, Perl's \fB\-i\fR flag comes to
the rescue.  The following command takes all the C, \*(C+, or yacc source
or header files and changes all their foo's to bar's, leaving
the old version in the original filename with a \*(L".orig\*(R" tacked
on the end:
.PP
.Vb 1
\&    $ perl \-i.orig \-pe \*(Aqs/\ebfoo\eb/bar/g\*(Aq *.[Cchy]
.Ve
.PP
This is a short cut for some renaming games that are really
the best way to update textfiles.  See the second question in 
perlfaq5 for more details.
.SS "Filters"
.IX Subsection "Filters"
One of the most common uses for \f(CW\*(C`open\*(C'\fR is one you never
even notice.  When you process the \s-1ARGV\s0 filehandle using
\&\f(CW\*(C`<ARGV>\*(C'\fR, Perl actually does an implicit open 
on each file in \f(CW@ARGV\fR.  Thus a program called like this:
.PP
.Vb 1
\&    $ myprogram file1 file2 file3
.Ve
.PP
can have all its files opened and processed one at a time
using a construct no more complex than:
.PP
.Vb 3
\&    while (<>) {
\&        # do something with $_
\&    }
.Ve
.PP
If \f(CW@ARGV\fR is empty when the loop first begins, Perl pretends you've opened
up minus, that is, the standard input.  In fact, \f(CW$ARGV\fR, the currently
open file during \f(CW\*(C`<ARGV>\*(C'\fR processing, is even set to \*(L"\-\*(R"
in these circumstances.
.PP
You are welcome to pre-process your \f(CW@ARGV\fR before starting the loop to
make sure it's to your liking.  One reason to do this might be to remove
command options beginning with a minus.  While you can always roll the
simple ones by hand, the Getopts modules are good for this:
.PP
.Vb 1
\&    use Getopt::Std;
\&
\&    # \-v, \-D, \-o ARG, sets $opt_v, $opt_D, $opt_o
\&    getopts("vDo:");            
\&
\&    # \-v, \-D, \-o ARG, sets $args{v}, $args{D}, $args{o}
\&    getopts("vDo:", \e%args);
.Ve
.PP
Or the standard Getopt::Long module to permit named arguments:
.PP
.Vb 5
\&    use Getopt::Long;
\&    GetOptions( "verbose"  => \e$verbose,        # \-\-verbose
\&                "Debug"    => \e$debug,          # \-\-Debug
\&                "output=s" => \e$output );       
\&            # \-\-output=somestring or \-\-output somestring
.Ve
.PP
Another reason for preprocessing arguments is to make an empty
argument list default to all files:
.PP
.Vb 1
\&    @ARGV = glob("*") unless @ARGV;
.Ve
.PP
You could even filter out all but plain, text files.  This is a bit
silent, of course, and you might prefer to mention them on the way.
.PP
.Vb 1
\&    @ARGV = grep { \-f && \-T } @ARGV;
.Ve
.PP
If you're using the \fB\-n\fR or \fB\-p\fR command-line options, you
should put changes to \f(CW@ARGV\fR in a \f(CW\*(C`BEGIN{}\*(C'\fR block.
.PP
Remember that a normal \f(CW\*(C`open\*(C'\fR has special properties, in that it might
call fopen(3S) or it might called popen(3S), depending on what its
argument looks like; that's why it's sometimes called \*(L"magic open\*(R".
Here's an example:
.PP
.Vb 3
\&    $pwdinfo = \`domainname\` =~ /^(\e(none\e))?$/
\&                    ? \*(Aq< /etc/passwd\*(Aq
\&                    : \*(Aqypcat passwd |\*(Aq;
\&
\&    open(PWD, $pwdinfo)                 
\&                or die "can\*(Aqt open $pwdinfo: $!";
.Ve
.PP
This sort of thing also comes into play in filter processing.  Because
\&\f(CW\*(C`<ARGV>\*(C'\fR processing employs the normal, shell-style Perl \f(CW\*(C`open\*(C'\fR,
it respects all the special things we've already seen:
.PP
.Vb 1
\&    $ myprogram f1 "cmd1|" \- f2 "cmd2|" f3 < tmpfile
.Ve
.PP
That program will read from the file \fIf1\fR, the process \fIcmd1\fR, standard
input (\fItmpfile\fR in this case), the \fIf2\fR file, the \fIcmd2\fR command,
and finally the \fIf3\fR file.
.PP
Yes, this also means that if you have files named \*(L"\-\*(R" (and so on) in
your directory, they won't be processed as literal files by \f(CW\*(C`open\*(C'\fR.
You'll need to pass them as \*(L"./\-\*(R", much as you would for the \fIrm\fR program,
or you could use \f(CW\*(C`sysopen\*(C'\fR as described below.
.PP
One of the more interesting applications is to change files of a certain
name into pipes.  For example, to autoprocess gzipped or compressed
files by decompressing them with \fIgzip\fR:
.PP
.Vb 1
\&    @ARGV = map { /\e.(gz|Z)$/ ? "gzip \-dc $_ |" : $_  } @ARGV;
.Ve
.PP
Or, if you have the \fI\s-1GET\s0\fR program installed from \s-1LWP,\s0
you can fetch URLs before processing them:
.PP
.Vb 1
\&    @ARGV = map { m#^\ew+://# ? "GET $_ |" : $_ } @ARGV;
.Ve
.PP
It's not for nothing that this is called magic \f(CW\*(C`<ARGV>\*(C'\fR.
Pretty nifty, eh?
.SH "Open a\*` la C"
.IX Header "Open a` la C"
If you want the convenience of the shell, then Perl's \f(CW\*(C`open\*(C'\fR is
definitely the way to go.  On the other hand, if you want finer precision
than C's simplistic fopen(3S) provides you should look to Perl's
\&\f(CW\*(C`sysopen\*(C'\fR, which is a direct hook into the \fIopen\fR\|(2) system call.
That does mean it's a bit more involved, but that's the price of 
precision.
.PP
\&\f(CW\*(C`sysopen\*(C'\fR takes 3 (or 4) arguments.
.PP
.Vb 1
\&    sysopen HANDLE, PATH, FLAGS, [MASK]
.Ve
.PP
The \s-1HANDLE\s0 argument is a filehandle just as with \f(CW\*(C`open\*(C'\fR.  The \s-1PATH\s0 is
a literal path, one that doesn't pay attention to any greater-thans or
less-thans or pipes or minuses, nor ignore whitespace.  If it's there,
it's part of the path.  The \s-1FLAGS\s0 argument contains one or more values
derived from the Fcntl module that have been or'd together using the
bitwise \*(L"|\*(R" operator.  The final argument, the \s-1MASK,\s0 is optional; if
present, it is combined with the user's current umask for the creation
mode of the file.  You should usually omit this.
.PP
Although the traditional values of read-only, write-only, and read-write
are 0, 1, and 2 respectively, this is known not to hold true on some
systems.  Instead, it's best to load in the appropriate constants first
from the Fcntl module, which supplies the following standard flags:
.PP
.Vb 8
\&    O_RDONLY            Read only
\&    O_WRONLY            Write only
\&    O_RDWR              Read and write
\&    O_CREAT             Create the file if it doesn\*(Aqt exist
\&    O_EXCL              Fail if the file already exists
\&    O_APPEND            Append to the file
\&    O_TRUNC             Truncate the file
\&    O_NONBLOCK          Non\-blocking access
.Ve
.PP
Less common flags that are sometimes available on some operating
systems include \f(CW\*(C`O_BINARY\*(C'\fR, \f(CW\*(C`O_TEXT\*(C'\fR, \f(CW\*(C`O_SHLOCK\*(C'\fR, \f(CW\*(C`O_EXLOCK\*(C'\fR,
\&\f(CW\*(C`O_DEFER\*(C'\fR, \f(CW\*(C`O_SYNC\*(C'\fR, \f(CW\*(C`O_ASYNC\*(C'\fR, \f(CW\*(C`O_DSYNC\*(C'\fR, \f(CW\*(C`O_RSYNC\*(C'\fR,
\&\f(CW\*(C`O_NOCTTY\*(C'\fR, \f(CW\*(C`O_NDELAY\*(C'\fR and \f(CW\*(C`O_LARGEFILE\*(C'\fR.  Consult your \fIopen\fR\|(2)
manpage or its local equivalent for details.  (Note: starting from
Perl release 5.6 the \f(CW\*(C`O_LARGEFILE\*(C'\fR flag, if available, is automatically
added to the \fIsysopen()\fR flags because large files are the default.)
.PP
Here's how to use \f(CW\*(C`sysopen\*(C'\fR to emulate the simple \f(CW\*(C`open\*(C'\fR calls we had
before.  We'll omit the \f(CW\*(C`|| die $!\*(C'\fR checks for clarity, but make sure
you always check the return values in real code.  These aren't quite
the same, since \f(CW\*(C`open\*(C'\fR will trim leading and trailing whitespace,
but you'll get the idea.
.PP
To open a file for reading:
.PP
.Vb 2
\&    open(FH, "< $path");
\&    sysopen(FH, $path, O_RDONLY);
.Ve
.PP
To open a file for writing, creating a new file if needed or else truncating
an old file:
.PP
.Vb 2
\&    open(FH, "> $path");
\&    sysopen(FH, $path, O_WRONLY | O_TRUNC | O_CREAT);
.Ve
.PP
To open a file for appending, creating one if necessary:
.PP
.Vb 2
\&    open(FH, ">> $path");
\&    sysopen(FH, $path, O_WRONLY | O_APPEND | O_CREAT);
.Ve
.PP
To open a file for update, where the file must already exist:
.PP
.Vb 2
\&    open(FH, "+< $path");
\&    sysopen(FH, $path, O_RDWR);
.Ve
.PP
And here are things you can do with \f(CW\*(C`sysopen\*(C'\fR that you cannot do with
a regular \f(CW\*(C`open\*(C'\fR.  As you'll see, it's just a matter of controlling the
flags in the third argument.
.PP
To open a file for writing, creating a new file which must not previously
exist:
.PP
.Vb 1
\&    sysopen(FH, $path, O_WRONLY | O_EXCL | O_CREAT);
.Ve
.PP
To open a file for appending, where that file must already exist:
.PP
.Vb 1
\&    sysopen(FH, $path, O_WRONLY | O_APPEND);
.Ve
.PP
To open a file for update, creating a new file if necessary:
.PP
.Vb 1
\&    sysopen(FH, $path, O_RDWR | O_CREAT);
.Ve
.PP
To open a file for update, where that file must not already exist:
.PP
.Vb 1
\&    sysopen(FH, $path, O_RDWR | O_EXCL | O_CREAT);
.Ve
.PP
To open a file without blocking, creating one if necessary:
.PP
.Vb 1
\&    sysopen(FH, $path, O_WRONLY | O_NONBLOCK | O_CREAT);
.Ve
.SS "Permissions a\*` la mode"
.IX Subsection "Permissions a` la mode"
If you omit the \s-1MASK\s0 argument to \f(CW\*(C`sysopen\*(C'\fR, Perl uses the octal value
0666.  The normal \s-1MASK\s0 to use for executables and directories should
be 0777, and for anything else, 0666.
.PP
Why so permissive?  Well, it isn't really.  The \s-1MASK\s0 will be modified
by your process's current \f(CW\*(C`umask\*(C'\fR.  A umask is a number representing
\&\fIdisabled\fR permissions bits; that is, bits that will not be turned on
in the created file's permissions field.
.PP
For example, if your \f(CW\*(C`umask\*(C'\fR were 027, then the 020 part would
disable the group from writing, and the 007 part would disable others
from reading, writing, or executing.  Under these conditions, passing
\&\f(CW\*(C`sysopen\*(C'\fR 0666 would create a file with mode 0640, since \f(CW\*(C`0666 & ~027\*(C'\fR
is 0640.
.PP
You should seldom use the \s-1MASK\s0 argument to \f(CW\*(C`sysopen()\*(C'\fR.  That takes
away the user's freedom to choose what permission new files will have.
Denying choice is almost always a bad thing.  One exception would be for
cases where sensitive or private data is being stored, such as with mail
folders, cookie files, and internal temporary files.
.SH "Obscure Open Tricks"
.IX Header "Obscure Open Tricks"
.SS "Re-Opening Files (dups)"
.IX Subsection "Re-Opening Files (dups)"
Sometimes you already have a filehandle open, and want to make another
handle that's a duplicate of the first one.  In the shell, we place an
ampersand in front of a file descriptor number when doing redirections.
For example, \f(CW\*(C`2>&1\*(C'\fR makes descriptor 2 (that's \s-1STDERR\s0 in Perl)
be redirected into descriptor 1 (which is usually Perl's \s-1STDOUT\s0).
The same is essentially true in Perl: a filename that begins with an
ampersand is treated instead as a file descriptor if a number, or as a
filehandle if a string.
.PP
.Vb 2
\&    open(SAVEOUT, ">&SAVEERR") || die "couldn\*(Aqt dup SAVEERR: $!";
\&    open(MHCONTEXT, "<&4")     || die "couldn\*(Aqt dup fd4: $!";
.Ve
.PP
That means that if a function is expecting a filename, but you don't
want to give it a filename because you already have the file open, you
can just pass the filehandle with a leading ampersand.  It's best to
use a fully qualified handle though, just in case the function happens
to be in a different package:
.PP
.Vb 1
\&    somefunction("&main::LOGFILE");
.Ve
.PP
This way if \fIsomefunction()\fR is planning on opening its argument, it can
just use the already opened handle.  This differs from passing a handle,
because with a handle, you don't open the file.  Here you have something
you can pass to open.
.PP
If you have one of those tricky, newfangled I/O objects that the \*(C+
folks are raving about, then this doesn't work because those aren't a
proper filehandle in the native Perl sense.  You'll have to use \fIfileno()\fR
to pull out the proper descriptor number, assuming you can:
.PP
.Vb 4
\&    use IO::Socket;
\&    $handle = IO::Socket::INET\->new("www.perl.com:80");
\&    $fd = $handle\->fileno;
\&    somefunction("&$fd");  # not an indirect function call
.Ve
.PP
It can be easier (and certainly will be faster) just to use real
filehandles though:
.PP
.Vb 4
\&    use IO::Socket;
\&    local *REMOTE = IO::Socket::INET\->new("www.perl.com:80");
\&    die "can\*(Aqt connect" unless defined(fileno(REMOTE));
\&    somefunction("&main::REMOTE");
.Ve
.PP
If the filehandle or descriptor number is preceded not just with a simple
\&\*(L"&\*(R" but rather with a \*(L"&=\*(R" combination, then Perl will not create a
completely new descriptor opened to the same place using the \fIdup\fR\|(2)
system call.  Instead, it will just make something of an alias to the
existing one using the fdopen(3S) library call.  This is slightly more
parsimonious of systems resources, although this is less a concern
these days.  Here's an example of that:
.PP
.Vb 2
\&    $fd = $ENV{"MHCONTEXTFD"};
\&    open(MHCONTEXT, "<&=$fd")   or die "couldn\*(Aqt fdopen $fd: $!";
.Ve
.PP
If you're using magic \f(CW\*(C`<ARGV>\*(C'\fR, you could even pass in as a
command line argument in \f(CW@ARGV\fR something like \f(CW"<&=$MHCONTEXTFD"\fR,
but we've never seen anyone actually do this.
.SS "Dispelling the Dweomer"
.IX Subsection "Dispelling the Dweomer"
Perl is more of a DWIMmer language than something like Java\*(--where \s-1DWIM\s0
is an acronym for \*(L"do what I mean\*(R".  But this principle sometimes leads
to more hidden magic than one knows what to do with.  In this way, Perl
is also filled with \fIdweomer\fR, an obscure word meaning an enchantment.
Sometimes, Perl's DWIMmer is just too much like dweomer for comfort.
.PP
If magic \f(CW\*(C`open\*(C'\fR is a bit too magical for you, you don't have to turn
to \f(CW\*(C`sysopen\*(C'\fR.  To open a file with arbitrary weird characters in
it, it's necessary to protect any leading and trailing whitespace.
Leading whitespace is protected by inserting a \f(CW"./"\fR in front of a
filename that starts with whitespace.  Trailing whitespace is protected
by appending an \s-1ASCII NUL\s0 byte (\f(CW"\e0"\fR) at the end of the string.
.PP
.Vb 2
\&    $file =~ s#^(\es)#./$1#;
\&    open(FH, "< $file\e0")   || die "can\*(Aqt open $file: $!";
.Ve
.PP
This assumes, of course, that your system considers dot the current
working directory, slash the directory separator, and disallows \s-1ASCII\s0
NULs within a valid filename.  Most systems follow these conventions,
including all \s-1POSIX\s0 systems as well as proprietary Microsoft systems.
The only vaguely popular system that doesn't work this way is the
\&\*(L"Classic\*(R" Macintosh system, which uses a colon where the rest of us
use a slash.  Maybe \f(CW\*(C`sysopen\*(C'\fR isn't such a bad idea after all.
.PP
If you want to use \f(CW\*(C`<ARGV>\*(C'\fR processing in a totally boring
and non-magical way, you could do this first:
.PP
.Vb 10
\&    #   "Sam sat on the ground and put his head in his hands.  
\&    #   \*(AqI wish I had never come here, and I don\*(Aqt want to see 
\&    #   no more magic,\*(Aq he said, and fell silent."
\&    for (@ARGV) { 
\&        s#^([^./])#./$1#;
\&        $_ .= "\e0";
\&    } 
\&    while (<>) {  
\&        # now process $_
\&    }
.Ve
.PP
But be warned that users will not appreciate being unable to use \*(L"\-\*(R"
to mean standard input, per the standard convention.
.SS "Paths as Opens"
.IX Subsection "Paths as Opens"
You've probably noticed how Perl's \f(CW\*(C`warn\*(C'\fR and \f(CW\*(C`die\*(C'\fR functions can
produce messages like:
.PP
.Vb 1
\&    Some warning at scriptname line 29, <FH> line 7.
.Ve
.PP
That's because you opened a filehandle \s-1FH,\s0 and had read in seven records
from it.  But what was the name of the file, rather than the handle?
.PP
If you aren't running with \f(CW\*(C`strict refs\*(C'\fR, or if you've turned them off
temporarily, then all you have to do is this:
.PP
.Vb 4
\&    open($path, "< $path") || die "can\*(Aqt open $path: $!";
\&    while (<$path>) {
\&        # whatever
\&    }
.Ve
.PP
Since you're using the pathname of the file as its handle,
you'll get warnings more like
.PP
.Vb 1
\&    Some warning at scriptname line 29, </etc/motd> line 7.
.Ve
.SS "Single Argument Open"
.IX Subsection "Single Argument Open"
Remember how we said that Perl's open took two arguments?  That was a
passive prevarication.  You see, it can also take just one argument.
If and only if the variable is a global variable, not a lexical, you
can pass \f(CW\*(C`open\*(C'\fR just one argument, the filehandle, and it will 
get the path from the global scalar variable of the same name.
.PP
.Vb 5
\&    $FILE = "/etc/motd";
\&    open FILE or die "can\*(Aqt open $FILE: $!";
\&    while (<FILE>) {
\&        # whatever
\&    }
.Ve
.PP
Why is this here?  Someone has to cater to the hysterical porpoises.
It's something that's been in Perl since the very beginning, if not
before.
.SS "Playing with \s-1STDIN\s0 and \s-1STDOUT\s0"
.IX Subsection "Playing with STDIN and STDOUT"
One clever move with \s-1STDOUT\s0 is to explicitly close it when you're done
with the program.
.PP
.Vb 1
\&    END { close(STDOUT) || die "can\*(Aqt close stdout: $!" }
.Ve
.PP
If you don't do this, and your program fills up the disk partition due
to a command line redirection, it won't report the error exit with a
failure status.
.PP
You don't have to accept the \s-1STDIN\s0 and \s-1STDOUT\s0 you were given.  You are
welcome to reopen them if you'd like.
.PP
.Vb 2
\&    open(STDIN, "< datafile")
\&        || die "can\*(Aqt open datafile: $!";
\&
\&    open(STDOUT, "> output")
\&        || die "can\*(Aqt open output: $!";
.Ve
.PP
And then these can be accessed directly or passed on to subprocesses.
This makes it look as though the program were initially invoked
with those redirections from the command line.
.PP
It's probably more interesting to connect these to pipes.  For example:
.PP
.Vb 3
\&    $pager = $ENV{PAGER} || "(less || more)";
\&    open(STDOUT, "| $pager")
\&        || die "can\*(Aqt fork a pager: $!";
.Ve
.PP
This makes it appear as though your program were called with its stdout
already piped into your pager.  You can also use this kind of thing
in conjunction with an implicit fork to yourself.  You might do this
if you would rather handle the post processing in your own program,
just in a different process:
.PP
.Vb 4
\&    head(100);
\&    while (<>) {
\&        print;
\&    } 
\&
\&    sub head {
\&        my $lines = shift || 20;
\&        return if $pid = open(STDOUT, "|\-");       # return if parent
\&        die "cannot fork: $!" unless defined $pid;
\&        while (<STDIN>) {
\&            last if \-\-$lines < 0;
\&            print;
\&        } 
\&        exit;
\&    }
.Ve
.PP
This technique can be applied to repeatedly push as many filters on your
output stream as you wish.
.SH "Other I/O Issues"
.IX Header "Other I/O Issues"
These topics aren't really arguments related to \f(CW\*(C`open\*(C'\fR or \f(CW\*(C`sysopen\*(C'\fR,
but they do affect what you do with your open files.
.SS "Opening Non-File Files"
.IX Subsection "Opening Non-File Files"
When is a file not a file?  Well, you could say when it exists but
isn't a plain file.   We'll check whether it's a symbolic link first,
just in case.
.PP
.Vb 3
\&    if (\-l $file || ! \-f _) {
\&        print "$file is not a plain file\en";
\&    }
.Ve
.PP
What other kinds of files are there than, well, files?  Directories,
symbolic links, named pipes, Unix-domain sockets, and block and character
devices.  Those are all files, too\*(--just not \fIplain\fR files.  This isn't
the same issue as being a text file. Not all text files are plain files.
Not all plain files are text files.  That's why there are separate \f(CW\*(C`\-f\*(C'\fR
and \f(CW\*(C`\-T\*(C'\fR file tests.
.PP
To open a directory, you should use the \f(CW\*(C`opendir\*(C'\fR function, then
process it with \f(CW\*(C`readdir\*(C'\fR, carefully restoring the directory 
name if necessary:
.PP
.Vb 5
\&    opendir(DIR, $dirname) or die "can\*(Aqt opendir $dirname: $!";
\&    while (defined($file = readdir(DIR))) {
\&        # do something with "$dirname/$file"
\&    }
\&    closedir(DIR);
.Ve
.PP
If you want to process directories recursively, it's better to use the
File::Find module.  For example, this prints out all files recursively
and adds a slash to their names if the file is a directory.
.PP
.Vb 3
\&    @ARGV = qw(.) unless @ARGV;
\&    use File::Find;
\&    find sub { print $File::Find::name, \-d && \*(Aq/\*(Aq, "\en" }, @ARGV;
.Ve
.PP
This finds all bogus symbolic links beneath a particular directory:
.PP
.Vb 1
\&    find sub { print "$File::Find::name\en" if \-l && !\-e }, $dir;
.Ve
.PP
As you see, with symbolic links, you can just pretend that it is
what it points to.  Or, if you want to know \fIwhat\fR it points to, then
\&\f(CW\*(C`readlink\*(C'\fR is called for:
.PP
.Vb 7
\&    if (\-l $file) {
\&        if (defined($whither = readlink($file))) {
\&            print "$file points to $whither\en";
\&        } else {
\&            print "$file points nowhere: $!\en";
\&        } 
\&    }
.Ve
.SS "Opening Named Pipes"
.IX Subsection "Opening Named Pipes"
Named pipes are a different matter.  You pretend they're regular files,
but their opens will normally block until there is both a reader and
a writer.  You can read more about them in \*(L"Named Pipes\*(R" in perlipc.
Unix-domain sockets are rather different beasts as well; they're
described in \*(L"Unix-Domain \s-1TCP\s0 Clients and Servers\*(R" in perlipc.
.PP
When it comes to opening devices, it can be easy and it can be tricky.
We'll assume that if you're opening up a block device, you know what
you're doing.  The character devices are more interesting.  These are
typically used for modems, mice, and some kinds of printers.  This is
described in \*(L"How do I read and write the serial port?\*(R" in perlfaq8
It's often enough to open them carefully:
.PP
.Vb 5
\&    sysopen(TTYIN, "/dev/ttyS1", O_RDWR | O_NDELAY | O_NOCTTY)
\&                # (O_NOCTTY no longer needed on POSIX systems)
\&        or die "can\*(Aqt open /dev/ttyS1: $!";
\&    open(TTYOUT, "+>&TTYIN")
\&        or die "can\*(Aqt dup TTYIN: $!";
\&
\&    $ofh = select(TTYOUT); $| = 1; select($ofh);
\&
\&    print TTYOUT "+++at\e015";
\&    $answer = <TTYIN>;
.Ve
.PP
With descriptors that you haven't opened using \f(CW\*(C`sysopen\*(C'\fR, such as
sockets, you can set them to be non-blocking using \f(CW\*(C`fcntl\*(C'\fR:
.PP
.Vb 5
\&    use Fcntl;
\&    my $old_flags = fcntl($handle, F_GETFL, 0) 
\&        or die "can\*(Aqt get flags: $!";
\&    fcntl($handle, F_SETFL, $old_flags | O_NONBLOCK) 
\&        or die "can\*(Aqt set non blocking: $!";
.Ve
.PP
Rather than losing yourself in a morass of twisting, turning \f(CW\*(C`ioctl\*(C'\fRs,
all dissimilar, if you're going to manipulate ttys, it's best to
make calls out to the \fIstty\fR\|(1) program if you have it, or else use the
portable \s-1POSIX\s0 interface.  To figure this all out, you'll need to read the
\&\fItermios\fR\|(3) manpage, which describes the \s-1POSIX\s0 interface to tty devices,
and then \s-1POSIX\s0, which describes Perl's interface to \s-1POSIX. \s0 There are
also some high-level modules on \s-1CPAN\s0 that can help you with these games.
Check out Term::ReadKey and Term::ReadLine.
.SS "Opening Sockets"
.IX Subsection "Opening Sockets"
What else can you open?  To open a connection using sockets, you won't use
one of Perl's two open functions.  See 
\&\*(L"Sockets: Client/Server Communication\*(R" in perlipc for that.  Here's an 
example.  Once you have it, you can use \s-1FH\s0 as a bidirectional filehandle.
.PP
.Vb 2
\&    use IO::Socket;
\&    local *FH = IO::Socket::INET\->new("www.perl.com:80");
.Ve
.PP
For opening up a \s-1URL,\s0 the \s-1LWP\s0 modules from \s-1CPAN\s0 are just what
the doctor ordered.  There's no filehandle interface, but
it's still easy to get the contents of a document:
.PP
.Vb 2
\&    use LWP::Simple;
\&    $doc = get(\*(Aqhttp://www.cpan.org/\*(Aq);
.Ve
.SS "Binary Files"
.IX Subsection "Binary Files"
On certain legacy systems with what could charitably be called terminally
convoluted (some would say broken) I/O models, a file isn't a file\*(--at
least, not with respect to the C standard I/O library.  On these old
systems whose libraries (but not kernels) distinguish between text and
binary streams, to get files to behave properly you'll have to bend over
backwards to avoid nasty problems.  On such infelicitous systems, sockets
and pipes are already opened in binary mode, and there is currently no
way to turn that off.  With files, you have more options.
.PP
Another option is to use the \f(CW\*(C`binmode\*(C'\fR function on the appropriate
handles before doing regular I/O on them:
.PP
.Vb 3
\&    binmode(STDIN);
\&    binmode(STDOUT);
\&    while (<STDIN>) { print }
.Ve
.PP
Passing \f(CW\*(C`sysopen\*(C'\fR a non-standard flag option will also open the file in
binary mode on those systems that support it.  This is the equivalent of
opening the file normally, then calling \f(CW\*(C`binmode\*(C'\fR on the handle.
.PP
.Vb 2
\&    sysopen(BINDAT, "records.data", O_RDWR | O_BINARY)
\&        || die "can\*(Aqt open records.data: $!";
.Ve
.PP
Now you can use \f(CW\*(C`read\*(C'\fR and \f(CW\*(C`print\*(C'\fR on that handle without worrying
about the non-standard system I/O library breaking your data.  It's not
a pretty picture, but then, legacy systems seldom are.  \s-1CP/M\s0 will be
with us until the end of days, and after.
.PP
On systems with exotic I/O systems, it turns out that, astonishingly
enough, even unbuffered I/O using \f(CW\*(C`sysread\*(C'\fR and \f(CW\*(C`syswrite\*(C'\fR might do
sneaky data mutilation behind your back.
.PP
.Vb 3
\&    while (sysread(WHENCE, $buf, 1024)) {
\&        syswrite(WHITHER, $buf, length($buf));
\&    }
.Ve
.PP
Depending on the vicissitudes of your runtime system, even these calls
may need \f(CW\*(C`binmode\*(C'\fR or \f(CW\*(C`O_BINARY\*(C'\fR first.  Systems known to be free of
such difficulties include Unix, the Mac \s-1OS,\s0 Plan 9, and Inferno.
.SS "File Locking"
.IX Subsection "File Locking"
In a multitasking environment, you may need to be careful not to collide
with other processes who want to do I/O on the same files as you
are working on.  You'll often need shared or exclusive locks
on files for reading and writing respectively.  You might just
pretend that only exclusive locks exist.
.PP
Never use the existence of a file \f(CW\*(C`\-e $file\*(C'\fR as a locking indication,
because there is a race condition between the test for the existence of
the file and its creation.  It's possible for another process to create
a file in the slice of time between your existence check and your attempt
to create the file.  Atomicity is critical.
.PP
Perl's most portable locking interface is via the \f(CW\*(C`flock\*(C'\fR function,
whose simplicity is emulated on systems that don't directly support it
such as SysV or Windows.  The underlying semantics may affect how
it all works, so you should learn how \f(CW\*(C`flock\*(C'\fR is implemented on your
system's port of Perl.
.PP
File locking \fIdoes not\fR lock out another process that would like to
do I/O.  A file lock only locks out others trying to get a lock, not
processes trying to do I/O.  Because locks are advisory, if one process
uses locking and another doesn't, all bets are off.
.PP
By default, the \f(CW\*(C`flock\*(C'\fR call will block until a lock is granted.
A request for a shared lock will be granted as soon as there is no
exclusive locker.  A request for an exclusive lock will be granted as
soon as there is no locker of any kind.  Locks are on file descriptors,
not file names.  You can't lock a file until you open it, and you can't
hold on to a lock once the file has been closed.
.PP
Here's how to get a blocking shared lock on a file, typically used
for reading:
.PP
.Vb 5
\&    use 5.004;
\&    use Fcntl qw(:DEFAULT :flock);
\&    open(FH, "< filename")  or die "can\*(Aqt open filename: $!";
\&    flock(FH, LOCK_SH)      or die "can\*(Aqt lock filename: $!";
\&    # now read from FH
.Ve
.PP
You can get a non-blocking lock by using \f(CW\*(C`LOCK_NB\*(C'\fR.
.PP
.Vb 2
\&    flock(FH, LOCK_SH | LOCK_NB)
\&        or die "can\*(Aqt lock filename: $!";
.Ve
.PP
This can be useful for producing more user-friendly behaviour by warning
if you're going to be blocking:
.PP
.Vb 10
\&    use 5.004;
\&    use Fcntl qw(:DEFAULT :flock);
\&    open(FH, "< filename")  or die "can\*(Aqt open filename: $!";
\&    unless (flock(FH, LOCK_SH | LOCK_NB)) {
\&        $| = 1;
\&        print "Waiting for lock...";
\&        flock(FH, LOCK_SH)  or die "can\*(Aqt lock filename: $!";
\&        print "got it.\en"
\&    } 
\&    # now read from FH
.Ve
.PP
To get an exclusive lock, typically used for writing, you have to be
careful.  We \f(CW\*(C`sysopen\*(C'\fR the file so it can be locked before it gets
emptied.  You can get a nonblocking version using \f(CW\*(C`LOCK_EX | LOCK_NB\*(C'\fR.
.PP
.Vb 9
\&    use 5.004;
\&    use Fcntl qw(:DEFAULT :flock);
\&    sysopen(FH, "filename", O_WRONLY | O_CREAT)
\&        or die "can\*(Aqt open filename: $!";
\&    flock(FH, LOCK_EX)
\&        or die "can\*(Aqt lock filename: $!";
\&    truncate(FH, 0)
\&        or die "can\*(Aqt truncate filename: $!";
\&    # now write to FH
.Ve
.PP
Finally, due to the uncounted millions who cannot be dissuaded from
wasting cycles on useless vanity devices called hit counters, here's
how to increment a number in a file safely:
.PP
.Vb 1
\&    use Fcntl qw(:DEFAULT :flock);
\&
\&    sysopen(FH, "numfile", O_RDWR | O_CREAT)
\&        or die "can\*(Aqt open numfile: $!";
\&    # autoflush FH
\&    $ofh = select(FH); $| = 1; select ($ofh);
\&    flock(FH, LOCK_EX)
\&        or die "can\*(Aqt write\-lock numfile: $!";
\&
\&    $num = <FH> || 0;
\&    seek(FH, 0, 0)
\&        or die "can\*(Aqt rewind numfile : $!";
\&    print FH $num+1, "\en"
\&        or die "can\*(Aqt write numfile: $!";
\&
\&    truncate(FH, tell(FH))
\&        or die "can\*(Aqt truncate numfile: $!";
\&    close(FH)
\&        or die "can\*(Aqt close numfile: $!";
.Ve
.SS "\s-1IO\s0 Layers"
.IX Subsection "IO Layers"
In Perl 5.8.0 a new I/O framework called \*(L"PerlIO\*(R" was introduced.
This is a new \*(L"plumbing\*(R" for all the I/O happening in Perl; for the
most part everything will work just as it did, but PerlIO also brought
in some new features such as the ability to think of I/O as \*(L"layers\*(R".
One I/O layer may in addition to just moving the data also do
transformations on the data.  Such transformations may include
compression and decompression, encryption and decryption, and transforming
between various character encodings.
.PP
Full discussion about the features of PerlIO is out of scope for this
tutorial, but here is how to recognize the layers being used:
.IP "\(bu" 4
The three\-(or more)\-argument form of \f(CW\*(C`open\*(C'\fR is being used and the
second argument contains something else in addition to the usual
\&\f(CW\*(Aq<\*(Aq\fR, \f(CW\*(Aq>\*(Aq\fR, \f(CW\*(Aq>>\*(Aq\fR, \f(CW\*(Aq|\*(Aq\fR and their variants,
for example:
.Sp
.Vb 1
\&    open(my $fh, "<:crlf", $fn);
.Ve
.IP "\(bu" 4
The two-argument form of \f(CW\*(C`binmode\*(C'\fR is being used, for example
.Sp
.Vb 1
\&    binmode($fh, ":encoding(utf16)");
.Ve
.PP
For more detailed discussion about PerlIO see PerlIO;
for more detailed discussion about Unicode and I/O see perluniintro.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
The \f(CW\*(C`open\*(C'\fR and \f(CW\*(C`sysopen\*(C'\fR functions in \fIperlfunc\fR\|(1);
the system \fIopen\fR\|(2), \fIdup\fR\|(2), \fIfopen\fR\|(3), and \fIfdopen\fR\|(3) manpages;
the \s-1POSIX\s0 documentation.
.SH "AUTHOR and COPYRIGHT"
.IX Header "AUTHOR and COPYRIGHT"
Copyright 1998 Tom Christiansen.
.PP
This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.
.PP
Irrespective of its distribution, all code examples in these files are
hereby placed into the public domain.  You are permitted and
encouraged to use this code in your own programs for fun or for profit
as you see fit.  A simple comment in the code giving credit would be
courteous but is not required.
.SH "HISTORY"
.IX Header "HISTORY"
First release: Sat Jan  9 08:09:11 \s-1MST 1999\s0
                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlos2.1                                    0100644 0001750 0001750 00000340760 12566207443 022341  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOS2 1"
.TH PERLOS2 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlos2 \- Perl under OS/2, DOS, Win0.3*, Win0.95 and WinNT.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
One can read this document in the following formats:
.PP
.Vb 4
\&        man perlos2
\&        view perl perlos2
\&        explorer perlos2.html
\&        info perlos2
.Ve
.PP
to list some (not all may be available simultaneously), or it may
be read \fIas is\fR: either as \fI\s-1README\s0.os2\fR, or \fIpod/perlos2.pod\fR.
.PP
To read the \fI.INF\fR version of documentation (\fBvery\fR recommended)
outside of \s-1OS/2,\s0 one needs an \s-1IBM\s0's reader (may be available on \s-1IBM\s0
ftp sites (?)  (\s-1URL\s0 anyone?)) or shipped with \s-1PC DOS 7.0\s0 and \s-1IBM\s0's
Visual Age \*(C+ 3.5.
.PP
A copy of a Win* viewer is contained in the \*(L"Just add \s-1OS/2\s0 Warp\*(R" package
.PP
.Vb 1
\&  ftp://ftp.software.ibm.com/ps/products/os2/tools/jaow/jaow.zip
.Ve
.PP
in \fI?:\eJUST_ADD\eview.exe\fR. This gives one an access to \s-1EMX\s0's 
\&\fI.INF\fR docs as well (text form is available in \fI/emx/doc\fR in 
\&\s-1EMX\s0's distribution).  There is also a different viewer named xview.
.PP
Note that if you have \fIlynx.exe\fR or \fInetscape.exe\fR installed, you can follow \s-1WWW\s0 links
from this document in \fI.INF\fR format. If you have \s-1EMX\s0 docs installed 
correctly, you can follow library links (you need to have \f(CW\*(C`view emxbook\*(C'\fR
working by setting \f(CW\*(C`EMXBOOK\*(C'\fR environment variable as it is described
in \s-1EMX\s0 docs).
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Target"
.IX Subsection "Target"
The target is to make \s-1OS/2\s0 one of the best supported platform for
using/building/developing Perl and \fIPerl applications\fR, as well as
make Perl the best language to use under \s-1OS/2.\s0 The secondary target is
to try to make this work under \s-1DOS\s0 and Win* as well (but not \fBtoo\fR hard).
.PP
The current state is quite close to this target. Known limitations:
.IP "\(bu" 5
Some *nix programs use \fIfork()\fR a lot; with the mostly useful flavors of
perl for \s-1OS/2 \s0(there are several built simultaneously) this is
supported; but some flavors do not support this (e.g., when Perl is
called from inside \s-1REXX\s0).  Using \fIfork()\fR after
\&\fIuse\fRing dynamically loading extensions would not work with \fIvery\fR old
versions of \s-1EMX.\s0
.IP "\(bu" 5
You need a separate perl executable \fIperl_\|_.exe\fR (see \*(L"perl_\|_.exe\*(R")
if you want to use \s-1PM\s0 code in your application (as Perl/Tk or OpenGL
Perl modules do) without having a text-mode window present.
.Sp
While using the standard \fIperl.exe\fR from a text-mode window is possible
too, I have seen cases when this causes degradation of the system stability.
Using \fIperl_\|_.exe\fR avoids such a degradation.
.IP "\(bu" 5
There is no simple way to access \s-1WPS\s0 objects. The only way I know
is via \f(CW\*(C`OS2::REXX\*(C'\fR and \f(CW\*(C`SOM\*(C'\fR extensions (see \s-1OS2::REXX\s0, \s-1SOM\s0).
However, we do not have access to
convenience methods of Object-REXX. (Is it possible at all? I know
of no Object-REXX \s-1API.\s0)  The \f(CW\*(C`SOM\*(C'\fR extension (currently in alpha-text)
may eventually remove this shortcoming; however, due to the fact that
\&\s-1DII\s0 is not supported by the \f(CW\*(C`SOM\*(C'\fR module, using \f(CW\*(C`SOM\*(C'\fR is not as
convenient as one would like it.
.PP
Please keep this list up-to-date by informing me about other items.
.SS "Other OSes"
.IX Subsection "Other OSes"
Since \s-1OS/2\s0 port of perl uses a remarkable \s-1EMX\s0 environment, it can
run (and build extensions, and \- possibly \- be built itself) under any
environment which can run \s-1EMX.\s0 The current list is \s-1DOS,\s0
DOS\-inside\-OS/2, Win0.3*, Win0.95 and WinNT. Out of many perl flavors,
only one works, see \*(L"perl_.exe\*(R".
.PP
Note that not all features of Perl are available under these
environments. This depends on the features the \fIextender\fR \- most
probably \s-1RSX \-\s0 decided to implement.
.PP
Cf. \*(L"Prerequisites\*(R".
.SS "Prerequisites"
.IX Subsection "Prerequisites"
.IP "\s-1EMX\s0" 6
.IX Item "EMX"
\&\s-1EMX\s0 runtime is required (may be substituted by \s-1RSX\s0). Note that
it is possible to make \fIperl_.exe\fR to run under \s-1DOS\s0 without any
external support by binding \fIemx.exe\fR/\fIrsx.exe\fR to it, see \f(CW\*(C`emxbind\*(C'\fR. Note
that under \s-1DOS\s0 for best results one should use \s-1RSX\s0 runtime, which
has much more functions working (like \f(CW\*(C`fork\*(C'\fR, \f(CW\*(C`popen\*(C'\fR and so on). In
fact \s-1RSX\s0 is required if there is no \s-1VCPI\s0 present. Note the
\&\s-1RSX\s0 requires \s-1DPMI. \s0 Many implementations of \s-1DPMI\s0 are known to be very
buggy, beware!
.Sp
Only the latest runtime is supported, currently \f(CW\*(C`0.9d fix 03\*(C'\fR. Perl may run
under earlier versions of \s-1EMX,\s0 but this is not tested.
.Sp
One can get different parts of \s-1EMX\s0 from, say
.Sp
.Vb 2
\&  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/emx+gcc/
\&  http://hobbes.nmsu.edu/h\-browse.php?dir=/pub/os2/dev/emx/v0.9d/
.Ve
.Sp
The runtime component should have the name \fIemxrt.zip\fR.
.Sp
\&\fB\s-1NOTE\s0\fR. When using \fIemx.exe\fR/\fIrsx.exe\fR, it is enough to have them on your path. One
does not need to specify them explicitly (though this
.Sp
.Vb 1
\&  emx perl_.exe \-de 0
.Ve
.Sp
will work as well.)
.IP "\s-1RSX\s0" 6
.IX Item "RSX"
To run Perl on \s-1DPMI\s0 platforms one needs \s-1RSX\s0 runtime. This is
needed under DOS\-inside\-OS/2, Win0.3*, Win0.95 and WinNT (see 
\&\*(L"Other OSes\*(R"). \s-1RSX\s0 would not work with \s-1VCPI\s0
only, as \s-1EMX\s0 would, it requires \s-1DMPI.\s0
.Sp
Having \s-1RSX\s0 and the latest \fIsh.exe\fR one gets a fully functional
\&\fB*nix\fR\-ish environment under \s-1DOS,\s0 say, \f(CW\*(C`fork\*(C'\fR, \f(CW\*(C`\`\`\*(C'\fR and
pipe\-\f(CW\*(C`open\*(C'\fR work. In fact, MakeMaker works (for static build), so one
can have Perl development environment under \s-1DOS. \s0
.Sp
One can get \s-1RSX\s0 from, say
.Sp
.Vb 2
\&  http://cd.textfiles.com/hobbesos29804/disk1/EMX09C/
\&  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/emx+gcc/contrib/
.Ve
.Sp
Contact the author on \f(CW\*(C`rainer@mathematik.uni\-bielefeld.de\*(C'\fR.
.Sp
The latest \fIsh.exe\fR with \s-1DOS\s0 hooks is available in
.Sp
.Vb 1
\&  http://www.ilyaz.org/software/os2/
.Ve
.Sp
as \fIsh_dos.zip\fR or under similar names starting with \f(CW\*(C`sh\*(C'\fR, \f(CW\*(C`pdksh\*(C'\fR etc.
.IP "\s-1HPFS\s0" 6
.IX Item "HPFS"
Perl does not care about file systems, but the perl library contains
many files with long names, so to install it intact one needs a file
system which supports long file names.
.Sp
Note that if you do not plan to build the perl itself, it may be
possible to fool \s-1EMX\s0 to truncate file names. This is not supported,
read \s-1EMX\s0 docs to see how to do it.
.IP "pdksh" 6
.IX Item "pdksh"
To start external programs with complicated command lines (like with
pipes in between, and/or quoting of arguments), Perl uses an external
shell. With \s-1EMX\s0 port such shell should be named \fIsh.exe\fR, and located
either in the wired-in-during-compile locations (usually \fIF:/bin\fR),
or in configurable location (see \*(L"\s-1PERL_SH_DIR\*(R"\s0).
.Sp
For best results use \s-1EMX\s0 pdksh. The standard binary (5.2.14 or later) runs
under \s-1DOS \s0(with \*(L"\s-1RSX\*(R"\s0) as well, see
.Sp
.Vb 1
\&  http://www.ilyaz.org/software/os2/
.Ve
.SS "Starting Perl programs under \s-1OS/2 \s0(and \s-1DOS\s0 and...)"
.IX Subsection "Starting Perl programs under OS/2 (and DOS and...)"
Start your Perl program \fIfoo.pl\fR with arguments \f(CW\*(C`arg1 arg2 arg3\*(C'\fR the
same way as on any other platform, by
.PP
.Vb 1
\&        perl foo.pl arg1 arg2 arg3
.Ve
.PP
If you want to specify perl options \f(CW\*(C`\-my_opts\*(C'\fR to the perl itself (as
opposed to your program), use
.PP
.Vb 1
\&        perl \-my_opts foo.pl arg1 arg2 arg3
.Ve
.PP
Alternately, if you use OS/2\-ish shell, like \s-1CMD\s0 or 4os2, put
the following at the start of your perl script:
.PP
.Vb 1
\&        extproc perl \-S \-my_opts
.Ve
.PP
rename your program to \fIfoo.cmd\fR, and start it by typing
.PP
.Vb 1
\&        foo arg1 arg2 arg3
.Ve
.PP
Note that because of stupid \s-1OS/2\s0 limitations the full path of the perl
script is not available when you use \f(CW\*(C`extproc\*(C'\fR, thus you are forced to
use \f(CW\*(C`\-S\*(C'\fR perl switch, and your script should be on the \f(CW\*(C`PATH\*(C'\fR. As a plus
side, if you know a full path to your script, you may still start it
with
.PP
.Vb 1
\&        perl ../../blah/foo.cmd arg1 arg2 arg3
.Ve
.PP
(note that the argument \f(CW\*(C`\-my_opts\*(C'\fR is taken care of by the \f(CW\*(C`extproc\*(C'\fR line
in your script, see "\f(CW\*(C`extproc\*(C'\fR on the first line").
.PP
To understand what the above \fImagic\fR does, read perl docs about \f(CW\*(C`\-S\*(C'\fR
switch \- see perlrun, and cmdref about \f(CW\*(C`extproc\*(C'\fR:
.PP
.Vb 4
\&        view perl perlrun
\&        man perlrun
\&        view cmdref extproc
\&        help extproc
.Ve
.PP
or whatever method you prefer.
.PP
There are also endless possibilities to use \fIexecutable extensions\fR of
4os2, \fIassociations\fR of \s-1WPS\s0 and so on... However, if you use
*nixish shell (like \fIsh.exe\fR supplied in the binary distribution),
you need to follow the syntax specified in \*(L"Command Switches\*(R" in perlrun.
.PP
Note that \fB\-S\fR switch supports scripts with additional extensions 
\&\fI.cmd\fR, \fI.btm\fR, \fI.bat\fR, \fI.pl\fR as well.
.SS "Starting \s-1OS/2 \s0(and \s-1DOS\s0) programs under Perl"
.IX Subsection "Starting OS/2 (and DOS) programs under Perl"
This is what \fIsystem()\fR (see \*(L"system\*(R" in perlfunc), \f(CW\*(C`\`\`\*(C'\fR (see
\&\*(L"I/O Operators\*(R" in perlop), and \fIopen pipe\fR (see \*(L"open\*(R" in perlfunc)
are for. (Avoid \fIexec()\fR (see \*(L"exec\*(R" in perlfunc) unless you know what you
do).
.PP
Note however that to use some of these operators you need to have a
sh-syntax shell installed (see \*(L"Pdksh\*(R", 
\&\*(L"Frequently asked questions\*(R"), and perl should be able to find it
(see \*(L"\s-1PERL_SH_DIR\*(R"\s0).
.PP
The cases when the shell is used are:
.IP "1." 4
One-argument \fIsystem()\fR (see \*(L"system\*(R" in perlfunc), \fIexec()\fR (see \*(L"exec\*(R" in perlfunc)
with redirection or shell meta-characters;
.IP "2." 4
Pipe-open (see \*(L"open\*(R" in perlfunc) with the command which contains redirection 
or shell meta-characters;
.IP "3." 4
Backticks \f(CW\*(C`\`\`\*(C'\fR (see \*(L"I/O Operators\*(R" in perlop) with the command which contains
redirection or shell meta-characters;
.IP "4." 4
If the executable called by \fIsystem()\fR/\fIexec()\fR/pipe\-\fIopen()\fR/\f(CW\*(C`\`\`\*(C'\fR is a script
with the \*(L"magic\*(R" \f(CW\*(C`#!\*(C'\fR line or \f(CW\*(C`extproc\*(C'\fR line which specifies shell;
.IP "5." 4
If the executable called by \fIsystem()\fR/\fIexec()\fR/pipe\-\fIopen()\fR/\f(CW\*(C`\`\`\*(C'\fR is a script
without \*(L"magic\*(R" line, and \f(CW$ENV{EXECSHELL}\fR is set to shell;
.IP "6." 4
If the executable called by \fIsystem()\fR/\fIexec()\fR/pipe\-\fIopen()\fR/\f(CW\*(C`\`\`\*(C'\fR is not
found (is not this remark obsolete?);
.IP "7." 4
For globbing (see \*(L"glob\*(R" in perlfunc, \*(L"I/O Operators\*(R" in perlop)
(obsolete? Perl uses builtin globbing nowadays...).
.PP
For the sake of speed for a common case, in the above algorithms 
backslashes in the command name are not considered as shell metacharacters.
.PP
Perl starts scripts which begin with cookies
\&\f(CW\*(C`extproc\*(C'\fR or \f(CW\*(C`#!\*(C'\fR directly, without an intervention of shell.  Perl uses the
same algorithm to find the executable as \fIpdksh\fR: if the path
on \f(CW\*(C`#!\*(C'\fR line does not work, and contains \f(CW\*(C`/\*(C'\fR, then the directory
part of the executable is ignored, and the executable
is searched in \fI.\fR and on \f(CW\*(C`PATH\*(C'\fR.  To find arguments for these scripts
Perl uses a different algorithm than \fIpdksh\fR: up to 3 arguments are 
recognized, and trailing whitespace is stripped.
.PP
If a script
does not contain such a cooky, then to avoid calling \fIsh.exe\fR, Perl uses
the same algorithm as \fIpdksh\fR: if \f(CW$ENV{EXECSHELL}\fR is set, the
script is given as the first argument to this command, if not set, then
\&\f(CW\*(C`$ENV{COMSPEC} /c\*(C'\fR is used (or a hardwired guess if \f(CW$ENV{COMSPEC}\fR is
not set).
.PP
When starting scripts directly, Perl uses exactly the same algorithm as for 
the search of script given by \fB\-S\fR command-line option: it will look in
the current directory, then on components of \f(CW$ENV{PATH}\fR using the 
following order of appended extensions: no extension, \fI.cmd\fR, \fI.btm\fR, 
\&\fI.bat\fR, \fI.pl\fR.
.PP
Note that Perl will start to look for scripts only if \s-1OS/2\s0 cannot start the
specified application, thus \f(CW\*(C`system \*(Aqblah\*(Aq\*(C'\fR will not look for a script if 
there is an executable file \fIblah.exe\fR \fIanywhere\fR on \f(CW\*(C`PATH\*(C'\fR.  In
other words, \f(CW\*(C`PATH\*(C'\fR is essentially searched twice: once by the \s-1OS\s0 for
an executable, then by Perl for scripts.
.PP
Note also that executable files on \s-1OS/2\s0 can have an arbitrary extension, 
but \fI.exe\fR will be automatically appended if no dot is present in the name.  
The workaround is as simple as that:  since \fIblah.\fR and \fIblah\fR denote the 
same file (at list on \s-1FAT\s0 and \s-1HPFS\s0 file systems), to start an executable residing in file \fIn:/bin/blah\fR (no 
extension) give an argument \f(CW\*(C`n:/bin/blah.\*(C'\fR (dot appended) to \fIsystem()\fR.
.PP
Perl will start \s-1PM\s0 programs from \s-1VIO \s0(=text\-mode) Perl process in a
separate \s-1PM\s0 session;
the opposite is not true: when you start a non-PM program from a \s-1PM\s0
Perl process, Perl would not run it in a separate session.  If a separate
session is desired, either ensure
that shell will be used, as in \f(CW\*(C`system \*(Aqcmd /c myprog\*(Aq\*(C'\fR, or start it using
optional arguments to \fIsystem()\fR documented in \f(CW\*(C`OS2::Process\*(C'\fR module.  This
is considered to be a feature.
.SH "Frequently asked questions"
.IX Header "Frequently asked questions"
.ie n .SS """It does not work"""
.el .SS "``It does not work''"
.IX Subsection "It does not work"
Perl binary distributions come with a \fItestperl.cmd\fR script which tries
to detect common problems with misconfigured installations.  There is a
pretty large chance it will discover which step of the installation you
managed to goof.  \f(CW\*(C`;\-)\*(C'\fR
.SS "I cannot run external programs"
.IX Subsection "I cannot run external programs"
.IP "\(bu" 4
Did you run your programs with \f(CW\*(C`\-w\*(C'\fR switch? See 
\&\*(L"Starting \s-1OS/2 \s0(and \s-1DOS\s0) programs under Perl\*(R".
.IP "\(bu" 4
Do you try to run \fIinternal\fR shell commands, like \f(CW\*(C`\`copy a b\`\*(C'\fR
(internal for \fIcmd.exe\fR), or \f(CW\*(C`\`glob a*b\`\*(C'\fR (internal for ksh)? You
need to specify your shell explicitly, like \f(CW\*(C`\`cmd /c copy a b\`\*(C'\fR,
since Perl cannot deduce which commands are internal to your shell.
.SS "I cannot embed perl into my program, or use \fIperl.dll\fP from my program."
.IX Subsection "I cannot embed perl into my program, or use perl.dll from my program."
.ie n .IP "Is your program EMX-compiled with ""\-Zmt \-Zcrtdll""?" 4
.el .IP "Is your program EMX-compiled with \f(CW\-Zmt \-Zcrtdll\fR?" 4
.IX Item "Is your program EMX-compiled with -Zmt -Zcrtdll?"
Well, nowadays Perl \s-1DLL\s0 should be usable from a differently compiled
program too...  If you can run Perl code from \s-1REXX\s0 scripts (see
\&\s-1OS2::REXX\s0), then there are some other aspect of interaction which
are overlooked by the current hackish code to support
differently-compiled principal programs.
.Sp
If everything else fails, you need to build a stand-alone \s-1DLL\s0 for
perl. Contact me, I did it once. Sockets would not work, as a lot of
other stuff.
.IP "Did you use ExtUtils::Embed?" 4
.IX Item "Did you use ExtUtils::Embed?"
Some time ago I had reports it does not work.  Nowadays it is checked
in the Perl test suite, so grep \fI./t\fR subdirectory of the build tree
(as well as \fI*.t\fR files in the \fI./lib\fR subdirectory) to find how it
should be done \*(L"correctly\*(R".
.ie n .SS """\`\`"" and pipe\-""open"" do not work under \s-1DOS.\s0"
.el .SS "\f(CW\`\`\fP and pipe\-\f(CWopen\fP do not work under \s-1DOS.\s0"
.IX Subsection " and pipe-open do not work under DOS."
This may a variant of just \*(L"I cannot run external programs\*(R", or a
deeper problem. Basically: you \fIneed\fR \s-1RSX \s0(see \*(L"Prerequisites\*(R")
for these commands to work, and you may need a port of \fIsh.exe\fR which
understands command arguments. One of such ports is listed in
\&\*(L"Prerequisites\*(R" under \s-1RSX.\s0 Do not forget to set variable
\&\f(CW"PERL_SH_DIR"\fR as well.
.PP
\&\s-1DPMI\s0 is required for \s-1RSX.\s0
.ie n .SS "Cannot start ""find.exe ""pattern"" file"""
.el .SS "Cannot start \f(CWfind.exe ``pattern'' file\fP"
.IX Subsection "Cannot start find.exe ""pattern"" file"
The whole idea of the \*(L"standard C \s-1API\s0 to start applications\*(R" is that
the forms \f(CW\*(C`foo\*(C'\fR and \f(CW"foo"\fR of program arguments are completely
interchangeable.  \fIfind\fR breaks this paradigm;
.PP
.Vb 2
\&  find "pattern" file
\&  find pattern file
.Ve
.PP
are not equivalent; \fIfind\fR cannot be started directly using the above
\&\s-1API. \s0 One needs a way to surround the doublequotes in some other
quoting construction, necessarily having an extra non-Unixish shell in
between.
.PP
Use one of
.PP
.Vb 2
\&  system \*(Aqcmd\*(Aq, \*(Aq/c\*(Aq, \*(Aqfind "pattern" file\*(Aq;
\&  \`cmd /c \*(Aqfind "pattern" file\*(Aq\`
.Ve
.PP
This would start \fIfind.exe\fR via \fIcmd.exe\fR via \f(CW\*(C`sh.exe\*(C'\fR via
\&\f(CW\*(C`perl.exe\*(C'\fR, but this is a price to pay if you want to use
non-conforming program.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.SS "Automatic binary installation"
.IX Subsection "Automatic binary installation"
The most convenient way of installing a binary distribution of perl is via perl installer
\&\fIinstall.exe\fR. Just follow the instructions, and 99% of the
installation blues would go away.
.PP
Note however, that you need to have \fIunzip.exe\fR on your path, and
\&\s-1EMX\s0 environment \fIrunning\fR. The latter means that if you just
installed \s-1EMX,\s0 and made all the needed changes to \fIConfig.sys\fR,
you may need to reboot in between. Check \s-1EMX\s0 runtime by running
.PP
.Vb 1
\&        emxrev
.Ve
.PP
Binary installer also creates a folder on your desktop with some useful
objects.  If you need to change some aspects of the work of the binary
installer, feel free to edit the file \fIPerl.pkg\fR.  This may be useful
e.g., if you need to run the installer many times and do not want to
make many interactive changes in the \s-1GUI.\s0
.PP
\&\fBThings not taken care of by automatic binary installation:\fR
.ie n .IP """PERL_BADLANG""" 15
.el .IP "\f(CWPERL_BADLANG\fR" 15
.IX Item "PERL_BADLANG"
may be needed if you change your codepage \fIafter\fR perl installation,
and the new value is not supported by \s-1EMX.\s0 See \*(L"\s-1PERL_BADLANG\*(R"\s0.
.ie n .IP """PERL_BADFREE""" 15
.el .IP "\f(CWPERL_BADFREE\fR" 15
.IX Item "PERL_BADFREE"
see \*(L"\s-1PERL_BADFREE\*(R"\s0.
.IP "\fIConfig.pm\fR" 15
.IX Item "Config.pm"
This file resides somewhere deep in the location you installed your
perl library, find it out by
.Sp
.Vb 1
\&  perl \-MConfig \-le "print $INC{\*(AqConfig.pm\*(Aq}"
.Ve
.Sp
While most important values in this file \fIare\fR updated by the binary
installer, some of them may need to be hand-edited. I know no such
data, please keep me informed if you find one.  Moreover, manual
changes to the installed version may need to be accompanied by an edit
of this file.
.PP
\&\fB\s-1NOTE\s0\fR. Because of a typo the binary installer of 5.00305
would install a variable \f(CW\*(C`PERL_SHPATH\*(C'\fR into \fIConfig.sys\fR. Please
remove this variable and put \f(CW"PERL_SH_DIR"\fR instead.
.SS "Manual binary installation"
.IX Subsection "Manual binary installation"
As of version 5.00305, \s-1OS/2\s0 perl binary distribution comes split
into 11 components. Unfortunately, to enable configurable binary
installation, the file paths in the zip files are not absolute, but
relative to some directory.
.PP
Note that the extraction with the stored paths is still necessary
(default with unzip, specify \f(CW\*(C`\-d\*(C'\fR to pkunzip). However, you
need to know where to extract the files. You need also to manually
change entries in \fIConfig.sys\fR to reflect where did you put the
files. Note that if you have some primitive unzipper (like
\&\f(CW\*(C`pkunzip\*(C'\fR), you may get a lot of warnings/errors during
unzipping. Upgrade to \f(CW\*(C`(w)unzip\*(C'\fR.
.PP
Below is the sample of what to do to reproduce the configuration on my
machine.  In \fI\s-1VIEW.EXE\s0\fR you can press \f(CW\*(C`Ctrl\-Insert\*(C'\fR now, and
cut-and-paste from the resulting file \- created in the directory you
started \fI\s-1VIEW.EXE\s0\fR from.
.PP
For each component, we mention environment variables related to each
installation directory.  Either choose directories to match your
values of the variables, or create/append\-to variables to take into
account the directories.
.IP "Perl \s-1VIO\s0 and \s-1PM\s0 executables (dynamically linked)" 3
.IX Item "Perl VIO and PM executables (dynamically linked)"
.Vb 2
\&  unzip perl_exc.zip *.exe *.ico \-d f:/emx.add/bin
\&  unzip perl_exc.zip *.dll \-d f:/emx.add/dll
.Ve
.Sp
(have the directories with \f(CW\*(C`*.exe\*(C'\fR on \s-1PATH,\s0 and \f(CW\*(C`*.dll\*(C'\fR on
\&\s-1LIBPATH\s0);
.IP "Perl_ \s-1VIO\s0 executable (statically linked)" 3
.IX Item "Perl_ VIO executable (statically linked)"
.Vb 1
\&  unzip perl_aou.zip \-d f:/emx.add/bin
.Ve
.Sp
(have the directory on \s-1PATH\s0);
.IP "Executables for Perl utilities" 3
.IX Item "Executables for Perl utilities"
.Vb 1
\&  unzip perl_utl.zip \-d f:/emx.add/bin
.Ve
.Sp
(have the directory on \s-1PATH\s0);
.IP "Main Perl library" 3
.IX Item "Main Perl library"
.Vb 1
\&  unzip perl_mlb.zip \-d f:/perllib/lib
.Ve
.Sp
If this directory is exactly the same as the prefix which was compiled
into \fIperl.exe\fR, you do not need to change
anything. However, for perl to find the library if you use a different
path, you need to
\&\f(CW\*(C`set PERLLIB_PREFIX\*(C'\fR in \fIConfig.sys\fR, see \*(L"\s-1PERLLIB_PREFIX\*(R"\s0.
.IP "Additional Perl modules" 3
.IX Item "Additional Perl modules"
.Vb 1
\&  unzip perl_ste.zip \-d f:/perllib/lib/site_perl/5.18.2/
.Ve
.Sp
Same remark as above applies.  Additionally, if this directory is not
one of directories on \f(CW@INC\fR (and \f(CW@INC\fR is influenced by \f(CW\*(C`PERLLIB_PREFIX\*(C'\fR), you
need to put this
directory and subdirectory \fI./os2\fR in \f(CW\*(C`PERLLIB\*(C'\fR or \f(CW\*(C`PERL5LIB\*(C'\fR
variable. Do not use \f(CW\*(C`PERL5LIB\*(C'\fR unless you have it set already. See
\&\*(L"\s-1ENVIRONMENT\*(R"\s0 in perl.
.Sp
\&\fB[Check whether this extraction directory is still applicable with
the new directory structure layout!]\fR
.IP "Tools to compile Perl modules" 3
.IX Item "Tools to compile Perl modules"
.Vb 1
\&  unzip perl_blb.zip \-d f:/perllib/lib
.Ve
.Sp
Same remark as for \fIperl_ste.zip\fR.
.IP "Manpages for Perl and utilities" 3
.IX Item "Manpages for Perl and utilities"
.Vb 1
\&  unzip perl_man.zip \-d f:/perllib/man
.Ve
.Sp
This directory should better be on \f(CW\*(C`MANPATH\*(C'\fR. You need to have a
working \fIman\fR to access these files.
.IP "Manpages for Perl modules" 3
.IX Item "Manpages for Perl modules"
.Vb 1
\&  unzip perl_mam.zip \-d f:/perllib/man
.Ve
.Sp
This directory should better be on \f(CW\*(C`MANPATH\*(C'\fR. You need to have a
working man to access these files.
.IP "Source for Perl documentation" 3
.IX Item "Source for Perl documentation"
.Vb 1
\&  unzip perl_pod.zip \-d f:/perllib/lib
.Ve
.Sp
This is used by the \f(CW\*(C`perldoc\*(C'\fR program (see perldoc), and may be used to
generate \s-1HTML\s0 documentation usable by \s-1WWW\s0 browsers, and
documentation in zillions of other formats: \f(CW\*(C`info\*(C'\fR, \f(CW\*(C`LaTeX\*(C'\fR,
\&\f(CW\*(C`Acrobat\*(C'\fR, \f(CW\*(C`FrameMaker\*(C'\fR and so on.  [Use programs such as
\&\fIpod2latex\fR etc.]
.IP "Perl manual in \fI.INF\fR format" 3
.IX Item "Perl manual in .INF format"
.Vb 1
\&  unzip perl_inf.zip \-d d:/os2/book
.Ve
.Sp
This directory should better be on \f(CW\*(C`BOOKSHELF\*(C'\fR.
.IP "Pdksh" 3
.IX Item "Pdksh"
.Vb 1
\&  unzip perl_sh.zip \-d f:/bin
.Ve
.Sp
This is used by perl to run external commands which explicitly
require shell, like the commands using \fIredirection\fR and \fIshell
metacharacters\fR. It is also used instead of explicit \fI/bin/sh\fR.
.Sp
Set \f(CW\*(C`PERL_SH_DIR\*(C'\fR (see \*(L"\s-1PERL_SH_DIR\*(R"\s0) if you move \fIsh.exe\fR from
the above location.
.Sp
\&\fBNote.\fR It may be possible to use some other sh-compatible shell (untested).
.PP
After you installed the components you needed and updated the
\&\fIConfig.sys\fR correspondingly, you need to hand-edit
\&\fIConfig.pm\fR. This file resides somewhere deep in the location you
installed your perl library, find it out by
.PP
.Vb 1
\&  perl \-MConfig \-le "print $INC{\*(AqConfig.pm\*(Aq}"
.Ve
.PP
You need to correct all the entries which look like file paths (they
currently start with \f(CW\*(C`f:/\*(C'\fR).
.SS "\fBWarning\fP"
.IX Subsection "Warning"
The automatic and manual perl installation leave precompiled paths
inside perl executables. While these paths are overwriteable (see
\&\*(L"\s-1PERLLIB_PREFIX\*(R"\s0, \*(L"\s-1PERL_SH_DIR\*(R"\s0), some people may prefer
binary editing of paths inside the executables/DLLs.
.SH "Accessing documentation"
.IX Header "Accessing documentation"
Depending on how you built/installed perl you may have (otherwise
identical) Perl documentation in the following formats:
.SS "\s-1OS/2 \s0\fI.INF\fP file"
.IX Subsection "OS/2 .INF file"
Most probably the most convenient form. Under \s-1OS/2\s0 view it as
.PP
.Vb 4
\&  view perl
\&  view perl perlfunc
\&  view perl less
\&  view perl ExtUtils::MakeMaker
.Ve
.PP
(currently the last two may hit a wrong location, but this may improve
soon). Under Win* see \*(L"\s-1SYNOPSIS\*(R"\s0.
.PP
If you want to build the docs yourself, and have \fI\s-1OS/2\s0 toolkit\fR, run
.PP
.Vb 1
\&        pod2ipf > perl.ipf
.Ve
.PP
in \fI/perllib/lib/pod\fR directory, then
.PP
.Vb 1
\&        ipfc /inf perl.ipf
.Ve
.PP
(Expect a lot of errors during the both steps.) Now move it on your
\&\s-1BOOKSHELF\s0 path.
.SS "Plain text"
.IX Subsection "Plain text"
If you have perl documentation in the source form, perl utilities
installed, and \s-1GNU\s0 groff installed, you may use
.PP
.Vb 3
\&        perldoc perlfunc
\&        perldoc less
\&        perldoc ExtUtils::MakeMaker
.Ve
.PP
to access the perl documentation in the text form (note that you may get
better results using perl manpages).
.PP
Alternately, try running pod2text on \fI.pod\fR files.
.SS "Manpages"
.IX Subsection "Manpages"
If you have \fIman\fR installed on your system, and you installed perl
manpages, use something like this:
.PP
.Vb 3
\&        man perlfunc
\&        man 3 less
\&        man ExtUtils.MakeMaker
.Ve
.PP
to access documentation for different components of Perl. Start with
.PP
.Vb 1
\&        man perl
.Ve
.PP
Note that dot (\fI.\fR) is used as a package separator for documentation
for packages, and as usual, sometimes you need to give the section \- \f(CW3\fR
above \- to avoid shadowing by the \fI\fIless\fI\|(1) manpage\fR.
.PP
Make sure that the directory \fBabove\fR the directory with manpages is
on our \f(CW\*(C`MANPATH\*(C'\fR, like this
.PP
.Vb 1
\&  set MANPATH=c:/man;f:/perllib/man
.Ve
.PP
for Perl manpages in \f(CW\*(C`f:/perllib/man/man1/\*(C'\fR etc.
.SS "\s-1HTML\s0"
.IX Subsection "HTML"
If you have some \s-1WWW\s0 browser available, installed the Perl
documentation in the source form, and Perl utilities, you can build
\&\s-1HTML\s0 docs. Cd to directory with \fI.pod\fR files, and do like this
.PP
.Vb 2
\&        cd f:/perllib/lib/pod
\&        pod2html
.Ve
.PP
After this you can direct your browser the file \fIperl.html\fR in this
directory, and go ahead with reading docs, like this:
.PP
.Vb 1
\&        explore file:///f:/perllib/lib/pod/perl.html
.Ve
.PP
Alternatively you may be able to get these docs prebuilt from \s-1CPAN.\s0
.ie n .SS "\s-1GNU \s0""info"" files"
.el .SS "\s-1GNU \s0\f(CWinfo\fP files"
.IX Subsection "GNU info files"
Users of Emacs would appreciate it very much, especially with
\&\f(CW\*(C`CPerl\*(C'\fR mode loaded. You need to get latest \f(CW\*(C`pod2texi\*(C'\fR from \f(CW\*(C`CPAN\*(C'\fR,
or, alternately, the prebuilt info pages.
.SS "\fI\s-1PDF\s0\fP files"
.IX Subsection "PDF files"
for \f(CW\*(C`Acrobat\*(C'\fR are available on \s-1CPAN \s0(may be for slightly older version of
perl).
.ie n .SS """LaTeX"" docs"
.el .SS "\f(CWLaTeX\fP docs"
.IX Subsection "LaTeX docs"
can be constructed using \f(CW\*(C`pod2latex\*(C'\fR.
.SH "BUILD"
.IX Header "BUILD"
Here we discuss how to build Perl under \s-1OS/2.\s0
.SS "The short story"
.IX Subsection "The short story"
Assume that you are a seasoned porter, so are sure that all the necessary
tools are already present on your system, and you know how to get the Perl
source distribution.  Untar it, change to the extract directory, and
.PP
.Vb 7
\&  gnupatch \-p0 < os2\ediff.configure
\&  sh Configure \-des \-D prefix=f:/perllib
\&  make
\&  make test
\&  make install
\&  make aout_test
\&  make aout_install
.Ve
.PP
This puts the executables in f:/perllib/bin.  Manually move them to the
\&\f(CW\*(C`PATH\*(C'\fR, manually move the built \fIperl*.dll\fR to \f(CW\*(C`LIBPATH\*(C'\fR (here for
Perl \s-1DLL \s0\fI*\fR is a not-very-meaningful hex checksum), and run
.PP
.Vb 1
\&  make installcmd INSTALLCMDDIR=d:/ir/on/path
.Ve
.PP
Assuming that the \f(CW\*(C`man\*(C'\fR\-files were put on an appropriate location,
this completes the installation of minimal Perl system.  (The binary
distribution contains also a lot of additional modules, and the
documentation in \s-1INF\s0 format.)
.PP
What follows is a detailed guide through these steps.
.SS "Prerequisites"
.IX Subsection "Prerequisites"
You need to have the latest \s-1EMX\s0 development environment, the full
\&\s-1GNU\s0 tool suite (gawk renamed to awk, and \s-1GNU \s0\fIfind.exe\fR
earlier on path than the \s-1OS/2 \s0\fIfind.exe\fR, same with \fIsort.exe\fR, to
check use
.PP
.Vb 2
\&  find \-\-version
\&  sort \-\-version
.Ve
.PP
). You need the latest version of \fIpdksh\fR installed as \fIsh.exe\fR.
.PP
Check that you have \fB\s-1BSD\s0\fR libraries and headers installed, and \- 
optionally \- Berkeley \s-1DB\s0 headers and libraries, and crypt.
.PP
Possible locations to get the files:
.PP
.Vb 4
\&  ftp://ftp.uni\-heidelberg.de/pub/os2/unix/
\&  http://hobbes.nmsu.edu/h\-browse.php?dir=/pub/os2
\&  http://cd.textfiles.com/hobbesos29804/disk1/DEV32/
\&  http://cd.textfiles.com/hobbesos29804/disk1/EMX09C/
.Ve
.PP
It is reported that the following archives contain enough utils to
build perl: \fIgnufutil.zip\fR, \fIgnusutil.zip\fR, \fIgnututil.zip\fR, \fIgnused.zip\fR,
\&\fIgnupatch.zip\fR, \fIgnuawk.zip\fR, \fIgnumake.zip\fR, \fIgnugrep.zip\fR, \fIbsddev.zip\fR and
\&\fIksh527rt.zip\fR (or a later version).  Note that all these utilities are
known to be available from \s-1LEO:\s0
.PP
.Vb 1
\&  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/
.Ve
.PP
Note also that the \fIdb.lib\fR and \fIdb.a\fR from the \s-1EMX\s0 distribution
are not suitable for multi-threaded compile (even single-threaded
flavor of Perl uses multi-threaded C \s-1RTL,\s0 for
compatibility with XFree86\-OS/2). Get a corrected one from
.PP
.Vb 1
\&  http://www.ilyaz.org/software/os2/db_mt.zip
.Ve
.PP
If you have \fIexactly the same version of Perl\fR installed already,
make sure that no copies or perl are currently running.  Later steps
of the build may fail since an older version of \fIperl.dll\fR loaded into
memory may be found.  Running \f(CW\*(C`make test\*(C'\fR becomes meaningless, since
the test are checking a previous build of perl (this situation is detected
and reported by \fIlib/os2_base.t\fR test).  Do not forget to unset
\&\f(CW\*(C`PERL_EMXLOAD_SEC\*(C'\fR in environment.
.PP
Also make sure that you have \fI/tmp\fR directory on the current drive,
and \fI.\fR directory in your \f(CW\*(C`LIBPATH\*(C'\fR. One may try to correct the
latter condition by
.PP
.Vb 1
\&  set BEGINLIBPATH .\e.
.Ve
.PP
if you use something like \fI\s-1CMD.EXE\s0\fR or latest versions of
\&\fI4os2.exe\fR.  (Setting \s-1BEGINLIBPATH\s0 to just \f(CW\*(C`.\*(C'\fR is ignored by the
\&\s-1OS/2\s0 kernel.)
.PP
Make sure your gcc is good for \f(CW\*(C`\-Zomf\*(C'\fR linking: run \f(CW\*(C`omflibs\*(C'\fR
script in \fI/emx/lib\fR directory.
.PP
Check that you have link386 installed. It comes standard with \s-1OS/2,\s0
but may be not installed due to customization. If typing
.PP
.Vb 1
\&  link386
.Ve
.PP
shows you do not have it, do \fISelective install\fR, and choose \f(CW\*(C`Link
object modules\*(C'\fR in \fIOptional system utilities/More\fR. If you get into
link386 prompts, press \f(CW\*(C`Ctrl\-C\*(C'\fR to exit.
.SS "Getting perl source"
.IX Subsection "Getting perl source"
You need to fetch the latest perl source (including developers
releases). With some probability it is located in
.PP
.Vb 2
\&  http://www.cpan.org/src/
\&  http://www.cpan.org/src/unsupported
.Ve
.PP
If not, you may need to dig in the indices to find it in the directory
of the current maintainer.
.PP
Quick cycle of developers release may break the \s-1OS/2\s0 build time to
time, looking into
.PP
.Vb 1
\&  http://www.cpan.org/ports/os2/
.Ve
.PP
may indicate the latest release which was publicly released by the
maintainer. Note that the release may include some additional patches
to apply to the current source of perl.
.PP
Extract it like this
.PP
.Vb 1
\&  tar vzxf perl5.00409.tar.gz
.Ve
.PP
You may see a message about errors while extracting \fIConfigure\fR. This is
because there is a conflict with a similarly-named file \fIconfigure\fR.
.PP
Change to the directory of extraction.
.SS "Application of the patches"
.IX Subsection "Application of the patches"
You need to apply the patches in \fI./os2/diff.*\fR like this:
.PP
.Vb 1
\&  gnupatch \-p0 < os2\ediff.configure
.Ve
.PP
You may also need to apply the patches supplied with the binary
distribution of perl.  It also makes sense to look on the
perl5\-porters mailing list for the latest OS/2\-related patches (see
<http://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/>).  Such
patches usually contain strings \f(CW\*(C`/os2/\*(C'\fR and \f(CW\*(C`patch\*(C'\fR, so it makes
sense looking for these strings.
.SS "Hand-editing"
.IX Subsection "Hand-editing"
You may look into the file \fI./hints/os2.sh\fR and correct anything
wrong you find there. I do not expect it is needed anywhere.
.SS "Making"
.IX Subsection "Making"
.Vb 1
\&  sh Configure \-des \-D prefix=f:/perllib
.Ve
.PP
\&\f(CW\*(C`prefix\*(C'\fR means: where to install the resulting perl library. Giving
correct prefix you may avoid the need to specify \f(CW\*(C`PERLLIB_PREFIX\*(C'\fR,
see \*(L"\s-1PERLLIB_PREFIX\*(R"\s0.
.PP
\&\fIIgnore the message about missing \f(CI\*(C`ln\*(C'\fI, and about \f(CI\*(C`\-c\*(C'\fI option to
tr\fR. The latter is most probably already fixed, if you see it and can trace
where the latter spurious warning comes from, please inform me.
.PP
Now
.PP
.Vb 1
\&  make
.Ve
.PP
At some moment the built may die, reporting a \fIversion mismatch\fR or
\&\fIunable to run \fIperl\fI\fR.  This means that you do not have \fI.\fR in
your \s-1LIBPATH,\s0 so \fIperl.exe\fR cannot find the needed \fIperl67B2.dll\fR (treat
these hex digits as line noise).  After this is fixed the build
should finish without a lot of fuss.
.SS "Testing"
.IX Subsection "Testing"
Now run
.PP
.Vb 1
\&  make test
.Ve
.PP
All tests should succeed (with some of them skipped).  If you have the
same version of Perl installed, it is crucial that you have \f(CW\*(C`.\*(C'\fR early
in your \s-1LIBPATH \s0(or in \s-1BEGINLIBPATH\s0), otherwise your tests will most
probably test the wrong version of Perl.
.PP
Some tests may generate extra messages similar to
.ie n .IP "A lot of ""bad free""" 4
.el .IP "A lot of \f(CWbad free\fR" 4
.IX Item "A lot of bad free"
in database tests related to Berkeley \s-1DB. \s0\fIThis should be fixed already.\fR
If it persists, you may disable this warnings, see \*(L"\s-1PERL_BADFREE\*(R"\s0.
.IP "Process terminated by \s-1SIGTERM/SIGINT\s0" 4
.IX Item "Process terminated by SIGTERM/SIGINT"
This is a standard message issued by \s-1OS/2\s0 applications. *nix
applications die in silence. It is considered to be a feature. One can
easily disable this by appropriate sighandlers.
.Sp
However the test engine bleeds these message to screen in unexpected
moments. Two messages of this kind \fIshould\fR be present during
testing.
.PP
To get finer test reports, call
.PP
.Vb 1
\&  perl t/harness
.Ve
.PP
The report with \fIio/pipe.t\fR failing may look like this:
.PP
.Vb 5
\&  Failed Test  Status Wstat Total Fail  Failed  List of failed
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  io/pipe.t                    12    1   8.33%  9
\&  7 tests skipped, plus 56 subtests skipped.
\&  Failed 1/195 test scripts, 99.49% okay. 1/6542 subtests failed, 99.98% okay.
.Ve
.PP
The reasons for most important skipped tests are:
.IP "\fIop/fs.t\fR" 8
.IX Item "op/fs.t"
.RS 8
.PD 0
.IP "18" 4
.IX Item "18"
.PD
Checks \f(CW\*(C`atime\*(C'\fR and \f(CW\*(C`mtime\*(C'\fR of \f(CW\*(C`stat()\*(C'\fR \- unfortunately, \s-1HPFS\s0
provides only 2sec time granularity (for compatibility with \s-1FAT\s0?).
.IP "25" 4
.IX Item "25"
Checks \f(CW\*(C`truncate()\*(C'\fR on a filehandle just opened for write \- I do not
know why this should or should not work.
.RE
.RS 8
.RE
.IP "\fIop/stat.t\fR" 8
.IX Item "op/stat.t"
Checks \f(CW\*(C`stat()\*(C'\fR. Tests:
.RS 8
.IP "4" 4
.IX Item "4"
Checks \f(CW\*(C`atime\*(C'\fR and \f(CW\*(C`mtime\*(C'\fR of \f(CW\*(C`stat()\*(C'\fR \- unfortunately, \s-1HPFS\s0
provides only 2sec time granularity (for compatibility with \s-1FAT\s0?).
.RE
.RS 8
.RE
.SS "Installing the built perl"
.IX Subsection "Installing the built perl"
If you haven't yet moved \f(CW\*(C`perl*.dll\*(C'\fR onto \s-1LIBPATH,\s0 do it now.
.PP
Run
.PP
.Vb 1
\&  make install
.Ve
.PP
It would put the generated files into needed locations. Manually put
\&\fIperl.exe\fR, \fIperl_\|_.exe\fR and \fIperl_\|_\|_.exe\fR to a location on your
\&\s-1PATH, \s0\fIperl.dll\fR to a location on your \s-1LIBPATH.\s0
.PP
Run
.PP
.Vb 1
\&  make installcmd INSTALLCMDDIR=d:/ir/on/path
.Ve
.PP
to convert perl utilities to \fI.cmd\fR files and put them on
\&\s-1PATH.\s0 You need to put \fI.EXE\fR\-utilities on path manually. They are
installed in \f(CW\*(C`$prefix/bin\*(C'\fR, here \f(CW$prefix\fR is what you gave to
\&\fIConfigure\fR, see \*(L"Making\*(R".
.PP
If you use \f(CW\*(C`man\*(C'\fR, either move the installed \fI*/man/\fR directories to
your \f(CW\*(C`MANPATH\*(C'\fR, or modify \f(CW\*(C`MANPATH\*(C'\fR to match the location.  (One
could have avoided this by providing a correct \f(CW\*(C`manpath\*(C'\fR option to
\&\fI./Configure\fR, or editing \fI./config.sh\fR between configuring and
making steps.)
.ie n .SS """a.out""\-style build"
.el .SS "\f(CWa.out\fP\-style build"
.IX Subsection "a.out-style build"
Proceed as above, but make \fIperl_.exe\fR (see \*(L"perl_.exe\*(R") by
.PP
.Vb 1
\&  make perl_
.Ve
.PP
test and install by
.PP
.Vb 2
\&  make aout_test
\&  make aout_install
.Ve
.PP
Manually put \fIperl_.exe\fR to a location on your \s-1PATH.\s0
.PP
\&\fBNote.\fR The build process for \f(CW\*(C`perl_\*(C'\fR \fIdoes not know\fR about all the
dependencies, so you should make sure that anything is up-to-date,
say, by doing
.PP
.Vb 1
\&  make perl_dll
.Ve
.PP
first.
.SH "Building a binary distribution"
.IX Header "Building a binary distribution"
[This section provides a short overview only...]
.PP
Building should proceed differently depending on whether the version of perl
you install is already present and used on your system, or is a new version
not yet used.  The description below assumes that the version is new, so
installing its DLLs and \fI.pm\fR files will not disrupt the operation of your
system even if some intermediate steps are not yet fully working.
.PP
The other cases require a little bit more convoluted procedures.  Below I
suppose that the current version of Perl is \f(CW5.8.2\fR, so the executables are
named accordingly.
.IP "1." 4
Fully build and test the Perl distribution.  Make sure that no tests are
failing with \f(CW\*(C`test\*(C'\fR and \f(CW\*(C`aout_test\*(C'\fR targets; fix the bugs in Perl and
the Perl test suite detected by these tests.  Make sure that \f(CW\*(C`all_test\*(C'\fR
make target runs as clean as possible.  Check that \fIos2/perlrexx.cmd\fR
runs fine.
.IP "2." 4
Fully install Perl, including \f(CW\*(C`installcmd\*(C'\fR target.  Copy the generated DLLs
to \f(CW\*(C`LIBPATH\*(C'\fR; copy the numbered Perl executables (as in \fIperl5.8.2.exe\fR)
to \f(CW\*(C`PATH\*(C'\fR; copy \f(CW\*(C`perl_.exe\*(C'\fR to \f(CW\*(C`PATH\*(C'\fR as \f(CW\*(C`perl_5.8.2.exe\*(C'\fR.  Think whether
you need backward-compatibility DLLs.  In most cases you do not need to install
them yet; but sometime this may simplify the following steps.
.IP "3." 4
Make sure that \f(CW\*(C`CPAN.pm\*(C'\fR can download files from \s-1CPAN. \s0 If not, you may need
to manually install \f(CW\*(C`Net::FTP\*(C'\fR.
.IP "4." 4
Install the bundle \f(CW\*(C`Bundle::OS2_default\*(C'\fR
.Sp
.Vb 1
\&  perl5.8.2 \-MCPAN \-e "install Bundle::OS2_default" < nul |& tee 00cpan_i_1
.Ve
.Sp
This may take a couple of hours on 1GHz processor (when run the first time).
And this should not be necessarily a smooth procedure.  Some modules may not
specify required dependencies, so one may need to repeat this procedure several
times until the results stabilize.
.Sp
.Vb 2
\&  perl5.8.2 \-MCPAN \-e "install Bundle::OS2_default" < nul |& tee 00cpan_i_2
\&  perl5.8.2 \-MCPAN \-e "install Bundle::OS2_default" < nul |& tee 00cpan_i_3
.Ve
.Sp
Even after they stabilize, some tests may fail.
.Sp
Fix as many discovered bugs as possible.  Document all the bugs which are not
fixed, and all the failures with unknown reasons.  Inspect the produced logs
\&\fI00cpan_i_1\fR to find suspiciously skipped tests, and other fishy events.
.Sp
Keep in mind that \fIinstallation\fR of some modules may fail too: for example,
the DLLs to update may be already loaded by \fI\s-1CPAN\s0.pm\fR.  Inspect the \f(CW\*(C`install\*(C'\fR
logs (in the example above \fI00cpan_i_1\fR etc) for errors, and install things
manually, as in
.Sp
.Vb 2
\&  cd $CPANHOME/.cpan/build/Digest\-MD5\-2.31
\&  make install
.Ve
.Sp
Some distributions may fail some tests, but you may want to install them
anyway (as above, or via \f(CW\*(C`force install\*(C'\fR command of \f(CW\*(C`CPAN.pm\*(C'\fR shell-mode).
.Sp
Since this procedure may take quite a long time to complete, it makes sense
to \*(L"freeze\*(R" your \s-1CPAN\s0 configuration by disabling periodic updates of the
local copy of \s-1CPAN\s0 index: set \f(CW\*(C`index_expire\*(C'\fR to some big value (I use 365),
then save the settings
.Sp
.Vb 2
\&  CPAN> o conf index_expire 365
\&  CPAN> o conf commit
.Ve
.Sp
Reset back to the default value \f(CW1\fR when you are finished.
.IP "5." 4
When satisfied with the results, rerun the \f(CW\*(C`installcmd\*(C'\fR target.  Now you
can copy \f(CW\*(C`perl5.8.2.exe\*(C'\fR to \f(CW\*(C`perl.exe\*(C'\fR, and install the other OMF-build
executables: \f(CW\*(C`perl_\|_.exe\*(C'\fR etc.  They are ready to be used.
.IP "6." 4
Change to the \f(CW\*(C`./pod\*(C'\fR directory of the build tree, download the Perl logo
\&\fICamelGrayBig.BMP\fR, and run
.Sp
.Vb 2
\&  ( perl2ipf > perl.ipf ) |& tee 00ipf
\&  ipfc /INF perl.ipf |& tee 00inf
.Ve
.Sp
This produces the Perl docs online book \f(CW\*(C`perl.INF\*(C'\fR.  Install in on
\&\f(CW\*(C`BOOKSHELF\*(C'\fR path.
.IP "7." 4
Now is the time to build statically linked executable \fIperl_.exe\fR which
includes newly-installed via \f(CW\*(C`Bundle::OS2_default\*(C'\fR modules.  Doing testing
via \f(CW\*(C`CPAN.pm\*(C'\fR is going to be painfully slow, since it statically links
a new executable per \s-1XS\s0 extension.
.Sp
Here is a possible workaround: create a toplevel \fIMakefile.PL\fR in
\&\fI\f(CI$CPANHOME\fI/.cpan/build/\fR with contents being (compare with \*(L"Making
executables with a custom collection of statically loaded extensions\*(R")
.Sp
.Vb 2
\&  use ExtUtils::MakeMaker;
\&  WriteMakefile NAME => \*(Aqdummy\*(Aq;
.Ve
.Sp
execute this as
.Sp
.Vb 2
\&  perl_5.8.2.exe Makefile.PL <nul |& tee 00aout_c1
\&  make \-k all test <nul |& 00aout_t1
.Ve
.Sp
Again, this procedure should not be absolutely smooth.  Some \f(CW\*(C`Makefile.PL\*(C'\fR's
in subdirectories may be buggy, and would not run as \*(L"child\*(R" scripts.  The
interdependency of modules can strike you; however, since non-XS modules
are already installed, the prerequisites of most modules have a very good
chance to be present.
.Sp
If you discover some glitches, move directories of problematic modules to a
different location; if these modules are non-XS modules, you may just ignore
them \- they are already installed; the remaining, \s-1XS,\s0 modules you need to
install manually one by one.
.Sp
After each such removal you need to rerun the \f(CW\*(C`Makefile.PL\*(C'\fR/\f(CW\*(C`make\*(C'\fR process;
usually this procedure converges soon.  (But be sure to convert all the
necessary external C libraries from \fI.lib\fR format to \fI.a\fR format: run one of
.Sp
.Vb 2
\&  emxaout foo.lib
\&  emximp \-o foo.a foo.lib
.Ve
.Sp
whichever is appropriate.)  Also, make sure that the DLLs for external
libraries are usable with with executables compiled without \f(CW\*(C`\-Zmtd\*(C'\fR options.
.Sp
When you are sure that only a few subdirectories
lead to failures, you may want to add \f(CW\*(C`\-j4\*(C'\fR option to \f(CW\*(C`make\*(C'\fR to speed up
skipping subdirectories with already finished build.
.Sp
When you are satisfied with the results of tests, install the build C libraries
for extensions:
.Sp
.Vb 1
\&  make install |& tee 00aout_i
.Ve
.Sp
Now you can rename the file \fI./perl.exe\fR generated during the last phase
to \fIperl_5.8.2.exe\fR; place it on \f(CW\*(C`PATH\*(C'\fR; if there is an inter-dependency
between some \s-1XS\s0 modules, you may need to repeat the \f(CW\*(C`test\*(C'\fR/\f(CW\*(C`install\*(C'\fR loop
with this new executable and some excluded modules \- until the procedure
converges.
.Sp
Now you have all the necessary \fI.a\fR libraries for these Perl modules in the
places where Perl builder can find it.  Use the perl builder: change to an
empty directory, create a \*(L"dummy\*(R" \fIMakefile.PL\fR again, and run
.Sp
.Vb 2
\&  perl_5.8.2.exe Makefile.PL |& tee 00c
\&  make perl                  |& tee 00p
.Ve
.Sp
This should create an executable \fI./perl.exe\fR with all the statically loaded
extensions built in.  Compare the generated \fIperlmain.c\fR files to make sure
that during the iterations the number of loaded extensions only increases.
Rename \fI./perl.exe\fR to \fIperl_5.8.2.exe\fR on \f(CW\*(C`PATH\*(C'\fR.
.Sp
When it converges, you got a functional variant of \fIperl_5.8.2.exe\fR; copy it
to \f(CW\*(C`perl_.exe\*(C'\fR.  You are done with generation of the local Perl installation.
.IP "8." 4
Make sure that the installed modules are actually installed in the location
of the new Perl, and are not inherited from entries of \f(CW@INC\fR given for
inheritance from the older versions of Perl: set \f(CW\*(C`PERLLIB_582_PREFIX\*(C'\fR to
redirect the new version of Perl to a new location, and copy the installed
files to this new location.  Redo the tests to make sure that the versions of
modules inherited from older versions of Perl are not needed.
.Sp
Actually, the log output of \fIpod2ipf\fR\|(1) during the step 6 gives a very detailed
info about which modules are loaded from which place; so you may use it as
an additional verification tool.
.Sp
Check that some temporary files did not make into the perl install tree.
Run something like this
.Sp
.Vb 1
\&  pfind . \-f "!(/\e.(pm|pl|ix|al|h|a|lib|txt|pod|imp|bs|dll|ld|bs|inc|xbm|yml|cgi|uu|e2x|skip|packlist|eg|cfg|html|pub|enc|all|ini|po|pot)$/i or /^\ew+$/") | less
.Ve
.Sp
in the install tree (both top one and \fIsitelib\fR one).
.Sp
Compress all the DLLs with \fIlxlite\fR.  The tiny \fI.exe\fR can be compressed with
\&\f(CW\*(C`/c:max\*(C'\fR (the bug only appears when there is a fixup in the last 6 bytes of a
page (?); since the tiny executables are much smaller than a page, the bug
will not hit).  Do not compress \f(CW\*(C`perl_.exe\*(C'\fR \- it would not work under \s-1DOS.\s0
.IP "9." 4
Now you can generate the binary distribution.  This is done by running the
test of the \s-1CPAN\s0 distribution \f(CW\*(C`OS2::SoftInstaller\*(C'\fR.  Tune up the file
\&\fItest.pl\fR to suit the layout of current version of Perl first.  Do not
forget to pack the necessary external DLLs accordingly.  Include the
description of the bugs and test suite failures you could not fix.  Include
the small-stack versions of Perl executables from Perl build directory.
.Sp
Include \fIperl5.def\fR so that people can relink the perl \s-1DLL\s0 preserving
the binary compatibility, or can create compatibility DLLs.  Include the diff
files (\f(CW\*(C`diff \-pu old new\*(C'\fR) of fixes you did so that people can rebuild your
version.  Include \fIperl5.map\fR so that one can use remote debugging.
.IP "10." 4
Share what you did with the other people.  Relax.  Enjoy fruits of your work.
.IP "11." 4
Brace yourself for thanks, bug reports, hate mail and spam coming as result
of the previous step.  No good deed should remain unpunished!
.SH "Building custom \fI.EXE\fP files"
.IX Header "Building custom .EXE files"
The Perl executables can be easily rebuilt at any moment.  Moreover, one can
use the \fIembedding\fR interface (see perlembed) to make very customized
executables.
.SS "Making executables with a custom collection of statically loaded extensions"
.IX Subsection "Making executables with a custom collection of statically loaded extensions"
It is a little bit easier to do so while \fIdecreasing\fR the list of statically
loaded extensions.  We discuss this case only here.
.IP "1." 4
Change to an empty directory, and create a placeholder <Makefile.PL>:
.Sp
.Vb 2
\&  use ExtUtils::MakeMaker;
\&  WriteMakefile NAME => \*(Aqdummy\*(Aq;
.Ve
.IP "2." 4
Run it with the flavor of Perl (\fIperl.exe\fR or \fIperl_.exe\fR) you want to
rebuild.
.Sp
.Vb 1
\&  perl_ Makefile.PL
.Ve
.IP "3." 4
Ask it to create new Perl executable:
.Sp
.Vb 1
\&  make perl
.Ve
.Sp
(you may need to manually add \f(CW\*(C`PERLTYPE=\-DPERL_CORE\*(C'\fR to this commandline on
some versions of Perl; the symptom is that the command-line globbing does not
work from \s-1OS/2\s0 shells with the newly-compiled executable; check with
.Sp
.Vb 1
\&  .\eperl.exe \-wle "print for @ARGV" *
.Ve
.Sp
).
.IP "4." 4
The previous step created \fIperlmain.c\fR which contains a list of \fInewXS()\fR calls
near the end.  Removing unnecessary calls, and rerunning
.Sp
.Vb 1
\&  make perl
.Ve
.Sp
will produce a customized executable.
.SS "Making executables with a custom search-paths"
.IX Subsection "Making executables with a custom search-paths"
The default perl executable is flexible enough to support most usages.
However, one may want something yet more flexible; for example, one may want
to find Perl \s-1DLL\s0 relatively to the location of the \s-1EXE\s0 file; or one may want
to ignore the environment when setting the Perl-library search patch, etc.
.PP
If you fill comfortable with \fIembedding\fR interface (see perlembed), such
things are easy to do repeating the steps outlined in \*(L"Making
executables with a custom collection of statically loaded extensions\*(R", and
doing more comprehensive edits to \fImain()\fR of \fIperlmain.c\fR.  The people with
little desire to understand Perl can just rename \fImain()\fR, and do necessary
modification in a custom \fImain()\fR which calls the renamed function in appropriate
time.
.PP
However, there is a third way: perl \s-1DLL\s0 exports the \fImain()\fR function and several
callbacks to customize the search path.  Below is a complete example of a
\&\*(L"Perl loader\*(R" which
.IP "1." 4
Looks for Perl \s-1DLL\s0 in the directory \f(CW\*(C`$exedir/../dll\*(C'\fR;
.IP "2." 4
Prepends the above directory to \f(CW\*(C`BEGINLIBPATH\*(C'\fR;
.IP "3." 4
Fails if the Perl \s-1DLL\s0 found via \f(CW\*(C`BEGINLIBPATH\*(C'\fR is different from what was
loaded on step 1; e.g., another process could have loaded it from \f(CW\*(C`LIBPATH\*(C'\fR
or from a different value of \f(CW\*(C`BEGINLIBPATH\*(C'\fR.  In these cases one needs to
modify the setting of the system so that this other process either does not
run, or loads the \s-1DLL\s0 from \f(CW\*(C`BEGINLIBPATH\*(C'\fR with \f(CW\*(C`LIBPATHSTRICT=T\*(C'\fR (available
with kernels after September 2000).
.IP "4." 4
Loads Perl library from \f(CW\*(C`$exedir/../dll/lib/\*(C'\fR.
.IP "5." 4
Uses Bourne shell from \f(CW\*(C`$exedir/../dll/sh/ksh.exe\*(C'\fR.
.PP
For best results compile the C file below with the same options as the Perl
\&\s-1DLL. \s0 However, a lot of functionality will work even if the executable is not
an \s-1EMX\s0 applications, e.g., if compiled with
.PP
.Vb 1
\&  gcc \-Wall \-DDOSISH \-DOS2=1 \-O2 \-s \-Zomf \-Zsys perl\-starter.c \-DPERL_DLL_BASENAME=\e"perl312F\e" \-Zstack 8192 \-Zlinker /PM:VIO
.Ve
.PP
Here is the sample C file:
.PP
.Vb 5
\&  #define INCL_DOS
\&  #define INCL_NOPM
\&  /* These are needed for compile if os2.h includes os2tk.h, not os2emx.h */
\&  #define INCL_DOSPROCESS
\&  #include <os2.h>
\&
\&  #include "EXTERN.h"
\&  #define PERL_IN_MINIPERLMAIN_C
\&  #include "perl.h"
\&
\&  static char *me;
\&  HMODULE handle;
\&
\&  static void
\&  die_with(char *msg1, char *msg2, char *msg3, char *msg4)
\&  {
\&     ULONG c;
\&     char *s = " error: ";
\&
\&     DosWrite(2, me, strlen(me), &c);
\&     DosWrite(2, s, strlen(s), &c);
\&     DosWrite(2, msg1, strlen(msg1), &c);
\&     DosWrite(2, msg2, strlen(msg2), &c);
\&     DosWrite(2, msg3, strlen(msg3), &c);
\&     DosWrite(2, msg4, strlen(msg4), &c);
\&     DosWrite(2, "\er\en", 2, &c);
\&     exit(255);
\&  }
\&
\&  typedef ULONG (*fill_extLibpath_t)(int type, char *pre, char *post, int replace, char *msg);
\&  typedef int (*main_t)(int type, char *argv[], char *env[]);
\&  typedef int (*handler_t)(void* data, int which);
\&
\&  #ifndef PERL_DLL_BASENAME
\&  #  define PERL_DLL_BASENAME "perl"
\&  #endif
\&
\&  static HMODULE
\&  load_perl_dll(char *basename)
\&  {
\&      char buf[300], fail[260];
\&      STRLEN l, dirl;
\&      fill_extLibpath_t f;
\&      ULONG rc_fullname;
\&      HMODULE handle, handle1;
\&
\&      if (_execname(buf, sizeof(buf) \- 13) != 0)
\&          die_with("Can\*(Aqt find full path: ", strerror(errno), "", "");
\&      /* XXXX Fill \*(Aqme\*(Aq with new value */
\&      l = strlen(buf);
\&      while (l && buf[l\-1] != \*(Aq/\*(Aq && buf[l\-1] != \*(Aq\e\e\*(Aq)
\&          l\-\-;
\&      dirl = l \- 1;
\&      strcpy(buf + l, basename);
\&      l += strlen(basename);
\&      strcpy(buf + l, ".dll");
\&      if ( (rc_fullname = DosLoadModule(fail, sizeof fail, buf, &handle)) != 0
\&           && DosLoadModule(fail, sizeof fail, basename, &handle) != 0 )
\&          die_with("Can\*(Aqt load DLL ", buf, "", "");
\&      if (rc_fullname)
\&          return handle;                /* was loaded with short name; all is fine */
\&      if (DosQueryProcAddr(handle, 0, "fill_extLibpath", (PFN*)&f))
\&          die_with(buf, ": DLL exports no symbol ", "fill_extLibpath", "");
\&      buf[dirl] = 0;
\&      if (f(0 /*BEGINLIBPATH*/, buf /* prepend */, NULL /* append */,
\&            0 /* keep old value */, me))
\&          die_with(me, ": prepending BEGINLIBPATH", "", "");
\&      if (DosLoadModule(fail, sizeof fail, basename, &handle1) != 0)
\&          die_with(me, ": finding perl DLL again via BEGINLIBPATH", "", "");
\&      buf[dirl] = \*(Aq\e\e\*(Aq;     
\&      if (handle1 != handle) {
\&          if (DosQueryModuleName(handle1, sizeof(fail), fail))
\&              strcpy(fail, "???");
\&          die_with(buf, ":\en\etperl DLL via BEGINLIBPATH is different: \en\et",
\&                   fail,
\&                   "\en\etYou may need to manipulate global BEGINLIBPATH and LIBPATHSTRICT"
\&                   "\en\etso that the other copy is loaded via BEGINLIBPATH.");
\&      }
\&      return handle;
\&  }
\&
\&  int
\&  main(int argc, char **argv, char **env)
\&  {
\&      main_t f;
\&      handler_t h;
\&
\&      me = argv[0];
\&      /**/
\&      handle = load_perl_dll(PERL_DLL_BASENAME);
\&
\&      if (DosQueryProcAddr(handle, 0, "Perl_OS2_handler_install", (PFN*)&h))
\&          die_with(PERL_DLL_BASENAME, ": DLL exports no symbol ", "Perl_OS2_handler_install", "");
\&      if ( !h((void *)"~installprefix", Perlos2_handler_perllib_from)
\&           || !h((void *)"~dll", Perlos2_handler_perllib_to)
\&           || !h((void *)"~dll/sh/ksh.exe", Perlos2_handler_perl_sh) )
\&          die_with(PERL_DLL_BASENAME, ": Can\*(Aqt install @INC manglers", "", "");
\&
\&      if (DosQueryProcAddr(handle, 0, "dll_perlmain", (PFN*)&f))
\&          die_with(PERL_DLL_BASENAME, ": DLL exports no symbol ", "dll_perlmain", "");
\&      return f(argc, argv, env);
\&  }
.Ve
.SH "Build FAQ"
.IX Header "Build FAQ"
.ie n .SS "Some ""/"" became ""\e"" in pdksh."
.el .SS "Some \f(CW/\fP became \f(CW\e\fP in pdksh."
.IX Subsection "Some / became in pdksh."
You have a very old pdksh. See \*(L"Prerequisites\*(R".
.ie n .SS "\*(Aqerrno\*(Aq \- unresolved external"
.el .SS "\f(CW\*(Aqerrno\*(Aq\fP \- unresolved external"
.IX Subsection "errno - unresolved external"
You do not have MT-safe \fIdb.lib\fR. See \*(L"Prerequisites\*(R".
.SS "Problems with tr or sed"
.IX Subsection "Problems with tr or sed"
reported with very old version of tr and sed.
.SS "Some problem (forget which ;\-)"
.IX Subsection "Some problem (forget which ;-)"
You have an older version of \fIperl.dll\fR on your \s-1LIBPATH,\s0 which
broke the build of extensions.
.SS "Library ... not found"
.IX Subsection "Library ... not found"
You did not run \f(CW\*(C`omflibs\*(C'\fR. See \*(L"Prerequisites\*(R".
.SS "Segfault in make"
.IX Subsection "Segfault in make"
You use an old version of \s-1GNU\s0 make. See \*(L"Prerequisites\*(R".
.SS "op/sprintf test failure"
.IX Subsection "op/sprintf test failure"
This can result from a bug in emx sprintf which was fixed in 0.9d fix 03.
.SH "Specific (mis)features of OS/2 port"
.IX Header "Specific (mis)features of OS/2 port"
.ie n .SS """setpriority"", ""getpriority"""
.el .SS "\f(CWsetpriority\fP, \f(CWgetpriority\fP"
.IX Subsection "setpriority, getpriority"
Note that these functions are compatible with *nix, not with the older
ports of '94 \- 95. The priorities are absolute, go from 32 to \-95,
lower is quicker. 0 is the default priority.
.PP
\&\fB\s-1WARNING\s0\fR.  Calling \f(CW\*(C`getpriority\*(C'\fR on a non-existing process could lock
the system before Warp3 fixpak22.  Starting with Warp3, Perl will use
a workaround: it aborts \fIgetpriority()\fR if the process is not present.
This is not possible on older versions \f(CW\*(C`2.*\*(C'\fR, and has a race
condition anyway.
.ie n .SS """system()"""
.el .SS "\f(CWsystem()\fP"
.IX Subsection "system()"
Multi-argument form of \f(CW\*(C`system()\*(C'\fR allows an additional numeric
argument. The meaning of this argument is described in
OS2::Process.
.PP
When finding a program to run, Perl first asks the \s-1OS\s0 to look for executables
on \f(CW\*(C`PATH\*(C'\fR (\s-1OS/2\s0 adds extension \fI.exe\fR if no extension is present).
If not found, it looks for a script with possible extensions 
added in this order: no extension, \fI.cmd\fR, \fI.btm\fR, 
\&\fI.bat\fR, \fI.pl\fR.  If found, Perl checks the start of the file for magic
strings \f(CW"#!"\fR and \f(CW"extproc "\fR.  If found, Perl uses the rest of the
first line as the beginning of the command line to run this script.  The
only mangling done to the first line is extraction of arguments (currently
up to 3), and ignoring of the path-part of the \*(L"interpreter\*(R" name if it can't
be found using the full path.
.PP
E.g., \f(CW\*(C`system \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq, \*(Aqbaz\*(Aq\*(C'\fR may lead Perl to finding
\&\fIC:/emx/bin/foo.cmd\fR with the first line being
.PP
.Vb 1
\& extproc /bin/bash    \-x   \-c
.Ve
.PP
If \fI/bin/bash.exe\fR is not found, then Perl looks for an executable \fIbash.exe\fR on
\&\f(CW\*(C`PATH\*(C'\fR.  If found in \fIC:/emx.add/bin/bash.exe\fR, then the above \fIsystem()\fR is
translated to
.PP
.Vb 1
\&  system qw(C:/emx.add/bin/bash.exe \-x \-c C:/emx/bin/foo.cmd bar baz)
.Ve
.PP
One additional translation is performed: instead of \fI/bin/sh\fR Perl uses
the hardwired-or-customized shell (see \f(CW"PERL_SH_DIR"\fR).
.PP
The above search for \*(L"interpreter\*(R" is recursive: if \fIbash\fR executable is not
found, but \fIbash.btm\fR is found, Perl will investigate its first line etc.
The only hardwired limit on the recursion depth is implicit: there is a limit
4 on the number of additional arguments inserted before the actual arguments
given to \fIsystem()\fR.  In particular, if no additional arguments are specified
on the \*(L"magic\*(R" first lines, then the limit on the depth is 4.
.PP
If Perl finds that the found executable is of \s-1PM\s0 type when the
current session is not, it will start the new process in a separate session of
necessary type.  Call via \f(CW\*(C`OS2::Process\*(C'\fR to disable this magic.
.PP
\&\fB\s-1WARNING\s0\fR.  Due to the described logic, you need to explicitly
specify \fI.com\fR extension if needed.  Moreover, if the executable
\&\fIperl5.6.1\fR is requested, Perl will not look for \fIperl5.6.1.exe\fR.
[This may change in the future.]
.ie n .SS """extproc"" on the first line"
.el .SS "\f(CWextproc\fP on the first line"
.IX Subsection "extproc on the first line"
If the first chars of a Perl script are \f(CW"extproc "\fR, this line is treated
as \f(CW\*(C`#!\*(C'\fR\-line, thus all the switches on this line are processed (twice
if script was started via cmd.exe).  See \*(L"\s-1DESCRIPTION\*(R"\s0 in perlrun.
.SS "Additional modules:"
.IX Subsection "Additional modules:"
OS2::Process, \s-1OS2::DLL\s0, \s-1OS2::REXX\s0, OS2::PrfDB, OS2::ExtAttr. These
modules provide access to additional numeric argument for \f(CW\*(C`system\*(C'\fR
and to the information about the running process,
to DLLs having functions with \s-1REXX\s0 signature and to the \s-1REXX\s0 runtime, to
\&\s-1OS/2\s0 databases in the \fI.INI\fR format, and to Extended Attributes.
.PP
Two additional extensions by Andreas Kaiser, \f(CW\*(C`OS2::UPM\*(C'\fR, and
\&\f(CW\*(C`OS2::FTP\*(C'\fR, are included into \f(CW\*(C`ILYAZ\*(C'\fR directory, mirrored on \s-1CPAN.\s0
Other OS/2\-related extensions are available too.
.SS "Prebuilt methods:"
.IX Subsection "Prebuilt methods:"
.ie n .IP """File::Copy::syscopy""" 4
.el .IP "\f(CWFile::Copy::syscopy\fR" 4
.IX Item "File::Copy::syscopy"
used by \f(CW\*(C`File::Copy::copy\*(C'\fR, see File::Copy.
.ie n .IP """DynaLoader::mod2fname""" 4
.el .IP "\f(CWDynaLoader::mod2fname\fR" 4
.IX Item "DynaLoader::mod2fname"
used by \f(CW\*(C`DynaLoader\*(C'\fR for \s-1DLL\s0 name mangling.
.ie n .IP """Cwd::current_drive()""" 4
.el .IP "\f(CWCwd::current_drive()\fR" 4
.IX Item "Cwd::current_drive()"
Self explanatory.
.ie n .IP """Cwd::sys_chdir(name)""" 4
.el .IP "\f(CWCwd::sys_chdir(name)\fR" 4
.IX Item "Cwd::sys_chdir(name)"
leaves drive as it is.
.ie n .IP """Cwd::change_drive(name)""" 4
.el .IP "\f(CWCwd::change_drive(name)\fR" 4
.IX Item "Cwd::change_drive(name)"
changes the \*(L"current\*(R" drive.
.ie n .IP """Cwd::sys_is_absolute(name)""" 4
.el .IP "\f(CWCwd::sys_is_absolute(name)\fR" 4
.IX Item "Cwd::sys_is_absolute(name)"
means has drive letter and is_rooted.
.ie n .IP """Cwd::sys_is_rooted(name)""" 4
.el .IP "\f(CWCwd::sys_is_rooted(name)\fR" 4
.IX Item "Cwd::sys_is_rooted(name)"
means has leading \f(CW\*(C`[/\e\e]\*(C'\fR (maybe after a drive-letter:).
.ie n .IP """Cwd::sys_is_relative(name)""" 4
.el .IP "\f(CWCwd::sys_is_relative(name)\fR" 4
.IX Item "Cwd::sys_is_relative(name)"
means changes with current dir.
.ie n .IP """Cwd::sys_cwd(name)""" 4
.el .IP "\f(CWCwd::sys_cwd(name)\fR" 4
.IX Item "Cwd::sys_cwd(name)"
Interface to cwd from \s-1EMX.\s0 Used by \f(CW\*(C`Cwd::cwd\*(C'\fR.
.ie n .IP """Cwd::sys_abspath(name, dir)""" 4
.el .IP "\f(CWCwd::sys_abspath(name, dir)\fR" 4
.IX Item "Cwd::sys_abspath(name, dir)"
Really really odious function to implement. Returns absolute name of
file which would have \f(CW\*(C`name\*(C'\fR if \s-1CWD\s0 were \f(CW\*(C`dir\*(C'\fR.  \f(CW\*(C`Dir\*(C'\fR defaults to the
current dir.
.ie n .IP """Cwd::extLibpath([type])""" 4
.el .IP "\f(CWCwd::extLibpath([type])\fR" 4
.IX Item "Cwd::extLibpath([type])"
Get current value of extended library search path. If \f(CW\*(C`type\*(C'\fR is
present and positive, works with \f(CW\*(C`END_LIBPATH\*(C'\fR, if negative, works
with \f(CW\*(C`LIBPATHSTRICT\*(C'\fR, otherwise with \f(CW\*(C`BEGIN_LIBPATH\*(C'\fR.
.ie n .IP """Cwd::extLibpath_set( path [, type ] )""" 4
.el .IP "\f(CWCwd::extLibpath_set( path [, type ] )\fR" 4
.IX Item "Cwd::extLibpath_set( path [, type ] )"
Set current value of extended library search path. If \f(CW\*(C`type\*(C'\fR is
present and positive, works with <\s-1END_LIBPATH\s0>, if negative, works
with \f(CW\*(C`LIBPATHSTRICT\*(C'\fR, otherwise with \f(CW\*(C`BEGIN_LIBPATH\*(C'\fR.
.ie n .IP """OS2::Error(do_harderror,do_exception)""" 4
.el .IP "\f(CWOS2::Error(do_harderror,do_exception)\fR" 4
.IX Item "OS2::Error(do_harderror,do_exception)"
Returns	\f(CW\*(C`undef\*(C'\fR if it was not called yet, otherwise bit 1 is
set if on the previous call do_harderror was enabled, bit
2 is set if on previous call do_exception was enabled.
.Sp
This function enables/disables error popups associated with 
hardware errors (Disk not ready etc.) and software exceptions.
.Sp
I know of no way to find out the state of popups \fIbefore\fR the first call
to this function.
.ie n .IP """OS2::Errors2Drive(drive)""" 4
.el .IP "\f(CWOS2::Errors2Drive(drive)\fR" 4
.IX Item "OS2::Errors2Drive(drive)"
Returns \f(CW\*(C`undef\*(C'\fR if it was not called yet, otherwise return false if errors
were not requested to be written to a hard drive, or the drive letter if
this was requested.
.Sp
This function may redirect error popups associated with hardware errors
(Disk not ready etc.) and software exceptions to the file \s-1POPUPLOG.OS2\s0 at
the root directory of the specified drive.  Overrides \fIOS2::Error()\fR specified
by individual programs.  Given argument undef will disable redirection.
.Sp
Has global effect, persists after the application exits.
.Sp
I know of no way to find out the state of redirection of popups to the disk
\&\fIbefore\fR the first call to this function.
.IP "\fIOS2::SysInfo()\fR" 4
.IX Item "OS2::SysInfo()"
Returns a hash with system information. The keys of the hash are
.Sp
.Vb 8
\&        MAX_PATH_LENGTH, MAX_TEXT_SESSIONS, MAX_PM_SESSIONS,
\&        MAX_VDM_SESSIONS, BOOT_DRIVE, DYN_PRI_VARIATION,
\&        MAX_WAIT, MIN_SLICE, MAX_SLICE, PAGE_SIZE,
\&        VERSION_MAJOR, VERSION_MINOR, VERSION_REVISION,
\&        MS_COUNT, TIME_LOW, TIME_HIGH, TOTPHYSMEM, TOTRESMEM,
\&        TOTAVAILMEM, MAXPRMEM, MAXSHMEM, TIMER_INTERVAL,
\&        MAX_COMP_LENGTH, FOREGROUND_FS_SESSION,
\&        FOREGROUND_PROCESS
.Ve
.IP "\fIOS2::BootDrive()\fR" 4
.IX Item "OS2::BootDrive()"
Returns a letter without colon.
.ie n .IP """OS2::MorphPM(serve)"", ""OS2::UnMorphPM(serve)""" 4
.el .IP "\f(CWOS2::MorphPM(serve)\fR, \f(CWOS2::UnMorphPM(serve)\fR" 4
.IX Item "OS2::MorphPM(serve), OS2::UnMorphPM(serve)"
Transforms the current application into a \s-1PM\s0 application and back.
The argument true means that a real message loop is going to be served.
\&\fIOS2::MorphPM()\fR returns the \s-1PM\s0 message queue handle as an integer.
.Sp
See \*(L"Centralized management of resources\*(R" for additional details.
.ie n .IP """OS2::Serve_Messages(force)""" 4
.el .IP "\f(CWOS2::Serve_Messages(force)\fR" 4
.IX Item "OS2::Serve_Messages(force)"
Fake on-demand retrieval of outstanding \s-1PM\s0 messages.  If \f(CW\*(C`force\*(C'\fR is false,
will not dispatch messages if a real message loop is known to
be present.  Returns number of messages retrieved.
.Sp
Dies with \*(L"QUITing...\*(R" if \s-1WM_QUIT\s0 message is obtained.
.ie n .IP """OS2::Process_Messages(force [, cnt])""" 4
.el .IP "\f(CWOS2::Process_Messages(force [, cnt])\fR" 4
.IX Item "OS2::Process_Messages(force [, cnt])"
Retrieval of \s-1PM\s0 messages until window creation/destruction.  
If \f(CW\*(C`force\*(C'\fR is false, will not dispatch messages if a real message loop
is known to be present.
.Sp
Returns change in number of windows.  If \f(CW\*(C`cnt\*(C'\fR is given,
it is incremented by the number of messages retrieved.
.Sp
Dies with \*(L"QUITing...\*(R" if \s-1WM_QUIT\s0 message is obtained.
.ie n .IP """OS2::_control87(new,mask)""" 4
.el .IP "\f(CWOS2::_control87(new,mask)\fR" 4
.IX Item "OS2::_control87(new,mask)"
the same as \fI_control87\fR\|(3) of \s-1EMX. \s0 Takes integers as arguments, returns
the previous coprocessor control word as an integer.  Only bits in \f(CW\*(C`new\*(C'\fR which
are present in \f(CW\*(C`mask\*(C'\fR are changed in the control word.
.IP "\fIOS2::get_control87()\fR" 4
.IX Item "OS2::get_control87()"
gets the coprocessor control word as an integer.
.ie n .IP """OS2::set_control87_em(new=MCW_EM,mask=MCW_EM)""" 4
.el .IP "\f(CWOS2::set_control87_em(new=MCW_EM,mask=MCW_EM)\fR" 4
.IX Item "OS2::set_control87_em(new=MCW_EM,mask=MCW_EM)"
The variant of \fIOS2::_control87()\fR with default values good for
handling exception mask: if no \f(CW\*(C`mask\*(C'\fR, uses exception mask part of \f(CW\*(C`new\*(C'\fR
only.  If no \f(CW\*(C`new\*(C'\fR, disables all the floating point exceptions.
.Sp
See \*(L"Misfeatures\*(R" for details.
.ie n .IP """OS2::DLLname([how [, \e&xsub]])""" 4
.el .IP "\f(CWOS2::DLLname([how [, \e&xsub]])\fR" 4
.IX Item "OS2::DLLname([how [, &xsub]])"
Gives the information about the Perl \s-1DLL\s0 or the \s-1DLL\s0 containing the C
function bound to by \f(CW&xsub\fR.  The meaning of \f(CW\*(C`how\*(C'\fR is: default (2):
full name; 0: handle; 1: module name.
.PP
(Note that some of these may be moved to different libraries \-
eventually).
.SS "Prebuilt variables:"
.IX Subsection "Prebuilt variables:"
.ie n .IP "$OS2::emx_rev" 4
.el .IP "\f(CW$OS2::emx_rev\fR" 4
.IX Item "$OS2::emx_rev"
numeric value is the same as _emx_rev of \s-1EMX,\s0 a string value the same
as _emx_vprt (similar to \f(CW\*(C`0.9c\*(C'\fR).
.ie n .IP "$OS2::emx_env" 4
.el .IP "\f(CW$OS2::emx_env\fR" 4
.IX Item "$OS2::emx_env"
same as _emx_env of \s-1EMX,\s0 a number similar to 0x8001.
.ie n .IP "$OS2::os_ver" 4
.el .IP "\f(CW$OS2::os_ver\fR" 4
.IX Item "$OS2::os_ver"
a number \f(CW\*(C`OS_MAJOR + 0.001 * OS_MINOR\*(C'\fR.
.ie n .IP "$OS2::is_aout" 4
.el .IP "\f(CW$OS2::is_aout\fR" 4
.IX Item "$OS2::is_aout"
true if the Perl library was compiled in \s-1AOUT\s0 format.
.ie n .IP "$OS2::can_fork" 4
.el .IP "\f(CW$OS2::can_fork\fR" 4
.IX Item "$OS2::can_fork"
true if the current executable is an \s-1AOUT EMX\s0 executable, so Perl can
fork.  Do not use this, use the portable check for
\&\f(CW$Config::Config\fR{dfork}.
.ie n .IP "$OS2::nsyserror" 4
.el .IP "\f(CW$OS2::nsyserror\fR" 4
.IX Item "$OS2::nsyserror"
This variable (default is 1) controls whether to enforce the contents
of $^E to start with \f(CW\*(C`SYS0003\*(C'\fR\-like id.  If set to 0, then the string
value of $^E is what is available from the \s-1OS/2\s0 message file.  (Some
messages in this file have an \f(CW\*(C`SYS0003\*(C'\fR\-like id prepended, some not.)
.SS "Misfeatures"
.IX Subsection "Misfeatures"
.IP "\(bu" 4
Since \fIflock\fR\|(3) is present in \s-1EMX,\s0 but is not functional, it is 
emulated by perl.  To disable the emulations, set environment variable
\&\f(CW\*(C`USE_PERL_FLOCK=0\*(C'\fR.
.IP "\(bu" 4
Here is the list of things which may be \*(L"broken\*(R" on
\&\s-1EMX \s0(from \s-1EMX\s0 docs):
.RS 4
.IP "\(bu" 4
The functions \fIrecvmsg\fR\|(3), \fIsendmsg\fR\|(3), and \fIsocketpair\fR\|(3) are not
implemented.
.IP "\(bu" 4
\&\fIsock_init\fR\|(3) is not required and not implemented.
.IP "\(bu" 4
\&\fIflock\fR\|(3) is not yet implemented (dummy function).  (Perl has a workaround.)
.IP "\(bu" 4
\&\fIkill\fR\|(3):  Special treatment of PID=0, PID=1 and PID=\-1 is not implemented.
.IP "\(bu" 4
\&\fIwaitpid\fR\|(3):
.Sp
.Vb 3
\&      WUNTRACED
\&              Not implemented.
\&      waitpid() is not implemented for negative values of PID.
.Ve
.RE
.RS 4
.Sp
Note that \f(CW\*(C`kill \-9\*(C'\fR does not work with the current version of \s-1EMX.\s0
.RE
.IP "\(bu" 4
See \*(L"Text-mode filehandles\*(R".
.IP "\(bu" 4
Unix-domain sockets on \s-1OS/2\s0 live in a pseudo-file-system \f(CW\*(C`/sockets/...\*(C'\fR.
To avoid a failure to create a socket with a name of a different form,
\&\f(CW"/socket/"\fR is prepended to the socket name (unless it starts with this
already).
.Sp
This may lead to problems later in case the socket is accessed via the
\&\*(L"usual\*(R" file-system calls using the \*(L"initial\*(R" name.
.IP "\(bu" 4
Apparently, \s-1IBM\s0 used a compiler (for some period of time around '95?) which
changes \s-1FP\s0 mask right and left.  This is not \fIthat\fR bad for \s-1IBM\s0's
programs, but the same compiler was used for DLLs which are used with
general-purpose applications.  When these DLLs are used, the state of
floating-point flags in the application is not predictable.
.Sp
What is much worse, some DLLs change the floating point flags when in
\&\fI_DLLInitTerm()\fR (e.g., \fI\s-1TCP32IP\s0\fR).  This means that even if you do not \fIcall\fR
any function in the \s-1DLL,\s0 just the act of loading this \s-1DLL\s0 will reset your
flags.  What is worse, the same compiler was used to compile some \s-1HOOK\s0 DLLs.
Given that \s-1HOOK\s0 dlls are executed in the context of \fIall\fR the applications
in the system, this means a complete unpredictability of floating point
flags on systems using such \s-1HOOK\s0 DLLs.  E.g., \fI\s-1GAMESRVR.DLL\s0\fR of \fB\s-1DIVE\s0\fR
origin changes the floating point flags on each write to the \s-1TTY\s0 of a \s-1VIO
\&\s0(windowed text-mode) applications.
.Sp
Some other (not completely debugged) situations when \s-1FP\s0 flags change include
some video drivers (?), and some operations related to creation of the windows.
People who code \fBOpenGL\fR may have more experience on this.
.Sp
Perl is generally used in the situation when all the floating-point
exceptions are ignored, as is the default under \s-1EMX. \s0 If they are not ignored,
some benign Perl programs would get a \f(CW\*(C`SIGFPE\*(C'\fR and would die a horrible death.
.Sp
To circumvent this, Perl uses two hacks.  They help against \fIone\fR type of
damage only: \s-1FP\s0 flags changed when loading a \s-1DLL.\s0
.Sp
One of the hacks is to disable floating point exceptions on Perl startup (as
is the default with \s-1EMX\s0).  This helps only with compile-time-linked DLLs
changing the flags before \fImain()\fR had a chance to be called.
.Sp
The other hack is to restore \s-1FP\s0 flags after a call to \fIdlopen()\fR.  This helps
against similar damage done by DLLs \fI_DLLInitTerm()\fR at runtime.  Currently
no way to switch these hacks off is provided.
.SS "Modifications"
.IX Subsection "Modifications"
Perl modifies some standard C library calls in the following ways:
.ie n .IP """popen""" 9
.el .IP "\f(CWpopen\fR" 9
.IX Item "popen"
\&\f(CW\*(C`my_popen\*(C'\fR uses \fIsh.exe\fR if shell is required, cf. \*(L"\s-1PERL_SH_DIR\*(R"\s0.
.ie n .IP """tmpnam""" 9
.el .IP "\f(CWtmpnam\fR" 9
.IX Item "tmpnam"
is created using \f(CW\*(C`TMP\*(C'\fR or \f(CW\*(C`TEMP\*(C'\fR environment variable, via
\&\f(CW\*(C`tempnam\*(C'\fR.
.ie n .IP """tmpfile""" 9
.el .IP "\f(CWtmpfile\fR" 9
.IX Item "tmpfile"
If the current directory is not writable, file is created using modified
\&\f(CW\*(C`tmpnam\*(C'\fR, so there may be a race condition.
.ie n .IP """ctermid""" 9
.el .IP "\f(CWctermid\fR" 9
.IX Item "ctermid"
a dummy implementation.
.ie n .IP """stat""" 9
.el .IP "\f(CWstat\fR" 9
.IX Item "stat"
\&\f(CW\*(C`os2_stat\*(C'\fR special-cases \fI/dev/tty\fR and \fI/dev/con\fR.
.ie n .IP """mkdir"", ""rmdir""" 9
.el .IP "\f(CWmkdir\fR, \f(CWrmdir\fR" 9
.IX Item "mkdir, rmdir"
these \s-1EMX\s0 functions do not work if the path contains a trailing \f(CW\*(C`/\*(C'\fR.
Perl contains a workaround for this.
.ie n .IP """flock""" 9
.el .IP "\f(CWflock\fR" 9
.IX Item "flock"
Since \fIflock\fR\|(3) is present in \s-1EMX,\s0 but is not functional, it is 
emulated by perl.  To disable the emulations, set environment variable
\&\f(CW\*(C`USE_PERL_FLOCK=0\*(C'\fR.
.SS "Identifying DLLs"
.IX Subsection "Identifying DLLs"
All the DLLs built with the current versions of Perl have \s-1ID\s0 strings
identifying the name of the extension, its version, and the version
of Perl required for this \s-1DLL. \s0 Run \f(CW\*(C`bldlevel DLL\-name\*(C'\fR to find this
info.
.SS "Centralized management of resources"
.IX Subsection "Centralized management of resources"
Since to call certain \s-1OS/2 API\s0 one needs to have a correctly initialized
\&\f(CW\*(C`Win\*(C'\fR subsystem, OS/2\-specific extensions may require getting \f(CW\*(C`HAB\*(C'\fRs and
\&\f(CW\*(C`HMQ\*(C'\fRs.  If an extension would do it on its own, another extension could
fail to initialize.
.PP
Perl provides a centralized management of these resources:
.ie n .IP """HAB""" 4
.el .IP "\f(CWHAB\fR" 4
.IX Item "HAB"
To get the \s-1HAB,\s0 the extension should call \f(CW\*(C`hab = perl_hab_GET()\*(C'\fR in C.  After
this call is performed, \f(CW\*(C`hab\*(C'\fR may be accessed as \f(CW\*(C`Perl_hab\*(C'\fR.  There is
no need to release the \s-1HAB\s0 after it is used.
.Sp
If by some reasons \fIperl.h\fR cannot be included, use
.Sp
.Vb 1
\&  extern int Perl_hab_GET(void);
.Ve
.Sp
instead.
.ie n .IP """HMQ""" 4
.el .IP "\f(CWHMQ\fR" 4
.IX Item "HMQ"
There are two cases:
.RS 4
.IP "\(bu" 4
the extension needs an \f(CW\*(C`HMQ\*(C'\fR only because some \s-1API\s0 will not work otherwise.
Use \f(CW\*(C`serve = 0\*(C'\fR below.
.IP "\(bu" 4
the extension needs an \f(CW\*(C`HMQ\*(C'\fR since it wants to engage in a \s-1PM\s0 event loop.
Use \f(CW\*(C`serve = 1\*(C'\fR below.
.RE
.RS 4
.Sp
To get an \f(CW\*(C`HMQ\*(C'\fR, the extension should call \f(CW\*(C`hmq = perl_hmq_GET(serve)\*(C'\fR in C.
After this call is performed, \f(CW\*(C`hmq\*(C'\fR may be accessed as \f(CW\*(C`Perl_hmq\*(C'\fR.
.Sp
To signal to Perl that \s-1HMQ\s0 is not needed any more, call
\&\f(CW\*(C`perl_hmq_UNSET(serve)\*(C'\fR.  Perl process will automatically morph/unmorph itself
into/from a \s-1PM\s0 process if \s-1HMQ\s0 is needed/not\-needed.  Perl will automatically
enable/disable \f(CW\*(C`WM_QUIT\*(C'\fR message during shutdown if the message queue is
served/not\-served.
.Sp
\&\fB\s-1NOTE\s0\fR.  If during a shutdown there is a message queue which did not disable
\&\s-1WM_QUIT,\s0 and which did not process the received \s-1WM_QUIT\s0 message, the
shutdown will be automatically cancelled.  Do not call \f(CWperl_hmq_GET(1)\fR
unless you are going to process messages on an orderly basis.
.RE
.IP "Treating errors reported by \s-1OS/2 API\s0" 4
.IX Item "Treating errors reported by OS/2 API"
There are two principal conventions (it is useful to call them \f(CW\*(C`Dos*\*(C'\fR
and \f(CW\*(C`Win*\*(C'\fR \- though this part of the function signature is not always
determined by the name of the \s-1API\s0) of reporting the error conditions
of \s-1OS/2 API. \s0 Most of \f(CW\*(C`Dos*\*(C'\fR APIs report the error code as the result
of the call (so 0 means success, and there are many types of errors).
Most of \f(CW\*(C`Win*\*(C'\fR \s-1API\s0 report success/fail via the result being
\&\f(CW\*(C`TRUE\*(C'\fR/\f(CW\*(C`FALSE\*(C'\fR; to find the reason for the failure one should call
\&\fIWinGetLastError()\fR \s-1API.\s0
.Sp
Some \f(CW\*(C`Win*\*(C'\fR entry points also overload a \*(L"meaningful\*(R" return value
with the error indicator; having a 0 return value indicates an error.
Yet some other \f(CW\*(C`Win*\*(C'\fR entry points overload things even more, and 0
return value may mean a successful call returning a valid value 0, as
well as an error condition; in the case of a 0 return value one should
call \fIWinGetLastError()\fR \s-1API\s0 to distinguish a successful call from a
failing one.
.Sp
By convention, all the calls to \s-1OS/2 API\s0 should indicate their
failures by resetting $^E.  All the Perl-accessible functions which
call \s-1OS/2 API\s0 may be broken into two classes: some \fIdie()\fRs when an \s-1API\s0
error is encountered, the other report the error via a false return
value (of course, this does not concern Perl-accessible functions
which \fIexpect\fR a failure of the \s-1OS/2 API\s0 call, having some workarounds
coded).
.Sp
Obviously, in the situation of the last type of the signature of an \s-1OS/2
API,\s0 it is must more convenient for the users if the failure is
indicated by \fIdie()\fRing: one does not need to check $^E to know that
something went wrong.  If, however, this solution is not desirable by
some reason, the code in question should reset $^E to 0 before making
this \s-1OS/2 API\s0 call, so that the caller of this Perl-accessible
function has a chance to distinguish a success\-but\-0\-return value from
a failure.  (One may return undef as an alternative way of reporting
an error.)
.Sp
The macros to simplify this type of error propagation are
.RS 4
.ie n .IP """CheckOSError(expr)""" 4
.el .IP "\f(CWCheckOSError(expr)\fR" 4
.IX Item "CheckOSError(expr)"
Returns true on error, sets $^E.  Expects \fIexpr()\fR be a call of
\&\f(CW\*(C`Dos*\*(C'\fR\-style \s-1API.\s0
.ie n .IP """CheckWinError(expr)""" 4
.el .IP "\f(CWCheckWinError(expr)\fR" 4
.IX Item "CheckWinError(expr)"
Returns true on error, sets $^E.  Expects \fIexpr()\fR be a call of
\&\f(CW\*(C`Win*\*(C'\fR\-style \s-1API.\s0
.ie n .IP """SaveWinError(expr)""" 4
.el .IP "\f(CWSaveWinError(expr)\fR" 4
.IX Item "SaveWinError(expr)"
Returns \f(CW\*(C`expr\*(C'\fR, sets $^E from \fIWinGetLastError()\fR if \f(CW\*(C`expr\*(C'\fR is false.
.ie n .IP """SaveCroakWinError(expr,die,name1,name2)""" 4
.el .IP "\f(CWSaveCroakWinError(expr,die,name1,name2)\fR" 4
.IX Item "SaveCroakWinError(expr,die,name1,name2)"
Returns \f(CW\*(C`expr\*(C'\fR, sets $^E from \fIWinGetLastError()\fR if \f(CW\*(C`expr\*(C'\fR is false,
and \fIdie()\fRs if \f(CW\*(C`die\*(C'\fR and $^E are true.  The message to die is the
concatenated strings \f(CW\*(C`name1\*(C'\fR and \f(CW\*(C`name2\*(C'\fR, separated by \f(CW": "\fR from
the contents of $^E.
.ie n .IP """WinError_2_Perl_rc""" 4
.el .IP "\f(CWWinError_2_Perl_rc\fR" 4
.IX Item "WinError_2_Perl_rc"
Sets \f(CW\*(C`Perl_rc\*(C'\fR to the return value of \fIWinGetLastError()\fR.
.ie n .IP """FillWinError""" 4
.el .IP "\f(CWFillWinError\fR" 4
.IX Item "FillWinError"
Sets \f(CW\*(C`Perl_rc\*(C'\fR to the return value of \fIWinGetLastError()\fR, and sets $^E
to the corresponding value.
.ie n .IP """FillOSError(rc)""" 4
.el .IP "\f(CWFillOSError(rc)\fR" 4
.IX Item "FillOSError(rc)"
Sets \f(CW\*(C`Perl_rc\*(C'\fR to \f(CW\*(C`rc\*(C'\fR, and sets $^E to the corresponding value.
.RE
.RS 4
.RE
.IP "Loading DLLs and ordinals in DLLs" 4
.IX Item "Loading DLLs and ordinals in DLLs"
Some DLLs are only present in some versions of \s-1OS/2,\s0 or in some
configurations of \s-1OS/2. \s0 Some exported entry points are present only
in DLLs shipped with some versions of \s-1OS/2. \s0 If these DLLs and entry
points were linked directly for a Perl executable/DLL or from a Perl
extensions, this binary would work only with the specified
versions/setups.  Even if these entry points were not needed, the
\&\fIload\fR of the executable (or \s-1DLL\s0) would fail.
.Sp
For example, many newer useful APIs are not present in \s-1OS/2\s0 v2; many
PM-related APIs require DLLs not available on floppy-boot setup.
.Sp
To make these calls fail \fIonly when the calls are executed\fR, one
should call these \s-1API\s0 via a dynamic linking \s-1API. \s0 There is a subsystem
in Perl to simplify such type of calls.  A large number of entry
points available for such linking is provided (see \f(CW\*(C`entries_ordinals\*(C'\fR
\&\- and also \f(CW\*(C`PMWIN_entries\*(C'\fR \- in \fIos2ish.h\fR).  These ordinals can be
accessed via the APIs:
.Sp
.Vb 6
\&  CallORD(), DeclFuncByORD(), DeclVoidFuncByORD(),
\&  DeclOSFuncByORD(), DeclWinFuncByORD(), AssignFuncPByORD(),
\&  DeclWinFuncByORD_CACHE(), DeclWinFuncByORD_CACHE_survive(),
\&  DeclWinFuncByORD_CACHE_resetError_survive(),
\&  DeclWinFunc_CACHE(), DeclWinFunc_CACHE_resetError(),
\&  DeclWinFunc_CACHE_survive(), DeclWinFunc_CACHE_resetError_survive()
.Ve
.Sp
See the header files and the C code in the supplied OS/2\-related
modules for the details on usage of these functions.
.Sp
Some of these functions also combine dynaloading semantic with the
error-propagation semantic discussed above.
.SH "Perl flavors"
.IX Header "Perl flavors"
Because of idiosyncrasies of \s-1OS/2\s0 one cannot have all the eggs in the
same basket (though \s-1EMX\s0 environment tries hard to overcome this
limitations, so the situation may somehow improve). There are 4
executables for Perl provided by the distribution:
.SS "\fIperl.exe\fP"
.IX Subsection "perl.exe"
The main workhorse. This is a chimera executable: it is compiled as an
\&\f(CW\*(C`a.out\*(C'\fR\-style executable, but is linked with \f(CW\*(C`omf\*(C'\fR\-style dynamic
library \fIperl.dll\fR, and with dynamic \s-1CRT DLL.\s0 This executable is a
\&\s-1VIO\s0 application.
.PP
It can load perl dynamic extensions, and it can \fIfork()\fR.
.PP
\&\fBNote.\fR Keep in mind that \fIfork()\fR is needed to open a pipe to yourself.
.SS "\fIperl_.exe\fP"
.IX Subsection "perl_.exe"
This is a statically linked \f(CW\*(C`a.out\*(C'\fR\-style executable. It cannot
load dynamic Perl extensions. The executable supplied in binary
distributions has a lot of extensions prebuilt, thus the above restriction is 
important only if you use custom-built extensions. This executable is a \s-1VIO\s0
application.
.PP
\&\fIThis is the only executable with does not require \s-1OS/2.\s0\fR The
friends locked into \f(CW\*(C`M$\*(C'\fR world would appreciate the fact that this
executable runs under \s-1DOS,\s0 Win0.3*, Win0.95 and WinNT with an
appropriate extender. See \*(L"Other OSes\*(R".
.SS "\fIperl_\|_.exe\fP"
.IX Subsection "perl__.exe"
This is the same executable as \fIperl_\|_\|_.exe\fR, but it is a \s-1PM\s0
application.
.PP
\&\fBNote.\fR Usually (unless explicitly redirected during the startup)
\&\s-1STDIN, STDERR,\s0 and \s-1STDOUT\s0 of a \s-1PM\s0
application are redirected to \fInul\fR. However, it is possible to \fIsee\fR
them if you start \f(CW\*(C`perl_\|_.exe\*(C'\fR from a \s-1PM\s0 program which emulates a
console window, like \fIShell mode\fR of Emacs or \s-1EPM.\s0 Thus it \fIis
possible\fR to use Perl debugger (see perldebug) to debug your \s-1PM\s0
application (but beware of the message loop lockups \- this will not
work if you have a message queue to serve, unless you hook the serving
into the \fIgetc()\fR function of the debugger).
.PP
Another way to see the output of a \s-1PM\s0 program is to run it as
.PP
.Vb 1
\&  pm_prog args 2>&1 | cat \-
.Ve
.PP
with a shell \fIdifferent\fR from \fIcmd.exe\fR, so that it does not create
a link between a \s-1VIO\s0 session and the session of \f(CW\*(C`pm_porg\*(C'\fR.  (Such a link
closes the \s-1VIO\s0 window.)  E.g., this works with \fIsh.exe\fR \- or with Perl!
.PP
.Vb 2
\&  open P, \*(Aqpm_prog args 2>&1 |\*(Aq or die;
\&  print while <P>;
.Ve
.PP
The flavor \fIperl_\|_.exe\fR is required if you want to start your program without
a \s-1VIO\s0 window present, but not \f(CW\*(C`detach\*(C'\fRed (run \f(CW\*(C`help detach\*(C'\fR for more info).
Very useful for extensions which use \s-1PM,\s0 like \f(CW\*(C`Perl/Tk\*(C'\fR or \f(CW\*(C`OpenGL\*(C'\fR.
.PP
Note also that the differences between \s-1PM\s0 and \s-1VIO\s0 executables are only
in the \fIdefault\fR behaviour.  One can start \fIany\fR executable in
\&\fIany\fR kind of session by using the arguments \f(CW\*(C`/fs\*(C'\fR, \f(CW\*(C`/pm\*(C'\fR or
\&\f(CW\*(C`/win\*(C'\fR switches of the command \f(CW\*(C`start\*(C'\fR (of \fI\s-1CMD.EXE\s0\fR or a similar
shell).  Alternatively, one can use the numeric first argument of the
\&\f(CW\*(C`system\*(C'\fR Perl function (see OS2::Process).
.SS "\fIperl_\|_\|_.exe\fP"
.IX Subsection "perl___.exe"
This is an \f(CW\*(C`omf\*(C'\fR\-style executable which is dynamically linked to
\&\fIperl.dll\fR and \s-1CRT DLL. I\s0 know no advantages of this executable
over \f(CW\*(C`perl.exe\*(C'\fR, but it cannot \fIfork()\fR at all. Well, one advantage is
that the build process is not so convoluted as with \f(CW\*(C`perl.exe\*(C'\fR.
.PP
It is a \s-1VIO\s0 application.
.SS "Why strange names?"
.IX Subsection "Why strange names?"
Since Perl processes the \f(CW\*(C`#!\*(C'\fR\-line (cf. 
\&\*(L"\s-1DESCRIPTION\*(R"\s0 in perlrun, \*(L"Command Switches\*(R" in perlrun,
\&\*(L"No Perl script found in input\*(R" in perldiag), it should know when a
program \fIis a Perl\fR. There is some naming convention which allows
Perl to distinguish correct lines from wrong ones. The above names are
almost the only names allowed by this convention which do not contain
digits (which have absolutely different semantics).
.SS "Why dynamic linking?"
.IX Subsection "Why dynamic linking?"
Well, having several executables dynamically linked to the same huge
library has its advantages, but this would not substantiate the
additional work to make it compile. The reason is the complicated-to-developers
but very quick and convenient-to-users \*(L"hard\*(R" dynamic linking used by \s-1OS/2.\s0
.PP
There are two distinctive features of the dyna-linking model of \s-1OS/2:\s0
first, all the references to external functions are resolved at the compile time;
second, there is no runtime fixup of the DLLs after they are loaded into memory.
The first feature is an enormous advantage over other models: it avoids
conflicts when several DLLs used by an application export entries with
the same name.  In such cases \*(L"other\*(R" models of dyna-linking just choose
between these two entry points using some random criterion \- with predictable
disasters as results.  But it is the second feature which requires the build
of \fIperl.dll\fR.
.PP
The address tables of DLLs are patched only once, when they are
loaded. The addresses of the entry points into DLLs are guaranteed to be
the same for all the programs which use the same \s-1DLL. \s0 This removes the
runtime fixup \- once \s-1DLL\s0 is loaded, its code is read-only.
.PP
While this allows some (significant?) performance advantages, this makes life
much harder for developers, since the above scheme makes it impossible
for a \s-1DLL\s0 to be \*(L"linked\*(R" to a symbol in the \fI.EXE\fR file.  Indeed, this
would need a \s-1DLL\s0 to have different relocations tables for the
(different) executables which use this \s-1DLL.\s0
.PP
However, a dynamically loaded Perl extension is forced to use some symbols
from the perl
executable, e.g., to know how to find the arguments to the functions:
the arguments live on the perl
internal evaluation stack. The solution is to put the main code of
the interpreter into a \s-1DLL,\s0 and make the \fI.EXE\fR file which just loads
this \s-1DLL\s0 into memory and supplies command-arguments.  The extension \s-1DLL\s0
cannot link to symbols in \fI.EXE\fR, but it has no problem linking
to symbols in the \fI.DLL\fR.
.PP
This \fIgreatly\fR increases the load time for the application (as well as
complexity of the compilation). Since interpreter is in a \s-1DLL,\s0
the C \s-1RTL\s0 is basically forced to reside in a \s-1DLL\s0 as well (otherwise
extensions would not be able to use \s-1CRT\s0).  There are some advantages if
you use different flavors of perl, such as running \fIperl.exe\fR and
\&\fIperl_\|_.exe\fR simultaneously: they share the memory of \fIperl.dll\fR.
.PP
\&\fB\s-1NOTE\s0\fR.  There is one additional effect which makes DLLs more wasteful:
DLLs are loaded in the shared memory region, which is a scarse resource
given the 512M barrier of the \*(L"standard\*(R" \s-1OS/2\s0 virtual memory.  The code of
\&\fI.EXE\fR files is also shared by all the processes which use the particular
\&\fI.EXE\fR, but they are \*(L"shared in the private address space of the process\*(R";
this is possible because the address at which different sections
of the \fI.EXE\fR file are loaded is decided at compile-time, thus all the
processes have these sections loaded at same addresses, and no fixup
of internal links inside the \fI.EXE\fR is needed.
.PP
Since DLLs may be loaded at run time, to have the same mechanism for DLLs
one needs to have the address range of \fIany of the loaded\fR DLLs in the
system to be available \fIin all the processes\fR which did not load a particular
\&\s-1DLL\s0 yet.  This is why the DLLs are mapped to the shared memory region.
.SS "Why chimera build?"
.IX Subsection "Why chimera build?"
Current \s-1EMX\s0 environment does not allow DLLs compiled using Unixish
\&\f(CW\*(C`a.out\*(C'\fR format to export symbols for data (or at least some types of
data). This forces \f(CW\*(C`omf\*(C'\fR\-style compile of \fIperl.dll\fR.
.PP
Current \s-1EMX\s0 environment does not allow \fI.EXE\fR files compiled in
\&\f(CW\*(C`omf\*(C'\fR format to \fIfork()\fR. \fIfork()\fR is needed for exactly three Perl
operations:
.IP "\(bu" 4
explicit \fIfork()\fR in the script,
.IP "\(bu" 4
\&\f(CW\*(C`open FH, "|\-"\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`open FH, "\-|"\*(C'\fR, in other words, opening pipes to itself.
.PP
While these operations are not questions of life and death, they are
needed for a lot of
useful scripts. This forces \f(CW\*(C`a.out\*(C'\fR\-style compile of
\&\fIperl.exe\fR.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Here we list environment variables with are either \s-1OS/2\-\s0 and \s-1DOS\-\s0 and
Win*\-specific, or are more important under \s-1OS/2\s0 than under other OSes.
.ie n .SS """PERLLIB_PREFIX"""
.el .SS "\f(CWPERLLIB_PREFIX\fP"
.IX Subsection "PERLLIB_PREFIX"
Specific for \s-1EMX\s0 port. Should have the form
.PP
.Vb 1
\&  path1;path2
.Ve
.PP
or
.PP
.Vb 1
\&  path1 path2
.Ve
.PP
If the beginning of some prebuilt path matches \fIpath1\fR, it is
substituted with \fIpath2\fR.
.PP
Should be used if the perl library is moved from the default
location in preference to \f(CW\*(C`PERL(5)LIB\*(C'\fR, since this would not leave wrong
entries in \f(CW@INC\fR.  For example, if the compiled version of perl looks for \f(CW@INC\fR
in \fIf:/perllib/lib\fR, and you want to install the library in
\&\fIh:/opt/gnu\fR, do
.PP
.Vb 1
\&  set PERLLIB_PREFIX=f:/perllib/lib;h:/opt/gnu
.Ve
.PP
This will cause Perl with the prebuilt \f(CW@INC\fR of
.PP
.Vb 5
\&  f:/perllib/lib/5.00553/os2
\&  f:/perllib/lib/5.00553
\&  f:/perllib/lib/site_perl/5.00553/os2
\&  f:/perllib/lib/site_perl/5.00553
\&  .
.Ve
.PP
to use the following \f(CW@INC:\fR
.PP
.Vb 5
\&  h:/opt/gnu/5.00553/os2
\&  h:/opt/gnu/5.00553
\&  h:/opt/gnu/site_perl/5.00553/os2
\&  h:/opt/gnu/site_perl/5.00553
\&  .
.Ve
.ie n .SS """PERL_BADLANG"""
.el .SS "\f(CWPERL_BADLANG\fP"
.IX Subsection "PERL_BADLANG"
If 0, perl ignores \fIsetlocale()\fR failing. May be useful with some
strange \fIlocale\fRs.
.ie n .SS """PERL_BADFREE"""
.el .SS "\f(CWPERL_BADFREE\fP"
.IX Subsection "PERL_BADFREE"
If 0, perl would not warn of in case of unwarranted \fIfree()\fR. With older
perls this might be
useful in conjunction with the module DB_File, which was buggy when
dynamically linked and OMF-built.
.PP
Should not be set with newer Perls, since this may hide some \fIreal\fR problems.
.ie n .SS """PERL_SH_DIR"""
.el .SS "\f(CWPERL_SH_DIR\fP"
.IX Subsection "PERL_SH_DIR"
Specific for \s-1EMX\s0 port. Gives the directory part of the location for
\&\fIsh.exe\fR.
.ie n .SS """USE_PERL_FLOCK"""
.el .SS "\f(CWUSE_PERL_FLOCK\fP"
.IX Subsection "USE_PERL_FLOCK"
Specific for \s-1EMX\s0 port. Since \fIflock\fR\|(3) is present in \s-1EMX,\s0 but is not 
functional, it is emulated by perl.  To disable the emulations, set 
environment variable \f(CW\*(C`USE_PERL_FLOCK=0\*(C'\fR.
.ie n .SS """TMP"" or ""TEMP"""
.el .SS "\f(CWTMP\fP or \f(CWTEMP\fP"
.IX Subsection "TMP or TEMP"
Specific for \s-1EMX\s0 port. Used as storage place for temporary files.
.SH "Evolution"
.IX Header "Evolution"
Here we list major changes which could make you by surprise.
.SS "Text-mode filehandles"
.IX Subsection "Text-mode filehandles"
Starting from version 5.8, Perl uses a builtin translation layer for
text-mode files.  This replaces the efficient well-tested \s-1EMX\s0 layer by
some code which should be best characterized as a \*(L"quick hack\*(R".
.PP
In addition to possible bugs and an inability to follow changes to the
translation policy with off/on switches of \s-1TERMIO\s0 translation, this
introduces a serious incompatible change: before \fIsysread()\fR on
text-mode filehandles would go through the translation layer, now it
would not.
.SS "Priorities"
.IX Subsection "Priorities"
\&\f(CW\*(C`setpriority\*(C'\fR and \f(CW\*(C`getpriority\*(C'\fR are not compatible with earlier
ports by Andreas Kaiser. See \f(CW"setpriority, getpriority"\fR.
.SS "\s-1DLL\s0 name mangling: pre 5.6.2"
.IX Subsection "DLL name mangling: pre 5.6.2"
With the release 5.003_01 the dynamically loadable libraries
should be rebuilt when a different version of Perl is compiled. In particular,
DLLs (including \fIperl.dll\fR) are now created with the names
which contain a checksum, thus allowing workaround for \s-1OS/2\s0 scheme of
caching DLLs.
.PP
It may be possible to code a simple workaround which would
.IP "\(bu" 4
find the old DLLs looking through the old \f(CW@INC\fR;
.IP "\(bu" 4
mangle the names according to the scheme of new perl and copy the DLLs to
these names;
.IP "\(bu" 4
edit the internal \f(CW\*(C`LX\*(C'\fR tables of \s-1DLL\s0 to reflect the change of the name
(probably not needed for Perl extension DLLs, since the internally coded names
are not used for \*(L"specific\*(R" DLLs, they used only for \*(L"global\*(R" DLLs).
.IP "\(bu" 4
edit the internal \f(CW\*(C`IMPORT\*(C'\fR tables and change the name of the \*(L"old\*(R"
\&\fIperl????.dll\fR to the \*(L"new\*(R" \fIperl????.dll\fR.
.SS "\s-1DLL\s0 name mangling: 5.6.2 and beyond"
.IX Subsection "DLL name mangling: 5.6.2 and beyond"
In fact mangling of \fIextension\fR DLLs was done due to misunderstanding
of the \s-1OS/2\s0 dynaloading model.  \s-1OS/2 \s0(effectively) maintains two
different tables of loaded \s-1DLL:\s0
.IP "Global DLLs" 4
.IX Item "Global DLLs"
those loaded by the base name from \f(CW\*(C`LIBPATH\*(C'\fR; including those
associated at link time;
.IP "specific DLLs" 4
.IX Item "specific DLLs"
loaded by the full name.
.PP
When resolving a request for a global \s-1DLL,\s0 the table of already-loaded
specific DLLs is (effectively) ignored; moreover, specific DLLs are
\&\fIalways\fR loaded from the prescribed path.
.PP
There is/was a minor twist which makes this scheme fragile: what to do
with DLLs loaded from
.ie n .IP """BEGINLIBPATH"" and ""ENDLIBPATH""" 4
.el .IP "\f(CWBEGINLIBPATH\fR and \f(CWENDLIBPATH\fR" 4
.IX Item "BEGINLIBPATH and ENDLIBPATH"
(which depend on the process)
.ie n .IP "\fI.\fR from ""LIBPATH""" 4
.el .IP "\fI.\fR from \f(CWLIBPATH\fR" 4
.IX Item ". from LIBPATH"
which \fIeffectively\fR depends on the process (although \f(CW\*(C`LIBPATH\*(C'\fR is the
same for all the processes).
.PP
Unless \f(CW\*(C`LIBPATHSTRICT\*(C'\fR is set to \f(CW\*(C`T\*(C'\fR (and the kernel is after
2000/09/01), such DLLs are considered to be global.  When loading a
global \s-1DLL\s0 it is first looked in the table of already-loaded global
DLLs.  Because of this the fact that one executable loaded a \s-1DLL\s0 from
\&\f(CW\*(C`BEGINLIBPATH\*(C'\fR and \f(CW\*(C`ENDLIBPATH\*(C'\fR, or \fI.\fR from \f(CW\*(C`LIBPATH\*(C'\fR may affect
\&\fIwhich\fR \s-1DLL\s0 is loaded when \fIanother\fR executable requests a \s-1DLL\s0 with
the same name.  \fIThis\fR is the reason for version-specific mangling of
the \s-1DLL\s0 name for perl \s-1DLL.\s0
.PP
Since the Perl extension DLLs are always loaded with the full path,
there is no need to mangle their names in a version-specific ways:
their directory already reflects the corresponding version of perl,
and \f(CW@INC\fR takes into account binary compatibility with older version.
Starting from \f(CW5.6.2\fR the name mangling scheme is fixed to be the
same as for Perl 5.005_53 (same as in a popular binary release).  Thus
new Perls will be able to \fIresolve the names\fR of old extension DLLs
if \f(CW@INC\fR allows finding their directories.
.PP
However, this still does not guarantee that these \s-1DLL\s0 may be loaded.
The reason is the mangling of the name of the \fIPerl \s-1DLL\s0\fR.  And since
the extension DLLs link with the Perl \s-1DLL,\s0 extension DLLs for older
versions would load an older Perl \s-1DLL,\s0 and would most probably
segfault (since the data in this \s-1DLL\s0 is not properly initialized).
.PP
There is a partial workaround (which can be made complete with newer
\&\s-1OS/2\s0 kernels): create a forwarder \s-1DLL\s0 with the same name as the \s-1DLL\s0 of
the older version of Perl, which forwards the entry points to the
newer Perl's \s-1DLL. \s0 Make this \s-1DLL\s0 accessible on (say) the \f(CW\*(C`BEGINLIBPATH\*(C'\fR of
the new Perl executable.  When the new executable accesses old Perl's
extension DLLs, they would request the old Perl's \s-1DLL\s0 by name, get the
forwarder instead, so effectively will link with the currently running
(new) Perl \s-1DLL.\s0
.PP
This may break in two ways:
.IP "\(bu" 4
Old perl executable is started when a new executable is running has
loaded an extension compiled for the old executable (ouph!).  In this
case the old executable will get a forwarder \s-1DLL\s0 instead of the old
perl \s-1DLL,\s0 so would link with the new perl \s-1DLL. \s0 While not directly
fatal, it will behave the same as new executable.  This beats the whole
purpose of explicitly starting an old executable.
.IP "\(bu" 4
A new executable loads an extension compiled for the old executable
when an old perl executable is running.  In this case the extension
will not pick up the forwarder \- with fatal results.
.PP
With support for \f(CW\*(C`LIBPATHSTRICT\*(C'\fR this may be circumvented \- unless
one of DLLs is started from \fI.\fR from \f(CW\*(C`LIBPATH\*(C'\fR (I do not know
whether \f(CW\*(C`LIBPATHSTRICT\*(C'\fR affects this case).
.PP
\&\fB\s-1REMARK\s0\fR.  Unless newer kernels allow \fI.\fR in \f(CW\*(C`BEGINLIBPATH\*(C'\fR (older
do not), this mess cannot be completely cleaned.  (It turns out that
as of the beginning of 2002, \fI.\fR is not allowed, but \fI.\e.\fR is \- and
it has the same effect.)
.PP
\&\fB\s-1REMARK\s0\fR.  \f(CW\*(C`LIBPATHSTRICT\*(C'\fR, \f(CW\*(C`BEGINLIBPATH\*(C'\fR and \f(CW\*(C`ENDLIBPATH\*(C'\fR are
not environment variables, although \fIcmd.exe\fR emulates them on \f(CW\*(C`SET
\&...\*(C'\fR lines.  From Perl they may be accessed by
Cwd::extLibpath and
Cwd::extLibpath_set.
.SS "\s-1DLL\s0 forwarder generation"
.IX Subsection "DLL forwarder generation"
Assume that the old \s-1DLL\s0 is named \fIperlE0AC.dll\fR (as is one for
5.005_53), and the new version is 5.6.1.  Create a file
\&\fIperl5shim.def\-leader\fR with
.PP
.Vb 5
\&  LIBRARY \*(AqperlE0AC\*(Aq INITINSTANCE TERMINSTANCE
\&  DESCRIPTION \*(Aq@#perl5\-porters@perl.org:5.006001#@ Perl module for 5.00553 \-> Perl 5.6.1 forwarder\*(Aq
\&  CODE LOADONCALL
\&  DATA LOADONCALL NONSHARED MULTIPLE
\&  EXPORTS
.Ve
.PP
modifying the versions/names as needed.  Run
.PP
.Vb 1
\& perl \-wnle "next if 0../EXPORTS/; print qq(  \e"$1\e") if /\e"(\ew+)\e"/" perl5.def >lst
.Ve
.PP
in the Perl build directory (to make the \s-1DLL\s0 smaller replace perl5.def
with the definition file for the older version of Perl if present).
.PP
.Vb 2
\& cat perl5shim.def\-leader lst >perl5shim.def
\& gcc \-Zomf \-Zdll \-o perlE0AC.dll perl5shim.def \-s \-llibperl
.Ve
.PP
(ignore multiple \f(CW\*(C`warning L4085\*(C'\fR).
.SS "Threading"
.IX Subsection "Threading"
As of release 5.003_01 perl is linked to multithreaded C \s-1RTL
DLL. \s0 If perl itself is not compiled multithread-enabled, so will not be perl's
\&\fImalloc()\fR. However, extensions may use multiple thread on their own
risk.
.PP
This was needed to compile \f(CW\*(C`Perl/Tk\*(C'\fR for XFree86\-OS/2 out-of-the-box, and
link with DLLs for other useful libraries, which typically are compiled
with \f(CW\*(C`\-Zmt \-Zcrtdll\*(C'\fR.
.SS "Calls to external programs"
.IX Subsection "Calls to external programs"
Due to a popular demand the perl external program calling has been
changed wrt Andreas Kaiser's port.  \fIIf\fR perl needs to call an
external program \fIvia shell\fR, the \fIf:/bin/sh.exe\fR will be called, or
whatever is the override, see \*(L"\s-1PERL_SH_DIR\*(R"\s0.
.PP
Thus means that you need to get some copy of a \fIsh.exe\fR as well (I
use one from pdksh). The path \fIF:/bin\fR above is set up automatically during
the build to a correct value on the builder machine, but is
overridable at runtime,
.PP
\&\fBReasons:\fR a consensus on \f(CW\*(C`perl5\-porters\*(C'\fR was that perl should use
one non-overridable shell per platform. The obvious choices for \s-1OS/2\s0
are \fIcmd.exe\fR and \fIsh.exe\fR. Having perl build itself would be impossible
with \fIcmd.exe\fR as a shell, thus I picked up \f(CW\*(C`sh.exe\*(C'\fR. This assures almost
100% compatibility with the scripts coming from *nix. As an added benefit 
this works as well under \s-1DOS\s0 if you use DOS-enabled port of pdksh 
(see \*(L"Prerequisites\*(R").
.PP
\&\fBDisadvantages:\fR currently \fIsh.exe\fR of pdksh calls external programs
via \fIfork()\fR/\fIexec()\fR, and there is \fIno\fR functioning \fIexec()\fR on
\&\s-1OS/2.\s0 \fIexec()\fR is emulated by \s-1EMX\s0 by an asynchronous call while the caller
waits for child completion (to pretend that the \f(CW\*(C`pid\*(C'\fR did not change). This
means that 1 \fIextra\fR copy of \fIsh.exe\fR is made active via \fIfork()\fR/\fIexec()\fR,
which may lead to some resources taken from the system (even if we do
not count extra work needed for \fIfork()\fRing).
.PP
Note that this a lesser issue now when we do not spawn \fIsh.exe\fR
unless needed (metachars found).
.PP
One can always start \fIcmd.exe\fR explicitly via
.PP
.Vb 1
\&  system \*(Aqcmd\*(Aq, \*(Aq/c\*(Aq, \*(Aqmycmd\*(Aq, \*(Aqarg1\*(Aq, \*(Aqarg2\*(Aq, ...
.Ve
.PP
If you need to use \fIcmd.exe\fR, and do not want to hand-edit thousands of your
scripts, the long-term solution proposed on p5\-p is to have a directive
.PP
.Vb 1
\&  use OS2::Cmd;
.Ve
.PP
which will override \fIsystem()\fR, \fIexec()\fR, \f(CW\*(C`\`\`\*(C'\fR, and
\&\f(CW\*(C`open(,\*(Aq...|\*(Aq)\*(C'\fR. With current perl you may override only \fIsystem()\fR,
\&\fIreadpipe()\fR \- the explicit version of \f(CW\*(C`\`\`\*(C'\fR, and maybe \fIexec()\fR. The code
will substitute the one-argument call to \fIsystem()\fR by
\&\f(CW\*(C`CORE::system(\*(Aqcmd.exe\*(Aq, \*(Aq/c\*(Aq, shift)\*(C'\fR.
.PP
If you have some working code for \f(CW\*(C`OS2::Cmd\*(C'\fR, please send it to me,
I will include it into distribution. I have no need for such a module, so
cannot test it.
.PP
For the details of the current situation with calling external programs,
see \*(L"Starting \s-1OS/2 \s0(and \s-1DOS\s0) programs under Perl\*(R".  Set us mention a couple
of features:
.IP "\(bu" 4
External scripts may be called by their basename.  Perl will try the same
extensions as when processing \fB\-S\fR command-line switch.
.IP "\(bu" 4
External scripts starting with \f(CW\*(C`#!\*(C'\fR or \f(CW\*(C`extproc \*(C'\fR will be executed directly,
without calling the shell, by calling the program specified on the rest of
the first line.
.SS "Memory allocation"
.IX Subsection "Memory allocation"
Perl uses its own \fImalloc()\fR under \s-1OS/2 \-\s0 interpreters are usually malloc-bound
for speed, but perl is not, since its malloc is lightning-fast.
Perl-memory-usage-tuned benchmarks show that Perl's malloc is 5 times quicker
than \s-1EMX\s0 one.  I do not have convincing data about memory footprint, but
a (pretty random) benchmark showed that Perl's one is 5% better.
.PP
Combination of perl's \fImalloc()\fR and rigid \s-1DLL\s0 name resolution creates
a special problem with library functions which expect their return value to
be \fIfree()\fRd by system's \fIfree()\fR. To facilitate extensions which need to call 
such functions, system memory-allocation functions are still available with
the prefix \f(CW\*(C`emx_\*(C'\fR added. (Currently only \s-1DLL\s0 perl has this, it should 
propagate to \fIperl_.exe\fR shortly.)
.SS "Threads"
.IX Subsection "Threads"
One can build perl with thread support enabled by providing \f(CW\*(C`\-D usethreads\*(C'\fR
option to \fIConfigure\fR.  Currently \s-1OS/2\s0 support of threads is very 
preliminary.
.PP
Most notable problems:
.ie n .IP """COND_WAIT""" 4
.el .IP "\f(CWCOND_WAIT\fR" 4
.IX Item "COND_WAIT"
may have a race condition (but probably does not due to edge-triggered
nature of \s-1OS/2\s0 Event semaphores).  (Needs a reimplementation (in terms of chaining
waiting threads, with the linked list stored in per-thread structure?)?)
.IP "\fIos2.c\fR" 4
.IX Item "os2.c"
has a couple of static variables used in OS/2\-specific functions.  (Need to be
moved to per-thread structure, or serialized?)
.PP
Note that these problems should not discourage experimenting, since they
have a low probability of affecting small programs.
.SH "BUGS"
.IX Header "BUGS"
This description is not updated often (since 5.6.1?), see \fI./os2/Changes\fR
for more info.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ilya Zakharevich, cpan@ilyaz.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 1023:" 4
.IX Item "Around line 1023:"
Expected text after =item, not a number
                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlos25.16.1                                0100644 0001750 0001750 00000340342 12566207422 022644  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOS2 1"
.TH PERLOS2 1 "2013-03-06" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlos2 \- Perl under OS/2, DOS, Win0.3*, Win0.95 and WinNT.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
One can read this document in the following formats:
.PP
.Vb 4
\&        man perlos2
\&        view perl perlos2
\&        explorer perlos2.html
\&        info perlos2
.Ve
.PP
to list some (not all may be available simultaneously), or it may
be read \fIas is\fR: either as \fI\s-1README\s0.os2\fR, or \fIpod/perlos2.pod\fR.
.PP
To read the \fI.INF\fR version of documentation (\fBvery\fR recommended)
outside of \s-1OS/2\s0, one needs an \s-1IBM\s0's reader (may be available on \s-1IBM\s0
ftp sites (?)  (\s-1URL\s0 anyone?)) or shipped with \s-1PC\s0 \s-1DOS\s0 7.0 and \s-1IBM\s0's
Visual Age \*(C+ 3.5.
.PP
A copy of a Win* viewer is contained in the \*(L"Just add \s-1OS/2\s0 Warp\*(R" package
.PP
.Vb 1
\&  ftp://ftp.software.ibm.com/ps/products/os2/tools/jaow/jaow.zip
.Ve
.PP
in \fI?:\eJUST_ADD\eview.exe\fR. This gives one an access to \s-1EMX\s0's 
\&\fI.INF\fR docs as well (text form is available in \fI/emx/doc\fR in 
\&\s-1EMX\s0's distribution).  There is also a different viewer named xview.
.PP
Note that if you have \fIlynx.exe\fR or \fInetscape.exe\fR installed, you can follow \s-1WWW\s0 links
from this document in \fI.INF\fR format. If you have \s-1EMX\s0 docs installed 
correctly, you can follow library links (you need to have \f(CW\*(C`view emxbook\*(C'\fR
working by setting \f(CW\*(C`EMXBOOK\*(C'\fR environment variable as it is described
in \s-1EMX\s0 docs).
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Target"
.IX Subsection "Target"
The target is to make \s-1OS/2\s0 one of the best supported platform for
using/building/developing Perl and \fIPerl applications\fR, as well as
make Perl the best language to use under \s-1OS/2\s0. The secondary target is
to try to make this work under \s-1DOS\s0 and Win* as well (but not \fBtoo\fR hard).
.PP
The current state is quite close to this target. Known limitations:
.IP "\(bu" 5
Some *nix programs use \fIfork()\fR a lot; with the mostly useful flavors of
perl for \s-1OS/2\s0 (there are several built simultaneously) this is
supported; but some flavors do not support this (e.g., when Perl is
called from inside \s-1REXX\s0).  Using \fIfork()\fR after
\&\fIuse\fRing dynamically loading extensions would not work with \fIvery\fR old
versions of \s-1EMX\s0.
.IP "\(bu" 5
You need a separate perl executable \fIperl_\|_.exe\fR (see \*(L"perl_\|_.exe\*(R")
if you want to use \s-1PM\s0 code in your application (as Perl/Tk or OpenGL
Perl modules do) without having a text-mode window present.
.Sp
While using the standard \fIperl.exe\fR from a text-mode window is possible
too, I have seen cases when this causes degradation of the system stability.
Using \fIperl_\|_.exe\fR avoids such a degradation.
.IP "\(bu" 5
There is no simple way to access \s-1WPS\s0 objects. The only way I know
is via \f(CW\*(C`OS2::REXX\*(C'\fR and \f(CW\*(C`SOM\*(C'\fR extensions (see \s-1OS2::REXX\s0, \s-1SOM\s0).
However, we do not have access to
convenience methods of Object-REXX. (Is it possible at all? I know
of no Object-REXX \s-1API\s0.)  The \f(CW\*(C`SOM\*(C'\fR extension (currently in alpha-text)
may eventually remove this shortcoming; however, due to the fact that
\&\s-1DII\s0 is not supported by the \f(CW\*(C`SOM\*(C'\fR module, using \f(CW\*(C`SOM\*(C'\fR is not as
convenient as one would like it.
.PP
Please keep this list up-to-date by informing me about other items.
.SS "Other OSes"
.IX Subsection "Other OSes"
Since \s-1OS/2\s0 port of perl uses a remarkable \s-1EMX\s0 environment, it can
run (and build extensions, and \- possibly \- be built itself) under any
environment which can run \s-1EMX\s0. The current list is \s-1DOS\s0,
DOS\-inside\-OS/2, Win0.3*, Win0.95 and WinNT. Out of many perl flavors,
only one works, see \*(L"perl_.exe\*(R".
.PP
Note that not all features of Perl are available under these
environments. This depends on the features the \fIextender\fR \- most
probably \s-1RSX\s0 \- decided to implement.
.PP
Cf. \*(L"Prerequisites\*(R".
.SS "Prerequisites"
.IX Subsection "Prerequisites"
.IP "\s-1EMX\s0" 6
.IX Item "EMX"
\&\s-1EMX\s0 runtime is required (may be substituted by \s-1RSX\s0). Note that
it is possible to make \fIperl_.exe\fR to run under \s-1DOS\s0 without any
external support by binding \fIemx.exe\fR/\fIrsx.exe\fR to it, see \f(CW\*(C`emxbind\*(C'\fR. Note
that under \s-1DOS\s0 for best results one should use \s-1RSX\s0 runtime, which
has much more functions working (like \f(CW\*(C`fork\*(C'\fR, \f(CW\*(C`popen\*(C'\fR and so on). In
fact \s-1RSX\s0 is required if there is no \s-1VCPI\s0 present. Note the
\&\s-1RSX\s0 requires \s-1DPMI\s0.  Many implementations of \s-1DPMI\s0 are known to be very
buggy, beware!
.Sp
Only the latest runtime is supported, currently \f(CW\*(C`0.9d fix 03\*(C'\fR. Perl may run
under earlier versions of \s-1EMX\s0, but this is not tested.
.Sp
One can get different parts of \s-1EMX\s0 from, say
.Sp
.Vb 2
\&  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/emx+gcc/
\&  http://hobbes.nmsu.edu/h\-browse.php?dir=/pub/os2/dev/emx/v0.9d/
.Ve
.Sp
The runtime component should have the name \fIemxrt.zip\fR.
.Sp
\&\fB\s-1NOTE\s0\fR. When using \fIemx.exe\fR/\fIrsx.exe\fR, it is enough to have them on your path. One
does not need to specify them explicitly (though this
.Sp
.Vb 1
\&  emx perl_.exe \-de 0
.Ve
.Sp
will work as well.)
.IP "\s-1RSX\s0" 6
.IX Item "RSX"
To run Perl on \s-1DPMI\s0 platforms one needs \s-1RSX\s0 runtime. This is
needed under DOS\-inside\-OS/2, Win0.3*, Win0.95 and WinNT (see 
\&\*(L"Other OSes\*(R"). \s-1RSX\s0 would not work with \s-1VCPI\s0
only, as \s-1EMX\s0 would, it requires \s-1DMPI\s0.
.Sp
Having \s-1RSX\s0 and the latest \fIsh.exe\fR one gets a fully functional
\&\fB*nix\fR\-ish environment under \s-1DOS\s0, say, \f(CW\*(C`fork\*(C'\fR, \f(CW\*(C`\`\`\*(C'\fR and
pipe\-\f(CW\*(C`open\*(C'\fR work. In fact, MakeMaker works (for static build), so one
can have Perl development environment under \s-1DOS\s0.
.Sp
One can get \s-1RSX\s0 from, say
.Sp
.Vb 2
\&  http://cd.textfiles.com/hobbesos29804/disk1/EMX09C/
\&  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/emx+gcc/contrib/
.Ve
.Sp
Contact the author on \f(CW\*(C`rainer@mathematik.uni\-bielefeld.de\*(C'\fR.
.Sp
The latest \fIsh.exe\fR with \s-1DOS\s0 hooks is available in
.Sp
.Vb 1
\&  http://www.ilyaz.org/software/os2/
.Ve
.Sp
as \fIsh_dos.zip\fR or under similar names starting with \f(CW\*(C`sh\*(C'\fR, \f(CW\*(C`pdksh\*(C'\fR etc.
.IP "\s-1HPFS\s0" 6
.IX Item "HPFS"
Perl does not care about file systems, but the perl library contains
many files with long names, so to install it intact one needs a file
system which supports long file names.
.Sp
Note that if you do not plan to build the perl itself, it may be
possible to fool \s-1EMX\s0 to truncate file names. This is not supported,
read \s-1EMX\s0 docs to see how to do it.
.IP "pdksh" 6
.IX Item "pdksh"
To start external programs with complicated command lines (like with
pipes in between, and/or quoting of arguments), Perl uses an external
shell. With \s-1EMX\s0 port such shell should be named \fIsh.exe\fR, and located
either in the wired-in-during-compile locations (usually \fIF:/bin\fR),
or in configurable location (see \*(L"\s-1PERL_SH_DIR\s0\*(R").
.Sp
For best results use \s-1EMX\s0 pdksh. The standard binary (5.2.14 or later) runs
under \s-1DOS\s0 (with \*(L"\s-1RSX\s0\*(R") as well, see
.Sp
.Vb 1
\&  http://www.ilyaz.org/software/os2/
.Ve
.SS "Starting Perl programs under \s-1OS/2\s0 (and \s-1DOS\s0 and...)"
.IX Subsection "Starting Perl programs under OS/2 (and DOS and...)"
Start your Perl program \fIfoo.pl\fR with arguments \f(CW\*(C`arg1 arg2 arg3\*(C'\fR the
same way as on any other platform, by
.PP
.Vb 1
\&        perl foo.pl arg1 arg2 arg3
.Ve
.PP
If you want to specify perl options \f(CW\*(C`\-my_opts\*(C'\fR to the perl itself (as
opposed to your program), use
.PP
.Vb 1
\&        perl \-my_opts foo.pl arg1 arg2 arg3
.Ve
.PP
Alternately, if you use OS/2\-ish shell, like \s-1CMD\s0 or 4os2, put
the following at the start of your perl script:
.PP
.Vb 1
\&        extproc perl \-S \-my_opts
.Ve
.PP
rename your program to \fIfoo.cmd\fR, and start it by typing
.PP
.Vb 1
\&        foo arg1 arg2 arg3
.Ve
.PP
Note that because of stupid \s-1OS/2\s0 limitations the full path of the perl
script is not available when you use \f(CW\*(C`extproc\*(C'\fR, thus you are forced to
use \f(CW\*(C`\-S\*(C'\fR perl switch, and your script should be on the \f(CW\*(C`PATH\*(C'\fR. As a plus
side, if you know a full path to your script, you may still start it
with
.PP
.Vb 1
\&        perl ../../blah/foo.cmd arg1 arg2 arg3
.Ve
.PP
(note that the argument \f(CW\*(C`\-my_opts\*(C'\fR is taken care of by the \f(CW\*(C`extproc\*(C'\fR line
in your script, see "\f(CW\*(C`extproc\*(C'\fR on the first line").
.PP
To understand what the above \fImagic\fR does, read perl docs about \f(CW\*(C`\-S\*(C'\fR
switch \- see perlrun, and cmdref about \f(CW\*(C`extproc\*(C'\fR:
.PP
.Vb 4
\&        view perl perlrun
\&        man perlrun
\&        view cmdref extproc
\&        help extproc
.Ve
.PP
or whatever method you prefer.
.PP
There are also endless possibilities to use \fIexecutable extensions\fR of
4os2, \fIassociations\fR of \s-1WPS\s0 and so on... However, if you use
*nixish shell (like \fIsh.exe\fR supplied in the binary distribution),
you need to follow the syntax specified in \*(L"Command Switches\*(R" in perlrun.
.PP
Note that \fB\-S\fR switch supports scripts with additional extensions 
\&\fI.cmd\fR, \fI.btm\fR, \fI.bat\fR, \fI.pl\fR as well.
.SS "Starting \s-1OS/2\s0 (and \s-1DOS\s0) programs under Perl"
.IX Subsection "Starting OS/2 (and DOS) programs under Perl"
This is what \fIsystem()\fR (see \*(L"system\*(R" in perlfunc), \f(CW\*(C`\`\`\*(C'\fR (see
\&\*(L"I/O Operators\*(R" in perlop), and \fIopen pipe\fR (see \*(L"open\*(R" in perlfunc)
are for. (Avoid \fIexec()\fR (see \*(L"exec\*(R" in perlfunc) unless you know what you
do).
.PP
Note however that to use some of these operators you need to have a
sh-syntax shell installed (see \*(L"Pdksh\*(R", 
\&\*(L"Frequently asked questions\*(R"), and perl should be able to find it
(see \*(L"\s-1PERL_SH_DIR\s0\*(R").
.PP
The cases when the shell is used are:
.IP "1." 4
One-argument \fIsystem()\fR (see \*(L"system\*(R" in perlfunc), \fIexec()\fR (see \*(L"exec\*(R" in perlfunc)
with redirection or shell meta-characters;
.IP "2." 4
Pipe-open (see \*(L"open\*(R" in perlfunc) with the command which contains redirection 
or shell meta-characters;
.IP "3." 4
Backticks \f(CW\*(C`\`\`\*(C'\fR (see \*(L"I/O Operators\*(R" in perlop) with the command which contains
redirection or shell meta-characters;
.IP "4." 4
If the executable called by \fIsystem()\fR/\fIexec()\fR/pipe\-\fIopen()\fR/\f(CW\*(C`\`\`\*(C'\fR is a script
with the \*(L"magic\*(R" \f(CW\*(C`#!\*(C'\fR line or \f(CW\*(C`extproc\*(C'\fR line which specifies shell;
.IP "5." 4
If the executable called by \fIsystem()\fR/\fIexec()\fR/pipe\-\fIopen()\fR/\f(CW\*(C`\`\`\*(C'\fR is a script
without \*(L"magic\*(R" line, and \f(CW$ENV{EXECSHELL}\fR is set to shell;
.IP "6." 4
If the executable called by \fIsystem()\fR/\fIexec()\fR/pipe\-\fIopen()\fR/\f(CW\*(C`\`\`\*(C'\fR is not
found (is not this remark obsolete?);
.IP "7." 4
For globbing (see \*(L"glob\*(R" in perlfunc, \*(L"I/O Operators\*(R" in perlop)
(obsolete? Perl uses builtin globbing nowadays...).
.PP
For the sake of speed for a common case, in the above algorithms 
backslashes in the command name are not considered as shell metacharacters.
.PP
Perl starts scripts which begin with cookies
\&\f(CW\*(C`extproc\*(C'\fR or \f(CW\*(C`#!\*(C'\fR directly, without an intervention of shell.  Perl uses the
same algorithm to find the executable as \fIpdksh\fR: if the path
on \f(CW\*(C`#!\*(C'\fR line does not work, and contains \f(CW\*(C`/\*(C'\fR, then the directory
part of the executable is ignored, and the executable
is searched in \fI.\fR and on \f(CW\*(C`PATH\*(C'\fR.  To find arguments for these scripts
Perl uses a different algorithm than \fIpdksh\fR: up to 3 arguments are 
recognized, and trailing whitespace is stripped.
.PP
If a script
does not contain such a cooky, then to avoid calling \fIsh.exe\fR, Perl uses
the same algorithm as \fIpdksh\fR: if \f(CW$ENV{EXECSHELL}\fR is set, the
script is given as the first argument to this command, if not set, then
\&\f(CW\*(C`$ENV{COMSPEC} /c\*(C'\fR is used (or a hardwired guess if \f(CW$ENV{COMSPEC}\fR is
not set).
.PP
When starting scripts directly, Perl uses exactly the same algorithm as for 
the search of script given by \fB\-S\fR command-line option: it will look in
the current directory, then on components of \f(CW$ENV{PATH}\fR using the 
following order of appended extensions: no extension, \fI.cmd\fR, \fI.btm\fR, 
\&\fI.bat\fR, \fI.pl\fR.
.PP
Note that Perl will start to look for scripts only if \s-1OS/2\s0 cannot start the
specified application, thus \f(CW\*(C`system \*(Aqblah\*(Aq\*(C'\fR will not look for a script if 
there is an executable file \fIblah.exe\fR \fIanywhere\fR on \f(CW\*(C`PATH\*(C'\fR.  In
other words, \f(CW\*(C`PATH\*(C'\fR is essentially searched twice: once by the \s-1OS\s0 for
an executable, then by Perl for scripts.
.PP
Note also that executable files on \s-1OS/2\s0 can have an arbitrary extension, 
but \fI.exe\fR will be automatically appended if no dot is present in the name.  
The workaround is as simple as that:  since \fIblah.\fR and \fIblah\fR denote the 
same file (at list on \s-1FAT\s0 and \s-1HPFS\s0 file systems), to start an executable residing in file \fIn:/bin/blah\fR (no 
extension) give an argument \f(CW\*(C`n:/bin/blah.\*(C'\fR (dot appended) to \fIsystem()\fR.
.PP
Perl will start \s-1PM\s0 programs from \s-1VIO\s0 (=text\-mode) Perl process in a
separate \s-1PM\s0 session;
the opposite is not true: when you start a non-PM program from a \s-1PM\s0
Perl process, Perl would not run it in a separate session.  If a separate
session is desired, either ensure
that shell will be used, as in \f(CW\*(C`system \*(Aqcmd /c myprog\*(Aq\*(C'\fR, or start it using
optional arguments to \fIsystem()\fR documented in \f(CW\*(C`OS2::Process\*(C'\fR module.  This
is considered to be a feature.
.SH "Frequently asked questions"
.IX Header "Frequently asked questions"
.ie n .SS """It does not work"""
.el .SS "``It does not work''"
.IX Subsection "It does not work"
Perl binary distributions come with a \fItestperl.cmd\fR script which tries
to detect common problems with misconfigured installations.  There is a
pretty large chance it will discover which step of the installation you
managed to goof.  \f(CW\*(C`;\-)\*(C'\fR
.SS "I cannot run external programs"
.IX Subsection "I cannot run external programs"
.IP "\(bu" 4
Did you run your programs with \f(CW\*(C`\-w\*(C'\fR switch? See 
\&\*(L"Starting \s-1OS/2\s0 (and \s-1DOS\s0) programs under Perl\*(R".
.IP "\(bu" 4
Do you try to run \fIinternal\fR shell commands, like \f(CW\*(C`\`copy a b\`\*(C'\fR
(internal for \fIcmd.exe\fR), or \f(CW\*(C`\`glob a*b\`\*(C'\fR (internal for ksh)? You
need to specify your shell explicitly, like \f(CW\*(C`\`cmd /c copy a b\`\*(C'\fR,
since Perl cannot deduce which commands are internal to your shell.
.SS "I cannot embed perl into my program, or use \fIperl.dll\fP from my program."
.IX Subsection "I cannot embed perl into my program, or use perl.dll from my program."
.ie n .IP "Is your program EMX-compiled with ""\-Zmt \-Zcrtdll""?" 4
.el .IP "Is your program EMX-compiled with \f(CW\-Zmt \-Zcrtdll\fR?" 4
.IX Item "Is your program EMX-compiled with -Zmt -Zcrtdll?"
Well, nowadays Perl \s-1DLL\s0 should be usable from a differently compiled
program too...  If you can run Perl code from \s-1REXX\s0 scripts (see
\&\s-1OS2::REXX\s0), then there are some other aspect of interaction which
are overlooked by the current hackish code to support
differently-compiled principal programs.
.Sp
If everything else fails, you need to build a stand-alone \s-1DLL\s0 for
perl. Contact me, I did it once. Sockets would not work, as a lot of
other stuff.
.IP "Did you use ExtUtils::Embed?" 4
.IX Item "Did you use ExtUtils::Embed?"
Some time ago I had reports it does not work.  Nowadays it is checked
in the Perl test suite, so grep \fI./t\fR subdirectory of the build tree
(as well as \fI*.t\fR files in the \fI./lib\fR subdirectory) to find how it
should be done \*(L"correctly\*(R".
.ie n .SS """\`\`"" and pipe\-""open"" do not work under \s-1DOS\s0."
.el .SS "\f(CW\`\`\fP and pipe\-\f(CWopen\fP do not work under \s-1DOS\s0."
.IX Subsection " and pipe-open do not work under DOS."
This may a variant of just \*(L"I cannot run external programs\*(R", or a
deeper problem. Basically: you \fIneed\fR \s-1RSX\s0 (see \*(L"Prerequisites\*(R")
for these commands to work, and you may need a port of \fIsh.exe\fR which
understands command arguments. One of such ports is listed in
\&\*(L"Prerequisites\*(R" under \s-1RSX\s0. Do not forget to set variable
\&\f(CW"PERL_SH_DIR"\fR as well.
.PP
\&\s-1DPMI\s0 is required for \s-1RSX\s0.
.ie n .SS "Cannot start ""find.exe ""pattern"" file"""
.el .SS "Cannot start \f(CWfind.exe ``pattern'' file\fP"
.IX Subsection "Cannot start find.exe ""pattern"" file"
The whole idea of the \*(L"standard C \s-1API\s0 to start applications\*(R" is that
the forms \f(CW\*(C`foo\*(C'\fR and \f(CW"foo"\fR of program arguments are completely
interchangeable.  \fIfind\fR breaks this paradigm;
.PP
.Vb 2
\&  find "pattern" file
\&  find pattern file
.Ve
.PP
are not equivalent; \fIfind\fR cannot be started directly using the above
\&\s-1API\s0.  One needs a way to surround the doublequotes in some other
quoting construction, necessarily having an extra non-Unixish shell in
between.
.PP
Use one of
.PP
.Vb 2
\&  system \*(Aqcmd\*(Aq, \*(Aq/c\*(Aq, \*(Aqfind "pattern" file\*(Aq;
\&  \`cmd /c \*(Aqfind "pattern" file\*(Aq\`
.Ve
.PP
This would start \fIfind.exe\fR via \fIcmd.exe\fR via \f(CW\*(C`sh.exe\*(C'\fR via
\&\f(CW\*(C`perl.exe\*(C'\fR, but this is a price to pay if you want to use
non-conforming program.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
.SS "Automatic binary installation"
.IX Subsection "Automatic binary installation"
The most convenient way of installing a binary distribution of perl is via perl installer
\&\fIinstall.exe\fR. Just follow the instructions, and 99% of the
installation blues would go away.
.PP
Note however, that you need to have \fIunzip.exe\fR on your path, and
\&\s-1EMX\s0 environment \fIrunning\fR. The latter means that if you just
installed \s-1EMX\s0, and made all the needed changes to \fIConfig.sys\fR,
you may need to reboot in between. Check \s-1EMX\s0 runtime by running
.PP
.Vb 1
\&        emxrev
.Ve
.PP
Binary installer also creates a folder on your desktop with some useful
objects.  If you need to change some aspects of the work of the binary
installer, feel free to edit the file \fIPerl.pkg\fR.  This may be useful
e.g., if you need to run the installer many times and do not want to
make many interactive changes in the \s-1GUI\s0.
.PP
\&\fBThings not taken care of by automatic binary installation:\fR
.ie n .IP """PERL_BADLANG""" 15
.el .IP "\f(CWPERL_BADLANG\fR" 15
.IX Item "PERL_BADLANG"
may be needed if you change your codepage \fIafter\fR perl installation,
and the new value is not supported by \s-1EMX\s0. See \*(L"\s-1PERL_BADLANG\s0\*(R".
.ie n .IP """PERL_BADFREE""" 15
.el .IP "\f(CWPERL_BADFREE\fR" 15
.IX Item "PERL_BADFREE"
see \*(L"\s-1PERL_BADFREE\s0\*(R".
.IP "\fIConfig.pm\fR" 15
.IX Item "Config.pm"
This file resides somewhere deep in the location you installed your
perl library, find it out by
.Sp
.Vb 1
\&  perl \-MConfig \-le "print $INC{\*(AqConfig.pm\*(Aq}"
.Ve
.Sp
While most important values in this file \fIare\fR updated by the binary
installer, some of them may need to be hand-edited. I know no such
data, please keep me informed if you find one.  Moreover, manual
changes to the installed version may need to be accompanied by an edit
of this file.
.PP
\&\fB\s-1NOTE\s0\fR. Because of a typo the binary installer of 5.00305
would install a variable \f(CW\*(C`PERL_SHPATH\*(C'\fR into \fIConfig.sys\fR. Please
remove this variable and put \f(CW"PERL_SH_DIR"\fR instead.
.SS "Manual binary installation"
.IX Subsection "Manual binary installation"
As of version 5.00305, \s-1OS/2\s0 perl binary distribution comes split
into 11 components. Unfortunately, to enable configurable binary
installation, the file paths in the zip files are not absolute, but
relative to some directory.
.PP
Note that the extraction with the stored paths is still necessary
(default with unzip, specify \f(CW\*(C`\-d\*(C'\fR to pkunzip). However, you
need to know where to extract the files. You need also to manually
change entries in \fIConfig.sys\fR to reflect where did you put the
files. Note that if you have some primitive unzipper (like
\&\f(CW\*(C`pkunzip\*(C'\fR), you may get a lot of warnings/errors during
unzipping. Upgrade to \f(CW\*(C`(w)unzip\*(C'\fR.
.PP
Below is the sample of what to do to reproduce the configuration on my
machine.  In \fI\s-1VIEW\s0.EXE\fR you can press \f(CW\*(C`Ctrl\-Insert\*(C'\fR now, and
cut-and-paste from the resulting file \- created in the directory you
started \fI\s-1VIEW\s0.EXE\fR from.
.PP
For each component, we mention environment variables related to each
installation directory.  Either choose directories to match your
values of the variables, or create/append\-to variables to take into
account the directories.
.IP "Perl \s-1VIO\s0 and \s-1PM\s0 executables (dynamically linked)" 3
.IX Item "Perl VIO and PM executables (dynamically linked)"
.Vb 2
\&  unzip perl_exc.zip *.exe *.ico \-d f:/emx.add/bin
\&  unzip perl_exc.zip *.dll \-d f:/emx.add/dll
.Ve
.Sp
(have the directories with \f(CW\*(C`*.exe\*(C'\fR on \s-1PATH\s0, and \f(CW\*(C`*.dll\*(C'\fR on
\&\s-1LIBPATH\s0);
.IP "Perl_ \s-1VIO\s0 executable (statically linked)" 3
.IX Item "Perl_ VIO executable (statically linked)"
.Vb 1
\&  unzip perl_aou.zip \-d f:/emx.add/bin
.Ve
.Sp
(have the directory on \s-1PATH\s0);
.IP "Executables for Perl utilities" 3
.IX Item "Executables for Perl utilities"
.Vb 1
\&  unzip perl_utl.zip \-d f:/emx.add/bin
.Ve
.Sp
(have the directory on \s-1PATH\s0);
.IP "Main Perl library" 3
.IX Item "Main Perl library"
.Vb 1
\&  unzip perl_mlb.zip \-d f:/perllib/lib
.Ve
.Sp
If this directory is exactly the same as the prefix which was compiled
into \fIperl.exe\fR, you do not need to change
anything. However, for perl to find the library if you use a different
path, you need to
\&\f(CW\*(C`set PERLLIB_PREFIX\*(C'\fR in \fIConfig.sys\fR, see \*(L"\s-1PERLLIB_PREFIX\s0\*(R".
.IP "Additional Perl modules" 3
.IX Item "Additional Perl modules"
.Vb 1
\&  unzip perl_ste.zip \-d f:/perllib/lib/site_perl/5.16.3/
.Ve
.Sp
Same remark as above applies.  Additionally, if this directory is not
one of directories on \f(CW@INC\fR (and \f(CW@INC\fR is influenced by \f(CW\*(C`PERLLIB_PREFIX\*(C'\fR), you
need to put this
directory and subdirectory \fI./os2\fR in \f(CW\*(C`PERLLIB\*(C'\fR or \f(CW\*(C`PERL5LIB\*(C'\fR
variable. Do not use \f(CW\*(C`PERL5LIB\*(C'\fR unless you have it set already. See
\&\*(L"\s-1ENVIRONMENT\s0\*(R" in perl.
.Sp
\&\fB[Check whether this extraction directory is still applicable with
the new directory structure layout!]\fR
.IP "Tools to compile Perl modules" 3
.IX Item "Tools to compile Perl modules"
.Vb 1
\&  unzip perl_blb.zip \-d f:/perllib/lib
.Ve
.Sp
Same remark as for \fIperl_ste.zip\fR.
.IP "Manpages for Perl and utilities" 3
.IX Item "Manpages for Perl and utilities"
.Vb 1
\&  unzip perl_man.zip \-d f:/perllib/man
.Ve
.Sp
This directory should better be on \f(CW\*(C`MANPATH\*(C'\fR. You need to have a
working \fIman\fR to access these files.
.IP "Manpages for Perl modules" 3
.IX Item "Manpages for Perl modules"
.Vb 1
\&  unzip perl_mam.zip \-d f:/perllib/man
.Ve
.Sp
This directory should better be on \f(CW\*(C`MANPATH\*(C'\fR. You need to have a
working man to access these files.
.IP "Source for Perl documentation" 3
.IX Item "Source for Perl documentation"
.Vb 1
\&  unzip perl_pod.zip \-d f:/perllib/lib
.Ve
.Sp
This is used by the \f(CW\*(C`perldoc\*(C'\fR program (see perldoc), and may be used to
generate \s-1HTML\s0 documentation usable by \s-1WWW\s0 browsers, and
documentation in zillions of other formats: \f(CW\*(C`info\*(C'\fR, \f(CW\*(C`LaTeX\*(C'\fR,
\&\f(CW\*(C`Acrobat\*(C'\fR, \f(CW\*(C`FrameMaker\*(C'\fR and so on.  [Use programs such as
\&\fIpod2latex\fR etc.]
.IP "Perl manual in \fI.INF\fR format" 3
.IX Item "Perl manual in .INF format"
.Vb 1
\&  unzip perl_inf.zip \-d d:/os2/book
.Ve
.Sp
This directory should better be on \f(CW\*(C`BOOKSHELF\*(C'\fR.
.IP "Pdksh" 3
.IX Item "Pdksh"
.Vb 1
\&  unzip perl_sh.zip \-d f:/bin
.Ve
.Sp
This is used by perl to run external commands which explicitly
require shell, like the commands using \fIredirection\fR and \fIshell
metacharacters\fR. It is also used instead of explicit \fI/bin/sh\fR.
.Sp
Set \f(CW\*(C`PERL_SH_DIR\*(C'\fR (see \*(L"\s-1PERL_SH_DIR\s0\*(R") if you move \fIsh.exe\fR from
the above location.
.Sp
\&\fBNote.\fR It may be possible to use some other sh-compatible shell (untested).
.PP
After you installed the components you needed and updated the
\&\fIConfig.sys\fR correspondingly, you need to hand-edit
\&\fIConfig.pm\fR. This file resides somewhere deep in the location you
installed your perl library, find it out by
.PP
.Vb 1
\&  perl \-MConfig \-le "print $INC{\*(AqConfig.pm\*(Aq}"
.Ve
.PP
You need to correct all the entries which look like file paths (they
currently start with \f(CW\*(C`f:/\*(C'\fR).
.SS "\fBWarning\fP"
.IX Subsection "Warning"
The automatic and manual perl installation leave precompiled paths
inside perl executables. While these paths are overwriteable (see
\&\*(L"\s-1PERLLIB_PREFIX\s0\*(R", \*(L"\s-1PERL_SH_DIR\s0\*(R"), some people may prefer
binary editing of paths inside the executables/DLLs.
.SH "Accessing documentation"
.IX Header "Accessing documentation"
Depending on how you built/installed perl you may have (otherwise
identical) Perl documentation in the following formats:
.SS "\s-1OS/2\s0 \fI.INF\fP file"
.IX Subsection "OS/2 .INF file"
Most probably the most convenient form. Under \s-1OS/2\s0 view it as
.PP
.Vb 4
\&  view perl
\&  view perl perlfunc
\&  view perl less
\&  view perl ExtUtils::MakeMaker
.Ve
.PP
(currently the last two may hit a wrong location, but this may improve
soon). Under Win* see \*(L"\s-1SYNOPSIS\s0\*(R".
.PP
If you want to build the docs yourself, and have \fI\s-1OS/2\s0 toolkit\fR, run
.PP
.Vb 1
\&        pod2ipf > perl.ipf
.Ve
.PP
in \fI/perllib/lib/pod\fR directory, then
.PP
.Vb 1
\&        ipfc /inf perl.ipf
.Ve
.PP
(Expect a lot of errors during the both steps.) Now move it on your
\&\s-1BOOKSHELF\s0 path.
.SS "Plain text"
.IX Subsection "Plain text"
If you have perl documentation in the source form, perl utilities
installed, and \s-1GNU\s0 groff installed, you may use
.PP
.Vb 3
\&        perldoc perlfunc
\&        perldoc less
\&        perldoc ExtUtils::MakeMaker
.Ve
.PP
to access the perl documentation in the text form (note that you may get
better results using perl manpages).
.PP
Alternately, try running pod2text on \fI.pod\fR files.
.SS "Manpages"
.IX Subsection "Manpages"
If you have \fIman\fR installed on your system, and you installed perl
manpages, use something like this:
.PP
.Vb 3
\&        man perlfunc
\&        man 3 less
\&        man ExtUtils.MakeMaker
.Ve
.PP
to access documentation for different components of Perl. Start with
.PP
.Vb 1
\&        man perl
.Ve
.PP
Note that dot (\fI.\fR) is used as a package separator for documentation
for packages, and as usual, sometimes you need to give the section \- \f(CW3\fR
above \- to avoid shadowing by the \fI\fIless\fI\|(1) manpage\fR.
.PP
Make sure that the directory \fBabove\fR the directory with manpages is
on our \f(CW\*(C`MANPATH\*(C'\fR, like this
.PP
.Vb 1
\&  set MANPATH=c:/man;f:/perllib/man
.Ve
.PP
for Perl manpages in \f(CW\*(C`f:/perllib/man/man1/\*(C'\fR etc.
.SS "\s-1HTML\s0"
.IX Subsection "HTML"
If you have some \s-1WWW\s0 browser available, installed the Perl
documentation in the source form, and Perl utilities, you can build
\&\s-1HTML\s0 docs. Cd to directory with \fI.pod\fR files, and do like this
.PP
.Vb 2
\&        cd f:/perllib/lib/pod
\&        pod2html
.Ve
.PP
After this you can direct your browser the file \fIperl.html\fR in this
directory, and go ahead with reading docs, like this:
.PP
.Vb 1
\&        explore file:///f:/perllib/lib/pod/perl.html
.Ve
.PP
Alternatively you may be able to get these docs prebuilt from \s-1CPAN\s0.
.ie n .SS "\s-1GNU\s0 ""info"" files"
.el .SS "\s-1GNU\s0 \f(CWinfo\fP files"
.IX Subsection "GNU info files"
Users of Emacs would appreciate it very much, especially with
\&\f(CW\*(C`CPerl\*(C'\fR mode loaded. You need to get latest \f(CW\*(C`pod2texi\*(C'\fR from \f(CW\*(C`CPAN\*(C'\fR,
or, alternately, the prebuilt info pages.
.SS "\fI\s-1PDF\s0\fP files"
.IX Subsection "PDF files"
for \f(CW\*(C`Acrobat\*(C'\fR are available on \s-1CPAN\s0 (may be for slightly older version of
perl).
.ie n .SS """LaTeX"" docs"
.el .SS "\f(CWLaTeX\fP docs"
.IX Subsection "LaTeX docs"
can be constructed using \f(CW\*(C`pod2latex\*(C'\fR.
.SH "BUILD"
.IX Header "BUILD"
Here we discuss how to build Perl under \s-1OS/2\s0.
.SS "The short story"
.IX Subsection "The short story"
Assume that you are a seasoned porter, so are sure that all the necessary
tools are already present on your system, and you know how to get the Perl
source distribution.  Untar it, change to the extract directory, and
.PP
.Vb 7
\&  gnupatch \-p0 < os2\ediff.configure
\&  sh Configure \-des \-D prefix=f:/perllib
\&  make
\&  make test
\&  make install
\&  make aout_test
\&  make aout_install
.Ve
.PP
This puts the executables in f:/perllib/bin.  Manually move them to the
\&\f(CW\*(C`PATH\*(C'\fR, manually move the built \fIperl*.dll\fR to \f(CW\*(C`LIBPATH\*(C'\fR (here for
Perl \s-1DLL\s0 \fI*\fR is a not-very-meaningful hex checksum), and run
.PP
.Vb 1
\&  make installcmd INSTALLCMDDIR=d:/ir/on/path
.Ve
.PP
Assuming that the \f(CW\*(C`man\*(C'\fR\-files were put on an appropriate location,
this completes the installation of minimal Perl system.  (The binary
distribution contains also a lot of additional modules, and the
documentation in \s-1INF\s0 format.)
.PP
What follows is a detailed guide through these steps.
.SS "Prerequisites"
.IX Subsection "Prerequisites"
You need to have the latest \s-1EMX\s0 development environment, the full
\&\s-1GNU\s0 tool suite (gawk renamed to awk, and \s-1GNU\s0 \fIfind.exe\fR
earlier on path than the \s-1OS/2\s0 \fIfind.exe\fR, same with \fIsort.exe\fR, to
check use
.PP
.Vb 2
\&  find \-\-version
\&  sort \-\-version
.Ve
.PP
). You need the latest version of \fIpdksh\fR installed as \fIsh.exe\fR.
.PP
Check that you have \fB\s-1BSD\s0\fR libraries and headers installed, and \- 
optionally \- Berkeley \s-1DB\s0 headers and libraries, and crypt.
.PP
Possible locations to get the files:
.PP
.Vb 4
\&  ftp://ftp.uni\-heidelberg.de/pub/os2/unix/
\&  http://hobbes.nmsu.edu/h\-browse.php?dir=/pub/os2
\&  http://cd.textfiles.com/hobbesos29804/disk1/DEV32/
\&  http://cd.textfiles.com/hobbesos29804/disk1/EMX09C/
.Ve
.PP
It is reported that the following archives contain enough utils to
build perl: \fIgnufutil.zip\fR, \fIgnusutil.zip\fR, \fIgnututil.zip\fR, \fIgnused.zip\fR,
\&\fIgnupatch.zip\fR, \fIgnuawk.zip\fR, \fIgnumake.zip\fR, \fIgnugrep.zip\fR, \fIbsddev.zip\fR and
\&\fIksh527rt.zip\fR (or a later version).  Note that all these utilities are
known to be available from \s-1LEO:\s0
.PP
.Vb 1
\&  ftp://crydee.sai.msu.ru/pub/comp/os/os2/leo/gnu/
.Ve
.PP
Note also that the \fIdb.lib\fR and \fIdb.a\fR from the \s-1EMX\s0 distribution
are not suitable for multi-threaded compile (even single-threaded
flavor of Perl uses multi-threaded C \s-1RTL\s0, for
compatibility with XFree86\-OS/2). Get a corrected one from
.PP
.Vb 1
\&  http://www.ilyaz.org/software/os2/db_mt.zip
.Ve
.PP
If you have \fIexactly the same version of Perl\fR installed already,
make sure that no copies or perl are currently running.  Later steps
of the build may fail since an older version of \fIperl.dll\fR loaded into
memory may be found.  Running \f(CW\*(C`make test\*(C'\fR becomes meaningless, since
the test are checking a previous build of perl (this situation is detected
and reported by \fIlib/os2_base.t\fR test).  Do not forget to unset
\&\f(CW\*(C`PERL_EMXLOAD_SEC\*(C'\fR in environment.
.PP
Also make sure that you have \fI/tmp\fR directory on the current drive,
and \fI.\fR directory in your \f(CW\*(C`LIBPATH\*(C'\fR. One may try to correct the
latter condition by
.PP
.Vb 1
\&  set BEGINLIBPATH .\e.
.Ve
.PP
if you use something like \fI\s-1CMD\s0.EXE\fR or latest versions of
\&\fI4os2.exe\fR.  (Setting \s-1BEGINLIBPATH\s0 to just \f(CW\*(C`.\*(C'\fR is ignored by the
\&\s-1OS/2\s0 kernel.)
.PP
Make sure your gcc is good for \f(CW\*(C`\-Zomf\*(C'\fR linking: run \f(CW\*(C`omflibs\*(C'\fR
script in \fI/emx/lib\fR directory.
.PP
Check that you have link386 installed. It comes standard with \s-1OS/2\s0,
but may be not installed due to customization. If typing
.PP
.Vb 1
\&  link386
.Ve
.PP
shows you do not have it, do \fISelective install\fR, and choose \f(CW\*(C`Link
object modules\*(C'\fR in \fIOptional system utilities/More\fR. If you get into
link386 prompts, press \f(CW\*(C`Ctrl\-C\*(C'\fR to exit.
.SS "Getting perl source"
.IX Subsection "Getting perl source"
You need to fetch the latest perl source (including developers
releases). With some probability it is located in
.PP
.Vb 2
\&  http://www.cpan.org/src/
\&  http://www.cpan.org/src/unsupported
.Ve
.PP
If not, you may need to dig in the indices to find it in the directory
of the current maintainer.
.PP
Quick cycle of developers release may break the \s-1OS/2\s0 build time to
time, looking into
.PP
.Vb 1
\&  http://www.cpan.org/ports/os2/
.Ve
.PP
may indicate the latest release which was publicly released by the
maintainer. Note that the release may include some additional patches
to apply to the current source of perl.
.PP
Extract it like this
.PP
.Vb 1
\&  tar vzxf perl5.00409.tar.gz
.Ve
.PP
You may see a message about errors while extracting \fIConfigure\fR. This is
because there is a conflict with a similarly-named file \fIconfigure\fR.
.PP
Change to the directory of extraction.
.SS "Application of the patches"
.IX Subsection "Application of the patches"
You need to apply the patches in \fI./os2/diff.*\fR like this:
.PP
.Vb 1
\&  gnupatch \-p0 < os2\ediff.configure
.Ve
.PP
You may also need to apply the patches supplied with the binary
distribution of perl.  It also makes sense to look on the
perl5\-porters mailing list for the latest OS/2\-related patches (see
http://www.xray.mpe.mpg.de/mailing\-lists/perl5\-porters/ <http://www.xray.mpe.mpg.de/mailing-lists/perl5-porters/>).  Such
patches usually contain strings \f(CW\*(C`/os2/\*(C'\fR and \f(CW\*(C`patch\*(C'\fR, so it makes
sense looking for these strings.
.SS "Hand-editing"
.IX Subsection "Hand-editing"
You may look into the file \fI./hints/os2.sh\fR and correct anything
wrong you find there. I do not expect it is needed anywhere.
.SS "Making"
.IX Subsection "Making"
.Vb 1
\&  sh Configure \-des \-D prefix=f:/perllib
.Ve
.PP
\&\f(CW\*(C`prefix\*(C'\fR means: where to install the resulting perl library. Giving
correct prefix you may avoid the need to specify \f(CW\*(C`PERLLIB_PREFIX\*(C'\fR,
see \*(L"\s-1PERLLIB_PREFIX\s0\*(R".
.PP
\&\fIIgnore the message about missing \f(CI\*(C`ln\*(C'\fI, and about \f(CI\*(C`\-c\*(C'\fI option to
tr\fR. The latter is most probably already fixed, if you see it and can trace
where the latter spurious warning comes from, please inform me.
.PP
Now
.PP
.Vb 1
\&  make
.Ve
.PP
At some moment the built may die, reporting a \fIversion mismatch\fR or
\&\fIunable to run \fIperl\fI\fR.  This means that you do not have \fI.\fR in
your \s-1LIBPATH\s0, so \fIperl.exe\fR cannot find the needed \fIperl67B2.dll\fR (treat
these hex digits as line noise).  After this is fixed the build
should finish without a lot of fuss.
.SS "Testing"
.IX Subsection "Testing"
Now run
.PP
.Vb 1
\&  make test
.Ve
.PP
All tests should succeed (with some of them skipped).  If you have the
same version of Perl installed, it is crucial that you have \f(CW\*(C`.\*(C'\fR early
in your \s-1LIBPATH\s0 (or in \s-1BEGINLIBPATH\s0), otherwise your tests will most
probably test the wrong version of Perl.
.PP
Some tests may generate extra messages similar to
.ie n .IP "A lot of ""bad free""" 4
.el .IP "A lot of \f(CWbad free\fR" 4
.IX Item "A lot of bad free"
in database tests related to Berkeley \s-1DB\s0. \fIThis should be fixed already.\fR
If it persists, you may disable this warnings, see \*(L"\s-1PERL_BADFREE\s0\*(R".
.IP "Process terminated by \s-1SIGTERM/SIGINT\s0" 4
.IX Item "Process terminated by SIGTERM/SIGINT"
This is a standard message issued by \s-1OS/2\s0 applications. *nix
applications die in silence. It is considered to be a feature. One can
easily disable this by appropriate sighandlers.
.Sp
However the test engine bleeds these message to screen in unexpected
moments. Two messages of this kind \fIshould\fR be present during
testing.
.PP
To get finer test reports, call
.PP
.Vb 1
\&  perl t/harness
.Ve
.PP
The report with \fIio/pipe.t\fR failing may look like this:
.PP
.Vb 5
\&  Failed Test  Status Wstat Total Fail  Failed  List of failed
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  io/pipe.t                    12    1   8.33%  9
\&  7 tests skipped, plus 56 subtests skipped.
\&  Failed 1/195 test scripts, 99.49% okay. 1/6542 subtests failed, 99.98% okay.
.Ve
.PP
The reasons for most important skipped tests are:
.IP "\fIop/fs.t\fR" 8
.IX Item "op/fs.t"
.RS 8
.PD 0
.IP "18" 4
.IX Item "18"
.PD
Checks \f(CW\*(C`atime\*(C'\fR and \f(CW\*(C`mtime\*(C'\fR of \f(CW\*(C`stat()\*(C'\fR \- unfortunately, \s-1HPFS\s0
provides only 2sec time granularity (for compatibility with \s-1FAT\s0?).
.IP "25" 4
.IX Item "25"
Checks \f(CW\*(C`truncate()\*(C'\fR on a filehandle just opened for write \- I do not
know why this should or should not work.
.RE
.RS 8
.RE
.IP "\fIop/stat.t\fR" 8
.IX Item "op/stat.t"
Checks \f(CW\*(C`stat()\*(C'\fR. Tests:
.RS 8
.IP "4" 4
.IX Item "4"
Checks \f(CW\*(C`atime\*(C'\fR and \f(CW\*(C`mtime\*(C'\fR of \f(CW\*(C`stat()\*(C'\fR \- unfortunately, \s-1HPFS\s0
provides only 2sec time granularity (for compatibility with \s-1FAT\s0?).
.RE
.RS 8
.RE
.SS "Installing the built perl"
.IX Subsection "Installing the built perl"
If you haven't yet moved \f(CW\*(C`perl*.dll\*(C'\fR onto \s-1LIBPATH\s0, do it now.
.PP
Run
.PP
.Vb 1
\&  make install
.Ve
.PP
It would put the generated files into needed locations. Manually put
\&\fIperl.exe\fR, \fIperl_\|_.exe\fR and \fIperl_\|_\|_.exe\fR to a location on your
\&\s-1PATH\s0, \fIperl.dll\fR to a location on your \s-1LIBPATH\s0.
.PP
Run
.PP
.Vb 1
\&  make installcmd INSTALLCMDDIR=d:/ir/on/path
.Ve
.PP
to convert perl utilities to \fI.cmd\fR files and put them on
\&\s-1PATH\s0. You need to put \fI.EXE\fR\-utilities on path manually. They are
installed in \f(CW\*(C`$prefix/bin\*(C'\fR, here \f(CW$prefix\fR is what you gave to
\&\fIConfigure\fR, see \*(L"Making\*(R".
.PP
If you use \f(CW\*(C`man\*(C'\fR, either move the installed \fI*/man/\fR directories to
your \f(CW\*(C`MANPATH\*(C'\fR, or modify \f(CW\*(C`MANPATH\*(C'\fR to match the location.  (One
could have avoided this by providing a correct \f(CW\*(C`manpath\*(C'\fR option to
\&\fI./Configure\fR, or editing \fI./config.sh\fR between configuring and
making steps.)
.ie n .SS """a.out""\-style build"
.el .SS "\f(CWa.out\fP\-style build"
.IX Subsection "a.out-style build"
Proceed as above, but make \fIperl_.exe\fR (see \*(L"perl_.exe\*(R") by
.PP
.Vb 1
\&  make perl_
.Ve
.PP
test and install by
.PP
.Vb 2
\&  make aout_test
\&  make aout_install
.Ve
.PP
Manually put \fIperl_.exe\fR to a location on your \s-1PATH\s0.
.PP
\&\fBNote.\fR The build process for \f(CW\*(C`perl_\*(C'\fR \fIdoes not know\fR about all the
dependencies, so you should make sure that anything is up-to-date,
say, by doing
.PP
.Vb 1
\&  make perl_dll
.Ve
.PP
first.
.SH "Building a binary distribution"
.IX Header "Building a binary distribution"
[This section provides a short overview only...]
.PP
Building should proceed differently depending on whether the version of perl
you install is already present and used on your system, or is a new version
not yet used.  The description below assumes that the version is new, so
installing its DLLs and \fI.pm\fR files will not disrupt the operation of your
system even if some intermediate steps are not yet fully working.
.PP
The other cases require a little bit more convoluted procedures.  Below I
suppose that the current version of Perl is \f(CW5.8.2\fR, so the executables are
named accordingly.
.IP "1." 4
Fully build and test the Perl distribution.  Make sure that no tests are
failing with \f(CW\*(C`test\*(C'\fR and \f(CW\*(C`aout_test\*(C'\fR targets; fix the bugs in Perl and
the Perl test suite detected by these tests.  Make sure that \f(CW\*(C`all_test\*(C'\fR
make target runs as clean as possible.  Check that \fIos2/perlrexx.cmd\fR
runs fine.
.IP "2." 4
Fully install Perl, including \f(CW\*(C`installcmd\*(C'\fR target.  Copy the generated DLLs
to \f(CW\*(C`LIBPATH\*(C'\fR; copy the numbered Perl executables (as in \fIperl5.8.2.exe\fR)
to \f(CW\*(C`PATH\*(C'\fR; copy \f(CW\*(C`perl_.exe\*(C'\fR to \f(CW\*(C`PATH\*(C'\fR as \f(CW\*(C`perl_5.8.2.exe\*(C'\fR.  Think whether
you need backward-compatibility DLLs.  In most cases you do not need to install
them yet; but sometime this may simplify the following steps.
.IP "3." 4
Make sure that \f(CW\*(C`CPAN.pm\*(C'\fR can download files from \s-1CPAN\s0.  If not, you may need
to manually install \f(CW\*(C`Net::FTP\*(C'\fR.
.IP "4." 4
Install the bundle \f(CW\*(C`Bundle::OS2_default\*(C'\fR
.Sp
.Vb 1
\&  perl5.8.2 \-MCPAN \-e "install Bundle::OS2_default" < nul |& tee 00cpan_i_1
.Ve
.Sp
This may take a couple of hours on 1GHz processor (when run the first time).
And this should not be necessarily a smooth procedure.  Some modules may not
specify required dependencies, so one may need to repeat this procedure several
times until the results stabilize.
.Sp
.Vb 2
\&  perl5.8.2 \-MCPAN \-e "install Bundle::OS2_default" < nul |& tee 00cpan_i_2
\&  perl5.8.2 \-MCPAN \-e "install Bundle::OS2_default" < nul |& tee 00cpan_i_3
.Ve
.Sp
Even after they stabilize, some tests may fail.
.Sp
Fix as many discovered bugs as possible.  Document all the bugs which are not
fixed, and all the failures with unknown reasons.  Inspect the produced logs
\&\fI00cpan_i_1\fR to find suspiciously skipped tests, and other fishy events.
.Sp
Keep in mind that \fIinstallation\fR of some modules may fail too: for example,
the DLLs to update may be already loaded by \fI\s-1CPAN\s0.pm\fR.  Inspect the \f(CW\*(C`install\*(C'\fR
logs (in the example above \fI00cpan_i_1\fR etc) for errors, and install things
manually, as in
.Sp
.Vb 2
\&  cd $CPANHOME/.cpan/build/Digest\-MD5\-2.31
\&  make install
.Ve
.Sp
Some distributions may fail some tests, but you may want to install them
anyway (as above, or via \f(CW\*(C`force install\*(C'\fR command of \f(CW\*(C`CPAN.pm\*(C'\fR shell-mode).
.Sp
Since this procedure may take quite a long time to complete, it makes sense
to \*(L"freeze\*(R" your \s-1CPAN\s0 configuration by disabling periodic updates of the
local copy of \s-1CPAN\s0 index: set \f(CW\*(C`index_expire\*(C'\fR to some big value (I use 365),
then save the settings
.Sp
.Vb 2
\&  CPAN> o conf index_expire 365
\&  CPAN> o conf commit
.Ve
.Sp
Reset back to the default value \f(CW1\fR when you are finished.
.IP "5." 4
When satisfied with the results, rerun the \f(CW\*(C`installcmd\*(C'\fR target.  Now you
can copy \f(CW\*(C`perl5.8.2.exe\*(C'\fR to \f(CW\*(C`perl.exe\*(C'\fR, and install the other OMF-build
executables: \f(CW\*(C`perl_\|_.exe\*(C'\fR etc.  They are ready to be used.
.IP "6." 4
Change to the \f(CW\*(C`./pod\*(C'\fR directory of the build tree, download the Perl logo
\&\fICamelGrayBig.BMP\fR, and run
.Sp
.Vb 2
\&  ( perl2ipf > perl.ipf ) |& tee 00ipf
\&  ipfc /INF perl.ipf |& tee 00inf
.Ve
.Sp
This produces the Perl docs online book \f(CW\*(C`perl.INF\*(C'\fR.  Install in on
\&\f(CW\*(C`BOOKSHELF\*(C'\fR path.
.IP "7." 4
Now is the time to build statically linked executable \fIperl_.exe\fR which
includes newly-installed via \f(CW\*(C`Bundle::OS2_default\*(C'\fR modules.  Doing testing
via \f(CW\*(C`CPAN.pm\*(C'\fR is going to be painfully slow, since it statically links
a new executable per \s-1XS\s0 extension.
.Sp
Here is a possible workaround: create a toplevel \fIMakefile.PL\fR in
\&\fI\f(CI$CPANHOME\fI/.cpan/build/\fR with contents being (compare with \*(L"Making
executables with a custom collection of statically loaded extensions\*(R")
.Sp
.Vb 2
\&  use ExtUtils::MakeMaker;
\&  WriteMakefile NAME => \*(Aqdummy\*(Aq;
.Ve
.Sp
execute this as
.Sp
.Vb 2
\&  perl_5.8.2.exe Makefile.PL <nul |& tee 00aout_c1
\&  make \-k all test <nul |& 00aout_t1
.Ve
.Sp
Again, this procedure should not be absolutely smooth.  Some \f(CW\*(C`Makefile.PL\*(C'\fR's
in subdirectories may be buggy, and would not run as \*(L"child\*(R" scripts.  The
interdependency of modules can strike you; however, since non-XS modules
are already installed, the prerequisites of most modules have a very good
chance to be present.
.Sp
If you discover some glitches, move directories of problematic modules to a
different location; if these modules are non-XS modules, you may just ignore
them \- they are already installed; the remaining, \s-1XS\s0, modules you need to
install manually one by one.
.Sp
After each such removal you need to rerun the \f(CW\*(C`Makefile.PL\*(C'\fR/\f(CW\*(C`make\*(C'\fR process;
usually this procedure converges soon.  (But be sure to convert all the
necessary external C libraries from \fI.lib\fR format to \fI.a\fR format: run one of
.Sp
.Vb 2
\&  emxaout foo.lib
\&  emximp \-o foo.a foo.lib
.Ve
.Sp
whichever is appropriate.)  Also, make sure that the DLLs for external
libraries are usable with with executables compiled without \f(CW\*(C`\-Zmtd\*(C'\fR options.
.Sp
When you are sure that only a few subdirectories
lead to failures, you may want to add \f(CW\*(C`\-j4\*(C'\fR option to \f(CW\*(C`make\*(C'\fR to speed up
skipping subdirectories with already finished build.
.Sp
When you are satisfied with the results of tests, install the build C libraries
for extensions:
.Sp
.Vb 1
\&  make install |& tee 00aout_i
.Ve
.Sp
Now you can rename the file \fI./perl.exe\fR generated during the last phase
to \fIperl_5.8.2.exe\fR; place it on \f(CW\*(C`PATH\*(C'\fR; if there is an inter-dependency
between some \s-1XS\s0 modules, you may need to repeat the \f(CW\*(C`test\*(C'\fR/\f(CW\*(C`install\*(C'\fR loop
with this new executable and some excluded modules \- until the procedure
converges.
.Sp
Now you have all the necessary \fI.a\fR libraries for these Perl modules in the
places where Perl builder can find it.  Use the perl builder: change to an
empty directory, create a \*(L"dummy\*(R" \fIMakefile.PL\fR again, and run
.Sp
.Vb 2
\&  perl_5.8.2.exe Makefile.PL |& tee 00c
\&  make perl                  |& tee 00p
.Ve
.Sp
This should create an executable \fI./perl.exe\fR with all the statically loaded
extensions built in.  Compare the generated \fIperlmain.c\fR files to make sure
that during the iterations the number of loaded extensions only increases.
Rename \fI./perl.exe\fR to \fIperl_5.8.2.exe\fR on \f(CW\*(C`PATH\*(C'\fR.
.Sp
When it converges, you got a functional variant of \fIperl_5.8.2.exe\fR; copy it
to \f(CW\*(C`perl_.exe\*(C'\fR.  You are done with generation of the local Perl installation.
.IP "8." 4
Make sure that the installed modules are actually installed in the location
of the new Perl, and are not inherited from entries of \f(CW@INC\fR given for
inheritance from the older versions of Perl: set \f(CW\*(C`PERLLIB_582_PREFIX\*(C'\fR to
redirect the new version of Perl to a new location, and copy the installed
files to this new location.  Redo the tests to make sure that the versions of
modules inherited from older versions of Perl are not needed.
.Sp
Actually, the log output of \fIpod2ipf\fR\|(1) during the step 6 gives a very detailed
info about which modules are loaded from which place; so you may use it as
an additional verification tool.
.Sp
Check that some temporary files did not make into the perl install tree.
Run something like this
.Sp
.Vb 1
\&  pfind . \-f "!(/\e.(pm|pl|ix|al|h|a|lib|txt|pod|imp|bs|dll|ld|bs|inc|xbm|yml|cgi|uu|e2x|skip|packlist|eg|cfg|html|pub|enc|all|ini|po|pot)$/i or /^\ew+$/") | less
.Ve
.Sp
in the install tree (both top one and \fIsitelib\fR one).
.Sp
Compress all the DLLs with \fIlxlite\fR.  The tiny \fI.exe\fR can be compressed with
\&\f(CW\*(C`/c:max\*(C'\fR (the bug only appears when there is a fixup in the last 6 bytes of a
page (?); since the tiny executables are much smaller than a page, the bug
will not hit).  Do not compress \f(CW\*(C`perl_.exe\*(C'\fR \- it would not work under \s-1DOS\s0.
.IP "9." 4
Now you can generate the binary distribution.  This is done by running the
test of the \s-1CPAN\s0 distribution \f(CW\*(C`OS2::SoftInstaller\*(C'\fR.  Tune up the file
\&\fItest.pl\fR to suit the layout of current version of Perl first.  Do not
forget to pack the necessary external DLLs accordingly.  Include the
description of the bugs and test suite failures you could not fix.  Include
the small-stack versions of Perl executables from Perl build directory.
.Sp
Include \fIperl5.def\fR so that people can relink the perl \s-1DLL\s0 preserving
the binary compatibility, or can create compatibility DLLs.  Include the diff
files (\f(CW\*(C`diff \-pu old new\*(C'\fR) of fixes you did so that people can rebuild your
version.  Include \fIperl5.map\fR so that one can use remote debugging.
.IP "10." 4
Share what you did with the other people.  Relax.  Enjoy fruits of your work.
.IP "11." 4
Brace yourself for thanks, bug reports, hate mail and spam coming as result
of the previous step.  No good deed should remain unpunished!
.SH "Building custom \fI.EXE\fP files"
.IX Header "Building custom .EXE files"
The Perl executables can be easily rebuilt at any moment.  Moreover, one can
use the \fIembedding\fR interface (see perlembed) to make very customized
executables.
.SS "Making executables with a custom collection of statically loaded extensions"
.IX Subsection "Making executables with a custom collection of statically loaded extensions"
It is a little bit easier to do so while \fIdecreasing\fR the list of statically
loaded extensions.  We discuss this case only here.
.IP "1." 4
Change to an empty directory, and create a placeholder <Makefile.PL>:
.Sp
.Vb 2
\&  use ExtUtils::MakeMaker;
\&  WriteMakefile NAME => \*(Aqdummy\*(Aq;
.Ve
.IP "2." 4
Run it with the flavor of Perl (\fIperl.exe\fR or \fIperl_.exe\fR) you want to
rebuild.
.Sp
.Vb 1
\&  perl_ Makefile.PL
.Ve
.IP "3." 4
Ask it to create new Perl executable:
.Sp
.Vb 1
\&  make perl
.Ve
.Sp
(you may need to manually add \f(CW\*(C`PERLTYPE=\-DPERL_CORE\*(C'\fR to this commandline on
some versions of Perl; the symptom is that the command-line globbing does not
work from \s-1OS/2\s0 shells with the newly-compiled executable; check with
.Sp
.Vb 1
\&  .\eperl.exe \-wle "print for @ARGV" *
.Ve
.Sp
).
.IP "4." 4
The previous step created \fIperlmain.c\fR which contains a list of \fInewXS()\fR calls
near the end.  Removing unnecessary calls, and rerunning
.Sp
.Vb 1
\&  make perl
.Ve
.Sp
will produce a customized executable.
.SS "Making executables with a custom search-paths"
.IX Subsection "Making executables with a custom search-paths"
The default perl executable is flexible enough to support most usages.
However, one may want something yet more flexible; for example, one may want
to find Perl \s-1DLL\s0 relatively to the location of the \s-1EXE\s0 file; or one may want
to ignore the environment when setting the Perl-library search patch, etc.
.PP
If you fill comfortable with \fIembedding\fR interface (see perlembed), such
things are easy to do repeating the steps outlined in \*(L"Making
executables with a custom collection of statically loaded extensions\*(R", and
doing more comprehensive edits to \fImain()\fR of \fIperlmain.c\fR.  The people with
little desire to understand Perl can just rename \fImain()\fR, and do necessary
modification in a custom \fImain()\fR which calls the renamed function in appropriate
time.
.PP
However, there is a third way: perl \s-1DLL\s0 exports the \fImain()\fR function and several
callbacks to customize the search path.  Below is a complete example of a
\&\*(L"Perl loader\*(R" which
.IP "1." 4
Looks for Perl \s-1DLL\s0 in the directory \f(CW\*(C`$exedir/../dll\*(C'\fR;
.IP "2." 4
Prepends the above directory to \f(CW\*(C`BEGINLIBPATH\*(C'\fR;
.IP "3." 4
Fails if the Perl \s-1DLL\s0 found via \f(CW\*(C`BEGINLIBPATH\*(C'\fR is different from what was
loaded on step 1; e.g., another process could have loaded it from \f(CW\*(C`LIBPATH\*(C'\fR
or from a different value of \f(CW\*(C`BEGINLIBPATH\*(C'\fR.  In these cases one needs to
modify the setting of the system so that this other process either does not
run, or loads the \s-1DLL\s0 from \f(CW\*(C`BEGINLIBPATH\*(C'\fR with \f(CW\*(C`LIBPATHSTRICT=T\*(C'\fR (available
with kernels after September 2000).
.IP "4." 4
Loads Perl library from \f(CW\*(C`$exedir/../dll/lib/\*(C'\fR.
.IP "5." 4
Uses Bourne shell from \f(CW\*(C`$exedir/../dll/sh/ksh.exe\*(C'\fR.
.PP
For best results compile the C file below with the same options as the Perl
\&\s-1DLL\s0.  However, a lot of functionality will work even if the executable is not
an \s-1EMX\s0 applications, e.g., if compiled with
.PP
.Vb 1
\&  gcc \-Wall \-DDOSISH \-DOS2=1 \-O2 \-s \-Zomf \-Zsys perl\-starter.c \-DPERL_DLL_BASENAME=\e"perl312F\e" \-Zstack 8192 \-Zlinker /PM:VIO
.Ve
.PP
Here is the sample C file:
.PP
.Vb 5
\&  #define INCL_DOS
\&  #define INCL_NOPM
\&  /* These are needed for compile if os2.h includes os2tk.h, not os2emx.h */
\&  #define INCL_DOSPROCESS
\&  #include <os2.h>
\&
\&  #include "EXTERN.h"
\&  #define PERL_IN_MINIPERLMAIN_C
\&  #include "perl.h"
\&
\&  static char *me;
\&  HMODULE handle;
\&
\&  static void
\&  die_with(char *msg1, char *msg2, char *msg3, char *msg4)
\&  {
\&     ULONG c;
\&     char *s = " error: ";
\&
\&     DosWrite(2, me, strlen(me), &c);
\&     DosWrite(2, s, strlen(s), &c);
\&     DosWrite(2, msg1, strlen(msg1), &c);
\&     DosWrite(2, msg2, strlen(msg2), &c);
\&     DosWrite(2, msg3, strlen(msg3), &c);
\&     DosWrite(2, msg4, strlen(msg4), &c);
\&     DosWrite(2, "\er\en", 2, &c);
\&     exit(255);
\&  }
\&
\&  typedef ULONG (*fill_extLibpath_t)(int type, char *pre, char *post, int replace, char *msg);
\&  typedef int (*main_t)(int type, char *argv[], char *env[]);
\&  typedef int (*handler_t)(void* data, int which);
\&
\&  #ifndef PERL_DLL_BASENAME
\&  #  define PERL_DLL_BASENAME "perl"
\&  #endif
\&
\&  static HMODULE
\&  load_perl_dll(char *basename)
\&  {
\&      char buf[300], fail[260];
\&      STRLEN l, dirl;
\&      fill_extLibpath_t f;
\&      ULONG rc_fullname;
\&      HMODULE handle, handle1;
\&
\&      if (_execname(buf, sizeof(buf) \- 13) != 0)
\&          die_with("Can\*(Aqt find full path: ", strerror(errno), "", "");
\&      /* XXXX Fill \*(Aqme\*(Aq with new value */
\&      l = strlen(buf);
\&      while (l && buf[l\-1] != \*(Aq/\*(Aq && buf[l\-1] != \*(Aq\e\e\*(Aq)
\&          l\-\-;
\&      dirl = l \- 1;
\&      strcpy(buf + l, basename);
\&      l += strlen(basename);
\&      strcpy(buf + l, ".dll");
\&      if ( (rc_fullname = DosLoadModule(fail, sizeof fail, buf, &handle)) != 0
\&           && DosLoadModule(fail, sizeof fail, basename, &handle) != 0 )
\&          die_with("Can\*(Aqt load DLL ", buf, "", "");
\&      if (rc_fullname)
\&          return handle;                /* was loaded with short name; all is fine */
\&      if (DosQueryProcAddr(handle, 0, "fill_extLibpath", (PFN*)&f))
\&          die_with(buf, ": DLL exports no symbol ", "fill_extLibpath", "");
\&      buf[dirl] = 0;
\&      if (f(0 /*BEGINLIBPATH*/, buf /* prepend */, NULL /* append */,
\&            0 /* keep old value */, me))
\&          die_with(me, ": prepending BEGINLIBPATH", "", "");
\&      if (DosLoadModule(fail, sizeof fail, basename, &handle1) != 0)
\&          die_with(me, ": finding perl DLL again via BEGINLIBPATH", "", "");
\&      buf[dirl] = \*(Aq\e\e\*(Aq;     
\&      if (handle1 != handle) {
\&          if (DosQueryModuleName(handle1, sizeof(fail), fail))
\&              strcpy(fail, "???");
\&          die_with(buf, ":\en\etperl DLL via BEGINLIBPATH is different: \en\et",
\&                   fail,
\&                   "\en\etYou may need to manipulate global BEGINLIBPATH and LIBPATHSTRICT"
\&                   "\en\etso that the other copy is loaded via BEGINLIBPATH.");
\&      }
\&      return handle;
\&  }
\&
\&  int
\&  main(int argc, char **argv, char **env)
\&  {
\&      main_t f;
\&      handler_t h;
\&
\&      me = argv[0];
\&      /**/
\&      handle = load_perl_dll(PERL_DLL_BASENAME);
\&
\&      if (DosQueryProcAddr(handle, 0, "Perl_OS2_handler_install", (PFN*)&h))
\&          die_with(PERL_DLL_BASENAME, ": DLL exports no symbol ", "Perl_OS2_handler_install", "");
\&      if ( !h((void *)"~installprefix", Perlos2_handler_perllib_from)
\&           || !h((void *)"~dll", Perlos2_handler_perllib_to)
\&           || !h((void *)"~dll/sh/ksh.exe", Perlos2_handler_perl_sh) )
\&          die_with(PERL_DLL_BASENAME, ": Can\*(Aqt install @INC manglers", "", "");
\&
\&      if (DosQueryProcAddr(handle, 0, "dll_perlmain", (PFN*)&f))
\&          die_with(PERL_DLL_BASENAME, ": DLL exports no symbol ", "dll_perlmain", "");
\&      return f(argc, argv, env);
\&  }
.Ve
.SH "Build FAQ"
.IX Header "Build FAQ"
.ie n .SS "Some ""/"" became ""\e"" in pdksh."
.el .SS "Some \f(CW/\fP became \f(CW\e\fP in pdksh."
.IX Subsection "Some / became  in pdksh."
You have a very old pdksh. See \*(L"Prerequisites\*(R".
.ie n .SS "\*(Aqerrno\*(Aq \- unresolved external"
.el .SS "\f(CW\*(Aqerrno\*(Aq\fP \- unresolved external"
.IX Subsection "errno - unresolved external"
You do not have MT-safe \fIdb.lib\fR. See \*(L"Prerequisites\*(R".
.SS "Problems with tr or sed"
.IX Subsection "Problems with tr or sed"
reported with very old version of tr and sed.
.SS "Some problem (forget which ;\-)"
.IX Subsection "Some problem (forget which ;-)"
You have an older version of \fIperl.dll\fR on your \s-1LIBPATH\s0, which
broke the build of extensions.
.SS "Library ... not found"
.IX Subsection "Library ... not found"
You did not run \f(CW\*(C`omflibs\*(C'\fR. See \*(L"Prerequisites\*(R".
.SS "Segfault in make"
.IX Subsection "Segfault in make"
You use an old version of \s-1GNU\s0 make. See \*(L"Prerequisites\*(R".
.SS "op/sprintf test failure"
.IX Subsection "op/sprintf test failure"
This can result from a bug in emx sprintf which was fixed in 0.9d fix 03.
.SH "Specific (mis)features of OS/2 port"
.IX Header "Specific (mis)features of OS/2 port"
.ie n .SS """setpriority"", ""getpriority"""
.el .SS "\f(CWsetpriority\fP, \f(CWgetpriority\fP"
.IX Subsection "setpriority, getpriority"
Note that these functions are compatible with *nix, not with the older
ports of '94 \- 95. The priorities are absolute, go from 32 to \-95,
lower is quicker. 0 is the default priority.
.PP
\&\fB\s-1WARNING\s0\fR.  Calling \f(CW\*(C`getpriority\*(C'\fR on a non-existing process could lock
the system before Warp3 fixpak22.  Starting with Warp3, Perl will use
a workaround: it aborts \fIgetpriority()\fR if the process is not present.
This is not possible on older versions \f(CW\*(C`2.*\*(C'\fR, and has a race
condition anyway.
.ie n .SS """system()"""
.el .SS "\f(CWsystem()\fP"
.IX Subsection "system()"
Multi-argument form of \f(CW\*(C`system()\*(C'\fR allows an additional numeric
argument. The meaning of this argument is described in
OS2::Process.
.PP
When finding a program to run, Perl first asks the \s-1OS\s0 to look for executables
on \f(CW\*(C`PATH\*(C'\fR (\s-1OS/2\s0 adds extension \fI.exe\fR if no extension is present).
If not found, it looks for a script with possible extensions 
added in this order: no extension, \fI.cmd\fR, \fI.btm\fR, 
\&\fI.bat\fR, \fI.pl\fR.  If found, Perl checks the start of the file for magic
strings \f(CW"#!"\fR and \f(CW"extproc "\fR.  If found, Perl uses the rest of the
first line as the beginning of the command line to run this script.  The
only mangling done to the first line is extraction of arguments (currently
up to 3), and ignoring of the path-part of the \*(L"interpreter\*(R" name if it can't
be found using the full path.
.PP
E.g., \f(CW\*(C`system \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq, \*(Aqbaz\*(Aq\*(C'\fR may lead Perl to finding
\&\fIC:/emx/bin/foo.cmd\fR with the first line being
.PP
.Vb 1
\& extproc /bin/bash    \-x   \-c
.Ve
.PP
If \fI/bin/bash.exe\fR is not found, then Perl looks for an executable \fIbash.exe\fR on
\&\f(CW\*(C`PATH\*(C'\fR.  If found in \fIC:/emx.add/bin/bash.exe\fR, then the above \fIsystem()\fR is
translated to
.PP
.Vb 1
\&  system qw(C:/emx.add/bin/bash.exe \-x \-c C:/emx/bin/foo.cmd bar baz)
.Ve
.PP
One additional translation is performed: instead of \fI/bin/sh\fR Perl uses
the hardwired-or-customized shell (see \f(CW"PERL_SH_DIR"\fR).
.PP
The above search for \*(L"interpreter\*(R" is recursive: if \fIbash\fR executable is not
found, but \fIbash.btm\fR is found, Perl will investigate its first line etc.
The only hardwired limit on the recursion depth is implicit: there is a limit
4 on the number of additional arguments inserted before the actual arguments
given to \fIsystem()\fR.  In particular, if no additional arguments are specified
on the \*(L"magic\*(R" first lines, then the limit on the depth is 4.
.PP
If Perl finds that the found executable is of \s-1PM\s0 type when the
current session is not, it will start the new process in a separate session of
necessary type.  Call via \f(CW\*(C`OS2::Process\*(C'\fR to disable this magic.
.PP
\&\fB\s-1WARNING\s0\fR.  Due to the described logic, you need to explicitly
specify \fI.com\fR extension if needed.  Moreover, if the executable
\&\fIperl5.6.1\fR is requested, Perl will not look for \fIperl5.6.1.exe\fR.
[This may change in the future.]
.ie n .SS """extproc"" on the first line"
.el .SS "\f(CWextproc\fP on the first line"
.IX Subsection "extproc on the first line"
If the first chars of a Perl script are \f(CW"extproc "\fR, this line is treated
as \f(CW\*(C`#!\*(C'\fR\-line, thus all the switches on this line are processed (twice
if script was started via cmd.exe).  See \*(L"\s-1DESCRIPTION\s0\*(R" in perlrun.
.SS "Additional modules:"
.IX Subsection "Additional modules:"
OS2::Process, \s-1OS2::DLL\s0, \s-1OS2::REXX\s0, OS2::PrfDB, OS2::ExtAttr. These
modules provide access to additional numeric argument for \f(CW\*(C`system\*(C'\fR
and to the information about the running process,
to DLLs having functions with \s-1REXX\s0 signature and to the \s-1REXX\s0 runtime, to
\&\s-1OS/2\s0 databases in the \fI.INI\fR format, and to Extended Attributes.
.PP
Two additional extensions by Andreas Kaiser, \f(CW\*(C`OS2::UPM\*(C'\fR, and
\&\f(CW\*(C`OS2::FTP\*(C'\fR, are included into \f(CW\*(C`ILYAZ\*(C'\fR directory, mirrored on \s-1CPAN\s0.
Other OS/2\-related extensions are available too.
.SS "Prebuilt methods:"
.IX Subsection "Prebuilt methods:"
.ie n .IP """File::Copy::syscopy""" 4
.el .IP "\f(CWFile::Copy::syscopy\fR" 4
.IX Item "File::Copy::syscopy"
used by \f(CW\*(C`File::Copy::copy\*(C'\fR, see File::Copy.
.ie n .IP """DynaLoader::mod2fname""" 4
.el .IP "\f(CWDynaLoader::mod2fname\fR" 4
.IX Item "DynaLoader::mod2fname"
used by \f(CW\*(C`DynaLoader\*(C'\fR for \s-1DLL\s0 name mangling.
.ie n .IP """Cwd::current_drive()""" 4
.el .IP "\f(CWCwd::current_drive()\fR" 4
.IX Item "Cwd::current_drive()"
Self explanatory.
.ie n .IP """Cwd::sys_chdir(name)""" 4
.el .IP "\f(CWCwd::sys_chdir(name)\fR" 4
.IX Item "Cwd::sys_chdir(name)"
leaves drive as it is.
.ie n .IP """Cwd::change_drive(name)""" 4
.el .IP "\f(CWCwd::change_drive(name)\fR" 4
.IX Item "Cwd::change_drive(name)"
changes the \*(L"current\*(R" drive.
.ie n .IP """Cwd::sys_is_absolute(name)""" 4
.el .IP "\f(CWCwd::sys_is_absolute(name)\fR" 4
.IX Item "Cwd::sys_is_absolute(name)"
means has drive letter and is_rooted.
.ie n .IP """Cwd::sys_is_rooted(name)""" 4
.el .IP "\f(CWCwd::sys_is_rooted(name)\fR" 4
.IX Item "Cwd::sys_is_rooted(name)"
means has leading \f(CW\*(C`[/\e\e]\*(C'\fR (maybe after a drive-letter:).
.ie n .IP """Cwd::sys_is_relative(name)""" 4
.el .IP "\f(CWCwd::sys_is_relative(name)\fR" 4
.IX Item "Cwd::sys_is_relative(name)"
means changes with current dir.
.ie n .IP """Cwd::sys_cwd(name)""" 4
.el .IP "\f(CWCwd::sys_cwd(name)\fR" 4
.IX Item "Cwd::sys_cwd(name)"
Interface to cwd from \s-1EMX\s0. Used by \f(CW\*(C`Cwd::cwd\*(C'\fR.
.ie n .IP """Cwd::sys_abspath(name, dir)""" 4
.el .IP "\f(CWCwd::sys_abspath(name, dir)\fR" 4
.IX Item "Cwd::sys_abspath(name, dir)"
Really really odious function to implement. Returns absolute name of
file which would have \f(CW\*(C`name\*(C'\fR if \s-1CWD\s0 were \f(CW\*(C`dir\*(C'\fR.  \f(CW\*(C`Dir\*(C'\fR defaults to the
current dir.
.ie n .IP """Cwd::extLibpath([type])""" 4
.el .IP "\f(CWCwd::extLibpath([type])\fR" 4
.IX Item "Cwd::extLibpath([type])"
Get current value of extended library search path. If \f(CW\*(C`type\*(C'\fR is
present and positive, works with \f(CW\*(C`END_LIBPATH\*(C'\fR, if negative, works
with \f(CW\*(C`LIBPATHSTRICT\*(C'\fR, otherwise with \f(CW\*(C`BEGIN_LIBPATH\*(C'\fR.
.ie n .IP """Cwd::extLibpath_set( path [, type ] )""" 4
.el .IP "\f(CWCwd::extLibpath_set( path [, type ] )\fR" 4
.IX Item "Cwd::extLibpath_set( path [, type ] )"
Set current value of extended library search path. If \f(CW\*(C`type\*(C'\fR is
present and positive, works with <\s-1END_LIBPATH\s0>, if negative, works
with \f(CW\*(C`LIBPATHSTRICT\*(C'\fR, otherwise with \f(CW\*(C`BEGIN_LIBPATH\*(C'\fR.
.ie n .IP """OS2::Error(do_harderror,do_exception)""" 4
.el .IP "\f(CWOS2::Error(do_harderror,do_exception)\fR" 4
.IX Item "OS2::Error(do_harderror,do_exception)"
Returns	\f(CW\*(C`undef\*(C'\fR if it was not called yet, otherwise bit 1 is
set if on the previous call do_harderror was enabled, bit
2 is set if on previous call do_exception was enabled.
.Sp
This function enables/disables error popups associated with 
hardware errors (Disk not ready etc.) and software exceptions.
.Sp
I know of no way to find out the state of popups \fIbefore\fR the first call
to this function.
.ie n .IP """OS2::Errors2Drive(drive)""" 4
.el .IP "\f(CWOS2::Errors2Drive(drive)\fR" 4
.IX Item "OS2::Errors2Drive(drive)"
Returns \f(CW\*(C`undef\*(C'\fR if it was not called yet, otherwise return false if errors
were not requested to be written to a hard drive, or the drive letter if
this was requested.
.Sp
This function may redirect error popups associated with hardware errors
(Disk not ready etc.) and software exceptions to the file \s-1POPUPLOG\s0.OS2 at
the root directory of the specified drive.  Overrides \fIOS2::Error()\fR specified
by individual programs.  Given argument undef will disable redirection.
.Sp
Has global effect, persists after the application exits.
.Sp
I know of no way to find out the state of redirection of popups to the disk
\&\fIbefore\fR the first call to this function.
.IP "\fIOS2::SysInfo()\fR" 4
.IX Item "OS2::SysInfo()"
Returns a hash with system information. The keys of the hash are
.Sp
.Vb 8
\&        MAX_PATH_LENGTH, MAX_TEXT_SESSIONS, MAX_PM_SESSIONS,
\&        MAX_VDM_SESSIONS, BOOT_DRIVE, DYN_PRI_VARIATION,
\&        MAX_WAIT, MIN_SLICE, MAX_SLICE, PAGE_SIZE,
\&        VERSION_MAJOR, VERSION_MINOR, VERSION_REVISION,
\&        MS_COUNT, TIME_LOW, TIME_HIGH, TOTPHYSMEM, TOTRESMEM,
\&        TOTAVAILMEM, MAXPRMEM, MAXSHMEM, TIMER_INTERVAL,
\&        MAX_COMP_LENGTH, FOREGROUND_FS_SESSION,
\&        FOREGROUND_PROCESS
.Ve
.IP "\fIOS2::BootDrive()\fR" 4
.IX Item "OS2::BootDrive()"
Returns a letter without colon.
.ie n .IP """OS2::MorphPM(serve)"", ""OS2::UnMorphPM(serve)""" 4
.el .IP "\f(CWOS2::MorphPM(serve)\fR, \f(CWOS2::UnMorphPM(serve)\fR" 4
.IX Item "OS2::MorphPM(serve), OS2::UnMorphPM(serve)"
Transforms the current application into a \s-1PM\s0 application and back.
The argument true means that a real message loop is going to be served.
\&\fIOS2::MorphPM()\fR returns the \s-1PM\s0 message queue handle as an integer.
.Sp
See \*(L"Centralized management of resources\*(R" for additional details.
.ie n .IP """OS2::Serve_Messages(force)""" 4
.el .IP "\f(CWOS2::Serve_Messages(force)\fR" 4
.IX Item "OS2::Serve_Messages(force)"
Fake on-demand retrieval of outstanding \s-1PM\s0 messages.  If \f(CW\*(C`force\*(C'\fR is false,
will not dispatch messages if a real message loop is known to
be present.  Returns number of messages retrieved.
.Sp
Dies with \*(L"QUITing...\*(R" if \s-1WM_QUIT\s0 message is obtained.
.ie n .IP """OS2::Process_Messages(force [, cnt])""" 4
.el .IP "\f(CWOS2::Process_Messages(force [, cnt])\fR" 4
.IX Item "OS2::Process_Messages(force [, cnt])"
Retrieval of \s-1PM\s0 messages until window creation/destruction.  
If \f(CW\*(C`force\*(C'\fR is false, will not dispatch messages if a real message loop
is known to be present.
.Sp
Returns change in number of windows.  If \f(CW\*(C`cnt\*(C'\fR is given,
it is incremented by the number of messages retrieved.
.Sp
Dies with \*(L"QUITing...\*(R" if \s-1WM_QUIT\s0 message is obtained.
.ie n .IP """OS2::_control87(new,mask)""" 4
.el .IP "\f(CWOS2::_control87(new,mask)\fR" 4
.IX Item "OS2::_control87(new,mask)"
the same as \fI_control87\fR\|(3) of \s-1EMX\s0.  Takes integers as arguments, returns
the previous coprocessor control word as an integer.  Only bits in \f(CW\*(C`new\*(C'\fR which
are present in \f(CW\*(C`mask\*(C'\fR are changed in the control word.
.IP "\fIOS2::get_control87()\fR" 4
.IX Item "OS2::get_control87()"
gets the coprocessor control word as an integer.
.ie n .IP """OS2::set_control87_em(new=MCW_EM,mask=MCW_EM)""" 4
.el .IP "\f(CWOS2::set_control87_em(new=MCW_EM,mask=MCW_EM)\fR" 4
.IX Item "OS2::set_control87_em(new=MCW_EM,mask=MCW_EM)"
The variant of \fIOS2::_control87()\fR with default values good for
handling exception mask: if no \f(CW\*(C`mask\*(C'\fR, uses exception mask part of \f(CW\*(C`new\*(C'\fR
only.  If no \f(CW\*(C`new\*(C'\fR, disables all the floating point exceptions.
.Sp
See \*(L"Misfeatures\*(R" for details.
.ie n .IP """OS2::DLLname([how [, \e&xsub]])""" 4
.el .IP "\f(CWOS2::DLLname([how [, \e&xsub]])\fR" 4
.IX Item "OS2::DLLname([how [, &xsub]])"
Gives the information about the Perl \s-1DLL\s0 or the \s-1DLL\s0 containing the C
function bound to by \f(CW&xsub\fR.  The meaning of \f(CW\*(C`how\*(C'\fR is: default (2):
full name; 0: handle; 1: module name.
.PP
(Note that some of these may be moved to different libraries \-
eventually).
.SS "Prebuilt variables:"
.IX Subsection "Prebuilt variables:"
.ie n .IP "$OS2::emx_rev" 4
.el .IP "\f(CW$OS2::emx_rev\fR" 4
.IX Item "$OS2::emx_rev"
numeric value is the same as _emx_rev of \s-1EMX\s0, a string value the same
as _emx_vprt (similar to \f(CW\*(C`0.9c\*(C'\fR).
.ie n .IP "$OS2::emx_env" 4
.el .IP "\f(CW$OS2::emx_env\fR" 4
.IX Item "$OS2::emx_env"
same as _emx_env of \s-1EMX\s0, a number similar to 0x8001.
.ie n .IP "$OS2::os_ver" 4
.el .IP "\f(CW$OS2::os_ver\fR" 4
.IX Item "$OS2::os_ver"
a number \f(CW\*(C`OS_MAJOR + 0.001 * OS_MINOR\*(C'\fR.
.ie n .IP "$OS2::is_aout" 4
.el .IP "\f(CW$OS2::is_aout\fR" 4
.IX Item "$OS2::is_aout"
true if the Perl library was compiled in \s-1AOUT\s0 format.
.ie n .IP "$OS2::can_fork" 4
.el .IP "\f(CW$OS2::can_fork\fR" 4
.IX Item "$OS2::can_fork"
true if the current executable is an \s-1AOUT\s0 \s-1EMX\s0 executable, so Perl can
fork.  Do not use this, use the portable check for
\&\f(CW$Config::Config\fR{dfork}.
.ie n .IP "$OS2::nsyserror" 4
.el .IP "\f(CW$OS2::nsyserror\fR" 4
.IX Item "$OS2::nsyserror"
This variable (default is 1) controls whether to enforce the contents
of $^E to start with \f(CW\*(C`SYS0003\*(C'\fR\-like id.  If set to 0, then the string
value of $^E is what is available from the \s-1OS/2\s0 message file.  (Some
messages in this file have an \f(CW\*(C`SYS0003\*(C'\fR\-like id prepended, some not.)
.SS "Misfeatures"
.IX Subsection "Misfeatures"
.IP "\(bu" 4
Since \fIflock\fR\|(3) is present in \s-1EMX\s0, but is not functional, it is 
emulated by perl.  To disable the emulations, set environment variable
\&\f(CW\*(C`USE_PERL_FLOCK=0\*(C'\fR.
.IP "\(bu" 4
Here is the list of things which may be \*(L"broken\*(R" on
\&\s-1EMX\s0 (from \s-1EMX\s0 docs):
.RS 4
.IP "\(bu" 4
The functions \fIrecvmsg\fR\|(3), \fIsendmsg\fR\|(3), and \fIsocketpair\fR\|(3) are not
implemented.
.IP "\(bu" 4
\&\fIsock_init\fR\|(3) is not required and not implemented.
.IP "\(bu" 4
\&\fIflock\fR\|(3) is not yet implemented (dummy function).  (Perl has a workaround.)
.IP "\(bu" 4
\&\fIkill\fR\|(3):  Special treatment of PID=0, PID=1 and PID=\-1 is not implemented.
.IP "\(bu" 4
\&\fIwaitpid\fR\|(3):
.Sp
.Vb 3
\&      WUNTRACED
\&              Not implemented.
\&      waitpid() is not implemented for negative values of PID.
.Ve
.RE
.RS 4
.Sp
Note that \f(CW\*(C`kill \-9\*(C'\fR does not work with the current version of \s-1EMX\s0.
.RE
.IP "\(bu" 4
See \*(L"Text-mode filehandles\*(R".
.IP "\(bu" 4
Unix-domain sockets on \s-1OS/2\s0 live in a pseudo-file-system \f(CW\*(C`/sockets/...\*(C'\fR.
To avoid a failure to create a socket with a name of a different form,
\&\f(CW"/socket/"\fR is prepended to the socket name (unless it starts with this
already).
.Sp
This may lead to problems later in case the socket is accessed via the
\&\*(L"usual\*(R" file-system calls using the \*(L"initial\*(R" name.
.IP "\(bu" 4
Apparently, \s-1IBM\s0 used a compiler (for some period of time around '95?) which
changes \s-1FP\s0 mask right and left.  This is not \fIthat\fR bad for \s-1IBM\s0's
programs, but the same compiler was used for DLLs which are used with
general-purpose applications.  When these DLLs are used, the state of
floating-point flags in the application is not predictable.
.Sp
What is much worse, some DLLs change the floating point flags when in
\&\fI_DLLInitTerm()\fR (e.g., \fI\s-1TCP32IP\s0\fR).  This means that even if you do not \fIcall\fR
any function in the \s-1DLL\s0, just the act of loading this \s-1DLL\s0 will reset your
flags.  What is worse, the same compiler was used to compile some \s-1HOOK\s0 DLLs.
Given that \s-1HOOK\s0 dlls are executed in the context of \fIall\fR the applications
in the system, this means a complete unpredictability of floating point
flags on systems using such \s-1HOOK\s0 DLLs.  E.g., \fI\s-1GAMESRVR\s0.DLL\fR of \fB\s-1DIVE\s0\fR
origin changes the floating point flags on each write to the \s-1TTY\s0 of a \s-1VIO\s0
(windowed text-mode) applications.
.Sp
Some other (not completely debugged) situations when \s-1FP\s0 flags change include
some video drivers (?), and some operations related to creation of the windows.
People who code \fBOpenGL\fR may have more experience on this.
.Sp
Perl is generally used in the situation when all the floating-point
exceptions are ignored, as is the default under \s-1EMX\s0.  If they are not ignored,
some benign Perl programs would get a \f(CW\*(C`SIGFPE\*(C'\fR and would die a horrible death.
.Sp
To circumvent this, Perl uses two hacks.  They help against \fIone\fR type of
damage only: \s-1FP\s0 flags changed when loading a \s-1DLL\s0.
.Sp
One of the hacks is to disable floating point exceptions on Perl startup (as
is the default with \s-1EMX\s0).  This helps only with compile-time-linked DLLs
changing the flags before \fImain()\fR had a chance to be called.
.Sp
The other hack is to restore \s-1FP\s0 flags after a call to \fIdlopen()\fR.  This helps
against similar damage done by DLLs \fI_DLLInitTerm()\fR at runtime.  Currently
no way to switch these hacks off is provided.
.SS "Modifications"
.IX Subsection "Modifications"
Perl modifies some standard C library calls in the following ways:
.ie n .IP """popen""" 9
.el .IP "\f(CWpopen\fR" 9
.IX Item "popen"
\&\f(CW\*(C`my_popen\*(C'\fR uses \fIsh.exe\fR if shell is required, cf. \*(L"\s-1PERL_SH_DIR\s0\*(R".
.ie n .IP """tmpnam""" 9
.el .IP "\f(CWtmpnam\fR" 9
.IX Item "tmpnam"
is created using \f(CW\*(C`TMP\*(C'\fR or \f(CW\*(C`TEMP\*(C'\fR environment variable, via
\&\f(CW\*(C`tempnam\*(C'\fR.
.ie n .IP """tmpfile""" 9
.el .IP "\f(CWtmpfile\fR" 9
.IX Item "tmpfile"
If the current directory is not writable, file is created using modified
\&\f(CW\*(C`tmpnam\*(C'\fR, so there may be a race condition.
.ie n .IP """ctermid""" 9
.el .IP "\f(CWctermid\fR" 9
.IX Item "ctermid"
a dummy implementation.
.ie n .IP """stat""" 9
.el .IP "\f(CWstat\fR" 9
.IX Item "stat"
\&\f(CW\*(C`os2_stat\*(C'\fR special-cases \fI/dev/tty\fR and \fI/dev/con\fR.
.ie n .IP """mkdir"", ""rmdir""" 9
.el .IP "\f(CWmkdir\fR, \f(CWrmdir\fR" 9
.IX Item "mkdir, rmdir"
these \s-1EMX\s0 functions do not work if the path contains a trailing \f(CW\*(C`/\*(C'\fR.
Perl contains a workaround for this.
.ie n .IP """flock""" 9
.el .IP "\f(CWflock\fR" 9
.IX Item "flock"
Since \fIflock\fR\|(3) is present in \s-1EMX\s0, but is not functional, it is 
emulated by perl.  To disable the emulations, set environment variable
\&\f(CW\*(C`USE_PERL_FLOCK=0\*(C'\fR.
.SS "Identifying DLLs"
.IX Subsection "Identifying DLLs"
All the DLLs built with the current versions of Perl have \s-1ID\s0 strings
identifying the name of the extension, its version, and the version
of Perl required for this \s-1DLL\s0.  Run \f(CW\*(C`bldlevel DLL\-name\*(C'\fR to find this
info.
.SS "Centralized management of resources"
.IX Subsection "Centralized management of resources"
Since to call certain \s-1OS/2\s0 \s-1API\s0 one needs to have a correctly initialized
\&\f(CW\*(C`Win\*(C'\fR subsystem, OS/2\-specific extensions may require getting \f(CW\*(C`HAB\*(C'\fRs and
\&\f(CW\*(C`HMQ\*(C'\fRs.  If an extension would do it on its own, another extension could
fail to initialize.
.PP
Perl provides a centralized management of these resources:
.ie n .IP """HAB""" 4
.el .IP "\f(CWHAB\fR" 4
.IX Item "HAB"
To get the \s-1HAB\s0, the extension should call \f(CW\*(C`hab = perl_hab_GET()\*(C'\fR in C.  After
this call is performed, \f(CW\*(C`hab\*(C'\fR may be accessed as \f(CW\*(C`Perl_hab\*(C'\fR.  There is
no need to release the \s-1HAB\s0 after it is used.
.Sp
If by some reasons \fIperl.h\fR cannot be included, use
.Sp
.Vb 1
\&  extern int Perl_hab_GET(void);
.Ve
.Sp
instead.
.ie n .IP """HMQ""" 4
.el .IP "\f(CWHMQ\fR" 4
.IX Item "HMQ"
There are two cases:
.RS 4
.IP "\(bu" 4
the extension needs an \f(CW\*(C`HMQ\*(C'\fR only because some \s-1API\s0 will not work otherwise.
Use \f(CW\*(C`serve = 0\*(C'\fR below.
.IP "\(bu" 4
the extension needs an \f(CW\*(C`HMQ\*(C'\fR since it wants to engage in a \s-1PM\s0 event loop.
Use \f(CW\*(C`serve = 1\*(C'\fR below.
.RE
.RS 4
.Sp
To get an \f(CW\*(C`HMQ\*(C'\fR, the extension should call \f(CW\*(C`hmq = perl_hmq_GET(serve)\*(C'\fR in C.
After this call is performed, \f(CW\*(C`hmq\*(C'\fR may be accessed as \f(CW\*(C`Perl_hmq\*(C'\fR.
.Sp
To signal to Perl that \s-1HMQ\s0 is not needed any more, call
\&\f(CW\*(C`perl_hmq_UNSET(serve)\*(C'\fR.  Perl process will automatically morph/unmorph itself
into/from a \s-1PM\s0 process if \s-1HMQ\s0 is needed/not\-needed.  Perl will automatically
enable/disable \f(CW\*(C`WM_QUIT\*(C'\fR message during shutdown if the message queue is
served/not\-served.
.Sp
\&\fB\s-1NOTE\s0\fR.  If during a shutdown there is a message queue which did not disable
\&\s-1WM_QUIT\s0, and which did not process the received \s-1WM_QUIT\s0 message, the
shutdown will be automatically cancelled.  Do not call \f(CWperl_hmq_GET(1)\fR
unless you are going to process messages on an orderly basis.
.RE
.IP "Treating errors reported by \s-1OS/2\s0 \s-1API\s0" 4
.IX Item "Treating errors reported by OS/2 API"
There are two principal conventions (it is useful to call them \f(CW\*(C`Dos*\*(C'\fR
and \f(CW\*(C`Win*\*(C'\fR \- though this part of the function signature is not always
determined by the name of the \s-1API\s0) of reporting the error conditions
of \s-1OS/2\s0 \s-1API\s0.  Most of \f(CW\*(C`Dos*\*(C'\fR APIs report the error code as the result
of the call (so 0 means success, and there are many types of errors).
Most of \f(CW\*(C`Win*\*(C'\fR \s-1API\s0 report success/fail via the result being
\&\f(CW\*(C`TRUE\*(C'\fR/\f(CW\*(C`FALSE\*(C'\fR; to find the reason for the failure one should call
\&\fIWinGetLastError()\fR \s-1API\s0.
.Sp
Some \f(CW\*(C`Win*\*(C'\fR entry points also overload a \*(L"meaningful\*(R" return value
with the error indicator; having a 0 return value indicates an error.
Yet some other \f(CW\*(C`Win*\*(C'\fR entry points overload things even more, and 0
return value may mean a successful call returning a valid value 0, as
well as an error condition; in the case of a 0 return value one should
call \fIWinGetLastError()\fR \s-1API\s0 to distinguish a successful call from a
failing one.
.Sp
By convention, all the calls to \s-1OS/2\s0 \s-1API\s0 should indicate their
failures by resetting $^E.  All the Perl-accessible functions which
call \s-1OS/2\s0 \s-1API\s0 may be broken into two classes: some \fIdie()\fRs when an \s-1API\s0
error is encountered, the other report the error via a false return
value (of course, this does not concern Perl-accessible functions
which \fIexpect\fR a failure of the \s-1OS/2\s0 \s-1API\s0 call, having some workarounds
coded).
.Sp
Obviously, in the situation of the last type of the signature of an \s-1OS/2\s0
\&\s-1API\s0, it is must more convenient for the users if the failure is
indicated by \fIdie()\fRing: one does not need to check $^E to know that
something went wrong.  If, however, this solution is not desirable by
some reason, the code in question should reset $^E to 0 before making
this \s-1OS/2\s0 \s-1API\s0 call, so that the caller of this Perl-accessible
function has a chance to distinguish a success\-but\-0\-return value from
a failure.  (One may return undef as an alternative way of reporting
an error.)
.Sp
The macros to simplify this type of error propagation are
.RS 4
.ie n .IP """CheckOSError(expr)""" 4
.el .IP "\f(CWCheckOSError(expr)\fR" 4
.IX Item "CheckOSError(expr)"
Returns true on error, sets $^E.  Expects \fIexpr()\fR be a call of
\&\f(CW\*(C`Dos*\*(C'\fR\-style \s-1API\s0.
.ie n .IP """CheckWinError(expr)""" 4
.el .IP "\f(CWCheckWinError(expr)\fR" 4
.IX Item "CheckWinError(expr)"
Returns true on error, sets $^E.  Expects \fIexpr()\fR be a call of
\&\f(CW\*(C`Win*\*(C'\fR\-style \s-1API\s0.
.ie n .IP """SaveWinError(expr)""" 4
.el .IP "\f(CWSaveWinError(expr)\fR" 4
.IX Item "SaveWinError(expr)"
Returns \f(CW\*(C`expr\*(C'\fR, sets $^E from \fIWinGetLastError()\fR if \f(CW\*(C`expr\*(C'\fR is false.
.ie n .IP """SaveCroakWinError(expr,die,name1,name2)""" 4
.el .IP "\f(CWSaveCroakWinError(expr,die,name1,name2)\fR" 4
.IX Item "SaveCroakWinError(expr,die,name1,name2)"
Returns \f(CW\*(C`expr\*(C'\fR, sets $^E from \fIWinGetLastError()\fR if \f(CW\*(C`expr\*(C'\fR is false,
and \fIdie()\fRs if \f(CW\*(C`die\*(C'\fR and $^E are true.  The message to die is the
concatenated strings \f(CW\*(C`name1\*(C'\fR and \f(CW\*(C`name2\*(C'\fR, separated by \f(CW": "\fR from
the contents of $^E.
.ie n .IP """WinError_2_Perl_rc""" 4
.el .IP "\f(CWWinError_2_Perl_rc\fR" 4
.IX Item "WinError_2_Perl_rc"
Sets \f(CW\*(C`Perl_rc\*(C'\fR to the return value of \fIWinGetLastError()\fR.
.ie n .IP """FillWinError""" 4
.el .IP "\f(CWFillWinError\fR" 4
.IX Item "FillWinError"
Sets \f(CW\*(C`Perl_rc\*(C'\fR to the return value of \fIWinGetLastError()\fR, and sets $^E
to the corresponding value.
.ie n .IP """FillOSError(rc)""" 4
.el .IP "\f(CWFillOSError(rc)\fR" 4
.IX Item "FillOSError(rc)"
Sets \f(CW\*(C`Perl_rc\*(C'\fR to \f(CW\*(C`rc\*(C'\fR, and sets $^E to the corresponding value.
.RE
.RS 4
.RE
.IP "Loading DLLs and ordinals in DLLs" 4
.IX Item "Loading DLLs and ordinals in DLLs"
Some DLLs are only present in some versions of \s-1OS/2\s0, or in some
configurations of \s-1OS/2\s0.  Some exported entry points are present only
in DLLs shipped with some versions of \s-1OS/2\s0.  If these DLLs and entry
points were linked directly for a Perl executable/DLL or from a Perl
extensions, this binary would work only with the specified
versions/setups.  Even if these entry points were not needed, the
\&\fIload\fR of the executable (or \s-1DLL\s0) would fail.
.Sp
For example, many newer useful APIs are not present in \s-1OS/2\s0 v2; many
PM-related APIs require DLLs not available on floppy-boot setup.
.Sp
To make these calls fail \fIonly when the calls are executed\fR, one
should call these \s-1API\s0 via a dynamic linking \s-1API\s0.  There is a subsystem
in Perl to simplify such type of calls.  A large number of entry
points available for such linking is provided (see \f(CW\*(C`entries_ordinals\*(C'\fR
\&\- and also \f(CW\*(C`PMWIN_entries\*(C'\fR \- in \fIos2ish.h\fR).  These ordinals can be
accessed via the APIs:
.Sp
.Vb 6
\&  CallORD(), DeclFuncByORD(), DeclVoidFuncByORD(),
\&  DeclOSFuncByORD(), DeclWinFuncByORD(), AssignFuncPByORD(),
\&  DeclWinFuncByORD_CACHE(), DeclWinFuncByORD_CACHE_survive(),
\&  DeclWinFuncByORD_CACHE_resetError_survive(),
\&  DeclWinFunc_CACHE(), DeclWinFunc_CACHE_resetError(),
\&  DeclWinFunc_CACHE_survive(), DeclWinFunc_CACHE_resetError_survive()
.Ve
.Sp
See the header files and the C code in the supplied OS/2\-related
modules for the details on usage of these functions.
.Sp
Some of these functions also combine dynaloading semantic with the
error-propagation semantic discussed above.
.SH "Perl flavors"
.IX Header "Perl flavors"
Because of idiosyncrasies of \s-1OS/2\s0 one cannot have all the eggs in the
same basket (though \s-1EMX\s0 environment tries hard to overcome this
limitations, so the situation may somehow improve). There are 4
executables for Perl provided by the distribution:
.SS "\fIperl.exe\fP"
.IX Subsection "perl.exe"
The main workhorse. This is a chimera executable: it is compiled as an
\&\f(CW\*(C`a.out\*(C'\fR\-style executable, but is linked with \f(CW\*(C`omf\*(C'\fR\-style dynamic
library \fIperl.dll\fR, and with dynamic \s-1CRT\s0 \s-1DLL\s0. This executable is a
\&\s-1VIO\s0 application.
.PP
It can load perl dynamic extensions, and it can \fIfork()\fR.
.PP
\&\fBNote.\fR Keep in mind that \fIfork()\fR is needed to open a pipe to yourself.
.SS "\fIperl_.exe\fP"
.IX Subsection "perl_.exe"
This is a statically linked \f(CW\*(C`a.out\*(C'\fR\-style executable. It cannot
load dynamic Perl extensions. The executable supplied in binary
distributions has a lot of extensions prebuilt, thus the above restriction is 
important only if you use custom-built extensions. This executable is a \s-1VIO\s0
application.
.PP
\&\fIThis is the only executable with does not require \s-1OS/2\s0.\fR The
friends locked into \f(CW\*(C`M$\*(C'\fR world would appreciate the fact that this
executable runs under \s-1DOS\s0, Win0.3*, Win0.95 and WinNT with an
appropriate extender. See \*(L"Other OSes\*(R".
.SS "\fIperl_\|_.exe\fP"
.IX Subsection "perl__.exe"
This is the same executable as \fIperl_\|_\|_.exe\fR, but it is a \s-1PM\s0
application.
.PP
\&\fBNote.\fR Usually (unless explicitly redirected during the startup)
\&\s-1STDIN\s0, \s-1STDERR\s0, and \s-1STDOUT\s0 of a \s-1PM\s0
application are redirected to \fInul\fR. However, it is possible to \fIsee\fR
them if you start \f(CW\*(C`perl_\|_.exe\*(C'\fR from a \s-1PM\s0 program which emulates a
console window, like \fIShell mode\fR of Emacs or \s-1EPM\s0. Thus it \fIis
possible\fR to use Perl debugger (see perldebug) to debug your \s-1PM\s0
application (but beware of the message loop lockups \- this will not
work if you have a message queue to serve, unless you hook the serving
into the \fIgetc()\fR function of the debugger).
.PP
Another way to see the output of a \s-1PM\s0 program is to run it as
.PP
.Vb 1
\&  pm_prog args 2>&1 | cat \-
.Ve
.PP
with a shell \fIdifferent\fR from \fIcmd.exe\fR, so that it does not create
a link between a \s-1VIO\s0 session and the session of \f(CW\*(C`pm_porg\*(C'\fR.  (Such a link
closes the \s-1VIO\s0 window.)  E.g., this works with \fIsh.exe\fR \- or with Perl!
.PP
.Vb 2
\&  open P, \*(Aqpm_prog args 2>&1 |\*(Aq or die;
\&  print while <P>;
.Ve
.PP
The flavor \fIperl_\|_.exe\fR is required if you want to start your program without
a \s-1VIO\s0 window present, but not \f(CW\*(C`detach\*(C'\fRed (run \f(CW\*(C`help detach\*(C'\fR for more info).
Very useful for extensions which use \s-1PM\s0, like \f(CW\*(C`Perl/Tk\*(C'\fR or \f(CW\*(C`OpenGL\*(C'\fR.
.PP
Note also that the differences between \s-1PM\s0 and \s-1VIO\s0 executables are only
in the \fIdefault\fR behaviour.  One can start \fIany\fR executable in
\&\fIany\fR kind of session by using the arguments \f(CW\*(C`/fs\*(C'\fR, \f(CW\*(C`/pm\*(C'\fR or
\&\f(CW\*(C`/win\*(C'\fR switches of the command \f(CW\*(C`start\*(C'\fR (of \fI\s-1CMD\s0.EXE\fR or a similar
shell).  Alternatively, one can use the numeric first argument of the
\&\f(CW\*(C`system\*(C'\fR Perl function (see OS2::Process).
.SS "\fIperl_\|_\|_.exe\fP"
.IX Subsection "perl___.exe"
This is an \f(CW\*(C`omf\*(C'\fR\-style executable which is dynamically linked to
\&\fIperl.dll\fR and \s-1CRT\s0 \s-1DLL\s0. I know no advantages of this executable
over \f(CW\*(C`perl.exe\*(C'\fR, but it cannot \fIfork()\fR at all. Well, one advantage is
that the build process is not so convoluted as with \f(CW\*(C`perl.exe\*(C'\fR.
.PP
It is a \s-1VIO\s0 application.
.SS "Why strange names?"
.IX Subsection "Why strange names?"
Since Perl processes the \f(CW\*(C`#!\*(C'\fR\-line (cf. 
\&\*(L"\s-1DESCRIPTION\s0\*(R" in perlrun, \*(L"Command Switches\*(R" in perlrun,
\&\*(L"No Perl script found in input\*(R" in perldiag), it should know when a
program \fIis a Perl\fR. There is some naming convention which allows
Perl to distinguish correct lines from wrong ones. The above names are
almost the only names allowed by this convention which do not contain
digits (which have absolutely different semantics).
.SS "Why dynamic linking?"
.IX Subsection "Why dynamic linking?"
Well, having several executables dynamically linked to the same huge
library has its advantages, but this would not substantiate the
additional work to make it compile. The reason is the complicated-to-developers
but very quick and convenient-to-users \*(L"hard\*(R" dynamic linking used by \s-1OS/2\s0.
.PP
There are two distinctive features of the dyna-linking model of \s-1OS/2:\s0
first, all the references to external functions are resolved at the compile time;
second, there is no runtime fixup of the DLLs after they are loaded into memory.
The first feature is an enormous advantage over other models: it avoids
conflicts when several DLLs used by an application export entries with
the same name.  In such cases \*(L"other\*(R" models of dyna-linking just choose
between these two entry points using some random criterion \- with predictable
disasters as results.  But it is the second feature which requires the build
of \fIperl.dll\fR.
.PP
The address tables of DLLs are patched only once, when they are
loaded. The addresses of the entry points into DLLs are guaranteed to be
the same for all the programs which use the same \s-1DLL\s0.  This removes the
runtime fixup \- once \s-1DLL\s0 is loaded, its code is read-only.
.PP
While this allows some (significant?) performance advantages, this makes life
much harder for developers, since the above scheme makes it impossible
for a \s-1DLL\s0 to be \*(L"linked\*(R" to a symbol in the \fI.EXE\fR file.  Indeed, this
would need a \s-1DLL\s0 to have different relocations tables for the
(different) executables which use this \s-1DLL\s0.
.PP
However, a dynamically loaded Perl extension is forced to use some symbols
from the perl
executable, e.g., to know how to find the arguments to the functions:
the arguments live on the perl
internal evaluation stack. The solution is to put the main code of
the interpreter into a \s-1DLL\s0, and make the \fI.EXE\fR file which just loads
this \s-1DLL\s0 into memory and supplies command-arguments.  The extension \s-1DLL\s0
cannot link to symbols in \fI.EXE\fR, but it has no problem linking
to symbols in the \fI.DLL\fR.
.PP
This \fIgreatly\fR increases the load time for the application (as well as
complexity of the compilation). Since interpreter is in a \s-1DLL\s0,
the C \s-1RTL\s0 is basically forced to reside in a \s-1DLL\s0 as well (otherwise
extensions would not be able to use \s-1CRT\s0).  There are some advantages if
you use different flavors of perl, such as running \fIperl.exe\fR and
\&\fIperl_\|_.exe\fR simultaneously: they share the memory of \fIperl.dll\fR.
.PP
\&\fB\s-1NOTE\s0\fR.  There is one additional effect which makes DLLs more wasteful:
DLLs are loaded in the shared memory region, which is a scarse resource
given the 512M barrier of the \*(L"standard\*(R" \s-1OS/2\s0 virtual memory.  The code of
\&\fI.EXE\fR files is also shared by all the processes which use the particular
\&\fI.EXE\fR, but they are \*(L"shared in the private address space of the process\*(R";
this is possible because the address at which different sections
of the \fI.EXE\fR file are loaded is decided at compile-time, thus all the
processes have these sections loaded at same addresses, and no fixup
of internal links inside the \fI.EXE\fR is needed.
.PP
Since DLLs may be loaded at run time, to have the same mechanism for DLLs
one needs to have the address range of \fIany of the loaded\fR DLLs in the
system to be available \fIin all the processes\fR which did not load a particular
\&\s-1DLL\s0 yet.  This is why the DLLs are mapped to the shared memory region.
.SS "Why chimera build?"
.IX Subsection "Why chimera build?"
Current \s-1EMX\s0 environment does not allow DLLs compiled using Unixish
\&\f(CW\*(C`a.out\*(C'\fR format to export symbols for data (or at least some types of
data). This forces \f(CW\*(C`omf\*(C'\fR\-style compile of \fIperl.dll\fR.
.PP
Current \s-1EMX\s0 environment does not allow \fI.EXE\fR files compiled in
\&\f(CW\*(C`omf\*(C'\fR format to \fIfork()\fR. \fIfork()\fR is needed for exactly three Perl
operations:
.IP "\(bu" 4
explicit \fIfork()\fR in the script,
.IP "\(bu" 4
\&\f(CW\*(C`open FH, "|\-"\*(C'\fR
.IP "\(bu" 4
\&\f(CW\*(C`open FH, "\-|"\*(C'\fR, in other words, opening pipes to itself.
.PP
While these operations are not questions of life and death, they are
needed for a lot of
useful scripts. This forces \f(CW\*(C`a.out\*(C'\fR\-style compile of
\&\fIperl.exe\fR.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
Here we list environment variables with are either \s-1OS/2\-\s0 and \s-1DOS\-\s0 and
Win*\-specific, or are more important under \s-1OS/2\s0 than under other OSes.
.ie n .SS """PERLLIB_PREFIX"""
.el .SS "\f(CWPERLLIB_PREFIX\fP"
.IX Subsection "PERLLIB_PREFIX"
Specific for \s-1EMX\s0 port. Should have the form
.PP
.Vb 1
\&  path1;path2
.Ve
.PP
or
.PP
.Vb 1
\&  path1 path2
.Ve
.PP
If the beginning of some prebuilt path matches \fIpath1\fR, it is
substituted with \fIpath2\fR.
.PP
Should be used if the perl library is moved from the default
location in preference to \f(CW\*(C`PERL(5)LIB\*(C'\fR, since this would not leave wrong
entries in \f(CW@INC\fR.  For example, if the compiled version of perl looks for \f(CW@INC\fR
in \fIf:/perllib/lib\fR, and you want to install the library in
\&\fIh:/opt/gnu\fR, do
.PP
.Vb 1
\&  set PERLLIB_PREFIX=f:/perllib/lib;h:/opt/gnu
.Ve
.PP
This will cause Perl with the prebuilt \f(CW@INC\fR of
.PP
.Vb 5
\&  f:/perllib/lib/5.00553/os2
\&  f:/perllib/lib/5.00553
\&  f:/perllib/lib/site_perl/5.00553/os2
\&  f:/perllib/lib/site_perl/5.00553
\&  .
.Ve
.PP
to use the following \f(CW@INC:\fR
.PP
.Vb 5
\&  h:/opt/gnu/5.00553/os2
\&  h:/opt/gnu/5.00553
\&  h:/opt/gnu/site_perl/5.00553/os2
\&  h:/opt/gnu/site_perl/5.00553
\&  .
.Ve
.ie n .SS """PERL_BADLANG"""
.el .SS "\f(CWPERL_BADLANG\fP"
.IX Subsection "PERL_BADLANG"
If 0, perl ignores \fIsetlocale()\fR failing. May be useful with some
strange \fIlocale\fRs.
.ie n .SS """PERL_BADFREE"""
.el .SS "\f(CWPERL_BADFREE\fP"
.IX Subsection "PERL_BADFREE"
If 0, perl would not warn of in case of unwarranted \fIfree()\fR. With older
perls this might be
useful in conjunction with the module DB_File, which was buggy when
dynamically linked and OMF-built.
.PP
Should not be set with newer Perls, since this may hide some \fIreal\fR problems.
.ie n .SS """PERL_SH_DIR"""
.el .SS "\f(CWPERL_SH_DIR\fP"
.IX Subsection "PERL_SH_DIR"
Specific for \s-1EMX\s0 port. Gives the directory part of the location for
\&\fIsh.exe\fR.
.ie n .SS """USE_PERL_FLOCK"""
.el .SS "\f(CWUSE_PERL_FLOCK\fP"
.IX Subsection "USE_PERL_FLOCK"
Specific for \s-1EMX\s0 port. Since \fIflock\fR\|(3) is present in \s-1EMX\s0, but is not 
functional, it is emulated by perl.  To disable the emulations, set 
environment variable \f(CW\*(C`USE_PERL_FLOCK=0\*(C'\fR.
.ie n .SS """TMP"" or ""TEMP"""
.el .SS "\f(CWTMP\fP or \f(CWTEMP\fP"
.IX Subsection "TMP or TEMP"
Specific for \s-1EMX\s0 port. Used as storage place for temporary files.
.SH "Evolution"
.IX Header "Evolution"
Here we list major changes which could make you by surprise.
.SS "Text-mode filehandles"
.IX Subsection "Text-mode filehandles"
Starting from version 5.8, Perl uses a builtin translation layer for
text-mode files.  This replaces the efficient well-tested \s-1EMX\s0 layer by
some code which should be best characterized as a \*(L"quick hack\*(R".
.PP
In addition to possible bugs and an inability to follow changes to the
translation policy with off/on switches of \s-1TERMIO\s0 translation, this
introduces a serious incompatible change: before \fIsysread()\fR on
text-mode filehandles would go through the translation layer, now it
would not.
.SS "Priorities"
.IX Subsection "Priorities"
\&\f(CW\*(C`setpriority\*(C'\fR and \f(CW\*(C`getpriority\*(C'\fR are not compatible with earlier
ports by Andreas Kaiser. See \f(CW"setpriority, getpriority"\fR.
.SS "\s-1DLL\s0 name mangling: pre 5.6.2"
.IX Subsection "DLL name mangling: pre 5.6.2"
With the release 5.003_01 the dynamically loadable libraries
should be rebuilt when a different version of Perl is compiled. In particular,
DLLs (including \fIperl.dll\fR) are now created with the names
which contain a checksum, thus allowing workaround for \s-1OS/2\s0 scheme of
caching DLLs.
.PP
It may be possible to code a simple workaround which would
.IP "\(bu" 4
find the old DLLs looking through the old \f(CW@INC\fR;
.IP "\(bu" 4
mangle the names according to the scheme of new perl and copy the DLLs to
these names;
.IP "\(bu" 4
edit the internal \f(CW\*(C`LX\*(C'\fR tables of \s-1DLL\s0 to reflect the change of the name
(probably not needed for Perl extension DLLs, since the internally coded names
are not used for \*(L"specific\*(R" DLLs, they used only for \*(L"global\*(R" DLLs).
.IP "\(bu" 4
edit the internal \f(CW\*(C`IMPORT\*(C'\fR tables and change the name of the \*(L"old\*(R"
\&\fIperl????.dll\fR to the \*(L"new\*(R" \fIperl????.dll\fR.
.SS "\s-1DLL\s0 name mangling: 5.6.2 and beyond"
.IX Subsection "DLL name mangling: 5.6.2 and beyond"
In fact mangling of \fIextension\fR DLLs was done due to misunderstanding
of the \s-1OS/2\s0 dynaloading model.  \s-1OS/2\s0 (effectively) maintains two
different tables of loaded \s-1DLL:\s0
.IP "Global DLLs" 4
.IX Item "Global DLLs"
those loaded by the base name from \f(CW\*(C`LIBPATH\*(C'\fR; including those
associated at link time;
.IP "specific DLLs" 4
.IX Item "specific DLLs"
loaded by the full name.
.PP
When resolving a request for a global \s-1DLL\s0, the table of already-loaded
specific DLLs is (effectively) ignored; moreover, specific DLLs are
\&\fIalways\fR loaded from the prescribed path.
.PP
There is/was a minor twist which makes this scheme fragile: what to do
with DLLs loaded from
.ie n .IP """BEGINLIBPATH"" and ""ENDLIBPATH""" 4
.el .IP "\f(CWBEGINLIBPATH\fR and \f(CWENDLIBPATH\fR" 4
.IX Item "BEGINLIBPATH and ENDLIBPATH"
(which depend on the process)
.ie n .IP "\fI.\fR from ""LIBPATH""" 4
.el .IP "\fI.\fR from \f(CWLIBPATH\fR" 4
.IX Item ". from LIBPATH"
which \fIeffectively\fR depends on the process (although \f(CW\*(C`LIBPATH\*(C'\fR is the
same for all the processes).
.PP
Unless \f(CW\*(C`LIBPATHSTRICT\*(C'\fR is set to \f(CW\*(C`T\*(C'\fR (and the kernel is after
2000/09/01), such DLLs are considered to be global.  When loading a
global \s-1DLL\s0 it is first looked in the table of already-loaded global
DLLs.  Because of this the fact that one executable loaded a \s-1DLL\s0 from
\&\f(CW\*(C`BEGINLIBPATH\*(C'\fR and \f(CW\*(C`ENDLIBPATH\*(C'\fR, or \fI.\fR from \f(CW\*(C`LIBPATH\*(C'\fR may affect
\&\fIwhich\fR \s-1DLL\s0 is loaded when \fIanother\fR executable requests a \s-1DLL\s0 with
the same name.  \fIThis\fR is the reason for version-specific mangling of
the \s-1DLL\s0 name for perl \s-1DLL\s0.
.PP
Since the Perl extension DLLs are always loaded with the full path,
there is no need to mangle their names in a version-specific ways:
their directory already reflects the corresponding version of perl,
and \f(CW@INC\fR takes into account binary compatibility with older version.
Starting from \f(CW5.6.2\fR the name mangling scheme is fixed to be the
same as for Perl 5.005_53 (same as in a popular binary release).  Thus
new Perls will be able to \fIresolve the names\fR of old extension DLLs
if \f(CW@INC\fR allows finding their directories.
.PP
However, this still does not guarantee that these \s-1DLL\s0 may be loaded.
The reason is the mangling of the name of the \fIPerl \s-1DLL\s0\fR.  And since
the extension DLLs link with the Perl \s-1DLL\s0, extension DLLs for older
versions would load an older Perl \s-1DLL\s0, and would most probably
segfault (since the data in this \s-1DLL\s0 is not properly initialized).
.PP
There is a partial workaround (which can be made complete with newer
\&\s-1OS/2\s0 kernels): create a forwarder \s-1DLL\s0 with the same name as the \s-1DLL\s0 of
the older version of Perl, which forwards the entry points to the
newer Perl's \s-1DLL\s0.  Make this \s-1DLL\s0 accessible on (say) the \f(CW\*(C`BEGINLIBPATH\*(C'\fR of
the new Perl executable.  When the new executable accesses old Perl's
extension DLLs, they would request the old Perl's \s-1DLL\s0 by name, get the
forwarder instead, so effectively will link with the currently running
(new) Perl \s-1DLL\s0.
.PP
This may break in two ways:
.IP "\(bu" 4
Old perl executable is started when a new executable is running has
loaded an extension compiled for the old executable (ouph!).  In this
case the old executable will get a forwarder \s-1DLL\s0 instead of the old
perl \s-1DLL\s0, so would link with the new perl \s-1DLL\s0.  While not directly
fatal, it will behave the same as new executable.  This beats the whole
purpose of explicitly starting an old executable.
.IP "\(bu" 4
A new executable loads an extension compiled for the old executable
when an old perl executable is running.  In this case the extension
will not pick up the forwarder \- with fatal results.
.PP
With support for \f(CW\*(C`LIBPATHSTRICT\*(C'\fR this may be circumvented \- unless
one of DLLs is started from \fI.\fR from \f(CW\*(C`LIBPATH\*(C'\fR (I do not know
whether \f(CW\*(C`LIBPATHSTRICT\*(C'\fR affects this case).
.PP
\&\fB\s-1REMARK\s0\fR.  Unless newer kernels allow \fI.\fR in \f(CW\*(C`BEGINLIBPATH\*(C'\fR (older
do not), this mess cannot be completely cleaned.  (It turns out that
as of the beginning of 2002, \fI.\fR is not allowed, but \fI.\e.\fR is \- and
it has the same effect.)
.PP
\&\fB\s-1REMARK\s0\fR.  \f(CW\*(C`LIBPATHSTRICT\*(C'\fR, \f(CW\*(C`BEGINLIBPATH\*(C'\fR and \f(CW\*(C`ENDLIBPATH\*(C'\fR are
not environment variables, although \fIcmd.exe\fR emulates them on \f(CW\*(C`SET
\&...\*(C'\fR lines.  From Perl they may be accessed by
Cwd::extLibpath and
Cwd::extLibpath_set.
.SS "\s-1DLL\s0 forwarder generation"
.IX Subsection "DLL forwarder generation"
Assume that the old \s-1DLL\s0 is named \fIperlE0AC.dll\fR (as is one for
5.005_53), and the new version is 5.6.1.  Create a file
\&\fIperl5shim.def\-leader\fR with
.PP
.Vb 5
\&  LIBRARY \*(AqperlE0AC\*(Aq INITINSTANCE TERMINSTANCE
\&  DESCRIPTION \*(Aq@#perl5\-porters@perl.org:5.006001#@ Perl module for 5.00553 \-> Perl 5.6.1 forwarder\*(Aq
\&  CODE LOADONCALL
\&  DATA LOADONCALL NONSHARED MULTIPLE
\&  EXPORTS
.Ve
.PP
modifying the versions/names as needed.  Run
.PP
.Vb 1
\& perl \-wnle "next if 0../EXPORTS/; print qq(  \e"$1\e") if /\e"(\ew+)\e"/" perl5.def >lst
.Ve
.PP
in the Perl build directory (to make the \s-1DLL\s0 smaller replace perl5.def
with the definition file for the older version of Perl if present).
.PP
.Vb 2
\& cat perl5shim.def\-leader lst >perl5shim.def
\& gcc \-Zomf \-Zdll \-o perlE0AC.dll perl5shim.def \-s \-llibperl
.Ve
.PP
(ignore multiple \f(CW\*(C`warning L4085\*(C'\fR).
.SS "Threading"
.IX Subsection "Threading"
As of release 5.003_01 perl is linked to multithreaded C \s-1RTL\s0
\&\s-1DLL\s0.  If perl itself is not compiled multithread-enabled, so will not be perl's
\&\fImalloc()\fR. However, extensions may use multiple thread on their own
risk.
.PP
This was needed to compile \f(CW\*(C`Perl/Tk\*(C'\fR for XFree86\-OS/2 out-of-the-box, and
link with DLLs for other useful libraries, which typically are compiled
with \f(CW\*(C`\-Zmt \-Zcrtdll\*(C'\fR.
.SS "Calls to external programs"
.IX Subsection "Calls to external programs"
Due to a popular demand the perl external program calling has been
changed wrt Andreas Kaiser's port.  \fIIf\fR perl needs to call an
external program \fIvia shell\fR, the \fIf:/bin/sh.exe\fR will be called, or
whatever is the override, see \*(L"\s-1PERL_SH_DIR\s0\*(R".
.PP
Thus means that you need to get some copy of a \fIsh.exe\fR as well (I
use one from pdksh). The path \fIF:/bin\fR above is set up automatically during
the build to a correct value on the builder machine, but is
overridable at runtime,
.PP
\&\fBReasons:\fR a consensus on \f(CW\*(C`perl5\-porters\*(C'\fR was that perl should use
one non-overridable shell per platform. The obvious choices for \s-1OS/2\s0
are \fIcmd.exe\fR and \fIsh.exe\fR. Having perl build itself would be impossible
with \fIcmd.exe\fR as a shell, thus I picked up \f(CW\*(C`sh.exe\*(C'\fR. This assures almost
100% compatibility with the scripts coming from *nix. As an added benefit 
this works as well under \s-1DOS\s0 if you use DOS-enabled port of pdksh 
(see \*(L"Prerequisites\*(R").
.PP
\&\fBDisadvantages:\fR currently \fIsh.exe\fR of pdksh calls external programs
via \fIfork()\fR/\fIexec()\fR, and there is \fIno\fR functioning \fIexec()\fR on
\&\s-1OS/2\s0. \fIexec()\fR is emulated by \s-1EMX\s0 by an asynchronous call while the caller
waits for child completion (to pretend that the \f(CW\*(C`pid\*(C'\fR did not change). This
means that 1 \fIextra\fR copy of \fIsh.exe\fR is made active via \fIfork()\fR/\fIexec()\fR,
which may lead to some resources taken from the system (even if we do
not count extra work needed for \fIfork()\fRing).
.PP
Note that this a lesser issue now when we do not spawn \fIsh.exe\fR
unless needed (metachars found).
.PP
One can always start \fIcmd.exe\fR explicitly via
.PP
.Vb 1
\&  system \*(Aqcmd\*(Aq, \*(Aq/c\*(Aq, \*(Aqmycmd\*(Aq, \*(Aqarg1\*(Aq, \*(Aqarg2\*(Aq, ...
.Ve
.PP
If you need to use \fIcmd.exe\fR, and do not want to hand-edit thousands of your
scripts, the long-term solution proposed on p5\-p is to have a directive
.PP
.Vb 1
\&  use OS2::Cmd;
.Ve
.PP
which will override \fIsystem()\fR, \fIexec()\fR, \f(CW\*(C`\`\`\*(C'\fR, and
\&\f(CW\*(C`open(,\*(Aq...|\*(Aq)\*(C'\fR. With current perl you may override only \fIsystem()\fR,
\&\fIreadpipe()\fR \- the explicit version of \f(CW\*(C`\`\`\*(C'\fR, and maybe \fIexec()\fR. The code
will substitute the one-argument call to \fIsystem()\fR by
\&\f(CW\*(C`CORE::system(\*(Aqcmd.exe\*(Aq, \*(Aq/c\*(Aq, shift)\*(C'\fR.
.PP
If you have some working code for \f(CW\*(C`OS2::Cmd\*(C'\fR, please send it to me,
I will include it into distribution. I have no need for such a module, so
cannot test it.
.PP
For the details of the current situation with calling external programs,
see \*(L"Starting \s-1OS/2\s0 (and \s-1DOS\s0) programs under Perl\*(R".  Set us mention a couple
of features:
.IP "\(bu" 4
External scripts may be called by their basename.  Perl will try the same
extensions as when processing \fB\-S\fR command-line switch.
.IP "\(bu" 4
External scripts starting with \f(CW\*(C`#!\*(C'\fR or \f(CW\*(C`extproc \*(C'\fR will be executed directly,
without calling the shell, by calling the program specified on the rest of
the first line.
.SS "Memory allocation"
.IX Subsection "Memory allocation"
Perl uses its own \fImalloc()\fR under \s-1OS/2\s0 \- interpreters are usually malloc-bound
for speed, but perl is not, since its malloc is lightning-fast.
Perl-memory-usage-tuned benchmarks show that Perl's malloc is 5 times quicker
than \s-1EMX\s0 one.  I do not have convincing data about memory footprint, but
a (pretty random) benchmark showed that Perl's one is 5% better.
.PP
Combination of perl's \fImalloc()\fR and rigid \s-1DLL\s0 name resolution creates
a special problem with library functions which expect their return value to
be \fIfree()\fRd by system's \fIfree()\fR. To facilitate extensions which need to call 
such functions, system memory-allocation functions are still available with
the prefix \f(CW\*(C`emx_\*(C'\fR added. (Currently only \s-1DLL\s0 perl has this, it should 
propagate to \fIperl_.exe\fR shortly.)
.SS "Threads"
.IX Subsection "Threads"
One can build perl with thread support enabled by providing \f(CW\*(C`\-D usethreads\*(C'\fR
option to \fIConfigure\fR.  Currently \s-1OS/2\s0 support of threads is very 
preliminary.
.PP
Most notable problems:
.ie n .IP """COND_WAIT""" 4
.el .IP "\f(CWCOND_WAIT\fR" 4
.IX Item "COND_WAIT"
may have a race condition (but probably does not due to edge-triggered
nature of \s-1OS/2\s0 Event semaphores).  (Needs a reimplementation (in terms of chaining
waiting threads, with the linked list stored in per-thread structure?)?)
.IP "\fIos2.c\fR" 4
.IX Item "os2.c"
has a couple of static variables used in OS/2\-specific functions.  (Need to be
moved to per-thread structure, or serialized?)
.PP
Note that these problems should not discourage experimenting, since they
have a low probability of affecting small programs.
.SH "BUGS"
.IX Header "BUGS"
This description is not updated often (since 5.6.1?), see \fI./os2/Changes\fR
for more info.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ilya Zakharevich, cpan@ilyaz.org
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1).
                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlos25.18.1                                0100644 0001750 0001750 00000340760 12566207443 022655  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLOS2 1"
.TH PERLOS2 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlos2 \- Perl under OS/2, DOS, Win0.3*, Win0.95 and WinNT.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
One can read this document in the following formats:
.PP
.Vb 4
\&        man perlos2
\&        view perl perlos2
\&        explorer perlos2.html
\&        info perlos2
.Ve
.PP
to list some (not all may be available simultaneously), or it may
be read \fIas is\fR: either as \fI\s-1README\s0.os2\fR, or \fIpod/perlos2.pod\fR.
.PP
To read the \fI.INF\fR version of documentation (\fBvery\fR recommended)
outside of \s-1OS/2,\s0 one needs an \s-1IBM\s0's reader (may be available on \s-1IBM\s0
ftp sites (?)  (\s-1URL\s0 anyone?)) or shipped with \s-1PC DOS 7.0\s0 and \s-1IBM\s0's
Visual Age \*(C+ 3.5.
.PP
A copy of a Win* viewer is contained in the \*(L"Just add \s-1OS/2\s0 Warp\*(R" package
.PP
.Vb 1
\&  ftp://ftp.software.ibm.com/ps/products/os2/tools/jaow/jaow.zip
.Ve
.PP
in \fI?:\eJUST_ADD\eview.exe\fR. This gives one an access to \s-1EMX\s0's 
\&\fI.INF\fR docs as well (text form is available in \fI/emx/doc\fR in 
\&\s-1EMX\s0's distribution).  There is also a different viewer named xview.
.PP
Note that if you have \fIlynx.exe\fR or \fInetscape.exe\fR installed, you can follow \s-1WWW\s0 links
from this document in \fI.INF\fR format. If you have \s-1EMX\s0 docs installed 
correctly, you can follow library links (you need to have \f(CW\*(C`view emxbook\*(C'\fR
working by setting \f(CW\*(C`EMXBOOK\*(C'\fR environment variable as it is described
in \s-1EMX\s0 docs).
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Target"
.IX Subsection "Target"
The target is to make \s-1OS/2\s0 one of the best supported platform for
using/building/developing Perl and \fIPerl applications\fR, as well as
make Perl the best language to use under \s-1OS/2.\s0 The secondary target is
to try to make this work under \s-1DOS\s0 and Win* as well (but not \fBtoo\fR hard).
.PP
The current state is quite close to this target. Known limitations:
.IP "\(bu" 5
Some *nix programs use \fIfork()\fR a lot; with the mostly useful flavors of
perl for \s-1OS/2 \s0(there are several built simultaneously) this is
supported; but some flavors do not support this (e.g., when Perl is
called from inside \s-1REXX\s0).  Using \fIfork()\fR after
\&\fIuse\fRing dynamically loading extensions would not work with \fIvery\fR old
versions of \s-1EMX.\s0
.IP "\(bu" 5
You need a separate perl executable \fIperl_\|_.exe\fR (see \*(L"perl_\|_.exe\*(R")
if you want to use \s-1PM\s0 code in your application (as Perl/Tk or OpenGL
Perl modules do) without having a text-mode window present.
.Sp
While using the standard \fIperl.exe\fR from a text-mode window is possible
too, I have seen cases when this causes degradation of the system stability.
Using \fIperl_\|_.exe\fR avoids such a degradation.
.IP "\(bu" 5
There is no simple way to access \s-1WPS\s0 objects. The only way I know
is via \f(CW\*(C`OS2::REXX\*(C'\fR and \f(CW\*(C`SOM\*(C'\fR extensions (see \s-1OS2::REXX\s0, \s-1SOM\s0).
However, we do not have access to
convenience methods of Object-REXX. (Is it possible at all? I know
of no Object-REXX \s-1API.\s0)  The \f(CW\*(C`SOM\*(C'\fR extension (currently in alpha-text)
may eventually remove this shortcoming; however, due to the fact that
\&\s-1DII\s0 is not supported by the \f(CW\*(C`SOM\*(C'\fR module, using \f(CW\*(C`SOM\*(C'\fR is not as
convenient as one would like it.
.PP
Please keep this list up-to-date by informing me about other items.
.SS "Other OSes"
.IX Subsection "Other OSes"
Since \s-1OS/2\s0 port of perl uses a remarkable \s-1EMX\s0 environment, it can
run (and build extensions, and \- possibly \- be built itself) under any
environment which can run \s-1EMX.\s0 The current list is \s-1DOS,\s0
DOS\-inside\-OS/2, Win0.3*, Win0.95 and WinNT. Out of many perl flavors,
only one works, see \*(L"perl_.exe\*(R".
.PP
Note that not all features of Perl are available under these
environments. This depends on the features the \fIextender\fR \- most
probably \s-1RSX \-\s0 decided to implement.
.PP
Cf. \*(L"Prerequisites\*(R".
.SS "Prerequisites"
.IX Subsection "Prerequisites"
.IP "\s-1EMX\s0" 6
.IX Item "EMX"
\&\s-1EMX\s0 runtime is required (may be substituted by \s-1RSX\s0). Note that
it is possible to make \fIperl_.exe\fR to run under \s-1DOS\s0 without any
external support by binding \fIemx.exe\fR/\fIrsx.exe\fR to it, see \f(CW\*(C`emxbind\*(C'\fR. Note
that under \s-1DOS\s0 for best results one should use \s-1RSX\s0 runtime, which
has much more functions working (like \f(CW\*(C`fork\*(C'\fR, \f(CW\*(C`popen\*(C'\fR and so on). In
fact \s-1RSX\s0 is required if there is no \s-1VCPI\s0 present. Note the
\&\s-1RSX\s0 requires \s-1DPMI. \s0 Many implementations of \s-1DP