nt, so only \f(CW\*(C`PID==0\*(C'\fR is truly portable.
.Sp
Portability issues: \*(L"getpgrp\*(R" in perlport.
.IP "getppid" 4
.IX Xref "getppid parent pid"
.IX Item "getppid"
Returns the process id of the parent process.
.Sp
Note for Linux users: Between v5.8.1 and v5.16.0 Perl would work
around non-POSIX thread semantics the minority of Linux systems (and
Debian GNU/kFreeBSD systems) that used LinuxThreads, this emulation
has since been removed. See the documentation for $$ for
details.
.Sp
Portability issues: \*(L"getppid\*(R" in perlport.
.IP "getpriority \s-1WHICH,WHO \s0" 4
.IX Xref "getpriority priority nice"
.IX Item "getpriority WHICH,WHO "
Returns the current priority for a process, a process group, or a user.
(See \fIgetpriority\fR\|(2).)  Will raise a fatal exception if used on a
machine that doesn't implement \fIgetpriority\fR\|(2).
.Sp
Portability issues: \*(L"getpriority\*(R" in perlport.
.IP "getpwnam \s-1NAME \s0" 4
.IX Xref "getpwnam getgrnam gethostbyname getnetbyname getprotobyname getpwuid getgrgid getservbyname gethostbyaddr getnetbyaddr getprotobynumber getservbyport getpwent getgrent gethostent getnetent getprotoent getservent setpwent setgrent sethostent setnetent setprotoent setservent endpwent endgrent endhostent endnetent endprotoent endservent"
.IX Item "getpwnam NAME "
.PD 0
.IP "getgrnam \s-1NAME\s0" 4
.IX Item "getgrnam NAME"
.IP "gethostbyname \s-1NAME\s0" 4
.IX Item "gethostbyname NAME"
.IP "getnetbyname \s-1NAME\s0" 4
.IX Item "getnetbyname NAME"
.IP "getprotobyname \s-1NAME\s0" 4
.IX Item "getprotobyname NAME"
.IP "getpwuid \s-1UID\s0" 4
.IX Item "getpwuid UID"
.IP "getgrgid \s-1GID\s0" 4
.IX Item "getgrgid GID"
.IP "getservbyname \s-1NAME,PROTO\s0" 4
.IX Item "getservbyname NAME,PROTO"
.IP "gethostbyaddr \s-1ADDR,ADDRTYPE\s0" 4
.IX Item "gethostbyaddr ADDR,ADDRTYPE"
.IP "getnetbyaddr \s-1ADDR,ADDRTYPE\s0" 4
.IX Item "getnetbyaddr ADDR,ADDRTYPE"
.IP "getprotobynumber \s-1NUMBER\s0" 4
.IX Item "getprotobynumber NUMBER"
.IP "getservbyport \s-1PORT,PROTO\s0" 4
.IX Item "getservbyport PORT,PROTO"
.IP "getpwent" 4
.IX Item "getpwent"
.IP "getgrent" 4
.IX Item "getgrent"
.IP "gethostent" 4
.IX Item "gethostent"
.IP "getnetent" 4
.IX Item "getnetent"
.IP "getprotoent" 4
.IX Item "getprotoent"
.IP "getservent" 4
.IX Item "getservent"
.IP "setpwent" 4
.IX Item "setpwent"
.IP "setgrent" 4
.IX Item "setgrent"
.IP "sethostent \s-1STAYOPEN\s0" 4
.IX Item "sethostent STAYOPEN"
.IP "setnetent \s-1STAYOPEN\s0" 4
.IX Item "setnetent STAYOPEN"
.IP "setprotoent \s-1STAYOPEN\s0" 4
.IX Item "setprotoent STAYOPEN"
.IP "setservent \s-1STAYOPEN\s0" 4
.IX Item "setservent STAYOPEN"
.IP "endpwent" 4
.IX Item "endpwent"
.IP "endgrent" 4
.IX Item "endgrent"
.IP "endhostent" 4
.IX Item "endhostent"
.IP "endnetent" 4
.IX Item "endnetent"
.IP "endprotoent" 4
.IX Item "endprotoent"
.IP "endservent" 4
.IX Item "endservent"
.PD
These routines are the same as their counterparts in the
system C library.  In list context, the return values from the
various get routines are as follows:
.Sp
.Vb 7
\&    ($name,$passwd,$uid,$gid,
\&       $quota,$comment,$gcos,$dir,$shell,$expire) = getpw*
\&    ($name,$passwd,$gid,$members) = getgr*
\&    ($name,$aliases,$addrtype,$length,@addrs) = gethost*
\&    ($name,$aliases,$addrtype,$net) = getnet*
\&    ($name,$aliases,$proto) = getproto*
\&    ($name,$aliases,$port,$proto) = getserv*
.Ve
.Sp
(If the entry doesn't exist you get an empty list.)
.Sp
The exact meaning of the \f(CW$gcos\fR field varies but it usually contains
the real name of the user (as opposed to the login name) and other
information pertaining to the user.  Beware, however, that in many
system users are able to change this information and therefore it
cannot be trusted and therefore the \f(CW$gcos\fR is tainted (see
perlsec).  The \f(CW$passwd\fR and \f(CW$shell\fR, user's encrypted password and
login shell, are also tainted, for the same reason.
.Sp
In scalar context, you get the name, unless the function was a
lookup by name, in which case you get the other thing, whatever it is.
(If the entry doesn't exist you get the undefined value.)  For example:
.Sp
.Vb 7
\&    $uid   = getpwnam($name);
\&    $name  = getpwuid($num);
\&    $name  = getpwent();
\&    $gid   = getgrnam($name);
\&    $name  = getgrgid($num);
\&    $name  = getgrent();
\&    #etc.
.Ve
.Sp
In \fIgetpw*()\fR the fields \f(CW$quota\fR, \f(CW$comment\fR, and \f(CW$expire\fR are special
in that they are unsupported on many systems.  If the
\&\f(CW$quota\fR is unsupported, it is an empty scalar.  If it is supported, it
usually encodes the disk quota.  If the \f(CW$comment\fR field is unsupported,
it is an empty scalar.  If it is supported it usually encodes some
administrative comment about the user.  In some systems the \f(CW$quota\fR
field may be \f(CW$change\fR or \f(CW$age\fR, fields that have to do with password
aging.  In some systems the \f(CW$comment\fR field may be \f(CW$class\fR.  The \f(CW$expire\fR
field, if present, encodes the expiration period of the account or the
password.  For the availability and the exact meaning of these fields
in your system, please consult \fIgetpwnam\fR\|(3) and your system's 
\&\fIpwd.h\fR file.  You can also find out from within Perl what your
\&\f(CW$quota\fR and \f(CW$comment\fR fields mean and whether you have the \f(CW$expire\fR field
by using the \f(CW\*(C`Config\*(C'\fR module and the values \f(CW\*(C`d_pwquota\*(C'\fR, \f(CW\*(C`d_pwage\*(C'\fR,
\&\f(CW\*(C`d_pwchange\*(C'\fR, \f(CW\*(C`d_pwcomment\*(C'\fR, and \f(CW\*(C`d_pwexpire\*(C'\fR.  Shadow password
files are supported only if your vendor has implemented them in the
intuitive fashion that calling the regular C library routines gets the
shadow versions if you're running under privilege or if there exists
the \fIshadow\fR\|(3) functions as found in System V (this includes Solaris
and Linux).  Those systems that implement a proprietary shadow password
facility are unlikely to be supported.
.Sp
The \f(CW$members\fR value returned by \fIgetgr*()\fR is a space-separated list of
the login names of the members of the group.
.Sp
For the \fIgethost*()\fR functions, if the \f(CW\*(C`h_errno\*(C'\fR variable is supported in
C, it will be returned to you via \f(CW$?\fR if the function call fails.  The
\&\f(CW@addrs\fR value returned by a successful call is a list of raw
addresses returned by the corresponding library call.  In the
Internet domain, each address is four bytes long; you can unpack it
by saying something like:
.Sp
.Vb 1
\&    ($a,$b,$c,$d) = unpack(\*(AqW4\*(Aq,$addr[0]);
.Ve
.Sp
The Socket library makes this slightly easier:
.Sp
.Vb 3
\&    use Socket;
\&    $iaddr = inet_aton("127.1"); # or whatever address
\&    $name  = gethostbyaddr($iaddr, AF_INET);
\&
\&    # or going the other way
\&    $straddr = inet_ntoa($iaddr);
.Ve
.Sp
In the opposite way, to resolve a hostname to the \s-1IP\s0 address
you can write this:
.Sp
.Vb 5
\&    use Socket;
\&    $packed_ip = gethostbyname("www.perl.org");
\&    if (defined $packed_ip) {
\&        $ip_address = inet_ntoa($packed_ip);
\&    }
.Ve
.Sp
Make sure \f(CW\*(C`gethostbyname()\*(C'\fR is called in \s-1SCALAR\s0 context and that
its return value is checked for definedness.
.Sp
The \f(CW\*(C`getprotobynumber\*(C'\fR function, even though it only takes one argument,
has the precedence of a list operator, so beware:
.Sp
.Vb 3
\&    getprotobynumber $number eq \*(Aqicmp\*(Aq   # WRONG
\&    getprotobynumber($number eq \*(Aqicmp\*(Aq)  # actually means this
\&    getprotobynumber($number) eq \*(Aqicmp\*(Aq  # better this way
.Ve
.Sp
If you get tired of remembering which element of the return list
contains which return value, by-name interfaces are provided
in standard modules: \f(CW\*(C`File::stat\*(C'\fR, \f(CW\*(C`Net::hostent\*(C'\fR, \f(CW\*(C`Net::netent\*(C'\fR,
\&\f(CW\*(C`Net::protoent\*(C'\fR, \f(CW\*(C`Net::servent\*(C'\fR, \f(CW\*(C`Time::gmtime\*(C'\fR, \f(CW\*(C`Time::localtime\*(C'\fR,
and \f(CW\*(C`User::grent\*(C'\fR.  These override the normal built-ins, supplying
versions that return objects with the appropriate names
for each field.  For example:
.Sp
.Vb 3
\&   use File::stat;
\&   use User::pwent;
\&   $is_his = (stat($filename)\->uid == pwent($whoever)\->uid);
.Ve
.Sp
Even though it looks as though they're the same method calls (uid),
they aren't, because a \f(CW\*(C`File::stat\*(C'\fR object is different from
a \f(CW\*(C`User::pwent\*(C'\fR object.
.Sp
Portability issues: \*(L"getpwnam\*(R" in perlport to \*(L"endservent\*(R" in perlport.
.IP "getsockname \s-1SOCKET \s0" 4
.IX Xref "getsockname"
.IX Item "getsockname SOCKET "
Returns the packed sockaddr address of this end of the \s-1SOCKET\s0 connection,
in case you don't know the address because you have several different
IPs that the connection might have come in on.
.Sp
.Vb 6
\&    use Socket;
\&    $mysockaddr = getsockname(SOCK);
\&    ($port, $myaddr) = sockaddr_in($mysockaddr);
\&    printf "Connect to %s [%s]\en",
\&       scalar gethostbyaddr($myaddr, AF_INET),
\&       inet_ntoa($myaddr);
.Ve
.IP "getsockopt \s-1SOCKET,LEVEL,OPTNAME \s0" 4
.IX Xref "getsockopt"
.IX Item "getsockopt SOCKET,LEVEL,OPTNAME "
Queries the option named \s-1OPTNAME\s0 associated with \s-1SOCKET\s0 at a given \s-1LEVEL.\s0
Options may exist at multiple protocol levels depending on the socket
type, but at least the uppermost socket level \s-1SOL_SOCKET \s0(defined in the
\&\f(CW\*(C`Socket\*(C'\fR module) will exist.  To query options at another level the
protocol number of the appropriate protocol controlling the option
should be supplied.  For example, to indicate that an option is to be
interpreted by the \s-1TCP\s0 protocol, \s-1LEVEL\s0 should be set to the protocol
number of \s-1TCP,\s0 which you can get using \f(CW\*(C`getprotobyname\*(C'\fR.
.Sp
The function returns a packed string representing the requested socket
option, or \f(CW\*(C`undef\*(C'\fR on error, with the reason for the error placed in
\&\f(CW$!\fR.  Just what is in the packed string depends on \s-1LEVEL\s0 and \s-1OPTNAME\s0;
consult \fIgetsockopt\fR\|(2) for details.  A common case is that the option is an
integer, in which case the result is a packed integer, which you can decode
using \f(CW\*(C`unpack\*(C'\fR with the \f(CW\*(C`i\*(C'\fR (or \f(CW\*(C`I\*(C'\fR) format.
.Sp
Here's an example to test whether Nagle's algorithm is enabled on a socket:
.Sp
.Vb 1
\&    use Socket qw(:all);
\&
\&    defined(my $tcp = getprotobyname("tcp"))
\&        or die "Could not determine the protocol number for tcp";
\&    # my $tcp = IPPROTO_TCP; # Alternative
\&    my $packed = getsockopt($socket, $tcp, TCP_NODELAY)
\&        or die "getsockopt TCP_NODELAY: $!";
\&    my $nodelay = unpack("I", $packed);
\&    print "Nagle\*(Aqs algorithm is turned ",
\&           $nodelay ? "off\en" : "on\en";
.Ve
.Sp
Portability issues: \*(L"getsockopt\*(R" in perlport.
.IP "glob \s-1EXPR \s0" 4
.IX Xref "glob wildcard filename, expansion expand"
.IX Item "glob EXPR "
.PD 0
.IP "glob" 4
.IX Item "glob"
.PD
In list context, returns a (possibly empty) list of filename expansions on
the value of \s-1EXPR\s0 such as the standard Unix shell \fI/bin/csh\fR would do.  In
scalar context, glob iterates through such filename expansions, returning
undef when the list is exhausted.  This is the internal function
implementing the \f(CW\*(C`<*.c>\*(C'\fR operator, but you can use it directly.  If
\&\s-1EXPR\s0 is omitted, \f(CW$_\fR is used.  The \f(CW\*(C`<*.c>\*(C'\fR operator is discussed in
more detail in \*(L"I/O Operators\*(R" in perlop.
.Sp
Note that \f(CW\*(C`glob\*(C'\fR splits its arguments on whitespace and treats
each segment as separate pattern.  As such, \f(CW\*(C`glob("*.c *.h")\*(C'\fR 
matches all files with a \fI.c\fR or \fI.h\fR extension.  The expression
\&\f(CW\*(C`glob(".* *")\*(C'\fR matches all files in the current working directory.
If you want to glob filenames that might contain whitespace, you'll
have to use extra quotes around the spacey filename to protect it.
For example, to glob filenames that have an \f(CW\*(C`e\*(C'\fR followed by a space
followed by an \f(CW\*(C`f\*(C'\fR, use either of:
.Sp
.Vb 3
\&    @spacies = <"*e f*">;
\&    @spacies = glob \*(Aq"*e f*"\*(Aq;
\&    @spacies = glob q("*e f*");
.Ve
.Sp
If you had to get a variable through, you could do this:
.Sp
.Vb 2
\&    @spacies = glob "\*(Aq*${var}e f*\*(Aq";
\&    @spacies = glob qq("*${var}e f*");
.Ve
.Sp
If non-empty braces are the only wildcard characters used in the
\&\f(CW\*(C`glob\*(C'\fR, no filenames are matched, but potentially many strings
are returned.  For example, this produces nine strings, one for
each pairing of fruits and colors:
.Sp
.Vb 1
\&    @many =  glob "{apple,tomato,cherry}={green,yellow,red}";
.Ve
.Sp
This operator is implemented using the standard
\&\f(CW\*(C`File::Glob\*(C'\fR extension.  See File::Glob for details, including
\&\f(CW\*(C`bsd_glob\*(C'\fR which does not treat whitespace as a pattern separator.
.Sp
Portability issues: \*(L"glob\*(R" in perlport.
.IP "gmtime \s-1EXPR \s0" 4
.IX Xref "gmtime UTC Greenwich"
.IX Item "gmtime EXPR "
.PD 0
.IP "gmtime" 4
.IX Item "gmtime"
.PD
Works just like \*(L"localtime\*(R" but the returned values are
localized for the standard Greenwich time zone.
.Sp
Note: When called in list context, \f(CW$isdst\fR, the last value
returned by gmtime, is always \f(CW0\fR.  There is no
Daylight Saving Time in \s-1GMT.\s0
.Sp
Portability issues: \*(L"gmtime\*(R" in perlport.
.IP "goto \s-1LABEL \s0" 4
.IX Xref "goto jump jmp"
.IX Item "goto LABEL "
.PD 0
.IP "goto \s-1EXPR\s0" 4
.IX Item "goto EXPR"
.IP "goto &NAME" 4
.IX Item "goto &NAME"
.PD
The \f(CW\*(C`goto\-LABEL\*(C'\fR form finds the statement labeled with \s-1LABEL\s0 and
resumes execution there.  It can't be used to get out of a block or
subroutine given to \f(CW\*(C`sort\*(C'\fR.  It can be used to go almost anywhere
else within the dynamic scope, including out of subroutines, but it's
usually better to use some other construct such as \f(CW\*(C`last\*(C'\fR or \f(CW\*(C`die\*(C'\fR.
The author of Perl has never felt the need to use this form of \f(CW\*(C`goto\*(C'\fR
(in Perl, that is; C is another matter).  (The difference is that C
does not offer named loops combined with loop control.  Perl does, and
this replaces most structured uses of \f(CW\*(C`goto\*(C'\fR in other languages.)
.Sp
The \f(CW\*(C`goto\-EXPR\*(C'\fR form expects a label name, whose scope will be resolved
dynamically.  This allows for computed \f(CW\*(C`goto\*(C'\fRs per \s-1FORTRAN,\s0 but isn't
necessarily recommended if you're optimizing for maintainability:
.Sp
.Vb 1
\&    goto ("FOO", "BAR", "GLARCH")[$i];
.Ve
.Sp
As shown in this example, \f(CW\*(C`goto\-EXPR\*(C'\fR is exempt from the \*(L"looks like a
function\*(R" rule.  A pair of parentheses following it does not (necessarily)
delimit its argument.  \f(CW\*(C`goto("NE")."XT"\*(C'\fR is equivalent to \f(CW\*(C`goto NEXT\*(C'\fR.
Also, unlike most named operators, this has the same precedence as
assignment.
.Sp
Use of \f(CW\*(C`goto\-LABEL\*(C'\fR or \f(CW\*(C`goto\-EXPR\*(C'\fR to jump into a construct is
deprecated and will issue a warning.  Even then, it may not be used to
go into any construct that requires initialization, such as a
subroutine or a \f(CW\*(C`foreach\*(C'\fR loop.  It also can't be used to go into a
construct that is optimized away.
.Sp
The \f(CW\*(C`goto\-&NAME\*(C'\fR form is quite different from the other forms of
\&\f(CW\*(C`goto\*(C'\fR.  In fact, it isn't a goto in the normal sense at all, and
doesn't have the stigma associated with other gotos.  Instead, it
exits the current subroutine (losing any changes set by \fIlocal()\fR) and
immediately calls in its place the named subroutine using the current
value of \f(CW@_\fR.  This is used by \f(CW\*(C`AUTOLOAD\*(C'\fR subroutines that wish to
load another subroutine and then pretend that the other subroutine had
been called in the first place (except that any modifications to \f(CW@_\fR
in the current subroutine are propagated to the other subroutine.)
After the \f(CW\*(C`goto\*(C'\fR, not even \f(CW\*(C`caller\*(C'\fR will be able to tell that this
routine was called first.
.Sp
\&\s-1NAME\s0 needn't be the name of a subroutine; it can be a scalar variable
containing a code reference or a block that evaluates to a code
reference.
.IP "grep \s-1BLOCK LIST \s0" 4
.IX Xref "grep"
.IX Item "grep BLOCK LIST "
.PD 0
.IP "grep \s-1EXPR,LIST\s0" 4
.IX Item "grep EXPR,LIST"
.PD
This is similar in spirit to, but not the same as, \fIgrep\fR\|(1) and its
relatives.  In particular, it is not limited to using regular expressions.
.Sp
Evaluates the \s-1BLOCK\s0 or \s-1EXPR\s0 for each element of \s-1LIST \s0(locally setting
\&\f(CW$_\fR to each element) and returns the list value consisting of those
elements for which the expression evaluated to true.  In scalar
context, returns the number of times the expression was true.
.Sp
.Vb 1
\&    @foo = grep(!/^#/, @bar);    # weed out comments
.Ve
.Sp
or equivalently,
.Sp
.Vb 1
\&    @foo = grep {!/^#/} @bar;    # weed out comments
.Ve
.Sp
Note that \f(CW$_\fR is an alias to the list value, so it can be used to
modify the elements of the \s-1LIST. \s0 While this is useful and supported,
it can cause bizarre results if the elements of \s-1LIST\s0 are not variables.
Similarly, grep returns aliases into the original list, much as a for
loop's index variable aliases the list elements.  That is, modifying an
element of a list returned by grep (for example, in a \f(CW\*(C`foreach\*(C'\fR, \f(CW\*(C`map\*(C'\fR
or another \f(CW\*(C`grep\*(C'\fR) actually modifies the element in the original list.
This is usually something to be avoided when writing clear code.
.Sp
If \f(CW$_\fR is lexical in the scope where the \f(CW\*(C`grep\*(C'\fR appears (because it has
been declared with the deprecated \f(CW\*(C`my $_\*(C'\fR construct)
then, in addition to being locally aliased to
the list elements, \f(CW$_\fR keeps being lexical inside the block; i.e., it
can't be seen from the outside, avoiding any potential side-effects.
.Sp
See also \*(L"map\*(R" for a list composed of the results of the \s-1BLOCK\s0 or \s-1EXPR.\s0
.IP "hex \s-1EXPR \s0" 4
.IX Xref "hex hexadecimal"
.IX Item "hex EXPR "
.PD 0
.IP "hex" 4
.IX Item "hex"
.PD
Interprets \s-1EXPR\s0 as a hex string and returns the corresponding value.
(To convert strings that might start with either \f(CW0\fR, \f(CW\*(C`0x\*(C'\fR, or \f(CW\*(C`0b\*(C'\fR, see
\&\*(L"oct\*(R".)  If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.Sp
.Vb 2
\&    print hex \*(Aq0xAf\*(Aq; # prints \*(Aq175\*(Aq
\&    print hex \*(AqaF\*(Aq;   # same
.Ve
.Sp
Hex strings may only represent integers.  Strings that would cause
integer overflow trigger a warning.  Leading whitespace is not stripped,
unlike \fIoct()\fR.  To present something as hex, look into \*(L"printf\*(R",
\&\*(L"sprintf\*(R", and \*(L"unpack\*(R".
.IP "import \s-1LIST \s0" 4
.IX Xref "import"
.IX Item "import LIST "
There is no builtin \f(CW\*(C`import\*(C'\fR function.  It is just an ordinary
method (subroutine) defined (or inherited) by modules that wish to export
names to another module.  The \f(CW\*(C`use\*(C'\fR function calls the \f(CW\*(C`import\*(C'\fR method
for the package used.  See also \*(L"use\*(R", perlmod, and Exporter.
.IP "index \s-1STR,SUBSTR,POSITION \s0" 4
.IX Xref "index indexOf InStr"
.IX Item "index STR,SUBSTR,POSITION "
.PD 0
.IP "index \s-1STR,SUBSTR\s0" 4
.IX Item "index STR,SUBSTR"
.PD
The index function searches for one string within another, but without
the wildcard-like behavior of a full regular-expression pattern match.
It returns the position of the first occurrence of \s-1SUBSTR\s0 in \s-1STR\s0 at
or after \s-1POSITION. \s0 If \s-1POSITION\s0 is omitted, starts searching from the
beginning of the string.  \s-1POSITION\s0 before the beginning of the string
or after its end is treated as if it were the beginning or the end,
respectively.  \s-1POSITION\s0 and the return value are based at zero.
If the substring is not found, \f(CW\*(C`index\*(C'\fR returns \-1.
.IP "int \s-1EXPR \s0" 4
.IX Xref "int integer truncate trunc floor"
.IX Item "int EXPR "
.PD 0
.IP "int" 4
.IX Item "int"
.PD
Returns the integer portion of \s-1EXPR. \s0 If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
You should not use this function for rounding: one because it truncates
towards \f(CW0\fR, and two because machine representations of floating-point
numbers can sometimes produce counterintuitive results.  For example,
\&\f(CW\*(C`int(\-6.725/0.025)\*(C'\fR produces \-268 rather than the correct \-269; that's
because it's really more like \-268.99999999999994315658 instead.  Usually,
the \f(CW\*(C`sprintf\*(C'\fR, \f(CW\*(C`printf\*(C'\fR, or the \f(CW\*(C`POSIX::floor\*(C'\fR and \f(CW\*(C`POSIX::ceil\*(C'\fR
functions will serve you better than will \fIint()\fR.
.IP "ioctl \s-1FILEHANDLE,FUNCTION,SCALAR \s0" 4
.IX Xref "ioctl"
.IX Item "ioctl FILEHANDLE,FUNCTION,SCALAR "
Implements the \fIioctl\fR\|(2) function.  You'll probably first have to say
.Sp
.Vb 2
\&    require "sys/ioctl.ph";  # probably in
\&                             # $Config{archlib}/sys/ioctl.ph
.Ve
.Sp
to get the correct function definitions.  If \fIsys/ioctl.ph\fR doesn't
exist or doesn't have the correct definitions you'll have to roll your
own, based on your C header files such as \fI<sys/ioctl.h>\fR.
(There is a Perl script called \fBh2ph\fR that comes with the Perl kit that
may help you in this, but it's nontrivial.)  \s-1SCALAR\s0 will be read and/or
written depending on the \s-1FUNCTION\s0; a C pointer to the string value of \s-1SCALAR\s0
will be passed as the third argument of the actual \f(CW\*(C`ioctl\*(C'\fR call.  (If \s-1SCALAR\s0
has no string value but does have a numeric value, that value will be
passed rather than a pointer to the string value.  To guarantee this to be
true, add a \f(CW0\fR to the scalar before using it.)  The \f(CW\*(C`pack\*(C'\fR and \f(CW\*(C`unpack\*(C'\fR
functions may be needed to manipulate the values of structures used by
\&\f(CW\*(C`ioctl\*(C'\fR.
.Sp
The return value of \f(CW\*(C`ioctl\*(C'\fR (and \f(CW\*(C`fcntl\*(C'\fR) is as follows:
.Sp
.Vb 4
\&    if OS returns:      then Perl returns:
\&        \-1               undefined value
\&         0              string "0 but true"
\&    anything else           that number
.Ve
.Sp
Thus Perl returns true on success and false on failure, yet you can
still easily determine the actual value returned by the operating
system:
.Sp
.Vb 2
\&    $retval = ioctl(...) || \-1;
\&    printf "System returned %d\en", $retval;
.Ve
.Sp
The special string \f(CW"0 but true"\fR is exempt from \fB\-w\fR complaints
about improper numeric conversions.
.Sp
Portability issues: \*(L"ioctl\*(R" in perlport.
.IP "join \s-1EXPR,LIST \s0" 4
.IX Xref "join"
.IX Item "join EXPR,LIST "
Joins the separate strings of \s-1LIST\s0 into a single string with fields
separated by the value of \s-1EXPR,\s0 and returns that new string.  Example:
.Sp
.Vb 1
\&    $rec = join(\*(Aq:\*(Aq, $login,$passwd,$uid,$gid,$gcos,$home,$shell);
.Ve
.Sp
Beware that unlike \f(CW\*(C`split\*(C'\fR, \f(CW\*(C`join\*(C'\fR doesn't take a pattern as its
first argument.  Compare \*(L"split\*(R".
.IP "keys \s-1HASH \s0" 4
.IX Xref "keys key"
.IX Item "keys HASH "
.PD 0
.IP "keys \s-1ARRAY\s0" 4
.IX Item "keys ARRAY"
.IP "keys \s-1EXPR\s0" 4
.IX Item "keys EXPR"
.PD
Called in list context, returns a list consisting of all the keys of the
named hash, or in Perl 5.12 or later only, the indices of an array.  Perl
releases prior to 5.12 will produce a syntax error if you try to use an
array argument.  In scalar context, returns the number of keys or indices.
.Sp
Hash entries are returned in an apparently random order.  The actual random
order is specific to a given hash; the exact same series of operations
on two hashes may result in a different order for each hash. Any insertion
into the hash may change the order, as will any deletion, with the exception
that the most recent key returned by \f(CW\*(C`each\*(C'\fR or \f(CW\*(C`keys\*(C'\fR may be deleted
without changing the order. So long as a given hash is unmodified you may
rely on \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR and \f(CW\*(C`each\*(C'\fR to repeatedly return the same order
as each other. See \*(L"Algorithmic Complexity Attacks\*(R" in perlsec for
details on why hash order is randomized. Aside from the guarantees
provided here the exact details of Perl's hash algorithm and the hash
traversal order are subject to change in any release of Perl.
.Sp
As a side effect, calling \fIkeys()\fR resets the internal iterator of the \s-1HASH\s0 or
\&\s-1ARRAY \s0(see \*(L"each\*(R").  In particular, calling \fIkeys()\fR in void context resets
the iterator with no other overhead.
.Sp
Here is yet another way to print your environment:
.Sp
.Vb 5
\&    @keys = keys %ENV;
\&    @values = values %ENV;
\&    while (@keys) {
\&        print pop(@keys), \*(Aq=\*(Aq, pop(@values), "\en";
\&    }
.Ve
.Sp
or how about sorted by key:
.Sp
.Vb 3
\&    foreach $key (sort(keys %ENV)) {
\&        print $key, \*(Aq=\*(Aq, $ENV{$key}, "\en";
\&    }
.Ve
.Sp
The returned values are copies of the original keys in the hash, so
modifying them will not affect the original hash.  Compare \*(L"values\*(R".
.Sp
To sort a hash by value, you'll need to use a \f(CW\*(C`sort\*(C'\fR function.
Here's a descending numeric sort of a hash by its values:
.Sp
.Vb 3
\&    foreach $key (sort { $hash{$b} <=> $hash{$a} } keys %hash) {
\&        printf "%4d %s\en", $hash{$key}, $key;
\&    }
.Ve
.Sp
Used as an lvalue, \f(CW\*(C`keys\*(C'\fR allows you to increase the number of hash buckets
allocated for the given hash.  This can gain you a measure of efficiency if
you know the hash is going to get big.  (This is similar to pre-extending
an array by assigning a larger number to $#array.)  If you say
.Sp
.Vb 1
\&    keys %hash = 200;
.Ve
.Sp
then \f(CW%hash\fR will have at least 200 buckets allocated for it\-\-256 of them,
in fact, since it rounds up to the next power of two.  These
buckets will be retained even if you do \f(CW\*(C`%hash = ()\*(C'\fR, use \f(CW\*(C`undef
%hash\*(C'\fR if you want to free the storage while \f(CW%hash\fR is still in scope.
You can't shrink the number of buckets allocated for the hash using
\&\f(CW\*(C`keys\*(C'\fR in this way (but you needn't worry about doing this by accident,
as trying has no effect).  \f(CW\*(C`keys @array\*(C'\fR in an lvalue context is a syntax
error.
.Sp
Starting with Perl 5.14, \f(CW\*(C`keys\*(C'\fR can take a scalar \s-1EXPR,\s0 which must contain
a reference to an unblessed hash or array.  The argument will be
dereferenced automatically.  This aspect of \f(CW\*(C`keys\*(C'\fR is considered highly
experimental.  The exact behaviour may change in a future version of Perl.
.Sp
.Vb 2
\&    for (keys $hashref) { ... }
\&    for (keys $obj\->get_arrayref) { ... }
.Ve
.Sp
To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work \fIonly\fR on Perls of
a recent vintage:
.Sp
.Vb 2
\&    use 5.012;  # so keys/values/each work on arrays
\&    use 5.014;  # so keys/values/each work on scalars (experimental)
.Ve
.Sp
See also \f(CW\*(C`each\*(C'\fR, \f(CW\*(C`values\*(C'\fR, and \f(CW\*(C`sort\*(C'\fR.
.IP "kill \s-1SIGNAL, LIST\s0" 4
.IX Item "kill SIGNAL, LIST"
.PD 0
.IP "kill \s-1SIGNAL \s0" 4
.IX Xref "kill signal"
.IX Item "kill SIGNAL "
.PD
Sends a signal to a list of processes.  Returns the number of
processes successfully signaled (which is not necessarily the
same as the number actually killed).
.Sp
.Vb 2
\&    $cnt = kill \*(AqHUP\*(Aq, $child1, $child2;
\&    kill \*(AqKILL\*(Aq, @goners;
.Ve
.Sp
\&\s-1SIGNAL\s0 may be either a signal name (a string) or a signal number.  A signal
name may start with a \f(CW\*(C`SIG\*(C'\fR prefix, thus \f(CW\*(C`FOO\*(C'\fR and \f(CW\*(C`SIGFOO\*(C'\fR refer to the
same signal.  The string form of \s-1SIGNAL\s0 is recommended for portability because
the same signal may have different numbers in different operating systems.
.Sp
A list of signal names supported by the current platform can be found in
\&\f(CW$Config{sig_name}\fR, which is provided by the \f(CW\*(C`Config\*(C'\fR module. See Config
for more details.
.Sp
A negative signal name is the same as a negative signal number, killing process
groups instead of processes.  For example, \f(CW\*(C`kill \*(Aq\-KILL\*(Aq, $pgrp\*(C'\fR and
\&\f(CW\*(C`kill \-9, $pgrp\*(C'\fR will send \f(CW\*(C`SIGKILL\*(C'\fR to the entire process group specified. That
means you usually want to use positive not negative signals.
.Sp
If \s-1SIGNAL\s0 is either the number 0 or the string \f(CW\*(C`ZERO\*(C'\fR (or \f(CW\*(C`SIGZZERO\*(C'\fR),
no signal is sent to
the process, but \f(CW\*(C`kill\*(C'\fR checks whether it's \fIpossible\fR to send a signal to it
(that means, to be brief, that the process is owned by the same user, or we are
the super-user).  This is useful to check that a child process is still
alive (even if only as a zombie) and hasn't changed its \s-1UID. \s0 See
perlport for notes on the portability of this construct.
.Sp
The behavior of kill when a \fI\s-1PROCESS\s0\fR number is zero or negative depends on
the operating system.  For example, on POSIX-conforming systems, zero will
signal the current process group, \-1 will signal all processes, and any
other negative \s-1PROCESS\s0 number will act as a negative signal number and
kill the entire process group specified.
.Sp
If both the \s-1SIGNAL\s0 and the \s-1PROCESS\s0 are negative, the results are undefined.
A warning may be produced in a future version.
.Sp
See \*(L"Signals\*(R" in perlipc for more details.
.Sp
On some platforms such as Windows where the \fIfork()\fR system call is not available.
Perl can be built to emulate \fIfork()\fR at the interpreter level.
This emulation has limitations related to kill that have to be considered,
for code running on Windows and in code intended to be portable.
.Sp
See perlfork for more details.
.Sp
If there is no \fI\s-1LIST\s0\fR of processes, no signal is sent, and the return
value is 0.  This form is sometimes used, however, because it causes
tainting checks to be run.  But see
\&\*(L"Laundering and Detecting Tainted Data\*(R" in perlsec.
.Sp
Portability issues: \*(L"kill\*(R" in perlport.
.IP "last \s-1LABEL \s0" 4
.IX Xref "last break"
.IX Item "last LABEL "
.PD 0
.IP "last \s-1EXPR\s0" 4
.IX Item "last EXPR"
.IP "last" 4
.IX Item "last"
.PD
The \f(CW\*(C`last\*(C'\fR command is like the \f(CW\*(C`break\*(C'\fR statement in C (as used in
loops); it immediately exits the loop in question.  If the \s-1LABEL\s0 is
omitted, the command refers to the innermost enclosing
loop.  The \f(CW\*(C`last EXPR\*(C'\fR form, available starting in Perl
5.18.0, allows a label name to be computed at run time,
and is otherwise identical to \f(CW\*(C`last LABEL\*(C'\fR.  The
\&\f(CW\*(C`continue\*(C'\fR block, if any, is not executed:
.Sp
.Vb 4
\&    LINE: while (<STDIN>) {
\&        last LINE if /^$/;  # exit when done with header
\&        #...
\&    }
.Ve
.Sp
\&\f(CW\*(C`last\*(C'\fR cannot be used to exit a block that returns a value such as
\&\f(CW\*(C`eval {}\*(C'\fR, \f(CW\*(C`sub {}\*(C'\fR, or \f(CW\*(C`do {}\*(C'\fR, and should not be used to exit
a \fIgrep()\fR or \fImap()\fR operation.
.Sp
Note that a block by itself is semantically identical to a loop
that executes once.  Thus \f(CW\*(C`last\*(C'\fR can be used to effect an early
exit out of such a block.
.Sp
See also \*(L"continue\*(R" for an illustration of how \f(CW\*(C`last\*(C'\fR, \f(CW\*(C`next\*(C'\fR, and
\&\f(CW\*(C`redo\*(C'\fR work.
.Sp
Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
\&\f(CW\*(C`last ("foo")."bar"\*(C'\fR will cause \*(L"bar\*(R" to be part of the argument to
\&\f(CW\*(C`last\*(C'\fR.
.IP "lc \s-1EXPR \s0" 4
.IX Xref "lc lowercase"
.IX Item "lc EXPR "
.PD 0
.IP "lc" 4
.IX Item "lc"
.PD
Returns a lowercased version of \s-1EXPR. \s0 This is the internal function
implementing the \f(CW\*(C`\eL\*(C'\fR escape in double-quoted strings.
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.Sp
What gets returned depends on several factors:
.RS 4
.ie n .IP "If ""use bytes"" is in effect:" 4
.el .IP "If \f(CWuse bytes\fR is in effect:" 4
.IX Item "If use bytes is in effect:"
The results follow \s-1ASCII\s0 semantics.  Only characters \f(CW\*(C`A\-Z\*(C'\fR change, to \f(CW\*(C`a\-z\*(C'\fR
respectively.
.ie n .IP "Otherwise, if ""use locale"" (but not ""use locale \*(Aq:not_characters\*(Aq"") is in effect:" 4
.el .IP "Otherwise, if \f(CWuse locale\fR (but not \f(CWuse locale \*(Aq:not_characters\*(Aq\fR) is in effect:" 4
.IX Item "Otherwise, if use locale (but not use locale :not_characters) is in effect:"
Respects current \s-1LC_CTYPE\s0 locale for code points < 256; and uses Unicode
semantics for the remaining code points (this last can only happen if
the \s-1UTF8\s0 flag is also set).  See perllocale.
.Sp
A deficiency in this is that case changes that cross the 255/256
boundary are not well-defined.  For example, the lower case of \s-1LATIN CAPITAL
LETTER SHARP S \s0(U+1E9E) in Unicode semantics is U+00DF (on \s-1ASCII\s0
platforms).   But under \f(CW\*(C`use locale\*(C'\fR, the lower case of U+1E9E is
itself, because 0xDF may not be \s-1LATIN SMALL LETTER SHARP S\s0 in the
current locale, and Perl has no way of knowing if that character even
exists in the locale, much less what code point it is.  Perl returns
the input character unchanged, for all instances (and there aren't
many) where the 255/256 boundary would otherwise be crossed.
.IP "Otherwise, If \s-1EXPR\s0 has the \s-1UTF8\s0 flag set:" 4
.IX Item "Otherwise, If EXPR has the UTF8 flag set:"
Unicode semantics are used for the case change.
.ie n .IP "Otherwise, if ""use feature \*(Aqunicode_strings\*(Aq"" or ""use locale \*(Aq:not_characters\*(Aq"" is in effect:" 4
.el .IP "Otherwise, if \f(CWuse feature \*(Aqunicode_strings\*(Aq\fR or \f(CWuse locale \*(Aq:not_characters\*(Aq\fR is in effect:" 4
.IX Item "Otherwise, if use feature unicode_strings or use locale :not_characters is in effect:"
Unicode semantics are used for the case change.
.IP "Otherwise:" 4
.IX Item "Otherwise:"
\&\s-1ASCII\s0 semantics are used for the case change.  The lowercase of any character
outside the \s-1ASCII\s0 range is the character itself.
.RE
.RS 4
.RE
.IP "lcfirst \s-1EXPR \s0" 4
.IX Xref "lcfirst lowercase"
.IX Item "lcfirst EXPR "
.PD 0
.IP "lcfirst" 4
.IX Item "lcfirst"
.PD
Returns the value of \s-1EXPR\s0 with the first character lowercased.  This
is the internal function implementing the \f(CW\*(C`\el\*(C'\fR escape in
double-quoted strings.
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.Sp
This function behaves the same way under various pragmata, such as in a locale,
as \*(L"lc\*(R" does.
.IP "length \s-1EXPR \s0" 4
.IX Xref "length size"
.IX Item "length EXPR "
.PD 0
.IP "length" 4
.IX Item "length"
.PD
Returns the length in \fIcharacters\fR of the value of \s-1EXPR. \s0 If \s-1EXPR\s0 is
omitted, returns the length of \f(CW$_\fR.  If \s-1EXPR\s0 is undefined, returns
\&\f(CW\*(C`undef\*(C'\fR.
.Sp
This function cannot be used on an entire array or hash to find out how
many elements these have.  For that, use \f(CW\*(C`scalar @array\*(C'\fR and \f(CW\*(C`scalar keys
%hash\*(C'\fR, respectively.
.Sp
Like all Perl character operations, \fIlength()\fR normally deals in logical
characters, not physical bytes.  For how many bytes a string encoded as
\&\s-1UTF\-8\s0 would take up, use \f(CW\*(C`length(Encode::encode_utf8(EXPR))\*(C'\fR (you'll have
to \f(CW\*(C`use Encode\*(C'\fR first).  See Encode and perlunicode.
.IP "_\|_LINE_\|_" 4
.IX Xref "__LINE__"
.IX Item "__LINE__"
A special token that compiles to the current line number.
.IP "link \s-1OLDFILE,NEWFILE \s0" 4
.IX Xref "link"
.IX Item "link OLDFILE,NEWFILE "
Creates a new filename linked to the old filename.  Returns true for
success, false otherwise.
.Sp
Portability issues: \*(L"link\*(R" in perlport.
.IP "listen \s-1SOCKET,QUEUESIZE \s0" 4
.IX Xref "listen"
.IX Item "listen SOCKET,QUEUESIZE "
Does the same thing that the \fIlisten\fR\|(2) system call does.  Returns true if
it succeeded, false otherwise.  See the example in
\&\*(L"Sockets: Client/Server Communication\*(R" in perlipc.
.IP "local \s-1EXPR \s0" 4
.IX Xref "local"
.IX Item "local EXPR "
You really probably want to be using \f(CW\*(C`my\*(C'\fR instead, because \f(CW\*(C`local\*(C'\fR isn't
what most people think of as \*(L"local\*(R".  See
\&\*(L"Private Variables via \fImy()\fR\*(R" in perlsub for details.
.Sp
A local modifies the listed variables to be local to the enclosing
block, file, or eval.  If more than one value is listed, the list must
be placed in parentheses.  See \*(L"Temporary Values via \fIlocal()\fR\*(R" in perlsub
for details, including issues with tied arrays and hashes.
.Sp
The \f(CW\*(C`delete local EXPR\*(C'\fR construct can also be used to localize the deletion
of array/hash elements to the current block.
See \*(L"Localized deletion of elements of composite types\*(R" in perlsub.
.IP "localtime \s-1EXPR \s0" 4
.IX Xref "localtime ctime"
.IX Item "localtime EXPR "
.PD 0
.IP "localtime" 4
.IX Item "localtime"
.PD
Converts a time as returned by the time function to a 9\-element list
with the time analyzed for the local time zone.  Typically used as
follows:
.Sp
.Vb 3
\&    #  0    1    2     3     4    5     6     7     8
\&    ($sec,$min,$hour,$mday,$mon,$year,$wday,$yday,$isdst) =
\&                                                localtime(time);
.Ve
.Sp
All list elements are numeric and come straight out of the C `struct
tm'.  \f(CW$sec\fR, \f(CW$min\fR, and \f(CW$hour\fR are the seconds, minutes, and hours
of the specified time.
.Sp
\&\f(CW$mday\fR is the day of the month and \f(CW$mon\fR the month in
the range \f(CW0..11\fR, with 0 indicating January and 11 indicating December.
This makes it easy to get a month name from a list:
.Sp
.Vb 3
\&    my @abbr = qw(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec);
\&    print "$abbr[$mon] $mday";
\&    # $mon=9, $mday=18 gives "Oct 18"
.Ve
.Sp
\&\f(CW$year\fR contains the number of years since 1900.  To get a 4\-digit
year write:
.Sp
.Vb 1
\&    $year += 1900;
.Ve
.Sp
To get the last two digits of the year (e.g., \*(L"01\*(R" in 2001) do:
.Sp
.Vb 1
\&    $year = sprintf("%02d", $year % 100);
.Ve
.Sp
\&\f(CW$wday\fR is the day of the week, with 0 indicating Sunday and 3 indicating
Wednesday.  \f(CW$yday\fR is the day of the year, in the range \f(CW0..364\fR
(or \f(CW0..365\fR in leap years.)
.Sp
\&\f(CW$isdst\fR is true if the specified time occurs during Daylight Saving
Time, false otherwise.
.Sp
If \s-1EXPR\s0 is omitted, \f(CW\*(C`localtime()\*(C'\fR uses the current time (as returned
by \fItime\fR\|(3)).
.Sp
In scalar context, \f(CW\*(C`localtime()\*(C'\fR returns the \fIctime\fR\|(3) value:
.Sp
.Vb 1
\&    $now_string = localtime;  # e.g., "Thu Oct 13 04:54:34 1994"
.Ve
.Sp
The format of this scalar value is \fBnot\fR locale-dependent
but built into Perl.  For \s-1GMT\s0 instead of local
time use the \*(L"gmtime\*(R" builtin.  See also the
\&\f(CW\*(C`Time::Local\*(C'\fR module (for converting seconds, minutes, hours, and such back to
the integer value returned by \fItime()\fR), and the \s-1POSIX\s0 module's \fIstrftime\fR\|(3)
and \fImktime\fR\|(3) functions.
.Sp
To get somewhat similar but locale-dependent date strings, set up your
locale environment variables appropriately (please see perllocale) and
try for example:
.Sp
.Vb 4
\&    use POSIX qw(strftime);
\&    $now_string = strftime "%a %b %e %H:%M:%S %Y", localtime;
\&    # or for GMT formatted appropriately for your locale:
\&    $now_string = strftime "%a %b %e %H:%M:%S %Y", gmtime;
.Ve
.Sp
Note that the \f(CW%a\fR and \f(CW%b\fR, the short forms of the day of the week
and the month of the year, may not necessarily be three characters wide.
.Sp
The Time::gmtime and Time::localtime modules provide a convenient,
by-name access mechanism to the \fIgmtime()\fR and \fIlocaltime()\fR functions,
respectively.
.Sp
For a comprehensive date and time representation look at the
DateTime module on \s-1CPAN.\s0
.Sp
Portability issues: \*(L"localtime\*(R" in perlport.
.IP "lock \s-1THING \s0" 4
.IX Xref "lock"
.IX Item "lock THING "
This function places an advisory lock on a shared variable or referenced
object contained in \fI\s-1THING\s0\fR until the lock goes out of scope.
.Sp
The value returned is the scalar itself, if the argument is a scalar, or a
reference, if the argument is a hash, array or subroutine.
.Sp
\&\fIlock()\fR is a \*(L"weak keyword\*(R" : this means that if you've defined a function
by this name (before any calls to it), that function will be called
instead.  If you are not under \f(CW\*(C`use threads::shared\*(C'\fR this does nothing.
See threads::shared.
.IP "log \s-1EXPR \s0" 4
.IX Xref "log logarithm e ln base"
.IX Item "log EXPR "
.PD 0
.IP "log" 4
.IX Item "log"
.PD
Returns the natural logarithm (base \fIe\fR) of \s-1EXPR. \s0 If \s-1EXPR\s0 is omitted,
returns the log of \f(CW$_\fR.  To get the
log of another base, use basic algebra:
The base-N log of a number is equal to the natural log of that number
divided by the natural log of N.  For example:
.Sp
.Vb 4
\&    sub log10 {
\&        my $n = shift;
\&        return log($n)/log(10);
\&    }
.Ve
.Sp
See also \*(L"exp\*(R" for the inverse operation.
.IP "lstat \s-1FILEHANDLE \s0" 4
.IX Xref "lstat"
.IX Item "lstat FILEHANDLE "
.PD 0
.IP "lstat \s-1EXPR\s0" 4
.IX Item "lstat EXPR"
.IP "lstat \s-1DIRHANDLE\s0" 4
.IX Item "lstat DIRHANDLE"
.IP "lstat" 4
.IX Item "lstat"
.PD
Does the same thing as the \f(CW\*(C`stat\*(C'\fR function (including setting the
special \f(CW\*(C`_\*(C'\fR filehandle) but stats a symbolic link instead of the file
the symbolic link points to.  If symbolic links are unimplemented on
your system, a normal \f(CW\*(C`stat\*(C'\fR is done.  For much more detailed
information, please see the documentation for \f(CW\*(C`stat\*(C'\fR.
.Sp
If \s-1EXPR\s0 is omitted, stats \f(CW$_\fR.
.Sp
Portability issues: \*(L"lstat\*(R" in perlport.
.IP "m//" 4
.IX Item "m//"
The match operator.  See \*(L"Regexp Quote-Like Operators\*(R" in perlop.
.IP "map \s-1BLOCK LIST \s0" 4
.IX Xref "map"
.IX Item "map BLOCK LIST "
.PD 0
.IP "map \s-1EXPR,LIST\s0" 4
.IX Item "map EXPR,LIST"
.PD
Evaluates the \s-1BLOCK\s0 or \s-1EXPR\s0 for each element of \s-1LIST \s0(locally setting
\&\f(CW$_\fR to each element) and returns the list value composed of the
results of each such evaluation.  In scalar context, returns the
total number of elements so generated.  Evaluates \s-1BLOCK\s0 or \s-1EXPR\s0 in
list context, so each element of \s-1LIST\s0 may produce zero, one, or
more elements in the returned value.
.Sp
.Vb 1
\&    @chars = map(chr, @numbers);
.Ve
.Sp
translates a list of numbers to the corresponding characters.
.Sp
.Vb 1
\&    my @squares = map { $_ * $_ } @numbers;
.Ve
.Sp
translates a list of numbers to their squared values.
.Sp
.Vb 1
\&    my @squares = map { $_ > 5 ? ($_ * $_) : () } @numbers;
.Ve
.Sp
shows that number of returned elements can differ from the number of
input elements.  To omit an element, return an empty list ().
This could also be achieved by writing
.Sp
.Vb 1
\&    my @squares = map { $_ * $_ } grep { $_ > 5 } @numbers;
.Ve
.Sp
which makes the intention more clear.
.Sp
Map always returns a list, which can be
assigned to a hash such that the elements
become key/value pairs.  See perldata for more details.
.Sp
.Vb 1
\&    %hash = map { get_a_key_for($_) => $_ } @array;
.Ve
.Sp
is just a funny way to write
.Sp
.Vb 4
\&    %hash = ();
\&    foreach (@array) {
\&        $hash{get_a_key_for($_)} = $_;
\&    }
.Ve
.Sp
Note that \f(CW$_\fR is an alias to the list value, so it can be used to
modify the elements of the \s-1LIST. \s0 While this is useful and supported,
it can cause bizarre results if the elements of \s-1LIST\s0 are not variables.
Using a regular \f(CW\*(C`foreach\*(C'\fR loop for this purpose would be clearer in
most cases.  See also \*(L"grep\*(R" for an array composed of those items of
the original list for which the \s-1BLOCK\s0 or \s-1EXPR\s0 evaluates to true.
.Sp
If \f(CW$_\fR is lexical in the scope where the \f(CW\*(C`map\*(C'\fR appears (because it has
been declared with the deprecated \f(CW\*(C`my $_\*(C'\fR construct),
then, in addition to being locally aliased to
the list elements, \f(CW$_\fR keeps being lexical inside the block; that is, it
can't be seen from the outside, avoiding any potential side-effects.
.Sp
\&\f(CW\*(C`{\*(C'\fR starts both hash references and blocks, so \f(CW\*(C`map { ...\*(C'\fR could be either
the start of map \s-1BLOCK LIST\s0 or map \s-1EXPR, LIST. \s0 Because Perl doesn't look
ahead for the closing \f(CW\*(C`}\*(C'\fR it has to take a guess at which it's dealing with
based on what it finds just after the
\&\f(CW\*(C`{\*(C'\fR.  Usually it gets it right, but if it
doesn't it won't realize something is wrong until it gets to the \f(CW\*(C`}\*(C'\fR and
encounters the missing (or unexpected) comma.  The syntax error will be
reported close to the \f(CW\*(C`}\*(C'\fR, but you'll need to change something near the \f(CW\*(C`{\*(C'\fR
such as using a unary \f(CW\*(C`+\*(C'\fR to give Perl some help:
.Sp
.Vb 5
\&    %hash = map {  "\eL$_" => 1  } @array # perl guesses EXPR. wrong
\&    %hash = map { +"\eL$_" => 1  } @array # perl guesses BLOCK. right
\&    %hash = map { ("\eL$_" => 1) } @array # this also works
\&    %hash = map {  lc($_) => 1  } @array # as does this.
\&    %hash = map +( lc($_) => 1 ), @array # this is EXPR and works!
\&
\&    %hash = map  ( lc($_), 1 ),   @array # evaluates to (1, @array)
.Ve
.Sp
or to force an anon hash constructor use \f(CW\*(C`+{\*(C'\fR:
.Sp
.Vb 2
\&    @hashes = map +{ lc($_) => 1 }, @array # EXPR, so needs
\&                                           # comma at end
.Ve
.Sp
to get a list of anonymous hashes each with only one entry apiece.
.IP "mkdir \s-1FILENAME,MASK \s0" 4
.IX Xref "mkdir md directory, create"
.IX Item "mkdir FILENAME,MASK "
.PD 0
.IP "mkdir \s-1FILENAME\s0" 4
.IX Item "mkdir FILENAME"
.IP "mkdir" 4
.IX Item "mkdir"
.PD
Creates the directory specified by \s-1FILENAME,\s0 with permissions
specified by \s-1MASK \s0(as modified by \f(CW\*(C`umask\*(C'\fR).  If it succeeds it
returns true; otherwise it returns false and sets \f(CW$!\fR (errno).
\&\s-1MASK\s0 defaults to 0777 if omitted, and \s-1FILENAME\s0 defaults
to \f(CW$_\fR if omitted.
.Sp
In general, it is better to create directories with a permissive \s-1MASK\s0
and let the user modify that with their \f(CW\*(C`umask\*(C'\fR than it is to supply
a restrictive \s-1MASK\s0 and give the user no way to be more permissive.
The exceptions to this rule are when the file or directory should be
kept private (mail files, for instance).  The \fIperlfunc\fR\|(1) entry on
\&\f(CW\*(C`umask\*(C'\fR discusses the choice of \s-1MASK\s0 in more detail.
.Sp
Note that according to the \s-1POSIX 1003.1\-1996\s0 the \s-1FILENAME\s0 may have any
number of trailing slashes.  Some operating and filesystems do not get
this right, so Perl automatically removes all trailing slashes to keep
everyone happy.
.Sp
To recursively create a directory structure, look at
the \f(CW\*(C`mkpath\*(C'\fR function of the File::Path module.
.IP "msgctl \s-1ID,CMD,ARG \s0" 4
.IX Xref "msgctl"
.IX Item "msgctl ID,CMD,ARG "
Calls the System V \s-1IPC\s0 function \fImsgctl\fR\|(2).  You'll probably have to say
.Sp
.Vb 1
\&    use IPC::SysV;
.Ve
.Sp
first to get the correct constant definitions.  If \s-1CMD\s0 is \f(CW\*(C`IPC_STAT\*(C'\fR,
then \s-1ARG\s0 must be a variable that will hold the returned \f(CW\*(C`msqid_ds\*(C'\fR
structure.  Returns like \f(CW\*(C`ioctl\*(C'\fR: the undefined value for error,
\&\f(CW"0 but true"\fR for zero, or the actual return value otherwise.  See also
\&\*(L"SysV \s-1IPC\*(R"\s0 in perlipc and the documentation for \f(CW\*(C`IPC::SysV\*(C'\fR and
\&\f(CW\*(C`IPC::Semaphore\*(C'\fR.
.Sp
Portability issues: \*(L"msgctl\*(R" in perlport.
.IP "msgget \s-1KEY,FLAGS \s0" 4
.IX Xref "msgget"
.IX Item "msgget KEY,FLAGS "
Calls the System V \s-1IPC\s0 function \fImsgget\fR\|(2).  Returns the message queue
id, or \f(CW\*(C`undef\*(C'\fR on error.  See also
\&\*(L"SysV \s-1IPC\*(R"\s0 in perlipc and the documentation for \f(CW\*(C`IPC::SysV\*(C'\fR and
\&\f(CW\*(C`IPC::Msg\*(C'\fR.
.Sp
Portability issues: \*(L"msgget\*(R" in perlport.
.IP "msgrcv \s-1ID,VAR,SIZE,TYPE,FLAGS \s0" 4
.IX Xref "msgrcv"
.IX Item "msgrcv ID,VAR,SIZE,TYPE,FLAGS "
Calls the System V \s-1IPC\s0 function msgrcv to receive a message from
message queue \s-1ID\s0 into variable \s-1VAR\s0 with a maximum message size of
\&\s-1SIZE. \s0 Note that when a message is received, the message type as a
native long integer will be the first thing in \s-1VAR,\s0 followed by the
actual message.  This packing may be opened with \f(CW\*(C`unpack("l! a*")\*(C'\fR.
Taints the variable.  Returns true if successful, false 
on error.  See also \*(L"SysV \s-1IPC\*(R"\s0 in perlipc and the documentation for
\&\f(CW\*(C`IPC::SysV\*(C'\fR and \f(CW\*(C`IPC::SysV::Msg\*(C'\fR.
.Sp
Portability issues: \*(L"msgrcv\*(R" in perlport.
.IP "msgsnd \s-1ID,MSG,FLAGS \s0" 4
.IX Xref "msgsnd"
.IX Item "msgsnd ID,MSG,FLAGS "
Calls the System V \s-1IPC\s0 function msgsnd to send the message \s-1MSG\s0 to the
message queue \s-1ID.  MSG\s0 must begin with the native long integer message
type, be followed by the length of the actual message, and then finally
the message itself.  This kind of packing can be achieved with
\&\f(CW\*(C`pack("l! a*", $type, $message)\*(C'\fR.  Returns true if successful,
false on error.  See also the \f(CW\*(C`IPC::SysV\*(C'\fR
and \f(CW\*(C`IPC::SysV::Msg\*(C'\fR documentation.
.Sp
Portability issues: \*(L"msgsnd\*(R" in perlport.
.IP "my \s-1EXPR \s0" 4
.IX Xref "my"
.IX Item "my EXPR "
.PD 0
.IP "my \s-1TYPE EXPR\s0" 4
.IX Item "my TYPE EXPR"
.IP "my \s-1EXPR : ATTRS\s0" 4
.IX Item "my EXPR : ATTRS"
.IP "my \s-1TYPE EXPR : ATTRS\s0" 4
.IX Item "my TYPE EXPR : ATTRS"
.PD
A \f(CW\*(C`my\*(C'\fR declares the listed variables to be local (lexically) to the
enclosing block, file, or \f(CW\*(C`eval\*(C'\fR.  If more than one value is listed,
the list must be placed in parentheses.
.Sp
The exact semantics and interface of \s-1TYPE\s0 and \s-1ATTRS\s0 are still
evolving.  \s-1TYPE\s0 is currently bound to the use of the \f(CW\*(C`fields\*(C'\fR pragma,
and attributes are handled using the \f(CW\*(C`attributes\*(C'\fR pragma, or starting
from Perl 5.8.0 also via the \f(CW\*(C`Attribute::Handlers\*(C'\fR module.  See
\&\*(L"Private Variables via \fImy()\fR\*(R" in perlsub for details, and fields,
attributes, and Attribute::Handlers.
.IP "next \s-1LABEL \s0" 4
.IX Xref "next continue"
.IX Item "next LABEL "
.PD 0
.IP "next \s-1EXPR\s0" 4
.IX Item "next EXPR"
.IP "next" 4
.IX Item "next"
.PD
The \f(CW\*(C`next\*(C'\fR command is like the \f(CW\*(C`continue\*(C'\fR statement in C; it starts
the next iteration of the loop:
.Sp
.Vb 4
\&    LINE: while (<STDIN>) {
\&        next LINE if /^#/;  # discard comments
\&        #...
\&    }
.Ve
.Sp
Note that if there were a \f(CW\*(C`continue\*(C'\fR block on the above, it would get
executed even on discarded lines.  If \s-1LABEL\s0 is omitted, the command
refers to the innermost enclosing loop.  The \f(CW\*(C`next EXPR\*(C'\fR form, available
as of Perl 5.18.0, allows a label name to be computed at run time, being
otherwise identical to \f(CW\*(C`next LABEL\*(C'\fR.
.Sp
\&\f(CW\*(C`next\*(C'\fR cannot be used to exit a block which returns a value such as
\&\f(CW\*(C`eval {}\*(C'\fR, \f(CW\*(C`sub {}\*(C'\fR, or \f(CW\*(C`do {}\*(C'\fR, and should not be used to exit
a \fIgrep()\fR or \fImap()\fR operation.
.Sp
Note that a block by itself is semantically identical to a loop
that executes once.  Thus \f(CW\*(C`next\*(C'\fR will exit such a block early.
.Sp
See also \*(L"continue\*(R" for an illustration of how \f(CW\*(C`last\*(C'\fR, \f(CW\*(C`next\*(C'\fR, and
\&\f(CW\*(C`redo\*(C'\fR work.
.Sp
Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
\&\f(CW\*(C`next ("foo")."bar"\*(C'\fR will cause \*(L"bar\*(R" to be part of the argument to
\&\f(CW\*(C`next\*(C'\fR.
.IP "no \s-1MODULE VERSION LIST \s0" 4
.IX Xref "no declarations unimporting"
.IX Item "no MODULE VERSION LIST "
.PD 0
.IP "no \s-1MODULE VERSION\s0" 4
.IX Item "no MODULE VERSION"
.IP "no \s-1MODULE LIST\s0" 4
.IX Item "no MODULE LIST"
.IP "no \s-1MODULE\s0" 4
.IX Item "no MODULE"
.IP "no \s-1VERSION\s0" 4
.IX Item "no VERSION"
.PD
See the \f(CW\*(C`use\*(C'\fR function, of which \f(CW\*(C`no\*(C'\fR is the opposite.
.IP "oct \s-1EXPR \s0" 4
.IX Xref "oct octal hex hexadecimal binary bin"
.IX Item "oct EXPR "
.PD 0
.IP "oct" 4
.IX Item "oct"
.PD
Interprets \s-1EXPR\s0 as an octal string and returns the corresponding
value.  (If \s-1EXPR\s0 happens to start off with \f(CW\*(C`0x\*(C'\fR, interprets it as a
hex string.  If \s-1EXPR\s0 starts off with \f(CW\*(C`0b\*(C'\fR, it is interpreted as a
binary string.  Leading whitespace is ignored in all three cases.)
The following will handle decimal, binary, octal, and hex in standard
Perl notation:
.Sp
.Vb 1
\&    $val = oct($val) if $val =~ /^0/;
.Ve
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.   To go the other way (produce a number
in octal), use \fIsprintf()\fR or \fIprintf()\fR:
.Sp
.Vb 2
\&    $dec_perms = (stat("filename"))[2] & 07777;
\&    $oct_perm_str = sprintf "%o", $perms;
.Ve
.Sp
The \fIoct()\fR function is commonly used when a string such as \f(CW644\fR needs
to be converted into a file mode, for example.  Although Perl 
automatically converts strings into numbers as needed, this automatic
conversion assumes base 10.
.Sp
Leading white space is ignored without warning, as too are any trailing 
non-digits, such as a decimal point (\f(CW\*(C`oct\*(C'\fR only handles non-negative
integers, not negative integers or floating point).
.IP "open \s-1FILEHANDLE,EXPR \s0" 4
.IX Xref "open pipe file, open fopen"
.IX Item "open FILEHANDLE,EXPR "
.PD 0
.IP "open \s-1FILEHANDLE,MODE,EXPR\s0" 4
.IX Item "open FILEHANDLE,MODE,EXPR"
.IP "open \s-1FILEHANDLE,MODE,EXPR,LIST\s0" 4
.IX Item "open FILEHANDLE,MODE,EXPR,LIST"
.IP "open \s-1FILEHANDLE,MODE,REFERENCE\s0" 4
.IX Item "open FILEHANDLE,MODE,REFERENCE"
.IP "open \s-1FILEHANDLE\s0" 4
.IX Item "open FILEHANDLE"
.PD
Opens the file whose filename is given by \s-1EXPR,\s0 and associates it with
\&\s-1FILEHANDLE.\s0
.Sp
Simple examples to open a file for reading:
.Sp
.Vb 2
\&    open(my $fh, "<", "input.txt") 
\&        or die "cannot open < input.txt: $!";
.Ve
.Sp
and for writing:
.Sp
.Vb 2
\&    open(my $fh, ">", "output.txt") 
\&        or die "cannot open > output.txt: $!";
.Ve
.Sp
(The following is a comprehensive reference to \fIopen()\fR: for a gentler
introduction you may consider perlopentut.)
.Sp
If \s-1FILEHANDLE\s0 is an undefined scalar variable (or array or hash element), a
new filehandle is autovivified, meaning that the variable is assigned a
reference to a newly allocated anonymous filehandle.  Otherwise if
\&\s-1FILEHANDLE\s0 is an expression, its value is the real filehandle.  (This is
considered a symbolic reference, so \f(CW\*(C`use strict "refs"\*(C'\fR should \fInot\fR be
in effect.)
.Sp
If \s-1EXPR\s0 is omitted, the global (package) scalar variable of the same
name as the \s-1FILEHANDLE\s0 contains the filename.  (Note that lexical 
variables\*(--those declared with \f(CW\*(C`my\*(C'\fR or \f(CW\*(C`state\*(C'\fR\-\-will not work for this
purpose; so if you're using \f(CW\*(C`my\*(C'\fR or \f(CW\*(C`state\*(C'\fR, specify \s-1EXPR\s0 in your
call to open.)
.Sp
If three (or more) arguments are specified, the open mode (including
optional encoding) in the second argument are distinct from the filename in
the third.  If \s-1MODE\s0 is \f(CW\*(C`<\*(C'\fR or nothing, the file is opened for input.
If \s-1MODE\s0 is \f(CW\*(C`>\*(C'\fR, the file is opened for output, with existing files
first being truncated (\*(L"clobbered\*(R") and nonexisting files newly created.
If \s-1MODE\s0 is \f(CW\*(C`>>\*(C'\fR, the file is opened for appending, again being
created if necessary.
.Sp
You can put a \f(CW\*(C`+\*(C'\fR in front of the \f(CW\*(C`>\*(C'\fR or \f(CW\*(C`<\*(C'\fR to
indicate that you want both read and write access to the file; thus
\&\f(CW\*(C`+<\*(C'\fR is almost always preferred for read/write updates\*(--the 
\&\f(CW\*(C`+>\*(C'\fR mode would clobber the file first.  You can't usually use
either read-write mode for updating textfiles, since they have
variable-length records.  See the \fB\-i\fR switch in perlrun for a
better approach.  The file is created with permissions of \f(CW0666\fR
modified by the process's \f(CW\*(C`umask\*(C'\fR value.
.Sp
These various prefixes correspond to the \fIfopen\fR\|(3) modes of \f(CW\*(C`r\*(C'\fR,
\&\f(CW\*(C`r+\*(C'\fR, \f(CW\*(C`w\*(C'\fR, \f(CW\*(C`w+\*(C'\fR, \f(CW\*(C`a\*(C'\fR, and \f(CW\*(C`a+\*(C'\fR.
.Sp
In the one\- and two-argument forms of the call, the mode and filename
should be concatenated (in that order), preferably separated by white
space.  You can\*(--but shouldn't\*(--omit the mode in these forms when that mode
is \f(CW\*(C`<\*(C'\fR.  It is always safe to use the two-argument form of \f(CW\*(C`open\*(C'\fR if
the filename argument is a known literal.
.Sp
For three or more arguments if \s-1MODE\s0 is \f(CW\*(C`|\-\*(C'\fR, the filename is
interpreted as a command to which output is to be piped, and if \s-1MODE\s0
is \f(CW\*(C`\-|\*(C'\fR, the filename is interpreted as a command that pipes
output to us.  In the two-argument (and one-argument) form, one should
replace dash (\f(CW\*(C`\-\*(C'\fR) with the command.
See \*(L"Using \fIopen()\fR for \s-1IPC\*(R"\s0 in perlipc for more examples of this.
(You are not allowed to \f(CW\*(C`open\*(C'\fR to a command that pipes both in \fIand\fR
out, but see IPC::Open2, IPC::Open3, and
\&\*(L"Bidirectional Communication with Another Process\*(R" in perlipc for
alternatives.)
.Sp
In the form of pipe opens taking three or more arguments, if \s-1LIST\s0 is specified
(extra arguments after the command name) then \s-1LIST\s0 becomes arguments
to the command invoked if the platform supports it.  The meaning of
\&\f(CW\*(C`open\*(C'\fR with more than three arguments for non-pipe modes is not yet
defined, but experimental \*(L"layers\*(R" may give extra \s-1LIST\s0 arguments
meaning.
.Sp
In the two-argument (and one-argument) form, opening \f(CW\*(C`<\-\*(C'\fR 
or \f(CW\*(C`\-\*(C'\fR opens \s-1STDIN\s0 and opening \f(CW\*(C`>\-\*(C'\fR opens \s-1STDOUT.\s0
.Sp
You may (and usually should) use the three-argument form of open to specify
I/O layers (sometimes referred to as \*(L"disciplines\*(R") to apply to the handle
that affect how the input and output are processed (see open and
PerlIO for more details).  For example:
.Sp
.Vb 2
\&  open(my $fh, "<:encoding(UTF\-8)", "filename")
\&    || die "can\*(Aqt open UTF\-8 encoded filename: $!";
.Ve
.Sp
opens the UTF8\-encoded file containing Unicode characters;
see perluniintro.  Note that if layers are specified in the
three-argument form, then default layers stored in ${^OPEN} (see perlvar;
usually set by the \fBopen\fR pragma or the switch \fB\-CioD\fR) are ignored.
Those layers will also be ignored if you specifying a colon with no name
following it.  In that case the default layer for the operating system
(:raw on Unix, :crlf on Windows) is used.
.Sp
Open returns nonzero on success, the undefined value otherwise.  If
the \f(CW\*(C`open\*(C'\fR involved a pipe, the return value happens to be the pid of
the subprocess.
.Sp
If you're running Perl on a system that distinguishes between text
files and binary files, then you should check out \*(L"binmode\*(R" for tips
for dealing with this.  The key distinction between systems that need
\&\f(CW\*(C`binmode\*(C'\fR and those that don't is their text file formats.  Systems
like Unix, Mac \s-1OS,\s0 and Plan 9, that end lines with a single
character and encode that character in C as \f(CW"\en"\fR do not
need \f(CW\*(C`binmode\*(C'\fR.  The rest need it.
.Sp
When opening a file, it's seldom a good idea to continue 
if the request failed, so \f(CW\*(C`open\*(C'\fR is frequently used with
\&\f(CW\*(C`die\*(C'\fR.  Even if \f(CW\*(C`die\*(C'\fR won't do what you want (say, in a \s-1CGI\s0 script,
where you want to format a suitable error message (but there are
modules that can help with that problem)) always check
the return value from opening a file.
.Sp
As a special case the three-argument form with a read/write mode and the third
argument being \f(CW\*(C`undef\*(C'\fR:
.Sp
.Vb 1
\&    open(my $tmp, "+>", undef) or die ...
.Ve
.Sp
opens a filehandle to an anonymous temporary file.  Also using \f(CW\*(C`+<\*(C'\fR
works for symmetry, but you really should consider writing something
to the temporary file first.  You will need to \fIseek()\fR to do the
reading.
.Sp
Perl is built using PerlIO by default; Unless you've
changed this (such as building Perl with \f(CW\*(C`Configure \-Uuseperlio\*(C'\fR), you can
open filehandles directly to Perl scalars via:
.Sp
.Vb 1
\&    open($fh, ">", \e$variable) || ..
.Ve
.Sp
To (re)open \f(CW\*(C`STDOUT\*(C'\fR or \f(CW\*(C`STDERR\*(C'\fR as an in-memory file, close it first:
.Sp
.Vb 3
\&    close STDOUT;
\&    open(STDOUT, ">", \e$variable)
\&        or die "Can\*(Aqt open STDOUT: $!";
.Ve
.Sp
General examples:
.Sp
.Vb 3
\&    $ARTICLE = 100;
\&    open(ARTICLE) or die "Can\*(Aqt find article $ARTICLE: $!\en";
\&    while (<ARTICLE>) {...
\&
\&    open(LOG, ">>/usr/spool/news/twitlog");  # (log is reserved)
\&    # if the open fails, output is discarded
\&
\&    open(my $dbase, "+<", "dbase.mine")      # open for update
\&        or die "Can\*(Aqt open \*(Aqdbase.mine\*(Aq for update: $!";
\&
\&    open(my $dbase, "+<dbase.mine")          # ditto
\&        or die "Can\*(Aqt open \*(Aqdbase.mine\*(Aq for update: $!";
\&
\&    open(ARTICLE, "\-|", "caesar <$article")  # decrypt article
\&        or die "Can\*(Aqt start caesar: $!";
\&
\&    open(ARTICLE, "caesar <$article |")      # ditto
\&        or die "Can\*(Aqt start caesar: $!";
\&
\&    open(EXTRACT, "|sort >Tmp$$")            # $$ is our process id
\&        or die "Can\*(Aqt start sort: $!";
\&
\&    # in\-memory files
\&    open(MEMORY, ">", \e$var)
\&        or die "Can\*(Aqt open memory file: $!";
\&    print MEMORY "foo!\en";              # output will appear in $var
\&
\&    # process argument list of files along with any includes
\&
\&    foreach $file (@ARGV) {
\&        process($file, "fh00");
\&    }
\&
\&    sub process {
\&        my($filename, $input) = @_;
\&        $input++;    # this is a string increment
\&        unless (open($input, "<", $filename)) {
\&            print STDERR "Can\*(Aqt open $filename: $!\en";
\&            return;
\&        }
\&
\&        local $_;
\&        while (<$input>) {    # note use of indirection
\&            if (/^#include "(.*)"/) {
\&                process($1, $input);
\&                next;
\&            }
\&            #...          # whatever
\&        }
\&    }
.Ve
.Sp
See perliol for detailed info on PerlIO.
.Sp
You may also, in the Bourne shell tradition, specify an \s-1EXPR\s0 beginning
with \f(CW\*(C`>&\*(C'\fR, in which case the rest of the string is interpreted
as the name of a filehandle (or file descriptor, if numeric) to be
duped (as \f(CWdup(2)\fR) and opened.  You may use \f(CW\*(C`&\*(C'\fR after \f(CW\*(C`>\*(C'\fR,
\&\f(CW\*(C`>>\*(C'\fR, \f(CW\*(C`<\*(C'\fR, \f(CW\*(C`+>\*(C'\fR, \f(CW\*(C`+>>\*(C'\fR, and \f(CW\*(C`+<\*(C'\fR.
The mode you specify should match the mode of the original filehandle.
(Duping a filehandle does not take into account any existing contents
of \s-1IO\s0 buffers.)  If you use the three-argument
form, then you can pass either a
number, the name of a filehandle, or the normal \*(L"reference to a glob\*(R".
.Sp
Here is a script that saves, redirects, and restores \f(CW\*(C`STDOUT\*(C'\fR and
\&\f(CW\*(C`STDERR\*(C'\fR using various methods:
.Sp
.Vb 3
\&    #!/usr/bin/perl
\&    open(my $oldout, ">&STDOUT")     or die "Can\*(Aqt dup STDOUT: $!";
\&    open(OLDERR,     ">&", \e*STDERR) or die "Can\*(Aqt dup STDERR: $!";
\&
\&    open(STDOUT, \*(Aq>\*(Aq, "foo.out") or die "Can\*(Aqt redirect STDOUT: $!";
\&    open(STDERR, ">&STDOUT")     or die "Can\*(Aqt dup STDOUT: $!";
\&
\&    select STDERR; $| = 1;  # make unbuffered
\&    select STDOUT; $| = 1;  # make unbuffered
\&
\&    print STDOUT "stdout 1\en";  # this works for
\&    print STDERR "stderr 1\en";  # subprocesses too
\&
\&    open(STDOUT, ">&", $oldout) or die "Can\*(Aqt dup \e$oldout: $!";
\&    open(STDERR, ">&OLDERR")    or die "Can\*(Aqt dup OLDERR: $!";
\&
\&    print STDOUT "stdout 2\en";
\&    print STDERR "stderr 2\en";
.Ve
.Sp
If you specify \f(CW\*(Aq<&=X\*(Aq\fR, where \f(CW\*(C`X\*(C'\fR is a file descriptor number
or a filehandle, then Perl will do an equivalent of C's \f(CW\*(C`fdopen\*(C'\fR of
that file descriptor (and not call \f(CWdup(2)\fR); this is more
parsimonious of file descriptors.  For example:
.Sp
.Vb 2
\&    # open for input, reusing the fileno of $fd
\&    open(FILEHANDLE, "<&=$fd")
.Ve
.Sp
or
.Sp
.Vb 1
\&    open(FILEHANDLE, "<&=", $fd)
.Ve
.Sp
or
.Sp
.Vb 2
\&    # open for append, using the fileno of OLDFH
\&    open(FH, ">>&=", OLDFH)
.Ve
.Sp
or
.Sp
.Vb 1
\&    open(FH, ">>&=OLDFH")
.Ve
.Sp
Being parsimonious on filehandles is also useful (besides being
parsimonious) for example when something is dependent on file
descriptors, like for example locking using \fIflock()\fR.  If you do just
\&\f(CW\*(C`open(A, ">>&B")\*(C'\fR, the filehandle A will not have the same file
descriptor as B, and therefore flock(A) will not flock(B) nor vice
versa.  But with \f(CW\*(C`open(A, ">>&=B")\*(C'\fR, the filehandles will share
the same underlying system file descriptor.
.Sp
Note that under Perls older than 5.8.0, Perl uses the standard C library's'
\&\fIfdopen()\fR to implement the \f(CW\*(C`=\*(C'\fR functionality.  On many Unix systems,
\&\fIfdopen()\fR fails when file descriptors exceed a certain value, typically 255.
For Perls 5.8.0 and later, PerlIO is (most often) the default.
.Sp
You can see whether your Perl was built with PerlIO by running \f(CW\*(C`perl \-V\*(C'\fR
and looking for the \f(CW\*(C`useperlio=\*(C'\fR line.  If \f(CW\*(C`useperlio\*(C'\fR is \f(CW\*(C`define\*(C'\fR, you
have PerlIO; otherwise you don't.
.Sp
If you open a pipe on the command \f(CW\*(C`\-\*(C'\fR (that is, specify either \f(CW\*(C`|\-\*(C'\fR or \f(CW\*(C`\-|\*(C'\fR
with the one\- or two-argument forms of \f(CW\*(C`open\*(C'\fR), 
an implicit \f(CW\*(C`fork\*(C'\fR is done, so \f(CW\*(C`open\*(C'\fR returns twice: in the parent
process it returns the pid
of the child process, and in the child process it returns (a defined) \f(CW0\fR.
Use \f(CW\*(C`defined($pid)\*(C'\fR or \f(CW\*(C`//\*(C'\fR to determine whether the open was successful.
.Sp
For example, use either
.Sp
.Vb 1
\&    $child_pid = open(FROM_KID, "\-|")   // die "can\*(Aqt fork: $!";
.Ve
.Sp
or
.Sp
.Vb 1
\&    $child_pid = open(TO_KID,   "|\-")   // die "can\*(Aqt fork: $!";
.Ve
.Sp
followed by
.Sp
.Vb 10
\&    if ($child_pid) {
\&        # am the parent:
\&        # either write TO_KID or else read FROM_KID
\&        ...
\&       waitpid $child_pid, 0;
\&    } else {
\&        # am the child; use STDIN/STDOUT normally
\&        ...
\&        exit;
\&    }
.Ve
.Sp
The filehandle behaves normally for the parent, but I/O to that
filehandle is piped from/to the \s-1STDOUT/STDIN\s0 of the child process.
In the child process, the filehandle isn't opened\*(--I/O happens from/to
the new \s-1STDOUT/STDIN. \s0 Typically this is used like the normal
piped open when you want to exercise more control over just how the
pipe command gets executed, such as when running setuid and
you don't want to have to scan shell commands for metacharacters.
.Sp
The following blocks are more or less equivalent:
.Sp
.Vb 4
\&    open(FOO, "|tr \*(Aq[a\-z]\*(Aq \*(Aq[A\-Z]\*(Aq");
\&    open(FOO, "|\-", "tr \*(Aq[a\-z]\*(Aq \*(Aq[A\-Z]\*(Aq");
\&    open(FOO, "|\-") || exec \*(Aqtr\*(Aq, \*(Aq[a\-z]\*(Aq, \*(Aq[A\-Z]\*(Aq;
\&    open(FOO, "|\-", "tr", \*(Aq[a\-z]\*(Aq, \*(Aq[A\-Z]\*(Aq);
\&
\&    open(FOO, "cat \-n \*(Aq$file\*(Aq|");
\&    open(FOO, "\-|", "cat \-n \*(Aq$file\*(Aq");
\&    open(FOO, "\-|") || exec "cat", "\-n", $file;
\&    open(FOO, "\-|", "cat", "\-n", $file);
.Ve
.Sp
The last two examples in each block show the pipe as \*(L"list form\*(R", which is
not yet supported on all platforms.  A good rule of thumb is that if
your platform has a real \f(CW\*(C`fork()\*(C'\fR (in other words, if your platform is
Unix, including Linux and MacOS X), you can use the list form.  You would 
want to use the list form of the pipe so you can pass literal arguments
to the command without risk of the shell interpreting any shell metacharacters
in them.  However, this also bars you from opening pipes to commands
that intentionally contain shell metacharacters, such as:
.Sp
.Vb 2
\&    open(FOO, "|cat \-n | expand \-4 | lpr")
\&        // die "Can\*(Aqt open pipeline to lpr: $!";
.Ve
.Sp
See \*(L"Safe Pipe Opens\*(R" in perlipc for more examples of this.
.Sp
Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see perlport).  To be safe, you may need
to set \f(CW$|\fR ($AUTOFLUSH in English) or call the \f(CW\*(C`autoflush()\*(C'\fR method
of \f(CW\*(C`IO::Handle\*(C'\fR on any open handles.
.Sp
On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor as determined by the value
of \f(CW$^F\fR.  See \*(L"$^F\*(R" in perlvar.
.Sp
Closing any piped filehandle causes the parent process to wait for the
child to finish, then returns the status value in \f(CW$?\fR and
\&\f(CW\*(C`${^CHILD_ERROR_NATIVE}\*(C'\fR.
.Sp
The filename passed to the one\- and two-argument forms of \fIopen()\fR will
have leading and trailing whitespace deleted and normal
redirection characters honored.  This property, known as \*(L"magic open\*(R",
can often be used to good effect.  A user could specify a filename of
\&\fI\*(L"rsh cat file |\*(R"\fR, or you could change certain filenames as needed:
.Sp
.Vb 2
\&    $filename =~ s/(.*\e.gz)\es*$/gzip \-dc < $1|/;
\&    open(FH, $filename) or die "Can\*(Aqt open $filename: $!";
.Ve
.Sp
Use the three-argument form to open a file with arbitrary weird characters in it,
.Sp
.Vb 2
\&    open(FOO, "<", $file)
\&        || die "can\*(Aqt open < $file: $!";
.Ve
.Sp
otherwise it's necessary to protect any leading and trailing whitespace:
.Sp
.Vb 3
\&    $file =~ s#^(\es)#./$1#;
\&    open(FOO, "< $file\e0")
\&        || die "open failed: $!";
.Ve
.Sp
(this may not work on some bizarre filesystems).  One should
conscientiously choose between the \fImagic\fR and \fIthree-argument\fR form
of \fIopen()\fR:
.Sp
.Vb 1
\&    open(IN, $ARGV[0]) || die "can\*(Aqt open $ARGV[0]: $!";
.Ve
.Sp
will allow the user to specify an argument of the form \f(CW"rsh cat file |"\fR,
but will not work on a filename that happens to have a trailing space, while
.Sp
.Vb 2
\&    open(IN, "<", $ARGV[0])
\&        || die "can\*(Aqt open < $ARGV[0]: $!";
.Ve
.Sp
will have exactly the opposite restrictions.
.Sp
If you want a \*(L"real\*(R" C \f(CW\*(C`open\*(C'\fR (see \fIopen\fR\|(2) on your system), then you
should use the \f(CW\*(C`sysopen\*(C'\fR function, which involves no such magic (but may
use subtly different filemodes than Perl \fIopen()\fR, which is mapped to C
\&\fIfopen()\fR).  This is another way to protect your filenames from
interpretation.  For example:
.Sp
.Vb 7
\&    use IO::Handle;
\&    sysopen(HANDLE, $path, O_RDWR|O_CREAT|O_EXCL)
\&        or die "sysopen $path: $!";
\&    $oldfh = select(HANDLE); $| = 1; select($oldfh);
\&    print HANDLE "stuff $$\en";
\&    seek(HANDLE, 0, 0);
\&    print "File contains: ", <HANDLE>;
.Ve
.Sp
Using the constructor from the \f(CW\*(C`IO::Handle\*(C'\fR package (or one of its
subclasses, such as \f(CW\*(C`IO::File\*(C'\fR or \f(CW\*(C`IO::Socket\*(C'\fR), you can generate anonymous
filehandles that have the scope of the variables used to hold them, then
automatically (but silently) close once their reference counts become
zero, typically at scope exit:
.Sp
.Vb 10
\&    use IO::File;
\&    #...
\&    sub read_myfile_munged {
\&        my $ALL = shift;
\&        # or just leave it undef to autoviv
\&        my $handle = IO::File\->new;
\&        open($handle, "<", "myfile") or die "myfile: $!";
\&        $first = <$handle>
\&            or return ();     # Automatically closed here.
\&        mung($first) or die "mung failed";  # Or here.
\&        return (first, <$handle>) if $ALL;  # Or here.
\&        return $first;                      # Or here.
\&    }
.Ve
.Sp
\&\fB\s-1WARNING:\s0\fR The previous example has a bug because the automatic
close that happens when the refcount on \f(CW\*(C`handle\*(C'\fR reaches zero does not
properly detect and report failures.  \fIAlways\fR close the handle
yourself and inspect the return value.
.Sp
.Vb 2
\&    close($handle) 
\&        || warn "close failed: $!";
.Ve
.Sp
See \*(L"seek\*(R" for some details about mixing reading and writing.
.Sp
Portability issues: \*(L"open\*(R" in perlport.
.IP "opendir \s-1DIRHANDLE,EXPR \s0" 4
.IX Xref "opendir"
.IX Item "opendir DIRHANDLE,EXPR "
Opens a directory named \s-1EXPR\s0 for processing by \f(CW\*(C`readdir\*(C'\fR, \f(CW\*(C`telldir\*(C'\fR,
\&\f(CW\*(C`seekdir\*(C'\fR, \f(CW\*(C`rewinddir\*(C'\fR, and \f(CW\*(C`closedir\*(C'\fR.  Returns true if successful.
\&\s-1DIRHANDLE\s0 may be an expression whose value can be used as an indirect
dirhandle, usually the real dirhandle name.  If \s-1DIRHANDLE\s0 is an undefined
scalar variable (or array or hash element), the variable is assigned a
reference to a new anonymous dirhandle; that is, it's autovivified.
DIRHANDLEs have their own namespace separate from FILEHANDLEs.
.Sp
See the example at \f(CW\*(C`readdir\*(C'\fR.
.IP "ord \s-1EXPR \s0" 4
.IX Xref "ord encoding"
.IX Item "ord EXPR "
.PD 0
.IP "ord" 4
.IX Item "ord"
.PD
Returns the numeric value of the first character of \s-1EXPR.\s0
If \s-1EXPR\s0 is an empty string, returns 0.  If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
(Note \fIcharacter\fR, not byte.)
.Sp
For the reverse, see \*(L"chr\*(R".
See perlunicode for more about Unicode.
.IP "our \s-1EXPR \s0" 4
.IX Xref "our global"
.IX Item "our EXPR "
.PD 0
.IP "our \s-1TYPE EXPR\s0" 4
.IX Item "our TYPE EXPR"
.IP "our \s-1EXPR : ATTRS\s0" 4
.IX Item "our EXPR : ATTRS"
.IP "our \s-1TYPE EXPR : ATTRS\s0" 4
.IX Item "our TYPE EXPR : ATTRS"
.PD
\&\f(CW\*(C`our\*(C'\fR makes a lexical alias to a package variable of the same name in the current
package for use within the current lexical scope.
.Sp
\&\f(CW\*(C`our\*(C'\fR has the same scoping rules as \f(CW\*(C`my\*(C'\fR or \f(CW\*(C`state\*(C'\fR, but \f(CW\*(C`our\*(C'\fR only
declares an alias, whereas \f(CW\*(C`my\*(C'\fR or \f(CW\*(C`state\*(C'\fR both declare a variable name and
allocate storage for that name within the current scope.
.Sp
This means that when \f(CW\*(C`use strict \*(Aqvars\*(Aq\*(C'\fR is in effect, \f(CW\*(C`our\*(C'\fR lets you use
a package variable without qualifying it with the package name, but only within
the lexical scope of the \f(CW\*(C`our\*(C'\fR declaration.  In this way, \f(CW\*(C`our\*(C'\fR differs from
\&\f(CW\*(C`use vars\*(C'\fR, which allows use of an unqualified name \fIonly\fR within the
affected package, but across scopes.
.Sp
If more than one value is listed, the list must be placed
in parentheses.
.Sp
.Vb 2
\&    our $foo;
\&    our($bar, $baz);
.Ve
.Sp
An \f(CW\*(C`our\*(C'\fR declaration declares an alias for a package variable that will be visible
across its entire lexical scope, even across package boundaries.  The
package in which the variable is entered is determined at the point
of the declaration, not at the point of use.  This means the following
behavior holds:
.Sp
.Vb 3
\&    package Foo;
\&    our $bar;      # declares $Foo::bar for rest of lexical scope
\&    $bar = 20;
\&
\&    package Bar;
\&    print $bar;    # prints 20, as it refers to $Foo::bar
.Ve
.Sp
Multiple \f(CW\*(C`our\*(C'\fR declarations with the same name in the same lexical
scope are allowed if they are in different packages.  If they happen
to be in the same package, Perl will emit warnings if you have asked
for them, just like multiple \f(CW\*(C`my\*(C'\fR declarations.  Unlike a second
\&\f(CW\*(C`my\*(C'\fR declaration, which will bind the name to a fresh variable, a
second \f(CW\*(C`our\*(C'\fR declaration in the same package, in the same scope, is
merely redundant.
.Sp
.Vb 4
\&    use warnings;
\&    package Foo;
\&    our $bar;      # declares $Foo::bar for rest of lexical scope
\&    $bar = 20;
\&
\&    package Bar;
\&    our $bar = 30; # declares $Bar::bar for rest of lexical scope
\&    print $bar;    # prints 30
\&
\&    our $bar;      # emits warning but has no other effect
\&    print $bar;    # still prints 30
.Ve
.Sp
An \f(CW\*(C`our\*(C'\fR declaration may also have a list of attributes associated
with it.
.Sp
The exact semantics and interface of \s-1TYPE\s0 and \s-1ATTRS\s0 are still
evolving.  \s-1TYPE\s0 is currently bound to the use of the \f(CW\*(C`fields\*(C'\fR pragma,
and attributes are handled using the \f(CW\*(C`attributes\*(C'\fR pragma, or, starting
from Perl 5.8.0, also via the \f(CW\*(C`Attribute::Handlers\*(C'\fR module.  See
\&\*(L"Private Variables via \fImy()\fR\*(R" in perlsub for details, and fields,
attributes, and Attribute::Handlers.
.IP "pack \s-1TEMPLATE,LIST \s0" 4
.IX Xref "pack"
.IX Item "pack TEMPLATE,LIST "
Takes a \s-1LIST\s0 of values and converts it into a string using the rules
given by the \s-1TEMPLATE. \s0 The resulting string is the concatenation of
the converted values.  Typically, each converted value looks
like its machine-level representation.  For example, on 32\-bit machines
an integer may be represented by a sequence of 4 bytes, which  will in
Perl be presented as a string that's 4 characters long.
.Sp
See perlpacktut for an introduction to this function.
.Sp
The \s-1TEMPLATE\s0 is a sequence of characters that give the order and type
of values, as follows:
.Sp
.Vb 3
\&    a  A string with arbitrary binary data, will be null padded.
\&    A  A text (ASCII) string, will be space padded.
\&    Z  A null\-terminated (ASCIZ) string, will be null padded.
\&
\&    b  A bit string (ascending bit order inside each byte,
\&       like vec()).
\&    B  A bit string (descending bit order inside each byte).
\&    h  A hex string (low nybble first).
\&    H  A hex string (high nybble first).
\&
\&    c  A signed char (8\-bit) value.
\&    C  An unsigned char (octet) value.
\&    W  An unsigned char value (can be greater than 255).
\&
\&    s  A signed short (16\-bit) value.
\&    S  An unsigned short value.
\&
\&    l  A signed long (32\-bit) value.
\&    L  An unsigned long value.
\&
\&    q  A signed quad (64\-bit) value.
\&    Q  An unsigned quad value.
\&         (Quads are available only if your system supports 64\-bit
\&          integer values _and_ if Perl has been compiled to support
\&          those.  Raises an exception otherwise.)
\&
\&    i  A signed integer value.
\&    I  A unsigned integer value.
\&         (This \*(Aqinteger\*(Aq is _at_least_ 32 bits wide.  Its exact
\&          size depends on what a local C compiler calls \*(Aqint\*(Aq.)
\&
\&    n  An unsigned short (16\-bit) in "network" (big\-endian) order.
\&    N  An unsigned long (32\-bit) in "network" (big\-endian) order.
\&    v  An unsigned short (16\-bit) in "VAX" (little\-endian) order.
\&    V  An unsigned long (32\-bit) in "VAX" (little\-endian) order.
\&
\&    j  A Perl internal signed integer value (IV).
\&    J  A Perl internal unsigned integer value (UV).
\&
\&    f  A single\-precision float in native format.
\&    d  A double\-precision float in native format.
\&
\&    F  A Perl internal floating\-point value (NV) in native format
\&    D  A float of long\-double precision in native format.
\&         (Long doubles are available only if your system supports
\&          long double values _and_ if Perl has been compiled to
\&          support those.  Raises an exception otherwise.)
\&
\&    p  A pointer to a null\-terminated string.
\&    P  A pointer to a structure (fixed\-length string).
\&
\&    u  A uuencoded string.
\&    U  A Unicode character number.  Encodes to a character in char\-
\&       acter mode and UTF\-8 (or UTF\-EBCDIC in EBCDIC platforms) in
\&       byte mode.
\&
\&    w  A BER compressed integer (not an ASN.1 BER, see perlpacktut
\&       for details).  Its bytes represent an unsigned integer in
\&       base 128, most significant digit first, with as few digits
\&       as possible.  Bit eight (the high bit) is set on each byte
\&       except the last.
\&
\&    x  A null byte (a.k.a ASCII NUL, "\e000", chr(0))
\&    X  Back up a byte.
\&    @  Null\-fill or truncate to absolute position, counted from the
\&       start of the innermost ()\-group.
\&    .  Null\-fill or truncate to absolute position specified by
\&       the value.
\&    (  Start of a ()\-group.
.Ve
.Sp
One or more modifiers below may optionally follow certain letters in the
\&\s-1TEMPLATE \s0(the second column lists letters for which the modifier is valid):
.Sp
.Vb 2
\&    !   sSlLiI     Forces native (short, long, int) sizes instead
\&                   of fixed (16\-/32\-bit) sizes.
\&
\&        xX         Make x and X act as alignment commands.
\&
\&        nNvV       Treat integers as signed instead of unsigned.
\&
\&        @.         Specify position as byte offset in the internal
\&                   representation of the packed string.  Efficient
\&                   but dangerous.
\&
\&    >   sSiIlLqQ   Force big\-endian byte\-order on the type.
\&        jJfFdDpP   (The "big end" touches the construct.)
\&
\&    <   sSiIlLqQ   Force little\-endian byte\-order on the type.
\&        jJfFdDpP   (The "little end" touches the construct.)
.Ve
.Sp
The \f(CW\*(C`>\*(C'\fR and \f(CW\*(C`<\*(C'\fR modifiers can also be used on \f(CW\*(C`()\*(C'\fR groups 
to force a particular byte-order on all components in that group, 
including all its subgroups.
.Sp
The following rules apply:
.RS 4
.IP "\(bu" 4
Each letter may optionally be followed by a number indicating the repeat
count.  A numeric repeat count may optionally be enclosed in brackets, as
in \f(CW\*(C`pack("C[80]", @arr)\*(C'\fR.  The repeat count gobbles that many values from
the \s-1LIST\s0 when used with all format types other than \f(CW\*(C`a\*(C'\fR, \f(CW\*(C`A\*(C'\fR, \f(CW\*(C`Z\*(C'\fR, \f(CW\*(C`b\*(C'\fR,
\&\f(CW\*(C`B\*(C'\fR, \f(CW\*(C`h\*(C'\fR, \f(CW\*(C`H\*(C'\fR, \f(CW\*(C`@\*(C'\fR, \f(CW\*(C`.\*(C'\fR, \f(CW\*(C`x\*(C'\fR, \f(CW\*(C`X\*(C'\fR, and \f(CW\*(C`P\*(C'\fR, where it means
something else, described below.  Supplying a \f(CW\*(C`*\*(C'\fR for the repeat count
instead of a number means to use however many items are left, except for:
.RS 4
.IP "\(bu" 4
\&\f(CW\*(C`@\*(C'\fR, \f(CW\*(C`x\*(C'\fR, and \f(CW\*(C`X\*(C'\fR, where it is equivalent to \f(CW0\fR.
.IP "\(bu" 4
<.>, where it means relative to the start of the string.
.IP "\(bu" 4
\&\f(CW\*(C`u\*(C'\fR, where it is equivalent to 1 (or 45, which here is equivalent).
.RE
.RS 4
.Sp
One can replace a numeric repeat count with a template letter enclosed in
brackets to use the packed byte length of the bracketed template for the
repeat count.
.Sp
For example, the template \f(CW\*(C`x[L]\*(C'\fR skips as many bytes as in a packed long,
and the template \f(CW"$t X[$t] $t"\fR unpacks twice whatever \f(CW$t\fR (when
variable-expanded) unpacks.  If the template in brackets contains alignment
commands (such as \f(CW\*(C`x![d]\*(C'\fR), its packed length is calculated as if the
start of the template had the maximal possible alignment.
.Sp
When used with \f(CW\*(C`Z\*(C'\fR, a \f(CW\*(C`*\*(C'\fR as the repeat count is guaranteed to add a
trailing null byte, so the resulting string is always one byte longer than
the byte length of the item itself.
.Sp
When used with \f(CW\*(C`@\*(C'\fR, the repeat count represents an offset from the start
of the innermost \f(CW\*(C`()\*(C'\fR group.
.Sp
When used with \f(CW\*(C`.\*(C'\fR, the repeat count determines the starting position to
calculate the value offset as follows:
.IP "\(bu" 4
If the repeat count is \f(CW0\fR, it's relative to the current position.
.IP "\(bu" 4
If the repeat count is \f(CW\*(C`*\*(C'\fR, the offset is relative to the start of the
packed string.
.IP "\(bu" 4
And if it's an integer \fIn\fR, the offset is relative to the start of the
\&\fIn\fRth innermost \f(CW\*(C`( )\*(C'\fR group, or to the start of the string if \fIn\fR is
bigger then the group level.
.RE
.RS 4
.Sp
The repeat count for \f(CW\*(C`u\*(C'\fR is interpreted as the maximal number of bytes
to encode per line of output, with 0, 1 and 2 replaced by 45.  The repeat 
count should not be more than 65.
.RE
.IP "\(bu" 4
The \f(CW\*(C`a\*(C'\fR, \f(CW\*(C`A\*(C'\fR, and \f(CW\*(C`Z\*(C'\fR types gobble just one value, but pack it as a
string of length count, padding with nulls or spaces as needed.  When
unpacking, \f(CW\*(C`A\*(C'\fR strips trailing whitespace and nulls, \f(CW\*(C`Z\*(C'\fR strips everything
after the first null, and \f(CW\*(C`a\*(C'\fR returns data with no stripping at all.
.Sp
If the value to pack is too long, the result is truncated.  If it's too
long and an explicit count is provided, \f(CW\*(C`Z\*(C'\fR packs only \f(CW\*(C`$count\-1\*(C'\fR bytes,
followed by a null byte.  Thus \f(CW\*(C`Z\*(C'\fR always packs a trailing null, except
when the count is 0.
.IP "\(bu" 4
Likewise, the \f(CW\*(C`b\*(C'\fR and \f(CW\*(C`B\*(C'\fR formats pack a string that's that many bits long.
Each such format generates 1 bit of the result.  These are typically followed
by a repeat count like \f(CW\*(C`B8\*(C'\fR or \f(CW\*(C`B64\*(C'\fR.
.Sp
Each result bit is based on the least-significant bit of the corresponding
input character, i.e., on \f(CW\*(C`ord($char)%2\*(C'\fR.  In particular, characters \f(CW"0"\fR
and \f(CW"1"\fR generate bits 0 and 1, as do characters \f(CW"\e000"\fR and \f(CW"\e001"\fR.
.Sp
Starting from the beginning of the input string, each 8\-tuple
of characters is converted to 1 character of output.  With format \f(CW\*(C`b\*(C'\fR,
the first character of the 8\-tuple determines the least-significant bit of a
character; with format \f(CW\*(C`B\*(C'\fR, it determines the most-significant bit of
a character.
.Sp
If the length of the input string is not evenly divisible by 8, the
remainder is packed as if the input string were padded by null characters
at the end.  Similarly during unpacking, \*(L"extra\*(R" bits are ignored.
.Sp
If the input string is longer than needed, remaining characters are ignored.
.Sp
A \f(CW\*(C`*\*(C'\fR for the repeat count uses all characters of the input field.  
On unpacking, bits are converted to a string of \f(CW0\fRs and \f(CW1\fRs.
.IP "\(bu" 4
The \f(CW\*(C`h\*(C'\fR and \f(CW\*(C`H\*(C'\fR formats pack a string that many nybbles (4\-bit groups,
representable as hexadecimal digits, \f(CW"0".."9"\fR \f(CW"a".."f"\fR) long.
.Sp
For each such format, \fIpack()\fR generates 4 bits of result.
With non-alphabetical characters, the result is based on the 4 least-significant
bits of the input character, i.e., on \f(CW\*(C`ord($char)%16\*(C'\fR.  In particular,
characters \f(CW"0"\fR and \f(CW"1"\fR generate nybbles 0 and 1, as do bytes
\&\f(CW"\e000"\fR and \f(CW"\e001"\fR.  For characters \f(CW"a".."f"\fR and \f(CW"A".."F"\fR, the result
is compatible with the usual hexadecimal digits, so that \f(CW"a"\fR and
\&\f(CW"A"\fR both generate the nybble \f(CW\*(C`0xA==10\*(C'\fR.  Use only these specific hex 
characters with this format.
.Sp
Starting from the beginning of the template to \fIpack()\fR, each pair
of characters is converted to 1 character of output.  With format \f(CW\*(C`h\*(C'\fR, the
first character of the pair determines the least-significant nybble of the
output character; with format \f(CW\*(C`H\*(C'\fR, it determines the most-significant
nybble.
.Sp
If the length of the input string is not even, it behaves as if padded by
a null character at the end.  Similarly, \*(L"extra\*(R" nybbles are ignored during
unpacking.
.Sp
If the input string is longer than needed, extra characters are ignored.
.Sp
A \f(CW\*(C`*\*(C'\fR for the repeat count uses all characters of the input field.  For
\&\fIunpack()\fR, nybbles are converted to a string of hexadecimal digits.
.IP "\(bu" 4
The \f(CW\*(C`p\*(C'\fR format packs a pointer to a null-terminated string.  You are
responsible for ensuring that the string is not a temporary value, as that
could potentially get deallocated before you got around to using the packed
result.  The \f(CW\*(C`P\*(C'\fR format packs a pointer to a structure of the size indicated
by the length.  A null pointer is created if the corresponding value for
\&\f(CW\*(C`p\*(C'\fR or \f(CW\*(C`P\*(C'\fR is \f(CW\*(C`undef\*(C'\fR; similarly with \fIunpack()\fR, where a null pointer
unpacks into \f(CW\*(C`undef\*(C'\fR.
.Sp
If your system has a strange pointer size\*(--meaning a pointer is neither as
big as an int nor as big as a long\*(--it may not be possible to pack or
unpack pointers in big\- or little-endian byte order.  Attempting to do
so raises an exception.
.IP "\(bu" 4
The \f(CW\*(C`/\*(C'\fR template character allows packing and unpacking of a sequence of
items where the packed structure contains a packed item count followed by
the packed items themselves.  This is useful when the structure you're
unpacking has encoded the sizes or repeat counts for some of its fields
within the structure itself as separate fields.
.Sp
For \f(CW\*(C`pack\*(C'\fR, you write \fIlength-item\fR\f(CW\*(C`/\*(C'\fR\fIsequence-item\fR, and the
\&\fIlength-item\fR describes how the length value is packed.  Formats likely
to be of most use are integer-packing ones like \f(CW\*(C`n\*(C'\fR for Java strings,
\&\f(CW\*(C`w\*(C'\fR for \s-1ASN.1\s0 or \s-1SNMP,\s0 and \f(CW\*(C`N\*(C'\fR for Sun \s-1XDR.\s0
.Sp
For \f(CW\*(C`pack\*(C'\fR, \fIsequence-item\fR may have a repeat count, in which case
the minimum of that and the number of available items is used as the argument
for \fIlength-item\fR.  If it has no repeat count or uses a '*', the number
of available items is used.
.Sp
For \f(CW\*(C`unpack\*(C'\fR, an internal stack of integer arguments unpacked so far is
used.  You write \f(CW\*(C`/\*(C'\fR\fIsequence-item\fR and the repeat count is obtained by
popping off the last element from the stack.  The \fIsequence-item\fR must not
have a repeat count.
.Sp
If \fIsequence-item\fR refers to a string type (\f(CW"A"\fR, \f(CW"a"\fR, or \f(CW"Z"\fR),
the \fIlength-item\fR is the string length, not the number of strings.  With
an explicit repeat count for pack, the packed string is adjusted to that
length.  For example:
.Sp
.Vb 1
\& This code:                             gives this result:
\&
\& unpack("W/a", "\e004Gurusamy")          ("Guru")
\& unpack("a3/A A*", "007 Bond  J ")      (" Bond", "J")
\& unpack("a3 x2 /A A*", "007: Bond, J.") ("Bond, J", ".")
\&
\& pack("n/a* w/a","hello,","world")     "\e000\e006hello,\e005world"
\& pack("a/W2", ord("a") .. ord("z"))    "2ab"
.Ve
.Sp
The \fIlength-item\fR is not returned explicitly from \f(CW\*(C`unpack\*(C'\fR.
.Sp
Supplying a count to the \fIlength-item\fR format letter is only useful with
\&\f(CW\*(C`A\*(C'\fR, \f(CW\*(C`a\*(C'\fR, or \f(CW\*(C`Z\*(C'\fR.  Packing with a \fIlength-item\fR of \f(CW\*(C`a\*(C'\fR or \f(CW\*(C`Z\*(C'\fR may
introduce \f(CW"\e000"\fR characters, which Perl does not regard as legal in
numeric strings.
.IP "\(bu" 4
The integer types \f(CW\*(C`s\*(C'\fR, \f(CW\*(C`S\*(C'\fR, \f(CW\*(C`l\*(C'\fR, and \f(CW\*(C`L\*(C'\fR may be
followed by a \f(CW\*(C`!\*(C'\fR modifier to specify native shorts or
longs.  As shown in the example above, a bare \f(CW\*(C`l\*(C'\fR means
exactly 32 bits, although the native \f(CW\*(C`long\*(C'\fR as seen by the local C compiler
may be larger.  This is mainly an issue on 64\-bit platforms.  You can
see whether using \f(CW\*(C`!\*(C'\fR makes any difference this way:
.Sp
.Vb 2
\&    printf "format s is %d, s! is %d\en", 
\&        length pack("s"), length pack("s!");
\&
\&    printf "format l is %d, l! is %d\en", 
\&        length pack("l"), length pack("l!");
.Ve
.Sp
\&\f(CW\*(C`i!\*(C'\fR and \f(CW\*(C`I!\*(C'\fR are also allowed, but only for completeness' sake:
they are identical to \f(CW\*(C`i\*(C'\fR and \f(CW\*(C`I\*(C'\fR.
.Sp
The actual sizes (in bytes) of native shorts, ints, longs, and long
longs on the platform where Perl was built are also available from
the command line:
.Sp
.Vb 5
\&    $ perl \-V:{short,int,long{,long}}size
\&    shortsize=\*(Aq2\*(Aq;
\&    intsize=\*(Aq4\*(Aq;
\&    longsize=\*(Aq4\*(Aq;
\&    longlongsize=\*(Aq8\*(Aq;
.Ve
.Sp
or programmatically via the \f(CW\*(C`Config\*(C'\fR module:
.Sp
.Vb 5
\&       use Config;
\&       print $Config{shortsize},    "\en";
\&       print $Config{intsize},      "\en";
\&       print $Config{longsize},     "\en";
\&       print $Config{longlongsize}, "\en";
.Ve
.Sp
\&\f(CW$Config{longlongsize}\fR is undefined on systems without 
long long support.
.IP "\(bu" 4
The integer formats \f(CW\*(C`s\*(C'\fR, \f(CW\*(C`S\*(C'\fR, \f(CW\*(C`i\*(C'\fR, \f(CW\*(C`I\*(C'\fR, \f(CW\*(C`l\*(C'\fR, \f(CW\*(C`L\*(C'\fR, \f(CW\*(C`j\*(C'\fR, and \f(CW\*(C`J\*(C'\fR are
inherently non-portable between processors and operating systems because
they obey native byteorder and endianness.  For example, a 4\-byte integer
0x12345678 (305419896 decimal) would be ordered natively (arranged in and
handled by the \s-1CPU\s0 registers) into bytes as
.Sp
.Vb 2
\&    0x12 0x34 0x56 0x78  # big\-endian
\&    0x78 0x56 0x34 0x12  # little\-endian
.Ve
.Sp
Basically, Intel and \s-1VAX\s0 CPUs are little-endian, while everybody else,
including Motorola m68k/88k, \s-1PPC,\s0 Sparc, \s-1HP PA,\s0 Power, and Cray, are
big-endian.  Alpha and \s-1MIPS\s0 can be either: Digital/Compaq uses (well, used) 
them in little-endian mode, but SGI/Cray uses them in big-endian mode.
.Sp
The names \fIbig-endian\fR and \fIlittle-endian\fR are comic references to the
egg-eating habits of the little-endian Lilliputians and the big-endian
Blefuscudians from the classic Jonathan Swift satire, \fIGulliver's Travels\fR.
This entered computer lingo via the paper \*(L"On Holy Wars and a Plea for
Peace\*(R" by Danny Cohen, \s-1USC/ISI IEN 137,\s0 April 1, 1980.
.Sp
Some systems may have even weirder byte orders such as
.Sp
.Vb 2
\&   0x56 0x78 0x12 0x34
\&   0x34 0x12 0x78 0x56
.Ve
.Sp
You can determine your system endianness with this incantation:
.Sp
.Vb 1
\&   printf("%#02x ", $_) for unpack("W*", pack L=>0x12345678);
.Ve
.Sp
The byteorder on the platform where Perl was built is also available
via Config:
.Sp
.Vb 2
\&    use Config;
\&    print "$Config{byteorder}\en";
.Ve
.Sp
or from the command line:
.Sp
.Vb 1
\&    $ perl \-V:byteorder
.Ve
.Sp
Byteorders \f(CW"1234"\fR and \f(CW"12345678"\fR are little-endian; \f(CW"4321"\fR
and \f(CW"87654321"\fR are big-endian.
.Sp
For portably packed integers, either use the formats \f(CW\*(C`n\*(C'\fR, \f(CW\*(C`N\*(C'\fR, \f(CW\*(C`v\*(C'\fR, 
and \f(CW\*(C`V\*(C'\fR or else use the \f(CW\*(C`>\*(C'\fR and \f(CW\*(C`<\*(C'\fR modifiers described
immediately below.  See also perlport.
.IP "\(bu" 4
Starting with Perl 5.10.0, integer and floating-point formats, along with
the \f(CW\*(C`p\*(C'\fR and \f(CW\*(C`P\*(C'\fR formats and \f(CW\*(C`()\*(C'\fR groups, may all be followed by the 
\&\f(CW\*(C`>\*(C'\fR or \f(CW\*(C`<\*(C'\fR endianness modifiers to respectively enforce big\-
or little-endian byte-order.  These modifiers are especially useful 
given how \f(CW\*(C`n\*(C'\fR, \f(CW\*(C`N\*(C'\fR, \f(CW\*(C`v\*(C'\fR, and \f(CW\*(C`V\*(C'\fR don't cover signed integers, 
64\-bit integers, or floating-point values.
.Sp
Here are some concerns to keep in mind when using an endianness modifier:
.RS 4
.IP "\(bu" 4
Exchanging signed integers between different platforms works only 
when all platforms store them in the same format.  Most platforms store
signed integers in two's-complement notation, so usually this is not an issue.
.IP "\(bu" 4
The \f(CW\*(C`>\*(C'\fR or \f(CW\*(C`<\*(C'\fR modifiers can only be used on floating-point
formats on big\- or little-endian machines.  Otherwise, attempting to
use them raises an exception.
.IP "\(bu" 4
Forcing big\- or little-endian byte-order on floating-point values for
data exchange can work only if all platforms use the same
binary representation such as \s-1IEEE\s0 floating-point.  Even if all
platforms are using \s-1IEEE,\s0 there may still be subtle differences.  Being able
to use \f(CW\*(C`>\*(C'\fR or \f(CW\*(C`<\*(C'\fR on floating-point values can be useful,
but also dangerous if you don't know exactly what you're doing.
It is not a general way to portably store floating-point values.
.IP "\(bu" 4
When using \f(CW\*(C`>\*(C'\fR or \f(CW\*(C`<\*(C'\fR on a \f(CW\*(C`()\*(C'\fR group, this affects
all types inside the group that accept byte-order modifiers,
including all subgroups.  It is silently ignored for all other
types.  You are not allowed to override the byte-order within a group
that already has a byte-order modifier suffix.
.RE
.RS 4
.RE
.IP "\(bu" 4
Real numbers (floats and doubles) are in native machine format only.
Due to the multiplicity of floating-point formats and the lack of a
standard \*(L"network\*(R" representation for them, no facility for interchange has been
made.  This means that packed floating-point data written on one machine
may not be readable on another, even if both use \s-1IEEE\s0 floating-point
arithmetic (because the endianness of the memory representation is not part
of the \s-1IEEE\s0 spec).  See also perlport.
.Sp
If you know \fIexactly\fR what you're doing, you can use the \f(CW\*(C`>\*(C'\fR or \f(CW\*(C`<\*(C'\fR
modifiers to force big\- or little-endian byte-order on floating-point values.
.Sp
Because Perl uses doubles (or long doubles, if configured) internally for
all numeric calculation, converting from double into float and thence 
to double again loses precision, so \f(CW\*(C`unpack("f", pack("f", $foo)\*(C'\fR)
will not in general equal \f(CW$foo\fR.
.IP "\(bu" 4
Pack and unpack can operate in two modes: character mode (\f(CW\*(C`C0\*(C'\fR mode) where
the packed string is processed per character, and \s-1UTF\-8\s0 mode (\f(CW\*(C`U0\*(C'\fR mode)
where the packed string is processed in its UTF\-8\-encoded Unicode form on
a byte-by-byte basis.  Character mode is the default
unless the format string starts with \f(CW\*(C`U\*(C'\fR.  You
can always switch mode mid-format with an explicit 
\&\f(CW\*(C`C0\*(C'\fR or \f(CW\*(C`U0\*(C'\fR in the format.  This mode remains in effect until the next 
mode change, or until the end of the \f(CW\*(C`()\*(C'\fR group it (directly) applies to.
.Sp
Using \f(CW\*(C`C0\*(C'\fR to get Unicode characters while using \f(CW\*(C`U0\*(C'\fR to get \fInon\fR\-Unicode 
bytes is not necessarily obvious.   Probably only the first of these
is what you want:
.Sp
.Vb 12
\&    $ perl \-CS \-E \*(Aqsay "\ex{3B1}\ex{3C9}"\*(Aq | 
\&      perl \-CS \-ne \*(Aqprintf "%v04X\en", $_ for unpack("C0A*", $_)\*(Aq
\&    03B1.03C9
\&    $ perl \-CS \-E \*(Aqsay "\ex{3B1}\ex{3C9}"\*(Aq | 
\&      perl \-CS \-ne \*(Aqprintf "%v02X\en", $_ for unpack("U0A*", $_)\*(Aq
\&    CE.B1.CF.89
\&    $ perl \-CS \-E \*(Aqsay "\ex{3B1}\ex{3C9}"\*(Aq | 
\&      perl \-C0 \-ne \*(Aqprintf "%v02X\en", $_ for unpack("C0A*", $_)\*(Aq
\&    CE.B1.CF.89
\&    $ perl \-CS \-E \*(Aqsay "\ex{3B1}\ex{3C9}"\*(Aq | 
\&      perl \-C0 \-ne \*(Aqprintf "%v02X\en", $_ for unpack("U0A*", $_)\*(Aq
\&    C3.8E.C2.B1.C3.8F.C2.89
.Ve
.Sp
Those examples also illustrate that you should not try to use
\&\f(CW\*(C`pack\*(C'\fR/\f(CW\*(C`unpack\*(C'\fR as a substitute for the Encode module.
.IP "\(bu" 4
You must yourself do any alignment or padding by inserting, for example,
enough \f(CW"x"\fRes while packing.  There is no way for \fIpack()\fR and \fIunpack()\fR
to know where characters are going to or coming from, so they 
handle their output and input as flat sequences of characters.
.IP "\(bu" 4
A \f(CW\*(C`()\*(C'\fR group is a sub-TEMPLATE enclosed in parentheses.  A group may
take a repeat count either as postfix, or for \fIunpack()\fR, also via the \f(CW\*(C`/\*(C'\fR
template character.  Within each repetition of a group, positioning with
\&\f(CW\*(C`@\*(C'\fR starts over at 0.  Therefore, the result of
.Sp
.Vb 1
\&    pack("@1A((@2A)@3A)", qw[X Y Z])
.Ve
.Sp
is the string \f(CW"\e0X\e0\e0YZ"\fR.
.IP "\(bu" 4
\&\f(CW\*(C`x\*(C'\fR and \f(CW\*(C`X\*(C'\fR accept the \f(CW\*(C`!\*(C'\fR modifier to act as alignment commands: they
jump forward or back to the closest position aligned at a multiple of \f(CW\*(C`count\*(C'\fR
characters.  For example, to \fIpack()\fR or \fIunpack()\fR a C structure like
.Sp
.Vb 5
\&    struct {
\&        char   c;    /* one signed, 8\-bit character */
\&        double d; 
\&        char   cc[2];
\&    }
.Ve
.Sp
one may need to use the template \f(CW\*(C`c x![d] d c[2]\*(C'\fR.  This assumes that
doubles must be aligned to the size of double.
.Sp
For alignment commands, a \f(CW\*(C`count\*(C'\fR of 0 is equivalent to a \f(CW\*(C`count\*(C'\fR of 1;
both are no-ops.
.IP "\(bu" 4
\&\f(CW\*(C`n\*(C'\fR, \f(CW\*(C`N\*(C'\fR, \f(CW\*(C`v\*(C'\fR and \f(CW\*(C`V\*(C'\fR accept the \f(CW\*(C`!\*(C'\fR modifier to
represent signed 16\-/32\-bit integers in big\-/little\-endian order.
This is portable only when all platforms sharing packed data use the
same binary representation for signed integers; for example, when all
platforms use two's-complement representation.
.IP "\(bu" 4
Comments can be embedded in a \s-1TEMPLATE\s0 using \f(CW\*(C`#\*(C'\fR through the end of line.
White space can separate pack codes from each other, but modifiers and
repeat counts must follow immediately.  Breaking complex templates into
individual line-by-line components, suitably annotated, can do as much to
improve legibility and maintainability of pack/unpack formats as \f(CW\*(C`/x\*(C'\fR can
for complicated pattern matches.
.IP "\(bu" 4
If \s-1TEMPLATE\s0 requires more arguments than \fIpack()\fR is given, \fIpack()\fR
assumes additional \f(CW""\fR arguments.  If \s-1TEMPLATE\s0 requires fewer arguments
than given, extra arguments are ignored.
.RE
.RS 4
.Sp
Examples:
.Sp
.Vb 10
\&    $foo = pack("WWWW",65,66,67,68);
\&    # foo eq "ABCD"
\&    $foo = pack("W4",65,66,67,68);
\&    # same thing
\&    $foo = pack("W4",0x24b6,0x24b7,0x24b8,0x24b9);
\&    # same thing with Unicode circled letters.
\&    $foo = pack("U4",0x24b6,0x24b7,0x24b8,0x24b9);
\&    # same thing with Unicode circled letters.  You don\*(Aqt get the
\&    # UTF\-8 bytes because the U at the start of the format caused
\&    # a switch to U0\-mode, so the UTF\-8 bytes get joined into
\&    # characters
\&    $foo = pack("C0U4",0x24b6,0x24b7,0x24b8,0x24b9);
\&    # foo eq "\exe2\ex92\exb6\exe2\ex92\exb7\exe2\ex92\exb8\exe2\ex92\exb9"
\&    # This is the UTF\-8 encoding of the string in the
\&    # previous example
\&
\&    $foo = pack("ccxxcc",65,66,67,68);
\&    # foo eq "AB\e0\e0CD"
\&
\&    # NOTE: The examples above featuring "W" and "c" are true
\&    # only on ASCII and ASCII\-derived systems such as ISO Latin 1
\&    # and UTF\-8.  On EBCDIC systems, the first example would be
\&    #      $foo = pack("WWWW",193,194,195,196);
\&
\&    $foo = pack("s2",1,2);
\&    # "\e001\e000\e002\e000" on little\-endian
\&    # "\e000\e001\e000\e002" on big\-endian
\&
\&    $foo = pack("a4","abcd","x","y","z");
\&    # "abcd"
\&
\&    $foo = pack("aaaa","abcd","x","y","z");
\&    # "axyz"
\&
\&    $foo = pack("a14","abcdefg");
\&    # "abcdefg\e0\e0\e0\e0\e0\e0\e0"
\&
\&    $foo = pack("i9pl", gmtime);
\&    # a real struct tm (on my system anyway)
\&
\&    $utmp_template = "Z8 Z8 Z16 L";
\&    $utmp = pack($utmp_template, @utmp1);
\&    # a struct utmp (BSDish)
\&
\&    @utmp2 = unpack($utmp_template, $utmp);
\&    # "@utmp1" eq "@utmp2"
\&
\&    sub bintodec {
\&        unpack("N", pack("B32", substr("0" x 32 . shift, \-32)));
\&    }
\&
\&    $foo = pack(\*(Aqsx2l\*(Aq, 12, 34);
\&    # short 12, two zero bytes padding, long 34
\&    $bar = pack(\*(Aqs@4l\*(Aq, 12, 34);
\&    # short 12, zero fill to position 4, long 34
\&    # $foo eq $bar
\&    $baz = pack(\*(Aqs.l\*(Aq, 12, 4, 34);
\&    # short 12, zero fill to position 4, long 34
\&
\&    $foo = pack(\*(AqnN\*(Aq, 42, 4711);
\&    # pack big\-endian 16\- and 32\-bit unsigned integers
\&    $foo = pack(\*(AqS>L>\*(Aq, 42, 4711);
\&    # exactly the same
\&    $foo = pack(\*(Aqs<l<\*(Aq, \-42, 4711);
\&    # pack little\-endian 16\- and 32\-bit signed integers
\&    $foo = pack(\*(Aq(sl)<\*(Aq, \-42, 4711);
\&    # exactly the same
.Ve
.Sp
The same template may generally also be used in \fIunpack()\fR.
.RE
.IP "package \s-1NAMESPACE\s0" 4
.IX Item "package NAMESPACE"
.PD 0
.IP "package \s-1NAMESPACE VERSION \s0" 4
.IX Xref "package module namespace version"
.IX Item "package NAMESPACE VERSION "
.IP "package \s-1NAMESPACE BLOCK\s0" 4
.IX Item "package NAMESPACE BLOCK"
.IP "package \s-1NAMESPACE VERSION BLOCK \s0" 4
.IX Xref "package module namespace version"
.IX Item "package NAMESPACE VERSION BLOCK "
.PD
Declares the \s-1BLOCK\s0 or the rest of the compilation unit as being in the
given namespace.  The scope of the package declaration is either the
supplied code \s-1BLOCK\s0 or, in the absence of a \s-1BLOCK,\s0 from the declaration
itself through the end of current scope (the enclosing block, file, or
\&\f(CW\*(C`eval\*(C'\fR).  That is, the forms without a \s-1BLOCK\s0 are operative through the end
of the current scope, just like the \f(CW\*(C`my\*(C'\fR, \f(CW\*(C`state\*(C'\fR, and \f(CW\*(C`our\*(C'\fR operators.
All unqualified dynamic identifiers in this scope will be in the given
namespace, except where overridden by another \f(CW\*(C`package\*(C'\fR declaration or
when they're one of the special identifiers that qualify into \f(CW\*(C`main::\*(C'\fR,
like \f(CW\*(C`STDOUT\*(C'\fR, \f(CW\*(C`ARGV\*(C'\fR, \f(CW\*(C`ENV\*(C'\fR, and the punctuation variables.
.Sp
A package statement affects dynamic variables only, including those
you've used \f(CW\*(C`local\*(C'\fR on, but \fInot\fR lexically-scoped variables, which are created
with \f(CW\*(C`my\*(C'\fR, \f(CW\*(C`state\*(C'\fR, or \f(CW\*(C`our\*(C'\fR.  Typically it would be the first 
declaration in a file included by \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR.  You can switch into a
package in more than one place, since this only determines which default 
symbol table the compiler uses for the rest of that block.  You can refer to
identifiers in other packages than the current one by prefixing the identifier
with the package name and a double colon, as in \f(CW$SomePack::var\fR
or \f(CW\*(C`ThatPack::INPUT_HANDLE\*(C'\fR.  If package name is omitted, the \f(CW\*(C`main\*(C'\fR
package as assumed.  That is, \f(CW$::sail\fR is equivalent to
\&\f(CW$main::sail\fR (as well as to \f(CW\*(C`$main\*(Aqsail\*(C'\fR, still seen in ancient
code, mostly from Perl 4).
.Sp
If \s-1VERSION\s0 is provided, \f(CW\*(C`package\*(C'\fR sets the \f(CW$VERSION\fR variable in the given
namespace to a version object with the \s-1VERSION\s0 provided.  \s-1VERSION\s0 must be a
\&\*(L"strict\*(R" style version number as defined by the version module: a positive
decimal number (integer or decimal-fraction) without exponentiation or else a
dotted-decimal v\-string with a leading 'v' character and at least three
components.  You should set \f(CW$VERSION\fR only once per package.
.Sp
See \*(L"Packages\*(R" in perlmod for more information about packages, modules,
and classes.  See perlsub for other scoping issues.
.IP "_\|_PACKAGE_\|_" 4
.IX Xref "__PACKAGE__"
.IX Item "__PACKAGE__"
A special token that returns the name of the package in which it occurs.
.IP "pipe \s-1READHANDLE,WRITEHANDLE \s0" 4
.IX Xref "pipe"
.IX Item "pipe READHANDLE,WRITEHANDLE "
Opens a pair of connected pipes like the corresponding system call.
Note that if you set up a loop of piped processes, deadlock can occur
unless you are very careful.  In addition, note that Perl's pipes use
\&\s-1IO\s0 buffering, so you may need to set \f(CW$|\fR to flush your \s-1WRITEHANDLE\s0
after each command, depending on the application.
.Sp
Returns true on success.
.Sp
See IPC::Open2, IPC::Open3, and
\&\*(L"Bidirectional Communication with Another Process\*(R" in perlipc
for examples of such things.
.Sp
On systems that support a close-on-exec flag on files, that flag is set
on all newly opened file descriptors whose \f(CW\*(C`fileno\*(C'\fRs are \fIhigher\fR than 
the current value of $^F (by default 2 for \f(CW\*(C`STDERR\*(C'\fR).  See \*(L"$^F\*(R" in perlvar.
.IP "pop \s-1ARRAY \s0" 4
.IX Xref "pop stack"
.IX Item "pop ARRAY "
.PD 0
.IP "pop \s-1EXPR\s0" 4
.IX Item "pop EXPR"
.IP "pop" 4
.IX Item "pop"
.PD
Pops and returns the last value of the array, shortening the array by
one element.
.Sp
Returns the undefined value if the array is empty, although this may also
happen at other times.  If \s-1ARRAY\s0 is omitted, pops the \f(CW@ARGV\fR array in the
main program, but the \f(CW@_\fR array in subroutines, just like \f(CW\*(C`shift\*(C'\fR.
.Sp
Starting with Perl 5.14, \f(CW\*(C`pop\*(C'\fR can take a scalar \s-1EXPR,\s0 which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of \f(CW\*(C`pop\*(C'\fR is considered highly experimental.
The exact behaviour may change in a future version of Perl.
.Sp
To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work \fIonly\fR on Perls of
a recent vintage:
.Sp
.Vb 1
\&    use 5.014;  # so push/pop/etc work on scalars (experimental)
.Ve
.IP "pos \s-1SCALAR \s0" 4
.IX Xref "pos match, position"
.IX Item "pos SCALAR "
.PD 0
.IP "pos" 4
.IX Item "pos"
.PD
Returns the offset of where the last \f(CW\*(C`m//g\*(C'\fR search left off for the
variable in question (\f(CW$_\fR is used when the variable is not
specified).  Note that 0 is a valid match offset.  \f(CW\*(C`undef\*(C'\fR indicates
that the search position is reset (usually due to match failure, but
can also be because no match has yet been run on the scalar).
.Sp
\&\f(CW\*(C`pos\*(C'\fR directly accesses the location used by the regexp engine to
store the offset, so assigning to \f(CW\*(C`pos\*(C'\fR will change that offset, and
so will also influence the \f(CW\*(C`\eG\*(C'\fR zero-width assertion in regular
expressions.  Both of these effects take place for the next match, so
you can't affect the position with \f(CW\*(C`pos\*(C'\fR during the current match,
such as in \f(CW\*(C`(?{pos() = 5})\*(C'\fR or \f(CW\*(C`s//pos() = 5/e\*(C'\fR.
.Sp
Setting \f(CW\*(C`pos\*(C'\fR also resets the \fImatched with zero-length\fR flag, described
under \*(L"Repeated Patterns Matching a Zero-length Substring\*(R" in perlre.
.Sp
Because a failed \f(CW\*(C`m//gc\*(C'\fR match doesn't reset the offset, the return
from \f(CW\*(C`pos\*(C'\fR won't change either in this case.  See perlre and
perlop.
.IP "print \s-1FILEHANDLE LIST \s0" 4
.IX Xref "print"
.IX Item "print FILEHANDLE LIST "
.PD 0
.IP "print \s-1FILEHANDLE\s0" 4
.IX Item "print FILEHANDLE"
.IP "print \s-1LIST\s0" 4
.IX Item "print LIST"
.IP "print" 4
.IX Item "print"
.PD
Prints a string or a list of strings.  Returns true if successful.
\&\s-1FILEHANDLE\s0 may be a scalar variable containing the name of or a reference
to the filehandle, thus introducing one level of indirection.  (\s-1NOTE:\s0 If
\&\s-1FILEHANDLE\s0 is a variable and the next token is a term, it may be
misinterpreted as an operator unless you interpose a \f(CW\*(C`+\*(C'\fR or put
parentheses around the arguments.)  If \s-1FILEHANDLE\s0 is omitted, prints to the
last selected (see \*(L"select\*(R") output handle.  If \s-1LIST\s0 is omitted, prints
\&\f(CW$_\fR to the currently selected output handle.  To use \s-1FILEHANDLE\s0 alone to
print the content of \f(CW$_\fR to it, you must use a real filehandle like
\&\f(CW\*(C`FH\*(C'\fR, not an indirect one like \f(CW$fh\fR.  To set the default output handle
to something other than \s-1STDOUT,\s0 use the select operation.
.Sp
The current value of \f(CW$,\fR (if any) is printed between each \s-1LIST\s0 item.  The
current value of \f(CW\*(C`$\e\*(C'\fR (if any) is printed after the entire \s-1LIST\s0 has been
printed.  Because print takes a \s-1LIST,\s0 anything in the \s-1LIST\s0 is evaluated in
list context, including any subroutines whose return lists you pass to
\&\f(CW\*(C`print\*(C'\fR.  Be careful not to follow the print keyword with a left
parenthesis unless you want the corresponding right parenthesis to
terminate the arguments to the print; put parentheses around all arguments
(or interpose a \f(CW\*(C`+\*(C'\fR, but that doesn't look as good).
.Sp
If you're storing handles in an array or hash, or in general whenever
you're using any expression more complex than a bareword handle or a plain,
unsubscripted scalar variable to retrieve it, you will have to use a block
returning the filehandle value instead, in which case the \s-1LIST\s0 may not be
omitted:
.Sp
.Vb 2
\&    print { $files[$i] } "stuff\en";
\&    print { $OK ? STDOUT : STDERR } "stuff\en";
.Ve
.Sp
Printing to a closed pipe or socket will generate a \s-1SIGPIPE\s0 signal.  See
perlipc for more on signal handling.
.IP "printf \s-1FILEHANDLE FORMAT, LIST \s0" 4
.IX Xref "printf"
.IX Item "printf FILEHANDLE FORMAT, LIST "
.PD 0
.IP "printf \s-1FILEHANDLE\s0" 4
.IX Item "printf FILEHANDLE"
.IP "printf \s-1FORMAT, LIST\s0" 4
.IX Item "printf FORMAT, LIST"
.IP "printf" 4
.IX Item "printf"
.PD
Equivalent to \f(CW\*(C`print FILEHANDLE sprintf(FORMAT, LIST)\*(C'\fR, except that \f(CW\*(C`$\e\*(C'\fR
(the output record separator) is not appended.  The \s-1FORMAT\s0 and the
\&\s-1LIST\s0 are actually parsed as a single list.  The first argument
of the list will be interpreted as the \f(CW\*(C`printf\*(C'\fR format.  This
means that \f(CW\*(C`printf(@_)\*(C'\fR will use \f(CW$_[0]\fR as the format.  See
sprintf for an
explanation of the format argument.  If \f(CW\*(C`use locale\*(C'\fR (including
\&\f(CW\*(C`use locale \*(Aq:not_characters\*(Aq\*(C'\fR) is in effect and
\&\fIPOSIX::setlocale()\fR has been called, the character used for the decimal
separator in formatted floating-point numbers is affected by the \s-1LC_NUMERIC\s0
locale setting.  See perllocale and \s-1POSIX\s0.
.Sp
For historical reasons, if you omit the list, \f(CW$_\fR is used as the format;
to use \s-1FILEHANDLE\s0 without a list, you must use a real filehandle like
\&\f(CW\*(C`FH\*(C'\fR, not an indirect one like \f(CW$fh\fR.  However, this will rarely do what
you want; if \f(CW$_\fR contains formatting codes, they will be replaced with the
empty string and a warning will be emitted if warnings are enabled.  Just
use \f(CW\*(C`print\*(C'\fR if you want to print the contents of \f(CW$_\fR.
.Sp
Don't fall into the trap of using a \f(CW\*(C`printf\*(C'\fR when a simple
\&\f(CW\*(C`print\*(C'\fR would do.  The \f(CW\*(C`print\*(C'\fR is more efficient and less
error prone.
.IP "prototype \s-1FUNCTION \s0" 4
.IX Xref "prototype"
.IX Item "prototype FUNCTION "
Returns the prototype of a function as a string (or \f(CW\*(C`undef\*(C'\fR if the
function has no prototype).  \s-1FUNCTION\s0 is a reference to, or the name of,
the function whose prototype you want to retrieve.
.Sp
If \s-1FUNCTION\s0 is a string starting with \f(CW\*(C`CORE::\*(C'\fR, the rest is taken as a
name for a Perl builtin.  If the builtin's arguments
cannot be adequately expressed by a prototype
(such as \f(CW\*(C`system\*(C'\fR), \fIprototype()\fR returns \f(CW\*(C`undef\*(C'\fR, because the builtin
does not really behave like a Perl function.  Otherwise, the string
describing the equivalent prototype is returned.
.IP "push \s-1ARRAY,LIST \s0" 4
.IX Xref "push stack"
.IX Item "push ARRAY,LIST "
.PD 0
.IP "push \s-1EXPR,LIST\s0" 4
.IX Item "push EXPR,LIST"
.PD
Treats \s-1ARRAY\s0 as a stack by appending the values of \s-1LIST\s0 to the end of
\&\s-1ARRAY. \s0 The length of \s-1ARRAY\s0 increases by the length of \s-1LIST. \s0 Has the same
effect as
.Sp
.Vb 3
\&    for $value (LIST) {
\&        $ARRAY[++$#ARRAY] = $value;
\&    }
.Ve
.Sp
but is more efficient.  Returns the number of elements in the array following
the completed \f(CW\*(C`push\*(C'\fR.
.Sp
Starting with Perl 5.14, \f(CW\*(C`push\*(C'\fR can take a scalar \s-1EXPR,\s0 which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of \f(CW\*(C`push\*(C'\fR is considered highly experimental.
The exact behaviour may change in a future version of Perl.
.Sp
To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work \fIonly\fR on Perls of
a recent vintage:
.Sp
.Vb 1
\&    use 5.014;  # so push/pop/etc work on scalars (experimental)
.Ve
.IP "q/STRING/" 4
.IX Item "q/STRING/"
.PD 0
.IP "qq/STRING/" 4
.IX Item "qq/STRING/"
.IP "qw/STRING/" 4
.IX Item "qw/STRING/"
.IP "qx/STRING/" 4
.IX Item "qx/STRING/"
.PD
Generalized quotes.  See \*(L"Quote-Like Operators\*(R" in perlop.
.IP "qr/STRING/" 4
.IX Item "qr/STRING/"
Regexp-like quote.  See \*(L"Regexp Quote-Like Operators\*(R" in perlop.
.IP "quotemeta \s-1EXPR \s0" 4
.IX Xref "quotemeta metacharacter"
.IX Item "quotemeta EXPR "
.PD 0
.IP "quotemeta" 4
.IX Item "quotemeta"
.PD
Returns the value of \s-1EXPR\s0 with all the \s-1ASCII\s0 non\-\*(L"word\*(R"
characters backslashed.  (That is, all \s-1ASCII\s0 characters not matching
\&\f(CW\*(C`/[A\-Za\-z_0\-9]/\*(C'\fR will be preceded by a backslash in the
returned string, regardless of any locale settings.)
This is the internal function implementing
the \f(CW\*(C`\eQ\*(C'\fR escape in double-quoted strings.
(See below for the behavior on non-ASCII code points.)
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.Sp
quotemeta (and \f(CW\*(C`\eQ\*(C'\fR ... \f(CW\*(C`\eE\*(C'\fR) are useful when interpolating strings into
regular expressions, because by default an interpolated variable will be
considered a mini-regular expression.  For example:
.Sp
.Vb 3
\&    my $sentence = \*(AqThe quick brown fox jumped over the lazy dog\*(Aq;
\&    my $substring = \*(Aqquick.*?fox\*(Aq;
\&    $sentence =~ s{$substring}{big bad wolf};
.Ve
.Sp
Will cause \f(CW$sentence\fR to become \f(CW\*(AqThe big bad wolf jumped over...\*(Aq\fR.
.Sp
On the other hand:
.Sp
.Vb 3
\&    my $sentence = \*(AqThe quick brown fox jumped over the lazy dog\*(Aq;
\&    my $substring = \*(Aqquick.*?fox\*(Aq;
\&    $sentence =~ s{\eQ$substring\eE}{big bad wolf};
.Ve
.Sp
Or:
.Sp
.Vb 4
\&    my $sentence = \*(AqThe quick brown fox jumped over the lazy dog\*(Aq;
\&    my $substring = \*(Aqquick.*?fox\*(Aq;
\&    my $quoted_substring = quotemeta($substring);
\&    $sentence =~ s{$quoted_substring}{big bad wolf};
.Ve
.Sp
Will both leave the sentence as is.
Normally, when accepting literal string
input from the user, \fIquotemeta()\fR or \f(CW\*(C`\eQ\*(C'\fR must be used.
.Sp
In Perl v5.14, all non-ASCII characters are quoted in non\-UTF\-8\-encoded
strings, but not quoted in \s-1UTF\-8\s0 strings.
.Sp
Starting in Perl v5.16, Perl adopted a Unicode-defined strategy for
quoting non-ASCII characters; the quoting of \s-1ASCII\s0 characters is
unchanged.
.Sp
Also unchanged is the quoting of non\-UTF\-8 strings when outside the
scope of a \f(CW\*(C`use feature \*(Aqunicode_strings\*(Aq\*(C'\fR, which is to quote all
characters in the upper Latin1 range.  This provides complete backwards
compatibility for old programs which do not use Unicode.  (Note that
\&\f(CW\*(C`unicode_strings\*(C'\fR is automatically enabled within the scope of a
\&\f(CW\*(C`use\ v5.12\*(C'\fR or greater.)
.Sp
Within the scope of \f(CW\*(C`use locale\*(C'\fR, all non-ASCII Latin1 code points
are quoted whether the string is encoded as \s-1UTF\-8\s0 or not.  As mentioned
above, locale does not affect the quoting of ASCII-range characters.
This protects against those locales where characters such as \f(CW"|"\fR are
considered to be word characters.
.Sp
Otherwise, Perl quotes non-ASCII characters using an adaptation from
Unicode (see <http://www.unicode.org/reports/tr31/>).
The only code points that are quoted are those that have any of the
Unicode properties:  Pattern_Syntax, Pattern_White_Space, White_Space,
Default_Ignorable_Code_Point, or General_Category=Control.
.Sp
Of these properties, the two important ones are Pattern_Syntax and
Pattern_White_Space.  They have been set up by Unicode for exactly this
purpose of deciding which characters in a regular expression pattern
should be quoted.  No character that can be in an identifier has these
properties.
.Sp
Perl promises, that if we ever add regular expression pattern
metacharacters to the dozen already defined
(\f(CW\*(C`\e | ( ) [ { ^ $ * + ? .\*(C'\fR), that we will only use ones that have the
Pattern_Syntax property.  Perl also promises, that if we ever add
characters that are considered to be white space in regular expressions
(currently mostly affected by \f(CW\*(C`/x\*(C'\fR), they will all have the
Pattern_White_Space property.
.Sp
Unicode promises that the set of code points that have these two
properties will never change, so something that is not quoted in v5.16
will never need to be quoted in any future Perl release.  (Not all the
code points that match Pattern_Syntax have actually had characters
assigned to them; so there is room to grow, but they are quoted
whether assigned or not.  Perl, of course, would never use an
unassigned code point as an actual metacharacter.)
.Sp
Quoting characters that have the other 3 properties is done to enhance
the readability of the regular expression and not because they actually
need to be quoted for regular expression purposes (characters with the
White_Space property are likely to be indistinguishable on the page or
screen from those with the Pattern_White_Space property; and the other
two properties contain non-printing characters).
.IP "rand \s-1EXPR \s0" 4
.IX Xref "rand random"
.IX Item "rand EXPR "
.PD 0
.IP "rand" 4
.IX Item "rand"
.PD
Returns a random fractional number greater than or equal to \f(CW0\fR and less
than the value of \s-1EXPR.  \s0(\s-1EXPR\s0 should be positive.)  If \s-1EXPR\s0 is
omitted, the value \f(CW1\fR is used.  Currently \s-1EXPR\s0 with the value \f(CW0\fR is
also special-cased as \f(CW1\fR (this was undocumented before Perl 5.8.0
and is subject to change in future versions of Perl).  Automatically calls
\&\f(CW\*(C`srand\*(C'\fR unless \f(CW\*(C`srand\*(C'\fR has already been called.  See also \f(CW\*(C`srand\*(C'\fR.
.Sp
Apply \f(CW\*(C`int()\*(C'\fR to the value returned by \f(CW\*(C`rand()\*(C'\fR if you want random
integers instead of random fractional numbers.  For example,
.Sp
.Vb 1
\&    int(rand(10))
.Ve
.Sp
returns a random integer between \f(CW0\fR and \f(CW9\fR, inclusive.
.Sp
(Note: If your rand function consistently returns numbers that are too
large or too small, then your version of Perl was probably compiled
with the wrong number of \s-1RANDBITS.\s0)
.Sp
\&\fB\f(CB\*(C`rand()\*(C'\fB is not cryptographically secure.  You should not rely
on it in security-sensitive situations.\fR  As of this writing, a
number of third-party \s-1CPAN\s0 modules offer random number generators
intended by their authors to be cryptographically secure,
including: Data::Entropy, Crypt::Random, Math::Random::Secure,
and Math::TrulyRandom.
.IP "read \s-1FILEHANDLE,SCALAR,LENGTH,OFFSET \s0" 4
.IX Xref "read file, read"
.IX Item "read FILEHANDLE,SCALAR,LENGTH,OFFSET "
.PD 0
.IP "read \s-1FILEHANDLE,SCALAR,LENGTH\s0" 4
.IX Item "read FILEHANDLE,SCALAR,LENGTH"
.PD
Attempts to read \s-1LENGTH \s0\fIcharacters\fR of data into variable \s-1SCALAR\s0
from the specified \s-1FILEHANDLE. \s0 Returns the number of characters
actually read, \f(CW0\fR at end of file, or undef if there was an error (in
the latter case \f(CW$!\fR is also set).  \s-1SCALAR\s0 will be grown or shrunk 
so that the last character actually read is the last character of the
scalar after the read.
.Sp
An \s-1OFFSET\s0 may be specified to place the read data at some place in the
string other than the beginning.  A negative \s-1OFFSET\s0 specifies
placement at that many characters counting backwards from the end of
the string.  A positive \s-1OFFSET\s0 greater than the length of \s-1SCALAR\s0
results in the string being padded to the required size with \f(CW"\e0"\fR
bytes before the result of the read is appended.
.Sp
The call is implemented in terms of either Perl's or your system's native
\&\fIfread\fR\|(3) library function.  To get a true \fIread\fR\|(2) system call, see
sysread.
.Sp
Note the \fIcharacters\fR: depending on the status of the filehandle,
either (8\-bit) bytes or characters are read.  By default, all
filehandles operate on bytes, but for example if the filehandle has
been opened with the \f(CW\*(C`:utf8\*(C'\fR I/O layer (see \*(L"open\*(R", and the \f(CW\*(C`open\*(C'\fR
pragma, open), the I/O will operate on UTF8\-encoded Unicode
characters, not bytes.  Similarly for the \f(CW\*(C`:encoding\*(C'\fR pragma:
in that case pretty much any characters can be read.
.IP "readdir \s-1DIRHANDLE \s0" 4
.IX Xref "readdir"
.IX Item "readdir DIRHANDLE "
Returns the next directory entry for a directory opened by \f(CW\*(C`opendir\*(C'\fR.
If used in list context, returns all the rest of the entries in the
directory.  If there are no more entries, returns the undefined value in
scalar context and the empty list in list context.
.Sp
If you're planning to filetest the return values out of a \f(CW\*(C`readdir\*(C'\fR, you'd
better prepend the directory in question.  Otherwise, because we didn't
\&\f(CW\*(C`chdir\*(C'\fR there, it would have been testing the wrong file.
.Sp
.Vb 3
\&    opendir(my $dh, $some_dir) || die "can\*(Aqt opendir $some_dir: $!";
\&    @dots = grep { /^\e./ && \-f "$some_dir/$_" } readdir($dh);
\&    closedir $dh;
.Ve
.Sp
As of Perl 5.12 you can use a bare \f(CW\*(C`readdir\*(C'\fR in a \f(CW\*(C`while\*(C'\fR loop,
which will set \f(CW$_\fR on every iteration.
.Sp
.Vb 5
\&    opendir(my $dh, $some_dir) || die;
\&    while(readdir $dh) {
\&        print "$some_dir/$_\en";
\&    }
\&    closedir $dh;
.Ve
.Sp
To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious failures, put this sort of thing at the
top of your file to signal that your code will work \fIonly\fR on Perls of a
recent vintage:
.Sp
.Vb 1
\&    use 5.012; # so readdir assigns to $_ in a lone while test
.Ve
.IP "readline \s-1EXPR\s0" 4
.IX Item "readline EXPR"
.PD 0
.IP "readline" 4
.IX Xref "readline gets fgets"
.IX Item "readline"
.PD
Reads from the filehandle whose typeglob is contained in \s-1EXPR \s0(or from
\&\f(CW*ARGV\fR if \s-1EXPR\s0 is not provided).  In scalar context, each call reads and
returns the next line until end-of-file is reached, whereupon the
subsequent call returns \f(CW\*(C`undef\*(C'\fR.  In list context, reads until end-of-file
is reached and returns a list of lines.  Note that the notion of \*(L"line\*(R"
used here is whatever you may have defined with \f(CW$/\fR or
\&\f(CW$INPUT_RECORD_SEPARATOR\fR).  See \*(L"$/\*(R" in perlvar.
.Sp
When \f(CW$/\fR is set to \f(CW\*(C`undef\*(C'\fR, when \f(CW\*(C`readline\*(C'\fR is in scalar
context (i.e., file slurp mode), and when an empty file is read, it
returns \f(CW\*(Aq\*(Aq\fR the first time, followed by \f(CW\*(C`undef\*(C'\fR subsequently.
.Sp
This is the internal function implementing the \f(CW\*(C`<EXPR>\*(C'\fR
operator, but you can use it directly.  The \f(CW\*(C`<EXPR>\*(C'\fR
operator is discussed in more detail in \*(L"I/O Operators\*(R" in perlop.
.Sp
.Vb 2
\&    $line = <STDIN>;
\&    $line = readline(*STDIN);    # same thing
.Ve
.Sp
If \f(CW\*(C`readline\*(C'\fR encounters an operating system error, \f(CW$!\fR will be set
with the corresponding error message.  It can be helpful to check
\&\f(CW$!\fR when you are reading from filehandles you don't trust, such as a
tty or a socket.  The following example uses the operator form of
\&\f(CW\*(C`readline\*(C'\fR and dies if the result is not defined.
.Sp
.Vb 4
\&    while ( ! eof($fh) ) {
\&        defined( $_ = <$fh> ) or die "readline failed: $!";
\&        ...
\&    }
.Ve
.Sp
Note that you have can't handle \f(CW\*(C`readline\*(C'\fR errors that way with the
\&\f(CW\*(C`ARGV\*(C'\fR filehandle.  In that case, you have to open each element of
\&\f(CW@ARGV\fR yourself since \f(CW\*(C`eof\*(C'\fR handles \f(CW\*(C`ARGV\*(C'\fR differently.
.Sp
.Vb 2
\&    foreach my $arg (@ARGV) {
\&        open(my $fh, $arg) or warn "Can\*(Aqt open $arg: $!";
\&
\&        while ( ! eof($fh) ) {
\&            defined( $_ = <$fh> )
\&                or die "readline failed for $arg: $!";
\&            ...
\&        }
\&    }
.Ve
.IP "readlink \s-1EXPR \s0" 4
.IX Xref "readlink"
.IX Item "readlink EXPR "
.PD 0
.IP "readlink" 4
.IX Item "readlink"
.PD
Returns the value of a symbolic link, if symbolic links are
implemented.  If not, raises an exception.  If there is a system
error, returns the undefined value and sets \f(CW$!\fR (errno).  If \s-1EXPR\s0 is
omitted, uses \f(CW$_\fR.
.Sp
Portability issues: \*(L"readlink\*(R" in perlport.
.IP "readpipe \s-1EXPR\s0" 4
.IX Item "readpipe EXPR"
.PD 0
.IP "readpipe" 4
.IX Xref "readpipe"
.IX Item "readpipe"
.PD
\&\s-1EXPR\s0 is executed as a system command.
The collected standard output of the command is returned.
In scalar context, it comes back as a single (potentially
multi-line) string.  In list context, returns a list of lines
(however you've defined lines with \f(CW$/\fR or \f(CW$INPUT_RECORD_SEPARATOR\fR).
This is the internal function implementing the \f(CW\*(C`qx/EXPR/\*(C'\fR
operator, but you can use it directly.  The \f(CW\*(C`qx/EXPR/\*(C'\fR
operator is discussed in more detail in \*(L"I/O Operators\*(R" in perlop.
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.IP "recv \s-1SOCKET,SCALAR,LENGTH,FLAGS \s0" 4
.IX Xref "recv"
.IX Item "recv SOCKET,SCALAR,LENGTH,FLAGS "
Receives a message on a socket.  Attempts to receive \s-1LENGTH\s0 characters
of data into variable \s-1SCALAR\s0 from the specified \s-1SOCKET\s0 filehandle.
\&\s-1SCALAR\s0 will be grown or shrunk to the length actually read.  Takes the
same flags as the system call of the same name.  Returns the address
of the sender if \s-1SOCKET\s0's protocol supports this; returns an empty
string otherwise.  If there's an error, returns the undefined value.
This call is actually implemented in terms of \fIrecvfrom\fR\|(2) system call.
See \*(L"\s-1UDP:\s0 Message Passing\*(R" in perlipc for examples.
.Sp
Note the \fIcharacters\fR: depending on the status of the socket, either
(8\-bit) bytes or characters are received.  By default all sockets
operate on bytes, but for example if the socket has been changed using
\&\fIbinmode()\fR to operate with the \f(CW\*(C`:encoding(utf8)\*(C'\fR I/O layer (see the
\&\f(CW\*(C`open\*(C'\fR pragma, open), the I/O will operate on UTF8\-encoded Unicode
characters, not bytes.  Similarly for the \f(CW\*(C`:encoding\*(C'\fR pragma: in that
case pretty much any characters can be read.
.IP "redo \s-1LABEL \s0" 4
.IX Xref "redo"
.IX Item "redo LABEL "
.PD 0
.IP "redo \s-1EXPR\s0" 4
.IX Item "redo EXPR"
.IP "redo" 4
.IX Item "redo"
.PD
The \f(CW\*(C`redo\*(C'\fR command restarts the loop block without evaluating the
conditional again.  The \f(CW\*(C`continue\*(C'\fR block, if any, is not executed.  If
the \s-1LABEL\s0 is omitted, the command refers to the innermost enclosing
loop.  The \f(CW\*(C`redo EXPR\*(C'\fR form, available starting in Perl 5.18.0, allows a
label name to be computed at run time, and is otherwise identical to \f(CW\*(C`redo
LABEL\*(C'\fR.  Programs that want to lie to themselves about what was just input 
normally use this command:
.Sp
.Vb 10
\&    # a simpleminded Pascal comment stripper
\&    # (warning: assumes no { or } in strings)
\&    LINE: while (<STDIN>) {
\&        while (s|({.*}.*){.*}|$1 |) {}
\&        s|{.*}| |;
\&        if (s|{.*| |) {
\&            $front = $_;
\&            while (<STDIN>) {
\&                if (/}/) {  # end of comment?
\&                    s|^|$front\e{|;
\&                    redo LINE;
\&                }
\&            }
\&        }
\&        print;
\&    }
.Ve
.Sp
\&\f(CW\*(C`redo\*(C'\fR cannot be used to retry a block that returns a value such as
\&\f(CW\*(C`eval {}\*(C'\fR, \f(CW\*(C`sub {}\*(C'\fR, or \f(CW\*(C`do {}\*(C'\fR, and should not be used to exit
a \fIgrep()\fR or \fImap()\fR operation.
.Sp
Note that a block by itself is semantically identical to a loop
that executes once.  Thus \f(CW\*(C`redo\*(C'\fR inside such a block will effectively
turn it into a looping construct.
.Sp
See also \*(L"continue\*(R" for an illustration of how \f(CW\*(C`last\*(C'\fR, \f(CW\*(C`next\*(C'\fR, and
\&\f(CW\*(C`redo\*(C'\fR work.
.Sp
Unlike most named operators, this has the same precedence as assignment.
It is also exempt from the looks-like-a-function rule, so
\&\f(CW\*(C`redo ("foo")."bar"\*(C'\fR will cause \*(L"bar\*(R" to be part of the argument to
\&\f(CW\*(C`redo\*(C'\fR.
.IP "ref \s-1EXPR \s0" 4
.IX Xref "ref reference"
.IX Item "ref EXPR "
.PD 0
.IP "ref" 4
.IX Item "ref"
.PD
Returns a non-empty string if \s-1EXPR\s0 is a reference, the empty
string otherwise.  If \s-1EXPR\s0
is not specified, \f(CW$_\fR will be used.  The value returned depends on the
type of thing the reference is a reference to.
Builtin types include:
.Sp
.Vb 11
\&    SCALAR
\&    ARRAY
\&    HASH
\&    CODE
\&    REF
\&    GLOB
\&    LVALUE
\&    FORMAT
\&    IO
\&    VSTRING
\&    Regexp
.Ve
.Sp
If the referenced object has been blessed into a package, then that package
name is returned instead.  You can think of \f(CW\*(C`ref\*(C'\fR as a \f(CW\*(C`typeof\*(C'\fR operator.
.Sp
.Vb 6
\&    if (ref($r) eq "HASH") {
\&        print "r is a reference to a hash.\en";
\&    }
\&    unless (ref($r)) {
\&        print "r is not a reference at all.\en";
\&    }
.Ve
.Sp
The return value \f(CW\*(C`LVALUE\*(C'\fR indicates a reference to an lvalue that is not
a variable.  You get this from taking the reference of function calls like
\&\f(CW\*(C`pos()\*(C'\fR or \f(CW\*(C`substr()\*(C'\fR.  \f(CW\*(C`VSTRING\*(C'\fR is returned if the reference points
to a version string.
.Sp
The result \f(CW\*(C`Regexp\*(C'\fR indicates that the argument is a regular expression
resulting from \f(CW\*(C`qr//\*(C'\fR.
.Sp
See also perlref.
.IP "rename \s-1OLDNAME,NEWNAME \s0" 4
.IX Xref "rename move mv ren"
.IX Item "rename OLDNAME,NEWNAME "
Changes the name of a file; an existing file \s-1NEWNAME\s0 will be
clobbered.  Returns true for success, false otherwise.
.Sp
Behavior of this function varies wildly depending on your system
implementation.  For example, it will usually not work across file system
boundaries, even though the system \fImv\fR command sometimes compensates
for this.  Other restrictions include whether it works on directories,
open files, or pre-existing files.  Check perlport and either the
\&\fIrename\fR\|(2) manpage or equivalent system documentation for details.
.Sp
For a platform independent \f(CW\*(C`move\*(C'\fR function look at the File::Copy
module.
.Sp
Portability issues: \*(L"rename\*(R" in perlport.
.IP "require \s-1VERSION \s0" 4
.IX Xref "require"
.IX Item "require VERSION "
.PD 0
.IP "require \s-1EXPR\s0" 4
.IX Item "require EXPR"
.IP "require" 4
.IX Item "require"
.PD
Demands a version of Perl specified by \s-1VERSION,\s0 or demands some semantics
specified by \s-1EXPR\s0 or by \f(CW$_\fR if \s-1EXPR\s0 is not supplied.
.Sp
\&\s-1VERSION\s0 may be either a numeric argument such as 5.006, which will be
compared to \f(CW$]\fR, or a literal of the form v5.6.1, which will be compared
to \f(CW$^V\fR (aka \f(CW$PERL_VERSION\fR).  An exception is raised if
\&\s-1VERSION\s0 is greater than the version of the current Perl interpreter.
Compare with \*(L"use\*(R", which can do a similar check at compile time.
.Sp
Specifying \s-1VERSION\s0 as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl that do not support this syntax.  The equivalent numeric
version should be used instead.
.Sp
.Vb 4
\&    require v5.6.1;     # run time version check
\&    require 5.6.1;      # ditto
\&    require 5.006_001;  # ditto; preferred for backwards
\&                          compatibility
.Ve
.Sp
Otherwise, \f(CW\*(C`require\*(C'\fR demands that a library file be included if it
hasn't already been included.  The file is included via the do-FILE
mechanism, which is essentially just a variety of \f(CW\*(C`eval\*(C'\fR with the
caveat that lexical variables in the invoking script will be invisible
to the included code.  Has semantics similar to the following subroutine:
.Sp
.Vb 10
\&    sub require {
\&       my ($filename) = @_;
\&       if (exists $INC{$filename}) {
\&           return 1 if $INC{$filename};
\&           die "Compilation failed in require";
\&       }
\&       my ($realfilename,$result);
\&       ITER: {
\&           foreach $prefix (@INC) {
\&               $realfilename = "$prefix/$filename";
\&               if (\-f $realfilename) {
\&                   $INC{$filename} = $realfilename;
\&                   $result = do $realfilename;
\&                   last ITER;
\&               }
\&           }
\&           die "Can\*(Aqt find $filename in \e@INC";
\&       }
\&       if ($@) {
\&           $INC{$filename} = undef;
\&           die $@;
\&       } elsif (!$result) {
\&           delete $INC{$filename};
\&           die "$filename did not return true value";
\&       } else {
\&           return $result;
\&       }
\&    }
.Ve
.Sp
Note that the file will not be included twice under the same specified
name.
.Sp
The file must return true as the last statement to indicate
successful execution of any initialization code, so it's customary to
end such a file with \f(CW\*(C`1;\*(C'\fR unless you're sure it'll return true
otherwise.  But it's better just to put the \f(CW\*(C`1;\*(C'\fR, in case you add more
statements.
.Sp
If \s-1EXPR\s0 is a bareword, the require assumes a "\fI.pm\fR\*(L" extension and
replaces \*(R"\fI::\fR\*(L" with \*(R"\fI/\fR" in the filename for you,
to make it easy to load standard modules.  This form of loading of
modules does not risk altering your namespace.
.Sp
In other words, if you try this:
.Sp
.Vb 1
\&        require Foo::Bar;     # a splendid bareword
.Ve
.Sp
The require function will actually look for the "\fIFoo/Bar.pm\fR" file in the
directories specified in the \f(CW@INC\fR array.
.Sp
But if you try this:
.Sp
.Vb 4
\&        $class = \*(AqFoo::Bar\*(Aq;
\&        require $class;       # $class is not a bareword
\&    #or
\&        require "Foo::Bar";   # not a bareword because of the ""
.Ve
.Sp
The require function will look for the "\fIFoo::Bar\fR\*(L" file in the \f(CW@INC\fR array and
will complain about not finding \*(R"\fIFoo::Bar\fR" there.  In this case you can do:
.Sp
.Vb 1
\&        eval "require $class";
.Ve
.Sp
Now that you understand how \f(CW\*(C`require\*(C'\fR looks for files with a
bareword argument, there is a little extra functionality going on behind
the scenes.  Before \f(CW\*(C`require\*(C'\fR looks for a "\fI.pm\fR\*(L" extension, it will
first look for a similar filename with a \*(R"\fI.pmc\fR\*(L" extension.  If this file
is found, it will be loaded in place of any file ending in a \*(R"\fI.pm\fR"
extension.
.Sp
You can also insert hooks into the import facility by putting Perl code
directly into the \f(CW@INC\fR array.  There are three forms of hooks: subroutine
references, array references, and blessed objects.
.Sp
Subroutine references are the simplest case.  When the inclusion system
walks through \f(CW@INC\fR and encounters a subroutine, this subroutine gets
called with two parameters, the first a reference to itself, and the
second the name of the file to be included (e.g., "\fIFoo/Bar.pm\fR").  The
subroutine should return either nothing or else a list of up to three 
values in the following order:
.RS 4
.IP "1." 4
A filehandle, from which the file will be read.
.IP "2." 4
A reference to a subroutine.  If there is no filehandle (previous item),
then this subroutine is expected to generate one line of source code per
call, writing the line into \f(CW$_\fR and returning 1, then finally at end of
file returning 0.  If there is a filehandle, then the subroutine will be
called to act as a simple source filter, with the line as read in \f(CW$_\fR.
Again, return 1 for each valid line, and 0 after all lines have been
returned.
.IP "3." 4
Optional state for the subroutine.  The state is passed in as \f(CW$_[1]\fR.  A
reference to the subroutine itself is passed in as \f(CW$_[0]\fR.
.RE
.RS 4
.Sp
If an empty list, \f(CW\*(C`undef\*(C'\fR, or nothing that matches the first 3 values above
is returned, then \f(CW\*(C`require\*(C'\fR looks at the remaining elements of \f(CW@INC\fR.
Note that this filehandle must be a real filehandle (strictly a typeglob
or reference to a typeglob, whether blessed or unblessed); tied filehandles 
will be ignored and processing will stop there.
.Sp
If the hook is an array reference, its first element must be a subroutine
reference.  This subroutine is called as above, but the first parameter is
the array reference.  This lets you indirectly pass arguments to
the subroutine.
.Sp
In other words, you can write:
.Sp
.Vb 5
\&    push @INC, \e&my_sub;
\&    sub my_sub {
\&        my ($coderef, $filename) = @_;  # $coderef is \e&my_sub
\&        ...
\&    }
.Ve
.Sp
or:
.Sp
.Vb 7
\&    push @INC, [ \e&my_sub, $x, $y, ... ];
\&    sub my_sub {
\&        my ($arrayref, $filename) = @_;
\&        # Retrieve $x, $y, ...
\&        my @parameters = @$arrayref[1..$#$arrayref];
\&        ...
\&    }
.Ve
.Sp
If the hook is an object, it must provide an \s-1INC\s0 method that will be
called as above, the first parameter being the object itself.  (Note that
you must fully qualify the sub's name, as unqualified \f(CW\*(C`INC\*(C'\fR is always forced
into package \f(CW\*(C`main\*(C'\fR.)  Here is a typical code layout:
.Sp
.Vb 7
\&    # In Foo.pm
\&    package Foo;
\&    sub new { ... }
\&    sub Foo::INC {
\&        my ($self, $filename) = @_;
\&        ...
\&    }
\&
\&    # In the main program
\&    push @INC, Foo\->new(...);
.Ve
.Sp
These hooks are also permitted to set the \f(CW%INC\fR entry
corresponding to the files they have loaded.  See \*(L"%INC\*(R" in perlvar.
.Sp
For a yet-more-powerful import facility, see \*(L"use\*(R" and perlmod.
.RE
.IP "reset \s-1EXPR \s0" 4
.IX Xref "reset"
.IX Item "reset EXPR "
.PD 0
.IP "reset" 4
.IX Item "reset"
.PD
Generally used in a \f(CW\*(C`continue\*(C'\fR block at the end of a loop to clear
variables and reset \f(CW\*(C`??\*(C'\fR searches so that they work again.  The
expression is interpreted as a list of single characters (hyphens
allowed for ranges).  All variables and arrays beginning with one of
those letters are reset to their pristine state.  If the expression is
omitted, one-match searches (\f(CW\*(C`?pattern?\*(C'\fR) are reset to match again.  
Only resets variables or searches in the current package.  Always returns
1.  Examples:
.Sp
.Vb 3
\&    reset \*(AqX\*(Aq;      # reset all X variables
\&    reset \*(Aqa\-z\*(Aq;    # reset lower case variables
\&    reset;          # just reset ?one\-time? searches
.Ve
.Sp
Resetting \f(CW"A\-Z"\fR is not recommended because you'll wipe out your
\&\f(CW@ARGV\fR and \f(CW@INC\fR arrays and your \f(CW%ENV\fR hash.  Resets only package
variables; lexical variables are unaffected, but they clean themselves
up on scope exit anyway, so you'll probably want to use them instead.
See \*(L"my\*(R".
.IP "return \s-1EXPR \s0" 4
.IX Xref "return"
.IX Item "return EXPR "
.PD 0
.IP "return" 4
.IX Item "return"
.PD
Returns from a subroutine, \f(CW\*(C`eval\*(C'\fR, or \f(CW\*(C`do FILE\*(C'\fR with the value
given in \s-1EXPR. \s0 Evaluation of \s-1EXPR\s0 may be in list, scalar, or void
context, depending on how the return value will be used, and the context
may vary from one execution to the next (see \*(L"wantarray\*(R").  If no \s-1EXPR\s0
is given, returns an empty list in list context, the undefined value in
scalar context, and (of course) nothing at all in void context.
.Sp
(In the absence of an explicit \f(CW\*(C`return\*(C'\fR, a subroutine, eval,
or do \s-1FILE\s0 automatically returns the value of the last expression
evaluated.)
.Sp
Unlike most named operators, this is also exempt from the
looks-like-a-function rule, so \f(CW\*(C`return ("foo")."bar"\*(C'\fR will
cause \*(L"bar\*(R" to be part of the argument to \f(CW\*(C`return\*(C'\fR.
.IP "reverse \s-1LIST \s0" 4
.IX Xref "reverse rev invert"
.IX Item "reverse LIST "
In list context, returns a list value consisting of the elements
of \s-1LIST\s0 in the opposite order.  In scalar context, concatenates the
elements of \s-1LIST\s0 and returns a string value with all characters
in the opposite order.
.Sp
.Vb 1
\&    print join(", ", reverse "world", "Hello"); # Hello, world
\&
\&    print scalar reverse "dlrow ,", "olleH";    # Hello, world
.Ve
.Sp
Used without arguments in scalar context, \fIreverse()\fR reverses \f(CW$_\fR.
.Sp
.Vb 3
\&    $_ = "dlrow ,olleH";
\&    print reverse;                         # No output, list context
\&    print scalar reverse;                  # Hello, world
.Ve
.Sp
Note that reversing an array to itself (as in \f(CW\*(C`@a = reverse @a\*(C'\fR) will
preserve non-existent elements whenever possible; i.e., for non-magical
arrays or for tied arrays with \f(CW\*(C`EXISTS\*(C'\fR and \f(CW\*(C`DELETE\*(C'\fR methods.
.Sp
This operator is also handy for inverting a hash, although there are some
caveats.  If a value is duplicated in the original hash, only one of those
can be represented as a key in the inverted hash.  Also, this has to
unwind one hash and build a whole new one, which may take some time
on a large hash, such as from a \s-1DBM\s0 file.
.Sp
.Vb 1
\&    %by_name = reverse %by_address;  # Invert the hash
.Ve
.IP "rewinddir \s-1DIRHANDLE \s0" 4
.IX Xref "rewinddir"
.IX Item "rewinddir DIRHANDLE "
Sets the current position to the beginning of the directory for the
\&\f(CW\*(C`readdir\*(C'\fR routine on \s-1DIRHANDLE.\s0
.Sp
Portability issues: \*(L"rewinddir\*(R" in perlport.
.IP "rindex \s-1STR,SUBSTR,POSITION \s0" 4
.IX Xref "rindex"
.IX Item "rindex STR,SUBSTR,POSITION "
.PD 0
.IP "rindex \s-1STR,SUBSTR\s0" 4
.IX Item "rindex STR,SUBSTR"
.PD
Works just like \fIindex()\fR except that it returns the position of the \fIlast\fR
occurrence of \s-1SUBSTR\s0 in \s-1STR. \s0 If \s-1POSITION\s0 is specified, returns the
last occurrence beginning at or before that position.
.IP "rmdir \s-1FILENAME \s0" 4
.IX Xref "rmdir rd directory, remove"
.IX Item "rmdir FILENAME "
.PD 0
.IP "rmdir" 4
.IX Item "rmdir"
.PD
Deletes the directory specified by \s-1FILENAME\s0 if that directory is
empty.  If it succeeds it returns true; otherwise it returns false and
sets \f(CW$!\fR (errno).  If \s-1FILENAME\s0 is omitted, uses \f(CW$_\fR.
.Sp
To remove a directory tree recursively (\f(CW\*(C`rm \-rf\*(C'\fR on Unix) look at
the \f(CW\*(C`rmtree\*(C'\fR function of the File::Path module.
.IP "s///" 4
.IX Item "s///"
The substitution operator.  See \*(L"Regexp Quote-Like Operators\*(R" in perlop.
.IP "say \s-1FILEHANDLE LIST \s0" 4
.IX Xref "say"
.IX Item "say FILEHANDLE LIST "
.PD 0
.IP "say \s-1FILEHANDLE\s0" 4
.IX Item "say FILEHANDLE"
.IP "say \s-1LIST\s0" 4
.IX Item "say LIST"
.IP "say" 4
.IX Item "say"
.PD
Just like \f(CW\*(C`print\*(C'\fR, but implicitly appends a newline.  \f(CW\*(C`say LIST\*(C'\fR is
simply an abbreviation for \f(CW\*(C`{ local $\e = "\en"; print LIST }\*(C'\fR.  To use
\&\s-1FILEHANDLE\s0 without a \s-1LIST\s0 to print the contents of \f(CW$_\fR to it, you must
use a real filehandle like \f(CW\*(C`FH\*(C'\fR, not an indirect one like \f(CW$fh\fR.
.Sp
This keyword is available only when the \f(CW"say"\fR feature
is enabled, or when prefixed with \f(CW\*(C`CORE::\*(C'\fR; see
feature.  Alternately, include a \f(CW\*(C`use v5.10\*(C'\fR or later to the current
scope.
.IP "scalar \s-1EXPR \s0" 4
.IX Xref "scalar context"
.IX Item "scalar EXPR "
Forces \s-1EXPR\s0 to be interpreted in scalar context and returns the value
of \s-1EXPR.\s0
.Sp
.Vb 1
\&    @counts = ( scalar @a, scalar @b, scalar @c );
.Ve
.Sp
There is no equivalent operator to force an expression to
be interpolated in list context because in practice, this is never
needed.  If you really wanted to do so, however, you could use
the construction \f(CW\*(C`@{[ (some expression) ]}\*(C'\fR, but usually a simple
\&\f(CW\*(C`(some expression)\*(C'\fR suffices.
.Sp
Because \f(CW\*(C`scalar\*(C'\fR is a unary operator, if you accidentally use a
parenthesized list for the \s-1EXPR,\s0 this behaves as a scalar comma expression,
evaluating all but the last element in void context and returning the final
element evaluated in scalar context.  This is seldom what you want.
.Sp
The following single statement:
.Sp
.Vb 1
\&    print uc(scalar(&foo,$bar)),$baz;
.Ve
.Sp
is the moral equivalent of these two:
.Sp
.Vb 2
\&    &foo;
\&    print(uc($bar),$baz);
.Ve
.Sp
See perlop for more details on unary operators and the comma operator.
.IP "seek \s-1FILEHANDLE,POSITION,WHENCE \s0" 4
.IX Xref "seek fseek filehandle, position"
.IX Item "seek FILEHANDLE,POSITION,WHENCE "
Sets \s-1FILEHANDLE\s0's position, just like the \f(CW\*(C`fseek\*(C'\fR call of \f(CW\*(C`stdio\*(C'\fR.
\&\s-1FILEHANDLE\s0 may be an expression whose value gives the name of the
filehandle.  The values for \s-1WHENCE\s0 are \f(CW0\fR to set the new position
\&\fIin bytes\fR to \s-1POSITION\s0; \f(CW1\fR to set it to the current position plus
\&\s-1POSITION\s0; and \f(CW2\fR to set it to \s-1EOF\s0 plus \s-1POSITION,\s0 typically
negative.  For \s-1WHENCE\s0 you may use the constants \f(CW\*(C`SEEK_SET\*(C'\fR,
\&\f(CW\*(C`SEEK_CUR\*(C'\fR, and \f(CW\*(C`SEEK_END\*(C'\fR (start of the file, current position, end
of the file) from the Fcntl module.  Returns \f(CW1\fR on success, false
otherwise.
.Sp
Note the \fIin bytes\fR: even if the filehandle has been set to
operate on characters (for example by using the \f(CW\*(C`:encoding(utf8)\*(C'\fR open
layer), \fItell()\fR will return byte offsets, not character offsets
(because implementing that would render \fIseek()\fR and \fItell()\fR rather slow).
.Sp
If you want to position the file for \f(CW\*(C`sysread\*(C'\fR or \f(CW\*(C`syswrite\*(C'\fR, don't use
\&\f(CW\*(C`seek\*(C'\fR, because buffering makes its effect on the file's read-write position
unpredictable and non-portable.  Use \f(CW\*(C`sysseek\*(C'\fR instead.
.Sp
Due to the rules and rigors of \s-1ANSI C,\s0 on some systems you have to do a
seek whenever you switch between reading and writing.  Amongst other
things, this may have the effect of calling stdio's \fIclearerr\fR\|(3).
A \s-1WHENCE\s0 of \f(CW1\fR (\f(CW\*(C`SEEK_CUR\*(C'\fR) is useful for not moving the file position:
.Sp
.Vb 1
\&    seek(TEST,0,1);
.Ve
.Sp
This is also useful for applications emulating \f(CW\*(C`tail \-f\*(C'\fR.  Once you hit
\&\s-1EOF\s0 on your read and then sleep for a while, you (probably) have to stick in a
dummy \fIseek()\fR to reset things.  The \f(CW\*(C`seek\*(C'\fR doesn't change the position,
but it \fIdoes\fR clear the end-of-file condition on the handle, so that the
next \f(CW\*(C`<FILE>\*(C'\fR makes Perl try again to read something.  (We hope.)
.Sp
If that doesn't work (some I/O implementations are particularly
cantankerous), you might need something like this:
.Sp
.Vb 8
\&    for (;;) {
\&        for ($curpos = tell(FILE); $_ = <FILE>;
\&             $curpos = tell(FILE)) {
\&            # search for some stuff and put it into files
\&        }
\&        sleep($for_a_while);
\&        seek(FILE, $curpos, 0);
\&    }
.Ve
.IP "seekdir \s-1DIRHANDLE,POS \s0" 4
.IX Xref "seekdir"
.IX Item "seekdir DIRHANDLE,POS "
Sets the current position for the \f(CW\*(C`readdir\*(C'\fR routine on \s-1DIRHANDLE.  POS\s0
must be a value returned by \f(CW\*(C`telldir\*(C'\fR.  \f(CW\*(C`seekdir\*(C'\fR also has the same caveats
about possible directory compaction as the corresponding system library
routine.
.IP "select \s-1FILEHANDLE \s0" 4
.IX Xref "select filehandle, default"
.IX Item "select FILEHANDLE "
.PD 0
.IP "select" 4
.IX Item "select"
.PD
Returns the currently selected filehandle.  If \s-1FILEHANDLE\s0 is supplied,
sets the new current default filehandle for output.  This has two
effects: first, a \f(CW\*(C`write\*(C'\fR or a \f(CW\*(C`print\*(C'\fR without a filehandle 
default to this \s-1FILEHANDLE. \s0 Second, references to variables related to
output will refer to this output channel.
.Sp
For example, to set the top-of-form format for more than one
output channel, you might do the following:
.Sp
.Vb 4
\&    select(REPORT1);
\&    $^ = \*(Aqreport1_top\*(Aq;
\&    select(REPORT2);
\&    $^ = \*(Aqreport2_top\*(Aq;
.Ve
.Sp
\&\s-1FILEHANDLE\s0 may be an expression whose value gives the name of the
actual filehandle.  Thus:
.Sp
.Vb 1
\&    $oldfh = select(STDERR); $| = 1; select($oldfh);
.Ve
.Sp
Some programmers may prefer to think of filehandles as objects with
methods, preferring to write the last example as:
.Sp
.Vb 2
\&    use IO::Handle;
\&    STDERR\->autoflush(1);
.Ve
.Sp
Portability issues: \*(L"select\*(R" in perlport.
.IP "select \s-1RBITS,WBITS,EBITS,TIMEOUT \s0" 4
.IX Xref "select"
.IX Item "select RBITS,WBITS,EBITS,TIMEOUT "
This calls the \fIselect\fR\|(2) syscall with the bit masks specified, which
can be constructed using \f(CW\*(C`fileno\*(C'\fR and \f(CW\*(C`vec\*(C'\fR, along these lines:
.Sp
.Vb 4
\&    $rin = $win = $ein = \*(Aq\*(Aq;
\&    vec($rin, fileno(STDIN),  1) = 1;
\&    vec($win, fileno(STDOUT), 1) = 1;
\&    $ein = $rin | $win;
.Ve
.Sp
If you want to select on many filehandles, you may wish to write a
subroutine like this:
.Sp
.Vb 9
\&    sub fhbits {
\&        my @fhlist = @_;
\&        my $bits = "";
\&        for my $fh (@fhlist) {
\&            vec($bits, fileno($fh), 1) = 1;
\&        }
\&        return $bits;
\&    }
\&    $rin = fhbits(*STDIN, *TTY, *MYSOCK);
.Ve
.Sp
The usual idiom is:
.Sp
.Vb 2
\&    ($nfound,$timeleft) =
\&      select($rout=$rin, $wout=$win, $eout=$ein, $timeout);
.Ve
.Sp
or to block until something becomes ready just do this
.Sp
.Vb 1
\&    $nfound = select($rout=$rin, $wout=$win, $eout=$ein, undef);
.Ve
.Sp
Most systems do not bother to return anything useful in \f(CW$timeleft\fR, so
calling \fIselect()\fR in scalar context just returns \f(CW$nfound\fR.
.Sp
Any of the bit masks can also be undef.  The timeout, if specified, is
in seconds, which may be fractional.  Note: not all implementations are
capable of returning the \f(CW$timeleft\fR.  If not, they always return
\&\f(CW$timeleft\fR equal to the supplied \f(CW$timeout\fR.
.Sp
You can effect a sleep of 250 milliseconds this way:
.Sp
.Vb 1
\&    select(undef, undef, undef, 0.25);
.Ve
.Sp
Note that whether \f(CW\*(C`select\*(C'\fR gets restarted after signals (say, \s-1SIGALRM\s0)
is implementation-dependent.  See also perlport for notes on the
portability of \f(CW\*(C`select\*(C'\fR.
.Sp
On error, \f(CW\*(C`select\*(C'\fR behaves just like \fIselect\fR\|(2): it returns
\&\-1 and sets \f(CW$!\fR.
.Sp
On some Unixes, \fIselect\fR\|(2) may report a socket file descriptor as \*(L"ready for
reading\*(R" even when no data is available, and thus any subsequent \f(CW\*(C`read\*(C'\fR
would block.  This can be avoided if you always use O_NONBLOCK on the
socket.  See \fIselect\fR\|(2) and \fIfcntl\fR\|(2) for further details.
.Sp
The standard \f(CW\*(C`IO::Select\*(C'\fR module provides a user-friendlier interface
to \f(CW\*(C`select\*(C'\fR, mostly because it does all the bit-mask work for you.
.Sp
\&\fB\s-1WARNING\s0\fR: One should not attempt to mix buffered I/O (like \f(CW\*(C`read\*(C'\fR
or <\s-1FH\s0>) with \f(CW\*(C`select\*(C'\fR, except as permitted by \s-1POSIX,\s0 and even
then only on \s-1POSIX\s0 systems.  You have to use \f(CW\*(C`sysread\*(C'\fR instead.
.Sp
Portability issues: \*(L"select\*(R" in perlport.
.IP "semctl \s-1ID,SEMNUM,CMD,ARG \s0" 4
.IX Xref "semctl"
.IX Item "semctl ID,SEMNUM,CMD,ARG "
Calls the System V \s-1IPC\s0 function \fIsemctl\fR\|(2).  You'll probably have to say
.Sp
.Vb 1
\&    use IPC::SysV;
.Ve
.Sp
first to get the correct constant definitions.  If \s-1CMD\s0 is \s-1IPC_STAT\s0 or
\&\s-1GETALL,\s0 then \s-1ARG\s0 must be a variable that will hold the returned
semid_ds structure or semaphore value array.  Returns like \f(CW\*(C`ioctl\*(C'\fR:
the undefined value for error, "\f(CW\*(C`0 but true\*(C'\fR" for zero, or the actual
return value otherwise.  The \s-1ARG\s0 must consist of a vector of native
short integers, which may be created with \f(CW\*(C`pack("s!",(0)x$nsem)\*(C'\fR.
See also \*(L"SysV \s-1IPC\*(R"\s0 in perlipc, \f(CW\*(C`IPC::SysV\*(C'\fR, \f(CW\*(C`IPC::Semaphore\*(C'\fR
documentation.
.Sp
Portability issues: \*(L"semctl\*(R" in perlport.
.IP "semget \s-1KEY,NSEMS,FLAGS \s0" 4
.IX Xref "semget"
.IX Item "semget KEY,NSEMS,FLAGS "
Calls the System V \s-1IPC\s0 function \fIsemget\fR\|(2).  Returns the semaphore id, or
the undefined value on error.  See also
\&\*(L"SysV \s-1IPC\*(R"\s0 in perlipc, \f(CW\*(C`IPC::SysV\*(C'\fR, \f(CW\*(C`IPC::SysV::Semaphore\*(C'\fR
documentation.
.Sp
Portability issues: \*(L"semget\*(R" in perlport.
.IP "semop \s-1KEY,OPSTRING \s0" 4
.IX Xref "semop"
.IX Item "semop KEY,OPSTRING "
Calls the System V \s-1IPC\s0 function \fIsemop\fR\|(2) for semaphore operations
such as signalling and waiting.  \s-1OPSTRING\s0 must be a packed array of
semop structures.  Each semop structure can be generated with
\&\f(CW\*(C`pack("s!3", $semnum, $semop, $semflag)\*(C'\fR.  The length of \s-1OPSTRING \s0
implies the number of semaphore operations.  Returns true if
successful, false on error.  As an example, the
following code waits on semaphore \f(CW$semnum\fR of semaphore id \f(CW$semid:\fR
.Sp
.Vb 2
\&    $semop = pack("s!3", $semnum, \-1, 0);
\&    die "Semaphore trouble: $!\en" unless semop($semid, $semop);
.Ve
.Sp
To signal the semaphore, replace \f(CW\*(C`\-1\*(C'\fR with \f(CW1\fR.  See also
\&\*(L"SysV \s-1IPC\*(R"\s0 in perlipc, \f(CW\*(C`IPC::SysV\*(C'\fR, and \f(CW\*(C`IPC::SysV::Semaphore\*(C'\fR
documentation.
.Sp
Portability issues: \*(L"semop\*(R" in perlport.
.IP "send \s-1SOCKET,MSG,FLAGS,TO \s0" 4
.IX Xref "send"
.IX Item "send SOCKET,MSG,FLAGS,TO "
.PD 0
.IP "send \s-1SOCKET,MSG,FLAGS\s0" 4
.IX Item "send SOCKET,MSG,FLAGS"
.PD
Sends a message on a socket.  Attempts to send the scalar \s-1MSG\s0 to the \s-1SOCKET\s0
filehandle.  Takes the same flags as the system call of the same name.  On
unconnected sockets, you must specify a destination to \fIsend to\fR, in which
case it does a \fIsendto\fR\|(2) syscall.  Returns the number of characters sent,
or the undefined value on error.  The \fIsendmsg\fR\|(2) syscall is currently
unimplemented.  See \*(L"\s-1UDP:\s0 Message Passing\*(R" in perlipc for examples.
.Sp
Note the \fIcharacters\fR: depending on the status of the socket, either
(8\-bit) bytes or characters are sent.  By default all sockets operate
on bytes, but for example if the socket has been changed using
\&\fIbinmode()\fR to operate with the \f(CW\*(C`:encoding(utf8)\*(C'\fR I/O layer (see
\&\*(L"open\*(R", or the \f(CW\*(C`open\*(C'\fR pragma, open), the I/O will operate on \s-1UTF\-8\s0
encoded Unicode characters, not bytes.  Similarly for the \f(CW\*(C`:encoding\*(C'\fR
pragma: in that case pretty much any characters can be sent.
.IP "setpgrp \s-1PID,PGRP \s0" 4
.IX Xref "setpgrp group"
.IX Item "setpgrp PID,PGRP "
Sets the current process group for the specified \s-1PID, \s0\f(CW0\fR for the current
process.  Raises an exception when used on a machine that doesn't
implement \s-1POSIX\s0 \fIsetpgid\fR\|(2) or \s-1BSD\s0 \fIsetpgrp\fR\|(2).  If the arguments are omitted,
it defaults to \f(CW\*(C`0,0\*(C'\fR.  Note that the \s-1BSD 4.2\s0 version of \f(CW\*(C`setpgrp\*(C'\fR does not
accept any arguments, so only \f(CW\*(C`setpgrp(0,0)\*(C'\fR is portable.  See also
\&\f(CW\*(C`POSIX::setsid()\*(C'\fR.
.Sp
Portability issues: \*(L"setpgrp\*(R" in perlport.
.IP "setpriority \s-1WHICH,WHO,PRIORITY \s0" 4
.IX Xref "setpriority priority nice renice"
.IX Item "setpriority WHICH,WHO,PRIORITY "
Sets the current priority for a process, a process group, or a user.
(See \fIsetpriority\fR\|(2).)  Raises an exception when used on a machine
that doesn't implement \fIsetpriority\fR\|(2).
.Sp
Portability issues: \*(L"setpriority\*(R" in perlport.
.IP "setsockopt \s-1SOCKET,LEVEL,OPTNAME,OPTVAL \s0" 4
.IX Xref "setsockopt"
.IX Item "setsockopt SOCKET,LEVEL,OPTNAME,OPTVAL "
Sets the socket option requested.  Returns \f(CW\*(C`undef\*(C'\fR on error.
Use integer constants provided by the \f(CW\*(C`Socket\*(C'\fR module for
\&\s-1LEVEL\s0 and \s-1OPNAME. \s0 Values for \s-1LEVEL\s0 can also be obtained from
getprotobyname.  \s-1OPTVAL\s0 might either be a packed string or an integer.
An integer \s-1OPTVAL\s0 is shorthand for pack(\*(L"i\*(R", \s-1OPTVAL\s0).
.Sp
An example disabling Nagle's algorithm on a socket:
.Sp
.Vb 2
\&    use Socket qw(IPPROTO_TCP TCP_NODELAY);
\&    setsockopt($socket, IPPROTO_TCP, TCP_NODELAY, 1);
.Ve
.Sp
Portability issues: \*(L"setsockopt\*(R" in perlport.
.IP "shift \s-1ARRAY \s0" 4
.IX Xref "shift"
.IX Item "shift ARRAY "
.PD 0
.IP "shift \s-1EXPR\s0" 4
.IX Item "shift EXPR"
.IP "shift" 4
.IX Item "shift"
.PD
Shifts the first value of the array off and returns it, shortening the
array by 1 and moving everything down.  If there are no elements in the
array, returns the undefined value.  If \s-1ARRAY\s0 is omitted, shifts the
\&\f(CW@_\fR array within the lexical scope of subroutines and formats, and the
\&\f(CW@ARGV\fR array outside a subroutine and also within the lexical scopes
established by the \f(CW\*(C`eval STRING\*(C'\fR, \f(CW\*(C`BEGIN {}\*(C'\fR, \f(CW\*(C`INIT {}\*(C'\fR, \f(CW\*(C`CHECK {}\*(C'\fR,
\&\f(CW\*(C`UNITCHECK {}\*(C'\fR, and \f(CW\*(C`END {}\*(C'\fR constructs.
.Sp
Starting with Perl 5.14, \f(CW\*(C`shift\*(C'\fR can take a scalar \s-1EXPR,\s0 which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of \f(CW\*(C`shift\*(C'\fR is considered highly experimental.
The exact behaviour may change in a future version of Perl.
.Sp
To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work \fIonly\fR on Perls of
a recent vintage:
.Sp
.Vb 1
\&    use 5.014;  # so push/pop/etc work on scalars (experimental)
.Ve
.Sp
See also \f(CW\*(C`unshift\*(C'\fR, \f(CW\*(C`push\*(C'\fR, and \f(CW\*(C`pop\*(C'\fR.  \f(CW\*(C`shift\*(C'\fR and \f(CW\*(C`unshift\*(C'\fR do the
same thing to the left end of an array that \f(CW\*(C`pop\*(C'\fR and \f(CW\*(C`push\*(C'\fR do to the
right end.
.IP "shmctl \s-1ID,CMD,ARG \s0" 4
.IX Xref "shmctl"
.IX Item "shmctl ID,CMD,ARG "
Calls the System V \s-1IPC\s0 function shmctl.  You'll probably have to say
.Sp
.Vb 1
\&    use IPC::SysV;
.Ve
.Sp
first to get the correct constant definitions.  If \s-1CMD\s0 is \f(CW\*(C`IPC_STAT\*(C'\fR,
then \s-1ARG\s0 must be a variable that will hold the returned \f(CW\*(C`shmid_ds\*(C'\fR
structure.  Returns like ioctl: \f(CW\*(C`undef\*(C'\fR for error; "\f(CW0\fR but
true" for zero; and the actual return value otherwise.
See also \*(L"SysV \s-1IPC\*(R"\s0 in perlipc and \f(CW\*(C`IPC::SysV\*(C'\fR documentation.
.Sp
Portability issues: \*(L"shmctl\*(R" in perlport.
.IP "shmget \s-1KEY,SIZE,FLAGS \s0" 4
.IX Xref "shmget"
.IX Item "shmget KEY,SIZE,FLAGS "
Calls the System V \s-1IPC\s0 function shmget.  Returns the shared memory
segment id, or \f(CW\*(C`undef\*(C'\fR on error.
See also \*(L"SysV \s-1IPC\*(R"\s0 in perlipc and \f(CW\*(C`IPC::SysV\*(C'\fR documentation.
.Sp
Portability issues: \*(L"shmget\*(R" in perlport.
.IP "shmread \s-1ID,VAR,POS,SIZE \s0" 4
.IX Xref "shmread shmwrite"
.IX Item "shmread ID,VAR,POS,SIZE "
.PD 0
.IP "shmwrite \s-1ID,STRING,POS,SIZE\s0" 4
.IX Item "shmwrite ID,STRING,POS,SIZE"
.PD
Reads or writes the System V shared memory segment \s-1ID\s0 starting at
position \s-1POS\s0 for size \s-1SIZE\s0 by attaching to it, copying in/out, and
detaching from it.  When reading, \s-1VAR\s0 must be a variable that will
hold the data read.  When writing, if \s-1STRING\s0 is too long, only \s-1SIZE\s0
bytes are used; if \s-1STRING\s0 is too short, nulls are written to fill out
\&\s-1SIZE\s0 bytes.  Return true if successful, false on error.
\&\fIshmread()\fR taints the variable.  See also \*(L"SysV \s-1IPC\*(R"\s0 in perlipc,
\&\f(CW\*(C`IPC::SysV\*(C'\fR, and the \f(CW\*(C`IPC::Shareable\*(C'\fR module from \s-1CPAN.\s0
.Sp
Portability issues: \*(L"shmread\*(R" in perlport and \*(L"shmwrite\*(R" in perlport.
.IP "shutdown \s-1SOCKET,HOW \s0" 4
.IX Xref "shutdown"
.IX Item "shutdown SOCKET,HOW "
Shuts down a socket connection in the manner indicated by \s-1HOW,\s0 which
has the same interpretation as in the syscall of the same name.
.Sp
.Vb 3
\&    shutdown(SOCKET, 0);    # I/we have stopped reading data
\&    shutdown(SOCKET, 1);    # I/we have stopped writing data
\&    shutdown(SOCKET, 2);    # I/we have stopped using this socket
.Ve
.Sp
This is useful with sockets when you want to tell the other
side you're done writing but not done reading, or vice versa.
It's also a more insistent form of close because it also
disables the file descriptor in any forked copies in other
processes.
.Sp
Returns \f(CW1\fR for success; on error, returns \f(CW\*(C`undef\*(C'\fR if
the first argument is not a valid filehandle, or returns \f(CW0\fR and sets
\&\f(CW$!\fR for any other failure.
.IP "sin \s-1EXPR \s0" 4
.IX Xref "sin sine asin arcsine"
.IX Item "sin EXPR "
.PD 0
.IP "sin" 4
.IX Item "sin"
.PD
Returns the sine of \s-1EXPR \s0(expressed in radians).  If \s-1EXPR\s0 is omitted,
returns sine of \f(CW$_\fR.
.Sp
For the inverse sine operation, you may use the \f(CW\*(C`Math::Trig::asin\*(C'\fR
function, or use this relation:
.Sp
.Vb 1
\&    sub asin { atan2($_[0], sqrt(1 \- $_[0] * $_[0])) }
.Ve
.IP "sleep \s-1EXPR \s0" 4
.IX Xref "sleep pause"
.IX Item "sleep EXPR "
.PD 0
.IP "sleep" 4
.IX Item "sleep"
.PD
Causes the script to sleep for (integer) \s-1EXPR\s0 seconds, or forever if no 
argument is given.  Returns the integer number of seconds actually slept.
.Sp
May be interrupted if the process receives a signal such as \f(CW\*(C`SIGALRM\*(C'\fR.
.Sp
.Vb 5
\&    eval {
\&        local $SIG{ALARM} = sub { die "Alarm!\en" };
\&        sleep;
\&    };
\&    die $@ unless $@ eq "Alarm!\en";
.Ve
.Sp
You probably cannot mix \f(CW\*(C`alarm\*(C'\fR and \f(CW\*(C`sleep\*(C'\fR calls, because \f(CW\*(C`sleep\*(C'\fR
is often implemented using \f(CW\*(C`alarm\*(C'\fR.
.Sp
On some older systems, it may sleep up to a full second less than what
you requested, depending on how it counts seconds.  Most modern systems
always sleep the full amount.  They may appear to sleep longer than that,
however, because your process might not be scheduled right away in a
busy multitasking system.
.Sp
For delays of finer granularity than one second, the Time::HiRes module
(from \s-1CPAN,\s0 and starting from Perl 5.8 part of the standard
distribution) provides \fIusleep()\fR.  You may also use Perl's four-argument
version of \fIselect()\fR leaving the first three arguments undefined, or you
might be able to use the \f(CW\*(C`syscall\*(C'\fR interface to access \fIsetitimer\fR\|(2) if
your system supports it.  See perlfaq8 for details.
.Sp
See also the \s-1POSIX\s0 module's \f(CW\*(C`pause\*(C'\fR function.
.IP "socket \s-1SOCKET,DOMAIN,TYPE,PROTOCOL \s0" 4
.IX Xref "socket"
.IX Item "socket SOCKET,DOMAIN,TYPE,PROTOCOL "
Opens a socket of the specified kind and attaches it to filehandle
\&\s-1SOCKET.  DOMAIN, TYPE,\s0 and \s-1PROTOCOL\s0 are specified the same as for
the syscall of the same name.  You should \f(CW\*(C`use Socket\*(C'\fR first
to get the proper definitions imported.  See the examples in
\&\*(L"Sockets: Client/Server Communication\*(R" in perlipc.
.Sp
On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptor, as determined by the
value of $^F.  See \*(L"$^F\*(R" in perlvar.
.IP "socketpair \s-1SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL \s0" 4
.IX Xref "socketpair"
.IX Item "socketpair SOCKET1,SOCKET2,DOMAIN,TYPE,PROTOCOL "
Creates an unnamed pair of sockets in the specified domain, of the
specified type.  \s-1DOMAIN, TYPE,\s0 and \s-1PROTOCOL\s0 are specified the same as
for the syscall of the same name.  If unimplemented, raises an exception.
Returns true if successful.
.Sp
On systems that support a close-on-exec flag on files, the flag will
be set for the newly opened file descriptors, as determined by the value
of $^F.  See \*(L"$^F\*(R" in perlvar.
.Sp
Some systems defined \f(CW\*(C`pipe\*(C'\fR in terms of \f(CW\*(C`socketpair\*(C'\fR, in which a call
to \f(CW\*(C`pipe(Rdr, Wtr)\*(C'\fR is essentially:
.Sp
.Vb 4
\&    use Socket;
\&    socketpair(Rdr, Wtr, AF_UNIX, SOCK_STREAM, PF_UNSPEC);
\&    shutdown(Rdr, 1);        # no more writing for reader
\&    shutdown(Wtr, 0);        # no more reading for writer
.Ve
.Sp
See perlipc for an example of socketpair use.  Perl 5.8 and later will
emulate socketpair using \s-1IP\s0 sockets to localhost if your system implements
sockets but not socketpair.
.Sp
Portability issues: \*(L"socketpair\*(R" in perlport.
.IP "sort \s-1SUBNAME LIST \s0" 4
.IX Xref "sort qsort quicksort mergesort"
.IX Item "sort SUBNAME LIST "
.PD 0
.IP "sort \s-1BLOCK LIST\s0" 4
.IX Item "sort BLOCK LIST"
.IP "sort \s-1LIST\s0" 4
.IX Item "sort LIST"
.PD
In list context, this sorts the \s-1LIST\s0 and returns the sorted list value.
In scalar context, the behaviour of \f(CW\*(C`sort()\*(C'\fR is undefined.
.Sp
If \s-1SUBNAME\s0 or \s-1BLOCK\s0 is omitted, \f(CW\*(C`sort\*(C'\fRs in standard string comparison
order.  If \s-1SUBNAME\s0 is specified, it gives the name of a subroutine
that returns an integer less than, equal to, or greater than \f(CW0\fR,
depending on how the elements of the list are to be ordered.  (The 
\&\f(CW\*(C`<=>\*(C'\fR and \f(CW\*(C`cmp\*(C'\fR operators are extremely useful in such routines.)
\&\s-1SUBNAME\s0 may be a scalar variable name (unsubscripted), in which case
the value provides the name of (or a reference to) the actual
subroutine to use.  In place of a \s-1SUBNAME,\s0 you can provide a \s-1BLOCK\s0 as
an anonymous, in-line sort subroutine.
.Sp
If the subroutine's prototype is \f(CW\*(C`($$)\*(C'\fR, the elements to be compared are
passed by reference in \f(CW@_\fR, as for a normal subroutine.  This is slower
than unprototyped subroutines, where the elements to be compared are passed
into the subroutine as the package global variables \f(CW$a\fR and \f(CW$b\fR (see example
below).  Note that in the latter case, it is usually highly counter-productive
to declare \f(CW$a\fR and \f(CW$b\fR as lexicals.
.Sp
If the subroutine is an \s-1XSUB,\s0 the elements to be compared are pushed on to
the stack, the way arguments are usually passed to XSUBs.  \f(CW$a\fR and \f(CW$b\fR are
not set.
.Sp
The values to be compared are always passed by reference and should not
be modified.
.Sp
You also cannot exit out of the sort block or subroutine using any of the
loop control operators described in perlsyn or with \f(CW\*(C`goto\*(C'\fR.
.Sp
When \f(CW\*(C`use locale\*(C'\fR (but not \f(CW\*(C`use locale \*(Aqnot_characters\*(Aq\*(C'\fR) is in
effect, \f(CW\*(C`sort LIST\*(C'\fR sorts \s-1LIST\s0 according to the
current collation locale.  See perllocale.
.Sp
\&\fIsort()\fR returns aliases into the original list, much as a for loop's index
variable aliases the list elements.  That is, modifying an element of a
list returned by \fIsort()\fR (for example, in a \f(CW\*(C`foreach\*(C'\fR, \f(CW\*(C`map\*(C'\fR or \f(CW\*(C`grep\*(C'\fR)
actually modifies the element in the original list.  This is usually
something to be avoided when writing clear code.
.Sp
Perl 5.6 and earlier used a quicksort algorithm to implement sort.
That algorithm was not stable, so \fIcould\fR go quadratic.  (A \fIstable\fR sort
preserves the input order of elements that compare equal.  Although
quicksort's run time is O(NlogN) when averaged over all arrays of
length N, the time can be O(N**2), \fIquadratic\fR behavior, for some
inputs.)  In 5.7, the quicksort implementation was replaced with
a stable mergesort algorithm whose worst-case behavior is O(NlogN).
But benchmarks indicated that for some inputs, on some platforms,
the original quicksort was faster.  5.8 has a sort pragma for
limited control of the sort.  Its rather blunt control of the
underlying algorithm may not persist into future Perls, but the
ability to characterize the input or output in implementation
independent ways quite probably will.  See the sort pragma.
.Sp
Examples:
.Sp
.Vb 2
\&    # sort lexically
\&    @articles = sort @files;
\&
\&    # same thing, but with explicit sort routine
\&    @articles = sort {$a cmp $b} @files;
\&
\&    # now case\-insensitively
\&    @articles = sort {fc($a) cmp fc($b)} @files;
\&
\&    # same thing in reversed order
\&    @articles = sort {$b cmp $a} @files;
\&
\&    # sort numerically ascending
\&    @articles = sort {$a <=> $b} @files;
\&
\&    # sort numerically descending
\&    @articles = sort {$b <=> $a} @files;
\&
\&    # this sorts the %age hash by value instead of key
\&    # using an in\-line function
\&    @eldest = sort { $age{$b} <=> $age{$a} } keys %age;
\&
\&    # sort using explicit subroutine name
\&    sub byage {
\&        $age{$a} <=> $age{$b};  # presuming numeric
\&    }
\&    @sortedclass = sort byage @class;
\&
\&    sub backwards { $b cmp $a }
\&    @harry  = qw(dog cat x Cain Abel);
\&    @george = qw(gone chased yz Punished Axed);
\&    print sort @harry;
\&        # prints AbelCaincatdogx
\&    print sort backwards @harry;
\&        # prints xdogcatCainAbel
\&    print sort @george, \*(Aqto\*(Aq, @harry;
\&        # prints AbelAxedCainPunishedcatchaseddoggonetoxyz
\&
\&    # inefficiently sort by descending numeric compare using
\&    # the first integer after the first = sign, or the
\&    # whole record case\-insensitively otherwise
\&
\&    my @new = sort {
\&        ($b =~ /=(\ed+)/)[0] <=> ($a =~ /=(\ed+)/)[0]
\&                            ||
\&                    fc($a)  cmp  fc($b)
\&    } @old;
\&
\&    # same thing, but much more efficiently;
\&    # we\*(Aqll build auxiliary indices instead
\&    # for speed
\&    my @nums = @caps = ();
\&    for (@old) {
\&        push @nums, ( /=(\ed+)/ ? $1 : undef );
\&        push @caps, fc($_);
\&    }
\&
\&    my @new = @old[ sort {
\&                           $nums[$b] <=> $nums[$a]
\&                                    ||
\&                           $caps[$a] cmp $caps[$b]
\&                         } 0..$#old
\&                  ];
\&
\&    # same thing, but without any temps
\&    @new = map { $_\->[0] }
\&           sort { $b\->[1] <=> $a\->[1]
\&                           ||
\&                  $a\->[2] cmp $b\->[2]
\&           } map { [$_, /=(\ed+)/, fc($_)] } @old;
\&
\&    # using a prototype allows you to use any comparison subroutine
\&    # as a sort subroutine (including other package\*(Aqs subroutines)
\&    package other;
\&    sub backwards ($$) { $_[1] cmp $_[0]; }  # $a and $b are
\&                                             # not set here    
\&    package main;
\&    @new = sort other::backwards @old;
\&
\&    # guarantee stability, regardless of algorithm
\&    use sort \*(Aqstable\*(Aq;
\&    @new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @old;
\&
\&    # force use of mergesort (not portable outside Perl 5.8)
\&    use sort \*(Aq_mergesort\*(Aq;  # note discouraging _
\&    @new = sort { substr($a, 3, 5) cmp substr($b, 3, 5) } @old;
.Ve
.Sp
Warning: syntactical care is required when sorting the list returned from
a function.  If you want to sort the list returned by the function call
\&\f(CW\*(C`find_records(@key)\*(C'\fR, you can use:
.Sp
.Vb 4
\&    @contact = sort { $a cmp $b } find_records @key;
\&    @contact = sort +find_records(@key);
\&    @contact = sort &find_records(@key);
\&    @contact = sort(find_records(@key));
.Ve
.Sp
If instead you want to sort the array \f(CW@key\fR with the comparison routine
\&\f(CW\*(C`find_records()\*(C'\fR then you can use:
.Sp
.Vb 4
\&    @contact = sort { find_records() } @key;
\&    @contact = sort find_records(@key);
\&    @contact = sort(find_records @key);
\&    @contact = sort(find_records (@key));
.Ve
.Sp
If you're using strict, you \fImust not\fR declare \f(CW$a\fR
and \f(CW$b\fR as lexicals.  They are package globals.  That means
that if you're in the \f(CW\*(C`main\*(C'\fR package and type
.Sp
.Vb 1
\&    @articles = sort {$b <=> $a} @files;
.Ve
.Sp
then \f(CW$a\fR and \f(CW$b\fR are \f(CW$main::a\fR and \f(CW$main::b\fR (or \f(CW$::a\fR and \f(CW$::b\fR),
but if you're in the \f(CW\*(C`FooPack\*(C'\fR package, it's the same as typing
.Sp
.Vb 1
\&    @articles = sort {$FooPack::b <=> $FooPack::a} @files;
.Ve
.Sp
The comparison function is required to behave.  If it returns
inconsistent results (sometimes saying \f(CW$x[1]\fR is less than \f(CW$x[2]\fR and
sometimes saying the opposite, for example) the results are not
well-defined.
.Sp
Because \f(CW\*(C`<=>\*(C'\fR returns \f(CW\*(C`undef\*(C'\fR when either operand is \f(CW\*(C`NaN\*(C'\fR
(not-a-number), be careful when sorting with a
comparison function like \f(CW\*(C`$a <=> $b\*(C'\fR any lists that might contain a
\&\f(CW\*(C`NaN\*(C'\fR.  The following example takes advantage that \f(CW\*(C`NaN != NaN\*(C'\fR to
eliminate any \f(CW\*(C`NaN\*(C'\fRs from the input list.
.Sp
.Vb 1
\&    @result = sort { $a <=> $b } grep { $_ == $_ } @input;
.Ve
.IP "splice \s-1ARRAY\s0 or \s-1EXPR,OFFSET,LENGTH,LIST \s0" 4
.IX Xref "splice"
.IX Item "splice ARRAY or EXPR,OFFSET,LENGTH,LIST "
.PD 0
.IP "splice \s-1ARRAY\s0 or \s-1EXPR,OFFSET,LENGTH\s0" 4
.IX Item "splice ARRAY or EXPR,OFFSET,LENGTH"
.IP "splice \s-1ARRAY\s0 or \s-1EXPR,OFFSET\s0" 4
.IX Item "splice ARRAY or EXPR,OFFSET"
.IP "splice \s-1ARRAY\s0 or \s-1EXPR\s0" 4
.IX Item "splice ARRAY or EXPR"
.PD
Removes the elements designated by \s-1OFFSET\s0 and \s-1LENGTH\s0 from an array, and
replaces them with the elements of \s-1LIST,\s0 if any.  In list context,
returns the elements removed from the array.  In scalar context,
returns the last element removed, or \f(CW\*(C`undef\*(C'\fR if no elements are
removed.  The array grows or shrinks as necessary.
If \s-1OFFSET\s0 is negative then it starts that far from the end of the array.
If \s-1LENGTH\s0 is omitted, removes everything from \s-1OFFSET\s0 onward.
If \s-1LENGTH\s0 is negative, removes the elements from \s-1OFFSET\s0 onward
except for \-LENGTH elements at the end of the array.
If both \s-1OFFSET\s0 and \s-1LENGTH\s0 are omitted, removes everything.  If \s-1OFFSET\s0 is
past the end of the array, Perl issues a warning, and splices at the
end of the array.
.Sp
The following equivalences hold (assuming \f(CW\*(C`$#a >= $i\*(C'\fR )
.Sp
.Vb 5
\&    push(@a,$x,$y)      splice(@a,@a,0,$x,$y)
\&    pop(@a)             splice(@a,\-1)
\&    shift(@a)           splice(@a,0,1)
\&    unshift(@a,$x,$y)   splice(@a,0,0,$x,$y)
\&    $a[$i] = $y         splice(@a,$i,1,$y)
.Ve
.Sp
Example, assuming array lengths are passed before arrays:
.Sp
.Vb 10
\&    sub aeq {  # compare two list values
\&        my(@a) = splice(@_,0,shift);
\&        my(@b) = splice(@_,0,shift);
\&        return 0 unless @a == @b;  # same len?
\&        while (@a) {
\&            return 0 if pop(@a) ne pop(@b);
\&        }
\&        return 1;
\&    }
\&    if (&aeq($len,@foo[1..$len],0+@bar,@bar)) { ... }
.Ve
.Sp
Starting with Perl 5.14, \f(CW\*(C`splice\*(C'\fR can take scalar \s-1EXPR,\s0 which must hold a
reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of \f(CW\*(C`splice\*(C'\fR is considered highly experimental.
The exact behaviour may change in a future version of Perl.
.Sp
To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work \fIonly\fR on Perls of
a recent vintage:
.Sp
.Vb 1
\&    use 5.014;  # so push/pop/etc work on scalars (experimental)
.Ve
.IP "split /PATTERN/,EXPR,LIMIT" 4
.IX Xref "split"
.IX Item "split /PATTERN/,EXPR,LIMIT"
.PD 0
.IP "split /PATTERN/,EXPR" 4
.IX Item "split /PATTERN/,EXPR"
.IP "split /PATTERN/" 4
.IX Item "split /PATTERN/"
.IP "split" 4
.IX Item "split"
.PD
Splits the string \s-1EXPR\s0 into a list of strings and returns the
list in list context, or the size of the list in scalar context.
.Sp
If only \s-1PATTERN\s0 is given, \s-1EXPR\s0 defaults to \f(CW$_\fR.
.Sp
Anything in \s-1EXPR\s0 that matches \s-1PATTERN\s0 is taken to be a separator
that separates the \s-1EXPR\s0 into substrings (called "\fIfields\fR") that
do \fBnot\fR include the separator.  Note that a separator may be
longer than one character or even have no characters at all (the
empty string, which is a zero-width match).
.Sp
The \s-1PATTERN\s0 need not be constant; an expression may be used
to specify a pattern that varies at runtime.
.Sp
If \s-1PATTERN\s0 matches the empty string, the \s-1EXPR\s0 is split at the match
position (between characters).  As an example, the following:
.Sp
.Vb 1
\&    print join(\*(Aq:\*(Aq, split(\*(Aqb\*(Aq, \*(Aqabc\*(Aq)), "\en";
.Ve
.Sp
uses the 'b' in 'abc' as a separator to produce the output 'a:c'.
However, this:
.Sp
.Vb 1
\&    print join(\*(Aq:\*(Aq, split(\*(Aq\*(Aq, \*(Aqabc\*(Aq)), "\en";
.Ve
.Sp
uses empty string matches as separators to produce the output
\&'a:b:c'; thus, the empty string may be used to split \s-1EXPR\s0 into a
list of its component characters.
.Sp
As a special case for \f(CW\*(C`split\*(C'\fR, the empty pattern given in
match operator syntax (\f(CW\*(C`//\*(C'\fR) specifically matches the empty string, which is contrary to its usual
interpretation as the last successful match.
.Sp
If \s-1PATTERN\s0 is \f(CW\*(C`/^/\*(C'\fR, then it is treated as if it used the
multiline modifier (\f(CW\*(C`/^/m\*(C'\fR), since it
isn't much use otherwise.
.Sp
As another special case, \f(CW\*(C`split\*(C'\fR emulates the default behavior of the
command line tool \fBawk\fR when the \s-1PATTERN\s0 is either omitted or a \fIliteral
string\fR composed of a single space character (such as \f(CW\*(Aq\ \*(Aq\fR or
\&\f(CW"\ex20"\fR, but not e.g. \f(CW\*(C`/\ /\*(C'\fR).  In this case, any leading
whitespace in \s-1EXPR\s0 is removed before splitting occurs, and the \s-1PATTERN\s0 is
instead treated as if it were \f(CW\*(C`/\es+/\*(C'\fR; in particular, this means that
\&\fIany\fR contiguous whitespace (not just a single space character) is used as
a separator.  However, this special treatment can be avoided by specifying
the pattern \f(CW\*(C`/\ /\*(C'\fR instead of the string \f(CW"\ "\fR, thereby allowing
only a single space character to be a separator. In earlier Perl's this
special case was restricted to the use of a plain \f(CW"\ "\fR as the
pattern argument to split, in Perl 5.18.0 and later this special case is
triggered by any expression which evaluates as the simple string \f(CW"\ "\fR.
.Sp
If omitted, \s-1PATTERN\s0 defaults to a single space, \f(CW"\ "\fR, triggering
the previously described \fIawk\fR emulation.
.Sp
If \s-1LIMIT\s0 is specified and positive, it represents the maximum number
of fields into which the \s-1EXPR\s0 may be split; in other words, \s-1LIMIT\s0 is
one greater than the maximum number of times \s-1EXPR\s0 may be split.  Thus,
the \s-1LIMIT\s0 value \f(CW1\fR means that \s-1EXPR\s0 may be split a maximum of zero
times, producing a maximum of one field (namely, the entire value of
\&\s-1EXPR\s0).  For instance:
.Sp
.Vb 1
\&    print join(\*(Aq:\*(Aq, split(//, \*(Aqabc\*(Aq, 1)), "\en";
.Ve
.Sp
produces the output 'abc', and this:
.Sp
.Vb 1
\&    print join(\*(Aq:\*(Aq, split(//, \*(Aqabc\*(Aq, 2)), "\en";
.Ve
.Sp
produces the output 'a:bc', and each of these:
.Sp
.Vb 2
\&    print join(\*(Aq:\*(Aq, split(//, \*(Aqabc\*(Aq, 3)), "\en";
\&    print join(\*(Aq:\*(Aq, split(//, \*(Aqabc\*(Aq, 4)), "\en";
.Ve
.Sp
produces the output 'a:b:c'.
.Sp
If \s-1LIMIT\s0 is negative, it is treated as if it were instead arbitrarily
large; as many fields as possible are produced.
.Sp
If \s-1LIMIT\s0 is omitted (or, equivalently, zero), then it is usually
treated as if it were instead negative but with the exception that
trailing empty fields are stripped (empty leading fields are always
preserved); if all fields are empty, then all fields are considered to
be trailing (and are thus stripped in this case).  Thus, the following:
.Sp
.Vb 1
\&    print join(\*(Aq:\*(Aq, split(\*(Aq,\*(Aq, \*(Aqa,b,c,,,\*(Aq)), "\en";
.Ve
.Sp
produces the output 'a:b:c', but the following:
.Sp
.Vb 1
\&    print join(\*(Aq:\*(Aq, split(\*(Aq,\*(Aq, \*(Aqa,b,c,,,\*(Aq, \-1)), "\en";
.Ve
.Sp
produces the output 'a:b:c:::'.
.Sp
In time-critical applications, it is worthwhile to avoid splitting
into more fields than necessary.  Thus, when assigning to a list,
if \s-1LIMIT\s0 is omitted (or zero), then \s-1LIMIT\s0 is treated as though it
were one larger than the number of variables in the list; for the
following, \s-1LIMIT\s0 is implicitly 3:
.Sp
.Vb 1
\&    ($login, $passwd) = split(/:/);
.Ve
.Sp
Note that splitting an \s-1EXPR\s0 that evaluates to the empty string always
produces zero fields, regardless of the \s-1LIMIT\s0 specified.
.Sp
An empty leading field is produced when there is a positive-width
match at the beginning of \s-1EXPR. \s0 For instance:
.Sp
.Vb 1
\&    print join(\*(Aq:\*(Aq, split(/ /, \*(Aq abc\*(Aq)), "\en";
.Ve
.Sp
produces the output ':abc'.  However, a zero-width match at the
beginning of \s-1EXPR\s0 never produces an empty field, so that:
.Sp
.Vb 1
\&    print join(\*(Aq:\*(Aq, split(//, \*(Aq abc\*(Aq));
.Ve
.Sp
produces the output '\ :a:b:c' (rather than ':\ :a:b:c').
.Sp
An empty trailing field, on the other hand, is produced when there is a
match at the end of \s-1EXPR,\s0 regardless of the length of the match
(of course, unless a non-zero \s-1LIMIT\s0 is given explicitly, such fields are
removed, as in the last example).  Thus:
.Sp
.Vb 1
\&    print join(\*(Aq:\*(Aq, split(//, \*(Aq abc\*(Aq, \-1)), "\en";
.Ve
.Sp
produces the output '\ :a:b:c:'.
.Sp
If the \s-1PATTERN\s0 contains
capturing groups,
then for each separator, an additional field is produced for each substring
captured by a group (in the order in which the groups are specified,
as per backreferences); if any group does not
match, then it captures the \f(CW\*(C`undef\*(C'\fR value instead of a substring.  Also,
note that any such additional field is produced whenever there is a
separator (that is, whenever a split occurs), and such an additional field
does \fBnot\fR count towards the \s-1LIMIT. \s0 Consider the following expressions
evaluated in list context (each returned list is provided in the associated
comment):
.Sp
.Vb 2
\&    split(/\-|,/, "1\-10,20", 3)
\&    # (\*(Aq1\*(Aq, \*(Aq10\*(Aq, \*(Aq20\*(Aq)
\&
\&    split(/(\-|,)/, "1\-10,20", 3)
\&    # (\*(Aq1\*(Aq, \*(Aq\-\*(Aq, \*(Aq10\*(Aq, \*(Aq,\*(Aq, \*(Aq20\*(Aq)
\&
\&    split(/\-|(,)/, "1\-10,20", 3)
\&    # (\*(Aq1\*(Aq, undef, \*(Aq10\*(Aq, \*(Aq,\*(Aq, \*(Aq20\*(Aq)
\&
\&    split(/(\-)|,/, "1\-10,20", 3)
\&    # (\*(Aq1\*(Aq, \*(Aq\-\*(Aq, \*(Aq10\*(Aq, undef, \*(Aq20\*(Aq)
\&
\&    split(/(\-)|(,)/, "1\-10,20", 3)
\&    # (\*(Aq1\*(Aq, \*(Aq\-\*(Aq, undef, \*(Aq10\*(Aq, undef, \*(Aq,\*(Aq, \*(Aq20\*(Aq)
.Ve
.IP "sprintf \s-1FORMAT, LIST \s0" 4
.IX Xref "sprintf"
.IX Item "sprintf FORMAT, LIST "
Returns a string formatted by the usual \f(CW\*(C`printf\*(C'\fR conventions of the C
library function \f(CW\*(C`sprintf\*(C'\fR.  See below for more details
and see \fIsprintf\fR\|(3) or \fIprintf\fR\|(3) on your system for an explanation of
the general principles.
.Sp
For example:
.Sp
.Vb 2
\&        # Format number with up to 8 leading zeroes
\&        $result = sprintf("%08d", $number);
\&
\&        # Round number to 3 digits after decimal point
\&        $rounded = sprintf("%.3f", $number);
.Ve
.Sp
Perl does its own \f(CW\*(C`sprintf\*(C'\fR formatting: it emulates the C
function \fIsprintf\fR\|(3), but doesn't use it except for floating-point
numbers, and even then only standard modifiers are allowed.  
Non-standard extensions in your local \fIsprintf\fR\|(3) are 
therefore unavailable from Perl.
.Sp
Unlike \f(CW\*(C`printf\*(C'\fR, \f(CW\*(C`sprintf\*(C'\fR does not do what you probably mean when you
pass it an array as your first argument. 
The array is given scalar context,
and instead of using the 0th element of the array as the format, Perl will
use the count of elements in the array as the format, which is almost never
useful.
.Sp
Perl's \f(CW\*(C`sprintf\*(C'\fR permits the following universally-known conversions:
.Sp
.Vb 10
\&   %%    a percent sign
\&   %c    a character with the given number
\&   %s    a string
\&   %d    a signed integer, in decimal
\&   %u    an unsigned integer, in decimal
\&   %o    an unsigned integer, in octal
\&   %x    an unsigned integer, in hexadecimal
\&   %e    a floating\-point number, in scientific notation
\&   %f    a floating\-point number, in fixed decimal notation
\&   %g    a floating\-point number, in %e or %f notation
.Ve
.Sp
In addition, Perl permits the following widely-supported conversions:
.Sp
.Vb 8
\&   %X    like %x, but using upper\-case letters
\&   %E    like %e, but using an upper\-case "E"
\&   %G    like %g, but with an upper\-case "E" (if applicable)
\&   %b    an unsigned integer, in binary
\&   %B    like %b, but using an upper\-case "B" with the # flag
\&   %p    a pointer (outputs the Perl value\*(Aqs address in hexadecimal)
\&   %n    special: *stores* the number of characters output so far
\&         into the next argument in the parameter list
.Ve
.Sp
Finally, for backward (and we do mean \*(L"backward\*(R") compatibility, Perl
permits these unnecessary but widely-supported conversions:
.Sp
.Vb 5
\&   %i    a synonym for %d
\&   %D    a synonym for %ld
\&   %U    a synonym for %lu
\&   %O    a synonym for %lo
\&   %F    a synonym for %f
.Ve
.Sp
Note that the number of exponent digits in the scientific notation produced
by \f(CW%e\fR, \f(CW%E\fR, \f(CW%g\fR and \f(CW%G\fR for numbers with the modulus of the
exponent less than 100 is system-dependent: it may be three or less
(zero-padded as necessary).  In other words, 1.23 times ten to the
99th may be either \*(L"1.23e99\*(R" or \*(L"1.23e099\*(R".
.Sp
Between the \f(CW\*(C`%\*(C'\fR and the format letter, you may specify several
additional attributes controlling the interpretation of the format.
In order, these are:
.RS 4
.IP "format parameter index" 4
.IX Item "format parameter index"
An explicit format parameter index, such as \f(CW\*(C`2$\*(C'\fR.  By default sprintf
will format the next unused argument in the list, but this allows you
to take the arguments out of order:
.Sp
.Vb 2
\&  printf \*(Aq%2$d %1$d\*(Aq, 12, 34;      # prints "34 12"
\&  printf \*(Aq%3$d %d %1$d\*(Aq, 1, 2, 3;  # prints "3 1 1"
.Ve
.IP "flags" 4
.IX Item "flags"
one or more of:
.Sp
.Vb 7
\&   space   prefix non\-negative number with a space
\&   +       prefix non\-negative number with a plus sign
\&   \-       left\-justify within the field
\&   0       use zeros, not spaces, to right\-justify
\&   #       ensure the leading "0" for any octal,
\&           prefix non\-zero hexadecimal with "0x" or "0X",
\&           prefix non\-zero binary with "0b" or "0B"
.Ve
.Sp
For example:
.Sp
.Vb 10
\&  printf \*(Aq<% d>\*(Aq,  12;   # prints "< 12>"
\&  printf \*(Aq<%+d>\*(Aq,  12;   # prints "<+12>"
\&  printf \*(Aq<%6s>\*(Aq,  12;   # prints "<    12>"
\&  printf \*(Aq<%\-6s>\*(Aq, 12;   # prints "<12    >"
\&  printf \*(Aq<%06s>\*(Aq, 12;   # prints "<000012>"
\&  printf \*(Aq<%#o>\*(Aq,  12;   # prints "<014>"
\&  printf \*(Aq<%#x>\*(Aq,  12;   # prints "<0xc>"
\&  printf \*(Aq<%#X>\*(Aq,  12;   # prints "<0XC>"
\&  printf \*(Aq<%#b>\*(Aq,  12;   # prints "<0b1100>"
\&  printf \*(Aq<%#B>\*(Aq,  12;   # prints "<0B1100>"
.Ve
.Sp
When a space and a plus sign are given as the flags at once,
a plus sign is used to prefix a positive number.
.Sp
.Vb 2
\&  printf \*(Aq<%+ d>\*(Aq, 12;   # prints "<+12>"
\&  printf \*(Aq<% +d>\*(Aq, 12;   # prints "<+12>"
.Ve
.Sp
When the # flag and a precision are given in the \f(CW%o\fR conversion,
the precision is incremented if it's necessary for the leading \*(L"0\*(R".
.Sp
.Vb 3
\&  printf \*(Aq<%#.5o>\*(Aq, 012;      # prints "<00012>"
\&  printf \*(Aq<%#.5o>\*(Aq, 012345;   # prints "<012345>"
\&  printf \*(Aq<%#.0o>\*(Aq, 0;        # prints "<0>"
.Ve
.IP "vector flag" 4
.IX Item "vector flag"
This flag tells Perl to interpret the supplied string as a vector of
integers, one for each character in the string.  Perl applies the format to
each integer in turn, then joins the resulting strings with a separator (a
dot \f(CW\*(C`.\*(C'\fR by default).  This can be useful for displaying ordinal values of
characters in arbitrary strings:
.Sp
.Vb 2
\&  printf "%vd", "AB\ex{100}";           # prints "65.66.256"
\&  printf "version is v%vd\en", $^V;     # Perl\*(Aqs version
.Ve
.Sp
Put an asterisk \f(CW\*(C`*\*(C'\fR before the \f(CW\*(C`v\*(C'\fR to override the string to
use to separate the numbers:
.Sp
.Vb 2
\&  printf "address is %*vX\en", ":", $addr;   # IPv6 address
\&  printf "bits are %0*v8b\en", " ", $bits;   # random bitstring
.Ve
.Sp
You can also explicitly specify the argument number to use for
the join string using something like \f(CW\*(C`*2$v\*(C'\fR; for example:
.Sp
.Vb 2
\&  printf \*(Aq%*4$vX %*4$vX %*4$vX\*(Aq,       # 3 IPv6 addresses
\&          @addr[1..3], ":";
.Ve
.IP "(minimum) width" 4
.IX Item "(minimum) width"
Arguments are usually formatted to be only as wide as required to
display the given value.  You can override the width by putting
a number here, or get the width from the next argument (with \f(CW\*(C`*\*(C'\fR)
or from a specified argument (e.g., with \f(CW\*(C`*2$\*(C'\fR):
.Sp
.Vb 5
\& printf "<%s>", "a";       # prints "<a>"
\& printf "<%6s>", "a";      # prints "<     a>"
\& printf "<%*s>", 6, "a";   # prints "<     a>"
\& printf \*(Aq<%*2$s>\*(Aq, "a", 6; # prints "<     a>"
\& printf "<%2s>", "long";   # prints "<long>" (does not truncate)
.Ve
.Sp
If a field width obtained through \f(CW\*(C`*\*(C'\fR is negative, it has the same
effect as the \f(CW\*(C`\-\*(C'\fR flag: left-justification.
.IP "precision, or maximum width" 4
.IX Xref "precision"
.IX Item "precision, or maximum width"
You can specify a precision (for numeric conversions) or a maximum
width (for string conversions) by specifying a \f(CW\*(C`.\*(C'\fR followed by a number.
For floating-point formats except \f(CW\*(C`g\*(C'\fR and \f(CW\*(C`G\*(C'\fR, this specifies
how many places right of the decimal point to show (the default being 6).
For example:
.Sp
.Vb 6
\&  # these examples are subject to system\-specific variation
\&  printf \*(Aq<%f>\*(Aq, 1;    # prints "<1.000000>"
\&  printf \*(Aq<%.1f>\*(Aq, 1;  # prints "<1.0>"
\&  printf \*(Aq<%.0f>\*(Aq, 1;  # prints "<1>"
\&  printf \*(Aq<%e>\*(Aq, 10;   # prints "<1.000000e+01>"
\&  printf \*(Aq<%.1e>\*(Aq, 10; # prints "<1.0e+01>"
.Ve
.Sp
For \*(L"g\*(R" and \*(L"G\*(R", this specifies the maximum number of digits to show,
including those prior to the decimal point and those after it; for 
example:
.Sp
.Vb 8
\&  # These examples are subject to system\-specific variation.
\&  printf \*(Aq<%g>\*(Aq, 1;        # prints "<1>"
\&  printf \*(Aq<%.10g>\*(Aq, 1;     # prints "<1>"
\&  printf \*(Aq<%g>\*(Aq, 100;      # prints "<100>"
\&  printf \*(Aq<%.1g>\*(Aq, 100;    # prints "<1e+02>"
\&  printf \*(Aq<%.2g>\*(Aq, 100.01; # prints "<1e+02>"
\&  printf \*(Aq<%.5g>\*(Aq, 100.01; # prints "<100.01>"
\&  printf \*(Aq<%.4g>\*(Aq, 100.01; # prints "<100>"
.Ve
.Sp
For integer conversions, specifying a precision implies that the
output of the number itself should be zero-padded to this width,
where the 0 flag is ignored:
.Sp
.Vb 6
\&  printf \*(Aq<%.6d>\*(Aq, 1;      # prints "<000001>"
\&  printf \*(Aq<%+.6d>\*(Aq, 1;     # prints "<+000001>"
\&  printf \*(Aq<%\-10.6d>\*(Aq, 1;   # prints "<000001    >"
\&  printf \*(Aq<%10.6d>\*(Aq, 1;    # prints "<    000001>"
\&  printf \*(Aq<%010.6d>\*(Aq, 1;   # prints "<    000001>"
\&  printf \*(Aq<%+10.6d>\*(Aq, 1;   # prints "<   +000001>"
\&
\&  printf \*(Aq<%.6x>\*(Aq, 1;      # prints "<000001>"
\&  printf \*(Aq<%#.6x>\*(Aq, 1;     # prints "<0x000001>"
\&  printf \*(Aq<%\-10.6x>\*(Aq, 1;   # prints "<000001    >"
\&  printf \*(Aq<%10.6x>\*(Aq, 1;    # prints "<    000001>"
\&  printf \*(Aq<%010.6x>\*(Aq, 1;   # prints "<    000001>"
\&  printf \*(Aq<%#10.6x>\*(Aq, 1;   # prints "<  0x000001>"
.Ve
.Sp
For string conversions, specifying a precision truncates the string
to fit the specified width:
.Sp
.Vb 2
\&  printf \*(Aq<%.5s>\*(Aq, "truncated";   # prints "<trunc>"
\&  printf \*(Aq<%10.5s>\*(Aq, "truncated"; # prints "<     trunc>"
.Ve
.Sp
You can also get the precision from the next argument using \f(CW\*(C`.*\*(C'\fR:
.Sp
.Vb 2
\&  printf \*(Aq<%.6x>\*(Aq, 1;       # prints "<000001>"
\&  printf \*(Aq<%.*x>\*(Aq, 6, 1;    # prints "<000001>"
.Ve
.Sp
If a precision obtained through \f(CW\*(C`*\*(C'\fR is negative, it counts
as having no precision at all.
.Sp
.Vb 4
\&  printf \*(Aq<%.*s>\*(Aq,  7, "string";   # prints "<string>"
\&  printf \*(Aq<%.*s>\*(Aq,  3, "string";   # prints "<str>"
\&  printf \*(Aq<%.*s>\*(Aq,  0, "string";   # prints "<>"
\&  printf \*(Aq<%.*s>\*(Aq, \-1, "string";   # prints "<string>"
\&
\&  printf \*(Aq<%.*d>\*(Aq,  1, 0;   # prints "<0>"
\&  printf \*(Aq<%.*d>\*(Aq,  0, 0;   # prints "<>"
\&  printf \*(Aq<%.*d>\*(Aq, \-1, 0;   # prints "<0>"
.Ve
.Sp
You cannot currently get the precision from a specified number,
but it is intended that this will be possible in the future, for
example using \f(CW\*(C`.*2$\*(C'\fR:
.Sp
.Vb 2
\&  printf \*(Aq<%.*2$x>\*(Aq, 1, 6;   # INVALID, but in future will print
\&                             # "<000001>"
.Ve
.IP "size" 4
.IX Item "size"
For numeric conversions, you can specify the size to interpret the
number as using \f(CW\*(C`l\*(C'\fR, \f(CW\*(C`h\*(C'\fR, \f(CW\*(C`V\*(C'\fR, \f(CW\*(C`q\*(C'\fR, \f(CW\*(C`L\*(C'\fR, or \f(CW\*(C`ll\*(C'\fR.  For integer
conversions (\f(CW\*(C`d u o x X b i D U O\*(C'\fR), numbers are usually assumed to be
whatever the default integer size is on your platform (usually 32 or 64
bits), but you can override this to use instead one of the standard C types,
as supported by the compiler used to build Perl:
.Sp
.Vb 10
\&   hh          interpret integer as C type "char" or "unsigned
\&               char" on Perl 5.14 or later
\&   h           interpret integer as C type "short" or
\&               "unsigned short"
\&   j           interpret integer as C type "intmax_t" on Perl
\&               5.14 or later, and only with a C99 compiler
\&               (unportable)
\&   l           interpret integer as C type "long" or
\&               "unsigned long"
\&   q, L, or ll interpret integer as C type "long long",
\&               "unsigned long long", or "quad" (typically
\&               64\-bit integers)
\&   t           interpret integer as C type "ptrdiff_t" on Perl
\&               5.14 or later
\&   z           interpret integer as C type "size_t" on Perl 5.14
\&               or later
.Ve
.Sp
As of 5.14, none of these raises an exception if they are not supported on
your platform.  However, if warnings are enabled, a warning of the
\&\f(CW\*(C`printf\*(C'\fR warning class is issued on an unsupported conversion flag.  
Should you instead prefer an exception, do this:
.Sp
.Vb 1
\&    use warnings FATAL => "printf";
.Ve
.Sp
If you would like to know about a version dependency before you
start running the program, put something like this at its top:
.Sp
.Vb 1
\&    use 5.014;  # for hh/j/t/z/ printf modifiers
.Ve
.Sp
You can find out whether your Perl supports quads via Config:
.Sp
.Vb 5
\&    use Config;
\&    if ($Config{use64bitint} eq "define"
\&        || $Config{longsize} >= 8) {
\&        print "Nice quads!\en";
\&    }
.Ve
.Sp
For floating-point conversions (\f(CW\*(C`e f g E F G\*(C'\fR), numbers are usually assumed
to be the default floating-point size on your platform (double or long double),
but you can force \*(L"long double\*(R" with \f(CW\*(C`q\*(C'\fR, \f(CW\*(C`L\*(C'\fR, or \f(CW\*(C`ll\*(C'\fR if your
platform supports them.  You can find out whether your Perl supports long
doubles via Config:
.Sp
.Vb 2
\&    use Config;
\&    print "long doubles\en" if $Config{d_longdbl} eq "define";
.Ve
.Sp
You can find out whether Perl considers \*(L"long double\*(R" to be the default
floating-point size to use on your platform via Config:
.Sp
.Vb 4
\&    use Config;
\&    if ($Config{uselongdouble} eq "define") {
\&        print "long doubles by default\en";
\&    }
.Ve
.Sp
It can also be that long doubles and doubles are the same thing:
.Sp
.Vb 3
\&        use Config;
\&        ($Config{doublesize} == $Config{longdblsize}) &&
\&                print "doubles are long doubles\en";
.Ve
.Sp
The size specifier \f(CW\*(C`V\*(C'\fR has no effect for Perl code, but is supported for
compatibility with \s-1XS\s0 code.  It means \*(L"use the standard size for a Perl
integer or floating-point number\*(R", which is the default.
.IP "order of arguments" 4
.IX Item "order of arguments"
Normally, \fIsprintf()\fR takes the next unused argument as the value to
format for each format specification.  If the format specification
uses \f(CW\*(C`*\*(C'\fR to require additional arguments, these are consumed from
the argument list in the order they appear in the format
specification \fIbefore\fR the value to format.  Where an argument is
specified by an explicit index, this does not affect the normal
order for the arguments, even when the explicitly specified index
would have been the next argument.
.Sp
So:
.Sp
.Vb 1
\&    printf "<%*.*s>", $a, $b, $c;
.Ve
.Sp
uses \f(CW$a\fR for the width, \f(CW$b\fR for the precision, and \f(CW$c\fR
as the value to format; while:
.Sp
.Vb 1
\&  printf \*(Aq<%*1$.*s>\*(Aq, $a, $b;
.Ve
.Sp
would use \f(CW$a\fR for the width and precision, and \f(CW$b\fR as the
value to format.
.Sp
Here are some more examples; be aware that when using an explicit
index, the \f(CW\*(C`$\*(C'\fR may need escaping:
.Sp
.Vb 4
\&  printf "%2\e$d %d\en",    12, 34;      # will print "34 12\en"
\&  printf "%2\e$d %d %d\en", 12, 34;      # will print "34 12 34\en"
\&  printf "%3\e$d %d %d\en", 12, 34, 56;  # will print "56 12 34\en"
\&  printf "%2\e$*3\e$d %d\en", 12, 34, 3;  # will print " 34 12\en"
.Ve
.RE
.RS 4
.Sp
If \f(CW\*(C`use locale\*(C'\fR (including \f(CW\*(C`use locale \*(Aqnot_characters\*(Aq\*(C'\fR) is in effect
and \fIPOSIX::setlocale()\fR has been called,
the character used for the decimal separator in formatted floating-point
numbers is affected by the \s-1LC_NUMERIC\s0 locale.  See perllocale
and \s-1POSIX\s0.
.RE
.IP "sqrt \s-1EXPR \s0" 4
.IX Xref "sqrt root square root"
.IX Item "sqrt EXPR "
.PD 0
.IP "sqrt" 4
.IX Item "sqrt"
.PD
Return the positive square root of \s-1EXPR. \s0 If \s-1EXPR\s0 is omitted, uses
\&\f(CW$_\fR.  Works only for non-negative operands unless you've
loaded the \f(CW\*(C`Math::Complex\*(C'\fR module.
.Sp
.Vb 2
\&    use Math::Complex;
\&    print sqrt(\-4);    # prints 2i
.Ve
.IP "srand \s-1EXPR \s0" 4
.IX Xref "srand seed randseed"
.IX Item "srand EXPR "
.PD 0
.IP "srand" 4
.IX Item "srand"
.PD
Sets and returns the random number seed for the \f(CW\*(C`rand\*(C'\fR operator.
.Sp
The point of the function is to \*(L"seed\*(R" the \f(CW\*(C`rand\*(C'\fR function so that \f(CW\*(C`rand\*(C'\fR
can produce a different sequence each time you run your program.  When
called with a parameter, \f(CW\*(C`srand\*(C'\fR uses that for the seed; otherwise it
(semi\-)randomly chooses a seed.  In either case, starting with Perl 5.14,
it returns the seed.  To signal that your code will work \fIonly\fR on Perls
of a recent vintage:
.Sp
.Vb 1
\&    use 5.014;  # so srand returns the seed
.Ve
.Sp
If \f(CW\*(C`srand()\*(C'\fR is not called explicitly, it is called implicitly without a
parameter at the first use of the \f(CW\*(C`rand\*(C'\fR operator.
However, there are a few situations where programs are likely to
want to call \f(CW\*(C`srand\*(C'\fR.  One is for generating predictable results, generally for
testing or debugging.  There, you use \f(CW\*(C`srand($seed)\*(C'\fR, with the same \f(CW$seed\fR
each time.  Another case is that you may want to call \f(CW\*(C`srand()\*(C'\fR
after a \f(CW\*(C`fork()\*(C'\fR to avoid child processes sharing the same seed value as the
parent (and consequently each other).
.Sp
Do \fBnot\fR call \f(CW\*(C`srand()\*(C'\fR (i.e., without an argument) more than once per
process.  The internal state of the random number generator should
contain more entropy than can be provided by any seed, so calling
\&\f(CW\*(C`srand()\*(C'\fR again actually \fIloses\fR randomness.
.Sp
Most implementations of \f(CW\*(C`srand\*(C'\fR take an integer and will silently
truncate decimal numbers.  This means \f(CW\*(C`srand(42)\*(C'\fR will usually
produce the same results as \f(CW\*(C`srand(42.1)\*(C'\fR.  To be safe, always pass
\&\f(CW\*(C`srand\*(C'\fR an integer.
.Sp
A typical use of the returned seed is for a test program which has too many
combinations to test comprehensively in the time available to it each run.  It
can test a random subset each time, and should there be a failure, log the seed
used for that run so that it can later be used to reproduce the same results.
.Sp
\&\fB\f(CB\*(C`rand()\*(C'\fB is not cryptographically secure.  You should not rely
on it in security-sensitive situations.\fR  As of this writing, a
number of third-party \s-1CPAN\s0 modules offer random number generators
intended by their authors to be cryptographically secure,
including: Data::Entropy, Crypt::Random, Math::Random::Secure,
and Math::TrulyRandom.
.IP "stat \s-1FILEHANDLE \s0" 4
.IX Xref "stat file, status ctime"
.IX Item "stat FILEHANDLE "
.PD 0
.IP "stat \s-1EXPR\s0" 4
.IX Item "stat EXPR"
.IP "stat \s-1DIRHANDLE\s0" 4
.IX Item "stat DIRHANDLE"
.IP "stat" 4
.IX Item "stat"
.PD
Returns a 13\-element list giving the status info for a file, either
the file opened via \s-1FILEHANDLE\s0 or \s-1DIRHANDLE,\s0 or named by \s-1EXPR. \s0 If \s-1EXPR\s0 is 
omitted, it stats \f(CW$_\fR (not \f(CW\*(C`_\*(C'\fR!).  Returns the empty list if \f(CW\*(C`stat\*(C'\fR fails.  Typically
used as follows:
.Sp
.Vb 3
\&    ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
\&       $atime,$mtime,$ctime,$blksize,$blocks)
\&           = stat($filename);
.Ve
.Sp
Not all fields are supported on all filesystem types.  Here are the
meanings of the fields:
.Sp
.Vb 10
\&  0 dev      device number of filesystem
\&  1 ino      inode number
\&  2 mode     file mode  (type and permissions)
\&  3 nlink    number of (hard) links to the file
\&  4 uid      numeric user ID of file\*(Aqs owner
\&  5 gid      numeric group ID of file\*(Aqs owner
\&  6 rdev     the device identifier (special files only)
\&  7 size     total size of file, in bytes
\&  8 atime    last access time in seconds since the epoch
\&  9 mtime    last modify time in seconds since the epoch
\& 10 ctime    inode change time in seconds since the epoch (*)
\& 11 blksize  preferred I/O size in bytes for interacting with the
\&             file (may vary from file to file)
\& 12 blocks   actual number of system\-specific blocks allocated
\&             on disk (often, but not always, 512 bytes each)
.Ve
.Sp
(The epoch was at 00:00 January 1, 1970 \s-1GMT.\s0)
.Sp
(*) Not all fields are supported on all filesystem types.  Notably, the
ctime field is non-portable.  In particular, you cannot expect it to be a
\&\*(L"creation time\*(R"; see \*(L"Files and Filesystems\*(R" in perlport for details.
.Sp
If \f(CW\*(C`stat\*(C'\fR is passed the special filehandle consisting of an underline, no
stat is done, but the current contents of the stat structure from the
last \f(CW\*(C`stat\*(C'\fR, \f(CW\*(C`lstat\*(C'\fR, or filetest are returned.  Example:
.Sp
.Vb 3
\&    if (\-x $file && (($d) = stat(_)) && $d < 0) {
\&        print "$file is executable NFS file\en";
\&    }
.Ve
.Sp
(This works on machines only for which the device number is negative
under \s-1NFS.\s0)
.Sp
Because the mode contains both the file type and its permissions, you
should mask off the file type portion and (s)printf using a \f(CW"%o"\fR
if you want to see the real permissions.
.Sp
.Vb 2
\&    $mode = (stat($filename))[2];
\&    printf "Permissions are %04o\en", $mode & 07777;
.Ve
.Sp
In scalar context, \f(CW\*(C`stat\*(C'\fR returns a boolean value indicating success
or failure, and, if successful, sets the information associated with
the special filehandle \f(CW\*(C`_\*(C'\fR.
.Sp
The File::stat module provides a convenient, by-name access mechanism:
.Sp
.Vb 5
\&    use File::stat;
\&    $sb = stat($filename);
\&    printf "File is %s, size is %s, perm %04o, mtime %s\en",
\&           $filename, $sb\->size, $sb\->mode & 07777,
\&           scalar localtime $sb\->mtime;
.Ve
.Sp
You can import symbolic mode constants (\f(CW\*(C`S_IF*\*(C'\fR) and functions
(\f(CW\*(C`S_IS*\*(C'\fR) from the Fcntl module:
.Sp
.Vb 1
\&    use Fcntl \*(Aq:mode\*(Aq;
\&
\&    $mode = (stat($filename))[2];
\&
\&    $user_rwx      = ($mode & S_IRWXU) >> 6;
\&    $group_read    = ($mode & S_IRGRP) >> 3;
\&    $other_execute =  $mode & S_IXOTH;
\&
\&    printf "Permissions are %04o\en", S_IMODE($mode), "\en";
\&
\&    $is_setuid     =  $mode & S_ISUID;
\&    $is_directory  =  S_ISDIR($mode);
.Ve
.Sp
You could write the last two using the \f(CW\*(C`\-u\*(C'\fR and \f(CW\*(C`\-d\*(C'\fR operators.
Commonly available \f(CW\*(C`S_IF*\*(C'\fR constants are:
.Sp
.Vb 1
\&    # Permissions: read, write, execute, for user, group, others.
\&
\&    S_IRWXU S_IRUSR S_IWUSR S_IXUSR
\&    S_IRWXG S_IRGRP S_IWGRP S_IXGRP
\&    S_IRWXO S_IROTH S_IWOTH S_IXOTH
\&
\&    # Setuid/Setgid/Stickiness/SaveText.
\&    # Note that the exact meaning of these is system\-dependent.
\&
\&    S_ISUID S_ISGID S_ISVTX S_ISTXT
\&
\&    # File types.  Not all are necessarily available on
\&    # your system.
\&
\&    S_IFREG S_IFDIR S_IFLNK S_IFBLK S_IFCHR
\&    S_IFIFO S_IFSOCK S_IFWHT S_ENFMT
\&
\&    # The following are compatibility aliases for S_IRUSR,
\&    # S_IWUSR, and S_IXUSR.
\&
\&    S_IREAD S_IWRITE S_IEXEC
.Ve
.Sp
and the \f(CW\*(C`S_IF*\*(C'\fR functions are
.Sp
.Vb 2
\&    S_IMODE($mode)    the part of $mode containing the permission
\&                      bits and the setuid/setgid/sticky bits
\&
\&    S_IFMT($mode)     the part of $mode containing the file type
\&                      which can be bit\-anded with (for example)
\&                      S_IFREG or with the following functions
\&
\&    # The operators \-f, \-d, \-l, \-b, \-c, \-p, and \-S.
\&
\&    S_ISREG($mode) S_ISDIR($mode) S_ISLNK($mode)
\&    S_ISBLK($mode) S_ISCHR($mode) S_ISFIFO($mode) S_ISSOCK($mode)
\&
\&    # No direct \-X operator counterpart, but for the first one
\&    # the \-g operator is often equivalent.  The ENFMT stands for
\&    # record flocking enforcement, a platform\-dependent feature.
\&
\&    S_ISENFMT($mode) S_ISWHT($mode)
.Ve
.Sp
See your native \fIchmod\fR\|(2) and \fIstat\fR\|(2) documentation for more details
about the \f(CW\*(C`S_*\*(C'\fR constants.  To get status info for a symbolic link
instead of the target file behind the link, use the \f(CW\*(C`lstat\*(C'\fR function.
.Sp
Portability issues: \*(L"stat\*(R" in perlport.
.IP "state \s-1EXPR \s0" 4
.IX Xref "state"
.IX Item "state EXPR "
.PD 0
.IP "state \s-1TYPE EXPR\s0" 4
.IX Item "state TYPE EXPR"
.IP "state \s-1EXPR : ATTRS\s0" 4
.IX Item "state EXPR : ATTRS"
.IP "state \s-1TYPE EXPR : ATTRS\s0" 4
.IX Item "state TYPE EXPR : ATTRS"
.PD
\&\f(CW\*(C`state\*(C'\fR declares a lexically scoped variable, just like \f(CW\*(C`my\*(C'\fR.
However, those variables will never be reinitialized, contrary to
lexical variables that are reinitialized each time their enclosing block
is entered.
See \*(L"Persistent Private Variables\*(R" in perlsub for details.
.Sp
\&\f(CW\*(C`state\*(C'\fR variables are enabled only when the \f(CW\*(C`use feature "state"\*(C'\fR pragma 
is in effect, unless the keyword is written as \f(CW\*(C`CORE::state\*(C'\fR.
See also feature.
.IP "study \s-1SCALAR \s0" 4
.IX Xref "study"
.IX Item "study SCALAR "
.PD 0
.IP "study" 4
.IX Item "study"
.PD
Takes extra time to study \s-1SCALAR \s0(\f(CW$_\fR if unspecified) in anticipation of
doing many pattern matches on the string before it is next modified.
This may or may not save time, depending on the nature and number of
patterns you are searching and the distribution of character
frequencies in the string to be searched; you probably want to compare
run times with and without it to see which is faster.  Those loops
that scan for many short constant strings (including the constant
parts of more complex patterns) will benefit most.
(The way \f(CW\*(C`study\*(C'\fR works is this: a linked list of every
character in the string to be searched is made, so we know, for
example, where all the \f(CW\*(Aqk\*(Aq\fR characters are.  From each search string,
the rarest character is selected, based on some static frequency tables
constructed from some C programs and English text.  Only those places
that contain this \*(L"rarest\*(R" character are examined.)
.Sp
For example, here is a loop that inserts index producing entries
before any line containing a certain pattern:
.Sp
.Vb 8
\&    while (<>) {
\&        study;
\&        print ".IX foo\en"    if /\ebfoo\eb/;
\&        print ".IX bar\en"    if /\ebbar\eb/;
\&        print ".IX blurfl\en" if /\ebblurfl\eb/;
\&        # ...
\&        print;
\&    }
.Ve
.Sp
In searching for \f(CW\*(C`/\ebfoo\eb/\*(C'\fR, only locations in \f(CW$_\fR that contain \f(CW\*(C`f\*(C'\fR
will be looked at, because \f(CW\*(C`f\*(C'\fR is rarer than \f(CW\*(C`o\*(C'\fR.  In general, this is
a big win except in pathological cases.  The only question is whether
it saves you more time than it took to build the linked list in the
first place.
.Sp
Note that if you have to look for strings that you don't know till
runtime, you can build an entire loop as a string and \f(CW\*(C`eval\*(C'\fR that to
avoid recompiling all your patterns all the time.  Together with
undefining \f(CW$/\fR to input entire files as one record, this can be quite
fast, often faster than specialized programs like \fIfgrep\fR\|(1).  The following
scans a list of files (\f(CW@files\fR) for a list of words (\f(CW@words\fR), and prints
out the names of those files that contain a match:
.Sp
.Vb 12
\&    $search = \*(Aqwhile (<>) { study;\*(Aq;
\&    foreach $word (@words) {
\&        $search .= "++\e$seen{\e$ARGV} if /\e\eb$word\e\eb/;\en";
\&    }
\&    $search .= "}";
\&    @ARGV = @files;
\&    undef $/;
\&    eval $search;        # this screams
\&    $/ = "\en";        # put back to normal input delimiter
\&    foreach $file (sort keys(%seen)) {
\&        print $file, "\en";
\&    }
.Ve
.IP "sub \s-1NAME BLOCK \s0" 4
.IX Xref "sub"
.IX Item "sub NAME BLOCK "
.PD 0
.IP "sub \s-1NAME \s0(\s-1PROTO\s0) \s-1BLOCK\s0" 4
.IX Item "sub NAME (PROTO) BLOCK"
.IP "sub \s-1NAME : ATTRS BLOCK\s0" 4
.IX Item "sub NAME : ATTRS BLOCK"
.IP "sub \s-1NAME \s0(\s-1PROTO\s0) : \s-1ATTRS BLOCK\s0" 4
.IX Item "sub NAME (PROTO) : ATTRS BLOCK"
.PD
This is subroutine definition, not a real function \fIper se\fR.  Without a
\&\s-1BLOCK\s0 it's just a forward declaration.  Without a \s-1NAME,\s0 it's an anonymous
function declaration, so does return a value: the \s-1CODE\s0 ref of the closure
just created.
.Sp
See perlsub and perlref for details about subroutines and
references; see attributes and Attribute::Handlers for more
information about attributes.
.IP "_\|_SUB_\|_" 4
.IX Xref "__SUB__"
.IX Item "__SUB__"
A special token that returns a reference to the current subroutine, or
\&\f(CW\*(C`undef\*(C'\fR outside of a subroutine.
.Sp
The behaviour of \f(CW\*(C`_\|_SUB_\|_\*(C'\fR within a regex code block (such as \f(CW\*(C`/(?{...})/\*(C'\fR)
is subject to change.
.Sp
This token is only available under \f(CW\*(C`use v5.16\*(C'\fR or the \*(L"current_sub\*(R"
feature.  See feature.
.IP "substr \s-1EXPR,OFFSET,LENGTH,REPLACEMENT \s0" 4
.IX Xref "substr substring mid left right"
.IX Item "substr EXPR,OFFSET,LENGTH,REPLACEMENT "
.PD 0
.IP "substr \s-1EXPR,OFFSET,LENGTH\s0" 4
.IX Item "substr EXPR,OFFSET,LENGTH"
.IP "substr \s-1EXPR,OFFSET\s0" 4
.IX Item "substr EXPR,OFFSET"
.PD
Extracts a substring out of \s-1EXPR\s0 and returns it.  First character is at
offset zero.  If \s-1OFFSET\s0 is negative, starts
that far back from the end of the string.  If \s-1LENGTH\s0 is omitted, returns
everything through the end of the string.  If \s-1LENGTH\s0 is negative, leaves that
many characters off the end of the string.
.Sp
.Vb 6
\&    my $s = "The black cat climbed the green tree";
\&    my $color  = substr $s, 4, 5;      # black
\&    my $middle = substr $s, 4, \-11;    # black cat climbed the
\&    my $end    = substr $s, 14;        # climbed the green tree
\&    my $tail   = substr $s, \-4;        # tree
\&    my $z      = substr $s, \-4, 2;     # tr
.Ve
.Sp
You can use the \fIsubstr()\fR function as an lvalue, in which case \s-1EXPR\s0
must itself be an lvalue.  If you assign something shorter than \s-1LENGTH,\s0
the string will shrink, and if you assign something longer than \s-1LENGTH,\s0
the string will grow to accommodate it.  To keep the string the same
length, you may need to pad or chop your value using \f(CW\*(C`sprintf\*(C'\fR.
.Sp
If \s-1OFFSET\s0 and \s-1LENGTH\s0 specify a substring that is partly outside the
string, only the part within the string is returned.  If the substring
is beyond either end of the string, \fIsubstr()\fR returns the undefined
value and produces a warning.  When used as an lvalue, specifying a
substring that is entirely outside the string raises an exception.
Here's an example showing the behavior for boundary cases:
.Sp
.Vb 5
\&    my $name = \*(Aqfred\*(Aq;
\&    substr($name, 4) = \*(Aqdy\*(Aq;         # $name is now \*(Aqfreddy\*(Aq
\&    my $null = substr $name, 6, 2;   # returns "" (no warning)
\&    my $oops = substr $name, 7;      # returns undef, with warning
\&    substr($name, 7) = \*(Aqgap\*(Aq;        # raises an exception
.Ve
.Sp
An alternative to using \fIsubstr()\fR as an lvalue is to specify the
replacement string as the 4th argument.  This allows you to replace
parts of the \s-1EXPR\s0 and return what was there before in one operation,
just as you can with \fIsplice()\fR.
.Sp
.Vb 3
\&    my $s = "The black cat climbed the green tree";
\&    my $z = substr $s, 14, 7, "jumped from";    # climbed
\&    # $s is now "The black cat jumped from the green tree"
.Ve
.Sp
Note that the lvalue returned by the three-argument version of \fIsubstr()\fR acts as
a 'magic bullet'; each time it is assigned to, it remembers which part
of the original string is being modified; for example:
.Sp
.Vb 7
\&    $x = \*(Aq1234\*(Aq;
\&    for (substr($x,1,2)) {
\&        $_ = \*(Aqa\*(Aq;   print $x,"\en";    # prints 1a4
\&        $_ = \*(Aqxyz\*(Aq; print $x,"\en";    # prints 1xyz4
\&        $x = \*(Aq56789\*(Aq;
\&        $_ = \*(Aqpq\*(Aq;  print $x,"\en";    # prints 5pq9
\&    }
.Ve
.Sp
With negative offsets, it remembers its position from the end of the string
when the target string is modified:
.Sp
.Vb 6
\&    $x = \*(Aq1234\*(Aq;
\&    for (substr($x, \-3, 2)) {
\&        $_ = \*(Aqa\*(Aq;   print $x,"\en";    # prints 1a4, as above
\&        $x = \*(Aqabcdefg\*(Aq;
\&        print $_,"\en";                # prints f
\&    }
.Ve
.Sp
Prior to Perl version 5.10, the result of using an lvalue multiple times was
unspecified.  Prior to 5.16, the result with negative offsets was
unspecified.
.IP "symlink \s-1OLDFILE,NEWFILE \s0" 4
.IX Xref "symlink link symbolic link link, symbolic"
.IX Item "symlink OLDFILE,NEWFILE "
Creates a new filename symbolically linked to the old filename.
Returns \f(CW1\fR for success, \f(CW0\fR otherwise.  On systems that don't support
symbolic links, raises an exception.  To check for that,
use eval:
.Sp
.Vb 1
\&    $symlink_exists = eval { symlink("",""); 1 };
.Ve
.Sp
Portability issues: \*(L"symlink\*(R" in perlport.
.IP "syscall \s-1NUMBER, LIST \s0" 4
.IX Xref "syscall system call"
.IX Item "syscall NUMBER, LIST "
Calls the system call specified as the first element of the list,
passing the remaining elements as arguments to the system call.  If
unimplemented, raises an exception.  The arguments are interpreted
as follows: if a given argument is numeric, the argument is passed as
an int.  If not, the pointer to the string value is passed.  You are
responsible to make sure a string is pre-extended long enough to
receive any result that might be written into a string.  You can't use a
string literal (or other read-only string) as an argument to \f(CW\*(C`syscall\*(C'\fR
because Perl has to assume that any string pointer might be written
through.  If your
integer arguments are not literals and have never been interpreted in a
numeric context, you may need to add \f(CW0\fR to them to force them to look
like numbers.  This emulates the \f(CW\*(C`syswrite\*(C'\fR function (or vice versa):
.Sp
.Vb 3
\&    require \*(Aqsyscall.ph\*(Aq;        # may need to run h2ph
\&    $s = "hi there\en";
\&    syscall(&SYS_write, fileno(STDOUT), $s, length $s);
.Ve
.Sp
Note that Perl supports passing of up to only 14 arguments to your syscall,
which in practice should (usually) suffice.
.Sp
Syscall returns whatever value returned by the system call it calls.
If the system call fails, \f(CW\*(C`syscall\*(C'\fR returns \f(CW\*(C`\-1\*(C'\fR and sets \f(CW$!\fR (errno).
Note that some system calls \fIcan\fR legitimately return \f(CW\*(C`\-1\*(C'\fR.  The proper
way to handle such calls is to assign \f(CW\*(C`$!=0\*(C'\fR before the call, then
check the value of \f(CW$!\fR if \f(CW\*(C`syscall\*(C'\fR returns \f(CW\*(C`\-1\*(C'\fR.
.Sp
There's a problem with \f(CW\*(C`syscall(&SYS_pipe)\*(C'\fR: it returns the file
number of the read end of the pipe it creates, but there is no way
to retrieve the file number of the other end.  You can avoid this
problem by using \f(CW\*(C`pipe\*(C'\fR instead.
.Sp
Portability issues: \*(L"syscall\*(R" in perlport.
.IP "sysopen \s-1FILEHANDLE,FILENAME,MODE \s0" 4
.IX Xref "sysopen"
.IX Item "sysopen FILEHANDLE,FILENAME,MODE "
.PD 0
.IP "sysopen \s-1FILEHANDLE,FILENAME,MODE,PERMS\s0" 4
.IX Item "sysopen FILEHANDLE,FILENAME,MODE,PERMS"
.PD
Opens the file whose filename is given by \s-1FILENAME,\s0 and associates it with
\&\s-1FILEHANDLE. \s0 If \s-1FILEHANDLE\s0 is an expression, its value is used as the real
filehandle wanted; an undefined scalar will be suitably autovivified.  This
function calls the underlying operating system's \fIopen\fR(2) function with the
parameters \s-1FILENAME, MODE,\s0 and \s-1PERMS.\s0
.Sp
The possible values and flag bits of the \s-1MODE\s0 parameter are
system-dependent; they are available via the standard module \f(CW\*(C`Fcntl\*(C'\fR.  See
the documentation of your operating system's \fIopen\fR(2) syscall to see
which values and flag bits are available.  You may combine several flags
using the \f(CW\*(C`|\*(C'\fR\-operator.
.Sp
Some of the most common values are \f(CW\*(C`O_RDONLY\*(C'\fR for opening the file in
read-only mode, \f(CW\*(C`O_WRONLY\*(C'\fR for opening the file in write-only mode,
and \f(CW\*(C`O_RDWR\*(C'\fR for opening the file in read-write mode.
.IX Xref "O_RDONLY O_RDWR O_WRONLY"
.Sp
For historical reasons, some values work on almost every system
supported by Perl: 0 means read-only, 1 means write-only, and 2
means read/write.  We know that these values do \fInot\fR work under
\&\s-1OS/390\s0 and on the Macintosh; you probably don't want to
use them in new code.
.Sp
If the file named by \s-1FILENAME\s0 does not exist and the \f(CW\*(C`open\*(C'\fR call creates
it (typically because \s-1MODE\s0 includes the \f(CW\*(C`O_CREAT\*(C'\fR flag), then the value of
\&\s-1PERMS\s0 specifies the permissions of the newly created file.  If you omit
the \s-1PERMS\s0 argument to \f(CW\*(C`sysopen\*(C'\fR, Perl uses the octal value \f(CW0666\fR.
These permission values need to be in octal, and are modified by your
process's current \f(CW\*(C`umask\*(C'\fR.
.IX Xref "O_CREAT"
.Sp
In many systems the \f(CW\*(C`O_EXCL\*(C'\fR flag is available for opening files in
exclusive mode.  This is \fBnot\fR locking: exclusiveness means here that
if the file already exists, \fIsysopen()\fR fails.  \f(CW\*(C`O_EXCL\*(C'\fR may not work
on network filesystems, and has no effect unless the \f(CW\*(C`O_CREAT\*(C'\fR flag
is set as well.  Setting \f(CW\*(C`O_CREAT|O_EXCL\*(C'\fR prevents the file from
being opened if it is a symbolic link.  It does not protect against
symbolic links in the file's path.
.IX Xref "O_EXCL"
.Sp
Sometimes you may want to truncate an already-existing file.  This
can be done using the \f(CW\*(C`O_TRUNC\*(C'\fR flag.  The behavior of
\&\f(CW\*(C`O_TRUNC\*(C'\fR with \f(CW\*(C`O_RDONLY\*(C'\fR is undefined.
.IX Xref "O_TRUNC"
.Sp
You should seldom if ever use \f(CW0644\fR as argument to \f(CW\*(C`sysopen\*(C'\fR, because
that takes away the user's option to have a more permissive umask.
Better to omit it.  See the \fIperlfunc\fR\|(1) entry on \f(CW\*(C`umask\*(C'\fR for more
on this.
.Sp
Note that \f(CW\*(C`sysopen\*(C'\fR depends on the \fIfdopen()\fR C library function.
On many Unix systems, \fIfdopen()\fR is known to fail when file descriptors
exceed a certain value, typically 255.  If you need more file
descriptors than that, consider rebuilding Perl to use the \f(CW\*(C`sfio\*(C'\fR
library, or perhaps using the \fIPOSIX::open()\fR function.
.Sp
See perlopentut for a kinder, gentler explanation of opening files.
.Sp
Portability issues: \*(L"sysopen\*(R" in perlport.
.IP "sysread \s-1FILEHANDLE,SCALAR,LENGTH,OFFSET \s0" 4
.IX Xref "sysread"
.IX Item "sysread FILEHANDLE,SCALAR,LENGTH,OFFSET "
.PD 0
.IP "sysread \s-1FILEHANDLE,SCALAR,LENGTH\s0" 4
.IX Item "sysread FILEHANDLE,SCALAR,LENGTH"
.PD
Attempts to read \s-1LENGTH\s0 bytes of data into variable \s-1SCALAR\s0 from the
specified \s-1FILEHANDLE,\s0 using the \fIread\fR\|(2).  It bypasses
buffered \s-1IO,\s0 so mixing this with other kinds of reads, \f(CW\*(C`print\*(C'\fR,
\&\f(CW\*(C`write\*(C'\fR, \f(CW\*(C`seek\*(C'\fR, \f(CW\*(C`tell\*(C'\fR, or \f(CW\*(C`eof\*(C'\fR can cause confusion because the
perlio or stdio layers usually buffers data.  Returns the number of
bytes actually read, \f(CW0\fR at end of file, or undef if there was an
error (in the latter case \f(CW$!\fR is also set).  \s-1SCALAR\s0 will be grown or
shrunk so that the last byte actually read is the last byte of the
scalar after the read.
.Sp
An \s-1OFFSET\s0 may be specified to place the read data at some place in the
string other than the beginning.  A negative \s-1OFFSET\s0 specifies
placement at that many characters counting backwards from the end of
the string.  A positive \s-1OFFSET\s0 greater than the length of \s-1SCALAR\s0
results in the string being padded to the required size with \f(CW"\e0"\fR
bytes before the result of the read is appended.
.Sp
There is no \fIsyseof()\fR function, which is ok, since \fIeof()\fR doesn't work
well on device files (like ttys) anyway.  Use \fIsysread()\fR and check
for a return value for 0 to decide whether you're done.
.Sp
Note that if the filehandle has been marked as \f(CW\*(C`:utf8\*(C'\fR Unicode
characters are read instead of bytes (the \s-1LENGTH, OFFSET,\s0 and the
return value of \fIsysread()\fR are in Unicode characters).
The \f(CW\*(C`:encoding(...)\*(C'\fR layer implicitly introduces the \f(CW\*(C`:utf8\*(C'\fR layer.
See \*(L"binmode\*(R", \*(L"open\*(R", and the \f(CW\*(C`open\*(C'\fR pragma, open.
.IP "sysseek \s-1FILEHANDLE,POSITION,WHENCE \s0" 4
.IX Xref "sysseek lseek"
.IX Item "sysseek FILEHANDLE,POSITION,WHENCE "
Sets \s-1FILEHANDLE\s0's system position in bytes using \fIlseek\fR\|(2).  \s-1FILEHANDLE\s0 may
be an expression whose value gives the name of the filehandle.  The values
for \s-1WHENCE\s0 are \f(CW0\fR to set the new position to \s-1POSITION\s0; \f(CW1\fR to set the it
to the current position plus \s-1POSITION\s0; and \f(CW2\fR to set it to \s-1EOF\s0 plus
\&\s-1POSITION,\s0 typically negative.
.Sp
Note the \fIin bytes\fR: even if the filehandle has been set to operate
on characters (for example by using the \f(CW\*(C`:encoding(utf8)\*(C'\fR I/O layer),
\&\fItell()\fR will return byte offsets, not character offsets (because
implementing that would render \fIsysseek()\fR unacceptably slow).
.Sp
\&\fIsysseek()\fR bypasses normal buffered \s-1IO,\s0 so mixing it with reads other
than \f(CW\*(C`sysread\*(C'\fR (for example \f(CW\*(C`<>\*(C'\fR or \fIread()\fR) \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`write\*(C'\fR,
\&\f(CW\*(C`seek\*(C'\fR, \f(CW\*(C`tell\*(C'\fR, or \f(CW\*(C`eof\*(C'\fR may cause confusion.
.Sp
For \s-1WHENCE,\s0 you may also use the constants \f(CW\*(C`SEEK_SET\*(C'\fR, \f(CW\*(C`SEEK_CUR\*(C'\fR,
and \f(CW\*(C`SEEK_END\*(C'\fR (start of the file, current position, end of the file)
from the Fcntl module.  Use of the constants is also more portable
than relying on 0, 1, and 2.  For example to define a \*(L"systell\*(R" function:
.Sp
.Vb 2
\&    use Fcntl \*(AqSEEK_CUR\*(Aq;
\&    sub systell { sysseek($_[0], 0, SEEK_CUR) }
.Ve
.Sp
Returns the new position, or the undefined value on failure.  A position
of zero is returned as the string \f(CW"0 but true"\fR; thus \f(CW\*(C`sysseek\*(C'\fR returns
true on success and false on failure, yet you can still easily determine
the new position.
.IP "system \s-1LIST \s0" 4
.IX Xref "system shell"
.IX Item "system LIST "
.PD 0
.IP "system \s-1PROGRAM LIST\s0" 4
.IX Item "system PROGRAM LIST"
.PD
Does exactly the same thing as \f(CW\*(C`exec LIST\*(C'\fR, except that a fork is
done first and the parent process waits for the child process to
exit.  Note that argument processing varies depending on the
number of arguments.  If there is more than one argument in \s-1LIST,\s0
or if \s-1LIST\s0 is an array with more than one value, starts the program
given by the first element of the list with arguments given by the
rest of the list.  If there is only one scalar argument, the argument
is checked for shell metacharacters, and if there are any, the
entire argument is passed to the system's command shell for parsing
(this is \f(CW\*(C`/bin/sh \-c\*(C'\fR on Unix platforms, but varies on other
platforms).  If there are no shell metacharacters in the argument,
it is split into words and passed directly to \f(CW\*(C`execvp\*(C'\fR, which is
more efficient.
.Sp
Perl will attempt to flush all files opened for
output before any operation that may do a fork, but this may not be
supported on some platforms (see perlport).  To be safe, you may need
to set \f(CW$|\fR ($AUTOFLUSH in English) or call the \f(CW\*(C`autoflush()\*(C'\fR method
of \f(CW\*(C`IO::Handle\*(C'\fR on any open handles.
.Sp
The return value is the exit status of the program as returned by the
\&\f(CW\*(C`wait\*(C'\fR call.  To get the actual exit value, shift right by eight (see
below).  See also \*(L"exec\*(R".  This is \fInot\fR what you want to use to capture
the output from a command; for that you should use merely backticks or
\&\f(CW\*(C`qx//\*(C'\fR, as described in \*(L"`STRING`\*(R" in perlop.  Return value of \-1
indicates a failure to start the program or an error of the \fIwait\fR\|(2) system
call (inspect $! for the reason).
.Sp
If you'd like to make \f(CW\*(C`system\*(C'\fR (and many other bits of Perl) die on error,
have a look at the autodie pragma.
.Sp
Like \f(CW\*(C`exec\*(C'\fR, \f(CW\*(C`system\*(C'\fR allows you to lie to a program about its name if
you use the \f(CW\*(C`system PROGRAM LIST\*(C'\fR syntax.  Again, see \*(L"exec\*(R".
.Sp
Since \f(CW\*(C`SIGINT\*(C'\fR and \f(CW\*(C`SIGQUIT\*(C'\fR are ignored during the execution of
\&\f(CW\*(C`system\*(C'\fR, if you expect your program to terminate on receipt of these
signals you will need to arrange to do so yourself based on the return
value.
.Sp
.Vb 3
\&    @args = ("command", "arg1", "arg2");
\&    system(@args) == 0
\&        or die "system @args failed: $?"
.Ve
.Sp
If you'd like to manually inspect \f(CW\*(C`system\*(C'\fR's failure, you can check all
possible failure modes by inspecting \f(CW$?\fR like this:
.Sp
.Vb 10
\&    if ($? == \-1) {
\&        print "failed to execute: $!\en";
\&    }
\&    elsif ($? & 127) {
\&        printf "child died with signal %d, %s coredump\en",
\&            ($? & 127),  ($? & 128) ? \*(Aqwith\*(Aq : \*(Aqwithout\*(Aq;
\&    }
\&    else {
\&        printf "child exited with value %d\en", $? >> 8;
\&    }
.Ve
.Sp
Alternatively, you may inspect the value of \f(CW\*(C`${^CHILD_ERROR_NATIVE}\*(C'\fR
with the \f(CW\*(C`W*()\*(C'\fR calls from the \s-1POSIX\s0 module.
.Sp
When \f(CW\*(C`system\*(C'\fR's arguments are executed indirectly by the shell, 
results and return codes are subject to its quirks.
See \*(L"`STRING`\*(R" in perlop and \*(L"exec\*(R" for details.
.Sp
Since \f(CW\*(C`system\*(C'\fR does a \f(CW\*(C`fork\*(C'\fR and \f(CW\*(C`wait\*(C'\fR it may affect a \f(CW\*(C`SIGCHLD\*(C'\fR
handler.  See perlipc for details.
.Sp
Portability issues: \*(L"system\*(R" in perlport.
.IP "syswrite \s-1FILEHANDLE,SCALAR,LENGTH,OFFSET \s0" 4
.IX Xref "syswrite"
.IX Item "syswrite FILEHANDLE,SCALAR,LENGTH,OFFSET "
.PD 0
.IP "syswrite \s-1FILEHANDLE,SCALAR,LENGTH\s0" 4
.IX Item "syswrite FILEHANDLE,SCALAR,LENGTH"
.IP "syswrite \s-1FILEHANDLE,SCALAR\s0" 4
.IX Item "syswrite FILEHANDLE,SCALAR"
.PD
Attempts to write \s-1LENGTH\s0 bytes of data from variable \s-1SCALAR\s0 to the
specified \s-1FILEHANDLE,\s0 using \fIwrite\fR\|(2).  If \s-1LENGTH\s0 is
not specified, writes whole \s-1SCALAR. \s0 It bypasses buffered \s-1IO,\s0 so
mixing this with reads (other than \f(CWsysread())\fR, \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`write\*(C'\fR,
\&\f(CW\*(C`seek\*(C'\fR, \f(CW\*(C`tell\*(C'\fR, or \f(CW\*(C`eof\*(C'\fR may cause confusion because the perlio and
stdio layers usually buffer data.  Returns the number of bytes
actually written, or \f(CW\*(C`undef\*(C'\fR if there was an error (in this case the
errno variable \f(CW$!\fR is also set).  If the \s-1LENGTH\s0 is greater than the
data available in the \s-1SCALAR\s0 after the \s-1OFFSET,\s0 only as much data as is
available will be written.
.Sp
An \s-1OFFSET\s0 may be specified to write the data from some part of the
string other than the beginning.  A negative \s-1OFFSET\s0 specifies writing
that many characters counting backwards from the end of the string.
If \s-1SCALAR\s0 is of length zero, you can only use an \s-1OFFSET\s0 of 0.
.Sp
\&\fB\s-1WARNING\s0\fR: If the filehandle is marked \f(CW\*(C`:utf8\*(C'\fR, Unicode characters
encoded in \s-1UTF\-8\s0 are written instead of bytes, and the \s-1LENGTH, OFFSET,\s0 and
return value of \fIsyswrite()\fR are in (UTF8\-encoded Unicode) characters.
The \f(CW\*(C`:encoding(...)\*(C'\fR layer implicitly introduces the \f(CW\*(C`:utf8\*(C'\fR layer.
Alternately, if the handle is not marked with an encoding but you
attempt to write characters with code points over 255, raises an exception.
See \*(L"binmode\*(R", \*(L"open\*(R", and the \f(CW\*(C`open\*(C'\fR pragma, open.
.IP "tell \s-1FILEHANDLE \s0" 4
.IX Xref "tell"
.IX Item "tell FILEHANDLE "
.PD 0
.IP "tell" 4
.IX Item "tell"
.PD
Returns the current position \fIin bytes\fR for \s-1FILEHANDLE,\s0 or \-1 on
error.  \s-1FILEHANDLE\s0 may be an expression whose value gives the name of
the actual filehandle.  If \s-1FILEHANDLE\s0 is omitted, assumes the file
last read.
.Sp
Note the \fIin bytes\fR: even if the filehandle has been set to
operate on characters (for example by using the \f(CW\*(C`:encoding(utf8)\*(C'\fR open
layer), \fItell()\fR will return byte offsets, not character offsets (because
that would render \fIseek()\fR and \fItell()\fR rather slow).
.Sp
The return value of \fItell()\fR for the standard streams like the \s-1STDIN\s0
depends on the operating system: it may return \-1 or something else.
\&\fItell()\fR on pipes, fifos, and sockets usually returns \-1.
.Sp
There is no \f(CW\*(C`systell\*(C'\fR function.  Use \f(CW\*(C`sysseek(FH, 0, 1)\*(C'\fR for that.
.Sp
Do not use \fItell()\fR (or other buffered I/O operations) on a filehandle
that has been manipulated by \fIsysread()\fR, \fIsyswrite()\fR, or \fIsysseek()\fR.
Those functions ignore the buffering, while \fItell()\fR does not.
.IP "telldir \s-1DIRHANDLE \s0" 4
.IX Xref "telldir"
.IX Item "telldir DIRHANDLE "
Returns the current position of the \f(CW\*(C`readdir\*(C'\fR routines on \s-1DIRHANDLE.\s0
Value may be given to \f(CW\*(C`seekdir\*(C'\fR to access a particular location in a
directory.  \f(CW\*(C`telldir\*(C'\fR has the same caveats about possible directory
compaction as the corresponding system library routine.
.IP "tie \s-1VARIABLE,CLASSNAME,LIST \s0" 4
.IX Xref "tie"
.IX Item "tie VARIABLE,CLASSNAME,LIST "
This function binds a variable to a package class that will provide the
implementation for the variable.  \s-1VARIABLE\s0 is the name of the variable
to be enchanted.  \s-1CLASSNAME\s0 is the name of a class implementing objects
of correct type.  Any additional arguments are passed to the
appropriate constructor
method of the class (meaning \f(CW\*(C`TIESCALAR\*(C'\fR, \f(CW\*(C`TIEHANDLE\*(C'\fR, \f(CW\*(C`TIEARRAY\*(C'\fR,
or \f(CW\*(C`TIEHASH\*(C'\fR).  Typically these are arguments such as might be passed
to the \f(CW\*(C`dbm_open()\*(C'\fR function of C.  The object returned by the
constructor is also returned by the \f(CW\*(C`tie\*(C'\fR function, which would be useful
if you want to access other methods in \s-1CLASSNAME.\s0
.Sp
Note that functions such as \f(CW\*(C`keys\*(C'\fR and \f(CW\*(C`values\*(C'\fR may return huge lists
when used on large objects, like \s-1DBM\s0 files.  You may prefer to use the
\&\f(CW\*(C`each\*(C'\fR function to iterate over such.  Example:
.Sp
.Vb 7
\&    # print out history file offsets
\&    use NDBM_File;
\&    tie(%HIST, \*(AqNDBM_File\*(Aq, \*(Aq/usr/lib/news/history\*(Aq, 1, 0);
\&    while (($key,$val) = each %HIST) {
\&        print $key, \*(Aq = \*(Aq, unpack(\*(AqL\*(Aq,$val), "\en";
\&    }
\&    untie(%HIST);
.Ve
.Sp
A class implementing a hash should have the following methods:
.Sp
.Vb 11
\&    TIEHASH classname, LIST
\&    FETCH this, key
\&    STORE this, key, value
\&    DELETE this, key
\&    CLEAR this
\&    EXISTS this, key
\&    FIRSTKEY this
\&    NEXTKEY this, lastkey
\&    SCALAR this
\&    DESTROY this
\&    UNTIE this
.Ve
.Sp
A class implementing an ordinary array should have the following methods:
.Sp
.Vb 10
\&    TIEARRAY classname, LIST
\&    FETCH this, key
\&    STORE this, key, value
\&    FETCHSIZE this
\&    STORESIZE this, count
\&    CLEAR this
\&    PUSH this, LIST
\&    POP this
\&    SHIFT this
\&    UNSHIFT this, LIST
\&    SPLICE this, offset, length, LIST
\&    EXTEND this, count
\&    DELETE this, key
\&    EXISTS this, key
\&    DESTROY this
\&    UNTIE this
.Ve
.Sp
A class implementing a filehandle should have the following methods:
.Sp
.Vb 10
\&    TIEHANDLE classname, LIST
\&    READ this, scalar, length, offset
\&    READLINE this
\&    GETC this
\&    WRITE this, scalar, length, offset
\&    PRINT this, LIST
\&    PRINTF this, format, LIST
\&    BINMODE this
\&    EOF this
\&    FILENO this
\&    SEEK this, position, whence
\&    TELL this
\&    OPEN this, mode, LIST
\&    CLOSE this
\&    DESTROY this
\&    UNTIE this
.Ve
.Sp
A class implementing a scalar should have the following methods:
.Sp
.Vb 5
\&    TIESCALAR classname, LIST
\&    FETCH this,
\&    STORE this, value
\&    DESTROY this
\&    UNTIE this
.Ve
.Sp
Not all methods indicated above need be implemented.  See perltie,
Tie::Hash, Tie::Array, Tie::Scalar, and Tie::Handle.
.Sp
Unlike \f(CW\*(C`dbmopen\*(C'\fR, the \f(CW\*(C`tie\*(C'\fR function will not \f(CW\*(C`use\*(C'\fR or \f(CW\*(C`require\*(C'\fR a module
for you; you need to do that explicitly yourself.  See DB_File
or the \fIConfig\fR module for interesting \f(CW\*(C`tie\*(C'\fR implementations.
.Sp
For further details see perltie, \*(L"tied \s-1VARIABLE\*(R"\s0.
.IP "tied \s-1VARIABLE \s0" 4
.IX Xref "tied"
.IX Item "tied VARIABLE "
Returns a reference to the object underlying \s-1VARIABLE \s0(the same value
that was originally returned by the \f(CW\*(C`tie\*(C'\fR call that bound the variable
to a package.)  Returns the undefined value if \s-1VARIABLE\s0 isn't tied to a
package.
.IP "time" 4
.IX Xref "time epoch"
.IX Item "time"
Returns the number of non-leap seconds since whatever time the system
considers to be the epoch, suitable for feeding to \f(CW\*(C`gmtime\*(C'\fR and
\&\f(CW\*(C`localtime\*(C'\fR.  On most systems the epoch is 00:00:00 \s-1UTC,\s0 January 1, 1970;
a prominent exception being Mac \s-1OS\s0 Classic which uses 00:00:00, January 1,
1904 in the current local time zone for its epoch.
.Sp
For measuring time in better granularity than one second, use the
Time::HiRes module from Perl 5.8 onwards (or from \s-1CPAN\s0 before then), or,
if you have \fIgettimeofday\fR\|(2), you may be able to use the \f(CW\*(C`syscall\*(C'\fR
interface of Perl.  See perlfaq8 for details.
.Sp
For date and time processing look at the many related modules on \s-1CPAN.\s0
For a comprehensive date and time representation look at the
DateTime module.
.IP "times" 4
.IX Xref "times"
.IX Item "times"
Returns a four-element list giving the user and system times in
seconds for this process and any exited children of this process.
.Sp
.Vb 1
\&    ($user,$system,$cuser,$csystem) = times;
.Ve
.Sp
In scalar context, \f(CW\*(C`times\*(C'\fR returns \f(CW$user\fR.
.Sp
Children's times are only included for terminated children.
.Sp
Portability issues: \*(L"times\*(R" in perlport.
.IP "tr///" 4
.IX Item "tr///"
The transliteration operator.  Same as \f(CW\*(C`y///\*(C'\fR.  See
\&\*(L"Quote and Quote-like Operators\*(R" in perlop.
.IP "truncate \s-1FILEHANDLE,LENGTH \s0" 4
.IX Xref "truncate"
.IX Item "truncate FILEHANDLE,LENGTH "
.PD 0
.IP "truncate \s-1EXPR,LENGTH\s0" 4
.IX Item "truncate EXPR,LENGTH"
.PD
Truncates the file opened on \s-1FILEHANDLE,\s0 or named by \s-1EXPR,\s0 to the
specified length.  Raises an exception if truncate isn't implemented
on your system.  Returns true if successful, \f(CW\*(C`undef\*(C'\fR on error.
.Sp
The behavior is undefined if \s-1LENGTH\s0 is greater than the length of the
file.
.Sp
The position in the file of \s-1FILEHANDLE\s0 is left unchanged.  You may want to
call seek before writing to the file.
.Sp
Portability issues: \*(L"truncate\*(R" in perlport.
.IP "uc \s-1EXPR \s0" 4
.IX Xref "uc uppercase toupper"
.IX Item "uc EXPR "
.PD 0
.IP "uc" 4
.IX Item "uc"
.PD
Returns an uppercased version of \s-1EXPR. \s0 This is the internal function
implementing the \f(CW\*(C`\eU\*(C'\fR escape in double-quoted strings.
It does not attempt to do titlecase mapping on initial letters.  See
\&\*(L"ucfirst\*(R" for that.
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.Sp
This function behaves the same way under various pragma, such as in a locale,
as \*(L"lc\*(R" does.
.IP "ucfirst \s-1EXPR \s0" 4
.IX Xref "ucfirst uppercase"
.IX Item "ucfirst EXPR "
.PD 0
.IP "ucfirst" 4
.IX Item "ucfirst"
.PD
Returns the value of \s-1EXPR\s0 with the first character in uppercase
(titlecase in Unicode).  This is the internal function implementing
the \f(CW\*(C`\eu\*(C'\fR escape in double-quoted strings.
.Sp
If \s-1EXPR\s0 is omitted, uses \f(CW$_\fR.
.Sp
This function behaves the same way under various pragma, such as in a locale,
as \*(L"lc\*(R" does.
.IP "umask \s-1EXPR \s0" 4
.IX Xref "umask"
.IX Item "umask EXPR "
.PD 0
.IP "umask" 4
.IX Item "umask"
.PD
Sets the umask for the process to \s-1EXPR\s0 and returns the previous value.
If \s-1EXPR\s0 is omitted, merely returns the current umask.
.Sp
The Unix permission \f(CW\*(C`rwxr\-x\-\-\-\*(C'\fR is represented as three sets of three
bits, or three octal digits: \f(CW0750\fR (the leading 0 indicates octal
and isn't one of the digits).  The \f(CW\*(C`umask\*(C'\fR value is such a number
representing disabled permissions bits.  The permission (or \*(L"mode\*(R")
values you pass \f(CW\*(C`mkdir\*(C'\fR or \f(CW\*(C`sysopen\*(C'\fR are modified by your umask, so
even if you tell \f(CW\*(C`sysopen\*(C'\fR to create a file with permissions \f(CW0777\fR,
if your umask is \f(CW0022\fR, then the file will actually be created with
permissions \f(CW0755\fR.  If your \f(CW\*(C`umask\*(C'\fR were \f(CW0027\fR (group can't
write; others can't read, write, or execute), then passing
\&\f(CW\*(C`sysopen\*(C'\fR \f(CW0666\fR would create a file with mode \f(CW0640\fR (because 
\&\f(CW\*(C`0666 &~ 027\*(C'\fR is \f(CW0640\fR).
.Sp
Here's some advice: supply a creation mode of \f(CW0666\fR for regular
files (in \f(CW\*(C`sysopen\*(C'\fR) and one of \f(CW0777\fR for directories (in
\&\f(CW\*(C`mkdir\*(C'\fR) and executable files.  This gives users the freedom of
choice: if they want protected files, they might choose process umasks
of \f(CW022\fR, \f(CW027\fR, or even the particularly antisocial mask of \f(CW077\fR.
Programs should rarely if ever make policy decisions better left to
the user.  The exception to this is when writing files that should be
kept private: mail files, web browser cookies, \fI.rhosts\fR files, and
so on.
.Sp
If \fIumask\fR\|(2) is not implemented on your system and you are trying to
restrict access for \fIyourself\fR (i.e., \f(CW\*(C`(EXPR & 0700) > 0\*(C'\fR), 
raises an exception.  If \fIumask\fR\|(2) is not implemented and you are
not trying to restrict access for yourself, returns \f(CW\*(C`undef\*(C'\fR.
.Sp
Remember that a umask is a number, usually given in octal; it is \fInot\fR a
string of octal digits.  See also \*(L"oct\*(R", if all you have is a string.
.Sp
Portability issues: \*(L"umask\*(R" in perlport.
.IP "undef \s-1EXPR \s0" 4
.IX Xref "undef undefine"
.IX Item "undef EXPR "
.PD 0
.IP "undef" 4
.IX Item "undef"
.PD
Undefines the value of \s-1EXPR,\s0 which must be an lvalue.  Use only on a
scalar value, an array (using \f(CW\*(C`@\*(C'\fR), a hash (using \f(CW\*(C`%\*(C'\fR), a subroutine
(using \f(CW\*(C`&\*(C'\fR), or a typeglob (using \f(CW\*(C`*\*(C'\fR).  Saying \f(CW\*(C`undef $hash{$key}\*(C'\fR
will probably not do what you expect on most predefined variables or
\&\s-1DBM\s0 list values, so don't do that; see \*(L"delete\*(R".  Always returns the
undefined value.  You can omit the \s-1EXPR,\s0 in which case nothing is
undefined, but you still get an undefined value that you could, for
instance, return from a subroutine, assign to a variable, or pass as a
parameter.  Examples:
.Sp
.Vb 9
\&    undef $foo;
\&    undef $bar{\*(Aqblurfl\*(Aq};      # Compare to: delete $bar{\*(Aqblurfl\*(Aq};
\&    undef @ary;
\&    undef %hash;
\&    undef &mysub;
\&    undef *xyz;       # destroys $xyz, @xyz, %xyz, &xyz, etc.
\&    return (wantarray ? (undef, $errmsg) : undef) if $they_blew_it;
\&    select undef, undef, undef, 0.25;
\&    ($a, $b, undef, $c) = &foo;       # Ignore third value returned
.Ve
.Sp
Note that this is a unary operator, not a list operator.
.IP "unlink \s-1LIST \s0" 4
.IX Xref "unlink delete remove rm del"
.IX Item "unlink LIST "
.PD 0
.IP "unlink" 4
.IX Item "unlink"
.PD
Deletes a list of files.  On success, it returns the number of files
it successfully deleted.  On failure, it returns false and sets \f(CW$!\fR
(errno):
.Sp
.Vb 3
\&    my $unlinked = unlink \*(Aqa\*(Aq, \*(Aqb\*(Aq, \*(Aqc\*(Aq;
\&    unlink @goners;
\&    unlink glob "*.bak";
.Ve
.Sp
On error, \f(CW\*(C`unlink\*(C'\fR will not tell you which files it could not remove.
If you want to know which files you could not remove, try them one
at a time:
.Sp
.Vb 3
\&     foreach my $file ( @goners ) {
\&         unlink $file or warn "Could not unlink $file: $!";
\&     }
.Ve
.Sp
Note: \f(CW\*(C`unlink\*(C'\fR will not attempt to delete directories unless you are
superuser and the \fB\-U\fR flag is supplied to Perl.  Even if these
conditions are met, be warned that unlinking a directory can inflict
damage on your filesystem.  Finally, using \f(CW\*(C`unlink\*(C'\fR on directories is
not supported on many operating systems.  Use \f(CW\*(C`rmdir\*(C'\fR instead.
.Sp
If \s-1LIST\s0 is omitted, \f(CW\*(C`unlink\*(C'\fR uses \f(CW$_\fR.
.IP "unpack \s-1TEMPLATE,EXPR \s0" 4
.IX Xref "unpack"
.IX Item "unpack TEMPLATE,EXPR "
.PD 0
.IP "unpack \s-1TEMPLATE\s0" 4
.IX Item "unpack TEMPLATE"
.PD
\&\f(CW\*(C`unpack\*(C'\fR does the reverse of \f(CW\*(C`pack\*(C'\fR: it takes a string
and expands it out into a list of values.
(In scalar context, it returns merely the first value produced.)
.Sp
If \s-1EXPR\s0 is omitted, unpacks the \f(CW$_\fR string.
See perlpacktut for an introduction to this function.
.Sp
The string is broken into chunks described by the \s-1TEMPLATE. \s0 Each chunk
is converted separately to a value.  Typically, either the string is a result
of \f(CW\*(C`pack\*(C'\fR, or the characters of the string represent a C structure of some
kind.
.Sp
The \s-1TEMPLATE\s0 has the same format as in the \f(CW\*(C`pack\*(C'\fR function.
Here's a subroutine that does substring:
.Sp
.Vb 4
\&    sub substr {
\&        my($what,$where,$howmuch) = @_;
\&        unpack("x$where a$howmuch", $what);
\&    }
.Ve
.Sp
and then there's
.Sp
.Vb 1
\&    sub ordinal { unpack("W",$_[0]); } # same as ord()
.Ve
.Sp
In addition to fields allowed in \fIpack()\fR, you may prefix a field with
a %<number> to indicate that
you want a <number>\-bit checksum of the items instead of the items
themselves.  Default is a 16\-bit checksum.  Checksum is calculated by
summing numeric values of expanded values (for string fields the sum of
\&\f(CW\*(C`ord($char)\*(C'\fR is taken; for bit fields the sum of zeroes and ones).
.Sp
For example, the following
computes the same number as the System V sum program:
.Sp
.Vb 4
\&    $checksum = do {
\&        local $/;  # slurp!
\&        unpack("%32W*",<>) % 65535;
\&    };
.Ve
.Sp
The following efficiently counts the number of set bits in a bit vector:
.Sp
.Vb 1
\&    $setbits = unpack("%32b*", $selectmask);
.Ve
.Sp
The \f(CW\*(C`p\*(C'\fR and \f(CW\*(C`P\*(C'\fR formats should be used with care.  Since Perl
has no way of checking whether the value passed to \f(CW\*(C`unpack()\*(C'\fR
corresponds to a valid memory location, passing a pointer value that's
not known to be valid is likely to have disastrous consequences.
.Sp
If there are more pack codes or if the repeat count of a field or a group
is larger than what the remainder of the input string allows, the result
is not well defined: the repeat count may be decreased, or
\&\f(CW\*(C`unpack()\*(C'\fR may produce empty strings or zeros, or it may raise an exception.
If the input string is longer than one described by the \s-1TEMPLATE,\s0
the remainder of that input string is ignored.
.Sp
See \*(L"pack\*(R" for more examples and notes.
.IP "unshift \s-1ARRAY,LIST \s0" 4
.IX Xref "unshift"
.IX Item "unshift ARRAY,LIST "
.PD 0
.IP "unshift \s-1EXPR,LIST\s0" 4
.IX Item "unshift EXPR,LIST"
.PD
Does the opposite of a \f(CW\*(C`shift\*(C'\fR.  Or the opposite of a \f(CW\*(C`push\*(C'\fR,
depending on how you look at it.  Prepends list to the front of the
array and returns the new number of elements in the array.
.Sp
.Vb 1
\&    unshift(@ARGV, \*(Aq\-e\*(Aq) unless $ARGV[0] =~ /^\-/;
.Ve
.Sp
Note the \s-1LIST\s0 is prepended whole, not one element at a time, so the
prepended elements stay in the same order.  Use \f(CW\*(C`reverse\*(C'\fR to do the
reverse.
.Sp
Starting with Perl 5.14, \f(CW\*(C`unshift\*(C'\fR can take a scalar \s-1EXPR,\s0 which must hold
a reference to an unblessed array.  The argument will be dereferenced
automatically.  This aspect of \f(CW\*(C`unshift\*(C'\fR is considered highly
experimental.  The exact behaviour may change in a future version of Perl.
.Sp
To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work \fIonly\fR on Perls of
a recent vintage:
.Sp
.Vb 1
\&    use 5.014;  # so push/pop/etc work on scalars (experimental)
.Ve
.IP "untie \s-1VARIABLE \s0" 4
.IX Xref "untie"
.IX Item "untie VARIABLE "
Breaks the binding between a variable and a package.
(See tie.)
Has no effect if the variable is not tied.
.IP "use Module \s-1VERSION LIST \s0" 4
.IX Xref "use module import"
.IX Item "use Module VERSION LIST "
.PD 0
.IP "use Module \s-1VERSION\s0" 4
.IX Item "use Module VERSION"
.IP "use Module \s-1LIST\s0" 4
.IX Item "use Module LIST"
.IP "use Module" 4
.IX Item "use Module"
.IP "use \s-1VERSION\s0" 4
.IX Item "use VERSION"
.PD
Imports some semantics into the current package from the named module,
generally by aliasing certain subroutine or variable names into your
package.  It is exactly equivalent to
.Sp
.Vb 1
\&    BEGIN { require Module; Module\->import( LIST ); }
.Ve
.Sp
except that Module \fImust\fR be a bareword.
The importation can be made conditional by using the if module.
.Sp
In the peculiar \f(CW\*(C`use VERSION\*(C'\fR form, \s-1VERSION\s0 may be either a positive
decimal fraction such as 5.006, which will be compared to \f(CW$]\fR, or a v\-string
of the form v5.6.1, which will be compared to \f(CW$^V\fR (aka \f(CW$PERL_VERSION\fR).  An
exception is raised if \s-1VERSION\s0 is greater than the version of the
current Perl interpreter; Perl will not attempt to parse the rest of the
file.  Compare with \*(L"require\*(R", which can do a similar check at run time.
Symmetrically, \f(CW\*(C`no VERSION\*(C'\fR allows you to specify that you want a version
of Perl older than the specified one.
.Sp
Specifying \s-1VERSION\s0 as a literal of the form v5.6.1 should generally be
avoided, because it leads to misleading error messages under earlier
versions of Perl (that is, prior to 5.6.0) that do not support this
syntax.  The equivalent numeric version should be used instead.
.Sp
.Vb 3
\&    use v5.6.1;     # compile time version check
\&    use 5.6.1;      # ditto
\&    use 5.006_001;  # ditto; preferred for backwards compatibility
.Ve
.Sp
This is often useful if you need to check the current Perl version before
\&\f(CW\*(C`use\*(C'\fRing library modules that won't work with older versions of Perl.
(We try not to do this more than we have to.)
.Sp
\&\f(CW\*(C`use VERSION\*(C'\fR also enables all features available in the requested
version as defined by the \f(CW\*(C`feature\*(C'\fR pragma, disabling any features
not in the requested version's feature bundle.  See feature.
Similarly, if the specified Perl version is greater than or equal to
5.12.0, strictures are enabled lexically as
with \f(CW\*(C`use strict\*(C'\fR.  Any explicit use of
\&\f(CW\*(C`use strict\*(C'\fR or \f(CW\*(C`no strict\*(C'\fR overrides \f(CW\*(C`use VERSION\*(C'\fR, even if it comes
before it.  In both cases, the \fIfeature.pm\fR and \fIstrict.pm\fR files are
not actually loaded.
.Sp
The \f(CW\*(C`BEGIN\*(C'\fR forces the \f(CW\*(C`require\*(C'\fR and \f(CW\*(C`import\*(C'\fR to happen at compile time.  The
\&\f(CW\*(C`require\*(C'\fR makes sure the module is loaded into memory if it hasn't been
yet.  The \f(CW\*(C`import\*(C'\fR is not a builtin; it's just an ordinary static method
call into the \f(CW\*(C`Module\*(C'\fR package to tell the module to import the list of
features back into the current package.  The module can implement its
\&\f(CW\*(C`import\*(C'\fR method any way it likes, though most modules just choose to
derive their \f(CW\*(C`import\*(C'\fR method via inheritance from the \f(CW\*(C`Exporter\*(C'\fR class that
is defined in the \f(CW\*(C`Exporter\*(C'\fR module.  See Exporter.  If no \f(CW\*(C`import\*(C'\fR
method can be found then the call is skipped, even if there is an \s-1AUTOLOAD\s0
method.
.Sp
If you do not want to call the package's \f(CW\*(C`import\*(C'\fR method (for instance,
to stop your namespace from being altered), explicitly supply the empty list:
.Sp
.Vb 1
\&    use Module ();
.Ve
.Sp
That is exactly equivalent to
.Sp
.Vb 1
\&    BEGIN { require Module }
.Ve
.Sp
If the \s-1VERSION\s0 argument is present between Module and \s-1LIST,\s0 then the
\&\f(CW\*(C`use\*(C'\fR will call the \s-1VERSION\s0 method in class Module with the given
version as an argument.  The default \s-1VERSION\s0 method, inherited from
the \s-1UNIVERSAL\s0 class, croaks if the given version is larger than the
value of the variable \f(CW$Module::VERSION\fR.
.Sp
Again, there is a distinction between omitting \s-1LIST \s0(\f(CW\*(C`import\*(C'\fR called
with no arguments) and an explicit empty \s-1LIST \s0\f(CW\*(C`()\*(C'\fR (\f(CW\*(C`import\*(C'\fR not
called).  Note that there is no comma after \s-1VERSION\s0!
.Sp
Because this is a wide-open interface, pragmas (compiler directives)
are also implemented this way.  Currently implemented pragmas are:
.Sp
.Vb 8
\&    use constant;
\&    use diagnostics;
\&    use integer;
\&    use sigtrap  qw(SEGV BUS);
\&    use strict   qw(subs vars refs);
\&    use subs     qw(afunc blurfl);
\&    use warnings qw(all);
\&    use sort     qw(stable _quicksort _mergesort);
.Ve
.Sp
Some of these pseudo-modules import semantics into the current
block scope (like \f(CW\*(C`strict\*(C'\fR or \f(CW\*(C`integer\*(C'\fR, unlike ordinary modules,
which import symbols into the current package (which are effective
through the end of the file).
.Sp
Because \f(CW\*(C`use\*(C'\fR takes effect at compile time, it doesn't respect the
ordinary flow control of the code being compiled.  In particular, putting
a \f(CW\*(C`use\*(C'\fR inside the false branch of a conditional doesn't prevent it
from being processed.  If a module or pragma only needs to be loaded 
conditionally, this can be done using the if pragma:
.Sp
.Vb 2
\&    use if $] < 5.008, "utf8";
\&    use if WANT_WARNINGS, warnings => qw(all);
.Ve
.Sp
There's a corresponding \f(CW\*(C`no\*(C'\fR declaration that unimports meanings imported
by \f(CW\*(C`use\*(C'\fR, i.e., it calls \f(CW\*(C`unimport Module LIST\*(C'\fR instead of \f(CW\*(C`import\*(C'\fR.
It behaves just as \f(CW\*(C`import\*(C'\fR does with \s-1VERSION,\s0 an omitted or empty \s-1LIST, \s0
or no unimport method being found.
.Sp
.Vb 3
\&    no integer;
\&    no strict \*(Aqrefs\*(Aq;
\&    no warnings;
.Ve
.Sp
Care should be taken when using the \f(CW\*(C`no VERSION\*(C'\fR form of \f(CW\*(C`no\*(C'\fR.  It is
\&\fIonly\fR meant to be used to assert that the running Perl is of a earlier
version than its argument and \fInot\fR to undo the feature-enabling side effects
of \f(CW\*(C`use VERSION\*(C'\fR.
.Sp
See perlmodlib for a list of standard modules and pragmas.  See perlrun
for the \f(CW\*(C`\-M\*(C'\fR and \f(CW\*(C`\-m\*(C'\fR command-line options to Perl that give \f(CW\*(C`use\*(C'\fR
functionality from the command-line.
.IP "utime \s-1LIST \s0" 4
.IX Xref "utime"
.IX Item "utime LIST "
Changes the access and modification times on each file of a list of
files.  The first two elements of the list must be the \s-1NUMERIC\s0 access
and modification times, in that order.  Returns the number of files
successfully changed.  The inode change time of each file is set
to the current time.  For example, this code has the same effect as the
Unix \fItouch\fR\|(1) command when the files \fIalready exist\fR and belong to
the user running the program:
.Sp
.Vb 3
\&    #!/usr/bin/perl
\&    $atime = $mtime = time;
\&    utime $atime, $mtime, @ARGV;
.Ve
.Sp
Since Perl 5.8.0, if the first two elements of the list are \f(CW\*(C`undef\*(C'\fR, 
the \fIutime\fR\|(2) syscall from your C library is called with a null second
argument.  On most systems, this will set the file's access and
modification times to the current time (i.e., equivalent to the example
above) and will work even on files you don't own provided you have write
permission:
.Sp
.Vb 4
\&    for $file (@ARGV) {
\&        utime(undef, undef, $file) 
\&            || warn "couldn\*(Aqt touch $file: $!";
\&    }
.Ve
.Sp
Under \s-1NFS\s0 this will use the time of the \s-1NFS\s0 server, not the time of
the local machine.  If there is a time synchronization problem, the
\&\s-1NFS\s0 server and local machine will have different times.  The Unix
\&\fItouch\fR\|(1) command will in fact normally use this form instead of the
one shown in the first example.
.Sp
Passing only one of the first two elements as \f(CW\*(C`undef\*(C'\fR is
equivalent to passing a 0 and will not have the effect 
described when both are \f(CW\*(C`undef\*(C'\fR.  This also triggers an
uninitialized warning.
.Sp
On systems that support \fIfutimes\fR\|(2), you may pass filehandles among the
files.  On systems that don't support \fIfutimes\fR\|(2), passing filehandles raises
an exception.  Filehandles must be passed as globs or glob references to be
recognized; barewords are considered filenames.
.Sp
Portability issues: \*(L"utime\*(R" in perlport.
.IP "values \s-1HASH \s0" 4
.IX Xref "values"
.IX Item "values HASH "
.PD 0
.IP "values \s-1ARRAY\s0" 4
.IX Item "values ARRAY"
.IP "values \s-1EXPR\s0" 4
.IX Item "values EXPR"
.PD
In list context, returns a list consisting of all the values of the named
hash.  In Perl 5.12 or later only, will also return a list of the values of
an array; prior to that release, attempting to use an array argument will
produce a syntax error.  In scalar context, returns the number of values.
.Sp
Hash entries are returned in an apparently random order.  The actual random
order is specific to a given hash; the exact same series of operations
on two hashes may result in a different order for each hash. Any insertion
into the hash may change the order, as will any deletion, with the exception
that the most recent key returned by \f(CW\*(C`each\*(C'\fR or \f(CW\*(C`keys\*(C'\fR may be deleted
without changing the order. So long as a given hash is unmodified you may
rely on \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`values\*(C'\fR and \f(CW\*(C`each\*(C'\fR to repeatedly return the same order
as each other. See \*(L"Algorithmic Complexity Attacks\*(R" in perlsec for
details on why hash order is randomized. Aside from the guarantees
provided here the exact details of Perl's hash algorithm and the hash
traversal order are subject to change in any release of Perl.
.Sp
As a side effect, calling \fIvalues()\fR resets the \s-1HASH\s0 or \s-1ARRAY\s0's internal
iterator, see \*(L"each\*(R".  (In particular, calling \fIvalues()\fR in void context
resets the iterator with no other overhead.  Apart from resetting the
iterator, \f(CW\*(C`values @array\*(C'\fR in list context is the same as plain \f(CW@array\fR.
(We recommend that you use void context \f(CW\*(C`keys @array\*(C'\fR for this, but
reasoned that taking \f(CW\*(C`values @array\*(C'\fR out would require more
documentation than leaving it in.)
.Sp
Note that the values are not copied, which means modifying them will
modify the contents of the hash:
.Sp
.Vb 2
\&    for (values %hash)      { s/foo/bar/g }  # modifies %hash values
\&    for (@hash{keys %hash}) { s/foo/bar/g }  # same
.Ve
.Sp
Starting with Perl 5.14, \f(CW\*(C`values\*(C'\fR can take a scalar \s-1EXPR,\s0 which must hold
a reference to an unblessed hash or array.  The argument will be
dereferenced automatically.  This aspect of \f(CW\*(C`values\*(C'\fR is considered highly
experimental.  The exact behaviour may change in a future version of Perl.
.Sp
.Vb 2
\&    for (values $hashref) { ... }
\&    for (values $obj\->get_arrayref) { ... }
.Ve
.Sp
To avoid confusing would-be users of your code who are running earlier
versions of Perl with mysterious syntax errors, put this sort of thing at
the top of your file to signal that your code will work \fIonly\fR on Perls of
a recent vintage:
.Sp
.Vb 2
\&    use 5.012;  # so keys/values/each work on arrays
\&    use 5.014;  # so keys/values/each work on scalars (experimental)
.Ve
.Sp
See also \f(CW\*(C`keys\*(C'\fR, \f(CW\*(C`each\*(C'\fR, and \f(CW\*(C`sort\*(C'\fR.
.IP "vec \s-1EXPR,OFFSET,BITS \s0" 4
.IX Xref "vec bit bit vector"
.IX Item "vec EXPR,OFFSET,BITS "
Treats the string in \s-1EXPR\s0 as a bit vector made up of elements of
width \s-1BITS\s0 and returns the value of the element specified by \s-1OFFSET\s0
as an unsigned integer.  \s-1BITS\s0 therefore specifies the number of bits
that are reserved for each element in the bit vector.  This must
be a power of two from 1 to 32 (or 64, if your platform supports
that).
.Sp
If \s-1BITS\s0 is 8, \*(L"elements\*(R" coincide with bytes of the input string.
.Sp
If \s-1BITS\s0 is 16 or more, bytes of the input string are grouped into chunks
of size \s-1BITS/8,\s0 and each group is converted to a number as with
\&\fIpack()\fR/\fIunpack()\fR with big-endian formats \f(CW\*(C`n\*(C'\fR/\f(CW\*(C`N\*(C'\fR (and analogously
for BITS==64).  See \*(L"pack\*(R" for details.
.Sp
If bits is 4 or less, the string is broken into bytes, then the bits
of each byte are broken into 8/BITS groups.  Bits of a byte are
numbered in a little-endian-ish way, as in \f(CW0x01\fR, \f(CW0x02\fR,
\&\f(CW0x04\fR, \f(CW0x08\fR, \f(CW0x10\fR, \f(CW0x20\fR, \f(CW0x40\fR, \f(CW0x80\fR.  For example,
breaking the single input byte \f(CW\*(C`chr(0x36)\*(C'\fR into two groups gives a list
\&\f(CW\*(C`(0x6, 0x3)\*(C'\fR; breaking it into 4 groups gives \f(CW\*(C`(0x2, 0x1, 0x3, 0x0)\*(C'\fR.
.Sp
\&\f(CW\*(C`vec\*(C'\fR may also be assigned to, in which case parentheses are needed
to give the expression the correct precedence as in
.Sp
.Vb 1
\&    vec($image, $max_x * $x + $y, 8) = 3;
.Ve
.Sp
If the selected element is outside the string, the value 0 is returned.
If an element off the end of the string is written to, Perl will first
extend the string with sufficiently many zero bytes.   It is an error
to try to write off the beginning of the string (i.e., negative \s-1OFFSET\s0).
.Sp
If the string happens to be encoded as \s-1UTF\-8\s0 internally (and thus has
the \s-1UTF8\s0 flag set), this is ignored by \f(CW\*(C`vec\*(C'\fR, and it operates on the
internal byte string, not the conceptual character string, even if you
only have characters with values less than 256.
.Sp
Strings created with \f(CW\*(C`vec\*(C'\fR can also be manipulated with the logical
operators \f(CW\*(C`|\*(C'\fR, \f(CW\*(C`&\*(C'\fR, \f(CW\*(C`^\*(C'\fR, and \f(CW\*(C`~\*(C'\fR.  These operators will assume a bit
vector operation is desired when both operands are strings.
See \*(L"Bitwise String Operators\*(R" in perlop.
.Sp
The following code will build up an \s-1ASCII\s0 string saying \f(CW\*(AqPerlPerlPerl\*(Aq\fR.
The comments show the string after each step.  Note that this code works
in the same way on big-endian or little-endian machines.
.Sp
.Vb 2
\&    my $foo = \*(Aq\*(Aq;
\&    vec($foo,  0, 32) = 0x5065726C; # \*(AqPerl\*(Aq
\&
\&    # $foo eq "Perl" eq "\ex50\ex65\ex72\ex6C", 32 bits
\&    print vec($foo, 0, 8);  # prints 80 == 0x50 == ord(\*(AqP\*(Aq)
\&
\&    vec($foo,  2, 16) = 0x5065; # \*(AqPerlPe\*(Aq
\&    vec($foo,  3, 16) = 0x726C; # \*(AqPerlPerl\*(Aq
\&    vec($foo,  8,  8) = 0x50;   # \*(AqPerlPerlP\*(Aq
\&    vec($foo,  9,  8) = 0x65;   # \*(AqPerlPerlPe\*(Aq
\&    vec($foo, 20,  4) = 2;      # \*(AqPerlPerlPe\*(Aq   . "\ex02"
\&    vec($foo, 21,  4) = 7;      # \*(AqPerlPerlPer\*(Aq
\&                                   # \*(Aqr\*(Aq is "\ex72"
\&    vec($foo, 45,  2) = 3;      # \*(AqPerlPerlPer\*(Aq  . "\ex0c"
\&    vec($foo, 93,  1) = 1;      # \*(AqPerlPerlPer\*(Aq  . "\ex2c"
\&    vec($foo, 94,  1) = 1;      # \*(AqPerlPerlPerl\*(Aq
\&                                   # \*(Aql\*(Aq is "\ex6c"
.Ve
.Sp
To transform a bit vector into a string or list of 0's and 1's, use these:
.Sp
.Vb 2
\&    $bits = unpack("b*", $vector);
\&    @bits = split(//, unpack("b*", $vector));
.Ve
.Sp
If you know the exact length in bits, it can be used in place of the \f(CW\*(C`*\*(C'\fR.
.Sp
Here is an example to illustrate how the bits actually fall in place:
.Sp
.Vb 1
\&  #!/usr/bin/perl \-wl
\&
\&  print <<\*(AqEOT\*(Aq;
\&                                    0         1         2         3
\&                     unpack("V",$_) 01234567890123456789012345678901
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  EOT
\&
\&  for $w (0..3) {
\&      $width = 2**$w;
\&      for ($shift=0; $shift < $width; ++$shift) {
\&          for ($off=0; $off < 32/$width; ++$off) {
\&              $str = pack("B*", "0"x32);
\&              $bits = (1<<$shift);
\&              vec($str, $off, $width) = $bits;
\&              $res = unpack("b*",$str);
\&              $val = unpack("V", $str);
\&              write;
\&          }
\&      }
\&  }
\&
\&  format STDOUT =
\&  vec($_,@#,@#) = @<< == @######### @>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
\&  $off, $width, $bits, $val, $res
\&  .
\&  _\|_END_\|_
.Ve
.Sp
Regardless of the machine architecture on which it runs, the 
example above should print the following table:
.Sp
.Vb 10
\&                                    0         1         2         3
\&                     unpack("V",$_) 01234567890123456789012345678901
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  vec($_, 0, 1) = 1   ==          1 10000000000000000000000000000000
\&  vec($_, 1, 1) = 1   ==          2 01000000000000000000000000000000
\&  vec($_, 2, 1) = 1   ==          4 00100000000000000000000000000000
\&  vec($_, 3, 1) = 1   ==          8 00010000000000000000000000000000
\&  vec($_, 4, 1) = 1   ==         16 00001000000000000000000000000000
\&  vec($_, 5, 1) = 1   ==         32 00000100000000000000000000000000
\&  vec($_, 6, 1) = 1   ==         64 00000010000000000000000000000000
\&  vec($_, 7, 1) = 1   ==        128 00000001000000000000000000000000
\&  vec($_, 8, 1) = 1   ==        256 00000000100000000000000000000000
\&  vec($_, 9, 1) = 1   ==        512 00000000010000000000000000000000
\&  vec($_,10, 1) = 1   ==       1024 00000000001000000000000000000000
\&  vec($_,11, 1) = 1   ==       2048 00000000000100000000000000000000
\&  vec($_,12, 1) = 1   ==       4096 00000000000010000000000000000000
\&  vec($_,13, 1) = 1   ==       8192 00000000000001000000000000000000
\&  vec($_,14, 1) = 1   ==      16384 00000000000000100000000000000000
\&  vec($_,15, 1) = 1   ==      32768 00000000000000010000000000000000
\&  vec($_,16, 1) = 1   ==      65536 00000000000000001000000000000000
\&  vec($_,17, 1) = 1   ==     131072 00000000000000000100000000000000
\&  vec($_,18, 1) = 1   ==     262144 00000000000000000010000000000000
\&  vec($_,19, 1) = 1   ==     524288 00000000000000000001000000000000
\&  vec($_,20, 1) = 1   ==    1048576 00000000000000000000100000000000
\&  vec($_,21, 1) = 1   ==    2097152 00000000000000000000010000000000
\&  vec($_,22, 1) = 1   ==    4194304 00000000000000000000001000000000
\&  vec($_,23, 1) = 1   ==    8388608 00000000000000000000000100000000
\&  vec($_,24, 1) = 1   ==   16777216 00000000000000000000000010000000
\&  vec($_,25, 1) = 1   ==   33554432 00000000000000000000000001000000
\&  vec($_,26, 1) = 1   ==   67108864 00000000000000000000000000100000
\&  vec($_,27, 1) = 1   ==  134217728 00000000000000000000000000010000
\&  vec($_,28, 1) = 1   ==  268435456 00000000000000000000000000001000
\&  vec($_,29, 1) = 1   ==  536870912 00000000000000000000000000000100
\&  vec($_,30, 1) = 1   == 1073741824 00000000000000000000000000000010
\&  vec($_,31, 1) = 1   == 2147483648 00000000000000000000000000000001
\&  vec($_, 0, 2) = 1   ==          1 10000000000000000000000000000000
\&  vec($_, 1, 2) = 1   ==          4 00100000000000000000000000000000
\&  vec($_, 2, 2) = 1   ==         16 00001000000000000000000000000000
\&  vec($_, 3, 2) = 1   ==         64 00000010000000000000000000000000
\&  vec($_, 4, 2) = 1   ==        256 00000000100000000000000000000000
\&  vec($_, 5, 2) = 1   ==       1024 00000000001000000000000000000000
\&  vec($_, 6, 2) = 1   ==       4096 00000000000010000000000000000000
\&  vec($_, 7, 2) = 1   ==      16384 00000000000000100000000000000000
\&  vec($_, 8, 2) = 1   ==      65536 00000000000000001000000000000000
\&  vec($_, 9, 2) = 1   ==     262144 00000000000000000010000000000000
\&  vec($_,10, 2) = 1   ==    1048576 00000000000000000000100000000000
\&  vec($_,11, 2) = 1   ==    4194304 00000000000000000000001000000000
\&  vec($_,12, 2) = 1   ==   16777216 00000000000000000000000010000000
\&  vec($_,13, 2) = 1   ==   67108864 00000000000000000000000000100000
\&  vec($_,14, 2) = 1   ==  268435456 00000000000000000000000000001000
\&  vec($_,15, 2) = 1   == 1073741824 00000000000000000000000000000010
\&  vec($_, 0, 2) = 2   ==          2 01000000000000000000000000000000
\&  vec($_, 1, 2) = 2   ==          8 00010000000000000000000000000000
\&  vec($_, 2, 2) = 2   ==         32 00000100000000000000000000000000
\&  vec($_, 3, 2) = 2   ==        128 00000001000000000000000000000000
\&  vec($_, 4, 2) = 2   ==        512 00000000010000000000000000000000
\&  vec($_, 5, 2) = 2   ==       2048 00000000000100000000000000000000
\&  vec($_, 6, 2) = 2   ==       8192 00000000000001000000000000000000
\&  vec($_, 7, 2) = 2   ==      32768 00000000000000010000000000000000
\&  vec($_, 8, 2) = 2   ==     131072 00000000000000000100000000000000
\&  vec($_, 9, 2) = 2   ==     524288 00000000000000000001000000000000
\&  vec($_,10, 2) = 2   ==    2097152 00000000000000000000010000000000
\&  vec($_,11, 2) = 2   ==    8388608 00000000000000000000000100000000
\&  vec($_,12, 2) = 2   ==   33554432 00000000000000000000000001000000
\&  vec($_,13, 2) = 2   ==  134217728 00000000000000000000000000010000
\&  vec($_,14, 2) = 2   ==  536870912 00000000000000000000000000000100
\&  vec($_,15, 2) = 2   == 2147483648 00000000000000000000000000000001
\&  vec($_, 0, 4) = 1   ==          1 10000000000000000000000000000000
\&  vec($_, 1, 4) = 1   ==         16 00001000000000000000000000000000
\&  vec($_, 2, 4) = 1   ==        256 00000000100000000000000000000000
\&  vec($_, 3, 4) = 1   ==       4096 00000000000010000000000000000000
\&  vec($_, 4, 4) = 1   ==      65536 00000000000000001000000000000000
\&  vec($_, 5, 4) = 1   ==    1048576 00000000000000000000100000000000
\&  vec($_, 6, 4) = 1   ==   16777216 00000000000000000000000010000000
\&  vec($_, 7, 4) = 1   ==  268435456 00000000000000000000000000001000
\&  vec($_, 0, 4) = 2   ==          2 01000000000000000000000000000000
\&  vec($_, 1, 4) = 2   ==         32 00000100000000000000000000000000
\&  vec($_, 2, 4) = 2   ==        512 00000000010000000000000000000000
\&  vec($_, 3, 4) = 2   ==       8192 00000000000001000000000000000000
\&  vec($_, 4, 4) = 2   ==     131072 00000000000000000100000000000000
\&  vec($_, 5, 4) = 2   ==    2097152 00000000000000000000010000000000
\&  vec($_, 6, 4) = 2   ==   33554432 00000000000000000000000001000000
\&  vec($_, 7, 4) = 2   ==  536870912 00000000000000000000000000000100
\&  vec($_, 0, 4) = 4   ==          4 00100000000000000000000000000000
\&  vec($_, 1, 4) = 4   ==         64 00000010000000000000000000000000
\&  vec($_, 2, 4) = 4   ==       1024 00000000001000000000000000000000
\&  vec($_, 3, 4) = 4   ==      16384 00000000000000100000000000000000
\&  vec($_, 4, 4) = 4   ==     262144 00000000000000000010000000000000
\&  vec($_, 5, 4) = 4   ==    4194304 00000000000000000000001000000000
\&  vec($_, 6, 4) = 4   ==   67108864 00000000000000000000000000100000
\&  vec($_, 7, 4) = 4   == 1073741824 00000000000000000000000000000010
\&  vec($_, 0, 4) = 8   ==          8 00010000000000000000000000000000
\&  vec($_, 1, 4) = 8   ==        128 00000001000000000000000000000000
\&  vec($_, 2, 4) = 8   ==       2048 00000000000100000000000000000000
\&  vec($_, 3, 4) = 8   ==      32768 00000000000000010000000000000000
\&  vec($_, 4, 4) = 8   ==     524288 00000000000000000001000000000000
\&  vec($_, 5, 4) = 8   ==    8388608 00000000000000000000000100000000
\&  vec($_, 6, 4) = 8   ==  134217728 00000000000000000000000000010000
\&  vec($_, 7, 4) = 8   == 2147483648 00000000000000000000000000000001
\&  vec($_, 0, 8) = 1   ==          1 10000000000000000000000000000000
\&  vec($_, 1, 8) = 1   ==        256 00000000100000000000000000000000
\&  vec($_, 2, 8) = 1   ==      65536 00000000000000001000000000000000
\&  vec($_, 3, 8) = 1   ==   16777216 00000000000000000000000010000000
\&  vec($_, 0, 8) = 2   ==          2 01000000000000000000000000000000
\&  vec($_, 1, 8) = 2   ==        512 00000000010000000000000000000000
\&  vec($_, 2, 8) = 2   ==     131072 00000000000000000100000000000000
\&  vec($_, 3, 8) = 2   ==   33554432 00000000000000000000000001000000
\&  vec($_, 0, 8) = 4   ==          4 00100000000000000000000000000000
\&  vec($_, 1, 8) = 4   ==       1024 00000000001000000000000000000000
\&  vec($_, 2, 8) = 4   ==     262144 00000000000000000010000000000000
\&  vec($_, 3, 8) = 4   ==   67108864 00000000000000000000000000100000
\&  vec($_, 0, 8) = 8   ==          8 00010000000000000000000000000000
\&  vec($_, 1, 8) = 8   ==       2048 00000000000100000000000000000000
\&  vec($_, 2, 8) = 8   ==     524288 00000000000000000001000000000000
\&  vec($_, 3, 8) = 8   ==  134217728 00000000000000000000000000010000
\&  vec($_, 0, 8) = 16  ==         16 00001000000000000000000000000000
\&  vec($_, 1, 8) = 16  ==       4096 00000000000010000000000000000000
\&  vec($_, 2, 8) = 16  ==    1048576 00000000000000000000100000000000
\&  vec($_, 3, 8) = 16  ==  268435456 00000000000000000000000000001000
\&  vec($_, 0, 8) = 32  ==         32 00000100000000000000000000000000
\&  vec($_, 1, 8) = 32  ==       8192 00000000000001000000000000000000
\&  vec($_, 2, 8) = 32  ==    2097152 00000000000000000000010000000000
\&  vec($_, 3, 8) = 32  ==  536870912 00000000000000000000000000000100
\&  vec($_, 0, 8) = 64  ==         64 00000010000000000000000000000000
\&  vec($_, 1, 8) = 64  ==      16384 00000000000000100000000000000000
\&  vec($_, 2, 8) = 64  ==    4194304 00000000000000000000001000000000
\&  vec($_, 3, 8) = 64  == 1073741824 00000000000000000000000000000010
\&  vec($_, 0, 8) = 128 ==        128 00000001000000000000000000000000
\&  vec($_, 1, 8) = 128 ==      32768 00000000000000010000000000000000
\&  vec($_, 2, 8) = 128 ==    8388608 00000000000000000000000100000000
\&  vec($_, 3, 8) = 128 == 2147483648 00000000000000000000000000000001
.Ve
.IP "wait" 4
.IX Xref "wait"
.IX Item "wait"
Behaves like \fIwait\fR\|(2) on your system: it waits for a child
process to terminate and returns the pid of the deceased process, or
\&\f(CW\*(C`\-1\*(C'\fR if there are no child processes.  The status is returned in \f(CW$?\fR
and \f(CW\*(C`${^CHILD_ERROR_NATIVE}\*(C'\fR.
Note that a return value of \f(CW\*(C`\-1\*(C'\fR could mean that child processes are
being automatically reaped, as described in perlipc.
.Sp
If you use wait in your handler for \f(CW$SIG\fR{\s-1CHLD\s0} it may accidentally for the
child created by \fIqx()\fR or \fIsystem()\fR.  See perlipc for details.
.Sp
Portability issues: \*(L"wait\*(R" in perlport.
.IP "waitpid \s-1PID,FLAGS \s0" 4
.IX Xref "waitpid"
.IX Item "waitpid PID,FLAGS "
Waits for a particular child process to terminate and returns the pid of
the deceased process, or \f(CW\*(C`\-1\*(C'\fR if there is no such child process.  On some
systems, a value of 0 indicates that there are processes still running.
The status is returned in \f(CW$?\fR and \f(CW\*(C`${^CHILD_ERROR_NATIVE}\*(C'\fR.  If you say
.Sp
.Vb 5
\&    use POSIX ":sys_wait_h";
\&    #...
\&    do {
\&        $kid = waitpid(\-1, WNOHANG);
\&    } while $kid > 0;
.Ve
.Sp
then you can do a non-blocking wait for all pending zombie processes.
Non-blocking wait is available on machines supporting either the
\&\fIwaitpid\fR\|(2) or \fIwait4\fR\|(2) syscalls.  However, waiting for a particular
pid with \s-1FLAGS\s0 of \f(CW0\fR is implemented everywhere.  (Perl emulates the
system call by remembering the status values of processes that have
exited but have not been harvested by the Perl script yet.)
.Sp
Note that on some systems, a return value of \f(CW\*(C`\-1\*(C'\fR could mean that child
processes are being automatically reaped.  See perlipc for details,
and for other examples.
.Sp
Portability issues: \*(L"waitpid\*(R" in perlport.
.IP "wantarray" 4
.IX Xref "wantarray context"
.IX Item "wantarray"
Returns true if the context of the currently executing subroutine or
\&\f(CW\*(C`eval\*(C'\fR is looking for a list value.  Returns false if the context is
looking for a scalar.  Returns the undefined value if the context is
looking for no value (void context).
.Sp
.Vb 3
\&    return unless defined wantarray; # don\*(Aqt bother doing more
\&    my @a = complex_calculation();
\&    return wantarray ? @a : "@a";
.Ve
.Sp
\&\f(CW\*(C`wantarray()\*(C'\fR's result is unspecified in the top level of a file,
in a \f(CW\*(C`BEGIN\*(C'\fR, \f(CW\*(C`UNITCHECK\*(C'\fR, \f(CW\*(C`CHECK\*(C'\fR, \f(CW\*(C`INIT\*(C'\fR or \f(CW\*(C`END\*(C'\fR block, or
in a \f(CW\*(C`DESTROY\*(C'\fR method.
.Sp
This function should have been named \fIwantlist()\fR instead.
.IP "warn \s-1LIST \s0" 4
.IX Xref "warn warning STDERR"
.IX Item "warn LIST "
Prints the value of \s-1LIST\s0 to \s-1STDERR. \s0 If the last element of \s-1LIST\s0 does
not end in a newline, it appends the same file/line number text as \f(CW\*(C`die\*(C'\fR
does.
.Sp
If the output is empty and \f(CW$@\fR already contains a value (typically from a
previous eval) that value is used after appending \f(CW"\et...caught"\fR
to \f(CW$@\fR.  This is useful for staying almost, but not entirely similar to
\&\f(CW\*(C`die\*(C'\fR.
.Sp
If \f(CW$@\fR is empty then the string \f(CW"Warning: Something\*(Aqs wrong"\fR is used.
.Sp
No message is printed if there is a \f(CW$SIG{_\|_WARN_\|_}\fR handler
installed.  It is the handler's responsibility to deal with the message
as it sees fit (like, for instance, converting it into a \f(CW\*(C`die\*(C'\fR).  Most
handlers must therefore arrange to actually display the
warnings that they are not prepared to deal with, by calling \f(CW\*(C`warn\*(C'\fR
again in the handler.  Note that this is quite safe and will not
produce an endless loop, since \f(CW\*(C`_\|_WARN_\|_\*(C'\fR hooks are not called from
inside one.
.Sp
You will find this behavior is slightly different from that of
\&\f(CW$SIG{_\|_DIE_\|_}\fR handlers (which don't suppress the error text, but can
instead call \f(CW\*(C`die\*(C'\fR again to change it).
.Sp
Using a \f(CW\*(C`_\|_WARN_\|_\*(C'\fR handler provides a powerful way to silence all
warnings (even the so-called mandatory ones).  An example:
.Sp
.Vb 7
\&    # wipe out *all* compile\-time warnings
\&    BEGIN { $SIG{\*(Aq_\|_WARN_\|_\*(Aq} = sub { warn $_[0] if $DOWARN } }
\&    my $foo = 10;
\&    my $foo = 20;          # no warning about duplicate my $foo,
\&                           # but hey, you asked for it!
\&    # no compile\-time or run\-time warnings before here
\&    $DOWARN = 1;
\&
\&    # run\-time warnings enabled after here
\&    warn "\e$foo is alive and $foo!";     # does show up
.Ve
.Sp
See perlvar for details on setting \f(CW%SIG\fR entries and for more
examples.  See the Carp module for other kinds of warnings using its
\&\fIcarp()\fR and \fIcluck()\fR functions.
.IP "write \s-1FILEHANDLE \s0" 4
.IX Xref "write"
.IX Item "write FILEHANDLE "
.PD 0
.IP "write \s-1EXPR\s0" 4
.IX Item "write EXPR"
.IP "write" 4
.IX Item "write"
.PD
Writes a formatted record (possibly multi-line) to the specified \s-1FILEHANDLE,\s0
using the format associated with that file.  By default the format for
a file is the one having the same name as the filehandle, but the
format for the current output channel (see the \f(CW\*(C`select\*(C'\fR function) may be set
explicitly by assigning the name of the format to the \f(CW$~\fR variable.
.Sp
Top of form processing is handled automatically:  if there is insufficient
room on the current page for the formatted record, the page is advanced by
writing a form feed, a special top-of-page format is used to format the new
page header before the record is written.  By default, the top-of-page
format is the name of the filehandle with \*(L"_TOP\*(R" appended.  This would be a
problem with autovivified filehandles, but it may be dynamically set to the
format of your choice by assigning the name to the \f(CW$^\fR variable while
that filehandle is selected.  The number of lines remaining on the current
page is in variable \f(CW\*(C`$\-\*(C'\fR, which can be set to \f(CW0\fR to force a new page.
.Sp
If \s-1FILEHANDLE\s0 is unspecified, output goes to the current default output
channel, which starts out as \s-1STDOUT\s0 but may be changed by the
\&\f(CW\*(C`select\*(C'\fR operator.  If the \s-1FILEHANDLE\s0 is an \s-1EXPR,\s0 then the expression
is evaluated and the resulting string is used to look up the name of
the \s-1FILEHANDLE\s0 at run time.  For more on formats, see perlform.
.Sp
Note that write is \fInot\fR the opposite of \f(CW\*(C`read\*(C'\fR.  Unfortunately.
.IP "y///" 4
.IX Item "y///"
The transliteration operator.  Same as \f(CW\*(C`tr///\*(C'\fR.  See
\&\*(L"Quote and Quote-like Operators\*(R" in perlop.
.SS "Non-function Keywords by Cross-reference"
.IX Subsection "Non-function Keywords by Cross-reference"
\fIperldata\fR
.IX Subsection "perldata"
.IP "_\|_DATA_\|_" 4
.IX Item "__DATA__"
.PD 0
.IP "_\|_END_\|_" 4
.IX Item "__END__"
.PD
These keywords are documented in \*(L"Special Literals\*(R" in perldata.
.PP
\fIperlmod\fR
.IX Subsection "perlmod"
.IP "\s-1BEGIN\s0" 4
.IX Item "BEGIN"
.PD 0
.IP "\s-1CHECK\s0" 4
.IX Item "CHECK"
.IP "\s-1END\s0" 4
.IX Item "END"
.IP "\s-1INIT\s0" 4
.IX Item "INIT"
.IP "\s-1UNITCHECK\s0" 4
.IX Item "UNITCHECK"
.PD
These compile phase keywords are documented in \*(L"\s-1BEGIN, UNITCHECK, CHECK, INIT\s0 and \s-1END\*(R"\s0 in perlmod.
.PP
\fIperlobj\fR
.IX Subsection "perlobj"
.IP "\s-1DESTROY\s0" 4
.IX Item "DESTROY"
This method keyword is documented in \*(L"Destructors\*(R" in perlobj.
.PP
\fIperlop\fR
.IX Subsection "perlop"
.IP "and" 4
.IX Item "and"
.PD 0
.IP "cmp" 4
.IX Item "cmp"
.IP "eq" 4
.IX Item "eq"
.IP "ge" 4
.IX Item "ge"
.IP "gt" 4
.IX Item "gt"
.IP "if" 4
.IX Item "if"
.IP "le" 4
.IX Item "le"
.IP "lt" 4
.IX Item "lt"
.IP "ne" 4
.IX Item "ne"
.IP "not" 4
.IX Item "not"
.IP "or" 4
.IX Item "or"
.IP "x" 4
.IX Item "x"
.IP "xor" 4
.IX Item "xor"
.PD
These operators are documented in perlop.
.PP
\fIperlsub\fR
.IX Subsection "perlsub"
.IP "\s-1AUTOLOAD\s0" 4
.IX Item "AUTOLOAD"
This keyword is documented in \*(L"Autoloading\*(R" in perlsub.
.PP
\fIperlsyn\fR
.IX Subsection "perlsyn"
.IP "else" 4
.IX Item "else"
.PD 0
.IP "elseif" 4
.IX Item "elseif"
.IP "elsif" 4
.IX Item "elsif"
.IP "for" 4
.IX Item "for"
.IP "foreach" 4
.IX Item "foreach"
.IP "unless" 4
.IX Item "unless"
.IP "until" 4
.IX Item "until"
.IP "while" 4
.IX Item "while"
.PD
These flow-control keywords are documented in \*(L"Compound Statements\*(R" in perlsyn.
.IP "default" 4
.IX Item "default"
.PD 0
.IP "given" 4
.IX Item "given"
.IP "when" 4
.IX Item "when"
.PD
These flow-control keywords related to the experimental switch feature are
documented in \*(L"Switch Statements\*(R" in perlsyn .
                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlgit.1                                    0100644 0001750 0001750 00000120000 12566207440 022375  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGIT 1"
.TH PERLGIT 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlgit \- Detailed information about git and the Perl repository
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides details on using git to develop Perl. If you are
just interested in working on a quick patch, see perlhack first.
This document is intended for people who are regular contributors to
Perl, including those with write access to the git repository.
.SH "CLONING THE REPOSITORY"
.IX Header "CLONING THE REPOSITORY"
All of Perl's source code is kept centrally in a Git repository at
\&\fIperl5.git.perl.org\fR.
.PP
You can make a read-only clone of the repository by running:
.PP
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.PP
This uses the git protocol (port 9418).
.PP
If you cannot use the git protocol for firewall reasons, you can also
clone via http, though this is much slower:
.PP
.Vb 1
\&  % git clone http://perl5.git.perl.org/perl.git perl
.Ve
.SH "WORKING WITH THE REPOSITORY"
.IX Header "WORKING WITH THE REPOSITORY"
Once you have changed into the repository directory, you can inspect
it. After a clone the repository will contain a single local branch,
which will be the current branch as well, as indicated by the asterisk.
.PP
.Vb 2
\&  % git branch
\&  * blead
.Ve
.PP
Using the \-a switch to \f(CW\*(C`branch\*(C'\fR will also show the remote tracking
branches in the repository:
.PP
.Vb 5
\&  % git branch \-a
\&  * blead
\&    origin/HEAD
\&    origin/blead
\&  ...
.Ve
.PP
The branches that begin with \*(L"origin\*(R" correspond to the \*(L"git remote\*(R"
that you cloned from (which is named \*(L"origin\*(R"). Each branch on the
remote will be exactly tracked by these branches. You should \s-1NEVER\s0 do
work on these remote tracking branches. You only ever do work in a
local branch. Local branches can be configured to automerge (on pull)
from a designated remote tracking branch. This is the case with the
default branch \f(CW\*(C`blead\*(C'\fR which will be configured to merge from the
remote tracking branch \f(CW\*(C`origin/blead\*(C'\fR.
.PP
You can see recent commits:
.PP
.Vb 1
\&  % git log
.Ve
.PP
And pull new changes from the repository, and update your local
repository (must be clean first)
.PP
.Vb 1
\&  % git pull
.Ve
.PP
Assuming we are on the branch \f(CW\*(C`blead\*(C'\fR immediately after a pull, this
command would be more or less equivalent to:
.PP
.Vb 2
\&  % git fetch
\&  % git merge origin/blead
.Ve
.PP
In fact if you want to update your local repository without touching
your working directory you do:
.PP
.Vb 1
\&  % git fetch
.Ve
.PP
And if you want to update your remote-tracking branches for all defined
remotes simultaneously you can do
.PP
.Vb 1
\&  % git remote update
.Ve
.PP
Neither of these last two commands will update your working directory,
however both will update the remote-tracking branches in your
repository.
.PP
To make a local branch of a remote branch:
.PP
.Vb 1
\&  % git checkout \-b maint\-5.10 origin/maint\-5.10
.Ve
.PP
To switch back to blead:
.PP
.Vb 1
\&  % git checkout blead
.Ve
.SS "Finding out your status"
.IX Subsection "Finding out your status"
The most common git command you will use will probably be
.PP
.Vb 1
\&  % git status
.Ve
.PP
This command will produce as output a description of the current state
of the repository, including modified files and unignored untracked
files, and in addition it will show things like what files have been
staged for the next commit, and usually some useful information about
how to change things. For instance the following:
.PP
.Vb 10
\&  $ git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 1 commit.
\&  #
\&  # Changes to be committed:
\&  #   (use "git reset HEAD <file>..." to unstage)
\&  #
\&  #       modified:   pod/perlgit.pod
\&  #
\&  # Changed but not updated:
\&  #   (use "git add <file>..." to update what will be committed)
\&  #
\&  #       modified:   pod/perlgit.pod
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
.Ve
.PP
This shows that there were changes to this document staged for commit,
and that there were further changes in the working directory not yet
staged. It also shows that there was an untracked file in the working
directory, and as you can see shows how to change all of this. It also
shows that there is one commit on the working branch \f(CW\*(C`blead\*(C'\fR which has
not been pushed to the \f(CW\*(C`origin\*(C'\fR remote yet. \fB\s-1NOTE\s0\fR: that this output
is also what you see as a template if you do not provide a message to
\&\f(CW\*(C`git commit\*(C'\fR.
.SS "Patch workflow"
.IX Subsection "Patch workflow"
First, please read perlhack for details on hacking the Perl core.
That document covers many details on how to create a good patch.
.PP
If you already have a Perl repository, you should ensure that you're on
the \fIblead\fR branch, and your repository is up to date:
.PP
.Vb 2
\&  % git checkout blead
\&  % git pull
.Ve
.PP
It's preferable to patch against the latest blead version, since this
is where new development occurs for all changes other than critical bug
fixes. Critical bug fix patches should be made against the relevant
maint branches, or should be submitted with a note indicating all the
branches where the fix should be applied.
.PP
Now that we have everything up to date, we need to create a temporary
new branch for these changes and switch into it:
.PP
.Vb 1
\&  % git checkout \-b orange
.Ve
.PP
which is the short form of
.PP
.Vb 2
\&  % git branch orange
\&  % git checkout orange
.Ve
.PP
Creating a topic branch makes it easier for the maintainers to rebase
or merge back into the master blead for a more linear history. If you
don't work on a topic branch the maintainer has to manually cherry pick
your changes onto blead before they can be applied.
.PP
That'll get you scolded on perl5\-porters, so don't do that. Be Awesome.
.PP
Then make your changes. For example, if Leon Brocard changes his name
to Orange Brocard, we should change his name in the \s-1AUTHORS\s0 file:
.PP
.Vb 1
\&  % perl \-pi \-e \*(Aqs{Leon Brocard}{Orange Brocard}\*(Aq AUTHORS
.Ve
.PP
You can see what files are changed:
.PP
.Vb 7
\&  % git status
\&  # On branch orange
\&  # Changes to be committed:
\&  #   (use "git reset HEAD <file>..." to unstage)
\&  #
\&  #    modified:   AUTHORS
\&  #
.Ve
.PP
And you can see the changes:
.PP
.Vb 10
\&  % git diff
\&  diff \-\-git a/AUTHORS b/AUTHORS
\&  index 293dd70..722c93e 100644
\&  \-\-\- a/AUTHORS
\&  +++ b/AUTHORS
\&  @@ \-541,7 +541,7 @@    Lars Hecking                   <lhecking@nmrc.ucc.ie>
\&   Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
\&   Leif Huhn                      <leif@hale.dkstat.com>
\&   Len Johnson                    <lenjay@ibm.net>
\&  \-Leon Brocard                   <acme@astray.com>
\&  +Orange Brocard                 <acme@astray.com>
\&   Les Peters                     <lpeters@aol.net>
\&   Lesley Binks                   <lesley.binks@gmail.com>
\&   Lincoln D. Stein               <lstein@cshl.org>
.Ve
.PP
Now commit your change locally:
.PP
.Vb 3
\&  % git commit \-a \-m \*(AqRename Leon Brocard to Orange Brocard\*(Aq
\&  Created commit 6196c1d: Rename Leon Brocard to Orange Brocard
\&   1 files changed, 1 insertions(+), 1 deletions(\-)
.Ve
.PP
The \f(CW\*(C`\-a\*(C'\fR option is used to include all files that git tracks that you
have changed. If at this time, you only want to commit some of the
files you have worked on, you can omit the \f(CW\*(C`\-a\*(C'\fR and use the command
\&\f(CW\*(C`git\ add\ \f(CIFILE\ ...\f(CW\*(C'\fR before doing the commit. \f(CW\*(C`git\ add\ \-\-interactive\*(C'\fR allows you to even just commit portions of files
instead of all the changes in them.
.PP
The \f(CW\*(C`\-m\*(C'\fR option is used to specify the commit message. If you omit it,
git will open a text editor for you to compose the message
interactively. This is useful when the changes are more complex than
the sample given here, and, depending on the editor, to know that the
first line of the commit message doesn't exceed the 50 character legal
maximum.
.PP
Once you've finished writing your commit message and exited your
editor, git will write your change to disk and tell you something like
this:
.PP
.Vb 2
\&  Created commit daf8e63: explain git status and stuff about remotes
\&   1 files changed, 83 insertions(+), 3 deletions(\-)
.Ve
.PP
If you re-run \f(CW\*(C`git status\*(C'\fR, you should see something like this:
.PP
.Vb 9
\&  % git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 2 commits.
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
\&  nothing added to commit but untracked files present (use "git add" to track)
.Ve
.PP
When in doubt, before you do anything else, check your status and read
it carefully, many questions are answered directly by the git status
output.
.PP
You can examine your last commit with:
.PP
.Vb 1
\&  % git show HEAD
.Ve
.PP
and if you are not happy with either the description or the patch
itself you can fix it up by editing the files once more and then issue:
.PP
.Vb 1
\&  % git commit \-a \-\-amend
.Ve
.PP
Now you should create a patch file for all your local changes:
.PP
.Vb 2
\&  % git format\-patch \-M origin..
\&  0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
.Ve
.PP
You should now send an email to
perlbug@perl.org <mailto:perlbug@perl.org> with a description of your
changes, and include this patch file as an attachment. In addition to
being tracked by \s-1RT,\s0 mail to perlbug will automatically be forwarded to
perl5\-porters (with manual moderation, so please be patient). You
should only send patches to
perl5\-porters@perl.org <mailto:perl5-porters@perl.org> directly if the
patch is not ready to be applied, but intended for discussion.
.PP
See the next section for how to configure and use git to send these
emails for you.
.PP
If you want to delete your temporary branch, you may do so with:
.PP
.Vb 6
\&  % git checkout blead
\&  % git branch \-d orange
\&  error: The branch \*(Aqorange\*(Aq is not an ancestor of your current HEAD.
\&  If you are sure you want to delete it, run \*(Aqgit branch \-D orange\*(Aq.
\&  % git branch \-D orange
\&  Deleted branch orange.
.Ve
.SS "Committing your changes"
.IX Subsection "Committing your changes"
Assuming that you'd like to commit all the changes you've made as a
single atomic unit, run this command:
.PP
.Vb 1
\&   % git commit \-a
.Ve
.PP
(That \f(CW\*(C`\-a\*(C'\fR tells git to add every file you've changed to this commit.
New files aren't automatically added to your commit when you use
\&\f(CW\*(C`commit \-a\*(C'\fR If you want to add files or to commit some, but not all of
your changes, have a look at the documentation for \f(CW\*(C`git add\*(C'\fR.)
.PP
Git will start up your favorite text editor, so that you can craft a
commit message for your change. See \*(L"Commit message\*(R" in perlhack for more
information about what makes a good commit message.
.PP
Once you've finished writing your commit message and exited your
editor, git will write your change to disk and tell you something like
this:
.PP
.Vb 2
\&  Created commit daf8e63: explain git status and stuff about remotes
\&   1 files changed, 83 insertions(+), 3 deletions(\-)
.Ve
.PP
If you re-run \f(CW\*(C`git status\*(C'\fR, you should see something like this:
.PP
.Vb 9
\&  % git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 2 commits.
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
\&  nothing added to commit but untracked files present (use "git add" to track)
.Ve
.PP
When in doubt, before you do anything else, check your status and read
it carefully, many questions are answered directly by the git status
output.
.SS "Using git to send patch emails"
.IX Subsection "Using git to send patch emails"
Please read perlhack first in order to figure out where your patches
should be sent.
.PP
In your ~/git/perl repository, set the destination email to perl's bug
tracker:
.PP
.Vb 1
\&  $ git config sendemail.to perlbug@perl.org
.Ve
.PP
Or maybe perl5\-porters:
.PP
.Vb 1
\&  $ git config sendemail.to perl5\-porters@perl.org
.Ve
.PP
Then you can use git directly to send your patch emails:
.PP
.Vb 1
\&  $ git send\-email 0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
.Ve
.PP
You may need to set some configuration variables for your particular
email service provider. For example, to set your global git config to
send email via a gmail account:
.PP
.Vb 3
\&  $ git config \-\-global sendemail.smtpserver smtp.gmail.com
\&  $ git config \-\-global sendemail.smtpssl 1
\&  $ git config \-\-global sendemail.smtpuser YOURUSERNAME@gmail.com
.Ve
.PP
With this configuration, you will be prompted for your gmail password
when you run 'git send\-email'. You can also configure
\&\f(CW\*(C`sendemail.smtppass\*(C'\fR with your password if you don't care about having
your password in the .gitconfig file.
.SS "A note on derived files"
.IX Subsection "A note on derived files"
Be aware that many files in the distribution are derivative\*(--avoid
patching them, because git won't see the changes to them, and the build
process will overwrite them. Patch the originals instead. Most
utilities (like perldoc) are in this category, i.e. patch
\&\fIutils/perldoc.PL\fR rather than \fIutils/perldoc\fR. Similarly, don't
create patches for files under \f(CW$src_root\fR/ext from their copies found in
\&\f(CW$install_root\fR/lib. If you are unsure about the proper location of a
file that may have gotten copied while building the source
distribution, consult the \f(CW\*(C`MANIFEST\*(C'\fR.
.SS "Cleaning a working directory"
.IX Subsection "Cleaning a working directory"
The command \f(CW\*(C`git clean\*(C'\fR can with varying arguments be used as a
replacement for \f(CW\*(C`make clean\*(C'\fR.
.PP
To reset your working directory to a pristine condition you can do:
.PP
.Vb 1
\&  % git clean \-dxf
.Ve
.PP
However, be aware this will delete \s-1ALL\s0 untracked content. You can use
.PP
.Vb 1
\&  % git clean \-Xf
.Ve
.PP
to remove all ignored untracked files, such as build and test
byproduct, but leave any  manually created files alone.
.PP
If you only want to cancel some uncommitted edits, you can use \f(CW\*(C`git
checkout\*(C'\fR and give it a list of files to be reverted, or \f(CW\*(C`git checkout
\&\-f\*(C'\fR to revert them all.
.PP
If you want to cancel one or several commits, you can use \f(CW\*(C`git reset\*(C'\fR.
.SS "Bisecting"
.IX Subsection "Bisecting"
\&\f(CW\*(C`git\*(C'\fR provides a built-in way to determine which commit should be blamed
for introducing a given bug. \f(CW\*(C`git bisect\*(C'\fR performs a binary search of
history to locate the first failing commit. It is fast, powerful and
flexible, but requires some setup and to automate the process an auxiliary
shell script is needed.
.PP
The core provides a wrapper program, \fIPorting/bisect.pl\fR, which attempts to
simplify as much as possible, making bisecting as simple as running a Perl
one-liner. For example, if you want to know when this became an error:
.PP
.Vb 1
\&    perl \-e \*(Aqmy $a := 2\*(Aq
.Ve
.PP
you simply run this:
.PP
.Vb 1
\&    .../Porting/bisect.pl \-e \*(Aqmy $a := 2;\*(Aq
.Ve
.PP
Using \f(CW\*(C`bisect.pl\*(C'\fR, with one command (and no other files) it's easy to find
out
.IP "\(bu" 4
Which commit caused this example code to break?
.IP "\(bu" 4
Which commit caused this example code to start working?
.IP "\(bu" 4
Which commit added the first file to match this regex?
.IP "\(bu" 4
Which commit removed the last file to match this regex?
.PP
usually without needing to know which versions of perl to use as start and
end revisions, as \fIbisect.pl\fR automatically searches to find the earliest
stable version for which the test case passes. Run
\&\f(CW\*(C`Porting/bisect.pl \-\-help\*(C'\fR for the full documentation, including how to
set the \f(CW\*(C`Configure\*(C'\fR and build time options.
.PP
If you require more flexibility than \fIPorting/bisect.pl\fR has to offer, you'll
need to run \f(CW\*(C`git bisect\*(C'\fR yourself. It's most useful to use \f(CW\*(C`git bisect run\*(C'\fR
to automate the building and testing of perl revisions. For this you'll need
a shell script for \f(CW\*(C`git\*(C'\fR to call to test a particular revision. An example
script is \fIPorting/bisect\-example.sh\fR, which you should copy \fBoutside\fR of
the repository, as the bisect process will reset the state to a clean checkout
as it runs. The instructions below assume that you copied it as \fI~/run\fR and
then edited it as appropriate.
.PP
You first enter in bisect mode with:
.PP
.Vb 1
\&  % git bisect start
.Ve
.PP
For example, if the bug is present on \f(CW\*(C`HEAD\*(C'\fR but wasn't in 5.10.0,
\&\f(CW\*(C`git\*(C'\fR will learn about this when you enter:
.PP
.Vb 3
\&  % git bisect bad
\&  % git bisect good perl\-5.10.0
\&  Bisecting: 853 revisions left to test after this
.Ve
.PP
This results in checking out the median commit between \f(CW\*(C`HEAD\*(C'\fR and
\&\f(CW\*(C`perl\-5.10.0\*(C'\fR. You can then run the bisecting process with:
.PP
.Vb 1
\&  % git bisect run ~/run
.Ve
.PP
When the first bad commit is isolated, \f(CW\*(C`git bisect\*(C'\fR will tell you so:
.PP
.Vb 4
\&  ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5 is first bad commit
\&  commit ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5
\&  Author: Dave Mitchell <davem@fdisolutions.com>
\&  Date:   Sat Feb 9 14:56:23 2008 +0000
\&
\&      [perl #49472] Attributes + Unknown Error
\&      ...
\&
\&  bisect run success
.Ve
.PP
You can peek into the bisecting process with \f(CW\*(C`git bisect log\*(C'\fR and
\&\f(CW\*(C`git bisect visualize\*(C'\fR. \f(CW\*(C`git bisect reset\*(C'\fR will get you out of bisect
mode.
.PP
Please note that the first \f(CW\*(C`good\*(C'\fR state must be an ancestor of the
first \f(CW\*(C`bad\*(C'\fR state. If you want to search for the commit that \fIsolved\fR
some bug, you have to negate your test case (i.e. exit with \f(CW1\fR if \s-1OK\s0
and \f(CW0\fR if not) and still mark the lower bound as \f(CW\*(C`good\*(C'\fR and the
upper as \f(CW\*(C`bad\*(C'\fR. The \*(L"first bad commit\*(R" has then to be understood as
the \*(L"first commit where the bug is solved\*(R".
.PP
\&\f(CW\*(C`git help bisect\*(C'\fR has much more information on how you can tweak your
binary searches.
.SS "Topic branches and rewriting history"
.IX Subsection "Topic branches and rewriting history"
Individual committers should create topic branches under
\&\fByourname\fR/\fBsome_descriptive_name\fR. Other committers should check
with a topic branch's creator before making any change to it.
.PP
The simplest way to create a remote topic branch that works on all
versions of git is to push the current head as a new branch on the
remote, then check it out locally:
.PP
.Vb 3
\&  $ branch="$yourname/$some_descriptive_name"
\&  $ git push origin HEAD:$branch
\&  $ git checkout \-b $branch origin/$branch
.Ve
.PP
Users of git 1.7 or newer can do it in a more obvious manner:
.PP
.Vb 3
\&  $ branch="$yourname/$some_descriptive_name"
\&  $ git checkout \-b $branch
\&  $ git push origin \-u $branch
.Ve
.PP
If you are not the creator of \fByourname\fR/\fBsome_descriptive_name\fR, you
might sometimes find that the original author has edited the branch's
history. There are lots of good reasons for this. Sometimes, an author
might simply be rebasing the branch onto a newer source point.
Sometimes, an author might have found an error in an early commit which
they wanted to fix before merging the branch to blead.
.PP
Currently the master repository is configured to forbid
non-fast-forward merges. This means that the branches within can not be
rebased and pushed as a single step.
.PP
The only way you will ever be allowed to rebase or modify the history
of a pushed branch is to delete it and push it as a new branch under
the same name. Please think carefully about doing this. It may be
better to sequentially rename your branches so that it is easier for
others working with you to cherry-pick their local changes onto the new
version. (\s-1XXX:\s0 needs explanation).
.PP
If you want to rebase a personal topic branch, you will have to delete
your existing topic branch and push as a new version of it. You can do
this via the following formula (see the explanation about \f(CW\*(C`refspec\*(C'\fR's
in the git push documentation for details) after you have rebased your
branch:
.PP
.Vb 4
\&   # first rebase
\&   $ git checkout $user/$topic
\&   $ git fetch
\&   $ git rebase origin/blead
\&
\&   # then "delete\-and\-push"
\&   $ git push origin :$user/$topic
\&   $ git push origin $user/$topic
.Ve
.PP
\&\fB\s-1NOTE:\s0\fR it is forbidden at the repository level to delete any of the
\&\*(L"primary\*(R" branches. That is any branch matching
\&\f(CW\*(C`m!^(blead|maint|perl)!\*(C'\fR. Any attempt to do so will result in git
producing an error like this:
.PP
.Vb 7
\&    $ git push origin :blead
\&    *** It is forbidden to delete blead/maint branches in this repository
\&    error: hooks/update exited with error code 1
\&    error: hook declined to update refs/heads/blead
\&    To ssh://perl5.git.perl.org/perl
\&     ! [remote rejected] blead (hook declined)
\&     error: failed to push some refs to \*(Aqssh://perl5.git.perl.org/perl\*(Aq
.Ve
.PP
As a matter of policy we do \fBnot\fR edit the history of the blead and
maint\-* branches. If a typo (or worse) sneaks into a commit to blead or
maint\-*, we'll fix it in another commit. The only types of updates
allowed on these branches are \*(L"fast-forward's\*(R", where all history is
preserved.
.PP
Annotated tags in the canonical perl.git repository will never be
deleted or modified. Think long and hard about whether you want to push
a local tag to perl.git before doing so. (Pushing unannotated tags is
not allowed.)
.SS "Grafts"
.IX Subsection "Grafts"
The perl history contains one mistake which was not caught in the
conversion: a merge was recorded in the history between blead and
maint\-5.10 where no merge actually occurred. Due to the nature of git,
this is now impossible to fix in the public repository. You can remove
this mis-merge locally by adding the following line to your
\&\f(CW\*(C`.git/info/grafts\*(C'\fR file:
.PP
.Vb 1
\&  296f12bbbbaa06de9be9d09d3dcf8f4528898a49 434946e0cb7a32589ed92d18008aaa1d88515930
.Ve
.PP
It is particularly important to have this graft line if any bisecting
is done in the area of the \*(L"merge\*(R" in question.
.SH "WRITE ACCESS TO THE GIT REPOSITORY"
.IX Header "WRITE ACCESS TO THE GIT REPOSITORY"
Once you have write access, you will need to modify the \s-1URL\s0 for the
origin remote to enable pushing. Edit \fI.git/config\fR with the
\&\fIgit\-config\fR\|(1) command:
.PP
.Vb 1
\&  % git config remote.origin.url ssh://perl5.git.perl.org/perl.git
.Ve
.PP
You can also set up your user name and e\-mail address. Most people do
this once globally in their \fI~/.gitconfig\fR by doing something like:
.PP
.Vb 2
\&  % git config \-\-global user.name "\*(Aevar Arnfjo\*:r\*(d- Bjarmason"
\&  % git config \-\-global user.email avarab@gmail.com
.Ve
.PP
However, if you'd like to override that just for perl, 
execute something like the following in \fIperl\fR:
.PP
.Vb 1
\&  % git config user.email avar@cpan.org
.Ve
.PP
It is also possible to keep \f(CW\*(C`origin\*(C'\fR as a git remote, and add a new
remote for ssh access:
.PP
.Vb 1
\&  % git remote add camel perl5.git.perl.org:/perl.git
.Ve
.PP
This allows you to update your local repository by pulling from
\&\f(CW\*(C`origin\*(C'\fR, which is faster and doesn't require you to authenticate, and
to push your changes back with the \f(CW\*(C`camel\*(C'\fR remote:
.PP
.Vb 2
\&  % git fetch camel
\&  % git push camel
.Ve
.PP
The \f(CW\*(C`fetch\*(C'\fR command just updates the \f(CW\*(C`camel\*(C'\fR refs, as the objects
themselves should have been fetched when pulling from \f(CW\*(C`origin\*(C'\fR.
.SS "Accepting a patch"
.IX Subsection "Accepting a patch"
If you have received a patch file generated using the above section,
you should try out the patch.
.PP
First we need to create a temporary new branch for these changes and
switch into it:
.PP
.Vb 1
\&  % git checkout \-b experimental
.Ve
.PP
Patches that were formatted by \f(CW\*(C`git format\-patch\*(C'\fR are applied with
\&\f(CW\*(C`git am\*(C'\fR:
.PP
.Vb 2
\&  % git am 0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
\&  Applying Rename Leon Brocard to Orange Brocard
.Ve
.PP
If just a raw diff is provided, it is also possible use this two-step
process:
.PP
.Vb 2
\&  % git apply bugfix.diff
\&  % git commit \-a \-m "Some fixing" \-\-author="That Guy <that.guy@internets.com>"
.Ve
.PP
Now we can inspect the change:
.PP
.Vb 4
\&  % git show HEAD
\&  commit b1b3dab48344cff6de4087efca3dbd63548ab5e2
\&  Author: Leon Brocard <acme@astray.com>
\&  Date:   Fri Dec 19 17:02:59 2008 +0000
\&
\&    Rename Leon Brocard to Orange Brocard
\&
\&  diff \-\-git a/AUTHORS b/AUTHORS
\&  index 293dd70..722c93e 100644
\&  \-\-\- a/AUTHORS
\&  +++ b/AUTHORS
\&  @@ \-541,7 +541,7 @@ Lars Hecking                        <lhecking@nmrc.ucc.ie>
\&   Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
\&   Leif Huhn                      <leif@hale.dkstat.com>
\&   Len Johnson                    <lenjay@ibm.net>
\&  \-Leon Brocard                   <acme@astray.com>
\&  +Orange Brocard                 <acme@astray.com>
\&   Les Peters                     <lpeters@aol.net>
\&   Lesley Binks                   <lesley.binks@gmail.com>
\&   Lincoln D. Stein               <lstein@cshl.org>
.Ve
.PP
If you are a committer to Perl and you think the patch is good, you can
then merge it into blead then push it out to the main repository:
.PP
.Vb 3
\&  % git checkout blead
\&  % git merge experimental
\&  % git push origin blead
.Ve
.PP
If you want to delete your temporary branch, you may do so with:
.PP
.Vb 6
\&  % git checkout blead
\&  % git branch \-d experimental
\&  error: The branch \*(Aqexperimental\*(Aq is not an ancestor of your current HEAD.
\&  If you are sure you want to delete it, run \*(Aqgit branch \-D experimental\*(Aq.
\&  % git branch \-D experimental
\&  Deleted branch experimental.
.Ve
.SS "Committing to blead"
.IX Subsection "Committing to blead"
The 'blead' branch will become the next production release of Perl.
.PP
Before pushing \fIany\fR local change to blead, it's incredibly important
that you do a few things, lest other committers come after you with
pitchforks and torches:
.IP "\(bu" 4
Make sure you have a good commit message. See \*(L"Commit
message\*(R" in perlhack for details.
.IP "\(bu" 4
Run the test suite. You might not think that one typo fix would break a
test file. You'd be wrong. Here's an example of where not running the
suite caused problems. A patch was submitted that added a couple of
tests to an existing .t. It couldn't possibly affect anything else, so
no need to test beyond the single affected .t, right?  But, the
submitter's email address had changed since the last of their
submissions, and this caused other tests to fail. Running the test
target given in the next item would have caught this problem.
.IP "\(bu" 4
If you don't run the full test suite, at least \f(CW\*(C`make test_porting\*(C'\fR.
This will run basic sanity checks. To see which sanity checks, have a
look in \fIt/porting\fR.
.IP "\(bu" 4
If you make any changes that affect miniperl or core routines that have
different code paths for miniperl, be sure to run \f(CW\*(C`make minitest\*(C'\fR.
This will catch problems that even the full test suite will not catch
because it runs a subset of tests under miniperl rather than perl.
.SS "On merging and rebasing"
.IX Subsection "On merging and rebasing"
Simple, one-off commits pushed to the 'blead' branch should be simple
commits that apply cleanly.  In other words, you should make sure your
work is committed against the current position of blead, so that you can
push back to the master repository without merging.
.PP
Sometimes, blead will move while you're building or testing your
changes.  When this happens, your push will be rejected with a message
like this:
.PP
.Vb 6
\&  To ssh://perl5.git.perl.org/perl.git
\&   ! [rejected]        blead \-> blead (non\-fast\-forward)
\&  error: failed to push some refs to \*(Aqssh://perl5.git.perl.org/perl.git\*(Aq
\&  To prevent you from losing history, non\-fast\-forward updates were rejected
\&  Merge the remote changes (e.g. \*(Aqgit pull\*(Aq) before pushing again.  See the
\&  \*(AqNote about fast\-forwards\*(Aq section of \*(Aqgit push \-\-help\*(Aq for details.
.Ve
.PP
When this happens, you can just \fIrebase\fR your work against the new
position of blead, like this (assuming your remote for the master
repository is \*(L"p5p\*(R"):
.PP
.Vb 2
\&  $ git fetch p5p
\&  $ git rebase p5p/blead
.Ve
.PP
You will see your commits being re-applied, and you will then be able to
push safely.  More information about rebasing can be found in the
documentation for the \fIgit\-rebase\fR\|(1) command.
.PP
For larger sets of commits that only make sense together, or that would
benefit from a summary of the set's purpose, you should use a merge
commit.  You should perform your work on a topic branch, which you should regularly rebase
against blead to ensure that your code is not broken by blead moving.
When you have finished your work, please perform a final rebase and
test.  Linear history is something that gets lost with every
commit on blead, but a final rebase makes the history linear
again, making it easier for future maintainers to see what has
happened.  Rebase as follows (assuming your work was on the
branch \f(CW\*(C`committer/somework\*(C'\fR):
.PP
.Vb 2
\&  $ git checkout committer/somework
\&  $ git rebase blead
.Ve
.PP
Then you can merge it into master like this:
.PP
.Vb 3
\&  $ git checkout blead
\&  $ git merge \-\-no\-ff \-\-no\-commit committer/somework
\&  $ git commit \-a
.Ve
.PP
The switches above deserve explanation.  \f(CW\*(C`\-\-no\-ff\*(C'\fR indicates that even
if all your work can be applied linearly against blead, a merge commit
should still be prepared.  This ensures that all your work will be shown
as a side branch, with all its commits merged into the mainstream blead
by the merge commit.
.PP
\&\f(CW\*(C`\-\-no\-commit\*(C'\fR means that the merge commit will be \fIprepared\fR but not
\&\fIcommitted\fR.  The commit is then actually performed when you run the
next command, which will bring up your editor to describe the commit.
Without \f(CW\*(C`\-\-no\-commit\*(C'\fR, the commit would be made with nearly no useful
message, which would greatly diminish the value of the merge commit as a
placeholder for the work's description.
.PP
When describing the merge commit, explain the purpose of the branch, and
keep in mind that this description will probably be used by the
eventual release engineer when reviewing the next perldelta document.
.SS "Committing to maintenance versions"
.IX Subsection "Committing to maintenance versions"
Maintenance versions should only be altered to add critical bug fixes,
see perlpolicy.
.PP
To commit to a maintenance version of perl, you need to create a local
tracking branch:
.PP
.Vb 1
\&  % git checkout \-\-track \-b maint\-5.005 origin/maint\-5.005
.Ve
.PP
This creates a local branch named \f(CW\*(C`maint\-5.005\*(C'\fR, which tracks the
remote branch \f(CW\*(C`origin/maint\-5.005\*(C'\fR. Then you can pull, commit, merge
and push as before.
.PP
You can also cherry-pick commits from blead and another branch, by
using the \f(CW\*(C`git cherry\-pick\*(C'\fR command. It is recommended to use the
\&\fB\-x\fR option to \f(CW\*(C`git cherry\-pick\*(C'\fR in order to record the \s-1SHA1\s0 of the
original commit in the new commit message.
.PP
Before pushing any change to a maint version, make sure you've
satisfied the steps in \*(L"Committing to blead\*(R" above.
.SS "Merging from a branch via GitHub"
.IX Subsection "Merging from a branch via GitHub"
While we don't encourage the submission of patches via GitHub, that
will still happen. Here is a guide to merging patches from a GitHub
repository.
.PP
.Vb 2
\&  % git remote add avar git://github.com/avar/perl.git
\&  % git fetch avar
.Ve
.PP
Now you can see the differences between the branch and blead:
.PP
.Vb 1
\&  % git diff avar/orange
.Ve
.PP
And you can see the commits:
.PP
.Vb 1
\&  % git log avar/orange
.Ve
.PP
If you approve of a specific commit, you can cherry pick it:
.PP
.Vb 1
\&  % git cherry\-pick 0c24b290ae02b2ab3304f51d5e11e85eb3659eae
.Ve
.PP
Or you could just merge the whole branch if you like it all:
.PP
.Vb 1
\&  % git merge avar/orange
.Ve
.PP
And then push back to the repository:
.PP
.Vb 1
\&  % git push origin blead
.Ve
.SS "Using a smoke-me branch to test changes"
.IX Subsection "Using a smoke-me branch to test changes"
Sometimes a change affects code paths which you cannot test on the OSes
which are directly available to you and it would be wise to have users
on other OSes test the change before you commit it to blead.
.PP
Fortunately, there is a way to get your change smoke-tested on various
OSes: push it to a \*(L"smoke-me\*(R" branch and wait for certain automated
smoke-testers to report the results from their OSes.
.PP
The procedure for doing this is roughly as follows (using the example of
of tonyc's smoke-me branch called win32stat):
.PP
First, make a local branch and switch to it:
.PP
.Vb 1
\&  % git checkout \-b win32stat
.Ve
.PP
Make some changes, build perl and test your changes, then commit them to
your local branch. Then push your local branch to a remote smoke-me
branch:
.PP
.Vb 1
\&  % git push origin win32stat:smoke\-me/tonyc/win32stat
.Ve
.PP
Now you can switch back to blead locally:
.PP
.Vb 1
\&  % git checkout blead
.Ve
.PP
and continue working on other things while you wait a day or two,
keeping an eye on the results reported for your smoke-me branch at
<http://perl.develop\-help.com/?b=smoke\-me/tonyc/win32state>.
.PP
If all is well then update your blead branch:
.PP
.Vb 1
\&  % git pull
.Ve
.PP
then checkout your smoke-me branch once more and rebase it on blead:
.PP
.Vb 1
\&  % git rebase blead win32stat
.Ve
.PP
Now switch back to blead and merge your smoke-me branch into it:
.PP
.Vb 2
\&  % git checkout blead
\&  % git merge win32stat
.Ve
.PP
As described earlier, if there are many changes on your smoke-me branch
then you should prepare a merge commit in which to give an overview of
those changes by using the following command instead of the last
command above:
.PP
.Vb 1
\&  % git merge win32stat \-\-no\-ff \-\-no\-commit
.Ve
.PP
You should now build perl and test your (merged) changes one last time
(ideally run the whole test suite, but failing that at least run the
\&\fIt/porting/*.t\fR tests) before pushing your changes as usual:
.PP
.Vb 1
\&  % git push origin blead
.Ve
.PP
Finally, you should then delete the remote smoke-me branch:
.PP
.Vb 1
\&  % git push origin :smoke\-me/tonyc/win32stat
.Ve
.PP
(which is likely to produce a warning like this, which can be ignored:
.PP
.Vb 2
\&  remote: fatal: ambiguous argument \*(Aqrefs/heads/smoke\-me/tonyc/win32stat\*(Aq: unknown revision or path not in the working tree.
\&  remote: Use \*(Aq\-\-\*(Aq to separate paths from revisions
.Ve
.PP
) and then delete your local branch:
.PP
.Vb 1
\&  % git branch \-d win32stat
.Ve
.SS "A note on camel and dromedary"
.IX Subsection "A note on camel and dromedary"
The committers have \s-1SSH\s0 access to the two servers that serve
\&\f(CW\*(C`perl5.git.perl.org\*(C'\fR. One is \f(CW\*(C`perl5.git.perl.org\*(C'\fR itself (\fIcamel\fR),
which is the 'master' repository. The second one is
\&\f(CW\*(C`users.perl5.git.perl.org\*(C'\fR (\fIdromedary\fR), which can be used for
general testing and development. Dromedary syncs the git tree from
camel every few minutes, you should not push there. Both machines also
have a full \s-1CPAN\s0 mirror in /srv/CPAN, please use this. To share files
with the general public, dromedary serves your ~/public_html/ as
\&\f(CW\*(C`http://users.perl5.git.perl.org/~yourlogin/\*(C'\fR
.PP
These hosts have fairly strict firewalls to the outside. Outgoing, only
rsync, ssh and git are allowed. For http and ftp, you can use
http://webproxy:3128 as proxy. Incoming, the firewall tries to detect
attacks and blocks \s-1IP\s0 addresses with suspicious activity. This
sometimes (but very rarely) has false positives and you might get
blocked. The quickest way to get unblocked is to notify the admins.
.PP
These two boxes are owned, hosted, and operated by booking.com. You can
reach the sysadmins in #p5p on irc.perl.org or via mail to
\&\f(CW\*(C`perl5\-porters@perl.org\*(C'\fR.
osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlgit5.16.1                                0100644 0001750 0001750 00000112347 12566207420 022724  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGIT 1"
.TH PERLGIT 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlgit \- Detailed information about git and the Perl repository
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides details on using git to develop Perl. If you are
just interested in working on a quick patch, see perlhack first.
This document is intended for people who are regular contributors to
Perl, including those with write access to the git repository.
.SH "CLONING THE REPOSITORY"
.IX Header "CLONING THE REPOSITORY"
All of Perl's source code is kept centrally in a Git repository at
\&\fIperl5.git.perl.org\fR.
.PP
You can make a read-only clone of the repository by running:
.PP
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.PP
This uses the git protocol (port 9418).
.PP
If you cannot use the git protocol for firewall reasons, you can also
clone via http, though this is much slower:
.PP
.Vb 1
\&  % git clone http://perl5.git.perl.org/perl.git perl
.Ve
.SH "WORKING WITH THE REPOSITORY"
.IX Header "WORKING WITH THE REPOSITORY"
Once you have changed into the repository directory, you can inspect
it. After a clone the repository will contain a single local branch,
which will be the current branch as well, as indicated by the asterisk.
.PP
.Vb 2
\&  % git branch
\&  * blead
.Ve
.PP
Using the \-a switch to \f(CW\*(C`branch\*(C'\fR will also show the remote tracking
branches in the repository:
.PP
.Vb 5
\&  % git branch \-a
\&  * blead
\&    origin/HEAD
\&    origin/blead
\&  ...
.Ve
.PP
The branches that begin with \*(L"origin\*(R" correspond to the \*(L"git remote\*(R"
that you cloned from (which is named \*(L"origin\*(R"). Each branch on the
remote will be exactly tracked by these branches. You should \s-1NEVER\s0 do
work on these remote tracking branches. You only ever do work in a
local branch. Local branches can be configured to automerge (on pull)
from a designated remote tracking branch. This is the case with the
default branch \f(CW\*(C`blead\*(C'\fR which will be configured to merge from the
remote tracking branch \f(CW\*(C`origin/blead\*(C'\fR.
.PP
You can see recent commits:
.PP
.Vb 1
\&  % git log
.Ve
.PP
And pull new changes from the repository, and update your local
repository (must be clean first)
.PP
.Vb 1
\&  % git pull
.Ve
.PP
Assuming we are on the branch \f(CW\*(C`blead\*(C'\fR immediately after a pull, this
command would be more or less equivalent to:
.PP
.Vb 2
\&  % git fetch
\&  % git merge origin/blead
.Ve
.PP
In fact if you want to update your local repository without touching
your working directory you do:
.PP
.Vb 1
\&  % git fetch
.Ve
.PP
And if you want to update your remote-tracking branches for all defined
remotes simultaneously you can do
.PP
.Vb 1
\&  % git remote update
.Ve
.PP
Neither of these last two commands will update your working directory,
however both will update the remote-tracking branches in your
repository.
.PP
To make a local branch of a remote branch:
.PP
.Vb 1
\&  % git checkout \-b maint\-5.10 origin/maint\-5.10
.Ve
.PP
To switch back to blead:
.PP
.Vb 1
\&  % git checkout blead
.Ve
.SS "Finding out your status"
.IX Subsection "Finding out your status"
The most common git command you will use will probably be
.PP
.Vb 1
\&  % git status
.Ve
.PP
This command will produce as output a description of the current state
of the repository, including modified files and unignored untracked
files, and in addition it will show things like what files have been
staged for the next commit, and usually some useful information about
how to change things. For instance the following:
.PP
.Vb 10
\&  $ git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 1 commit.
\&  #
\&  # Changes to be committed:
\&  #   (use "git reset HEAD <file>..." to unstage)
\&  #
\&  #       modified:   pod/perlgit.pod
\&  #
\&  # Changed but not updated:
\&  #   (use "git add <file>..." to update what will be committed)
\&  #
\&  #       modified:   pod/perlgit.pod
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
.Ve
.PP
This shows that there were changes to this document staged for commit,
and that there were further changes in the working directory not yet
staged. It also shows that there was an untracked file in the working
directory, and as you can see shows how to change all of this. It also
shows that there is one commit on the working branch \f(CW\*(C`blead\*(C'\fR which has
not been pushed to the \f(CW\*(C`origin\*(C'\fR remote yet. \fB\s-1NOTE\s0\fR: that this output
is also what you see as a template if you do not provide a message to
\&\f(CW\*(C`git commit\*(C'\fR.
.SS "Patch workflow"
.IX Subsection "Patch workflow"
First, please read perlhack for details on hacking the Perl core.
That document covers many details on how to create a good patch.
.PP
If you already have a Perl repository, you should ensure that you're on
the \fIblead\fR branch, and your repository is up to date:
.PP
.Vb 2
\&  % git checkout blead
\&  % git pull
.Ve
.PP
It's preferable to patch against the latest blead version, since this
is where new development occurs for all changes other than critical bug
fixes. Critical bug fix patches should be made against the relevant
maint branches, or should be submitted with a note indicating all the
branches where the fix should be applied.
.PP
Now that we have everything up to date, we need to create a temporary
new branch for these changes and switch into it:
.PP
.Vb 1
\&  % git checkout \-b orange
.Ve
.PP
which is the short form of
.PP
.Vb 2
\&  % git branch orange
\&  % git checkout orange
.Ve
.PP
Creating a topic branch makes it easier for the maintainers to rebase
or merge back into the master blead for a more linear history. If you
don't work on a topic branch the maintainer has to manually cherry pick
your changes onto blead before they can be applied.
.PP
That'll get you scolded on perl5\-porters, so don't do that. Be Awesome.
.PP
Then make your changes. For example, if Leon Brocard changes his name
to Orange Brocard, we should change his name in the \s-1AUTHORS\s0 file:
.PP
.Vb 1
\&  % perl \-pi \-e \*(Aqs{Leon Brocard}{Orange Brocard}\*(Aq AUTHORS
.Ve
.PP
You can see what files are changed:
.PP
.Vb 7
\&  % git status
\&  # On branch orange
\&  # Changes to be committed:
\&  #   (use "git reset HEAD <file>..." to unstage)
\&  #
\&  #    modified:   AUTHORS
\&  #
.Ve
.PP
And you can see the changes:
.PP
.Vb 10
\&  % git diff
\&  diff \-\-git a/AUTHORS b/AUTHORS
\&  index 293dd70..722c93e 100644
\&  \-\-\- a/AUTHORS
\&  +++ b/AUTHORS
\&  @@ \-541,7 +541,7 @@    Lars Hecking                   <lhecking@nmrc.ucc.ie>
\&   Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
\&   Leif Huhn                      <leif@hale.dkstat.com>
\&   Len Johnson                    <lenjay@ibm.net>
\&  \-Leon Brocard                   <acme@astray.com>
\&  +Orange Brocard                 <acme@astray.com>
\&   Les Peters                     <lpeters@aol.net>
\&   Lesley Binks                   <lesley.binks@gmail.com>
\&   Lincoln D. Stein               <lstein@cshl.org>
.Ve
.PP
Now commit your change locally:
.PP
.Vb 3
\&  % git commit \-a \-m \*(AqRename Leon Brocard to Orange Brocard\*(Aq
\&  Created commit 6196c1d: Rename Leon Brocard to Orange Brocard
\&   1 files changed, 1 insertions(+), 1 deletions(\-)
.Ve
.PP
The \f(CW\*(C`\-a\*(C'\fR option is used to include all files that git tracks that you
have changed. If at this time, you only want to commit some of the
files you have worked on, you can omit the \f(CW\*(C`\-a\*(C'\fR and use the command
\&\f(CW\*(C`git\ add\ \f(CIFILE\ ...\f(CW\*(C'\fR before doing the commit. \f(CW\*(C`git\ add\ \-\-interactive\*(C'\fR allows you to even just commit portions of files
instead of all the changes in them.
.PP
The \f(CW\*(C`\-m\*(C'\fR option is used to specify the commit message. If you omit it,
git will open a text editor for you to compose the message
interactively. This is useful when the changes are more complex than
the sample given here, and, depending on the editor, to know that the
first line of the commit message doesn't exceed the 50 character legal
maximum.
.PP
Once you've finished writing your commit message and exited your
editor, git will write your change to disk and tell you something like
this:
.PP
.Vb 2
\&  Created commit daf8e63: explain git status and stuff about remotes
\&   1 files changed, 83 insertions(+), 3 deletions(\-)
.Ve
.PP
If you re-run \f(CW\*(C`git status\*(C'\fR, you should see something like this:
.PP
.Vb 9
\&  % git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 2 commits.
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
\&  nothing added to commit but untracked files present (use "git add" to track)
.Ve
.PP
When in doubt, before you do anything else, check your status and read
it carefully, many questions are answered directly by the git status
output.
.PP
You can examine your last commit with:
.PP
.Vb 1
\&  % git show HEAD
.Ve
.PP
and if you are not happy with either the description or the patch
itself you can fix it up by editing the files once more and then issue:
.PP
.Vb 1
\&  % git commit \-a \-\-amend
.Ve
.PP
Now you should create a patch file for all your local changes:
.PP
.Vb 2
\&  % git format\-patch \-M origin..
\&  0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
.Ve
.PP
You should now send an email to
perlbug@perl.org <mailto:perlbug@perl.org> with a description of your
changes, and include this patch file as an attachment. In addition to
being tracked by \s-1RT\s0, mail to perlbug will automatically be forwarded to
perl5\-porters (with manual moderation, so please be patient). You
should only send patches to
perl5\-porters@perl.org <mailto:perl5-porters@perl.org> directly if the
patch is not ready to be applied, but intended for discussion.
.PP
See the next section for how to configure and use git to send these
emails for you.
.PP
If you want to delete your temporary branch, you may do so with:
.PP
.Vb 6
\&  % git checkout blead
\&  % git branch \-d orange
\&  error: The branch \*(Aqorange\*(Aq is not an ancestor of your current HEAD.
\&  If you are sure you want to delete it, run \*(Aqgit branch \-D orange\*(Aq.
\&  % git branch \-D orange
\&  Deleted branch orange.
.Ve
.SS "Committing your changes"
.IX Subsection "Committing your changes"
Assuming that you'd like to commit all the changes you've made as a
single atomic unit, run this command:
.PP
.Vb 1
\&   % git commit \-a
.Ve
.PP
(That \f(CW\*(C`\-a\*(C'\fR tells git to add every file you've changed to this commit.
New files aren't automatically added to your commit when you use
\&\f(CW\*(C`commit \-a\*(C'\fR If you want to add files or to commit some, but not all of
your changes, have a look at the documentation for \f(CW\*(C`git add\*(C'\fR.)
.PP
Git will start up your favorite text editor, so that you can craft a
commit message for your change. See \*(L"Commit message\*(R" in perlhack for more
information about what makes a good commit message.
.PP
Once you've finished writing your commit message and exited your
editor, git will write your change to disk and tell you something like
this:
.PP
.Vb 2
\&  Created commit daf8e63: explain git status and stuff about remotes
\&   1 files changed, 83 insertions(+), 3 deletions(\-)
.Ve
.PP
If you re-run \f(CW\*(C`git status\*(C'\fR, you should see something like this:
.PP
.Vb 9
\&  % git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 2 commits.
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
\&  nothing added to commit but untracked files present (use "git add" to track)
.Ve
.PP
When in doubt, before you do anything else, check your status and read
it carefully, many questions are answered directly by the git status
output.
.SS "Using git to send patch emails"
.IX Subsection "Using git to send patch emails"
Please read perlhack first in order to figure out where your patches
should be sent.
.PP
In your ~/git/perl repository, set the destination email to perl's bug
tracker:
.PP
.Vb 1
\&  $ git config sendemail.to perlbug@perl.org
.Ve
.PP
Or maybe perl5\-porters:
.PP
.Vb 1
\&  $ git config sendemail.to perl5\-porters@perl.org
.Ve
.PP
Then you can use git directly to send your patch emails:
.PP
.Vb 1
\&  $ git send\-email 0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
.Ve
.PP
You may need to set some configuration variables for your particular
email service provider. For example, to set your global git config to
send email via a gmail account:
.PP
.Vb 3
\&  $ git config \-\-global sendemail.smtpserver smtp.gmail.com
\&  $ git config \-\-global sendemail.smtpssl 1
\&  $ git config \-\-global sendemail.smtpuser YOURUSERNAME@gmail.com
.Ve
.PP
With this configuration, you will be prompted for your gmail password
when you run 'git send\-email'. You can also configure
\&\f(CW\*(C`sendemail.smtppass\*(C'\fR with your password if you don't care about having
your password in the .gitconfig file.
.SS "A note on derived files"
.IX Subsection "A note on derived files"
Be aware that many files in the distribution are derivative\*(--avoid
patching them, because git won't see the changes to them, and the build
process will overwrite them. Patch the originals instead. Most
utilities (like perldoc) are in this category, i.e. patch
\&\fIutils/perldoc.PL\fR rather than \fIutils/perldoc\fR. Similarly, don't
create patches for files under \f(CW$src_root\fR/ext from their copies found in
\&\f(CW$install_root\fR/lib. If you are unsure about the proper location of a
file that may have gotten copied while building the source
distribution, consult the \f(CW\*(C`MANIFEST\*(C'\fR.
.SS "Cleaning a working directory"
.IX Subsection "Cleaning a working directory"
The command \f(CW\*(C`git clean\*(C'\fR can with varying arguments be used as a
replacement for \f(CW\*(C`make clean\*(C'\fR.
.PP
To reset your working directory to a pristine condition you can do:
.PP
.Vb 1
\&  % git clean \-dxf
.Ve
.PP
However, be aware this will delete \s-1ALL\s0 untracked content. You can use
.PP
.Vb 1
\&  % git clean \-Xf
.Ve
.PP
to remove all ignored untracked files, such as build and test
byproduct, but leave any  manually created files alone.
.PP
If you only want to cancel some uncommitted edits, you can use \f(CW\*(C`git
checkout\*(C'\fR and give it a list of files to be reverted, or \f(CW\*(C`git checkout
\&\-f\*(C'\fR to revert them all.
.PP
If you want to cancel one or several commits, you can use \f(CW\*(C`git reset\*(C'\fR.
.SS "Bisecting"
.IX Subsection "Bisecting"
\&\f(CW\*(C`git\*(C'\fR provides a built-in way to determine which commit should be blamed
for introducing a given bug. \f(CW\*(C`git bisect\*(C'\fR performs a binary search of
history to locate the first failing commit. It is fast, powerful and
flexible, but requires some setup and to automate the process an auxiliary
shell script is needed.
.PP
The core provides a wrapper program, \fIPorting/bisect.pl\fR, which attempts to
simplify as much as possible, making bisecting as simple as running a Perl
one-liner. For example, if you want to know when this became an error:
.PP
.Vb 1
\&    perl \-e \*(Aqmy $a := 2\*(Aq
.Ve
.PP
you simply run this:
.PP
.Vb 1
\&    .../Porting/bisect.pl \-e \*(Aqmy $a := 2;\*(Aq
.Ve
.PP
Using \f(CW\*(C`bisect.pl\*(C'\fR, with one command (and no other files) it's easy to find
out
.IP "\(bu" 4
Which commit caused this example code to break?
.IP "\(bu" 4
Which commit caused this example code to start working?
.IP "\(bu" 4
Which commit added the first file to match this regex?
.IP "\(bu" 4
Which commit removed the last file to match this regex?
.PP
usually without needing to know which versions of perl to use as start and
end revisions, as \fIbisect.pl\fR automatically searches to find the earliest
stable version for which the test case passes. Run
\&\f(CW\*(C`Porting/bisect.pl \-\-help\*(C'\fR for the full documentation, including how to
set the \f(CW\*(C`Configure\*(C'\fR and build time options.
.PP
If you require more flexibility than \fIPorting/bisect.pl\fR has to offer, you'll
need to run \f(CW\*(C`git bisect\*(C'\fR yourself. It's most useful to use \f(CW\*(C`git bisect run\*(C'\fR
to automate the building and testing of perl revisions. For this you'll need
a shell script for \f(CW\*(C`git\*(C'\fR to call to test a particular revision. An example
script is \fIPorting/bisect\-example.sh\fR, which you should copy \fBoutside\fR of
the repository, as the bisect process will reset the state to a clean checkout
as it runs. The instructions below assume that you copied it as \fI~/run\fR and
then edited it as appropriate.
.PP
You first enter in bisect mode with:
.PP
.Vb 1
\&  % git bisect start
.Ve
.PP
For example, if the bug is present on \f(CW\*(C`HEAD\*(C'\fR but wasn't in 5.10.0,
\&\f(CW\*(C`git\*(C'\fR will learn about this when you enter:
.PP
.Vb 3
\&  % git bisect bad
\&  % git bisect good perl\-5.10.0
\&  Bisecting: 853 revisions left to test after this
.Ve
.PP
This results in checking out the median commit between \f(CW\*(C`HEAD\*(C'\fR and
\&\f(CW\*(C`perl\-5.10.0\*(C'\fR. You can then run the bisecting process with:
.PP
.Vb 1
\&  % git bisect run ~/run
.Ve
.PP
When the first bad commit is isolated, \f(CW\*(C`git bisect\*(C'\fR will tell you so:
.PP
.Vb 4
\&  ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5 is first bad commit
\&  commit ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5
\&  Author: Dave Mitchell <davem@fdisolutions.com>
\&  Date:   Sat Feb 9 14:56:23 2008 +0000
\&
\&      [perl #49472] Attributes + Unknown Error
\&      ...
\&
\&  bisect run success
.Ve
.PP
You can peek into the bisecting process with \f(CW\*(C`git bisect log\*(C'\fR and
\&\f(CW\*(C`git bisect visualize\*(C'\fR. \f(CW\*(C`git bisect reset\*(C'\fR will get you out of bisect
mode.
.PP
Please note that the first \f(CW\*(C`good\*(C'\fR state must be an ancestor of the
first \f(CW\*(C`bad\*(C'\fR state. If you want to search for the commit that \fIsolved\fR
some bug, you have to negate your test case (i.e. exit with \f(CW1\fR if \s-1OK\s0
and \f(CW0\fR if not) and still mark the lower bound as \f(CW\*(C`good\*(C'\fR and the
upper as \f(CW\*(C`bad\*(C'\fR. The \*(L"first bad commit\*(R" has then to be understood as
the \*(L"first commit where the bug is solved\*(R".
.PP
\&\f(CW\*(C`git help bisect\*(C'\fR has much more information on how you can tweak your
binary searches.
.SH "Topic branches and rewriting history"
.IX Header "Topic branches and rewriting history"
Individual committers should create topic branches under
\&\fByourname\fR/\fBsome_descriptive_name\fR. Other committers should check
with a topic branch's creator before making any change to it.
.PP
The simplest way to create a remote topic branch that works on all
versions of git is to push the current head as a new branch on the
remote, then check it out locally:
.PP
.Vb 3
\&  $ branch="$yourname/$some_descriptive_name"
\&  $ git push origin HEAD:$branch
\&  $ git checkout \-b $branch origin/$branch
.Ve
.PP
Users of git 1.7 or newer can do it in a more obvious manner:
.PP
.Vb 3
\&  $ branch="$yourname/$some_descriptive_name"
\&  $ git checkout \-b $branch
\&  $ git push origin \-u $branch
.Ve
.PP
If you are not the creator of \fByourname\fR/\fBsome_descriptive_name\fR, you
might sometimes find that the original author has edited the branch's
history. There are lots of good reasons for this. Sometimes, an author
might simply be rebasing the branch onto a newer source point.
Sometimes, an author might have found an error in an early commit which
they wanted to fix before merging the branch to blead.
.PP
Currently the master repository is configured to forbid
non-fast-forward merges. This means that the branches within can not be
rebased and pushed as a single step.
.PP
The only way you will ever be allowed to rebase or modify the history
of a pushed branch is to delete it and push it as a new branch under
the same name. Please think carefully about doing this. It may be
better to sequentially rename your branches so that it is easier for
others working with you to cherry-pick their local changes onto the new
version. (\s-1XXX:\s0 needs explanation).
.PP
If you want to rebase a personal topic branch, you will have to delete
your existing topic branch and push as a new version of it. You can do
this via the following formula (see the explanation about \f(CW\*(C`refspec\*(C'\fR's
in the git push documentation for details) after you have rebased your
branch:
.PP
.Vb 4
\&   # first rebase
\&   $ git checkout $user/$topic
\&   $ git fetch
\&   $ git rebase origin/blead
\&
\&   # then "delete\-and\-push"
\&   $ git push origin :$user/$topic
\&   $ git push origin $user/$topic
.Ve
.PP
\&\fB\s-1NOTE:\s0\fR it is forbidden at the repository level to delete any of the
\&\*(L"primary\*(R" branches. That is any branch matching
\&\f(CW\*(C`m!^(blead|maint|perl)!\*(C'\fR. Any attempt to do so will result in git
producing an error like this:
.PP
.Vb 7
\&    $ git push origin :blead
\&    *** It is forbidden to delete blead/maint branches in this repository
\&    error: hooks/update exited with error code 1
\&    error: hook declined to update refs/heads/blead
\&    To ssh://perl5.git.perl.org/perl
\&     ! [remote rejected] blead (hook declined)
\&     error: failed to push some refs to \*(Aqssh://perl5.git.perl.org/perl\*(Aq
.Ve
.PP
As a matter of policy we do \fBnot\fR edit the history of the blead and
maint\-* branches. If a typo (or worse) sneaks into a commit to blead or
maint\-*, we'll fix it in another commit. The only types of updates
allowed on these branches are \*(L"fast-forward's\*(R", where all history is
preserved.
.PP
Annotated tags in the canonical perl.git repository will never be
deleted or modified. Think long and hard about whether you want to push
a local tag to perl.git before doing so. (Pushing unannotated tags is
not allowed.)
.SS "Grafts"
.IX Subsection "Grafts"
The perl history contains one mistake which was not caught in the
conversion: a merge was recorded in the history between blead and
maint\-5.10 where no merge actually occurred. Due to the nature of git,
this is now impossible to fix in the public repository. You can remove
this mis-merge locally by adding the following line to your
\&\f(CW\*(C`.git/info/grafts\*(C'\fR file:
.PP
.Vb 1
\&  296f12bbbbaa06de9be9d09d3dcf8f4528898a49 434946e0cb7a32589ed92d18008aaa1d88515930
.Ve
.PP
It is particularly important to have this graft line if any bisecting
is done in the area of the \*(L"merge\*(R" in question.
.SH "WRITE ACCESS TO THE GIT REPOSITORY"
.IX Header "WRITE ACCESS TO THE GIT REPOSITORY"
Once you have write access, you will need to modify the \s-1URL\s0 for the
origin remote to enable pushing. Edit \fI.git/config\fR with the
\&\fIgit\-config\fR\|(1) command:
.PP
.Vb 1
\&  % git config remote.origin.url ssh://perl5.git.perl.org/perl.git
.Ve
.PP
You can also set up your user name and e\-mail address. Most people do
this once globally in their \fI~/.gitconfig\fR by doing something like:
.PP
.Vb 2
\&  % git config \-\-global user.name "\*(AEvar Arnfjo\*:r\*(d- Bjarmason"
\&  % git config \-\-global user.email avarab@gmail.com
.Ve
.PP
However if you'd like to override that just for perl then execute then
execute something like the following in \fIperl\fR:
.PP
.Vb 1
\&  % git config user.email avar@cpan.org
.Ve
.PP
It is also possible to keep \f(CW\*(C`origin\*(C'\fR as a git remote, and add a new
remote for ssh access:
.PP
.Vb 1
\&  % git remote add camel perl5.git.perl.org:/perl.git
.Ve
.PP
This allows you to update your local repository by pulling from
\&\f(CW\*(C`origin\*(C'\fR, which is faster and doesn't require you to authenticate, and
to push your changes back with the \f(CW\*(C`camel\*(C'\fR remote:
.PP
.Vb 2
\&  % git fetch camel
\&  % git push camel
.Ve
.PP
The \f(CW\*(C`fetch\*(C'\fR command just updates the \f(CW\*(C`camel\*(C'\fR refs, as the objects
themselves should have been fetched when pulling from \f(CW\*(C`origin\*(C'\fR.
.SH "Accepting a patch"
.IX Header "Accepting a patch"
If you have received a patch file generated using the above section,
you should try out the patch.
.PP
First we need to create a temporary new branch for these changes and
switch into it:
.PP
.Vb 1
\&  % git checkout \-b experimental
.Ve
.PP
Patches that were formatted by \f(CW\*(C`git format\-patch\*(C'\fR are applied with
\&\f(CW\*(C`git am\*(C'\fR:
.PP
.Vb 2
\&  % git am 0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
\&  Applying Rename Leon Brocard to Orange Brocard
.Ve
.PP
If just a raw diff is provided, it is also possible use this two-step
process:
.PP
.Vb 2
\&  % git apply bugfix.diff
\&  % git commit \-a \-m "Some fixing" \-\-author="That Guy <that.guy@internets.com>"
.Ve
.PP
Now we can inspect the change:
.PP
.Vb 4
\&  % git show HEAD
\&  commit b1b3dab48344cff6de4087efca3dbd63548ab5e2
\&  Author: Leon Brocard <acme@astray.com>
\&  Date:   Fri Dec 19 17:02:59 2008 +0000
\&
\&    Rename Leon Brocard to Orange Brocard
\&
\&  diff \-\-git a/AUTHORS b/AUTHORS
\&  index 293dd70..722c93e 100644
\&  \-\-\- a/AUTHORS
\&  +++ b/AUTHORS
\&  @@ \-541,7 +541,7 @@ Lars Hecking                        <lhecking@nmrc.ucc.ie>
\&   Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
\&   Leif Huhn                      <leif@hale.dkstat.com>
\&   Len Johnson                    <lenjay@ibm.net>
\&  \-Leon Brocard                   <acme@astray.com>
\&  +Orange Brocard                 <acme@astray.com>
\&   Les Peters                     <lpeters@aol.net>
\&   Lesley Binks                   <lesley.binks@gmail.com>
\&   Lincoln D. Stein               <lstein@cshl.org>
.Ve
.PP
If you are a committer to Perl and you think the patch is good, you can
then merge it into blead then push it out to the main repository:
.PP
.Vb 3
\&  % git checkout blead
\&  % git merge experimental
\&  % git push
.Ve
.PP
If you want to delete your temporary branch, you may do so with:
.PP
.Vb 6
\&  % git checkout blead
\&  % git branch \-d experimental
\&  error: The branch \*(Aqexperimental\*(Aq is not an ancestor of your current HEAD.
\&  If you are sure you want to delete it, run \*(Aqgit branch \-D experimental\*(Aq.
\&  % git branch \-D experimental
\&  Deleted branch experimental.
.Ve
.SS "Committing to blead"
.IX Subsection "Committing to blead"
The 'blead' branch will become the next production release of Perl.
.PP
Before pushing \fIany\fR local change to blead, it's incredibly important
that you do a few things, lest other committers come after you with
pitchforks and torches:
.IP "\(bu" 4
Make sure you have a good commit message. See \*(L"Commit
message\*(R" in perlhack for details.
.IP "\(bu" 4
Run the test suite. You might not think that one typo fix would break a
test file. You'd be wrong. Here's an example of where not running the
suite caused problems. A patch was submitted that added a couple of
tests to an existing .t. It couldn't possibly affect anything else, so
no need to test beyond the single affected .t, right?  But, the
submitter's email address had changed since the last of their
submissions, and this caused other tests to fail. Running the test
target given in the next item would have caught this problem.
.IP "\(bu" 4
If you don't run the full test suite, at least \f(CW\*(C`make test_porting\*(C'\fR.
This will run basic sanity checks. To see which sanity checks, have a
look in \fIt/porting\fR.
.IP "\(bu" 4
If you make any changes that affect miniperl or core routines that have
different code paths for miniperl, be sure to run \f(CW\*(C`make minitest\*(C'\fR.
This will catch problems that even the full test suite will not catch
because it runs a subset of tests under miniperl rather than perl.
.PP
\fIOn merging and rebasing\fR
.IX Subsection "On merging and rebasing"
.PP
Simple, one-off commits pushed to the 'blead' branch should be simple
commits that apply cleanly.  In other words, you should make sure your
work is committed against the current position of blead, so that you can
push back to the master repository without merging.
.PP
Sometimes, blead will move while you're building or testing your
changes.  When this happens, your push will be rejected with a message
like this:
.PP
.Vb 6
\&  To ssh://perl5.git.perl.org/perl.git
\&   ! [rejected]        blead \-> blead (non\-fast\-forward)
\&  error: failed to push some refs to \*(Aqssh://perl5.git.perl.org/perl.git\*(Aq
\&  To prevent you from losing history, non\-fast\-forward updates were rejected
\&  Merge the remote changes (e.g. \*(Aqgit pull\*(Aq) before pushing again.  See the
\&  \*(AqNote about fast\-forwards\*(Aq section of \*(Aqgit push \-\-help\*(Aq for details.
.Ve
.PP
When this happens, you can just \fIrebase\fR your work against the new
position of blead, like this (assuming your remote for the master
repository is \*(L"p5p\*(R"):
.PP
.Vb 2
\&  $ git fetch p5p
\&  $ git rebase p5p/blead
.Ve
.PP
You will see your commits being re-applied, and you will then be able to
push safely.  More information about rebasing can be found in the
documentation for the \fIgit\-rebase\fR\|(1) command.
.PP
For larger sets of commits that only make sense together, or that would
benefit from a summary of the set's purpose, you should use a merge
commit.  You should perform your work on a topic branch, which you should regularly rebase
against blead to ensure that your code is not broken by blead moving.
When you have finished your work, please perform a final rebase and
test.  Linear history is something that gets lost with every
commit on blead, but a final rebase makes the history linear
again, making it easier for future maintainers to see what has
happened.  Rebase as follows (assuming your work was on the
branch \f(CW\*(C`committer/somework\*(C'\fR):
.PP
.Vb 2
\&  $ git checkout committer/somework
\&  $ git rebase blead
.Ve
.PP
Then you can merge it into master like this:
.PP
.Vb 3
\&  $ git checkout blead
\&  $ git merge \-\-no\-ff \-\-no\-commit committer/somework
\&  $ git commit \-a
.Ve
.PP
The switches above deserve explanation.  \f(CW\*(C`\-\-no\-ff\*(C'\fR indicates that even
if all your work can be applied linearly against blead, a merge commit
should still be prepared.  This ensures that all your work will be shown
as a side branch, with all its commits merged into the mainstream blead
by the merge commit.
.PP
\&\f(CW\*(C`\-\-no\-commit\*(C'\fR means that the merge commit will be \fIprepared\fR but not
\&\fIcommitted\fR.  The commit is then actually performed when you run the
next command, which will bring up your editor to describe the commit.
Without \f(CW\*(C`\-\-no\-commit\*(C'\fR, the commit would be made with nearly no useful
message, which would greatly diminish the value of the merge commit as a
placeholder for the work's description.
.PP
When describing the merge commit, explain the purpose of the branch, and
keep in mind that this description will probably be used by the
eventual release engineer when reviewing the next perldelta document.
.SS "Committing to maintenance versions"
.IX Subsection "Committing to maintenance versions"
Maintenance versions should only be altered to add critical bug fixes,
see perlpolicy.
.PP
To commit to a maintenance version of perl, you need to create a local
tracking branch:
.PP
.Vb 1
\&  % git checkout \-\-track \-b maint\-5.005 origin/maint\-5.005
.Ve
.PP
This creates a local branch named \f(CW\*(C`maint\-5.005\*(C'\fR, which tracks the
remote branch \f(CW\*(C`origin/maint\-5.005\*(C'\fR. Then you can pull, commit, merge
and push as before.
.PP
You can also cherry-pick commits from blead and another branch, by
using the \f(CW\*(C`git cherry\-pick\*(C'\fR command. It is recommended to use the
\&\fB\-x\fR option to \f(CW\*(C`git cherry\-pick\*(C'\fR in order to record the \s-1SHA1\s0 of the
original commit in the new commit message.
.PP
Before pushing any change to a maint version, make sure you've
satisfied the steps in \*(L"Committing to blead\*(R" above.
.SS "Merging from a branch via GitHub"
.IX Subsection "Merging from a branch via GitHub"
While we don't encourage the submission of patches via GitHub, that
will still happen. Here is a guide to merging patches from a GitHub
repository.
.PP
.Vb 2
\&  % git remote add avar git://github.com/avar/perl.git
\&  % git fetch avar
.Ve
.PP
Now you can see the differences between the branch and blead:
.PP
.Vb 1
\&  % git diff avar/orange
.Ve
.PP
And you can see the commits:
.PP
.Vb 1
\&  % git log avar/orange
.Ve
.PP
If you approve of a specific commit, you can cherry pick it:
.PP
.Vb 1
\&  % git cherry\-pick 0c24b290ae02b2ab3304f51d5e11e85eb3659eae
.Ve
.PP
Or you could just merge the whole branch if you like it all:
.PP
.Vb 1
\&  % git merge avar/orange
.Ve
.PP
And then push back to the repository:
.PP
.Vb 1
\&  % git push
.Ve
.SS "A note on camel and dromedary"
.IX Subsection "A note on camel and dromedary"
The committers have \s-1SSH\s0 access to the two servers that serve
\&\f(CW\*(C`perl5.git.perl.org\*(C'\fR. One is \f(CW\*(C`perl5.git.perl.org\*(C'\fR itself (\fIcamel\fR),
which is the 'master' repository. The second one is
\&\f(CW\*(C`users.perl5.git.perl.org\*(C'\fR (\fIdromedary\fR), which can be used for
general testing and development. Dromedary syncs the git tree from
camel every few minutes, you should not push there. Both machines also
have a full \s-1CPAN\s0 mirror in /srv/CPAN, please use this. To share files
with the general public, dromedary serves your ~/public_html/ as
\&\f(CW\*(C`http://users.perl5.git.perl.org/~yourlogin/\*(C'\fR
.PP
These hosts have fairly strict firewalls to the outside. Outgoing, only
rsync, ssh and git are allowed. For http and ftp, you can use
http://webproxy:3128 as proxy. Incoming, the firewall tries to detect
attacks and blocks \s-1IP\s0 addresses with suspicious activity. This
sometimes (but very rarely) has false positives and you might get
blocked. The quickest way to get unblocked is to notify the admins.
.PP
These two boxes are owned, hosted, and operated by booking.com. You can
reach the sysadmins in #p5p on irc.perl.org or via mail to
\&\f(CW\*(C`perl5\-porters@perl.org\*(C'\fR.
                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlgit5.18.1                                0100644 0001750 0001750 00000120000 12566207440 022711  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGIT 1"
.TH PERLGIT 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlgit \- Detailed information about git and the Perl repository
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides details on using git to develop Perl. If you are
just interested in working on a quick patch, see perlhack first.
This document is intended for people who are regular contributors to
Perl, including those with write access to the git repository.
.SH "CLONING THE REPOSITORY"
.IX Header "CLONING THE REPOSITORY"
All of Perl's source code is kept centrally in a Git repository at
\&\fIperl5.git.perl.org\fR.
.PP
You can make a read-only clone of the repository by running:
.PP
.Vb 1
\&  % git clone git://perl5.git.perl.org/perl.git perl
.Ve
.PP
This uses the git protocol (port 9418).
.PP
If you cannot use the git protocol for firewall reasons, you can also
clone via http, though this is much slower:
.PP
.Vb 1
\&  % git clone http://perl5.git.perl.org/perl.git perl
.Ve
.SH "WORKING WITH THE REPOSITORY"
.IX Header "WORKING WITH THE REPOSITORY"
Once you have changed into the repository directory, you can inspect
it. After a clone the repository will contain a single local branch,
which will be the current branch as well, as indicated by the asterisk.
.PP
.Vb 2
\&  % git branch
\&  * blead
.Ve
.PP
Using the \-a switch to \f(CW\*(C`branch\*(C'\fR will also show the remote tracking
branches in the repository:
.PP
.Vb 5
\&  % git branch \-a
\&  * blead
\&    origin/HEAD
\&    origin/blead
\&  ...
.Ve
.PP
The branches that begin with \*(L"origin\*(R" correspond to the \*(L"git remote\*(R"
that you cloned from (which is named \*(L"origin\*(R"). Each branch on the
remote will be exactly tracked by these branches. You should \s-1NEVER\s0 do
work on these remote tracking branches. You only ever do work in a
local branch. Local branches can be configured to automerge (on pull)
from a designated remote tracking branch. This is the case with the
default branch \f(CW\*(C`blead\*(C'\fR which will be configured to merge from the
remote tracking branch \f(CW\*(C`origin/blead\*(C'\fR.
.PP
You can see recent commits:
.PP
.Vb 1
\&  % git log
.Ve
.PP
And pull new changes from the repository, and update your local
repository (must be clean first)
.PP
.Vb 1
\&  % git pull
.Ve
.PP
Assuming we are on the branch \f(CW\*(C`blead\*(C'\fR immediately after a pull, this
command would be more or less equivalent to:
.PP
.Vb 2
\&  % git fetch
\&  % git merge origin/blead
.Ve
.PP
In fact if you want to update your local repository without touching
your working directory you do:
.PP
.Vb 1
\&  % git fetch
.Ve
.PP
And if you want to update your remote-tracking branches for all defined
remotes simultaneously you can do
.PP
.Vb 1
\&  % git remote update
.Ve
.PP
Neither of these last two commands will update your working directory,
however both will update the remote-tracking branches in your
repository.
.PP
To make a local branch of a remote branch:
.PP
.Vb 1
\&  % git checkout \-b maint\-5.10 origin/maint\-5.10
.Ve
.PP
To switch back to blead:
.PP
.Vb 1
\&  % git checkout blead
.Ve
.SS "Finding out your status"
.IX Subsection "Finding out your status"
The most common git command you will use will probably be
.PP
.Vb 1
\&  % git status
.Ve
.PP
This command will produce as output a description of the current state
of the repository, including modified files and unignored untracked
files, and in addition it will show things like what files have been
staged for the next commit, and usually some useful information about
how to change things. For instance the following:
.PP
.Vb 10
\&  $ git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 1 commit.
\&  #
\&  # Changes to be committed:
\&  #   (use "git reset HEAD <file>..." to unstage)
\&  #
\&  #       modified:   pod/perlgit.pod
\&  #
\&  # Changed but not updated:
\&  #   (use "git add <file>..." to update what will be committed)
\&  #
\&  #       modified:   pod/perlgit.pod
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
.Ve
.PP
This shows that there were changes to this document staged for commit,
and that there were further changes in the working directory not yet
staged. It also shows that there was an untracked file in the working
directory, and as you can see shows how to change all of this. It also
shows that there is one commit on the working branch \f(CW\*(C`blead\*(C'\fR which has
not been pushed to the \f(CW\*(C`origin\*(C'\fR remote yet. \fB\s-1NOTE\s0\fR: that this output
is also what you see as a template if you do not provide a message to
\&\f(CW\*(C`git commit\*(C'\fR.
.SS "Patch workflow"
.IX Subsection "Patch workflow"
First, please read perlhack for details on hacking the Perl core.
That document covers many details on how to create a good patch.
.PP
If you already have a Perl repository, you should ensure that you're on
the \fIblead\fR branch, and your repository is up to date:
.PP
.Vb 2
\&  % git checkout blead
\&  % git pull
.Ve
.PP
It's preferable to patch against the latest blead version, since this
is where new development occurs for all changes other than critical bug
fixes. Critical bug fix patches should be made against the relevant
maint branches, or should be submitted with a note indicating all the
branches where the fix should be applied.
.PP
Now that we have everything up to date, we need to create a temporary
new branch for these changes and switch into it:
.PP
.Vb 1
\&  % git checkout \-b orange
.Ve
.PP
which is the short form of
.PP
.Vb 2
\&  % git branch orange
\&  % git checkout orange
.Ve
.PP
Creating a topic branch makes it easier for the maintainers to rebase
or merge back into the master blead for a more linear history. If you
don't work on a topic branch the maintainer has to manually cherry pick
your changes onto blead before they can be applied.
.PP
That'll get you scolded on perl5\-porters, so don't do that. Be Awesome.
.PP
Then make your changes. For example, if Leon Brocard changes his name
to Orange Brocard, we should change his name in the \s-1AUTHORS\s0 file:
.PP
.Vb 1
\&  % perl \-pi \-e \*(Aqs{Leon Brocard}{Orange Brocard}\*(Aq AUTHORS
.Ve
.PP
You can see what files are changed:
.PP
.Vb 7
\&  % git status
\&  # On branch orange
\&  # Changes to be committed:
\&  #   (use "git reset HEAD <file>..." to unstage)
\&  #
\&  #    modified:   AUTHORS
\&  #
.Ve
.PP
And you can see the changes:
.PP
.Vb 10
\&  % git diff
\&  diff \-\-git a/AUTHORS b/AUTHORS
\&  index 293dd70..722c93e 100644
\&  \-\-\- a/AUTHORS
\&  +++ b/AUTHORS
\&  @@ \-541,7 +541,7 @@    Lars Hecking                   <lhecking@nmrc.ucc.ie>
\&   Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
\&   Leif Huhn                      <leif@hale.dkstat.com>
\&   Len Johnson                    <lenjay@ibm.net>
\&  \-Leon Brocard                   <acme@astray.com>
\&  +Orange Brocard                 <acme@astray.com>
\&   Les Peters                     <lpeters@aol.net>
\&   Lesley Binks                   <lesley.binks@gmail.com>
\&   Lincoln D. Stein               <lstein@cshl.org>
.Ve
.PP
Now commit your change locally:
.PP
.Vb 3
\&  % git commit \-a \-m \*(AqRename Leon Brocard to Orange Brocard\*(Aq
\&  Created commit 6196c1d: Rename Leon Brocard to Orange Brocard
\&   1 files changed, 1 insertions(+), 1 deletions(\-)
.Ve
.PP
The \f(CW\*(C`\-a\*(C'\fR option is used to include all files that git tracks that you
have changed. If at this time, you only want to commit some of the
files you have worked on, you can omit the \f(CW\*(C`\-a\*(C'\fR and use the command
\&\f(CW\*(C`git\ add\ \f(CIFILE\ ...\f(CW\*(C'\fR before doing the commit. \f(CW\*(C`git\ add\ \-\-interactive\*(C'\fR allows you to even just commit portions of files
instead of all the changes in them.
.PP
The \f(CW\*(C`\-m\*(C'\fR option is used to specify the commit message. If you omit it,
git will open a text editor for you to compose the message
interactively. This is useful when the changes are more complex than
the sample given here, and, depending on the editor, to know that the
first line of the commit message doesn't exceed the 50 character legal
maximum.
.PP
Once you've finished writing your commit message and exited your
editor, git will write your change to disk and tell you something like
this:
.PP
.Vb 2
\&  Created commit daf8e63: explain git status and stuff about remotes
\&   1 files changed, 83 insertions(+), 3 deletions(\-)
.Ve
.PP
If you re-run \f(CW\*(C`git status\*(C'\fR, you should see something like this:
.PP
.Vb 9
\&  % git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 2 commits.
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
\&  nothing added to commit but untracked files present (use "git add" to track)
.Ve
.PP
When in doubt, before you do anything else, check your status and read
it carefully, many questions are answered directly by the git status
output.
.PP
You can examine your last commit with:
.PP
.Vb 1
\&  % git show HEAD
.Ve
.PP
and if you are not happy with either the description or the patch
itself you can fix it up by editing the files once more and then issue:
.PP
.Vb 1
\&  % git commit \-a \-\-amend
.Ve
.PP
Now you should create a patch file for all your local changes:
.PP
.Vb 2
\&  % git format\-patch \-M origin..
\&  0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
.Ve
.PP
You should now send an email to
perlbug@perl.org <mailto:perlbug@perl.org> with a description of your
changes, and include this patch file as an attachment. In addition to
being tracked by \s-1RT,\s0 mail to perlbug will automatically be forwarded to
perl5\-porters (with manual moderation, so please be patient). You
should only send patches to
perl5\-porters@perl.org <mailto:perl5-porters@perl.org> directly if the
patch is not ready to be applied, but intended for discussion.
.PP
See the next section for how to configure and use git to send these
emails for you.
.PP
If you want to delete your temporary branch, you may do so with:
.PP
.Vb 6
\&  % git checkout blead
\&  % git branch \-d orange
\&  error: The branch \*(Aqorange\*(Aq is not an ancestor of your current HEAD.
\&  If you are sure you want to delete it, run \*(Aqgit branch \-D orange\*(Aq.
\&  % git branch \-D orange
\&  Deleted branch orange.
.Ve
.SS "Committing your changes"
.IX Subsection "Committing your changes"
Assuming that you'd like to commit all the changes you've made as a
single atomic unit, run this command:
.PP
.Vb 1
\&   % git commit \-a
.Ve
.PP
(That \f(CW\*(C`\-a\*(C'\fR tells git to add every file you've changed to this commit.
New files aren't automatically added to your commit when you use
\&\f(CW\*(C`commit \-a\*(C'\fR If you want to add files or to commit some, but not all of
your changes, have a look at the documentation for \f(CW\*(C`git add\*(C'\fR.)
.PP
Git will start up your favorite text editor, so that you can craft a
commit message for your change. See \*(L"Commit message\*(R" in perlhack for more
information about what makes a good commit message.
.PP
Once you've finished writing your commit message and exited your
editor, git will write your change to disk and tell you something like
this:
.PP
.Vb 2
\&  Created commit daf8e63: explain git status and stuff about remotes
\&   1 files changed, 83 insertions(+), 3 deletions(\-)
.Ve
.PP
If you re-run \f(CW\*(C`git status\*(C'\fR, you should see something like this:
.PP
.Vb 9
\&  % git status
\&  # On branch blead
\&  # Your branch is ahead of \*(Aqorigin/blead\*(Aq by 2 commits.
\&  #
\&  # Untracked files:
\&  #   (use "git add <file>..." to include in what will be committed)
\&  #
\&  #       deliberate.untracked
\&  nothing added to commit but untracked files present (use "git add" to track)
.Ve
.PP
When in doubt, before you do anything else, check your status and read
it carefully, many questions are answered directly by the git status
output.
.SS "Using git to send patch emails"
.IX Subsection "Using git to send patch emails"
Please read perlhack first in order to figure out where your patches
should be sent.
.PP
In your ~/git/perl repository, set the destination email to perl's bug
tracker:
.PP
.Vb 1
\&  $ git config sendemail.to perlbug@perl.org
.Ve
.PP
Or maybe perl5\-porters:
.PP
.Vb 1
\&  $ git config sendemail.to perl5\-porters@perl.org
.Ve
.PP
Then you can use git directly to send your patch emails:
.PP
.Vb 1
\&  $ git send\-email 0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
.Ve
.PP
You may need to set some configuration variables for your particular
email service provider. For example, to set your global git config to
send email via a gmail account:
.PP
.Vb 3
\&  $ git config \-\-global sendemail.smtpserver smtp.gmail.com
\&  $ git config \-\-global sendemail.smtpssl 1
\&  $ git config \-\-global sendemail.smtpuser YOURUSERNAME@gmail.com
.Ve
.PP
With this configuration, you will be prompted for your gmail password
when you run 'git send\-email'. You can also configure
\&\f(CW\*(C`sendemail.smtppass\*(C'\fR with your password if you don't care about having
your password in the .gitconfig file.
.SS "A note on derived files"
.IX Subsection "A note on derived files"
Be aware that many files in the distribution are derivative\*(--avoid
patching them, because git won't see the changes to them, and the build
process will overwrite them. Patch the originals instead. Most
utilities (like perldoc) are in this category, i.e. patch
\&\fIutils/perldoc.PL\fR rather than \fIutils/perldoc\fR. Similarly, don't
create patches for files under \f(CW$src_root\fR/ext from their copies found in
\&\f(CW$install_root\fR/lib. If you are unsure about the proper location of a
file that may have gotten copied while building the source
distribution, consult the \f(CW\*(C`MANIFEST\*(C'\fR.
.SS "Cleaning a working directory"
.IX Subsection "Cleaning a working directory"
The command \f(CW\*(C`git clean\*(C'\fR can with varying arguments be used as a
replacement for \f(CW\*(C`make clean\*(C'\fR.
.PP
To reset your working directory to a pristine condition you can do:
.PP
.Vb 1
\&  % git clean \-dxf
.Ve
.PP
However, be aware this will delete \s-1ALL\s0 untracked content. You can use
.PP
.Vb 1
\&  % git clean \-Xf
.Ve
.PP
to remove all ignored untracked files, such as build and test
byproduct, but leave any  manually created files alone.
.PP
If you only want to cancel some uncommitted edits, you can use \f(CW\*(C`git
checkout\*(C'\fR and give it a list of files to be reverted, or \f(CW\*(C`git checkout
\&\-f\*(C'\fR to revert them all.
.PP
If you want to cancel one or several commits, you can use \f(CW\*(C`git reset\*(C'\fR.
.SS "Bisecting"
.IX Subsection "Bisecting"
\&\f(CW\*(C`git\*(C'\fR provides a built-in way to determine which commit should be blamed
for introducing a given bug. \f(CW\*(C`git bisect\*(C'\fR performs a binary search of
history to locate the first failing commit. It is fast, powerful and
flexible, but requires some setup and to automate the process an auxiliary
shell script is needed.
.PP
The core provides a wrapper program, \fIPorting/bisect.pl\fR, which attempts to
simplify as much as possible, making bisecting as simple as running a Perl
one-liner. For example, if you want to know when this became an error:
.PP
.Vb 1
\&    perl \-e \*(Aqmy $a := 2\*(Aq
.Ve
.PP
you simply run this:
.PP
.Vb 1
\&    .../Porting/bisect.pl \-e \*(Aqmy $a := 2;\*(Aq
.Ve
.PP
Using \f(CW\*(C`bisect.pl\*(C'\fR, with one command (and no other files) it's easy to find
out
.IP "\(bu" 4
Which commit caused this example code to break?
.IP "\(bu" 4
Which commit caused this example code to start working?
.IP "\(bu" 4
Which commit added the first file to match this regex?
.IP "\(bu" 4
Which commit removed the last file to match this regex?
.PP
usually without needing to know which versions of perl to use as start and
end revisions, as \fIbisect.pl\fR automatically searches to find the earliest
stable version for which the test case passes. Run
\&\f(CW\*(C`Porting/bisect.pl \-\-help\*(C'\fR for the full documentation, including how to
set the \f(CW\*(C`Configure\*(C'\fR and build time options.
.PP
If you require more flexibility than \fIPorting/bisect.pl\fR has to offer, you'll
need to run \f(CW\*(C`git bisect\*(C'\fR yourself. It's most useful to use \f(CW\*(C`git bisect run\*(C'\fR
to automate the building and testing of perl revisions. For this you'll need
a shell script for \f(CW\*(C`git\*(C'\fR to call to test a particular revision. An example
script is \fIPorting/bisect\-example.sh\fR, which you should copy \fBoutside\fR of
the repository, as the bisect process will reset the state to a clean checkout
as it runs. The instructions below assume that you copied it as \fI~/run\fR and
then edited it as appropriate.
.PP
You first enter in bisect mode with:
.PP
.Vb 1
\&  % git bisect start
.Ve
.PP
For example, if the bug is present on \f(CW\*(C`HEAD\*(C'\fR but wasn't in 5.10.0,
\&\f(CW\*(C`git\*(C'\fR will learn about this when you enter:
.PP
.Vb 3
\&  % git bisect bad
\&  % git bisect good perl\-5.10.0
\&  Bisecting: 853 revisions left to test after this
.Ve
.PP
This results in checking out the median commit between \f(CW\*(C`HEAD\*(C'\fR and
\&\f(CW\*(C`perl\-5.10.0\*(C'\fR. You can then run the bisecting process with:
.PP
.Vb 1
\&  % git bisect run ~/run
.Ve
.PP
When the first bad commit is isolated, \f(CW\*(C`git bisect\*(C'\fR will tell you so:
.PP
.Vb 4
\&  ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5 is first bad commit
\&  commit ca4cfd28534303b82a216cfe83a1c80cbc3b9dc5
\&  Author: Dave Mitchell <davem@fdisolutions.com>
\&  Date:   Sat Feb 9 14:56:23 2008 +0000
\&
\&      [perl #49472] Attributes + Unknown Error
\&      ...
\&
\&  bisect run success
.Ve
.PP
You can peek into the bisecting process with \f(CW\*(C`git bisect log\*(C'\fR and
\&\f(CW\*(C`git bisect visualize\*(C'\fR. \f(CW\*(C`git bisect reset\*(C'\fR will get you out of bisect
mode.
.PP
Please note that the first \f(CW\*(C`good\*(C'\fR state must be an ancestor of the
first \f(CW\*(C`bad\*(C'\fR state. If you want to search for the commit that \fIsolved\fR
some bug, you have to negate your test case (i.e. exit with \f(CW1\fR if \s-1OK\s0
and \f(CW0\fR if not) and still mark the lower bound as \f(CW\*(C`good\*(C'\fR and the
upper as \f(CW\*(C`bad\*(C'\fR. The \*(L"first bad commit\*(R" has then to be understood as
the \*(L"first commit where the bug is solved\*(R".
.PP
\&\f(CW\*(C`git help bisect\*(C'\fR has much more information on how you can tweak your
binary searches.
.SS "Topic branches and rewriting history"
.IX Subsection "Topic branches and rewriting history"
Individual committers should create topic branches under
\&\fByourname\fR/\fBsome_descriptive_name\fR. Other committers should check
with a topic branch's creator before making any change to it.
.PP
The simplest way to create a remote topic branch that works on all
versions of git is to push the current head as a new branch on the
remote, then check it out locally:
.PP
.Vb 3
\&  $ branch="$yourname/$some_descriptive_name"
\&  $ git push origin HEAD:$branch
\&  $ git checkout \-b $branch origin/$branch
.Ve
.PP
Users of git 1.7 or newer can do it in a more obvious manner:
.PP
.Vb 3
\&  $ branch="$yourname/$some_descriptive_name"
\&  $ git checkout \-b $branch
\&  $ git push origin \-u $branch
.Ve
.PP
If you are not the creator of \fByourname\fR/\fBsome_descriptive_name\fR, you
might sometimes find that the original author has edited the branch's
history. There are lots of good reasons for this. Sometimes, an author
might simply be rebasing the branch onto a newer source point.
Sometimes, an author might have found an error in an early commit which
they wanted to fix before merging the branch to blead.
.PP
Currently the master repository is configured to forbid
non-fast-forward merges. This means that the branches within can not be
rebased and pushed as a single step.
.PP
The only way you will ever be allowed to rebase or modify the history
of a pushed branch is to delete it and push it as a new branch under
the same name. Please think carefully about doing this. It may be
better to sequentially rename your branches so that it is easier for
others working with you to cherry-pick their local changes onto the new
version. (\s-1XXX:\s0 needs explanation).
.PP
If you want to rebase a personal topic branch, you will have to delete
your existing topic branch and push as a new version of it. You can do
this via the following formula (see the explanation about \f(CW\*(C`refspec\*(C'\fR's
in the git push documentation for details) after you have rebased your
branch:
.PP
.Vb 4
\&   # first rebase
\&   $ git checkout $user/$topic
\&   $ git fetch
\&   $ git rebase origin/blead
\&
\&   # then "delete\-and\-push"
\&   $ git push origin :$user/$topic
\&   $ git push origin $user/$topic
.Ve
.PP
\&\fB\s-1NOTE:\s0\fR it is forbidden at the repository level to delete any of the
\&\*(L"primary\*(R" branches. That is any branch matching
\&\f(CW\*(C`m!^(blead|maint|perl)!\*(C'\fR. Any attempt to do so will result in git
producing an error like this:
.PP
.Vb 7
\&    $ git push origin :blead
\&    *** It is forbidden to delete blead/maint branches in this repository
\&    error: hooks/update exited with error code 1
\&    error: hook declined to update refs/heads/blead
\&    To ssh://perl5.git.perl.org/perl
\&     ! [remote rejected] blead (hook declined)
\&     error: failed to push some refs to \*(Aqssh://perl5.git.perl.org/perl\*(Aq
.Ve
.PP
As a matter of policy we do \fBnot\fR edit the history of the blead and
maint\-* branches. If a typo (or worse) sneaks into a commit to blead or
maint\-*, we'll fix it in another commit. The only types of updates
allowed on these branches are \*(L"fast-forward's\*(R", where all history is
preserved.
.PP
Annotated tags in the canonical perl.git repository will never be
deleted or modified. Think long and hard about whether you want to push
a local tag to perl.git before doing so. (Pushing unannotated tags is
not allowed.)
.SS "Grafts"
.IX Subsection "Grafts"
The perl history contains one mistake which was not caught in the
conversion: a merge was recorded in the history between blead and
maint\-5.10 where no merge actually occurred. Due to the nature of git,
this is now impossible to fix in the public repository. You can remove
this mis-merge locally by adding the following line to your
\&\f(CW\*(C`.git/info/grafts\*(C'\fR file:
.PP
.Vb 1
\&  296f12bbbbaa06de9be9d09d3dcf8f4528898a49 434946e0cb7a32589ed92d18008aaa1d88515930
.Ve
.PP
It is particularly important to have this graft line if any bisecting
is done in the area of the \*(L"merge\*(R" in question.
.SH "WRITE ACCESS TO THE GIT REPOSITORY"
.IX Header "WRITE ACCESS TO THE GIT REPOSITORY"
Once you have write access, you will need to modify the \s-1URL\s0 for the
origin remote to enable pushing. Edit \fI.git/config\fR with the
\&\fIgit\-config\fR\|(1) command:
.PP
.Vb 1
\&  % git config remote.origin.url ssh://perl5.git.perl.org/perl.git
.Ve
.PP
You can also set up your user name and e\-mail address. Most people do
this once globally in their \fI~/.gitconfig\fR by doing something like:
.PP
.Vb 2
\&  % git config \-\-global user.name "\*(Aevar Arnfjo\*:r\*(d- Bjarmason"
\&  % git config \-\-global user.email avarab@gmail.com
.Ve
.PP
However, if you'd like to override that just for perl, 
execute something like the following in \fIperl\fR:
.PP
.Vb 1
\&  % git config user.email avar@cpan.org
.Ve
.PP
It is also possible to keep \f(CW\*(C`origin\*(C'\fR as a git remote, and add a new
remote for ssh access:
.PP
.Vb 1
\&  % git remote add camel perl5.git.perl.org:/perl.git
.Ve
.PP
This allows you to update your local repository by pulling from
\&\f(CW\*(C`origin\*(C'\fR, which is faster and doesn't require you to authenticate, and
to push your changes back with the \f(CW\*(C`camel\*(C'\fR remote:
.PP
.Vb 2
\&  % git fetch camel
\&  % git push camel
.Ve
.PP
The \f(CW\*(C`fetch\*(C'\fR command just updates the \f(CW\*(C`camel\*(C'\fR refs, as the objects
themselves should have been fetched when pulling from \f(CW\*(C`origin\*(C'\fR.
.SS "Accepting a patch"
.IX Subsection "Accepting a patch"
If you have received a patch file generated using the above section,
you should try out the patch.
.PP
First we need to create a temporary new branch for these changes and
switch into it:
.PP
.Vb 1
\&  % git checkout \-b experimental
.Ve
.PP
Patches that were formatted by \f(CW\*(C`git format\-patch\*(C'\fR are applied with
\&\f(CW\*(C`git am\*(C'\fR:
.PP
.Vb 2
\&  % git am 0001\-Rename\-Leon\-Brocard\-to\-Orange\-Brocard.patch
\&  Applying Rename Leon Brocard to Orange Brocard
.Ve
.PP
If just a raw diff is provided, it is also possible use this two-step
process:
.PP
.Vb 2
\&  % git apply bugfix.diff
\&  % git commit \-a \-m "Some fixing" \-\-author="That Guy <that.guy@internets.com>"
.Ve
.PP
Now we can inspect the change:
.PP
.Vb 4
\&  % git show HEAD
\&  commit b1b3dab48344cff6de4087efca3dbd63548ab5e2
\&  Author: Leon Brocard <acme@astray.com>
\&  Date:   Fri Dec 19 17:02:59 2008 +0000
\&
\&    Rename Leon Brocard to Orange Brocard
\&
\&  diff \-\-git a/AUTHORS b/AUTHORS
\&  index 293dd70..722c93e 100644
\&  \-\-\- a/AUTHORS
\&  +++ b/AUTHORS
\&  @@ \-541,7 +541,7 @@ Lars Hecking                        <lhecking@nmrc.ucc.ie>
\&   Laszlo Molnar                  <laszlo.molnar@eth.ericsson.se>
\&   Leif Huhn                      <leif@hale.dkstat.com>
\&   Len Johnson                    <lenjay@ibm.net>
\&  \-Leon Brocard                   <acme@astray.com>
\&  +Orange Brocard                 <acme@astray.com>
\&   Les Peters                     <lpeters@aol.net>
\&   Lesley Binks                   <lesley.binks@gmail.com>
\&   Lincoln D. Stein               <lstein@cshl.org>
.Ve
.PP
If you are a committer to Perl and you think the patch is good, you can
then merge it into blead then push it out to the main repository:
.PP
.Vb 3
\&  % git checkout blead
\&  % git merge experimental
\&  % git push origin blead
.Ve
.PP
If you want to delete your temporary branch, you may do so with:
.PP
.Vb 6
\&  % git checkout blead
\&  % git branch \-d experimental
\&  error: The branch \*(Aqexperimental\*(Aq is not an ancestor of your current HEAD.
\&  If you are sure you want to delete it, run \*(Aqgit branch \-D experimental\*(Aq.
\&  % git branch \-D experimental
\&  Deleted branch experimental.
.Ve
.SS "Committing to blead"
.IX Subsection "Committing to blead"
The 'blead' branch will become the next production release of Perl.
.PP
Before pushing \fIany\fR local change to blead, it's incredibly important
that you do a few things, lest other committers come after you with
pitchforks and torches:
.IP "\(bu" 4
Make sure you have a good commit message. See \*(L"Commit
message\*(R" in perlhack for details.
.IP "\(bu" 4
Run the test suite. You might not think that one typo fix would break a
test file. You'd be wrong. Here's an example of where not running the
suite caused problems. A patch was submitted that added a couple of
tests to an existing .t. It couldn't possibly affect anything else, so
no need to test beyond the single affected .t, right?  But, the
submitter's email address had changed since the last of their
submissions, and this caused other tests to fail. Running the test
target given in the next item would have caught this problem.
.IP "\(bu" 4
If you don't run the full test suite, at least \f(CW\*(C`make test_porting\*(C'\fR.
This will run basic sanity checks. To see which sanity checks, have a
look in \fIt/porting\fR.
.IP "\(bu" 4
If you make any changes that affect miniperl or core routines that have
different code paths for miniperl, be sure to run \f(CW\*(C`make minitest\*(C'\fR.
This will catch problems that even the full test suite will not catch
because it runs a subset of tests under miniperl rather than perl.
.SS "On merging and rebasing"
.IX Subsection "On merging and rebasing"
Simple, one-off commits pushed to the 'blead' branch should be simple
commits that apply cleanly.  In other words, you should make sure your
work is committed against the current position of blead, so that you can
push back to the master repository without merging.
.PP
Sometimes, blead will move while you're building or testing your
changes.  When this happens, your push will be rejected with a message
like this:
.PP
.Vb 6
\&  To ssh://perl5.git.perl.org/perl.git
\&   ! [rejected]        blead \-> blead (non\-fast\-forward)
\&  error: failed to push some refs to \*(Aqssh://perl5.git.perl.org/perl.git\*(Aq
\&  To prevent you from losing history, non\-fast\-forward updates were rejected
\&  Merge the remote changes (e.g. \*(Aqgit pull\*(Aq) before pushing again.  See the
\&  \*(AqNote about fast\-forwards\*(Aq section of \*(Aqgit push \-\-help\*(Aq for details.
.Ve
.PP
When this happens, you can just \fIrebase\fR your work against the new
position of blead, like this (assuming your remote for the master
repository is \*(L"p5p\*(R"):
.PP
.Vb 2
\&  $ git fetch p5p
\&  $ git rebase p5p/blead
.Ve
.PP
You will see your commits being re-applied, and you will then be able to
push safely.  More information about rebasing can be found in the
documentation for the \fIgit\-rebase\fR\|(1) command.
.PP
For larger sets of commits that only make sense together, or that would
benefit from a summary of the set's purpose, you should use a merge
commit.  You should perform your work on a topic branch, which you should regularly rebase
against blead to ensure that your code is not broken by blead moving.
When you have finished your work, please perform a final rebase and
test.  Linear history is something that gets lost with every
commit on blead, but a final rebase makes the history linear
again, making it easier for future maintainers to see what has
happened.  Rebase as follows (assuming your work was on the
branch \f(CW\*(C`committer/somework\*(C'\fR):
.PP
.Vb 2
\&  $ git checkout committer/somework
\&  $ git rebase blead
.Ve
.PP
Then you can merge it into master like this:
.PP
.Vb 3
\&  $ git checkout blead
\&  $ git merge \-\-no\-ff \-\-no\-commit committer/somework
\&  $ git commit \-a
.Ve
.PP
The switches above deserve explanation.  \f(CW\*(C`\-\-no\-ff\*(C'\fR indicates that even
if all your work can be applied linearly against blead, a merge commit
should still be prepared.  This ensures that all your work will be shown
as a side branch, with all its commits merged into the mainstream blead
by the merge commit.
.PP
\&\f(CW\*(C`\-\-no\-commit\*(C'\fR means that the merge commit will be \fIprepared\fR but not
\&\fIcommitted\fR.  The commit is then actually performed when you run the
next command, which will bring up your editor to describe the commit.
Without \f(CW\*(C`\-\-no\-commit\*(C'\fR, the commit would be made with nearly no useful
message, which would greatly diminish the value of the merge commit as a
placeholder for the work's description.
.PP
When describing the merge commit, explain the purpose of the branch, and
keep in mind that this description will probably be used by the
eventual release engineer when reviewing the next perldelta document.
.SS "Committing to maintenance versions"
.IX Subsection "Committing to maintenance versions"
Maintenance versions should only be altered to add critical bug fixes,
see perlpolicy.
.PP
To commit to a maintenance version of perl, you need to create a local
tracking branch:
.PP
.Vb 1
\&  % git checkout \-\-track \-b maint\-5.005 origin/maint\-5.005
.Ve
.PP
This creates a local branch named \f(CW\*(C`maint\-5.005\*(C'\fR, which tracks the
remote branch \f(CW\*(C`origin/maint\-5.005\*(C'\fR. Then you can pull, commit, merge
and push as before.
.PP
You can also cherry-pick commits from blead and another branch, by
using the \f(CW\*(C`git cherry\-pick\*(C'\fR command. It is recommended to use the
\&\fB\-x\fR option to \f(CW\*(C`git cherry\-pick\*(C'\fR in order to record the \s-1SHA1\s0 of the
original commit in the new commit message.
.PP
Before pushing any change to a maint version, make sure you've
satisfied the steps in \*(L"Committing to blead\*(R" above.
.SS "Merging from a branch via GitHub"
.IX Subsection "Merging from a branch via GitHub"
While we don't encourage the submission of patches via GitHub, that
will still happen. Here is a guide to merging patches from a GitHub
repository.
.PP
.Vb 2
\&  % git remote add avar git://github.com/avar/perl.git
\&  % git fetch avar
.Ve
.PP
Now you can see the differences between the branch and blead:
.PP
.Vb 1
\&  % git diff avar/orange
.Ve
.PP
And you can see the commits:
.PP
.Vb 1
\&  % git log avar/orange
.Ve
.PP
If you approve of a specific commit, you can cherry pick it:
.PP
.Vb 1
\&  % git cherry\-pick 0c24b290ae02b2ab3304f51d5e11e85eb3659eae
.Ve
.PP
Or you could just merge the whole branch if you like it all:
.PP
.Vb 1
\&  % git merge avar/orange
.Ve
.PP
And then push back to the repository:
.PP
.Vb 1
\&  % git push origin blead
.Ve
.SS "Using a smoke-me branch to test changes"
.IX Subsection "Using a smoke-me branch to test changes"
Sometimes a change affects code paths which you cannot test on the OSes
which are directly available to you and it would be wise to have users
on other OSes test the change before you commit it to blead.
.PP
Fortunately, there is a way to get your change smoke-tested on various
OSes: push it to a \*(L"smoke-me\*(R" branch and wait for certain automated
smoke-testers to report the results from their OSes.
.PP
The procedure for doing this is roughly as follows (using the example of
of tonyc's smoke-me branch called win32stat):
.PP
First, make a local branch and switch to it:
.PP
.Vb 1
\&  % git checkout \-b win32stat
.Ve
.PP
Make some changes, build perl and test your changes, then commit them to
your local branch. Then push your local branch to a remote smoke-me
branch:
.PP
.Vb 1
\&  % git push origin win32stat:smoke\-me/tonyc/win32stat
.Ve
.PP
Now you can switch back to blead locally:
.PP
.Vb 1
\&  % git checkout blead
.Ve
.PP
and continue working on other things while you wait a day or two,
keeping an eye on the results reported for your smoke-me branch at
<http://perl.develop\-help.com/?b=smoke\-me/tonyc/win32state>.
.PP
If all is well then update your blead branch:
.PP
.Vb 1
\&  % git pull
.Ve
.PP
then checkout your smoke-me branch once more and rebase it on blead:
.PP
.Vb 1
\&  % git rebase blead win32stat
.Ve
.PP
Now switch back to blead and merge your smoke-me branch into it:
.PP
.Vb 2
\&  % git checkout blead
\&  % git merge win32stat
.Ve
.PP
As described earlier, if there are many changes on your smoke-me branch
then you should prepare a merge commit in which to give an overview of
those changes by using the following command instead of the last
command above:
.PP
.Vb 1
\&  % git merge win32stat \-\-no\-ff \-\-no\-commit
.Ve
.PP
You should now build perl and test your (merged) changes one last time
(ideally run the whole test suite, but failing that at least run the
\&\fIt/porting/*.t\fR tests) before pushing your changes as usual:
.PP
.Vb 1
\&  % git push origin blead
.Ve
.PP
Finally, you should then delete the remote smoke-me branch:
.PP
.Vb 1
\&  % git push origin :smoke\-me/tonyc/win32stat
.Ve
.PP
(which is likely to produce a warning like this, which can be ignored:
.PP
.Vb 2
\&  remote: fatal: ambiguous argument \*(Aqrefs/heads/smoke\-me/tonyc/win32stat\*(Aq: unknown revision or path not in the working tree.
\&  remote: Use \*(Aq\-\-\*(Aq to separate paths from revisions
.Ve
.PP
) and then delete your local branch:
.PP
.Vb 1
\&  % git branch \-d win32stat
.Ve
.SS "A note on camel and dromedary"
.IX Subsection "A note on camel and dromedary"
The committers have \s-1SSH\s0 access to the two servers that serve
\&\f(CW\*(C`perl5.git.perl.org\*(C'\fR. One is \f(CW\*(C`perl5.git.perl.org\*(C'\fR itself (\fIcamel\fR),
which is the 'master' repository. The second one is
\&\f(CW\*(C`users.perl5.git.perl.org\*(C'\fR (\fIdromedary\fR), which can be used for
general testing and development. Dromedary syncs the git tree from
camel every few minutes, you should not push there. Both machines also
have a full \s-1CPAN\s0 mirror in /srv/CPAN, please use this. To share files
with the general public, dromedary serves your ~/public_html/ as
\&\f(CW\*(C`http://users.perl5.git.perl.org/~yourlogin/\*(C'\fR
.PP
These hosts have fairly strict firewalls to the outside. Outgoing, only
rsync, ssh and git are allowed. For http and ftp, you can use
http://webproxy:3128 as proxy. Incoming, the firewall tries to detect
attacks and blocks \s-1IP\s0 addresses with suspicious activity. This
sometimes (but very rarely) has false positives and you might get
blocked. The quickest way to get unblocked is to notify the admins.
.PP
These two boxes are owned, hosted, and operated by booking.com. You can
reach the sysadmins in #p5p on irc.perl.org or via mail to
\&\f(CW\*(C`perl5\-porters@perl.org\*(C'\fR.
osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlglossary.1                               0100644 0001750 0001750 00000500462 12566207440 023473  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGLOSSARY 1"
.TH PERLGLOSSARY 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlglossary \- Perl Glossary
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A glossary of terms (technical and otherwise) used in the Perl
documentation, derived from the Glossary of \fIProgramming
Perl\fR, Fourth Edition.  Words or phrases in bold are defined elsewhere in
this glossary.
.PP
Other useful sources include the Unicode Glossary <http://unicode.org/glossary/>,
the Free On-Line Dictionary of Computing <http://foldoc.org/>,
the Jargon File <http://catb.org/~esr/jargon/>,
and Wikipedia <http://www.wikipedia.org/>.
.SS "A"
.IX Subsection "A"
.IP "accessor methods" 4
.IX Item "accessor methods"
A \fBmethod\fR used to
indirectly inspect or update an \fBobject\fRXs state (its \fBinstance
variables\fR).
.IX Xref "accessor methods, defined methods, accessor"
.IP "actual arguments" 4
.IX Item "actual arguments"
The \fBscalar values\fR that you supply
to a \fBfunction\fR or \fBsubroutine\fR when you call it. For instance, when you
call \f(CW\*(C`power("puff")\*(C'\fR, the string \f(CW"puff"\fR is the actual argument. See also
\&\fBargument\fR and \fBformal arguments\fR.
.IX Xref "actual arguments arguments, actual"
.IP "address operator" 4
.IX Item "address operator"
Some languages work directly with the memory addresses of
values, but this can be like playing with fire. Perl provides a set of
asbestos gloves for handling all memory management. The closest to an
address operator in Perl is the backslash operator, but it gives you a
\&\fBhard reference\fR, which is much safer than a memory address.
.IX Xref "address operator"
.IP "algorithm" 4
.IX Item "algorithm"
A well-defined sequence of steps, explained clearly
enough that even a computer could do them.
.IX Xref "algorithms (term)"
.IP "alias" 4
.IX Item "alias"
A nickname for something, which behaves in all ways as
though youXd used the original name instead of the nickname. Temporary
aliases are implicitly created in the loop variable for \f(CW\*(C`foreach\*(C'\fR loops, in
the \f(CW$_\fR variable for \f(CW\*(C`map\*(C'\fR or \f(CW\*(C`grep\*(C'\fR operators, in \f(CW$a\fR and \f(CW$b\fR
during \f(CW\*(C`sort\*(C'\fRXs comparison function, and in each element of \f(CW@_\fR for the
\&\fBactual arguments\fR of a subroutine call. Permanent aliases are explicitly
created in \fBpackages\fR by \fBimporting\fR symbols or by assignment to
\&\fBtypeglobs\fR. Lexically scoped aliases for package variables are explicitly
created by the \f(CW\*(C`our\*(C'\fR declaration.
.IX Xref "aliases, defined"
.IP "alphabetic" 4
.IX Item "alphabetic"
The sort of characters we put into words. In Unicode, this
is all letters including all ideographs and certain diacritics, letter
numbers like Roman numerals, and various combining marks.
.IX Xref "alphabetic sort"
.IP "alternatives" 4
.IX Item "alternatives"
A list of possible choices from which you may
select only one, as in, XWould you like door A, B, or C?X Alternatives in
regular expressions are separated with a single vertical bar: \f(CW\*(C`|\*(C'\fR.
Alternatives in normal Perl expressions are separated with a double vertical
bar: \f(CW\*(C`||\*(C'\fR. Logical alternatives in \fBBoolean\fR expressions are separated
with either \f(CW\*(C`||\*(C'\fR or \f(CW\*(C`or\*(C'\fR.
.IX Xref "alternative characters"
.IP "anonymous" 4
.IX Item "anonymous"
Used to describe a \fBreferent\fR
that is not directly accessible through a named \fBvariable\fR. Such a referent
must be indirectly accessible through at least one \fBhard reference\fR. When
the last hard reference goes away, the anonymous referent is destroyed
without pity.
.IX Xref "anonymous referents referents, anonymous"
.IP "application" 4
.IX Item "application"
A bigger, fancier sort of \fBprogram\fR with a fancier
name so people donXt realize they are using a program.
.IX Xref "applications (term)"
.IP "architecture" 4
.IX Item "architecture"
The kind of computer youXre working on, where one Xkind of
computerX means all those computers sharing a compatible machine language.
Since Perl programs are (typically) simple text files, not executable
images, a Perl program is much less sensitive to the architecture itXs
running on than programs in other languages, such as C, that are \fBcompiled\fR
into machine code. See also \fBplatform\fR and \fBoperating system\fR.
.IX Xref "architecture"
.IP "argument" 4
.IX Item "argument"
A piece of data supplied to a \fBprogram\fR,
\&\fBsubroutine\fR, \fBfunction\fR, or \fBmethod\fR to tell it what itXs supposed to
do. Also called a XparameterX.
.IX Xref "arguments, defined"
.IP "\s-1ARGV\s0" 4
.IX Item "ARGV"
The name of the array containing the \fBargument\fR \fBvector\fR
from the command line. If you use the empty \f(CW\*(C`<>\*(C'\fR operator, \f(CW\*(C`ARGV\*(C'\fR
is the name of both the \fBfilehandle\fR used to traverse the arguments and the
\&\fBscalar\fR containing the name of the current input file.
.IX Xref "ARGV filehandle"
.IP "arithmetical operator" 4
.IX Item "arithmetical operator"
A \fBsymbol\fR such as \f(CW\*(C`+\*(C'\fR or \f(CW\*(C`/\*(C'\fR that tells
Perl to do the arithmetic you were supposed to learn in grade school.
.IX Xref "arithmetic operators, about"
.IP "array" 4
.IX Item "array"
An ordered sequence of \fBvalues\fR, stored such that you can
easily access any of the values using an \fIinteger subscript\fR that specifies
the valueXs \fBoffset\fR in the sequence.
.IX Xref "arrays, defined"
.IP "array context" 4
.IX Item "array context"
An archaic expression for what is more correctly referred to
as \fBlist context\fR.
.IX Xref "array context"
.IP "Artistic License" 4
.IX Item "Artistic License"
The open source license that Larry Wall
created for Perl, maximizing PerlXs usefulness, availability, and
modifiability. The current version is 2. (<http://www.opensource.org/licenses/artistic\-license.php>).
.IX Xref "Artistic License Wall, Larry"
.IP "\s-1ASCII\s0" 4
.IX Item "ASCII"
The American Standard Code for
Information Interchange (a 7\-bit character set adequate only for poorly
representing English text). Often used loosely to describe the lowest 128
values of the various \s-1ISO\-8859\-X\s0 character sets, a bunch of mutually
incompatible 8\-bit codes best described as half \s-1ASCII.\s0 See also \fBUnicode\fR.
.IX Xref "ASCII (American Standard Code for Information Interchange) American Standard Code for Information Interchange (ASCII)"
.IP "assertion" 4
.IX Item "assertion"
A component of a \fBregular expression\fR that must be true for the pattern to
match but does not necessarily match any characters itself. Often used
specifically to mean a \fBzero-width\fR assertion.
.IX Xref "assertions (in regexes), defined regular expressions, assertions in"
.IP "assignment" 4
.IX Item "assignment"
An \fBoperator\fR whose assigned mission in life is to
change the value of a \fBvariable\fR.
.IX Xref "assignments, defined"
.IP "assignment operator" 4
.IX Item "assignment operator"
Either a regular \fBassignment\fR or a compound
\&\fBoperator\fR composed of an ordinary assignment and some other operator, that
changes the value of a variable in place; that is, relative to its old
value. For example, \f(CW\*(C`$a += 2\*(C'\fR adds \f(CW2\fR to \f(CW$a\fR.
.IX Xref "assignment operators, about"
.IP "associative array" 4
.IX Item "associative array"
See \fBhash\fR. Please. The term associative array is the
old Perl 4 term for a \fBhash\fR. Some languages call it a dictionary.
.IX Xref "associative arrays"
.IP "associativity" 4
.IX Item "associativity"
Determines whether you do the left \fBoperator\fR first or the
right \fBoperator\fR first when you have \s-1XA \s0\fBoperator\fR B \fBoperator\fR \s-1CX,\s0 and
the two operators are of the same precedence. Operators like \f(CW\*(C`+\*(C'\fR are left
associative, while operators like \f(CW\*(C`**\*(C'\fR are right associative. See Camel
chapter 3, XUnary and Binary OperatorsX for a list of operators and their
associativity.
.IX Xref "associativity"
.IP "asynchronous" 4
.IX Item "asynchronous"
Said of events or activities whose relative
temporal ordering is indeterminate because too many things are going on at
once. Hence, an asynchronous event is one you didnXt know when to expect.
.IX Xref "asynchronous event processing"
.IP "atom" 4
.IX Item "atom"
A \fBregular expression\fR component potentially matching a
\&\fBsubstring\fR containing one or more characters and treated as an indivisible
syntactic unit by any following \fBquantifier\fR. (Contrast with an
\&\fBassertion\fR that matches something of \fBzero width\fR and may not be quantified.)
.IX Xref "atoms"
.IP "atomic operation" 4
.IX Item "atomic operation"
When Democritus gave the word XatomX to the indivisible
bits of matter, he meant literally something that could not be cut: \fIX\-\fR
(not) + \fI\-XXXXX\fR (cuttable). An atomic operation is an action that canXt be
interrupted, not one forbidden in a nuclear-free zone.
.IX Xref "atomic operation"
.IP "attribute" 4
.IX Item "attribute"
A new feature that allows the declaration of
\&\fBvariables\fR and \fBsubroutines\fR with modifiers, as in \f(CW\*(C`sub foo : locked
method\*(C'\fR. Also another name for an \fBinstance variable\fR of an \fBobject\fR.
.IX Xref "attribute feature"
.IP "autogeneration" 4
.IX Item "autogeneration"
A feature of \fBoperator overloading\fR of \fBobjects\fR,
whereby the behavior of certain \fBoperators\fR can be reasonably deduced using
more fundamental operators. This assumes that the overloaded operators will
often have the same relationships as the regular operators. See Camel
chapter 13, XOverloadingX.
.IX Xref "autogeneration, about"
.IP "autoincrement" 4
.IX Item "autoincrement"
To add one to something automatically, hence the name
of the \f(CW\*(C`++\*(C'\fR operator. To instead subtract one from something automatically
is known as an XautodecrementX.
.IX Xref "autoincrement (term)"
.IP "autoload" 4
.IX Item "autoload"
To load on demand. (Also called XlazyX loading.)
Specifically, to call an \f(CW\*(C`AUTOLOAD\*(C'\fR subroutine on behalf of an undefined
subroutine.
.IX Xref "autoloading, defined"
.IP "autosplit" 4
.IX Item "autosplit"
To split a string automatically, as the \fIXa\fR \fBswitch\fR
does when running under \fIXp\fR or \fIXn\fR in order to emulate \fBawk\fR. (See also
the \f(CW\*(C`AutoSplit\*(C'\fR module, which has nothing to do with the
\&\f(CW\*(C`Xa\*(C'\fR switch but a lot to do with autoloading.)
.IX Xref "autosplit (term) AutoSplit module"
.IP "autovivification" 4
.IX Item "autovivification"
A Graeco-Roman word meaning Xto bring oneself to lifeX.
In Perl, storage locations (\fBlvalues\fR) spontaneously generate themselves as
needed, including the creation of any \fBhard reference\fR values to point to
the next level of storage. The assignment \f(CW\*(C`$a[5][5][5][5][5] = "quintet"\*(C'\fR
potentially creates five scalar storage locations, plus four references (in
the first four scalar locations) pointing to four new anonymous arrays (to
hold the last four scalar locations). But the point of autovivification is
that you donXt have to worry about it.
.IX Xref "autovivification"
.IP "\s-1AV\s0" 4
.IX Item "AV"
Short for Xarray
valueX, which refers to one of PerlXs internal data types that holds an
\&\fBarray\fR. The \f(CW\*(C`AV\*(C'\fR type is a subclass of \fB\s-1SV\s0\fR.
.IX Xref "AV (array value) array value (AV) values, array"
.IP "awk" 4
.IX Item "awk"
Descriptive editing termXshort for XawkwardX. Also
coincidentally refers to a venerable text-processing language from which
Perl derived some of its high-level ideas.
.IX Xref "awk (editing term)"
.SS "B"
.IX Subsection "B"
.IP "backreference" 4
.IX Item "backreference"
A substring \fBcaptured\fR
by a subpattern within unadorned parentheses in a \fBregex\fR. Backslashed
decimal numbers (\f(CW\*(C`\e1\*(C'\fR, \f(CW\*(C`\e2\*(C'\fR, etc.) later in the same pattern refer back to
the corresponding subpattern in the current match. Outside the pattern, the
numbered variables (\f(CW$1\fR, \f(CW$2\fR, etc.) continue to refer to these same
values, as long as the pattern was the last successful match of the current
\&\fBdynamic scope\fR.
.IX Xref "backreferences, about references, backreferences"
.IP "backtracking" 4
.IX Item "backtracking"
The practice of saying, XIf I had to do it all over, IXd do
it differently,X and then actually going back and doing it all over
differently. Mathematically speaking, itXs returning from an unsuccessful
recursion on a tree of possibilities. Perl backtracks when it attempts to
match patterns with a \fBregular expression\fR, and its earlier attempts donXt
pan out. See the section XThe Little Engine That /Couldn(nXt)X in Camel
chapter 5, XPattern MatchingX.
.IX Xref "backtracking"
.IP "backward compatibility" 4
.IX Item "backward compatibility"
Means you can still run your old program
because we didnXt break any of the features or bugs it was relying on.
.IX Xref "backward compatibility, defined"
.IP "bareword" 4
.IX Item "bareword"
A word sufficiently ambiguous to be deemed illegal under
\&\f(CW\*(C`use strict \*(Aqsubs\*(Aq\*(C'\fR. In the absence of that stricture, a bareword is
treated as if quotes were around it.
.IX Xref "barewords, about"
.IP "base class" 4
.IX Item "base class"
A generic \fBobject\fR type; that is, a \fBclass\fR
from which other, more specific classes are derived genetically by
\&\fBinheritance\fR. Also called a
XsuperclassX by people who respect their ancestors.
.IX Xref "base classes classes, base superclasses classes, superclasses"
.IP "big-endian" 4
.IX Item "big-endian"
From Swift: someone who
eats eggs big end first. Also used of computers that store the most
significant \fBbyte\fR of a word at a lower byte address than the least
significant byte. Often considered superior to little-endian machines. See
also \fBlittle-endian\fR.
.IX Xref "bigXendian, defined endianness, bigXendian"
.IP "binary" 4
.IX Item "binary"
Having to do with numbers represented in base 2. That means
thereXs basically two numbers: 0 and 1. Also used to describe a file of
XnontextX, presumably because such a file makes full use of all the binary
bits in its bytes. With the advent of \fBUnicode\fR, this distinction, already
suspect, loses even more of its meaning.
.IX Xref "binary (term)"
.IP "binary operator" 4
.IX Item "binary operator"
An \fBoperator\fR that takes two \fBoperands\fR.
.IX Xref "binary operators, about"
.IP "bind" 4
.IX Item "bind"
To assign a specific \fBnetwork address\fR to a \fBsocket\fR.
.IX Xref "bind (term)"
.IP "bit" 4
.IX Item "bit"
An integer in the range from 0 to 1, inclusive. The smallest
possible unit of information storage. An eighth of a \fBbyte\fR or of a dollar.
(The term XPieces of EightX comes from being able to split the old Spanish
dollar into 8 bits, each of which still counted for money. ThatXs why a 25\-
cent piece today is still Xtwo bitsX.)
.IX Xref "bits, defined"
.IP "bit shift" 4
.IX Item "bit shift"
The movement of bits left or right in a
computer word, which has the effect of multiplying or dividing by a
power of 2.
.IX Xref "bitXshift operators, defined"
.IP "bit string" 4
.IX Item "bit string"
A sequence of \fBbits\fR that is actually being thought of as a
sequence of bits, for once.
.IX Xref "bit string"
.IP "bless" 4
.IX Item "bless"
In corporate life, to grant official
approval to a thing, as in, XThe \s-1VP\s0 of Engineering has blessed our
WebCruncher project.X Similarly, in Perl, to grant official approval to a
\&\fBreferent\fR so that it can function as an \fBobject\fR, such as a WebCruncher
object. See the \f(CW\*(C`bless\*(C'\fR function in Camel chapter 27, XFunctionsX.
.IX Xref "bless function, about bless (term)"
.IP "block" 4
.IX Item "block"
What a \fBprocess\fR does when it has to wait for something:
XMy process blocked waiting for the disk.X As an unrelated noun, it refers
to a large chunk of data, of a size that the \fBoperating system\fR likes to
deal with (normally a power of 2 such as 512 or 8192). Typically refers to
a chunk of data thatXs coming from or going to a disk file.
.IX Xref "blocks, defined"
.IP "\s-1BLOCK\s0" 4
.IX Item "BLOCK"
A syntactic construct
consisting of a sequence of Perl \fBstatements\fR that is delimited by braces.
The \f(CW\*(C`if\*(C'\fR and \f(CW\*(C`while\*(C'\fR statements are defined in terms of \fI\f(CI\*(C`BLOCK\*(C'\fI\fRs, for
instance. Sometimes we also say XblockX to mean a lexical scope; that is, a
sequence of statements that acts like a \fI\f(CI\*(C`BLOCK\*(C'\fI\fR, such as within an
\&\f(CW\*(C`eval\*(C'\fR or a file, even though the statements arenXt delimited by braces.
.IX Xref "BLOCK construct, about constructs, BLOCK"
.IP "block buffering" 4
.IX Item "block buffering"
A method of making input and output
efficient by passing one \fBblock\fR at a time. By default, Perl does block
buffering to disk files. See \fBbuffer\fR and \fBcommand buffering\fR.
.IX Xref "block buffering buffering, block"
.IP "Boolean" 4
.IX Item "Boolean"
A value that is either \fBtrue\fR or
\&\fBfalse\fR.
.IX Xref "Boolean values values, Boolean"
.IP "Boolean context" 4
.IX Item "Boolean context"
A special kind of \fBscalar
context\fR used in conditionals to decide whether the \fBscalar value\fR returned
by an expression is \fBtrue\fR or \fBfalse\fR. Does not evaluate as either a
string or a number. See \fBcontext\fR.
.IX Xref "Boolean context, about context, Boolean"
.IP "breakpoint" 4
.IX Item "breakpoint"
A spot in your program where youXve told the debugger
to stop \fBexecution\fR so you can poke around and see whether anything is
wrong yet.
.IX Xref "breakpoints, defined"
.IP "broadcast" 4
.IX Item "broadcast"
To send a \fBdatagram\fR to multiple destinations
simultaneously.
.IX Xref "broadcast (networking term)"
.IP "\s-1BSD\s0" 4
.IX Item "BSD"
A psychoactive drug, popular in the X80s, probably developed at \s-1UC\s0
Berkeley or thereabouts. Similar in many ways to the prescription-only
medication called XSystem \s-1VX,\s0 but infinitely more useful. (Or, at least,
more fun.) The full chemical name is XBerkeley Standard DistributionX.
.IX Xref "BSD (Berkeley Standard Distribution) Berkeley Standard Distribution (BSD)"
.IP "bucket" 4
.IX Item "bucket"
A location in a \fBhash table\fR containing (potentially)
multiple entries whose keys XhashX to the same hash value according to its
hash function. (As internal policy, you donXt have to worry about it unless
youXre into internals, or policy.)
.IX Xref "buckets (term)"
.IP "buffer" 4
.IX Item "buffer"
A temporary holding location for data. Data that are
\&\fBBlock buffering\fR means that the data is passed on to its destination
whenever the buffer is full. \fBLine buffering\fR means that itXs passed on
whenever a complete line is received. \fBCommand buffering\fR means that itXs
passed every time you do a \f(CW\*(C`print\*(C'\fR command (or equivalent). If your output
is unbuffered, the system processes it one byte at a time without the use of
a holding area. This can be rather inefficient.
.IX Xref "buffers, defined"
.IP "built-in" 4
.IX Item "built-in"
A \fBfunction\fR that is predefined in the
language. Even when hidden by \fBoverriding\fR, you can always get at a built\-
in function by \fBqualifying\fR its name with the \f(CW\*(C`CORE::\*(C'\fR pseudopackage.
.IX Xref "builtXin functions, about"
.IP "bundle" 4
.IX Item "bundle"
A group of related modules on \fB\s-1CPAN\s0\fR. (Also sometimes
refers to a group of command-line switches grouped into one \fBswitch
cluster\fR.)
.IX Xref "bundles (term)"
.IP "byte" 4
.IX Item "byte"
A piece of data worth eight \fBbits\fR in most places.
.IX Xref "bytes (term)"
.IP "bytecode" 4
.IX Item "bytecode"
A pidgin-like lingo spoken among Xdroids when they donXt wish to reveal
their orientation (see \fBendian\fR). Named after some similar languages spoken
(for similar reasons) between compilers and interpreters in the late 20XX
century. These languages are characterized by representing everything as a
nonarchitecture-dependent sequence of bytes.
.SS "C"
.IX Subsection "C"
.IP "C" 4
.IX Item "C"
A language beloved by many for its inside-out \fBtype\fR
definitions, inscrutable \fBprecedence\fR rules, and heavy \fBoverloading\fR of
the function-call mechanism. (Well, actually, people first switched to C
because they found lowercase identifiers easier to read than upper.) Perl is
written in C, so itXs not surprising that Perl borrowed a few ideas from it.
.IX Xref "C language, about"
.IP "cache" 4
.IX Item "cache"
A data repository. Instead of computing expensive answers
several times, compute it once and save the result.
.IX Xref "cache (term)"
.IP "callback" 4
.IX Item "callback"
A \fBhandler\fR that you register with some other part of your
program in the hope that the other part of your program will \fBtrigger\fR your
handler when some event of interest transpires.
.IX Xref "callbacks"
.IP "call by reference" 4
.IX Item "call by reference"
An \fBargument\fR\-passing mechanism in which the \fBformal arguments\fR refer directly to the
\&\fBactual arguments\fR, and the \fBsubroutine\fR can change the actual arguments
by changing the formal arguments. That is, the formal argument is an
\&\fBalias\fR for the actual argument. See also \fBcall by value\fR.
.IX Xref "call by reference references, call by reference mechanism"
.IP "call by value" 4
.IX Item "call by value"
An \fBargument\fR\-passing mechanism in which the \fBformal
arguments\fR refer to a copy of the \fBactual arguments\fR, and the
\&\fBsubroutine\fR cannot change the actual arguments by changing the formal
arguments. See also \fBcall by reference\fR.
.IX Xref "call by value"
.IP "canonical" 4
.IX Item "canonical"
Reduced to a standard form to facilitate comparison.
.IX Xref "canonical (term)"
.IP "capture variables" 4
.IX Item "capture variables"
The variablesXsuch as \f(CW$1\fR and
\&\f(CW$2\fR, and \f(CW\*(C`%+\*(C'\fR and \f(CW%X \fRXthat hold the text remembered in a pattern
match. See Camel chapter 5, XPattern MatchingX.
.IX Xref "capture variables variables, capture"
.IP "capturing" 4
.IX Item "capturing"
The use of parentheses around a \fBsubpattern\fR in a
\&\fBregular expression\fR to store the matched \fBsubstring\fR as a
\&\fBbackreference\fR. (Captured strings are also returned as a list in \fBlist
context\fR.) See Camel chapter 5, XPattern MatchingX.
.IX Xref "capturing in pattern matching subpatterns, capturing pattern matching, capturing in"
.IP "cargo cult" 4
.IX Item "cargo cult"
Copying and pasting code without understanding it, while
superstitiously believing in its value. This term originated from
preindustrial cultures dealing with the detritus of explorers and colonizers
of technologically advanced cultures. See \fIThe Gods Must Be Crazy\fR.
.IX Xref "cargo cult"
.IP "case" 4
.IX Item "case"
A property of certain
characters. Originally, typesetter stored capital letters in the upper of
two cases and small letters in the lower one. Unicode recognizes three
cases: \fBlowercase\fR (\fBcharacter property\fR \f(CW\*(C`\ep{lower}\*(C'\fR), \fBtitlecase\fR
(\f(CW\*(C`\ep{title}\*(C'\fR), and \fBuppercase\fR (\f(CW\*(C`\ep{upper}\*(C'\fR). A fourth casemapping called
\&\fBfoldcase\fR is not itself a distinct case, but it is used internally to
implement \fBcasefolding\fR. Not all letters have case, and some nonletters
have case.
.IX Xref "case (character) characters, case considerations"
.IP "casefolding" 4
.IX Item "casefolding"
Comparing or matching a string case-insensitively. In Perl, it
is implemented with the \f(CW\*(C`/i\*(C'\fR pattern modifier, the \f(CW\*(C`fc\*(C'\fR function, and the
\&\f(CW\*(C`\eF\*(C'\fR double-quote translation escape.
.IX Xref "casefolding"
.IP "casemapping" 4
.IX Item "casemapping"
The process of converting a string to one of the four Unicode
\&\fBcasemaps\fR; in Perl, it is implemented with the \f(CW\*(C`fc\*(C'\fR, \f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`ucfirst\*(C'\fR,
and \f(CW\*(C`uc\*(C'\fR functions.
.IX Xref "casemapping"
.IP "character" 4
.IX Item "character"
The smallest individual element of a string. Computers
store characters as integers, but Perl lets you operate on them as text. The
integer used to represent a particular character is called that characterXs
\&\fBcodepoint\fR.
.IX Xref "characters, defined"
.IP "character class" 4
.IX Item "character class"
A square-bracketed list of
characters used in a \fBregular expression\fR to indicate that any character
of the set may occur at a given point. Loosely, any predefined set of
characters so used.
.IX Xref "character classes, about classes, character"
.IP "character property" 4
.IX Item "character property"
A predefined \fBcharacter class\fR matchable by the \f(CW\*(C`\ep\*(C'\fR
or \f(CW\*(C`\eP\*(C'\fR \fBmetasymbol\fR. \fBUnicode\fR defines hundreds of standard properties
for every possible codepoint, and Perl defines a few of its own, too.
.IX Xref "character property"
.IP "circumfix operator" 4
.IX Item "circumfix operator"
An \fBoperator\fR that surrounds its \fBoperand\fR, like the
angle operator, or parentheses, or a hug.
.IX Xref "circumfix operator"
.IP "class" 4
.IX Item "class"
A user-defined \fBtype\fR, implemented in Perl via a
\&\fBpackage\fR that provides (either directly or by inheritance) \fBmethods\fR
(that is, \fBsubroutines\fR) to handle \fBinstances\fR of the class (its
\&\fBobjects\fR). See also \fBinheritance\fR.
.IX Xref "classes, defined"
.IP "class method" 4
.IX Item "class method"
A \fBmethod\fR whose \fBinvocant\fR is a
\&\fBpackage\fR name, not an \fBobject\fR reference. A method associated with the
class as a whole. Also see \fBinstance method\fR.
.IX Xref "class methods methods, class"
.IP "client" 4
.IX Item "client"
In networking, a \fBprocess\fR that
initiates contact with a \fBserver\fR process in order to exchange data and
perhaps receive a service.
.IX Xref "clients, defined processes, client"
.IP "closure" 4
.IX Item "closure"
An \fBanonymous\fR subroutine
that, when a reference to it is generated at runtime, keeps track of the
identities of externally visible \fBlexical variables\fR, even after those
lexical variables have supposedly gone out of \fBscope\fR. TheyXre called
XclosuresX because this sort of behavior gives mathematicians a sense of
closure.
.IX Xref "closure subroutines subroutines, closure"
.IP "cluster" 4
.IX Item "cluster"
A parenthesized \fBsubpattern\fR
used to group parts of a \fBregular expression\fR into a single \fBatom\fR.
.IX Xref "clusters, defined subpatterns, cluster"
.IP "\s-1CODE\s0" 4
.IX Item "CODE"
The word returned by the \f(CW\*(C`ref\*(C'\fR
function when you apply it to a reference to a subroutine. See also \fB\s-1CV\s0\fR.
.IX Xref "CODE (ref function) ref function, about"
.IP "code generator" 4
.IX Item "code generator"
A system that writes code for you in a low-level
language, such as code to implement the backend of a compiler. See \fBprogram
generator\fR.
.IX Xref "code generators, defined"
.IP "codepoint" 4
.IX Item "codepoint"
The integer a computer uses to represent a given
character. \s-1ASCII\s0 codepoints are in the range 0 to 127; Unicode codepoints
are in the range 0 to 0x1F_FFFF; and Perl codepoints are in the range 0 to
2XXX1 or 0 to 2XXX1, depending on your native integer size. In Perl Culture,
sometimes called \fBordinals\fR.
.IX Xref "codepoints, about"
.IP "code subpattern" 4
.IX Item "code subpattern"
A \fBregular expression\fR subpattern
whose real purpose is to execute some Perl codeXfor example, the \f(CW\*(C`(?{...})\*(C'\fR
and \f(CW\*(C`(??{...})\*(C'\fR subpatterns.
.IX Xref "code subpatterns subpatterns, code"
.IP "collating sequence" 4
.IX Item "collating sequence"
The order into which \fBcharacters\fR
sort. This is used by \fBstring\fR comparison routines to decide, for example,
where in this glossary to put Xcollating sequenceX.
.IX Xref "collating sequence collating sequence"
.IP "co-maintainer" 4
.IX Item "co-maintainer"
A person with permissions to index a \fBnamespace\fR in
\&\fB\s-1PAUSE\s0\fR. Anyone can upload any namespace, but only primary and
co-maintainers get their contributions indexed.
.IX Xref "coXmaintainers"
.IP "combining character" 4
.IX Item "combining character"
Any character with the
General Category of Combining Mark (\f(CW\*(C`\ep{GC=M}\*(C'\fR), which may be spacing or
nonspacing. Some are even invisible. A sequence of combining characters
following a grapheme base character together make up a single user-visible
character called a \fBgrapheme\fR. Most but not all diacritics are combining
characters, and vice versa.
.IX Xref "combining characters characters, combining"
.IP "command" 4
.IX Item "command"
In \fBshell\fR programming, the syntactic combination of a
program name and its arguments. More loosely, anything you type to a shell
(a command interpreter) that starts it doing something. Even more loosely, a
Perl \fBstatement\fR, which might start with a \fBlabel\fR and typically ends with
a semicolon.
.IX Xref "commands, defined"
.IP "command buffering" 4
.IX Item "command buffering"
A mechanism in Perl that lets you
store up the output of each Perl \fBcommand\fR and then flush it out as a
single request to the \fBoperating system\fR. ItXs enabled by setting the \f(CW$|\fR
(\f(CW$AUTOFLUSH\fR) variable to a true value. ItXs used when you donXt want data
sitting around, not going where itXs supposed to, which may happen because
the default on a \fBfile\fR or \fBpipe\fR is to use \fBblock buffering\fR.
.IX Xref "command buffering buffering, command"
.IP "command-line arguments" 4
.IX Item "command-line arguments"
The \fBvalues\fR you supply
along with a program name when you tell a \fBshell\fR to execute a \fBcommand\fR.
These values are passed to a Perl program through \f(CW@ARGV\fR.
.IX Xref "commandXline arguments arguments, commandXline"
.IP "command name" 4
.IX Item "command name"
The name of the program currently executing, as typed on the
command line. In C, the \fBcommand\fR name is passed to the program as the
first command-line argument. In Perl, it comes in separately as \f(CW$0\fR.
.IX Xref "command names"
.IP "comment" 4
.IX Item "comment"
A remark that doesnXt affect the meaning of the program.
In Perl, a comment is introduced by a \f(CW\*(C`#\*(C'\fR character and continues to the
end of the line.
.IX Xref "comments, defined"
.IP "compilation unit" 4
.IX Item "compilation unit"
The \fBfile\fR (or \fBstring\fR, in the case of \f(CW\*(C`eval\*(C'\fR) that
is currently being \fBcompiled\fR.
.IX Xref "compilation units"
.IP "compile" 4
.IX Item "compile"
The process of turning source code into a machine-usable form. See \fBcompile
phase\fR.
.IP "compile phase" 4
.IX Item "compile phase"
Any time before Perl starts running your main
program. See also \fBrun phase\fR. Compile phase is mostly spent in \fBcompile
time\fR, but may also be spent in \fBruntime\fR when \f(CW\*(C`BEGIN\*(C'\fR blocks, \f(CW\*(C`use\*(C'\fR or
\&\f(CW\*(C`no\*(C'\fR declarations, or constant subexpressions are being evaluated. The
startup and import code of any \f(CW\*(C`use\*(C'\fR declaration is also run during
compile phase.
.IX Xref "compile phase, defined"
.IP "compiler" 4
.IX Item "compiler"
Strictly speaking, a program that munches
up another program and spits out yet another file containing the program in
a Xmore executableX form, typically containing native machine instructions.
The \fIperl\fR program is not a compiler by this definition, but it does
contain a kind of compiler that takes a program and turns it into a more
executable form (\fBsyntax trees\fR) within the \fIperl\fR process itself, which
the \fBinterpreter\fR then interprets. There are, however, extension \fBmodules\fR
to get Perl to act more like a XrealX compiler. See Camel chapter 16,
XCompilingX.
.IX Xref "compilers and compiling, about"
.IP "compile time" 4
.IX Item "compile time"
The time when Perl is trying to make sense of your
code, as opposed to when it thinks it knows what your code means and is
merely trying to do what it thinks your code says to do, which is \fBruntime\fR.
.IX Xref "compile time, defined"
.IP "composer" 4
.IX Item "composer"
A XconstructorX for a \fBreferent\fR that isnXt really an
\&\fBobject\fR, like an anonymous array or a hash (or a sonata, for that matter).
For example, a pair of braces acts as a composer for a hash, and a pair of
brackets acts as a composer for an array. See the section XCreating
ReferencesX in Camel chapter 8, XReferencesX.
.IX Xref "composers, about"
.IP "concatenation" 4
.IX Item "concatenation"
The process of gluing one
catXs nose to another catXs tail. Also a similar operation on two
\&\fBstrings\fR.
.IX Xref "concatenating strings strings, concatenating"
.IP "conditional" 4
.IX Item "conditional"
Something XiffyX. See \fBBoolean context\fR.
.IX Xref "conditional (term)"
.IP "connection" 4
.IX Item "connection"
In telephony, the temporary electrical circuit between
the callerXs and the calleeXs phone. In networking, the same kind of
temporary circuit between a \fBclient\fR and a \fBserver\fR.
.IX Xref "connections (term)"
.IP "construct" 4
.IX Item "construct"
As a noun, a piece of syntax made up of smaller
pieces. As a transitive verb, to create an \fBobject\fR using a \fBconstructor\fR.
.IX Xref "constructs, defined"
.IP "constructor" 4
.IX Item "constructor"
Any \fBclass method\fR, \fBinstance\fR, or \fBsubroutine\fR
that composes, initializes, blesses, and returns an \fBobject\fR. Sometimes we
use the term loosely to mean a \fBcomposer\fR.
.IX Xref "constructors, defined"
.IP "context" 4
.IX Item "context"
The surroundings or environment. The context given by the
surrounding code determines what kind of data a particular \fBexpression\fR is
expected to return. The three primary contexts are \fBlist context\fR,
\&\fBscalar\fR, and \fBvoid context\fR. Scalar context is sometimes subdivided into
\&\fBBoolean context\fR, \fBnumeric context\fR, \fBstring context\fR, and \fBvoid
context\fR. ThereXs also a XdonXt careX context (which is dealt with in Camel
chapter 2, XBits and PiecesX, if you care).
.IX Xref "context, about"
.IP "continuation" 4
.IX Item "continuation"
The treatment of more than one physical \fBline\fR as a
single logical line. \fBMakefile\fR lines are continued by putting a backslash
before the \fBnewline\fR. Mail headers, as defined by \s-1RFC 822,\s0 are
continued by putting a space or tab \fIafter\fR the newline. In general, lines
in Perl do not need any form of continuation mark, because \fBwhitespace\fR
(including newlines) is gleefully ignored. Usually.
.IX Xref "continuation lines RFC 822"
.IP "core dump" 4
.IX Item "core dump"
The corpse of a \fBprocess\fR, in the form of a file left in the
\&\fBworking directory\fR of the process, usually as a result of certain kinds
of fatal errors.
.IX Xref "core dump"
.IP "\s-1CPAN\s0" 4
.IX Item "CPAN"
The Comprehensive Perl Archive Network. (See the Camel Preface
and Camel chapter 19, \s-1XCPANX\s0 for details.)
.IX Xref "Comprehensive Perl Archive Network CPAN (Comprehensive Perl Archive Network), about"
.IP "C preprocessor" 4
.IX Item "C preprocessor"
The typical C compilerXs first pass, which processes lines
beginning with \f(CW\*(C`#\*(C'\fR for conditional compilation and macro definition, and
does various manipulations of the program text based on the current
definitions. Also known as \fIcpp\fR(1).
.IX Xref "C preprocessor"
.IP "cracker" 4
.IX Item "cracker"
Someone who breaks security on computer systems. A cracker may
be a true \fBhacker\fR or only a \fBscript kiddie\fR.
.IX Xref "crackers"
.IP "currently selected output channel" 4
.IX Item "currently selected output channel"
The last \fBfilehandle\fR that was
designated with \f(CW\*(C`select(FILEHANDLE)\*(C'\fR; \f(CW\*(C`STDOUT\*(C'\fR, if no filehandle has
been selected.
.IX Xref "currently selected output channel"
.IP "current package" 4
.IX Item "current package"
The \fBpackage\fR in which the current statement is
\&\fBcompiled\fR. Scan backward in the text of your program through the current
\&\fBlexical scope\fR or any enclosing lexical scopes until you find a package
declaration. ThatXs your current package name.
.IX Xref "current package"
.IP "current working directory" 4
.IX Item "current working directory"
See \fBworking directory\fR.
.IX Xref "current working directory"
.IP "\s-1CV\s0" 4
.IX Item "CV"
In academia, a curriculum vit\*(ae, a fancy kind of re\*'sume\*'. In Perl, an internal Xcode valueX typedef holding a
\&\fBsubroutine\fR. The \f(CW\*(C`CV\*(C'\fR type is a subclass of \fB\s-1SV\s0\fR.
.IX Xref "CV (code value) code value (CV)"
.SS "D"
.IX Subsection "D"
.IP "dangling statement" 4
.IX Item "dangling statement"
A bare, single \fBstatement\fR,
without any braces, hanging off an \f(CW\*(C`if\*(C'\fR or \f(CW\*(C`while\*(C'\fR conditional. C allows
them. Perl doesnXt.
.IX Xref "dangling statements statements, dangling"
.IP "datagram" 4
.IX Item "datagram"
A packet of data, such as a \fB\s-1UDP\s0\fR message, that (from
the viewpoint of the programs involved) can be sent independently over the
network. (In fact, all packets are sent independently at the \fB\s-1IP\s0\fR level,
but \fBstream\fR protocols such as \fB\s-1TCP\s0\fR hide this from your program.)
.IX Xref "datagrams, defined"
.IP "data structure" 4
.IX Item "data structure"
How your various pieces of data relate to each
other and what shape they make when you put them all together, as in a
rectangular table or a triangular tree.
.IX Xref "data structures, defined"
.IP "data type" 4
.IX Item "data type"
A set of possible values, together with all the
operations that know how to deal with those values. For example, a numeric
data type has a certain set of numbers that you can work with, as well as
various mathematical operations that you can do on the numbers, but would
make little sense on, say, a string such as \f(CW"Kilroy"\fR. Strings have their
own operations, such as \fBconcatenation\fR. Compound types made of a number of
smaller pieces generally have operations to compose and decompose them, and
perhaps to rearrange them. \fBObjects\fR that model things in the real world
often have operations that correspond to real activities. For instance, if
you model an elevator, your elevator object might have an \f(CW\*(C`open_door\*(C'\fR
\&\fBmethod\fR.
.IX Xref "data types, defined"
.IP "\s-1DBM\s0" 4
.IX Item "DBM"
Stands for XDatabase ManagementX routines, a set of routines that emulate an
\&\fBassociative array\fR using disk files. The routines use a dynamic hashing
scheme to locate any entry with only two disk accesses. \s-1DBM\s0 files allow a
Perl program to keep a persistent \fBhash\fR across multiple invocations. You
can \f(CW\*(C`tie\*(C'\fR your hash variables to various \s-1DBM\s0 implementations.
.IX Xref "DBM (Database Management) routines Database Management (DBM) routines"
.IP "declaration" 4
.IX Item "declaration"
An \fBassertion\fR that states something exists and
perhaps describes what itXs like, without giving any commitment as to how
or where youXll use it. A declaration is like the part of your recipe that
says, Xtwo cups flour, one large egg, four or five tadpolesXX See
\&\fBstatement\fR for its opposite. Note that some declarations also function
as statements. Subroutine declarations also act as definitions if a body
is supplied.
.IX Xref "declarations, defined"
.IP "declarator" 4
.IX Item "declarator"
Something that tells your program what sort of variable
youXd like. Perl doesnXt require you to declare variables, but you can use
\&\f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, or \f(CW\*(C`state\*(C'\fR to denote that you want something other than
the default.
.IX Xref "declarators"
.IP "decrement" 4
.IX Item "decrement"
To subtract a value from a
variable, as in Xdecrement \f(CW$x\fRX (meaning to remove 1 from its value) or
Xdecrement \f(CW$x\fR by 3X.
.IX Xref "decrementing values values, decrementing"
.IP "default" 4
.IX Item "default"
A \fBvalue\fR chosen for you if you donXt
supply a value of your own.
.IX Xref "default values values, default"
.IP "defined" 4
.IX Item "defined"
Having a meaning. Perl thinks that some of the things
people try to do are devoid of meaning; in particular, making use of
variables that have never been given a \fBvalue\fR and performing certain
operations on data that isnXt there. For example, if you try to read data
past the end of a file, Perl will hand you back an undefined value. See also
\&\fBfalse\fR and the \f(CW\*(C`defined\*(C'\fR entry in Camel chapter 27, XFunctionsX.
.IX Xref "defined (term)"
.IP "delimiter" 4
.IX Item "delimiter"
A \fBcharacter\fR or \fBstring\fR that sets bounds to an
arbitrarily sized textual object, not to be confused with a \fBseparator\fR or
\&\fBterminator\fR. XTo delimitX really just means Xto surroundX or Xto encloseX
(like these parentheses are doing).
.IX Xref "delimiters (term)"
.IP "dereference" 4
.IX Item "dereference"
A fancy computer science term
meaning Xto follow a \fBreference\fR to what it points toX. The XdeX part of it
refers to the fact that youXre taking away one level of \fBindirection\fR.
.IX Xref "dereference (term) references, dereference"
.IP "derived class" 4
.IX Item "derived class"
A \fBclass\fR that defines some of its \fBmethods\fR in terms of a more generic class,
called a \fBbase class\fR. Note that classes arenXt classified exclusively into
base classes or derived classes: a class can function as both a derived
class and a base class simultaneously, which is kind of classy.
.IX Xref "derived classes classes, derived subclasses classes, subclasses"
.IP "descriptor" 4
.IX Item "descriptor"
See \fBfile descriptor\fR.
.IP "destroy" 4
.IX Item "destroy"
To deallocate the memory of a \fBreferent\fR (first triggering
its \f(CW\*(C`DESTROY\*(C'\fR method, if it has one).
.IX Xref "destroy (term)"
.IP "destructor" 4
.IX Item "destructor"
A special \fBmethod\fR that is called
when an \fBobject\fR is thinking about \fBdestroying\fR itself. A Perl programXs
\&\f(CW\*(C`DESTROY\*(C'\fR method doesnXt do the actual destruction; Perl just \fBtriggers\fR
the method in case the \fBclass\fR wants to do any associated cleanup.
.IX Xref "destructor method methods, destructor"
.IP "device" 4
.IX Item "device"
A whiz-bang hardware gizmo (like a disk or tape drive or a
modem or a joystick or a mouse) attached to your computer, which the
\&\fBoperating system\fR tries to make look like a \fBfile\fR (or a bunch of files).
Under Unix, these fake files tend to live in the \fI/dev\fR directory.
.IX Xref "devices (term)"
.IP "directive" 4
.IX Item "directive"
A \fBpod\fR directive. See Camel chapter 23, XPlain Old
DocumentationX.
.IX Xref "directives, defined"
.IP "directory" 4
.IX Item "directory"
A special file that contains other files. Some
\&\fBoperating systems\fR call these XfoldersX, XdrawersX, XcataloguesX, or
XcatalogsX.
.IX Xref "directories, defined"
.IP "directory handle" 4
.IX Item "directory handle"
A name that represents a particular instance of opening a
directory to read it, until you close it. See the \f(CW\*(C`opendir\*(C'\fR function.
.IX Xref "directory handle"
.IP "discipline" 4
.IX Item "discipline"
Some people need this and some people avoid it.
For Perl, itXs an old way to say \fBI/O layer\fR.
.IX Xref "discipline (I O layer)"
.IP "dispatch" 4
.IX Item "dispatch"
To send something to its correct destination. Often used
metaphorically to indicate a transfer of programmatic control to a
destination selected algorithmically, often by lookup in a table of function
\&\fBreferences\fR or, in the case of object \fBmethods\fR, by traversing the
inheritance tree looking for the most specific definition for the method.
.IX Xref "dispatching"
.IP "distribution" 4
.IX Item "distribution"
A standard, bundled release of a system of
software. The default usage implies source code is included. If that is not
the case, it will be called a Xbinary-onlyX distribution.
.IX Xref "distributions, defined"
.IP "dual-lived" 4
.IX Item "dual-lived"
Some modules live both in the
\&\fBStandard Library\fR and on \fB\s-1CPAN\s0\fR. These modules might be developed on two
tracks as people modify either version. The trend currently is to untangle
these situations.
.IX Xref "dualXlived modules modules, dualXlived"
.IP "dweomer" 4
.IX Item "dweomer"
An enchantment, illusion, phantasm, or jugglery. Said when PerlXs
magical \fBdwimmer\fR effects donXt do what you expect, but rather seem to be
the product of arcane \fIdweomercraft\fR, sorcery, or wonder working. [From
Middle English.]
.IX Xref "dweomer"
.IP "dwimmer" 4
.IX Item "dwimmer"
\&\s-1DWIM \s0is
an acronym for XDo What I MeanX, the principle that something
should just do what you want it to do without an undue amount of fuss. A bit
of code that does XdwimmingX is a XdwimmerX. Dwimming can require a great
deal of behind-the-scenes magic, which (if it doesnXt stay properly behind
the scenes) is called a \fBdweomer\fR instead.
.IX Xref "DWIM (Do What I Mean) principle Do What I Mean (DWIM) principle dwimming"
.IP "dynamic scoping" 4
.IX Item "dynamic scoping"
Dynamic scoping works over a \fBdynamic
scope\fR, making variables visible throughout the rest of the \fBblock\fR in
which they are first used and in any \fBsubroutines\fR that are called by the
rest of the block. Dynamically scoped variables can have their values
temporarily changed (and implicitly restored later) by a \f(CW\*(C`local\*(C'\fR operator.
(Compare \fBlexical scoping\fR.) Used more loosely to mean how a subroutine
that is in the middle of calling another subroutine XcontainsX that
subroutine at \fBruntime\fR.
.IX Xref "dynamic scope scopes, dynamic"
.SS "E"
.IX Subsection "E"
.IP "eclectic" 4
.IX Item "eclectic"
Derived from many sources. Some would say \fItoo\fR many.
.IX Xref "eclectic (term)"
.IP "element" 4
.IX Item "element"
A basic building block. When youXre talking about an
\&\fBarray\fR, itXs one of the items that make up the array.
.IX Xref "elements, about"
.IP "embedding" 4
.IX Item "embedding"
When something is contained in something else,
particularly when that might be considered surprising: XIXve embedded a
complete Perl interpreter in my editor!X
.IX Xref "embedding (term)"
.IP "empty subclass test" 4
.IX Item "empty subclass test"
The notion that an empty \fBderived class\fR should
behave exactly like its \fBbase class\fR.
.IX Xref "empty subclass test"
.IP "encapsulation" 4
.IX Item "encapsulation"
The veil of abstraction separating the \fBinterface\fR
from the \fBimplementation\fR (whether enforced or not), which mandates that
all access to an \fBobject\fRXs state be through \fBmethods\fR alone.
.IX Xref "encapsulation (term)"
.IP "endian" 4
.IX Item "endian"
See \fBlittle-endian\fR and \fBbig-endian\fR.
.IP "en passant" 4
.IX Item "en passant"
When you change a \fBvalue\fR as it is being copied. [From
French Xin passingX, as in the exotic pawn-capturing maneuver in chess.]
.IX Xref "en passant (term)"
.IP "environment" 4
.IX Item "environment"
The collective set of \fBenvironment variables\fR your
\&\fBprocess\fR inherits from its parent. Accessed via \f(CW%ENV\fR.
.IX Xref "environment (term)"
.IP "environment variable" 4
.IX Item "environment variable"
A mechanism by which some high-level agent such as a user can pass its
preferences down to its future offspring (child \fBprocesses\fR, grandchild
processes, great-grandchild processes, and so on). Each environment
variable is a \fBkey\fR/\fBvalue\fR pair, like one entry in a \fBhash\fR.
.IX Xref "environment variables variables, environment environment variables"
.IP "\s-1EOF\s0" 4
.IX Item "EOF"
End of File. Sometimes used
metaphorically as the terminating string of a \fBhere document\fR.
.IX Xref "End of File (EOF) EOF (End of File)"
.IP "errno" 4
.IX Item "errno"
The error number returned by a
\&\fBsyscall\fR when it fails. Perl refers to the error by the name \f(CW$!\fR (or
\&\f(CW$OS_ERROR\fR if you use the English module).
.IX Xref "errno (error number) error number (errno)"
.IP "error" 4
.IX Item "error"
See \fBexception\fR or \fBfatal error\fR.
.IP "escape sequence" 4
.IX Item "escape sequence"
See \fBmetasymbol\fR.
.IP "exception" 4
.IX Item "exception"
A fancy term for an error. See \fBfatal error\fR.
.IP "exception handling" 4
.IX Item "exception handling"
The way a program responds to an error. The
exception-handling mechanism in Perl is the \f(CW\*(C`eval\*(C'\fR operator.
.IX Xref "exception handling, defined"
.IP "exec" 4
.IX Item "exec"
To throw away the current \fBprocess\fRXs program and replace
it with another, without exiting the process or relinquishing any resources
held (apart from the old memory image).
.IX Xref "exec function"
.IP "executable file" 4
.IX Item "executable file"
A \fBfile\fR that is specially marked to
tell the \fBoperating system\fR that itXs okay to run this file as a program.
Usually shortened to XexecutableX.
.IX Xref "executable files files, executable"
.IP "execute" 4
.IX Item "execute"
To run a \fBprogram\fR or \fBsubroutine\fR. (Has nothing to do
with the \f(CW\*(C`kill\*(C'\fR built-in, unless youXre trying to run a \fBsignal handler\fR.)
.IX Xref "execute (term)"
.IP "execute bit" 4
.IX Item "execute bit"
The special mark that tells the operating system it can run
this program. There are actually three execute bits under Unix, and which
bit gets used depends on whether you own the file singularly, collectively,
or not at all.
.IX Xref "execute bit"
.IP "exit status" 4
.IX Item "exit status"
See \fBstatus\fR.
.IP "exploit" 4
.IX Item "exploit"
Used as a noun in this case, this refers to a known way
to compromise a program to get it to do something the author didnXt intend.
Your task is to write unexploitable programs.
.IX Xref "exploits, security"
.IP "export" 4
.IX Item "export"
To make symbols from a \fBmodule\fR available for
\&\fBimport\fR by other modules.
.IX Xref "exporting, defined"
.IP "expression" 4
.IX Item "expression"
Anything you can legally say in a spot
where a \fBvalue\fR is required. Typically composed of \fBliterals\fR,
\&\fBvariables\fR, \fBoperators\fR, \fBfunctions\fR, and \fBsubroutine\fR calls, not
necessarily in that order.
.IX Xref "expressions, defined expressions"
.IP "extension" 4
.IX Item "extension"
A Perl module that also pulls in \fBcompiled\fR C or \*(C+
code. More generally, any experimental option that can be \fBcompiled\fR into
Perl, such as multithreading.
.IX Xref "extensions, defined"
.SS "F"
.IX Subsection "F"
.IP "false" 4
.IX Item "false"
In Perl, any value that would look like \f(CW""\fR
or \f(CW"0"\fR if evaluated in a string context. Since undefined values evaluate
to \f(CW""\fR, all undefined values are false, but not all false values are
undefined.
.IX Xref "false values values, false"
.IP "\s-1FAQ\s0" 4
.IX Item "FAQ"
Frequently Asked Question (although not necessarily
frequently answered, especially if the answer appears in the Perl \s-1FAQ\s0
shipped standard with Perl).
.IX Xref "FAQ (Frequently Asked Question) Frequently Asked Question (FAQ)"
.IP "fatal error" 4
.IX Item "fatal error"
An uncaught \fBexception\fR, which causes termination of the
\&\fBprocess\fR after printing a message on your \fBstandard error\fR stream. Errors
that happen inside an \f(CW\*(C`eval\*(C'\fR are not fatal. Instead, the \f(CW\*(C`eval\*(C'\fR terminates
after placing the exception message in the \f(CW$@\fR (\f(CW$EVAL_ERROR\fR) variable.
You can try to provoke a fatal error with the \f(CW\*(C`die\*(C'\fR operator (known as
throwing or raising an exception), but this may be caught by a dynamically
enclosing \f(CW\*(C`eval\*(C'\fR. If not caught, the \f(CW\*(C`die\*(C'\fR becomes a fatal error.
.IX Xref "fatal errors"
.IP "feeping creaturism" 4
.IX Item "feeping creaturism"
A spoonerism of Xcreeping
featurismX, noting the biological urge to add just one more feature to
a program.
.IX Xref "feeping creaturism creeping featurism"
.IP "field" 4
.IX Item "field"
A single piece of numeric or string data that is part of a
longer \fBstring\fR, \fBrecord\fR, or \fBline\fR. Variable-width fields are usually
split up by \fBseparators\fR (so use \f(CW\*(C`split\*(C'\fR to extract the fields), while
fixed-width fields are usually at fixed positions (so use \f(CW\*(C`unpack\*(C'\fR).
\&\fBInstance variables\fR are also known as XfieldsX.
.IX Xref "fields (term)"
.IP "\s-1FIFO\s0" 4
.IX Item "FIFO"
First In, First Out. See also \fB\s-1LIFO\s0\fR. Also a nickname for a \fBnamed pipe\fR.
.IX Xref "First In, First Out (FIFO) FIFO (First In, First Out)"
.IP "file" 4
.IX Item "file"
A named collection of data, usually stored on disk in a
\&\fBdirectory\fR in a \fBfilesystem\fR. Roughly like a document, if youXre into
office metaphors. In modern filesystems, you can actually give a file more
than one name. Some files have special properties, like directories and
devices.
.IX Xref "files, defined"
.IP "file descriptor" 4
.IX Item "file descriptor"
The little number the \fBoperating
system\fR uses to keep track of which opened \fBfile\fR youXre talking about.
Perl hides the file descriptor inside a \fBstandard I/O\fR stream and then
attaches the stream to a \fBfilehandle\fR.
.IX Xref "file descriptors descriptors, file"
.IP "fileglob" 4
.IX Item "fileglob"
A XwildcardX match on \fBfilenames\fR. See the \f(CW\*(C`glob\*(C'\fR function.
.IX Xref "fileglobs"
.IP "filehandle" 4
.IX Item "filehandle"
An identifier (not necessarily related to the real
name of a file) that represents a particular instance of opening a file,
until you close it. If youXre going to open and close several different
files in succession, itXs fine to open each of them with the same
filehandle, so you donXt have to write out separate code to process each
file.
.IX Xref "filehandles, about"
.IP "filename" 4
.IX Item "filename"
One name for a file. This name is listed in a
\&\fBdirectory\fR. You can use it in an \f(CW\*(C`open\*(C'\fR to tell the \fBoperating system\fR
exactly which file you want to open, and associate the file with a
\&\fBfilehandle\fR, which will carry the subsequent identity of that file in
your program, until you close it.
.IX Xref "filenames, about"
.IP "filesystem" 4
.IX Item "filesystem"
A set of \fBdirectories\fR and \fBfiles\fR residing on a
partition of the disk. Sometimes known as a XpartitionX. You can change the
fileXs name or even move a file around from directory to directory within a
filesystem without actually moving the file itself, at least under Unix.
.IX Xref "filesystems, defined"
.IP "file test operator" 4
.IX Item "file test operator"
A built-in unary operator that you use to
determine whether something is \fBtrue\fR about a file, such as \f(CW\*(C`Xo
$filename\*(C'\fR to test whether youXre the owner of the file.
.IX Xref "file test operators, about"
.IP "filter" 4
.IX Item "filter"
A program designed to take a \fBstream\fR of input and
transform it into a stream of output.
.IX Xref "filters, defined"
.IP "first-come" 4
.IX Item "first-come"
The first \fB\s-1PAUSE\s0\fR
author to upload a \fBnamespace\fR automatically becomes the \fBprimary
maintainer\fR for that namespace. The Xfirst comeX permissions distinguish a
\&\fBprimary maintainer\fR who was assigned that role from one who received it
automatically.
.IX Xref "firstXcome permissions permissions, firstXcome"
.IP "flag" 4
.IX Item "flag"
We tend to avoid this term because it means so many things.
It may mean a command-line \fBswitch\fR that takes no argument itself (such as
PerlXs \f(CW\*(C`Xn\*(C'\fR and \f(CW\*(C`Xp\*(C'\fR flags) or, less frequently, a single-bit indicator
(such as the \f(CW\*(C`O_CREAT\*(C'\fR and \f(CW\*(C`O_EXCL\*(C'\fR flags used in \f(CW\*(C`sysopen\*(C'\fR). Sometimes
informally used to refer to certain regex modifiers.
.IX Xref "flags (term)"
.IP "floating point" 4
.IX Item "floating point"
A method of storing
numbers in Xscientific notationX, such that the precision of the number is
independent of its magnitude (the decimal point XfloatsX). Perl does its
numeric work with floating-point numbers (sometimes called XfloatsX) when
it canXt get away with using \fBintegers\fR. Floating-point numbers are mere
approximations of real numbers.
.IX Xref "floating point methods methods, floating point"
.IP "flush" 4
.IX Item "flush"
The act of emptying a \fBbuffer\fR,
often before itXs full.
.IX Xref "flushing buffers buffers, flushing"
.IP "\s-1FMTEYEWTK\s0" 4
.IX Item "FMTEYEWTK"
Far More Than Everything You Ever Wanted To Know. An
exhaustive treatise on one narrow topic, something of a super\-\fB\s-1FAQ\s0\fR. See
Tom for far more.
.IX Xref "FMTEYEWTK acronym"
.IP "foldcase" 4
.IX Item "foldcase"
The casemap used in Unicode when comparing or matching
without regard to case. Comparing lower\-, title\-, or uppercase are all
unreliable due to UnicodeXs complex, one-to-many case mappings. Foldcase is
a \fBlowercase\fR variant (using a partially decomposed \fBnormalization\fR form
for certain codepoints) created specifically to resolve this.
.IX Xref "foldcase (term)"
.IP "fork" 4
.IX Item "fork"
To create a child \fBprocess\fR
identical to the parent process at its moment of conception, at least until
it gets ideas of its own. A thread with protected memory.
.IX Xref "forking processes processes, forking"
.IP "formal arguments" 4
.IX Item "formal arguments"
The generic names by which a
\&\fBsubroutine\fR knows its \fBarguments\fR. In many languages, formal arguments
are always given individual names; in Perl, the formal arguments are just
the elements of an array. The formal arguments to a Perl program are
\&\f(CW$ARGV[0]\fR, \f(CW$ARGV[1]\fR, and so on. Similarly, the formal arguments to a
Perl subroutine are \f(CW$_[0]\fR, \f(CW$_[1]\fR, and so on. You may give the
arguments individual names by assigning the values to a \f(CW\*(C`my\*(C'\fR list. See
also \fBactual arguments\fR.
.IX Xref "formal arguments arguments, formal"
.IP "format" 4
.IX Item "format"
A specification of how many spaces and digits and things
to put somewhere so that whatever youXre printing comes out nice and
pretty.
.IX Xref "formats, defined"
.IP "freely available" 4
.IX Item "freely available"
Means you donXt have to pay money to get it, but
the copyright on it may still belong to someone else (like Larry).
.IX Xref "freely available (term)"
.IP "freely redistributable" 4
.IX Item "freely redistributable"
Means youXre not in legal trouble if you
give a bootleg copy of it to your friends and we find out about it. In
fact, weXd rather you gave a copy to all your friends.
.IX Xref "freely redistributable (term)"
.IP "freeware" 4
.IX Item "freeware"
Historically, any software that you give away,
particularly if you make the source code available as well. Now often
called \fBopen source software\fR. Recently there has been a trend to use the
term in contradistinction to \fBopen source software\fR, to refer only to free
software released under the Free Software
FoundationXs \s-1GPL \s0(General Public License), but this is difficult to justify
etymologically.
.IX Xref "freeware (term) Free Software Foundation"
.IP "function" 4
.IX Item "function"
Mathematically, a mapping of each of a set of input
values to a particular output value. In computers, refers to a
\&\fBsubroutine\fR or \fBoperator\fR that returns a \fBvalue\fR. It may or may not
have input values (called \fBarguments\fR).
.IX Xref "functions, about"
.IP "funny character" 4
.IX Item "funny character"
Someone like Larry, or one of his
peculiar friends. Also refers to the strange prefixes that Perl requires as
noun markers on its variables.
.IX Xref "funny characters characters, funny"
.SS "G"
.IX Subsection "G"
.IP "garbage collection" 4
.IX Item "garbage collection"
A misnamed featureXit should be called,
Xexpecting your mother to pick up after youX. Strictly speaking, Perl
doesnXt do this, but it relies on a reference-counting mechanism to keep
things tidy. However, we rarely speak strictly and will often refer to the
reference-counting scheme as a form of garbage collection. (If itXs any
comfort, when your interpreter exits, a XrealX garbage collector runs to
make sure everything is cleaned up if youXve been messy with circular
references and such.)
.IX Xref "garbage collection, defined"
.IP "\s-1GID\s0" 4
.IX Item "GID"
Group IDXin Unix, the numeric group \s-1ID\s0
that the \fBoperating system\fR uses to identify you and members of your
\&\fBgroup\fR.
.IX Xref "GID (Group ID) Group ID (GID)"
.IP "glob" 4
.IX Item "glob"
Strictly, the shellXs \f(CW\*(C`*\*(C'\fR character, which will match
a XglobX of characters when youXre trying to generate a list of filenames.
Loosely, the act of using globs and similar symbols to do pattern matching.
See also \fBfileglob\fR and \fBtypeglob\fR.
.IX Xref "glob (* character)"
.IP "global" 4
.IX Item "global"
Something you can see from anywhere, usually used of
\&\fBvariables\fR and \fBsubroutines\fR that are visible everywhere in your
program.  In Perl, only certain special variables are truly globalXmost
variables (and all subroutines) exist only in the current \fBpackage\fR.
Global variables can be declared with \f(CW\*(C`our\*(C'\fR. See XGlobal DeclarationsX in
Camel chapter 4, XStatements and DeclarationsX.
.IX Xref "global (term)"
.IP "global destruction" 4
.IX Item "global destruction"
The \fBgarbage collection\fR of globals (and the running
of any associated object destructors) that takes place when a Perl
\&\fBinterpreter\fR is being shut down. Global destruction should not be
confused with the Apocalypse, except perhaps when it should.
.IX Xref "global destruction"
.IP "glue language" 4
.IX Item "glue language"
A language such as Perl that is good at hooking things
together that werenXt intended to be hooked together.
.IX Xref "glue language"
.IP "granularity" 4
.IX Item "granularity"
The size of the pieces youXre dealing with, mentally
speaking.
.IX Xref "granularity"
.IP "grapheme" 4
.IX Item "grapheme"
A graphene is an allotrope of carbon arranged in a
hexagonal crystal lattice one atom thick. A \fBgrapheme\fR, or more fully, a
\&\fIgrapheme cluster string\fR is a single user-visible \fBcharacter\fR, which may
in turn be several characters (\fBcodepoints\fR) long. For example, a carriage
return plus a line feed is a single grapheme but two characters, while a
\&\s-1XXX\s0 is a single grapheme but one, two, or even three characters, depending
on \fBnormalization\fR.
.IX Xref "graphemes, defined"
.IP "greedy" 4
.IX Item "greedy"
A \fBsubpattern\fR whose
\&\fBquantifier\fR wants to match as many things as possible.
.IX Xref "greedy subpatterns subpatterns, greedy"
.IP "grep" 4
.IX Item "grep"
Originally from the old Unix editor command for XGlobally
search for a Regular Expression and Print itX, now used in the general
sense of any kind of search, especially text searches. Perl has a built-in
\&\f(CW\*(C`grep\*(C'\fR function that searches a list for elements matching any given
criterion, whereas the \fBgrep\fR(1) program searches for lines matching a
\&\fBregular expression\fR in one or more files.
.IX Xref "grep function"
.IP "group" 4
.IX Item "group"
A set of users of which you are a member. In some
operating systems (like Unix), you can give certain file access permissions
to other members of your group.
.IX Xref "groups, defined"
.IP "\s-1GV\s0" 4
.IX Item "GV"
An internal Xglob valueX typedef,
holding a \fBtypeglob\fR. The \f(CW\*(C`GV\*(C'\fR type is a subclass of \fB\s-1SV\s0\fR.
.IX Xref "GV (glob value) glob value (GV)"
.SS "H"
.IX Subsection "H"
.IP "hacker" 4
.IX Item "hacker"
Someone who is brilliantly persistent in solving technical
problems, whether these involve golfing, fighting orcs, or programming.
Hacker is a neutral term, morally speaking. Good hackers are not to be
confused with evil \fBcrackers\fR or clueless \fBscript kiddies\fR. If you
confuse them, we will presume that you are either evil or clueless.
.IX Xref "hackers"
.IP "handler" 4
.IX Item "handler"
A \fBsubroutine\fR or \fBmethod\fR that Perl calls when your
program needs to respond to some internal event, such as a \fBsignal\fR, or an
encounter with an operator subject to \fBoperator overloading\fR. See also
\&\fBcallback\fR.
.IX Xref "handlers, defined"
.IP "hard reference" 4
.IX Item "hard reference"
A \fBscalar\fR \fBvalue\fR containing
the actual address of a \fBreferent\fR, such that the referentXs \fBreference\fR
count accounts for it. (Some hard references are held internally, such as
the implicit reference from one of a \fBtypeglob\fRXs variable slots to its
corresponding referent.) A hard reference is different from a \fBsymbolic
reference\fR.
.IX Xref "hard references, about references, hard"
.IP "hash" 4
.IX Item "hash"
An unordered association of \fBkey\fR/\fBvalue\fR pairs, stored such that you can easily use a string \fBkey\fR to
look up its associated data \fBvalue\fR. This glossary is like a hash, where
the word to be defined is the key and the definition is the value. A hash
is also sometimes septisyllabically called an Xassociative arrayX, which is
a pretty good reason for simply calling it a XhashX instead.
.IX Xref "hashes, about key value pairs, about"
.IP "hash table" 4
.IX Item "hash table"
A data structure used internally by Perl for implementing
associative arrays (hashes) efficiently. See also \fBbucket\fR.
.IX Xref "hash tables"
.IP "header file" 4
.IX Item "header file"
A file containing certain required
definitions that you must include XaheadX of the rest of your program to do
certain obscure operations. A C header file has a \fI.h\fR extension. Perl
doesnXt really have header files, though historically Perl has sometimes
used translated \fI.h\fR files with a \fI.ph\fR extension. See \f(CW\*(C`require\*(C'\fR in
Camel chapter 27, XFunctionsX. (Header files have been superseded by the
\&\fBmodule\fR mechanism.)
.IX Xref "header files files, header"
.IP "here document" 4
.IX Item "here document"
So called because of a similar construct in \fBshells\fR that
pretends that the \fBlines\fR following the \fBcommand\fR are a separate \fBfile\fR
to be fed to the command, up to some terminating string. In Perl, however,
itXs just a fancy form of quoting.
.IX Xref "here documents"
.IP "hexadecimal" 4
.IX Item "hexadecimal"
A number in base 16, XhexX for short. The digits for 10
through 15 are customarily represented by the letters \f(CW\*(C`a\*(C'\fR through \f(CW\*(C`f\*(C'\fR.
Hexadecimal constants in Perl start with \f(CW\*(C`0x\*(C'\fR. See also the \f(CW\*(C`hex\*(C'\fR
function in Camel chapter 27, XFunctionsX.
.IX Xref "hexadecimals"
.IP "home directory" 4
.IX Item "home directory"
The directory you are put into when
you log in. On a Unix system, the name is often placed into \f(CW$ENV{HOME}\fR
or \f(CW$ENV{LOGDIR}\fR by \fIlogin\fR, but you can also find it with
\&\f(CW\*(C`(get\*(C'\fR\f(CW\*(C`pwuid($<))[7]\*(C'\fR. (Some platforms do not have a concept of a
home directory.)
.IX Xref "home directory directories, home"
.IP "host" 4
.IX Item "host"
The computer on which a program or other data resides.
.IX Xref "host computers"
.IP "hubris" 4
.IX Item "hubris"
Excessive pride, the sort of thing for which Zeus zaps
you.  Also the quality that makes you write (and maintain) programs that
other people wonXt want to say bad things about. Hence, the third great
virtue of a programmer. See also \fBlaziness\fR and \fBimpatience\fR.
.IX Xref "hubris quality"
.IP "\s-1HV\s0" 4
.IX Item "HV"
Short for a Xhash valueX typedef, which
holds PerlXs internal representation of a hash. The \f(CW\*(C`HV\*(C'\fR type is a
subclass of \fB\s-1SV\s0\fR.
.IX Xref "HV (hash value) hash value (HV)"
.SS "I"
.IX Subsection "I"
.IP "identifier" 4
.IX Item "identifier"
A legally formed name for most anything in which a
computer program might be interested. Many languages (including Perl) allow
identifiers to start with an alphabetic character, and then contain
alphabetics and digits. Perl also allows connector punctuation like the
underscore character wherever it allows alphabetics. (Perl also has more
complicated names, like \fBqualified\fR names.)
.IX Xref "identifiers, defined"
.IP "impatience" 4
.IX Item "impatience"
The anger you feel when the computer is being lazy.
This makes you write programs that donXt just react to your needs, but
actually anticipate them. Or at least that pretend to. Hence, the second
great virtue of a programmer. See also \fBlaziness\fR and \fBhubris\fR.
.IX Xref "impatience quality"
.IP "implementation" 4
.IX Item "implementation"
How a piece of code actually goes about doing its
job. Users of the code should not count on implementation details staying
the same unless they are part of the published \fBinterface\fR.
.IX Xref "implementation (term)"
.IP "import" 4
.IX Item "import"
To gain access to symbols that are exported from another
module. See \f(CW\*(C`use\*(C'\fR in Camel chapter 27, XFunctionsX.
.IX Xref "import (term)"
.IP "increment" 4
.IX Item "increment"
To increase the value of
something by 1 (or by some other number, if so specified).
.IX Xref "incrementing values values, incrementing"
.IP "indexing" 4
.IX Item "indexing"
In olden days, the act of looking up a \fBkey\fR in an
actual index (such as a phone book). But now it's merely the act of using
any kind of key or position to find the corresponding \fBvalue\fR, even if no
index is involved. Things have degenerated to the point that PerlXs
\&\f(CW\*(C`index\*(C'\fR function merely locates the position (index) of one string in
another.
.IX Xref "indexing (term)"
.IP "indirect filehandle" 4
.IX Item "indirect filehandle"
An \fBexpression\fR that
evaluates to something that can be used as a \fBfilehandle\fR: a \fBstring\fR
(filehandle name), a \fBtypeglob\fR, a typeglob \fBreference\fR, or a low-level
\&\fB\s-1IO\s0\fR object.
.IX Xref "indirect filehandles filehandles, indirect"
.IP "indirection" 4
.IX Item "indirection"
If something in a program isnXt the value youXre
looking for but indicates where the value is, thatXs indirection. This can
be done with either \fBsymbolic references\fR or \fBhard\fR.
.IX Xref "indirection (term)"
.IP "indirect object" 4
.IX Item "indirect object"
In English grammar, a short
noun phrase between a verb and its direct object indicating the beneficiary
or recipient of the action. In Perl, \f(CW\*(C`print STDOUT "$foo\en";\*(C'\fR can be
understood as Xverb indirect-object objectX, where \f(CW\*(C`STDOUT\*(C'\fR is the
recipient of the \f(CW\*(C`print\*(C'\fR action, and \f(CW"$foo"\fR is the object being
printed.  Similarly, when invoking a \fBmethod\fR, you might place the
invocant in the dative slot between the method and its arguments:
.IX Xref "indirect objects, defined objects, indirect"
.Sp
.Vb 3
\&    $gollum = new Pathetic::Creature "Sme\*'agol";
\&    give $gollum "Fisssssh!";
\&    give $gollum "Precious!";
.Ve
.IP "indirect object slot" 4
.IX Item "indirect object slot"
The syntactic position falling between a method call
and its arguments when using the indirect object invocation syntax. (The
slot is distinguished by the absence of a comma between it and the next
argument.) \f(CW\*(C`STDERR\*(C'\fR is in the indirect object slot here:
.IX Xref "indirect object slot"
.Sp
.Vb 1
\&    print STDERR "Awake! Awake! Fear, Fire, Foes! Awake!\en";
.Ve
.IP "infix" 4
.IX Item "infix"
An \fBoperator\fR that comes in between its \fBoperands\fR,
such as multiplication in \f(CW\*(C`24 * 7\*(C'\fR.
.IX Xref "infix operators"
.IP "inheritance" 4
.IX Item "inheritance"
What you get from your ancestors, genetically or
otherwise. If you happen to be a \fBclass\fR, your ancestors are called \fBbase
classes\fR and your descendants are called \fBderived classes\fR. See \fBsingle
inheritance\fR and \fBmultiple inheritance\fR.
.IX Xref "inheritance, defined"
.IP "instance" 4
.IX Item "instance"
Short for Xan instance of a classX, meaning an \fBobject\fR
of that \fBclass\fR.
.IX Xref "instances (term)"
.IP "instance data" 4
.IX Item "instance data"
See \fBinstance variable\fR.
.IX Xref "instance data"
.IP "instance method" 4
.IX Item "instance method"
A \fBmethod\fR of an \fBobject\fR, as
opposed to a \fBclass method\fR.
.IX Xref "instance methods methods, instance"
.Sp
A \fBmethod\fR whose \fBinvocant\fR is an \fBobject\fR, not a \fBpackage\fR name. Every
object of a class shares all the methods of that class, so an instance
method applies to all instances of the class, rather than applying to a
particular instance. Also see \fBclass method\fR.
.IP "instance variable" 4
.IX Item "instance variable"
An \fBattribute\fR of an \fBobject\fR; data stored with the particular object rather than with the class
as a whole.
.IX Xref "instance variables, defined variables, instance"
.IP "integer" 4
.IX Item "integer"
A number with no fractional (decimal) part. A counting
number, like 1, 2, 3, and so on, but including 0 and the negatives.
.IX Xref "integers (term)"
.IP "interface" 4
.IX Item "interface"
The services a piece of code promises to provide
forever, in contrast to its \fBimplementation\fR, which it should feel free to
change whenever it likes.
.IX Xref "interfaces (term)"
.IP "interpolation" 4
.IX Item "interpolation"
The insertion of a scalar or list value somewhere
in the middle of another value, such that it appears to have been there all
along. In Perl, variable interpolation happens in double-quoted strings and
patterns, and list interpolation occurs when constructing the list of
values to pass to a list operator or other such construct that takes a
\&\fI\f(CI\*(C`LIST\*(C'\fI\fR.
.IX Xref "interpolation, defined"
.IP "interpreter" 4
.IX Item "interpreter"
Strictly speaking, a program that reads a second
program and does what the second program says directly without turning the
program into a different form first, which is what \fBcompilers\fR do. Perl is
not an interpreter by this definition, because it contains a kind of
compiler that takes a program and turns it into a more executable form
(\fBsyntax trees\fR) within the \fIperl\fR process itself, which the Perl
\&\fBruntime\fR system then interprets.
.IX Xref "interpreters, defined"
.IP "invocant" 4
.IX Item "invocant"
The agent on whose behalf a \fBmethod\fR is invoked. In a
\&\fBclass\fR method, the invocant is a package name. In an \fBinstance\fR method,
the invocant is an object reference.
.IX Xref "invocants, defined"
.IP "invocation" 4
.IX Item "invocation"
The act of calling up a deity, daemon, program,
method, subroutine, or function to get it to do what you think itXs
supposed to do.  We usually XcallX subroutines but XinvokeX methods, since
it sounds cooler.
.IX Xref "invocation, method"
.IP "I/O" 4
.IX Item "I/O"
Input from, or output to, a \fBfile\fR or \fBdevice\fR.
.IX Xref "I O (Input Output), defined Input Output (I O), defined"
.IP "\s-1IO\s0" 4
.IX Item "IO"
An internal I/O object. Can also mean \fBindirect object\fR.
.IP "I/O layer" 4
.IX Item "I/O layer"
One of the filters between the data and what you get as input
or what you end up with as output.
.IX Xref "I O layer"
.IP "\s-1IPA\s0" 4
.IX Item "IPA"
India Pale Ale. Also the International Phonetic Alphabet, the
standard alphabet used for phonetic notation worldwide. Draws heavily on
Unicode, including many combining characters.
.IX Xref "International Phonetic Alphabet (IPA) IPA (International Phonetic Alphabet)"
.IP "\s-1IP\s0" 4
.IX Item "IP"
Internet Protocol, or
Intellectual
Property.
.IX Xref "Internet Protocol (IP) IP (Internet Protocol) IP (Intellectual Property) Intellectual Property (IP)"
.IP "\s-1IPC\s0" 4
.IX Item "IPC"
Interprocess Communication.
.IX Xref "Interprocess Communication IPC (Interprocess Communication), about communication"
.IP "is-a" 4
.IX Item "is-a"
A relationship between two \fBobjects\fR in which one
object is considered to be a more specific version of the other, generic
object: \s-1XA\s0 camel is a mammal.X Since the generic object really only exists
in a Platonic sense, we usually add a little abstraction to the notion of
objects and think of the relationship as being between a generic \fBbase
class\fR and a specific \fBderived class\fR. Oddly enough, Platonic classes
donXt always have Platonic relationshipsXsee \fBinheritance\fR.
.IX Xref "isXa relationship"
.IP "iteration" 4
.IX Item "iteration"
Doing something repeatedly.
.IX Xref "iteration"
.IP "iterator" 4
.IX Item "iterator"
A special programming gizmo that keeps track of where you are
in something that youXre trying to iterate over. The \f(CW\*(C`foreach\*(C'\fR loop in
Perl contains an iterator; so does a hash, allowing you to \f(CW\*(C`each\*(C'\fR through
it.
.IX Xref "iterators"
.IP "\s-1IV\s0" 4
.IX Item "IV"
The integer four, not to be
confused with six, TomXs favorite editor. \s-1IV\s0 also means an internal Integer
Value of the type a \fBscalar\fR can hold, not to be confused with an \fB\s-1NV\s0\fR.
.IX Xref "IV (Integer Value) Integer Value (IV)"
.SS "J"
.IX Subsection "J"
.IP "\s-1JAPH\s0" 4
.IX Item "JAPH"
XJust Another Perl HackerX, a clever but cryptic bit of Perl
code that, when executed, evaluates to that string. Often used to
illustrate a particular Perl feature, and something of an ongoing
Obfuscated Perl Contest seen in \s-1USENET\s0 signatures.
.IX Xref "JAPH acronym"
.SS "K"
.IX Subsection "K"
.IP "key" 4
.IX Item "key"
The string index to a \fBhash\fR, used to look up the \fBvalue\fR
associated with that key.
.IX Xref "keys, defined"
.IP "keyword" 4
.IX Item "keyword"
See \fBreserved words\fR.
.SS "L"
.IX Subsection "L"
.IP "label" 4
.IX Item "label"
A name you give to a \fBstatement\fR so that you can talk
about that statement elsewhere in the program.
.IX Xref "labels, defined"
.IP "laziness" 4
.IX Item "laziness"
The quality that makes you go to great effort to reduce
overall energy expenditure. It makes you write labor-saving programs that
other people will find useful, and then document what you wrote so you
donXt have to answer so many questions about it. Hence, the first great
virtue of a programmer. Also hence, this book. See also \fBimpatience\fR and
\&\fBhubris\fR.
.IX Xref "laziness quality"
.IP "leftmost longest" 4
.IX Item "leftmost longest"
The preference of the \fBregular expression\fR engine to match the
leftmost occurrence of a \fBpattern\fR, then given a position at which a match
will occur, the preference for the longest match (presuming the use of a
\&\fBgreedy\fR quantifier). See Camel chapter 5, XPattern MatchingX for \fImuch\fR
more on this subject.
.IX Xref "leftmost longest preference regular expressions, leftmost longest preference"
.IP "left shift" 4
.IX Item "left shift"
A \fBbit shift\fR that multiplies the
number by some power of 2.
.IX Xref "left shift (<<) bit operator bitXshift operators, left shift << (left shift) bit operator"
.IP "lexeme" 4
.IX Item "lexeme"
Fancy term for a \fBtoken\fR.
.IX Xref "lexeme (token)"
.IP "lexer" 4
.IX Item "lexer"
Fancy term for a \fBtokener\fR.
.IX Xref "lexer (tokener)"
.IP "lexical analysis" 4
.IX Item "lexical analysis"
Fancy term for \fBtokenizing\fR.
.IX Xref "lexical analysis"
.IP "lexical scoping" 4
.IX Item "lexical scoping"
Looking at your \fIOxford English
Dictionary\fR through a microscope. (Also known as \fBstatic scoping\fR, because
dictionaries donXt change very fast.) Similarly, looking at variables
stored in a private dictionary (namespace) for each scope, which are
visible only from their point of declaration down to the end of the lexical scope in which they are declared. XSyn.
\&\fBstatic scoping\fR. XAnt. \fBdynamic scoping\fR.
.IX Xref "lexical scopes, defined scopes static scopes scopes, static"
.IP "lexical variable" 4
.IX Item "lexical variable"
A \fBvariable\fR subject to
\&\fBlexical scoping\fR, declared by \f(CW\*(C`my\*(C'\fR. Often just called a XlexicalX. (The
\&\f(CW\*(C`our\*(C'\fR declaration declares a lexically scoped name for a global variable,
which is not itself a lexical variable.)
.IX Xref "lexical variables, about variables, lexical"
.IP "library" 4
.IX Item "library"
Generally, a collection of procedures. In ancient
days, referred to a collection of subroutines in a \fI.pl\fR file. In modern
times, refers more often to the entire collection of Perl \fBmodules\fR on
your system.
.IX Xref "libraries, defined"
.IP "\s-1LIFO\s0" 4
.IX Item "LIFO"
Last In, First Out. See also \fB\s-1FIFO\s0\fR. A \s-1LIFO\s0 is usually called a
\&\fBstack\fR.
.IX Xref "Last In, First Out (LIFO) LIFO (Last In, First Out) stacks, defined"
.IP "line" 4
.IX Item "line"
In Unix, a sequence of zero or more nonnewline characters
terminated with a \fBnewline\fR character. On non-Unix machines, this is
emulated by the C library even if the underlying \fBoperating system\fR has
different ideas.
.IX Xref "line (term)"
.IP "linebreak" 4
.IX Item "linebreak"
A \fBgrapheme\fR consisting of either a carriage return followed
by a line feed or any character with the Unicode Vertical Space \fBcharacter
property\fR.
.IX Xref "linebreaks"
.IP "line buffering" 4
.IX Item "line buffering"
Used by a \fBstandard I/O\fR output stream that
flushes its \fBbuffer\fR after every \fBnewline\fR. Many standard I/O libraries
automatically set up line buffering on output that is going to the terminal.
.IX Xref "line buffering buffering, line"
.IP "line number" 4
.IX Item "line number"
The number of lines read previous to this one, plus 1. Perl
keeps a separate line number for each source or input file it opens. The
current source fileXs line number is represented by \f(CW\*(C`_\|_LINE_\|_\*(C'\fR. The
current input line number (for the file that was most recently read via
\&\f(CW\*(C`<FH>\*(C'\fR) is represented by the \f(CW$.\fR (\f(CW$INPUT_LINE_NUMBER\fR)
variable. Many error messages report both values, if available.
.IX Xref "line number"
.IP "link" 4
.IX Item "link"
Used as a noun, a name in a \fBdirectory\fR that represents a
\&\fBfile\fR. A given file can have multiple links to it. ItXs like having the
same phone number listed in the phone directory under different names. As a
verb, to resolve a partially \fBcompiled\fR fileXs unresolved symbols into a
(nearly) executable image. Linking can generally be static or dynamic,
which has nothing to do with static or dynamic scoping.
.IX Xref "links, defined"
.IP "\s-1LIST\s0" 4
.IX Item "LIST"
A syntactic construct representing a
comma\- separated list of expressions, evaluated to produce a \fBlist value\fR.
Each \fBexpression\fR in a \fI\f(CI\*(C`LIST\*(C'\fI\fR is evaluated in \fBlist context\fR and
interpolated into the list value.
.IX Xref "LIST construct constructs, LIST"
.IP "list" 4
.IX Item "list"
An ordered set of scalar values.
.IX Xref "lists, defined"
.IP "list context" 4
.IX Item "list context"
The situation in which an \fBexpression\fR is
expected by its surroundings (the code calling it) to return a list of
values rather than a single value. Functions that want a \fI\f(CI\*(C`LIST\*(C'\fI\fR of
arguments tell those arguments that they should produce a list value. See
also \fBcontext\fR.
.IX Xref "list context context, list"
.IP "list operator" 4
.IX Item "list operator"
An \fBoperator\fR that does something with a list of
values, such as \f(CW\*(C`join\*(C'\fR or \f(CW\*(C`grep\*(C'\fR. Usually used for named built-in
operators (such as \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`unlink\*(C'\fR, and \f(CW\*(C`system\*(C'\fR) that do not require
parentheses around their \fBargument\fR list.
.IX Xref "list operators, about"
.IP "list value" 4
.IX Item "list value"
An unnamed list of temporary scalar
values that may be passed around within a program from any list-generating
function to any function or construct that provides a \fBlist context\fR.
.IX Xref "list values, about values, list"
.IP "literal" 4
.IX Item "literal"
A token in a programming language, such as a number or
\&\fBstring\fR, that gives you an actual \fBvalue\fR instead of merely representing
possible values as a \fBvariable\fR does.
.IX Xref "literals, defined"
.IP "little-endian" 4
.IX Item "little-endian"
From Swift: someone
who eats eggs little end first. Also used of computers that store the least
significant \fBbyte\fR of a word at a lower byte address than the most
significant byte. Often considered superior to big-endian machines. See
also \fBbig-endian\fR.
.IX Xref "littleXendian, defined endianness, littleXendian"
.IP "local" 4
.IX Item "local"
Not meaning the same thing everywhere. A global
variable in Perl can be localized inside a \fBdynamic scope\fR via the
\&\f(CW\*(C`local\*(C'\fR operator.
.IX Xref "local operator, about"
.IP "logical operator" 4
.IX Item "logical operator"
Symbols representing the concepts XandX, XorX,
XxorX, and XnotX.
.IX Xref "logical operators, about"
.IP "lookahead" 4
.IX Item "lookahead"
An \fBassertion\fR that peeks at the string to the right of the current match location.
.IX Xref "lookahead assertions assertions (in regexes), lookahead"
.IP "lookbehind" 4
.IX Item "lookbehind"
An \fBassertion\fR that peeks at the string to the left of the current match
location.
.IX Xref "lookbehind assertions assertions (in regexes), lookbehind"
.IP "loop" 4
.IX Item "loop"
A construct that
performs something repeatedly, like a roller coaster.
.IX Xref "loop constructs and statements, about constructs, loop"
.IP "loop control statement" 4
.IX Item "loop control statement"
Any statement within the body of a loop that can
make a loop prematurely stop looping or skip an \fBiteration\fR. Generally,
you shouldnXt try this on roller coasters.
.IX Xref "statements, loop control"
.IP "loop label" 4
.IX Item "loop label"
A kind of key or name attached to a loop (or
roller coaster) so that loop control statements can talk about which loop
they want to control.
.IX Xref "loop labels labels, loop"
.IP "lowercase" 4
.IX Item "lowercase"
In Unicode, not just
characters with the General Category of Lowercase Letter, but any character
with the Lowercase property, including Modifier Letters, Letter Numbers,
some Other Symbols, and one Combining Mark.
.IX Xref "lowercase characters characters, lowercase"
.IP "lvaluable" 4
.IX Item "lvaluable"
Able to serve as an \fBlvalue\fR.
.IX Xref "lvaluable function functions, lvaluable"
.IP "lvalue" 4
.IX Item "lvalue"
Term used by language lawyers for a
storage location you can assign a new \fBvalue\fR to, such as a \fBvariable\fR or
an element of an \fBarray\fR. The XlX is short for XleftX, as in the left side
of an assignment, a typical place for lvalues. An \fBlvaluable\fR function or
expression is one to which a value may be assigned, as in \f(CW\*(C`pos($x) = 10\*(C'\fR.
.IX Xref "lvalue (term) values, lvalue"
.IP "lvalue modifier" 4
.IX Item "lvalue modifier"
An adjectival pseudofunction that
warps the meaning of an \fBlvalue\fR in some declarative fashion. Currently
there are three lvalue modifiers: \f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, and \f(CW\*(C`local\*(C'\fR.
.IX Xref "lvalue modifier modifiers, lvalue"
.SS "M"
.IX Subsection "M"
.IP "magic" 4
.IX Item "magic"
Technically speaking, any extra semantics attached to a
variable such as \f(CW$!\fR, \f(CW$0\fR, \f(CW%ENV\fR, or \f(CW%SIG\fR, or to any tied
variable.  Magical things happen when you diddle those variables.
.IX Xref "magic (term)"
.IP "magical increment" 4
.IX Item "magical increment"
An \fBincrement\fR operator that knows how to
bump up \s-1ASCII\s0 alphabetics as well as numbers.
.IX Xref "magical increment operator"
.IP "magical variables" 4
.IX Item "magical variables"
Special variables that have side
effects when you access them or assign to them. For example, in Perl,
changing elements of the \f(CW%ENV\fR array also changes the corresponding
environment variables that subprocesses will use. Reading the \f(CW$!\fR
variable gives you the current system error number or message.
.IX Xref "magical variables variables, magical"
.IP "Makefile" 4
.IX Item "Makefile"
A file that controls the compilation of a program. Perl programs
donXt usually need a \fBMakefile\fR because the Perl compiler has plenty of
self-control.
.IX Xref "Makefile"
.IP "man" 4
.IX Item "man"
The Unix program that displays online documentation
(manual pages) for you.
.IX Xref "man program (Unix)"
.IP "manpage" 4
.IX Item "manpage"
A XpageX from the manuals, typically accessed via the
\&\fIman\fR(1) command. A manpage contains a \s-1SYNOPSIS,\s0 a \s-1DESCRIPTION,\s0 a list of
\&\s-1BUGS,\s0 and so on, and is typically longer than a page. There are manpages
documenting \fBcommands\fR, \fBsyscalls\fR, \fBlibrary\fR \fBfunctions\fR, \fBdevices\fR,
\&\fBprotocols\fR, \fBfiles\fR, and such. In this book, we call any piece of
standard Perl documentation (like perlop or perldelta) a manpage, no
matter what format itXs installed in on your system.
.IX Xref "manpages, defined"
.IP "matching" 4
.IX Item "matching"
See \fBpattern matching\fR.
.IX Xref "matching"
.IP "member data" 4
.IX Item "member data"
See \fBinstance variable\fR.
.IX Xref "member data"
.IP "memory" 4
.IX Item "memory"
This always means your main memory, not your disk.
Clouding the issue is the fact that your machine may implement
\&\fBvirtual\fR memory; that is, it will pretend that it has more memory than
it really does, and itXll use disk space to hold inactive bits. This can
make it seem like you have a little more memory than you really do, but
itXs not a substitute for real memory. The best thing that can be said
about virtual memory is that it lets your performance degrade gradually
rather than suddenly when you run out of real memory. But your program
can die when you run out of virtual memory, tooXif you havenXt thrashed
your disk to death first.
.IX Xref "memory, defined"
.IP "metacharacter" 4
.IX Item "metacharacter"
A \fBcharacter\fR that is \fInot\fR supposed to be treated normally. Which characters
are to be treated specially as metacharacters varies greatly from context to
context. Your \fBshell\fR will have certain metacharacters, double-quoted Perl
\&\fBstrings\fR have other metacharacters,
and \fBregular expression\fR patterns have all the double-quote metacharacters plus
some extra ones of their own.
.IX Xref "metacharacters, about characters, regex metacharacters regular expressions, metacharacters and"
.IP "metasymbol" 4
.IX Item "metasymbol"
Something weXd call a
\&\fBmetacharacter\fR except that itXs a sequence of more than one character.
Generally, the first character in the sequence must be a true metacharacter
to get the other characters in the metasymbol to misbehave along with it.
.IX Xref "metasymbols, about escape sequences"
.IP "method" 4
.IX Item "method"
A kind of action that an \fBobject\fR can take if you tell
it to. See Camel chapter 12, XObjectsX.
.IX Xref "methods, defined"
.IP "method resolution order" 4
.IX Item "method resolution order"
The path Perl takes through \f(CW@INC\fR. By default, this is a double depth first
search, once looking for defined methods and once for \f(CW\*(C`AUTOLOAD\*(C'\fR. However,
Perl lets you configure this with \f(CW\*(C`mro\*(C'\fR.
.IX Xref "method resolution order (mro) mro (method resolution order)"
.IP "minicpan" 4
.IX Item "minicpan"
A \s-1CPAN \s0mirror that includes just the latest versions for each
distribution, probably created with \f(CW\*(C`CPAN::Mini\*(C'\fR. See
Camel chapter 19, \s-1XCPANX.\s0
.IX Xref "minicpan, defined CPAN (Comprehensive Perl Archive Network), minicpan and CPAN::Mini module"
.IP "minimalism" 4
.IX Item "minimalism"
The belief that Xsmall is beautifulX. Paradoxically, if you
say something in a small language, it turns out big, and if you say it in a
big language, it turns out small. Go figure.
.IX Xref "minimalism"
.IP "mode" 4
.IX Item "mode"
In the context of the \fIstat\fR(2) syscall, refers to the field
holding the \fBpermission bits\fR and the type of the \fBfile\fR.
.IX Xref "mode"
.IP "modifier" 4
.IX Item "modifier"
See \fBstatement modifier\fR, \fBregular expression\fR, and
\&\fBlvalue\fR, not necessarily in that order.
.IX Xref "modifiers, defined"
.IP "module" 4
.IX Item "module"
A \fBfile\fR that defines a \fBpackage\fR of (almost) the same
name, which can either \fBexport\fR symbols or function as an \fBobject\fR class.
(A moduleXs main \fI.pm\fR file may also load in other files in support of the
module.) See the \f(CW\*(C`use\*(C'\fR built-in.
.IX Xref "modules, defined"
.IP "modulus" 4
.IX Item "modulus"
An integer divisor when
youXre interested in the remainder instead of the quotient.
.IX Xref "modulus (%) operator % (modulus) operator"
.IP "mojibake" 4
.IX Item "mojibake"
When you speak one language and the computer thinks youXre
speaking another. YouXll see odd translations when you send \s-1UTFX8,\s0 for
instance, but the computer thinks you sent Latin\-1, showing all sorts of
weird characters instead. The term is written XXXXXXin Japanese and
means Xcharacter rotX, an apt description. Pronounced [\f(CW\*(C`modXibake\*(C'\fR] in
standard \fB\s-1IPA\s0\fR phonetics, or approximately Xmoh-jee-bah-kehX.
.IX Xref "mojibake"
.IP "monger" 4
.IX Item "monger"
Short for one member of \fBPerl mongers\fR, a
purveyor of Perl.
.IX Xref "mongers, Perl Perl mongers"
.IP "mortal" 4
.IX Item "mortal"
A temporary value scheduled to die when the
current statement finishes.
.IX Xref "mortal value values, mortal"
.IP "mro" 4
.IX Item "mro"
See \fBmethod resolution order\fR.
.IP "multidimensional array" 4
.IX Item "multidimensional array"
An array with multiple
subscripts for finding a single element. Perl implements these using
\&\fBreferences\fRXsee Camel chapter 9, XData StructuresX.
.IX Xref "multidimensional arrays arrays, multidimensional"
.IP "multiple inheritance" 4
.IX Item "multiple inheritance"
The features you got from
your mother and father, mixed together unpredictably. (See also
\&\fBinheritance\fR and \fBsingle inheritance\fR.) In computer languages (including
Perl), it is the notion that a given class may have multiple direct
ancestors or \fBbase classes\fR.
.IX Xref "multiple inheritance inheritance, multiple"
.SS "N"
.IX Subsection "N"
.IP "named pipe" 4
.IX Item "named pipe"
A \fBpipe\fR with a name embedded in the
\&\fBfilesystem\fR so that it can be accessed by two unrelated \fBprocesses\fR.
.IX Xref "named pipes pipes, names"
.IP "namespace" 4
.IX Item "namespace"
A domain of names. You neednXt worry about whether the
names in one such domain have been used in another. See \fBpackage\fR.
.IX Xref "namespaces, about"
.IP "NaN" 4
.IX Item "NaN"
Not a number. The value Perl uses
for certain invalid or inexpressible floating-point operations.
.IX Xref "NaN (not a number) not a number (NaN)"
.IP "network address" 4
.IX Item "network address"
The most important attribute of a socket, like your
telephoneXs telephone number. Typically an \s-1IP\s0 address. See also \fBport\fR.
.IX Xref "network address"
.IP "newline" 4
.IX Item "newline"
A single character that
represents the end of a line, with the \s-1ASCII\s0 value of 012 octal under Unix
(but 015 on a Mac), and represented by \f(CW\*(C`\en\*(C'\fR in Perl strings. For Windows
machines writing text files, and for certain physical devices like
terminals, the single newline gets automatically translated by your C
library into a line feed and a carriage return, but normally, no
translation is done.
.IX Xref "newline character characters, newline"
.IP "\s-1NFS\s0" 4
.IX Item "NFS"
Network File System, which allows you to mount a remote filesystem as if it were local.
.IX Xref "NFS (Network File System) Network File System (NFS)"
.IP "normalization" 4
.IX Item "normalization"
Converting a text string into an alternate but equivalent
\&\fBcanonical\fR (or compatible) representation that can then be compared for
equivalence. Unicode recognizes four different normalization forms: \s-1NFD,
NFC, NFKD,\s0 and \s-1NFKC.\s0
.IX Xref "normalization"
.IP "null character" 4
.IX Item "null character"
A character with the numeric value of
zero. ItXs used by C to terminate strings, but Perl allows strings to
contain a null.
.IX Xref "null character characters, null"
.IP "null list" 4
.IX Item "null list"
A \fBlist value\fR with zero elements, represented
in Perl by \f(CW\*(C`()\*(C'\fR.
.IX Xref "null lists lists, null"
.IP "null string" 4
.IX Item "null string"
A \fBstring\fR containing no characters, not to
be confused with a string containing a \fBnull character\fR, which has a
positive length and is \fBtrue\fR.
.IX Xref "null strings strings, null"
.IP "numeric context" 4
.IX Item "numeric context"
The situation in which an expression
is expected by its surroundings (the code calling it) to return a number.
See also \fBcontext\fR and \fBstring context\fR.
.IX Xref "numeric context context, numeric"
.IP "numification" 4
.IX Item "numification"
(Sometimes spelled \fInummification\fR and \fInummify\fR.) Perl lingo
for implicit conversion into a number; the related verb is \fInumify\fR.
\&\fINumification\fR is intended to rhyme with \fImummification\fR, and \fInumify\fR with
\&\fImummify\fR. It is unrelated to English \fInumen\fR, \fInumina\fR, \fInuminous\fR. We
originally forgot the extra \fIm\fR a long time ago, and some people got used to
our funny spelling, and so just as with \f(CW\*(C`HTTP_REFERER\*(C'\fRXs own missing letter,
our weird spelling has stuck around.
.IX Xref "numification"
.IP "\s-1NV\s0" 4
.IX Item "NV"
Short for Nevada, no part of
which will ever be confused with civilization. \s-1NV\s0 also means an internal
floating\- point Numeric Value of the type a \fBscalar\fR can hold, not to be
confused with an \fB\s-1IV\s0\fR.
.IX Xref "Numeric Value (NV) NV (Numeric Value)"
.IP "nybble" 4
.IX Item "nybble"
Half a \fBbyte\fR, equivalent to one \fBhexadecimal\fR digit, and worth
four \fBbits\fR.
.IX Xref "nybble"
.SS "O"
.IX Subsection "O"
.IP "object" 4
.IX Item "object"
An \fBinstance\fR of a \fBclass\fR. Something that XknowsX
what user-defined type (class) it is, and what it can do because of what
class it is. Your program can request an object to do things, but the
object gets to decide whether it wants to do them or not. Some objects are
more accommodating than others.
.IX Xref "objects, defined"
.IP "octal" 4
.IX Item "octal"
A number in base 8. Only the digits 0 through 7 are allowed. Octal
constants in Perl start with 0, as in 013. See also the \f(CW\*(C`oct\*(C'\fR function.
.IX Xref "octals"
.IP "offset" 4
.IX Item "offset"
How many things you have to skip
over when moving from the beginning of a string or array to a specific
position within it. Thus, the minimum offset is zero, not one, because you
donXt skip anything to get to the first item.
.IX Xref "offsets in strings strings, offsets in"
.IP "one-liner" 4
.IX Item "one-liner"
An entire computer program crammed into one line of
text.
.IX Xref "oneXliner programs"
.IP "open source software" 4
.IX Item "open source software"
Programs for which the source code is freely
available and freely redistributable, with no commercial strings attached.
For a more detailed definition, see <http://www.opensource.org/osd.html>.
.IX Xref "open source software"
.IP "operand" 4
.IX Item "operand"
An \fBexpression\fR that yields a \fBvalue\fR that an
\&\fBoperator\fR operates on. See also \fBprecedence\fR.
.IX Xref "operands (term)"
.IP "operating system" 4
.IX Item "operating system"
A special program that runs on the bare
machine and hides the gory details of managing \fBprocesses\fR and \fBdevices\fR.
Usually used in a looser sense to indicate a particular culture of
programming. The loose sense can be used at varying levels of specificity.
At one extreme, you might say that all versions of Unix and Unix-lookalikes
are the same operating system (upsetting many people, especially lawyers
and other advocates). At the other extreme, you could say this particular
version of this particular vendorXs operating system is different from any
other version of this or any other vendorXs operating system. Perl is much
more portable across operating systems than many other languages. See also
\&\fBarchitecture\fR and \fBplatform\fR.
.IX Xref "operating systems, defined"
.IP "operator" 4
.IX Item "operator"
A gizmo that transforms some number of input values to
some number of output values, often built into a language with a special
syntax or symbol. A given operator may have specific expectations about
what \fBtypes\fR of data you give as its arguments (\fBoperands\fR) and what type
of data you want back from it.
.IX Xref "operators, about"
.IP "operator overloading" 4
.IX Item "operator overloading"
A kind of
\&\fBoverloading\fR that you can do on built-in \fBoperators\fR to make them work
on \fBobjects\fR as if the objects were ordinary scalar values, but with the
actual semantics supplied by the object class. This is set up with the
overload \fBpragma\fRXsee Camel chapter 13, XOverloadingX.
.IX Xref "operator overloading, about overloading, operator"
.IP "options" 4
.IX Item "options"
See either \fBswitches\fR or \fBregular expression modifiers\fR.
.IX Xref "options"
.IP "ordinal" 4
.IX Item "ordinal"
An abstract characterXs integer value. Same thing as
\&\fBcodepoint\fR.
.IX Xref "ordinals (term)"
.IP "overloading" 4
.IX Item "overloading"
Giving additional meanings to a symbol or construct.
Actually, all languages do overloading to one extent or another, since
people are good at figuring out things from \fBcontext\fR.
.IX Xref "overloading, defined"
.IP "overriding" 4
.IX Item "overriding"
Hiding or invalidating some other definition of the
same name. (Not to be confused with \fBoverloading\fR, which adds definitions
that must be disambiguated some other way.) To confuse the issue further,
we use the word with two overloaded definitions: to describe how you can
define your own \fBsubroutine\fR to hide a built-in \fBfunction\fR of the same
name (see the section XOverriding Built-in FunctionsX in Camel chapter 11,
XModulesX), and to describe how you can define a replacement \fBmethod\fR in a
\&\fBderived class\fR to hide a \fBbase class\fRXs method of the same name (see
Camel chapter 12, XObjectsX).
.IX Xref "overriding, defined"
.IP "owner" 4
.IX Item "owner"
The one user (apart from the
superuser) who has absolute control over a \fBfile\fR. A file may also have a
\&\fBgroup\fR of users who may exercise joint ownership if the real owner
permits it. See \fBpermission bits\fR.
.IX Xref "ownership, file files, ownership of"
.SS "P"
.IX Subsection "P"
.IP "package" 4
.IX Item "package"
A \fBnamespace\fR for global \fBvariables\fR, \fBsubroutines\fR,
and the like, such that they can be kept separate from like-named
\&\fBsymbols\fR in other namespaces. In a sense, only the package is global,
since the symbols in the packageXs symbol table are only accessible from
code \fBcompiled\fR outside the package by naming the package. But in another
sense, all package symbols are also globalsXtheyXre just well-organized
globals.
.IX Xref "packages, defined"
.IP "pad" 4
.IX Item "pad"
Short for \fBscratchpad\fR.
.IX Xref "pads (scratchpads)"
.IP "parameter" 4
.IX Item "parameter"
See \fBargument\fR.
.IX Xref "parameters"
.IP "parent class" 4
.IX Item "parent class"
See \fBbase class\fR.
.IX Xref "parent classes classes, parent"
.IP "parse tree" 4
.IX Item "parse tree"
See \fBsyntax tree\fR.
.IX Xref "parse tree"
.IP "parsing" 4
.IX Item "parsing"
The subtle but sometimes brutal art of attempting to turn
your possibly malformed program into a valid \fBsyntax tree\fR.
.IX Xref "parsing, about"
.IP "patch" 4
.IX Item "patch"
To fix by applying one, as it were. In the realm of hackerdom, a
listing of the differences between two versions of a program as might be
applied by the \fBpatch\fR(1) program when you want to fix a bug or upgrade
your old version.
.IX Xref "patches"
.IP "\s-1PATH\s0" 4
.IX Item "PATH"
The list of
\&\fBdirectories\fR the system searches to find a program you want to
\&\fBexecute\fR.  The list is stored as one of your \fBenvironment variables\fR,
accessible in Perl as \f(CW$ENV{PATH}\fR.
.IX Xref "PATH environment variable variables, environment"
.IP "pathname" 4
.IX Item "pathname"
A fully qualified filename such as \fI/usr/bin/perl\fR. Sometimes
confused with \f(CW\*(C`PATH\*(C'\fR.
.IX Xref "pathname"
.IP "pattern" 4
.IX Item "pattern"
A template used in \fBpattern matching\fR.
.IX Xref "patterns, defined"
.IP "pattern matching" 4
.IX Item "pattern matching"
Taking a pattern, usually a \fBregular
expression\fR, and trying the pattern various ways on a string to see whether
thereXs any way to make it fit. Often used to pick interesting tidbits out
of a file.
.IX Xref "pattern matching, about"
.IP "\s-1PAUSE\s0" 4
.IX Item "PAUSE"
The Perl Authors Upload SErver (<http://pause.perl.org>), the gateway
for \fBmodules\fR on their way to \fB\s-1CPAN\s0\fR.
.IX Xref "Perl Authors Upload SErver (PAUSE) PAUSE (Perl Authors Upload SErver)"
.IP "Perl mongers" 4
.IX Item "Perl mongers"
A Perl user group, taking the form of its
name from the New York Perl mongers, the first Perl user group. Find one
near you at <http://www.pm.org>.
.IX Xref "Perl mongers mongers, Perl"
.IP "permission bits" 4
.IX Item "permission bits"
Bits that the \fBowner\fR of a file sets
or unsets to allow or disallow access to other people. These flag bits are
part of the \fBmode\fR word returned by the \f(CW\*(C`stat\*(C'\fR built-in when you ask
about a file. On Unix systems, you can check the \fIls\fR(1) manpage for more
information.
.IX Xref "permission bits bits, permission"
.IP "Pern" 4
.IX Item "Pern"
What you get when you do \f(CW\*(C`Perl++\*(C'\fR twice. Doing it only once
will curl your hair. You have to increment it eight times to shampoo your
hair. Lather, rinse, iterate.
.IX Xref "Pern (term)"
.IP "pipe" 4
.IX Item "pipe"
A direct \fBconnection\fR that carries the output of one
\&\fBprocess\fR to the input of another without an intermediate temporary file.
Once the pipe is set up, the two processes in question can read and write
as if they were talking to a normal file, with some caveats.
.IX Xref "pipes, defined"
.IP "pipeline" 4
.IX Item "pipeline"
A series of \fBprocesses\fR all in a row, linked by \fBpipes\fR, where
each passes its output stream to the next.
.IX Xref "pipeline"
.IP "platform" 4
.IX Item "platform"
The entire hardware and software context in which a
program runs. A program written in a platform-dependent language might
break if you change any of the following: machine, operating system,
libraries, compiler, or system configuration. The \fIperl\fR interpreter has
to be \fBcompiled\fR differently for each platform because it is implemented
in C, but programs written in the Perl language are largely platform
independent.
.IX Xref "platforms, defined"
.IP "pod" 4
.IX Item "pod"
The markup
used to embed documentation into your Perl code. Pod stands for XPlain old
documentationX. See Camel chapter 23, XPlain Old DocumentationX.
.IX Xref "pod (plain old documentation), about plain old documentation"
.IP "pod command" 4
.IX Item "pod command"
A sequence, such as \f(CW\*(C`=head1\*(C'\fR, that denotes
the start of a \fBpod\fR section.
.IX Xref "pod commands commands, pod"
.IP "pointer" 4
.IX Item "pointer"
A \fBvariable\fR in a language like C that contains the exact
memory location of some other item. Perl handles pointers internally so you
donXt have to worry about them. Instead, you just use symbolic pointers in
the form of \fBkeys\fR and \fBvariable\fR names, or \fBhard references\fR, which
arenXt pointers (but act like pointers and do in fact contain pointers).
.IX Xref "pointers"
.IP "polymorphism" 4
.IX Item "polymorphism"
The notion that you can tell an \fBobject\fR to do something
generic, and the object will interpret the command in different ways
depending on its type. [< Greek \s-1XXXX\- + XXXXX,\s0 many forms.]
.IX Xref "polymorphism"
.IP "port" 4
.IX Item "port"
The part of the address of a \s-1TCP\s0 or \s-1UDP\s0 socket that directs
packets to the correct process after finding the right machine, something
like the phone extension you give when you reach the company operator. Also
the result of converting code to run on a different platform than
originally intended, or the verb denoting this conversion.
.IX Xref "ports (term)"
.IP "portable" 4
.IX Item "portable"
Once upon a time, C code compilable under both \s-1BSD\s0 and
SysV. In general, code that can be easily converted to run on another
\&\fBplatform\fR, where XeasilyX can be defined however you like, and usually
is.  Anything may be considered portable if you try hard enough, such as a
mobile home or London Bridge.
.IX Xref "portability, about"
.IP "porter" 4
.IX Item "porter"
Someone who XcarriesX software from one \fBplatform\fR to another.
Porting programs written in platform-dependent languages such as C can be
difficult work, but porting programs like Perl is very much worth the
agony.
.IX Xref "porters"
.IP "possessive" 4
.IX Item "possessive"
Said of quantifiers and groups in patterns that refuse
to give up anything once theyXve gotten their mitts on it. Catchier and
easier to say than the even more formal \fInonbacktrackable\fR.
.IX Xref "possessive (term)"
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
The Portable Operating System Interface
specification.
.IX Xref "Portable Operating System Interface (POSIX), about POSIX (Portable Operating System Interface), about"
.IP "postfix" 4
.IX Item "postfix"
An \fBoperator\fR that follows its \fBoperand\fR, as in
\&\f(CW\*(C`$x++\*(C'\fR.
.IX Xref "postfix operator"
.IP "pp" 4
.IX Item "pp"
An internal shorthand for a
Xpush\- popX code; that is, C code implementing PerlXs stack machine.
.IX Xref "pp (pushXpop) code pushXpop (pp) code"
.IP "pragma" 4
.IX Item "pragma"
A standard module whose practical hints and
suggestions are received (and possibly ignored) at compile time. Pragmas
are named in all lowercase.
.IX Xref "pragmas, about modules"
.IP "precedence" 4
.IX Item "precedence"
The rules of
conduct that, in the absence of other guidance, determine what should
happen first.  For example, in the absence of parentheses, you always do
multiplication before addition.
.IX Xref "precedence rules, about operators, precedence rules"
.IP "prefix" 4
.IX Item "prefix"
An \fBoperator\fR that precedes its \fBoperand\fR, as in
\&\f(CW\*(C`++$x\*(C'\fR.
.IX Xref "prefix operators"
.IP "preprocessing" 4
.IX Item "preprocessing"
What some helper \fBprocess\fR did to transform the incoming
data into a form more suitable for the current process. Often done with an
incoming \fBpipe\fR. See also \fBC preprocessor\fR.
.IX Xref "preprocessing"
.IP "primary maintainer" 4
.IX Item "primary maintainer"
The author that \s-1PAUSE\s0 allows to assign \fBco-maintainer\fR 
permissions to a \fBnamespace\fR. A primary maintainer can give up this
distinction by assigning it to another \s-1PAUSE\s0 author. See Camel chapter 19,
\&\s-1XCPANX.\s0
.IX Xref "primary maintainer"
.IP "procedure" 4
.IX Item "procedure"
A \fBsubroutine\fR.
.IX Xref "procedures, defined"
.IP "process" 4
.IX Item "process"
An instance of a running program. Under multitasking
systems like Unix, two or more separate processes could be running the same
program independently at the same timeXin fact, the \f(CW\*(C`fork\*(C'\fR function is
designed to bring about this happy state of affairs. Under other operating
systems, processes are sometimes called XthreadsX, XtasksX, or XjobsX,
often with slight nuances in meaning.
.IX Xref "processes, defined"
.IP "program" 4
.IX Item "program"
See \fBscript\fR.
.IP "program generator" 4
.IX Item "program generator"
A system that algorithmically writes code for you in a
high-level language. See also \fBcode generator\fR.
.IX Xref "program generators"
.IP "progressive matching" 4
.IX Item "progressive matching"
\&\fBPattern matching\fR  matching>that picks up where it left off before.
.IX Xref "progressive matching pattern matching, progressive matching"
.IP "property" 4
.IX Item "property"
See either \fBinstance variable\fR or \fBcharacter property\fR.
.IX Xref "property"
.IP "protocol" 4
.IX Item "protocol"
In networking, an agreed-upon way of sending messages
back and forth so that neither correspondent will get too confused.
.IX Xref "protocols (term)"
.IP "prototype" 4
.IX Item "prototype"
An optional part of a \fBsubroutine\fR declaration telling
the Perl compiler how many and what flavor of arguments may be passed as
\&\fBactual arguments\fR, so you can write subroutine calls that parse much like
built-in functions. (Or donXt parse, as the case may be.)
.IX Xref "prototypes, about"
.IP "pseudofunction" 4
.IX Item "pseudofunction"
A construct that sometimes looks like a function but really
isnXt. Usually reserved for \fBlvalue\fR modifiers like \f(CW\*(C`my\*(C'\fR, for \fBcontext\fR
modifiers like \f(CW\*(C`scalar\*(C'\fR, and for the pick-your-own-quotes constructs,
\&\f(CW\*(C`q//\*(C'\fR, \f(CW\*(C`qq//\*(C'\fR, \f(CW\*(C`qx//\*(C'\fR, \f(CW\*(C`qw//\*(C'\fR, \f(CW\*(C`qr//\*(C'\fR, \f(CW\*(C`m//\*(C'\fR, \f(CW\*(C`s///\*(C'\fR, \f(CW\*(C`y///\*(C'\fR, and
\&\f(CW\*(C`tr///\*(C'\fR.
.IX Xref "pseudofunctions constructs, pseudofunctions functions, pseudofunctions"
.IP "pseudohash" 4
.IX Item "pseudohash"
Formerly, a reference to an array
whose initial element happens to hold a reference to a hash. You used to be
able to treat a pseudohash reference as either an array reference or a hash
reference. Pseduohashes are no longer supported.
.IX Xref "pseudohashes hashes, pseudohashes"
.IP "pseudoliteral" 4
.IX Item "pseudoliteral"
An \fBoperator\fR X\f(CW\*(C`that looks something like a \f(CBliteral\f(CW,
such as the output\-grabbing operator, <literal
moreinfo="none"\*(C'\fR`>\fI\f(CI\*(C`command\*(C'\fI\fR\f(CW\*(C`\`\*(C'\fR.
.IX Xref "pseudoliterals"
.IP "public domain" 4
.IX Item "public domain"
Something not owned by anybody. Perl is copyrighted and is
thus \fInot\fR in the public domainXitXs just \fBfreely available\fR and \fBfreely
redistributable\fR.
.IX Xref "public domain"
.IP "pumpkin" 4
.IX Item "pumpkin"
A notional XbatonX handed around the Perl community
indicating who is the lead integrator in some arena of development.
.IX Xref "pumpkin (term)"
.IP "pumpking" 4
.IX Item "pumpking"
A \fBpumpkin\fR holder, the person in charge of pumping the pump,
or at least priming it. Must be willing to play the part of the Great
Pumpkin now and then.
.IX Xref "pumpking"
.IP "\s-1PV\s0" 4
.IX Item "PV"
A Xpointer valueX, which is Perl
Internals Talk for a \f(CW\*(C`char*\*(C'\fR.
.IX Xref "PV (pointer value) pointer value (PV)"
.SS "Q"
.IX Subsection "Q"
.IP "qualified" 4
.IX Item "qualified"
Possessing a complete name. The symbol \f(CW$Ent::moot\fR is
qualified; \f(CW$moot\fR is unqualified. A fully qualified filename is specified
from the top-level directory.
.IX Xref "qualified (term)"
.IP "quantifier" 4
.IX Item "quantifier"
A component of a \fBregular expression\fR specifying how
many times the foregoing \fBatom\fR may occur.
.IX Xref "quantifiers, about"
.SS "R"
.IX Subsection "R"
.IP "race condition" 4
.IX Item "race condition"
A race condition exists when the result of
several interrelated events depends on the ordering of those events, but
that order cannot be guaranteed due to nondeterministic timing effects. If
two or more programs, or parts of the same program, try to go through the
same series of events, one might interrupt the work of the other. This is a
good way to find an \fBexploit\fR.
.IX Xref "race conditions, defined"
.IP "readable" 4
.IX Item "readable"
With respect to files, one that has the proper permission
bit set to let you access the file. With respect to computer programs, one
thatXs written well enough that someone has a chance of figuring out what
itXs trying to do.
.IX Xref "readable (term)"
.IP "reaping" 4
.IX Item "reaping"
The last rites performed by a parent \fBprocess\fR
on behalf of a deceased child process so that it doesnXt remain a
\&\fBzombie\fR.  See the \f(CW\*(C`wait\*(C'\fR and \f(CW\*(C`waitpid\*(C'\fR function calls.
.IX Xref "reaping zombie processes"
.IP "record" 4
.IX Item "record"
A set of related data values in a \fBfile\fR or \fBstream\fR,
often associated with a unique \fBkey\fR field. In Unix, often commensurate
with a \fBline\fR, or a blank-lineXterminated set of lines (a XparagraphX).
Each line of the \fI/etc/passwd\fR file is a record, keyed on login name,
containing information about that user.
.IX Xref "records, defined"
.IP "recursion" 4
.IX Item "recursion"
The art of defining something (at least partly) in
terms of itself, which is a naughty no-no in dictionaries but often works
out okay in computer programs if youXre careful not to recurse forever
(which is like an infinite loop with more spectacular failure modes).
.IX Xref "recursion, defined"
.IP "reference" 4
.IX Item "reference"
Where you look to find a pointer to information
somewhere else. (See \fBindirection\fR.) References come in two flavors:
\&\fBsymbolic references\fR and \fBhard references\fR.
.IX Xref "references, about"
.IP "referent" 4
.IX Item "referent"
Whatever a reference refers to, which may or may not
have a name. Common types of referents include scalars, arrays, hashes, and
subroutines.
.IX Xref "referents, defined"
.IP "regex" 4
.IX Item "regex"
See \fBregular expression\fR.
.IP "regular expression" 4
.IX Item "regular expression"
A single entity with various
interpretations, like an elephant. To a computer scientist, itXs a grammar
for a little language in which some strings are legal and others arenXt. To
normal people, itXs a pattern you can use to find what youXre looking for
when it varies from case to case. PerlXs regular expressions are far from
regular in the theoretical sense, but in regular use they work quite well.
HereXs a regular expression: \f(CW\*(C`/Oh s.*t./\*(C'\fR. This will match strings like
X\f(CW\*(C`Oh say can you see by the dawn\*(Aqs early light\*(C'\fRX and X\f(CW\*(C`Oh sit!\*(C'\fRX. See
Camel chapter 5, XPattern MatchingX.
.IX Xref "regular expressions, defined"
.IP "regular expression modifier" 4
.IX Item "regular expression modifier"
An option on a pattern or substitution, such as \f(CW\*(C`/i\*(C'\fR to render the pattern
case\- insensitive.
.IX Xref "regular expression modifiers modifiers, regular expression"
.IP "regular file" 4
.IX Item "regular file"
A \fBfile\fR thatXs not a \fBdirectory\fR, a
\&\fBdevice\fR, a named \fBpipe\fR or \fBsocket\fR, or a \fBsymbolic link\fR. Perl uses
the \f(CW\*(C`Xf\*(C'\fR file test operator to identify regular files. Sometimes called a
XplainX file.
.IX Xref "regular files files, regular"
.IP "relational operator" 4
.IX Item "relational operator"
An \fBoperator\fR that says whether a particular
ordering relationship is \fBtrue\fR about a pair of \fBoperands\fR. Perl has both
numeric and string relational operators. See \fBcollating sequence\fR.
.IX Xref "relational operators"
.IP "reserved words" 4
.IX Item "reserved words"
A word with a specific, built-in meaning
to a \fBcompiler\fR, such as \f(CW\*(C`if\*(C'\fR or \f(CW\*(C`delete\*(C'\fR. In many languages (not Perl),
itXs illegal to use reserved words to name anything else. (Which is why
theyXre reserved, after all.) In Perl, you just canXt use them to name
\&\fBlabels\fR or \fBfilehandles\fR. Also called XkeywordsX.
.IX Xref "reserved words keywords (term)"
.IP "return value" 4
.IX Item "return value"
The \fBvalue\fR produced by a \fBsubroutine\fR
or \fBexpression\fR when evaluated. In Perl, a return value may be either a
\&\fBlist\fR or a \fBscalar\fR.
.IX Xref "return values values, return"
.IP "\s-1RFC\s0" 4
.IX Item "RFC"
Request For Comment, which despite the timid connotations is the name of a series of
important standards documents.
.IX Xref "Request For Comment (RFC) RFC (Request For Comment)"
.IP "right shift" 4
.IX Item "right shift"
A \fBbit shift\fR that divides
a number by some power of 2.
.IX Xref "right shift (>>) bit operator bitXshift operators, right shift >> (right shift) bit operator"
.IP "role" 4
.IX Item "role"
A name for a concrete set of behaviors. A role is a way to
add behavior to a class without inheritance.
.IX Xref "roles (term)"
.IP "root" 4
.IX Item "root"
The superuser (\f(CW\*(C`UID\*(C'\fR == 0). Also the top-level directory of
the filesystem.
.IX Xref "root (term)"
.IP "\s-1RTFM\s0" 4
.IX Item "RTFM"
What you are told when someone thinks you should Read The
Fine Manual.
.IX Xref "RTFM acronym"
.IP "run phase" 4
.IX Item "run phase"
Any time after Perl starts running your main program.
See also \fBcompile phase\fR. Run phase is mostly spent in \fBruntime\fR but may
also be spent in \fBcompile time\fR when \f(CW\*(C`require\*(C'\fR, \f(CW\*(C`do\*(C'\fR \fI\f(CI\*(C`FILE\*(C'\fI\fR, or
\&\f(CW\*(C`eval\*(C'\fR \fI\f(CI\*(C`STRING\*(C'\fI\fR operators are executed, or when a substitution uses
the \f(CW\*(C`/ee\*(C'\fR modifier.
.IX Xref "run phase, defined"
.IP "runtime" 4
.IX Item "runtime"
The time when Perl is actually doing what your
code says to do, as opposed to the earlier period of time when it was
trying to figure out whether what you said made any sense whatsoever, which
is \fBcompile time\fR.
.IX Xref "runtime (term), defined"
.IP "runtime pattern" 4
.IX Item "runtime pattern"
A pattern that contains one or more
variables to be interpolated before parsing the pattern as a \fBregular
expression\fR, and that therefore cannot be analyzed at compile time, but
must be reanalyzed each time the pattern match operator is evaluated.
Runtime patterns are useful but expensive.
.IX Xref "runtime patterns patterns, runtime"
.IP "\s-1RV\s0" 4
.IX Item "RV"
A recreational vehicle, not
to be confused with vehicular recreation. \s-1RV\s0 also means an internal
Reference Value of the type a \fBscalar\fR can hold. See also \fB\s-1IV\s0\fR and \fB\s-1NV\s0\fR
if youXre not confused yet.
.IX Xref "Reference Value (RV) RV (Reference Value)"
.IP "rvalue" 4
.IX Item "rvalue"
A \fBvalue\fR that you might find on the
right side of an \fBassignment\fR. See also \fBlvalue\fR.
.IX Xref "rvalue (term) values, rvalue"
.SS "S"
.IX Subsection "S"
.IP "sandbox" 4
.IX Item "sandbox"
A walled off area thatXs not supposed to affect beyond
its walls. You let kids play in the sandbox instead of running in the road.
See Camel chapter 20, XSecurityX.
.IX Xref "sandbox, defined"
.IP "scalar" 4
.IX Item "scalar"
A simple, singular value; a number, \fBstring\fR, or
\&\fBreference\fR.
.IX Xref "scalars, defined"
.IP "scalar context" 4
.IX Item "scalar context"
The situation in which an
\&\fBexpression\fR is expected by its surroundings (the code calling it) to
return a single \fBvalue\fR rather than a \fBlist\fR of values. See also
\&\fBcontext\fR and \fBlist context\fR. A scalar context sometimes imposes
additional constraints on the return valueXsee \fBstring context\fR and
\&\fBnumeric context\fR. Sometimes we talk about a \fBBoolean context\fR inside
conditionals, but this imposes no additional constraints, since any scalar
value, whether numeric or \fBstring\fR, is already true or false.
.IX Xref "scalar context, about context, scalar"
.IP "scalar literal" 4
.IX Item "scalar literal"
A number or quoted \fBstring\fRXan actual
\&\fBvalue\fR in the text of your program, as opposed to a \fBvariable\fR.
.IX Xref "scalar literals literals, scalar"
.IP "scalar value" 4
.IX Item "scalar value"
A value that happens to be a
\&\fBscalar\fR as opposed to a \fBlist\fR.
.IX Xref "scalar values, about values, scalar SV"
.IP "scalar variable" 4
.IX Item "scalar variable"
A \fBvariable\fR prefixed with
\&\f(CW\*(C`$\*(C'\fR that holds a single value.
.IX Xref "scalar variables, defined variables, scalar"
.IP "scope" 4
.IX Item "scope"
From how far away you can see a variable, looking through
one. Perl has two visibility mechanisms. It does \fBdynamic scoping\fR of
\&\f(CW\*(C`local\*(C'\fR \fBvariables\fR, meaning that the rest of the \fBblock\fR, and any
\&\fBsubroutines\fR that are called by the rest of the block, can see the
variables that are local to the block. Perl does \fBlexical scoping\fR of
\&\f(CW\*(C`my\*(C'\fR variables, meaning that the rest of the block can see the variable,
but other subroutines called by the block \fIcannot\fR see the variable.
.IX Xref "scopes, defined"
.IP "scratchpad" 4
.IX Item "scratchpad"
The area in which a particular invocation of a particular
file or subroutine keeps some of its temporary values, including any
lexically scoped variables.
.IX Xref "scratchpads"
.IP "script" 4
.IX Item "script"
A text \fBfile\fR that is a program
intended to be \fBexecuted\fR directly rather than \fBcompiled\fR to another form
of file before \fBexecution\fR.
.IX Xref "scripts (term) programs, defined"
.Sp
Also, in the context of \fBUnicode\fR, a writing system for a particular
language or group of languages, such as Greek, Bengali, or Tengwar.
.IP "script kiddie" 4
.IX Item "script kiddie"
A \fBcracker\fR who is not a \fBhacker\fR but knows just enough
to run canned scripts. A \fBcargo-cult\fR programmer.
.IX Xref "script kiddie"
.IP "sed" 4
.IX Item "sed"
A venerable Stream EDitor from
which Perl derives some of its ideas.
.IX Xref "sed (Stream EDitor) Stream EDitor (sed)"
.IP "semaphore" 4
.IX Item "semaphore"
A fancy kind of interlock that prevents multiple \fBthreads\fR or
\&\fBprocesses\fR from using up the same resources simultaneously.
.IX Xref "semaphore"
.IP "separator" 4
.IX Item "separator"
A \fBcharacter\fR or \fBstring\fR that keeps two surrounding strings from being
confused with each other. The \f(CW\*(C`split\*(C'\fR function works on separators. Not to be confused with \fBdelimiters\fR
or \fBterminators\fR. The XorX in the previous sentence separated the two
alternatives.
.IX Xref "separators characters, separators strings, separators split function, separators and"
.IP "serialization" 4
.IX Item "serialization"
Putting a fancy \fBdata structure\fR into
linear order so that it can be stored as a \fBstring\fR in a disk file or
database, or sent through a \fBpipe\fR. Also called marshalling.
.IX Xref "serialization marshalling (term)"
.IP "server" 4
.IX Item "server"
In networking, a \fBprocess\fR that
either advertises a \fBservice\fR or just hangs around at a known location and
waits for \fBclients\fR who need service to get in touch with it.
.IX Xref "servers, defined processes, server"
.IP "service" 4
.IX Item "service"
Something you do for someone else to make them happy,
like giving them the time of day (or of their life). On some machines,
well-known services are listed by the \f(CW\*(C`getservent\*(C'\fR
function.
.IX Xref "services (term) getservent function"
.IP "setgid" 4
.IX Item "setgid"
Same as \fBsetuid\fR, only having to do with giving
away \fBgroup\fR privileges.
.IX Xref "setgid program, about"
.IP "setuid" 4
.IX Item "setuid"
Said of a program that runs with the privileges of
its \fBowner\fR rather than (as is usually the case) the privileges of whoever
is running it. Also describes the bit in the mode word (\fBpermission bits\fR)
that controls the feature. This bit must be explicitly set by the owner to
enable this feature, and the program must be carefully written not to give
away more privileges than it ought to.
.IX Xref "setuid program, about"
.IP "shared memory" 4
.IX Item "shared memory"
A piece of \fBmemory\fR accessible by two
different \fBprocesses\fR who otherwise would not see each otherXs memory.
.IX Xref "shared memory memory, shared"
.IP "shebang" 4
.IX Item "shebang"
Irish for the whole McGillicuddy. In Perl culture, a
portmanteau of XsharpX and XbangX, meaning the \f(CW\*(C`#!\*(C'\fR sequence that tells
the system where to find the interpreter.
.IX Xref "shebang (term)"
.IP "shell" 4
.IX Item "shell"
A \fBcommand\fR\-line \fBinterpreter\fR. The program that
interactively gives you a prompt, accepts one or more \fBlines\fR of input,
and executes the programs you mentioned, feeding each of them their proper
\&\fBarguments\fR and input data. Shells can also execute scripts containing
such commands. Under Unix, typical shells include the Bourne shell
(\fI/bin/sh\fR), the C shell (\fI/bin/csh\fR), and the Korn shell (\fI/bin/ksh\fR).
Perl is not strictly a shell because itXs not interactive (although Perl
programs can be interactive).
.IX Xref "shell program, defined"
.IP "side effects" 4
.IX Item "side effects"
Something extra that happens when you evaluate an
\&\fBexpression\fR. Nowadays it can refer to almost anything. For example,
evaluating a simple assignment statement typically has the Xside effectX of
assigning a value to a variable. (And you thought assigning the value was
your primary intent in the first place!) Likewise, assigning a value to the
special variable \f(CW$|\fR (\f(CW$AUTOFLUSH\fR) has the side effect of forcing a
flush after every \f(CW\*(C`write\*(C'\fR or \f(CW\*(C`print\*(C'\fR on the currently selected
filehandle.
.IX Xref "side effects"
.IP "sigil" 4
.IX Item "sigil"
A glyph used in magic. Or, for Perl, the symbol in front
of a variable name, such as \f(CW\*(C`$\*(C'\fR, \f(CW\*(C`@\*(C'\fR, and \f(CW\*(C`%\*(C'\fR.
.IX Xref "sigils, defined"
.IP "signal" 4
.IX Item "signal"
A bolt out of the blue; that is, an
event triggered by the \fBoperating system\fR, probably when youXre least
expecting it.
.IX Xref "signals and signal handling, about"
.IP "signal handler" 4
.IX Item "signal handler"
A \fBsubroutine\fR that, instead of being content to be
called in the normal fashion, sits around waiting for a bolt out of the
blue before it will deign to \fBexecute\fR. Under Perl, bolts out of the blue
are called signals, and you send them with the \f(CW\*(C`kill\*(C'\fR built-in. See the
\&\f(CW%SIG\fR hash in Camel chapter 25, XSpecial NamesX and the section XSignalsX
in Camel chapter 15, XInterprocess CommunicationX.
.IX Xref "handlers, signal"
.IP "single inheritance" 4
.IX Item "single inheritance"
The features you got from your
mother, if she told you that you donXt have a father. (See also
\&\fBinheritance\fR and \fBmultiple inheritance\fR.) In computer languages, the
idea that \fBclasses\fR reproduce asexually so that a given class can only
have one direct ancestor or \fBbase class\fR. Perl supplies no such
restriction, though you may certainly program Perl that way if you like.
.IX Xref "single inheritance inheritance, single"
.IP "slice" 4
.IX Item "slice"
A selection of any number of
\&\fBelements\fR from a \fBlist\fR, \fBarray\fR, or \fBhash\fR.
.IX Xref "slices of elements elements, slices of"
.IP "slurp" 4
.IX Item "slurp"
To read an entire \fBfile\fR into a \fBstring\fR in one operation.
.IX Xref "slurp (term)"
.IP "socket" 4
.IX Item "socket"
An endpoint for network communication among multiple
\&\fBprocesses\fR that works much like a telephone or a post office box. The
most important thing about a socket is its \fBnetwork address\fR (like a phone
number). Different kinds of sockets have different kinds of addressesXsome
look like filenames, and some donXt.
.IX Xref "sockets, defined"
.IP "soft reference" 4
.IX Item "soft reference"
See \fBsymbolic reference\fR.
.IX Xref "soft references references, soft"
.IP "source filter" 4
.IX Item "source filter"
A special kind of \fBmodule\fR that does
\&\fBpreprocessing\fR on your script just before it gets to the \fBtokener\fR.
.IX Xref "source filters filters, source"
.IP "stack" 4
.IX Item "stack"
A device you can put things on the top of, and later take
them back off in the opposite order in which you put them on. See \fB\s-1LIFO\s0\fR.
.IX Xref "stacks, defined"
.IP "standard" 4
.IX Item "standard"
Included in the official Perl distribution, as in a
standard module, a standard tool, or a standard Perl \fBmanpage\fR.
.IX Xref "standard (term)"
.IP "standard error" 4
.IX Item "standard error"
The default output \fBstream\fR for nasty remarks that donXt belong in
\&\fBstandard output\fR. Represented within a Perl program by the output>  \fBfilehandle\fR \f(CW\*(C`STDERR\*(C'\fR. You can use this
stream explicitly, but the \f(CW\*(C`die\*(C'\fR and \f(CW\*(C`warn\*(C'\fR built-ins write to your
standard error stream automatically (unless trapped or otherwise
intercepted).
.IX Xref "STDERR filehandle, about"
.IP "standard input" 4
.IX Item "standard input"
The default input \fBstream\fR for your program,
which if possible shouldnXt care where its data is coming from. Represented
within a Perl program by the \fBfilehandle\fR \f(CW\*(C`STDIN\*(C'\fR.
.IX Xref "STDIN filehandle, about"
.IP "standard I/O" 4
.IX Item "standard I/O"
A standard C library for doing \fBbuffered\fR input
and output to the \fBoperating system\fR. (The XstandardX of standard I/O is
at most marginally related to the XstandardX of standard input and output.)
In general, Perl relies on whatever implementation of standard I/O a given
operating system supplies, so the buffering characteristics of a Perl
program on one machine may not exactly match those on another machine.
Normally this only influences efficiency, not semantics. If your standard
I/O package is doing block buffering and you want it to \fBflush\fR the buffer
more often, just set the \f(CW$|\fR variable to a true value.
.IX Xref "standard I O I O (Input Output), standard Input Output (I O), standard STDIO filehandle"
.IP "Standard Library" 4
.IX Item "Standard Library"
Everything that comes with the official
\&\fIperl\fR distribution. Some vendor versions of \fIperl\fR change their
distributions, leaving out some parts or including extras. See also
\&\fBdual-lived\fR.
.IX Xref "Standard Perl Library, about"
.IP "standard output" 4
.IX Item "standard output"
The default output \fBstream\fR for your program,
which if possible shouldnXt care where its data is going. Represented
within a Perl program by the \fBfilehandle\fR \f(CW\*(C`STDOUT\*(C'\fR.
.IX Xref "STDOUT filehandle, about"
.IP "statement" 4
.IX Item "statement"
A \fBcommand\fR to the computer about what to do next,
like a step in a recipe: XAdd marmalade to batter and mix until mixed.X A
statement is distinguished from a \fBdeclaration\fR, which doesnXt tell the
computer to do anything, but just to learn something.
.IX Xref "statements, about"
.IP "statement modifier" 4
.IX Item "statement modifier"
A \fBconditional\fR or
\&\fBloop\fR that you put after the \fBstatement\fR instead of before, if you know
what we mean.
.IX Xref "statement modifiers, about modifiers, statement"
.IP "static" 4
.IX Item "static"
Varying slowly compared to something else. (Unfortunately,
everything is relatively stable compared to something else, except for
certain elementary particles, and weXre not so sure about them.) In
computers, where things are supposed to vary rapidly, XstaticX has a
derogatory connotation, indicating a slightly dysfunctional \fBvariable\fR,
\&\fBsubroutine\fR, or \fBmethod\fR. In Perl culture, the word is politely avoided.
.IX Xref "static (term)"
.Sp
If youXre a C or \*(C+ programmer, you might be looking for PerlXs \f(CW\*(C`state\*(C'\fR
keyword.
.IP "static method" 4
.IX Item "static method"
No such thing. See \fBclass method\fR.
.IX Xref "static methods methods, static"
.IP "static scoping" 4
.IX Item "static scoping"
No such thing. See \fBlexical scoping\fR.
.IP "static variable" 4
.IX Item "static variable"
No such thing. Just use a \fBlexical
variable\fR in a scope larger than your \fBsubroutine\fR, or declare it with
\&\f(CW\*(C`state\*(C'\fR instead of with \f(CW\*(C`my\*(C'\fR.
.IX Xref "static variables variables, static"
.IP "stat structure" 4
.IX Item "stat structure"
A special internal spot
in which Perl keeps the information about the last \fBfile\fR on which you
requested information.
.IX Xref "stat structure data structures, stat structure"
.IP "status" 4
.IX Item "status"
The \fBvalue\fR returned to the
parent \fBprocess\fR when one of its child processes dies. This value is
placed in the special variable \f(CW$?\fR. Its upper eight \fBbits\fR are the exit
status of the defunct process, and its lower eight bits identify the signal
(if any) that the process died from. On Unix systems, this status value is
the same as the status word returned by \fIwait\fR(2). See \f(CW\*(C`system\*(C'\fR in Camel
chapter 27, XFunctionsX.
.IX Xref "status value values, status exit status"
.IP "\s-1STDERR\s0" 4
.IX Item "STDERR"
See \fBstandard error\fR.
.IP "\s-1STDIN\s0" 4
.IX Item "STDIN"
See \fBstandard input\fR.
.IP "\s-1STDIO\s0" 4
.IX Item "STDIO"
See \fBstandard I/O\fR.
.IP "\s-1STDOUT\s0" 4
.IX Item "STDOUT"
See \fBstandard output\fR.
.IP "stream" 4
.IX Item "stream"
A flow of data into or out of
a process as a steady sequence of bytes or characters, without the
appearance of being broken up into packets. This is a kind of
\&\fBinterface\fRXthe underlying \fBimplementation\fR may well break your data up
into separate packets for delivery, but this is hidden from you.
.IX Xref "streaming data processes, streaming data"
.IP "string" 4
.IX Item "string"
A sequence of characters such as XHe said !@#*&%@#*?!X.
A string does not have to be entirely printable.
.IX Xref "strings, defined"
.IP "string context" 4
.IX Item "string context"
The situation in which an expression is
expected by its surroundings (the code calling it) to return a \fBstring\fR.
See also \fBcontext\fR and \fBnumeric context\fR.
.IX Xref "string context context, string"
.IP "stringification" 4
.IX Item "stringification"
The process of producing a \fBstring\fR representation of an
abstract object.
.IX Xref "stringification"
.IP "struct" 4
.IX Item "struct"
C keyword introducing a structure definition or name.
.IX Xref "struct keyword"
.IP "structure" 4
.IX Item "structure"
See \fBdata structure\fR.
.IX Xref "structures"
.IP "subclass" 4
.IX Item "subclass"
See \fBderived class\fR.
.IP "subpattern" 4
.IX Item "subpattern"
A component of a \fBregular expression\fR pattern.
.IX Xref "subpatterns, defined"
.IP "subroutine" 4
.IX Item "subroutine"
A named or otherwise accessible piece of program
that can be invoked from elsewhere in the program in order to accomplish
some subgoal of the program. A subroutine is often parameterized to
accomplish different but related things depending on its input
\&\fBarguments\fR. If the subroutine returns a meaningful \fBvalue\fR, it is also
called a \fBfunction\fR.
.IX Xref "subroutines, defined"
.IP "subscript" 4
.IX Item "subscript"
A \fBvalue\fR that indicates the position of a particular
\&\fBarray\fR \fBelement\fR in an array.
.IX Xref "subscripts"
.IP "substitution" 4
.IX Item "substitution"
Changing parts of a string via the \f(CW\*(C`s///\*(C'\fR
operator. (We avoid use of this term to mean \fBvariable interpolation\fR.)
.IX Xref "substitution (s ) operator, about strings, substitution in s (substitution) operator, about"
.IP "substring" 4
.IX Item "substring"
A portion of a \fBstring\fR, starting at a certain
\&\fBcharacter\fR position (\fBoffset\fR) and proceeding for a certain number of
characters.
.IX Xref "substrings (term)"
.IP "superclass" 4
.IX Item "superclass"
See \fBbase class\fR.
.IP "superuser" 4
.IX Item "superuser"
The person whom the \fBoperating system\fR will let do almost
anything. Typically your system administrator or someone pretending to be
your system administrator. On Unix systems, the \fBroot\fR user. On Windows
systems, usually the Administrator user.
.IX Xref "superusers"
.IP "\s-1SV\s0" 4
.IX Item "SV"
Short for Xscalar valueX. But
within the Perl interpreter, every \fBreferent\fR is treated as a member of a
class derived from \s-1SV,\s0 in an object-oriented sort of way. Every \fBvalue\fR
inside Perl is passed around as a C language \f(CW\*(C`SV*\*(C'\fR pointer. The \s-1SV
\&\s0\fBstruct\fR knows its own Xreferent typeX, and the code is smart enough (we
hope) not to try to call a \fBhash\fR function on a \fBsubroutine\fR.
.IX Xref "scalar values, about values, scalar"
.IP "switch" 4
.IX Item "switch"
An option you give on a command line to
influence the way your program works, usually introduced with a minus sign.
The word is also used as a nickname for a \fBswitch statement\fR.
.IX Xref "switches, about switches"
.IP "switch cluster" 4
.IX Item "switch cluster"
The combination of multiple command\-
line switches (\fIe.g.\fR, \f(CW\*(C`Xa Xb Xc\*(C'\fR) into one switch (\fIe.g.\fR, \f(CW\*(C`Xabc\*(C'\fR).
Any switch with an additional \fBargument\fR must be the last switch in a
cluster.
.IX Xref "switch clusters clusters, switch"
.IP "switch statement" 4
.IX Item "switch statement"
A program technique that lets you
evaluate an \fBexpression\fR and then, based on the value of the expression,
do a multiway branch to the appropriate piece of code for that value. Also
called a Xcase structureX, named after the similar Pascal construct. Most
switch statements in Perl are spelled \f(CW\*(C`given\*(C'\fR. See XThe \f(CW\*(C`given\*(C'\fR
statementX in Camel chapter 4, XStatements and DeclarationsX.
.IX Xref "switch statement statements, switch"
.IP "symbol" 4
.IX Item "symbol"
Generally, any \fBtoken\fR or \fBmetasymbol\fR. Often used
more specifically to mean the sort of name you might find in a \fBsymbol
table\fR.
.IX Xref "symbols symbols"
.IP "symbolic debugger" 4
.IX Item "symbolic debugger"
A program that lets you step through
the \fBexecution\fR of your program, stopping or printing things out here and
there to see whether anything has gone wrong, and, if so, what. The
XsymbolicX part just means that you can talk to the debugger using the same
symbols with which your program is written.
.IX Xref "symbolic debugger debugger, about"
.IP "symbolic link" 4
.IX Item "symbolic link"
An alternate filename that points to the
real \fBfilename\fR, which in turn points to the real \fBfile\fR. Whenever the
\&\fBoperating system\fR is trying to parse a \fBpathname\fR containing a symbolic
link, it merely substitutes the new name and continues parsing.
.IX Xref "symbolic links links, symbolic"
.IP "symbolic reference" 4
.IX Item "symbolic reference"
A variable whose value is the
name of another variable or subroutine. By \fBdereferencing\fR the first
variable, you can get at the second one. Symbolic references are illegal
under \f(CW\*(C`use strict "refs"\*(C'\fR.
.IX Xref "symbolic references references, symbolic"
.IP "symbol table" 4
.IX Item "symbol table"
Where a \fBcompiler\fR remembers symbols. A program
like Perl must somehow remember all the names of all the \fBvariables\fR,
\&\fBfilehandles\fR, and \fBsubroutines\fR youXve used. It does this by placing the
names in a symbol table, which is implemented in Perl using a \fBhash
table\fR. There is a separate symbol table for each \fBpackage\fR to give each
package its own \fBnamespace\fR.
.IX Xref "symbol tables, about"
.IP "synchronous" 4
.IX Item "synchronous"
Programming in which the orderly sequence of events
can be determined; that is, when things happen one after the other, not at
the same time.
.IX Xref "synchronous (term)"
.IP "syntactic sugar" 4
.IX Item "syntactic sugar"
An alternative way of writing something more easily; a
shortcut.
.IX Xref "syntactic sugar"
.IP "syntax" 4
.IX Item "syntax"
From Greek \s-1XXXXXXXX,\s0 Xwith-arrangementX. How things
(particularly symbols) are put together with each other.
.IX Xref "syntax, about"
.IP "syntax tree" 4
.IX Item "syntax tree"
An internal representation of your program wherein
lower-level \fBconstructs\fR dangle off the higher-level constructs enclosing
them.
.IX Xref "syntax tree"
.IP "syscall" 4
.IX Item "syscall"
A \fBfunction\fR call directly to the \fBoperating
system\fR. Many of the important subroutines and functions you use arenXt
direct system calls, but are built up in one or more layers above the
system call level. In general, Perl programmers donXt need to worry about
the distinction. However, if you do happen to know which Perl functions are
really syscalls, you can predict which of these will set the \f(CW$!\fR
(\f(CW$ERRNO\fR) variable on failure. Unfortunately, beginning programmers often
confusingly employ the term Xsystem callX to mean what happens when you
call the Perl \f(CW\*(C`system\*(C'\fR function, which actually involves many syscalls. To
avoid any confusion, we nearly always say XsyscallX for something you could
call indirectly via PerlXs \f(CW\*(C`syscall\*(C'\fR function, and never for something you
would call with PerlXs \f(CW\*(C`system\*(C'\fR function.
.IX Xref "syscall function, about"
.SS "T"
.IX Subsection "T"
.IP "taint checks" 4
.IX Item "taint checks"
The special bookkeeping Perl does to track the flow
of external data through your program and disallow their use in system
commands.
.IX Xref "taint checks, about"
.IP "tainted" 4
.IX Item "tainted"
Said of data derived from the grubby hands of a user,
and thus unsafe for a secure program to rely on. Perl does taint checks if
you run a \fBsetuid\fR (or \fBsetgid\fR) program, or if you use the \f(CW\*(C`XT\*(C'\fR switch.
.IX Xref "tainted data, about"
.IP "taint mode" 4
.IX Item "taint mode"
Running under the \f(CW\*(C`XT\*(C'\fR switch, marking all external data as
suspect and refusing to use it with system commands. See Camel chapter 20,
XSecurityX.
.IX Xref "taint mode"
.IP "\s-1TCP\s0" 4
.IX Item "TCP"
Short for Transmission Control Protocol. A protocol wrapped around the
Internet Protocol to make an unreliable packet transmission mechanism
appear to the application program to be a reliable \fBstream\fR of bytes.
(Usually.)
.IX Xref "TCP (Transmission Control Protocol) Transmission Control Protocol (TCP)"
.IP "term" 4
.IX Item "term"
Short for a XterminalXXthat is, a leaf node of a \fBsyntax
tree\fR. A thing that functions grammatically as an \fBoperand\fR for the
operators in an expression.
.IX Xref "terms, defined"
.IP "terminator" 4
.IX Item "terminator"
A \fBcharacter\fR or \fBstring\fR that marks the end of another string. The \f(CW$/\fR
variable contains the string that terminates a \f(CW\*(C`readline\*(C'\fR operation, which
\&\f(CW\*(C`chomp\*(C'\fR deletes from the end. Not to be confused with \fBdelimiters\fR or
\&\fBseparators\fR. The period at the end of this sentence is a terminator.
.IX Xref "terminators (term) characters, terminators strings, terminators in"
.IP "ternary" 4
.IX Item "ternary"
An \fBoperator\fR taking three \fBoperands\fR. Sometimes
pronounced \fBtrinary\fR.
.IX Xref "ternary operators"
.IP "text" 4
.IX Item "text"
A \fBstring\fR or \fBfile\fR containing primarily printable characters.
.IX Xref "text, defined strings, text files, text text"
.IP "thread" 4
.IX Item "thread"
Like a forked process, but without \fBfork\fRXs inherent
memory protection. A thread is lighter weight than a full process, in that
a process could have multiple threads running around in it, all fighting
over the same processXs memory space unless steps are taken to protect
threads from one another.
.IX Xref "threads (term)"
.IP "tie" 4
.IX Item "tie"
The bond between a magical variable and its
implementation class. See the \f(CW\*(C`tie\*(C'\fR function in Camel chapter 27,
XFunctionsX and Camel chapter 14, XTied VariablesX.
.IX Xref "tied variables, about"
.IP "titlecase" 4
.IX Item "titlecase"
The case used for capitals
that are followed by lowercase characters instead of by more capitals.
Sometimes called sentence case or headline case. English doesnXt use
Unicode titlecase, but casing rules for English titles are more complicated
than simply capitalizing each wordXs first character.
.IX Xref "titlecase characters characters, titlecase"
.IP "\s-1TMTOWTDI\s0" 4
.IX Item "TMTOWTDI"
ThereXs More Than One Way To Do It, the Perl Motto. The
notion that there can be more than one valid path to solving a programming
problem in context. (This doesnXt mean that more ways are always better or
that all possible paths are equally desirableXjust that there need not be
One True Way.)
.IX Xref "TMTOWTDI acronym"
.IP "token" 4
.IX Item "token"
A morpheme in a programming language, the smallest unit
of text with semantic significance.
.IX Xref "tokens, defined"
.IP "tokener" 4
.IX Item "tokener"
A module that breaks a program text into a sequence of
\&\fBtokens\fR for later analysis by a parser.
.IX Xref "tokeners, defined"
.IP "tokenizing" 4
.IX Item "tokenizing"
Splitting up a program text into \fBtokens\fR. Also known as
XlexingX, in which case you get XlexemesX instead of tokens.
.IX Xref "tokenizing"
.IP "toolbox approach" 4
.IX Item "toolbox approach"
The notion that, with a complete set of simple tools
that work well together, you can build almost anything you want. Which is
fine if youXre assembling a tricycle, but if youXre building a
defranishizing comboflux regurgalator, you really want your own machine
shop in which to build special tools. Perl is sort of a machine shop.
.IX Xref "toolbox approach"
.IP "topic" 4
.IX Item "topic"
The thing youXre working on. Structures like
\&\f(CW\*(C`while(<>)\*(C'\fR, \f(CW\*(C`for\*(C'\fR, \f(CW\*(C`foreach\*(C'\fR, and \f(CW\*(C`given\*(C'\fR set the topic for
you by assigning to \f(CW$_\fR, the default (\fItopic\fR) variable.
.IX Xref "topics (term)"
.IP "transliterate" 4
.IX Item "transliterate"
To turn one string
representation into another by mapping each character of the source string
to its corresponding character in the result string. Not to be confused
with translation: for example, Greek \fI\s-1XXXXXXXXXX\s0\fR transliterates into
\&\fIpolychromos\fR but translates into \fImany-colored\fR. See the \f(CW\*(C`tr///\*(C'\fR
operator in Camel chapter 5, XPattern MatchingX.
.IX Xref "tr (transliteration) operator, about strings, transliteration of transliteration (tr ) operator, about"
.IP "trigger" 4
.IX Item "trigger"
An event that causes a \fBhandler\fR to be run.
.IX Xref "triggers (term)"
.IP "trinary" 4
.IX Item "trinary"
Not a stellar system with three stars, but an
\&\fBoperator\fR taking three \fBoperands\fR. Sometimes pronounced \fBternary\fR.
.IX Xref "trinary operators"
.IP "troff" 4
.IX Item "troff"
A venerable typesetting language from which Perl derives
the name of its \f(CW$%\fR variable and which is secretly used in the production
of Camel books.
.IX Xref "troff language"
.IP "true" 4
.IX Item "true"
Any scalar value that doesnXt evaluate to 0 or
\&\f(CW""\fR.
.IX Xref "true values values, true"
.IP "truncating" 4
.IX Item "truncating"
Emptying a file of existing
contents, either automatically when opening a file for writing or
explicitly via the \f(CW\*(C`truncate\*(C'\fR function.
.IX Xref "truncate function files, truncating"
.IP "type" 4
.IX Item "type"
See \fBdata type\fR and \fBclass\fR.
.IX Xref "type"
.IP "type casting" 4
.IX Item "type casting"
Converting data from one type to another. C permits this.
Perl does not need it. Nor want it.
.IX Xref "type casting"
.IP "typedef" 4
.IX Item "typedef"
A type definition in the C and \*(C+ languages.
.IX Xref "typedef"
.IP "typed lexical" 4
.IX Item "typed lexical"
A \fBlexical variable\fR  lexical>that is declared with a \fBclass\fR
type: \f(CW\*(C`my Pony $bill\*(C'\fR.
.IX Xref "typed lexicals lexical variables, typed lexicals variables, variable"
.IP "typeglob" 4
.IX Item "typeglob"
Use of a single identifier, prefixed with \f(CW\*(C`*\*(C'\fR. For
example, \f(CW*name\fR stands for any or all of \f(CW$name\fR, \f(CW@name\fR, \f(CW%name\fR,
\&\f(CW&name\fR, or just \f(CW\*(C`name\*(C'\fR. How you use it determines whether it is
interpreted as all or only one of them. See XTypeglobs and FilehandlesX in
Camel chapter 2, XBits and PiecesX.
.IX Xref "typeglobs, defined"
.IP "typemap" 4
.IX Item "typemap"
A description of how C types may be transformed to and from Perl
types within an \fBextension\fR module written in \fB\s-1XS\s0\fR.
.IX Xref "typemap"
.SS "U"
.IX Subsection "U"
.IP "\s-1UDP\s0" 4
.IX Item "UDP"
User Datagram Protocol, the typical way to send
\&\fBdatagrams\fR over the Internet.
.IX Xref "User Datagram Protocol (UDP) UDP (User Datagram Protocol) datagrams, UDP support"
.IP "\s-1UID\s0" 4
.IX Item "UID"
A user \s-1ID. \s0Often used in the context of
\&\fBfile\fR or \fBprocess\fR ownership.
.IX Xref "UID (user ID) user ID (UID)"
.IP "umask" 4
.IX Item "umask"
A mask of those \fBpermission bits\fR that should be forced
off when creating files or directories, in order to establish a policy of
whom youXll ordinarily deny access to. See the \f(CW\*(C`umask\*(C'\fR function.
.IX Xref "umask function"
.IP "unary operator" 4
.IX Item "unary operator"
An operator with only one \fBoperand\fR, like \f(CW\*(C`!\*(C'\fR or
\&\f(CW\*(C`chdir\*(C'\fR. Unary operators are usually prefix operators; that is, they
precede their operand. The \f(CW\*(C`++\*(C'\fR and \f(CW\*(C`XX\*(C'\fR operators can be either prefix
or postfix. (Their position \fIdoes\fR change their meanings.)
.IX Xref "unary operators, about"
.IP "Unicode" 4
.IX Item "Unicode"
A character set comprising all the major character sets of
the world, more or less. See <http://www.unicode.org>.
.IX Xref "Unicode, about"
.IP "Unix" 4
.IX Item "Unix"
A very large and constantly evolving language with several
alternative and largely incompatible syntaxes, in which anyone can define
anything any way they choose, and usually do. Speakers of this language
think itXs easy to learn because itXs so easily twisted to oneXs own ends,
but dialectical differences make tribal intercommunication nearly
impossible, and travelers are often reduced to a pidgin-like subset of the
language. To be universally understood, a Unix shell programmer must spend
years of study in the art. Many have abandoned this discipline and now
communicate via an Esperanto-like language called Perl.
.IX Xref "Unix language"
.Sp
In ancient times, Unix was also used to refer to some code that a couple of
people at Bell Labs wrote to make use of a \s-1PDP\-7\s0 computer that wasnXt doing
much of anything else at the time.
.IP "uppercase" 4
.IX Item "uppercase"
In Unicode, not just
characters with the General Category of Uppercase Letter, but any character
with the Uppercase property, including some Letter Numbers and Symbols. Not
to be confused with \fBtitlecase\fR.
.IX Xref "uppercase characters characters, uppercase"
.SS "V"
.IX Subsection "V"
.IP "value" 4
.IX Item "value"
An actual piece of data, in contrast to all the
variables, references, keys, indices, operators, and whatnot that you need
to access the value.
.IX Xref "values, defined"
.IP "variable" 4
.IX Item "variable"
A named storage location that can hold any
of various kinds of \fBvalue\fR, as your program sees fit.
.IX Xref "variables, defined variables"
.IP "variable interpolation" 4
.IX Item "variable interpolation"
The \fBinterpolation\fR of
a scalar or array variable into a string.
.IX Xref "variable interpolation interpolation, variable"
.IP "variadic" 4
.IX Item "variadic"
Said of a \fBfunction\fR that happily receives an
indeterminate number of \fBactual arguments\fR.
.IX Xref "variadic (term)"
.IP "vector" 4
.IX Item "vector"
Mathematical jargon for a list of \fBscalar values\fR.
.IX Xref "vectors"
.IP "virtual" 4
.IX Item "virtual"
Providing the appearance of something without the reality,
as in: virtual memory is not real memory. (See also \fBmemory\fR.) The
opposite of XvirtualX is XtransparentX, which means providing the reality
of something without the appearance, as in: Perl handles the
variable-length \s-1UTFX8\s0 character encoding transparently.
.IX Xref "virtual (term)"
.IP "void context" 4
.IX Item "void context"
A form of \fBscalar context\fR in which an
\&\fBexpression\fR is not expected to return any \fBvalue\fR at all and is
evaluated for its \fBside effects\fR alone.
.IX Xref "void context context, void"
.IP "v\-string" 4
.IX Item "v-string"
A XversionX or XvectorX \fBstring\fR
specified with a \f(CW\*(C`v\*(C'\fR followed by a series of decimal integers in dot
notation, for instance, \f(CW\*(C`v1.20.300.4000\*(C'\fR. Each number turns into a
\&\fBcharacter\fR with the specified ordinal value. (The \f(CW\*(C`v\*(C'\fR is optional when
there are at least three integers.)
.IX Xref "vXstrings strings, vXstrings"
.SS "W"
.IX Subsection "W"
.IP "warning" 4
.IX Item "warning"
A message printed to the \f(CW\*(C`STDERR\*(C'\fR stream to the effect that something might be
wrong but isnXt worth blowing up over. See \f(CW\*(C`warn\*(C'\fR in Camel chapter 27,
XFunctionsX and the \f(CW\*(C`warnings\*(C'\fR pragma in Camel chapter 28, XPragmantic
ModulesX.
.IX Xref "warning messages STDERR filehandle, warning messages and"
.IP "watch expression" 4
.IX Item "watch expression"
An expression which, when its value
changes, causes a breakpoint in the Perl debugger.
.IX Xref "watch expression expressions, watch"
.IP "weak reference" 4
.IX Item "weak reference"
A reference that doesnXt get counted
normally. When all the normal references to data disappear, the data
disappears. These are useful for circular references that would never
disappear otherwise.
.IX Xref "weak references references, weak"
.IP "whitespace" 4
.IX Item "whitespace"
A \fBcharacter\fR that moves
your cursor but doesnXt otherwise put anything on your screen. Typically
refers to any of: space, tab, line feed, carriage return, or form feed. In
Unicode, matches many other characters that Unicode considers whitespace,
including the X\-XX .
.IX Xref "whitespace characters characters, whitespace"
.IP "word" 4
.IX Item "word"
In normal XcomputereseX, the piece of data of the size most
efficiently handled by your computer, typically 32 bits or so, give or take a
few powers of 2. In Perl culture, it more often refers to an alphanumeric
\&\fBidentifier\fR (including underscores), or to a string of nonwhitespace
\&\fBcharacters\fR bounded by whitespace or string boundaries.
.IX Xref "words (term)"
.IP "working directory" 4
.IX Item "working directory"
Your current \fBdirectory\fR, from
which relative pathnames are interpreted by the \fBoperating system\fR. The
operating system knows your current directory because you told it with a
\&\f(CW\*(C`chdir\*(C'\fR, or because you started out in the place where your parent
\&\fBprocess\fR was when you were born.
.IX Xref "working directory directories, working"
.IP "wrapper" 4
.IX Item "wrapper"
A program or subroutine that runs some other program or
subroutine for you, modifying some of its input or output to better suit
your purposes.
.IX Xref "wrappers (term)"
.IP "\s-1WYSIWYG\s0" 4
.IX Item "WYSIWYG"
What You See Is What You Get. Usually used when something
that appears on the screen matches how it will eventually look, like PerlXs
\&\f(CW\*(C`format\*(C'\fR declarations. Also used to mean the opposite of magic because
everything works exactly as it appears, as in the three\- argument form of
\&\f(CW\*(C`open\*(C'\fR.
.IX Xref "WYSIWYG acronym"
.SS "X"
.IX Subsection "X"
.IP "\s-1XS\s0" 4
.IX Item "XS"
An extraordinarily
exported, expeditiously excellent, expressly eXternal Subroutine, executed
in existing C or \*(C+ or in an exciting extension language called
(exasperatingly) \s-1XS.\s0
.IX Xref "XS (eXternal Subroutine) eXternal Subroutine (XS)"
.IP "\s-1XSUB\s0" 4
.IX Item "XSUB"
An external \fBsubroutine\fR defined in \fB\s-1XS\s0\fR.
.IX Xref "XSUB (term)"
.SS "Y"
.IX Subsection "Y"
.IP "yacc" 4
.IX Item "yacc"
Yet Another Compiler Compiler. A parser generator without
which Perl probably would not have existed. See the file \fIperly.y\fR in the
Perl source distribution.
.IX Xref "yacc acronym"
.SS "Z"
.IX Subsection "Z"
.IP "zero width" 4
.IX Item "zero width"
A subpattern \fBassertion\fR matching the \fBnull
string\fR between \fBcharacters\fR.
.IX Xref "zeroXwidth assertions subpatterns, zeroXwidth assertions assertions (in regexes), zeroXwidth"
.IP "zombie" 4
.IX Item "zombie"
A process that has died (exited) but
whose parent has not yet received proper notification of its demise by
virtue of having called \f(CW\*(C`wait\*(C'\fR or \f(CW\*(C`waitpid\*(C'\fR. If you \f(CW\*(C`fork\*(C'\fR, you must
clean up after your child processes when they exit; otherwise, the process
table will fill up and your system administrator will Not Be Happy with
you.
.IX Xref "zombie processes processes, zombie"
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Based on the Glossary of \fIProgramming Perl\fR, Fourth Edition,
by Tom Christiansen, brian d foy, Larry Wall, & Jon Orwant.
Copyright (c) 2000, 1996, 1991, 2012 O'Reilly Media, Inc.
This document may be distributed under the same terms as Perl itself.
                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlglossary5.16.1                           0100644 0001750 0001750 00000403576 12566207420 024013  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGLOSSARY 1"
.TH PERLGLOSSARY 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlglossary \- Perl Glossary
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A glossary of terms (technical and otherwise) used in the Perl documentation.
Other useful sources include the Free On-Line Dictionary of Computing
<http://foldoc.org/>, the Jargon File
<http://catb.org/~esr/jargon/>, and Wikipedia <http://www.wikipedia.org/>.
.SS "A"
.IX Subsection "A"
.IP "accessor methods" 4
.IX Item "accessor methods"
A \*(L"method\*(R" used to indirectly inspect or update an \*(L"object\*(R"'s
state (its instance variables).
.IP "actual arguments" 4
.IX Item "actual arguments"
The scalar values that you supply to a \*(L"function\*(R"
or \*(L"subroutine\*(R" when you call it.  For instance, when you call
\&\f(CW\*(C`power("puff")\*(C'\fR, the string \f(CW"puff"\fR is the actual argument.  See
also \*(L"argument\*(R" and \*(L"formal arguments\*(R".
.IP "address operator" 4
.IX Item "address operator"
Some languages work directly with the memory addresses of values, but
this can be like playing with fire.  Perl provides a set of asbestos
gloves for handling all memory management.  The closest to an address
operator in Perl is the backslash operator, but it gives you a \*(L"hard
reference\*(R", which is much safer than a memory address.
.IP "algorithm" 4
.IX Item "algorithm"
A well-defined sequence of steps, clearly enough explained that even a
computer could do them.
.IP "alias" 4
.IX Item "alias"
A nickname for something, which behaves in all ways as though you'd
used the original name instead of the nickname.  Temporary aliases are
implicitly created in the loop variable for \f(CW\*(C`foreach\*(C'\fR loops, in the
\&\f(CW$_\fR variable for map or grep
operators, in \f(CW$a\fR and \f(CW$b\fR during sort's
comparison function, and in each element of \f(CW@_\fR for the \*(L"actual
arguments\*(R" of a subroutine call.  Permanent aliases are explicitly
created in packages by importing symbols or by
assignment to typeglobs.  Lexically scoped aliases for
package variables are explicitly created by the our
declaration.
.IP "alternatives" 4
.IX Item "alternatives"
A list of possible choices from which you may select only one, as in
\&\*(L"Would you like door A, B, or C?\*(R"  Alternatives in regular expressions
are separated with a single vertical bar: \f(CW\*(C`|\*(C'\fR.  Alternatives in
normal Perl expressions are separated with a double vertical bar:
\&\f(CW\*(C`||\*(C'\fR.  Logical alternatives in \*(L"Boolean\*(R" expressions are separated
with either \f(CW\*(C`||\*(C'\fR or \f(CW\*(C`or\*(C'\fR.
.IP "anonymous" 4
.IX Item "anonymous"
Used to describe a \*(L"referent\*(R" that is not directly accessible
through a named \*(L"variable\*(R".  Such a referent must be indirectly
accessible through at least one \*(L"hard reference\*(R".  When the last
hard reference goes away, the anonymous referent is destroyed without
pity.
.IP "architecture" 4
.IX Item "architecture"
The kind of computer you're working on, where one \*(L"kind\*(R" of computer
means all those computers sharing a compatible machine language.
Since Perl programs are (typically) simple text files, not executable
images, a Perl program is much less sensitive to the architecture it's
running on than programs in other languages, such as C, that are
compiled into machine code.  See also \*(L"platform\*(R" and \*(L"operating
system\*(R".
.IP "argument" 4
.IX Item "argument"
A piece of data supplied to a program,
\&\*(L"subroutine\*(R", \*(L"function\*(R", or \*(L"method\*(R" to tell it what it's
supposed to do.  Also called a \*(L"parameter\*(R".
.IP "\s-1ARGV\s0" 4
.IX Item "ARGV"
The name of the array containing the \*(L"argument\*(R" \*(L"vector\*(R" from the
command line.  If you use the empty \f(CW\*(C`<>\*(C'\fR operator, \*(L"\s-1ARGV\s0\*(R" is
the name of both the \*(L"filehandle\*(R" used to traverse the arguments and
the \*(L"scalar\*(R" containing the name of the current input file.
.IP "arithmetical operator" 4
.IX Item "arithmetical operator"
A \*(L"symbol\*(R" such as \f(CW\*(C`+\*(C'\fR or \f(CW\*(C`/\*(C'\fR that tells Perl to do the arithmetic
you were supposed to learn in grade school.
.IP "array" 4
.IX Item "array"
An ordered sequence of values, stored such that you can
easily access any of the values using an integer \*(L"subscript\*(R"
that specifies the value's \*(L"offset\*(R" in the sequence.
.IP "array context" 4
.IX Item "array context"
An archaic expression for what is more correctly referred to as
\&\*(L"list context\*(R".
.IP "\s-1ASCII\s0" 4
.IX Item "ASCII"
The American Standard Code for Information Interchange (a 7\-bit
character set adequate only for poorly representing English text).
Often used loosely to describe the lowest 128 values of the various
\&\s-1ISO\-8859\-X\s0 character sets, a bunch of mutually incompatible 8\-bit
codes sometimes described as half \s-1ASCII\s0.  See also \*(L"Unicode\*(R".
.IP "assertion" 4
.IX Item "assertion"
A component of a \*(L"regular expression\*(R" that must be true for the
pattern to match but does not necessarily match any characters itself.
Often used specifically to mean a \*(L"zero width\*(R" assertion.
.IP "assignment" 4
.IX Item "assignment"
An \*(L"operator\*(R" whose assigned mission in life is to change the value
of a \*(L"variable\*(R".
.IP "assignment operator" 4
.IX Item "assignment operator"
Either a regular \*(L"assignment\*(R", or a compound \*(L"operator\*(R" composed
of an ordinary assignment and some other operator, that changes the
value of a variable in place, that is, relative to its old value.  For
example, \f(CW\*(C`$a += 2\*(C'\fR adds \f(CW2\fR to \f(CW$a\fR.
.IP "associative array" 4
.IX Item "associative array"
See \*(L"hash\*(R".  Please.
.IP "associativity" 4
.IX Item "associativity"
Determines whether you do the left \*(L"operator\*(R" first or the right
\&\*(L"operator\*(R" first when you have "A \*(L"operator\*(R" B \*(L"operator\*(R" C" and
the two operators are of the same precedence.  Operators like \f(CW\*(C`+\*(C'\fR are
left associative, while operators like \f(CW\*(C`**\*(C'\fR are right associative.
See perlop for a list of operators and their associativity.
.IP "asynchronous" 4
.IX Item "asynchronous"
Said of events or activities whose relative temporal ordering is
indeterminate because too many things are going on at once.  Hence, an
asynchronous event is one you didn't know when to expect.
.IP "atom" 4
.IX Item "atom"
A \*(L"regular expression\*(R" component potentially matching a
\&\*(L"substring\*(R" containing one or more characters and treated as an
indivisible syntactic unit by any following \*(L"quantifier\*(R".  (Contrast
with an \*(L"assertion\*(R" that matches something of \*(L"zero width\*(R" and may
not be quantified.)
.IP "atomic operation" 4
.IX Item "atomic operation"
When Democritus gave the word \*(L"atom\*(R" to the indivisible bits of
matter, he meant literally something that could not be cut: \fIa\-\fR
(not) + \fItomos\fR (cuttable).  An atomic operation is an action that
can't be interrupted, not one forbidden in a nuclear-free zone.
.IP "attribute" 4
.IX Item "attribute"
A new feature that allows the declaration of variables
and subroutines with modifiers as in \f(CW\*(C`sub foo : locked
method\*(C'\fR.  Also, another name for an \*(L"instance variable\*(R" of an
\&\*(L"object\*(R".
.IP "autogeneration" 4
.IX Item "autogeneration"
A feature of \*(L"operator overloading\*(R" of objects, whereby
the behavior of certain operators can be reasonably
deduced using more fundamental operators.  This assumes that the
overloaded operators will often have the same relationships as the
regular operators.  See perlop.
.IP "autoincrement" 4
.IX Item "autoincrement"
To add one to something automatically, hence the name of the \f(CW\*(C`++\*(C'\fR
operator.  To instead subtract one from something automatically is
known as an \*(L"autodecrement\*(R".
.IP "autoload" 4
.IX Item "autoload"
To load on demand.  (Also called \*(L"lazy\*(R" loading.)  Specifically, to
call an \s-1AUTOLOAD\s0 subroutine on behalf of an
undefined subroutine.
.IP "autosplit" 4
.IX Item "autosplit"
To split a string automatically, as the \fB\-a\fR \*(L"switch\*(R" does when
running under \fB\-p\fR or \fB\-n\fR in order to emulate \*(L"awk\*(R".  (See also
the AutoSplit module, which has nothing to do with the \fB\-a\fR
switch, but a lot to do with autoloading.)
.IP "autovivification" 4
.IX Item "autovivification"
A Greco-Roman word meaning \*(L"to bring oneself to life\*(R".  In Perl,
storage locations (lvalues) spontaneously generate
themselves as needed, including the creation of any \*(L"hard reference\*(R"
values to point to the next level of storage.  The assignment
\&\f(CW\*(C`$a[5][5][5][5][5] = "quintet"\*(C'\fR potentially creates five scalar
storage locations, plus four references (in the first four scalar
locations) pointing to four new anonymous arrays (to hold the last
four scalar locations).  But the point of autovivification is that you
don't have to worry about it.
.IP "\s-1AV\s0" 4
.IX Item "AV"
Short for \*(L"array value\*(R", which refers to one of Perl's internal data
types that holds an \*(L"array\*(R".  The \*(L"\s-1AV\s0\*(R" type is a subclass of
\&\*(L"\s-1SV\s0\*(R".
.IP "awk" 4
.IX Item "awk"
Descriptive editing term\*(--short for \*(L"awkward\*(R".  Also coincidentally
refers to a venerable text-processing language from which Perl derived
some of its high-level ideas.
.SS "B"
.IX Subsection "B"
.IP "backreference" 4
.IX Item "backreference"
A substring captured by a subpattern within
unadorned parentheses in a \*(L"regex\*(R", also referred to as a capture group.  The
sequences (\f(CW\*(C`\eg1\*(C'\fR, \f(CW\*(C`\eg2\*(C'\fR, etc.)  later in the same pattern refer back to
the corresponding subpattern in the current match.  Outside the pattern,
the numbered variables (\f(CW$1\fR, \f(CW$2\fR, etc.) continue to refer to these
same values, as long as the pattern was the last successful match of
the current dynamic scope.  \f(CW\*(C`\eg{\-1}\*(C'\fR can be used to refer to a group by
relative rather than absolute position; and groups can be also be named, and
referred to later by name rather than number.  See \*(L"Capture groups\*(R" in perlre.
.IP "backtracking" 4
.IX Item "backtracking"
The practice of saying, \*(L"If I had to do it all over, I'd do it
differently,\*(R" and then actually going back and doing it all over
differently.  Mathematically speaking, it's returning from an
unsuccessful recursion on a tree of possibilities.  Perl backtracks
when it attempts to match patterns with a \*(L"regular expression\*(R", and
its earlier attempts don't pan out.  See \*(L"Backtracking\*(R" in perlre.
.IP "backward compatibility" 4
.IX Item "backward compatibility"
Means you can still run your old program because we didn't break any
of the features or bugs it was relying on.
.IP "bareword" 4
.IX Item "bareword"
A word sufficiently ambiguous to be deemed illegal under use strict
\&'subs'.  In the absence of that stricture, a
bareword is treated as if quotes were around it.
.IP "base class" 4
.IX Item "base class"
A generic \*(L"object\*(R" type; that is, a \*(L"class\*(R" from which other, more
specific classes are derived genetically by \*(L"inheritance\*(R".  Also
called a \*(L"superclass\*(R" by people who respect their ancestors.
.IP "big-endian" 4
.IX Item "big-endian"
From Swift: someone who eats eggs big end first.  Also used of
computers that store the most significant \*(L"byte\*(R" of a word at a
lower byte address than the least significant byte.  Often considered
superior to little-endian machines.  See also \*(L"little-endian\*(R".
.IP "binary" 4
.IX Item "binary"
Having to do with numbers represented in base 2.  That means there's
basically two numbers, 0 and 1.  Also used to describe a \*(L"non-text
file\*(R", presumably because such a file makes full use of all the binary
bits in its bytes.  With the advent of \*(L"Unicode\*(R", this distinction,
already suspect, loses even more of its meaning.
.IP "binary operator" 4
.IX Item "binary operator"
An \*(L"operator\*(R" that takes two operands.
.IP "bind" 4
.IX Item "bind"
To assign a specific \*(L"network address\*(R" to a \*(L"socket\*(R".
.IP "bit" 4
.IX Item "bit"
An integer in the range from 0 to 1, inclusive.  The smallest possible
unit of information storage.  An eighth of a \*(L"byte\*(R" or of a dollar.
(The term \*(L"Pieces of Eight\*(R" comes from being able to split the old
Spanish dollar into 8 bits, each of which still counted for money.
That's why a 25\-cent piece today is still \*(L"two bits\*(R".)
.IP "bit shift" 4
.IX Item "bit shift"
The movement of bits left or right in a computer word, which has the
effect of multiplying or dividing by a power of 2.
.IP "bit string" 4
.IX Item "bit string"
A sequence of bits that is actually being thought of as a
sequence of bits, for once.
.IP "bless" 4
.IX Item "bless"
In corporate life, to grant official approval to a thing, as in, \*(L"The
\&\s-1VP\s0 of Engineering has blessed our WebCruncher project.\*(R" Similarly in
Perl, to grant official approval to a \*(L"referent\*(R" so that it can
function as an \*(L"object\*(R", such as a WebCruncher object.  See
\&\*(L"bless\*(R" in perlfunc.
.IP "block" 4
.IX Item "block"
What a \*(L"process\*(R" does when it has to wait for something: \*(L"My process
blocked waiting for the disk.\*(R"  As an unrelated noun, it refers to a
large chunk of data, of a size that the \*(L"operating system\*(R" likes to
deal with (normally a power of two such as 512 or 8192).  Typically
refers to a chunk of data that's coming from or going to a disk file.
.IP "\s-1BLOCK\s0" 4
.IX Item "BLOCK"
A syntactic construct consisting of a sequence of Perl
statements that is delimited by braces.  The \f(CW\*(C`if\*(C'\fR and
\&\f(CW\*(C`while\*(C'\fR statements are defined in terms of BLOCKs, for instance.
Sometimes we also say \*(L"block\*(R" to mean a lexical scope; that is, a
sequence of statements that act like a \*(L"\s-1BLOCK\s0\*(R", such as within an
eval or a file, even though the statements aren't
delimited by braces.
.IP "block buffering" 4
.IX Item "block buffering"
A method of making input and output efficient by passing one \*(L"block\*(R"
at a time.  By default, Perl does block buffering to disk files.  See
\&\*(L"buffer\*(R" and \*(L"command buffering\*(R".
.IP "Boolean" 4
.IX Item "Boolean"
A value that is either \*(L"true\*(R" or \*(L"false\*(R".
.IP "Boolean context" 4
.IX Item "Boolean context"
A special kind of \*(L"scalar context\*(R" used in conditionals to decide
whether the \*(L"scalar value\*(R" returned by an expression is \*(L"true\*(R" or
\&\*(L"false\*(R".  Does not evaluate as either a string or a number.  See
\&\*(L"context\*(R".
.IP "breakpoint" 4
.IX Item "breakpoint"
A spot in your program where you've told the debugger to stop
execution so you can poke around and see whether anything
is wrong yet.
.IP "broadcast" 4
.IX Item "broadcast"
To send a \*(L"datagram\*(R" to multiple destinations simultaneously.
.IP "\s-1BSD\s0" 4
.IX Item "BSD"
A psychoactive drug, popular in the 80s, probably developed at
U. C. Berkeley or thereabouts.  Similar in many ways to the
prescription-only medication called \*(L"System V\*(R", but infinitely more
useful.  (Or, at least, more fun.)  The full chemical name is
\&\*(L"Berkeley Standard Distribution\*(R".
.IP "bucket" 4
.IX Item "bucket"
A location in a \*(L"hash table\*(R" containing (potentially) multiple
entries whose keys \*(L"hash\*(R" to the same hash value according to its hash
function.  (As internal policy, you don't have to worry about it,
unless you're into internals, or policy.)
.IP "buffer" 4
.IX Item "buffer"
A temporary holding location for data.  Block buffering means that the data is passed on to its destination
whenever the buffer is full.  Line buffering means
that it's passed on whenever a complete line is received.  Command
buffering means that it's passed every time you do
a print command (or equivalent).  If your output is
unbuffered, the system processes it one byte at a time without the use
of a holding area.  This can be rather inefficient.
.IP "built-in" 4
.IX Item "built-in"
A \*(L"function\*(R" that is predefined in the language.  Even when hidden
by \*(L"overriding\*(R", you can always get at a built-in function by
qualifying its name with the \f(CW\*(C`CORE::\*(C'\fR pseudo-package.
.IP "bundle" 4
.IX Item "bundle"
A group of related modules on \*(L"\s-1CPAN\s0\*(R".  (Also, sometimes refers to a
group of command-line switches grouped into one \*(L"switch cluster\*(R".)
.IP "byte" 4
.IX Item "byte"
A piece of data worth eight bits in most places.
.IP "bytecode" 4
.IX Item "bytecode"
A pidgin-like language spoken among 'droids when they don't wish to
reveal their orientation (see \*(L"endian\*(R").  Named after some similar
languages spoken (for similar reasons) between compilers and
interpreters in the late 20th century.  These languages are
characterized by representing everything as a
non-architecture-dependent sequence of bytes.
.SS "C"
.IX Subsection "C"
.IP "C" 4
.IX Item "C"
A language beloved by many for its inside-out \*(L"type\*(R" definitions,
inscrutable \*(L"precedence\*(R" rules, and heavy \*(L"overloading\*(R" of the
function-call mechanism.  (Well, actually, people first switched to C
because they found lowercase identifiers easier to read than upper.)
Perl is written in C, so it's not surprising that Perl borrowed a few
ideas from it.
.IP "C preprocessor" 4
.IX Item "C preprocessor"
The typical C compiler's first pass, which processes lines beginning
with \f(CW\*(C`#\*(C'\fR for conditional compilation and macro definition and does
various manipulations of the program text based on the current
definitions.  Also known as \fIcpp\fR(1).
.IP "call by reference" 4
.IX Item "call by reference"
An \*(L"argument\*(R"\-passing mechanism in which the \*(L"formal arguments\*(R"
refer directly to the \*(L"actual arguments\*(R", and the \*(L"subroutine\*(R" can
change the actual arguments by changing the formal arguments.  That
is, the formal argument is an \*(L"alias\*(R" for the actual argument.  See
also \*(L"call by value\*(R".
.IP "call by value" 4
.IX Item "call by value"
An \*(L"argument\*(R"\-passing mechanism in which the \*(L"formal arguments\*(R"
refer to a copy of the \*(L"actual arguments\*(R", and the \*(L"subroutine\*(R"
cannot change the actual arguments by changing the formal arguments.
See also \*(L"call by reference\*(R".
.IP "callback" 4
.IX Item "callback"
A \*(L"handler\*(R" that you register with some other part of your program
in the hope that the other part of your program will \*(L"trigger\*(R" your
handler when some event of interest transpires.
.IP "canonical" 4
.IX Item "canonical"
Reduced to a standard form to facilitate comparison.
.IP "capture buffer, capture group" 4
.IX Item "capture buffer, capture group"
These two terms are synonymous:
a captured substring by a regex subpattern.
.IP "capturing" 4
.IX Item "capturing"
The use of parentheses around a \*(L"subpattern\*(R" in a \*(L"regular
expression\*(R" to store the matched \*(L"substring\*(R" as a \*(L"backreference\*(R"
or capture group.
(Captured strings are also returned as a list in \*(L"list context\*(R".)
.IP "character" 4
.IX Item "character"
A small integer representative of a unit of orthography.
Historically, characters were usually stored as fixed-width integers
(typically in a byte, or maybe two, depending on the character set),
but with the advent of \s-1UTF\-8\s0, characters are often stored in a
variable number of bytes depending on the size of the integer that
represents the character.  Perl manages this transparently for you,
for the most part.
.IP "character class" 4
.IX Item "character class"
A square-bracketed list of characters used in a \*(L"regular expression\*(R"
to indicate that any character of the set may occur at a given point.
Loosely, any predefined set of characters so used.
.IP "character property" 4
.IX Item "character property"
A predefined \*(L"character class\*(R" matchable by the \f(CW\*(C`\ep\*(C'\fR
\&\*(L"metasymbol\*(R".  Many standard properties are defined for \*(L"Unicode\*(R".
.IP "circumfix operator" 4
.IX Item "circumfix operator"
An \*(L"operator\*(R" that surrounds its \*(L"operand\*(R", like the angle
operator, or parentheses, or a hug.
.IP "class" 4
.IX Item "class"
A user-defined \*(L"type\*(R", implemented in Perl via a \*(L"package\*(R" that
provides (either directly or by inheritance) methods (that
is, subroutines) to handle instances of
the class (its objects).  See also \*(L"inheritance\*(R".
.IP "class method" 4
.IX Item "class method"
A \*(L"method\*(R" whose \*(L"invocant\*(R" is a \*(L"package\*(R" name, not an
\&\*(L"object\*(R" reference.  A method associated with the class as a whole.
.IP "client" 4
.IX Item "client"
In networking, a \*(L"process\*(R" that initiates contact with a \*(L"server\*(R"
process in order to exchange data and perhaps receive a service.
.IP "cloister" 4
.IX Item "cloister"
A \*(L"cluster\*(R" used to restrict the scope of a \*(L"regular expression
modifier\*(R".
.IP "closure" 4
.IX Item "closure"
An \*(L"anonymous\*(R" subroutine that, when a reference to it is generated
at run time, keeps track of the identities of externally visible
lexical variables even after those lexical
variables have supposedly gone out of \*(L"scope\*(R".  They're called
\&\*(L"closures\*(R" because this sort of behavior gives mathematicians a sense
of closure.
.IP "cluster" 4
.IX Item "cluster"
A parenthesized \*(L"subpattern\*(R" used to group parts of a \*(L"regular
expression\*(R" into a single \*(L"atom\*(R".
.IP "\s-1CODE\s0" 4
.IX Item "CODE"
The word returned by the ref function when you apply
it to a reference to a subroutine.  See also \*(L"\s-1CV\s0\*(R".
.IP "code generator" 4
.IX Item "code generator"
A system that writes code for you in a low-level language, such as
code to implement the backend of a compiler.  See \*(L"program
generator\*(R".
.IP "code point" 4
.IX Item "code point"
The position of a character in a character set encoding.  The character
\&\f(CW\*(C`NULL\*(C'\fR is almost certainly at the zeroth position in all character
sets, so its code point is 0.  The code point for the \f(CW\*(C`SPACE\*(C'\fR
character in the \s-1ASCII\s0 character set is 0x20, or 32 decimal; in \s-1EBCDIC\s0
it is 0x40, or 64 decimal.  The ord function returns
the code point of a character.
.Sp
\&\*(L"code position\*(R" and \*(L"ordinal\*(R" mean the same thing as \*(L"code point\*(R".
.IP "code subpattern" 4
.IX Item "code subpattern"
A \*(L"regular expression\*(R" subpattern whose real purpose is to execute
some Perl code, for example, the \f(CW\*(C`(?{...})\*(C'\fR and \f(CW\*(C`(??{...})\*(C'\fR
subpatterns.
.IP "collating sequence" 4
.IX Item "collating sequence"
The order into which characters sort.  This is used by
\&\*(L"string\*(R" comparison routines to decide, for example, where in this
glossary to put \*(L"collating sequence\*(R".
.IP "command" 4
.IX Item "command"
In \*(L"shell\*(R" programming, the syntactic combination of a program name
and its arguments.  More loosely, anything you type to a shell (a
command interpreter) that starts it doing something.  Even more
loosely, a Perl \*(L"statement\*(R", which might start with a \*(L"label\*(R" and
typically ends with a semicolon.
.IP "command buffering" 4
.IX Item "command buffering"
A mechanism in Perl that lets you store up the output of each Perl
\&\*(L"command\*(R" and then flush it out as a single request to the
\&\*(L"operating system\*(R".  It's enabled by setting the \f(CW$|\fR
(\f(CW$AUTOFLUSH\fR) variable to a true value.  It's used when you don't
want data sitting around not going where it's supposed to, which may
happen because the default on a \*(L"file\*(R" or \*(L"pipe\*(R" is to use
\&\*(L"block buffering\*(R".
.IP "command name" 4
.IX Item "command name"
The name of the program currently executing, as typed on the command
line.  In C, the \*(L"command\*(R" name is passed to the program as the
first command-line argument.  In Perl, it comes in separately as
\&\f(CW$0\fR.
.IP "command-line arguments" 4
.IX Item "command-line arguments"
The values you supply along with a program name when you
tell a \*(L"shell\*(R" to execute a \*(L"command\*(R".  These values are passed to
a Perl program through \f(CW@ARGV\fR.
.IP "comment" 4
.IX Item "comment"
A remark that doesn't affect the meaning of the program.  In Perl, a
comment is introduced by a \f(CW\*(C`#\*(C'\fR character and continues to the end of
the line.
.IP "compilation unit" 4
.IX Item "compilation unit"
The \*(L"file\*(R" (or \*(L"string\*(R", in the case of eval)
that is currently being compiled.
.IP "compile phase" 4
.IX Item "compile phase"
Any time before Perl starts running your main program.  See also
\&\*(L"run phase\*(R".  Compile phase is mostly spent in \*(L"compile time\*(R", but
may also be spent in \*(L"run time\*(R" when \f(CW\*(C`BEGIN\*(C'\fR blocks,
use declarations, or constant subexpressions are being
evaluated.  The startup and import code of any use
declaration is also run during compile phase.
.IP "compile time" 4
.IX Item "compile time"
The time when Perl is trying to make sense of your code, as opposed to
when it thinks it knows what your code means and is merely trying to
do what it thinks your code says to do, which is \*(L"run time\*(R".
.IP "compiler" 4
.IX Item "compiler"
Strictly speaking, a program that munches up another program and spits
out yet another file containing the program in a \*(L"more executable\*(R"
form, typically containing native machine instructions.  The \fIperl\fR
program is not a compiler by this definition, but it does contain a
kind of compiler that takes a program and turns it into a more
executable form (syntax trees) within the \fIperl\fR
process itself, which the \*(L"interpreter\*(R" then interprets.  There are,
however, extension modules to get Perl to act more like a
\&\*(L"real\*(R" compiler.  See O.
.IP "composer" 4
.IX Item "composer"
A \*(L"constructor\*(R" for a \*(L"referent\*(R" that isn't really an \*(L"object\*(R",
like an anonymous array or a hash (or a sonata, for that matter).  For
example, a pair of braces acts as a composer for a hash, and a pair of
brackets acts as a composer for an array.  See \*(L"Making
References\*(R" in perlref.
.IP "concatenation" 4
.IX Item "concatenation"
The process of gluing one cat's nose to another cat's tail.  Also, a
similar operation on two strings.
.IP "conditional" 4
.IX Item "conditional"
Something \*(L"iffy\*(R".  See \*(L"Boolean context\*(R".
.IP "connection" 4
.IX Item "connection"
In telephony, the temporary electrical circuit between the caller's
and the callee's phone.  In networking, the same kind of temporary
circuit between a \*(L"client\*(R" and a \*(L"server\*(R".
.IP "construct" 4
.IX Item "construct"
As a noun, a piece of syntax made up of smaller pieces.  As a
transitive verb, to create an \*(L"object\*(R" using a \*(L"constructor\*(R".
.IP "constructor" 4
.IX Item "constructor"
Any \*(L"class method\*(R", instance \*(L"method\*(R", or \*(L"subroutine\*(R"
that composes, initializes, blesses, and returns an \*(L"object\*(R".
Sometimes we use the term loosely to mean a \*(L"composer\*(R".
.IP "context" 4
.IX Item "context"
The surroundings, or environment.  The context given by the
surrounding code determines what kind of data a particular
\&\*(L"expression\*(R" is expected to return.  The three primary contexts are
\&\*(L"list context\*(R", \*(L"scalar context\*(R", and \*(L"void context\*(R".  Scalar
context is sometimes subdivided into \*(L"Boolean context\*(R", \*(L"numeric
context\*(R", \*(L"string context\*(R", and \*(L"void context\*(R".  There's also a
\&\*(L"don't care\*(R" scalar context (which is dealt with in Programming Perl,
Third Edition, Chapter 2, \*(L"Bits and Pieces\*(R" if you care).
.IP "continuation" 4
.IX Item "continuation"
The treatment of more than one physical \*(L"line\*(R" as a single logical
line.  \*(L"Makefile\*(R" lines are continued by putting a backslash before
the \*(L"newline\*(R".  Mail headers as defined by \s-1RFC\s0 822 are continued by
putting a space or tab \fIafter\fR the newline.  In general, lines in
Perl do not need any form of continuation mark, because \*(L"whitespace\*(R"
(including newlines) is gleefully ignored.  Usually.
.IP "core dump" 4
.IX Item "core dump"
The corpse of a \*(L"process\*(R", in the form of a file left in the
\&\*(L"working directory\*(R" of the process, usually as a result of certain
kinds of fatal error.
.IP "\s-1CPAN\s0" 4
.IX Item "CPAN"
The Comprehensive Perl Archive Network.  (See \*(L"What modules and extensions are available for Perl?  What is \s-1CPAN\s0?\*(R" in perlfaq2).
.IP "cracker" 4
.IX Item "cracker"
Someone who breaks security on computer systems.  A cracker may be a
true \*(L"hacker\*(R" or only a \*(L"script kiddie\*(R".
.IP "current package" 4
.IX Item "current package"
The \*(L"package\*(R" in which the current statement is compiled.  Scan
backwards in the text of your program through the current lexical
scope or any enclosing lexical scopes till you find
a package declaration.  That's your current package name.
.IP "current working directory" 4
.IX Item "current working directory"
See \*(L"working directory\*(R".
.IP "currently selected output channel" 4
.IX Item "currently selected output channel"
The last \*(L"filehandle\*(R" that was designated with
select(\f(CW\*(C`FILEHANDLE\*(C'\fR); \*(L"\s-1STDOUT\s0\*(R", if no filehandle
has been selected.
.IP "\s-1CV\s0" 4
.IX Item "CV"
An internal \*(L"code value\*(R" typedef, holding a \*(L"subroutine\*(R".  The \*(L"\s-1CV\s0\*(R"
type is a subclass of \*(L"\s-1SV\s0\*(R".
.SS "D"
.IX Subsection "D"
.IP "dangling statement" 4
.IX Item "dangling statement"
A bare, single \*(L"statement\*(R", without any braces, hanging off an \f(CW\*(C`if\*(C'\fR
or \f(CW\*(C`while\*(C'\fR conditional.  C allows them.  Perl doesn't.
.IP "data structure" 4
.IX Item "data structure"
How your various pieces of data relate to each other and what shape
they make when you put them all together, as in a rectangular table or
a triangular-shaped tree.
.IP "data type" 4
.IX Item "data type"
A set of possible values, together with all the operations that know
how to deal with those values.  For example, a numeric data type has a
certain set of numbers that you can work with and various mathematical
operations that you can do on the numbers but would make little sense
on, say, a string such as \f(CW"Kilroy"\fR.  Strings have their own
operations, such as \*(L"concatenation\*(R".  Compound types made of a
number of smaller pieces generally have operations to compose and
decompose them, and perhaps to rearrange them.  Objects
that model things in the real world often have operations that
correspond to real activities.  For instance, if you model an
elevator, your elevator object might have an \f(CW\*(C`open_door()\*(C'\fR
\&\*(L"method\*(R".
.IP "datagram" 4
.IX Item "datagram"
A packet of data, such as a \*(L"\s-1UDP\s0\*(R" message, that (from the viewpoint
of the programs involved) can be sent independently over the network.
(In fact, all packets are sent independently at the \*(L"\s-1IP\s0\*(R" level, but
\&\*(L"stream\*(R" protocols such as \*(L"\s-1TCP\s0\*(R" hide this from your program.)
.IP "\s-1DBM\s0" 4
.IX Item "DBM"
Stands for \*(L"Data Base Management\*(R" routines, a set of routines that
emulate an \*(L"associative array\*(R" using disk files.  The routines use a
dynamic hashing scheme to locate any entry with only two disk
accesses.  \s-1DBM\s0 files allow a Perl program to keep a persistent
\&\*(L"hash\*(R" across multiple invocations.  You can tie
your hash variables to various \s-1DBM\s0 implementations\*(--see AnyDBM_File
and DB_File.
.IP "declaration" 4
.IX Item "declaration"
An \*(L"assertion\*(R" that states something exists and perhaps describes
what it's like, without giving any commitment as to how or where
you'll use it.  A declaration is like the part of your recipe that
says, \*(L"two cups flour, one large egg, four or five tadpoles...\*(R"  See
\&\*(L"statement\*(R" for its opposite.  Note that some declarations also
function as statements.  Subroutine declarations also act as
definitions if a body is supplied.
.IP "decrement" 4
.IX Item "decrement"
To subtract a value from a variable, as in "decrement \f(CW$x\fR\*(L" (meaning
to remove 1 from its value) or \*(R"decrement \f(CW$x\fR by 3".
.IP "default" 4
.IX Item "default"
A \*(L"value\*(R" chosen for you if you don't supply a value of your own.
.IP "defined" 4
.IX Item "defined"
Having a meaning.  Perl thinks that some of the things people try to
do are devoid of meaning, in particular, making use of variables that
have never been given a \*(L"value\*(R" and performing certain operations on
data that isn't there.  For example, if you try to read data past the
end of a file, Perl will hand you back an undefined value.  See also
\&\*(L"false\*(R" and \*(L"defined\*(R" in perlfunc.
.IP "delimiter" 4
.IX Item "delimiter"
A \*(L"character\*(R" or \*(L"string\*(R" that sets bounds to an arbitrarily-sized
textual object, not to be confused with a \*(L"separator\*(R" or
\&\*(L"terminator\*(R".  \*(L"To delimit\*(R" really just means \*(L"to surround\*(R" or \*(L"to
enclose\*(R" (like these parentheses are doing).
.IP "deprecated modules and features" 4
.IX Item "deprecated modules and features"
Deprecated modules and features are those which were part of a stable
release, but later found to be subtly flawed, and which should be avoided.
They are subject to removal and/or bug-incompatible reimplementation in
the next major release (but they will be preserved through maintenance
releases).  Deprecation warnings are issued under \fB\-w\fR or \f(CW\*(C`use
diagnostics\*(C'\fR, and notices are found in perldeltas, as well as various
other PODs. Coding practices that misuse features, such as \f(CW\*(C`my $foo if
0\*(C'\fR, can also be deprecated.
.IP "dereference" 4
.IX Item "dereference"
A fancy computer science term meaning "to follow a \*(L"reference\*(R" to
what it points to\*(L".  The \*(R"de" part of it refers to the fact that
you're taking away one level of \*(L"indirection\*(R".
.IP "derived class" 4
.IX Item "derived class"
A \*(L"class\*(R" that defines some of its methods in terms of a
more generic class, called a \*(L"base class\*(R".  Note that classes aren't
classified exclusively into base classes or derived classes: a class
can function as both a derived class and a base class simultaneously,
which is kind of classy.
.IP "descriptor" 4
.IX Item "descriptor"
See \*(L"file descriptor\*(R".
.IP "destroy" 4
.IX Item "destroy"
To deallocate the memory of a \*(L"referent\*(R" (first triggering its
\&\f(CW\*(C`DESTROY\*(C'\fR method, if it has one).
.IP "destructor" 4
.IX Item "destructor"
A special \*(L"method\*(R" that is called when an \*(L"object\*(R" is thinking
about destroying itself.  A Perl program's \f(CW\*(C`DESTROY\*(C'\fR
method doesn't do the actual destruction; Perl just
triggers the method in case the \*(L"class\*(R" wants to do any
associated cleanup.
.IP "device" 4
.IX Item "device"
A whiz-bang hardware gizmo (like a disk or tape drive or a modem or a
joystick or a mouse) attached to your computer, that the \*(L"operating
system\*(R" tries to make look like a \*(L"file\*(R" (or a bunch of files).
Under Unix, these fake files tend to live in the \fI/dev\fR directory.
.IP "directive" 4
.IX Item "directive"
A \*(L"pod\*(R" directive.  See perlpod.
.IP "directory" 4
.IX Item "directory"
A special file that contains other files.  Some operating
systems call these \*(L"folders\*(R", \*(L"drawers\*(R", or
\&\*(L"catalogs\*(R".
.IP "directory handle" 4
.IX Item "directory handle"
A name that represents a particular instance of opening a directory to
read it, until you close it.  See the opendir
function.
.IP "dispatch" 4
.IX Item "dispatch"
To send something to its correct destination.  Often used
metaphorically to indicate a transfer of programmatic control to a
destination selected algorithmically, often by lookup in a table of
function references or, in the case of object
methods, by traversing the inheritance tree looking for the
most specific definition for the method.
.IP "distribution" 4
.IX Item "distribution"
A standard, bundled release of a system of software.  The default
usage implies source code is included.  If that is not the case, it
will be called a \*(L"binary-only\*(R" distribution.
.IP "(to be) dropped modules" 4
.IX Item "(to be) dropped modules"
When Perl 5 was first released (see perlhist), several modules were
included, which have now fallen out of common use.  It has been suggested
that these modules should be removed, since the distribution became rather
large, and the common criterion for new module additions is now limited to
modules that help to build, test, and extend perl itself.  Furthermore,
the \s-1CPAN\s0 (which didn't exist at the time of Perl 5.0) can become the new
home of dropped modules. Dropping modules is currently not an option, but
further developments may clear the last barriers.
.IP "dweomer" 4
.IX Item "dweomer"
An enchantment, illusion, phantasm, or jugglery.  Said when Perl's
magical \*(L"dwimmer\*(R" effects don't do what you expect, but rather seem
to be the product of arcane dweomercraft, sorcery, or wonder working.
[From Old English]
.IP "dwimmer" 4
.IX Item "dwimmer"
\&\s-1DWIM\s0 is an acronym for \*(L"Do What I Mean\*(R", the principle that something
should just do what you want it to do without an undue amount of fuss.
A bit of code that does \*(L"dwimming\*(R" is a \*(L"dwimmer\*(R".  Dwimming can
require a great deal of behind-the-scenes magic, which (if it doesn't
stay properly behind the scenes) is called a \*(L"dweomer\*(R" instead.
.IP "dynamic scoping" 4
.IX Item "dynamic scoping"
Dynamic scoping works over a dynamic scope, making variables visible
throughout the rest of the \*(L"block\*(R" in which they are first used and
in any subroutines that are called by the rest of the
block.  Dynamically scoped variables can have their values temporarily
changed (and implicitly restored later) by a local
operator.  (Compare \*(L"lexical scoping\*(R".)  Used more loosely to mean
how a subroutine that is in the middle of calling another subroutine
\&\*(L"contains\*(R" that subroutine at \*(L"run time\*(R".
.SS "E"
.IX Subsection "E"
.IP "eclectic" 4
.IX Item "eclectic"
Derived from many sources.  Some would say \fItoo\fR many.
.IP "element" 4
.IX Item "element"
A basic building block.  When you're talking about an \*(L"array\*(R", it's
one of the items that make up the array.
.IP "embedding" 4
.IX Item "embedding"
When something is contained in something else, particularly when that
might be considered surprising: \*(L"I've embedded a complete Perl
interpreter in my editor!\*(R"
.IP "empty list" 4
.IX Item "empty list"
See </null list>.
.IP "empty subclass test" 4
.IX Item "empty subclass test"
The notion that an empty \*(L"derived class\*(R" should behave exactly like
its \*(L"base class\*(R".
.IP "en passant" 4
.IX Item "en passant"
When you change a \*(L"value\*(R" as it is being copied.  [From French, \*(L"in
passing\*(R", as in the exotic pawn-capturing maneuver in chess.]
.IP "encapsulation" 4
.IX Item "encapsulation"
The veil of abstraction separating the \*(L"interface\*(R" from the
\&\*(L"implementation\*(R" (whether enforced or not), which mandates that all
access to an \*(L"object\*(R"'s state be through methods alone.
.IP "endian" 4
.IX Item "endian"
See \*(L"little-endian\*(R" and \*(L"big-endian\*(R".
.IP "environment" 4
.IX Item "environment"
The collective set of environment variables
your \*(L"process\*(R" inherits from its parent.  Accessed via \f(CW%ENV\fR.
.IP "environment variable" 4
.IX Item "environment variable"
A mechanism by which some high-level agent such as a user can pass its
preferences down to its future offspring (child processes,
grandchild processes, great-grandchild processes, and so on).  Each
environment variable is a \*(L"key\*(R"/\*(L"value\*(R" pair, like one entry in a
\&\*(L"hash\*(R".
.IP "\s-1EOF\s0" 4
.IX Item "EOF"
End of File.  Sometimes used metaphorically as the terminating string
of a \*(L"here document\*(R".
.IP "errno" 4
.IX Item "errno"
The error number returned by a \*(L"syscall\*(R" when it fails.  Perl refers
to the error by the name \f(CW$!\fR (or \f(CW$OS_ERROR\fR if you use the English
module).
.IP "error" 4
.IX Item "error"
See \*(L"exception\*(R" or \*(L"fatal error\*(R".
.IP "escape sequence" 4
.IX Item "escape sequence"
See \*(L"metasymbol\*(R".
.IP "exception" 4
.IX Item "exception"
A fancy term for an error.  See \*(L"fatal error\*(R".
.IP "exception handling" 4
.IX Item "exception handling"
The way a program responds to an error.  The exception handling
mechanism in Perl is the eval operator.
.IP "exec" 4
.IX Item "exec"
To throw away the current \*(L"process\*(R"'s program and replace it with
another without exiting the process or relinquishing any resources
held (apart from the old memory image).
.IP "executable file" 4
.IX Item "executable file"
A \*(L"file\*(R" that is specially marked to tell the \*(L"operating system\*(R"
that it's okay to run this file as a program.  Usually shortened to
\&\*(L"executable\*(R".
.IP "execute" 4
.IX Item "execute"
To run a program or \*(L"subroutine\*(R".  (Has nothing
to do with the kill built-in, unless you're trying to
run a \*(L"signal handler\*(R".)
.IP "execute bit" 4
.IX Item "execute bit"
The special mark that tells the operating system it can run this
program.  There are actually three execute bits under Unix, and which
bit gets used depends on whether you own the file singularly,
collectively, or not at all.
.IP "exit status" 4
.IX Item "exit status"
See \*(L"status\*(R".
.IP "export" 4
.IX Item "export"
To make symbols from a \*(L"module\*(R" available for \*(L"import\*(R" by other modules.
.IP "expression" 4
.IX Item "expression"
Anything you can legally say in a spot where a \*(L"value\*(R" is required.
Typically composed of literals, variables,
operators, functions, and \*(L"subroutine\*(R"
calls, not necessarily in that order.
.IP "extension" 4
.IX Item "extension"
A Perl module that also pulls in compiled C or \*(C+ code.  More
generally, any experimental option that can be compiled into Perl,
such as multithreading.
.SS "F"
.IX Subsection "F"
.IP "false" 4
.IX Item "false"
In Perl, any value that would look like \f(CW""\fR or \f(CW"0"\fR if evaluated
in a string context.  Since undefined values evaluate to \f(CW""\fR, all
undefined values are false (including the \*(L"null list\*(R"), but not all
false values are undefined.
.IP "\s-1FAQ\s0" 4
.IX Item "FAQ"
Frequently Asked Question (although not necessarily frequently
answered, especially if the answer appears in the Perl \s-1FAQ\s0 shipped
standard with Perl).
.IP "fatal error" 4
.IX Item "fatal error"
An uncaught \*(L"exception\*(R", which causes termination of the \*(L"process\*(R"
after printing a message on your \*(L"standard error\*(R" stream.  Errors
that happen inside an eval are not fatal.  Instead,
the eval terminates after placing the exception
message in the \f(CW$@\fR (\f(CW$EVAL_ERROR\fR) variable.  You can try to
provoke a fatal error with the die operator (known as
throwing or raising an exception), but this may be caught by a
dynamically enclosing eval.  If not caught, the
die becomes a fatal error.
.IP "field" 4
.IX Item "field"
A single piece of numeric or string data that is part of a longer
\&\*(L"string\*(R", \*(L"record\*(R", or \*(L"line\*(R".  Variable-width fields are usually
split up by separators (so use split to
extract the fields), while fixed-width fields are usually at fixed
positions (so use unpack).  Instance
variables are also known as fields.
.IP "\s-1FIFO\s0" 4
.IX Item "FIFO"
First In, First Out.  See also \*(L"\s-1LIFO\s0\*(R".  Also, a nickname for a
\&\*(L"named pipe\*(R".
.IP "file" 4
.IX Item "file"
A named collection of data, usually stored on disk in a \*(L"directory\*(R"
in a \*(L"filesystem\*(R".  Roughly like a document, if you're into office
metaphors.  In modern filesystems, you can actually give a file more
than one name.  Some files have special properties, like directories
and devices.
.IP "file descriptor" 4
.IX Item "file descriptor"
The little number the \*(L"operating system\*(R" uses to keep track of which
opened \*(L"file\*(R" you're talking about.  Perl hides the file descriptor
inside a \*(L"standard I/O\*(R" stream and then attaches the stream to
a \*(L"filehandle\*(R".
.IP "file test operator" 4
.IX Item "file test operator"
A built-in unary operator that you use to determine whether something
is \*(L"true\*(R" about a file, such as \f(CW\*(C`\-o $filename\*(C'\fR to test whether
you're the owner of the file.
.IP "fileglob" 4
.IX Item "fileglob"
A \*(L"wildcard\*(R" match on filenames.  See the
glob function.
.IP "filehandle" 4
.IX Item "filehandle"
An identifier (not necessarily related to the real name of a file)
that represents a particular instance of opening a file until you
close it.  If you're going to open and close several different files
in succession, it's fine to open each of them with the same
filehandle, so you don't have to write out separate code to process
each file.
.IP "filename" 4
.IX Item "filename"
One name for a file.  This name is listed in a \*(L"directory\*(R", and you
can use it in an open to tell the \*(L"operating
system\*(R" exactly which file you want to open, and associate the file
with a \*(L"filehandle\*(R" which will carry the subsequent identity of that
file in your program, until you close it.
.IP "filesystem" 4
.IX Item "filesystem"
A set of directories and files residing on a
partition of the disk.  Sometimes known as a \*(L"partition\*(R".  You can
change the file's name or even move a file around from directory to
directory within a filesystem without actually moving the file itself,
at least under Unix.
.IP "filter" 4
.IX Item "filter"
A program designed to take a \*(L"stream\*(R" of input and transform it into
a stream of output.
.IP "flag" 4
.IX Item "flag"
We tend to avoid this term because it means so many things.  It may
mean a command-line \*(L"switch\*(R" that takes no argument
itself (such as Perl's \fB\-n\fR and \fB\-p\fR
flags) or, less frequently, a single-bit indicator (such as the
\&\f(CW\*(C`O_CREAT\*(C'\fR and \f(CW\*(C`O_EXCL\*(C'\fR flags used in
sysopen).
.IP "floating point" 4
.IX Item "floating point"
A method of storing numbers in \*(L"scientific notation\*(R", such that the
precision of the number is independent of its magnitude (the decimal
point \*(L"floats\*(R").  Perl does its numeric work with floating-point
numbers (sometimes called \*(L"floats\*(R"), when it can't get away with
using integers.  Floating-point numbers are mere
approximations of real numbers.
.IP "flush" 4
.IX Item "flush"
The act of emptying a \*(L"buffer\*(R", often before it's full.
.IP "\s-1FMTEYEWTK\s0" 4
.IX Item "FMTEYEWTK"
Far More Than Everything You Ever Wanted To Know.  An exhaustive
treatise on one narrow topic, something of a super\-\*(L"\s-1FAQ\s0\*(R".  See Tom
for far more.
.IP "fork" 4
.IX Item "fork"
To create a child \*(L"process\*(R" identical to the parent process at its
moment of conception, at least until it gets ideas of its own.  A
thread with protected memory.
.IP "formal arguments" 4
.IX Item "formal arguments"
The generic names by which a \*(L"subroutine\*(R" knows its
arguments.  In many languages, formal arguments are
always given individual names, but in Perl, the formal arguments are
just the elements of an array.  The formal arguments to a Perl program
are \f(CW$ARGV[0]\fR, \f(CW$ARGV[1]\fR, and so on.  Similarly, the formal
arguments to a Perl subroutine are \f(CW$_[0]\fR, \f(CW$_[1]\fR, and so on.  You
may give the arguments individual names by assigning the values to a
my list.  See also \*(L"actual arguments\*(R".
.IP "format" 4
.IX Item "format"
A specification of how many spaces and digits and things to put
somewhere so that whatever you're printing comes out nice and pretty.
.IP "freely available" 4
.IX Item "freely available"
Means you don't have to pay money to get it, but the copyright on it
may still belong to someone else (like Larry).
.IP "freely redistributable" 4
.IX Item "freely redistributable"
Means you're not in legal trouble if you give a bootleg copy of it to
your friends and we find out about it.  In fact, we'd rather you gave
a copy to all your friends.
.IP "freeware" 4
.IX Item "freeware"
Historically, any software that you give away, particularly if you
make the source code available as well.  Now often called \f(CW\*(C`open
source software\*(C'\fR.  Recently there has been a trend to use the term in
contradistinction to \*(L"open source software\*(R", to refer only to free
software released under the Free Software Foundation's \s-1GPL\s0 (General
Public License), but this is difficult to justify etymologically.
.IP "function" 4
.IX Item "function"
Mathematically, a mapping of each of a set of input values to a
particular output value.  In computers, refers to a \*(L"subroutine\*(R" or
\&\*(L"operator\*(R" that returns a \*(L"value\*(R".  It may or may not have input
values (called arguments).
.IP "funny character" 4
.IX Item "funny character"
Someone like Larry, or one of his peculiar friends.  Also refers to
the strange prefixes that Perl requires as noun markers on its
variables.
.SS "G"
.IX Subsection "G"
.IP "garbage collection" 4
.IX Item "garbage collection"
A misnamed feature\*(--it should be called, \*(L"expecting your mother to
pick up after you\*(R".  Strictly speaking, Perl doesn't do this, but it
relies on a reference-counting mechanism to keep things tidy.
However, we rarely speak strictly and will often refer to the
reference-counting scheme as a form of garbage collection.  (If it's
any comfort, when your interpreter exits, a \*(L"real\*(R" garbage collector
runs to make sure everything is cleaned up if you've been messy with
circular references and such.)
.IP "\s-1GID\s0" 4
.IX Item "GID"
Group ID\*(--in Unix, the numeric group \s-1ID\s0 that the \*(L"operating system\*(R"
uses to identify you and members of your \*(L"group\*(R".
.IP "glob" 4
.IX Item "glob"
Strictly, the shell's \f(CW\*(C`*\*(C'\fR character, which will match a \*(L"glob\*(R" of
characters when you're trying to generate a list of filenames.
Loosely, the act of using globs and similar symbols to do pattern
matching.  See also \*(L"fileglob\*(R" and \*(L"typeglob\*(R".
.IP "global" 4
.IX Item "global"
Something you can see from anywhere, usually used of
variables and subroutines that are visible
everywhere in your program.  In Perl, only certain special variables
are truly global\*(--most variables (and all subroutines) exist only in
the current \*(L"package\*(R".  Global variables can be declared with
our.  See \*(L"our\*(R" in perlfunc.
.IP "global destruction" 4
.IX Item "global destruction"
The \*(L"garbage collection\*(R" of globals (and the running of any
associated object destructors) that takes place when a Perl
\&\*(L"interpreter\*(R" is being shut down.  Global destruction should not be
confused with the Apocalypse, except perhaps when it should.
.IP "glue language" 4
.IX Item "glue language"
A language such as Perl that is good at hooking things together that
weren't intended to be hooked together.
.IP "granularity" 4
.IX Item "granularity"
The size of the pieces you're dealing with, mentally speaking.
.IP "greedy" 4
.IX Item "greedy"
A \*(L"subpattern\*(R" whose \*(L"quantifier\*(R" wants to match as many things as
possible.
.IP "grep" 4
.IX Item "grep"
Originally from the old Unix editor command for \*(L"Globally search for a
Regular Expression and Print it\*(R", now used in the general sense of any
kind of search, especially text searches.  Perl has a built-in
grep function that searches a list for elements
matching any given criterion, whereas the \fIgrep\fR(1) program searches
for lines matching a \*(L"regular expression\*(R" in one or more files.
.IP "group" 4
.IX Item "group"
A set of users of which you are a member.  In some operating systems
(like Unix), you can give certain file access permissions to other
members of your group.
.IP "\s-1GV\s0" 4
.IX Item "GV"
An internal \*(L"glob value\*(R" typedef, holding a \*(L"typeglob\*(R".  The \*(L"\s-1GV\s0\*(R"
type is a subclass of \*(L"\s-1SV\s0\*(R".
.SS "H"
.IX Subsection "H"
.IP "hacker" 4
.IX Item "hacker"
Someone who is brilliantly persistent in solving technical problems,
whether these involve golfing, fighting orcs, or programming.  Hacker
is a neutral term, morally speaking.  Good hackers are not to be
confused with evil crackers or clueless script
kiddies.  If you confuse them, we will presume that
you are either evil or clueless.
.IP "handler" 4
.IX Item "handler"
A \*(L"subroutine\*(R" or \*(L"method\*(R" that is called by Perl when your
program needs to respond to some internal event, such as a \*(L"signal\*(R",
or an encounter with an operator subject to \*(L"operator overloading\*(R".
See also \*(L"callback\*(R".
.IP "hard reference" 4
.IX Item "hard reference"
A \*(L"scalar\*(R" \*(L"value\*(R" containing the actual address of a
\&\*(L"referent\*(R", such that the referent's \*(L"reference\*(R" count accounts
for it.  (Some hard references are held internally, such as the
implicit reference from one of a \*(L"typeglob\*(R"'s variable slots to its
corresponding referent.)  A hard reference is different from a
\&\*(L"symbolic reference\*(R".
.IP "hash" 4
.IX Item "hash"
An unordered association of \*(L"key\*(R"/\*(L"value\*(R" pairs, stored such that
you can easily use a string \*(L"key\*(R" to look up its associated data
\&\*(L"value\*(R".  This glossary is like a hash, where the word to be defined
is the key, and the definition is the value.  A hash is also sometimes
septisyllabically called an \*(L"associative array\*(R", which is a pretty
good reason for simply calling it a \*(L"hash\*(R" instead. A hash can optionally
be restricted to a fixed set of keys.
.IP "hash table" 4
.IX Item "hash table"
A data structure used internally by Perl for implementing associative
arrays (hashes) efficiently.  See also \*(L"bucket\*(R".
.IP "header file" 4
.IX Item "header file"
A file containing certain required definitions that you must include
\&\*(L"ahead\*(R" of the rest of your program to do certain obscure operations.
A C header file has a \fI.h\fR extension.  Perl doesn't really have
header files, though historically Perl has sometimes used translated
\&\fI.h\fR files with a \fI.ph\fR extension.  See \*(L"require\*(R" in perlfunc.
(Header files have been superseded by the \*(L"module\*(R" mechanism.)
.IP "here document" 4
.IX Item "here document"
So called because of a similar construct in shells that
pretends that the lines following the \*(L"command\*(R" are a
separate \*(L"file\*(R" to be fed to the command, up to some terminating
string.  In Perl, however, it's just a fancy form of quoting.
.IP "hexadecimal" 4
.IX Item "hexadecimal"
A number in base 16, \*(L"hex\*(R" for short.  The digits for 10 through 16
are customarily represented by the letters \f(CW\*(C`a\*(C'\fR through \f(CW\*(C`f\*(C'\fR.
Hexadecimal constants in Perl start with \f(CW\*(C`0x\*(C'\fR.  See also
\&\*(L"hex\*(R" in perlfunc.
.IP "home directory" 4
.IX Item "home directory"
The directory you are put into when you log in.  On a Unix system, the
name is often placed into \f(CW$ENV{HOME}\fR or \f(CW$ENV{LOGDIR}\fR by
\&\fIlogin\fR, but you can also find it with \f(CW\*(C`(getpwuid($<))[7]\*(C'\fR.
(Some platforms do not have a concept of a home directory.)
.IP "host" 4
.IX Item "host"
The computer on which a program or other data resides.
.IP "hubris" 4
.IX Item "hubris"
Excessive pride, the sort of thing Zeus zaps you for.  Also the
quality that makes you write (and maintain) programs that other people
won't want to say bad things about.  Hence, the third great virtue of
a programmer.  See also \*(L"laziness\*(R" and \*(L"impatience\*(R".
.IP "\s-1HV\s0" 4
.IX Item "HV"
Short for a \*(L"hash value\*(R" typedef, which holds Perl's internal
representation of a hash.  The \*(L"\s-1HV\s0\*(R" type is a subclass of \*(L"\s-1SV\s0\*(R".
.SS "I"
.IX Subsection "I"
.IP "identifier" 4
.IX Item "identifier"
A legally formed name for most anything in which a computer program
might be interested.  Many languages (including Perl) allow
identifiers that start with a letter and contain letters and digits.
Perl also counts the underscore character as a valid letter.  (Perl
also has more complicated names, such as \*(L"qualified\*(R" names.)
.IP "impatience" 4
.IX Item "impatience"
The anger you feel when the computer is being lazy.  This makes you
write programs that don't just react to your needs, but actually
anticipate them.  Or at least that pretend to.  Hence, the second
great virtue of a programmer.  See also \*(L"laziness\*(R" and \*(L"hubris\*(R".
.IP "implementation" 4
.IX Item "implementation"
How a piece of code actually goes about doing its job.  Users of the
code should not count on implementation details staying the same
unless they are part of the published \*(L"interface\*(R".
.IP "import" 4
.IX Item "import"
To gain access to symbols that are exported from another module.  See
\&\*(L"use\*(R" in perlfunc.
.IP "increment" 4
.IX Item "increment"
To increase the value of something by 1 (or by some other number, if
so specified).
.IP "indexing" 4
.IX Item "indexing"
In olden days, the act of looking up a \*(L"key\*(R" in an actual index
(such as a phone book), but now merely the act of using any kind of
key or position to find the corresponding \*(L"value\*(R", even if no index
is involved.  Things have degenerated to the point that Perl's
index function merely locates the position (index)
of one string in another.
.IP "indirect filehandle" 4
.IX Item "indirect filehandle"
An \*(L"expression\*(R" that evaluates to something that can be used as a
\&\*(L"filehandle\*(R": a \*(L"string\*(R" (filehandle name), a \*(L"typeglob\*(R", a
typeglob \*(L"reference\*(R", or a low-level \*(L"\s-1IO\s0\*(R" object.
.IP "indirect object" 4
.IX Item "indirect object"
In English grammar, a short noun phrase between a verb and its direct
object indicating the beneficiary or recipient of the action.  In
Perl, \f(CW\*(C`print STDOUT "$foo\en";\*(C'\fR can be understood as \*(L"verb
indirect-object object\*(R" where \*(L"\s-1STDOUT\s0\*(R" is the recipient of the
print action, and \f(CW"$foo"\fR is the object being
printed.  Similarly, when invoking a \*(L"method\*(R", you might place the
invocant between the method and its arguments:
.Sp
.Vb 3
\&  $gollum = new Pathetic::Creature "Smeagol";
\&  give $gollum "Fisssssh!";
\&  give $gollum "Precious!";
.Ve
.Sp
In modern Perl, calling methods this way is often considered bad practice and
to be avoided.
.IP "indirect object slot" 4
.IX Item "indirect object slot"
The syntactic position falling between a method call and its arguments
when using the indirect object invocation syntax.  (The slot is
distinguished by the absence of a comma between it and the next
argument.) \*(L"\s-1STDERR\s0\*(R" is in the indirect object slot here:
.Sp
.Vb 2
\&  print STDERR "Awake!  Awake!  Fear, Fire,
\&      Foes!  Awake!\en";
.Ve
.IP "indirection" 4
.IX Item "indirection"
If something in a program isn't the value you're looking for but
indicates where the value is, that's indirection.  This can be done
with either symbolic references or hard
references.
.IP "infix" 4
.IX Item "infix"
An \*(L"operator\*(R" that comes in between its operands, such
as multiplication in \f(CW\*(C`24 * 7\*(C'\fR.
.IP "inheritance" 4
.IX Item "inheritance"
What you get from your ancestors, genetically or otherwise.  If you
happen to be a \*(L"class\*(R", your ancestors are called base
classes and your descendants are called derived
classes.  See \*(L"single inheritance\*(R" and \*(L"multiple
inheritance\*(R".
.IP "instance" 4
.IX Item "instance"
Short for \*(L"an instance of a class\*(R", meaning an \*(L"object\*(R" of that \*(L"class\*(R".
.IP "instance variable" 4
.IX Item "instance variable"
An \*(L"attribute\*(R" of an \*(L"object\*(R"; data stored with the particular
object rather than with the class as a whole.
.IP "integer" 4
.IX Item "integer"
A number with no fractional (decimal) part.  A counting number, like
1, 2, 3, and so on, but including 0 and the negatives.
.IP "interface" 4
.IX Item "interface"
The services a piece of code promises to provide forever, in contrast to
its \*(L"implementation\*(R", which it should feel free to change whenever it
likes.
.IP "interpolation" 4
.IX Item "interpolation"
The insertion of a scalar or list value somewhere in the middle of
another value, such that it appears to have been there all along.  In
Perl, variable interpolation happens in double-quoted strings and
patterns, and list interpolation occurs when constructing the list of
values to pass to a list operator or other such construct that takes a
\&\*(L"\s-1LIST\s0\*(R".
.IP "interpreter" 4
.IX Item "interpreter"
Strictly speaking, a program that reads a second program and does what
the second program says directly without turning the program into a
different form first, which is what compilers do.  Perl
is not an interpreter by this definition, because it contains a kind
of compiler that takes a program and turns it into a more executable
form (syntax trees) within the \fIperl\fR process itself,
which the Perl \*(L"run time\*(R" system then interprets.
.IP "invocant" 4
.IX Item "invocant"
The agent on whose behalf a \*(L"method\*(R" is invoked.  In a \*(L"class\*(R"
method, the invocant is a package name.  In an \*(L"instance\*(R" method,
the invocant is an object reference.
.IP "invocation" 4
.IX Item "invocation"
The act of calling up a deity, daemon, program, method, subroutine, or
function to get it do what you think it's supposed to do.  We usually
\&\*(L"call\*(R" subroutines but \*(L"invoke\*(R" methods, since it sounds cooler.
.IP "I/O" 4
.IX Item "I/O"
Input from, or output to, a \*(L"file\*(R" or \*(L"device\*(R".
.IP "\s-1IO\s0" 4
.IX Item "IO"
An internal I/O object.  Can also mean \*(L"indirect object\*(R".
.IP "\s-1IP\s0" 4
.IX Item "IP"
Internet Protocol, or Intellectual Property.
.IP "\s-1IPC\s0" 4
.IX Item "IPC"
Interprocess Communication.
.IP "is-a" 4
.IX Item "is-a"
A relationship between two objects in which one object is
considered to be a more specific version of the other, generic object:
\&\*(L"A camel is a mammal.\*(R"  Since the generic object really only exists in
a Platonic sense, we usually add a little abstraction to the notion of
objects and think of the relationship as being between a generic
\&\*(L"base class\*(R" and a specific \*(L"derived class\*(R".  Oddly enough,
Platonic classes don't always have Platonic relationships\*(--see
\&\*(L"inheritance\*(R".
.IP "iteration" 4
.IX Item "iteration"
Doing something repeatedly.
.IP "iterator" 4
.IX Item "iterator"
A special programming gizmo that keeps track of where you are in
something that you're trying to iterate over.  The \f(CW\*(C`foreach\*(C'\fR loop in
Perl contains an iterator; so does a hash, allowing you to
each through it.
.IP "\s-1IV\s0" 4
.IX Item "IV"
The integer four, not to be confused with six, Tom's favorite editor.
\&\s-1IV\s0 also means an internal Integer Value of the type a \*(L"scalar\*(R" can
hold, not to be confused with an \*(L"\s-1NV\s0\*(R".
.SS "J"
.IX Subsection "J"
.IP "\s-1JAPH\s0" 4
.IX Item "JAPH"
\&\*(L"Just Another Perl Hacker,\*(R" a clever but cryptic bit of Perl code that
when executed, evaluates to that string.  Often used to illustrate a
particular Perl feature, and something of an ongoing Obfuscated Perl
Contest seen in Usenix signatures.
.SS "K"
.IX Subsection "K"
.IP "key" 4
.IX Item "key"
The string index to a \*(L"hash\*(R", used to look up the \*(L"value\*(R"
associated with that key.
.IP "keyword" 4
.IX Item "keyword"
See \*(L"reserved words\*(R".
.SS "L"
.IX Subsection "L"
.IP "label" 4
.IX Item "label"
A name you give to a \*(L"statement\*(R" so that you can talk about that
statement elsewhere in the program.
.IP "laziness" 4
.IX Item "laziness"
The quality that makes you go to great effort to reduce overall energy
expenditure.  It makes you write labor-saving programs that other
people will find useful, and document what you wrote so you don't have
to answer so many questions about it.  Hence, the first great virtue
of a programmer.  Also hence, this book.  See also \*(L"impatience\*(R" and
\&\*(L"hubris\*(R".
.IP "left shift" 4
.IX Item "left shift"
A \*(L"bit shift\*(R" that multiplies the number by some power of 2.
.IP "leftmost longest" 4
.IX Item "leftmost longest"
The preference of the \*(L"regular expression\*(R" engine to match the
leftmost occurrence of a \*(L"pattern\*(R", then given a position at which a
match will occur, the preference for the longest match (presuming the
use of a \*(L"greedy\*(R" quantifier).  See perlre for \fImuch\fR more on
this subject.
.IP "lexeme" 4
.IX Item "lexeme"
Fancy term for a \*(L"token\*(R".
.IP "lexer" 4
.IX Item "lexer"
Fancy term for a \*(L"tokener\*(R".
.IP "lexical analysis" 4
.IX Item "lexical analysis"
Fancy term for \*(L"tokenizing\*(R".
.IP "lexical scoping" 4
.IX Item "lexical scoping"
Looking at your \fIOxford English Dictionary\fR through a microscope.
(Also known as \*(L"static scoping\*(R", because dictionaries don't change
very fast.)  Similarly, looking at variables stored in a private
dictionary (namespace) for each scope, which are visible only from
their point of declaration down to the end of the lexical scope in
which they are declared.  \-\-Syn. \*(L"static scoping\*(R".
\&\-\-Ant. \*(L"dynamic scoping\*(R".
.IP "lexical variable" 4
.IX Item "lexical variable"
A \*(L"variable\*(R" subject to \*(L"lexical scoping\*(R", declared by
my.  Often just called a \*(L"lexical\*(R".  (The
our declaration declares a lexically scoped name for a
global variable, which is not itself a lexical variable.)
.IP "library" 4
.IX Item "library"
Generally, a collection of procedures.  In ancient days, referred to a
collection of subroutines in a \fI.pl\fR file.  In modern times, refers
more often to the entire collection of Perl modules on your
system.
.IP "\s-1LIFO\s0" 4
.IX Item "LIFO"
Last In, First Out.  See also \*(L"\s-1FIFO\s0\*(R".  A \s-1LIFO\s0 is usually called a
\&\*(L"stack\*(R".
.IP "line" 4
.IX Item "line"
In Unix, a sequence of zero or more non-newline characters terminated
with a \*(L"newline\*(R" character.  On non-Unix machines, this is emulated
by the C library even if the underlying \*(L"operating system\*(R" has
different ideas.
.IP "line buffering" 4
.IX Item "line buffering"
Used by a \*(L"standard I/O\*(R" output stream that flushes its
\&\*(L"buffer\*(R" after every \*(L"newline\*(R".  Many standard I/O libraries
automatically set up line buffering on output that is going to the
terminal.
.IP "line number" 4
.IX Item "line number"
The number of lines read previous to this one, plus 1.  Perl keeps a
separate line number for each source or input file it opens.  The
current source file's line number is represented by \f(CW\*(C`_\|_LINE_\|_\*(C'\fR.  The
current input line number (for the file that was most recently read
via \f(CW\*(C`<FH>\*(C'\fR) is represented by the \f(CW$.\fR
(\f(CW$INPUT_LINE_NUMBER\fR) variable.  Many error messages report both
values, if available.
.IP "link" 4
.IX Item "link"
Used as a noun, a name in a \*(L"directory\*(R", representing a \*(L"file\*(R".  A
given file can have multiple links to it.  It's like having the same
phone number listed in the phone directory under different names.  As
a verb, to resolve a partially compiled file's unresolved symbols into
a (nearly) executable image.  Linking can generally be static or
dynamic, which has nothing to do with static or dynamic scoping.
.IP "\s-1LIST\s0" 4
.IX Item "LIST"
A syntactic construct representing a comma-separated list of
expressions, evaluated to produce a \*(L"list value\*(R".  Each
\&\*(L"expression\*(R" in a \*(L"\s-1LIST\s0\*(R" is evaluated in \*(L"list context\*(R" and
interpolated into the list value.
.IP "list" 4
.IX Item "list"
An ordered set of scalar values.
.IP "list context" 4
.IX Item "list context"
The situation in which an \*(L"expression\*(R" is expected by its
surroundings (the code calling it) to return a list of values rather
than a single value.  Functions that want a \*(L"\s-1LIST\s0\*(R" of arguments tell
those arguments that they should produce a list value.  See also
\&\*(L"context\*(R".
.IP "list operator" 4
.IX Item "list operator"
An \*(L"operator\*(R" that does something with a list of values, such as
join or grep.  Usually used for
named built-in operators (such as print,
unlink, and system) that do not
require parentheses around their \*(L"argument\*(R" list.
.IP "list value" 4
.IX Item "list value"
An unnamed list of temporary scalar values that may be passed around
within a program from any list-generating function to any function or
construct that provides a \*(L"list context\*(R".
.IP "literal" 4
.IX Item "literal"
A token in a programming language such as a number or \*(L"string\*(R" that
gives you an actual \*(L"value\*(R" instead of merely representing possible
values as a \*(L"variable\*(R" does.
.IP "little-endian" 4
.IX Item "little-endian"
From Swift: someone who eats eggs little end first.  Also used of
computers that store the least significant \*(L"byte\*(R" of a word at a
lower byte address than the most significant byte.  Often considered
superior to big-endian machines.  See also \*(L"big-endian\*(R".
.IP "local" 4
.IX Item "local"
Not meaning the same thing everywhere.  A global variable in Perl can
be localized inside a dynamic scope via the
local operator.
.IP "logical operator" 4
.IX Item "logical operator"
Symbols representing the concepts \*(L"and\*(R", \*(L"or\*(R", \*(L"xor\*(R", and \*(L"not\*(R".
.IP "lookahead" 4
.IX Item "lookahead"
An \*(L"assertion\*(R" that peeks at the string to the right of the current
match location.
.IP "lookbehind" 4
.IX Item "lookbehind"
An \*(L"assertion\*(R" that peeks at the string to the left of the current
match location.
.IP "loop" 4
.IX Item "loop"
A construct that performs something repeatedly, like a roller coaster.
.IP "loop control statement" 4
.IX Item "loop control statement"
Any statement within the body of a loop that can make a loop
prematurely stop looping or skip an \*(L"iteration\*(R".  Generally you
shouldn't try this on roller coasters.
.IP "loop label" 4
.IX Item "loop label"
A kind of key or name attached to a loop (or roller coaster) so that
loop control statements can talk about which loop they want to
control.
.IP "lvaluable" 4
.IX Item "lvaluable"
Able to serve as an \*(L"lvalue\*(R".
.IP "lvalue" 4
.IX Item "lvalue"
Term used by language lawyers for a storage location you can assign a
new \*(L"value\*(R" to, such as a \*(L"variable\*(R" or an element of an
\&\*(L"array\*(R".  The \*(L"l\*(R" is short for \*(L"left\*(R", as in the left side of an
assignment, a typical place for lvalues.  An \*(L"lvaluable\*(R" function or
expression is one to which a value may be assigned, as in \f(CW\*(C`pos($x) =
10\*(C'\fR.
.IP "lvalue modifier" 4
.IX Item "lvalue modifier"
An adjectival pseudofunction that warps the meaning of an \*(L"lvalue\*(R"
in some declarative fashion.  Currently there are three lvalue
modifiers: my, our, and
local.
.SS "M"
.IX Subsection "M"
.IP "magic" 4
.IX Item "magic"
Technically speaking, any extra semantics attached to a variable such
as \f(CW$!\fR, \f(CW$0\fR, \f(CW%ENV\fR, or \f(CW%SIG\fR, or to any tied variable.
Magical things happen when you diddle those variables.
.IP "magical increment" 4
.IX Item "magical increment"
An \*(L"increment\*(R" operator that knows how to bump up alphabetics as
well as numbers.
.IP "magical variables" 4
.IX Item "magical variables"
Special variables that have side effects when you access them or
assign to them.  For example, in Perl, changing elements of the
\&\f(CW%ENV\fR array also changes the corresponding environment variables
that subprocesses will use.  Reading the \f(CW$!\fR variable gives you the
current system error number or message.
.IP "Makefile" 4
.IX Item "Makefile"
A file that controls the compilation of a program.  Perl programs
don't usually need a \*(L"Makefile\*(R" because the Perl compiler has plenty
of self-control.
.IP "man" 4
.IX Item "man"
The Unix program that displays online documentation (manual pages) for
you.
.IP "manpage" 4
.IX Item "manpage"
A \*(L"page\*(R" from the manuals, typically accessed via the \fIman\fR(1)
command.  A manpage contains a \s-1SYNOPSIS\s0, a \s-1DESCRIPTION\s0, a list of
\&\s-1BUGS\s0, and so on, and is typically longer than a page.  There are
manpages documenting commands, syscalls,
\&\*(L"library\*(R" functions, devices,
protocols, files, and such.  In this book, we
call any piece of standard Perl documentation (like \fIperlop\fR or
\&\fIperldelta\fR) a manpage, no matter what format it's installed in on
your system.
.IP "matching" 4
.IX Item "matching"
See \*(L"pattern matching\*(R".
.IP "member data" 4
.IX Item "member data"
See \*(L"instance variable\*(R".
.IP "memory" 4
.IX Item "memory"
This always means your main memory, not your disk.  Clouding the issue
is the fact that your machine may implement \*(L"virtual\*(R" memory; that
is, it will pretend that it has more memory than it really does, and
it'll use disk space to hold inactive bits.  This can make it seem
like you have a little more memory than you really do, but it's not a
substitute for real memory.  The best thing that can be said about
virtual memory is that it lets your performance degrade gradually
rather than suddenly when you run out of real memory.  But your
program can die when you run out of virtual memory too, if you haven't
thrashed your disk to death first.
.IP "metacharacter" 4
.IX Item "metacharacter"
A \*(L"character\*(R" that is \fInot\fR supposed to be treated normally.  Which
characters are to be treated specially as metacharacters varies
greatly from context to context.  Your \*(L"shell\*(R" will have certain
metacharacters, double-quoted Perl strings have other
metacharacters, and \*(L"regular expression\*(R" patterns have all the
double-quote metacharacters plus some extra ones of their own.
.IP "metasymbol" 4
.IX Item "metasymbol"
Something we'd call a \*(L"metacharacter\*(R" except that it's a sequence of
more than one character.  Generally, the first character in the
sequence must be a true metacharacter to get the other characters in
the metasymbol to misbehave along with it.
.IP "method" 4
.IX Item "method"
A kind of action that an \*(L"object\*(R" can take if you tell it to.  See
perlobj.
.IP "minimalism" 4
.IX Item "minimalism"
The belief that \*(L"small is beautiful.\*(R"  Paradoxically, if you say
something in a small language, it turns out big, and if you say it in
a big language, it turns out small.  Go figure.
.IP "mode" 4
.IX Item "mode"
In the context of the \fIstat\fR\|(2) syscall, refers to the field holding
the \*(L"permission bits\*(R" and the type of the \*(L"file\*(R".
.IP "modifier" 4
.IX Item "modifier"
See \*(L"statement modifier\*(R", \*(L"regular expression modifier\*(R", and
\&\*(L"lvalue modifier\*(R", not necessarily in that order.
.IP "module" 4
.IX Item "module"
A \*(L"file\*(R" that defines a \*(L"package\*(R" of (almost) the same name, which
can either \*(L"export\*(R" symbols or function as an \*(L"object\*(R" class.  (A
module's main \fI.pm\fR file may also load in other files in support of
the module.)  See the use built-in.
.IP "modulus" 4
.IX Item "modulus"
An integer divisor when you're interested in the remainder instead of
the quotient.
.IP "monger" 4
.IX Item "monger"
Short for Perl Monger, a purveyor of Perl.
.IP "mortal" 4
.IX Item "mortal"
A temporary value scheduled to die when the current statement
finishes.
.IP "multidimensional array" 4
.IX Item "multidimensional array"
An array with multiple subscripts for finding a single element.  Perl
implements these using references\-\-see perllol and
perldsc.
.IP "multiple inheritance" 4
.IX Item "multiple inheritance"
The features you got from your mother and father, mixed together
unpredictably.  (See also \*(L"inheritance\*(R", and \*(L"single
inheritance\*(R".)  In computer languages (including Perl), the notion
that a given class may have multiple direct ancestors or base
classes.
.SS "N"
.IX Subsection "N"
.IP "named pipe" 4
.IX Item "named pipe"
A \*(L"pipe\*(R" with a name embedded in the \*(L"filesystem\*(R" so that it can
be accessed by two unrelated processes.
.IP "namespace" 4
.IX Item "namespace"
A domain of names.  You needn't worry about whether the names in one
such domain have been used in another.  See \*(L"package\*(R".
.IP "network address" 4
.IX Item "network address"
The most important attribute of a socket, like your telephone's
telephone number.  Typically an \s-1IP\s0 address.  See also \*(L"port\*(R".
.IP "newline" 4
.IX Item "newline"
A single character that represents the end of a line, with the \s-1ASCII\s0
value of 012 octal under Unix (but 015 on a Mac), and represented by
\&\f(CW\*(C`\en\*(C'\fR in Perl strings.  For Windows machines writing text files, and
for certain physical devices like terminals, the single newline gets
automatically translated by your C library into a line feed and a
carriage return, but normally, no translation is done.
.IP "\s-1NFS\s0" 4
.IX Item "NFS"
Network File System, which allows you to mount a remote filesystem as
if it were local.
.IP "null character" 4
.IX Item "null character"
A character with the \s-1ASCII\s0 value of zero.  It's used by C to terminate
strings, but Perl allows strings to contain a null.
.IP "null list" 4
.IX Item "null list"
A valueless value represented in Perl by \f(CW\*(C`()\*(C'\fR.  It is not really a
\&\*(L"\s-1LIST\s0\*(R", but an expression that yields \f(CW\*(C`undef\*(C'\fR in \*(L"scalar context\*(R" and
a \*(L"list value\*(R" with zero elements in \*(L"list context\*(R".
.IP "null string" 4
.IX Item "null string"
A \*(L"string\*(R" containing no characters, not to be confused with a
string containing a \*(L"null character\*(R", which has a positive length
and is \*(L"true\*(R".
.IP "numeric context" 4
.IX Item "numeric context"
The situation in which an expression is expected by its surroundings
(the code calling it) to return a number.  See also \*(L"context\*(R" and
\&\*(L"string context\*(R".
.IP "\s-1NV\s0" 4
.IX Item "NV"
Short for Nevada, no part of which will ever be confused with
civilization.  \s-1NV\s0 also means an internal floating-point Numeric Value
of the type a \*(L"scalar\*(R" can hold, not to be confused with an \*(L"\s-1IV\s0\*(R".
.IP "nybble" 4
.IX Item "nybble"
Half a \*(L"byte\*(R", equivalent to one \*(L"hexadecimal\*(R" digit, and worth
four bits.
.SS "O"
.IX Subsection "O"
.IP "object" 4
.IX Item "object"
An \*(L"instance\*(R" of a \*(L"class\*(R".  Something that \*(L"knows\*(R" what
user-defined type (class) it is, and what it can do because of what
class it is.  Your program can request an object to do things, but the
object gets to decide whether it wants to do them or not.  Some
objects are more accommodating than others.
.IP "octal" 4
.IX Item "octal"
A number in base 8.  Only the digits 0 through 7 are allowed.  Octal
constants in Perl start with 0, as in 013.  See also the
oct function.
.IP "offset" 4
.IX Item "offset"
How many things you have to skip over when moving from the beginning
of a string or array to a specific position within it.  Thus, the
minimum offset is zero, not one, because you don't skip anything to
get to the first item.
.IP "one-liner" 4
.IX Item "one-liner"
An entire computer program crammed into one line of text.
.IP "open source software" 4
.IX Item "open source software"
Programs for which the source code is freely available and freely
redistributable, with no commercial strings attached.  For a more
detailed definition, see <http://www.opensource.org/osd.html>.
.IP "operand" 4
.IX Item "operand"
An \*(L"expression\*(R" that yields a \*(L"value\*(R" that an \*(L"operator\*(R"
operates on.  See also \*(L"precedence\*(R".
.IP "operating system" 4
.IX Item "operating system"
A special program that runs on the bare machine and hides the gory
details of managing processes and devices.
Usually used in a looser sense to indicate a particular culture of
programming.  The loose sense can be used at varying levels of
specificity.  At one extreme, you might say that all versions of Unix
and Unix-lookalikes are the same operating system (upsetting many
people, especially lawyers and other advocates).  At the other
extreme, you could say this particular version of this particular
vendor's operating system is different from any other version of this
or any other vendor's operating system.  Perl is much more portable
across operating systems than many other languages.  See also
\&\*(L"architecture\*(R" and \*(L"platform\*(R".
.IP "operator" 4
.IX Item "operator"
A gizmo that transforms some number of input values to some number of
output values, often built into a language with a special syntax or
symbol.  A given operator may have specific expectations about what
types of data you give as its arguments
(operands) and what type of data you want back from it.
.IP "operator overloading" 4
.IX Item "operator overloading"
A kind of \*(L"overloading\*(R" that you can do on built-in
operators to make them work on objects as if
the objects were ordinary scalar values, but with the actual semantics
supplied by the object class.  This is set up with the overload
\&\*(L"pragma\*(R".
.IP "options" 4
.IX Item "options"
See either switches or \*(L"regular expression modifier\*(R".
.IP "ordinal" 4
.IX Item "ordinal"
Another name for \*(L"code point\*(R"
.IP "overloading" 4
.IX Item "overloading"
Giving additional meanings to a symbol or construct.  Actually, all
languages do overloading to one extent or another, since people are
good at figuring out things from \*(L"context\*(R".
.IP "overriding" 4
.IX Item "overriding"
Hiding or invalidating some other definition of the same name.  (Not
to be confused with \*(L"overloading\*(R", which adds definitions that must
be disambiguated some other way.) To confuse the issue further, we use
the word with two overloaded definitions: to describe how you can
define your own \*(L"subroutine\*(R" to hide a built-in \*(L"function\*(R" of the
same name (see \*(L"Overriding Built-in Functions\*(R" in perlsub) and to
describe how you can define a replacement \*(L"method\*(R" in a \*(L"derived
class\*(R" to hide a \*(L"base class\*(R"'s method of the same name (see
perlobj).
.IP "owner" 4
.IX Item "owner"
The one user (apart from the superuser) who has absolute control over
a \*(L"file\*(R".  A file may also have a \*(L"group\*(R" of users who may
exercise joint ownership if the real owner permits it.  See
\&\*(L"permission bits\*(R".
.SS "P"
.IX Subsection "P"
.IP "package" 4
.IX Item "package"
A \*(L"namespace\*(R" for global variables,
subroutines, and the like, such that they can be kept
separate from like-named symbols in other namespaces.  In a
sense, only the package is global, since the symbols in the package's
symbol table are only accessible from code compiled outside the
package by naming the package.  But in another sense, all package
symbols are also globals\*(--they're just well-organized globals.
.IP "pad" 4
.IX Item "pad"
Short for \*(L"scratchpad\*(R".
.IP "parameter" 4
.IX Item "parameter"
See \*(L"argument\*(R".
.IP "parent class" 4
.IX Item "parent class"
See \*(L"base class\*(R".
.IP "parse tree" 4
.IX Item "parse tree"
See \*(L"syntax tree\*(R".
.IP "parsing" 4
.IX Item "parsing"
The subtle but sometimes brutal art of attempting to turn your
possibly malformed program into a valid \*(L"syntax tree\*(R".
.IP "patch" 4
.IX Item "patch"
To fix by applying one, as it were.  In the realm of hackerdom, a
listing of the differences between two versions of a program as might
be applied by the \fIpatch\fR(1) program when you want to fix a bug or
upgrade your old version.
.IP "\s-1PATH\s0" 4
.IX Item "PATH"
The list of directories the system searches to find a
program you want to \*(L"execute\*(R".  The list is stored as one of your
environment variables, accessible in Perl as
\&\f(CW$ENV{PATH}\fR.
.IP "pathname" 4
.IX Item "pathname"
A fully qualified filename such as \fI/usr/bin/perl\fR.  Sometimes
confused with \*(L"\s-1PATH\s0\*(R".
.IP "pattern" 4
.IX Item "pattern"
A template used in \*(L"pattern matching\*(R".
.IP "pattern matching" 4
.IX Item "pattern matching"
Taking a pattern, usually a \*(L"regular expression\*(R", and trying the
pattern various ways on a string to see whether there's any way to
make it fit.  Often used to pick interesting tidbits out of a file.
.IP "permission bits" 4
.IX Item "permission bits"
Bits that the \*(L"owner\*(R" of a file sets or unsets to allow or disallow
access to other people.  These flag bits are part of the \*(L"mode\*(R" word
returned by the stat built-in when you ask about a
file.  On Unix systems, you can check the \fIls\fR(1) manpage for more
information.
.IP "Pern" 4
.IX Item "Pern"
What you get when you do \f(CW\*(C`Perl++\*(C'\fR twice.  Doing it only once will
curl your hair.  You have to increment it eight times to shampoo your
hair.  Lather, rinse, iterate.
.IP "pipe" 4
.IX Item "pipe"
A direct \*(L"connection\*(R" that carries the output of one \*(L"process\*(R" to
the input of another without an intermediate temporary file.  Once the
pipe is set up, the two processes in question can read and write as if
they were talking to a normal file, with some caveats.
.IP "pipeline" 4
.IX Item "pipeline"
A series of processes all in a row, linked by
pipes, where each passes its output stream to the next.
.IP "platform" 4
.IX Item "platform"
The entire hardware and software context in which a program runs.  A
 program written in a platform-dependent language might break if you
change any of: machine, operating system, libraries, compiler, or
system configuration.  The \fIperl\fR interpreter has to be compiled
differently for each platform because it is implemented in C, but
programs written in the Perl language are largely
platform-independent.
.IP "pod" 4
.IX Item "pod"
The markup used to embed documentation into your Perl code.  See
perlpod.
.IP "pointer" 4
.IX Item "pointer"
A \*(L"variable\*(R" in a language like C that contains the exact memory
location of some other item.  Perl handles pointers internally so you
don't have to worry about them.  Instead, you just use symbolic
pointers in the form of keys and \*(L"variable\*(R" names, or hard
references, which aren't pointers (but act like
pointers and do in fact contain pointers).
.IP "polymorphism" 4
.IX Item "polymorphism"
The notion that you can tell an \*(L"object\*(R" to do something generic,
and the object will interpret the command in different ways depending
on its type.  [<Gk many shapes]
.IP "port" 4
.IX Item "port"
The part of the address of a \s-1TCP\s0 or \s-1UDP\s0 socket that directs packets to
the correct process after finding the right machine, something like
the phone extension you give when you reach the company operator.
Also, the result of converting code to run on a different platform
than originally intended, or the verb denoting this conversion.
.IP "portable" 4
.IX Item "portable"
Once upon a time, C code compilable under both \s-1BSD\s0 and SysV.  In
general, code that can be easily converted to run on another
\&\*(L"platform\*(R", where \*(L"easily\*(R" can be defined however you like, and
usually is.  Anything may be considered portable if you try hard
enough.  See \fImobile home\fR or \fILondon Bridge\fR.
.IP "porter" 4
.IX Item "porter"
Someone who \*(L"carries\*(R" software from one \*(L"platform\*(R" to another.
Porting programs written in platform-dependent languages such as C can
be difficult work, but porting programs like Perl is very much worth
the agony.
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
The Portable Operating System Interface specification.
.IP "postfix" 4
.IX Item "postfix"
An \*(L"operator\*(R" that follows its \*(L"operand\*(R", as in \f(CW\*(C`$x++\*(C'\fR.
.IP "pp" 4
.IX Item "pp"
An internal shorthand for a \*(L"push-pop\*(R" code, that is, C code
implementing Perl's stack machine.
.IP "pragma" 4
.IX Item "pragma"
A standard module whose practical hints and suggestions are received
(and possibly ignored) at compile time.  Pragmas are named in all
lowercase.
.IP "precedence" 4
.IX Item "precedence"
The rules of conduct that, in the absence of other guidance, determine
what should happen first.  For example, in the absence of parentheses,
you always do multiplication before addition.
.IP "prefix" 4
.IX Item "prefix"
An \*(L"operator\*(R" that precedes its \*(L"operand\*(R", as in \f(CW\*(C`++$x\*(C'\fR.
.IP "preprocessing" 4
.IX Item "preprocessing"
What some helper \*(L"process\*(R" did to transform the incoming data into a
form more suitable for the current process.  Often done with an
incoming \*(L"pipe\*(R".  See also \*(L"C preprocessor\*(R".
.IP "procedure" 4
.IX Item "procedure"
A \*(L"subroutine\*(R".
.IP "process" 4
.IX Item "process"
An instance of a running program.  Under multitasking systems like
Unix, two or more separate processes could be running the same program
independently at the same time\*(--in fact, the fork
function is designed to bring about this happy state of affairs.
Under other operating systems, processes are sometimes called
\&\*(L"threads\*(R", \*(L"tasks\*(R", or \*(L"jobs\*(R", often with slight nuances in meaning.
.IP "program generator" 4
.IX Item "program generator"
A system that algorithmically writes code for you in a high-level
language.  See also \*(L"code generator\*(R".
.IP "progressive matching" 4
.IX Item "progressive matching"
Pattern matching that picks up where it left off before.
.IP "property" 4
.IX Item "property"
See either \*(L"instance variable\*(R" or \*(L"character property\*(R".
.IP "protocol" 4
.IX Item "protocol"
In networking, an agreed-upon way of sending messages back and forth
so that neither correspondent will get too confused.
.IP "prototype" 4
.IX Item "prototype"
An optional part of a \*(L"subroutine\*(R" declaration telling the Perl
compiler how many and what flavor of arguments may be passed as
\&\*(L"actual arguments\*(R", so that you can write subroutine calls that
parse much like built-in functions.  (Or don't parse, as the case may
be.)
.IP "pseudofunction" 4
.IX Item "pseudofunction"
A construct that sometimes looks like a function but really isn't.
Usually reserved for \*(L"lvalue\*(R" modifiers like my, for
\&\*(L"context\*(R" modifiers like scalar, and for the
pick-your-own-quotes constructs, \f(CW\*(C`q//\*(C'\fR, \f(CW\*(C`qq//\*(C'\fR, \f(CW\*(C`qx//\*(C'\fR, \f(CW\*(C`qw//\*(C'\fR,
\&\f(CW\*(C`qr//\*(C'\fR, \f(CW\*(C`m//\*(C'\fR, \f(CW\*(C`s///\*(C'\fR, \f(CW\*(C`y///\*(C'\fR, and \f(CW\*(C`tr///\*(C'\fR.
.IP "pseudohash" 4
.IX Item "pseudohash"
A reference to an array whose initial element happens to hold a
reference to a hash.  You can treat a pseudohash reference as either
an array reference or a hash reference.
.IP "pseudoliteral" 4
.IX Item "pseudoliteral"
An \*(L"operator\*(R" that looks something like a \*(L"literal\*(R", such as the
output-grabbing operator, \f(CW\*(C`\`\*(C'\fR\fI\f(CI\*(C`command\*(C'\fI\fR\f(CW\*(C`\`\*(C'\fR.
.IP "public domain" 4
.IX Item "public domain"
Something not owned by anybody.  Perl is copyrighted and is thus
\&\fInot\fR in the public domain\*(--it's just \*(L"freely available\*(R" and
\&\*(L"freely redistributable\*(R".
.IP "pumpkin" 4
.IX Item "pumpkin"
A notional \*(L"baton\*(R" handed around the Perl community indicating who is
the lead integrator in some arena of development.
.IP "pumpking" 4
.IX Item "pumpking"
A \*(L"pumpkin\*(R" holder, the person in charge of pumping the pump, or at
least priming it.  Must be willing to play the part of the Great
Pumpkin now and then.
.IP "\s-1PV\s0" 4
.IX Item "PV"
A \*(L"pointer value\*(R", which is Perl Internals Talk for a \f(CW\*(C`char*\*(C'\fR.
.SS "Q"
.IX Subsection "Q"
.IP "qualified" 4
.IX Item "qualified"
Possessing a complete name.  The symbol \f(CW$Ent::moot\fR is qualified;
\&\f(CW$moot\fR is unqualified.  A fully qualified filename is specified from
the top-level directory.
.IP "quantifier" 4
.IX Item "quantifier"
A component of a \*(L"regular expression\*(R" specifying how many times the
foregoing \*(L"atom\*(R" may occur.
.SS "R"
.IX Subsection "R"
.IP "readable" 4
.IX Item "readable"
With respect to files, one that has the proper permission bit set to
let you access the file.  With respect to computer programs, one
that's written well enough that someone has a chance of figuring out
what it's trying to do.
.IP "reaping" 4
.IX Item "reaping"
The last rites performed by a parent \*(L"process\*(R" on behalf of a
deceased child process so that it doesn't remain a \*(L"zombie\*(R".  See
the wait and waitpid function
calls.
.IP "record" 4
.IX Item "record"
A set of related data values in a \*(L"file\*(R" or \*(L"stream\*(R", often
associated with a unique \*(L"key\*(R" field.  In Unix, often commensurate
with a \*(L"line\*(R", or a blank-line-terminated set of lines (a
\&\*(L"paragraph\*(R").  Each line of the \fI/etc/passwd\fR file is a record, keyed
on login name, containing information about that user.
.IP "recursion" 4
.IX Item "recursion"
The art of defining something (at least partly) in terms of itself,
which is a naughty no-no in dictionaries but often works out okay in
computer programs if you're careful not to recurse forever, which is
like an infinite loop with more spectacular failure modes.
.IP "reference" 4
.IX Item "reference"
Where you look to find a pointer to information somewhere else.  (See
\&\*(L"indirection\*(R".)  References come in two flavors, symbolic
references and hard references.
.IP "referent" 4
.IX Item "referent"
Whatever a reference refers to, which may or may not have a name.
Common types of referents include scalars, arrays, hashes, and
subroutines.
.IP "regex" 4
.IX Item "regex"
See \*(L"regular expression\*(R".
.IP "regular expression" 4
.IX Item "regular expression"
A single entity with various interpretations, like an elephant.  To a
computer scientist, it's a grammar for a little language in which some
strings are legal and others aren't.  To normal people, it's a pattern
you can use to find what you're looking for when it varies from case
to case.  Perl's regular expressions are far from regular in the
theoretical sense, but in regular use they work quite well.  Here's a
regular expression: \f(CW\*(C`/Oh s.*t./\*(C'\fR.  This will match strings like "\f(CW\*(C`Oh
say can you see by the dawn\*(Aqs early light\*(C'\fR\*(L" and \*(R"\f(CW\*(C`Oh sit!\*(C'\fR".  See
perlre.
.IP "regular expression modifier" 4
.IX Item "regular expression modifier"
An option on a pattern or substitution, such as \f(CW\*(C`/i\*(C'\fR to render the
pattern case insensitive.  See also \*(L"cloister\*(R".
.IP "regular file" 4
.IX Item "regular file"
A \*(L"file\*(R" that's not a \*(L"directory\*(R", a \*(L"device\*(R", a named \*(L"pipe\*(R"
or \*(L"socket\*(R", or a \*(L"symbolic link\*(R".  Perl uses the \f(CW\*(C`\-f\*(C'\fR file test
operator to identify regular files.  Sometimes called a \*(L"plain\*(R" file.
.IP "relational operator" 4
.IX Item "relational operator"
An \*(L"operator\*(R" that says whether a particular ordering relationship
is \*(L"true\*(R" about a pair of operands.  Perl has both
numeric and string relational operators.  See \*(L"collating sequence\*(R".
.IP "reserved words" 4
.IX Item "reserved words"
A word with a specific, built-in meaning to a \*(L"compiler\*(R", such as
\&\f(CW\*(C`if\*(C'\fR or delete.  In many languages (not Perl),
it's illegal to use reserved words to name anything else.  (Which is
why they're reserved, after all.)  In Perl, you just can't use them to
name labels or filehandles.  Also called
\&\*(L"keywords\*(R".
.IP "restricted hash" 4
.IX Item "restricted hash"
A \*(L"hash\*(R" with a closed set of allowed keys. See Hash::Util.
.IP "return value" 4
.IX Item "return value"
The \*(L"value\*(R" produced by a \*(L"subroutine\*(R" or \*(L"expression\*(R" when
evaluated.  In Perl, a return value may be either a \*(L"list\*(R" or a
\&\*(L"scalar\*(R".
.IP "\s-1RFC\s0" 4
.IX Item "RFC"
Request For Comment, which despite the timid connotations is the name
of a series of important standards documents.
.IP "right shift" 4
.IX Item "right shift"
A \*(L"bit shift\*(R" that divides a number by some power of 2.
.IP "root" 4
.IX Item "root"
The superuser (\s-1UID\s0 == 0).  Also, the top-level directory of the
filesystem.
.IP "\s-1RTFM\s0" 4
.IX Item "RTFM"
What you are told when someone thinks you should Read The Fine Manual.
.IP "run phase" 4
.IX Item "run phase"
Any time after Perl starts running your main program.  See also
\&\*(L"compile phase\*(R".  Run phase is mostly spent in \*(L"run time\*(R" but may
also be spent in \*(L"compile time\*(R" when require,
do \f(CW\*(C`FILE\*(C'\fR, or eval \f(CW\*(C`STRING\*(C'\fR
operators are executed or when a substitution uses the \f(CW\*(C`/ee\*(C'\fR
modifier.
.IP "run time" 4
.IX Item "run time"
The time when Perl is actually doing what your code says to do, as
opposed to the earlier period of time when it was trying to figure out
whether what you said made any sense whatsoever, which is \*(L"compile
time\*(R".
.IP "run-time pattern" 4
.IX Item "run-time pattern"
A pattern that contains one or more variables to be interpolated
before parsing the pattern as a \*(L"regular expression\*(R", and that
therefore cannot be analyzed at compile time, but must be re-analyzed
each time the pattern match operator is evaluated.  Run-time patterns
are useful but expensive.
.IP "\s-1RV\s0" 4
.IX Item "RV"
A recreational vehicle, not to be confused with vehicular recreation.
\&\s-1RV\s0 also means an internal Reference Value of the type a \*(L"scalar\*(R" can
hold.  See also \*(L"\s-1IV\s0\*(R" and \*(L"\s-1NV\s0\*(R" if you're not confused yet.
.IP "rvalue" 4
.IX Item "rvalue"
A \*(L"value\*(R" that you might find on the right side of an
\&\*(L"assignment\*(R".  See also \*(L"lvalue\*(R".
.SS "S"
.IX Subsection "S"
.IP "scalar" 4
.IX Item "scalar"
A simple, singular value; a number, \*(L"string\*(R", or \*(L"reference\*(R".
.IP "scalar context" 4
.IX Item "scalar context"
The situation in which an \*(L"expression\*(R" is expected by its
surroundings (the code calling it) to return a single \*(L"value\*(R" rather
than a \*(L"list\*(R" of values.  See also \*(L"context\*(R" and \*(L"list context\*(R".
A scalar context sometimes imposes additional constraints on the
return value\*(--see \*(L"string context\*(R" and \*(L"numeric context\*(R".
Sometimes we talk about a \*(L"Boolean context\*(R" inside conditionals, but
this imposes no additional constraints, since any scalar value,
whether numeric or \*(L"string\*(R", is already true or false.
.IP "scalar literal" 4
.IX Item "scalar literal"
A number or quoted \*(L"string\*(R"\-\-an actual \*(L"value\*(R" in the text of your
program, as opposed to a \*(L"variable\*(R".
.IP "scalar value" 4
.IX Item "scalar value"
A value that happens to be a \*(L"scalar\*(R" as opposed to a \*(L"list\*(R".
.IP "scalar variable" 4
.IX Item "scalar variable"
A \*(L"variable\*(R" prefixed with \f(CW\*(C`$\*(C'\fR that holds a single value.
.IP "scope" 4
.IX Item "scope"
How far away you can see a variable from, looking through one.  Perl
has two visibility mechanisms: it does \*(L"dynamic scoping\*(R" of
local variables, meaning that the rest
of the \*(L"block\*(R", and any subroutines that are called
by the rest of the block, can see the variables that are local to the
block.  Perl does \*(L"lexical scoping\*(R" of my variables,
meaning that the rest of the block can see the variable, but other
subroutines called by the block \fIcannot\fR see the variable.
.IP "scratchpad" 4
.IX Item "scratchpad"
The area in which a particular invocation of a particular file or
subroutine keeps some of its temporary values, including any lexically
scoped variables.
.IP "script" 4
.IX Item "script"
A text \*(L"file\*(R" that is a program intended to be executed
directly rather than compiled to another form of file
before execution.  Also, in the context of \*(L"Unicode\*(R", a writing
system for a particular language or group of languages, such as Greek,
Bengali, or Klingon.
.IP "script kiddie" 4
.IX Item "script kiddie"
A \*(L"cracker\*(R" who is not a \*(L"hacker\*(R", but knows just enough to run
canned scripts.  A cargo-cult programmer.
.IP "sed" 4
.IX Item "sed"
A venerable Stream EDitor from which Perl derives some of its ideas.
.IP "semaphore" 4
.IX Item "semaphore"
A fancy kind of interlock that prevents multiple threads or
processes from using up the same resources simultaneously.
.IP "separator" 4
.IX Item "separator"
A \*(L"character\*(R" or \*(L"string\*(R" that keeps two surrounding strings from
being confused with each other.  The split function
works on separators.  Not to be confused with delimiters
or terminators.  The \*(L"or\*(R" in the previous sentence
separated the two alternatives.
.IP "serialization" 4
.IX Item "serialization"
Putting a fancy \*(L"data structure\*(R" into linear order so that it can be
stored as a \*(L"string\*(R" in a disk file or database or sent through a
\&\*(L"pipe\*(R".  Also called marshalling.
.IP "server" 4
.IX Item "server"
In networking, a \*(L"process\*(R" that either advertises a \*(L"service\*(R" or
just hangs around at a known location and waits for clients
who need service to get in touch with it.
.IP "service" 4
.IX Item "service"
Something you do for someone else to make them happy, like giving them
the time of day (or of their life).  On some machines, well-known
services are listed by the getservent function.
.IP "setgid" 4
.IX Item "setgid"
Same as \*(L"setuid\*(R", only having to do with giving away \*(L"group\*(R"
privileges.
.IP "setuid" 4
.IX Item "setuid"
Said of a program that runs with the privileges of its \*(L"owner\*(R"
rather than (as is usually the case) the privileges of whoever is
running it.  Also describes the bit in the mode word (\*(L"permission
bits\*(R") that controls the feature.  This bit must be explicitly set by
the owner to enable this feature, and the program must be carefully
written not to give away more privileges than it ought to.
.IP "shared memory" 4
.IX Item "shared memory"
A piece of \*(L"memory\*(R" accessible by two different
processes who otherwise would not see each other's memory.
.IP "shebang" 4
.IX Item "shebang"
Irish for the whole McGillicuddy.  In Perl culture, a portmanteau of
\&\*(L"sharp\*(R" and \*(L"bang\*(R", meaning the \f(CW\*(C`#!\*(C'\fR sequence that tells the system
where to find the interpreter.
.IP "shell" 4
.IX Item "shell"
A \*(L"command\*(R"\-line \*(L"interpreter\*(R".  The program that interactively
gives you a prompt, accepts one or more lines of input, and
executes the programs you mentioned, feeding each of them their proper
arguments and input data.  Shells can also execute
scripts containing such commands.  Under Unix, typical shells include
the Bourne shell (\fI/bin/sh\fR), the C shell (\fI/bin/csh\fR), and the Korn
shell (\fI/bin/ksh\fR).  Perl is not strictly a shell because it's not
interactive (although Perl programs can be interactive).
.IP "side effects" 4
.IX Item "side effects"
Something extra that happens when you evaluate an \*(L"expression\*(R".
Nowadays it can refer to almost anything.  For example, evaluating a
simple assignment statement typically has the \*(L"side effect\*(R" of
assigning a value to a variable.  (And you thought assigning the value
was your primary intent in the first place!)  Likewise, assigning a
value to the special variable \f(CW$|\fR (\f(CW$AUTOFLUSH\fR) has the side
effect of forcing a flush after every write or
print on the currently selected filehandle.
.IP "signal" 4
.IX Item "signal"
A bolt out of the blue; that is, an event triggered by the
\&\*(L"operating system\*(R", probably when you're least expecting it.
.IP "signal handler" 4
.IX Item "signal handler"
A \*(L"subroutine\*(R" that, instead of being content to be called in the
normal fashion, sits around waiting for a bolt out of the blue before
it will deign to \*(L"execute\*(R".  Under Perl, bolts out of the blue are
called signals, and you send them with the kill
built-in.  See \*(L"%SIG\*(R" in perlvar and \*(L"Signals\*(R" in perlipc.
.IP "single inheritance" 4
.IX Item "single inheritance"
The features you got from your mother, if she told you that you don't
have a father.  (See also \*(L"inheritance\*(R" and \*(L"multiple
inheritance\*(R".)  In computer languages, the notion that
classes reproduce asexually so that a given class can only
have one direct ancestor or \*(L"base class\*(R".  Perl supplies no such
restriction, though you may certainly program Perl that way if you
like.
.IP "slice" 4
.IX Item "slice"
A selection of any number of elements from a \*(L"list\*(R",
\&\*(L"array\*(R", or \*(L"hash\*(R".
.IP "slurp" 4
.IX Item "slurp"
To read an entire \*(L"file\*(R" into a \*(L"string\*(R" in one operation.
.IP "socket" 4
.IX Item "socket"
An endpoint for network communication among multiple
processes that works much like a telephone or a post
office box.  The most important thing about a socket is its \*(L"network
address\*(R" (like a phone number).  Different kinds of sockets have
different kinds of addresses\*(--some look like filenames, and some
don't.
.IP "soft reference" 4
.IX Item "soft reference"
See \*(L"symbolic reference\*(R".
.IP "source filter" 4
.IX Item "source filter"
A special kind of \*(L"module\*(R" that does \*(L"preprocessing\*(R" on your
script just before it gets to the \*(L"tokener\*(R".
.IP "stack" 4
.IX Item "stack"
A device you can put things on the top of, and later take them back
off in the opposite order in which you put them on.  See \*(L"\s-1LIFO\s0\*(R".
.IP "standard" 4
.IX Item "standard"
Included in the official Perl distribution, as in a standard module, a
standard tool, or a standard Perl \*(L"manpage\*(R".
.IP "standard error" 4
.IX Item "standard error"
The default output \*(L"stream\*(R" for nasty remarks that don't belong in
\&\*(L"standard output\*(R".  Represented within a Perl program by the
\&\*(L"filehandle\*(R" \*(L"\s-1STDERR\s0\*(R".  You can use this stream explicitly, but the
die and warn built-ins write to your
standard error stream automatically.
.IP "standard I/O" 4
.IX Item "standard I/O"
A standard C library for doing buffered input and output to
the \*(L"operating system\*(R".  (The \*(L"standard\*(R" of standard I/O is only
marginally related to the \*(L"standard\*(R" of standard input and output.)
In general, Perl relies on whatever implementation of standard I/O a
given operating system supplies, so the buffering characteristics of a
Perl program on one machine may not exactly match those on another
machine.  Normally this only influences efficiency, not semantics.  If
your standard I/O package is doing block buffering and you want it to
\&\*(L"flush\*(R" the buffer more often, just set the \f(CW$|\fR variable to a true
value.
.IP "standard input" 4
.IX Item "standard input"
The default input \*(L"stream\*(R" for your program, which if possible
shouldn't care where its data is coming from.  Represented within a
Perl program by the \*(L"filehandle\*(R" \*(L"\s-1STDIN\s0\*(R".
.IP "standard output" 4
.IX Item "standard output"
The default output \*(L"stream\*(R" for your program, which if possible
shouldn't care where its data is going.  Represented within a Perl
program by the \*(L"filehandle\*(R" \*(L"\s-1STDOUT\s0\*(R".
.IP "stat structure" 4
.IX Item "stat structure"
A special internal spot in which Perl keeps the information about the
last \*(L"file\*(R" on which you requested information.
.IP "statement" 4
.IX Item "statement"
A \*(L"command\*(R" to the computer about what to do next, like a step in a
recipe: \*(L"Add marmalade to batter and mix until mixed.\*(R"  A statement is
distinguished from a \*(L"declaration\*(R", which doesn't tell the computer
to do anything, but just to learn something.
.IP "statement modifier" 4
.IX Item "statement modifier"
A \*(L"conditional\*(R" or \*(L"loop\*(R" that you put after the \*(L"statement\*(R"
instead of before, if you know what we mean.
.IP "static" 4
.IX Item "static"
Varying slowly compared to something else.  (Unfortunately, everything
is relatively stable compared to something else, except for certain
elementary particles, and we're not so sure about them.)  In
computers, where things are supposed to vary rapidly, \*(L"static\*(R" has a
derogatory connotation, indicating a slightly dysfunctional
\&\*(L"variable\*(R", \*(L"subroutine\*(R", or \*(L"method\*(R".  In Perl culture, the
word is politely avoided.
.IP "static method" 4
.IX Item "static method"
No such thing.  See \*(L"class method\*(R".
.IP "static scoping" 4
.IX Item "static scoping"
No such thing.  See \*(L"lexical scoping\*(R".
.IP "static variable" 4
.IX Item "static variable"
No such thing.  Just use a \*(L"lexical variable\*(R" in a scope larger than
your \*(L"subroutine\*(R".
.IP "status" 4
.IX Item "status"
The \*(L"value\*(R" returned to the parent \*(L"process\*(R" when one of its child
processes dies.  This value is placed in the special variable \f(CW$?\fR.
Its upper eight bits are the exit status of the defunct
process, and its lower eight bits identify the signal (if any) that
the process died from.  On Unix systems, this status value is the same
as the status word returned by \fIwait\fR(2).  See \*(L"system\*(R" in perlfunc.
.IP "\s-1STDERR\s0" 4
.IX Item "STDERR"
See \*(L"standard error\*(R".
.IP "\s-1STDIN\s0" 4
.IX Item "STDIN"
See \*(L"standard input\*(R".
.IP "\s-1STDIO\s0" 4
.IX Item "STDIO"
See \*(L"standard I/O\*(R".
.IP "\s-1STDOUT\s0" 4
.IX Item "STDOUT"
See \*(L"standard output\*(R".
.IP "stream" 4
.IX Item "stream"
A flow of data into or out of a process as a steady sequence of bytes
or characters, without the appearance of being broken up into packets.
This is a kind of \*(L"interface\*(R"\-\-the underlying \*(L"implementation\*(R" may
well break your data up into separate packets for delivery, but this
is hidden from you.
.IP "string" 4
.IX Item "string"
A sequence of characters such as \*(L"He said !@#*&%@#*?!\*(R".  A string does
not have to be entirely printable.
.IP "string context" 4
.IX Item "string context"
The situation in which an expression is expected by its surroundings
(the code calling it) to return a \*(L"string\*(R".  See also \*(L"context\*(R"
and \*(L"numeric context\*(R".
.IP "stringification" 4
.IX Item "stringification"
The process of producing a \*(L"string\*(R" representation of an abstract
object.
.IP "struct" 4
.IX Item "struct"
C keyword introducing a structure definition or name.
.IP "structure" 4
.IX Item "structure"
See \*(L"data structure\*(R".
.IP "subclass" 4
.IX Item "subclass"
See \*(L"derived class\*(R".
.IP "subpattern" 4
.IX Item "subpattern"
A component of a \*(L"regular expression\*(R" pattern.
.IP "subroutine" 4
.IX Item "subroutine"
A named or otherwise accessible piece of program that can be invoked
from elsewhere in the program in order to accomplish some sub-goal of
the program.  A subroutine is often parameterized to accomplish
different but related things depending on its input
arguments.  If the subroutine returns a meaningful
\&\*(L"value\*(R", it is also called a \*(L"function\*(R".
.IP "subscript" 4
.IX Item "subscript"
A \*(L"value\*(R" that indicates the position of a particular \*(L"array\*(R"
\&\*(L"element\*(R" in an array.
.IP "substitution" 4
.IX Item "substitution"
Changing parts of a string via the \f(CW\*(C`s///\*(C'\fR operator.  (We avoid use of
this term to mean \*(L"variable interpolation\*(R".)
.IP "substring" 4
.IX Item "substring"
A portion of a \*(L"string\*(R", starting at a certain \*(L"character\*(R"
position (\*(L"offset\*(R") and proceeding for a certain number of
characters.
.IP "superclass" 4
.IX Item "superclass"
See \*(L"base class\*(R".
.IP "superuser" 4
.IX Item "superuser"
The person whom the \*(L"operating system\*(R" will let do almost anything.
Typically your system administrator or someone pretending to be your
system administrator.  On Unix systems, the \*(L"root\*(R" user.  On Windows
systems, usually the Administrator user.
.IP "\s-1SV\s0" 4
.IX Item "SV"
Short for \*(L"scalar value\*(R".  But within the Perl interpreter every
\&\*(L"referent\*(R" is treated as a member of a class derived from \s-1SV\s0, in an
object-oriented sort of way.  Every \*(L"value\*(R" inside Perl is passed
around as a C language \f(CW\*(C`SV*\*(C'\fR pointer.  The \s-1SV\s0 \*(L"struct\*(R" knows its
own \*(L"referent type\*(R", and the code is smart enough (we hope) not to try
to call a \*(L"hash\*(R" function on a \*(L"subroutine\*(R".
.IP "switch" 4
.IX Item "switch"
An option you give on a command line to influence the way your program
works, usually introduced with a minus sign.  The word is also used as
a nickname for a \*(L"switch statement\*(R".
.IP "switch cluster" 4
.IX Item "switch cluster"
The combination of multiple command-line switches (e.g., \fB\-a \-b \-c\fR)
into one switch (e.g., \fB\-abc\fR).  Any switch with an additional
\&\*(L"argument\*(R" must be the last switch in a cluster.
.IP "switch statement" 4
.IX Item "switch statement"
A program technique that lets you evaluate an \*(L"expression\*(R" and then,
based on the value of the expression, do a multiway branch to the
appropriate piece of code for that value.  Also called a \*(L"case
structure\*(R", named after the similar Pascal construct.  See
See \*(L"Basic BLOCKs\*(R" in perlsyn.
.IP "symbol" 4
.IX Item "symbol"
Generally, any \*(L"token\*(R" or \*(L"metasymbol\*(R".  Often used more
specifically to mean the sort of name you might find in a \*(L"symbol
table\*(R".
.IP "symbol table" 4
.IX Item "symbol table"
Where a \*(L"compiler\*(R" remembers symbols.  A program like Perl must
somehow remember all the names of all the variables,
filehandles, and subroutines you've
used.  It does this by placing the names in a symbol table, which is
implemented in Perl using a \*(L"hash table\*(R".  There is a separate
symbol table for each \*(L"package\*(R" to give each package its own
\&\*(L"namespace\*(R".
.IP "symbolic debugger" 4
.IX Item "symbolic debugger"
A program that lets you step through the execution of your
program, stopping or printing things out here and there to see whether
anything has gone wrong, and if so, what.  The \*(L"symbolic\*(R" part just
means that you can talk to the debugger using the same symbols with
which your program is written.
.IP "symbolic link" 4
.IX Item "symbolic link"
An alternate filename that points to the real \*(L"filename\*(R", which in
turn points to the real \*(L"file\*(R".  Whenever the \*(L"operating system\*(R"
is trying to parse a \*(L"pathname\*(R" containing a symbolic link, it
merely substitutes the new name and continues parsing.
.IP "symbolic reference" 4
.IX Item "symbolic reference"
A variable whose value is the name of another variable or subroutine.
By dereferencing the first variable, you can get at
the second one.  Symbolic references are illegal under use strict
\&'refs'.
.IP "synchronous" 4
.IX Item "synchronous"
Programming in which the orderly sequence of events can be determined;
that is, when things happen one after the other, not at the same time.
.IP "syntactic sugar" 4
.IX Item "syntactic sugar"
An alternative way of writing something more easily; a shortcut.
.IP "syntax" 4
.IX Item "syntax"
From Greek, \*(L"with-arrangement\*(R".  How things (particularly symbols) are
put together with each other.
.IP "syntax tree" 4
.IX Item "syntax tree"
An internal representation of your program wherein lower-level
constructs dangle off the higher-level constructs
enclosing them.
.IP "syscall" 4
.IX Item "syscall"
A \*(L"function\*(R" call directly to the \*(L"operating system\*(R".  Many of the
important subroutines and functions you use aren't direct system
calls, but are built up in one or more layers above the system call
level.  In general, Perl programmers don't need to worry about the
distinction.  However, if you do happen to know which Perl functions
are really syscalls, you can predict which of these will set the \f(CW$!\fR
(\f(CW$ERRNO\fR) variable on failure.  Unfortunately, beginning programmers
often confusingly employ the term \*(L"system call\*(R" to mean what happens
when you call the Perl system function, which
actually involves many syscalls.  To avoid any confusion, we nearly
always use say \*(L"syscall\*(R" for something you could call indirectly via
Perl's syscall function, and never for something
you would call with Perl's system function.
.SS "T"
.IX Subsection "T"
.IP "tainted" 4
.IX Item "tainted"
Said of data derived from the grubby hands of a user and thus unsafe
for a secure program to rely on.  Perl does taint checks if you run a
\&\*(L"setuid\*(R" (or \*(L"setgid\*(R") program, or if you use the \fB\-T\fR switch.
.IP "\s-1TCP\s0" 4
.IX Item "TCP"
Short for Transmission Control Protocol.  A protocol wrapped around
the Internet Protocol to make an unreliable packet transmission
mechanism appear to the application program to be a reliable
\&\*(L"stream\*(R" of bytes.  (Usually.)
.IP "term" 4
.IX Item "term"
Short for a \*(L"terminal\*(R", that is, a leaf node of a \*(L"syntax tree\*(R".  A
thing that functions grammatically as an \*(L"operand\*(R" for the operators
in an expression.
.IP "terminator" 4
.IX Item "terminator"
A \*(L"character\*(R" or \*(L"string\*(R" that marks the end of another string.
The \f(CW$/\fR variable contains the string that terminates a
readline operation, which chomp
deletes from the end.  Not to be confused with
delimiters or separators.  The period at
the end of this sentence is a terminator.
.IP "ternary" 4
.IX Item "ternary"
An \*(L"operator\*(R" taking three operands.  Sometimes
pronounced \*(L"trinary\*(R".
.IP "text" 4
.IX Item "text"
A \*(L"string\*(R" or \*(L"file\*(R" containing primarily printable characters.
.IP "thread" 4
.IX Item "thread"
Like a forked process, but without \*(L"fork\*(R"'s inherent memory
protection.  A thread is lighter weight than a full process, in that a
process could have multiple threads running around in it, all fighting
over the same process's memory space unless steps are taken to protect
threads from each other.  See threads.
.IP "tie" 4
.IX Item "tie"
The bond between a magical variable and its implementation class.  See
\&\*(L"tie\*(R" in perlfunc and perltie.
.IP "\s-1TMTOWTDI\s0" 4
.IX Item "TMTOWTDI"
There's More Than One Way To Do It, the Perl Motto.  The notion that
there can be more than one valid path to solving a programming problem
in context.  (This doesn't mean that more ways are always better or
that all possible paths are equally desirable\*(--just that there need
not be One True Way.)  Pronounced TimToady.
.IP "token" 4
.IX Item "token"
A morpheme in a programming language, the smallest unit of text with
semantic significance.
.IP "tokener" 4
.IX Item "tokener"
A module that breaks a program text into a sequence of
tokens for later analysis by a parser.
.IP "tokenizing" 4
.IX Item "tokenizing"
Splitting up a program text into tokens.  Also known as
\&\*(L"lexing\*(R", in which case you get \*(L"lexemes\*(R" instead of tokens.
.IP "toolbox approach" 4
.IX Item "toolbox approach"
The notion that, with a complete set of simple tools that work well
together, you can build almost anything you want.  Which is fine if
you're assembling a tricycle, but if you're building a defranishizing
comboflux regurgalator, you really want your own machine shop in which
to build special tools.  Perl is sort of a machine shop.
.IP "transliterate" 4
.IX Item "transliterate"
To turn one string representation into another by mapping each
character of the source string to its corresponding character in the
result string.  See
\&\*(L"tr/SEARCHLIST/REPLACEMENTLIST/cdsr\*(R" in perlop.
.IP "trigger" 4
.IX Item "trigger"
An event that causes a \*(L"handler\*(R" to be run.
.IP "trinary" 4
.IX Item "trinary"
Not a stellar system with three stars, but an \*(L"operator\*(R" taking
three operands.  Sometimes pronounced \*(L"ternary\*(R".
.IP "troff" 4
.IX Item "troff"
A venerable typesetting language from which Perl derives the name of
its \f(CW$%\fR variable and which is secretly used in the production of
Camel books.
.IP "true" 4
.IX Item "true"
Any scalar value that doesn't evaluate to 0 or \f(CW""\fR.
.IP "truncating" 4
.IX Item "truncating"
Emptying a file of existing contents, either automatically when
opening a file for writing or explicitly via the
truncate function.
.IP "type" 4
.IX Item "type"
See \*(L"data type\*(R" and \*(L"class\*(R".
.IP "type casting" 4
.IX Item "type casting"
Converting data from one type to another.  C permits this.  Perl does
not need it.  Nor want it.
.IP "typed lexical" 4
.IX Item "typed lexical"
A \*(L"lexical variable\*(R" that is declared with a \*(L"class\*(R" type: \f(CW\*(C`my
Pony $bill\*(C'\fR.
.IP "typedef" 4
.IX Item "typedef"
A type definition in the C language.
.IP "typeglob" 4
.IX Item "typeglob"
Use of a single identifier, prefixed with \f(CW\*(C`*\*(C'\fR.  For example, \f(CW*name\fR
stands for any or all of \f(CW$name\fR, \f(CW@name\fR, \f(CW%name\fR, \f(CW&name\fR, or
just \f(CW\*(C`name\*(C'\fR.  How you use it determines whether it is interpreted as
all or only one of them.  See \*(L"Typeglobs and Filehandles\*(R" in perldata.
.IP "typemap" 4
.IX Item "typemap"
A description of how C types may be transformed to and from Perl types
within an \*(L"extension\*(R" module written in \*(L"\s-1XS\s0\*(R".
.SS "U"
.IX Subsection "U"
.IP "\s-1UDP\s0" 4
.IX Item "UDP"
User Datagram Protocol, the typical way to send datagrams
over the Internet.
.IP "\s-1UID\s0" 4
.IX Item "UID"
A user \s-1ID\s0.  Often used in the context of \*(L"file\*(R" or \*(L"process\*(R"
ownership.
.IP "umask" 4
.IX Item "umask"
A mask of those \*(L"permission bits\*(R" that should be forced off when
creating files or directories, in order to establish a policy of whom
you'll ordinarily deny access to.  See the umask
function.
.IP "unary operator" 4
.IX Item "unary operator"
An operator with only one \*(L"operand\*(R", like \f(CW\*(C`!\*(C'\fR or
chdir.  Unary operators are usually prefix
operators; that is, they precede their operand.  The \f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR
operators can be either prefix or postfix.  (Their position \fIdoes\fR
change their meanings.)
.IP "Unicode" 4
.IX Item "Unicode"
A character set comprising all the major character sets of the world,
more or less.  See perlunicode and <http://www.unicode.org>.
.IP "Unix" 4
.IX Item "Unix"
A very large and constantly evolving language with several alternative
and largely incompatible syntaxes, in which anyone can define anything
any way they choose, and usually do.  Speakers of this language think
it's easy to learn because it's so easily twisted to one's own ends,
but dialectical differences make tribal intercommunication nearly
impossible, and travelers are often reduced to a pidgin-like subset of
the language.  To be universally understood, a Unix shell programmer
must spend years of study in the art.  Many have abandoned this
discipline and now communicate via an Esperanto-like language called
Perl.
.Sp
In ancient times, Unix was also used to refer to some code that a
couple of people at Bell Labs wrote to make use of a \s-1PDP\-7\s0 computer
that wasn't doing much of anything else at the time.
.SS "V"
.IX Subsection "V"
.IP "value" 4
.IX Item "value"
An actual piece of data, in contrast to all the variables, references,
keys, indexes, operators, and whatnot that you need to access the
value.
.IP "variable" 4
.IX Item "variable"
A named storage location that can hold any of various kinds of
\&\*(L"value\*(R", as your program sees fit.
.IP "variable interpolation" 4
.IX Item "variable interpolation"
The \*(L"interpolation\*(R" of a scalar or array variable into a string.
.IP "variadic" 4
.IX Item "variadic"
Said of a \*(L"function\*(R" that happily receives an indeterminate number
of \*(L"actual arguments\*(R".
.IP "vector" 4
.IX Item "vector"
Mathematical jargon for a list of scalar values.
.IP "virtual" 4
.IX Item "virtual"
Providing the appearance of something without the reality, as in:
virtual memory is not real memory.  (See also \*(L"memory\*(R".)  The
opposite of \*(L"virtual\*(R" is \*(L"transparent\*(R", which means providing the
reality of something without the appearance, as in: Perl handles the
variable-length \s-1UTF\-8\s0 character encoding transparently.
.IP "void context" 4
.IX Item "void context"
A form of \*(L"scalar context\*(R" in which an \*(L"expression\*(R" is not
expected to return any \*(L"value\*(R" at all and is evaluated for its
\&\*(L"side effects\*(R" alone.
.IP "v\-string" 4
.IX Item "v-string"
A \*(L"version\*(R" or \*(L"vector\*(R" \*(L"string\*(R" specified with a \f(CW\*(C`v\*(C'\fR followed by a
series of decimal integers in dot notation, for instance,
\&\f(CW\*(C`v1.20.300.4000\*(C'\fR.  Each number turns into a \*(L"character\*(R" with the
specified ordinal value.  (The \f(CW\*(C`v\*(C'\fR is optional when there are at
least three integers.)
.SS "W"
.IX Subsection "W"
.IP "warning" 4
.IX Item "warning"
A message printed to the \*(L"\s-1STDERR\s0\*(R" stream to the effect that something
might be wrong but isn't worth blowing up over.  See \*(L"warn\*(R" in perlfunc
and the warnings pragma.
.IP "watch expression" 4
.IX Item "watch expression"
An expression which, when its value changes, causes a breakpoint in
the Perl debugger.
.IP "whitespace" 4
.IX Item "whitespace"
A \*(L"character\*(R" that moves your cursor but doesn't otherwise put
anything on your screen.  Typically refers to any of: space, tab, line
feed, carriage return, or form feed.
.IP "word" 4
.IX Item "word"
In normal \*(L"computerese\*(R", the piece of data of the size most
efficiently handled by your computer, typically 32 bits or so, give or
take a few powers of 2.  In Perl culture, it more often refers to an
alphanumeric \*(L"identifier\*(R" (including underscores), or to a string of
nonwhitespace characters bounded by whitespace or string
boundaries.
.IP "working directory" 4
.IX Item "working directory"
Your current \*(L"directory\*(R", from which relative pathnames are
interpreted by the \*(L"operating system\*(R".  The operating system knows
your current directory because you told it with a
chdir or because you started out in the place where
your parent \*(L"process\*(R" was when you were born.
.IP "wrapper" 4
.IX Item "wrapper"
A program or subroutine that runs some other program or subroutine for
you, modifying some of its input or output to better suit your
purposes.
.IP "\s-1WYSIWYG\s0" 4
.IX Item "WYSIWYG"
What You See Is What You Get.  Usually used when something that
appears on the screen matches how it will eventually look, like Perl's
format declarations.  Also used to mean the
opposite of magic because everything works exactly as it appears, as
in the three-argument form of open.
.SS "X"
.IX Subsection "X"
.IP "\s-1XS\s0" 4
.IX Item "XS"
A language to extend Perl with C and \*(C+. \s-1XS\s0 is an interface description
file format used to create an extension interface between
Perl and C code (or a C library) which one wishes to use with Perl.
See perlxs for the exact explanation or read the perlxstut
tutorial.
.IP "\s-1XSUB\s0" 4
.IX Item "XSUB"
An external \*(L"subroutine\*(R" defined in \*(L"\s-1XS\s0\*(R".
.SS "Y"
.IX Subsection "Y"
.IP "yacc" 4
.IX Item "yacc"
Yet Another Compiler Compiler.  A parser generator without which Perl
probably would not have existed.  See the file \fIperly.y\fR in the Perl
source distribution.
.SS "Z"
.IX Subsection "Z"
.IP "zero width" 4
.IX Item "zero width"
A subpattern \*(L"assertion\*(R" matching the \*(L"null string\*(R" between
characters.
.IP "zombie" 4
.IX Item "zombie"
A process that has died (exited) but whose parent has not yet received
proper notification of its demise by virtue of having called
wait or waitpid.  If you
fork, you must clean up after your child processes
when they exit, or else the process table will fill up and your system
administrator will Not Be Happy with you.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Based on the Glossary of Programming Perl, Third Edition,
by Larry Wall, Tom Christiansen & Jon Orwant.
Copyright (c) 2000, 1996, 1991 O'Reilly Media, Inc.
This document may be distributed under the same terms as Perl itself.
                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlglossary5.18.1                           0100644 0001750 0001750 00000500462 12566207440 024007  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGLOSSARY 1"
.TH PERLGLOSSARY 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlglossary \- Perl Glossary
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A glossary of terms (technical and otherwise) used in the Perl
documentation, derived from the Glossary of \fIProgramming
Perl\fR, Fourth Edition.  Words or phrases in bold are defined elsewhere in
this glossary.
.PP
Other useful sources include the Unicode Glossary <http://unicode.org/glossary/>,
the Free On-Line Dictionary of Computing <http://foldoc.org/>,
the Jargon File <http://catb.org/~esr/jargon/>,
and Wikipedia <http://www.wikipedia.org/>.
.SS "A"
.IX Subsection "A"
.IP "accessor methods" 4
.IX Item "accessor methods"
A \fBmethod\fR used to
indirectly inspect or update an \fBobject\fRXs state (its \fBinstance
variables\fR).
.IX Xref "accessor methods, defined methods, accessor"
.IP "actual arguments" 4
.IX Item "actual arguments"
The \fBscalar values\fR that you supply
to a \fBfunction\fR or \fBsubroutine\fR when you call it. For instance, when you
call \f(CW\*(C`power("puff")\*(C'\fR, the string \f(CW"puff"\fR is the actual argument. See also
\&\fBargument\fR and \fBformal arguments\fR.
.IX Xref "actual arguments arguments, actual"
.IP "address operator" 4
.IX Item "address operator"
Some languages work directly with the memory addresses of
values, but this can be like playing with fire. Perl provides a set of
asbestos gloves for handling all memory management. The closest to an
address operator in Perl is the backslash operator, but it gives you a
\&\fBhard reference\fR, which is much safer than a memory address.
.IX Xref "address operator"
.IP "algorithm" 4
.IX Item "algorithm"
A well-defined sequence of steps, explained clearly
enough that even a computer could do them.
.IX Xref "algorithms (term)"
.IP "alias" 4
.IX Item "alias"
A nickname for something, which behaves in all ways as
though youXd used the original name instead of the nickname. Temporary
aliases are implicitly created in the loop variable for \f(CW\*(C`foreach\*(C'\fR loops, in
the \f(CW$_\fR variable for \f(CW\*(C`map\*(C'\fR or \f(CW\*(C`grep\*(C'\fR operators, in \f(CW$a\fR and \f(CW$b\fR
during \f(CW\*(C`sort\*(C'\fRXs comparison function, and in each element of \f(CW@_\fR for the
\&\fBactual arguments\fR of a subroutine call. Permanent aliases are explicitly
created in \fBpackages\fR by \fBimporting\fR symbols or by assignment to
\&\fBtypeglobs\fR. Lexically scoped aliases for package variables are explicitly
created by the \f(CW\*(C`our\*(C'\fR declaration.
.IX Xref "aliases, defined"
.IP "alphabetic" 4
.IX Item "alphabetic"
The sort of characters we put into words. In Unicode, this
is all letters including all ideographs and certain diacritics, letter
numbers like Roman numerals, and various combining marks.
.IX Xref "alphabetic sort"
.IP "alternatives" 4
.IX Item "alternatives"
A list of possible choices from which you may
select only one, as in, XWould you like door A, B, or C?X Alternatives in
regular expressions are separated with a single vertical bar: \f(CW\*(C`|\*(C'\fR.
Alternatives in normal Perl expressions are separated with a double vertical
bar: \f(CW\*(C`||\*(C'\fR. Logical alternatives in \fBBoolean\fR expressions are separated
with either \f(CW\*(C`||\*(C'\fR or \f(CW\*(C`or\*(C'\fR.
.IX Xref "alternative characters"
.IP "anonymous" 4
.IX Item "anonymous"
Used to describe a \fBreferent\fR
that is not directly accessible through a named \fBvariable\fR. Such a referent
must be indirectly accessible through at least one \fBhard reference\fR. When
the last hard reference goes away, the anonymous referent is destroyed
without pity.
.IX Xref "anonymous referents referents, anonymous"
.IP "application" 4
.IX Item "application"
A bigger, fancier sort of \fBprogram\fR with a fancier
name so people donXt realize they are using a program.
.IX Xref "applications (term)"
.IP "architecture" 4
.IX Item "architecture"
The kind of computer youXre working on, where one Xkind of
computerX means all those computers sharing a compatible machine language.
Since Perl programs are (typically) simple text files, not executable
images, a Perl program is much less sensitive to the architecture itXs
running on than programs in other languages, such as C, that are \fBcompiled\fR
into machine code. See also \fBplatform\fR and \fBoperating system\fR.
.IX Xref "architecture"
.IP "argument" 4
.IX Item "argument"
A piece of data supplied to a \fBprogram\fR,
\&\fBsubroutine\fR, \fBfunction\fR, or \fBmethod\fR to tell it what itXs supposed to
do. Also called a XparameterX.
.IX Xref "arguments, defined"
.IP "\s-1ARGV\s0" 4
.IX Item "ARGV"
The name of the array containing the \fBargument\fR \fBvector\fR
from the command line. If you use the empty \f(CW\*(C`<>\*(C'\fR operator, \f(CW\*(C`ARGV\*(C'\fR
is the name of both the \fBfilehandle\fR used to traverse the arguments and the
\&\fBscalar\fR containing the name of the current input file.
.IX Xref "ARGV filehandle"
.IP "arithmetical operator" 4
.IX Item "arithmetical operator"
A \fBsymbol\fR such as \f(CW\*(C`+\*(C'\fR or \f(CW\*(C`/\*(C'\fR that tells
Perl to do the arithmetic you were supposed to learn in grade school.
.IX Xref "arithmetic operators, about"
.IP "array" 4
.IX Item "array"
An ordered sequence of \fBvalues\fR, stored such that you can
easily access any of the values using an \fIinteger subscript\fR that specifies
the valueXs \fBoffset\fR in the sequence.
.IX Xref "arrays, defined"
.IP "array context" 4
.IX Item "array context"
An archaic expression for what is more correctly referred to
as \fBlist context\fR.
.IX Xref "array context"
.IP "Artistic License" 4
.IX Item "Artistic License"
The open source license that Larry Wall
created for Perl, maximizing PerlXs usefulness, availability, and
modifiability. The current version is 2. (<http://www.opensource.org/licenses/artistic\-license.php>).
.IX Xref "Artistic License Wall, Larry"
.IP "\s-1ASCII\s0" 4
.IX Item "ASCII"
The American Standard Code for
Information Interchange (a 7\-bit character set adequate only for poorly
representing English text). Often used loosely to describe the lowest 128
values of the various \s-1ISO\-8859\-X\s0 character sets, a bunch of mutually
incompatible 8\-bit codes best described as half \s-1ASCII.\s0 See also \fBUnicode\fR.
.IX Xref "ASCII (American Standard Code for Information Interchange) American Standard Code for Information Interchange (ASCII)"
.IP "assertion" 4
.IX Item "assertion"
A component of a \fBregular expression\fR that must be true for the pattern to
match but does not necessarily match any characters itself. Often used
specifically to mean a \fBzero-width\fR assertion.
.IX Xref "assertions (in regexes), defined regular expressions, assertions in"
.IP "assignment" 4
.IX Item "assignment"
An \fBoperator\fR whose assigned mission in life is to
change the value of a \fBvariable\fR.
.IX Xref "assignments, defined"
.IP "assignment operator" 4
.IX Item "assignment operator"
Either a regular \fBassignment\fR or a compound
\&\fBoperator\fR composed of an ordinary assignment and some other operator, that
changes the value of a variable in place; that is, relative to its old
value. For example, \f(CW\*(C`$a += 2\*(C'\fR adds \f(CW2\fR to \f(CW$a\fR.
.IX Xref "assignment operators, about"
.IP "associative array" 4
.IX Item "associative array"
See \fBhash\fR. Please. The term associative array is the
old Perl 4 term for a \fBhash\fR. Some languages call it a dictionary.
.IX Xref "associative arrays"
.IP "associativity" 4
.IX Item "associativity"
Determines whether you do the left \fBoperator\fR first or the
right \fBoperator\fR first when you have \s-1XA \s0\fBoperator\fR B \fBoperator\fR \s-1CX,\s0 and
the two operators are of the same precedence. Operators like \f(CW\*(C`+\*(C'\fR are left
associative, while operators like \f(CW\*(C`**\*(C'\fR are right associative. See Camel
chapter 3, XUnary and Binary OperatorsX for a list of operators and their
associativity.
.IX Xref "associativity"
.IP "asynchronous" 4
.IX Item "asynchronous"
Said of events or activities whose relative
temporal ordering is indeterminate because too many things are going on at
once. Hence, an asynchronous event is one you didnXt know when to expect.
.IX Xref "asynchronous event processing"
.IP "atom" 4
.IX Item "atom"
A \fBregular expression\fR component potentially matching a
\&\fBsubstring\fR containing one or more characters and treated as an indivisible
syntactic unit by any following \fBquantifier\fR. (Contrast with an
\&\fBassertion\fR that matches something of \fBzero width\fR and may not be quantified.)
.IX Xref "atoms"
.IP "atomic operation" 4
.IX Item "atomic operation"
When Democritus gave the word XatomX to the indivisible
bits of matter, he meant literally something that could not be cut: \fIX\-\fR
(not) + \fI\-XXXXX\fR (cuttable). An atomic operation is an action that canXt be
interrupted, not one forbidden in a nuclear-free zone.
.IX Xref "atomic operation"
.IP "attribute" 4
.IX Item "attribute"
A new feature that allows the declaration of
\&\fBvariables\fR and \fBsubroutines\fR with modifiers, as in \f(CW\*(C`sub foo : locked
method\*(C'\fR. Also another name for an \fBinstance variable\fR of an \fBobject\fR.
.IX Xref "attribute feature"
.IP "autogeneration" 4
.IX Item "autogeneration"
A feature of \fBoperator overloading\fR of \fBobjects\fR,
whereby the behavior of certain \fBoperators\fR can be reasonably deduced using
more fundamental operators. This assumes that the overloaded operators will
often have the same relationships as the regular operators. See Camel
chapter 13, XOverloadingX.
.IX Xref "autogeneration, about"
.IP "autoincrement" 4
.IX Item "autoincrement"
To add one to something automatically, hence the name
of the \f(CW\*(C`++\*(C'\fR operator. To instead subtract one from something automatically
is known as an XautodecrementX.
.IX Xref "autoincrement (term)"
.IP "autoload" 4
.IX Item "autoload"
To load on demand. (Also called XlazyX loading.)
Specifically, to call an \f(CW\*(C`AUTOLOAD\*(C'\fR subroutine on behalf of an undefined
subroutine.
.IX Xref "autoloading, defined"
.IP "autosplit" 4
.IX Item "autosplit"
To split a string automatically, as the \fIXa\fR \fBswitch\fR
does when running under \fIXp\fR or \fIXn\fR in order to emulate \fBawk\fR. (See also
the \f(CW\*(C`AutoSplit\*(C'\fR module, which has nothing to do with the
\&\f(CW\*(C`Xa\*(C'\fR switch but a lot to do with autoloading.)
.IX Xref "autosplit (term) AutoSplit module"
.IP "autovivification" 4
.IX Item "autovivification"
A Graeco-Roman word meaning Xto bring oneself to lifeX.
In Perl, storage locations (\fBlvalues\fR) spontaneously generate themselves as
needed, including the creation of any \fBhard reference\fR values to point to
the next level of storage. The assignment \f(CW\*(C`$a[5][5][5][5][5] = "quintet"\*(C'\fR
potentially creates five scalar storage locations, plus four references (in
the first four scalar locations) pointing to four new anonymous arrays (to
hold the last four scalar locations). But the point of autovivification is
that you donXt have to worry about it.
.IX Xref "autovivification"
.IP "\s-1AV\s0" 4
.IX Item "AV"
Short for Xarray
valueX, which refers to one of PerlXs internal data types that holds an
\&\fBarray\fR. The \f(CW\*(C`AV\*(C'\fR type is a subclass of \fB\s-1SV\s0\fR.
.IX Xref "AV (array value) array value (AV) values, array"
.IP "awk" 4
.IX Item "awk"
Descriptive editing termXshort for XawkwardX. Also
coincidentally refers to a venerable text-processing language from which
Perl derived some of its high-level ideas.
.IX Xref "awk (editing term)"
.SS "B"
.IX Subsection "B"
.IP "backreference" 4
.IX Item "backreference"
A substring \fBcaptured\fR
by a subpattern within unadorned parentheses in a \fBregex\fR. Backslashed
decimal numbers (\f(CW\*(C`\e1\*(C'\fR, \f(CW\*(C`\e2\*(C'\fR, etc.) later in the same pattern refer back to
the corresponding subpattern in the current match. Outside the pattern, the
numbered variables (\f(CW$1\fR, \f(CW$2\fR, etc.) continue to refer to these same
values, as long as the pattern was the last successful match of the current
\&\fBdynamic scope\fR.
.IX Xref "backreferences, about references, backreferences"
.IP "backtracking" 4
.IX Item "backtracking"
The practice of saying, XIf I had to do it all over, IXd do
it differently,X and then actually going back and doing it all over
differently. Mathematically speaking, itXs returning from an unsuccessful
recursion on a tree of possibilities. Perl backtracks when it attempts to
match patterns with a \fBregular expression\fR, and its earlier attempts donXt
pan out. See the section XThe Little Engine That /Couldn(nXt)X in Camel
chapter 5, XPattern MatchingX.
.IX Xref "backtracking"
.IP "backward compatibility" 4
.IX Item "backward compatibility"
Means you can still run your old program
because we didnXt break any of the features or bugs it was relying on.
.IX Xref "backward compatibility, defined"
.IP "bareword" 4
.IX Item "bareword"
A word sufficiently ambiguous to be deemed illegal under
\&\f(CW\*(C`use strict \*(Aqsubs\*(Aq\*(C'\fR. In the absence of that stricture, a bareword is
treated as if quotes were around it.
.IX Xref "barewords, about"
.IP "base class" 4
.IX Item "base class"
A generic \fBobject\fR type; that is, a \fBclass\fR
from which other, more specific classes are derived genetically by
\&\fBinheritance\fR. Also called a
XsuperclassX by people who respect their ancestors.
.IX Xref "base classes classes, base superclasses classes, superclasses"
.IP "big-endian" 4
.IX Item "big-endian"
From Swift: someone who
eats eggs big end first. Also used of computers that store the most
significant \fBbyte\fR of a word at a lower byte address than the least
significant byte. Often considered superior to little-endian machines. See
also \fBlittle-endian\fR.
.IX Xref "bigXendian, defined endianness, bigXendian"
.IP "binary" 4
.IX Item "binary"
Having to do with numbers represented in base 2. That means
thereXs basically two numbers: 0 and 1. Also used to describe a file of
XnontextX, presumably because such a file makes full use of all the binary
bits in its bytes. With the advent of \fBUnicode\fR, this distinction, already
suspect, loses even more of its meaning.
.IX Xref "binary (term)"
.IP "binary operator" 4
.IX Item "binary operator"
An \fBoperator\fR that takes two \fBoperands\fR.
.IX Xref "binary operators, about"
.IP "bind" 4
.IX Item "bind"
To assign a specific \fBnetwork address\fR to a \fBsocket\fR.
.IX Xref "bind (term)"
.IP "bit" 4
.IX Item "bit"
An integer in the range from 0 to 1, inclusive. The smallest
possible unit of information storage. An eighth of a \fBbyte\fR or of a dollar.
(The term XPieces of EightX comes from being able to split the old Spanish
dollar into 8 bits, each of which still counted for money. ThatXs why a 25\-
cent piece today is still Xtwo bitsX.)
.IX Xref "bits, defined"
.IP "bit shift" 4
.IX Item "bit shift"
The movement of bits left or right in a
computer word, which has the effect of multiplying or dividing by a
power of 2.
.IX Xref "bitXshift operators, defined"
.IP "bit string" 4
.IX Item "bit string"
A sequence of \fBbits\fR that is actually being thought of as a
sequence of bits, for once.
.IX Xref "bit string"
.IP "bless" 4
.IX Item "bless"
In corporate life, to grant official
approval to a thing, as in, XThe \s-1VP\s0 of Engineering has blessed our
WebCruncher project.X Similarly, in Perl, to grant official approval to a
\&\fBreferent\fR so that it can function as an \fBobject\fR, such as a WebCruncher
object. See the \f(CW\*(C`bless\*(C'\fR function in Camel chapter 27, XFunctionsX.
.IX Xref "bless function, about bless (term)"
.IP "block" 4
.IX Item "block"
What a \fBprocess\fR does when it has to wait for something:
XMy process blocked waiting for the disk.X As an unrelated noun, it refers
to a large chunk of data, of a size that the \fBoperating system\fR likes to
deal with (normally a power of 2 such as 512 or 8192). Typically refers to
a chunk of data thatXs coming from or going to a disk file.
.IX Xref "blocks, defined"
.IP "\s-1BLOCK\s0" 4
.IX Item "BLOCK"
A syntactic construct
consisting of a sequence of Perl \fBstatements\fR that is delimited by braces.
The \f(CW\*(C`if\*(C'\fR and \f(CW\*(C`while\*(C'\fR statements are defined in terms of \fI\f(CI\*(C`BLOCK\*(C'\fI\fRs, for
instance. Sometimes we also say XblockX to mean a lexical scope; that is, a
sequence of statements that acts like a \fI\f(CI\*(C`BLOCK\*(C'\fI\fR, such as within an
\&\f(CW\*(C`eval\*(C'\fR or a file, even though the statements arenXt delimited by braces.
.IX Xref "BLOCK construct, about constructs, BLOCK"
.IP "block buffering" 4
.IX Item "block buffering"
A method of making input and output
efficient by passing one \fBblock\fR at a time. By default, Perl does block
buffering to disk files. See \fBbuffer\fR and \fBcommand buffering\fR.
.IX Xref "block buffering buffering, block"
.IP "Boolean" 4
.IX Item "Boolean"
A value that is either \fBtrue\fR or
\&\fBfalse\fR.
.IX Xref "Boolean values values, Boolean"
.IP "Boolean context" 4
.IX Item "Boolean context"
A special kind of \fBscalar
context\fR used in conditionals to decide whether the \fBscalar value\fR returned
by an expression is \fBtrue\fR or \fBfalse\fR. Does not evaluate as either a
string or a number. See \fBcontext\fR.
.IX Xref "Boolean context, about context, Boolean"
.IP "breakpoint" 4
.IX Item "breakpoint"
A spot in your program where youXve told the debugger
to stop \fBexecution\fR so you can poke around and see whether anything is
wrong yet.
.IX Xref "breakpoints, defined"
.IP "broadcast" 4
.IX Item "broadcast"
To send a \fBdatagram\fR to multiple destinations
simultaneously.
.IX Xref "broadcast (networking term)"
.IP "\s-1BSD\s0" 4
.IX Item "BSD"
A psychoactive drug, popular in the X80s, probably developed at \s-1UC\s0
Berkeley or thereabouts. Similar in many ways to the prescription-only
medication called XSystem \s-1VX,\s0 but infinitely more useful. (Or, at least,
more fun.) The full chemical name is XBerkeley Standard DistributionX.
.IX Xref "BSD (Berkeley Standard Distribution) Berkeley Standard Distribution (BSD)"
.IP "bucket" 4
.IX Item "bucket"
A location in a \fBhash table\fR containing (potentially)
multiple entries whose keys XhashX to the same hash value according to its
hash function. (As internal policy, you donXt have to worry about it unless
youXre into internals, or policy.)
.IX Xref "buckets (term)"
.IP "buffer" 4
.IX Item "buffer"
A temporary holding location for data. Data that are
\&\fBBlock buffering\fR means that the data is passed on to its destination
whenever the buffer is full. \fBLine buffering\fR means that itXs passed on
whenever a complete line is received. \fBCommand buffering\fR means that itXs
passed every time you do a \f(CW\*(C`print\*(C'\fR command (or equivalent). If your output
is unbuffered, the system processes it one byte at a time without the use of
a holding area. This can be rather inefficient.
.IX Xref "buffers, defined"
.IP "built-in" 4
.IX Item "built-in"
A \fBfunction\fR that is predefined in the
language. Even when hidden by \fBoverriding\fR, you can always get at a built\-
in function by \fBqualifying\fR its name with the \f(CW\*(C`CORE::\*(C'\fR pseudopackage.
.IX Xref "builtXin functions, about"
.IP "bundle" 4
.IX Item "bundle"
A group of related modules on \fB\s-1CPAN\s0\fR. (Also sometimes
refers to a group of command-line switches grouped into one \fBswitch
cluster\fR.)
.IX Xref "bundles (term)"
.IP "byte" 4
.IX Item "byte"
A piece of data worth eight \fBbits\fR in most places.
.IX Xref "bytes (term)"
.IP "bytecode" 4
.IX Item "bytecode"
A pidgin-like lingo spoken among Xdroids when they donXt wish to reveal
their orientation (see \fBendian\fR). Named after some similar languages spoken
(for similar reasons) between compilers and interpreters in the late 20XX
century. These languages are characterized by representing everything as a
nonarchitecture-dependent sequence of bytes.
.SS "C"
.IX Subsection "C"
.IP "C" 4
.IX Item "C"
A language beloved by many for its inside-out \fBtype\fR
definitions, inscrutable \fBprecedence\fR rules, and heavy \fBoverloading\fR of
the function-call mechanism. (Well, actually, people first switched to C
because they found lowercase identifiers easier to read than upper.) Perl is
written in C, so itXs not surprising that Perl borrowed a few ideas from it.
.IX Xref "C language, about"
.IP "cache" 4
.IX Item "cache"
A data repository. Instead of computing expensive answers
several times, compute it once and save the result.
.IX Xref "cache (term)"
.IP "callback" 4
.IX Item "callback"
A \fBhandler\fR that you register with some other part of your
program in the hope that the other part of your program will \fBtrigger\fR your
handler when some event of interest transpires.
.IX Xref "callbacks"
.IP "call by reference" 4
.IX Item "call by reference"
An \fBargument\fR\-passing mechanism in which the \fBformal arguments\fR refer directly to the
\&\fBactual arguments\fR, and the \fBsubroutine\fR can change the actual arguments
by changing the formal arguments. That is, the formal argument is an
\&\fBalias\fR for the actual argument. See also \fBcall by value\fR.
.IX Xref "call by reference references, call by reference mechanism"
.IP "call by value" 4
.IX Item "call by value"
An \fBargument\fR\-passing mechanism in which the \fBformal
arguments\fR refer to a copy of the \fBactual arguments\fR, and the
\&\fBsubroutine\fR cannot change the actual arguments by changing the formal
arguments. See also \fBcall by reference\fR.
.IX Xref "call by value"
.IP "canonical" 4
.IX Item "canonical"
Reduced to a standard form to facilitate comparison.
.IX Xref "canonical (term)"
.IP "capture variables" 4
.IX Item "capture variables"
The variablesXsuch as \f(CW$1\fR and
\&\f(CW$2\fR, and \f(CW\*(C`%+\*(C'\fR and \f(CW%X \fRXthat hold the text remembered in a pattern
match. See Camel chapter 5, XPattern MatchingX.
.IX Xref "capture variables variables, capture"
.IP "capturing" 4
.IX Item "capturing"
The use of parentheses around a \fBsubpattern\fR in a
\&\fBregular expression\fR to store the matched \fBsubstring\fR as a
\&\fBbackreference\fR. (Captured strings are also returned as a list in \fBlist
context\fR.) See Camel chapter 5, XPattern MatchingX.
.IX Xref "capturing in pattern matching subpatterns, capturing pattern matching, capturing in"
.IP "cargo cult" 4
.IX Item "cargo cult"
Copying and pasting code without understanding it, while
superstitiously believing in its value. This term originated from
preindustrial cultures dealing with the detritus of explorers and colonizers
of technologically advanced cultures. See \fIThe Gods Must Be Crazy\fR.
.IX Xref "cargo cult"
.IP "case" 4
.IX Item "case"
A property of certain
characters. Originally, typesetter stored capital letters in the upper of
two cases and small letters in the lower one. Unicode recognizes three
cases: \fBlowercase\fR (\fBcharacter property\fR \f(CW\*(C`\ep{lower}\*(C'\fR), \fBtitlecase\fR
(\f(CW\*(C`\ep{title}\*(C'\fR), and \fBuppercase\fR (\f(CW\*(C`\ep{upper}\*(C'\fR). A fourth casemapping called
\&\fBfoldcase\fR is not itself a distinct case, but it is used internally to
implement \fBcasefolding\fR. Not all letters have case, and some nonletters
have case.
.IX Xref "case (character) characters, case considerations"
.IP "casefolding" 4
.IX Item "casefolding"
Comparing or matching a string case-insensitively. In Perl, it
is implemented with the \f(CW\*(C`/i\*(C'\fR pattern modifier, the \f(CW\*(C`fc\*(C'\fR function, and the
\&\f(CW\*(C`\eF\*(C'\fR double-quote translation escape.
.IX Xref "casefolding"
.IP "casemapping" 4
.IX Item "casemapping"
The process of converting a string to one of the four Unicode
\&\fBcasemaps\fR; in Perl, it is implemented with the \f(CW\*(C`fc\*(C'\fR, \f(CW\*(C`lc\*(C'\fR, \f(CW\*(C`ucfirst\*(C'\fR,
and \f(CW\*(C`uc\*(C'\fR functions.
.IX Xref "casemapping"
.IP "character" 4
.IX Item "character"
The smallest individual element of a string. Computers
store characters as integers, but Perl lets you operate on them as text. The
integer used to represent a particular character is called that characterXs
\&\fBcodepoint\fR.
.IX Xref "characters, defined"
.IP "character class" 4
.IX Item "character class"
A square-bracketed list of
characters used in a \fBregular expression\fR to indicate that any character
of the set may occur at a given point. Loosely, any predefined set of
characters so used.
.IX Xref "character classes, about classes, character"
.IP "character property" 4
.IX Item "character property"
A predefined \fBcharacter class\fR matchable by the \f(CW\*(C`\ep\*(C'\fR
or \f(CW\*(C`\eP\*(C'\fR \fBmetasymbol\fR. \fBUnicode\fR defines hundreds of standard properties
for every possible codepoint, and Perl defines a few of its own, too.
.IX Xref "character property"
.IP "circumfix operator" 4
.IX Item "circumfix operator"
An \fBoperator\fR that surrounds its \fBoperand\fR, like the
angle operator, or parentheses, or a hug.
.IX Xref "circumfix operator"
.IP "class" 4
.IX Item "class"
A user-defined \fBtype\fR, implemented in Perl via a
\&\fBpackage\fR that provides (either directly or by inheritance) \fBmethods\fR
(that is, \fBsubroutines\fR) to handle \fBinstances\fR of the class (its
\&\fBobjects\fR). See also \fBinheritance\fR.
.IX Xref "classes, defined"
.IP "class method" 4
.IX Item "class method"
A \fBmethod\fR whose \fBinvocant\fR is a
\&\fBpackage\fR name, not an \fBobject\fR reference. A method associated with the
class as a whole. Also see \fBinstance method\fR.
.IX Xref "class methods methods, class"
.IP "client" 4
.IX Item "client"
In networking, a \fBprocess\fR that
initiates contact with a \fBserver\fR process in order to exchange data and
perhaps receive a service.
.IX Xref "clients, defined processes, client"
.IP "closure" 4
.IX Item "closure"
An \fBanonymous\fR subroutine
that, when a reference to it is generated at runtime, keeps track of the
identities of externally visible \fBlexical variables\fR, even after those
lexical variables have supposedly gone out of \fBscope\fR. TheyXre called
XclosuresX because this sort of behavior gives mathematicians a sense of
closure.
.IX Xref "closure subroutines subroutines, closure"
.IP "cluster" 4
.IX Item "cluster"
A parenthesized \fBsubpattern\fR
used to group parts of a \fBregular expression\fR into a single \fBatom\fR.
.IX Xref "clusters, defined subpatterns, cluster"
.IP "\s-1CODE\s0" 4
.IX Item "CODE"
The word returned by the \f(CW\*(C`ref\*(C'\fR
function when you apply it to a reference to a subroutine. See also \fB\s-1CV\s0\fR.
.IX Xref "CODE (ref function) ref function, about"
.IP "code generator" 4
.IX Item "code generator"
A system that writes code for you in a low-level
language, such as code to implement the backend of a compiler. See \fBprogram
generator\fR.
.IX Xref "code generators, defined"
.IP "codepoint" 4
.IX Item "codepoint"
The integer a computer uses to represent a given
character. \s-1ASCII\s0 codepoints are in the range 0 to 127; Unicode codepoints
are in the range 0 to 0x1F_FFFF; and Perl codepoints are in the range 0 to
2XXX1 or 0 to 2XXX1, depending on your native integer size. In Perl Culture,
sometimes called \fBordinals\fR.
.IX Xref "codepoints, about"
.IP "code subpattern" 4
.IX Item "code subpattern"
A \fBregular expression\fR subpattern
whose real purpose is to execute some Perl codeXfor example, the \f(CW\*(C`(?{...})\*(C'\fR
and \f(CW\*(C`(??{...})\*(C'\fR subpatterns.
.IX Xref "code subpatterns subpatterns, code"
.IP "collating sequence" 4
.IX Item "collating sequence"
The order into which \fBcharacters\fR
sort. This is used by \fBstring\fR comparison routines to decide, for example,
where in this glossary to put Xcollating sequenceX.
.IX Xref "collating sequence collating sequence"
.IP "co-maintainer" 4
.IX Item "co-maintainer"
A person with permissions to index a \fBnamespace\fR in
\&\fB\s-1PAUSE\s0\fR. Anyone can upload any namespace, but only primary and
co-maintainers get their contributions indexed.
.IX Xref "coXmaintainers"
.IP "combining character" 4
.IX Item "combining character"
Any character with the
General Category of Combining Mark (\f(CW\*(C`\ep{GC=M}\*(C'\fR), which may be spacing or
nonspacing. Some are even invisible. A sequence of combining characters
following a grapheme base character together make up a single user-visible
character called a \fBgrapheme\fR. Most but not all diacritics are combining
characters, and vice versa.
.IX Xref "combining characters characters, combining"
.IP "command" 4
.IX Item "command"
In \fBshell\fR programming, the syntactic combination of a
program name and its arguments. More loosely, anything you type to a shell
(a command interpreter) that starts it doing something. Even more loosely, a
Perl \fBstatement\fR, which might start with a \fBlabel\fR and typically ends with
a semicolon.
.IX Xref "commands, defined"
.IP "command buffering" 4
.IX Item "command buffering"
A mechanism in Perl that lets you
store up the output of each Perl \fBcommand\fR and then flush it out as a
single request to the \fBoperating system\fR. ItXs enabled by setting the \f(CW$|\fR
(\f(CW$AUTOFLUSH\fR) variable to a true value. ItXs used when you donXt want data
sitting around, not going where itXs supposed to, which may happen because
the default on a \fBfile\fR or \fBpipe\fR is to use \fBblock buffering\fR.
.IX Xref "command buffering buffering, command"
.IP "command-line arguments" 4
.IX Item "command-line arguments"
The \fBvalues\fR you supply
along with a program name when you tell a \fBshell\fR to execute a \fBcommand\fR.
These values are passed to a Perl program through \f(CW@ARGV\fR.
.IX Xref "commandXline arguments arguments, commandXline"
.IP "command name" 4
.IX Item "command name"
The name of the program currently executing, as typed on the
command line. In C, the \fBcommand\fR name is passed to the program as the
first command-line argument. In Perl, it comes in separately as \f(CW$0\fR.
.IX Xref "command names"
.IP "comment" 4
.IX Item "comment"
A remark that doesnXt affect the meaning of the program.
In Perl, a comment is introduced by a \f(CW\*(C`#\*(C'\fR character and continues to the
end of the line.
.IX Xref "comments, defined"
.IP "compilation unit" 4
.IX Item "compilation unit"
The \fBfile\fR (or \fBstring\fR, in the case of \f(CW\*(C`eval\*(C'\fR) that
is currently being \fBcompiled\fR.
.IX Xref "compilation units"
.IP "compile" 4
.IX Item "compile"
The process of turning source code into a machine-usable form. See \fBcompile
phase\fR.
.IP "compile phase" 4
.IX Item "compile phase"
Any time before Perl starts running your main
program. See also \fBrun phase\fR. Compile phase is mostly spent in \fBcompile
time\fR, but may also be spent in \fBruntime\fR when \f(CW\*(C`BEGIN\*(C'\fR blocks, \f(CW\*(C`use\*(C'\fR or
\&\f(CW\*(C`no\*(C'\fR declarations, or constant subexpressions are being evaluated. The
startup and import code of any \f(CW\*(C`use\*(C'\fR declaration is also run during
compile phase.
.IX Xref "compile phase, defined"
.IP "compiler" 4
.IX Item "compiler"
Strictly speaking, a program that munches
up another program and spits out yet another file containing the program in
a Xmore executableX form, typically containing native machine instructions.
The \fIperl\fR program is not a compiler by this definition, but it does
contain a kind of compiler that takes a program and turns it into a more
executable form (\fBsyntax trees\fR) within the \fIperl\fR process itself, which
the \fBinterpreter\fR then interprets. There are, however, extension \fBmodules\fR
to get Perl to act more like a XrealX compiler. See Camel chapter 16,
XCompilingX.
.IX Xref "compilers and compiling, about"
.IP "compile time" 4
.IX Item "compile time"
The time when Perl is trying to make sense of your
code, as opposed to when it thinks it knows what your code means and is
merely trying to do what it thinks your code says to do, which is \fBruntime\fR.
.IX Xref "compile time, defined"
.IP "composer" 4
.IX Item "composer"
A XconstructorX for a \fBreferent\fR that isnXt really an
\&\fBobject\fR, like an anonymous array or a hash (or a sonata, for that matter).
For example, a pair of braces acts as a composer for a hash, and a pair of
brackets acts as a composer for an array. See the section XCreating
ReferencesX in Camel chapter 8, XReferencesX.
.IX Xref "composers, about"
.IP "concatenation" 4
.IX Item "concatenation"
The process of gluing one
catXs nose to another catXs tail. Also a similar operation on two
\&\fBstrings\fR.
.IX Xref "concatenating strings strings, concatenating"
.IP "conditional" 4
.IX Item "conditional"
Something XiffyX. See \fBBoolean context\fR.
.IX Xref "conditional (term)"
.IP "connection" 4
.IX Item "connection"
In telephony, the temporary electrical circuit between
the callerXs and the calleeXs phone. In networking, the same kind of
temporary circuit between a \fBclient\fR and a \fBserver\fR.
.IX Xref "connections (term)"
.IP "construct" 4
.IX Item "construct"
As a noun, a piece of syntax made up of smaller
pieces. As a transitive verb, to create an \fBobject\fR using a \fBconstructor\fR.
.IX Xref "constructs, defined"
.IP "constructor" 4
.IX Item "constructor"
Any \fBclass method\fR, \fBinstance\fR, or \fBsubroutine\fR
that composes, initializes, blesses, and returns an \fBobject\fR. Sometimes we
use the term loosely to mean a \fBcomposer\fR.
.IX Xref "constructors, defined"
.IP "context" 4
.IX Item "context"
The surroundings or environment. The context given by the
surrounding code determines what kind of data a particular \fBexpression\fR is
expected to return. The three primary contexts are \fBlist context\fR,
\&\fBscalar\fR, and \fBvoid context\fR. Scalar context is sometimes subdivided into
\&\fBBoolean context\fR, \fBnumeric context\fR, \fBstring context\fR, and \fBvoid
context\fR. ThereXs also a XdonXt careX context (which is dealt with in Camel
chapter 2, XBits and PiecesX, if you care).
.IX Xref "context, about"
.IP "continuation" 4
.IX Item "continuation"
The treatment of more than one physical \fBline\fR as a
single logical line. \fBMakefile\fR lines are continued by putting a backslash
before the \fBnewline\fR. Mail headers, as defined by \s-1RFC 822,\s0 are
continued by putting a space or tab \fIafter\fR the newline. In general, lines
in Perl do not need any form of continuation mark, because \fBwhitespace\fR
(including newlines) is gleefully ignored. Usually.
.IX Xref "continuation lines RFC 822"
.IP "core dump" 4
.IX Item "core dump"
The corpse of a \fBprocess\fR, in the form of a file left in the
\&\fBworking directory\fR of the process, usually as a result of certain kinds
of fatal errors.
.IX Xref "core dump"
.IP "\s-1CPAN\s0" 4
.IX Item "CPAN"
The Comprehensive Perl Archive Network. (See the Camel Preface
and Camel chapter 19, \s-1XCPANX\s0 for details.)
.IX Xref "Comprehensive Perl Archive Network CPAN (Comprehensive Perl Archive Network), about"
.IP "C preprocessor" 4
.IX Item "C preprocessor"
The typical C compilerXs first pass, which processes lines
beginning with \f(CW\*(C`#\*(C'\fR for conditional compilation and macro definition, and
does various manipulations of the program text based on the current
definitions. Also known as \fIcpp\fR(1).
.IX Xref "C preprocessor"
.IP "cracker" 4
.IX Item "cracker"
Someone who breaks security on computer systems. A cracker may
be a true \fBhacker\fR or only a \fBscript kiddie\fR.
.IX Xref "crackers"
.IP "currently selected output channel" 4
.IX Item "currently selected output channel"
The last \fBfilehandle\fR that was
designated with \f(CW\*(C`select(FILEHANDLE)\*(C'\fR; \f(CW\*(C`STDOUT\*(C'\fR, if no filehandle has
been selected.
.IX Xref "currently selected output channel"
.IP "current package" 4
.IX Item "current package"
The \fBpackage\fR in which the current statement is
\&\fBcompiled\fR. Scan backward in the text of your program through the current
\&\fBlexical scope\fR or any enclosing lexical scopes until you find a package
declaration. ThatXs your current package name.
.IX Xref "current package"
.IP "current working directory" 4
.IX Item "current working directory"
See \fBworking directory\fR.
.IX Xref "current working directory"
.IP "\s-1CV\s0" 4
.IX Item "CV"
In academia, a curriculum vit\*(ae, a fancy kind of re\*'sume\*'. In Perl, an internal Xcode valueX typedef holding a
\&\fBsubroutine\fR. The \f(CW\*(C`CV\*(C'\fR type is a subclass of \fB\s-1SV\s0\fR.
.IX Xref "CV (code value) code value (CV)"
.SS "D"
.IX Subsection "D"
.IP "dangling statement" 4
.IX Item "dangling statement"
A bare, single \fBstatement\fR,
without any braces, hanging off an \f(CW\*(C`if\*(C'\fR or \f(CW\*(C`while\*(C'\fR conditional. C allows
them. Perl doesnXt.
.IX Xref "dangling statements statements, dangling"
.IP "datagram" 4
.IX Item "datagram"
A packet of data, such as a \fB\s-1UDP\s0\fR message, that (from
the viewpoint of the programs involved) can be sent independently over the
network. (In fact, all packets are sent independently at the \fB\s-1IP\s0\fR level,
but \fBstream\fR protocols such as \fB\s-1TCP\s0\fR hide this from your program.)
.IX Xref "datagrams, defined"
.IP "data structure" 4
.IX Item "data structure"
How your various pieces of data relate to each
other and what shape they make when you put them all together, as in a
rectangular table or a triangular tree.
.IX Xref "data structures, defined"
.IP "data type" 4
.IX Item "data type"
A set of possible values, together with all the
operations that know how to deal with those values. For example, a numeric
data type has a certain set of numbers that you can work with, as well as
various mathematical operations that you can do on the numbers, but would
make little sense on, say, a string such as \f(CW"Kilroy"\fR. Strings have their
own operations, such as \fBconcatenation\fR. Compound types made of a number of
smaller pieces generally have operations to compose and decompose them, and
perhaps to rearrange them. \fBObjects\fR that model things in the real world
often have operations that correspond to real activities. For instance, if
you model an elevator, your elevator object might have an \f(CW\*(C`open_door\*(C'\fR
\&\fBmethod\fR.
.IX Xref "data types, defined"
.IP "\s-1DBM\s0" 4
.IX Item "DBM"
Stands for XDatabase ManagementX routines, a set of routines that emulate an
\&\fBassociative array\fR using disk files. The routines use a dynamic hashing
scheme to locate any entry with only two disk accesses. \s-1DBM\s0 files allow a
Perl program to keep a persistent \fBhash\fR across multiple invocations. You
can \f(CW\*(C`tie\*(C'\fR your hash variables to various \s-1DBM\s0 implementations.
.IX Xref "DBM (Database Management) routines Database Management (DBM) routines"
.IP "declaration" 4
.IX Item "declaration"
An \fBassertion\fR that states something exists and
perhaps describes what itXs like, without giving any commitment as to how
or where youXll use it. A declaration is like the part of your recipe that
says, Xtwo cups flour, one large egg, four or five tadpolesXX See
\&\fBstatement\fR for its opposite. Note that some declarations also function
as statements. Subroutine declarations also act as definitions if a body
is supplied.
.IX Xref "declarations, defined"
.IP "declarator" 4
.IX Item "declarator"
Something that tells your program what sort of variable
youXd like. Perl doesnXt require you to declare variables, but you can use
\&\f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, or \f(CW\*(C`state\*(C'\fR to denote that you want something other than
the default.
.IX Xref "declarators"
.IP "decrement" 4
.IX Item "decrement"
To subtract a value from a
variable, as in Xdecrement \f(CW$x\fRX (meaning to remove 1 from its value) or
Xdecrement \f(CW$x\fR by 3X.
.IX Xref "decrementing values values, decrementing"
.IP "default" 4
.IX Item "default"
A \fBvalue\fR chosen for you if you donXt
supply a value of your own.
.IX Xref "default values values, default"
.IP "defined" 4
.IX Item "defined"
Having a meaning. Perl thinks that some of the things
people try to do are devoid of meaning; in particular, making use of
variables that have never been given a \fBvalue\fR and performing certain
operations on data that isnXt there. For example, if you try to read data
past the end of a file, Perl will hand you back an undefined value. See also
\&\fBfalse\fR and the \f(CW\*(C`defined\*(C'\fR entry in Camel chapter 27, XFunctionsX.
.IX Xref "defined (term)"
.IP "delimiter" 4
.IX Item "delimiter"
A \fBcharacter\fR or \fBstring\fR that sets bounds to an
arbitrarily sized textual object, not to be confused with a \fBseparator\fR or
\&\fBterminator\fR. XTo delimitX really just means Xto surroundX or Xto encloseX
(like these parentheses are doing).
.IX Xref "delimiters (term)"
.IP "dereference" 4
.IX Item "dereference"
A fancy computer science term
meaning Xto follow a \fBreference\fR to what it points toX. The XdeX part of it
refers to the fact that youXre taking away one level of \fBindirection\fR.
.IX Xref "dereference (term) references, dereference"
.IP "derived class" 4
.IX Item "derived class"
A \fBclass\fR that defines some of its \fBmethods\fR in terms of a more generic class,
called a \fBbase class\fR. Note that classes arenXt classified exclusively into
base classes or derived classes: a class can function as both a derived
class and a base class simultaneously, which is kind of classy.
.IX Xref "derived classes classes, derived subclasses classes, subclasses"
.IP "descriptor" 4
.IX Item "descriptor"
See \fBfile descriptor\fR.
.IP "destroy" 4
.IX Item "destroy"
To deallocate the memory of a \fBreferent\fR (first triggering
its \f(CW\*(C`DESTROY\*(C'\fR method, if it has one).
.IX Xref "destroy (term)"
.IP "destructor" 4
.IX Item "destructor"
A special \fBmethod\fR that is called
when an \fBobject\fR is thinking about \fBdestroying\fR itself. A Perl programXs
\&\f(CW\*(C`DESTROY\*(C'\fR method doesnXt do the actual destruction; Perl just \fBtriggers\fR
the method in case the \fBclass\fR wants to do any associated cleanup.
.IX Xref "destructor method methods, destructor"
.IP "device" 4
.IX Item "device"
A whiz-bang hardware gizmo (like a disk or tape drive or a
modem or a joystick or a mouse) attached to your computer, which the
\&\fBoperating system\fR tries to make look like a \fBfile\fR (or a bunch of files).
Under Unix, these fake files tend to live in the \fI/dev\fR directory.
.IX Xref "devices (term)"
.IP "directive" 4
.IX Item "directive"
A \fBpod\fR directive. See Camel chapter 23, XPlain Old
DocumentationX.
.IX Xref "directives, defined"
.IP "directory" 4
.IX Item "directory"
A special file that contains other files. Some
\&\fBoperating systems\fR call these XfoldersX, XdrawersX, XcataloguesX, or
XcatalogsX.
.IX Xref "directories, defined"
.IP "directory handle" 4
.IX Item "directory handle"
A name that represents a particular instance of opening a
directory to read it, until you close it. See the \f(CW\*(C`opendir\*(C'\fR function.
.IX Xref "directory handle"
.IP "discipline" 4
.IX Item "discipline"
Some people need this and some people avoid it.
For Perl, itXs an old way to say \fBI/O layer\fR.
.IX Xref "discipline (I O layer)"
.IP "dispatch" 4
.IX Item "dispatch"
To send something to its correct destination. Often used
metaphorically to indicate a transfer of programmatic control to a
destination selected algorithmically, often by lookup in a table of function
\&\fBreferences\fR or, in the case of object \fBmethods\fR, by traversing the
inheritance tree looking for the most specific definition for the method.
.IX Xref "dispatching"
.IP "distribution" 4
.IX Item "distribution"
A standard, bundled release of a system of
software. The default usage implies source code is included. If that is not
the case, it will be called a Xbinary-onlyX distribution.
.IX Xref "distributions, defined"
.IP "dual-lived" 4
.IX Item "dual-lived"
Some modules live both in the
\&\fBStandard Library\fR and on \fB\s-1CPAN\s0\fR. These modules might be developed on two
tracks as people modify either version. The trend currently is to untangle
these situations.
.IX Xref "dualXlived modules modules, dualXlived"
.IP "dweomer" 4
.IX Item "dweomer"
An enchantment, illusion, phantasm, or jugglery. Said when PerlXs
magical \fBdwimmer\fR effects donXt do what you expect, but rather seem to be
the product of arcane \fIdweomercraft\fR, sorcery, or wonder working. [From
Middle English.]
.IX Xref "dweomer"
.IP "dwimmer" 4
.IX Item "dwimmer"
\&\s-1DWIM \s0is
an acronym for XDo What I MeanX, the principle that something
should just do what you want it to do without an undue amount of fuss. A bit
of code that does XdwimmingX is a XdwimmerX. Dwimming can require a great
deal of behind-the-scenes magic, which (if it doesnXt stay properly behind
the scenes) is called a \fBdweomer\fR instead.
.IX Xref "DWIM (Do What I Mean) principle Do What I Mean (DWIM) principle dwimming"
.IP "dynamic scoping" 4
.IX Item "dynamic scoping"
Dynamic scoping works over a \fBdynamic
scope\fR, making variables visible throughout the rest of the \fBblock\fR in
which they are first used and in any \fBsubroutines\fR that are called by the
rest of the block. Dynamically scoped variables can have their values
temporarily changed (and implicitly restored later) by a \f(CW\*(C`local\*(C'\fR operator.
(Compare \fBlexical scoping\fR.) Used more loosely to mean how a subroutine
that is in the middle of calling another subroutine XcontainsX that
subroutine at \fBruntime\fR.
.IX Xref "dynamic scope scopes, dynamic"
.SS "E"
.IX Subsection "E"
.IP "eclectic" 4
.IX Item "eclectic"
Derived from many sources. Some would say \fItoo\fR many.
.IX Xref "eclectic (term)"
.IP "element" 4
.IX Item "element"
A basic building block. When youXre talking about an
\&\fBarray\fR, itXs one of the items that make up the array.
.IX Xref "elements, about"
.IP "embedding" 4
.IX Item "embedding"
When something is contained in something else,
particularly when that might be considered surprising: XIXve embedded a
complete Perl interpreter in my editor!X
.IX Xref "embedding (term)"
.IP "empty subclass test" 4
.IX Item "empty subclass test"
The notion that an empty \fBderived class\fR should
behave exactly like its \fBbase class\fR.
.IX Xref "empty subclass test"
.IP "encapsulation" 4
.IX Item "encapsulation"
The veil of abstraction separating the \fBinterface\fR
from the \fBimplementation\fR (whether enforced or not), which mandates that
all access to an \fBobject\fRXs state be through \fBmethods\fR alone.
.IX Xref "encapsulation (term)"
.IP "endian" 4
.IX Item "endian"
See \fBlittle-endian\fR and \fBbig-endian\fR.
.IP "en passant" 4
.IX Item "en passant"
When you change a \fBvalue\fR as it is being copied. [From
French Xin passingX, as in the exotic pawn-capturing maneuver in chess.]
.IX Xref "en passant (term)"
.IP "environment" 4
.IX Item "environment"
The collective set of \fBenvironment variables\fR your
\&\fBprocess\fR inherits from its parent. Accessed via \f(CW%ENV\fR.
.IX Xref "environment (term)"
.IP "environment variable" 4
.IX Item "environment variable"
A mechanism by which some high-level agent such as a user can pass its
preferences down to its future offspring (child \fBprocesses\fR, grandchild
processes, great-grandchild processes, and so on). Each environment
variable is a \fBkey\fR/\fBvalue\fR pair, like one entry in a \fBhash\fR.
.IX Xref "environment variables variables, environment environment variables"
.IP "\s-1EOF\s0" 4
.IX Item "EOF"
End of File. Sometimes used
metaphorically as the terminating string of a \fBhere document\fR.
.IX Xref "End of File (EOF) EOF (End of File)"
.IP "errno" 4
.IX Item "errno"
The error number returned by a
\&\fBsyscall\fR when it fails. Perl refers to the error by the name \f(CW$!\fR (or
\&\f(CW$OS_ERROR\fR if you use the English module).
.IX Xref "errno (error number) error number (errno)"
.IP "error" 4
.IX Item "error"
See \fBexception\fR or \fBfatal error\fR.
.IP "escape sequence" 4
.IX Item "escape sequence"
See \fBmetasymbol\fR.
.IP "exception" 4
.IX Item "exception"
A fancy term for an error. See \fBfatal error\fR.
.IP "exception handling" 4
.IX Item "exception handling"
The way a program responds to an error. The
exception-handling mechanism in Perl is the \f(CW\*(C`eval\*(C'\fR operator.
.IX Xref "exception handling, defined"
.IP "exec" 4
.IX Item "exec"
To throw away the current \fBprocess\fRXs program and replace
it with another, without exiting the process or relinquishing any resources
held (apart from the old memory image).
.IX Xref "exec function"
.IP "executable file" 4
.IX Item "executable file"
A \fBfile\fR that is specially marked to
tell the \fBoperating system\fR that itXs okay to run this file as a program.
Usually shortened to XexecutableX.
.IX Xref "executable files files, executable"
.IP "execute" 4
.IX Item "execute"
To run a \fBprogram\fR or \fBsubroutine\fR. (Has nothing to do
with the \f(CW\*(C`kill\*(C'\fR built-in, unless youXre trying to run a \fBsignal handler\fR.)
.IX Xref "execute (term)"
.IP "execute bit" 4
.IX Item "execute bit"
The special mark that tells the operating system it can run
this program. There are actually three execute bits under Unix, and which
bit gets used depends on whether you own the file singularly, collectively,
or not at all.
.IX Xref "execute bit"
.IP "exit status" 4
.IX Item "exit status"
See \fBstatus\fR.
.IP "exploit" 4
.IX Item "exploit"
Used as a noun in this case, this refers to a known way
to compromise a program to get it to do something the author didnXt intend.
Your task is to write unexploitable programs.
.IX Xref "exploits, security"
.IP "export" 4
.IX Item "export"
To make symbols from a \fBmodule\fR available for
\&\fBimport\fR by other modules.
.IX Xref "exporting, defined"
.IP "expression" 4
.IX Item "expression"
Anything you can legally say in a spot
where a \fBvalue\fR is required. Typically composed of \fBliterals\fR,
\&\fBvariables\fR, \fBoperators\fR, \fBfunctions\fR, and \fBsubroutine\fR calls, not
necessarily in that order.
.IX Xref "expressions, defined expressions"
.IP "extension" 4
.IX Item "extension"
A Perl module that also pulls in \fBcompiled\fR C or \*(C+
code. More generally, any experimental option that can be \fBcompiled\fR into
Perl, such as multithreading.
.IX Xref "extensions, defined"
.SS "F"
.IX Subsection "F"
.IP "false" 4
.IX Item "false"
In Perl, any value that would look like \f(CW""\fR
or \f(CW"0"\fR if evaluated in a string context. Since undefined values evaluate
to \f(CW""\fR, all undefined values are false, but not all false values are
undefined.
.IX Xref "false values values, false"
.IP "\s-1FAQ\s0" 4
.IX Item "FAQ"
Frequently Asked Question (although not necessarily
frequently answered, especially if the answer appears in the Perl \s-1FAQ\s0
shipped standard with Perl).
.IX Xref "FAQ (Frequently Asked Question) Frequently Asked Question (FAQ)"
.IP "fatal error" 4
.IX Item "fatal error"
An uncaught \fBexception\fR, which causes termination of the
\&\fBprocess\fR after printing a message on your \fBstandard error\fR stream. Errors
that happen inside an \f(CW\*(C`eval\*(C'\fR are not fatal. Instead, the \f(CW\*(C`eval\*(C'\fR terminates
after placing the exception message in the \f(CW$@\fR (\f(CW$EVAL_ERROR\fR) variable.
You can try to provoke a fatal error with the \f(CW\*(C`die\*(C'\fR operator (known as
throwing or raising an exception), but this may be caught by a dynamically
enclosing \f(CW\*(C`eval\*(C'\fR. If not caught, the \f(CW\*(C`die\*(C'\fR becomes a fatal error.
.IX Xref "fatal errors"
.IP "feeping creaturism" 4
.IX Item "feeping creaturism"
A spoonerism of Xcreeping
featurismX, noting the biological urge to add just one more feature to
a program.
.IX Xref "feeping creaturism creeping featurism"
.IP "field" 4
.IX Item "field"
A single piece of numeric or string data that is part of a
longer \fBstring\fR, \fBrecord\fR, or \fBline\fR. Variable-width fields are usually
split up by \fBseparators\fR (so use \f(CW\*(C`split\*(C'\fR to extract the fields), while
fixed-width fields are usually at fixed positions (so use \f(CW\*(C`unpack\*(C'\fR).
\&\fBInstance variables\fR are also known as XfieldsX.
.IX Xref "fields (term)"
.IP "\s-1FIFO\s0" 4
.IX Item "FIFO"
First In, First Out. See also \fB\s-1LIFO\s0\fR. Also a nickname for a \fBnamed pipe\fR.
.IX Xref "First In, First Out (FIFO) FIFO (First In, First Out)"
.IP "file" 4
.IX Item "file"
A named collection of data, usually stored on disk in a
\&\fBdirectory\fR in a \fBfilesystem\fR. Roughly like a document, if youXre into
office metaphors. In modern filesystems, you can actually give a file more
than one name. Some files have special properties, like directories and
devices.
.IX Xref "files, defined"
.IP "file descriptor" 4
.IX Item "file descriptor"
The little number the \fBoperating
system\fR uses to keep track of which opened \fBfile\fR youXre talking about.
Perl hides the file descriptor inside a \fBstandard I/O\fR stream and then
attaches the stream to a \fBfilehandle\fR.
.IX Xref "file descriptors descriptors, file"
.IP "fileglob" 4
.IX Item "fileglob"
A XwildcardX match on \fBfilenames\fR. See the \f(CW\*(C`glob\*(C'\fR function.
.IX Xref "fileglobs"
.IP "filehandle" 4
.IX Item "filehandle"
An identifier (not necessarily related to the real
name of a file) that represents a particular instance of opening a file,
until you close it. If youXre going to open and close several different
files in succession, itXs fine to open each of them with the same
filehandle, so you donXt have to write out separate code to process each
file.
.IX Xref "filehandles, about"
.IP "filename" 4
.IX Item "filename"
One name for a file. This name is listed in a
\&\fBdirectory\fR. You can use it in an \f(CW\*(C`open\*(C'\fR to tell the \fBoperating system\fR
exactly which file you want to open, and associate the file with a
\&\fBfilehandle\fR, which will carry the subsequent identity of that file in
your program, until you close it.
.IX Xref "filenames, about"
.IP "filesystem" 4
.IX Item "filesystem"
A set of \fBdirectories\fR and \fBfiles\fR residing on a
partition of the disk. Sometimes known as a XpartitionX. You can change the
fileXs name or even move a file around from directory to directory within a
filesystem without actually moving the file itself, at least under Unix.
.IX Xref "filesystems, defined"
.IP "file test operator" 4
.IX Item "file test operator"
A built-in unary operator that you use to
determine whether something is \fBtrue\fR about a file, such as \f(CW\*(C`Xo
$filename\*(C'\fR to test whether youXre the owner of the file.
.IX Xref "file test operators, about"
.IP "filter" 4
.IX Item "filter"
A program designed to take a \fBstream\fR of input and
transform it into a stream of output.
.IX Xref "filters, defined"
.IP "first-come" 4
.IX Item "first-come"
The first \fB\s-1PAUSE\s0\fR
author to upload a \fBnamespace\fR automatically becomes the \fBprimary
maintainer\fR for that namespace. The Xfirst comeX permissions distinguish a
\&\fBprimary maintainer\fR who was assigned that role from one who received it
automatically.
.IX Xref "firstXcome permissions permissions, firstXcome"
.IP "flag" 4
.IX Item "flag"
We tend to avoid this term because it means so many things.
It may mean a command-line \fBswitch\fR that takes no argument itself (such as
PerlXs \f(CW\*(C`Xn\*(C'\fR and \f(CW\*(C`Xp\*(C'\fR flags) or, less frequently, a single-bit indicator
(such as the \f(CW\*(C`O_CREAT\*(C'\fR and \f(CW\*(C`O_EXCL\*(C'\fR flags used in \f(CW\*(C`sysopen\*(C'\fR). Sometimes
informally used to refer to certain regex modifiers.
.IX Xref "flags (term)"
.IP "floating point" 4
.IX Item "floating point"
A method of storing
numbers in Xscientific notationX, such that the precision of the number is
independent of its magnitude (the decimal point XfloatsX). Perl does its
numeric work with floating-point numbers (sometimes called XfloatsX) when
it canXt get away with using \fBintegers\fR. Floating-point numbers are mere
approximations of real numbers.
.IX Xref "floating point methods methods, floating point"
.IP "flush" 4
.IX Item "flush"
The act of emptying a \fBbuffer\fR,
often before itXs full.
.IX Xref "flushing buffers buffers, flushing"
.IP "\s-1FMTEYEWTK\s0" 4
.IX Item "FMTEYEWTK"
Far More Than Everything You Ever Wanted To Know. An
exhaustive treatise on one narrow topic, something of a super\-\fB\s-1FAQ\s0\fR. See
Tom for far more.
.IX Xref "FMTEYEWTK acronym"
.IP "foldcase" 4
.IX Item "foldcase"
The casemap used in Unicode when comparing or matching
without regard to case. Comparing lower\-, title\-, or uppercase are all
unreliable due to UnicodeXs complex, one-to-many case mappings. Foldcase is
a \fBlowercase\fR variant (using a partially decomposed \fBnormalization\fR form
for certain codepoints) created specifically to resolve this.
.IX Xref "foldcase (term)"
.IP "fork" 4
.IX Item "fork"
To create a child \fBprocess\fR
identical to the parent process at its moment of conception, at least until
it gets ideas of its own. A thread with protected memory.
.IX Xref "forking processes processes, forking"
.IP "formal arguments" 4
.IX Item "formal arguments"
The generic names by which a
\&\fBsubroutine\fR knows its \fBarguments\fR. In many languages, formal arguments
are always given individual names; in Perl, the formal arguments are just
the elements of an array. The formal arguments to a Perl program are
\&\f(CW$ARGV[0]\fR, \f(CW$ARGV[1]\fR, and so on. Similarly, the formal arguments to a
Perl subroutine are \f(CW$_[0]\fR, \f(CW$_[1]\fR, and so on. You may give the
arguments individual names by assigning the values to a \f(CW\*(C`my\*(C'\fR list. See
also \fBactual arguments\fR.
.IX Xref "formal arguments arguments, formal"
.IP "format" 4
.IX Item "format"
A specification of how many spaces and digits and things
to put somewhere so that whatever youXre printing comes out nice and
pretty.
.IX Xref "formats, defined"
.IP "freely available" 4
.IX Item "freely available"
Means you donXt have to pay money to get it, but
the copyright on it may still belong to someone else (like Larry).
.IX Xref "freely available (term)"
.IP "freely redistributable" 4
.IX Item "freely redistributable"
Means youXre not in legal trouble if you
give a bootleg copy of it to your friends and we find out about it. In
fact, weXd rather you gave a copy to all your friends.
.IX Xref "freely redistributable (term)"
.IP "freeware" 4
.IX Item "freeware"
Historically, any software that you give away,
particularly if you make the source code available as well. Now often
called \fBopen source software\fR. Recently there has been a trend to use the
term in contradistinction to \fBopen source software\fR, to refer only to free
software released under the Free Software
FoundationXs \s-1GPL \s0(General Public License), but this is difficult to justify
etymologically.
.IX Xref "freeware (term) Free Software Foundation"
.IP "function" 4
.IX Item "function"
Mathematically, a mapping of each of a set of input
values to a particular output value. In computers, refers to a
\&\fBsubroutine\fR or \fBoperator\fR that returns a \fBvalue\fR. It may or may not
have input values (called \fBarguments\fR).
.IX Xref "functions, about"
.IP "funny character" 4
.IX Item "funny character"
Someone like Larry, or one of his
peculiar friends. Also refers to the strange prefixes that Perl requires as
noun markers on its variables.
.IX Xref "funny characters characters, funny"
.SS "G"
.IX Subsection "G"
.IP "garbage collection" 4
.IX Item "garbage collection"
A misnamed featureXit should be called,
Xexpecting your mother to pick up after youX. Strictly speaking, Perl
doesnXt do this, but it relies on a reference-counting mechanism to keep
things tidy. However, we rarely speak strictly and will often refer to the
reference-counting scheme as a form of garbage collection. (If itXs any
comfort, when your interpreter exits, a XrealX garbage collector runs to
make sure everything is cleaned up if youXve been messy with circular
references and such.)
.IX Xref "garbage collection, defined"
.IP "\s-1GID\s0" 4
.IX Item "GID"
Group IDXin Unix, the numeric group \s-1ID\s0
that the \fBoperating system\fR uses to identify you and members of your
\&\fBgroup\fR.
.IX Xref "GID (Group ID) Group ID (GID)"
.IP "glob" 4
.IX Item "glob"
Strictly, the shellXs \f(CW\*(C`*\*(C'\fR character, which will match
a XglobX of characters when youXre trying to generate a list of filenames.
Loosely, the act of using globs and similar symbols to do pattern matching.
See also \fBfileglob\fR and \fBtypeglob\fR.
.IX Xref "glob (* character)"
.IP "global" 4
.IX Item "global"
Something you can see from anywhere, usually used of
\&\fBvariables\fR and \fBsubroutines\fR that are visible everywhere in your
program.  In Perl, only certain special variables are truly globalXmost
variables (and all subroutines) exist only in the current \fBpackage\fR.
Global variables can be declared with \f(CW\*(C`our\*(C'\fR. See XGlobal DeclarationsX in
Camel chapter 4, XStatements and DeclarationsX.
.IX Xref "global (term)"
.IP "global destruction" 4
.IX Item "global destruction"
The \fBgarbage collection\fR of globals (and the running
of any associated object destructors) that takes place when a Perl
\&\fBinterpreter\fR is being shut down. Global destruction should not be
confused with the Apocalypse, except perhaps when it should.
.IX Xref "global destruction"
.IP "glue language" 4
.IX Item "glue language"
A language such as Perl that is good at hooking things
together that werenXt intended to be hooked together.
.IX Xref "glue language"
.IP "granularity" 4
.IX Item "granularity"
The size of the pieces youXre dealing with, mentally
speaking.
.IX Xref "granularity"
.IP "grapheme" 4
.IX Item "grapheme"
A graphene is an allotrope of carbon arranged in a
hexagonal crystal lattice one atom thick. A \fBgrapheme\fR, or more fully, a
\&\fIgrapheme cluster string\fR is a single user-visible \fBcharacter\fR, which may
in turn be several characters (\fBcodepoints\fR) long. For example, a carriage
return plus a line feed is a single grapheme but two characters, while a
\&\s-1XXX\s0 is a single grapheme but one, two, or even three characters, depending
on \fBnormalization\fR.
.IX Xref "graphemes, defined"
.IP "greedy" 4
.IX Item "greedy"
A \fBsubpattern\fR whose
\&\fBquantifier\fR wants to match as many things as possible.
.IX Xref "greedy subpatterns subpatterns, greedy"
.IP "grep" 4
.IX Item "grep"
Originally from the old Unix editor command for XGlobally
search for a Regular Expression and Print itX, now used in the general
sense of any kind of search, especially text searches. Perl has a built-in
\&\f(CW\*(C`grep\*(C'\fR function that searches a list for elements matching any given
criterion, whereas the \fBgrep\fR(1) program searches for lines matching a
\&\fBregular expression\fR in one or more files.
.IX Xref "grep function"
.IP "group" 4
.IX Item "group"
A set of users of which you are a member. In some
operating systems (like Unix), you can give certain file access permissions
to other members of your group.
.IX Xref "groups, defined"
.IP "\s-1GV\s0" 4
.IX Item "GV"
An internal Xglob valueX typedef,
holding a \fBtypeglob\fR. The \f(CW\*(C`GV\*(C'\fR type is a subclass of \fB\s-1SV\s0\fR.
.IX Xref "GV (glob value) glob value (GV)"
.SS "H"
.IX Subsection "H"
.IP "hacker" 4
.IX Item "hacker"
Someone who is brilliantly persistent in solving technical
problems, whether these involve golfing, fighting orcs, or programming.
Hacker is a neutral term, morally speaking. Good hackers are not to be
confused with evil \fBcrackers\fR or clueless \fBscript kiddies\fR. If you
confuse them, we will presume that you are either evil or clueless.
.IX Xref "hackers"
.IP "handler" 4
.IX Item "handler"
A \fBsubroutine\fR or \fBmethod\fR that Perl calls when your
program needs to respond to some internal event, such as a \fBsignal\fR, or an
encounter with an operator subject to \fBoperator overloading\fR. See also
\&\fBcallback\fR.
.IX Xref "handlers, defined"
.IP "hard reference" 4
.IX Item "hard reference"
A \fBscalar\fR \fBvalue\fR containing
the actual address of a \fBreferent\fR, such that the referentXs \fBreference\fR
count accounts for it. (Some hard references are held internally, such as
the implicit reference from one of a \fBtypeglob\fRXs variable slots to its
corresponding referent.) A hard reference is different from a \fBsymbolic
reference\fR.
.IX Xref "hard references, about references, hard"
.IP "hash" 4
.IX Item "hash"
An unordered association of \fBkey\fR/\fBvalue\fR pairs, stored such that you can easily use a string \fBkey\fR to
look up its associated data \fBvalue\fR. This glossary is like a hash, where
the word to be defined is the key and the definition is the value. A hash
is also sometimes septisyllabically called an Xassociative arrayX, which is
a pretty good reason for simply calling it a XhashX instead.
.IX Xref "hashes, about key value pairs, about"
.IP "hash table" 4
.IX Item "hash table"
A data structure used internally by Perl for implementing
associative arrays (hashes) efficiently. See also \fBbucket\fR.
.IX Xref "hash tables"
.IP "header file" 4
.IX Item "header file"
A file containing certain required
definitions that you must include XaheadX of the rest of your program to do
certain obscure operations. A C header file has a \fI.h\fR extension. Perl
doesnXt really have header files, though historically Perl has sometimes
used translated \fI.h\fR files with a \fI.ph\fR extension. See \f(CW\*(C`require\*(C'\fR in
Camel chapter 27, XFunctionsX. (Header files have been superseded by the
\&\fBmodule\fR mechanism.)
.IX Xref "header files files, header"
.IP "here document" 4
.IX Item "here document"
So called because of a similar construct in \fBshells\fR that
pretends that the \fBlines\fR following the \fBcommand\fR are a separate \fBfile\fR
to be fed to the command, up to some terminating string. In Perl, however,
itXs just a fancy form of quoting.
.IX Xref "here documents"
.IP "hexadecimal" 4
.IX Item "hexadecimal"
A number in base 16, XhexX for short. The digits for 10
through 15 are customarily represented by the letters \f(CW\*(C`a\*(C'\fR through \f(CW\*(C`f\*(C'\fR.
Hexadecimal constants in Perl start with \f(CW\*(C`0x\*(C'\fR. See also the \f(CW\*(C`hex\*(C'\fR
function in Camel chapter 27, XFunctionsX.
.IX Xref "hexadecimals"
.IP "home directory" 4
.IX Item "home directory"
The directory you are put into when
you log in. On a Unix system, the name is often placed into \f(CW$ENV{HOME}\fR
or \f(CW$ENV{LOGDIR}\fR by \fIlogin\fR, but you can also find it with
\&\f(CW\*(C`(get\*(C'\fR\f(CW\*(C`pwuid($<))[7]\*(C'\fR. (Some platforms do not have a concept of a
home directory.)
.IX Xref "home directory directories, home"
.IP "host" 4
.IX Item "host"
The computer on which a program or other data resides.
.IX Xref "host computers"
.IP "hubris" 4
.IX Item "hubris"
Excessive pride, the sort of thing for which Zeus zaps
you.  Also the quality that makes you write (and maintain) programs that
other people wonXt want to say bad things about. Hence, the third great
virtue of a programmer. See also \fBlaziness\fR and \fBimpatience\fR.
.IX Xref "hubris quality"
.IP "\s-1HV\s0" 4
.IX Item "HV"
Short for a Xhash valueX typedef, which
holds PerlXs internal representation of a hash. The \f(CW\*(C`HV\*(C'\fR type is a
subclass of \fB\s-1SV\s0\fR.
.IX Xref "HV (hash value) hash value (HV)"
.SS "I"
.IX Subsection "I"
.IP "identifier" 4
.IX Item "identifier"
A legally formed name for most anything in which a
computer program might be interested. Many languages (including Perl) allow
identifiers to start with an alphabetic character, and then contain
alphabetics and digits. Perl also allows connector punctuation like the
underscore character wherever it allows alphabetics. (Perl also has more
complicated names, like \fBqualified\fR names.)
.IX Xref "identifiers, defined"
.IP "impatience" 4
.IX Item "impatience"
The anger you feel when the computer is being lazy.
This makes you write programs that donXt just react to your needs, but
actually anticipate them. Or at least that pretend to. Hence, the second
great virtue of a programmer. See also \fBlaziness\fR and \fBhubris\fR.
.IX Xref "impatience quality"
.IP "implementation" 4
.IX Item "implementation"
How a piece of code actually goes about doing its
job. Users of the code should not count on implementation details staying
the same unless they are part of the published \fBinterface\fR.
.IX Xref "implementation (term)"
.IP "import" 4
.IX Item "import"
To gain access to symbols that are exported from another
module. See \f(CW\*(C`use\*(C'\fR in Camel chapter 27, XFunctionsX.
.IX Xref "import (term)"
.IP "increment" 4
.IX Item "increment"
To increase the value of
something by 1 (or by some other number, if so specified).
.IX Xref "incrementing values values, incrementing"
.IP "indexing" 4
.IX Item "indexing"
In olden days, the act of looking up a \fBkey\fR in an
actual index (such as a phone book). But now it's merely the act of using
any kind of key or position to find the corresponding \fBvalue\fR, even if no
index is involved. Things have degenerated to the point that PerlXs
\&\f(CW\*(C`index\*(C'\fR function merely locates the position (index) of one string in
another.
.IX Xref "indexing (term)"
.IP "indirect filehandle" 4
.IX Item "indirect filehandle"
An \fBexpression\fR that
evaluates to something that can be used as a \fBfilehandle\fR: a \fBstring\fR
(filehandle name), a \fBtypeglob\fR, a typeglob \fBreference\fR, or a low-level
\&\fB\s-1IO\s0\fR object.
.IX Xref "indirect filehandles filehandles, indirect"
.IP "indirection" 4
.IX Item "indirection"
If something in a program isnXt the value youXre
looking for but indicates where the value is, thatXs indirection. This can
be done with either \fBsymbolic references\fR or \fBhard\fR.
.IX Xref "indirection (term)"
.IP "indirect object" 4
.IX Item "indirect object"
In English grammar, a short
noun phrase between a verb and its direct object indicating the beneficiary
or recipient of the action. In Perl, \f(CW\*(C`print STDOUT "$foo\en";\*(C'\fR can be
understood as Xverb indirect-object objectX, where \f(CW\*(C`STDOUT\*(C'\fR is the
recipient of the \f(CW\*(C`print\*(C'\fR action, and \f(CW"$foo"\fR is the object being
printed.  Similarly, when invoking a \fBmethod\fR, you might place the
invocant in the dative slot between the method and its arguments:
.IX Xref "indirect objects, defined objects, indirect"
.Sp
.Vb 3
\&    $gollum = new Pathetic::Creature "Sme\*'agol";
\&    give $gollum "Fisssssh!";
\&    give $gollum "Precious!";
.Ve
.IP "indirect object slot" 4
.IX Item "indirect object slot"
The syntactic position falling between a method call
and its arguments when using the indirect object invocation syntax. (The
slot is distinguished by the absence of a comma between it and the next
argument.) \f(CW\*(C`STDERR\*(C'\fR is in the indirect object slot here:
.IX Xref "indirect object slot"
.Sp
.Vb 1
\&    print STDERR "Awake! Awake! Fear, Fire, Foes! Awake!\en";
.Ve
.IP "infix" 4
.IX Item "infix"
An \fBoperator\fR that comes in between its \fBoperands\fR,
such as multiplication in \f(CW\*(C`24 * 7\*(C'\fR.
.IX Xref "infix operators"
.IP "inheritance" 4
.IX Item "inheritance"
What you get from your ancestors, genetically or
otherwise. If you happen to be a \fBclass\fR, your ancestors are called \fBbase
classes\fR and your descendants are called \fBderived classes\fR. See \fBsingle
inheritance\fR and \fBmultiple inheritance\fR.
.IX Xref "inheritance, defined"
.IP "instance" 4
.IX Item "instance"
Short for Xan instance of a classX, meaning an \fBobject\fR
of that \fBclass\fR.
.IX Xref "instances (term)"
.IP "instance data" 4
.IX Item "instance data"
See \fBinstance variable\fR.
.IX Xref "instance data"
.IP "instance method" 4
.IX Item "instance method"
A \fBmethod\fR of an \fBobject\fR, as
opposed to a \fBclass method\fR.
.IX Xref "instance methods methods, instance"
.Sp
A \fBmethod\fR whose \fBinvocant\fR is an \fBobject\fR, not a \fBpackage\fR name. Every
object of a class shares all the methods of that class, so an instance
method applies to all instances of the class, rather than applying to a
particular instance. Also see \fBclass method\fR.
.IP "instance variable" 4
.IX Item "instance variable"
An \fBattribute\fR of an \fBobject\fR; data stored with the particular object rather than with the class
as a whole.
.IX Xref "instance variables, defined variables, instance"
.IP "integer" 4
.IX Item "integer"
A number with no fractional (decimal) part. A counting
number, like 1, 2, 3, and so on, but including 0 and the negatives.
.IX Xref "integers (term)"
.IP "interface" 4
.IX Item "interface"
The services a piece of code promises to provide
forever, in contrast to its \fBimplementation\fR, which it should feel free to
change whenever it likes.
.IX Xref "interfaces (term)"
.IP "interpolation" 4
.IX Item "interpolation"
The insertion of a scalar or list value somewhere
in the middle of another value, such that it appears to have been there all
along. In Perl, variable interpolation happens in double-quoted strings and
patterns, and list interpolation occurs when constructing the list of
values to pass to a list operator or other such construct that takes a
\&\fI\f(CI\*(C`LIST\*(C'\fI\fR.
.IX Xref "interpolation, defined"
.IP "interpreter" 4
.IX Item "interpreter"
Strictly speaking, a program that reads a second
program and does what the second program says directly without turning the
program into a different form first, which is what \fBcompilers\fR do. Perl is
not an interpreter by this definition, because it contains a kind of
compiler that takes a program and turns it into a more executable form
(\fBsyntax trees\fR) within the \fIperl\fR process itself, which the Perl
\&\fBruntime\fR system then interprets.
.IX Xref "interpreters, defined"
.IP "invocant" 4
.IX Item "invocant"
The agent on whose behalf a \fBmethod\fR is invoked. In a
\&\fBclass\fR method, the invocant is a package name. In an \fBinstance\fR method,
the invocant is an object reference.
.IX Xref "invocants, defined"
.IP "invocation" 4
.IX Item "invocation"
The act of calling up a deity, daemon, program,
method, subroutine, or function to get it to do what you think itXs
supposed to do.  We usually XcallX subroutines but XinvokeX methods, since
it sounds cooler.
.IX Xref "invocation, method"
.IP "I/O" 4
.IX Item "I/O"
Input from, or output to, a \fBfile\fR or \fBdevice\fR.
.IX Xref "I O (Input Output), defined Input Output (I O), defined"
.IP "\s-1IO\s0" 4
.IX Item "IO"
An internal I/O object. Can also mean \fBindirect object\fR.
.IP "I/O layer" 4
.IX Item "I/O layer"
One of the filters between the data and what you get as input
or what you end up with as output.
.IX Xref "I O layer"
.IP "\s-1IPA\s0" 4
.IX Item "IPA"
India Pale Ale. Also the International Phonetic Alphabet, the
standard alphabet used for phonetic notation worldwide. Draws heavily on
Unicode, including many combining characters.
.IX Xref "International Phonetic Alphabet (IPA) IPA (International Phonetic Alphabet)"
.IP "\s-1IP\s0" 4
.IX Item "IP"
Internet Protocol, or
Intellectual
Property.
.IX Xref "Internet Protocol (IP) IP (Internet Protocol) IP (Intellectual Property) Intellectual Property (IP)"
.IP "\s-1IPC\s0" 4
.IX Item "IPC"
Interprocess Communication.
.IX Xref "Interprocess Communication IPC (Interprocess Communication), about communication"
.IP "is-a" 4
.IX Item "is-a"
A relationship between two \fBobjects\fR in which one
object is considered to be a more specific version of the other, generic
object: \s-1XA\s0 camel is a mammal.X Since the generic object really only exists
in a Platonic sense, we usually add a little abstraction to the notion of
objects and think of the relationship as being between a generic \fBbase
class\fR and a specific \fBderived class\fR. Oddly enough, Platonic classes
donXt always have Platonic relationshipsXsee \fBinheritance\fR.
.IX Xref "isXa relationship"
.IP "iteration" 4
.IX Item "iteration"
Doing something repeatedly.
.IX Xref "iteration"
.IP "iterator" 4
.IX Item "iterator"
A special programming gizmo that keeps track of where you are
in something that youXre trying to iterate over. The \f(CW\*(C`foreach\*(C'\fR loop in
Perl contains an iterator; so does a hash, allowing you to \f(CW\*(C`each\*(C'\fR through
it.
.IX Xref "iterators"
.IP "\s-1IV\s0" 4
.IX Item "IV"
The integer four, not to be
confused with six, TomXs favorite editor. \s-1IV\s0 also means an internal Integer
Value of the type a \fBscalar\fR can hold, not to be confused with an \fB\s-1NV\s0\fR.
.IX Xref "IV (Integer Value) Integer Value (IV)"
.SS "J"
.IX Subsection "J"
.IP "\s-1JAPH\s0" 4
.IX Item "JAPH"
XJust Another Perl HackerX, a clever but cryptic bit of Perl
code that, when executed, evaluates to that string. Often used to
illustrate a particular Perl feature, and something of an ongoing
Obfuscated Perl Contest seen in \s-1USENET\s0 signatures.
.IX Xref "JAPH acronym"
.SS "K"
.IX Subsection "K"
.IP "key" 4
.IX Item "key"
The string index to a \fBhash\fR, used to look up the \fBvalue\fR
associated with that key.
.IX Xref "keys, defined"
.IP "keyword" 4
.IX Item "keyword"
See \fBreserved words\fR.
.SS "L"
.IX Subsection "L"
.IP "label" 4
.IX Item "label"
A name you give to a \fBstatement\fR so that you can talk
about that statement elsewhere in the program.
.IX Xref "labels, defined"
.IP "laziness" 4
.IX Item "laziness"
The quality that makes you go to great effort to reduce
overall energy expenditure. It makes you write labor-saving programs that
other people will find useful, and then document what you wrote so you
donXt have to answer so many questions about it. Hence, the first great
virtue of a programmer. Also hence, this book. See also \fBimpatience\fR and
\&\fBhubris\fR.
.IX Xref "laziness quality"
.IP "leftmost longest" 4
.IX Item "leftmost longest"
The preference of the \fBregular expression\fR engine to match the
leftmost occurrence of a \fBpattern\fR, then given a position at which a match
will occur, the preference for the longest match (presuming the use of a
\&\fBgreedy\fR quantifier). See Camel chapter 5, XPattern MatchingX for \fImuch\fR
more on this subject.
.IX Xref "leftmost longest preference regular expressions, leftmost longest preference"
.IP "left shift" 4
.IX Item "left shift"
A \fBbit shift\fR that multiplies the
number by some power of 2.
.IX Xref "left shift (<<) bit operator bitXshift operators, left shift << (left shift) bit operator"
.IP "lexeme" 4
.IX Item "lexeme"
Fancy term for a \fBtoken\fR.
.IX Xref "lexeme (token)"
.IP "lexer" 4
.IX Item "lexer"
Fancy term for a \fBtokener\fR.
.IX Xref "lexer (tokener)"
.IP "lexical analysis" 4
.IX Item "lexical analysis"
Fancy term for \fBtokenizing\fR.
.IX Xref "lexical analysis"
.IP "lexical scoping" 4
.IX Item "lexical scoping"
Looking at your \fIOxford English
Dictionary\fR through a microscope. (Also known as \fBstatic scoping\fR, because
dictionaries donXt change very fast.) Similarly, looking at variables
stored in a private dictionary (namespace) for each scope, which are
visible only from their point of declaration down to the end of the lexical scope in which they are declared. XSyn.
\&\fBstatic scoping\fR. XAnt. \fBdynamic scoping\fR.
.IX Xref "lexical scopes, defined scopes static scopes scopes, static"
.IP "lexical variable" 4
.IX Item "lexical variable"
A \fBvariable\fR subject to
\&\fBlexical scoping\fR, declared by \f(CW\*(C`my\*(C'\fR. Often just called a XlexicalX. (The
\&\f(CW\*(C`our\*(C'\fR declaration declares a lexically scoped name for a global variable,
which is not itself a lexical variable.)
.IX Xref "lexical variables, about variables, lexical"
.IP "library" 4
.IX Item "library"
Generally, a collection of procedures. In ancient
days, referred to a collection of subroutines in a \fI.pl\fR file. In modern
times, refers more often to the entire collection of Perl \fBmodules\fR on
your system.
.IX Xref "libraries, defined"
.IP "\s-1LIFO\s0" 4
.IX Item "LIFO"
Last In, First Out. See also \fB\s-1FIFO\s0\fR. A \s-1LIFO\s0 is usually called a
\&\fBstack\fR.
.IX Xref "Last In, First Out (LIFO) LIFO (Last In, First Out) stacks, defined"
.IP "line" 4
.IX Item "line"
In Unix, a sequence of zero or more nonnewline characters
terminated with a \fBnewline\fR character. On non-Unix machines, this is
emulated by the C library even if the underlying \fBoperating system\fR has
different ideas.
.IX Xref "line (term)"
.IP "linebreak" 4
.IX Item "linebreak"
A \fBgrapheme\fR consisting of either a carriage return followed
by a line feed or any character with the Unicode Vertical Space \fBcharacter
property\fR.
.IX Xref "linebreaks"
.IP "line buffering" 4
.IX Item "line buffering"
Used by a \fBstandard I/O\fR output stream that
flushes its \fBbuffer\fR after every \fBnewline\fR. Many standard I/O libraries
automatically set up line buffering on output that is going to the terminal.
.IX Xref "line buffering buffering, line"
.IP "line number" 4
.IX Item "line number"
The number of lines read previous to this one, plus 1. Perl
keeps a separate line number for each source or input file it opens. The
current source fileXs line number is represented by \f(CW\*(C`_\|_LINE_\|_\*(C'\fR. The
current input line number (for the file that was most recently read via
\&\f(CW\*(C`<FH>\*(C'\fR) is represented by the \f(CW$.\fR (\f(CW$INPUT_LINE_NUMBER\fR)
variable. Many error messages report both values, if available.
.IX Xref "line number"
.IP "link" 4
.IX Item "link"
Used as a noun, a name in a \fBdirectory\fR that represents a
\&\fBfile\fR. A given file can have multiple links to it. ItXs like having the
same phone number listed in the phone directory under different names. As a
verb, to resolve a partially \fBcompiled\fR fileXs unresolved symbols into a
(nearly) executable image. Linking can generally be static or dynamic,
which has nothing to do with static or dynamic scoping.
.IX Xref "links, defined"
.IP "\s-1LIST\s0" 4
.IX Item "LIST"
A syntactic construct representing a
comma\- separated list of expressions, evaluated to produce a \fBlist value\fR.
Each \fBexpression\fR in a \fI\f(CI\*(C`LIST\*(C'\fI\fR is evaluated in \fBlist context\fR and
interpolated into the list value.
.IX Xref "LIST construct constructs, LIST"
.IP "list" 4
.IX Item "list"
An ordered set of scalar values.
.IX Xref "lists, defined"
.IP "list context" 4
.IX Item "list context"
The situation in which an \fBexpression\fR is
expected by its surroundings (the code calling it) to return a list of
values rather than a single value. Functions that want a \fI\f(CI\*(C`LIST\*(C'\fI\fR of
arguments tell those arguments that they should produce a list value. See
also \fBcontext\fR.
.IX Xref "list context context, list"
.IP "list operator" 4
.IX Item "list operator"
An \fBoperator\fR that does something with a list of
values, such as \f(CW\*(C`join\*(C'\fR or \f(CW\*(C`grep\*(C'\fR. Usually used for named built-in
operators (such as \f(CW\*(C`print\*(C'\fR, \f(CW\*(C`unlink\*(C'\fR, and \f(CW\*(C`system\*(C'\fR) that do not require
parentheses around their \fBargument\fR list.
.IX Xref "list operators, about"
.IP "list value" 4
.IX Item "list value"
An unnamed list of temporary scalar
values that may be passed around within a program from any list-generating
function to any function or construct that provides a \fBlist context\fR.
.IX Xref "list values, about values, list"
.IP "literal" 4
.IX Item "literal"
A token in a programming language, such as a number or
\&\fBstring\fR, that gives you an actual \fBvalue\fR instead of merely representing
possible values as a \fBvariable\fR does.
.IX Xref "literals, defined"
.IP "little-endian" 4
.IX Item "little-endian"
From Swift: someone
who eats eggs little end first. Also used of computers that store the least
significant \fBbyte\fR of a word at a lower byte address than the most
significant byte. Often considered superior to big-endian machines. See
also \fBbig-endian\fR.
.IX Xref "littleXendian, defined endianness, littleXendian"
.IP "local" 4
.IX Item "local"
Not meaning the same thing everywhere. A global
variable in Perl can be localized inside a \fBdynamic scope\fR via the
\&\f(CW\*(C`local\*(C'\fR operator.
.IX Xref "local operator, about"
.IP "logical operator" 4
.IX Item "logical operator"
Symbols representing the concepts XandX, XorX,
XxorX, and XnotX.
.IX Xref "logical operators, about"
.IP "lookahead" 4
.IX Item "lookahead"
An \fBassertion\fR that peeks at the string to the right of the current match location.
.IX Xref "lookahead assertions assertions (in regexes), lookahead"
.IP "lookbehind" 4
.IX Item "lookbehind"
An \fBassertion\fR that peeks at the string to the left of the current match
location.
.IX Xref "lookbehind assertions assertions (in regexes), lookbehind"
.IP "loop" 4
.IX Item "loop"
A construct that
performs something repeatedly, like a roller coaster.
.IX Xref "loop constructs and statements, about constructs, loop"
.IP "loop control statement" 4
.IX Item "loop control statement"
Any statement within the body of a loop that can
make a loop prematurely stop looping or skip an \fBiteration\fR. Generally,
you shouldnXt try this on roller coasters.
.IX Xref "statements, loop control"
.IP "loop label" 4
.IX Item "loop label"
A kind of key or name attached to a loop (or
roller coaster) so that loop control statements can talk about which loop
they want to control.
.IX Xref "loop labels labels, loop"
.IP "lowercase" 4
.IX Item "lowercase"
In Unicode, not just
characters with the General Category of Lowercase Letter, but any character
with the Lowercase property, including Modifier Letters, Letter Numbers,
some Other Symbols, and one Combining Mark.
.IX Xref "lowercase characters characters, lowercase"
.IP "lvaluable" 4
.IX Item "lvaluable"
Able to serve as an \fBlvalue\fR.
.IX Xref "lvaluable function functions, lvaluable"
.IP "lvalue" 4
.IX Item "lvalue"
Term used by language lawyers for a
storage location you can assign a new \fBvalue\fR to, such as a \fBvariable\fR or
an element of an \fBarray\fR. The XlX is short for XleftX, as in the left side
of an assignment, a typical place for lvalues. An \fBlvaluable\fR function or
expression is one to which a value may be assigned, as in \f(CW\*(C`pos($x) = 10\*(C'\fR.
.IX Xref "lvalue (term) values, lvalue"
.IP "lvalue modifier" 4
.IX Item "lvalue modifier"
An adjectival pseudofunction that
warps the meaning of an \fBlvalue\fR in some declarative fashion. Currently
there are three lvalue modifiers: \f(CW\*(C`my\*(C'\fR, \f(CW\*(C`our\*(C'\fR, and \f(CW\*(C`local\*(C'\fR.
.IX Xref "lvalue modifier modifiers, lvalue"
.SS "M"
.IX Subsection "M"
.IP "magic" 4
.IX Item "magic"
Technically speaking, any extra semantics attached to a
variable such as \f(CW$!\fR, \f(CW$0\fR, \f(CW%ENV\fR, or \f(CW%SIG\fR, or to any tied
variable.  Magical things happen when you diddle those variables.
.IX Xref "magic (term)"
.IP "magical increment" 4
.IX Item "magical increment"
An \fBincrement\fR operator that knows how to
bump up \s-1ASCII\s0 alphabetics as well as numbers.
.IX Xref "magical increment operator"
.IP "magical variables" 4
.IX Item "magical variables"
Special variables that have side
effects when you access them or assign to them. For example, in Perl,
changing elements of the \f(CW%ENV\fR array also changes the corresponding
environment variables that subprocesses will use. Reading the \f(CW$!\fR
variable gives you the current system error number or message.
.IX Xref "magical variables variables, magical"
.IP "Makefile" 4
.IX Item "Makefile"
A file that controls the compilation of a program. Perl programs
donXt usually need a \fBMakefile\fR because the Perl compiler has plenty of
self-control.
.IX Xref "Makefile"
.IP "man" 4
.IX Item "man"
The Unix program that displays online documentation
(manual pages) for you.
.IX Xref "man program (Unix)"
.IP "manpage" 4
.IX Item "manpage"
A XpageX from the manuals, typically accessed via the
\&\fIman\fR(1) command. A manpage contains a \s-1SYNOPSIS,\s0 a \s-1DESCRIPTION,\s0 a list of
\&\s-1BUGS,\s0 and so on, and is typically longer than a page. There are manpages
documenting \fBcommands\fR, \fBsyscalls\fR, \fBlibrary\fR \fBfunctions\fR, \fBdevices\fR,
\&\fBprotocols\fR, \fBfiles\fR, and such. In this book, we call any piece of
standard Perl documentation (like perlop or perldelta) a manpage, no
matter what format itXs installed in on your system.
.IX Xref "manpages, defined"
.IP "matching" 4
.IX Item "matching"
See \fBpattern matching\fR.
.IX Xref "matching"
.IP "member data" 4
.IX Item "member data"
See \fBinstance variable\fR.
.IX Xref "member data"
.IP "memory" 4
.IX Item "memory"
This always means your main memory, not your disk.
Clouding the issue is the fact that your machine may implement
\&\fBvirtual\fR memory; that is, it will pretend that it has more memory than
it really does, and itXll use disk space to hold inactive bits. This can
make it seem like you have a little more memory than you really do, but
itXs not a substitute for real memory. The best thing that can be said
about virtual memory is that it lets your performance degrade gradually
rather than suddenly when you run out of real memory. But your program
can die when you run out of virtual memory, tooXif you havenXt thrashed
your disk to death first.
.IX Xref "memory, defined"
.IP "metacharacter" 4
.IX Item "metacharacter"
A \fBcharacter\fR that is \fInot\fR supposed to be treated normally. Which characters
are to be treated specially as metacharacters varies greatly from context to
context. Your \fBshell\fR will have certain metacharacters, double-quoted Perl
\&\fBstrings\fR have other metacharacters,
and \fBregular expression\fR patterns have all the double-quote metacharacters plus
some extra ones of their own.
.IX Xref "metacharacters, about characters, regex metacharacters regular expressions, metacharacters and"
.IP "metasymbol" 4
.IX Item "metasymbol"
Something weXd call a
\&\fBmetacharacter\fR except that itXs a sequence of more than one character.
Generally, the first character in the sequence must be a true metacharacter
to get the other characters in the metasymbol to misbehave along with it.
.IX Xref "metasymbols, about escape sequences"
.IP "method" 4
.IX Item "method"
A kind of action that an \fBobject\fR can take if you tell
it to. See Camel chapter 12, XObjectsX.
.IX Xref "methods, defined"
.IP "method resolution order" 4
.IX Item "method resolution order"
The path Perl takes through \f(CW@INC\fR. By default, this is a double depth first
search, once looking for defined methods and once for \f(CW\*(C`AUTOLOAD\*(C'\fR. However,
Perl lets you configure this with \f(CW\*(C`mro\*(C'\fR.
.IX Xref "method resolution order (mro) mro (method resolution order)"
.IP "minicpan" 4
.IX Item "minicpan"
A \s-1CPAN \s0mirror that includes just the latest versions for each
distribution, probably created with \f(CW\*(C`CPAN::Mini\*(C'\fR. See
Camel chapter 19, \s-1XCPANX.\s0
.IX Xref "minicpan, defined CPAN (Comprehensive Perl Archive Network), minicpan and CPAN::Mini module"
.IP "minimalism" 4
.IX Item "minimalism"
The belief that Xsmall is beautifulX. Paradoxically, if you
say something in a small language, it turns out big, and if you say it in a
big language, it turns out small. Go figure.
.IX Xref "minimalism"
.IP "mode" 4
.IX Item "mode"
In the context of the \fIstat\fR(2) syscall, refers to the field
holding the \fBpermission bits\fR and the type of the \fBfile\fR.
.IX Xref "mode"
.IP "modifier" 4
.IX Item "modifier"
See \fBstatement modifier\fR, \fBregular expression\fR, and
\&\fBlvalue\fR, not necessarily in that order.
.IX Xref "modifiers, defined"
.IP "module" 4
.IX Item "module"
A \fBfile\fR that defines a \fBpackage\fR of (almost) the same
name, which can either \fBexport\fR symbols or function as an \fBobject\fR class.
(A moduleXs main \fI.pm\fR file may also load in other files in support of the
module.) See the \f(CW\*(C`use\*(C'\fR built-in.
.IX Xref "modules, defined"
.IP "modulus" 4
.IX Item "modulus"
An integer divisor when
youXre interested in the remainder instead of the quotient.
.IX Xref "modulus (%) operator % (modulus) operator"
.IP "mojibake" 4
.IX Item "mojibake"
When you speak one language and the computer thinks youXre
speaking another. YouXll see odd translations when you send \s-1UTFX8,\s0 for
instance, but the computer thinks you sent Latin\-1, showing all sorts of
weird characters instead. The term is written XXXXXXin Japanese and
means Xcharacter rotX, an apt description. Pronounced [\f(CW\*(C`modXibake\*(C'\fR] in
standard \fB\s-1IPA\s0\fR phonetics, or approximately Xmoh-jee-bah-kehX.
.IX Xref "mojibake"
.IP "monger" 4
.IX Item "monger"
Short for one member of \fBPerl mongers\fR, a
purveyor of Perl.
.IX Xref "mongers, Perl Perl mongers"
.IP "mortal" 4
.IX Item "mortal"
A temporary value scheduled to die when the
current statement finishes.
.IX Xref "mortal value values, mortal"
.IP "mro" 4
.IX Item "mro"
See \fBmethod resolution order\fR.
.IP "multidimensional array" 4
.IX Item "multidimensional array"
An array with multiple
subscripts for finding a single element. Perl implements these using
\&\fBreferences\fRXsee Camel chapter 9, XData StructuresX.
.IX Xref "multidimensional arrays arrays, multidimensional"
.IP "multiple inheritance" 4
.IX Item "multiple inheritance"
The features you got from
your mother and father, mixed together unpredictably. (See also
\&\fBinheritance\fR and \fBsingle inheritance\fR.) In computer languages (including
Perl), it is the notion that a given class may have multiple direct
ancestors or \fBbase classes\fR.
.IX Xref "multiple inheritance inheritance, multiple"
.SS "N"
.IX Subsection "N"
.IP "named pipe" 4
.IX Item "named pipe"
A \fBpipe\fR with a name embedded in the
\&\fBfilesystem\fR so that it can be accessed by two unrelated \fBprocesses\fR.
.IX Xref "named pipes pipes, names"
.IP "namespace" 4
.IX Item "namespace"
A domain of names. You neednXt worry about whether the
names in one such domain have been used in another. See \fBpackage\fR.
.IX Xref "namespaces, about"
.IP "NaN" 4
.IX Item "NaN"
Not a number. The value Perl uses
for certain invalid or inexpressible floating-point operations.
.IX Xref "NaN (not a number) not a number (NaN)"
.IP "network address" 4
.IX Item "network address"
The most important attribute of a socket, like your
telephoneXs telephone number. Typically an \s-1IP\s0 address. See also \fBport\fR.
.IX Xref "network address"
.IP "newline" 4
.IX Item "newline"
A single character that
represents the end of a line, with the \s-1ASCII\s0 value of 012 octal under Unix
(but 015 on a Mac), and represented by \f(CW\*(C`\en\*(C'\fR in Perl strings. For Windows
machines writing text files, and for certain physical devices like
terminals, the single newline gets automatically translated by your C
library into a line feed and a carriage return, but normally, no
translation is done.
.IX Xref "newline character characters, newline"
.IP "\s-1NFS\s0" 4
.IX Item "NFS"
Network File System, which allows you to mount a remote filesystem as if it were local.
.IX Xref "NFS (Network File System) Network File System (NFS)"
.IP "normalization" 4
.IX Item "normalization"
Converting a text string into an alternate but equivalent
\&\fBcanonical\fR (or compatible) representation that can then be compared for
equivalence. Unicode recognizes four different normalization forms: \s-1NFD,
NFC, NFKD,\s0 and \s-1NFKC.\s0
.IX Xref "normalization"
.IP "null character" 4
.IX Item "null character"
A character with the numeric value of
zero. ItXs used by C to terminate strings, but Perl allows strings to
contain a null.
.IX Xref "null character characters, null"
.IP "null list" 4
.IX Item "null list"
A \fBlist value\fR with zero elements, represented
in Perl by \f(CW\*(C`()\*(C'\fR.
.IX Xref "null lists lists, null"
.IP "null string" 4
.IX Item "null string"
A \fBstring\fR containing no characters, not to
be confused with a string containing a \fBnull character\fR, which has a
positive length and is \fBtrue\fR.
.IX Xref "null strings strings, null"
.IP "numeric context" 4
.IX Item "numeric context"
The situation in which an expression
is expected by its surroundings (the code calling it) to return a number.
See also \fBcontext\fR and \fBstring context\fR.
.IX Xref "numeric context context, numeric"
.IP "numification" 4
.IX Item "numification"
(Sometimes spelled \fInummification\fR and \fInummify\fR.) Perl lingo
for implicit conversion into a number; the related verb is \fInumify\fR.
\&\fINumification\fR is intended to rhyme with \fImummification\fR, and \fInumify\fR with
\&\fImummify\fR. It is unrelated to English \fInumen\fR, \fInumina\fR, \fInuminous\fR. We
originally forgot the extra \fIm\fR a long time ago, and some people got used to
our funny spelling, and so just as with \f(CW\*(C`HTTP_REFERER\*(C'\fRXs own missing letter,
our weird spelling has stuck around.
.IX Xref "numification"
.IP "\s-1NV\s0" 4
.IX Item "NV"
Short for Nevada, no part of
which will ever be confused with civilization. \s-1NV\s0 also means an internal
floating\- point Numeric Value of the type a \fBscalar\fR can hold, not to be
confused with an \fB\s-1IV\s0\fR.
.IX Xref "Numeric Value (NV) NV (Numeric Value)"
.IP "nybble" 4
.IX Item "nybble"
Half a \fBbyte\fR, equivalent to one \fBhexadecimal\fR digit, and worth
four \fBbits\fR.
.IX Xref "nybble"
.SS "O"
.IX Subsection "O"
.IP "object" 4
.IX Item "object"
An \fBinstance\fR of a \fBclass\fR. Something that XknowsX
what user-defined type (class) it is, and what it can do because of what
class it is. Your program can request an object to do things, but the
object gets to decide whether it wants to do them or not. Some objects are
more accommodating than others.
.IX Xref "objects, defined"
.IP "octal" 4
.IX Item "octal"
A number in base 8. Only the digits 0 through 7 are allowed. Octal
constants in Perl start with 0, as in 013. See also the \f(CW\*(C`oct\*(C'\fR function.
.IX Xref "octals"
.IP "offset" 4
.IX Item "offset"
How many things you have to skip
over when moving from the beginning of a string or array to a specific
position within it. Thus, the minimum offset is zero, not one, because you
donXt skip anything to get to the first item.
.IX Xref "offsets in strings strings, offsets in"
.IP "one-liner" 4
.IX Item "one-liner"
An entire computer program crammed into one line of
text.
.IX Xref "oneXliner programs"
.IP "open source software" 4
.IX Item "open source software"
Programs for which the source code is freely
available and freely redistributable, with no commercial strings attached.
For a more detailed definition, see <http://www.opensource.org/osd.html>.
.IX Xref "open source software"
.IP "operand" 4
.IX Item "operand"
An \fBexpression\fR that yields a \fBvalue\fR that an
\&\fBoperator\fR operates on. See also \fBprecedence\fR.
.IX Xref "operands (term)"
.IP "operating system" 4
.IX Item "operating system"
A special program that runs on the bare
machine and hides the gory details of managing \fBprocesses\fR and \fBdevices\fR.
Usually used in a looser sense to indicate a particular culture of
programming. The loose sense can be used at varying levels of specificity.
At one extreme, you might say that all versions of Unix and Unix-lookalikes
are the same operating system (upsetting many people, especially lawyers
and other advocates). At the other extreme, you could say this particular
version of this particular vendorXs operating system is different from any
other version of this or any other vendorXs operating system. Perl is much
more portable across operating systems than many other languages. See also
\&\fBarchitecture\fR and \fBplatform\fR.
.IX Xref "operating systems, defined"
.IP "operator" 4
.IX Item "operator"
A gizmo that transforms some number of input values to
some number of output values, often built into a language with a special
syntax or symbol. A given operator may have specific expectations about
what \fBtypes\fR of data you give as its arguments (\fBoperands\fR) and what type
of data you want back from it.
.IX Xref "operators, about"
.IP "operator overloading" 4
.IX Item "operator overloading"
A kind of
\&\fBoverloading\fR that you can do on built-in \fBoperators\fR to make them work
on \fBobjects\fR as if the objects were ordinary scalar values, but with the
actual semantics supplied by the object class. This is set up with the
overload \fBpragma\fRXsee Camel chapter 13, XOverloadingX.
.IX Xref "operator overloading, about overloading, operator"
.IP "options" 4
.IX Item "options"
See either \fBswitches\fR or \fBregular expression modifiers\fR.
.IX Xref "options"
.IP "ordinal" 4
.IX Item "ordinal"
An abstract characterXs integer value. Same thing as
\&\fBcodepoint\fR.
.IX Xref "ordinals (term)"
.IP "overloading" 4
.IX Item "overloading"
Giving additional meanings to a symbol or construct.
Actually, all languages do overloading to one extent or another, since
people are good at figuring out things from \fBcontext\fR.
.IX Xref "overloading, defined"
.IP "overriding" 4
.IX Item "overriding"
Hiding or invalidating some other definition of the
same name. (Not to be confused with \fBoverloading\fR, which adds definitions
that must be disambiguated some other way.) To confuse the issue further,
we use the word with two overloaded definitions: to describe how you can
define your own \fBsubroutine\fR to hide a built-in \fBfunction\fR of the same
name (see the section XOverriding Built-in FunctionsX in Camel chapter 11,
XModulesX), and to describe how you can define a replacement \fBmethod\fR in a
\&\fBderived class\fR to hide a \fBbase class\fRXs method of the same name (see
Camel chapter 12, XObjectsX).
.IX Xref "overriding, defined"
.IP "owner" 4
.IX Item "owner"
The one user (apart from the
superuser) who has absolute control over a \fBfile\fR. A file may also have a
\&\fBgroup\fR of users who may exercise joint ownership if the real owner
permits it. See \fBpermission bits\fR.
.IX Xref "ownership, file files, ownership of"
.SS "P"
.IX Subsection "P"
.IP "package" 4
.IX Item "package"
A \fBnamespace\fR for global \fBvariables\fR, \fBsubroutines\fR,
and the like, such that they can be kept separate from like-named
\&\fBsymbols\fR in other namespaces. In a sense, only the package is global,
since the symbols in the packageXs symbol table are only accessible from
code \fBcompiled\fR outside the package by naming the package. But in another
sense, all package symbols are also globalsXtheyXre just well-organized
globals.
.IX Xref "packages, defined"
.IP "pad" 4
.IX Item "pad"
Short for \fBscratchpad\fR.
.IX Xref "pads (scratchpads)"
.IP "parameter" 4
.IX Item "parameter"
See \fBargument\fR.
.IX Xref "parameters"
.IP "parent class" 4
.IX Item "parent class"
See \fBbase class\fR.
.IX Xref "parent classes classes, parent"
.IP "parse tree" 4
.IX Item "parse tree"
See \fBsyntax tree\fR.
.IX Xref "parse tree"
.IP "parsing" 4
.IX Item "parsing"
The subtle but sometimes brutal art of attempting to turn
your possibly malformed program into a valid \fBsyntax tree\fR.
.IX Xref "parsing, about"
.IP "patch" 4
.IX Item "patch"
To fix by applying one, as it were. In the realm of hackerdom, a
listing of the differences between two versions of a program as might be
applied by the \fBpatch\fR(1) program when you want to fix a bug or upgrade
your old version.
.IX Xref "patches"
.IP "\s-1PATH\s0" 4
.IX Item "PATH"
The list of
\&\fBdirectories\fR the system searches to find a program you want to
\&\fBexecute\fR.  The list is stored as one of your \fBenvironment variables\fR,
accessible in Perl as \f(CW$ENV{PATH}\fR.
.IX Xref "PATH environment variable variables, environment"
.IP "pathname" 4
.IX Item "pathname"
A fully qualified filename such as \fI/usr/bin/perl\fR. Sometimes
confused with \f(CW\*(C`PATH\*(C'\fR.
.IX Xref "pathname"
.IP "pattern" 4
.IX Item "pattern"
A template used in \fBpattern matching\fR.
.IX Xref "patterns, defined"
.IP "pattern matching" 4
.IX Item "pattern matching"
Taking a pattern, usually a \fBregular
expression\fR, and trying the pattern various ways on a string to see whether
thereXs any way to make it fit. Often used to pick interesting tidbits out
of a file.
.IX Xref "pattern matching, about"
.IP "\s-1PAUSE\s0" 4
.IX Item "PAUSE"
The Perl Authors Upload SErver (<http://pause.perl.org>), the gateway
for \fBmodules\fR on their way to \fB\s-1CPAN\s0\fR.
.IX Xref "Perl Authors Upload SErver (PAUSE) PAUSE (Perl Authors Upload SErver)"
.IP "Perl mongers" 4
.IX Item "Perl mongers"
A Perl user group, taking the form of its
name from the New York Perl mongers, the first Perl user group. Find one
near you at <http://www.pm.org>.
.IX Xref "Perl mongers mongers, Perl"
.IP "permission bits" 4
.IX Item "permission bits"
Bits that the \fBowner\fR of a file sets
or unsets to allow or disallow access to other people. These flag bits are
part of the \fBmode\fR word returned by the \f(CW\*(C`stat\*(C'\fR built-in when you ask
about a file. On Unix systems, you can check the \fIls\fR(1) manpage for more
information.
.IX Xref "permission bits bits, permission"
.IP "Pern" 4
.IX Item "Pern"
What you get when you do \f(CW\*(C`Perl++\*(C'\fR twice. Doing it only once
will curl your hair. You have to increment it eight times to shampoo your
hair. Lather, rinse, iterate.
.IX Xref "Pern (term)"
.IP "pipe" 4
.IX Item "pipe"
A direct \fBconnection\fR that carries the output of one
\&\fBprocess\fR to the input of another without an intermediate temporary file.
Once the pipe is set up, the two processes in question can read and write
as if they were talking to a normal file, with some caveats.
.IX Xref "pipes, defined"
.IP "pipeline" 4
.IX Item "pipeline"
A series of \fBprocesses\fR all in a row, linked by \fBpipes\fR, where
each passes its output stream to the next.
.IX Xref "pipeline"
.IP "platform" 4
.IX Item "platform"
The entire hardware and software context in which a
program runs. A program written in a platform-dependent language might
break if you change any of the following: machine, operating system,
libraries, compiler, or system configuration. The \fIperl\fR interpreter has
to be \fBcompiled\fR differently for each platform because it is implemented
in C, but programs written in the Perl language are largely platform
independent.
.IX Xref "platforms, defined"
.IP "pod" 4
.IX Item "pod"
The markup
used to embed documentation into your Perl code. Pod stands for XPlain old
documentationX. See Camel chapter 23, XPlain Old DocumentationX.
.IX Xref "pod (plain old documentation), about plain old documentation"
.IP "pod command" 4
.IX Item "pod command"
A sequence, such as \f(CW\*(C`=head1\*(C'\fR, that denotes
the start of a \fBpod\fR section.
.IX Xref "pod commands commands, pod"
.IP "pointer" 4
.IX Item "pointer"
A \fBvariable\fR in a language like C that contains the exact
memory location of some other item. Perl handles pointers internally so you
donXt have to worry about them. Instead, you just use symbolic pointers in
the form of \fBkeys\fR and \fBvariable\fR names, or \fBhard references\fR, which
arenXt pointers (but act like pointers and do in fact contain pointers).
.IX Xref "pointers"
.IP "polymorphism" 4
.IX Item "polymorphism"
The notion that you can tell an \fBobject\fR to do something
generic, and the object will interpret the command in different ways
depending on its type. [< Greek \s-1XXXX\- + XXXXX,\s0 many forms.]
.IX Xref "polymorphism"
.IP "port" 4
.IX Item "port"
The part of the address of a \s-1TCP\s0 or \s-1UDP\s0 socket that directs
packets to the correct process after finding the right machine, something
like the phone extension you give when you reach the company operator. Also
the result of converting code to run on a different platform than
originally intended, or the verb denoting this conversion.
.IX Xref "ports (term)"
.IP "portable" 4
.IX Item "portable"
Once upon a time, C code compilable under both \s-1BSD\s0 and
SysV. In general, code that can be easily converted to run on another
\&\fBplatform\fR, where XeasilyX can be defined however you like, and usually
is.  Anything may be considered portable if you try hard enough, such as a
mobile home or London Bridge.
.IX Xref "portability, about"
.IP "porter" 4
.IX Item "porter"
Someone who XcarriesX software from one \fBplatform\fR to another.
Porting programs written in platform-dependent languages such as C can be
difficult work, but porting programs like Perl is very much worth the
agony.
.IX Xref "porters"
.IP "possessive" 4
.IX Item "possessive"
Said of quantifiers and groups in patterns that refuse
to give up anything once theyXve gotten their mitts on it. Catchier and
easier to say than the even more formal \fInonbacktrackable\fR.
.IX Xref "possessive (term)"
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
The Portable Operating System Interface
specification.
.IX Xref "Portable Operating System Interface (POSIX), about POSIX (Portable Operating System Interface), about"
.IP "postfix" 4
.IX Item "postfix"
An \fBoperator\fR that follows its \fBoperand\fR, as in
\&\f(CW\*(C`$x++\*(C'\fR.
.IX Xref "postfix operator"
.IP "pp" 4
.IX Item "pp"
An internal shorthand for a
Xpush\- popX code; that is, C code implementing PerlXs stack machine.
.IX Xref "pp (pushXpop) code pushXpop (pp) code"
.IP "pragma" 4
.IX Item "pragma"
A standard module whose practical hints and
suggestions are received (and possibly ignored) at compile time. Pragmas
are named in all lowercase.
.IX Xref "pragmas, about modules"
.IP "precedence" 4
.IX Item "precedence"
The rules of
conduct that, in the absence of other guidance, determine what should
happen first.  For example, in the absence of parentheses, you always do
multiplication before addition.
.IX Xref "precedence rules, about operators, precedence rules"
.IP "prefix" 4
.IX Item "prefix"
An \fBoperator\fR that precedes its \fBoperand\fR, as in
\&\f(CW\*(C`++$x\*(C'\fR.
.IX Xref "prefix operators"
.IP "preprocessing" 4
.IX Item "preprocessing"
What some helper \fBprocess\fR did to transform the incoming
data into a form more suitable for the current process. Often done with an
incoming \fBpipe\fR. See also \fBC preprocessor\fR.
.IX Xref "preprocessing"
.IP "primary maintainer" 4
.IX Item "primary maintainer"
The author that \s-1PAUSE\s0 allows to assign \fBco-maintainer\fR 
permissions to a \fBnamespace\fR. A primary maintainer can give up this
distinction by assigning it to another \s-1PAUSE\s0 author. See Camel chapter 19,
\&\s-1XCPANX.\s0
.IX Xref "primary maintainer"
.IP "procedure" 4
.IX Item "procedure"
A \fBsubroutine\fR.
.IX Xref "procedures, defined"
.IP "process" 4
.IX Item "process"
An instance of a running program. Under multitasking
systems like Unix, two or more separate processes could be running the same
program independently at the same timeXin fact, the \f(CW\*(C`fork\*(C'\fR function is
designed to bring about this happy state of affairs. Under other operating
systems, processes are sometimes called XthreadsX, XtasksX, or XjobsX,
often with slight nuances in meaning.
.IX Xref "processes, defined"
.IP "program" 4
.IX Item "program"
See \fBscript\fR.
.IP "program generator" 4
.IX Item "program generator"
A system that algorithmically writes code for you in a
high-level language. See also \fBcode generator\fR.
.IX Xref "program generators"
.IP "progressive matching" 4
.IX Item "progressive matching"
\&\fBPattern matching\fR  matching>that picks up where it left off before.
.IX Xref "progressive matching pattern matching, progressive matching"
.IP "property" 4
.IX Item "property"
See either \fBinstance variable\fR or \fBcharacter property\fR.
.IX Xref "property"
.IP "protocol" 4
.IX Item "protocol"
In networking, an agreed-upon way of sending messages
back and forth so that neither correspondent will get too confused.
.IX Xref "protocols (term)"
.IP "prototype" 4
.IX Item "prototype"
An optional part of a \fBsubroutine\fR declaration telling
the Perl compiler how many and what flavor of arguments may be passed as
\&\fBactual arguments\fR, so you can write subroutine calls that parse much like
built-in functions. (Or donXt parse, as the case may be.)
.IX Xref "prototypes, about"
.IP "pseudofunction" 4
.IX Item "pseudofunction"
A construct that sometimes looks like a function but really
isnXt. Usually reserved for \fBlvalue\fR modifiers like \f(CW\*(C`my\*(C'\fR, for \fBcontext\fR
modifiers like \f(CW\*(C`scalar\*(C'\fR, and for the pick-your-own-quotes constructs,
\&\f(CW\*(C`q//\*(C'\fR, \f(CW\*(C`qq//\*(C'\fR, \f(CW\*(C`qx//\*(C'\fR, \f(CW\*(C`qw//\*(C'\fR, \f(CW\*(C`qr//\*(C'\fR, \f(CW\*(C`m//\*(C'\fR, \f(CW\*(C`s///\*(C'\fR, \f(CW\*(C`y///\*(C'\fR, and
\&\f(CW\*(C`tr///\*(C'\fR.
.IX Xref "pseudofunctions constructs, pseudofunctions functions, pseudofunctions"
.IP "pseudohash" 4
.IX Item "pseudohash"
Formerly, a reference to an array
whose initial element happens to hold a reference to a hash. You used to be
able to treat a pseudohash reference as either an array reference or a hash
reference. Pseduohashes are no longer supported.
.IX Xref "pseudohashes hashes, pseudohashes"
.IP "pseudoliteral" 4
.IX Item "pseudoliteral"
An \fBoperator\fR X\f(CW\*(C`that looks something like a \f(CBliteral\f(CW,
such as the output\-grabbing operator, <literal
moreinfo="none"\*(C'\fR`>\fI\f(CI\*(C`command\*(C'\fI\fR\f(CW\*(C`\`\*(C'\fR.
.IX Xref "pseudoliterals"
.IP "public domain" 4
.IX Item "public domain"
Something not owned by anybody. Perl is copyrighted and is
thus \fInot\fR in the public domainXitXs just \fBfreely available\fR and \fBfreely
redistributable\fR.
.IX Xref "public domain"
.IP "pumpkin" 4
.IX Item "pumpkin"
A notional XbatonX handed around the Perl community
indicating who is the lead integrator in some arena of development.
.IX Xref "pumpkin (term)"
.IP "pumpking" 4
.IX Item "pumpking"
A \fBpumpkin\fR holder, the person in charge of pumping the pump,
or at least priming it. Must be willing to play the part of the Great
Pumpkin now and then.
.IX Xref "pumpking"
.IP "\s-1PV\s0" 4
.IX Item "PV"
A Xpointer valueX, which is Perl
Internals Talk for a \f(CW\*(C`char*\*(C'\fR.
.IX Xref "PV (pointer value) pointer value (PV)"
.SS "Q"
.IX Subsection "Q"
.IP "qualified" 4
.IX Item "qualified"
Possessing a complete name. The symbol \f(CW$Ent::moot\fR is
qualified; \f(CW$moot\fR is unqualified. A fully qualified filename is specified
from the top-level directory.
.IX Xref "qualified (term)"
.IP "quantifier" 4
.IX Item "quantifier"
A component of a \fBregular expression\fR specifying how
many times the foregoing \fBatom\fR may occur.
.IX Xref "quantifiers, about"
.SS "R"
.IX Subsection "R"
.IP "race condition" 4
.IX Item "race condition"
A race condition exists when the result of
several interrelated events depends on the ordering of those events, but
that order cannot be guaranteed due to nondeterministic timing effects. If
two or more programs, or parts of the same program, try to go through the
same series of events, one might interrupt the work of the other. This is a
good way to find an \fBexploit\fR.
.IX Xref "race conditions, defined"
.IP "readable" 4
.IX Item "readable"
With respect to files, one that has the proper permission
bit set to let you access the file. With respect to computer programs, one
thatXs written well enough that someone has a chance of figuring out what
itXs trying to do.
.IX Xref "readable (term)"
.IP "reaping" 4
.IX Item "reaping"
The last rites performed by a parent \fBprocess\fR
on behalf of a deceased child process so that it doesnXt remain a
\&\fBzombie\fR.  See the \f(CW\*(C`wait\*(C'\fR and \f(CW\*(C`waitpid\*(C'\fR function calls.
.IX Xref "reaping zombie processes"
.IP "record" 4
.IX Item "record"
A set of related data values in a \fBfile\fR or \fBstream\fR,
often associated with a unique \fBkey\fR field. In Unix, often commensurate
with a \fBline\fR, or a blank-lineXterminated set of lines (a XparagraphX).
Each line of the \fI/etc/passwd\fR file is a record, keyed on login name,
containing information about that user.
.IX Xref "records, defined"
.IP "recursion" 4
.IX Item "recursion"
The art of defining something (at least partly) in
terms of itself, which is a naughty no-no in dictionaries but often works
out okay in computer programs if youXre careful not to recurse forever
(which is like an infinite loop with more spectacular failure modes).
.IX Xref "recursion, defined"
.IP "reference" 4
.IX Item "reference"
Where you look to find a pointer to information
somewhere else. (See \fBindirection\fR.) References come in two flavors:
\&\fBsymbolic references\fR and \fBhard references\fR.
.IX Xref "references, about"
.IP "referent" 4
.IX Item "referent"
Whatever a reference refers to, which may or may not
have a name. Common types of referents include scalars, arrays, hashes, and
subroutines.
.IX Xref "referents, defined"
.IP "regex" 4
.IX Item "regex"
See \fBregular expression\fR.
.IP "regular expression" 4
.IX Item "regular expression"
A single entity with various
interpretations, like an elephant. To a computer scientist, itXs a grammar
for a little language in which some strings are legal and others arenXt. To
normal people, itXs a pattern you can use to find what youXre looking for
when it varies from case to case. PerlXs regular expressions are far from
regular in the theoretical sense, but in regular use they work quite well.
HereXs a regular expression: \f(CW\*(C`/Oh s.*t./\*(C'\fR. This will match strings like
X\f(CW\*(C`Oh say can you see by the dawn\*(Aqs early light\*(C'\fRX and X\f(CW\*(C`Oh sit!\*(C'\fRX. See
Camel chapter 5, XPattern MatchingX.
.IX Xref "regular expressions, defined"
.IP "regular expression modifier" 4
.IX Item "regular expression modifier"
An option on a pattern or substitution, such as \f(CW\*(C`/i\*(C'\fR to render the pattern
case\- insensitive.
.IX Xref "regular expression modifiers modifiers, regular expression"
.IP "regular file" 4
.IX Item "regular file"
A \fBfile\fR thatXs not a \fBdirectory\fR, a
\&\fBdevice\fR, a named \fBpipe\fR or \fBsocket\fR, or a \fBsymbolic link\fR. Perl uses
the \f(CW\*(C`Xf\*(C'\fR file test operator to identify regular files. Sometimes called a
XplainX file.
.IX Xref "regular files files, regular"
.IP "relational operator" 4
.IX Item "relational operator"
An \fBoperator\fR that says whether a particular
ordering relationship is \fBtrue\fR about a pair of \fBoperands\fR. Perl has both
numeric and string relational operators. See \fBcollating sequence\fR.
.IX Xref "relational operators"
.IP "reserved words" 4
.IX Item "reserved words"
A word with a specific, built-in meaning
to a \fBcompiler\fR, such as \f(CW\*(C`if\*(C'\fR or \f(CW\*(C`delete\*(C'\fR. In many languages (not Perl),
itXs illegal to use reserved words to name anything else. (Which is why
theyXre reserved, after all.) In Perl, you just canXt use them to name
\&\fBlabels\fR or \fBfilehandles\fR. Also called XkeywordsX.
.IX Xref "reserved words keywords (term)"
.IP "return value" 4
.IX Item "return value"
The \fBvalue\fR produced by a \fBsubroutine\fR
or \fBexpression\fR when evaluated. In Perl, a return value may be either a
\&\fBlist\fR or a \fBscalar\fR.
.IX Xref "return values values, return"
.IP "\s-1RFC\s0" 4
.IX Item "RFC"
Request For Comment, which despite the timid connotations is the name of a series of
important standards documents.
.IX Xref "Request For Comment (RFC) RFC (Request For Comment)"
.IP "right shift" 4
.IX Item "right shift"
A \fBbit shift\fR that divides
a number by some power of 2.
.IX Xref "right shift (>>) bit operator bitXshift operators, right shift >> (right shift) bit operator"
.IP "role" 4
.IX Item "role"
A name for a concrete set of behaviors. A role is a way to
add behavior to a class without inheritance.
.IX Xref "roles (term)"
.IP "root" 4
.IX Item "root"
The superuser (\f(CW\*(C`UID\*(C'\fR == 0). Also the top-level directory of
the filesystem.
.IX Xref "root (term)"
.IP "\s-1RTFM\s0" 4
.IX Item "RTFM"
What you are told when someone thinks you should Read The
Fine Manual.
.IX Xref "RTFM acronym"
.IP "run phase" 4
.IX Item "run phase"
Any time after Perl starts running your main program.
See also \fBcompile phase\fR. Run phase is mostly spent in \fBruntime\fR but may
also be spent in \fBcompile time\fR when \f(CW\*(C`require\*(C'\fR, \f(CW\*(C`do\*(C'\fR \fI\f(CI\*(C`FILE\*(C'\fI\fR, or
\&\f(CW\*(C`eval\*(C'\fR \fI\f(CI\*(C`STRING\*(C'\fI\fR operators are executed, or when a substitution uses
the \f(CW\*(C`/ee\*(C'\fR modifier.
.IX Xref "run phase, defined"
.IP "runtime" 4
.IX Item "runtime"
The time when Perl is actually doing what your
code says to do, as opposed to the earlier period of time when it was
trying to figure out whether what you said made any sense whatsoever, which
is \fBcompile time\fR.
.IX Xref "runtime (term), defined"
.IP "runtime pattern" 4
.IX Item "runtime pattern"
A pattern that contains one or more
variables to be interpolated before parsing the pattern as a \fBregular
expression\fR, and that therefore cannot be analyzed at compile time, but
must be reanalyzed each time the pattern match operator is evaluated.
Runtime patterns are useful but expensive.
.IX Xref "runtime patterns patterns, runtime"
.IP "\s-1RV\s0" 4
.IX Item "RV"
A recreational vehicle, not
to be confused with vehicular recreation. \s-1RV\s0 also means an internal
Reference Value of the type a \fBscalar\fR can hold. See also \fB\s-1IV\s0\fR and \fB\s-1NV\s0\fR
if youXre not confused yet.
.IX Xref "Reference Value (RV) RV (Reference Value)"
.IP "rvalue" 4
.IX Item "rvalue"
A \fBvalue\fR that you might find on the
right side of an \fBassignment\fR. See also \fBlvalue\fR.
.IX Xref "rvalue (term) values, rvalue"
.SS "S"
.IX Subsection "S"
.IP "sandbox" 4
.IX Item "sandbox"
A walled off area thatXs not supposed to affect beyond
its walls. You let kids play in the sandbox instead of running in the road.
See Camel chapter 20, XSecurityX.
.IX Xref "sandbox, defined"
.IP "scalar" 4
.IX Item "scalar"
A simple, singular value; a number, \fBstring\fR, or
\&\fBreference\fR.
.IX Xref "scalars, defined"
.IP "scalar context" 4
.IX Item "scalar context"
The situation in which an
\&\fBexpression\fR is expected by its surroundings (the code calling it) to
return a single \fBvalue\fR rather than a \fBlist\fR of values. See also
\&\fBcontext\fR and \fBlist context\fR. A scalar context sometimes imposes
additional constraints on the return valueXsee \fBstring context\fR and
\&\fBnumeric context\fR. Sometimes we talk about a \fBBoolean context\fR inside
conditionals, but this imposes no additional constraints, since any scalar
value, whether numeric or \fBstring\fR, is already true or false.
.IX Xref "scalar context, about context, scalar"
.IP "scalar literal" 4
.IX Item "scalar literal"
A number or quoted \fBstring\fRXan actual
\&\fBvalue\fR in the text of your program, as opposed to a \fBvariable\fR.
.IX Xref "scalar literals literals, scalar"
.IP "scalar value" 4
.IX Item "scalar value"
A value that happens to be a
\&\fBscalar\fR as opposed to a \fBlist\fR.
.IX Xref "scalar values, about values, scalar SV"
.IP "scalar variable" 4
.IX Item "scalar variable"
A \fBvariable\fR prefixed with
\&\f(CW\*(C`$\*(C'\fR that holds a single value.
.IX Xref "scalar variables, defined variables, scalar"
.IP "scope" 4
.IX Item "scope"
From how far away you can see a variable, looking through
one. Perl has two visibility mechanisms. It does \fBdynamic scoping\fR of
\&\f(CW\*(C`local\*(C'\fR \fBvariables\fR, meaning that the rest of the \fBblock\fR, and any
\&\fBsubroutines\fR that are called by the rest of the block, can see the
variables that are local to the block. Perl does \fBlexical scoping\fR of
\&\f(CW\*(C`my\*(C'\fR variables, meaning that the rest of the block can see the variable,
but other subroutines called by the block \fIcannot\fR see the variable.
.IX Xref "scopes, defined"
.IP "scratchpad" 4
.IX Item "scratchpad"
The area in which a particular invocation of a particular
file or subroutine keeps some of its temporary values, including any
lexically scoped variables.
.IX Xref "scratchpads"
.IP "script" 4
.IX Item "script"
A text \fBfile\fR that is a program
intended to be \fBexecuted\fR directly rather than \fBcompiled\fR to another form
of file before \fBexecution\fR.
.IX Xref "scripts (term) programs, defined"
.Sp
Also, in the context of \fBUnicode\fR, a writing system for a particular
language or group of languages, such as Greek, Bengali, or Tengwar.
.IP "script kiddie" 4
.IX Item "script kiddie"
A \fBcracker\fR who is not a \fBhacker\fR but knows just enough
to run canned scripts. A \fBcargo-cult\fR programmer.
.IX Xref "script kiddie"
.IP "sed" 4
.IX Item "sed"
A venerable Stream EDitor from
which Perl derives some of its ideas.
.IX Xref "sed (Stream EDitor) Stream EDitor (sed)"
.IP "semaphore" 4
.IX Item "semaphore"
A fancy kind of interlock that prevents multiple \fBthreads\fR or
\&\fBprocesses\fR from using up the same resources simultaneously.
.IX Xref "semaphore"
.IP "separator" 4
.IX Item "separator"
A \fBcharacter\fR or \fBstring\fR that keeps two surrounding strings from being
confused with each other. The \f(CW\*(C`split\*(C'\fR function works on separators. Not to be confused with \fBdelimiters\fR
or \fBterminators\fR. The XorX in the previous sentence separated the two
alternatives.
.IX Xref "separators characters, separators strings, separators split function, separators and"
.IP "serialization" 4
.IX Item "serialization"
Putting a fancy \fBdata structure\fR into
linear order so that it can be stored as a \fBstring\fR in a disk file or
database, or sent through a \fBpipe\fR. Also called marshalling.
.IX Xref "serialization marshalling (term)"
.IP "server" 4
.IX Item "server"
In networking, a \fBprocess\fR that
either advertises a \fBservice\fR or just hangs around at a known location and
waits for \fBclients\fR who need service to get in touch with it.
.IX Xref "servers, defined processes, server"
.IP "service" 4
.IX Item "service"
Something you do for someone else to make them happy,
like giving them the time of day (or of their life). On some machines,
well-known services are listed by the \f(CW\*(C`getservent\*(C'\fR
function.
.IX Xref "services (term) getservent function"
.IP "setgid" 4
.IX Item "setgid"
Same as \fBsetuid\fR, only having to do with giving
away \fBgroup\fR privileges.
.IX Xref "setgid program, about"
.IP "setuid" 4
.IX Item "setuid"
Said of a program that runs with the privileges of
its \fBowner\fR rather than (as is usually the case) the privileges of whoever
is running it. Also describes the bit in the mode word (\fBpermission bits\fR)
that controls the feature. This bit must be explicitly set by the owner to
enable this feature, and the program must be carefully written not to give
away more privileges than it ought to.
.IX Xref "setuid program, about"
.IP "shared memory" 4
.IX Item "shared memory"
A piece of \fBmemory\fR accessible by two
different \fBprocesses\fR who otherwise would not see each otherXs memory.
.IX Xref "shared memory memory, shared"
.IP "shebang" 4
.IX Item "shebang"
Irish for the whole McGillicuddy. In Perl culture, a
portmanteau of XsharpX and XbangX, meaning the \f(CW\*(C`#!\*(C'\fR sequence that tells
the system where to find the interpreter.
.IX Xref "shebang (term)"
.IP "shell" 4
.IX Item "shell"
A \fBcommand\fR\-line \fBinterpreter\fR. The program that
interactively gives you a prompt, accepts one or more \fBlines\fR of input,
and executes the programs you mentioned, feeding each of them their proper
\&\fBarguments\fR and input data. Shells can also execute scripts containing
such commands. Under Unix, typical shells include the Bourne shell
(\fI/bin/sh\fR), the C shell (\fI/bin/csh\fR), and the Korn shell (\fI/bin/ksh\fR).
Perl is not strictly a shell because itXs not interactive (although Perl
programs can be interactive).
.IX Xref "shell program, defined"
.IP "side effects" 4
.IX Item "side effects"
Something extra that happens when you evaluate an
\&\fBexpression\fR. Nowadays it can refer to almost anything. For example,
evaluating a simple assignment statement typically has the Xside effectX of
assigning a value to a variable. (And you thought assigning the value was
your primary intent in the first place!) Likewise, assigning a value to the
special variable \f(CW$|\fR (\f(CW$AUTOFLUSH\fR) has the side effect of forcing a
flush after every \f(CW\*(C`write\*(C'\fR or \f(CW\*(C`print\*(C'\fR on the currently selected
filehandle.
.IX Xref "side effects"
.IP "sigil" 4
.IX Item "sigil"
A glyph used in magic. Or, for Perl, the symbol in front
of a variable name, such as \f(CW\*(C`$\*(C'\fR, \f(CW\*(C`@\*(C'\fR, and \f(CW\*(C`%\*(C'\fR.
.IX Xref "sigils, defined"
.IP "signal" 4
.IX Item "signal"
A bolt out of the blue; that is, an
event triggered by the \fBoperating system\fR, probably when youXre least
expecting it.
.IX Xref "signals and signal handling, about"
.IP "signal handler" 4
.IX Item "signal handler"
A \fBsubroutine\fR that, instead of being content to be
called in the normal fashion, sits around waiting for a bolt out of the
blue before it will deign to \fBexecute\fR. Under Perl, bolts out of the blue
are called signals, and you send them with the \f(CW\*(C`kill\*(C'\fR built-in. See the
\&\f(CW%SIG\fR hash in Camel chapter 25, XSpecial NamesX and the section XSignalsX
in Camel chapter 15, XInterprocess CommunicationX.
.IX Xref "handlers, signal"
.IP "single inheritance" 4
.IX Item "single inheritance"
The features you got from your
mother, if she told you that you donXt have a father. (See also
\&\fBinheritance\fR and \fBmultiple inheritance\fR.) In computer languages, the
idea that \fBclasses\fR reproduce asexually so that a given class can only
have one direct ancestor or \fBbase class\fR. Perl supplies no such
restriction, though you may certainly program Perl that way if you like.
.IX Xref "single inheritance inheritance, single"
.IP "slice" 4
.IX Item "slice"
A selection of any number of
\&\fBelements\fR from a \fBlist\fR, \fBarray\fR, or \fBhash\fR.
.IX Xref "slices of elements elements, slices of"
.IP "slurp" 4
.IX Item "slurp"
To read an entire \fBfile\fR into a \fBstring\fR in one operation.
.IX Xref "slurp (term)"
.IP "socket" 4
.IX Item "socket"
An endpoint for network communication among multiple
\&\fBprocesses\fR that works much like a telephone or a post office box. The
most important thing about a socket is its \fBnetwork address\fR (like a phone
number). Different kinds of sockets have different kinds of addressesXsome
look like filenames, and some donXt.
.IX Xref "sockets, defined"
.IP "soft reference" 4
.IX Item "soft reference"
See \fBsymbolic reference\fR.
.IX Xref "soft references references, soft"
.IP "source filter" 4
.IX Item "source filter"
A special kind of \fBmodule\fR that does
\&\fBpreprocessing\fR on your script just before it gets to the \fBtokener\fR.
.IX Xref "source filters filters, source"
.IP "stack" 4
.IX Item "stack"
A device you can put things on the top of, and later take
them back off in the opposite order in which you put them on. See \fB\s-1LIFO\s0\fR.
.IX Xref "stacks, defined"
.IP "standard" 4
.IX Item "standard"
Included in the official Perl distribution, as in a
standard module, a standard tool, or a standard Perl \fBmanpage\fR.
.IX Xref "standard (term)"
.IP "standard error" 4
.IX Item "standard error"
The default output \fBstream\fR for nasty remarks that donXt belong in
\&\fBstandard output\fR. Represented within a Perl program by the output>  \fBfilehandle\fR \f(CW\*(C`STDERR\*(C'\fR. You can use this
stream explicitly, but the \f(CW\*(C`die\*(C'\fR and \f(CW\*(C`warn\*(C'\fR built-ins write to your
standard error stream automatically (unless trapped or otherwise
intercepted).
.IX Xref "STDERR filehandle, about"
.IP "standard input" 4
.IX Item "standard input"
The default input \fBstream\fR for your program,
which if possible shouldnXt care where its data is coming from. Represented
within a Perl program by the \fBfilehandle\fR \f(CW\*(C`STDIN\*(C'\fR.
.IX Xref "STDIN filehandle, about"
.IP "standard I/O" 4
.IX Item "standard I/O"
A standard C library for doing \fBbuffered\fR input
and output to the \fBoperating system\fR. (The XstandardX of standard I/O is
at most marginally related to the XstandardX of standard input and output.)
In general, Perl relies on whatever implementation of standard I/O a given
operating system supplies, so the buffering characteristics of a Perl
program on one machine may not exactly match those on another machine.
Normally this only influences efficiency, not semantics. If your standard
I/O package is doing block buffering and you want it to \fBflush\fR the buffer
more often, just set the \f(CW$|\fR variable to a true value.
.IX Xref "standard I O I O (Input Output), standard Input Output (I O), standard STDIO filehandle"
.IP "Standard Library" 4
.IX Item "Standard Library"
Everything that comes with the official
\&\fIperl\fR distribution. Some vendor versions of \fIperl\fR change their
distributions, leaving out some parts or including extras. See also
\&\fBdual-lived\fR.
.IX Xref "Standard Perl Library, about"
.IP "standard output" 4
.IX Item "standard output"
The default output \fBstream\fR for your program,
which if possible shouldnXt care where its data is going. Represented
within a Perl program by the \fBfilehandle\fR \f(CW\*(C`STDOUT\*(C'\fR.
.IX Xref "STDOUT filehandle, about"
.IP "statement" 4
.IX Item "statement"
A \fBcommand\fR to the computer about what to do next,
like a step in a recipe: XAdd marmalade to batter and mix until mixed.X A
statement is distinguished from a \fBdeclaration\fR, which doesnXt tell the
computer to do anything, but just to learn something.
.IX Xref "statements, about"
.IP "statement modifier" 4
.IX Item "statement modifier"
A \fBconditional\fR or
\&\fBloop\fR that you put after the \fBstatement\fR instead of before, if you know
what we mean.
.IX Xref "statement modifiers, about modifiers, statement"
.IP "static" 4
.IX Item "static"
Varying slowly compared to something else. (Unfortunately,
everything is relatively stable compared to something else, except for
certain elementary particles, and weXre not so sure about them.) In
computers, where things are supposed to vary rapidly, XstaticX has a
derogatory connotation, indicating a slightly dysfunctional \fBvariable\fR,
\&\fBsubroutine\fR, or \fBmethod\fR. In Perl culture, the word is politely avoided.
.IX Xref "static (term)"
.Sp
If youXre a C or \*(C+ programmer, you might be looking for PerlXs \f(CW\*(C`state\*(C'\fR
keyword.
.IP "static method" 4
.IX Item "static method"
No such thing. See \fBclass method\fR.
.IX Xref "static methods methods, static"
.IP "static scoping" 4
.IX Item "static scoping"
No such thing. See \fBlexical scoping\fR.
.IP "static variable" 4
.IX Item "static variable"
No such thing. Just use a \fBlexical
variable\fR in a scope larger than your \fBsubroutine\fR, or declare it with
\&\f(CW\*(C`state\*(C'\fR instead of with \f(CW\*(C`my\*(C'\fR.
.IX Xref "static variables variables, static"
.IP "stat structure" 4
.IX Item "stat structure"
A special internal spot
in which Perl keeps the information about the last \fBfile\fR on which you
requested information.
.IX Xref "stat structure data structures, stat structure"
.IP "status" 4
.IX Item "status"
The \fBvalue\fR returned to the
parent \fBprocess\fR when one of its child processes dies. This value is
placed in the special variable \f(CW$?\fR. Its upper eight \fBbits\fR are the exit
status of the defunct process, and its lower eight bits identify the signal
(if any) that the process died from. On Unix systems, this status value is
the same as the status word returned by \fIwait\fR(2). See \f(CW\*(C`system\*(C'\fR in Camel
chapter 27, XFunctionsX.
.IX Xref "status value values, status exit status"
.IP "\s-1STDERR\s0" 4
.IX Item "STDERR"
See \fBstandard error\fR.
.IP "\s-1STDIN\s0" 4
.IX Item "STDIN"
See \fBstandard input\fR.
.IP "\s-1STDIO\s0" 4
.IX Item "STDIO"
See \fBstandard I/O\fR.
.IP "\s-1STDOUT\s0" 4
.IX Item "STDOUT"
See \fBstandard output\fR.
.IP "stream" 4
.IX Item "stream"
A flow of data into or out of
a process as a steady sequence of bytes or characters, without the
appearance of being broken up into packets. This is a kind of
\&\fBinterface\fRXthe underlying \fBimplementation\fR may well break your data up
into separate packets for delivery, but this is hidden from you.
.IX Xref "streaming data processes, streaming data"
.IP "string" 4
.IX Item "string"
A sequence of characters such as XHe said !@#*&%@#*?!X.
A string does not have to be entirely printable.
.IX Xref "strings, defined"
.IP "string context" 4
.IX Item "string context"
The situation in which an expression is
expected by its surroundings (the code calling it) to return a \fBstring\fR.
See also \fBcontext\fR and \fBnumeric context\fR.
.IX Xref "string context context, string"
.IP "stringification" 4
.IX Item "stringification"
The process of producing a \fBstring\fR representation of an
abstract object.
.IX Xref "stringification"
.IP "struct" 4
.IX Item "struct"
C keyword introducing a structure definition or name.
.IX Xref "struct keyword"
.IP "structure" 4
.IX Item "structure"
See \fBdata structure\fR.
.IX Xref "structures"
.IP "subclass" 4
.IX Item "subclass"
See \fBderived class\fR.
.IP "subpattern" 4
.IX Item "subpattern"
A component of a \fBregular expression\fR pattern.
.IX Xref "subpatterns, defined"
.IP "subroutine" 4
.IX Item "subroutine"
A named or otherwise accessible piece of program
that can be invoked from elsewhere in the program in order to accomplish
some subgoal of the program. A subroutine is often parameterized to
accomplish different but related things depending on its input
\&\fBarguments\fR. If the subroutine returns a meaningful \fBvalue\fR, it is also
called a \fBfunction\fR.
.IX Xref "subroutines, defined"
.IP "subscript" 4
.IX Item "subscript"
A \fBvalue\fR that indicates the position of a particular
\&\fBarray\fR \fBelement\fR in an array.
.IX Xref "subscripts"
.IP "substitution" 4
.IX Item "substitution"
Changing parts of a string via the \f(CW\*(C`s///\*(C'\fR
operator. (We avoid use of this term to mean \fBvariable interpolation\fR.)
.IX Xref "substitution (s ) operator, about strings, substitution in s (substitution) operator, about"
.IP "substring" 4
.IX Item "substring"
A portion of a \fBstring\fR, starting at a certain
\&\fBcharacter\fR position (\fBoffset\fR) and proceeding for a certain number of
characters.
.IX Xref "substrings (term)"
.IP "superclass" 4
.IX Item "superclass"
See \fBbase class\fR.
.IP "superuser" 4
.IX Item "superuser"
The person whom the \fBoperating system\fR will let do almost
anything. Typically your system administrator or someone pretending to be
your system administrator. On Unix systems, the \fBroot\fR user. On Windows
systems, usually the Administrator user.
.IX Xref "superusers"
.IP "\s-1SV\s0" 4
.IX Item "SV"
Short for Xscalar valueX. But
within the Perl interpreter, every \fBreferent\fR is treated as a member of a
class derived from \s-1SV,\s0 in an object-oriented sort of way. Every \fBvalue\fR
inside Perl is passed around as a C language \f(CW\*(C`SV*\*(C'\fR pointer. The \s-1SV
\&\s0\fBstruct\fR knows its own Xreferent typeX, and the code is smart enough (we
hope) not to try to call a \fBhash\fR function on a \fBsubroutine\fR.
.IX Xref "scalar values, about values, scalar"
.IP "switch" 4
.IX Item "switch"
An option you give on a command line to
influence the way your program works, usually introduced with a minus sign.
The word is also used as a nickname for a \fBswitch statement\fR.
.IX Xref "switches, about switches"
.IP "switch cluster" 4
.IX Item "switch cluster"
The combination of multiple command\-
line switches (\fIe.g.\fR, \f(CW\*(C`Xa Xb Xc\*(C'\fR) into one switch (\fIe.g.\fR, \f(CW\*(C`Xabc\*(C'\fR).
Any switch with an additional \fBargument\fR must be the last switch in a
cluster.
.IX Xref "switch clusters clusters, switch"
.IP "switch statement" 4
.IX Item "switch statement"
A program technique that lets you
evaluate an \fBexpression\fR and then, based on the value of the expression,
do a multiway branch to the appropriate piece of code for that value. Also
called a Xcase structureX, named after the similar Pascal construct. Most
switch statements in Perl are spelled \f(CW\*(C`given\*(C'\fR. See XThe \f(CW\*(C`given\*(C'\fR
statementX in Camel chapter 4, XStatements and DeclarationsX.
.IX Xref "switch statement statements, switch"
.IP "symbol" 4
.IX Item "symbol"
Generally, any \fBtoken\fR or \fBmetasymbol\fR. Often used
more specifically to mean the sort of name you might find in a \fBsymbol
table\fR.
.IX Xref "symbols symbols"
.IP "symbolic debugger" 4
.IX Item "symbolic debugger"
A program that lets you step through
the \fBexecution\fR of your program, stopping or printing things out here and
there to see whether anything has gone wrong, and, if so, what. The
XsymbolicX part just means that you can talk to the debugger using the same
symbols with which your program is written.
.IX Xref "symbolic debugger debugger, about"
.IP "symbolic link" 4
.IX Item "symbolic link"
An alternate filename that points to the
real \fBfilename\fR, which in turn points to the real \fBfile\fR. Whenever the
\&\fBoperating system\fR is trying to parse a \fBpathname\fR containing a symbolic
link, it merely substitutes the new name and continues parsing.
.IX Xref "symbolic links links, symbolic"
.IP "symbolic reference" 4
.IX Item "symbolic reference"
A variable whose value is the
name of another variable or subroutine. By \fBdereferencing\fR the first
variable, you can get at the second one. Symbolic references are illegal
under \f(CW\*(C`use strict "refs"\*(C'\fR.
.IX Xref "symbolic references references, symbolic"
.IP "symbol table" 4
.IX Item "symbol table"
Where a \fBcompiler\fR remembers symbols. A program
like Perl must somehow remember all the names of all the \fBvariables\fR,
\&\fBfilehandles\fR, and \fBsubroutines\fR youXve used. It does this by placing the
names in a symbol table, which is implemented in Perl using a \fBhash
table\fR. There is a separate symbol table for each \fBpackage\fR to give each
package its own \fBnamespace\fR.
.IX Xref "symbol tables, about"
.IP "synchronous" 4
.IX Item "synchronous"
Programming in which the orderly sequence of events
can be determined; that is, when things happen one after the other, not at
the same time.
.IX Xref "synchronous (term)"
.IP "syntactic sugar" 4
.IX Item "syntactic sugar"
An alternative way of writing something more easily; a
shortcut.
.IX Xref "syntactic sugar"
.IP "syntax" 4
.IX Item "syntax"
From Greek \s-1XXXXXXXX,\s0 Xwith-arrangementX. How things
(particularly symbols) are put together with each other.
.IX Xref "syntax, about"
.IP "syntax tree" 4
.IX Item "syntax tree"
An internal representation of your program wherein
lower-level \fBconstructs\fR dangle off the higher-level constructs enclosing
them.
.IX Xref "syntax tree"
.IP "syscall" 4
.IX Item "syscall"
A \fBfunction\fR call directly to the \fBoperating
system\fR. Many of the important subroutines and functions you use arenXt
direct system calls, but are built up in one or more layers above the
system call level. In general, Perl programmers donXt need to worry about
the distinction. However, if you do happen to know which Perl functions are
really syscalls, you can predict which of these will set the \f(CW$!\fR
(\f(CW$ERRNO\fR) variable on failure. Unfortunately, beginning programmers often
confusingly employ the term Xsystem callX to mean what happens when you
call the Perl \f(CW\*(C`system\*(C'\fR function, which actually involves many syscalls. To
avoid any confusion, we nearly always say XsyscallX for something you could
call indirectly via PerlXs \f(CW\*(C`syscall\*(C'\fR function, and never for something you
would call with PerlXs \f(CW\*(C`system\*(C'\fR function.
.IX Xref "syscall function, about"
.SS "T"
.IX Subsection "T"
.IP "taint checks" 4
.IX Item "taint checks"
The special bookkeeping Perl does to track the flow
of external data through your program and disallow their use in system
commands.
.IX Xref "taint checks, about"
.IP "tainted" 4
.IX Item "tainted"
Said of data derived from the grubby hands of a user,
and thus unsafe for a secure program to rely on. Perl does taint checks if
you run a \fBsetuid\fR (or \fBsetgid\fR) program, or if you use the \f(CW\*(C`XT\*(C'\fR switch.
.IX Xref "tainted data, about"
.IP "taint mode" 4
.IX Item "taint mode"
Running under the \f(CW\*(C`XT\*(C'\fR switch, marking all external data as
suspect and refusing to use it with system commands. See Camel chapter 20,
XSecurityX.
.IX Xref "taint mode"
.IP "\s-1TCP\s0" 4
.IX Item "TCP"
Short for Transmission Control Protocol. A protocol wrapped around the
Internet Protocol to make an unreliable packet transmission mechanism
appear to the application program to be a reliable \fBstream\fR of bytes.
(Usually.)
.IX Xref "TCP (Transmission Control Protocol) Transmission Control Protocol (TCP)"
.IP "term" 4
.IX Item "term"
Short for a XterminalXXthat is, a leaf node of a \fBsyntax
tree\fR. A thing that functions grammatically as an \fBoperand\fR for the
operators in an expression.
.IX Xref "terms, defined"
.IP "terminator" 4
.IX Item "terminator"
A \fBcharacter\fR or \fBstring\fR that marks the end of another string. The \f(CW$/\fR
variable contains the string that terminates a \f(CW\*(C`readline\*(C'\fR operation, which
\&\f(CW\*(C`chomp\*(C'\fR deletes from the end. Not to be confused with \fBdelimiters\fR or
\&\fBseparators\fR. The period at the end of this sentence is a terminator.
.IX Xref "terminators (term) characters, terminators strings, terminators in"
.IP "ternary" 4
.IX Item "ternary"
An \fBoperator\fR taking three \fBoperands\fR. Sometimes
pronounced \fBtrinary\fR.
.IX Xref "ternary operators"
.IP "text" 4
.IX Item "text"
A \fBstring\fR or \fBfile\fR containing primarily printable characters.
.IX Xref "text, defined strings, text files, text text"
.IP "thread" 4
.IX Item "thread"
Like a forked process, but without \fBfork\fRXs inherent
memory protection. A thread is lighter weight than a full process, in that
a process could have multiple threads running around in it, all fighting
over the same processXs memory space unless steps are taken to protect
threads from one another.
.IX Xref "threads (term)"
.IP "tie" 4
.IX Item "tie"
The bond between a magical variable and its
implementation class. See the \f(CW\*(C`tie\*(C'\fR function in Camel chapter 27,
XFunctionsX and Camel chapter 14, XTied VariablesX.
.IX Xref "tied variables, about"
.IP "titlecase" 4
.IX Item "titlecase"
The case used for capitals
that are followed by lowercase characters instead of by more capitals.
Sometimes called sentence case or headline case. English doesnXt use
Unicode titlecase, but casing rules for English titles are more complicated
than simply capitalizing each wordXs first character.
.IX Xref "titlecase characters characters, titlecase"
.IP "\s-1TMTOWTDI\s0" 4
.IX Item "TMTOWTDI"
ThereXs More Than One Way To Do It, the Perl Motto. The
notion that there can be more than one valid path to solving a programming
problem in context. (This doesnXt mean that more ways are always better or
that all possible paths are equally desirableXjust that there need not be
One True Way.)
.IX Xref "TMTOWTDI acronym"
.IP "token" 4
.IX Item "token"
A morpheme in a programming language, the smallest unit
of text with semantic significance.
.IX Xref "tokens, defined"
.IP "tokener" 4
.IX Item "tokener"
A module that breaks a program text into a sequence of
\&\fBtokens\fR for later analysis by a parser.
.IX Xref "tokeners, defined"
.IP "tokenizing" 4
.IX Item "tokenizing"
Splitting up a program text into \fBtokens\fR. Also known as
XlexingX, in which case you get XlexemesX instead of tokens.
.IX Xref "tokenizing"
.IP "toolbox approach" 4
.IX Item "toolbox approach"
The notion that, with a complete set of simple tools
that work well together, you can build almost anything you want. Which is
fine if youXre assembling a tricycle, but if youXre building a
defranishizing comboflux regurgalator, you really want your own machine
shop in which to build special tools. Perl is sort of a machine shop.
.IX Xref "toolbox approach"
.IP "topic" 4
.IX Item "topic"
The thing youXre working on. Structures like
\&\f(CW\*(C`while(<>)\*(C'\fR, \f(CW\*(C`for\*(C'\fR, \f(CW\*(C`foreach\*(C'\fR, and \f(CW\*(C`given\*(C'\fR set the topic for
you by assigning to \f(CW$_\fR, the default (\fItopic\fR) variable.
.IX Xref "topics (term)"
.IP "transliterate" 4
.IX Item "transliterate"
To turn one string
representation into another by mapping each character of the source string
to its corresponding character in the result string. Not to be confused
with translation: for example, Greek \fI\s-1XXXXXXXXXX\s0\fR transliterates into
\&\fIpolychromos\fR but translates into \fImany-colored\fR. See the \f(CW\*(C`tr///\*(C'\fR
operator in Camel chapter 5, XPattern MatchingX.
.IX Xref "tr (transliteration) operator, about strings, transliteration of transliteration (tr ) operator, about"
.IP "trigger" 4
.IX Item "trigger"
An event that causes a \fBhandler\fR to be run.
.IX Xref "triggers (term)"
.IP "trinary" 4
.IX Item "trinary"
Not a stellar system with three stars, but an
\&\fBoperator\fR taking three \fBoperands\fR. Sometimes pronounced \fBternary\fR.
.IX Xref "trinary operators"
.IP "troff" 4
.IX Item "troff"
A venerable typesetting language from which Perl derives
the name of its \f(CW$%\fR variable and which is secretly used in the production
of Camel books.
.IX Xref "troff language"
.IP "true" 4
.IX Item "true"
Any scalar value that doesnXt evaluate to 0 or
\&\f(CW""\fR.
.IX Xref "true values values, true"
.IP "truncating" 4
.IX Item "truncating"
Emptying a file of existing
contents, either automatically when opening a file for writing or
explicitly via the \f(CW\*(C`truncate\*(C'\fR function.
.IX Xref "truncate function files, truncating"
.IP "type" 4
.IX Item "type"
See \fBdata type\fR and \fBclass\fR.
.IX Xref "type"
.IP "type casting" 4
.IX Item "type casting"
Converting data from one type to another. C permits this.
Perl does not need it. Nor want it.
.IX Xref "type casting"
.IP "typedef" 4
.IX Item "typedef"
A type definition in the C and \*(C+ languages.
.IX Xref "typedef"
.IP "typed lexical" 4
.IX Item "typed lexical"
A \fBlexical variable\fR  lexical>that is declared with a \fBclass\fR
type: \f(CW\*(C`my Pony $bill\*(C'\fR.
.IX Xref "typed lexicals lexical variables, typed lexicals variables, variable"
.IP "typeglob" 4
.IX Item "typeglob"
Use of a single identifier, prefixed with \f(CW\*(C`*\*(C'\fR. For
example, \f(CW*name\fR stands for any or all of \f(CW$name\fR, \f(CW@name\fR, \f(CW%name\fR,
\&\f(CW&name\fR, or just \f(CW\*(C`name\*(C'\fR. How you use it determines whether it is
interpreted as all or only one of them. See XTypeglobs and FilehandlesX in
Camel chapter 2, XBits and PiecesX.
.IX Xref "typeglobs, defined"
.IP "typemap" 4
.IX Item "typemap"
A description of how C types may be transformed to and from Perl
types within an \fBextension\fR module written in \fB\s-1XS\s0\fR.
.IX Xref "typemap"
.SS "U"
.IX Subsection "U"
.IP "\s-1UDP\s0" 4
.IX Item "UDP"
User Datagram Protocol, the typical way to send
\&\fBdatagrams\fR over the Internet.
.IX Xref "User Datagram Protocol (UDP) UDP (User Datagram Protocol) datagrams, UDP support"
.IP "\s-1UID\s0" 4
.IX Item "UID"
A user \s-1ID. \s0Often used in the context of
\&\fBfile\fR or \fBprocess\fR ownership.
.IX Xref "UID (user ID) user ID (UID)"
.IP "umask" 4
.IX Item "umask"
A mask of those \fBpermission bits\fR that should be forced
off when creating files or directories, in order to establish a policy of
whom youXll ordinarily deny access to. See the \f(CW\*(C`umask\*(C'\fR function.
.IX Xref "umask function"
.IP "unary operator" 4
.IX Item "unary operator"
An operator with only one \fBoperand\fR, like \f(CW\*(C`!\*(C'\fR or
\&\f(CW\*(C`chdir\*(C'\fR. Unary operators are usually prefix operators; that is, they
precede their operand. The \f(CW\*(C`++\*(C'\fR and \f(CW\*(C`XX\*(C'\fR operators can be either prefix
or postfix. (Their position \fIdoes\fR change their meanings.)
.IX Xref "unary operators, about"
.IP "Unicode" 4
.IX Item "Unicode"
A character set comprising all the major character sets of
the world, more or less. See <http://www.unicode.org>.
.IX Xref "Unicode, about"
.IP "Unix" 4
.IX Item "Unix"
A very large and constantly evolving language with several
alternative and largely incompatible syntaxes, in which anyone can define
anything any way they choose, and usually do. Speakers of this language
think itXs easy to learn because itXs so easily twisted to oneXs own ends,
but dialectical differences make tribal intercommunication nearly
impossible, and travelers are often reduced to a pidgin-like subset of the
language. To be universally understood, a Unix shell programmer must spend
years of study in the art. Many have abandoned this discipline and now
communicate via an Esperanto-like language called Perl.
.IX Xref "Unix language"
.Sp
In ancient times, Unix was also used to refer to some code that a couple of
people at Bell Labs wrote to make use of a \s-1PDP\-7\s0 computer that wasnXt doing
much of anything else at the time.
.IP "uppercase" 4
.IX Item "uppercase"
In Unicode, not just
characters with the General Category of Uppercase Letter, but any character
with the Uppercase property, including some Letter Numbers and Symbols. Not
to be confused with \fBtitlecase\fR.
.IX Xref "uppercase characters characters, uppercase"
.SS "V"
.IX Subsection "V"
.IP "value" 4
.IX Item "value"
An actual piece of data, in contrast to all the
variables, references, keys, indices, operators, and whatnot that you need
to access the value.
.IX Xref "values, defined"
.IP "variable" 4
.IX Item "variable"
A named storage location that can hold any
of various kinds of \fBvalue\fR, as your program sees fit.
.IX Xref "variables, defined variables"
.IP "variable interpolation" 4
.IX Item "variable interpolation"
The \fBinterpolation\fR of
a scalar or array variable into a string.
.IX Xref "variable interpolation interpolation, variable"
.IP "variadic" 4
.IX Item "variadic"
Said of a \fBfunction\fR that happily receives an
indeterminate number of \fBactual arguments\fR.
.IX Xref "variadic (term)"
.IP "vector" 4
.IX Item "vector"
Mathematical jargon for a list of \fBscalar values\fR.
.IX Xref "vectors"
.IP "virtual" 4
.IX Item "virtual"
Providing the appearance of something without the reality,
as in: virtual memory is not real memory. (See also \fBmemory\fR.) The
opposite of XvirtualX is XtransparentX, which means providing the reality
of something without the appearance, as in: Perl handles the
variable-length \s-1UTFX8\s0 character encoding transparently.
.IX Xref "virtual (term)"
.IP "void context" 4
.IX Item "void context"
A form of \fBscalar context\fR in which an
\&\fBexpression\fR is not expected to return any \fBvalue\fR at all and is
evaluated for its \fBside effects\fR alone.
.IX Xref "void context context, void"
.IP "v\-string" 4
.IX Item "v-string"
A XversionX or XvectorX \fBstring\fR
specified with a \f(CW\*(C`v\*(C'\fR followed by a series of decimal integers in dot
notation, for instance, \f(CW\*(C`v1.20.300.4000\*(C'\fR. Each number turns into a
\&\fBcharacter\fR with the specified ordinal value. (The \f(CW\*(C`v\*(C'\fR is optional when
there are at least three integers.)
.IX Xref "vXstrings strings, vXstrings"
.SS "W"
.IX Subsection "W"
.IP "warning" 4
.IX Item "warning"
A message printed to the \f(CW\*(C`STDERR\*(C'\fR stream to the effect that something might be
wrong but isnXt worth blowing up over. See \f(CW\*(C`warn\*(C'\fR in Camel chapter 27,
XFunctionsX and the \f(CW\*(C`warnings\*(C'\fR pragma in Camel chapter 28, XPragmantic
ModulesX.
.IX Xref "warning messages STDERR filehandle, warning messages and"
.IP "watch expression" 4
.IX Item "watch expression"
An expression which, when its value
changes, causes a breakpoint in the Perl debugger.
.IX Xref "watch expression expressions, watch"
.IP "weak reference" 4
.IX Item "weak reference"
A reference that doesnXt get counted
normally. When all the normal references to data disappear, the data
disappears. These are useful for circular references that would never
disappear otherwise.
.IX Xref "weak references references, weak"
.IP "whitespace" 4
.IX Item "whitespace"
A \fBcharacter\fR that moves
your cursor but doesnXt otherwise put anything on your screen. Typically
refers to any of: space, tab, line feed, carriage return, or form feed. In
Unicode, matches many other characters that Unicode considers whitespace,
including the X\-XX .
.IX Xref "whitespace characters characters, whitespace"
.IP "word" 4
.IX Item "word"
In normal XcomputereseX, the piece of data of the size most
efficiently handled by your computer, typically 32 bits or so, give or take a
few powers of 2. In Perl culture, it more often refers to an alphanumeric
\&\fBidentifier\fR (including underscores), or to a string of nonwhitespace
\&\fBcharacters\fR bounded by whitespace or string boundaries.
.IX Xref "words (term)"
.IP "working directory" 4
.IX Item "working directory"
Your current \fBdirectory\fR, from
which relative pathnames are interpreted by the \fBoperating system\fR. The
operating system knows your current directory because you told it with a
\&\f(CW\*(C`chdir\*(C'\fR, or because you started out in the place where your parent
\&\fBprocess\fR was when you were born.
.IX Xref "working directory directories, working"
.IP "wrapper" 4
.IX Item "wrapper"
A program or subroutine that runs some other program or
subroutine for you, modifying some of its input or output to better suit
your purposes.
.IX Xref "wrappers (term)"
.IP "\s-1WYSIWYG\s0" 4
.IX Item "WYSIWYG"
What You See Is What You Get. Usually used when something
that appears on the screen matches how it will eventually look, like PerlXs
\&\f(CW\*(C`format\*(C'\fR declarations. Also used to mean the opposite of magic because
everything works exactly as it appears, as in the three\- argument form of
\&\f(CW\*(C`open\*(C'\fR.
.IX Xref "WYSIWYG acronym"
.SS "X"
.IX Subsection "X"
.IP "\s-1XS\s0" 4
.IX Item "XS"
An extraordinarily
exported, expeditiously excellent, expressly eXternal Subroutine, executed
in existing C or \*(C+ or in an exciting extension language called
(exasperatingly) \s-1XS.\s0
.IX Xref "XS (eXternal Subroutine) eXternal Subroutine (XS)"
.IP "\s-1XSUB\s0" 4
.IX Item "XSUB"
An external \fBsubroutine\fR defined in \fB\s-1XS\s0\fR.
.IX Xref "XSUB (term)"
.SS "Y"
.IX Subsection "Y"
.IP "yacc" 4
.IX Item "yacc"
Yet Another Compiler Compiler. A parser generator without
which Perl probably would not have existed. See the file \fIperly.y\fR in the
Perl source distribution.
.IX Xref "yacc acronym"
.SS "Z"
.IX Subsection "Z"
.IP "zero width" 4
.IX Item "zero width"
A subpattern \fBassertion\fR matching the \fBnull
string\fR between \fBcharacters\fR.
.IX Xref "zeroXwidth assertions subpatterns, zeroXwidth assertions assertions (in regexes), zeroXwidth"
.IP "zombie" 4
.IX Item "zombie"
A process that has died (exited) but
whose parent has not yet received proper notification of its demise by
virtue of having called \f(CW\*(C`wait\*(C'\fR or \f(CW\*(C`waitpid\*(C'\fR. If you \f(CW\*(C`fork\*(C'\fR, you must
clean up after your child processes when they exit; otherwise, the process
table will fill up and your system administrator will Not Be Happy with
you.
.IX Xref "zombie processes processes, zombie"
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Based on the Glossary of \fIProgramming Perl\fR, Fourth Edition,
by Tom Christiansen, brian d foy, Larry Wall, & Jon Orwant.
Copyright (c) 2000, 1996, 1991, 2012 O'Reilly Media, Inc.
This document may be distributed under the same terms as Perl itself.
                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlgpl.1                                    0100644 0001750 0001750 00000043671 12566207440 022416  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGPL 1"
.TH PERLGPL 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlgpl \- the GNU General Public License, version 1
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& You can refer to this document in Pod via "L<perlgpl>"
\& Or you can see this document by entering "perldoc perlgpl"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
.Vb 3
\&        a) the GNU General Public License as published by the Free
\&        Software Foundation; either version 1, or (at your option) any
\&        later version, or
\&
\&        b) the "Artistic License" which comes with this Kit.
.Ve
.PP
This is the \fB\*(L"\s-1GNU\s0 General Public License, version 1\*(R"\fR.
It's here so that modules, programs, etc., that want to declare
this as their distribution license can link to it.
.PP
For the Perl Artistic License, see perlartistic.
.SH "GNU GENERAL PUBLIC LICENSE"
.IX Header "GNU GENERAL PUBLIC LICENSE"
.Vb 2
\&                    GNU GENERAL PUBLIC LICENSE
\&                     Version 1, February 1989
\&
\&  Copyright (C) 1989 Free Software Foundation, Inc.
\&                     51 Franklin St, Fifth Floor, Boston, MA  02110\-1301  USA
\&
\&  Everyone is permitted to copy and distribute verbatim copies
\&  of this license document, but changing it is not allowed.
\&
\&                            Preamble
\&
\&   The license agreements of most software companies try to keep users
\& at the mercy of those companies.  By contrast, our General Public
\& License is intended to guarantee your freedom to share and change free
\& software\-\-to make sure the software is free for all its users.  The
\& General Public License applies to the Free Software Foundation\*(Aqs
\& software and to any other program whose authors commit to using it.
\& You can use it for your programs, too.
\&
\&   When we speak of free software, we are referring to freedom, not
\& price.  Specifically, the General Public License is designed to make
\& sure that you have the freedom to give away or sell copies of free
\& software, that you receive source code or can get it if you want it,
\& that you can change the software or use pieces of it in new free
\& programs; and that you know you can do these things.
\&
\&   To protect your rights, we need to make restrictions that forbid
\& anyone to deny you these rights or to ask you to surrender the rights.
\& These restrictions translate to certain responsibilities for you if you
\& distribute copies of the software, or if you modify it.
\&
\&   For example, if you distribute copies of a such a program, whether
\& gratis or for a fee, you must give the recipients all the rights that
\& you have.  You must make sure that they, too, receive or can get the
\& source code.  And you must tell them their rights.
\&
\&   We protect your rights with two steps: (1) copyright the software, and
\& (2) offer you this license which gives you legal permission to copy,
\& distribute and/or modify the software.
\&
\&   Also, for each author\*(Aqs protection and ours, we want to make certain
\& that everyone understands that there is no warranty for this free
\& software.  If the software is modified by someone else and passed on, we
\& want its recipients to know that what they have is not the original, so
\& that any problems introduced by others will not reflect on the original
\& authors\*(Aq reputations.
\&
\&   The precise terms and conditions for copying, distribution and
\& modification follow.
\&
\&                    GNU GENERAL PUBLIC LICENSE
\&    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
\&
\&   0. This License Agreement applies to any program or other work which
\& contains a notice placed by the copyright holder saying it may be
\& distributed under the terms of this General Public License.  The
\& "Program", below, refers to any such program or work, and a "work based
\& on the Program" means either the Program or any work containing the
\& Program or a portion of it, either verbatim or with modifications.  Each
\& licensee is addressed as "you".
\&
\&   1. You may copy and distribute verbatim copies of the Program\*(Aqs source
\& code as you receive it, in any medium, provided that you conspicuously and
\& appropriately publish on each copy an appropriate copyright notice and
\& disclaimer of warranty; keep intact all the notices that refer to this
\& General Public License and to the absence of any warranty; and give any
\& other recipients of the Program a copy of this General Public License
\& along with the Program.  You may charge a fee for the physical act of
\& transferring a copy.
\&
\&   2. You may modify your copy or copies of the Program or any portion of
\& it, and copy and distribute such modifications under the terms of Paragraph
\& 1 above, provided that you also do the following:
\&
\&     a) cause the modified files to carry prominent notices stating that
\&     you changed the files and the date of any change; and
\&
\&     b) cause the whole of any work that you distribute or publish, that
\&     in whole or in part contains the Program or any part thereof, either
\&     with or without modifications, to be licensed at no charge to all
\&     third parties under the terms of this General Public License (except
\&     that you may choose to grant warranty protection to some or all
\&     third parties, at your option).
\&
\&     c) If the modified program normally reads commands interactively when
\&     run, you must cause it, when started running for such interactive use
\&     in the simplest and most usual way, to print or display an
\&     announcement including an appropriate copyright notice and a notice
\&     that there is no warranty (or else, saying that you provide a
\&     warranty) and that users may redistribute the program under these
\&     conditions, and telling the user how to view a copy of this General
\&     Public License.
\&
\&     d) You may charge a fee for the physical act of transferring a
\&     copy, and you may at your option offer warranty protection in
\&     exchange for a fee.
\&
\& Mere aggregation of another independent work with the Program (or its
\& derivative) on a volume of a storage or distribution medium does not bring
\& the other work under the scope of these terms.
\&
\&   3. You may copy and distribute the Program (or a portion or derivative of
\& it, under Paragraph 2) in object code or executable form under the terms of
\& Paragraphs 1 and 2 above provided that you also do one of the following:
\&
\&     a) accompany it with the complete corresponding machine\-readable
\&     source code, which must be distributed under the terms of
\&     Paragraphs 1 and 2 above; or,
\&
\&     b) accompany it with a written offer, valid for at least three
\&     years, to give any third party free (except for a nominal charge
\&     for the cost of distribution) a complete machine\-readable copy of the
\&     corresponding source code, to be distributed under the terms of
\&     Paragraphs 1 and 2 above; or,
\&
\&     c) accompany it with the information you received as to where the
\&     corresponding source code may be obtained.  (This alternative is
\&     allowed only for noncommercial distribution and only if you
\&     received the program in object code or executable form alone.)
\&
\& Source code for a work means the preferred form of the work for making
\& modifications to it.  For an executable file, complete source code means
\& all the source code for all modules it contains; but, as a special
\& exception, it need not include source code for modules which are standard
\& libraries that accompany the operating system on which the executable
\& file runs, or for standard header files or definitions files that
\& accompany that operating system.
\&
\&   4. You may not copy, modify, sublicense, distribute or transfer the
\& Program except as expressly provided under this General Public License.
\& Any attempt otherwise to copy, modify, sublicense, distribute or transfer
\& the Program is void, and will automatically terminate your rights to use
\& the Program under this License.  However, parties who have received
\& copies, or rights to use copies, from you under this General Public
\& License will not have their licenses terminated so long as such parties
\& remain in full compliance.
\&
\&   5. By copying, distributing or modifying the Program (or any work based
\& on the Program) you indicate your acceptance of this license to do so,
\& and all its terms and conditions.
\&
\&   6. Each time you redistribute the Program (or any work based on the
\& Program), the recipient automatically receives a license from the original
\& licensor to copy, distribute or modify the Program subject to these
\& terms and conditions.  You may not impose any further restrictions on the
\& recipients\*(Aq exercise of the rights granted herein.
\&
\&   7. The Free Software Foundation may publish revised and/or new versions
\& of the General Public License from time to time.  Such new versions will
\& be similar in spirit to the present version, but may differ in detail to
\& address new problems or concerns.
\&
\& Each version is given a distinguishing version number.  If the Program
\& specifies a version number of the license which applies to it and "any
\& later version", you have the option of following the terms and conditions
\& either of that version or of any later version published by the Free
\& Software Foundation.  If the Program does not specify a version number of
\& the license, you may choose any version ever published by the Free Software
\& Foundation.
\&
\&   8. If you wish to incorporate parts of the Program into other free
\& programs whose distribution conditions are different, write to the author
\& to ask for permission.  For software which is copyrighted by the Free
\& Software Foundation, write to the Free Software Foundation; we sometimes
\& make exceptions for this.  Our decision will be guided by the two goals
\& of preserving the free status of all derivatives of our free software and
\& of promoting the sharing and reuse of software generally.
\&
\&                            NO WARRANTY
\&
\&   9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
\& FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
\& OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
\& PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
\& OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
\& MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
\& TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
\& PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
\& REPAIR OR CORRECTION.
\&
\&   10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
\& WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
\& REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
\& INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
\& OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
\& TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
\& YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
\& PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
\& POSSIBILITY OF SUCH DAMAGES.
\&
\&                     END OF TERMS AND CONDITIONS
\&
\&        Appendix: How to Apply These Terms to Your New Programs
\&
\&   If you develop a new program, and you want it to be of the greatest
\& possible use to humanity, the best way to achieve this is to make it
\& free software which everyone can redistribute and change under these
\& terms.
\&
\&   To do so, attach the following notices to the program.  It is safest to
\& attach them to the start of each source file to most effectively convey
\& the exclusion of warranty; and each file should have at least the
\& "copyright" line and a pointer to where the full notice is found.
\&
\&     <one line to give the program\*(Aqs name and a brief idea of what it does.>
\&     Copyright (C) 19yy  <name of author>
\&
\&     This program is free software; you can redistribute it and/or modify
\&     it under the terms of the GNU General Public License as published by
\&     the Free Software Foundation; either version 1, or (at your option)
\&     any later version.
\&
\&     This program is distributed in the hope that it will be useful,
\&     but WITHOUT ANY WARRANTY; without even the implied warranty of
\&     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\&     GNU General Public License for more details.
\&
\&     You should have received a copy of the GNU General Public License
\&     along with this program; if not, write to the Free Software
\&     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA
\&     02110\-1301 USA
\&
\&
\& Also add information on how to contact you by electronic and paper mail.
\&
\& If the program is interactive, make it output a short notice like this
\& when it starts in an interactive mode:
\&
\&     Gnomovision version 69, Copyright (C) 19xx name of author
\&     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type \*(Aqshow w\*(Aq.
\&     This is free software, and you are welcome to redistribute it
\&     under certain conditions; type \*(Aqshow c\*(Aq for details.
\&
\& The hypothetical commands \*(Aqshow w\*(Aq and \*(Aqshow c\*(Aq should show the
\& appropriate parts of the General Public License.  Of course, the
\& commands you use may be called something other than \*(Aqshow w\*(Aq and \*(Aqshow
\& c\*(Aq; they could even be mouse\-clicks or menu items\-\-whatever suits your
\& program.
\&
\& You should also get your employer (if you work as a programmer) or your
\& school, if any, to sign a "copyright disclaimer" for the program, if
\& necessary.  Here a sample; alter the names:
\&
\&   Yoyodyne, Inc., hereby disclaims all copyright interest in the
\&   program \*(AqGnomovision\*(Aq (a program to direct compilers to make passes
\&   at assemblers) written by James Hacker.
\&
\&   <signature of Ty Coon>, 1 April 1989
\&   Ty Coon, President of Vice
\&
\& That\*(Aqs all there is to it!
.Ve
                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlgpl5.16.1                                0100644 0001750 0001750 00000043435 12566207420 022724  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGPL 1"
.TH PERLGPL 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlgpl \- the GNU General Public License, version 1
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& You can refer to this document in Pod via "L<perlgpl>"
\& Or you can see this document by entering "perldoc perlgpl"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
.Vb 3
\&        a) the GNU General Public License as published by the Free
\&        Software Foundation; either version 1, or (at your option) any
\&        later version, or
\&
\&        b) the "Artistic License" which comes with this Kit.
.Ve
.PP
This is the \fB\*(L"\s-1GNU\s0 General Public License, version 1\*(R"\fR.
It's here so that modules, programs, etc., that want to declare
this as their distribution license can link to it.
.PP
For the Perl Artistic License, see perlartistic.
.SH "GNU GENERAL PUBLIC LICENSE"
.IX Header "GNU GENERAL PUBLIC LICENSE"
.Vb 2
\&                    GNU GENERAL PUBLIC LICENSE
\&                     Version 1, February 1989
\& 
\&  Copyright (C) 1989 Free Software Foundation, Inc.
\&                     51 Franklin St, Fifth Floor, Boston, MA  02110\-1301  USA
\& 
\&  Everyone is permitted to copy and distribute verbatim copies
\&  of this license document, but changing it is not allowed.
\& 
\&                            Preamble
\& 
\&   The license agreements of most software companies try to keep users
\& at the mercy of those companies.  By contrast, our General Public
\& License is intended to guarantee your freedom to share and change free
\& software\-\-to make sure the software is free for all its users.  The
\& General Public License applies to the Free Software Foundation\*(Aqs
\& software and to any other program whose authors commit to using it.
\& You can use it for your programs, too.
\& 
\&   When we speak of free software, we are referring to freedom, not
\& price.  Specifically, the General Public License is designed to make
\& sure that you have the freedom to give away or sell copies of free
\& software, that you receive source code or can get it if you want it,
\& that you can change the software or use pieces of it in new free
\& programs; and that you know you can do these things.
\& 
\&   To protect your rights, we need to make restrictions that forbid
\& anyone to deny you these rights or to ask you to surrender the rights.
\& These restrictions translate to certain responsibilities for you if you
\& distribute copies of the software, or if you modify it.
\& 
\&   For example, if you distribute copies of a such a program, whether
\& gratis or for a fee, you must give the recipients all the rights that
\& you have.  You must make sure that they, too, receive or can get the
\& source code.  And you must tell them their rights.
\& 
\&   We protect your rights with two steps: (1) copyright the software, and
\& (2) offer you this license which gives you legal permission to copy,
\& distribute and/or modify the software.
\& 
\&   Also, for each author\*(Aqs protection and ours, we want to make certain
\& that everyone understands that there is no warranty for this free
\& software.  If the software is modified by someone else and passed on, we
\& want its recipients to know that what they have is not the original, so
\& that any problems introduced by others will not reflect on the original
\& authors\*(Aq reputations.
\& 
\&   The precise terms and conditions for copying, distribution and
\& modification follow.
\&  
\&                    GNU GENERAL PUBLIC LICENSE
\&    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
\& 
\&   0. This License Agreement applies to any program or other work which
\& contains a notice placed by the copyright holder saying it may be
\& distributed under the terms of this General Public License.  The
\& "Program", below, refers to any such program or work, and a "work based
\& on the Program" means either the Program or any work containing the
\& Program or a portion of it, either verbatim or with modifications.  Each
\& licensee is addressed as "you".
\& 
\&   1. You may copy and distribute verbatim copies of the Program\*(Aqs source
\& code as you receive it, in any medium, provided that you conspicuously and
\& appropriately publish on each copy an appropriate copyright notice and
\& disclaimer of warranty; keep intact all the notices that refer to this
\& General Public License and to the absence of any warranty; and give any
\& other recipients of the Program a copy of this General Public License
\& along with the Program.  You may charge a fee for the physical act of
\& transferring a copy.
\& 
\&   2. You may modify your copy or copies of the Program or any portion of
\& it, and copy and distribute such modifications under the terms of Paragraph
\& 1 above, provided that you also do the following:
\& 
\&     a) cause the modified files to carry prominent notices stating that
\&     you changed the files and the date of any change; and
\& 
\&     b) cause the whole of any work that you distribute or publish, that
\&     in whole or in part contains the Program or any part thereof, either
\&     with or without modifications, to be licensed at no charge to all
\&     third parties under the terms of this General Public License (except
\&     that you may choose to grant warranty protection to some or all
\&     third parties, at your option).
\& 
\&     c) If the modified program normally reads commands interactively when
\&     run, you must cause it, when started running for such interactive use
\&     in the simplest and most usual way, to print or display an
\&     announcement including an appropriate copyright notice and a notice
\&     that there is no warranty (or else, saying that you provide a
\&     warranty) and that users may redistribute the program under these
\&     conditions, and telling the user how to view a copy of this General
\&     Public License.
\& 
\&     d) You may charge a fee for the physical act of transferring a
\&     copy, and you may at your option offer warranty protection in
\&     exchange for a fee.
\& 
\& Mere aggregation of another independent work with the Program (or its
\& derivative) on a volume of a storage or distribution medium does not bring
\& the other work under the scope of these terms.
\&  
\&   3. You may copy and distribute the Program (or a portion or derivative of
\& it, under Paragraph 2) in object code or executable form under the terms of
\& Paragraphs 1 and 2 above provided that you also do one of the following:
\& 
\&     a) accompany it with the complete corresponding machine\-readable
\&     source code, which must be distributed under the terms of
\&     Paragraphs 1 and 2 above; or,
\& 
\&     b) accompany it with a written offer, valid for at least three
\&     years, to give any third party free (except for a nominal charge
\&     for the cost of distribution) a complete machine\-readable copy of the
\&     corresponding source code, to be distributed under the terms of
\&     Paragraphs 1 and 2 above; or,
\& 
\&     c) accompany it with the information you received as to where the
\&     corresponding source code may be obtained.  (This alternative is
\&     allowed only for noncommercial distribution and only if you
\&     received the program in object code or executable form alone.)
\& 
\& Source code for a work means the preferred form of the work for making
\& modifications to it.  For an executable file, complete source code means
\& all the source code for all modules it contains; but, as a special
\& exception, it need not include source code for modules which are standard
\& libraries that accompany the operating system on which the executable
\& file runs, or for standard header files or definitions files that
\& accompany that operating system.
\& 
\&   4. You may not copy, modify, sublicense, distribute or transfer the
\& Program except as expressly provided under this General Public License.
\& Any attempt otherwise to copy, modify, sublicense, distribute or transfer
\& the Program is void, and will automatically terminate your rights to use
\& the Program under this License.  However, parties who have received
\& copies, or rights to use copies, from you under this General Public
\& License will not have their licenses terminated so long as such parties
\& remain in full compliance.
\& 
\&   5. By copying, distributing or modifying the Program (or any work based
\& on the Program) you indicate your acceptance of this license to do so,
\& and all its terms and conditions.
\& 
\&   6. Each time you redistribute the Program (or any work based on the
\& Program), the recipient automatically receives a license from the original
\& licensor to copy, distribute or modify the Program subject to these
\& terms and conditions.  You may not impose any further restrictions on the
\& recipients\*(Aq exercise of the rights granted herein.
\&  
\&   7. The Free Software Foundation may publish revised and/or new versions
\& of the General Public License from time to time.  Such new versions will
\& be similar in spirit to the present version, but may differ in detail to
\& address new problems or concerns.
\& 
\& Each version is given a distinguishing version number.  If the Program
\& specifies a version number of the license which applies to it and "any
\& later version", you have the option of following the terms and conditions
\& either of that version or of any later version published by the Free
\& Software Foundation.  If the Program does not specify a version number of
\& the license, you may choose any version ever published by the Free Software
\& Foundation.
\& 
\&   8. If you wish to incorporate parts of the Program into other free
\& programs whose distribution conditions are different, write to the author
\& to ask for permission.  For software which is copyrighted by the Free
\& Software Foundation, write to the Free Software Foundation; we sometimes
\& make exceptions for this.  Our decision will be guided by the two goals
\& of preserving the free status of all derivatives of our free software and
\& of promoting the sharing and reuse of software generally.
\& 
\&                            NO WARRANTY
\& 
\&   9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
\& FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
\& OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
\& PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
\& OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
\& MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
\& TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
\& PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
\& REPAIR OR CORRECTION.
\& 
\&   10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
\& WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
\& REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
\& INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
\& OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
\& TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
\& YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
\& PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
\& POSSIBILITY OF SUCH DAMAGES.
\& 
\&                     END OF TERMS AND CONDITIONS
\& 
\&        Appendix: How to Apply These Terms to Your New Programs
\& 
\&   If you develop a new program, and you want it to be of the greatest
\& possible use to humanity, the best way to achieve this is to make it
\& free software which everyone can redistribute and change under these
\& terms.
\& 
\&   To do so, attach the following notices to the program.  It is safest to
\& attach them to the start of each source file to most effectively convey
\& the exclusion of warranty; and each file should have at least the
\& "copyright" line and a pointer to where the full notice is found.
\& 
\&     <one line to give the program\*(Aqs name and a brief idea of what it does.>
\&     Copyright (C) 19yy  <name of author>
\& 
\&     This program is free software; you can redistribute it and/or modify
\&     it under the terms of the GNU General Public License as published by
\&     the Free Software Foundation; either version 1, or (at your option)
\&     any later version.
\& 
\&     This program is distributed in the hope that it will be useful,
\&     but WITHOUT ANY WARRANTY; without even the implied warranty of
\&     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\&     GNU General Public License for more details.
\& 
\&     You should have received a copy of the GNU General Public License
\&     along with this program; if not, write to the Free Software
\&     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA
\&     02110\-1301 USA
\& 
\& 
\& Also add information on how to contact you by electronic and paper mail.
\& 
\& If the program is interactive, make it output a short notice like this
\& when it starts in an interactive mode:
\& 
\&     Gnomovision version 69, Copyright (C) 19xx name of author
\&     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type \*(Aqshow w\*(Aq.
\&     This is free software, and you are welcome to redistribute it
\&     under certain conditions; type \*(Aqshow c\*(Aq for details.
\& 
\& The hypothetical commands \*(Aqshow w\*(Aq and \*(Aqshow c\*(Aq should show the
\& appropriate parts of the General Public License.  Of course, the
\& commands you use may be called something other than \*(Aqshow w\*(Aq and \*(Aqshow
\& c\*(Aq; they could even be mouse\-clicks or menu items\-\-whatever suits your
\& program.
\& 
\& You should also get your employer (if you work as a programmer) or your
\& school, if any, to sign a "copyright disclaimer" for the program, if
\& necessary.  Here a sample; alter the names:
\& 
\&   Yoyodyne, Inc., hereby disclaims all copyright interest in the
\&   program \*(AqGnomovision\*(Aq (a program to direct compilers to make passes
\&   at assemblers) written by James Hacker.
\& 
\&   <signature of Ty Coon>, 1 April 1989
\&   Ty Coon, President of Vice
\& 
\& That\*(Aqs all there is to it!
.Ve
                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlgpl5.18.1                                0100644 0001750 0001750 00000043671 12566207440 022732  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGPL 1"
.TH PERLGPL 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlgpl \- the GNU General Public License, version 1
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& You can refer to this document in Pod via "L<perlgpl>"
\& Or you can see this document by entering "perldoc perlgpl"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl is free software; you can redistribute it and/or modify
it under the terms of either:
.PP
.Vb 3
\&        a) the GNU General Public License as published by the Free
\&        Software Foundation; either version 1, or (at your option) any
\&        later version, or
\&
\&        b) the "Artistic License" which comes with this Kit.
.Ve
.PP
This is the \fB\*(L"\s-1GNU\s0 General Public License, version 1\*(R"\fR.
It's here so that modules, programs, etc., that want to declare
this as their distribution license can link to it.
.PP
For the Perl Artistic License, see perlartistic.
.SH "GNU GENERAL PUBLIC LICENSE"
.IX Header "GNU GENERAL PUBLIC LICENSE"
.Vb 2
\&                    GNU GENERAL PUBLIC LICENSE
\&                     Version 1, February 1989
\&
\&  Copyright (C) 1989 Free Software Foundation, Inc.
\&                     51 Franklin St, Fifth Floor, Boston, MA  02110\-1301  USA
\&
\&  Everyone is permitted to copy and distribute verbatim copies
\&  of this license document, but changing it is not allowed.
\&
\&                            Preamble
\&
\&   The license agreements of most software companies try to keep users
\& at the mercy of those companies.  By contrast, our General Public
\& License is intended to guarantee your freedom to share and change free
\& software\-\-to make sure the software is free for all its users.  The
\& General Public License applies to the Free Software Foundation\*(Aqs
\& software and to any other program whose authors commit to using it.
\& You can use it for your programs, too.
\&
\&   When we speak of free software, we are referring to freedom, not
\& price.  Specifically, the General Public License is designed to make
\& sure that you have the freedom to give away or sell copies of free
\& software, that you receive source code or can get it if you want it,
\& that you can change the software or use pieces of it in new free
\& programs; and that you know you can do these things.
\&
\&   To protect your rights, we need to make restrictions that forbid
\& anyone to deny you these rights or to ask you to surrender the rights.
\& These restrictions translate to certain responsibilities for you if you
\& distribute copies of the software, or if you modify it.
\&
\&   For example, if you distribute copies of a such a program, whether
\& gratis or for a fee, you must give the recipients all the rights that
\& you have.  You must make sure that they, too, receive or can get the
\& source code.  And you must tell them their rights.
\&
\&   We protect your rights with two steps: (1) copyright the software, and
\& (2) offer you this license which gives you legal permission to copy,
\& distribute and/or modify the software.
\&
\&   Also, for each author\*(Aqs protection and ours, we want to make certain
\& that everyone understands that there is no warranty for this free
\& software.  If the software is modified by someone else and passed on, we
\& want its recipients to know that what they have is not the original, so
\& that any problems introduced by others will not reflect on the original
\& authors\*(Aq reputations.
\&
\&   The precise terms and conditions for copying, distribution and
\& modification follow.
\&
\&                    GNU GENERAL PUBLIC LICENSE
\&    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
\&
\&   0. This License Agreement applies to any program or other work which
\& contains a notice placed by the copyright holder saying it may be
\& distributed under the terms of this General Public License.  The
\& "Program", below, refers to any such program or work, and a "work based
\& on the Program" means either the Program or any work containing the
\& Program or a portion of it, either verbatim or with modifications.  Each
\& licensee is addressed as "you".
\&
\&   1. You may copy and distribute verbatim copies of the Program\*(Aqs source
\& code as you receive it, in any medium, provided that you conspicuously and
\& appropriately publish on each copy an appropriate copyright notice and
\& disclaimer of warranty; keep intact all the notices that refer to this
\& General Public License and to the absence of any warranty; and give any
\& other recipients of the Program a copy of this General Public License
\& along with the Program.  You may charge a fee for the physical act of
\& transferring a copy.
\&
\&   2. You may modify your copy or copies of the Program or any portion of
\& it, and copy and distribute such modifications under the terms of Paragraph
\& 1 above, provided that you also do the following:
\&
\&     a) cause the modified files to carry prominent notices stating that
\&     you changed the files and the date of any change; and
\&
\&     b) cause the whole of any work that you distribute or publish, that
\&     in whole or in part contains the Program or any part thereof, either
\&     with or without modifications, to be licensed at no charge to all
\&     third parties under the terms of this General Public License (except
\&     that you may choose to grant warranty protection to some or all
\&     third parties, at your option).
\&
\&     c) If the modified program normally reads commands interactively when
\&     run, you must cause it, when started running for such interactive use
\&     in the simplest and most usual way, to print or display an
\&     announcement including an appropriate copyright notice and a notice
\&     that there is no warranty (or else, saying that you provide a
\&     warranty) and that users may redistribute the program under these
\&     conditions, and telling the user how to view a copy of this General
\&     Public License.
\&
\&     d) You may charge a fee for the physical act of transferring a
\&     copy, and you may at your option offer warranty protection in
\&     exchange for a fee.
\&
\& Mere aggregation of another independent work with the Program (or its
\& derivative) on a volume of a storage or distribution medium does not bring
\& the other work under the scope of these terms.
\&
\&   3. You may copy and distribute the Program (or a portion or derivative of
\& it, under Paragraph 2) in object code or executable form under the terms of
\& Paragraphs 1 and 2 above provided that you also do one of the following:
\&
\&     a) accompany it with the complete corresponding machine\-readable
\&     source code, which must be distributed under the terms of
\&     Paragraphs 1 and 2 above; or,
\&
\&     b) accompany it with a written offer, valid for at least three
\&     years, to give any third party free (except for a nominal charge
\&     for the cost of distribution) a complete machine\-readable copy of the
\&     corresponding source code, to be distributed under the terms of
\&     Paragraphs 1 and 2 above; or,
\&
\&     c) accompany it with the information you received as to where the
\&     corresponding source code may be obtained.  (This alternative is
\&     allowed only for noncommercial distribution and only if you
\&     received the program in object code or executable form alone.)
\&
\& Source code for a work means the preferred form of the work for making
\& modifications to it.  For an executable file, complete source code means
\& all the source code for all modules it contains; but, as a special
\& exception, it need not include source code for modules which are standard
\& libraries that accompany the operating system on which the executable
\& file runs, or for standard header files or definitions files that
\& accompany that operating system.
\&
\&   4. You may not copy, modify, sublicense, distribute or transfer the
\& Program except as expressly provided under this General Public License.
\& Any attempt otherwise to copy, modify, sublicense, distribute or transfer
\& the Program is void, and will automatically terminate your rights to use
\& the Program under this License.  However, parties who have received
\& copies, or rights to use copies, from you under this General Public
\& License will not have their licenses terminated so long as such parties
\& remain in full compliance.
\&
\&   5. By copying, distributing or modifying the Program (or any work based
\& on the Program) you indicate your acceptance of this license to do so,
\& and all its terms and conditions.
\&
\&   6. Each time you redistribute the Program (or any work based on the
\& Program), the recipient automatically receives a license from the original
\& licensor to copy, distribute or modify the Program subject to these
\& terms and conditions.  You may not impose any further restrictions on the
\& recipients\*(Aq exercise of the rights granted herein.
\&
\&   7. The Free Software Foundation may publish revised and/or new versions
\& of the General Public License from time to time.  Such new versions will
\& be similar in spirit to the present version, but may differ in detail to
\& address new problems or concerns.
\&
\& Each version is given a distinguishing version number.  If the Program
\& specifies a version number of the license which applies to it and "any
\& later version", you have the option of following the terms and conditions
\& either of that version or of any later version published by the Free
\& Software Foundation.  If the Program does not specify a version number of
\& the license, you may choose any version ever published by the Free Software
\& Foundation.
\&
\&   8. If you wish to incorporate parts of the Program into other free
\& programs whose distribution conditions are different, write to the author
\& to ask for permission.  For software which is copyrighted by the Free
\& Software Foundation, write to the Free Software Foundation; we sometimes
\& make exceptions for this.  Our decision will be guided by the two goals
\& of preserving the free status of all derivatives of our free software and
\& of promoting the sharing and reuse of software generally.
\&
\&                            NO WARRANTY
\&
\&   9. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
\& FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
\& OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
\& PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
\& OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
\& MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
\& TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
\& PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
\& REPAIR OR CORRECTION.
\&
\&   10. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
\& WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
\& REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
\& INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
\& OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
\& TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
\& YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
\& PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
\& POSSIBILITY OF SUCH DAMAGES.
\&
\&                     END OF TERMS AND CONDITIONS
\&
\&        Appendix: How to Apply These Terms to Your New Programs
\&
\&   If you develop a new program, and you want it to be of the greatest
\& possible use to humanity, the best way to achieve this is to make it
\& free software which everyone can redistribute and change under these
\& terms.
\&
\&   To do so, attach the following notices to the program.  It is safest to
\& attach them to the start of each source file to most effectively convey
\& the exclusion of warranty; and each file should have at least the
\& "copyright" line and a pointer to where the full notice is found.
\&
\&     <one line to give the program\*(Aqs name and a brief idea of what it does.>
\&     Copyright (C) 19yy  <name of author>
\&
\&     This program is free software; you can redistribute it and/or modify
\&     it under the terms of the GNU General Public License as published by
\&     the Free Software Foundation; either version 1, or (at your option)
\&     any later version.
\&
\&     This program is distributed in the hope that it will be useful,
\&     but WITHOUT ANY WARRANTY; without even the implied warranty of
\&     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
\&     GNU General Public License for more details.
\&
\&     You should have received a copy of the GNU General Public License
\&     along with this program; if not, write to the Free Software
\&     Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston MA
\&     02110\-1301 USA
\&
\&
\& Also add information on how to contact you by electronic and paper mail.
\&
\& If the program is interactive, make it output a short notice like this
\& when it starts in an interactive mode:
\&
\&     Gnomovision version 69, Copyright (C) 19xx name of author
\&     Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type \*(Aqshow w\*(Aq.
\&     This is free software, and you are welcome to redistribute it
\&     under certain conditions; type \*(Aqshow c\*(Aq for details.
\&
\& The hypothetical commands \*(Aqshow w\*(Aq and \*(Aqshow c\*(Aq should show the
\& appropriate parts of the General Public License.  Of course, the
\& commands you use may be called something other than \*(Aqshow w\*(Aq and \*(Aqshow
\& c\*(Aq; they could even be mouse\-clicks or menu items\-\-whatever suits your
\& program.
\&
\& You should also get your employer (if you work as a programmer) or your
\& school, if any, to sign a "copyright disclaimer" for the program, if
\& necessary.  Here a sample; alter the names:
\&
\&   Yoyodyne, Inc., hereby disclaims all copyright interest in the
\&   program \*(AqGnomovision\*(Aq (a program to direct compilers to make passes
\&   at assemblers) written by James Hacker.
\&
\&   <signature of Ty Coon>, 1 April 1989
\&   Ty Coon, President of Vice
\&
\& That\*(Aqs all there is to it!
.Ve
                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlguts.1                                   0100644 0001750 0001750 00000424213 12566207441 022612  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGUTS 1"
.TH PERLGUTS 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlguts \- Introduction to the Perl API
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document attempts to describe how to use the Perl \s-1API,\s0 as well as
to provide some info on the basic workings of the Perl core. It is far
from complete and probably contains many errors. Please refer any
questions or comments to the author below.
.SH "Variables"
.IX Header "Variables"
.SS "Datatypes"
.IX Subsection "Datatypes"
Perl has three typedefs that handle Perl's three main data types:
.PP
.Vb 3
\&    SV  Scalar Value
\&    AV  Array Value
\&    HV  Hash Value
.Ve
.PP
Each typedef has specific routines that manipulate the various data types.
.ie n .SS "What is an ""\s-1IV""\s0?"
.el .SS "What is an ``\s-1IV''\s0?"
.IX Subsection "What is an IV?"
Perl uses a special typedef \s-1IV\s0 which is a simple signed integer type that is
guaranteed to be large enough to hold a pointer (as well as an integer).
Additionally, there is the \s-1UV,\s0 which is simply an unsigned \s-1IV.\s0
.PP
Perl also uses two special typedefs, I32 and I16, which will always be at
least 32\-bits and 16\-bits long, respectively. (Again, there are U32 and U16,
as well.)  They will usually be exactly 32 and 16 bits long, but on Crays
they will both be 64 bits.
.SS "Working with SVs"
.IX Subsection "Working with SVs"
An \s-1SV\s0 can be created and loaded with one command.  There are five types of
values that can be loaded: an integer value (\s-1IV\s0), an unsigned integer
value (\s-1UV\s0), a double (\s-1NV\s0), a string (\s-1PV\s0), and another scalar (\s-1SV\s0).
(\*(L"\s-1PV\*(R"\s0 stands for \*(L"Pointer Value\*(R".  You might think that it is misnamed
because it is described as pointing only to strings.  However, it is
possible to have it point to other things.  For example, inversion
lists, used in regular expression data structures, are scalars, each
consisting of an array of UVs which are accessed through PVs.  But,
using it for non-strings requires care, as the underlying assumption of
much of the internals is that PVs are just for strings.  Often, for
example, a trailing \s-1NUL\s0 is tacked on automatically.  The non-string use
is documented only in this paragraph.)
.PP
The seven routines are:
.PP
.Vb 7
\&    SV*  newSViv(IV);
\&    SV*  newSVuv(UV);
\&    SV*  newSVnv(double);
\&    SV*  newSVpv(const char*, STRLEN);
\&    SV*  newSVpvn(const char*, STRLEN);
\&    SV*  newSVpvf(const char*, ...);
\&    SV*  newSVsv(SV*);
.Ve
.PP
\&\f(CW\*(C`STRLEN\*(C'\fR is an integer type (Size_t, usually defined as size_t in
\&\fIconfig.h\fR) guaranteed to be large enough to represent the size of
any string that perl can handle.
.PP
In the unlikely case of a \s-1SV\s0 requiring more complex initialisation, you
can create an empty \s-1SV\s0 with newSV(len).  If \f(CW\*(C`len\*(C'\fR is 0 an empty \s-1SV\s0 of
type \s-1NULL\s0 is returned, else an \s-1SV\s0 of type \s-1PV\s0 is returned with len + 1 (for
the \s-1NUL\s0) bytes of storage allocated, accessible via SvPVX.  In both cases
the \s-1SV\s0 has the undef value.
.PP
.Vb 3
\&    SV *sv = newSV(0);   /* no storage allocated  */
\&    SV *sv = newSV(10);  /* 10 (+1) bytes of uninitialised storage
\&                          * allocated */
.Ve
.PP
To change the value of an \fIalready-existing\fR \s-1SV,\s0 there are eight routines:
.PP
.Vb 9
\&    void  sv_setiv(SV*, IV);
\&    void  sv_setuv(SV*, UV);
\&    void  sv_setnv(SV*, double);
\&    void  sv_setpv(SV*, const char*);
\&    void  sv_setpvn(SV*, const char*, STRLEN)
\&    void  sv_setpvf(SV*, const char*, ...);
\&    void  sv_vsetpvfn(SV*, const char*, STRLEN, va_list *,
\&                                                    SV **, I32, bool *);
\&    void  sv_setsv(SV*, SV*);
.Ve
.PP
Notice that you can choose to specify the length of the string to be
assigned by using \f(CW\*(C`sv_setpvn\*(C'\fR, \f(CW\*(C`newSVpvn\*(C'\fR, or \f(CW\*(C`newSVpv\*(C'\fR, or you may
allow Perl to calculate the length by using \f(CW\*(C`sv_setpv\*(C'\fR or by specifying
0 as the second argument to \f(CW\*(C`newSVpv\*(C'\fR.  Be warned, though, that Perl will
determine the string's length by using \f(CW\*(C`strlen\*(C'\fR, which depends on the
string terminating with a \s-1NUL\s0 character, and not otherwise containing
NULs.
.PP
The arguments of \f(CW\*(C`sv_setpvf\*(C'\fR are processed like \f(CW\*(C`sprintf\*(C'\fR, and the
formatted output becomes the value.
.PP
\&\f(CW\*(C`sv_vsetpvfn\*(C'\fR is an analogue of \f(CW\*(C`vsprintf\*(C'\fR, but it allows you to specify
either a pointer to a variable argument list or the address and length of
an array of SVs.  The last argument points to a boolean; on return, if that
boolean is true, then locale-specific information has been used to format
the string, and the string's contents are therefore untrustworthy (see
perlsec).  This pointer may be \s-1NULL\s0 if that information is not
important.  Note that this function requires you to specify the length of
the format.
.PP
The \f(CW\*(C`sv_set*()\*(C'\fR functions are not generic enough to operate on values
that have \*(L"magic\*(R".  See \*(L"Magic Virtual Tables\*(R" later in this document.
.PP
All SVs that contain strings should be terminated with a \s-1NUL\s0 character.
If it is not NUL-terminated there is a risk of
core dumps and corruptions from code which passes the string to C
functions or system calls which expect a NUL-terminated string.
Perl's own functions typically add a trailing \s-1NUL\s0 for this reason.
Nevertheless, you should be very careful when you pass a string stored
in an \s-1SV\s0 to a C function or system call.
.PP
To access the actual value that an \s-1SV\s0 points to, you can use the macros:
.PP
.Vb 5
\&    SvIV(SV*)
\&    SvUV(SV*)
\&    SvNV(SV*)
\&    SvPV(SV*, STRLEN len)
\&    SvPV_nolen(SV*)
.Ve
.PP
which will automatically coerce the actual scalar type into an \s-1IV, UV,\s0 double,
or string.
.PP
In the \f(CW\*(C`SvPV\*(C'\fR macro, the length of the string returned is placed into the
variable \f(CW\*(C`len\*(C'\fR (this is a macro, so you do \fInot\fR use \f(CW&len\fR).  If you do
not care what the length of the data is, use the \f(CW\*(C`SvPV_nolen\*(C'\fR macro.
Historically the \f(CW\*(C`SvPV\*(C'\fR macro with the global variable \f(CW\*(C`PL_na\*(C'\fR has been
used in this case.  But that can be quite inefficient because \f(CW\*(C`PL_na\*(C'\fR must
be accessed in thread-local storage in threaded Perl.  In any case, remember
that Perl allows arbitrary strings of data that may both contain NULs and
might not be terminated by a \s-1NUL.\s0
.PP
Also remember that C doesn't allow you to safely say \f(CW\*(C`foo(SvPV(s, len),
len);\*(C'\fR. It might work with your compiler, but it won't work for everyone.
Break this sort of statement up into separate assignments:
.PP
.Vb 5
\&    SV *s;
\&    STRLEN len;
\&    char *ptr;
\&    ptr = SvPV(s, len);
\&    foo(ptr, len);
.Ve
.PP
If you want to know if the scalar value is \s-1TRUE,\s0 you can use:
.PP
.Vb 1
\&    SvTRUE(SV*)
.Ve
.PP
Although Perl will automatically grow strings for you, if you need to force
Perl to allocate more memory for your \s-1SV,\s0 you can use the macro
.PP
.Vb 1
\&    SvGROW(SV*, STRLEN newlen)
.Ve
.PP
which will determine if more memory needs to be allocated.  If so, it will
call the function \f(CW\*(C`sv_grow\*(C'\fR.  Note that \f(CW\*(C`SvGROW\*(C'\fR can only increase, not
decrease, the allocated memory of an \s-1SV\s0 and that it does not automatically
add space for the trailing \s-1NUL\s0 byte (perl's own string functions typically do
\&\f(CW\*(C`SvGROW(sv, len + 1)\*(C'\fR).
.PP
If you have an \s-1SV\s0 and want to know what kind of data Perl thinks is stored
in it, you can use the following macros to check the type of \s-1SV\s0 you have.
.PP
.Vb 3
\&    SvIOK(SV*)
\&    SvNOK(SV*)
\&    SvPOK(SV*)
.Ve
.PP
You can get and set the current length of the string stored in an \s-1SV\s0 with
the following macros:
.PP
.Vb 2
\&    SvCUR(SV*)
\&    SvCUR_set(SV*, I32 val)
.Ve
.PP
You can also get a pointer to the end of the string stored in the \s-1SV\s0
with the macro:
.PP
.Vb 1
\&    SvEND(SV*)
.Ve
.PP
But note that these last three macros are valid only if \f(CW\*(C`SvPOK()\*(C'\fR is true.
.PP
If you want to append something to the end of string stored in an \f(CW\*(C`SV*\*(C'\fR,
you can use the following functions:
.PP
.Vb 6
\&    void  sv_catpv(SV*, const char*);
\&    void  sv_catpvn(SV*, const char*, STRLEN);
\&    void  sv_catpvf(SV*, const char*, ...);
\&    void  sv_vcatpvfn(SV*, const char*, STRLEN, va_list *, SV **,
\&                                                             I32, bool);
\&    void  sv_catsv(SV*, SV*);
.Ve
.PP
The first function calculates the length of the string to be appended by
using \f(CW\*(C`strlen\*(C'\fR.  In the second, you specify the length of the string
yourself.  The third function processes its arguments like \f(CW\*(C`sprintf\*(C'\fR and
appends the formatted output.  The fourth function works like \f(CW\*(C`vsprintf\*(C'\fR.
You can specify the address and length of an array of SVs instead of the
va_list argument. The fifth function extends the string stored in the first
\&\s-1SV\s0 with the string stored in the second \s-1SV. \s0 It also forces the second \s-1SV\s0
to be interpreted as a string.
.PP
The \f(CW\*(C`sv_cat*()\*(C'\fR functions are not generic enough to operate on values that
have \*(L"magic\*(R".  See \*(L"Magic Virtual Tables\*(R" later in this document.
.PP
If you know the name of a scalar variable, you can get a pointer to its \s-1SV\s0
by using the following:
.PP
.Vb 1
\&    SV*  get_sv("package::varname", 0);
.Ve
.PP
This returns \s-1NULL\s0 if the variable does not exist.
.PP
If you want to know if this variable (or any other \s-1SV\s0) is actually \f(CW\*(C`defined\*(C'\fR,
you can call:
.PP
.Vb 1
\&    SvOK(SV*)
.Ve
.PP
The scalar \f(CW\*(C`undef\*(C'\fR value is stored in an \s-1SV\s0 instance called \f(CW\*(C`PL_sv_undef\*(C'\fR.
.PP
Its address can be used whenever an \f(CW\*(C`SV*\*(C'\fR is needed. Make sure that
you don't try to compare a random sv with \f(CW&PL_sv_undef\fR. For example
when interfacing Perl code, it'll work correctly for:
.PP
.Vb 1
\&  foo(undef);
.Ve
.PP
But won't work when called as:
.PP
.Vb 2
\&  $x = undef;
\&  foo($x);
.Ve
.PP
So to repeat always use \fISvOK()\fR to check whether an sv is defined.
.PP
Also you have to be careful when using \f(CW&PL_sv_undef\fR as a value in
AVs or HVs (see \*(L"AVs, HVs and undefined values\*(R").
.PP
There are also the two values \f(CW\*(C`PL_sv_yes\*(C'\fR and \f(CW\*(C`PL_sv_no\*(C'\fR, which contain
boolean \s-1TRUE\s0 and \s-1FALSE\s0 values, respectively.  Like \f(CW\*(C`PL_sv_undef\*(C'\fR, their
addresses can be used whenever an \f(CW\*(C`SV*\*(C'\fR is needed.
.PP
Do not be fooled into thinking that \f(CW\*(C`(SV *) 0\*(C'\fR is the same as \f(CW&PL_sv_undef\fR.
Take this code:
.PP
.Vb 5
\&    SV* sv = (SV*) 0;
\&    if (I\-am\-to\-return\-a\-real\-value) {
\&            sv = sv_2mortal(newSViv(42));
\&    }
\&    sv_setsv(ST(0), sv);
.Ve
.PP
This code tries to return a new \s-1SV \s0(which contains the value 42) if it should
return a real value, or undef otherwise.  Instead it has returned a \s-1NULL\s0
pointer which, somewhere down the line, will cause a segmentation violation,
bus error, or just weird results.  Change the zero to \f(CW&PL_sv_undef\fR in the
first line and all will be well.
.PP
To free an \s-1SV\s0 that you've created, call \f(CW\*(C`SvREFCNT_dec(SV*)\*(C'\fR.  Normally this
call is not necessary (see \*(L"Reference Counts and Mortality\*(R").
.SS "Offsets"
.IX Subsection "Offsets"
Perl provides the function \f(CW\*(C`sv_chop\*(C'\fR to efficiently remove characters
from the beginning of a string; you give it an \s-1SV\s0 and a pointer to
somewhere inside the \s-1PV,\s0 and it discards everything before the
pointer. The efficiency comes by means of a little hack: instead of
actually removing the characters, \f(CW\*(C`sv_chop\*(C'\fR sets the flag \f(CW\*(C`OOK\*(C'\fR
(offset \s-1OK\s0) to signal to other functions that the offset hack is in
effect, and it puts the number of bytes chopped off into the \s-1IV\s0 field
of the \s-1SV.\s0 It then moves the \s-1PV\s0 pointer (called \f(CW\*(C`SvPVX\*(C'\fR) forward that
many bytes, and adjusts \f(CW\*(C`SvCUR\*(C'\fR and \f(CW\*(C`SvLEN\*(C'\fR.
.PP
Hence, at this point, the start of the buffer that we allocated lives
at \f(CW\*(C`SvPVX(sv) \- SvIV(sv)\*(C'\fR in memory and the \s-1PV\s0 pointer is pointing
into the middle of this allocated storage.
.PP
This is best demonstrated by example:
.PP
.Vb 8
\&  % ./perl \-Ilib \-MDevel::Peek \-le \*(Aq$a="12345"; $a=~s/.//; Dump($a)\*(Aq
\&  SV = PVIV(0x8128450) at 0x81340f0
\&    REFCNT = 1
\&    FLAGS = (POK,OOK,pPOK)
\&    IV = 1  (OFFSET)
\&    PV = 0x8135781 ( "1" . ) "2345"\e0
\&    CUR = 4
\&    LEN = 5
.Ve
.PP
Here the number of bytes chopped off (1) is put into \s-1IV,\s0 and
\&\f(CW\*(C`Devel::Peek::Dump\*(C'\fR helpfully reminds us that this is an offset. The
portion of the string between the \*(L"real\*(R" and the \*(L"fake\*(R" beginnings is
shown in parentheses, and the values of \f(CW\*(C`SvCUR\*(C'\fR and \f(CW\*(C`SvLEN\*(C'\fR reflect
the fake beginning, not the real one.
.PP
Something similar to the offset hack is performed on AVs to enable
efficient shifting and splicing off the beginning of the array; while
\&\f(CW\*(C`AvARRAY\*(C'\fR points to the first element in the array that is visible from
Perl, \f(CW\*(C`AvALLOC\*(C'\fR points to the real start of the C array. These are
usually the same, but a \f(CW\*(C`shift\*(C'\fR operation can be carried out by
increasing \f(CW\*(C`AvARRAY\*(C'\fR by one and decreasing \f(CW\*(C`AvFILL\*(C'\fR and \f(CW\*(C`AvMAX\*(C'\fR.
Again, the location of the real start of the C array only comes into
play when freeing the array. See \f(CW\*(C`av_shift\*(C'\fR in \fIav.c\fR.
.SS "What's Really Stored in an \s-1SV\s0?"
.IX Subsection "What's Really Stored in an SV?"
Recall that the usual method of determining the type of scalar you have is
to use \f(CW\*(C`Sv*OK\*(C'\fR macros.  Because a scalar can be both a number and a string,
usually these macros will always return \s-1TRUE\s0 and calling the \f(CW\*(C`Sv*V\*(C'\fR
macros will do the appropriate conversion of string to integer/double or
integer/double to string.
.PP
If you \fIreally\fR need to know if you have an integer, double, or string
pointer in an \s-1SV,\s0 you can use the following three macros instead:
.PP
.Vb 3
\&    SvIOKp(SV*)
\&    SvNOKp(SV*)
\&    SvPOKp(SV*)
.Ve
.PP
These will tell you if you truly have an integer, double, or string pointer
stored in your \s-1SV. \s0 The \*(L"p\*(R" stands for private.
.PP
There are various ways in which the private and public flags may differ.
For example, a tied \s-1SV\s0 may have a valid underlying value in the \s-1IV\s0 slot
(so SvIOKp is true), but the data should be accessed via the \s-1FETCH\s0
routine rather than directly, so SvIOK is false. Another is when
numeric conversion has occurred and precision has been lost: only the
private flag is set on 'lossy' values. So when an \s-1NV\s0 is converted to an
\&\s-1IV\s0 with loss, SvIOKp, SvNOKp and SvNOK will be set, while SvIOK wont be.
.PP
In general, though, it's best to use the \f(CW\*(C`Sv*V\*(C'\fR macros.
.SS "Working with AVs"
.IX Subsection "Working with AVs"
There are two ways to create and load an \s-1AV. \s0 The first method creates an
empty \s-1AV:\s0
.PP
.Vb 1
\&    AV*  newAV();
.Ve
.PP
The second method both creates the \s-1AV\s0 and initially populates it with SVs:
.PP
.Vb 1
\&    AV*  av_make(I32 num, SV **ptr);
.Ve
.PP
The second argument points to an array containing \f(CW\*(C`num\*(C'\fR \f(CW\*(C`SV*\*(C'\fR's.  Once the
\&\s-1AV\s0 has been created, the SVs can be destroyed, if so desired.
.PP
Once the \s-1AV\s0 has been created, the following operations are possible on it:
.PP
.Vb 4
\&    void  av_push(AV*, SV*);
\&    SV*   av_pop(AV*);
\&    SV*   av_shift(AV*);
\&    void  av_unshift(AV*, I32 num);
.Ve
.PP
These should be familiar operations, with the exception of \f(CW\*(C`av_unshift\*(C'\fR.
This routine adds \f(CW\*(C`num\*(C'\fR elements at the front of the array with the \f(CW\*(C`undef\*(C'\fR
value.  You must then use \f(CW\*(C`av_store\*(C'\fR (described below) to assign values
to these new elements.
.PP
Here are some other functions:
.PP
.Vb 3
\&    I32   av_top_index(AV*);
\&    SV**  av_fetch(AV*, I32 key, I32 lval);
\&    SV**  av_store(AV*, I32 key, SV* val);
.Ve
.PP
The \f(CW\*(C`av_top_index\*(C'\fR function returns the highest index value in an array (just
like $#array in Perl).  If the array is empty, \-1 is returned.  The
\&\f(CW\*(C`av_fetch\*(C'\fR function returns the value at index \f(CW\*(C`key\*(C'\fR, but if \f(CW\*(C`lval\*(C'\fR
is non-zero, then \f(CW\*(C`av_fetch\*(C'\fR will store an undef value at that index.
The \f(CW\*(C`av_store\*(C'\fR function stores the value \f(CW\*(C`val\*(C'\fR at index \f(CW\*(C`key\*(C'\fR, and does
not increment the reference count of \f(CW\*(C`val\*(C'\fR.  Thus the caller is responsible
for taking care of that, and if \f(CW\*(C`av_store\*(C'\fR returns \s-1NULL,\s0 the caller will
have to decrement the reference count to avoid a memory leak.  Note that
\&\f(CW\*(C`av_fetch\*(C'\fR and \f(CW\*(C`av_store\*(C'\fR both return \f(CW\*(C`SV**\*(C'\fR's, not \f(CW\*(C`SV*\*(C'\fR's as their
return value.
.PP
A few more:
.PP
.Vb 3
\&    void  av_clear(AV*);
\&    void  av_undef(AV*);
\&    void  av_extend(AV*, I32 key);
.Ve
.PP
The \f(CW\*(C`av_clear\*(C'\fR function deletes all the elements in the AV* array, but
does not actually delete the array itself.  The \f(CW\*(C`av_undef\*(C'\fR function will
delete all the elements in the array plus the array itself.  The
\&\f(CW\*(C`av_extend\*(C'\fR function extends the array so that it contains at least \f(CW\*(C`key+1\*(C'\fR
elements.  If \f(CW\*(C`key+1\*(C'\fR is less than the currently allocated length of the array,
then nothing is done.
.PP
If you know the name of an array variable, you can get a pointer to its \s-1AV\s0
by using the following:
.PP
.Vb 1
\&    AV*  get_av("package::varname", 0);
.Ve
.PP
This returns \s-1NULL\s0 if the variable does not exist.
.PP
See \*(L"Understanding the Magic of Tied Hashes and Arrays\*(R" for more
information on how to use the array access functions on tied arrays.
.SS "Working with HVs"
.IX Subsection "Working with HVs"
To create an \s-1HV,\s0 you use the following routine:
.PP
.Vb 1
\&    HV*  newHV();
.Ve
.PP
Once the \s-1HV\s0 has been created, the following operations are possible on it:
.PP
.Vb 2
\&    SV**  hv_store(HV*, const char* key, U32 klen, SV* val, U32 hash);
\&    SV**  hv_fetch(HV*, const char* key, U32 klen, I32 lval);
.Ve
.PP
The \f(CW\*(C`klen\*(C'\fR parameter is the length of the key being passed in (Note that
you cannot pass 0 in as a value of \f(CW\*(C`klen\*(C'\fR to tell Perl to measure the
length of the key).  The \f(CW\*(C`val\*(C'\fR argument contains the \s-1SV\s0 pointer to the
scalar being stored, and \f(CW\*(C`hash\*(C'\fR is the precomputed hash value (zero if
you want \f(CW\*(C`hv_store\*(C'\fR to calculate it for you).  The \f(CW\*(C`lval\*(C'\fR parameter
indicates whether this fetch is actually a part of a store operation, in
which case a new undefined value will be added to the \s-1HV\s0 with the supplied
key and \f(CW\*(C`hv_fetch\*(C'\fR will return as if the value had already existed.
.PP
Remember that \f(CW\*(C`hv_store\*(C'\fR and \f(CW\*(C`hv_fetch\*(C'\fR return \f(CW\*(C`SV**\*(C'\fR's and not just
\&\f(CW\*(C`SV*\*(C'\fR.  To access the scalar value, you must first dereference the return
value.  However, you should check to make sure that the return value is
not \s-1NULL\s0 before dereferencing it.
.PP
The first of these two functions checks if a hash table entry exists, and the 
second deletes it.
.PP
.Vb 2
\&    bool  hv_exists(HV*, const char* key, U32 klen);
\&    SV*   hv_delete(HV*, const char* key, U32 klen, I32 flags);
.Ve
.PP
If \f(CW\*(C`flags\*(C'\fR does not include the \f(CW\*(C`G_DISCARD\*(C'\fR flag then \f(CW\*(C`hv_delete\*(C'\fR will
create and return a mortal copy of the deleted value.
.PP
And more miscellaneous functions:
.PP
.Vb 2
\&    void   hv_clear(HV*);
\&    void   hv_undef(HV*);
.Ve
.PP
Like their \s-1AV\s0 counterparts, \f(CW\*(C`hv_clear\*(C'\fR deletes all the entries in the hash
table but does not actually delete the hash table.  The \f(CW\*(C`hv_undef\*(C'\fR deletes
both the entries and the hash table itself.
.PP
Perl keeps the actual data in a linked list of structures with a typedef of \s-1HE.\s0
These contain the actual key and value pointers (plus extra administrative
overhead).  The key is a string pointer; the value is an \f(CW\*(C`SV*\*(C'\fR.  However,
once you have an \f(CW\*(C`HE*\*(C'\fR, to get the actual key and value, use the routines
specified below.
.PP
.Vb 10
\&    I32    hv_iterinit(HV*);
\&            /* Prepares starting point to traverse hash table */
\&    HE*    hv_iternext(HV*);
\&            /* Get the next entry, and return a pointer to a
\&               structure that has both the key and value */
\&    char*  hv_iterkey(HE* entry, I32* retlen);
\&            /* Get the key from an HE structure and also return
\&               the length of the key string */
\&    SV*    hv_iterval(HV*, HE* entry);
\&            /* Return an SV pointer to the value of the HE
\&               structure */
\&    SV*    hv_iternextsv(HV*, char** key, I32* retlen);
\&            /* This convenience routine combines hv_iternext,
\&               hv_iterkey, and hv_iterval.  The key and retlen
\&               arguments are return values for the key and its
\&               length.  The value is returned in the SV* argument */
.Ve
.PP
If you know the name of a hash variable, you can get a pointer to its \s-1HV\s0
by using the following:
.PP
.Vb 1
\&    HV*  get_hv("package::varname", 0);
.Ve
.PP
This returns \s-1NULL\s0 if the variable does not exist.
.PP
The hash algorithm is defined in the \f(CW\*(C`PERL_HASH\*(C'\fR macro:
.PP
.Vb 1
\&    PERL_HASH(hash, key, klen)
.Ve
.PP
The exact implementation of this macro varies by architecture and version
of perl, and the return value may change per invocation, so the value
is only valid for the duration of a single perl process.
.PP
See \*(L"Understanding the Magic of Tied Hashes and Arrays\*(R" for more
information on how to use the hash access functions on tied hashes.
.SS "Hash \s-1API\s0 Extensions"
.IX Subsection "Hash API Extensions"
Beginning with version 5.004, the following functions are also supported:
.PP
.Vb 2
\&    HE*     hv_fetch_ent  (HV* tb, SV* key, I32 lval, U32 hash);
\&    HE*     hv_store_ent  (HV* tb, SV* key, SV* val, U32 hash);
\&
\&    bool    hv_exists_ent (HV* tb, SV* key, U32 hash);
\&    SV*     hv_delete_ent (HV* tb, SV* key, I32 flags, U32 hash);
\&
\&    SV*     hv_iterkeysv  (HE* entry);
.Ve
.PP
Note that these functions take \f(CW\*(C`SV*\*(C'\fR keys, which simplifies writing
of extension code that deals with hash structures.  These functions
also allow passing of \f(CW\*(C`SV*\*(C'\fR keys to \f(CW\*(C`tie\*(C'\fR functions without forcing
you to stringify the keys (unlike the previous set of functions).
.PP
They also return and accept whole hash entries (\f(CW\*(C`HE*\*(C'\fR), making their
use more efficient (since the hash number for a particular string
doesn't have to be recomputed every time).  See perlapi for detailed
descriptions.
.PP
The following macros must always be used to access the contents of hash
entries.  Note that the arguments to these macros must be simple
variables, since they may get evaluated more than once.  See
perlapi for detailed descriptions of these macros.
.PP
.Vb 6
\&    HePV(HE* he, STRLEN len)
\&    HeVAL(HE* he)
\&    HeHASH(HE* he)
\&    HeSVKEY(HE* he)
\&    HeSVKEY_force(HE* he)
\&    HeSVKEY_set(HE* he, SV* sv)
.Ve
.PP
These two lower level macros are defined, but must only be used when
dealing with keys that are not \f(CW\*(C`SV*\*(C'\fRs:
.PP
.Vb 2
\&    HeKEY(HE* he)
\&    HeKLEN(HE* he)
.Ve
.PP
Note that both \f(CW\*(C`hv_store\*(C'\fR and \f(CW\*(C`hv_store_ent\*(C'\fR do not increment the
reference count of the stored \f(CW\*(C`val\*(C'\fR, which is the caller's responsibility.
If these functions return a \s-1NULL\s0 value, the caller will usually have to
decrement the reference count of \f(CW\*(C`val\*(C'\fR to avoid a memory leak.
.SS "AVs, HVs and undefined values"
.IX Subsection "AVs, HVs and undefined values"
Sometimes you have to store undefined values in AVs or HVs. Although
this may be a rare case, it can be tricky. That's because you're
used to using \f(CW&PL_sv_undef\fR if you need an undefined \s-1SV.\s0
.PP
For example, intuition tells you that this \s-1XS\s0 code:
.PP
.Vb 2
\&    AV *av = newAV();
\&    av_store( av, 0, &PL_sv_undef );
.Ve
.PP
is equivalent to this Perl code:
.PP
.Vb 2
\&    my @av;
\&    $av[0] = undef;
.Ve
.PP
Unfortunately, this isn't true. AVs use \f(CW&PL_sv_undef\fR as a marker
for indicating that an array element has not yet been initialized.
Thus, \f(CW\*(C`exists $av[0]\*(C'\fR would be true for the above Perl code, but
false for the array generated by the \s-1XS\s0 code.
.PP
Other problems can occur when storing \f(CW&PL_sv_undef\fR in HVs:
.PP
.Vb 1
\&    hv_store( hv, "key", 3, &PL_sv_undef, 0 );
.Ve
.PP
This will indeed make the value \f(CW\*(C`undef\*(C'\fR, but if you try to modify
the value of \f(CW\*(C`key\*(C'\fR, you'll get the following error:
.PP
.Vb 1
\&    Modification of non\-creatable hash value attempted
.Ve
.PP
In perl 5.8.0, \f(CW&PL_sv_undef\fR was also used to mark placeholders
in restricted hashes. This caused such hash entries not to appear
when iterating over the hash or when checking for the keys
with the \f(CW\*(C`hv_exists\*(C'\fR function.
.PP
You can run into similar problems when you store \f(CW&PL_sv_yes\fR or
\&\f(CW&PL_sv_no\fR into AVs or HVs. Trying to modify such elements
will give you the following error:
.PP
.Vb 1
\&    Modification of a read\-only value attempted
.Ve
.PP
To make a long story short, you can use the special variables
\&\f(CW&PL_sv_undef\fR, \f(CW&PL_sv_yes\fR and \f(CW&PL_sv_no\fR with AVs and
HVs, but you have to make sure you know what you're doing.
.PP
Generally, if you want to store an undefined value in an \s-1AV\s0
or \s-1HV,\s0 you should not use \f(CW&PL_sv_undef\fR, but rather create a
new undefined value using the \f(CW\*(C`newSV\*(C'\fR function, for example:
.PP
.Vb 2
\&    av_store( av, 42, newSV(0) );
\&    hv_store( hv, "foo", 3, newSV(0), 0 );
.Ve
.SS "References"
.IX Subsection "References"
References are a special type of scalar that point to other data types
(including other references).
.PP
To create a reference, use either of the following functions:
.PP
.Vb 2
\&    SV* newRV_inc((SV*) thing);
\&    SV* newRV_noinc((SV*) thing);
.Ve
.PP
The \f(CW\*(C`thing\*(C'\fR argument can be any of an \f(CW\*(C`SV*\*(C'\fR, \f(CW\*(C`AV*\*(C'\fR, or \f(CW\*(C`HV*\*(C'\fR.  The
functions are identical except that \f(CW\*(C`newRV_inc\*(C'\fR increments the reference
count of the \f(CW\*(C`thing\*(C'\fR, while \f(CW\*(C`newRV_noinc\*(C'\fR does not.  For historical
reasons, \f(CW\*(C`newRV\*(C'\fR is a synonym for \f(CW\*(C`newRV_inc\*(C'\fR.
.PP
Once you have a reference, you can use the following macro to dereference
the reference:
.PP
.Vb 1
\&    SvRV(SV*)
.Ve
.PP
then call the appropriate routines, casting the returned \f(CW\*(C`SV*\*(C'\fR to either an
\&\f(CW\*(C`AV*\*(C'\fR or \f(CW\*(C`HV*\*(C'\fR, if required.
.PP
To determine if an \s-1SV\s0 is a reference, you can use the following macro:
.PP
.Vb 1
\&    SvROK(SV*)
.Ve
.PP
To discover what type of value the reference refers to, use the following
macro and then check the return value.
.PP
.Vb 1
\&    SvTYPE(SvRV(SV*))
.Ve
.PP
The most useful types that will be returned are:
.PP
.Vb 5
\&    < SVt_PVAV  Scalar
\&    SVt_PVAV    Array
\&    SVt_PVHV    Hash
\&    SVt_PVCV    Code
\&    SVt_PVGV    Glob (possibly a file handle)
.Ve
.PP
See \*(L"svtype\*(R" in perlapi for more details.
.SS "Blessed References and Class Objects"
.IX Subsection "Blessed References and Class Objects"
References are also used to support object-oriented programming.  In perl's
\&\s-1OO\s0 lexicon, an object is simply a reference that has been blessed into a
package (or class).  Once blessed, the programmer may now use the reference
to access the various methods in the class.
.PP
A reference can be blessed into a package with the following function:
.PP
.Vb 1
\&    SV* sv_bless(SV* sv, HV* stash);
.Ve
.PP
The \f(CW\*(C`sv\*(C'\fR argument must be a reference value.  The \f(CW\*(C`stash\*(C'\fR argument
specifies which class the reference will belong to.  See
\&\*(L"Stashes and Globs\*(R" for information on converting class names into stashes.
.PP
/* Still under construction */
.PP
The following function upgrades rv to reference if not already one.
Creates a new \s-1SV\s0 for rv to point to.  If \f(CW\*(C`classname\*(C'\fR is non-null, the \s-1SV\s0
is blessed into the specified class.  \s-1SV\s0 is returned.
.PP
.Vb 1
\&        SV* newSVrv(SV* rv, const char* classname);
.Ve
.PP
The following three functions copy integer, unsigned integer or double
into an \s-1SV\s0 whose reference is \f(CW\*(C`rv\*(C'\fR.  \s-1SV\s0 is blessed if \f(CW\*(C`classname\*(C'\fR is
non-null.
.PP
.Vb 3
\&        SV* sv_setref_iv(SV* rv, const char* classname, IV iv);
\&        SV* sv_setref_uv(SV* rv, const char* classname, UV uv);
\&        SV* sv_setref_nv(SV* rv, const char* classname, NV iv);
.Ve
.PP
The following function copies the pointer value (\fIthe address, not the
string!\fR) into an \s-1SV\s0 whose reference is rv.  \s-1SV\s0 is blessed if \f(CW\*(C`classname\*(C'\fR
is non-null.
.PP
.Vb 1
\&        SV* sv_setref_pv(SV* rv, const char* classname, void* pv);
.Ve
.PP
The following function copies a string into an \s-1SV\s0 whose reference is \f(CW\*(C`rv\*(C'\fR.
Set length to 0 to let Perl calculate the string length.  \s-1SV\s0 is blessed if
\&\f(CW\*(C`classname\*(C'\fR is non-null.
.PP
.Vb 2
\&    SV* sv_setref_pvn(SV* rv, const char* classname, char* pv,
\&                                                         STRLEN length);
.Ve
.PP
The following function tests whether the \s-1SV\s0 is blessed into the specified
class.  It does not check inheritance relationships.
.PP
.Vb 1
\&        int  sv_isa(SV* sv, const char* name);
.Ve
.PP
The following function tests whether the \s-1SV\s0 is a reference to a blessed object.
.PP
.Vb 1
\&        int  sv_isobject(SV* sv);
.Ve
.PP
The following function tests whether the \s-1SV\s0 is derived from the specified
class. \s-1SV\s0 can be either a reference to a blessed object or a string
containing a class name. This is the function implementing the
\&\f(CW\*(C`UNIVERSAL::isa\*(C'\fR functionality.
.PP
.Vb 1
\&        bool sv_derived_from(SV* sv, const char* name);
.Ve
.PP
To check if you've got an object derived from a specific class you have
to write:
.PP
.Vb 1
\&        if (sv_isobject(sv) && sv_derived_from(sv, class)) { ... }
.Ve
.SS "Creating New Variables"
.IX Subsection "Creating New Variables"
To create a new Perl variable with an undef value which can be accessed from
your Perl script, use the following routines, depending on the variable type.
.PP
.Vb 3
\&    SV*  get_sv("package::varname", GV_ADD);
\&    AV*  get_av("package::varname", GV_ADD);
\&    HV*  get_hv("package::varname", GV_ADD);
.Ve
.PP
Notice the use of \s-1GV_ADD\s0 as the second parameter.  The new variable can now
be set, using the routines appropriate to the data type.
.PP
There are additional macros whose values may be bitwise \s-1OR\s0'ed with the
\&\f(CW\*(C`GV_ADD\*(C'\fR argument to enable certain extra features.  Those bits are:
.IP "\s-1GV_ADDMULTI\s0" 4
.IX Item "GV_ADDMULTI"
Marks the variable as multiply defined, thus preventing the:
.Sp
.Vb 1
\&  Name <varname> used only once: possible typo
.Ve
.Sp
warning.
.IP "\s-1GV_ADDWARN\s0" 4
.IX Item "GV_ADDWARN"
Issues the warning:
.Sp
.Vb 1
\&  Had to create <varname> unexpectedly
.Ve
.Sp
if the variable did not exist before the function was called.
.PP
If you do not specify a package name, the variable is created in the current
package.
.SS "Reference Counts and Mortality"
.IX Subsection "Reference Counts and Mortality"
Perl uses a reference count-driven garbage collection mechanism. SVs,
AVs, or HVs (xV for short in the following) start their life with a
reference count of 1.  If the reference count of an xV ever drops to 0,
then it will be destroyed and its memory made available for reuse.
.PP
This normally doesn't happen at the Perl level unless a variable is
undef'ed or the last variable holding a reference to it is changed or
overwritten.  At the internal level, however, reference counts can be
manipulated with the following macros:
.PP
.Vb 3
\&    int SvREFCNT(SV* sv);
\&    SV* SvREFCNT_inc(SV* sv);
\&    void SvREFCNT_dec(SV* sv);
.Ve
.PP
However, there is one other function which manipulates the reference
count of its argument.  The \f(CW\*(C`newRV_inc\*(C'\fR function, you will recall,
creates a reference to the specified argument.  As a side effect,
it increments the argument's reference count.  If this is not what
you want, use \f(CW\*(C`newRV_noinc\*(C'\fR instead.
.PP
For example, imagine you want to return a reference from an \s-1XSUB\s0 function.
Inside the \s-1XSUB\s0 routine, you create an \s-1SV\s0 which initially has a reference
count of one.  Then you call \f(CW\*(C`newRV_inc\*(C'\fR, passing it the just-created \s-1SV.\s0
This returns the reference as a new \s-1SV,\s0 but the reference count of the
\&\s-1SV\s0 you passed to \f(CW\*(C`newRV_inc\*(C'\fR has been incremented to two.  Now you
return the reference from the \s-1XSUB\s0 routine and forget about the \s-1SV.\s0
But Perl hasn't!  Whenever the returned reference is destroyed, the
reference count of the original \s-1SV\s0 is decreased to one and nothing happens.
The \s-1SV\s0 will hang around without any way to access it until Perl itself
terminates.  This is a memory leak.
.PP
The correct procedure, then, is to use \f(CW\*(C`newRV_noinc\*(C'\fR instead of
\&\f(CW\*(C`newRV_inc\*(C'\fR.  Then, if and when the last reference is destroyed,
the reference count of the \s-1SV\s0 will go to zero and it will be destroyed,
stopping any memory leak.
.PP
There are some convenience functions available that can help with the
destruction of xVs.  These functions introduce the concept of \*(L"mortality\*(R".
An xV that is mortal has had its reference count marked to be decremented,
but not actually decremented, until \*(L"a short time later\*(R".  Generally the
term \*(L"short time later\*(R" means a single Perl statement, such as a call to
an \s-1XSUB\s0 function.  The actual determinant for when mortal xVs have their
reference count decremented depends on two macros, \s-1SAVETMPS\s0 and \s-1FREETMPS.\s0
See perlcall and perlxs for more details on these macros.
.PP
\&\*(L"Mortalization\*(R" then is at its simplest a deferred \f(CW\*(C`SvREFCNT_dec\*(C'\fR.
However, if you mortalize a variable twice, the reference count will
later be decremented twice.
.PP
\&\*(L"Mortal\*(R" SVs are mainly used for SVs that are placed on perl's stack.
For example an \s-1SV\s0 which is created just to pass a number to a called sub
is made mortal to have it cleaned up automatically when it's popped off
the stack. Similarly, results returned by XSUBs (which are pushed on the
stack) are often made mortal.
.PP
To create a mortal variable, use the functions:
.PP
.Vb 3
\&    SV*  sv_newmortal()
\&    SV*  sv_2mortal(SV*)
\&    SV*  sv_mortalcopy(SV*)
.Ve
.PP
The first call creates a mortal \s-1SV \s0(with no value), the second converts an existing
\&\s-1SV\s0 to a mortal \s-1SV \s0(and thus defers a call to \f(CW\*(C`SvREFCNT_dec\*(C'\fR), and the
third creates a mortal copy of an existing \s-1SV.\s0
Because \f(CW\*(C`sv_newmortal\*(C'\fR gives the new \s-1SV\s0 no value, it must normally be given one
via \f(CW\*(C`sv_setpv\*(C'\fR, \f(CW\*(C`sv_setiv\*(C'\fR, etc. :
.PP
.Vb 2
\&    SV *tmp = sv_newmortal();
\&    sv_setiv(tmp, an_integer);
.Ve
.PP
As that is multiple C statements it is quite common so see this idiom instead:
.PP
.Vb 1
\&    SV *tmp = sv_2mortal(newSViv(an_integer));
.Ve
.PP
You should be careful about creating mortal variables.  Strange things
can happen if you make the same value mortal within multiple contexts,
or if you make a variable mortal multiple times. Thinking of \*(L"Mortalization\*(R"
as deferred \f(CW\*(C`SvREFCNT_dec\*(C'\fR should help to minimize such problems.
For example if you are passing an \s-1SV\s0 which you \fIknow\fR has a high enough \s-1REFCNT\s0
to survive its use on the stack you need not do any mortalization.
If you are not sure then doing an \f(CW\*(C`SvREFCNT_inc\*(C'\fR and \f(CW\*(C`sv_2mortal\*(C'\fR, or
making a \f(CW\*(C`sv_mortalcopy\*(C'\fR is safer.
.PP
The mortal routines are not just for SVs; AVs and HVs can be
made mortal by passing their address (type-casted to \f(CW\*(C`SV*\*(C'\fR) to the
\&\f(CW\*(C`sv_2mortal\*(C'\fR or \f(CW\*(C`sv_mortalcopy\*(C'\fR routines.
.SS "Stashes and Globs"
.IX Subsection "Stashes and Globs"
A \fBstash\fR is a hash that contains all variables that are defined
within a package.  Each key of the stash is a symbol
name (shared by all the different types of objects that have the same
name), and each value in the hash table is a \s-1GV \s0(Glob Value).  This \s-1GV\s0
in turn contains references to the various objects of that name,
including (but not limited to) the following:
.PP
.Vb 6
\&    Scalar Value
\&    Array Value
\&    Hash Value
\&    I/O Handle
\&    Format
\&    Subroutine
.Ve
.PP
There is a single stash called \f(CW\*(C`PL_defstash\*(C'\fR that holds the items that exist
in the \f(CW\*(C`main\*(C'\fR package.  To get at the items in other packages, append the
string \*(L"::\*(R" to the package name.  The items in the \f(CW\*(C`Foo\*(C'\fR package are in
the stash \f(CW\*(C`Foo::\*(C'\fR in PL_defstash.  The items in the \f(CW\*(C`Bar::Baz\*(C'\fR package are
in the stash \f(CW\*(C`Baz::\*(C'\fR in \f(CW\*(C`Bar::\*(C'\fR's stash.
.PP
To get the stash pointer for a particular package, use the function:
.PP
.Vb 2
\&    HV*  gv_stashpv(const char* name, I32 flags)
\&    HV*  gv_stashsv(SV*, I32 flags)
.Ve
.PP
The first function takes a literal string, the second uses the string stored
in the \s-1SV. \s0 Remember that a stash is just a hash table, so you get back an
\&\f(CW\*(C`HV*\*(C'\fR.  The \f(CW\*(C`flags\*(C'\fR flag will create a new package if it is set to \s-1GV_ADD.\s0
.PP
The name that \f(CW\*(C`gv_stash*v\*(C'\fR wants is the name of the package whose symbol table
you want.  The default package is called \f(CW\*(C`main\*(C'\fR.  If you have multiply nested
packages, pass their names to \f(CW\*(C`gv_stash*v\*(C'\fR, separated by \f(CW\*(C`::\*(C'\fR as in the Perl
language itself.
.PP
Alternately, if you have an \s-1SV\s0 that is a blessed reference, you can find
out the stash pointer by using:
.PP
.Vb 1
\&    HV*  SvSTASH(SvRV(SV*));
.Ve
.PP
then use the following to get the package name itself:
.PP
.Vb 1
\&    char*  HvNAME(HV* stash);
.Ve
.PP
If you need to bless or re-bless an object you can use the following
function:
.PP
.Vb 1
\&    SV*  sv_bless(SV*, HV* stash)
.Ve
.PP
where the first argument, an \f(CW\*(C`SV*\*(C'\fR, must be a reference, and the second
argument is a stash.  The returned \f(CW\*(C`SV*\*(C'\fR can now be used in the same way
as any other \s-1SV.\s0
.PP
For more information on references and blessings, consult perlref.
.SS "Double-Typed SVs"
.IX Subsection "Double-Typed SVs"
Scalar variables normally contain only one type of value, an integer,
double, pointer, or reference.  Perl will automatically convert the
actual scalar data from the stored type into the requested type.
.PP
Some scalar variables contain more than one type of scalar data.  For
example, the variable \f(CW$!\fR contains either the numeric value of \f(CW\*(C`errno\*(C'\fR
or its string equivalent from either \f(CW\*(C`strerror\*(C'\fR or \f(CW\*(C`sys_errlist[]\*(C'\fR.
.PP
To force multiple data values into an \s-1SV,\s0 you must do two things: use the
\&\f(CW\*(C`sv_set*v\*(C'\fR routines to add the additional scalar type, then set a flag
so that Perl will believe it contains more than one type of data.  The
four macros to set the flags are:
.PP
.Vb 4
\&        SvIOK_on
\&        SvNOK_on
\&        SvPOK_on
\&        SvROK_on
.Ve
.PP
The particular macro you must use depends on which \f(CW\*(C`sv_set*v\*(C'\fR routine
you called first.  This is because every \f(CW\*(C`sv_set*v\*(C'\fR routine turns on
only the bit for the particular type of data being set, and turns off
all the rest.
.PP
For example, to create a new Perl variable called \*(L"dberror\*(R" that contains
both the numeric and descriptive string error values, you could use the
following code:
.PP
.Vb 2
\&    extern int  dberror;
\&    extern char *dberror_list;
\&
\&    SV* sv = get_sv("dberror", GV_ADD);
\&    sv_setiv(sv, (IV) dberror);
\&    sv_setpv(sv, dberror_list[dberror]);
\&    SvIOK_on(sv);
.Ve
.PP
If the order of \f(CW\*(C`sv_setiv\*(C'\fR and \f(CW\*(C`sv_setpv\*(C'\fR had been reversed, then the
macro \f(CW\*(C`SvPOK_on\*(C'\fR would need to be called instead of \f(CW\*(C`SvIOK_on\*(C'\fR.
.SS "Magic Variables"
.IX Subsection "Magic Variables"
[This section still under construction.  Ignore everything here.  Post no
bills.  Everything not permitted is forbidden.]
.PP
Any \s-1SV\s0 may be magical, that is, it has special features that a normal
\&\s-1SV\s0 does not have.  These features are stored in the \s-1SV\s0 structure in a
linked list of \f(CW\*(C`struct magic\*(C'\fR's, typedef'ed to \f(CW\*(C`MAGIC\*(C'\fR.
.PP
.Vb 10
\&    struct magic {
\&        MAGIC*      mg_moremagic;
\&        MGVTBL*     mg_virtual;
\&        U16         mg_private;
\&        char        mg_type;
\&        U8          mg_flags;
\&        I32         mg_len;
\&        SV*         mg_obj;
\&        char*       mg_ptr;
\&    };
.Ve
.PP
Note this is current as of patchlevel 0, and could change at any time.
.SS "Assigning Magic"
.IX Subsection "Assigning Magic"
Perl adds magic to an \s-1SV\s0 using the sv_magic function:
.PP
.Vb 1
\&  void sv_magic(SV* sv, SV* obj, int how, const char* name, I32 namlen);
.Ve
.PP
The \f(CW\*(C`sv\*(C'\fR argument is a pointer to the \s-1SV\s0 that is to acquire a new magical
feature.
.PP
If \f(CW\*(C`sv\*(C'\fR is not already magical, Perl uses the \f(CW\*(C`SvUPGRADE\*(C'\fR macro to
convert \f(CW\*(C`sv\*(C'\fR to type \f(CW\*(C`SVt_PVMG\*(C'\fR. Perl then continues by adding new magic
to the beginning of the linked list of magical features.  Any prior entry
of the same type of magic is deleted.  Note that this can be overridden,
and multiple instances of the same type of magic can be associated with an
\&\s-1SV.\s0
.PP
The \f(CW\*(C`name\*(C'\fR and \f(CW\*(C`namlen\*(C'\fR arguments are used to associate a string with
the magic, typically the name of a variable. \f(CW\*(C`namlen\*(C'\fR is stored in the
\&\f(CW\*(C`mg_len\*(C'\fR field and if \f(CW\*(C`name\*(C'\fR is non-null then either a \f(CW\*(C`savepvn\*(C'\fR copy of
\&\f(CW\*(C`name\*(C'\fR or \f(CW\*(C`name\*(C'\fR itself is stored in the \f(CW\*(C`mg_ptr\*(C'\fR field, depending on
whether \f(CW\*(C`namlen\*(C'\fR is greater than zero or equal to zero respectively.  As a
special case, if \f(CW\*(C`(name && namlen == HEf_SVKEY)\*(C'\fR then \f(CW\*(C`name\*(C'\fR is assumed
to contain an \f(CW\*(C`SV*\*(C'\fR and is stored as-is with its \s-1REFCNT\s0 incremented.
.PP
The sv_magic function uses \f(CW\*(C`how\*(C'\fR to determine which, if any, predefined
\&\*(L"Magic Virtual Table\*(R" should be assigned to the \f(CW\*(C`mg_virtual\*(C'\fR field.
See the \*(L"Magic Virtual Tables\*(R" section below.  The \f(CW\*(C`how\*(C'\fR argument is also
stored in the \f(CW\*(C`mg_type\*(C'\fR field. The value of \f(CW\*(C`how\*(C'\fR should be chosen
from the set of macros \f(CW\*(C`PERL_MAGIC_foo\*(C'\fR found in \fIperl.h\fR. Note that before
these macros were added, Perl internals used to directly use character
literals, so you may occasionally come across old code or documentation
referring to 'U' magic rather than \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR for example.
.PP
The \f(CW\*(C`obj\*(C'\fR argument is stored in the \f(CW\*(C`mg_obj\*(C'\fR field of the \f(CW\*(C`MAGIC\*(C'\fR
structure.  If it is not the same as the \f(CW\*(C`sv\*(C'\fR argument, the reference
count of the \f(CW\*(C`obj\*(C'\fR object is incremented.  If it is the same, or if
the \f(CW\*(C`how\*(C'\fR argument is \f(CW\*(C`PERL_MAGIC_arylen\*(C'\fR, or if it is a \s-1NULL\s0 pointer,
then \f(CW\*(C`obj\*(C'\fR is merely stored, without the reference count being incremented.
.PP
See also \f(CW\*(C`sv_magicext\*(C'\fR in perlapi for a more flexible way to add magic
to an \s-1SV.\s0
.PP
There is also a function to add magic to an \f(CW\*(C`HV\*(C'\fR:
.PP
.Vb 1
\&    void hv_magic(HV *hv, GV *gv, int how);
.Ve
.PP
This simply calls \f(CW\*(C`sv_magic\*(C'\fR and coerces the \f(CW\*(C`gv\*(C'\fR argument into an \f(CW\*(C`SV\*(C'\fR.
.PP
To remove the magic from an \s-1SV,\s0 call the function sv_unmagic:
.PP
.Vb 1
\&    int sv_unmagic(SV *sv, int type);
.Ve
.PP
The \f(CW\*(C`type\*(C'\fR argument should be equal to the \f(CW\*(C`how\*(C'\fR value when the \f(CW\*(C`SV\*(C'\fR
was initially made magical.
.PP
However, note that \f(CW\*(C`sv_unmagic\*(C'\fR removes all magic of a certain \f(CW\*(C`type\*(C'\fR from the
\&\f(CW\*(C`SV\*(C'\fR. If you want to remove only certain magic of a \f(CW\*(C`type\*(C'\fR based on the magic
virtual table, use \f(CW\*(C`sv_unmagicext\*(C'\fR instead:
.PP
.Vb 1
\&    int sv_unmagicext(SV *sv, int type, MGVTBL *vtbl);
.Ve
.SS "Magic Virtual Tables"
.IX Subsection "Magic Virtual Tables"
The \f(CW\*(C`mg_virtual\*(C'\fR field in the \f(CW\*(C`MAGIC\*(C'\fR structure is a pointer to an
\&\f(CW\*(C`MGVTBL\*(C'\fR, which is a structure of function pointers and stands for
\&\*(L"Magic Virtual Table\*(R" to handle the various operations that might be
applied to that variable.
.PP
The \f(CW\*(C`MGVTBL\*(C'\fR has five (or sometimes eight) pointers to the following
routine types:
.PP
.Vb 5
\&    int  (*svt_get)(SV* sv, MAGIC* mg);
\&    int  (*svt_set)(SV* sv, MAGIC* mg);
\&    U32  (*svt_len)(SV* sv, MAGIC* mg);
\&    int  (*svt_clear)(SV* sv, MAGIC* mg);
\&    int  (*svt_free)(SV* sv, MAGIC* mg);
\&
\&    int  (*svt_copy)(SV *sv, MAGIC* mg, SV *nsv,
\&                                          const char *name, I32 namlen);
\&    int  (*svt_dup)(MAGIC *mg, CLONE_PARAMS *param);
\&    int  (*svt_local)(SV *nsv, MAGIC *mg);
.Ve
.PP
This \s-1MGVTBL\s0 structure is set at compile-time in \fIperl.h\fR and there are
currently 32 types.  These different structures contain pointers to various
routines that perform additional actions depending on which function is
being called.
.PP
.Vb 8
\&   Function pointer    Action taken
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-    \-\-\-\-\-\-\-\-\-\-\-\-
\&   svt_get             Do something before the value of the SV is
\&                       retrieved.
\&   svt_set             Do something after the SV is assigned a value.
\&   svt_len             Report on the SV\*(Aqs length.
\&   svt_clear           Clear something the SV represents.
\&   svt_free            Free any extra storage associated with the SV.
\&
\&   svt_copy            copy tied variable magic to a tied element
\&   svt_dup             duplicate a magic structure during thread cloning
\&   svt_local           copy magic to local value during \*(Aqlocal\*(Aq
.Ve
.PP
For instance, the \s-1MGVTBL\s0 structure called \f(CW\*(C`vtbl_sv\*(C'\fR (which corresponds
to an \f(CW\*(C`mg_type\*(C'\fR of \f(CW\*(C`PERL_MAGIC_sv\*(C'\fR) contains:
.PP
.Vb 1
\&    { magic_get, magic_set, magic_len, 0, 0 }
.Ve
.PP
Thus, when an \s-1SV\s0 is determined to be magical and of type \f(CW\*(C`PERL_MAGIC_sv\*(C'\fR,
if a get operation is being performed, the routine \f(CW\*(C`magic_get\*(C'\fR is
called.  All the various routines for the various magical types begin
with \f(CW\*(C`magic_\*(C'\fR.  \s-1NOTE:\s0 the magic routines are not considered part of
the Perl \s-1API,\s0 and may not be exported by the Perl library.
.PP
The last three slots are a recent addition, and for source code
compatibility they are only checked for if one of the three flags
MGf_COPY, MGf_DUP or MGf_LOCAL is set in mg_flags. This means that most
code can continue declaring a vtable as a 5\-element value. These three are
currently used exclusively by the threading code, and are highly subject
to change.
.PP
The current kinds of Magic Virtual Tables are:
.PP
.Vb 10
\& mg_type
\& (old\-style char and macro)   MGVTBL         Type of magic
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-   \-\-\-\-\-\-         \-\-\-\-\-\-\-\-\-\-\-\-\-
\& \e0 PERL_MAGIC_sv             vtbl_sv        Special scalar variable
\& #  PERL_MAGIC_arylen         vtbl_arylen    Array length ($#ary)
\& %  PERL_MAGIC_rhash          (none)         extra data for restricted
\&                                             hashes
\& &  PERL_MAGIC_proto          (none)         my sub prototype CV
\& .  PERL_MAGIC_pos            vtbl_pos       pos() lvalue
\& :  PERL_MAGIC_symtab         (none)         extra data for symbol
\&                                             tables
\& <  PERL_MAGIC_backref        vtbl_backref   for weak ref data
\& @  PERL_MAGIC_arylen_p       (none)         to move arylen out of XPVAV
\& B  PERL_MAGIC_bm             vtbl_regexp    Boyer\-Moore 
\&                                             (fast string search)
\& c  PERL_MAGIC_overload_table vtbl_ovrld     Holds overload table 
\&                                             (AMT) on stash
\& D  PERL_MAGIC_regdata        vtbl_regdata   Regex match position data 
\&                                             (@+ and @\- vars)
\& d  PERL_MAGIC_regdatum       vtbl_regdatum  Regex match position data
\&                                             element
\& E  PERL_MAGIC_env            vtbl_env       %ENV hash
\& e  PERL_MAGIC_envelem        vtbl_envelem   %ENV hash element
\& f  PERL_MAGIC_fm             vtbl_regexp    Formline 
\&                                             (\*(Aqcompiled\*(Aq format)
\& g  PERL_MAGIC_regex_global   vtbl_mglob     m//g target
\& H  PERL_MAGIC_hints          vtbl_hints     %^H hash
\& h  PERL_MAGIC_hintselem      vtbl_hintselem %^H hash element
\& I  PERL_MAGIC_isa            vtbl_isa       @ISA array
\& i  PERL_MAGIC_isaelem        vtbl_isaelem   @ISA array element
\& k  PERL_MAGIC_nkeys          vtbl_nkeys     scalar(keys()) lvalue
\& L  PERL_MAGIC_dbfile         (none)         Debugger %_<filename
\& l  PERL_MAGIC_dbline         vtbl_dbline    Debugger %_<filename
\&                                             element
\& N  PERL_MAGIC_shared         (none)         Shared between threads
\& n  PERL_MAGIC_shared_scalar  (none)         Shared between threads
\& o  PERL_MAGIC_collxfrm       vtbl_collxfrm  Locale transformation
\& P  PERL_MAGIC_tied           vtbl_pack      Tied array or hash
\& p  PERL_MAGIC_tiedelem       vtbl_packelem  Tied array or hash element
\& q  PERL_MAGIC_tiedscalar     vtbl_packelem  Tied scalar or handle
\& r  PERL_MAGIC_qr             vtbl_regexp    precompiled qr// regex
\& S  PERL_MAGIC_sig            (none)         %SIG hash
\& s  PERL_MAGIC_sigelem        vtbl_sigelem   %SIG hash element
\& t  PERL_MAGIC_taint          vtbl_taint     Taintedness
\& U  PERL_MAGIC_uvar           vtbl_uvar      Available for use by
\&                                             extensions
\& u  PERL_MAGIC_uvar_elem      (none)         Reserved for use by
\&                                             extensions
\& V  PERL_MAGIC_vstring        (none)         SV was vstring literal
\& v  PERL_MAGIC_vec            vtbl_vec       vec() lvalue
\& w  PERL_MAGIC_utf8           vtbl_utf8      Cached UTF\-8 information
\& x  PERL_MAGIC_substr         vtbl_substr    substr() lvalue
\& y  PERL_MAGIC_defelem        vtbl_defelem   Shadow "foreach" iterator
\&                                             variable / smart parameter
\&                                             vivification
\& ]  PERL_MAGIC_checkcall      vtbl_checkcall inlining/mutation of call
\&                                             to this CV
\& ~  PERL_MAGIC_ext            (none)         Available for use by
\&                                             extensions
.Ve
.PP
When an uppercase and lowercase letter both exist in the table, then the
uppercase letter is typically used to represent some kind of composite type
(a list or a hash), and the lowercase letter is used to represent an element
of that composite type. Some internals code makes use of this case
relationship.  However, 'v' and 'V' (vec and v\-string) are in no way related.
.PP
The \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR and \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR magic types are defined
specifically for use by extensions and will not be used by perl itself.
Extensions can use \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR magic to 'attach' private information
to variables (typically objects).  This is especially useful because
there is no way for normal perl code to corrupt this private information
(unlike using extra elements of a hash object).
.PP
Similarly, \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR magic can be used much like \fItie()\fR to call a
C function any time a scalar's value is used or changed.  The \f(CW\*(C`MAGIC\*(C'\fR's
\&\f(CW\*(C`mg_ptr\*(C'\fR field points to a \f(CW\*(C`ufuncs\*(C'\fR structure:
.PP
.Vb 5
\&    struct ufuncs {
\&        I32 (*uf_val)(pTHX_ IV, SV*);
\&        I32 (*uf_set)(pTHX_ IV, SV*);
\&        IV uf_index;
\&    };
.Ve
.PP
When the \s-1SV\s0 is read from or written to, the \f(CW\*(C`uf_val\*(C'\fR or \f(CW\*(C`uf_set\*(C'\fR
function will be called with \f(CW\*(C`uf_index\*(C'\fR as the first arg and a pointer to
the \s-1SV\s0 as the second.  A simple example of how to add \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR
magic is shown below.  Note that the ufuncs structure is copied by
sv_magic, so you can safely allocate it on the stack.
.PP
.Vb 10
\&    void
\&    Umagic(sv)
\&        SV *sv;
\&    PREINIT:
\&        struct ufuncs uf;
\&    CODE:
\&        uf.uf_val   = &my_get_fn;
\&        uf.uf_set   = &my_set_fn;
\&        uf.uf_index = 0;
\&        sv_magic(sv, 0, PERL_MAGIC_uvar, (char*)&uf, sizeof(uf));
.Ve
.PP
Attaching \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR to arrays is permissible but has no effect.
.PP
For hashes there is a specialized hook that gives control over hash
keys (but not values).  This hook calls \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR 'get' magic
if the \*(L"set\*(R" function in the \f(CW\*(C`ufuncs\*(C'\fR structure is \s-1NULL. \s0 The hook
is activated whenever the hash is accessed with a key specified as
an \f(CW\*(C`SV\*(C'\fR through the functions \f(CW\*(C`hv_store_ent\*(C'\fR, \f(CW\*(C`hv_fetch_ent\*(C'\fR,
\&\f(CW\*(C`hv_delete_ent\*(C'\fR, and \f(CW\*(C`hv_exists_ent\*(C'\fR.  Accessing the key as a string
through the functions without the \f(CW\*(C`..._ent\*(C'\fR suffix circumvents the
hook.  See \*(L"\s-1GUTS\*(R"\s0 in Hash::Util::FieldHash for a detailed description.
.PP
Note that because multiple extensions may be using \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR
or \f(CW\*(C`PERL_MAGIC_uvar\*(C'\fR magic, it is important for extensions to take
extra care to avoid conflict.  Typically only using the magic on
objects blessed into the same class as the extension is sufficient.
For \f(CW\*(C`PERL_MAGIC_ext\*(C'\fR magic, it is usually a good idea to define an
\&\f(CW\*(C`MGVTBL\*(C'\fR, even if all its fields will be \f(CW0\fR, so that individual
\&\f(CW\*(C`MAGIC\*(C'\fR pointers can be identified as a particular kind of magic
using their magic virtual table. \f(CW\*(C`mg_findext\*(C'\fR provides an easy way
to do that:
.PP
.Vb 1
\&    STATIC MGVTBL my_vtbl = { 0, 0, 0, 0, 0, 0, 0, 0 };
\&
\&    MAGIC *mg;
\&    if ((mg = mg_findext(sv, PERL_MAGIC_ext, &my_vtbl))) {
\&        /* this is really ours, not another module\*(Aqs PERL_MAGIC_ext */
\&        my_priv_data_t *priv = (my_priv_data_t *)mg\->mg_ptr;
\&        ...
\&    }
.Ve
.PP
Also note that the \f(CW\*(C`sv_set*()\*(C'\fR and \f(CW\*(C`sv_cat*()\*(C'\fR functions described
earlier do \fBnot\fR invoke 'set' magic on their targets.  This must
be done by the user either by calling the \f(CW\*(C`SvSETMAGIC()\*(C'\fR macro after
calling these functions, or by using one of the \f(CW\*(C`sv_set*_mg()\*(C'\fR or
\&\f(CW\*(C`sv_cat*_mg()\*(C'\fR functions.  Similarly, generic C code must call the
\&\f(CW\*(C`SvGETMAGIC()\*(C'\fR macro to invoke any 'get' magic if they use an \s-1SV\s0
obtained from external sources in functions that don't handle magic.
See perlapi for a description of these functions.
For example, calls to the \f(CW\*(C`sv_cat*()\*(C'\fR functions typically need to be
followed by \f(CW\*(C`SvSETMAGIC()\*(C'\fR, but they don't need a prior \f(CW\*(C`SvGETMAGIC()\*(C'\fR
since their implementation handles 'get' magic.
.SS "Finding Magic"
.IX Subsection "Finding Magic"
.Vb 2
\&    MAGIC *mg_find(SV *sv, int type); /* Finds the magic pointer of that
\&                                       * type */
.Ve
.PP
This routine returns a pointer to a \f(CW\*(C`MAGIC\*(C'\fR structure stored in the \s-1SV.\s0
If the \s-1SV\s0 does not have that magical feature, \f(CW\*(C`NULL\*(C'\fR is returned. If the
\&\s-1SV\s0 has multiple instances of that magical feature, the first one will be
returned. \f(CW\*(C`mg_findext\*(C'\fR can be used to find a \f(CW\*(C`MAGIC\*(C'\fR structure of an \s-1SV\s0
based on both its magic type and its magic virtual table:
.PP
.Vb 1
\&    MAGIC *mg_findext(SV *sv, int type, MGVTBL *vtbl);
.Ve
.PP
Also, if the \s-1SV\s0 passed to \f(CW\*(C`mg_find\*(C'\fR or \f(CW\*(C`mg_findext\*(C'\fR is not of type
SVt_PVMG, Perl may core dump.
.PP
.Vb 1
\&    int mg_copy(SV* sv, SV* nsv, const char* key, STRLEN klen);
.Ve
.PP
This routine checks to see what types of magic \f(CW\*(C`sv\*(C'\fR has.  If the mg_type
field is an uppercase letter, then the mg_obj is copied to \f(CW\*(C`nsv\*(C'\fR, but
the mg_type field is changed to be the lowercase letter.
.SS "Understanding the Magic of Tied Hashes and Arrays"
.IX Subsection "Understanding the Magic of Tied Hashes and Arrays"
Tied hashes and arrays are magical beasts of the \f(CW\*(C`PERL_MAGIC_tied\*(C'\fR
magic type.
.PP
\&\s-1WARNING:\s0 As of the 5.004 release, proper usage of the array and hash
access functions requires understanding a few caveats.  Some
of these caveats are actually considered bugs in the \s-1API,\s0 to be fixed
in later releases, and are bracketed with [\s-1MAYCHANGE\s0] below. If
you find yourself actually applying such information in this section, be
aware that the behavior may change in the future, umm, without warning.
.PP
The perl tie function associates a variable with an object that implements
the various \s-1GET, SET,\s0 etc methods.  To perform the equivalent of the perl
tie function from an \s-1XSUB,\s0 you must mimic this behaviour.  The code below
carries out the necessary steps \- firstly it creates a new hash, and then
creates a second hash which it blesses into the class which will implement
the tie methods. Lastly it ties the two hashes together, and returns a
reference to the new tied hash.  Note that the code below does \s-1NOT\s0 call the
\&\s-1TIEHASH\s0 method in the MyTie class \-
see \*(L"Calling Perl Routines from within C Programs\*(R" for details on how
to do this.
.PP
.Vb 10
\&    SV*
\&    mytie()
\&    PREINIT:
\&        HV *hash;
\&        HV *stash;
\&        SV *tie;
\&    CODE:
\&        hash = newHV();
\&        tie = newRV_noinc((SV*)newHV());
\&        stash = gv_stashpv("MyTie", GV_ADD);
\&        sv_bless(tie, stash);
\&        hv_magic(hash, (GV*)tie, PERL_MAGIC_tied);
\&        RETVAL = newRV_noinc(hash);
\&    OUTPUT:
\&        RETVAL
.Ve
.PP
The \f(CW\*(C`av_store\*(C'\fR function, when given a tied array argument, merely
copies the magic of the array onto the value to be \*(L"stored\*(R", using
\&\f(CW\*(C`mg_copy\*(C'\fR.  It may also return \s-1NULL,\s0 indicating that the value did not
actually need to be stored in the array.  [\s-1MAYCHANGE\s0] After a call to
\&\f(CW\*(C`av_store\*(C'\fR on a tied array, the caller will usually need to call
\&\f(CW\*(C`mg_set(val)\*(C'\fR to actually invoke the perl level \*(L"\s-1STORE\*(R"\s0 method on the
\&\s-1TIEARRAY\s0 object.  If \f(CW\*(C`av_store\*(C'\fR did return \s-1NULL,\s0 a call to
\&\f(CW\*(C`SvREFCNT_dec(val)\*(C'\fR will also be usually necessary to avoid a memory
leak. [/MAYCHANGE]
.PP
The previous paragraph is applicable verbatim to tied hash access using the
\&\f(CW\*(C`hv_store\*(C'\fR and \f(CW\*(C`hv_store_ent\*(C'\fR functions as well.
.PP
\&\f(CW\*(C`av_fetch\*(C'\fR and the corresponding hash functions \f(CW\*(C`hv_fetch\*(C'\fR and
\&\f(CW\*(C`hv_fetch_ent\*(C'\fR actually return an undefined mortal value whose magic
has been initialized using \f(CW\*(C`mg_copy\*(C'\fR.  Note the value so returned does not
need to be deallocated, as it is already mortal.  [\s-1MAYCHANGE\s0] But you will
need to call \f(CW\*(C`mg_get()\*(C'\fR on the returned value in order to actually invoke
the perl level \*(L"\s-1FETCH\*(R"\s0 method on the underlying \s-1TIE\s0 object.  Similarly,
you may also call \f(CW\*(C`mg_set()\*(C'\fR on the return value after possibly assigning
a suitable value to it using \f(CW\*(C`sv_setsv\*(C'\fR,  which will invoke the \*(L"\s-1STORE\*(R"\s0
method on the \s-1TIE\s0 object. [/MAYCHANGE]
.PP
[\s-1MAYCHANGE\s0]
In other words, the array or hash fetch/store functions don't really
fetch and store actual values in the case of tied arrays and hashes.  They
merely call \f(CW\*(C`mg_copy\*(C'\fR to attach magic to the values that were meant to be
\&\*(L"stored\*(R" or \*(L"fetched\*(R".  Later calls to \f(CW\*(C`mg_get\*(C'\fR and \f(CW\*(C`mg_set\*(C'\fR actually
do the job of invoking the \s-1TIE\s0 methods on the underlying objects.  Thus
the magic mechanism currently implements a kind of lazy access to arrays
and hashes.
.PP
Currently (as of perl version 5.004), use of the hash and array access
functions requires the user to be aware of whether they are operating on
\&\*(L"normal\*(R" hashes and arrays, or on their tied variants.  The \s-1API\s0 may be
changed to provide more transparent access to both tied and normal data
types in future versions.
[/MAYCHANGE]
.PP
You would do well to understand that the \s-1TIEARRAY\s0 and \s-1TIEHASH\s0 interfaces
are mere sugar to invoke some perl method calls while using the uniform hash
and array syntax.  The use of this sugar imposes some overhead (typically
about two to four extra opcodes per \s-1FETCH/STORE\s0 operation, in addition to
the creation of all the mortal variables required to invoke the methods).
This overhead will be comparatively small if the \s-1TIE\s0 methods are themselves
substantial, but if they are only a few statements long, the overhead
will not be insignificant.
.SS "Localizing changes"
.IX Subsection "Localizing changes"
Perl has a very handy construction
.PP
.Vb 4
\&  {
\&    local $var = 2;
\&    ...
\&  }
.Ve
.PP
This construction is \fIapproximately\fR equivalent to
.PP
.Vb 6
\&  {
\&    my $oldvar = $var;
\&    $var = 2;
\&    ...
\&    $var = $oldvar;
\&  }
.Ve
.PP
The biggest difference is that the first construction would
reinstate the initial value of \f(CW$var\fR, irrespective of how control exits
the block: \f(CW\*(C`goto\*(C'\fR, \f(CW\*(C`return\*(C'\fR, \f(CW\*(C`die\*(C'\fR/\f(CW\*(C`eval\*(C'\fR, etc. It is a little bit
more efficient as well.
.PP
There is a way to achieve a similar task from C via Perl \s-1API:\s0 create a
\&\fIpseudo-block\fR, and arrange for some changes to be automatically
undone at the end of it, either explicit, or via a non-local exit (via
\&\fIdie()\fR). A \fIblock\fR\-like construct is created by a pair of
\&\f(CW\*(C`ENTER\*(C'\fR/\f(CW\*(C`LEAVE\*(C'\fR macros (see \*(L"Returning a Scalar\*(R" in perlcall).
Such a construct may be created specially for some important localized
task, or an existing one (like boundaries of enclosing Perl
subroutine/block, or an existing pair for freeing TMPs) may be
used. (In the second case the overhead of additional localization must
be almost negligible.) Note that any \s-1XSUB\s0 is automatically enclosed in
an \f(CW\*(C`ENTER\*(C'\fR/\f(CW\*(C`LEAVE\*(C'\fR pair.
.PP
Inside such a \fIpseudo-block\fR the following service is available:
.ie n .IP """SAVEINT(int i)""" 4
.el .IP "\f(CWSAVEINT(int i)\fR" 4
.IX Item "SAVEINT(int i)"
.PD 0
.ie n .IP """SAVEIV(IV i)""" 4
.el .IP "\f(CWSAVEIV(IV i)\fR" 4
.IX Item "SAVEIV(IV i)"
.ie n .IP """SAVEI32(I32 i)""" 4
.el .IP "\f(CWSAVEI32(I32 i)\fR" 4
.IX Item "SAVEI32(I32 i)"
.ie n .IP """SAVELONG(long i)""" 4
.el .IP "\f(CWSAVELONG(long i)\fR" 4
.IX Item "SAVELONG(long i)"
.PD
These macros arrange things to restore the value of integer variable
\&\f(CW\*(C`i\*(C'\fR at the end of enclosing \fIpseudo-block\fR.
.ie n .IP "SAVESPTR(s)" 4
.el .IP "\f(CWSAVESPTR(s)\fR" 4
.IX Item "SAVESPTR(s)"
.PD 0
.ie n .IP "SAVEPPTR(p)" 4
.el .IP "\f(CWSAVEPPTR(p)\fR" 4
.IX Item "SAVEPPTR(p)"
.PD
These macros arrange things to restore the value of pointers \f(CW\*(C`s\*(C'\fR and
\&\f(CW\*(C`p\*(C'\fR. \f(CW\*(C`s\*(C'\fR must be a pointer of a type which survives conversion to
\&\f(CW\*(C`SV*\*(C'\fR and back, \f(CW\*(C`p\*(C'\fR should be able to survive conversion to \f(CW\*(C`char*\*(C'\fR
and back.
.ie n .IP """SAVEFREESV(SV *sv)""" 4
.el .IP "\f(CWSAVEFREESV(SV *sv)\fR" 4
.IX Item "SAVEFREESV(SV *sv)"
The refcount of \f(CW\*(C`sv\*(C'\fR would be decremented at the end of
\&\fIpseudo-block\fR.  This is similar to \f(CW\*(C`sv_2mortal\*(C'\fR in that it is also a
mechanism for doing a delayed \f(CW\*(C`SvREFCNT_dec\*(C'\fR.  However, while \f(CW\*(C`sv_2mortal\*(C'\fR
extends the lifetime of \f(CW\*(C`sv\*(C'\fR until the beginning of the next statement,
\&\f(CW\*(C`SAVEFREESV\*(C'\fR extends it until the end of the enclosing scope.  These
lifetimes can be wildly different.
.Sp
Also compare \f(CW\*(C`SAVEMORTALIZESV\*(C'\fR.
.ie n .IP """SAVEMORTALIZESV(SV *sv)""" 4
.el .IP "\f(CWSAVEMORTALIZESV(SV *sv)\fR" 4
.IX Item "SAVEMORTALIZESV(SV *sv)"
Just like \f(CW\*(C`SAVEFREESV\*(C'\fR, but mortalizes \f(CW\*(C`sv\*(C'\fR at the end of the current
scope instead of decrementing its reference count.  This usually has the
effect of keeping \f(CW\*(C`sv\*(C'\fR alive until the statement that called the currently
live scope has finished executing.
.ie n .IP """SAVEFREEOP(OP *op)""" 4
.el .IP "\f(CWSAVEFREEOP(OP *op)\fR" 4
.IX Item "SAVEFREEOP(OP *op)"
The \f(CW\*(C`OP *\*(C'\fR is \fIop_free()\fRed at the end of \fIpseudo-block\fR.
.ie n .IP "SAVEFREEPV(p)" 4
.el .IP "\f(CWSAVEFREEPV(p)\fR" 4
.IX Item "SAVEFREEPV(p)"
The chunk of memory which is pointed to by \f(CW\*(C`p\*(C'\fR is \fISafefree()\fRed at the
end of \fIpseudo-block\fR.
.ie n .IP """SAVECLEARSV(SV *sv)""" 4
.el .IP "\f(CWSAVECLEARSV(SV *sv)\fR" 4
.IX Item "SAVECLEARSV(SV *sv)"
Clears a slot in the current scratchpad which corresponds to \f(CW\*(C`sv\*(C'\fR at
the end of \fIpseudo-block\fR.
.ie n .IP """SAVEDELETE(HV *hv, char *key, I32 length)""" 4
.el .IP "\f(CWSAVEDELETE(HV *hv, char *key, I32 length)\fR" 4
.IX Item "SAVEDELETE(HV *hv, char *key, I32 length)"
The key \f(CW\*(C`key\*(C'\fR of \f(CW\*(C`hv\*(C'\fR is deleted at the end of \fIpseudo-block\fR. The
string pointed to by \f(CW\*(C`key\*(C'\fR is \fISafefree()\fRed.  If one has a \fIkey\fR in
short-lived storage, the corresponding string may be reallocated like
this:
.Sp
.Vb 1
\&  SAVEDELETE(PL_defstash, savepv(tmpbuf), strlen(tmpbuf));
.Ve
.ie n .IP """SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)""" 4
.el .IP "\f(CWSAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)\fR" 4
.IX Item "SAVEDESTRUCTOR(DESTRUCTORFUNC_NOCONTEXT_t f, void *p)"
At the end of \fIpseudo-block\fR the function \f(CW\*(C`f\*(C'\fR is called with the
only argument \f(CW\*(C`p\*(C'\fR.
.ie n .IP """SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)""" 4
.el .IP "\f(CWSAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)\fR" 4
.IX Item "SAVEDESTRUCTOR_X(DESTRUCTORFUNC_t f, void *p)"
At the end of \fIpseudo-block\fR the function \f(CW\*(C`f\*(C'\fR is called with the
implicit context argument (if any), and \f(CW\*(C`p\*(C'\fR.
.ie n .IP """SAVESTACK_POS()""" 4
.el .IP "\f(CWSAVESTACK_POS()\fR" 4
.IX Item "SAVESTACK_POS()"
The current offset on the Perl internal stack (cf. \f(CW\*(C`SP\*(C'\fR) is restored
at the end of \fIpseudo-block\fR.
.PP
The following \s-1API\s0 list contains functions, thus one needs to
provide pointers to the modifiable data explicitly (either C pointers,
or Perlish \f(CW\*(C`GV *\*(C'\fRs).  Where the above macros take \f(CW\*(C`int\*(C'\fR, a similar
function takes \f(CW\*(C`int *\*(C'\fR.
.ie n .IP """SV* save_scalar(GV *gv)""" 4
.el .IP "\f(CWSV* save_scalar(GV *gv)\fR" 4
.IX Item "SV* save_scalar(GV *gv)"
Equivalent to Perl code \f(CW\*(C`local $gv\*(C'\fR.
.ie n .IP """AV* save_ary(GV *gv)""" 4
.el .IP "\f(CWAV* save_ary(GV *gv)\fR" 4
.IX Item "AV* save_ary(GV *gv)"
.PD 0
.ie n .IP """HV* save_hash(GV *gv)""" 4
.el .IP "\f(CWHV* save_hash(GV *gv)\fR" 4
.IX Item "HV* save_hash(GV *gv)"
.PD
Similar to \f(CW\*(C`save_scalar\*(C'\fR, but localize \f(CW@gv\fR and \f(CW%gv\fR.
.ie n .IP """void save_item(SV *item)""" 4
.el .IP "\f(CWvoid save_item(SV *item)\fR" 4
.IX Item "void save_item(SV *item)"
Duplicates the current value of \f(CW\*(C`SV\*(C'\fR, on the exit from the current
\&\f(CW\*(C`ENTER\*(C'\fR/\f(CW\*(C`LEAVE\*(C'\fR \fIpseudo-block\fR will restore the value of \f(CW\*(C`SV\*(C'\fR
using the stored value. It doesn't handle magic. Use \f(CW\*(C`save_scalar\*(C'\fR if
magic is affected.
.ie n .IP """void save_list(SV **sarg, I32 maxsarg)""" 4
.el .IP "\f(CWvoid save_list(SV **sarg, I32 maxsarg)\fR" 4
.IX Item "void save_list(SV **sarg, I32 maxsarg)"
A variant of \f(CW\*(C`save_item\*(C'\fR which takes multiple arguments via an array
\&\f(CW\*(C`sarg\*(C'\fR of \f(CW\*(C`SV*\*(C'\fR of length \f(CW\*(C`maxsarg\*(C'\fR.
.ie n .IP """SV* save_svref(SV **sptr)""" 4
.el .IP "\f(CWSV* save_svref(SV **sptr)\fR" 4
.IX Item "SV* save_svref(SV **sptr)"
Similar to \f(CW\*(C`save_scalar\*(C'\fR, but will reinstate an \f(CW\*(C`SV *\*(C'\fR.
.ie n .IP """void save_aptr(AV **aptr)""" 4
.el .IP "\f(CWvoid save_aptr(AV **aptr)\fR" 4
.IX Item "void save_aptr(AV **aptr)"
.PD 0
.ie n .IP """void save_hptr(HV **hptr)""" 4
.el .IP "\f(CWvoid save_hptr(HV **hptr)\fR" 4
.IX Item "void save_hptr(HV **hptr)"
.PD
Similar to \f(CW\*(C`save_svref\*(C'\fR, but localize \f(CW\*(C`AV *\*(C'\fR and \f(CW\*(C`HV *\*(C'\fR.
.PP
The \f(CW\*(C`Alias\*(C'\fR module implements localization of the basic types within the
\&\fIcaller's scope\fR.  People who are interested in how to localize things in
the containing scope should take a look there too.
.SH "Subroutines"
.IX Header "Subroutines"
.SS "XSUBs and the Argument Stack"
.IX Subsection "XSUBs and the Argument Stack"
The \s-1XSUB\s0 mechanism is a simple way for Perl programs to access C subroutines.
An \s-1XSUB\s0 routine will have a stack that contains the arguments from the Perl
program, and a way to map from the Perl data structures to a C equivalent.
.PP
The stack arguments are accessible through the \f(CWST(n)\fR macro, which returns
the \f(CW\*(C`n\*(C'\fR'th stack argument.  Argument 0 is the first argument passed in the
Perl subroutine call.  These arguments are \f(CW\*(C`SV*\*(C'\fR, and can be used anywhere
an \f(CW\*(C`SV*\*(C'\fR is used.
.PP
Most of the time, output from the C routine can be handled through use of
the \s-1RETVAL\s0 and \s-1OUTPUT\s0 directives.  However, there are some cases where the
argument stack is not already long enough to handle all the return values.
An example is the \s-1POSIX\s0 \fItzname()\fR call, which takes no arguments, but returns
two, the local time zone's standard and summer time abbreviations.
.PP
To handle this situation, the \s-1PPCODE\s0 directive is used and the stack is
extended using the macro:
.PP
.Vb 1
\&    EXTEND(SP, num);
.Ve
.PP
where \f(CW\*(C`SP\*(C'\fR is the macro that represents the local copy of the stack pointer,
and \f(CW\*(C`num\*(C'\fR is the number of elements the stack should be extended by.
.PP
Now that there is room on the stack, values can be pushed on it using \f(CW\*(C`PUSHs\*(C'\fR
macro. The pushed values will often need to be \*(L"mortal\*(R" (See
\&\*(L"Reference Counts and Mortality\*(R"):
.PP
.Vb 7
\&    PUSHs(sv_2mortal(newSViv(an_integer)))
\&    PUSHs(sv_2mortal(newSVuv(an_unsigned_integer)))
\&    PUSHs(sv_2mortal(newSVnv(a_double)))
\&    PUSHs(sv_2mortal(newSVpv("Some String",0)))
\&    /* Although the last example is better written as the more
\&     * efficient: */
\&    PUSHs(newSVpvs_flags("Some String", SVs_TEMP))
.Ve
.PP
And now the Perl program calling \f(CW\*(C`tzname\*(C'\fR, the two values will be assigned
as in:
.PP
.Vb 1
\&    ($standard_abbrev, $summer_abbrev) = POSIX::tzname;
.Ve
.PP
An alternate (and possibly simpler) method to pushing values on the stack is
to use the macro:
.PP
.Vb 1
\&    XPUSHs(SV*)
.Ve
.PP
This macro automatically adjusts the stack for you, if needed.  Thus, you
do not need to call \f(CW\*(C`EXTEND\*(C'\fR to extend the stack.
.PP
Despite their suggestions in earlier versions of this document the macros
\&\f(CW\*(C`(X)PUSH[iunp]\*(C'\fR are \fInot\fR suited to XSUBs which return multiple results.
For that, either stick to the \f(CW\*(C`(X)PUSHs\*(C'\fR macros shown above, or use the new
\&\f(CW\*(C`m(X)PUSH[iunp]\*(C'\fR macros instead; see \*(L"Putting a C value on Perl stack\*(R".
.PP
For more information, consult perlxs and perlxstut.
.SS "Autoloading with XSUBs"
.IX Subsection "Autoloading with XSUBs"
If an \s-1AUTOLOAD\s0 routine is an \s-1XSUB,\s0 as with Perl subroutines, Perl puts the
fully-qualified name of the autoloaded subroutine in the \f(CW$AUTOLOAD\fR variable
of the \s-1XSUB\s0's package.
.PP
But it also puts the same information in certain fields of the \s-1XSUB\s0 itself:
.PP
.Vb 4
\&    HV *stash           = CvSTASH(cv);
\&    const char *subname = SvPVX(cv);
\&    STRLEN name_length  = SvCUR(cv); /* in bytes */
\&    U32 is_utf8         = SvUTF8(cv);
.Ve
.PP
\&\f(CW\*(C`SvPVX(cv)\*(C'\fR contains just the sub name itself, not including the package.
For an \s-1AUTOLOAD\s0 routine in \s-1UNIVERSAL\s0 or one of its superclasses,
\&\f(CW\*(C`CvSTASH(cv)\*(C'\fR returns \s-1NULL\s0 during a method call on a nonexistent package.
.PP
\&\fBNote\fR: Setting \f(CW$AUTOLOAD\fR stopped working in 5.6.1, which did not support
\&\s-1XS AUTOLOAD\s0 subs at all.  Perl 5.8.0 introduced the use of fields in the
\&\s-1XSUB\s0 itself.  Perl 5.16.0 restored the setting of \f(CW$AUTOLOAD\fR.  If you need
to support 5.8\-5.14, use the \s-1XSUB\s0's fields.
.SS "Calling Perl Routines from within C Programs"
.IX Subsection "Calling Perl Routines from within C Programs"
There are four routines that can be used to call a Perl subroutine from
within a C program.  These four are:
.PP
.Vb 4
\&    I32  call_sv(SV*, I32);
\&    I32  call_pv(const char*, I32);
\&    I32  call_method(const char*, I32);
\&    I32  call_argv(const char*, I32, char**);
.Ve
.PP
The routine most often used is \f(CW\*(C`call_sv\*(C'\fR.  The \f(CW\*(C`SV*\*(C'\fR argument
contains either the name of the Perl subroutine to be called, or a
reference to the subroutine.  The second argument consists of flags
that control the context in which the subroutine is called, whether
or not the subroutine is being passed arguments, how errors should be
trapped, and how to treat return values.
.PP
All four routines return the number of arguments that the subroutine returned
on the Perl stack.
.PP
These routines used to be called \f(CW\*(C`perl_call_sv\*(C'\fR, etc., before Perl v5.6.0,
but those names are now deprecated; macros of the same name are provided for
compatibility.
.PP
When using any of these routines (except \f(CW\*(C`call_argv\*(C'\fR), the programmer
must manipulate the Perl stack.  These include the following macros and
functions:
.PP
.Vb 11
\&    dSP
\&    SP
\&    PUSHMARK()
\&    PUTBACK
\&    SPAGAIN
\&    ENTER
\&    SAVETMPS
\&    FREETMPS
\&    LEAVE
\&    XPUSH*()
\&    POP*()
.Ve
.PP
For a detailed description of calling conventions from C to Perl,
consult perlcall.
.SS "Memory Allocation"
.IX Subsection "Memory Allocation"
\fIAllocation\fR
.IX Subsection "Allocation"
.PP
All memory meant to be used with the Perl \s-1API\s0 functions should be manipulated
using the macros described in this section.  The macros provide the necessary
transparency between differences in the actual malloc implementation that is
used within perl.
.PP
It is suggested that you enable the version of malloc that is distributed
with Perl.  It keeps pools of various sizes of unallocated memory in
order to satisfy allocation requests more quickly.  However, on some
platforms, it may cause spurious malloc or free errors.
.PP
The following three macros are used to initially allocate memory :
.PP
.Vb 3
\&    Newx(pointer, number, type);
\&    Newxc(pointer, number, type, cast);
\&    Newxz(pointer, number, type);
.Ve
.PP
The first argument \f(CW\*(C`pointer\*(C'\fR should be the name of a variable that will
point to the newly allocated memory.
.PP
The second and third arguments \f(CW\*(C`number\*(C'\fR and \f(CW\*(C`type\*(C'\fR specify how many of
the specified type of data structure should be allocated.  The argument
\&\f(CW\*(C`type\*(C'\fR is passed to \f(CW\*(C`sizeof\*(C'\fR.  The final argument to \f(CW\*(C`Newxc\*(C'\fR, \f(CW\*(C`cast\*(C'\fR,
should be used if the \f(CW\*(C`pointer\*(C'\fR argument is different from the \f(CW\*(C`type\*(C'\fR
argument.
.PP
Unlike the \f(CW\*(C`Newx\*(C'\fR and \f(CW\*(C`Newxc\*(C'\fR macros, the \f(CW\*(C`Newxz\*(C'\fR macro calls \f(CW\*(C`memzero\*(C'\fR
to zero out all the newly allocated memory.
.PP
\fIReallocation\fR
.IX Subsection "Reallocation"
.PP
.Vb 3
\&    Renew(pointer, number, type);
\&    Renewc(pointer, number, type, cast);
\&    Safefree(pointer)
.Ve
.PP
These three macros are used to change a memory buffer size or to free a
piece of memory no longer needed.  The arguments to \f(CW\*(C`Renew\*(C'\fR and \f(CW\*(C`Renewc\*(C'\fR
match those of \f(CW\*(C`New\*(C'\fR and \f(CW\*(C`Newc\*(C'\fR with the exception of not needing the
\&\*(L"magic cookie\*(R" argument.
.PP
\fIMoving\fR
.IX Subsection "Moving"
.PP
.Vb 3
\&    Move(source, dest, number, type);
\&    Copy(source, dest, number, type);
\&    Zero(dest, number, type);
.Ve
.PP
These three macros are used to move, copy, or zero out previously allocated
memory.  The \f(CW\*(C`source\*(C'\fR and \f(CW\*(C`dest\*(C'\fR arguments point to the source and
destination starting points.  Perl will move, copy, or zero out \f(CW\*(C`number\*(C'\fR
instances of the size of the \f(CW\*(C`type\*(C'\fR data structure (using the \f(CW\*(C`sizeof\*(C'\fR
function).
.SS "PerlIO"
.IX Subsection "PerlIO"
The most recent development releases of Perl have been experimenting with
removing Perl's dependency on the \*(L"normal\*(R" standard I/O suite and allowing
other stdio implementations to be used.  This involves creating a new
abstraction layer that then calls whichever implementation of stdio Perl
was compiled with.  All XSUBs should now use the functions in the PerlIO
abstraction layer and not make any assumptions about what kind of stdio
is being used.
.PP
For a complete description of the PerlIO abstraction, consult perlapio.
.SS "Putting a C value on Perl stack"
.IX Subsection "Putting a C value on Perl stack"
A lot of opcodes (this is an elementary operation in the internal perl
stack machine) put an SV* on the stack. However, as an optimization
the corresponding \s-1SV\s0 is (usually) not recreated each time. The opcodes
reuse specially assigned SVs (\fItarget\fRs) which are (as a corollary)
not constantly freed/created.
.PP
Each of the targets is created only once (but see
\&\*(L"Scratchpads and recursion\*(R" below), and when an opcode needs to put
an integer, a double, or a string on stack, it just sets the
corresponding parts of its \fItarget\fR and puts the \fItarget\fR on stack.
.PP
The macro to put this target on stack is \f(CW\*(C`PUSHTARG\*(C'\fR, and it is
directly used in some opcodes, as well as indirectly in zillions of
others, which use it via \f(CW\*(C`(X)PUSH[iunp]\*(C'\fR.
.PP
Because the target is reused, you must be careful when pushing multiple
values on the stack. The following code will not do what you think:
.PP
.Vb 2
\&    XPUSHi(10);
\&    XPUSHi(20);
.Ve
.PP
This translates as "set \f(CW\*(C`TARG\*(C'\fR to 10, push a pointer to \f(CW\*(C`TARG\*(C'\fR onto
the stack; set \f(CW\*(C`TARG\*(C'\fR to 20, push a pointer to \f(CW\*(C`TARG\*(C'\fR onto the stack".
At the end of the operation, the stack does not contain the values 10
and 20, but actually contains two pointers to \f(CW\*(C`TARG\*(C'\fR, which we have set
to 20.
.PP
If you need to push multiple different values then you should either use
the \f(CW\*(C`(X)PUSHs\*(C'\fR macros, or else use the new \f(CW\*(C`m(X)PUSH[iunp]\*(C'\fR macros,
none of which make use of \f(CW\*(C`TARG\*(C'\fR.  The \f(CW\*(C`(X)PUSHs\*(C'\fR macros simply push an
SV* on the stack, which, as noted under \*(L"XSUBs and the Argument Stack\*(R",
will often need to be \*(L"mortal\*(R".  The new \f(CW\*(C`m(X)PUSH[iunp]\*(C'\fR macros make
this a little easier to achieve by creating a new mortal for you (via
\&\f(CW\*(C`(X)PUSHmortal\*(C'\fR), pushing that onto the stack (extending it if necessary
in the case of the \f(CW\*(C`mXPUSH[iunp]\*(C'\fR macros), and then setting its value.
Thus, instead of writing this to \*(L"fix\*(R" the example above:
.PP
.Vb 2
\&    XPUSHs(sv_2mortal(newSViv(10)))
\&    XPUSHs(sv_2mortal(newSViv(20)))
.Ve
.PP
you can simply write:
.PP
.Vb 2
\&    mXPUSHi(10)
\&    mXPUSHi(20)
.Ve
.PP
On a related note, if you do use \f(CW\*(C`(X)PUSH[iunp]\*(C'\fR, then you're going to
need a \f(CW\*(C`dTARG\*(C'\fR in your variable declarations so that the \f(CW\*(C`*PUSH*\*(C'\fR
macros can make use of the local variable \f(CW\*(C`TARG\*(C'\fR.  See also \f(CW\*(C`dTARGET\*(C'\fR
and \f(CW\*(C`dXSTARG\*(C'\fR.
.SS "Scratchpads"
.IX Subsection "Scratchpads"
The question remains on when the SVs which are \fItarget\fRs for opcodes
are created. The answer is that they are created when the current
unit\*(--a subroutine or a file (for opcodes for statements outside of
subroutines)\-\-is compiled. During this time a special anonymous Perl
array is created, which is called a scratchpad for the current unit.
.PP
A scratchpad keeps SVs which are lexicals for the current unit and are
targets for opcodes. One can deduce that an \s-1SV\s0 lives on a scratchpad
by looking on its flags: lexicals have \f(CW\*(C`SVs_PADMY\*(C'\fR set, and
\&\fItarget\fRs have \f(CW\*(C`SVs_PADTMP\*(C'\fR set.
.PP
The correspondence between OPs and \fItarget\fRs is not 1\-to\-1. Different
OPs in the compile tree of the unit can use the same target, if this
would not conflict with the expected life of the temporary.
.SS "Scratchpads and recursion"
.IX Subsection "Scratchpads and recursion"
In fact it is not 100% true that a compiled unit contains a pointer to
the scratchpad \s-1AV.\s0 In fact it contains a pointer to an \s-1AV\s0 of
(initially) one element, and this element is the scratchpad \s-1AV.\s0 Why do
we need an extra level of indirection?
.PP
The answer is \fBrecursion\fR, and maybe \fBthreads\fR. Both
these can create several execution pointers going into the same
subroutine. For the subroutine-child not write over the temporaries
for the subroutine-parent (lifespan of which covers the call to the
child), the parent and the child should have different
scratchpads. (\fIAnd\fR the lexicals should be separate anyway!)
.PP
So each subroutine is born with an array of scratchpads (of length 1).
On each entry to the subroutine it is checked that the current
depth of the recursion is not more than the length of this array, and
if it is, new scratchpad is created and pushed into the array.
.PP
The \fItarget\fRs on this scratchpad are \f(CW\*(C`undef\*(C'\fRs, but they are already
marked with correct flags.
.SH "Compiled code"
.IX Header "Compiled code"
.SS "Code tree"
.IX Subsection "Code tree"
Here we describe the internal form your code is converted to by
Perl. Start with a simple example:
.PP
.Vb 1
\&  $a = $b + $c;
.Ve
.PP
This is converted to a tree similar to this one:
.PP
.Vb 5
\&             assign\-to
\&           /           \e
\&          +             $a
\&        /   \e
\&      $b     $c
.Ve
.PP
(but slightly more complicated).  This tree reflects the way Perl
parsed your code, but has nothing to do with the execution order.
There is an additional \*(L"thread\*(R" going through the nodes of the tree
which shows the order of execution of the nodes.  In our simplified
example above it looks like:
.PP
.Vb 1
\&     $b \-\-\-> $c \-\-\-> + \-\-\-> $a \-\-\-> assign\-to
.Ve
.PP
But with the actual compile tree for \f(CW\*(C`$a = $b + $c\*(C'\fR it is different:
some nodes \fIoptimized away\fR.  As a corollary, though the actual tree
contains more nodes than our simplified example, the execution order
is the same as in our example.
.SS "Examining the tree"
.IX Subsection "Examining the tree"
If you have your perl compiled for debugging (usually done with
\&\f(CW\*(C`\-DDEBUGGING\*(C'\fR on the \f(CW\*(C`Configure\*(C'\fR command line), you may examine the
compiled tree by specifying \f(CW\*(C`\-Dx\*(C'\fR on the Perl command line.  The
output takes several lines per node, and for \f(CW\*(C`$b+$c\*(C'\fR it looks like
this:
.PP
.Vb 10
\&    5           TYPE = add  ===> 6
\&                TARG = 1
\&                FLAGS = (SCALAR,KIDS)
\&                {
\&                    TYPE = null  ===> (4)
\&                      (was rv2sv)
\&                    FLAGS = (SCALAR,KIDS)
\&                    {
\&    3                   TYPE = gvsv  ===> 4
\&                        FLAGS = (SCALAR)
\&                        GV = main::b
\&                    }
\&                }
\&                {
\&                    TYPE = null  ===> (5)
\&                      (was rv2sv)
\&                    FLAGS = (SCALAR,KIDS)
\&                    {
\&    4                   TYPE = gvsv  ===> 5
\&                        FLAGS = (SCALAR)
\&                        GV = main::c
\&                    }
\&                }
.Ve
.PP
This tree has 5 nodes (one per \f(CW\*(C`TYPE\*(C'\fR specifier), only 3 of them are
not optimized away (one per number in the left column).  The immediate
children of the given node correspond to \f(CW\*(C`{}\*(C'\fR pairs on the same level
of indentation, thus this listing corresponds to the tree:
.PP
.Vb 5
\&                   add
\&                 /     \e
\&               null    null
\&                |       |
\&               gvsv    gvsv
.Ve
.PP
The execution order is indicated by \f(CW\*(C`===>\*(C'\fR marks, thus it is \f(CW\*(C`3
4 5 6\*(C'\fR (node \f(CW6\fR is not included into above listing), i.e.,
\&\f(CW\*(C`gvsv gvsv add whatever\*(C'\fR.
.PP
Each of these nodes represents an op, a fundamental operation inside the
Perl core. The code which implements each operation can be found in the
\&\fIpp*.c\fR files; the function which implements the op with type \f(CW\*(C`gvsv\*(C'\fR
is \f(CW\*(C`pp_gvsv\*(C'\fR, and so on. As the tree above shows, different ops have
different numbers of children: \f(CW\*(C`add\*(C'\fR is a binary operator, as one would
expect, and so has two children. To accommodate the various different
numbers of children, there are various types of op data structure, and
they link together in different ways.
.PP
The simplest type of op structure is \f(CW\*(C`OP\*(C'\fR: this has no children. Unary
operators, \f(CW\*(C`UNOP\*(C'\fRs, have one child, and this is pointed to by the
\&\f(CW\*(C`op_first\*(C'\fR field. Binary operators (\f(CW\*(C`BINOP\*(C'\fRs) have not only an
\&\f(CW\*(C`op_first\*(C'\fR field but also an \f(CW\*(C`op_last\*(C'\fR field. The most complex type of
op is a \f(CW\*(C`LISTOP\*(C'\fR, which has any number of children. In this case, the
first child is pointed to by \f(CW\*(C`op_first\*(C'\fR and the last child by
\&\f(CW\*(C`op_last\*(C'\fR. The children in between can be found by iteratively
following the \f(CW\*(C`op_sibling\*(C'\fR pointer from the first child to the last.
.PP
There are also two other op types: a \f(CW\*(C`PMOP\*(C'\fR holds a regular expression,
and has no children, and a \f(CW\*(C`LOOP\*(C'\fR may or may not have children. If the
\&\f(CW\*(C`op_children\*(C'\fR field is non-zero, it behaves like a \f(CW\*(C`LISTOP\*(C'\fR. To
complicate matters, if a \f(CW\*(C`UNOP\*(C'\fR is actually a \f(CW\*(C`null\*(C'\fR op after
optimization (see \*(L"Compile pass 2: context propagation\*(R") it will still
have children in accordance with its former type.
.PP
Another way to examine the tree is to use a compiler back-end module, such
as B::Concise.
.SS "Compile pass 1: check routines"
.IX Subsection "Compile pass 1: check routines"
The tree is created by the compiler while \fIyacc\fR code feeds it
the constructions it recognizes. Since \fIyacc\fR works bottom-up, so does
the first pass of perl compilation.
.PP
What makes this pass interesting for perl developers is that some
optimization may be performed on this pass.  This is optimization by
so-called \*(L"check routines\*(R".  The correspondence between node names
and corresponding check routines is described in \fIopcode.pl\fR (do not
forget to run \f(CW\*(C`make regen_headers\*(C'\fR if you modify this file).
.PP
A check routine is called when the node is fully constructed except
for the execution-order thread.  Since at this time there are no
back-links to the currently constructed node, one can do most any
operation to the top-level node, including freeing it and/or creating
new nodes above/below it.
.PP
The check routine returns the node which should be inserted into the
tree (if the top-level node was not modified, check routine returns
its argument).
.PP
By convention, check routines have names \f(CW\*(C`ck_*\*(C'\fR. They are usually
called from \f(CW\*(C`new*OP\*(C'\fR subroutines (or \f(CW\*(C`convert\*(C'\fR) (which in turn are
called from \fIperly.y\fR).
.SS "Compile pass 1a: constant folding"
.IX Subsection "Compile pass 1a: constant folding"
Immediately after the check routine is called the returned node is
checked for being compile-time executable.  If it is (the value is
judged to be constant) it is immediately executed, and a \fIconstant\fR
node with the \*(L"return value\*(R" of the corresponding subtree is
substituted instead.  The subtree is deleted.
.PP
If constant folding was not performed, the execution-order thread is
created.
.SS "Compile pass 2: context propagation"
.IX Subsection "Compile pass 2: context propagation"
When a context for a part of compile tree is known, it is propagated
down through the tree.  At this time the context can have 5 values
(instead of 2 for runtime context): void, boolean, scalar, list, and
lvalue.  In contrast with the pass 1 this pass is processed from top
to bottom: a node's context determines the context for its children.
.PP
Additional context-dependent optimizations are performed at this time.
Since at this moment the compile tree contains back-references (via
\&\*(L"thread\*(R" pointers), nodes cannot be \fIfree()\fRd now.  To allow
optimized-away nodes at this stage, such nodes are \fInull()\fRified instead
of \fIfree()\fRing (i.e. their type is changed to \s-1OP_NULL\s0).
.SS "Compile pass 3: peephole optimization"
.IX Subsection "Compile pass 3: peephole optimization"
After the compile tree for a subroutine (or for an \f(CW\*(C`eval\*(C'\fR or a file)
is created, an additional pass over the code is performed. This pass
is neither top-down or bottom-up, but in the execution order (with
additional complications for conditionals).  Optimizations performed
at this stage are subject to the same restrictions as in the pass 2.
.PP
Peephole optimizations are done by calling the function pointed to
by the global variable \f(CW\*(C`PL_peepp\*(C'\fR.  By default, \f(CW\*(C`PL_peepp\*(C'\fR just
calls the function pointed to by the global variable \f(CW\*(C`PL_rpeepp\*(C'\fR.
By default, that performs some basic op fixups and optimisations along
the execution-order op chain, and recursively calls \f(CW\*(C`PL_rpeepp\*(C'\fR for
each side chain of ops (resulting from conditionals).  Extensions may
provide additional optimisations or fixups, hooking into either the
per-subroutine or recursive stage, like this:
.PP
.Vb 10
\&    static peep_t prev_peepp;
\&    static void my_peep(pTHX_ OP *o)
\&    {
\&        /* custom per\-subroutine optimisation goes here */
\&        prev_peepp(aTHX_ o);
\&        /* custom per\-subroutine optimisation may also go here */
\&    }
\&    BOOT:
\&        prev_peepp = PL_peepp;
\&        PL_peepp = my_peep;
\&
\&    static peep_t prev_rpeepp;
\&    static void my_rpeep(pTHX_ OP *o)
\&    {
\&        OP *orig_o = o;
\&        for(; o; o = o\->op_next) {
\&            /* custom per\-op optimisation goes here */
\&        }
\&        prev_rpeepp(aTHX_ orig_o);
\&    }
\&    BOOT:
\&        prev_rpeepp = PL_rpeepp;
\&        PL_rpeepp = my_rpeep;
.Ve
.SS "Pluggable runops"
.IX Subsection "Pluggable runops"
The compile tree is executed in a runops function.  There are two runops
functions, in \fIrun.c\fR and in \fIdump.c\fR.  \f(CW\*(C`Perl_runops_debug\*(C'\fR is used
with \s-1DEBUGGING\s0 and \f(CW\*(C`Perl_runops_standard\*(C'\fR is used otherwise.  For fine
control over the execution of the compile tree it is possible to provide
your own runops function.
.PP
It's probably best to copy one of the existing runops functions and
change it to suit your needs.  Then, in the \s-1BOOT\s0 section of your \s-1XS\s0
file, add the line:
.PP
.Vb 1
\&  PL_runops = my_runops;
.Ve
.PP
This function should be as efficient as possible to keep your programs
running as fast as possible.
.SS "Compile-time scope hooks"
.IX Subsection "Compile-time scope hooks"
As of perl 5.14 it is possible to hook into the compile-time lexical
scope mechanism using \f(CW\*(C`Perl_blockhook_register\*(C'\fR. This is used like
this:
.PP
.Vb 2
\&    STATIC void my_start_hook(pTHX_ int full);
\&    STATIC BHK my_hooks;
\&
\&    BOOT:
\&        BhkENTRY_set(&my_hooks, bhk_start, my_start_hook);
\&        Perl_blockhook_register(aTHX_ &my_hooks);
.Ve
.PP
This will arrange to have \f(CW\*(C`my_start_hook\*(C'\fR called at the start of
compiling every lexical scope. The available hooks are:
.ie n .IP """void bhk_start(pTHX_ int full)""" 4
.el .IP "\f(CWvoid bhk_start(pTHX_ int full)\fR" 4
.IX Item "void bhk_start(pTHX_ int full)"
This is called just after starting a new lexical scope. Note that Perl
code like
.Sp
.Vb 1
\&    if ($x) { ... }
.Ve
.Sp
creates two scopes: the first starts at the \f(CW\*(C`(\*(C'\fR and has \f(CW\*(C`full == 1\*(C'\fR,
the second starts at the \f(CW\*(C`{\*(C'\fR and has \f(CW\*(C`full == 0\*(C'\fR. Both end at the
\&\f(CW\*(C`}\*(C'\fR, so calls to \f(CW\*(C`start\*(C'\fR and \f(CW\*(C`pre/post_end\*(C'\fR will match. Anything
pushed onto the save stack by this hook will be popped just before the
scope ends (between the \f(CW\*(C`pre_\*(C'\fR and \f(CW\*(C`post_end\*(C'\fR hooks, in fact).
.ie n .IP """void bhk_pre_end(pTHX_ OP **o)""" 4
.el .IP "\f(CWvoid bhk_pre_end(pTHX_ OP **o)\fR" 4
.IX Item "void bhk_pre_end(pTHX_ OP **o)"
This is called at the end of a lexical scope, just before unwinding the
stack. \fIo\fR is the root of the optree representing the scope; it is a
double pointer so you can replace the \s-1OP\s0 if you need to.
.ie n .IP """void bhk_post_end(pTHX_ OP **o)""" 4
.el .IP "\f(CWvoid bhk_post_end(pTHX_ OP **o)\fR" 4
.IX Item "void bhk_post_end(pTHX_ OP **o)"
This is called at the end of a lexical scope, just after unwinding the
stack. \fIo\fR is as above. Note that it is possible for calls to \f(CW\*(C`pre_\*(C'\fR
and \f(CW\*(C`post_end\*(C'\fR to nest, if there is something on the save stack that
calls string eval.
.ie n .IP """void bhk_eval(pTHX_ OP *const o)""" 4
.el .IP "\f(CWvoid bhk_eval(pTHX_ OP *const o)\fR" 4
.IX Item "void bhk_eval(pTHX_ OP *const o)"
This is called just before starting to compile an \f(CW\*(C`eval STRING\*(C'\fR, \f(CW\*(C`do
FILE\*(C'\fR, \f(CW\*(C`require\*(C'\fR or \f(CW\*(C`use\*(C'\fR, after the eval has been set up. \fIo\fR is the
\&\s-1OP\s0 that requested the eval, and will normally be an \f(CW\*(C`OP_ENTEREVAL\*(C'\fR,
\&\f(CW\*(C`OP_DOFILE\*(C'\fR or \f(CW\*(C`OP_REQUIRE\*(C'\fR.
.PP
Once you have your hook functions, you need a \f(CW\*(C`BHK\*(C'\fR structure to put
them in. It's best to allocate it statically, since there is no way to
free it once it's registered. The function pointers should be inserted
into this structure using the \f(CW\*(C`BhkENTRY_set\*(C'\fR macro, which will also set
flags indicating which entries are valid. If you do need to allocate
your \f(CW\*(C`BHK\*(C'\fR dynamically for some reason, be sure to zero it before you
start.
.PP
Once registered, there is no mechanism to switch these hooks off, so if
that is necessary you will need to do this yourself. An entry in \f(CW\*(C`%^H\*(C'\fR
is probably the best way, so the effect is lexically scoped; however it
is also possible to use the \f(CW\*(C`BhkDISABLE\*(C'\fR and \f(CW\*(C`BhkENABLE\*(C'\fR macros to
temporarily switch entries on and off. You should also be aware that
generally speaking at least one scope will have opened before your
extension is loaded, so you will see some \f(CW\*(C`pre/post_end\*(C'\fR pairs that
didn't have a matching \f(CW\*(C`start\*(C'\fR.
.ie n .SH "Examining internal data structures with the ""dump"" functions"
.el .SH "Examining internal data structures with the \f(CWdump\fP functions"
.IX Header "Examining internal data structures with the dump functions"
To aid debugging, the source file \fIdump.c\fR contains a number of
functions which produce formatted output of internal data structures.
.PP
The most commonly used of these functions is \f(CW\*(C`Perl_sv_dump\*(C'\fR; it's used
for dumping SVs, AVs, HVs, and CVs. The \f(CW\*(C`Devel::Peek\*(C'\fR module calls
\&\f(CW\*(C`sv_dump\*(C'\fR to produce debugging output from Perl-space, so users of that
module should already be familiar with its format.
.PP
\&\f(CW\*(C`Perl_op_dump\*(C'\fR can be used to dump an \f(CW\*(C`OP\*(C'\fR structure or any of its
derivatives, and produces output similar to \f(CW\*(C`perl \-Dx\*(C'\fR; in fact,
\&\f(CW\*(C`Perl_dump_eval\*(C'\fR will dump the main root of the code being evaluated,
exactly like \f(CW\*(C`\-Dx\*(C'\fR.
.PP
Other useful functions are \f(CW\*(C`Perl_dump_sub\*(C'\fR, which turns a \f(CW\*(C`GV\*(C'\fR into an
op tree, \f(CW\*(C`Perl_dump_packsubs\*(C'\fR which calls \f(CW\*(C`Perl_dump_sub\*(C'\fR on all the
subroutines in a package like so: (Thankfully, these are all xsubs, so
there is no op tree)
.PP
.Vb 1
\&    (gdb) print Perl_dump_packsubs(PL_defstash)
\&
\&    SUB attributes::bootstrap = (xsub 0x811fedc 0)
\&
\&    SUB UNIVERSAL::can = (xsub 0x811f50c 0)
\&
\&    SUB UNIVERSAL::isa = (xsub 0x811f304 0)
\&
\&    SUB UNIVERSAL::VERSION = (xsub 0x811f7ac 0)
\&
\&    SUB DynaLoader::boot_DynaLoader = (xsub 0x805b188 0)
.Ve
.PP
and \f(CW\*(C`Perl_dump_all\*(C'\fR, which dumps all the subroutines in the stash and
the op tree of the main root.
.SH "How multiple interpreters and concurrency are supported"
.IX Header "How multiple interpreters and concurrency are supported"
.SS "Background and \s-1PERL_IMPLICIT_CONTEXT\s0"
.IX Subsection "Background and PERL_IMPLICIT_CONTEXT"
The Perl interpreter can be regarded as a closed box: it has an \s-1API\s0
for feeding it code or otherwise making it do things, but it also has
functions for its own use.  This smells a lot like an object, and
there are ways for you to build Perl so that you can have multiple
interpreters, with one interpreter represented either as a C structure,
or inside a thread-specific structure.  These structures contain all
the context, the state of that interpreter.
.PP
One macro controls the major Perl build flavor: \s-1MULTIPLICITY.\s0 The
\&\s-1MULTIPLICITY\s0 build has a C structure that packages all the interpreter
state. With multiplicity-enabled perls, \s-1PERL_IMPLICIT_CONTEXT\s0 is also
normally defined, and enables the support for passing in a \*(L"hidden\*(R" first
argument that represents all three data structures. \s-1MULTIPLICITY\s0 makes
multi-threaded perls possible (with the ithreads threading model, related
to the macro \s-1USE_ITHREADS.\s0)
.PP
Two other \*(L"encapsulation\*(R" macros are the \s-1PERL_GLOBAL_STRUCT\s0 and
\&\s-1PERL_GLOBAL_STRUCT_PRIVATE \s0(the latter turns on the former, and the
former turns on \s-1MULTIPLICITY.\s0)  The \s-1PERL_GLOBAL_STRUCT\s0 causes all the
internal variables of Perl to be wrapped inside a single global struct,
struct perl_vars, accessible as (globals) &PL_Vars or PL_VarsPtr or
the function  \fIPerl_GetVars()\fR.  The \s-1PERL_GLOBAL_STRUCT_PRIVATE\s0 goes
one step further, there is still a single struct (allocated in \fImain()\fR
either from heap or from stack) but there are no global data symbols
pointing to it.  In either case the global struct should be initialised
as the very first thing in \fImain()\fR using \fIPerl_init_global_struct()\fR and
correspondingly tear it down after \fIperl_free()\fR using \fIPerl_free_global_struct()\fR,
please see \fIminiperlmain.c\fR for usage details.  You may also need
to use \f(CW\*(C`dVAR\*(C'\fR in your coding to \*(L"declare the global variables\*(R"
when you are using them.  dTHX does this for you automatically.
.PP
To see whether you have non-const data you can use a BSD-compatible \f(CW\*(C`nm\*(C'\fR:
.PP
.Vb 1
\&  nm libperl.a | grep \-v \*(Aq [TURtr] \*(Aq
.Ve
.PP
If this displays any \f(CW\*(C`D\*(C'\fR or \f(CW\*(C`d\*(C'\fR symbols, you have non-const data.
.PP
For backward compatibility reasons defining just \s-1PERL_GLOBAL_STRUCT\s0
doesn't actually hide all symbols inside a big global struct: some
PerlIO_xxx vtables are left visible.  The \s-1PERL_GLOBAL_STRUCT_PRIVATE\s0
then hides everything (see how the \s-1PERLIO_FUNCS_DECL\s0 is used).
.PP
All this obviously requires a way for the Perl internal functions to be
either subroutines taking some kind of structure as the first
argument, or subroutines taking nothing as the first argument.  To
enable these two very different ways of building the interpreter,
the Perl source (as it does in so many other situations) makes heavy
use of macros and subroutine naming conventions.
.PP
First problem: deciding which functions will be public \s-1API\s0 functions and
which will be private.  All functions whose names begin \f(CW\*(C`S_\*(C'\fR are private
(think \*(L"S\*(R" for \*(L"secret\*(R" or \*(L"static\*(R").  All other functions begin with
\&\*(L"Perl_\*(R", but just because a function begins with \*(L"Perl_\*(R" does not mean it is
part of the \s-1API. \s0(See \*(L"Internal Functions\*(R".) The easiest way to be \fBsure\fR a
function is part of the \s-1API\s0 is to find its entry in perlapi.
If it exists in perlapi, it's part of the \s-1API. \s0 If it doesn't, and you
think it should be (i.e., you need it for your extension), send mail via
perlbug explaining why you think it should be.
.PP
Second problem: there must be a syntax so that the same subroutine
declarations and calls can pass a structure as their first argument,
or pass nothing.  To solve this, the subroutines are named and
declared in a particular way.  Here's a typical start of a static
function used within the Perl guts:
.PP
.Vb 2
\&  STATIC void
\&  S_incline(pTHX_ char *s)
.Ve
.PP
\&\s-1STATIC\s0 becomes \*(L"static\*(R" in C, and may be #define'd to nothing in some
configurations in the future.
.PP
A public function (i.e. part of the internal \s-1API,\s0 but not necessarily
sanctioned for use in extensions) begins like this:
.PP
.Vb 2
\&  void
\&  Perl_sv_setiv(pTHX_ SV* dsv, IV num)
.Ve
.PP
\&\f(CW\*(C`pTHX_\*(C'\fR is one of a number of macros (in \fIperl.h\fR) that hide the
details of the interpreter's context.  \s-1THX\s0 stands for \*(L"thread\*(R", \*(L"this\*(R",
or \*(L"thingy\*(R", as the case may be.  (And no, George Lucas is not involved. :\-)
The first character could be 'p' for a \fBp\fRrototype, 'a' for \fBa\fRrgument,
or 'd' for \fBd\fReclaration, so we have \f(CW\*(C`pTHX\*(C'\fR, \f(CW\*(C`aTHX\*(C'\fR and \f(CW\*(C`dTHX\*(C'\fR, and
their variants.
.PP
When Perl is built without options that set \s-1PERL_IMPLICIT_CONTEXT,\s0 there is no
first argument containing the interpreter's context.  The trailing underscore
in the pTHX_ macro indicates that the macro expansion needs a comma
after the context argument because other arguments follow it.  If
\&\s-1PERL_IMPLICIT_CONTEXT\s0 is not defined, pTHX_ will be ignored, and the
subroutine is not prototyped to take the extra argument.  The form of the
macro without the trailing underscore is used when there are no additional
explicit arguments.
.PP
When a core function calls another, it must pass the context.  This
is normally hidden via macros.  Consider \f(CW\*(C`sv_setiv\*(C'\fR.  It expands into
something like this:
.PP
.Vb 6
\&    #ifdef PERL_IMPLICIT_CONTEXT
\&      #define sv_setiv(a,b)      Perl_sv_setiv(aTHX_ a, b)
\&      /* can\*(Aqt do this for vararg functions, see below */
\&    #else
\&      #define sv_setiv           Perl_sv_setiv
\&    #endif
.Ve
.PP
This works well, and means that \s-1XS\s0 authors can gleefully write:
.PP
.Vb 1
\&    sv_setiv(foo, bar);
.Ve
.PP
and still have it work under all the modes Perl could have been
compiled with.
.PP
This doesn't work so cleanly for varargs functions, though, as macros
imply that the number of arguments is known in advance.  Instead we
either need to spell them out fully, passing \f(CW\*(C`aTHX_\*(C'\fR as the first
argument (the Perl core tends to do this with functions like
Perl_warner), or use a context-free version.
.PP
The context-free version of Perl_warner is called
Perl_warner_nocontext, and does not take the extra argument.  Instead
it does dTHX; to get the context from thread-local storage.  We
\&\f(CW\*(C`#define warner Perl_warner_nocontext\*(C'\fR so that extensions get source
compatibility at the expense of performance.  (Passing an arg is
cheaper than grabbing it from thread-local storage.)
.PP
You can ignore [pad]THXx when browsing the Perl headers/sources.
Those are strictly for use within the core.  Extensions and embedders
need only be aware of [pad]THX.
.SS "So what happened to dTHR?"
.IX Subsection "So what happened to dTHR?"
\&\f(CW\*(C`dTHR\*(C'\fR was introduced in perl 5.005 to support the older thread model.
The older thread model now uses the \f(CW\*(C`THX\*(C'\fR mechanism to pass context
pointers around, so \f(CW\*(C`dTHR\*(C'\fR is not useful any more.  Perl 5.6.0 and
later still have it for backward source compatibility, but it is defined
to be a no-op.
.SS "How do I use all this in extensions?"
.IX Subsection "How do I use all this in extensions?"
When Perl is built with \s-1PERL_IMPLICIT_CONTEXT,\s0 extensions that call
any functions in the Perl \s-1API\s0 will need to pass the initial context
argument somehow.  The kicker is that you will need to write it in
such a way that the extension still compiles when Perl hasn't been
built with \s-1PERL_IMPLICIT_CONTEXT\s0 enabled.
.PP
There are three ways to do this.  First, the easy but inefficient way,
which is also the default, in order to maintain source compatibility
with extensions: whenever \fI\s-1XSUB\s0.h\fR is #included, it redefines the aTHX
and aTHX_ macros to call a function that will return the context.
Thus, something like:
.PP
.Vb 1
\&        sv_setiv(sv, num);
.Ve
.PP
in your extension will translate to this when \s-1PERL_IMPLICIT_CONTEXT\s0 is
in effect:
.PP
.Vb 1
\&        Perl_sv_setiv(Perl_get_context(), sv, num);
.Ve
.PP
or to this otherwise:
.PP
.Vb 1
\&        Perl_sv_setiv(sv, num);
.Ve
.PP
You don't have to do anything new in your extension to get this; since
the Perl library provides \fIPerl_get_context()\fR, it will all just
work.
.PP
The second, more efficient way is to use the following template for
your Foo.xs:
.PP
.Vb 4
\&        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
\&        #include "EXTERN.h"
\&        #include "perl.h"
\&        #include "XSUB.h"
\&
\&        STATIC void my_private_function(int arg1, int arg2);
\&
\&        STATIC void
\&        my_private_function(int arg1, int arg2)
\&        {
\&            dTHX;       /* fetch context */
\&            ... call many Perl API functions ...
\&        }
\&
\&        [... etc ...]
\&
\&        MODULE = Foo            PACKAGE = Foo
\&
\&        /* typical XSUB */
\&
\&        void
\&        my_xsub(arg)
\&                int arg
\&            CODE:
\&                my_private_function(arg, 10);
.Ve
.PP
Note that the only two changes from the normal way of writing an
extension is the addition of a \f(CW\*(C`#define PERL_NO_GET_CONTEXT\*(C'\fR before
including the Perl headers, followed by a \f(CW\*(C`dTHX;\*(C'\fR declaration at
the start of every function that will call the Perl \s-1API.  \s0(You'll
know which functions need this, because the C compiler will complain
that there's an undeclared identifier in those functions.)  No changes
are needed for the XSUBs themselves, because the \s-1\fIXS\s0()\fR macro is
correctly defined to pass in the implicit context if needed.
.PP
The third, even more efficient way is to ape how it is done within
the Perl guts:
.PP
.Vb 4
\&        #define PERL_NO_GET_CONTEXT     /* we want efficiency */
\&        #include "EXTERN.h"
\&        #include "perl.h"
\&        #include "XSUB.h"
\&
\&        /* pTHX_ only needed for functions that call Perl API */
\&        STATIC void my_private_function(pTHX_ int arg1, int arg2);
\&
\&        STATIC void
\&        my_private_function(pTHX_ int arg1, int arg2)
\&        {
\&            /* dTHX; not needed here, because THX is an argument */
\&            ... call Perl API functions ...
\&        }
\&
\&        [... etc ...]
\&
\&        MODULE = Foo            PACKAGE = Foo
\&
\&        /* typical XSUB */
\&
\&        void
\&        my_xsub(arg)
\&                int arg
\&            CODE:
\&                my_private_function(aTHX_ arg, 10);
.Ve
.PP
This implementation never has to fetch the context using a function
call, since it is always passed as an extra argument.  Depending on
your needs for simplicity or efficiency, you may mix the previous
two approaches freely.
.PP
Never add a comma after \f(CW\*(C`pTHX\*(C'\fR yourself\*(--always use the form of the
macro with the underscore for functions that take explicit arguments,
or the form without the argument for functions with no explicit arguments.
.PP
If one is compiling Perl with the \f(CW\*(C`\-DPERL_GLOBAL_STRUCT\*(C'\fR the \f(CW\*(C`dVAR\*(C'\fR
definition is needed if the Perl global variables (see \fIperlvars.h\fR
or \fIglobvar.sym\fR) are accessed in the function and \f(CW\*(C`dTHX\*(C'\fR is not
used (the \f(CW\*(C`dTHX\*(C'\fR includes the \f(CW\*(C`dVAR\*(C'\fR if necessary).  One notices
the need for \f(CW\*(C`dVAR\*(C'\fR only with the said compile-time define, because
otherwise the Perl global variables are visible as-is.
.SS "Should I do anything special if I call perl from multiple threads?"
.IX Subsection "Should I do anything special if I call perl from multiple threads?"
If you create interpreters in one thread and then proceed to call them in
another, you need to make sure perl's own Thread Local Storage (\s-1TLS\s0) slot is
initialized correctly in each of those threads.
.PP
The \f(CW\*(C`perl_alloc\*(C'\fR and \f(CW\*(C`perl_clone\*(C'\fR \s-1API\s0 functions will automatically set
the \s-1TLS\s0 slot to the interpreter they created, so that there is no need to do
anything special if the interpreter is always accessed in the same thread that
created it, and that thread did not create or call any other interpreters
afterwards.  If that is not the case, you have to set the \s-1TLS\s0 slot of the
thread before calling any functions in the Perl \s-1API\s0 on th