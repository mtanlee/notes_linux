his,
        REFGUID rguidTypeLib,
        DWORD dwMajor,
        DWORD dwMinor,
        DWORD dwFlags);

    HRESULT (STDMETHODCALLTYPE *GetScriptDispatch)(
        IActiveScript* This,
        LPCOLESTR pstrItemName,
        IDispatch **ppdisp);

    HRESULT (STDMETHODCALLTYPE *GetCurrentScriptThreadID)(
        IActiveScript* This,
        SCRIPTTHREADID *pstidThread);

    HRESULT (STDMETHODCALLTYPE *GetScriptThreadID)(
        IActiveScript* This,
        DWORD dwWin32ThreadId,
        SCRIPTTHREADID *pstidThread);

    HRESULT (STDMETHODCALLTYPE *GetScriptThreadState)(
        IActiveScript* This,
        SCRIPTTHREADID stidThread,
        SCRIPTTHREADSTATE *pstsState);

    HRESULT (STDMETHODCALLTYPE *InterruptScriptThread)(
        IActiveScript* This,
        SCRIPTTHREADID stidThread,
        const EXCEPINFO *pexcepinfo,
        DWORD dwFlags);

    HRESULT (STDMETHODCALLTYPE *Clone)(
        IActiveScript* This,
        IActiveScript **ppscript);

    END_INTERFACE
} IActiveScriptVtbl;
interface IActiveScript {
    CONST_VTBL IActiveScriptVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScript_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScript_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScript_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScript methods ***/
#define IActiveScript_SetScriptSite(This,pass) (This)->lpVtbl->SetScriptSite(This,pass)
#define IActiveScript_GetScriptSite(This,riid,ppvObject) (This)->lpVtbl->GetScriptSite(This,riid,ppvObject)
#define IActiveScript_SetScriptState(This,ss) (This)->lpVtbl->SetScriptState(This,ss)
#define IActiveScript_GetScriptState(This,pssState) (This)->lpVtbl->GetScriptState(This,pssState)
#define IActiveScript_Close(This) (This)->lpVtbl->Close(This)
#define IActiveScript_AddNamedItem(This,pstrName,dwFlags) (This)->lpVtbl->AddNamedItem(This,pstrName,dwFlags)
#define IActiveScript_AddTypeLib(This,rguidTypeLib,dwMajor,dwMinor,dwFlags) (This)->lpVtbl->AddTypeLib(This,rguidTypeLib,dwMajor,dwMinor,dwFlags)
#define IActiveScript_GetScriptDispatch(This,pstrItemName,ppdisp) (This)->lpVtbl->GetScriptDispatch(This,pstrItemName,ppdisp)
#define IActiveScript_GetCurrentScriptThreadID(This,pstidThread) (This)->lpVtbl->GetCurrentScriptThreadID(This,pstidThread)
#define IActiveScript_GetScriptThreadID(This,dwWin32ThreadId,pstidThread) (This)->lpVtbl->GetScriptThreadID(This,dwWin32ThreadId,pstidThread)
#define IActiveScript_GetScriptThreadState(This,stidThread,pstsState) (This)->lpVtbl->GetScriptThreadState(This,stidThread,pstsState)
#define IActiveScript_InterruptScriptThread(This,stidThread,pexcepinfo,dwFlags) (This)->lpVtbl->InterruptScriptThread(This,stidThread,pexcepinfo,dwFlags)
#define IActiveScript_Clone(This,ppscript) (This)->lpVtbl->Clone(This,ppscript)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScript_QueryInterface(IActiveScript* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScript_AddRef(IActiveScript* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScript_Release(IActiveScript* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScript methods ***/
static FORCEINLINE HRESULT IActiveScript_SetScriptSite(IActiveScript* This,IActiveScriptSite *pass) {
    return This->lpVtbl->SetScriptSite(This,pass);
}
static FORCEINLINE HRESULT IActiveScript_GetScriptSite(IActiveScript* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->GetScriptSite(This,riid,ppvObject);
}
static FORCEINLINE HRESULT IActiveScript_SetScriptState(IActiveScript* This,SCRIPTSTATE ss) {
    return This->lpVtbl->SetScriptState(This,ss);
}
static FORCEINLINE HRESULT IActiveScript_GetScriptState(IActiveScript* This,SCRIPTSTATE *pssState) {
    return This->lpVtbl->GetScriptState(This,pssState);
}
static FORCEINLINE HRESULT IActiveScript_Close(IActiveScript* This) {
    return This->lpVtbl->Close(This);
}
static FORCEINLINE HRESULT IActiveScript_AddNamedItem(IActiveScript* This,LPCOLESTR pstrName,DWORD dwFlags) {
    return This->lpVtbl->AddNamedItem(This,pstrName,dwFlags);
}
static FORCEINLINE HRESULT IActiveScript_AddTypeLib(IActiveScript* This,REFGUID rguidTypeLib,DWORD dwMajor,DWORD dwMinor,DWORD dwFlags) {
    return This->lpVtbl->AddTypeLib(This,rguidTypeLib,dwMajor,dwMinor,dwFlags);
}
static FORCEINLINE HRESULT IActiveScript_GetScriptDispatch(IActiveScript* This,LPCOLESTR pstrItemName,IDispatch **ppdisp) {
    return This->lpVtbl->GetScriptDispatch(This,pstrItemName,ppdisp);
}
static FORCEINLINE HRESULT IActiveScript_GetCurrentScriptThreadID(IActiveScript* This,SCRIPTTHREADID *pstidThread) {
    return This->lpVtbl->GetCurrentScriptThreadID(This,pstidThread);
}
static FORCEINLINE HRESULT IActiveScript_GetScriptThreadID(IActiveScript* This,DWORD dwWin32ThreadId,SCRIPTTHREADID *pstidThread) {
    return This->lpVtbl->GetScriptThreadID(This,dwWin32ThreadId,pstidThread);
}
static FORCEINLINE HRESULT IActiveScript_GetScriptThreadState(IActiveScript* This,SCRIPTTHREADID stidThread,SCRIPTTHREADSTATE *pstsState) {
    return This->lpVtbl->GetScriptThreadState(This,stidThread,pstsState);
}
static FORCEINLINE HRESULT IActiveScript_InterruptScriptThread(IActiveScript* This,SCRIPTTHREADID stidThread,const EXCEPINFO *pexcepinfo,DWORD dwFlags) {
    return This->lpVtbl->InterruptScriptThread(This,stidThread,pexcepinfo,dwFlags);
}
static FORCEINLINE HRESULT IActiveScript_Clone(IActiveScript* This,IActiveScript **ppscript) {
    return This->lpVtbl->Clone(This,ppscript);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScript_SetScriptSite_Proxy(
    IActiveScript* This,
    IActiveScriptSite *pass);
void __RPC_STUB IActiveScript_SetScriptSite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_GetScriptSite_Proxy(
    IActiveScript* This,
    REFIID riid,
    void **ppvObject);
void __RPC_STUB IActiveScript_GetScriptSite_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_SetScriptState_Proxy(
    IActiveScript* This,
    SCRIPTSTATE ss);
void __RPC_STUB IActiveScript_SetScriptState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_GetScriptState_Proxy(
    IActiveScript* This,
    SCRIPTSTATE *pssState);
void __RPC_STUB IActiveScript_GetScriptState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_Close_Proxy(
    IActiveScript* This);
void __RPC_STUB IActiveScript_Close_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_AddNamedItem_Proxy(
    IActiveScript* This,
    LPCOLESTR pstrName,
    DWORD dwFlags);
void __RPC_STUB IActiveScript_AddNamedItem_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_AddTypeLib_Proxy(
    IActiveScript* This,
    REFGUID rguidTypeLib,
    DWORD dwMajor,
    DWORD dwMinor,
    DWORD dwFlags);
void __RPC_STUB IActiveScript_AddTypeLib_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_GetScriptDispatch_Proxy(
    IActiveScript* This,
    LPCOLESTR pstrItemName,
    IDispatch **ppdisp);
void __RPC_STUB IActiveScript_GetScriptDispatch_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_GetCurrentScriptThreadID_Proxy(
    IActiveScript* This,
    SCRIPTTHREADID *pstidThread);
void __RPC_STUB IActiveScript_GetCurrentScriptThreadID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_GetScriptThreadID_Proxy(
    IActiveScript* This,
    DWORD dwWin32ThreadId,
    SCRIPTTHREADID *pstidThread);
void __RPC_STUB IActiveScript_GetScriptThreadID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_GetScriptThreadState_Proxy(
    IActiveScript* This,
    SCRIPTTHREADID stidThread,
    SCRIPTTHREADSTATE *pstsState);
void __RPC_STUB IActiveScript_GetScriptThreadState_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_InterruptScriptThread_Proxy(
    IActiveScript* This,
    SCRIPTTHREADID stidThread,
    const EXCEPINFO *pexcepinfo,
    DWORD dwFlags);
void __RPC_STUB IActiveScript_InterruptScriptThread_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScript_Clone_Proxy(
    IActiveScript* This,
    IActiveScript **ppscript);
void __RPC_STUB IActiveScript_Clone_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScript_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptParse32 interface
 */
#ifndef __IActiveScriptParse32_INTERFACE_DEFINED__
#define __IActiveScriptParse32_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptParse32, 0xbb1a2ae2, 0xa4f9, 0x11cf, 0x8f,0x20, 0x00,0x80,0x5f,0x2c,0xd0,0x64);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("bb1a2ae2-a4f9-11cf-8f20-00805f2cd064")
IActiveScriptParse32 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE InitNew(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddScriptlet(
        LPCOLESTR pstrDefaultName,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrItemName,
        LPCOLESTR pstrSubItemName,
        LPCOLESTR pstrEventName,
        LPCOLESTR pstrDelimiter,
        DWORD dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        BSTR *pbstrName,
        EXCEPINFO *pexcepinfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE ParseScriptText(
        LPCOLESTR pstrCode,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORD dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        VARIANT *pvarResult,
        EXCEPINFO *pexcepinfo) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptParse32, 0xbb1a2ae2, 0xa4f9, 0x11cf, 0x8f,0x20, 0x00,0x80,0x5f,0x2c,0xd0,0x64)
#endif
#else
typedef struct IActiveScriptParse32Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptParse32* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptParse32* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptParse32* This);

    /*** IActiveScriptParse32 methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        IActiveScriptParse32* This);

    HRESULT (STDMETHODCALLTYPE *AddScriptlet)(
        IActiveScriptParse32* This,
        LPCOLESTR pstrDefaultName,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrItemName,
        LPCOLESTR pstrSubItemName,
        LPCOLESTR pstrEventName,
        LPCOLESTR pstrDelimiter,
        DWORD dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        BSTR *pbstrName,
        EXCEPINFO *pexcepinfo);

    HRESULT (STDMETHODCALLTYPE *ParseScriptText)(
        IActiveScriptParse32* This,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORD dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        VARIANT *pvarResult,
        EXCEPINFO *pexcepinfo);

    END_INTERFACE
} IActiveScriptParse32Vtbl;
interface IActiveScriptParse32 {
    CONST_VTBL IActiveScriptParse32Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptParse32_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptParse32_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptParse32_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptParse32 methods ***/
#define IActiveScriptParse32_InitNew(This) (This)->lpVtbl->InitNew(This)
#define IActiveScriptParse32_AddScriptlet(This,pstrDefaultName,pstrCode,pstrItemName,pstrSubItemName,pstrEventName,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pbstrName,pexcepinfo) (This)->lpVtbl->AddScriptlet(This,pstrDefaultName,pstrCode,pstrItemName,pstrSubItemName,pstrEventName,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pbstrName,pexcepinfo)
#define IActiveScriptParse32_ParseScriptText(This,pstrCode,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pvarResult,pexcepinfo) (This)->lpVtbl->ParseScriptText(This,pstrCode,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pvarResult,pexcepinfo)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptParse32_QueryInterface(IActiveScriptParse32* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptParse32_AddRef(IActiveScriptParse32* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptParse32_Release(IActiveScriptParse32* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptParse32 methods ***/
static FORCEINLINE HRESULT IActiveScriptParse32_InitNew(IActiveScriptParse32* This) {
    return This->lpVtbl->InitNew(This);
}
static FORCEINLINE HRESULT IActiveScriptParse32_AddScriptlet(IActiveScriptParse32* This,LPCOLESTR pstrDefaultName,LPCOLESTR pstrCode,LPCOLESTR pstrItemName,LPCOLESTR pstrSubItemName,LPCOLESTR pstrEventName,LPCOLESTR pstrDelimiter,DWORD dwSourceContextCookie,ULONG ulStartingLineNumber,DWORD dwFlags,BSTR *pbstrName,EXCEPINFO *pexcepinfo) {
    return This->lpVtbl->AddScriptlet(This,pstrDefaultName,pstrCode,pstrItemName,pstrSubItemName,pstrEventName,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pbstrName,pexcepinfo);
}
static FORCEINLINE HRESULT IActiveScriptParse32_ParseScriptText(IActiveScriptParse32* This,LPCOLESTR pstrCode,LPCOLESTR pstrItemName,IUnknown *punkContext,LPCOLESTR pstrDelimiter,DWORD dwSourceContextCookie,ULONG ulStartingLineNumber,DWORD dwFlags,VARIANT *pvarResult,EXCEPINFO *pexcepinfo) {
    return This->lpVtbl->ParseScriptText(This,pstrCode,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pvarResult,pexcepinfo);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptParse32_InitNew_Proxy(
    IActiveScriptParse32* This);
void __RPC_STUB IActiveScriptParse32_InitNew_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScriptParse32_AddScriptlet_Proxy(
    IActiveScriptParse32* This,
    LPCOLESTR pstrDefaultName,
    LPCOLESTR pstrCode,
    LPCOLESTR pstrItemName,
    LPCOLESTR pstrSubItemName,
    LPCOLESTR pstrEventName,
    LPCOLESTR pstrDelimiter,
    DWORD dwSourceContextCookie,
    ULONG ulStartingLineNumber,
    DWORD dwFlags,
    BSTR *pbstrName,
    EXCEPINFO *pexcepinfo);
void __RPC_STUB IActiveScriptParse32_AddScriptlet_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScriptParse32_ParseScriptText_Proxy(
    IActiveScriptParse32* This,
    LPCOLESTR pstrCode,
    LPCOLESTR pstrItemName,
    IUnknown *punkContext,
    LPCOLESTR pstrDelimiter,
    DWORD dwSourceContextCookie,
    ULONG ulStartingLineNumber,
    DWORD dwFlags,
    VARIANT *pvarResult,
    EXCEPINFO *pexcepinfo);
void __RPC_STUB IActiveScriptParse32_ParseScriptText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptParse32_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptParse64 interface
 */
#ifndef __IActiveScriptParse64_INTERFACE_DEFINED__
#define __IActiveScriptParse64_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptParse64, 0xc7ef7658, 0xe1ee, 0x480e, 0x97,0xea, 0xd5,0x2c,0xb4,0xd7,0x6d,0x17);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c7ef7658-e1ee-480e-97ea-d52cb4d76d17")
IActiveScriptParse64 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE InitNew(
        ) = 0;

    virtual HRESULT STDMETHODCALLTYPE AddScriptlet(
        LPCOLESTR pstrDefaultName,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrItemName,
        LPCOLESTR pstrSubItemName,
        LPCOLESTR pstrEventName,
        LPCOLESTR pstrDelimiter,
        DWORDLONG dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        BSTR *pbstrName,
        EXCEPINFO *pexcepinfo) = 0;

    virtual HRESULT STDMETHODCALLTYPE ParseScriptText(
        LPCOLESTR pstrCode,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORDLONG dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        VARIANT *pvarResult,
        EXCEPINFO *pexcepinfo) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptParse64, 0xc7ef7658, 0xe1ee, 0x480e, 0x97,0xea, 0xd5,0x2c,0xb4,0xd7,0x6d,0x17)
#endif
#else
typedef struct IActiveScriptParse64Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptParse64* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptParse64* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptParse64* This);

    /*** IActiveScriptParse64 methods ***/
    HRESULT (STDMETHODCALLTYPE *InitNew)(
        IActiveScriptParse64* This);

    HRESULT (STDMETHODCALLTYPE *AddScriptlet)(
        IActiveScriptParse64* This,
        LPCOLESTR pstrDefaultName,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrItemName,
        LPCOLESTR pstrSubItemName,
        LPCOLESTR pstrEventName,
        LPCOLESTR pstrDelimiter,
        DWORDLONG dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        BSTR *pbstrName,
        EXCEPINFO *pexcepinfo);

    HRESULT (STDMETHODCALLTYPE *ParseScriptText)(
        IActiveScriptParse64* This,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORDLONG dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        VARIANT *pvarResult,
        EXCEPINFO *pexcepinfo);

    END_INTERFACE
} IActiveScriptParse64Vtbl;
interface IActiveScriptParse64 {
    CONST_VTBL IActiveScriptParse64Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptParse64_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptParse64_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptParse64_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptParse64 methods ***/
#define IActiveScriptParse64_InitNew(This) (This)->lpVtbl->InitNew(This)
#define IActiveScriptParse64_AddScriptlet(This,pstrDefaultName,pstrCode,pstrItemName,pstrSubItemName,pstrEventName,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pbstrName,pexcepinfo) (This)->lpVtbl->AddScriptlet(This,pstrDefaultName,pstrCode,pstrItemName,pstrSubItemName,pstrEventName,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pbstrName,pexcepinfo)
#define IActiveScriptParse64_ParseScriptText(This,pstrCode,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pvarResult,pexcepinfo) (This)->lpVtbl->ParseScriptText(This,pstrCode,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pvarResult,pexcepinfo)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptParse64_QueryInterface(IActiveScriptParse64* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptParse64_AddRef(IActiveScriptParse64* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptParse64_Release(IActiveScriptParse64* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptParse64 methods ***/
static FORCEINLINE HRESULT IActiveScriptParse64_InitNew(IActiveScriptParse64* This) {
    return This->lpVtbl->InitNew(This);
}
static FORCEINLINE HRESULT IActiveScriptParse64_AddScriptlet(IActiveScriptParse64* This,LPCOLESTR pstrDefaultName,LPCOLESTR pstrCode,LPCOLESTR pstrItemName,LPCOLESTR pstrSubItemName,LPCOLESTR pstrEventName,LPCOLESTR pstrDelimiter,DWORDLONG dwSourceContextCookie,ULONG ulStartingLineNumber,DWORD dwFlags,BSTR *pbstrName,EXCEPINFO *pexcepinfo) {
    return This->lpVtbl->AddScriptlet(This,pstrDefaultName,pstrCode,pstrItemName,pstrSubItemName,pstrEventName,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pbstrName,pexcepinfo);
}
static FORCEINLINE HRESULT IActiveScriptParse64_ParseScriptText(IActiveScriptParse64* This,LPCOLESTR pstrCode,LPCOLESTR pstrItemName,IUnknown *punkContext,LPCOLESTR pstrDelimiter,DWORDLONG dwSourceContextCookie,ULONG ulStartingLineNumber,DWORD dwFlags,VARIANT *pvarResult,EXCEPINFO *pexcepinfo) {
    return This->lpVtbl->ParseScriptText(This,pstrCode,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,pvarResult,pexcepinfo);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptParse64_InitNew_Proxy(
    IActiveScriptParse64* This);
void __RPC_STUB IActiveScriptParse64_InitNew_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScriptParse64_AddScriptlet_Proxy(
    IActiveScriptParse64* This,
    LPCOLESTR pstrDefaultName,
    LPCOLESTR pstrCode,
    LPCOLESTR pstrItemName,
    LPCOLESTR pstrSubItemName,
    LPCOLESTR pstrEventName,
    LPCOLESTR pstrDelimiter,
    DWORDLONG dwSourceContextCookie,
    ULONG ulStartingLineNumber,
    DWORD dwFlags,
    BSTR *pbstrName,
    EXCEPINFO *pexcepinfo);
void __RPC_STUB IActiveScriptParse64_AddScriptlet_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScriptParse64_ParseScriptText_Proxy(
    IActiveScriptParse64* This,
    LPCOLESTR pstrCode,
    LPCOLESTR pstrItemName,
    IUnknown *punkContext,
    LPCOLESTR pstrDelimiter,
    DWORDLONG dwSourceContextCookie,
    ULONG ulStartingLineNumber,
    DWORD dwFlags,
    VARIANT *pvarResult,
    EXCEPINFO *pexcepinfo);
void __RPC_STUB IActiveScriptParse64_ParseScriptText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptParse64_INTERFACE_DEFINED__ */


#ifdef _WIN64
#define IActiveScriptParse IActiveScriptParse64
#define IID_IActiveScriptParse IID_IActiveScriptParse64
#else
#define IActiveScriptParse     IActiveScriptParse32
#define IID_IActiveScriptParse IID_IActiveScriptParse32
#endif

typedef IActiveScriptParse *PIActiveScriptParse;

/*****************************************************************************
 * IActiveScriptParseProcedureOld32 interface
 */
#ifndef __IActiveScriptParseProcedureOld32_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedureOld32_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptParseProcedureOld32, 0x1cff0050, 0x6fdd, 0x11d0, 0x93,0x28, 0x00,0xa0,0xc9,0x0d,0xca,0xa9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1cff0050-6fdd-11d0-9328-00a0c90dcaa9")
IActiveScriptParseProcedureOld32 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE ParseProcedureText(
        LPCOLESTR pstrCode,
        LPCOLESTR pstrFormalParams,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORD dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        IDispatch **ppdisp) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptParseProcedureOld32, 0x1cff0050, 0x6fdd, 0x11d0, 0x93,0x28, 0x00,0xa0,0xc9,0x0d,0xca,0xa9)
#endif
#else
typedef struct IActiveScriptParseProcedureOld32Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptParseProcedureOld32* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptParseProcedureOld32* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptParseProcedureOld32* This);

    /*** IActiveScriptParseProcedureOld32 methods ***/
    HRESULT (STDMETHODCALLTYPE *ParseProcedureText)(
        IActiveScriptParseProcedureOld32* This,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrFormalParams,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORD dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        IDispatch **ppdisp);

    END_INTERFACE
} IActiveScriptParseProcedureOld32Vtbl;
interface IActiveScriptParseProcedureOld32 {
    CONST_VTBL IActiveScriptParseProcedureOld32Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptParseProcedureOld32_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptParseProcedureOld32_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptParseProcedureOld32_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptParseProcedureOld32 methods ***/
#define IActiveScriptParseProcedureOld32_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp) (This)->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedureOld32_QueryInterface(IActiveScriptParseProcedureOld32* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptParseProcedureOld32_AddRef(IActiveScriptParseProcedureOld32* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptParseProcedureOld32_Release(IActiveScriptParseProcedureOld32* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptParseProcedureOld32 methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedureOld32_ParseProcedureText(IActiveScriptParseProcedureOld32* This,LPCOLESTR pstrCode,LPCOLESTR pstrFormalParams,LPCOLESTR pstrItemName,IUnknown *punkContext,LPCOLESTR pstrDelimiter,DWORD dwSourceContextCookie,ULONG ulStartingLineNumber,DWORD dwFlags,IDispatch **ppdisp) {
    return This->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptParseProcedureOld32_ParseProcedureText_Proxy(
    IActiveScriptParseProcedureOld32* This,
    LPCOLESTR pstrCode,
    LPCOLESTR pstrFormalParams,
    LPCOLESTR pstrItemName,
    IUnknown *punkContext,
    LPCOLESTR pstrDelimiter,
    DWORD dwSourceContextCookie,
    ULONG ulStartingLineNumber,
    DWORD dwFlags,
    IDispatch **ppdisp);
void __RPC_STUB IActiveScriptParseProcedureOld32_ParseProcedureText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptParseProcedureOld32_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptParseProcedureOld64 interface
 */
#ifndef __IActiveScriptParseProcedureOld64_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedureOld64_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptParseProcedureOld64, 0x21f57128, 0x08c9, 0x4638, 0xba,0x12, 0x22,0xd1,0x5d,0x88,0xdc,0x5c);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("21f57128-08c9-4638-ba12-22d15d88dc5c")
IActiveScriptParseProcedureOld64 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE ParseProcedureText(
        LPCOLESTR pstrCode,
        LPCOLESTR pstrFormalParams,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORDLONG dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        IDispatch **ppdisp) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptParseProcedureOld64, 0x21f57128, 0x08c9, 0x4638, 0xba,0x12, 0x22,0xd1,0x5d,0x88,0xdc,0x5c)
#endif
#else
typedef struct IActiveScriptParseProcedureOld64Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptParseProcedureOld64* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptParseProcedureOld64* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptParseProcedureOld64* This);

    /*** IActiveScriptParseProcedureOld64 methods ***/
    HRESULT (STDMETHODCALLTYPE *ParseProcedureText)(
        IActiveScriptParseProcedureOld64* This,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrFormalParams,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORDLONG dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        IDispatch **ppdisp);

    END_INTERFACE
} IActiveScriptParseProcedureOld64Vtbl;
interface IActiveScriptParseProcedureOld64 {
    CONST_VTBL IActiveScriptParseProcedureOld64Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptParseProcedureOld64_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptParseProcedureOld64_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptParseProcedureOld64_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptParseProcedureOld64 methods ***/
#define IActiveScriptParseProcedureOld64_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp) (This)->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedureOld64_QueryInterface(IActiveScriptParseProcedureOld64* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptParseProcedureOld64_AddRef(IActiveScriptParseProcedureOld64* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptParseProcedureOld64_Release(IActiveScriptParseProcedureOld64* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptParseProcedureOld64 methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedureOld64_ParseProcedureText(IActiveScriptParseProcedureOld64* This,LPCOLESTR pstrCode,LPCOLESTR pstrFormalParams,LPCOLESTR pstrItemName,IUnknown *punkContext,LPCOLESTR pstrDelimiter,DWORDLONG dwSourceContextCookie,ULONG ulStartingLineNumber,DWORD dwFlags,IDispatch **ppdisp) {
    return This->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptParseProcedureOld64_ParseProcedureText_Proxy(
    IActiveScriptParseProcedureOld64* This,
    LPCOLESTR pstrCode,
    LPCOLESTR pstrFormalParams,
    LPCOLESTR pstrItemName,
    IUnknown *punkContext,
    LPCOLESTR pstrDelimiter,
    DWORDLONG dwSourceContextCookie,
    ULONG ulStartingLineNumber,
    DWORD dwFlags,
    IDispatch **ppdisp);
void __RPC_STUB IActiveScriptParseProcedureOld64_ParseProcedureText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptParseProcedureOld64_INTERFACE_DEFINED__ */


#ifdef _WIN64
#define IActiveScriptParseProcedureOld IActiveScriptParseProcedureOld64
#define IID_IActiveScriptParseProcedureOld IID_IActiveScriptParseProcedureOld64
#else
#define     IActiveScriptParseProcedureOld IActiveScriptParseProcedureOld32
#define IID_IActiveScriptParseProcedureOld IID_IActiveScriptParseProcedureOld32
#endif

typedef IActiveScriptParseProcedureOld *PIActiveScriptParseProcedureOld;

/*****************************************************************************
 * IActiveScriptParseProcedure32 interface
 */
#ifndef __IActiveScriptParseProcedure32_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedure32_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptParseProcedure32, 0xaa5b6a80, 0xb834, 0x11d0, 0x93,0x2f, 0x00,0xa0,0xc9,0x0d,0xca,0xa9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("aa5b6a80-b834-11d0-932f-00a0c90dcaa9")
IActiveScriptParseProcedure32 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE ParseProcedureText(
        LPCOLESTR pstrCode,
        LPCOLESTR pstrFormalParams,
        LPCOLESTR pstrProcedureName,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORD dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        IDispatch **ppdisp) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptParseProcedure32, 0xaa5b6a80, 0xb834, 0x11d0, 0x93,0x2f, 0x00,0xa0,0xc9,0x0d,0xca,0xa9)
#endif
#else
typedef struct IActiveScriptParseProcedure32Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptParseProcedure32* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptParseProcedure32* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptParseProcedure32* This);

    /*** IActiveScriptParseProcedure32 methods ***/
    HRESULT (STDMETHODCALLTYPE *ParseProcedureText)(
        IActiveScriptParseProcedure32* This,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrFormalParams,
        LPCOLESTR pstrProcedureName,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORD dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        IDispatch **ppdisp);

    END_INTERFACE
} IActiveScriptParseProcedure32Vtbl;
interface IActiveScriptParseProcedure32 {
    CONST_VTBL IActiveScriptParseProcedure32Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptParseProcedure32_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptParseProcedure32_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptParseProcedure32_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptParseProcedure32 methods ***/
#define IActiveScriptParseProcedure32_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp) (This)->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedure32_QueryInterface(IActiveScriptParseProcedure32* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptParseProcedure32_AddRef(IActiveScriptParseProcedure32* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptParseProcedure32_Release(IActiveScriptParseProcedure32* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptParseProcedure32 methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedure32_ParseProcedureText(IActiveScriptParseProcedure32* This,LPCOLESTR pstrCode,LPCOLESTR pstrFormalParams,LPCOLESTR pstrProcedureName,LPCOLESTR pstrItemName,IUnknown *punkContext,LPCOLESTR pstrDelimiter,DWORD dwSourceContextCookie,ULONG ulStartingLineNumber,DWORD dwFlags,IDispatch **ppdisp) {
    return This->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptParseProcedure32_ParseProcedureText_Proxy(
    IActiveScriptParseProcedure32* This,
    LPCOLESTR pstrCode,
    LPCOLESTR pstrFormalParams,
    LPCOLESTR pstrProcedureName,
    LPCOLESTR pstrItemName,
    IUnknown *punkContext,
    LPCOLESTR pstrDelimiter,
    DWORD dwSourceContextCookie,
    ULONG ulStartingLineNumber,
    DWORD dwFlags,
    IDispatch **ppdisp);
void __RPC_STUB IActiveScriptParseProcedure32_ParseProcedureText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptParseProcedure32_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptParseProcedure64 interface
 */
#ifndef __IActiveScriptParseProcedure64_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedure64_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptParseProcedure64, 0xc64713b6, 0xe029, 0x4cc5, 0x92,0x00, 0x43,0x8b,0x72,0x89,0x0b,0x6a);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c64713b6-e029-4cc5-9200-438b72890b6a")
IActiveScriptParseProcedure64 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE ParseProcedureText(
        LPCOLESTR pstrCode,
        LPCOLESTR pstrFormalParams,
        LPCOLESTR pstrProcedureName,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORDLONG dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        IDispatch **ppdisp) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptParseProcedure64, 0xc64713b6, 0xe029, 0x4cc5, 0x92,0x00, 0x43,0x8b,0x72,0x89,0x0b,0x6a)
#endif
#else
typedef struct IActiveScriptParseProcedure64Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptParseProcedure64* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptParseProcedure64* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptParseProcedure64* This);

    /*** IActiveScriptParseProcedure64 methods ***/
    HRESULT (STDMETHODCALLTYPE *ParseProcedureText)(
        IActiveScriptParseProcedure64* This,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrFormalParams,
        LPCOLESTR pstrProcedureName,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORDLONG dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        IDispatch **ppdisp);

    END_INTERFACE
} IActiveScriptParseProcedure64Vtbl;
interface IActiveScriptParseProcedure64 {
    CONST_VTBL IActiveScriptParseProcedure64Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptParseProcedure64_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptParseProcedure64_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptParseProcedure64_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptParseProcedure64 methods ***/
#define IActiveScriptParseProcedure64_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp) (This)->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedure64_QueryInterface(IActiveScriptParseProcedure64* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptParseProcedure64_AddRef(IActiveScriptParseProcedure64* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptParseProcedure64_Release(IActiveScriptParseProcedure64* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptParseProcedure64 methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedure64_ParseProcedureText(IActiveScriptParseProcedure64* This,LPCOLESTR pstrCode,LPCOLESTR pstrFormalParams,LPCOLESTR pstrProcedureName,LPCOLESTR pstrItemName,IUnknown *punkContext,LPCOLESTR pstrDelimiter,DWORDLONG dwSourceContextCookie,ULONG ulStartingLineNumber,DWORD dwFlags,IDispatch **ppdisp) {
    return This->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptParseProcedure64_ParseProcedureText_Proxy(
    IActiveScriptParseProcedure64* This,
    LPCOLESTR pstrCode,
    LPCOLESTR pstrFormalParams,
    LPCOLESTR pstrProcedureName,
    LPCOLESTR pstrItemName,
    IUnknown *punkContext,
    LPCOLESTR pstrDelimiter,
    DWORDLONG dwSourceContextCookie,
    ULONG ulStartingLineNumber,
    DWORD dwFlags,
    IDispatch **ppdisp);
void __RPC_STUB IActiveScriptParseProcedure64_ParseProcedureText_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptParseProcedure64_INTERFACE_DEFINED__ */


#ifdef _WIN64
#define IActiveScriptParseProcedure IActiveScriptParseProcedure64
#define IID_IActiveScriptParseProcedure IID_IActiveScriptParseProcedure64
#else
#define IActiveScriptParseProcedure IActiveScriptParseProcedure32
#define IID_IActiveScriptParseProcedure IID_IActiveScriptParseProcedure32
#endif

typedef IActiveScriptParseProcedure *PIActiveScriptParseProcedure;

/*****************************************************************************
 * IActiveScriptParseProcedure2_32 interface
 */
#ifndef __IActiveScriptParseProcedure2_32_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedure2_32_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptParseProcedure2_32, 0x71ee5b20, 0xfb04, 0x11d1, 0xb3,0xa8, 0x00,0xa0,0xc9,0x11,0xe8,0xb2);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("71ee5b20-fb04-11d1-b3a8-00a0c911e8b2")
IActiveScriptParseProcedure2_32 : public IActiveScriptParseProcedure32
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptParseProcedure2_32, 0x71ee5b20, 0xfb04, 0x11d1, 0xb3,0xa8, 0x00,0xa0,0xc9,0x11,0xe8,0xb2)
#endif
#else
typedef struct IActiveScriptParseProcedure2_32Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptParseProcedure2_32* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptParseProcedure2_32* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptParseProcedure2_32* This);

    /*** IActiveScriptParseProcedure32 methods ***/
    HRESULT (STDMETHODCALLTYPE *ParseProcedureText)(
        IActiveScriptParseProcedure2_32* This,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrFormalParams,
        LPCOLESTR pstrProcedureName,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORD dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        IDispatch **ppdisp);

    END_INTERFACE
} IActiveScriptParseProcedure2_32Vtbl;
interface IActiveScriptParseProcedure2_32 {
    CONST_VTBL IActiveScriptParseProcedure2_32Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptParseProcedure2_32_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptParseProcedure2_32_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptParseProcedure2_32_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptParseProcedure32 methods ***/
#define IActiveScriptParseProcedure2_32_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp) (This)->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedure2_32_QueryInterface(IActiveScriptParseProcedure2_32* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptParseProcedure2_32_AddRef(IActiveScriptParseProcedure2_32* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptParseProcedure2_32_Release(IActiveScriptParseProcedure2_32* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptParseProcedure32 methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedure2_32_ParseProcedureText(IActiveScriptParseProcedure2_32* This,LPCOLESTR pstrCode,LPCOLESTR pstrFormalParams,LPCOLESTR pstrProcedureName,LPCOLESTR pstrItemName,IUnknown *punkContext,LPCOLESTR pstrDelimiter,DWORD dwSourceContextCookie,ULONG ulStartingLineNumber,DWORD dwFlags,IDispatch **ppdisp) {
    return This->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp);
}
#endif
#endif

#endif


#endif  /* __IActiveScriptParseProcedure2_32_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptParseProcedure2_64 interface
 */
#ifndef __IActiveScriptParseProcedure2_64_INTERFACE_DEFINED__
#define __IActiveScriptParseProcedure2_64_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptParseProcedure2_64, 0xfe7c4271, 0x210c, 0x448d, 0x9f,0x54, 0x76,0xda,0xb7,0x04,0x7b,0x28);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fe7c4271-210c-448d-9f54-76dab7047b28")
IActiveScriptParseProcedure2_64 : public IActiveScriptParseProcedure64
{
};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptParseProcedure2_64, 0xfe7c4271, 0x210c, 0x448d, 0x9f,0x54, 0x76,0xda,0xb7,0x04,0x7b,0x28)
#endif
#else
typedef struct IActiveScriptParseProcedure2_64Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptParseProcedure2_64* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptParseProcedure2_64* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptParseProcedure2_64* This);

    /*** IActiveScriptParseProcedure64 methods ***/
    HRESULT (STDMETHODCALLTYPE *ParseProcedureText)(
        IActiveScriptParseProcedure2_64* This,
        LPCOLESTR pstrCode,
        LPCOLESTR pstrFormalParams,
        LPCOLESTR pstrProcedureName,
        LPCOLESTR pstrItemName,
        IUnknown *punkContext,
        LPCOLESTR pstrDelimiter,
        DWORDLONG dwSourceContextCookie,
        ULONG ulStartingLineNumber,
        DWORD dwFlags,
        IDispatch **ppdisp);

    END_INTERFACE
} IActiveScriptParseProcedure2_64Vtbl;
interface IActiveScriptParseProcedure2_64 {
    CONST_VTBL IActiveScriptParseProcedure2_64Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptParseProcedure2_64_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptParseProcedure2_64_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptParseProcedure2_64_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptParseProcedure64 methods ***/
#define IActiveScriptParseProcedure2_64_ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp) (This)->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedure2_64_QueryInterface(IActiveScriptParseProcedure2_64* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptParseProcedure2_64_AddRef(IActiveScriptParseProcedure2_64* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptParseProcedure2_64_Release(IActiveScriptParseProcedure2_64* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptParseProcedure64 methods ***/
static FORCEINLINE HRESULT IActiveScriptParseProcedure2_64_ParseProcedureText(IActiveScriptParseProcedure2_64* This,LPCOLESTR pstrCode,LPCOLESTR pstrFormalParams,LPCOLESTR pstrProcedureName,LPCOLESTR pstrItemName,IUnknown *punkContext,LPCOLESTR pstrDelimiter,DWORDLONG dwSourceContextCookie,ULONG ulStartingLineNumber,DWORD dwFlags,IDispatch **ppdisp) {
    return This->lpVtbl->ParseProcedureText(This,pstrCode,pstrFormalParams,pstrProcedureName,pstrItemName,punkContext,pstrDelimiter,dwSourceContextCookie,ulStartingLineNumber,dwFlags,ppdisp);
}
#endif
#endif

#endif


#endif  /* __IActiveScriptParseProcedure2_64_INTERFACE_DEFINED__ */


#ifdef _WIN64
#define IActiveScriptParseProcedure2 IActiveScriptParseProcedure2_64
#define IID_IActiveScriptParseProcedure2 IID_IActiveScriptParseProcedure2_64
#else
#define IActiveScriptParseProcedure2 IActiveScriptParseProcedure2_32
#define IID_IActiveScriptParseProcedure2 IID_IActiveScriptParseProcedure2_32
#endif

typedef IActiveScriptParseProcedure2 *PIActiveScriptParseProcedure2;

/*****************************************************************************
 * IActiveScriptEncode interface
 */
#ifndef __IActiveScriptEncode_INTERFACE_DEFINED__
#define __IActiveScriptEncode_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptEncode, 0xbb1a2ae3, 0xa4f9, 0x11cf, 0x8f,0x20, 0x00,0x80,0x5f,0x2c,0xd0,0x64);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("bb1a2ae3-a4f9-11cf-8f20-00805f2cd064")
IActiveScriptEncode : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE EncodeSection(
        LPCOLESTR pchIn,
        DWORD cchIn,
        LPOLESTR pchOut,
        DWORD cchOut,
        DWORD *pcchRet) = 0;

    virtual HRESULT STDMETHODCALLTYPE DecodeScript(
        LPCOLESTR pchIn,
        DWORD cchIn,
        LPOLESTR pchOut,
        DWORD cchOut,
        DWORD *pcchRet) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetEncodeProgId(
        BSTR *pbstrOut) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptEncode, 0xbb1a2ae3, 0xa4f9, 0x11cf, 0x8f,0x20, 0x00,0x80,0x5f,0x2c,0xd0,0x64)
#endif
#else
typedef struct IActiveScriptEncodeVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptEncode* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptEncode* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptEncode* This);

    /*** IActiveScriptEncode methods ***/
    HRESULT (STDMETHODCALLTYPE *EncodeSection)(
        IActiveScriptEncode* This,
        LPCOLESTR pchIn,
        DWORD cchIn,
        LPOLESTR pchOut,
        DWORD cchOut,
        DWORD *pcchRet);

    HRESULT (STDMETHODCALLTYPE *DecodeScript)(
        IActiveScriptEncode* This,
        LPCOLESTR pchIn,
        DWORD cchIn,
        LPOLESTR pchOut,
        DWORD cchOut,
        DWORD *pcchRet);

    HRESULT (STDMETHODCALLTYPE *GetEncodeProgId)(
        IActiveScriptEncode* This,
        BSTR *pbstrOut);

    END_INTERFACE
} IActiveScriptEncodeVtbl;
interface IActiveScriptEncode {
    CONST_VTBL IActiveScriptEncodeVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptEncode_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptEncode_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptEncode_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptEncode methods ***/
#define IActiveScriptEncode_EncodeSection(This,pchIn,cchIn,pchOut,cchOut,pcchRet) (This)->lpVtbl->EncodeSection(This,pchIn,cchIn,pchOut,cchOut,pcchRet)
#define IActiveScriptEncode_DecodeScript(This,pchIn,cchIn,pchOut,cchOut,pcchRet) (This)->lpVtbl->DecodeScript(This,pchIn,cchIn,pchOut,cchOut,pcchRet)
#define IActiveScriptEncode_GetEncodeProgId(This,pbstrOut) (This)->lpVtbl->GetEncodeProgId(This,pbstrOut)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptEncode_QueryInterface(IActiveScriptEncode* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptEncode_AddRef(IActiveScriptEncode* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptEncode_Release(IActiveScriptEncode* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptEncode methods ***/
static FORCEINLINE HRESULT IActiveScriptEncode_EncodeSection(IActiveScriptEncode* This,LPCOLESTR pchIn,DWORD cchIn,LPOLESTR pchOut,DWORD cchOut,DWORD *pcchRet) {
    return This->lpVtbl->EncodeSection(This,pchIn,cchIn,pchOut,cchOut,pcchRet);
}
static FORCEINLINE HRESULT IActiveScriptEncode_DecodeScript(IActiveScriptEncode* This,LPCOLESTR pchIn,DWORD cchIn,LPOLESTR pchOut,DWORD cchOut,DWORD *pcchRet) {
    return This->lpVtbl->DecodeScript(This,pchIn,cchIn,pchOut,cchOut,pcchRet);
}
static FORCEINLINE HRESULT IActiveScriptEncode_GetEncodeProgId(IActiveScriptEncode* This,BSTR *pbstrOut) {
    return This->lpVtbl->GetEncodeProgId(This,pbstrOut);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptEncode_EncodeSection_Proxy(
    IActiveScriptEncode* This,
    LPCOLESTR pchIn,
    DWORD cchIn,
    LPOLESTR pchOut,
    DWORD cchOut,
    DWORD *pcchRet);
void __RPC_STUB IActiveScriptEncode_EncodeSection_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScriptEncode_DecodeScript_Proxy(
    IActiveScriptEncode* This,
    LPCOLESTR pchIn,
    DWORD cchIn,
    LPOLESTR pchOut,
    DWORD cchOut,
    DWORD *pcchRet);
void __RPC_STUB IActiveScriptEncode_DecodeScript_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScriptEncode_GetEncodeProgId_Proxy(
    IActiveScriptEncode* This,
    BSTR *pbstrOut);
void __RPC_STUB IActiveScriptEncode_GetEncodeProgId_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptEncode_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptHostEncode interface
 */
#ifndef __IActiveScriptHostEncode_INTERFACE_DEFINED__
#define __IActiveScriptHostEncode_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptHostEncode, 0xbee9b76e, 0xcfe3, 0x11d1, 0xb7,0x47, 0x00,0xc0,0x4f,0xc2,0xb0,0x85);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("bee9b76e-cfe3-11d1-b747-00c04fc2b085")
IActiveScriptHostEncode : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE EncodeScriptHostFile(
        BSTR bstrInFile,
        BSTR *pbstrOutFile,
        ULONG cFlags,
        BSTR bstrDefaultLang) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptHostEncode, 0xbee9b76e, 0xcfe3, 0x11d1, 0xb7,0x47, 0x00,0xc0,0x4f,0xc2,0xb0,0x85)
#endif
#else
typedef struct IActiveScriptHostEncodeVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptHostEncode* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptHostEncode* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptHostEncode* This);

    /*** IActiveScriptHostEncode methods ***/
    HRESULT (STDMETHODCALLTYPE *EncodeScriptHostFile)(
        IActiveScriptHostEncode* This,
        BSTR bstrInFile,
        BSTR *pbstrOutFile,
        ULONG cFlags,
        BSTR bstrDefaultLang);

    END_INTERFACE
} IActiveScriptHostEncodeVtbl;
interface IActiveScriptHostEncode {
    CONST_VTBL IActiveScriptHostEncodeVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptHostEncode_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptHostEncode_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptHostEncode_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptHostEncode methods ***/
#define IActiveScriptHostEncode_EncodeScriptHostFile(This,bstrInFile,pbstrOutFile,cFlags,bstrDefaultLang) (This)->lpVtbl->EncodeScriptHostFile(This,bstrInFile,pbstrOutFile,cFlags,bstrDefaultLang)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptHostEncode_QueryInterface(IActiveScriptHostEncode* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptHostEncode_AddRef(IActiveScriptHostEncode* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptHostEncode_Release(IActiveScriptHostEncode* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptHostEncode methods ***/
static FORCEINLINE HRESULT IActiveScriptHostEncode_EncodeScriptHostFile(IActiveScriptHostEncode* This,BSTR bstrInFile,BSTR *pbstrOutFile,ULONG cFlags,BSTR bstrDefaultLang) {
    return This->lpVtbl->EncodeScriptHostFile(This,bstrInFile,pbstrOutFile,cFlags,bstrDefaultLang);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptHostEncode_EncodeScriptHostFile_Proxy(
    IActiveScriptHostEncode* This,
    BSTR bstrInFile,
    BSTR *pbstrOutFile,
    ULONG cFlags,
    BSTR bstrDefaultLang);
void __RPC_STUB IActiveScriptHostEncode_EncodeScriptHostFile_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptHostEncode_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IBindEventHandler interface
 */
#ifndef __IBindEventHandler_INTERFACE_DEFINED__
#define __IBindEventHandler_INTERFACE_DEFINED__

DEFINE_GUID(IID_IBindEventHandler, 0x63cdbcb0, 0xc1b1, 0x11d0, 0x93,0x36, 0x00,0xa0,0xc9,0x0d,0xca,0xa9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("63cdbcb0-c1b1-11d0-9336-00a0c90dcaa9")
IBindEventHandler : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE BindHandler(
        LPCOLESTR pstrEvent,
        IDispatch *pdisp) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IBindEventHandler, 0x63cdbcb0, 0xc1b1, 0x11d0, 0x93,0x36, 0x00,0xa0,0xc9,0x0d,0xca,0xa9)
#endif
#else
typedef struct IBindEventHandlerVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IBindEventHandler* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IBindEventHandler* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IBindEventHandler* This);

    /*** IBindEventHandler methods ***/
    HRESULT (STDMETHODCALLTYPE *BindHandler)(
        IBindEventHandler* This,
        LPCOLESTR pstrEvent,
        IDispatch *pdisp);

    END_INTERFACE
} IBindEventHandlerVtbl;
interface IBindEventHandler {
    CONST_VTBL IBindEventHandlerVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IBindEventHandler_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IBindEventHandler_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IBindEventHandler_Release(This) (This)->lpVtbl->Release(This)
/*** IBindEventHandler methods ***/
#define IBindEventHandler_BindHandler(This,pstrEvent,pdisp) (This)->lpVtbl->BindHandler(This,pstrEvent,pdisp)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IBindEventHandler_QueryInterface(IBindEventHandler* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IBindEventHandler_AddRef(IBindEventHandler* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IBindEventHandler_Release(IBindEventHandler* This) {
    return This->lpVtbl->Release(This);
}
/*** IBindEventHandler methods ***/
static FORCEINLINE HRESULT IBindEventHandler_BindHandler(IBindEventHandler* This,LPCOLESTR pstrEvent,IDispatch *pdisp) {
    return This->lpVtbl->BindHandler(This,pstrEvent,pdisp);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IBindEventHandler_BindHandler_Proxy(
    IBindEventHandler* This,
    LPCOLESTR pstrEvent,
    IDispatch *pdisp);
void __RPC_STUB IBindEventHandler_BindHandler_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IBindEventHandler_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptStats interface
 */
#ifndef __IActiveScriptStats_INTERFACE_DEFINED__
#define __IActiveScriptStats_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptStats, 0xb8da6310, 0xe19b, 0x11d0, 0x93,0x3c, 0x00,0xa0,0xc9,0x0d,0xca,0xa9);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b8da6310-e19b-11d0-933c-00a0c90dcaa9")
IActiveScriptStats : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetStat(
        DWORD stid,
        ULONG *pluHi,
        ULONG *pluLo) = 0;

    virtual HRESULT STDMETHODCALLTYPE GetStatEx(
        REFGUID guid,
        ULONG *pluHi,
        ULONG *pluLo) = 0;

    virtual HRESULT STDMETHODCALLTYPE ResetStats(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptStats, 0xb8da6310, 0xe19b, 0x11d0, 0x93,0x3c, 0x00,0xa0,0xc9,0x0d,0xca,0xa9)
#endif
#else
typedef struct IActiveScriptStatsVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptStats* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptStats* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptStats* This);

    /*** IActiveScriptStats methods ***/
    HRESULT (STDMETHODCALLTYPE *GetStat)(
        IActiveScriptStats* This,
        DWORD stid,
        ULONG *pluHi,
        ULONG *pluLo);

    HRESULT (STDMETHODCALLTYPE *GetStatEx)(
        IActiveScriptStats* This,
        REFGUID guid,
        ULONG *pluHi,
        ULONG *pluLo);

    HRESULT (STDMETHODCALLTYPE *ResetStats)(
        IActiveScriptStats* This);

    END_INTERFACE
} IActiveScriptStatsVtbl;
interface IActiveScriptStats {
    CONST_VTBL IActiveScriptStatsVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptStats_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptStats_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptStats_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptStats methods ***/
#define IActiveScriptStats_GetStat(This,stid,pluHi,pluLo) (This)->lpVtbl->GetStat(This,stid,pluHi,pluLo)
#define IActiveScriptStats_GetStatEx(This,guid,pluHi,pluLo) (This)->lpVtbl->GetStatEx(This,guid,pluHi,pluLo)
#define IActiveScriptStats_ResetStats(This) (This)->lpVtbl->ResetStats(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptStats_QueryInterface(IActiveScriptStats* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptStats_AddRef(IActiveScriptStats* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptStats_Release(IActiveScriptStats* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptStats methods ***/
static FORCEINLINE HRESULT IActiveScriptStats_GetStat(IActiveScriptStats* This,DWORD stid,ULONG *pluHi,ULONG *pluLo) {
    return This->lpVtbl->GetStat(This,stid,pluHi,pluLo);
}
static FORCEINLINE HRESULT IActiveScriptStats_GetStatEx(IActiveScriptStats* This,REFGUID guid,ULONG *pluHi,ULONG *pluLo) {
    return This->lpVtbl->GetStatEx(This,guid,pluHi,pluLo);
}
static FORCEINLINE HRESULT IActiveScriptStats_ResetStats(IActiveScriptStats* This) {
    return This->lpVtbl->ResetStats(This);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptStats_GetStat_Proxy(
    IActiveScriptStats* This,
    DWORD stid,
    ULONG *pluHi,
    ULONG *pluLo);
void __RPC_STUB IActiveScriptStats_GetStat_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScriptStats_GetStatEx_Proxy(
    IActiveScriptStats* This,
    REFGUID guid,
    ULONG *pluHi,
    ULONG *pluLo);
void __RPC_STUB IActiveScriptStats_GetStatEx_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScriptStats_ResetStats_Proxy(
    IActiveScriptStats* This);
void __RPC_STUB IActiveScriptStats_ResetStats_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptStats_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptProperty interface
 */
#ifndef __IActiveScriptProperty_INTERFACE_DEFINED__
#define __IActiveScriptProperty_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptProperty, 0x4954e0d0, 0xfbc7, 0x11d1, 0x84,0x10, 0x00,0x60,0x08,0xc3,0xfb,0xfc);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4954e0d0-fbc7-11d1-8410-006008c3fbfc")
IActiveScriptProperty : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetProperty(
        DWORD dwProperty,
        VARIANT *pvarIndex,
        VARIANT *pvarValue) = 0;

    virtual HRESULT STDMETHODCALLTYPE SetProperty(
        DWORD dwProperty,
        VARIANT *pvarIndex,
        VARIANT *pvarValue) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptProperty, 0x4954e0d0, 0xfbc7, 0x11d1, 0x84,0x10, 0x00,0x60,0x08,0xc3,0xfb,0xfc)
#endif
#else
typedef struct IActiveScriptPropertyVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptProperty* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptProperty* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptProperty* This);

    /*** IActiveScriptProperty methods ***/
    HRESULT (STDMETHODCALLTYPE *GetProperty)(
        IActiveScriptProperty* This,
        DWORD dwProperty,
        VARIANT *pvarIndex,
        VARIANT *pvarValue);

    HRESULT (STDMETHODCALLTYPE *SetProperty)(
        IActiveScriptProperty* This,
        DWORD dwProperty,
        VARIANT *pvarIndex,
        VARIANT *pvarValue);

    END_INTERFACE
} IActiveScriptPropertyVtbl;
interface IActiveScriptProperty {
    CONST_VTBL IActiveScriptPropertyVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptProperty_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptProperty_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptProperty_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptProperty methods ***/
#define IActiveScriptProperty_GetProperty(This,dwProperty,pvarIndex,pvarValue) (This)->lpVtbl->GetProperty(This,dwProperty,pvarIndex,pvarValue)
#define IActiveScriptProperty_SetProperty(This,dwProperty,pvarIndex,pvarValue) (This)->lpVtbl->SetProperty(This,dwProperty,pvarIndex,pvarValue)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptProperty_QueryInterface(IActiveScriptProperty* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptProperty_AddRef(IActiveScriptProperty* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptProperty_Release(IActiveScriptProperty* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptProperty methods ***/
static FORCEINLINE HRESULT IActiveScriptProperty_GetProperty(IActiveScriptProperty* This,DWORD dwProperty,VARIANT *pvarIndex,VARIANT *pvarValue) {
    return This->lpVtbl->GetProperty(This,dwProperty,pvarIndex,pvarValue);
}
static FORCEINLINE HRESULT IActiveScriptProperty_SetProperty(IActiveScriptProperty* This,DWORD dwProperty,VARIANT *pvarIndex,VARIANT *pvarValue) {
    return This->lpVtbl->SetProperty(This,dwProperty,pvarIndex,pvarValue);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptProperty_GetProperty_Proxy(
    IActiveScriptProperty* This,
    DWORD dwProperty,
    VARIANT *pvarIndex,
    VARIANT *pvarValue);
void __RPC_STUB IActiveScriptProperty_GetProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScriptProperty_SetProperty_Proxy(
    IActiveScriptProperty* This,
    DWORD dwProperty,
    VARIANT *pvarIndex,
    VARIANT *pvarValue);
void __RPC_STUB IActiveScriptProperty_SetProperty_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptProperty_INTERFACE_DEFINED__ */


/*****************************************************************************
 * ITridentEventSink interface
 */
#ifndef __ITridentEventSink_INTERFACE_DEFINED__
#define __ITridentEventSink_INTERFACE_DEFINED__

DEFINE_GUID(IID_ITridentEventSink, 0x1dc9ca50, 0x06ef, 0x11d2, 0x84,0x15, 0x00,0x60,0x08,0xc3,0xfb,0xfc);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("1dc9ca50-06ef-11d2-8415-006008c3fbfc")
ITridentEventSink : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE FireEvent(
        LPCOLESTR pstrEvent,
        DISPPARAMS *pdp,
        VARIANT *pvarRes,
        EXCEPINFO *pei) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(ITridentEventSink, 0x1dc9ca50, 0x06ef, 0x11d2, 0x84,0x15, 0x00,0x60,0x08,0xc3,0xfb,0xfc)
#endif
#else
typedef struct ITridentEventSinkVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        ITridentEventSink* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        ITridentEventSink* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        ITridentEventSink* This);

    /*** ITridentEventSink methods ***/
    HRESULT (STDMETHODCALLTYPE *FireEvent)(
        ITridentEventSink* This,
        LPCOLESTR pstrEvent,
        DISPPARAMS *pdp,
        VARIANT *pvarRes,
        EXCEPINFO *pei);

    END_INTERFACE
} ITridentEventSinkVtbl;
interface ITridentEventSink {
    CONST_VTBL ITridentEventSinkVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define ITridentEventSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define ITridentEventSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define ITridentEventSink_Release(This) (This)->lpVtbl->Release(This)
/*** ITridentEventSink methods ***/
#define ITridentEventSink_FireEvent(This,pstrEvent,pdp,pvarRes,pei) (This)->lpVtbl->FireEvent(This,pstrEvent,pdp,pvarRes,pei)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT ITridentEventSink_QueryInterface(ITridentEventSink* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG ITridentEventSink_AddRef(ITridentEventSink* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG ITridentEventSink_Release(ITridentEventSink* This) {
    return This->lpVtbl->Release(This);
}
/*** ITridentEventSink methods ***/
static FORCEINLINE HRESULT ITridentEventSink_FireEvent(ITridentEventSink* This,LPCOLESTR pstrEvent,DISPPARAMS *pdp,VARIANT *pvarRes,EXCEPINFO *pei) {
    return This->lpVtbl->FireEvent(This,pstrEvent,pdp,pvarRes,pei);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE ITridentEventSink_FireEvent_Proxy(
    ITridentEventSink* This,
    LPCOLESTR pstrEvent,
    DISPPARAMS *pdp,
    VARIANT *pvarRes,
    EXCEPINFO *pei);
void __RPC_STUB ITridentEventSink_FireEvent_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __ITridentEventSink_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptGarbageCollector interface
 */
#ifndef __IActiveScriptGarbageCollector_INTERFACE_DEFINED__
#define __IActiveScriptGarbageCollector_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptGarbageCollector, 0x6aa2c4a0, 0x2b53, 0x11d4, 0xa2,0xa0, 0x00,0x10,0x4b,0xd3,0x50,0x90);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("6aa2c4a0-2b53-11d4-a2a0-00104bd35090")
IActiveScriptGarbageCollector : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE CollectGarbage(
        SCRIPTGCTYPE scriptgctype) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptGarbageCollector, 0x6aa2c4a0, 0x2b53, 0x11d4, 0xa2,0xa0, 0x00,0x10,0x4b,0xd3,0x50,0x90)
#endif
#else
typedef struct IActiveScriptGarbageCollectorVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptGarbageCollector* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptGarbageCollector* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptGarbageCollector* This);

    /*** IActiveScriptGarbageCollector methods ***/
    HRESULT (STDMETHODCALLTYPE *CollectGarbage)(
        IActiveScriptGarbageCollector* This,
        SCRIPTGCTYPE scriptgctype);

    END_INTERFACE
} IActiveScriptGarbageCollectorVtbl;
interface IActiveScriptGarbageCollector {
    CONST_VTBL IActiveScriptGarbageCollectorVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptGarbageCollector_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptGarbageCollector_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptGarbageCollector_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptGarbageCollector methods ***/
#define IActiveScriptGarbageCollector_CollectGarbage(This,scriptgctype) (This)->lpVtbl->CollectGarbage(This,scriptgctype)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptGarbageCollector_QueryInterface(IActiveScriptGarbageCollector* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptGarbageCollector_AddRef(IActiveScriptGarbageCollector* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptGarbageCollector_Release(IActiveScriptGarbageCollector* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptGarbageCollector methods ***/
static FORCEINLINE HRESULT IActiveScriptGarbageCollector_CollectGarbage(IActiveScriptGarbageCollector* This,SCRIPTGCTYPE scriptgctype) {
    return This->lpVtbl->CollectGarbage(This,scriptgctype);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptGarbageCollector_CollectGarbage_Proxy(
    IActiveScriptGarbageCollector* This,
    SCRIPTGCTYPE scriptgctype);
void __RPC_STUB IActiveScriptGarbageCollector_CollectGarbage_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptGarbageCollector_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptSIPInfo interface
 */
#ifndef __IActiveScriptSIPInfo_INTERFACE_DEFINED__
#define __IActiveScriptSIPInfo_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptSIPInfo, 0x764651d0, 0x38de, 0x11d4, 0xa2,0xa3, 0x00,0x10,0x4b,0xd3,0x50,0x90);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("764651d0-38de-11d4-a2a3-00104bd35090")
IActiveScriptSIPInfo : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE GetSIPOID(
        GUID *poid_sip) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptSIPInfo, 0x764651d0, 0x38de, 0x11d4, 0xa2,0xa3, 0x00,0x10,0x4b,0xd3,0x50,0x90)
#endif
#else
typedef struct IActiveScriptSIPInfoVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptSIPInfo* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptSIPInfo* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptSIPInfo* This);

    /*** IActiveScriptSIPInfo methods ***/
    HRESULT (STDMETHODCALLTYPE *GetSIPOID)(
        IActiveScriptSIPInfo* This,
        GUID *poid_sip);

    END_INTERFACE
} IActiveScriptSIPInfoVtbl;
interface IActiveScriptSIPInfo {
    CONST_VTBL IActiveScriptSIPInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptSIPInfo_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptSIPInfo_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptSIPInfo_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptSIPInfo methods ***/
#define IActiveScriptSIPInfo_GetSIPOID(This,poid_sip) (This)->lpVtbl->GetSIPOID(This,poid_sip)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptSIPInfo_QueryInterface(IActiveScriptSIPInfo* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptSIPInfo_AddRef(IActiveScriptSIPInfo* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptSIPInfo_Release(IActiveScriptSIPInfo* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptSIPInfo methods ***/
static FORCEINLINE HRESULT IActiveScriptSIPInfo_GetSIPOID(IActiveScriptSIPInfo* This,GUID *poid_sip) {
    return This->lpVtbl->GetSIPOID(This,poid_sip);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptSIPInfo_GetSIPOID_Proxy(
    IActiveScriptSIPInfo* This,
    GUID *poid_sip);
void __RPC_STUB IActiveScriptSIPInfo_GetSIPOID_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptSIPInfo_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptSiteTraceInfo interface
 */
#ifndef __IActiveScriptSiteTraceInfo_INTERFACE_DEFINED__
#define __IActiveScriptSiteTraceInfo_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptSiteTraceInfo, 0x4b7272ae, 0x1955, 0x4bfe, 0x98,0xb0, 0x78,0x06,0x21,0x88,0x85,0x69);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("4b7272ae-1955-4bfe-98b0-780621888569")
IActiveScriptSiteTraceInfo : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE SendScriptTraceInfo(
        SCRIPTTRACEINFO stiEventType,
        GUID guidContextID,
        DWORD dwScriptContextCookie,
        LONG lScriptStatementStart,
        LONG lScriptStatementEnd,
        DWORD64 dwReserved) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptSiteTraceInfo, 0x4b7272ae, 0x1955, 0x4bfe, 0x98,0xb0, 0x78,0x06,0x21,0x88,0x85,0x69)
#endif
#else
typedef struct IActiveScriptSiteTraceInfoVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptSiteTraceInfo* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptSiteTraceInfo* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptSiteTraceInfo* This);

    /*** IActiveScriptSiteTraceInfo methods ***/
    HRESULT (STDMETHODCALLTYPE *SendScriptTraceInfo)(
        IActiveScriptSiteTraceInfo* This,
        SCRIPTTRACEINFO stiEventType,
        GUID guidContextID,
        DWORD dwScriptContextCookie,
        LONG lScriptStatementStart,
        LONG lScriptStatementEnd,
        DWORD64 dwReserved);

    END_INTERFACE
} IActiveScriptSiteTraceInfoVtbl;
interface IActiveScriptSiteTraceInfo {
    CONST_VTBL IActiveScriptSiteTraceInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptSiteTraceInfo_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptSiteTraceInfo_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptSiteTraceInfo_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptSiteTraceInfo methods ***/
#define IActiveScriptSiteTraceInfo_SendScriptTraceInfo(This,stiEventType,guidContextID,dwScriptContextCookie,lScriptStatementStart,lScriptStatementEnd,dwReserved) (This)->lpVtbl->SendScriptTraceInfo(This,stiEventType,guidContextID,dwScriptContextCookie,lScriptStatementStart,lScriptStatementEnd,dwReserved)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptSiteTraceInfo_QueryInterface(IActiveScriptSiteTraceInfo* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptSiteTraceInfo_AddRef(IActiveScriptSiteTraceInfo* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptSiteTraceInfo_Release(IActiveScriptSiteTraceInfo* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptSiteTraceInfo methods ***/
static FORCEINLINE HRESULT IActiveScriptSiteTraceInfo_SendScriptTraceInfo(IActiveScriptSiteTraceInfo* This,SCRIPTTRACEINFO stiEventType,GUID guidContextID,DWORD dwScriptContextCookie,LONG lScriptStatementStart,LONG lScriptStatementEnd,DWORD64 dwReserved) {
    return This->lpVtbl->SendScriptTraceInfo(This,stiEventType,guidContextID,dwScriptContextCookie,lScriptStatementStart,lScriptStatementEnd,dwReserved);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptSiteTraceInfo_SendScriptTraceInfo_Proxy(
    IActiveScriptSiteTraceInfo* This,
    SCRIPTTRACEINFO stiEventType,
    GUID guidContextID,
    DWORD dwScriptContextCookie,
    LONG lScriptStatementStart,
    LONG lScriptStatementEnd,
    DWORD64 dwReserved);
void __RPC_STUB IActiveScriptSiteTraceInfo_SendScriptTraceInfo_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptSiteTraceInfo_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptTraceInfo interface
 */
#ifndef __IActiveScriptTraceInfo_INTERFACE_DEFINED__
#define __IActiveScriptTraceInfo_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptTraceInfo, 0xc35456e7, 0xbebf, 0x4a1b, 0x86,0xa9, 0x24,0xd5,0x6b,0xe8,0xb3,0x69);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("c35456e7-bebf-4a1b-86a9-24d56be8b369")
IActiveScriptTraceInfo : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE StartScriptTracing(
        IActiveScriptSiteTraceInfo *pSiteTraceInfo,
        GUID guidContextID) = 0;

    virtual HRESULT STDMETHODCALLTYPE StopScriptTracing(
        ) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptTraceInfo, 0xc35456e7, 0xbebf, 0x4a1b, 0x86,0xa9, 0x24,0xd5,0x6b,0xe8,0xb3,0x69)
#endif
#else
typedef struct IActiveScriptTraceInfoVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptTraceInfo* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptTraceInfo* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptTraceInfo* This);

    /*** IActiveScriptTraceInfo methods ***/
    HRESULT (STDMETHODCALLTYPE *StartScriptTracing)(
        IActiveScriptTraceInfo* This,
        IActiveScriptSiteTraceInfo *pSiteTraceInfo,
        GUID guidContextID);

    HRESULT (STDMETHODCALLTYPE *StopScriptTracing)(
        IActiveScriptTraceInfo* This);

    END_INTERFACE
} IActiveScriptTraceInfoVtbl;
interface IActiveScriptTraceInfo {
    CONST_VTBL IActiveScriptTraceInfoVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptTraceInfo_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptTraceInfo_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptTraceInfo_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptTraceInfo methods ***/
#define IActiveScriptTraceInfo_StartScriptTracing(This,pSiteTraceInfo,guidContextID) (This)->lpVtbl->StartScriptTracing(This,pSiteTraceInfo,guidContextID)
#define IActiveScriptTraceInfo_StopScriptTracing(This) (This)->lpVtbl->StopScriptTracing(This)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptTraceInfo_QueryInterface(IActiveScriptTraceInfo* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptTraceInfo_AddRef(IActiveScriptTraceInfo* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptTraceInfo_Release(IActiveScriptTraceInfo* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptTraceInfo methods ***/
static FORCEINLINE HRESULT IActiveScriptTraceInfo_StartScriptTracing(IActiveScriptTraceInfo* This,IActiveScriptSiteTraceInfo *pSiteTraceInfo,GUID guidContextID) {
    return This->lpVtbl->StartScriptTracing(This,pSiteTraceInfo,guidContextID);
}
static FORCEINLINE HRESULT IActiveScriptTraceInfo_StopScriptTracing(IActiveScriptTraceInfo* This) {
    return This->lpVtbl->StopScriptTracing(This);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptTraceInfo_StartScriptTracing_Proxy(
    IActiveScriptTraceInfo* This,
    IActiveScriptSiteTraceInfo *pSiteTraceInfo,
    GUID guidContextID);
void __RPC_STUB IActiveScriptTraceInfo_StartScriptTracing_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);
HRESULT STDMETHODCALLTYPE IActiveScriptTraceInfo_StopScriptTracing_Proxy(
    IActiveScriptTraceInfo* This);
void __RPC_STUB IActiveScriptTraceInfo_StopScriptTracing_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptTraceInfo_INTERFACE_DEFINED__ */


/*****************************************************************************
 * IActiveScriptStringCompare interface
 */
#ifndef __IActiveScriptStringCompare_INTERFACE_DEFINED__
#define __IActiveScriptStringCompare_INTERFACE_DEFINED__

DEFINE_GUID(IID_IActiveScriptStringCompare, 0x58562769, 0xed52, 0x42f7, 0x84,0x03, 0x49,0x63,0x51,0x4e,0x1f,0x11);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("58562769-ed52-42f7-8403-4963514e1f11")
IActiveScriptStringCompare : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE StrComp(
        BSTR bszStr1,
        BSTR bszStr2,
        LONG *iRet) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IActiveScriptStringCompare, 0x58562769, 0xed52, 0x42f7, 0x84,0x03, 0x49,0x63,0x51,0x4e,0x1f,0x11)
#endif
#else
typedef struct IActiveScriptStringCompareVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IActiveScriptStringCompare* This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IActiveScriptStringCompare* This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IActiveScriptStringCompare* This);

    /*** IActiveScriptStringCompare methods ***/
    HRESULT (STDMETHODCALLTYPE *StrComp)(
        IActiveScriptStringCompare* This,
        BSTR bszStr1,
        BSTR bszStr2,
        LONG *iRet);

    END_INTERFACE
} IActiveScriptStringCompareVtbl;
interface IActiveScriptStringCompare {
    CONST_VTBL IActiveScriptStringCompareVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IActiveScriptStringCompare_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IActiveScriptStringCompare_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IActiveScriptStringCompare_Release(This) (This)->lpVtbl->Release(This)
/*** IActiveScriptStringCompare methods ***/
#define IActiveScriptStringCompare_StrComp(This,bszStr1,bszStr2,iRet) (This)->lpVtbl->StrComp(This,bszStr1,bszStr2,iRet)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IActiveScriptStringCompare_QueryInterface(IActiveScriptStringCompare* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IActiveScriptStringCompare_AddRef(IActiveScriptStringCompare* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IActiveScriptStringCompare_Release(IActiveScriptStringCompare* This) {
    return This->lpVtbl->Release(This);
}
/*** IActiveScriptStringCompare methods ***/
static FORCEINLINE HRESULT IActiveScriptStringCompare_StrComp(IActiveScriptStringCompare* This,BSTR bszStr1,BSTR bszStr2,LONG *iRet) {
    return This->lpVtbl->StrComp(This,bszStr1,bszStr2,iRet);
}
#endif
#endif

#endif

HRESULT STDMETHODCALLTYPE IActiveScriptStringCompare_StrComp_Proxy(
    IActiveScriptStringCompare* This,
    BSTR bszStr1,
    BSTR bszStr2,
    LONG *iRet);
void __RPC_STUB IActiveScriptStringCompare_StrComp_Stub(
    IRpcStubBuffer* This,
    IRpcChannelBuffer* pRpcChannelBuffer,
    PRPC_MESSAGE pRpcMessage,
    DWORD* pdwStubPhase);

#endif  /* __IActiveScriptStringCompare_INTERFACE_DEFINED__ */

#endif

#endif
/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);
ULONG           __RPC_USER VARIANT_UserSize     (ULONG *, ULONG, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserMarshal  (ULONG *, unsigned char *, VARIANT *);
unsigned char * __RPC_USER VARIANT_UserUnmarshal(ULONG *, unsigned char *, VARIANT *);
void            __RPC_USER VARIANT_UserFree     (ULONG *, VARIANT *);
ULONG           __RPC_USER HWND_UserSize     (ULONG *, ULONG, HWND *);
unsigned char * __RPC_USER HWND_UserMarshal  (ULONG *, unsigned char *, HWND *);
unsigned char * __RPC_USER HWND_UserUnmarshal(ULONG *, unsigned char *, HWND *);
void            __RPC_USER HWND_UserFree     (ULONG *, HWND *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __activscp_h__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/share/mingw-w64/include/adc.h                                                                   0100644 0000000 0000000 00000005007 12404413022 015234  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#include <winapifamily.h>

#ifndef ADC_INCLUDED
#define ADC_INCLUDED

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)

#undef ADCDECLSPEC
#define ADCDECLSPEC __declspec (selectany)

extern const ADCDECLSPEC CLSID CLSID_FoxRowset = { 0x3ff292b6, 0xb204, 0x11cf,{ 0x8d, 0x23, 0, 0xaa, 0, 0x5f, 0xfe, 0x58 } };
extern const ADCDECLSPEC GUID DBPROPSET_ADC = { 0xb68e3cc1, 0x6deb, 0x11d0,{ 0x8d, 0xf6, 0x00, 0xaa, 0x00, 0x5f, 0xfe, 0x58 } };
extern const ADCDECLSPEC GUID IID_IAsyncAllowed = { 0xf5f2893a, 0xba9e, 0x11d0,{ 0xab, 0xb9, 0x0, 0xc0, 0x4f, 0xc2, 0x9f, 0x8f } };
extern const ADCDECLSPEC IID IID_IRowsetADCExtensions = { 0xf17324c4, 0x68e0, 0x11d0,{ 0xad, 0x45, 0x00, 0xc0, 0x4f, 0xc2, 0x98, 0x63 } };
extern const ADCDECLSPEC IID IID_IUpdateInfo = { 0xa0385420, 0x62b8, 0x11d1,{ 0x9a, 0x6, 0x0, 0xa0, 0xc9, 0x3, 0xaa, 0x45 } };
extern const ADCDECLSPEC IID IID_IRowsetSynchronize = { 0x1be41e60, 0x807a, 0x11d1,{ 0x9a, 0x14, 0x0, 0xa0, 0xc9, 0x3, 0xaa, 0x45 } };
extern const ADCDECLSPEC IID IID_IRowsetProperties = { 0x1e837070, 0xbcfc, 0x11d1,{ 0x9a, 0x2c, 0x0, 0xa0, 0xc9, 0x3, 0xaa, 0x45 } };

enum ADCPROPENUM {
  DBPROP_ADC_ASYNCHFETCHSIZE = 3,
  DBPROP_ADC_BATCHSIZE = 4,
  DBPROP_ADC_UPDATECRITERIA = 5,
  DBPROP_ADC_ASYNCHPREFETCHSIZE = 7,
  DBPROP_ADC_ASYNCHTHREADPRIORITY = 8,
  DBPROP_ADC_CACHECHILDROWS = 9,
  DBPROP_ADC_MAINTAINCHANGESTATUS = 10,
  DBPROP_ADC_AUTORECALC = 11,
  DBPROP_ADC_UNIQUETABLE = 13,
  DBPROP_ADC_UNIQUESCHEMA = 14,
  DBPROP_ADC_UNIQUECATALOG = 15,
  DBPROP_ADC_CUSTOMRESYNCH = 16,
  DBPROP_ADC_CEVER = 17,
  DBPROP_ADC_RESHAPENAME = 18,
  DBPROP_ADC_UPDATERESYNC = 19,
  DBPROP_ADC_BACKINGSTORE = 21,
  DBPROP_ADC_RELEASESHAPEONDISCONNECT = 22
};

#ifndef _COMMON_ADC_AND_ADO_PROPS_
#define _COMMON_ADC_AND_ADO_PROPS_

enum ADCPROP_UPDATECRITERIA_ENUM {
  adCriteriaKey = 0,
  adCriteriaAllCols = 1,
  adCriteriaUpdCols = 2,
  adCriteriaTimeStamp = 3
};

enum ADCPROP_ASYNCTHREADPRIORITY_ENUM {
  adPriorityLowest = 1,
  adPriorityBelowNormal = 2,
  adPriorityNormal = 3,
  adPriorityAboveNormal = 4,
  adPriorityHighest = 5
};

enum ADCPROP_UPDATERESYNC_ENUM {
  adResyncNone = 0,
  adResyncAutoIncrement = 0x1,
  adResyncConflicts = 0x2,
  adResyncUpdates = 0x4,
  adResyncInserts = 0x8,
  adResyncAll = 0x0f
};

enum ADCPROP_AUTORECALC_ENUM {
  adRecalcUpFront = 0,
  adRecalcAlways = 1
};
#endif

enum FOXROWSETPROPENUM {
  DBPROP_FOXTABLENAME = 0xeeff
};
#endif

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         usr/share/mingw-w64/include/adhoc.h                                                                 0100644 0000000 0000000 00000050111 12404413022 015557  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _INC_ADHOC
#define _INC_ADHOC

#if (_WIN32_WINNT >= 0x0600)

typedef enum tagDOT11_ADHOC_AUTH_ALGORITHM {
  DOT11_ADHOC_AUTH_ALGO_INVALID      = -1,
  DOT11_ADHOC_AUTH_ALGO_80211_OPEN   = 1,
  DOT11_ADHOC_AUTH_ALGO_RSNA_PSK     = 7 
} DOT11_ADHOC_AUTH_ALGORITHM;

typedef enum tagDOT11_ADHOC_CIPHER_ALGORITHM {
  DOT11_ADHOC_CIPHER_ALGO_INVALID   = -1,
  DOT11_ADHOC_CIPHER_ALGO_NONE      = 0x00,
  DOT11_ADHOC_CIPHER_ALGO_CCMP      = 0x04,
  DOT11_ADHOC_CIPHER_ALGO_WEP       = 0x101 
} DOT11_ADHOC_CIPHER_ALGORITHM;

typedef enum tagDOT11_ADHOC_CONNECT_FAIL_REASON {
  DOT11_ADHOC_CONNECT_FAIL_DOMAIN_MISMATCH       = 0,
  DOT11_ADHOC_CONNECT_FAIL_PASSPHRASE_MISMATCH   = 1,
  DOT11_ADHOC_CONNECT_FAIL_OTHER                 = 2 
} DOT11_ADHOC_CONNECT_FAIL_REASON;

typedef enum tagDOT11_ADHOC_NETWORK_CONNECTION_STATUS {
  DOT11_ADHOC_NETWORK_CONNECTION_STATUS_INVALID        = 0,
  DOT11_ADHOC_NETWORK_CONNECTION_STATUS_DISCONNECTED   = 11,
  DOT11_ADHOC_NETWORK_CONNECTION_STATUS_CONNECTING     = 12,
  DOT11_ADHOC_NETWORK_CONNECTION_STATUS_CONNECTED      = 13,
  DOT11_ADHOC_NETWORK_CONNECTION_STATUS_FORMED         = 14 
} DOT11_ADHOC_NETWORK_CONNECTION_STATUS;

typedef struct IDot11AdHocInterfaceNotificationSink IDot11AdHocInterfaceNotificationSink;
typedef struct IDot11AdHocInterface IDot11AdHocInterface;
typedef struct IDot11AdHocManager IDot11AdHocManager;
typedef struct IDot11AdHocManagerNotificationSink IDot11AdHocManagerNotificationSink;
typedef struct IDot11AdHocNetwork IDot11AdHocNetwork;
typedef struct IEnumDot11AdHocSecuritySettings IEnumDot11AdHocSecuritySettings;
typedef struct IEnumDot11AdHocNetworks IEnumDot11AdHocNetworks;
typedef struct IDot11AdHocSecuritySettings IDot11AdHocSecuritySettings;
typedef struct IEnumDot11AdHocNetworks IEnumDot11AdHocNetworks;
typedef struct IEnumDot11AdHocInterfaces IEnumDot11AdHocInterfaces;

#undef  INTERFACE
#define INTERFACE IDot11AdHocInterfaceNotificationSink
DECLARE_INTERFACE_(IDot11AdHocInterfaceNotificationSink,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDot11AdHocInterfaceNotificationSink methods */
    STDMETHOD_(HRESULT,OnConnectionStatusChange)(THIS_ DOT11_ADHOC_NETWORK_CONNECTION_STATUS eStatus) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IDot11AdHocInterfaceNotificationSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDot11AdHocInterfaceNotificationSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDot11AdHocInterfaceNotificationSink_Release(This) (This)->lpVtbl->Release(This)
#define IDot11AdHocInterfaceNotificationSink_OnConnectionStatusChange(This,eStatus) (This)->lpVtbl->OnConnectionStatusChange(This,eStatus)
#endif /*COBJMACROS*/

#undef  INTERFACE
#define INTERFACE IDot11AdHocInterface
#ifdef __GNUC__
#warning COM interfaces layout in this header has not been verified.
#warning COM interfaces with incorrect layout may not work at all.
__MINGW_BROKEN_INTERFACE(INTERFACE)
#endif
DECLARE_INTERFACE_(IDot11AdHocInterface,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDot11AdHocInterface methods */
    STDMETHOD_(HRESULT,GetDeviceSignature)(THIS_ GUID *pSignature) PURE;
    STDMETHOD_(HRESULT,GetFriendlyName)(THIS_ LPWSTR *ppszName) PURE;
    STDMETHOD_(HRESULT,IsDot11d)(THIS_ BOOLEAN *pf11d) PURE;
    STDMETHOD_(HRESULT,IsAdHocCapable)(THIS_ BOOLEAN *pfAdHocCapable) PURE;
    STDMETHOD_(HRESULT,IsRadioOn)(THIS_ BOOLEAN *pfIsRadioOn) PURE;
    STDMETHOD_(HRESULT,GetActiveNetwork)(THIS_ IDot11AdHocNetwork **ppNetwork) PURE;
    STDMETHOD_(HRESULT,GetIEnumSecuritySettings)(THIS_ IEnumDot11AdHocSecuritySettings **ppEnum) PURE;
    STDMETHOD_(HRESULT,GetIEnumDot11AdHocNetworks)(THIS_ GUID *pFilterGuid,IEnumDot11AdHocNetworks **ppEnum) PURE;
    STDMETHOD_(HRESULT,GetStatus)(THIS_ DOT11_ADHOC_NETWORK_CONNECTION_STATUS *pState) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IDot11AdHocInterface_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDot11AdHocInterface_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDot11AdHocInterface_Release(This) (This)->lpVtbl->Release(This)
#define IDot11AdHocInterface_GetDeviceSignature(This,pSignature) (This)->lpVtbl->GetDeviceSignature(This,pSignature)
#define IDot11AdHocInterface_GetFriendlyName(This,ppszName) (This)->lpVtbl->GetFriendlyName(This,ppszName)
#define IDot11AdHocInterface_IsDot11d(This,pf11d) (This)->lpVtbl->IsDot11d(This,pf11d)
#define IDot11AdHocInterface_IsAdHocCapable(This,pfAdHocCapable) (This)->lpVtbl->IsAdHocCapable(This,pfAdHocCapable)
#define IDot11AdHocInterface_IsRadioOn(This,pfIsRadioOn) (This)->lpVtbl->IsRadioOn(This,pfIsRadioOn)
#define IDot11AdHocInterface_GetActiveNetwork(This,ppNetwork) (This)->lpVtbl->GetActiveNetwork(This,ppNetwork)
#define IDot11AdHocInterface_GetIEnumSecuritySettings(This,ppEnum) (This)->lpVtbl->GetIEnumSecuritySettings(This,ppEnum)
#define IDot11AdHocInterface_GetIEnumDot11AdHocNetworks(This,pFilterGuid,ppEnum) (This)->lpVtbl->GetIEnumDot11AdHocNetworks(This,pFilterGuid,ppEnum)
#define IDot11AdHocInterface_GetStatus(This,pState) (This)->lpVtbl->GetStatus(This,pState)
#endif /*COBJMACROS*/

#undef  INTERFACE
#define INTERFACE IDot11AdHocManager
#ifdef __GNUC__
#warning COM interfaces layout in this header has not been verified.
#warning COM interfaces with incorrect layout may not work at all.
__MINGW_BROKEN_INTERFACE(INTERFACE)
#endif
DECLARE_INTERFACE_(IDot11AdHocManager,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDot11AdHocManager methods */
    STDMETHOD_(HRESULT,CreateNetwork)(THIS_ LPCWSTR Name,LPCWSTR Password,LONG GeographicalId,IDot11AdHocInterface *pInterface,IDot11AdHocSecuritySettings *pSecurity,GUID *pContextGuid,IDot11AdHocNetwork **pIAdHoc) PURE;
    STDMETHOD_(HRESULT,CommitCreatedNetwork)(THIS_ IDot11AdHocNetwork *pIAdHoc,BOOLEAN fSaveProfile,BOOLEAN fMakeSavedProfileUserSpecific) PURE;
    STDMETHOD_(HRESULT,GetIEnumDot11AdHocNetworks)(THIS_ GUID *pContextGuid,IEnumDot11AdHocNetworks **ppEnum) PURE;
    STDMETHOD_(HRESULT,GetIEnumDot11AdHocInterfaces)(THIS_ IEnumDot11AdHocInterfaces **ppEnum) PURE;
    STDMETHOD_(HRESULT,GetNetwork)(THIS_ GUID *NetworkSignature,IDot11AdHocNetwork **pNetwork) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IDot11AdHocManager_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDot11AdHocManager_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDot11AdHocManager_Release(This) (This)->lpVtbl->Release(This)
#define IDot11AdHocManager_CreateNetwork(This,Name,Password,GeographicalId,pInterface,pSecurity,pContextGuid,pIAdHoc) (This)->lpVtbl->CreateNetwork(This,Name,Password,GeographicalId,pInterface,pSecurity,pContextGuid,pIAdHoc)
#define IDot11AdHocManager_CommitCreatedNetwork(This,pIAdHoc,fSaveProfile,fMakeSavedProfileUserSpecific) (This)->lpVtbl->CommitCreatedNetwork(This,pIAdHoc,fSaveProfile,fMakeSavedProfileUserSpecific)
#define IDot11AdHocManager_GetIEnumDot11AdHocNetworks(This,pContextGuid,ppEnum) (This)->lpVtbl->GetIEnumDot11AdHocNetworks(This,pContextGuid,ppEnum)
#define IDot11AdHocManager_GetIEnumDot11AdHocInterfaces(This,ppEnum) (This)->lpVtbl->GetIEnumDot11AdHocInterfaces(This,ppEnum)
#define IDot11AdHocManager_GetNetwork(This,NetworkSignature,pNetwork) (This)->lpVtbl->GetNetwork(This,NetworkSignature,pNetwork)
#endif /*COBJMACROS*/

#undef  INTERFACE
#define INTERFACE IDot11AdHocManagerNotificationSink
#ifdef __GNUC__
#warning COM interfaces layout in this header has not been verified.
#warning COM interfaces with incorrect layout may not work at all.
__MINGW_BROKEN_INTERFACE(INTERFACE)
#endif
DECLARE_INTERFACE_(IDot11AdHocManagerNotificationSink,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDot11AdHocManagerNotificationSink methods */
    STDMETHOD_(HRESULT,OnNetworkAdd)(THIS_ IDot11AdHocNetwork *pIAdHocNetwork) PURE;
    STDMETHOD_(HRESULT,OnNetworkRemove)(THIS_ GUID *Signature) PURE;
    STDMETHOD_(HRESULT,OnInterfaceAdd)(THIS_ IDot11AdHocInterface *pIAdHocInterface) PURE;
    STDMETHOD_(HRESULT,OnInterfaceRemove)(THIS_ GUID *Signature) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IDot11AdHocManagerNotificationSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDot11AdHocManagerNotificationSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDot11AdHocManagerNotificationSink_Release(This) (This)->lpVtbl->Release(This)
#define IDot11AdHocManagerNotificationSink_OnNetworkAdd(This,pIAdHocNetwork) (This)->lpVtbl->OnNetworkAdd(This,pIAdHocNetwork)
#define IDot11AdHocManagerNotificationSink_OnNetworkRemove(This,Signature) (This)->lpVtbl->OnNetworkRemove(This,Signature)
#define IDot11AdHocManagerNotificationSink_OnInterfaceAdd(This,pIAdHocInterface) (This)->lpVtbl->OnInterfaceAdd(This,pIAdHocInterface)
#define IDot11AdHocManagerNotificationSink_OnInterfaceRemove(This,Signature) (This)->lpVtbl->OnInterfaceRemove(This,Signature)
#endif /*COBJMACROS*/

#undef  INTERFACE
#define INTERFACE IDot11AdHocNetwork
#ifdef __GNUC__
#warning COM interfaces layout in this header has not been verified.
#warning COM interfaces with incorrect layout may not work at all.
__MINGW_BROKEN_INTERFACE(INTERFACE)
#endif
DECLARE_INTERFACE_(IDot11AdHocNetwork,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDot11AdHocNetwork methods */
    STDMETHOD_(HRESULT,GetStatus)(THIS_ DOT11_ADHOC_NETWORK_CONNECTION_STATUS *eStatus) PURE;
    STDMETHOD_(HRESULT,GetSSID)(THIS_ LPWSTR *ppszwSSID) PURE;
    STDMETHOD_(HRESULT,HasProfile)(THIS_ BOOLEAN *pf11d) PURE;
    STDMETHOD_(HRESULT,GetProfileName)(THIS_ LPWSTR *ppszwProfileName) PURE;
    STDMETHOD_(HRESULT,DeleteProfile)(THIS) PURE;
    STDMETHOD_(HRESULT,GetSignalQuality)(THIS_ ULONG *puStrengthValue,ULONG *puStrengthMax) PURE;
    STDMETHOD_(HRESULT,GetSecuritySetting)(THIS_ IDot11AdHocSecuritySettings **pAdHocSecuritySetting) PURE;
    STDMETHOD_(HRESULT,GetContextGuid)(THIS_ GUID *pContextGuid) PURE;
    STDMETHOD_(HRESULT,GetSignature)(THIS_ GUID *pSignature) PURE;
    STDMETHOD_(HRESULT,GetInterface)(THIS_ IDot11AdHocInterface **pAdHocInterface) PURE;
    STDMETHOD_(HRESULT,Connect)(THIS_ LPCWSTR Passphrase,LONG GeographicalId,BOOLEAN fSaveProfile,BOOLEAN fMakeSavedProfileUserSpecific) PURE;
    STDMETHOD_(HRESULT,Disconnect)(THIS) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IDot11AdHocNetwork_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDot11AdHocNetwork_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDot11AdHocNetwork_Release(This) (This)->lpVtbl->Release(This)
#define IDot11AdHocNetwork_GetStatus(This,eStatus) (This)->lpVtbl->GetStatus(This,eStatus)
#define IDot11AdHocNetwork_GetSSID(This,ppszwSSID) (This)->lpVtbl->GetSSID(This,ppszwSSID)
#define IDot11AdHocNetwork_HasProfile(This,pf11d) (This)->lpVtbl->HasProfile(This,pf11d)
#define IDot11AdHocNetwork_GetProfileName(This,ppszwProfileName) (This)->lpVtbl->GetProfileName(This,ppszwProfileName)
#define IDot11AdHocNetwork_DeleteProfile() (This)->lpVtbl->DeleteProfile(This)
#define IDot11AdHocNetwork_GetSignalQuality(This,puStrengthValue,puStrengthMax) (This)->lpVtbl->GetSignalQuality(This,puStrengthValue,puStrengthMax)
#define IDot11AdHocNetwork_GetSecuritySetting(This,pAdHocSecuritySetting) (This)->lpVtbl->GetSecuritySetting(This,pAdHocSecuritySetting)
#define IDot11AdHocNetwork_GetContextGuid(This,pContextGuid) (This)->lpVtbl->GetContextGuid(This,pContextGuid)
#define IDot11AdHocNetwork_GetSignature(This,pSignature) (This)->lpVtbl->GetSignature(This,pSignature)
#define IDot11AdHocNetwork_GetInterface(This,pAdHocInterface) (This)->lpVtbl->GetInterface(This,pAdHocInterface)
#define IDot11AdHocNetwork_Connect(This,Passphrase,GeographicalId,fSaveProfile,fMakeSavedProfileUserSpecific) (This)->lpVtbl->Connect(This,Passphrase,GeographicalId,fSaveProfile,fMakeSavedProfileUserSpecific)
#define IDot11AdHocNetwork_Disconnect() (This)->lpVtbl->Disconnect(This)
#endif /*COBJMACROS*/

#undef  INTERFACE
#define INTERFACE IDot11AdHocNetworkNotificationSink
#ifdef __GNUC__
#warning COM interfaces layout in this header has not been verified.
#warning COM interfaces with incorrect layout may not work at all.
__MINGW_BROKEN_INTERFACE(INTERFACE)
#endif
DECLARE_INTERFACE_(IDot11AdHocNetworkNotificationSink,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDot11AdHocNetworkNotificationSink methods */
    STDMETHOD_(HRESULT,OnStatusChange)(THIS_ DOT11_ADHOC_NETWORK_CONNECTION_STATUS eStatus) PURE;
    STDMETHOD_(HRESULT,OnConnectFail)(THIS_ DOT11_ADHOC_CONNECT_FAIL_REASON eFailReason) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IDot11AdHocNetworkNotificationSink_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDot11AdHocNetworkNotificationSink_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDot11AdHocNetworkNotificationSink_Release(This) (This)->lpVtbl->Release(This)
#define IDot11AdHocNetworkNotificationSink_OnStatusChange(This,eStatus) (This)->lpVtbl->OnStatusChange(This,eStatus)
#define IDot11AdHocNetworkNotificationSink_OnConnectFail(This,eFailReason) (This)->lpVtbl->OnConnectFail(This,eFailReason)
#endif /*COBJMACROS*/

#undef  INTERFACE
#define INTERFACE IDot11AdHocSecuritySettings
#ifdef __GNUC__
#warning COM interfaces layout in this header has not been verified.
#warning COM interfaces with incorrect layout may not work at all.
__MINGW_BROKEN_INTERFACE(INTERFACE)
#endif
DECLARE_INTERFACE_(IDot11AdHocSecuritySettings,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IDot11AdHocSecuritySettings methods */
    STDMETHOD_(HRESULT,GetDot11AuthAlgorithm)(THIS_ DOT11_ADHOC_AUTH_ALGORITHM *pAuth) PURE;
    STDMETHOD_(HRESULT,GetDot11CipherAlgorithm)(THIS_ DOT11_ADHOC_CIPHER_ALGORITHM *pCipher) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IDot11AdHocSecuritySettings_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IDot11AdHocSecuritySettings_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IDot11AdHocSecuritySettings_Release(This) (This)->lpVtbl->Release(This)
#define IDot11AdHocSecuritySettings_GetDot11AuthAlgorithm(This,pAuth) (This)->lpVtbl->GetDot11AuthAlgorithm(This,pAuth)
#define IDot11AdHocSecuritySettings_GetDot11CipherAlgorithm(This,pCipher) (This)->lpVtbl->GetDot11CipherAlgorithm(This,pCipher)
#endif /*COBJMACROS*/

#undef  INTERFACE
#define INTERFACE IEnumDot11AdHocInterfaces
#ifdef __GNUC__
#warning COM interfaces layout in this header has not been verified.
#warning COM interfaces with incorrect layout may not work at all.
__MINGW_BROKEN_INTERFACE(INTERFACE)
#endif
DECLARE_INTERFACE_(IEnumDot11AdHocInterfaces,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IEnumDot11AdHocInterfaces methods */
    STDMETHOD_(HRESULT,Next)(THIS_ ULONG cElt,IDot11AdHocInterface **rgElt,ULONG *pcEltFetched) PURE;
    STDMETHOD_(HRESULT,Skip)(THIS_ ULONG cElt) PURE;
    STDMETHOD_(HRESULT,Reset)(THIS) PURE;
    STDMETHOD_(HRESULT,Clone)(THIS_ IEnumDot11AdHocInterfaces **ppEnum) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IEnumDot11AdHocInterfaces_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumDot11AdHocInterfaces_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumDot11AdHocInterfaces_Release(This) (This)->lpVtbl->Release(This)
#define IEnumDot11AdHocInterfaces_Next(This,cElt,rgElt,pcEltFetched) (This)->lpVtbl->Next(This,cElt,rgElt,pcEltFetched)
#define IEnumDot11AdHocInterfaces_Skip(This,cElt) (This)->lpVtbl->Skip(This,cElt)
#define IEnumDot11AdHocInterfaces_Reset() (This)->lpVtbl->Reset(This)
#define IEnumDot11AdHocInterfaces_Clone(This,ppEnum) (This)->lpVtbl->Clone(This,ppEnum)
#endif /*COBJMACROS*/

#undef  INTERFACE
#define INTERFACE IEnumDot11AdHocNetworks
#ifdef __GNUC__
#warning COM interfaces layout in this header has not been verified.
#warning COM interfaces with incorrect layout may not work at all.
__MINGW_BROKEN_INTERFACE(INTERFACE)
#endif
DECLARE_INTERFACE_(IEnumDot11AdHocNetworks,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IEnumDot11AdHocNetworks methods */
    STDMETHOD_(HRESULT,Next)(THIS_ ULONG cElt,IDot11AdHocNetwork **rgElt,ULONG *pcEltFetched) PURE;
    STDMETHOD_(HRESULT,Skip)(THIS_ ULONG cElt) PURE;
    STDMETHOD_(HRESULT,Reset)(THIS) PURE;
    STDMETHOD_(HRESULT,Clone)(THIS_ IEnumDot11AdHocNetworks **ppEnum) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IEnumDot11AdHocNetworks_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumDot11AdHocNetworks_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumDot11AdHocNetworks_Release(This) (This)->lpVtbl->Release(This)
#define IEnumDot11AdHocNetworks_Next(This,cElt,rgElt,pcEltFetched) (This)->lpVtbl->Next(This,cElt,rgElt,pcEltFetched)
#define IEnumDot11AdHocNetworks_Skip(This,cElt) (This)->lpVtbl->Skip(This,cElt)
#define IEnumDot11AdHocNetworks_Reset() (This)->lpVtbl->Reset(This)
#define IEnumDot11AdHocNetworks_Clone(This,ppEnum) (This)->lpVtbl->Clone(This,ppEnum)
#endif /*COBJMACROS*/

#undef  INTERFACE
#define INTERFACE IEnumDot11AdHocSecuritySettings
#ifdef __GNUC__
#warning COM interfaces layout in this header has not been verified.
#warning COM interfaces with incorrect layout may not work at all.
__MINGW_BROKEN_INTERFACE(INTERFACE)
#endif
DECLARE_INTERFACE_(IEnumDot11AdHocSecuritySettings,IUnknown)
{
    BEGIN_INTERFACE

    /* IUnknown methods */
    STDMETHOD(QueryInterface)(THIS_ REFIID riid, void **ppvObject) PURE;
    STDMETHOD_(ULONG, AddRef)(THIS) PURE;
    STDMETHOD_(ULONG, Release)(THIS) PURE;

    /* IEnumDot11AdHocSecuritySettings methods */
    STDMETHOD_(HRESULT,Next)(THIS_ ULONG cElt,IDot11AdHocSecuritySettings **rgElt,ULONG *pcEltFetched) PURE;
    STDMETHOD_(HRESULT,Skip)(THIS_ ULONG cElt) PURE;
    STDMETHOD_(HRESULT,Reset)(THIS) PURE;
    STDMETHOD_(HRESULT,Clone)(THIS_ IEnumDot11AdHocSecuritySettings **ppEnum) PURE;

    END_INTERFACE
};
#ifdef COBJMACROS
#define IEnumDot11AdHocSecuritySettings_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IEnumDot11AdHocSecuritySettings_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IEnumDot11AdHocSecuritySettings_Release(This) (This)->lpVtbl->Release(This)
#define IEnumDot11AdHocSecuritySettings_Next(This,cElt,rgElt,pcEltFetched) (This)->lpVtbl->Next(This,cElt,rgElt,pcEltFetched)
#define IEnumDot11AdHocSecuritySettings_Skip(This,cElt) (This)->lpVtbl->Skip(This,cElt)
#define IEnumDot11AdHocSecuritySettings_Reset() (This)->lpVtbl->Reset(This)
#define IEnumDot11AdHocSecuritySettings_Clone(This,ppEnum) (This)->lpVtbl->Clone(This,ppEnum)
#endif /*COBJMACROS*/

#endif /*(_WIN32_WINNT >= 0x0600)*/
#endif /*_INC_ADHOC*/
                                                                                                                                                                                                                                                                                                                                                                                                                                                       usr/share/mingw-w64/include/admex.h                                                                 0100644 0000000 0000000 00000025610 12404413022 015605  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif

#ifndef __admex_h__
#define __admex_h__

#ifndef __IMSAdminReplication_FWD_DEFINED__
#define __IMSAdminReplication_FWD_DEFINED__
typedef struct IMSAdminReplication IMSAdminReplication;
#endif

#ifndef __IMSAdminCryptoCapabilities_FWD_DEFINED__
#define __IMSAdminCryptoCapabilities_FWD_DEFINED__
typedef struct IMSAdminCryptoCapabilities IMSAdminCryptoCapabilities;
#endif

#include "unknwn.h"
#include "objidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C"{
#endif

#ifndef __MIDL_user_allocate_free_DEFINED__
#define __MIDL_user_allocate_free_DEFINED__
  void *__RPC_API MIDL_user_allocate(size_t);
  void __RPC_API MIDL_user_free(void *);
#endif

#ifndef _ADMEX_IADM_
#define _ADMEX_IADM_
  DEFINE_GUID(IID_IMSAdminReplication,0xc804d980,0xebec,0x11d0,0xa6,0xa0,0x0,0xa0,0xc9,0x22,0xe7,0x52);
  DEFINE_GUID(IID_IMSAdminCryptoCapabilities,0x78b64540,0xf26d,0x11d0,0xa6,0xa3,0x0,0xa0,0xc9,0x22,0xe7,0x52);
  DEFINE_GUID(CLSID_MSCryptoAdmEx,0x9f0bd3a0,0xec01,0x11d0,0xa6,0xa0,0x0,0xa0,0xc9,0x22,0xe7,0x52);

  extern RPC_IF_HANDLE __MIDL_itf_admex_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_admex_0000_v0_0_s_ifspec;

#ifndef __IMSAdminReplication_INTERFACE_DEFINED__
#define __IMSAdminReplication_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IMSAdminReplication;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IMSAdminReplication : public IUnknown {
  public:
    virtual HRESULT WINAPI GetSignature(DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize) = 0;
    virtual HRESULT WINAPI Propagate(DWORD dwBufferSize,unsigned char *pszBuffer) = 0;
    virtual HRESULT WINAPI Propagate2(DWORD dwBufferSize,unsigned char *pszBuffer,DWORD dwSignatureMismatch) = 0;
    virtual HRESULT WINAPI Serialize(DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize) = 0;
    virtual HRESULT WINAPI DeSerialize(DWORD dwBufferSize,unsigned char *pbBuffer) = 0;
  };
#else
  typedef struct IMSAdminReplicationVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IMSAdminReplication *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IMSAdminReplication *This);
      ULONG (WINAPI *Release)(IMSAdminReplication *This);
      HRESULT (WINAPI *GetSignature)(IMSAdminReplication *This,DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize);
      HRESULT (WINAPI *Propagate)(IMSAdminReplication *This,DWORD dwBufferSize,unsigned char *pszBuffer);
      HRESULT (WINAPI *Propagate2)(IMSAdminReplication *This,DWORD dwBufferSize,unsigned char *pszBuffer,DWORD dwSignatureMismatch);
      HRESULT (WINAPI *Serialize)(IMSAdminReplication *This,DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize);
      HRESULT (WINAPI *DeSerialize)(IMSAdminReplication *This,DWORD dwBufferSize,unsigned char *pbBuffer);
    END_INTERFACE
  } IMSAdminReplicationVtbl;
  struct IMSAdminReplication {
    CONST_VTBL struct IMSAdminReplicationVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IMSAdminReplication_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMSAdminReplication_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMSAdminReplication_Release(This) (This)->lpVtbl->Release(This)
#define IMSAdminReplication_GetSignature(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize) (This)->lpVtbl->GetSignature(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize)
#define IMSAdminReplication_Propagate(This,dwBufferSize,pszBuffer) (This)->lpVtbl->Propagate(This,dwBufferSize,pszBuffer)
#define IMSAdminReplication_Propagate2(This,dwBufferSize,pszBuffer,dwSignatureMismatch) (This)->lpVtbl->Propagate2(This,dwBufferSize,pszBuffer,dwSignatureMismatch)
#define IMSAdminReplication_Serialize(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize) (This)->lpVtbl->Serialize(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize)
#define IMSAdminReplication_DeSerialize(This,dwBufferSize,pbBuffer) (This)->lpVtbl->DeSerialize(This,dwBufferSize,pbBuffer)
#endif
#endif

  HRESULT WINAPI IMSAdminReplication_GetSignature_Proxy(IMSAdminReplication *This,DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize);
  void __RPC_STUB IMSAdminReplication_GetSignature_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IMSAdminReplication_Propagate_Proxy(IMSAdminReplication *This,DWORD dwBufferSize,unsigned char *pszBuffer);
  void __RPC_STUB IMSAdminReplication_Propagate_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IMSAdminReplication_Propagate2_Proxy(IMSAdminReplication *This,DWORD dwBufferSize,unsigned char *pszBuffer,DWORD dwSignatureMismatch);
  void __RPC_STUB IMSAdminReplication_Propagate2_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IMSAdminReplication_Serialize_Proxy(IMSAdminReplication *This,DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize);
  void __RPC_STUB IMSAdminReplication_Serialize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IMSAdminReplication_DeSerialize_Proxy(IMSAdminReplication *This,DWORD dwBufferSize,unsigned char *pbBuffer);
  void __RPC_STUB IMSAdminReplication_DeSerialize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

  extern RPC_IF_HANDLE __MIDL_itf_admex_0255_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_admex_0255_v0_0_s_ifspec;

#ifndef __IMSAdminCryptoCapabilities_INTERFACE_DEFINED__
#define __IMSAdminCryptoCapabilities_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IMSAdminCryptoCapabilities;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IMSAdminCryptoCapabilities : public IUnknown {
  public:
    virtual HRESULT WINAPI GetProtocols(DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize) = 0;
    virtual HRESULT WINAPI GetMaximumCipherStrength(LPDWORD pdwMaximumCipherStrength) = 0;
    virtual HRESULT WINAPI GetRootCertificates(DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize) = 0;
    virtual HRESULT WINAPI GetSupportedAlgs(DWORD dwBufferSize,DWORD *pbBuffer,DWORD *pdwMDRequiredBufferSize) = 0;
    virtual HRESULT WINAPI SetCAList(DWORD dwBufferSize,unsigned char *pbBuffer) = 0;
  };
#else
  typedef struct IMSAdminCryptoCapabilitiesVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IMSAdminCryptoCapabilities *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IMSAdminCryptoCapabilities *This);
      ULONG (WINAPI *Release)(IMSAdminCryptoCapabilities *This);
      HRESULT (WINAPI *GetProtocols)(IMSAdminCryptoCapabilities *This,DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize);
      HRESULT (WINAPI *GetMaximumCipherStrength)(IMSAdminCryptoCapabilities *This,LPDWORD pdwMaximumCipherStrength);
      HRESULT (WINAPI *GetRootCertificates)(IMSAdminCryptoCapabilities *This,DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize);
      HRESULT (WINAPI *GetSupportedAlgs)(IMSAdminCryptoCapabilities *This,DWORD dwBufferSize,DWORD *pbBuffer,DWORD *pdwMDRequiredBufferSize);
      HRESULT (WINAPI *SetCAList)(IMSAdminCryptoCapabilities *This,DWORD dwBufferSize,unsigned char *pbBuffer);
    END_INTERFACE
  } IMSAdminCryptoCapabilitiesVtbl;
  struct IMSAdminCryptoCapabilities {
    CONST_VTBL struct IMSAdminCryptoCapabilitiesVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IMSAdminCryptoCapabilities_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IMSAdminCryptoCapabilities_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IMSAdminCryptoCapabilities_Release(This) (This)->lpVtbl->Release(This)
#define IMSAdminCryptoCapabilities_GetProtocols(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize) (This)->lpVtbl->GetProtocols(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize)
#define IMSAdminCryptoCapabilities_GetMaximumCipherStrength(This,pdwMaximumCipherStrength) (This)->lpVtbl->GetMaximumCipherStrength(This,pdwMaximumCipherStrength)
#define IMSAdminCryptoCapabilities_GetRootCertificates(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize) (This)->lpVtbl->GetRootCertificates(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize)
#define IMSAdminCryptoCapabilities_GetSupportedAlgs(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize) (This)->lpVtbl->GetSupportedAlgs(This,dwBufferSize,pbBuffer,pdwMDRequiredBufferSize)
#define IMSAdminCryptoCapabilities_SetCAList(This,dwBufferSize,pbBuffer) (This)->lpVtbl->SetCAList(This,dwBufferSize,pbBuffer)
#endif
#endif

  HRESULT WINAPI IMSAdminCryptoCapabilities_GetProtocols_Proxy(IMSAdminCryptoCapabilities *This,DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize);
  void __RPC_STUB IMSAdminCryptoCapabilities_GetProtocols_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IMSAdminCryptoCapabilities_GetMaximumCipherStrength_Proxy(IMSAdminCryptoCapabilities *This,LPDWORD pdwMaximumCipherStrength);
  void __RPC_STUB IMSAdminCryptoCapabilities_GetMaximumCipherStrength_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IMSAdminCryptoCapabilities_GetRootCertificates_Proxy(IMSAdminCryptoCapabilities *This,DWORD dwBufferSize,unsigned char *pbBuffer,DWORD *pdwMDRequiredBufferSize);
  void __RPC_STUB IMSAdminCryptoCapabilities_GetRootCertificates_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IMSAdminCryptoCapabilities_GetSupportedAlgs_Proxy(IMSAdminCryptoCapabilities *This,DWORD dwBufferSize,DWORD *pbBuffer,DWORD *pdwMDRequiredBufferSize);
  void __RPC_STUB IMSAdminCryptoCapabilities_GetSupportedAlgs_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IMSAdminCryptoCapabilities_SetCAList_Proxy(IMSAdminCryptoCapabilities *This,DWORD dwBufferSize,unsigned char *pbBuffer);
  void __RPC_STUB IMSAdminCryptoCapabilities_SetCAList_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif
#endif

  extern RPC_IF_HANDLE __MIDL_itf_admex_0256_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_admex_0256_v0_0_s_ifspec;

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                        usr/share/mingw-w64/include/adoctint.h                                                              0100644 0000000 0000000 00000300743 12404413022 016317  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#ifndef _ADOCTINT_H_
#define _ADOCTINT_H_

#ifndef _INC_TCHAR
#include <tchar.h>
#endif

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of rpcndr.h header.
#endif

#ifndef __adocat_h__
#define __adocat_h__

#ifndef ___ADOCollection_FWD_DEFINED__
#define ___ADOCollection_FWD_DEFINED__
typedef interface _ADOADOCollection _ADOCollection;
#endif

#ifndef ___ADODynaCollection_FWD_DEFINED__
#define ___ADODynaCollection_FWD_DEFINED__
typedef interface _ADODynaADOCollection _ADODynaCollection;
#endif

#ifndef ___Catalog_FWD_DEFINED__
#define ___Catalog_FWD_DEFINED__
typedef interface _ADOCatalog _Catalog;
#endif

#ifndef ___Table_FWD_DEFINED__
#define ___Table_FWD_DEFINED__
typedef interface _ADOTable _Table;
#endif

#ifndef ___Group25_FWD_DEFINED__
#define ___Group25_FWD_DEFINED__
typedef interface _Group25 _Group25;
#endif

#ifndef ___Group_FWD_DEFINED__
#define ___Group_FWD_DEFINED__
typedef interface _ADOGroup _Group;
#endif

#ifndef ___User25_FWD_DEFINED__
#define ___User25_FWD_DEFINED__
typedef interface _User25 _User25;
#endif

#ifndef ___User_FWD_DEFINED__
#define ___User_FWD_DEFINED__
typedef interface _ADOUser _User;
#endif

#ifndef ___Column_FWD_DEFINED__
#define ___Column_FWD_DEFINED__
typedef interface _ADOColumn _Column;
#endif

#ifndef ___Index_FWD_DEFINED__
#define ___Index_FWD_DEFINED__
typedef interface _ADOIndex _Index;
#endif

#ifndef ___Key_FWD_DEFINED__
#define ___Key_FWD_DEFINED__
typedef interface _ADOKey _Key;
#endif

#ifndef __View_FWD_DEFINED__
#define __View_FWD_DEFINED__
typedef interface ADOView View;
#endif

#ifndef __Procedure_FWD_DEFINED__
#define __Procedure_FWD_DEFINED__
typedef interface ADOProcedure Procedure;
#endif

#ifndef __Catalog_FWD_DEFINED__
#define __Catalog_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOCatalog Catalog;
#else
typedef struct ADOCatalog Catalog;
#endif
#endif

#ifndef __Table_FWD_DEFINED__
#define __Table_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOTable Table;
#else
typedef struct ADOTable Table;
#endif
#endif

#ifndef __Property_FWD_DEFINED__
#define __Property_FWD_DEFINED__
typedef interface ADOProperty Property;
#endif

#ifndef __Group_FWD_DEFINED__
#define __Group_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOGroup Group;
#else
typedef struct ADOGroup Group;
#endif
#endif

#ifndef __User_FWD_DEFINED__
#define __User_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOUser User;
#else
typedef struct ADOUser User;
#endif
#endif
#ifndef __Column_FWD_DEFINED__
#define __Column_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOColumn Column;
#else
typedef struct ADOColumn Column;
#endif
#endif
#ifndef __Index_FWD_DEFINED__
#define __Index_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOIndex Index;
#else
typedef struct ADOIndex Index;
#endif
#endif
#ifndef __Key_FWD_DEFINED__
#define __Key_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOKey Key;
#else
typedef struct ADOKey Key;
#endif
#endif
#ifndef __Tables_FWD_DEFINED__
#define __Tables_FWD_DEFINED__
typedef interface ADOTables Tables;
#endif

#ifndef __Columns_FWD_DEFINED__
#define __Columns_FWD_DEFINED__
typedef interface ADOColumns Columns;
#endif

#ifndef __Procedures_FWD_DEFINED__
#define __Procedures_FWD_DEFINED__
typedef interface ADOProcedures Procedures;
#endif

#ifndef __Views_FWD_DEFINED__
#define __Views_FWD_DEFINED__
typedef interface ADOViews Views;
#endif

#ifndef __Indexes_FWD_DEFINED__
#define __Indexes_FWD_DEFINED__
typedef interface ADOIndexes Indexes;
#endif

#ifndef __Keys_FWD_DEFINED__
#define __Keys_FWD_DEFINED__
typedef interface ADOKeys Keys;
#endif

#ifndef __Users_FWD_DEFINED__
#define __Users_FWD_DEFINED__
typedef interface ADOUsers Users;
#endif

#ifndef __Groups_FWD_DEFINED__
#define __Groups_FWD_DEFINED__
typedef interface ADOGroups Groups;
#endif
#ifndef __Properties_FWD_DEFINED__
#define __Properties_FWD_DEFINED__
typedef interface ADOProperties Properties;
#endif

#include "oaidl.h"
#include "ocidl.h"

#ifdef __cplusplus
extern "C" {
#endif

  typedef enum RuleEnum {
    adRINone = 0,
    adRICascade = 1,
    adRISetNull = 2,
    adRISetDefault = 3
  } RuleEnum;

  typedef enum KeyTypeEnum {
    adKeyPrimary = 1,
    adKeyForeign = 2,
    adKeyUnique = 3
  } KeyTypeEnum;

  typedef enum ActionEnum {
    adAccessGrant = 1,
    adAccessSet = 2,
    adAccessDeny = 3,
    adAccessRevoke = 4
  } ActionEnum;

  typedef enum ColumnAttributesEnum {
    adColFixed = 1,
    adColNullable = 2
  } ColumnAttributesEnum;

  typedef enum SortOrderEnum {
    adSortAscending = 1,
    adSortDescending = 2
  } SortOrderEnum;

  typedef enum RightsEnum {
    adRightNone = __MSABI_LONG(0),
    adRightDrop = __MSABI_LONG(0x100),
    adRightExclusive = __MSABI_LONG(0x200),
    adRightReadDesign = __MSABI_LONG(0x400),
    adRightWriteDesign = __MSABI_LONG(0x800),
    adRightWithGrant = __MSABI_LONG(0x1000),
    adRightReference = __MSABI_LONG(0x2000),
    adRightCreate = __MSABI_LONG(0x4000),
    adRightInsert = __MSABI_LONG(0x8000),
    adRightDelete = __MSABI_LONG(0x10000),
    adRightReadPermissions = __MSABI_LONG(0x20000),
    adRightWritePermissions = __MSABI_LONG(0x40000),
    adRightWriteOwner = __MSABI_LONG(0x80000),
    adRightMaximumAllowed = __MSABI_LONG(0x2000000),
    adRightFull = __MSABI_LONG(0x10000000),
    adRightExecute = __MSABI_LONG(0x20000000),
    adRightUpdate = __MSABI_LONG(0x40000000),
    adRightRead = __MSABI_LONG(0x80000000)
  } RightsEnum;

  typedef
#ifdef _ADOINT_H_
  class dummy dummy;
#else
  enum DataTypeEnum {
    adEmpty = 0,
    adTinyInt = 16,
    adSmallInt = 2,
    adInteger = 3,
    adBigInt = 20,
    adUnsignedTinyInt = 17,
    adUnsignedSmallInt = 18,
    adUnsignedInt = 19,
    adUnsignedBigInt = 21,
    adSingle = 4,
    adDouble = 5,
    adCurrency = 6,
    adDecimal = 14,
    adNumeric = 131,
    adBoolean = 11,
    adError = 10,
    adUserDefined = 132,
    adVariant = 12,
    adIDispatch = 9,
    adIUnknown = 13,
    adGUID = 72,
    adDate = 7,
    adDBDate = 133,
    adDBTime = 134,
    adDBTimeStamp = 135,
    adBSTR = 8,
    adChar = 129,
    adVarChar = 200,
    adLongVarChar = 201,
    adWChar = 130,
    adVarWChar = 202,
    adLongVarWChar = 203,
    adBinary = 128,
    adVarBinary = 204,
    adLongVarBinary = 205,
    adChapter = 136,
    adFileTime = 64,
    adPropVariant = 138,
    adVarNumeric = 139
  } DataTypeEnum;
#endif

  typedef enum AllowNullsEnum {
    adIndexNullsAllow = 0,
    adIndexNullsDisallow = 1,
    adIndexNullsIgnore = 2,
    adIndexNullsIgnoreAny = 4
  } AllowNullsEnum;

  typedef enum ObjectTypeEnum {
    adPermObjProviderSpecific = -1,
    adPermObjTable = 1,
    adPermObjColumn = 2,
    adPermObjDatabase = 3,
    adPermObjProcedure = 4,
    adPermObjView = 5
  } ObjectTypeEnum;

  typedef enum InheritTypeEnum {
    adInheritNone = 0,
    adInheritObjects = 1,
    adInheritContainers = 2,
    adInheritBoth = 3,
    adInheritNoPropogate = 4
  } InheritTypeEnum;

  extern RPC_IF_HANDLE __MIDL_itf_adocat_0000_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_adocat_0000_0000_v0_0_s_ifspec;

#ifndef __ADOX_LIBRARY_DEFINED__
#define __ADOX_LIBRARY_DEFINED__

  EXTERN_C const IID LIBID_ADOX;

#ifndef ___ADOCollection_INTERFACE_DEFINED__
#define ___ADOCollection_INTERFACE_DEFINED__

  EXTERN_C const IID IID__ADOCollection;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000512-0000-0010-8000-00AA006D2EA4")
  _ADOADOCollection : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Count (long *c) = 0;
    virtual HRESULT STDMETHODCALLTYPE _NewEnum (IUnknown **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Refresh (void) = 0;
  };
#else
  typedef struct _ADOCollectionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOADOCollection *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOADOCollection *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOADOCollection *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOADOCollection *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOADOCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOADOCollection *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOADOCollection *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (_ADOADOCollection *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (_ADOADOCollection *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (_ADOADOCollection *This);
    END_INTERFACE
  } _ADOCollectionVtbl;
  interface _ADOCollection {
    CONST_VTBL struct _ADOCollectionVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _ADOCollection_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _ADOCollection_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _ADOCollection_Release(This) ((This)->lpVtbl ->Release (This))
#define _ADOCollection_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _ADOCollection_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _ADOCollection_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _ADOCollection_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Collection_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define _ADOCollection__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define _ADOCollection_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#endif

#endif
#endif

#ifndef ___ADODynaCollection_INTERFACE_DEFINED__
#define ___ADODynaCollection_INTERFACE_DEFINED__

  EXTERN_C const IID IID__ADODynaCollection;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000513-0000-0010-8000-00AA006D2EA4")
  _ADODynaADOCollection : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE Append (IDispatch *Object) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Item) = 0;
  };
#else
  typedef struct _ADODynaCollectionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADODynaADOCollection *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADODynaADOCollection *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADODynaADOCollection *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADODynaADOCollection *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADODynaADOCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADODynaADOCollection *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADODynaADOCollection *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (_ADODynaADOCollection *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (_ADODynaADOCollection *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (_ADODynaADOCollection *This);
    HRESULT (STDMETHODCALLTYPE *Append) (_ADODynaADOCollection *This, IDispatch *Object);
    HRESULT (STDMETHODCALLTYPE *Delete) (_ADODynaADOCollection *This, VARIANT Item);
    END_INTERFACE
  } _ADODynaCollectionVtbl;

  interface _ADODynaCollection {
    CONST_VTBL struct _ADODynaCollectionVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _ADODynaCollection_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _ADODynaCollection_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _ADODynaCollection_Release(This) ((This)->lpVtbl ->Release (This))
#define _ADODynaCollection_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _ADODynaCollection_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _ADODynaCollection_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _ADODynaCollection_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _DynaCollection_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define _ADODynaCollection__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define _ADODynaCollection_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define _ADODynaCollection_Append(This, Object) ((This)->lpVtbl ->Append (This, Object))
#define _ADODynaCollection_Delete(This, Item) ((This)->lpVtbl ->Delete (This, Item))
#endif

#endif
#endif

#ifndef ___Catalog_INTERFACE_DEFINED__
#define ___Catalog_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Catalog;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000603-0000-0010-8000-00AA006D2EA4")
  _ADOCatalog : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Tables (ADOTables **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection (VARIANT *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ActiveConnection (VARIANT newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ActiveConnection (IDispatch *pCon) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Procedures (ADOProcedures **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Views (ADOViews **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Groups (ADOGroups **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Users (ADOUsers **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Create (BSTR ConnectString, VARIANT *Connection) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetObjectOwner (BSTR ObjectName, ObjectTypeEnum ObjectType, VARIANT ObjectTypeId, BSTR *OwnerName) = 0;
    virtual HRESULT STDMETHODCALLTYPE SetObjectOwner (BSTR ObjectName, ObjectTypeEnum ObjectType, BSTR UserName, VARIANT ObjectTypeId) = 0;
  };
#else
  typedef struct _CatalogVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOCatalog *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOCatalog *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOCatalog *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOCatalog *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOCatalog *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOCatalog *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOCatalog *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Tables) (_ADOCatalog *This, ADOTables **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (_ADOCatalog *This, VARIANT *pVal);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (_ADOCatalog *This, VARIANT newVal);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveConnection) (_ADOCatalog *This, IDispatch *pCon);
    HRESULT (STDMETHODCALLTYPE *get_Procedures) (_ADOCatalog *This, ADOProcedures **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Views) (_ADOCatalog *This, ADOViews **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Groups) (_ADOCatalog *This, ADOGroups **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Users) (_ADOCatalog *This, ADOUsers **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Create) (_ADOCatalog *This, BSTR ConnectString, VARIANT *Connection);
    HRESULT (STDMETHODCALLTYPE *GetObjectOwner) (_ADOCatalog *This, BSTR ObjectName, ObjectTypeEnum ObjectType, VARIANT ObjectTypeId, BSTR *OwnerName);
    HRESULT (STDMETHODCALLTYPE *SetObjectOwner) (_ADOCatalog *This, BSTR ObjectName, ObjectTypeEnum ObjectType, BSTR UserName, VARIANT ObjectTypeId);
    END_INTERFACE
  } _CatalogVtbl;

  interface _Catalog {
    CONST_VTBL struct _CatalogVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _Catalog_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Catalog_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Catalog_Release(This) ((This)->lpVtbl ->Release (This))
#define _Catalog_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Catalog_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Catalog_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Catalog_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Catalog_get_Tables(This, ppvObject) ((This)->lpVtbl ->get_Tables (This, ppvObject))
#define _Catalog_get_ActiveConnection(This, pVal) ((This)->lpVtbl ->get_ActiveConnection (This, pVal))
#define _Catalog_put_ActiveConnection(This, newVal) ((This)->lpVtbl ->put_ActiveConnection (This, newVal))
#define _Catalog_putref_ActiveConnection(This, pCon) ((This)->lpVtbl ->putref_ActiveConnection (This, pCon))
#define _Catalog_get_Procedures(This, ppvObject) ((This)->lpVtbl ->get_Procedures (This, ppvObject))
#define _Catalog_get_Views(This, ppvObject) ((This)->lpVtbl ->get_Views (This, ppvObject))
#define _Catalog_get_Groups(This, ppvObject) ((This)->lpVtbl ->get_Groups (This, ppvObject))
#define _Catalog_get_Users(This, ppvObject) ((This)->lpVtbl ->get_Users (This, ppvObject))
#define _Catalog_Create(This, ConnectString, Connection) ((This)->lpVtbl ->Create (This, ConnectString, Connection))
#define _Catalog_GetObjectOwner(This, ObjectName, ObjectType, ObjectTypeId, OwnerName) ((This)->lpVtbl ->GetObjectOwner (This, ObjectName, ObjectType, ObjectTypeId, OwnerName))
#define _Catalog_SetObjectOwner(This, ObjectName, ObjectType, UserName, ObjectTypeId) ((This)->lpVtbl ->SetObjectOwner (This, ObjectName, ObjectType, UserName, ObjectTypeId))
#endif

#endif
#endif

#ifndef ___Table_INTERFACE_DEFINED__
#define ___Table_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Table;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000610-0000-0010-8000-00AA006D2EA4")
  _ADOTable : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Columns (ADOColumns **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Name (BSTR newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Indexes (ADOIndexes **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Keys (ADOKeys **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (ADOProperties **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DateCreated (VARIANT *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DateModified (VARIANT *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ParentCatalog (_ADOCatalog **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ParentCatalog (_ADOCatalog *ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ParentCatalog (_ADOCatalog *ppvObject) = 0;
  };
#else
  typedef struct _TableVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOTable *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOTable *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOTable *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOTable *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOTable *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOTable *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOTable *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Columns) (_ADOTable *This, ADOColumns **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_ADOTable *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_ADOTable *This, BSTR newVal);
    HRESULT (STDMETHODCALLTYPE *get_Type) (_ADOTable *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *get_Indexes) (_ADOTable *This, ADOIndexes **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Keys) (_ADOTable *This, ADOKeys **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOTable *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_DateCreated) (_ADOTable *This, VARIANT *pVal);
    HRESULT (STDMETHODCALLTYPE *get_DateModified) (_ADOTable *This, VARIANT *pVal);
    HRESULT (STDMETHODCALLTYPE *get_ParentCatalog) (_ADOTable *This, _ADOCatalog **ppvObject);
    HRESULT (STDMETHODCALLTYPE *put_ParentCatalog) (_ADOTable *This, _ADOCatalog *ppvObject);
    HRESULT (STDMETHODCALLTYPE *putref_ParentADOCatalog) (_ADOTable *This, _ADOCatalog *ppvObject);
    END_INTERFACE
  } _TableVtbl;

  interface _Table {
    CONST_VTBL struct _TableVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _Table_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Table_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Table_Release(This) ((This)->lpVtbl ->Release (This))
#define _Table_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Table_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Table_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Table_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Table_get_Columns(This, ppvObject) ((This)->lpVtbl ->get_Columns (This, ppvObject))
#define _Table_get_Name(This, pVal) ((This)->lpVtbl ->get_Name (This, pVal))
#define _Table_put_Name(This, newVal) ((This)->lpVtbl ->put_Name (This, newVal))
#define _Table_get_Type(This, pVal) ((This)->lpVtbl ->get_Type (This, pVal))
#define _Table_get_Indexes(This, ppvObject) ((This)->lpVtbl ->get_Indexes (This, ppvObject))
#define _Table_get_Keys(This, ppvObject) ((This)->lpVtbl ->get_Keys (This, ppvObject))
#define _Table_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Table_get_DateCreated(This, pVal) ((This)->lpVtbl ->get_DateCreated (This, pVal))
#define _Table_get_DateModified(This, pVal) ((This)->lpVtbl ->get_DateModified (This, pVal))
#define _Table_get_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->get_ParentCatalog (This, ppvObject))
#define _Table_put_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->put_ParentCatalog (This, ppvObject))
#define _Table_putref_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->putref_ParentCatalog (This, ppvObject))
#endif

#endif
#endif

#ifndef ___Group25_INTERFACE_DEFINED__
#define ___Group25_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Group25;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000616-0000-0010-8000-00AA006D2EA4")
  _Group25 : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Name (BSTR newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetPermissions (VARIANT Name, ObjectTypeEnum ObjectType, VARIANT ObjectTypeId, RightsEnum *Rights) = 0;
    virtual HRESULT STDMETHODCALLTYPE SetPermissions (VARIANT Name, ObjectTypeEnum ObjectType, ActionEnum Action, RightsEnum Rights, InheritTypeEnum Inherit, VARIANT ObjectTypeId) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Users (ADOUsers **ppvObject) = 0;
  };
#else
  typedef struct _Group25Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_Group25 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_Group25 *This);
    ULONG (STDMETHODCALLTYPE *Release) (_Group25 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_Group25 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_Group25 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_Group25 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_Group25 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_Group25 *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_Group25 *This, BSTR newVal);
    HRESULT (STDMETHODCALLTYPE *GetPermissions) (_Group25 *This, VARIANT Name, ObjectTypeEnum ObjectType, VARIANT ObjectTypeId, RightsEnum *Rights);
    HRESULT (STDMETHODCALLTYPE *SetPermissions) (_Group25 *This, VARIANT Name, ObjectTypeEnum ObjectType, ActionEnum Action, RightsEnum Rights, InheritTypeEnum Inherit, VARIANT ObjectTypeId);
    HRESULT (STDMETHODCALLTYPE *get_Users) (_Group25 *This, ADOUsers **ppvObject);
    END_INTERFACE
  } _Group25Vtbl;

  interface _Group25 {
    CONST_VTBL struct _Group25Vtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _Group25_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Group25_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Group25_Release(This) ((This)->lpVtbl ->Release (This))
#define _Group25_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Group25_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Group25_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Group25_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Group25_get_Name(This, pVal) ((This)->lpVtbl ->get_Name (This, pVal))
#define _Group25_put_Name(This, newVal) ((This)->lpVtbl ->put_Name (This, newVal))
#define _Group25_GetPermissions(This, Name, ObjectType, ObjectTypeId, Rights) ((This)->lpVtbl ->GetPermissions (This, Name, ObjectType, ObjectTypeId, Rights))
#define _Group25_SetPermissions(This, Name, ObjectType, Action, Rights, Inherit, ObjectTypeId) ((This)->lpVtbl ->SetPermissions (This, Name, ObjectType, Action, Rights, Inherit, ObjectTypeId))
#define _Group25_get_Users(This, ppvObject) ((This)->lpVtbl ->get_Users (This, ppvObject))
#endif

#endif
#endif
#ifndef ___Group_INTERFACE_DEFINED__
#define ___Group_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Group;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000628-0000-0010-8000-00AA006D2EA4")
  _ADOGroup : public _Group25 {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Properties (ADOProperties **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ParentCatalog (_ADOCatalog **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ParentCatalog (_ADOCatalog *ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ParentCatalog (_ADOCatalog *ppvObject) = 0;
  };
#else
  typedef struct _GroupVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOGroup *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOGroup *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOGroup *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOGroup *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOGroup *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOGroup *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOGroup *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_ADOGroup *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_ADOGroup *This, BSTR newVal);
    HRESULT (STDMETHODCALLTYPE *GetPermissions) (_ADOGroup *This, VARIANT Name, ObjectTypeEnum ObjectType, VARIANT ObjectTypeId, RightsEnum *Rights);
    HRESULT (STDMETHODCALLTYPE *SetPermissions) (_ADOGroup *This, VARIANT Name, ObjectTypeEnum ObjectType, ActionEnum Action, RightsEnum Rights, InheritTypeEnum Inherit, VARIANT ObjectTypeId);
    HRESULT (STDMETHODCALLTYPE *get_Users) (_ADOGroup *This, ADOUsers **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOGroup *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ParentCatalog) (_ADOGroup *This, _ADOCatalog **ppvObject);
    HRESULT (STDMETHODCALLTYPE *put_ParentCatalog) (_ADOGroup *This, _ADOCatalog *ppvObject);
    HRESULT (STDMETHODCALLTYPE *putref_ParentADOCatalog) (_ADOGroup *This, _ADOCatalog *ppvObject);
    END_INTERFACE
  } _GroupVtbl;

  interface _Group {
    CONST_VTBL struct _GroupVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _Group_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Group_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Group_Release(This) ((This)->lpVtbl ->Release (This))
#define _Group_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Group_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Group_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Group_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Group_get_Name(This, pVal) ((This)->lpVtbl ->get_Name (This, pVal))
#define _Group_put_Name(This, newVal) ((This)->lpVtbl ->put_Name (This, newVal))
#define _Group_GetPermissions(This, Name, ObjectType, ObjectTypeId, Rights) ((This)->lpVtbl ->GetPermissions (This, Name, ObjectType, ObjectTypeId, Rights))
#define _Group_SetPermissions(This, Name, ObjectType, Action, Rights, Inherit, ObjectTypeId) ((This)->lpVtbl ->SetPermissions (This, Name, ObjectType, Action, Rights, Inherit, ObjectTypeId))
#define _Group_get_Users(This, ppvObject) ((This)->lpVtbl ->get_Users (This, ppvObject))
#define _Group_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Group_get_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->get_ParentCatalog (This, ppvObject))
#define _Group_put_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->put_ParentCatalog (This, ppvObject))
#define _Group_putref_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->putref_ParentCatalog (This, ppvObject))
#endif
#endif

#endif

#ifndef ___User25_INTERFACE_DEFINED__
#define ___User25_INTERFACE_DEFINED__

  EXTERN_C const IID IID__User25;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000619-0000-0010-8000-00AA006D2EA4")
  _User25 : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Name (BSTR newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetPermissions (VARIANT Name, ObjectTypeEnum ObjectType, VARIANT ObjectTypeId, RightsEnum *Rights) = 0;
    virtual HRESULT STDMETHODCALLTYPE SetPermissions (VARIANT Name, ObjectTypeEnum ObjectType, ActionEnum Action, RightsEnum Rights, InheritTypeEnum Inherit, VARIANT ObjectTypeId) = 0;
    virtual HRESULT STDMETHODCALLTYPE ChangePassword (BSTR OldPassword, BSTR NewPassword) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Groups (ADOGroups **ppvObject) = 0;
  };
#else
  typedef struct _User25Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_User25 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_User25 *This);
    ULONG (STDMETHODCALLTYPE *Release) (_User25 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_User25 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_User25 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_User25 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_User25 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_User25 *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_User25 *This, BSTR newVal);
    HRESULT (STDMETHODCALLTYPE *GetPermissions) (_User25 *This, VARIANT Name, ObjectTypeEnum ObjectType, VARIANT ObjectTypeId, RightsEnum *Rights);
    HRESULT (STDMETHODCALLTYPE *SetPermissions) (_User25 *This, VARIANT Name, ObjectTypeEnum ObjectType, ActionEnum Action, RightsEnum Rights, InheritTypeEnum Inherit, VARIANT ObjectTypeId);
    HRESULT (STDMETHODCALLTYPE *ChangePassword) (_User25 *This, BSTR OldPassword, BSTR NewPassword);
    HRESULT (STDMETHODCALLTYPE *get_Groups) (_User25 *This, ADOGroups **ppvObject);
    END_INTERFACE
  } _User25Vtbl;

  interface _User25 {
    CONST_VTBL struct _User25Vtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _User25_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _User25_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _User25_Release(This) ((This)->lpVtbl ->Release (This))
#define _User25_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _User25_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _User25_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _User25_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _User25_get_Name(This, pVal) ((This)->lpVtbl ->get_Name (This, pVal))
#define _User25_put_Name(This, newVal) ((This)->lpVtbl ->put_Name (This, newVal))
#define _User25_GetPermissions(This, Name, ObjectType, ObjectTypeId, Rights) ((This)->lpVtbl ->GetPermissions (This, Name, ObjectType, ObjectTypeId, Rights))
#define _User25_SetPermissions(This, Name, ObjectType, Action, Rights, Inherit, ObjectTypeId) ((This)->lpVtbl ->SetPermissions (This, Name, ObjectType, Action, Rights, Inherit, ObjectTypeId))
#define _User25_ChangePassword(This, OldPassword, NewPassword) ((This)->lpVtbl ->ChangePassword (This, OldPassword, NewPassword))
#define _User25_get_Groups(This, ppvObject) ((This)->lpVtbl ->get_Groups (This, ppvObject))
#endif

#endif
#endif

#ifndef ___User_INTERFACE_DEFINED__
#define ___User_INTERFACE_DEFINED__

  EXTERN_C const IID IID__User;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000627-0000-0010-8000-00AA006D2EA4")
  _ADOUser : public _User25 {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Properties (ADOProperties **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ParentCatalog (_ADOCatalog **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ParentCatalog (_ADOCatalog *ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ParentCatalog (_ADOCatalog *ppvObject) = 0;
  };
#else
  typedef struct _UserVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOUser *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOUser *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOUser *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOUser *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOUser *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOUser *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOUser *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_ADOUser *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_ADOUser *This, BSTR newVal);
    HRESULT (STDMETHODCALLTYPE *GetPermissions) (_ADOUser *This, VARIANT Name, ObjectTypeEnum ObjectType, VARIANT ObjectTypeId, RightsEnum *Rights);
    HRESULT (STDMETHODCALLTYPE *SetPermissions) (_ADOUser *This, VARIANT Name, ObjectTypeEnum ObjectType, ActionEnum Action, RightsEnum Rights, InheritTypeEnum Inherit, VARIANT ObjectTypeId);
    HRESULT (STDMETHODCALLTYPE *ChangePassword) (_ADOUser *This, BSTR OldPassword, BSTR NewPassword);
    HRESULT (STDMETHODCALLTYPE *get_Groups) (_ADOUser *This, ADOGroups **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOUser *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ParentCatalog) (_ADOUser *This, _ADOCatalog **ppvObject);
    HRESULT (STDMETHODCALLTYPE *put_ParentCatalog) (_ADOUser *This, _ADOCatalog *ppvObject);
    HRESULT (STDMETHODCALLTYPE *putref_ParentADOCatalog) (_ADOUser *This, _ADOCatalog *ppvObject);
    END_INTERFACE
  } _UserVtbl;

  interface _User {
    CONST_VTBL struct _UserVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _User_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _User_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _User_Release(This) ((This)->lpVtbl ->Release (This))
#define _User_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _User_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _User_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _User_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _User_get_Name(This, pVal) ((This)->lpVtbl ->get_Name (This, pVal))
#define _User_put_Name(This, newVal) ((This)->lpVtbl ->put_Name (This, newVal))
#define _User_GetPermissions(This, Name, ObjectType, ObjectTypeId, Rights) ((This)->lpVtbl ->GetPermissions (This, Name, ObjectType, ObjectTypeId, Rights))
#define _User_SetPermissions(This, Name, ObjectType, Action, Rights, Inherit, ObjectTypeId) ((This)->lpVtbl ->SetPermissions (This, Name, ObjectType, Action, Rights, Inherit, ObjectTypeId))
#define _User_ChangePassword(This, OldPassword, NewPassword) ((This)->lpVtbl ->ChangePassword (This, OldPassword, NewPassword))
#define _User_get_Groups(This, ppvObject) ((This)->lpVtbl ->get_Groups (This, ppvObject))
#define _User_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _User_get_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->get_ParentCatalog (This, ppvObject))
#define _User_put_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->put_ParentCatalog (This, ppvObject))
#define _User_putref_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->putref_ParentCatalog (This, ppvObject))
#endif

#endif
#endif

#ifndef ___Column_INTERFACE_DEFINED__
#define ___Column_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Column;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("0000061C-0000-0010-8000-00AA006D2EA4")
  _ADOColumn : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Name (BSTR newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (ColumnAttributesEnum *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Attributes (ColumnAttributesEnum newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DefinedSize (long *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_DefinedSize (long DefinedSize) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_NumericScale (BYTE *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_NumericScale (BYTE newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Precision (long *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Precision (long newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_RelatedColumn (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_RelatedColumn (BSTR newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_SortOrder (SortOrderEnum *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_SortOrder (SortOrderEnum newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (DataTypeEnum *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Type (DataTypeEnum newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (ADOProperties **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ParentCatalog (_ADOCatalog **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ParentCatalog (_ADOCatalog *ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ParentCatalog (_ADOCatalog *ppvObject) = 0;
  };
#else
  typedef struct _ColumnVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOColumn *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOColumn *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOColumn *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOColumn *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOColumn *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOColumn *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOColumn *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_ADOColumn *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_ADOColumn *This, BSTR newVal);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (_ADOColumn *This, ColumnAttributesEnum *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (_ADOColumn *This, ColumnAttributesEnum newVal);
    HRESULT (STDMETHODCALLTYPE *get_DefinedSize) (_ADOColumn *This, long *pVal);
    HRESULT (STDMETHODCALLTYPE *put_DefinedSize) (_ADOColumn *This, long DefinedSize);
    HRESULT (STDMETHODCALLTYPE *get_NumericScale) (_ADOColumn *This, BYTE *pVal);
    HRESULT (STDMETHODCALLTYPE *put_NumericScale) (_ADOColumn *This, BYTE newVal);
    HRESULT (STDMETHODCALLTYPE *get_Precision) (_ADOColumn *This, long *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Precision) (_ADOColumn *This, long newVal);
    HRESULT (STDMETHODCALLTYPE *get_RelatedColumn) (_ADOColumn *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *put_RelatedColumn) (_ADOColumn *This, BSTR newVal);
    HRESULT (STDMETHODCALLTYPE *get_SortOrder) (_ADOColumn *This, SortOrderEnum *pVal);
    HRESULT (STDMETHODCALLTYPE *put_SortOrder) (_ADOColumn *This, SortOrderEnum newVal);
    HRESULT (STDMETHODCALLTYPE *get_Type) (_ADOColumn *This, DataTypeEnum *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Type) (_ADOColumn *This, DataTypeEnum newVal);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOColumn *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ParentCatalog) (_ADOColumn *This, _ADOCatalog **ppvObject);
    HRESULT (STDMETHODCALLTYPE *put_ParentCatalog) (_ADOColumn *This, _ADOCatalog *ppvObject);
    HRESULT (STDMETHODCALLTYPE *putref_ParentADOCatalog) (_ADOColumn *This, _ADOCatalog *ppvObject);
    END_INTERFACE
  } _ColumnVtbl;

  interface _Column {
    CONST_VTBL struct _ColumnVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _Column_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Column_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Column_Release(This) ((This)->lpVtbl ->Release (This))
#define _Column_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Column_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Column_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Column_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Column_get_Name(This, pVal) ((This)->lpVtbl ->get_Name (This, pVal))
#define _Column_put_Name(This, newVal) ((This)->lpVtbl ->put_Name (This, newVal))
#define _Column_get_Attributes(This, pVal) ((This)->lpVtbl ->get_Attributes (This, pVal))
#define _Column_put_Attributes(This, newVal) ((This)->lpVtbl ->put_Attributes (This, newVal))
#define _Column_get_DefinedSize(This, pVal) ((This)->lpVtbl ->get_DefinedSize (This, pVal))
#define _Column_put_DefinedSize(This, DefinedSize) ((This)->lpVtbl ->put_DefinedSize (This, DefinedSize))
#define _Column_get_NumericScale(This, pVal) ((This)->lpVtbl ->get_NumericScale (This, pVal))
#define _Column_put_NumericScale(This, newVal) ((This)->lpVtbl ->put_NumericScale (This, newVal))
#define _Column_get_Precision(This, pVal) ((This)->lpVtbl ->get_Precision (This, pVal))
#define _Column_put_Precision(This, newVal) ((This)->lpVtbl ->put_Precision (This, newVal))
#define _Column_get_RelatedColumn(This, pVal) ((This)->lpVtbl ->get_RelatedColumn (This, pVal))
#define _Column_put_RelatedColumn(This, newVal) ((This)->lpVtbl ->put_RelatedColumn (This, newVal))
#define _Column_get_SortOrder(This, pVal) ((This)->lpVtbl ->get_SortOrder (This, pVal))
#define _Column_put_SortOrder(This, newVal) ((This)->lpVtbl ->put_SortOrder (This, newVal))
#define _Column_get_Type(This, pVal) ((This)->lpVtbl ->get_Type (This, pVal))
#define _Column_put_Type(This, newVal) ((This)->lpVtbl ->put_Type (This, newVal))
#define _Column_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Column_get_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->get_ParentCatalog (This, ppvObject))
#define _Column_put_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->put_ParentCatalog (This, ppvObject))
#define _Column_putref_ParentCatalog(This, ppvObject) ((This)->lpVtbl ->putref_ParentCatalog (This, ppvObject))
#endif

#endif
#endif

#ifndef ___Index_INTERFACE_DEFINED__
#define ___Index_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Index;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("0000061F-0000-0010-8000-00AA006D2EA4")
  _ADOIndex : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Name (BSTR newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Clustered (VARIANT_BOOL *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Clustered (VARIANT_BOOL newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_IndexNulls (AllowNullsEnum *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_IndexNulls (AllowNullsEnum newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_PrimaryKey (VARIANT_BOOL *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_PrimaryKey (VARIANT_BOOL newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Unique (VARIANT_BOOL *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Unique (VARIANT_BOOL newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Columns (ADOColumns **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (ADOProperties **ppvObject) = 0;
  };
#else
  typedef struct _IndexVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOIndex *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOIndex *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOIndex *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOIndex *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOIndex *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOIndex *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOIndex *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_ADOIndex *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_ADOIndex *This, BSTR newVal);
    HRESULT (STDMETHODCALLTYPE *get_Clustered) (_ADOIndex *This, VARIANT_BOOL *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Clustered) (_ADOIndex *This, VARIANT_BOOL newVal);
    HRESULT (STDMETHODCALLTYPE *get_IndexNulls) (_ADOIndex *This, AllowNullsEnum *pVal);
    HRESULT (STDMETHODCALLTYPE *put_IndexNulls) (_ADOIndex *This, AllowNullsEnum newVal);
    HRESULT (STDMETHODCALLTYPE *get_PrimaryKey) (_ADOIndex *This, VARIANT_BOOL *pVal);
    HRESULT (STDMETHODCALLTYPE *put_PrimaryKey) (_ADOIndex *This, VARIANT_BOOL newVal);
    HRESULT (STDMETHODCALLTYPE *get_Unique) (_ADOIndex *This, VARIANT_BOOL *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Unique) (_ADOIndex *This, VARIANT_BOOL newVal);
    HRESULT (STDMETHODCALLTYPE *get_Columns) (_ADOIndex *This, ADOColumns **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOIndex *This, ADOProperties **ppvObject);
    END_INTERFACE
  } _IndexVtbl;

  interface _Index {
    CONST_VTBL struct _IndexVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _Index_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Index_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Index_Release(This) ((This)->lpVtbl ->Release (This))
#define _Index_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Index_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Index_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Index_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Index_get_Name(This, pVal) ((This)->lpVtbl ->get_Name (This, pVal))
#define _Index_put_Name(This, newVal) ((This)->lpVtbl ->put_Name (This, newVal))
#define _Index_get_Clustered(This, pVal) ((This)->lpVtbl ->get_Clustered (This, pVal))
#define _Index_put_Clustered(This, newVal) ((This)->lpVtbl ->put_Clustered (This, newVal))
#define _Index_get_IndexNulls(This, pVal) ((This)->lpVtbl ->get_IndexNulls (This, pVal))
#define _Index_put_IndexNulls(This, newVal) ((This)->lpVtbl ->put_IndexNulls (This, newVal))
#define _Index_get_PrimaryKey(This, pVal) ((This)->lpVtbl ->get_PrimaryKey (This, pVal))
#define _Index_put_PrimaryKey(This, newVal) ((This)->lpVtbl ->put_PrimaryKey (This, newVal))
#define _Index_get_Unique(This, pVal) ((This)->lpVtbl ->get_Unique (This, pVal))
#define _Index_put_Unique(This, newVal) ((This)->lpVtbl ->put_Unique (This, newVal))
#define _Index_get_Columns(This, ppvObject) ((This)->lpVtbl ->get_Columns (This, ppvObject))
#define _Index_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#endif

#endif
#endif

#ifndef ___Key_INTERFACE_DEFINED__
#define ___Key_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Key;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000622-0000-0010-8000-00AA006D2EA4")
  _ADOKey : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Name (BSTR newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DeleteRule (RuleEnum *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_DeleteRule (RuleEnum newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (KeyTypeEnum *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Type (KeyTypeEnum newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_RelatedTable (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_RelatedTable (BSTR newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_UpdateRule (RuleEnum *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_UpdateRule (RuleEnum newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Columns (ADOColumns **ppvObject) = 0;
  };
#else
  typedef struct _KeyVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOKey *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOKey *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOKey *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOKey *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOKey *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOKey *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOKey *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_ADOKey *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_ADOKey *This, BSTR newVal);
    HRESULT (STDMETHODCALLTYPE *get_DeleteRule) (_ADOKey *This, RuleEnum *pVal);
    HRESULT (STDMETHODCALLTYPE *put_DeleteRule) (_ADOKey *This, RuleEnum newVal);
    HRESULT (STDMETHODCALLTYPE *get_Type) (_ADOKey *This, KeyTypeEnum *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Type) (_ADOKey *This, KeyTypeEnum newVal);
    HRESULT (STDMETHODCALLTYPE *get_RelatedTable) (_ADOKey *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *put_RelatedTable) (_ADOKey *This, BSTR newVal);
    HRESULT (STDMETHODCALLTYPE *get_UpdateRule) (_ADOKey *This, RuleEnum *pVal);
    HRESULT (STDMETHODCALLTYPE *put_UpdateRule) (_ADOKey *This, RuleEnum newVal);
    HRESULT (STDMETHODCALLTYPE *get_Columns) (_ADOKey *This, ADOColumns **ppvObject);
    END_INTERFACE
  } _KeyVtbl;

  interface _Key {
    CONST_VTBL struct _KeyVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define _Key_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Key_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Key_Release(This) ((This)->lpVtbl ->Release (This))
#define _Key_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Key_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Key_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Key_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Key_get_Name(This, pVal) ((This)->lpVtbl ->get_Name (This, pVal))
#define _Key_put_Name(This, newVal) ((This)->lpVtbl ->put_Name (This, newVal))
#define _Key_get_DeleteRule(This, pVal) ((This)->lpVtbl ->get_DeleteRule (This, pVal))
#define _Key_put_DeleteRule(This, newVal) ((This)->lpVtbl ->put_DeleteRule (This, newVal))
#define _Key_get_Type(This, pVal) ((This)->lpVtbl ->get_Type (This, pVal))
#define _Key_put_Type(This, newVal) ((This)->lpVtbl ->put_Type (This, newVal))
#define _Key_get_RelatedTable(This, pVal) ((This)->lpVtbl ->get_RelatedTable (This, pVal))
#define _Key_put_RelatedTable(This, newVal) ((This)->lpVtbl ->put_RelatedTable (This, newVal))
#define _Key_get_UpdateRule(This, pVal) ((This)->lpVtbl ->get_UpdateRule (This, pVal))
#define _Key_put_UpdateRule(This, newVal) ((This)->lpVtbl ->put_UpdateRule (This, newVal))
#define _Key_get_Columns(This, ppvObject) ((This)->lpVtbl ->get_Columns (This, ppvObject))
#endif

#endif
#endif

#ifndef __View_INTERFACE_DEFINED__
#define __View_INTERFACE_DEFINED__

  EXTERN_C const IID IID_View;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000613-0000-0010-8000-00AA006D2EA4")
  ADOView : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Command (VARIANT *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Command (VARIANT newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_Command (IDispatch *pComm) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DateCreated (VARIANT *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DateModified (VARIANT *pVal) = 0;
  };
#else
  typedef struct ViewVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOView *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOView *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOView *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOView *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOView *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOView *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOView *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Command) (ADOView *This, VARIANT *pVal);
    HRESULT (STDMETHODCALLTYPE *put_Command) (ADOView *This, VARIANT newVal);
    HRESULT (STDMETHODCALLTYPE *putref_Command) (ADOView *This, IDispatch *pComm);
    HRESULT (STDMETHODCALLTYPE *get_Name) (ADOView *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *get_DateCreated) (ADOView *This, VARIANT *pVal);
    HRESULT (STDMETHODCALLTYPE *get_DateModified) (ADOView *This, VARIANT *pVal);
    END_INTERFACE
  } ViewVtbl;

  interface View {
    CONST_VTBL struct ViewVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define View_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define View_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define View_Release(This) ((This)->lpVtbl ->Release (This))
#define View_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define View_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define View_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define View_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define View_get_Command(This, pVal) ((This)->lpVtbl ->get_Command (This, pVal))
#define View_put_Command(This, newVal) ((This)->lpVtbl ->put_Command (This, newVal))
#define View_putref_Command(This, pComm) ((This)->lpVtbl ->putref_Command (This, pComm))
#define View_get_Name(This, pVal) ((This)->lpVtbl ->get_Name (This, pVal))
#define View_get_DateCreated(This, pVal) ((This)->lpVtbl ->get_DateCreated (This, pVal))
#define View_get_DateModified(This, pVal) ((This)->lpVtbl ->get_DateModified (This, pVal))
#endif

#endif
#endif

#ifndef __Procedure_INTERFACE_DEFINED__
#define __Procedure_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Procedure;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000625-0000-0010-8000-00AA006D2EA4")
  ADOProcedure : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Command (VARIANT *pVar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Command (VARIANT newVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_Command (IDispatch *pComm) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DateCreated (VARIANT *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DateModified (VARIANT *pVal) = 0;
  };
#else
  typedef struct ProcedureVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOProcedure *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOProcedure *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOProcedure *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOProcedure *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOProcedure *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOProcedure *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOProcedure *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Command) (ADOProcedure *This, VARIANT *pVar);
    HRESULT (STDMETHODCALLTYPE *put_Command) (ADOProcedure *This, VARIANT newVal);
    HRESULT (STDMETHODCALLTYPE *putref_Command) (ADOProcedure *This, IDispatch *pComm);
    HRESULT (STDMETHODCALLTYPE *get_Name) (ADOProcedure *This, BSTR *pVal);
    HRESULT (STDMETHODCALLTYPE *get_DateCreated) (ADOProcedure *This, VARIANT *pVal);
    HRESULT (STDMETHODCALLTYPE *get_DateModified) (ADOProcedure *This, VARIANT *pVal);
    END_INTERFACE
  } ProcedureVtbl;

  interface Procedure {
    CONST_VTBL struct ProcedureVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Procedure_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Procedure_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Procedure_Release(This) ((This)->lpVtbl ->Release (This))
#define Procedure_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Procedure_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Procedure_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Procedure_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Procedure_get_Command(This, pVar) ((This)->lpVtbl ->get_Command (This, pVar))
#define Procedure_put_Command(This, newVal) ((This)->lpVtbl ->put_Command (This, newVal))
#define Procedure_putref_Command(This, pComm) ((This)->lpVtbl ->putref_Command (This, pComm))
#define Procedure_get_Name(This, pVal) ((This)->lpVtbl ->get_Name (This, pVal))
#define Procedure_get_DateCreated(This, pVal) ((This)->lpVtbl ->get_DateCreated (This, pVal))
#define Procedure_get_DateModified(This, pVal) ((This)->lpVtbl ->get_DateModified (This, pVal))
#endif

#endif
#endif

  EXTERN_C const CLSID CLSID_Catalog;

#ifdef __cplusplus
  Catalog;
#endif
  EXTERN_C const CLSID CLSID_Table;
#ifdef __cplusplus
  Table;
#endif
#ifndef __Property_INTERFACE_DEFINED__
#define __Property_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Property;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000503-0000-0010-8000-00AA006D2EA4")
  ADOProperty : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Value (VARIANT *pval) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Value (VARIANT val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (DataTypeEnum *ptype) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (long *plAttributes) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Attributes (long lAttributes) = 0;
  };
#else
  typedef struct PropertyVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOProperty *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOProperty *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOProperty *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOProperty *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOProperty *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOProperty *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOProperty *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Value) (ADOProperty *This, VARIANT *pval);
    HRESULT (STDMETHODCALLTYPE *put_Value) (ADOProperty *This, VARIANT val);
    HRESULT (STDMETHODCALLTYPE *get_Name) (ADOProperty *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Type) (ADOProperty *This, DataTypeEnum *ptype);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (ADOProperty *This, long *plAttributes);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (ADOProperty *This, long lAttributes);
    END_INTERFACE
  } PropertyVtbl;

  interface Property {
    CONST_VTBL struct PropertyVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Property_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Property_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Property_Release(This) ((This)->lpVtbl ->Release (This))
#define Property_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Property_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Property_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Property_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Property_get_Value(This, pval) ((This)->lpVtbl ->get_Value (This, pval))
#define Property_put_Value(This, val) ((This)->lpVtbl ->put_Value (This, val))
#define Property_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Property_get_Type(This, ptype) ((This)->lpVtbl ->get_Type (This, ptype))
#define Property_get_Attributes(This, plAttributes) ((This)->lpVtbl ->get_Attributes (This, plAttributes))
#define Property_put_Attributes(This, lAttributes) ((This)->lpVtbl ->put_Attributes (This, lAttributes))
#endif

#endif
#endif

  EXTERN_C const CLSID CLSID_Group;

#ifdef __cplusplus
  Group;
#endif

  EXTERN_C const CLSID CLSID_User;

#ifdef __cplusplus
  User;
#endif

  EXTERN_C const CLSID CLSID_Column;

#ifdef __cplusplus
  Column;
#endif

  EXTERN_C const CLSID CLSID_Index;

#ifdef __cplusplus
  Index;
#endif

  EXTERN_C const CLSID CLSID_Key;

#ifdef __cplusplus
  Key;
#endif

#ifndef __Tables_INTERFACE_DEFINED__
#define __Tables_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Tables;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000611-0000-0010-8000-00AA006D2EA4")
  ADOTables : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Item, Table **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Append (VARIANT Item) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Item) = 0;
  };
#else
  typedef struct TablesVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOTables *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOTables *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOTables *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOTables *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOTables *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOTables *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOTables *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOTables *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOTables *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOTables *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOTables *This, VARIANT Item, Table **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOTables *This, VARIANT Item);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOTables *This, VARIANT Item);
    END_INTERFACE
  } TablesVtbl;

  interface Tables {
    CONST_VTBL struct TablesVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Tables_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Tables_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Tables_Release(This) ((This)->lpVtbl ->Release (This))
#define Tables_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Tables_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Tables_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Tables_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Tables_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Tables__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Tables_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Tables_get_Item(This, Item, ppvObject) ((This)->lpVtbl ->get_Item (This, Item, ppvObject))
#define Tables_Append(This, Item) ((This)->lpVtbl ->Append (This, Item))
#define Tables_Delete(This, Item) ((This)->lpVtbl ->Delete (This, Item))
#endif

#endif
#endif

#ifndef __Columns_INTERFACE_DEFINED__
#define __Columns_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Columns;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("0000061D-0000-0010-8000-00AA006D2EA4")
  ADOColumns : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Item, Column **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Append (VARIANT Item, DataTypeEnum Type = adVarWChar, long DefinedSize = 0) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Item) = 0;
  };
#else
  typedef struct ColumnsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOColumns *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOColumns *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOColumns *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOColumns *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOColumns *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOColumns *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOColumns *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOColumns *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOColumns *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOColumns *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOColumns *This, VARIANT Item, Column **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOColumns *This, VARIANT Item, DataTypeEnum Type, long DefinedSize);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOColumns *This, VARIANT Item);
    END_INTERFACE
  } ColumnsVtbl;

  interface Columns {
    CONST_VTBL struct ColumnsVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Columns_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Columns_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Columns_Release(This) ((This)->lpVtbl ->Release (This))
#define Columns_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Columns_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Columns_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Columns_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Columns_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Columns__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Columns_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Columns_get_Item(This, Item, ppvObject) ((This)->lpVtbl ->get_Item (This, Item, ppvObject))
#define Columns_Append(This, Item, Type, DefinedSize) ((This)->lpVtbl ->Append (This, Item, Type, DefinedSize))
#define Columns_Delete(This, Item) ((This)->lpVtbl ->Delete (This, Item))
#endif

#endif
#endif

#ifndef __Procedures_INTERFACE_DEFINED__
#define __Procedures_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Procedures;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000626-0000-0010-8000-00AA006D2EA4")
  ADOProcedures : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Item, ADOProcedure **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Append (BSTR Name, IDispatch *Command) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Item) = 0;
  };
#else
  typedef struct ProceduresVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOProcedures *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOProcedures *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOProcedures *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOProcedures *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOProcedures *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOProcedures *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOProcedures *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOProcedures *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOProcedures *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOProcedures *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOProcedures *This, VARIANT Item, ADOProcedure **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOProcedures *This, BSTR Name, IDispatch *Command);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOProcedures *This, VARIANT Item);
    END_INTERFACE
  } ProceduresVtbl;

  interface Procedures {
    CONST_VTBL struct ProceduresVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Procedures_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Procedures_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Procedures_Release(This) ((This)->lpVtbl ->Release (This))
#define Procedures_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Procedures_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Procedures_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Procedures_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Procedures_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Procedures__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Procedures_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Procedures_get_Item(This, Item, ppvObject) ((This)->lpVtbl ->get_Item (This, Item, ppvObject))
#define Procedures_Append(This, Name, Command) ((This)->lpVtbl ->Append (This, Name, Command))
#define Procedures_Delete(This, Item) ((This)->lpVtbl ->Delete (This, Item))
#endif

#endif
#endif

#ifndef __Views_INTERFACE_DEFINED__
#define __Views_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Views;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000614-0000-0010-8000-00AA006D2EA4")
  ADOViews : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Item, ADOView **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Append (BSTR Name, IDispatch *Command) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Item) = 0;
  };
#else
  typedef struct ViewsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOViews *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOViews *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOViews *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOViews *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOViews *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOViews *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOViews *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOViews *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOViews *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOViews *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOViews *This, VARIANT Item, ADOView **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOViews *This, BSTR Name, IDispatch *Command);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOViews *This, VARIANT Item);
    END_INTERFACE
  } ViewsVtbl;

  interface Views {
    CONST_VTBL struct ViewsVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Views_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Views_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Views_Release(This) ((This)->lpVtbl ->Release (This))
#define Views_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Views_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Views_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Views_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Views_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Views__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Views_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Views_get_Item(This, Item, ppvObject) ((This)->lpVtbl ->get_Item (This, Item, ppvObject))
#define Views_Append(This, Name, Command) ((This)->lpVtbl ->Append (This, Name, Command))
#define Views_Delete(This, Item) ((This)->lpVtbl ->Delete (This, Item))
#endif

#endif
#endif

#ifndef __Indexes_INTERFACE_DEFINED__
#define __Indexes_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Indexes;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000620-0000-0010-8000-00AA006D2EA4")
  ADOIndexes : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Item, Index **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Append (VARIANT Item, VARIANT columns) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Item) = 0;
  };
#else
  typedef struct IndexesVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOIndexes *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOIndexes *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOIndexes *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOIndexes *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOIndexes *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOIndexes *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOIndexes *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOIndexes *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOIndexes *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOIndexes *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOIndexes *This, VARIANT Item, Index **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOIndexes *This, VARIANT Item, VARIANT columns);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOIndexes *This, VARIANT Item);
    END_INTERFACE
  } IndexesVtbl;

  interface Indexes {
    CONST_VTBL struct IndexesVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Indexes_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Indexes_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Indexes_Release(This) ((This)->lpVtbl ->Release (This))
#define Indexes_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Indexes_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Indexes_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Indexes_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Indexes_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Indexes__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Indexes_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Indexes_get_Item(This, Item, ppvObject) ((This)->lpVtbl ->get_Item (This, Item, ppvObject))
#define Indexes_Append(This, Item, columns) ((This)->lpVtbl ->Append (This, Item, columns))
#define Indexes_Delete(This, Item) ((This)->lpVtbl ->Delete (This, Item))
#endif

#endif
#endif

#ifndef __Keys_INTERFACE_DEFINED__
#define __Keys_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Keys;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000623-0000-0010-8000-00AA006D2EA4")
  ADOKeys : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Item, Key **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Append (VARIANT Item, KeyTypeEnum Type, VARIANT Column, BSTR RelatedADOTable = L"", BSTR RelatedADOColumn = L"") = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Item) = 0;
  };
#else
  typedef struct KeysVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOKeys *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOKeys *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOKeys *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOKeys *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOKeys *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOKeys *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOKeys *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOKeys *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOKeys *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOKeys *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOKeys *This, VARIANT Item, Key **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOKeys *This, VARIANT Item, KeyTypeEnum Type, VARIANT Column, BSTR RelatedTable, BSTR RelatedColumn);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOKeys *This, VARIANT Item);
    END_INTERFACE
  } KeysVtbl;

  interface Keys {
    CONST_VTBL struct KeysVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Keys_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Keys_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Keys_Release(This) ((This)->lpVtbl ->Release (This))
#define Keys_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Keys_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Keys_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Keys_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Keys_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Keys__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Keys_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Keys_get_Item(This, Item, ppvObject) ((This)->lpVtbl ->get_Item (This, Item, ppvObject))
#define Keys_Append(This, Item, Type, Column, RelatedTable, RelatedColumn) ((This)->lpVtbl ->Append (This, Item, Type, Column, RelatedTable, RelatedColumn))
#define Keys_Delete(This, Item) ((This)->lpVtbl ->Delete (This, Item))
#endif

#endif
#endif

#ifndef __Users_INTERFACE_DEFINED__
#define __Users_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Users;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("0000061A-0000-0010-8000-00AA006D2EA4")
  ADOUsers : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Item, User **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Append (VARIANT Item, BSTR Password = L"") = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Item) = 0;
  };
#else
  typedef struct UsersVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOUsers *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOUsers *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOUsers *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOUsers *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOUsers *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOUsers *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOUsers *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOUsers *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOUsers *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOUsers *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOUsers *This, VARIANT Item, User **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOUsers *This, VARIANT Item, BSTR Password);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOUsers *This, VARIANT Item);
    END_INTERFACE
  } UsersVtbl;
  interface Users {
    CONST_VTBL struct UsersVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Users_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Users_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Users_Release(This) ((This)->lpVtbl ->Release (This))
#define Users_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Users_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Users_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Users_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Users_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Users__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Users_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Users_get_Item(This, Item, ppvObject) ((This)->lpVtbl ->get_Item (This, Item, ppvObject))
#define Users_Append(This, Item, Password) ((This)->lpVtbl ->Append (This, Item, Password))
#define Users_Delete(This, Item) ((This)->lpVtbl ->Delete (This, Item))
#endif

#endif
#endif

#ifndef __Groups_INTERFACE_DEFINED__
#define __Groups_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Groups;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000617-0000-0010-8000-00AA006D2EA4")
  ADOGroups : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Item, Group **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Append (VARIANT Item) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Item) = 0;
  };
#else
  typedef struct GroupsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOGroups *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOGroups *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOGroups *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOGroups *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOGroups *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOGroups *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOGroups *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOGroups *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOGroups *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOGroups *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOGroups *This, VARIANT Item, Group **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOGroups *This, VARIANT Item);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOGroups *This, VARIANT Item);
    END_INTERFACE
  } GroupsVtbl;

  interface Groups {
    CONST_VTBL struct GroupsVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Groups_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Groups_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Groups_Release(This) ((This)->lpVtbl ->Release (This))
#define Groups_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Groups_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Groups_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Groups_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Groups_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Groups__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Groups_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Groups_get_Item(This, Item, ppvObject) ((This)->lpVtbl ->get_Item (This, Item, ppvObject))
#define Groups_Append(This, Item) ((This)->lpVtbl ->Append (This, Item))
#define Groups_Delete(This, Item) ((This)->lpVtbl ->Delete (This, Item))
#endif

#endif
#endif

#ifndef __Properties_INTERFACE_DEFINED__
#define __Properties_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Properties;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000504-0000-0010-8000-00AA006D2EA4")
  ADOProperties : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Item, ADOProperty **ppvObject) = 0;
  };
#else
  typedef struct PropertiesVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOProperties *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOProperties *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOProperties *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOProperties *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOProperties *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOProperties *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOProperties *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOProperties *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOProperties *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOProperties *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOProperties *This, VARIANT Item, ADOProperty **ppvObject);
    END_INTERFACE
  } PropertiesVtbl;

  interface Properties {
    CONST_VTBL struct PropertiesVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Properties_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Properties_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Properties_Release(This) ((This)->lpVtbl ->Release (This))
#define Properties_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Properties_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Properties_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Properties_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Properties_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Properties__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Properties_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Properties_get_Item(This, Item, ppvObject) ((This)->lpVtbl ->get_Item (This, Item, ppvObject))
#endif

#endif
#endif
#endif

#ifdef __cplusplus
}
#endif
#endif

#define ADOCatalog _ADOCatalog
#define ADOTable _ADOTable
#define ADOGroup _ADOGroup
#define ADOUser _ADOUser
#define ADOIndex _ADOIndex
#define ADOColumn _ADOColumn
#define ADOKey _ADOKey
#define ADOParameter _ADOParameter
#define ADOCollection _ADOCollection
#define ADODynaCollection _ADODynaCollection

#endif
                             usr/share/mingw-w64/include/adodef.h                                                                0100644 0000000 0000000 00000002203 12404413022 015722  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#ifndef _ADODEF_H_
#define _ADODEF_H_

#define ADO_MAJOR 6
#define ADOR_MAJOR 6
#define ADOX_MAJOR 6
#define ADOMD_MAJOR 6
#define JRO_MAJOR 2

#define ADO_MINOR 1
#define ADOR_MINOR 0
#define ADOX_MINOR 0
#define ADOMD_MINOR 0
#define JRO_MINOR 6

#define ADO_VERSION ADO_MAJOR##.##ADO_MINOR
#define ADOR_VERSION ADOR_MAJOR##.##ADOR_MINOR
#define ADOX_VERSION ADOX_MAJOR##.##ADOX_MINOR
#define ADOMD_VERSION ADOMD_MAJOR##.##ADOMD_MINOR
#define JRO_VERSION JRO_MAJOR##.##JRO_MINOR

#define ADO_LIBRARYNAME "Microsoft ActiveX Data Objects 6.1 Library"
#define ADOR_LIBRARYNAME "Microsoft ActiveX Data Objects Recordset 6.0 Library"
#define ADOX_LIBRARYNAME "Microsoft ADO Ext. 6.0 for DDL and Security"
#define ADOMD_LIBRARYNAME "Microsoft ActiveX Data Objects (Multi-dimensional) 6.0 Library"
#define JRO_LIBRARYNAME "Microsoft Jet and Replication Objects 2.6 Library"

#define ADOMD_TYPELIB_UUID uuid(22813728-8bd3-11d0-B4EF-00a0c9138ca4)
#define JRO_TYPELIB_UUID uuid(AC3B8B4C-B6CA-11d1-9f31-00c04fc29d52)

#endif
                                                                                                                                                                                                                                                                                                                                                                                             usr/share/mingw-w64/include/adogpool.h                                                              0100644 0000000 0000000 00000160646 12404413022 016324  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#ifndef INCLUDING_ADOGUIDS
#error Include via adoguids.h header only
#endif

#if !defined (NTDDI_VERSION) || (NTDDI_VERSION < 0x06020000)
#include "adogpool_backcompat.h"
#else
#define MAXAVAILABLEGUID 0x570
#define MAXAVAILABLEGUIDALL 0x57f

#define LIBID_ADO LIBID_ADO60
#define LIBID_ADOR LIBID_ADOR20
#define LIBID_CADO10 LIBID_ADO20
#define LIBID_CADOR10 LIBID_ADOR20

#define CLSID_ADO GUID_BUILDER (CLSID_ADO, 0000051a, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOCommand GUID_BUILDER (CLSID_CADOCommand, 00000507, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOConnection GUID_BUILDER (CLSID_CADOConnection, 00000514, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOError GUID_BUILDER (CLSID_CADOError, 00000541, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOErrorLookup GUID_BUILDER (CLSID_CADOErrorLookup, 00000542, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOField GUID_BUILDER (CLSID_CADOField, 0000053a, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOParameter GUID_BUILDER (CLSID_CADOParameter, 0000050b, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADORecField GUID_BUILDER (CLSID_CADORecField, 00000561, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADORecord GUID_BUILDER (CLSID_CADORecord, 00000560, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADORecordset GUID_BUILDER (CLSID_CADORecordset, 00000535, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOStream GUID_BUILDER (CLSID_CADOStream, 00000566, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID__ADO GUID_BUILDER (IID__ADO, 00000534, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_ConnectionEvents GUID_BUILDER (IID_ConnectionEvents, 00001400, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_ConnectionEventsVt GUID_BUILDER (IID_ConnectionEventsVt, 00001402, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumAffect GUID_BUILDER (IID_EnumAffect, 00000543, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCEResync GUID_BUILDER (IID_EnumCEResync, 00000553, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCommandType GUID_BUILDER (IID_EnumCommandType, 0000052e, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCompare GUID_BUILDER (IID_EnumCompare, 00000545, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumConnectMode GUID_BUILDER (IID_EnumConnectMode, 00000521, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumConnectOption GUID_BUILDER (IID_EnumConnectOption, 00000541, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumConnectPrompt GUID_BUILDER (IID_EnumConnectPrompt, 00000520, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCopyRecordOptions GUID_BUILDER (IID_EnumCopyRecordOptions, 00000574, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCursorLocation GUID_BUILDER (IID_EnumCursorLocation, 0000052f, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCursorOption GUID_BUILDER (IID_EnumCursorOption, 0000051c, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCursorType GUID_BUILDER (IID_EnumCursorType, 0000051b, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumDataType GUID_BUILDER (IID_EnumDataType, 0000051f, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumEditMode GUID_BUILDER (IID_EnumEditMode, 00000526, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumErrorValue GUID_BUILDER (IID_EnumErrorValue, 0000052a, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumEventReason GUID_BUILDER (IID_EnumEventReason, 00000531, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumEventStatus GUID_BUILDER (IID_EnumEventStatus, 00000530, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumExecuteOption GUID_BUILDER (IID_EnumExecuteOption, 0000051e, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumFieldAttribute GUID_BUILDER (IID_EnumFieldAttribute, 00000525, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumFieldStatus GUID_BUILDER (IID_EnumFieldStatus, 0000057e, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumFilterCriteria GUID_BUILDER (IID_EnumFilterCriteria, 0000052d, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumFilterGroup GUID_BUILDER (IID_EnumFilterGroup, 00000546, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumGetRowsOption GUID_BUILDER (IID_EnumGetRowsOption, 00000542, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumIsolationLevel GUID_BUILDER (IID_EnumIsolationLevel, 00000523, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumLineSeparator GUID_BUILDER (IID_EnumLineSeparator, 00000577, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumLockType GUID_BUILDER (IID_EnumLockType, 0000051d, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumMarshalOptions GUID_BUILDER (IID_EnumMarshalOptions, 00000540, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumMode GUID_BUILDER (IID_EnumMode, 00000575, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumMoveRecordOptions GUID_BUILDER (IID_EnumMoveRecordOptions, 00000573, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumObjectState GUID_BUILDER (IID_EnumObjectState, 00000532, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumParameterAttributes GUID_BUILDER (IID_EnumParameterAttributes, 0000052b, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumParameterDirection GUID_BUILDER (IID_EnumParameterDirection, 0000052c, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumPersistFormat GUID_BUILDER (IID_EnumPersistFormat, 00000548, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumPosition GUID_BUILDER (IID_EnumPosition, 00000528, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumPrepareOption GUID_BUILDER (IID_EnumPrepareOption, 00000522, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumPropertyAttributes GUID_BUILDER (IID_EnumPropertyAttributes, 00000529, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRDSAsyncThreadPriority GUID_BUILDER (IID_EnumRDSAsyncThreadPriority, 0000054b, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRDSAutoRecalc GUID_BUILDER (IID_EnumRDSAutoRecalc, 00000554, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRDSUpdateCriteria GUID_BUILDER (IID_EnumRDSUpdateCriteria, 0000054a, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRecordCreateOptions GUID_BUILDER (IID_EnumRecordCreateOptions, 00000570, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRecordOpenOptions GUID_BUILDER (IID_EnumRecordOpenOptions, 00000571, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRecordStatus GUID_BUILDER (IID_EnumRecordStatus, 00000527, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRecordType GUID_BUILDER (IID_EnumRecordType, 0000057d, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumResync GUID_BUILDER (IID_EnumResync, 00000544, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumSaveOptions GUID_BUILDER (IID_EnumSaveOptions, 0000057c, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumSchema GUID_BUILDER (IID_EnumSchema, 00000533, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumSearchDirection GUID_BUILDER (IID_EnumSearchDirection, 00000547, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumSeek GUID_BUILDER (IID_EnumSeek, 00000552, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumStreamOpenOptions GUID_BUILDER (IID_EnumStreamOpenOptions, 0000057a, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumStreamType GUID_BUILDER (IID_EnumStreamType, 00000576, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumStreamWrite GUID_BUILDER (IID_EnumStreamWrite, 0000057b, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumStringFormat GUID_BUILDER (IID_EnumStringFormat, 00000549, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumXactAttribute GUID_BUILDER (IID_EnumXactAttribute, 00000524, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADO10StdObject GUID_BUILDER (IID_IADO10StdObject, 00000534, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOClass GUID_BUILDER (IID_IADOClass, 00000560, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCollection GUID_BUILDER (IID_IADOCollection, 00000512, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCommand GUID_BUILDER (IID_IADOCommand, 986761e8, 7269, 4890, AA, 65, AD, 7c, 03, 69, 7a, 6d)
#define IID_IADOCommand15 GUID_BUILDER (IID_IADOCommand15, 00001508, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCommand25 GUID_BUILDER (IID_IADOCommand25, 0000154e, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCommandConstruction GUID_BUILDER (IID_IADOCommandConstruction, 00000517, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCommands GUID_BUILDER (IID_IADOCommands, 00000509, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnection GUID_BUILDER (IID_IADOConnection, 00001550, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnection15 GUID_BUILDER (IID_IADOConnection15, 00001515, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnectionConstruction GUID_BUILDER (IID_IADOConnectionConstruction, 00000551, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnectionConstruction15 GUID_BUILDER (IID_IADOConnectionConstruction15, 00000516, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnectionEvents GUID_BUILDER (IID_IADOConnectionEvents, 00001400, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnectionEventsVt GUID_BUILDER (IID_IADOConnectionEventsVt, 00001402, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnections GUID_BUILDER (IID_IADOConnections, 00000518, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCustomError GUID_BUILDER (IID_IADOCustomError, 00000519, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADODynaCollection GUID_BUILDER (IID_IADODynaCollection, 00000513, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOError GUID_BUILDER (IID_IADOError, 00000500, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOErrors GUID_BUILDER (IID_IADOErrors, 00000501, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOField GUID_BUILDER (IID_IADOField, 00001569, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOField15 GUID_BUILDER (IID_IADOField15, 00001505, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOField20 GUID_BUILDER (IID_IADOField20, 0000154c, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOField25 GUID_BUILDER (IID_IADOField25, 00001569, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOFields GUID_BUILDER (IID_IADOFields, 00001564, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOFields15 GUID_BUILDER (IID_IADOFields15, 00001506, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOFields20 GUID_BUILDER (IID_IADOFields20, 0000154d, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOParameter GUID_BUILDER (IID_IADOParameter, 0000150c, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOParameters GUID_BUILDER (IID_IADOParameters, 0000150d, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOProperties GUID_BUILDER (IID_IADOProperties, 00000504, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOProperty GUID_BUILDER (IID_IADOProperty, 00000503, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecord GUID_BUILDER (IID_IADORecord, 00001562, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecord25 GUID_BUILDER (IID_IADORecord25, 00001562, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordConstruction GUID_BUILDER (IID_IADORecordConstruction, 00000567, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordGroup GUID_BUILDER (IID_IADORecordGroup, 00000511, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordset GUID_BUILDER (IID_IADORecordset, 00001556, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordset15 GUID_BUILDER (IID_IADORecordset15, 0000150e, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordset20 GUID_BUILDER (IID_IADORecordset20, 0000154f, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordset21 GUID_BUILDER (IID_IADORecordset21, 00001555, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordset25 GUID_BUILDER (IID_IADORecordset25, 00001556, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordsetConstruction GUID_BUILDER (IID_IADORecordsetConstruction, 00001283, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordsetEvents GUID_BUILDER (IID_IADORecordsetEvents, 00001266, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordsetEventsVt GUID_BUILDER (IID_IADORecordsetEventsVt, 00001403, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordsets GUID_BUILDER (IID_IADORecordsets, 0000050f, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOStream GUID_BUILDER (IID_IADOStream, 00001565, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOStreamConstruction GUID_BUILDER (IID_IADOStreamConstruction, 00000568, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_ICMemStreamProperties GUID_BUILDER (IID_ICMemStreamProperties, FF184014, B5D3, 4310, AB, F0, 9b, 70, 45, A2, CF, 17)
#define IID_IPrivErrors GUID_BUILDER (IID_IPrivErrors, 00000502, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADO20 GUID_BUILDER (LIBID_ADO20, 00000200, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADO21 GUID_BUILDER (LIBID_ADO21, 00000201, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADO25 GUID_BUILDER (LIBID_ADO25, 00000205, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADO26 GUID_BUILDER (LIBID_ADO26, 00000206, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADO27 GUID_BUILDER (LIBID_ADO27, EF53050B, 882e, 4776, B6, 43, ED, A4, 72, E8, E3, F2)
#define LIBID_ADO28 GUID_BUILDER (LIBID_ADO28, 2a75196c, D9EB, 4129, B8, 03, 93, 13, 27, F7, 2d, 5c)
#define LIBID_ADO60 GUID_BUILDER (LIBID_ADO60, B691E011, 1797, 432e, 90, 7a, 4d, 8c, 69, 33, 91, 29)
#define LIBID_ADOR20 GUID_BUILDER (LIBID_ADOR20, 00000300, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADOR25 GUID_BUILDER (LIBID_ADOR25, 00000305, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)

#ifdef IMMEDIATE_GUID_USE
CLSID_ADO;
CLSID_CADOCommand;
CLSID_CADOConnection;
CLSID_CADOError;
CLSID_CADOErrorLookup;
CLSID_CADOField;
CLSID_CADOParameter;
CLSID_CADORecField;
CLSID_CADORecord;
CLSID_CADORecordset;
CLSID_CADOStream;
IID__ADO;
IID_ConnectionEvents;
IID_ConnectionEventsVt;
IID_EnumAffect;
IID_EnumCEResync;
IID_EnumCommandType;
IID_EnumCompare;
IID_EnumConnectMode;
IID_EnumConnectOption;
IID_EnumConnectPrompt;
IID_EnumCopyRecordOptions;
IID_EnumCursorLocation;
IID_EnumCursorOption;
IID_EnumCursorType;
IID_EnumDataType;
IID_EnumEditMode;
IID_EnumErrorValue;
IID_EnumEventReason;
IID_EnumEventStatus;
IID_EnumExecuteOption;
IID_EnumFieldAttribute;
IID_EnumFieldStatus;
IID_EnumFilterCriteria;
IID_EnumFilterGroup;
IID_EnumGetRowsOption;
IID_EnumIsolationLevel;
IID_EnumLineSeparator;
IID_EnumLockType;
IID_EnumMarshalOptions;
IID_EnumMode;
IID_EnumMoveRecordOptions;
IID_EnumObjectState;
IID_EnumParameterAttributes;
IID_EnumParameterDirection;
IID_EnumPersistFormat;
IID_EnumPosition;
IID_EnumPrepareOption;
IID_EnumPropertyAttributes;
IID_EnumRDSAsyncThreadPriority;
IID_EnumRDSAutoRecalc;
IID_EnumRDSUpdateCriteria;
IID_EnumRecordCreateOptions;
IID_EnumRecordOpenOptions;
IID_EnumRecordStatus;
IID_EnumRecordType;
IID_EnumResync;
IID_EnumSaveOptions;
IID_EnumSchema;
IID_EnumSearchDirection;
IID_EnumSeek;
IID_EnumStreamOpenOptions;
IID_EnumStreamType;
IID_EnumStreamWrite;
IID_EnumStringFormat;
IID_EnumXactAttribute;
IID_IADO10StdObject;
IID_IADOClass;
IID_IADOCollection;
IID_IADOCommand;
IID_IADOCommand15;
IID_IADOCommand25;
IID_IADOCommandConstruction;
IID_IADOCommands;
IID_IADOConnection;
IID_IADOConnection15;
IID_IADOConnectionConstruction;
IID_IADOConnectionConstruction15;
IID_IADOConnectionEvents;
IID_IADOConnectionEventsVt;
IID_IADOConnections;
IID_IADOCustomError;
IID_IADODynaCollection;
IID_IADOError;
IID_IADOErrors;
IID_IADOField;
IID_IADOField15;
IID_IADOField20;
IID_IADOField25;
IID_IADOFields;
IID_IADOFields15;
IID_IADOFields20;
IID_IADOParameter;
IID_IADOParameters;
IID_IADOProperties;
IID_IADOProperty;
IID_IADORecord;
IID_IADORecord25;
IID_IADORecordConstruction;
IID_IADORecordGroup;
IID_IADORecordset;
IID_IADORecordset15;
IID_IADORecordset20;
IID_IADORecordset21;
IID_IADORecordset25;
IID_IADORecordsetConstruction;
IID_IADORecordsetEvents;
IID_IADORecordsetEventsVt;
IID_IADORecordsets;
IID_IADOStream;
IID_IADOStreamConstruction;
IID_ICMemStreamProperties;
IID_IPrivErrors;
LIBID_ADO20;
LIBID_ADO21;
LIBID_ADO25;
LIBID_ADO26;
LIBID_ADO27;
LIBID_ADO28;
LIBID_ADO60;
LIBID_ADOR20;
LIBID_ADOR25;

#undef CLSID_ADO
#undef CLSID_CADOCommand
#undef CLSID_CADOConnection
#undef CLSID_CADOError
#undef CLSID_CADOErrorLookup
#undef CLSID_CADOField
#undef CLSID_CADOParameter
#undef CLSID_CADORecField
#undef CLSID_CADORecord
#undef CLSID_CADORecordset
#undef CLSID_CADOStream
#undef IID__ADO
#undef IID_ConnectionEvents
#undef IID_ConnectionEventsVt
#undef IID_EnumAffect
#undef IID_EnumCEResync
#undef IID_EnumCommandType
#undef IID_EnumCompare
#undef IID_EnumConnectMode
#undef IID_EnumConnectOption
#undef IID_EnumConnectPrompt
#undef IID_EnumCopyRecordOptions
#undef IID_EnumCursorLocation
#undef IID_EnumCursorOption
#undef IID_EnumCursorType
#undef IID_EnumDataType
#undef IID_EnumEditMode
#undef IID_EnumErrorValue
#undef IID_EnumEventReason
#undef IID_EnumEventStatus
#undef IID_EnumExecuteOption
#undef IID_EnumFieldAttribute
#undef IID_EnumFieldStatus
#undef IID_EnumFilterCriteria
#undef IID_EnumFilterGroup
#undef IID_EnumGetRowsOption
#undef IID_EnumIsolationLevel
#undef IID_EnumLineSeparator
#undef IID_EnumLockType
#undef IID_EnumMarshalOptions
#undef IID_EnumMode
#undef IID_EnumMoveRecordOptions
#undef IID_EnumObjectState
#undef IID_EnumParameterAttributes
#undef IID_EnumParameterDirection
#undef IID_EnumPersistFormat
#undef IID_EnumPosition
#undef IID_EnumPrepareOption
#undef IID_EnumPropertyAttributes
#undef IID_EnumRDSAsyncThreadPriority
#undef IID_EnumRDSAutoRecalc
#undef IID_EnumRDSUpdateCriteria
#undef IID_EnumRecordCreateOptions
#undef IID_EnumRecordOpenOptions
#undef IID_EnumRecordStatus
#undef IID_EnumRecordType
#undef IID_EnumResync
#undef IID_EnumSaveOptions
#undef IID_EnumSchema
#undef IID_EnumSearchDirection
#undef IID_EnumSeek
#undef IID_EnumStreamOpenOptions
#undef IID_EnumStreamType
#undef IID_EnumStreamWrite
#undef IID_EnumStringFormat
#undef IID_EnumXactAttribute
#undef IID_IADO10StdObject
#undef IID_IADOClass
#undef IID_IADOCollection
#undef IID_IADOCommand
#undef IID_IADOCommand15
#undef IID_IADOCommand25
#undef IID_IADOCommandConstruction
#undef IID_IADOCommands
#undef IID_IADOConnection
#undef IID_IADOConnection15
#undef IID_IADOConnectionConstruction
#undef IID_IADOConnectionConstruction15
#undef IID_IADOConnectionEvents
#undef IID_IADOConnectionEventsVt
#undef IID_IADOConnections
#undef IID_IADOCustomError
#undef IID_IADODynaCollection
#undef IID_IADOError
#undef IID_IADOErrors
#undef IID_IADOField
#undef IID_IADOField15
#undef IID_IADOField20
#undef IID_IADOField25
#undef IID_IADOFields
#undef IID_IADOFields15
#undef IID_IADOFields20
#undef IID_IADOParameter
#undef IID_IADOParameters
#undef IID_IADOProperties
#undef IID_IADOProperty
#undef IID_IADORecord
#undef IID_IADORecord25
#undef IID_IADORecordConstruction
#undef IID_IADORecordGroup
#undef IID_IADORecordset
#undef IID_IADORecordset15
#undef IID_IADORecordset20
#undef IID_IADORecordset21
#undef IID_IADORecordset25
#undef IID_IADORecordsetConstruction
#undef IID_IADORecordsetEvents
#undef IID_IADORecordsetEventsVt
#undef IID_IADORecordsets
#undef IID_IADOStream
#undef IID_IADOStreamConstruction
#undef IID_ICMemStreamProperties
#undef IID_IPrivErrors
#undef LIBID_ADO20
#undef LIBID_ADO21
#undef LIBID_ADO25
#undef LIBID_ADO26
#undef LIBID_ADO27
#undef LIBID_ADO28
#undef LIBID_ADO60
#undef LIBID_ADOR20
#undef LIBID_ADOR25
#endif

#ifdef _LOCKBYTESUPPORT_

#define IID_IADOField26 GUID_BUILDER (IID_IADOField26, 00001557, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)

#ifdef IMMEDIATE_GUID_USE
IID_IADOField26;

#undef IID_IADOField26
#endif

#endif

#ifdef RESERVED_GUIDS_BEYOND_THIS_POINT

#define ADO_Reserved_4 GUID_BUILDER (ADO_Reserved_4, 567747f1, 658b, 4906, 82, C4, E9, CD, A1, 46, 26, 15)
#define ADO_Reserved_6 GUID_BUILDER (ADO_Reserved_6, ED5A4589, 7a9d, 41df, 89, 86, CC, A9, 25, 01, A5, DA)
#define ADO_Reserved_7 GUID_BUILDER (ADO_Reserved_7, C029178A, F16B, 4a06, 82, 93, A8, 08, B7, F8, 78, 92)
#define ADO_Reserved_8 GUID_BUILDER (ADO_Reserved_8, FD6974FD, 21fb, 409c, 96, 56, A5, 68, FE, C0, AC, 01)
#define ADO_Reserved_9 GUID_BUILDER (ADO_Reserved_9, F23FCB5E, 7159, 4cba, A3, 41, 0e, 7a, A5, 15, 18, 70)
#define ADO_Reserved_10 GUID_BUILDER (ADO_Reserved_10, E724D5C9, 327c, 43f7, 86, 4c, 68, 2f, FF, 5c, 99, 93)
#define ADO_Reserved_12 GUID_BUILDER (ADO_Reserved_12, 8831ebb5, 2c09, 4ddd, 9a, 7a, AC, 13, 6d, 58, D7, 21)
#define ADO_Reserved_13 GUID_BUILDER (ADO_Reserved_13, 447b1221, 64fa, 44e9, B1, 46, B1, 1f, 16, E3, 14, B2)
#define ADO_Reserved_14 GUID_BUILDER (ADO_Reserved_14, FC528DC2, A992, 44d3, 97, 9f, 07, F7, F4, 45, 5f, 23)
#define ADO_Reserved_15 GUID_BUILDER (ADO_Reserved_15, C2CC7BC0, 9f8b, 46c8, 83, 6b, BC, 46, 70, 28, F4, 54)
#define ADO_Reserved_16 GUID_BUILDER (ADO_Reserved_16, 4687ee6c, 12ce, 4a31, 97, E9, E6, 49, 6d, E7, 2c, 71)
#define ADO_Reserved_17 GUID_BUILDER (ADO_Reserved_17, 4b56fc5d, 992f, 4339, 95, 81, C5, 40, 7a, B2, BF, FD)
#define ADO_Reserved_18 GUID_BUILDER (ADO_Reserved_18, 1f13bfb3, 8ba8, 46ca, 91, 78, 74, 28, EF, 9a, 85, C0)
#define ADO_Reserved_19 GUID_BUILDER (ADO_Reserved_19, 0b410060, 4d75, 4f77, 96, A1, 68, 4c, 38, 15, E1, B1)
#define ADO_Reserved_20 GUID_BUILDER (ADO_Reserved_20, 5593f2e0, 436b, 40b8, 81, A8, 1b, 7e, F4, E6, 25, 2c)
#define ADO_Reserved_21 GUID_BUILDER (ADO_Reserved_21, 88447b2f, E1C9, 413e, BE, E7, A7, D2, B9, 0e, D1, 96)
#define ADO_Reserved_22 GUID_BUILDER (ADO_Reserved_22, 89bfee1b, 8cb5, 4a90, 89, AF, E8, 29, 93, 4e, 6c, 48)
#define ADO_Reserved_23 GUID_BUILDER (ADO_Reserved_23, 28d7f9fc, F485, 4bdb, 9c, C4, 6f, AE, 44, F9, 9f, D9)
#define ADO_Reserved_24 GUID_BUILDER (ADO_Reserved_24, 1bb4223f, B0E8, 4540, 96, FD, B8, FE, D9, A7, C0, 8b)
#define ADO_Reserved_25 GUID_BUILDER (ADO_Reserved_25, AD1A1568, 8b4a, 403f, 84, 76, D8, F6, 33, 4d, BD, 9f)
#define ADO_Reserved_26 GUID_BUILDER (ADO_Reserved_26, 1326b4d8, EE0B, 4054, 8f, 4c, 86, 35, 9f, 00, 24, AD)
#define ADO_Reserved_27 GUID_BUILDER (ADO_Reserved_27, 98b7eb70, 7aed, 401a, AF, 6d, A6, B8, DB, A0, AF, A6)
#define ADO_Reserved_28 GUID_BUILDER (ADO_Reserved_28, FD46F2C2, 7fda, 4dc9, A2, DB, D9, BE, 4f, 59, 98, C2)
#define ADO_Reserved_29 GUID_BUILDER (ADO_Reserved_29, FAA37542, B471, 4183, A6, 56, 99, C8, FD, 80, FF, 73)
#define ADO_Reserved_30 GUID_BUILDER (ADO_Reserved_30, 56ce86f1, 3116, 4104, A5, 28, 17, D1, 1e, DC, 68, 2a)
#define ADO_Reserved_31 GUID_BUILDER (ADO_Reserved_31, 83e8cf0e, 176f, 4908, 86, 3a, 2a, 77, 4d, 76, 9b, EF)
#define ADO_Reserved_32 GUID_BUILDER (ADO_Reserved_32, 0494d18d, 98f7, 4a38, 80, DF, 35, F8, 80, 98, BD, DF)
#define ADO_Reserved_33 GUID_BUILDER (ADO_Reserved_33, 00c61f59, 4e7f, 4093, BF, FD, 03, 53, B4, 5d, E5, 8b)
#define ADO_Reserved_34 GUID_BUILDER (ADO_Reserved_34, 732a172f, 384d, 4c4a, A6, AF, D2, 28, 20, D3, 34, 26)
#define ADO_Reserved_35 GUID_BUILDER (ADO_Reserved_35, 104e1f7e, 8993, 455c, B7, D8, 58, CD, 88, 74, 80, 75)
#define ADO_Reserved_36 GUID_BUILDER (ADO_Reserved_36, C12B8DFD, 42f7, 408e, AE, FB, A7, C2, FB, 43, 49, A7)
#define ADO_Reserved_37 GUID_BUILDER (ADO_Reserved_37, EE881FC9, 6c2f, 45a2, BA, 17, 24, 95, BC, 72, 4e, 55)
#define ADO_Reserved_38 GUID_BUILDER (ADO_Reserved_38, 7381c764, 646b, 4f11, A6, 73, 13, 50, 98, 9d, 62, 3a)
#define ADO_Reserved_39 GUID_BUILDER (ADO_Reserved_39, D8E4965C, F571, 4771, 8a, 74, 63, 95, 05, 16, B0, 88)
#define ADO_Reserved_40 GUID_BUILDER (ADO_Reserved_40, 2be262e5, 3a8c, 4b07, A3, C3, 3b, B7, 40, EF, 40, 95)
#define ADO_Reserved_41 GUID_BUILDER (ADO_Reserved_41, 3e90a199, 4f86, 445c, 84, 8e, A6, 17, 86, B9, 67, D1)
#define ADO_Reserved_42 GUID_BUILDER (ADO_Reserved_42, DCD025E0, DA44, 47e4, 82, 65, E4, A7, 6b, 85, 29, 0c)
#define ADO_Reserved_43 GUID_BUILDER (ADO_Reserved_43, 31eff562, FB6B, 41d6, 81, AD, 30, 1b, B0, 53, 9c, 61)
#define ADO_Reserved_44 GUID_BUILDER (ADO_Reserved_44, BD3ECD6B, F4A7, 42fc, 90, F1, 75, D5, 37, 2a, F2, 8f)
#define ADO_Reserved_45 GUID_BUILDER (ADO_Reserved_45, 6efbc56f, 67e4, 4f7d, BE, 59, C5, D6, FA, 21, B7, 77)
#define ADO_Reserved_46 GUID_BUILDER (ADO_Reserved_46, 3bf5e1fc, B960, 4564, 86, 54, 07, B0, 7a, AF, 6e, 4f)
#define ADO_Reserved_47 GUID_BUILDER (ADO_Reserved_47, 2430f883, 1462, 4899, 9a, DE, F7, 24, 27, FD, 5e, E4)
#define ADO_Reserved_48 GUID_BUILDER (ADO_Reserved_48, AB663F07, BA4D, 42cc, 93, C6, F2, EA, 9f, C8, BA, 74)
#define ADO_Reserved_49 GUID_BUILDER (ADO_Reserved_49, D808C6F7, 36c0, 4302, 80, EE, C4, B7, 00, F8, D2, 38)
#define ADO_Reserved_50 GUID_BUILDER (ADO_Reserved_50, AB146E06, E493, 4df0, A1, CD, 07, D4, B0, 74, 46, C3)
#define ADO_Reserved_51 GUID_BUILDER (ADO_Reserved_51, 74f1fd51, 9cb8, 4186, 8c, 3d, DD, F3, 55, 2a, 99, 9b)
#define ADO_Reserved_52 GUID_BUILDER (ADO_Reserved_52, 71701a97, 5386, 43b0, 95, 8d, 3c, EE, 40, 57, B1, 99)
#define ADO_Reserved_53 GUID_BUILDER (ADO_Reserved_53, 63cc6087, A6C6, 4ccf, 8e, D4, 17, 5b, 91, A6, 32, C5)
#define ADO_Reserved_54 GUID_BUILDER (ADO_Reserved_54, 7323fd37, B7D8, 4f8a, 80, F4, E8, 3d, 0b, 2a, 73, B5)
#define ADO_Reserved_55 GUID_BUILDER (ADO_Reserved_55, 5c666403, 2a0a, 4b12, 8e, 1d, 41, 19, 88, DD, E0, 0a)
#define ADO_Reserved_56 GUID_BUILDER (ADO_Reserved_56, ECA4C14C, 5529, 49df, B1, 3c, 17, F0, 22, DB, 1b, A6)
#define ADO_Reserved_57 GUID_BUILDER (ADO_Reserved_57, 304ade1d, 4458, 4a6a, 93, 48, 1f, 7c, 2e, 64, D6, FA)
#define ADO_Reserved_58 GUID_BUILDER (ADO_Reserved_58, D87A7AF2, FB3C, 49bc, B2, 69, F3, 57, 36, E7, 23, 2e)
#define ADO_Reserved_59 GUID_BUILDER (ADO_Reserved_59, 542d6d77, AECB, 4aff, B1, C6, 54, EF, 79, 8f, 61, ED)
#define ADO_Reserved_60 GUID_BUILDER (ADO_Reserved_60, 46359618, 34ae, 410e, AE, 20, F3, D4, E1, BD, A6, BE)
#define ADO_Reserved_61 GUID_BUILDER (ADO_Reserved_61, F98DF79B, 2935, 464b, AA, 08, CC, EF, F1, 5f, 71, 32)
#define ADO_Reserved_62 GUID_BUILDER (ADO_Reserved_62, 214887fb, 4867, 4dd8, 83, 9d, 4c, F0, BB, 83, E1, 95)
#define ADO_Reserved_63 GUID_BUILDER (ADO_Reserved_63, C9B68C08, F663, 4386, 8f, 5b, FA, BA, E0, 27, 43, 6d)
#define ADO_Reserved_64 GUID_BUILDER (ADO_Reserved_64, F46511DD, 10b6, 49cf, AA, 75, 5e, E2, 7c, FD, 9e, A4)
#define ADO_Reserved_65 GUID_BUILDER (ADO_Reserved_65, C057EF87, F3A8, 4890, A9, 56, 57, 8c, 07, CD, 2e, F8)
#define ADO_Reserved_66 GUID_BUILDER (ADO_Reserved_66, 1c9e0666, 1405, 4dc5, BD, A7, 65, F4, B4, 16, 1d, 7b)
#define ADO_Reserved_67 GUID_BUILDER (ADO_Reserved_67, B91484C2, 5e48, 438c, 91, CD, B9, D6, 99, 32, 30, E4)
#define ADO_Reserved_68 GUID_BUILDER (ADO_Reserved_68, 17d12bfe, 6c9f, 4229, 87, 95, 60, 20, 6f, D1, 45, 35)
#define ADO_Reserved_69 GUID_BUILDER (ADO_Reserved_69, 5a816ea3, EE82, 4f65, BC, 76, 74, 07, E9, E5, 43, 58)
#define ADO_Reserved_70 GUID_BUILDER (ADO_Reserved_70, 3ad0de2b, AA3E, 4508, BE, 9e, 1e, AA, DF, 1c, 4d, 8b)
#define ADO_Reserved_71 GUID_BUILDER (ADO_Reserved_71, 54dc8b80, 7869, 4d90, AB, 5c, 8c, 54, 1a, 74, EE, F8)
#define ADO_Reserved_72 GUID_BUILDER (ADO_Reserved_72, 80a200b0, 5783, 48e7, 81, 25, B9, E4, BF, 59, F7, 22)
#define ADO_Reserved_73 GUID_BUILDER (ADO_Reserved_73, 1502cb61, 8c42, 4c4b, B9, 0c, 3a, 9e, 4e, 46, D1, BE)
#define ADO_Reserved_74 GUID_BUILDER (ADO_Reserved_74, 70eb3f53, 91a0, 42f5, BE, 50, F1, 02, DE, C8, 92, 27)
#define ADO_Reserved_75 GUID_BUILDER (ADO_Reserved_75, 4680aa81, B27C, 4a8f, 83, F9, 6f, B7, E1, 8e, D2, 3c)
#define ADO_Reserved_76 GUID_BUILDER (ADO_Reserved_76, EF31F9EB, 4541, 4fcb, 8d, 67, 59, 2c, 85, 50, 93, 05)
#define ADO_Reserved_77 GUID_BUILDER (ADO_Reserved_77, 88b77d15, 997e, 4e3a, 83, 20, 3b, 37, 83, 52, 86, D5)
#define ADO_Reserved_78 GUID_BUILDER (ADO_Reserved_78, D03A3AA8, 1aac, 4867, 93, C9, 5f, 51, D8, 7d, 6a, 74)
#define ADO_Reserved_79 GUID_BUILDER (ADO_Reserved_79, 47022458, 17e7, 4bd7, 90, 81, 85, B4, 0b, 03, 6d, 5b)
#define ADO_Reserved_80 GUID_BUILDER (ADO_Reserved_80, 9e5bee82, F410, 44c7, 9d, 6d, 3f, 7d, D2, 8b, A7, CC)
#define ADO_Reserved_81 GUID_BUILDER (ADO_Reserved_81, 278a1c47, 3c39, 41c7, A3, FB, 7c, 2e, 62, 0b, E4, 44)
#define ADO_Reserved_82 GUID_BUILDER (ADO_Reserved_82, 964cbf05, 8084, 4c15, 9c, F5, 8c, 4b, 81, 41, B4, AE)
#define ADO_Reserved_83 GUID_BUILDER (ADO_Reserved_83, A86296A0, F272, 4acd, 83, 06, FF, CA, FF, 89, 14, A9)
#define ADO_Reserved_84 GUID_BUILDER (ADO_Reserved_84, F805FC7C, 7c4a, 43a1, B0, 14, 71, EA, 0e, EB, EA, 5f)
#define ADO_Reserved_85 GUID_BUILDER (ADO_Reserved_85, 33e6e9b6, 0bea, 4549, 90, CB, 3b, 64, 12, DB, 8c, F5)
#define ADO_Reserved_86 GUID_BUILDER (ADO_Reserved_86, 7337e3dc, 219f, 4d9e, 82, 5b, 0a, 2c, 18, 4e, C0, DE)
#define ADO_Reserved_87 GUID_BUILDER (ADO_Reserved_87, 7397bafc, 354e, 4f18, 9f, 76, C3, 3a, 4e, EF, 6d, 20)
#define ADO_Reserved_88 GUID_BUILDER (ADO_Reserved_88, 5ec2d163, E671, 4186, BE, 72, BF, FF, 72, D5, 7a, 5c)
#define ADO_Reserved_89 GUID_BUILDER (ADO_Reserved_89, 8b37b801, 0a35, 4f97, A3, 43, 82, 57, B3, E7, 6c, 79)
#define ADO_Reserved_90 GUID_BUILDER (ADO_Reserved_90, FAD396B6, EE4E, 4f70, 85, 54, E8, 23, 9e, 47, 05, 29)
#define ADO_Reserved_91 GUID_BUILDER (ADO_Reserved_91, 6063972c, 395b, 4fef, A0, 04, ED, 95, E7, D8, 72, 0d)
#define ADO_Reserved_92 GUID_BUILDER (ADO_Reserved_92, 85aeed72, A1F8, 4597, 82, 32, F8, 40, EF, C9, 21, 09)
#define ADO_Reserved_93 GUID_BUILDER (ADO_Reserved_93, CE4FD8FF, 553a, 4424, B1, EA, 3e, DF, 11, 42, AD, 8b)
#define ADO_Reserved_94 GUID_BUILDER (ADO_Reserved_94, 1a856a0f, 0844, 4de4, AC, 7b, 75, 30, 62, 56, 39, 86)
#define ADO_Reserved_95 GUID_BUILDER (ADO_Reserved_95, 09a742a1, 19ed, 43bb, 85, E9, 99, 23, DE, C4, 17, F7)
#define ADO_Reserved_96 GUID_BUILDER (ADO_Reserved_96, 3695bd0c, 9de6, 4895, 84, E6, B2, 4c, E7, 55, 47, 02)
#define ADO_Reserved_97 GUID_BUILDER (ADO_Reserved_97, 8802531f, 6ea8, 4a55, 8a, 18, 05, 97, 86, 3c, DA, 38)
#define ADO_Reserved_98 GUID_BUILDER (ADO_Reserved_98, 498e70f0, B13F, 4804, AD, D5, 72, E8, 0e, 28, 05, E7)
#define ADO_Reserved_99 GUID_BUILDER (ADO_Reserved_99, 50d0e90f, E3A4, 4a93, 8b, 48, 71, 21, 66, E8, 87, CD)
#define ADO_Reserved_100 GUID_BUILDER (ADO_Reserved_100, F1D30550, 8515, 4f8b, 93, E1, 1e, F0, 12, 1b, 4b, D0)
#define ADO_Reserved_101 GUID_BUILDER (ADO_Reserved_101, 901cda31, 8cdb, 4a5b, 91, 6b, 63, EA, 90, 1d, 8c, E0)
#define ADO_Reserved_102 GUID_BUILDER (ADO_Reserved_102, 00bda239, 1094, 4aef, 93, AD, 7c, E2, 73, 6c, 42, 25)
#define ADO_Reserved_103 GUID_BUILDER (ADO_Reserved_103, DCA4E51E, 250e, 4ab3, B4, 90, F2, CB, 9e, 8f, 6c, C4)
#define ADO_Reserved_104 GUID_BUILDER (ADO_Reserved_104, 24679ebd, 8535, 4494, A9, 1c, 18, 91, F0, 75, 5b, 6f)
#define ADO_Reserved_105 GUID_BUILDER (ADO_Reserved_105, F041739E, F37E, 4925, 94, 25, FB, 51, 5e, 56, 0f, 54)
#define ADO_Reserved_106 GUID_BUILDER (ADO_Reserved_106, FECACBBF, A73C, 4616, 84, 2f, FE, F5, 72, 85, 70, AB)
#define ADO_Reserved_107 GUID_BUILDER (ADO_Reserved_107, DBAD7368, 1ded, 4a77, B8, 0a, 1a, EB, 12, 99, BD, B3)
#define ADO_Reserved_108 GUID_BUILDER (ADO_Reserved_108, CFDE81B8, 66ef, 4503, 84, A8, 7e, 8f, C8, AB, 0b, 31)
#define ADO_Reserved_109 GUID_BUILDER (ADO_Reserved_109, 9b7484fa, 023a, 4ffb, A2, 94, 11, A6, E5, 97, AB, 35)
#define ADO_Reserved_110 GUID_BUILDER (ADO_Reserved_110, 54f0f09c, 1201, 49a9, B4, 65, 6b, 02, 9b, 5f, E3, 12)
#define ADO_Reserved_111 GUID_BUILDER (ADO_Reserved_111, BFFA01F8, EAE7, 4fa1, BF, 74, 37, 73, 3f, BF, 36, 4c)
#define ADO_Reserved_112 GUID_BUILDER (ADO_Reserved_112, 12fad291, 4aab, 4038, 9d, D1, 04, E4, E7, A9, E0, F4)
#define ADO_Reserved_113 GUID_BUILDER (ADO_Reserved_113, 8d2af964, C489, 4d77, A8, 17, A0, 4d, B1, DB, 26, A5)
#define ADO_Reserved_114 GUID_BUILDER (ADO_Reserved_114, 79f89dd7, BE86, 4b36, BE, 9b, FA, 75, 24, 18, 55, 68)
#define ADO_Reserved_115 GUID_BUILDER (ADO_Reserved_115, 4387d7fa, 7a52, 4f67, BF, B6, 7e, 7d, 7a, B7, C9, DE)
#define ADO_Reserved_116 GUID_BUILDER (ADO_Reserved_116, 7571252f, 0e49, 4f4b, A3, 87, 9e, D9, 70, 54, 68, D8)
#define ADO_Reserved_117 GUID_BUILDER (ADO_Reserved_117, 0dab016b, 6ba4, 470f, 98, 1a, 2b, A7, 65, D4, 60, 4b)
#define ADO_Reserved_118 GUID_BUILDER (ADO_Reserved_118, E97D87A3, 8a95, 4080, 8c, A9, ED, 9f, 05, 1a, B7, B2)
#define ADO_Reserved_119 GUID_BUILDER (ADO_Reserved_119, C9EA1598, 2d23, 4978, 9b, 33, 3d, 2c, C4, 0a, B7, A1)
#define ADO_Reserved_120 GUID_BUILDER (ADO_Reserved_120, E41CA9FC, 7fc9, 4831, 90, CE, F5, 33, 96, CE, 42, C3)
#define ADO_Reserved_121 GUID_BUILDER (ADO_Reserved_121, 15df0905, 4acc, 44f7, A0, 1e, 0f, EF, 56, 3c, C4, E5)
#define ADO_Reserved_122 GUID_BUILDER (ADO_Reserved_122, D2879A0E, D0B3, 42a2, A1, 16, D1, 5e, 13, C7, 51, 77)
#define ADO_Reserved_123 GUID_BUILDER (ADO_Reserved_123, A999A8D2, 5e83, 4c0e, 83, 97, 18, 33, 19, 32, 79, CD)
#define ADO_Reserved_124 GUID_BUILDER (ADO_Reserved_124, C6AFAE72, B3FF, 48ab, B1, EE, F5, EE, F9, 05, DF, 47)
#define ADO_Reserved_125 GUID_BUILDER (ADO_Reserved_125, 0deadf50, 0940, 4f0e, AC, 3b, 94, 80, B7, 32, 2b, 1b)
#define ADO_Reserved_126 GUID_BUILDER (ADO_Reserved_126, 61278818, 2fe6, 4892, 8b, 95, A7, 5c, AC, 6e, 21, BB)
#define ADO_Reserved_127 GUID_BUILDER (ADO_Reserved_127, 3ac2bed7, 1111, 4e55, B2, 06, 1f, 54, 18, 94, 4c, BA)
#define ADO_Reserved_128 GUID_BUILDER (ADO_Reserved_128, 3d4751e2, 04b8, 4593, A0, 0d, 3a, 4b, 94, 67, 4b, E9)
#define ADO_Reserved_129 GUID_BUILDER (ADO_Reserved_129, 69bc6751, FE10, 4b3f, 89, 35, 40, 2f, A5, FD, 04, 82)
#define ADO_Reserved_130 GUID_BUILDER (ADO_Reserved_130, 5867af81, 995a, 4686, 8b, CB, 13, B6, 8b, 10, 26, 8a)
#define ADO_Reserved_131 GUID_BUILDER (ADO_Reserved_131, DA46C62F, BDCD, 4745, A3, CA, 4e, C9, FA, AB, E1, 10)
#define ADO_Reserved_132 GUID_BUILDER (ADO_Reserved_132, 93028aa6, EECC, 482f, B3, A4, 2f, D4, 13, 04, 96, 5e)
#define ADO_Reserved_133 GUID_BUILDER (ADO_Reserved_133, AB14F604, D05E, 4e50, A4, 5b, A8, 10, 48, E3, A4, 75)
#define ADO_Reserved_134 GUID_BUILDER (ADO_Reserved_134, 35267875, 8420, 4226, 87, C0, 25, 00, 58, 56, 0f, D2)
#define ADO_Reserved_135 GUID_BUILDER (ADO_Reserved_135, 16e34932, EEFA, 440e, A7, 86, 6a, 36, D2, C6, 21, 69)
#define ADO_Reserved_136 GUID_BUILDER (ADO_Reserved_136, 2710a15a, B2B0, 46ec, BD, EC, E2, 2e, A8, A6, 28, FA)
#define ADO_Reserved_137 GUID_BUILDER (ADO_Reserved_137, 2777696f, CB34, 4cc4, A0, A9, 02, EA, 15, 16, 63, DD)
#define ADO_Reserved_138 GUID_BUILDER (ADO_Reserved_138, D11CA1A0, A261, 4ba2, 81, 68, 46, 52, 32, 9a, 60, 77)
#define ADO_Reserved_139 GUID_BUILDER (ADO_Reserved_139, C33509A8, 883f, 4bea, AF, B5, 35, 26, CF, 0b, 8b, E1)
#define ADO_Reserved_140 GUID_BUILDER (ADO_Reserved_140, DEBDC8E1, 4f02, 43e1, 8c, 88, 0b, A8, E1, 50, 6b, F5)
#define ADO_Reserved_141 GUID_BUILDER (ADO_Reserved_141, 552f8531, 3f79, 4db3, 87, 7b, 8e, 54, C3, 5b, 38, 54)
#define ADO_Reserved_142 GUID_BUILDER (ADO_Reserved_142, 1e6a2bf4, 241c, 48a1, 90, 66, C6, E1, E5, 2b, 0a, 4b)
#define ADO_Reserved_143 GUID_BUILDER (ADO_Reserved_143, 8e5b2a8d, 1f0d, 429d, 94, 95, 16, F8, E9, 58, 06, 80)
#define ADO_Reserved_144 GUID_BUILDER (ADO_Reserved_144, 57faec9d, 5cde, 4ebe, 84, A1, 5a, CB, 75, 7c, D4, 51)
#define ADO_Reserved_145 GUID_BUILDER (ADO_Reserved_145, 707b03c3, A3B0, 4f00, 81, 61, 6e, 3f, 02, 7f, F0, B3)
#define ADO_Reserved_146 GUID_BUILDER (ADO_Reserved_146, 5dd552f4, 0718, 4bdd, 82, 6c, 7c, C3, 5c, DA, 1d, 93)
#define ADO_Reserved_147 GUID_BUILDER (ADO_Reserved_147, F3247F33, E377, 4a44, A9, 37, AC, E6, 36, F6, 58, 1f)
#define ADO_Reserved_148 GUID_BUILDER (ADO_Reserved_148, E7C324C4, 38a5, 42a8, 99, FF, 34, 5d, AD, 8c, D2, 29)
#define ADO_Reserved_149 GUID_BUILDER (ADO_Reserved_149, D14FCA70, 390d, 4158, B5, C3, 9a, 02, D1, F7, 85, 87)
#define ADO_Reserved_150 GUID_BUILDER (ADO_Reserved_150, 58d30b5f, 92a5, 4ef4, 8e, 45, A0, 24, A9, CD, F9, FE)
#define ADO_Reserved_151 GUID_BUILDER (ADO_Reserved_151, 9673df76, 73e4, 4c66, 89, 14, 7f, A4, 17, 43, 6c, 4a)
#define ADO_Reserved_152 GUID_BUILDER (ADO_Reserved_152, 9fa8a7e1, CF3C, 4a61, BE, 10, 1d, 85, 5f, A0, D5, 08)
#define ADO_Reserved_153 GUID_BUILDER (ADO_Reserved_153, B657729F, 6cc7, 4392, BD, 56, DC, ED, 6e, 53, F6, 4c)
#define ADO_Reserved_154 GUID_BUILDER (ADO_Reserved_154, 06e5224b, 8c27, 4f41, 8f, B7, C6, 41, E4, C5, 04, 2d)
#define ADO_Reserved_155 GUID_BUILDER (ADO_Reserved_155, 2268a619, CC1D, 4f72, B8, 3f, 79, 63, C0, 13, B1, 3d)
#define ADO_Reserved_156 GUID_BUILDER (ADO_Reserved_156, FB4810F3, 3a65, 4c33, B3, 99, B5, C9, 33, 11, 11, D7)
#define ADO_Reserved_157 GUID_BUILDER (ADO_Reserved_157, 9011be74, 6c9d, 44f7, BE, 2c, 8a, 2a, BB, 62, 51, AC)
#define ADO_Reserved_158 GUID_BUILDER (ADO_Reserved_158, 3145c182, 82c6, 4082, BB, E7, 79, 1a, 2f, 49, 6c, B1)
#define ADO_Reserved_159 GUID_BUILDER (ADO_Reserved_159, D8865377, 8799, 4c08, 97, E5, D6, 7e, 88, 6f, F5, 49)
#define ADO_Reserved_160 GUID_BUILDER (ADO_Reserved_160, 8993232e, 8afa, 4552, A7, 8c, C6, 6c, 9d, 3a, E6, D0)
#define ADO_Reserved_161 GUID_BUILDER (ADO_Reserved_161, 40af1931, 8721, 427b, 83, 5e, 50, 87, 79, BD, 1e, B2)
#define ADO_Reserved_162 GUID_BUILDER (ADO_Reserved_162, 9c6e2b26, 4468, 427c, 8c, F5, 01, 14, 7d, B8, DF, 22)
#define ADO_Reserved_163 GUID_BUILDER (ADO_Reserved_163, 3537fa93, 7e92, 4ce0, 80, 96, EF, DC, 1a, 80, A8, 95)
#define ADO_Reserved_164 GUID_BUILDER (ADO_Reserved_164, 36992492, 3e17, 47c1, AB, 98, 5f, 0c, 49, B4, 6a, 25)
#define ADO_Reserved_165 GUID_BUILDER (ADO_Reserved_165, 01662edb, CE23, 4215, AE, 9d, 51, 51, E6, DA, 36, 3c)
#define ADO_Reserved_166 GUID_BUILDER (ADO_Reserved_166, 80b4a97b, 5256, 4397, 89, CD, 4e, F9, 91, 0f, 1d, E6)
#define ADO_Reserved_167 GUID_BUILDER (ADO_Reserved_167, C2341A38, 2c6b, 414e, 96, A8, 8b, 5e, 47, F8, 14, DA)
#define ADO_Reserved_168 GUID_BUILDER (ADO_Reserved_168, 5c2b7578, 53fa, 4ace, 8e, 6c, 39, 18, 2f, 68, D2, 67)
#define ADO_Reserved_169 GUID_BUILDER (ADO_Reserved_169, B80C1E36, 611b, 49d4, 97, 19, 4e, 0c, 59, 0e, 2e, E1)
#define ADO_Reserved_170 GUID_BUILDER (ADO_Reserved_170, BA269EB4, B741, 4fb2, A9, C9, 52, 4c, 9d, BE, 7c, 16)
#define ADO_Reserved_171 GUID_BUILDER (ADO_Reserved_171, EE49769D, 1028, 4429, A9, 66, 2f, A8, 1d, 70, EE, 19)
#define ADO_Reserved_172 GUID_BUILDER (ADO_Reserved_172, 541fc621, D6E6, 4cc4, B4, 98, 8e, 4f, AA, A0, 65, BF)
#define ADO_Reserved_173 GUID_BUILDER (ADO_Reserved_173, AA8B544C, 4067, 4e00, 96, 09, 95, EE, 21, 68, AF, CE)
#define ADO_Reserved_174 GUID_BUILDER (ADO_Reserved_174, 5b161b2b, D02C, 4300, A1, 54, CF, DC, 25, 3b, 13, 0d)
#define ADO_Reserved_175 GUID_BUILDER (ADO_Reserved_175, 81f62203, 182e, 42de, B1, B7, 63, 5f, C6, 6f, 6e, 9e)
#define ADO_Reserved_176 GUID_BUILDER (ADO_Reserved_176, 04934bdd, A530, 48ec, 91, CE, 11, 83, 42, 5b, DB, 61)
#define ADO_Reserved_177 GUID_BUILDER (ADO_Reserved_177, F6997841, 9a99, 48aa, B0, 56, 8c, 75, 17, 06, 41, 7f)
#define ADO_Reserved_178 GUID_BUILDER (ADO_Reserved_178, 353fe3f1, DE50, 45ee, 91, E9, 3e, 62, E3, C7, 86, 04)
#define ADO_Reserved_179 GUID_BUILDER (ADO_Reserved_179, F142C8C6, 9e24, 422e, 81, BD, D2, 94, 7f, 93, 94, D4)
#define ADO_Reserved_180 GUID_BUILDER (ADO_Reserved_180, 95951773, 9566, 46c9, 86, B0, 40, ED, 25, 46, 02, 93)
#define ADO_Reserved_181 GUID_BUILDER (ADO_Reserved_181, 54140563, 0f25, 4f56, 9d, 8f, B6, DE, CB, 96, DC, E4)
#define ADO_Reserved_182 GUID_BUILDER (ADO_Reserved_182, 91a48243, AE16, 48cf, 82, 29, 00, 00, F8, 3c, 5e, FC)
#define ADO_Reserved_183 GUID_BUILDER (ADO_Reserved_183, E0FA1A1F, 3967, 4392, AB, 1a, E2, 8b, 85, 04, 68, CA)
#define ADO_Reserved_184 GUID_BUILDER (ADO_Reserved_184, 5582d772, ABAC, 4a85, A0, B3, 2e, 65, E1, 71, 10, 53)
#define ADO_Reserved_185 GUID_BUILDER (ADO_Reserved_185, 1cd1f347, 8fb4, 49a2, B5, 65, A6, 74, A0, C1, 45, 0e)
#define ADO_Reserved_186 GUID_BUILDER (ADO_Reserved_186, 0ec3aa4e, FEF5, 4a5c, BD, 0a, E9, CD, B7, 6a, 5f, 30)
#define ADO_Reserved_187 GUID_BUILDER (ADO_Reserved_187, 4118414d, 4a21, 46da, 88, C1, EF, A7, 01, 8c, 45, 27)
#define ADO_Reserved_188 GUID_BUILDER (ADO_Reserved_188, D5C1CC0D, E38E, 4cb6, 89, D9, 99, 27, 7f, 12, D1, 9e)
#define ADO_Reserved_189 GUID_BUILDER (ADO_Reserved_189, 0956b82a, 94a7, 474e, A5, 05, 1a, 76, 26, 36, AF, 08)
#define ADO_Reserved_190 GUID_BUILDER (ADO_Reserved_190, 2cbf62ab, B8E4, 48d0, B5, 01, 69, CF, 63, 3c, AA, E6)
#define ADO_Reserved_191 GUID_BUILDER (ADO_Reserved_191, C02B8113, AECF, 4a34, B3, E9, 5b, 52, 4e, 51, 44, B5)
#define ADO_Reserved_192 GUID_BUILDER (ADO_Reserved_192, 1c90947b, 4a3a, 4ecd, 8c, 70, F4, 3f, E5, 2d, 46, 45)
#define ADO_Reserved_193 GUID_BUILDER (ADO_Reserved_193, 48175e98, 6672, 4db4, B5, 74, 8c, 93, 25, 8d, BF, 14)
#define ADO_Reserved_194 GUID_BUILDER (ADO_Reserved_194, 99cb88bf, E5C1, 4af0, 85, 00, 72, 36, 47, DC, D2, 05)
#define ADO_Reserved_195 GUID_BUILDER (ADO_Reserved_195, 6a2cc3cc, 7855, 4b27, 86, F7, 98, 6b, AA, F9, 5f, 0f)
#define ADO_Reserved_196 GUID_BUILDER (ADO_Reserved_196, 7640b336, 9ebb, 4017, 9e, EE, 54, 01, F4, EC, B1, 70)
#define ADO_Reserved_197 GUID_BUILDER (ADO_Reserved_197, 507b39e1, 2965, 42ea, 92, 66, 55, 8d, E4, 31, 53, 73)
#define ADO_Reserved_198 GUID_BUILDER (ADO_Reserved_198, 58c591fa, 37ff, 4428, A0, 4a, 46, 71, 98, 17, 74, 8c)
#define ADO_Reserved_199 GUID_BUILDER (ADO_Reserved_199, 24be98e9, B43D, 49b5, 9c, 41, 20, AF, C2, FE, 1d, 8d)
#define ADO_Reserved_200 GUID_BUILDER (ADO_Reserved_200, 041956c5, B951, 4c8f, 8c, 61, 8e, 12, 34, E1, E9, 61)
#define ADO_Reserved_201 GUID_BUILDER (ADO_Reserved_201, 6c98d05c, D366, 48b4, 80, E3, 8f, A1, CC, 06, 1d, B7)
#define ADO_Reserved_202 GUID_BUILDER (ADO_Reserved_202, 09570783, A1E8, 4a52, BA, 74, 6c, AC, 02, C0, 14, 8c)
#define ADO_Reserved_203 GUID_BUILDER (ADO_Reserved_203, 96c8c205, FD0D, 4b56, 9a, 12, 39, B3, 7e, 9d, 07, 4d)
#define ADO_Reserved_204 GUID_BUILDER (ADO_Reserved_204, 136c40e1, 366e, 4ba6, AF, 71, C4, 9a, EF, 17, 3f, C0)
#define ADO_Reserved_205 GUID_BUILDER (ADO_Reserved_205, A298C799, 06fb, 466e, B5, 6d, 3e, CC, 6d, 0c, D6, 75)
#define ADO_Reserved_206 GUID_BUILDER (ADO_Reserved_206, 41a96542, 08f2, 4609, B7, 6a, ED, 93, E5, 5b, 8c, 60)
#define ADO_Reserved_207 GUID_BUILDER (ADO_Reserved_207, 65a3b57e, 06f9, 4572, 80, 91, 17, 3f, C4, A6, 5a, 16)
#define ADO_Reserved_208 GUID_BUILDER (ADO_Reserved_208, 114f3e9d, 5431, 4dc1, 95, 42, 9b, 85, 44, CF, 83, B2)
#define ADO_Reserved_209 GUID_BUILDER (ADO_Reserved_209, 41de92d4, 9f2a, 4085, 8c, C1, C1, 04, 3e, 5b, 11, 12)
#define ADO_Reserved_210 GUID_BUILDER (ADO_Reserved_210, E32A7A98, FF1E, 45c9, AA, 51, 5f, 86, 9a, 9a, 48, 57)
#define ADO_Reserved_211 GUID_BUILDER (ADO_Reserved_211, 5e5a209f, 3efc, 48bc, A7, 1e, F4, CE, BE, 4c, A6, 25)
#define ADO_Reserved_212 GUID_BUILDER (ADO_Reserved_212, C556C1CC, 8b2e, 482b, B7, 8c, E2, F6, FD, A0, 4f, 4d)
#define ADO_Reserved_213 GUID_BUILDER (ADO_Reserved_213, 39c54fd9, A22A, 43d4, A4, 36, D9, CB, C5, 53, D5, 5a)
#define ADO_Reserved_214 GUID_BUILDER (ADO_Reserved_214, 750e0ba2, E25C, 479f, B0, C1, 58, 44, A1, 4d, 08, 77)
#define ADO_Reserved_215 GUID_BUILDER (ADO_Reserved_215, 7ecbdb2c, C5C2, 48fb, 8a, 3a, 30, B7, E7, BD, 17, 25)
#define ADO_Reserved_216 GUID_BUILDER (ADO_Reserved_216, 0bf18ac7, 8be1, 49e6, A8, 57, EA, 89, 3a, 83, 58, F5)
#define ADO_Reserved_217 GUID_BUILDER (ADO_Reserved_217, DA74EAB6, AAFE, 42ad, 8a, 0d, B2, 73, 35, 0c, 82, E3)
#define ADO_Reserved_218 GUID_BUILDER (ADO_Reserved_218, F6A3D173, E366, 424a, AD, 0c, 25, 5c, 32, 2d, 09, 80)
#define ADO_Reserved_219 GUID_BUILDER (ADO_Reserved_219, 7cd83ba3, 0516, 4366, BB, 85, DE, 53, 03, F7, 75, 08)
#define ADO_Reserved_220 GUID_BUILDER (ADO_Reserved_220, 42edfc05, 3a70, 4f5c, 8c, 32, 06, 5e, 61, 45, 3c, BE)
#define ADO_Reserved_221 GUID_BUILDER (ADO_Reserved_221, 624bc037, 05b0, 44e1, 85, A7, 73, C4, 7f, A0, CC, 04)
#define ADO_Reserved_222 GUID_BUILDER (ADO_Reserved_222, 8811f8dd, FA15, 4fa6, A7, 6e, 7e, DA, E7, 0d, EC, D4)
#define ADO_Reserved_223 GUID_BUILDER (ADO_Reserved_223, DD310D89, 9f22, 4f49, 89, 8c, AF, A2, 7f, AF, 11, 1c)
#define ADO_Reserved_224 GUID_BUILDER (ADO_Reserved_224, 321e3a7d, DF0E, 4ff7, 98, 5d, F6, E6, 73, FD, E2, 9f)
#define ADO_Reserved_225 GUID_BUILDER (ADO_Reserved_225, 036d1b77, 3737, 47cb, 9e, 75, 31, 13, 13, 2d, 32, B8)
#define ADO_Reserved_226 GUID_BUILDER (ADO_Reserved_226, A46B9E8C, 4740, 4919, 86, 34, A3, 57, 73, F6, 53, 2f)
#define ADO_Reserved_227 GUID_BUILDER (ADO_Reserved_227, 7c064e3a, 014e, 4733, 9d, 00, 5d, 03, 13, F7, B7, F5)
#define ADO_Reserved_228 GUID_BUILDER (ADO_Reserved_228, 7cbff995, A041, 4b0a, B7, 9b, 16, 3a, 74, 2c, DC, CF)
#define ADO_Reserved_229 GUID_BUILDER (ADO_Reserved_229, C3271965, BA03, 4abc, 8f, D8, 98, 97, 7e, 4c, B3, 9a)
#define ADO_Reserved_230 GUID_BUILDER (ADO_Reserved_230, 565dc4b1, 8d7a, 41c6, AE, 01, 6c, EF, 63, 46, 4d, 5e)
#define ADO_Reserved_231 GUID_BUILDER (ADO_Reserved_231, 3331e567, EB74, 45d2, 86, 32, 20, 43, 47, DB, BE, 04)
#define ADO_Reserved_232 GUID_BUILDER (ADO_Reserved_232, 3cee44a8, 6fc5, 4cd5, AA, 9d, 1b, 67, 4c, B6, 2e, EC)
#define ADO_Reserved_233 GUID_BUILDER (ADO_Reserved_233, CD1BE145, 71b9, 4ccd, A7, AF, 5b, BA, A0, 2a, 51, E6)
#define ADO_Reserved_234 GUID_BUILDER (ADO_Reserved_234, 4203c429, F3F0, 4dd7, 91, 24, 51, E0, 13, 95, 5e, 7a)
#define ADO_Reserved_235 GUID_BUILDER (ADO_Reserved_235, BB256836, 2804, 492f, 9c, B2, CF, 83, CB, 82, 63, 8a)
#define ADO_Reserved_236 GUID_BUILDER (ADO_Reserved_236, 8b247756, 34aa, 45ef, B1, 24, A9, 60, 66, AC, E8, D6)
#define ADO_Reserved_237 GUID_BUILDER (ADO_Reserved_237, EF1CF73C, 4915, 4289, AD, C4, DD, DA, 62, 70, 70, A6)
#define ADO_Reserved_238 GUID_BUILDER (ADO_Reserved_238, D0EB0A94, 91a0, 49d3, 97, 26, 94, 52, 66, 5a, FE, 53)
#define ADO_Reserved_239 GUID_BUILDER (ADO_Reserved_239, D6F5003E, 4c06, 47b1, 89, E9, D6, 3c, 3d, 7d, 41, B6)
#define ADO_Reserved_240 GUID_BUILDER (ADO_Reserved_240, AA803151, F4AE, 4ce3, BC, 92, 97, 1c, 84, 2e, F5, BC)
#define ADO_Reserved_241 GUID_BUILDER (ADO_Reserved_241, C4BB086F, 5b11, 4c67, 98, 6c, 8c, D4, 8c, 5c, E3, 8b)
#define ADO_Reserved_242 GUID_BUILDER (ADO_Reserved_242, F1C4A502, 4744, 478f, 87, 71, C6, 94, CC, 2d, F7, B6)
#define ADO_Reserved_243 GUID_BUILDER (ADO_Reserved_243, 2cd39761, F389, 4f5e, BE, 91, A6, B9, 1b, 18, AD, 12)
#define ADO_Reserved_244 GUID_BUILDER (ADO_Reserved_244, 8895ba8f, 0cb7, 4354, A8, EA, CD, 9d, F4, 1b, F8, 88)
#define ADO_Reserved_245 GUID_BUILDER (ADO_Reserved_245, 71e0b0dc, 1245, 441d, 92, 92, 32, 71, 3f, 57, 97, 7a)
#define ADO_Reserved_246 GUID_BUILDER (ADO_Reserved_246, 7604d0cb, F137, 472d, 8b, 4c, 85, 66, 72, 9a, CF, 03)
#define ADO_Reserved_247 GUID_BUILDER (ADO_Reserved_247, 94c9b5ac, 8309, 4f4b, 8e, 68, C4, 37, 7e, C2, B7, 91)
#define ADO_Reserved_248 GUID_BUILDER (ADO_Reserved_248, 0e555180, 5e2c, 4bf6, 90, A0, 1b, 36, 3d, 4b, B9, 99)
#define ADO_Reserved_249 GUID_BUILDER (ADO_Reserved_249, C077D666, 6988, 4eac, A5, 52, 61, 61, 55, F9, 6a, 12)

#ifdef IMMEDIATE_GUID_USE
ADO_Reserved_4;
ADO_Reserved_6; ADO_Reserved_7; ADO_Reserved_8; ADO_Reserved_9;
ADO_Reserved_10; ADO_Reserved_12; ADO_Reserved_13; ADO_Reserved_14;
ADO_Reserved_15; ADO_Reserved_16; ADO_Reserved_17; ADO_Reserved_18; ADO_Reserved_19;
ADO_Reserved_20; ADO_Reserved_21; ADO_Reserved_22; ADO_Reserved_23; ADO_Reserved_24;
ADO_Reserved_25; ADO_Reserved_26; ADO_Reserved_27; ADO_Reserved_28; ADO_Reserved_29;
ADO_Reserved_30; ADO_Reserved_31; ADO_Reserved_32; ADO_Reserved_33; ADO_Reserved_34;
ADO_Reserved_35; ADO_Reserved_36; ADO_Reserved_37; ADO_Reserved_38; ADO_Reserved_39;
ADO_Reserved_40; ADO_Reserved_41; ADO_Reserved_42; ADO_Reserved_43; ADO_Reserved_44;
ADO_Reserved_45; ADO_Reserved_46; ADO_Reserved_47; ADO_Reserved_48; ADO_Reserved_49;
ADO_Reserved_50; ADO_Reserved_51; ADO_Reserved_52; ADO_Reserved_53; ADO_Reserved_54;
ADO_Reserved_55; ADO_Reserved_56; ADO_Reserved_57; ADO_Reserved_58; ADO_Reserved_59;
ADO_Reserved_60; ADO_Reserved_61; ADO_Reserved_62; ADO_Reserved_63; ADO_Reserved_64;
ADO_Reserved_65; ADO_Reserved_66; ADO_Reserved_67; ADO_Reserved_68; ADO_Reserved_69;
ADO_Reserved_70; ADO_Reserved_71; ADO_Reserved_72; ADO_Reserved_73; ADO_Reserved_74;
ADO_Reserved_75; ADO_Reserved_76; ADO_Reserved_77; ADO_Reserved_78; ADO_Reserved_79;
ADO_Reserved_80; ADO_Reserved_81; ADO_Reserved_82; ADO_Reserved_83; ADO_Reserved_84;
ADO_Reserved_85; ADO_Reserved_86; ADO_Reserved_87; ADO_Reserved_88; ADO_Reserved_89;
ADO_Reserved_90; ADO_Reserved_91; ADO_Reserved_92; ADO_Reserved_93; ADO_Reserved_94;
ADO_Reserved_95; ADO_Reserved_96; ADO_Reserved_97; ADO_Reserved_98; ADO_Reserved_99;
ADO_Reserved_100; ADO_Reserved_101; ADO_Reserved_102; ADO_Reserved_103; ADO_Reserved_104;
ADO_Reserved_105; ADO_Reserved_106; ADO_Reserved_107; ADO_Reserved_108; ADO_Reserved_109;
ADO_Reserved_110; ADO_Reserved_111; ADO_Reserved_112; ADO_Reserved_113; ADO_Reserved_114;
ADO_Reserved_115; ADO_Reserved_116; ADO_Reserved_117; ADO_Reserved_118; ADO_Reserved_119;
ADO_Reserved_120; ADO_Reserved_121; ADO_Reserved_122; ADO_Reserved_123; ADO_Reserved_124;
ADO_Reserved_125; ADO_Reserved_126; ADO_Reserved_127; ADO_Reserved_128; ADO_Reserved_129;
ADO_Reserved_130; ADO_Reserved_131; ADO_Reserved_132; ADO_Reserved_133; ADO_Reserved_134;
ADO_Reserved_135; ADO_Reserved_136; ADO_Reserved_137; ADO_Reserved_138; ADO_Reserved_139;
ADO_Reserved_140; ADO_Reserved_141; ADO_Reserved_142; ADO_Reserved_143; ADO_Reserved_144;
ADO_Reserved_145; ADO_Reserved_146; ADO_Reserved_147; ADO_Reserved_148; ADO_Reserved_149;
ADO_Reserved_150; ADO_Reserved_151; ADO_Reserved_152; ADO_Reserved_153; ADO_Reserved_154;
ADO_Reserved_155; ADO_Reserved_156; ADO_Reserved_157; ADO_Reserved_158; ADO_Reserved_159;
ADO_Reserved_160; ADO_Reserved_161; ADO_Reserved_162; ADO_Reserved_163; ADO_Reserved_164;
ADO_Reserved_165; ADO_Reserved_166; ADO_Reserved_167; ADO_Reserved_168; ADO_Reserved_169;
ADO_Reserved_170; ADO_Reserved_171; ADO_Reserved_172; ADO_Reserved_173; ADO_Reserved_174;
ADO_Reserved_175; ADO_Reserved_176; ADO_Reserved_177; ADO_Reserved_178; ADO_Reserved_179;
ADO_Reserved_180; ADO_Reserved_181; ADO_Reserved_182; ADO_Reserved_183; ADO_Reserved_184;
ADO_Reserved_185; ADO_Reserved_186; ADO_Reserved_187; ADO_Reserved_188; ADO_Reserved_189;
ADO_Reserved_190; ADO_Reserved_191; ADO_Reserved_192; ADO_Reserved_193; ADO_Reserved_194;
ADO_Reserved_195; ADO_Reserved_196; ADO_Reserved_197; ADO_Reserved_198; ADO_Reserved_199;
ADO_Reserved_200; ADO_Reserved_201; ADO_Reserved_202; ADO_Reserved_203; ADO_Reserved_204;
ADO_Reserved_205; ADO_Reserved_206; ADO_Reserved_207; ADO_Reserved_208; ADO_Reserved_209;
ADO_Reserved_210; ADO_Reserved_211; ADO_Reserved_212; ADO_Reserved_213; ADO_Reserved_214;
ADO_Reserved_215; ADO_Reserved_216; ADO_Reserved_217; ADO_Reserved_218; ADO_Reserved_219;
ADO_Reserved_220; ADO_Reserved_221; ADO_Reserved_222; ADO_Reserved_223; ADO_Reserved_224;
ADO_Reserved_225; ADO_Reserved_226; ADO_Reserved_227; ADO_Reserved_228; ADO_Reserved_229;
ADO_Reserved_230; ADO_Reserved_231; ADO_Reserved_232; ADO_Reserved_233; ADO_Reserved_234;
ADO_Reserved_235; ADO_Reserved_236; ADO_Reserved_237; ADO_Reserved_238; ADO_Reserved_239;
ADO_Reserved_240; ADO_Reserved_241; ADO_Reserved_242; ADO_Reserved_243; ADO_Reserved_244;
ADO_Reserved_245; ADO_Reserved_246; ADO_Reserved_247; ADO_Reserved_248; ADO_Reserved_249;

#undef ADO_Reserved_4
#undef ADO_Reserved_6
#undef ADO_Reserved_7
#undef ADO_Reserved_8
#undef ADO_Reserved_9
#undef ADO_Reserved_10
#undef ADO_Reserved_12
#undef ADO_Reserved_13
#undef ADO_Reserved_14
#undef ADO_Reserved_15
#undef ADO_Reserved_16
#undef ADO_Reserved_17
#undef ADO_Reserved_18
#undef ADO_Reserved_19
#undef ADO_Reserved_20
#undef ADO_Reserved_21
#undef ADO_Reserved_22
#undef ADO_Reserved_23
#undef ADO_Reserved_24
#undef ADO_Reserved_25
#undef ADO_Reserved_26
#undef ADO_Reserved_27
#undef ADO_Reserved_28
#undef ADO_Reserved_29
#undef ADO_Reserved_30
#undef ADO_Reserved_31
#undef ADO_Reserved_32
#undef ADO_Reserved_33
#undef ADO_Reserved_34
#undef ADO_Reserved_35
#undef ADO_Reserved_36
#undef ADO_Reserved_37
#undef ADO_Reserved_38
#undef ADO_Reserved_39
#undef ADO_Reserved_40
#undef ADO_Reserved_41
#undef ADO_Reserved_42
#undef ADO_Reserved_43
#undef ADO_Reserved_44
#undef ADO_Reserved_45
#undef ADO_Reserved_46
#undef ADO_Reserved_47
#undef ADO_Reserved_48
#undef ADO_Reserved_49
#undef ADO_Reserved_50
#undef ADO_Reserved_51
#undef ADO_Reserved_52
#undef ADO_Reserved_53
#undef ADO_Reserved_54
#undef ADO_Reserved_55
#undef ADO_Reserved_56
#undef ADO_Reserved_57
#undef ADO_Reserved_58
#undef ADO_Reserved_59
#undef ADO_Reserved_60
#undef ADO_Reserved_61
#undef ADO_Reserved_62
#undef ADO_Reserved_63
#undef ADO_Reserved_64
#undef ADO_Reserved_65
#undef ADO_Reserved_66
#undef ADO_Reserved_67
#undef ADO_Reserved_68
#undef ADO_Reserved_69
#undef ADO_Reserved_70
#undef ADO_Reserved_71
#undef ADO_Reserved_72
#undef ADO_Reserved_73
#undef ADO_Reserved_74
#undef ADO_Reserved_75
#undef ADO_Reserved_76
#undef ADO_Reserved_77
#undef ADO_Reserved_78
#undef ADO_Reserved_79
#undef ADO_Reserved_80
#undef ADO_Reserved_81
#undef ADO_Reserved_82
#undef ADO_Reserved_83
#undef ADO_Reserved_84
#undef ADO_Reserved_85
#undef ADO_Reserved_86
#undef ADO_Reserved_87
#undef ADO_Reserved_88
#undef ADO_Reserved_89
#undef ADO_Reserved_90
#undef ADO_Reserved_91
#undef ADO_Reserved_92
#undef ADO_Reserved_93
#undef ADO_Reserved_94
#undef ADO_Reserved_95
#undef ADO_Reserved_96
#undef ADO_Reserved_97
#undef ADO_Reserved_98
#undef ADO_Reserved_99
#undef ADO_Reserved_100
#undef ADO_Reserved_101
#undef ADO_Reserved_102
#undef ADO_Reserved_103
#undef ADO_Reserved_104
#undef ADO_Reserved_105
#undef ADO_Reserved_106
#undef ADO_Reserved_107
#undef ADO_Reserved_108
#undef ADO_Reserved_109
#undef ADO_Reserved_110
#undef ADO_Reserved_111
#undef ADO_Reserved_112
#undef ADO_Reserved_113
#undef ADO_Reserved_114
#undef ADO_Reserved_115
#undef ADO_Reserved_116
#undef ADO_Reserved_117
#undef ADO_Reserved_118
#undef ADO_Reserved_119
#undef ADO_Reserved_120
#undef ADO_Reserved_121
#undef ADO_Reserved_122
#undef ADO_Reserved_123
#undef ADO_Reserved_124
#undef ADO_Reserved_125
#undef ADO_Reserved_126
#undef ADO_Reserved_127
#undef ADO_Reserved_128
#undef ADO_Reserved_129
#undef ADO_Reserved_130
#undef ADO_Reserved_131
#undef ADO_Reserved_132
#undef ADO_Reserved_133
#undef ADO_Reserved_134
#undef ADO_Reserved_135
#undef ADO_Reserved_136
#undef ADO_Reserved_137
#undef ADO_Reserved_138
#undef ADO_Reserved_139
#undef ADO_Reserved_140
#undef ADO_Reserved_141
#undef ADO_Reserved_142
#undef ADO_Reserved_143
#undef ADO_Reserved_144
#undef ADO_Reserved_145
#undef ADO_Reserved_146
#undef ADO_Reserved_147
#undef ADO_Reserved_148
#undef ADO_Reserved_149
#undef ADO_Reserved_150
#undef ADO_Reserved_151
#undef ADO_Reserved_152
#undef ADO_Reserved_153
#undef ADO_Reserved_154
#undef ADO_Reserved_155
#undef ADO_Reserved_156
#undef ADO_Reserved_157
#undef ADO_Reserved_158
#undef ADO_Reserved_159
#undef ADO_Reserved_160
#undef ADO_Reserved_161
#undef ADO_Reserved_162
#undef ADO_Reserved_163
#undef ADO_Reserved_164
#undef ADO_Reserved_165
#undef ADO_Reserved_166
#undef ADO_Reserved_167
#undef ADO_Reserved_168
#undef ADO_Reserved_169
#undef ADO_Reserved_170
#undef ADO_Reserved_171
#undef ADO_Reserved_172
#undef ADO_Reserved_173
#undef ADO_Reserved_174
#undef ADO_Reserved_175
#undef ADO_Reserved_176
#undef ADO_Reserved_177
#undef ADO_Reserved_178
#undef ADO_Reserved_179
#undef ADO_Reserved_180
#undef ADO_Reserved_181
#undef ADO_Reserved_182
#undef ADO_Reserved_183
#undef ADO_Reserved_184
#undef ADO_Reserved_185
#undef ADO_Reserved_186
#undef ADO_Reserved_187
#undef ADO_Reserved_188
#undef ADO_Reserved_189
#undef ADO_Reserved_190
#undef ADO_Reserved_191
#undef ADO_Reserved_192
#undef ADO_Reserved_193
#undef ADO_Reserved_194
#undef ADO_Reserved_195
#undef ADO_Reserved_196
#undef ADO_Reserved_197
#undef ADO_Reserved_198
#undef ADO_Reserved_199
#undef ADO_Reserved_200
#undef ADO_Reserved_201
#undef ADO_Reserved_202
#undef ADO_Reserved_203
#undef ADO_Reserved_204
#undef ADO_Reserved_205
#undef ADO_Reserved_206
#undef ADO_Reserved_207
#undef ADO_Reserved_208
#undef ADO_Reserved_209
#undef ADO_Reserved_210
#undef ADO_Reserved_211
#undef ADO_Reserved_212
#undef ADO_Reserved_213
#undef ADO_Reserved_214
#undef ADO_Reserved_215
#undef ADO_Reserved_216
#undef ADO_Reserved_217
#undef ADO_Reserved_218
#undef ADO_Reserved_219
#undef ADO_Reserved_220
#undef ADO_Reserved_221
#undef ADO_Reserved_222
#undef ADO_Reserved_223
#undef ADO_Reserved_224
#undef ADO_Reserved_225
#undef ADO_Reserved_226
#undef ADO_Reserved_227
#undef ADO_Reserved_228
#undef ADO_Reserved_229
#undef ADO_Reserved_230
#undef ADO_Reserved_231
#undef ADO_Reserved_232
#undef ADO_Reserved_233
#undef ADO_Reserved_234
#undef ADO_Reserved_235
#undef ADO_Reserved_236
#undef ADO_Reserved_237
#undef ADO_Reserved_238
#undef ADO_Reserved_239
#undef ADO_Reserved_240
#undef ADO_Reserved_241
#undef ADO_Reserved_242
#undef ADO_Reserved_243
#undef ADO_Reserved_244
#undef ADO_Reserved_245
#undef ADO_Reserved_246
#undef ADO_Reserved_247
#undef ADO_Reserved_248
#undef ADO_Reserved_249
#endif

#endif

#endif
                                                                                          usr/share/mingw-w64/include/adogpool_backcompat.h                                                   0100644 0000000 0000000 00000161277 12404413022 020511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#include <winapifamily.h>

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)

#ifndef INCLUDING_ADOGUIDS
#error Include via adoguids.h header only
#endif

#define MAXAVAILABLEGUID 0x570
#define MAXAVAILABLEGUIDALL 0x57f

#define LIBID_ADO LIBID_ADO60
#define LIBID_ADOR LIBID_ADOR20
#define LIBID_CADO10 LIBID_ADO20
#define LIBID_CADOR10 LIBID_ADOR20

#define CLSID_ADO GUID_BUILDER (CLSID_ADO, 0000051a, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOCommand GUID_BUILDER (CLSID_CADOCommand, 00000507, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOConnection GUID_BUILDER (CLSID_CADOConnection, 00000514, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOError GUID_BUILDER (CLSID_CADOError, 00000541, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOErrorLookup GUID_BUILDER (CLSID_CADOErrorLookup, 00000542, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOField GUID_BUILDER (CLSID_CADOField, 0000053a, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOParameter GUID_BUILDER (CLSID_CADOParameter, 0000050b, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADORecField GUID_BUILDER (CLSID_CADORecField, 00000561, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADORecord GUID_BUILDER (CLSID_CADORecord, 00000560, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADORecordset GUID_BUILDER (CLSID_CADORecordset, 00000535, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define CLSID_CADOStream GUID_BUILDER (CLSID_CADOStream, 00000566, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID__ADO GUID_BUILDER (IID__ADO, 00000534, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_ConnectionEvents GUID_BUILDER (IID_ConnectionEvents, 00000400, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_ConnectionEventsVt GUID_BUILDER (IID_ConnectionEventsVt, 00000402, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumAffect GUID_BUILDER (IID_EnumAffect, 00000543, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCEResync GUID_BUILDER (IID_EnumCEResync, 00000553, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCommandType GUID_BUILDER (IID_EnumCommandType, 0000052e, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCompare GUID_BUILDER (IID_EnumCompare, 00000545, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumConnectMode GUID_BUILDER (IID_EnumConnectMode, 00000521, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumConnectOption GUID_BUILDER (IID_EnumConnectOption, 00000541, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumConnectPrompt GUID_BUILDER (IID_EnumConnectPrompt, 00000520, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCopyRecordOptions GUID_BUILDER (IID_EnumCopyRecordOptions, 00000574, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCursorLocation GUID_BUILDER (IID_EnumCursorLocation, 0000052f, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCursorOption GUID_BUILDER (IID_EnumCursorOption, 0000051c, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumCursorType GUID_BUILDER (IID_EnumCursorType, 0000051b, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumDataType GUID_BUILDER (IID_EnumDataType, 0000051f, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumEditMode GUID_BUILDER (IID_EnumEditMode, 00000526, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumErrorValue GUID_BUILDER (IID_EnumErrorValue, 0000052a, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumEventReason GUID_BUILDER (IID_EnumEventReason, 00000531, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumEventStatus GUID_BUILDER (IID_EnumEventStatus, 00000530, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumExecuteOption GUID_BUILDER (IID_EnumExecuteOption, 0000051e, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumFieldAttribute GUID_BUILDER (IID_EnumFieldAttribute, 00000525, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumFieldStatus GUID_BUILDER (IID_EnumFieldStatus, 0000057e, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumFilterCriteria GUID_BUILDER (IID_EnumFilterCriteria, 0000052d, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumFilterGroup GUID_BUILDER (IID_EnumFilterGroup, 00000546, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumGetRowsOption GUID_BUILDER (IID_EnumGetRowsOption, 00000542, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumIsolationLevel GUID_BUILDER (IID_EnumIsolationLevel, 00000523, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumLineSeparator GUID_BUILDER (IID_EnumLineSeparator, 00000577, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumLockType GUID_BUILDER (IID_EnumLockType, 0000051d, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumMarshalOptions GUID_BUILDER (IID_EnumMarshalOptions, 00000540, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumMode GUID_BUILDER (IID_EnumMode, 00000575, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumMoveRecordOptions GUID_BUILDER (IID_EnumMoveRecordOptions, 00000573, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumObjectState GUID_BUILDER (IID_EnumObjectState, 00000532, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumParameterAttributes GUID_BUILDER (IID_EnumParameterAttributes, 0000052b, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumParameterDirection GUID_BUILDER (IID_EnumParameterDirection, 0000052c, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumPersistFormat GUID_BUILDER (IID_EnumPersistFormat, 00000548, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumPosition GUID_BUILDER (IID_EnumPosition, 00000528, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumPrepareOption GUID_BUILDER (IID_EnumPrepareOption, 00000522, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumPropertyAttributes GUID_BUILDER (IID_EnumPropertyAttributes, 00000529, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRDSAsyncThreadPriority GUID_BUILDER (IID_EnumRDSAsyncThreadPriority, 0000054b, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRDSAutoRecalc GUID_BUILDER (IID_EnumRDSAutoRecalc, 00000554, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRDSUpdateCriteria GUID_BUILDER (IID_EnumRDSUpdateCriteria, 0000054a, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRecordCreateOptions GUID_BUILDER (IID_EnumRecordCreateOptions, 00000570, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRecordOpenOptions GUID_BUILDER (IID_EnumRecordOpenOptions, 00000571, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRecordStatus GUID_BUILDER (IID_EnumRecordStatus, 00000527, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumRecordType GUID_BUILDER (IID_EnumRecordType, 0000057d, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumResync GUID_BUILDER (IID_EnumResync, 00000544, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumSaveOptions GUID_BUILDER (IID_EnumSaveOptions, 0000057c, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumSchema GUID_BUILDER (IID_EnumSchema, 00000533, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumSearchDirection GUID_BUILDER (IID_EnumSearchDirection, 00000547, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumSeek GUID_BUILDER (IID_EnumSeek, 00000552, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumStreamOpenOptions GUID_BUILDER (IID_EnumStreamOpenOptions, 0000057a, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumStreamType GUID_BUILDER (IID_EnumStreamType, 00000576, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumStreamWrite GUID_BUILDER (IID_EnumStreamWrite, 0000057b, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumStringFormat GUID_BUILDER (IID_EnumStringFormat, 00000549, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_EnumXactAttribute GUID_BUILDER (IID_EnumXactAttribute, 00000524, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADO10StdObject GUID_BUILDER (IID_IADO10StdObject, 00000534, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOClass GUID_BUILDER (IID_IADOClass, 00000560, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCollection GUID_BUILDER (IID_IADOCollection, 00000512, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCommand GUID_BUILDER (IID_IADOCommand, B08400BD, F9D1, 4d02, B8, 56, 71, D5, DB, A1, 23, E9)
#define IID_IADOCommand15 GUID_BUILDER (IID_IADOCommand15, 00000508, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCommand25 GUID_BUILDER (IID_IADOCommand25, 0000054e, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCommandConstruction GUID_BUILDER (IID_IADOCommandConstruction, 00000517, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCommands GUID_BUILDER (IID_IADOCommands, 00000509, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnection GUID_BUILDER (IID_IADOConnection, 00000550, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnection15 GUID_BUILDER (IID_IADOConnection15, 00000515, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnectionConstruction GUID_BUILDER (IID_IADOConnectionConstruction, 00000551, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnectionConstruction15 GUID_BUILDER (IID_IADOConnectionConstruction15, 00000516, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnectionEvents GUID_BUILDER (IID_IADOConnectionEvents, 00000400, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnectionEventsVt GUID_BUILDER (IID_IADOConnectionEventsVt, 00000402, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOConnections GUID_BUILDER (IID_IADOConnections, 00000518, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOCustomError GUID_BUILDER (IID_IADOCustomError, 00000519, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADODynaCollection GUID_BUILDER (IID_IADODynaCollection, 00000513, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOError GUID_BUILDER (IID_IADOError, 00000500, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOErrors GUID_BUILDER (IID_IADOErrors, 00000501, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOField GUID_BUILDER (IID_IADOField, 00000569, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOField15 GUID_BUILDER (IID_IADOField15, 00000505, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOField20 GUID_BUILDER (IID_IADOField20, 0000054c, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOFields GUID_BUILDER (IID_IADOFields, 00000564, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOFields15 GUID_BUILDER (IID_IADOFields15, 00000506, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOFields20 GUID_BUILDER (IID_IADOFields20, 0000054d, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOParameter GUID_BUILDER (IID_IADOParameter, 0000050c, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOParameters GUID_BUILDER (IID_IADOParameters, 0000050d, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOProperties GUID_BUILDER (IID_IADOProperties, 00000504, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOProperty GUID_BUILDER (IID_IADOProperty, 00000503, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecord GUID_BUILDER (IID_IADORecord, 00000562, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecord25 GUID_BUILDER (IID_IADORecord25, 00000562, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecord26 GUID_BUILDER (IID_IADORecord26, 00000563, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordConstruction GUID_BUILDER (IID_IADORecordConstruction, 00000567, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordGroup GUID_BUILDER (IID_IADORecordGroup, 00000511, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordset GUID_BUILDER (IID_IADORecordset, 00000556, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordset15 GUID_BUILDER (IID_IADORecordset15, 0000050e, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordset20 GUID_BUILDER (IID_IADORecordset20, 0000054f, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordset21 GUID_BUILDER (IID_IADORecordset21, 00000555, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordset25 GUID_BUILDER (IID_IADORecordset25, 00000556, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordsetConstruction GUID_BUILDER (IID_IADORecordsetConstruction, 00000283, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordsetEvents GUID_BUILDER (IID_IADORecordsetEvents, 00000266, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordsetEventsVt GUID_BUILDER (IID_IADORecordsetEventsVt, 00000403, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADORecordsets GUID_BUILDER (IID_IADORecordsets, 0000050f, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOStream GUID_BUILDER (IID_IADOStream, 00000565, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOStreamConstruction GUID_BUILDER (IID_IADOStreamConstruction, 00000568, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_ICMemStreamProperties GUID_BUILDER (IID_ICMemStreamProperties, FF184014, B5D3, 4310, AB, F0, 9b, 70, 45, A2, CF, 17)
#define IID_IPrivErrors GUID_BUILDER (IID_IPrivErrors, 00000502, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADO20 GUID_BUILDER (LIBID_ADO20, 00000200, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADO21 GUID_BUILDER (LIBID_ADO21, 00000201, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADO25 GUID_BUILDER (LIBID_ADO25, 00000205, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADO26 GUID_BUILDER (LIBID_ADO26, 00000206, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADO27 GUID_BUILDER (LIBID_ADO27, EF53050B, 882e, 4776, B6, 43, ED, A4, 72, E8, E3, F2)
#define LIBID_ADO28 GUID_BUILDER (LIBID_ADO28, 2a75196c, D9EB, 4129, B8, 03, 93, 13, 27, F7, 2d, 5c)
#define LIBID_ADO60 GUID_BUILDER (LIBID_ADO60, B691E011, 1797, 432e, 90, 7a, 4d, 8c, 69, 33, 91, 29)
#define LIBID_ADOR20 GUID_BUILDER (LIBID_ADOR20, 00000300, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define LIBID_ADOR25 GUID_BUILDER (LIBID_ADOR25, 00000305, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)

#ifdef IMMEDIATE_GUID_USE
CLSID_ADO;
CLSID_CADOCommand;
CLSID_CADOConnection;
CLSID_CADOError;
CLSID_CADOErrorLookup;
CLSID_CADOField;
CLSID_CADOParameter;
CLSID_CADORecField;
CLSID_CADORecord;
CLSID_CADORecordset;
CLSID_CADOStream;
IID__ADO;
IID_ConnectionEvents;
IID_ConnectionEventsVt;
IID_EnumAffect;
IID_EnumCEResync;
IID_EnumCommandType;
IID_EnumCompare;
IID_EnumConnectMode;
IID_EnumConnectOption;
IID_EnumConnectPrompt;
IID_EnumCopyRecordOptions;
IID_EnumCursorLocation;
IID_EnumCursorOption;
IID_EnumCursorType;
IID_EnumDataType;
IID_EnumEditMode;
IID_EnumErrorValue;
IID_EnumEventReason;
IID_EnumEventStatus;
IID_EnumExecuteOption;
IID_EnumFieldAttribute;
IID_EnumFieldStatus;
IID_EnumFilterCriteria;
IID_EnumFilterGroup;
IID_EnumGetRowsOption;
IID_EnumIsolationLevel;
IID_EnumLineSeparator;
IID_EnumLockType;
IID_EnumMarshalOptions;
IID_EnumMode;
IID_EnumMoveRecordOptions;
IID_EnumObjectState;
IID_EnumParameterAttributes;
IID_EnumParameterDirection;
IID_EnumPersistFormat;
IID_EnumPosition;
IID_EnumPrepareOption;
IID_EnumPropertyAttributes;
IID_EnumRDSAsyncThreadPriority;
IID_EnumRDSAutoRecalc;
IID_EnumRDSUpdateCriteria;
IID_EnumRecordCreateOptions;
IID_EnumRecordOpenOptions;
IID_EnumRecordStatus;
IID_EnumRecordType;
IID_EnumResync;
IID_EnumSaveOptions;
IID_EnumSchema;
IID_EnumSearchDirection;
IID_EnumSeek;
IID_EnumStreamOpenOptions;
IID_EnumStreamType;
IID_EnumStreamWrite;
IID_EnumStringFormat;
IID_EnumXactAttribute;
IID_IADO10StdObject;
IID_IADOClass;
IID_IADOCollection;
IID_IADOCommand;
IID_IADOCommand15;
IID_IADOCommand25;
IID_IADOCommandConstruction;
IID_IADOCommands;
IID_IADOConnection;
IID_IADOConnection15;
IID_IADOConnectionConstruction;
IID_IADOConnectionConstruction15;
IID_IADOConnectionEvents;
IID_IADOConnectionEventsVt;
IID_IADOConnections;
IID_IADOCustomError;
IID_IADODynaCollection;
IID_IADOError;
IID_IADOErrors;
IID_IADOField;
IID_IADOField15;
IID_IADOField20;
IID_IADOFields;
IID_IADOFields15;
IID_IADOFields20;
IID_IADOParameter;
IID_IADOParameters;
IID_IADOProperties;
IID_IADOProperty;
IID_IADORecord;
IID_IADORecord25;
IID_IADORecord26;
IID_IADORecordConstruction;
IID_IADORecordGroup;
IID_IADORecordset;
IID_IADORecordset15;
IID_IADORecordset20;
IID_IADORecordset21;
IID_IADORecordset25;
IID_IADORecordsetConstruction;
IID_IADORecordsetEvents;
IID_IADORecordsetEventsVt;
IID_IADORecordsets;
IID_IADOStream;
IID_IADOStreamConstruction;
IID_ICMemStreamProperties;
IID_IPrivErrors;
LIBID_ADO20;
LIBID_ADO21;
LIBID_ADO25;
LIBID_ADO26;
LIBID_ADO27;
LIBID_ADO28;
LIBID_ADO60;
LIBID_ADOR20;
LIBID_ADOR25;

#undef CLSID_ADO
#undef CLSID_CADOCommand
#undef CLSID_CADOConnection
#undef CLSID_CADOError
#undef CLSID_CADOErrorLookup
#undef CLSID_CADOField
#undef CLSID_CADOParameter
#undef CLSID_CADORecField
#undef CLSID_CADORecord
#undef CLSID_CADORecordset
#undef CLSID_CADOStream
#undef IID__ADO
#undef IID_ConnectionEvents
#undef IID_ConnectionEventsVt
#undef IID_EnumAffect
#undef IID_EnumCEResync
#undef IID_EnumCommandType
#undef IID_EnumCompare
#undef IID_EnumConnectMode
#undef IID_EnumConnectOption
#undef IID_EnumConnectPrompt
#undef IID_EnumCopyRecordOptions
#undef IID_EnumCursorLocation
#undef IID_EnumCursorOption
#undef IID_EnumCursorType
#undef IID_EnumDataType
#undef IID_EnumEditMode
#undef IID_EnumErrorValue
#undef IID_EnumEventReason
#undef IID_EnumEventStatus
#undef IID_EnumExecuteOption
#undef IID_EnumFieldAttribute
#undef IID_EnumFieldStatus
#undef IID_EnumFilterCriteria
#undef IID_EnumFilterGroup
#undef IID_EnumGetRowsOption
#undef IID_EnumIsolationLevel
#undef IID_EnumLineSeparator
#undef IID_EnumLockType
#undef IID_EnumMarshalOptions
#undef IID_EnumMode
#undef IID_EnumMoveRecordOptions
#undef IID_EnumObjectState
#undef IID_EnumParameterAttributes
#undef IID_EnumParameterDirection
#undef IID_EnumPersistFormat
#undef IID_EnumPosition
#undef IID_EnumPrepareOption
#undef IID_EnumPropertyAttributes
#undef IID_EnumRDSAsyncThreadPriority
#undef IID_EnumRDSAutoRecalc
#undef IID_EnumRDSUpdateCriteria
#undef IID_EnumRecordCreateOptions
#undef IID_EnumRecordOpenOptions
#undef IID_EnumRecordStatus
#undef IID_EnumRecordType
#undef IID_EnumResync
#undef IID_EnumSaveOptions
#undef IID_EnumSchema
#undef IID_EnumSearchDirection
#undef IID_EnumSeek
#undef IID_EnumStreamOpenOptions
#undef IID_EnumStreamType
#undef IID_EnumStreamWrite
#undef IID_EnumStringFormat
#undef IID_EnumXactAttribute
#undef IID_IADO10StdObject
#undef IID_IADOClass
#undef IID_IADOCollection
#undef IID_IADOCommand
#undef IID_IADOCommand15
#undef IID_IADOCommand25
#undef IID_IADOCommandConstruction
#undef IID_IADOCommands
#undef IID_IADOConnection
#undef IID_IADOConnection15
#undef IID_IADOConnectionConstruction
#undef IID_IADOConnectionConstruction15
#undef IID_IADOConnectionEvents
#undef IID_IADOConnectionEventsVt
#undef IID_IADOConnections
#undef IID_IADOCustomError
#undef IID_IADODynaCollection
#undef IID_IADOError
#undef IID_IADOErrors
#undef IID_IADOField
#undef IID_IADOField15
#undef IID_IADOField20
#undef IID_IADOFields
#undef IID_IADOFields15
#undef IID_IADOFields20
#undef IID_IADOParameter
#undef IID_IADOParameters
#undef IID_IADOProperties
#undef IID_IADOProperty
#undef IID_IADORecord
#undef IID_IADORecord25
#undef IID_IADORecord26
#undef IID_IADORecordConstruction
#undef IID_IADORecordGroup
#undef IID_IADORecordset
#undef IID_IADORecordset15
#undef IID_IADORecordset20
#undef IID_IADORecordset21
#undef IID_IADORecordset25
#undef IID_IADORecordsetConstruction
#undef IID_IADORecordsetEvents
#undef IID_IADORecordsetEventsVt
#undef IID_IADORecordsets
#undef IID_IADOStream
#undef IID_IADOStreamConstruction
#undef IID_ICMemStreamProperties
#undef IID_IPrivErrors
#undef LIBID_ADO20
#undef LIBID_ADO21
#undef LIBID_ADO25
#undef LIBID_ADO26
#undef LIBID_ADO27
#undef LIBID_ADO28
#undef LIBID_ADO60
#undef LIBID_ADOR20
#undef LIBID_ADOR25
#endif

#ifdef _LOCKBYTESUPPORT_

#define IID_IADOField25 GUID_BUILDER (IID_IADOField25, 00000569, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)
#define IID_IADOField26 GUID_BUILDER (IID_IADOField26, 00000557, 0000, 0010, 80, 00, 00, AA, 00, 6d, 2e, A4)

#ifdef IMMEDIATE_GUID_USE
IID_IADOField25;
IID_IADOField26;

#undef IID_IADOField25
#undef IID_IADOField26
#endif

#endif

#ifdef RESERVED_GUIDS_BEYOND_THIS_POINT

#define ADO_Reserved_4 GUID_BUILDER (ADO_Reserved_4, 567747f1, 658b, 4906, 82, C4, E9, CD, A1, 46, 26, 15)
#define ADO_Reserved_5 GUID_BUILDER (ADO_Reserved_5, 986761e8, 7269, 4890, AA, 65, AD, 7c, 03, 69, 7a, 6d)
#define ADO_Reserved_6 GUID_BUILDER (ADO_Reserved_6, ED5A4589, 7a9d, 41df, 89, 86, CC, A9, 25, 01, A5, DA)
#define ADO_Reserved_7 GUID_BUILDER (ADO_Reserved_7, C029178A, F16B, 4a06, 82, 93, A8, 08, B7, F8, 78, 92)
#define ADO_Reserved_8 GUID_BUILDER (ADO_Reserved_8, FD6974FD, 21fb, 409c, 96, 56, A5, 68, FE, C0, AC, 01)
#define ADO_Reserved_9 GUID_BUILDER (ADO_Reserved_9, F23FCB5E, 7159, 4cba, A3, 41, 0e, 7a, A5, 15, 18, 70)
#define ADO_Reserved_10 GUID_BUILDER (ADO_Reserved_10, E724D5C9, 327c, 43f7, 86, 4c, 68, 2f, FF, 5c, 99, 93)
#define ADO_Reserved_12 GUID_BUILDER (ADO_Reserved_12, 8831ebb5, 2c09, 4ddd, 9a, 7a, AC, 13, 6d, 58, D7, 21)
#define ADO_Reserved_13 GUID_BUILDER (ADO_Reserved_13, 447b1221, 64fa, 44e9, B1, 46, B1, 1f, 16, E3, 14, B2)
#define ADO_Reserved_14 GUID_BUILDER (ADO_Reserved_14, FC528DC2, A992, 44d3, 97, 9f, 07, F7, F4, 45, 5f, 23)
#define ADO_Reserved_15 GUID_BUILDER (ADO_Reserved_15, C2CC7BC0, 9f8b, 46c8, 83, 6b, BC, 46, 70, 28, F4, 54)
#define ADO_Reserved_16 GUID_BUILDER (ADO_Reserved_16, 4687ee6c, 12ce, 4a31, 97, E9, E6, 49, 6d, E7, 2c, 71)
#define ADO_Reserved_17 GUID_BUILDER (ADO_Reserved_17, 4b56fc5d, 992f, 4339, 95, 81, C5, 40, 7a, B2, BF, FD)
#define ADO_Reserved_18 GUID_BUILDER (ADO_Reserved_18, 1f13bfb3, 8ba8, 46ca, 91, 78, 74, 28, EF, 9a, 85, C0)
#define ADO_Reserved_19 GUID_BUILDER (ADO_Reserved_19, 0b410060, 4d75, 4f77, 96, A1, 68, 4c, 38, 15, E1, B1)
#define ADO_Reserved_20 GUID_BUILDER (ADO_Reserved_20, 5593f2e0, 436b, 40b8, 81, A8, 1b, 7e, F4, E6, 25, 2c)
#define ADO_Reserved_21 GUID_BUILDER (ADO_Reserved_21, 88447b2f, E1C9, 413e, BE, E7, A7, D2, B9, 0e, D1, 96)
#define ADO_Reserved_22 GUID_BUILDER (ADO_Reserved_22, 89bfee1b, 8cb5, 4a90, 89, AF, E8, 29, 93, 4e, 6c, 48)
#define ADO_Reserved_23 GUID_BUILDER (ADO_Reserved_23, 28d7f9fc, F485, 4bdb, 9c, C4, 6f, AE, 44, F9, 9f, D9)
#define ADO_Reserved_24 GUID_BUILDER (ADO_Reserved_24, 1bb4223f, B0E8, 4540, 96, FD, B8, FE, D9, A7, C0, 8b)
#define ADO_Reserved_25 GUID_BUILDER (ADO_Reserved_25, AD1A1568, 8b4a, 403f, 84, 76, D8, F6, 33, 4d, BD, 9f)
#define ADO_Reserved_26 GUID_BUILDER (ADO_Reserved_26, 1326b4d8, EE0B, 4054, 8f, 4c, 86, 35, 9f, 00, 24, AD)
#define ADO_Reserved_27 GUID_BUILDER (ADO_Reserved_27, 98b7eb70, 7aed, 401a, AF, 6d, A6, B8, DB, A0, AF, A6)
#define ADO_Reserved_28 GUID_BUILDER (ADO_Reserved_28, FD46F2C2, 7fda, 4dc9, A2, DB, D9, BE, 4f, 59, 98, C2)
#define ADO_Reserved_29 GUID_BUILDER (ADO_Reserved_29, FAA37542, B471, 4183, A6, 56, 99, C8, FD, 80, FF, 73)
#define ADO_Reserved_30 GUID_BUILDER (ADO_Reserved_30, 56ce86f1, 3116, 4104, A5, 28, 17, D1, 1e, DC, 68, 2a)
#define ADO_Reserved_31 GUID_BUILDER (ADO_Reserved_31, 83e8cf0e, 176f, 4908, 86, 3a, 2a, 77, 4d, 76, 9b, EF)
#define ADO_Reserved_32 GUID_BUILDER (ADO_Reserved_32, 0494d18d, 98f7, 4a38, 80, DF, 35, F8, 80, 98, BD, DF)
#define ADO_Reserved_33 GUID_BUILDER (ADO_Reserved_33, 00c61f59, 4e7f, 4093, BF, FD, 03, 53, B4, 5d, E5, 8b)
#define ADO_Reserved_34 GUID_BUILDER (ADO_Reserved_34, 732a172f, 384d, 4c4a, A6, AF, D2, 28, 20, D3, 34, 26)
#define ADO_Reserved_35 GUID_BUILDER (ADO_Reserved_35, 104e1f7e, 8993, 455c, B7, D8, 58, CD, 88, 74, 80, 75)
#define ADO_Reserved_36 GUID_BUILDER (ADO_Reserved_36, C12B8DFD, 42f7, 408e, AE, FB, A7, C2, FB, 43, 49, A7)
#define ADO_Reserved_37 GUID_BUILDER (ADO_Reserved_37, EE881FC9, 6c2f, 45a2, BA, 17, 24, 95, BC, 72, 4e, 55)
#define ADO_Reserved_38 GUID_BUILDER (ADO_Reserved_38, 7381c764, 646b, 4f11, A6, 73, 13, 50, 98, 9d, 62, 3a)
#define ADO_Reserved_39 GUID_BUILDER (ADO_Reserved_39, D8E4965C, F571, 4771, 8a, 74, 63, 95, 05, 16, B0, 88)
#define ADO_Reserved_40 GUID_BUILDER (ADO_Reserved_40, 2be262e5, 3a8c, 4b07, A3, C3, 3b, B7, 40, EF, 40, 95)
#define ADO_Reserved_41 GUID_BUILDER (ADO_Reserved_41, 3e90a199, 4f86, 445c, 84, 8e, A6, 17, 86, B9, 67, D1)
#define ADO_Reserved_42 GUID_BUILDER (ADO_Reserved_42, DCD025E0, DA44, 47e4, 82, 65, E4, A7, 6b, 85, 29, 0c)
#define ADO_Reserved_43 GUID_BUILDER (ADO_Reserved_43, 31eff562, FB6B, 41d6, 81, AD, 30, 1b, B0, 53, 9c, 61)
#define ADO_Reserved_44 GUID_BUILDER (ADO_Reserved_44, BD3ECD6B, F4A7, 42fc, 90, F1, 75, D5, 37, 2a, F2, 8f)
#define ADO_Reserved_45 GUID_BUILDER (ADO_Reserved_45, 6efbc56f, 67e4, 4f7d, BE, 59, C5, D6, FA, 21, B7, 77)
#define ADO_Reserved_46 GUID_BUILDER (ADO_Reserved_46, 3bf5e1fc, B960, 4564, 86, 54, 07, B0, 7a, AF, 6e, 4f)
#define ADO_Reserved_47 GUID_BUILDER (ADO_Reserved_47, 2430f883, 1462, 4899, 9a, DE, F7, 24, 27, FD, 5e, E4)
#define ADO_Reserved_48 GUID_BUILDER (ADO_Reserved_48, AB663F07, BA4D, 42cc, 93, C6, F2, EA, 9f, C8, BA, 74)
#define ADO_Reserved_49 GUID_BUILDER (ADO_Reserved_49, D808C6F7, 36c0, 4302, 80, EE, C4, B7, 00, F8, D2, 38)
#define ADO_Reserved_50 GUID_BUILDER (ADO_Reserved_50, AB146E06, E493, 4df0, A1, CD, 07, D4, B0, 74, 46, C3)
#define ADO_Reserved_51 GUID_BUILDER (ADO_Reserved_51, 74f1fd51, 9cb8, 4186, 8c, 3d, DD, F3, 55, 2a, 99, 9b)
#define ADO_Reserved_52 GUID_BUILDER (ADO_Reserved_52, 71701a97, 5386, 43b0, 95, 8d, 3c, EE, 40, 57, B1, 99)
#define ADO_Reserved_53 GUID_BUILDER (ADO_Reserved_53, 63cc6087, A6C6, 4ccf, 8e, D4, 17, 5b, 91, A6, 32, C5)
#define ADO_Reserved_54 GUID_BUILDER (ADO_Reserved_54, 7323fd37, B7D8, 4f8a, 80, F4, E8, 3d, 0b, 2a, 73, B5)
#define ADO_Reserved_55 GUID_BUILDER (ADO_Reserved_55, 5c666403, 2a0a, 4b12, 8e, 1d, 41, 19, 88, DD, E0, 0a)
#define ADO_Reserved_56 GUID_BUILDER (ADO_Reserved_56, ECA4C14C, 5529, 49df, B1, 3c, 17, F0, 22, DB, 1b, A6)
#define ADO_Reserved_57 GUID_BUILDER (ADO_Reserved_57, 304ade1d, 4458, 4a6a, 93, 48, 1f, 7c, 2e, 64, D6, FA)
#define ADO_Reserved_58 GUID_BUILDER (ADO_Reserved_58, D87A7AF2, FB3C, 49bc, B2, 69, F3, 57, 36, E7, 23, 2e)
#define ADO_Reserved_59 GUID_BUILDER (ADO_Reserved_59, 542d6d77, AECB, 4aff, B1, C6, 54, EF, 79, 8f, 61, ED)
#define ADO_Reserved_60 GUID_BUILDER (ADO_Reserved_60, 46359618, 34ae, 410e, AE, 20, F3, D4, E1, BD, A6, BE)
#define ADO_Reserved_61 GUID_BUILDER (ADO_Reserved_61, F98DF79B, 2935, 464b, AA, 08, CC, EF, F1, 5f, 71, 32)
#define ADO_Reserved_62 GUID_BUILDER (ADO_Reserved_62, 214887fb, 4867, 4dd8, 83, 9d, 4c, F0, BB, 83, E1, 95)
#define ADO_Reserved_63 GUID_BUILDER (ADO_Reserved_63, C9B68C08, F663, 4386, 8f, 5b, FA, BA, E0, 27, 43, 6d)
#define ADO_Reserved_64 GUID_BUILDER (ADO_Reserved_64, F46511DD, 10b6, 49cf, AA, 75, 5e, E2, 7c, FD, 9e, A4)
#define ADO_Reserved_65 GUID_BUILDER (ADO_Reserved_65, C057EF87, F3A8, 4890, A9, 56, 57, 8c, 07, CD, 2e, F8)
#define ADO_Reserved_66 GUID_BUILDER (ADO_Reserved_66, 1c9e0666, 1405, 4dc5, BD, A7, 65, F4, B4, 16, 1d, 7b)
#define ADO_Reserved_67 GUID_BUILDER (ADO_Reserved_67, B91484C2, 5e48, 438c, 91, CD, B9, D6, 99, 32, 30, E4)
#define ADO_Reserved_68 GUID_BUILDER (ADO_Reserved_68, 17d12bfe, 6c9f, 4229, 87, 95, 60, 20, 6f, D1, 45, 35)
#define ADO_Reserved_69 GUID_BUILDER (ADO_Reserved_69, 5a816ea3, EE82, 4f65, BC, 76, 74, 07, E9, E5, 43, 58)
#define ADO_Reserved_70 GUID_BUILDER (ADO_Reserved_70, 3ad0de2b, AA3E, 4508, BE, 9e, 1e, AA, DF, 1c, 4d, 8b)
#define ADO_Reserved_71 GUID_BUILDER (ADO_Reserved_71, 54dc8b80, 7869, 4d90, AB, 5c, 8c, 54, 1a, 74, EE, F8)
#define ADO_Reserved_72 GUID_BUILDER (ADO_Reserved_72, 80a200b0, 5783, 48e7, 81, 25, B9, E4, BF, 59, F7, 22)
#define ADO_Reserved_73 GUID_BUILDER (ADO_Reserved_73, 1502cb61, 8c42, 4c4b, B9, 0c, 3a, 9e, 4e, 46, D1, BE)
#define ADO_Reserved_74 GUID_BUILDER (ADO_Reserved_74, 70eb3f53, 91a0, 42f5, BE, 50, F1, 02, DE, C8, 92, 27)
#define ADO_Reserved_75 GUID_BUILDER (ADO_Reserved_75, 4680aa81, B27C, 4a8f, 83, F9, 6f, B7, E1, 8e, D2, 3c)
#define ADO_Reserved_76 GUID_BUILDER (ADO_Reserved_76, EF31F9EB, 4541, 4fcb, 8d, 67, 59, 2c, 85, 50, 93, 05)
#define ADO_Reserved_77 GUID_BUILDER (ADO_Reserved_77, 88b77d15, 997e, 4e3a, 83, 20, 3b, 37, 83, 52, 86, D5)
#define ADO_Reserved_78 GUID_BUILDER (ADO_Reserved_78, D03A3AA8, 1aac, 4867, 93, C9, 5f, 51, D8, 7d, 6a, 74)
#define ADO_Reserved_79 GUID_BUILDER (ADO_Reserved_79, 47022458, 17e7, 4bd7, 90, 81, 85, B4, 0b, 03, 6d, 5b)
#define ADO_Reserved_80 GUID_BUILDER (ADO_Reserved_80, 9e5bee82, F410, 44c7, 9d, 6d, 3f, 7d, D2, 8b, A7, CC)
#define ADO_Reserved_81 GUID_BUILDER (ADO_Reserved_81, 278a1c47, 3c39, 41c7, A3, FB, 7c, 2e, 62, 0b, E4, 44)
#define ADO_Reserved_82 GUID_BUILDER (ADO_Reserved_82, 964cbf05, 8084, 4c15, 9c, F5, 8c, 4b, 81, 41, B4, AE)
#define ADO_Reserved_83 GUID_BUILDER (ADO_Reserved_83, A86296A0, F272, 4acd, 83, 06, FF, CA, FF, 89, 14, A9)
#define ADO_Reserved_84 GUID_BUILDER (ADO_Reserved_84, F805FC7C, 7c4a, 43a1, B0, 14, 71, EA, 0e, EB, EA, 5f)
#define ADO_Reserved_85 GUID_BUILDER (ADO_Reserved_85, 33e6e9b6, 0bea, 4549, 90, CB, 3b, 64, 12, DB, 8c, F5)
#define ADO_Reserved_86 GUID_BUILDER (ADO_Reserved_86, 7337e3dc, 219f, 4d9e, 82, 5b, 0a, 2c, 18, 4e, C0, DE)
#define ADO_Reserved_87 GUID_BUILDER (ADO_Reserved_87, 7397bafc, 354e, 4f18, 9f, 76, C3, 3a, 4e, EF, 6d, 20)
#define ADO_Reserved_88 GUID_BUILDER (ADO_Reserved_88, 5ec2d163, E671, 4186, BE, 72, BF, FF, 72, D5, 7a, 5c)
#define ADO_Reserved_89 GUID_BUILDER (ADO_Reserved_89, 8b37b801, 0a35, 4f97, A3, 43, 82, 57, B3, E7, 6c, 79)
#define ADO_Reserved_90 GUID_BUILDER (ADO_Reserved_90, FAD396B6, EE4E, 4f70, 85, 54, E8, 23, 9e, 47, 05, 29)
#define ADO_Reserved_91 GUID_BUILDER (ADO_Reserved_91, 6063972c, 395b, 4fef, A0, 04, ED, 95, E7, D8, 72, 0d)
#define ADO_Reserved_92 GUID_BUILDER (ADO_Reserved_92, 85aeed72, A1F8, 4597, 82, 32, F8, 40, EF, C9, 21, 09)
#define ADO_Reserved_93 GUID_BUILDER (ADO_Reserved_93, CE4FD8FF, 553a, 4424, B1, EA, 3e, DF, 11, 42, AD, 8b)
#define ADO_Reserved_94 GUID_BUILDER (ADO_Reserved_94, 1a856a0f, 0844, 4de4, AC, 7b, 75, 30, 62, 56, 39, 86)
#define ADO_Reserved_95 GUID_BUILDER (ADO_Reserved_95, 09a742a1, 19ed, 43bb, 85, E9, 99, 23, DE, C4, 17, F7)
#define ADO_Reserved_96 GUID_BUILDER (ADO_Reserved_96, 3695bd0c, 9de6, 4895, 84, E6, B2, 4c, E7, 55, 47, 02)
#define ADO_Reserved_97 GUID_BUILDER (ADO_Reserved_97, 8802531f, 6ea8, 4a55, 8a, 18, 05, 97, 86, 3c, DA, 38)
#define ADO_Reserved_98 GUID_BUILDER (ADO_Reserved_98, 498e70f0, B13F, 4804, AD, D5, 72, E8, 0e, 28, 05, E7)
#define ADO_Reserved_99 GUID_BUILDER (ADO_Reserved_99, 50d0e90f, E3A4, 4a93, 8b, 48, 71, 21, 66, E8, 87, CD)
#define ADO_Reserved_100 GUID_BUILDER (ADO_Reserved_100, F1D30550, 8515, 4f8b, 93, E1, 1e, F0, 12, 1b, 4b, D0)
#define ADO_Reserved_101 GUID_BUILDER (ADO_Reserved_101, 901cda31, 8cdb, 4a5b, 91, 6b, 63, EA, 90, 1d, 8c, E0)
#define ADO_Reserved_102 GUID_BUILDER (ADO_Reserved_102, 00bda239, 1094, 4aef, 93, AD, 7c, E2, 73, 6c, 42, 25)
#define ADO_Reserved_103 GUID_BUILDER (ADO_Reserved_103, DCA4E51E, 250e, 4ab3, B4, 90, F2, CB, 9e, 8f, 6c, C4)
#define ADO_Reserved_104 GUID_BUILDER (ADO_Reserved_104, 24679ebd, 8535, 4494, A9, 1c, 18, 91, F0, 75, 5b, 6f)
#define ADO_Reserved_105 GUID_BUILDER (ADO_Reserved_105, F041739E, F37E, 4925, 94, 25, FB, 51, 5e, 56, 0f, 54)
#define ADO_Reserved_106 GUID_BUILDER (ADO_Reserved_106, FECACBBF, A73C, 4616, 84, 2f, FE, F5, 72, 85, 70, AB)
#define ADO_Reserved_107 GUID_BUILDER (ADO_Reserved_107, DBAD7368, 1ded, 4a77, B8, 0a, 1a, EB, 12, 99, BD, B3)
#define ADO_Reserved_108 GUID_BUILDER (ADO_Reserved_108, CFDE81B8, 66ef, 4503, 84, A8, 7e, 8f, C8, AB, 0b, 31)
#define ADO_Reserved_109 GUID_BUILDER (ADO_Reserved_109, 9b7484fa, 023a, 4ffb, A2, 94, 11, A6, E5, 97, AB, 35)
#define ADO_Reserved_110 GUID_BUILDER (ADO_Reserved_110, 54f0f09c, 1201, 49a9, B4, 65, 6b, 02, 9b, 5f, E3, 12)
#define ADO_Reserved_111 GUID_BUILDER (ADO_Reserved_111, BFFA01F8, EAE7, 4fa1, BF, 74, 37, 73, 3f, BF, 36, 4c)
#define ADO_Reserved_112 GUID_BUILDER (ADO_Reserved_112, 12fad291, 4aab, 4038, 9d, D1, 04, E4, E7, A9, E0, F4)
#define ADO_Reserved_113 GUID_BUILDER (ADO_Reserved_113, 8d2af964, C489, 4d77, A8, 17, A0, 4d, B1, DB, 26, A5)
#define ADO_Reserved_114 GUID_BUILDER (ADO_Reserved_114, 79f89dd7, BE86, 4b36, BE, 9b, FA, 75, 24, 18, 55, 68)
#define ADO_Reserved_115 GUID_BUILDER (ADO_Reserved_115, 4387d7fa, 7a52, 4f67, BF, B6, 7e, 7d, 7a, B7, C9, DE)
#define ADO_Reserved_116 GUID_BUILDER (ADO_Reserved_116, 7571252f, 0e49, 4f4b, A3, 87, 9e, D9, 70, 54, 68, D8)
#define ADO_Reserved_117 GUID_BUILDER (ADO_Reserved_117, 0dab016b, 6ba4, 470f, 98, 1a, 2b, A7, 65, D4, 60, 4b)
#define ADO_Reserved_118 GUID_BUILDER (ADO_Reserved_118, E97D87A3, 8a95, 4080, 8c, A9, ED, 9f, 05, 1a, B7, B2)
#define ADO_Reserved_119 GUID_BUILDER (ADO_Reserved_119, C9EA1598, 2d23, 4978, 9b, 33, 3d, 2c, C4, 0a, B7, A1)
#define ADO_Reserved_120 GUID_BUILDER (ADO_Reserved_120, E41CA9FC, 7fc9, 4831, 90, CE, F5, 33, 96, CE, 42, C3)
#define ADO_Reserved_121 GUID_BUILDER (ADO_Reserved_121, 15df0905, 4acc, 44f7, A0, 1e, 0f, EF, 56, 3c, C4, E5)
#define ADO_Reserved_122 GUID_BUILDER (ADO_Reserved_122, D2879A0E, D0B3, 42a2, A1, 16, D1, 5e, 13, C7, 51, 77)
#define ADO_Reserved_123 GUID_BUILDER (ADO_Reserved_123, A999A8D2, 5e83, 4c0e, 83, 97, 18, 33, 19, 32, 79, CD)
#define ADO_Reserved_124 GUID_BUILDER (ADO_Reserved_124, C6AFAE72, B3FF, 48ab, B1, EE, F5, EE, F9, 05, DF, 47)
#define ADO_Reserved_125 GUID_BUILDER (ADO_Reserved_125, 0deadf50, 0940, 4f0e, AC, 3b, 94, 80, B7, 32, 2b, 1b)
#define ADO_Reserved_126 GUID_BUILDER (ADO_Reserved_126, 61278818, 2fe6, 4892, 8b, 95, A7, 5c, AC, 6e, 21, BB)
#define ADO_Reserved_127 GUID_BUILDER (ADO_Reserved_127, 3ac2bed7, 1111, 4e55, B2, 06, 1f, 54, 18, 94, 4c, BA)
#define ADO_Reserved_128 GUID_BUILDER (ADO_Reserved_128, 3d4751e2, 04b8, 4593, A0, 0d, 3a, 4b, 94, 67, 4b, E9)
#define ADO_Reserved_129 GUID_BUILDER (ADO_Reserved_129, 69bc6751, FE10, 4b3f, 89, 35, 40, 2f, A5, FD, 04, 82)
#define ADO_Reserved_130 GUID_BUILDER (ADO_Reserved_130, 5867af81, 995a, 4686, 8b, CB, 13, B6, 8b, 10, 26, 8a)
#define ADO_Reserved_131 GUID_BUILDER (ADO_Reserved_131, DA46C62F, BDCD, 4745, A3, CA, 4e, C9, FA, AB, E1, 10)
#define ADO_Reserved_132 GUID_BUILDER (ADO_Reserved_132, 93028aa6, EECC, 482f, B3, A4, 2f, D4, 13, 04, 96, 5e)
#define ADO_Reserved_133 GUID_BUILDER (ADO_Reserved_133, AB14F604, D05E, 4e50, A4, 5b, A8, 10, 48, E3, A4, 75)
#define ADO_Reserved_134 GUID_BUILDER (ADO_Reserved_134, 35267875, 8420, 4226, 87, C0, 25, 00, 58, 56, 0f, D2)
#define ADO_Reserved_135 GUID_BUILDER (ADO_Reserved_135, 16e34932, EEFA, 440e, A7, 86, 6a, 36, D2, C6, 21, 69)
#define ADO_Reserved_136 GUID_BUILDER (ADO_Reserved_136, 2710a15a, B2B0, 46ec, BD, EC, E2, 2e, A8, A6, 28, FA)
#define ADO_Reserved_137 GUID_BUILDER (ADO_Reserved_137, 2777696f, CB34, 4cc4, A0, A9, 02, EA, 15, 16, 63, DD)
#define ADO_Reserved_138 GUID_BUILDER (ADO_Reserved_138, D11CA1A0, A261, 4ba2, 81, 68, 46, 52, 32, 9a, 60, 77)
#define ADO_Reserved_139 GUID_BUILDER (ADO_Reserved_139, C33509A8, 883f, 4bea, AF, B5, 35, 26, CF, 0b, 8b, E1)
#define ADO_Reserved_140 GUID_BUILDER (ADO_Reserved_140, DEBDC8E1, 4f02, 43e1, 8c, 88, 0b, A8, E1, 50, 6b, F5)
#define ADO_Reserved_141 GUID_BUILDER (ADO_Reserved_141, 552f8531, 3f79, 4db3, 87, 7b, 8e, 54, C3, 5b, 38, 54)
#define ADO_Reserved_142 GUID_BUILDER (ADO_Reserved_142, 1e6a2bf4, 241c, 48a1, 90, 66, C6, E1, E5, 2b, 0a, 4b)
#define ADO_Reserved_143 GUID_BUILDER (ADO_Reserved_143, 8e5b2a8d, 1f0d, 429d, 94, 95, 16, F8, E9, 58, 06, 80)
#define ADO_Reserved_144 GUID_BUILDER (ADO_Reserved_144, 57faec9d, 5cde, 4ebe, 84, A1, 5a, CB, 75, 7c, D4, 51)
#define ADO_Reserved_145 GUID_BUILDER (ADO_Reserved_145, 707b03c3, A3B0, 4f00, 81, 61, 6e, 3f, 02, 7f, F0, B3)
#define ADO_Reserved_146 GUID_BUILDER (ADO_Reserved_146, 5dd552f4, 0718, 4bdd, 82, 6c, 7c, C3, 5c, DA, 1d, 93)
#define ADO_Reserved_147 GUID_BUILDER (ADO_Reserved_147, F3247F33, E377, 4a44, A9, 37, AC, E6, 36, F6, 58, 1f)
#define ADO_Reserved_148 GUID_BUILDER (ADO_Reserved_148, E7C324C4, 38a5, 42a8, 99, FF, 34, 5d, AD, 8c, D2, 29)
#define ADO_Reserved_149 GUID_BUILDER (ADO_Reserved_149, D14FCA70, 390d, 4158, B5, C3, 9a, 02, D1, F7, 85, 87)
#define ADO_Reserved_150 GUID_BUILDER (ADO_Reserved_150, 58d30b5f, 92a5, 4ef4, 8e, 45, A0, 24, A9, CD, F9, FE)
#define ADO_Reserved_151 GUID_BUILDER (ADO_Reserved_151, 9673df76, 73e4, 4c66, 89, 14, 7f, A4, 17, 43, 6c, 4a)
#define ADO_Reserved_152 GUID_BUILDER (ADO_Reserved_152, 9fa8a7e1, CF3C, 4a61, BE, 10, 1d, 85, 5f, A0, D5, 08)
#define ADO_Reserved_153 GUID_BUILDER (ADO_Reserved_153, B657729F, 6cc7, 4392, BD, 56, DC, ED, 6e, 53, F6, 4c)
#define ADO_Reserved_154 GUID_BUILDER (ADO_Reserved_154, 06e5224b, 8c27, 4f41, 8f, B7, C6, 41, E4, C5, 04, 2d)
#define ADO_Reserved_155 GUID_BUILDER (ADO_Reserved_155, 2268a619, CC1D, 4f72, B8, 3f, 79, 63, C0, 13, B1, 3d)
#define ADO_Reserved_156 GUID_BUILDER (ADO_Reserved_156, FB4810F3, 3a65, 4c33, B3, 99, B5, C9, 33, 11, 11, D7)
#define ADO_Reserved_157 GUID_BUILDER (ADO_Reserved_157, 9011be74, 6c9d, 44f7, BE, 2c, 8a, 2a, BB, 62, 51, AC)
#define ADO_Reserved_158 GUID_BUILDER (ADO_Reserved_158, 3145c182, 82c6, 4082, BB, E7, 79, 1a, 2f, 49, 6c, B1)
#define ADO_Reserved_159 GUID_BUILDER (ADO_Reserved_159, D8865377, 8799, 4c08, 97, E5, D6, 7e, 88, 6f, F5, 49)
#define ADO_Reserved_160 GUID_BUILDER (ADO_Reserved_160, 8993232e, 8afa, 4552, A7, 8c, C6, 6c, 9d, 3a, E6, D0)
#define ADO_Reserved_161 GUID_BUILDER (ADO_Reserved_161, 40af1931, 8721, 427b, 83, 5e, 50, 87, 79, BD, 1e, B2)
#define ADO_Reserved_162 GUID_BUILDER (ADO_Reserved_162, 9c6e2b26, 4468, 427c, 8c, F5, 01, 14, 7d, B8, DF, 22)
#define ADO_Reserved_163 GUID_BUILDER (ADO_Reserved_163, 3537fa93, 7e92, 4ce0, 80, 96, EF, DC, 1a, 80, A8, 95)
#define ADO_Reserved_164 GUID_BUILDER (ADO_Reserved_164, 36992492, 3e17, 47c1, AB, 98, 5f, 0c, 49, B4, 6a, 25)
#define ADO_Reserved_165 GUID_BUILDER (ADO_Reserved_165, 01662edb, CE23, 4215, AE, 9d, 51, 51, E6, DA, 36, 3c)
#define ADO_Reserved_166 GUID_BUILDER (ADO_Reserved_166, 80b4a97b, 5256, 4397, 89, CD, 4e, F9, 91, 0f, 1d, E6)
#define ADO_Reserved_167 GUID_BUILDER (ADO_Reserved_167, C2341A38, 2c6b, 414e, 96, A8, 8b, 5e, 47, F8, 14, DA)
#define ADO_Reserved_168 GUID_BUILDER (ADO_Reserved_168, 5c2b7578, 53fa, 4ace, 8e, 6c, 39, 18, 2f, 68, D2, 67)
#define ADO_Reserved_169 GUID_BUILDER (ADO_Reserved_169, B80C1E36, 611b, 49d4, 97, 19, 4e, 0c, 59, 0e, 2e, E1)
#define ADO_Reserved_170 GUID_BUILDER (ADO_Reserved_170, BA269EB4, B741, 4fb2, A9, C9, 52, 4c, 9d, BE, 7c, 16)
#define ADO_Reserved_171 GUID_BUILDER (ADO_Reserved_171, EE49769D, 1028, 4429, A9, 66, 2f, A8, 1d, 70, EE, 19)
#define ADO_Reserved_172 GUID_BUILDER (ADO_Reserved_172, 541fc621, D6E6, 4cc4, B4, 98, 8e, 4f, AA, A0, 65, BF)
#define ADO_Reserved_173 GUID_BUILDER (ADO_Reserved_173, AA8B544C, 4067, 4e00, 96, 09, 95, EE, 21, 68, AF, CE)
#define ADO_Reserved_174 GUID_BUILDER (ADO_Reserved_174, 5b161b2b, D02C, 4300, A1, 54, CF, DC, 25, 3b, 13, 0d)
#define ADO_Reserved_175 GUID_BUILDER (ADO_Reserved_175, 81f62203, 182e, 42de, B1, B7, 63, 5f, C6, 6f, 6e, 9e)
#define ADO_Reserved_176 GUID_BUILDER (ADO_Reserved_176, 04934bdd, A530, 48ec, 91, CE, 11, 83, 42, 5b, DB, 61)
#define ADO_Reserved_177 GUID_BUILDER (ADO_Reserved_177, F6997841, 9a99, 48aa, B0, 56, 8c, 75, 17, 06, 41, 7f)
#define ADO_Reserved_178 GUID_BUILDER (ADO_Reserved_178, 353fe3f1, DE50, 45ee, 91, E9, 3e, 62, E3, C7, 86, 04)
#define ADO_Reserved_179 GUID_BUILDER (ADO_Reserved_179, F142C8C6, 9e24, 422e, 81, BD, D2, 94, 7f, 93, 94, D4)
#define ADO_Reserved_180 GUID_BUILDER (ADO_Reserved_180, 95951773, 9566, 46c9, 86, B0, 40, ED, 25, 46, 02, 93)
#define ADO_Reserved_181 GUID_BUILDER (ADO_Reserved_181, 54140563, 0f25, 4f56, 9d, 8f, B6, DE, CB, 96, DC, E4)
#define ADO_Reserved_182 GUID_BUILDER (ADO_Reserved_182, 91a48243, AE16, 48cf, 82, 29, 00, 00, F8, 3c, 5e, FC)
#define ADO_Reserved_183 GUID_BUILDER (ADO_Reserved_183, E0FA1A1F, 3967, 4392, AB, 1a, E2, 8b, 85, 04, 68, CA)
#define ADO_Reserved_184 GUID_BUILDER (ADO_Reserved_184, 5582d772, ABAC, 4a85, A0, B3, 2e, 65, E1, 71, 10, 53)
#define ADO_Reserved_185 GUID_BUILDER (ADO_Reserved_185, 1cd1f347, 8fb4, 49a2, B5, 65, A6, 74, A0, C1, 45, 0e)
#define ADO_Reserved_186 GUID_BUILDER (ADO_Reserved_186, 0ec3aa4e, FEF5, 4a5c, BD, 0a, E9, CD, B7, 6a, 5f, 30)
#define ADO_Reserved_187 GUID_BUILDER (ADO_Reserved_187, 4118414d, 4a21, 46da, 88, C1, EF, A7, 01, 8c, 45, 27)
#define ADO_Reserved_188 GUID_BUILDER (ADO_Reserved_188, D5C1CC0D, E38E, 4cb6, 89, D9, 99, 27, 7f, 12, D1, 9e)
#define ADO_Reserved_189 GUID_BUILDER (ADO_Reserved_189, 0956b82a, 94a7, 474e, A5, 05, 1a, 76, 26, 36, AF, 08)
#define ADO_Reserved_190 GUID_BUILDER (ADO_Reserved_190, 2cbf62ab, B8E4, 48d0, B5, 01, 69, CF, 63, 3c, AA, E6)
#define ADO_Reserved_191 GUID_BUILDER (ADO_Reserved_191, C02B8113, AECF, 4a34, B3, E9, 5b, 52, 4e, 51, 44, B5)
#define ADO_Reserved_192 GUID_BUILDER (ADO_Reserved_192, 1c90947b, 4a3a, 4ecd, 8c, 70, F4, 3f, E5, 2d, 46, 45)
#define ADO_Reserved_193 GUID_BUILDER (ADO_Reserved_193, 48175e98, 6672, 4db4, B5, 74, 8c, 93, 25, 8d, BF, 14)
#define ADO_Reserved_194 GUID_BUILDER (ADO_Reserved_194, 99cb88bf, E5C1, 4af0, 85, 00, 72, 36, 47, DC, D2, 05)
#define ADO_Reserved_195 GUID_BUILDER (ADO_Reserved_195, 6a2cc3cc, 7855, 4b27, 86, F7, 98, 6b, AA, F9, 5f, 0f)
#define ADO_Reserved_196 GUID_BUILDER (ADO_Reserved_196, 7640b336, 9ebb, 4017, 9e, EE, 54, 01, F4, EC, B1, 70)
#define ADO_Reserved_197 GUID_BUILDER (ADO_Reserved_197, 507b39e1, 2965, 42ea, 92, 66, 55, 8d, E4, 31, 53, 73)
#define ADO_Reserved_198 GUID_BUILDER (ADO_Reserved_198, 58c591fa, 37ff, 4428, A0, 4a, 46, 71, 98, 17, 74, 8c)
#define ADO_Reserved_199 GUID_BUILDER (ADO_Reserved_199, 24be98e9, B43D, 49b5, 9c, 41, 20, AF, C2, FE, 1d, 8d)
#define ADO_Reserved_200 GUID_BUILDER (ADO_Reserved_200, 041956c5, B951, 4c8f, 8c, 61, 8e, 12, 34, E1, E9, 61)
#define ADO_Reserved_201 GUID_BUILDER (ADO_Reserved_201, 6c98d05c, D366, 48b4, 80, E3, 8f, A1, CC, 06, 1d, B7)
#define ADO_Reserved_202 GUID_BUILDER (ADO_Reserved_202, 09570783, A1E8, 4a52, BA, 74, 6c, AC, 02, C0, 14, 8c)
#define ADO_Reserved_203 GUID_BUILDER (ADO_Reserved_203, 96c8c205, FD0D, 4b56, 9a, 12, 39, B3, 7e, 9d, 07, 4d)
#define ADO_Reserved_204 GUID_BUILDER (ADO_Reserved_204, 136c40e1, 366e, 4ba6, AF, 71, C4, 9a, EF, 17, 3f, C0)
#define ADO_Reserved_205 GUID_BUILDER (ADO_Reserved_205, A298C799, 06fb, 466e, B5, 6d, 3e, CC, 6d, 0c, D6, 75)
#define ADO_Reserved_206 GUID_BUILDER (ADO_Reserved_206, 41a96542, 08f2, 4609, B7, 6a, ED, 93, E5, 5b, 8c, 60)
#define ADO_Reserved_207 GUID_BUILDER (ADO_Reserved_207, 65a3b57e, 06f9, 4572, 80, 91, 17, 3f, C4, A6, 5a, 16)
#define ADO_Reserved_208 GUID_BUILDER (ADO_Reserved_208, 114f3e9d, 5431, 4dc1, 95, 42, 9b, 85, 44, CF, 83, B2)
#define ADO_Reserved_209 GUID_BUILDER (ADO_Reserved_209, 41de92d4, 9f2a, 4085, 8c, C1, C1, 04, 3e, 5b, 11, 12)
#define ADO_Reserved_210 GUID_BUILDER (ADO_Reserved_210, E32A7A98, FF1E, 45c9, AA, 51, 5f, 86, 9a, 9a, 48, 57)
#define ADO_Reserved_211 GUID_BUILDER (ADO_Reserved_211, 5e5a209f, 3efc, 48bc, A7, 1e, F4, CE, BE, 4c, A6, 25)
#define ADO_Reserved_212 GUID_BUILDER (ADO_Reserved_212, C556C1CC, 8b2e, 482b, B7, 8c, E2, F6, FD, A0, 4f, 4d)
#define ADO_Reserved_213 GUID_BUILDER (ADO_Reserved_213, 39c54fd9, A22A, 43d4, A4, 36, D9, CB, C5, 53, D5, 5a)
#define ADO_Reserved_214 GUID_BUILDER (ADO_Reserved_214, 750e0ba2, E25C, 479f, B0, C1, 58, 44, A1, 4d, 08, 77)
#define ADO_Reserved_215 GUID_BUILDER (ADO_Reserved_215, 7ecbdb2c, C5C2, 48fb, 8a, 3a, 30, B7, E7, BD, 17, 25)
#define ADO_Reserved_216 GUID_BUILDER (ADO_Reserved_216, 0bf18ac7, 8be1, 49e6, A8, 57, EA, 89, 3a, 83, 58, F5)
#define ADO_Reserved_217 GUID_BUILDER (ADO_Reserved_217, DA74EAB6, AAFE, 42ad, 8a, 0d, B2, 73, 35, 0c, 82, E3)
#define ADO_Reserved_218 GUID_BUILDER (ADO_Reserved_218, F6A3D173, E366, 424a, AD, 0c, 25, 5c, 32, 2d, 09, 80)
#define ADO_Reserved_219 GUID_BUILDER (ADO_Reserved_219, 7cd83ba3, 0516, 4366, BB, 85, DE, 53, 03, F7, 75, 08)
#define ADO_Reserved_220 GUID_BUILDER (ADO_Reserved_220, 42edfc05, 3a70, 4f5c, 8c, 32, 06, 5e, 61, 45, 3c, BE)
#define ADO_Reserved_221 GUID_BUILDER (ADO_Reserved_221, 624bc037, 05b0, 44e1, 85, A7, 73, C4, 7f, A0, CC, 04)
#define ADO_Reserved_222 GUID_BUILDER (ADO_Reserved_222, 8811f8dd, FA15, 4fa6, A7, 6e, 7e, DA, E7, 0d, EC, D4)
#define ADO_Reserved_223 GUID_BUILDER (ADO_Reserved_223, DD310D89, 9f22, 4f49, 89, 8c, AF, A2, 7f, AF, 11, 1c)
#define ADO_Reserved_224 GUID_BUILDER (ADO_Reserved_224, 321e3a7d, DF0E, 4ff7, 98, 5d, F6, E6, 73, FD, E2, 9f)
#define ADO_Reserved_225 GUID_BUILDER (ADO_Reserved_225, 036d1b77, 3737, 47cb, 9e, 75, 31, 13, 13, 2d, 32, B8)
#define ADO_Reserved_226 GUID_BUILDER (ADO_Reserved_226, A46B9E8C, 4740, 4919, 86, 34, A3, 57, 73, F6, 53, 2f)
#define ADO_Reserved_227 GUID_BUILDER (ADO_Reserved_227, 7c064e3a, 014e, 4733, 9d, 00, 5d, 03, 13, F7, B7, F5)
#define ADO_Reserved_228 GUID_BUILDER (ADO_Reserved_228, 7cbff995, A041, 4b0a, B7, 9b, 16, 3a, 74, 2c, DC, CF)
#define ADO_Reserved_229 GUID_BUILDER (ADO_Reserved_229, C3271965, BA03, 4abc, 8f, D8, 98, 97, 7e, 4c, B3, 9a)
#define ADO_Reserved_230 GUID_BUILDER (ADO_Reserved_230, 565dc4b1, 8d7a, 41c6, AE, 01, 6c, EF, 63, 46, 4d, 5e)
#define ADO_Reserved_231 GUID_BUILDER (ADO_Reserved_231, 3331e567, EB74, 45d2, 86, 32, 20, 43, 47, DB, BE, 04)
#define ADO_Reserved_232 GUID_BUILDER (ADO_Reserved_232, 3cee44a8, 6fc5, 4cd5, AA, 9d, 1b, 67, 4c, B6, 2e, EC)
#define ADO_Reserved_233 GUID_BUILDER (ADO_Reserved_233, CD1BE145, 71b9, 4ccd, A7, AF, 5b, BA, A0, 2a, 51, E6)
#define ADO_Reserved_234 GUID_BUILDER (ADO_Reserved_234, 4203c429, F3F0, 4dd7, 91, 24, 51, E0, 13, 95, 5e, 7a)
#define ADO_Reserved_235 GUID_BUILDER (ADO_Reserved_235, BB256836, 2804, 492f, 9c, B2, CF, 83, CB, 82, 63, 8a)
#define ADO_Reserved_236 GUID_BUILDER (ADO_Reserved_236, 8b247756, 34aa, 45ef, B1, 24, A9, 60, 66, AC, E8, D6)
#define ADO_Reserved_237 GUID_BUILDER (ADO_Reserved_237, EF1CF73C, 4915, 4289, AD, C4, DD, DA, 62, 70, 70, A6)
#define ADO_Reserved_238 GUID_BUILDER (ADO_Reserved_238, D0EB0A94, 91a0, 49d3, 97, 26, 94, 52, 66, 5a, FE, 53)
#define ADO_Reserved_239 GUID_BUILDER (ADO_Reserved_239, D6F5003E, 4c06, 47b1, 89, E9, D6, 3c, 3d, 7d, 41, B6)
#define ADO_Reserved_240 GUID_BUILDER (ADO_Reserved_240, AA803151, F4AE, 4ce3, BC, 92, 97, 1c, 84, 2e, F5, BC)
#define ADO_Reserved_241 GUID_BUILDER (ADO_Reserved_241, C4BB086F, 5b11, 4c67, 98, 6c, 8c, D4, 8c, 5c, E3, 8b)
#define ADO_Reserved_242 GUID_BUILDER (ADO_Reserved_242, F1C4A502, 4744, 478f, 87, 71, C6, 94, CC, 2d, F7, B6)
#define ADO_Reserved_243 GUID_BUILDER (ADO_Reserved_243, 2cd39761, F389, 4f5e, BE, 91, A6, B9, 1b, 18, AD, 12)
#define ADO_Reserved_244 GUID_BUILDER (ADO_Reserved_244, 8895ba8f, 0cb7, 4354, A8, EA, CD, 9d, F4, 1b, F8, 88)
#define ADO_Reserved_245 GUID_BUILDER (ADO_Reserved_245, 71e0b0dc, 1245, 441d, 92, 92, 32, 71, 3f, 57, 97, 7a)
#define ADO_Reserved_246 GUID_BUILDER (ADO_Reserved_246, 7604d0cb, F137, 472d, 8b, 4c, 85, 66, 72, 9a, CF, 03)
#define ADO_Reserved_247 GUID_BUILDER (ADO_Reserved_247, 94c9b5ac, 8309, 4f4b, 8e, 68, C4, 37, 7e, C2, B7, 91)
#define ADO_Reserved_248 GUID_BUILDER (ADO_Reserved_248, 0e555180, 5e2c, 4bf6, 90, A0, 1b, 36, 3d, 4b, B9, 99)
#define ADO_Reserved_249 GUID_BUILDER (ADO_Reserved_249, C077D666, 6988, 4eac, A5, 52, 61, 61, 55, F9, 6a, 12)

#ifdef IMMEDIATE_GUID_USE
ADO_Reserved_4;
ADO_Reserved_5; ADO_Reserved_6; ADO_Reserved_7; ADO_Reserved_8; ADO_Reserved_9;
ADO_Reserved_10; ADO_Reserved_12; ADO_Reserved_13; ADO_Reserved_14;
ADO_Reserved_15; ADO_Reserved_16; ADO_Reserved_17; ADO_Reserved_18; ADO_Reserved_19;
ADO_Reserved_20; ADO_Reserved_21; ADO_Reserved_22; ADO_Reserved_23; ADO_Reserved_24;
ADO_Reserved_25; ADO_Reserved_26; ADO_Reserved_27; ADO_Reserved_28; ADO_Reserved_29;
ADO_Reserved_30; ADO_Reserved_31; ADO_Reserved_32; ADO_Reserved_33; ADO_Reserved_34;
ADO_Reserved_35; ADO_Reserved_36; ADO_Reserved_37; ADO_Reserved_38; ADO_Reserved_39;
ADO_Reserved_40; ADO_Reserved_41; ADO_Reserved_42; ADO_Reserved_43; ADO_Reserved_44;
ADO_Reserved_45; ADO_Reserved_46; ADO_Reserved_47; ADO_Reserved_48; ADO_Reserved_49;
ADO_Reserved_50; ADO_Reserved_51; ADO_Reserved_52; ADO_Reserved_53; ADO_Reserved_54;
ADO_Reserved_55; ADO_Reserved_56; ADO_Reserved_57; ADO_Reserved_58; ADO_Reserved_59;
ADO_Reserved_60; ADO_Reserved_61; ADO_Reserved_62; ADO_Reserved_63; ADO_Reserved_64;
ADO_Reserved_65; ADO_Reserved_66; ADO_Reserved_67; ADO_Reserved_68; ADO_Reserved_69;
ADO_Reserved_70; ADO_Reserved_71; ADO_Reserved_72; ADO_Reserved_73; ADO_Reserved_74;
ADO_Reserved_75; ADO_Reserved_76; ADO_Reserved_77; ADO_Reserved_78; ADO_Reserved_79;
ADO_Reserved_80; ADO_Reserved_81; ADO_Reserved_82; ADO_Reserved_83; ADO_Reserved_84;
ADO_Reserved_85; ADO_Reserved_86; ADO_Reserved_87; ADO_Reserved_88; ADO_Reserved_89;
ADO_Reserved_90; ADO_Reserved_91; ADO_Reserved_92; ADO_Reserved_93; ADO_Reserved_94;
ADO_Reserved_95; ADO_Reserved_96; ADO_Reserved_97; ADO_Reserved_98; ADO_Reserved_99;
ADO_Reserved_100; ADO_Reserved_101; ADO_Reserved_102; ADO_Reserved_103; ADO_Reserved_104;
ADO_Reserved_105; ADO_Reserved_106; ADO_Reserved_107; ADO_Reserved_108; ADO_Reserved_109;
ADO_Reserved_110; ADO_Reserved_111; ADO_Reserved_112; ADO_Reserved_113; ADO_Reserved_114;
ADO_Reserved_115; ADO_Reserved_116; ADO_Reserved_117; ADO_Reserved_118; ADO_Reserved_119;
ADO_Reserved_120; ADO_Reserved_121; ADO_Reserved_122; ADO_Reserved_123; ADO_Reserved_124;
ADO_Reserved_125; ADO_Reserved_126; ADO_Reserved_127; ADO_Reserved_128; ADO_Reserved_129;
ADO_Reserved_130; ADO_Reserved_131; ADO_Reserved_132; ADO_Reserved_133; ADO_Reserved_134;
ADO_Reserved_135; ADO_Reserved_136; ADO_Reserved_137; ADO_Reserved_138; ADO_Reserved_139;
ADO_Reserved_140; ADO_Reserved_141; ADO_Reserved_142; ADO_Reserved_143; ADO_Reserved_144;
ADO_Reserved_145; ADO_Reserved_146; ADO_Reserved_147; ADO_Reserved_148; ADO_Reserved_149;
ADO_Reserved_150; ADO_Reserved_151; ADO_Reserved_152; ADO_Reserved_153; ADO_Reserved_154;
ADO_Reserved_155; ADO_Reserved_156; ADO_Reserved_157; ADO_Reserved_158; ADO_Reserved_159;
ADO_Reserved_160; ADO_Reserved_161; ADO_Reserved_162; ADO_Reserved_163; ADO_Reserved_164;
ADO_Reserved_165; ADO_Reserved_166; ADO_Reserved_167; ADO_Reserved_168; ADO_Reserved_169;
ADO_Reserved_170; ADO_Reserved_171; ADO_Reserved_172; ADO_Reserved_173; ADO_Reserved_174;
ADO_Reserved_175; ADO_Reserved_176; ADO_Reserved_177; ADO_Reserved_178; ADO_Reserved_179;
ADO_Reserved_180; ADO_Reserved_181; ADO_Reserved_182; ADO_Reserved_183; ADO_Reserved_184;
ADO_Reserved_185; ADO_Reserved_186; ADO_Reserved_187; ADO_Reserved_188; ADO_Reserved_189;
ADO_Reserved_190; ADO_Reserved_191; ADO_Reserved_192; ADO_Reserved_193; ADO_Reserved_194;
ADO_Reserved_195; ADO_Reserved_196; ADO_Reserved_197; ADO_Reserved_198; ADO_Reserved_199;
ADO_Reserved_200; ADO_Reserved_201; ADO_Reserved_202; ADO_Reserved_203; ADO_Reserved_204;
ADO_Reserved_205; ADO_Reserved_206; ADO_Reserved_207; ADO_Reserved_208; ADO_Reserved_209;
ADO_Reserved_210; ADO_Reserved_211; ADO_Reserved_212; ADO_Reserved_213; ADO_Reserved_214;
ADO_Reserved_215; ADO_Reserved_216; ADO_Reserved_217; ADO_Reserved_218; ADO_Reserved_219;
ADO_Reserved_220; ADO_Reserved_221; ADO_Reserved_222; ADO_Reserved_223; ADO_Reserved_224;
ADO_Reserved_225; ADO_Reserved_226; ADO_Reserved_227; ADO_Reserved_228; ADO_Reserved_229;
ADO_Reserved_230; ADO_Reserved_231; ADO_Reserved_232; ADO_Reserved_233; ADO_Reserved_234;
ADO_Reserved_235; ADO_Reserved_236; ADO_Reserved_237; ADO_Reserved_238; ADO_Reserved_239;
ADO_Reserved_240; ADO_Reserved_241; ADO_Reserved_242; ADO_Reserved_243; ADO_Reserved_244;
ADO_Reserved_245; ADO_Reserved_246; ADO_Reserved_247; ADO_Reserved_248; ADO_Reserved_249;

#undef ADO_Reserved_4
#undef ADO_Reserved_5
#undef ADO_Reserved_6
#undef ADO_Reserved_7
#undef ADO_Reserved_8
#undef ADO_Reserved_9
#undef ADO_Reserved_10
#undef ADO_Reserved_12
#undef ADO_Reserved_13
#undef ADO_Reserved_14
#undef ADO_Reserved_15
#undef ADO_Reserved_16
#undef ADO_Reserved_17
#undef ADO_Reserved_18
#undef ADO_Reserved_19
#undef ADO_Reserved_20
#undef ADO_Reserved_21
#undef ADO_Reserved_22
#undef ADO_Reserved_23
#undef ADO_Reserved_24
#undef ADO_Reserved_25
#undef ADO_Reserved_26
#undef ADO_Reserved_27
#undef ADO_Reserved_28
#undef ADO_Reserved_29
#undef ADO_Reserved_30
#undef ADO_Reserved_31
#undef ADO_Reserved_32
#undef ADO_Reserved_33
#undef ADO_Reserved_34
#undef ADO_Reserved_35
#undef ADO_Reserved_36
#undef ADO_Reserved_37
#undef ADO_Reserved_38
#undef ADO_Reserved_39
#undef ADO_Reserved_40
#undef ADO_Reserved_41
#undef ADO_Reserved_42
#undef ADO_Reserved_43
#undef ADO_Reserved_44
#undef ADO_Reserved_45
#undef ADO_Reserved_46
#undef ADO_Reserved_47
#undef ADO_Reserved_48
#undef ADO_Reserved_49
#undef ADO_Reserved_50
#undef ADO_Reserved_51
#undef ADO_Reserved_52
#undef ADO_Reserved_53
#undef ADO_Reserved_54
#undef ADO_Reserved_55
#undef ADO_Reserved_56
#undef ADO_Reserved_57
#undef ADO_Reserved_58
#undef ADO_Reserved_59
#undef ADO_Reserved_60
#undef ADO_Reserved_61
#undef ADO_Reserved_62
#undef ADO_Reserved_63
#undef ADO_Reserved_64
#undef ADO_Reserved_65
#undef ADO_Reserved_66
#undef ADO_Reserved_67
#undef ADO_Reserved_68
#undef ADO_Reserved_69
#undef ADO_Reserved_70
#undef ADO_Reserved_71
#undef ADO_Reserved_72
#undef ADO_Reserved_73
#undef ADO_Reserved_74
#undef ADO_Reserved_75
#undef ADO_Reserved_76
#undef ADO_Reserved_77
#undef ADO_Reserved_78
#undef ADO_Reserved_79
#undef ADO_Reserved_80
#undef ADO_Reserved_81
#undef ADO_Reserved_82
#undef ADO_Reserved_83
#undef ADO_Reserved_84
#undef ADO_Reserved_85
#undef ADO_Reserved_86
#undef ADO_Reserved_87
#undef ADO_Reserved_88
#undef ADO_Reserved_89
#undef ADO_Reserved_90
#undef ADO_Reserved_91
#undef ADO_Reserved_92
#undef ADO_Reserved_93
#undef ADO_Reserved_94
#undef ADO_Reserved_95
#undef ADO_Reserved_96
#undef ADO_Reserved_97
#undef ADO_Reserved_98
#undef ADO_Reserved_99
#undef ADO_Reserved_100
#undef ADO_Reserved_101
#undef ADO_Reserved_102
#undef ADO_Reserved_103
#undef ADO_Reserved_104
#undef ADO_Reserved_105
#undef ADO_Reserved_106
#undef ADO_Reserved_107
#undef ADO_Reserved_108
#undef ADO_Reserved_109
#undef ADO_Reserved_110
#undef ADO_Reserved_111
#undef ADO_Reserved_112
#undef ADO_Reserved_113
#undef ADO_Reserved_114
#undef ADO_Reserved_115
#undef ADO_Reserved_116
#undef ADO_Reserved_117
#undef ADO_Reserved_118
#undef ADO_Reserved_119
#undef ADO_Reserved_120
#undef ADO_Reserved_121
#undef ADO_Reserved_122
#undef ADO_Reserved_123
#undef ADO_Reserved_124
#undef ADO_Reserved_125
#undef ADO_Reserved_126
#undef ADO_Reserved_127
#undef ADO_Reserved_128
#undef ADO_Reserved_129
#undef ADO_Reserved_130
#undef ADO_Reserved_131
#undef ADO_Reserved_132
#undef ADO_Reserved_133
#undef ADO_Reserved_134
#undef ADO_Reserved_135
#undef ADO_Reserved_136
#undef ADO_Reserved_137
#undef ADO_Reserved_138
#undef ADO_Reserved_139
#undef ADO_Reserved_140
#undef ADO_Reserved_141
#undef ADO_Reserved_142
#undef ADO_Reserved_143
#undef ADO_Reserved_144
#undef ADO_Reserved_145
#undef ADO_Reserved_146
#undef ADO_Reserved_147
#undef ADO_Reserved_148
#undef ADO_Reserved_149
#undef ADO_Reserved_150
#undef ADO_Reserved_151
#undef ADO_Reserved_152
#undef ADO_Reserved_153
#undef ADO_Reserved_154
#undef ADO_Reserved_155
#undef ADO_Reserved_156
#undef ADO_Reserved_157
#undef ADO_Reserved_158
#undef ADO_Reserved_159
#undef ADO_Reserved_160
#undef ADO_Reserved_161
#undef ADO_Reserved_162
#undef ADO_Reserved_163
#undef ADO_Reserved_164
#undef ADO_Reserved_165
#undef ADO_Reserved_166
#undef ADO_Reserved_167
#undef ADO_Reserved_168
#undef ADO_Reserved_169
#undef ADO_Reserved_170
#undef ADO_Reserved_171
#undef ADO_Reserved_172
#undef ADO_Reserved_173
#undef ADO_Reserved_174
#undef ADO_Reserved_175
#undef ADO_Reserved_176
#undef ADO_Reserved_177
#undef ADO_Reserved_178
#undef ADO_Reserved_179
#undef ADO_Reserved_180
#undef ADO_Reserved_181
#undef ADO_Reserved_182
#undef ADO_Reserved_183
#undef ADO_Reserved_184
#undef ADO_Reserved_185
#undef ADO_Reserved_186
#undef ADO_Reserved_187
#undef ADO_Reserved_188
#undef ADO_Reserved_189
#undef ADO_Reserved_190
#undef ADO_Reserved_191
#undef ADO_Reserved_192
#undef ADO_Reserved_193
#undef ADO_Reserved_194
#undef ADO_Reserved_195
#undef ADO_Reserved_196
#undef ADO_Reserved_197
#undef ADO_Reserved_198
#undef ADO_Reserved_199
#undef ADO_Reserved_200
#undef ADO_Reserved_201
#undef ADO_Reserved_202
#undef ADO_Reserved_203
#undef ADO_Reserved_204
#undef ADO_Reserved_205
#undef ADO_Reserved_206
#undef ADO_Reserved_207
#undef ADO_Reserved_208
#undef ADO_Reserved_209
#undef ADO_Reserved_210
#undef ADO_Reserved_211
#undef ADO_Reserved_212
#undef ADO_Reserved_213
#undef ADO_Reserved_214
#undef ADO_Reserved_215
#undef ADO_Reserved_216
#undef ADO_Reserved_217
#undef ADO_Reserved_218
#undef ADO_Reserved_219
#undef ADO_Reserved_220
#undef ADO_Reserved_221
#undef ADO_Reserved_222
#undef ADO_Reserved_223
#undef ADO_Reserved_224
#undef ADO_Reserved_225
#undef ADO_Reserved_226
#undef ADO_Reserved_227
#undef ADO_Reserved_228
#undef ADO_Reserved_229
#undef ADO_Reserved_230
#undef ADO_Reserved_231
#undef ADO_Reserved_232
#undef ADO_Reserved_233
#undef ADO_Reserved_234
#undef ADO_Reserved_235
#undef ADO_Reserved_236
#undef ADO_Reserved_237
#undef ADO_Reserved_238
#undef ADO_Reserved_239
#undef ADO_Reserved_240
#undef ADO_Reserved_241
#undef ADO_Reserved_242
#undef ADO_Reserved_243
#undef ADO_Reserved_244
#undef ADO_Reserved_245
#undef ADO_Reserved_246
#undef ADO_Reserved_247
#undef ADO_Reserved_248
#undef ADO_Reserved_249
#endif

#endif

#endif
                                                                                                                                                                                                                                                                                                                                 usr/share/mingw-w64/include/adoguids.h                                                              0100644 0000000 0000000 00000001305 12404413022 016301  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#define STRING_GUID(l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) l##-##w1##-##w2##-##b1##b2##-##b3##b4##b5##b6##b7##b8

#ifdef __WIDL__
#define GUID_BUILDER(n, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) STRING_GUID (l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)
#else
#define GUID_BUILDER(n, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) DEFINE_GUID (n, 0x##l, 0x##w1, 0x##w2, 0x##b1, 0x##b2, 0x##b3, 0x##b4, 0x##b5, 0x##b6, 0x##b7, 0x##b8)
#define IMMEDIATE_GUID_USE
#endif

#define INCLUDING_ADOGUIDS
#include "adogpool.h"
#undef INCLUDING_ADOGUIDS

#undef IMMEDIATE_GUID_USE
                                                                                                                                                                                                                                                                                                                           usr/share/mingw-w64/include/adoid.h                                                                 0100644 0000000 0000000 00000000473 12404413022 015567  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#include <winapifamily.h>

#ifndef _ADOID_H_
#define _ADOID_H_

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)
#include "adodef.h"
#include "adoguids.h"
#endif

#endif
                                                                                                                                                                                                     usr/share/mingw-w64/include/adoint.h                                                                0100644 0000000 0000000 00000746043 12404413022 015777  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#if !defined (NTDDI_VERSION) || (NTDDI_VERSION < 0x06020000)
#include "adoint_backcompat.h"
#else

#ifndef _ADOINT_H_
#define _ADOINT_H_

#ifndef _INC_TCHAR
#include <tchar.h>
#endif

#ifndef DECLSPEC_UUID
#define DECLSPEC_UUID(x)
#endif

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif
#include "rpc.h"
#include "rpcndr.h"
#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif
#ifndef __ado10_h__
#define __ado10_h__

#ifndef ___ADOCollection_FWD_DEFINED__
#define ___ADOCollection_FWD_DEFINED__
typedef interface _ADOCollection _ADOCollection;
#endif
#ifndef ___ADODynaCollection_FWD_DEFINED__
#define ___ADODynaCollection_FWD_DEFINED__
typedef interface _ADODynaCollection _ADODynaCollection;
#endif
#ifndef ___ADO_FWD_DEFINED__
#define ___ADO_FWD_DEFINED__
typedef interface _ADO _ADO;
#endif
#ifndef __Error_FWD_DEFINED__
#define __Error_FWD_DEFINED__
typedef interface ADOError Error;
#endif
#ifndef __Errors_FWD_DEFINED__
#define __Errors_FWD_DEFINED__
typedef interface ADOErrors Errors;
#endif
#ifndef __Command15_FWD_DEFINED__
#define __Command15_FWD_DEFINED__
typedef interface Command15 Command15;
#endif
#ifndef __Command25_FWD_DEFINED__
#define __Command25_FWD_DEFINED__
typedef interface Command25 Command25;
#endif
#ifndef ___Command_FWD_DEFINED__
#define ___Command_FWD_DEFINED__
typedef interface _ADOCommand _Command;
#endif
#ifndef __ConnectionEventsVt_FWD_DEFINED__
#define __ConnectionEventsVt_FWD_DEFINED__
typedef interface ConnectionEventsVt ConnectionEventsVt;
#endif
#ifndef __RecordsetEventsVt_FWD_DEFINED__
#define __RecordsetEventsVt_FWD_DEFINED__
typedef interface RecordsetEventsVt RecordsetEventsVt;
#endif
#ifndef __ConnectionEvents_FWD_DEFINED__
#define __ConnectionEvents_FWD_DEFINED__
typedef interface ConnectionEvents ConnectionEvents;
#endif
#ifndef __RecordsetEvents_FWD_DEFINED__
#define __RecordsetEvents_FWD_DEFINED__
typedef interface RecordsetEvents RecordsetEvents;
#endif
#ifndef __Connection15_FWD_DEFINED__
#define __Connection15_FWD_DEFINED__
typedef interface Connection15 Connection15;
#endif
#ifndef ___Connection_FWD_DEFINED__
#define ___Connection_FWD_DEFINED__
typedef interface _ADOConnection _Connection;
#endif
#ifndef __ADOConnectionConstruction15_FWD_DEFINED__
#define __ADOConnectionConstruction15_FWD_DEFINED__
typedef interface ADOConnectionConstruction15 ADOConnectionConstruction15;
#endif
#ifndef __ADOConnectionConstruction_FWD_DEFINED__
#define __ADOConnectionConstruction_FWD_DEFINED__
typedef interface ADOConnectionConstruction ADOConnectionConstruction;
#endif
#ifndef __Connection_FWD_DEFINED__
#define __Connection_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOConnection Connection;
#else
typedef struct ADOConnection Connection;
#endif
#endif
#ifndef ___Record_FWD_DEFINED__
#define ___Record_FWD_DEFINED__
typedef interface _ADORecord _Record;
#endif
#ifndef __Record_FWD_DEFINED__
#define __Record_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADORecord Record;
#else
typedef struct ADORecord Record;
#endif
#endif
#ifndef ___Stream_FWD_DEFINED__
#define ___Stream_FWD_DEFINED__
typedef interface _ADOStream _Stream;
#endif
#ifndef __Stream_FWD_DEFINED__
#define __Stream_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOStream Stream;
#else
typedef struct ADOStream Stream;
#endif
#endif
#ifndef __ADORecordConstruction_FWD_DEFINED__
#define __ADORecordConstruction_FWD_DEFINED__
typedef interface ADORecordConstruction ADORecordConstruction;
#endif
#ifndef __ADOStreamConstruction_FWD_DEFINED__
#define __ADOStreamConstruction_FWD_DEFINED__
typedef interface ADOStreamConstruction ADOStreamConstruction;
#endif
#ifndef __ADOCommandConstruction_FWD_DEFINED__
#define __ADOCommandConstruction_FWD_DEFINED__
typedef interface ADOCommandConstruction ADOCommandConstruction;
#endif
#ifndef __Command_FWD_DEFINED__
#define __Command_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOCommand Command;
#else
typedef struct ADOCommand Command;
#endif
#endif
#ifndef __Recordset_FWD_DEFINED__
#define __Recordset_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADORecordset Recordset;
#else
typedef struct ADORecordset Recordset;
#endif
#endif
#ifndef __Recordset15_FWD_DEFINED__
#define __Recordset15_FWD_DEFINED__
typedef interface Recordset15 Recordset15;
#endif
#ifndef __Recordset20_FWD_DEFINED__
#define __Recordset20_FWD_DEFINED__
typedef interface Recordset20 Recordset20;
#endif
#ifndef __Recordset21_FWD_DEFINED__
#define __Recordset21_FWD_DEFINED__
typedef interface Recordset21 Recordset21;
#endif
#ifndef ___Recordset_FWD_DEFINED__
#define ___Recordset_FWD_DEFINED__
typedef interface _ADORecordset _Recordset;
#endif
#ifndef __ADORecordsetConstruction_FWD_DEFINED__
#define __ADORecordsetConstruction_FWD_DEFINED__
typedef interface ADORecordsetConstruction ADORecordsetConstruction;
#endif
#ifndef __Field15_FWD_DEFINED__
#define __Field15_FWD_DEFINED__
typedef interface Field15 Field15;
#endif
#ifndef __Field20_FWD_DEFINED__
#define __Field20_FWD_DEFINED__
typedef interface Field20 Field20;
#endif
#ifndef __Field_FWD_DEFINED__
#define __Field_FWD_DEFINED__
typedef interface ADOField Field;
#endif
#ifndef __Fields15_FWD_DEFINED__
#define __Fields15_FWD_DEFINED__
typedef interface Fields15 Fields15;
#endif
#ifndef __Fields20_FWD_DEFINED__
#define __Fields20_FWD_DEFINED__
typedef interface Fields20 Fields20;
#endif
#ifndef __Fields_FWD_DEFINED__
#define __Fields_FWD_DEFINED__
typedef interface ADOFields Fields;
#endif
#ifndef ___Parameter_FWD_DEFINED__
#define ___Parameter_FWD_DEFINED__
typedef interface _ADOParameter _Parameter;
#endif
#ifndef __Parameter_FWD_DEFINED__
#define __Parameter_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOParameter Parameter;
#else
typedef struct ADOParameter Parameter;
#endif
#endif
#ifndef __Parameters_FWD_DEFINED__
#define __Parameters_FWD_DEFINED__
typedef interface ADOParameters Parameters;
#endif
#ifndef __Property_FWD_DEFINED__
#define __Property_FWD_DEFINED__
typedef interface ADOProperty Property;
#endif
#ifndef __Properties_FWD_DEFINED__
#define __Properties_FWD_DEFINED__
typedef interface ADOProperties Properties;
#endif
#ifdef __cplusplus
extern "C" {
#endif

#ifdef _WIN64

  typedef LONGLONG ADO_LONGPTR;
#else

  typedef LONG ADO_LONGPTR;
#endif
  extern RPC_IF_HANDLE __MIDL_itf_ado10_0000_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ado10_0000_0000_v0_0_s_ifspec;
#ifndef __ADODB_LIBRARY_DEFINED__
#define __ADODB_LIBRARY_DEFINED__

  typedef DECLSPEC_UUID ("0000051B-0000-0010-8000-00AA006D2EA4")
  enum CursorTypeEnum {
    adOpenUnspecified = -1,
    adOpenForwardOnly = 0,
    adOpenKeyset = 1,
    adOpenDynamic = 2,
    adOpenStatic = 3
  } CursorTypeEnum;
  typedef DECLSPEC_UUID ("0000051C-0000-0010-8000-00AA006D2EA4")
  enum CursorOptionEnum {
    adHoldRecords = 0x100,
    adMovePrevious = 0x200,
    adAddNew = 0x1000400,
    adDelete = 0x1000800,
    adUpdate = 0x1008000,
    adBookmark = 0x2000,
    adApproxPosition = 0x4000,
    adUpdateBatch = 0x10000,
    adResync = 0x20000,
    adNotify = 0x40000,
    adFind = 0x80000,
    adSeek = 0x400000,
    adIndex = 0x800000
  } CursorOptionEnum;
  typedef DECLSPEC_UUID ("0000051D-0000-0010-8000-00AA006D2EA4")
  enum LockTypeEnum {
    adLockUnspecified = -1,
    adLockReadOnly = 1,
    adLockPessimistic = 2,
    adLockOptimistic = 3,
    adLockBatchOptimistic = 4
  } LockTypeEnum;
  typedef DECLSPEC_UUID ("0000051E-0000-0010-8000-00AA006D2EA4")
  enum ExecuteOptionEnum {
    adOptionUnspecified = -1,
    adAsyncExecute = 0x10,
    adAsyncFetch = 0x20,
    adAsyncFetchNonBlocking = 0x40,
    adExecuteNoRecords = 0x80,
    adExecuteStream = 0x400,
    adExecuteRecord = 0x800
  } ExecuteOptionEnum;
  typedef DECLSPEC_UUID ("00000541-0000-0010-8000-00AA006D2EA4")
  enum ConnectOptionEnum {
    adConnectUnspecified = -1,
    adAsyncConnect = 0x10
  } ConnectOptionEnum;
  typedef DECLSPEC_UUID ("00000532-0000-0010-8000-00AA006D2EA4")
  enum ObjectStateEnum {
    adStateClosed = 0,
    adStateOpen = 0x1,
    adStateConnecting = 0x2,
    adStateExecuting = 0x4,
    adStateFetching = 0x8
  } ObjectStateEnum;
  typedef DECLSPEC_UUID ("0000052F-0000-0010-8000-00AA006D2EA4")
  enum CursorLocationEnum {
    adUseNone = 1,
    adUseServer = 2,
    adUseClient = 3,
    adUseClientBatch = 3
  } CursorLocationEnum;
  typedef DECLSPEC_UUID ("0000051F-0000-0010-8000-00AA006D2EA4")
  enum DataTypeEnum {
    adEmpty = 0,
    adTinyInt = 16,
    adSmallInt = 2,
    adInteger = 3,
    adBigInt = 20,
    adUnsignedTinyInt = 17,
    adUnsignedSmallInt = 18,
    adUnsignedInt = 19,
    adUnsignedBigInt = 21,
    adSingle = 4,
    adDouble = 5,
    adCurrency = 6,
    adDecimal = 14,
    adNumeric = 131,
    adBoolean = 11,
    adError = 10,
    adUserDefined = 132,
    adVariant = 12,
    adIDispatch = 9,
    adIUnknown = 13,
    adGUID = 72,
    adDate = 7,
    adDBDate = 133,
    adDBTime = 134,
    adDBTimeStamp = 135,
    adBSTR = 8,
    adChar = 129,
    adVarChar = 200,
    adLongVarChar = 201,
    adWChar = 130,
    adVarWChar = 202,
    adLongVarWChar = 203,
    adBinary = 128,
    adVarBinary = 204,
    adLongVarBinary = 205,
    adChapter = 136,
    adFileTime = 64,
    adPropVariant = 138,
    adVarNumeric = 139,
    adArray = 0x2000
  } DataTypeEnum;
  typedef DECLSPEC_UUID ("00000525-0000-0010-8000-00AA006D2EA4")
  enum FieldAttributeEnum {
    adFldUnspecified = -1,
    adFldMayDefer = 0x2,
    adFldUpdatable = 0x4,
    adFldUnknownUpdatable = 0x8,
    adFldFixed = 0x10,
    adFldIsNullable = 0x20,
    adFldMayBeNull = 0x40,
    adFldLong = 0x80,
    adFldRowID = 0x100,
    adFldRowVersion = 0x200,
    adFldCacheDeferred = 0x1000,
    adFldIsChapter = 0x2000,
    adFldNegativeScale = 0x4000,
    adFldKeyColumn = 0x8000,
    adFldIsRowURL = 0x10000,
    adFldIsDefaultStream = 0x20000,
    adFldIsCollection = 0x40000
  } FieldAttributeEnum;
  typedef DECLSPEC_UUID ("00000526-0000-0010-8000-00AA006D2EA4")
  enum EditModeEnum {
    adEditNone = 0,
    adEditInProgress = 0x1,
    adEditAdd = 0x2,
    adEditDelete = 0x4
  } EditModeEnum;
  typedef DECLSPEC_UUID ("00000527-0000-0010-8000-00AA006D2EA4")
  enum RecordStatusEnum {
    adRecOK = 0,
    adRecNew = 0x1,
    adRecModified = 0x2,
    adRecDeleted = 0x4,
    adRecUnmodified = 0x8,
    adRecInvalid = 0x10,
    adRecMultipleChanges = 0x40,
    adRecPendingChanges = 0x80,
    adRecCanceled = 0x100,
    adRecCantRelease = 0x400,
    adRecConcurrencyViolation = 0x800,
    adRecIntegrityViolation = 0x1000,
    adRecMaxChangesExceeded = 0x2000,
    adRecObjectOpen = 0x4000,
    adRecOutOfMemory = 0x8000,
    adRecPermissionDenied = 0x10000,
    adRecSchemaViolation = 0x20000,
    adRecDBDeleted = 0x40000
  } RecordStatusEnum;
  typedef DECLSPEC_UUID ("00000542-0000-0010-8000-00AA006D2EA4")
  enum GetRowsOptionEnum {
    adGetRowsRest = -1
  } GetRowsOptionEnum;
  typedef DECLSPEC_UUID ("00000528-0000-0010-8000-00AA006D2EA4")
  enum PositionEnum {
    adPosUnknown = -1,
    adPosBOF = -2,
    adPosEOF = -3
  } PositionEnum;
  typedef
  enum BookmarkEnum {
    adBookmarkCurrent = 0,
    adBookmarkFirst = 1,
    adBookmarkLast = 2
  } BookmarkEnum;
  typedef DECLSPEC_UUID ("00000540-0000-0010-8000-00AA006D2EA4")
  enum MarshalOptionsEnum {
    adMarshalAll = 0,
    adMarshalModifiedOnly = 1
  } MarshalOptionsEnum;
  typedef DECLSPEC_UUID ("00000543-0000-0010-8000-00AA006D2EA4")
  enum AffectEnum {
    adAffectCurrent = 1,
    adAffectGroup = 2,
    adAffectAll = 3,
    adAffectAllChapters = 4
  } AffectEnum;
  typedef DECLSPEC_UUID ("00000544-0000-0010-8000-00AA006D2EA4")
  enum ResyncEnum {
    adResyncUnderlyingValues = 1,
    adResyncAllValues = 2
  } ResyncEnum;
  typedef DECLSPEC_UUID ("00000545-0000-0010-8000-00AA006D2EA4")
  enum CompareEnum {
    adCompareLessThan = 0,
    adCompareEqual = 1,
    adCompareGreaterThan = 2,
    adCompareNotEqual = 3,
    adCompareNotComparable = 4
  } CompareEnum;
  typedef DECLSPEC_UUID ("00000546-0000-0010-8000-00AA006D2EA4")
  enum FilterGroupEnum {
    adFilterNone = 0,
    adFilterPendingRecords = 1,
    adFilterAffectedRecords = 2,
    adFilterFetchedRecords = 3,
    adFilterPredicate = 4,
    adFilterConflictingRecords = 5
  } FilterGroupEnum;
  typedef DECLSPEC_UUID ("00000547-0000-0010-8000-00AA006D2EA4")
  enum SearchDirectionEnum {
    adSearchForward = 1,
    adSearchBackward = -1
  } SearchDirectionEnum;
  typedef SearchDirectionEnum SearchDirection;
  typedef DECLSPEC_UUID ("00000548-0000-0010-8000-00AA006D2EA4")
  enum PersistFormatEnum {
    adPersistADTG = 0,
    adPersistXML = 1
  } PersistFormatEnum;
  typedef DECLSPEC_UUID ("00000549-0000-0010-8000-00AA006D2EA4")
  enum StringFormatEnum {
    adClipString = 2
  } StringFormatEnum;
  typedef DECLSPEC_UUID ("00000520-0000-0010-8000-00AA006D2EA4")
  enum ConnectPromptEnum {
    adPromptAlways = 1,
    adPromptComplete = 2,
    adPromptCompleteRequired = 3,
    adPromptNever = 4
  } ConnectPromptEnum;
  typedef DECLSPEC_UUID ("00000521-0000-0010-8000-00AA006D2EA4")
  enum ConnectModeEnum {
    adModeUnknown = 0,
    adModeRead = 1,
    adModeWrite = 2,
    adModeReadWrite = 3,
    adModeShareDenyRead = 4,
    adModeShareDenyWrite = 8,
    adModeShareExclusive = 0xc,
    adModeShareDenyNone = 0x10,
    adModeRecursive = 0x400000
  } ConnectModeEnum;
  typedef DECLSPEC_UUID ("00000570-0000-0010-8000-00AA006D2EA4")
  enum RecordCreateOptionsEnum {
    adCreateCollection = 0x2000,
    adCreateStructDoc = 0x80000000,
    adCreateNonCollection = 0,
    adOpenIfExists = 0x2000000,
    adCreateOverwrite = 0x4000000,
    adFailIfNotExists = -1
  } RecordCreateOptionsEnum;
  typedef DECLSPEC_UUID ("00000571-0000-0010-8000-00AA006D2EA4")
  enum RecordOpenOptionsEnum {
    adOpenRecordUnspecified = -1,
    adOpenSource = 0x800000,
    adOpenOutput = 0x800000,
    adOpenAsync = 0x1000,
    adDelayFetchStream = 0x4000,
    adDelayFetchFields = 0x8000,
    adOpenExecuteCommand = 0x10000
  } RecordOpenOptionsEnum;
  typedef DECLSPEC_UUID ("00000523-0000-0010-8000-00AA006D2EA4")
  enum IsolationLevelEnum {
    adXactUnspecified = 0xffffffff,
    adXactChaos = 0x10,
    adXactReadUncommitted = 0x100,
    adXactBrowse = 0x100,
    adXactCursorStability = 0x1000,
    adXactReadCommitted = 0x1000,
    adXactRepeatableRead = 0x10000,
    adXactSerializable = 0x100000,
    adXactIsolated = 0x100000
  } IsolationLevelEnum;
  typedef DECLSPEC_UUID ("00000524-0000-0010-8000-00AA006D2EA4")
  enum XactAttributeEnum {
    adXactCommitRetaining = 0x20000,
    adXactAbortRetaining = 0x40000,
    adXactAsyncPhaseOne = 0x80000,
    adXactSyncPhaseOne = 0x100000
  } XactAttributeEnum;
  typedef DECLSPEC_UUID ("00000529-0000-0010-8000-00AA006D2EA4")
  enum PropertyAttributesEnum {
    adPropNotSupported = 0,
    adPropRequired = 0x1,
    adPropOptional = 0x2,
    adPropRead = 0x200,
    adPropWrite = 0x400
  } PropertyAttributesEnum;
  typedef DECLSPEC_UUID ("0000052A-0000-0010-8000-00AA006D2EA4")
  enum ErrorValueEnum {
    adErrProviderFailed = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbb8),
    adErrInvalidArgument = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbb9),
    adErrOpeningFile = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbba),
    adErrReadFile = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbbb),
    adErrWriteFile = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbbc),
    adErrNoCurrentRecord = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbcd),
    adErrIllegalOperation = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xc93),
    adErrCantChangeProvider = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xc94),
    adErrInTransaction = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xcae),
    adErrFeatureNotAvailable = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xcb3),
    adErrItemNotFound = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xcc1),
    adErrObjectInCollection = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xd27),
    adErrObjectNotSet = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xd5c),
    adErrDataConversion = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xd5d),
    adErrObjectClosed = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe78),
    adErrObjectOpen = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe79),
    adErrProviderNotFound = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7a),
    adErrBoundToCommand = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7b),
    adErrInvalidParamInfo = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7c),
    adErrInvalidConnection = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7d),
    adErrNotReentrant = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7e),
    adErrStillExecuting = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7f),
    adErrOperationCancelled = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe80),
    adErrStillConnecting = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe81),
    adErrInvalidTransaction = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe82),
    adErrNotExecuting = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe83),
    adErrUnsafeOperation = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe84),
    adwrnSecurityDialog = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe85),
    adwrnSecurityDialogHeader = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe86),
    adErrIntegrityViolation = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe87),
    adErrPermissionDenied = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe88),
    adErrDataOverflow = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe89),
    adErrSchemaViolation = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8a),
    adErrSignMismatch = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8b),
    adErrCantConvertvalue = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8c),
    adErrCantCreate = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8d),
    adErrColumnNotOnThisRow = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8e),
    adErrURLDoesNotExist = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8f),
    adErrTreePermissionDenied = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe90),
    adErrInvalidURL = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe91),
    adErrResourceLocked = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe92),
    adErrResourceExists = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe93),
    adErrCannotComplete = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe94),
    adErrVolumeNotFound = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe95),
    adErrOutOfSpace = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe96),
    adErrResourceOutOfScope = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe97),
    adErrUnavailable = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe98),
    adErrURLNamedRowDoesNotExist = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe99),
    adErrDelResOutOfScope = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9a),
    adErrPropInvalidColumn = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9b),
    adErrPropInvalidOption = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9c),
    adErrPropInvalidValue = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9d),
    adErrPropConflicting = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9e),
    adErrPropNotAllSettable = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9f),
    adErrPropNotSet = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea0),
    adErrPropNotSettable = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea1),
    adErrPropNotSupported = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea2),
    adErrCatalogNotSet = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea3),
    adErrCantChangeConnection = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea4),
    adErrFieldsUpdateFailed = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea5),
    adErrDenyNotSupported = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea6),
    adErrDenyTypeNotSupported = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea7),
    adErrProviderNotSpecified = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea9),
    adErrConnectionStringTooLong = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xeaa)
  } ErrorValueEnum;
  typedef DECLSPEC_UUID ("0000052B-0000-0010-8000-00AA006D2EA4")
  enum ParameterAttributesEnum {
    adParamSigned = 0x10,
    adParamNullable = 0x40,
    adParamLong = 0x80
  } ParameterAttributesEnum;
  typedef DECLSPEC_UUID ("0000052C-0000-0010-8000-00AA006D2EA4")
  enum ParameterDirectionEnum {
    adParamUnknown = 0,
    adParamInput = 0x1,
    adParamOutput = 0x2,
    adParamInputOutput = 0x3,
    adParamReturnValue = 0x4
  } ParameterDirectionEnum;
  typedef DECLSPEC_UUID ("0000052E-0000-0010-8000-00AA006D2EA4")
  enum CommandTypeEnum {
    adCmdUnspecified = -1,
    adCmdUnknown = 0x8,
    adCmdText = 0x1,
    adCmdTable = 0x2,
    adCmdStoredProc = 0x4,
    adCmdFile = 0x100,
    adCmdTableDirect = 0x200
  } CommandTypeEnum;
  typedef DECLSPEC_UUID ("00000530-0000-0010-8000-00AA006D2EA4")
  enum EventStatusEnum {
    adStatusOK = 0x1,
    adStatusErrorsOccurred = 0x2,
    adStatusCantDeny = 0x3,
    adStatusCancel = 0x4,
    adStatusUnwantedEvent = 0x5
  } EventStatusEnum;
  typedef DECLSPEC_UUID ("00000531-0000-0010-8000-00AA006D2EA4")
  enum EventReasonEnum {
    adRsnAddNew = 1,
    adRsnDelete = 2,
    adRsnUpdate = 3,
    adRsnUndoUpdate = 4,
    adRsnUndoAddNew = 5,
    adRsnUndoDelete = 6,
    adRsnRequery = 7,
    adRsnResynch = 8,
    adRsnClose = 9,
    adRsnMove = 10,
    adRsnFirstChange = 11,
    adRsnMoveFirst = 12,
    adRsnMoveNext = 13,
    adRsnMovePrevious = 14,
    adRsnMoveLast = 15
  } EventReasonEnum;
  typedef DECLSPEC_UUID ("00000533-0000-0010-8000-00AA006D2EA4")
  enum SchemaEnum {
    adSchemaProviderSpecific = -1,
    adSchemaAsserts = 0,
    adSchemaCatalogs = 1,
    adSchemaCharacterSets = 2,
    adSchemaCollations = 3,
    adSchemaColumns = 4,
    adSchemaCheckConstraints = 5,
    adSchemaConstraintColumnUsage = 6,
    adSchemaConstraintTableUsage = 7,
    adSchemaKeyColumnUsage = 8,
    adSchemaReferentialContraints = 9,
    adSchemaReferentialConstraints = 9,
    adSchemaTableConstraints = 10,
    adSchemaColumnsDomainUsage = 11,
    adSchemaIndexes = 12,
    adSchemaColumnPrivileges = 13,
    adSchemaTablePrivileges = 14,
    adSchemaUsagePrivileges = 15,
    adSchemaProcedures = 16,
    adSchemaSchemata = 17,
    adSchemaSQLLanguages = 18,
    adSchemaStatistics = 19,
    adSchemaTables = 20,
    adSchemaTranslations = 21,
    adSchemaProviderTypes = 22,
    adSchemaViews = 23,
    adSchemaViewColumnUsage = 24,
    adSchemaViewTableUsage = 25,
    adSchemaProcedureParameters = 26,
    adSchemaForeignKeys = 27,
    adSchemaPrimaryKeys = 28,
    adSchemaProcedureColumns = 29,
    adSchemaDBInfoKeywords = 30,
    adSchemaDBInfoLiterals = 31,
    adSchemaCubes = 32,
    adSchemaDimensions = 33,
    adSchemaHierarchies = 34,
    adSchemaLevels = 35,
    adSchemaMeasures = 36,
    adSchemaProperties = 37,
    adSchemaMembers = 38,
    adSchemaTrustees = 39,
    adSchemaFunctions = 40,
    adSchemaActions = 41,
    adSchemaCommands = 42,
    adSchemaSets = 43
  } SchemaEnum;
  typedef DECLSPEC_UUID ("0000057E-0000-0010-8000-00AA006D2EA4")
  enum FieldStatusEnum {
    adFieldOK = 0,
    adFieldCantConvertValue = 2,
    adFieldIsNull = 3,
    adFieldTruncated = 4,
    adFieldSignMismatch = 5,
    adFieldDataOverflow = 6,
    adFieldCantCreate = 7,
    adFieldUnavailable = 8,
    adFieldPermissionDenied = 9,
    adFieldIntegrityViolation = 10,
    adFieldSchemaViolation = 11,
    adFieldBadStatus = 12,
    adFieldDefault = 13,
    adFieldIgnore = 15,
    adFieldDoesNotExist = 16,
    adFieldInvalidURL = 17,
    adFieldResourceLocked = 18,
    adFieldResourceExists = 19,
    adFieldCannotComplete = 20,
    adFieldVolumeNotFound = 21,
    adFieldOutOfSpace = 22,
    adFieldCannotDeleteSource = 23,
    adFieldReadOnly = 24,
    adFieldResourceOutOfScope = 25,
    adFieldAlreadyExists = 26,
    adFieldPendingInsert = 0x10000,
    adFieldPendingDelete = 0x20000,
    adFieldPendingChange = 0x40000,
    adFieldPendingUnknown = 0x80000,
    adFieldPendingUnknownDelete = 0x100000
  } FieldStatusEnum;
  typedef DECLSPEC_UUID ("00000552-0000-0010-8000-00AA006D2EA4")
  enum SeekEnum {
    adSeekFirstEQ = 0x1,
    adSeekLastEQ = 0x2,
    adSeekAfterEQ = 0x4,
    adSeekAfter = 0x8,
    adSeekBeforeEQ = 0x10,
    adSeekBefore = 0x20
  } SeekEnum;
#ifndef _COMMON_ADC_AND_ADO_PROPS_
#define _COMMON_ADC_AND_ADO_PROPS_
  typedef DECLSPEC_UUID ("0000054A-0000-0010-8000-00AA006D2EA4")
  enum ADCPROP_UPDATECRITERIA_ENUM {
    adCriteriaKey = 0,
    adCriteriaAllCols = 1,
    adCriteriaUpdCols = 2,
    adCriteriaTimeStamp = 3
  } ADCPROP_UPDATECRITERIA_ENUM;
  typedef DECLSPEC_UUID ("0000054B-0000-0010-8000-00AA006D2EA4")
  enum ADCPROP_ASYNCTHREADPRIORITY_ENUM {
    adPriorityLowest = 1,
    adPriorityBelowNormal = 2,
    adPriorityNormal = 3,
    adPriorityAboveNormal = 4,
    adPriorityHighest = 5
  } ADCPROP_ASYNCTHREADPRIORITY_ENUM;
  typedef DECLSPEC_UUID ("00000554-0000-0010-8000-00AA006D2EA4")
  enum ADCPROP_AUTORECALC_ENUM {
    adRecalcUpFront = 0,
    adRecalcAlways = 1
  } ADCPROP_AUTORECALC_ENUM;
  typedef DECLSPEC_UUID ("00000553-0000-0010-8000-00AA006D2EA4")
  enum ADCPROP_UPDATERESYNC_ENUM {
    adResyncNone = 0,
    adResyncAutoIncrement = 1,
    adResyncConflicts = 2,
    adResyncUpdates = 4,
    adResyncInserts = 8,
    adResyncAll = 15
  } ADCPROP_UPDATERESYNC_ENUM;
#endif
  typedef ADCPROP_UPDATERESYNC_ENUM CEResyncEnum;
  typedef DECLSPEC_UUID ("00000573-0000-0010-8000-00AA006D2EA4")
  enum MoveRecordOptionsEnum {
    adMoveUnspecified = -1,
    adMoveOverWrite = 1,
    adMoveDontUpdateLinks = 2,
    adMoveAllowEmulation = 4
  } MoveRecordOptionsEnum;
  typedef DECLSPEC_UUID ("00000574-0000-0010-8000-00AA006D2EA4")
  enum CopyRecordOptionsEnum {
    adCopyUnspecified = -1,
    adCopyOverWrite = 1,
    adCopyAllowEmulation = 4,
    adCopyNonRecursive = 2
  } CopyRecordOptionsEnum;
  typedef DECLSPEC_UUID ("00000576-0000-0010-8000-00AA006D2EA4")
  enum StreamTypeEnum {
    adTypeBinary = 1,
    adTypeText = 2
  } StreamTypeEnum;
  typedef DECLSPEC_UUID ("00000577-0000-0010-8000-00AA006D2EA4")
  enum LineSeparatorEnum {
    adLF = 10,
    adCR = 13,
    adCRLF = -1
  } LineSeparatorEnum;
  typedef DECLSPEC_UUID ("0000057A-0000-0010-8000-00AA006D2EA4")
  enum StreamOpenOptionsEnum {
    adOpenStreamUnspecified = -1,
    adOpenStreamAsync = 1,
    adOpenStreamFromRecord = 4
  } StreamOpenOptionsEnum;
  typedef DECLSPEC_UUID ("0000057B-0000-0010-8000-00AA006D2EA4")
  enum StreamWriteEnum {
    adWriteChar = 0,
    adWriteLine = 1,
    stWriteChar = 0,
    stWriteLine = 1
  } StreamWriteEnum;
  typedef DECLSPEC_UUID ("0000057C-0000-0010-8000-00AA006D2EA4")
  enum SaveOptionsEnum {
    adSaveCreateNotExist = 1,
    adSaveCreateOverWrite = 2
  } SaveOptionsEnum;
  typedef
  enum FieldEnum {
    adDefaultStream = -1,
    adRecordURL = -2
  } FieldEnum;
  typedef
  enum StreamReadEnum {
    adReadAll = -1,
    adReadLine = -2
  } StreamReadEnum;
  typedef DECLSPEC_UUID ("0000057D-0000-0010-8000-00AA006D2EA4")
  enum RecordTypeEnum {
    adSimpleRecord = 0,
    adCollectionRecord = 1,
    adStructDoc = 2
  } RecordTypeEnum;
  EXTERN_C const IID LIBID_ADODB;
#ifndef ___ADOCollection_INTERFACE_DEFINED__
#define ___ADOCollection_INTERFACE_DEFINED__

  EXTERN_C const IID IID__ADOCollection;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000512-0000-0010-8000-00AA006D2EA4")
  _ADOCollection : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Count (long *c) = 0;
    virtual HRESULT STDMETHODCALLTYPE _NewEnum (IUnknown **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Refresh (void) = 0;
  };
#else
  typedef struct _ADOCollectionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOCollection *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOCollection *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOCollection *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOCollection *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOCollection *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOCollection *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (_ADOCollection *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (_ADOCollection *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (_ADOCollection *This);
    END_INTERFACE
  } _ADOCollectionVtbl;
  interface _ADOCollection {
    CONST_VTBL struct _ADOCollectionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _ADOCollection_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _ADOCollection_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _ADOCollection_Release(This) ((This)->lpVtbl ->Release (This))
#define _ADOCollection_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _ADOCollection_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _ADOCollection_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _ADOCollection_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Collection_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define _ADOCollection__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define _ADOCollection_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#endif
#endif
#endif
#ifndef ___ADODynaCollection_INTERFACE_DEFINED__
#define ___ADODynaCollection_INTERFACE_DEFINED__

  EXTERN_C const IID IID__ADODynaCollection;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000513-0000-0010-8000-00AA006D2EA4")
  _ADODynaCollection : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE Append (IDispatch *Object) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Index) = 0;
  };
#else
  typedef struct _ADODynaCollectionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADODynaCollection *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADODynaCollection *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADODynaCollection *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADODynaCollection *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADODynaCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADODynaCollection *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADODynaCollection *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (_ADODynaCollection *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (_ADODynaCollection *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (_ADODynaCollection *This);
    HRESULT (STDMETHODCALLTYPE *Append) (_ADODynaCollection *This, IDispatch *Object);
    HRESULT (STDMETHODCALLTYPE *Delete) (_ADODynaCollection *This, VARIANT Index);
    END_INTERFACE
  } _ADODynaCollectionVtbl;
  interface _ADODynaCollection {
    CONST_VTBL struct _ADODynaCollectionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _ADODynaCollection_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _ADODynaCollection_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _ADODynaCollection_Release(This) ((This)->lpVtbl ->Release (This))
#define _ADODynaCollection_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _ADODynaCollection_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _ADODynaCollection_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _ADODynaCollection_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _DynaCollection_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define _ADODynaCollection__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define _ADODynaCollection_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define _ADODynaCollection_Append(This, Object) ((This)->lpVtbl ->Append (This, Object))
#define _ADODynaCollection_Delete(This, Index) ((This)->lpVtbl ->Delete (This, Index))
#endif
#endif
#endif
#ifndef ___ADO_INTERFACE_DEFINED__
#define ___ADO_INTERFACE_DEFINED__

  EXTERN_C const IID IID__ADO;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000534-0000-0010-8000-00AA006D2EA4")
  _ADO : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Properties (ADOProperties **ppvObject) = 0;
  };
#else
  typedef struct _ADOVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADO *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADO *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADO *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADO *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADO *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADO *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADO *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADO *This, ADOProperties **ppvObject);
    END_INTERFACE
  } _ADOVtbl;
  interface _ADO {
    CONST_VTBL struct _ADOVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _ADO_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _ADO_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _ADO_Release(This) ((This)->lpVtbl ->Release (This))
#define _ADO_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _ADO_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _ADO_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _ADO_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _ADO_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#endif
#endif
#endif
#ifndef __Error_INTERFACE_DEFINED__
#define __Error_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Error;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000500-0000-0010-8000-00AA006D2EA4")
  ADOError : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Number (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Source (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Description (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_HelpFile (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_HelpContext (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_SQLState (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_NativeError (long *pl) = 0;
  };
#else
  typedef struct ErrorVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOError *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOError *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOError *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOError *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOError *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOError *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOError *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Number) (ADOError *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_Source) (ADOError *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Description) (ADOError *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_HelpFile) (ADOError *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_HelpContext) (ADOError *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_SQLState) (ADOError *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_NativeError) (ADOError *This, long *pl);
    END_INTERFACE
  } ErrorVtbl;
  interface Error {
    CONST_VTBL struct ErrorVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Error_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Error_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Error_Release(This) ((This)->lpVtbl ->Release (This))
#define Error_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Error_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Error_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Error_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Error_get_Number(This, pl) ((This)->lpVtbl ->get_Number (This, pl))
#define Error_get_Source(This, pbstr) ((This)->lpVtbl ->get_Source (This, pbstr))
#define Error_get_Description(This, pbstr) ((This)->lpVtbl ->get_Description (This, pbstr))
#define Error_get_HelpFile(This, pbstr) ((This)->lpVtbl ->get_HelpFile (This, pbstr))
#define Error_get_HelpContext(This, pl) ((This)->lpVtbl ->get_HelpContext (This, pl))
#define Error_get_SQLState(This, pbstr) ((This)->lpVtbl ->get_SQLState (This, pbstr))
#define Error_get_NativeError(This, pl) ((This)->lpVtbl ->get_NativeError (This, pl))
#endif
#endif
#endif
#ifndef __Errors_INTERFACE_DEFINED__
#define __Errors_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Errors;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000501-0000-0010-8000-00AA006D2EA4")
  ADOErrors : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, ADOError **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Clear (void) = 0;
  };
#else
  typedef struct ErrorsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOErrors *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOErrors *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOErrors *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOErrors *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOErrors *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOErrors *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOErrors *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOErrors *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOErrors *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOErrors *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOErrors *This, VARIANT Index, ADOError **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Clear) (ADOErrors *This);
    END_INTERFACE
  } ErrorsVtbl;
  interface Errors {
    CONST_VTBL struct ErrorsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Errors_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Errors_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Errors_Release(This) ((This)->lpVtbl ->Release (This))
#define Errors_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Errors_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Errors_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Errors_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Errors_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Errors__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Errors_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Errors_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#define Errors_Clear(This) ((This)->lpVtbl ->Clear (This))
#endif
#endif
#endif
#ifndef __Command15_INTERFACE_DEFINED__
#define __Command15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Command15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001508-0000-0010-8000-00AA006D2EA4")
  Command15 : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection (_ADOConnection **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ActiveConnection (_ADOConnection *pCon) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ActiveConnection (VARIANT vConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CommandText (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CommandText (BSTR bstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CommandTimeout (LONG *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CommandTimeout (LONG Timeout) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Prepared (VARIANT_BOOL *pfPrepared) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Prepared (VARIANT_BOOL fPrepared) = 0;
    virtual HRESULT STDMETHODCALLTYPE Execute (VARIANT *RecordsAffected, VARIANT *Parameters, long Options, _ADORecordset **ppirs) = 0;
    virtual HRESULT STDMETHODCALLTYPE CreateParameter (BSTR Name, DataTypeEnum Type, ParameterDirectionEnum Direction, long Size, VARIANT Value, _ADOParameter **ppiprm) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Parameters (ADOParameters **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CommandType (CommandTypeEnum lCmdType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CommandType (CommandTypeEnum *plCmdType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstrName) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Name (BSTR bstrName) = 0;
  };
#else
  typedef struct Command15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Command15 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Command15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Command15 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Command15 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Command15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Command15 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Command15 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Command15 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (Command15 *This, _ADOConnection **ppvObject);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (Command15 *This, _ADOConnection *pCon);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (Command15 *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_CommandText) (Command15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_CommandText) (Command15 *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_CommandTimeout) (Command15 *This, LONG *pl);
    HRESULT (STDMETHODCALLTYPE *put_CommandTimeout) (Command15 *This, LONG Timeout);
    HRESULT (STDMETHODCALLTYPE *get_Prepared) (Command15 *This, VARIANT_BOOL *pfPrepared);
    HRESULT (STDMETHODCALLTYPE *put_Prepared) (Command15 *This, VARIANT_BOOL fPrepared);
    HRESULT (STDMETHODCALLTYPE *Execute) (Command15 *This, VARIANT *RecordsAffected, VARIANT *Parameters, long Options, _ADORecordset **ppirs);
    HRESULT (STDMETHODCALLTYPE *CreateParameter) (Command15 *This, BSTR Name, DataTypeEnum Type, ParameterDirectionEnum Direction, long Size, VARIANT Value, _ADOParameter **ppiprm);
    HRESULT (STDMETHODCALLTYPE *get_Parameters) (Command15 *This, ADOParameters **ppvObject);
    HRESULT (STDMETHODCALLTYPE *put_CommandType) (Command15 *This, CommandTypeEnum lCmdType);
    HRESULT (STDMETHODCALLTYPE *get_CommandType) (Command15 *This, CommandTypeEnum *plCmdType);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Command15 *This, BSTR *pbstrName);
    HRESULT (STDMETHODCALLTYPE *put_Name) (Command15 *This, BSTR bstrName);
    END_INTERFACE
  } Command15Vtbl;
  interface Command15 {
    CONST_VTBL struct Command15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Command15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Command15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Command15_Release(This) ((This)->lpVtbl ->Release (This))
#define Command15_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Command15_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Command15_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Command15_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Command15_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Command15_get_ActiveConnection(This, ppvObject) ((This)->lpVtbl ->get_ActiveConnection (This, ppvObject))
#define Command15_putref_ActiveConnection(This, pCon) ((This)->lpVtbl ->putref_ActiveConnection (This, pCon))
#define Command15_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define Command15_get_CommandText(This, pbstr) ((This)->lpVtbl ->get_CommandText (This, pbstr))
#define Command15_put_CommandText(This, bstr) ((This)->lpVtbl ->put_CommandText (This, bstr))
#define Command15_get_CommandTimeout(This, pl) ((This)->lpVtbl ->get_CommandTimeout (This, pl))
#define Command15_put_CommandTimeout(This, Timeout) ((This)->lpVtbl ->put_CommandTimeout (This, Timeout))
#define Command15_get_Prepared(This, pfPrepared) ((This)->lpVtbl ->get_Prepared (This, pfPrepared))
#define Command15_put_Prepared(This, fPrepared) ((This)->lpVtbl ->put_Prepared (This, fPrepared))
#define Command15_Execute(This, RecordsAffected, Parameters, Options, ppirs) ((This)->lpVtbl ->Execute (This, RecordsAffected, Parameters, Options, ppirs))
#define Command15_CreateParameter(This, Name, Type, Direction, Size, Value, ppiprm) ((This)->lpVtbl ->CreateParameter (This, Name, Type, Direction, Size, Value, ppiprm))
#define Command15_get_Parameters(This, ppvObject) ((This)->lpVtbl ->get_Parameters (This, ppvObject))
#define Command15_put_CommandType(This, lCmdType) ((This)->lpVtbl ->put_CommandType (This, lCmdType))
#define Command15_get_CommandType(This, plCmdType) ((This)->lpVtbl ->get_CommandType (This, plCmdType))
#define Command15_get_Name(This, pbstrName) ((This)->lpVtbl ->get_Name (This, pbstrName))
#define Command15_put_Name(This, bstrName) ((This)->lpVtbl ->put_Name (This, bstrName))
#endif
#endif
#endif
#ifndef __Command25_INTERFACE_DEFINED__
#define __Command25_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Command25;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000154E-0000-0010-8000-00AA006D2EA4")
  Command25 : public Command15 {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_State (LONG *plObjState) = 0;
    virtual HRESULT STDMETHODCALLTYPE Cancel (void) = 0;
  };
#else
  typedef struct Command25Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Command25 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Command25 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Command25 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Command25 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Command25 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Command25 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Command25 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Command25 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (Command25 *This, _ADOConnection **ppvObject);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (Command25 *This, _ADOConnection *pCon);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (Command25 *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_CommandText) (Command25 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_CommandText) (Command25 *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_CommandTimeout) (Command25 *This, LONG *pl);
    HRESULT (STDMETHODCALLTYPE *put_CommandTimeout) (Command25 *This, LONG Timeout);
    HRESULT (STDMETHODCALLTYPE *get_Prepared) (Command25 *This, VARIANT_BOOL *pfPrepared);
    HRESULT (STDMETHODCALLTYPE *put_Prepared) (Command25 *This, VARIANT_BOOL fPrepared);
    HRESULT (STDMETHODCALLTYPE *Execute) (Command25 *This, VARIANT *RecordsAffected, VARIANT *Parameters, long Options, _ADORecordset **ppirs);
    HRESULT (STDMETHODCALLTYPE *CreateParameter) (Command25 *This, BSTR Name, DataTypeEnum Type, ParameterDirectionEnum Direction, long Size, VARIANT Value, _ADOParameter **ppiprm);
    HRESULT (STDMETHODCALLTYPE *get_Parameters) (Command25 *This, ADOParameters **ppvObject);
    HRESULT (STDMETHODCALLTYPE *put_CommandType) (Command25 *This, CommandTypeEnum lCmdType);
    HRESULT (STDMETHODCALLTYPE *get_CommandType) (Command25 *This, CommandTypeEnum *plCmdType);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Command25 *This, BSTR *pbstrName);
    HRESULT (STDMETHODCALLTYPE *put_Name) (Command25 *This, BSTR bstrName);
    HRESULT (STDMETHODCALLTYPE *get_State) (Command25 *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *Cancel) (Command25 *This);
    END_INTERFACE
  } Command25Vtbl;
  interface Command25 {
    CONST_VTBL struct Command25Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Command25_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Command25_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Command25_Release(This) ((This)->lpVtbl ->Release (This))
#define Command25_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Command25_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Command25_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Command25_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Command25_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Command25_get_ActiveConnection(This, ppvObject) ((This)->lpVtbl ->get_ActiveConnection (This, ppvObject))
#define Command25_putref_ActiveConnection(This, pCon) ((This)->lpVtbl ->putref_ActiveConnection (This, pCon))
#define Command25_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define Command25_get_CommandText(This, pbstr) ((This)->lpVtbl ->get_CommandText (This, pbstr))
#define Command25_put_CommandText(This, bstr) ((This)->lpVtbl ->put_CommandText (This, bstr))
#define Command25_get_CommandTimeout(This, pl) ((This)->lpVtbl ->get_CommandTimeout (This, pl))
#define Command25_put_CommandTimeout(This, Timeout) ((This)->lpVtbl ->put_CommandTimeout (This, Timeout))
#define Command25_get_Prepared(This, pfPrepared) ((This)->lpVtbl ->get_Prepared (This, pfPrepared))
#define Command25_put_Prepared(This, fPrepared) ((This)->lpVtbl ->put_Prepared (This, fPrepared))
#define Command25_Execute(This, RecordsAffected, Parameters, Options, ppirs) ((This)->lpVtbl ->Execute (This, RecordsAffected, Parameters, Options, ppirs))
#define Command25_CreateParameter(This, Name, Type, Direction, Size, Value, ppiprm) ((This)->lpVtbl ->CreateParameter (This, Name, Type, Direction, Size, Value, ppiprm))
#define Command25_get_Parameters(This, ppvObject) ((This)->lpVtbl ->get_Parameters (This, ppvObject))
#define Command25_put_CommandType(This, lCmdType) ((This)->lpVtbl ->put_CommandType (This, lCmdType))
#define Command25_get_CommandType(This, plCmdType) ((This)->lpVtbl ->get_CommandType (This, plCmdType))
#define Command25_get_Name(This, pbstrName) ((This)->lpVtbl ->get_Name (This, pbstrName))
#define Command25_put_Name(This, bstrName) ((This)->lpVtbl ->put_Name (This, bstrName))
#define Command25_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define Command25_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#endif
#endif
#endif
#ifndef ___Command_INTERFACE_DEFINED__
#define ___Command_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Command;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("986761E8-7269-4890-AA65-AD7C03697A6D")
  _ADOCommand : public Command25 {
    public:
    virtual HRESULT __stdcall putref_CommandStream (IUnknown *pStream) = 0;
    virtual HRESULT __stdcall get_CommandStream (VARIANT *pvStream) = 0;
    virtual HRESULT __stdcall put_Dialect (BSTR bstrDialect) = 0;
    virtual HRESULT __stdcall get_Dialect (BSTR *pbstrDialect) = 0;
    virtual HRESULT __stdcall put_NamedParameters (VARIANT_BOOL fNamedParameters) = 0;
    virtual HRESULT __stdcall get_NamedParameters (VARIANT_BOOL *pfNamedParameters) = 0;
  };
#else
  typedef struct _CommandVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOCommand *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOCommand *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOCommand *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOCommand *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOCommand *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOCommand *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOCommand *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOCommand *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (_ADOCommand *This, _ADOConnection **ppvObject);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (_ADOCommand *This, _ADOConnection *pCon);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (_ADOCommand *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_CommandText) (_ADOCommand *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_CommandText) (_ADOCommand *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_CommandTimeout) (_ADOCommand *This, LONG *pl);
    HRESULT (STDMETHODCALLTYPE *put_CommandTimeout) (_ADOCommand *This, LONG Timeout);
    HRESULT (STDMETHODCALLTYPE *get_Prepared) (_ADOCommand *This, VARIANT_BOOL *pfPrepared);
    HRESULT (STDMETHODCALLTYPE *put_Prepared) (_ADOCommand *This, VARIANT_BOOL fPrepared);
    HRESULT (STDMETHODCALLTYPE *Execute) (_ADOCommand *This, VARIANT *RecordsAffected, VARIANT *Parameters, long Options, _ADORecordset **ppirs);
    HRESULT (STDMETHODCALLTYPE *CreateParameter) (_ADOCommand *This, BSTR Name, DataTypeEnum Type, ParameterDirectionEnum Direction, long Size, VARIANT Value, _ADOParameter **ppiprm);
    HRESULT (STDMETHODCALLTYPE *get_Parameters) (_ADOCommand *This, ADOParameters **ppvObject);
    HRESULT (STDMETHODCALLTYPE *put_CommandType) (_ADOCommand *This, CommandTypeEnum lCmdType);
    HRESULT (STDMETHODCALLTYPE *get_CommandType) (_ADOCommand *This, CommandTypeEnum *plCmdType);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_ADOCommand *This, BSTR *pbstrName);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_ADOCommand *This, BSTR bstrName);
    HRESULT (STDMETHODCALLTYPE *get_State) (_ADOCommand *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *Cancel) (_ADOCommand *This);
    HRESULT (__stdcall *putref_CommandADOStream) (_ADOCommand *This, IUnknown *pStream);
    HRESULT (__stdcall *get_CommandStream) (_ADOCommand *This, VARIANT *pvStream);
    HRESULT (__stdcall *put_Dialect) (_ADOCommand *This, BSTR bstrDialect);
    HRESULT (__stdcall *get_Dialect) (_ADOCommand *This, BSTR *pbstrDialect);
    HRESULT (__stdcall *put_NamedParameters) (_ADOCommand *This, VARIANT_BOOL fNamedParameters);
    HRESULT (__stdcall *get_NamedParameters) (_ADOCommand *This, VARIANT_BOOL *pfNamedParameters);
    END_INTERFACE
  } _CommandVtbl;
  interface _Command {
    CONST_VTBL struct _CommandVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Command_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Command_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Command_Release(This) ((This)->lpVtbl ->Release (This))
#define _Command_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Command_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Command_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Command_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Command_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Command_get_ActiveConnection(This, ppvObject) ((This)->lpVtbl ->get_ActiveConnection (This, ppvObject))
#define _Command_putref_ActiveConnection(This, pCon) ((This)->lpVtbl ->putref_ActiveConnection (This, pCon))
#define _Command_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define _Command_get_CommandText(This, pbstr) ((This)->lpVtbl ->get_CommandText (This, pbstr))
#define _Command_put_CommandText(This, bstr) ((This)->lpVtbl ->put_CommandText (This, bstr))
#define _Command_get_CommandTimeout(This, pl) ((This)->lpVtbl ->get_CommandTimeout (This, pl))
#define _Command_put_CommandTimeout(This, Timeout) ((This)->lpVtbl ->put_CommandTimeout (This, Timeout))
#define _Command_get_Prepared(This, pfPrepared) ((This)->lpVtbl ->get_Prepared (This, pfPrepared))
#define _Command_put_Prepared(This, fPrepared) ((This)->lpVtbl ->put_Prepared (This, fPrepared))
#define _Command_Execute(This, RecordsAffected, Parameters, Options, ppirs) ((This)->lpVtbl ->Execute (This, RecordsAffected, Parameters, Options, ppirs))
#define _Command_CreateParameter(This, Name, Type, Direction, Size, Value, ppiprm) ((This)->lpVtbl ->CreateParameter (This, Name, Type, Direction, Size, Value, ppiprm))
#define _Command_get_Parameters(This, ppvObject) ((This)->lpVtbl ->get_Parameters (This, ppvObject))
#define _Command_put_CommandType(This, lCmdType) ((This)->lpVtbl ->put_CommandType (This, lCmdType))
#define _Command_get_CommandType(This, plCmdType) ((This)->lpVtbl ->get_CommandType (This, plCmdType))
#define _Command_get_Name(This, pbstrName) ((This)->lpVtbl ->get_Name (This, pbstrName))
#define _Command_put_Name(This, bstrName) ((This)->lpVtbl ->put_Name (This, bstrName))
#define _Command_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define _Command_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#define _Command_putref_CommandStream(This, pStream) ((This)->lpVtbl ->putref_CommandStream (This, pStream))
#define _Command_get_CommandStream(This, pvStream) ((This)->lpVtbl ->get_CommandStream (This, pvStream))
#define _Command_put_Dialect(This, bstrDialect) ((This)->lpVtbl ->put_Dialect (This, bstrDialect))
#define _Command_get_Dialect(This, pbstrDialect) ((This)->lpVtbl ->get_Dialect (This, pbstrDialect))
#define _Command_put_NamedParameters(This, fNamedParameters) ((This)->lpVtbl ->put_NamedParameters (This, fNamedParameters))
#define _Command_get_NamedParameters(This, pfNamedParameters) ((This)->lpVtbl ->get_NamedParameters (This, pfNamedParameters))
#endif
#endif
#endif
#ifndef __ConnectionEventsVt_INTERFACE_DEFINED__
#define __ConnectionEventsVt_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ConnectionEventsVt;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001402-0000-0010-8000-00AA006D2EA4")
  ConnectionEventsVt : public IUnknown {
    public:
    virtual HRESULT STDMETHODCALLTYPE InfoMessage (ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE BeginTransComplete (LONG TransactionLevel, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE CommitTransComplete (ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE RollbackTransComplete (ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE WillExecute (BSTR *Source, CursorTypeEnum *CursorType, LockTypeEnum *LockType, long *Options, EventStatusEnum *adStatus, _ADOCommand *pCommand, _ADORecordset *pRecordset, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE ExecuteComplete (LONG RecordsAffected, ADOError *pError, EventStatusEnum *adStatus, _ADOCommand *pCommand, _ADORecordset *pRecordset, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE WillConnect (BSTR *ConnectionString, BSTR *UserID, BSTR *Password, long *Options, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE ConnectComplete (ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE Disconnect (EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
  };
#else
  typedef struct ConnectionEventsVtVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ConnectionEventsVt *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ConnectionEventsVt *This);
    ULONG (STDMETHODCALLTYPE *Release) (ConnectionEventsVt *This);
    HRESULT (STDMETHODCALLTYPE *InfoMessage) (ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *BeginTransComplete) (ConnectionEventsVt *This, LONG TransactionLevel, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *CommitTransComplete) (ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *RollbackTransComplete) (ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *WillExecute) (ConnectionEventsVt *This, BSTR *Source, CursorTypeEnum *CursorType, LockTypeEnum *LockType, long *Options, EventStatusEnum *adStatus, _ADOCommand *pCommand, _ADORecordset *pRecordset, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *ExecuteComplete) (ConnectionEventsVt *This, LONG RecordsAffected, ADOError *pError, EventStatusEnum *adStatus, _ADOCommand *pCommand, _ADORecordset *pRecordset, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *WillConnect) (ConnectionEventsVt *This, BSTR *ConnectionString, BSTR *UserID, BSTR *Password, long *Options, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *ConnectComplete) (ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *Disconnect) (ConnectionEventsVt *This, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    END_INTERFACE
  } ConnectionEventsVtVtbl;
  interface ConnectionEventsVt {
    CONST_VTBL struct ConnectionEventsVtVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ConnectionEventsVt_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ConnectionEventsVt_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ConnectionEventsVt_Release(This) ((This)->lpVtbl ->Release (This))
#define ConnectionEventsVt_InfoMessage(This, pError, adStatus, pConnection) ((This)->lpVtbl ->InfoMessage (This, pError, adStatus, pConnection))
#define ConnectionEventsVt_BeginTransComplete(This, TransactionLevel, pError, adStatus, pConnection) ((This)->lpVtbl ->BeginTransComplete (This, TransactionLevel, pError, adStatus, pConnection))
#define ConnectionEventsVt_CommitTransComplete(This, pError, adStatus, pConnection) ((This)->lpVtbl ->CommitTransComplete (This, pError, adStatus, pConnection))
#define ConnectionEventsVt_RollbackTransComplete(This, pError, adStatus, pConnection) ((This)->lpVtbl ->RollbackTransComplete (This, pError, adStatus, pConnection))
#define ConnectionEventsVt_WillExecute(This, Source, CursorType, LockType, Options, adStatus, pCommand, pRecordset, pConnection) ((This)->lpVtbl ->WillExecute (This, Source, CursorType, LockType, Options, adStatus, pCommand, pRecordset, pConnection))
#define ConnectionEventsVt_ExecuteComplete(This, RecordsAffected, pError, adStatus, pCommand, pRecordset, pConnection) ((This)->lpVtbl ->ExecuteComplete (This, RecordsAffected, pError, adStatus, pCommand, pRecordset, pConnection))
#define ConnectionEventsVt_WillConnect(This, ConnectionString, UserID, Password, Options, adStatus, pConnection) ((This)->lpVtbl ->WillConnect (This, ConnectionString, UserID, Password, Options, adStatus, pConnection))
#define ConnectionEventsVt_ConnectComplete(This, pError, adStatus, pConnection) ((This)->lpVtbl ->ConnectComplete (This, pError, adStatus, pConnection))
#define ConnectionEventsVt_Disconnect(This, adStatus, pConnection) ((This)->lpVtbl ->Disconnect (This, adStatus, pConnection))
#endif
#endif
#endif
#ifndef __RecordsetEventsVt_INTERFACE_DEFINED__
#define __RecordsetEventsVt_INTERFACE_DEFINED__

  EXTERN_C const IID IID_RecordsetEventsVt;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001403-0000-0010-8000-00AA006D2EA4")
  RecordsetEventsVt : public IUnknown {
    public:
    virtual HRESULT STDMETHODCALLTYPE WillChangeField (LONG cFields, VARIANT Fields, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE FieldChangeComplete (LONG cFields, VARIANT Fields, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE WillChangeRecord (EventReasonEnum adReason, LONG cRecords, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE RecordChangeComplete (EventReasonEnum adReason, LONG cRecords, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE WillChangeRecordset (EventReasonEnum adReason, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE RecordsetChangeComplete (EventReasonEnum adReason, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE WillMove (EventReasonEnum adReason, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE MoveComplete (EventReasonEnum adReason, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE EndOfRecordset (VARIANT_BOOL *fMoreData, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE FetchProgress (long Progress, long MaxProgress, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE FetchComplete (ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
  };
#else
  typedef struct RecordsetEventsVtVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (RecordsetEventsVt *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (RecordsetEventsVt *This);
    ULONG (STDMETHODCALLTYPE *Release) (RecordsetEventsVt *This);
    HRESULT (STDMETHODCALLTYPE *WillChangeADOField) (RecordsetEventsVt *This, LONG cFields, VARIANT Fields, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *FieldChangeComplete) (RecordsetEventsVt *This, LONG cFields, VARIANT Fields, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *WillChangeADORecord) (RecordsetEventsVt *This, EventReasonEnum adReason, LONG cRecords, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *RecordChangeComplete) (RecordsetEventsVt *This, EventReasonEnum adReason, LONG cRecords, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *WillChangeADORecordset) (RecordsetEventsVt *This, EventReasonEnum adReason, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *RecordsetChangeComplete) (RecordsetEventsVt *This, EventReasonEnum adReason, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *WillMove) (RecordsetEventsVt *This, EventReasonEnum adReason, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *MoveComplete) (RecordsetEventsVt *This, EventReasonEnum adReason, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *EndOfADORecordset) (RecordsetEventsVt *This, VARIANT_BOOL *fMoreData, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *FetchProgress) (RecordsetEventsVt *This, long Progress, long MaxProgress, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *FetchComplete) (RecordsetEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    END_INTERFACE
  } RecordsetEventsVtVtbl;
  interface RecordsetEventsVt {
    CONST_VTBL struct RecordsetEventsVtVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define RecordsetEventsVt_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define RecordsetEventsVt_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define RecordsetEventsVt_Release(This) ((This)->lpVtbl ->Release (This))
#define RecordsetEventsVt_WillChangeField(This, cFields, Fields, adStatus, pRecordset) ((This)->lpVtbl ->WillChangeField (This, cFields, Fields, adStatus, pRecordset))
#define RecordsetEventsVt_FieldChangeComplete(This, cFields, Fields, pError, adStatus, pRecordset) ((This)->lpVtbl ->FieldChangeComplete (This, cFields, Fields, pError, adStatus, pRecordset))
#define RecordsetEventsVt_WillChangeRecord(This, adReason, cRecords, adStatus, pRecordset) ((This)->lpVtbl ->WillChangeRecord (This, adReason, cRecords, adStatus, pRecordset))
#define RecordsetEventsVt_RecordChangeComplete(This, adReason, cRecords, pError, adStatus, pRecordset) ((This)->lpVtbl ->RecordChangeComplete (This, adReason, cRecords, pError, adStatus, pRecordset))
#define RecordsetEventsVt_WillChangeRecordset(This, adReason, adStatus, pRecordset) ((This)->lpVtbl ->WillChangeRecordset (This, adReason, adStatus, pRecordset))
#define RecordsetEventsVt_RecordsetChangeComplete(This, adReason, pError, adStatus, pRecordset) ((This)->lpVtbl ->RecordsetChangeComplete (This, adReason, pError, adStatus, pRecordset))
#define RecordsetEventsVt_WillMove(This, adReason, adStatus, pRecordset) ((This)->lpVtbl ->WillMove (This, adReason, adStatus, pRecordset))
#define RecordsetEventsVt_MoveComplete(This, adReason, pError, adStatus, pRecordset) ((This)->lpVtbl ->MoveComplete (This, adReason, pError, adStatus, pRecordset))
#define RecordsetEventsVt_EndOfRecordset(This, fMoreData, adStatus, pRecordset) ((This)->lpVtbl ->EndOfRecordset (This, fMoreData, adStatus, pRecordset))
#define RecordsetEventsVt_FetchProgress(This, Progress, MaxProgress, adStatus, pRecordset) ((This)->lpVtbl ->FetchProgress (This, Progress, MaxProgress, adStatus, pRecordset))
#define RecordsetEventsVt_FetchComplete(This, pError, adStatus, pRecordset) ((This)->lpVtbl ->FetchComplete (This, pError, adStatus, pRecordset))
#endif
#endif
#endif
#ifndef __ConnectionEvents_DISPINTERFACE_DEFINED__
#define __ConnectionEvents_DISPINTERFACE_DEFINED__

  EXTERN_C const IID DIID_ConnectionEvents;
#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00001400-0000-0010-8000-00AA006D2EA4")
  ConnectionEvents : public IDispatch {
  };
#else
  typedef struct ConnectionEventsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ConnectionEvents *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ConnectionEvents *This);
    ULONG (STDMETHODCALLTYPE *Release) (ConnectionEvents *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ConnectionEvents *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ConnectionEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ConnectionEvents *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ConnectionEvents *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    END_INTERFACE
  } ConnectionEventsVtbl;
  interface ConnectionEvents {
    CONST_VTBL struct ConnectionEventsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ConnectionEvents_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ConnectionEvents_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ConnectionEvents_Release(This) ((This)->lpVtbl ->Release (This))
#define ConnectionEvents_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define ConnectionEvents_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define ConnectionEvents_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define ConnectionEvents_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#endif
#endif
#endif
#ifndef __RecordsetEvents_DISPINTERFACE_DEFINED__
#define __RecordsetEvents_DISPINTERFACE_DEFINED__

  EXTERN_C const IID DIID_RecordsetEvents;
#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00001266-0000-0010-8000-00AA006D2EA4")
  RecordsetEvents : public IDispatch {
  };
#else
  typedef struct RecordsetEventsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (RecordsetEvents *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (RecordsetEvents *This);
    ULONG (STDMETHODCALLTYPE *Release) (RecordsetEvents *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (RecordsetEvents *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (RecordsetEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (RecordsetEvents *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (RecordsetEvents *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    END_INTERFACE
  } RecordsetEventsVtbl;
  interface RecordsetEvents {
    CONST_VTBL struct RecordsetEventsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define RecordsetEvents_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define RecordsetEvents_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define RecordsetEvents_Release(This) ((This)->lpVtbl ->Release (This))
#define RecordsetEvents_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define RecordsetEvents_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define RecordsetEvents_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define RecordsetEvents_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#endif
#endif
#endif
#ifndef __Connection15_INTERFACE_DEFINED__
#define __Connection15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Connection15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001515-0000-0010-8000-00AA006D2EA4")
  Connection15 : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_ConnectionString (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ConnectionString (BSTR bstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CommandTimeout (LONG *plTimeout) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CommandTimeout (LONG lTimeout) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ConnectionTimeout (LONG *plTimeout) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ConnectionTimeout (LONG lTimeout) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Version (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE Close (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Execute (BSTR CommandText, VARIANT *RecordsAffected, long Options, _ADORecordset **ppiRset) = 0;
    virtual HRESULT STDMETHODCALLTYPE BeginTrans (long *TransactionLevel) = 0;
    virtual HRESULT STDMETHODCALLTYPE CommitTrans (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE RollbackTrans (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Open (BSTR ConnectionString = NULL, BSTR UserID = NULL, BSTR Password = NULL, long Options = adOptionUnspecified) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Errors (ADOErrors **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DefaultDatabase (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_DefaultDatabase (BSTR bstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_IsolationLevel (IsolationLevelEnum *Level) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_IsolationLevel (IsolationLevelEnum Level) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (long *plAttr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Attributes (long lAttr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CursorLocation (CursorLocationEnum *plCursorLoc) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CursorLocation (CursorLocationEnum lCursorLoc) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Mode (ConnectModeEnum *plMode) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Mode (ConnectModeEnum lMode) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Provider (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Provider (BSTR Provider) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_State (LONG *plObjState) = 0;
    virtual HRESULT STDMETHODCALLTYPE OpenSchema (SchemaEnum Schema, VARIANT Restrictions, VARIANT SchemaID, _ADORecordset **pprset) = 0;
  };
#else
  typedef struct Connection15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Connection15 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Connection15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Connection15 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Connection15 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Connection15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Connection15 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Connection15 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Connection15 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ConnectionString) (Connection15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_ConnectionString) (Connection15 *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_CommandTimeout) (Connection15 *This, LONG *plTimeout);
    HRESULT (STDMETHODCALLTYPE *put_CommandTimeout) (Connection15 *This, LONG lTimeout);
    HRESULT (STDMETHODCALLTYPE *get_ConnectionTimeout) (Connection15 *This, LONG *plTimeout);
    HRESULT (STDMETHODCALLTYPE *put_ConnectionTimeout) (Connection15 *This, LONG lTimeout);
    HRESULT (STDMETHODCALLTYPE *get_Version) (Connection15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *Close) (Connection15 *This);
    HRESULT (STDMETHODCALLTYPE *Execute) (Connection15 *This, BSTR CommandText, VARIANT *RecordsAffected, long Options, _ADORecordset **ppiRset);
    HRESULT (STDMETHODCALLTYPE *BeginTrans) (Connection15 *This, long *TransactionLevel);
    HRESULT (STDMETHODCALLTYPE *CommitTrans) (Connection15 *This);
    HRESULT (STDMETHODCALLTYPE *RollbackTrans) (Connection15 *This);
    HRESULT (STDMETHODCALLTYPE *Open) (Connection15 *This, BSTR ConnectionString, BSTR UserID, BSTR Password, long Options);
    HRESULT (STDMETHODCALLTYPE *get_Errors) (Connection15 *This, ADOErrors **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_DefaultDatabase) (Connection15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_DefaultDatabase) (Connection15 *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_IsolationLevel) (Connection15 *This, IsolationLevelEnum *Level);
    HRESULT (STDMETHODCALLTYPE *put_IsolationLevel) (Connection15 *This, IsolationLevelEnum Level);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (Connection15 *This, long *plAttr);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (Connection15 *This, long lAttr);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (Connection15 *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (Connection15 *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *get_Mode) (Connection15 *This, ConnectModeEnum *plMode);
    HRESULT (STDMETHODCALLTYPE *put_Mode) (Connection15 *This, ConnectModeEnum lMode);
    HRESULT (STDMETHODCALLTYPE *get_Provider) (Connection15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_Provider) (Connection15 *This, BSTR Provider);
    HRESULT (STDMETHODCALLTYPE *get_State) (Connection15 *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *OpenSchema) (Connection15 *This, SchemaEnum Schema, VARIANT Restrictions, VARIANT SchemaID, _ADORecordset **pprset);
    END_INTERFACE
  } Connection15Vtbl;
  interface Connection15 {
    CONST_VTBL struct Connection15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Connection15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Connection15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Connection15_Release(This) ((This)->lpVtbl ->Release (This))
#define Connection15_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Connection15_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Connection15_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Connection15_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Connection15_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Connection15_get_ConnectionString(This, pbstr) ((This)->lpVtbl ->get_ConnectionString (This, pbstr))
#define Connection15_put_ConnectionString(This, bstr) ((This)->lpVtbl ->put_ConnectionString (This, bstr))
#define Connection15_get_CommandTimeout(This, plTimeout) ((This)->lpVtbl ->get_CommandTimeout (This, plTimeout))
#define Connection15_put_CommandTimeout(This, lTimeout) ((This)->lpVtbl ->put_CommandTimeout (This, lTimeout))
#define Connection15_get_ConnectionTimeout(This, plTimeout) ((This)->lpVtbl ->get_ConnectionTimeout (This, plTimeout))
#define Connection15_put_ConnectionTimeout(This, lTimeout) ((This)->lpVtbl ->put_ConnectionTimeout (This, lTimeout))
#define Connection15_get_Version(This, pbstr) ((This)->lpVtbl ->get_Version (This, pbstr))
#define Connection15_Close(This) ((This)->lpVtbl ->Close (This))
#define Connection15_Execute(This, CommandText, RecordsAffected, Options, ppiRset) ((This)->lpVtbl ->Execute (This, CommandText, RecordsAffected, Options, ppiRset))
#define Connection15_BeginTrans(This, TransactionLevel) ((This)->lpVtbl ->BeginTrans (This, TransactionLevel))
#define Connection15_CommitTrans(This) ((This)->lpVtbl ->CommitTrans (This))
#define Connection15_RollbackTrans(This) ((This)->lpVtbl ->RollbackTrans (This))
#define Connection15_Open(This, ConnectionString, UserID, Password, Options) ((This)->lpVtbl ->Open (This, ConnectionString, UserID, Password, Options))
#define Connection15_get_Errors(This, ppvObject) ((This)->lpVtbl ->get_Errors (This, ppvObject))
#define Connection15_get_DefaultDatabase(This, pbstr) ((This)->lpVtbl ->get_DefaultDatabase (This, pbstr))
#define Connection15_put_DefaultDatabase(This, bstr) ((This)->lpVtbl ->put_DefaultDatabase (This, bstr))
#define Connection15_get_IsolationLevel(This, Level) ((This)->lpVtbl ->get_IsolationLevel (This, Level))
#define Connection15_put_IsolationLevel(This, Level) ((This)->lpVtbl ->put_IsolationLevel (This, Level))
#define Connection15_get_Attributes(This, plAttr) ((This)->lpVtbl ->get_Attributes (This, plAttr))
#define Connection15_put_Attributes(This, lAttr) ((This)->lpVtbl ->put_Attributes (This, lAttr))
#define Connection15_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define Connection15_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define Connection15_get_Mode(This, plMode) ((This)->lpVtbl ->get_Mode (This, plMode))
#define Connection15_put_Mode(This, lMode) ((This)->lpVtbl ->put_Mode (This, lMode))
#define Connection15_get_Provider(This, pbstr) ((This)->lpVtbl ->get_Provider (This, pbstr))
#define Connection15_put_Provider(This, Provider) ((This)->lpVtbl ->put_Provider (This, Provider))
#define Connection15_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define Connection15_OpenSchema(This, Schema, Restrictions, SchemaID, pprset) ((This)->lpVtbl ->OpenSchema (This, Schema, Restrictions, SchemaID, pprset))
#endif
#endif
#endif
#ifndef ___Connection_INTERFACE_DEFINED__
#define ___Connection_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Connection;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001550-0000-0010-8000-00AA006D2EA4")
  _ADOConnection : public Connection15 {
    public:
    virtual HRESULT STDMETHODCALLTYPE Cancel (void) = 0;
  };
#else
  typedef struct _ConnectionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOConnection *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOConnection *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOConnection *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOConnection *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOConnection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOConnection *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOConnection *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOConnection *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ConnectionString) (_ADOConnection *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_ConnectionString) (_ADOConnection *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_CommandTimeout) (_ADOConnection *This, LONG *plTimeout);
    HRESULT (STDMETHODCALLTYPE *put_CommandTimeout) (_ADOConnection *This, LONG lTimeout);
    HRESULT (STDMETHODCALLTYPE *get_ConnectionTimeout) (_ADOConnection *This, LONG *plTimeout);
    HRESULT (STDMETHODCALLTYPE *put_ConnectionTimeout) (_ADOConnection *This, LONG lTimeout);
    HRESULT (STDMETHODCALLTYPE *get_Version) (_ADOConnection *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *Close) (_ADOConnection *This);
    HRESULT (STDMETHODCALLTYPE *Execute) (_ADOConnection *This, BSTR CommandText, VARIANT *RecordsAffected, long Options, _ADORecordset **ppiRset);
    HRESULT (STDMETHODCALLTYPE *BeginTrans) (_ADOConnection *This, long *TransactionLevel);
    HRESULT (STDMETHODCALLTYPE *CommitTrans) (_ADOConnection *This);
    HRESULT (STDMETHODCALLTYPE *RollbackTrans) (_ADOConnection *This);
    HRESULT (STDMETHODCALLTYPE *Open) (_ADOConnection *This, BSTR ConnectionString, BSTR UserID, BSTR Password, long Options);
    HRESULT (STDMETHODCALLTYPE *get_Errors) (_ADOConnection *This, ADOErrors **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_DefaultDatabase) (_ADOConnection *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_DefaultDatabase) (_ADOConnection *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_IsolationLevel) (_ADOConnection *This, IsolationLevelEnum *Level);
    HRESULT (STDMETHODCALLTYPE *put_IsolationLevel) (_ADOConnection *This, IsolationLevelEnum Level);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (_ADOConnection *This, long *plAttr);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (_ADOConnection *This, long lAttr);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (_ADOConnection *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (_ADOConnection *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *get_Mode) (_ADOConnection *This, ConnectModeEnum *plMode);
    HRESULT (STDMETHODCALLTYPE *put_Mode) (_ADOConnection *This, ConnectModeEnum lMode);
    HRESULT (STDMETHODCALLTYPE *get_Provider) (_ADOConnection *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_Provider) (_ADOConnection *This, BSTR Provider);
    HRESULT (STDMETHODCALLTYPE *get_State) (_ADOConnection *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *OpenSchema) (_ADOConnection *This, SchemaEnum Schema, VARIANT Restrictions, VARIANT SchemaID, _ADORecordset **pprset);
    HRESULT (STDMETHODCALLTYPE *Cancel) (_ADOConnection *This);
    END_INTERFACE
  } _ConnectionVtbl;
  interface _Connection {
    CONST_VTBL struct _ConnectionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Connection_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Connection_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Connection_Release(This) ((This)->lpVtbl ->Release (This))
#define _Connection_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Connection_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Connection_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Connection_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Connection_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Connection_get_ConnectionString(This, pbstr) ((This)->lpVtbl ->get_ConnectionString (This, pbstr))
#define _Connection_put_ConnectionString(This, bstr) ((This)->lpVtbl ->put_ConnectionString (This, bstr))
#define _Connection_get_CommandTimeout(This, plTimeout) ((This)->lpVtbl ->get_CommandTimeout (This, plTimeout))
#define _Connection_put_CommandTimeout(This, lTimeout) ((This)->lpVtbl ->put_CommandTimeout (This, lTimeout))
#define _Connection_get_ConnectionTimeout(This, plTimeout) ((This)->lpVtbl ->get_ConnectionTimeout (This, plTimeout))
#define _Connection_put_ConnectionTimeout(This, lTimeout) ((This)->lpVtbl ->put_ConnectionTimeout (This, lTimeout))
#define _Connection_get_Version(This, pbstr) ((This)->lpVtbl ->get_Version (This, pbstr))
#define _Connection_Close(This) ((This)->lpVtbl ->Close (This))
#define _Connection_Execute(This, CommandText, RecordsAffected, Options, ppiRset) ((This)->lpVtbl ->Execute (This, CommandText, RecordsAffected, Options, ppiRset))
#define _Connection_BeginTrans(This, TransactionLevel) ((This)->lpVtbl ->BeginTrans (This, TransactionLevel))
#define _Connection_CommitTrans(This) ((This)->lpVtbl ->CommitTrans (This))
#define _Connection_RollbackTrans(This) ((This)->lpVtbl ->RollbackTrans (This))
#define _Connection_Open(This, ConnectionString, UserID, Password, Options) ((This)->lpVtbl ->Open (This, ConnectionString, UserID, Password, Options))
#define _Connection_get_Errors(This, ppvObject) ((This)->lpVtbl ->get_Errors (This, ppvObject))
#define _Connection_get_DefaultDatabase(This, pbstr) ((This)->lpVtbl ->get_DefaultDatabase (This, pbstr))
#define _Connection_put_DefaultDatabase(This, bstr) ((This)->lpVtbl ->put_DefaultDatabase (This, bstr))
#define _Connection_get_IsolationLevel(This, Level) ((This)->lpVtbl ->get_IsolationLevel (This, Level))
#define _Connection_put_IsolationLevel(This, Level) ((This)->lpVtbl ->put_IsolationLevel (This, Level))
#define _Connection_get_Attributes(This, plAttr) ((This)->lpVtbl ->get_Attributes (This, plAttr))
#define _Connection_put_Attributes(This, lAttr) ((This)->lpVtbl ->put_Attributes (This, lAttr))
#define _Connection_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define _Connection_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define _Connection_get_Mode(This, plMode) ((This)->lpVtbl ->get_Mode (This, plMode))
#define _Connection_put_Mode(This, lMode) ((This)->lpVtbl ->put_Mode (This, lMode))
#define _Connection_get_Provider(This, pbstr) ((This)->lpVtbl ->get_Provider (This, pbstr))
#define _Connection_put_Provider(This, Provider) ((This)->lpVtbl ->put_Provider (This, Provider))
#define _Connection_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define _Connection_OpenSchema(This, Schema, Restrictions, SchemaID, pprset) ((This)->lpVtbl ->OpenSchema (This, Schema, Restrictions, SchemaID, pprset))
#define _Connection_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#endif
#endif
#endif
#ifndef __ADOConnectionConstruction15_INTERFACE_DEFINED__
#define __ADOConnectionConstruction15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADOConnectionConstruction15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000516-0000-0010-8000-00AA006D2EA4")
  ADOConnectionConstruction15 : public IUnknown {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_DSO (IUnknown **ppDSO) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Session (IUnknown **ppSession) = 0;
    virtual HRESULT STDMETHODCALLTYPE WrapDSOandSession (IUnknown *pDSO, IUnknown *pSession) = 0;
  };
#else
  typedef struct ADOConnectionConstruction15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOConnectionConstruction15 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOConnectionConstruction15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOConnectionConstruction15 *This);
    HRESULT (STDMETHODCALLTYPE *get_DSO) (ADOConnectionConstruction15 *This, IUnknown **ppDSO);
    HRESULT (STDMETHODCALLTYPE *get_Session) (ADOConnectionConstruction15 *This, IUnknown **ppSession);
    HRESULT (STDMETHODCALLTYPE *WrapDSOandSession) (ADOConnectionConstruction15 *This, IUnknown *pDSO, IUnknown *pSession);
    END_INTERFACE
  } ADOConnectionConstruction15Vtbl;
  interface ADOConnectionConstruction15 {
    CONST_VTBL struct ADOConnectionConstruction15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADOConnectionConstruction15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADOConnectionConstruction15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADOConnectionConstruction15_Release(This) ((This)->lpVtbl ->Release (This))
#define ADOConnectionConstruction15_get_DSO(This, ppDSO) ((This)->lpVtbl ->get_DSO (This, ppDSO))
#define ADOConnectionConstruction15_get_Session(This, ppSession) ((This)->lpVtbl ->get_Session (This, ppSession))
#define ADOConnectionConstruction15_WrapDSOandSession(This, pDSO, pSession) ((This)->lpVtbl ->WrapDSOandSession (This, pDSO, pSession))
#endif
#endif
#endif
#ifndef __ADOConnectionConstruction_INTERFACE_DEFINED__
#define __ADOConnectionConstruction_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADOConnectionConstruction;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000551-0000-0010-8000-00AA006D2EA4")
  ADOConnectionConstruction : public ADOConnectionConstruction15 {
    public:
  };
#else
  typedef struct ADOConnectionConstructionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOConnectionConstruction *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOConnectionConstruction *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOConnectionConstruction *This);
    HRESULT (STDMETHODCALLTYPE *get_DSO) (ADOConnectionConstruction *This, IUnknown **ppDSO);
    HRESULT (STDMETHODCALLTYPE *get_Session) (ADOConnectionConstruction *This, IUnknown **ppSession);
    HRESULT (STDMETHODCALLTYPE *WrapDSOandSession) (ADOConnectionConstruction *This, IUnknown *pDSO, IUnknown *pSession);
    END_INTERFACE
  } ADOConnectionConstructionVtbl;
  interface ADOConnectionConstruction {
    CONST_VTBL struct ADOConnectionConstructionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADOConnectionConstruction_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADOConnectionConstruction_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADOConnectionConstruction_Release(This) ((This)->lpVtbl ->Release (This))
#define ADOConnectionConstruction_get_DSO(This, ppDSO) ((This)->lpVtbl ->get_DSO (This, ppDSO))
#define ADOConnectionConstruction_get_Session(This, ppSession) ((This)->lpVtbl ->get_Session (This, ppSession))
#define ADOConnectionConstruction_WrapDSOandSession(This, pDSO, pSession) ((This)->lpVtbl ->WrapDSOandSession (This, pDSO, pSession))
#endif
#endif
#endif
  EXTERN_C const CLSID CLSID_Connection;
#ifdef __cplusplus
  Connection;
#endif
#ifndef ___Record_INTERFACE_DEFINED__
#define ___Record_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Record;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001562-0000-0010-8000-00AA006D2EA4")
  _ADORecord : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ActiveConnection (BSTR bstrConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ActiveConnection (_ADOConnection *Con) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_State (ObjectStateEnum *pState) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Source (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Source (BSTR Source) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_Source (IDispatch *Source) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Mode (ConnectModeEnum *pMode) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Mode (ConnectModeEnum Mode) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ParentURL (BSTR *pbstrParentURL) = 0;
    virtual HRESULT STDMETHODCALLTYPE MoveRecord (BSTR Source, BSTR Destination, BSTR UserName, BSTR Password, MoveRecordOptionsEnum Options, VARIANT_BOOL Async, BSTR *pbstrNewURL) = 0;
    virtual HRESULT STDMETHODCALLTYPE CopyRecord (BSTR Source, BSTR Destination, BSTR UserName, BSTR Password, CopyRecordOptionsEnum Options, VARIANT_BOOL Async, BSTR *pbstrNewURL) = 0;
    virtual HRESULT STDMETHODCALLTYPE DeleteRecord (BSTR Source = NULL, VARIANT_BOOL Async = 0) = 0;
    virtual HRESULT STDMETHODCALLTYPE Open (VARIANT Source, VARIANT ActiveConnection, ConnectModeEnum Mode = adModeUnknown, RecordCreateOptionsEnum CreateOptions = adFailIfNotExists, RecordOpenOptionsEnum Options = adOpenRecordUnspecified, BSTR UserName = NULL, BSTR Password = NULL) = 0;
    virtual HRESULT STDMETHODCALLTYPE Close (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Fields (ADOFields **ppFlds) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_RecordType (RecordTypeEnum *pType) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetChildren (_ADORecordset **ppRSet) = 0;
    virtual HRESULT STDMETHODCALLTYPE Cancel (void) = 0;
  };
#else
  typedef struct _RecordVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADORecord *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADORecord *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADORecord *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADORecord *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADORecord *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADORecord *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADORecord *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADORecord *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (_ADORecord *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (_ADORecord *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (_ADORecord *This, _ADOConnection *Con);
    HRESULT (STDMETHODCALLTYPE *get_State) (_ADORecord *This, ObjectStateEnum *pState);
    HRESULT (STDMETHODCALLTYPE *get_Source) (_ADORecord *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Source) (_ADORecord *This, BSTR Source);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (_ADORecord *This, IDispatch *Source);
    HRESULT (STDMETHODCALLTYPE *get_Mode) (_ADORecord *This, ConnectModeEnum *pMode);
    HRESULT (STDMETHODCALLTYPE *put_Mode) (_ADORecord *This, ConnectModeEnum Mode);
    HRESULT (STDMETHODCALLTYPE *get_ParentURL) (_ADORecord *This, BSTR *pbstrParentURL);
    HRESULT (STDMETHODCALLTYPE *MoveADORecord) (_ADORecord *This, BSTR Source, BSTR Destination, BSTR UserName, BSTR Password, MoveRecordOptionsEnum Options, VARIANT_BOOL Async, BSTR *pbstrNewURL);
    HRESULT (STDMETHODCALLTYPE *CopyADORecord) (_ADORecord *This, BSTR Source, BSTR Destination, BSTR UserName, BSTR Password, CopyRecordOptionsEnum Options, VARIANT_BOOL Async, BSTR *pbstrNewURL);
    HRESULT (STDMETHODCALLTYPE *DeleteADORecord) (_ADORecord *This, BSTR Source, VARIANT_BOOL Async);
    HRESULT (STDMETHODCALLTYPE *Open) (_ADORecord *This, VARIANT Source, VARIANT ActiveConnection, ConnectModeEnum Mode, RecordCreateOptionsEnum CreateOptions, RecordOpenOptionsEnum Options, BSTR UserName, BSTR Password);
    HRESULT (STDMETHODCALLTYPE *Close) (_ADORecord *This);
    HRESULT (STDMETHODCALLTYPE *get_Fields) (_ADORecord *This, ADOFields **ppFlds);
    HRESULT (STDMETHODCALLTYPE *get_RecordType) (_ADORecord *This, RecordTypeEnum *pType);
    HRESULT (STDMETHODCALLTYPE *GetChildren) (_ADORecord *This, _ADORecordset **ppRSet);
    HRESULT (STDMETHODCALLTYPE *Cancel) (_ADORecord *This);
    END_INTERFACE
  } _RecordVtbl;
  interface _Record {
    CONST_VTBL struct _RecordVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Record_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Record_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Record_Release(This) ((This)->lpVtbl ->Release (This))
#define _Record_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Record_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Record_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Record_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Record_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Record_get_ActiveConnection(This, pvar) ((This)->lpVtbl ->get_ActiveConnection (This, pvar))
#define _Record_put_ActiveConnection(This, bstrConn) ((This)->lpVtbl ->put_ActiveConnection (This, bstrConn))
#define _Record_putref_ActiveConnection(This, Con) ((This)->lpVtbl ->putref_ActiveConnection (This, Con))
#define _Record_get_State(This, pState) ((This)->lpVtbl ->get_State (This, pState))
#define _Record_get_Source(This, pvar) ((This)->lpVtbl ->get_Source (This, pvar))
#define _Record_put_Source(This, Source) ((This)->lpVtbl ->put_Source (This, Source))
#define _Record_putref_Source(This, Source) ((This)->lpVtbl ->putref_Source (This, Source))
#define _Record_get_Mode(This, pMode) ((This)->lpVtbl ->get_Mode (This, pMode))
#define _Record_put_Mode(This, Mode) ((This)->lpVtbl ->put_Mode (This, Mode))
#define _Record_get_ParentURL(This, pbstrParentURL) ((This)->lpVtbl ->get_ParentURL (This, pbstrParentURL))
#define _Record_MoveRecord(This, Source, Destination, UserName, Password, Options, Async, pbstrNewURL) ((This)->lpVtbl ->MoveRecord (This, Source, Destination, UserName, Password, Options, Async, pbstrNewURL))
#define _Record_CopyRecord(This, Source, Destination, UserName, Password, Options, Async, pbstrNewURL) ((This)->lpVtbl ->CopyRecord (This, Source, Destination, UserName, Password, Options, Async, pbstrNewURL))
#define _Record_DeleteRecord(This, Source, Async) ((This)->lpVtbl ->DeleteRecord (This, Source, Async))
#define _Record_Open(This, Source, ActiveConnection, Mode, CreateOptions, Options, UserName, Password) ((This)->lpVtbl ->Open (This, Source, ActiveConnection, Mode, CreateOptions, Options, UserName, Password))
#define _Record_Close(This) ((This)->lpVtbl ->Close (This))
#define _Record_get_Fields(This, ppFlds) ((This)->lpVtbl ->get_Fields (This, ppFlds))
#define _Record_get_RecordType(This, pType) ((This)->lpVtbl ->get_RecordType (This, pType))
#define _Record_GetChildren(This, ppRSet) ((This)->lpVtbl ->GetChildren (This, ppRSet))
#define _Record_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#endif
#endif
#endif
  EXTERN_C const CLSID CLSID_Record;
#ifdef __cplusplus
  Record;
#endif
#ifndef ___Stream_INTERFACE_DEFINED__
#define ___Stream_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Stream;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001565-0000-0010-8000-00AA006D2EA4")
  _ADOStream : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Size (long *pSize) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_EOS (VARIANT_BOOL *pEOS) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Position (long *pPos) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Position (long Position) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (StreamTypeEnum *pType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Type (StreamTypeEnum Type) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_LineSeparator (LineSeparatorEnum *pLS) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_LineSeparator (LineSeparatorEnum LineSeparator) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_State (ObjectStateEnum *pState) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Mode (ConnectModeEnum *pMode) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Mode (ConnectModeEnum Mode) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Charset (BSTR *pbstrCharset) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Charset (BSTR Charset) = 0;
    virtual HRESULT STDMETHODCALLTYPE Read (long NumBytes, VARIANT *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE Open (VARIANT Source, ConnectModeEnum Mode = adModeUnknown, StreamOpenOptionsEnum Options = adOpenStreamUnspecified, BSTR UserName = NULL, BSTR Password = NULL) = 0;
    virtual HRESULT STDMETHODCALLTYPE Close (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE SkipLine (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Write (VARIANT Buffer) = 0;
    virtual HRESULT STDMETHODCALLTYPE SetEOS (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE CopyTo (_ADOStream *DestStream, long CharNumber = -1) = 0;
    virtual HRESULT STDMETHODCALLTYPE Flush (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE SaveToFile (BSTR FileName, SaveOptionsEnum Options = adSaveCreateNotExist) = 0;
    virtual HRESULT STDMETHODCALLTYPE LoadFromFile (BSTR FileName) = 0;
    virtual HRESULT STDMETHODCALLTYPE ReadText (long NumChars, BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE WriteText (BSTR Data, StreamWriteEnum Options = adWriteChar) = 0;
    virtual HRESULT STDMETHODCALLTYPE Cancel (void) = 0;
  };
#else
  typedef struct _StreamVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOStream *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOStream *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOStream *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOStream *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOStream *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOStream *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOStream *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Size) (_ADOStream *This, long *pSize);
    HRESULT (STDMETHODCALLTYPE *get_EOS) (_ADOStream *This, VARIANT_BOOL *pEOS);
    HRESULT (STDMETHODCALLTYPE *get_Position) (_ADOStream *This, long *pPos);
    HRESULT (STDMETHODCALLTYPE *put_Position) (_ADOStream *This, long Position);
    HRESULT (STDMETHODCALLTYPE *get_Type) (_ADOStream *This, StreamTypeEnum *pType);
    HRESULT (STDMETHODCALLTYPE *put_Type) (_ADOStream *This, StreamTypeEnum Type);
    HRESULT (STDMETHODCALLTYPE *get_LineSeparator) (_ADOStream *This, LineSeparatorEnum *pLS);
    HRESULT (STDMETHODCALLTYPE *put_LineSeparator) (_ADOStream *This, LineSeparatorEnum LineSeparator);
    HRESULT (STDMETHODCALLTYPE *get_State) (_ADOStream *This, ObjectStateEnum *pState);
    HRESULT (STDMETHODCALLTYPE *get_Mode) (_ADOStream *This, ConnectModeEnum *pMode);
    HRESULT (STDMETHODCALLTYPE *put_Mode) (_ADOStream *This, ConnectModeEnum Mode);
    HRESULT (STDMETHODCALLTYPE *get_Charset) (_ADOStream *This, BSTR *pbstrCharset);
    HRESULT (STDMETHODCALLTYPE *put_Charset) (_ADOStream *This, BSTR Charset);
    HRESULT (STDMETHODCALLTYPE *Read) (_ADOStream *This, long NumBytes, VARIANT *pVal);
    HRESULT (STDMETHODCALLTYPE *Open) (_ADOStream *This, VARIANT Source, ConnectModeEnum Mode, StreamOpenOptionsEnum Options, BSTR UserName, BSTR Password);
    HRESULT (STDMETHODCALLTYPE *Close) (_ADOStream *This);
    HRESULT (STDMETHODCALLTYPE *SkipLine) (_ADOStream *This);
    HRESULT (STDMETHODCALLTYPE *Write) (_ADOStream *This, VARIANT Buffer);
    HRESULT (STDMETHODCALLTYPE *SetEOS) (_ADOStream *This);
    HRESULT (STDMETHODCALLTYPE *CopyTo) (_ADOStream *This, _ADOStream *DestStream, long CharNumber);
    HRESULT (STDMETHODCALLTYPE *Flush) (_ADOStream *This);
    HRESULT (STDMETHODCALLTYPE *SaveToFile) (_ADOStream *This, BSTR FileName, SaveOptionsEnum Options);
    HRESULT (STDMETHODCALLTYPE *LoadFromFile) (_ADOStream *This, BSTR FileName);
    HRESULT (STDMETHODCALLTYPE *ReadText) (_ADOStream *This, long NumChars, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *WriteText) (_ADOStream *This, BSTR Data, StreamWriteEnum Options);
    HRESULT (STDMETHODCALLTYPE *Cancel) (_ADOStream *This);
    END_INTERFACE
  } _StreamVtbl;
  interface _Stream {
    CONST_VTBL struct _StreamVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Stream_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Stream_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Stream_Release(This) ((This)->lpVtbl ->Release (This))
#define _Stream_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Stream_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Stream_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Stream_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Stream_get_Size(This, pSize) ((This)->lpVtbl ->get_Size (This, pSize))
#define _Stream_get_EOS(This, pEOS) ((This)->lpVtbl ->get_EOS (This, pEOS))
#define _Stream_get_Position(This, pPos) ((This)->lpVtbl ->get_Position (This, pPos))
#define _Stream_put_Position(This, Position) ((This)->lpVtbl ->put_Position (This, Position))
#define _Stream_get_Type(This, pType) ((This)->lpVtbl ->get_Type (This, pType))
#define _Stream_put_Type(This, Type) ((This)->lpVtbl ->put_Type (This, Type))
#define _Stream_get_LineSeparator(This, pLS) ((This)->lpVtbl ->get_LineSeparator (This, pLS))
#define _Stream_put_LineSeparator(This, LineSeparator) ((This)->lpVtbl ->put_LineSeparator (This, LineSeparator))
#define _Stream_get_State(This, pState) ((This)->lpVtbl ->get_State (This, pState))
#define _Stream_get_Mode(This, pMode) ((This)->lpVtbl ->get_Mode (This, pMode))
#define _Stream_put_Mode(This, Mode) ((This)->lpVtbl ->put_Mode (This, Mode))
#define _Stream_get_Charset(This, pbstrCharset) ((This)->lpVtbl ->get_Charset (This, pbstrCharset))
#define _Stream_put_Charset(This, Charset) ((This)->lpVtbl ->put_Charset (This, Charset))
#define _Stream_Read(This, NumBytes, pVal) ((This)->lpVtbl ->Read (This, NumBytes, pVal))
#define _Stream_Open(This, Source, Mode, Options, UserName, Password) ((This)->lpVtbl ->Open (This, Source, Mode, Options, UserName, Password))
#define _Stream_Close(This) ((This)->lpVtbl ->Close (This))
#define _Stream_SkipLine(This) ((This)->lpVtbl ->SkipLine (This))
#define _Stream_Write(This, Buffer) ((This)->lpVtbl ->Write (This, Buffer))
#define _Stream_SetEOS(This) ((This)->lpVtbl ->SetEOS (This))
#define _Stream_CopyTo(This, DestStream, CharNumber) ((This)->lpVtbl ->CopyTo (This, DestStream, CharNumber))
#define _Stream_Flush(This) ((This)->lpVtbl ->Flush (This))
#define _Stream_SaveToFile(This, FileName, Options) ((This)->lpVtbl ->SaveToFile (This, FileName, Options))
#define _Stream_LoadFromFile(This, FileName) ((This)->lpVtbl ->LoadFromFile (This, FileName))
#define _Stream_ReadText(This, NumChars, pbstr) ((This)->lpVtbl ->ReadText (This, NumChars, pbstr))
#define _Stream_WriteText(This, Data, Options) ((This)->lpVtbl ->WriteText (This, Data, Options))
#define _Stream_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#endif
#endif
#endif
  EXTERN_C const CLSID CLSID_Stream;
#ifdef __cplusplus
  Stream;
#endif
#ifndef __ADORecordConstruction_INTERFACE_DEFINED__
#define __ADORecordConstruction_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADORecordConstruction;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000567-0000-0010-8000-00AA006D2EA4")
  ADORecordConstruction : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Row (IUnknown **ppRow) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Row (IUnknown *pRow) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ParentRow (IUnknown *pRow) = 0;
  };
#else
  typedef struct ADORecordConstructionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADORecordConstruction *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADORecordConstruction *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADORecordConstruction *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADORecordConstruction *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADORecordConstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADORecordConstruction *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADORecordConstruction *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Row) (ADORecordConstruction *This, IUnknown **ppRow);
    HRESULT (STDMETHODCALLTYPE *put_Row) (ADORecordConstruction *This, IUnknown *pRow);
    HRESULT (STDMETHODCALLTYPE *put_ParentRow) (ADORecordConstruction *This, IUnknown *pRow);
    END_INTERFACE
  } ADORecordConstructionVtbl;
  interface ADORecordConstruction {
    CONST_VTBL struct ADORecordConstructionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADORecordConstruction_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADORecordConstruction_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADORecordConstruction_Release(This) ((This)->lpVtbl ->Release (This))
#define ADORecordConstruction_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define ADORecordConstruction_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define ADORecordConstruction_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define ADORecordConstruction_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define ADORecordConstruction_get_Row(This, ppRow) ((This)->lpVtbl ->get_Row (This, ppRow))
#define ADORecordConstruction_put_Row(This, pRow) ((This)->lpVtbl ->put_Row (This, pRow))
#define ADORecordConstruction_put_ParentRow(This, pRow) ((This)->lpVtbl ->put_ParentRow (This, pRow))
#endif
#endif
#endif
#ifndef __ADOStreamConstruction_INTERFACE_DEFINED__
#define __ADOStreamConstruction_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADOStreamConstruction;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000568-0000-0010-8000-00AA006D2EA4")
  ADOStreamConstruction : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Stream (IUnknown **ppStm) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Stream (IUnknown *pStm) = 0;
  };
#else
  typedef struct ADOStreamConstructionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOStreamConstruction *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOStreamConstruction *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOStreamConstruction *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOStreamConstruction *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOStreamConstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOStreamConstruction *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOStreamConstruction *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Stream) (ADOStreamConstruction *This, IUnknown **ppStm);
    HRESULT (STDMETHODCALLTYPE *put_Stream) (ADOStreamConstruction *This, IUnknown *pStm);
    END_INTERFACE
  } ADOStreamConstructionVtbl;
  interface ADOStreamConstruction {
    CONST_VTBL struct ADOStreamConstructionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADOStreamConstruction_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADOStreamConstruction_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADOStreamConstruction_Release(This) ((This)->lpVtbl ->Release (This))
#define ADOStreamConstruction_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define ADOStreamConstruction_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define ADOStreamConstruction_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define ADOStreamConstruction_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define ADOStreamConstruction_get_Stream(This, ppStm) ((This)->lpVtbl ->get_Stream (This, ppStm))
#define ADOStreamConstruction_put_Stream(This, pStm) ((This)->lpVtbl ->put_Stream (This, pStm))
#endif
#endif
#endif
#ifndef __ADOCommandConstruction_INTERFACE_DEFINED__
#define __ADOCommandConstruction_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADOCommandConstruction;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000517-0000-0010-8000-00AA006D2EA4")
  ADOCommandConstruction : public IUnknown {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_OLEDBCommand (IUnknown **ppOLEDBCommand) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_OLEDBCommand (IUnknown *pOLEDBCommand) = 0;
  };
#else
  typedef struct ADOCommandConstructionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOCommandConstruction *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOCommandConstruction *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOCommandConstruction *This);
    HRESULT (STDMETHODCALLTYPE *get_OLEDBCommand) (ADOCommandConstruction *This, IUnknown **ppOLEDBCommand);
    HRESULT (STDMETHODCALLTYPE *put_OLEDBCommand) (ADOCommandConstruction *This, IUnknown *pOLEDBCommand);
    END_INTERFACE
  } ADOCommandConstructionVtbl;
  interface ADOCommandConstruction {
    CONST_VTBL struct ADOCommandConstructionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADOCommandConstruction_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADOCommandConstruction_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADOCommandConstruction_Release(This) ((This)->lpVtbl ->Release (This))
#define ADOCommandConstruction_get_OLEDBCommand(This, ppOLEDBCommand) ((This)->lpVtbl ->get_OLEDBCommand (This, ppOLEDBCommand))
#define ADOCommandConstruction_put_OLEDBCommand(This, pOLEDBCommand) ((This)->lpVtbl ->put_OLEDBCommand (This, pOLEDBCommand))
#endif
#endif
#endif
  EXTERN_C const CLSID CLSID_Command;
#ifdef __cplusplus
  Command;
#endif
  EXTERN_C const CLSID CLSID_Recordset;
#ifdef __cplusplus
  Recordset;
#endif
#ifndef __Recordset15_INTERFACE_DEFINED__
#define __Recordset15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Recordset15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000150E-0000-0010-8000-00AA006D2EA4")
  Recordset15 : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_AbsolutePosition (PositionEnum *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_AbsolutePosition (PositionEnum Position) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ActiveConnection (IDispatch *pconn) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ActiveConnection (VARIANT vConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_BOF (VARIANT_BOOL *pb) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Bookmark (VARIANT *pvBookmark) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Bookmark (VARIANT vBookmark) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CacheSize (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CacheSize (long CacheSize) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CursorType (CursorTypeEnum *plCursorType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CursorType (CursorTypeEnum lCursorType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_EOF (VARIANT_BOOL *pb) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Fields (ADOFields **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_LockType (LockTypeEnum *plLockType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_LockType (LockTypeEnum lLockType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_MaxRecords (long *plMaxRecords) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_MaxRecords (long lMaxRecords) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_RecordCount (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_Source (IDispatch *pcmd) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Source (BSTR bstrConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Source (VARIANT *pvSource) = 0;
    virtual HRESULT STDMETHODCALLTYPE AddNew (VARIANT FieldList, VARIANT Values) = 0;
    virtual HRESULT STDMETHODCALLTYPE CancelUpdate (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Close (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (AffectEnum AffectRecords = adAffectCurrent) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetRows (long Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE Move (long NumRecords, VARIANT Start) = 0;
    virtual HRESULT STDMETHODCALLTYPE MoveNext (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE MovePrevious (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE MoveFirst (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE MoveLast (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Open (VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType = adOpenUnspecified, LockTypeEnum LockType = adLockUnspecified, LONG Options = adCmdUnspecified) = 0;
    virtual HRESULT STDMETHODCALLTYPE Requery (LONG Options = adOptionUnspecified) = 0;
    virtual HRESULT STDMETHODCALLTYPE _xResync (AffectEnum AffectRecords = adAffectAll) = 0;
    virtual HRESULT STDMETHODCALLTYPE Update (VARIANT Fields, VARIANT Values) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_AbsolutePage (PositionEnum *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_AbsolutePage (PositionEnum Page) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_EditMode (EditModeEnum *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Filter (VARIANT *Criteria) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Filter (VARIANT Criteria) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_PageCount (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_PageSize (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_PageSize (long PageSize) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Sort (BSTR *Criteria) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Sort (BSTR Criteria) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Status (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_State (LONG *plObjState) = 0;
    virtual HRESULT STDMETHODCALLTYPE _xClone (_ADORecordset **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE UpdateBatch (AffectEnum AffectRecords = adAffectAll) = 0;
    virtual HRESULT STDMETHODCALLTYPE CancelBatch (AffectEnum AffectRecords = adAffectAll) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CursorLocation (CursorLocationEnum *plCursorLoc) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CursorLocation (CursorLocationEnum lCursorLoc) = 0;
    virtual HRESULT STDMETHODCALLTYPE NextRecordset (VARIANT *RecordsAffected, _ADORecordset **ppiRs) = 0;
    virtual HRESULT STDMETHODCALLTYPE Supports (CursorOptionEnum CursorOptions, VARIANT_BOOL *pb) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Collect (VARIANT Index, VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Collect (VARIANT Index, VARIANT value) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_MarshalOptions (MarshalOptionsEnum *peMarshal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_MarshalOptions (MarshalOptionsEnum eMarshal) = 0;
    virtual HRESULT STDMETHODCALLTYPE Find (BSTR Criteria, long SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start) = 0;
  };
#else
  typedef struct Recordset15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Recordset15 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Recordset15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Recordset15 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Recordset15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Recordset15 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Recordset15 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Recordset15 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePosition) (Recordset15 *This, PositionEnum *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePosition) (Recordset15 *This, PositionEnum Position);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (Recordset15 *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (Recordset15 *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (Recordset15 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_BOF) (Recordset15 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Bookmark) (Recordset15 *This, VARIANT *pvBookmark);
    HRESULT (STDMETHODCALLTYPE *put_Bookmark) (Recordset15 *This, VARIANT vBookmark);
    HRESULT (STDMETHODCALLTYPE *get_CacheSize) (Recordset15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_CacheSize) (Recordset15 *This, long CacheSize);
    HRESULT (STDMETHODCALLTYPE *get_CursorType) (Recordset15 *This, CursorTypeEnum *plCursorType);
    HRESULT (STDMETHODCALLTYPE *put_CursorType) (Recordset15 *This, CursorTypeEnum lCursorType);
    HRESULT (STDMETHODCALLTYPE *get_EOF) (Recordset15 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Fields) (Recordset15 *This, ADOFields **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_LockType) (Recordset15 *This, LockTypeEnum *plLockType);
    HRESULT (STDMETHODCALLTYPE *put_LockType) (Recordset15 *This, LockTypeEnum lLockType);
    HRESULT (STDMETHODCALLTYPE *get_MaxRecords) (Recordset15 *This, long *plMaxRecords);
    HRESULT (STDMETHODCALLTYPE *put_MaxRecords) (Recordset15 *This, long lMaxRecords);
    HRESULT (STDMETHODCALLTYPE *get_RecordCount) (Recordset15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (Recordset15 *This, IDispatch *pcmd);
    HRESULT (STDMETHODCALLTYPE *put_Source) (Recordset15 *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *get_Source) (Recordset15 *This, VARIANT *pvSource);
    HRESULT (STDMETHODCALLTYPE *AddNew) (Recordset15 *This, VARIANT FieldList, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *CancelUpdate) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *Close) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *Delete) (Recordset15 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *GetRows) (Recordset15 *This, long Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *Move) (Recordset15 *This, long NumRecords, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *MoveNext) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *MovePrevious) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *MoveFirst) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *MoveLast) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *Open) (Recordset15 *This, VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType, LockTypeEnum LockType, LONG Options);
    HRESULT (STDMETHODCALLTYPE *Requery) (Recordset15 *This, LONG Options);
    HRESULT (STDMETHODCALLTYPE *_xResync) (Recordset15 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *Update) (Recordset15 *This, VARIANT Fields, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePage) (Recordset15 *This, PositionEnum *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePage) (Recordset15 *This, PositionEnum Page);
    HRESULT (STDMETHODCALLTYPE *get_EditMode) (Recordset15 *This, EditModeEnum *pl);
    HRESULT (STDMETHODCALLTYPE *get_Filter) (Recordset15 *This, VARIANT *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Filter) (Recordset15 *This, VARIANT Criteria);
    HRESULT (STDMETHODCALLTYPE *get_PageCount) (Recordset15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_PageSize) (Recordset15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_PageSize) (Recordset15 *This, long PageSize);
    HRESULT (STDMETHODCALLTYPE *get_Sort) (Recordset15 *This, BSTR *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Sort) (Recordset15 *This, BSTR Criteria);
    HRESULT (STDMETHODCALLTYPE *get_Status) (Recordset15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_State) (Recordset15 *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *_xClone) (Recordset15 *This, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *UpdateBatch) (Recordset15 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *CancelBatch) (Recordset15 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (Recordset15 *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (Recordset15 *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *NextADORecordset) (Recordset15 *This, VARIANT *RecordsAffected, _ADORecordset **ppiRs);
    HRESULT (STDMETHODCALLTYPE *Supports) (Recordset15 *This, CursorOptionEnum CursorOptions, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Collect) (Recordset15 *This, VARIANT Index, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Collect) (Recordset15 *This, VARIANT Index, VARIANT value);
    HRESULT (STDMETHODCALLTYPE *get_MarshalOptions) (Recordset15 *This, MarshalOptionsEnum *peMarshal);
    HRESULT (STDMETHODCALLTYPE *put_MarshalOptions) (Recordset15 *This, MarshalOptionsEnum eMarshal);
    HRESULT (STDMETHODCALLTYPE *Find) (Recordset15 *This, BSTR Criteria, long SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start);
    END_INTERFACE
  } Recordset15Vtbl;
  interface Recordset15 {
    CONST_VTBL struct Recordset15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Recordset15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Recordset15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Recordset15_Release(This) ((This)->lpVtbl ->Release (This))
#define Recordset15_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Recordset15_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Recordset15_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Recordset15_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Recordset15_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Recordset15_get_AbsolutePosition(This, pl) ((This)->lpVtbl ->get_AbsolutePosition (This, pl))
#define Recordset15_put_AbsolutePosition(This, Position) ((This)->lpVtbl ->put_AbsolutePosition (This, Position))
#define Recordset15_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define Recordset15_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define Recordset15_get_ActiveConnection(This, pvar) ((This)->lpVtbl ->get_ActiveConnection (This, pvar))
#define Recordset15_get_BOF(This, pb) ((This)->lpVtbl ->get_BOF (This, pb))
#define Recordset15_get_Bookmark(This, pvBookmark) ((This)->lpVtbl ->get_Bookmark (This, pvBookmark))
#define Recordset15_put_Bookmark(This, vBookmark) ((This)->lpVtbl ->put_Bookmark (This, vBookmark))
#define Recordset15_get_CacheSize(This, pl) ((This)->lpVtbl ->get_CacheSize (This, pl))
#define Recordset15_put_CacheSize(This, CacheSize) ((This)->lpVtbl ->put_CacheSize (This, CacheSize))
#define Recordset15_get_CursorType(This, plCursorType) ((This)->lpVtbl ->get_CursorType (This, plCursorType))
#define Recordset15_put_CursorType(This, lCursorType) ((This)->lpVtbl ->put_CursorType (This, lCursorType))
#define Recordset15_get_EOF(This, pb) ((This)->lpVtbl ->get_EOF (This, pb))
#define Recordset15_get_Fields(This, ppvObject) ((This)->lpVtbl ->get_Fields (This, ppvObject))
#define Recordset15_get_LockType(This, plLockType) ((This)->lpVtbl ->get_LockType (This, plLockType))
#define Recordset15_put_LockType(This, lLockType) ((This)->lpVtbl ->put_LockType (This, lLockType))
#define Recordset15_get_MaxRecords(This, plMaxRecords) ((This)->lpVtbl ->get_MaxRecords (This, plMaxRecords))
#define Recordset15_put_MaxRecords(This, lMaxRecords) ((This)->lpVtbl ->put_MaxRecords (This, lMaxRecords))
#define Recordset15_get_RecordCount(This, pl) ((This)->lpVtbl ->get_RecordCount (This, pl))
#define Recordset15_putref_Source(This, pcmd) ((This)->lpVtbl ->putref_Source (This, pcmd))
#define Recordset15_put_Source(This, bstrConn) ((This)->lpVtbl ->put_Source (This, bstrConn))
#define Recordset15_get_Source(This, pvSource) ((This)->lpVtbl ->get_Source (This, pvSource))
#define Recordset15_AddNew(This, FieldList, Values) ((This)->lpVtbl ->AddNew (This, FieldList, Values))
#define Recordset15_CancelUpdate(This) ((This)->lpVtbl ->CancelUpdate (This))
#define Recordset15_Close(This) ((This)->lpVtbl ->Close (This))
#define Recordset15_Delete(This, AffectRecords) ((This)->lpVtbl ->Delete (This, AffectRecords))
#define Recordset15_GetRows(This, Rows, Start, Fields, pvar) ((This)->lpVtbl ->GetRows (This, Rows, Start, Fields, pvar))
#define Recordset15_Move(This, NumRecords, Start) ((This)->lpVtbl ->Move (This, NumRecords, Start))
#define Recordset15_MoveNext(This) ((This)->lpVtbl ->MoveNext (This))
#define Recordset15_MovePrevious(This) ((This)->lpVtbl ->MovePrevious (This))
#define Recordset15_MoveFirst(This) ((This)->lpVtbl ->MoveFirst (This))
#define Recordset15_MoveLast(This) ((This)->lpVtbl ->MoveLast (This))
#define Recordset15_Open(This, Source, ActiveConnection, CursorType, LockType, Options) ((This)->lpVtbl ->Open (This, Source, ActiveConnection, CursorType, LockType, Options))
#define Recordset15_Requery(This, Options) ((This)->lpVtbl ->Requery (This, Options))
#define Recordset15__xResync(This, AffectRecords) ((This)->lpVtbl ->_xResync (This, AffectRecords))
#define Recordset15_Update(This, Fields, Values) ((This)->lpVtbl ->Update (This, Fields, Values))
#define Recordset15_get_AbsolutePage(This, pl) ((This)->lpVtbl ->get_AbsolutePage (This, pl))
#define Recordset15_put_AbsolutePage(This, Page) ((This)->lpVtbl ->put_AbsolutePage (This, Page))
#define Recordset15_get_EditMode(This, pl) ((This)->lpVtbl ->get_EditMode (This, pl))
#define Recordset15_get_Filter(This, Criteria) ((This)->lpVtbl ->get_Filter (This, Criteria))
#define Recordset15_put_Filter(This, Criteria) ((This)->lpVtbl ->put_Filter (This, Criteria))
#define Recordset15_get_PageCount(This, pl) ((This)->lpVtbl ->get_PageCount (This, pl))
#define Recordset15_get_PageSize(This, pl) ((This)->lpVtbl ->get_PageSize (This, pl))
#define Recordset15_put_PageSize(This, PageSize) ((This)->lpVtbl ->put_PageSize (This, PageSize))
#define Recordset15_get_Sort(This, Criteria) ((This)->lpVtbl ->get_Sort (This, Criteria))
#define Recordset15_put_Sort(This, Criteria) ((This)->lpVtbl ->put_Sort (This, Criteria))
#define Recordset15_get_Status(This, pl) ((This)->lpVtbl ->get_Status (This, pl))
#define Recordset15_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define Recordset15__xClone(This, ppvObject) ((This)->lpVtbl ->_xClone (This, ppvObject))
#define Recordset15_UpdateBatch(This, AffectRecords) ((This)->lpVtbl ->UpdateBatch (This, AffectRecords))
#define Recordset15_CancelBatch(This, AffectRecords) ((This)->lpVtbl ->CancelBatch (This, AffectRecords))
#define Recordset15_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define Recordset15_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define Recordset15_NextRecordset(This, RecordsAffected, ppiRs) ((This)->lpVtbl ->NextRecordset (This, RecordsAffected, ppiRs))
#define Recordset15_Supports(This, CursorOptions, pb) ((This)->lpVtbl ->Supports (This, CursorOptions, pb))
#define Recordset15_get_Collect(This, Index, pvar) ((This)->lpVtbl ->get_Collect (This, Index, pvar))
#define Recordset15_put_Collect(This, Index, value) ((This)->lpVtbl ->put_Collect (This, Index, value))
#define Recordset15_get_MarshalOptions(This, peMarshal) ((This)->lpVtbl ->get_MarshalOptions (This, peMarshal))
#define Recordset15_put_MarshalOptions(This, eMarshal) ((This)->lpVtbl ->put_MarshalOptions (This, eMarshal))
#define Recordset15_Find(This, Criteria, SkipRecords, SearchDirection, Start) ((This)->lpVtbl ->Find (This, Criteria, SkipRecords, SearchDirection, Start))
#endif
#endif
#endif
#ifndef __Recordset20_INTERFACE_DEFINED__
#define __Recordset20_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Recordset20;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000154F-0000-0010-8000-00AA006D2EA4")
  Recordset20 : public Recordset15 {
    public:
    virtual HRESULT STDMETHODCALLTYPE Cancel (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DataSource (IUnknown **ppunkDataSource) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_DataSource (IUnknown *punkDataSource) = 0;
    virtual HRESULT STDMETHODCALLTYPE _xSave (BSTR FileName = NULL, PersistFormatEnum PersistFormat = adPersistADTG) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ActiveCommand (IDispatch **ppCmd) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_StayInSync (VARIANT_BOOL bStayInSync) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_StayInSync (VARIANT_BOOL *pbStayInSync) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetString (StringFormatEnum StringFormat, long NumRows, BSTR ColumnDelimeter, BSTR RowDelimeter, BSTR NullExpr, BSTR *pRetString) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DataMember (BSTR *pbstrDataMember) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_DataMember (BSTR bstrDataMember) = 0;
    virtual HRESULT STDMETHODCALLTYPE CompareBookmarks (VARIANT Bookmark1, VARIANT Bookmark2, CompareEnum *pCompare) = 0;
    virtual HRESULT STDMETHODCALLTYPE Clone (LockTypeEnum LockType, _ADORecordset **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Resync (AffectEnum AffectRecords = adAffectAll, ResyncEnum ResyncValues = adResyncAllValues) = 0;
  };
#else
  typedef struct Recordset20Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Recordset20 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Recordset20 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Recordset20 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Recordset20 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Recordset20 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Recordset20 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Recordset20 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePosition) (Recordset20 *This, PositionEnum *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePosition) (Recordset20 *This, PositionEnum Position);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (Recordset20 *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (Recordset20 *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (Recordset20 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_BOF) (Recordset20 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Bookmark) (Recordset20 *This, VARIANT *pvBookmark);
    HRESULT (STDMETHODCALLTYPE *put_Bookmark) (Recordset20 *This, VARIANT vBookmark);
    HRESULT (STDMETHODCALLTYPE *get_CacheSize) (Recordset20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_CacheSize) (Recordset20 *This, long CacheSize);
    HRESULT (STDMETHODCALLTYPE *get_CursorType) (Recordset20 *This, CursorTypeEnum *plCursorType);
    HRESULT (STDMETHODCALLTYPE *put_CursorType) (Recordset20 *This, CursorTypeEnum lCursorType);
    HRESULT (STDMETHODCALLTYPE *get_EOF) (Recordset20 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Fields) (Recordset20 *This, ADOFields **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_LockType) (Recordset20 *This, LockTypeEnum *plLockType);
    HRESULT (STDMETHODCALLTYPE *put_LockType) (Recordset20 *This, LockTypeEnum lLockType);
    HRESULT (STDMETHODCALLTYPE *get_MaxRecords) (Recordset20 *This, long *plMaxRecords);
    HRESULT (STDMETHODCALLTYPE *put_MaxRecords) (Recordset20 *This, long lMaxRecords);
    HRESULT (STDMETHODCALLTYPE *get_RecordCount) (Recordset20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (Recordset20 *This, IDispatch *pcmd);
    HRESULT (STDMETHODCALLTYPE *put_Source) (Recordset20 *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *get_Source) (Recordset20 *This, VARIANT *pvSource);
    HRESULT (STDMETHODCALLTYPE *AddNew) (Recordset20 *This, VARIANT FieldList, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *CancelUpdate) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *Close) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *Delete) (Recordset20 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *GetRows) (Recordset20 *This, long Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *Move) (Recordset20 *This, long NumRecords, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *MoveNext) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *MovePrevious) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *MoveFirst) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *MoveLast) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *Open) (Recordset20 *This, VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType, LockTypeEnum LockType, LONG Options);
    HRESULT (STDMETHODCALLTYPE *Requery) (Recordset20 *This, LONG Options);
    HRESULT (STDMETHODCALLTYPE *_xResync) (Recordset20 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *Update) (Recordset20 *This, VARIANT Fields, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePage) (Recordset20 *This, PositionEnum *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePage) (Recordset20 *This, PositionEnum Page);
    HRESULT (STDMETHODCALLTYPE *get_EditMode) (Recordset20 *This, EditModeEnum *pl);
    HRESULT (STDMETHODCALLTYPE *get_Filter) (Recordset20 *This, VARIANT *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Filter) (Recordset20 *This, VARIANT Criteria);
    HRESULT (STDMETHODCALLTYPE *get_PageCount) (Recordset20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_PageSize) (Recordset20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_PageSize) (Recordset20 *This, long PageSize);
    HRESULT (STDMETHODCALLTYPE *get_Sort) (Recordset20 *This, BSTR *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Sort) (Recordset20 *This, BSTR Criteria);
    HRESULT (STDMETHODCALLTYPE *get_Status) (Recordset20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_State) (Recordset20 *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *_xClone) (Recordset20 *This, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *UpdateBatch) (Recordset20 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *CancelBatch) (Recordset20 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (Recordset20 *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (Recordset20 *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *NextADORecordset) (Recordset20 *This, VARIANT *RecordsAffected, _ADORecordset **ppiRs);
    HRESULT (STDMETHODCALLTYPE *Supports) (Recordset20 *This, CursorOptionEnum CursorOptions, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Collect) (Recordset20 *This, VARIANT Index, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Collect) (Recordset20 *This, VARIANT Index, VARIANT value);
    HRESULT (STDMETHODCALLTYPE *get_MarshalOptions) (Recordset20 *This, MarshalOptionsEnum *peMarshal);
    HRESULT (STDMETHODCALLTYPE *put_MarshalOptions) (Recordset20 *This, MarshalOptionsEnum eMarshal);
    HRESULT (STDMETHODCALLTYPE *Find) (Recordset20 *This, BSTR Criteria, long SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *Cancel) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *get_DataSource) (Recordset20 *This, IUnknown **ppunkDataSource);
    HRESULT (STDMETHODCALLTYPE *putref_DataSource) (Recordset20 *This, IUnknown *punkDataSource);
    HRESULT (STDMETHODCALLTYPE *_xSave) (Recordset20 *This, BSTR FileName, PersistFormatEnum PersistFormat);
    HRESULT (STDMETHODCALLTYPE *get_ActiveCommand) (Recordset20 *This, IDispatch **ppCmd);
    HRESULT (STDMETHODCALLTYPE *put_StayInSync) (Recordset20 *This, VARIANT_BOOL bStayInSync);
    HRESULT (STDMETHODCALLTYPE *get_StayInSync) (Recordset20 *This, VARIANT_BOOL *pbStayInSync);
    HRESULT (STDMETHODCALLTYPE *GetString) (Recordset20 *This, StringFormatEnum StringFormat, long NumRows, BSTR ColumnDelimeter, BSTR RowDelimeter, BSTR NullExpr, BSTR *pRetString);
    HRESULT (STDMETHODCALLTYPE *get_DataMember) (Recordset20 *This, BSTR *pbstrDataMember);
    HRESULT (STDMETHODCALLTYPE *put_DataMember) (Recordset20 *This, BSTR bstrDataMember);
    HRESULT (STDMETHODCALLTYPE *CompareBookmarks) (Recordset20 *This, VARIANT Bookmark1, VARIANT Bookmark2, CompareEnum *pCompare);
    HRESULT (STDMETHODCALLTYPE *Clone) (Recordset20 *This, LockTypeEnum LockType, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Resync) (Recordset20 *This, AffectEnum AffectRecords, ResyncEnum ResyncValues);
    END_INTERFACE
  } Recordset20Vtbl;
  interface Recordset20 {
    CONST_VTBL struct Recordset20Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Recordset20_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Recordset20_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Recordset20_Release(This) ((This)->lpVtbl ->Release (This))
#define Recordset20_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Recordset20_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Recordset20_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Recordset20_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Recordset20_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Recordset20_get_AbsolutePosition(This, pl) ((This)->lpVtbl ->get_AbsolutePosition (This, pl))
#define Recordset20_put_AbsolutePosition(This, Position) ((This)->lpVtbl ->put_AbsolutePosition (This, Position))
#define Recordset20_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define Recordset20_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define Recordset20_get_ActiveConnection(This, pvar) ((This)->lpVtbl ->get_ActiveConnection (This, pvar))
#define Recordset20_get_BOF(This, pb) ((This)->lpVtbl ->get_BOF (This, pb))
#define Recordset20_get_Bookmark(This, pvBookmark) ((This)->lpVtbl ->get_Bookmark (This, pvBookmark))
#define Recordset20_put_Bookmark(This, vBookmark) ((This)->lpVtbl ->put_Bookmark (This, vBookmark))
#define Recordset20_get_CacheSize(This, pl) ((This)->lpVtbl ->get_CacheSize (This, pl))
#define Recordset20_put_CacheSize(This, CacheSize) ((This)->lpVtbl ->put_CacheSize (This, CacheSize))
#define Recordset20_get_CursorType(This, plCursorType) ((This)->lpVtbl ->get_CursorType (This, plCursorType))
#define Recordset20_put_CursorType(This, lCursorType) ((This)->lpVtbl ->put_CursorType (This, lCursorType))
#define Recordset20_get_EOF(This, pb) ((This)->lpVtbl ->get_EOF (This, pb))
#define Recordset20_get_Fields(This, ppvObject) ((This)->lpVtbl ->get_Fields (This, ppvObject))
#define Recordset20_get_LockType(This, plLockType) ((This)->lpVtbl ->get_LockType (This, plLockType))
#define Recordset20_put_LockType(This, lLockType) ((This)->lpVtbl ->put_LockType (This, lLockType))
#define Recordset20_get_MaxRecords(This, plMaxRecords) ((This)->lpVtbl ->get_MaxRecords (This, plMaxRecords))
#define Recordset20_put_MaxRecords(This, lMaxRecords) ((This)->lpVtbl ->put_MaxRecords (This, lMaxRecords))
#define Recordset20_get_RecordCount(This, pl) ((This)->lpVtbl ->get_RecordCount (This, pl))
#define Recordset20_putref_Source(This, pcmd) ((This)->lpVtbl ->putref_Source (This, pcmd))
#define Recordset20_put_Source(This, bstrConn) ((This)->lpVtbl ->put_Source (This, bstrConn))
#define Recordset20_get_Source(This, pvSource) ((This)->lpVtbl ->get_Source (This, pvSource))
#define Recordset20_AddNew(This, FieldList, Values) ((This)->lpVtbl ->AddNew (This, FieldList, Values))
#define Recordset20_CancelUpdate(This) ((This)->lpVtbl ->CancelUpdate (This))
#define Recordset20_Close(This) ((This)->lpVtbl ->Close (This))
#define Recordset20_Delete(This, AffectRecords) ((This)->lpVtbl ->Delete (This, AffectRecords))
#define Recordset20_GetRows(This, Rows, Start, Fields, pvar) ((This)->lpVtbl ->GetRows (This, Rows, Start, Fields, pvar))
#define Recordset20_Move(This, NumRecords, Start) ((This)->lpVtbl ->Move (This, NumRecords, Start))
#define Recordset20_MoveNext(This) ((This)->lpVtbl ->MoveNext (This))
#define Recordset20_MovePrevious(This) ((This)->lpVtbl ->MovePrevious (This))
#define Recordset20_MoveFirst(This) ((This)->lpVtbl ->MoveFirst (This))
#define Recordset20_MoveLast(This) ((This)->lpVtbl ->MoveLast (This))
#define Recordset20_Open(This, Source, ActiveConnection, CursorType, LockType, Options) ((This)->lpVtbl ->Open (This, Source, ActiveConnection, CursorType, LockType, Options))
#define Recordset20_Requery(This, Options) ((This)->lpVtbl ->Requery (This, Options))
#define Recordset20__xResync(This, AffectRecords) ((This)->lpVtbl ->_xResync (This, AffectRecords))
#define Recordset20_Update(This, Fields, Values) ((This)->lpVtbl ->Update (This, Fields, Values))
#define Recordset20_get_AbsolutePage(This, pl) ((This)->lpVtbl ->get_AbsolutePage (This, pl))
#define Recordset20_put_AbsolutePage(This, Page) ((This)->lpVtbl ->put_AbsolutePage (This, Page))
#define Recordset20_get_EditMode(This, pl) ((This)->lpVtbl ->get_EditMode (This, pl))
#define Recordset20_get_Filter(This, Criteria) ((This)->lpVtbl ->get_Filter (This, Criteria))
#define Recordset20_put_Filter(This, Criteria) ((This)->lpVtbl ->put_Filter (This, Criteria))
#define Recordset20_get_PageCount(This, pl) ((This)->lpVtbl ->get_PageCount (This, pl))
#define Recordset20_get_PageSize(This, pl) ((This)->lpVtbl ->get_PageSize (This, pl))
#define Recordset20_put_PageSize(This, PageSize) ((This)->lpVtbl ->put_PageSize (This, PageSize))
#define Recordset20_get_Sort(This, Criteria) ((This)->lpVtbl ->get_Sort (This, Criteria))
#define Recordset20_put_Sort(This, Criteria) ((This)->lpVtbl ->put_Sort (This, Criteria))
#define Recordset20_get_Status(This, pl) ((This)->lpVtbl ->get_Status (This, pl))
#define Recordset20_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define Recordset20__xClone(This, ppvObject) ((This)->lpVtbl ->_xClone (This, ppvObject))
#define Recordset20_UpdateBatch(This, AffectRecords) ((This)->lpVtbl ->UpdateBatch (This, AffectRecords))
#define Recordset20_CancelBatch(This, AffectRecords) ((This)->lpVtbl ->CancelBatch (This, AffectRecords))
#define Recordset20_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define Recordset20_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define Recordset20_NextRecordset(This, RecordsAffected, ppiRs) ((This)->lpVtbl ->NextRecordset (This, RecordsAffected, ppiRs))
#define Recordset20_Supports(This, CursorOptions, pb) ((This)->lpVtbl ->Supports (This, CursorOptions, pb))
#define Recordset20_get_Collect(This, Index, pvar) ((This)->lpVtbl ->get_Collect (This, Index, pvar))
#define Recordset20_put_Collect(This, Index, value) ((This)->lpVtbl ->put_Collect (This, Index, value))
#define Recordset20_get_MarshalOptions(This, peMarshal) ((This)->lpVtbl ->get_MarshalOptions (This, peMarshal))
#define Recordset20_put_MarshalOptions(This, eMarshal) ((This)->lpVtbl ->put_MarshalOptions (This, eMarshal))
#define Recordset20_Find(This, Criteria, SkipRecords, SearchDirection, Start) ((This)->lpVtbl ->Find (This, Criteria, SkipRecords, SearchDirection, Start))
#define Recordset20_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#define Recordset20_get_DataSource(This, ppunkDataSource) ((This)->lpVtbl ->get_DataSource (This, ppunkDataSource))
#define Recordset20_putref_DataSource(This, punkDataSource) ((This)->lpVtbl ->putref_DataSource (This, punkDataSource))
#define Recordset20__xSave(This, FileName, PersistFormat) ((This)->lpVtbl ->_xSave (This, FileName, PersistFormat))
#define Recordset20_get_ActiveCommand(This, ppCmd) ((This)->lpVtbl ->get_ActiveCommand (This, ppCmd))
#define Recordset20_put_StayInSync(This, bStayInSync) ((This)->lpVtbl ->put_StayInSync (This, bStayInSync))
#define Recordset20_get_StayInSync(This, pbStayInSync) ((This)->lpVtbl ->get_StayInSync (This, pbStayInSync))
#define Recordset20_GetString(This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString) ((This)->lpVtbl ->GetString (This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString))
#define Recordset20_get_DataMember(This, pbstrDataMember) ((This)->lpVtbl ->get_DataMember (This, pbstrDataMember))
#define Recordset20_put_DataMember(This, bstrDataMember) ((This)->lpVtbl ->put_DataMember (This, bstrDataMember))
#define Recordset20_CompareBookmarks(This, Bookmark1, Bookmark2, pCompare) ((This)->lpVtbl ->CompareBookmarks (This, Bookmark1, Bookmark2, pCompare))
#define Recordset20_Clone(This, LockType, ppvObject) ((This)->lpVtbl ->Clone (This, LockType, ppvObject))
#define Recordset20_Resync(This, AffectRecords, ResyncValues) ((This)->lpVtbl ->Resync (This, AffectRecords, ResyncValues))
#endif
#endif
#endif
#ifndef __Recordset21_INTERFACE_DEFINED__
#define __Recordset21_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Recordset21;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001555-0000-0010-8000-00AA006D2EA4")
  Recordset21 : public Recordset20 {
    public:
    virtual HRESULT STDMETHODCALLTYPE Seek (VARIANT KeyValues, SeekEnum SeekOption = adSeekFirstEQ) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Index (BSTR Index) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Index (BSTR *pbstrIndex) = 0;
  };
#else
  typedef struct Recordset21Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Recordset21 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Recordset21 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Recordset21 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Recordset21 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Recordset21 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Recordset21 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Recordset21 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePosition) (Recordset21 *This, PositionEnum *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePosition) (Recordset21 *This, PositionEnum Position);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (Recordset21 *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (Recordset21 *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (Recordset21 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_BOF) (Recordset21 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Bookmark) (Recordset21 *This, VARIANT *pvBookmark);
    HRESULT (STDMETHODCALLTYPE *put_Bookmark) (Recordset21 *This, VARIANT vBookmark);
    HRESULT (STDMETHODCALLTYPE *get_CacheSize) (Recordset21 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_CacheSize) (Recordset21 *This, long CacheSize);
    HRESULT (STDMETHODCALLTYPE *get_CursorType) (Recordset21 *This, CursorTypeEnum *plCursorType);
    HRESULT (STDMETHODCALLTYPE *put_CursorType) (Recordset21 *This, CursorTypeEnum lCursorType);
    HRESULT (STDMETHODCALLTYPE *get_EOF) (Recordset21 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Fields) (Recordset21 *This, ADOFields **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_LockType) (Recordset21 *This, LockTypeEnum *plLockType);
    HRESULT (STDMETHODCALLTYPE *put_LockType) (Recordset21 *This, LockTypeEnum lLockType);
    HRESULT (STDMETHODCALLTYPE *get_MaxRecords) (Recordset21 *This, long *plMaxRecords);
    HRESULT (STDMETHODCALLTYPE *put_MaxRecords) (Recordset21 *This, long lMaxRecords);
    HRESULT (STDMETHODCALLTYPE *get_RecordCount) (Recordset21 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (Recordset21 *This, IDispatch *pcmd);
    HRESULT (STDMETHODCALLTYPE *put_Source) (Recordset21 *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *get_Source) (Recordset21 *This, VARIANT *pvSource);
    HRESULT (STDMETHODCALLTYPE *AddNew) (Recordset21 *This, VARIANT FieldList, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *CancelUpdate) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *Close) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *Delete) (Recordset21 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *GetRows) (Recordset21 *This, long Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *Move) (Recordset21 *This, long NumRecords, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *MoveNext) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *MovePrevious) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *MoveFirst) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *MoveLast) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *Open) (Recordset21 *This, VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType, LockTypeEnum LockType, LONG Options);
    HRESULT (STDMETHODCALLTYPE *Requery) (Recordset21 *This, LONG Options);
    HRESULT (STDMETHODCALLTYPE *_xResync) (Recordset21 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *Update) (Recordset21 *This, VARIANT Fields, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePage) (Recordset21 *This, PositionEnum *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePage) (Recordset21 *This, PositionEnum Page);
    HRESULT (STDMETHODCALLTYPE *get_EditMode) (Recordset21 *This, EditModeEnum *pl);
    HRESULT (STDMETHODCALLTYPE *get_Filter) (Recordset21 *This, VARIANT *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Filter) (Recordset21 *This, VARIANT Criteria);
    HRESULT (STDMETHODCALLTYPE *get_PageCount) (Recordset21 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_PageSize) (Recordset21 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_PageSize) (Recordset21 *This, long PageSize);
    HRESULT (STDMETHODCALLTYPE *get_Sort) (Recordset21 *This, BSTR *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Sort) (Recordset21 *This, BSTR Criteria);
    HRESULT (STDMETHODCALLTYPE *get_Status) (Recordset21 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_State) (Recordset21 *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *_xClone) (Recordset21 *This, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *UpdateBatch) (Recordset21 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *CancelBatch) (Recordset21 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (Recordset21 *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (Recordset21 *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *NextADORecordset) (Recordset21 *This, VARIANT *RecordsAffected, _ADORecordset **ppiRs);
    HRESULT (STDMETHODCALLTYPE *Supports) (Recordset21 *This, CursorOptionEnum CursorOptions, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Collect) (Recordset21 *This, VARIANT Index, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Collect) (Recordset21 *This, VARIANT Index, VARIANT value);
    HRESULT (STDMETHODCALLTYPE *get_MarshalOptions) (Recordset21 *This, MarshalOptionsEnum *peMarshal);
    HRESULT (STDMETHODCALLTYPE *put_MarshalOptions) (Recordset21 *This, MarshalOptionsEnum eMarshal);
    HRESULT (STDMETHODCALLTYPE *Find) (Recordset21 *This, BSTR Criteria, long SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *Cancel) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *get_DataSource) (Recordset21 *This, IUnknown **ppunkDataSource);
    HRESULT (STDMETHODCALLTYPE *putref_DataSource) (Recordset21 *This, IUnknown *punkDataSource);
    HRESULT (STDMETHODCALLTYPE *_xSave) (Recordset21 *This, BSTR FileName, PersistFormatEnum PersistFormat);
    HRESULT (STDMETHODCALLTYPE *get_ActiveCommand) (Recordset21 *This, IDispatch **ppCmd);
    HRESULT (STDMETHODCALLTYPE *put_StayInSync) (Recordset21 *This, VARIANT_BOOL bStayInSync);
    HRESULT (STDMETHODCALLTYPE *get_StayInSync) (Recordset21 *This, VARIANT_BOOL *pbStayInSync);
    HRESULT (STDMETHODCALLTYPE *GetString) (Recordset21 *This, StringFormatEnum StringFormat, long NumRows, BSTR ColumnDelimeter, BSTR RowDelimeter, BSTR NullExpr, BSTR *pRetString);
    HRESULT (STDMETHODCALLTYPE *get_DataMember) (Recordset21 *This, BSTR *pbstrDataMember);
    HRESULT (STDMETHODCALLTYPE *put_DataMember) (Recordset21 *This, BSTR bstrDataMember);
    HRESULT (STDMETHODCALLTYPE *CompareBookmarks) (Recordset21 *This, VARIANT Bookmark1, VARIANT Bookmark2, CompareEnum *pCompare);
    HRESULT (STDMETHODCALLTYPE *Clone) (Recordset21 *This, LockTypeEnum LockType, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Resync) (Recordset21 *This, AffectEnum AffectRecords, ResyncEnum ResyncValues);
    HRESULT (STDMETHODCALLTYPE *Seek) (Recordset21 *This, VARIANT KeyValues, SeekEnum SeekOption);
    HRESULT (STDMETHODCALLTYPE *put_Index) (Recordset21 *This, BSTR Index);
    HRESULT (STDMETHODCALLTYPE *get_Index) (Recordset21 *This, BSTR *pbstrIndex);
    END_INTERFACE
  } Recordset21Vtbl;
  interface Recordset21 {
    CONST_VTBL struct Recordset21Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Recordset21_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Recordset21_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Recordset21_Release(This) ((This)->lpVtbl ->Release (This))
#define Recordset21_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Recordset21_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Recordset21_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Recordset21_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Recordset21_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Recordset21_get_AbsolutePosition(This, pl) ((This)->lpVtbl ->get_AbsolutePosition (This, pl))
#define Recordset21_put_AbsolutePosition(This, Position) ((This)->lpVtbl ->put_AbsolutePosition (This, Position))
#define Recordset21_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define Recordset21_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define Recordset21_get_ActiveConnection(This, pvar) ((This)->lpVtbl ->get_ActiveConnection (This, pvar))
#define Recordset21_get_BOF(This, pb) ((This)->lpVtbl ->get_BOF (This, pb))
#define Recordset21_get_Bookmark(This, pvBookmark) ((This)->lpVtbl ->get_Bookmark (This, pvBookmark))
#define Recordset21_put_Bookmark(This, vBookmark) ((This)->lpVtbl ->put_Bookmark (This, vBookmark))
#define Recordset21_get_CacheSize(This, pl) ((This)->lpVtbl ->get_CacheSize (This, pl))
#define Recordset21_put_CacheSize(This, CacheSize) ((This)->lpVtbl ->put_CacheSize (This, CacheSize))
#define Recordset21_get_CursorType(This, plCursorType) ((This)->lpVtbl ->get_CursorType (This, plCursorType))
#define Recordset21_put_CursorType(This, lCursorType) ((This)->lpVtbl ->put_CursorType (This, lCursorType))
#define Recordset21_get_EOF(This, pb) ((This)->lpVtbl ->get_EOF (This, pb))
#define Recordset21_get_Fields(This, ppvObject) ((This)->lpVtbl ->get_Fields (This, ppvObject))
#define Recordset21_get_LockType(This, plLockType) ((This)->lpVtbl ->get_LockType (This, plLockType))
#define Recordset21_put_LockType(This, lLockType) ((This)->lpVtbl ->put_LockType (This, lLockType))
#define Recordset21_get_MaxRecords(This, plMaxRecords) ((This)->lpVtbl ->get_MaxRecords (This, plMaxRecords))
#define Recordset21_put_MaxRecords(This, lMaxRecords) ((This)->lpVtbl ->put_MaxRecords (This, lMaxRecords))
#define Recordset21_get_RecordCount(This, pl) ((This)->lpVtbl ->get_RecordCount (This, pl))
#define Recordset21_putref_Source(This, pcmd) ((This)->lpVtbl ->putref_Source (This, pcmd))
#define Recordset21_put_Source(This, bstrConn) ((This)->lpVtbl ->put_Source (This, bstrConn))
#define Recordset21_get_Source(This, pvSource) ((This)->lpVtbl ->get_Source (This, pvSource))
#define Recordset21_AddNew(This, FieldList, Values) ((This)->lpVtbl ->AddNew (This, FieldList, Values))
#define Recordset21_CancelUpdate(This) ((This)->lpVtbl ->CancelUpdate (This))
#define Recordset21_Close(This) ((This)->lpVtbl ->Close (This))
#define Recordset21_Delete(This, AffectRecords) ((This)->lpVtbl ->Delete (This, AffectRecords))
#define Recordset21_GetRows(This, Rows, Start, Fields, pvar) ((This)->lpVtbl ->GetRows (This, Rows, Start, Fields, pvar))
#define Recordset21_Move(This, NumRecords, Start) ((This)->lpVtbl ->Move (This, NumRecords, Start))
#define Recordset21_MoveNext(This) ((This)->lpVtbl ->MoveNext (This))
#define Recordset21_MovePrevious(This) ((This)->lpVtbl ->MovePrevious (This))
#define Recordset21_MoveFirst(This) ((This)->lpVtbl ->MoveFirst (This))
#define Recordset21_MoveLast(This) ((This)->lpVtbl ->MoveLast (This))
#define Recordset21_Open(This, Source, ActiveConnection, CursorType, LockType, Options) ((This)->lpVtbl ->Open (This, Source, ActiveConnection, CursorType, LockType, Options))
#define Recordset21_Requery(This, Options) ((This)->lpVtbl ->Requery (This, Options))
#define Recordset21__xResync(This, AffectRecords) ((This)->lpVtbl ->_xResync (This, AffectRecords))
#define Recordset21_Update(This, Fields, Values) ((This)->lpVtbl ->Update (This, Fields, Values))
#define Recordset21_get_AbsolutePage(This, pl) ((This)->lpVtbl ->get_AbsolutePage (This, pl))
#define Recordset21_put_AbsolutePage(This, Page) ((This)->lpVtbl ->put_AbsolutePage (This, Page))
#define Recordset21_get_EditMode(This, pl) ((This)->lpVtbl ->get_EditMode (This, pl))
#define Recordset21_get_Filter(This, Criteria) ((This)->lpVtbl ->get_Filter (This, Criteria))
#define Recordset21_put_Filter(This, Criteria) ((This)->lpVtbl ->put_Filter (This, Criteria))
#define Recordset21_get_PageCount(This, pl) ((This)->lpVtbl ->get_PageCount (This, pl))
#define Recordset21_get_PageSize(This, pl) ((This)->lpVtbl ->get_PageSize (This, pl))
#define Recordset21_put_PageSize(This, PageSize) ((This)->lpVtbl ->put_PageSize (This, PageSize))
#define Recordset21_get_Sort(This, Criteria) ((This)->lpVtbl ->get_Sort (This, Criteria))
#define Recordset21_put_Sort(This, Criteria) ((This)->lpVtbl ->put_Sort (This, Criteria))
#define Recordset21_get_Status(This, pl) ((This)->lpVtbl ->get_Status (This, pl))
#define Recordset21_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define Recordset21__xClone(This, ppvObject) ((This)->lpVtbl ->_xClone (This, ppvObject))
#define Recordset21_UpdateBatch(This, AffectRecords) ((This)->lpVtbl ->UpdateBatch (This, AffectRecords))
#define Recordset21_CancelBatch(This, AffectRecords) ((This)->lpVtbl ->CancelBatch (This, AffectRecords))
#define Recordset21_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define Recordset21_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define Recordset21_NextRecordset(This, RecordsAffected, ppiRs) ((This)->lpVtbl ->NextRecordset (This, RecordsAffected, ppiRs))
#define Recordset21_Supports(This, CursorOptions, pb) ((This)->lpVtbl ->Supports (This, CursorOptions, pb))
#define Recordset21_get_Collect(This, Index, pvar) ((This)->lpVtbl ->get_Collect (This, Index, pvar))
#define Recordset21_put_Collect(This, Index, value) ((This)->lpVtbl ->put_Collect (This, Index, value))
#define Recordset21_get_MarshalOptions(This, peMarshal) ((This)->lpVtbl ->get_MarshalOptions (This, peMarshal))
#define Recordset21_put_MarshalOptions(This, eMarshal) ((This)->lpVtbl ->put_MarshalOptions (This, eMarshal))
#define Recordset21_Find(This, Criteria, SkipRecords, SearchDirection, Start) ((This)->lpVtbl ->Find (This, Criteria, SkipRecords, SearchDirection, Start))
#define Recordset21_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#define Recordset21_get_DataSource(This, ppunkDataSource) ((This)->lpVtbl ->get_DataSource (This, ppunkDataSource))
#define Recordset21_putref_DataSource(This, punkDataSource) ((This)->lpVtbl ->putref_DataSource (This, punkDataSource))
#define Recordset21__xSave(This, FileName, PersistFormat) ((This)->lpVtbl ->_xSave (This, FileName, PersistFormat))
#define Recordset21_get_ActiveCommand(This, ppCmd) ((This)->lpVtbl ->get_ActiveCommand (This, ppCmd))
#define Recordset21_put_StayInSync(This, bStayInSync) ((This)->lpVtbl ->put_StayInSync (This, bStayInSync))
#define Recordset21_get_StayInSync(This, pbStayInSync) ((This)->lpVtbl ->get_StayInSync (This, pbStayInSync))
#define Recordset21_GetString(This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString) ((This)->lpVtbl ->GetString (This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString))
#define Recordset21_get_DataMember(This, pbstrDataMember) ((This)->lpVtbl ->get_DataMember (This, pbstrDataMember))
#define Recordset21_put_DataMember(This, bstrDataMember) ((This)->lpVtbl ->put_DataMember (This, bstrDataMember))
#define Recordset21_CompareBookmarks(This, Bookmark1, Bookmark2, pCompare) ((This)->lpVtbl ->CompareBookmarks (This, Bookmark1, Bookmark2, pCompare))
#define Recordset21_Clone(This, LockType, ppvObject) ((This)->lpVtbl ->Clone (This, LockType, ppvObject))
#define Recordset21_Resync(This, AffectRecords, ResyncValues) ((This)->lpVtbl ->Resync (This, AffectRecords, ResyncValues))
#define Recordset21_Seek(This, KeyValues, SeekOption) ((This)->lpVtbl ->Seek (This, KeyValues, SeekOption))
#define Recordset21_put_Index(This, Index) ((This)->lpVtbl ->put_Index (This, Index))
#define Recordset21_get_Index(This, pbstrIndex) ((This)->lpVtbl ->get_Index (This, pbstrIndex))
#endif
#endif
#endif
#ifndef ___Recordset_INTERFACE_DEFINED__
#define ___Recordset_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Recordset;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001556-0000-0010-8000-00AA006D2EA4")
  _ADORecordset : public Recordset21 {
    public:
    virtual HRESULT STDMETHODCALLTYPE Save (VARIANT Destination, PersistFormatEnum PersistFormat = adPersistADTG) = 0;
  };
#else
  typedef struct _RecordsetVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADORecordset *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADORecordset *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADORecordset *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADORecordset *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADORecordset *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADORecordset *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADORecordset *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePosition) (_ADORecordset *This, PositionEnum *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePosition) (_ADORecordset *This, PositionEnum Position);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (_ADORecordset *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (_ADORecordset *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (_ADORecordset *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_BOF) (_ADORecordset *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Bookmark) (_ADORecordset *This, VARIANT *pvBookmark);
    HRESULT (STDMETHODCALLTYPE *put_Bookmark) (_ADORecordset *This, VARIANT vBookmark);
    HRESULT (STDMETHODCALLTYPE *get_CacheSize) (_ADORecordset *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_CacheSize) (_ADORecordset *This, long CacheSize);
    HRESULT (STDMETHODCALLTYPE *get_CursorType) (_ADORecordset *This, CursorTypeEnum *plCursorType);
    HRESULT (STDMETHODCALLTYPE *put_CursorType) (_ADORecordset *This, CursorTypeEnum lCursorType);
    HRESULT (STDMETHODCALLTYPE *get_EOF) (_ADORecordset *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Fields) (_ADORecordset *This, ADOFields **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_LockType) (_ADORecordset *This, LockTypeEnum *plLockType);
    HRESULT (STDMETHODCALLTYPE *put_LockType) (_ADORecordset *This, LockTypeEnum lLockType);
    HRESULT (STDMETHODCALLTYPE *get_MaxRecords) (_ADORecordset *This, long *plMaxRecords);
    HRESULT (STDMETHODCALLTYPE *put_MaxRecords) (_ADORecordset *This, long lMaxRecords);
    HRESULT (STDMETHODCALLTYPE *get_RecordCount) (_ADORecordset *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (_ADORecordset *This, IDispatch *pcmd);
    HRESULT (STDMETHODCALLTYPE *put_Source) (_ADORecordset *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *get_Source) (_ADORecordset *This, VARIANT *pvSource);
    HRESULT (STDMETHODCALLTYPE *AddNew) (_ADORecordset *This, VARIANT FieldList, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *CancelUpdate) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *Close) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *Delete) (_ADORecordset *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *GetRows) (_ADORecordset *This, long Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *Move) (_ADORecordset *This, long NumRecords, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *MoveNext) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *MovePrevious) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *MoveFirst) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *MoveLast) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *Open) (_ADORecordset *This, VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType, LockTypeEnum LockType, LONG Options);
    HRESULT (STDMETHODCALLTYPE *Requery) (_ADORecordset *This, LONG Options);
    HRESULT (STDMETHODCALLTYPE *_xResync) (_ADORecordset *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *Update) (_ADORecordset *This, VARIANT Fields, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePage) (_ADORecordset *This, PositionEnum *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePage) (_ADORecordset *This, PositionEnum Page);
    HRESULT (STDMETHODCALLTYPE *get_EditMode) (_ADORecordset *This, EditModeEnum *pl);
    HRESULT (STDMETHODCALLTYPE *get_Filter) (_ADORecordset *This, VARIANT *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Filter) (_ADORecordset *This, VARIANT Criteria);
    HRESULT (STDMETHODCALLTYPE *get_PageCount) (_ADORecordset *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_PageSize) (_ADORecordset *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_PageSize) (_ADORecordset *This, long PageSize);
    HRESULT (STDMETHODCALLTYPE *get_Sort) (_ADORecordset *This, BSTR *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Sort) (_ADORecordset *This, BSTR Criteria);
    HRESULT (STDMETHODCALLTYPE *get_Status) (_ADORecordset *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_State) (_ADORecordset *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *_xClone) (_ADORecordset *This, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *UpdateBatch) (_ADORecordset *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *CancelBatch) (_ADORecordset *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (_ADORecordset *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (_ADORecordset *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *NextADORecordset) (_ADORecordset *This, VARIANT *RecordsAffected, _ADORecordset **ppiRs);
    HRESULT (STDMETHODCALLTYPE *Supports) (_ADORecordset *This, CursorOptionEnum CursorOptions, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Collect) (_ADORecordset *This, VARIANT Index, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Collect) (_ADORecordset *This, VARIANT Index, VARIANT value);
    HRESULT (STDMETHODCALLTYPE *get_MarshalOptions) (_ADORecordset *This, MarshalOptionsEnum *peMarshal);
    HRESULT (STDMETHODCALLTYPE *put_MarshalOptions) (_ADORecordset *This, MarshalOptionsEnum eMarshal);
    HRESULT (STDMETHODCALLTYPE *Find) (_ADORecordset *This, BSTR Criteria, long SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *Cancel) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *get_DataSource) (_ADORecordset *This, IUnknown **ppunkDataSource);
    HRESULT (STDMETHODCALLTYPE *putref_DataSource) (_ADORecordset *This, IUnknown *punkDataSource);
    HRESULT (STDMETHODCALLTYPE *_xSave) (_ADORecordset *This, BSTR FileName, PersistFormatEnum PersistFormat);
    HRESULT (STDMETHODCALLTYPE *get_ActiveCommand) (_ADORecordset *This, IDispatch **ppCmd);
    HRESULT (STDMETHODCALLTYPE *put_StayInSync) (_ADORecordset *This, VARIANT_BOOL bStayInSync);
    HRESULT (STDMETHODCALLTYPE *get_StayInSync) (_ADORecordset *This, VARIANT_BOOL *pbStayInSync);
    HRESULT (STDMETHODCALLTYPE *GetString) (_ADORecordset *This, StringFormatEnum StringFormat, long NumRows, BSTR ColumnDelimeter, BSTR RowDelimeter, BSTR NullExpr, BSTR *pRetString);
    HRESULT (STDMETHODCALLTYPE *get_DataMember) (_ADORecordset *This, BSTR *pbstrDataMember);
    HRESULT (STDMETHODCALLTYPE *put_DataMember) (_ADORecordset *This, BSTR bstrDataMember);
    HRESULT (STDMETHODCALLTYPE *CompareBookmarks) (_ADORecordset *This, VARIANT Bookmark1, VARIANT Bookmark2, CompareEnum *pCompare);
    HRESULT (STDMETHODCALLTYPE *Clone) (_ADORecordset *This, LockTypeEnum LockType, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Resync) (_ADORecordset *This, AffectEnum AffectRecords, ResyncEnum ResyncValues);
    HRESULT (STDMETHODCALLTYPE *Seek) (_ADORecordset *This, VARIANT KeyValues, SeekEnum SeekOption);
    HRESULT (STDMETHODCALLTYPE *put_Index) (_ADORecordset *This, BSTR Index);
    HRESULT (STDMETHODCALLTYPE *get_Index) (_ADORecordset *This, BSTR *pbstrIndex);
    HRESULT (STDMETHODCALLTYPE *Save) (_ADORecordset *This, VARIANT Destination, PersistFormatEnum PersistFormat);
    END_INTERFACE
  } _RecordsetVtbl;
  interface _Recordset {
    CONST_VTBL struct _RecordsetVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Recordset_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Recordset_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Recordset_Release(This) ((This)->lpVtbl ->Release (This))
#define _Recordset_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Recordset_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Recordset_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Recordset_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Recordset_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Recordset_get_AbsolutePosition(This, pl) ((This)->lpVtbl ->get_AbsolutePosition (This, pl))
#define _Recordset_put_AbsolutePosition(This, Position) ((This)->lpVtbl ->put_AbsolutePosition (This, Position))
#define _Recordset_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define _Recordset_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define _Recordset_get_ActiveConnection(This, pvar) ((This)->lpVtbl ->get_ActiveConnection (This, pvar))
#define _Recordset_get_BOF(This, pb) ((This)->lpVtbl ->get_BOF (This, pb))
#define _Recordset_get_Bookmark(This, pvBookmark) ((This)->lpVtbl ->get_Bookmark (This, pvBookmark))
#define _Recordset_put_Bookmark(This, vBookmark) ((This)->lpVtbl ->put_Bookmark (This, vBookmark))
#define _Recordset_get_CacheSize(This, pl) ((This)->lpVtbl ->get_CacheSize (This, pl))
#define _Recordset_put_CacheSize(This, CacheSize) ((This)->lpVtbl ->put_CacheSize (This, CacheSize))
#define _Recordset_get_CursorType(This, plCursorType) ((This)->lpVtbl ->get_CursorType (This, plCursorType))
#define _Recordset_put_CursorType(This, lCursorType) ((This)->lpVtbl ->put_CursorType (This, lCursorType))
#define _Recordset_get_EOF(This, pb) ((This)->lpVtbl ->get_EOF (This, pb))
#define _Recordset_get_Fields(This, ppvObject) ((This)->lpVtbl ->get_Fields (This, ppvObject))
#define _Recordset_get_LockType(This, plLockType) ((This)->lpVtbl ->get_LockType (This, plLockType))
#define _Recordset_put_LockType(This, lLockType) ((This)->lpVtbl ->put_LockType (This, lLockType))
#define _Recordset_get_MaxRecords(This, plMaxRecords) ((This)->lpVtbl ->get_MaxRecords (This, plMaxRecords))
#define _Recordset_put_MaxRecords(This, lMaxRecords) ((This)->lpVtbl ->put_MaxRecords (This, lMaxRecords))
#define _Recordset_get_RecordCount(This, pl) ((This)->lpVtbl ->get_RecordCount (This, pl))
#define _Recordset_putref_Source(This, pcmd) ((This)->lpVtbl ->putref_Source (This, pcmd))
#define _Recordset_put_Source(This, bstrConn) ((This)->lpVtbl ->put_Source (This, bstrConn))
#define _Recordset_get_Source(This, pvSource) ((This)->lpVtbl ->get_Source (This, pvSource))
#define _Recordset_AddNew(This, FieldList, Values) ((This)->lpVtbl ->AddNew (This, FieldList, Values))
#define _Recordset_CancelUpdate(This) ((This)->lpVtbl ->CancelUpdate (This))
#define _Recordset_Close(This) ((This)->lpVtbl ->Close (This))
#define _Recordset_Delete(This, AffectRecords) ((This)->lpVtbl ->Delete (This, AffectRecords))
#define _Recordset_GetRows(This, Rows, Start, Fields, pvar) ((This)->lpVtbl ->GetRows (This, Rows, Start, Fields, pvar))
#define _Recordset_Move(This, NumRecords, Start) ((This)->lpVtbl ->Move (This, NumRecords, Start))
#define _Recordset_MoveNext(This) ((This)->lpVtbl ->MoveNext (This))
#define _Recordset_MovePrevious(This) ((This)->lpVtbl ->MovePrevious (This))
#define _Recordset_MoveFirst(This) ((This)->lpVtbl ->MoveFirst (This))
#define _Recordset_MoveLast(This) ((This)->lpVtbl ->MoveLast (This))
#define _Recordset_Open(This, Source, ActiveConnection, CursorType, LockType, Options) ((This)->lpVtbl ->Open (This, Source, ActiveConnection, CursorType, LockType, Options))
#define _Recordset_Requery(This, Options) ((This)->lpVtbl ->Requery (This, Options))
#define _Recordset__xResync(This, AffectRecords) ((This)->lpVtbl ->_xResync (This, AffectRecords))
#define _Recordset_Update(This, Fields, Values) ((This)->lpVtbl ->Update (This, Fields, Values))
#define _Recordset_get_AbsolutePage(This, pl) ((This)->lpVtbl ->get_AbsolutePage (This, pl))
#define _Recordset_put_AbsolutePage(This, Page) ((This)->lpVtbl ->put_AbsolutePage (This, Page))
#define _Recordset_get_EditMode(This, pl) ((This)->lpVtbl ->get_EditMode (This, pl))
#define _Recordset_get_Filter(This, Criteria) ((This)->lpVtbl ->get_Filter (This, Criteria))
#define _Recordset_put_Filter(This, Criteria) ((This)->lpVtbl ->put_Filter (This, Criteria))
#define _Recordset_get_PageCount(This, pl) ((This)->lpVtbl ->get_PageCount (This, pl))
#define _Recordset_get_PageSize(This, pl) ((This)->lpVtbl ->get_PageSize (This, pl))
#define _Recordset_put_PageSize(This, PageSize) ((This)->lpVtbl ->put_PageSize (This, PageSize))
#define _Recordset_get_Sort(This, Criteria) ((This)->lpVtbl ->get_Sort (This, Criteria))
#define _Recordset_put_Sort(This, Criteria) ((This)->lpVtbl ->put_Sort (This, Criteria))
#define _Recordset_get_Status(This, pl) ((This)->lpVtbl ->get_Status (This, pl))
#define _Recordset_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define _Recordset__xClone(This, ppvObject) ((This)->lpVtbl ->_xClone (This, ppvObject))
#define _Recordset_UpdateBatch(This, AffectRecords) ((This)->lpVtbl ->UpdateBatch (This, AffectRecords))
#define _Recordset_CancelBatch(This, AffectRecords) ((This)->lpVtbl ->CancelBatch (This, AffectRecords))
#define _Recordset_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define _Recordset_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define _Recordset_NextRecordset(This, RecordsAffected, ppiRs) ((This)->lpVtbl ->NextRecordset (This, RecordsAffected, ppiRs))
#define _Recordset_Supports(This, CursorOptions, pb) ((This)->lpVtbl ->Supports (This, CursorOptions, pb))
#define _Recordset_get_Collect(This, Index, pvar) ((This)->lpVtbl ->get_Collect (This, Index, pvar))
#define _Recordset_put_Collect(This, Index, value) ((This)->lpVtbl ->put_Collect (This, Index, value))
#define _Recordset_get_MarshalOptions(This, peMarshal) ((This)->lpVtbl ->get_MarshalOptions (This, peMarshal))
#define _Recordset_put_MarshalOptions(This, eMarshal) ((This)->lpVtbl ->put_MarshalOptions (This, eMarshal))
#define _Recordset_Find(This, Criteria, SkipRecords, SearchDirection, Start) ((This)->lpVtbl ->Find (This, Criteria, SkipRecords, SearchDirection, Start))
#define _Recordset_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#define _Recordset_get_DataSource(This, ppunkDataSource) ((This)->lpVtbl ->get_DataSource (This, ppunkDataSource))
#define _Recordset_putref_DataSource(This, punkDataSource) ((This)->lpVtbl ->putref_DataSource (This, punkDataSource))
#define _Recordset__xSave(This, FileName, PersistFormat) ((This)->lpVtbl ->_xSave (This, FileName, PersistFormat))
#define _Recordset_get_ActiveCommand(This, ppCmd) ((This)->lpVtbl ->get_ActiveCommand (This, ppCmd))
#define _Recordset_put_StayInSync(This, bStayInSync) ((This)->lpVtbl ->put_StayInSync (This, bStayInSync))
#define _Recordset_get_StayInSync(This, pbStayInSync) ((This)->lpVtbl ->get_StayInSync (This, pbStayInSync))
#define _Recordset_GetString(This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString) ((This)->lpVtbl ->GetString (This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString))
#define _Recordset_get_DataMember(This, pbstrDataMember) ((This)->lpVtbl ->get_DataMember (This, pbstrDataMember))
#define _Recordset_put_DataMember(This, bstrDataMember) ((This)->lpVtbl ->put_DataMember (This, bstrDataMember))
#define _Recordset_CompareBookmarks(This, Bookmark1, Bookmark2, pCompare) ((This)->lpVtbl ->CompareBookmarks (This, Bookmark1, Bookmark2, pCompare))
#define _Recordset_Clone(This, LockType, ppvObject) ((This)->lpVtbl ->Clone (This, LockType, ppvObject))
#define _Recordset_Resync(This, AffectRecords, ResyncValues) ((This)->lpVtbl ->Resync (This, AffectRecords, ResyncValues))
#define _Recordset_Seek(This, KeyValues, SeekOption) ((This)->lpVtbl ->Seek (This, KeyValues, SeekOption))
#define _Recordset_put_Index(This, Index) ((This)->lpVtbl ->put_Index (This, Index))
#define _Recordset_get_Index(This, pbstrIndex) ((This)->lpVtbl ->get_Index (This, pbstrIndex))
#define _Recordset_Save(This, Destination, PersistFormat) ((This)->lpVtbl ->Save (This, Destination, PersistFormat))
#endif
#endif
#endif
#ifndef __ADORecordsetConstruction_INTERFACE_DEFINED__
#define __ADORecordsetConstruction_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADORecordsetConstruction;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000283-0000-0010-8000-00AA006D2EA4")
  ADORecordsetConstruction : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Rowset (IUnknown **ppRowset) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Rowset (IUnknown *pRowset) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Chapter (ADO_LONGPTR *plChapter) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Chapter (ADO_LONGPTR lChapter) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_RowPosition (IUnknown **ppRowPos) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_RowPosition (IUnknown *pRowPos) = 0;
  };
#else
  typedef struct ADORecordsetConstructionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADORecordsetConstruction *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADORecordsetConstruction *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADORecordsetConstruction *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADORecordsetConstruction *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADORecordsetConstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADORecordsetConstruction *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADORecordsetConstruction *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Rowset) (ADORecordsetConstruction *This, IUnknown **ppRowset);
    HRESULT (STDMETHODCALLTYPE *put_Rowset) (ADORecordsetConstruction *This, IUnknown *pRowset);
    HRESULT (STDMETHODCALLTYPE *get_Chapter) (ADORecordsetConstruction *This, ADO_LONGPTR *plChapter);
    HRESULT (STDMETHODCALLTYPE *put_Chapter) (ADORecordsetConstruction *This, ADO_LONGPTR lChapter);
    HRESULT (STDMETHODCALLTYPE *get_RowPosition) (ADORecordsetConstruction *This, IUnknown **ppRowPos);
    HRESULT (STDMETHODCALLTYPE *put_RowPosition) (ADORecordsetConstruction *This, IUnknown *pRowPos);
    END_INTERFACE
  } ADORecordsetConstructionVtbl;
  interface ADORecordsetConstruction {
    CONST_VTBL struct ADORecordsetConstructionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADORecordsetConstruction_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADORecordsetConstruction_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADORecordsetConstruction_Release(This) ((This)->lpVtbl ->Release (This))
#define ADORecordsetConstruction_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define ADORecordsetConstruction_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define ADORecordsetConstruction_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define ADORecordsetConstruction_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define ADORecordsetConstruction_get_Rowset(This, ppRowset) ((This)->lpVtbl ->get_Rowset (This, ppRowset))
#define ADORecordsetConstruction_put_Rowset(This, pRowset) ((This)->lpVtbl ->put_Rowset (This, pRowset))
#define ADORecordsetConstruction_get_Chapter(This, plChapter) ((This)->lpVtbl ->get_Chapter (This, plChapter))
#define ADORecordsetConstruction_put_Chapter(This, lChapter) ((This)->lpVtbl ->put_Chapter (This, lChapter))
#define ADORecordsetConstruction_get_RowPosition(This, ppRowPos) ((This)->lpVtbl ->get_RowPosition (This, ppRowPos))
#define ADORecordsetConstruction_put_RowPosition(This, pRowPos) ((This)->lpVtbl ->put_RowPosition (This, pRowPos))
#endif
#endif
#endif
#ifndef __Field15_INTERFACE_DEFINED__
#define __Field15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Field15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001505-0000-0010-8000-00AA006D2EA4")
  Field15 : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_ActualSize (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DefinedSize (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (DataTypeEnum *pDataType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Value (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Value (VARIANT Val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Precision (BYTE *pbPrecision) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_NumericScale (BYTE *pbNumericScale) = 0;
    virtual HRESULT STDMETHODCALLTYPE AppendChunk (VARIANT Data) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetChunk (long Length, VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_OriginalValue (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_UnderlyingValue (VARIANT *pvar) = 0;
  };
#else
  typedef struct Field15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Field15 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Field15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Field15 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Field15 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Field15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Field15 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Field15 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Field15 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActualSize) (Field15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (Field15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_DefinedSize) (Field15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Field15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Type) (Field15 *This, DataTypeEnum *pDataType);
    HRESULT (STDMETHODCALLTYPE *get_Value) (Field15 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Value) (Field15 *This, VARIANT Val);
    HRESULT (STDMETHODCALLTYPE *get_Precision) (Field15 *This, BYTE *pbPrecision);
    HRESULT (STDMETHODCALLTYPE *get_NumericScale) (Field15 *This, BYTE *pbNumericScale);
    HRESULT (STDMETHODCALLTYPE *AppendChunk) (Field15 *This, VARIANT Data);
    HRESULT (STDMETHODCALLTYPE *GetChunk) (Field15 *This, long Length, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_OriginalValue) (Field15 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_UnderlyingValue) (Field15 *This, VARIANT *pvar);
    END_INTERFACE
  } Field15Vtbl;
  interface Field15 {
    CONST_VTBL struct Field15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Field15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Field15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Field15_Release(This) ((This)->lpVtbl ->Release (This))
#define Field15_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Field15_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Field15_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Field15_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Field15_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Field15_get_ActualSize(This, pl) ((This)->lpVtbl ->get_ActualSize (This, pl))
#define Field15_get_Attributes(This, pl) ((This)->lpVtbl ->get_Attributes (This, pl))
#define Field15_get_DefinedSize(This, pl) ((This)->lpVtbl ->get_DefinedSize (This, pl))
#define Field15_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Field15_get_Type(This, pDataType) ((This)->lpVtbl ->get_Type (This, pDataType))
#define Field15_get_Value(This, pvar) ((This)->lpVtbl ->get_Value (This, pvar))
#define Field15_put_Value(This, Val) ((This)->lpVtbl ->put_Value (This, Val))
#define Field15_get_Precision(This, pbPrecision) ((This)->lpVtbl ->get_Precision (This, pbPrecision))
#define Field15_get_NumericScale(This, pbNumericScale) ((This)->lpVtbl ->get_NumericScale (This, pbNumericScale))
#define Field15_AppendChunk(This, Data) ((This)->lpVtbl ->AppendChunk (This, Data))
#define Field15_GetChunk(This, Length, pvar) ((This)->lpVtbl ->GetChunk (This, Length, pvar))
#define Field15_get_OriginalValue(This, pvar) ((This)->lpVtbl ->get_OriginalValue (This, pvar))
#define Field15_get_UnderlyingValue(This, pvar) ((This)->lpVtbl ->get_UnderlyingValue (This, pvar))
#endif
#endif
#endif
#ifndef __Field20_INTERFACE_DEFINED__
#define __Field20_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Field20;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000154C-0000-0010-8000-00AA006D2EA4")
  Field20 : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_ActualSize (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DefinedSize (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (DataTypeEnum *pDataType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Value (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Value (VARIANT Val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Precision (BYTE *pbPrecision) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_NumericScale (BYTE *pbNumericScale) = 0;
    virtual HRESULT STDMETHODCALLTYPE AppendChunk (VARIANT Data) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetChunk (long Length, VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_OriginalValue (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_UnderlyingValue (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DataFormat (IUnknown **ppiDF) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_DataFormat (IUnknown *piDF) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Precision (BYTE bPrecision) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_NumericScale (BYTE bScale) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Type (DataTypeEnum DataType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_DefinedSize (long lSize) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Attributes (long lAttributes) = 0;
  };
#else
  typedef struct Field20Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Field20 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Field20 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Field20 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Field20 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Field20 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Field20 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Field20 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Field20 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActualSize) (Field20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (Field20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_DefinedSize) (Field20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Field20 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Type) (Field20 *This, DataTypeEnum *pDataType);
    HRESULT (STDMETHODCALLTYPE *get_Value) (Field20 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Value) (Field20 *This, VARIANT Val);
    HRESULT (STDMETHODCALLTYPE *get_Precision) (Field20 *This, BYTE *pbPrecision);
    HRESULT (STDMETHODCALLTYPE *get_NumericScale) (Field20 *This, BYTE *pbNumericScale);
    HRESULT (STDMETHODCALLTYPE *AppendChunk) (Field20 *This, VARIANT Data);
    HRESULT (STDMETHODCALLTYPE *GetChunk) (Field20 *This, long Length, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_OriginalValue) (Field20 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_UnderlyingValue) (Field20 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_DataFormat) (Field20 *This, IUnknown **ppiDF);
    HRESULT (STDMETHODCALLTYPE *putref_DataFormat) (Field20 *This, IUnknown *piDF);
    HRESULT (STDMETHODCALLTYPE *put_Precision) (Field20 *This, BYTE bPrecision);
    HRESULT (STDMETHODCALLTYPE *put_NumericScale) (Field20 *This, BYTE bScale);
    HRESULT (STDMETHODCALLTYPE *put_Type) (Field20 *This, DataTypeEnum DataType);
    HRESULT (STDMETHODCALLTYPE *put_DefinedSize) (Field20 *This, long lSize);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (Field20 *This, long lAttributes);
    END_INTERFACE
  } Field20Vtbl;
  interface Field20 {
    CONST_VTBL struct Field20Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Field20_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Field20_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Field20_Release(This) ((This)->lpVtbl ->Release (This))
#define Field20_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Field20_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Field20_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Field20_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Field20_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Field20_get_ActualSize(This, pl) ((This)->lpVtbl ->get_ActualSize (This, pl))
#define Field20_get_Attributes(This, pl) ((This)->lpVtbl ->get_Attributes (This, pl))
#define Field20_get_DefinedSize(This, pl) ((This)->lpVtbl ->get_DefinedSize (This, pl))
#define Field20_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Field20_get_Type(This, pDataType) ((This)->lpVtbl ->get_Type (This, pDataType))
#define Field20_get_Value(This, pvar) ((This)->lpVtbl ->get_Value (This, pvar))
#define Field20_put_Value(This, Val) ((This)->lpVtbl ->put_Value (This, Val))
#define Field20_get_Precision(This, pbPrecision) ((This)->lpVtbl ->get_Precision (This, pbPrecision))
#define Field20_get_NumericScale(This, pbNumericScale) ((This)->lpVtbl ->get_NumericScale (This, pbNumericScale))
#define Field20_AppendChunk(This, Data) ((This)->lpVtbl ->AppendChunk (This, Data))
#define Field20_GetChunk(This, Length, pvar) ((This)->lpVtbl ->GetChunk (This, Length, pvar))
#define Field20_get_OriginalValue(This, pvar) ((This)->lpVtbl ->get_OriginalValue (This, pvar))
#define Field20_get_UnderlyingValue(This, pvar) ((This)->lpVtbl ->get_UnderlyingValue (This, pvar))
#define Field20_get_DataFormat(This, ppiDF) ((This)->lpVtbl ->get_DataFormat (This, ppiDF))
#define Field20_putref_DataFormat(This, piDF) ((This)->lpVtbl ->putref_DataFormat (This, piDF))
#define Field20_put_Precision(This, bPrecision) ((This)->lpVtbl ->put_Precision (This, bPrecision))
#define Field20_put_NumericScale(This, bScale) ((This)->lpVtbl ->put_NumericScale (This, bScale))
#define Field20_put_Type(This, DataType) ((This)->lpVtbl ->put_Type (This, DataType))
#define Field20_put_DefinedSize(This, lSize) ((This)->lpVtbl ->put_DefinedSize (This, lSize))
#define Field20_put_Attributes(This, lAttributes) ((This)->lpVtbl ->put_Attributes (This, lAttributes))
#endif
#endif
#endif
#ifndef __Field_INTERFACE_DEFINED__
#define __Field_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Field;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001569-0000-0010-8000-00AA006D2EA4")
  ADOField : public Field20 {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Status (long *pFStatus) = 0;
  };
#else
  typedef struct FieldVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOField *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOField *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOField *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOField *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOField *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOField *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOField *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (ADOField *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActualSize) (ADOField *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (ADOField *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_DefinedSize) (ADOField *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_Name) (ADOField *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Type) (ADOField *This, DataTypeEnum *pDataType);
    HRESULT (STDMETHODCALLTYPE *get_Value) (ADOField *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Value) (ADOField *This, VARIANT Val);
    HRESULT (STDMETHODCALLTYPE *get_Precision) (ADOField *This, BYTE *pbPrecision);
    HRESULT (STDMETHODCALLTYPE *get_NumericScale) (ADOField *This, BYTE *pbNumericScale);
    HRESULT (STDMETHODCALLTYPE *AppendChunk) (ADOField *This, VARIANT Data);
    HRESULT (STDMETHODCALLTYPE *GetChunk) (ADOField *This, long Length, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_OriginalValue) (ADOField *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_UnderlyingValue) (ADOField *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_DataFormat) (ADOField *This, IUnknown **ppiDF);
    HRESULT (STDMETHODCALLTYPE *putref_DataFormat) (ADOField *This, IUnknown *piDF);
    HRESULT (STDMETHODCALLTYPE *put_Precision) (ADOField *This, BYTE bPrecision);
    HRESULT (STDMETHODCALLTYPE *put_NumericScale) (ADOField *This, BYTE bScale);
    HRESULT (STDMETHODCALLTYPE *put_Type) (ADOField *This, DataTypeEnum DataType);
    HRESULT (STDMETHODCALLTYPE *put_DefinedSize) (ADOField *This, long lSize);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (ADOField *This, long lAttributes);
    HRESULT (STDMETHODCALLTYPE *get_Status) (ADOField *This, long *pFStatus);
    END_INTERFACE
  } FieldVtbl;
  interface Field {
    CONST_VTBL struct FieldVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Field_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Field_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Field_Release(This) ((This)->lpVtbl ->Release (This))
#define Field_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Field_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Field_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Field_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Field_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Field_get_ActualSize(This, pl) ((This)->lpVtbl ->get_ActualSize (This, pl))
#define Field_get_Attributes(This, pl) ((This)->lpVtbl ->get_Attributes (This, pl))
#define Field_get_DefinedSize(This, pl) ((This)->lpVtbl ->get_DefinedSize (This, pl))
#define Field_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Field_get_Type(This, pDataType) ((This)->lpVtbl ->get_Type (This, pDataType))
#define Field_get_Value(This, pvar) ((This)->lpVtbl ->get_Value (This, pvar))
#define Field_put_Value(This, Val) ((This)->lpVtbl ->put_Value (This, Val))
#define Field_get_Precision(This, pbPrecision) ((This)->lpVtbl ->get_Precision (This, pbPrecision))
#define Field_get_NumericScale(This, pbNumericScale) ((This)->lpVtbl ->get_NumericScale (This, pbNumericScale))
#define Field_AppendChunk(This, Data) ((This)->lpVtbl ->AppendChunk (This, Data))
#define Field_GetChunk(This, Length, pvar) ((This)->lpVtbl ->GetChunk (This, Length, pvar))
#define Field_get_OriginalValue(This, pvar) ((This)->lpVtbl ->get_OriginalValue (This, pvar))
#define Field_get_UnderlyingValue(This, pvar) ((This)->lpVtbl ->get_UnderlyingValue (This, pvar))
#define Field_get_DataFormat(This, ppiDF) ((This)->lpVtbl ->get_DataFormat (This, ppiDF))
#define Field_putref_DataFormat(This, piDF) ((This)->lpVtbl ->putref_DataFormat (This, piDF))
#define Field_put_Precision(This, bPrecision) ((This)->lpVtbl ->put_Precision (This, bPrecision))
#define Field_put_NumericScale(This, bScale) ((This)->lpVtbl ->put_NumericScale (This, bScale))
#define Field_put_Type(This, DataType) ((This)->lpVtbl ->put_Type (This, DataType))
#define Field_put_DefinedSize(This, lSize) ((This)->lpVtbl ->put_DefinedSize (This, lSize))
#define Field_put_Attributes(This, lAttributes) ((This)->lpVtbl ->put_Attributes (This, lAttributes))
#define Field_get_Status(This, pFStatus) ((This)->lpVtbl ->get_Status (This, pFStatus))
#endif
#endif
#endif
#ifndef __Fields15_INTERFACE_DEFINED__
#define __Fields15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Fields15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001506-0000-0010-8000-00AA006D2EA4")
  Fields15 : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, ADOField **ppvObject) = 0;
  };
#else
  typedef struct Fields15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Fields15 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Fields15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Fields15 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Fields15 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Fields15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Fields15 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Fields15 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Fields15 *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Fields15 *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Fields15 *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Fields15 *This, VARIANT Index, ADOField **ppvObject);
    END_INTERFACE
  } Fields15Vtbl;
  interface Fields15 {
    CONST_VTBL struct Fields15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Fields15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Fields15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Fields15_Release(This) ((This)->lpVtbl ->Release (This))
#define Fields15_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Fields15_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Fields15_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Fields15_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Fields15_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Fields15__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Fields15_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Fields15_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif
#endif
#endif
#ifndef __Fields20_INTERFACE_DEFINED__
#define __Fields20_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Fields20;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000154D-0000-0010-8000-00AA006D2EA4")
  Fields20 : public Fields15 {
    public:
    virtual HRESULT STDMETHODCALLTYPE _Append (BSTR Name, DataTypeEnum Type, long DefinedSize = 0, FieldAttributeEnum Attrib = adFldUnspecified) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Index) = 0;
  };
#else
  typedef struct Fields20Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Fields20 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Fields20 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Fields20 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Fields20 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Fields20 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Fields20 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Fields20 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Fields20 *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Fields20 *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Fields20 *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Fields20 *This, VARIANT Index, ADOField **ppvObject);
    HRESULT (STDMETHODCALLTYPE *_Append) (Fields20 *This, BSTR Name, DataTypeEnum Type, long DefinedSize, FieldAttributeEnum Attrib);
    HRESULT (STDMETHODCALLTYPE *Delete) (Fields20 *This, VARIANT Index);
    END_INTERFACE
  } Fields20Vtbl;
  interface Fields20 {
    CONST_VTBL struct Fields20Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Fields20_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Fields20_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Fields20_Release(This) ((This)->lpVtbl ->Release (This))
#define Fields20_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Fields20_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Fields20_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Fields20_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Fields20_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Fields20__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Fields20_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Fields20_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#define Fields20__Append(This, Name, Type, DefinedSize, Attrib) ((This)->lpVtbl ->_Append (This, Name, Type, DefinedSize, Attrib))
#define Fields20_Delete(This, Index) ((This)->lpVtbl ->Delete (This, Index))
#endif
#endif
#endif
#ifndef __Fields_INTERFACE_DEFINED__
#define __Fields_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Fields;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00001564-0000-0010-8000-00AA006D2EA4")
  ADOFields : public Fields20 {
    public:
    virtual HRESULT STDMETHODCALLTYPE Append (BSTR Name, DataTypeEnum Type, long DefinedSize, FieldAttributeEnum Attrib, VARIANT FieldValue) = 0;
    virtual HRESULT STDMETHODCALLTYPE Update (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Resync (ResyncEnum ResyncValues = adResyncAllValues) = 0;
    virtual HRESULT STDMETHODCALLTYPE CancelUpdate (void) = 0;
  };
#else
  typedef struct FieldsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOFields *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOFields *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOFields *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOFields *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOFields *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOFields *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOFields *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOFields *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOFields *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOFields *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOFields *This, VARIANT Index, ADOField **ppvObject);
    HRESULT (STDMETHODCALLTYPE *_Append) (ADOFields *This, BSTR Name, DataTypeEnum Type, long DefinedSize, FieldAttributeEnum Attrib);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOFields *This, VARIANT Index);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOFields *This, BSTR Name, DataTypeEnum Type, long DefinedSize, FieldAttributeEnum Attrib, VARIANT FieldValue);
    HRESULT (STDMETHODCALLTYPE *Update) (ADOFields *This);
    HRESULT (STDMETHODCALLTYPE *Resync) (ADOFields *This, ResyncEnum ResyncValues);
    HRESULT (STDMETHODCALLTYPE *CancelUpdate) (ADOFields *This);
    END_INTERFACE
  } FieldsVtbl;
  interface Fields {
    CONST_VTBL struct FieldsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Fields_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Fields_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Fields_Release(This) ((This)->lpVtbl ->Release (This))
#define Fields_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Fields_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Fields_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Fields_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Fields_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Fields__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Fields_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Fields_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#define Fields__Append(This, Name, Type, DefinedSize, Attrib) ((This)->lpVtbl ->_Append (This, Name, Type, DefinedSize, Attrib))
#define Fields_Delete(This, Index) ((This)->lpVtbl ->Delete (This, Index))
#define Fields_Append(This, Name, Type, DefinedSize, Attrib, FieldValue) ((This)->lpVtbl ->Append (This, Name, Type, DefinedSize, Attrib, FieldValue))
#define Fields_Update(This) ((This)->lpVtbl ->Update (This))
#define Fields_Resync(This, ResyncValues) ((This)->lpVtbl ->Resync (This, ResyncValues))
#define Fields_CancelUpdate(This) ((This)->lpVtbl ->CancelUpdate (This))
#endif
#endif
#endif
#ifndef ___Parameter_INTERFACE_DEFINED__
#define ___Parameter_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Parameter;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000150C-0000-0010-8000-00AA006D2EA4")
  _ADOParameter : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Name (BSTR bstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Value (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Value (VARIANT val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (DataTypeEnum *psDataType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Type (DataTypeEnum sDataType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Direction (ParameterDirectionEnum lParmDirection) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Direction (ParameterDirectionEnum *plParmDirection) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Precision (BYTE bPrecision) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Precision (BYTE *pbPrecision) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_NumericScale (BYTE bScale) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_NumericScale (BYTE *pbScale) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Size (long l) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Size (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE AppendChunk (VARIANT Val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (LONG *plParmAttribs) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Attributes (LONG lParmAttribs) = 0;
  };
#else
  typedef struct _ParameterVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOParameter *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOParameter *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOParameter *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOParameter *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOParameter *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOParameter *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOParameter *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOParameter *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_ADOParameter *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_ADOParameter *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_Value) (_ADOParameter *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Value) (_ADOParameter *This, VARIANT val);
    HRESULT (STDMETHODCALLTYPE *get_Type) (_ADOParameter *This, DataTypeEnum *psDataType);
    HRESULT (STDMETHODCALLTYPE *put_Type) (_ADOParameter *This, DataTypeEnum sDataType);
    HRESULT (STDMETHODCALLTYPE *put_Direction) (_ADOParameter *This, ParameterDirectionEnum lParmDirection);
    HRESULT (STDMETHODCALLTYPE *get_Direction) (_ADOParameter *This, ParameterDirectionEnum *plParmDirection);
    HRESULT (STDMETHODCALLTYPE *put_Precision) (_ADOParameter *This, BYTE bPrecision);
    HRESULT (STDMETHODCALLTYPE *get_Precision) (_ADOParameter *This, BYTE *pbPrecision);
    HRESULT (STDMETHODCALLTYPE *put_NumericScale) (_ADOParameter *This, BYTE bScale);
    HRESULT (STDMETHODCALLTYPE *get_NumericScale) (_ADOParameter *This, BYTE *pbScale);
    HRESULT (STDMETHODCALLTYPE *put_Size) (_ADOParameter *This, long l);
    HRESULT (STDMETHODCALLTYPE *get_Size) (_ADOParameter *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *AppendChunk) (_ADOParameter *This, VARIANT Val);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (_ADOParameter *This, LONG *plParmAttribs);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (_ADOParameter *This, LONG lParmAttribs);
    END_INTERFACE
  } _ParameterVtbl;
  interface _Parameter {
    CONST_VTBL struct _ParameterVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Parameter_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Parameter_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Parameter_Release(This) ((This)->lpVtbl ->Release (This))
#define _Parameter_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Parameter_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Parameter_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Parameter_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Parameter_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Parameter_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define _Parameter_put_Name(This, bstr) ((This)->lpVtbl ->put_Name (This, bstr))
#define _Parameter_get_Value(This, pvar) ((This)->lpVtbl ->get_Value (This, pvar))
#define _Parameter_put_Value(This, val) ((This)->lpVtbl ->put_Value (This, val))
#define _Parameter_get_Type(This, psDataType) ((This)->lpVtbl ->get_Type (This, psDataType))
#define _Parameter_put_Type(This, sDataType) ((This)->lpVtbl ->put_Type (This, sDataType))
#define _Parameter_put_Direction(This, lParmDirection) ((This)->lpVtbl ->put_Direction (This, lParmDirection))
#define _Parameter_get_Direction(This, plParmDirection) ((This)->lpVtbl ->get_Direction (This, plParmDirection))
#define _Parameter_put_Precision(This, bPrecision) ((This)->lpVtbl ->put_Precision (This, bPrecision))
#define _Parameter_get_Precision(This, pbPrecision) ((This)->lpVtbl ->get_Precision (This, pbPrecision))
#define _Parameter_put_NumericScale(This, bScale) ((This)->lpVtbl ->put_NumericScale (This, bScale))
#define _Parameter_get_NumericScale(This, pbScale) ((This)->lpVtbl ->get_NumericScale (This, pbScale))
#define _Parameter_put_Size(This, l) ((This)->lpVtbl ->put_Size (This, l))
#define _Parameter_get_Size(This, pl) ((This)->lpVtbl ->get_Size (This, pl))
#define _Parameter_AppendChunk(This, Val) ((This)->lpVtbl ->AppendChunk (This, Val))
#define _Parameter_get_Attributes(This, plParmAttribs) ((This)->lpVtbl ->get_Attributes (This, plParmAttribs))
#define _Parameter_put_Attributes(This, lParmAttribs) ((This)->lpVtbl ->put_Attributes (This, lParmAttribs))
#endif
#endif
#endif
  EXTERN_C const CLSID CLSID_Parameter;
#ifdef __cplusplus
  Parameter;
#endif
#ifndef __Parameters_INTERFACE_DEFINED__
#define __Parameters_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Parameters;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000150D-0000-0010-8000-00AA006D2EA4")
  ADOParameters : public _ADODynaCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, _ADOParameter **ppvObject) = 0;
  };
#else
  typedef struct ParametersVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOParameters *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOParameters *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOParameters *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOParameters *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOParameters *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOParameters *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOParameters *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOParameters *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOParameters *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOParameters *This);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOParameters *This, IDispatch *Object);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOParameters *This, VARIANT Index);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOParameters *This, VARIANT Index, _ADOParameter **ppvObject);
    END_INTERFACE
  } ParametersVtbl;
  interface Parameters {
    CONST_VTBL struct ParametersVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Parameters_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Parameters_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Parameters_Release(This) ((This)->lpVtbl ->Release (This))
#define Parameters_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Parameters_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Parameters_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Parameters_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Parameters_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Parameters__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Parameters_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Parameters_Append(This, Object) ((This)->lpVtbl ->Append (This, Object))
#define Parameters_Delete(This, Index) ((This)->lpVtbl ->Delete (This, Index))
#define Parameters_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif
#endif
#endif
#ifndef __Property_INTERFACE_DEFINED__
#define __Property_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Property;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000503-0000-0010-8000-00AA006D2EA4")
  ADOProperty : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Value (VARIANT *pval) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Value (VARIANT val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (DataTypeEnum *ptype) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (long *plAttributes) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Attributes (long lAttributes) = 0;
  };
#else
  typedef struct PropertyVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOProperty *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOProperty *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOProperty *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOProperty *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOProperty *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOProperty *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOProperty *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Value) (ADOProperty *This, VARIANT *pval);
    HRESULT (STDMETHODCALLTYPE *put_Value) (ADOProperty *This, VARIANT val);
    HRESULT (STDMETHODCALLTYPE *get_Name) (ADOProperty *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Type) (ADOProperty *This, DataTypeEnum *ptype);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (ADOProperty *This, long *plAttributes);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (ADOProperty *This, long lAttributes);
    END_INTERFACE
  } PropertyVtbl;
  interface Property {
    CONST_VTBL struct PropertyVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Property_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Property_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Property_Release(This) ((This)->lpVtbl ->Release (This))
#define Property_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Property_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Property_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Property_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Property_get_Value(This, pval) ((This)->lpVtbl ->get_Value (This, pval))
#define Property_put_Value(This, val) ((This)->lpVtbl ->put_Value (This, val))
#define Property_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Property_get_Type(This, ptype) ((This)->lpVtbl ->get_Type (This, ptype))
#define Property_get_Attributes(This, plAttributes) ((This)->lpVtbl ->get_Attributes (This, plAttributes))
#define Property_put_Attributes(This, lAttributes) ((This)->lpVtbl ->put_Attributes (This, lAttributes))
#endif
#endif
#endif
#ifndef __Properties_INTERFACE_DEFINED__
#define __Properties_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Properties;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000504-0000-0010-8000-00AA006D2EA4")
  ADOProperties : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, ADOProperty **ppvObject) = 0;
  };
#else
  typedef struct PropertiesVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOProperties *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOProperties *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOProperties *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOProperties *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOProperties *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOProperties *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOProperties *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOProperties *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOProperties *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOProperties *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOProperties *This, VARIANT Index, ADOProperty **ppvObject);
    END_INTERFACE
  } PropertiesVtbl;
  interface Properties {
    CONST_VTBL struct PropertiesVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Properties_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Properties_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Properties_Release(This) ((This)->lpVtbl ->Release (This))
#define Properties_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Properties_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Properties_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Properties_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Properties_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Properties__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Properties_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Properties_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif
#endif
#endif
#endif

  extern RPC_IF_HANDLE __MIDL_itf_ado10_0000_0001_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ado10_0000_0001_v0_0_s_ifspec;
#ifdef __cplusplus
}
#endif
#endif
#define ADOCommand _ADOCommand
#define ADORecordset _ADORecordset
#define ADOTransaction _ADOTransaction
#define ADOParameter _ADOParameter
#define ADOConnection _ADOConnection
#define ADOCollection _ADOCollection
#define ADODynaCollection _ADODynaCollection
#define ADORecord _ADORecord
#define ADORecField _ADORecField
#define ADOStream _ADOStream
#endif

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/share/mingw-w64/include/adoint_backcompat.h                                                     0100644 0000000 0000000 00000746023 12404413022 020161  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#ifndef _ADOINT_H_
#define _ADOINT_H_

#include <winapifamily.h>

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)

#ifndef _INC_TCHAR
#include <tchar.h>
#endif

#ifndef DECLSPEC_UUID
#define DECLSPEC_UUID(x)
#endif

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif
#include "rpc.h"
#include "rpcndr.h"
#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif
#ifndef __ado10_h__
#define __ado10_h__

#ifndef ___ADOCollection_FWD_DEFINED__
#define ___ADOCollection_FWD_DEFINED__
typedef interface _ADOCollection _ADOCollection;
#endif
#ifndef ___ADODynaCollection_FWD_DEFINED__
#define ___ADODynaCollection_FWD_DEFINED__
typedef interface _ADODynaCollection _ADODynaCollection;
#endif
#ifndef ___ADO_FWD_DEFINED__
#define ___ADO_FWD_DEFINED__
typedef interface _ADO _ADO;
#endif
#ifndef __Error_FWD_DEFINED__
#define __Error_FWD_DEFINED__
typedef interface ADOError Error;
#endif
#ifndef __Errors_FWD_DEFINED__
#define __Errors_FWD_DEFINED__
typedef interface ADOErrors Errors;
#endif
#ifndef __Command15_FWD_DEFINED__
#define __Command15_FWD_DEFINED__
typedef interface Command15 Command15;
#endif
#ifndef __Command25_FWD_DEFINED__
#define __Command25_FWD_DEFINED__
typedef interface Command25 Command25;
#endif
#ifndef ___Command_FWD_DEFINED__
#define ___Command_FWD_DEFINED__
typedef interface _ADOCommand _Command;
#endif
#ifndef __ConnectionEventsVt_FWD_DEFINED__
#define __ConnectionEventsVt_FWD_DEFINED__
typedef interface ConnectionEventsVt ConnectionEventsVt;
#endif
#ifndef __RecordsetEventsVt_FWD_DEFINED__
#define __RecordsetEventsVt_FWD_DEFINED__
typedef interface RecordsetEventsVt RecordsetEventsVt;
#endif
#ifndef __ConnectionEvents_FWD_DEFINED__
#define __ConnectionEvents_FWD_DEFINED__
typedef interface ConnectionEvents ConnectionEvents;
#endif
#ifndef __RecordsetEvents_FWD_DEFINED__
#define __RecordsetEvents_FWD_DEFINED__
typedef interface RecordsetEvents RecordsetEvents;
#endif
#ifndef __Connection15_FWD_DEFINED__
#define __Connection15_FWD_DEFINED__
typedef interface Connection15 Connection15;
#endif
#ifndef ___Connection_FWD_DEFINED__
#define ___Connection_FWD_DEFINED__
typedef interface _ADOConnection _Connection;
#endif
#ifndef __ADOConnectionConstruction15_FWD_DEFINED__
#define __ADOConnectionConstruction15_FWD_DEFINED__
typedef interface ADOConnectionConstruction15 ADOConnectionConstruction15;
#endif
#ifndef __ADOConnectionConstruction_FWD_DEFINED__
#define __ADOConnectionConstruction_FWD_DEFINED__
typedef interface ADOConnectionConstruction ADOConnectionConstruction;
#endif
#ifndef __Connection_FWD_DEFINED__
#define __Connection_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOConnection Connection;
#else
typedef struct ADOConnection Connection;
#endif
#endif
#ifndef ___Record_FWD_DEFINED__
#define ___Record_FWD_DEFINED__
typedef interface _ADORecord _Record;
#endif
#ifndef __Record_FWD_DEFINED__
#define __Record_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADORecord Record;
#else
typedef struct ADORecord Record;
#endif
#endif
#ifndef ___Stream_FWD_DEFINED__
#define ___Stream_FWD_DEFINED__
typedef interface _ADOStream _Stream;
#endif
#ifndef __Stream_FWD_DEFINED__
#define __Stream_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOStream Stream;
#else
typedef struct ADOStream Stream;
#endif
#endif
#ifndef __ADORecordConstruction_FWD_DEFINED__
#define __ADORecordConstruction_FWD_DEFINED__
typedef interface ADORecordConstruction ADORecordConstruction;
#endif
#ifndef __ADOStreamConstruction_FWD_DEFINED__
#define __ADOStreamConstruction_FWD_DEFINED__
typedef interface ADOStreamConstruction ADOStreamConstruction;
#endif
#ifndef __ADOCommandConstruction_FWD_DEFINED__
#define __ADOCommandConstruction_FWD_DEFINED__
typedef interface ADOCommandConstruction ADOCommandConstruction;
#endif
#ifndef __Command_FWD_DEFINED__
#define __Command_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOCommand Command;
#else
typedef struct ADOCommand Command;
#endif
#endif
#ifndef __Recordset_FWD_DEFINED__
#define __Recordset_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADORecordset Recordset;
#else
typedef struct ADORecordset Recordset;
#endif
#endif
#ifndef __Recordset15_FWD_DEFINED__
#define __Recordset15_FWD_DEFINED__
typedef interface Recordset15 Recordset15;
#endif
#ifndef __Recordset20_FWD_DEFINED__
#define __Recordset20_FWD_DEFINED__
typedef interface Recordset20 Recordset20;
#endif
#ifndef __Recordset21_FWD_DEFINED__
#define __Recordset21_FWD_DEFINED__
typedef interface Recordset21 Recordset21;
#endif
#ifndef ___Recordset_FWD_DEFINED__
#define ___Recordset_FWD_DEFINED__
typedef interface _ADORecordset _Recordset;
#endif
#ifndef __ADORecordsetConstruction_FWD_DEFINED__
#define __ADORecordsetConstruction_FWD_DEFINED__
typedef interface ADORecordsetConstruction ADORecordsetConstruction;
#endif
#ifndef __Field15_FWD_DEFINED__
#define __Field15_FWD_DEFINED__
typedef interface Field15 Field15;
#endif
#ifndef __Field20_FWD_DEFINED__
#define __Field20_FWD_DEFINED__
typedef interface Field20 Field20;
#endif
#ifndef __Field_FWD_DEFINED__
#define __Field_FWD_DEFINED__
typedef interface ADOField Field;
#endif
#ifndef __Fields15_FWD_DEFINED__
#define __Fields15_FWD_DEFINED__
typedef interface Fields15 Fields15;
#endif
#ifndef __Fields20_FWD_DEFINED__
#define __Fields20_FWD_DEFINED__
typedef interface Fields20 Fields20;
#endif
#ifndef __Fields_FWD_DEFINED__
#define __Fields_FWD_DEFINED__
typedef interface ADOFields Fields;
#endif
#ifndef ___Parameter_FWD_DEFINED__
#define ___Parameter_FWD_DEFINED__
typedef interface _ADOParameter _Parameter;
#endif
#ifndef __Parameter_FWD_DEFINED__
#define __Parameter_FWD_DEFINED__
#ifdef __cplusplus
typedef class ADOParameter Parameter;
#else
typedef struct ADOParameter Parameter;
#endif
#endif
#ifndef __Parameters_FWD_DEFINED__
#define __Parameters_FWD_DEFINED__
typedef interface ADOParameters Parameters;
#endif
#ifndef __Property_FWD_DEFINED__
#define __Property_FWD_DEFINED__
typedef interface ADOProperty Property;
#endif
#ifndef __Properties_FWD_DEFINED__
#define __Properties_FWD_DEFINED__
typedef interface ADOProperties Properties;
#endif
#ifdef __cplusplus
extern "C" {
#endif

#ifdef _WIN64

  typedef LONGLONG ADO_LONGPTR;
#else

  typedef LONG ADO_LONGPTR;
#endif
  extern RPC_IF_HANDLE __MIDL_itf_ado10_0000_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ado10_0000_0000_v0_0_s_ifspec;
#ifndef __ADODB_LIBRARY_DEFINED__
#define __ADODB_LIBRARY_DEFINED__

  typedef DECLSPEC_UUID ("0000051B-0000-0010-8000-00AA006D2EA4")
  enum CursorTypeEnum { adOpenUnspecified = -1,
    adOpenForwardOnly = 0,
    adOpenKeyset = 1,
    adOpenDynamic = 2,
    adOpenStatic = 3
  } CursorTypeEnum;
  typedef DECLSPEC_UUID ("0000051C-0000-0010-8000-00AA006D2EA4")
  enum CursorOptionEnum { adHoldRecords = 0x100,
    adMovePrevious = 0x200,
    adAddNew = 0x1000400,
    adDelete = 0x1000800,
    adUpdate = 0x1008000,
    adBookmark = 0x2000,
    adApproxPosition = 0x4000,
    adUpdateBatch = 0x10000,
    adResync = 0x20000,
    adNotify = 0x40000,
    adFind = 0x80000,
    adSeek = 0x400000,
    adIndex = 0x800000
  } CursorOptionEnum;
  typedef DECLSPEC_UUID ("0000051D-0000-0010-8000-00AA006D2EA4")
  enum LockTypeEnum { adLockUnspecified = -1,
    adLockReadOnly = 1,
    adLockPessimistic = 2,
    adLockOptimistic = 3,
    adLockBatchOptimistic = 4
  } LockTypeEnum;
  typedef DECLSPEC_UUID ("0000051E-0000-0010-8000-00AA006D2EA4")
  enum ExecuteOptionEnum { adOptionUnspecified = -1,
    adAsyncExecute = 0x10,
    adAsyncFetch = 0x20,
    adAsyncFetchNonBlocking = 0x40,
    adExecuteNoRecords = 0x80,
    adExecuteStream = 0x400,
    adExecuteRecord = 0x800
  } ExecuteOptionEnum;
  typedef DECLSPEC_UUID ("00000541-0000-0010-8000-00AA006D2EA4")
  enum ConnectOptionEnum { adConnectUnspecified = -1,
    adAsyncConnect = 0x10
  } ConnectOptionEnum;
  typedef DECLSPEC_UUID ("00000532-0000-0010-8000-00AA006D2EA4")
  enum ObjectStateEnum { adStateClosed = 0,
    adStateOpen = 0x1,
    adStateConnecting = 0x2,
    adStateExecuting = 0x4,
    adStateFetching = 0x8
  } ObjectStateEnum;
  typedef DECLSPEC_UUID ("0000052F-0000-0010-8000-00AA006D2EA4")
  enum CursorLocationEnum { adUseNone = 1,
    adUseServer = 2,
    adUseClient = 3,
    adUseClientBatch = 3
  } CursorLocationEnum;
  typedef DECLSPEC_UUID ("0000051F-0000-0010-8000-00AA006D2EA4")
  enum DataTypeEnum { adEmpty = 0,
    adTinyInt = 16,
    adSmallInt = 2,
    adInteger = 3,
    adBigInt = 20,
    adUnsignedTinyInt = 17,
    adUnsignedSmallInt = 18,
    adUnsignedInt = 19,
    adUnsignedBigInt = 21,
    adSingle = 4,
    adDouble = 5,
    adCurrency = 6,
    adDecimal = 14,
    adNumeric = 131,
    adBoolean = 11,
    adError = 10,
    adUserDefined = 132,
    adVariant = 12,
    adIDispatch = 9,
    adIUnknown = 13,
    adGUID = 72,
    adDate = 7,
    adDBDate = 133,
    adDBTime = 134,
    adDBTimeStamp = 135,
    adBSTR = 8,
    adChar = 129,
    adVarChar = 200,
    adLongVarChar = 201,
    adWChar = 130,
    adVarWChar = 202,
    adLongVarWChar = 203,
    adBinary = 128,
    adVarBinary = 204,
    adLongVarBinary = 205,
    adChapter = 136,
    adFileTime = 64,
    adPropVariant = 138,
    adVarNumeric = 139,
    adArray = 0x2000
  } DataTypeEnum;
  typedef DECLSPEC_UUID ("00000525-0000-0010-8000-00AA006D2EA4")
  enum FieldAttributeEnum { adFldUnspecified = -1,
    adFldMayDefer = 0x2,
    adFldUpdatable = 0x4,
    adFldUnknownUpdatable = 0x8,
    adFldFixed = 0x10,
    adFldIsNullable = 0x20,
    adFldMayBeNull = 0x40,
    adFldLong = 0x80,
    adFldRowID = 0x100,
    adFldRowVersion = 0x200,
    adFldCacheDeferred = 0x1000,
    adFldIsChapter = 0x2000,
    adFldNegativeScale = 0x4000,
    adFldKeyColumn = 0x8000,
    adFldIsRowURL = 0x10000,
    adFldIsDefaultStream = 0x20000,
    adFldIsCollection = 0x40000
  } FieldAttributeEnum;
  typedef DECLSPEC_UUID ("00000526-0000-0010-8000-00AA006D2EA4")
  enum EditModeEnum { adEditNone = 0,
    adEditInProgress = 0x1,
    adEditAdd = 0x2,
    adEditDelete = 0x4
  } EditModeEnum;
  typedef DECLSPEC_UUID ("00000527-0000-0010-8000-00AA006D2EA4")
  enum RecordStatusEnum { adRecOK = 0,
    adRecNew = 0x1,
    adRecModified = 0x2,
    adRecDeleted = 0x4,
    adRecUnmodified = 0x8,
    adRecInvalid = 0x10,
    adRecMultipleChanges = 0x40,
    adRecPendingChanges = 0x80,
    adRecCanceled = 0x100,
    adRecCantRelease = 0x400,
    adRecConcurrencyViolation = 0x800,
    adRecIntegrityViolation = 0x1000,
    adRecMaxChangesExceeded = 0x2000,
    adRecObjectOpen = 0x4000,
    adRecOutOfMemory = 0x8000,
    adRecPermissionDenied = 0x10000,
    adRecSchemaViolation = 0x20000,
    adRecDBDeleted = 0x40000
  } RecordStatusEnum;
  typedef DECLSPEC_UUID ("00000542-0000-0010-8000-00AA006D2EA4")
  enum GetRowsOptionEnum { adGetRowsRest = -1
  } GetRowsOptionEnum;
  typedef DECLSPEC_UUID ("00000528-0000-0010-8000-00AA006D2EA4")
  enum PositionEnum { adPosUnknown = -1,
    adPosBOF = -2,
    adPosEOF = -3
  } PositionEnum;
#ifdef _WIN64
  typedef LONGLONG PositionEnum_Param;
#else
  typedef PositionEnum PositionEnum_Param;
#endif
  typedef
  enum BookmarkEnum { adBookmarkCurrent = 0,
    adBookmarkFirst = 1,
    adBookmarkLast = 2
  } BookmarkEnum;
  typedef DECLSPEC_UUID ("00000540-0000-0010-8000-00AA006D2EA4")
  enum MarshalOptionsEnum { adMarshalAll = 0,
    adMarshalModifiedOnly = 1
  } MarshalOptionsEnum;
  typedef DECLSPEC_UUID ("00000543-0000-0010-8000-00AA006D2EA4")
  enum AffectEnum { adAffectCurrent = 1,
    adAffectGroup = 2,
    adAffectAll = 3,
    adAffectAllChapters = 4
  } AffectEnum;
  typedef DECLSPEC_UUID ("00000544-0000-0010-8000-00AA006D2EA4")
  enum ResyncEnum { adResyncUnderlyingValues = 1,
    adResyncAllValues = 2
  } ResyncEnum;
  typedef DECLSPEC_UUID ("00000545-0000-0010-8000-00AA006D2EA4")
  enum CompareEnum { adCompareLessThan = 0,
    adCompareEqual = 1,
    adCompareGreaterThan = 2,
    adCompareNotEqual = 3,
    adCompareNotComparable = 4
  } CompareEnum;
  typedef DECLSPEC_UUID ("00000546-0000-0010-8000-00AA006D2EA4")
  enum FilterGroupEnum { adFilterNone = 0,
    adFilterPendingRecords = 1,
    adFilterAffectedRecords = 2,
    adFilterFetchedRecords = 3,
    adFilterPredicate = 4,
    adFilterConflictingRecords = 5
  } FilterGroupEnum;
  typedef DECLSPEC_UUID ("00000547-0000-0010-8000-00AA006D2EA4")
  enum SearchDirectionEnum { adSearchForward = 1,
    adSearchBackward = -1
  } SearchDirectionEnum;
  typedef SearchDirectionEnum SearchDirection;
  typedef DECLSPEC_UUID ("00000548-0000-0010-8000-00AA006D2EA4")
  enum PersistFormatEnum { adPersistADTG = 0,
    adPersistXML = 1
  } PersistFormatEnum;
  typedef DECLSPEC_UUID ("00000549-0000-0010-8000-00AA006D2EA4")
  enum StringFormatEnum { adClipString = 2
  } StringFormatEnum;
  typedef DECLSPEC_UUID ("00000520-0000-0010-8000-00AA006D2EA4")
  enum ConnectPromptEnum { adPromptAlways = 1,
    adPromptComplete = 2,
    adPromptCompleteRequired = 3,
    adPromptNever = 4
  } ConnectPromptEnum;
  typedef DECLSPEC_UUID ("00000521-0000-0010-8000-00AA006D2EA4")
  enum ConnectModeEnum { adModeUnknown = 0,
    adModeRead = 1,
    adModeWrite = 2,
    adModeReadWrite = 3,
    adModeShareDenyRead = 4,
    adModeShareDenyWrite = 8,
    adModeShareExclusive = 0xc,
    adModeShareDenyNone = 0x10,
    adModeRecursive = 0x400000
  } ConnectModeEnum;
  typedef DECLSPEC_UUID ("00000570-0000-0010-8000-00AA006D2EA4")
  enum RecordCreateOptionsEnum { adCreateCollection = 0x2000,
    adCreateStructDoc = 0x80000000,
    adCreateNonCollection = 0,
    adOpenIfExists = 0x2000000,
    adCreateOverwrite = 0x4000000,
    adFailIfNotExists = -1
  } RecordCreateOptionsEnum;
  typedef DECLSPEC_UUID ("00000571-0000-0010-8000-00AA006D2EA4")
  enum RecordOpenOptionsEnum { adOpenRecordUnspecified = -1,
    adOpenSource = 0x800000,
    adOpenOutput = 0x800000,
    adOpenAsync = 0x1000,
    adDelayFetchStream = 0x4000,
    adDelayFetchFields = 0x8000,
    adOpenExecuteCommand = 0x10000
  } RecordOpenOptionsEnum;
  typedef DECLSPEC_UUID ("00000523-0000-0010-8000-00AA006D2EA4")
  enum IsolationLevelEnum { adXactUnspecified = 0xffffffff,
    adXactChaos = 0x10,
    adXactReadUncommitted = 0x100,
    adXactBrowse = 0x100,
    adXactCursorStability = 0x1000,
    adXactReadCommitted = 0x1000,
    adXactRepeatableRead = 0x10000,
    adXactSerializable = 0x100000,
    adXactIsolated = 0x100000
  } IsolationLevelEnum;
  typedef DECLSPEC_UUID ("00000524-0000-0010-8000-00AA006D2EA4")
  enum XactAttributeEnum { adXactCommitRetaining = 0x20000,
    adXactAbortRetaining = 0x40000,
    adXactAsyncPhaseOne = 0x80000,
    adXactSyncPhaseOne = 0x100000
  } XactAttributeEnum;
  typedef DECLSPEC_UUID ("00000529-0000-0010-8000-00AA006D2EA4")
  enum PropertyAttributesEnum { adPropNotSupported = 0,
    adPropRequired = 0x1,
    adPropOptional = 0x2,
    adPropRead = 0x200,
    adPropWrite = 0x400
  } PropertyAttributesEnum;
  typedef DECLSPEC_UUID ("0000052A-0000-0010-8000-00AA006D2EA4")
  enum ErrorValueEnum { adErrProviderFailed = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbb8),
    adErrInvalidArgument = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbb9),
    adErrOpeningFile = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbba),
    adErrReadFile = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbbb),
    adErrWriteFile = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbbc),
    adErrNoCurrentRecord = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xbcd),
    adErrIllegalOperation = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xc93),
    adErrCantChangeProvider = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xc94),
    adErrInTransaction = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xcae),
    adErrFeatureNotAvailable = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xcb3),
    adErrItemNotFound = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xcc1),
    adErrObjectInCollection = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xd27),
    adErrObjectNotSet = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xd5c),
    adErrDataConversion = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xd5d),
    adErrObjectClosed = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe78),
    adErrObjectOpen = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe79),
    adErrProviderNotFound = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7a),
    adErrBoundToCommand = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7b),
    adErrInvalidParamInfo = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7c),
    adErrInvalidConnection = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7d),
    adErrNotReentrant = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7e),
    adErrStillExecuting = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe7f),
    adErrOperationCancelled = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe80),
    adErrStillConnecting = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe81),
    adErrInvalidTransaction = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe82),
    adErrNotExecuting = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe83),
    adErrUnsafeOperation = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe84),
    adwrnSecurityDialog = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe85),
    adwrnSecurityDialogHeader = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe86),
    adErrIntegrityViolation = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe87),
    adErrPermissionDenied = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe88),
    adErrDataOverflow = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe89),
    adErrSchemaViolation = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8a),
    adErrSignMismatch = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8b),
    adErrCantConvertvalue = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8c),
    adErrCantCreate = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8d),
    adErrColumnNotOnThisRow = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8e),
    adErrURLDoesNotExist = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe8f),
    adErrTreePermissionDenied = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe90),
    adErrInvalidURL = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe91),
    adErrResourceLocked = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe92),
    adErrResourceExists = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe93),
    adErrCannotComplete = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe94),
    adErrVolumeNotFound = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe95),
    adErrOutOfSpace = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe96),
    adErrResourceOutOfScope = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe97),
    adErrUnavailable = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe98),
    adErrURLNamedRowDoesNotExist = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe99),
    adErrDelResOutOfScope = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9a),
    adErrPropInvalidColumn = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9b),
    adErrPropInvalidOption = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9c),
    adErrPropInvalidValue = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9d),
    adErrPropConflicting = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9e),
    adErrPropNotAllSettable = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xe9f),
    adErrPropNotSet = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea0),
    adErrPropNotSettable = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea1),
    adErrPropNotSupported = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea2),
    adErrCatalogNotSet = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea3),
    adErrCantChangeConnection = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea4),
    adErrFieldsUpdateFailed = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea5),
    adErrDenyNotSupported = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea6),
    adErrDenyTypeNotSupported = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea7),
    adErrProviderNotSpecified = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xea9),
    adErrConnectionStringTooLong = MAKE_HRESULT (SEVERITY_ERROR, FACILITY_CONTROL, 0xeaa)
  } ErrorValueEnum;
  typedef DECLSPEC_UUID ("0000052B-0000-0010-8000-00AA006D2EA4")
  enum ParameterAttributesEnum { adParamSigned = 0x10,
    adParamNullable = 0x40,
    adParamLong = 0x80
  } ParameterAttributesEnum;
  typedef DECLSPEC_UUID ("0000052C-0000-0010-8000-00AA006D2EA4")
  enum ParameterDirectionEnum { adParamUnknown = 0,
    adParamInput = 0x1,
    adParamOutput = 0x2,
    adParamInputOutput = 0x3,
    adParamReturnValue = 0x4
  } ParameterDirectionEnum;
  typedef DECLSPEC_UUID ("0000052E-0000-0010-8000-00AA006D2EA4")
  enum CommandTypeEnum { adCmdUnspecified = -1,
    adCmdUnknown = 0x8,
    adCmdText = 0x1,
    adCmdTable = 0x2,
    adCmdStoredProc = 0x4,
    adCmdFile = 0x100,
    adCmdTableDirect = 0x200
  } CommandTypeEnum;
  typedef DECLSPEC_UUID ("00000530-0000-0010-8000-00AA006D2EA4")
  enum EventStatusEnum { adStatusOK = 0x1,
    adStatusErrorsOccurred = 0x2,
    adStatusCantDeny = 0x3,
    adStatusCancel = 0x4,
    adStatusUnwantedEvent = 0x5
  } EventStatusEnum;
  typedef DECLSPEC_UUID ("00000531-0000-0010-8000-00AA006D2EA4")
  enum EventReasonEnum { adRsnAddNew = 1,
    adRsnDelete = 2,
    adRsnUpdate = 3,
    adRsnUndoUpdate = 4,
    adRsnUndoAddNew = 5,
    adRsnUndoDelete = 6,
    adRsnRequery = 7,
    adRsnResynch = 8,
    adRsnClose = 9,
    adRsnMove = 10,
    adRsnFirstChange = 11,
    adRsnMoveFirst = 12,
    adRsnMoveNext = 13,
    adRsnMovePrevious = 14,
    adRsnMoveLast = 15
  } EventReasonEnum;
  typedef DECLSPEC_UUID ("00000533-0000-0010-8000-00AA006D2EA4")
  enum SchemaEnum { adSchemaProviderSpecific = -1,
    adSchemaAsserts = 0,
    adSchemaCatalogs = 1,
    adSchemaCharacterSets = 2,
    adSchemaCollations = 3,
    adSchemaColumns = 4,
    adSchemaCheckConstraints = 5,
    adSchemaConstraintColumnUsage = 6,
    adSchemaConstraintTableUsage = 7,
    adSchemaKeyColumnUsage = 8,
    adSchemaReferentialContraints = 9,
    adSchemaReferentialConstraints = 9,
    adSchemaTableConstraints = 10,
    adSchemaColumnsDomainUsage = 11,
    adSchemaIndexes = 12,
    adSchemaColumnPrivileges = 13,
    adSchemaTablePrivileges = 14,
    adSchemaUsagePrivileges = 15,
    adSchemaProcedures = 16,
    adSchemaSchemata = 17,
    adSchemaSQLLanguages = 18,
    adSchemaStatistics = 19,
    adSchemaTables = 20,
    adSchemaTranslations = 21,
    adSchemaProviderTypes = 22,
    adSchemaViews = 23,
    adSchemaViewColumnUsage = 24,
    adSchemaViewTableUsage = 25,
    adSchemaProcedureParameters = 26,
    adSchemaForeignKeys = 27,
    adSchemaPrimaryKeys = 28,
    adSchemaProcedureColumns = 29,
    adSchemaDBInfoKeywords = 30,
    adSchemaDBInfoLiterals = 31,
    adSchemaCubes = 32,
    adSchemaDimensions = 33,
    adSchemaHierarchies = 34,
    adSchemaLevels = 35,
    adSchemaMeasures = 36,
    adSchemaProperties = 37,
    adSchemaMembers = 38,
    adSchemaTrustees = 39,
    adSchemaFunctions = 40,
    adSchemaActions = 41,
    adSchemaCommands = 42,
    adSchemaSets = 43
  } SchemaEnum;
  typedef DECLSPEC_UUID ("0000057E-0000-0010-8000-00AA006D2EA4")
  enum FieldStatusEnum { adFieldOK = 0,
    adFieldCantConvertValue = 2,
    adFieldIsNull = 3,
    adFieldTruncated = 4,
    adFieldSignMismatch = 5,
    adFieldDataOverflow = 6,
    adFieldCantCreate = 7,
    adFieldUnavailable = 8,
    adFieldPermissionDenied = 9,
    adFieldIntegrityViolation = 10,
    adFieldSchemaViolation = 11,
    adFieldBadStatus = 12,
    adFieldDefault = 13,
    adFieldIgnore = 15,
    adFieldDoesNotExist = 16,
    adFieldInvalidURL = 17,
    adFieldResourceLocked = 18,
    adFieldResourceExists = 19,
    adFieldCannotComplete = 20,
    adFieldVolumeNotFound = 21,
    adFieldOutOfSpace = 22,
    adFieldCannotDeleteSource = 23,
    adFieldReadOnly = 24,
    adFieldResourceOutOfScope = 25,
    adFieldAlreadyExists = 26,
    adFieldPendingInsert = 0x10000,
    adFieldPendingDelete = 0x20000,
    adFieldPendingChange = 0x40000,
    adFieldPendingUnknown = 0x80000,
    adFieldPendingUnknownDelete = 0x100000
  } FieldStatusEnum;
  typedef DECLSPEC_UUID ("00000552-0000-0010-8000-00AA006D2EA4")
  enum SeekEnum { adSeekFirstEQ = 0x1,
    adSeekLastEQ = 0x2,
    adSeekAfterEQ = 0x4,
    adSeekAfter = 0x8,
    adSeekBeforeEQ = 0x10,
    adSeekBefore = 0x20
  } SeekEnum;
#ifndef _COMMON_ADC_AND_ADO_PROPS_
#define _COMMON_ADC_AND_ADO_PROPS_
  typedef DECLSPEC_UUID ("0000054A-0000-0010-8000-00AA006D2EA4")
  enum ADCPROP_UPDATECRITERIA_ENUM { adCriteriaKey = 0,
    adCriteriaAllCols = 1,
    adCriteriaUpdCols = 2,
    adCriteriaTimeStamp = 3
  } ADCPROP_UPDATECRITERIA_ENUM;
  typedef DECLSPEC_UUID ("0000054B-0000-0010-8000-00AA006D2EA4")
  enum ADCPROP_ASYNCTHREADPRIORITY_ENUM { adPriorityLowest = 1,
    adPriorityBelowNormal = 2,
    adPriorityNormal = 3,
    adPriorityAboveNormal = 4,
    adPriorityHighest = 5
  } ADCPROP_ASYNCTHREADPRIORITY_ENUM;
  typedef DECLSPEC_UUID ("00000554-0000-0010-8000-00AA006D2EA4")
  enum ADCPROP_AUTORECALC_ENUM { adRecalcUpFront = 0,
    adRecalcAlways = 1
  } ADCPROP_AUTORECALC_ENUM;
  typedef DECLSPEC_UUID ("00000553-0000-0010-8000-00AA006D2EA4")
  enum ADCPROP_UPDATERESYNC_ENUM { adResyncNone = 0,
    adResyncAutoIncrement = 1,
    adResyncConflicts = 2,
    adResyncUpdates = 4,
    adResyncInserts = 8,
    adResyncAll = 15
  } ADCPROP_UPDATERESYNC_ENUM;
#endif
  typedef ADCPROP_UPDATERESYNC_ENUM CEResyncEnum;
  typedef DECLSPEC_UUID ("00000573-0000-0010-8000-00AA006D2EA4")
  enum MoveRecordOptionsEnum { adMoveUnspecified = -1,
    adMoveOverWrite = 1,
    adMoveDontUpdateLinks = 2,
    adMoveAllowEmulation = 4
  } MoveRecordOptionsEnum;
  typedef DECLSPEC_UUID ("00000574-0000-0010-8000-00AA006D2EA4")
  enum CopyRecordOptionsEnum { adCopyUnspecified = -1,
    adCopyOverWrite = 1,
    adCopyAllowEmulation = 4,
    adCopyNonRecursive = 2
  } CopyRecordOptionsEnum;
  typedef DECLSPEC_UUID ("00000576-0000-0010-8000-00AA006D2EA4")
  enum StreamTypeEnum { adTypeBinary = 1,
    adTypeText = 2
  } StreamTypeEnum;
  typedef DECLSPEC_UUID ("00000577-0000-0010-8000-00AA006D2EA4")
  enum LineSeparatorEnum { adLF = 10,
    adCR = 13,
    adCRLF = -1
  } LineSeparatorEnum;
  typedef DECLSPEC_UUID ("0000057A-0000-0010-8000-00AA006D2EA4")
  enum StreamOpenOptionsEnum { adOpenStreamUnspecified = -1,
    adOpenStreamAsync = 1,
    adOpenStreamFromRecord = 4
  } StreamOpenOptionsEnum;
  typedef DECLSPEC_UUID ("0000057B-0000-0010-8000-00AA006D2EA4")
  enum StreamWriteEnum { adWriteChar = 0,
    adWriteLine = 1,
    stWriteChar = 0,
    stWriteLine = 1
  } StreamWriteEnum;
  typedef DECLSPEC_UUID ("0000057C-0000-0010-8000-00AA006D2EA4")
  enum SaveOptionsEnum { adSaveCreateNotExist = 1,
    adSaveCreateOverWrite = 2
  } SaveOptionsEnum;
  typedef
  enum FieldEnum { adDefaultStream = -1,
    adRecordURL = -2
  } FieldEnum;
  typedef
  enum StreamReadEnum { adReadAll = -1,
    adReadLine = -2
  } StreamReadEnum;
  typedef DECLSPEC_UUID ("0000057D-0000-0010-8000-00AA006D2EA4")
  enum RecordTypeEnum { adSimpleRecord = 0,
    adCollectionRecord = 1,
    adStructDoc = 2
  } RecordTypeEnum;
  EXTERN_C const IID LIBID_ADODB;
#ifndef ___ADOCollection_INTERFACE_DEFINED__
#define ___ADOCollection_INTERFACE_DEFINED__

  EXTERN_C const IID IID__ADOCollection;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000512-0000-0010-8000-00AA006D2EA4")
  _ADOCollection : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Count (long *c) = 0;
    virtual HRESULT STDMETHODCALLTYPE _NewEnum (IUnknown **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Refresh (void) = 0;
  };
#else
  typedef struct _ADOCollectionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOCollection *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOCollection *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOCollection *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOCollection *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOCollection *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOCollection *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (_ADOCollection *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (_ADOCollection *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (_ADOCollection *This);
    END_INTERFACE
  } _ADOCollectionVtbl;
  interface _ADOCollection {
    CONST_VTBL struct _ADOCollectionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _ADOCollection_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _ADOCollection_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _ADOCollection_Release(This) ((This)->lpVtbl ->Release (This))
#define _ADOCollection_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _ADOCollection_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _ADOCollection_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _ADOCollection_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Collection_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define _ADOCollection__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define _ADOCollection_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#endif
#endif
#endif
#ifndef ___ADODynaCollection_INTERFACE_DEFINED__
#define ___ADODynaCollection_INTERFACE_DEFINED__

  EXTERN_C const IID IID__ADODynaCollection;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000513-0000-0010-8000-00AA006D2EA4")
  _ADODynaCollection : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE Append (IDispatch *Object) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Index) = 0;
  };
#else
  typedef struct _ADODynaCollectionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADODynaCollection *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADODynaCollection *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADODynaCollection *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADODynaCollection *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADODynaCollection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADODynaCollection *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADODynaCollection *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (_ADODynaCollection *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (_ADODynaCollection *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (_ADODynaCollection *This);
    HRESULT (STDMETHODCALLTYPE *Append) (_ADODynaCollection *This, IDispatch *Object);
    HRESULT (STDMETHODCALLTYPE *Delete) (_ADODynaCollection *This, VARIANT Index);
    END_INTERFACE
  } _ADODynaCollectionVtbl;
  interface _ADODynaCollection {
    CONST_VTBL struct _ADODynaCollectionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _ADODynaCollection_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _ADODynaCollection_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _ADODynaCollection_Release(This) ((This)->lpVtbl ->Release (This))
#define _ADODynaCollection_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _ADODynaCollection_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _ADODynaCollection_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _ADODynaCollection_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _DynaCollection_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define _ADODynaCollection__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define _ADODynaCollection_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define _ADODynaCollection_Append(This, Object) ((This)->lpVtbl ->Append (This, Object))
#define _ADODynaCollection_Delete(This, Index) ((This)->lpVtbl ->Delete (This, Index))
#endif
#endif
#endif
#ifndef ___ADO_INTERFACE_DEFINED__
#define ___ADO_INTERFACE_DEFINED__

  EXTERN_C const IID IID__ADO;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000534-0000-0010-8000-00AA006D2EA4")
  _ADO : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Properties (ADOProperties **ppvObject) = 0;
  };
#else
  typedef struct _ADOVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADO *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADO *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADO *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADO *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADO *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADO *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADO *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADO *This, ADOProperties **ppvObject);
    END_INTERFACE
  } _ADOVtbl;
  interface _ADO {
    CONST_VTBL struct _ADOVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _ADO_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _ADO_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _ADO_Release(This) ((This)->lpVtbl ->Release (This))
#define _ADO_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _ADO_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _ADO_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _ADO_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _ADO_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#endif
#endif
#endif
#ifndef __Error_INTERFACE_DEFINED__
#define __Error_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Error;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000500-0000-0010-8000-00AA006D2EA4")
  ADOError : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Number (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Source (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Description (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_HelpFile (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_HelpContext (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_SQLState (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_NativeError (long *pl) = 0;
  };
#else
  typedef struct ErrorVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOError *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOError *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOError *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOError *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOError *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOError *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOError *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Number) (ADOError *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_Source) (ADOError *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Description) (ADOError *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_HelpFile) (ADOError *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_HelpContext) (ADOError *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_SQLState) (ADOError *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_NativeError) (ADOError *This, long *pl);
    END_INTERFACE
  } ErrorVtbl;
  interface Error {
    CONST_VTBL struct ErrorVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Error_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Error_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Error_Release(This) ((This)->lpVtbl ->Release (This))
#define Error_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Error_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Error_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Error_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Error_get_Number(This, pl) ((This)->lpVtbl ->get_Number (This, pl))
#define Error_get_Source(This, pbstr) ((This)->lpVtbl ->get_Source (This, pbstr))
#define Error_get_Description(This, pbstr) ((This)->lpVtbl ->get_Description (This, pbstr))
#define Error_get_HelpFile(This, pbstr) ((This)->lpVtbl ->get_HelpFile (This, pbstr))
#define Error_get_HelpContext(This, pl) ((This)->lpVtbl ->get_HelpContext (This, pl))
#define Error_get_SQLState(This, pbstr) ((This)->lpVtbl ->get_SQLState (This, pbstr))
#define Error_get_NativeError(This, pl) ((This)->lpVtbl ->get_NativeError (This, pl))
#endif
#endif
#endif
#ifndef __Errors_INTERFACE_DEFINED__
#define __Errors_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Errors;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000501-0000-0010-8000-00AA006D2EA4")
  ADOErrors : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, ADOError **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Clear (void) = 0;
  };
#else
  typedef struct ErrorsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOErrors *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOErrors *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOErrors *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOErrors *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOErrors *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOErrors *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOErrors *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOErrors *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOErrors *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOErrors *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOErrors *This, VARIANT Index, ADOError **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Clear) (ADOErrors *This);
    END_INTERFACE
  } ErrorsVtbl;
  interface Errors {
    CONST_VTBL struct ErrorsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Errors_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Errors_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Errors_Release(This) ((This)->lpVtbl ->Release (This))
#define Errors_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Errors_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Errors_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Errors_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Errors_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Errors__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Errors_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Errors_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#define Errors_Clear(This) ((This)->lpVtbl ->Clear (This))
#endif
#endif
#endif
#ifndef __Command15_INTERFACE_DEFINED__
#define __Command15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Command15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000508-0000-0010-8000-00AA006D2EA4")
  Command15 : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection (_ADOConnection **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ActiveConnection (_ADOConnection *pCon) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ActiveConnection (VARIANT vConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CommandText (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CommandText (BSTR bstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CommandTimeout (LONG *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CommandTimeout (LONG Timeout) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Prepared (VARIANT_BOOL *pfPrepared) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Prepared (VARIANT_BOOL fPrepared) = 0;
    virtual HRESULT STDMETHODCALLTYPE Execute (VARIANT *RecordsAffected, VARIANT *Parameters, long Options, _ADORecordset **ppirs) = 0;
    virtual HRESULT STDMETHODCALLTYPE CreateParameter (BSTR Name, DataTypeEnum Type, ParameterDirectionEnum Direction, ADO_LONGPTR Size, VARIANT Value, _ADOParameter **ppiprm) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Parameters (ADOParameters **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CommandType (CommandTypeEnum lCmdType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CommandType (CommandTypeEnum *plCmdType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstrName) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Name (BSTR bstrName) = 0;
  };
#else
  typedef struct Command15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Command15 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Command15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Command15 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Command15 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Command15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Command15 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Command15 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Command15 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (Command15 *This, _ADOConnection **ppvObject);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (Command15 *This, _ADOConnection *pCon);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (Command15 *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_CommandText) (Command15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_CommandText) (Command15 *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_CommandTimeout) (Command15 *This, LONG *pl);
    HRESULT (STDMETHODCALLTYPE *put_CommandTimeout) (Command15 *This, LONG Timeout);
    HRESULT (STDMETHODCALLTYPE *get_Prepared) (Command15 *This, VARIANT_BOOL *pfPrepared);
    HRESULT (STDMETHODCALLTYPE *put_Prepared) (Command15 *This, VARIANT_BOOL fPrepared);
    HRESULT (STDMETHODCALLTYPE *Execute) (Command15 *This, VARIANT *RecordsAffected, VARIANT *Parameters, long Options, _ADORecordset **ppirs);
    HRESULT (STDMETHODCALLTYPE *CreateParameter) (Command15 *This, BSTR Name, DataTypeEnum Type, ParameterDirectionEnum Direction, ADO_LONGPTR Size, VARIANT Value, _ADOParameter **ppiprm);
    HRESULT (STDMETHODCALLTYPE *get_Parameters) (Command15 *This, ADOParameters **ppvObject);
    HRESULT (STDMETHODCALLTYPE *put_CommandType) (Command15 *This, CommandTypeEnum lCmdType);
    HRESULT (STDMETHODCALLTYPE *get_CommandType) (Command15 *This, CommandTypeEnum *plCmdType);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Command15 *This, BSTR *pbstrName);
    HRESULT (STDMETHODCALLTYPE *put_Name) (Command15 *This, BSTR bstrName);
    END_INTERFACE
  } Command15Vtbl;
  interface Command15 {
    CONST_VTBL struct Command15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Command15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Command15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Command15_Release(This) ((This)->lpVtbl ->Release (This))
#define Command15_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Command15_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Command15_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Command15_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Command15_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Command15_get_ActiveConnection(This, ppvObject) ((This)->lpVtbl ->get_ActiveConnection (This, ppvObject))
#define Command15_putref_ActiveConnection(This, pCon) ((This)->lpVtbl ->putref_ActiveConnection (This, pCon))
#define Command15_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define Command15_get_CommandText(This, pbstr) ((This)->lpVtbl ->get_CommandText (This, pbstr))
#define Command15_put_CommandText(This, bstr) ((This)->lpVtbl ->put_CommandText (This, bstr))
#define Command15_get_CommandTimeout(This, pl) ((This)->lpVtbl ->get_CommandTimeout (This, pl))
#define Command15_put_CommandTimeout(This, Timeout) ((This)->lpVtbl ->put_CommandTimeout (This, Timeout))
#define Command15_get_Prepared(This, pfPrepared) ((This)->lpVtbl ->get_Prepared (This, pfPrepared))
#define Command15_put_Prepared(This, fPrepared) ((This)->lpVtbl ->put_Prepared (This, fPrepared))
#define Command15_Execute(This, RecordsAffected, Parameters, Options, ppirs) ((This)->lpVtbl ->Execute (This, RecordsAffected, Parameters, Options, ppirs))
#define Command15_CreateParameter(This, Name, Type, Direction, Size, Value, ppiprm) ((This)->lpVtbl ->CreateParameter (This, Name, Type, Direction, Size, Value, ppiprm))
#define Command15_get_Parameters(This, ppvObject) ((This)->lpVtbl ->get_Parameters (This, ppvObject))
#define Command15_put_CommandType(This, lCmdType) ((This)->lpVtbl ->put_CommandType (This, lCmdType))
#define Command15_get_CommandType(This, plCmdType) ((This)->lpVtbl ->get_CommandType (This, plCmdType))
#define Command15_get_Name(This, pbstrName) ((This)->lpVtbl ->get_Name (This, pbstrName))
#define Command15_put_Name(This, bstrName) ((This)->lpVtbl ->put_Name (This, bstrName))
#endif
#endif
#endif
#ifndef __Command25_INTERFACE_DEFINED__
#define __Command25_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Command25;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000054E-0000-0010-8000-00AA006D2EA4")
  Command25 : public Command15 {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_State (LONG *plObjState) = 0;
    virtual HRESULT STDMETHODCALLTYPE Cancel (void) = 0;
  };
#else
  typedef struct Command25Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Command25 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Command25 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Command25 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Command25 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Command25 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Command25 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Command25 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Command25 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (Command25 *This, _ADOConnection **ppvObject);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (Command25 *This, _ADOConnection *pCon);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (Command25 *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_CommandText) (Command25 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_CommandText) (Command25 *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_CommandTimeout) (Command25 *This, LONG *pl);
    HRESULT (STDMETHODCALLTYPE *put_CommandTimeout) (Command25 *This, LONG Timeout);
    HRESULT (STDMETHODCALLTYPE *get_Prepared) (Command25 *This, VARIANT_BOOL *pfPrepared);
    HRESULT (STDMETHODCALLTYPE *put_Prepared) (Command25 *This, VARIANT_BOOL fPrepared);
    HRESULT (STDMETHODCALLTYPE *Execute) (Command25 *This, VARIANT *RecordsAffected, VARIANT *Parameters, long Options, _ADORecordset **ppirs);
    HRESULT (STDMETHODCALLTYPE *CreateParameter) (Command25 *This, BSTR Name, DataTypeEnum Type, ParameterDirectionEnum Direction, ADO_LONGPTR Size, VARIANT Value, _ADOParameter **ppiprm);
    HRESULT (STDMETHODCALLTYPE *get_Parameters) (Command25 *This, ADOParameters **ppvObject);
    HRESULT (STDMETHODCALLTYPE *put_CommandType) (Command25 *This, CommandTypeEnum lCmdType);
    HRESULT (STDMETHODCALLTYPE *get_CommandType) (Command25 *This, CommandTypeEnum *plCmdType);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Command25 *This, BSTR *pbstrName);
    HRESULT (STDMETHODCALLTYPE *put_Name) (Command25 *This, BSTR bstrName);
    HRESULT (STDMETHODCALLTYPE *get_State) (Command25 *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *Cancel) (Command25 *This);
    END_INTERFACE
  } Command25Vtbl;
  interface Command25 {
    CONST_VTBL struct Command25Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Command25_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Command25_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Command25_Release(This) ((This)->lpVtbl ->Release (This))
#define Command25_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Command25_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Command25_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Command25_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Command25_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Command25_get_ActiveConnection(This, ppvObject) ((This)->lpVtbl ->get_ActiveConnection (This, ppvObject))
#define Command25_putref_ActiveConnection(This, pCon) ((This)->lpVtbl ->putref_ActiveConnection (This, pCon))
#define Command25_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define Command25_get_CommandText(This, pbstr) ((This)->lpVtbl ->get_CommandText (This, pbstr))
#define Command25_put_CommandText(This, bstr) ((This)->lpVtbl ->put_CommandText (This, bstr))
#define Command25_get_CommandTimeout(This, pl) ((This)->lpVtbl ->get_CommandTimeout (This, pl))
#define Command25_put_CommandTimeout(This, Timeout) ((This)->lpVtbl ->put_CommandTimeout (This, Timeout))
#define Command25_get_Prepared(This, pfPrepared) ((This)->lpVtbl ->get_Prepared (This, pfPrepared))
#define Command25_put_Prepared(This, fPrepared) ((This)->lpVtbl ->put_Prepared (This, fPrepared))
#define Command25_Execute(This, RecordsAffected, Parameters, Options, ppirs) ((This)->lpVtbl ->Execute (This, RecordsAffected, Parameters, Options, ppirs))
#define Command25_CreateParameter(This, Name, Type, Direction, Size, Value, ppiprm) ((This)->lpVtbl ->CreateParameter (This, Name, Type, Direction, Size, Value, ppiprm))
#define Command25_get_Parameters(This, ppvObject) ((This)->lpVtbl ->get_Parameters (This, ppvObject))
#define Command25_put_CommandType(This, lCmdType) ((This)->lpVtbl ->put_CommandType (This, lCmdType))
#define Command25_get_CommandType(This, plCmdType) ((This)->lpVtbl ->get_CommandType (This, plCmdType))
#define Command25_get_Name(This, pbstrName) ((This)->lpVtbl ->get_Name (This, pbstrName))
#define Command25_put_Name(This, bstrName) ((This)->lpVtbl ->put_Name (This, bstrName))
#define Command25_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define Command25_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#endif
#endif
#endif
#ifndef ___Command_INTERFACE_DEFINED__
#define ___Command_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Command;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("B08400BD-F9D1-4D02-B856-71D5DBA123E9")
  _ADOCommand : public Command25 {
    public:
    virtual HRESULT __stdcall putref_CommandStream (IUnknown *pStream) = 0;
    virtual HRESULT __stdcall get_CommandStream (VARIANT *pvStream) = 0;
    virtual HRESULT __stdcall put_Dialect (BSTR bstrDialect) = 0;
    virtual HRESULT __stdcall get_Dialect (BSTR *pbstrDialect) = 0;
    virtual HRESULT __stdcall put_NamedParameters (VARIANT_BOOL fNamedParameters) = 0;
    virtual HRESULT __stdcall get_NamedParameters (VARIANT_BOOL *pfNamedParameters) = 0;
  };
#else
  typedef struct _CommandVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOCommand *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOCommand *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOCommand *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOCommand *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOCommand *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOCommand *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOCommand *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOCommand *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (_ADOCommand *This, _ADOConnection **ppvObject);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (_ADOCommand *This, _ADOConnection *pCon);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (_ADOCommand *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_CommandText) (_ADOCommand *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_CommandText) (_ADOCommand *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_CommandTimeout) (_ADOCommand *This, LONG *pl);
    HRESULT (STDMETHODCALLTYPE *put_CommandTimeout) (_ADOCommand *This, LONG Timeout);
    HRESULT (STDMETHODCALLTYPE *get_Prepared) (_ADOCommand *This, VARIANT_BOOL *pfPrepared);
    HRESULT (STDMETHODCALLTYPE *put_Prepared) (_ADOCommand *This, VARIANT_BOOL fPrepared);
    HRESULT (STDMETHODCALLTYPE *Execute) (_ADOCommand *This, VARIANT *RecordsAffected, VARIANT *Parameters, long Options, _ADORecordset **ppirs);
    HRESULT (STDMETHODCALLTYPE *CreateParameter) (_ADOCommand *This, BSTR Name, DataTypeEnum Type, ParameterDirectionEnum Direction, ADO_LONGPTR Size, VARIANT Value, _ADOParameter **ppiprm);
    HRESULT (STDMETHODCALLTYPE *get_Parameters) (_ADOCommand *This, ADOParameters **ppvObject);
    HRESULT (STDMETHODCALLTYPE *put_CommandType) (_ADOCommand *This, CommandTypeEnum lCmdType);
    HRESULT (STDMETHODCALLTYPE *get_CommandType) (_ADOCommand *This, CommandTypeEnum *plCmdType);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_ADOCommand *This, BSTR *pbstrName);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_ADOCommand *This, BSTR bstrName);
    HRESULT (STDMETHODCALLTYPE *get_State) (_ADOCommand *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *Cancel) (_ADOCommand *This);
    HRESULT (__stdcall *putref_CommandADOStream) (_ADOCommand *This, IUnknown *pStream);
    HRESULT (__stdcall *get_CommandStream) (_ADOCommand *This, VARIANT *pvStream);
    HRESULT (__stdcall *put_Dialect) (_ADOCommand *This, BSTR bstrDialect);
    HRESULT (__stdcall *get_Dialect) (_ADOCommand *This, BSTR *pbstrDialect);
    HRESULT (__stdcall *put_NamedParameters) (_ADOCommand *This, VARIANT_BOOL fNamedParameters);
    HRESULT (__stdcall *get_NamedParameters) (_ADOCommand *This, VARIANT_BOOL *pfNamedParameters);
    END_INTERFACE
  } _CommandVtbl;
  interface _Command {
    CONST_VTBL struct _CommandVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Command_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Command_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Command_Release(This) ((This)->lpVtbl ->Release (This))
#define _Command_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Command_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Command_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Command_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Command_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Command_get_ActiveConnection(This, ppvObject) ((This)->lpVtbl ->get_ActiveConnection (This, ppvObject))
#define _Command_putref_ActiveConnection(This, pCon) ((This)->lpVtbl ->putref_ActiveConnection (This, pCon))
#define _Command_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define _Command_get_CommandText(This, pbstr) ((This)->lpVtbl ->get_CommandText (This, pbstr))
#define _Command_put_CommandText(This, bstr) ((This)->lpVtbl ->put_CommandText (This, bstr))
#define _Command_get_CommandTimeout(This, pl) ((This)->lpVtbl ->get_CommandTimeout (This, pl))
#define _Command_put_CommandTimeout(This, Timeout) ((This)->lpVtbl ->put_CommandTimeout (This, Timeout))
#define _Command_get_Prepared(This, pfPrepared) ((This)->lpVtbl ->get_Prepared (This, pfPrepared))
#define _Command_put_Prepared(This, fPrepared) ((This)->lpVtbl ->put_Prepared (This, fPrepared))
#define _Command_Execute(This, RecordsAffected, Parameters, Options, ppirs) ((This)->lpVtbl ->Execute (This, RecordsAffected, Parameters, Options, ppirs))
#define _Command_CreateParameter(This, Name, Type, Direction, Size, Value, ppiprm) ((This)->lpVtbl ->CreateParameter (This, Name, Type, Direction, Size, Value, ppiprm))
#define _Command_get_Parameters(This, ppvObject) ((This)->lpVtbl ->get_Parameters (This, ppvObject))
#define _Command_put_CommandType(This, lCmdType) ((This)->lpVtbl ->put_CommandType (This, lCmdType))
#define _Command_get_CommandType(This, plCmdType) ((This)->lpVtbl ->get_CommandType (This, plCmdType))
#define _Command_get_Name(This, pbstrName) ((This)->lpVtbl ->get_Name (This, pbstrName))
#define _Command_put_Name(This, bstrName) ((This)->lpVtbl ->put_Name (This, bstrName))
#define _Command_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define _Command_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#define _Command_putref_CommandStream(This, pStream) ((This)->lpVtbl ->putref_CommandStream (This, pStream))
#define _Command_get_CommandStream(This, pvStream) ((This)->lpVtbl ->get_CommandStream (This, pvStream))
#define _Command_put_Dialect(This, bstrDialect) ((This)->lpVtbl ->put_Dialect (This, bstrDialect))
#define _Command_get_Dialect(This, pbstrDialect) ((This)->lpVtbl ->get_Dialect (This, pbstrDialect))
#define _Command_put_NamedParameters(This, fNamedParameters) ((This)->lpVtbl ->put_NamedParameters (This, fNamedParameters))
#define _Command_get_NamedParameters(This, pfNamedParameters) ((This)->lpVtbl ->get_NamedParameters (This, pfNamedParameters))
#endif
#endif
#endif
#ifndef __ConnectionEventsVt_INTERFACE_DEFINED__
#define __ConnectionEventsVt_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ConnectionEventsVt;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000402-0000-0010-8000-00AA006D2EA4")
  ConnectionEventsVt : public IUnknown {
    public:
    virtual HRESULT STDMETHODCALLTYPE InfoMessage (ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE BeginTransComplete (LONG TransactionLevel, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE CommitTransComplete (ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE RollbackTransComplete (ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE WillExecute (BSTR *Source, CursorTypeEnum *CursorType, LockTypeEnum *LockType, long *Options, EventStatusEnum *adStatus, _ADOCommand *pCommand, _ADORecordset *pRecordset, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE ExecuteComplete (LONG RecordsAffected, ADOError *pError, EventStatusEnum *adStatus, _ADOCommand *pCommand, _ADORecordset *pRecordset, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE WillConnect (BSTR *ConnectionString, BSTR *UserID, BSTR *Password, long *Options, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE ConnectComplete (ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE Disconnect (EventStatusEnum *adStatus, _ADOConnection *pConnection) = 0;
  };
#else
  typedef struct ConnectionEventsVtVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ConnectionEventsVt *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ConnectionEventsVt *This);
    ULONG (STDMETHODCALLTYPE *Release) (ConnectionEventsVt *This);
    HRESULT (STDMETHODCALLTYPE *InfoMessage) (ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *BeginTransComplete) (ConnectionEventsVt *This, LONG TransactionLevel, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *CommitTransComplete) (ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *RollbackTransComplete) (ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *WillExecute) (ConnectionEventsVt *This, BSTR *Source, CursorTypeEnum *CursorType, LockTypeEnum *LockType, long *Options, EventStatusEnum *adStatus, _ADOCommand *pCommand, _ADORecordset *pRecordset, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *ExecuteComplete) (ConnectionEventsVt *This, LONG RecordsAffected, ADOError *pError, EventStatusEnum *adStatus, _ADOCommand *pCommand, _ADORecordset *pRecordset, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *WillConnect) (ConnectionEventsVt *This, BSTR *ConnectionString, BSTR *UserID, BSTR *Password, long *Options, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *ConnectComplete) (ConnectionEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    HRESULT (STDMETHODCALLTYPE *Disconnect) (ConnectionEventsVt *This, EventStatusEnum *adStatus, _ADOConnection *pConnection);
    END_INTERFACE
  } ConnectionEventsVtVtbl;
  interface ConnectionEventsVt {
    CONST_VTBL struct ConnectionEventsVtVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ConnectionEventsVt_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ConnectionEventsVt_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ConnectionEventsVt_Release(This) ((This)->lpVtbl ->Release (This))
#define ConnectionEventsVt_InfoMessage(This, pError, adStatus, pConnection) ((This)->lpVtbl ->InfoMessage (This, pError, adStatus, pConnection))
#define ConnectionEventsVt_BeginTransComplete(This, TransactionLevel, pError, adStatus, pConnection) ((This)->lpVtbl ->BeginTransComplete (This, TransactionLevel, pError, adStatus, pConnection))
#define ConnectionEventsVt_CommitTransComplete(This, pError, adStatus, pConnection) ((This)->lpVtbl ->CommitTransComplete (This, pError, adStatus, pConnection))
#define ConnectionEventsVt_RollbackTransComplete(This, pError, adStatus, pConnection) ((This)->lpVtbl ->RollbackTransComplete (This, pError, adStatus, pConnection))
#define ConnectionEventsVt_WillExecute(This, Source, CursorType, LockType, Options, adStatus, pCommand, pRecordset, pConnection) ((This)->lpVtbl ->WillExecute (This, Source, CursorType, LockType, Options, adStatus, pCommand, pRecordset, pConnection))
#define ConnectionEventsVt_ExecuteComplete(This, RecordsAffected, pError, adStatus, pCommand, pRecordset, pConnection) ((This)->lpVtbl ->ExecuteComplete (This, RecordsAffected, pError, adStatus, pCommand, pRecordset, pConnection))
#define ConnectionEventsVt_WillConnect(This, ConnectionString, UserID, Password, Options, adStatus, pConnection) ((This)->lpVtbl ->WillConnect (This, ConnectionString, UserID, Password, Options, adStatus, pConnection))
#define ConnectionEventsVt_ConnectComplete(This, pError, adStatus, pConnection) ((This)->lpVtbl ->ConnectComplete (This, pError, adStatus, pConnection))
#define ConnectionEventsVt_Disconnect(This, adStatus, pConnection) ((This)->lpVtbl ->Disconnect (This, adStatus, pConnection))
#endif
#endif
#endif
#ifndef __RecordsetEventsVt_INTERFACE_DEFINED__
#define __RecordsetEventsVt_INTERFACE_DEFINED__

  EXTERN_C const IID IID_RecordsetEventsVt;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000403-0000-0010-8000-00AA006D2EA4")
  RecordsetEventsVt : public IUnknown {
    public:
    virtual HRESULT STDMETHODCALLTYPE WillChangeField (LONG cFields, VARIANT Fields, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE FieldChangeComplete (LONG cFields, VARIANT Fields, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE WillChangeRecord (EventReasonEnum adReason, LONG cRecords, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE RecordChangeComplete (EventReasonEnum adReason, LONG cRecords, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE WillChangeRecordset (EventReasonEnum adReason, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE RecordsetChangeComplete (EventReasonEnum adReason, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE WillMove (EventReasonEnum adReason, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE MoveComplete (EventReasonEnum adReason, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE EndOfRecordset (VARIANT_BOOL *fMoreData, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE FetchProgress (long Progress, long MaxProgress, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
    virtual HRESULT STDMETHODCALLTYPE FetchComplete (ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset) = 0;
  };
#else
  typedef struct RecordsetEventsVtVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (RecordsetEventsVt *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (RecordsetEventsVt *This);
    ULONG (STDMETHODCALLTYPE *Release) (RecordsetEventsVt *This);
    HRESULT (STDMETHODCALLTYPE *WillChangeADOField) (RecordsetEventsVt *This, LONG cFields, VARIANT Fields, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *FieldChangeComplete) (RecordsetEventsVt *This, LONG cFields, VARIANT Fields, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *WillChangeADORecord) (RecordsetEventsVt *This, EventReasonEnum adReason, LONG cRecords, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *RecordChangeComplete) (RecordsetEventsVt *This, EventReasonEnum adReason, LONG cRecords, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *WillChangeADORecordset) (RecordsetEventsVt *This, EventReasonEnum adReason, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *RecordsetChangeComplete) (RecordsetEventsVt *This, EventReasonEnum adReason, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *WillMove) (RecordsetEventsVt *This, EventReasonEnum adReason, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *MoveComplete) (RecordsetEventsVt *This, EventReasonEnum adReason, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *EndOfADORecordset) (RecordsetEventsVt *This, VARIANT_BOOL *fMoreData, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *FetchProgress) (RecordsetEventsVt *This, long Progress, long MaxProgress, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    HRESULT (STDMETHODCALLTYPE *FetchComplete) (RecordsetEventsVt *This, ADOError *pError, EventStatusEnum *adStatus, _ADORecordset *pRecordset);
    END_INTERFACE
  } RecordsetEventsVtVtbl;
  interface RecordsetEventsVt {
    CONST_VTBL struct RecordsetEventsVtVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define RecordsetEventsVt_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define RecordsetEventsVt_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define RecordsetEventsVt_Release(This) ((This)->lpVtbl ->Release (This))
#define RecordsetEventsVt_WillChangeField(This, cFields, Fields, adStatus, pRecordset) ((This)->lpVtbl ->WillChangeField (This, cFields, Fields, adStatus, pRecordset))
#define RecordsetEventsVt_FieldChangeComplete(This, cFields, Fields, pError, adStatus, pRecordset) ((This)->lpVtbl ->FieldChangeComplete (This, cFields, Fields, pError, adStatus, pRecordset))
#define RecordsetEventsVt_WillChangeRecord(This, adReason, cRecords, adStatus, pRecordset) ((This)->lpVtbl ->WillChangeRecord (This, adReason, cRecords, adStatus, pRecordset))
#define RecordsetEventsVt_RecordChangeComplete(This, adReason, cRecords, pError, adStatus, pRecordset) ((This)->lpVtbl ->RecordChangeComplete (This, adReason, cRecords, pError, adStatus, pRecordset))
#define RecordsetEventsVt_WillChangeRecordset(This, adReason, adStatus, pRecordset) ((This)->lpVtbl ->WillChangeRecordset (This, adReason, adStatus, pRecordset))
#define RecordsetEventsVt_RecordsetChangeComplete(This, adReason, pError, adStatus, pRecordset) ((This)->lpVtbl ->RecordsetChangeComplete (This, adReason, pError, adStatus, pRecordset))
#define RecordsetEventsVt_WillMove(This, adReason, adStatus, pRecordset) ((This)->lpVtbl ->WillMove (This, adReason, adStatus, pRecordset))
#define RecordsetEventsVt_MoveComplete(This, adReason, pError, adStatus, pRecordset) ((This)->lpVtbl ->MoveComplete (This, adReason, pError, adStatus, pRecordset))
#define RecordsetEventsVt_EndOfRecordset(This, fMoreData, adStatus, pRecordset) ((This)->lpVtbl ->EndOfRecordset (This, fMoreData, adStatus, pRecordset))
#define RecordsetEventsVt_FetchProgress(This, Progress, MaxProgress, adStatus, pRecordset) ((This)->lpVtbl ->FetchProgress (This, Progress, MaxProgress, adStatus, pRecordset))
#define RecordsetEventsVt_FetchComplete(This, pError, adStatus, pRecordset) ((This)->lpVtbl ->FetchComplete (This, pError, adStatus, pRecordset))
#endif
#endif
#endif
#ifndef __ConnectionEvents_DISPINTERFACE_DEFINED__
#define __ConnectionEvents_DISPINTERFACE_DEFINED__

  EXTERN_C const IID DIID_ConnectionEvents;
#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000400-0000-0010-8000-00AA006D2EA4")
  ConnectionEvents : public IDispatch {
  };
#else
  typedef struct ConnectionEventsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ConnectionEvents *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ConnectionEvents *This);
    ULONG (STDMETHODCALLTYPE *Release) (ConnectionEvents *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ConnectionEvents *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ConnectionEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ConnectionEvents *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ConnectionEvents *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    END_INTERFACE
  } ConnectionEventsVtbl;
  interface ConnectionEvents {
    CONST_VTBL struct ConnectionEventsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ConnectionEvents_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ConnectionEvents_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ConnectionEvents_Release(This) ((This)->lpVtbl ->Release (This))
#define ConnectionEvents_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define ConnectionEvents_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define ConnectionEvents_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define ConnectionEvents_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#endif
#endif
#endif
#ifndef __RecordsetEvents_DISPINTERFACE_DEFINED__
#define __RecordsetEvents_DISPINTERFACE_DEFINED__

  EXTERN_C const IID DIID_RecordsetEvents;
#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("00000266-0000-0010-8000-00AA006D2EA4")
  RecordsetEvents : public IDispatch {
  };
#else
  typedef struct RecordsetEventsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (RecordsetEvents *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (RecordsetEvents *This);
    ULONG (STDMETHODCALLTYPE *Release) (RecordsetEvents *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (RecordsetEvents *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (RecordsetEvents *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (RecordsetEvents *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (RecordsetEvents *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    END_INTERFACE
  } RecordsetEventsVtbl;
  interface RecordsetEvents {
    CONST_VTBL struct RecordsetEventsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define RecordsetEvents_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define RecordsetEvents_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define RecordsetEvents_Release(This) ((This)->lpVtbl ->Release (This))
#define RecordsetEvents_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define RecordsetEvents_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define RecordsetEvents_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define RecordsetEvents_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#endif
#endif
#endif
#ifndef __Connection15_INTERFACE_DEFINED__
#define __Connection15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Connection15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000515-0000-0010-8000-00AA006D2EA4")
  Connection15 : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_ConnectionString (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ConnectionString (BSTR bstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CommandTimeout (LONG *plTimeout) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CommandTimeout (LONG lTimeout) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ConnectionTimeout (LONG *plTimeout) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ConnectionTimeout (LONG lTimeout) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Version (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE Close (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Execute (BSTR CommandText, VARIANT *RecordsAffected, long Options, _ADORecordset **ppiRset) = 0;
    virtual HRESULT STDMETHODCALLTYPE BeginTrans (long *TransactionLevel) = 0;
    virtual HRESULT STDMETHODCALLTYPE CommitTrans (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE RollbackTrans (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Open (BSTR ConnectionString = NULL, BSTR UserID = NULL, BSTR Password = NULL, long Options = adOptionUnspecified) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Errors (ADOErrors **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DefaultDatabase (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_DefaultDatabase (BSTR bstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_IsolationLevel (IsolationLevelEnum *Level) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_IsolationLevel (IsolationLevelEnum Level) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (long *plAttr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Attributes (long lAttr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CursorLocation (CursorLocationEnum *plCursorLoc) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CursorLocation (CursorLocationEnum lCursorLoc) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Mode (ConnectModeEnum *plMode) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Mode (ConnectModeEnum lMode) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Provider (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Provider (BSTR Provider) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_State (LONG *plObjState) = 0;
    virtual HRESULT STDMETHODCALLTYPE OpenSchema (SchemaEnum Schema, VARIANT Restrictions, VARIANT SchemaID, _ADORecordset **pprset) = 0;
  };
#else
  typedef struct Connection15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Connection15 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Connection15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Connection15 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Connection15 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Connection15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Connection15 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Connection15 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Connection15 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ConnectionString) (Connection15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_ConnectionString) (Connection15 *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_CommandTimeout) (Connection15 *This, LONG *plTimeout);
    HRESULT (STDMETHODCALLTYPE *put_CommandTimeout) (Connection15 *This, LONG lTimeout);
    HRESULT (STDMETHODCALLTYPE *get_ConnectionTimeout) (Connection15 *This, LONG *plTimeout);
    HRESULT (STDMETHODCALLTYPE *put_ConnectionTimeout) (Connection15 *This, LONG lTimeout);
    HRESULT (STDMETHODCALLTYPE *get_Version) (Connection15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *Close) (Connection15 *This);
    HRESULT (STDMETHODCALLTYPE *Execute) (Connection15 *This, BSTR CommandText, VARIANT *RecordsAffected, long Options, _ADORecordset **ppiRset);
    HRESULT (STDMETHODCALLTYPE *BeginTrans) (Connection15 *This, long *TransactionLevel);
    HRESULT (STDMETHODCALLTYPE *CommitTrans) (Connection15 *This);
    HRESULT (STDMETHODCALLTYPE *RollbackTrans) (Connection15 *This);
    HRESULT (STDMETHODCALLTYPE *Open) (Connection15 *This, BSTR ConnectionString, BSTR UserID, BSTR Password, long Options);
    HRESULT (STDMETHODCALLTYPE *get_Errors) (Connection15 *This, ADOErrors **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_DefaultDatabase) (Connection15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_DefaultDatabase) (Connection15 *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_IsolationLevel) (Connection15 *This, IsolationLevelEnum *Level);
    HRESULT (STDMETHODCALLTYPE *put_IsolationLevel) (Connection15 *This, IsolationLevelEnum Level);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (Connection15 *This, long *plAttr);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (Connection15 *This, long lAttr);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (Connection15 *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (Connection15 *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *get_Mode) (Connection15 *This, ConnectModeEnum *plMode);
    HRESULT (STDMETHODCALLTYPE *put_Mode) (Connection15 *This, ConnectModeEnum lMode);
    HRESULT (STDMETHODCALLTYPE *get_Provider) (Connection15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_Provider) (Connection15 *This, BSTR Provider);
    HRESULT (STDMETHODCALLTYPE *get_State) (Connection15 *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *OpenSchema) (Connection15 *This, SchemaEnum Schema, VARIANT Restrictions, VARIANT SchemaID, _ADORecordset **pprset);
    END_INTERFACE
  } Connection15Vtbl;
  interface Connection15 {
    CONST_VTBL struct Connection15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Connection15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Connection15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Connection15_Release(This) ((This)->lpVtbl ->Release (This))
#define Connection15_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Connection15_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Connection15_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Connection15_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Connection15_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Connection15_get_ConnectionString(This, pbstr) ((This)->lpVtbl ->get_ConnectionString (This, pbstr))
#define Connection15_put_ConnectionString(This, bstr) ((This)->lpVtbl ->put_ConnectionString (This, bstr))
#define Connection15_get_CommandTimeout(This, plTimeout) ((This)->lpVtbl ->get_CommandTimeout (This, plTimeout))
#define Connection15_put_CommandTimeout(This, lTimeout) ((This)->lpVtbl ->put_CommandTimeout (This, lTimeout))
#define Connection15_get_ConnectionTimeout(This, plTimeout) ((This)->lpVtbl ->get_ConnectionTimeout (This, plTimeout))
#define Connection15_put_ConnectionTimeout(This, lTimeout) ((This)->lpVtbl ->put_ConnectionTimeout (This, lTimeout))
#define Connection15_get_Version(This, pbstr) ((This)->lpVtbl ->get_Version (This, pbstr))
#define Connection15_Close(This) ((This)->lpVtbl ->Close (This))
#define Connection15_Execute(This, CommandText, RecordsAffected, Options, ppiRset) ((This)->lpVtbl ->Execute (This, CommandText, RecordsAffected, Options, ppiRset))
#define Connection15_BeginTrans(This, TransactionLevel) ((This)->lpVtbl ->BeginTrans (This, TransactionLevel))
#define Connection15_CommitTrans(This) ((This)->lpVtbl ->CommitTrans (This))
#define Connection15_RollbackTrans(This) ((This)->lpVtbl ->RollbackTrans (This))
#define Connection15_Open(This, ConnectionString, UserID, Password, Options) ((This)->lpVtbl ->Open (This, ConnectionString, UserID, Password, Options))
#define Connection15_get_Errors(This, ppvObject) ((This)->lpVtbl ->get_Errors (This, ppvObject))
#define Connection15_get_DefaultDatabase(This, pbstr) ((This)->lpVtbl ->get_DefaultDatabase (This, pbstr))
#define Connection15_put_DefaultDatabase(This, bstr) ((This)->lpVtbl ->put_DefaultDatabase (This, bstr))
#define Connection15_get_IsolationLevel(This, Level) ((This)->lpVtbl ->get_IsolationLevel (This, Level))
#define Connection15_put_IsolationLevel(This, Level) ((This)->lpVtbl ->put_IsolationLevel (This, Level))
#define Connection15_get_Attributes(This, plAttr) ((This)->lpVtbl ->get_Attributes (This, plAttr))
#define Connection15_put_Attributes(This, lAttr) ((This)->lpVtbl ->put_Attributes (This, lAttr))
#define Connection15_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define Connection15_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define Connection15_get_Mode(This, plMode) ((This)->lpVtbl ->get_Mode (This, plMode))
#define Connection15_put_Mode(This, lMode) ((This)->lpVtbl ->put_Mode (This, lMode))
#define Connection15_get_Provider(This, pbstr) ((This)->lpVtbl ->get_Provider (This, pbstr))
#define Connection15_put_Provider(This, Provider) ((This)->lpVtbl ->put_Provider (This, Provider))
#define Connection15_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define Connection15_OpenSchema(This, Schema, Restrictions, SchemaID, pprset) ((This)->lpVtbl ->OpenSchema (This, Schema, Restrictions, SchemaID, pprset))
#endif
#endif
#endif
#ifndef ___Connection_INTERFACE_DEFINED__
#define ___Connection_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Connection;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000550-0000-0010-8000-00AA006D2EA4")
  _ADOConnection : public Connection15 {
    public:
    virtual HRESULT STDMETHODCALLTYPE Cancel (void) = 0;
  };
#else
  typedef struct _ConnectionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOConnection *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOConnection *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOConnection *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOConnection *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOConnection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOConnection *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOConnection *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOConnection *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ConnectionString) (_ADOConnection *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_ConnectionString) (_ADOConnection *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_CommandTimeout) (_ADOConnection *This, LONG *plTimeout);
    HRESULT (STDMETHODCALLTYPE *put_CommandTimeout) (_ADOConnection *This, LONG lTimeout);
    HRESULT (STDMETHODCALLTYPE *get_ConnectionTimeout) (_ADOConnection *This, LONG *plTimeout);
    HRESULT (STDMETHODCALLTYPE *put_ConnectionTimeout) (_ADOConnection *This, LONG lTimeout);
    HRESULT (STDMETHODCALLTYPE *get_Version) (_ADOConnection *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *Close) (_ADOConnection *This);
    HRESULT (STDMETHODCALLTYPE *Execute) (_ADOConnection *This, BSTR CommandText, VARIANT *RecordsAffected, long Options, _ADORecordset **ppiRset);
    HRESULT (STDMETHODCALLTYPE *BeginTrans) (_ADOConnection *This, long *TransactionLevel);
    HRESULT (STDMETHODCALLTYPE *CommitTrans) (_ADOConnection *This);
    HRESULT (STDMETHODCALLTYPE *RollbackTrans) (_ADOConnection *This);
    HRESULT (STDMETHODCALLTYPE *Open) (_ADOConnection *This, BSTR ConnectionString, BSTR UserID, BSTR Password, long Options);
    HRESULT (STDMETHODCALLTYPE *get_Errors) (_ADOConnection *This, ADOErrors **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_DefaultDatabase) (_ADOConnection *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_DefaultDatabase) (_ADOConnection *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_IsolationLevel) (_ADOConnection *This, IsolationLevelEnum *Level);
    HRESULT (STDMETHODCALLTYPE *put_IsolationLevel) (_ADOConnection *This, IsolationLevelEnum Level);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (_ADOConnection *This, long *plAttr);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (_ADOConnection *This, long lAttr);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (_ADOConnection *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (_ADOConnection *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *get_Mode) (_ADOConnection *This, ConnectModeEnum *plMode);
    HRESULT (STDMETHODCALLTYPE *put_Mode) (_ADOConnection *This, ConnectModeEnum lMode);
    HRESULT (STDMETHODCALLTYPE *get_Provider) (_ADOConnection *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_Provider) (_ADOConnection *This, BSTR Provider);
    HRESULT (STDMETHODCALLTYPE *get_State) (_ADOConnection *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *OpenSchema) (_ADOConnection *This, SchemaEnum Schema, VARIANT Restrictions, VARIANT SchemaID, _ADORecordset **pprset);
    HRESULT (STDMETHODCALLTYPE *Cancel) (_ADOConnection *This);
    END_INTERFACE
  } _ConnectionVtbl;
  interface _Connection {
    CONST_VTBL struct _ConnectionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Connection_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Connection_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Connection_Release(This) ((This)->lpVtbl ->Release (This))
#define _Connection_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Connection_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Connection_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Connection_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Connection_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Connection_get_ConnectionString(This, pbstr) ((This)->lpVtbl ->get_ConnectionString (This, pbstr))
#define _Connection_put_ConnectionString(This, bstr) ((This)->lpVtbl ->put_ConnectionString (This, bstr))
#define _Connection_get_CommandTimeout(This, plTimeout) ((This)->lpVtbl ->get_CommandTimeout (This, plTimeout))
#define _Connection_put_CommandTimeout(This, lTimeout) ((This)->lpVtbl ->put_CommandTimeout (This, lTimeout))
#define _Connection_get_ConnectionTimeout(This, plTimeout) ((This)->lpVtbl ->get_ConnectionTimeout (This, plTimeout))
#define _Connection_put_ConnectionTimeout(This, lTimeout) ((This)->lpVtbl ->put_ConnectionTimeout (This, lTimeout))
#define _Connection_get_Version(This, pbstr) ((This)->lpVtbl ->get_Version (This, pbstr))
#define _Connection_Close(This) ((This)->lpVtbl ->Close (This))
#define _Connection_Execute(This, CommandText, RecordsAffected, Options, ppiRset) ((This)->lpVtbl ->Execute (This, CommandText, RecordsAffected, Options, ppiRset))
#define _Connection_BeginTrans(This, TransactionLevel) ((This)->lpVtbl ->BeginTrans (This, TransactionLevel))
#define _Connection_CommitTrans(This) ((This)->lpVtbl ->CommitTrans (This))
#define _Connection_RollbackTrans(This) ((This)->lpVtbl ->RollbackTrans (This))
#define _Connection_Open(This, ConnectionString, UserID, Password, Options) ((This)->lpVtbl ->Open (This, ConnectionString, UserID, Password, Options))
#define _Connection_get_Errors(This, ppvObject) ((This)->lpVtbl ->get_Errors (This, ppvObject))
#define _Connection_get_DefaultDatabase(This, pbstr) ((This)->lpVtbl ->get_DefaultDatabase (This, pbstr))
#define _Connection_put_DefaultDatabase(This, bstr) ((This)->lpVtbl ->put_DefaultDatabase (This, bstr))
#define _Connection_get_IsolationLevel(This, Level) ((This)->lpVtbl ->get_IsolationLevel (This, Level))
#define _Connection_put_IsolationLevel(This, Level) ((This)->lpVtbl ->put_IsolationLevel (This, Level))
#define _Connection_get_Attributes(This, plAttr) ((This)->lpVtbl ->get_Attributes (This, plAttr))
#define _Connection_put_Attributes(This, lAttr) ((This)->lpVtbl ->put_Attributes (This, lAttr))
#define _Connection_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define _Connection_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define _Connection_get_Mode(This, plMode) ((This)->lpVtbl ->get_Mode (This, plMode))
#define _Connection_put_Mode(This, lMode) ((This)->lpVtbl ->put_Mode (This, lMode))
#define _Connection_get_Provider(This, pbstr) ((This)->lpVtbl ->get_Provider (This, pbstr))
#define _Connection_put_Provider(This, Provider) ((This)->lpVtbl ->put_Provider (This, Provider))
#define _Connection_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define _Connection_OpenSchema(This, Schema, Restrictions, SchemaID, pprset) ((This)->lpVtbl ->OpenSchema (This, Schema, Restrictions, SchemaID, pprset))
#define _Connection_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#endif
#endif
#endif
#ifndef __ADOConnectionConstruction15_INTERFACE_DEFINED__
#define __ADOConnectionConstruction15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADOConnectionConstruction15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000516-0000-0010-8000-00AA006D2EA4")
  ADOConnectionConstruction15 : public IUnknown {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_DSO (IUnknown **ppDSO) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Session (IUnknown **ppSession) = 0;
    virtual HRESULT STDMETHODCALLTYPE WrapDSOandSession (IUnknown *pDSO, IUnknown *pSession) = 0;
  };
#else
  typedef struct ADOConnectionConstruction15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOConnectionConstruction15 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOConnectionConstruction15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOConnectionConstruction15 *This);
    HRESULT (STDMETHODCALLTYPE *get_DSO) (ADOConnectionConstruction15 *This, IUnknown **ppDSO);
    HRESULT (STDMETHODCALLTYPE *get_Session) (ADOConnectionConstruction15 *This, IUnknown **ppSession);
    HRESULT (STDMETHODCALLTYPE *WrapDSOandSession) (ADOConnectionConstruction15 *This, IUnknown *pDSO, IUnknown *pSession);
    END_INTERFACE
  } ADOConnectionConstruction15Vtbl;
  interface ADOConnectionConstruction15 {
    CONST_VTBL struct ADOConnectionConstruction15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADOConnectionConstruction15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADOConnectionConstruction15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADOConnectionConstruction15_Release(This) ((This)->lpVtbl ->Release (This))
#define ADOConnectionConstruction15_get_DSO(This, ppDSO) ((This)->lpVtbl ->get_DSO (This, ppDSO))
#define ADOConnectionConstruction15_get_Session(This, ppSession) ((This)->lpVtbl ->get_Session (This, ppSession))
#define ADOConnectionConstruction15_WrapDSOandSession(This, pDSO, pSession) ((This)->lpVtbl ->WrapDSOandSession (This, pDSO, pSession))
#endif
#endif
#endif
#ifndef __ADOConnectionConstruction_INTERFACE_DEFINED__
#define __ADOConnectionConstruction_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADOConnectionConstruction;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000551-0000-0010-8000-00AA006D2EA4")
  ADOConnectionConstruction : public ADOConnectionConstruction15 {
    public:
  };
#else
  typedef struct ADOConnectionConstructionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOConnectionConstruction *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOConnectionConstruction *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOConnectionConstruction *This);
    HRESULT (STDMETHODCALLTYPE *get_DSO) (ADOConnectionConstruction *This, IUnknown **ppDSO);
    HRESULT (STDMETHODCALLTYPE *get_Session) (ADOConnectionConstruction *This, IUnknown **ppSession);
    HRESULT (STDMETHODCALLTYPE *WrapDSOandSession) (ADOConnectionConstruction *This, IUnknown *pDSO, IUnknown *pSession);
    END_INTERFACE
  } ADOConnectionConstructionVtbl;
  interface ADOConnectionConstruction {
    CONST_VTBL struct ADOConnectionConstructionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADOConnectionConstruction_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADOConnectionConstruction_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADOConnectionConstruction_Release(This) ((This)->lpVtbl ->Release (This))
#define ADOConnectionConstruction_get_DSO(This, ppDSO) ((This)->lpVtbl ->get_DSO (This, ppDSO))
#define ADOConnectionConstruction_get_Session(This, ppSession) ((This)->lpVtbl ->get_Session (This, ppSession))
#define ADOConnectionConstruction_WrapDSOandSession(This, pDSO, pSession) ((This)->lpVtbl ->WrapDSOandSession (This, pDSO, pSession))
#endif
#endif
#endif
  EXTERN_C const CLSID CLSID_Connection;
#ifdef __cplusplus
  Connection;
#endif
#ifndef ___Record_INTERFACE_DEFINED__
#define ___Record_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Record;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000562-0000-0010-8000-00AA006D2EA4")
  _ADORecord : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ActiveConnection (BSTR bstrConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ActiveConnection (_ADOConnection *Con) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_State (ObjectStateEnum *pState) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Source (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Source (BSTR Source) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_Source (IDispatch *Source) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Mode (ConnectModeEnum *pMode) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Mode (ConnectModeEnum Mode) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ParentURL (BSTR *pbstrParentURL) = 0;
    virtual HRESULT STDMETHODCALLTYPE MoveRecord (BSTR Source, BSTR Destination, BSTR UserName, BSTR Password, MoveRecordOptionsEnum Options, VARIANT_BOOL Async, BSTR *pbstrNewURL) = 0;
    virtual HRESULT STDMETHODCALLTYPE CopyRecord (BSTR Source, BSTR Destination, BSTR UserName, BSTR Password, CopyRecordOptionsEnum Options, VARIANT_BOOL Async, BSTR *pbstrNewURL) = 0;
    virtual HRESULT STDMETHODCALLTYPE DeleteRecord (BSTR Source = NULL, VARIANT_BOOL Async = 0) = 0;
    virtual HRESULT STDMETHODCALLTYPE Open (VARIANT Source, VARIANT ActiveConnection, ConnectModeEnum Mode = adModeUnknown, RecordCreateOptionsEnum CreateOptions = adFailIfNotExists, RecordOpenOptionsEnum Options = adOpenRecordUnspecified, BSTR UserName = NULL, BSTR Password = NULL) = 0;
    virtual HRESULT STDMETHODCALLTYPE Close (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Fields (ADOFields **ppFlds) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_RecordType (RecordTypeEnum *pType) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetChildren (_ADORecordset **ppRSet) = 0;
    virtual HRESULT STDMETHODCALLTYPE Cancel (void) = 0;
  };
#else
  typedef struct _RecordVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADORecord *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADORecord *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADORecord *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADORecord *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADORecord *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADORecord *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADORecord *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADORecord *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (_ADORecord *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (_ADORecord *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (_ADORecord *This, _ADOConnection *Con);
    HRESULT (STDMETHODCALLTYPE *get_State) (_ADORecord *This, ObjectStateEnum *pState);
    HRESULT (STDMETHODCALLTYPE *get_Source) (_ADORecord *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Source) (_ADORecord *This, BSTR Source);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (_ADORecord *This, IDispatch *Source);
    HRESULT (STDMETHODCALLTYPE *get_Mode) (_ADORecord *This, ConnectModeEnum *pMode);
    HRESULT (STDMETHODCALLTYPE *put_Mode) (_ADORecord *This, ConnectModeEnum Mode);
    HRESULT (STDMETHODCALLTYPE *get_ParentURL) (_ADORecord *This, BSTR *pbstrParentURL);
    HRESULT (STDMETHODCALLTYPE *MoveADORecord) (_ADORecord *This, BSTR Source, BSTR Destination, BSTR UserName, BSTR Password, MoveRecordOptionsEnum Options, VARIANT_BOOL Async, BSTR *pbstrNewURL);
    HRESULT (STDMETHODCALLTYPE *CopyADORecord) (_ADORecord *This, BSTR Source, BSTR Destination, BSTR UserName, BSTR Password, CopyRecordOptionsEnum Options, VARIANT_BOOL Async, BSTR *pbstrNewURL);
    HRESULT (STDMETHODCALLTYPE *DeleteADORecord) (_ADORecord *This, BSTR Source, VARIANT_BOOL Async);
    HRESULT (STDMETHODCALLTYPE *Open) (_ADORecord *This, VARIANT Source, VARIANT ActiveConnection, ConnectModeEnum Mode, RecordCreateOptionsEnum CreateOptions, RecordOpenOptionsEnum Options, BSTR UserName, BSTR Password);
    HRESULT (STDMETHODCALLTYPE *Close) (_ADORecord *This);
    HRESULT (STDMETHODCALLTYPE *get_Fields) (_ADORecord *This, ADOFields **ppFlds);
    HRESULT (STDMETHODCALLTYPE *get_RecordType) (_ADORecord *This, RecordTypeEnum *pType);
    HRESULT (STDMETHODCALLTYPE *GetChildren) (_ADORecord *This, _ADORecordset **ppRSet);
    HRESULT (STDMETHODCALLTYPE *Cancel) (_ADORecord *This);
    END_INTERFACE
  } _RecordVtbl;
  interface _Record {
    CONST_VTBL struct _RecordVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Record_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Record_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Record_Release(This) ((This)->lpVtbl ->Release (This))
#define _Record_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Record_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Record_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Record_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Record_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Record_get_ActiveConnection(This, pvar) ((This)->lpVtbl ->get_ActiveConnection (This, pvar))
#define _Record_put_ActiveConnection(This, bstrConn) ((This)->lpVtbl ->put_ActiveConnection (This, bstrConn))
#define _Record_putref_ActiveConnection(This, Con) ((This)->lpVtbl ->putref_ActiveConnection (This, Con))
#define _Record_get_State(This, pState) ((This)->lpVtbl ->get_State (This, pState))
#define _Record_get_Source(This, pvar) ((This)->lpVtbl ->get_Source (This, pvar))
#define _Record_put_Source(This, Source) ((This)->lpVtbl ->put_Source (This, Source))
#define _Record_putref_Source(This, Source) ((This)->lpVtbl ->putref_Source (This, Source))
#define _Record_get_Mode(This, pMode) ((This)->lpVtbl ->get_Mode (This, pMode))
#define _Record_put_Mode(This, Mode) ((This)->lpVtbl ->put_Mode (This, Mode))
#define _Record_get_ParentURL(This, pbstrParentURL) ((This)->lpVtbl ->get_ParentURL (This, pbstrParentURL))
#define _Record_MoveRecord(This, Source, Destination, UserName, Password, Options, Async, pbstrNewURL) ((This)->lpVtbl ->MoveRecord (This, Source, Destination, UserName, Password, Options, Async, pbstrNewURL))
#define _Record_CopyRecord(This, Source, Destination, UserName, Password, Options, Async, pbstrNewURL) ((This)->lpVtbl ->CopyRecord (This, Source, Destination, UserName, Password, Options, Async, pbstrNewURL))
#define _Record_DeleteRecord(This, Source, Async) ((This)->lpVtbl ->DeleteRecord (This, Source, Async))
#define _Record_Open(This, Source, ActiveConnection, Mode, CreateOptions, Options, UserName, Password) ((This)->lpVtbl ->Open (This, Source, ActiveConnection, Mode, CreateOptions, Options, UserName, Password))
#define _Record_Close(This) ((This)->lpVtbl ->Close (This))
#define _Record_get_Fields(This, ppFlds) ((This)->lpVtbl ->get_Fields (This, ppFlds))
#define _Record_get_RecordType(This, pType) ((This)->lpVtbl ->get_RecordType (This, pType))
#define _Record_GetChildren(This, ppRSet) ((This)->lpVtbl ->GetChildren (This, ppRSet))
#define _Record_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#endif
#endif
#endif
  EXTERN_C const CLSID CLSID_Record;
#ifdef __cplusplus
  Record;
#endif
#ifndef ___Stream_INTERFACE_DEFINED__
#define ___Stream_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Stream;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000565-0000-0010-8000-00AA006D2EA4")
  _ADOStream : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Size (ADO_LONGPTR *pSize) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_EOS (VARIANT_BOOL *pEOS) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Position (ADO_LONGPTR *pPos) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Position (ADO_LONGPTR Position) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (StreamTypeEnum *pType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Type (StreamTypeEnum Type) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_LineSeparator (LineSeparatorEnum *pLS) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_LineSeparator (LineSeparatorEnum LineSeparator) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_State (ObjectStateEnum *pState) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Mode (ConnectModeEnum *pMode) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Mode (ConnectModeEnum Mode) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Charset (BSTR *pbstrCharset) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Charset (BSTR Charset) = 0;
    virtual HRESULT STDMETHODCALLTYPE Read (long NumBytes, VARIANT *pVal) = 0;
    virtual HRESULT STDMETHODCALLTYPE Open (VARIANT Source, ConnectModeEnum Mode = adModeUnknown, StreamOpenOptionsEnum Options = adOpenStreamUnspecified, BSTR UserName = NULL, BSTR Password = NULL) = 0;
    virtual HRESULT STDMETHODCALLTYPE Close (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE SkipLine (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Write (VARIANT Buffer) = 0;
    virtual HRESULT STDMETHODCALLTYPE SetEOS (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE CopyTo (_ADOStream *DestStream, ADO_LONGPTR CharNumber = -1) = 0;
    virtual HRESULT STDMETHODCALLTYPE Flush (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE SaveToFile (BSTR FileName, SaveOptionsEnum Options = adSaveCreateNotExist) = 0;
    virtual HRESULT STDMETHODCALLTYPE LoadFromFile (BSTR FileName) = 0;
    virtual HRESULT STDMETHODCALLTYPE ReadText (long NumChars, BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE WriteText (BSTR Data, StreamWriteEnum Options = adWriteChar) = 0;
    virtual HRESULT STDMETHODCALLTYPE Cancel (void) = 0;
  };
#else
  typedef struct _StreamVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOStream *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOStream *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOStream *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOStream *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOStream *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOStream *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOStream *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Size) (_ADOStream *This, ADO_LONGPTR *pSize);
    HRESULT (STDMETHODCALLTYPE *get_EOS) (_ADOStream *This, VARIANT_BOOL *pEOS);
    HRESULT (STDMETHODCALLTYPE *get_Position) (_ADOStream *This, ADO_LONGPTR *pPos);
    HRESULT (STDMETHODCALLTYPE *put_Position) (_ADOStream *This, ADO_LONGPTR Position);
    HRESULT (STDMETHODCALLTYPE *get_Type) (_ADOStream *This, StreamTypeEnum *pType);
    HRESULT (STDMETHODCALLTYPE *put_Type) (_ADOStream *This, StreamTypeEnum Type);
    HRESULT (STDMETHODCALLTYPE *get_LineSeparator) (_ADOStream *This, LineSeparatorEnum *pLS);
    HRESULT (STDMETHODCALLTYPE *put_LineSeparator) (_ADOStream *This, LineSeparatorEnum LineSeparator);
    HRESULT (STDMETHODCALLTYPE *get_State) (_ADOStream *This, ObjectStateEnum *pState);
    HRESULT (STDMETHODCALLTYPE *get_Mode) (_ADOStream *This, ConnectModeEnum *pMode);
    HRESULT (STDMETHODCALLTYPE *put_Mode) (_ADOStream *This, ConnectModeEnum Mode);
    HRESULT (STDMETHODCALLTYPE *get_Charset) (_ADOStream *This, BSTR *pbstrCharset);
    HRESULT (STDMETHODCALLTYPE *put_Charset) (_ADOStream *This, BSTR Charset);
    HRESULT (STDMETHODCALLTYPE *Read) (_ADOStream *This, long NumBytes, VARIANT *pVal);
    HRESULT (STDMETHODCALLTYPE *Open) (_ADOStream *This, VARIANT Source, ConnectModeEnum Mode, StreamOpenOptionsEnum Options, BSTR UserName, BSTR Password);
    HRESULT (STDMETHODCALLTYPE *Close) (_ADOStream *This);
    HRESULT (STDMETHODCALLTYPE *SkipLine) (_ADOStream *This);
    HRESULT (STDMETHODCALLTYPE *Write) (_ADOStream *This, VARIANT Buffer);
    HRESULT (STDMETHODCALLTYPE *SetEOS) (_ADOStream *This);
    HRESULT (STDMETHODCALLTYPE *CopyTo) (_ADOStream *This, _ADOStream *DestStream, ADO_LONGPTR CharNumber);
    HRESULT (STDMETHODCALLTYPE *Flush) (_ADOStream *This);
    HRESULT (STDMETHODCALLTYPE *SaveToFile) (_ADOStream *This, BSTR FileName, SaveOptionsEnum Options);
    HRESULT (STDMETHODCALLTYPE *LoadFromFile) (_ADOStream *This, BSTR FileName);
    HRESULT (STDMETHODCALLTYPE *ReadText) (_ADOStream *This, long NumChars, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *WriteText) (_ADOStream *This, BSTR Data, StreamWriteEnum Options);
    HRESULT (STDMETHODCALLTYPE *Cancel) (_ADOStream *This);
    END_INTERFACE
  } _StreamVtbl;
  interface _Stream {
    CONST_VTBL struct _StreamVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Stream_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Stream_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Stream_Release(This) ((This)->lpVtbl ->Release (This))
#define _Stream_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Stream_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Stream_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Stream_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Stream_get_Size(This, pSize) ((This)->lpVtbl ->get_Size (This, pSize))
#define _Stream_get_EOS(This, pEOS) ((This)->lpVtbl ->get_EOS (This, pEOS))
#define _Stream_get_Position(This, pPos) ((This)->lpVtbl ->get_Position (This, pPos))
#define _Stream_put_Position(This, Position) ((This)->lpVtbl ->put_Position (This, Position))
#define _Stream_get_Type(This, pType) ((This)->lpVtbl ->get_Type (This, pType))
#define _Stream_put_Type(This, Type) ((This)->lpVtbl ->put_Type (This, Type))
#define _Stream_get_LineSeparator(This, pLS) ((This)->lpVtbl ->get_LineSeparator (This, pLS))
#define _Stream_put_LineSeparator(This, LineSeparator) ((This)->lpVtbl ->put_LineSeparator (This, LineSeparator))
#define _Stream_get_State(This, pState) ((This)->lpVtbl ->get_State (This, pState))
#define _Stream_get_Mode(This, pMode) ((This)->lpVtbl ->get_Mode (This, pMode))
#define _Stream_put_Mode(This, Mode) ((This)->lpVtbl ->put_Mode (This, Mode))
#define _Stream_get_Charset(This, pbstrCharset) ((This)->lpVtbl ->get_Charset (This, pbstrCharset))
#define _Stream_put_Charset(This, Charset) ((This)->lpVtbl ->put_Charset (This, Charset))
#define _Stream_Read(This, NumBytes, pVal) ((This)->lpVtbl ->Read (This, NumBytes, pVal))
#define _Stream_Open(This, Source, Mode, Options, UserName, Password) ((This)->lpVtbl ->Open (This, Source, Mode, Options, UserName, Password))
#define _Stream_Close(This) ((This)->lpVtbl ->Close (This))
#define _Stream_SkipLine(This) ((This)->lpVtbl ->SkipLine (This))
#define _Stream_Write(This, Buffer) ((This)->lpVtbl ->Write (This, Buffer))
#define _Stream_SetEOS(This) ((This)->lpVtbl ->SetEOS (This))
#define _Stream_CopyTo(This, DestStream, CharNumber) ((This)->lpVtbl ->CopyTo (This, DestStream, CharNumber))
#define _Stream_Flush(This) ((This)->lpVtbl ->Flush (This))
#define _Stream_SaveToFile(This, FileName, Options) ((This)->lpVtbl ->SaveToFile (This, FileName, Options))
#define _Stream_LoadFromFile(This, FileName) ((This)->lpVtbl ->LoadFromFile (This, FileName))
#define _Stream_ReadText(This, NumChars, pbstr) ((This)->lpVtbl ->ReadText (This, NumChars, pbstr))
#define _Stream_WriteText(This, Data, Options) ((This)->lpVtbl ->WriteText (This, Data, Options))
#define _Stream_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#endif
#endif
#endif
  EXTERN_C const CLSID CLSID_Stream;
#ifdef __cplusplus
  Stream;
#endif
#ifndef __ADORecordConstruction_INTERFACE_DEFINED__
#define __ADORecordConstruction_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADORecordConstruction;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000567-0000-0010-8000-00AA006D2EA4")
  ADORecordConstruction : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Row (IUnknown **ppRow) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Row (IUnknown *pRow) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ParentRow (IUnknown *pRow) = 0;
  };
#else
  typedef struct ADORecordConstructionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADORecordConstruction *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADORecordConstruction *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADORecordConstruction *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADORecordConstruction *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADORecordConstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADORecordConstruction *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADORecordConstruction *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Row) (ADORecordConstruction *This, IUnknown **ppRow);
    HRESULT (STDMETHODCALLTYPE *put_Row) (ADORecordConstruction *This, IUnknown *pRow);
    HRESULT (STDMETHODCALLTYPE *put_ParentRow) (ADORecordConstruction *This, IUnknown *pRow);
    END_INTERFACE
  } ADORecordConstructionVtbl;
  interface ADORecordConstruction {
    CONST_VTBL struct ADORecordConstructionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADORecordConstruction_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADORecordConstruction_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADORecordConstruction_Release(This) ((This)->lpVtbl ->Release (This))
#define ADORecordConstruction_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define ADORecordConstruction_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define ADORecordConstruction_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define ADORecordConstruction_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define ADORecordConstruction_get_Row(This, ppRow) ((This)->lpVtbl ->get_Row (This, ppRow))
#define ADORecordConstruction_put_Row(This, pRow) ((This)->lpVtbl ->put_Row (This, pRow))
#define ADORecordConstruction_put_ParentRow(This, pRow) ((This)->lpVtbl ->put_ParentRow (This, pRow))
#endif
#endif
#endif
#ifndef __ADOStreamConstruction_INTERFACE_DEFINED__
#define __ADOStreamConstruction_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADOStreamConstruction;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000568-0000-0010-8000-00AA006D2EA4")
  ADOStreamConstruction : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Stream (IUnknown **ppStm) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Stream (IUnknown *pStm) = 0;
  };
#else
  typedef struct ADOStreamConstructionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOStreamConstruction *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOStreamConstruction *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOStreamConstruction *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOStreamConstruction *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOStreamConstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOStreamConstruction *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOStreamConstruction *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Stream) (ADOStreamConstruction *This, IUnknown **ppStm);
    HRESULT (STDMETHODCALLTYPE *put_Stream) (ADOStreamConstruction *This, IUnknown *pStm);
    END_INTERFACE
  } ADOStreamConstructionVtbl;
  interface ADOStreamConstruction {
    CONST_VTBL struct ADOStreamConstructionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADOStreamConstruction_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADOStreamConstruction_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADOStreamConstruction_Release(This) ((This)->lpVtbl ->Release (This))
#define ADOStreamConstruction_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define ADOStreamConstruction_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define ADOStreamConstruction_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define ADOStreamConstruction_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define ADOStreamConstruction_get_Stream(This, ppStm) ((This)->lpVtbl ->get_Stream (This, ppStm))
#define ADOStreamConstruction_put_Stream(This, pStm) ((This)->lpVtbl ->put_Stream (This, pStm))
#endif
#endif
#endif
#ifndef __ADOCommandConstruction_INTERFACE_DEFINED__
#define __ADOCommandConstruction_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADOCommandConstruction;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000517-0000-0010-8000-00AA006D2EA4")
  ADOCommandConstruction : public IUnknown {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_OLEDBCommand (IUnknown **ppOLEDBCommand) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_OLEDBCommand (IUnknown *pOLEDBCommand) = 0;
  };
#else
  typedef struct ADOCommandConstructionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOCommandConstruction *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOCommandConstruction *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOCommandConstruction *This);
    HRESULT (STDMETHODCALLTYPE *get_OLEDBCommand) (ADOCommandConstruction *This, IUnknown **ppOLEDBCommand);
    HRESULT (STDMETHODCALLTYPE *put_OLEDBCommand) (ADOCommandConstruction *This, IUnknown *pOLEDBCommand);
    END_INTERFACE
  } ADOCommandConstructionVtbl;
  interface ADOCommandConstruction {
    CONST_VTBL struct ADOCommandConstructionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADOCommandConstruction_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADOCommandConstruction_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADOCommandConstruction_Release(This) ((This)->lpVtbl ->Release (This))
#define ADOCommandConstruction_get_OLEDBCommand(This, ppOLEDBCommand) ((This)->lpVtbl ->get_OLEDBCommand (This, ppOLEDBCommand))
#define ADOCommandConstruction_put_OLEDBCommand(This, pOLEDBCommand) ((This)->lpVtbl ->put_OLEDBCommand (This, pOLEDBCommand))
#endif
#endif
#endif
  EXTERN_C const CLSID CLSID_Command;
#ifdef __cplusplus
  Command;
#endif
  EXTERN_C const CLSID CLSID_Recordset;
#ifdef __cplusplus
  Recordset;
#endif
#ifndef __Recordset15_INTERFACE_DEFINED__
#define __Recordset15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Recordset15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000050E-0000-0010-8000-00AA006D2EA4")
  Recordset15 : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_AbsolutePosition (PositionEnum_Param *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_AbsolutePosition (PositionEnum_Param Position) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ActiveConnection (IDispatch *pconn) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ActiveConnection (VARIANT vConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_BOF (VARIANT_BOOL *pb) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Bookmark (VARIANT *pvBookmark) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Bookmark (VARIANT vBookmark) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CacheSize (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CacheSize (long CacheSize) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CursorType (CursorTypeEnum *plCursorType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CursorType (CursorTypeEnum lCursorType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_EOF (VARIANT_BOOL *pb) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Fields (ADOFields **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_LockType (LockTypeEnum *plLockType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_LockType (LockTypeEnum lLockType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_MaxRecords (ADO_LONGPTR *plMaxRecords) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_MaxRecords (ADO_LONGPTR lMaxRecords) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_RecordCount (ADO_LONGPTR *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_Source (IDispatch *pcmd) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Source (BSTR bstrConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Source (VARIANT *pvSource) = 0;
    virtual HRESULT STDMETHODCALLTYPE AddNew (VARIANT FieldList, VARIANT Values) = 0;
    virtual HRESULT STDMETHODCALLTYPE CancelUpdate (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Close (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (AffectEnum AffectRecords = adAffectCurrent) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetRows (long Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE Move (ADO_LONGPTR NumRecords, VARIANT Start) = 0;
    virtual HRESULT STDMETHODCALLTYPE MoveNext (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE MovePrevious (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE MoveFirst (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE MoveLast (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Open (VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType = adOpenUnspecified, LockTypeEnum LockType = adLockUnspecified, LONG Options = adCmdUnspecified) = 0;
    virtual HRESULT STDMETHODCALLTYPE Requery (LONG Options = adOptionUnspecified) = 0;
    virtual HRESULT STDMETHODCALLTYPE _xResync (AffectEnum AffectRecords = adAffectAll) = 0;
    virtual HRESULT STDMETHODCALLTYPE Update (VARIANT Fields, VARIANT Values) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_AbsolutePage (PositionEnum_Param *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_AbsolutePage (PositionEnum_Param Page) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_EditMode (EditModeEnum *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Filter (VARIANT *Criteria) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Filter (VARIANT Criteria) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_PageCount (ADO_LONGPTR *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_PageSize (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_PageSize (long PageSize) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Sort (BSTR *Criteria) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Sort (BSTR Criteria) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Status (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_State (LONG *plObjState) = 0;
    virtual HRESULT STDMETHODCALLTYPE _xClone (_ADORecordset **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE UpdateBatch (AffectEnum AffectRecords = adAffectAll) = 0;
    virtual HRESULT STDMETHODCALLTYPE CancelBatch (AffectEnum AffectRecords = adAffectAll) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CursorLocation (CursorLocationEnum *plCursorLoc) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_CursorLocation (CursorLocationEnum lCursorLoc) = 0;
    virtual HRESULT STDMETHODCALLTYPE NextRecordset (VARIANT *RecordsAffected, _ADORecordset **ppiRs) = 0;
    virtual HRESULT STDMETHODCALLTYPE Supports (CursorOptionEnum CursorOptions, VARIANT_BOOL *pb) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Collect (VARIANT Index, VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Collect (VARIANT Index, VARIANT value) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_MarshalOptions (MarshalOptionsEnum *peMarshal) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_MarshalOptions (MarshalOptionsEnum eMarshal) = 0;
    virtual HRESULT STDMETHODCALLTYPE Find (BSTR Criteria, ADO_LONGPTR SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start) = 0;
  };
#else
  typedef struct Recordset15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Recordset15 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Recordset15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Recordset15 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Recordset15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Recordset15 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Recordset15 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Recordset15 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePosition) (Recordset15 *This, PositionEnum_Param *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePosition) (Recordset15 *This, PositionEnum_Param Position);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (Recordset15 *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (Recordset15 *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (Recordset15 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_BOF) (Recordset15 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Bookmark) (Recordset15 *This, VARIANT *pvBookmark);
    HRESULT (STDMETHODCALLTYPE *put_Bookmark) (Recordset15 *This, VARIANT vBookmark);
    HRESULT (STDMETHODCALLTYPE *get_CacheSize) (Recordset15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_CacheSize) (Recordset15 *This, long CacheSize);
    HRESULT (STDMETHODCALLTYPE *get_CursorType) (Recordset15 *This, CursorTypeEnum *plCursorType);
    HRESULT (STDMETHODCALLTYPE *put_CursorType) (Recordset15 *This, CursorTypeEnum lCursorType);
    HRESULT (STDMETHODCALLTYPE *get_EOF) (Recordset15 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Fields) (Recordset15 *This, ADOFields **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_LockType) (Recordset15 *This, LockTypeEnum *plLockType);
    HRESULT (STDMETHODCALLTYPE *put_LockType) (Recordset15 *This, LockTypeEnum lLockType);
    HRESULT (STDMETHODCALLTYPE *get_MaxRecords) (Recordset15 *This, ADO_LONGPTR *plMaxRecords);
    HRESULT (STDMETHODCALLTYPE *put_MaxRecords) (Recordset15 *This, ADO_LONGPTR lMaxRecords);
    HRESULT (STDMETHODCALLTYPE *get_RecordCount) (Recordset15 *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (Recordset15 *This, IDispatch *pcmd);
    HRESULT (STDMETHODCALLTYPE *put_Source) (Recordset15 *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *get_Source) (Recordset15 *This, VARIANT *pvSource);
    HRESULT (STDMETHODCALLTYPE *AddNew) (Recordset15 *This, VARIANT FieldList, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *CancelUpdate) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *Close) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *Delete) (Recordset15 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *GetRows) (Recordset15 *This, long Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *Move) (Recordset15 *This, ADO_LONGPTR NumRecords, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *MoveNext) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *MovePrevious) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *MoveFirst) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *MoveLast) (Recordset15 *This);
    HRESULT (STDMETHODCALLTYPE *Open) (Recordset15 *This, VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType, LockTypeEnum LockType, LONG Options);
    HRESULT (STDMETHODCALLTYPE *Requery) (Recordset15 *This, LONG Options);
    HRESULT (STDMETHODCALLTYPE *_xResync) (Recordset15 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *Update) (Recordset15 *This, VARIANT Fields, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePage) (Recordset15 *This, PositionEnum_Param *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePage) (Recordset15 *This, PositionEnum_Param Page);
    HRESULT (STDMETHODCALLTYPE *get_EditMode) (Recordset15 *This, EditModeEnum *pl);
    HRESULT (STDMETHODCALLTYPE *get_Filter) (Recordset15 *This, VARIANT *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Filter) (Recordset15 *This, VARIANT Criteria);
    HRESULT (STDMETHODCALLTYPE *get_PageCount) (Recordset15 *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *get_PageSize) (Recordset15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_PageSize) (Recordset15 *This, long PageSize);
    HRESULT (STDMETHODCALLTYPE *get_Sort) (Recordset15 *This, BSTR *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Sort) (Recordset15 *This, BSTR Criteria);
    HRESULT (STDMETHODCALLTYPE *get_Status) (Recordset15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_State) (Recordset15 *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *_xClone) (Recordset15 *This, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *UpdateBatch) (Recordset15 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *CancelBatch) (Recordset15 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (Recordset15 *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (Recordset15 *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *NextADORecordset) (Recordset15 *This, VARIANT *RecordsAffected, _ADORecordset **ppiRs);
    HRESULT (STDMETHODCALLTYPE *Supports) (Recordset15 *This, CursorOptionEnum CursorOptions, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Collect) (Recordset15 *This, VARIANT Index, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Collect) (Recordset15 *This, VARIANT Index, VARIANT value);
    HRESULT (STDMETHODCALLTYPE *get_MarshalOptions) (Recordset15 *This, MarshalOptionsEnum *peMarshal);
    HRESULT (STDMETHODCALLTYPE *put_MarshalOptions) (Recordset15 *This, MarshalOptionsEnum eMarshal);
    HRESULT (STDMETHODCALLTYPE *Find) (Recordset15 *This, BSTR Criteria, ADO_LONGPTR SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start);
    END_INTERFACE
  } Recordset15Vtbl;
  interface Recordset15 {
    CONST_VTBL struct Recordset15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Recordset15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Recordset15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Recordset15_Release(This) ((This)->lpVtbl ->Release (This))
#define Recordset15_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Recordset15_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Recordset15_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Recordset15_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Recordset15_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Recordset15_get_AbsolutePosition(This, pl) ((This)->lpVtbl ->get_AbsolutePosition (This, pl))
#define Recordset15_put_AbsolutePosition(This, Position) ((This)->lpVtbl ->put_AbsolutePosition (This, Position))
#define Recordset15_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define Recordset15_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define Recordset15_get_ActiveConnection(This, pvar) ((This)->lpVtbl ->get_ActiveConnection (This, pvar))
#define Recordset15_get_BOF(This, pb) ((This)->lpVtbl ->get_BOF (This, pb))
#define Recordset15_get_Bookmark(This, pvBookmark) ((This)->lpVtbl ->get_Bookmark (This, pvBookmark))
#define Recordset15_put_Bookmark(This, vBookmark) ((This)->lpVtbl ->put_Bookmark (This, vBookmark))
#define Recordset15_get_CacheSize(This, pl) ((This)->lpVtbl ->get_CacheSize (This, pl))
#define Recordset15_put_CacheSize(This, CacheSize) ((This)->lpVtbl ->put_CacheSize (This, CacheSize))
#define Recordset15_get_CursorType(This, plCursorType) ((This)->lpVtbl ->get_CursorType (This, plCursorType))
#define Recordset15_put_CursorType(This, lCursorType) ((This)->lpVtbl ->put_CursorType (This, lCursorType))
#define Recordset15_get_EOF(This, pb) ((This)->lpVtbl ->get_EOF (This, pb))
#define Recordset15_get_Fields(This, ppvObject) ((This)->lpVtbl ->get_Fields (This, ppvObject))
#define Recordset15_get_LockType(This, plLockType) ((This)->lpVtbl ->get_LockType (This, plLockType))
#define Recordset15_put_LockType(This, lLockType) ((This)->lpVtbl ->put_LockType (This, lLockType))
#define Recordset15_get_MaxRecords(This, plMaxRecords) ((This)->lpVtbl ->get_MaxRecords (This, plMaxRecords))
#define Recordset15_put_MaxRecords(This, lMaxRecords) ((This)->lpVtbl ->put_MaxRecords (This, lMaxRecords))
#define Recordset15_get_RecordCount(This, pl) ((This)->lpVtbl ->get_RecordCount (This, pl))
#define Recordset15_putref_Source(This, pcmd) ((This)->lpVtbl ->putref_Source (This, pcmd))
#define Recordset15_put_Source(This, bstrConn) ((This)->lpVtbl ->put_Source (This, bstrConn))
#define Recordset15_get_Source(This, pvSource) ((This)->lpVtbl ->get_Source (This, pvSource))
#define Recordset15_AddNew(This, FieldList, Values) ((This)->lpVtbl ->AddNew (This, FieldList, Values))
#define Recordset15_CancelUpdate(This) ((This)->lpVtbl ->CancelUpdate (This))
#define Recordset15_Close(This) ((This)->lpVtbl ->Close (This))
#define Recordset15_Delete(This, AffectRecords) ((This)->lpVtbl ->Delete (This, AffectRecords))
#define Recordset15_GetRows(This, Rows, Start, Fields, pvar) ((This)->lpVtbl ->GetRows (This, Rows, Start, Fields, pvar))
#define Recordset15_Move(This, NumRecords, Start) ((This)->lpVtbl ->Move (This, NumRecords, Start))
#define Recordset15_MoveNext(This) ((This)->lpVtbl ->MoveNext (This))
#define Recordset15_MovePrevious(This) ((This)->lpVtbl ->MovePrevious (This))
#define Recordset15_MoveFirst(This) ((This)->lpVtbl ->MoveFirst (This))
#define Recordset15_MoveLast(This) ((This)->lpVtbl ->MoveLast (This))
#define Recordset15_Open(This, Source, ActiveConnection, CursorType, LockType, Options) ((This)->lpVtbl ->Open (This, Source, ActiveConnection, CursorType, LockType, Options))
#define Recordset15_Requery(This, Options) ((This)->lpVtbl ->Requery (This, Options))
#define Recordset15__xResync(This, AffectRecords) ((This)->lpVtbl ->_xResync (This, AffectRecords))
#define Recordset15_Update(This, Fields, Values) ((This)->lpVtbl ->Update (This, Fields, Values))
#define Recordset15_get_AbsolutePage(This, pl) ((This)->lpVtbl ->get_AbsolutePage (This, pl))
#define Recordset15_put_AbsolutePage(This, Page) ((This)->lpVtbl ->put_AbsolutePage (This, Page))
#define Recordset15_get_EditMode(This, pl) ((This)->lpVtbl ->get_EditMode (This, pl))
#define Recordset15_get_Filter(This, Criteria) ((This)->lpVtbl ->get_Filter (This, Criteria))
#define Recordset15_put_Filter(This, Criteria) ((This)->lpVtbl ->put_Filter (This, Criteria))
#define Recordset15_get_PageCount(This, pl) ((This)->lpVtbl ->get_PageCount (This, pl))
#define Recordset15_get_PageSize(This, pl) ((This)->lpVtbl ->get_PageSize (This, pl))
#define Recordset15_put_PageSize(This, PageSize) ((This)->lpVtbl ->put_PageSize (This, PageSize))
#define Recordset15_get_Sort(This, Criteria) ((This)->lpVtbl ->get_Sort (This, Criteria))
#define Recordset15_put_Sort(This, Criteria) ((This)->lpVtbl ->put_Sort (This, Criteria))
#define Recordset15_get_Status(This, pl) ((This)->lpVtbl ->get_Status (This, pl))
#define Recordset15_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define Recordset15__xClone(This, ppvObject) ((This)->lpVtbl ->_xClone (This, ppvObject))
#define Recordset15_UpdateBatch(This, AffectRecords) ((This)->lpVtbl ->UpdateBatch (This, AffectRecords))
#define Recordset15_CancelBatch(This, AffectRecords) ((This)->lpVtbl ->CancelBatch (This, AffectRecords))
#define Recordset15_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define Recordset15_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define Recordset15_NextRecordset(This, RecordsAffected, ppiRs) ((This)->lpVtbl ->NextRecordset (This, RecordsAffected, ppiRs))
#define Recordset15_Supports(This, CursorOptions, pb) ((This)->lpVtbl ->Supports (This, CursorOptions, pb))
#define Recordset15_get_Collect(This, Index, pvar) ((This)->lpVtbl ->get_Collect (This, Index, pvar))
#define Recordset15_put_Collect(This, Index, value) ((This)->lpVtbl ->put_Collect (This, Index, value))
#define Recordset15_get_MarshalOptions(This, peMarshal) ((This)->lpVtbl ->get_MarshalOptions (This, peMarshal))
#define Recordset15_put_MarshalOptions(This, eMarshal) ((This)->lpVtbl ->put_MarshalOptions (This, eMarshal))
#define Recordset15_Find(This, Criteria, SkipRecords, SearchDirection, Start) ((This)->lpVtbl ->Find (This, Criteria, SkipRecords, SearchDirection, Start))
#endif
#endif
#endif
#ifndef __Recordset20_INTERFACE_DEFINED__
#define __Recordset20_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Recordset20;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000054F-0000-0010-8000-00AA006D2EA4")
  Recordset20 : public Recordset15 {
    public:
    virtual HRESULT STDMETHODCALLTYPE Cancel (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DataSource (IUnknown **ppunkDataSource) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_DataSource (IUnknown *punkDataSource) = 0;
    virtual HRESULT STDMETHODCALLTYPE _xSave (BSTR FileName = NULL, PersistFormatEnum PersistFormat = adPersistADTG) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ActiveCommand (IDispatch **ppCmd) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_StayInSync (VARIANT_BOOL bStayInSync) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_StayInSync (VARIANT_BOOL *pbStayInSync) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetString (StringFormatEnum StringFormat, long NumRows, BSTR ColumnDelimeter, BSTR RowDelimeter, BSTR NullExpr, BSTR *pRetString) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DataMember (BSTR *pbstrDataMember) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_DataMember (BSTR bstrDataMember) = 0;
    virtual HRESULT STDMETHODCALLTYPE CompareBookmarks (VARIANT Bookmark1, VARIANT Bookmark2, CompareEnum *pCompare) = 0;
    virtual HRESULT STDMETHODCALLTYPE Clone (LockTypeEnum LockType, _ADORecordset **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Resync (AffectEnum AffectRecords = adAffectAll, ResyncEnum ResyncValues = adResyncAllValues) = 0;
  };
#else
  typedef struct Recordset20Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Recordset20 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Recordset20 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Recordset20 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Recordset20 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Recordset20 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Recordset20 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Recordset20 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePosition) (Recordset20 *This, PositionEnum_Param *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePosition) (Recordset20 *This, PositionEnum_Param Position);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (Recordset20 *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (Recordset20 *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (Recordset20 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_BOF) (Recordset20 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Bookmark) (Recordset20 *This, VARIANT *pvBookmark);
    HRESULT (STDMETHODCALLTYPE *put_Bookmark) (Recordset20 *This, VARIANT vBookmark);
    HRESULT (STDMETHODCALLTYPE *get_CacheSize) (Recordset20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_CacheSize) (Recordset20 *This, long CacheSize);
    HRESULT (STDMETHODCALLTYPE *get_CursorType) (Recordset20 *This, CursorTypeEnum *plCursorType);
    HRESULT (STDMETHODCALLTYPE *put_CursorType) (Recordset20 *This, CursorTypeEnum lCursorType);
    HRESULT (STDMETHODCALLTYPE *get_EOF) (Recordset20 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Fields) (Recordset20 *This, ADOFields **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_LockType) (Recordset20 *This, LockTypeEnum *plLockType);
    HRESULT (STDMETHODCALLTYPE *put_LockType) (Recordset20 *This, LockTypeEnum lLockType);
    HRESULT (STDMETHODCALLTYPE *get_MaxRecords) (Recordset20 *This, ADO_LONGPTR *plMaxRecords);
    HRESULT (STDMETHODCALLTYPE *put_MaxRecords) (Recordset20 *This, ADO_LONGPTR lMaxRecords);
    HRESULT (STDMETHODCALLTYPE *get_RecordCount) (Recordset20 *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (Recordset20 *This, IDispatch *pcmd);
    HRESULT (STDMETHODCALLTYPE *put_Source) (Recordset20 *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *get_Source) (Recordset20 *This, VARIANT *pvSource);
    HRESULT (STDMETHODCALLTYPE *AddNew) (Recordset20 *This, VARIANT FieldList, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *CancelUpdate) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *Close) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *Delete) (Recordset20 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *GetRows) (Recordset20 *This, long Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *Move) (Recordset20 *This, ADO_LONGPTR NumRecords, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *MoveNext) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *MovePrevious) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *MoveFirst) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *MoveLast) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *Open) (Recordset20 *This, VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType, LockTypeEnum LockType, LONG Options);
    HRESULT (STDMETHODCALLTYPE *Requery) (Recordset20 *This, LONG Options);
    HRESULT (STDMETHODCALLTYPE *_xResync) (Recordset20 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *Update) (Recordset20 *This, VARIANT Fields, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePage) (Recordset20 *This, PositionEnum_Param *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePage) (Recordset20 *This, PositionEnum_Param Page);
    HRESULT (STDMETHODCALLTYPE *get_EditMode) (Recordset20 *This, EditModeEnum *pl);
    HRESULT (STDMETHODCALLTYPE *get_Filter) (Recordset20 *This, VARIANT *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Filter) (Recordset20 *This, VARIANT Criteria);
    HRESULT (STDMETHODCALLTYPE *get_PageCount) (Recordset20 *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *get_PageSize) (Recordset20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_PageSize) (Recordset20 *This, long PageSize);
    HRESULT (STDMETHODCALLTYPE *get_Sort) (Recordset20 *This, BSTR *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Sort) (Recordset20 *This, BSTR Criteria);
    HRESULT (STDMETHODCALLTYPE *get_Status) (Recordset20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_State) (Recordset20 *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *_xClone) (Recordset20 *This, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *UpdateBatch) (Recordset20 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *CancelBatch) (Recordset20 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (Recordset20 *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (Recordset20 *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *NextADORecordset) (Recordset20 *This, VARIANT *RecordsAffected, _ADORecordset **ppiRs);
    HRESULT (STDMETHODCALLTYPE *Supports) (Recordset20 *This, CursorOptionEnum CursorOptions, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Collect) (Recordset20 *This, VARIANT Index, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Collect) (Recordset20 *This, VARIANT Index, VARIANT value);
    HRESULT (STDMETHODCALLTYPE *get_MarshalOptions) (Recordset20 *This, MarshalOptionsEnum *peMarshal);
    HRESULT (STDMETHODCALLTYPE *put_MarshalOptions) (Recordset20 *This, MarshalOptionsEnum eMarshal);
    HRESULT (STDMETHODCALLTYPE *Find) (Recordset20 *This, BSTR Criteria, ADO_LONGPTR SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *Cancel) (Recordset20 *This);
    HRESULT (STDMETHODCALLTYPE *get_DataSource) (Recordset20 *This, IUnknown **ppunkDataSource);
    HRESULT (STDMETHODCALLTYPE *putref_DataSource) (Recordset20 *This, IUnknown *punkDataSource);
    HRESULT (STDMETHODCALLTYPE *_xSave) (Recordset20 *This, BSTR FileName, PersistFormatEnum PersistFormat);
    HRESULT (STDMETHODCALLTYPE *get_ActiveCommand) (Recordset20 *This, IDispatch **ppCmd);
    HRESULT (STDMETHODCALLTYPE *put_StayInSync) (Recordset20 *This, VARIANT_BOOL bStayInSync);
    HRESULT (STDMETHODCALLTYPE *get_StayInSync) (Recordset20 *This, VARIANT_BOOL *pbStayInSync);
    HRESULT (STDMETHODCALLTYPE *GetString) (Recordset20 *This, StringFormatEnum StringFormat, long NumRows, BSTR ColumnDelimeter, BSTR RowDelimeter, BSTR NullExpr, BSTR *pRetString);
    HRESULT (STDMETHODCALLTYPE *get_DataMember) (Recordset20 *This, BSTR *pbstrDataMember);
    HRESULT (STDMETHODCALLTYPE *put_DataMember) (Recordset20 *This, BSTR bstrDataMember);
    HRESULT (STDMETHODCALLTYPE *CompareBookmarks) (Recordset20 *This, VARIANT Bookmark1, VARIANT Bookmark2, CompareEnum *pCompare);
    HRESULT (STDMETHODCALLTYPE *Clone) (Recordset20 *This, LockTypeEnum LockType, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Resync) (Recordset20 *This, AffectEnum AffectRecords, ResyncEnum ResyncValues);
    END_INTERFACE
  } Recordset20Vtbl;
  interface Recordset20 {
    CONST_VTBL struct Recordset20Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Recordset20_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Recordset20_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Recordset20_Release(This) ((This)->lpVtbl ->Release (This))
#define Recordset20_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Recordset20_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Recordset20_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Recordset20_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Recordset20_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Recordset20_get_AbsolutePosition(This, pl) ((This)->lpVtbl ->get_AbsolutePosition (This, pl))
#define Recordset20_put_AbsolutePosition(This, Position) ((This)->lpVtbl ->put_AbsolutePosition (This, Position))
#define Recordset20_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define Recordset20_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define Recordset20_get_ActiveConnection(This, pvar) ((This)->lpVtbl ->get_ActiveConnection (This, pvar))
#define Recordset20_get_BOF(This, pb) ((This)->lpVtbl ->get_BOF (This, pb))
#define Recordset20_get_Bookmark(This, pvBookmark) ((This)->lpVtbl ->get_Bookmark (This, pvBookmark))
#define Recordset20_put_Bookmark(This, vBookmark) ((This)->lpVtbl ->put_Bookmark (This, vBookmark))
#define Recordset20_get_CacheSize(This, pl) ((This)->lpVtbl ->get_CacheSize (This, pl))
#define Recordset20_put_CacheSize(This, CacheSize) ((This)->lpVtbl ->put_CacheSize (This, CacheSize))
#define Recordset20_get_CursorType(This, plCursorType) ((This)->lpVtbl ->get_CursorType (This, plCursorType))
#define Recordset20_put_CursorType(This, lCursorType) ((This)->lpVtbl ->put_CursorType (This, lCursorType))
#define Recordset20_get_EOF(This, pb) ((This)->lpVtbl ->get_EOF (This, pb))
#define Recordset20_get_Fields(This, ppvObject) ((This)->lpVtbl ->get_Fields (This, ppvObject))
#define Recordset20_get_LockType(This, plLockType) ((This)->lpVtbl ->get_LockType (This, plLockType))
#define Recordset20_put_LockType(This, lLockType) ((This)->lpVtbl ->put_LockType (This, lLockType))
#define Recordset20_get_MaxRecords(This, plMaxRecords) ((This)->lpVtbl ->get_MaxRecords (This, plMaxRecords))
#define Recordset20_put_MaxRecords(This, lMaxRecords) ((This)->lpVtbl ->put_MaxRecords (This, lMaxRecords))
#define Recordset20_get_RecordCount(This, pl) ((This)->lpVtbl ->get_RecordCount (This, pl))
#define Recordset20_putref_Source(This, pcmd) ((This)->lpVtbl ->putref_Source (This, pcmd))
#define Recordset20_put_Source(This, bstrConn) ((This)->lpVtbl ->put_Source (This, bstrConn))
#define Recordset20_get_Source(This, pvSource) ((This)->lpVtbl ->get_Source (This, pvSource))
#define Recordset20_AddNew(This, FieldList, Values) ((This)->lpVtbl ->AddNew (This, FieldList, Values))
#define Recordset20_CancelUpdate(This) ((This)->lpVtbl ->CancelUpdate (This))
#define Recordset20_Close(This) ((This)->lpVtbl ->Close (This))
#define Recordset20_Delete(This, AffectRecords) ((This)->lpVtbl ->Delete (This, AffectRecords))
#define Recordset20_GetRows(This, Rows, Start, Fields, pvar) ((This)->lpVtbl ->GetRows (This, Rows, Start, Fields, pvar))
#define Recordset20_Move(This, NumRecords, Start) ((This)->lpVtbl ->Move (This, NumRecords, Start))
#define Recordset20_MoveNext(This) ((This)->lpVtbl ->MoveNext (This))
#define Recordset20_MovePrevious(This) ((This)->lpVtbl ->MovePrevious (This))
#define Recordset20_MoveFirst(This) ((This)->lpVtbl ->MoveFirst (This))
#define Recordset20_MoveLast(This) ((This)->lpVtbl ->MoveLast (This))
#define Recordset20_Open(This, Source, ActiveConnection, CursorType, LockType, Options) ((This)->lpVtbl ->Open (This, Source, ActiveConnection, CursorType, LockType, Options))
#define Recordset20_Requery(This, Options) ((This)->lpVtbl ->Requery (This, Options))
#define Recordset20__xResync(This, AffectRecords) ((This)->lpVtbl ->_xResync (This, AffectRecords))
#define Recordset20_Update(This, Fields, Values) ((This)->lpVtbl ->Update (This, Fields, Values))
#define Recordset20_get_AbsolutePage(This, pl) ((This)->lpVtbl ->get_AbsolutePage (This, pl))
#define Recordset20_put_AbsolutePage(This, Page) ((This)->lpVtbl ->put_AbsolutePage (This, Page))
#define Recordset20_get_EditMode(This, pl) ((This)->lpVtbl ->get_EditMode (This, pl))
#define Recordset20_get_Filter(This, Criteria) ((This)->lpVtbl ->get_Filter (This, Criteria))
#define Recordset20_put_Filter(This, Criteria) ((This)->lpVtbl ->put_Filter (This, Criteria))
#define Recordset20_get_PageCount(This, pl) ((This)->lpVtbl ->get_PageCount (This, pl))
#define Recordset20_get_PageSize(This, pl) ((This)->lpVtbl ->get_PageSize (This, pl))
#define Recordset20_put_PageSize(This, PageSize) ((This)->lpVtbl ->put_PageSize (This, PageSize))
#define Recordset20_get_Sort(This, Criteria) ((This)->lpVtbl ->get_Sort (This, Criteria))
#define Recordset20_put_Sort(This, Criteria) ((This)->lpVtbl ->put_Sort (This, Criteria))
#define Recordset20_get_Status(This, pl) ((This)->lpVtbl ->get_Status (This, pl))
#define Recordset20_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define Recordset20__xClone(This, ppvObject) ((This)->lpVtbl ->_xClone (This, ppvObject))
#define Recordset20_UpdateBatch(This, AffectRecords) ((This)->lpVtbl ->UpdateBatch (This, AffectRecords))
#define Recordset20_CancelBatch(This, AffectRecords) ((This)->lpVtbl ->CancelBatch (This, AffectRecords))
#define Recordset20_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define Recordset20_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define Recordset20_NextRecordset(This, RecordsAffected, ppiRs) ((This)->lpVtbl ->NextRecordset (This, RecordsAffected, ppiRs))
#define Recordset20_Supports(This, CursorOptions, pb) ((This)->lpVtbl ->Supports (This, CursorOptions, pb))
#define Recordset20_get_Collect(This, Index, pvar) ((This)->lpVtbl ->get_Collect (This, Index, pvar))
#define Recordset20_put_Collect(This, Index, value) ((This)->lpVtbl ->put_Collect (This, Index, value))
#define Recordset20_get_MarshalOptions(This, peMarshal) ((This)->lpVtbl ->get_MarshalOptions (This, peMarshal))
#define Recordset20_put_MarshalOptions(This, eMarshal) ((This)->lpVtbl ->put_MarshalOptions (This, eMarshal))
#define Recordset20_Find(This, Criteria, SkipRecords, SearchDirection, Start) ((This)->lpVtbl ->Find (This, Criteria, SkipRecords, SearchDirection, Start))
#define Recordset20_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#define Recordset20_get_DataSource(This, ppunkDataSource) ((This)->lpVtbl ->get_DataSource (This, ppunkDataSource))
#define Recordset20_putref_DataSource(This, punkDataSource) ((This)->lpVtbl ->putref_DataSource (This, punkDataSource))
#define Recordset20__xSave(This, FileName, PersistFormat) ((This)->lpVtbl ->_xSave (This, FileName, PersistFormat))
#define Recordset20_get_ActiveCommand(This, ppCmd) ((This)->lpVtbl ->get_ActiveCommand (This, ppCmd))
#define Recordset20_put_StayInSync(This, bStayInSync) ((This)->lpVtbl ->put_StayInSync (This, bStayInSync))
#define Recordset20_get_StayInSync(This, pbStayInSync) ((This)->lpVtbl ->get_StayInSync (This, pbStayInSync))
#define Recordset20_GetString(This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString) ((This)->lpVtbl ->GetString (This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString))
#define Recordset20_get_DataMember(This, pbstrDataMember) ((This)->lpVtbl ->get_DataMember (This, pbstrDataMember))
#define Recordset20_put_DataMember(This, bstrDataMember) ((This)->lpVtbl ->put_DataMember (This, bstrDataMember))
#define Recordset20_CompareBookmarks(This, Bookmark1, Bookmark2, pCompare) ((This)->lpVtbl ->CompareBookmarks (This, Bookmark1, Bookmark2, pCompare))
#define Recordset20_Clone(This, LockType, ppvObject) ((This)->lpVtbl ->Clone (This, LockType, ppvObject))
#define Recordset20_Resync(This, AffectRecords, ResyncValues) ((This)->lpVtbl ->Resync (This, AffectRecords, ResyncValues))
#endif
#endif
#endif
#ifndef __Recordset21_INTERFACE_DEFINED__
#define __Recordset21_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Recordset21;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000555-0000-0010-8000-00AA006D2EA4")
  Recordset21 : public Recordset20 {
    public:
    virtual HRESULT STDMETHODCALLTYPE Seek (VARIANT KeyValues, SeekEnum SeekOption = adSeekFirstEQ) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Index (BSTR Index) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Index (BSTR *pbstrIndex) = 0;
  };
#else
  typedef struct Recordset21Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Recordset21 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Recordset21 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Recordset21 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Recordset21 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Recordset21 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Recordset21 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Recordset21 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePosition) (Recordset21 *This, PositionEnum_Param *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePosition) (Recordset21 *This, PositionEnum_Param Position);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (Recordset21 *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (Recordset21 *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (Recordset21 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_BOF) (Recordset21 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Bookmark) (Recordset21 *This, VARIANT *pvBookmark);
    HRESULT (STDMETHODCALLTYPE *put_Bookmark) (Recordset21 *This, VARIANT vBookmark);
    HRESULT (STDMETHODCALLTYPE *get_CacheSize) (Recordset21 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_CacheSize) (Recordset21 *This, long CacheSize);
    HRESULT (STDMETHODCALLTYPE *get_CursorType) (Recordset21 *This, CursorTypeEnum *plCursorType);
    HRESULT (STDMETHODCALLTYPE *put_CursorType) (Recordset21 *This, CursorTypeEnum lCursorType);
    HRESULT (STDMETHODCALLTYPE *get_EOF) (Recordset21 *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Fields) (Recordset21 *This, ADOFields **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_LockType) (Recordset21 *This, LockTypeEnum *plLockType);
    HRESULT (STDMETHODCALLTYPE *put_LockType) (Recordset21 *This, LockTypeEnum lLockType);
    HRESULT (STDMETHODCALLTYPE *get_MaxRecords) (Recordset21 *This, ADO_LONGPTR *plMaxRecords);
    HRESULT (STDMETHODCALLTYPE *put_MaxRecords) (Recordset21 *This, ADO_LONGPTR lMaxRecords);
    HRESULT (STDMETHODCALLTYPE *get_RecordCount) (Recordset21 *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (Recordset21 *This, IDispatch *pcmd);
    HRESULT (STDMETHODCALLTYPE *put_Source) (Recordset21 *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *get_Source) (Recordset21 *This, VARIANT *pvSource);
    HRESULT (STDMETHODCALLTYPE *AddNew) (Recordset21 *This, VARIANT FieldList, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *CancelUpdate) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *Close) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *Delete) (Recordset21 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *GetRows) (Recordset21 *This, long Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *Move) (Recordset21 *This, ADO_LONGPTR NumRecords, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *MoveNext) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *MovePrevious) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *MoveFirst) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *MoveLast) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *Open) (Recordset21 *This, VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType, LockTypeEnum LockType, LONG Options);
    HRESULT (STDMETHODCALLTYPE *Requery) (Recordset21 *This, LONG Options);
    HRESULT (STDMETHODCALLTYPE *_xResync) (Recordset21 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *Update) (Recordset21 *This, VARIANT Fields, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePage) (Recordset21 *This, PositionEnum_Param *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePage) (Recordset21 *This, PositionEnum_Param Page);
    HRESULT (STDMETHODCALLTYPE *get_EditMode) (Recordset21 *This, EditModeEnum *pl);
    HRESULT (STDMETHODCALLTYPE *get_Filter) (Recordset21 *This, VARIANT *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Filter) (Recordset21 *This, VARIANT Criteria);
    HRESULT (STDMETHODCALLTYPE *get_PageCount) (Recordset21 *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *get_PageSize) (Recordset21 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_PageSize) (Recordset21 *This, long PageSize);
    HRESULT (STDMETHODCALLTYPE *get_Sort) (Recordset21 *This, BSTR *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Sort) (Recordset21 *This, BSTR Criteria);
    HRESULT (STDMETHODCALLTYPE *get_Status) (Recordset21 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_State) (Recordset21 *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *_xClone) (Recordset21 *This, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *UpdateBatch) (Recordset21 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *CancelBatch) (Recordset21 *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (Recordset21 *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (Recordset21 *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *NextADORecordset) (Recordset21 *This, VARIANT *RecordsAffected, _ADORecordset **ppiRs);
    HRESULT (STDMETHODCALLTYPE *Supports) (Recordset21 *This, CursorOptionEnum CursorOptions, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Collect) (Recordset21 *This, VARIANT Index, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Collect) (Recordset21 *This, VARIANT Index, VARIANT value);
    HRESULT (STDMETHODCALLTYPE *get_MarshalOptions) (Recordset21 *This, MarshalOptionsEnum *peMarshal);
    HRESULT (STDMETHODCALLTYPE *put_MarshalOptions) (Recordset21 *This, MarshalOptionsEnum eMarshal);
    HRESULT (STDMETHODCALLTYPE *Find) (Recordset21 *This, BSTR Criteria, ADO_LONGPTR SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *Cancel) (Recordset21 *This);
    HRESULT (STDMETHODCALLTYPE *get_DataSource) (Recordset21 *This, IUnknown **ppunkDataSource);
    HRESULT (STDMETHODCALLTYPE *putref_DataSource) (Recordset21 *This, IUnknown *punkDataSource);
    HRESULT (STDMETHODCALLTYPE *_xSave) (Recordset21 *This, BSTR FileName, PersistFormatEnum PersistFormat);
    HRESULT (STDMETHODCALLTYPE *get_ActiveCommand) (Recordset21 *This, IDispatch **ppCmd);
    HRESULT (STDMETHODCALLTYPE *put_StayInSync) (Recordset21 *This, VARIANT_BOOL bStayInSync);
    HRESULT (STDMETHODCALLTYPE *get_StayInSync) (Recordset21 *This, VARIANT_BOOL *pbStayInSync);
    HRESULT (STDMETHODCALLTYPE *GetString) (Recordset21 *This, StringFormatEnum StringFormat, long NumRows, BSTR ColumnDelimeter, BSTR RowDelimeter, BSTR NullExpr, BSTR *pRetString);
    HRESULT (STDMETHODCALLTYPE *get_DataMember) (Recordset21 *This, BSTR *pbstrDataMember);
    HRESULT (STDMETHODCALLTYPE *put_DataMember) (Recordset21 *This, BSTR bstrDataMember);
    HRESULT (STDMETHODCALLTYPE *CompareBookmarks) (Recordset21 *This, VARIANT Bookmark1, VARIANT Bookmark2, CompareEnum *pCompare);
    HRESULT (STDMETHODCALLTYPE *Clone) (Recordset21 *This, LockTypeEnum LockType, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Resync) (Recordset21 *This, AffectEnum AffectRecords, ResyncEnum ResyncValues);
    HRESULT (STDMETHODCALLTYPE *Seek) (Recordset21 *This, VARIANT KeyValues, SeekEnum SeekOption);
    HRESULT (STDMETHODCALLTYPE *put_Index) (Recordset21 *This, BSTR Index);
    HRESULT (STDMETHODCALLTYPE *get_Index) (Recordset21 *This, BSTR *pbstrIndex);
    END_INTERFACE
  } Recordset21Vtbl;
  interface Recordset21 {
    CONST_VTBL struct Recordset21Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Recordset21_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Recordset21_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Recordset21_Release(This) ((This)->lpVtbl ->Release (This))
#define Recordset21_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Recordset21_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Recordset21_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Recordset21_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Recordset21_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Recordset21_get_AbsolutePosition(This, pl) ((This)->lpVtbl ->get_AbsolutePosition (This, pl))
#define Recordset21_put_AbsolutePosition(This, Position) ((This)->lpVtbl ->put_AbsolutePosition (This, Position))
#define Recordset21_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define Recordset21_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define Recordset21_get_ActiveConnection(This, pvar) ((This)->lpVtbl ->get_ActiveConnection (This, pvar))
#define Recordset21_get_BOF(This, pb) ((This)->lpVtbl ->get_BOF (This, pb))
#define Recordset21_get_Bookmark(This, pvBookmark) ((This)->lpVtbl ->get_Bookmark (This, pvBookmark))
#define Recordset21_put_Bookmark(This, vBookmark) ((This)->lpVtbl ->put_Bookmark (This, vBookmark))
#define Recordset21_get_CacheSize(This, pl) ((This)->lpVtbl ->get_CacheSize (This, pl))
#define Recordset21_put_CacheSize(This, CacheSize) ((This)->lpVtbl ->put_CacheSize (This, CacheSize))
#define Recordset21_get_CursorType(This, plCursorType) ((This)->lpVtbl ->get_CursorType (This, plCursorType))
#define Recordset21_put_CursorType(This, lCursorType) ((This)->lpVtbl ->put_CursorType (This, lCursorType))
#define Recordset21_get_EOF(This, pb) ((This)->lpVtbl ->get_EOF (This, pb))
#define Recordset21_get_Fields(This, ppvObject) ((This)->lpVtbl ->get_Fields (This, ppvObject))
#define Recordset21_get_LockType(This, plLockType) ((This)->lpVtbl ->get_LockType (This, plLockType))
#define Recordset21_put_LockType(This, lLockType) ((This)->lpVtbl ->put_LockType (This, lLockType))
#define Recordset21_get_MaxRecords(This, plMaxRecords) ((This)->lpVtbl ->get_MaxRecords (This, plMaxRecords))
#define Recordset21_put_MaxRecords(This, lMaxRecords) ((This)->lpVtbl ->put_MaxRecords (This, lMaxRecords))
#define Recordset21_get_RecordCount(This, pl) ((This)->lpVtbl ->get_RecordCount (This, pl))
#define Recordset21_putref_Source(This, pcmd) ((This)->lpVtbl ->putref_Source (This, pcmd))
#define Recordset21_put_Source(This, bstrConn) ((This)->lpVtbl ->put_Source (This, bstrConn))
#define Recordset21_get_Source(This, pvSource) ((This)->lpVtbl ->get_Source (This, pvSource))
#define Recordset21_AddNew(This, FieldList, Values) ((This)->lpVtbl ->AddNew (This, FieldList, Values))
#define Recordset21_CancelUpdate(This) ((This)->lpVtbl ->CancelUpdate (This))
#define Recordset21_Close(This) ((This)->lpVtbl ->Close (This))
#define Recordset21_Delete(This, AffectRecords) ((This)->lpVtbl ->Delete (This, AffectRecords))
#define Recordset21_GetRows(This, Rows, Start, Fields, pvar) ((This)->lpVtbl ->GetRows (This, Rows, Start, Fields, pvar))
#define Recordset21_Move(This, NumRecords, Start) ((This)->lpVtbl ->Move (This, NumRecords, Start))
#define Recordset21_MoveNext(This) ((This)->lpVtbl ->MoveNext (This))
#define Recordset21_MovePrevious(This) ((This)->lpVtbl ->MovePrevious (This))
#define Recordset21_MoveFirst(This) ((This)->lpVtbl ->MoveFirst (This))
#define Recordset21_MoveLast(This) ((This)->lpVtbl ->MoveLast (This))
#define Recordset21_Open(This, Source, ActiveConnection, CursorType, LockType, Options) ((This)->lpVtbl ->Open (This, Source, ActiveConnection, CursorType, LockType, Options))
#define Recordset21_Requery(This, Options) ((This)->lpVtbl ->Requery (This, Options))
#define Recordset21__xResync(This, AffectRecords) ((This)->lpVtbl ->_xResync (This, AffectRecords))
#define Recordset21_Update(This, Fields, Values) ((This)->lpVtbl ->Update (This, Fields, Values))
#define Recordset21_get_AbsolutePage(This, pl) ((This)->lpVtbl ->get_AbsolutePage (This, pl))
#define Recordset21_put_AbsolutePage(This, Page) ((This)->lpVtbl ->put_AbsolutePage (This, Page))
#define Recordset21_get_EditMode(This, pl) ((This)->lpVtbl ->get_EditMode (This, pl))
#define Recordset21_get_Filter(This, Criteria) ((This)->lpVtbl ->get_Filter (This, Criteria))
#define Recordset21_put_Filter(This, Criteria) ((This)->lpVtbl ->put_Filter (This, Criteria))
#define Recordset21_get_PageCount(This, pl) ((This)->lpVtbl ->get_PageCount (This, pl))
#define Recordset21_get_PageSize(This, pl) ((This)->lpVtbl ->get_PageSize (This, pl))
#define Recordset21_put_PageSize(This, PageSize) ((This)->lpVtbl ->put_PageSize (This, PageSize))
#define Recordset21_get_Sort(This, Criteria) ((This)->lpVtbl ->get_Sort (This, Criteria))
#define Recordset21_put_Sort(This, Criteria) ((This)->lpVtbl ->put_Sort (This, Criteria))
#define Recordset21_get_Status(This, pl) ((This)->lpVtbl ->get_Status (This, pl))
#define Recordset21_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define Recordset21__xClone(This, ppvObject) ((This)->lpVtbl ->_xClone (This, ppvObject))
#define Recordset21_UpdateBatch(This, AffectRecords) ((This)->lpVtbl ->UpdateBatch (This, AffectRecords))
#define Recordset21_CancelBatch(This, AffectRecords) ((This)->lpVtbl ->CancelBatch (This, AffectRecords))
#define Recordset21_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define Recordset21_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define Recordset21_NextRecordset(This, RecordsAffected, ppiRs) ((This)->lpVtbl ->NextRecordset (This, RecordsAffected, ppiRs))
#define Recordset21_Supports(This, CursorOptions, pb) ((This)->lpVtbl ->Supports (This, CursorOptions, pb))
#define Recordset21_get_Collect(This, Index, pvar) ((This)->lpVtbl ->get_Collect (This, Index, pvar))
#define Recordset21_put_Collect(This, Index, value) ((This)->lpVtbl ->put_Collect (This, Index, value))
#define Recordset21_get_MarshalOptions(This, peMarshal) ((This)->lpVtbl ->get_MarshalOptions (This, peMarshal))
#define Recordset21_put_MarshalOptions(This, eMarshal) ((This)->lpVtbl ->put_MarshalOptions (This, eMarshal))
#define Recordset21_Find(This, Criteria, SkipRecords, SearchDirection, Start) ((This)->lpVtbl ->Find (This, Criteria, SkipRecords, SearchDirection, Start))
#define Recordset21_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#define Recordset21_get_DataSource(This, ppunkDataSource) ((This)->lpVtbl ->get_DataSource (This, ppunkDataSource))
#define Recordset21_putref_DataSource(This, punkDataSource) ((This)->lpVtbl ->putref_DataSource (This, punkDataSource))
#define Recordset21__xSave(This, FileName, PersistFormat) ((This)->lpVtbl ->_xSave (This, FileName, PersistFormat))
#define Recordset21_get_ActiveCommand(This, ppCmd) ((This)->lpVtbl ->get_ActiveCommand (This, ppCmd))
#define Recordset21_put_StayInSync(This, bStayInSync) ((This)->lpVtbl ->put_StayInSync (This, bStayInSync))
#define Recordset21_get_StayInSync(This, pbStayInSync) ((This)->lpVtbl ->get_StayInSync (This, pbStayInSync))
#define Recordset21_GetString(This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString) ((This)->lpVtbl ->GetString (This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString))
#define Recordset21_get_DataMember(This, pbstrDataMember) ((This)->lpVtbl ->get_DataMember (This, pbstrDataMember))
#define Recordset21_put_DataMember(This, bstrDataMember) ((This)->lpVtbl ->put_DataMember (This, bstrDataMember))
#define Recordset21_CompareBookmarks(This, Bookmark1, Bookmark2, pCompare) ((This)->lpVtbl ->CompareBookmarks (This, Bookmark1, Bookmark2, pCompare))
#define Recordset21_Clone(This, LockType, ppvObject) ((This)->lpVtbl ->Clone (This, LockType, ppvObject))
#define Recordset21_Resync(This, AffectRecords, ResyncValues) ((This)->lpVtbl ->Resync (This, AffectRecords, ResyncValues))
#define Recordset21_Seek(This, KeyValues, SeekOption) ((This)->lpVtbl ->Seek (This, KeyValues, SeekOption))
#define Recordset21_put_Index(This, Index) ((This)->lpVtbl ->put_Index (This, Index))
#define Recordset21_get_Index(This, pbstrIndex) ((This)->lpVtbl ->get_Index (This, pbstrIndex))
#endif
#endif
#endif
#ifndef ___Recordset_INTERFACE_DEFINED__
#define ___Recordset_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Recordset;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000556-0000-0010-8000-00AA006D2EA4")
  _ADORecordset : public Recordset21 {
    public:
    virtual HRESULT STDMETHODCALLTYPE Save (VARIANT Destination, PersistFormatEnum PersistFormat = adPersistADTG) = 0;
  };
#else
  typedef struct _RecordsetVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADORecordset *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADORecordset *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADORecordset *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADORecordset *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADORecordset *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADORecordset *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADORecordset *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePosition) (_ADORecordset *This, PositionEnum_Param *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePosition) (_ADORecordset *This, PositionEnum_Param Position);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveADOConnection) (_ADORecordset *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (_ADORecordset *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (_ADORecordset *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_BOF) (_ADORecordset *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Bookmark) (_ADORecordset *This, VARIANT *pvBookmark);
    HRESULT (STDMETHODCALLTYPE *put_Bookmark) (_ADORecordset *This, VARIANT vBookmark);
    HRESULT (STDMETHODCALLTYPE *get_CacheSize) (_ADORecordset *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_CacheSize) (_ADORecordset *This, long CacheSize);
    HRESULT (STDMETHODCALLTYPE *get_CursorType) (_ADORecordset *This, CursorTypeEnum *plCursorType);
    HRESULT (STDMETHODCALLTYPE *put_CursorType) (_ADORecordset *This, CursorTypeEnum lCursorType);
    HRESULT (STDMETHODCALLTYPE *get_EOF) (_ADORecordset *This, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Fields) (_ADORecordset *This, ADOFields **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_LockType) (_ADORecordset *This, LockTypeEnum *plLockType);
    HRESULT (STDMETHODCALLTYPE *put_LockType) (_ADORecordset *This, LockTypeEnum lLockType);
    HRESULT (STDMETHODCALLTYPE *get_MaxRecords) (_ADORecordset *This, ADO_LONGPTR *plMaxRecords);
    HRESULT (STDMETHODCALLTYPE *put_MaxRecords) (_ADORecordset *This, ADO_LONGPTR lMaxRecords);
    HRESULT (STDMETHODCALLTYPE *get_RecordCount) (_ADORecordset *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (_ADORecordset *This, IDispatch *pcmd);
    HRESULT (STDMETHODCALLTYPE *put_Source) (_ADORecordset *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *get_Source) (_ADORecordset *This, VARIANT *pvSource);
    HRESULT (STDMETHODCALLTYPE *AddNew) (_ADORecordset *This, VARIANT FieldList, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *CancelUpdate) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *Close) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *Delete) (_ADORecordset *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *GetRows) (_ADORecordset *This, long Rows, VARIANT Start, VARIANT Fields, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *Move) (_ADORecordset *This, ADO_LONGPTR NumRecords, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *MoveNext) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *MovePrevious) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *MoveFirst) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *MoveLast) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *Open) (_ADORecordset *This, VARIANT Source, VARIANT ActiveConnection, CursorTypeEnum CursorType, LockTypeEnum LockType, LONG Options);
    HRESULT (STDMETHODCALLTYPE *Requery) (_ADORecordset *This, LONG Options);
    HRESULT (STDMETHODCALLTYPE *_xResync) (_ADORecordset *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *Update) (_ADORecordset *This, VARIANT Fields, VARIANT Values);
    HRESULT (STDMETHODCALLTYPE *get_AbsolutePage) (_ADORecordset *This, PositionEnum_Param *pl);
    HRESULT (STDMETHODCALLTYPE *put_AbsolutePage) (_ADORecordset *This, PositionEnum_Param Page);
    HRESULT (STDMETHODCALLTYPE *get_EditMode) (_ADORecordset *This, EditModeEnum *pl);
    HRESULT (STDMETHODCALLTYPE *get_Filter) (_ADORecordset *This, VARIANT *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Filter) (_ADORecordset *This, VARIANT Criteria);
    HRESULT (STDMETHODCALLTYPE *get_PageCount) (_ADORecordset *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *get_PageSize) (_ADORecordset *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_PageSize) (_ADORecordset *This, long PageSize);
    HRESULT (STDMETHODCALLTYPE *get_Sort) (_ADORecordset *This, BSTR *Criteria);
    HRESULT (STDMETHODCALLTYPE *put_Sort) (_ADORecordset *This, BSTR Criteria);
    HRESULT (STDMETHODCALLTYPE *get_Status) (_ADORecordset *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_State) (_ADORecordset *This, LONG *plObjState);
    HRESULT (STDMETHODCALLTYPE *_xClone) (_ADORecordset *This, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *UpdateBatch) (_ADORecordset *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *CancelBatch) (_ADORecordset *This, AffectEnum AffectRecords);
    HRESULT (STDMETHODCALLTYPE *get_CursorLocation) (_ADORecordset *This, CursorLocationEnum *plCursorLoc);
    HRESULT (STDMETHODCALLTYPE *put_CursorLocation) (_ADORecordset *This, CursorLocationEnum lCursorLoc);
    HRESULT (STDMETHODCALLTYPE *NextADORecordset) (_ADORecordset *This, VARIANT *RecordsAffected, _ADORecordset **ppiRs);
    HRESULT (STDMETHODCALLTYPE *Supports) (_ADORecordset *This, CursorOptionEnum CursorOptions, VARIANT_BOOL *pb);
    HRESULT (STDMETHODCALLTYPE *get_Collect) (_ADORecordset *This, VARIANT Index, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Collect) (_ADORecordset *This, VARIANT Index, VARIANT value);
    HRESULT (STDMETHODCALLTYPE *get_MarshalOptions) (_ADORecordset *This, MarshalOptionsEnum *peMarshal);
    HRESULT (STDMETHODCALLTYPE *put_MarshalOptions) (_ADORecordset *This, MarshalOptionsEnum eMarshal);
    HRESULT (STDMETHODCALLTYPE *Find) (_ADORecordset *This, BSTR Criteria, ADO_LONGPTR SkipRecords, SearchDirectionEnum SearchDirection, VARIANT Start);
    HRESULT (STDMETHODCALLTYPE *Cancel) (_ADORecordset *This);
    HRESULT (STDMETHODCALLTYPE *get_DataSource) (_ADORecordset *This, IUnknown **ppunkDataSource);
    HRESULT (STDMETHODCALLTYPE *putref_DataSource) (_ADORecordset *This, IUnknown *punkDataSource);
    HRESULT (STDMETHODCALLTYPE *_xSave) (_ADORecordset *This, BSTR FileName, PersistFormatEnum PersistFormat);
    HRESULT (STDMETHODCALLTYPE *get_ActiveCommand) (_ADORecordset *This, IDispatch **ppCmd);
    HRESULT (STDMETHODCALLTYPE *put_StayInSync) (_ADORecordset *This, VARIANT_BOOL bStayInSync);
    HRESULT (STDMETHODCALLTYPE *get_StayInSync) (_ADORecordset *This, VARIANT_BOOL *pbStayInSync);
    HRESULT (STDMETHODCALLTYPE *GetString) (_ADORecordset *This, StringFormatEnum StringFormat, long NumRows, BSTR ColumnDelimeter, BSTR RowDelimeter, BSTR NullExpr, BSTR *pRetString);
    HRESULT (STDMETHODCALLTYPE *get_DataMember) (_ADORecordset *This, BSTR *pbstrDataMember);
    HRESULT (STDMETHODCALLTYPE *put_DataMember) (_ADORecordset *This, BSTR bstrDataMember);
    HRESULT (STDMETHODCALLTYPE *CompareBookmarks) (_ADORecordset *This, VARIANT Bookmark1, VARIANT Bookmark2, CompareEnum *pCompare);
    HRESULT (STDMETHODCALLTYPE *Clone) (_ADORecordset *This, LockTypeEnum LockType, _ADORecordset **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Resync) (_ADORecordset *This, AffectEnum AffectRecords, ResyncEnum ResyncValues);
    HRESULT (STDMETHODCALLTYPE *Seek) (_ADORecordset *This, VARIANT KeyValues, SeekEnum SeekOption);
    HRESULT (STDMETHODCALLTYPE *put_Index) (_ADORecordset *This, BSTR Index);
    HRESULT (STDMETHODCALLTYPE *get_Index) (_ADORecordset *This, BSTR *pbstrIndex);
    HRESULT (STDMETHODCALLTYPE *Save) (_ADORecordset *This, VARIANT Destination, PersistFormatEnum PersistFormat);
    END_INTERFACE
  } _RecordsetVtbl;
  interface _Recordset {
    CONST_VTBL struct _RecordsetVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Recordset_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Recordset_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Recordset_Release(This) ((This)->lpVtbl ->Release (This))
#define _Recordset_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Recordset_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Recordset_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Recordset_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Recordset_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Recordset_get_AbsolutePosition(This, pl) ((This)->lpVtbl ->get_AbsolutePosition (This, pl))
#define _Recordset_put_AbsolutePosition(This, Position) ((This)->lpVtbl ->put_AbsolutePosition (This, Position))
#define _Recordset_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define _Recordset_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define _Recordset_get_ActiveConnection(This, pvar) ((This)->lpVtbl ->get_ActiveConnection (This, pvar))
#define _Recordset_get_BOF(This, pb) ((This)->lpVtbl ->get_BOF (This, pb))
#define _Recordset_get_Bookmark(This, pvBookmark) ((This)->lpVtbl ->get_Bookmark (This, pvBookmark))
#define _Recordset_put_Bookmark(This, vBookmark) ((This)->lpVtbl ->put_Bookmark (This, vBookmark))
#define _Recordset_get_CacheSize(This, pl) ((This)->lpVtbl ->get_CacheSize (This, pl))
#define _Recordset_put_CacheSize(This, CacheSize) ((This)->lpVtbl ->put_CacheSize (This, CacheSize))
#define _Recordset_get_CursorType(This, plCursorType) ((This)->lpVtbl ->get_CursorType (This, plCursorType))
#define _Recordset_put_CursorType(This, lCursorType) ((This)->lpVtbl ->put_CursorType (This, lCursorType))
#define _Recordset_get_EOF(This, pb) ((This)->lpVtbl ->get_EOF (This, pb))
#define _Recordset_get_Fields(This, ppvObject) ((This)->lpVtbl ->get_Fields (This, ppvObject))
#define _Recordset_get_LockType(This, plLockType) ((This)->lpVtbl ->get_LockType (This, plLockType))
#define _Recordset_put_LockType(This, lLockType) ((This)->lpVtbl ->put_LockType (This, lLockType))
#define _Recordset_get_MaxRecords(This, plMaxRecords) ((This)->lpVtbl ->get_MaxRecords (This, plMaxRecords))
#define _Recordset_put_MaxRecords(This, lMaxRecords) ((This)->lpVtbl ->put_MaxRecords (This, lMaxRecords))
#define _Recordset_get_RecordCount(This, pl) ((This)->lpVtbl ->get_RecordCount (This, pl))
#define _Recordset_putref_Source(This, pcmd) ((This)->lpVtbl ->putref_Source (This, pcmd))
#define _Recordset_put_Source(This, bstrConn) ((This)->lpVtbl ->put_Source (This, bstrConn))
#define _Recordset_get_Source(This, pvSource) ((This)->lpVtbl ->get_Source (This, pvSource))
#define _Recordset_AddNew(This, FieldList, Values) ((This)->lpVtbl ->AddNew (This, FieldList, Values))
#define _Recordset_CancelUpdate(This) ((This)->lpVtbl ->CancelUpdate (This))
#define _Recordset_Close(This) ((This)->lpVtbl ->Close (This))
#define _Recordset_Delete(This, AffectRecords) ((This)->lpVtbl ->Delete (This, AffectRecords))
#define _Recordset_GetRows(This, Rows, Start, Fields, pvar) ((This)->lpVtbl ->GetRows (This, Rows, Start, Fields, pvar))
#define _Recordset_Move(This, NumRecords, Start) ((This)->lpVtbl ->Move (This, NumRecords, Start))
#define _Recordset_MoveNext(This) ((This)->lpVtbl ->MoveNext (This))
#define _Recordset_MovePrevious(This) ((This)->lpVtbl ->MovePrevious (This))
#define _Recordset_MoveFirst(This) ((This)->lpVtbl ->MoveFirst (This))
#define _Recordset_MoveLast(This) ((This)->lpVtbl ->MoveLast (This))
#define _Recordset_Open(This, Source, ActiveConnection, CursorType, LockType, Options) ((This)->lpVtbl ->Open (This, Source, ActiveConnection, CursorType, LockType, Options))
#define _Recordset_Requery(This, Options) ((This)->lpVtbl ->Requery (This, Options))
#define _Recordset__xResync(This, AffectRecords) ((This)->lpVtbl ->_xResync (This, AffectRecords))
#define _Recordset_Update(This, Fields, Values) ((This)->lpVtbl ->Update (This, Fields, Values))
#define _Recordset_get_AbsolutePage(This, pl) ((This)->lpVtbl ->get_AbsolutePage (This, pl))
#define _Recordset_put_AbsolutePage(This, Page) ((This)->lpVtbl ->put_AbsolutePage (This, Page))
#define _Recordset_get_EditMode(This, pl) ((This)->lpVtbl ->get_EditMode (This, pl))
#define _Recordset_get_Filter(This, Criteria) ((This)->lpVtbl ->get_Filter (This, Criteria))
#define _Recordset_put_Filter(This, Criteria) ((This)->lpVtbl ->put_Filter (This, Criteria))
#define _Recordset_get_PageCount(This, pl) ((This)->lpVtbl ->get_PageCount (This, pl))
#define _Recordset_get_PageSize(This, pl) ((This)->lpVtbl ->get_PageSize (This, pl))
#define _Recordset_put_PageSize(This, PageSize) ((This)->lpVtbl ->put_PageSize (This, PageSize))
#define _Recordset_get_Sort(This, Criteria) ((This)->lpVtbl ->get_Sort (This, Criteria))
#define _Recordset_put_Sort(This, Criteria) ((This)->lpVtbl ->put_Sort (This, Criteria))
#define _Recordset_get_Status(This, pl) ((This)->lpVtbl ->get_Status (This, pl))
#define _Recordset_get_State(This, plObjState) ((This)->lpVtbl ->get_State (This, plObjState))
#define _Recordset__xClone(This, ppvObject) ((This)->lpVtbl ->_xClone (This, ppvObject))
#define _Recordset_UpdateBatch(This, AffectRecords) ((This)->lpVtbl ->UpdateBatch (This, AffectRecords))
#define _Recordset_CancelBatch(This, AffectRecords) ((This)->lpVtbl ->CancelBatch (This, AffectRecords))
#define _Recordset_get_CursorLocation(This, plCursorLoc) ((This)->lpVtbl ->get_CursorLocation (This, plCursorLoc))
#define _Recordset_put_CursorLocation(This, lCursorLoc) ((This)->lpVtbl ->put_CursorLocation (This, lCursorLoc))
#define _Recordset_NextRecordset(This, RecordsAffected, ppiRs) ((This)->lpVtbl ->NextRecordset (This, RecordsAffected, ppiRs))
#define _Recordset_Supports(This, CursorOptions, pb) ((This)->lpVtbl ->Supports (This, CursorOptions, pb))
#define _Recordset_get_Collect(This, Index, pvar) ((This)->lpVtbl ->get_Collect (This, Index, pvar))
#define _Recordset_put_Collect(This, Index, value) ((This)->lpVtbl ->put_Collect (This, Index, value))
#define _Recordset_get_MarshalOptions(This, peMarshal) ((This)->lpVtbl ->get_MarshalOptions (This, peMarshal))
#define _Recordset_put_MarshalOptions(This, eMarshal) ((This)->lpVtbl ->put_MarshalOptions (This, eMarshal))
#define _Recordset_Find(This, Criteria, SkipRecords, SearchDirection, Start) ((This)->lpVtbl ->Find (This, Criteria, SkipRecords, SearchDirection, Start))
#define _Recordset_Cancel(This) ((This)->lpVtbl ->Cancel (This))
#define _Recordset_get_DataSource(This, ppunkDataSource) ((This)->lpVtbl ->get_DataSource (This, ppunkDataSource))
#define _Recordset_putref_DataSource(This, punkDataSource) ((This)->lpVtbl ->putref_DataSource (This, punkDataSource))
#define _Recordset__xSave(This, FileName, PersistFormat) ((This)->lpVtbl ->_xSave (This, FileName, PersistFormat))
#define _Recordset_get_ActiveCommand(This, ppCmd) ((This)->lpVtbl ->get_ActiveCommand (This, ppCmd))
#define _Recordset_put_StayInSync(This, bStayInSync) ((This)->lpVtbl ->put_StayInSync (This, bStayInSync))
#define _Recordset_get_StayInSync(This, pbStayInSync) ((This)->lpVtbl ->get_StayInSync (This, pbStayInSync))
#define _Recordset_GetString(This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString) ((This)->lpVtbl ->GetString (This, StringFormat, NumRows, ColumnDelimeter, RowDelimeter, NullExpr, pRetString))
#define _Recordset_get_DataMember(This, pbstrDataMember) ((This)->lpVtbl ->get_DataMember (This, pbstrDataMember))
#define _Recordset_put_DataMember(This, bstrDataMember) ((This)->lpVtbl ->put_DataMember (This, bstrDataMember))
#define _Recordset_CompareBookmarks(This, Bookmark1, Bookmark2, pCompare) ((This)->lpVtbl ->CompareBookmarks (This, Bookmark1, Bookmark2, pCompare))
#define _Recordset_Clone(This, LockType, ppvObject) ((This)->lpVtbl ->Clone (This, LockType, ppvObject))
#define _Recordset_Resync(This, AffectRecords, ResyncValues) ((This)->lpVtbl ->Resync (This, AffectRecords, ResyncValues))
#define _Recordset_Seek(This, KeyValues, SeekOption) ((This)->lpVtbl ->Seek (This, KeyValues, SeekOption))
#define _Recordset_put_Index(This, Index) ((This)->lpVtbl ->put_Index (This, Index))
#define _Recordset_get_Index(This, pbstrIndex) ((This)->lpVtbl ->get_Index (This, pbstrIndex))
#define _Recordset_Save(This, Destination, PersistFormat) ((This)->lpVtbl ->Save (This, Destination, PersistFormat))
#endif
#endif
#endif
#ifndef __ADORecordsetConstruction_INTERFACE_DEFINED__
#define __ADORecordsetConstruction_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ADORecordsetConstruction;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000283-0000-0010-8000-00AA006D2EA4")
  ADORecordsetConstruction : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Rowset (IUnknown **ppRowset) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Rowset (IUnknown *pRowset) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Chapter (ADO_LONGPTR *plChapter) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Chapter (ADO_LONGPTR lChapter) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_RowPosition (IUnknown **ppRowPos) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_RowPosition (IUnknown *pRowPos) = 0;
  };
#else
  typedef struct ADORecordsetConstructionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADORecordsetConstruction *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADORecordsetConstruction *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADORecordsetConstruction *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADORecordsetConstruction *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADORecordsetConstruction *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADORecordsetConstruction *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADORecordsetConstruction *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Rowset) (ADORecordsetConstruction *This, IUnknown **ppRowset);
    HRESULT (STDMETHODCALLTYPE *put_Rowset) (ADORecordsetConstruction *This, IUnknown *pRowset);
    HRESULT (STDMETHODCALLTYPE *get_Chapter) (ADORecordsetConstruction *This, ADO_LONGPTR *plChapter);
    HRESULT (STDMETHODCALLTYPE *put_Chapter) (ADORecordsetConstruction *This, ADO_LONGPTR lChapter);
    HRESULT (STDMETHODCALLTYPE *get_RowPosition) (ADORecordsetConstruction *This, IUnknown **ppRowPos);
    HRESULT (STDMETHODCALLTYPE *put_RowPosition) (ADORecordsetConstruction *This, IUnknown *pRowPos);
    END_INTERFACE
  } ADORecordsetConstructionVtbl;
  interface ADORecordsetConstruction {
    CONST_VTBL struct ADORecordsetConstructionVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define ADORecordsetConstruction_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ADORecordsetConstruction_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ADORecordsetConstruction_Release(This) ((This)->lpVtbl ->Release (This))
#define ADORecordsetConstruction_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define ADORecordsetConstruction_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define ADORecordsetConstruction_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define ADORecordsetConstruction_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define ADORecordsetConstruction_get_Rowset(This, ppRowset) ((This)->lpVtbl ->get_Rowset (This, ppRowset))
#define ADORecordsetConstruction_put_Rowset(This, pRowset) ((This)->lpVtbl ->put_Rowset (This, pRowset))
#define ADORecordsetConstruction_get_Chapter(This, plChapter) ((This)->lpVtbl ->get_Chapter (This, plChapter))
#define ADORecordsetConstruction_put_Chapter(This, lChapter) ((This)->lpVtbl ->put_Chapter (This, lChapter))
#define ADORecordsetConstruction_get_RowPosition(This, ppRowPos) ((This)->lpVtbl ->get_RowPosition (This, ppRowPos))
#define ADORecordsetConstruction_put_RowPosition(This, pRowPos) ((This)->lpVtbl ->put_RowPosition (This, pRowPos))
#endif
#endif
#endif
#ifndef __Field15_INTERFACE_DEFINED__
#define __Field15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Field15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000505-0000-0010-8000-00AA006D2EA4")
  Field15 : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_ActualSize (ADO_LONGPTR *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DefinedSize (ADO_LONGPTR *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (DataTypeEnum *pDataType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Value (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Value (VARIANT Val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Precision (BYTE *pbPrecision) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_NumericScale (BYTE *pbNumericScale) = 0;
    virtual HRESULT STDMETHODCALLTYPE AppendChunk (VARIANT Data) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetChunk (long Length, VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_OriginalValue (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_UnderlyingValue (VARIANT *pvar) = 0;
  };
#else
  typedef struct Field15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Field15 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Field15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Field15 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Field15 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Field15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Field15 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Field15 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Field15 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActualSize) (Field15 *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (Field15 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_DefinedSize) (Field15 *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Field15 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Type) (Field15 *This, DataTypeEnum *pDataType);
    HRESULT (STDMETHODCALLTYPE *get_Value) (Field15 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Value) (Field15 *This, VARIANT Val);
    HRESULT (STDMETHODCALLTYPE *get_Precision) (Field15 *This, BYTE *pbPrecision);
    HRESULT (STDMETHODCALLTYPE *get_NumericScale) (Field15 *This, BYTE *pbNumericScale);
    HRESULT (STDMETHODCALLTYPE *AppendChunk) (Field15 *This, VARIANT Data);
    HRESULT (STDMETHODCALLTYPE *GetChunk) (Field15 *This, long Length, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_OriginalValue) (Field15 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_UnderlyingValue) (Field15 *This, VARIANT *pvar);
    END_INTERFACE
  } Field15Vtbl;
  interface Field15 {
    CONST_VTBL struct Field15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Field15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Field15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Field15_Release(This) ((This)->lpVtbl ->Release (This))
#define Field15_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Field15_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Field15_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Field15_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Field15_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Field15_get_ActualSize(This, pl) ((This)->lpVtbl ->get_ActualSize (This, pl))
#define Field15_get_Attributes(This, pl) ((This)->lpVtbl ->get_Attributes (This, pl))
#define Field15_get_DefinedSize(This, pl) ((This)->lpVtbl ->get_DefinedSize (This, pl))
#define Field15_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Field15_get_Type(This, pDataType) ((This)->lpVtbl ->get_Type (This, pDataType))
#define Field15_get_Value(This, pvar) ((This)->lpVtbl ->get_Value (This, pvar))
#define Field15_put_Value(This, Val) ((This)->lpVtbl ->put_Value (This, Val))
#define Field15_get_Precision(This, pbPrecision) ((This)->lpVtbl ->get_Precision (This, pbPrecision))
#define Field15_get_NumericScale(This, pbNumericScale) ((This)->lpVtbl ->get_NumericScale (This, pbNumericScale))
#define Field15_AppendChunk(This, Data) ((This)->lpVtbl ->AppendChunk (This, Data))
#define Field15_GetChunk(This, Length, pvar) ((This)->lpVtbl ->GetChunk (This, Length, pvar))
#define Field15_get_OriginalValue(This, pvar) ((This)->lpVtbl ->get_OriginalValue (This, pvar))
#define Field15_get_UnderlyingValue(This, pvar) ((This)->lpVtbl ->get_UnderlyingValue (This, pvar))
#endif
#endif
#endif
#ifndef __Field20_INTERFACE_DEFINED__
#define __Field20_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Field20;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000054C-0000-0010-8000-00AA006D2EA4")
  Field20 : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_ActualSize (ADO_LONGPTR *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DefinedSize (ADO_LONGPTR *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (DataTypeEnum *pDataType) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Value (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Value (VARIANT Val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Precision (BYTE *pbPrecision) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_NumericScale (BYTE *pbNumericScale) = 0;
    virtual HRESULT STDMETHODCALLTYPE AppendChunk (VARIANT Data) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetChunk (long Length, VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_OriginalValue (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_UnderlyingValue (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DataFormat (IUnknown **ppiDF) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_DataFormat (IUnknown *piDF) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Precision (BYTE bPrecision) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_NumericScale (BYTE bScale) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Type (DataTypeEnum DataType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_DefinedSize (ADO_LONGPTR lSize) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Attributes (long lAttributes) = 0;
  };
#else
  typedef struct Field20Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Field20 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Field20 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Field20 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Field20 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Field20 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Field20 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Field20 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Field20 *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActualSize) (Field20 *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (Field20 *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_DefinedSize) (Field20 *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Field20 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Type) (Field20 *This, DataTypeEnum *pDataType);
    HRESULT (STDMETHODCALLTYPE *get_Value) (Field20 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Value) (Field20 *This, VARIANT Val);
    HRESULT (STDMETHODCALLTYPE *get_Precision) (Field20 *This, BYTE *pbPrecision);
    HRESULT (STDMETHODCALLTYPE *get_NumericScale) (Field20 *This, BYTE *pbNumericScale);
    HRESULT (STDMETHODCALLTYPE *AppendChunk) (Field20 *This, VARIANT Data);
    HRESULT (STDMETHODCALLTYPE *GetChunk) (Field20 *This, long Length, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_OriginalValue) (Field20 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_UnderlyingValue) (Field20 *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_DataFormat) (Field20 *This, IUnknown **ppiDF);
    HRESULT (STDMETHODCALLTYPE *putref_DataFormat) (Field20 *This, IUnknown *piDF);
    HRESULT (STDMETHODCALLTYPE *put_Precision) (Field20 *This, BYTE bPrecision);
    HRESULT (STDMETHODCALLTYPE *put_NumericScale) (Field20 *This, BYTE bScale);
    HRESULT (STDMETHODCALLTYPE *put_Type) (Field20 *This, DataTypeEnum DataType);
    HRESULT (STDMETHODCALLTYPE *put_DefinedSize) (Field20 *This, ADO_LONGPTR lSize);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (Field20 *This, long lAttributes);
    END_INTERFACE
  } Field20Vtbl;
  interface Field20 {
    CONST_VTBL struct Field20Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Field20_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Field20_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Field20_Release(This) ((This)->lpVtbl ->Release (This))
#define Field20_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Field20_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Field20_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Field20_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Field20_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Field20_get_ActualSize(This, pl) ((This)->lpVtbl ->get_ActualSize (This, pl))
#define Field20_get_Attributes(This, pl) ((This)->lpVtbl ->get_Attributes (This, pl))
#define Field20_get_DefinedSize(This, pl) ((This)->lpVtbl ->get_DefinedSize (This, pl))
#define Field20_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Field20_get_Type(This, pDataType) ((This)->lpVtbl ->get_Type (This, pDataType))
#define Field20_get_Value(This, pvar) ((This)->lpVtbl ->get_Value (This, pvar))
#define Field20_put_Value(This, Val) ((This)->lpVtbl ->put_Value (This, Val))
#define Field20_get_Precision(This, pbPrecision) ((This)->lpVtbl ->get_Precision (This, pbPrecision))
#define Field20_get_NumericScale(This, pbNumericScale) ((This)->lpVtbl ->get_NumericScale (This, pbNumericScale))
#define Field20_AppendChunk(This, Data) ((This)->lpVtbl ->AppendChunk (This, Data))
#define Field20_GetChunk(This, Length, pvar) ((This)->lpVtbl ->GetChunk (This, Length, pvar))
#define Field20_get_OriginalValue(This, pvar) ((This)->lpVtbl ->get_OriginalValue (This, pvar))
#define Field20_get_UnderlyingValue(This, pvar) ((This)->lpVtbl ->get_UnderlyingValue (This, pvar))
#define Field20_get_DataFormat(This, ppiDF) ((This)->lpVtbl ->get_DataFormat (This, ppiDF))
#define Field20_putref_DataFormat(This, piDF) ((This)->lpVtbl ->putref_DataFormat (This, piDF))
#define Field20_put_Precision(This, bPrecision) ((This)->lpVtbl ->put_Precision (This, bPrecision))
#define Field20_put_NumericScale(This, bScale) ((This)->lpVtbl ->put_NumericScale (This, bScale))
#define Field20_put_Type(This, DataType) ((This)->lpVtbl ->put_Type (This, DataType))
#define Field20_put_DefinedSize(This, lSize) ((This)->lpVtbl ->put_DefinedSize (This, lSize))
#define Field20_put_Attributes(This, lAttributes) ((This)->lpVtbl ->put_Attributes (This, lAttributes))
#endif
#endif
#endif
#ifndef __Field_INTERFACE_DEFINED__
#define __Field_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Field;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000569-0000-0010-8000-00AA006D2EA4")
  ADOField : public Field20 {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Status (long *pFStatus) = 0;
  };
#else
  typedef struct FieldVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOField *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOField *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOField *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOField *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOField *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOField *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOField *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (ADOField *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_ActualSize) (ADOField *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (ADOField *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_DefinedSize) (ADOField *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *get_Name) (ADOField *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Type) (ADOField *This, DataTypeEnum *pDataType);
    HRESULT (STDMETHODCALLTYPE *get_Value) (ADOField *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Value) (ADOField *This, VARIANT Val);
    HRESULT (STDMETHODCALLTYPE *get_Precision) (ADOField *This, BYTE *pbPrecision);
    HRESULT (STDMETHODCALLTYPE *get_NumericScale) (ADOField *This, BYTE *pbNumericScale);
    HRESULT (STDMETHODCALLTYPE *AppendChunk) (ADOField *This, VARIANT Data);
    HRESULT (STDMETHODCALLTYPE *GetChunk) (ADOField *This, long Length, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_OriginalValue) (ADOField *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_UnderlyingValue) (ADOField *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_DataFormat) (ADOField *This, IUnknown **ppiDF);
    HRESULT (STDMETHODCALLTYPE *putref_DataFormat) (ADOField *This, IUnknown *piDF);
    HRESULT (STDMETHODCALLTYPE *put_Precision) (ADOField *This, BYTE bPrecision);
    HRESULT (STDMETHODCALLTYPE *put_NumericScale) (ADOField *This, BYTE bScale);
    HRESULT (STDMETHODCALLTYPE *put_Type) (ADOField *This, DataTypeEnum DataType);
    HRESULT (STDMETHODCALLTYPE *put_DefinedSize) (ADOField *This, ADO_LONGPTR lSize);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (ADOField *This, long lAttributes);
    HRESULT (STDMETHODCALLTYPE *get_Status) (ADOField *This, long *pFStatus);
    END_INTERFACE
  } FieldVtbl;
  interface Field {
    CONST_VTBL struct FieldVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Field_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Field_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Field_Release(This) ((This)->lpVtbl ->Release (This))
#define Field_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Field_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Field_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Field_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Field_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Field_get_ActualSize(This, pl) ((This)->lpVtbl ->get_ActualSize (This, pl))
#define Field_get_Attributes(This, pl) ((This)->lpVtbl ->get_Attributes (This, pl))
#define Field_get_DefinedSize(This, pl) ((This)->lpVtbl ->get_DefinedSize (This, pl))
#define Field_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Field_get_Type(This, pDataType) ((This)->lpVtbl ->get_Type (This, pDataType))
#define Field_get_Value(This, pvar) ((This)->lpVtbl ->get_Value (This, pvar))
#define Field_put_Value(This, Val) ((This)->lpVtbl ->put_Value (This, Val))
#define Field_get_Precision(This, pbPrecision) ((This)->lpVtbl ->get_Precision (This, pbPrecision))
#define Field_get_NumericScale(This, pbNumericScale) ((This)->lpVtbl ->get_NumericScale (This, pbNumericScale))
#define Field_AppendChunk(This, Data) ((This)->lpVtbl ->AppendChunk (This, Data))
#define Field_GetChunk(This, Length, pvar) ((This)->lpVtbl ->GetChunk (This, Length, pvar))
#define Field_get_OriginalValue(This, pvar) ((This)->lpVtbl ->get_OriginalValue (This, pvar))
#define Field_get_UnderlyingValue(This, pvar) ((This)->lpVtbl ->get_UnderlyingValue (This, pvar))
#define Field_get_DataFormat(This, ppiDF) ((This)->lpVtbl ->get_DataFormat (This, ppiDF))
#define Field_putref_DataFormat(This, piDF) ((This)->lpVtbl ->putref_DataFormat (This, piDF))
#define Field_put_Precision(This, bPrecision) ((This)->lpVtbl ->put_Precision (This, bPrecision))
#define Field_put_NumericScale(This, bScale) ((This)->lpVtbl ->put_NumericScale (This, bScale))
#define Field_put_Type(This, DataType) ((This)->lpVtbl ->put_Type (This, DataType))
#define Field_put_DefinedSize(This, lSize) ((This)->lpVtbl ->put_DefinedSize (This, lSize))
#define Field_put_Attributes(This, lAttributes) ((This)->lpVtbl ->put_Attributes (This, lAttributes))
#define Field_get_Status(This, pFStatus) ((This)->lpVtbl ->get_Status (This, pFStatus))
#endif
#endif
#endif
#ifndef __Fields15_INTERFACE_DEFINED__
#define __Fields15_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Fields15;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000506-0000-0010-8000-00AA006D2EA4")
  Fields15 : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, ADOField **ppvObject) = 0;
  };
#else
  typedef struct Fields15Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Fields15 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Fields15 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Fields15 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Fields15 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Fields15 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Fields15 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Fields15 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Fields15 *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Fields15 *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Fields15 *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Fields15 *This, VARIANT Index, ADOField **ppvObject);
    END_INTERFACE
  } Fields15Vtbl;
  interface Fields15 {
    CONST_VTBL struct Fields15Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Fields15_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Fields15_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Fields15_Release(This) ((This)->lpVtbl ->Release (This))
#define Fields15_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Fields15_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Fields15_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Fields15_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Fields15_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Fields15__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Fields15_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Fields15_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif
#endif
#endif
#ifndef __Fields20_INTERFACE_DEFINED__
#define __Fields20_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Fields20;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000054D-0000-0010-8000-00AA006D2EA4")
  Fields20 : public Fields15 {
    public:
    virtual HRESULT STDMETHODCALLTYPE _Append (BSTR Name, DataTypeEnum Type, ADO_LONGPTR DefinedSize = 0, FieldAttributeEnum Attrib = adFldUnspecified) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Index) = 0;
  };
#else
  typedef struct Fields20Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Fields20 *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Fields20 *This);
    ULONG (STDMETHODCALLTYPE *Release) (Fields20 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Fields20 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Fields20 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Fields20 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Fields20 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Fields20 *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Fields20 *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Fields20 *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Fields20 *This, VARIANT Index, ADOField **ppvObject);
    HRESULT (STDMETHODCALLTYPE *_Append) (Fields20 *This, BSTR Name, DataTypeEnum Type, ADO_LONGPTR DefinedSize, FieldAttributeEnum Attrib);
    HRESULT (STDMETHODCALLTYPE *Delete) (Fields20 *This, VARIANT Index);
    END_INTERFACE
  } Fields20Vtbl;
  interface Fields20 {
    CONST_VTBL struct Fields20Vtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Fields20_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Fields20_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Fields20_Release(This) ((This)->lpVtbl ->Release (This))
#define Fields20_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Fields20_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Fields20_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Fields20_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Fields20_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Fields20__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Fields20_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Fields20_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#define Fields20__Append(This, Name, Type, DefinedSize, Attrib) ((This)->lpVtbl ->_Append (This, Name, Type, DefinedSize, Attrib))
#define Fields20_Delete(This, Index) ((This)->lpVtbl ->Delete (This, Index))
#endif
#endif
#endif
#ifndef __Fields_INTERFACE_DEFINED__
#define __Fields_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Fields;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000564-0000-0010-8000-00AA006D2EA4")
  ADOFields : public Fields20 {
    public:
    virtual HRESULT STDMETHODCALLTYPE Append (BSTR Name, DataTypeEnum Type, ADO_LONGPTR DefinedSize, FieldAttributeEnum Attrib, VARIANT FieldValue) = 0;
    virtual HRESULT STDMETHODCALLTYPE Update (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE Resync (ResyncEnum ResyncValues = adResyncAllValues) = 0;
    virtual HRESULT STDMETHODCALLTYPE CancelUpdate (void) = 0;
  };
#else
  typedef struct FieldsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOFields *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOFields *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOFields *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOFields *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOFields *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOFields *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOFields *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOFields *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOFields *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOFields *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOFields *This, VARIANT Index, ADOField **ppvObject);
    HRESULT (STDMETHODCALLTYPE *_Append) (ADOFields *This, BSTR Name, DataTypeEnum Type, ADO_LONGPTR DefinedSize, FieldAttributeEnum Attrib);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOFields *This, VARIANT Index);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOFields *This, BSTR Name, DataTypeEnum Type, ADO_LONGPTR DefinedSize, FieldAttributeEnum Attrib, VARIANT FieldValue);
    HRESULT (STDMETHODCALLTYPE *Update) (ADOFields *This);
    HRESULT (STDMETHODCALLTYPE *Resync) (ADOFields *This, ResyncEnum ResyncValues);
    HRESULT (STDMETHODCALLTYPE *CancelUpdate) (ADOFields *This);
    END_INTERFACE
  } FieldsVtbl;
  interface Fields {
    CONST_VTBL struct FieldsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Fields_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Fields_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Fields_Release(This) ((This)->lpVtbl ->Release (This))
#define Fields_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Fields_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Fields_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Fields_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Fields_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Fields__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Fields_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Fields_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#define Fields__Append(This, Name, Type, DefinedSize, Attrib) ((This)->lpVtbl ->_Append (This, Name, Type, DefinedSize, Attrib))
#define Fields_Delete(This, Index) ((This)->lpVtbl ->Delete (This, Index))
#define Fields_Append(This, Name, Type, DefinedSize, Attrib, FieldValue) ((This)->lpVtbl ->Append (This, Name, Type, DefinedSize, Attrib, FieldValue))
#define Fields_Update(This) ((This)->lpVtbl ->Update (This))
#define Fields_Resync(This, ResyncValues) ((This)->lpVtbl ->Resync (This, ResyncValues))
#define Fields_CancelUpdate(This) ((This)->lpVtbl ->CancelUpdate (This))
#endif
#endif
#endif
#ifndef ___Parameter_INTERFACE_DEFINED__
#define ___Parameter_INTERFACE_DEFINED__

  EXTERN_C const IID IID__Parameter;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000050C-0000-0010-8000-00AA006D2EA4")
  _ADOParameter : public _ADO {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Name (BSTR bstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Value (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Value (VARIANT val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (DataTypeEnum *psDataType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Type (DataTypeEnum sDataType) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Direction (ParameterDirectionEnum lParmDirection) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Direction (ParameterDirectionEnum *plParmDirection) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Precision (BYTE bPrecision) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Precision (BYTE *pbPrecision) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_NumericScale (BYTE bScale) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_NumericScale (BYTE *pbScale) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Size (ADO_LONGPTR l) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Size (ADO_LONGPTR *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE AppendChunk (VARIANT Val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (LONG *plParmAttribs) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Attributes (LONG lParmAttribs) = 0;
  };
#else
  typedef struct _ParameterVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (_ADOParameter *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (_ADOParameter *This);
    ULONG (STDMETHODCALLTYPE *Release) (_ADOParameter *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (_ADOParameter *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (_ADOParameter *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (_ADOParameter *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (_ADOParameter *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (_ADOParameter *This, ADOProperties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Name) (_ADOParameter *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_Name) (_ADOParameter *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_Value) (_ADOParameter *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Value) (_ADOParameter *This, VARIANT val);
    HRESULT (STDMETHODCALLTYPE *get_Type) (_ADOParameter *This, DataTypeEnum *psDataType);
    HRESULT (STDMETHODCALLTYPE *put_Type) (_ADOParameter *This, DataTypeEnum sDataType);
    HRESULT (STDMETHODCALLTYPE *put_Direction) (_ADOParameter *This, ParameterDirectionEnum lParmDirection);
    HRESULT (STDMETHODCALLTYPE *get_Direction) (_ADOParameter *This, ParameterDirectionEnum *plParmDirection);
    HRESULT (STDMETHODCALLTYPE *put_Precision) (_ADOParameter *This, BYTE bPrecision);
    HRESULT (STDMETHODCALLTYPE *get_Precision) (_ADOParameter *This, BYTE *pbPrecision);
    HRESULT (STDMETHODCALLTYPE *put_NumericScale) (_ADOParameter *This, BYTE bScale);
    HRESULT (STDMETHODCALLTYPE *get_NumericScale) (_ADOParameter *This, BYTE *pbScale);
    HRESULT (STDMETHODCALLTYPE *put_Size) (_ADOParameter *This, ADO_LONGPTR l);
    HRESULT (STDMETHODCALLTYPE *get_Size) (_ADOParameter *This, ADO_LONGPTR *pl);
    HRESULT (STDMETHODCALLTYPE *AppendChunk) (_ADOParameter *This, VARIANT Val);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (_ADOParameter *This, LONG *plParmAttribs);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (_ADOParameter *This, LONG lParmAttribs);
    END_INTERFACE
  } _ParameterVtbl;
  interface _Parameter {
    CONST_VTBL struct _ParameterVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define _Parameter_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define _Parameter_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define _Parameter_Release(This) ((This)->lpVtbl ->Release (This))
#define _Parameter_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define _Parameter_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define _Parameter_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define _Parameter_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define _Parameter_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define _Parameter_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define _Parameter_put_Name(This, bstr) ((This)->lpVtbl ->put_Name (This, bstr))
#define _Parameter_get_Value(This, pvar) ((This)->lpVtbl ->get_Value (This, pvar))
#define _Parameter_put_Value(This, val) ((This)->lpVtbl ->put_Value (This, val))
#define _Parameter_get_Type(This, psDataType) ((This)->lpVtbl ->get_Type (This, psDataType))
#define _Parameter_put_Type(This, sDataType) ((This)->lpVtbl ->put_Type (This, sDataType))
#define _Parameter_put_Direction(This, lParmDirection) ((This)->lpVtbl ->put_Direction (This, lParmDirection))
#define _Parameter_get_Direction(This, plParmDirection) ((This)->lpVtbl ->get_Direction (This, plParmDirection))
#define _Parameter_put_Precision(This, bPrecision) ((This)->lpVtbl ->put_Precision (This, bPrecision))
#define _Parameter_get_Precision(This, pbPrecision) ((This)->lpVtbl ->get_Precision (This, pbPrecision))
#define _Parameter_put_NumericScale(This, bScale) ((This)->lpVtbl ->put_NumericScale (This, bScale))
#define _Parameter_get_NumericScale(This, pbScale) ((This)->lpVtbl ->get_NumericScale (This, pbScale))
#define _Parameter_put_Size(This, l) ((This)->lpVtbl ->put_Size (This, l))
#define _Parameter_get_Size(This, pl) ((This)->lpVtbl ->get_Size (This, pl))
#define _Parameter_AppendChunk(This, Val) ((This)->lpVtbl ->AppendChunk (This, Val))
#define _Parameter_get_Attributes(This, plParmAttribs) ((This)->lpVtbl ->get_Attributes (This, plParmAttribs))
#define _Parameter_put_Attributes(This, lParmAttribs) ((This)->lpVtbl ->put_Attributes (This, lParmAttribs))
#endif
#endif
#endif
  EXTERN_C const CLSID CLSID_Parameter;
#ifdef __cplusplus
  Parameter;
#endif
#ifndef __Parameters_INTERFACE_DEFINED__
#define __Parameters_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Parameters;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("0000050D-0000-0010-8000-00AA006D2EA4")
  ADOParameters : public _ADODynaCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, _ADOParameter **ppvObject) = 0;
  };
#else
  typedef struct ParametersVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOParameters *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOParameters *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOParameters *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOParameters *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOParameters *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOParameters *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOParameters *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOParameters *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOParameters *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOParameters *This);
    HRESULT (STDMETHODCALLTYPE *Append) (ADOParameters *This, IDispatch *Object);
    HRESULT (STDMETHODCALLTYPE *Delete) (ADOParameters *This, VARIANT Index);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOParameters *This, VARIANT Index, _ADOParameter **ppvObject);
    END_INTERFACE
  } ParametersVtbl;
  interface Parameters {
    CONST_VTBL struct ParametersVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Parameters_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Parameters_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Parameters_Release(This) ((This)->lpVtbl ->Release (This))
#define Parameters_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Parameters_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Parameters_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Parameters_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Parameters_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Parameters__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Parameters_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Parameters_Append(This, Object) ((This)->lpVtbl ->Append (This, Object))
#define Parameters_Delete(This, Index) ((This)->lpVtbl ->Delete (This, Index))
#define Parameters_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif
#endif
#endif
#ifndef __Property_INTERFACE_DEFINED__
#define __Property_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Property;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000503-0000-0010-8000-00AA006D2EA4")
  ADOProperty : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Value (VARIANT *pval) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Value (VARIANT val) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (DataTypeEnum *ptype) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Attributes (long *plAttributes) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Attributes (long lAttributes) = 0;
  };
#else
  typedef struct PropertyVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOProperty *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOProperty *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOProperty *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOProperty *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOProperty *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOProperty *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOProperty *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Value) (ADOProperty *This, VARIANT *pval);
    HRESULT (STDMETHODCALLTYPE *put_Value) (ADOProperty *This, VARIANT val);
    HRESULT (STDMETHODCALLTYPE *get_Name) (ADOProperty *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Type) (ADOProperty *This, DataTypeEnum *ptype);
    HRESULT (STDMETHODCALLTYPE *get_Attributes) (ADOProperty *This, long *plAttributes);
    HRESULT (STDMETHODCALLTYPE *put_Attributes) (ADOProperty *This, long lAttributes);
    END_INTERFACE
  } PropertyVtbl;
  interface Property {
    CONST_VTBL struct PropertyVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Property_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Property_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Property_Release(This) ((This)->lpVtbl ->Release (This))
#define Property_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Property_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Property_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Property_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Property_get_Value(This, pval) ((This)->lpVtbl ->get_Value (This, pval))
#define Property_put_Value(This, val) ((This)->lpVtbl ->put_Value (This, val))
#define Property_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Property_get_Type(This, ptype) ((This)->lpVtbl ->get_Type (This, ptype))
#define Property_get_Attributes(This, plAttributes) ((This)->lpVtbl ->get_Attributes (This, plAttributes))
#define Property_put_Attributes(This, lAttributes) ((This)->lpVtbl ->put_Attributes (This, lAttributes))
#endif
#endif
#endif
#ifndef __Properties_INTERFACE_DEFINED__
#define __Properties_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Properties;
#if defined (__cplusplus) && !defined (CINTERFACE)

  MIDL_INTERFACE ("00000504-0000-0010-8000-00AA006D2EA4")
  ADOProperties : public _ADOCollection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, ADOProperty **ppvObject) = 0;
  };
#else
  typedef struct PropertiesVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ADOProperties *This, REFIID riid, void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ADOProperties *This);
    ULONG (STDMETHODCALLTYPE *Release) (ADOProperties *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ADOProperties *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ADOProperties *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ADOProperties *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ADOProperties *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Count) (ADOProperties *This, long *c);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (ADOProperties *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Refresh) (ADOProperties *This);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ADOProperties *This, VARIANT Index, ADOProperty **ppvObject);
    END_INTERFACE
  } PropertiesVtbl;
  interface Properties {
    CONST_VTBL struct PropertiesVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Properties_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Properties_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Properties_Release(This) ((This)->lpVtbl ->Release (This))
#define Properties_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Properties_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Properties_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Properties_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Properties_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Properties__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Properties_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Properties_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif
#endif
#endif
#endif

  extern RPC_IF_HANDLE __MIDL_itf_ado10_0001_0035_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_ado10_0001_0035_v0_0_s_ifspec;
#ifdef __cplusplus
}
#endif
#endif
#define ADOCommand _ADOCommand
#define ADORecordset _ADORecordset
#define ADOTransaction _ADOTransaction
#define ADOParameter _ADOParameter
#define ADOConnection _ADOConnection
#define ADOCollection _ADOCollection
#define ADODynaCollection _ADODynaCollection
#define ADORecord _ADORecord
#define ADORecField _ADORecField
#define ADOStream _ADOStream
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             usr/share/mingw-w64/include/adojet.h                                                                0100644 0000000 0000000 00000050422 12404413022 015754  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of rpcndr.h header
#endif

#ifndef __adojet_h__
#define __adojet_h__

#ifndef __IReplica_FWD_DEFINED__
#define __IReplica_FWD_DEFINED__
typedef interface IReplica IReplica;
#endif

#ifndef __Filter_FWD_DEFINED__
#define __Filter_FWD_DEFINED__
typedef interface Filter Filter;
#endif

#ifndef __Filters_FWD_DEFINED__
#define __Filters_FWD_DEFINED__
typedef interface Filters Filters;
#endif

#ifndef __IJetEngine_FWD_DEFINED__
#define __IJetEngine_FWD_DEFINED__
typedef interface IJetEngine IJetEngine;
#endif

#ifndef __Replica_FWD_DEFINED__
#define __Replica_FWD_DEFINED__

#ifdef __cplusplus
typedef class Replica Replica;
#else
typedef struct Replica Replica;
#endif
#endif

#ifndef __JetEngine_FWD_DEFINED__
#define __JetEngine_FWD_DEFINED__

#ifdef __cplusplus
typedef class JetEngine JetEngine;
#else
typedef struct JetEngine JetEngine;
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

  extern RPC_IF_HANDLE __MIDL_itf_adojet_0000_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_adojet_0000_0000_v0_0_s_ifspec;

#ifndef __JRO_LIBRARY_DEFINED__
#define __JRO_LIBRARY_DEFINED__

  typedef DECLSPEC_UUID ("D2D139DF-B6CA-11d1-9F31-00C04FC29D52")
  enum ReplicaTypeEnum {
    jrRepTypeNotReplicable = 0,
    jrRepTypeDesignMaster = 0x1,
    jrRepTypeFull = 0x2,
    jrRepTypePartial = 0x3
  } ReplicaTypeEnum;

  typedef DECLSPEC_UUID ("6877D21A-B6CE-11d1-9F31-00C04FC29D52")
  enum VisibilityEnum {
    jrRepVisibilityGlobal = 0x1,
    jrRepVisibilityLocal = 0x2,
    jrRepVisibilityAnon = 0x4
  } VisibilityEnum;

  typedef DECLSPEC_UUID ("B42FBFF6-B6CF-11d1-9F31-00C04FC29D52")
  enum UpdatabilityEnum {
    jrRepUpdFull = 0,
    jrRepUpdReadOnly = 0x2
  } UpdatabilityEnum;

  typedef DECLSPEC_UUID ("60C05416-B6D0-11d1-9F31-00C04FC29D52")
  enum SyncTypeEnum {
    jrSyncTypeExport = 0x1,
    jrSyncTypeImport = 0x2,
    jrSyncTypeImpExp = 0x3
  } SyncTypeEnum;

  typedef DECLSPEC_UUID ("5EBA3970-061E-11d2-BB77-00C04FAE22DA")
  enum SyncModeEnum {
    jrSyncModeIndirect = 0x1,
    jrSyncModeDirect = 0x2,
    jrSyncModeInternet = 0x3
  } SyncModeEnum;

  typedef DECLSPEC_UUID ("72769F94-BF78-11d1-AC4D-00C04FC29F8F")
  enum FilterTypeEnum {
    jrFilterTypeTable = 0x1,
    jrFilterTypeRelationship = 0x2
  } FilterTypeEnum;

  EXTERN_C const IID LIBID_JRO;

#ifndef __IReplica_INTERFACE_DEFINED__
#define __IReplica_INTERFACE_DEFINED__

  EXTERN_C const IID IID_IReplica;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("D2D139E0-B6CA-11d1-9F31-00C04FC29D52")
  IReplica : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE putref_ActiveConnection (IDispatch *pconn) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ActiveConnection (VARIANT vConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection (IDispatch **ppconn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ConflictFunction (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ConflictFunction (BSTR bstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ConflictTables (_Recordset **pprset) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DesignMasterId (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_DesignMasterId (VARIANT var) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Priority (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ReplicaId (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ReplicaType (ReplicaTypeEnum *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_RetentionPeriod (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_RetentionPeriod (long l) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Visibility (VisibilityEnum *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE CreateReplica (BSTR replicaName, BSTR description, ReplicaTypeEnum replicaType = jrRepTypeFull, VisibilityEnum visibility = jrRepVisibilityGlobal, long priority = -1, UpdatabilityEnum updatability = jrRepUpdFull) = 0;
    virtual HRESULT STDMETHODCALLTYPE GetObjectReplicability (BSTR objectName, BSTR objectType, VARIANT_BOOL *replicability) = 0;
    virtual HRESULT STDMETHODCALLTYPE SetObjectReplicability (BSTR objectName, BSTR objectType, VARIANT_BOOL replicability) = 0;
    virtual HRESULT STDMETHODCALLTYPE MakeReplicable (BSTR connectionString = L"", VARIANT_BOOL columnTracking = -1) = 0;
    virtual HRESULT STDMETHODCALLTYPE PopulatePartial (BSTR FullReplica) = 0;
    virtual HRESULT STDMETHODCALLTYPE Synchronize (BSTR target, SyncTypeEnum syncType = jrSyncTypeImpExp, SyncModeEnum syncMode = jrSyncModeIndirect) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Filters (Filters **ppFilters) = 0;
  };
#else
  typedef struct IReplicaVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (IReplica *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (IReplica *This);
    ULONG (STDMETHODCALLTYPE *Release) (IReplica *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (IReplica *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (IReplica *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (IReplica *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (IReplica *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveConnection) (IReplica *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (IReplica *This, VARIANT vConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (IReplica *This, IDispatch **ppconn);
    HRESULT (STDMETHODCALLTYPE *get_ConflictFunction) (IReplica *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_ConflictFunction) (IReplica *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_ConflictTables) (IReplica *This, _Recordset **pprset);
    HRESULT (STDMETHODCALLTYPE *get_DesignMasterId) (IReplica *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_DesignMasterId) (IReplica *This, VARIANT var);
    HRESULT (STDMETHODCALLTYPE *get_Priority) (IReplica *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_ReplicaId) (IReplica *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *get_ReplicaType) (IReplica *This, ReplicaTypeEnum *pl);
    HRESULT (STDMETHODCALLTYPE *get_RetentionPeriod) (IReplica *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *put_RetentionPeriod) (IReplica *This, long l);
    HRESULT (STDMETHODCALLTYPE *get_Visibility) (IReplica *This, VisibilityEnum *pl);
    HRESULT (STDMETHODCALLTYPE *CreateReplica) (IReplica *This, BSTR replicaName, BSTR description, ReplicaTypeEnum replicaType, VisibilityEnum visibility, long priority, UpdatabilityEnum updatability);
    HRESULT (STDMETHODCALLTYPE *GetObjectReplicability) (IReplica *This, BSTR objectName, BSTR objectType, VARIANT_BOOL *replicability);
    HRESULT (STDMETHODCALLTYPE *SetObjectReplicability) (IReplica *This, BSTR objectName, BSTR objectType, VARIANT_BOOL replicability);
    HRESULT (STDMETHODCALLTYPE *MakeReplicable) (IReplica *This, BSTR connectionString, VARIANT_BOOL columnTracking);
    HRESULT (STDMETHODCALLTYPE *PopulatePartial) (IReplica *This, BSTR FullReplica);
    HRESULT (STDMETHODCALLTYPE *Synchronize) (IReplica *This, BSTR target, SyncTypeEnum syncType, SyncModeEnum syncMode);
    HRESULT (STDMETHODCALLTYPE *get_Filters) (IReplica *This, Filters **ppFilters);
    END_INTERFACE
  } IReplicaVtbl;

  interface IReplica {
    CONST_VTBL struct IReplicaVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define IReplica_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define IReplica_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define IReplica_Release(This) ((This)->lpVtbl ->Release (This))
#define IReplica_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define IReplica_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define IReplica_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define IReplica_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define IReplica_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define IReplica_put_ActiveConnection(This, vConn) ((This)->lpVtbl ->put_ActiveConnection (This, vConn))
#define IReplica_get_ActiveConnection(This, ppconn) ((This)->lpVtbl ->get_ActiveConnection (This, ppconn))
#define IReplica_get_ConflictFunction(This, pbstr) ((This)->lpVtbl ->get_ConflictFunction (This, pbstr))
#define IReplica_put_ConflictFunction(This, bstr) ((This)->lpVtbl ->put_ConflictFunction (This, bstr))
#define IReplica_get_ConflictTables(This, pprset) ((This)->lpVtbl ->get_ConflictTables (This, pprset))
#define IReplica_get_DesignMasterId(This, pvar) ((This)->lpVtbl ->get_DesignMasterId (This, pvar))
#define IReplica_put_DesignMasterId(This, var) ((This)->lpVtbl ->put_DesignMasterId (This, var))
#define IReplica_get_Priority(This, pl) ((This)->lpVtbl ->get_Priority (This, pl))
#define IReplica_get_ReplicaId(This, pvar) ((This)->lpVtbl ->get_ReplicaId (This, pvar))
#define IReplica_get_ReplicaType(This, pl) ((This)->lpVtbl ->get_ReplicaType (This, pl))
#define IReplica_get_RetentionPeriod(This, pl) ((This)->lpVtbl ->get_RetentionPeriod (This, pl))
#define IReplica_put_RetentionPeriod(This, l) ((This)->lpVtbl ->put_RetentionPeriod (This, l))
#define IReplica_get_Visibility(This, pl) ((This)->lpVtbl ->get_Visibility (This, pl))
#define IReplica_CreateReplica(This, replicaName, description, replicaType, visibility, priority, updatability) ((This)->lpVtbl ->CreateReplica (This, replicaName, description, replicaType, visibility, priority, updatability))
#define IReplica_GetObjectReplicability(This, objectName, objectType, replicability) ((This)->lpVtbl ->GetObjectReplicability (This, objectName, objectType, replicability))
#define IReplica_SetObjectReplicability(This, objectName, objectType, replicability) ((This)->lpVtbl ->SetObjectReplicability (This, objectName, objectType, replicability))
#define IReplica_MakeReplicable(This, connectionString, columnTracking) ((This)->lpVtbl ->MakeReplicable (This, connectionString, columnTracking))
#define IReplica_PopulatePartial(This, FullReplica) ((This)->lpVtbl ->PopulatePartial (This, FullReplica))
#define IReplica_Synchronize(This, target, syncType, syncMode) ((This)->lpVtbl ->Synchronize (This, target, syncType, syncMode))
#define IReplica_get_Filters(This, ppFilters) ((This)->lpVtbl ->get_Filters (This, ppFilters))
#endif
#endif
#endif

#ifndef __Filter_INTERFACE_DEFINED__
#define __Filter_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Filter;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("D2D139E1-B6CA-11d1-9F31-00C04FC29D52")
  Filter : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_TableName (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_FilterType (FilterTypeEnum *ptype) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_FilterCriteria (BSTR *pbstr) = 0;
  };
#else
  typedef struct FilterVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Filter *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Filter *This);
    ULONG (STDMETHODCALLTYPE *Release) (Filter *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Filter *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Filter *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Filter *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Filter *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_TableName) (Filter *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_FilterType) (Filter *This, FilterTypeEnum *ptype);
    HRESULT (STDMETHODCALLTYPE *get_FilterCriteria) (Filter *This, BSTR *pbstr);
    END_INTERFACE
  } FilterVtbl;

  interface Filter {
    CONST_VTBL struct FilterVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Filter_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Filter_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Filter_Release(This) ((This)->lpVtbl ->Release (This))
#define Filter_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Filter_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Filter_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Filter_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Filter_get_TableName(This, pbstr) ((This)->lpVtbl ->get_TableName (This, pbstr))
#define Filter_get_FilterType(This, ptype) ((This)->lpVtbl ->get_FilterType (This, ptype))
#define Filter_get_FilterCriteria(This, pbstr) ((This)->lpVtbl ->get_FilterCriteria (This, pbstr))
#endif
#endif
#endif

#ifndef __Filters_INTERFACE_DEFINED__
#define __Filters_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Filters;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("D2D139E2-B6CA-11d1-9F31-00C04FC29D52")
  Filters : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE Refresh (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE _NewEnum (IUnknown **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Count (long *c) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, Filter **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Append (BSTR tableName, FilterTypeEnum filterType, BSTR filterCriteria) = 0;
    virtual HRESULT STDMETHODCALLTYPE Delete (VARIANT Index) = 0;
  };
#else
  typedef struct FiltersVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Filters *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Filters *This);
    ULONG (STDMETHODCALLTYPE *Release) (Filters *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Filters *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Filters *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Filters *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Filters *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Filters *This);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Filters *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Filters *This, long *c);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Filters *This, VARIANT Index, Filter **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Append) (Filters *This, BSTR tableName, FilterTypeEnum filterType, BSTR filterCriteria);
    HRESULT (STDMETHODCALLTYPE *Delete) (Filters *This, VARIANT Index);
    END_INTERFACE
  } FiltersVtbl;

  interface Filters {
    CONST_VTBL struct FiltersVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define Filters_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Filters_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Filters_Release(This) ((This)->lpVtbl ->Release (This))
#define Filters_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Filters_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Filters_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Filters_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Filters_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Filters__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Filters_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Filters_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#define Filters_Append(This, tableName, filterType, filterCriteria) ((This)->lpVtbl ->Append (This, tableName, filterType, filterCriteria))
#define Filters_Delete(This, Index) ((This)->lpVtbl ->Delete (This, Index))
#endif

#endif
#endif

#ifndef __IJetEngine_INTERFACE_DEFINED__
#define __IJetEngine_INTERFACE_DEFINED__

  EXTERN_C const IID IID_IJetEngine;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("9F63D980-FF25-11D1-BB6F-00C04FAE22DA")
  IJetEngine : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE CompactDatabase (BSTR SourceConnection, BSTR Destconnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE RefreshCache (_Connection *Connection) = 0;
  };
#else
  typedef struct IJetEngineVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (IJetEngine *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (IJetEngine *This);
    ULONG (STDMETHODCALLTYPE *Release) (IJetEngine *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (IJetEngine *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (IJetEngine *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (IJetEngine *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (IJetEngine *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *CompactDatabase) (IJetEngine *This, BSTR SourceConnection, BSTR Destconnection);
    HRESULT (STDMETHODCALLTYPE *RefreshCache) (IJetEngine *This, _Connection *Connection);
    END_INTERFACE
  } IJetEngineVtbl;

  interface IJetEngine {
    CONST_VTBL struct IJetEngineVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define IJetEngine_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define IJetEngine_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define IJetEngine_Release(This) ((This)->lpVtbl ->Release (This))
#define IJetEngine_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define IJetEngine_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define IJetEngine_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define IJetEngine_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define IJetEngine_CompactDatabase(This, SourceConnection, Destconnection) ((This)->lpVtbl ->CompactDatabase (This, SourceConnection, Destconnection))
#define IJetEngine_RefreshCache(This, Connection) ((This)->lpVtbl ->RefreshCache (This, Connection))
#endif

#endif
#endif

  EXTERN_C const CLSID CLSID_Replica;
#ifdef __cplusplus

  class DECLSPEC_UUID ("D2D139E3-B6CA-11d1-9F31-00C04FC29D52")
  Replica;

#endif

  EXTERN_C const CLSID CLSID_JetEngine;

#ifdef __cplusplus
  class DECLSPEC_UUID ("DE88C160-FF2C-11D1-BB6F-00C04FAE22DA")
  JetEngine;
#endif
#endif

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                              usr/share/mingw-w64/include/adomd.h                                                                 0100644 0000000 0000000 00000201500 12404413022 015565  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 500
#endif

#ifndef __REQUIRED_RPCSAL_H_VERSION__
#define __REQUIRED_RPCSAL_H_VERSION__ 100
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of rpcndr.h header.
#endif

#ifndef __adomd_h__
#define __adomd_h__

#ifndef __ICatalog_FWD_DEFINED__
#define __ICatalog_FWD_DEFINED__
typedef interface ICatalog ICatalog;
#endif

#ifndef __ICellset_FWD_DEFINED__
#define __ICellset_FWD_DEFINED__
typedef interface ICellset ICellset;
#endif

#ifndef __Cell_FWD_DEFINED__
#define __Cell_FWD_DEFINED__
typedef interface Cell Cell;
#endif

#ifndef __Axis_FWD_DEFINED__
#define __Axis_FWD_DEFINED__
typedef interface Axis Axis;
#endif

#ifndef __Position_FWD_DEFINED__
#define __Position_FWD_DEFINED__
typedef interface Position Position;
#endif

#ifndef __Member_FWD_DEFINED__
#define __Member_FWD_DEFINED__
typedef interface Member Member;
#endif

#ifndef __Level_FWD_DEFINED__
#define __Level_FWD_DEFINED__
typedef interface Level Level;
#endif

#ifndef __CubeDef25_FWD_DEFINED__
#define __CubeDef25_FWD_DEFINED__
typedef interface CubeDef25 CubeDef25;
#endif

#ifndef __CubeDef_FWD_DEFINED__
#define __CubeDef_FWD_DEFINED__
typedef interface CubeDef CubeDef;
#endif

#ifndef __Dimension_FWD_DEFINED__
#define __Dimension_FWD_DEFINED__
typedef interface Dimension Dimension;
#endif

#ifndef __Hierarchy_FWD_DEFINED__
#define __Hierarchy_FWD_DEFINED__
typedef interface Hierarchy Hierarchy;
#endif

#ifndef __MD_Collection_FWD_DEFINED__
#define __MD_Collection_FWD_DEFINED__
typedef interface MD_Collection MD_Collection;
#endif

#ifndef __Members_FWD_DEFINED__
#define __Members_FWD_DEFINED__
typedef interface Members Members;
#endif

#ifndef __Levels_FWD_DEFINED__
#define __Levels_FWD_DEFINED__
typedef interface Levels Levels;
#endif

#ifndef __Axes_FWD_DEFINED__
#define __Axes_FWD_DEFINED__
typedef interface Axes Axes;
#endif

#ifndef __Positions_FWD_DEFINED__
#define __Positions_FWD_DEFINED__
typedef interface Positions Positions;
#endif

#ifndef __Hierarchies_FWD_DEFINED__
#define __Hierarchies_FWD_DEFINED__
typedef interface Hierarchies Hierarchies;
#endif

#ifndef __Dimensions_FWD_DEFINED__
#define __Dimensions_FWD_DEFINED__
typedef interface Dimensions Dimensions;
#endif

#ifndef __CubeDefs_FWD_DEFINED__
#define __CubeDefs_FWD_DEFINED__
typedef interface CubeDefs CubeDefs;
#endif

#ifndef __Catalog_FWD_DEFINED__
#define __Catalog_FWD_DEFINED__

#ifdef __cplusplus
typedef class Catalog Catalog;
#else
typedef struct Catalog Catalog;
#endif
#endif

#ifndef __Cellset_FWD_DEFINED__
#define __Cellset_FWD_DEFINED__

#ifdef __cplusplus
typedef class Cellset Cellset;
#else
typedef struct Cellset Cellset;
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

  extern RPC_IF_HANDLE __MIDL_itf_adomd_0000_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_adomd_0000_0000_v0_0_s_ifspec;

#ifndef __ADOMD_LIBRARY_DEFINED__
#define __ADOMD_LIBRARY_DEFINED__

  typedef DECLSPEC_UUID ("000002AE-0000-0010-8000-00AA006D2EA4")
  enum MemberTypeEnum {
    adMemberUnknown = 0,
    adMemberRegular = 0x1,
    adMemberAll = 0x2,
    adMemberMeasure = 0x3,
    adMemberFormula = 0x4
  } MemberTypeEnum;

  typedef DECLSPEC_UUID ("C23BBD43-E494-4d00-B4D1-6C9A2CE17CE3")
  enum SchemaObjectTypeEnum {
    adObjectTypeDimension = 1,
    adObjectTypeHierarchy = 2,
    adObjectTypeLevel = 3,
    adObjectTypeMember = 4
  } SchemaObjectTypeEnum;

  EXTERN_C const IID LIBID_ADOMD;

#ifndef __ICatalog_INTERFACE_DEFINED__
#define __ICatalog_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ICatalog;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("228136B1-8BD3-11D0-B4EF-00A0C9138CA4")
  ICatalog : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ActiveConnection (IDispatch *pconn) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ActiveConnection (BSTR bstrConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection (IDispatch **ppConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_CubeDefs (CubeDefs **ppvObject) = 0;
  };
#else
  typedef struct ICatalogVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ICatalog *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ICatalog *This);
    ULONG (STDMETHODCALLTYPE *Release) (ICatalog *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ICatalog *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ICatalog *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ICatalog *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ICatalog *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (ICatalog *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveConnection) (ICatalog *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (ICatalog *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (ICatalog *This, IDispatch **ppConn);
    HRESULT (STDMETHODCALLTYPE *get_CubeDefs) (ICatalog *This, CubeDefs **ppvObject);
    END_INTERFACE
  } ICatalogVtbl;

  interface ICatalog {
    CONST_VTBL struct ICatalogVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define ICatalog_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ICatalog_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ICatalog_Release(This) ((This)->lpVtbl ->Release (This))
#define ICatalog_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define ICatalog_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define ICatalog_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define ICatalog_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define ICatalog_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define ICatalog_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define ICatalog_put_ActiveConnection(This, bstrConn) ((This)->lpVtbl ->put_ActiveConnection (This, bstrConn))
#define ICatalog_get_ActiveConnection(This, ppConn) ((This)->lpVtbl ->get_ActiveConnection (This, ppConn))
#define ICatalog_get_CubeDefs(This, ppvObject) ((This)->lpVtbl ->get_CubeDefs (This, ppvObject))
#endif

#endif
#endif

#ifndef __ICellset_INTERFACE_DEFINED__
#define __ICellset_INTERFACE_DEFINED__

  EXTERN_C const IID IID_ICellset;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("2281372A-8BD3-11D0-B4EF-00A0C9138CA4")
  ICellset : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (SAFEARRAY **idx, Cell **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE Open (VARIANT DataSource, VARIANT ActiveConnection) = 0;
    virtual HRESULT STDMETHODCALLTYPE Close (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_Source (IDispatch *pcmd) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Source (BSTR bstrCmd) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Source (VARIANT *pvSource) = 0;
    virtual HRESULT STDMETHODCALLTYPE putref_ActiveConnection (IDispatch *pconn) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_ActiveConnection (BSTR bstrConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ActiveConnection (IDispatch **ppConn) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_State (LONG *plState) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Axes (Axes **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_FilterAxis (Axis **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (Properties **ppvObject) = 0;
  };
#else
  typedef struct ICellsetVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (ICellset *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (ICellset *This);
    ULONG (STDMETHODCALLTYPE *Release) (ICellset *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (ICellset *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (ICellset *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (ICellset *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (ICellset *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Item) (ICellset *This, SAFEARRAY **idx, Cell **ppvObject);
    HRESULT (STDMETHODCALLTYPE *Open) (ICellset *This, VARIANT DataSource, VARIANT ActiveConnection);
    HRESULT (STDMETHODCALLTYPE *Close) (ICellset *This);
    HRESULT (STDMETHODCALLTYPE *putref_Source) (ICellset *This, IDispatch *pcmd);
    HRESULT (STDMETHODCALLTYPE *put_Source) (ICellset *This, BSTR bstrCmd);
    HRESULT (STDMETHODCALLTYPE *get_Source) (ICellset *This, VARIANT *pvSource);
    HRESULT (STDMETHODCALLTYPE *putref_ActiveConnection) (ICellset *This, IDispatch *pconn);
    HRESULT (STDMETHODCALLTYPE *put_ActiveConnection) (ICellset *This, BSTR bstrConn);
    HRESULT (STDMETHODCALLTYPE *get_ActiveConnection) (ICellset *This, IDispatch **ppConn);
    HRESULT (STDMETHODCALLTYPE *get_State) (ICellset *This, LONG *plState);
    HRESULT (STDMETHODCALLTYPE *get_Axes) (ICellset *This, Axes **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_FilterAxis) (ICellset *This, Axis **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (ICellset *This, Properties **ppvObject);
    END_INTERFACE
  } ICellsetVtbl;

  interface ICellset {
    CONST_VTBL struct ICellsetVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define ICellset_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define ICellset_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define ICellset_Release(This) ((This)->lpVtbl ->Release (This))
#define ICellset_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define ICellset_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define ICellset_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define ICellset_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define ICellset_get_Item(This, idx, ppvObject) ((This)->lpVtbl ->get_Item (This, idx, ppvObject))
#define ICellset_Open(This, DataSource, ActiveConnection) ((This)->lpVtbl ->Open (This, DataSource, ActiveConnection))
#define ICellset_Close(This) ((This)->lpVtbl ->Close (This))
#define ICellset_putref_Source(This, pcmd) ((This)->lpVtbl ->putref_Source (This, pcmd))
#define ICellset_put_Source(This, bstrCmd) ((This)->lpVtbl ->put_Source (This, bstrCmd))
#define ICellset_get_Source(This, pvSource) ((This)->lpVtbl ->get_Source (This, pvSource))
#define ICellset_putref_ActiveConnection(This, pconn) ((This)->lpVtbl ->putref_ActiveConnection (This, pconn))
#define ICellset_put_ActiveConnection(This, bstrConn) ((This)->lpVtbl ->put_ActiveConnection (This, bstrConn))
#define ICellset_get_ActiveConnection(This, ppConn) ((This)->lpVtbl ->get_ActiveConnection (This, ppConn))
#define ICellset_get_State(This, plState) ((This)->lpVtbl ->get_State (This, plState))
#define ICellset_get_Axes(This, ppvObject) ((This)->lpVtbl ->get_Axes (This, ppvObject))
#define ICellset_get_FilterAxis(This, ppvObject) ((This)->lpVtbl ->get_FilterAxis (This, ppvObject))
#define ICellset_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#endif

#endif
#endif

#ifndef __Cell_INTERFACE_DEFINED__
#define __Cell_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Cell;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("2281372E-8BD3-11D0-B4EF-00A0C9138CA4")
  Cell : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Value (VARIANT *pvar) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_Value (VARIANT var) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Positions (Positions **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (Properties **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_FormattedValue (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE put_FormattedValue (BSTR bstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Ordinal (long *pl) = 0;
  };
#else
  typedef struct CellVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Cell *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Cell *This);
    ULONG (STDMETHODCALLTYPE *Release) (Cell *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Cell *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Cell *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Cell *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Cell *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Value) (Cell *This, VARIANT *pvar);
    HRESULT (STDMETHODCALLTYPE *put_Value) (Cell *This, VARIANT var);
    HRESULT (STDMETHODCALLTYPE *get_Positions) (Cell *This, Positions **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Cell *This, Properties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_FormattedValue) (Cell *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *put_FormattedValue) (Cell *This, BSTR bstr);
    HRESULT (STDMETHODCALLTYPE *get_Ordinal) (Cell *This, long *pl);
    END_INTERFACE
  } CellVtbl;
  interface Cell {
    CONST_VTBL struct CellVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Cell_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Cell_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Cell_Release(This) ((This)->lpVtbl ->Release (This))
#define Cell_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Cell_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Cell_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Cell_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Cell_get_Value(This, pvar) ((This)->lpVtbl ->get_Value (This, pvar))
#define Cell_put_Value(This, var) ((This)->lpVtbl ->put_Value (This, var))
#define Cell_get_Positions(This, ppvObject) ((This)->lpVtbl ->get_Positions (This, ppvObject))
#define Cell_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Cell_get_FormattedValue(This, pbstr) ((This)->lpVtbl ->get_FormattedValue (This, pbstr))
#define Cell_put_FormattedValue(This, bstr) ((This)->lpVtbl ->put_FormattedValue (This, bstr))
#define Cell_get_Ordinal(This, pl) ((This)->lpVtbl ->get_Ordinal (This, pl))
#endif

#endif
#endif

#ifndef __Axis_INTERFACE_DEFINED__
#define __Axis_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Axis;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("22813732-8BD3-11D0-B4EF-00A0C9138CA4")
  Axis : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DimensionCount (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Positions (Positions **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (Properties **ppvObject) = 0;
  };
#else
  typedef struct AxisVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Axis *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Axis *This);
    ULONG (STDMETHODCALLTYPE *Release) (Axis *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Axis *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Axis *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Axis *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Axis *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Axis *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_DimensionCount) (Axis *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_Positions) (Axis *This, Positions **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Axis *This, Properties **ppvObject);
    END_INTERFACE
  } AxisVtbl;

  interface Axis {
    CONST_VTBL struct AxisVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Axis_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Axis_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Axis_Release(This) ((This)->lpVtbl ->Release (This))
#define Axis_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Axis_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Axis_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Axis_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Axis_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Axis_get_DimensionCount(This, pl) ((This)->lpVtbl ->get_DimensionCount (This, pl))
#define Axis_get_Positions(This, ppvObject) ((This)->lpVtbl ->get_Positions (This, ppvObject))
#define Axis_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#endif

#endif
#endif

#ifndef __Position_INTERFACE_DEFINED__
#define __Position_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Position;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("22813734-8BD3-11D0-B4EF-00A0C9138CA4")
  Position : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Ordinal (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Members (Members **ppvObject) = 0;
  };
#else
  typedef struct PositionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Position *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Position *This);
    ULONG (STDMETHODCALLTYPE *Release) (Position *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Position *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Position *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Position *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Position *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Ordinal) (Position *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_Members) (Position *This, Members **ppvObject);
    END_INTERFACE
  } PositionVtbl;

  interface Position {
    CONST_VTBL struct PositionVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Position_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Position_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Position_Release(This) ((This)->lpVtbl ->Release (This))
#define Position_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Position_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Position_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Position_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Position_get_Ordinal(This, pl) ((This)->lpVtbl ->get_Ordinal (This, pl))
#define Position_get_Members(This, ppvObject) ((This)->lpVtbl ->get_Members (This, ppvObject))
#endif

#endif
#endif

#ifndef __Member_INTERFACE_DEFINED__
#define __Member_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Member;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("22813736-8BD3-11D0-B4EF-00A0C9138CA4")
  Member : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_UniqueName (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Caption (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Description (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Parent (Member **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_LevelDepth (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_LevelName (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (Properties **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Type (MemberTypeEnum *ptype) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ChildCount (long *pl) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_DrilledDown (VARIANT_BOOL *pf) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_ParentSameAsPrev (VARIANT_BOOL *pf) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Children (Members **ppvObject) = 0;
  };
#else
  typedef struct MemberVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Member *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Member *This);
    ULONG (STDMETHODCALLTYPE *Release) (Member *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Member *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Member *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Member *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Member *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Member *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_UniqueName) (Member *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Caption) (Member *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Description) (Member *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Parent) (Member *This, Member **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_LevelDepth) (Member *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_LevelName) (Member *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Member *This, Properties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Type) (Member *This, MemberTypeEnum *ptype);
    HRESULT (STDMETHODCALLTYPE *get_ChildCount) (Member *This, long *pl);
    HRESULT (STDMETHODCALLTYPE *get_DrilledDown) (Member *This, VARIANT_BOOL *pf);
    HRESULT (STDMETHODCALLTYPE *get_ParentSameAsPrev) (Member *This, VARIANT_BOOL *pf);
    HRESULT (STDMETHODCALLTYPE *get_Children) (Member *This, Members **ppvObject);
    END_INTERFACE
  } MemberVtbl;

  interface Member {
    CONST_VTBL struct MemberVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Member_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Member_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Member_Release(This) ((This)->lpVtbl ->Release (This))
#define Member_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Member_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Member_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Member_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Member_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Member_get_UniqueName(This, pbstr) ((This)->lpVtbl ->get_UniqueName (This, pbstr))
#define Member_get_Caption(This, pbstr) ((This)->lpVtbl ->get_Caption (This, pbstr))
#define Member_get_Description(This, pbstr) ((This)->lpVtbl ->get_Description (This, pbstr))
#define Member_get_Parent(This, ppvObject) ((This)->lpVtbl ->get_Parent (This, ppvObject))
#define Member_get_LevelDepth(This, pl) ((This)->lpVtbl ->get_LevelDepth (This, pl))
#define Member_get_LevelName(This, pbstr) ((This)->lpVtbl ->get_LevelName (This, pbstr))
#define Member_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Member_get_Type(This, ptype) ((This)->lpVtbl ->get_Type (This, ptype))
#define Member_get_ChildCount(This, pl) ((This)->lpVtbl ->get_ChildCount (This, pl))
#define Member_get_DrilledDown(This, pf) ((This)->lpVtbl ->get_DrilledDown (This, pf))
#define Member_get_ParentSameAsPrev(This, pf) ((This)->lpVtbl ->get_ParentSameAsPrev (This, pf))
#define Member_get_Children(This, ppvObject) ((This)->lpVtbl ->get_Children (This, ppvObject))
#endif

#endif
#endif

#ifndef __Level_INTERFACE_DEFINED__
#define __Level_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Level;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("2281373A-8BD3-11D0-B4EF-00A0C9138CA4")
  Level : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_UniqueName (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Caption (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Description (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Depth (short *pw) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (Properties **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Members (Members **ppvObject) = 0;
  };
#else
  typedef struct LevelVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Level *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Level *This);
    ULONG (STDMETHODCALLTYPE *Release) (Level *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Level *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Level *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Level *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Level *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Level *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_UniqueName) (Level *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Caption) (Level *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Description) (Level *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Depth) (Level *This, short *pw);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Level *This, Properties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Members) (Level *This, Members **ppvObject);
    END_INTERFACE
  } LevelVtbl;

  interface Level {
    CONST_VTBL struct LevelVtbl *lpVtbl;
  };

#ifdef COBJMACROS

#define Level_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Level_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Level_Release(This) ((This)->lpVtbl ->Release (This))
#define Level_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Level_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Level_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Level_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Level_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Level_get_UniqueName(This, pbstr) ((This)->lpVtbl ->get_UniqueName (This, pbstr))
#define Level_get_Caption(This, pbstr) ((This)->lpVtbl ->get_Caption (This, pbstr))
#define Level_get_Description(This, pbstr) ((This)->lpVtbl ->get_Description (This, pbstr))
#define Level_get_Depth(This, pw) ((This)->lpVtbl ->get_Depth (This, pw))
#define Level_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Level_get_Members(This, ppvObject) ((This)->lpVtbl ->get_Members (This, ppvObject))
#endif

#endif
#endif

#ifndef __CubeDef25_INTERFACE_DEFINED__
#define __CubeDef25_INTERFACE_DEFINED__

  EXTERN_C const IID IID_CubeDef25;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("2281373E-8BD3-11D0-B4EF-00A0C9138CA4")
  CubeDef25 : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Description (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (Properties **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Dimensions (Dimensions **ppvObject) = 0;
  };
#else
  typedef struct CubeDef25Vtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (CubeDef25 *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (CubeDef25 *This);
    ULONG (STDMETHODCALLTYPE *Release) (CubeDef25 *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (CubeDef25 *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (CubeDef25 *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (CubeDef25 *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (CubeDef25 *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (CubeDef25 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Description) (CubeDef25 *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (CubeDef25 *This, Properties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Dimensions) (CubeDef25 *This, Dimensions **ppvObject);
    END_INTERFACE
  } CubeDef25Vtbl;

  interface CubeDef25 {
    CONST_VTBL struct CubeDef25Vtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define CubeDef25_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define CubeDef25_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define CubeDef25_Release(This) ((This)->lpVtbl ->Release (This))
#define CubeDef25_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define CubeDef25_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define CubeDef25_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define CubeDef25_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define CubeDef25_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define CubeDef25_get_Description(This, pbstr) ((This)->lpVtbl ->get_Description (This, pbstr))
#define CubeDef25_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define CubeDef25_get_Dimensions(This, ppvObject) ((This)->lpVtbl ->get_Dimensions (This, ppvObject))
#endif

#endif
#endif

#ifndef __CubeDef_INTERFACE_DEFINED__
#define __CubeDef_INTERFACE_DEFINED__

  EXTERN_C const IID IID_CubeDef;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("DA16A34A-7B7A-46fd-AD9D-66DF1E699FA1")
  CubeDef : public CubeDef25 {
    public:
    virtual HRESULT STDMETHODCALLTYPE GetSchemaObject (SchemaObjectTypeEnum eObjType, BSTR bsUniqueName, IDispatch **ppObj) = 0;
  };
#else
  typedef struct CubeDefVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (CubeDef *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (CubeDef *This);
    ULONG (STDMETHODCALLTYPE *Release) (CubeDef *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (CubeDef *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (CubeDef *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (CubeDef *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (CubeDef *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (CubeDef *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Description) (CubeDef *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (CubeDef *This, Properties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Dimensions) (CubeDef *This, Dimensions **ppvObject);
    HRESULT (STDMETHODCALLTYPE *GetSchemaObject) (CubeDef *This, SchemaObjectTypeEnum eObjType, BSTR bsUniqueName, IDispatch **ppObj);
    END_INTERFACE
  } CubeDefVtbl;

  interface CubeDef {
    CONST_VTBL struct CubeDefVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define CubeDef_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define CubeDef_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define CubeDef_Release(This) ((This)->lpVtbl ->Release (This))
#define CubeDef_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define CubeDef_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define CubeDef_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define CubeDef_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define CubeDef_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define CubeDef_get_Description(This, pbstr) ((This)->lpVtbl ->get_Description (This, pbstr))
#define CubeDef_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define CubeDef_get_Dimensions(This, ppvObject) ((This)->lpVtbl ->get_Dimensions (This, ppvObject))
#define CubeDef_GetSchemaObject(This, eObjType, bsUniqueName, ppObj) ((This)->lpVtbl ->GetSchemaObject (This, eObjType, bsUniqueName, ppObj))
#endif

#endif
#endif

#ifndef __Dimension_INTERFACE_DEFINED__
#define __Dimension_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Dimension;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("22813742-8BD3-11D0-B4EF-00A0C9138CA4")
  Dimension : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_UniqueName (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Description (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (Properties **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Hierarchies (Hierarchies **ppvObject) = 0;
  };
#else
  typedef struct DimensionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Dimension *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Dimension *This);
    ULONG (STDMETHODCALLTYPE *Release) (Dimension *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Dimension *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Dimension *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Dimension *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Dimension *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Dimension *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_UniqueName) (Dimension *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Description) (Dimension *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Dimension *This, Properties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Hierarchies) (Dimension *This, Hierarchies **ppvObject);
    END_INTERFACE
  } DimensionVtbl;

  interface Dimension {
    CONST_VTBL struct DimensionVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Dimension_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Dimension_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Dimension_Release(This) ((This)->lpVtbl ->Release (This))
#define Dimension_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Dimension_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Dimension_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Dimension_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Dimension_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Dimension_get_UniqueName(This, pbstr) ((This)->lpVtbl ->get_UniqueName (This, pbstr))
#define Dimension_get_Description(This, pbstr) ((This)->lpVtbl ->get_Description (This, pbstr))
#define Dimension_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Dimension_get_Hierarchies(This, ppvObject) ((This)->lpVtbl ->get_Hierarchies (This, ppvObject))
#endif

#endif
#endif

#ifndef __Hierarchy_INTERFACE_DEFINED__
#define __Hierarchy_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Hierarchy;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("22813746-8BD3-11D0-B4EF-00A0C9138CA4")
  Hierarchy : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Name (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_UniqueName (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Description (BSTR *pbstr) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Properties (Properties **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Levels (Levels **ppvObject) = 0;
  };
#else
  typedef struct HierarchyVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Hierarchy *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Hierarchy *This);
    ULONG (STDMETHODCALLTYPE *Release) (Hierarchy *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Hierarchy *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Hierarchy *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Hierarchy *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Hierarchy *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *get_Name) (Hierarchy *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_UniqueName) (Hierarchy *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Description) (Hierarchy *This, BSTR *pbstr);
    HRESULT (STDMETHODCALLTYPE *get_Properties) (Hierarchy *This, Properties **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Levels) (Hierarchy *This, Levels **ppvObject);
    END_INTERFACE
  } HierarchyVtbl;

  interface Hierarchy {
    CONST_VTBL struct HierarchyVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Hierarchy_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Hierarchy_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Hierarchy_Release(This) ((This)->lpVtbl ->Release (This))
#define Hierarchy_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Hierarchy_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Hierarchy_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Hierarchy_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Hierarchy_get_Name(This, pbstr) ((This)->lpVtbl ->get_Name (This, pbstr))
#define Hierarchy_get_UniqueName(This, pbstr) ((This)->lpVtbl ->get_UniqueName (This, pbstr))
#define Hierarchy_get_Description(This, pbstr) ((This)->lpVtbl ->get_Description (This, pbstr))
#define Hierarchy_get_Properties(This, ppvObject) ((This)->lpVtbl ->get_Properties (This, ppvObject))
#define Hierarchy_get_Levels(This, ppvObject) ((This)->lpVtbl ->get_Levels (This, ppvObject))
#endif

#endif
#endif

#ifndef __MD_Collection_INTERFACE_DEFINED__
#define __MD_Collection_INTERFACE_DEFINED__

  EXTERN_C const IID IID_MD_Collection;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("22813751-8BD3-11D0-B4EF-00A0C9138CA4")
  MD_Collection : public IDispatch {
    public:
    virtual HRESULT STDMETHODCALLTYPE Refresh (void) = 0;
    virtual HRESULT STDMETHODCALLTYPE _NewEnum (IUnknown **ppvObject) = 0;
    virtual HRESULT STDMETHODCALLTYPE get_Count (long *c) = 0;
  };
#else
  typedef struct MD_CollectionVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (MD_Collection *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (MD_Collection *This);
    ULONG (STDMETHODCALLTYPE *Release) (MD_Collection *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (MD_Collection *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (MD_Collection *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (MD_Collection *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (MD_Collection *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *Refresh) (MD_Collection *This);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (MD_Collection *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Count) (MD_Collection *This, long *c);
    END_INTERFACE
  } MD_CollectionVtbl;

  interface MD_Collection {
    CONST_VTBL struct MD_CollectionVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define MD_Collection_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define MD_Collection_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define MD_Collection_Release(This) ((This)->lpVtbl ->Release (This))
#define MD_Collection_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define MD_Collection_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define MD_Collection_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define MD_Collection_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define MD_Collection_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define MD_Collection__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define MD_Collection_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#endif

#endif
#endif

#ifndef __Members_INTERFACE_DEFINED__
#define __Members_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Members;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("22813757-8BD3-11D0-B4EF-00A0C9138CA4")
  Members : public MD_Collection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, Member **ppvObject) = 0;
  };
#else
  typedef struct MembersVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Members *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Members *This);
    ULONG (STDMETHODCALLTYPE *Release) (Members *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Members *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Members *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Members *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Members *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Members *This);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Members *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Members *This, long *c);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Members *This, VARIANT Index, Member **ppvObject);
    END_INTERFACE
  } MembersVtbl;

  interface Members {
    CONST_VTBL struct MembersVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Members_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Members_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Members_Release(This) ((This)->lpVtbl ->Release (This))
#define Members_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Members_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Members_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Members_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Members_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Members__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Members_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Members_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif

#endif
#endif

#ifndef __Levels_INTERFACE_DEFINED__
#define __Levels_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Levels;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("22813758-8BD3-11D0-B4EF-00A0C9138CA4")
  Levels : public MD_Collection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, Level **ppvObject) = 0;
  };
#else
  typedef struct LevelsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Levels *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Levels *This);
    ULONG (STDMETHODCALLTYPE *Release) (Levels *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Levels *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Levels *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Levels *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Levels *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Levels *This);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Levels *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Levels *This, long *c);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Levels *This, VARIANT Index, Level **ppvObject);
    END_INTERFACE
  } LevelsVtbl;

  interface Levels {
    CONST_VTBL struct LevelsVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Levels_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Levels_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Levels_Release(This) ((This)->lpVtbl ->Release (This))
#define Levels_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Levels_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Levels_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Levels_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Levels_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Levels__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Levels_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Levels_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif

#endif
#endif

#ifndef __Axes_INTERFACE_DEFINED__
#define __Axes_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Axes;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("22813759-8BD3-11D0-B4EF-00A0C9138CA4")
  Axes : public MD_Collection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, Axis **ppvObject) = 0;
  };
#else
  typedef struct AxesVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Axes *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Axes *This);
    ULONG (STDMETHODCALLTYPE *Release) (Axes *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Axes *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Axes *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Axes *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Axes *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Axes *This);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Axes *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Axes *This, long *c);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Axes *This, VARIANT Index, Axis **ppvObject);
    END_INTERFACE
  } AxesVtbl;

  interface Axes {
    CONST_VTBL struct AxesVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Axes_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Axes_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Axes_Release(This) ((This)->lpVtbl ->Release (This))
#define Axes_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Axes_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Axes_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Axes_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Axes_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Axes__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Axes_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Axes_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif

#endif
#endif

#ifndef __Positions_INTERFACE_DEFINED__
#define __Positions_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Positions;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("2281375A-8BD3-11D0-B4EF-00A0C9138CA4")
  Positions : public MD_Collection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, Position **ppvObject) = 0;
  };
#else
  typedef struct PositionsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Positions *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Positions *This);
    ULONG (STDMETHODCALLTYPE *Release) (Positions *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Positions *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Positions *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Positions *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Positions *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Positions *This);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Positions *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Positions *This, long *c);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Positions *This, VARIANT Index, Position **ppvObject);
    END_INTERFACE
  } PositionsVtbl;

  interface Positions {
    CONST_VTBL struct PositionsVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Positions_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Positions_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Positions_Release(This) ((This)->lpVtbl ->Release (This))
#define Positions_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Positions_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Positions_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Positions_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Positions_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Positions__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Positions_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Positions_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif

#endif
#endif

#ifndef __Hierarchies_INTERFACE_DEFINED__
#define __Hierarchies_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Hierarchies;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("2281375B-8BD3-11D0-B4EF-00A0C9138CA4")
  Hierarchies : public MD_Collection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, Hierarchy **ppvObject) = 0;
  };
#else
  typedef struct HierarchiesVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Hierarchies *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Hierarchies *This);
    ULONG (STDMETHODCALLTYPE *Release) (Hierarchies *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Hierarchies *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Hierarchies *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Hierarchies *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Hierarchies *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Hierarchies *This);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Hierarchies *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Hierarchies *This, long *c);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Hierarchies *This, VARIANT Index, Hierarchy **ppvObject);
    END_INTERFACE
  } HierarchiesVtbl;

  interface Hierarchies {
    CONST_VTBL struct HierarchiesVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Hierarchies_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Hierarchies_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Hierarchies_Release(This) ((This)->lpVtbl ->Release (This))
#define Hierarchies_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Hierarchies_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Hierarchies_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Hierarchies_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Hierarchies_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Hierarchies__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Hierarchies_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Hierarchies_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif

#endif
#endif

#ifndef __Dimensions_INTERFACE_DEFINED__
#define __Dimensions_INTERFACE_DEFINED__

  EXTERN_C const IID IID_Dimensions;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("2281375C-8BD3-11D0-B4EF-00A0C9138CA4")
  Dimensions : public MD_Collection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, Dimension **ppvObject) = 0;
  };
#else
  typedef struct DimensionsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (Dimensions *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (Dimensions *This);
    ULONG (STDMETHODCALLTYPE *Release) (Dimensions *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (Dimensions *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (Dimensions *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (Dimensions *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (Dimensions *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *Refresh) (Dimensions *This);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (Dimensions *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Count) (Dimensions *This, long *c);
    HRESULT (STDMETHODCALLTYPE *get_Item) (Dimensions *This, VARIANT Index, Dimension **ppvObject);
    END_INTERFACE
  } DimensionsVtbl;

  interface Dimensions {
    CONST_VTBL struct DimensionsVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define Dimensions_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define Dimensions_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define Dimensions_Release(This) ((This)->lpVtbl ->Release (This))
#define Dimensions_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define Dimensions_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define Dimensions_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define Dimensions_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define Dimensions_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define Dimensions__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define Dimensions_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define Dimensions_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif

#endif
#endif

#ifndef __CubeDefs_INTERFACE_DEFINED__
#define __CubeDefs_INTERFACE_DEFINED__

  EXTERN_C const IID IID_CubeDefs;

#if defined (__cplusplus) && !defined (CINTERFACE)
  MIDL_INTERFACE ("2281375D-8BD3-11D0-B4EF-00A0C9138CA4")
  CubeDefs : public MD_Collection {
    public:
    virtual HRESULT STDMETHODCALLTYPE get_Item (VARIANT Index, CubeDef **ppvObject) = 0;
  };
#else
  typedef struct CubeDefsVtbl {
    BEGIN_INTERFACE HRESULT (STDMETHODCALLTYPE *QueryInterface) (CubeDefs *This, REFIID riid, _COM_Outptr_ void **ppvObject);
    ULONG (STDMETHODCALLTYPE *AddRef) (CubeDefs *This);
    ULONG (STDMETHODCALLTYPE *Release) (CubeDefs *This);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfoCount) (CubeDefs *This, UINT *pctinfo);
    HRESULT (STDMETHODCALLTYPE *GetTypeInfo) (CubeDefs *This, UINT iTInfo, LCID lcid, ITypeInfo **ppTInfo);
    HRESULT (STDMETHODCALLTYPE *GetIDsOfNames) (CubeDefs *This, REFIID riid, LPOLESTR *rgszNames, UINT cNames, LCID lcid, DISPID *rgDispId);
    HRESULT (STDMETHODCALLTYPE *Invoke) (CubeDefs *This, DISPID dispIdMember, REFIID riid, LCID lcid, WORD wFlags, DISPPARAMS *pDispParams, VARIANT *pVarResult, EXCEPINFO *pExcepInfo, UINT *puArgErr);
    HRESULT (STDMETHODCALLTYPE *Refresh) (CubeDefs *This);
    HRESULT (STDMETHODCALLTYPE *_NewEnum) (CubeDefs *This, IUnknown **ppvObject);
    HRESULT (STDMETHODCALLTYPE *get_Count) (CubeDefs *This, long *c);
    HRESULT (STDMETHODCALLTYPE *get_Item) (CubeDefs *This, VARIANT Index, CubeDef **ppvObject);
    END_INTERFACE
  } CubeDefsVtbl;

  interface CubeDefs {
    CONST_VTBL struct CubeDefsVtbl *lpVtbl;
  };

#ifdef COBJMACROS
#define CubeDefs_QueryInterface(This, riid, ppvObject) ((This)->lpVtbl ->QueryInterface (This, riid, ppvObject))
#define CubeDefs_AddRef(This) ((This)->lpVtbl ->AddRef (This))
#define CubeDefs_Release(This) ((This)->lpVtbl ->Release (This))
#define CubeDefs_GetTypeInfoCount(This, pctinfo) ((This)->lpVtbl ->GetTypeInfoCount (This, pctinfo))
#define CubeDefs_GetTypeInfo(This, iTInfo, lcid, ppTInfo) ((This)->lpVtbl ->GetTypeInfo (This, iTInfo, lcid, ppTInfo))
#define CubeDefs_GetIDsOfNames(This, riid, rgszNames, cNames, lcid, rgDispId) ((This)->lpVtbl ->GetIDsOfNames (This, riid, rgszNames, cNames, lcid, rgDispId))
#define CubeDefs_Invoke(This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr) ((This)->lpVtbl ->Invoke (This, dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr))
#define CubeDefs_Refresh(This) ((This)->lpVtbl ->Refresh (This))
#define CubeDefs__NewEnum(This, ppvObject) ((This)->lpVtbl ->_NewEnum (This, ppvObject))
#define CubeDefs_get_Count(This, c) ((This)->lpVtbl ->get_Count (This, c))
#define CubeDefs_get_Item(This, Index, ppvObject) ((This)->lpVtbl ->get_Item (This, Index, ppvObject))
#endif

#endif
#endif

  EXTERN_C const CLSID CLSID_Catalog;

#ifdef __cplusplus
  class DECLSPEC_UUID ("228136B0-8BD3-11D0-B4EF-00A0C9138CA4")
  Catalog;
#endif

  EXTERN_C const CLSID CLSID_Cellset;
#ifdef __cplusplus
  class DECLSPEC_UUID ("228136B8-8BD3-11D0-B4EF-00A0C9138CA4")
  Cellset;
#endif
#endif

#ifdef __cplusplus
}
#endif

#endif
                                                                                                                                                                                                usr/share/mingw-w64/include/adptif.h                                                                0100644 0000000 0000000 00000001624 12404413022 015755  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _IPX_ADAPTER_
#define _IPX_ADAPTER_

typedef struct _ADDRESS_RESERVED {
  UCHAR Reserved[28];
} ADDRESS_RESERVED,*PADDRESS_RESERVED;

HANDLE WINAPI CreateSocketPort(USHORT Socket);
DWORD WINAPI DeleteSocketPort(HANDLE Handle);
DWORD WINAPI IpxRecvPacket(HANDLE Handle,PUCHAR IpxPacket,ULONG IpxPacketLength,PADDRESS_RESERVED lpReserved,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine);
DWORD WINAPI IpxSendPacket(HANDLE Handle,ULONG AdapterIdx,PUCHAR IpxPacket,ULONG IpxPacketLength,PADDRESS_RESERVED lpReserved,LPOVERLAPPED lpOverlapped,LPOVERLAPPED_COMPLETION_ROUTINE CompletionRoutine);

#define GetNicIdx(pReserved) ((ULONG)*((USHORT *)(pReserved+2)))

#endif
                                                                                                            usr/share/mingw-w64/include/adsdb.h                                                                 0100644 0000000 0000000 00000000524 12404413022 015561  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#include <winapifamily.h>

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)

#ifdef __cplusplus
extern "C" {
#endif

#define DBPROPFLAGS_ADSISEARCH 0x0000c000

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                            usr/share/mingw-w64/include/adserr.h                                                                0100644 0000000 0000000 00000003505 12404413022 015766  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#include <winapifamily.h>

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)

#ifdef RC_INVOKED
#define _HRESULT_TYPEDEF_(_sc) _sc
#else
#define _HRESULT_TYPEDEF_(_sc) ((HRESULT)_sc)
#endif

#define FACILITY_NULL 0
#define FACILITY_RPC 1
#define FACILITY_DISPATCH 2
#define FACILITY_STORAGE 3
#define FACILITY_ITF 4
#define FACILITY_WIN32 7
#define FACILITY_WINDOWS 8
#define FACILITY_SSPI 9
#define FACILITY_CONTROL 10

#define E_ADS_BAD_PATHNAME _HRESULT_TYPEDEF_(0x80005000)
#define E_ADS_INVALID_DOMAIN_OBJECT _HRESULT_TYPEDEF_(0x80005001)
#define E_ADS_INVALID_USER_OBJECT _HRESULT_TYPEDEF_(0x80005002)
#define E_ADS_INVALID_COMPUTER_OBJECT _HRESULT_TYPEDEF_(0x80005003)
#define E_ADS_UNKNOWN_OBJECT _HRESULT_TYPEDEF_(0x80005004)
#define E_ADS_PROPERTY_NOT_SET _HRESULT_TYPEDEF_(0x80005005)
#define E_ADS_PROPERTY_NOT_SUPPORTED _HRESULT_TYPEDEF_(0x80005006)
#define E_ADS_PROPERTY_INVALID _HRESULT_TYPEDEF_(0x80005007)
#define E_ADS_BAD_PARAMETER _HRESULT_TYPEDEF_(0x80005008)
#define E_ADS_OBJECT_UNBOUND _HRESULT_TYPEDEF_(0x80005009)
#define E_ADS_PROPERTY_NOT_MODIFIED _HRESULT_TYPEDEF_(0x8000500a)
#define E_ADS_PROPERTY_MODIFIED _HRESULT_TYPEDEF_(0x8000500b)
#define E_ADS_CANT_CONVERT_DATATYPE _HRESULT_TYPEDEF_(0x8000500c)
#define E_ADS_PROPERTY_NOT_FOUND _HRESULT_TYPEDEF_(0x8000500d)
#define E_ADS_OBJECT_EXISTS _HRESULT_TYPEDEF_(0x8000500e)
#define E_ADS_SCHEMA_VIOLATION _HRESULT_TYPEDEF_(0x8000500f)
#define E_ADS_COLUMN_NOT_SET _HRESULT_TYPEDEF_(0x80005010)
#define S_ADS_ERRORSOCCURRED _HRESULT_TYPEDEF_(0x00005011)
#define S_ADS_NOMORE_ROWS _HRESULT_TYPEDEF_(0x00005012)
#define S_ADS_NOMORE_COLUMNS _HRESULT_TYPEDEF_(0x00005013)
#define E_ADS_INVALID_FILTER _HRESULT_TYPEDEF_(0x80005014)

#endif
                                                                                                                                                                                           usr/share/mingw-w64/include/adshlp.h                                                                0100644 0000000 0000000 00000005010 12404413022 015752  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */
#include <winapifamily.h>

#ifndef _ADSHLP_
#define _ADSHLP_

#ifdef __cplusplus
extern "C" {
#endif

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)
  HRESULT WINAPI ADsGetObject (LPCWSTR lpszPathName, REFIID riid, VOID **ppObject);
  HRESULT WINAPI ADsBuildEnumerator (IADsContainer *pADsContainer, IEnumVARIANT **ppEnumVariant);
  HRESULT WINAPI ADsFreeEnumerator (IEnumVARIANT *pEnumVariant);
  HRESULT WINAPI ADsEnumerateNext (IEnumVARIANT *pEnumVariant, ULONG cElements, VARIANT *pvar, ULONG *pcElementsFetched);
  HRESULT WINAPI ADsBuildVarArrayStr (LPWSTR *lppPathNames, DWORD dwPathNames, VARIANT *pVar);
  HRESULT WINAPI ADsBuildVarArrayInt (LPDWORD lpdwObjectTypes, DWORD dwObjectTypes, VARIANT *pVar);
  HRESULT WINAPI ADsOpenObject (LPCWSTR lpszPathName, LPCWSTR lpszUserName, LPCWSTR lpszPassword, DWORD dwReserved, REFIID riid, void **ppObject);
  HRESULT WINAPI ADsGetLastError (LPDWORD lpError, LPWSTR lpErrorBuf, DWORD dwErrorBufLen, LPWSTR lpNameBuf, DWORD dwNameBufLen);
  VOID WINAPI ADsSetLastError (DWORD dwErr, LPCWSTR pszError, LPCWSTR pszProvider);
  VOID WINAPI ADsFreeAllErrorRecords (VOID);
  LPVOID WINAPI AllocADsMem (DWORD cb);
  WINBOOL WINAPI FreeADsMem (LPVOID pMem);
  LPVOID WINAPI ReallocADsMem (LPVOID pOldMem, DWORD cbOld, DWORD cbNew);
  LPWSTR WINAPI AllocADsStr (LPCWSTR pStr);
  WINBOOL WINAPI FreeADsStr (LPWSTR pStr);
  WINBOOL WINAPI ReallocADsStr (LPWSTR *ppStr, LPWSTR pStr);
  HRESULT WINAPI ADsEncodeBinaryData (PBYTE pbSrcData, DWORD dwSrcLen, LPWSTR *ppszDestData);
  HRESULT WINAPI ADsDecodeBinaryData (LPCWSTR szSrcData, PBYTE *ppbDestData, ULONG *pdwDestLen);
  HRESULT WINAPI PropVariantToAdsType (VARIANT *pVariant, DWORD dwNumVariant, PADSVALUE *ppAdsValues, PDWORD pdwNumValues);
  HRESULT WINAPI AdsTypeToPropVariant (PADSVALUE pAdsValues, DWORD dwNumValues, VARIANT *pVariant);
  void WINAPI AdsFreeAdsValues (PADSVALUE pAdsValues, DWORD dwNumValues);
  HRESULT WINAPI BinarySDToSecurityDescriptor (PSECURITY_DESCRIPTOR pSecurityDescriptor, VARIANT *pVarsec, LPCWSTR pszServerName, LPCWSTR userName, LPCWSTR passWord, DWORD dwFlags);
  HRESULT WINAPI SecurityDescriptorToBinarySD (VARIANT vVarSecDes, PSECURITY_DESCRIPTOR *ppSecurityDescriptor, PDWORD pdwSDLength, LPCWSTR pszServerName, LPCWSTR userName, LPCWSTR passWord, DWORD dwFlags);

#define InitADsMem()
#define AssertADsMemLeaks()
#define DumpMemoryTracker()
#endif

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        usr/share/mingw-w64/include/adsiid.h                                                                0100644 0000000 0000000 00000004234 12404413022 015743  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */
#ifndef __ADSIID_H__
#define __ADSIID_H__

#include <winapifamily.h>

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)
#ifdef __cplusplus
extern "C" {
#endif

  extern const GUID LIBID_ADs;
  extern const GUID IID_IADs;
  extern const GUID IID_IADsContainer;
  extern const GUID IID_IADsNamespaces;
  extern const GUID IID_IADsDomain;
  extern const GUID IID_IADsUser;
  extern const GUID IID_IADsComputerOperations;
  extern const GUID IID_IADsComputer;
  extern const GUID IID_IADsGroup;
  extern const GUID IID_IADsMembers;
  extern const GUID IID_IADsPrintQueue;
  extern const GUID IID_IADsPrintQueueOperations;
  extern const GUID IID_IADsPrintJobOperations;
  extern const GUID IID_IADsPrintJob;
  extern const GUID IID_IADsCollection;
  extern const GUID IID_IADsServiceOperations;
  extern const GUID IID_IADsService;
  extern const GUID IID_IADsFileServiceOperations;
  extern const GUID IID_IADsFileService;
  extern const GUID IID_IADsResource;
  extern const GUID IID_IADsSession;
  extern const GUID IID_IADsFileShare;
  extern const GUID IID_IADsSchema;
  extern const GUID IID_IADsClass;
  extern const GUID IID_IADsProperty;
  extern const GUID IID_IADsSyntax;
  extern const GUID IID_IADsLocality;
  extern const GUID IID_IADsO;
  extern const GUID IID_IADsOU;
  extern const GUID IID_IADsOpenDSObject;
  extern const GUID IID_IADsSearch;
  extern const GUID IID_IADsPropertyList;
  extern const GUID IID_IDSObject;
  extern const GUID IID_IDSSearch;
  extern const GUID IID_IDSAttrMgmt;
  extern const GUID IID_IDirectorySearch;
  extern const GUID IID_IDirectoryObject;
  extern const GUID IID_IDirectoryAttrMgmt;
  extern const GUID CLSID_LDAPConnectionObject;
  extern const GUID CLSID_LDAPObject;
  extern const GUID CLSID_UmiLDAPQueryObject;
  extern const GUID CLSID_WinNTConnectionObject;
  extern const GUID CLSID_WinNTObject;
  extern const GUID CLSID_ADsDSOObject;
  extern const GUID DBGUID_LDAPDialect;
  extern const GUID DBPROPSET_ADSISEARCH;
  extern const GUID DBPROPSET_ADSIBIND;

#ifdef __cplusplus
}
#endif
#endif

#endif
                                                                                                                                                                                                                                                                                                                                                                    usr/share/mingw-w64/include/adsnms.h                                                                0100644 0000000 0000000 00000004265 12404413022 015777  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */
#include <winapifamily.h>

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)
#ifdef __cplusplus
extern "C" {
#endif

#define NAMESPACE_CLASS_NAME TEXT ("Namespace")
#define COUNTRY_CLASS_NAME TEXT ("Country")
#define LOCALITY_CLASS_NAME TEXT ("Locality")
#define ORGANIZATION_CLASS_NAME TEXT ("Organization")
#define ORGANIZATIONUNIT_CLASS_NAME TEXT ("Organizational Unit")
#define DOMAIN_CLASS_NAME TEXT ("Domain")
#define COMPUTER_CLASS_NAME TEXT ("Computer")
#define USER_CLASS_NAME TEXT ("User")
#define GROUP_CLASS_NAME TEXT ("Group")
#define GLOBALGROUP_CLASS_NAME TEXT ("GlobalGroup")
#define LOCALGROUP_CLASS_NAME TEXT ("LocalGroup")
#define SERVICE_CLASS_NAME TEXT ("Service")
#define FILESERVICE_CLASS_NAME TEXT ("FileService")
#define SESSION_CLASS_NAME TEXT ("Session")
#define RESOURCE_CLASS_NAME TEXT ("Resource")
#define FILESHARE_CLASS_NAME TEXT ("FileShare")
#define PRINTER_CLASS_NAME TEXT ("PrintQueue")
#define PRINTJOB_CLASS_NAME TEXT ("PrintJob")
#define SCHEMA_CLASS_NAME TEXT ("Schema")
#define CLASS_CLASS_NAME TEXT ("Class")
#define PROPERTY_CLASS_NAME TEXT ("Property")
#define SYNTAX_CLASS_NAME TEXT ("Syntax")
#define ROOTDSE_CLASS_NAME TEXT ("RootDSE")

#define NO_SCHEMA TEXT ("")
#define DOMAIN_SCHEMA_NAME TEXT ("Domain")
#define COMPUTER_SCHEMA_NAME TEXT ("Computer")
#define USER_SCHEMA_NAME TEXT ("User")
#define GROUP_SCHEMA_NAME TEXT ("Group")
#define GLOBALGROUP_SCHEMA_NAME TEXT ("GlobalGroup")
#define LOCALGROUP_SCHEMA_NAME TEXT ("LocalGroup")
#define SERVICE_SCHEMA_NAME TEXT ("Service")
#define PRINTER_SCHEMA_NAME TEXT ("PrintQueue")
#define PRINTJOB_SCHEMA_NAME TEXT ("PrintJob")
#define FILESERVICE_SCHEMA_NAME TEXT ("FileService")
#define SESSION_SCHEMA_NAME TEXT ("Session")
#define RESOURCE_SCHEMA_NAME TEXT ("Resource")
#define FILESHARE_SCHEMA_NAME TEXT ("FileShare")
#define FPNW_FILESERVICE_SCHEMA_NAME TEXT ("FPNWFileService")
#define FPNW_SESSION_SCHEMA_NAME TEXT ("FPNWSession")
#define FPNW_RESOURCE_SCHEMA_NAME TEXT ("FPNWResource")
#define FPNW_FILESHARE_SCHEMA_NAME TEXT ("FPNWFileShare")

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                           usr/share/mingw-w64/include/adsprop.h                                                               0100644 0000000 0000000 00000003336 12404413022 016160  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _ADSPROP_H_
#define _ADSPROP_H_

#include <iads.h>

#ifdef __cplusplus
extern "C" {
#endif

#define WM_ADSPROP_NOTIFY_PAGEINIT (WM_USER + 1101)
#define WM_ADSPROP_NOTIFY_PAGEHWND (WM_USER + 1102)
#define WM_ADSPROP_NOTIFY_CHANGE (WM_USER + 1103)
#define WM_ADSPROP_NOTIFY_APPLY (WM_USER + 1104)
#define WM_ADSPROP_NOTIFY_SETFOCUS (WM_USER + 1105)
#define WM_ADSPROP_NOTIFY_FOREGROUND (WM_USER + 1106)
#define WM_ADSPROP_NOTIFY_EXIT (WM_USER + 1107)
#define WM_ADSPROP_NOTIFY_ERROR (WM_USER + 1110)

  typedef struct _ADSPROPINITPARAMS {
    DWORD dwSize;
    DWORD dwFlags;
    HRESULT hr;
    IDirectoryObject *pDsObj;
    LPWSTR pwzCN;
    PADS_ATTR_INFO pWritableAttrs;
  } ADSPROPINITPARAMS,*PADSPROPINITPARAMS;

  typedef struct _ADSPROPERROR {
    HWND hwndPage;
    PWSTR pszPageTitle;
    PWSTR pszObjPath;
    PWSTR pszObjClass;
    HRESULT hr;
    PWSTR pszError;
  } ADSPROPERROR,*PADSPROPERROR;

  STDAPI ADsPropCreateNotifyObj(LPDATAOBJECT pAppThdDataObj,PWSTR pwzADsObjName,HWND *phNotifyObj);
  STDAPI_(WINBOOL) ADsPropGetInitInfo(HWND hNotifyObj,PADSPROPINITPARAMS pInitParams);
  STDAPI_(WINBOOL) ADsPropSetHwndWithTitle(HWND hNotifyObj,HWND hPage,PTSTR ptzTitle);
  STDAPI_(WINBOOL) ADsPropSetHwnd(HWND hNotifyObj,HWND hPage);
  STDAPI_(WINBOOL) ADsPropCheckIfWritable(const PWSTR pwzAttr,const PADS_ATTR_INFO pWritableAttrs);
  STDAPI_(WINBOOL) ADsPropSendErrorMessage(HWND hNotifyObj,PADSPROPERROR pError);
  STDAPI_(WINBOOL) ADsPropShowErrorDialog(HWND hNotifyObj,HWND hPage);

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                  usr/share/mingw-w64/include/adssts.h                                                                0100644 0000000 0000000 00000005015 12404413022 016005  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifdef __cplusplus
extern "C" {
#endif

#define ADS_PRINTER_PAUSED 0x00000001
#define ADS_PRINTER_PENDING_DELETION 0x00000002
#define ADS_PRINTER_ERROR 0x00000003
#define ADS_PRINTER_PAPER_JAM 0x00000004
#define ADS_PRINTER_PAPER_OUT 0x00000005
#define ADS_PRINTER_MANUAL_FEED 0x00000006
#define ADS_PRINTER_PAPER_PROBLEM 0x00000007
#define ADS_PRINTER_OFFLINE 0x00000008
#define ADS_PRINTER_IO_ACTIVE 0x00000100
#define ADS_PRINTER_BUSY 0x00000200
#define ADS_PRINTER_PRINTING 0x00000400
#define ADS_PRINTER_OUTPUT_BIN_FULL 0x00000800
#define ADS_PRINTER_NOT_AVAILABLE 0x00001000
#define ADS_PRINTER_WAITING 0x00002000
#define ADS_PRINTER_PROCESSING 0x00004000
#define ADS_PRINTER_INITIALIZING 0x00008000
#define ADS_PRINTER_WARMING_UP 0x00010000
#define ADS_PRINTER_TONER_LOW 0x00020000
#define ADS_PRINTER_NO_TONER 0x00040000
#define ADS_PRINTER_PAGE_PUNT 0x00080000
#define ADS_PRINTER_USER_INTERVENTION 0x00100000
#define ADS_PRINTER_OUT_OF_MEMORY 0x00200000
#define ADS_PRINTER_DOOR_OPEN 0x00400000
#define ADS_PRINTER_SERVER_UNKNOWN 0x00800000
#define ADS_PRINTER_POWER_SAVE 0x01000000

#define ADS_JOB_PAUSED 0x00000001
#define ADS_JOB_ERROR 0x00000002
#define ADS_JOB_DELETING 0x00000004
#define ADS_JOB_SPOOLING 0x00000008
#define ADS_JOB_PRINTING 0x00000010
#define ADS_JOB_OFFLINE 0x00000020
#define ADS_JOB_PAPEROUT 0x00000040
#define ADS_JOB_PRINTED 0x00000080
#define ADS_JOB_DELETED 0x00000100

#define ADS_SERVICE_STOPPED 0x00000001
#define ADS_SERVICE_START_PENDING 0x00000002
#define ADS_SERVICE_STOP_PENDING 0x00000003
#define ADS_SERVICE_RUNNING 0x00000004
#define ADS_SERVICE_CONTINUE_PENDING 0x00000005
#define ADS_SERVICE_PAUSE_PENDING 0x00000006
#define ADS_SERVICE_PAUSED 0x00000007
#define ADS_SERVICE_ERROR 0x00000008

#define ADS_SERVICE_OWN_PROCESS 0x00000010
#define ADS_SERVICE_SHARE_PROCESS 0x00000020
#define ADS_SERVICE_KERNEL_DRIVER 0x00000001
#define ADS_SERVICE_FILE_SYSTEM_DRIVER 0x00000002

#define ADS_SERVICE_BOOT_START SERVICE_BOOT_START
#define ADS_SERVICE_SYSTEM_START SERVICE_SYSTEM_START
#define ADS_SERVICE_AUTO_START SERVICE_AUTO_START
#define ADS_SERVICE_DEMAND_START SERVICE_DEMAND_START
#define ADS_SERVICE_DISABLED SERVICE_DISABLED

#define ADS_SERVICE_ERROR_IGNORE 0
#define ADS_SERVICE_ERROR_NORMAL 1
#define ADS_SERVICE_ERROR_SEVERE 2
#define ADS_SERVICE_ERROR_CRITICAL 3

#ifdef __cplusplus
}
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   usr/share/mingw-w64/include/adtgen.h                                                                0100644 0000000 0000000 00000007677 12404413022 015766  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER within this package.
 */

#include <winapifamily.h>

#ifndef _ADTGEN_H
#define _ADTGEN_H

#if WINAPI_FAMILY_PARTITION (WINAPI_PARTITION_DESKTOP)

#define AUDIT_TYPE_LEGACY 1
#define AUDIT_TYPE_WMI 2

typedef enum _AUDIT_PARAM_TYPE {
  APT_None = 1,
  APT_String,
  APT_Ulong,
  APT_Pointer,
  APT_Sid,
  APT_LogonId,
  APT_ObjectTypeList,
  APT_Luid,
  APT_Guid,
  APT_Time,
  APT_Int64,
  APT_IpAddress,
  APT_LogonIdWithSid
} AUDIT_PARAM_TYPE;

#define AP_ParamTypeBits 8
#define AP_ParamTypeMask __MSABI_LONG(0xff)

#define AP_FormatHex (__MSABI_LONG(0x1) << AP_ParamTypeBits)
#define AP_AccessMask (__MSABI_LONG(0x2) << AP_ParamTypeBits)
#define AP_Filespec (__MSABI_LONG(0x1) << AP_ParamTypeBits)
#define AP_SidAsLogonId (__MSABI_LONG(0x1) << AP_ParamTypeBits)
#define AP_PrimaryLogonId (__MSABI_LONG(0x1) << AP_ParamTypeBits)
#define AP_ClientLogonId (__MSABI_LONG(0x2) << AP_ParamTypeBits)
#define ApExtractType(TypeFlags) ((AUDIT_PARAM_TYPE) (TypeFlags & AP_ParamTypeMask))
#define ApExtractFlags(TypeFlags) ((TypeFlags & ~AP_ParamTypeMask))

#define _AUTHZ_SS_MAXSIZE 128

#define APF_AuditFailure 0x0
#define APF_AuditSuccess 0x1

#define APF_ValidFlags (APF_AuditSuccess)

#define AUTHZ_ALLOW_MULTIPLE_SOURCE_INSTANCES 0x1
#define AUTHZ_MIGRATED_LEGACY_PUBLISHER 0x2

#define AUTHZ_AUDIT_INSTANCE_INFORMATION 0x2

typedef struct _AUDIT_OBJECT_TYPE {
  GUID ObjectType;
  USHORT Flags;
  USHORT Level;
  ACCESS_MASK AccessMask;
} AUDIT_OBJECT_TYPE,*PAUDIT_OBJECT_TYPE;

typedef struct _AUDIT_OBJECT_TYPES {
  USHORT Count;
  USHORT Flags;
#ifdef __WIDL__
  [size_is (Count)]
#endif
  AUDIT_OBJECT_TYPE *pObjectTypes;
} AUDIT_OBJECT_TYPES,*PAUDIT_OBJECT_TYPES;

typedef struct _AUDIT_IP_ADDRESS {
  BYTE pIpAddress[_AUTHZ_SS_MAXSIZE];
} AUDIT_IP_ADDRESS,*PAUDIT_IP_ADDRESS;

typedef struct _AUDIT_PARAM {
  AUDIT_PARAM_TYPE Type;
  ULONG Length;
  DWORD Flags;
#ifdef __WIDL__
  [switch_type (AUDIT_PARAM_TYPE), switch_is (Type)]
#else
  __C89_NAMELESS
#endif
  union {
#ifdef __WIDL__
    [default]
#endif
    ULONG_PTR Data0;
#ifdef __WIDL__
    [case (APT_String)]
    [string]
#endif
    PWSTR String;
#ifdef __WIDL__
    [case (APT_Ulong, APT_Pointer)]
#endif
    ULONG_PTR u;
#ifdef __WIDL__
    [case (APT_Sid)]
#endif
    SID *psid;
#ifdef __WIDL__
    [case (APT_Guid)]
#endif
    GUID *pguid;
#ifdef __WIDL__
    [case (APT_LogonId)]
#endif
    ULONG LogonId_LowPart;
#ifdef __WIDL__
    [case (APT_ObjectTypeList)]
#endif
    AUDIT_OBJECT_TYPES *pObjectTypes;
#ifdef __WIDL__
    [case (APT_IpAddress)]
#endif
    AUDIT_IP_ADDRESS *pIpAddress;
  };
#ifdef __WIDL__
  [switch_type (AUDIT_PARAM_TYPE), switch_is (Type)]
#else
  __C89_NAMELESS
#endif
  union {
#ifdef __WIDL__
    [default]
#endif
    ULONG_PTR Data1;
#ifdef __WIDL__
    [case (APT_LogonId)]
#endif
    LONG LogonId_HighPart;
  };
} AUDIT_PARAM,*PAUDIT_PARAM;

typedef struct _AUDIT_PARAMS {
  ULONG Length;
  DWORD Flags;
  USHORT Count;
#ifdef __WIDL__
  [size_is (Count)]
#endif
  AUDIT_PARAM *Parameters;
} AUDIT_PARAMS,*PAUDIT_PARAMS;
typedef struct _AUTHZ_AUDIT_EVENT_TYPE_LEGACY {
  USHORT CategoryId;
  USHORT AuditId;
  USHORT ParameterCount;
} AUTHZ_AUDIT_EVENT_TYPE_LEGACY,*PAUTHZ_AUDIT_EVENT_TYPE_LEGACY;

typedef
#ifdef __WIDL__
[switch_type (BYTE)]
#endif
union _AUTHZ_AUDIT_EVENT_TYPE_UNION {
#ifdef __WIDL__
  [case (AUDIT_TYPE_LEGACY)]
#endif
  AUTHZ_AUDIT_EVENT_TYPE_LEGACY Legacy;
} AUTHZ_AUDIT_EVENT_TYPE_UNION,*PAUTHZ_AUDIT_EVENT_TYPE_UNION;

typedef
struct _AUTHZ_AUDIT_EVENT_TYPE_OLD {
  ULONG Version;
  DWORD dwFlags;
  LONG RefCount;
  ULONG_PTR hAudit;
  LUID LinkId;
#ifdef __WIDL__
  [switch_is (Version)]
#endif
  AUTHZ_AUDIT_EVENT_TYPE_UNION u;
} AUTHZ_AUDIT_EVENT_TYPE_OLD;

typedef
#ifdef __WIDL__
[handle]
#endif
AUTHZ_AUDIT_EVENT_TYPE_OLD *PAUTHZ_AUDIT_EVENT_TYPE_OLD;
#define AUTHZP_WPD_EVENT 0x10

typedef
#ifdef __WIDL__
[context_handle]
#endif
PVOID AUDIT_HANDLE,*PAUDIT_HANDLE;

#endif
#endif
                                                                 usr/share/mingw-w64/include/advpub.h                                                                0100644 0000000 0000000 00000023120 12404413022 015762  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _ADVPUB_H_
#define _ADVPUB_H_

#ifdef __cplusplus
extern "C" {
#endif

#ifndef S_ASYNCHRONOUS
#define S_ASYNCHRONOUS _HRESULT_TYPEDEF_(0x401e8)
#endif

#define achRUNSETUPCOMMANDFUNCTION "RunSetupCommand"

  HRESULT WINAPI RunSetupCommand(HWND hWnd,LPCSTR szCmdName,LPCSTR szInfSection,LPCSTR szDir,LPCSTR lpszTitle,HANDLE *phEXE,DWORD dwFlags,LPVOID pvReserved);

  typedef HRESULT (WINAPI *RUNSETUPCOMMAND)(HWND hWnd,LPCSTR szCmdName,LPCSTR szInfSection,LPCSTR szDir,LPCSTR szTitle,HANDLE *phEXE,DWORD dwFlags,LPVOID pvReserved);

#define RSC_FLAG_INF 1
#define RSC_FLAG_SKIPDISKSPACECHECK 2
#define RSC_FLAG_QUIET 4
#define RSC_FLAG_NGCONV 8
#define RSC_FLAG_UPDHLPDLLS 16
#define RSC_FLAG_DELAYREGISTEROCX 512
#define RSC_FLAG_SETUPAPI 1024

#define achNEEDREBOOTINITFUNCTION "NeedRebootInit"

  DWORD WINAPI NeedRebootInit(VOID);

  typedef DWORD (WINAPI *NEEDREBOOTINIT)(VOID);

#define achNEEDREBOOTFUNCTION "NeedReboot"

  WINBOOL WINAPI NeedReboot(DWORD dwRebootCheck);

  typedef WINBOOL (WINAPI *NEEDREBOOT)(DWORD dwRebootCheck);

#define achPRECHECKREBOOT "RebootCheckOnInstall"

  HRESULT WINAPI RebootCheckOnInstall(HWND hwnd,PCSTR pszINF,PCSTR pszSec,DWORD dwReserved);

  typedef HRESULT (WINAPI *REBOOTCHECKONINSTALL)(HWND,PCSTR,PCSTR,DWORD);

#define c_szTRANSLATEINFSTRING "TranslateInfString"

  HRESULT WINAPI TranslateInfString(PCSTR pszInfFilename,PCSTR pszInstallSection,PCSTR pszTranslateSection,PCSTR pszTranslateKey,PSTR pszBuffer,DWORD dwBufferSize,PDWORD pdwRequiredSize,PVOID pvReserved);

  typedef HRESULT (WINAPI *TRANSLATEINFSTRING)(PCSTR pszInfFilename,PCSTR pszInstallSection,PCSTR pszTranslateSection,PCSTR pszTranslateKey,PSTR pszBuffer,DWORD dwBufferSize,PDWORD pdwRequiredSize,PVOID pvReserved);

#define achREGINSTALL "RegInstall"

  typedef struct _StrEntry {
    LPSTR pszName;
    LPSTR pszValue;
  } STRENTRY,*LPSTRENTRY;

  typedef const STRENTRY CSTRENTRY;
  typedef CSTRENTRY *LPCSTRENTRY;

  typedef struct _StrTable {
    DWORD cEntries;
    LPSTRENTRY pse;
  } STRTABLE,*LPSTRTABLE;

  typedef const STRTABLE CSTRTABLE;
  typedef CSTRTABLE *LPCSTRTABLE;

  HRESULT WINAPI RegInstall(HMODULE hm,LPCSTR pszSection,LPCSTRTABLE pstTable);

  typedef HRESULT (WINAPI *REGINSTALL)(HMODULE hm,LPCSTR pszSection,LPCSTRTABLE pstTable);

#define achLAUNCHINFSECTIONEX "LaunchINFSectionEx"

  HRESULT WINAPI LaunchINFSectionEx(HWND hwnd,HINSTANCE hInstance,PSTR pszParms,INT nShow);

  typedef HRESULT (WINAPI *LAUNCHINFSECTIONEX)(HWND hwnd,HINSTANCE hInst,PSTR pszParams,INT nShow);

#define ALINF_QUIET 4
#define ALINF_NGCONV 8
#define ALINF_UPDHLPDLLS 16
#define ALINF_BKINSTALL 32
#define ALINF_ROLLBACK 64
#define ALINF_CHECKBKDATA 128
#define ALINF_ROLLBKDOALL 256
#define ALINF_DELAYREGISTEROCX 512

#define achEXECUTECAB "ExecuteCab"

  typedef struct _CabInfo {
    PSTR pszCab;
    PSTR pszInf;
    PSTR pszSection;
    char szSrcPath[MAX_PATH];
    DWORD dwFlags;
  } CABINFO,*PCABINFO;

  HRESULT WINAPI ExecuteCab(HWND hwnd,PCABINFO pCab,LPVOID pReserved);

  typedef HRESULT (WINAPI *EXECUTECAB)(HWND hwnd,PCABINFO pCab,LPVOID pReserved);

#define AIF_WARNIFSKIP 0x00000001
#define AIF_NOSKIP 0x00000002
#define AIF_NOVERSIONCHECK 0x00000004
#define AIF_FORCE_FILE_IN_USE 0x00000008
#define AIF_NOOVERWRITE 0x00000010

#define AIF_NO_VERSION_DIALOG 0x00000020
#define AIF_REPLACEONLY 0x00000400

#define AIF_NOLANGUAGECHECK 0x10000000

#define AIF_QUIET 0x20000000

#define achADVINSTALLFILE "AdvInstallFile"

  HRESULT WINAPI AdvInstallFile(HWND hwnd,LPCSTR lpszSourceDir,LPCSTR lpszSourceFile,LPCSTR lpszDestDir,LPCSTR lpszDestFile,DWORD dwFlags,DWORD dwReserved);

  typedef HRESULT (WINAPI *ADVINSTALLFILE)(HWND hwnd,LPCSTR lpszSourceDir,LPCSTR lpszSourceFile,LPCSTR lpszDestDir,LPCSTR lpszDestFile,DWORD dwFlags,DWORD dwReserved);

#define IE4_RESTORE 0x00000001
#define IE4_BACKNEW 0x00000002
#define IE4_NODELETENEW 0x00000004
#define IE4_NOMESSAGES 0x00000008
#define IE4_NOPROGRESS 0x00000010
#define IE4_NOENUMKEY 0x00000020
#define IE4_NO_CRC_MAPPING 0x00000040

#define IE4_REGSECTION 0x00000080
#define IE4_FRDOALL 0x00000100
#define IE4_UPDREFCNT 0x00000200
#define IE4_USEREFCNT 0x00000400
#define IE4_EXTRAINCREFCNT 0x00000800

#define IE4_REMOVREGBKDATA 0x00001000

  HRESULT WINAPI RegSaveRestore(HWND hWnd,PCSTR pszTitleString,HKEY hkBckupKey,PCSTR pcszRootKey,PCSTR pcszSubKey,PCSTR pcszValueName,DWORD dwFlags);

  typedef HRESULT (WINAPI *REGSAVERESTORE)(HWND hWnd,PCSTR pszTitleString,HKEY hkBckupKey,PCSTR pcszRootKey,PCSTR pcszSubKey,PCSTR pcszValueName,DWORD dwFlags);

  HRESULT WINAPI RegSaveRestoreOnINF(HWND hWnd,PCSTR pszTitle,PCSTR pszINF,PCSTR pszSection,HKEY hHKLMBackKey,HKEY hHKCUBackKey,DWORD dwFlags);

  typedef HRESULT (WINAPI *REGSAVERESTOREONINF)(HWND hWnd,PCSTR pszTitle,PCSTR pszINF,PCSTR pszSection,HKEY hHKLMBackKey,HKEY hHKCUBackKey,DWORD dwFlags);

#define ARSR_RESTORE IE4_RESTORE
#define ARSR_NOMESSAGES IE4_NOMESSAGES
#define ARSR_REGSECTION IE4_REGSECTION
#define ARSR_REMOVREGBKDATA IE4_REMOVREGBKDATA

#define REG_SAVE_LOG_KEY "RegSaveLogFile"
#define REG_RESTORE_LOG_KEY "RegRestoreLogFile"

  HRESULT WINAPI RegRestoreAll(HWND hWnd,PSTR pszTitleString,HKEY hkBckupKey);
  typedef HRESULT (WINAPI *REGRESTOREALL)(HWND hWnd,PSTR pszTitleString,HKEY hkBckupKey);

  HRESULT WINAPI FileSaveRestore(HWND hDlg,LPSTR lpFileList,LPSTR lpDir,LPSTR lpBaseName,DWORD dwFlags);

  typedef HRESULT (WINAPI *FILESAVERESTORE)(HWND hDlg,LPSTR lpFileList,LPSTR lpDir,LPSTR lpBaseName,DWORD dwFlags);

  HRESULT WINAPI FileSaveRestoreOnINF(HWND hWnd,PCSTR pszTitle,PCSTR pszINF,PCSTR pszSection,PCSTR pszBackupDir,PCSTR pszBaseBackupFile,DWORD dwFlags);

  typedef HRESULT (WINAPI *FILESAVERESTOREONINF)(HWND hDlg,PCSTR pszTitle,PCSTR pszINF,PCSTR pszSection,PCSTR pszBackupDir,PCSTR pszBaseBackFile,DWORD dwFlags);

#define AFSR_RESTORE IE4_RESTORE
#define AFSR_BACKNEW IE4_BACKNEW
#define AFSR_NODELETENEW IE4_NODELETENEW
#define AFSR_NOMESSAGES IE4_NOMESSAGES
#define AFSR_NOPROGRESS IE4_NOPROGRESS
#define AFSR_UPDREFCNT IE4_UPDREFCNT
#define AFSR_USEREFCNT IE4_USEREFCNT
#define AFSR_EXTRAINCREFCNT IE4_EXTRAINCREFCNT

  HRESULT WINAPI AddDelBackupEntry(LPCSTR lpcszFileList,LPCSTR lpcszBackupDir,LPCSTR lpcszBaseName,DWORD dwFlags);

  typedef HRESULT (WINAPI *ADDDELBACKUPENTRY)(LPCSTR lpcszFileList,LPCSTR lpcszBackupDir,LPCSTR lpcszBaseName,DWORD dwFlags);

#define AADBE_ADD_ENTRY 0x01
#define AADBE_DEL_ENTRY 0x02

  HRESULT WINAPI FileSaveMarkNotExist(LPSTR lpFileList,LPSTR lpDir,LPSTR lpBaseName);

  typedef HRESULT (WINAPI *FILESAVEMARKNOTEXIST)(LPSTR lpFileList,LPSTR lpDir,LPSTR lpBaseName);

  HRESULT WINAPI GetVersionFromFile(LPSTR lpszFilename,LPDWORD pdwMSVer,LPDWORD pdwLSVer,WINBOOL bVersion);

  typedef HRESULT (WINAPI *GETVERSIONFROMFILE)(LPSTR lpszFilename,LPDWORD pdwMSVer,LPDWORD pdwLSVer,WINBOOL bVersion);

  HRESULT WINAPI GetVersionFromFileEx(LPSTR lpszFilename,LPDWORD pdwMSVer,LPDWORD pdwLSVer,WINBOOL bVersion);

  typedef HRESULT (WINAPI *GETVERSIONFROMFILE)(LPSTR lpszFilename,LPDWORD pdwMSVer,LPDWORD pdwLSVer,WINBOOL bVersion);

#define achISNTADMIN "IsNTAdmin"

  WINBOOL WINAPI IsNTAdmin(DWORD dwReserved,DWORD *lpdwReserved);

  typedef WINBOOL (WINAPI *ISNTADMIN)(DWORD,DWORD *);

#define ADN_DEL_IF_EMPTY 0x00000001
#define ADN_DONT_DEL_SUBDIRS 0x00000002
#define ADN_DONT_DEL_DIR 0x00000004
#define ADN_DEL_UNC_PATHS 0x00000008

#define achDELNODE "DelNode"

  HRESULT WINAPI DelNode(LPCSTR pszFileOrDirName,DWORD dwFlags);

  typedef HRESULT (WINAPI *DELNODE)(LPCSTR pszFileOrDirName,DWORD dwFlags);

#define achDELNODERUNDLL32 "DelNodeRunDLL32"

  HRESULT WINAPI DelNodeRunDLL32(HWND hwnd,HINSTANCE hInstance,PSTR pszParms,INT nShow);

  typedef HRESULT (WINAPI *DELNODERUNDLL32)(HWND hwnd,HINSTANCE hInst,PSTR pszParams,INT nShow);
  typedef PVOID HINF;

  HRESULT WINAPI OpenINFEngine(PCSTR pszInfFilename,PCSTR pszInstallSection,DWORD dwFlags,HINF *phInf,PVOID pvReserved);
  HRESULT WINAPI TranslateInfStringEx(HINF hInf,PCSTR pszInfFilename,PCSTR pszTranslateSection,PCSTR pszTranslateKey,PSTR pszBuffer,DWORD dwBufferSize,PDWORD pdwRequiredSize,PVOID pvReserved);
  HRESULT WINAPI CloseINFEngine(HINF hInf);
  HRESULT WINAPI ExtractFiles(LPCSTR pszCabName,LPCSTR pszExpandDir,DWORD dwFlags,LPCSTR pszFileList,LPVOID lpReserved,DWORD dwReserved);
  INT WINAPI LaunchINFSection(HWND,HINSTANCE,PSTR,INT);

#define LIS_QUIET 0x0001
#define LIS_NOGRPCONV 0x0002

#define RUNCMDS_QUIET 0x00000001
#define RUNCMDS_NOWAIT 0x00000002
#define RUNCMDS_DELAYPOSTCMD 0x00000004

#define awchMSIE4GUID L"{89820200-ECBD-11cf-8B85-00AA005B4383}"
#define achUserInstStubWrapper "UserInstStubWrapper"
#define achUserUnInstStubWrapper "UserUnInstStubWrapper"

  typedef HRESULT (WINAPI *USERINSTSTUBWRAPPER)(HWND hwnd,HINSTANCE hInst,PSTR pszParams,INT nShow);
  typedef HRESULT (WINAPI *USERUNINSTSTUBWRAPPER)(HWND hwnd,HINSTANCE hInst,PSTR pszParams,INT nShow);

  HRESULT WINAPI UserInstStubWrapper(HWND hwnd,HINSTANCE hInstance,PSTR pszParms,INT nShow);
  HRESULT WINAPI UserUnInstStubWrapper(HWND hwnd,HINSTANCE hInstance,PSTR pszParms,INT nShow);

  typedef struct _PERUSERSECTION {
    char szGUID[39+20];
    char szDispName[128];
    char szLocale[10];
    char szStub[MAX_PATH*4];
    char szVersion[32];
    char szCompID[128];
    DWORD dwIsInstalled;
    WINBOOL bRollback;
  } PERUSERSECTION,*PPERUSERSECTION;

  HRESULT WINAPI SetPerUserSecValues(PPERUSERSECTION pPerUser);

#define achSetPerUserSecValues "SetPerUserSecValues"

  typedef HRESULT (WINAPI *SETPERUSERSECVALUES)(PPERUSERSECTION pPerUser);

#ifdef __cplusplus
}
#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                usr/share/mingw-w64/include/af_irda.h                                                               0100644 0000000 0000000 00000012642 12404413022 016075  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __AFIRDA__
#define __AFIRDA__

#ifdef __LP64__
#pragma push_macro("u_long")
#undef u_long
#define u_long __ms_u_long
#endif

#include <_bsd_types.h>

#define WINDOWS_AF_IRDA 26
#define WINDOWS_PF_IRDA WINDOWS_AF_IRDA

#define WCE_AF_IRDA 22
#define WCE_PF_IRDA WCE_AF_IRDA

#ifndef AF_IRDA
#define AF_IRDA WINDOWS_AF_IRDA
#endif
#define IRDA_PROTO_SOCK_STREAM 1

#define PF_IRDA AF_IRDA

#define SOL_IRLMP 0x00FF

#define IRLMP_ENUMDEVICES 0x00000010
#define IRLMP_IAS_SET 0x00000011
#define IRLMP_IAS_QUERY 0x00000012

#define IRLMP_SEND_PDU_LEN 0x00000013
#define IRLMP_EXCLUSIVE_MODE 0x00000014
#define IRLMP_IRLPT_MODE 0x00000015
#define IRLMP_9WIRE_MODE 0x00000016

#define IRLMP_TINYTP_MODE 0x00000017
#define IRLMP_PARAMETERS 0x00000018
#define IRLMP_DISCOVERY_MODE 0x00000019

#define IRLMP_SHARP_MODE 0x00000020

#define SIO_LAZY_DISCOVERY _IOR('t',127,u_long)

#define IAS_ATTRIB_NO_CLASS 0x00000010
#define IAS_ATTRIB_NO_ATTRIB 0x00000000
#define IAS_ATTRIB_INT 0x00000001
#define IAS_ATTRIB_OCTETSEQ 0x00000002
#define IAS_ATTRIB_STR 0x00000003

#define IAS_MAX_USER_STRING 256
#define IAS_MAX_OCTET_STRING 1024
#define IAS_MAX_CLASSNAME 64
#define IAS_MAX_ATTRIBNAME 256

enum {
  LM_HB_Extension = 128,LM_HB1_PnP = 1,LM_HB1_PDA_Palmtop = 2,LM_HB1_Computer = 4,LM_HB1_Printer = 8,LM_HB1_Modem = 16,LM_HB1_Fax = 32,
  LM_HB1_LANAccess = 64,LM_HB2_Telephony = 1,LM_HB2_FileServer = 2,
};

#define LmCharSetASCII 0
#define LmCharSetISO_8859_1 1
#define LmCharSetISO_8859_2 2
#define LmCharSetISO_8859_3 3
#define LmCharSetISO_8859_4 4
#define LmCharSetISO_8859_5 5
#define LmCharSetISO_8859_6 6
#define LmCharSetISO_8859_7 7
#define LmCharSetISO_8859_8 8
#define LmCharSetISO_8859_9 9
#define LmCharSetUNICODE 0xff

typedef u_long LM_BAUD_RATE;

#define LM_BAUD_1200 1200
#define LM_BAUD_2400 2400
#define LM_BAUD_9600 9600
#define LM_BAUD_19200 19200
#define LM_BAUD_38400 38400
#define LM_BAUD_57600 57600
#define LM_BAUD_115200 115200
#define LM_BAUD_576K 576000
#define LM_BAUD_1152K 1152000
#define LM_BAUD_4M 4000000

typedef struct {
  u_long nTXDataBytes;
  u_long nRXDataBytes;
  LM_BAUD_RATE nBaudRate;
  u_long thresholdTime;
  u_long discTime;
  u_short nMSLinkTurn;
  u_char nTXPackets;
  u_char nRXPackets;
} LM_IRPARMS,*PLM_IRPARMS;

typedef struct _SOCKADDR_IRDA {
  u_short irdaAddressFamily;
  u_char irdaDeviceID[4];
  char irdaServiceName[25];
} SOCKADDR_IRDA,*PSOCKADDR_IRDA,*LPSOCKADDR_IRDA;

typedef struct _WINDOWS_IRDA_DEVICE_INFO {
  u_char irdaDeviceID[4];
  char irdaDeviceName[22];
  u_char irdaDeviceHints1;
  u_char irdaDeviceHints2;
  u_char irdaCharSet;
} WINDOWS_IRDA_DEVICE_INFO,*PWINDOWS_IRDA_DEVICE_INFO,*LPWINDOWS_IRDA_DEVICE_INFO;

typedef struct _WCE_IRDA_DEVICE_INFO {
  u_char irdaDeviceID[4];
  char irdaDeviceName[22];
  u_char Reserved[2];
} WCE_IRDA_DEVICE_INFO,*PWCE_IRDA_DEVICE_INFO;

typedef WINDOWS_IRDA_DEVICE_INFO IRDA_DEVICE_INFO,*PIRDA_DEVICE_INFO,*LPIRDA_DEVICE_INFO;

typedef struct _WINDOWS_DEVICELIST {
  ULONG numDevice;
  WINDOWS_IRDA_DEVICE_INFO Device[1];
} WINDOWS_DEVICELIST,*PWINDOWS_DEVICELIST,*LPWINDOWS_DEVICELIST;

typedef struct _WCE_DEVICELIST {
  ULONG numDevice;
  WCE_IRDA_DEVICE_INFO Device[1];
} WCE_DEVICELIST,*PWCE_DEVICELIST;

typedef WINDOWS_DEVICELIST DEVICELIST,*PDEVICELIST,*LPDEVICELIST;

typedef struct _WINDOWS_IAS_SET {
  char irdaClassName[IAS_MAX_CLASSNAME];
  char irdaAttribName[IAS_MAX_ATTRIBNAME];
  u_long irdaAttribType;
  union {
    LONG irdaAttribInt;
    struct {
      u_short Len;
      u_char OctetSeq[IAS_MAX_OCTET_STRING];
    } irdaAttribOctetSeq;
    struct {
      u_char Len;
      u_char CharSet;
      u_char UsrStr[IAS_MAX_USER_STRING];
    } irdaAttribUsrStr;
  } irdaAttribute;
} WINDOWS_IAS_SET,*PWINDOWS_IAS_SET,*LPWINDOWS_IAS_SET;

typedef struct _WINDOWS_IAS_QUERY {
  u_char irdaDeviceID[4];
  char irdaClassName[IAS_MAX_CLASSNAME];
  char irdaAttribName[IAS_MAX_ATTRIBNAME];
  u_long irdaAttribType;
  union {
    LONG irdaAttribInt;
    struct {
      u_long Len;
      u_char OctetSeq[IAS_MAX_OCTET_STRING];
    } irdaAttribOctetSeq;
    struct {
      u_long Len;
      u_long CharSet;
      u_char UsrStr[IAS_MAX_USER_STRING];
    } irdaAttribUsrStr;
  } irdaAttribute;
} WINDOWS_IAS_QUERY,*PWINDOWS_IAS_QUERY,*LPWINDOWS_IAS_QUERY;

typedef struct _WCE_IAS_SET {
  char irdaClassName[61];
  char irdaAttribName[61];
  u_short irdaAttribType;
  union {
    int irdaAttribInt;
    struct {
      int Len;
      u_char OctetSeq[1];
      u_char Reserved[3];
    } irdaAttribOctetSeq;
    struct {
      int Len;
      u_char CharSet;
      u_char UsrStr[1];
      u_char Reserved[2];
    } irdaAttribUsrStr;
  } irdaAttribute;
} WCE_IAS_SET,*PWCE_IAS_SET;

typedef struct _WCE_IAS_QUERY {
  u_char irdaDeviceID[4];
  char irdaClassName[61];
  char irdaAttribName[61];
  u_short irdaAttribType;
  union {
    int irdaAttribInt;
    struct {
      int Len;
      u_char OctetSeq[1];
      u_char Reserved[3];
    } irdaAttribOctetSeq;
    struct {
      int Len;
      u_char CharSet;
      u_char UsrStr[1];
      u_char Reserved[2];
    } irdaAttribUsrStr;
  } irdaAttribute;
} WCE_IAS_QUERY,*PWCE_IAS_QUERY;

typedef WINDOWS_IAS_SET IAS_SET,*PIAS_SET,*LPIASSET;
typedef WINDOWS_IAS_QUERY IAS_QUERY,*PIAS_QUERY,*LPIASQUERY;

#ifdef __LP64__
#pragma pop_macro("u_long")
#endif

#endif
                                                                                              usr/share/mingw-w64/include/afxres.h                                                                0100644 0000000 0000000 00000001037 12404413022 015774  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef _AFXRES_H
#define _AFXRES_H
#if __GNUC__ >= 3
#pragma GCC system_header
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifndef _INC_WINDOWS
#include <windows.h>
#endif

/* IDC_STATIC is documented in winuser.h, but not defined. */
#ifndef IDC_STATIC
#define IDC_STATIC (-1)
#endif

#ifdef __cplusplus
}
#endif
#endif

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 usr/share/mingw-w64/include/agtctl.h                                                                0100644 0000000 0000000 00000467641 12404413022 016003  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        /**
 * This file has no copyright assigned and is placed in the Public Domain.
 * This file is part of the mingw-w64 runtime package.
 * No warranty is given; refer to the file DISCLAIMER.PD within this package.
 */
#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 440
#endif

#include "rpc.h"
#include "rpcndr.h"

#ifndef __RPCNDR_H_VERSION__
#error this stub requires an updated version of <rpcndr.h>
#endif

#ifndef COM_NO_WINDOWS_H
#include "windows.h"
#include "ole2.h"
#endif

#ifndef __AgentControl_h__
#define __AgentControl_h__

#ifdef __cplusplus
extern "C" {
#endif

#ifndef __IAgentCtlRequest_FWD_DEFINED__
#define __IAgentCtlRequest_FWD_DEFINED__
  typedef struct IAgentCtlRequest IAgentCtlRequest;
#endif

#ifndef __IAgentCtlUserInput_FWD_DEFINED__
#define __IAgentCtlUserInput_FWD_DEFINED__
  typedef struct IAgentCtlUserInput IAgentCtlUserInput;
#endif

#ifndef __IAgentCtlBalloon_FWD_DEFINED__
#define __IAgentCtlBalloon_FWD_DEFINED__
  typedef struct IAgentCtlBalloon IAgentCtlBalloon;
#endif

#ifndef __IAgentCtlBalloonEx_FWD_DEFINED__
#define __IAgentCtlBalloonEx_FWD_DEFINED__
  typedef struct IAgentCtlBalloonEx IAgentCtlBalloonEx;
#endif

#ifndef __IAgentCtlCommand_FWD_DEFINED__
#define __IAgentCtlCommand_FWD_DEFINED__
  typedef struct IAgentCtlCommand IAgentCtlCommand;
#endif

#ifndef __IAgentCtlCommandEx_FWD_DEFINED__
#define __IAgentCtlCommandEx_FWD_DEFINED__
  typedef struct IAgentCtlCommandEx IAgentCtlCommandEx;
#endif

#ifndef __IAgentCtlCommands_FWD_DEFINED__
#define __IAgentCtlCommands_FWD_DEFINED__
  typedef struct IAgentCtlCommands IAgentCtlCommands;
#endif

#ifndef __IAgentCtlCommandsEx_FWD_DEFINED__
#define __IAgentCtlCommandsEx_FWD_DEFINED__
  typedef struct IAgentCtlCommandsEx IAgentCtlCommandsEx;
#endif

#ifndef __IAgentCtlCharacter_FWD_DEFINED__
#define __IAgentCtlCharacter_FWD_DEFINED__
  typedef struct IAgentCtlCharacter IAgentCtlCharacter;
#endif

#ifndef __IAgentCtlAnimationNames_FWD_DEFINED__
#define __IAgentCtlAnimationNames_FWD_DEFINED__
  typedef struct IAgentCtlAnimationNames IAgentCtlAnimationNames;
#endif

#ifndef __IAgentCtlCharacterEx_FWD_DEFINED__
#define __IAgentCtlCharacterEx_FWD_DEFINED__
  typedef struct IAgentCtlCharacterEx IAgentCtlCharacterEx;
#endif

#ifndef __IAgentCtlCharacters_FWD_DEFINED__
#define __IAgentCtlCharacters_FWD_DEFINED__
  typedef struct IAgentCtlCharacters IAgentCtlCharacters;
#endif

#ifndef __IAgentCtlAudioObject_FWD_DEFINED__
#define __IAgentCtlAudioObject_FWD_DEFINED__
  typedef struct IAgentCtlAudioObject IAgentCtlAudioObject;
#endif

#ifndef __IAgentCtlAudioObjectEx_FWD_DEFINED__
#define __IAgentCtlAudioObjectEx_FWD_DEFINED__
  typedef struct IAgentCtlAudioObjectEx IAgentCtlAudioObjectEx;
#endif

#ifndef __IAgentCtlSpeechInput_FWD_DEFINED__
#define __IAgentCtlSpeechInput_FWD_DEFINED__
  typedef struct IAgentCtlSpeechInput IAgentCtlSpeechInput;
#endif

#ifndef __IAgentCtlPropertySheet_FWD_DEFINED__
#define __IAgentCtlPropertySheet_FWD_DEFINED__
  typedef struct IAgentCtlPropertySheet IAgentCtlPropertySheet;
#endif

#ifndef __IAgentCtlCommandsWindow_FWD_DEFINED__
#define __IAgentCtlCommandsWindow_FWD_DEFINED__
  typedef struct IAgentCtlCommandsWindow IAgentCtlCommandsWindow;
#endif

#ifndef __IAgentCtl_FWD_DEFINED__
#define __IAgentCtl_FWD_DEFINED__
  typedef struct IAgentCtl IAgentCtl;
#endif

#ifndef __IAgentCtlEx_FWD_DEFINED__
#define __IAgentCtlEx_FWD_DEFINED__
  typedef struct IAgentCtlEx IAgentCtlEx;
#endif

#ifndef __IAgentCtlCharacters_FWD_DEFINED__
#define __IAgentCtlCharacters_FWD_DEFINED__
  typedef struct IAgentCtlCharacters IAgentCtlCharacters;
#endif

#ifndef __IAgentCtlBalloon_FWD_DEFINED__
#define __IAgentCtlBalloon_FWD_DEFINED__
  typedef struct IAgentCtlBalloon IAgentCtlBalloon;
#endif

#ifndef __IAgentCtlBalloonEx_FWD_DEFINED__
#define __IAgentCtlBalloonEx_FWD_DEFINED__
  typedef struct IAgentCtlBalloonEx IAgentCtlBalloonEx;
#endif

#ifndef __IAgentCtlCharacter_FWD_DEFINED__
#define __IAgentCtlCharacter_FWD_DEFINED__
  typedef struct IAgentCtlCharacter IAgentCtlCharacter;
#endif

#ifndef __IAgentCtlCharacterEx_FWD_DEFINED__
#define __IAgentCtlCharacterEx_FWD_DEFINED__
  typedef struct IAgentCtlCharacterEx IAgentCtlCharacterEx;
#endif

#ifndef __IAgentCtlAudioObject_FWD_DEFINED__
#define __IAgentCtlAudioObject_FWD_DEFINED__
  typedef struct IAgentCtlAudioObject IAgentCtlAudioObject;
#endif

#ifndef __IAgentCtlAudioObjectEx_FWD_DEFINED__
#define __IAgentCtlAudioObjectEx_FWD_DEFINED__
  typedef struct IAgentCtlAudioObjectEx IAgentCtlAudioObjectEx;
#endif

#ifndef __IAgentCtlSpeechInput_FWD_DEFINED__
#define __IAgentCtlSpeechInput_FWD_DEFINED__
  typedef struct IAgentCtlSpeechInput IAgentCtlSpeechInput;
#endif

#ifndef __IAgentCtlPropertySheet_FWD_DEFINED__
#define __IAgentCtlPropertySheet_FWD_DEFINED__
  typedef struct IAgentCtlPropertySheet IAgentCtlPropertySheet;
#endif

#ifndef __IAgentCtlCommands_FWD_DEFINED__
#define __IAgentCtlCommands_FWD_DEFINED__
  typedef struct IAgentCtlCommands IAgentCtlCommands;
#endif

#ifndef __IAgentCtlCommandsEx_FWD_DEFINED__
#define __IAgentCtlCommandsEx_FWD_DEFINED__
  typedef struct IAgentCtlCommandsEx IAgentCtlCommandsEx;
#endif

#ifndef __IAgentCtlCommand_FWD_DEFINED__
#define __IAgentCtlCommand_FWD_DEFINED__
  typedef struct IAgentCtlCommand IAgentCtlCommand;
#endif

#ifndef __IAgentCtlCommandEx_FWD_DEFINED__
#define __IAgentCtlCommandEx_FWD_DEFINED__
  typedef struct IAgentCtlCommandEx IAgentCtlCommandEx;
#endif

#ifndef __IAgentCtlRequest_FWD_DEFINED__
#define __IAgentCtlRequest_FWD_DEFINED__
  typedef struct IAgentCtlRequest IAgentCtlRequest;
#endif

#ifndef __IAgentCtlUserInput_FWD_DEFINED__
#define __IAgentCtlUserInput_FWD_DEFINED__
  typedef struct IAgentCtlUserInput IAgentCtlUserInput;
#endif

#ifndef __IAgentCtlCommandsWindow_FWD_DEFINED__
#define __IAgentCtlCommandsWindow_FWD_DEFINED__
  typedef struct IAgentCtlCommandsWindow IAgentCtlCommandsWindow;
#endif

#ifndef __IAgentCtl_FWD_DEFINED__
#define __IAgentCtl_FWD_DEFINED__
  typedef struct IAgentCtl IAgentCtl;
#endif

#ifndef __IAgentCtlEx_FWD_DEFINED__
#define __IAgentCtlEx_FWD_DEFINED__
  typedef struct IAgentCtlEx IAgentCtlEx;
#endif

#ifndef ___AgentEvents_FWD_DEFINED__
#define ___AgentEvents_FWD_DEFINED__
  typedef struct _AgentEvents _AgentEvents;
#endif

#ifndef __Agent_FWD_DEFINED__
#define __Agent_FWD_DEFINED__

#ifdef __cplusplus
  typedef class Agent Agent;
#else
  typedef struct Agent Agent;
#endif
#endif

#include "oaidl.h"
#include "ocidl.h"

#ifndef __MIDL_user_allocate_free_DEFINED__
#define __MIDL_user_allocate_free_DEFINED__
  void *__RPC_API MIDL_user_allocate(size_t);
  void __RPC_API MIDL_user_free(void *);
#endif

#define RequestSuccess (0)
#define RequestFailed (1)
#define RequestPending (2)
#define RequestInterrupted (3)
#define RequestInProgress (4)

  extern RPC_IF_HANDLE __MIDL_itf_AgentControl_0000_v0_0_c_ifspec;
  extern RPC_IF_HANDLE __MIDL_itf_AgentControl_0000_v0_0_s_ifspec;

#ifndef __IAgentCtlRequest_INTERFACE_DEFINED__
#define __IAgentCtlRequest_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IAgentCtlRequest;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IAgentCtlRequest : public IDispatch {
  public:
    virtual HRESULT WINAPI get_ID(__LONG32 *ID) = 0;
    virtual HRESULT WINAPI get_Status(__LONG32 *Status) = 0;
    virtual HRESULT WINAPI get_Description(BSTR *Description) = 0;
    virtual HRESULT WINAPI get_Number(__LONG32 *Number) = 0;
  };
#else
  typedef struct IAgentCtlRequestVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IAgentCtlRequest *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IAgentCtlRequest *This);
      ULONG (WINAPI *Release)(IAgentCtlRequest *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IAgentCtlRequest *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IAgentCtlRequest *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IAgentCtlRequest *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IAgentCtlRequest *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_ID)(IAgentCtlRequest *This,__LONG32 *ID);
      HRESULT (WINAPI *get_Status)(IAgentCtlRequest *This,__LONG32 *Status);
      HRESULT (WINAPI *get_Description)(IAgentCtlRequest *This,BSTR *Description);
      HRESULT (WINAPI *get_Number)(IAgentCtlRequest *This,__LONG32 *Number);
    END_INTERFACE
  } IAgentCtlRequestVtbl;
  struct IAgentCtlRequest {
    CONST_VTBL struct IAgentCtlRequestVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IAgentCtlRequest_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAgentCtlRequest_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAgentCtlRequest_Release(This) (This)->lpVtbl->Release(This)
#define IAgentCtlRequest_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IAgentCtlRequest_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IAgentCtlRequest_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IAgentCtlRequest_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IAgentCtlRequest_get_ID(This,ID) (This)->lpVtbl->get_ID(This,ID)
#define IAgentCtlRequest_get_Status(This,Status) (This)->lpVtbl->get_Status(This,Status)
#define IAgentCtlRequest_get_Description(This,Description) (This)->lpVtbl->get_Description(This,Description)
#define IAgentCtlRequest_get_Number(This,Number) (This)->lpVtbl->get_Number(This,Number)
#endif
#endif
  HRESULT WINAPI IAgentCtlRequest_get_ID_Proxy(IAgentCtlRequest *This,__LONG32 *ID);
  void __RPC_STUB IAgentCtlRequest_get_ID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlRequest_get_Status_Proxy(IAgentCtlRequest *This,__LONG32 *Status);
  void __RPC_STUB IAgentCtlRequest_get_Status_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlRequest_get_Description_Proxy(IAgentCtlRequest *This,BSTR *Description);
  void __RPC_STUB IAgentCtlRequest_get_Description_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlRequest_get_Number_Proxy(IAgentCtlRequest *This,__LONG32 *Number);
  void __RPC_STUB IAgentCtlRequest_get_Number_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IAgentCtlUserInput_INTERFACE_DEFINED__
#define __IAgentCtlUserInput_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IAgentCtlUserInput;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IAgentCtlUserInput : public IDispatch {
  public:
    virtual HRESULT WINAPI get_Count(short *pCount) = 0;
    virtual HRESULT WINAPI get_Name(BSTR *pName) = 0;
    virtual HRESULT WINAPI get_CharacterID(BSTR *pCharacterID) = 0;
    virtual HRESULT WINAPI get_Confidence(__LONG32 *pConfidence) = 0;
    virtual HRESULT WINAPI get_Voice(BSTR *pVoice) = 0;
    virtual HRESULT WINAPI get_Alt1Name(BSTR *pAlt1Name) = 0;
    virtual HRESULT WINAPI get_Alt1Confidence(__LONG32 *pAlt1Confidence) = 0;
    virtual HRESULT WINAPI get_Alt1Voice(BSTR *pAlt1Voice) = 0;
    virtual HRESULT WINAPI get_Alt2Name(BSTR *pAlt2Name) = 0;
    virtual HRESULT WINAPI get_Alt2Confidence(__LONG32 *pAlt2Confidence) = 0;
    virtual HRESULT WINAPI get_Alt2Voice(BSTR *pAlt2Voice) = 0;
  };
#else
  typedef struct IAgentCtlUserInputVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IAgentCtlUserInput *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IAgentCtlUserInput *This);
      ULONG (WINAPI *Release)(IAgentCtlUserInput *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IAgentCtlUserInput *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IAgentCtlUserInput *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IAgentCtlUserInput *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IAgentCtlUserInput *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Count)(IAgentCtlUserInput *This,short *pCount);
      HRESULT (WINAPI *get_Name)(IAgentCtlUserInput *This,BSTR *pName);
      HRESULT (WINAPI *get_CharacterID)(IAgentCtlUserInput *This,BSTR *pCharacterID);
      HRESULT (WINAPI *get_Confidence)(IAgentCtlUserInput *This,__LONG32 *pConfidence);
      HRESULT (WINAPI *get_Voice)(IAgentCtlUserInput *This,BSTR *pVoice);
      HRESULT (WINAPI *get_Alt1Name)(IAgentCtlUserInput *This,BSTR *pAlt1Name);
      HRESULT (WINAPI *get_Alt1Confidence)(IAgentCtlUserInput *This,__LONG32 *pAlt1Confidence);
      HRESULT (WINAPI *get_Alt1Voice)(IAgentCtlUserInput *This,BSTR *pAlt1Voice);
      HRESULT (WINAPI *get_Alt2Name)(IAgentCtlUserInput *This,BSTR *pAlt2Name);
      HRESULT (WINAPI *get_Alt2Confidence)(IAgentCtlUserInput *This,__LONG32 *pAlt2Confidence);
      HRESULT (WINAPI *get_Alt2Voice)(IAgentCtlUserInput *This,BSTR *pAlt2Voice);
    END_INTERFACE
  } IAgentCtlUserInputVtbl;
  struct IAgentCtlUserInput {
    CONST_VTBL struct IAgentCtlUserInputVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IAgentCtlUserInput_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAgentCtlUserInput_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAgentCtlUserInput_Release(This) (This)->lpVtbl->Release(This)
#define IAgentCtlUserInput_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IAgentCtlUserInput_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IAgentCtlUserInput_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IAgentCtlUserInput_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IAgentCtlUserInput_get_Count(This,pCount) (This)->lpVtbl->get_Count(This,pCount)
#define IAgentCtlUserInput_get_Name(This,pName) (This)->lpVtbl->get_Name(This,pName)
#define IAgentCtlUserInput_get_CharacterID(This,pCharacterID) (This)->lpVtbl->get_CharacterID(This,pCharacterID)
#define IAgentCtlUserInput_get_Confidence(This,pConfidence) (This)->lpVtbl->get_Confidence(This,pConfidence)
#define IAgentCtlUserInput_get_Voice(This,pVoice) (This)->lpVtbl->get_Voice(This,pVoice)
#define IAgentCtlUserInput_get_Alt1Name(This,pAlt1Name) (This)->lpVtbl->get_Alt1Name(This,pAlt1Name)
#define IAgentCtlUserInput_get_Alt1Confidence(This,pAlt1Confidence) (This)->lpVtbl->get_Alt1Confidence(This,pAlt1Confidence)
#define IAgentCtlUserInput_get_Alt1Voice(This,pAlt1Voice) (This)->lpVtbl->get_Alt1Voice(This,pAlt1Voice)
#define IAgentCtlUserInput_get_Alt2Name(This,pAlt2Name) (This)->lpVtbl->get_Alt2Name(This,pAlt2Name)
#define IAgentCtlUserInput_get_Alt2Confidence(This,pAlt2Confidence) (This)->lpVtbl->get_Alt2Confidence(This,pAlt2Confidence)
#define IAgentCtlUserInput_get_Alt2Voice(This,pAlt2Voice) (This)->lpVtbl->get_Alt2Voice(This,pAlt2Voice)
#endif
#endif
  HRESULT WINAPI IAgentCtlUserInput_get_Count_Proxy(IAgentCtlUserInput *This,short *pCount);
  void __RPC_STUB IAgentCtlUserInput_get_Count_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlUserInput_get_Name_Proxy(IAgentCtlUserInput *This,BSTR *pName);
  void __RPC_STUB IAgentCtlUserInput_get_Name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlUserInput_get_CharacterID_Proxy(IAgentCtlUserInput *This,BSTR *pCharacterID);
  void __RPC_STUB IAgentCtlUserInput_get_CharacterID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlUserInput_get_Confidence_Proxy(IAgentCtlUserInput *This,__LONG32 *pConfidence);
  void __RPC_STUB IAgentCtlUserInput_get_Confidence_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlUserInput_get_Voice_Proxy(IAgentCtlUserInput *This,BSTR *pVoice);
  void __RPC_STUB IAgentCtlUserInput_get_Voice_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlUserInput_get_Alt1Name_Proxy(IAgentCtlUserInput *This,BSTR *pAlt1Name);
  void __RPC_STUB IAgentCtlUserInput_get_Alt1Name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlUserInput_get_Alt1Confidence_Proxy(IAgentCtlUserInput *This,__LONG32 *pAlt1Confidence);
  void __RPC_STUB IAgentCtlUserInput_get_Alt1Confidence_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlUserInput_get_Alt1Voice_Proxy(IAgentCtlUserInput *This,BSTR *pAlt1Voice);
  void __RPC_STUB IAgentCtlUserInput_get_Alt1Voice_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlUserInput_get_Alt2Name_Proxy(IAgentCtlUserInput *This,BSTR *pAlt2Name);
  void __RPC_STUB IAgentCtlUserInput_get_Alt2Name_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlUserInput_get_Alt2Confidence_Proxy(IAgentCtlUserInput *This,__LONG32 *pAlt2Confidence);
  void __RPC_STUB IAgentCtlUserInput_get_Alt2Confidence_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlUserInput_get_Alt2Voice_Proxy(IAgentCtlUserInput *This,BSTR *pAlt2Voice);
  void __RPC_STUB IAgentCtlUserInput_get_Alt2Voice_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IAgentCtlBalloon_INTERFACE_DEFINED__
#define __IAgentCtlBalloon_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IAgentCtlBalloon;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IAgentCtlBalloon : public IDispatch {
  public:
    virtual HRESULT WINAPI get_Enabled(VARIANT_BOOL *Enabled) = 0;
    virtual HRESULT WINAPI get_NumberOfLines(__LONG32 *Lines) = 0;
    virtual HRESULT WINAPI get_CharsPerLine(__LONG32 *CharsPerLine) = 0;
    virtual HRESULT WINAPI get_FontName(BSTR *FontName) = 0;
    virtual HRESULT WINAPI get_FontSize(__LONG32 *FontSize) = 0;
    virtual HRESULT WINAPI get_FontBold(VARIANT_BOOL *FontBold) = 0;
    virtual HRESULT WINAPI get_FontItalic(VARIANT_BOOL *FontItalic) = 0;
    virtual HRESULT WINAPI get_FontStrikethru(VARIANT_BOOL *FontStrikethru) = 0;
    virtual HRESULT WINAPI get_FontUnderline(VARIANT_BOOL *FontUnderline) = 0;
    virtual HRESULT WINAPI get_ForeColor(__LONG32 *ForeColor) = 0;
    virtual HRESULT WINAPI get_BackColor(__LONG32 *BackColor) = 0;
    virtual HRESULT WINAPI get_BorderColor(__LONG32 *BorderColor) = 0;
    virtual HRESULT WINAPI put_Visible(VARIANT_BOOL Visible) = 0;
    virtual HRESULT WINAPI get_Visible(VARIANT_BOOL *Visible) = 0;
    virtual HRESULT WINAPI put_FontName(BSTR FontName) = 0;
    virtual HRESULT WINAPI put_FontSize(__LONG32 FontSize) = 0;
    virtual HRESULT WINAPI put_FontCharSet(short FontCharSet) = 0;
    virtual HRESULT WINAPI get_FontCharSet(short *FontCharSet) = 0;
  };
#else
  typedef struct IAgentCtlBalloonVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IAgentCtlBalloon *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IAgentCtlBalloon *This);
      ULONG (WINAPI *Release)(IAgentCtlBalloon *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IAgentCtlBalloon *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IAgentCtlBalloon *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IAgentCtlBalloon *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IAgentCtlBalloon *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Enabled)(IAgentCtlBalloon *This,VARIANT_BOOL *Enabled);
      HRESULT (WINAPI *get_NumberOfLines)(IAgentCtlBalloon *This,__LONG32 *Lines);
      HRESULT (WINAPI *get_CharsPerLine)(IAgentCtlBalloon *This,__LONG32 *CharsPerLine);
      HRESULT (WINAPI *get_FontName)(IAgentCtlBalloon *This,BSTR *FontName);
      HRESULT (WINAPI *get_FontSize)(IAgentCtlBalloon *This,__LONG32 *FontSize);
      HRESULT (WINAPI *get_FontBold)(IAgentCtlBalloon *This,VARIANT_BOOL *FontBold);
      HRESULT (WINAPI *get_FontItalic)(IAgentCtlBalloon *This,VARIANT_BOOL *FontItalic);
      HRESULT (WINAPI *get_FontStrikethru)(IAgentCtlBalloon *This,VARIANT_BOOL *FontStrikethru);
      HRESULT (WINAPI *get_FontUnderline)(IAgentCtlBalloon *This,VARIANT_BOOL *FontUnderline);
      HRESULT (WINAPI *get_ForeColor)(IAgentCtlBalloon *This,__LONG32 *ForeColor);
      HRESULT (WINAPI *get_BackColor)(IAgentCtlBalloon *This,__LONG32 *BackColor);
      HRESULT (WINAPI *get_BorderColor)(IAgentCtlBalloon *This,__LONG32 *BorderColor);
      HRESULT (WINAPI *put_Visible)(IAgentCtlBalloon *This,VARIANT_BOOL Visible);
      HRESULT (WINAPI *get_Visible)(IAgentCtlBalloon *This,VARIANT_BOOL *Visible);
      HRESULT (WINAPI *put_FontName)(IAgentCtlBalloon *This,BSTR FontName);
      HRESULT (WINAPI *put_FontSize)(IAgentCtlBalloon *This,__LONG32 FontSize);
      HRESULT (WINAPI *put_FontCharSet)(IAgentCtlBalloon *This,short FontCharSet);
      HRESULT (WINAPI *get_FontCharSet)(IAgentCtlBalloon *This,short *FontCharSet);
    END_INTERFACE
  } IAgentCtlBalloonVtbl;
  struct IAgentCtlBalloon {
    CONST_VTBL struct IAgentCtlBalloonVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IAgentCtlBalloon_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAgentCtlBalloon_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAgentCtlBalloon_Release(This) (This)->lpVtbl->Release(This)
#define IAgentCtlBalloon_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IAgentCtlBalloon_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IAgentCtlBalloon_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IAgentCtlBalloon_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IAgentCtlBalloon_get_Enabled(This,Enabled) (This)->lpVtbl->get_Enabled(This,Enabled)
#define IAgentCtlBalloon_get_NumberOfLines(This,Lines) (This)->lpVtbl->get_NumberOfLines(This,Lines)
#define IAgentCtlBalloon_get_CharsPerLine(This,CharsPerLine) (This)->lpVtbl->get_CharsPerLine(This,CharsPerLine)
#define IAgentCtlBalloon_get_FontName(This,FontName) (This)->lpVtbl->get_FontName(This,FontName)
#define IAgentCtlBalloon_get_FontSize(This,FontSize) (This)->lpVtbl->get_FontSize(This,FontSize)
#define IAgentCtlBalloon_get_FontBold(This,FontBold) (This)->lpVtbl->get_FontBold(This,FontBold)
#define IAgentCtlBalloon_get_FontItalic(This,FontItalic) (This)->lpVtbl->get_FontItalic(This,FontItalic)
#define IAgentCtlBalloon_get_FontStrikethru(This,FontStrikethru) (This)->lpVtbl->get_FontStrikethru(This,FontStrikethru)
#define IAgentCtlBalloon_get_FontUnderline(This,FontUnderline) (This)->lpVtbl->get_FontUnderline(This,FontUnderline)
#define IAgentCtlBalloon_get_ForeColor(This,ForeColor) (This)->lpVtbl->get_ForeColor(This,ForeColor)
#define IAgentCtlBalloon_get_BackColor(This,BackColor) (This)->lpVtbl->get_BackColor(This,BackColor)
#define IAgentCtlBalloon_get_BorderColor(This,BorderColor) (This)->lpVtbl->get_BorderColor(This,BorderColor)
#define IAgentCtlBalloon_put_Visible(This,Visible) (This)->lpVtbl->put_Visible(This,Visible)
#define IAgentCtlBalloon_get_Visible(This,Visible) (This)->lpVtbl->get_Visible(This,Visible)
#define IAgentCtlBalloon_put_FontName(This,FontName) (This)->lpVtbl->put_FontName(This,FontName)
#define IAgentCtlBalloon_put_FontSize(This,FontSize) (This)->lpVtbl->put_FontSize(This,FontSize)
#define IAgentCtlBalloon_put_FontCharSet(This,FontCharSet) (This)->lpVtbl->put_FontCharSet(This,FontCharSet)
#define IAgentCtlBalloon_get_FontCharSet(This,FontCharSet) (This)->lpVtbl->get_FontCharSet(This,FontCharSet)
#endif
#endif
  HRESULT WINAPI IAgentCtlBalloon_get_Enabled_Proxy(IAgentCtlBalloon *This,VARIANT_BOOL *Enabled);
  void __RPC_STUB IAgentCtlBalloon_get_Enabled_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_NumberOfLines_Proxy(IAgentCtlBalloon *This,__LONG32 *Lines);
  void __RPC_STUB IAgentCtlBalloon_get_NumberOfLines_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_CharsPerLine_Proxy(IAgentCtlBalloon *This,__LONG32 *CharsPerLine);
  void __RPC_STUB IAgentCtlBalloon_get_CharsPerLine_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_FontName_Proxy(IAgentCtlBalloon *This,BSTR *FontName);
  void __RPC_STUB IAgentCtlBalloon_get_FontName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_FontSize_Proxy(IAgentCtlBalloon *This,__LONG32 *FontSize);
  void __RPC_STUB IAgentCtlBalloon_get_FontSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_FontBold_Proxy(IAgentCtlBalloon *This,VARIANT_BOOL *FontBold);
  void __RPC_STUB IAgentCtlBalloon_get_FontBold_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_FontItalic_Proxy(IAgentCtlBalloon *This,VARIANT_BOOL *FontItalic);
  void __RPC_STUB IAgentCtlBalloon_get_FontItalic_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_FontStrikethru_Proxy(IAgentCtlBalloon *This,VARIANT_BOOL *FontStrikethru);
  void __RPC_STUB IAgentCtlBalloon_get_FontStrikethru_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_FontUnderline_Proxy(IAgentCtlBalloon *This,VARIANT_BOOL *FontUnderline);
  void __RPC_STUB IAgentCtlBalloon_get_FontUnderline_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_ForeColor_Proxy(IAgentCtlBalloon *This,__LONG32 *ForeColor);
  void __RPC_STUB IAgentCtlBalloon_get_ForeColor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_BackColor_Proxy(IAgentCtlBalloon *This,__LONG32 *BackColor);
  void __RPC_STUB IAgentCtlBalloon_get_BackColor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_BorderColor_Proxy(IAgentCtlBalloon *This,__LONG32 *BorderColor);
  void __RPC_STUB IAgentCtlBalloon_get_BorderColor_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_put_Visible_Proxy(IAgentCtlBalloon *This,VARIANT_BOOL Visible);
  void __RPC_STUB IAgentCtlBalloon_put_Visible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_Visible_Proxy(IAgentCtlBalloon *This,VARIANT_BOOL *Visible);
  void __RPC_STUB IAgentCtlBalloon_get_Visible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_put_FontName_Proxy(IAgentCtlBalloon *This,BSTR FontName);
  void __RPC_STUB IAgentCtlBalloon_put_FontName_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_put_FontSize_Proxy(IAgentCtlBalloon *This,__LONG32 FontSize);
  void __RPC_STUB IAgentCtlBalloon_put_FontSize_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_put_FontCharSet_Proxy(IAgentCtlBalloon *This,short FontCharSet);
  void __RPC_STUB IAgentCtlBalloon_put_FontCharSet_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloon_get_FontCharSet_Proxy(IAgentCtlBalloon *This,short *FontCharSet);
  void __RPC_STUB IAgentCtlBalloon_get_FontCharSet_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IAgentCtlBalloonEx_INTERFACE_DEFINED__
#define __IAgentCtlBalloonEx_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IAgentCtlBalloonEx;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IAgentCtlBalloonEx : public IAgentCtlBalloon {
  public:
    virtual HRESULT WINAPI put_Style(__LONG32 Style) = 0;
    virtual HRESULT WINAPI get_Style(__LONG32 *Style) = 0;
  };
#else
  typedef struct IAgentCtlBalloonExVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IAgentCtlBalloonEx *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IAgentCtlBalloonEx *This);
      ULONG (WINAPI *Release)(IAgentCtlBalloonEx *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IAgentCtlBalloonEx *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IAgentCtlBalloonEx *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IAgentCtlBalloonEx *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IAgentCtlBalloonEx *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Enabled)(IAgentCtlBalloonEx *This,VARIANT_BOOL *Enabled);
      HRESULT (WINAPI *get_NumberOfLines)(IAgentCtlBalloonEx *This,__LONG32 *Lines);
      HRESULT (WINAPI *get_CharsPerLine)(IAgentCtlBalloonEx *This,__LONG32 *CharsPerLine);
      HRESULT (WINAPI *get_FontName)(IAgentCtlBalloonEx *This,BSTR *FontName);
      HRESULT (WINAPI *get_FontSize)(IAgentCtlBalloonEx *This,__LONG32 *FontSize);
      HRESULT (WINAPI *get_FontBold)(IAgentCtlBalloonEx *This,VARIANT_BOOL *FontBold);
      HRESULT (WINAPI *get_FontItalic)(IAgentCtlBalloonEx *This,VARIANT_BOOL *FontItalic);
      HRESULT (WINAPI *get_FontStrikethru)(IAgentCtlBalloonEx *This,VARIANT_BOOL *FontStrikethru);
      HRESULT (WINAPI *get_FontUnderline)(IAgentCtlBalloonEx *This,VARIANT_BOOL *FontUnderline);
      HRESULT (WINAPI *get_ForeColor)(IAgentCtlBalloonEx *This,__LONG32 *ForeColor);
      HRESULT (WINAPI *get_BackColor)(IAgentCtlBalloonEx *This,__LONG32 *BackColor);
      HRESULT (WINAPI *get_BorderColor)(IAgentCtlBalloonEx *This,__LONG32 *BorderColor);
      HRESULT (WINAPI *put_Visible)(IAgentCtlBalloonEx *This,VARIANT_BOOL Visible);
      HRESULT (WINAPI *get_Visible)(IAgentCtlBalloonEx *This,VARIANT_BOOL *Visible);
      HRESULT (WINAPI *put_FontName)(IAgentCtlBalloonEx *This,BSTR FontName);
      HRESULT (WINAPI *put_FontSize)(IAgentCtlBalloonEx *This,__LONG32 FontSize);
      HRESULT (WINAPI *put_FontCharSet)(IAgentCtlBalloonEx *This,short FontCharSet);
      HRESULT (WINAPI *get_FontCharSet)(IAgentCtlBalloonEx *This,short *FontCharSet);
      HRESULT (WINAPI *put_Style)(IAgentCtlBalloonEx *This,__LONG32 Style);
      HRESULT (WINAPI *get_Style)(IAgentCtlBalloonEx *This,__LONG32 *Style);
    END_INTERFACE
  } IAgentCtlBalloonExVtbl;
  struct IAgentCtlBalloonEx {
    CONST_VTBL struct IAgentCtlBalloonExVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IAgentCtlBalloonEx_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAgentCtlBalloonEx_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAgentCtlBalloonEx_Release(This) (This)->lpVtbl->Release(This)
#define IAgentCtlBalloonEx_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IAgentCtlBalloonEx_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IAgentCtlBalloonEx_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IAgentCtlBalloonEx_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IAgentCtlBalloonEx_get_Enabled(This,Enabled) (This)->lpVtbl->get_Enabled(This,Enabled)
#define IAgentCtlBalloonEx_get_NumberOfLines(This,Lines) (This)->lpVtbl->get_NumberOfLines(This,Lines)
#define IAgentCtlBalloonEx_get_CharsPerLine(This,CharsPerLine) (This)->lpVtbl->get_CharsPerLine(This,CharsPerLine)
#define IAgentCtlBalloonEx_get_FontName(This,FontName) (This)->lpVtbl->get_FontName(This,FontName)
#define IAgentCtlBalloonEx_get_FontSize(This,FontSize) (This)->lpVtbl->get_FontSize(This,FontSize)
#define IAgentCtlBalloonEx_get_FontBold(This,FontBold) (This)->lpVtbl->get_FontBold(This,FontBold)
#define IAgentCtlBalloonEx_get_FontItalic(This,FontItalic) (This)->lpVtbl->get_FontItalic(This,FontItalic)
#define IAgentCtlBalloonEx_get_FontStrikethru(This,FontStrikethru) (This)->lpVtbl->get_FontStrikethru(This,FontStrikethru)
#define IAgentCtlBalloonEx_get_FontUnderline(This,FontUnderline) (This)->lpVtbl->get_FontUnderline(This,FontUnderline)
#define IAgentCtlBalloonEx_get_ForeColor(This,ForeColor) (This)->lpVtbl->get_ForeColor(This,ForeColor)
#define IAgentCtlBalloonEx_get_BackColor(This,BackColor) (This)->lpVtbl->get_BackColor(This,BackColor)
#define IAgentCtlBalloonEx_get_BorderColor(This,BorderColor) (This)->lpVtbl->get_BorderColor(This,BorderColor)
#define IAgentCtlBalloonEx_put_Visible(This,Visible) (This)->lpVtbl->put_Visible(This,Visible)
#define IAgentCtlBalloonEx_get_Visible(This,Visible) (This)->lpVtbl->get_Visible(This,Visible)
#define IAgentCtlBalloonEx_put_FontName(This,FontName) (This)->lpVtbl->put_FontName(This,FontName)
#define IAgentCtlBalloonEx_put_FontSize(This,FontSize) (This)->lpVtbl->put_FontSize(This,FontSize)
#define IAgentCtlBalloonEx_put_FontCharSet(This,FontCharSet) (This)->lpVtbl->put_FontCharSet(This,FontCharSet)
#define IAgentCtlBalloonEx_get_FontCharSet(This,FontCharSet) (This)->lpVtbl->get_FontCharSet(This,FontCharSet)
#define IAgentCtlBalloonEx_put_Style(This,Style) (This)->lpVtbl->put_Style(This,Style)
#define IAgentCtlBalloonEx_get_Style(This,Style) (This)->lpVtbl->get_Style(This,Style)
#endif
#endif
  HRESULT WINAPI IAgentCtlBalloonEx_put_Style_Proxy(IAgentCtlBalloonEx *This,__LONG32 Style);
  void __RPC_STUB IAgentCtlBalloonEx_put_Style_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlBalloonEx_get_Style_Proxy(IAgentCtlBalloonEx *This,__LONG32 *Style);
  void __RPC_STUB IAgentCtlBalloonEx_get_Style_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IAgentCtlCommand_INTERFACE_DEFINED__
#define __IAgentCtlCommand_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IAgentCtlCommand;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IAgentCtlCommand : public IDispatch {
  public:
    virtual HRESULT WINAPI get_Voice(BSTR *Voice) = 0;
    virtual HRESULT WINAPI put_Voice(BSTR Voice) = 0;
    virtual HRESULT WINAPI get_Caption(BSTR *Caption) = 0;
    virtual HRESULT WINAPI put_Caption(BSTR Caption) = 0;
    virtual HRESULT WINAPI get_Enabled(VARIANT_BOOL *Enabled) = 0;
    virtual HRESULT WINAPI put_Enabled(VARIANT_BOOL Enabled) = 0;
    virtual HRESULT WINAPI get_Visible(VARIANT_BOOL *Visible) = 0;
    virtual HRESULT WINAPI put_Visible(VARIANT_BOOL Visible) = 0;
    virtual HRESULT WINAPI get_Confidence(__LONG32 *Confidence) = 0;
    virtual HRESULT WINAPI put_Confidence(__LONG32 Confidence) = 0;
    virtual HRESULT WINAPI get_ConfidenceText(BSTR *Text) = 0;
    virtual HRESULT WINAPI put_ConfidenceText(BSTR Text) = 0;
  };
#else
  typedef struct IAgentCtlCommandVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IAgentCtlCommand *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IAgentCtlCommand *This);
      ULONG (WINAPI *Release)(IAgentCtlCommand *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IAgentCtlCommand *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IAgentCtlCommand *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IAgentCtlCommand *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IAgentCtlCommand *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Voice)(IAgentCtlCommand *This,BSTR *Voice);
      HRESULT (WINAPI *put_Voice)(IAgentCtlCommand *This,BSTR Voice);
      HRESULT (WINAPI *get_Caption)(IAgentCtlCommand *This,BSTR *Caption);
      HRESULT (WINAPI *put_Caption)(IAgentCtlCommand *This,BSTR Caption);
      HRESULT (WINAPI *get_Enabled)(IAgentCtlCommand *This,VARIANT_BOOL *Enabled);
      HRESULT (WINAPI *put_Enabled)(IAgentCtlCommand *This,VARIANT_BOOL Enabled);
      HRESULT (WINAPI *get_Visible)(IAgentCtlCommand *This,VARIANT_BOOL *Visible);
      HRESULT (WINAPI *put_Visible)(IAgentCtlCommand *This,VARIANT_BOOL Visible);
      HRESULT (WINAPI *get_Confidence)(IAgentCtlCommand *This,__LONG32 *Confidence);
      HRESULT (WINAPI *put_Confidence)(IAgentCtlCommand *This,__LONG32 Confidence);
      HRESULT (WINAPI *get_ConfidenceText)(IAgentCtlCommand *This,BSTR *Text);
      HRESULT (WINAPI *put_ConfidenceText)(IAgentCtlCommand *This,BSTR Text);
    END_INTERFACE
  } IAgentCtlCommandVtbl;
  struct IAgentCtlCommand {
    CONST_VTBL struct IAgentCtlCommandVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IAgentCtlCommand_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAgentCtlCommand_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAgentCtlCommand_Release(This) (This)->lpVtbl->Release(This)
#define IAgentCtlCommand_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IAgentCtlCommand_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IAgentCtlCommand_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IAgentCtlCommand_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IAgentCtlCommand_get_Voice(This,Voice) (This)->lpVtbl->get_Voice(This,Voice)
#define IAgentCtlCommand_put_Voice(This,Voice) (This)->lpVtbl->put_Voice(This,Voice)
#define IAgentCtlCommand_get_Caption(This,Caption) (This)->lpVtbl->get_Caption(This,Caption)
#define IAgentCtlCommand_put_Caption(This,Caption) (This)->lpVtbl->put_Caption(This,Caption)
#define IAgentCtlCommand_get_Enabled(This,Enabled) (This)->lpVtbl->get_Enabled(This,Enabled)
#define IAgentCtlCommand_put_Enabled(This,Enabled) (This)->lpVtbl->put_Enabled(This,Enabled)
#define IAgentCtlCommand_get_Visible(This,Visible) (This)->lpVtbl->get_Visible(This,Visible)
#define IAgentCtlCommand_put_Visible(This,Visible) (This)->lpVtbl->put_Visible(This,Visible)
#define IAgentCtlCommand_get_Confidence(This,Confidence) (This)->lpVtbl->get_Confidence(This,Confidence)
#define IAgentCtlCommand_put_Confidence(This,Confidence) (This)->lpVtbl->put_Confidence(This,Confidence)
#define IAgentCtlCommand_get_ConfidenceText(This,Text) (This)->lpVtbl->get_ConfidenceText(This,Text)
#define IAgentCtlCommand_put_ConfidenceText(This,Text) (This)->lpVtbl->put_ConfidenceText(This,Text)
#endif
#endif
  HRESULT WINAPI IAgentCtlCommand_get_Voice_Proxy(IAgentCtlCommand *This,BSTR *Voice);
  void __RPC_STUB IAgentCtlCommand_get_Voice_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_put_Voice_Proxy(IAgentCtlCommand *This,BSTR Voice);
  void __RPC_STUB IAgentCtlCommand_put_Voice_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_get_Caption_Proxy(IAgentCtlCommand *This,BSTR *Caption);
  void __RPC_STUB IAgentCtlCommand_get_Caption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_put_Caption_Proxy(IAgentCtlCommand *This,BSTR Caption);
  void __RPC_STUB IAgentCtlCommand_put_Caption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_get_Enabled_Proxy(IAgentCtlCommand *This,VARIANT_BOOL *Enabled);
  void __RPC_STUB IAgentCtlCommand_get_Enabled_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_put_Enabled_Proxy(IAgentCtlCommand *This,VARIANT_BOOL Enabled);
  void __RPC_STUB IAgentCtlCommand_put_Enabled_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_get_Visible_Proxy(IAgentCtlCommand *This,VARIANT_BOOL *Visible);
  void __RPC_STUB IAgentCtlCommand_get_Visible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_put_Visible_Proxy(IAgentCtlCommand *This,VARIANT_BOOL Visible);
  void __RPC_STUB IAgentCtlCommand_put_Visible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_get_Confidence_Proxy(IAgentCtlCommand *This,__LONG32 *Confidence);
  void __RPC_STUB IAgentCtlCommand_get_Confidence_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_put_Confidence_Proxy(IAgentCtlCommand *This,__LONG32 Confidence);
  void __RPC_STUB IAgentCtlCommand_put_Confidence_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_get_ConfidenceText_Proxy(IAgentCtlCommand *This,BSTR *Text);
  void __RPC_STUB IAgentCtlCommand_get_ConfidenceText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommand_put_ConfidenceText_Proxy(IAgentCtlCommand *This,BSTR Text);
  void __RPC_STUB IAgentCtlCommand_put_ConfidenceText_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IAgentCtlCommandEx_INTERFACE_DEFINED__
#define __IAgentCtlCommandEx_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IAgentCtlCommandEx;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IAgentCtlCommandEx : public IAgentCtlCommand {
  public:
    virtual HRESULT WINAPI put_HelpContextID(__LONG32 ID) = 0;
    virtual HRESULT WINAPI get_HelpContextID(__LONG32 *ID) = 0;
    virtual HRESULT WINAPI put_VoiceCaption(BSTR VoiceCaption) = 0;
    virtual HRESULT WINAPI get_VoiceCaption(BSTR *VoiceCaption) = 0;
  };
#else
  typedef struct IAgentCtlCommandExVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IAgentCtlCommandEx *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IAgentCtlCommandEx *This);
      ULONG (WINAPI *Release)(IAgentCtlCommandEx *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IAgentCtlCommandEx *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IAgentCtlCommandEx *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IAgentCtlCommandEx *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IAgentCtlCommandEx *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Voice)(IAgentCtlCommandEx *This,BSTR *Voice);
      HRESULT (WINAPI *put_Voice)(IAgentCtlCommandEx *This,BSTR Voice);
      HRESULT (WINAPI *get_Caption)(IAgentCtlCommandEx *This,BSTR *Caption);
      HRESULT (WINAPI *put_Caption)(IAgentCtlCommandEx *This,BSTR Caption);
      HRESULT (WINAPI *get_Enabled)(IAgentCtlCommandEx *This,VARIANT_BOOL *Enabled);
      HRESULT (WINAPI *put_Enabled)(IAgentCtlCommandEx *This,VARIANT_BOOL Enabled);
      HRESULT (WINAPI *get_Visible)(IAgentCtlCommandEx *This,VARIANT_BOOL *Visible);
      HRESULT (WINAPI *put_Visible)(IAgentCtlCommandEx *This,VARIANT_BOOL Visible);
      HRESULT (WINAPI *get_Confidence)(IAgentCtlCommandEx *This,__LONG32 *Confidence);
      HRESULT (WINAPI *put_Confidence)(IAgentCtlCommandEx *This,__LONG32 Confidence);
      HRESULT (WINAPI *get_ConfidenceText)(IAgentCtlCommandEx *This,BSTR *Text);
      HRESULT (WINAPI *put_ConfidenceText)(IAgentCtlCommandEx *This,BSTR Text);
      HRESULT (WINAPI *put_HelpContextID)(IAgentCtlCommandEx *This,__LONG32 ID);
      HRESULT (WINAPI *get_HelpContextID)(IAgentCtlCommandEx *This,__LONG32 *ID);
      HRESULT (WINAPI *put_VoiceCaption)(IAgentCtlCommandEx *This,BSTR VoiceCaption);
      HRESULT (WINAPI *get_VoiceCaption)(IAgentCtlCommandEx *This,BSTR *VoiceCaption);
    END_INTERFACE
  } IAgentCtlCommandExVtbl;
  struct IAgentCtlCommandEx {
    CONST_VTBL struct IAgentCtlCommandExVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IAgentCtlCommandEx_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAgentCtlCommandEx_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAgentCtlCommandEx_Release(This) (This)->lpVtbl->Release(This)
#define IAgentCtlCommandEx_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IAgentCtlCommandEx_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IAgentCtlCommandEx_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IAgentCtlCommandEx_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IAgentCtlCommandEx_get_Voice(This,Voice) (This)->lpVtbl->get_Voice(This,Voice)
#define IAgentCtlCommandEx_put_Voice(This,Voice) (This)->lpVtbl->put_Voice(This,Voice)
#define IAgentCtlCommandEx_get_Caption(This,Caption) (This)->lpVtbl->get_Caption(This,Caption)
#define IAgentCtlCommandEx_put_Caption(This,Caption) (This)->lpVtbl->put_Caption(This,Caption)
#define IAgentCtlCommandEx_get_Enabled(This,Enabled) (This)->lpVtbl->get_Enabled(This,Enabled)
#define IAgentCtlCommandEx_put_Enabled(This,Enabled) (This)->lpVtbl->put_Enabled(This,Enabled)
#define IAgentCtlCommandEx_get_Visible(This,Visible) (This)->lpVtbl->get_Visible(This,Visible)
#define IAgentCtlCommandEx_put_Visible(This,Visible) (This)->lpVtbl->put_Visible(This,Visible)
#define IAgentCtlCommandEx_get_Confidence(This,Confidence) (This)->lpVtbl->get_Confidence(This,Confidence)
#define IAgentCtlCommandEx_put_Confidence(This,Confidence) (This)->lpVtbl->put_Confidence(This,Confidence)
#define IAgentCtlCommandEx_get_ConfidenceText(This,Text) (This)->lpVtbl->get_ConfidenceText(This,Text)
#define IAgentCtlCommandEx_put_ConfidenceText(This,Text) (This)->lpVtbl->put_ConfidenceText(This,Text)
#define IAgentCtlCommandEx_put_HelpContextID(This,ID) (This)->lpVtbl->put_HelpContextID(This,ID)
#define IAgentCtlCommandEx_get_HelpContextID(This,ID) (This)->lpVtbl->get_HelpContextID(This,ID)
#define IAgentCtlCommandEx_put_VoiceCaption(This,VoiceCaption) (This)->lpVtbl->put_VoiceCaption(This,VoiceCaption)
#define IAgentCtlCommandEx_get_VoiceCaption(This,VoiceCaption) (This)->lpVtbl->get_VoiceCaption(This,VoiceCaption)
#endif
#endif
  HRESULT WINAPI IAgentCtlCommandEx_put_HelpContextID_Proxy(IAgentCtlCommandEx *This,__LONG32 ID);
  void __RPC_STUB IAgentCtlCommandEx_put_HelpContextID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommandEx_get_HelpContextID_Proxy(IAgentCtlCommandEx *This,__LONG32 *ID);
  void __RPC_STUB IAgentCtlCommandEx_get_HelpContextID_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommandEx_put_VoiceCaption_Proxy(IAgentCtlCommandEx *This,BSTR VoiceCaption);
  void __RPC_STUB IAgentCtlCommandEx_put_VoiceCaption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommandEx_get_VoiceCaption_Proxy(IAgentCtlCommandEx *This,BSTR *VoiceCaption);
  void __RPC_STUB IAgentCtlCommandEx_get_VoiceCaption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IAgentCtlCommands_INTERFACE_DEFINED__
#define __IAgentCtlCommands_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IAgentCtlCommands;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IAgentCtlCommands : public IDispatch {
  public:
    virtual HRESULT WINAPI get_Item(BSTR Name,IAgentCtlCommandEx **Item) = 0;
    virtual HRESULT WINAPI Command(BSTR Name,IAgentCtlCommandEx **Item) = 0;
    virtual HRESULT WINAPI get_Count(__LONG32 *Count) = 0;
    virtual HRESULT WINAPI get_Caption(BSTR *Caption) = 0;
    virtual HRESULT WINAPI put_Caption(BSTR Caption) = 0;
    virtual HRESULT WINAPI get_Voice(BSTR *Voice) = 0;
    virtual HRESULT WINAPI put_Voice(BSTR Voice) = 0;
    virtual HRESULT WINAPI get_Visible(VARIANT_BOOL *Visible) = 0;
    virtual HRESULT WINAPI put_Visible(VARIANT_BOOL Visible) = 0;
    virtual HRESULT WINAPI get_Enum(IUnknown **ppunkEnum) = 0;
    virtual HRESULT WINAPI Add(BSTR Name,VARIANT Caption,VARIANT Voice,VARIANT Enabled,VARIANT Visible,IAgentCtlCommand **Command) = 0;
    virtual HRESULT WINAPI Insert(BSTR Name,BSTR RefName,VARIANT Before,VARIANT Caption,VARIANT Voice,VARIANT Enabled,VARIANT Visible,IAgentCtlCommand **Command) = 0;
    virtual HRESULT WINAPI Remove(BSTR Name) = 0;
    virtual HRESULT WINAPI RemoveAll(void) = 0;
  };
#else
  typedef struct IAgentCtlCommandsVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IAgentCtlCommands *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IAgentCtlCommands *This);
      ULONG (WINAPI *Release)(IAgentCtlCommands *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IAgentCtlCommands *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IAgentCtlCommands *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IAgentCtlCommands *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IAgentCtlCommands *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Item)(IAgentCtlCommands *This,BSTR Name,IAgentCtlCommandEx **Item);
      HRESULT (WINAPI *Command)(IAgentCtlCommands *This,BSTR Name,IAgentCtlCommandEx **Item);
      HRESULT (WINAPI *get_Count)(IAgentCtlCommands *This,__LONG32 *Count);
      HRESULT (WINAPI *get_Caption)(IAgentCtlCommands *This,BSTR *Caption);
      HRESULT (WINAPI *put_Caption)(IAgentCtlCommands *This,BSTR Caption);
      HRESULT (WINAPI *get_Voice)(IAgentCtlCommands *This,BSTR *Voice);
      HRESULT (WINAPI *put_Voice)(IAgentCtlCommands *This,BSTR Voice);
      HRESULT (WINAPI *get_Visible)(IAgentCtlCommands *This,VARIANT_BOOL *Visible);
      HRESULT (WINAPI *put_Visible)(IAgentCtlCommands *This,VARIANT_BOOL Visible);
      HRESULT (WINAPI *get_Enum)(IAgentCtlCommands *This,IUnknown **ppunkEnum);
      HRESULT (WINAPI *Add)(IAgentCtlCommands *This,BSTR Name,VARIANT Caption,VARIANT Voice,VARIANT Enabled,VARIANT Visible,IAgentCtlCommand **Command);
      HRESULT (WINAPI *Insert)(IAgentCtlCommands *This,BSTR Name,BSTR RefName,VARIANT Before,VARIANT Caption,VARIANT Voice,VARIANT Enabled,VARIANT Visible,IAgentCtlCommand **Command);
      HRESULT (WINAPI *Remove)(IAgentCtlCommands *This,BSTR Name);
      HRESULT (WINAPI *RemoveAll)(IAgentCtlCommands *This);
    END_INTERFACE
  } IAgentCtlCommandsVtbl;
  struct IAgentCtlCommands {
    CONST_VTBL struct IAgentCtlCommandsVtbl *lpVtbl;
  };
#ifdef COBJMACROS
#define IAgentCtlCommands_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAgentCtlCommands_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAgentCtlCommands_Release(This) (This)->lpVtbl->Release(This)
#define IAgentCtlCommands_GetTypeInfoCount(This,pctinfo) (This)->lpVtbl->GetTypeInfoCount(This,pctinfo)
#define IAgentCtlCommands_GetTypeInfo(This,iTInfo,lcid,ppTInfo) (This)->lpVtbl->GetTypeInfo(This,iTInfo,lcid,ppTInfo)
#define IAgentCtlCommands_GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId) (This)->lpVtbl->GetIDsOfNames(This,riid,rgszNames,cNames,lcid,rgDispId)
#define IAgentCtlCommands_Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr) (This)->lpVtbl->Invoke(This,dispIdMember,riid,lcid,wFlags,pDispParams,pVarResult,pExcepInfo,puArgErr)
#define IAgentCtlCommands_get_Item(This,Name,Item) (This)->lpVtbl->get_Item(This,Name,Item)
#define IAgentCtlCommands_Command(This,Name,Item) (This)->lpVtbl->Command(This,Name,Item)
#define IAgentCtlCommands_get_Count(This,Count) (This)->lpVtbl->get_Count(This,Count)
#define IAgentCtlCommands_get_Caption(This,Caption) (This)->lpVtbl->get_Caption(This,Caption)
#define IAgentCtlCommands_put_Caption(This,Caption) (This)->lpVtbl->put_Caption(This,Caption)
#define IAgentCtlCommands_get_Voice(This,Voice) (This)->lpVtbl->get_Voice(This,Voice)
#define IAgentCtlCommands_put_Voice(This,Voice) (This)->lpVtbl->put_Voice(This,Voice)
#define IAgentCtlCommands_get_Visible(This,Visible) (This)->lpVtbl->get_Visible(This,Visible)
#define IAgentCtlCommands_put_Visible(This,Visible) (This)->lpVtbl->put_Visible(This,Visible)
#define IAgentCtlCommands_get_Enum(This,ppunkEnum) (This)->lpVtbl->get_Enum(This,ppunkEnum)
#define IAgentCtlCommands_Add(This,Name,Caption,Voice,Enabled,Visible,Command) (This)->lpVtbl->Add(This,Name,Caption,Voice,Enabled,Visible,Command)
#define IAgentCtlCommands_Insert(This,Name,RefName,Before,Caption,Voice,Enabled,Visible,Command) (This)->lpVtbl->Insert(This,Name,RefName,Before,Caption,Voice,Enabled,Visible,Command)
#define IAgentCtlCommands_Remove(This,Name) (This)->lpVtbl->Remove(This,Name)
#define IAgentCtlCommands_RemoveAll(This) (This)->lpVtbl->RemoveAll(This)
#endif
#endif
  HRESULT WINAPI IAgentCtlCommands_get_Item_Proxy(IAgentCtlCommands *This,BSTR Name,IAgentCtlCommandEx **Item);
  void __RPC_STUB IAgentCtlCommands_get_Item_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_Command_Proxy(IAgentCtlCommands *This,BSTR Name,IAgentCtlCommandEx **Item);
  void __RPC_STUB IAgentCtlCommands_Command_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_get_Count_Proxy(IAgentCtlCommands *This,__LONG32 *Count);
  void __RPC_STUB IAgentCtlCommands_get_Count_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_get_Caption_Proxy(IAgentCtlCommands *This,BSTR *Caption);
  void __RPC_STUB IAgentCtlCommands_get_Caption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_put_Caption_Proxy(IAgentCtlCommands *This,BSTR Caption);
  void __RPC_STUB IAgentCtlCommands_put_Caption_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_get_Voice_Proxy(IAgentCtlCommands *This,BSTR *Voice);
  void __RPC_STUB IAgentCtlCommands_get_Voice_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_put_Voice_Proxy(IAgentCtlCommands *This,BSTR Voice);
  void __RPC_STUB IAgentCtlCommands_put_Voice_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_get_Visible_Proxy(IAgentCtlCommands *This,VARIANT_BOOL *Visible);
  void __RPC_STUB IAgentCtlCommands_get_Visible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_put_Visible_Proxy(IAgentCtlCommands *This,VARIANT_BOOL Visible);
  void __RPC_STUB IAgentCtlCommands_put_Visible_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_get_Enum_Proxy(IAgentCtlCommands *This,IUnknown **ppunkEnum);
  void __RPC_STUB IAgentCtlCommands_get_Enum_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_Add_Proxy(IAgentCtlCommands *This,BSTR Name,VARIANT Caption,VARIANT Voice,VARIANT Enabled,VARIANT Visible,IAgentCtlCommand **Command);
  void __RPC_STUB IAgentCtlCommands_Add_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_Insert_Proxy(IAgentCtlCommands *This,BSTR Name,BSTR RefName,VARIANT Before,VARIANT Caption,VARIANT Voice,VARIANT Enabled,VARIANT Visible,IAgentCtlCommand **Command);
  void __RPC_STUB IAgentCtlCommands_Insert_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_Remove_Proxy(IAgentCtlCommands *This,BSTR Name);
  void __RPC_STUB IAgentCtlCommands_Remove_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
  HRESULT WINAPI IAgentCtlCommands_RemoveAll_Proxy(IAgentCtlCommands *This);
  void __RPC_STUB IAgentCtlCommands_RemoveAll_Stub(IRpcStubBuffer *This,IRpcChannelBuffer *_pRpcChannelBuffer,PRPC_MESSAGE _pRpcMessage,DWORD *_pdwStubPhase);
#endif

#ifndef __IAgentCtlCommandsEx_INTERFACE_DEFINED__
#define __IAgentCtlCommandsEx_INTERFACE_DEFINED__
  EXTERN_C const IID IID_IAgentCtlCommandsEx;
#if defined(__cplusplus) && !defined(CINTERFACE)
  struct IAgentCtlCommandsEx : public IAgentCtlCommands {
  public:
    virtual HRESULT WINAPI put_DefaultCommand(BSTR Name) = 0;
    virtual HRESULT WINAPI get_DefaultCommand(BSTR *Name) = 0;
    virtual HRESULT WINAPI put_HelpContextID(__LONG32 ID) = 0;
    virtual HRESULT WINAPI get_HelpContextID(__LONG32 *ID) = 0;
    virtual HRESULT WINAPI put_FontName(BSTR FontName) = 0;
    virtual HRESULT WINAPI get_FontName(BSTR *FontName) = 0;
    virtual HRESULT WINAPI get_FontSize(__LONG32 *FontSize) = 0;
    virtual HRESULT WINAPI put_FontSize(__LONG32 FontSize) = 0;
    virtual HRESULT WINAPI put_VoiceCaption(BSTR VoiceCaption) = 0;
    virtual HRESULT WINAPI get_VoiceCaption(BSTR *VoiceCaption) = 0;
    virtual HRESULT WINAPI put_GlobalVoiceCommandsEnabled(VARIANT_BOOL Enable) = 0;
    virtual HRESULT WINAPI get_GlobalVoiceCommandsEnabled(VARIANT_BOOL *Enable) = 0;
  };
#else
  typedef struct IAgentCtlCommandsExVtbl {
    BEGIN_INTERFACE
      HRESULT (WINAPI *QueryInterface)(IAgentCtlCommandsEx *This,REFIID riid,void **ppvObject);
      ULONG (WINAPI *AddRef)(IAgentCtlCommandsEx *This);
      ULONG (WINAPI *Release)(IAgentCtlCommandsEx *This);
      HRESULT (WINAPI *GetTypeInfoCount)(IAgentCtlCommandsEx *This,UINT *pctinfo);
      HRESULT (WINAPI *GetTypeInfo)(IAgentCtlCommandsEx *This,UINT iTInfo,LCID lcid,ITypeInfo **ppTInfo);
      HRESULT (WINAPI *GetIDsOfNames)(IAgentCtlCommandsEx *This,REFIID riid,LPOLESTR *rgszNames,UINT cNames,LCID lcid,DISPID *rgDispId);
      HRESULT (WINAPI *Invoke)(IAgentCtlCommandsEx *This,DISPID dispIdMember,REFIID riid,LCID lcid,WORD wFlags,DISPPARAMS *pDispParams,VARIANT *pVarResult,EXCEPINFO *pExcepInfo,UINT *puArgErr);
      HRESULT (WINAPI *get_Item)(IAgentCtlCommandsEx *This,BSTR Name,IAgentCtlCommandEx **Item);
      HRESULT (WINAPI *Command)(IAgentCtlCommandsEx *This,BSTR Name,IAgentCtlCommandEx **Item);
      HRESULT (WINAPI *get_Count)(IAgentCtlCommandsEx *This,__LONG32 *Count);
      HRESULT (WINAPI *get_Caption)(IAgentCtlCommandsEx *This,BSTR *Caption);
      HRESULT (WINAPI *put_Caption)(IAgentCtlCommandsEx *This,BSTR Caption);
      HRESULT (WINAPI *get_Voice)(IAgentCtlCommandsEx *This,BSTR *Voice);
      HRESULT (WINAPI *put_Voice)(IAgentCtlCommandsEx *This,BSTR Voice);
      HRESULT (WINAPI *get_Visible)(IAgentCtlCommandsEx *This,VARIANT_BOOL *Visible);
      HRESULT (WINAPI *put_Visible)(IAgentCtlCommandsEx *This,VARIANT_BOOL Visible);
      HRESULT (WINAPI *get_Enum)(IAgentCtlCommandsEx *This,IUnknown **ppunkEnum);
      HRESULT (WINAPI *Add)(IAgentCtlCommandsEx *This,BSTR Name,VARIANT Caption,VARIANT Voice,VARIANT Enabled,VARIANT Visible,IAgentCtlCommand **Command);
      HRESULT (WINAPI *Insert)(IAgentCtlCommandsEx *This,BSTR Name,BSTR RefName,VARIANT Before,VARIANT Caption,VARIANT Voice,VARIANT Enabled,VARIANT Visible,IAgentCtlCommand **Command);
      HRESULT (WINAPI *Remove)(IAgentCtlCommandsEx *This,BSTR Name);
      HRESULT (WINAPI *RemoveAll)(IAgentCtlCommandsEx *This);
      HRESULT (WINAPI *put_DefaultCommand)(IAgentCtlCommandsEx *This,BSTR Name);
      HRESULT (WINAP