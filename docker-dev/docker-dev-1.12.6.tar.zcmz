 need new habits. It's
easy to program Unicode capable software, but it does require discipline to do
it right.
.PP
There's a lot to know about character sets, and text encodings. It's probably
best to spend a full day learning all this, but the basics can be learned in
minutes.
.PP
These are not the very basics, though. It is assumed that you already
know the difference between bytes and characters, and realise (and accept!)
that there are many different character sets and encodings, and that your
program has to be explicit about them. Recommended reading is \*(L"The Absolute
Minimum Every Software Developer Absolutely, Positively Must Know About Unicode
and Character Sets (No Excuses!)\*(R" by Joel Spolsky, at
<http://joelonsoftware.com/articles/Unicode.html>.
.PP
This tutorial speaks in rather absolute terms, and provides only a limited view
of the wealth of character string related features that Perl has to offer. For
most projects, this information will probably suffice.
.SS "Definitions"
.IX Subsection "Definitions"
It's important to set a few things straight first. This is the most important
part of this tutorial. This view may conflict with other information that you
may have found on the web, but that's mostly because many sources are wrong.
.PP
You may have to re-read this entire section a few times...
.PP
\fIUnicode\fR
.IX Subsection "Unicode"
.PP
\&\fBUnicode\fR is a character set with room for lots of characters. The ordinal
value of a character is called a \fBcode point\fR.   (But in practice, the
distinction between code point and character is blurred, so the terms often
are used interchangeably.)
.PP
There are many, many code points, but computers work with bytes, and a byte has
room for only 256 values.  Unicode has many more characters than that,
so you need a method to make these accessible.
.PP
Unicode is encoded using several competing encodings, of which \s-1UTF\-8\s0 is the
most used. In a Unicode encoding, multiple subsequent bytes can be used to
store a single code point, or simply: character.
.PP
\fI\s-1UTF\-8\s0\fR
.IX Subsection "UTF-8"
.PP
\&\fB\s-1UTF\-8\s0\fR is a Unicode encoding. Many people think that Unicode and \s-1UTF\-8\s0 are
the same thing, but they're not. There are more Unicode encodings, but much of
the world has standardized on \s-1UTF\-8\s0.
.PP
\&\s-1UTF\-8\s0 treats the first 128 codepoints, 0..127, the same as \s-1ASCII\s0. They take
only one byte per character. All other characters are encoded as two or more
(up to six) bytes using a complex scheme. Fortunately, Perl handles this for
us, so we don't have to worry about this.
.PP
\fIText strings (character strings)\fR
.IX Subsection "Text strings (character strings)"
.PP
\&\fBText strings\fR, or \fBcharacter strings\fR are made of characters. Bytes are
irrelevant here, and so are encodings. Each character is just that: the
character.
.PP
On a text string, you would do things like:
.PP
.Vb 4
\&    $text =~ s/foo/bar/;
\&    if ($string =~ /^\ed+$/) { ... }
\&    $text = ucfirst $text;
\&    my $character_count = length $text;
.Ve
.PP
The value of a character (\f(CW\*(C`ord\*(C'\fR, \f(CW\*(C`chr\*(C'\fR) is the corresponding Unicode code
point.
.PP
\fIBinary strings (byte strings)\fR
.IX Subsection "Binary strings (byte strings)"
.PP
\&\fBBinary strings\fR, or \fBbyte strings\fR are made of bytes. Here, you don't have
characters, just bytes. All communication with the outside world (anything
outside of your current Perl process) is done in binary.
.PP
On a binary string, you would do things like:
.PP
.Vb 4
\&    my (@length_content) = unpack "(V/a)*", $binary;
\&    $binary =~ s/\ex00\ex0F/\exFF\exF0/;  # for the brave :)
\&    print {$fh} $binary;
\&    my $byte_count = length $binary;
.Ve
.PP
\fIEncoding\fR
.IX Subsection "Encoding"
.PP
\&\fBEncoding\fR (as a verb) is the conversion from \fItext\fR to \fIbinary\fR. To encode,
you have to supply the target encoding, for example \f(CW\*(C`iso\-8859\-1\*(C'\fR or \f(CW\*(C`UTF\-8\*(C'\fR.
Some encodings, like the \f(CW\*(C`iso\-8859\*(C'\fR (\*(L"latin\*(R") range, do not support the full
Unicode standard; characters that can't be represented are lost in the
conversion.
.PP
\fIDecoding\fR
.IX Subsection "Decoding"
.PP
\&\fBDecoding\fR is the conversion from \fIbinary\fR to \fItext\fR. To decode, you have to
know what encoding was used during the encoding phase. And most of all, it must
be something decodable. It doesn't make much sense to decode a \s-1PNG\s0 image into a
text string.
.PP
\fIInternal format\fR
.IX Subsection "Internal format"
.PP
Perl has an \fBinternal format\fR, an encoding that it uses to encode text strings
so it can store them in memory. All text strings are in this internal format.
In fact, text strings are never in any other format!
.PP
You shouldn't worry about what this format is, because conversion is
automatically done when you decode or encode.
.SS "Your new toolkit"
.IX Subsection "Your new toolkit"
Add to your standard heading the following line:
.PP
.Vb 1
\&    use Encode qw(encode decode);
.Ve
.PP
Or, if you're lazy, just:
.PP
.Vb 1
\&    use Encode;
.Ve
.SS "I/O flow (the actual 5 minute tutorial)"
.IX Subsection "I/O flow (the actual 5 minute tutorial)"
The typical input/output flow of a program is:
.PP
.Vb 3
\&    1. Receive and decode
\&    2. Process
\&    3. Encode and output
.Ve
.PP
If your input is binary, and is supposed to remain binary, you shouldn't decode
it to a text string, of course. But in all other cases, you should decode it.
.PP
Decoding can't happen reliably if you don't know how the data was encoded. If
you get to choose, it's a good idea to standardize on \s-1UTF\-8\s0.
.PP
.Vb 3
\&    my $foo   = decode(\*(AqUTF\-8\*(Aq, get \*(Aqhttp://example.com/\*(Aq);
\&    my $bar   = decode(\*(AqISO\-8859\-1\*(Aq, readline STDIN);
\&    my $xyzzy = decode(\*(AqWindows\-1251\*(Aq, $cgi\->param(\*(Aqfoo\*(Aq));
.Ve
.PP
Processing happens as you knew before. The only difference is that you're now
using characters instead of bytes. That's very useful if you use things like
\&\f(CW\*(C`substr\*(C'\fR, or \f(CW\*(C`length\*(C'\fR.
.PP
It's important to realize that there are no bytes in a text string. Of course,
Perl has its internal encoding to store the string in memory, but ignore that.
If you have to do anything with the number of bytes, it's probably best to move
that part to step 3, just after you've encoded the string. Then you know
exactly how many bytes it will be in the destination string.
.PP
The syntax for encoding text strings to binary strings is as simple as decoding:
.PP
.Vb 1
\&    $body = encode(\*(AqUTF\-8\*(Aq, $body);
.Ve
.PP
If you needed to know the length of the string in bytes, now's the perfect time
for that. Because \f(CW$body\fR is now a byte string, \f(CW\*(C`length\*(C'\fR will report the
number of bytes, instead of the number of characters. The number of
characters is no longer known, because characters only exist in text strings.
.PP
.Vb 1
\&    my $byte_count = length $body;
.Ve
.PP
And if the protocol you're using supports a way of letting the recipient know
which character encoding you used, please help the receiving end by using that
feature! For example, E\-mail and \s-1HTTP\s0 support \s-1MIME\s0 headers, so you can use the
\&\f(CW\*(C`Content\-Type\*(C'\fR header. They can also have \f(CW\*(C`Content\-Length\*(C'\fR to indicate the
number of \fIbytes\fR, which is always a good idea to supply if the number is
known.
.PP
.Vb 2
\&    "Content\-Type: text/plain; charset=UTF\-8",
\&    "Content\-Length: $byte_count"
.Ve
.SH "SUMMARY"
.IX Header "SUMMARY"
Decode everything you receive, encode everything you send out. (If it's text
data.)
.SH "Q and A (or FAQ)"
.IX Header "Q and A (or FAQ)"
After reading this document, you ought to read perlunifaq too.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Johan Vromans from Squirrel Consultancy. His \s-1UTF\-8\s0 rants during the
Amsterdam Perl Mongers meetings got me interested and determined to find out
how to use character encodings in Perl in ways that don't break easily.
.PP
Thanks to Gerard Goossen from \s-1TTY\s0. His presentation \*(L"\s-1UTF\-8\s0 in the wild\*(R" (Dutch
Perl Workshop 2006) inspired me to publish my thoughts and write this tutorial.
.PP
Thanks to the people who asked about this kind of stuff in several Perl \s-1IRC\s0
channels, and have constantly reminded me that a simpler explanation was
needed.
.PP
Thanks to the people who reviewed this document for me, before it went public.
They are: Benjamin Smith, Jan-Pieter Cornet, Johan Vromans, Lukas Mai, Nathan
Gray.
.SH "AUTHOR"
.IX Header "AUTHOR"
Juerd Waalboer <#####@juerd.nl>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlunifaq, perlunicode, perluniintro, Encode
                                                                                                                                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlunitut5.18.1                             0100644 0001750 0001750 00000031430 12566207450 023467  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUNITUT 1"
.TH PERLUNITUT 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlunitut \- Perl Unicode Tutorial
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The days of just flinging strings around are over. It's well established that
modern programs need to be capable of communicating funny accented letters, and
things like euro symbols. This means that programmers need new habits. It's
easy to program Unicode capable software, but it does require discipline to do
it right.
.PP
There's a lot to know about character sets, and text encodings. It's probably
best to spend a full day learning all this, but the basics can be learned in
minutes.
.PP
These are not the very basics, though. It is assumed that you already
know the difference between bytes and characters, and realise (and accept!)
that there are many different character sets and encodings, and that your
program has to be explicit about them. Recommended reading is \*(L"The Absolute
Minimum Every Software Developer Absolutely, Positively Must Know About Unicode
and Character Sets (No Excuses!)\*(R" by Joel Spolsky, at
<http://joelonsoftware.com/articles/Unicode.html>.
.PP
This tutorial speaks in rather absolute terms, and provides only a limited view
of the wealth of character string related features that Perl has to offer. For
most projects, this information will probably suffice.
.SS "Definitions"
.IX Subsection "Definitions"
It's important to set a few things straight first. This is the most important
part of this tutorial. This view may conflict with other information that you
may have found on the web, but that's mostly because many sources are wrong.
.PP
You may have to re-read this entire section a few times...
.PP
\fIUnicode\fR
.IX Subsection "Unicode"
.PP
\&\fBUnicode\fR is a character set with room for lots of characters. The ordinal
value of a character is called a \fBcode point\fR.   (But in practice, the
distinction between code point and character is blurred, so the terms often
are used interchangeably.)
.PP
There are many, many code points, but computers work with bytes, and a byte has
room for only 256 values.  Unicode has many more characters than that,
so you need a method to make these accessible.
.PP
Unicode is encoded using several competing encodings, of which \s-1UTF\-8\s0 is the
most used. In a Unicode encoding, multiple subsequent bytes can be used to
store a single code point, or simply: character.
.PP
\fI\s-1UTF\-8\s0\fR
.IX Subsection "UTF-8"
.PP
\&\fB\s-1UTF\-8\s0\fR is a Unicode encoding. Many people think that Unicode and \s-1UTF\-8\s0 are
the same thing, but they're not. There are more Unicode encodings, but much of
the world has standardized on \s-1UTF\-8. \s0
.PP
\&\s-1UTF\-8\s0 treats the first 128 codepoints, 0..127, the same as \s-1ASCII.\s0 They take
only one byte per character. All other characters are encoded as two or more
(up to six) bytes using a complex scheme. Fortunately, Perl handles this for
us, so we don't have to worry about this.
.PP
\fIText strings (character strings)\fR
.IX Subsection "Text strings (character strings)"
.PP
\&\fBText strings\fR, or \fBcharacter strings\fR are made of characters. Bytes are
irrelevant here, and so are encodings. Each character is just that: the
character.
.PP
On a text string, you would do things like:
.PP
.Vb 4
\&    $text =~ s/foo/bar/;
\&    if ($string =~ /^\ed+$/) { ... }
\&    $text = ucfirst $text;
\&    my $character_count = length $text;
.Ve
.PP
The value of a character (\f(CW\*(C`ord\*(C'\fR, \f(CW\*(C`chr\*(C'\fR) is the corresponding Unicode code
point.
.PP
\fIBinary strings (byte strings)\fR
.IX Subsection "Binary strings (byte strings)"
.PP
\&\fBBinary strings\fR, or \fBbyte strings\fR are made of bytes. Here, you don't have
characters, just bytes. All communication with the outside world (anything
outside of your current Perl process) is done in binary.
.PP
On a binary string, you would do things like:
.PP
.Vb 4
\&    my (@length_content) = unpack "(V/a)*", $binary;
\&    $binary =~ s/\ex00\ex0F/\exFF\exF0/;  # for the brave :)
\&    print {$fh} $binary;
\&    my $byte_count = length $binary;
.Ve
.PP
\fIEncoding\fR
.IX Subsection "Encoding"
.PP
\&\fBEncoding\fR (as a verb) is the conversion from \fItext\fR to \fIbinary\fR. To encode,
you have to supply the target encoding, for example \f(CW\*(C`iso\-8859\-1\*(C'\fR or \f(CW\*(C`UTF\-8\*(C'\fR.
Some encodings, like the \f(CW\*(C`iso\-8859\*(C'\fR (\*(L"latin\*(R") range, do not support the full
Unicode standard; characters that can't be represented are lost in the
conversion.
.PP
\fIDecoding\fR
.IX Subsection "Decoding"
.PP
\&\fBDecoding\fR is the conversion from \fIbinary\fR to \fItext\fR. To decode, you have to
know what encoding was used during the encoding phase. And most of all, it must
be something decodable. It doesn't make much sense to decode a \s-1PNG\s0 image into a
text string.
.PP
\fIInternal format\fR
.IX Subsection "Internal format"
.PP
Perl has an \fBinternal format\fR, an encoding that it uses to encode text strings
so it can store them in memory. All text strings are in this internal format.
In fact, text strings are never in any other format!
.PP
You shouldn't worry about what this format is, because conversion is
automatically done when you decode or encode.
.SS "Your new toolkit"
.IX Subsection "Your new toolkit"
Add to your standard heading the following line:
.PP
.Vb 1
\&    use Encode qw(encode decode);
.Ve
.PP
Or, if you're lazy, just:
.PP
.Vb 1
\&    use Encode;
.Ve
.SS "I/O flow (the actual 5 minute tutorial)"
.IX Subsection "I/O flow (the actual 5 minute tutorial)"
The typical input/output flow of a program is:
.PP
.Vb 3
\&    1. Receive and decode
\&    2. Process
\&    3. Encode and output
.Ve
.PP
If your input is binary, and is supposed to remain binary, you shouldn't decode
it to a text string, of course. But in all other cases, you should decode it.
.PP
Decoding can't happen reliably if you don't know how the data was encoded. If
you get to choose, it's a good idea to standardize on \s-1UTF\-8.\s0
.PP
.Vb 3
\&    my $foo   = decode(\*(AqUTF\-8\*(Aq, get \*(Aqhttp://example.com/\*(Aq);
\&    my $bar   = decode(\*(AqISO\-8859\-1\*(Aq, readline STDIN);
\&    my $xyzzy = decode(\*(AqWindows\-1251\*(Aq, $cgi\->param(\*(Aqfoo\*(Aq));
.Ve
.PP
Processing happens as you knew before. The only difference is that you're now
using characters instead of bytes. That's very useful if you use things like
\&\f(CW\*(C`substr\*(C'\fR, or \f(CW\*(C`length\*(C'\fR.
.PP
It's important to realize that there are no bytes in a text string. Of course,
Perl has its internal encoding to store the string in memory, but ignore that.
If you have to do anything with the number of bytes, it's probably best to move
that part to step 3, just after you've encoded the string. Then you know
exactly how many bytes it will be in the destination string.
.PP
The syntax for encoding text strings to binary strings is as simple as decoding:
.PP
.Vb 1
\&    $body = encode(\*(AqUTF\-8\*(Aq, $body);
.Ve
.PP
If you needed to know the length of the string in bytes, now's the perfect time
for that. Because \f(CW$body\fR is now a byte string, \f(CW\*(C`length\*(C'\fR will report the
number of bytes, instead of the number of characters. The number of
characters is no longer known, because characters only exist in text strings.
.PP
.Vb 1
\&    my $byte_count = length $body;
.Ve
.PP
And if the protocol you're using supports a way of letting the recipient know
which character encoding you used, please help the receiving end by using that
feature! For example, E\-mail and \s-1HTTP\s0 support \s-1MIME\s0 headers, so you can use the
\&\f(CW\*(C`Content\-Type\*(C'\fR header. They can also have \f(CW\*(C`Content\-Length\*(C'\fR to indicate the
number of \fIbytes\fR, which is always a good idea to supply if the number is
known.
.PP
.Vb 2
\&    "Content\-Type: text/plain; charset=UTF\-8",
\&    "Content\-Length: $byte_count"
.Ve
.SH "SUMMARY"
.IX Header "SUMMARY"
Decode everything you receive, encode everything you send out. (If it's text
data.)
.SH "Q and A (or FAQ)"
.IX Header "Q and A (or FAQ)"
After reading this document, you ought to read perlunifaq too.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Thanks to Johan Vromans from Squirrel Consultancy. His \s-1UTF\-8\s0 rants during the
Amsterdam Perl Mongers meetings got me interested and determined to find out
how to use character encodings in Perl in ways that don't break easily.
.PP
Thanks to Gerard Goossen from \s-1TTY.\s0 His presentation \*(L"\s-1UTF\-8\s0 in the wild\*(R" (Dutch
Perl Workshop 2006) inspired me to publish my thoughts and write this tutorial.
.PP
Thanks to the people who asked about this kind of stuff in several Perl \s-1IRC\s0
channels, and have constantly reminded me that a simpler explanation was
needed.
.PP
Thanks to the people who reviewed this document for me, before it went public.
They are: Benjamin Smith, Jan-Pieter Cornet, Johan Vromans, Lukas Mai, Nathan
Gray.
.SH "AUTHOR"
.IX Header "AUTHOR"
Juerd Waalboer <#####@juerd.nl>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlunifaq, perlunicode, perluniintro, Encode
                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlutil.1                                   0100644 0001750 0001750 00000035262 12566207450 022607  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUTIL 1"
.TH PERLUTIL 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlutil \- utilities packaged with the Perl distribution
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Along with the Perl interpreter itself, the Perl distribution installs a
range of utilities on your system. There are also several utilities
which are used by the Perl distribution itself as part of the install
process. This document exists to list all of these utilities, explain
what they are for and provide pointers to each module's documentation,
if appropriate.
.SH "LIST OF UTILITIES"
.IX Header "LIST OF UTILITIES"
.SS "Documentation"
.IX Subsection "Documentation"
.IP "perldoc" 3
.IX Item "perldoc"
The main interface to Perl's documentation is \f(CW\*(C`perldoc\*(C'\fR, although
if you're reading this, it's more than likely that you've already found
it. \fIperldoc\fR will extract and format the documentation from any file
in the current directory, any Perl module installed on the system, or
any of the standard documentation pages, such as this one. Use 
\&\f(CW\*(C`perldoc <name>\*(C'\fR to get information on any of the utilities
described in this document.
.IP "pod2man and pod2text" 3
.IX Item "pod2man and pod2text"
If it's run from a terminal, \fIperldoc\fR will usually call \fIpod2man\fR to
translate \s-1POD \s0(Plain Old Documentation \- see perlpod for an
explanation) into a manpage, and then run \fIman\fR to display it; if
\&\fIman\fR isn't available, \fIpod2text\fR will be used instead and the output
piped through your favourite pager.
.IP "pod2html and pod2latex" 3
.IX Item "pod2html and pod2latex"
As well as these two, there are two other converters: \fIpod2html\fR will
produce \s-1HTML\s0 pages from \s-1POD,\s0 and \fIpod2latex\fR, which produces LaTeX
files.
.IP "pod2usage" 3
.IX Item "pod2usage"
If you just want to know how to use the utilities described here,
\&\fIpod2usage\fR will just extract the \*(L"\s-1USAGE\*(R"\s0 section; some of
the utilities will automatically call \fIpod2usage\fR on themselves when
you call them with \f(CW\*(C`\-help\*(C'\fR.
.IP "podselect" 3
.IX Item "podselect"
\&\fIpod2usage\fR is a special case of \fIpodselect\fR, a utility to extract
named sections from documents written in \s-1POD.\s0 For instance, while
utilities have \*(L"\s-1USAGE\*(R"\s0 sections, Perl modules usually have \*(L"\s-1SYNOPSIS\*(R"\s0
sections: \f(CW\*(C`podselect \-s "SYNOPSIS" ...\*(C'\fR will extract this section for
a given file.
.IP "podchecker" 3
.IX Item "podchecker"
If you're writing your own documentation in \s-1POD,\s0 the \fIpodchecker\fR
utility will look for errors in your markup.
.IP "splain" 3
.IX Item "splain"
\&\fIsplain\fR is an interface to perldiag \- paste in your error message
to it, and it'll explain it for you.
.ie n .IP """roffitall""" 3
.el .IP "\f(CWroffitall\fR" 3
.IX Item "roffitall"
The \f(CW\*(C`roffitall\*(C'\fR utility is not installed on your system but lives in
the \fIpod/\fR directory of your Perl source kit; it converts all the
documentation from the distribution to \fI*roff\fR format, and produces a
typeset PostScript or text file of the whole lot.
.SS "Converters"
.IX Subsection "Converters"
To help you convert legacy programs to Perl, we've included three
conversion filters:
.IP "a2p" 3
.IX Item "a2p"
\&\fIa2p\fR converts \fIawk\fR scripts to Perl programs; for example, \f(CW\*(C`a2p \-F:\*(C'\fR
on the simple \fIawk\fR script \f(CW\*(C`{print $2}\*(C'\fR will produce a Perl program
based around this code:
.Sp
.Vb 4
\&    while (<>) {
\&        ($Fld1,$Fld2) = split(/[:\en]/, $_, \-1);
\&        print $Fld2;
\&    }
.Ve
.IP "s2p and psed" 3
.IX Item "s2p and psed"
Similarly, \fIs2p\fR converts \fIsed\fR scripts to Perl programs. \fIs2p\fR run
on \f(CW\*(C`s/foo/bar\*(C'\fR will produce a Perl program based around this:
.Sp
.Vb 5
\&    while (<>) {
\&        chomp;
\&        s/foo/bar/g;
\&        print if $printit;
\&    }
.Ve
.Sp
When invoked as \fIpsed\fR, it behaves as a \fIsed\fR implementation, written in
Perl.
.IP "find2perl" 3
.IX Item "find2perl"
Finally, \fIfind2perl\fR translates \f(CW\*(C`find\*(C'\fR commands to Perl equivalents which 
use the File::Find module. As an example, 
\&\f(CW\*(C`find2perl . \-user root \-perm 4000 \-print\*(C'\fR produces the following callback
subroutine for \f(CW\*(C`File::Find\*(C'\fR:
.Sp
.Vb 7
\&    sub wanted {
\&        my ($dev,$ino,$mode,$nlink,$uid,$gid);
\&        (($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_)) &&
\&        $uid == $uid{\*(Aqroot\*(Aq}) &&
\&        (($mode & 0777) == 04000);
\&        print("$name\en");
\&    }
.Ve
.PP
As well as these filters for converting other languages, the
pl2pm utility will help you convert old-style Perl 4 libraries to 
new-style Perl5 modules.
.SS "Administration"
.IX Subsection "Administration"
.IP "config_data" 3
.IX Item "config_data"
Query or change configuration of Perl modules that use Module::Build\-based
configuration files for features and config data.
.IP "libnetcfg" 3
.IX Item "libnetcfg"
To display and change the libnet configuration run the libnetcfg command.
.IP "perlivp" 3
.IX Item "perlivp"
The \fIperlivp\fR program is set up at Perl source code build time to test
the Perl version it was built under.  It can be used after running \f(CW\*(C`make
install\*(C'\fR (or your platform's equivalent procedure) to verify that perl
and its libraries have been installed correctly.
.SS "Development"
.IX Subsection "Development"
There are a set of utilities which help you in developing Perl programs, 
and in particular, extending Perl with C.
.IP "perlbug" 3
.IX Item "perlbug"
\&\fIperlbug\fR is the recommended way to report bugs in the perl interpreter
itself or any of the standard library modules back to the developers;
please read through the documentation for \fIperlbug\fR thoroughly before
using it to submit a bug report.
.IP "perlthanks" 3
.IX Item "perlthanks"
This program provides an easy way to send a thank-you message back to the
authors and maintainers of perl. It's just \fIperlbug\fR installed under
another name.
.IP "h2ph" 3
.IX Item "h2ph"
Back before Perl had the \s-1XS\s0 system for connecting with C libraries,
programmers used to get library constants by reading through the C
header files. You may still see \f(CW\*(C`require \*(Aqsyscall.ph\*(Aq\*(C'\fR or similar
around \- the \fI.ph\fR file should be created by running \fIh2ph\fR on the
corresponding \fI.h\fR file. See the \fIh2ph\fR documentation for more on how
to convert a whole bunch of header files at once.
.IP "c2ph and pstruct" 3
.IX Item "c2ph and pstruct"
\&\fIc2ph\fR and \fIpstruct\fR, which are actually the same program but behave
differently depending on how they are called, provide another way of
getting at C with Perl \- they'll convert C structures and union declarations
to Perl code. This is deprecated in favour of \fIh2xs\fR these days.
.IP "h2xs" 3
.IX Item "h2xs"
\&\fIh2xs\fR converts C header files into \s-1XS\s0 modules, and will try and write
as much glue between C libraries and Perl modules as it can. It's also
very useful for creating skeletons of pure Perl modules.
.IP "enc2xs" 3
.IX Item "enc2xs"
\&\fIenc2xs\fR builds a Perl extension for use by Encode from either
Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc).
Besides being used internally during the build process of the Encode
module, you can use \fIenc2xs\fR to add your own encoding to perl.
No knowledge of \s-1XS\s0 is necessary.
.IP "xsubpp" 3
.IX Item "xsubpp"
\&\fIxsubpp\fR is a compiler to convert Perl \s-1XS\s0 code into C code.
It is typically run by the makefiles created by ExtUtils::MakeMaker.
.Sp
\&\fIxsubpp\fR will compile \s-1XS\s0 code into C code by embedding the constructs
necessary to let C functions manipulate Perl values and creates the glue
necessary to let Perl access those functions.
.IP "prove" 3
.IX Item "prove"
\&\fIprove\fR is a command-line interface to the test-running functionality
of \fITest::Harness\fR.  It's an alternative to \f(CW\*(C`make test\*(C'\fR.
.IP "corelist" 3
.IX Item "corelist"
A command-line front-end to \f(CW\*(C`Module::CoreList\*(C'\fR, to query what modules
were shipped with given versions of perl.
.SS "General tools"
.IX Subsection "General tools"
A few general-purpose tools are shipped with perl, mostly because they
came along modules included in the perl distribution.
.IP "piconv" 3
.IX Item "piconv"
\&\fBpiconv\fR is a Perl version of \fBiconv\fR, a character encoding converter
widely available for various Unixen today.  This script was primarily a
technology demonstrator for Perl v5.8.0, but you can use piconv in the
place of iconv for virtually any case.
.IP "ptar" 3
.IX Item "ptar"
\&\fIptar\fR is a tar-like program, written in pure Perl.
.IP "ptardiff" 3
.IX Item "ptardiff"
\&\fIptardiff\fR is a small utility that produces a diff between an extracted
archive and an unextracted one. (Note that this utility requires the
\&\f(CW\*(C`Text::Diff\*(C'\fR module to function properly; this module isn't distributed
with perl, but is available from the \s-1CPAN.\s0)
.IP "ptargrep" 3
.IX Item "ptargrep"
\&\fIptargrep\fR is a utility to apply pattern matching to the contents of files 
in a tar archive.
.IP "shasum" 3
.IX Item "shasum"
This utility, that comes with the \f(CW\*(C`Digest::SHA\*(C'\fR module, is used to print
or verify \s-1SHA\s0 checksums.
.IP "zipdetails" 3
.IX Item "zipdetails"
zipdetails displays information about the internal record structure of the zip file.
It is not concerned with displaying any details of the compressed data stored in the zip file.
.SS "Installation"
.IX Subsection "Installation"
These utilities help manage extra Perl modules that don't come with the perl
distribution.
.IP "cpan" 3
.IX Item "cpan"
\&\fIcpan\fR is a command-line interface to \s-1CPAN\s0.pm.  It allows you to install
modules or distributions from \s-1CPAN,\s0 or just get information about them, and
a lot more.  It is similar to the command line mode of the \s-1CPAN\s0 module,
.Sp
.Vb 1
\&    perl \-MCPAN \-e shell
.Ve
.IP "cpanp" 3
.IX Item "cpanp"
\&\fIcpanp\fR is, like \fIcpan\fR, a command-line interface to the \s-1CPAN,\s0 using
the \f(CW\*(C`CPANPLUS\*(C'\fR module as a back-end. It can be used interactively or
imperatively.
.IP "cpan2dist" 3
.IX Item "cpan2dist"
\&\fIcpan2dist\fR is a tool to create distributions (or packages) from \s-1CPAN\s0
modules, then suitable for your package manager of choice. Support for
specific formats are available from \s-1CPAN\s0 as \f(CW\*(C`CPANPLUS::Dist::*\*(C'\fR modules.
.IP "instmodsh" 3
.IX Item "instmodsh"
A little interface to ExtUtils::Installed to examine installed modules,
validate your packlists and even create a tarball from an installed module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perldoc, pod2man, perlpod,
pod2html, pod2usage, podselect,
podchecker, splain, perldiag,
\&\f(CW\*(C`roffitall|roffitall\*(C'\fR, a2p, s2p, find2perl,
File::Find, pl2pm, perlbug,
h2ph, c2ph, h2xs, enc2xs, xsubpp,
cpan, cpanp, cpan2dist, instmodsh, piconv, prove,
corelist, ptar, ptardiff, shasum, zipdetails
                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlutil5.16.1                               0100644 0001750 0001750 00000034740 12566207427 023125  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUTIL 1"
.TH PERLUTIL 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlutil \- utilities packaged with the Perl distribution
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Along with the Perl interpreter itself, the Perl distribution installs a
range of utilities on your system. There are also several utilities
which are used by the Perl distribution itself as part of the install
process. This document exists to list all of these utilities, explain
what they are for and provide pointers to each module's documentation,
if appropriate.
.SH "LIST OF UTILITIES"
.IX Header "LIST OF UTILITIES"
.SS "Documentation"
.IX Subsection "Documentation"
.IP "perldoc" 3
.IX Item "perldoc"
The main interface to Perl's documentation is \f(CW\*(C`perldoc\*(C'\fR, although
if you're reading this, it's more than likely that you've already found
it. \fIperldoc\fR will extract and format the documentation from any file
in the current directory, any Perl module installed on the system, or
any of the standard documentation pages, such as this one. Use 
\&\f(CW\*(C`perldoc <name>\*(C'\fR to get information on any of the utilities
described in this document.
.IP "pod2man and pod2text" 3
.IX Item "pod2man and pod2text"
If it's run from a terminal, \fIperldoc\fR will usually call \fIpod2man\fR to
translate \s-1POD\s0 (Plain Old Documentation \- see perlpod for an
explanation) into a manpage, and then run \fIman\fR to display it; if
\&\fIman\fR isn't available, \fIpod2text\fR will be used instead and the output
piped through your favourite pager.
.IP "pod2html and pod2latex" 3
.IX Item "pod2html and pod2latex"
As well as these two, there are two other converters: \fIpod2html\fR will
produce \s-1HTML\s0 pages from \s-1POD\s0, and \fIpod2latex\fR, which produces LaTeX
files.
.IP "pod2usage" 3
.IX Item "pod2usage"
If you just want to know how to use the utilities described here,
\&\fIpod2usage\fR will just extract the \*(L"\s-1USAGE\s0\*(R" section; some of
the utilities will automatically call \fIpod2usage\fR on themselves when
you call them with \f(CW\*(C`\-help\*(C'\fR.
.IP "podselect" 3
.IX Item "podselect"
\&\fIpod2usage\fR is a special case of \fIpodselect\fR, a utility to extract
named sections from documents written in \s-1POD\s0. For instance, while
utilities have \*(L"\s-1USAGE\s0\*(R" sections, Perl modules usually have \*(L"\s-1SYNOPSIS\s0\*(R"
sections: \f(CW\*(C`podselect \-s "SYNOPSIS" ...\*(C'\fR will extract this section for
a given file.
.IP "podchecker" 3
.IX Item "podchecker"
If you're writing your own documentation in \s-1POD\s0, the \fIpodchecker\fR
utility will look for errors in your markup.
.IP "splain" 3
.IX Item "splain"
\&\fIsplain\fR is an interface to perldiag \- paste in your error message
to it, and it'll explain it for you.
.ie n .IP """roffitall""" 3
.el .IP "\f(CWroffitall\fR" 3
.IX Item "roffitall"
The \f(CW\*(C`roffitall\*(C'\fR utility is not installed on your system but lives in
the \fIpod/\fR directory of your Perl source kit; it converts all the
documentation from the distribution to \fI*roff\fR format, and produces a
typeset PostScript or text file of the whole lot.
.SS "Converters"
.IX Subsection "Converters"
To help you convert legacy programs to Perl, we've included three
conversion filters:
.IP "a2p" 3
.IX Item "a2p"
\&\fIa2p\fR converts \fIawk\fR scripts to Perl programs; for example, \f(CW\*(C`a2p \-F:\*(C'\fR
on the simple \fIawk\fR script \f(CW\*(C`{print $2}\*(C'\fR will produce a Perl program
based around this code:
.Sp
.Vb 4
\&    while (<>) {
\&        ($Fld1,$Fld2) = split(/[:\en]/, $_, \-1);
\&        print $Fld2;
\&    }
.Ve
.IP "s2p and psed" 3
.IX Item "s2p and psed"
Similarly, \fIs2p\fR converts \fIsed\fR scripts to Perl programs. \fIs2p\fR run
on \f(CW\*(C`s/foo/bar\*(C'\fR will produce a Perl program based around this:
.Sp
.Vb 5
\&    while (<>) {
\&        chomp;
\&        s/foo/bar/g;
\&        print if $printit;
\&    }
.Ve
.Sp
When invoked as \fIpsed\fR, it behaves as a \fIsed\fR implementation, written in
Perl.
.IP "find2perl" 3
.IX Item "find2perl"
Finally, \fIfind2perl\fR translates \f(CW\*(C`find\*(C'\fR commands to Perl equivalents which 
use the File::Find module. As an example, 
\&\f(CW\*(C`find2perl . \-user root \-perm 4000 \-print\*(C'\fR produces the following callback
subroutine for \f(CW\*(C`File::Find\*(C'\fR:
.Sp
.Vb 7
\&    sub wanted {
\&        my ($dev,$ino,$mode,$nlink,$uid,$gid);
\&        (($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_)) &&
\&        $uid == $uid{\*(Aqroot\*(Aq}) &&
\&        (($mode & 0777) == 04000);
\&        print("$name\en");
\&    }
.Ve
.PP
As well as these filters for converting other languages, the
pl2pm utility will help you convert old-style Perl 4 libraries to 
new-style Perl5 modules.
.SS "Administration"
.IX Subsection "Administration"
.IP "config_data" 3
.IX Item "config_data"
Query or change configuration of Perl modules that use Module::Build\-based
configuration files for features and config data.
.IP "libnetcfg" 3
.IX Item "libnetcfg"
To display and change the libnet configuration run the libnetcfg command.
.IP "perlivp" 3
.IX Item "perlivp"
The \fIperlivp\fR program is set up at Perl source code build time to test
the Perl version it was built under.  It can be used after running \f(CW\*(C`make
install\*(C'\fR (or your platform's equivalent procedure) to verify that perl
and its libraries have been installed correctly.
.SS "Development"
.IX Subsection "Development"
There are a set of utilities which help you in developing Perl programs, 
and in particular, extending Perl with C.
.IP "perlbug" 3
.IX Item "perlbug"
\&\fIperlbug\fR is the recommended way to report bugs in the perl interpreter
itself or any of the standard library modules back to the developers;
please read through the documentation for \fIperlbug\fR thoroughly before
using it to submit a bug report.
.IP "perlthanks" 3
.IX Item "perlthanks"
This program provides an easy way to send a thank-you message back to the
authors and maintainers of perl. It's just \fIperlbug\fR installed under
another name.
.IP "h2ph" 3
.IX Item "h2ph"
Back before Perl had the \s-1XS\s0 system for connecting with C libraries,
programmers used to get library constants by reading through the C
header files. You may still see \f(CW\*(C`require \*(Aqsyscall.ph\*(Aq\*(C'\fR or similar
around \- the \fI.ph\fR file should be created by running \fIh2ph\fR on the
corresponding \fI.h\fR file. See the \fIh2ph\fR documentation for more on how
to convert a whole bunch of header files at once.
.IP "c2ph and pstruct" 3
.IX Item "c2ph and pstruct"
\&\fIc2ph\fR and \fIpstruct\fR, which are actually the same program but behave
differently depending on how they are called, provide another way of
getting at C with Perl \- they'll convert C structures and union declarations
to Perl code. This is deprecated in favour of \fIh2xs\fR these days.
.IP "h2xs" 3
.IX Item "h2xs"
\&\fIh2xs\fR converts C header files into \s-1XS\s0 modules, and will try and write
as much glue between C libraries and Perl modules as it can. It's also
very useful for creating skeletons of pure Perl modules.
.IP "enc2xs" 3
.IX Item "enc2xs"
\&\fIenc2xs\fR builds a Perl extension for use by Encode from either
Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc).
Besides being used internally during the build process of the Encode
module, you can use \fIenc2xs\fR to add your own encoding to perl.
No knowledge of \s-1XS\s0 is necessary.
.IP "xsubpp" 3
.IX Item "xsubpp"
\&\fIxsubpp\fR is a compiler to convert Perl \s-1XS\s0 code into C code.
It is typically run by the makefiles created by ExtUtils::MakeMaker.
.Sp
\&\fIxsubpp\fR will compile \s-1XS\s0 code into C code by embedding the constructs
necessary to let C functions manipulate Perl values and creates the glue
necessary to let Perl access those functions.
.IP "prove" 3
.IX Item "prove"
\&\fIprove\fR is a command-line interface to the test-running functionality
of \fITest::Harness\fR.  It's an alternative to \f(CW\*(C`make test\*(C'\fR.
.IP "corelist" 3
.IX Item "corelist"
A command-line front-end to \f(CW\*(C`Module::CoreList\*(C'\fR, to query what modules
were shipped with given versions of perl.
.SS "General tools"
.IX Subsection "General tools"
A few general-purpose tools are shipped with perl, mostly because they
came along modules included in the perl distribution.
.IP "piconv" 3
.IX Item "piconv"
\&\fBpiconv\fR is a Perl version of \fBiconv\fR, a character encoding converter
widely available for various Unixen today.  This script was primarily a
technology demonstrator for Perl 5.8.0, but you can use piconv in the
place of iconv for virtually any case.
.IP "ptar" 3
.IX Item "ptar"
\&\fIptar\fR is a tar-like program, written in pure Perl.
.IP "ptardiff" 3
.IX Item "ptardiff"
\&\fIptardiff\fR is a small utility that produces a diff between an extracted
archive and an unextracted one. (Note that this utility requires the
\&\f(CW\*(C`Text::Diff\*(C'\fR module to function properly; this module isn't distributed
with perl, but is available from the \s-1CPAN\s0.)
.IP "ptargrep" 3
.IX Item "ptargrep"
\&\fIptargrep\fR is a utility to apply pattern matching to the contents of files 
in a tar archive.
.IP "shasum" 3
.IX Item "shasum"
This utility, that comes with the \f(CW\*(C`Digest::SHA\*(C'\fR module, is used to print
or verify \s-1SHA\s0 checksums.
.IP "zipdetails" 3
.IX Item "zipdetails"
zipdetails displays information about the internal record structure of the zip file.
It is not concerned with displaying any details of the compressed data stored in the zip file.
.SS "Installation"
.IX Subsection "Installation"
These utilities help manage extra Perl modules that don't come with the perl
distribution.
.IP "cpan" 3
.IX Item "cpan"
\&\fIcpan\fR is a command-line interface to \s-1CPAN\s0.pm.  It allows you to install
modules or distributions from \s-1CPAN\s0, or just get information about them, and
a lot more.  It is similar to the command line mode of the \s-1CPAN\s0 module,
.Sp
.Vb 1
\&    perl \-MCPAN \-e shell
.Ve
.IP "cpanp" 3
.IX Item "cpanp"
\&\fIcpanp\fR is, like \fIcpan\fR, a command-line interface to the \s-1CPAN\s0, using
the \f(CW\*(C`CPANPLUS\*(C'\fR module as a back-end. It can be used interactively or
imperatively.
.IP "cpan2dist" 3
.IX Item "cpan2dist"
\&\fIcpan2dist\fR is a tool to create distributions (or packages) from \s-1CPAN\s0
modules, then suitable for your package manager of choice. Support for
specific formats are available from \s-1CPAN\s0 as \f(CW\*(C`CPANPLUS::Dist::*\*(C'\fR modules.
.IP "instmodsh" 3
.IX Item "instmodsh"
A little interface to ExtUtils::Installed to examine installed modules,
validate your packlists and even create a tarball from an installed module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perldoc, pod2man, perlpod,
pod2html, pod2usage, podselect,
podchecker, splain, perldiag,
\&\f(CW\*(C`roffitall|roffitall\*(C'\fR, a2p, s2p, find2perl,
File::Find, pl2pm, perlbug,
h2ph, c2ph, h2xs, enc2xs, xsubpp,
cpan, cpanp, cpan2dist, instmodsh, piconv, prove,
corelist, ptar, ptardiff, shasum, zipdetails
                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlutil5.18.1                               0100644 0001750 0001750 00000035262 12566207450 023123  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUTIL 1"
.TH PERLUTIL 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlutil \- utilities packaged with the Perl distribution
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Along with the Perl interpreter itself, the Perl distribution installs a
range of utilities on your system. There are also several utilities
which are used by the Perl distribution itself as part of the install
process. This document exists to list all of these utilities, explain
what they are for and provide pointers to each module's documentation,
if appropriate.
.SH "LIST OF UTILITIES"
.IX Header "LIST OF UTILITIES"
.SS "Documentation"
.IX Subsection "Documentation"
.IP "perldoc" 3
.IX Item "perldoc"
The main interface to Perl's documentation is \f(CW\*(C`perldoc\*(C'\fR, although
if you're reading this, it's more than likely that you've already found
it. \fIperldoc\fR will extract and format the documentation from any file
in the current directory, any Perl module installed on the system, or
any of the standard documentation pages, such as this one. Use 
\&\f(CW\*(C`perldoc <name>\*(C'\fR to get information on any of the utilities
described in this document.
.IP "pod2man and pod2text" 3
.IX Item "pod2man and pod2text"
If it's run from a terminal, \fIperldoc\fR will usually call \fIpod2man\fR to
translate \s-1POD \s0(Plain Old Documentation \- see perlpod for an
explanation) into a manpage, and then run \fIman\fR to display it; if
\&\fIman\fR isn't available, \fIpod2text\fR will be used instead and the output
piped through your favourite pager.
.IP "pod2html and pod2latex" 3
.IX Item "pod2html and pod2latex"
As well as these two, there are two other converters: \fIpod2html\fR will
produce \s-1HTML\s0 pages from \s-1POD,\s0 and \fIpod2latex\fR, which produces LaTeX
files.
.IP "pod2usage" 3
.IX Item "pod2usage"
If you just want to know how to use the utilities described here,
\&\fIpod2usage\fR will just extract the \*(L"\s-1USAGE\*(R"\s0 section; some of
the utilities will automatically call \fIpod2usage\fR on themselves when
you call them with \f(CW\*(C`\-help\*(C'\fR.
.IP "podselect" 3
.IX Item "podselect"
\&\fIpod2usage\fR is a special case of \fIpodselect\fR, a utility to extract
named sections from documents written in \s-1POD.\s0 For instance, while
utilities have \*(L"\s-1USAGE\*(R"\s0 sections, Perl modules usually have \*(L"\s-1SYNOPSIS\*(R"\s0
sections: \f(CW\*(C`podselect \-s "SYNOPSIS" ...\*(C'\fR will extract this section for
a given file.
.IP "podchecker" 3
.IX Item "podchecker"
If you're writing your own documentation in \s-1POD,\s0 the \fIpodchecker\fR
utility will look for errors in your markup.
.IP "splain" 3
.IX Item "splain"
\&\fIsplain\fR is an interface to perldiag \- paste in your error message
to it, and it'll explain it for you.
.ie n .IP """roffitall""" 3
.el .IP "\f(CWroffitall\fR" 3
.IX Item "roffitall"
The \f(CW\*(C`roffitall\*(C'\fR utility is not installed on your system but lives in
the \fIpod/\fR directory of your Perl source kit; it converts all the
documentation from the distribution to \fI*roff\fR format, and produces a
typeset PostScript or text file of the whole lot.
.SS "Converters"
.IX Subsection "Converters"
To help you convert legacy programs to Perl, we've included three
conversion filters:
.IP "a2p" 3
.IX Item "a2p"
\&\fIa2p\fR converts \fIawk\fR scripts to Perl programs; for example, \f(CW\*(C`a2p \-F:\*(C'\fR
on the simple \fIawk\fR script \f(CW\*(C`{print $2}\*(C'\fR will produce a Perl program
based around this code:
.Sp
.Vb 4
\&    while (<>) {
\&        ($Fld1,$Fld2) = split(/[:\en]/, $_, \-1);
\&        print $Fld2;
\&    }
.Ve
.IP "s2p and psed" 3
.IX Item "s2p and psed"
Similarly, \fIs2p\fR converts \fIsed\fR scripts to Perl programs. \fIs2p\fR run
on \f(CW\*(C`s/foo/bar\*(C'\fR will produce a Perl program based around this:
.Sp
.Vb 5
\&    while (<>) {
\&        chomp;
\&        s/foo/bar/g;
\&        print if $printit;
\&    }
.Ve
.Sp
When invoked as \fIpsed\fR, it behaves as a \fIsed\fR implementation, written in
Perl.
.IP "find2perl" 3
.IX Item "find2perl"
Finally, \fIfind2perl\fR translates \f(CW\*(C`find\*(C'\fR commands to Perl equivalents which 
use the File::Find module. As an example, 
\&\f(CW\*(C`find2perl . \-user root \-perm 4000 \-print\*(C'\fR produces the following callback
subroutine for \f(CW\*(C`File::Find\*(C'\fR:
.Sp
.Vb 7
\&    sub wanted {
\&        my ($dev,$ino,$mode,$nlink,$uid,$gid);
\&        (($dev,$ino,$mode,$nlink,$uid,$gid) = lstat($_)) &&
\&        $uid == $uid{\*(Aqroot\*(Aq}) &&
\&        (($mode & 0777) == 04000);
\&        print("$name\en");
\&    }
.Ve
.PP
As well as these filters for converting other languages, the
pl2pm utility will help you convert old-style Perl 4 libraries to 
new-style Perl5 modules.
.SS "Administration"
.IX Subsection "Administration"
.IP "config_data" 3
.IX Item "config_data"
Query or change configuration of Perl modules that use Module::Build\-based
configuration files for features and config data.
.IP "libnetcfg" 3
.IX Item "libnetcfg"
To display and change the libnet configuration run the libnetcfg command.
.IP "perlivp" 3
.IX Item "perlivp"
The \fIperlivp\fR program is set up at Perl source code build time to test
the Perl version it was built under.  It can be used after running \f(CW\*(C`make
install\*(C'\fR (or your platform's equivalent procedure) to verify that perl
and its libraries have been installed correctly.
.SS "Development"
.IX Subsection "Development"
There are a set of utilities which help you in developing Perl programs, 
and in particular, extending Perl with C.
.IP "perlbug" 3
.IX Item "perlbug"
\&\fIperlbug\fR is the recommended way to report bugs in the perl interpreter
itself or any of the standard library modules back to the developers;
please read through the documentation for \fIperlbug\fR thoroughly before
using it to submit a bug report.
.IP "perlthanks" 3
.IX Item "perlthanks"
This program provides an easy way to send a thank-you message back to the
authors and maintainers of perl. It's just \fIperlbug\fR installed under
another name.
.IP "h2ph" 3
.IX Item "h2ph"
Back before Perl had the \s-1XS\s0 system for connecting with C libraries,
programmers used to get library constants by reading through the C
header files. You may still see \f(CW\*(C`require \*(Aqsyscall.ph\*(Aq\*(C'\fR or similar
around \- the \fI.ph\fR file should be created by running \fIh2ph\fR on the
corresponding \fI.h\fR file. See the \fIh2ph\fR documentation for more on how
to convert a whole bunch of header files at once.
.IP "c2ph and pstruct" 3
.IX Item "c2ph and pstruct"
\&\fIc2ph\fR and \fIpstruct\fR, which are actually the same program but behave
differently depending on how they are called, provide another way of
getting at C with Perl \- they'll convert C structures and union declarations
to Perl code. This is deprecated in favour of \fIh2xs\fR these days.
.IP "h2xs" 3
.IX Item "h2xs"
\&\fIh2xs\fR converts C header files into \s-1XS\s0 modules, and will try and write
as much glue between C libraries and Perl modules as it can. It's also
very useful for creating skeletons of pure Perl modules.
.IP "enc2xs" 3
.IX Item "enc2xs"
\&\fIenc2xs\fR builds a Perl extension for use by Encode from either
Unicode Character Mapping files (.ucm) or Tcl Encoding Files (.enc).
Besides being used internally during the build process of the Encode
module, you can use \fIenc2xs\fR to add your own encoding to perl.
No knowledge of \s-1XS\s0 is necessary.
.IP "xsubpp" 3
.IX Item "xsubpp"
\&\fIxsubpp\fR is a compiler to convert Perl \s-1XS\s0 code into C code.
It is typically run by the makefiles created by ExtUtils::MakeMaker.
.Sp
\&\fIxsubpp\fR will compile \s-1XS\s0 code into C code by embedding the constructs
necessary to let C functions manipulate Perl values and creates the glue
necessary to let Perl access those functions.
.IP "prove" 3
.IX Item "prove"
\&\fIprove\fR is a command-line interface to the test-running functionality
of \fITest::Harness\fR.  It's an alternative to \f(CW\*(C`make test\*(C'\fR.
.IP "corelist" 3
.IX Item "corelist"
A command-line front-end to \f(CW\*(C`Module::CoreList\*(C'\fR, to query what modules
were shipped with given versions of perl.
.SS "General tools"
.IX Subsection "General tools"
A few general-purpose tools are shipped with perl, mostly because they
came along modules included in the perl distribution.
.IP "piconv" 3
.IX Item "piconv"
\&\fBpiconv\fR is a Perl version of \fBiconv\fR, a character encoding converter
widely available for various Unixen today.  This script was primarily a
technology demonstrator for Perl v5.8.0, but you can use piconv in the
place of iconv for virtually any case.
.IP "ptar" 3
.IX Item "ptar"
\&\fIptar\fR is a tar-like program, written in pure Perl.
.IP "ptardiff" 3
.IX Item "ptardiff"
\&\fIptardiff\fR is a small utility that produces a diff between an extracted
archive and an unextracted one. (Note that this utility requires the
\&\f(CW\*(C`Text::Diff\*(C'\fR module to function properly; this module isn't distributed
with perl, but is available from the \s-1CPAN.\s0)
.IP "ptargrep" 3
.IX Item "ptargrep"
\&\fIptargrep\fR is a utility to apply pattern matching to the contents of files 
in a tar archive.
.IP "shasum" 3
.IX Item "shasum"
This utility, that comes with the \f(CW\*(C`Digest::SHA\*(C'\fR module, is used to print
or verify \s-1SHA\s0 checksums.
.IP "zipdetails" 3
.IX Item "zipdetails"
zipdetails displays information about the internal record structure of the zip file.
It is not concerned with displaying any details of the compressed data stored in the zip file.
.SS "Installation"
.IX Subsection "Installation"
These utilities help manage extra Perl modules that don't come with the perl
distribution.
.IP "cpan" 3
.IX Item "cpan"
\&\fIcpan\fR is a command-line interface to \s-1CPAN\s0.pm.  It allows you to install
modules or distributions from \s-1CPAN,\s0 or just get information about them, and
a lot more.  It is similar to the command line mode of the \s-1CPAN\s0 module,
.Sp
.Vb 1
\&    perl \-MCPAN \-e shell
.Ve
.IP "cpanp" 3
.IX Item "cpanp"
\&\fIcpanp\fR is, like \fIcpan\fR, a command-line interface to the \s-1CPAN,\s0 using
the \f(CW\*(C`CPANPLUS\*(C'\fR module as a back-end. It can be used interactively or
imperatively.
.IP "cpan2dist" 3
.IX Item "cpan2dist"
\&\fIcpan2dist\fR is a tool to create distributions (or packages) from \s-1CPAN\s0
modules, then suitable for your package manager of choice. Support for
specific formats are available from \s-1CPAN\s0 as \f(CW\*(C`CPANPLUS::Dist::*\*(C'\fR modules.
.IP "instmodsh" 3
.IX Item "instmodsh"
A little interface to ExtUtils::Installed to examine installed modules,
validate your packlists and even create a tarball from an installed module.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perldoc, pod2man, perlpod,
pod2html, pod2usage, podselect,
podchecker, splain, perldiag,
\&\f(CW\*(C`roffitall|roffitall\*(C'\fR, a2p, s2p, find2perl,
File::Find, pl2pm, perlbug,
h2ph, c2ph, h2xs, enc2xs, xsubpp,
cpan, cpanp, cpan2dist, instmodsh, piconv, prove,
corelist, ptar, ptardiff, shasum, zipdetails
                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perluts.1                                    0100644 0001750 0001750 00000016164 12566207427 022451  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUTS 1"
.TH PERLUTS 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perluts \- Perl under UTS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document can be read \fIas is\fR: as \fI\s-1README\s0.uts\fR, or you
can read it after you build your package using \*(L"man perluts\*(R".
.PP
The purpose is to help you build Perl for \s-1UTS\s0, which, if you
follow these instructions, should be easy, and result in
a solidly working installation.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl 5.7.2 (Developmental) or Perl 5.8.x (forthcoming) for \s-1UTS\s0
.SH "BUILDING PERL ON UTS"
.IX Header "BUILDING PERL ON UTS"
\&\s-1NOTE:\s0 Some sites have redefined the way uname works, and if yours
does this, special steps must be taken so that Configure can
recognize your system as a \s-1UTS\s0 system.  To see if you are in
this category, issue the command \*(L"uname \-a\*(R".  It should look
something like:
.PP
.Vb 1
\&  uts juno 4 4.4 9672 370
.Ve
.PP
At any rate, the first field should be \*(L"uts\*(R".  If this is not
the case; supposing it is, say telcoUTS, create a script, uts/uname
(i.e. uname, in the subdirectory \*(L"uts\*(R" of the main Perl source dir):
   # uname
   /usr/bin/uname \*(L"$@\*(R" | sed \-e 's/^telcoUTS/uts/'
.PP
and when you execute Configure, do it as below, except for adding
PATH=uts:$PATH as a prefix.  I.e. do:
.PP
.Vb 1
\&   PATH=uts:$PATH ./Configure ...
.Ve
.PP
There is no need to do an interactive configure, just type
.PP
.Vb 1
\&  ./Configure \-de [\-Dusedevel] [\-Doptimize=\-g ] 2>&1 | tee Conf.out
.Ve
.PP
\&\*(L"\-Dusedevel\*(R" may be required to configure Perl 5.7.2 non-interactively.
Use \-Doptimize=\-g if you want to run Perl under sdb or gdb, \s-1OR\s0
if you want to be able to use the \-D command line flags to perl,
which are occasionally useful in debugging perl scripts.
.PP
In this and the following steps, the \*(L"2>&1 | tee \s-1XXX\s0.out\*(R" records all
output from the process, which will be useful if anything unexpected
goes wrong.
.PP
Then do the compilation with
.PP
.Vb 1
\&  make 2>&1 | tee make.out
.Ve
.PP
Finally, test using
.PP
.Vb 1
\&  make test 2>&1 | tee make\-test.out
.Ve
.PP
In the output, the only failures you should see should look like:
.PP
.Vb 10
\&   lib/Math/BigInt/t/bigfltpm.........Use of uninitialized value ...
\&   FAILED at test 57
\&   lib/Math/BigInt/t/bigintc..........ok
\&   lib/Math/BigInt/t/bigintpm.........FAILED at test 204
\&   lib/Math/BigInt/t/mbimbf...........Use of uninitialized value ...
\&   Illegal division by zero at ../lib/Math/BigInt/Calc.pm line 314.
\&   FAILED at test 71
\&   lib/Math/Complex...................exp: OVERFLOW
\&   FAILED at test 250
\&   lib/Math/Trig......................exp: OVERFLOW
\&   ok
\&   lib/Memoize/t/array................ok
\&        ...
\&   lib/Net/protoent...................ok
\&   lib/Net/servent....................FAILED at test 0
.Ve
.PP
This means that everything passes except for some problems in the
packages \*(L"Math::BigInt\*(R", \*(L"Math::Complex\*(R", and \*(L"Math::Trig\*(R".
The lib/Net/servent failure seems to be a bug in the test
program.  To confirm this, from the main Perl source dir, do:
.PP
.Vb 1
\&   LD_LIBRARY_PATH=\`pwd\` ./perl \-Ilib lib/Net/servent.t
.Ve
.PP
and it should output
.PP
.Vb 4
\&   1..3
\&   ok 1
\&   ok 2
\&   ok 3
.Ve
.SH "Installing the built perl on UTS"
.IX Header "Installing the built perl on UTS"
Run the command \*(L"make install\*(R"
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&   Hal Morris
\&   UTS Global LLC
\&   email: hom00@utsglobal.com
.Ve
                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perluts5.16.1                                0100644 0001750 0001750 00000016164 12566207427 022763  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUTS 1"
.TH PERLUTS 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perluts \- Perl under UTS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document can be read \fIas is\fR: as \fI\s-1README\s0.uts\fR, or you
can read it after you build your package using \*(L"man perluts\*(R".
.PP
The purpose is to help you build Perl for \s-1UTS\s0, which, if you
follow these instructions, should be easy, and result in
a solidly working installation.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl 5.7.2 (Developmental) or Perl 5.8.x (forthcoming) for \s-1UTS\s0
.SH "BUILDING PERL ON UTS"
.IX Header "BUILDING PERL ON UTS"
\&\s-1NOTE:\s0 Some sites have redefined the way uname works, and if yours
does this, special steps must be taken so that Configure can
recognize your system as a \s-1UTS\s0 system.  To see if you are in
this category, issue the command \*(L"uname \-a\*(R".  It should look
something like:
.PP
.Vb 1
\&  uts juno 4 4.4 9672 370
.Ve
.PP
At any rate, the first field should be \*(L"uts\*(R".  If this is not
the case; supposing it is, say telcoUTS, create a script, uts/uname
(i.e. uname, in the subdirectory \*(L"uts\*(R" of the main Perl source dir):
   # uname
   /usr/bin/uname \*(L"$@\*(R" | sed \-e 's/^telcoUTS/uts/'
.PP
and when you execute Configure, do it as below, except for adding
PATH=uts:$PATH as a prefix.  I.e. do:
.PP
.Vb 1
\&   PATH=uts:$PATH ./Configure ...
.Ve
.PP
There is no need to do an interactive configure, just type
.PP
.Vb 1
\&  ./Configure \-de [\-Dusedevel] [\-Doptimize=\-g ] 2>&1 | tee Conf.out
.Ve
.PP
\&\*(L"\-Dusedevel\*(R" may be required to configure Perl 5.7.2 non-interactively.
Use \-Doptimize=\-g if you want to run Perl under sdb or gdb, \s-1OR\s0
if you want to be able to use the \-D command line flags to perl,
which are occasionally useful in debugging perl scripts.
.PP
In this and the following steps, the \*(L"2>&1 | tee \s-1XXX\s0.out\*(R" records all
output from the process, which will be useful if anything unexpected
goes wrong.
.PP
Then do the compilation with
.PP
.Vb 1
\&  make 2>&1 | tee make.out
.Ve
.PP
Finally, test using
.PP
.Vb 1
\&  make test 2>&1 | tee make\-test.out
.Ve
.PP
In the output, the only failures you should see should look like:
.PP
.Vb 10
\&   lib/Math/BigInt/t/bigfltpm.........Use of uninitialized value ...
\&   FAILED at test 57
\&   lib/Math/BigInt/t/bigintc..........ok
\&   lib/Math/BigInt/t/bigintpm.........FAILED at test 204
\&   lib/Math/BigInt/t/mbimbf...........Use of uninitialized value ...
\&   Illegal division by zero at ../lib/Math/BigInt/Calc.pm line 314.
\&   FAILED at test 71
\&   lib/Math/Complex...................exp: OVERFLOW
\&   FAILED at test 250
\&   lib/Math/Trig......................exp: OVERFLOW
\&   ok
\&   lib/Memoize/t/array................ok
\&        ...
\&   lib/Net/protoent...................ok
\&   lib/Net/servent....................FAILED at test 0
.Ve
.PP
This means that everything passes except for some problems in the
packages \*(L"Math::BigInt\*(R", \*(L"Math::Complex\*(R", and \*(L"Math::Trig\*(R".
The lib/Net/servent failure seems to be a bug in the test
program.  To confirm this, from the main Perl source dir, do:
.PP
.Vb 1
\&   LD_LIBRARY_PATH=\`pwd\` ./perl \-Ilib lib/Net/servent.t
.Ve
.PP
and it should output
.PP
.Vb 4
\&   1..3
\&   ok 1
\&   ok 2
\&   ok 3
.Ve
.SH "Installing the built perl on UTS"
.IX Header "Installing the built perl on UTS"
Run the command \*(L"make install\*(R"
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&   Hal Morris
\&   UTS Global LLC
\&   email: hom00@utsglobal.com
.Ve
                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvar.1                                    0100644 0001750 0001750 00000272634 12566207450 022430  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVAR 1"
.TH PERLVAR 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvar \- Perl predefined variables
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "The Syntax of Variable Names"
.IX Subsection "The Syntax of Variable Names"
Variable names in Perl can have several formats.  Usually, they
must begin with a letter or underscore, in which case they can be
arbitrarily long (up to an internal limit of 251 characters) and
may contain letters, digits, underscores, or the special sequence
\&\f(CW\*(C`::\*(C'\fR or \f(CW\*(C`\*(Aq\*(C'\fR.  In this case, the part before the last \f(CW\*(C`::\*(C'\fR or
\&\f(CW\*(C`\*(Aq\*(C'\fR is taken to be a \fIpackage qualifier\fR; see perlmod.
.PP
Perl variable names may also be a sequence of digits or a single
punctuation or control character.  These names are all reserved for
special uses by Perl; for example, the all-digits names are used
to hold data captured by backreferences after a regular expression
match.  Perl has a special syntax for the single-control-character
names: It understands \f(CW\*(C`^X\*(C'\fR (caret \f(CW\*(C`X\*(C'\fR) to mean the control\-\f(CW\*(C`X\*(C'\fR
character.  For example, the notation \f(CW$^W\fR (dollar-sign caret
\&\f(CW\*(C`W\*(C'\fR) is the scalar variable whose name is the single character
control\-\f(CW\*(C`W\*(C'\fR.  This is better than typing a literal control\-\f(CW\*(C`W\*(C'\fR
into your program.
.PP
Since Perl v5.6.0, Perl variable names may be alphanumeric
strings that begin with control characters (or better yet, a caret).
These variables must be written in the form \f(CW\*(C`${^Foo}\*(C'\fR; the braces
are not optional.  \f(CW\*(C`${^Foo}\*(C'\fR denotes the scalar variable whose
name is a control\-\f(CW\*(C`F\*(C'\fR followed by two \f(CW\*(C`o\*(C'\fR's.  These variables are
reserved for future special uses by Perl, except for the ones that
begin with \f(CW\*(C`^_\*(C'\fR (control-underscore or caret-underscore).  No
control-character name that begins with \f(CW\*(C`^_\*(C'\fR will acquire a special
meaning in any future version of Perl; such names may therefore be
used safely in programs.  \f(CW$^_\fR itself, however, \fIis\fR reserved.
.PP
Perl identifiers that begin with digits, control characters, or
punctuation characters are exempt from the effects of the \f(CW\*(C`package\*(C'\fR
declaration and are always forced to be in package \f(CW\*(C`main\*(C'\fR; they are
also exempt from \f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR errors.  A few other names are also
exempt in these ways:
.PP
.Vb 5
\&    ENV      STDIN
\&    INC      STDOUT
\&    ARGV     STDERR
\&    ARGVOUT
\&    SIG
.Ve
.PP
In particular, the special \f(CW\*(C`${^_XYZ}\*(C'\fR variables are always taken
to be in package \f(CW\*(C`main\*(C'\fR, regardless of any \f(CW\*(C`package\*(C'\fR declarations
presently in scope.
.SH "SPECIAL VARIABLES"
.IX Header "SPECIAL VARIABLES"
The following names have special meaning to Perl.  Most punctuation
names have reasonable mnemonics, or analogs in the shells.
Nevertheless, if you wish to use long variable names, you need only say:
.PP
.Vb 1
\&    use English;
.Ve
.PP
at the top of your program.  This aliases all the short names to the long
names in the current package.  Some even have medium names, generally
borrowed from \fBawk\fR.  To avoid a performance hit, if you don't need the
\&\f(CW$PREMATCH\fR, \f(CW$MATCH\fR, or \f(CW$POSTMATCH\fR it's best to use the \f(CW\*(C`English\*(C'\fR
module without them:
.PP
.Vb 1
\&    use English \*(Aq\-no_match_vars\*(Aq;
.Ve
.PP
Before you continue, note the sort order for variables.  In general, we
first list the variables in case-insensitive, almost-lexigraphical
order (ignoring the \f(CW\*(C`{\*(C'\fR or \f(CW\*(C`^\*(C'\fR preceding words, as in \f(CW\*(C`${^UNICODE}\*(C'\fR
or \f(CW$^T\fR), although \f(CW$_\fR and \f(CW@_\fR move up to the top of the pile.
For variables with the same identifier, we list it in order of scalar,
array, hash, and bareword.
.SS "General Variables"
.IX Subsection "General Variables"
.ie n .IP "$ARG" 8
.el .IP "\f(CW$ARG\fR" 8
.IX Item "$ARG"
.PD 0
.ie n .IP "$_" 8
.el .IP "\f(CW$_\fR" 8
.IX Xref "$_ $ARG"
.IX Item "$_"
.PD
The default input and pattern-searching space.  The following pairs are
equivalent:
.Sp
.Vb 2
\&    while (<>) {...}    # equivalent only in while!
\&    while (defined($_ = <>)) {...}
\&
\&    /^Subject:/
\&    $_ =~ /^Subject:/
\&
\&    tr/a\-z/A\-Z/
\&    $_ =~ tr/a\-z/A\-Z/
\&
\&    chomp
\&    chomp($_)
.Ve
.Sp
Here are the places where Perl will assume \f(CW$_\fR even if you don't use it:
.RS 8
.IP "\(bu" 3
The following functions use \f(CW$_\fR as a default argument:
.Sp
abs, alarm, chomp, chop, chr, chroot,
cos, defined, eval, evalbytes, exp, fc, glob, hex, int, lc,
lcfirst, length, log, lstat, mkdir, oct, ord, pos, print, printf,
quotemeta, readlink, readpipe, ref, require, reverse (in scalar context only),
rmdir, say, sin, split (for its second
argument), sqrt, stat, study, uc, ucfirst,
unlink, unpack.
.IP "\(bu" 3
All file tests (\f(CW\*(C`\-f\*(C'\fR, \f(CW\*(C`\-d\*(C'\fR) except for \f(CW\*(C`\-t\*(C'\fR, which defaults to \s-1STDIN.\s0
See \*(L"\-X\*(R" in perlfunc
.IP "\(bu" 3
The pattern matching operations \f(CW\*(C`m//\*(C'\fR, \f(CW\*(C`s///\*(C'\fR and \f(CW\*(C`tr///\*(C'\fR (aka \f(CW\*(C`y///\*(C'\fR)
when used without an \f(CW\*(C`=~\*(C'\fR operator.
.IP "\(bu" 3
The default iterator variable in a \f(CW\*(C`foreach\*(C'\fR loop if no other
variable is supplied.
.IP "\(bu" 3
The implicit iterator variable in the \f(CW\*(C`grep()\*(C'\fR and \f(CW\*(C`map()\*(C'\fR functions.
.IP "\(bu" 3
The implicit variable of \f(CW\*(C`given()\*(C'\fR.
.IP "\(bu" 3
The default place to put the next value or input record
when a \f(CW\*(C`<FH>\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, \f(CW\*(C`readdir\*(C'\fR or \f(CW\*(C`each\*(C'\fR
operation's result is tested by itself as the sole criterion of a \f(CW\*(C`while\*(C'\fR
test.  Outside a \f(CW\*(C`while\*(C'\fR test, this will not happen.
.RE
.RS 8
.Sp
\&\f(CW$_\fR is by default a global variable.  However, as
of perl v5.10.0, you can use a lexical version of
\&\f(CW$_\fR by declaring it in a file or in a block with \f(CW\*(C`my\*(C'\fR.  Moreover,
declaring \f(CW\*(C`our $_\*(C'\fR restores the global \f(CW$_\fR in the current scope.  Though
this seemed like a good idea at the time it was introduced, lexical \f(CW$_\fR
actually causes more problems than it solves.  If you call a function that
expects to be passed information via \f(CW$_\fR, it may or may not work,
depending on how the function is written, there not being any easy way to
solve this.  Just avoid lexical \f(CW$_\fR, unless you are feeling particularly
masochistic.  For this reason lexical \f(CW$_\fR is still experimental and will
produce a warning unless warnings have been disabled.  As with other
experimental features, the behavior of lexical \f(CW$_\fR is subject to change
without notice, including change into a fatal error.
.Sp
Mnemonic: underline is understood in certain operations.
.RE
.ie n .IP "@ARG" 8
.el .IP "\f(CW@ARG\fR" 8
.IX Item "@ARG"
.PD 0
.ie n .IP "@_" 8
.el .IP "\f(CW@_\fR" 8
.IX Xref "@_ @ARG"
.IX Item "@_"
.PD
Within a subroutine the array \f(CW@_\fR contains the parameters passed to
that subroutine.  Inside a subroutine, \f(CW@_\fR is the default array for
the array operators \f(CW\*(C`push\*(C'\fR, \f(CW\*(C`pop\*(C'\fR, \f(CW\*(C`shift\*(C'\fR, and \f(CW\*(C`unshift\*(C'\fR.
.Sp
See perlsub.
.ie n .IP "$LIST_SEPARATOR" 8
.el .IP "\f(CW$LIST_SEPARATOR\fR" 8
.IX Item "$LIST_SEPARATOR"
.PD 0
.IP "$""" 8
.IX Xref "$"" $LIST_SEPARATOR"
.PD
When an array or an array slice is interpolated into a double-quoted
string or a similar context such as \f(CW\*(C`/.../\*(C'\fR, its elements are
separated by this value.  Default is a space.  For example, this:
.Sp
.Vb 1
\&    print "The array is: @array\en";
.Ve
.Sp
is equivalent to this:
.Sp
.Vb 1
\&    print "The array is: " . join($", @array) . "\en";
.Ve
.Sp
Mnemonic: works in double-quoted context.
.ie n .IP "$PROCESS_ID" 8
.el .IP "\f(CW$PROCESS_ID\fR" 8
.IX Item "$PROCESS_ID"
.PD 0
.ie n .IP "$PID" 8
.el .IP "\f(CW$PID\fR" 8
.IX Item "$PID"
.IP "$$" 8
.IX Xref "$$ $PID $PROCESS_ID"
.PD
The process number of the Perl running this script.  Though you \fIcan\fR set
this variable, doing so is generally discouraged, although it can be
invaluable for some testing purposes.  It will be reset automatically
across \f(CW\*(C`fork()\*(C'\fR calls.
.Sp
Note for Linux and Debian GNU/kFreeBSD users: Before Perl v5.16.0 perl
would emulate \s-1POSIX\s0 semantics on Linux systems using LinuxThreads, a
partial implementation of \s-1POSIX\s0 Threads that has since been superseded
by the Native \s-1POSIX\s0 Thread Library (\s-1NPTL\s0).
.Sp
LinuxThreads is now obsolete on Linux, and caching \f(CW\*(C`getpid()\*(C'\fR
like this made embedding perl unnecessarily complex (since you'd have
to manually update the value of $$), so now \f(CW$$\fR and \f(CW\*(C`getppid()\*(C'\fR
will always return the same values as the underlying C library.
.Sp
Debian GNU/kFreeBSD systems also used LinuxThreads up until and
including the 6.0 release, but after that moved to FreeBSD thread
semantics, which are POSIX-like.
.Sp
To see if your system is affected by this discrepancy check if
\&\f(CW\*(C`getconf GNU_LIBPTHREAD_VERSION | grep \-q NPTL\*(C'\fR returns a false
value. \s-1NTPL\s0 threads preserve the \s-1POSIX\s0 semantics.
.Sp
Mnemonic: same as shells.
.ie n .IP "$PROGRAM_NAME" 8
.el .IP "\f(CW$PROGRAM_NAME\fR" 8
.IX Item "$PROGRAM_NAME"
.PD 0
.ie n .IP "$0" 8
.el .IP "\f(CW$0\fR" 8
.IX Xref "$0 $PROGRAM_NAME"
.IX Item "$0"
.PD
Contains the name of the program being executed.
.Sp
On some (but not all) operating systems assigning to \f(CW$0\fR modifies
the argument area that the \f(CW\*(C`ps\*(C'\fR program sees.  On some platforms you
may have to use special \f(CW\*(C`ps\*(C'\fR options or a different \f(CW\*(C`ps\*(C'\fR to see the
changes.  Modifying the \f(CW$0\fR is more useful as a way of indicating the
current program state than it is for hiding the program you're
running.
.Sp
Note that there are platform-specific limitations on the maximum
length of \f(CW$0\fR.  In the most extreme case it may be limited to the
space occupied by the original \f(CW$0\fR.
.Sp
In some platforms there may be arbitrary amount of padding, for
example space characters, after the modified name as shown by \f(CW\*(C`ps\*(C'\fR.
In some platforms this padding may extend all the way to the original
length of the argument area, no matter what you do (this is the case
for example with Linux 2.2).
.Sp
Note for \s-1BSD\s0 users: setting \f(CW$0\fR does not completely remove \*(L"perl\*(R"
from the \fIps\fR\|(1) output.  For example, setting \f(CW$0\fR to \f(CW"foobar"\fR may
result in \f(CW"perl: foobar (perl)"\fR (whether both the \f(CW"perl: "\fR prefix
and the \*(L" (perl)\*(R" suffix are shown depends on your exact \s-1BSD\s0 variant
and version).  This is an operating system feature, Perl cannot help it.
.Sp
In multithreaded scripts Perl coordinates the threads so that any
thread may modify its copy of the \f(CW$0\fR and the change becomes visible
to \fIps\fR\|(1) (assuming the operating system plays along).  Note that
the view of \f(CW$0\fR the other threads have will not change since they
have their own copies of it.
.Sp
If the program has been given to perl via the switches \f(CW\*(C`\-e\*(C'\fR or \f(CW\*(C`\-E\*(C'\fR,
\&\f(CW$0\fR will contain the string \f(CW"\-e"\fR.
.Sp
On Linux as of perl v5.14.0 the legacy process name will be set with
\&\f(CWprctl(2)\fR, in addition to altering the \s-1POSIX\s0 name via \f(CW\*(C`argv[0]\*(C'\fR as
perl has done since version 4.000.  Now system utilities that read the
legacy process name such as ps, top and killall will recognize the
name you set when assigning to \f(CW$0\fR.  The string you supply will be
cut off at 16 bytes, this is a limitation imposed by Linux.
.Sp
Mnemonic: same as \fBsh\fR and \fBksh\fR.
.ie n .IP "$REAL_GROUP_ID" 8
.el .IP "\f(CW$REAL_GROUP_ID\fR" 8
.IX Item "$REAL_GROUP_ID"
.PD 0
.ie n .IP "$GID" 8
.el .IP "\f(CW$GID\fR" 8
.IX Item "$GID"
.IP "$(" 8
.IX Xref "$( $GID $REAL_GROUP_ID"
.PD
The real gid of this process.  If you are on a machine that supports
membership in multiple groups simultaneously, gives a space separated
list of groups you are in.  The first number is the one returned by
\&\f(CW\*(C`getgid()\*(C'\fR, and the subsequent ones by \f(CW\*(C`getgroups()\*(C'\fR, one of which may be
the same as the first number.
.Sp
However, a value assigned to \f(CW$(\fR must be a single number used to
set the real gid.  So the value given by \f(CW$(\fR should \fInot\fR be assigned
back to \f(CW$(\fR without being forced numeric, such as by adding zero.  Note
that this is different to the effective gid (\f(CW$)\fR) which does take a
list.
.Sp
You can change both the real gid and the effective gid at the same
time by using \f(CW\*(C`POSIX::setgid()\*(C'\fR.  Changes
to \f(CW$(\fR require a check to \f(CW$!\fR
to detect any possible errors after an attempted change.
.Sp
Mnemonic: parentheses are used to \fIgroup\fR things.  The real gid is the
group you \fIleft\fR, if you're running setgid.
.ie n .IP "$EFFECTIVE_GROUP_ID" 8
.el .IP "\f(CW$EFFECTIVE_GROUP_ID\fR" 8
.IX Item "$EFFECTIVE_GROUP_ID"
.PD 0
.ie n .IP "$EGID" 8
.el .IP "\f(CW$EGID\fR" 8
.IX Item "$EGID"
.IP "$)" 8
.IX Xref "$) $EGID $EFFECTIVE_GROUP_ID"
.PD
The effective gid of this process.  If you are on a machine that
supports membership in multiple groups simultaneously, gives a space
separated list of groups you are in.  The first number is the one
returned by \f(CW\*(C`getegid()\*(C'\fR, and the subsequent ones by \f(CW\*(C`getgroups()\*(C'\fR,
one of which may be the same as the first number.
.Sp
Similarly, a value assigned to \f(CW$)\fR must also be a space-separated
list of numbers.  The first number sets the effective gid, and
the rest (if any) are passed to \f(CW\*(C`setgroups()\*(C'\fR.  To get the effect of an
empty list for \f(CW\*(C`setgroups()\*(C'\fR, just repeat the new effective gid; that is,
to force an effective gid of 5 and an effectively empty \f(CW\*(C`setgroups()\*(C'\fR
list, say \f(CW\*(C` $) = "5 5" \*(C'\fR.
.Sp
You can change both the effective gid and the real gid at the same
time by using \f(CW\*(C`POSIX::setgid()\*(C'\fR (use only a single numeric argument).
Changes to \f(CW$)\fR require a check to \f(CW$!\fR to detect any possible errors
after an attempted change.
.Sp
\&\f(CW$<\fR, \f(CW$>\fR, \f(CW$(\fR and \f(CW$)\fR can be set only on
machines that support the corresponding \fIset[re][ug]\fIid()\fI\fR routine.  \f(CW$(\fR
and \f(CW$)\fR can be swapped only on machines supporting \f(CW\*(C`setregid()\*(C'\fR.
.Sp
Mnemonic: parentheses are used to \fIgroup\fR things.  The effective gid
is the group that's \fIright\fR for you, if you're running setgid.
.ie n .IP "$REAL_USER_ID" 8
.el .IP "\f(CW$REAL_USER_ID\fR" 8
.IX Item "$REAL_USER_ID"
.PD 0
.ie n .IP "$UID" 8
.el .IP "\f(CW$UID\fR" 8
.IX Item "$UID"
.IP "$<" 8
.IX Xref "$< $UID $REAL_USER_ID"
.PD
The real uid of this process.  You can change both the real uid and the
effective uid at the same time by using \f(CW\*(C`POSIX::setuid()\*(C'\fR.  Since
changes to \f(CW$<\fR require a system call, check \f(CW$!\fR after a change
attempt to detect any possible errors.
.Sp
Mnemonic: it's the uid you came \fIfrom\fR, if you're running setuid.
.ie n .IP "$EFFECTIVE_USER_ID" 8
.el .IP "\f(CW$EFFECTIVE_USER_ID\fR" 8
.IX Item "$EFFECTIVE_USER_ID"
.PD 0
.ie n .IP "$EUID" 8
.el .IP "\f(CW$EUID\fR" 8
.IX Item "$EUID"
.IP "$>" 8
.IX Xref "$> $EUID $EFFECTIVE_USER_ID"
.PD
The effective uid of this process.  For example:
.Sp
.Vb 2
\&    $< = $>;            # set real to effective uid
\&    ($<,$>) = ($>,$<);  # swap real and effective uids
.Ve
.Sp
You can change both the effective uid and the real uid at the same
time by using \f(CW\*(C`POSIX::setuid()\*(C'\fR.  Changes to \f(CW$>\fR require a check
to \f(CW$!\fR to detect any possible errors after an attempted change.
.Sp
\&\f(CW$<\fR and \f(CW$>\fR can be swapped only on machines
supporting \f(CW\*(C`setreuid()\*(C'\fR.
.Sp
Mnemonic: it's the uid you went \fIto\fR, if you're running setuid.
.ie n .IP "$SUBSCRIPT_SEPARATOR" 8
.el .IP "\f(CW$SUBSCRIPT_SEPARATOR\fR" 8
.IX Item "$SUBSCRIPT_SEPARATOR"
.PD 0
.ie n .IP "$SUBSEP" 8
.el .IP "\f(CW$SUBSEP\fR" 8
.IX Item "$SUBSEP"
.IP "$;" 8
.IX Xref "$; $SUBSEP SUBSCRIPT_SEPARATOR"
.PD
The subscript separator for multidimensional array emulation.  If you
refer to a hash element as
.Sp
.Vb 1
\&    $foo{$a,$b,$c}
.Ve
.Sp
it really means
.Sp
.Vb 1
\&    $foo{join($;, $a, $b, $c)}
.Ve
.Sp
But don't put
.Sp
.Vb 1
\&    @foo{$a,$b,$c}      # a slice\-\-note the @
.Ve
.Sp
which means
.Sp
.Vb 1
\&    ($foo{$a},$foo{$b},$foo{$c})
.Ve
.Sp
Default is \*(L"\e034\*(R", the same as \s-1SUBSEP\s0 in \fBawk\fR.  If your keys contain
binary data there might not be any safe value for \f(CW$;\fR.
.Sp
Consider using \*(L"real\*(R" multidimensional arrays as described
in perllol.
.Sp
Mnemonic: comma (the syntactic subscript separator) is a semi-semicolon.
.ie n .IP "$a" 8
.el .IP "\f(CW$a\fR" 8
.IX Item "$a"
.PD 0
.ie n .IP "$b" 8
.el .IP "\f(CW$b\fR" 8
.IX Xref "$a $b"
.IX Item "$b"
.PD
Special package variables when using \f(CW\*(C`sort()\*(C'\fR, see \*(L"sort\*(R" in perlfunc.
Because of this specialness \f(CW$a\fR and \f(CW$b\fR don't need to be declared
(using \f(CW\*(C`use vars\*(C'\fR, or \f(CW\*(C`our()\*(C'\fR) even when using the \f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR
pragma.  Don't lexicalize them with \f(CW\*(C`my $a\*(C'\fR or \f(CW\*(C`my $b\*(C'\fR if you want to
be able to use them in the \f(CW\*(C`sort()\*(C'\fR comparison block or function.
.ie n .IP "%ENV" 8
.el .IP "\f(CW%ENV\fR" 8
.IX Xref "%ENV"
.IX Item "%ENV"
The hash \f(CW%ENV\fR contains your current environment.  Setting a
value in \f(CW\*(C`ENV\*(C'\fR changes the environment for any child processes
you subsequently \f(CW\*(C`fork()\*(C'\fR off.
.ie n .IP "$SYSTEM_FD_MAX" 8
.el .IP "\f(CW$SYSTEM_FD_MAX\fR" 8
.IX Item "$SYSTEM_FD_MAX"
.PD 0
.IP "$^F" 8
.IX Xref "$^F $SYSTEM_FD_MAX"
.IX Item "$^F"
.PD
The maximum system file descriptor, ordinarily 2.  System file
descriptors are passed to \f(CW\*(C`exec()\*(C'\fRed processes, while higher file
descriptors are not.  Also, during an
\&\f(CW\*(C`open()\*(C'\fR, system file descriptors are
preserved even if the \f(CW\*(C`open()\*(C'\fR fails (ordinary file descriptors are
closed before the \f(CW\*(C`open()\*(C'\fR is attempted).  The close-on-exec
status of a file descriptor will be decided according to the value of
\&\f(CW$^F\fR when the corresponding file, pipe, or socket was opened, not the
time of the \f(CW\*(C`exec()\*(C'\fR.
.ie n .IP "@F" 8
.el .IP "\f(CW@F\fR" 8
.IX Xref "@F"
.IX Item "@F"
The array \f(CW@F\fR contains the fields of each line read in when autosplit
mode is turned on.  See perlrun for the \fB\-a\fR switch.  This array
is package-specific, and must be declared or given a full package name
if not in package main when running under \f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR.
.ie n .IP "@INC" 8
.el .IP "\f(CW@INC\fR" 8
.IX Xref "@INC"
.IX Item "@INC"
The array \f(CW@INC\fR contains the list of places that the \f(CW\*(C`do EXPR\*(C'\fR,
\&\f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`use\*(C'\fR constructs look for their library files.  It
initially consists of the arguments to any \fB\-I\fR command-line
switches, followed by the default Perl library, probably
\&\fI/usr/local/lib/perl\fR, followed by \*(L".\*(R", to represent the current
directory.  (\*(L".\*(R" will not be appended if taint checks are enabled,
either by \f(CW\*(C`\-T\*(C'\fR or by \f(CW\*(C`\-t\*(C'\fR.)  If you need to modify this at runtime,
you should use the \f(CW\*(C`use lib\*(C'\fR pragma to get the machine-dependent
library properly loaded also:
.Sp
.Vb 2
\&    use lib \*(Aq/mypath/libdir/\*(Aq;
\&    use SomeMod;
.Ve
.Sp
You can also insert hooks into the file inclusion system by putting Perl
code directly into \f(CW@INC\fR.  Those hooks may be subroutine references,
array references or blessed objects.  See \*(L"require\*(R" in perlfunc for details.
.ie n .IP "%INC" 8
.el .IP "\f(CW%INC\fR" 8
.IX Xref "%INC"
.IX Item "%INC"
The hash \f(CW%INC\fR contains entries for each filename included via the
\&\f(CW\*(C`do\*(C'\fR, \f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`use\*(C'\fR operators.  The key is the filename
you specified (with module names converted to pathnames), and the
value is the location of the file found.  The \f(CW\*(C`require\*(C'\fR
operator uses this hash to determine whether a particular file has
already been included.
.Sp
If the file was loaded via a hook (e.g. a subroutine reference, see
\&\*(L"require\*(R" in perlfunc for a description of these hooks), this hook is
by default inserted into \f(CW%INC\fR in place of a filename.  Note, however,
that the hook may have set the \f(CW%INC\fR entry by itself to provide some more
specific info.
.ie n .IP "$INPLACE_EDIT" 8
.el .IP "\f(CW$INPLACE_EDIT\fR" 8
.IX Item "$INPLACE_EDIT"
.PD 0
.IP "$^I" 8
.IX Xref "$^I $INPLACE_EDIT"
.IX Item "$^I"
.PD
The current value of the inplace-edit extension.  Use \f(CW\*(C`undef\*(C'\fR to disable
inplace editing.
.Sp
Mnemonic: value of \fB\-i\fR switch.
.IP "$^M" 8
.IX Xref "$^M"
.IX Item "$^M"
By default, running out of memory is an untrappable, fatal error.
However, if suitably built, Perl can use the contents of \f(CW$^M\fR
as an emergency memory pool after \f(CW\*(C`die()\*(C'\fRing.  Suppose that your Perl
were compiled with \f(CW\*(C`\-DPERL_EMERGENCY_SBRK\*(C'\fR and used Perl's malloc.
Then
.Sp
.Vb 1
\&    $^M = \*(Aqa\*(Aq x (1 << 16);
.Ve
.Sp
would allocate a 64K buffer for use in an emergency.  See the
\&\fI\s-1INSTALL\s0\fR file in the Perl distribution for information on how to
add custom C compilation flags when compiling perl.  To discourage casual
use of this advanced feature, there is no English long name for
this variable.
.Sp
This variable was added in Perl 5.004.
.ie n .IP "$OSNAME" 8
.el .IP "\f(CW$OSNAME\fR" 8
.IX Item "$OSNAME"
.PD 0
.IP "$^O" 8
.IX Xref "$^O $OSNAME"
.IX Item "$^O"
.PD
The name of the operating system under which this copy of Perl was
built, as determined during the configuration process.  For examples
see \*(L"\s-1PLATFORMS\*(R"\s0 in perlport.
.Sp
The value is identical to \f(CW$Config{\*(Aqosname\*(Aq}\fR.  See also Config
and the \fB\-V\fR command-line switch documented in perlrun.
.Sp
In Windows platforms, \f(CW$^O\fR is not very helpful: since it is always
\&\f(CW\*(C`MSWin32\*(C'\fR, it doesn't tell the difference between
95/98/ME/NT/2000/XP/CE/.NET.  Use \f(CW\*(C`Win32::GetOSName()\*(C'\fR or
\&\fIWin32::GetOSVersion()\fR (see Win32 and perlport) to distinguish
between the variants.
.Sp
This variable was added in Perl 5.003.
.ie n .IP "%SIG" 8
.el .IP "\f(CW%SIG\fR" 8
.IX Xref "%SIG"
.IX Item "%SIG"
The hash \f(CW%SIG\fR contains signal handlers for signals.  For example:
.Sp
.Vb 6
\&    sub handler {   # 1st argument is signal name
\&        my($sig) = @_;
\&        print "Caught a SIG$sig\-\-shutting down\en";
\&        close(LOG);
\&        exit(0);
\&        }
\&
\&    $SIG{\*(AqINT\*(Aq}  = \e&handler;
\&    $SIG{\*(AqQUIT\*(Aq} = \e&handler;
\&    ...
\&    $SIG{\*(AqINT\*(Aq}  = \*(AqDEFAULT\*(Aq;   # restore default action
\&    $SIG{\*(AqQUIT\*(Aq} = \*(AqIGNORE\*(Aq;    # ignore SIGQUIT
.Ve
.Sp
Using a value of \f(CW\*(AqIGNORE\*(Aq\fR usually has the effect of ignoring the
signal, except for the \f(CW\*(C`CHLD\*(C'\fR signal.  See perlipc for more about
this special case.
.Sp
Here are some other examples:
.Sp
.Vb 7
\&    $SIG{"PIPE"} = "Plumber";   # assumes main::Plumber (not
\&                                # recommended)
\&    $SIG{"PIPE"} = \e&Plumber;   # just fine; assume current
\&                                # Plumber
\&    $SIG{"PIPE"} = *Plumber;    # somewhat esoteric
\&    $SIG{"PIPE"} = Plumber();   # oops, what did Plumber()
\&                                # return??
.Ve
.Sp
Be sure not to use a bareword as the name of a signal handler,
lest you inadvertently call it.
.Sp
If your system has the \f(CW\*(C`sigaction()\*(C'\fR function then signal handlers
are installed using it.  This means you get reliable signal handling.
.Sp
The default delivery policy of signals changed in Perl v5.8.0 from
immediate (also known as \*(L"unsafe\*(R") to deferred, also known as \*(L"safe
signals\*(R".  See perlipc for more information.
.Sp
Certain internal hooks can be also set using the \f(CW%SIG\fR hash.  The
routine indicated by \f(CW$SIG{_\|_WARN_\|_}\fR is called when a warning
message is about to be printed.  The warning message is passed as the
first argument.  The presence of a \f(CW\*(C`_\|_WARN_\|_\*(C'\fR hook causes the
ordinary printing of warnings to \f(CW\*(C`STDERR\*(C'\fR to be suppressed.  You can
use this to save warnings in a variable, or turn warnings into fatal
errors, like this:
.Sp
.Vb 2
\&    local $SIG{_\|_WARN_\|_} = sub { die $_[0] };
\&    eval $proggie;
.Ve
.Sp
As the \f(CW\*(AqIGNORE\*(Aq\fR hook is not supported by \f(CW\*(C`_\|_WARN_\|_\*(C'\fR, you can
disable warnings using the empty subroutine:
.Sp
.Vb 1
\&    local $SIG{_\|_WARN_\|_} = sub {};
.Ve
.Sp
The routine indicated by \f(CW$SIG{_\|_DIE_\|_}\fR is called when a fatal
exception is about to be thrown.  The error message is passed as the
first argument.  When a \f(CW\*(C`_\|_DIE_\|_\*(C'\fR hook routine returns, the exception
processing continues as it would have in the absence of the hook,
unless the hook routine itself exits via a \f(CW\*(C`goto &sub\*(C'\fR, a loop exit,
or a \f(CW\*(C`die()\*(C'\fR.  The \f(CW\*(C`_\|_DIE_\|_\*(C'\fR handler is explicitly disabled during
the call, so that you can die from a \f(CW\*(C`_\|_DIE_\|_\*(C'\fR handler.  Similarly
for \f(CW\*(C`_\|_WARN_\|_\*(C'\fR.
.Sp
Due to an implementation glitch, the \f(CW$SIG{_\|_DIE_\|_}\fR hook is called
even inside an \f(CW\*(C`eval()\*(C'\fR.  Do not use this to rewrite a pending
exception in \f(CW$@\fR, or as a bizarre substitute for overriding
\&\f(CW\*(C`CORE::GLOBAL::die()\*(C'\fR.  This strange action at a distance may be fixed
in a future release so that \f(CW$SIG{_\|_DIE_\|_}\fR is only called if your
program is about to exit, as was the original intent.  Any other use is
deprecated.
.Sp
\&\f(CW\*(C`_\|_DIE_\|_\*(C'\fR/\f(CW\*(C`_\|_WARN_\|_\*(C'\fR handlers are very special in one respect: they
may be called to report (probable) errors found by the parser.  In such
a case the parser may be in inconsistent state, so any attempt to
evaluate Perl code from such a handler will probably result in a
segfault.  This means that warnings or errors that result from parsing
Perl should be used with extreme caution, like this:
.Sp
.Vb 5
\&    require Carp if defined $^S;
\&    Carp::confess("Something wrong") if defined &Carp::confess;
\&    die "Something wrong, but could not load Carp to give "
\&      . "backtrace...\en\et"
\&      . "To see backtrace try starting Perl with \-MCarp switch";
.Ve
.Sp
Here the first line will load \f(CW\*(C`Carp\*(C'\fR \fIunless\fR it is the parser who
called the handler.  The second line will print backtrace and die if
\&\f(CW\*(C`Carp\*(C'\fR was available.  The third line will be executed only if \f(CW\*(C`Carp\*(C'\fR was
not available.
.Sp
Having to even think about the \f(CW$^S\fR variable in your exception
handlers is simply wrong.  \f(CW$SIG{_\|_DIE_\|_}\fR as currently implemented
invites grievous and difficult to track down errors.  Avoid it
and use an \f(CW\*(C`END{}\*(C'\fR or CORE::GLOBAL::die override instead.
.Sp
See \*(L"die\*(R" in perlfunc, \*(L"warn\*(R" in perlfunc, \*(L"eval\*(R" in perlfunc, and
warnings for additional information.
.ie n .IP "$BASETIME" 8
.el .IP "\f(CW$BASETIME\fR" 8
.IX Item "$BASETIME"
.PD 0
.IP "$^T" 8
.IX Xref "$^T $BASETIME"
.IX Item "$^T"
.PD
The time at which the program began running, in seconds since the
epoch (beginning of 1970).  The values returned by the \fB\-M\fR, \fB\-A\fR,
and \fB\-C\fR filetests are based on this value.
.ie n .IP "$PERL_VERSION" 8
.el .IP "\f(CW$PERL_VERSION\fR" 8
.IX Item "$PERL_VERSION"
.PD 0
.IP "$^V" 8
.IX Xref "$^V $PERL_VERSION"
.IX Item "$^V"
.PD
The revision, version, and subversion of the Perl interpreter,
represented as a \f(CW\*(C`version\*(C'\fR object.
.Sp
This variable first appeared in perl v5.6.0; earlier versions of perl
will see an undefined value.  Before perl v5.10.0 \f(CW$^V\fR was represented
as a v\-string.
.Sp
\&\f(CW$^V\fR can be used to determine whether the Perl interpreter executing
a script is in the right range of versions.  For example:
.Sp
.Vb 1
\&    warn "Hashes not randomized!\en" if !$^V or $^V lt v5.8.1
.Ve
.Sp
To convert \f(CW$^V\fR into its string representation use \f(CW\*(C`sprintf()\*(C'\fR's
\&\f(CW"%vd"\fR conversion:
.Sp
.Vb 1
\&    printf "version is v%vd\en", $^V;  # Perl\*(Aqs version
.Ve
.Sp
See the documentation of \f(CW\*(C`use VERSION\*(C'\fR and \f(CW\*(C`require VERSION\*(C'\fR
for a convenient way to fail if the running Perl interpreter is too old.
.Sp
See also \f(CW$]\fR for an older representation of the Perl version.
.Sp
This variable was added in Perl v5.6.0.
.Sp
Mnemonic: use ^V for Version Control.
.IP "${^WIN32_SLOPPY_STAT}" 8
.IX Xref "${^WIN32_SLOPPY_STAT} sitecustomize sitecustomize.pl"
.IX Item "${^WIN32_SLOPPY_STAT}"
If this variable is set to a true value, then \f(CW\*(C`stat()\*(C'\fR on Windows will
not try to open the file.  This means that the link count cannot be
determined and file attributes may be out of date if additional
hardlinks to the file exist.  On the other hand, not opening the file
is considerably faster, especially for files on network drives.
.Sp
This variable could be set in the \fIsitecustomize.pl\fR file to
configure the local Perl installation to use \*(L"sloppy\*(R" \f(CW\*(C`stat()\*(C'\fR by
default.  See the documentation for \fB\-f\fR in
perlrun for more information about site
customization.
.Sp
This variable was added in Perl v5.10.0.
.ie n .IP "$EXECUTABLE_NAME" 8
.el .IP "\f(CW$EXECUTABLE_NAME\fR" 8
.IX Item "$EXECUTABLE_NAME"
.PD 0
.IP "$^X" 8
.IX Xref "$^X $EXECUTABLE_NAME"
.IX Item "$^X"
.PD
The name used to execute the current copy of Perl, from C's
\&\f(CW\*(C`argv[0]\*(C'\fR or (where supported) \fI/proc/self/exe\fR.
.Sp
Depending on the host operating system, the value of \f(CW$^X\fR may be
a relative or absolute pathname of the perl program file, or may
be the string used to invoke perl but not the pathname of the
perl program file.  Also, most operating systems permit invoking
programs that are not in the \s-1PATH\s0 environment variable, so there
is no guarantee that the value of \f(CW$^X\fR is in \s-1PATH. \s0 For \s-1VMS,\s0 the
value may or may not include a version number.
.Sp
You usually can use the value of \f(CW$^X\fR to re-invoke an independent
copy of the same perl that is currently running, e.g.,
.Sp
.Vb 1
\&    @first_run = \`$^X \-le "print int rand 100 for 1..100"\`;
.Ve
.Sp
But recall that not all operating systems support forking or
capturing of the output of commands, so this complex statement
may not be portable.
.Sp
It is not safe to use the value of \f(CW$^X\fR as a path name of a file,
as some operating systems that have a mandatory suffix on
executable files do not require use of the suffix when invoking
a command.  To convert the value of \f(CW$^X\fR to a path name, use the
following statements:
.Sp
.Vb 7
\&    # Build up a set of file names (not command names).
\&    use Config;
\&    my $this_perl = $^X;
\&    if ($^O ne \*(AqVMS\*(Aq) {
\&        $this_perl .= $Config{_exe}
\&          unless $this_perl =~ m/$Config{_exe}$/i;
\&        }
.Ve
.Sp
Because many operating systems permit anyone with read access to
the Perl program file to make a copy of it, patch the copy, and
then execute the copy, the security-conscious Perl programmer
should take care to invoke the installed copy of perl, not the
copy referenced by \f(CW$^X\fR.  The following statements accomplish
this goal, and produce a pathname that can be invoked as a
command or referenced as a file.
.Sp
.Vb 6
\&    use Config;
\&    my $secure_perl_path = $Config{perlpath};
\&    if ($^O ne \*(AqVMS\*(Aq) {
\&        $secure_perl_path .= $Config{_exe}
\&            unless $secure_perl_path =~ m/$Config{_exe}$/i;
\&        }
.Ve
.SS "Variables related to regular expressions"
.IX Subsection "Variables related to regular expressions"
Most of the special variables related to regular expressions are side
effects.  Perl sets these variables when it has a successful match, so
you should check the match result before using them.  For instance:
.PP
.Vb 3
\&    if( /P(A)TT(ER)N/ ) {
\&        print "I found $1 and $2\en";
\&        }
.Ve
.PP
These variables are read-only and dynamically-scoped, unless we note
otherwise.
.PP
The dynamic nature of the regular expression variables means that
their value is limited to the block that they are in, as demonstrated
by this bit of code:
.PP
.Vb 2
\&    my $outer = \*(AqWallace and Grommit\*(Aq;
\&    my $inner = \*(AqMutt and Jeff\*(Aq;
\&
\&    my $pattern = qr/(\eS+) and (\eS+)/;
\&
\&    sub show_n { print "\e$1 is $1; \e$2 is $2\en" }
\&
\&    {
\&    OUTER:
\&        show_n() if $outer =~ m/$pattern/;
\&
\&        INNER: {
\&            show_n() if $inner =~ m/$pattern/;
\&            }
\&
\&        show_n();
\&    }
.Ve
.PP
The output shows that while in the \f(CW\*(C`OUTER\*(C'\fR block, the values of \f(CW$1\fR
and \f(CW$2\fR are from the match against \f(CW$outer\fR.  Inside the \f(CW\*(C`INNER\*(C'\fR
block, the values of \f(CW$1\fR and \f(CW$2\fR are from the match against
\&\f(CW$inner\fR, but only until the end of the block (i.e. the dynamic
scope).  After the \f(CW\*(C`INNER\*(C'\fR block completes, the values of \f(CW$1\fR and
\&\f(CW$2\fR return to the values for the match against \f(CW$outer\fR even though
we have not made another match:
.PP
.Vb 3
\&    $1 is Wallace; $2 is Grommit
\&    $1 is Mutt; $2 is Jeff
\&    $1 is Wallace; $2 is Grommit
.Ve
.PP
Due to an unfortunate accident of Perl's implementation, \f(CW\*(C`use
English\*(C'\fR imposes a considerable performance penalty on all regular
expression matches in a program because it uses the \f(CW\*(C`$\`\*(C'\fR, \f(CW$&\fR, and
\&\f(CW\*(C`$\*(Aq\*(C'\fR, regardless of whether they occur in the scope of \f(CW\*(C`use
English\*(C'\fR.  For that reason, saying \f(CW\*(C`use English\*(C'\fR in libraries is
strongly discouraged unless you import it without the match variables:
.PP
.Vb 1
\&    use English \*(Aq\-no_match_vars\*(Aq
.Ve
.PP
The \f(CW\*(C`Devel::NYTProf\*(C'\fR and \f(CW\*(C`Devel::FindAmpersand\*(C'\fR
modules can help you find uses of these
problematic match variables in your code.
.PP
Since Perl v5.10.0, you can use the \f(CW\*(C`/p\*(C'\fR match operator flag and the
\&\f(CW\*(C`${^PREMATCH}\*(C'\fR, \f(CW\*(C`${^MATCH}\*(C'\fR, and \f(CW\*(C`${^POSTMATCH}\*(C'\fR variables instead
so you only suffer the performance penalties.
.ie n .IP "$<\fIdigits\fR> ($1, $2, ...)" 8
.el .IP "$<\fIdigits\fR> ($1, \f(CW$2\fR, ...)" 8
.IX Xref "$1 $2 $3"
.IX Item "$<digits> ($1, $2, ...)"
Contains the subpattern from the corresponding set of capturing
parentheses from the last successful pattern match, not counting patterns
matched in nested blocks that have been exited already.
.Sp
These variables are read-only and dynamically-scoped.
.Sp
Mnemonic: like \edigits.
.ie n .IP "$MATCH" 8
.el .IP "\f(CW$MATCH\fR" 8
.IX Item "$MATCH"
.PD 0
.IP "$&" 8
.IX Xref "$& $MATCH"
.PD
The string matched by the last successful pattern match (not counting
any matches hidden within a \s-1BLOCK\s0 or \f(CW\*(C`eval()\*(C'\fR enclosed by the current
\&\s-1BLOCK\s0).
.Sp
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  To avoid this
penalty, you can extract the same substring by using \*(L"@\-\*(R".  Starting
with Perl v5.10.0, you can use the \f(CW\*(C`/p\*(C'\fR match flag and the \f(CW\*(C`${^MATCH}\*(C'\fR
variable to do the same thing for particular match operations.
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: like \f(CW\*(C`&\*(C'\fR in some editors.
.IP "${^MATCH}" 8
.IX Xref "${^MATCH}"
.IX Item "${^MATCH}"
This is similar to \f(CW$&\fR (\f(CW$MATCH\fR) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the \f(CW\*(C`/p\*(C'\fR modifier.
.Sp
This variable was added in Perl v5.10.0.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$PREMATCH" 8
.el .IP "\f(CW$PREMATCH\fR" 8
.IX Item "$PREMATCH"
.PD 0
.IP "$`" 8
.IX Xref "$` $PREMATCH ${^PREMATCH}"
.PD
The string preceding whatever was matched by the last successful
pattern match, not counting any matches hidden within a \s-1BLOCK\s0 or \f(CW\*(C`eval\*(C'\fR
enclosed by the current \s-1BLOCK.\s0
.Sp
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  To avoid this
penalty, you can extract the same substring by using \*(L"@\-\*(R".  Starting
with Perl v5.10.0, you can use the \f(CW\*(C`/p\*(C'\fR match flag and the
\&\f(CW\*(C`${^PREMATCH}\*(C'\fR variable to do the same thing for particular match
operations.
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: \f(CW\*(C`\`\*(C'\fR often precedes a quoted string.
.IP "${^PREMATCH}" 8
.IX Xref "$` ${^PREMATCH}"
.IX Item "${^PREMATCH}"
This is similar to \f(CW\*(C`$\`\*(C'\fR ($PREMATCH) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the \f(CW\*(C`/p\*(C'\fR modifier.
.Sp
This variable was added in Perl v5.10.0
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$POSTMATCH" 8
.el .IP "\f(CW$POSTMATCH\fR" 8
.IX Item "$POSTMATCH"
.PD 0
.IP "$'" 8
.IX Xref "$' $POSTMATCH ${^POSTMATCH} @-"
.PD
The string following whatever was matched by the last successful
pattern match (not counting any matches hidden within a \s-1BLOCK\s0 or \f(CW\*(C`eval()\*(C'\fR
enclosed by the current \s-1BLOCK\s0).  Example:
.Sp
.Vb 3
\&    local $_ = \*(Aqabcdefghi\*(Aq;
\&    /def/;
\&    print "$\`:$&:$\*(Aq\en";         # prints abc:def:ghi
.Ve
.Sp
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.
To avoid this penalty, you can extract the same substring by
using \*(L"@\-\*(R".  Starting with Perl v5.10.0, you can use the \f(CW\*(C`/p\*(C'\fR match flag
and the \f(CW\*(C`${^POSTMATCH}\*(C'\fR variable to do the same thing for particular
match operations.
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: \f(CW\*(C`\*(Aq\*(C'\fR often follows a quoted string.
.IP "${^POSTMATCH}" 8
.IX Xref "${^POSTMATCH} $' $POSTMATCH"
.IX Item "${^POSTMATCH}"
This is similar to \f(CW\*(C`$\*(Aq\*(C'\fR (\f(CW$POSTMATCH\fR) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the \f(CW\*(C`/p\*(C'\fR modifier.
.Sp
This variable was added in Perl v5.10.0.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$LAST_PAREN_MATCH" 8
.el .IP "\f(CW$LAST_PAREN_MATCH\fR" 8
.IX Item "$LAST_PAREN_MATCH"
.PD 0
.IP "$+" 8
.IX Xref "$+ $LAST_PAREN_MATCH"
.PD
The text matched by the last bracket of the last successful search pattern.
This is useful if you don't know which one of a set of alternative patterns
matched.  For example:
.Sp
.Vb 1
\&    /Version: (.*)|Revision: (.*)/ && ($rev = $+);
.Ve
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: be positive and forward looking.
.ie n .IP "$LAST_SUBMATCH_RESULT" 8
.el .IP "\f(CW$LAST_SUBMATCH_RESULT\fR" 8
.IX Item "$LAST_SUBMATCH_RESULT"
.PD 0
.IP "$^N" 8
.IX Xref "$^N $LAST_SUBMATCH_RESULT"
.IX Item "$^N"
.PD
The text matched by the used group most-recently closed (i.e. the group
with the rightmost closing parenthesis) of the last successful search
pattern.
.Sp
This is primarily used inside \f(CW\*(C`(?{...})\*(C'\fR blocks for examining text
recently matched.  For example, to effectively capture text to a variable
(in addition to \f(CW$1\fR, \f(CW$2\fR, etc.), replace \f(CW\*(C`(...)\*(C'\fR with
.Sp
.Vb 1
\&    (?:(...)(?{ $var = $^N }))
.Ve
.Sp
By setting and then using \f(CW$var\fR in this way relieves you from having to
worry about exactly which numbered set of parentheses they are.
.Sp
This variable was added in Perl v5.8.0.
.Sp
Mnemonic: the (possibly) Nested parenthesis that most recently closed.
.ie n .IP "@LAST_MATCH_END" 8
.el .IP "\f(CW@LAST_MATCH_END\fR" 8
.IX Item "@LAST_MATCH_END"
.PD 0
.IP "@+" 8
.IX Xref "@+ @LAST_MATCH_END"
.PD
This array holds the offsets of the ends of the last successful
submatches in the currently active dynamic scope.  \f(CW$+[0]\fR is
the offset into the string of the end of the entire match.  This
is the same value as what the \f(CW\*(C`pos\*(C'\fR function returns when called
on the variable that was matched against.  The \fIn\fRth element
of this array holds the offset of the \fIn\fRth submatch, so
\&\f(CW$+[1]\fR is the offset past where \f(CW$1\fR ends, \f(CW$+[2]\fR the offset
past where \f(CW$2\fR ends, and so on.  You can use \f(CW$#+\fR to determine
how many subgroups were in the last successful match.  See the
examples given for the \f(CW\*(C`@\-\*(C'\fR variable.
.Sp
This variable was added in Perl v5.6.0.
.ie n .IP "%LAST_PAREN_MATCH" 8
.el .IP "\f(CW%LAST_PAREN_MATCH\fR" 8
.IX Item "%LAST_PAREN_MATCH"
.PD 0
.IP "%+" 8
.IX Xref "%+ %LAST_PAREN_MATCH"
.PD
Similar to \f(CW\*(C`@+\*(C'\fR, the \f(CW\*(C`%+\*(C'\fR hash allows access to the named capture
buffers, should they exist, in the last successful match in the
currently active dynamic scope.
.Sp
For example, \f(CW$+{foo}\fR is equivalent to \f(CW$1\fR after the following match:
.Sp
.Vb 1
\&    \*(Aqfoo\*(Aq =~ /(?<foo>foo)/;
.Ve
.Sp
The keys of the \f(CW\*(C`%+\*(C'\fR hash list only the names of buffers that have
captured (and that are thus associated to defined values).
.Sp
The underlying behaviour of \f(CW\*(C`%+\*(C'\fR is provided by the
Tie::Hash::NamedCapture module.
.Sp
\&\fBNote:\fR \f(CW\*(C`%\-\*(C'\fR and \f(CW\*(C`%+\*(C'\fR are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via \f(CW\*(C`each\*(C'\fR may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.
.Sp
This variable was added in Perl v5.10.0.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "@LAST_MATCH_START" 8
.el .IP "\f(CW@LAST_MATCH_START\fR" 8
.IX Item "@LAST_MATCH_START"
.PD 0
.IP "@\-" 8
.IX Xref "@- @LAST_MATCH_START"
.PD
\&\f(CW\*(C`$\-[0]\*(C'\fR is the offset of the start of the last successful match.
\&\f(CW\*(C`$\-[\*(C'\fR\fIn\fR\f(CW\*(C`]\*(C'\fR is the offset of the start of the substring matched by
\&\fIn\fR\-th subpattern, or undef if the subpattern did not match.
.Sp
Thus, after a match against \f(CW$_\fR, \f(CW$&\fR coincides with \f(CW\*(C`substr $_, $\-[0],
$+[0] \- $\-[0]\*(C'\fR.  Similarly, $\fIn\fR coincides with \f(CW\*(C`substr $_, $\-[n],
$+[n] \- $\-[n]\*(C'\fR if \f(CW\*(C`$\-[n]\*(C'\fR is defined, and $+ coincides with
\&\f(CW\*(C`substr $_, $\-[$#\-], $+[$#\-] \- $\-[$#\-]\*(C'\fR.  One can use \f(CW\*(C`$#\-\*(C'\fR to find the
last matched subgroup in the last successful match.  Contrast with
\&\f(CW$#+\fR, the number of subgroups in the regular expression.  Compare
with \f(CW\*(C`@+\*(C'\fR.
.Sp
This array holds the offsets of the beginnings of the last
successful submatches in the currently active dynamic scope.
\&\f(CW\*(C`$\-[0]\*(C'\fR is the offset into the string of the beginning of the
entire match.  The \fIn\fRth element of this array holds the offset
of the \fIn\fRth submatch, so \f(CW\*(C`$\-[1]\*(C'\fR is the offset where \f(CW$1\fR
begins, \f(CW\*(C`$\-[2]\*(C'\fR the offset where \f(CW$2\fR begins, and so on.
.Sp
After a match against some variable \f(CW$var\fR:
.RS 8
.ie n .IP """$\`"" is the same as ""substr($var, 0, $\-[0])""" 5
.el .IP "\f(CW$\`\fR is the same as \f(CWsubstr($var, 0, $\-[0])\fR" 5
.IX Item "$ is the same as substr($var, 0, $-[0])"
.PD 0
.ie n .IP "$& is the same as ""substr($var, $\-[0], $+[0] \- $\-[0])""" 5
.el .IP "\f(CW$&\fR is the same as \f(CWsubstr($var, $\-[0], $+[0] \- $\-[0])\fR" 5
.IX Item "$& is the same as substr($var, $-[0], $+[0] - $-[0])"
.ie n .IP """$\*(Aq"" is the same as ""substr($var, $+[0])""" 5
.el .IP "\f(CW$\*(Aq\fR is the same as \f(CWsubstr($var, $+[0])\fR" 5
.IX Item "$ is the same as substr($var, $+[0])"
.ie n .IP "$1 is the same as ""substr($var, $\-[1], $+[1] \- $\-[1])""" 5
.el .IP "\f(CW$1\fR is the same as \f(CWsubstr($var, $\-[1], $+[1] \- $\-[1])\fR" 5
.IX Item "$1 is the same as substr($var, $-[1], $+[1] - $-[1])"
.ie n .IP "$2 is the same as ""substr($var, $\-[2], $+[2] \- $\-[2])""" 5
.el .IP "\f(CW$2\fR is the same as \f(CWsubstr($var, $\-[2], $+[2] \- $\-[2])\fR" 5
.IX Item "$2 is the same as substr($var, $-[2], $+[2] - $-[2])"
.ie n .IP "$3 is the same as ""substr($var, $\-[3], $+[3] \- $\-[3])""" 5
.el .IP "\f(CW$3\fR is the same as \f(CWsubstr($var, $\-[3], $+[3] \- $\-[3])\fR" 5
.IX Item "$3 is the same as substr($var, $-[3], $+[3] - $-[3])"
.RE
.RS 8
.PD
.Sp
This variable was added in Perl v5.6.0.
.RE
.ie n .IP "%LAST_MATCH_START" 8
.el .IP "\f(CW%LAST_MATCH_START\fR" 8
.IX Item "%LAST_MATCH_START"
.PD 0
.IP "%\-" 8
.IX Xref "%- %LAST_MATCH_START"
.PD
Similar to \f(CW\*(C`%+\*(C'\fR, this variable allows access to the named capture groups
in the last successful match in the currently active dynamic scope.  To
each capture group name found in the regular expression, it associates a
reference to an array containing the list of values captured by all
buffers with that name (should there be several of them), in the order
where they appear.
.Sp
Here's an example:
.Sp
.Vb 12
\&    if (\*(Aq1234\*(Aq =~ /(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {
\&        foreach my $bufname (sort keys %\-) {
\&            my $ary = $\-{$bufname};
\&            foreach my $idx (0..$#$ary) {
\&                print "\e$\-{$bufname}[$idx] : ",
\&                      (defined($ary\->[$idx])
\&                          ? "\*(Aq$ary\->[$idx]\*(Aq"
\&                          : "undef"),
\&                      "\en";
\&            }
\&        }
\&    }
.Ve
.Sp
would print out:
.Sp
.Vb 4
\&    $\-{A}[0] : \*(Aq1\*(Aq
\&    $\-{A}[1] : \*(Aq3\*(Aq
\&    $\-{B}[0] : \*(Aq2\*(Aq
\&    $\-{B}[1] : \*(Aq4\*(Aq
.Ve
.Sp
The keys of the \f(CW\*(C`%\-\*(C'\fR hash correspond to all buffer names found in
the regular expression.
.Sp
The behaviour of \f(CW\*(C`%\-\*(C'\fR is implemented via the
Tie::Hash::NamedCapture module.
.Sp
\&\fBNote:\fR \f(CW\*(C`%\-\*(C'\fR and \f(CW\*(C`%+\*(C'\fR are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via \f(CW\*(C`each\*(C'\fR may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.
.Sp
This variable was added in Perl v5.10.0.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$LAST_REGEXP_CODE_RESULT" 8
.el .IP "\f(CW$LAST_REGEXP_CODE_RESULT\fR" 8
.IX Item "$LAST_REGEXP_CODE_RESULT"
.PD 0
.IP "$^R" 8
.IX Xref "$^R $LAST_REGEXP_CODE_RESULT"
.IX Item "$^R"
.PD
The result of evaluation of the last successful \f(CW\*(C`(?{ code })\*(C'\fR
regular expression assertion (see perlre).  May be written to.
.Sp
This variable was added in Perl 5.005.
.IP "${^RE_DEBUG_FLAGS}" 8
.IX Xref "${^RE_DEBUG_FLAGS}"
.IX Item "${^RE_DEBUG_FLAGS}"
The current value of the regex debugging flags.  Set to 0 for no debug output
even when the \f(CW\*(C`re \*(Aqdebug\*(Aq\*(C'\fR module is loaded.  See re for details.
.Sp
This variable was added in Perl v5.10.0.
.IP "${^RE_TRIE_MAXBUF}" 8
.IX Xref "${^RE_TRIE_MAXBUF}"
.IX Item "${^RE_TRIE_MAXBUF}"
Controls how certain regex optimisations are applied and how much memory they
utilize.  This value by default is 65536 which corresponds to a 512kB
temporary cache.  Set this to a higher value to trade
memory for speed when matching large alternations.  Set
it to a lower value if you want the optimisations to
be as conservative of memory as possible but still occur, and set it to a
negative value to prevent the optimisation and conserve the most memory.
Under normal situations this variable should be of no interest to you.
.Sp
This variable was added in Perl v5.10.0.
.SS "Variables related to filehandles"
.IX Subsection "Variables related to filehandles"
Variables that depend on the currently selected filehandle may be set
by calling an appropriate object method on the \f(CW\*(C`IO::Handle\*(C'\fR object,
although this is less efficient than using the regular built-in
variables.  (Summary lines below for this contain the word \s-1HANDLE.\s0)
First you must say
.PP
.Vb 1
\&    use IO::Handle;
.Ve
.PP
after which you may use either
.PP
.Vb 1
\&    method HANDLE EXPR
.Ve
.PP
or more safely,
.PP
.Vb 1
\&    HANDLE\->method(EXPR)
.Ve
.PP
Each method returns the old value of the \f(CW\*(C`IO::Handle\*(C'\fR attribute.  The
methods each take an optional \s-1EXPR,\s0 which, if supplied, specifies the
new value for the \f(CW\*(C`IO::Handle\*(C'\fR attribute in question.  If not
supplied, most methods do nothing to the current value\*(--except for
\&\f(CW\*(C`autoflush()\*(C'\fR, which will assume a 1 for you, just to be different.
.PP
Because loading in the \f(CW\*(C`IO::Handle\*(C'\fR class is an expensive operation,
you should learn how to use the regular built-in variables.
.PP
A few of these variables are considered \*(L"read-only\*(R".  This means that
if you try to assign to this variable, either directly or indirectly
through a reference, you'll raise a run-time exception.
.PP
You should be very careful when modifying the default values of most
special variables described in this document.  In most cases you want
to localize these variables before changing them, since if you don't,
the change may affect other modules which rely on the default values
of the special variables that you have changed.  This is one of the
correct ways to read the whole file at once:
.PP
.Vb 4
\&    open my $fh, "<", "foo" or die $!;
\&    local $/; # enable localized slurp mode
\&    my $content = <$fh>;
\&    close $fh;
.Ve
.PP
But the following code is quite bad:
.PP
.Vb 4
\&    open my $fh, "<", "foo" or die $!;
\&    undef $/; # enable slurp mode
\&    my $content = <$fh>;
\&    close $fh;
.Ve
.PP
since some other module, may want to read data from some file in the
default \*(L"line mode\*(R", so if the code we have just presented has been
executed, the global value of \f(CW$/\fR is now changed for any other code
running inside the same Perl interpreter.
.PP
Usually when a variable is localized you want to make sure that this
change affects the shortest scope possible.  So unless you are already
inside some short \f(CW\*(C`{}\*(C'\fR block, you should create one yourself.  For
example:
.PP
.Vb 7
\&    my $content = \*(Aq\*(Aq;
\&    open my $fh, "<", "foo" or die $!;
\&    {
\&        local $/;
\&        $content = <$fh>;
\&    }
\&    close $fh;
.Ve
.PP
Here is an example of how your own code can go broken:
.PP
.Vb 5
\&    for ( 1..3 ){
\&        $\e = "\er\en";
\&        nasty_break();
\&        print "$_";
\&    }
\&
\&    sub nasty_break {
\&        $\e = "\ef";
\&        # do something with $_
\&    }
.Ve
.PP
You probably expect this code to print the equivalent of
.PP
.Vb 1
\&    "1\er\en2\er\en3\er\en"
.Ve
.PP
but instead you get:
.PP
.Vb 1
\&    "1\ef2\ef3\ef"
.Ve
.PP
Why? Because \f(CW\*(C`nasty_break()\*(C'\fR modifies \f(CW\*(C`$\e\*(C'\fR without localizing it
first.  The value you set in  \f(CW\*(C`nasty_break()\*(C'\fR is still there when you
return.  The fix is to add \f(CW\*(C`local()\*(C'\fR so the value doesn't leak out of
\&\f(CW\*(C`nasty_break()\*(C'\fR:
.PP
.Vb 1
\&    local $\e = "\ef";
.Ve
.PP
It's easy to notice the problem in such a short example, but in more
complicated code you are looking for trouble if you don't localize
changes to the special variables.
.ie n .IP "$ARGV" 8
.el .IP "\f(CW$ARGV\fR" 8
.IX Xref "$ARGV"
.IX Item "$ARGV"
Contains the name of the current file when reading from \f(CW\*(C`<>\*(C'\fR.
.ie n .IP "@ARGV" 8
.el .IP "\f(CW@ARGV\fR" 8
.IX Xref "@ARGV"
.IX Item "@ARGV"
The array \f(CW@ARGV\fR contains the command-line arguments intended for
the script.  \f(CW$#ARGV\fR is generally the number of arguments minus
one, because \f(CW$ARGV[0]\fR is the first argument, \fInot\fR the program's
command name itself.  See \*(L"$0\*(R" for the command name.
.IP "\s-1ARGV \s0" 8
.IX Xref "ARGV"
.IX Item "ARGV "
The special filehandle that iterates over command-line filenames in
\&\f(CW@ARGV\fR.  Usually written as the null filehandle in the angle operator
\&\f(CW\*(C`<>\*(C'\fR.  Note that currently \f(CW\*(C`ARGV\*(C'\fR only has its magical effect
within the \f(CW\*(C`<>\*(C'\fR operator; elsewhere it is just a plain filehandle
corresponding to the last file opened by \f(CW\*(C`<>\*(C'\fR.  In particular,
passing \f(CW\*(C`\e*ARGV\*(C'\fR as a parameter to a function that expects a filehandle
may not cause your function to automatically read the contents of all the
files in \f(CW@ARGV\fR.
.IP "\s-1ARGVOUT \s0" 8
.IX Xref "ARGVOUT"
.IX Item "ARGVOUT "
The special filehandle that points to the currently open output file
when doing edit-in-place processing with \fB\-i\fR.  Useful when you have
to do a lot of inserting and don't want to keep modifying \f(CW$_\fR.  See
perlrun for the \fB\-i\fR switch.
.IP "IO::Handle\->output_field_separator( \s-1EXPR \s0)" 8
.IX Item "IO::Handle->output_field_separator( EXPR )"
.PD 0
.ie n .IP "$OUTPUT_FIELD_SEPARATOR" 8
.el .IP "\f(CW$OUTPUT_FIELD_SEPARATOR\fR" 8
.IX Item "$OUTPUT_FIELD_SEPARATOR"
.ie n .IP "$OFS" 8
.el .IP "\f(CW$OFS\fR" 8
.IX Item "$OFS"
.IP "$," 8
.IX Xref "$, $OFS $OUTPUT_FIELD_SEPARATOR"
.PD
The output field separator for the print operator.  If defined, this
value is printed between each of print's arguments.  Default is \f(CW\*(C`undef\*(C'\fR.
.Sp
You cannot call \f(CW\*(C`output_field_separator()\*(C'\fR on a handle, only as a
static method.  See IO::Handle.
.Sp
Mnemonic: what is printed when there is a \*(L",\*(R" in your print statement.
.IP "\s-1HANDLE\-\s0>input_line_number( \s-1EXPR \s0)" 8
.IX Item "HANDLE->input_line_number( EXPR )"
.PD 0
.ie n .IP "$INPUT_LINE_NUMBER" 8
.el .IP "\f(CW$INPUT_LINE_NUMBER\fR" 8
.IX Item "$INPUT_LINE_NUMBER"
.ie n .IP "$NR" 8
.el .IP "\f(CW$NR\fR" 8
.IX Item "$NR"
.IP "$." 8
.IX Xref "$. $NR $INPUT_LINE_NUMBER line number"
.PD
Current line number for the last filehandle accessed.
.Sp
Each filehandle in Perl counts the number of lines that have been read
from it.  (Depending on the value of \f(CW$/\fR, Perl's idea of what
constitutes a line may not match yours.)  When a line is read from a
filehandle (via \f(CW\*(C`readline()\*(C'\fR or \f(CW\*(C`<>\*(C'\fR), or when \f(CW\*(C`tell()\*(C'\fR or
\&\f(CW\*(C`seek()\*(C'\fR is called on it, \f(CW$.\fR becomes an alias to the line counter
for that filehandle.
.Sp
You can adjust the counter by assigning to \f(CW$.\fR, but this will not
actually move the seek pointer.  \fILocalizing \f(CI$.\fI will not localize
the filehandle's line count\fR.  Instead, it will localize perl's notion
of which filehandle \f(CW$.\fR is currently aliased to.
.Sp
\&\f(CW$.\fR is reset when the filehandle is closed, but \fBnot\fR when an open
filehandle is reopened without an intervening \f(CW\*(C`close()\*(C'\fR.  For more
details, see \*(L"I/O Operators\*(R" in perlop.  Because \f(CW\*(C`<>\*(C'\fR never does
an explicit close, line numbers increase across \f(CW\*(C`ARGV\*(C'\fR files (but see
examples in \*(L"eof\*(R" in perlfunc).
.Sp
You can also use \f(CW\*(C`HANDLE\->input_line_number(EXPR)\*(C'\fR to access the
line counter for a given filehandle without having to worry about
which handle you last accessed.
.Sp
Mnemonic: many programs use \*(L".\*(R" to mean the current line number.
.IP "IO::Handle\->input_record_separator( \s-1EXPR \s0)" 8
.IX Item "IO::Handle->input_record_separator( EXPR )"
.PD 0
.ie n .IP "$INPUT_RECORD_SEPARATOR" 8
.el .IP "\f(CW$INPUT_RECORD_SEPARATOR\fR" 8
.IX Item "$INPUT_RECORD_SEPARATOR"
.ie n .IP "$RS" 8
.el .IP "\f(CW$RS\fR" 8
.IX Item "$RS"
.IP "$/" 8
.IX Xref "$ $RS $INPUT_RECORD_SEPARATOR"
.PD
The input record separator, newline by default.  This influences Perl's
idea of what a \*(L"line\*(R" is.  Works like \fBawk\fR's \s-1RS\s0 variable, including
treating empty lines as a terminator if set to the null string (an
empty line cannot contain any spaces or tabs).  You may set it to a
multi-character string to match a multi-character terminator, or to
\&\f(CW\*(C`undef\*(C'\fR to read through the end of file.  Setting it to \f(CW"\en\en"\fR
means something slightly different than setting to \f(CW""\fR, if the file
contains consecutive empty lines.  Setting to \f(CW""\fR will treat two or
more consecutive empty lines as a single empty line.  Setting to
\&\f(CW"\en\en"\fR will blindly assume that the next input character belongs to
the next paragraph, even if it's a newline.
.Sp
.Vb 3
\&    local $/;           # enable "slurp" mode
\&    local $_ = <FH>;    # whole file now here
\&    s/\en[ \et]+/ /g;
.Ve
.Sp
Remember: the value of \f(CW$/\fR is a string, not a regex.  \fBawk\fR has to
be better for something. :\-)
.Sp
Setting \f(CW$/\fR to a reference to an integer, scalar containing an
integer, or scalar that's convertible to an integer will attempt to
read records instead of lines, with the maximum record size being the
referenced integer number of characters.  So this:
.Sp
.Vb 3
\&    local $/ = \e32768; # or \e"32768", or \e$var_containing_32768
\&    open my $fh, "<", $myfile or die $!;
\&    local $_ = <$fh>;
.Ve
.Sp
will read a record of no more than 32768 characters from \f(CW$fh\fR.  If you're
not reading from a record-oriented file (or your \s-1OS\s0 doesn't have
record-oriented files), then you'll likely get a full chunk of data
with every read.  If a record is larger than the record size you've
set, you'll get the record back in pieces.  Trying to set the record
size to zero or less will cause reading in the (rest of the) whole file.
.Sp
On \s-1VMS\s0 only, record reads bypass PerlIO layers and any associated
buffering, so you must not mix record and non-record reads on the
same filehandle.  Record mode mixes with line mode only when the
same buffering layer is in use for both modes.
.Sp
You cannot call \f(CW\*(C`input_record_separator()\*(C'\fR on a handle, only as a
static method.  See IO::Handle.
.Sp
See also \*(L"Newlines\*(R" in perlport.  Also see \*(L"$.\*(R".
.Sp
Mnemonic: / delimits line boundaries when quoting poetry.
.IP "IO::Handle\->output_record_separator( \s-1EXPR \s0)" 8
.IX Item "IO::Handle->output_record_separator( EXPR )"
.PD 0
.ie n .IP "$OUTPUT_RECORD_SEPARATOR" 8
.el .IP "\f(CW$OUTPUT_RECORD_SEPARATOR\fR" 8
.IX Item "$OUTPUT_RECORD_SEPARATOR"
.ie n .IP "$ORS" 8
.el .IP "\f(CW$ORS\fR" 8
.IX Item "$ORS"
.IP "$\e" 8
.IX Xref "$\\ $ORS $OUTPUT_RECORD_SEPARATOR"
.IX Item "$"
.PD
The output record separator for the print operator.  If defined, this
value is printed after the last of print's arguments.  Default is \f(CW\*(C`undef\*(C'\fR.
.Sp
You cannot call \f(CW\*(C`output_record_separator()\*(C'\fR on a handle, only as a
static method.  See IO::Handle.
.Sp
Mnemonic: you set \f(CW\*(C`$\e\*(C'\fR instead of adding \*(L"\en\*(R" at the end of the print.
Also, it's just like \f(CW$/\fR, but it's what you get \*(L"back\*(R" from Perl.
.IP "\s-1HANDLE\-\s0>autoflush( \s-1EXPR \s0)" 8
.IX Item "HANDLE->autoflush( EXPR )"
.PD 0
.ie n .IP "$OUTPUT_AUTOFLUSH" 8
.el .IP "\f(CW$OUTPUT_AUTOFLUSH\fR" 8
.IX Item "$OUTPUT_AUTOFLUSH"
.IP "$|" 8
.IX Xref "$| autoflush flush $OUTPUT_AUTOFLUSH"
.PD
If set to nonzero, forces a flush right away and after every write or
print on the currently selected output channel.  Default is 0
(regardless of whether the channel is really buffered by the system or
not; \f(CW$|\fR tells you only whether you've asked Perl explicitly to
flush after each write).  \s-1STDOUT\s0 will typically be line buffered if
output is to the terminal and block buffered otherwise.  Setting this
variable is useful primarily when you are outputting to a pipe or
socket, such as when you are running a Perl program under \fBrsh\fR and
want to see the output as it's happening.  This has no effect on input
buffering.  See \*(L"getc\*(R" in perlfunc for that.  See \*(L"select\*(R" in perlfunc on
how to select the output channel.  See also IO::Handle.
.Sp
Mnemonic: when you want your pipes to be piping hot.
.IP "${^LAST_FH}" 8
.IX Xref "${^LAST_FH}"
.IX Item "${^LAST_FH}"
This read-only variable contains a reference to the last-read filehandle.
This is set by \f(CW\*(C`<HANDLE>\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, \f(CW\*(C`tell\*(C'\fR, \f(CW\*(C`eof\*(C'\fR and \f(CW\*(C`seek\*(C'\fR.
This is the same handle that \f(CW$.\fR and \f(CW\*(C`tell\*(C'\fR and \f(CW\*(C`eof\*(C'\fR without arguments
use.  It is also the handle used when Perl appends \*(L", <\s-1STDIN\s0> line 1\*(R" to
an error or warning message.
.Sp
This variable was added in Perl v5.18.0.
.PP
\fIVariables related to formats\fR
.IX Subsection "Variables related to formats"
.PP
The special variables for formats are a subset of those for
filehandles.  See perlform for more information about Perl's
formats.
.ie n .IP "$ACCUMULATOR" 8
.el .IP "\f(CW$ACCUMULATOR\fR" 8
.IX Item "$ACCUMULATOR"
.PD 0
.IP "$^A" 8
.IX Xref "$^A $ACCUMULATOR"
.IX Item "$^A"
.PD
The current value of the \f(CW\*(C`write()\*(C'\fR accumulator for \f(CW\*(C`format()\*(C'\fR lines.
A format contains \f(CW\*(C`formline()\*(C'\fR calls that put their result into
\&\f(CW$^A\fR.  After calling its format, \f(CW\*(C`write()\*(C'\fR prints out the contents
of \f(CW$^A\fR and empties.  So you never really see the contents of \f(CW$^A\fR
unless you call \f(CW\*(C`formline()\*(C'\fR yourself and then look at it.  See
perlform and \*(L"formline \s-1PICTURE,LIST\*(R"\s0 in perlfunc.
.IP "IO::Handle\->format_formfeed(\s-1EXPR\s0)" 8
.IX Item "IO::Handle->format_formfeed(EXPR)"
.PD 0
.ie n .IP "$FORMAT_FORMFEED" 8
.el .IP "\f(CW$FORMAT_FORMFEED\fR" 8
.IX Item "$FORMAT_FORMFEED"
.IP "$^L" 8
.IX Xref "$^L $FORMAT_FORMFEED"
.IX Item "$^L"
.PD
What formats output as a form feed.  The default is \f(CW\*(C`\ef\*(C'\fR.
.Sp
You cannot call \f(CW\*(C`format_formfeed()\*(C'\fR on a handle, only as a static
method.  See IO::Handle.
.IP "\s-1HANDLE\-\s0>format_page_number(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_page_number(EXPR)"
.PD 0
.ie n .IP "$FORMAT_PAGE_NUMBER" 8
.el .IP "\f(CW$FORMAT_PAGE_NUMBER\fR" 8
.IX Item "$FORMAT_PAGE_NUMBER"
.IP "$%" 8
.IX Xref "$% $FORMAT_PAGE_NUMBER"
.PD
The current page number of the currently selected output channel.
.Sp
Mnemonic: \f(CW\*(C`%\*(C'\fR is page number in \fBnroff\fR.
.IP "\s-1HANDLE\-\s0>format_lines_left(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_lines_left(EXPR)"
.PD 0
.ie n .IP "$FORMAT_LINES_LEFT" 8
.el .IP "\f(CW$FORMAT_LINES_LEFT\fR" 8
.IX Item "$FORMAT_LINES_LEFT"
.IP "$\-" 8
.IX Xref "$- $FORMAT_LINES_LEFT"
.PD
The number of lines left on the page of the currently selected output
channel.
.Sp
Mnemonic: lines_on_page \- lines_printed.
.IP "IO::Handle\->format_line_break_characters \s-1EXPR\s0" 8
.IX Item "IO::Handle->format_line_break_characters EXPR"
.PD 0
.ie n .IP "$FORMAT_LINE_BREAK_CHARACTERS" 8
.el .IP "\f(CW$FORMAT_LINE_BREAK_CHARACTERS\fR" 8
.IX Item "$FORMAT_LINE_BREAK_CHARACTERS"
.ie n .IP "$:" 8
.el .IP "\f(CW$:\fR" 8
.IX Xref "$: FORMAT_LINE_BREAK_CHARACTERS"
.IX Item "$:"
.PD
The current set of characters after which a string may be broken to
fill continuation fields (starting with \f(CW\*(C`^\*(C'\fR) in a format.  The default is
\&\*(L"\ \en\-\*(R", to break on a space, newline, or a hyphen.
.Sp
You cannot call \f(CW\*(C`format_line_break_characters()\*(C'\fR on a handle, only as
a static method.  See IO::Handle.
.Sp
Mnemonic: a \*(L"colon\*(R" in poetry is a part of a line.
.IP "\s-1HANDLE\-\s0>format_lines_per_page(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_lines_per_page(EXPR)"
.PD 0
.ie n .IP "$FORMAT_LINES_PER_PAGE" 8
.el .IP "\f(CW$FORMAT_LINES_PER_PAGE\fR" 8
.IX Item "$FORMAT_LINES_PER_PAGE"
.IP "$=" 8
.IX Xref "$= $FORMAT_LINES_PER_PAGE"
.PD
The current page length (printable lines) of the currently selected
output channel.  The default is 60.
.Sp
Mnemonic: = has horizontal lines.
.IP "\s-1HANDLE\-\s0>format_top_name(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_top_name(EXPR)"
.PD 0
.ie n .IP "$FORMAT_TOP_NAME" 8
.el .IP "\f(CW$FORMAT_TOP_NAME\fR" 8
.IX Item "$FORMAT_TOP_NAME"
.IP "$^" 8
.IX Xref "$^ $FORMAT_TOP_NAME"
.PD
The name of the current top-of-page format for the currently selected
output channel.  The default is the name of the filehandle with \f(CW\*(C`_TOP\*(C'\fR
appended.  For example, the default format top name for the \f(CW\*(C`STDOUT\*(C'\fR
filehandle is \f(CW\*(C`STDOUT_TOP\*(C'\fR.
.Sp
Mnemonic: points to top of page.
.IP "\s-1HANDLE\-\s0>format_name(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_name(EXPR)"
.PD 0
.ie n .IP "$FORMAT_NAME" 8
.el .IP "\f(CW$FORMAT_NAME\fR" 8
.IX Item "$FORMAT_NAME"
.IP "$~" 8
.IX Xref "$~ $FORMAT_NAME"
.PD
The name of the current report format for the currently selected
output channel.  The default format name is the same as the filehandle
name.  For example, the default format name for the \f(CW\*(C`STDOUT\*(C'\fR
filehandle is just \f(CW\*(C`STDOUT\*(C'\fR.
.Sp
Mnemonic: brother to \f(CW$^\fR.
.SS "Error Variables"
.IX Xref "error exception"
.IX Subsection "Error Variables"
The variables \f(CW$@\fR, \f(CW$!\fR, \f(CW$^E\fR, and \f(CW$?\fR contain information
about different types of error conditions that may appear during
execution of a Perl program.  The variables are shown ordered by
the \*(L"distance\*(R" between the subsystem which reported the error and
the Perl process.  They correspond to errors detected by the Perl
interpreter, C library, operating system, or an external program,
respectively.
.PP
To illustrate the differences between these variables, consider the
following Perl expression, which uses a single-quoted string.  After
execution of this statement, perl may have set all four special error
variables:
.PP
.Vb 5
\&    eval q{
\&        open my $pipe, "/cdrom/install |" or die $!;
\&        my @res = <$pipe>;
\&        close $pipe or die "bad pipe: $?, $!";
\&    };
.Ve
.PP
When perl executes the \f(CW\*(C`eval()\*(C'\fR expression, it translates the
\&\f(CW\*(C`open()\*(C'\fR, \f(CW\*(C`<PIPE>\*(C'\fR, and \f(CW\*(C`close\*(C'\fR calls in the C run-time library
and thence to the operating system kernel.  perl sets \f(CW$!\fR to
the C library's \f(CW\*(C`errno\*(C'\fR if one of these calls fails.
.PP
\&\f(CW$@\fR is set if the string to be \f(CW\*(C`eval\*(C'\fR\-ed did not compile (this may
happen if \f(CW\*(C`open\*(C'\fR or \f(CW\*(C`close\*(C'\fR were imported with bad prototypes), or
if Perl code executed during evaluation \f(CW\*(C`die()\*(C'\fRd.  In these cases the
value of \f(CW$@\fR is the compile error, or the argument to \f(CW\*(C`die\*(C'\fR (which
will interpolate \f(CW$!\fR and \f(CW$?\fR).  (See also Fatal, though.)
.PP
Under a few operating systems, \f(CW$^E\fR may contain a more verbose error
indicator, such as in this case, \*(L"\s-1CDROM\s0 tray not closed.\*(R"  Systems that
do not support extended error messages leave \f(CW$^E\fR the same as \f(CW$!\fR.
.PP
Finally, \f(CW$?\fR may be set to non\-0 value if the external program
\&\fI/cdrom/install\fR fails.  The upper eight bits reflect specific error
conditions encountered by the program (the program's \f(CW\*(C`exit()\*(C'\fR value).
The lower eight bits reflect mode of failure, like signal death and
core dump information.  See \fIwait\fR\|(2) for details.  In contrast to
\&\f(CW$!\fR and \f(CW$^E\fR, which are set only if error condition is detected,
the variable \f(CW$?\fR is set on each \f(CW\*(C`wait\*(C'\fR or pipe \f(CW\*(C`close\*(C'\fR,
overwriting the old value.  This is more like \f(CW$@\fR, which on every
\&\f(CW\*(C`eval()\*(C'\fR is always set on failure and cleared on success.
.PP
For more details, see the individual descriptions at \f(CW$@\fR, \f(CW$!\fR,
\&\f(CW$^E\fR, and \f(CW$?\fR.
.IP "${^CHILD_ERROR_NATIVE}" 8
.IX Xref "$^CHILD_ERROR_NATIVE"
.IX Item "${^CHILD_ERROR_NATIVE}"
The native status returned by the last pipe close, backtick (\f(CW\*(C`\`\`\*(C'\fR)
command, successful call to \f(CW\*(C`wait()\*(C'\fR or \f(CW\*(C`waitpid()\*(C'\fR, or from the
\&\f(CW\*(C`system()\*(C'\fR operator.  On POSIX-like systems this value can be decoded
with the \s-1WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED,
WSTOPSIG\s0 and \s-1WIFCONTINUED\s0 functions provided by the \s-1POSIX\s0 module.
.Sp
Under \s-1VMS\s0 this reflects the actual \s-1VMS\s0 exit status; i.e. it is the
same as \f(CW$?\fR when the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR is in effect.
.Sp
This variable was added in Perl v5.10.0.
.ie n .IP "$EXTENDED_OS_ERROR" 8
.el .IP "\f(CW$EXTENDED_OS_ERROR\fR" 8
.IX Item "$EXTENDED_OS_ERROR"
.PD 0
.IP "$^E" 8
.IX Xref "$^E $EXTENDED_OS_ERROR"
.IX Item "$^E"
.PD
Error information specific to the current operating system.  At the
moment, this differs from \f(CW$!\fR under only \s-1VMS, OS/2,\s0 and Win32 (and
for MacPerl).  On all other platforms, \f(CW$^E\fR is always just the same
as \f(CW$!\fR.
.Sp
Under \s-1VMS, \s0\f(CW$^E\fR provides the \s-1VMS\s0 status value from the last system
error.  This is more specific information about the last system error
than that provided by \f(CW$!\fR.  This is particularly important when \f(CW$!\fR
is set to \fB\s-1EVMSERR\s0\fR.
.Sp
Under \s-1OS/2, \s0\f(CW$^E\fR is set to the error code of the last call to \s-1OS/2
API\s0 either via \s-1CRT,\s0 or directly from perl.
.Sp
Under Win32, \f(CW$^E\fR always returns the last error information reported
by the Win32 call \f(CW\*(C`GetLastError()\*(C'\fR which describes the last error
from within the Win32 \s-1API. \s0 Most Win32\-specific code will report errors
via \f(CW$^E\fR.  \s-1ANSI C\s0 and Unix-like calls set \f(CW\*(C`errno\*(C'\fR and so most
portable Perl code will report errors via \f(CW$!\fR.
.Sp
Caveats mentioned in the description of \f(CW$!\fR generally apply to
\&\f(CW$^E\fR, also.
.Sp
This variable was added in Perl 5.003.
.Sp
Mnemonic: Extra error explanation.
.ie n .IP "$EXCEPTIONS_BEING_CAUGHT" 8
.el .IP "\f(CW$EXCEPTIONS_BEING_CAUGHT\fR" 8
.IX Item "$EXCEPTIONS_BEING_CAUGHT"
.PD 0
.IP "$^S" 8
.IX Xref "$^S $EXCEPTIONS_BEING_CAUGHT"
.IX Item "$^S"
.PD
Current state of the interpreter.
.Sp
.Vb 5
\&        $^S         State
\&        \-\-\-\-\-\-\-\-\-   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        undef       Parsing module, eval, or main program
\&        true (1)    Executing an eval
\&        false (0)   Otherwise
.Ve
.Sp
The first state may happen in \f(CW$SIG{_\|_DIE_\|_}\fR and \f(CW$SIG{_\|_WARN_\|_}\fR
handlers.
.Sp
The English name \f(CW$EXCEPTIONS_BEING_CAUGHT\fR is slightly misleading, because
the \f(CW\*(C`undef\*(C'\fR value does not indicate whether exceptions are being caught,
since compilation of the main program does not catch exceptions.
.Sp
This variable was added in Perl 5.004.
.ie n .IP "$WARNING" 8
.el .IP "\f(CW$WARNING\fR" 8
.IX Item "$WARNING"
.PD 0
.IP "$^W" 8
.IX Xref "$^W $WARNING"
.IX Item "$^W"
.PD
The current value of the warning switch, initially true if \fB\-w\fR was
used, false otherwise, but directly modifiable.
.Sp
See also warnings.
.Sp
Mnemonic: related to the \fB\-w\fR switch.
.IP "${^WARNING_BITS}" 8
.IX Xref "${^WARNING_BITS}"
.IX Item "${^WARNING_BITS}"
The current set of warning checks enabled by the \f(CW\*(C`use warnings\*(C'\fR pragma.
It has the same scoping as the \f(CW$^H\fR and \f(CW\*(C`%^H\*(C'\fR variables.  The exact
values are considered internal to the warnings pragma and may change
between versions of Perl.
.Sp
This variable was added in Perl v5.6.0.
.ie n .IP "$OS_ERROR" 8
.el .IP "\f(CW$OS_ERROR\fR" 8
.IX Item "$OS_ERROR"
.PD 0
.ie n .IP "$ERRNO" 8
.el .IP "\f(CW$ERRNO\fR" 8
.IX Item "$ERRNO"
.IP "$!" 8
.IX Xref "$! $ERRNO $OS_ERROR"
.PD
When referenced, \f(CW$!\fR retrieves the current value
of the C \f(CW\*(C`errno\*(C'\fR integer variable.
If \f(CW$!\fR is assigned a numerical value, that value is stored in \f(CW\*(C`errno\*(C'\fR.
When referenced as a string, \f(CW$!\fR yields the system error string
corresponding to \f(CW\*(C`errno\*(C'\fR.
.Sp
Many system or library calls set \f(CW\*(C`errno\*(C'\fR if they fail,
to indicate the cause of failure.  They usually do \fBnot\fR
set \f(CW\*(C`errno\*(C'\fR to zero if they succeed.  This means \f(CW\*(C`errno\*(C'\fR,
hence \f(CW$!\fR, is meaningful only \fIimmediately\fR after a \fBfailure\fR:
.Sp
.Vb 11
\&    if (open my $fh, "<", $filename) {
\&                # Here $! is meaningless.
\&                ...
\&    }
\&    else {
\&                # ONLY here is $! meaningful.
\&                ...
\&                # Already here $! might be meaningless.
\&    }
\&    # Since here we might have either success or failure,
\&    # $! is meaningless.
.Ve
.Sp
Here, \fImeaningless\fR means that \f(CW$!\fR may be unrelated to the outcome
of the \f(CW\*(C`open()\*(C'\fR operator.  Assignment to \f(CW$!\fR is similarly ephemeral.
It can be used immediately before invoking the \f(CW\*(C`die()\*(C'\fR operator,
to set the exit value, or to inspect the system error string
corresponding to error \fIn\fR, or to restore \f(CW$!\fR to a meaningful state.
.Sp
Mnemonic: What just went bang?
.ie n .IP "%OS_ERROR" 8
.el .IP "\f(CW%OS_ERROR\fR" 8
.IX Item "%OS_ERROR"
.PD 0
.ie n .IP "%ERRNO" 8
.el .IP "\f(CW%ERRNO\fR" 8
.IX Item "%ERRNO"
.IP "%!" 8
.IX Xref "%! %OS_ERROR %ERRNO"
.PD
Each element of \f(CW\*(C`%!\*(C'\fR has a true value only if \f(CW$!\fR is set to that
value.  For example, \f(CW$!{ENOENT}\fR is true if and only if the current
value of \f(CW$!\fR is \f(CW\*(C`ENOENT\*(C'\fR; that is, if the most recent error was \*(L"No
such file or directory\*(R" (or its moral equivalent: not all operating
systems give that exact error, and certainly not all languages).  To
check if a particular key is meaningful on your system, use \f(CW\*(C`exists
$!{the_key}\*(C'\fR; for a list of legal keys, use \f(CW\*(C`keys %!\*(C'\fR.  See Errno
for more information, and also see \*(L"$!\*(R".
.Sp
This variable was added in Perl 5.005.
.ie n .IP "$CHILD_ERROR" 8
.el .IP "\f(CW$CHILD_ERROR\fR" 8
.IX Item "$CHILD_ERROR"
.PD 0
.IP "$?" 8
.IX Xref "$? $CHILD_ERROR"
.PD
The status returned by the last pipe close, backtick (\f(CW\*(C`\`\`\*(C'\fR) command,
successful call to \f(CW\*(C`wait()\*(C'\fR or \f(CW\*(C`waitpid()\*(C'\fR, or from the \f(CW\*(C`system()\*(C'\fR
operator.  This is just the 16\-bit status word returned by the
traditional Unix \f(CW\*(C`wait()\*(C'\fR system call (or else is made up to look
like it).  Thus, the exit value of the subprocess is really (\f(CW\*(C`$? >>
8\*(C'\fR), and \f(CW\*(C`$? & 127\*(C'\fR gives which signal, if any, the process died
from, and \f(CW\*(C`$? & 128\*(C'\fR reports whether there was a core dump.
.Sp
Additionally, if the \f(CW\*(C`h_errno\*(C'\fR variable is supported in C, its value
is returned via \f(CW$?\fR if any \f(CW\*(C`gethost*()\*(C'\fR function fails.
.Sp
If you have installed a signal handler for \f(CW\*(C`SIGCHLD\*(C'\fR, the
value of \f(CW$?\fR will usually be wrong outside that handler.
.Sp
Inside an \f(CW\*(C`END\*(C'\fR subroutine \f(CW$?\fR contains the value that is going to be
given to \f(CW\*(C`exit()\*(C'\fR.  You can modify \f(CW$?\fR in an \f(CW\*(C`END\*(C'\fR subroutine to
change the exit status of your program.  For example:
.Sp
.Vb 3
\&    END {
\&        $? = 1 if $? == 255;  # die would make it 255
\&    }
.Ve
.Sp
Under \s-1VMS,\s0 the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR makes \f(CW$?\fR reflect the
actual \s-1VMS\s0 exit status, instead of the default emulation of \s-1POSIX\s0
status; see \*(L"$?\*(R" in perlvms for details.
.Sp
Mnemonic: similar to \fBsh\fR and \fBksh\fR.
.ie n .IP "$EVAL_ERROR" 8
.el .IP "\f(CW$EVAL_ERROR\fR" 8
.IX Item "$EVAL_ERROR"
.PD 0
.IP "$@" 8
.IX Xref "$@ $EVAL_ERROR"
.PD
The Perl syntax error message from the
last \f(CW\*(C`eval()\*(C'\fR operator.  If \f(CW$@\fR is
the null string, the last \f(CW\*(C`eval()\*(C'\fR parsed and executed correctly
(although the operations you invoked may have failed in the normal
fashion).
.Sp
Warning messages are not collected in this variable.  You can, however,
set up a routine to process warnings by setting \f(CW$SIG{_\|_WARN_\|_}\fR as
described in \*(L"%SIG\*(R".
.Sp
Mnemonic: Where was the syntax error \*(L"at\*(R"?
.SS "Variables related to the interpreter state"
.IX Subsection "Variables related to the interpreter state"
These variables provide information about the current interpreter state.
.ie n .IP "$COMPILING" 8
.el .IP "\f(CW$COMPILING\fR" 8
.IX Item "$COMPILING"
.PD 0
.IP "$^C" 8
.IX Xref "$^C $COMPILING"
.IX Item "$^C"
.PD
The current value of the flag associated with the \fB\-c\fR switch.
Mainly of use with \fB\-MO=...\fR to allow code to alter its behavior
when being compiled, such as for example to \f(CW\*(C`AUTOLOAD\*(C'\fR at compile
time rather than normal, deferred loading.  Setting
\&\f(CW\*(C`$^C = 1\*(C'\fR is similar to calling \f(CW\*(C`B::minus_c\*(C'\fR.
.Sp
This variable was added in Perl v5.6.0.
.ie n .IP "$DEBUGGING" 8
.el .IP "\f(CW$DEBUGGING\fR" 8
.IX Item "$DEBUGGING"
.PD 0
.IP "$^D" 8
.IX Xref "$^D $DEBUGGING"
.IX Item "$^D"
.PD
The current value of the debugging flags.  May be read or set.  Like its
command-line equivalent, you can use numeric or symbolic values, eg
\&\f(CW\*(C`$^D = 10\*(C'\fR or \f(CW\*(C`$^D = "st"\*(C'\fR.
.Sp
Mnemonic: value of \fB\-D\fR switch.
.IP "${^ENCODING}" 8
.IX Xref "${^ENCODING}"
.IX Item "${^ENCODING}"
The \fIobject reference\fR to the \f(CW\*(C`Encode\*(C'\fR object that is used to convert
the source code to Unicode.  Thanks to this variable your Perl script
does not have to be written in \s-1UTF\-8. \s0 Default is \fIundef\fR.  The direct
manipulation of this variable is highly discouraged.
.Sp
This variable was added in Perl 5.8.2.
.IP "${^GLOBAL_PHASE}" 8
.IX Xref "${^GLOBAL_PHASE}"
.IX Item "${^GLOBAL_PHASE}"
The current phase of the perl interpreter.
.Sp
Possible values are:
.RS 8
.IP "\s-1CONSTRUCT\s0" 8
.IX Item "CONSTRUCT"
The \f(CW\*(C`PerlInterpreter*\*(C'\fR is being constructed via \f(CW\*(C`perl_construct\*(C'\fR.  This
value is mostly there for completeness and for use via the
underlying C variable \f(CW\*(C`PL_phase\*(C'\fR.  It's not really possible for Perl
code to be executed unless construction of the interpreter is
finished.
.IP "\s-1START\s0" 8
.IX Item "START"
This is the global compile-time.  That includes, basically, every
\&\f(CW\*(C`BEGIN\*(C'\fR block executed directly or indirectly from during the
compile-time of the top-level program.
.Sp
This phase is not called \*(L"\s-1BEGIN\*(R"\s0 to avoid confusion with
\&\f(CW\*(C`BEGIN\*(C'\fR\-blocks, as those are executed during compile-time of any
compilation unit, not just the top-level program.  A new, localised
compile-time entered at run-time, for example by constructs as
\&\f(CW\*(C`eval "use SomeModule"\*(C'\fR are not global interpreter phases, and
therefore aren't reflected by \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR.
.IP "\s-1CHECK\s0" 8
.IX Item "CHECK"
Execution of any \f(CW\*(C`CHECK\*(C'\fR blocks.
.IP "\s-1INIT\s0" 8
.IX Item "INIT"
Similar to \*(L"\s-1CHECK\*(R",\s0 but for \f(CW\*(C`INIT\*(C'\fR\-blocks, not \f(CW\*(C`CHECK\*(C'\fR blocks.
.IP "\s-1RUN\s0" 8
.IX Item "RUN"
The main run-time, i.e. the execution of \f(CW\*(C`PL_main_root\*(C'\fR.
.IP "\s-1END\s0" 8
.IX Item "END"
Execution of any \f(CW\*(C`END\*(C'\fR blocks.
.IP "\s-1DESTRUCT\s0" 8
.IX Item "DESTRUCT"
Global destruction.
.RE
.RS 8
.Sp
Also note that there's no value for UNITCHECK-blocks.  That's because
those are run for each compilation unit individually, and therefore is
not a global interpreter phase.
.Sp
Not every program has to go through each of the possible phases, but
transition from one phase to another can only happen in the order
described in the above list.
.Sp
An example of all of the phases Perl code can see:
.Sp
.Vb 1
\&    BEGIN { print "compile\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    INIT  { print "init\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    CHECK { print "check\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    {
\&        package Print::Phase;
\&
\&        sub new {
\&            my ($class, $time) = @_;
\&            return bless \e$time, $class;
\&        }
\&
\&        sub DESTROY {
\&            my $self = shift;
\&            print "$$self: ${^GLOBAL_PHASE}\en";
\&        }
\&    }
\&
\&    print "run\-time: ${^GLOBAL_PHASE}\en";
\&
\&    my $runtime = Print::Phase\->new(
\&        "lexical variables are garbage collected before END"
\&    );
\&
\&    END   { print "end\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    our $destruct = Print::Phase\->new(
\&        "package variables are garbage collected after END"
\&    );
.Ve
.Sp
This will print out
.Sp
.Vb 7
\&    compile\-time: START
\&    check\-time: CHECK
\&    init\-time: INIT
\&    run\-time: RUN
\&    lexical variables are garbage collected before END: RUN
\&    end\-time: END
\&    package variables are garbage collected after END: DESTRUCT
.Ve
.Sp
This variable was added in Perl 5.14.0.
.RE
.IP "$^H" 8
.IX Xref "$^H"
.IX Item "$^H"
\&\s-1WARNING:\s0 This variable is strictly for
internal use only.  Its availability,
behavior, and contents are subject to change without notice.
.Sp
This variable contains compile-time hints for the Perl interpreter.  At the
end of compilation of a \s-1BLOCK\s0 the value of this variable is restored to the
value when the interpreter started to compile the \s-1BLOCK.\s0
.Sp
When perl begins to parse any block construct that provides a lexical scope
(e.g., eval body, required file, subroutine body, loop body, or conditional
block), the existing value of \f(CW$^H\fR is saved, but its value is left unchanged.
When the compilation of the block is completed, it regains the saved value.
Between the points where its value is saved and restored, code that
executes within \s-1BEGIN\s0 blocks is free to change the value of \f(CW$^H\fR.
.Sp
This behavior provides the semantic of lexical scoping, and is used in,
for instance, the \f(CW\*(C`use strict\*(C'\fR pragma.
.Sp
The contents should be an integer; different bits of it are used for
different pragmatic flags.  Here's an example:
.Sp
.Vb 1
\&    sub add_100 { $^H |= 0x100 }
\&
\&    sub foo {
\&        BEGIN { add_100() }
\&        bar\->baz($boon);
\&    }
.Ve
.Sp
Consider what happens during execution of the \s-1BEGIN\s0 block.  At this point
the \s-1BEGIN\s0 block has already been compiled, but the body of \f(CW\*(C`foo()\*(C'\fR is still
being compiled.  The new value of \f(CW$^H\fR
will therefore be visible only while
the body of \f(CW\*(C`foo()\*(C'\fR is being compiled.
.Sp
Substitution of \f(CW\*(C`BEGIN { add_100() }\*(C'\fR block with:
.Sp
.Vb 1
\&    BEGIN { require strict; strict\->import(\*(Aqvars\*(Aq) }
.Ve
.Sp
demonstrates how \f(CW\*(C`use strict \*(Aqvars\*(Aq\*(C'\fR is implemented.  Here's a conditional
version of the same lexical pragma:
.Sp
.Vb 3
\&    BEGIN {
\&        require strict; strict\->import(\*(Aqvars\*(Aq) if $condition
\&    }
.Ve
.Sp
This variable was added in Perl 5.003.
.IP "%^H" 8
.IX Xref "%^H"
.IX Item "%^H"
The \f(CW\*(C`%^H\*(C'\fR hash provides the same scoping semantic as \f(CW$^H\fR.  This makes
it useful for implementation of lexically scoped pragmas.  See
perlpragma.
.Sp
When putting items into \f(CW\*(C`%^H\*(C'\fR, in order to avoid conflicting with other
users of the hash there is a convention regarding which keys to use.
A module should use only keys that begin with the module's name (the
name of its main package) and a \*(L"/\*(R" character.  For example, a module
\&\f(CW\*(C`Foo::Bar\*(C'\fR should use keys such as \f(CW\*(C`Foo::Bar/baz\*(C'\fR.
.Sp
This variable was added in Perl v5.6.0.
.IP "${^OPEN}" 8
.IX Xref "${^OPEN}"
.IX Item "${^OPEN}"
An internal variable used by PerlIO.  A string in two parts, separated
by a \f(CW\*(C`\e0\*(C'\fR byte, the first part describes the input layers, the second
part describes the output layers.
.Sp
This variable was added in Perl v5.8.0.
.ie n .IP "$PERLDB" 8
.el .IP "\f(CW$PERLDB\fR" 8
.IX Item "$PERLDB"
.PD 0
.IP "$^P" 8
.IX Xref "$^P $PERLDB"
.IX Item "$^P"
.PD
The internal variable for debugging support.  The meanings of the
various bits are subject to change, but currently indicate:
.RS 8
.IP "0x01" 6
.IX Item "0x01"
Debug subroutine enter/exit.
.IP "0x02" 6
.IX Item "0x02"
Line-by-line debugging.  Causes \f(CW\*(C`DB::DB()\*(C'\fR subroutine to be called for
each statement executed.  Also causes saving source code lines (like
0x400).
.IP "0x04" 6
.IX Item "0x04"
Switch off optimizations.
.IP "0x08" 6
.IX Item "0x08"
Preserve more data for future interactive inspections.
.IP "0x10" 6
.IX Item "0x10"
Keep info about source lines on which a subroutine is defined.
.IP "0x20" 6
.IX Item "0x20"
Start with single-step on.
.IP "0x40" 6
.IX Item "0x40"
Use subroutine address instead of name when reporting.
.IP "0x80" 6
.IX Item "0x80"
Report \f(CW\*(C`goto &subroutine\*(C'\fR as well.
.IP "0x100" 6
.IX Item "0x100"
Provide informative \*(L"file\*(R" names for evals based on the place they were compiled.
.IP "0x200" 6
.IX Item "0x200"
Provide informative names to anonymous subroutines based on the place they
were compiled.
.IP "0x400" 6
.IX Item "0x400"
Save source code lines into \f(CW\*(C`@{"_<$filename"}\*(C'\fR.
.RE
.RS 8
.Sp
Some bits may be relevant at compile-time only, some at
run-time only.  This is a new mechanism and the details may change.
See also perldebguts.
.RE
.IP "${^TAINT}" 8
.IX Xref "${^TAINT}"
.IX Item "${^TAINT}"
Reflects if taint mode is on or off.  1 for on (the program was run with
\&\fB\-T\fR), 0 for off, \-1 when only taint warnings are enabled (i.e. with
\&\fB\-t\fR or \fB\-TU\fR).
.Sp
This variable is read-only.
.Sp
This variable was added in Perl v5.8.0.
.IP "${^UNICODE}" 8
.IX Xref "${^UNICODE}"
.IX Item "${^UNICODE}"
Reflects certain Unicode settings of Perl.  See perlrun
documentation for the \f(CW\*(C`\-C\*(C'\fR switch for more information about
the possible values.
.Sp
This variable is set during Perl startup and is thereafter read-only.
.Sp
This variable was added in Perl v5.8.2.
.IP "${^UTF8CACHE}" 8
.IX Xref "${^UTF8CACHE}"
.IX Item "${^UTF8CACHE}"
This variable controls the state of the internal \s-1UTF\-8\s0 offset caching code.
1 for on (the default), 0 for off, \-1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.
.Sp
This variable was added in Perl v5.8.9.  It is subject to change or
removal without notice, but is currently used to avoid recalculating the
boundaries of multi-byte UTF\-8\-encoded characters.
.IP "${^UTF8LOCALE}" 8
.IX Xref "${^UTF8LOCALE}"
.IX Item "${^UTF8LOCALE}"
This variable indicates whether a \s-1UTF\-8\s0 locale was detected by perl at
startup.  This information is used by perl when it's in
adjust\-utf8ness\-to\-locale mode (as when run with the \f(CW\*(C`\-CL\*(C'\fR command-line
switch); see perlrun for more info on this.
.Sp
This variable was added in Perl v5.8.8.
.SS "Deprecated and removed variables"
.IX Subsection "Deprecated and removed variables"
Deprecating a variable announces the intent of the perl maintainers to
eventually remove the variable from the language.  It may still be
available despite its status.  Using a deprecated variable triggers
a warning.
.PP
Once a variable is removed, its use triggers an error telling you
the variable is unsupported.
.PP
See perldiag for details about error messages.
.ie n .IP "$OFMT" 8
.el .IP "\f(CW$OFMT\fR" 8
.IX Item "$OFMT"
.PD 0
.IP "$#" 8
.IX Xref "$# $OFMT"
.PD
\&\f(CW$#\fR was a variable that could be used to format printed numbers.
After a deprecation cycle, its magic was removed in Perl v5.10.0 and
using it now triggers a warning: \f(CW\*(C`$# is no longer supported\*(C'\fR.
.Sp
This is not the sigil you use in front of an array name to get the
last index, like \f(CW$#array\fR.  That's still how you get the last index
of an array in Perl.  The two have nothing to do with each other.
.Sp
Deprecated in Perl 5.
.Sp
Removed in Perl v5.10.0.
.IP "$*" 8
.IX Xref "$*"
\&\f(CW$*\fR was a variable that you could use to enable multiline matching.
After a deprecation cycle, its magic was removed in Perl v5.10.0.
Using it now triggers a warning: \f(CW\*(C`$* is no longer supported\*(C'\fR.
You should use the \f(CW\*(C`/s\*(C'\fR and \f(CW\*(C`/m\*(C'\fR regexp modifiers instead.
.Sp
Deprecated in Perl 5.
.Sp
Removed in Perl v5.10.0.
.ie n .IP "$ARRAY_BASE" 8
.el .IP "\f(CW$ARRAY_BASE\fR" 8
.IX Item "$ARRAY_BASE"
.PD 0
.IP "$[" 8
.IX Xref "$[ $ARRAY_BASE"
.PD
This variable stores the index of the first element in an array, and
of the first character in a substring.  The default is 0, but you could
theoretically set it to 1 to make Perl behave more like \fBawk\fR (or Fortran)
when subscripting and when evaluating the \fIindex()\fR and \fIsubstr()\fR functions.
.Sp
As of release 5 of Perl, assignment to \f(CW$[\fR is treated as a compiler
directive, and cannot influence the behavior of any other file.
(That's why you can only assign compile-time constants to it.)
Its use is highly discouraged.
.Sp
Prior to Perl v5.10.0, assignment to \f(CW$[\fR could be seen from outer lexical
scopes in the same file, unlike other compile-time directives (such as
strict).  Using \fIlocal()\fR on it would bind its value strictly to a lexical
block.  Now it is always lexically scoped.
.Sp
As of Perl v5.16.0, it is implemented by the arybase module.  See
arybase for more details on its behaviour.
.Sp
Under \f(CW\*(C`use v5.16\*(C'\fR, or \f(CW\*(C`no feature "array_base"\*(C'\fR, \f(CW$[\fR no longer has any
effect, and always contains 0.  Assigning 0 to it is permitted, but any
other value will produce an error.
.Sp
Mnemonic: [ begins subscripts.
.Sp
Deprecated in Perl v5.12.0.
.ie n .IP "$OLD_PERL_VERSION" 8
.el .IP "\f(CW$OLD_PERL_VERSION\fR" 8
.IX Item "$OLD_PERL_VERSION"
.PD 0
.IP "$]" 8
.IX Xref "$] $OLD_PERL_VERSION"
.PD
See \*(L"$^V\*(R" for a more modern representation of the Perl version that allows
accurate string comparisons.
.Sp
The version + patchlevel / 1000 of the Perl interpreter.  This variable
can be used to determine whether the Perl interpreter executing a
script is in the right range of versions:
.Sp
.Vb 1
\&    warn "No checksumming!\en" if $] < 3.019;
.Ve
.Sp
The floating point representation can sometimes lead to inaccurate
numeric comparisons.
.Sp
See also the documentation of \f(CW\*(C`use VERSION\*(C'\fR and \f(CW\*(C`require VERSION\*(C'\fR
for a convenient way to fail if the running Perl interpreter is too old.
.Sp
Mnemonic: Is this version of perl in the right bracket?
                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvar5.16.1                                0100644 0001750 0001750 00000266345 12566207427 022750  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVAR 1"
.TH PERLVAR 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvar \- Perl predefined variables
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "The Syntax of Variable Names"
.IX Subsection "The Syntax of Variable Names"
Variable names in Perl can have several formats.  Usually, they
must begin with a letter or underscore, in which case they can be
arbitrarily long (up to an internal limit of 251 characters) and
may contain letters, digits, underscores, or the special sequence
\&\f(CW\*(C`::\*(C'\fR or \f(CW\*(C`\*(Aq\*(C'\fR.  In this case, the part before the last \f(CW\*(C`::\*(C'\fR or
\&\f(CW\*(C`\*(Aq\*(C'\fR is taken to be a \fIpackage qualifier\fR; see perlmod.
.PP
Perl variable names may also be a sequence of digits or a single
punctuation or control character.  These names are all reserved for
special uses by Perl; for example, the all-digits names are used
to hold data captured by backreferences after a regular expression
match.  Perl has a special syntax for the single-control-character
names: It understands \f(CW\*(C`^X\*(C'\fR (caret \f(CW\*(C`X\*(C'\fR) to mean the control\-\f(CW\*(C`X\*(C'\fR
character.  For example, the notation \f(CW$^W\fR (dollar-sign caret
\&\f(CW\*(C`W\*(C'\fR) is the scalar variable whose name is the single character
control\-\f(CW\*(C`W\*(C'\fR.  This is better than typing a literal control\-\f(CW\*(C`W\*(C'\fR
into your program.
.PP
Since Perl 5.6, Perl variable names may be alphanumeric
strings that begin with control characters (or better yet, a caret).
These variables must be written in the form \f(CW\*(C`${^Foo}\*(C'\fR; the braces
are not optional.  \f(CW\*(C`${^Foo}\*(C'\fR denotes the scalar variable whose
name is a control\-\f(CW\*(C`F\*(C'\fR followed by two \f(CW\*(C`o\*(C'\fR's.  These variables are
reserved for future special uses by Perl, except for the ones that
begin with \f(CW\*(C`^_\*(C'\fR (control-underscore or caret-underscore).  No
control-character name that begins with \f(CW\*(C`^_\*(C'\fR will acquire a special
meaning in any future version of Perl; such names may therefore be
used safely in programs.  \f(CW$^_\fR itself, however, \fIis\fR reserved.
.PP
Perl identifiers that begin with digits, control characters, or
punctuation characters are exempt from the effects of the \f(CW\*(C`package\*(C'\fR
declaration and are always forced to be in package \f(CW\*(C`main\*(C'\fR; they are
also exempt from \f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR errors.  A few other names are also
exempt in these ways:
.PP
.Vb 5
\&    ENV      STDIN
\&    INC      STDOUT
\&    ARGV     STDERR
\&    ARGVOUT
\&    SIG
.Ve
.PP
In particular, the special \f(CW\*(C`${^_XYZ}\*(C'\fR variables are always taken
to be in package \f(CW\*(C`main\*(C'\fR, regardless of any \f(CW\*(C`package\*(C'\fR declarations
presently in scope.
.SH "SPECIAL VARIABLES"
.IX Header "SPECIAL VARIABLES"
The following names have special meaning to Perl.  Most punctuation
names have reasonable mnemonics, or analogs in the shells.
Nevertheless, if you wish to use long variable names, you need only say:
.PP
.Vb 1
\&    use English;
.Ve
.PP
at the top of your program.  This aliases all the short names to the long
names in the current package.  Some even have medium names, generally
borrowed from \fBawk\fR.  To avoid a performance hit, if you don't need the
\&\f(CW$PREMATCH\fR, \f(CW$MATCH\fR, or \f(CW$POSTMATCH\fR it's best to use the \f(CW\*(C`English\*(C'\fR
module without them:
.PP
.Vb 1
\&    use English \*(Aq\-no_match_vars\*(Aq;
.Ve
.PP
Before you continue, note the sort order for variables.  In general, we
first list the variables in case-insensitive, almost-lexigraphical
order (ignoring the \f(CW\*(C`{\*(C'\fR or \f(CW\*(C`^\*(C'\fR preceding words, as in \f(CW\*(C`${^UNICODE}\*(C'\fR
or \f(CW$^T\fR), although \f(CW$_\fR and \f(CW@_\fR move up to the top of the pile.
For variables with the same identifier, we list it in order of scalar,
array, hash, and bareword.
.SS "General Variables"
.IX Subsection "General Variables"
.ie n .IP "$ARG" 8
.el .IP "\f(CW$ARG\fR" 8
.IX Item "$ARG"
.PD 0
.ie n .IP "$_" 8
.el .IP "\f(CW$_\fR" 8
.IX Xref "$_ $ARG"
.IX Item "$_"
.PD
The default input and pattern-searching space.  The following pairs are
equivalent:
.Sp
.Vb 2
\&    while (<>) {...}    # equivalent only in while!
\&    while (defined($_ = <>)) {...}
\&
\&    /^Subject:/
\&    $_ =~ /^Subject:/
\&
\&    tr/a\-z/A\-Z/
\&    $_ =~ tr/a\-z/A\-Z/
\&
\&    chomp
\&    chomp($_)
.Ve
.Sp
Here are the places where Perl will assume \f(CW$_\fR even if you don't use it:
.RS 8
.IP "\(bu" 3
The following functions use \f(CW$_\fR as a default argument:
.Sp
abs, alarm, chomp, chop, chr, chroot,
cos, defined, eval, evalbytes, exp, glob,
hex, int, lc, lcfirst, length, log, lstat, mkdir, oct, ord, pos, print,
quotemeta, readlink, readpipe, ref, require, reverse (in scalar context only),
rmdir, sin, split (on its second argument), sqrt, stat, study, uc, ucfirst,
unlink, unpack.
.IP "\(bu" 3
All file tests (\f(CW\*(C`\-f\*(C'\fR, \f(CW\*(C`\-d\*(C'\fR) except for \f(CW\*(C`\-t\*(C'\fR, which defaults to \s-1STDIN\s0.
See \*(L"\-X\*(R" in perlfunc
.IP "\(bu" 3
The pattern matching operations \f(CW\*(C`m//\*(C'\fR, \f(CW\*(C`s///\*(C'\fR and \f(CW\*(C`tr///\*(C'\fR (aka \f(CW\*(C`y///\*(C'\fR)
when used without an \f(CW\*(C`=~\*(C'\fR operator.
.IP "\(bu" 3
The default iterator variable in a \f(CW\*(C`foreach\*(C'\fR loop if no other
variable is supplied.
.IP "\(bu" 3
The implicit iterator variable in the \f(CW\*(C`grep()\*(C'\fR and \f(CW\*(C`map()\*(C'\fR functions.
.IP "\(bu" 3
The implicit variable of \f(CW\*(C`given()\*(C'\fR.
.IP "\(bu" 3
The default place to put an input record when a \f(CW\*(C`<FH>\*(C'\fR
operation's result is tested by itself as the sole criterion of a \f(CW\*(C`while\*(C'\fR
test.  Outside a \f(CW\*(C`while\*(C'\fR test, this will not happen.
.RE
.RS 8
.Sp
As \f(CW$_\fR is a global variable, this may lead in some cases to unwanted
side-effects.  As of perl 5.10, you can now use a lexical version of
\&\f(CW$_\fR by declaring it in a file or in a block with \f(CW\*(C`my\*(C'\fR.  Moreover,
declaring \f(CW\*(C`our $_\*(C'\fR restores the global \f(CW$_\fR in the current scope.
.Sp
Mnemonic: underline is understood in certain operations.
.RE
.ie n .IP "@ARG" 8
.el .IP "\f(CW@ARG\fR" 8
.IX Item "@ARG"
.PD 0
.ie n .IP "@_" 8
.el .IP "\f(CW@_\fR" 8
.IX Xref "@_ @ARG"
.IX Item "@_"
.PD
Within a subroutine the array \f(CW@_\fR contains the parameters passed to
that subroutine.  Inside a subroutine, \f(CW@_\fR is the default array for
the array operators \f(CW\*(C`push\*(C'\fR, \f(CW\*(C`pop\*(C'\fR, \f(CW\*(C`shift\*(C'\fR, and \f(CW\*(C`unshift\*(C'\fR.
.Sp
See perlsub.
.ie n .IP "$LIST_SEPARATOR" 8
.el .IP "\f(CW$LIST_SEPARATOR\fR" 8
.IX Item "$LIST_SEPARATOR"
.PD 0
.IP "$""" 8
.IX Xref "$"" $LIST_SEPARATOR"
.PD
When an array or an array slice is interpolated into a double-quoted
string or a similar context such as \f(CW\*(C`/.../\*(C'\fR, its elements are
separated by this value.  Default is a space.  For example, this:
.Sp
.Vb 1
\&    print "The array is: @array\en";
.Ve
.Sp
is equivalent to this:
.Sp
.Vb 1
\&    print "The array is: " . join($", @array) . "\en";
.Ve
.Sp
Mnemonic: works in double-quoted context.
.ie n .IP "$PROCESS_ID" 8
.el .IP "\f(CW$PROCESS_ID\fR" 8
.IX Item "$PROCESS_ID"
.PD 0
.ie n .IP "$PID" 8
.el .IP "\f(CW$PID\fR" 8
.IX Item "$PID"
.IP "$$" 8
.IX Xref "$$ $PID $PROCESS_ID"
.PD
The process number of the Perl running this script.  Though you \fIcan\fR set
this variable, doing so is generally discouraged, although it can be
invaluable for some testing purposes.  It will be reset automatically
across \f(CW\*(C`fork()\*(C'\fR calls.
.Sp
Note for Linux and Debian GNU/kFreeBSD users: Before Perl v5.16.0 perl
would emulate \s-1POSIX\s0 semantics on Linux systems using LinuxThreads, a
partial implementation of \s-1POSIX\s0 Threads that has since been superseded
by the Native \s-1POSIX\s0 Thread Library (\s-1NPTL\s0).
.Sp
LinuxThreads is now obsolete on Linux, and and caching \f(CW\*(C`getpid()\*(C'\fR
like this made embedding perl unnecessarily complex (since you'd have
to manually update the value of $$), so now \f(CW$$\fR and \f(CW\*(C`getppid()\*(C'\fR
will always return the same values as the underlying C library.
.Sp
Debian GNU/kFreeBSD systems also used LinuxThreads up until and
including the 6.0 release, but after that moved to FreeBSD thread
semantics, which are POSIX-like.
.Sp
To see if your system is affected by this discrepancy check if
\&\f(CW\*(C`getconf GNU_LIBPTHREAD_VERSION | grep \-q NPTL\*(C'\fR returns a false
value. \s-1NTPL\s0 threads preserve the \s-1POSIX\s0 semantics.
.Sp
Mnemonic: same as shells.
.ie n .IP "$PROGRAM_NAME" 8
.el .IP "\f(CW$PROGRAM_NAME\fR" 8
.IX Item "$PROGRAM_NAME"
.PD 0
.ie n .IP "$0" 8
.el .IP "\f(CW$0\fR" 8
.IX Xref "$0 $PROGRAM_NAME"
.IX Item "$0"
.PD
Contains the name of the program being executed.
.Sp
On some (but not all) operating systems assigning to \f(CW$0\fR modifies
the argument area that the \f(CW\*(C`ps\*(C'\fR program sees.  On some platforms you
may have to use special \f(CW\*(C`ps\*(C'\fR options or a different \f(CW\*(C`ps\*(C'\fR to see the
changes.  Modifying the \f(CW$0\fR is more useful as a way of indicating the
current program state than it is for hiding the program you're
running.
.Sp
Note that there are platform-specific limitations on the maximum
length of \f(CW$0\fR.  In the most extreme case it may be limited to the
space occupied by the original \f(CW$0\fR.
.Sp
In some platforms there may be arbitrary amount of padding, for
example space characters, after the modified name as shown by \f(CW\*(C`ps\*(C'\fR.
In some platforms this padding may extend all the way to the original
length of the argument area, no matter what you do (this is the case
for example with Linux 2.2).
.Sp
Note for \s-1BSD\s0 users: setting \f(CW$0\fR does not completely remove \*(L"perl\*(R"
from the \fIps\fR\|(1) output.  For example, setting \f(CW$0\fR to \f(CW"foobar"\fR may
result in \f(CW"perl: foobar (perl)"\fR (whether both the \f(CW"perl: "\fR prefix
and the \*(L" (perl)\*(R" suffix are shown depends on your exact \s-1BSD\s0 variant
and version).  This is an operating system feature, Perl cannot help it.
.Sp
In multithreaded scripts Perl coordinates the threads so that any
thread may modify its copy of the \f(CW$0\fR and the change becomes visible
to \fIps\fR\|(1) (assuming the operating system plays along).  Note that
the view of \f(CW$0\fR the other threads have will not change since they
have their own copies of it.
.Sp
If the program has been given to perl via the switches \f(CW\*(C`\-e\*(C'\fR or \f(CW\*(C`\-E\*(C'\fR,
\&\f(CW$0\fR will contain the string \f(CW"\-e"\fR.
.Sp
On Linux as of perl 5.14 the legacy process name will be set with
\&\f(CWprctl(2)\fR, in addition to altering the \s-1POSIX\s0 name via \f(CW\*(C`argv[0]\*(C'\fR as
perl has done since version 4.000.  Now system utilities that read the
legacy process name such as ps, top and killall will recognize the
name you set when assigning to \f(CW$0\fR.  The string you supply will be
cut off at 16 bytes, this is a limitation imposed by Linux.
.Sp
Mnemonic: same as \fBsh\fR and \fBksh\fR.
.ie n .IP "$REAL_GROUP_ID" 8
.el .IP "\f(CW$REAL_GROUP_ID\fR" 8
.IX Item "$REAL_GROUP_ID"
.PD 0
.ie n .IP "$GID" 8
.el .IP "\f(CW$GID\fR" 8
.IX Item "$GID"
.IP "$(" 8
.IX Xref "$( $GID $REAL_GROUP_ID"
.PD
The real gid of this process.  If you are on a machine that supports
membership in multiple groups simultaneously, gives a space separated
list of groups you are in.  The first number is the one returned by
\&\f(CW\*(C`getgid()\*(C'\fR, and the subsequent ones by \f(CW\*(C`getgroups()\*(C'\fR, one of which may be
the same as the first number.
.Sp
However, a value assigned to \f(CW$(\fR must be a single number used to
set the real gid.  So the value given by \f(CW$(\fR should \fInot\fR be assigned
back to \f(CW$(\fR without being forced numeric, such as by adding zero.  Note
that this is different to the effective gid (\f(CW$)\fR) which does take a
list.
.Sp
You can change both the real gid and the effective gid at the same
time by using \f(CW\*(C`POSIX::setgid()\*(C'\fR.  Changes
to \f(CW$(\fR require a check to \f(CW$!\fR
to detect any possible errors after an attempted change.
.Sp
Mnemonic: parentheses are used to \fIgroup\fR things.  The real gid is the
group you \fIleft\fR, if you're running setgid.
.ie n .IP "$EFFECTIVE_GROUP_ID" 8
.el .IP "\f(CW$EFFECTIVE_GROUP_ID\fR" 8
.IX Item "$EFFECTIVE_GROUP_ID"
.PD 0
.ie n .IP "$EGID" 8
.el .IP "\f(CW$EGID\fR" 8
.IX Item "$EGID"
.IP "$)" 8
.IX Xref "$) $EGID $EFFECTIVE_GROUP_ID"
.PD
The effective gid of this process.  If you are on a machine that
supports membership in multiple groups simultaneously, gives a space
separated list of groups you are in.  The first number is the one
returned by \f(CW\*(C`getegid()\*(C'\fR, and the subsequent ones by \f(CW\*(C`getgroups()\*(C'\fR,
one of which may be the same as the first number.
.Sp
Similarly, a value assigned to \f(CW$)\fR must also be a space-separated
list of numbers.  The first number sets the effective gid, and
the rest (if any) are passed to \f(CW\*(C`setgroups()\*(C'\fR.  To get the effect of an
empty list for \f(CW\*(C`setgroups()\*(C'\fR, just repeat the new effective gid; that is,
to force an effective gid of 5 and an effectively empty \f(CW\*(C`setgroups()\*(C'\fR
list, say \f(CW\*(C` $) = "5 5" \*(C'\fR.
.Sp
You can change both the effective gid and the real gid at the same
time by using \f(CW\*(C`POSIX::setgid()\*(C'\fR (use only a single numeric argument).
Changes to \f(CW$)\fR require a check to \f(CW$!\fR to detect any possible errors
after an attempted change.
.Sp
\&\f(CW$<\fR, \f(CW$>\fR, \f(CW$(\fR and \f(CW$)\fR can be set only on
machines that support the corresponding \fIset[re][ug]\fIid()\fI\fR routine.  \f(CW$(\fR
and \f(CW$)\fR can be swapped only on machines supporting \f(CW\*(C`setregid()\*(C'\fR.
.Sp
Mnemonic: parentheses are used to \fIgroup\fR things.  The effective gid
is the group that's \fIright\fR for you, if you're running setgid.
.ie n .IP "$REAL_USER_ID" 8
.el .IP "\f(CW$REAL_USER_ID\fR" 8
.IX Item "$REAL_USER_ID"
.PD 0
.ie n .IP "$UID" 8
.el .IP "\f(CW$UID\fR" 8
.IX Item "$UID"
.IP "$<" 8
.IX Xref "$< $UID $REAL_USER_ID"
.PD
The real uid of this process.  You can change both the real uid and the
effective uid at the same time by using \f(CW\*(C`POSIX::setuid()\*(C'\fR.  Since
changes to \f(CW$<\fR require a system call, check \f(CW$!\fR after a change
attempt to detect any possible errors.
.Sp
Mnemonic: it's the uid you came \fIfrom\fR, if you're running setuid.
.ie n .IP "$EFFECTIVE_USER_ID" 8
.el .IP "\f(CW$EFFECTIVE_USER_ID\fR" 8
.IX Item "$EFFECTIVE_USER_ID"
.PD 0
.ie n .IP "$EUID" 8
.el .IP "\f(CW$EUID\fR" 8
.IX Item "$EUID"
.IP "$>" 8
.IX Xref "$> $EUID $EFFECTIVE_USER_ID"
.PD
The effective uid of this process.  For example:
.Sp
.Vb 2
\&    $< = $>;            # set real to effective uid
\&    ($<,$>) = ($>,$<);  # swap real and effective uids
.Ve
.Sp
You can change both the effective uid and the real uid at the same
time by using \f(CW\*(C`POSIX::setuid()\*(C'\fR.  Changes to \f(CW$>\fR require a check
to \f(CW$!\fR to detect any possible errors after an attempted change.
.Sp
\&\f(CW$<\fR and \f(CW$>\fR can be swapped only on machines
supporting \f(CW\*(C`setreuid()\*(C'\fR.
.Sp
Mnemonic: it's the uid you went \fIto\fR, if you're running setuid.
.ie n .IP "$SUBSCRIPT_SEPARATOR" 8
.el .IP "\f(CW$SUBSCRIPT_SEPARATOR\fR" 8
.IX Item "$SUBSCRIPT_SEPARATOR"
.PD 0
.ie n .IP "$SUBSEP" 8
.el .IP "\f(CW$SUBSEP\fR" 8
.IX Item "$SUBSEP"
.IP "$;" 8
.IX Xref "$; $SUBSEP SUBSCRIPT_SEPARATOR"
.PD
The subscript separator for multidimensional array emulation.  If you
refer to a hash element as
.Sp
.Vb 1
\&    $foo{$a,$b,$c}
.Ve
.Sp
it really means
.Sp
.Vb 1
\&    $foo{join($;, $a, $b, $c)}
.Ve
.Sp
But don't put
.Sp
.Vb 1
\&    @foo{$a,$b,$c}      # a slice\-\-note the @
.Ve
.Sp
which means
.Sp
.Vb 1
\&    ($foo{$a},$foo{$b},$foo{$c})
.Ve
.Sp
Default is \*(L"\e034\*(R", the same as \s-1SUBSEP\s0 in \fBawk\fR.  If your keys contain
binary data there might not be any safe value for \f(CW$;\fR.
.Sp
Consider using \*(L"real\*(R" multidimensional arrays as described
in perllol.
.Sp
Mnemonic: comma (the syntactic subscript separator) is a semi-semicolon.
.ie n .IP "$a" 8
.el .IP "\f(CW$a\fR" 8
.IX Item "$a"
.PD 0
.ie n .IP "$b" 8
.el .IP "\f(CW$b\fR" 8
.IX Xref "$a $b"
.IX Item "$b"
.PD
Special package variables when using \f(CW\*(C`sort()\*(C'\fR, see \*(L"sort\*(R" in perlfunc.
Because of this specialness \f(CW$a\fR and \f(CW$b\fR don't need to be declared
(using \f(CW\*(C`use vars\*(C'\fR, or \f(CW\*(C`our()\*(C'\fR) even when using the \f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR
pragma.  Don't lexicalize them with \f(CW\*(C`my $a\*(C'\fR or \f(CW\*(C`my $b\*(C'\fR if you want to
be able to use them in the \f(CW\*(C`sort()\*(C'\fR comparison block or function.
.ie n .IP "%ENV" 8
.el .IP "\f(CW%ENV\fR" 8
.IX Xref "%ENV"
.IX Item "%ENV"
The hash \f(CW%ENV\fR contains your current environment.  Setting a
value in \f(CW\*(C`ENV\*(C'\fR changes the environment for any child processes
you subsequently \f(CW\*(C`fork()\*(C'\fR off.
.ie n .IP "$SYSTEM_FD_MAX" 8
.el .IP "\f(CW$SYSTEM_FD_MAX\fR" 8
.IX Item "$SYSTEM_FD_MAX"
.PD 0
.IP "$^F" 8
.IX Xref "$^F $SYSTEM_FD_MAX"
.IX Item "$^F"
.PD
The maximum system file descriptor, ordinarily 2.  System file
descriptors are passed to \f(CW\*(C`exec()\*(C'\fRed processes, while higher file
descriptors are not.  Also, during an
\&\f(CW\*(C`open()\*(C'\fR, system file descriptors are
preserved even if the \f(CW\*(C`open()\*(C'\fR fails (ordinary file descriptors are
closed before the \f(CW\*(C`open()\*(C'\fR is attempted).  The close-on-exec
status of a file descriptor will be decided according to the value of
\&\f(CW$^F\fR when the corresponding file, pipe, or socket was opened, not the
time of the \f(CW\*(C`exec()\*(C'\fR.
.ie n .IP "@F" 8
.el .IP "\f(CW@F\fR" 8
.IX Xref "@F"
.IX Item "@F"
The array \f(CW@F\fR contains the fields of each line read in when autosplit
mode is turned on.  See perlrun for the \fB\-a\fR switch.  This array
is package-specific, and must be declared or given a full package name
if not in package main when running under \f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR.
.ie n .IP "@INC" 8
.el .IP "\f(CW@INC\fR" 8
.IX Xref "@INC"
.IX Item "@INC"
The array \f(CW@INC\fR contains the list of places that the \f(CW\*(C`do EXPR\*(C'\fR,
\&\f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`use\*(C'\fR constructs look for their library files.  It
initially consists of the arguments to any \fB\-I\fR command-line
switches, followed by the default Perl library, probably
\&\fI/usr/local/lib/perl\fR, followed by \*(L".\*(R", to represent the current
directory.  (\*(L".\*(R" will not be appended if taint checks are enabled,
either by \f(CW\*(C`\-T\*(C'\fR or by \f(CW\*(C`\-t\*(C'\fR.)  If you need to modify this at runtime,
you should use the \f(CW\*(C`use lib\*(C'\fR pragma to get the machine-dependent
library properly loaded also:
.Sp
.Vb 2
\&    use lib \*(Aq/mypath/libdir/\*(Aq;
\&    use SomeMod;
.Ve
.Sp
You can also insert hooks into the file inclusion system by putting Perl
code directly into \f(CW@INC\fR.  Those hooks may be subroutine references,
array references or blessed objects.  See \*(L"require\*(R" in perlfunc for details.
.ie n .IP "%INC" 8
.el .IP "\f(CW%INC\fR" 8
.IX Xref "%INC"
.IX Item "%INC"
The hash \f(CW%INC\fR contains entries for each filename included via the
\&\f(CW\*(C`do\*(C'\fR, \f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`use\*(C'\fR operators.  The key is the filename
you specified (with module names converted to pathnames), and the
value is the location of the file found.  The \f(CW\*(C`require\*(C'\fR
operator uses this hash to determine whether a particular file has
already been included.
.Sp
If the file was loaded via a hook (e.g. a subroutine reference, see
\&\*(L"require\*(R" in perlfunc for a description of these hooks), this hook is
by default inserted into \f(CW%INC\fR in place of a filename.  Note, however,
that the hook may have set the \f(CW%INC\fR entry by itself to provide some more
specific info.
.ie n .IP "$INPLACE_EDIT" 8
.el .IP "\f(CW$INPLACE_EDIT\fR" 8
.IX Item "$INPLACE_EDIT"
.PD 0
.IP "$^I" 8
.IX Xref "$^I $INPLACE_EDIT"
.IX Item "$^I"
.PD
The current value of the inplace-edit extension.  Use \f(CW\*(C`undef\*(C'\fR to disable
inplace editing.
.Sp
Mnemonic: value of \fB\-i\fR switch.
.IP "$^M" 8
.IX Xref "$^M"
.IX Item "$^M"
By default, running out of memory is an untrappable, fatal error.
However, if suitably built, Perl can use the contents of \f(CW$^M\fR
as an emergency memory pool after \f(CW\*(C`die()\*(C'\fRing.  Suppose that your Perl
were compiled with \f(CW\*(C`\-DPERL_EMERGENCY_SBRK\*(C'\fR and used Perl's malloc.
Then
.Sp
.Vb 1
\&    $^M = \*(Aqa\*(Aq x (1 << 16);
.Ve
.Sp
would allocate a 64K buffer for use in an emergency.  See the
\&\fI\s-1INSTALL\s0\fR file in the Perl distribution for information on how to
add custom C compilation flags when compiling perl.  To discourage casual
use of this advanced feature, there is no English long name for
this variable.
.Sp
This variable was added in Perl 5.004.
.ie n .IP "$OSNAME" 8
.el .IP "\f(CW$OSNAME\fR" 8
.IX Item "$OSNAME"
.PD 0
.IP "$^O" 8
.IX Xref "$^O $OSNAME"
.IX Item "$^O"
.PD
The name of the operating system under which this copy of Perl was
built, as determined during the configuration process.  For examples
see \*(L"\s-1PLATFORMS\s0\*(R" in perlport.
.Sp
The value is identical to \f(CW$Config{\*(Aqosname\*(Aq}\fR.  See also Config
and the \fB\-V\fR command-line switch documented in perlrun.
.Sp
In Windows platforms, \f(CW$^O\fR is not very helpful: since it is always
\&\f(CW\*(C`MSWin32\*(C'\fR, it doesn't tell the difference between
95/98/ME/NT/2000/XP/CE/.NET.  Use \f(CW\*(C`Win32::GetOSName()\*(C'\fR or
\&\fIWin32::GetOSVersion()\fR (see Win32 and perlport) to distinguish
between the variants.
.Sp
This variable was added in Perl 5.003.
.ie n .IP "%SIG" 8
.el .IP "\f(CW%SIG\fR" 8
.IX Xref "%SIG"
.IX Item "%SIG"
The hash \f(CW%SIG\fR contains signal handlers for signals.  For example:
.Sp
.Vb 6
\&    sub handler {   # 1st argument is signal name
\&        my($sig) = @_;
\&        print "Caught a SIG$sig\-\-shutting down\en";
\&        close(LOG);
\&        exit(0);
\&        }
\&
\&    $SIG{\*(AqINT\*(Aq}  = \e&handler;
\&    $SIG{\*(AqQUIT\*(Aq} = \e&handler;
\&    ...
\&    $SIG{\*(AqINT\*(Aq}  = \*(AqDEFAULT\*(Aq;   # restore default action
\&    $SIG{\*(AqQUIT\*(Aq} = \*(AqIGNORE\*(Aq;    # ignore SIGQUIT
.Ve
.Sp
Using a value of \f(CW\*(AqIGNORE\*(Aq\fR usually has the effect of ignoring the
signal, except for the \f(CW\*(C`CHLD\*(C'\fR signal.  See perlipc for more about
this special case.
.Sp
Here are some other examples:
.Sp
.Vb 7
\&    $SIG{"PIPE"} = "Plumber";   # assumes main::Plumber (not
\&                                # recommended)
\&    $SIG{"PIPE"} = \e&Plumber;   # just fine; assume current
\&                                # Plumber
\&    $SIG{"PIPE"} = *Plumber;    # somewhat esoteric
\&    $SIG{"PIPE"} = Plumber();   # oops, what did Plumber()
\&                                # return??
.Ve
.Sp
Be sure not to use a bareword as the name of a signal handler,
lest you inadvertently call it.
.Sp
If your system has the \f(CW\*(C`sigaction()\*(C'\fR function then signal handlers
are installed using it.  This means you get reliable signal handling.
.Sp
The default delivery policy of signals changed in Perl 5.8.0 from
immediate (also known as \*(L"unsafe\*(R") to deferred, also known as \*(L"safe
signals\*(R".  See perlipc for more information.
.Sp
Certain internal hooks can be also set using the \f(CW%SIG\fR hash.  The
routine indicated by \f(CW$SIG{_\|_WARN_\|_}\fR is called when a warning
message is about to be printed.  The warning message is passed as the
first argument.  The presence of a \f(CW\*(C`_\|_WARN_\|_\*(C'\fR hook causes the
ordinary printing of warnings to \f(CW\*(C`STDERR\*(C'\fR to be suppressed.  You can
use this to save warnings in a variable, or turn warnings into fatal
errors, like this:
.Sp
.Vb 2
\&    local $SIG{_\|_WARN_\|_} = sub { die $_[0] };
\&    eval $proggie;
.Ve
.Sp
As the \f(CW\*(AqIGNORE\*(Aq\fR hook is not supported by \f(CW\*(C`_\|_WARN_\|_\*(C'\fR, you can
disable warnings using the empty subroutine:
.Sp
.Vb 1
\&    local $SIG{_\|_WARN_\|_} = sub {};
.Ve
.Sp
The routine indicated by \f(CW$SIG{_\|_DIE_\|_}\fR is called when a fatal
exception is about to be thrown.  The error message is passed as the
first argument.  When a \f(CW\*(C`_\|_DIE_\|_\*(C'\fR hook routine returns, the exception
processing continues as it would have in the absence of the hook,
unless the hook routine itself exits via a \f(CW\*(C`goto &sub\*(C'\fR, a loop exit,
or a \f(CW\*(C`die()\*(C'\fR.  The \f(CW\*(C`_\|_DIE_\|_\*(C'\fR handler is explicitly disabled during
the call, so that you can die from a \f(CW\*(C`_\|_DIE_\|_\*(C'\fR handler.  Similarly
for \f(CW\*(C`_\|_WARN_\|_\*(C'\fR.
.Sp
Due to an implementation glitch, the \f(CW$SIG{_\|_DIE_\|_}\fR hook is called
even inside an \f(CW\*(C`eval()\*(C'\fR.  Do not use this to rewrite a pending
exception in \f(CW$@\fR, or as a bizarre substitute for overriding
\&\f(CW\*(C`CORE::GLOBAL::die()\*(C'\fR.  This strange action at a distance may be fixed
in a future release so that \f(CW$SIG{_\|_DIE_\|_}\fR is only called if your
program is about to exit, as was the original intent.  Any other use is
deprecated.
.Sp
\&\f(CW\*(C`_\|_DIE_\|_\*(C'\fR/\f(CW\*(C`_\|_WARN_\|_\*(C'\fR handlers are very special in one respect: they
may be called to report (probable) errors found by the parser.  In such
a case the parser may be in inconsistent state, so any attempt to
evaluate Perl code from such a handler will probably result in a
segfault.  This means that warnings or errors that result from parsing
Perl should be used with extreme caution, like this:
.Sp
.Vb 5
\&    require Carp if defined $^S;
\&    Carp::confess("Something wrong") if defined &Carp::confess;
\&    die "Something wrong, but could not load Carp to give "
\&      . "backtrace...\en\et"
\&      . "To see backtrace try starting Perl with \-MCarp switch";
.Ve
.Sp
Here the first line will load \f(CW\*(C`Carp\*(C'\fR \fIunless\fR it is the parser who
called the handler.  The second line will print backtrace and die if
\&\f(CW\*(C`Carp\*(C'\fR was available.  The third line will be executed only if \f(CW\*(C`Carp\*(C'\fR was
not available.
.Sp
Having to even think about the \f(CW$^S\fR variable in your exception
handlers is simply wrong.  \f(CW$SIG{_\|_DIE_\|_}\fR as currently implemented
invites grievous and difficult to track down errors.  Avoid it
and use an \f(CW\*(C`END{}\*(C'\fR or CORE::GLOBAL::die override instead.
.Sp
See \*(L"die\*(R" in perlfunc, \*(L"warn\*(R" in perlfunc, \*(L"eval\*(R" in perlfunc, and
warnings for additional information.
.ie n .IP "$BASETIME" 8
.el .IP "\f(CW$BASETIME\fR" 8
.IX Item "$BASETIME"
.PD 0
.IP "$^T" 8
.IX Xref "$^T $BASETIME"
.IX Item "$^T"
.PD
The time at which the program began running, in seconds since the
epoch (beginning of 1970).  The values returned by the \fB\-M\fR, \fB\-A\fR,
and \fB\-C\fR filetests are based on this value.
.ie n .IP "$PERL_VERSION" 8
.el .IP "\f(CW$PERL_VERSION\fR" 8
.IX Item "$PERL_VERSION"
.PD 0
.IP "$^V" 8
.IX Xref "$^V $PERL_VERSION"
.IX Item "$^V"
.PD
The revision, version, and subversion of the Perl interpreter,
represented as a \f(CW\*(C`version\*(C'\fR object.
.Sp
This variable first appeared in perl 5.6.0; earlier versions of perl
will see an undefined value.  Before perl 5.10.0 \f(CW$^V\fR was represented
as a v\-string.
.Sp
\&\f(CW$^V\fR can be used to determine whether the Perl interpreter executing
a script is in the right range of versions.  For example:
.Sp
.Vb 1
\&    warn "Hashes not randomized!\en" if !$^V or $^V lt v5.8.1
.Ve
.Sp
To convert \f(CW$^V\fR into its string representation use \f(CW\*(C`sprintf()\*(C'\fR's
\&\f(CW"%vd"\fR conversion:
.Sp
.Vb 1
\&    printf "version is v%vd\en", $^V;  # Perl\*(Aqs version
.Ve
.Sp
See the documentation of \f(CW\*(C`use VERSION\*(C'\fR and \f(CW\*(C`require VERSION\*(C'\fR
for a convenient way to fail if the running Perl interpreter is too old.
.Sp
See also \f(CW$]\fR for an older representation of the Perl version.
.Sp
This variable was added in Perl 5.6.
.Sp
Mnemonic: use ^V for Version Control.
.IP "${^WIN32_SLOPPY_STAT}" 8
.IX Xref "${^WIN32_SLOPPY_STAT} sitecustomize sitecustomize.pl"
.IX Item "${^WIN32_SLOPPY_STAT}"
If this variable is set to a true value, then \f(CW\*(C`stat()\*(C'\fR on Windows will
not try to open the file.  This means that the link count cannot be
determined and file attributes may be out of date if additional
hardlinks to the file exist.  On the other hand, not opening the file
is considerably faster, especially for files on network drives.
.Sp
This variable could be set in the \fIsitecustomize.pl\fR file to
configure the local Perl installation to use \*(L"sloppy\*(R" \f(CW\*(C`stat()\*(C'\fR by
default.  See the documentation for \fB\-f\fR in
perlrun for more information about site
customization.
.Sp
This variable was added in Perl 5.10.
.ie n .IP "$EXECUTABLE_NAME" 8
.el .IP "\f(CW$EXECUTABLE_NAME\fR" 8
.IX Item "$EXECUTABLE_NAME"
.PD 0
.IP "$^X" 8
.IX Xref "$^X $EXECUTABLE_NAME"
.IX Item "$^X"
.PD
The name used to execute the current copy of Perl, from C's
\&\f(CW\*(C`argv[0]\*(C'\fR or (where supported) \fI/proc/self/exe\fR.
.Sp
Depending on the host operating system, the value of \f(CW$^X\fR may be
a relative or absolute pathname of the perl program file, or may
be the string used to invoke perl but not the pathname of the
perl program file.  Also, most operating systems permit invoking
programs that are not in the \s-1PATH\s0 environment variable, so there
is no guarantee that the value of \f(CW$^X\fR is in \s-1PATH\s0.  For \s-1VMS\s0, the
value may or may not include a version number.
.Sp
You usually can use the value of \f(CW$^X\fR to re-invoke an independent
copy of the same perl that is currently running, e.g.,
.Sp
.Vb 1
\&    @first_run = \`$^X \-le "print int rand 100 for 1..100"\`;
.Ve
.Sp
But recall that not all operating systems support forking or
capturing of the output of commands, so this complex statement
may not be portable.
.Sp
It is not safe to use the value of \f(CW$^X\fR as a path name of a file,
as some operating systems that have a mandatory suffix on
executable files do not require use of the suffix when invoking
a command.  To convert the value of \f(CW$^X\fR to a path name, use the
following statements:
.Sp
.Vb 7
\&    # Build up a set of file names (not command names).
\&    use Config;
\&    my $this_perl = $^X;
\&    if ($^O ne \*(AqVMS\*(Aq) {
\&        $this_perl .= $Config{_exe}
\&          unless $this_perl =~ m/$Config{_exe}$/i;
\&        }
.Ve
.Sp
Because many operating systems permit anyone with read access to
the Perl program file to make a copy of it, patch the copy, and
then execute the copy, the security-conscious Perl programmer
should take care to invoke the installed copy of perl, not the
copy referenced by \f(CW$^X\fR.  The following statements accomplish
this goal, and produce a pathname that can be invoked as a
command or referenced as a file.
.Sp
.Vb 6
\&    use Config;
\&    my $secure_perl_path = $Config{perlpath};
\&    if ($^O ne \*(AqVMS\*(Aq) {
\&        $secure_perl_path .= $Config{_exe}
\&            unless $secure_perl_path =~ m/$Config{_exe}$/i;
\&        }
.Ve
.SS "Variables related to regular expressions"
.IX Subsection "Variables related to regular expressions"
Most of the special variables related to regular expressions are side
effects.  Perl sets these variables when it has a successful match, so
you should check the match result before using them.  For instance:
.PP
.Vb 3
\&    if( /P(A)TT(ER)N/ ) {
\&        print "I found $1 and $2\en";
\&        }
.Ve
.PP
These variables are read-only and dynamically-scoped, unless we note
otherwise.
.PP
The dynamic nature of the regular expression variables means that
their value is limited to the block that they are in, as demonstrated
by this bit of code:
.PP
.Vb 2
\&    my $outer = \*(AqWallace and Grommit\*(Aq;
\&    my $inner = \*(AqMutt and Jeff\*(Aq;
\&
\&    my $pattern = qr/(\eS+) and (\eS+)/;
\&
\&    sub show_n { print "\e$1 is $1; \e$2 is $2\en" }
\&
\&    {
\&    OUTER:
\&        show_n() if $outer =~ m/$pattern/;
\&
\&        INNER: {
\&            show_n() if $inner =~ m/$pattern/;
\&            }
\&
\&        show_n();
\&    }
.Ve
.PP
The output shows that while in the \f(CW\*(C`OUTER\*(C'\fR block, the values of \f(CW$1\fR
and \f(CW$2\fR are from the match against \f(CW$outer\fR.  Inside the \f(CW\*(C`INNER\*(C'\fR
block, the values of \f(CW$1\fR and \f(CW$2\fR are from the match against
\&\f(CW$inner\fR, but only until the end of the block (i.e. the dynamic
scope).  After the \f(CW\*(C`INNER\*(C'\fR block completes, the values of \f(CW$1\fR and
\&\f(CW$2\fR return to the values for the match against \f(CW$outer\fR even though
we have not made another match:
.PP
.Vb 3
\&    $1 is Wallace; $2 is Grommit
\&    $1 is Mutt; $2 is Jeff
\&    $1 is Wallace; $2 is Grommit
.Ve
.PP
Due to an unfortunate accident of Perl's implementation, \f(CW\*(C`use
English\*(C'\fR imposes a considerable performance penalty on all regular
expression matches in a program because it uses the \f(CW\*(C`$\`\*(C'\fR, \f(CW$&\fR, and
\&\f(CW\*(C`$\*(Aq\*(C'\fR, regardless of whether they occur in the scope of \f(CW\*(C`use
English\*(C'\fR.  For that reason, saying \f(CW\*(C`use English\*(C'\fR in libraries is
strongly discouraged unless you import it without the match variables:
.PP
.Vb 1
\&    use English \*(Aq\-no_match_vars\*(Aq
.Ve
.PP
The \f(CW\*(C`Devel::NYTProf\*(C'\fR and \f(CW\*(C`Devel::FindAmpersand\*(C'\fR
modules can help you find uses of these
problematic match variables in your code.
.PP
Since Perl 5.10, you can use the \f(CW\*(C`/p\*(C'\fR match operator flag and the
\&\f(CW\*(C`${^PREMATCH}\*(C'\fR, \f(CW\*(C`${^MATCH}\*(C'\fR, and \f(CW\*(C`${^POSTMATCH}\*(C'\fR variables instead
so you only suffer the performance penalties.
.ie n .IP "$<\fIdigits\fR> ($1, $2, ...)" 8
.el .IP "$<\fIdigits\fR> ($1, \f(CW$2\fR, ...)" 8
.IX Xref "$1 $2 $3"
.IX Item "$<digits> ($1, $2, ...)"
Contains the subpattern from the corresponding set of capturing
parentheses from the last successful pattern match, not counting patterns
matched in nested blocks that have been exited already.
.Sp
These variables are read-only and dynamically-scoped.
.Sp
Mnemonic: like \edigits.
.ie n .IP "$MATCH" 8
.el .IP "\f(CW$MATCH\fR" 8
.IX Item "$MATCH"
.PD 0
.IP "$&" 8
.IX Xref "$& $MATCH"
.PD
The string matched by the last successful pattern match (not counting
any matches hidden within a \s-1BLOCK\s0 or \f(CW\*(C`eval()\*(C'\fR enclosed by the current
\&\s-1BLOCK\s0).
.Sp
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  To avoid this
penalty, you can extract the same substring by using \*(L"@\-\*(R".  Starting
with Perl 5.10, you can use the \f(CW\*(C`/p\*(C'\fR match flag and the \f(CW\*(C`${^MATCH}\*(C'\fR
variable to do the same thing for particular match operations.
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: like \f(CW\*(C`&\*(C'\fR in some editors.
.IP "${^MATCH}" 8
.IX Xref "${^MATCH}"
.IX Item "${^MATCH}"
This is similar to \f(CW$&\fR (\f(CW$MATCH\fR) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the \f(CW\*(C`/p\*(C'\fR modifier.
.Sp
This variable was added in Perl 5.10.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$PREMATCH" 8
.el .IP "\f(CW$PREMATCH\fR" 8
.IX Item "$PREMATCH"
.PD 0
.IP "$`" 8
.IX Xref "$` $PREMATCH ${^PREMATCH}"
.PD
The string preceding whatever was matched by the last successful
pattern match, not counting any matches hidden within a \s-1BLOCK\s0 or \f(CW\*(C`eval\*(C'\fR
enclosed by the current \s-1BLOCK\s0.
.Sp
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  To avoid this
penalty, you can extract the same substring by using \*(L"@\-\*(R".  Starting
with Perl 5.10, you can use the \f(CW\*(C`/p\*(C'\fR match flag and the
\&\f(CW\*(C`${^PREMATCH}\*(C'\fR variable to do the same thing for particular match
operations.
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: \f(CW\*(C`\`\*(C'\fR often precedes a quoted string.
.IP "${^PREMATCH}" 8
.IX Xref "$` ${^PREMATCH}"
.IX Item "${^PREMATCH}"
This is similar to \f(CW\*(C`$\`\*(C'\fR ($PREMATCH) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the \f(CW\*(C`/p\*(C'\fR modifier.
.Sp
This variable was added in Perl 5.10
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$POSTMATCH" 8
.el .IP "\f(CW$POSTMATCH\fR" 8
.IX Item "$POSTMATCH"
.PD 0
.IP "$'" 8
.IX Xref "$' $POSTMATCH ${^POSTMATCH} @-"
.PD
The string following whatever was matched by the last successful
pattern match (not counting any matches hidden within a \s-1BLOCK\s0 or \f(CW\*(C`eval()\*(C'\fR
enclosed by the current \s-1BLOCK\s0).  Example:
.Sp
.Vb 3
\&    local $_ = \*(Aqabcdefghi\*(Aq;
\&    /def/;
\&    print "$\`:$&:$\*(Aq\en";         # prints abc:def:ghi
.Ve
.Sp
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.
To avoid this penalty, you can extract the same substring by
using \*(L"@\-\*(R".  Starting with Perl 5.10, you can use the \f(CW\*(C`/p\*(C'\fR match flag
and the \f(CW\*(C`${^POSTMATCH}\*(C'\fR variable to do the same thing for particular
match operations.
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: \f(CW\*(C`\*(Aq\*(C'\fR often follows a quoted string.
.IP "${^POSTMATCH}" 8
.IX Xref "${^POSTMATCH} $' $POSTMATCH"
.IX Item "${^POSTMATCH}"
This is similar to \f(CW\*(C`$\*(Aq\*(C'\fR (\f(CW$POSTMATCH\fR) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the \f(CW\*(C`/p\*(C'\fR modifier.
.Sp
This variable was added in Perl 5.10.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$LAST_PAREN_MATCH" 8
.el .IP "\f(CW$LAST_PAREN_MATCH\fR" 8
.IX Item "$LAST_PAREN_MATCH"
.PD 0
.IP "$+" 8
.IX Xref "$+ $LAST_PAREN_MATCH"
.PD
The text matched by the last bracket of the last successful search pattern.
This is useful if you don't know which one of a set of alternative patterns
matched.  For example:
.Sp
.Vb 1
\&    /Version: (.*)|Revision: (.*)/ && ($rev = $+);
.Ve
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: be positive and forward looking.
.ie n .IP "$LAST_SUBMATCH_RESULT" 8
.el .IP "\f(CW$LAST_SUBMATCH_RESULT\fR" 8
.IX Item "$LAST_SUBMATCH_RESULT"
.PD 0
.IP "$^N" 8
.IX Xref "$^N $LAST_SUBMATCH_RESULT"
.IX Item "$^N"
.PD
The text matched by the used group most-recently closed (i.e. the group
with the rightmost closing parenthesis) of the last successful search
pattern.
.Sp
This is primarily used inside \f(CW\*(C`(?{...})\*(C'\fR blocks for examining text
recently matched.  For example, to effectively capture text to a variable
(in addition to \f(CW$1\fR, \f(CW$2\fR, etc.), replace \f(CW\*(C`(...)\*(C'\fR with
.Sp
.Vb 1
\&    (?:(...)(?{ $var = $^N }))
.Ve
.Sp
By setting and then using \f(CW$var\fR in this way relieves you from having to
worry about exactly which numbered set of parentheses they are.
.Sp
This variable was added in Perl 5.8.
.Sp
Mnemonic: the (possibly) Nested parenthesis that most recently closed.
.ie n .IP "@LAST_MATCH_END" 8
.el .IP "\f(CW@LAST_MATCH_END\fR" 8
.IX Item "@LAST_MATCH_END"
.PD 0
.IP "@+" 8
.IX Xref "@+ @LAST_MATCH_END"
.PD
This array holds the offsets of the ends of the last successful
submatches in the currently active dynamic scope.  \f(CW$+[0]\fR is
the offset into the string of the end of the entire match.  This
is the same value as what the \f(CW\*(C`pos\*(C'\fR function returns when called
on the variable that was matched against.  The \fIn\fRth element
of this array holds the offset of the \fIn\fRth submatch, so
\&\f(CW$+[1]\fR is the offset past where \f(CW$1\fR ends, \f(CW$+[2]\fR the offset
past where \f(CW$2\fR ends, and so on.  You can use \f(CW$#+\fR to determine
how many subgroups were in the last successful match.  See the
examples given for the \f(CW\*(C`@\-\*(C'\fR variable.
.Sp
This variable was added in Perl 5.6.
.ie n .IP "%LAST_PAREN_MATCH" 8
.el .IP "\f(CW%LAST_PAREN_MATCH\fR" 8
.IX Item "%LAST_PAREN_MATCH"
.PD 0
.IP "%+" 8
.IX Xref "%+ %LAST_PAREN_MATCH"
.PD
Similar to \f(CW\*(C`@+\*(C'\fR, the \f(CW\*(C`%+\*(C'\fR hash allows access to the named capture
buffers, should they exist, in the last successful match in the
currently active dynamic scope.
.Sp
For example, \f(CW$+{foo}\fR is equivalent to \f(CW$1\fR after the following match:
.Sp
.Vb 1
\&    \*(Aqfoo\*(Aq =~ /(?<foo>foo)/;
.Ve
.Sp
The keys of the \f(CW\*(C`%+\*(C'\fR hash list only the names of buffers that have
captured (and that are thus associated to defined values).
.Sp
The underlying behaviour of \f(CW\*(C`%+\*(C'\fR is provided by the
Tie::Hash::NamedCapture module.
.Sp
\&\fBNote:\fR \f(CW\*(C`%\-\*(C'\fR and \f(CW\*(C`%+\*(C'\fR are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via \f(CW\*(C`each\*(C'\fR may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.
.Sp
This variable was added in Perl 5.10.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "@LAST_MATCH_START" 8
.el .IP "\f(CW@LAST_MATCH_START\fR" 8
.IX Item "@LAST_MATCH_START"
.PD 0
.IP "@\-" 8
.IX Xref "@- @LAST_MATCH_START"
.PD
\&\f(CW\*(C`$\-[0]\*(C'\fR is the offset of the start of the last successful match.
\&\f(CW\*(C`$\-[\*(C'\fR\fIn\fR\f(CW\*(C`]\*(C'\fR is the offset of the start of the substring matched by
\&\fIn\fR\-th subpattern, or undef if the subpattern did not match.
.Sp
Thus, after a match against \f(CW$_\fR, \f(CW$&\fR coincides with \f(CW\*(C`substr $_, $\-[0],
$+[0] \- $\-[0]\*(C'\fR.  Similarly, $\fIn\fR coincides with \f(CW\*(C`substr $_, $\-[n],
$+[n] \- $\-[n]\*(C'\fR if \f(CW\*(C`$\-[n]\*(C'\fR is defined, and $+ coincides with
\&\f(CW\*(C`substr $_, $\-[$#\-], $+[$#\-] \- $\-[$#\-]\*(C'\fR.  One can use \f(CW\*(C`$#\-\*(C'\fR to find the
last matched subgroup in the last successful match.  Contrast with
\&\f(CW$#+\fR, the number of subgroups in the regular expression.  Compare
with \f(CW\*(C`@+\*(C'\fR.
.Sp
This array holds the offsets of the beginnings of the last
successful submatches in the currently active dynamic scope.
\&\f(CW\*(C`$\-[0]\*(C'\fR is the offset into the string of the beginning of the
entire match.  The \fIn\fRth element of this array holds the offset
of the \fIn\fRth submatch, so \f(CW\*(C`$\-[1]\*(C'\fR is the offset where \f(CW$1\fR
begins, \f(CW\*(C`$\-[2]\*(C'\fR the offset where \f(CW$2\fR begins, and so on.
.Sp
After a match against some variable \f(CW$var\fR:
.RS 8
.ie n .IP """$\`"" is the same as ""substr($var, 0, $\-[0])""" 5
.el .IP "\f(CW$\`\fR is the same as \f(CWsubstr($var, 0, $\-[0])\fR" 5
.IX Item "$ is the same as substr($var, 0, $-[0])"
.PD 0
.ie n .IP "$& is the same as ""substr($var, $\-[0], $+[0] \- $\-[0])""" 5
.el .IP "\f(CW$&\fR is the same as \f(CWsubstr($var, $\-[0], $+[0] \- $\-[0])\fR" 5
.IX Item "$& is the same as substr($var, $-[0], $+[0] - $-[0])"
.ie n .IP """$\*(Aq"" is the same as ""substr($var, $+[0])""" 5
.el .IP "\f(CW$\*(Aq\fR is the same as \f(CWsubstr($var, $+[0])\fR" 5
.IX Item "$ is the same as substr($var, $+[0])"
.ie n .IP "$1 is the same as ""substr($var, $\-[1], $+[1] \- $\-[1])""" 5
.el .IP "\f(CW$1\fR is the same as \f(CWsubstr($var, $\-[1], $+[1] \- $\-[1])\fR" 5
.IX Item "$1 is the same as substr($var, $-[1], $+[1] - $-[1])"
.ie n .IP "$2 is the same as ""substr($var, $\-[2], $+[2] \- $\-[2])""" 5
.el .IP "\f(CW$2\fR is the same as \f(CWsubstr($var, $\-[2], $+[2] \- $\-[2])\fR" 5
.IX Item "$2 is the same as substr($var, $-[2], $+[2] - $-[2])"
.ie n .IP "$3 is the same as ""substr($var, $\-[3], $+[3] \- $\-[3])""" 5
.el .IP "\f(CW$3\fR is the same as \f(CWsubstr($var, $\-[3], $+[3] \- $\-[3])\fR" 5
.IX Item "$3 is the same as substr($var, $-[3], $+[3] - $-[3])"
.RE
.RS 8
.PD
.Sp
This variable was added in Perl 5.6.
.RE
.ie n .IP "%LAST_MATCH_START" 8
.el .IP "\f(CW%LAST_MATCH_START\fR" 8
.IX Item "%LAST_MATCH_START"
.PD 0
.IP "%\-" 8
.IX Xref "%- %LAST_MATCH_START"
.PD
Similar to \f(CW\*(C`%+\*(C'\fR, this variable allows access to the named capture groups
in the last successful match in the currently active dynamic scope.  To
each capture group name found in the regular expression, it associates a
reference to an array containing the list of values captured by all
buffers with that name (should there be several of them), in the order
where they appear.
.Sp
Here's an example:
.Sp
.Vb 12
\&    if (\*(Aq1234\*(Aq =~ /(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {
\&        foreach my $bufname (sort keys %\-) {
\&            my $ary = $\-{$bufname};
\&            foreach my $idx (0..$#$ary) {
\&                print "\e$\-{$bufname}[$idx] : ",
\&                      (defined($ary\->[$idx])
\&                          ? "\*(Aq$ary\->[$idx]\*(Aq"
\&                          : "undef"),
\&                      "\en";
\&            }
\&        }
\&    }
.Ve
.Sp
would print out:
.Sp
.Vb 4
\&    $\-{A}[0] : \*(Aq1\*(Aq
\&    $\-{A}[1] : \*(Aq3\*(Aq
\&    $\-{B}[0] : \*(Aq2\*(Aq
\&    $\-{B}[1] : \*(Aq4\*(Aq
.Ve
.Sp
The keys of the \f(CW\*(C`%\-\*(C'\fR hash correspond to all buffer names found in
the regular expression.
.Sp
The behaviour of \f(CW\*(C`%\-\*(C'\fR is implemented via the
Tie::Hash::NamedCapture module.
.Sp
\&\fBNote:\fR \f(CW\*(C`%\-\*(C'\fR and \f(CW\*(C`%+\*(C'\fR are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via \f(CW\*(C`each\*(C'\fR may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.
.Sp
This variable was added in Perl 5.10
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$LAST_REGEXP_CODE_RESULT" 8
.el .IP "\f(CW$LAST_REGEXP_CODE_RESULT\fR" 8
.IX Item "$LAST_REGEXP_CODE_RESULT"
.PD 0
.IP "$^R" 8
.IX Xref "$^R $LAST_REGEXP_CODE_RESULT"
.IX Item "$^R"
.PD
The result of evaluation of the last successful \f(CW\*(C`(?{ code })\*(C'\fR
regular expression assertion (see perlre).  May be written to.
.Sp
This variable was added in Perl 5.005.
.IP "${^RE_DEBUG_FLAGS}" 8
.IX Xref "${^RE_DEBUG_FLAGS}"
.IX Item "${^RE_DEBUG_FLAGS}"
The current value of the regex debugging flags.  Set to 0 for no debug output
even when the \f(CW\*(C`re \*(Aqdebug\*(Aq\*(C'\fR module is loaded.  See re for details.
.Sp
This variable was added in Perl 5.10.
.IP "${^RE_TRIE_MAXBUF}" 8
.IX Xref "${^RE_TRIE_MAXBUF}"
.IX Item "${^RE_TRIE_MAXBUF}"
Controls how certain regex optimisations are applied and how much memory they
utilize.  This value by default is 65536 which corresponds to a 512kB
temporary cache.  Set this to a higher value to trade
memory for speed when matching large alternations.  Set
it to a lower value if you want the optimisations to
be as conservative of memory as possible but still occur, and set it to a
negative value to prevent the optimisation and conserve the most memory.
Under normal situations this variable should be of no interest to you.
.Sp
This variable was added in Perl 5.10.
.SS "Variables related to filehandles"
.IX Subsection "Variables related to filehandles"
Variables that depend on the currently selected filehandle may be set
by calling an appropriate object method on the \f(CW\*(C`IO::Handle\*(C'\fR object,
although this is less efficient than using the regular built-in
variables.  (Summary lines below for this contain the word \s-1HANDLE\s0.)
First you must say
.PP
.Vb 1
\&    use IO::Handle;
.Ve
.PP
after which you may use either
.PP
.Vb 1
\&    method HANDLE EXPR
.Ve
.PP
or more safely,
.PP
.Vb 1
\&    HANDLE\->method(EXPR)
.Ve
.PP
Each method returns the old value of the \f(CW\*(C`IO::Handle\*(C'\fR attribute.  The
methods each take an optional \s-1EXPR\s0, which, if supplied, specifies the
new value for the \f(CW\*(C`IO::Handle\*(C'\fR attribute in question.  If not
supplied, most methods do nothing to the current value\*(--except for
\&\f(CW\*(C`autoflush()\*(C'\fR, which will assume a 1 for you, just to be different.
.PP
Because loading in the \f(CW\*(C`IO::Handle\*(C'\fR class is an expensive operation,
you should learn how to use the regular built-in variables.
.PP
A few of these variables are considered \*(L"read-only\*(R".  This means that
if you try to assign to this variable, either directly or indirectly
through a reference, you'll raise a run-time exception.
.PP
You should be very careful when modifying the default values of most
special variables described in this document.  In most cases you want
to localize these variables before changing them, since if you don't,
the change may affect other modules which rely on the default values
of the special variables that you have changed.  This is one of the
correct ways to read the whole file at once:
.PP
.Vb 4
\&    open my $fh, "<", "foo" or die $!;
\&    local $/; # enable localized slurp mode
\&    my $content = <$fh>;
\&    close $fh;
.Ve
.PP
But the following code is quite bad:
.PP
.Vb 4
\&    open my $fh, "<", "foo" or die $!;
\&    undef $/; # enable slurp mode
\&    my $content = <$fh>;
\&    close $fh;
.Ve
.PP
since some other module, may want to read data from some file in the
default \*(L"line mode\*(R", so if the code we have just presented has been
executed, the global value of \f(CW$/\fR is now changed for any other code
running inside the same Perl interpreter.
.PP
Usually when a variable is localized you want to make sure that this
change affects the shortest scope possible.  So unless you are already
inside some short \f(CW\*(C`{}\*(C'\fR block, you should create one yourself.  For
example:
.PP
.Vb 7
\&    my $content = \*(Aq\*(Aq;
\&    open my $fh, "<", "foo" or die $!;
\&    {
\&        local $/;
\&        $content = <$fh>;
\&    }
\&    close $fh;
.Ve
.PP
Here is an example of how your own code can go broken:
.PP
.Vb 5
\&    for ( 1..3 ){
\&        $\e = "\er\en";
\&        nasty_break();
\&        print "$_";
\&    }
\&
\&    sub nasty_break {
\&        $\e = "\ef";
\&        # do something with $_
\&    }
.Ve
.PP
You probably expect this code to print the equivalent of
.PP
.Vb 1
\&    "1\er\en2\er\en3\er\en"
.Ve
.PP
but instead you get:
.PP
.Vb 1
\&    "1\ef2\ef3\ef"
.Ve
.PP
Why? Because \f(CW\*(C`nasty_break()\*(C'\fR modifies \f(CW\*(C`$\e\*(C'\fR without localizing it
first.  The value you set in  \f(CW\*(C`nasty_break()\*(C'\fR is still there when you
return.  The fix is to add \f(CW\*(C`local()\*(C'\fR so the value doesn't leak out of
\&\f(CW\*(C`nasty_break()\*(C'\fR:
.PP
.Vb 1
\&    local $\e = "\ef";
.Ve
.PP
It's easy to notice the problem in such a short example, but in more
complicated code you are looking for trouble if you don't localize
changes to the special variables.
.ie n .IP "$ARGV" 8
.el .IP "\f(CW$ARGV\fR" 8
.IX Xref "$ARGV"
.IX Item "$ARGV"
Contains the name of the current file when reading from \f(CW\*(C`<>\*(C'\fR.
.ie n .IP "@ARGV" 8
.el .IP "\f(CW@ARGV\fR" 8
.IX Xref "@ARGV"
.IX Item "@ARGV"
The array \f(CW@ARGV\fR contains the command-line arguments intended for
the script.  \f(CW$#ARGV\fR is generally the number of arguments minus
one, because \f(CW$ARGV[0]\fR is the first argument, \fInot\fR the program's
command name itself.  See \*(L"$0\*(R" for the command name.
.IP "\s-1ARGV\s0" 8
.IX Xref "ARGV"
.IX Item "ARGV"
The special filehandle that iterates over command-line filenames in
\&\f(CW@ARGV\fR.  Usually written as the null filehandle in the angle operator
\&\f(CW\*(C`<>\*(C'\fR.  Note that currently \f(CW\*(C`ARGV\*(C'\fR only has its magical effect
within the \f(CW\*(C`<>\*(C'\fR operator; elsewhere it is just a plain filehandle
corresponding to the last file opened by \f(CW\*(C`<>\*(C'\fR.  In particular,
passing \f(CW\*(C`\e*ARGV\*(C'\fR as a parameter to a function that expects a filehandle
may not cause your function to automatically read the contents of all the
files in \f(CW@ARGV\fR.
.IP "\s-1ARGVOUT\s0" 8
.IX Xref "ARGVOUT"
.IX Item "ARGVOUT"
The special filehandle that points to the currently open output file
when doing edit-in-place processing with \fB\-i\fR.  Useful when you have
to do a lot of inserting and don't want to keep modifying \f(CW$_\fR.  See
perlrun for the \fB\-i\fR switch.
.IP "Handle\->output_field_separator( \s-1EXPR\s0 )" 8
.IX Item "Handle->output_field_separator( EXPR )"
.PD 0
.ie n .IP "$OUTPUT_FIELD_SEPARATOR" 8
.el .IP "\f(CW$OUTPUT_FIELD_SEPARATOR\fR" 8
.IX Item "$OUTPUT_FIELD_SEPARATOR"
.ie n .IP "$OFS" 8
.el .IP "\f(CW$OFS\fR" 8
.IX Item "$OFS"
.IP "$," 8
.IX Xref "$, $OFS $OUTPUT_FIELD_SEPARATOR"
.PD
The output field separator for the print operator.  If defined, this
value is printed between each of print's arguments.  Default is \f(CW\*(C`undef\*(C'\fR.
.Sp
Mnemonic: what is printed when there is a \*(L",\*(R" in your print statement.
.IP "\s-1HANDLE\-\s0>input_line_number( \s-1EXPR\s0 )" 8
.IX Item "HANDLE->input_line_number( EXPR )"
.PD 0
.ie n .IP "$INPUT_LINE_NUMBER" 8
.el .IP "\f(CW$INPUT_LINE_NUMBER\fR" 8
.IX Item "$INPUT_LINE_NUMBER"
.ie n .IP "$NR" 8
.el .IP "\f(CW$NR\fR" 8
.IX Item "$NR"
.IP "$." 8
.IX Xref "$. $NR $INPUT_LINE_NUMBER line number"
.PD
Current line number for the last filehandle accessed.
.Sp
Each filehandle in Perl counts the number of lines that have been read
from it.  (Depending on the value of \f(CW$/\fR, Perl's idea of what
constitutes a line may not match yours.)  When a line is read from a
filehandle (via \f(CW\*(C`readline()\*(C'\fR or \f(CW\*(C`<>\*(C'\fR), or when \f(CW\*(C`tell()\*(C'\fR or
\&\f(CW\*(C`seek()\*(C'\fR is called on it, \f(CW$.\fR becomes an alias to the line counter
for that filehandle.
.Sp
You can adjust the counter by assigning to \f(CW$.\fR, but this will not
actually move the seek pointer.  \fILocalizing \f(CI$.\fI will not localize
the filehandle's line count\fR.  Instead, it will localize perl's notion
of which filehandle \f(CW$.\fR is currently aliased to.
.Sp
\&\f(CW$.\fR is reset when the filehandle is closed, but \fBnot\fR when an open
filehandle is reopened without an intervening \f(CW\*(C`close()\*(C'\fR.  For more
details, see \*(L"I/O Operators\*(R" in perlop.  Because \f(CW\*(C`<>\*(C'\fR never does
an explicit close, line numbers increase across \f(CW\*(C`ARGV\*(C'\fR files (but see
examples in \*(L"eof\*(R" in perlfunc).
.Sp
You can also use \f(CW\*(C`HANDLE\->input_line_number(EXPR)\*(C'\fR to access the
line counter for a given filehandle without having to worry about
which handle you last accessed.
.Sp
Mnemonic: many programs use \*(L".\*(R" to mean the current line number.
.IP "\s-1HANDLE\-\s0>input_record_separator( \s-1EXPR\s0 )" 8
.IX Item "HANDLE->input_record_separator( EXPR )"
.PD 0
.ie n .IP "$INPUT_RECORD_SEPARATOR" 8
.el .IP "\f(CW$INPUT_RECORD_SEPARATOR\fR" 8
.IX Item "$INPUT_RECORD_SEPARATOR"
.ie n .IP "$RS" 8
.el .IP "\f(CW$RS\fR" 8
.IX Item "$RS"
.IP "$/" 8
.IX Xref "$ $RS $INPUT_RECORD_SEPARATOR"
.PD
The input record separator, newline by default.  This influences Perl's
idea of what a \*(L"line\*(R" is.  Works like \fBawk\fR's \s-1RS\s0 variable, including
treating empty lines as a terminator if set to the null string (an
empty line cannot contain any spaces or tabs).  You may set it to a
multi-character string to match a multi-character terminator, or to
\&\f(CW\*(C`undef\*(C'\fR to read through the end of file.  Setting it to \f(CW"\en\en"\fR
means something slightly different than setting to \f(CW""\fR, if the file
contains consecutive empty lines.  Setting to \f(CW""\fR will treat two or
more consecutive empty lines as a single empty line.  Setting to
\&\f(CW"\en\en"\fR will blindly assume that the next input character belongs to
the next paragraph, even if it's a newline.
.Sp
.Vb 3
\&    local $/;           # enable "slurp" mode
\&    local $_ = <FH>;    # whole file now here
\&    s/\en[ \et]+/ /g;
.Ve
.Sp
Remember: the value of \f(CW$/\fR is a string, not a regex.  \fBawk\fR has to
be better for something. :\-)
.Sp
Setting \f(CW$/\fR to a reference to an integer, scalar containing an
integer, or scalar that's convertible to an integer will attempt to
read records instead of lines, with the maximum record size being the
referenced integer.  So this:
.Sp
.Vb 3
\&    local $/ = \e32768; # or \e"32768", or \e$var_containing_32768
\&    open my $fh, "<", $myfile or die $!;
\&    local $_ = <$fh>;
.Ve
.Sp
will read a record of no more than 32768 bytes from \s-1FILE\s0.  If you're
not reading from a record-oriented file (or your \s-1OS\s0 doesn't have
record-oriented files), then you'll likely get a full chunk of data
with every read.  If a record is larger than the record size you've
set, you'll get the record back in pieces.  Trying to set the record
size to zero or less will cause reading in the (rest of the) whole file.
.Sp
On \s-1VMS\s0 only, record reads bypass PerlIO layers and any associated
buffering,so you must not mix record and non-record reads on the
same filehandle.  Record mode mixes with line mode only when the
same buffering layer is in use for both modes.
.Sp
If you perform a record read on a \s-1FILE\s0 with an encoding layer such as
\&\f(CW\*(C`:encoding(latin1)\*(C'\fR or \f(CW\*(C`:utf8\*(C'\fR, you may get an invalid string as a
result, may leave the \s-1FILE\s0 positioned between characters in the stream
and may not be reading the number of bytes from the underlying file
that you specified.  This behaviour may change without warning in a
future version of perl.
.Sp
See also \*(L"Newlines\*(R" in perlport. Also see \*(L"$.\*(R".
.Sp
Mnemonic: / delimits line boundaries when quoting poetry.
.IP "Handle\->output_record_separator( \s-1EXPR\s0 )" 8
.IX Item "Handle->output_record_separator( EXPR )"
.PD 0
.ie n .IP "$OUTPUT_RECORD_SEPARATOR" 8
.el .IP "\f(CW$OUTPUT_RECORD_SEPARATOR\fR" 8
.IX Item "$OUTPUT_RECORD_SEPARATOR"
.ie n .IP "$ORS" 8
.el .IP "\f(CW$ORS\fR" 8
.IX Item "$ORS"
.IP "$\e" 8
.IX Xref "$\\ $ORS $OUTPUT_RECORD_SEPARATOR"
.IX Item "$"
.PD
The output record separator for the print operator.  If defined, this
value is printed after the last of print's arguments.  Default is \f(CW\*(C`undef\*(C'\fR.
.Sp
Mnemonic: you set \f(CW\*(C`$\e\*(C'\fR instead of adding \*(L"\en\*(R" at the end of the print.
Also, it's just like \f(CW$/\fR, but it's what you get \*(L"back\*(R" from Perl.
.IP "\s-1HANDLE\-\s0>autoflush( \s-1EXPR\s0 )" 8
.IX Item "HANDLE->autoflush( EXPR )"
.PD 0
.ie n .IP "$OUTPUT_AUTOFLUSH" 8
.el .IP "\f(CW$OUTPUT_AUTOFLUSH\fR" 8
.IX Item "$OUTPUT_AUTOFLUSH"
.IP "$|" 8
.IX Xref "$| autoflush flush $OUTPUT_AUTOFLUSH"
.PD
If set to nonzero, forces a flush right away and after every write or
print on the currently selected output channel.  Default is 0
(regardless of whether the channel is really buffered by the system or
not; \f(CW$|\fR tells you only whether you've asked Perl explicitly to
flush after each write).  \s-1STDOUT\s0 will typically be line buffered if
output is to the terminal and block buffered otherwise.  Setting this
variable is useful primarily when you are outputting to a pipe or
socket, such as when you are running a Perl program under \fBrsh\fR and
want to see the output as it's happening.  This has no effect on input
buffering.  See \*(L"getc\*(R" in perlfunc for that.  See \*(L"select\*(R" in perlfunc on
how to select the output channel.  See also IO::Handle.
.Sp
Mnemonic: when you want your pipes to be piping hot.
.PP
\fIVariables related to formats\fR
.IX Subsection "Variables related to formats"
.PP
The special variables for formats are a subset of those for
filehandles.  See perlform for more information about Perl's
formats.
.ie n .IP "$ACCUMULATOR" 8
.el .IP "\f(CW$ACCUMULATOR\fR" 8
.IX Item "$ACCUMULATOR"
.PD 0
.IP "$^A" 8
.IX Xref "$^A $ACCUMULATOR"
.IX Item "$^A"
.PD
The current value of the \f(CW\*(C`write()\*(C'\fR accumulator for \f(CW\*(C`format()\*(C'\fR lines.
A format contains \f(CW\*(C`formline()\*(C'\fR calls that put their result into
\&\f(CW$^A\fR.  After calling its format, \f(CW\*(C`write()\*(C'\fR prints out the contents
of \f(CW$^A\fR and empties.  So you never really see the contents of \f(CW$^A\fR
unless you call \f(CW\*(C`formline()\*(C'\fR yourself and then look at it.  See
perlform and \*(L"formline \s-1PICTURE\s0,LIST\*(R" in perlfunc.
.IP "\s-1HANDLE\-\s0>format_formfeed(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_formfeed(EXPR)"
.PD 0
.ie n .IP "$FORMAT_FORMFEED" 8
.el .IP "\f(CW$FORMAT_FORMFEED\fR" 8
.IX Item "$FORMAT_FORMFEED"
.IP "$^L" 8
.IX Xref "$^L $FORMAT_FORMFEED"
.IX Item "$^L"
.PD
What formats output as a form feed.  The default is \f(CW\*(C`\ef\*(C'\fR.
.IP "\s-1HANDLE\-\s0>format_page_number(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_page_number(EXPR)"
.PD 0
.ie n .IP "$FORMAT_PAGE_NUMBER" 8
.el .IP "\f(CW$FORMAT_PAGE_NUMBER\fR" 8
.IX Item "$FORMAT_PAGE_NUMBER"
.IP "$%" 8
.IX Xref "$% $FORMAT_PAGE_NUMBER"
.PD
The current page number of the currently selected output channel.
.Sp
Mnemonic: \f(CW\*(C`%\*(C'\fR is page number in \fBnroff\fR.
.IP "\s-1HANDLE\-\s0>format_lines_left(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_lines_left(EXPR)"
.PD 0
.ie n .IP "$FORMAT_LINES_LEFT" 8
.el .IP "\f(CW$FORMAT_LINES_LEFT\fR" 8
.IX Item "$FORMAT_LINES_LEFT"
.IP "$\-" 8
.IX Xref "$- $FORMAT_LINES_LEFT"
.PD
The number of lines left on the page of the currently selected output
channel.
.Sp
Mnemonic: lines_on_page \- lines_printed.
.IP "Handle\->format_line_break_characters \s-1EXPR\s0" 8
.IX Item "Handle->format_line_break_characters EXPR"
.PD 0
.ie n .IP "$FORMAT_LINE_BREAK_CHARACTERS" 8
.el .IP "\f(CW$FORMAT_LINE_BREAK_CHARACTERS\fR" 8
.IX Item "$FORMAT_LINE_BREAK_CHARACTERS"
.ie n .IP "$:" 8
.el .IP "\f(CW$:\fR" 8
.IX Xref "$: FORMAT_LINE_BREAK_CHARACTERS"
.IX Item "$:"
.PD
The current set of characters after which a string may be broken to
fill continuation fields (starting with \f(CW\*(C`^\*(C'\fR) in a format.  The default is
\&\*(L"\ \en\-\*(R", to break on a space, newline, or a hyphen.
.Sp
Mnemonic: a \*(L"colon\*(R" in poetry is a part of a line.
.IP "\s-1HANDLE\-\s0>format_lines_per_page(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_lines_per_page(EXPR)"
.PD 0
.ie n .IP "$FORMAT_LINES_PER_PAGE" 8
.el .IP "\f(CW$FORMAT_LINES_PER_PAGE\fR" 8
.IX Item "$FORMAT_LINES_PER_PAGE"
.IP "$=" 8
.IX Xref "$= $FORMAT_LINES_PER_PAGE"
.PD
The current page length (printable lines) of the currently selected
output channel.  The default is 60.
.Sp
Mnemonic: = has horizontal lines.
.IP "\s-1HANDLE\-\s0>format_top_name(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_top_name(EXPR)"
.PD 0
.ie n .IP "$FORMAT_TOP_NAME" 8
.el .IP "\f(CW$FORMAT_TOP_NAME\fR" 8
.IX Item "$FORMAT_TOP_NAME"
.IP "$^" 8
.IX Xref "$^ $FORMAT_TOP_NAME"
.PD
The name of the current top-of-page format for the currently selected
output channel.  The default is the name of the filehandle with \f(CW\*(C`_TOP\*(C'\fR
appended.  For example, the default format top name for the \f(CW\*(C`STDOUT\*(C'\fR
filehandle is \f(CW\*(C`STDOUT_TOP\*(C'\fR.
.Sp
Mnemonic: points to top of page.
.IP "\s-1HANDLE\-\s0>format_name(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_name(EXPR)"
.PD 0
.ie n .IP "$FORMAT_NAME" 8
.el .IP "\f(CW$FORMAT_NAME\fR" 8
.IX Item "$FORMAT_NAME"
.IP "$~" 8
.IX Xref "$~ $FORMAT_NAME"
.PD
The name of the current report format for the currently selected
output channel.  The default format name is the same as the filehandle
name.  For example, the default format name for the \f(CW\*(C`STDOUT\*(C'\fR
filehandle is just \f(CW\*(C`STDOUT\*(C'\fR.
.Sp
Mnemonic: brother to \f(CW$^\fR.
.SS "Error Variables"
.IX Xref "error exception"
.IX Subsection "Error Variables"
The variables \f(CW$@\fR, \f(CW$!\fR, \f(CW$^E\fR, and \f(CW$?\fR contain information
about different types of error conditions that may appear during
execution of a Perl program.  The variables are shown ordered by
the \*(L"distance\*(R" between the subsystem which reported the error and
the Perl process.  They correspond to errors detected by the Perl
interpreter, C library, operating system, or an external program,
respectively.
.PP
To illustrate the differences between these variables, consider the
following Perl expression, which uses a single-quoted string.  After
execution of this statement, perl may have set all four special error
variables:
.PP
.Vb 5
\&    eval q{
\&        open my $pipe, "/cdrom/install |" or die $!;
\&        my @res = <$pipe>;
\&        close $pipe or die "bad pipe: $?, $!";
\&    };
.Ve
.PP
When perl executes the \f(CW\*(C`eval()\*(C'\fR expression, it translates the
\&\f(CW\*(C`open()\*(C'\fR, \f(CW\*(C`<PIPE>\*(C'\fR, and \f(CW\*(C`close\*(C'\fR calls in the C run-time library
and thence to the operating system kernel.  perl sets \f(CW$!\fR to
the C library's \f(CW\*(C`errno\*(C'\fR if one of these calls fails.
.PP
\&\f(CW$@\fR is set if the string to be \f(CW\*(C`eval\*(C'\fR\-ed did not compile (this may
happen if \f(CW\*(C`open\*(C'\fR or \f(CW\*(C`close\*(C'\fR were imported with bad prototypes), or
if Perl code executed during evaluation \f(CW\*(C`die()\*(C'\fRd.  In these cases the
value of \f(CW$@\fR is the compile error, or the argument to \f(CW\*(C`die\*(C'\fR (which
will interpolate \f(CW$!\fR and \f(CW$?\fR).  (See also Fatal, though.)
.PP
Under a few operating systems, \f(CW$^E\fR may contain a more verbose error
indicator, such as in this case, \*(L"\s-1CDROM\s0 tray not closed.\*(R"  Systems that
do not support extended error messages leave \f(CW$^E\fR the same as \f(CW$!\fR.
.PP
Finally, \f(CW$?\fR may be set to non\-0 value if the external program
\&\fI/cdrom/install\fR fails.  The upper eight bits reflect specific error
conditions encountered by the program (the program's \f(CW\*(C`exit()\*(C'\fR value).
The lower eight bits reflect mode of failure, like signal death and
core dump information.  See \fIwait\fR\|(2) for details.  In contrast to
\&\f(CW$!\fR and \f(CW$^E\fR, which are set only if error condition is detected,
the variable \f(CW$?\fR is set on each \f(CW\*(C`wait\*(C'\fR or pipe \f(CW\*(C`close\*(C'\fR,
overwriting the old value.  This is more like \f(CW$@\fR, which on every
\&\f(CW\*(C`eval()\*(C'\fR is always set on failure and cleared on success.
.PP
For more details, see the individual descriptions at \f(CW$@\fR, \f(CW$!\fR,
\&\f(CW$^E\fR, and \f(CW$?\fR.
.IP "${^CHILD_ERROR_NATIVE}" 8
.IX Xref "$^CHILD_ERROR_NATIVE"
.IX Item "${^CHILD_ERROR_NATIVE}"
The native status returned by the last pipe close, backtick (\f(CW\*(C`\`\`\*(C'\fR)
command, successful call to \f(CW\*(C`wait()\*(C'\fR or \f(CW\*(C`waitpid()\*(C'\fR, or from the
\&\f(CW\*(C`system()\*(C'\fR operator.  On POSIX-like systems this value can be decoded
with the \s-1WIFEXITED\s0, \s-1WEXITSTATUS\s0, \s-1WIFSIGNALED\s0, \s-1WTERMSIG\s0, \s-1WIFSTOPPED\s0,
\&\s-1WSTOPSIG\s0 and \s-1WIFCONTINUED\s0 functions provided by the \s-1POSIX\s0 module.
.Sp
Under \s-1VMS\s0 this reflects the actual \s-1VMS\s0 exit status; i.e. it is the
same as \f(CW$?\fR when the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR is in effect.
.Sp
This variable was added in Perl 5.8.9.
.ie n .IP "$EXTENDED_OS_ERROR" 8
.el .IP "\f(CW$EXTENDED_OS_ERROR\fR" 8
.IX Item "$EXTENDED_OS_ERROR"
.PD 0
.IP "$^E" 8
.IX Xref "$^E $EXTENDED_OS_ERROR"
.IX Item "$^E"
.PD
Error information specific to the current operating system.  At the
moment, this differs from \f(CW$!\fR under only \s-1VMS\s0, \s-1OS/2\s0, and Win32 (and
for MacPerl).  On all other platforms, \f(CW$^E\fR is always just the same
as \f(CW$!\fR.
.Sp
Under \s-1VMS\s0, \f(CW$^E\fR provides the \s-1VMS\s0 status value from the last system
error.  This is more specific information about the last system error
than that provided by \f(CW$!\fR.  This is particularly important when \f(CW$!\fR
is set to \fB\s-1EVMSERR\s0\fR.
.Sp
Under \s-1OS/2\s0, \f(CW$^E\fR is set to the error code of the last call to \s-1OS/2\s0
\&\s-1API\s0 either via \s-1CRT\s0, or directly from perl.
.Sp
Under Win32, \f(CW$^E\fR always returns the last error information reported
by the Win32 call \f(CW\*(C`GetLastError()\*(C'\fR which describes the last error
from within the Win32 \s-1API\s0.  Most Win32\-specific code will report errors
via \f(CW$^E\fR.  \s-1ANSI\s0 C and Unix-like calls set \f(CW\*(C`errno\*(C'\fR and so most
portable Perl code will report errors via \f(CW$!\fR.
.Sp
Caveats mentioned in the description of \f(CW$!\fR generally apply to
\&\f(CW$^E\fR, also.
.Sp
This variable was added in Perl 5.003.
.Sp
Mnemonic: Extra error explanation.
.ie n .IP "$EXCEPTIONS_BEING_CAUGHT" 8
.el .IP "\f(CW$EXCEPTIONS_BEING_CAUGHT\fR" 8
.IX Item "$EXCEPTIONS_BEING_CAUGHT"
.PD 0
.IP "$^S" 8
.IX Xref "$^S $EXCEPTIONS_BEING_CAUGHT"
.IX Item "$^S"
.PD
Current state of the interpreter.
.Sp
.Vb 5
\&        $^S         State
\&        \-\-\-\-\-\-\-\-\-   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        undef       Parsing module/eval
\&        true (1)    Executing an eval
\&        false (0)   Otherwise
.Ve
.Sp
The first state may happen in \f(CW$SIG{_\|_DIE_\|_}\fR and \f(CW$SIG{_\|_WARN_\|_}\fR
handlers.
.Sp
This variable was added in Perl 5.004.
.ie n .IP "$WARNING" 8
.el .IP "\f(CW$WARNING\fR" 8
.IX Item "$WARNING"
.PD 0
.IP "$^W" 8
.IX Xref "$^W $WARNING"
.IX Item "$^W"
.PD
The current value of the warning switch, initially true if \fB\-w\fR was
used, false otherwise, but directly modifiable.
.Sp
See also warnings.
.Sp
Mnemonic: related to the \fB\-w\fR switch.
.IP "${^WARNING_BITS}" 8
.IX Xref "${^WARNING_BITS}"
.IX Item "${^WARNING_BITS}"
The current set of warning checks enabled by the \f(CW\*(C`use warnings\*(C'\fR pragma.
It has the same scoping as the \f(CW$^H\fR and \f(CW\*(C`%^H\*(C'\fR variables.  The exact
values are considered internal to the warnings pragma and may change
between versions of Perl.
.Sp
This variable was added in Perl 5.6.
.ie n .IP "$OS_ERROR" 8
.el .IP "\f(CW$OS_ERROR\fR" 8
.IX Item "$OS_ERROR"
.PD 0
.ie n .IP "$ERRNO" 8
.el .IP "\f(CW$ERRNO\fR" 8
.IX Item "$ERRNO"
.IP "$!" 8
.IX Xref "$! $ERRNO $OS_ERROR"
.PD
When referenced, \f(CW$!\fR retrieves the current value
of the C \f(CW\*(C`errno\*(C'\fR integer variable.
If \f(CW$!\fR is assigned a numerical value, that value is stored in \f(CW\*(C`errno\*(C'\fR.
When referenced as a string, \f(CW$!\fR yields the system error string
corresponding to \f(CW\*(C`errno\*(C'\fR.
.Sp
Many system or library calls set \f(CW\*(C`errno\*(C'\fR if they fail,
to indicate the cause of failure.  They usually do \fBnot\fR
set \f(CW\*(C`errno\*(C'\fR to zero if they succeed.  This means \f(CW\*(C`errno\*(C'\fR,
hence \f(CW$!\fR, is meaningful only \fIimmediately\fR after a \fBfailure\fR:
.Sp
.Vb 11
\&    if (open my $fh, "<", $filename) {
\&                # Here $! is meaningless.
\&                ...
\&    }
\&    else {
\&                # ONLY here is $! meaningful.
\&                ...
\&                # Already here $! might be meaningless.
\&    }
\&    # Since here we might have either success or failure,
\&    # $! is meaningless.
.Ve
.Sp
Here, \fImeaningless\fR means that \f(CW$!\fR may be unrelated to the outcome
of the \f(CW\*(C`open()\*(C'\fR operator.  Assignment to \f(CW$!\fR is similarly ephemeral.
It can be used immediately before invoking the \f(CW\*(C`die()\*(C'\fR operator,
to set the exit value, or to inspect the system error string
corresponding to error \fIn\fR, or to restore \f(CW$!\fR to a meaningful state.
.Sp
Mnemonic: What just went bang?
.ie n .IP "%OS_ERROR" 8
.el .IP "\f(CW%OS_ERROR\fR" 8
.IX Item "%OS_ERROR"
.PD 0
.ie n .IP "%ERRNO" 8
.el .IP "\f(CW%ERRNO\fR" 8
.IX Item "%ERRNO"
.IP "%!" 8
.IX Xref "%! %OS_ERROR %ERRNO"
.PD
Each element of \f(CW\*(C`%!\*(C'\fR has a true value only if \f(CW$!\fR is set to that
value.  For example, \f(CW$!{ENOENT}\fR is true if and only if the current
value of \f(CW$!\fR is \f(CW\*(C`ENOENT\*(C'\fR; that is, if the most recent error was \*(L"No
such file or directory\*(R" (or its moral equivalent: not all operating
systems give that exact error, and certainly not all languages).  To
check if a particular key is meaningful on your system, use \f(CW\*(C`exists
$!{the_key}\*(C'\fR; for a list of legal keys, use \f(CW\*(C`keys %!\*(C'\fR.  See Errno
for more information, and also see \*(L"$!\*(R".
.Sp
This variable was added in Perl 5.005.
.ie n .IP "$CHILD_ERROR" 8
.el .IP "\f(CW$CHILD_ERROR\fR" 8
.IX Item "$CHILD_ERROR"
.PD 0
.IP "$?" 8
.IX Xref "$? $CHILD_ERROR"
.PD
The status returned by the last pipe close, backtick (\f(CW\*(C`\`\`\*(C'\fR) command,
successful call to \f(CW\*(C`wait()\*(C'\fR or \f(CW\*(C`waitpid()\*(C'\fR, or from the \f(CW\*(C`system()\*(C'\fR
operator.  This is just the 16\-bit status word returned by the
traditional Unix \f(CW\*(C`wait()\*(C'\fR system call (or else is made up to look
like it).  Thus, the exit value of the subprocess is really (\f(CW\*(C`$? >>
8\*(C'\fR), and \f(CW\*(C`$? & 127\*(C'\fR gives which signal, if any, the process died
from, and \f(CW\*(C`$? & 128\*(C'\fR reports whether there was a core dump.
.Sp
Additionally, if the \f(CW\*(C`h_errno\*(C'\fR variable is supported in C, its value
is returned via \f(CW$?\fR if any \f(CW\*(C`gethost*()\*(C'\fR function fails.
.Sp
If you have installed a signal handler for \f(CW\*(C`SIGCHLD\*(C'\fR, the
value of \f(CW$?\fR will usually be wrong outside that handler.
.Sp
Inside an \f(CW\*(C`END\*(C'\fR subroutine \f(CW$?\fR contains the value that is going to be
given to \f(CW\*(C`exit()\*(C'\fR.  You can modify \f(CW$?\fR in an \f(CW\*(C`END\*(C'\fR subroutine to
change the exit status of your program.  For example:
.Sp
.Vb 3
\&    END {
\&        $? = 1 if $? == 255;  # die would make it 255
\&    }
.Ve
.Sp
Under \s-1VMS\s0, the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR makes \f(CW$?\fR reflect the
actual \s-1VMS\s0 exit status, instead of the default emulation of \s-1POSIX\s0
status; see \*(L"$?\*(R" in perlvms for details.
.Sp
Mnemonic: similar to \fBsh\fR and \fBksh\fR.
.ie n .IP "$EVAL_ERROR" 8
.el .IP "\f(CW$EVAL_ERROR\fR" 8
.IX Item "$EVAL_ERROR"
.PD 0
.IP "$@" 8
.IX Xref "$@ $EVAL_ERROR"
.PD
The Perl syntax error message from the
last \f(CW\*(C`eval()\*(C'\fR operator.  If \f(CW$@\fR is
the null string, the last \f(CW\*(C`eval()\*(C'\fR parsed and executed correctly
(although the operations you invoked may have failed in the normal
fashion).
.Sp
Warning messages are not collected in this variable.  You can, however,
set up a routine to process warnings by setting \f(CW$SIG{_\|_WARN_\|_}\fR as
described in \*(L"%SIG\*(R".
.Sp
Mnemonic: Where was the syntax error \*(L"at\*(R"?
.SS "Variables related to the interpreter state"
.IX Subsection "Variables related to the interpreter state"
These variables provide information about the current interpreter state.
.ie n .IP "$COMPILING" 8
.el .IP "\f(CW$COMPILING\fR" 8
.IX Item "$COMPILING"
.PD 0
.IP "$^C" 8
.IX Xref "$^C $COMPILING"
.IX Item "$^C"
.PD
The current value of the flag associated with the \fB\-c\fR switch.
Mainly of use with \fB\-MO=...\fR to allow code to alter its behavior
when being compiled, such as for example to \f(CW\*(C`AUTOLOAD\*(C'\fR at compile
time rather than normal, deferred loading.  Setting
\&\f(CW\*(C`$^C = 1\*(C'\fR is similar to calling \f(CW\*(C`B::minus_c\*(C'\fR.
.Sp
This variable was added in Perl 5.6.
.ie n .IP "$DEBUGGING" 8
.el .IP "\f(CW$DEBUGGING\fR" 8
.IX Item "$DEBUGGING"
.PD 0
.IP "$^D" 8
.IX Xref "$^D $DEBUGGING"
.IX Item "$^D"
.PD
The current value of the debugging flags.  May be read or set.  Like its
command-line equivalent, you can use numeric or symbolic values, eg
\&\f(CW\*(C`$^D = 10\*(C'\fR or \f(CW\*(C`$^D = "st"\*(C'\fR.
.Sp
Mnemonic: value of \fB\-D\fR switch.
.IP "${^ENCODING}" 8
.IX Xref "${^ENCODING}"
.IX Item "${^ENCODING}"
The \fIobject reference\fR to the \f(CW\*(C`Encode\*(C'\fR object that is used to convert
the source code to Unicode.  Thanks to this variable your Perl script
does not have to be written in \s-1UTF\-8\s0.  Default is \fIundef\fR.  The direct
manipulation of this variable is highly discouraged.
.Sp
This variable was added in Perl 5.8.2.
.IP "${^GLOBAL_PHASE}" 8
.IX Xref "${^GLOBAL_PHASE}"
.IX Item "${^GLOBAL_PHASE}"
The current phase of the perl interpreter.
.Sp
Possible values are:
.RS 8
.IP "\s-1CONSTRUCT\s0" 8
.IX Item "CONSTRUCT"
The \f(CW\*(C`PerlInterpreter*\*(C'\fR is being constructed via \f(CW\*(C`perl_construct\*(C'\fR.  This
value is mostly there for completeness and for use via the
underlying C variable \f(CW\*(C`PL_phase\*(C'\fR.  It's not really possible for Perl
code to be executed unless construction of the interpreter is
finished.
.IP "\s-1START\s0" 8
.IX Item "START"
This is the global compile-time.  That includes, basically, every
\&\f(CW\*(C`BEGIN\*(C'\fR block executed directly or indirectly from during the
compile-time of the top-level program.
.Sp
This phase is not called \*(L"\s-1BEGIN\s0\*(R" to avoid confusion with
\&\f(CW\*(C`BEGIN\*(C'\fR\-blocks, as those are executed during compile-time of any
compilation unit, not just the top-level program.  A new, localised
compile-time entered at run-time, for example by constructs as
\&\f(CW\*(C`eval "use SomeModule"\*(C'\fR are not global interpreter phases, and
therefore aren't reflected by \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR.
.IP "\s-1CHECK\s0" 8
.IX Item "CHECK"
Execution of any \f(CW\*(C`CHECK\*(C'\fR blocks.
.IP "\s-1INIT\s0" 8
.IX Item "INIT"
Similar to \*(L"\s-1CHECK\s0\*(R", but for \f(CW\*(C`INIT\*(C'\fR\-blocks, not \f(CW\*(C`CHECK\*(C'\fR blocks.
.IP "\s-1RUN\s0" 8
.IX Item "RUN"
The main run-time, i.e. the execution of \f(CW\*(C`PL_main_root\*(C'\fR.
.IP "\s-1END\s0" 8
.IX Item "END"
Execution of any \f(CW\*(C`END\*(C'\fR blocks.
.IP "\s-1DESTRUCT\s0" 8
.IX Item "DESTRUCT"
Global destruction.
.RE
.RS 8
.Sp
Also note that there's no value for UNITCHECK-blocks.  That's because
those are run for each compilation unit individually, and therefore is
not a global interpreter phase.
.Sp
Not every program has to go through each of the possible phases, but
transition from one phase to another can only happen in the order
described in the above list.
.Sp
An example of all of the phases Perl code can see:
.Sp
.Vb 1
\&    BEGIN { print "compile\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    INIT  { print "init\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    CHECK { print "check\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    {
\&        package Print::Phase;
\&
\&        sub new {
\&            my ($class, $time) = @_;
\&            return bless \e$time, $class;
\&        }
\&
\&        sub DESTROY {
\&            my $self = shift;
\&            print "$$self: ${^GLOBAL_PHASE}\en";
\&        }
\&    }
\&
\&    print "run\-time: ${^GLOBAL_PHASE}\en";
\&
\&    my $runtime = Print::Phase\->new(
\&        "lexical variables are garbage collected before END"
\&    );
\&
\&    END   { print "end\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    our $destruct = Print::Phase\->new(
\&        "package variables are garbage collected after END"
\&    );
.Ve
.Sp
This will print out
.Sp
.Vb 7
\&    compile\-time: START
\&    check\-time: CHECK
\&    init\-time: INIT
\&    run\-time: RUN
\&    lexical variables are garbage collected before END: RUN
\&    end\-time: END
\&    package variables are garbage collected after END: DESTRUCT
.Ve
.Sp
This variable was added in Perl 5.14.0.
.RE
.IP "$^H" 8
.IX Xref "$^H"
.IX Item "$^H"
\&\s-1WARNING:\s0 This variable is strictly for
internal use only.  Its availability,
behavior, and contents are subject to change without notice.
.Sp
This variable contains compile-time hints for the Perl interpreter.  At the
end of compilation of a \s-1BLOCK\s0 the value of this variable is restored to the
value when the interpreter started to compile the \s-1BLOCK\s0.
.Sp
When perl begins to parse any block construct that provides a lexical scope
(e.g., eval body, required file, subroutine body, loop body, or conditional
block), the existing value of \f(CW$^H\fR is saved, but its value is left unchanged.
When the compilation of the block is completed, it regains the saved value.
Between the points where its value is saved and restored, code that
executes within \s-1BEGIN\s0 blocks is free to change the value of \f(CW$^H\fR.
.Sp
This behavior provides the semantic of lexical scoping, and is used in,
for instance, the \f(CW\*(C`use strict\*(C'\fR pragma.
.Sp
The contents should be an integer; different bits of it are used for
different pragmatic flags.  Here's an example:
.Sp
.Vb 1
\&    sub add_100 { $^H |= 0x100 }
\&
\&    sub foo {
\&        BEGIN { add_100() }
\&        bar\->baz($boon);
\&    }
.Ve
.Sp
Consider what happens during execution of the \s-1BEGIN\s0 block.  At this point
the \s-1BEGIN\s0 block has already been compiled, but the body of \f(CW\*(C`foo()\*(C'\fR is still
being compiled.  The new value of \f(CW$^H\fR
will therefore be visible only while
the body of \f(CW\*(C`foo()\*(C'\fR is being compiled.
.Sp
Substitution of \f(CW\*(C`BEGIN { add_100() }\*(C'\fR block with:
.Sp
.Vb 1
\&    BEGIN { require strict; strict\->import(\*(Aqvars\*(Aq) }
.Ve
.Sp
demonstrates how \f(CW\*(C`use strict \*(Aqvars\*(Aq\*(C'\fR is implemented.  Here's a conditional
version of the same lexical pragma:
.Sp
.Vb 3
\&    BEGIN {
\&        require strict; strict\->import(\*(Aqvars\*(Aq) if $condition
\&    }
.Ve
.Sp
This variable was added in Perl 5.003.
.IP "%^H" 8
.IX Xref "%^H"
.IX Item "%^H"
The \f(CW\*(C`%^H\*(C'\fR hash provides the same scoping semantic as \f(CW$^H\fR.  This makes
it useful for implementation of lexically scoped pragmas.  See
perlpragma.
.Sp
When putting items into \f(CW\*(C`%^H\*(C'\fR, in order to avoid conflicting with other
users of the hash there is a convention regarding which keys to use.
A module should use only keys that begin with the module's name (the
name of its main package) and a \*(L"/\*(R" character.  For example, a module
\&\f(CW\*(C`Foo::Bar\*(C'\fR should use keys such as \f(CW\*(C`Foo::Bar/baz\*(C'\fR.
.Sp
This variable was added in Perl 5.6.
.IP "${^OPEN}" 8
.IX Xref "${^OPEN}"
.IX Item "${^OPEN}"
An internal variable used by PerlIO.  A string in two parts, separated
by a \f(CW\*(C`\e0\*(C'\fR byte, the first part describes the input layers, the second
part describes the output layers.
.Sp
This variable was added in Perl 5.8.0.
.ie n .IP "$PERLDB" 8
.el .IP "\f(CW$PERLDB\fR" 8
.IX Item "$PERLDB"
.PD 0
.IP "$^P" 8
.IX Xref "$^P $PERLDB"
.IX Item "$^P"
.PD
The internal variable for debugging support.  The meanings of the
various bits are subject to change, but currently indicate:
.RS 8
.IP "0x01" 6
.IX Item "0x01"
Debug subroutine enter/exit.
.IP "0x02" 6
.IX Item "0x02"
Line-by-line debugging.  Causes \f(CW\*(C`DB::DB()\*(C'\fR subroutine to be called for
each statement executed.  Also causes saving source code lines (like
0x400).
.IP "0x04" 6
.IX Item "0x04"
Switch off optimizations.
.IP "0x08" 6
.IX Item "0x08"
Preserve more data for future interactive inspections.
.IP "0x10" 6
.IX Item "0x10"
Keep info about source lines on which a subroutine is defined.
.IP "0x20" 6
.IX Item "0x20"
Start with single-step on.
.IP "0x40" 6
.IX Item "0x40"
Use subroutine address instead of name when reporting.
.IP "0x80" 6
.IX Item "0x80"
Report \f(CW\*(C`goto &subroutine\*(C'\fR as well.
.IP "0x100" 6
.IX Item "0x100"
Provide informative \*(L"file\*(R" names for evals based on the place they were compiled.
.IP "0x200" 6
.IX Item "0x200"
Provide informative names to anonymous subroutines based on the place they
were compiled.
.IP "0x400" 6
.IX Item "0x400"
Save source code lines into \f(CW\*(C`@{"_<$filename"}\*(C'\fR.
.RE
.RS 8
.Sp
Some bits may be relevant at compile-time only, some at
run-time only.  This is a new mechanism and the details may change.
See also perldebguts.
.RE
.IP "${^TAINT}" 8
.IX Xref "${^TAINT}"
.IX Item "${^TAINT}"
Reflects if taint mode is on or off.  1 for on (the program was run with
\&\fB\-T\fR), 0 for off, \-1 when only taint warnings are enabled (i.e. with
\&\fB\-t\fR or \fB\-TU\fR).
.Sp
This variable is read-only.
.Sp
This variable was added in Perl 5.8.
.IP "${^UNICODE}" 8
.IX Xref "${^UNICODE}"
.IX Item "${^UNICODE}"
Reflects certain Unicode settings of Perl.  See perlrun
documentation for the \f(CW\*(C`\-C\*(C'\fR switch for more information about
the possible values.
.Sp
This variable is set during Perl startup and is thereafter read-only.
.Sp
This variable was added in Perl 5.8.2.
.IP "${^UTF8CACHE}" 8
.IX Xref "${^UTF8CACHE}"
.IX Item "${^UTF8CACHE}"
This variable controls the state of the internal \s-1UTF\-8\s0 offset caching code.
1 for on (the default), 0 for off, \-1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.
.Sp
This variable was added in Perl 5.8.9.
.IP "${^UTF8LOCALE}" 8
.IX Xref "${^UTF8LOCALE}"
.IX Item "${^UTF8LOCALE}"
This variable indicates whether a \s-1UTF\-8\s0 locale was detected by perl at
startup.  This information is used by perl when it's in
adjust\-utf8ness\-to\-locale mode (as when run with the \f(CW\*(C`\-CL\*(C'\fR command-line
switch); see perlrun for more info on this.
.Sp
This variable was added in Perl 5.8.8.
.SS "Deprecated and removed variables"
.IX Subsection "Deprecated and removed variables"
Deprecating a variable announces the intent of the perl maintainers to
eventually remove the variable from the language.  It may still be
available despite its status.  Using a deprecated variable triggers
a warning.
.PP
Once a variable is removed, its use triggers an error telling you
the variable is unsupported.
.PP
See perldiag for details about error messages.
.ie n .IP "$OFMT" 8
.el .IP "\f(CW$OFMT\fR" 8
.IX Item "$OFMT"
.PD 0
.IP "$#" 8
.IX Xref "$# $OFMT"
.PD
\&\f(CW$#\fR was a variable that could be used to format printed numbers.
After a deprecation cycle, its magic was removed in Perl 5.10 and
using it now triggers a warning: \f(CW\*(C`$# is no longer supported\*(C'\fR.
.Sp
This is not the sigil you use in front of an array name to get the
last index, like \f(CW$#array\fR.  That's still how you get the last index
of an array in Perl.  The two have nothing to do with each other.
.Sp
Deprecated in Perl 5.
.Sp
Removed in Perl 5.10.
.IP "$*" 8
.IX Xref "$*"
\&\f(CW$*\fR was a variable that you could use to enable multiline matching.
After a deprecation cycle, its magic was removed in Perl 5.10.
Using it now triggers a warning: \f(CW\*(C`$* is no longer supported\*(C'\fR.
You should use the \f(CW\*(C`/s\*(C'\fR and \f(CW\*(C`/m\*(C'\fR regexp modifiers instead.
.Sp
Deprecated in Perl 5.
.Sp
Removed in Perl 5.10.
.ie n .IP "$ARRAY_BASE" 8
.el .IP "\f(CW$ARRAY_BASE\fR" 8
.IX Item "$ARRAY_BASE"
.PD 0
.IP "$[" 8
.IX Xref "$[ $ARRAY_BASE"
.PD
This variable stores the index of the first element in an array, and
of the first character in a substring.  The default is 0, but you could
theoretically set it to 1 to make Perl behave more like \fBawk\fR (or Fortran)
when subscripting and when evaluating the \fIindex()\fR and \fIsubstr()\fR functions.
.Sp
As of release 5 of Perl, assignment to \f(CW$[\fR is treated as a compiler
directive, and cannot influence the behavior of any other file.
(That's why you can only assign compile-time constants to it.)
Its use is highly discouraged.
.Sp
Prior to Perl 5.10, assignment to \f(CW$[\fR could be seen from outer lexical
scopes in the same file, unlike other compile-time directives (such as
strict).  Using \fIlocal()\fR on it would bind its value strictly to a lexical
block.  Now it is always lexically scoped.
.Sp
As of Perl 5.16, it is implemented by the arybase module.  See
arybase for more details on its behaviour.
.Sp
Under \f(CW\*(C`use v5.16\*(C'\fR, or \f(CW\*(C`no feature "array_base"\*(C'\fR, \f(CW$[\fR no longer has any
effect, and always contains 0.  Assigning 0 to it is permitted, but any
other value will produce an error.
.Sp
Mnemonic: [ begins subscripts.
.Sp
Deprecated in Perl 5.12.
.ie n .IP "$OLD_PERL_VERSION" 8
.el .IP "\f(CW$OLD_PERL_VERSION\fR" 8
.IX Item "$OLD_PERL_VERSION"
.PD 0
.IP "$]" 8
.IX Xref "$] $OLD_PERL_VERSION"
.PD
See \*(L"$^V\*(R" for a more modern representation of the Perl version that allows
accurate string comparisons.
.Sp
The version + patchlevel / 1000 of the Perl interpreter.  This variable
can be used to determine whether the Perl interpreter executing a
script is in the right range of versions:
.Sp
.Vb 1
\&    warn "No checksumming!\en" if $] < 3.019;
.Ve
.Sp
The floating point representation can sometimes lead to inaccurate
numeric comparisons.
.Sp
See also the documentation of \f(CW\*(C`use VERSION\*(C'\fR and \f(CW\*(C`require VERSION\*(C'\fR
for a convenient way to fail if the running Perl interpreter is too old.
.Sp
Mnemonic: Is this version of perl in the right bracket?
                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvar5.18.1                                0100644 0001750 0001750 00000272634 12566207450 022744  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVAR 1"
.TH PERLVAR 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvar \- Perl predefined variables
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "The Syntax of Variable Names"
.IX Subsection "The Syntax of Variable Names"
Variable names in Perl can have several formats.  Usually, they
must begin with a letter or underscore, in which case they can be
arbitrarily long (up to an internal limit of 251 characters) and
may contain letters, digits, underscores, or the special sequence
\&\f(CW\*(C`::\*(C'\fR or \f(CW\*(C`\*(Aq\*(C'\fR.  In this case, the part before the last \f(CW\*(C`::\*(C'\fR or
\&\f(CW\*(C`\*(Aq\*(C'\fR is taken to be a \fIpackage qualifier\fR; see perlmod.
.PP
Perl variable names may also be a sequence of digits or a single
punctuation or control character.  These names are all reserved for
special uses by Perl; for example, the all-digits names are used
to hold data captured by backreferences after a regular expression
match.  Perl has a special syntax for the single-control-character
names: It understands \f(CW\*(C`^X\*(C'\fR (caret \f(CW\*(C`X\*(C'\fR) to mean the control\-\f(CW\*(C`X\*(C'\fR
character.  For example, the notation \f(CW$^W\fR (dollar-sign caret
\&\f(CW\*(C`W\*(C'\fR) is the scalar variable whose name is the single character
control\-\f(CW\*(C`W\*(C'\fR.  This is better than typing a literal control\-\f(CW\*(C`W\*(C'\fR
into your program.
.PP
Since Perl v5.6.0, Perl variable names may be alphanumeric
strings that begin with control characters (or better yet, a caret).
These variables must be written in the form \f(CW\*(C`${^Foo}\*(C'\fR; the braces
are not optional.  \f(CW\*(C`${^Foo}\*(C'\fR denotes the scalar variable whose
name is a control\-\f(CW\*(C`F\*(C'\fR followed by two \f(CW\*(C`o\*(C'\fR's.  These variables are
reserved for future special uses by Perl, except for the ones that
begin with \f(CW\*(C`^_\*(C'\fR (control-underscore or caret-underscore).  No
control-character name that begins with \f(CW\*(C`^_\*(C'\fR will acquire a special
meaning in any future version of Perl; such names may therefore be
used safely in programs.  \f(CW$^_\fR itself, however, \fIis\fR reserved.
.PP
Perl identifiers that begin with digits, control characters, or
punctuation characters are exempt from the effects of the \f(CW\*(C`package\*(C'\fR
declaration and are always forced to be in package \f(CW\*(C`main\*(C'\fR; they are
also exempt from \f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR errors.  A few other names are also
exempt in these ways:
.PP
.Vb 5
\&    ENV      STDIN
\&    INC      STDOUT
\&    ARGV     STDERR
\&    ARGVOUT
\&    SIG
.Ve
.PP
In particular, the special \f(CW\*(C`${^_XYZ}\*(C'\fR variables are always taken
to be in package \f(CW\*(C`main\*(C'\fR, regardless of any \f(CW\*(C`package\*(C'\fR declarations
presently in scope.
.SH "SPECIAL VARIABLES"
.IX Header "SPECIAL VARIABLES"
The following names have special meaning to Perl.  Most punctuation
names have reasonable mnemonics, or analogs in the shells.
Nevertheless, if you wish to use long variable names, you need only say:
.PP
.Vb 1
\&    use English;
.Ve
.PP
at the top of your program.  This aliases all the short names to the long
names in the current package.  Some even have medium names, generally
borrowed from \fBawk\fR.  To avoid a performance hit, if you don't need the
\&\f(CW$PREMATCH\fR, \f(CW$MATCH\fR, or \f(CW$POSTMATCH\fR it's best to use the \f(CW\*(C`English\*(C'\fR
module without them:
.PP
.Vb 1
\&    use English \*(Aq\-no_match_vars\*(Aq;
.Ve
.PP
Before you continue, note the sort order for variables.  In general, we
first list the variables in case-insensitive, almost-lexigraphical
order (ignoring the \f(CW\*(C`{\*(C'\fR or \f(CW\*(C`^\*(C'\fR preceding words, as in \f(CW\*(C`${^UNICODE}\*(C'\fR
or \f(CW$^T\fR), although \f(CW$_\fR and \f(CW@_\fR move up to the top of the pile.
For variables with the same identifier, we list it in order of scalar,
array, hash, and bareword.
.SS "General Variables"
.IX Subsection "General Variables"
.ie n .IP "$ARG" 8
.el .IP "\f(CW$ARG\fR" 8
.IX Item "$ARG"
.PD 0
.ie n .IP "$_" 8
.el .IP "\f(CW$_\fR" 8
.IX Xref "$_ $ARG"
.IX Item "$_"
.PD
The default input and pattern-searching space.  The following pairs are
equivalent:
.Sp
.Vb 2
\&    while (<>) {...}    # equivalent only in while!
\&    while (defined($_ = <>)) {...}
\&
\&    /^Subject:/
\&    $_ =~ /^Subject:/
\&
\&    tr/a\-z/A\-Z/
\&    $_ =~ tr/a\-z/A\-Z/
\&
\&    chomp
\&    chomp($_)
.Ve
.Sp
Here are the places where Perl will assume \f(CW$_\fR even if you don't use it:
.RS 8
.IP "\(bu" 3
The following functions use \f(CW$_\fR as a default argument:
.Sp
abs, alarm, chomp, chop, chr, chroot,
cos, defined, eval, evalbytes, exp, fc, glob, hex, int, lc,
lcfirst, length, log, lstat, mkdir, oct, ord, pos, print, printf,
quotemeta, readlink, readpipe, ref, require, reverse (in scalar context only),
rmdir, say, sin, split (for its second
argument), sqrt, stat, study, uc, ucfirst,
unlink, unpack.
.IP "\(bu" 3
All file tests (\f(CW\*(C`\-f\*(C'\fR, \f(CW\*(C`\-d\*(C'\fR) except for \f(CW\*(C`\-t\*(C'\fR, which defaults to \s-1STDIN.\s0
See \*(L"\-X\*(R" in perlfunc
.IP "\(bu" 3
The pattern matching operations \f(CW\*(C`m//\*(C'\fR, \f(CW\*(C`s///\*(C'\fR and \f(CW\*(C`tr///\*(C'\fR (aka \f(CW\*(C`y///\*(C'\fR)
when used without an \f(CW\*(C`=~\*(C'\fR operator.
.IP "\(bu" 3
The default iterator variable in a \f(CW\*(C`foreach\*(C'\fR loop if no other
variable is supplied.
.IP "\(bu" 3
The implicit iterator variable in the \f(CW\*(C`grep()\*(C'\fR and \f(CW\*(C`map()\*(C'\fR functions.
.IP "\(bu" 3
The implicit variable of \f(CW\*(C`given()\*(C'\fR.
.IP "\(bu" 3
The default place to put the next value or input record
when a \f(CW\*(C`<FH>\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, \f(CW\*(C`readdir\*(C'\fR or \f(CW\*(C`each\*(C'\fR
operation's result is tested by itself as the sole criterion of a \f(CW\*(C`while\*(C'\fR
test.  Outside a \f(CW\*(C`while\*(C'\fR test, this will not happen.
.RE
.RS 8
.Sp
\&\f(CW$_\fR is by default a global variable.  However, as
of perl v5.10.0, you can use a lexical version of
\&\f(CW$_\fR by declaring it in a file or in a block with \f(CW\*(C`my\*(C'\fR.  Moreover,
declaring \f(CW\*(C`our $_\*(C'\fR restores the global \f(CW$_\fR in the current scope.  Though
this seemed like a good idea at the time it was introduced, lexical \f(CW$_\fR
actually causes more problems than it solves.  If you call a function that
expects to be passed information via \f(CW$_\fR, it may or may not work,
depending on how the function is written, there not being any easy way to
solve this.  Just avoid lexical \f(CW$_\fR, unless you are feeling particularly
masochistic.  For this reason lexical \f(CW$_\fR is still experimental and will
produce a warning unless warnings have been disabled.  As with other
experimental features, the behavior of lexical \f(CW$_\fR is subject to change
without notice, including change into a fatal error.
.Sp
Mnemonic: underline is understood in certain operations.
.RE
.ie n .IP "@ARG" 8
.el .IP "\f(CW@ARG\fR" 8
.IX Item "@ARG"
.PD 0
.ie n .IP "@_" 8
.el .IP "\f(CW@_\fR" 8
.IX Xref "@_ @ARG"
.IX Item "@_"
.PD
Within a subroutine the array \f(CW@_\fR contains the parameters passed to
that subroutine.  Inside a subroutine, \f(CW@_\fR is the default array for
the array operators \f(CW\*(C`push\*(C'\fR, \f(CW\*(C`pop\*(C'\fR, \f(CW\*(C`shift\*(C'\fR, and \f(CW\*(C`unshift\*(C'\fR.
.Sp
See perlsub.
.ie n .IP "$LIST_SEPARATOR" 8
.el .IP "\f(CW$LIST_SEPARATOR\fR" 8
.IX Item "$LIST_SEPARATOR"
.PD 0
.IP "$""" 8
.IX Xref "$"" $LIST_SEPARATOR"
.PD
When an array or an array slice is interpolated into a double-quoted
string or a similar context such as \f(CW\*(C`/.../\*(C'\fR, its elements are
separated by this value.  Default is a space.  For example, this:
.Sp
.Vb 1
\&    print "The array is: @array\en";
.Ve
.Sp
is equivalent to this:
.Sp
.Vb 1
\&    print "The array is: " . join($", @array) . "\en";
.Ve
.Sp
Mnemonic: works in double-quoted context.
.ie n .IP "$PROCESS_ID" 8
.el .IP "\f(CW$PROCESS_ID\fR" 8
.IX Item "$PROCESS_ID"
.PD 0
.ie n .IP "$PID" 8
.el .IP "\f(CW$PID\fR" 8
.IX Item "$PID"
.IP "$$" 8
.IX Xref "$$ $PID $PROCESS_ID"
.PD
The process number of the Perl running this script.  Though you \fIcan\fR set
this variable, doing so is generally discouraged, although it can be
invaluable for some testing purposes.  It will be reset automatically
across \f(CW\*(C`fork()\*(C'\fR calls.
.Sp
Note for Linux and Debian GNU/kFreeBSD users: Before Perl v5.16.0 perl
would emulate \s-1POSIX\s0 semantics on Linux systems using LinuxThreads, a
partial implementation of \s-1POSIX\s0 Threads that has since been superseded
by the Native \s-1POSIX\s0 Thread Library (\s-1NPTL\s0).
.Sp
LinuxThreads is now obsolete on Linux, and caching \f(CW\*(C`getpid()\*(C'\fR
like this made embedding perl unnecessarily complex (since you'd have
to manually update the value of $$), so now \f(CW$$\fR and \f(CW\*(C`getppid()\*(C'\fR
will always return the same values as the underlying C library.
.Sp
Debian GNU/kFreeBSD systems also used LinuxThreads up until and
including the 6.0 release, but after that moved to FreeBSD thread
semantics, which are POSIX-like.
.Sp
To see if your system is affected by this discrepancy check if
\&\f(CW\*(C`getconf GNU_LIBPTHREAD_VERSION | grep \-q NPTL\*(C'\fR returns a false
value. \s-1NTPL\s0 threads preserve the \s-1POSIX\s0 semantics.
.Sp
Mnemonic: same as shells.
.ie n .IP "$PROGRAM_NAME" 8
.el .IP "\f(CW$PROGRAM_NAME\fR" 8
.IX Item "$PROGRAM_NAME"
.PD 0
.ie n .IP "$0" 8
.el .IP "\f(CW$0\fR" 8
.IX Xref "$0 $PROGRAM_NAME"
.IX Item "$0"
.PD
Contains the name of the program being executed.
.Sp
On some (but not all) operating systems assigning to \f(CW$0\fR modifies
the argument area that the \f(CW\*(C`ps\*(C'\fR program sees.  On some platforms you
may have to use special \f(CW\*(C`ps\*(C'\fR options or a different \f(CW\*(C`ps\*(C'\fR to see the
changes.  Modifying the \f(CW$0\fR is more useful as a way of indicating the
current program state than it is for hiding the program you're
running.
.Sp
Note that there are platform-specific limitations on the maximum
length of \f(CW$0\fR.  In the most extreme case it may be limited to the
space occupied by the original \f(CW$0\fR.
.Sp
In some platforms there may be arbitrary amount of padding, for
example space characters, after the modified name as shown by \f(CW\*(C`ps\*(C'\fR.
In some platforms this padding may extend all the way to the original
length of the argument area, no matter what you do (this is the case
for example with Linux 2.2).
.Sp
Note for \s-1BSD\s0 users: setting \f(CW$0\fR does not completely remove \*(L"perl\*(R"
from the \fIps\fR\|(1) output.  For example, setting \f(CW$0\fR to \f(CW"foobar"\fR may
result in \f(CW"perl: foobar (perl)"\fR (whether both the \f(CW"perl: "\fR prefix
and the \*(L" (perl)\*(R" suffix are shown depends on your exact \s-1BSD\s0 variant
and version).  This is an operating system feature, Perl cannot help it.
.Sp
In multithreaded scripts Perl coordinates the threads so that any
thread may modify its copy of the \f(CW$0\fR and the change becomes visible
to \fIps\fR\|(1) (assuming the operating system plays along).  Note that
the view of \f(CW$0\fR the other threads have will not change since they
have their own copies of it.
.Sp
If the program has been given to perl via the switches \f(CW\*(C`\-e\*(C'\fR or \f(CW\*(C`\-E\*(C'\fR,
\&\f(CW$0\fR will contain the string \f(CW"\-e"\fR.
.Sp
On Linux as of perl v5.14.0 the legacy process name will be set with
\&\f(CWprctl(2)\fR, in addition to altering the \s-1POSIX\s0 name via \f(CW\*(C`argv[0]\*(C'\fR as
perl has done since version 4.000.  Now system utilities that read the
legacy process name such as ps, top and killall will recognize the
name you set when assigning to \f(CW$0\fR.  The string you supply will be
cut off at 16 bytes, this is a limitation imposed by Linux.
.Sp
Mnemonic: same as \fBsh\fR and \fBksh\fR.
.ie n .IP "$REAL_GROUP_ID" 8
.el .IP "\f(CW$REAL_GROUP_ID\fR" 8
.IX Item "$REAL_GROUP_ID"
.PD 0
.ie n .IP "$GID" 8
.el .IP "\f(CW$GID\fR" 8
.IX Item "$GID"
.IP "$(" 8
.IX Xref "$( $GID $REAL_GROUP_ID"
.PD
The real gid of this process.  If you are on a machine that supports
membership in multiple groups simultaneously, gives a space separated
list of groups you are in.  The first number is the one returned by
\&\f(CW\*(C`getgid()\*(C'\fR, and the subsequent ones by \f(CW\*(C`getgroups()\*(C'\fR, one of which may be
the same as the first number.
.Sp
However, a value assigned to \f(CW$(\fR must be a single number used to
set the real gid.  So the value given by \f(CW$(\fR should \fInot\fR be assigned
back to \f(CW$(\fR without being forced numeric, such as by adding zero.  Note
that this is different to the effective gid (\f(CW$)\fR) which does take a
list.
.Sp
You can change both the real gid and the effective gid at the same
time by using \f(CW\*(C`POSIX::setgid()\*(C'\fR.  Changes
to \f(CW$(\fR require a check to \f(CW$!\fR
to detect any possible errors after an attempted change.
.Sp
Mnemonic: parentheses are used to \fIgroup\fR things.  The real gid is the
group you \fIleft\fR, if you're running setgid.
.ie n .IP "$EFFECTIVE_GROUP_ID" 8
.el .IP "\f(CW$EFFECTIVE_GROUP_ID\fR" 8
.IX Item "$EFFECTIVE_GROUP_ID"
.PD 0
.ie n .IP "$EGID" 8
.el .IP "\f(CW$EGID\fR" 8
.IX Item "$EGID"
.IP "$)" 8
.IX Xref "$) $EGID $EFFECTIVE_GROUP_ID"
.PD
The effective gid of this process.  If you are on a machine that
supports membership in multiple groups simultaneously, gives a space
separated list of groups you are in.  The first number is the one
returned by \f(CW\*(C`getegid()\*(C'\fR, and the subsequent ones by \f(CW\*(C`getgroups()\*(C'\fR,
one of which may be the same as the first number.
.Sp
Similarly, a value assigned to \f(CW$)\fR must also be a space-separated
list of numbers.  The first number sets the effective gid, and
the rest (if any) are passed to \f(CW\*(C`setgroups()\*(C'\fR.  To get the effect of an
empty list for \f(CW\*(C`setgroups()\*(C'\fR, just repeat the new effective gid; that is,
to force an effective gid of 5 and an effectively empty \f(CW\*(C`setgroups()\*(C'\fR
list, say \f(CW\*(C` $) = "5 5" \*(C'\fR.
.Sp
You can change both the effective gid and the real gid at the same
time by using \f(CW\*(C`POSIX::setgid()\*(C'\fR (use only a single numeric argument).
Changes to \f(CW$)\fR require a check to \f(CW$!\fR to detect any possible errors
after an attempted change.
.Sp
\&\f(CW$<\fR, \f(CW$>\fR, \f(CW$(\fR and \f(CW$)\fR can be set only on
machines that support the corresponding \fIset[re][ug]\fIid()\fI\fR routine.  \f(CW$(\fR
and \f(CW$)\fR can be swapped only on machines supporting \f(CW\*(C`setregid()\*(C'\fR.
.Sp
Mnemonic: parentheses are used to \fIgroup\fR things.  The effective gid
is the group that's \fIright\fR for you, if you're running setgid.
.ie n .IP "$REAL_USER_ID" 8
.el .IP "\f(CW$REAL_USER_ID\fR" 8
.IX Item "$REAL_USER_ID"
.PD 0
.ie n .IP "$UID" 8
.el .IP "\f(CW$UID\fR" 8
.IX Item "$UID"
.IP "$<" 8
.IX Xref "$< $UID $REAL_USER_ID"
.PD
The real uid of this process.  You can change both the real uid and the
effective uid at the same time by using \f(CW\*(C`POSIX::setuid()\*(C'\fR.  Since
changes to \f(CW$<\fR require a system call, check \f(CW$!\fR after a change
attempt to detect any possible errors.
.Sp
Mnemonic: it's the uid you came \fIfrom\fR, if you're running setuid.
.ie n .IP "$EFFECTIVE_USER_ID" 8
.el .IP "\f(CW$EFFECTIVE_USER_ID\fR" 8
.IX Item "$EFFECTIVE_USER_ID"
.PD 0
.ie n .IP "$EUID" 8
.el .IP "\f(CW$EUID\fR" 8
.IX Item "$EUID"
.IP "$>" 8
.IX Xref "$> $EUID $EFFECTIVE_USER_ID"
.PD
The effective uid of this process.  For example:
.Sp
.Vb 2
\&    $< = $>;            # set real to effective uid
\&    ($<,$>) = ($>,$<);  # swap real and effective uids
.Ve
.Sp
You can change both the effective uid and the real uid at the same
time by using \f(CW\*(C`POSIX::setuid()\*(C'\fR.  Changes to \f(CW$>\fR require a check
to \f(CW$!\fR to detect any possible errors after an attempted change.
.Sp
\&\f(CW$<\fR and \f(CW$>\fR can be swapped only on machines
supporting \f(CW\*(C`setreuid()\*(C'\fR.
.Sp
Mnemonic: it's the uid you went \fIto\fR, if you're running setuid.
.ie n .IP "$SUBSCRIPT_SEPARATOR" 8
.el .IP "\f(CW$SUBSCRIPT_SEPARATOR\fR" 8
.IX Item "$SUBSCRIPT_SEPARATOR"
.PD 0
.ie n .IP "$SUBSEP" 8
.el .IP "\f(CW$SUBSEP\fR" 8
.IX Item "$SUBSEP"
.IP "$;" 8
.IX Xref "$; $SUBSEP SUBSCRIPT_SEPARATOR"
.PD
The subscript separator for multidimensional array emulation.  If you
refer to a hash element as
.Sp
.Vb 1
\&    $foo{$a,$b,$c}
.Ve
.Sp
it really means
.Sp
.Vb 1
\&    $foo{join($;, $a, $b, $c)}
.Ve
.Sp
But don't put
.Sp
.Vb 1
\&    @foo{$a,$b,$c}      # a slice\-\-note the @
.Ve
.Sp
which means
.Sp
.Vb 1
\&    ($foo{$a},$foo{$b},$foo{$c})
.Ve
.Sp
Default is \*(L"\e034\*(R", the same as \s-1SUBSEP\s0 in \fBawk\fR.  If your keys contain
binary data there might not be any safe value for \f(CW$;\fR.
.Sp
Consider using \*(L"real\*(R" multidimensional arrays as described
in perllol.
.Sp
Mnemonic: comma (the syntactic subscript separator) is a semi-semicolon.
.ie n .IP "$a" 8
.el .IP "\f(CW$a\fR" 8
.IX Item "$a"
.PD 0
.ie n .IP "$b" 8
.el .IP "\f(CW$b\fR" 8
.IX Xref "$a $b"
.IX Item "$b"
.PD
Special package variables when using \f(CW\*(C`sort()\*(C'\fR, see \*(L"sort\*(R" in perlfunc.
Because of this specialness \f(CW$a\fR and \f(CW$b\fR don't need to be declared
(using \f(CW\*(C`use vars\*(C'\fR, or \f(CW\*(C`our()\*(C'\fR) even when using the \f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR
pragma.  Don't lexicalize them with \f(CW\*(C`my $a\*(C'\fR or \f(CW\*(C`my $b\*(C'\fR if you want to
be able to use them in the \f(CW\*(C`sort()\*(C'\fR comparison block or function.
.ie n .IP "%ENV" 8
.el .IP "\f(CW%ENV\fR" 8
.IX Xref "%ENV"
.IX Item "%ENV"
The hash \f(CW%ENV\fR contains your current environment.  Setting a
value in \f(CW\*(C`ENV\*(C'\fR changes the environment for any child processes
you subsequently \f(CW\*(C`fork()\*(C'\fR off.
.ie n .IP "$SYSTEM_FD_MAX" 8
.el .IP "\f(CW$SYSTEM_FD_MAX\fR" 8
.IX Item "$SYSTEM_FD_MAX"
.PD 0
.IP "$^F" 8
.IX Xref "$^F $SYSTEM_FD_MAX"
.IX Item "$^F"
.PD
The maximum system file descriptor, ordinarily 2.  System file
descriptors are passed to \f(CW\*(C`exec()\*(C'\fRed processes, while higher file
descriptors are not.  Also, during an
\&\f(CW\*(C`open()\*(C'\fR, system file descriptors are
preserved even if the \f(CW\*(C`open()\*(C'\fR fails (ordinary file descriptors are
closed before the \f(CW\*(C`open()\*(C'\fR is attempted).  The close-on-exec
status of a file descriptor will be decided according to the value of
\&\f(CW$^F\fR when the corresponding file, pipe, or socket was opened, not the
time of the \f(CW\*(C`exec()\*(C'\fR.
.ie n .IP "@F" 8
.el .IP "\f(CW@F\fR" 8
.IX Xref "@F"
.IX Item "@F"
The array \f(CW@F\fR contains the fields of each line read in when autosplit
mode is turned on.  See perlrun for the \fB\-a\fR switch.  This array
is package-specific, and must be declared or given a full package name
if not in package main when running under \f(CW\*(C`strict \*(Aqvars\*(Aq\*(C'\fR.
.ie n .IP "@INC" 8
.el .IP "\f(CW@INC\fR" 8
.IX Xref "@INC"
.IX Item "@INC"
The array \f(CW@INC\fR contains the list of places that the \f(CW\*(C`do EXPR\*(C'\fR,
\&\f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`use\*(C'\fR constructs look for their library files.  It
initially consists of the arguments to any \fB\-I\fR command-line
switches, followed by the default Perl library, probably
\&\fI/usr/local/lib/perl\fR, followed by \*(L".\*(R", to represent the current
directory.  (\*(L".\*(R" will not be appended if taint checks are enabled,
either by \f(CW\*(C`\-T\*(C'\fR or by \f(CW\*(C`\-t\*(C'\fR.)  If you need to modify this at runtime,
you should use the \f(CW\*(C`use lib\*(C'\fR pragma to get the machine-dependent
library properly loaded also:
.Sp
.Vb 2
\&    use lib \*(Aq/mypath/libdir/\*(Aq;
\&    use SomeMod;
.Ve
.Sp
You can also insert hooks into the file inclusion system by putting Perl
code directly into \f(CW@INC\fR.  Those hooks may be subroutine references,
array references or blessed objects.  See \*(L"require\*(R" in perlfunc for details.
.ie n .IP "%INC" 8
.el .IP "\f(CW%INC\fR" 8
.IX Xref "%INC"
.IX Item "%INC"
The hash \f(CW%INC\fR contains entries for each filename included via the
\&\f(CW\*(C`do\*(C'\fR, \f(CW\*(C`require\*(C'\fR, or \f(CW\*(C`use\*(C'\fR operators.  The key is the filename
you specified (with module names converted to pathnames), and the
value is the location of the file found.  The \f(CW\*(C`require\*(C'\fR
operator uses this hash to determine whether a particular file has
already been included.
.Sp
If the file was loaded via a hook (e.g. a subroutine reference, see
\&\*(L"require\*(R" in perlfunc for a description of these hooks), this hook is
by default inserted into \f(CW%INC\fR in place of a filename.  Note, however,
that the hook may have set the \f(CW%INC\fR entry by itself to provide some more
specific info.
.ie n .IP "$INPLACE_EDIT" 8
.el .IP "\f(CW$INPLACE_EDIT\fR" 8
.IX Item "$INPLACE_EDIT"
.PD 0
.IP "$^I" 8
.IX Xref "$^I $INPLACE_EDIT"
.IX Item "$^I"
.PD
The current value of the inplace-edit extension.  Use \f(CW\*(C`undef\*(C'\fR to disable
inplace editing.
.Sp
Mnemonic: value of \fB\-i\fR switch.
.IP "$^M" 8
.IX Xref "$^M"
.IX Item "$^M"
By default, running out of memory is an untrappable, fatal error.
However, if suitably built, Perl can use the contents of \f(CW$^M\fR
as an emergency memory pool after \f(CW\*(C`die()\*(C'\fRing.  Suppose that your Perl
were compiled with \f(CW\*(C`\-DPERL_EMERGENCY_SBRK\*(C'\fR and used Perl's malloc.
Then
.Sp
.Vb 1
\&    $^M = \*(Aqa\*(Aq x (1 << 16);
.Ve
.Sp
would allocate a 64K buffer for use in an emergency.  See the
\&\fI\s-1INSTALL\s0\fR file in the Perl distribution for information on how to
add custom C compilation flags when compiling perl.  To discourage casual
use of this advanced feature, there is no English long name for
this variable.
.Sp
This variable was added in Perl 5.004.
.ie n .IP "$OSNAME" 8
.el .IP "\f(CW$OSNAME\fR" 8
.IX Item "$OSNAME"
.PD 0
.IP "$^O" 8
.IX Xref "$^O $OSNAME"
.IX Item "$^O"
.PD
The name of the operating system under which this copy of Perl was
built, as determined during the configuration process.  For examples
see \*(L"\s-1PLATFORMS\*(R"\s0 in perlport.
.Sp
The value is identical to \f(CW$Config{\*(Aqosname\*(Aq}\fR.  See also Config
and the \fB\-V\fR command-line switch documented in perlrun.
.Sp
In Windows platforms, \f(CW$^O\fR is not very helpful: since it is always
\&\f(CW\*(C`MSWin32\*(C'\fR, it doesn't tell the difference between
95/98/ME/NT/2000/XP/CE/.NET.  Use \f(CW\*(C`Win32::GetOSName()\*(C'\fR or
\&\fIWin32::GetOSVersion()\fR (see Win32 and perlport) to distinguish
between the variants.
.Sp
This variable was added in Perl 5.003.
.ie n .IP "%SIG" 8
.el .IP "\f(CW%SIG\fR" 8
.IX Xref "%SIG"
.IX Item "%SIG"
The hash \f(CW%SIG\fR contains signal handlers for signals.  For example:
.Sp
.Vb 6
\&    sub handler {   # 1st argument is signal name
\&        my($sig) = @_;
\&        print "Caught a SIG$sig\-\-shutting down\en";
\&        close(LOG);
\&        exit(0);
\&        }
\&
\&    $SIG{\*(AqINT\*(Aq}  = \e&handler;
\&    $SIG{\*(AqQUIT\*(Aq} = \e&handler;
\&    ...
\&    $SIG{\*(AqINT\*(Aq}  = \*(AqDEFAULT\*(Aq;   # restore default action
\&    $SIG{\*(AqQUIT\*(Aq} = \*(AqIGNORE\*(Aq;    # ignore SIGQUIT
.Ve
.Sp
Using a value of \f(CW\*(AqIGNORE\*(Aq\fR usually has the effect of ignoring the
signal, except for the \f(CW\*(C`CHLD\*(C'\fR signal.  See perlipc for more about
this special case.
.Sp
Here are some other examples:
.Sp
.Vb 7
\&    $SIG{"PIPE"} = "Plumber";   # assumes main::Plumber (not
\&                                # recommended)
\&    $SIG{"PIPE"} = \e&Plumber;   # just fine; assume current
\&                                # Plumber
\&    $SIG{"PIPE"} = *Plumber;    # somewhat esoteric
\&    $SIG{"PIPE"} = Plumber();   # oops, what did Plumber()
\&                                # return??
.Ve
.Sp
Be sure not to use a bareword as the name of a signal handler,
lest you inadvertently call it.
.Sp
If your system has the \f(CW\*(C`sigaction()\*(C'\fR function then signal handlers
are installed using it.  This means you get reliable signal handling.
.Sp
The default delivery policy of signals changed in Perl v5.8.0 from
immediate (also known as \*(L"unsafe\*(R") to deferred, also known as \*(L"safe
signals\*(R".  See perlipc for more information.
.Sp
Certain internal hooks can be also set using the \f(CW%SIG\fR hash.  The
routine indicated by \f(CW$SIG{_\|_WARN_\|_}\fR is called when a warning
message is about to be printed.  The warning message is passed as the
first argument.  The presence of a \f(CW\*(C`_\|_WARN_\|_\*(C'\fR hook causes the
ordinary printing of warnings to \f(CW\*(C`STDERR\*(C'\fR to be suppressed.  You can
use this to save warnings in a variable, or turn warnings into fatal
errors, like this:
.Sp
.Vb 2
\&    local $SIG{_\|_WARN_\|_} = sub { die $_[0] };
\&    eval $proggie;
.Ve
.Sp
As the \f(CW\*(AqIGNORE\*(Aq\fR hook is not supported by \f(CW\*(C`_\|_WARN_\|_\*(C'\fR, you can
disable warnings using the empty subroutine:
.Sp
.Vb 1
\&    local $SIG{_\|_WARN_\|_} = sub {};
.Ve
.Sp
The routine indicated by \f(CW$SIG{_\|_DIE_\|_}\fR is called when a fatal
exception is about to be thrown.  The error message is passed as the
first argument.  When a \f(CW\*(C`_\|_DIE_\|_\*(C'\fR hook routine returns, the exception
processing continues as it would have in the absence of the hook,
unless the hook routine itself exits via a \f(CW\*(C`goto &sub\*(C'\fR, a loop exit,
or a \f(CW\*(C`die()\*(C'\fR.  The \f(CW\*(C`_\|_DIE_\|_\*(C'\fR handler is explicitly disabled during
the call, so that you can die from a \f(CW\*(C`_\|_DIE_\|_\*(C'\fR handler.  Similarly
for \f(CW\*(C`_\|_WARN_\|_\*(C'\fR.
.Sp
Due to an implementation glitch, the \f(CW$SIG{_\|_DIE_\|_}\fR hook is called
even inside an \f(CW\*(C`eval()\*(C'\fR.  Do not use this to rewrite a pending
exception in \f(CW$@\fR, or as a bizarre substitute for overriding
\&\f(CW\*(C`CORE::GLOBAL::die()\*(C'\fR.  This strange action at a distance may be fixed
in a future release so that \f(CW$SIG{_\|_DIE_\|_}\fR is only called if your
program is about to exit, as was the original intent.  Any other use is
deprecated.
.Sp
\&\f(CW\*(C`_\|_DIE_\|_\*(C'\fR/\f(CW\*(C`_\|_WARN_\|_\*(C'\fR handlers are very special in one respect: they
may be called to report (probable) errors found by the parser.  In such
a case the parser may be in inconsistent state, so any attempt to
evaluate Perl code from such a handler will probably result in a
segfault.  This means that warnings or errors that result from parsing
Perl should be used with extreme caution, like this:
.Sp
.Vb 5
\&    require Carp if defined $^S;
\&    Carp::confess("Something wrong") if defined &Carp::confess;
\&    die "Something wrong, but could not load Carp to give "
\&      . "backtrace...\en\et"
\&      . "To see backtrace try starting Perl with \-MCarp switch";
.Ve
.Sp
Here the first line will load \f(CW\*(C`Carp\*(C'\fR \fIunless\fR it is the parser who
called the handler.  The second line will print backtrace and die if
\&\f(CW\*(C`Carp\*(C'\fR was available.  The third line will be executed only if \f(CW\*(C`Carp\*(C'\fR was
not available.
.Sp
Having to even think about the \f(CW$^S\fR variable in your exception
handlers is simply wrong.  \f(CW$SIG{_\|_DIE_\|_}\fR as currently implemented
invites grievous and difficult to track down errors.  Avoid it
and use an \f(CW\*(C`END{}\*(C'\fR or CORE::GLOBAL::die override instead.
.Sp
See \*(L"die\*(R" in perlfunc, \*(L"warn\*(R" in perlfunc, \*(L"eval\*(R" in perlfunc, and
warnings for additional information.
.ie n .IP "$BASETIME" 8
.el .IP "\f(CW$BASETIME\fR" 8
.IX Item "$BASETIME"
.PD 0
.IP "$^T" 8
.IX Xref "$^T $BASETIME"
.IX Item "$^T"
.PD
The time at which the program began running, in seconds since the
epoch (beginning of 1970).  The values returned by the \fB\-M\fR, \fB\-A\fR,
and \fB\-C\fR filetests are based on this value.
.ie n .IP "$PERL_VERSION" 8
.el .IP "\f(CW$PERL_VERSION\fR" 8
.IX Item "$PERL_VERSION"
.PD 0
.IP "$^V" 8
.IX Xref "$^V $PERL_VERSION"
.IX Item "$^V"
.PD
The revision, version, and subversion of the Perl interpreter,
represented as a \f(CW\*(C`version\*(C'\fR object.
.Sp
This variable first appeared in perl v5.6.0; earlier versions of perl
will see an undefined value.  Before perl v5.10.0 \f(CW$^V\fR was represented
as a v\-string.
.Sp
\&\f(CW$^V\fR can be used to determine whether the Perl interpreter executing
a script is in the right range of versions.  For example:
.Sp
.Vb 1
\&    warn "Hashes not randomized!\en" if !$^V or $^V lt v5.8.1
.Ve
.Sp
To convert \f(CW$^V\fR into its string representation use \f(CW\*(C`sprintf()\*(C'\fR's
\&\f(CW"%vd"\fR conversion:
.Sp
.Vb 1
\&    printf "version is v%vd\en", $^V;  # Perl\*(Aqs version
.Ve
.Sp
See the documentation of \f(CW\*(C`use VERSION\*(C'\fR and \f(CW\*(C`require VERSION\*(C'\fR
for a convenient way to fail if the running Perl interpreter is too old.
.Sp
See also \f(CW$]\fR for an older representation of the Perl version.
.Sp
This variable was added in Perl v5.6.0.
.Sp
Mnemonic: use ^V for Version Control.
.IP "${^WIN32_SLOPPY_STAT}" 8
.IX Xref "${^WIN32_SLOPPY_STAT} sitecustomize sitecustomize.pl"
.IX Item "${^WIN32_SLOPPY_STAT}"
If this variable is set to a true value, then \f(CW\*(C`stat()\*(C'\fR on Windows will
not try to open the file.  This means that the link count cannot be
determined and file attributes may be out of date if additional
hardlinks to the file exist.  On the other hand, not opening the file
is considerably faster, especially for files on network drives.
.Sp
This variable could be set in the \fIsitecustomize.pl\fR file to
configure the local Perl installation to use \*(L"sloppy\*(R" \f(CW\*(C`stat()\*(C'\fR by
default.  See the documentation for \fB\-f\fR in
perlrun for more information about site
customization.
.Sp
This variable was added in Perl v5.10.0.
.ie n .IP "$EXECUTABLE_NAME" 8
.el .IP "\f(CW$EXECUTABLE_NAME\fR" 8
.IX Item "$EXECUTABLE_NAME"
.PD 0
.IP "$^X" 8
.IX Xref "$^X $EXECUTABLE_NAME"
.IX Item "$^X"
.PD
The name used to execute the current copy of Perl, from C's
\&\f(CW\*(C`argv[0]\*(C'\fR or (where supported) \fI/proc/self/exe\fR.
.Sp
Depending on the host operating system, the value of \f(CW$^X\fR may be
a relative or absolute pathname of the perl program file, or may
be the string used to invoke perl but not the pathname of the
perl program file.  Also, most operating systems permit invoking
programs that are not in the \s-1PATH\s0 environment variable, so there
is no guarantee that the value of \f(CW$^X\fR is in \s-1PATH. \s0 For \s-1VMS,\s0 the
value may or may not include a version number.
.Sp
You usually can use the value of \f(CW$^X\fR to re-invoke an independent
copy of the same perl that is currently running, e.g.,
.Sp
.Vb 1
\&    @first_run = \`$^X \-le "print int rand 100 for 1..100"\`;
.Ve
.Sp
But recall that not all operating systems support forking or
capturing of the output of commands, so this complex statement
may not be portable.
.Sp
It is not safe to use the value of \f(CW$^X\fR as a path name of a file,
as some operating systems that have a mandatory suffix on
executable files do not require use of the suffix when invoking
a command.  To convert the value of \f(CW$^X\fR to a path name, use the
following statements:
.Sp
.Vb 7
\&    # Build up a set of file names (not command names).
\&    use Config;
\&    my $this_perl = $^X;
\&    if ($^O ne \*(AqVMS\*(Aq) {
\&        $this_perl .= $Config{_exe}
\&          unless $this_perl =~ m/$Config{_exe}$/i;
\&        }
.Ve
.Sp
Because many operating systems permit anyone with read access to
the Perl program file to make a copy of it, patch the copy, and
then execute the copy, the security-conscious Perl programmer
should take care to invoke the installed copy of perl, not the
copy referenced by \f(CW$^X\fR.  The following statements accomplish
this goal, and produce a pathname that can be invoked as a
command or referenced as a file.
.Sp
.Vb 6
\&    use Config;
\&    my $secure_perl_path = $Config{perlpath};
\&    if ($^O ne \*(AqVMS\*(Aq) {
\&        $secure_perl_path .= $Config{_exe}
\&            unless $secure_perl_path =~ m/$Config{_exe}$/i;
\&        }
.Ve
.SS "Variables related to regular expressions"
.IX Subsection "Variables related to regular expressions"
Most of the special variables related to regular expressions are side
effects.  Perl sets these variables when it has a successful match, so
you should check the match result before using them.  For instance:
.PP
.Vb 3
\&    if( /P(A)TT(ER)N/ ) {
\&        print "I found $1 and $2\en";
\&        }
.Ve
.PP
These variables are read-only and dynamically-scoped, unless we note
otherwise.
.PP
The dynamic nature of the regular expression variables means that
their value is limited to the block that they are in, as demonstrated
by this bit of code:
.PP
.Vb 2
\&    my $outer = \*(AqWallace and Grommit\*(Aq;
\&    my $inner = \*(AqMutt and Jeff\*(Aq;
\&
\&    my $pattern = qr/(\eS+) and (\eS+)/;
\&
\&    sub show_n { print "\e$1 is $1; \e$2 is $2\en" }
\&
\&    {
\&    OUTER:
\&        show_n() if $outer =~ m/$pattern/;
\&
\&        INNER: {
\&            show_n() if $inner =~ m/$pattern/;
\&            }
\&
\&        show_n();
\&    }
.Ve
.PP
The output shows that while in the \f(CW\*(C`OUTER\*(C'\fR block, the values of \f(CW$1\fR
and \f(CW$2\fR are from the match against \f(CW$outer\fR.  Inside the \f(CW\*(C`INNER\*(C'\fR
block, the values of \f(CW$1\fR and \f(CW$2\fR are from the match against
\&\f(CW$inner\fR, but only until the end of the block (i.e. the dynamic
scope).  After the \f(CW\*(C`INNER\*(C'\fR block completes, the values of \f(CW$1\fR and
\&\f(CW$2\fR return to the values for the match against \f(CW$outer\fR even though
we have not made another match:
.PP
.Vb 3
\&    $1 is Wallace; $2 is Grommit
\&    $1 is Mutt; $2 is Jeff
\&    $1 is Wallace; $2 is Grommit
.Ve
.PP
Due to an unfortunate accident of Perl's implementation, \f(CW\*(C`use
English\*(C'\fR imposes a considerable performance penalty on all regular
expression matches in a program because it uses the \f(CW\*(C`$\`\*(C'\fR, \f(CW$&\fR, and
\&\f(CW\*(C`$\*(Aq\*(C'\fR, regardless of whether they occur in the scope of \f(CW\*(C`use
English\*(C'\fR.  For that reason, saying \f(CW\*(C`use English\*(C'\fR in libraries is
strongly discouraged unless you import it without the match variables:
.PP
.Vb 1
\&    use English \*(Aq\-no_match_vars\*(Aq
.Ve
.PP
The \f(CW\*(C`Devel::NYTProf\*(C'\fR and \f(CW\*(C`Devel::FindAmpersand\*(C'\fR
modules can help you find uses of these
problematic match variables in your code.
.PP
Since Perl v5.10.0, you can use the \f(CW\*(C`/p\*(C'\fR match operator flag and the
\&\f(CW\*(C`${^PREMATCH}\*(C'\fR, \f(CW\*(C`${^MATCH}\*(C'\fR, and \f(CW\*(C`${^POSTMATCH}\*(C'\fR variables instead
so you only suffer the performance penalties.
.ie n .IP "$<\fIdigits\fR> ($1, $2, ...)" 8
.el .IP "$<\fIdigits\fR> ($1, \f(CW$2\fR, ...)" 8
.IX Xref "$1 $2 $3"
.IX Item "$<digits> ($1, $2, ...)"
Contains the subpattern from the corresponding set of capturing
parentheses from the last successful pattern match, not counting patterns
matched in nested blocks that have been exited already.
.Sp
These variables are read-only and dynamically-scoped.
.Sp
Mnemonic: like \edigits.
.ie n .IP "$MATCH" 8
.el .IP "\f(CW$MATCH\fR" 8
.IX Item "$MATCH"
.PD 0
.IP "$&" 8
.IX Xref "$& $MATCH"
.PD
The string matched by the last successful pattern match (not counting
any matches hidden within a \s-1BLOCK\s0 or \f(CW\*(C`eval()\*(C'\fR enclosed by the current
\&\s-1BLOCK\s0).
.Sp
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  To avoid this
penalty, you can extract the same substring by using \*(L"@\-\*(R".  Starting
with Perl v5.10.0, you can use the \f(CW\*(C`/p\*(C'\fR match flag and the \f(CW\*(C`${^MATCH}\*(C'\fR
variable to do the same thing for particular match operations.
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: like \f(CW\*(C`&\*(C'\fR in some editors.
.IP "${^MATCH}" 8
.IX Xref "${^MATCH}"
.IX Item "${^MATCH}"
This is similar to \f(CW$&\fR (\f(CW$MATCH\fR) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the \f(CW\*(C`/p\*(C'\fR modifier.
.Sp
This variable was added in Perl v5.10.0.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$PREMATCH" 8
.el .IP "\f(CW$PREMATCH\fR" 8
.IX Item "$PREMATCH"
.PD 0
.IP "$`" 8
.IX Xref "$` $PREMATCH ${^PREMATCH}"
.PD
The string preceding whatever was matched by the last successful
pattern match, not counting any matches hidden within a \s-1BLOCK\s0 or \f(CW\*(C`eval\*(C'\fR
enclosed by the current \s-1BLOCK.\s0
.Sp
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.  To avoid this
penalty, you can extract the same substring by using \*(L"@\-\*(R".  Starting
with Perl v5.10.0, you can use the \f(CW\*(C`/p\*(C'\fR match flag and the
\&\f(CW\*(C`${^PREMATCH}\*(C'\fR variable to do the same thing for particular match
operations.
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: \f(CW\*(C`\`\*(C'\fR often precedes a quoted string.
.IP "${^PREMATCH}" 8
.IX Xref "$` ${^PREMATCH}"
.IX Item "${^PREMATCH}"
This is similar to \f(CW\*(C`$\`\*(C'\fR ($PREMATCH) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the \f(CW\*(C`/p\*(C'\fR modifier.
.Sp
This variable was added in Perl v5.10.0
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$POSTMATCH" 8
.el .IP "\f(CW$POSTMATCH\fR" 8
.IX Item "$POSTMATCH"
.PD 0
.IP "$'" 8
.IX Xref "$' $POSTMATCH ${^POSTMATCH} @-"
.PD
The string following whatever was matched by the last successful
pattern match (not counting any matches hidden within a \s-1BLOCK\s0 or \f(CW\*(C`eval()\*(C'\fR
enclosed by the current \s-1BLOCK\s0).  Example:
.Sp
.Vb 3
\&    local $_ = \*(Aqabcdefghi\*(Aq;
\&    /def/;
\&    print "$\`:$&:$\*(Aq\en";         # prints abc:def:ghi
.Ve
.Sp
The use of this variable anywhere in a program imposes a considerable
performance penalty on all regular expression matches.
To avoid this penalty, you can extract the same substring by
using \*(L"@\-\*(R".  Starting with Perl v5.10.0, you can use the \f(CW\*(C`/p\*(C'\fR match flag
and the \f(CW\*(C`${^POSTMATCH}\*(C'\fR variable to do the same thing for particular
match operations.
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: \f(CW\*(C`\*(Aq\*(C'\fR often follows a quoted string.
.IP "${^POSTMATCH}" 8
.IX Xref "${^POSTMATCH} $' $POSTMATCH"
.IX Item "${^POSTMATCH}"
This is similar to \f(CW\*(C`$\*(Aq\*(C'\fR (\f(CW$POSTMATCH\fR) except that it does not incur the
performance penalty associated with that variable, and is only guaranteed
to return a defined value when the pattern was compiled or executed with
the \f(CW\*(C`/p\*(C'\fR modifier.
.Sp
This variable was added in Perl v5.10.0.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$LAST_PAREN_MATCH" 8
.el .IP "\f(CW$LAST_PAREN_MATCH\fR" 8
.IX Item "$LAST_PAREN_MATCH"
.PD 0
.IP "$+" 8
.IX Xref "$+ $LAST_PAREN_MATCH"
.PD
The text matched by the last bracket of the last successful search pattern.
This is useful if you don't know which one of a set of alternative patterns
matched.  For example:
.Sp
.Vb 1
\&    /Version: (.*)|Revision: (.*)/ && ($rev = $+);
.Ve
.Sp
This variable is read-only and dynamically-scoped.
.Sp
Mnemonic: be positive and forward looking.
.ie n .IP "$LAST_SUBMATCH_RESULT" 8
.el .IP "\f(CW$LAST_SUBMATCH_RESULT\fR" 8
.IX Item "$LAST_SUBMATCH_RESULT"
.PD 0
.IP "$^N" 8
.IX Xref "$^N $LAST_SUBMATCH_RESULT"
.IX Item "$^N"
.PD
The text matched by the used group most-recently closed (i.e. the group
with the rightmost closing parenthesis) of the last successful search
pattern.
.Sp
This is primarily used inside \f(CW\*(C`(?{...})\*(C'\fR blocks for examining text
recently matched.  For example, to effectively capture text to a variable
(in addition to \f(CW$1\fR, \f(CW$2\fR, etc.), replace \f(CW\*(C`(...)\*(C'\fR with
.Sp
.Vb 1
\&    (?:(...)(?{ $var = $^N }))
.Ve
.Sp
By setting and then using \f(CW$var\fR in this way relieves you from having to
worry about exactly which numbered set of parentheses they are.
.Sp
This variable was added in Perl v5.8.0.
.Sp
Mnemonic: the (possibly) Nested parenthesis that most recently closed.
.ie n .IP "@LAST_MATCH_END" 8
.el .IP "\f(CW@LAST_MATCH_END\fR" 8
.IX Item "@LAST_MATCH_END"
.PD 0
.IP "@+" 8
.IX Xref "@+ @LAST_MATCH_END"
.PD
This array holds the offsets of the ends of the last successful
submatches in the currently active dynamic scope.  \f(CW$+[0]\fR is
the offset into the string of the end of the entire match.  This
is the same value as what the \f(CW\*(C`pos\*(C'\fR function returns when called
on the variable that was matched against.  The \fIn\fRth element
of this array holds the offset of the \fIn\fRth submatch, so
\&\f(CW$+[1]\fR is the offset past where \f(CW$1\fR ends, \f(CW$+[2]\fR the offset
past where \f(CW$2\fR ends, and so on.  You can use \f(CW$#+\fR to determine
how many subgroups were in the last successful match.  See the
examples given for the \f(CW\*(C`@\-\*(C'\fR variable.
.Sp
This variable was added in Perl v5.6.0.
.ie n .IP "%LAST_PAREN_MATCH" 8
.el .IP "\f(CW%LAST_PAREN_MATCH\fR" 8
.IX Item "%LAST_PAREN_MATCH"
.PD 0
.IP "%+" 8
.IX Xref "%+ %LAST_PAREN_MATCH"
.PD
Similar to \f(CW\*(C`@+\*(C'\fR, the \f(CW\*(C`%+\*(C'\fR hash allows access to the named capture
buffers, should they exist, in the last successful match in the
currently active dynamic scope.
.Sp
For example, \f(CW$+{foo}\fR is equivalent to \f(CW$1\fR after the following match:
.Sp
.Vb 1
\&    \*(Aqfoo\*(Aq =~ /(?<foo>foo)/;
.Ve
.Sp
The keys of the \f(CW\*(C`%+\*(C'\fR hash list only the names of buffers that have
captured (and that are thus associated to defined values).
.Sp
The underlying behaviour of \f(CW\*(C`%+\*(C'\fR is provided by the
Tie::Hash::NamedCapture module.
.Sp
\&\fBNote:\fR \f(CW\*(C`%\-\*(C'\fR and \f(CW\*(C`%+\*(C'\fR are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via \f(CW\*(C`each\*(C'\fR may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.
.Sp
This variable was added in Perl v5.10.0.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "@LAST_MATCH_START" 8
.el .IP "\f(CW@LAST_MATCH_START\fR" 8
.IX Item "@LAST_MATCH_START"
.PD 0
.IP "@\-" 8
.IX Xref "@- @LAST_MATCH_START"
.PD
\&\f(CW\*(C`$\-[0]\*(C'\fR is the offset of the start of the last successful match.
\&\f(CW\*(C`$\-[\*(C'\fR\fIn\fR\f(CW\*(C`]\*(C'\fR is the offset of the start of the substring matched by
\&\fIn\fR\-th subpattern, or undef if the subpattern did not match.
.Sp
Thus, after a match against \f(CW$_\fR, \f(CW$&\fR coincides with \f(CW\*(C`substr $_, $\-[0],
$+[0] \- $\-[0]\*(C'\fR.  Similarly, $\fIn\fR coincides with \f(CW\*(C`substr $_, $\-[n],
$+[n] \- $\-[n]\*(C'\fR if \f(CW\*(C`$\-[n]\*(C'\fR is defined, and $+ coincides with
\&\f(CW\*(C`substr $_, $\-[$#\-], $+[$#\-] \- $\-[$#\-]\*(C'\fR.  One can use \f(CW\*(C`$#\-\*(C'\fR to find the
last matched subgroup in the last successful match.  Contrast with
\&\f(CW$#+\fR, the number of subgroups in the regular expression.  Compare
with \f(CW\*(C`@+\*(C'\fR.
.Sp
This array holds the offsets of the beginnings of the last
successful submatches in the currently active dynamic scope.
\&\f(CW\*(C`$\-[0]\*(C'\fR is the offset into the string of the beginning of the
entire match.  The \fIn\fRth element of this array holds the offset
of the \fIn\fRth submatch, so \f(CW\*(C`$\-[1]\*(C'\fR is the offset where \f(CW$1\fR
begins, \f(CW\*(C`$\-[2]\*(C'\fR the offset where \f(CW$2\fR begins, and so on.
.Sp
After a match against some variable \f(CW$var\fR:
.RS 8
.ie n .IP """$\`"" is the same as ""substr($var, 0, $\-[0])""" 5
.el .IP "\f(CW$\`\fR is the same as \f(CWsubstr($var, 0, $\-[0])\fR" 5
.IX Item "$ is the same as substr($var, 0, $-[0])"
.PD 0
.ie n .IP "$& is the same as ""substr($var, $\-[0], $+[0] \- $\-[0])""" 5
.el .IP "\f(CW$&\fR is the same as \f(CWsubstr($var, $\-[0], $+[0] \- $\-[0])\fR" 5
.IX Item "$& is the same as substr($var, $-[0], $+[0] - $-[0])"
.ie n .IP """$\*(Aq"" is the same as ""substr($var, $+[0])""" 5
.el .IP "\f(CW$\*(Aq\fR is the same as \f(CWsubstr($var, $+[0])\fR" 5
.IX Item "$ is the same as substr($var, $+[0])"
.ie n .IP "$1 is the same as ""substr($var, $\-[1], $+[1] \- $\-[1])""" 5
.el .IP "\f(CW$1\fR is the same as \f(CWsubstr($var, $\-[1], $+[1] \- $\-[1])\fR" 5
.IX Item "$1 is the same as substr($var, $-[1], $+[1] - $-[1])"
.ie n .IP "$2 is the same as ""substr($var, $\-[2], $+[2] \- $\-[2])""" 5
.el .IP "\f(CW$2\fR is the same as \f(CWsubstr($var, $\-[2], $+[2] \- $\-[2])\fR" 5
.IX Item "$2 is the same as substr($var, $-[2], $+[2] - $-[2])"
.ie n .IP "$3 is the same as ""substr($var, $\-[3], $+[3] \- $\-[3])""" 5
.el .IP "\f(CW$3\fR is the same as \f(CWsubstr($var, $\-[3], $+[3] \- $\-[3])\fR" 5
.IX Item "$3 is the same as substr($var, $-[3], $+[3] - $-[3])"
.RE
.RS 8
.PD
.Sp
This variable was added in Perl v5.6.0.
.RE
.ie n .IP "%LAST_MATCH_START" 8
.el .IP "\f(CW%LAST_MATCH_START\fR" 8
.IX Item "%LAST_MATCH_START"
.PD 0
.IP "%\-" 8
.IX Xref "%- %LAST_MATCH_START"
.PD
Similar to \f(CW\*(C`%+\*(C'\fR, this variable allows access to the named capture groups
in the last successful match in the currently active dynamic scope.  To
each capture group name found in the regular expression, it associates a
reference to an array containing the list of values captured by all
buffers with that name (should there be several of them), in the order
where they appear.
.Sp
Here's an example:
.Sp
.Vb 12
\&    if (\*(Aq1234\*(Aq =~ /(?<A>1)(?<B>2)(?<A>3)(?<B>4)/) {
\&        foreach my $bufname (sort keys %\-) {
\&            my $ary = $\-{$bufname};
\&            foreach my $idx (0..$#$ary) {
\&                print "\e$\-{$bufname}[$idx] : ",
\&                      (defined($ary\->[$idx])
\&                          ? "\*(Aq$ary\->[$idx]\*(Aq"
\&                          : "undef"),
\&                      "\en";
\&            }
\&        }
\&    }
.Ve
.Sp
would print out:
.Sp
.Vb 4
\&    $\-{A}[0] : \*(Aq1\*(Aq
\&    $\-{A}[1] : \*(Aq3\*(Aq
\&    $\-{B}[0] : \*(Aq2\*(Aq
\&    $\-{B}[1] : \*(Aq4\*(Aq
.Ve
.Sp
The keys of the \f(CW\*(C`%\-\*(C'\fR hash correspond to all buffer names found in
the regular expression.
.Sp
The behaviour of \f(CW\*(C`%\-\*(C'\fR is implemented via the
Tie::Hash::NamedCapture module.
.Sp
\&\fBNote:\fR \f(CW\*(C`%\-\*(C'\fR and \f(CW\*(C`%+\*(C'\fR are tied views into a common internal hash
associated with the last successful regular expression.  Therefore mixing
iterative access to them via \f(CW\*(C`each\*(C'\fR may have unpredictable results.
Likewise, if the last successful match changes, then the results may be
surprising.
.Sp
This variable was added in Perl v5.10.0.
.Sp
This variable is read-only and dynamically-scoped.
.ie n .IP "$LAST_REGEXP_CODE_RESULT" 8
.el .IP "\f(CW$LAST_REGEXP_CODE_RESULT\fR" 8
.IX Item "$LAST_REGEXP_CODE_RESULT"
.PD 0
.IP "$^R" 8
.IX Xref "$^R $LAST_REGEXP_CODE_RESULT"
.IX Item "$^R"
.PD
The result of evaluation of the last successful \f(CW\*(C`(?{ code })\*(C'\fR
regular expression assertion (see perlre).  May be written to.
.Sp
This variable was added in Perl 5.005.
.IP "${^RE_DEBUG_FLAGS}" 8
.IX Xref "${^RE_DEBUG_FLAGS}"
.IX Item "${^RE_DEBUG_FLAGS}"
The current value of the regex debugging flags.  Set to 0 for no debug output
even when the \f(CW\*(C`re \*(Aqdebug\*(Aq\*(C'\fR module is loaded.  See re for details.
.Sp
This variable was added in Perl v5.10.0.
.IP "${^RE_TRIE_MAXBUF}" 8
.IX Xref "${^RE_TRIE_MAXBUF}"
.IX Item "${^RE_TRIE_MAXBUF}"
Controls how certain regex optimisations are applied and how much memory they
utilize.  This value by default is 65536 which corresponds to a 512kB
temporary cache.  Set this to a higher value to trade
memory for speed when matching large alternations.  Set
it to a lower value if you want the optimisations to
be as conservative of memory as possible but still occur, and set it to a
negative value to prevent the optimisation and conserve the most memory.
Under normal situations this variable should be of no interest to you.
.Sp
This variable was added in Perl v5.10.0.
.SS "Variables related to filehandles"
.IX Subsection "Variables related to filehandles"
Variables that depend on the currently selected filehandle may be set
by calling an appropriate object method on the \f(CW\*(C`IO::Handle\*(C'\fR object,
although this is less efficient than using the regular built-in
variables.  (Summary lines below for this contain the word \s-1HANDLE.\s0)
First you must say
.PP
.Vb 1
\&    use IO::Handle;
.Ve
.PP
after which you may use either
.PP
.Vb 1
\&    method HANDLE EXPR
.Ve
.PP
or more safely,
.PP
.Vb 1
\&    HANDLE\->method(EXPR)
.Ve
.PP
Each method returns the old value of the \f(CW\*(C`IO::Handle\*(C'\fR attribute.  The
methods each take an optional \s-1EXPR,\s0 which, if supplied, specifies the
new value for the \f(CW\*(C`IO::Handle\*(C'\fR attribute in question.  If not
supplied, most methods do nothing to the current value\*(--except for
\&\f(CW\*(C`autoflush()\*(C'\fR, which will assume a 1 for you, just to be different.
.PP
Because loading in the \f(CW\*(C`IO::Handle\*(C'\fR class is an expensive operation,
you should learn how to use the regular built-in variables.
.PP
A few of these variables are considered \*(L"read-only\*(R".  This means that
if you try to assign to this variable, either directly or indirectly
through a reference, you'll raise a run-time exception.
.PP
You should be very careful when modifying the default values of most
special variables described in this document.  In most cases you want
to localize these variables before changing them, since if you don't,
the change may affect other modules which rely on the default values
of the special variables that you have changed.  This is one of the
correct ways to read the whole file at once:
.PP
.Vb 4
\&    open my $fh, "<", "foo" or die $!;
\&    local $/; # enable localized slurp mode
\&    my $content = <$fh>;
\&    close $fh;
.Ve
.PP
But the following code is quite bad:
.PP
.Vb 4
\&    open my $fh, "<", "foo" or die $!;
\&    undef $/; # enable slurp mode
\&    my $content = <$fh>;
\&    close $fh;
.Ve
.PP
since some other module, may want to read data from some file in the
default \*(L"line mode\*(R", so if the code we have just presented has been
executed, the global value of \f(CW$/\fR is now changed for any other code
running inside the same Perl interpreter.
.PP
Usually when a variable is localized you want to make sure that this
change affects the shortest scope possible.  So unless you are already
inside some short \f(CW\*(C`{}\*(C'\fR block, you should create one yourself.  For
example:
.PP
.Vb 7
\&    my $content = \*(Aq\*(Aq;
\&    open my $fh, "<", "foo" or die $!;
\&    {
\&        local $/;
\&        $content = <$fh>;
\&    }
\&    close $fh;
.Ve
.PP
Here is an example of how your own code can go broken:
.PP
.Vb 5
\&    for ( 1..3 ){
\&        $\e = "\er\en";
\&        nasty_break();
\&        print "$_";
\&    }
\&
\&    sub nasty_break {
\&        $\e = "\ef";
\&        # do something with $_
\&    }
.Ve
.PP
You probably expect this code to print the equivalent of
.PP
.Vb 1
\&    "1\er\en2\er\en3\er\en"
.Ve
.PP
but instead you get:
.PP
.Vb 1
\&    "1\ef2\ef3\ef"
.Ve
.PP
Why? Because \f(CW\*(C`nasty_break()\*(C'\fR modifies \f(CW\*(C`$\e\*(C'\fR without localizing it
first.  The value you set in  \f(CW\*(C`nasty_break()\*(C'\fR is still there when you
return.  The fix is to add \f(CW\*(C`local()\*(C'\fR so the value doesn't leak out of
\&\f(CW\*(C`nasty_break()\*(C'\fR:
.PP
.Vb 1
\&    local $\e = "\ef";
.Ve
.PP
It's easy to notice the problem in such a short example, but in more
complicated code you are looking for trouble if you don't localize
changes to the special variables.
.ie n .IP "$ARGV" 8
.el .IP "\f(CW$ARGV\fR" 8
.IX Xref "$ARGV"
.IX Item "$ARGV"
Contains the name of the current file when reading from \f(CW\*(C`<>\*(C'\fR.
.ie n .IP "@ARGV" 8
.el .IP "\f(CW@ARGV\fR" 8
.IX Xref "@ARGV"
.IX Item "@ARGV"
The array \f(CW@ARGV\fR contains the command-line arguments intended for
the script.  \f(CW$#ARGV\fR is generally the number of arguments minus
one, because \f(CW$ARGV[0]\fR is the first argument, \fInot\fR the program's
command name itself.  See \*(L"$0\*(R" for the command name.
.IP "\s-1ARGV \s0" 8
.IX Xref "ARGV"
.IX Item "ARGV "
The special filehandle that iterates over command-line filenames in
\&\f(CW@ARGV\fR.  Usually written as the null filehandle in the angle operator
\&\f(CW\*(C`<>\*(C'\fR.  Note that currently \f(CW\*(C`ARGV\*(C'\fR only has its magical effect
within the \f(CW\*(C`<>\*(C'\fR operator; elsewhere it is just a plain filehandle
corresponding to the last file opened by \f(CW\*(C`<>\*(C'\fR.  In particular,
passing \f(CW\*(C`\e*ARGV\*(C'\fR as a parameter to a function that expects a filehandle
may not cause your function to automatically read the contents of all the
files in \f(CW@ARGV\fR.
.IP "\s-1ARGVOUT \s0" 8
.IX Xref "ARGVOUT"
.IX Item "ARGVOUT "
The special filehandle that points to the currently open output file
when doing edit-in-place processing with \fB\-i\fR.  Useful when you have
to do a lot of inserting and don't want to keep modifying \f(CW$_\fR.  See
perlrun for the \fB\-i\fR switch.
.IP "IO::Handle\->output_field_separator( \s-1EXPR \s0)" 8
.IX Item "IO::Handle->output_field_separator( EXPR )"
.PD 0
.ie n .IP "$OUTPUT_FIELD_SEPARATOR" 8
.el .IP "\f(CW$OUTPUT_FIELD_SEPARATOR\fR" 8
.IX Item "$OUTPUT_FIELD_SEPARATOR"
.ie n .IP "$OFS" 8
.el .IP "\f(CW$OFS\fR" 8
.IX Item "$OFS"
.IP "$," 8
.IX Xref "$, $OFS $OUTPUT_FIELD_SEPARATOR"
.PD
The output field separator for the print operator.  If defined, this
value is printed between each of print's arguments.  Default is \f(CW\*(C`undef\*(C'\fR.
.Sp
You cannot call \f(CW\*(C`output_field_separator()\*(C'\fR on a handle, only as a
static method.  See IO::Handle.
.Sp
Mnemonic: what is printed when there is a \*(L",\*(R" in your print statement.
.IP "\s-1HANDLE\-\s0>input_line_number( \s-1EXPR \s0)" 8
.IX Item "HANDLE->input_line_number( EXPR )"
.PD 0
.ie n .IP "$INPUT_LINE_NUMBER" 8
.el .IP "\f(CW$INPUT_LINE_NUMBER\fR" 8
.IX Item "$INPUT_LINE_NUMBER"
.ie n .IP "$NR" 8
.el .IP "\f(CW$NR\fR" 8
.IX Item "$NR"
.IP "$." 8
.IX Xref "$. $NR $INPUT_LINE_NUMBER line number"
.PD
Current line number for the last filehandle accessed.
.Sp
Each filehandle in Perl counts the number of lines that have been read
from it.  (Depending on the value of \f(CW$/\fR, Perl's idea of what
constitutes a line may not match yours.)  When a line is read from a
filehandle (via \f(CW\*(C`readline()\*(C'\fR or \f(CW\*(C`<>\*(C'\fR), or when \f(CW\*(C`tell()\*(C'\fR or
\&\f(CW\*(C`seek()\*(C'\fR is called on it, \f(CW$.\fR becomes an alias to the line counter
for that filehandle.
.Sp
You can adjust the counter by assigning to \f(CW$.\fR, but this will not
actually move the seek pointer.  \fILocalizing \f(CI$.\fI will not localize
the filehandle's line count\fR.  Instead, it will localize perl's notion
of which filehandle \f(CW$.\fR is currently aliased to.
.Sp
\&\f(CW$.\fR is reset when the filehandle is closed, but \fBnot\fR when an open
filehandle is reopened without an intervening \f(CW\*(C`close()\*(C'\fR.  For more
details, see \*(L"I/O Operators\*(R" in perlop.  Because \f(CW\*(C`<>\*(C'\fR never does
an explicit close, line numbers increase across \f(CW\*(C`ARGV\*(C'\fR files (but see
examples in \*(L"eof\*(R" in perlfunc).
.Sp
You can also use \f(CW\*(C`HANDLE\->input_line_number(EXPR)\*(C'\fR to access the
line counter for a given filehandle without having to worry about
which handle you last accessed.
.Sp
Mnemonic: many programs use \*(L".\*(R" to mean the current line number.
.IP "IO::Handle\->input_record_separator( \s-1EXPR \s0)" 8
.IX Item "IO::Handle->input_record_separator( EXPR )"
.PD 0
.ie n .IP "$INPUT_RECORD_SEPARATOR" 8
.el .IP "\f(CW$INPUT_RECORD_SEPARATOR\fR" 8
.IX Item "$INPUT_RECORD_SEPARATOR"
.ie n .IP "$RS" 8
.el .IP "\f(CW$RS\fR" 8
.IX Item "$RS"
.IP "$/" 8
.IX Xref "$ $RS $INPUT_RECORD_SEPARATOR"
.PD
The input record separator, newline by default.  This influences Perl's
idea of what a \*(L"line\*(R" is.  Works like \fBawk\fR's \s-1RS\s0 variable, including
treating empty lines as a terminator if set to the null string (an
empty line cannot contain any spaces or tabs).  You may set it to a
multi-character string to match a multi-character terminator, or to
\&\f(CW\*(C`undef\*(C'\fR to read through the end of file.  Setting it to \f(CW"\en\en"\fR
means something slightly different than setting to \f(CW""\fR, if the file
contains consecutive empty lines.  Setting to \f(CW""\fR will treat two or
more consecutive empty lines as a single empty line.  Setting to
\&\f(CW"\en\en"\fR will blindly assume that the next input character belongs to
the next paragraph, even if it's a newline.
.Sp
.Vb 3
\&    local $/;           # enable "slurp" mode
\&    local $_ = <FH>;    # whole file now here
\&    s/\en[ \et]+/ /g;
.Ve
.Sp
Remember: the value of \f(CW$/\fR is a string, not a regex.  \fBawk\fR has to
be better for something. :\-)
.Sp
Setting \f(CW$/\fR to a reference to an integer, scalar containing an
integer, or scalar that's convertible to an integer will attempt to
read records instead of lines, with the maximum record size being the
referenced integer number of characters.  So this:
.Sp
.Vb 3
\&    local $/ = \e32768; # or \e"32768", or \e$var_containing_32768
\&    open my $fh, "<", $myfile or die $!;
\&    local $_ = <$fh>;
.Ve
.Sp
will read a record of no more than 32768 characters from \f(CW$fh\fR.  If you're
not reading from a record-oriented file (or your \s-1OS\s0 doesn't have
record-oriented files), then you'll likely get a full chunk of data
with every read.  If a record is larger than the record size you've
set, you'll get the record back in pieces.  Trying to set the record
size to zero or less will cause reading in the (rest of the) whole file.
.Sp
On \s-1VMS\s0 only, record reads bypass PerlIO layers and any associated
buffering, so you must not mix record and non-record reads on the
same filehandle.  Record mode mixes with line mode only when the
same buffering layer is in use for both modes.
.Sp
You cannot call \f(CW\*(C`input_record_separator()\*(C'\fR on a handle, only as a
static method.  See IO::Handle.
.Sp
See also \*(L"Newlines\*(R" in perlport.  Also see \*(L"$.\*(R".
.Sp
Mnemonic: / delimits line boundaries when quoting poetry.
.IP "IO::Handle\->output_record_separator( \s-1EXPR \s0)" 8
.IX Item "IO::Handle->output_record_separator( EXPR )"
.PD 0
.ie n .IP "$OUTPUT_RECORD_SEPARATOR" 8
.el .IP "\f(CW$OUTPUT_RECORD_SEPARATOR\fR" 8
.IX Item "$OUTPUT_RECORD_SEPARATOR"
.ie n .IP "$ORS" 8
.el .IP "\f(CW$ORS\fR" 8
.IX Item "$ORS"
.IP "$\e" 8
.IX Xref "$\\ $ORS $OUTPUT_RECORD_SEPARATOR"
.IX Item "$"
.PD
The output record separator for the print operator.  If defined, this
value is printed after the last of print's arguments.  Default is \f(CW\*(C`undef\*(C'\fR.
.Sp
You cannot call \f(CW\*(C`output_record_separator()\*(C'\fR on a handle, only as a
static method.  See IO::Handle.
.Sp
Mnemonic: you set \f(CW\*(C`$\e\*(C'\fR instead of adding \*(L"\en\*(R" at the end of the print.
Also, it's just like \f(CW$/\fR, but it's what you get \*(L"back\*(R" from Perl.
.IP "\s-1HANDLE\-\s0>autoflush( \s-1EXPR \s0)" 8
.IX Item "HANDLE->autoflush( EXPR )"
.PD 0
.ie n .IP "$OUTPUT_AUTOFLUSH" 8
.el .IP "\f(CW$OUTPUT_AUTOFLUSH\fR" 8
.IX Item "$OUTPUT_AUTOFLUSH"
.IP "$|" 8
.IX Xref "$| autoflush flush $OUTPUT_AUTOFLUSH"
.PD
If set to nonzero, forces a flush right away and after every write or
print on the currently selected output channel.  Default is 0
(regardless of whether the channel is really buffered by the system or
not; \f(CW$|\fR tells you only whether you've asked Perl explicitly to
flush after each write).  \s-1STDOUT\s0 will typically be line buffered if
output is to the terminal and block buffered otherwise.  Setting this
variable is useful primarily when you are outputting to a pipe or
socket, such as when you are running a Perl program under \fBrsh\fR and
want to see the output as it's happening.  This has no effect on input
buffering.  See \*(L"getc\*(R" in perlfunc for that.  See \*(L"select\*(R" in perlfunc on
how to select the output channel.  See also IO::Handle.
.Sp
Mnemonic: when you want your pipes to be piping hot.
.IP "${^LAST_FH}" 8
.IX Xref "${^LAST_FH}"
.IX Item "${^LAST_FH}"
This read-only variable contains a reference to the last-read filehandle.
This is set by \f(CW\*(C`<HANDLE>\*(C'\fR, \f(CW\*(C`readline\*(C'\fR, \f(CW\*(C`tell\*(C'\fR, \f(CW\*(C`eof\*(C'\fR and \f(CW\*(C`seek\*(C'\fR.
This is the same handle that \f(CW$.\fR and \f(CW\*(C`tell\*(C'\fR and \f(CW\*(C`eof\*(C'\fR without arguments
use.  It is also the handle used when Perl appends \*(L", <\s-1STDIN\s0> line 1\*(R" to
an error or warning message.
.Sp
This variable was added in Perl v5.18.0.
.PP
\fIVariables related to formats\fR
.IX Subsection "Variables related to formats"
.PP
The special variables for formats are a subset of those for
filehandles.  See perlform for more information about Perl's
formats.
.ie n .IP "$ACCUMULATOR" 8
.el .IP "\f(CW$ACCUMULATOR\fR" 8
.IX Item "$ACCUMULATOR"
.PD 0
.IP "$^A" 8
.IX Xref "$^A $ACCUMULATOR"
.IX Item "$^A"
.PD
The current value of the \f(CW\*(C`write()\*(C'\fR accumulator for \f(CW\*(C`format()\*(C'\fR lines.
A format contains \f(CW\*(C`formline()\*(C'\fR calls that put their result into
\&\f(CW$^A\fR.  After calling its format, \f(CW\*(C`write()\*(C'\fR prints out the contents
of \f(CW$^A\fR and empties.  So you never really see the contents of \f(CW$^A\fR
unless you call \f(CW\*(C`formline()\*(C'\fR yourself and then look at it.  See
perlform and \*(L"formline \s-1PICTURE,LIST\*(R"\s0 in perlfunc.
.IP "IO::Handle\->format_formfeed(\s-1EXPR\s0)" 8
.IX Item "IO::Handle->format_formfeed(EXPR)"
.PD 0
.ie n .IP "$FORMAT_FORMFEED" 8
.el .IP "\f(CW$FORMAT_FORMFEED\fR" 8
.IX Item "$FORMAT_FORMFEED"
.IP "$^L" 8
.IX Xref "$^L $FORMAT_FORMFEED"
.IX Item "$^L"
.PD
What formats output as a form feed.  The default is \f(CW\*(C`\ef\*(C'\fR.
.Sp
You cannot call \f(CW\*(C`format_formfeed()\*(C'\fR on a handle, only as a static
method.  See IO::Handle.
.IP "\s-1HANDLE\-\s0>format_page_number(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_page_number(EXPR)"
.PD 0
.ie n .IP "$FORMAT_PAGE_NUMBER" 8
.el .IP "\f(CW$FORMAT_PAGE_NUMBER\fR" 8
.IX Item "$FORMAT_PAGE_NUMBER"
.IP "$%" 8
.IX Xref "$% $FORMAT_PAGE_NUMBER"
.PD
The current page number of the currently selected output channel.
.Sp
Mnemonic: \f(CW\*(C`%\*(C'\fR is page number in \fBnroff\fR.
.IP "\s-1HANDLE\-\s0>format_lines_left(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_lines_left(EXPR)"
.PD 0
.ie n .IP "$FORMAT_LINES_LEFT" 8
.el .IP "\f(CW$FORMAT_LINES_LEFT\fR" 8
.IX Item "$FORMAT_LINES_LEFT"
.IP "$\-" 8
.IX Xref "$- $FORMAT_LINES_LEFT"
.PD
The number of lines left on the page of the currently selected output
channel.
.Sp
Mnemonic: lines_on_page \- lines_printed.
.IP "IO::Handle\->format_line_break_characters \s-1EXPR\s0" 8
.IX Item "IO::Handle->format_line_break_characters EXPR"
.PD 0
.ie n .IP "$FORMAT_LINE_BREAK_CHARACTERS" 8
.el .IP "\f(CW$FORMAT_LINE_BREAK_CHARACTERS\fR" 8
.IX Item "$FORMAT_LINE_BREAK_CHARACTERS"
.ie n .IP "$:" 8
.el .IP "\f(CW$:\fR" 8
.IX Xref "$: FORMAT_LINE_BREAK_CHARACTERS"
.IX Item "$:"
.PD
The current set of characters after which a string may be broken to
fill continuation fields (starting with \f(CW\*(C`^\*(C'\fR) in a format.  The default is
\&\*(L"\ \en\-\*(R", to break on a space, newline, or a hyphen.
.Sp
You cannot call \f(CW\*(C`format_line_break_characters()\*(C'\fR on a handle, only as
a static method.  See IO::Handle.
.Sp
Mnemonic: a \*(L"colon\*(R" in poetry is a part of a line.
.IP "\s-1HANDLE\-\s0>format_lines_per_page(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_lines_per_page(EXPR)"
.PD 0
.ie n .IP "$FORMAT_LINES_PER_PAGE" 8
.el .IP "\f(CW$FORMAT_LINES_PER_PAGE\fR" 8
.IX Item "$FORMAT_LINES_PER_PAGE"
.IP "$=" 8
.IX Xref "$= $FORMAT_LINES_PER_PAGE"
.PD
The current page length (printable lines) of the currently selected
output channel.  The default is 60.
.Sp
Mnemonic: = has horizontal lines.
.IP "\s-1HANDLE\-\s0>format_top_name(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_top_name(EXPR)"
.PD 0
.ie n .IP "$FORMAT_TOP_NAME" 8
.el .IP "\f(CW$FORMAT_TOP_NAME\fR" 8
.IX Item "$FORMAT_TOP_NAME"
.IP "$^" 8
.IX Xref "$^ $FORMAT_TOP_NAME"
.PD
The name of the current top-of-page format for the currently selected
output channel.  The default is the name of the filehandle with \f(CW\*(C`_TOP\*(C'\fR
appended.  For example, the default format top name for the \f(CW\*(C`STDOUT\*(C'\fR
filehandle is \f(CW\*(C`STDOUT_TOP\*(C'\fR.
.Sp
Mnemonic: points to top of page.
.IP "\s-1HANDLE\-\s0>format_name(\s-1EXPR\s0)" 8
.IX Item "HANDLE->format_name(EXPR)"
.PD 0
.ie n .IP "$FORMAT_NAME" 8
.el .IP "\f(CW$FORMAT_NAME\fR" 8
.IX Item "$FORMAT_NAME"
.IP "$~" 8
.IX Xref "$~ $FORMAT_NAME"
.PD
The name of the current report format for the currently selected
output channel.  The default format name is the same as the filehandle
name.  For example, the default format name for the \f(CW\*(C`STDOUT\*(C'\fR
filehandle is just \f(CW\*(C`STDOUT\*(C'\fR.
.Sp
Mnemonic: brother to \f(CW$^\fR.
.SS "Error Variables"
.IX Xref "error exception"
.IX Subsection "Error Variables"
The variables \f(CW$@\fR, \f(CW$!\fR, \f(CW$^E\fR, and \f(CW$?\fR contain information
about different types of error conditions that may appear during
execution of a Perl program.  The variables are shown ordered by
the \*(L"distance\*(R" between the subsystem which reported the error and
the Perl process.  They correspond to errors detected by the Perl
interpreter, C library, operating system, or an external program,
respectively.
.PP
To illustrate the differences between these variables, consider the
following Perl expression, which uses a single-quoted string.  After
execution of this statement, perl may have set all four special error
variables:
.PP
.Vb 5
\&    eval q{
\&        open my $pipe, "/cdrom/install |" or die $!;
\&        my @res = <$pipe>;
\&        close $pipe or die "bad pipe: $?, $!";
\&    };
.Ve
.PP
When perl executes the \f(CW\*(C`eval()\*(C'\fR expression, it translates the
\&\f(CW\*(C`open()\*(C'\fR, \f(CW\*(C`<PIPE>\*(C'\fR, and \f(CW\*(C`close\*(C'\fR calls in the C run-time library
and thence to the operating system kernel.  perl sets \f(CW$!\fR to
the C library's \f(CW\*(C`errno\*(C'\fR if one of these calls fails.
.PP
\&\f(CW$@\fR is set if the string to be \f(CW\*(C`eval\*(C'\fR\-ed did not compile (this may
happen if \f(CW\*(C`open\*(C'\fR or \f(CW\*(C`close\*(C'\fR were imported with bad prototypes), or
if Perl code executed during evaluation \f(CW\*(C`die()\*(C'\fRd.  In these cases the
value of \f(CW$@\fR is the compile error, or the argument to \f(CW\*(C`die\*(C'\fR (which
will interpolate \f(CW$!\fR and \f(CW$?\fR).  (See also Fatal, though.)
.PP
Under a few operating systems, \f(CW$^E\fR may contain a more verbose error
indicator, such as in this case, \*(L"\s-1CDROM\s0 tray not closed.\*(R"  Systems that
do not support extended error messages leave \f(CW$^E\fR the same as \f(CW$!\fR.
.PP
Finally, \f(CW$?\fR may be set to non\-0 value if the external program
\&\fI/cdrom/install\fR fails.  The upper eight bits reflect specific error
conditions encountered by the program (the program's \f(CW\*(C`exit()\*(C'\fR value).
The lower eight bits reflect mode of failure, like signal death and
core dump information.  See \fIwait\fR\|(2) for details.  In contrast to
\&\f(CW$!\fR and \f(CW$^E\fR, which are set only if error condition is detected,
the variable \f(CW$?\fR is set on each \f(CW\*(C`wait\*(C'\fR or pipe \f(CW\*(C`close\*(C'\fR,
overwriting the old value.  This is more like \f(CW$@\fR, which on every
\&\f(CW\*(C`eval()\*(C'\fR is always set on failure and cleared on success.
.PP
For more details, see the individual descriptions at \f(CW$@\fR, \f(CW$!\fR,
\&\f(CW$^E\fR, and \f(CW$?\fR.
.IP "${^CHILD_ERROR_NATIVE}" 8
.IX Xref "$^CHILD_ERROR_NATIVE"
.IX Item "${^CHILD_ERROR_NATIVE}"
The native status returned by the last pipe close, backtick (\f(CW\*(C`\`\`\*(C'\fR)
command, successful call to \f(CW\*(C`wait()\*(C'\fR or \f(CW\*(C`waitpid()\*(C'\fR, or from the
\&\f(CW\*(C`system()\*(C'\fR operator.  On POSIX-like systems this value can be decoded
with the \s-1WIFEXITED, WEXITSTATUS, WIFSIGNALED, WTERMSIG, WIFSTOPPED,
WSTOPSIG\s0 and \s-1WIFCONTINUED\s0 functions provided by the \s-1POSIX\s0 module.
.Sp
Under \s-1VMS\s0 this reflects the actual \s-1VMS\s0 exit status; i.e. it is the
same as \f(CW$?\fR when the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR is in effect.
.Sp
This variable was added in Perl v5.10.0.
.ie n .IP "$EXTENDED_OS_ERROR" 8
.el .IP "\f(CW$EXTENDED_OS_ERROR\fR" 8
.IX Item "$EXTENDED_OS_ERROR"
.PD 0
.IP "$^E" 8
.IX Xref "$^E $EXTENDED_OS_ERROR"
.IX Item "$^E"
.PD
Error information specific to the current operating system.  At the
moment, this differs from \f(CW$!\fR under only \s-1VMS, OS/2,\s0 and Win32 (and
for MacPerl).  On all other platforms, \f(CW$^E\fR is always just the same
as \f(CW$!\fR.
.Sp
Under \s-1VMS, \s0\f(CW$^E\fR provides the \s-1VMS\s0 status value from the last system
error.  This is more specific information about the last system error
than that provided by \f(CW$!\fR.  This is particularly important when \f(CW$!\fR
is set to \fB\s-1EVMSERR\s0\fR.
.Sp
Under \s-1OS/2, \s0\f(CW$^E\fR is set to the error code of the last call to \s-1OS/2
API\s0 either via \s-1CRT,\s0 or directly from perl.
.Sp
Under Win32, \f(CW$^E\fR always returns the last error information reported
by the Win32 call \f(CW\*(C`GetLastError()\*(C'\fR which describes the last error
from within the Win32 \s-1API. \s0 Most Win32\-specific code will report errors
via \f(CW$^E\fR.  \s-1ANSI C\s0 and Unix-like calls set \f(CW\*(C`errno\*(C'\fR and so most
portable Perl code will report errors via \f(CW$!\fR.
.Sp
Caveats mentioned in the description of \f(CW$!\fR generally apply to
\&\f(CW$^E\fR, also.
.Sp
This variable was added in Perl 5.003.
.Sp
Mnemonic: Extra error explanation.
.ie n .IP "$EXCEPTIONS_BEING_CAUGHT" 8
.el .IP "\f(CW$EXCEPTIONS_BEING_CAUGHT\fR" 8
.IX Item "$EXCEPTIONS_BEING_CAUGHT"
.PD 0
.IP "$^S" 8
.IX Xref "$^S $EXCEPTIONS_BEING_CAUGHT"
.IX Item "$^S"
.PD
Current state of the interpreter.
.Sp
.Vb 5
\&        $^S         State
\&        \-\-\-\-\-\-\-\-\-   \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&        undef       Parsing module, eval, or main program
\&        true (1)    Executing an eval
\&        false (0)   Otherwise
.Ve
.Sp
The first state may happen in \f(CW$SIG{_\|_DIE_\|_}\fR and \f(CW$SIG{_\|_WARN_\|_}\fR
handlers.
.Sp
The English name \f(CW$EXCEPTIONS_BEING_CAUGHT\fR is slightly misleading, because
the \f(CW\*(C`undef\*(C'\fR value does not indicate whether exceptions are being caught,
since compilation of the main program does not catch exceptions.
.Sp
This variable was added in Perl 5.004.
.ie n .IP "$WARNING" 8
.el .IP "\f(CW$WARNING\fR" 8
.IX Item "$WARNING"
.PD 0
.IP "$^W" 8
.IX Xref "$^W $WARNING"
.IX Item "$^W"
.PD
The current value of the warning switch, initially true if \fB\-w\fR was
used, false otherwise, but directly modifiable.
.Sp
See also warnings.
.Sp
Mnemonic: related to the \fB\-w\fR switch.
.IP "${^WARNING_BITS}" 8
.IX Xref "${^WARNING_BITS}"
.IX Item "${^WARNING_BITS}"
The current set of warning checks enabled by the \f(CW\*(C`use warnings\*(C'\fR pragma.
It has the same scoping as the \f(CW$^H\fR and \f(CW\*(C`%^H\*(C'\fR variables.  The exact
values are considered internal to the warnings pragma and may change
between versions of Perl.
.Sp
This variable was added in Perl v5.6.0.
.ie n .IP "$OS_ERROR" 8
.el .IP "\f(CW$OS_ERROR\fR" 8
.IX Item "$OS_ERROR"
.PD 0
.ie n .IP "$ERRNO" 8
.el .IP "\f(CW$ERRNO\fR" 8
.IX Item "$ERRNO"
.IP "$!" 8
.IX Xref "$! $ERRNO $OS_ERROR"
.PD
When referenced, \f(CW$!\fR retrieves the current value
of the C \f(CW\*(C`errno\*(C'\fR integer variable.
If \f(CW$!\fR is assigned a numerical value, that value is stored in \f(CW\*(C`errno\*(C'\fR.
When referenced as a string, \f(CW$!\fR yields the system error string
corresponding to \f(CW\*(C`errno\*(C'\fR.
.Sp
Many system or library calls set \f(CW\*(C`errno\*(C'\fR if they fail,
to indicate the cause of failure.  They usually do \fBnot\fR
set \f(CW\*(C`errno\*(C'\fR to zero if they succeed.  This means \f(CW\*(C`errno\*(C'\fR,
hence \f(CW$!\fR, is meaningful only \fIimmediately\fR after a \fBfailure\fR:
.Sp
.Vb 11
\&    if (open my $fh, "<", $filename) {
\&                # Here $! is meaningless.
\&                ...
\&    }
\&    else {
\&                # ONLY here is $! meaningful.
\&                ...
\&                # Already here $! might be meaningless.
\&    }
\&    # Since here we might have either success or failure,
\&    # $! is meaningless.
.Ve
.Sp
Here, \fImeaningless\fR means that \f(CW$!\fR may be unrelated to the outcome
of the \f(CW\*(C`open()\*(C'\fR operator.  Assignment to \f(CW$!\fR is similarly ephemeral.
It can be used immediately before invoking the \f(CW\*(C`die()\*(C'\fR operator,
to set the exit value, or to inspect the system error string
corresponding to error \fIn\fR, or to restore \f(CW$!\fR to a meaningful state.
.Sp
Mnemonic: What just went bang?
.ie n .IP "%OS_ERROR" 8
.el .IP "\f(CW%OS_ERROR\fR" 8
.IX Item "%OS_ERROR"
.PD 0
.ie n .IP "%ERRNO" 8
.el .IP "\f(CW%ERRNO\fR" 8
.IX Item "%ERRNO"
.IP "%!" 8
.IX Xref "%! %OS_ERROR %ERRNO"
.PD
Each element of \f(CW\*(C`%!\*(C'\fR has a true value only if \f(CW$!\fR is set to that
value.  For example, \f(CW$!{ENOENT}\fR is true if and only if the current
value of \f(CW$!\fR is \f(CW\*(C`ENOENT\*(C'\fR; that is, if the most recent error was \*(L"No
such file or directory\*(R" (or its moral equivalent: not all operating
systems give that exact error, and certainly not all languages).  To
check if a particular key is meaningful on your system, use \f(CW\*(C`exists
$!{the_key}\*(C'\fR; for a list of legal keys, use \f(CW\*(C`keys %!\*(C'\fR.  See Errno
for more information, and also see \*(L"$!\*(R".
.Sp
This variable was added in Perl 5.005.
.ie n .IP "$CHILD_ERROR" 8
.el .IP "\f(CW$CHILD_ERROR\fR" 8
.IX Item "$CHILD_ERROR"
.PD 0
.IP "$?" 8
.IX Xref "$? $CHILD_ERROR"
.PD
The status returned by the last pipe close, backtick (\f(CW\*(C`\`\`\*(C'\fR) command,
successful call to \f(CW\*(C`wait()\*(C'\fR or \f(CW\*(C`waitpid()\*(C'\fR, or from the \f(CW\*(C`system()\*(C'\fR
operator.  This is just the 16\-bit status word returned by the
traditional Unix \f(CW\*(C`wait()\*(C'\fR system call (or else is made up to look
like it).  Thus, the exit value of the subprocess is really (\f(CW\*(C`$? >>
8\*(C'\fR), and \f(CW\*(C`$? & 127\*(C'\fR gives which signal, if any, the process died
from, and \f(CW\*(C`$? & 128\*(C'\fR reports whether there was a core dump.
.Sp
Additionally, if the \f(CW\*(C`h_errno\*(C'\fR variable is supported in C, its value
is returned via \f(CW$?\fR if any \f(CW\*(C`gethost*()\*(C'\fR function fails.
.Sp
If you have installed a signal handler for \f(CW\*(C`SIGCHLD\*(C'\fR, the
value of \f(CW$?\fR will usually be wrong outside that handler.
.Sp
Inside an \f(CW\*(C`END\*(C'\fR subroutine \f(CW$?\fR contains the value that is going to be
given to \f(CW\*(C`exit()\*(C'\fR.  You can modify \f(CW$?\fR in an \f(CW\*(C`END\*(C'\fR subroutine to
change the exit status of your program.  For example:
.Sp
.Vb 3
\&    END {
\&        $? = 1 if $? == 255;  # die would make it 255
\&    }
.Ve
.Sp
Under \s-1VMS,\s0 the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR makes \f(CW$?\fR reflect the
actual \s-1VMS\s0 exit status, instead of the default emulation of \s-1POSIX\s0
status; see \*(L"$?\*(R" in perlvms for details.
.Sp
Mnemonic: similar to \fBsh\fR and \fBksh\fR.
.ie n .IP "$EVAL_ERROR" 8
.el .IP "\f(CW$EVAL_ERROR\fR" 8
.IX Item "$EVAL_ERROR"
.PD 0
.IP "$@" 8
.IX Xref "$@ $EVAL_ERROR"
.PD
The Perl syntax error message from the
last \f(CW\*(C`eval()\*(C'\fR operator.  If \f(CW$@\fR is
the null string, the last \f(CW\*(C`eval()\*(C'\fR parsed and executed correctly
(although the operations you invoked may have failed in the normal
fashion).
.Sp
Warning messages are not collected in this variable.  You can, however,
set up a routine to process warnings by setting \f(CW$SIG{_\|_WARN_\|_}\fR as
described in \*(L"%SIG\*(R".
.Sp
Mnemonic: Where was the syntax error \*(L"at\*(R"?
.SS "Variables related to the interpreter state"
.IX Subsection "Variables related to the interpreter state"
These variables provide information about the current interpreter state.
.ie n .IP "$COMPILING" 8
.el .IP "\f(CW$COMPILING\fR" 8
.IX Item "$COMPILING"
.PD 0
.IP "$^C" 8
.IX Xref "$^C $COMPILING"
.IX Item "$^C"
.PD
The current value of the flag associated with the \fB\-c\fR switch.
Mainly of use with \fB\-MO=...\fR to allow code to alter its behavior
when being compiled, such as for example to \f(CW\*(C`AUTOLOAD\*(C'\fR at compile
time rather than normal, deferred loading.  Setting
\&\f(CW\*(C`$^C = 1\*(C'\fR is similar to calling \f(CW\*(C`B::minus_c\*(C'\fR.
.Sp
This variable was added in Perl v5.6.0.
.ie n .IP "$DEBUGGING" 8
.el .IP "\f(CW$DEBUGGING\fR" 8
.IX Item "$DEBUGGING"
.PD 0
.IP "$^D" 8
.IX Xref "$^D $DEBUGGING"
.IX Item "$^D"
.PD
The current value of the debugging flags.  May be read or set.  Like its
command-line equivalent, you can use numeric or symbolic values, eg
\&\f(CW\*(C`$^D = 10\*(C'\fR or \f(CW\*(C`$^D = "st"\*(C'\fR.
.Sp
Mnemonic: value of \fB\-D\fR switch.
.IP "${^ENCODING}" 8
.IX Xref "${^ENCODING}"
.IX Item "${^ENCODING}"
The \fIobject reference\fR to the \f(CW\*(C`Encode\*(C'\fR object that is used to convert
the source code to Unicode.  Thanks to this variable your Perl script
does not have to be written in \s-1UTF\-8. \s0 Default is \fIundef\fR.  The direct
manipulation of this variable is highly discouraged.
.Sp
This variable was added in Perl 5.8.2.
.IP "${^GLOBAL_PHASE}" 8
.IX Xref "${^GLOBAL_PHASE}"
.IX Item "${^GLOBAL_PHASE}"
The current phase of the perl interpreter.
.Sp
Possible values are:
.RS 8
.IP "\s-1CONSTRUCT\s0" 8
.IX Item "CONSTRUCT"
The \f(CW\*(C`PerlInterpreter*\*(C'\fR is being constructed via \f(CW\*(C`perl_construct\*(C'\fR.  This
value is mostly there for completeness and for use via the
underlying C variable \f(CW\*(C`PL_phase\*(C'\fR.  It's not really possible for Perl
code to be executed unless construction of the interpreter is
finished.
.IP "\s-1START\s0" 8
.IX Item "START"
This is the global compile-time.  That includes, basically, every
\&\f(CW\*(C`BEGIN\*(C'\fR block executed directly or indirectly from during the
compile-time of the top-level program.
.Sp
This phase is not called \*(L"\s-1BEGIN\*(R"\s0 to avoid confusion with
\&\f(CW\*(C`BEGIN\*(C'\fR\-blocks, as those are executed during compile-time of any
compilation unit, not just the top-level program.  A new, localised
compile-time entered at run-time, for example by constructs as
\&\f(CW\*(C`eval "use SomeModule"\*(C'\fR are not global interpreter phases, and
therefore aren't reflected by \f(CW\*(C`${^GLOBAL_PHASE}\*(C'\fR.
.IP "\s-1CHECK\s0" 8
.IX Item "CHECK"
Execution of any \f(CW\*(C`CHECK\*(C'\fR blocks.
.IP "\s-1INIT\s0" 8
.IX Item "INIT"
Similar to \*(L"\s-1CHECK\*(R",\s0 but for \f(CW\*(C`INIT\*(C'\fR\-blocks, not \f(CW\*(C`CHECK\*(C'\fR blocks.
.IP "\s-1RUN\s0" 8
.IX Item "RUN"
The main run-time, i.e. the execution of \f(CW\*(C`PL_main_root\*(C'\fR.
.IP "\s-1END\s0" 8
.IX Item "END"
Execution of any \f(CW\*(C`END\*(C'\fR blocks.
.IP "\s-1DESTRUCT\s0" 8
.IX Item "DESTRUCT"
Global destruction.
.RE
.RS 8
.Sp
Also note that there's no value for UNITCHECK-blocks.  That's because
those are run for each compilation unit individually, and therefore is
not a global interpreter phase.
.Sp
Not every program has to go through each of the possible phases, but
transition from one phase to another can only happen in the order
described in the above list.
.Sp
An example of all of the phases Perl code can see:
.Sp
.Vb 1
\&    BEGIN { print "compile\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    INIT  { print "init\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    CHECK { print "check\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    {
\&        package Print::Phase;
\&
\&        sub new {
\&            my ($class, $time) = @_;
\&            return bless \e$time, $class;
\&        }
\&
\&        sub DESTROY {
\&            my $self = shift;
\&            print "$$self: ${^GLOBAL_PHASE}\en";
\&        }
\&    }
\&
\&    print "run\-time: ${^GLOBAL_PHASE}\en";
\&
\&    my $runtime = Print::Phase\->new(
\&        "lexical variables are garbage collected before END"
\&    );
\&
\&    END   { print "end\-time: ${^GLOBAL_PHASE}\en" }
\&
\&    our $destruct = Print::Phase\->new(
\&        "package variables are garbage collected after END"
\&    );
.Ve
.Sp
This will print out
.Sp
.Vb 7
\&    compile\-time: START
\&    check\-time: CHECK
\&    init\-time: INIT
\&    run\-time: RUN
\&    lexical variables are garbage collected before END: RUN
\&    end\-time: END
\&    package variables are garbage collected after END: DESTRUCT
.Ve
.Sp
This variable was added in Perl 5.14.0.
.RE
.IP "$^H" 8
.IX Xref "$^H"
.IX Item "$^H"
\&\s-1WARNING:\s0 This variable is strictly for
internal use only.  Its availability,
behavior, and contents are subject to change without notice.
.Sp
This variable contains compile-time hints for the Perl interpreter.  At the
end of compilation of a \s-1BLOCK\s0 the value of this variable is restored to the
value when the interpreter started to compile the \s-1BLOCK.\s0
.Sp
When perl begins to parse any block construct that provides a lexical scope
(e.g., eval body, required file, subroutine body, loop body, or conditional
block), the existing value of \f(CW$^H\fR is saved, but its value is left unchanged.
When the compilation of the block is completed, it regains the saved value.
Between the points where its value is saved and restored, code that
executes within \s-1BEGIN\s0 blocks is free to change the value of \f(CW$^H\fR.
.Sp
This behavior provides the semantic of lexical scoping, and is used in,
for instance, the \f(CW\*(C`use strict\*(C'\fR pragma.
.Sp
The contents should be an integer; different bits of it are used for
different pragmatic flags.  Here's an example:
.Sp
.Vb 1
\&    sub add_100 { $^H |= 0x100 }
\&
\&    sub foo {
\&        BEGIN { add_100() }
\&        bar\->baz($boon);
\&    }
.Ve
.Sp
Consider what happens during execution of the \s-1BEGIN\s0 block.  At this point
the \s-1BEGIN\s0 block has already been compiled, but the body of \f(CW\*(C`foo()\*(C'\fR is still
being compiled.  The new value of \f(CW$^H\fR
will therefore be visible only while
the body of \f(CW\*(C`foo()\*(C'\fR is being compiled.
.Sp
Substitution of \f(CW\*(C`BEGIN { add_100() }\*(C'\fR block with:
.Sp
.Vb 1
\&    BEGIN { require strict; strict\->import(\*(Aqvars\*(Aq) }
.Ve
.Sp
demonstrates how \f(CW\*(C`use strict \*(Aqvars\*(Aq\*(C'\fR is implemented.  Here's a conditional
version of the same lexical pragma:
.Sp
.Vb 3
\&    BEGIN {
\&        require strict; strict\->import(\*(Aqvars\*(Aq) if $condition
\&    }
.Ve
.Sp
This variable was added in Perl 5.003.
.IP "%^H" 8
.IX Xref "%^H"
.IX Item "%^H"
The \f(CW\*(C`%^H\*(C'\fR hash provides the same scoping semantic as \f(CW$^H\fR.  This makes
it useful for implementation of lexically scoped pragmas.  See
perlpragma.
.Sp
When putting items into \f(CW\*(C`%^H\*(C'\fR, in order to avoid conflicting with other
users of the hash there is a convention regarding which keys to use.
A module should use only keys that begin with the module's name (the
name of its main package) and a \*(L"/\*(R" character.  For example, a module
\&\f(CW\*(C`Foo::Bar\*(C'\fR should use keys such as \f(CW\*(C`Foo::Bar/baz\*(C'\fR.
.Sp
This variable was added in Perl v5.6.0.
.IP "${^OPEN}" 8
.IX Xref "${^OPEN}"
.IX Item "${^OPEN}"
An internal variable used by PerlIO.  A string in two parts, separated
by a \f(CW\*(C`\e0\*(C'\fR byte, the first part describes the input layers, the second
part describes the output layers.
.Sp
This variable was added in Perl v5.8.0.
.ie n .IP "$PERLDB" 8
.el .IP "\f(CW$PERLDB\fR" 8
.IX Item "$PERLDB"
.PD 0
.IP "$^P" 8
.IX Xref "$^P $PERLDB"
.IX Item "$^P"
.PD
The internal variable for debugging support.  The meanings of the
various bits are subject to change, but currently indicate:
.RS 8
.IP "0x01" 6
.IX Item "0x01"
Debug subroutine enter/exit.
.IP "0x02" 6
.IX Item "0x02"
Line-by-line debugging.  Causes \f(CW\*(C`DB::DB()\*(C'\fR subroutine to be called for
each statement executed.  Also causes saving source code lines (like
0x400).
.IP "0x04" 6
.IX Item "0x04"
Switch off optimizations.
.IP "0x08" 6
.IX Item "0x08"
Preserve more data for future interactive inspections.
.IP "0x10" 6
.IX Item "0x10"
Keep info about source lines on which a subroutine is defined.
.IP "0x20" 6
.IX Item "0x20"
Start with single-step on.
.IP "0x40" 6
.IX Item "0x40"
Use subroutine address instead of name when reporting.
.IP "0x80" 6
.IX Item "0x80"
Report \f(CW\*(C`goto &subroutine\*(C'\fR as well.
.IP "0x100" 6
.IX Item "0x100"
Provide informative \*(L"file\*(R" names for evals based on the place they were compiled.
.IP "0x200" 6
.IX Item "0x200"
Provide informative names to anonymous subroutines based on the place they
were compiled.
.IP "0x400" 6
.IX Item "0x400"
Save source code lines into \f(CW\*(C`@{"_<$filename"}\*(C'\fR.
.RE
.RS 8
.Sp
Some bits may be relevant at compile-time only, some at
run-time only.  This is a new mechanism and the details may change.
See also perldebguts.
.RE
.IP "${^TAINT}" 8
.IX Xref "${^TAINT}"
.IX Item "${^TAINT}"
Reflects if taint mode is on or off.  1 for on (the program was run with
\&\fB\-T\fR), 0 for off, \-1 when only taint warnings are enabled (i.e. with
\&\fB\-t\fR or \fB\-TU\fR).
.Sp
This variable is read-only.
.Sp
This variable was added in Perl v5.8.0.
.IP "${^UNICODE}" 8
.IX Xref "${^UNICODE}"
.IX Item "${^UNICODE}"
Reflects certain Unicode settings of Perl.  See perlrun
documentation for the \f(CW\*(C`\-C\*(C'\fR switch for more information about
the possible values.
.Sp
This variable is set during Perl startup and is thereafter read-only.
.Sp
This variable was added in Perl v5.8.2.
.IP "${^UTF8CACHE}" 8
.IX Xref "${^UTF8CACHE}"
.IX Item "${^UTF8CACHE}"
This variable controls the state of the internal \s-1UTF\-8\s0 offset caching code.
1 for on (the default), 0 for off, \-1 to debug the caching code by checking
all its results against linear scans, and panicking on any discrepancy.
.Sp
This variable was added in Perl v5.8.9.  It is subject to change or
removal without notice, but is currently used to avoid recalculating the
boundaries of multi-byte UTF\-8\-encoded characters.
.IP "${^UTF8LOCALE}" 8
.IX Xref "${^UTF8LOCALE}"
.IX Item "${^UTF8LOCALE}"
This variable indicates whether a \s-1UTF\-8\s0 locale was detected by perl at
startup.  This information is used by perl when it's in
adjust\-utf8ness\-to\-locale mode (as when run with the \f(CW\*(C`\-CL\*(C'\fR command-line
switch); see perlrun for more info on this.
.Sp
This variable was added in Perl v5.8.8.
.SS "Deprecated and removed variables"
.IX Subsection "Deprecated and removed variables"
Deprecating a variable announces the intent of the perl maintainers to
eventually remove the variable from the language.  It may still be
available despite its status.  Using a deprecated variable triggers
a warning.
.PP
Once a variable is removed, its use triggers an error telling you
the variable is unsupported.
.PP
See perldiag for details about error messages.
.ie n .IP "$OFMT" 8
.el .IP "\f(CW$OFMT\fR" 8
.IX Item "$OFMT"
.PD 0
.IP "$#" 8
.IX Xref "$# $OFMT"
.PD
\&\f(CW$#\fR was a variable that could be used to format printed numbers.
After a deprecation cycle, its magic was removed in Perl v5.10.0 and
using it now triggers a warning: \f(CW\*(C`$# is no longer supported\*(C'\fR.
.Sp
This is not the sigil you use in front of an array name to get the
last index, like \f(CW$#array\fR.  That's still how you get the last index
of an array in Perl.  The two have nothing to do with each other.
.Sp
Deprecated in Perl 5.
.Sp
Removed in Perl v5.10.0.
.IP "$*" 8
.IX Xref "$*"
\&\f(CW$*\fR was a variable that you could use to enable multiline matching.
After a deprecation cycle, its magic was removed in Perl v5.10.0.
Using it now triggers a warning: \f(CW\*(C`$* is no longer supported\*(C'\fR.
You should use the \f(CW\*(C`/s\*(C'\fR and \f(CW\*(C`/m\*(C'\fR regexp modifiers instead.
.Sp
Deprecated in Perl 5.
.Sp
Removed in Perl v5.10.0.
.ie n .IP "$ARRAY_BASE" 8
.el .IP "\f(CW$ARRAY_BASE\fR" 8
.IX Item "$ARRAY_BASE"
.PD 0
.IP "$[" 8
.IX Xref "$[ $ARRAY_BASE"
.PD
This variable stores the index of the first element in an array, and
of the first character in a substring.  The default is 0, but you could
theoretically set it to 1 to make Perl behave more like \fBawk\fR (or Fortran)
when subscripting and when evaluating the \fIindex()\fR and \fIsubstr()\fR functions.
.Sp
As of release 5 of Perl, assignment to \f(CW$[\fR is treated as a compiler
directive, and cannot influence the behavior of any other file.
(That's why you can only assign compile-time constants to it.)
Its use is highly discouraged.
.Sp
Prior to Perl v5.10.0, assignment to \f(CW$[\fR could be seen from outer lexical
scopes in the same file, unlike other compile-time directives (such as
strict).  Using \fIlocal()\fR on it would bind its value strictly to a lexical
block.  Now it is always lexically scoped.
.Sp
As of Perl v5.16.0, it is implemented by the arybase module.  See
arybase for more details on its behaviour.
.Sp
Under \f(CW\*(C`use v5.16\*(C'\fR, or \f(CW\*(C`no feature "array_base"\*(C'\fR, \f(CW$[\fR no longer has any
effect, and always contains 0.  Assigning 0 to it is permitted, but any
other value will produce an error.
.Sp
Mnemonic: [ begins subscripts.
.Sp
Deprecated in Perl v5.12.0.
.ie n .IP "$OLD_PERL_VERSION" 8
.el .IP "\f(CW$OLD_PERL_VERSION\fR" 8
.IX Item "$OLD_PERL_VERSION"
.PD 0
.IP "$]" 8
.IX Xref "$] $OLD_PERL_VERSION"
.PD
See \*(L"$^V\*(R" for a more modern representation of the Perl version that allows
accurate string comparisons.
.Sp
The version + patchlevel / 1000 of the Perl interpreter.  This variable
can be used to determine whether the Perl interpreter executing a
script is in the right range of versions:
.Sp
.Vb 1
\&    warn "No checksumming!\en" if $] < 3.019;
.Ve
.Sp
The floating point representation can sometimes lead to inaccurate
numeric comparisons.
.Sp
See also the documentation of \f(CW\*(C`use VERSION\*(C'\fR and \f(CW\*(C`require VERSION\*(C'\fR
for a convenient way to fail if the running Perl interpreter is too old.
.Sp
Mnemonic: Is this version of perl in the right bracket?
                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvmesa.1                                  0100644 0001750 0001750 00000020231 12566207427 022737  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVMESA 1"
.TH PERLVMESA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvmesa \- building and installing Perl for VM/ESA.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document will help you Configure, build, test and install Perl
on \s-1VM/ESA\s0.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a fully ported perl for \s-1VM/ESA\s0 2.3.0.  It may work on
other versions, but that's the one we've tested it on.
.PP
If you've downloaded the binary distribution, it needs to be
installed below /usr/local.  Source code distributions have an
automated \*(L"make install\*(R" step that means you do not need to extract
the source code below /usr/local (though that is where it will be
installed by default).  You may need to worry about the networking
configuration files discussed in the last bullet below.
.SS "Unpacking Perl Distribution on \s-1VM/ESA\s0"
.IX Subsection "Unpacking Perl Distribution on VM/ESA"
To extract an \s-1ASCII\s0 tar archive on \s-1VM/ESA\s0, try this:
.PP
.Vb 1
\&   pax \-o to=IBM\-1047,from=ISO8859\-1 \-r < latest.tar
.Ve
.SS "Setup Perl and utilities on \s-1VM/ESA\s0"
.IX Subsection "Setup Perl and utilities on VM/ESA"
\&\s-1GNU\s0 make for \s-1VM/ESA\s0, which may be required for the build of perl,
is available from:
.PP
<http://vm.marist.edu/~neale/vmoe.html>
.SS "Configure Perl on \s-1VM/ESA\s0"
.IX Subsection "Configure Perl on VM/ESA"
Once you've unpacked the distribution, run Configure (see \s-1INSTALL\s0 for
full discussion of the Configure options), and then run make, then
\&\*(L"make test\*(R" then \*(L"make install\*(R" (this last step may require UID=0
privileges).
.PP
There is a \*(L"hints\*(R" file for vmesa that specifies the correct values
for most things.  Some things to watch out for are:
.IP "\(bu" 4
this port does support dynamic loading but it's not had much testing
.IP "\(bu" 4
Don't turn on the compiler optimization flag \*(L"\-O\*(R".  There's
a bug in the compiler (\s-1APAR\s0 \s-1PQ18812\s0) that generates some bad code
the optimizer is on.
.IP "\(bu" 4
As \s-1VM/ESA\s0 doesn't fully support the \fIfork()\fR \s-1API\s0 programs relying on
this call will not work. I've replaced \fIfork()\fR/\fIexec()\fR with \fIspawn()\fR
and the standalone \fIexec()\fR with \fIspawn()\fR. This has a side effect when
opening unnamed pipes in a shell script: there is no child process
generated under.
.IP "\(bu" 4
At the moment the hints file for \s-1VM/ESA\s0 basically bypasses all of the
automatic configuration process.  This is because Configure relies on:
1. The header files living in the Byte File System (you could put the
there if you want); 2. The C preprocessor including the #include 
statements in the preprocessor output (.i) file.
.SS "Testing Anomalies of Perl on \s-1VM/ESA\s0"
.IX Subsection "Testing Anomalies of Perl on VM/ESA"
The \*(L"make test\*(R" step runs a Perl Verification Procedure, usually before
installation.  As the 5.6.1 kit was being assembled
the following \*(L"failures\*(R" were known to appear on some machines
during \*(L"make test\*(R" (mostly due to \s-1ASCII\s0 vs. \s-1EBCDIC\s0 conflicts),
your results may differ:
.PP
[the list of failures being compiled]
.SS "Usage Hints for Perl on \s-1VM/ESA\s0"
.IX Subsection "Usage Hints for Perl on VM/ESA"
When using perl on \s-1VM/ESA\s0 please keep in mind that the \s-1EBCDIC\s0 and \s-1ASCII\s0
character sets are different.  Perl builtin functions that may behave
differently under \s-1EBCDIC\s0 are mentioned in the perlport.pod document.
.PP
OpenEdition (\s-1UNIX\s0 System Services) does not (yet) support the #! means
of script invocation.
See:
.PP
.Vb 1
\&    head \`whence perldoc\`
.Ve
.PP
for an example of how to use the \*(L"eval exec\*(R" trick to ask the shell to
have perl run your scripts for you.
.SH "AUTHORS"
.IX Header "AUTHORS"
Neale Ferguson.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1INSTALL\s0, perlport, perlebcdic.
.SS "Mailing list for Perl on \s-1VM/ESA\s0"
.IX Subsection "Mailing list for Perl on VM/ESA"
If you are interested in the \s-1VM/ESA\s0, z/OS (formerly known as \s-1OS/390\s0)
and POSIX-BC (\s-1BS2000\s0) ports of Perl then see the perl-mvs mailing list.
To subscribe, send an empty message to perl\-mvs\-subscribe@perl.org.
.PP
See also:
.PP
http://lists.perl.org/list/perl\-mvs.html <http://lists.perl.org/list/perl-mvs.html>
.PP
There are web archives of the mailing list at:
.IP "\(bu" 4
http://www.xray.mpe.mpg.de/mailing\-lists/perl\-mvs/ <http://www.xray.mpe.mpg.de/mailing-lists/perl-mvs/>
.IP "\(bu" 4
http://archive.develooper.com/perl\-mvs@perl.org/ <http://archive.develooper.com/perl-mvs@perl.org/>
                                                                                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvmesa5.16.1                              0100644 0001750 0001750 00000020231 12566207427 023251  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVMESA 1"
.TH PERLVMESA 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvmesa \- building and installing Perl for VM/ESA.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document will help you Configure, build, test and install Perl
on \s-1VM/ESA\s0.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a fully ported perl for \s-1VM/ESA\s0 2.3.0.  It may work on
other versions, but that's the one we've tested it on.
.PP
If you've downloaded the binary distribution, it needs to be
installed below /usr/local.  Source code distributions have an
automated \*(L"make install\*(R" step that means you do not need to extract
the source code below /usr/local (though that is where it will be
installed by default).  You may need to worry about the networking
configuration files discussed in the last bullet below.
.SS "Unpacking Perl Distribution on \s-1VM/ESA\s0"
.IX Subsection "Unpacking Perl Distribution on VM/ESA"
To extract an \s-1ASCII\s0 tar archive on \s-1VM/ESA\s0, try this:
.PP
.Vb 1
\&   pax \-o to=IBM\-1047,from=ISO8859\-1 \-r < latest.tar
.Ve
.SS "Setup Perl and utilities on \s-1VM/ESA\s0"
.IX Subsection "Setup Perl and utilities on VM/ESA"
\&\s-1GNU\s0 make for \s-1VM/ESA\s0, which may be required for the build of perl,
is available from:
.PP
<http://vm.marist.edu/~neale/vmoe.html>
.SS "Configure Perl on \s-1VM/ESA\s0"
.IX Subsection "Configure Perl on VM/ESA"
Once you've unpacked the distribution, run Configure (see \s-1INSTALL\s0 for
full discussion of the Configure options), and then run make, then
\&\*(L"make test\*(R" then \*(L"make install\*(R" (this last step may require UID=0
privileges).
.PP
There is a \*(L"hints\*(R" file for vmesa that specifies the correct values
for most things.  Some things to watch out for are:
.IP "\(bu" 4
this port does support dynamic loading but it's not had much testing
.IP "\(bu" 4
Don't turn on the compiler optimization flag \*(L"\-O\*(R".  There's
a bug in the compiler (\s-1APAR\s0 \s-1PQ18812\s0) that generates some bad code
the optimizer is on.
.IP "\(bu" 4
As \s-1VM/ESA\s0 doesn't fully support the \fIfork()\fR \s-1API\s0 programs relying on
this call will not work. I've replaced \fIfork()\fR/\fIexec()\fR with \fIspawn()\fR
and the standalone \fIexec()\fR with \fIspawn()\fR. This has a side effect when
opening unnamed pipes in a shell script: there is no child process
generated under.
.IP "\(bu" 4
At the moment the hints file for \s-1VM/ESA\s0 basically bypasses all of the
automatic configuration process.  This is because Configure relies on:
1. The header files living in the Byte File System (you could put the
there if you want); 2. The C preprocessor including the #include 
statements in the preprocessor output (.i) file.
.SS "Testing Anomalies of Perl on \s-1VM/ESA\s0"
.IX Subsection "Testing Anomalies of Perl on VM/ESA"
The \*(L"make test\*(R" step runs a Perl Verification Procedure, usually before
installation.  As the 5.6.1 kit was being assembled
the following \*(L"failures\*(R" were known to appear on some machines
during \*(L"make test\*(R" (mostly due to \s-1ASCII\s0 vs. \s-1EBCDIC\s0 conflicts),
your results may differ:
.PP
[the list of failures being compiled]
.SS "Usage Hints for Perl on \s-1VM/ESA\s0"
.IX Subsection "Usage Hints for Perl on VM/ESA"
When using perl on \s-1VM/ESA\s0 please keep in mind that the \s-1EBCDIC\s0 and \s-1ASCII\s0
character sets are different.  Perl builtin functions that may behave
differently under \s-1EBCDIC\s0 are mentioned in the perlport.pod document.
.PP
OpenEdition (\s-1UNIX\s0 System Services) does not (yet) support the #! means
of script invocation.
See:
.PP
.Vb 1
\&    head \`whence perldoc\`
.Ve
.PP
for an example of how to use the \*(L"eval exec\*(R" trick to ask the shell to
have perl run your scripts for you.
.SH "AUTHORS"
.IX Header "AUTHORS"
Neale Ferguson.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1INSTALL\s0, perlport, perlebcdic.
.SS "Mailing list for Perl on \s-1VM/ESA\s0"
.IX Subsection "Mailing list for Perl on VM/ESA"
If you are interested in the \s-1VM/ESA\s0, z/OS (formerly known as \s-1OS/390\s0)
and POSIX-BC (\s-1BS2000\s0) ports of Perl then see the perl-mvs mailing list.
To subscribe, send an empty message to perl\-mvs\-subscribe@perl.org.
.PP
See also:
.PP
http://lists.perl.org/list/perl\-mvs.html <http://lists.perl.org/list/perl-mvs.html>
.PP
There are web archives of the mailing list at:
.IP "\(bu" 4
http://www.xray.mpe.mpg.de/mailing\-lists/perl\-mvs/ <http://www.xray.mpe.mpg.de/mailing-lists/perl-mvs/>
.IP "\(bu" 4
http://archive.develooper.com/perl\-mvs@perl.org/ <http://archive.develooper.com/perl-mvs@perl.org/>
                                                                                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvms.1                                    0100644 0001750 0001750 00000176103 12566207450 022437  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVMS 1"
.TH PERLVMS 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvms \- VMS\-specific documentation for Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Gathered below are notes describing details of Perl 5's 
behavior on \s-1VMS. \s0 They are a supplement to the regular Perl 5 
documentation, so we have focussed on the ways in which Perl 
5 functions differently under \s-1VMS\s0 than it does under Unix, 
and on the interactions between Perl and the rest of the 
operating system.  We haven't tried to duplicate complete 
descriptions of Perl features from the main Perl 
documentation, which can be found in the \fI[.pod]\fR 
subdirectory of the Perl distribution.
.PP
We hope these notes will save you from confusion and lost 
sleep when writing Perl scripts on \s-1VMS. \s0 If you find we've 
missed something you think should appear here, please don't 
hesitate to drop a line to vmsperl@perl.org.
.SH "Installation"
.IX Header "Installation"
Directions for building and installing Perl 5 can be found in 
the file \fI\s-1README\s0.vms\fR in the main source directory of the 
Perl distribution..
.SH "Organization of Perl Images"
.IX Header "Organization of Perl Images"
.SS "Core Images"
.IX Subsection "Core Images"
During the installation process, three Perl images are produced.
\&\fIMiniperl.Exe\fR is an executable image which contains all of
the basic functionality of Perl, but cannot take advantage of
Perl extensions.  It is used to generate several files needed
to build the complete Perl and various extensions.  Once you've
finished installing Perl, you can delete this image.
.PP
Most of the complete Perl resides in the shareable image
\&\fIPerlShr.Exe\fR, which provides a core to which the Perl executable
image and all Perl extensions are linked.  You should place this
image in \fISys$Share\fR, or define the logical name \fIPerlShr\fR to
translate to the full file specification of this image.  It should
be world readable.  (Remember that if a user has execute only access
to \fIPerlShr\fR, \s-1VMS\s0 will treat it as if it were a privileged shareable
image, and will therefore require all downstream shareable images to be
INSTALLed, etc.)
.PP
Finally, \fIPerl.Exe\fR is an executable image containing the main
entry point for Perl, as well as some initialization code.  It
should be placed in a public directory, and made world executable.
In order to run Perl with command line arguments, you should
define a foreign command to invoke this image.
.SS "Perl Extensions"
.IX Subsection "Perl Extensions"
Perl extensions are packages which provide both \s-1XS\s0 and Perl code
to add new functionality to perl.  (\s-1XS\s0 is a meta-language which
simplifies writing C code which interacts with Perl, see
perlxs for more details.)  The Perl code for an
extension is treated like any other library module \- it's
made available in your script through the appropriate
\&\f(CW\*(C`use\*(C'\fR or \f(CW\*(C`require\*(C'\fR statement, and usually defines a Perl
package containing the extension.
.PP
The portion of the extension provided by the \s-1XS\s0 code may be
connected to the rest of Perl in either of two ways.  In the
\&\fBstatic\fR configuration, the object code for the extension is
linked directly into \fIPerlShr.Exe\fR, and is initialized whenever
Perl is invoked.  In the \fBdynamic\fR configuration, the extension's
machine code is placed into a separate shareable image, which is
mapped by Perl's DynaLoader when the extension is \f(CW\*(C`use\*(C'\fRd or
\&\f(CW\*(C`require\*(C'\fRd in your script.  This allows you to maintain the
extension as a separate entity, at the cost of keeping track of the
additional shareable image.  Most extensions can be set up as either
static or dynamic.
.PP
The source code for an extension usually resides in its own
directory.  At least three files are generally provided:
\&\fIExtshortname\fR\fI.xs\fR (where \fIExtshortname\fR is the portion of
the extension's name following the last \f(CW\*(C`::\*(C'\fR), containing
the \s-1XS\s0 code, \fIExtshortname\fR\fI.pm\fR, the Perl library module
for the extension, and \fIMakefile.PL\fR, a Perl script which uses
the \f(CW\*(C`MakeMaker\*(C'\fR library modules supplied with Perl to generate
a \fIDescrip.MMS\fR file for the extension.
.SS "Installing static extensions"
.IX Subsection "Installing static extensions"
Since static extensions are incorporated directly into
\&\fIPerlShr.Exe\fR, you'll have to rebuild Perl to incorporate a
new extension.  You should edit the main \fIDescrip.MMS\fR or \fIMakefile\fR
you use to build Perl, adding the extension's name to the \f(CW\*(C`ext\*(C'\fR
macro, and the extension's object file to the \f(CW\*(C`extobj\*(C'\fR macro.
You'll also need to build the extension's object file, either
by adding dependencies to the main \fIDescrip.MMS\fR, or using a
separate \fIDescrip.MMS\fR for the extension.  Then, rebuild
\&\fIPerlShr.Exe\fR to incorporate the new code.
.PP
Finally, you'll need to copy the extension's Perl library
module to the \fI[.\fR\fIExtname\fR\fI]\fR subdirectory under one
of the directories in \f(CW@INC\fR, where \fIExtname\fR is the name
of the extension, with all \f(CW\*(C`::\*(C'\fR replaced by \f(CW\*(C`.\*(C'\fR (e.g.
the library module for extension Foo::Bar would be copied
to a \fI[.Foo.Bar]\fR subdirectory).
.SS "Installing dynamic extensions"
.IX Subsection "Installing dynamic extensions"
In general, the distributed kit for a Perl extension includes
a file named Makefile.PL, which is a Perl program which is used
to create a \fIDescrip.MMS\fR file which can be used to build and
install the files required by the extension.  The kit should be
unpacked into a directory tree \fBnot\fR under the main Perl source
directory, and the procedure for building the extension is simply
.PP
.Vb 4
\&    $ perl Makefile.PL  ! Create Descrip.MMS
\&    $ mmk               ! Build necessary files
\&    $ mmk test          ! Run test code, if supplied
\&    $ mmk install       ! Install into public Perl tree
.Ve
.PP
\&\fIN.B.\fR The procedure by which extensions are built and
tested creates several levels (at least 4) under the
directory in which the extension's source files live.
For this reason if you are running a version of \s-1VMS\s0 prior
to V7.1 you shouldn't nest the source directory
too deeply in your directory structure lest you exceed \s-1RMS\s0'
maximum of 8 levels of subdirectory in a filespec.  (You
can use rooted logical names to get another 8 levels of
nesting, if you can't place the files near the top of
the physical directory structure.)
.PP
\&\s-1VMS\s0 support for this process in the current release of Perl
is sufficient to handle most extensions.  However, it does
not yet recognize extra libraries required to build shareable
images which are part of an extension, so these must be added
to the linker options file for the extension by hand.  For
instance, if the \fI\s-1PGPLOT\s0\fR extension to Perl requires the
\&\fI\s-1PGPLOTSHR.EXE\s0\fR shareable image in order to properly link
the Perl extension, then the line \f(CW\*(C`PGPLOTSHR/Share\*(C'\fR must
be added to the linker options file \fI\s-1PGPLOT\s0.Opt\fR produced
during the build process for the Perl extension.
.PP
By default, the shareable image for an extension is placed in
the \fI[.lib.site_perl.auto\fR\fIArch\fR.\fIExtname\fR\fI]\fR directory of the
installed Perl directory tree (where \fIArch\fR is \fI\s-1VMS_VAX\s0\fR or
\&\fI\s-1VMS_AXP\s0\fR, and \fIExtname\fR is the name of the extension, with
each \f(CW\*(C`::\*(C'\fR translated to \f(CW\*(C`.\*(C'\fR).  (See the MakeMaker documentation
for more details on installation options for extensions.)
However, it can be manually placed in any of several locations:
.IP "\(bu" 4
the \fI[.Lib.Auto.\fR\fIArch\fR\fI\f(CI$PVers\fI\fR\fIExtname\fR\fI]\fR subdirectory
of one of the directories in \f(CW@INC\fR (where \fIPVers\fR
is the version of Perl you're using, as supplied in \f(CW$]\fR,
with '.' converted to '_'), or
.IP "\(bu" 4
one of the directories in \f(CW@INC\fR, or
.IP "\(bu" 4
a directory which the extensions Perl library module
passes to the DynaLoader when asking it to map
the shareable image, or
.IP "\(bu" 4
\&\fISys$Share\fR or \fISys$Library\fR.
.PP
If the shareable image isn't in any of these places, you'll need
to define a logical name \fIExtshortname\fR, where \fIExtshortname\fR
is the portion of the extension's name after the last \f(CW\*(C`::\*(C'\fR, which
translates to the full file specification of the shareable image.
.SH "File specifications"
.IX Header "File specifications"
.SS "Syntax"
.IX Subsection "Syntax"
We have tried to make Perl aware of both VMS-style and Unix-style file
specifications wherever possible.  You may use either style, or both,
on the command line and in scripts, but you may not combine the two
styles within a single file specification.  \s-1VMS\s0 Perl interprets Unix
pathnames in much the same way as the \s-1CRTL \s0(\fIe.g.\fR the first component
of an absolute path is read as the device name for the \s-1VMS\s0 file
specification).  There are a set of functions provided in the
\&\f(CW\*(C`VMS::Filespec\*(C'\fR package for explicit interconversion between \s-1VMS\s0 and
Unix syntax; its documentation provides more details.
.PP
We've tried to minimize the dependence of Perl library
modules on Unix syntax, but you may find that some of these,
as well as some scripts written for Unix systems, will
require that you use Unix syntax, since they will assume that
\&'/' is the directory separator, \fIetc.\fR  If you find instances
of this in the Perl distribution itself, please let us know,
so we can try to work around them.
.PP
Also when working on Perl programs on \s-1VMS,\s0 if you need a syntax
in a specific operating system format, then you need either to
check the appropriate \s-1DECC$\s0 feature logical, or call a conversion
routine to force it to that format.
.PP
The feature logical name \s-1DECC$FILENAME_UNIX_REPORT\s0 modifies traditional
Perl behavior in the conversion of file specifications from Unix to \s-1VMS\s0
format in order to follow the extended character handling rules now
expected by the \s-1CRTL. \s0 Specifically, when this feature is in effect, the
\&\f(CW\*(C`./.../\*(C'\fR in a Unix path is now translated to \f(CW\*(C`[.^.^.^.]\*(C'\fR instead of
the traditional \s-1VMS \s0\f(CW\*(C`[...]\*(C'\fR.  To be compatible with what MakeMaker
expects, if a \s-1VMS\s0 path cannot be translated to a Unix path, it is
passed through unchanged, so \f(CW\*(C`unixify("[...]")\*(C'\fR will return \f(CW\*(C`[...]\*(C'\fR.
.PP
The handling of extended characters is largely complete in the
VMS-specific C infrastructure of Perl, but more work is still needed to
fully support extended syntax filenames in several core modules.  In
particular, at this writing PathTools has only partial support for
directories containing some extended characters.
.PP
There are several ambiguous cases where a conversion routine cannot
determine whether an input filename is in Unix format or in \s-1VMS\s0 format,
since now both \s-1VMS\s0 and Unix file specifications may have characters in
them that could be mistaken for syntax delimiters of the other type. So
some pathnames simply cannot be used in a mode that allows either type
of pathname to be present.  Perl will tend to assume that an ambiguous
filename is in Unix format.
.PP
Allowing \*(L".\*(R" as a version delimiter is simply incompatible with
determining whether a pathname is in \s-1VMS\s0 format or in Unix format with
extended file syntax.  There is no way to know whether \*(L"perl\-5.8.6\*(R" is a
Unix \*(L"perl\-5.8.6\*(R" or a \s-1VMS \s0\*(L"perl\-5.8;6\*(R" when passing it to \fIunixify()\fR or
\&\fIvmsify()\fR.
.PP
The \s-1DECC$FILENAME_UNIX_REPORT\s0 logical name controls how Perl interprets
filenames to the extent that Perl uses the \s-1CRTL\s0 internally for many
purposes, and attempts to follow \s-1CRTL\s0 conventions for reporting
filenames.  The \s-1DECC$FILENAME_UNIX_ONLY\s0 feature differs in that it
expects all filenames passed to the C run-time to be already in Unix
format.  This feature is not yet supported in Perl since Perl uses
traditional OpenVMS file specifications internally and in the test
harness, and it is not yet clear whether this mode will be useful or
useable.  The feature logical name \s-1DECC$POSIX_COMPLIANT_PATHNAMES\s0 is new
with the \s-1RMS\s0 Symbolic Link \s-1SDK\s0 and included with OpenVMS v8.3, but is
not yet supported in Perl.
.SS "Filename Case"
.IX Subsection "Filename Case"
Perl follows \s-1VMS\s0 defaults and override settings in preserving (or not
preserving) filename case.  Case is not preserved on \s-1ODS\-2\s0 formatted
volumes on any architecture.  On \s-1ODS\-5\s0 volumes, filenames may be case
preserved depending on process and feature settings.  Perl now honors
\&\s-1DECC$EFS_CASE_PRESERVE\s0 and \s-1DECC$ARGV_PARSE_STYLE\s0 on those systems where
the \s-1CRTL\s0 supports these features.  When these features are not enabled
or the \s-1CRTL\s0 does not support them, Perl follows the traditional \s-1CRTL\s0
behavior of downcasing command-line arguments and returning file
specifications in lower case only.
.PP
\&\fIN. B.\fR  It is very easy to get tripped up using a mixture of other
programs, external utilities, and Perl scripts that are in varying
states of being able to handle case preservation.  For example, a file
created by an older version of an archive utility or a build utility
such as \s-1MMK\s0 or \s-1MMS\s0 may generate a filename in all upper case even on an
\&\s-1ODS\-5\s0 volume.  If this filename is later retrieved by a Perl script or
module in a case preserving environment, that upper case name may not
match the mixed-case or lower-case exceptions of the Perl code.  Your
best bet is to follow an all-or-nothing approach to case preservation:
either don't use it at all, or make sure your entire toolchain and
application environment support and use it.
.PP
OpenVMS Alpha v7.3\-1 and later and all version of OpenVMS I64 support
case sensitivity as a process setting (see \f(CW\*(C`SET PROCESS
/CASE_LOOKUP=SENSITIVE\*(C'\fR). Perl does not currently support case
sensitivity on \s-1VMS,\s0 but it may in the future, so Perl programs should
use the \f(CW\*(C`File::Spec\->case_tolerant\*(C'\fR method to determine the state, and
not the \f(CW$^O\fR variable.
.SS "Symbolic Links"
.IX Subsection "Symbolic Links"
When built on an \s-1ODS\-5\s0 volume with symbolic links enabled, Perl by
default supports symbolic links when the requisite support is available
in the filesystem and \s-1CRTL \s0(generally 64\-bit OpenVMS v8.3 and later). 
There are a number of limitations and caveats to be aware of when
working with symbolic links on \s-1VMS. \s0 Most notably, the target of a valid
symbolic link must be expressed as a Unix-style path and it must exist
on a volume visible from your \s-1POSIX\s0 root (see the \f(CW\*(C`SHOW ROOT\*(C'\fR command
in \s-1DCL\s0 help).  For further details on symbolic link capabilities and
requirements, see chapter 12 of the \s-1CRTL\s0 manual that ships with OpenVMS
v8.3 or later.
.SS "Wildcard expansion"
.IX Subsection "Wildcard expansion"
File specifications containing wildcards are allowed both on 
the command line and within Perl globs (e.g. \f(CW\*(C`<*.c>\*(C'\fR).  If
the wildcard filespec uses \s-1VMS\s0 syntax, the resultant 
filespecs will follow \s-1VMS\s0 syntax; if a Unix-style filespec is 
passed in, Unix-style filespecs will be returned.
Similar to the behavior of wildcard globbing for a Unix shell,
one can escape command line wildcards with double quotation
marks \f(CW\*(C`"\*(C'\fR around a perl program command line argument.  However,
owing to the stripping of \f(CW\*(C`"\*(C'\fR characters carried out by the C
handling of argv you will need to escape a construct such as
this one (in a directory containing the files \fI\s-1PERL.C\s0\fR, \fI\s-1PERL.EXE\s0\fR,
\&\fI\s-1PERL.H\s0\fR, and \fI\s-1PERL.OBJ\s0\fR):
.PP
.Vb 2
\&    $ perl \-e "print join(\*(Aq \*(Aq,@ARGV)" perl.*
\&    perl.c perl.exe perl.h perl.obj
.Ve
.PP
in the following triple quoted manner:
.PP
.Vb 2
\&    $ perl \-e "print join(\*(Aq \*(Aq,@ARGV)" """perl.*"""
\&    perl.*
.Ve
.PP
In both the case of unquoted command line arguments or in calls
to \f(CW\*(C`glob()\*(C'\fR \s-1VMS\s0 wildcard expansion is performed. (csh-style
wildcard expansion is available if you use \f(CW\*(C`File::Glob::glob\*(C'\fR.)
If the wildcard filespec contains a device or directory 
specification, then the resultant filespecs will also contain 
a device and directory; otherwise, device and directory 
information are removed.  VMS-style resultant filespecs will 
contain a full device and directory, while Unix-style 
resultant filespecs will contain only as much of a directory 
path as was present in the input filespec.  For example, if 
your default directory is Perl_Root:[000000], the expansion 
of \f(CW\*(C`[.t]*.*\*(C'\fR will yield filespecs  like 
\&\*(L"perl_root:[t]base.dir\*(R", while the expansion of \f(CW\*(C`t/*/*\*(C'\fR will 
yield filespecs like \*(L"t/base.dir\*(R".  (This is done to match 
the behavior of glob expansion performed by Unix shells.)
.PP
Similarly, the resultant filespec will contain the file version
only if one was present in the input filespec.
.SS "Pipes"
.IX Subsection "Pipes"
Input and output pipes to Perl filehandles are supported; the 
\&\*(L"file name\*(R" is passed to lib$\fIspawn()\fR for asynchronous 
execution.  You should be careful to close any pipes you have 
opened in a Perl script, lest you leave any \*(L"orphaned\*(R" 
subprocesses around when Perl exits.
.PP
You may also use backticks to invoke a \s-1DCL\s0 subprocess, whose 
output is used as the return value of the expression.  The 
string between the backticks is handled as if it were the
argument to the \f(CW\*(C`system\*(C'\fR operator (see below).  In this case,
Perl will wait for the subprocess to complete before continuing.
.PP
The mailbox (\s-1MBX\s0) that perl can create to communicate with a pipe
defaults to a buffer size of 8192 on 64\-bit systems, 512 on \s-1VAX. \s0 The
default buffer size is adjustable via the logical name \s-1PERL_MBX_SIZE\s0
provided that the value falls between 128 and the \s-1SYSGEN\s0 parameter
\&\s-1MAXBUF\s0 inclusive.  For example, to set the mailbox size to 32767 use
\&\f(CW\*(C`$ENV{\*(AqPERL_MBX_SIZE\*(Aq} = 32767;\*(C'\fR and then open and use pipe constructs. 
An alternative would be to issue the command:
.PP
.Vb 1
\&    $ Define PERL_MBX_SIZE 32767
.Ve
.PP
before running your wide record pipe program.  A larger value may
improve performance at the expense of the \s-1BYTLM UAF\s0 quota.
.SH "PERL5LIB and PERLLIB"
.IX Header "PERL5LIB and PERLLIB"
The \s-1PERL5LIB\s0 and \s-1PERLLIB\s0 logical names work as documented in perl,
except that the element separator is '|' instead of ':'.  The
directory specifications may use either \s-1VMS\s0 or Unix syntax.
.SH "The Perl Forked Debugger"
.IX Header "The Perl Forked Debugger"
The Perl forked debugger places the debugger commands and output in a
separate X\-11 terminal window so that commands and output from multiple
processes are not mixed together.
.PP
Perl on \s-1VMS\s0 supports an emulation of the forked debugger when Perl is
run on a \s-1VMS\s0 system that has X11 support installed.
.PP
To use the forked debugger, you need to have the default display set to an
X\-11 Server and some environment variables set that Unix expects.
.PP
The forked debugger requires the environment variable \f(CW\*(C`TERM\*(C'\fR to be \f(CW\*(C`xterm\*(C'\fR,
and the environment variable \f(CW\*(C`DISPLAY\*(C'\fR to exist.  \f(CW\*(C`xterm\*(C'\fR must be in
lower case.
.PP
.Vb 1
\&  $define TERM "xterm"
\&
\&  $define DISPLAY "hostname:0.0"
.Ve
.PP
Currently the value of \f(CW\*(C`DISPLAY\*(C'\fR is ignored.  It is recommended that it be set
to be the hostname of the display, the server and screen in Unix notation.  In
the future the value of \s-1DISPLAY\s0 may be honored by Perl instead of using the
default display.
.PP
It may be helpful to always use the forked debugger so that script I/O is
separated from debugger I/O.  You can force the debugger to be forked by
assigning a value to the logical name <\s-1PERLDB_PIDS\s0> that is not a process
identification number.
.PP
.Vb 1
\&  $define PERLDB_PIDS XXXX
.Ve
.SH "PERL_VMS_EXCEPTION_DEBUG"
.IX Header "PERL_VMS_EXCEPTION_DEBUG"
The \s-1PERL_VMS_EXCEPTION_DEBUG\s0 being defined as \*(L"\s-1ENABLE\*(R"\s0 will cause the \s-1VMS\s0
debugger to be invoked if a fatal exception that is not otherwise
handled is raised.  The purpose of this is to allow debugging of
internal Perl problems that would cause such a condition.
.PP
This allows the programmer to look at the execution stack and variables to
find out the cause of the exception.  As the debugger is being invoked as
the Perl interpreter is about to do a fatal exit, continuing the execution
in debug mode is usually not practical.
.PP
Starting Perl in the \s-1VMS\s0 debugger may change the program execution
profile in a way that such problems are not reproduced.
.PP
The \f(CW\*(C`kill\*(C'\fR function can be used to test this functionality from within
a program.
.PP
In typical \s-1VMS\s0 style, only the first letter of the value of this logical
name is actually checked in a case insensitive mode, and it is considered
enabled if it is the value \*(L"T\*(R",\*(L"1\*(R" or \*(L"E\*(R".
.PP
This logical name must be defined before Perl is started.
.SH "Command line"
.IX Header "Command line"
.SS "I/O redirection and backgrounding"
.IX Subsection "I/O redirection and backgrounding"
Perl for \s-1VMS\s0 supports redirection of input and output on the 
command line, using a subset of Bourne shell syntax:
.IP "\(bu" 4
\&\f(CW\*(C`<file\*(C'\fR reads stdin from \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`>file\*(C'\fR writes stdout to \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`>>file\*(C'\fR appends stdout to \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`2>file\*(C'\fR writes stderr to \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`2>>file\*(C'\fR appends stderr to \f(CW\*(C`file\*(C'\fR, and
.IP "\(bu" 4
\&\f(CW\*(C`2>&1\*(C'\fR redirects stderr to stdout.
.PP
In addition, output may be piped to a subprocess, using the  
character '|'.  Anything after this character on the command 
line is passed to a subprocess for execution; the subprocess 
takes the output of Perl as its input.
.PP
Finally, if the command line ends with '&', the entire 
command is run in the background as an asynchronous 
subprocess.
.SS "Command line switches"
.IX Subsection "Command line switches"
The following command line switches behave differently under
\&\s-1VMS\s0 than described in perlrun.  Note also that in order
to pass uppercase switches to Perl, you need to enclose
them in double-quotes on the command line, since the \s-1CRTL\s0
downcases all unquoted strings.
.PP
On newer 64 bit versions of OpenVMS, a process setting now
controls if the quoting is needed to preserve the case of
command line arguments.
.IP "\-i" 4
.IX Item "-i"
If the \f(CW\*(C`\-i\*(C'\fR switch is present but no extension for a backup
copy is given, then inplace editing creates a new version of
a file; the existing copy is not deleted.  (Note that if
an extension is given, an existing file is renamed to the backup
file, as is the case under other operating systems, so it does
not remain as a previous version under the original filename.)
.IP "\-S" 4
.IX Item "-S"
If the \f(CW"\-S"\fR or \f(CW\*(C`\-"S"\*(C'\fR switch is present \fIand\fR the script
name does not contain a directory, then Perl translates the
logical name \s-1DCL$PATH\s0 as a searchlist, using each translation
as a directory in which to look for the script.  In addition,
if no file type is specified, Perl looks in each directory
for a file matching the name specified, with a blank type,
a type of \fI.pl\fR, and a type of \fI.com\fR, in that order.
.IP "\-u" 4
.IX Item "-u"
The \f(CW\*(C`\-u\*(C'\fR switch causes the \s-1VMS\s0 debugger to be invoked
after the Perl program is compiled, but before it has
run.  It does not create a core dump file.
.SH "Perl functions"
.IX Header "Perl functions"
As of the time this document was last revised, the following 
Perl functions were implemented in the \s-1VMS\s0 port of Perl 
(functions marked with * are discussed in more detail below):
.PP
.Vb 10
\&    file tests*, abs, alarm, atan, backticks*, binmode*, bless,
\&    caller, chdir, chmod, chown, chomp, chop, chr,
\&    close, closedir, cos, crypt*, defined, delete, die, do, dump*, 
\&    each, endgrent, endpwent, eof, eval, exec*, exists, exit, exp, 
\&    fileno, flock  getc, getgrent*, getgrgid*, getgrnam, getlogin, getppid,
\&    getpwent*, getpwnam*, getpwuid*, glob, gmtime*, goto,
\&    grep, hex, ioctl, import, index, int, join, keys, kill*,
\&    last, lc, lcfirst, lchown*, length, link*, local, localtime, log, lstat, m//,
\&    map, mkdir, my, next, no, oct, open, opendir, ord, pack,
\&    pipe, pop, pos, print, printf, push, q//, qq//, qw//,
\&    qx//*, quotemeta, rand, read, readdir, readlink*, redo, ref, rename,
\&    require, reset, return, reverse, rewinddir, rindex,
\&    rmdir, s///, scalar, seek, seekdir, select(internal),
\&    select (system call)*, setgrent, setpwent, shift, sin, sleep,
\&    socketpair, sort, splice, split, sprintf, sqrt, srand, stat,
\&    study, substr, symlink*, sysread, system*, syswrite, tell,
\&    telldir, tie, time, times*, tr///, uc, ucfirst, umask,
\&    undef, unlink*, unpack, untie, unshift, use, utime*,
\&    values, vec, wait, waitpid*, wantarray, warn, write, y///
.Ve
.PP
The following functions were not implemented in the \s-1VMS\s0 port, 
and calling them produces a fatal error (usually) or 
undefined behavior (rarely, we hope):
.PP
.Vb 4
\&    chroot, dbmclose, dbmopen, fork*, getpgrp, getpriority,  
\&    msgctl, msgget, msgsend, msgrcv, semctl,
\&    semget, semop, setpgrp, setpriority, shmctl, shmget,
\&    shmread, shmwrite, syscall
.Ve
.PP
The following functions are available on Perls compiled with Dec C
5.2 or greater and running \s-1VMS 7.0\s0 or greater:
.PP
.Vb 1
\&    truncate
.Ve
.PP
The following functions are available on Perls built on \s-1VMS 7.2\s0 or
greater:
.PP
.Vb 1
\&    fcntl (without locking)
.Ve
.PP
The following functions may or may not be implemented, 
depending on what type of socket support you've built into 
your copy of Perl:
.PP
.Vb 9
\&    accept, bind, connect, getpeername,
\&    gethostbyname, getnetbyname, getprotobyname,
\&    getservbyname, gethostbyaddr, getnetbyaddr,
\&    getprotobynumber, getservbyport, gethostent,
\&    getnetent, getprotoent, getservent, sethostent,
\&    setnetent, setprotoent, setservent, endhostent,
\&    endnetent, endprotoent, endservent, getsockname,
\&    getsockopt, listen, recv, select(system call)*,
\&    send, setsockopt, shutdown, socket
.Ve
.PP
The following function is available on Perls built on 64 bit OpenVMS v8.2
with hard links enabled on an \s-1ODS\-5\s0 formatted build disk.  \s-1CRTL\s0 support
is in principle available as of OpenVMS v7.3\-1, and better configuration
support could detect this.
.PP
.Vb 1
\&    link
.Ve
.PP
The following functions are available on Perls built on 64 bit OpenVMS
v8.2 and later.  \s-1CRTL\s0 support is in principle available as of OpenVMS
v7.3\-2, and better configuration support could detect this.
.PP
.Vb 2
\&   getgrgid, getgrnam, getpwnam, getpwuid,
\&   setgrent, ttyname
.Ve
.PP
The following functions are available on Perls built on 64 bit OpenVMS v8.2
and later.
.PP
.Vb 1
\&   statvfs, socketpair
.Ve
.IP "File tests" 4
.IX Item "File tests"
The tests \f(CW\*(C`\-b\*(C'\fR, \f(CW\*(C`\-B\*(C'\fR, \f(CW\*(C`\-c\*(C'\fR, \f(CW\*(C`\-C\*(C'\fR, \f(CW\*(C`\-d\*(C'\fR, \f(CW\*(C`\-e\*(C'\fR, \f(CW\*(C`\-f\*(C'\fR,
\&\f(CW\*(C`\-o\*(C'\fR, \f(CW\*(C`\-M\*(C'\fR, \f(CW\*(C`\-s\*(C'\fR, \f(CW\*(C`\-S\*(C'\fR, \f(CW\*(C`\-t\*(C'\fR, \f(CW\*(C`\-T\*(C'\fR, and \f(CW\*(C`\-z\*(C'\fR work as
advertised.  The return values for \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR, and \f(CW\*(C`\-x\*(C'\fR
tell you whether you can actually access the file; this may
not reflect the UIC-based file protections.  Since real and
effective \s-1UIC\s0 don't differ under \s-1VMS, \s0\f(CW\*(C`\-O\*(C'\fR, \f(CW\*(C`\-R\*(C'\fR, \f(CW\*(C`\-W\*(C'\fR,
and \f(CW\*(C`\-X\*(C'\fR are equivalent to \f(CW\*(C`\-o\*(C'\fR, \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR, and \f(CW\*(C`\-x\*(C'\fR.
Similarly, several other tests, including \f(CW\*(C`\-A\*(C'\fR, \f(CW\*(C`\-g\*(C'\fR, \f(CW\*(C`\-k\*(C'\fR,
\&\f(CW\*(C`\-l\*(C'\fR, \f(CW\*(C`\-p\*(C'\fR, and \f(CW\*(C`\-u\*(C'\fR, aren't particularly meaningful under
\&\s-1VMS,\s0 and the values returned by these tests reflect whatever
your \s-1CRTL \s0\f(CW\*(C`stat()\*(C'\fR routine does to the equivalent bits in the
st_mode field.  Finally, \f(CW\*(C`\-d\*(C'\fR returns true if passed a device
specification without an explicit directory (e.g. \f(CW\*(C`DUA1:\*(C'\fR), as
well as if passed a directory.
.Sp
There are \s-1DECC\s0 feature logical names \s-1AND ODS\-5\s0 volume attributes that
also control what values are returned for the date fields.
.Sp
Note: Some sites have reported problems when using the file-access
tests (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR, and \f(CW\*(C`\-x\*(C'\fR) on files accessed via \s-1DEC\s0's \s-1DFS.\s0
Specifically, since \s-1DFS\s0 does not currently provide access to the
extended file header of files on remote volumes, attempts to
examine the \s-1ACL\s0 fail, and the file tests will return false,
with \f(CW$!\fR indicating that the file does not exist.  You can
use \f(CW\*(C`stat\*(C'\fR on these files, since that checks UIC-based protection
only, and then manually check the appropriate bits, as defined by
your C compiler's \fIstat.h\fR, in the mode value it returns, if you
need an approximation of the file's protections.
.IP "backticks" 4
.IX Item "backticks"
Backticks create a subprocess, and pass the enclosed string
to it for execution as a \s-1DCL\s0 command.  Since the subprocess is
created directly via \f(CW\*(C`lib$spawn()\*(C'\fR, any valid \s-1DCL\s0 command string
may be specified.
.IP "binmode \s-1FILEHANDLE\s0" 4
.IX Item "binmode FILEHANDLE"
The \f(CW\*(C`binmode\*(C'\fR operator will attempt to insure that no translation
of carriage control occurs on input from or output to this filehandle.
Since this involves reopening the file and then restoring its
file position indicator, if this function returns \s-1FALSE,\s0 the
underlying filehandle may no longer point to an open file, or may
point to a different position in the file than before \f(CW\*(C`binmode\*(C'\fR
was called.
.Sp
Note that \f(CW\*(C`binmode\*(C'\fR is generally not necessary when using normal
filehandles; it is provided so that you can control I/O to existing
record-structured files when necessary.  You can also use the
\&\f(CW\*(C`vmsfopen\*(C'\fR function in the VMS::Stdio extension to gain finer
control of I/O to files and devices with different record structures.
.IP "crypt \s-1PLAINTEXT, USER\s0" 4
.IX Item "crypt PLAINTEXT, USER"
The \f(CW\*(C`crypt\*(C'\fR operator uses the \f(CW\*(C`sys$hash_password\*(C'\fR system
service to generate the hashed representation of \s-1PLAINTEXT.\s0
If \s-1USER\s0 is a valid username, the algorithm and salt values
are taken from that user's \s-1UAF\s0 record.  If it is not, then
the preferred algorithm and a salt of 0 are used.  The
quadword encrypted value is returned as an 8\-character string.
.Sp
The value returned by \f(CW\*(C`crypt\*(C'\fR may be compared against
the encrypted password from the \s-1UAF\s0 returned by the \f(CW\*(C`getpw*\*(C'\fR
functions, in order to authenticate users.  If you're
going to do this, remember that the encrypted password in
the \s-1UAF\s0 was generated using uppercase username and
password strings; you'll have to upcase the arguments to
\&\f(CW\*(C`crypt\*(C'\fR to insure that you'll get the proper value:
.Sp
.Vb 9
\&    sub validate_passwd {
\&        my($user,$passwd) = @_;
\&        my($pwdhash);
\&        if ( !($pwdhash = (getpwnam($user))[1]) ||
\&               $pwdhash ne crypt("\eU$passwd","\eU$name") ) {
\&            intruder_alert($name);
\&        }
\&        return 1;
\&    }
.Ve
.IP "die" 4
.IX Item "die"
\&\f(CW\*(C`die\*(C'\fR will force the native \s-1VMS\s0 exit status to be an \s-1SS$_ABORT\s0 code
if neither of the $! or $? status values are ones that would cause
the native status to be interpreted as being what \s-1VMS\s0 classifies as
\&\s-1SEVERE_ERROR\s0 severity for \s-1DCL\s0 error handling.
.Sp
When \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR is active (see \*(L"$?\*(R" below), the native \s-1VMS\s0 exit
status value will have either one of the \f(CW$!\fR or \f(CW$?\fR or \f(CW$^E\fR or
the Unix value 255 encoded into it in a way that the effective original
value can be decoded by other programs written in C, including Perl
and the \s-1GNV\s0 package.  As per the normal non-VMS behavior of \f(CW\*(C`die\*(C'\fR if
either \f(CW$!\fR or \f(CW$?\fR are non-zero, one of those values will be
encoded into a native \s-1VMS\s0 status value.  If both of the Unix status
values are 0, and the \f(CW$^E\fR value is set one of \s-1ERROR\s0 or \s-1SEVERE_ERROR\s0
severity, then the \f(CW$^E\fR value will be used as the exit code as is.
If none of the above apply, the Unix value of 255 will be encoded into
a native \s-1VMS\s0 exit status value.
.Sp
Please note a significant difference in the behavior of \f(CW\*(C`die\*(C'\fR in
the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR mode is that it does not force a \s-1VMS
SEVERE_ERROR\s0 status on exit.  The Unix exit values of 2 through
255 will be encoded in \s-1VMS\s0 status values with severity levels of
\&\s-1SUCCESS. \s0 The Unix exit value of 1 will be encoded in a \s-1VMS\s0 status
value with a severity level of \s-1ERROR. \s0 This is to be compatible with
how the \s-1VMS C\s0 library encodes these values.
.Sp
The minimum severity level set by \f(CW\*(C`die\*(C'\fR in \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR mode
may be changed to be \s-1ERROR\s0 or higher in the future depending on the 
results of testing and further review.
.Sp
See \*(L"$?\*(R" for a description of the encoding of the Unix value to
produce a native \s-1VMS\s0 status containing it.
.IP "dump" 4
.IX Item "dump"
Rather than causing Perl to abort and dump core, the \f(CW\*(C`dump\*(C'\fR
operator invokes the \s-1VMS\s0 debugger.  If you continue to
execute the Perl program under the debugger, control will
be transferred to the label specified as the argument to
\&\f(CW\*(C`dump\*(C'\fR, or, if no label was specified, back to the
beginning of the program.  All other state of the program
(\fIe.g.\fR values of variables, open file handles) are not
affected by calling \f(CW\*(C`dump\*(C'\fR.
.IP "exec \s-1LIST\s0" 4
.IX Item "exec LIST"
A call to \f(CW\*(C`exec\*(C'\fR will cause Perl to exit, and to invoke the command
given as an argument to \f(CW\*(C`exec\*(C'\fR via \f(CW\*(C`lib$do_command\*(C'\fR.  If the
argument begins with '@' or '$' (other than as part of a filespec),
then it is executed as a \s-1DCL\s0 command.  Otherwise, the first token on
the command line is treated as the filespec of an image to run, and
an attempt is made to invoke it (using \fI.Exe\fR and the process
defaults to expand the filespec) and pass the rest of \f(CW\*(C`exec\*(C'\fR's
argument to it as parameters.  If the token has no file type, and
matches a file with null type, then an attempt is made to determine
whether the file is an executable image which should be invoked
using \f(CW\*(C`MCR\*(C'\fR or a text file which should be passed to \s-1DCL\s0 as a
command procedure.
.IP "fork" 4
.IX Item "fork"
While in principle the \f(CW\*(C`fork\*(C'\fR operator could be implemented via
(and with the same rather severe limitations as) the \s-1CRTL \s0\f(CW\*(C`vfork()\*(C'\fR
routine, and while some internal support to do just that is in
place, the implementation has never been completed, making \f(CW\*(C`fork\*(C'\fR
currently unavailable.  A true kernel \f(CW\*(C`fork()\*(C'\fR is expected in a
future version of \s-1VMS,\s0 and the pseudo-fork based on interpreter
threads may be available in a future version of Perl on \s-1VMS \s0(see
perlfork).  In the meantime, use \f(CW\*(C`system\*(C'\fR, backticks, or piped
filehandles to create subprocesses.
.IP "getpwent" 4
.IX Item "getpwent"
.PD 0
.IP "getpwnam" 4
.IX Item "getpwnam"
.IP "getpwuid" 4
.IX Item "getpwuid"
.PD
These operators obtain the information described in perlfunc,
if you have the privileges necessary to retrieve the named user's
\&\s-1UAF\s0 information via \f(CW\*(C`sys$getuai\*(C'\fR.  If not, then only the \f(CW$name\fR,
\&\f(CW$uid\fR, and \f(CW$gid\fR items are returned.  The \f(CW$dir\fR item contains
the login directory in \s-1VMS\s0 syntax, while the \f(CW$comment\fR item
contains the login directory in Unix syntax. The \f(CW$gcos\fR item
contains the owner field from the \s-1UAF\s0 record.  The \f(CW$quota\fR
item is not used.
.IP "gmtime" 4
.IX Item "gmtime"
The \f(CW\*(C`gmtime\*(C'\fR operator will function properly if you have a
working \s-1CRTL \s0\f(CW\*(C`gmtime()\*(C'\fR routine, or if the logical name
\&\s-1SYS$TIMEZONE_DIFFERENTIAL\s0 is defined as the number of seconds
which must be added to \s-1UTC\s0 to yield local time.  (This logical
name is defined automatically if you are running a version of
\&\s-1VMS\s0 with built-in \s-1UTC\s0 support.)  If neither of these cases is
true, a warning message is printed, and \f(CW\*(C`undef\*(C'\fR is returned.
.IP "kill" 4
.IX Item "kill"
In most cases, \f(CW\*(C`kill\*(C'\fR is implemented via the undocumented system
service \f(CW$SIGPRC\fR, which has the same calling sequence as \f(CW$FORCEX\fR, but
throws an exception in the target process rather than forcing it to call
\&\f(CW$EXIT\fR.  Generally speaking, \f(CW\*(C`kill\*(C'\fR follows the behavior of the
\&\s-1CRTL\s0's \f(CW\*(C`kill()\*(C'\fR function, but unlike that function can be called from
within a signal handler.  Also, unlike the \f(CW\*(C`kill\*(C'\fR in some versions of
the \s-1CRTL,\s0 Perl's \f(CW\*(C`kill\*(C'\fR checks the validity of the signal passed in and
returns an error rather than attempting to send an unrecognized signal.
.Sp
Also, negative signal values don't do anything special under
\&\s-1VMS\s0; they're just converted to the corresponding positive value.
.IP "qx//" 4
.IX Item "qx//"
See the entry on \f(CW\*(C`backticks\*(C'\fR above.
.IP "select (system call)" 4
.IX Item "select (system call)"
If Perl was not built with socket support, the system call
version of \f(CW\*(C`select\*(C'\fR is not available at all.  If socket
support is present, then the system call version of
\&\f(CW\*(C`select\*(C'\fR functions only for file descriptors attached
to sockets.  It will not provide information about regular
files or pipes, since the \s-1CRTL \s0\f(CW\*(C`select()\*(C'\fR routine does not
provide this functionality.
.IP "stat \s-1EXPR\s0" 4
.IX Item "stat EXPR"
Since \s-1VMS\s0 keeps track of files according to a different scheme
than Unix, it's not really possible to represent the file's \s-1ID\s0
in the \f(CW\*(C`st_dev\*(C'\fR and \f(CW\*(C`st_ino\*(C'\fR fields of a \f(CW\*(C`struct stat\*(C'\fR.  Perl
tries its best, though, and the values it uses are pretty unlikely
to be the same for two different files.  We can't guarantee this,
though, so caveat scriptor.
.IP "system \s-1LIST\s0" 4
.IX Item "system LIST"
The \f(CW\*(C`system\*(C'\fR operator creates a subprocess, and passes its 
arguments to the subprocess for execution as a \s-1DCL\s0 command.  
Since the subprocess is created directly via \f(CW\*(C`lib$spawn()\*(C'\fR, any 
valid \s-1DCL\s0 command string may be specified.  If the string begins with
\&'@', it is treated as a \s-1DCL\s0 command unconditionally.  Otherwise, if
the first token contains a character used as a delimiter in file
specification (e.g. \f(CW\*(C`:\*(C'\fR or \f(CW\*(C`]\*(C'\fR), an attempt is made to expand it
using  a default type of \fI.Exe\fR and the process defaults, and if
successful, the resulting file is invoked via \f(CW\*(C`MCR\*(C'\fR. This allows you
to invoke an image directly simply by passing the file specification
to \f(CW\*(C`system\*(C'\fR, a common Unixish idiom.  If the token has no file type,
and matches a file with null type, then an attempt is made to
determine whether the file is an executable image which should be
invoked using \f(CW\*(C`MCR\*(C'\fR or a text file which should be passed to \s-1DCL\s0
as a command procedure.
.Sp
If \s-1LIST\s0 consists of the empty string, \f(CW\*(C`system\*(C'\fR spawns an
interactive \s-1DCL\s0 subprocess, in the same fashion as typing
\&\fB\s-1SPAWN\s0\fR at the \s-1DCL\s0 prompt.
.Sp
Perl waits for the subprocess to complete before continuing
execution in the current process.  As described in perlfunc,
the return value of \f(CW\*(C`system\*(C'\fR is a fake \*(L"status\*(R" which follows
\&\s-1POSIX\s0 semantics unless the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR is in
effect; see the description of \f(CW$?\fR in this document for more 
detail.
.IP "time" 4
.IX Item "time"
The value returned by \f(CW\*(C`time\*(C'\fR is the offset in seconds from
01\-JAN\-1970 00:00:00 (just like the \s-1CRTL\s0's \fItimes()\fR routine), in order
to make life easier for code coming in from the POSIX/Unix world.
.IP "times" 4
.IX Item "times"
The array returned by the \f(CW\*(C`times\*(C'\fR operator is divided up 
according to the same rules the \s-1CRTL \s0\f(CW\*(C`times()\*(C'\fR routine.  
Therefore, the \*(L"system time\*(R" elements will always be 0, since 
there is no difference between \*(L"user time\*(R" and \*(L"system\*(R" time 
under \s-1VMS,\s0 and the time accumulated by a subprocess may or may 
not appear separately in the \*(L"child time\*(R" field, depending on 
whether \f(CW\*(C`times()\*(C'\fR keeps track of subprocesses separately.  Note
especially that the \s-1VAXCRTL \s0(at least) keeps track only of
subprocesses spawned using \f(CW\*(C`fork()\*(C'\fR and \f(CW\*(C`exec()\*(C'\fR; it will not
accumulate the times of subprocesses spawned via pipes, \f(CW\*(C`system()\*(C'\fR,
or backticks.
.IP "unlink \s-1LIST\s0" 4
.IX Item "unlink LIST"
\&\f(CW\*(C`unlink\*(C'\fR will delete the highest version of a file only; in
order to delete all versions, you need to say
.Sp
.Vb 1
\&    1 while unlink LIST;
.Ve
.Sp
You may need to make this change to scripts written for a
Unix system which expect that after a call to \f(CW\*(C`unlink\*(C'\fR,
no files with the names passed to \f(CW\*(C`unlink\*(C'\fR will exist.
(Note: This can be changed at compile time; if you
\&\f(CW\*(C`use Config\*(C'\fR and \f(CW$Config{\*(Aqd_unlink_all_versions\*(Aq}\fR is
\&\f(CW\*(C`define\*(C'\fR, then \f(CW\*(C`unlink\*(C'\fR will delete all versions of a
file on the first call.)
.Sp
\&\f(CW\*(C`unlink\*(C'\fR will delete a file if at all possible, even if it
requires changing file protection (though it won't try to
change the protection of the parent directory).  You can tell
whether you've got explicit delete access to a file by using the
\&\f(CW\*(C`VMS::Filespec::candelete\*(C'\fR operator.  For instance, in order
to delete only files to which you have delete access, you could
say something like
.Sp
.Vb 8
\&    sub safe_unlink {
\&        my($file,$num);
\&        foreach $file (@_) {
\&            next unless VMS::Filespec::candelete($file);
\&            $num += unlink $file;
\&        }
\&        $num;
\&    }
.Ve
.Sp
(or you could just use \f(CW\*(C`VMS::Stdio::remove\*(C'\fR, if you've installed
the VMS::Stdio extension distributed with Perl). If \f(CW\*(C`unlink\*(C'\fR has to
change the file protection to delete the file, and you interrupt it
in midstream, the file may be left intact, but with a changed \s-1ACL\s0
allowing you delete access.
.Sp
This behavior of \f(CW\*(C`unlink\*(C'\fR is to be compatible with \s-1POSIX\s0 behavior
and not traditional \s-1VMS\s0 behavior.
.IP "utime \s-1LIST\s0" 4
.IX Item "utime LIST"
This operator changes only the modification time of the file (\s-1VMS \s0
revision date) on \s-1ODS\-2\s0 volumes and \s-1ODS\-5\s0 volumes without access 
dates enabled. On \s-1ODS\-5\s0 volumes with access dates enabled, the 
true access time is modified.
.IP "waitpid \s-1PID,FLAGS\s0" 4
.IX Item "waitpid PID,FLAGS"
If \s-1PID\s0 is a subprocess started by a piped \f(CW\*(C`open()\*(C'\fR (see open), 
\&\f(CW\*(C`waitpid\*(C'\fR will wait for that subprocess, and return its final status
value in \f(CW$?\fR.  If \s-1PID\s0 is a subprocess created in some other way (e.g.
SPAWNed before Perl was invoked), \f(CW\*(C`waitpid\*(C'\fR will simply check once per
second whether the process has completed, and return when it has.  (If
\&\s-1PID\s0 specifies a process that isn't a subprocess of the current process,
and you invoked Perl with the \f(CW\*(C`\-w\*(C'\fR switch, a warning will be issued.)
.Sp
Returns \s-1PID\s0 on success, \-1 on error.  The \s-1FLAGS\s0 argument is ignored
in all cases.
.SH "Perl variables"
.IX Header "Perl variables"
The following VMS-specific information applies to the indicated
\&\*(L"special\*(R" Perl variables, in addition to the general information
in perlvar.  Where there is a conflict, this information
takes precedence.
.ie n .IP "%ENV" 4
.el .IP "\f(CW%ENV\fR" 4
.IX Item "%ENV"
The operation of the \f(CW%ENV\fR array depends on the translation
of the logical name \fI\s-1PERL_ENV_TABLES\s0\fR.  If defined, it should
be a search list, each element of which specifies a location
for \f(CW%ENV\fR elements.  If you tell Perl to read or set the
element \f(CW\*(C`$ENV{\*(C'\fR\fIname\fR\f(CW\*(C`}\*(C'\fR, then Perl uses the translations of
\&\fI\s-1PERL_ENV_TABLES\s0\fR as follows:
.RS 4
.IP "\s-1CRTL_ENV\s0" 4
.IX Item "CRTL_ENV"
This string tells Perl to consult the \s-1CRTL\s0's internal \f(CW\*(C`environ\*(C'\fR
array of key-value pairs, using \fIname\fR as the key.  In most cases,
this contains only a few keys, but if Perl was invoked via the C
\&\f(CW\*(C`exec[lv]e()\*(C'\fR function, as is the case for \s-1CGI\s0 processing by some
\&\s-1HTTP\s0 servers, then the \f(CW\*(C`environ\*(C'\fR array may have been populated by
the calling program.
.IP "CLISYM_[\s-1LOCAL\s0]" 4
.IX Item "CLISYM_[LOCAL]"
A string beginning with \f(CW\*(C`CLISYM_\*(C'\fRtells Perl to consult the \s-1CLI\s0's
symbol tables, using \fIname\fR as the name of the symbol.  When reading
an element of \f(CW%ENV\fR, the local symbol table is scanned first, followed
by the global symbol table..  The characters following \f(CW\*(C`CLISYM_\*(C'\fR are
significant when an element of \f(CW%ENV\fR is set or deleted: if the
complete string is \f(CW\*(C`CLISYM_LOCAL\*(C'\fR, the change is made in the local
symbol table; otherwise the global symbol table is changed.
.IP "Any other string" 4
.IX Item "Any other string"
If an element of \fI\s-1PERL_ENV_TABLES\s0\fR translates to any other string,
that string is used as the name of a logical name table, which is
consulted using \fIname\fR as the logical name.  The normal search
order of access modes is used.
.RE
.RS 4
.Sp
\&\fI\s-1PERL_ENV_TABLES\s0\fR is translated once when Perl starts up; any changes
you make while Perl is running do not affect the behavior of \f(CW%ENV\fR.
If \fI\s-1PERL_ENV_TABLES\s0\fR is not defined, then Perl defaults to consulting
first the logical name tables specified by \fI\s-1LNM$FILE_DEV\s0\fR, and then
the \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR array.
.Sp
In all operations on \f(CW%ENV\fR, the key string is treated as if it 
were entirely uppercase, regardless of the case actually 
specified in the Perl expression.
.Sp
When an element of \f(CW%ENV\fR is read, the locations to which
\&\fI\s-1PERL_ENV_TABLES\s0\fR points are checked in order, and the value
obtained from the first successful lookup is returned.  If the
name of the \f(CW%ENV\fR element contains a semi-colon, it and
any characters after it are removed.  These are ignored when
the \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR array or a \s-1CLI\s0 symbol table is consulted.
However, the name is looked up in a logical name table, the
suffix after the semi-colon is treated as the translation index
to be used for the lookup.   This lets you look up successive values
for search list logical names.  For instance, if you say
.Sp
.Vb 3
\&   $  Define STORY  once,upon,a,time,there,was
\&   $  perl \-e "for ($i = 0; $i <= 6; $i++) " \-
\&   _$ \-e "{ print $ENV{\*(Aqstory;\*(Aq.$i},\*(Aq \*(Aq}"
.Ve
.Sp
Perl will print \f(CW\*(C`ONCE UPON A TIME THERE WAS\*(C'\fR, assuming, of course,
that \fI\s-1PERL_ENV_TABLES\s0\fR is set up so that the logical name \f(CW\*(C`story\*(C'\fR
is found, rather than a \s-1CLI\s0 symbol or \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR element with
the same name.
.Sp
When an element of \f(CW%ENV\fR is set to a defined string, the
corresponding definition is made in the location to which the
first translation of \fI\s-1PERL_ENV_TABLES\s0\fR points.  If this causes a
logical name to be created, it is defined in supervisor mode.
(The same is done if an existing logical name was defined in
executive or kernel mode; an existing user or supervisor mode
logical name is reset to the new value.)  If the value is an empty
string, the logical name's translation is defined as a single \s-1NUL
\&\s0(\s-1ASCII 00\s0) character, since a logical name cannot translate to a
zero-length string.  (This restriction does not apply to \s-1CLI\s0 symbols
or \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR values; they are set to the empty string.)
An element of the \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR array can be set only if your
copy of Perl knows about the \s-1CRTL\s0's \f(CW\*(C`setenv()\*(C'\fR function.  (This is
present only in some versions of the \s-1DECCRTL\s0; check \f(CW$Config{d_setenv}\fR
to see whether your copy of Perl was built with a \s-1CRTL\s0 that has this
function.)
.Sp
When an element of \f(CW%ENV\fR is set to \f(CW\*(C`undef\*(C'\fR,
the element is looked up as if it were being read, and if it is
found, it is deleted.  (An item \*(L"deleted\*(R" from the \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR
array is set to the empty string; this can only be done if your
copy of Perl knows about the \s-1CRTL \s0\f(CW\*(C`setenv()\*(C'\fR function.)  Using
\&\f(CW\*(C`delete\*(C'\fR to remove an element from \f(CW%ENV\fR has a similar effect,
but after the element is deleted, another attempt is made to
look up the element, so an inner-mode logical name or a name in
another location will replace the logical name just deleted.
In either case, only the first value found searching \s-1PERL_ENV_TABLES\s0
is altered.  It is not possible at present to define a search list
logical name via \f(CW%ENV\fR.
.Sp
The element \f(CW$ENV{DEFAULT}\fR is special: when read, it returns
Perl's current default device and directory, and when set, it
resets them, regardless of the definition of \fI\s-1PERL_ENV_TABLES\s0\fR.
It cannot be cleared or deleted; attempts to do so are silently
ignored.
.Sp
Note that if you want to pass on any elements of the
C\-local environ array to a subprocess which isn't
started by fork/exec, or isn't running a C program, you
can \*(L"promote\*(R" them to logical names in the current
process, which will then be inherited by all subprocesses,
by saying
.Sp
.Vb 4
\&    foreach my $key (qw[C\-local keys you want promoted]) {
\&        my $temp = $ENV{$key}; # read from C\-local array
\&        $ENV{$key} = $temp;    # and define as logical name
\&    }
.Ve
.Sp
(You can't just say \f(CW$ENV{$key} = $ENV{$key}\fR, since the
Perl optimizer is smart enough to elide the expression.)
.Sp
Don't try to clear \f(CW%ENV\fR by saying \f(CW\*(C`%ENV = ();\*(C'\fR, it will throw
a fatal error.  This is equivalent to doing the following from \s-1DCL:\s0
.Sp
.Vb 1
\&    DELETE/LOGICAL *
.Ve
.Sp
You can imagine how bad things would be if, for example, the \s-1SYS$MANAGER\s0
or \s-1SYS$SYSTEM\s0 logical names were deleted.
.Sp
At present, the first time you iterate over \f(CW%ENV\fR using
\&\f(CW\*(C`keys\*(C'\fR, or \f(CW\*(C`values\*(C'\fR,  you will incur a time penalty as all
logical names are read, in order to fully populate \f(CW%ENV\fR.
Subsequent iterations will not reread logical names, so they
won't be as slow, but they also won't reflect any changes
to logical name tables caused by other programs.
.Sp
You do need to be careful with the logical names representing
process-permanent files, such as \f(CW\*(C`SYS$INPUT\*(C'\fR and \f(CW\*(C`SYS$OUTPUT\*(C'\fR.
The translations for these logical names are prepended with a
two-byte binary value (0x1B 0x00) that needs to be stripped off
if you wantto use it. (In previous versions of Perl it wasn't
possible to get the values of these logical names, as the null
byte acted as an end-of-string marker)
.RE
.IP "$!" 4
The string value of \f(CW$!\fR is that returned by the \s-1CRTL\s0's
\&\fIstrerror()\fR function, so it will include the \s-1VMS\s0 message for
VMS-specific errors.  The numeric value of \f(CW$!\fR is the
value of \f(CW\*(C`errno\*(C'\fR, except if errno is \s-1EVMSERR,\s0 in which
case \f(CW$!\fR contains the value of vaxc$errno.  Setting \f(CW$!\fR
always sets errno to the value specified.  If this value is
\&\s-1EVMSERR,\s0 it also sets vaxc$errno to 4 (NONAME-F-NOMSG), so
that the string value of \f(CW$!\fR won't reflect the \s-1VMS\s0 error
message from before \f(CW$!\fR was set.
.IP "$^E" 4
.IX Item "$^E"
This variable provides direct access to \s-1VMS\s0 status values
in vaxc$errno, which are often more specific than the
generic Unix-style error messages in \f(CW$!\fR.  Its numeric value
is the value of vaxc$errno, and its string value is the
corresponding \s-1VMS\s0 message string, as retrieved by sys$\fIgetmsg()\fR.
Setting \f(CW$^E\fR sets vaxc$errno to the value specified.
.Sp
While Perl attempts to keep the vaxc$errno value to be current, if
errno is not \s-1EVMSERR,\s0 it may not be from the current operation.
.IP "$?" 4
The \*(L"status value\*(R" returned in \f(CW$?\fR is synthesized from the
actual exit status of the subprocess in a way that approximates
\&\s-1POSIX\s0 \fIwait\fR\|(5) semantics, in order to allow Perl programs to
portably test for successful completion of subprocesses.  The
low order 8 bits of \f(CW$?\fR are always 0 under \s-1VMS,\s0 since the
termination status of a process may or may not have been
generated by an exception.
.Sp
The next 8 bits contain the termination status of the program.
.Sp
If the child process follows the convention of C programs
compiled with the _POSIX_EXIT macro set, the status value will
contain the actual value of 0 to 255 returned by that program
on a normal exit.
.Sp
With the _POSIX_EXIT macro set, the Unix exit value of zero is
represented as a \s-1VMS\s0 native status of 1, and the Unix values
from 2 to 255 are encoded by the equation:
.Sp
.Vb 1
\&   VMS_status = 0x35a000 + (unix_value * 8) + 1.
.Ve
.Sp
And in the special case of Unix value 1 the encoding is:
.Sp
.Vb 1
\&   VMS_status = 0x35a000 + 8 + 2 + 0x10000000.
.Ve
.Sp
For other termination statuses, the severity portion of the
subprocess's exit status is used: if the severity was success or
informational, these bits are all 0; if the severity was
warning, they contain a value of 1; if the severity was
error or fatal error, they contain the actual severity bits,
which turns out to be a value of 2 for error and 4 for severe_error.
Fatal is another term for the severe_error status.
.Sp
As a result, \f(CW$?\fR will always be zero if the subprocess's exit
status indicated successful completion, and non-zero if a
warning or error occurred or a program compliant with encoding
_POSIX_EXIT values was run and set a status.
.Sp
How can you tell the difference between a non-zero status that is
the result of a \s-1VMS\s0 native error status or an encoded Unix status?
You can not unless you look at the ${^CHILD_ERROR_NATIVE} value.
The ${^CHILD_ERROR_NATIVE} value returns the actual \s-1VMS\s0 status value
and check the severity bits. If the severity bits are equal to 1,
then if the numeric value for \f(CW$?\fR is between 2 and 255 or 0, then
\&\f(CW$?\fR accurately reflects a value passed back from a Unix application.
If \f(CW$?\fR is 1, and the severity bits indicate a \s-1VMS\s0 error (2), then
\&\f(CW$?\fR is from a Unix application exit value.
.Sp
In practice, Perl scripts that call programs that return _POSIX_EXIT
type status values will be expecting those values, and programs that
call traditional \s-1VMS\s0 programs will either be expecting the previous
behavior or just checking for a non-zero status.
.Sp
And success is always the value 0 in all behaviors.
.Sp
When the actual \s-1VMS\s0 termination status of the child is an error,
internally the \f(CW$!\fR value will be set to the closest Unix errno
value to that error so that Perl scripts that test for error
messages will see the expected Unix style error message instead
of a \s-1VMS\s0 message.
.Sp
Conversely, when setting \f(CW$?\fR in an \s-1END\s0 block, an attempt is made
to convert the \s-1POSIX\s0 value into a native status intelligible to
the operating system upon exiting Perl.  What this boils down to
is that setting \f(CW$?\fR to zero results in the generic success value
\&\s-1SS$_NORMAL,\s0 and setting \f(CW$?\fR to a non-zero value results in the
generic failure status \s-1SS$_ABORT. \s0 See also \*(L"exit\*(R" in perlport.
.Sp
With the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name defined as \*(L"\s-1ENABLE\*(R",\s0
setting \f(CW$?\fR will cause the new value to be encoded into \f(CW$^E\fR
so that either the original parent or child exit status values 
 0 to 255 can be automatically recovered by C programs expecting
_POSIX_EXIT behavior.  If both a parent and a child exit value are
non-zero, then it will be assumed that this is actually a \s-1VMS\s0 native
status value to be passed through.  The special value of 0xFFFF is
almost a \s-1NOOP\s0 as it will cause the current native \s-1VMS\s0 status in the
C library to become the current native Perl \s-1VMS\s0 status, and is handled
this way as it is known to not be a valid native \s-1VMS\s0 status value.
It is recommend that only values in the range of normal Unix parent or
child status numbers, 0 to 255 are used.
.Sp
The pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR makes \f(CW$?\fR reflect the actual 
\&\s-1VMS\s0 exit status instead of the default emulation of \s-1POSIX\s0 status 
described above.  This pragma also disables the conversion of
non-zero values to \s-1SS$_ABORT\s0 when setting \f(CW$?\fR in an \s-1END\s0
block (but zero will still be converted to \s-1SS$_NORMAL\s0).
.Sp
Do not use the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR with \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR
enabled, as they are at times requesting conflicting actions and the
consequence of ignoring this advice will be undefined to allow future
improvements in the \s-1POSIX\s0 exit handling.
.Sp
In general, with \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR enabled, more detailed information
will be available in the exit status for \s-1DCL\s0 scripts or other native \s-1VMS\s0 tools,
and will give the expected information for Posix programs.  It has not been
made the default in order to preserve backward compatibility.
.Sp
N.B. Setting \f(CW\*(C`DECC$FILENAME_UNIX_REPORT\*(C'\fR implicitly enables 
\&\f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR.
.IP "$|" 4
Setting \f(CW$|\fR for an I/O stream causes data to be flushed
all the way to disk on each write (\fIi.e.\fR not just to
the underlying \s-1RMS\s0 buffers for a file).  In other words,
it's equivalent to calling \fIfflush()\fR and \fIfsync()\fR from C.
.SH "Standard modules with VMS-specific differences"
.IX Header "Standard modules with VMS-specific differences"
.SS "SDBM_File"
.IX Subsection "SDBM_File"
SDBM_File works properly on \s-1VMS.\s0 It has, however, one minor
difference. The database directory file created has a \fI.sdbm_dir\fR
extension rather than a \fI.dir\fR extension. \fI.dir\fR files are \s-1VMS\s0 filesystem
directory files, and using them for other purposes could cause unacceptable
problems.
.SH "Revision date"
.IX Header "Revision date"
Please see the git repository for revision history.
.SH "AUTHOR"
.IX Header "AUTHOR"
Charles Bailey  bailey@cor.newman.upenn.edu
Craig Berry  craigberry@mac.com
Dan Sugalski  dan@sidhe.org
John Malmberg wb8tyw@qsl.net
                                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvms5.16.1                                0100644 0001750 0001750 00000175616 12566207427 022765  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVMS 1"
.TH PERLVMS 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvms \- VMS\-specific documentation for Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Gathered below are notes describing details of Perl 5's 
behavior on \s-1VMS\s0.  They are a supplement to the regular Perl 5 
documentation, so we have focussed on the ways in which Perl 
5 functions differently under \s-1VMS\s0 than it does under Unix, 
and on the interactions between Perl and the rest of the 
operating system.  We haven't tried to duplicate complete 
descriptions of Perl features from the main Perl 
documentation, which can be found in the \fI[.pod]\fR 
subdirectory of the Perl distribution.
.PP
We hope these notes will save you from confusion and lost 
sleep when writing Perl scripts on \s-1VMS\s0.  If you find we've 
missed something you think should appear here, please don't 
hesitate to drop a line to vmsperl@perl.org.
.SH "Installation"
.IX Header "Installation"
Directions for building and installing Perl 5 can be found in 
the file \fI\s-1README\s0.vms\fR in the main source directory of the 
Perl distribution..
.SH "Organization of Perl Images"
.IX Header "Organization of Perl Images"
.SS "Core Images"
.IX Subsection "Core Images"
During the installation process, three Perl images are produced.
\&\fIMiniperl.Exe\fR is an executable image which contains all of
the basic functionality of Perl, but cannot take advantage of
Perl extensions.  It is used to generate several files needed
to build the complete Perl and various extensions.  Once you've
finished installing Perl, you can delete this image.
.PP
Most of the complete Perl resides in the shareable image
\&\fIPerlShr.Exe\fR, which provides a core to which the Perl executable
image and all Perl extensions are linked.  You should place this
image in \fISys$Share\fR, or define the logical name \fIPerlShr\fR to
translate to the full file specification of this image.  It should
be world readable.  (Remember that if a user has execute only access
to \fIPerlShr\fR, \s-1VMS\s0 will treat it as if it were a privileged shareable
image, and will therefore require all downstream shareable images to be
INSTALLed, etc.)
.PP
Finally, \fIPerl.Exe\fR is an executable image containing the main
entry point for Perl, as well as some initialization code.  It
should be placed in a public directory, and made world executable.
In order to run Perl with command line arguments, you should
define a foreign command to invoke this image.
.SS "Perl Extensions"
.IX Subsection "Perl Extensions"
Perl extensions are packages which provide both \s-1XS\s0 and Perl code
to add new functionality to perl.  (\s-1XS\s0 is a meta-language which
simplifies writing C code which interacts with Perl, see
perlxs for more details.)  The Perl code for an
extension is treated like any other library module \- it's
made available in your script through the appropriate
\&\f(CW\*(C`use\*(C'\fR or \f(CW\*(C`require\*(C'\fR statement, and usually defines a Perl
package containing the extension.
.PP
The portion of the extension provided by the \s-1XS\s0 code may be
connected to the rest of Perl in either of two ways.  In the
\&\fBstatic\fR configuration, the object code for the extension is
linked directly into \fIPerlShr.Exe\fR, and is initialized whenever
Perl is invoked.  In the \fBdynamic\fR configuration, the extension's
machine code is placed into a separate shareable image, which is
mapped by Perl's DynaLoader when the extension is \f(CW\*(C`use\*(C'\fRd or
\&\f(CW\*(C`require\*(C'\fRd in your script.  This allows you to maintain the
extension as a separate entity, at the cost of keeping track of the
additional shareable image.  Most extensions can be set up as either
static or dynamic.
.PP
The source code for an extension usually resides in its own
directory.  At least three files are generally provided:
\&\fIExtshortname\fR\fI.xs\fR (where \fIExtshortname\fR is the portion of
the extension's name following the last \f(CW\*(C`::\*(C'\fR), containing
the \s-1XS\s0 code, \fIExtshortname\fR\fI.pm\fR, the Perl library module
for the extension, and \fIMakefile.PL\fR, a Perl script which uses
the \f(CW\*(C`MakeMaker\*(C'\fR library modules supplied with Perl to generate
a \fIDescrip.MMS\fR file for the extension.
.SS "Installing static extensions"
.IX Subsection "Installing static extensions"
Since static extensions are incorporated directly into
\&\fIPerlShr.Exe\fR, you'll have to rebuild Perl to incorporate a
new extension.  You should edit the main \fIDescrip.MMS\fR or \fIMakefile\fR
you use to build Perl, adding the extension's name to the \f(CW\*(C`ext\*(C'\fR
macro, and the extension's object file to the \f(CW\*(C`extobj\*(C'\fR macro.
You'll also need to build the extension's object file, either
by adding dependencies to the main \fIDescrip.MMS\fR, or using a
separate \fIDescrip.MMS\fR for the extension.  Then, rebuild
\&\fIPerlShr.Exe\fR to incorporate the new code.
.PP
Finally, you'll need to copy the extension's Perl library
module to the \fI[.\fR\fIExtname\fR\fI]\fR subdirectory under one
of the directories in \f(CW@INC\fR, where \fIExtname\fR is the name
of the extension, with all \f(CW\*(C`::\*(C'\fR replaced by \f(CW\*(C`.\*(C'\fR (e.g.
the library module for extension Foo::Bar would be copied
to a \fI[.Foo.Bar]\fR subdirectory).
.SS "Installing dynamic extensions"
.IX Subsection "Installing dynamic extensions"
In general, the distributed kit for a Perl extension includes
a file named Makefile.PL, which is a Perl program which is used
to create a \fIDescrip.MMS\fR file which can be used to build and
install the files required by the extension.  The kit should be
unpacked into a directory tree \fBnot\fR under the main Perl source
directory, and the procedure for building the extension is simply
.PP
.Vb 4
\&    $ perl Makefile.PL  ! Create Descrip.MMS
\&    $ mmk               ! Build necessary files
\&    $ mmk test          ! Run test code, if supplied
\&    $ mmk install       ! Install into public Perl tree
.Ve
.PP
\&\fIN.B.\fR The procedure by which extensions are built and
tested creates several levels (at least 4) under the
directory in which the extension's source files live.
For this reason if you are running a version of \s-1VMS\s0 prior
to V7.1 you shouldn't nest the source directory
too deeply in your directory structure lest you exceed \s-1RMS\s0'
maximum of 8 levels of subdirectory in a filespec.  (You
can use rooted logical names to get another 8 levels of
nesting, if you can't place the files near the top of
the physical directory structure.)
.PP
\&\s-1VMS\s0 support for this process in the current release of Perl
is sufficient to handle most extensions.  However, it does
not yet recognize extra libraries required to build shareable
images which are part of an extension, so these must be added
to the linker options file for the extension by hand.  For
instance, if the \fI\s-1PGPLOT\s0\fR extension to Perl requires the
\&\fI\s-1PGPLOTSHR\s0.EXE\fR shareable image in order to properly link
the Perl extension, then the line \f(CW\*(C`PGPLOTSHR/Share\*(C'\fR must
be added to the linker options file \fI\s-1PGPLOT\s0.Opt\fR produced
during the build process for the Perl extension.
.PP
By default, the shareable image for an extension is placed in
the \fI[.lib.site_perl.auto\fR\fIArch\fR.\fIExtname\fR\fI]\fR directory of the
installed Perl directory tree (where \fIArch\fR is \fI\s-1VMS_VAX\s0\fR or
\&\fI\s-1VMS_AXP\s0\fR, and \fIExtname\fR is the name of the extension, with
each \f(CW\*(C`::\*(C'\fR translated to \f(CW\*(C`.\*(C'\fR).  (See the MakeMaker documentation
for more details on installation options for extensions.)
However, it can be manually placed in any of several locations:
.IP "\(bu" 4
the \fI[.Lib.Auto.\fR\fIArch\fR\fI\f(CI$PVers\fI\fR\fIExtname\fR\fI]\fR subdirectory
of one of the directories in \f(CW@INC\fR (where \fIPVers\fR
is the version of Perl you're using, as supplied in \f(CW$]\fR,
with '.' converted to '_'), or
.IP "\(bu" 4
one of the directories in \f(CW@INC\fR, or
.IP "\(bu" 4
a directory which the extensions Perl library module
passes to the DynaLoader when asking it to map
the shareable image, or
.IP "\(bu" 4
\&\fISys$Share\fR or \fISys$Library\fR.
.PP
If the shareable image isn't in any of these places, you'll need
to define a logical name \fIExtshortname\fR, where \fIExtshortname\fR
is the portion of the extension's name after the last \f(CW\*(C`::\*(C'\fR, which
translates to the full file specification of the shareable image.
.SH "File specifications"
.IX Header "File specifications"
.SS "Syntax"
.IX Subsection "Syntax"
We have tried to make Perl aware of both VMS-style and Unix-style file
specifications wherever possible.  You may use either style, or both,
on the command line and in scripts, but you may not combine the two
styles within a single file specification.  \s-1VMS\s0 Perl interprets Unix
pathnames in much the same way as the \s-1CRTL\s0 (\fIe.g.\fR the first component
of an absolute path is read as the device name for the \s-1VMS\s0 file
specification).  There are a set of functions provided in the
\&\f(CW\*(C`VMS::Filespec\*(C'\fR package for explicit interconversion between \s-1VMS\s0 and
Unix syntax; its documentation provides more details.
.PP
We've tried to minimize the dependence of Perl library
modules on Unix syntax, but you may find that some of these,
as well as some scripts written for Unix systems, will
require that you use Unix syntax, since they will assume that
\&'/' is the directory separator, \fIetc.\fR  If you find instances
of this in the Perl distribution itself, please let us know,
so we can try to work around them.
.PP
Also when working on Perl programs on \s-1VMS\s0, if you need a syntax
in a specific operating system format, then you need either to
check the appropriate \s-1DECC$\s0 feature logical, or call a conversion
routine to force it to that format.
.PP
The feature logical name \s-1DECC$FILENAME_UNIX_REPORT\s0 modifies traditional
Perl behavior in the conversion of file specifications from Unix to \s-1VMS\s0
format in order to follow the extended character handling rules now
expected by the \s-1CRTL\s0.  Specifically, when this feature is in effect, the
\&\f(CW\*(C`./.../\*(C'\fR in a Unix path is now translated to \f(CW\*(C`[.^.^.^.]\*(C'\fR instead of
the traditional \s-1VMS\s0 \f(CW\*(C`[...]\*(C'\fR.  To be compatible with what MakeMaker
expects, if a \s-1VMS\s0 path cannot be translated to a Unix path, it is
passed through unchanged, so \f(CW\*(C`unixify("[...]")\*(C'\fR will return \f(CW\*(C`[...]\*(C'\fR.
.PP
The handling of extended characters is largely complete in the
VMS-specific C infrastructure of Perl, but more work is still needed to
fully support extended syntax filenames in several core modules.  In
particular, at this writing PathTools has only partial support for
directories containing some extended characters.
.PP
There are several ambiguous cases where a conversion routine cannot
determine whether an input filename is in Unix format or in \s-1VMS\s0 format,
since now both \s-1VMS\s0 and Unix file specifications may have characters in
them that could be mistaken for syntax delimiters of the other type. So
some pathnames simply cannot be used in a mode that allows either type
of pathname to be present.  Perl will tend to assume that an ambiguous
filename is in Unix format.
.PP
Allowing \*(L".\*(R" as a version delimiter is simply incompatible with
determining whether a pathname is in \s-1VMS\s0 format or in Unix format with
extended file syntax.  There is no way to know whether \*(L"perl\-5.8.6\*(R" is a
Unix \*(L"perl\-5.8.6\*(R" or a \s-1VMS\s0 \*(L"perl\-5.8;6\*(R" when passing it to \fIunixify()\fR or
\&\fIvmsify()\fR.
.PP
The \s-1DECC$FILENAME_UNIX_REPORT\s0 logical name controls how Perl interprets
filenames to the extent that Perl uses the \s-1CRTL\s0 internally for many
purposes, and attempts to follow \s-1CRTL\s0 conventions for reporting
filenames.  The \s-1DECC$FILENAME_UNIX_ONLY\s0 feature differs in that it
expects all filenames passed to the C run-time to be already in Unix
format.  This feature is not yet supported in Perl since Perl uses
traditional OpenVMS file specifications internally and in the test
harness, and it is not yet clear whether this mode will be useful or
useable.  The feature logical name \s-1DECC$POSIX_COMPLIANT_PATHNAMES\s0 is new
with the \s-1RMS\s0 Symbolic Link \s-1SDK\s0 and included with OpenVMS v8.3, but is
not yet supported in Perl.
.SS "Filename Case"
.IX Subsection "Filename Case"
Perl follows \s-1VMS\s0 defaults and override settings in preserving (or not
preserving) filename case.  Case is not preserved on \s-1ODS\-2\s0 formatted
volumes on any architecture.  On \s-1ODS\-5\s0 volumes, filenames may be case
preserved depending on process and feature settings.  Perl now honors
\&\s-1DECC$EFS_CASE_PRESERVE\s0 and \s-1DECC$ARGV_PARSE_STYLE\s0 on those systems where
the \s-1CRTL\s0 supports these features.  When these features are not enabled
or the \s-1CRTL\s0 does not support them, Perl follows the traditional \s-1CRTL\s0
behavior of downcasing command-line arguments and returning file
specifications in lower case only.
.PP
\&\fIN. B.\fR  It is very easy to get tripped up using a mixture of other
programs, external utilities, and Perl scripts that are in varying
states of being able to handle case preservation.  For example, a file
created by an older version of an archive utility or a build utility
such as \s-1MMK\s0 or \s-1MMS\s0 may generate a filename in all upper case even on an
\&\s-1ODS\-5\s0 volume.  If this filename is later retrieved by a Perl script or
module in a case preserving environment, that upper case name may not
match the mixed-case or lower-case exceptions of the Perl code.  Your
best bet is to follow an all-or-nothing approach to case preservation:
either don't use it at all, or make sure your entire toolchain and
application environment support and use it.
.PP
OpenVMS Alpha v7.3\-1 and later and all version of OpenVMS I64 support
case sensitivity as a process setting (see \f(CW\*(C`SET PROCESS
/CASE_LOOKUP=SENSITIVE\*(C'\fR). Perl does not currently support case
sensitivity on \s-1VMS\s0, but it may in the future, so Perl programs should
use the \f(CW\*(C`File::Spec\->case_tolerant\*(C'\fR method to determine the state, and
not the \f(CW$^O\fR variable.
.SS "Symbolic Links"
.IX Subsection "Symbolic Links"
When built on an \s-1ODS\-5\s0 volume with symbolic links enabled, Perl by
default supports symbolic links when the requisite support is available
in the filesystem and \s-1CRTL\s0 (generally 64\-bit OpenVMS v8.3 and later). 
There are a number of limitations and caveats to be aware of when
working with symbolic links on \s-1VMS\s0.  Most notably, the target of a valid
symbolic link must be expressed as a Unix-style path and it must exist
on a volume visible from your \s-1POSIX\s0 root (see the \f(CW\*(C`SHOW ROOT\*(C'\fR command
in \s-1DCL\s0 help).  For further details on symbolic link capabilities and
requirements, see chapter 12 of the \s-1CRTL\s0 manual that ships with OpenVMS
v8.3 or later.
.SS "Wildcard expansion"
.IX Subsection "Wildcard expansion"
File specifications containing wildcards are allowed both on 
the command line and within Perl globs (e.g. \f(CW\*(C`<*.c>\*(C'\fR).  If
the wildcard filespec uses \s-1VMS\s0 syntax, the resultant 
filespecs will follow \s-1VMS\s0 syntax; if a Unix-style filespec is 
passed in, Unix-style filespecs will be returned.
Similar to the behavior of wildcard globbing for a Unix shell,
one can escape command line wildcards with double quotation
marks \f(CW\*(C`"\*(C'\fR around a perl program command line argument.  However,
owing to the stripping of \f(CW\*(C`"\*(C'\fR characters carried out by the C
handling of argv you will need to escape a construct such as
this one (in a directory containing the files \fI\s-1PERL\s0.C\fR, \fI\s-1PERL\s0.EXE\fR,
\&\fI\s-1PERL\s0.H\fR, and \fI\s-1PERL\s0.OBJ\fR):
.PP
.Vb 2
\&    $ perl \-e "print join(\*(Aq \*(Aq,@ARGV)" perl.*
\&    perl.c perl.exe perl.h perl.obj
.Ve
.PP
in the following triple quoted manner:
.PP
.Vb 2
\&    $ perl \-e "print join(\*(Aq \*(Aq,@ARGV)" """perl.*"""
\&    perl.*
.Ve
.PP
In both the case of unquoted command line arguments or in calls
to \f(CW\*(C`glob()\*(C'\fR \s-1VMS\s0 wildcard expansion is performed. (csh-style
wildcard expansion is available if you use \f(CW\*(C`File::Glob::glob\*(C'\fR.)
If the wildcard filespec contains a device or directory 
specification, then the resultant filespecs will also contain 
a device and directory; otherwise, device and directory 
information are removed.  VMS-style resultant filespecs will 
contain a full device and directory, while Unix-style 
resultant filespecs will contain only as much of a directory 
path as was present in the input filespec.  For example, if 
your default directory is Perl_Root:[000000], the expansion 
of \f(CW\*(C`[.t]*.*\*(C'\fR will yield filespecs  like 
\&\*(L"perl_root:[t]base.dir\*(R", while the expansion of \f(CW\*(C`t/*/*\*(C'\fR will 
yield filespecs like \*(L"t/base.dir\*(R".  (This is done to match 
the behavior of glob expansion performed by Unix shells.)
.PP
Similarly, the resultant filespec will contain the file version
only if one was present in the input filespec.
.SS "Pipes"
.IX Subsection "Pipes"
Input and output pipes to Perl filehandles are supported; the 
\&\*(L"file name\*(R" is passed to lib$\fIspawn()\fR for asynchronous 
execution.  You should be careful to close any pipes you have 
opened in a Perl script, lest you leave any \*(L"orphaned\*(R" 
subprocesses around when Perl exits.
.PP
You may also use backticks to invoke a \s-1DCL\s0 subprocess, whose 
output is used as the return value of the expression.  The 
string between the backticks is handled as if it were the
argument to the \f(CW\*(C`system\*(C'\fR operator (see below).  In this case,
Perl will wait for the subprocess to complete before continuing.
.PP
The mailbox (\s-1MBX\s0) that perl can create to communicate with a pipe
defaults to a buffer size of 8192 on 64\-bit systems, 512 on \s-1VAX\s0.  The
default buffer size is adjustable via the logical name \s-1PERL_MBX_SIZE\s0
provided that the value falls between 128 and the \s-1SYSGEN\s0 parameter
\&\s-1MAXBUF\s0 inclusive.  For example, to set the mailbox size to 32767 use
\&\f(CW\*(C`$ENV{\*(AqPERL_MBX_SIZE\*(Aq} = 32767;\*(C'\fR and then open and use pipe constructs. 
An alternative would be to issue the command:
.PP
.Vb 1
\&    $ Define PERL_MBX_SIZE 32767
.Ve
.PP
before running your wide record pipe program.  A larger value may
improve performance at the expense of the \s-1BYTLM\s0 \s-1UAF\s0 quota.
.SH "PERL5LIB and PERLLIB"
.IX Header "PERL5LIB and PERLLIB"
The \s-1PERL5LIB\s0 and \s-1PERLLIB\s0 logical names work as documented in perl,
except that the element separator is '|' instead of ':'.  The
directory specifications may use either \s-1VMS\s0 or Unix syntax.
.SH "The Perl Forked Debugger"
.IX Header "The Perl Forked Debugger"
The Perl forked debugger places the debugger commands and output in a
separate X\-11 terminal window so that commands and output from multiple
processes are not mixed together.
.PP
Perl on \s-1VMS\s0 supports an emulation of the forked debugger when Perl is
run on a \s-1VMS\s0 system that has X11 support installed.
.PP
To use the forked debugger, you need to have the default display set to an
X\-11 Server and some environment variables set that Unix expects.
.PP
The forked debugger requires the environment variable \f(CW\*(C`TERM\*(C'\fR to be \f(CW\*(C`xterm\*(C'\fR,
and the environment variable \f(CW\*(C`DISPLAY\*(C'\fR to exist.  \f(CW\*(C`xterm\*(C'\fR must be in
lower case.
.PP
.Vb 1
\&  $define TERM "xterm"
\&
\&  $define DISPLAY "hostname:0.0"
.Ve
.PP
Currently the value of \f(CW\*(C`DISPLAY\*(C'\fR is ignored.  It is recommended that it be set
to be the hostname of the display, the server and screen in Unix notation.  In
the future the value of \s-1DISPLAY\s0 may be honored by Perl instead of using the
default display.
.PP
It may be helpful to always use the forked debugger so that script I/O is
separated from debugger I/O.  You can force the debugger to be forked by
assigning a value to the logical name <\s-1PERLDB_PIDS\s0> that is not a process
identification number.
.PP
.Vb 1
\&  $define PERLDB_PIDS XXXX
.Ve
.SH "PERL_VMS_EXCEPTION_DEBUG"
.IX Header "PERL_VMS_EXCEPTION_DEBUG"
The \s-1PERL_VMS_EXCEPTION_DEBUG\s0 being defined as \*(L"\s-1ENABLE\s0\*(R" will cause the \s-1VMS\s0
debugger to be invoked if a fatal exception that is not otherwise
handled is raised.  The purpose of this is to allow debugging of
internal Perl problems that would cause such a condition.
.PP
This allows the programmer to look at the execution stack and variables to
find out the cause of the exception.  As the debugger is being invoked as
the Perl interpreter is about to do a fatal exit, continuing the execution
in debug mode is usually not practical.
.PP
Starting Perl in the \s-1VMS\s0 debugger may change the program execution
profile in a way that such problems are not reproduced.
.PP
The \f(CW\*(C`kill\*(C'\fR function can be used to test this functionality from within
a program.
.PP
In typical \s-1VMS\s0 style, only the first letter of the value of this logical
name is actually checked in a case insensitive mode, and it is considered
enabled if it is the value \*(L"T\*(R",\*(L"1\*(R" or \*(L"E\*(R".
.PP
This logical name must be defined before Perl is started.
.SH "Command line"
.IX Header "Command line"
.SS "I/O redirection and backgrounding"
.IX Subsection "I/O redirection and backgrounding"
Perl for \s-1VMS\s0 supports redirection of input and output on the 
command line, using a subset of Bourne shell syntax:
.IP "\(bu" 4
\&\f(CW\*(C`<file\*(C'\fR reads stdin from \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`>file\*(C'\fR writes stdout to \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`>>file\*(C'\fR appends stdout to \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`2>file\*(C'\fR writes stderr to \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`2>>file\*(C'\fR appends stderr to \f(CW\*(C`file\*(C'\fR, and
.IP "\(bu" 4
\&\f(CW\*(C`2>&1\*(C'\fR redirects stderr to stdout.
.PP
In addition, output may be piped to a subprocess, using the  
character '|'.  Anything after this character on the command 
line is passed to a subprocess for execution; the subprocess 
takes the output of Perl as its input.
.PP
Finally, if the command line ends with '&', the entire 
command is run in the background as an asynchronous 
subprocess.
.SS "Command line switches"
.IX Subsection "Command line switches"
The following command line switches behave differently under
\&\s-1VMS\s0 than described in perlrun.  Note also that in order
to pass uppercase switches to Perl, you need to enclose
them in double-quotes on the command line, since the \s-1CRTL\s0
downcases all unquoted strings.
.PP
On newer 64 bit versions of OpenVMS, a process setting now
controls if the quoting is needed to preserve the case of
command line arguments.
.IP "\-i" 4
.IX Item "-i"
If the \f(CW\*(C`\-i\*(C'\fR switch is present but no extension for a backup
copy is given, then inplace editing creates a new version of
a file; the existing copy is not deleted.  (Note that if
an extension is given, an existing file is renamed to the backup
file, as is the case under other operating systems, so it does
not remain as a previous version under the original filename.)
.IP "\-S" 4
.IX Item "-S"
If the \f(CW"\-S"\fR or \f(CW\*(C`\-"S"\*(C'\fR switch is present \fIand\fR the script
name does not contain a directory, then Perl translates the
logical name \s-1DCL$PATH\s0 as a searchlist, using each translation
as a directory in which to look for the script.  In addition,
if no file type is specified, Perl looks in each directory
for a file matching the name specified, with a blank type,
a type of \fI.pl\fR, and a type of \fI.com\fR, in that order.
.IP "\-u" 4
.IX Item "-u"
The \f(CW\*(C`\-u\*(C'\fR switch causes the \s-1VMS\s0 debugger to be invoked
after the Perl program is compiled, but before it has
run.  It does not create a core dump file.
.SH "Perl functions"
.IX Header "Perl functions"
As of the time this document was last revised, the following 
Perl functions were implemented in the \s-1VMS\s0 port of Perl 
(functions marked with * are discussed in more detail below):
.PP
.Vb 10
\&    file tests*, abs, alarm, atan, backticks*, binmode*, bless,
\&    caller, chdir, chmod, chown, chomp, chop, chr,
\&    close, closedir, cos, crypt*, defined, delete, die, do, dump*, 
\&    each, endgrent, endpwent, eof, eval, exec*, exists, exit, exp, 
\&    fileno, flock  getc, getgrent*, getgrgid*, getgrnam, getlogin, getppid,
\&    getpwent*, getpwnam*, getpwuid*, glob, gmtime*, goto,
\&    grep, hex, ioctl, import, index, int, join, keys, kill*,
\&    last, lc, lcfirst, lchown*, length, link*, local, localtime, log, lstat, m//,
\&    map, mkdir, my, next, no, oct, open, opendir, ord, pack,
\&    pipe, pop, pos, print, printf, push, q//, qq//, qw//,
\&    qx//*, quotemeta, rand, read, readdir, readlink*, redo, ref, rename,
\&    require, reset, return, reverse, rewinddir, rindex,
\&    rmdir, s///, scalar, seek, seekdir, select(internal),
\&    select (system call)*, setgrent, setpwent, shift, sin, sleep,
\&    socketpair, sort, splice, split, sprintf, sqrt, srand, stat,
\&    study, substr, symlink*, sysread, system*, syswrite, tell,
\&    telldir, tie, time, times*, tr///, uc, ucfirst, umask,
\&    undef, unlink*, unpack, untie, unshift, use, utime*,
\&    values, vec, wait, waitpid*, wantarray, warn, write, y///
.Ve
.PP
The following functions were not implemented in the \s-1VMS\s0 port, 
and calling them produces a fatal error (usually) or 
undefined behavior (rarely, we hope):
.PP
.Vb 4
\&    chroot, dbmclose, dbmopen, fork*, getpgrp, getpriority,  
\&    msgctl, msgget, msgsend, msgrcv, semctl,
\&    semget, semop, setpgrp, setpriority, shmctl, shmget,
\&    shmread, shmwrite, syscall
.Ve
.PP
The following functions are available on Perls compiled with Dec C
5.2 or greater and running \s-1VMS\s0 7.0 or greater:
.PP
.Vb 1
\&    truncate
.Ve
.PP
The following functions are available on Perls built on \s-1VMS\s0 7.2 or
greater:
.PP
.Vb 1
\&    fcntl (without locking)
.Ve
.PP
The following functions may or may not be implemented, 
depending on what type of socket support you've built into 
your copy of Perl:
.PP
.Vb 9
\&    accept, bind, connect, getpeername,
\&    gethostbyname, getnetbyname, getprotobyname,
\&    getservbyname, gethostbyaddr, getnetbyaddr,
\&    getprotobynumber, getservbyport, gethostent,
\&    getnetent, getprotoent, getservent, sethostent,
\&    setnetent, setprotoent, setservent, endhostent,
\&    endnetent, endprotoent, endservent, getsockname,
\&    getsockopt, listen, recv, select(system call)*,
\&    send, setsockopt, shutdown, socket
.Ve
.PP
The following function is available on Perls built on 64 bit OpenVMS v8.2
with hard links enabled on an \s-1ODS\-5\s0 formatted build disk.  \s-1CRTL\s0 support
is in principle available as of OpenVMS v7.3\-1, and better configuration
support could detect this.
.PP
.Vb 1
\&    link
.Ve
.PP
The following functions are available on Perls built on 64 bit OpenVMS
v8.2 and later.  \s-1CRTL\s0 support is in principle available as of OpenVMS
v7.3\-2, and better configuration support could detect this.
.PP
.Vb 2
\&   getgrgid, getgrnam, getpwnam, getpwuid,
\&   setgrent, ttyname
.Ve
.PP
The following functions are available on Perls built on 64 bit OpenVMS v8.2
and later.
.PP
.Vb 1
\&   statvfs, socketpair
.Ve
.IP "File tests" 4
.IX Item "File tests"
The tests \f(CW\*(C`\-b\*(C'\fR, \f(CW\*(C`\-B\*(C'\fR, \f(CW\*(C`\-c\*(C'\fR, \f(CW\*(C`\-C\*(C'\fR, \f(CW\*(C`\-d\*(C'\fR, \f(CW\*(C`\-e\*(C'\fR, \f(CW\*(C`\-f\*(C'\fR,
\&\f(CW\*(C`\-o\*(C'\fR, \f(CW\*(C`\-M\*(C'\fR, \f(CW\*(C`\-s\*(C'\fR, \f(CW\*(C`\-S\*(C'\fR, \f(CW\*(C`\-t\*(C'\fR, \f(CW\*(C`\-T\*(C'\fR, and \f(CW\*(C`\-z\*(C'\fR work as
advertised.  The return values for \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR, and \f(CW\*(C`\-x\*(C'\fR
tell you whether you can actually access the file; this may
not reflect the UIC-based file protections.  Since real and
effective \s-1UIC\s0 don't differ under \s-1VMS\s0, \f(CW\*(C`\-O\*(C'\fR, \f(CW\*(C`\-R\*(C'\fR, \f(CW\*(C`\-W\*(C'\fR,
and \f(CW\*(C`\-X\*(C'\fR are equivalent to \f(CW\*(C`\-o\*(C'\fR, \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR, and \f(CW\*(C`\-x\*(C'\fR.
Similarly, several other tests, including \f(CW\*(C`\-A\*(C'\fR, \f(CW\*(C`\-g\*(C'\fR, \f(CW\*(C`\-k\*(C'\fR,
\&\f(CW\*(C`\-l\*(C'\fR, \f(CW\*(C`\-p\*(C'\fR, and \f(CW\*(C`\-u\*(C'\fR, aren't particularly meaningful under
\&\s-1VMS\s0, and the values returned by these tests reflect whatever
your \s-1CRTL\s0 \f(CW\*(C`stat()\*(C'\fR routine does to the equivalent bits in the
st_mode field.  Finally, \f(CW\*(C`\-d\*(C'\fR returns true if passed a device
specification without an explicit directory (e.g. \f(CW\*(C`DUA1:\*(C'\fR), as
well as if passed a directory.
.Sp
There are \s-1DECC\s0 feature logical names \s-1AND\s0 \s-1ODS\-5\s0 volume attributes that
also control what values are returned for the date fields.
.Sp
Note: Some sites have reported problems when using the file-access
tests (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR, and \f(CW\*(C`\-x\*(C'\fR) on files accessed via \s-1DEC\s0's \s-1DFS\s0.
Specifically, since \s-1DFS\s0 does not currently provide access to the
extended file header of files on remote volumes, attempts to
examine the \s-1ACL\s0 fail, and the file tests will return false,
with \f(CW$!\fR indicating that the file does not exist.  You can
use \f(CW\*(C`stat\*(C'\fR on these files, since that checks UIC-based protection
only, and then manually check the appropriate bits, as defined by
your C compiler's \fIstat.h\fR, in the mode value it returns, if you
need an approximation of the file's protections.
.IP "backticks" 4
.IX Item "backticks"
Backticks create a subprocess, and pass the enclosed string
to it for execution as a \s-1DCL\s0 command.  Since the subprocess is
created directly via \f(CW\*(C`lib$spawn()\*(C'\fR, any valid \s-1DCL\s0 command string
may be specified.
.IP "binmode \s-1FILEHANDLE\s0" 4
.IX Item "binmode FILEHANDLE"
The \f(CW\*(C`binmode\*(C'\fR operator will attempt to insure that no translation
of carriage control occurs on input from or output to this filehandle.
Since this involves reopening the file and then restoring its
file position indicator, if this function returns \s-1FALSE\s0, the
underlying filehandle may no longer point to an open file, or may
point to a different position in the file than before \f(CW\*(C`binmode\*(C'\fR
was called.
.Sp
Note that \f(CW\*(C`binmode\*(C'\fR is generally not necessary when using normal
filehandles; it is provided so that you can control I/O to existing
record-structured files when necessary.  You can also use the
\&\f(CW\*(C`vmsfopen\*(C'\fR function in the VMS::Stdio extension to gain finer
control of I/O to files and devices with different record structures.
.IP "crypt \s-1PLAINTEXT\s0, \s-1USER\s0" 4
.IX Item "crypt PLAINTEXT, USER"
The \f(CW\*(C`crypt\*(C'\fR operator uses the \f(CW\*(C`sys$hash_password\*(C'\fR system
service to generate the hashed representation of \s-1PLAINTEXT\s0.
If \s-1USER\s0 is a valid username, the algorithm and salt values
are taken from that user's \s-1UAF\s0 record.  If it is not, then
the preferred algorithm and a salt of 0 are used.  The
quadword encrypted value is returned as an 8\-character string.
.Sp
The value returned by \f(CW\*(C`crypt\*(C'\fR may be compared against
the encrypted password from the \s-1UAF\s0 returned by the \f(CW\*(C`getpw*\*(C'\fR
functions, in order to authenticate users.  If you're
going to do this, remember that the encrypted password in
the \s-1UAF\s0 was generated using uppercase username and
password strings; you'll have to upcase the arguments to
\&\f(CW\*(C`crypt\*(C'\fR to insure that you'll get the proper value:
.Sp
.Vb 9
\&    sub validate_passwd {
\&        my($user,$passwd) = @_;
\&        my($pwdhash);
\&        if ( !($pwdhash = (getpwnam($user))[1]) ||
\&               $pwdhash ne crypt("\eU$passwd","\eU$name") ) {
\&            intruder_alert($name);
\&        }
\&        return 1;
\&    }
.Ve
.IP "die" 4
.IX Item "die"
\&\f(CW\*(C`die\*(C'\fR will force the native \s-1VMS\s0 exit status to be an \s-1SS$_ABORT\s0 code
if neither of the $! or $? status values are ones that would cause
the native status to be interpreted as being what \s-1VMS\s0 classifies as
\&\s-1SEVERE_ERROR\s0 severity for \s-1DCL\s0 error handling.
.Sp
When \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR is active (see \*(L"$?\*(R" below), the native \s-1VMS\s0 exit
status value will have either one of the \f(CW$!\fR or \f(CW$?\fR or \f(CW$^E\fR or
the Unix value 255 encoded into it in a way that the effective original
value can be decoded by other programs written in C, including Perl
and the \s-1GNV\s0 package.  As per the normal non-VMS behavior of \f(CW\*(C`die\*(C'\fR if
either \f(CW$!\fR or \f(CW$?\fR are non-zero, one of those values will be
encoded into a native \s-1VMS\s0 status value.  If both of the Unix status
values are 0, and the \f(CW$^E\fR value is set one of \s-1ERROR\s0 or \s-1SEVERE_ERROR\s0
severity, then the \f(CW$^E\fR value will be used as the exit code as is.
If none of the above apply, the Unix value of 255 will be encoded into
a native \s-1VMS\s0 exit status value.
.Sp
Please note a significant difference in the behavior of \f(CW\*(C`die\*(C'\fR in
the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR mode is that it does not force a \s-1VMS\s0
\&\s-1SEVERE_ERROR\s0 status on exit.  The Unix exit values of 2 through
255 will be encoded in \s-1VMS\s0 status values with severity levels of
\&\s-1SUCCESS\s0.  The Unix exit value of 1 will be encoded in a \s-1VMS\s0 status
value with a severity level of \s-1ERROR\s0.  This is to be compatible with
how the \s-1VMS\s0 C library encodes these values.
.Sp
The minimum severity level set by \f(CW\*(C`die\*(C'\fR in \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR mode
may be changed to be \s-1ERROR\s0 or higher in the future depending on the 
results of testing and further review.
.Sp
See \*(L"$?\*(R" for a description of the encoding of the Unix value to
produce a native \s-1VMS\s0 status containing it.
.IP "dump" 4
.IX Item "dump"
Rather than causing Perl to abort and dump core, the \f(CW\*(C`dump\*(C'\fR
operator invokes the \s-1VMS\s0 debugger.  If you continue to
execute the Perl program under the debugger, control will
be transferred to the label specified as the argument to
\&\f(CW\*(C`dump\*(C'\fR, or, if no label was specified, back to the
beginning of the program.  All other state of the program
(\fIe.g.\fR values of variables, open file handles) are not
affected by calling \f(CW\*(C`dump\*(C'\fR.
.IP "exec \s-1LIST\s0" 4
.IX Item "exec LIST"
A call to \f(CW\*(C`exec\*(C'\fR will cause Perl to exit, and to invoke the command
given as an argument to \f(CW\*(C`exec\*(C'\fR via \f(CW\*(C`lib$do_command\*(C'\fR.  If the
argument begins with '@' or '$' (other than as part of a filespec),
then it is executed as a \s-1DCL\s0 command.  Otherwise, the first token on
the command line is treated as the filespec of an image to run, and
an attempt is made to invoke it (using \fI.Exe\fR and the process
defaults to expand the filespec) and pass the rest of \f(CW\*(C`exec\*(C'\fR's
argument to it as parameters.  If the token has no file type, and
matches a file with null type, then an attempt is made to determine
whether the file is an executable image which should be invoked
using \f(CW\*(C`MCR\*(C'\fR or a text file which should be passed to \s-1DCL\s0 as a
command procedure.
.IP "fork" 4
.IX Item "fork"
While in principle the \f(CW\*(C`fork\*(C'\fR operator could be implemented via
(and with the same rather severe limitations as) the \s-1CRTL\s0 \f(CW\*(C`vfork()\*(C'\fR
routine, and while some internal support to do just that is in
place, the implementation has never been completed, making \f(CW\*(C`fork\*(C'\fR
currently unavailable.  A true kernel \f(CW\*(C`fork()\*(C'\fR is expected in a
future version of \s-1VMS\s0, and the pseudo-fork based on interpreter
threads may be available in a future version of Perl on \s-1VMS\s0 (see
perlfork).  In the meantime, use \f(CW\*(C`system\*(C'\fR, backticks, or piped
filehandles to create subprocesses.
.IP "getpwent" 4
.IX Item "getpwent"
.PD 0
.IP "getpwnam" 4
.IX Item "getpwnam"
.IP "getpwuid" 4
.IX Item "getpwuid"
.PD
These operators obtain the information described in perlfunc,
if you have the privileges necessary to retrieve the named user's
\&\s-1UAF\s0 information via \f(CW\*(C`sys$getuai\*(C'\fR.  If not, then only the \f(CW$name\fR,
\&\f(CW$uid\fR, and \f(CW$gid\fR items are returned.  The \f(CW$dir\fR item contains
the login directory in \s-1VMS\s0 syntax, while the \f(CW$comment\fR item
contains the login directory in Unix syntax. The \f(CW$gcos\fR item
contains the owner field from the \s-1UAF\s0 record.  The \f(CW$quota\fR
item is not used.
.IP "gmtime" 4
.IX Item "gmtime"
The \f(CW\*(C`gmtime\*(C'\fR operator will function properly if you have a
working \s-1CRTL\s0 \f(CW\*(C`gmtime()\*(C'\fR routine, or if the logical name
\&\s-1SYS$TIMEZONE_DIFFERENTIAL\s0 is defined as the number of seconds
which must be added to \s-1UTC\s0 to yield local time.  (This logical
name is defined automatically if you are running a version of
\&\s-1VMS\s0 with built-in \s-1UTC\s0 support.)  If neither of these cases is
true, a warning message is printed, and \f(CW\*(C`undef\*(C'\fR is returned.
.IP "kill" 4
.IX Item "kill"
In most cases, \f(CW\*(C`kill\*(C'\fR is implemented via the undocumented system
service \f(CW$SIGPRC\fR, which has the same calling sequence as \f(CW$FORCEX\fR, but
throws an exception in the target process rather than forcing it to call
\&\f(CW$EXIT\fR.  Generally speaking, \f(CW\*(C`kill\*(C'\fR follows the behavior of the
\&\s-1CRTL\s0's \f(CW\*(C`kill()\*(C'\fR function, but unlike that function can be called from
within a signal handler.  Also, unlike the \f(CW\*(C`kill\*(C'\fR in some versions of
the \s-1CRTL\s0, Perl's \f(CW\*(C`kill\*(C'\fR checks the validity of the signal passed in and
returns an error rather than attempting to send an unrecognized signal.
.Sp
Also, negative signal values don't do anything special under
\&\s-1VMS\s0; they're just converted to the corresponding positive value.
.IP "qx//" 4
.IX Item "qx//"
See the entry on \f(CW\*(C`backticks\*(C'\fR above.
.IP "select (system call)" 4
.IX Item "select (system call)"
If Perl was not built with socket support, the system call
version of \f(CW\*(C`select\*(C'\fR is not available at all.  If socket
support is present, then the system call version of
\&\f(CW\*(C`select\*(C'\fR functions only for file descriptors attached
to sockets.  It will not provide information about regular
files or pipes, since the \s-1CRTL\s0 \f(CW\*(C`select()\*(C'\fR routine does not
provide this functionality.
.IP "stat \s-1EXPR\s0" 4
.IX Item "stat EXPR"
Since \s-1VMS\s0 keeps track of files according to a different scheme
than Unix, it's not really possible to represent the file's \s-1ID\s0
in the \f(CW\*(C`st_dev\*(C'\fR and \f(CW\*(C`st_ino\*(C'\fR fields of a \f(CW\*(C`struct stat\*(C'\fR.  Perl
tries its best, though, and the values it uses are pretty unlikely
to be the same for two different files.  We can't guarantee this,
though, so caveat scriptor.
.IP "system \s-1LIST\s0" 4
.IX Item "system LIST"
The \f(CW\*(C`system\*(C'\fR operator creates a subprocess, and passes its 
arguments to the subprocess for execution as a \s-1DCL\s0 command.  
Since the subprocess is created directly via \f(CW\*(C`lib$spawn()\*(C'\fR, any 
valid \s-1DCL\s0 command string may be specified.  If the string begins with
\&'@', it is treated as a \s-1DCL\s0 command unconditionally.  Otherwise, if
the first token contains a character used as a delimiter in file
specification (e.g. \f(CW\*(C`:\*(C'\fR or \f(CW\*(C`]\*(C'\fR), an attempt is made to expand it
using  a default type of \fI.Exe\fR and the process defaults, and if
successful, the resulting file is invoked via \f(CW\*(C`MCR\*(C'\fR. This allows you
to invoke an image directly simply by passing the file specification
to \f(CW\*(C`system\*(C'\fR, a common Unixish idiom.  If the token has no file type,
and matches a file with null type, then an attempt is made to
determine whether the file is an executable image which should be
invoked using \f(CW\*(C`MCR\*(C'\fR or a text file which should be passed to \s-1DCL\s0
as a command procedure.
.Sp
If \s-1LIST\s0 consists of the empty string, \f(CW\*(C`system\*(C'\fR spawns an
interactive \s-1DCL\s0 subprocess, in the same fashion as typing
\&\fB\s-1SPAWN\s0\fR at the \s-1DCL\s0 prompt.
.Sp
Perl waits for the subprocess to complete before continuing
execution in the current process.  As described in perlfunc,
the return value of \f(CW\*(C`system\*(C'\fR is a fake \*(L"status\*(R" which follows
\&\s-1POSIX\s0 semantics unless the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR is in
effect; see the description of \f(CW$?\fR in this document for more 
detail.
.IP "time" 4
.IX Item "time"
The value returned by \f(CW\*(C`time\*(C'\fR is the offset in seconds from
01\-JAN\-1970 00:00:00 (just like the \s-1CRTL\s0's \fItimes()\fR routine), in order
to make life easier for code coming in from the POSIX/Unix world.
.IP "times" 4
.IX Item "times"
The array returned by the \f(CW\*(C`times\*(C'\fR operator is divided up 
according to the same rules the \s-1CRTL\s0 \f(CW\*(C`times()\*(C'\fR routine.  
Therefore, the \*(L"system time\*(R" elements will always be 0, since 
there is no difference between \*(L"user time\*(R" and \*(L"system\*(R" time 
under \s-1VMS\s0, and the time accumulated by a subprocess may or may 
not appear separately in the \*(L"child time\*(R" field, depending on 
whether \f(CW\*(C`times()\*(C'\fR keeps track of subprocesses separately.  Note
especially that the \s-1VAXCRTL\s0 (at least) keeps track only of
subprocesses spawned using \f(CW\*(C`fork()\*(C'\fR and \f(CW\*(C`exec()\*(C'\fR; it will not
accumulate the times of subprocesses spawned via pipes, \f(CW\*(C`system()\*(C'\fR,
or backticks.
.IP "unlink \s-1LIST\s0" 4
.IX Item "unlink LIST"
\&\f(CW\*(C`unlink\*(C'\fR will delete the highest version of a file only; in
order to delete all versions, you need to say
.Sp
.Vb 1
\&    1 while unlink LIST;
.Ve
.Sp
You may need to make this change to scripts written for a
Unix system which expect that after a call to \f(CW\*(C`unlink\*(C'\fR,
no files with the names passed to \f(CW\*(C`unlink\*(C'\fR will exist.
(Note: This can be changed at compile time; if you
\&\f(CW\*(C`use Config\*(C'\fR and \f(CW$Config{\*(Aqd_unlink_all_versions\*(Aq}\fR is
\&\f(CW\*(C`define\*(C'\fR, then \f(CW\*(C`unlink\*(C'\fR will delete all versions of a
file on the first call.)
.Sp
\&\f(CW\*(C`unlink\*(C'\fR will delete a file if at all possible, even if it
requires changing file protection (though it won't try to
change the protection of the parent directory).  You can tell
whether you've got explicit delete access to a file by using the
\&\f(CW\*(C`VMS::Filespec::candelete\*(C'\fR operator.  For instance, in order
to delete only files to which you have delete access, you could
say something like
.Sp
.Vb 8
\&    sub safe_unlink {
\&        my($file,$num);
\&        foreach $file (@_) {
\&            next unless VMS::Filespec::candelete($file);
\&            $num += unlink $file;
\&        }
\&        $num;
\&    }
.Ve
.Sp
(or you could just use \f(CW\*(C`VMS::Stdio::remove\*(C'\fR, if you've installed
the VMS::Stdio extension distributed with Perl). If \f(CW\*(C`unlink\*(C'\fR has to
change the file protection to delete the file, and you interrupt it
in midstream, the file may be left intact, but with a changed \s-1ACL\s0
allowing you delete access.
.Sp
This behavior of \f(CW\*(C`unlink\*(C'\fR is to be compatible with \s-1POSIX\s0 behavior
and not traditional \s-1VMS\s0 behavior.
.IP "utime \s-1LIST\s0" 4
.IX Item "utime LIST"
This operator changes only the modification time of the file (\s-1VMS\s0 
revision date) on \s-1ODS\-2\s0 volumes and \s-1ODS\-5\s0 volumes without access 
dates enabled. On \s-1ODS\-5\s0 volumes with access dates enabled, the 
true access time is modified.
.IP "waitpid \s-1PID\s0,FLAGS" 4
.IX Item "waitpid PID,FLAGS"
If \s-1PID\s0 is a subprocess started by a piped \f(CW\*(C`open()\*(C'\fR (see open), 
\&\f(CW\*(C`waitpid\*(C'\fR will wait for that subprocess, and return its final status
value in \f(CW$?\fR.  If \s-1PID\s0 is a subprocess created in some other way (e.g.
SPAWNed before Perl was invoked), \f(CW\*(C`waitpid\*(C'\fR will simply check once per
second whether the process has completed, and return when it has.  (If
\&\s-1PID\s0 specifies a process that isn't a subprocess of the current process,
and you invoked Perl with the \f(CW\*(C`\-w\*(C'\fR switch, a warning will be issued.)
.Sp
Returns \s-1PID\s0 on success, \-1 on error.  The \s-1FLAGS\s0 argument is ignored
in all cases.
.SH "Perl variables"
.IX Header "Perl variables"
The following VMS-specific information applies to the indicated
\&\*(L"special\*(R" Perl variables, in addition to the general information
in perlvar.  Where there is a conflict, this information
takes precedence.
.ie n .IP "%ENV" 4
.el .IP "\f(CW%ENV\fR" 4
.IX Item "%ENV"
The operation of the \f(CW%ENV\fR array depends on the translation
of the logical name \fI\s-1PERL_ENV_TABLES\s0\fR.  If defined, it should
be a search list, each element of which specifies a location
for \f(CW%ENV\fR elements.  If you tell Perl to read or set the
element \f(CW\*(C`$ENV{\*(C'\fR\fIname\fR\f(CW\*(C`}\*(C'\fR, then Perl uses the translations of
\&\fI\s-1PERL_ENV_TABLES\s0\fR as follows:
.RS 4
.IP "\s-1CRTL_ENV\s0" 4
.IX Item "CRTL_ENV"
This string tells Perl to consult the \s-1CRTL\s0's internal \f(CW\*(C`environ\*(C'\fR
array of key-value pairs, using \fIname\fR as the key.  In most cases,
this contains only a few keys, but if Perl was invoked via the C
\&\f(CW\*(C`exec[lv]e()\*(C'\fR function, as is the case for \s-1CGI\s0 processing by some
\&\s-1HTTP\s0 servers, then the \f(CW\*(C`environ\*(C'\fR array may have been populated by
the calling program.
.IP "CLISYM_[\s-1LOCAL\s0]" 4
.IX Item "CLISYM_[LOCAL]"
A string beginning with \f(CW\*(C`CLISYM_\*(C'\fRtells Perl to consult the \s-1CLI\s0's
symbol tables, using \fIname\fR as the name of the symbol.  When reading
an element of \f(CW%ENV\fR, the local symbol table is scanned first, followed
by the global symbol table..  The characters following \f(CW\*(C`CLISYM_\*(C'\fR are
significant when an element of \f(CW%ENV\fR is set or deleted: if the
complete string is \f(CW\*(C`CLISYM_LOCAL\*(C'\fR, the change is made in the local
symbol table; otherwise the global symbol table is changed.
.IP "Any other string" 4
.IX Item "Any other string"
If an element of \fI\s-1PERL_ENV_TABLES\s0\fR translates to any other string,
that string is used as the name of a logical name table, which is
consulted using \fIname\fR as the logical name.  The normal search
order of access modes is used.
.RE
.RS 4
.Sp
\&\fI\s-1PERL_ENV_TABLES\s0\fR is translated once when Perl starts up; any changes
you make while Perl is running do not affect the behavior of \f(CW%ENV\fR.
If \fI\s-1PERL_ENV_TABLES\s0\fR is not defined, then Perl defaults to consulting
first the logical name tables specified by \fI\s-1LNM$FILE_DEV\s0\fR, and then
the \s-1CRTL\s0 \f(CW\*(C`environ\*(C'\fR array.
.Sp
In all operations on \f(CW%ENV\fR, the key string is treated as if it 
were entirely uppercase, regardless of the case actually 
specified in the Perl expression.
.Sp
When an element of \f(CW%ENV\fR is read, the locations to which
\&\fI\s-1PERL_ENV_TABLES\s0\fR points are checked in order, and the value
obtained from the first successful lookup is returned.  If the
name of the \f(CW%ENV\fR element contains a semi-colon, it and
any characters after it are removed.  These are ignored when
the \s-1CRTL\s0 \f(CW\*(C`environ\*(C'\fR array or a \s-1CLI\s0 symbol table is consulted.
However, the name is looked up in a logical name table, the
suffix after the semi-colon is treated as the translation index
to be used for the lookup.   This lets you look up successive values
for search list logical names.  For instance, if you say
.Sp
.Vb 3
\&   $  Define STORY  once,upon,a,time,there,was
\&   $  perl \-e "for ($i = 0; $i <= 6; $i++) " \-
\&   _$ \-e "{ print $ENV{\*(Aqstory;\*(Aq.$i},\*(Aq \*(Aq}"
.Ve
.Sp
Perl will print \f(CW\*(C`ONCE UPON A TIME THERE WAS\*(C'\fR, assuming, of course,
that \fI\s-1PERL_ENV_TABLES\s0\fR is set up so that the logical name \f(CW\*(C`story\*(C'\fR
is found, rather than a \s-1CLI\s0 symbol or \s-1CRTL\s0 \f(CW\*(C`environ\*(C'\fR element with
the same name.
.Sp
When an element of \f(CW%ENV\fR is set to a defined string, the
corresponding definition is made in the location to which the
first translation of \fI\s-1PERL_ENV_TABLES\s0\fR points.  If this causes a
logical name to be created, it is defined in supervisor mode.
(The same is done if an existing logical name was defined in
executive or kernel mode; an existing user or supervisor mode
logical name is reset to the new value.)  If the value is an empty
string, the logical name's translation is defined as a single \s-1NUL\s0
(\s-1ASCII\s0 00) character, since a logical name cannot translate to a
zero-length string.  (This restriction does not apply to \s-1CLI\s0 symbols
or \s-1CRTL\s0 \f(CW\*(C`environ\*(C'\fR values; they are set to the empty string.)
An element of the \s-1CRTL\s0 \f(CW\*(C`environ\*(C'\fR array can be set only if your
copy of Perl knows about the \s-1CRTL\s0's \f(CW\*(C`setenv()\*(C'\fR function.  (This is
present only in some versions of the \s-1DECCRTL\s0; check \f(CW$Config{d_setenv}\fR
to see whether your copy of Perl was built with a \s-1CRTL\s0 that has this
function.)
.Sp
When an element of \f(CW%ENV\fR is set to \f(CW\*(C`undef\*(C'\fR,
the element is looked up as if it were being read, and if it is
found, it is deleted.  (An item \*(L"deleted\*(R" from the \s-1CRTL\s0 \f(CW\*(C`environ\*(C'\fR
array is set to the empty string; this can only be done if your
copy of Perl knows about the \s-1CRTL\s0 \f(CW\*(C`setenv()\*(C'\fR function.)  Using
\&\f(CW\*(C`delete\*(C'\fR to remove an element from \f(CW%ENV\fR has a similar effect,
but after the element is deleted, another attempt is made to
look up the element, so an inner-mode logical name or a name in
another location will replace the logical name just deleted.
In either case, only the first value found searching \s-1PERL_ENV_TABLES\s0
is altered.  It is not possible at present to define a search list
logical name via \f(CW%ENV\fR.
.Sp
The element \f(CW$ENV{DEFAULT}\fR is special: when read, it returns
Perl's current default device and directory, and when set, it
resets them, regardless of the definition of \fI\s-1PERL_ENV_TABLES\s0\fR.
It cannot be cleared or deleted; attempts to do so are silently
ignored.
.Sp
Note that if you want to pass on any elements of the
C\-local environ array to a subprocess which isn't
started by fork/exec, or isn't running a C program, you
can \*(L"promote\*(R" them to logical names in the current
process, which will then be inherited by all subprocesses,
by saying
.Sp
.Vb 4
\&    foreach my $key (qw[C\-local keys you want promoted]) {
\&        my $temp = $ENV{$key}; # read from C\-local array
\&        $ENV{$key} = $temp;    # and define as logical name
\&    }
.Ve
.Sp
(You can't just say \f(CW$ENV{$key} = $ENV{$key}\fR, since the
Perl optimizer is smart enough to elide the expression.)
.Sp
Don't try to clear \f(CW%ENV\fR by saying \f(CW\*(C`%ENV = ();\*(C'\fR, it will throw
a fatal error.  This is equivalent to doing the following from \s-1DCL:\s0
.Sp
.Vb 1
\&    DELETE/LOGICAL *
.Ve
.Sp
You can imagine how bad things would be if, for example, the \s-1SYS$MANAGER\s0
or \s-1SYS$SYSTEM\s0 logical names were deleted.
.Sp
At present, the first time you iterate over \f(CW%ENV\fR using
\&\f(CW\*(C`keys\*(C'\fR, or \f(CW\*(C`values\*(C'\fR,  you will incur a time penalty as all
logical names are read, in order to fully populate \f(CW%ENV\fR.
Subsequent iterations will not reread logical names, so they
won't be as slow, but they also won't reflect any changes
to logical name tables caused by other programs.
.Sp
You do need to be careful with the logical names representing
process-permanent files, such as \f(CW\*(C`SYS$INPUT\*(C'\fR and \f(CW\*(C`SYS$OUTPUT\*(C'\fR.
The translations for these logical names are prepended with a
two-byte binary value (0x1B 0x00) that needs to be stripped off
if you wantto use it. (In previous versions of Perl it wasn't
possible to get the values of these logical names, as the null
byte acted as an end-of-string marker)
.RE
.IP "$!" 4
The string value of \f(CW$!\fR is that returned by the \s-1CRTL\s0's
\&\fIstrerror()\fR function, so it will include the \s-1VMS\s0 message for
VMS-specific errors.  The numeric value of \f(CW$!\fR is the
value of \f(CW\*(C`errno\*(C'\fR, except if errno is \s-1EVMSERR\s0, in which
case \f(CW$!\fR contains the value of vaxc$errno.  Setting \f(CW$!\fR
always sets errno to the value specified.  If this value is
\&\s-1EVMSERR\s0, it also sets vaxc$errno to 4 (NONAME-F-NOMSG), so
that the string value of \f(CW$!\fR won't reflect the \s-1VMS\s0 error
message from before \f(CW$!\fR was set.
.IP "$^E" 4
.IX Item "$^E"
This variable provides direct access to \s-1VMS\s0 status values
in vaxc$errno, which are often more specific than the
generic Unix-style error messages in \f(CW$!\fR.  Its numeric value
is the value of vaxc$errno, and its string value is the
corresponding \s-1VMS\s0 message string, as retrieved by sys$\fIgetmsg()\fR.
Setting \f(CW$^E\fR sets vaxc$errno to the value specified.
.Sp
While Perl attempts to keep the vaxc$errno value to be current, if
errno is not \s-1EVMSERR\s0, it may not be from the current operation.
.IP "$?" 4
The \*(L"status value\*(R" returned in \f(CW$?\fR is synthesized from the
actual exit status of the subprocess in a way that approximates
\&\s-1POSIX\s0 \fIwait\fR\|(5) semantics, in order to allow Perl programs to
portably test for successful completion of subprocesses.  The
low order 8 bits of \f(CW$?\fR are always 0 under \s-1VMS\s0, since the
termination status of a process may or may not have been
generated by an exception.
.Sp
The next 8 bits contain the termination status of the program.
.Sp
If the child process follows the convention of C programs
compiled with the _POSIX_EXIT macro set, the status value will
contain the actual value of 0 to 255 returned by that program
on a normal exit.
.Sp
With the _POSIX_EXIT macro set, the Unix exit value of zero is
represented as a \s-1VMS\s0 native status of 1, and the Unix values
from 2 to 255 are encoded by the equation:
.Sp
.Vb 1
\&   VMS_status = 0x35a000 + (unix_value * 8) + 1.
.Ve
.Sp
And in the special case of Unix value 1 the encoding is:
.Sp
.Vb 1
\&   VMS_status = 0x35a000 + 8 + 2 + 0x10000000.
.Ve
.Sp
For other termination statuses, the severity portion of the
subprocess's exit status is used: if the severity was success or
informational, these bits are all 0; if the severity was
warning, they contain a value of 1; if the severity was
error or fatal error, they contain the actual severity bits,
which turns out to be a value of 2 for error and 4 for severe_error.
Fatal is another term for the severe_error status.
.Sp
As a result, \f(CW$?\fR will always be zero if the subprocess's exit
status indicated successful completion, and non-zero if a
warning or error occurred or a program compliant with encoding
_POSIX_EXIT values was run and set a status.
.Sp
How can you tell the difference between a non-zero status that is
the result of a \s-1VMS\s0 native error status or an encoded Unix status?
You can not unless you look at the ${^CHILD_ERROR_NATIVE} value.
The ${^CHILD_ERROR_NATIVE} value returns the actual \s-1VMS\s0 status value
and check the severity bits. If the severity bits are equal to 1,
then if the numeric value for \f(CW$?\fR is between 2 and 255 or 0, then
\&\f(CW$?\fR accurately reflects a value passed back from a Unix application.
If \f(CW$?\fR is 1, and the severity bits indicate a \s-1VMS\s0 error (2), then
\&\f(CW$?\fR is from a Unix application exit value.
.Sp
In practice, Perl scripts that call programs that return _POSIX_EXIT
type status values will be expecting those values, and programs that
call traditional \s-1VMS\s0 programs will either be expecting the previous
behavior or just checking for a non-zero status.
.Sp
And success is always the value 0 in all behaviors.
.Sp
When the actual \s-1VMS\s0 termination status of the child is an error,
internally the \f(CW$!\fR value will be set to the closest Unix errno
value to that error so that Perl scripts that test for error
messages will see the expected Unix style error message instead
of a \s-1VMS\s0 message.
.Sp
Conversely, when setting \f(CW$?\fR in an \s-1END\s0 block, an attempt is made
to convert the \s-1POSIX\s0 value into a native status intelligible to
the operating system upon exiting Perl.  What this boils down to
is that setting \f(CW$?\fR to zero results in the generic success value
\&\s-1SS$_NORMAL\s0, and setting \f(CW$?\fR to a non-zero value results in the
generic failure status \s-1SS$_ABORT\s0.  See also \*(L"exit\*(R" in perlport.
.Sp
With the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name defined as \*(L"\s-1ENABLE\s0\*(R",
setting \f(CW$?\fR will cause the new value to be encoded into \f(CW$^E\fR
so that either the original parent or child exit status values 
 0 to 255 can be automatically recovered by C programs expecting
_POSIX_EXIT behavior.  If both a parent and a child exit value are
non-zero, then it will be assumed that this is actually a \s-1VMS\s0 native
status value to be passed through.  The special value of 0xFFFF is
almost a \s-1NOOP\s0 as it will cause the current native \s-1VMS\s0 status in the
C library to become the current native Perl \s-1VMS\s0 status, and is handled
this way as it is known to not be a valid native \s-1VMS\s0 status value.
It is recommend that only values in the range of normal Unix parent or
child status numbers, 0 to 255 are used.
.Sp
The pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR makes \f(CW$?\fR reflect the actual 
\&\s-1VMS\s0 exit status instead of the default emulation of \s-1POSIX\s0 status 
described above.  This pragma also disables the conversion of
non-zero values to \s-1SS$_ABORT\s0 when setting \f(CW$?\fR in an \s-1END\s0
block (but zero will still be converted to \s-1SS$_NORMAL\s0).
.Sp
Do not use the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR with \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR
enabled, as they are at times requesting conflicting actions and the
consequence of ignoring this advice will be undefined to allow future
improvements in the \s-1POSIX\s0 exit handling.
.Sp
In general, with \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR enabled, more detailed information
will be available in the exit status for \s-1DCL\s0 scripts or other native \s-1VMS\s0 tools,
and will give the expected information for Posix programs.  It has not been
made the default in order to preserve backward compatibility.
.Sp
N.B. Setting \f(CW\*(C`DECC$FILENAME_UNIX_REPORT\*(C'\fR implicitly enables 
\&\f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR.
.IP "$|" 4
Setting \f(CW$|\fR for an I/O stream causes data to be flushed
all the way to disk on each write (\fIi.e.\fR not just to
the underlying \s-1RMS\s0 buffers for a file).  In other words,
it's equivalent to calling \fIfflush()\fR and \fIfsync()\fR from C.
.SH "Standard modules with VMS-specific differences"
.IX Header "Standard modules with VMS-specific differences"
.SS "SDBM_File"
.IX Subsection "SDBM_File"
SDBM_File works properly on \s-1VMS\s0. It has, however, one minor
difference. The database directory file created has a \fI.sdbm_dir\fR
extension rather than a \fI.dir\fR extension. \fI.dir\fR files are \s-1VMS\s0 filesystem
directory files, and using them for other purposes could cause unacceptable
problems.
.SH "Revision date"
.IX Header "Revision date"
Please see the git repository for revision history.
.SH "AUTHOR"
.IX Header "AUTHOR"
Charles Bailey  bailey@cor.newman.upenn.edu
Craig Berry  craigberry@mac.com
Dan Sugalski  dan@sidhe.org
John Malmberg wb8tyw@qsl.net
                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvms5.18.1                                0100644 0001750 0001750 00000176103 12566207450 022753  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVMS 1"
.TH PERLVMS 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvms \- VMS\-specific documentation for Perl
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Gathered below are notes describing details of Perl 5's 
behavior on \s-1VMS. \s0 They are a supplement to the regular Perl 5 
documentation, so we have focussed on the ways in which Perl 
5 functions differently under \s-1VMS\s0 than it does under Unix, 
and on the interactions between Perl and the rest of the 
operating system.  We haven't tried to duplicate complete 
descriptions of Perl features from the main Perl 
documentation, which can be found in the \fI[.pod]\fR 
subdirectory of the Perl distribution.
.PP
We hope these notes will save you from confusion and lost 
sleep when writing Perl scripts on \s-1VMS. \s0 If you find we've 
missed something you think should appear here, please don't 
hesitate to drop a line to vmsperl@perl.org.
.SH "Installation"
.IX Header "Installation"
Directions for building and installing Perl 5 can be found in 
the file \fI\s-1README\s0.vms\fR in the main source directory of the 
Perl distribution..
.SH "Organization of Perl Images"
.IX Header "Organization of Perl Images"
.SS "Core Images"
.IX Subsection "Core Images"
During the installation process, three Perl images are produced.
\&\fIMiniperl.Exe\fR is an executable image which contains all of
the basic functionality of Perl, but cannot take advantage of
Perl extensions.  It is used to generate several files needed
to build the complete Perl and various extensions.  Once you've
finished installing Perl, you can delete this image.
.PP
Most of the complete Perl resides in the shareable image
\&\fIPerlShr.Exe\fR, which provides a core to which the Perl executable
image and all Perl extensions are linked.  You should place this
image in \fISys$Share\fR, or define the logical name \fIPerlShr\fR to
translate to the full file specification of this image.  It should
be world readable.  (Remember that if a user has execute only access
to \fIPerlShr\fR, \s-1VMS\s0 will treat it as if it were a privileged shareable
image, and will therefore require all downstream shareable images to be
INSTALLed, etc.)
.PP
Finally, \fIPerl.Exe\fR is an executable image containing the main
entry point for Perl, as well as some initialization code.  It
should be placed in a public directory, and made world executable.
In order to run Perl with command line arguments, you should
define a foreign command to invoke this image.
.SS "Perl Extensions"
.IX Subsection "Perl Extensions"
Perl extensions are packages which provide both \s-1XS\s0 and Perl code
to add new functionality to perl.  (\s-1XS\s0 is a meta-language which
simplifies writing C code which interacts with Perl, see
perlxs for more details.)  The Perl code for an
extension is treated like any other library module \- it's
made available in your script through the appropriate
\&\f(CW\*(C`use\*(C'\fR or \f(CW\*(C`require\*(C'\fR statement, and usually defines a Perl
package containing the extension.
.PP
The portion of the extension provided by the \s-1XS\s0 code may be
connected to the rest of Perl in either of two ways.  In the
\&\fBstatic\fR configuration, the object code for the extension is
linked directly into \fIPerlShr.Exe\fR, and is initialized whenever
Perl is invoked.  In the \fBdynamic\fR configuration, the extension's
machine code is placed into a separate shareable image, which is
mapped by Perl's DynaLoader when the extension is \f(CW\*(C`use\*(C'\fRd or
\&\f(CW\*(C`require\*(C'\fRd in your script.  This allows you to maintain the
extension as a separate entity, at the cost of keeping track of the
additional shareable image.  Most extensions can be set up as either
static or dynamic.
.PP
The source code for an extension usually resides in its own
directory.  At least three files are generally provided:
\&\fIExtshortname\fR\fI.xs\fR (where \fIExtshortname\fR is the portion of
the extension's name following the last \f(CW\*(C`::\*(C'\fR), containing
the \s-1XS\s0 code, \fIExtshortname\fR\fI.pm\fR, the Perl library module
for the extension, and \fIMakefile.PL\fR, a Perl script which uses
the \f(CW\*(C`MakeMaker\*(C'\fR library modules supplied with Perl to generate
a \fIDescrip.MMS\fR file for the extension.
.SS "Installing static extensions"
.IX Subsection "Installing static extensions"
Since static extensions are incorporated directly into
\&\fIPerlShr.Exe\fR, you'll have to rebuild Perl to incorporate a
new extension.  You should edit the main \fIDescrip.MMS\fR or \fIMakefile\fR
you use to build Perl, adding the extension's name to the \f(CW\*(C`ext\*(C'\fR
macro, and the extension's object file to the \f(CW\*(C`extobj\*(C'\fR macro.
You'll also need to build the extension's object file, either
by adding dependencies to the main \fIDescrip.MMS\fR, or using a
separate \fIDescrip.MMS\fR for the extension.  Then, rebuild
\&\fIPerlShr.Exe\fR to incorporate the new code.
.PP
Finally, you'll need to copy the extension's Perl library
module to the \fI[.\fR\fIExtname\fR\fI]\fR subdirectory under one
of the directories in \f(CW@INC\fR, where \fIExtname\fR is the name
of the extension, with all \f(CW\*(C`::\*(C'\fR replaced by \f(CW\*(C`.\*(C'\fR (e.g.
the library module for extension Foo::Bar would be copied
to a \fI[.Foo.Bar]\fR subdirectory).
.SS "Installing dynamic extensions"
.IX Subsection "Installing dynamic extensions"
In general, the distributed kit for a Perl extension includes
a file named Makefile.PL, which is a Perl program which is used
to create a \fIDescrip.MMS\fR file which can be used to build and
install the files required by the extension.  The kit should be
unpacked into a directory tree \fBnot\fR under the main Perl source
directory, and the procedure for building the extension is simply
.PP
.Vb 4
\&    $ perl Makefile.PL  ! Create Descrip.MMS
\&    $ mmk               ! Build necessary files
\&    $ mmk test          ! Run test code, if supplied
\&    $ mmk install       ! Install into public Perl tree
.Ve
.PP
\&\fIN.B.\fR The procedure by which extensions are built and
tested creates several levels (at least 4) under the
directory in which the extension's source files live.
For this reason if you are running a version of \s-1VMS\s0 prior
to V7.1 you shouldn't nest the source directory
too deeply in your directory structure lest you exceed \s-1RMS\s0'
maximum of 8 levels of subdirectory in a filespec.  (You
can use rooted logical names to get another 8 levels of
nesting, if you can't place the files near the top of
the physical directory structure.)
.PP
\&\s-1VMS\s0 support for this process in the current release of Perl
is sufficient to handle most extensions.  However, it does
not yet recognize extra libraries required to build shareable
images which are part of an extension, so these must be added
to the linker options file for the extension by hand.  For
instance, if the \fI\s-1PGPLOT\s0\fR extension to Perl requires the
\&\fI\s-1PGPLOTSHR.EXE\s0\fR shareable image in order to properly link
the Perl extension, then the line \f(CW\*(C`PGPLOTSHR/Share\*(C'\fR must
be added to the linker options file \fI\s-1PGPLOT\s0.Opt\fR produced
during the build process for the Perl extension.
.PP
By default, the shareable image for an extension is placed in
the \fI[.lib.site_perl.auto\fR\fIArch\fR.\fIExtname\fR\fI]\fR directory of the
installed Perl directory tree (where \fIArch\fR is \fI\s-1VMS_VAX\s0\fR or
\&\fI\s-1VMS_AXP\s0\fR, and \fIExtname\fR is the name of the extension, with
each \f(CW\*(C`::\*(C'\fR translated to \f(CW\*(C`.\*(C'\fR).  (See the MakeMaker documentation
for more details on installation options for extensions.)
However, it can be manually placed in any of several locations:
.IP "\(bu" 4
the \fI[.Lib.Auto.\fR\fIArch\fR\fI\f(CI$PVers\fI\fR\fIExtname\fR\fI]\fR subdirectory
of one of the directories in \f(CW@INC\fR (where \fIPVers\fR
is the version of Perl you're using, as supplied in \f(CW$]\fR,
with '.' converted to '_'), or
.IP "\(bu" 4
one of the directories in \f(CW@INC\fR, or
.IP "\(bu" 4
a directory which the extensions Perl library module
passes to the DynaLoader when asking it to map
the shareable image, or
.IP "\(bu" 4
\&\fISys$Share\fR or \fISys$Library\fR.
.PP
If the shareable image isn't in any of these places, you'll need
to define a logical name \fIExtshortname\fR, where \fIExtshortname\fR
is the portion of the extension's name after the last \f(CW\*(C`::\*(C'\fR, which
translates to the full file specification of the shareable image.
.SH "File specifications"
.IX Header "File specifications"
.SS "Syntax"
.IX Subsection "Syntax"
We have tried to make Perl aware of both VMS-style and Unix-style file
specifications wherever possible.  You may use either style, or both,
on the command line and in scripts, but you may not combine the two
styles within a single file specification.  \s-1VMS\s0 Perl interprets Unix
pathnames in much the same way as the \s-1CRTL \s0(\fIe.g.\fR the first component
of an absolute path is read as the device name for the \s-1VMS\s0 file
specification).  There are a set of functions provided in the
\&\f(CW\*(C`VMS::Filespec\*(C'\fR package for explicit interconversion between \s-1VMS\s0 and
Unix syntax; its documentation provides more details.
.PP
We've tried to minimize the dependence of Perl library
modules on Unix syntax, but you may find that some of these,
as well as some scripts written for Unix systems, will
require that you use Unix syntax, since they will assume that
\&'/' is the directory separator, \fIetc.\fR  If you find instances
of this in the Perl distribution itself, please let us know,
so we can try to work around them.
.PP
Also when working on Perl programs on \s-1VMS,\s0 if you need a syntax
in a specific operating system format, then you need either to
check the appropriate \s-1DECC$\s0 feature logical, or call a conversion
routine to force it to that format.
.PP
The feature logical name \s-1DECC$FILENAME_UNIX_REPORT\s0 modifies traditional
Perl behavior in the conversion of file specifications from Unix to \s-1VMS\s0
format in order to follow the extended character handling rules now
expected by the \s-1CRTL. \s0 Specifically, when this feature is in effect, the
\&\f(CW\*(C`./.../\*(C'\fR in a Unix path is now translated to \f(CW\*(C`[.^.^.^.]\*(C'\fR instead of
the traditional \s-1VMS \s0\f(CW\*(C`[...]\*(C'\fR.  To be compatible with what MakeMaker
expects, if a \s-1VMS\s0 path cannot be translated to a Unix path, it is
passed through unchanged, so \f(CW\*(C`unixify("[...]")\*(C'\fR will return \f(CW\*(C`[...]\*(C'\fR.
.PP
The handling of extended characters is largely complete in the
VMS-specific C infrastructure of Perl, but more work is still needed to
fully support extended syntax filenames in several core modules.  In
particular, at this writing PathTools has only partial support for
directories containing some extended characters.
.PP
There are several ambiguous cases where a conversion routine cannot
determine whether an input filename is in Unix format or in \s-1VMS\s0 format,
since now both \s-1VMS\s0 and Unix file specifications may have characters in
them that could be mistaken for syntax delimiters of the other type. So
some pathnames simply cannot be used in a mode that allows either type
of pathname to be present.  Perl will tend to assume that an ambiguous
filename is in Unix format.
.PP
Allowing \*(L".\*(R" as a version delimiter is simply incompatible with
determining whether a pathname is in \s-1VMS\s0 format or in Unix format with
extended file syntax.  There is no way to know whether \*(L"perl\-5.8.6\*(R" is a
Unix \*(L"perl\-5.8.6\*(R" or a \s-1VMS \s0\*(L"perl\-5.8;6\*(R" when passing it to \fIunixify()\fR or
\&\fIvmsify()\fR.
.PP
The \s-1DECC$FILENAME_UNIX_REPORT\s0 logical name controls how Perl interprets
filenames to the extent that Perl uses the \s-1CRTL\s0 internally for many
purposes, and attempts to follow \s-1CRTL\s0 conventions for reporting
filenames.  The \s-1DECC$FILENAME_UNIX_ONLY\s0 feature differs in that it
expects all filenames passed to the C run-time to be already in Unix
format.  This feature is not yet supported in Perl since Perl uses
traditional OpenVMS file specifications internally and in the test
harness, and it is not yet clear whether this mode will be useful or
useable.  The feature logical name \s-1DECC$POSIX_COMPLIANT_PATHNAMES\s0 is new
with the \s-1RMS\s0 Symbolic Link \s-1SDK\s0 and included with OpenVMS v8.3, but is
not yet supported in Perl.
.SS "Filename Case"
.IX Subsection "Filename Case"
Perl follows \s-1VMS\s0 defaults and override settings in preserving (or not
preserving) filename case.  Case is not preserved on \s-1ODS\-2\s0 formatted
volumes on any architecture.  On \s-1ODS\-5\s0 volumes, filenames may be case
preserved depending on process and feature settings.  Perl now honors
\&\s-1DECC$EFS_CASE_PRESERVE\s0 and \s-1DECC$ARGV_PARSE_STYLE\s0 on those systems where
the \s-1CRTL\s0 supports these features.  When these features are not enabled
or the \s-1CRTL\s0 does not support them, Perl follows the traditional \s-1CRTL\s0
behavior of downcasing command-line arguments and returning file
specifications in lower case only.
.PP
\&\fIN. B.\fR  It is very easy to get tripped up using a mixture of other
programs, external utilities, and Perl scripts that are in varying
states of being able to handle case preservation.  For example, a file
created by an older version of an archive utility or a build utility
such as \s-1MMK\s0 or \s-1MMS\s0 may generate a filename in all upper case even on an
\&\s-1ODS\-5\s0 volume.  If this filename is later retrieved by a Perl script or
module in a case preserving environment, that upper case name may not
match the mixed-case or lower-case exceptions of the Perl code.  Your
best bet is to follow an all-or-nothing approach to case preservation:
either don't use it at all, or make sure your entire toolchain and
application environment support and use it.
.PP
OpenVMS Alpha v7.3\-1 and later and all version of OpenVMS I64 support
case sensitivity as a process setting (see \f(CW\*(C`SET PROCESS
/CASE_LOOKUP=SENSITIVE\*(C'\fR). Perl does not currently support case
sensitivity on \s-1VMS,\s0 but it may in the future, so Perl programs should
use the \f(CW\*(C`File::Spec\->case_tolerant\*(C'\fR method to determine the state, and
not the \f(CW$^O\fR variable.
.SS "Symbolic Links"
.IX Subsection "Symbolic Links"
When built on an \s-1ODS\-5\s0 volume with symbolic links enabled, Perl by
default supports symbolic links when the requisite support is available
in the filesystem and \s-1CRTL \s0(generally 64\-bit OpenVMS v8.3 and later). 
There are a number of limitations and caveats to be aware of when
working with symbolic links on \s-1VMS. \s0 Most notably, the target of a valid
symbolic link must be expressed as a Unix-style path and it must exist
on a volume visible from your \s-1POSIX\s0 root (see the \f(CW\*(C`SHOW ROOT\*(C'\fR command
in \s-1DCL\s0 help).  For further details on symbolic link capabilities and
requirements, see chapter 12 of the \s-1CRTL\s0 manual that ships with OpenVMS
v8.3 or later.
.SS "Wildcard expansion"
.IX Subsection "Wildcard expansion"
File specifications containing wildcards are allowed both on 
the command line and within Perl globs (e.g. \f(CW\*(C`<*.c>\*(C'\fR).  If
the wildcard filespec uses \s-1VMS\s0 syntax, the resultant 
filespecs will follow \s-1VMS\s0 syntax; if a Unix-style filespec is 
passed in, Unix-style filespecs will be returned.
Similar to the behavior of wildcard globbing for a Unix shell,
one can escape command line wildcards with double quotation
marks \f(CW\*(C`"\*(C'\fR around a perl program command line argument.  However,
owing to the stripping of \f(CW\*(C`"\*(C'\fR characters carried out by the C
handling of argv you will need to escape a construct such as
this one (in a directory containing the files \fI\s-1PERL.C\s0\fR, \fI\s-1PERL.EXE\s0\fR,
\&\fI\s-1PERL.H\s0\fR, and \fI\s-1PERL.OBJ\s0\fR):
.PP
.Vb 2
\&    $ perl \-e "print join(\*(Aq \*(Aq,@ARGV)" perl.*
\&    perl.c perl.exe perl.h perl.obj
.Ve
.PP
in the following triple quoted manner:
.PP
.Vb 2
\&    $ perl \-e "print join(\*(Aq \*(Aq,@ARGV)" """perl.*"""
\&    perl.*
.Ve
.PP
In both the case of unquoted command line arguments or in calls
to \f(CW\*(C`glob()\*(C'\fR \s-1VMS\s0 wildcard expansion is performed. (csh-style
wildcard expansion is available if you use \f(CW\*(C`File::Glob::glob\*(C'\fR.)
If the wildcard filespec contains a device or directory 
specification, then the resultant filespecs will also contain 
a device and directory; otherwise, device and directory 
information are removed.  VMS-style resultant filespecs will 
contain a full device and directory, while Unix-style 
resultant filespecs will contain only as much of a directory 
path as was present in the input filespec.  For example, if 
your default directory is Perl_Root:[000000], the expansion 
of \f(CW\*(C`[.t]*.*\*(C'\fR will yield filespecs  like 
\&\*(L"perl_root:[t]base.dir\*(R", while the expansion of \f(CW\*(C`t/*/*\*(C'\fR will 
yield filespecs like \*(L"t/base.dir\*(R".  (This is done to match 
the behavior of glob expansion performed by Unix shells.)
.PP
Similarly, the resultant filespec will contain the file version
only if one was present in the input filespec.
.SS "Pipes"
.IX Subsection "Pipes"
Input and output pipes to Perl filehandles are supported; the 
\&\*(L"file name\*(R" is passed to lib$\fIspawn()\fR for asynchronous 
execution.  You should be careful to close any pipes you have 
opened in a Perl script, lest you leave any \*(L"orphaned\*(R" 
subprocesses around when Perl exits.
.PP
You may also use backticks to invoke a \s-1DCL\s0 subprocess, whose 
output is used as the return value of the expression.  The 
string between the backticks is handled as if it were the
argument to the \f(CW\*(C`system\*(C'\fR operator (see below).  In this case,
Perl will wait for the subprocess to complete before continuing.
.PP
The mailbox (\s-1MBX\s0) that perl can create to communicate with a pipe
defaults to a buffer size of 8192 on 64\-bit systems, 512 on \s-1VAX. \s0 The
default buffer size is adjustable via the logical name \s-1PERL_MBX_SIZE\s0
provided that the value falls between 128 and the \s-1SYSGEN\s0 parameter
\&\s-1MAXBUF\s0 inclusive.  For example, to set the mailbox size to 32767 use
\&\f(CW\*(C`$ENV{\*(AqPERL_MBX_SIZE\*(Aq} = 32767;\*(C'\fR and then open and use pipe constructs. 
An alternative would be to issue the command:
.PP
.Vb 1
\&    $ Define PERL_MBX_SIZE 32767
.Ve
.PP
before running your wide record pipe program.  A larger value may
improve performance at the expense of the \s-1BYTLM UAF\s0 quota.
.SH "PERL5LIB and PERLLIB"
.IX Header "PERL5LIB and PERLLIB"
The \s-1PERL5LIB\s0 and \s-1PERLLIB\s0 logical names work as documented in perl,
except that the element separator is '|' instead of ':'.  The
directory specifications may use either \s-1VMS\s0 or Unix syntax.
.SH "The Perl Forked Debugger"
.IX Header "The Perl Forked Debugger"
The Perl forked debugger places the debugger commands and output in a
separate X\-11 terminal window so that commands and output from multiple
processes are not mixed together.
.PP
Perl on \s-1VMS\s0 supports an emulation of the forked debugger when Perl is
run on a \s-1VMS\s0 system that has X11 support installed.
.PP
To use the forked debugger, you need to have the default display set to an
X\-11 Server and some environment variables set that Unix expects.
.PP
The forked debugger requires the environment variable \f(CW\*(C`TERM\*(C'\fR to be \f(CW\*(C`xterm\*(C'\fR,
and the environment variable \f(CW\*(C`DISPLAY\*(C'\fR to exist.  \f(CW\*(C`xterm\*(C'\fR must be in
lower case.
.PP
.Vb 1
\&  $define TERM "xterm"
\&
\&  $define DISPLAY "hostname:0.0"
.Ve
.PP
Currently the value of \f(CW\*(C`DISPLAY\*(C'\fR is ignored.  It is recommended that it be set
to be the hostname of the display, the server and screen in Unix notation.  In
the future the value of \s-1DISPLAY\s0 may be honored by Perl instead of using the
default display.
.PP
It may be helpful to always use the forked debugger so that script I/O is
separated from debugger I/O.  You can force the debugger to be forked by
assigning a value to the logical name <\s-1PERLDB_PIDS\s0> that is not a process
identification number.
.PP
.Vb 1
\&  $define PERLDB_PIDS XXXX
.Ve
.SH "PERL_VMS_EXCEPTION_DEBUG"
.IX Header "PERL_VMS_EXCEPTION_DEBUG"
The \s-1PERL_VMS_EXCEPTION_DEBUG\s0 being defined as \*(L"\s-1ENABLE\*(R"\s0 will cause the \s-1VMS\s0
debugger to be invoked if a fatal exception that is not otherwise
handled is raised.  The purpose of this is to allow debugging of
internal Perl problems that would cause such a condition.
.PP
This allows the programmer to look at the execution stack and variables to
find out the cause of the exception.  As the debugger is being invoked as
the Perl interpreter is about to do a fatal exit, continuing the execution
in debug mode is usually not practical.
.PP
Starting Perl in the \s-1VMS\s0 debugger may change the program execution
profile in a way that such problems are not reproduced.
.PP
The \f(CW\*(C`kill\*(C'\fR function can be used to test this functionality from within
a program.
.PP
In typical \s-1VMS\s0 style, only the first letter of the value of this logical
name is actually checked in a case insensitive mode, and it is considered
enabled if it is the value \*(L"T\*(R",\*(L"1\*(R" or \*(L"E\*(R".
.PP
This logical name must be defined before Perl is started.
.SH "Command line"
.IX Header "Command line"
.SS "I/O redirection and backgrounding"
.IX Subsection "I/O redirection and backgrounding"
Perl for \s-1VMS\s0 supports redirection of input and output on the 
command line, using a subset of Bourne shell syntax:
.IP "\(bu" 4
\&\f(CW\*(C`<file\*(C'\fR reads stdin from \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`>file\*(C'\fR writes stdout to \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`>>file\*(C'\fR appends stdout to \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`2>file\*(C'\fR writes stderr to \f(CW\*(C`file\*(C'\fR,
.IP "\(bu" 4
\&\f(CW\*(C`2>>file\*(C'\fR appends stderr to \f(CW\*(C`file\*(C'\fR, and
.IP "\(bu" 4
\&\f(CW\*(C`2>&1\*(C'\fR redirects stderr to stdout.
.PP
In addition, output may be piped to a subprocess, using the  
character '|'.  Anything after this character on the command 
line is passed to a subprocess for execution; the subprocess 
takes the output of Perl as its input.
.PP
Finally, if the command line ends with '&', the entire 
command is run in the background as an asynchronous 
subprocess.
.SS "Command line switches"
.IX Subsection "Command line switches"
The following command line switches behave differently under
\&\s-1VMS\s0 than described in perlrun.  Note also that in order
to pass uppercase switches to Perl, you need to enclose
them in double-quotes on the command line, since the \s-1CRTL\s0
downcases all unquoted strings.
.PP
On newer 64 bit versions of OpenVMS, a process setting now
controls if the quoting is needed to preserve the case of
command line arguments.
.IP "\-i" 4
.IX Item "-i"
If the \f(CW\*(C`\-i\*(C'\fR switch is present but no extension for a backup
copy is given, then inplace editing creates a new version of
a file; the existing copy is not deleted.  (Note that if
an extension is given, an existing file is renamed to the backup
file, as is the case under other operating systems, so it does
not remain as a previous version under the original filename.)
.IP "\-S" 4
.IX Item "-S"
If the \f(CW"\-S"\fR or \f(CW\*(C`\-"S"\*(C'\fR switch is present \fIand\fR the script
name does not contain a directory, then Perl translates the
logical name \s-1DCL$PATH\s0 as a searchlist, using each translation
as a directory in which to look for the script.  In addition,
if no file type is specified, Perl looks in each directory
for a file matching the name specified, with a blank type,
a type of \fI.pl\fR, and a type of \fI.com\fR, in that order.
.IP "\-u" 4
.IX Item "-u"
The \f(CW\*(C`\-u\*(C'\fR switch causes the \s-1VMS\s0 debugger to be invoked
after the Perl program is compiled, but before it has
run.  It does not create a core dump file.
.SH "Perl functions"
.IX Header "Perl functions"
As of the time this document was last revised, the following 
Perl functions were implemented in the \s-1VMS\s0 port of Perl 
(functions marked with * are discussed in more detail below):
.PP
.Vb 10
\&    file tests*, abs, alarm, atan, backticks*, binmode*, bless,
\&    caller, chdir, chmod, chown, chomp, chop, chr,
\&    close, closedir, cos, crypt*, defined, delete, die, do, dump*, 
\&    each, endgrent, endpwent, eof, eval, exec*, exists, exit, exp, 
\&    fileno, flock  getc, getgrent*, getgrgid*, getgrnam, getlogin, getppid,
\&    getpwent*, getpwnam*, getpwuid*, glob, gmtime*, goto,
\&    grep, hex, ioctl, import, index, int, join, keys, kill*,
\&    last, lc, lcfirst, lchown*, length, link*, local, localtime, log, lstat, m//,
\&    map, mkdir, my, next, no, oct, open, opendir, ord, pack,
\&    pipe, pop, pos, print, printf, push, q//, qq//, qw//,
\&    qx//*, quotemeta, rand, read, readdir, readlink*, redo, ref, rename,
\&    require, reset, return, reverse, rewinddir, rindex,
\&    rmdir, s///, scalar, seek, seekdir, select(internal),
\&    select (system call)*, setgrent, setpwent, shift, sin, sleep,
\&    socketpair, sort, splice, split, sprintf, sqrt, srand, stat,
\&    study, substr, symlink*, sysread, system*, syswrite, tell,
\&    telldir, tie, time, times*, tr///, uc, ucfirst, umask,
\&    undef, unlink*, unpack, untie, unshift, use, utime*,
\&    values, vec, wait, waitpid*, wantarray, warn, write, y///
.Ve
.PP
The following functions were not implemented in the \s-1VMS\s0 port, 
and calling them produces a fatal error (usually) or 
undefined behavior (rarely, we hope):
.PP
.Vb 4
\&    chroot, dbmclose, dbmopen, fork*, getpgrp, getpriority,  
\&    msgctl, msgget, msgsend, msgrcv, semctl,
\&    semget, semop, setpgrp, setpriority, shmctl, shmget,
\&    shmread, shmwrite, syscall
.Ve
.PP
The following functions are available on Perls compiled with Dec C
5.2 or greater and running \s-1VMS 7.0\s0 or greater:
.PP
.Vb 1
\&    truncate
.Ve
.PP
The following functions are available on Perls built on \s-1VMS 7.2\s0 or
greater:
.PP
.Vb 1
\&    fcntl (without locking)
.Ve
.PP
The following functions may or may not be implemented, 
depending on what type of socket support you've built into 
your copy of Perl:
.PP
.Vb 9
\&    accept, bind, connect, getpeername,
\&    gethostbyname, getnetbyname, getprotobyname,
\&    getservbyname, gethostbyaddr, getnetbyaddr,
\&    getprotobynumber, getservbyport, gethostent,
\&    getnetent, getprotoent, getservent, sethostent,
\&    setnetent, setprotoent, setservent, endhostent,
\&    endnetent, endprotoent, endservent, getsockname,
\&    getsockopt, listen, recv, select(system call)*,
\&    send, setsockopt, shutdown, socket
.Ve
.PP
The following function is available on Perls built on 64 bit OpenVMS v8.2
with hard links enabled on an \s-1ODS\-5\s0 formatted build disk.  \s-1CRTL\s0 support
is in principle available as of OpenVMS v7.3\-1, and better configuration
support could detect this.
.PP
.Vb 1
\&    link
.Ve
.PP
The following functions are available on Perls built on 64 bit OpenVMS
v8.2 and later.  \s-1CRTL\s0 support is in principle available as of OpenVMS
v7.3\-2, and better configuration support could detect this.
.PP
.Vb 2
\&   getgrgid, getgrnam, getpwnam, getpwuid,
\&   setgrent, ttyname
.Ve
.PP
The following functions are available on Perls built on 64 bit OpenVMS v8.2
and later.
.PP
.Vb 1
\&   statvfs, socketpair
.Ve
.IP "File tests" 4
.IX Item "File tests"
The tests \f(CW\*(C`\-b\*(C'\fR, \f(CW\*(C`\-B\*(C'\fR, \f(CW\*(C`\-c\*(C'\fR, \f(CW\*(C`\-C\*(C'\fR, \f(CW\*(C`\-d\*(C'\fR, \f(CW\*(C`\-e\*(C'\fR, \f(CW\*(C`\-f\*(C'\fR,
\&\f(CW\*(C`\-o\*(C'\fR, \f(CW\*(C`\-M\*(C'\fR, \f(CW\*(C`\-s\*(C'\fR, \f(CW\*(C`\-S\*(C'\fR, \f(CW\*(C`\-t\*(C'\fR, \f(CW\*(C`\-T\*(C'\fR, and \f(CW\*(C`\-z\*(C'\fR work as
advertised.  The return values for \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR, and \f(CW\*(C`\-x\*(C'\fR
tell you whether you can actually access the file; this may
not reflect the UIC-based file protections.  Since real and
effective \s-1UIC\s0 don't differ under \s-1VMS, \s0\f(CW\*(C`\-O\*(C'\fR, \f(CW\*(C`\-R\*(C'\fR, \f(CW\*(C`\-W\*(C'\fR,
and \f(CW\*(C`\-X\*(C'\fR are equivalent to \f(CW\*(C`\-o\*(C'\fR, \f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR, and \f(CW\*(C`\-x\*(C'\fR.
Similarly, several other tests, including \f(CW\*(C`\-A\*(C'\fR, \f(CW\*(C`\-g\*(C'\fR, \f(CW\*(C`\-k\*(C'\fR,
\&\f(CW\*(C`\-l\*(C'\fR, \f(CW\*(C`\-p\*(C'\fR, and \f(CW\*(C`\-u\*(C'\fR, aren't particularly meaningful under
\&\s-1VMS,\s0 and the values returned by these tests reflect whatever
your \s-1CRTL \s0\f(CW\*(C`stat()\*(C'\fR routine does to the equivalent bits in the
st_mode field.  Finally, \f(CW\*(C`\-d\*(C'\fR returns true if passed a device
specification without an explicit directory (e.g. \f(CW\*(C`DUA1:\*(C'\fR), as
well as if passed a directory.
.Sp
There are \s-1DECC\s0 feature logical names \s-1AND ODS\-5\s0 volume attributes that
also control what values are returned for the date fields.
.Sp
Note: Some sites have reported problems when using the file-access
tests (\f(CW\*(C`\-r\*(C'\fR, \f(CW\*(C`\-w\*(C'\fR, and \f(CW\*(C`\-x\*(C'\fR) on files accessed via \s-1DEC\s0's \s-1DFS.\s0
Specifically, since \s-1DFS\s0 does not currently provide access to the
extended file header of files on remote volumes, attempts to
examine the \s-1ACL\s0 fail, and the file tests will return false,
with \f(CW$!\fR indicating that the file does not exist.  You can
use \f(CW\*(C`stat\*(C'\fR on these files, since that checks UIC-based protection
only, and then manually check the appropriate bits, as defined by
your C compiler's \fIstat.h\fR, in the mode value it returns, if you
need an approximation of the file's protections.
.IP "backticks" 4
.IX Item "backticks"
Backticks create a subprocess, and pass the enclosed string
to it for execution as a \s-1DCL\s0 command.  Since the subprocess is
created directly via \f(CW\*(C`lib$spawn()\*(C'\fR, any valid \s-1DCL\s0 command string
may be specified.
.IP "binmode \s-1FILEHANDLE\s0" 4
.IX Item "binmode FILEHANDLE"
The \f(CW\*(C`binmode\*(C'\fR operator will attempt to insure that no translation
of carriage control occurs on input from or output to this filehandle.
Since this involves reopening the file and then restoring its
file position indicator, if this function returns \s-1FALSE,\s0 the
underlying filehandle may no longer point to an open file, or may
point to a different position in the file than before \f(CW\*(C`binmode\*(C'\fR
was called.
.Sp
Note that \f(CW\*(C`binmode\*(C'\fR is generally not necessary when using normal
filehandles; it is provided so that you can control I/O to existing
record-structured files when necessary.  You can also use the
\&\f(CW\*(C`vmsfopen\*(C'\fR function in the VMS::Stdio extension to gain finer
control of I/O to files and devices with different record structures.
.IP "crypt \s-1PLAINTEXT, USER\s0" 4
.IX Item "crypt PLAINTEXT, USER"
The \f(CW\*(C`crypt\*(C'\fR operator uses the \f(CW\*(C`sys$hash_password\*(C'\fR system
service to generate the hashed representation of \s-1PLAINTEXT.\s0
If \s-1USER\s0 is a valid username, the algorithm and salt values
are taken from that user's \s-1UAF\s0 record.  If it is not, then
the preferred algorithm and a salt of 0 are used.  The
quadword encrypted value is returned as an 8\-character string.
.Sp
The value returned by \f(CW\*(C`crypt\*(C'\fR may be compared against
the encrypted password from the \s-1UAF\s0 returned by the \f(CW\*(C`getpw*\*(C'\fR
functions, in order to authenticate users.  If you're
going to do this, remember that the encrypted password in
the \s-1UAF\s0 was generated using uppercase username and
password strings; you'll have to upcase the arguments to
\&\f(CW\*(C`crypt\*(C'\fR to insure that you'll get the proper value:
.Sp
.Vb 9
\&    sub validate_passwd {
\&        my($user,$passwd) = @_;
\&        my($pwdhash);
\&        if ( !($pwdhash = (getpwnam($user))[1]) ||
\&               $pwdhash ne crypt("\eU$passwd","\eU$name") ) {
\&            intruder_alert($name);
\&        }
\&        return 1;
\&    }
.Ve
.IP "die" 4
.IX Item "die"
\&\f(CW\*(C`die\*(C'\fR will force the native \s-1VMS\s0 exit status to be an \s-1SS$_ABORT\s0 code
if neither of the $! or $? status values are ones that would cause
the native status to be interpreted as being what \s-1VMS\s0 classifies as
\&\s-1SEVERE_ERROR\s0 severity for \s-1DCL\s0 error handling.
.Sp
When \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR is active (see \*(L"$?\*(R" below), the native \s-1VMS\s0 exit
status value will have either one of the \f(CW$!\fR or \f(CW$?\fR or \f(CW$^E\fR or
the Unix value 255 encoded into it in a way that the effective original
value can be decoded by other programs written in C, including Perl
and the \s-1GNV\s0 package.  As per the normal non-VMS behavior of \f(CW\*(C`die\*(C'\fR if
either \f(CW$!\fR or \f(CW$?\fR are non-zero, one of those values will be
encoded into a native \s-1VMS\s0 status value.  If both of the Unix status
values are 0, and the \f(CW$^E\fR value is set one of \s-1ERROR\s0 or \s-1SEVERE_ERROR\s0
severity, then the \f(CW$^E\fR value will be used as the exit code as is.
If none of the above apply, the Unix value of 255 will be encoded into
a native \s-1VMS\s0 exit status value.
.Sp
Please note a significant difference in the behavior of \f(CW\*(C`die\*(C'\fR in
the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR mode is that it does not force a \s-1VMS
SEVERE_ERROR\s0 status on exit.  The Unix exit values of 2 through
255 will be encoded in \s-1VMS\s0 status values with severity levels of
\&\s-1SUCCESS. \s0 The Unix exit value of 1 will be encoded in a \s-1VMS\s0 status
value with a severity level of \s-1ERROR. \s0 This is to be compatible with
how the \s-1VMS C\s0 library encodes these values.
.Sp
The minimum severity level set by \f(CW\*(C`die\*(C'\fR in \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR mode
may be changed to be \s-1ERROR\s0 or higher in the future depending on the 
results of testing and further review.
.Sp
See \*(L"$?\*(R" for a description of the encoding of the Unix value to
produce a native \s-1VMS\s0 status containing it.
.IP "dump" 4
.IX Item "dump"
Rather than causing Perl to abort and dump core, the \f(CW\*(C`dump\*(C'\fR
operator invokes the \s-1VMS\s0 debugger.  If you continue to
execute the Perl program under the debugger, control will
be transferred to the label specified as the argument to
\&\f(CW\*(C`dump\*(C'\fR, or, if no label was specified, back to the
beginning of the program.  All other state of the program
(\fIe.g.\fR values of variables, open file handles) are not
affected by calling \f(CW\*(C`dump\*(C'\fR.
.IP "exec \s-1LIST\s0" 4
.IX Item "exec LIST"
A call to \f(CW\*(C`exec\*(C'\fR will cause Perl to exit, and to invoke the command
given as an argument to \f(CW\*(C`exec\*(C'\fR via \f(CW\*(C`lib$do_command\*(C'\fR.  If the
argument begins with '@' or '$' (other than as part of a filespec),
then it is executed as a \s-1DCL\s0 command.  Otherwise, the first token on
the command line is treated as the filespec of an image to run, and
an attempt is made to invoke it (using \fI.Exe\fR and the process
defaults to expand the filespec) and pass the rest of \f(CW\*(C`exec\*(C'\fR's
argument to it as parameters.  If the token has no file type, and
matches a file with null type, then an attempt is made to determine
whether the file is an executable image which should be invoked
using \f(CW\*(C`MCR\*(C'\fR or a text file which should be passed to \s-1DCL\s0 as a
command procedure.
.IP "fork" 4
.IX Item "fork"
While in principle the \f(CW\*(C`fork\*(C'\fR operator could be implemented via
(and with the same rather severe limitations as) the \s-1CRTL \s0\f(CW\*(C`vfork()\*(C'\fR
routine, and while some internal support to do just that is in
place, the implementation has never been completed, making \f(CW\*(C`fork\*(C'\fR
currently unavailable.  A true kernel \f(CW\*(C`fork()\*(C'\fR is expected in a
future version of \s-1VMS,\s0 and the pseudo-fork based on interpreter
threads may be available in a future version of Perl on \s-1VMS \s0(see
perlfork).  In the meantime, use \f(CW\*(C`system\*(C'\fR, backticks, or piped
filehandles to create subprocesses.
.IP "getpwent" 4
.IX Item "getpwent"
.PD 0
.IP "getpwnam" 4
.IX Item "getpwnam"
.IP "getpwuid" 4
.IX Item "getpwuid"
.PD
These operators obtain the information described in perlfunc,
if you have the privileges necessary to retrieve the named user's
\&\s-1UAF\s0 information via \f(CW\*(C`sys$getuai\*(C'\fR.  If not, then only the \f(CW$name\fR,
\&\f(CW$uid\fR, and \f(CW$gid\fR items are returned.  The \f(CW$dir\fR item contains
the login directory in \s-1VMS\s0 syntax, while the \f(CW$comment\fR item
contains the login directory in Unix syntax. The \f(CW$gcos\fR item
contains the owner field from the \s-1UAF\s0 record.  The \f(CW$quota\fR
item is not used.
.IP "gmtime" 4
.IX Item "gmtime"
The \f(CW\*(C`gmtime\*(C'\fR operator will function properly if you have a
working \s-1CRTL \s0\f(CW\*(C`gmtime()\*(C'\fR routine, or if the logical name
\&\s-1SYS$TIMEZONE_DIFFERENTIAL\s0 is defined as the number of seconds
which must be added to \s-1UTC\s0 to yield local time.  (This logical
name is defined automatically if you are running a version of
\&\s-1VMS\s0 with built-in \s-1UTC\s0 support.)  If neither of these cases is
true, a warning message is printed, and \f(CW\*(C`undef\*(C'\fR is returned.
.IP "kill" 4
.IX Item "kill"
In most cases, \f(CW\*(C`kill\*(C'\fR is implemented via the undocumented system
service \f(CW$SIGPRC\fR, which has the same calling sequence as \f(CW$FORCEX\fR, but
throws an exception in the target process rather than forcing it to call
\&\f(CW$EXIT\fR.  Generally speaking, \f(CW\*(C`kill\*(C'\fR follows the behavior of the
\&\s-1CRTL\s0's \f(CW\*(C`kill()\*(C'\fR function, but unlike that function can be called from
within a signal handler.  Also, unlike the \f(CW\*(C`kill\*(C'\fR in some versions of
the \s-1CRTL,\s0 Perl's \f(CW\*(C`kill\*(C'\fR checks the validity of the signal passed in and
returns an error rather than attempting to send an unrecognized signal.
.Sp
Also, negative signal values don't do anything special under
\&\s-1VMS\s0; they're just converted to the corresponding positive value.
.IP "qx//" 4
.IX Item "qx//"
See the entry on \f(CW\*(C`backticks\*(C'\fR above.
.IP "select (system call)" 4
.IX Item "select (system call)"
If Perl was not built with socket support, the system call
version of \f(CW\*(C`select\*(C'\fR is not available at all.  If socket
support is present, then the system call version of
\&\f(CW\*(C`select\*(C'\fR functions only for file descriptors attached
to sockets.  It will not provide information about regular
files or pipes, since the \s-1CRTL \s0\f(CW\*(C`select()\*(C'\fR routine does not
provide this functionality.
.IP "stat \s-1EXPR\s0" 4
.IX Item "stat EXPR"
Since \s-1VMS\s0 keeps track of files according to a different scheme
than Unix, it's not really possible to represent the file's \s-1ID\s0
in the \f(CW\*(C`st_dev\*(C'\fR and \f(CW\*(C`st_ino\*(C'\fR fields of a \f(CW\*(C`struct stat\*(C'\fR.  Perl
tries its best, though, and the values it uses are pretty unlikely
to be the same for two different files.  We can't guarantee this,
though, so caveat scriptor.
.IP "system \s-1LIST\s0" 4
.IX Item "system LIST"
The \f(CW\*(C`system\*(C'\fR operator creates a subprocess, and passes its 
arguments to the subprocess for execution as a \s-1DCL\s0 command.  
Since the subprocess is created directly via \f(CW\*(C`lib$spawn()\*(C'\fR, any 
valid \s-1DCL\s0 command string may be specified.  If the string begins with
\&'@', it is treated as a \s-1DCL\s0 command unconditionally.  Otherwise, if
the first token contains a character used as a delimiter in file
specification (e.g. \f(CW\*(C`:\*(C'\fR or \f(CW\*(C`]\*(C'\fR), an attempt is made to expand it
using  a default type of \fI.Exe\fR and the process defaults, and if
successful, the resulting file is invoked via \f(CW\*(C`MCR\*(C'\fR. This allows you
to invoke an image directly simply by passing the file specification
to \f(CW\*(C`system\*(C'\fR, a common Unixish idiom.  If the token has no file type,
and matches a file with null type, then an attempt is made to
determine whether the file is an executable image which should be
invoked using \f(CW\*(C`MCR\*(C'\fR or a text file which should be passed to \s-1DCL\s0
as a command procedure.
.Sp
If \s-1LIST\s0 consists of the empty string, \f(CW\*(C`system\*(C'\fR spawns an
interactive \s-1DCL\s0 subprocess, in the same fashion as typing
\&\fB\s-1SPAWN\s0\fR at the \s-1DCL\s0 prompt.
.Sp
Perl waits for the subprocess to complete before continuing
execution in the current process.  As described in perlfunc,
the return value of \f(CW\*(C`system\*(C'\fR is a fake \*(L"status\*(R" which follows
\&\s-1POSIX\s0 semantics unless the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR is in
effect; see the description of \f(CW$?\fR in this document for more 
detail.
.IP "time" 4
.IX Item "time"
The value returned by \f(CW\*(C`time\*(C'\fR is the offset in seconds from
01\-JAN\-1970 00:00:00 (just like the \s-1CRTL\s0's \fItimes()\fR routine), in order
to make life easier for code coming in from the POSIX/Unix world.
.IP "times" 4
.IX Item "times"
The array returned by the \f(CW\*(C`times\*(C'\fR operator is divided up 
according to the same rules the \s-1CRTL \s0\f(CW\*(C`times()\*(C'\fR routine.  
Therefore, the \*(L"system time\*(R" elements will always be 0, since 
there is no difference between \*(L"user time\*(R" and \*(L"system\*(R" time 
under \s-1VMS,\s0 and the time accumulated by a subprocess may or may 
not appear separately in the \*(L"child time\*(R" field, depending on 
whether \f(CW\*(C`times()\*(C'\fR keeps track of subprocesses separately.  Note
especially that the \s-1VAXCRTL \s0(at least) keeps track only of
subprocesses spawned using \f(CW\*(C`fork()\*(C'\fR and \f(CW\*(C`exec()\*(C'\fR; it will not
accumulate the times of subprocesses spawned via pipes, \f(CW\*(C`system()\*(C'\fR,
or backticks.
.IP "unlink \s-1LIST\s0" 4
.IX Item "unlink LIST"
\&\f(CW\*(C`unlink\*(C'\fR will delete the highest version of a file only; in
order to delete all versions, you need to say
.Sp
.Vb 1
\&    1 while unlink LIST;
.Ve
.Sp
You may need to make this change to scripts written for a
Unix system which expect that after a call to \f(CW\*(C`unlink\*(C'\fR,
no files with the names passed to \f(CW\*(C`unlink\*(C'\fR will exist.
(Note: This can be changed at compile time; if you
\&\f(CW\*(C`use Config\*(C'\fR and \f(CW$Config{\*(Aqd_unlink_all_versions\*(Aq}\fR is
\&\f(CW\*(C`define\*(C'\fR, then \f(CW\*(C`unlink\*(C'\fR will delete all versions of a
file on the first call.)
.Sp
\&\f(CW\*(C`unlink\*(C'\fR will delete a file if at all possible, even if it
requires changing file protection (though it won't try to
change the protection of the parent directory).  You can tell
whether you've got explicit delete access to a file by using the
\&\f(CW\*(C`VMS::Filespec::candelete\*(C'\fR operator.  For instance, in order
to delete only files to which you have delete access, you could
say something like
.Sp
.Vb 8
\&    sub safe_unlink {
\&        my($file,$num);
\&        foreach $file (@_) {
\&            next unless VMS::Filespec::candelete($file);
\&            $num += unlink $file;
\&        }
\&        $num;
\&    }
.Ve
.Sp
(or you could just use \f(CW\*(C`VMS::Stdio::remove\*(C'\fR, if you've installed
the VMS::Stdio extension distributed with Perl). If \f(CW\*(C`unlink\*(C'\fR has to
change the file protection to delete the file, and you interrupt it
in midstream, the file may be left intact, but with a changed \s-1ACL\s0
allowing you delete access.
.Sp
This behavior of \f(CW\*(C`unlink\*(C'\fR is to be compatible with \s-1POSIX\s0 behavior
and not traditional \s-1VMS\s0 behavior.
.IP "utime \s-1LIST\s0" 4
.IX Item "utime LIST"
This operator changes only the modification time of the file (\s-1VMS \s0
revision date) on \s-1ODS\-2\s0 volumes and \s-1ODS\-5\s0 volumes without access 
dates enabled. On \s-1ODS\-5\s0 volumes with access dates enabled, the 
true access time is modified.
.IP "waitpid \s-1PID,FLAGS\s0" 4
.IX Item "waitpid PID,FLAGS"
If \s-1PID\s0 is a subprocess started by a piped \f(CW\*(C`open()\*(C'\fR (see open), 
\&\f(CW\*(C`waitpid\*(C'\fR will wait for that subprocess, and return its final status
value in \f(CW$?\fR.  If \s-1PID\s0 is a subprocess created in some other way (e.g.
SPAWNed before Perl was invoked), \f(CW\*(C`waitpid\*(C'\fR will simply check once per
second whether the process has completed, and return when it has.  (If
\&\s-1PID\s0 specifies a process that isn't a subprocess of the current process,
and you invoked Perl with the \f(CW\*(C`\-w\*(C'\fR switch, a warning will be issued.)
.Sp
Returns \s-1PID\s0 on success, \-1 on error.  The \s-1FLAGS\s0 argument is ignored
in all cases.
.SH "Perl variables"
.IX Header "Perl variables"
The following VMS-specific information applies to the indicated
\&\*(L"special\*(R" Perl variables, in addition to the general information
in perlvar.  Where there is a conflict, this information
takes precedence.
.ie n .IP "%ENV" 4
.el .IP "\f(CW%ENV\fR" 4
.IX Item "%ENV"
The operation of the \f(CW%ENV\fR array depends on the translation
of the logical name \fI\s-1PERL_ENV_TABLES\s0\fR.  If defined, it should
be a search list, each element of which specifies a location
for \f(CW%ENV\fR elements.  If you tell Perl to read or set the
element \f(CW\*(C`$ENV{\*(C'\fR\fIname\fR\f(CW\*(C`}\*(C'\fR, then Perl uses the translations of
\&\fI\s-1PERL_ENV_TABLES\s0\fR as follows:
.RS 4
.IP "\s-1CRTL_ENV\s0" 4
.IX Item "CRTL_ENV"
This string tells Perl to consult the \s-1CRTL\s0's internal \f(CW\*(C`environ\*(C'\fR
array of key-value pairs, using \fIname\fR as the key.  In most cases,
this contains only a few keys, but if Perl was invoked via the C
\&\f(CW\*(C`exec[lv]e()\*(C'\fR function, as is the case for \s-1CGI\s0 processing by some
\&\s-1HTTP\s0 servers, then the \f(CW\*(C`environ\*(C'\fR array may have been populated by
the calling program.
.IP "CLISYM_[\s-1LOCAL\s0]" 4
.IX Item "CLISYM_[LOCAL]"
A string beginning with \f(CW\*(C`CLISYM_\*(C'\fRtells Perl to consult the \s-1CLI\s0's
symbol tables, using \fIname\fR as the name of the symbol.  When reading
an element of \f(CW%ENV\fR, the local symbol table is scanned first, followed
by the global symbol table..  The characters following \f(CW\*(C`CLISYM_\*(C'\fR are
significant when an element of \f(CW%ENV\fR is set or deleted: if the
complete string is \f(CW\*(C`CLISYM_LOCAL\*(C'\fR, the change is made in the local
symbol table; otherwise the global symbol table is changed.
.IP "Any other string" 4
.IX Item "Any other string"
If an element of \fI\s-1PERL_ENV_TABLES\s0\fR translates to any other string,
that string is used as the name of a logical name table, which is
consulted using \fIname\fR as the logical name.  The normal search
order of access modes is used.
.RE
.RS 4
.Sp
\&\fI\s-1PERL_ENV_TABLES\s0\fR is translated once when Perl starts up; any changes
you make while Perl is running do not affect the behavior of \f(CW%ENV\fR.
If \fI\s-1PERL_ENV_TABLES\s0\fR is not defined, then Perl defaults to consulting
first the logical name tables specified by \fI\s-1LNM$FILE_DEV\s0\fR, and then
the \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR array.
.Sp
In all operations on \f(CW%ENV\fR, the key string is treated as if it 
were entirely uppercase, regardless of the case actually 
specified in the Perl expression.
.Sp
When an element of \f(CW%ENV\fR is read, the locations to which
\&\fI\s-1PERL_ENV_TABLES\s0\fR points are checked in order, and the value
obtained from the first successful lookup is returned.  If the
name of the \f(CW%ENV\fR element contains a semi-colon, it and
any characters after it are removed.  These are ignored when
the \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR array or a \s-1CLI\s0 symbol table is consulted.
However, the name is looked up in a logical name table, the
suffix after the semi-colon is treated as the translation index
to be used for the lookup.   This lets you look up successive values
for search list logical names.  For instance, if you say
.Sp
.Vb 3
\&   $  Define STORY  once,upon,a,time,there,was
\&   $  perl \-e "for ($i = 0; $i <= 6; $i++) " \-
\&   _$ \-e "{ print $ENV{\*(Aqstory;\*(Aq.$i},\*(Aq \*(Aq}"
.Ve
.Sp
Perl will print \f(CW\*(C`ONCE UPON A TIME THERE WAS\*(C'\fR, assuming, of course,
that \fI\s-1PERL_ENV_TABLES\s0\fR is set up so that the logical name \f(CW\*(C`story\*(C'\fR
is found, rather than a \s-1CLI\s0 symbol or \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR element with
the same name.
.Sp
When an element of \f(CW%ENV\fR is set to a defined string, the
corresponding definition is made in the location to which the
first translation of \fI\s-1PERL_ENV_TABLES\s0\fR points.  If this causes a
logical name to be created, it is defined in supervisor mode.
(The same is done if an existing logical name was defined in
executive or kernel mode; an existing user or supervisor mode
logical name is reset to the new value.)  If the value is an empty
string, the logical name's translation is defined as a single \s-1NUL
\&\s0(\s-1ASCII 00\s0) character, since a logical name cannot translate to a
zero-length string.  (This restriction does not apply to \s-1CLI\s0 symbols
or \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR values; they are set to the empty string.)
An element of the \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR array can be set only if your
copy of Perl knows about the \s-1CRTL\s0's \f(CW\*(C`setenv()\*(C'\fR function.  (This is
present only in some versions of the \s-1DECCRTL\s0; check \f(CW$Config{d_setenv}\fR
to see whether your copy of Perl was built with a \s-1CRTL\s0 that has this
function.)
.Sp
When an element of \f(CW%ENV\fR is set to \f(CW\*(C`undef\*(C'\fR,
the element is looked up as if it were being read, and if it is
found, it is deleted.  (An item \*(L"deleted\*(R" from the \s-1CRTL \s0\f(CW\*(C`environ\*(C'\fR
array is set to the empty string; this can only be done if your
copy of Perl knows about the \s-1CRTL \s0\f(CW\*(C`setenv()\*(C'\fR function.)  Using
\&\f(CW\*(C`delete\*(C'\fR to remove an element from \f(CW%ENV\fR has a similar effect,
but after the element is deleted, another attempt is made to
look up the element, so an inner-mode logical name or a name in
another location will replace the logical name just deleted.
In either case, only the first value found searching \s-1PERL_ENV_TABLES\s0
is altered.  It is not possible at present to define a search list
logical name via \f(CW%ENV\fR.
.Sp
The element \f(CW$ENV{DEFAULT}\fR is special: when read, it returns
Perl's current default device and directory, and when set, it
resets them, regardless of the definition of \fI\s-1PERL_ENV_TABLES\s0\fR.
It cannot be cleared or deleted; attempts to do so are silently
ignored.
.Sp
Note that if you want to pass on any elements of the
C\-local environ array to a subprocess which isn't
started by fork/exec, or isn't running a C program, you
can \*(L"promote\*(R" them to logical names in the current
process, which will then be inherited by all subprocesses,
by saying
.Sp
.Vb 4
\&    foreach my $key (qw[C\-local keys you want promoted]) {
\&        my $temp = $ENV{$key}; # read from C\-local array
\&        $ENV{$key} = $temp;    # and define as logical name
\&    }
.Ve
.Sp
(You can't just say \f(CW$ENV{$key} = $ENV{$key}\fR, since the
Perl optimizer is smart enough to elide the expression.)
.Sp
Don't try to clear \f(CW%ENV\fR by saying \f(CW\*(C`%ENV = ();\*(C'\fR, it will throw
a fatal error.  This is equivalent to doing the following from \s-1DCL:\s0
.Sp
.Vb 1
\&    DELETE/LOGICAL *
.Ve
.Sp
You can imagine how bad things would be if, for example, the \s-1SYS$MANAGER\s0
or \s-1SYS$SYSTEM\s0 logical names were deleted.
.Sp
At present, the first time you iterate over \f(CW%ENV\fR using
\&\f(CW\*(C`keys\*(C'\fR, or \f(CW\*(C`values\*(C'\fR,  you will incur a time penalty as all
logical names are read, in order to fully populate \f(CW%ENV\fR.
Subsequent iterations will not reread logical names, so they
won't be as slow, but they also won't reflect any changes
to logical name tables caused by other programs.
.Sp
You do need to be careful with the logical names representing
process-permanent files, such as \f(CW\*(C`SYS$INPUT\*(C'\fR and \f(CW\*(C`SYS$OUTPUT\*(C'\fR.
The translations for these logical names are prepended with a
two-byte binary value (0x1B 0x00) that needs to be stripped off
if you wantto use it. (In previous versions of Perl it wasn't
possible to get the values of these logical names, as the null
byte acted as an end-of-string marker)
.RE
.IP "$!" 4
The string value of \f(CW$!\fR is that returned by the \s-1CRTL\s0's
\&\fIstrerror()\fR function, so it will include the \s-1VMS\s0 message for
VMS-specific errors.  The numeric value of \f(CW$!\fR is the
value of \f(CW\*(C`errno\*(C'\fR, except if errno is \s-1EVMSERR,\s0 in which
case \f(CW$!\fR contains the value of vaxc$errno.  Setting \f(CW$!\fR
always sets errno to the value specified.  If this value is
\&\s-1EVMSERR,\s0 it also sets vaxc$errno to 4 (NONAME-F-NOMSG), so
that the string value of \f(CW$!\fR won't reflect the \s-1VMS\s0 error
message from before \f(CW$!\fR was set.
.IP "$^E" 4
.IX Item "$^E"
This variable provides direct access to \s-1VMS\s0 status values
in vaxc$errno, which are often more specific than the
generic Unix-style error messages in \f(CW$!\fR.  Its numeric value
is the value of vaxc$errno, and its string value is the
corresponding \s-1VMS\s0 message string, as retrieved by sys$\fIgetmsg()\fR.
Setting \f(CW$^E\fR sets vaxc$errno to the value specified.
.Sp
While Perl attempts to keep the vaxc$errno value to be current, if
errno is not \s-1EVMSERR,\s0 it may not be from the current operation.
.IP "$?" 4
The \*(L"status value\*(R" returned in \f(CW$?\fR is synthesized from the
actual exit status of the subprocess in a way that approximates
\&\s-1POSIX\s0 \fIwait\fR\|(5) semantics, in order to allow Perl programs to
portably test for successful completion of subprocesses.  The
low order 8 bits of \f(CW$?\fR are always 0 under \s-1VMS,\s0 since the
termination status of a process may or may not have been
generated by an exception.
.Sp
The next 8 bits contain the termination status of the program.
.Sp
If the child process follows the convention of C programs
compiled with the _POSIX_EXIT macro set, the status value will
contain the actual value of 0 to 255 returned by that program
on a normal exit.
.Sp
With the _POSIX_EXIT macro set, the Unix exit value of zero is
represented as a \s-1VMS\s0 native status of 1, and the Unix values
from 2 to 255 are encoded by the equation:
.Sp
.Vb 1
\&   VMS_status = 0x35a000 + (unix_value * 8) + 1.
.Ve
.Sp
And in the special case of Unix value 1 the encoding is:
.Sp
.Vb 1
\&   VMS_status = 0x35a000 + 8 + 2 + 0x10000000.
.Ve
.Sp
For other termination statuses, the severity portion of the
subprocess's exit status is used: if the severity was success or
informational, these bits are all 0; if the severity was
warning, they contain a value of 1; if the severity was
error or fatal error, they contain the actual severity bits,
which turns out to be a value of 2 for error and 4 for severe_error.
Fatal is another term for the severe_error status.
.Sp
As a result, \f(CW$?\fR will always be zero if the subprocess's exit
status indicated successful completion, and non-zero if a
warning or error occurred or a program compliant with encoding
_POSIX_EXIT values was run and set a status.
.Sp
How can you tell the difference between a non-zero status that is
the result of a \s-1VMS\s0 native error status or an encoded Unix status?
You can not unless you look at the ${^CHILD_ERROR_NATIVE} value.
The ${^CHILD_ERROR_NATIVE} value returns the actual \s-1VMS\s0 status value
and check the severity bits. If the severity bits are equal to 1,
then if the numeric value for \f(CW$?\fR is between 2 and 255 or 0, then
\&\f(CW$?\fR accurately reflects a value passed back from a Unix application.
If \f(CW$?\fR is 1, and the severity bits indicate a \s-1VMS\s0 error (2), then
\&\f(CW$?\fR is from a Unix application exit value.
.Sp
In practice, Perl scripts that call programs that return _POSIX_EXIT
type status values will be expecting those values, and programs that
call traditional \s-1VMS\s0 programs will either be expecting the previous
behavior or just checking for a non-zero status.
.Sp
And success is always the value 0 in all behaviors.
.Sp
When the actual \s-1VMS\s0 termination status of the child is an error,
internally the \f(CW$!\fR value will be set to the closest Unix errno
value to that error so that Perl scripts that test for error
messages will see the expected Unix style error message instead
of a \s-1VMS\s0 message.
.Sp
Conversely, when setting \f(CW$?\fR in an \s-1END\s0 block, an attempt is made
to convert the \s-1POSIX\s0 value into a native status intelligible to
the operating system upon exiting Perl.  What this boils down to
is that setting \f(CW$?\fR to zero results in the generic success value
\&\s-1SS$_NORMAL,\s0 and setting \f(CW$?\fR to a non-zero value results in the
generic failure status \s-1SS$_ABORT. \s0 See also \*(L"exit\*(R" in perlport.
.Sp
With the \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR logical name defined as \*(L"\s-1ENABLE\*(R",\s0
setting \f(CW$?\fR will cause the new value to be encoded into \f(CW$^E\fR
so that either the original parent or child exit status values 
 0 to 255 can be automatically recovered by C programs expecting
_POSIX_EXIT behavior.  If both a parent and a child exit value are
non-zero, then it will be assumed that this is actually a \s-1VMS\s0 native
status value to be passed through.  The special value of 0xFFFF is
almost a \s-1NOOP\s0 as it will cause the current native \s-1VMS\s0 status in the
C library to become the current native Perl \s-1VMS\s0 status, and is handled
this way as it is known to not be a valid native \s-1VMS\s0 status value.
It is recommend that only values in the range of normal Unix parent or
child status numbers, 0 to 255 are used.
.Sp
The pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR makes \f(CW$?\fR reflect the actual 
\&\s-1VMS\s0 exit status instead of the default emulation of \s-1POSIX\s0 status 
described above.  This pragma also disables the conversion of
non-zero values to \s-1SS$_ABORT\s0 when setting \f(CW$?\fR in an \s-1END\s0
block (but zero will still be converted to \s-1SS$_NORMAL\s0).
.Sp
Do not use the pragma \f(CW\*(C`use vmsish \*(Aqstatus\*(Aq\*(C'\fR with \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR
enabled, as they are at times requesting conflicting actions and the
consequence of ignoring this advice will be undefined to allow future
improvements in the \s-1POSIX\s0 exit handling.
.Sp
In general, with \f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR enabled, more detailed information
will be available in the exit status for \s-1DCL\s0 scripts or other native \s-1VMS\s0 tools,
and will give the expected information for Posix programs.  It has not been
made the default in order to preserve backward compatibility.
.Sp
N.B. Setting \f(CW\*(C`DECC$FILENAME_UNIX_REPORT\*(C'\fR implicitly enables 
\&\f(CW\*(C`PERL_VMS_POSIX_EXIT\*(C'\fR.
.IP "$|" 4
Setting \f(CW$|\fR for an I/O stream causes data to be flushed
all the way to disk on each write (\fIi.e.\fR not just to
the underlying \s-1RMS\s0 buffers for a file).  In other words,
it's equivalent to calling \fIfflush()\fR and \fIfsync()\fR from C.
.SH "Standard modules with VMS-specific differences"
.IX Header "Standard modules with VMS-specific differences"
.SS "SDBM_File"
.IX Subsection "SDBM_File"
SDBM_File works properly on \s-1VMS.\s0 It has, however, one minor
difference. The database directory file created has a \fI.sdbm_dir\fR
extension rather than a \fI.dir\fR extension. \fI.dir\fR files are \s-1VMS\s0 filesystem
directory files, and using them for other purposes could cause unacceptable
problems.
.SH "Revision date"
.IX Header "Revision date"
Please see the git repository for revision history.
.SH "AUTHOR"
.IX Header "AUTHOR"
Charles Bailey  bailey@cor.newman.upenn.edu
Craig Berry  craigberry@mac.com
Dan Sugalski  dan@sidhe.org
John Malmberg wb8tyw@qsl.net
                                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvos.1                                    0100644 0001750 0001750 00000017600 12566207450 022435  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVOS 1"
.TH PERLVOS 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvos \- Perl for Stratus OpenVOS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This file contains notes for building perl on the Stratus OpenVOS
operating system.  Perl is a scripting or macro language that is
popular on many systems.  See perlbook for a number of good books
on Perl.
.PP
These are instructions for building Perl from source.  This version of
Perl requires the dynamic linking support that is found in OpenVOS
Release 17.1 and thus is not supported on OpenVOS Release 17.0 or
earlier releases.
.PP
If you are running \s-1VOS\s0 Release 14.4.1 or later, you can obtain a
pre-compiled, supported copy of perl by purchasing the \s-1GNU\s0 Tools
product from Stratus Technologies.
.SH "BUILDING PERL FOR OPENVOS"
.IX Header "BUILDING PERL FOR OPENVOS"
To build perl from its source code on the Stratus V Series platform
you must have OpenVOS Release 17.1.0 or later, \s-1GNU\s0 Tools Release
3.5 or later, and the C/POSIX Runtime Libraries.
.PP
Follow the normal instructions for building perl; e.g, enter bash, run
the Configure script, then use \*(L"gmake\*(R" to build perl.
.SH "INSTALLING PERL IN OPENVOS"
.IX Header "INSTALLING PERL IN OPENVOS"
.IP "1." 4
After you have built perl using the Configure script, ensure that you
have modify and default write permission to \f(CW\*(C`>system>ported\*(C'\fR and
all subdirectories.  Then type
.Sp
.Vb 1
\&     gmake install
.Ve
.IP "2." 4
While there are currently no architecture-specific extensions or
modules distributed with perl, the following directories can be
used to hold such files (replace the string \s-1VERSION\s0 by the
appropriate version number):
.Sp
.Vb 1
\&     >system>ported>lib>perl5>VERSION>i786
.Ve
.IP "3." 4
Site-specific perl extensions and modules can be installed in one of
two places.  Put architecture-independent files into:
.Sp
.Vb 1
\&     >system>ported>lib>perl5>site_perl>VERSION
.Ve
.Sp
Put site-specific architecture-dependent files into one of the
following directories:
.Sp
.Vb 1
\&     >system>ported>lib>perl5>site_perl>VERSION>i786
.Ve
.IP "4." 4
You can examine the \f(CW@INC\fR variable from within a perl program
to see the order in which Perl searches these directories.
.SH "USING PERL IN OPENVOS"
.IX Header "USING PERL IN OPENVOS"
.SS "Restrictions of Perl on OpenVOS"
.IX Subsection "Restrictions of Perl on OpenVOS"
This port of Perl version 5 prefers Unix-style, slash-separated
pathnames over OpenVOS-style greater-than-separated pathnames.
OpenVOS-style pathnames should work in most contexts, but if you have
trouble, replace all greater-than characters by slash characters.
Because the slash character is used as a pathname delimiter, Perl
cannot process OpenVOS pathnames containing a slash character in a
directory or file name; these must be renamed.
.PP
This port of Perl also uses Unix-epoch date values internally.
As long as you are dealing with \s-1ASCII\s0 character string
representations of dates, this should not be an issue.  The
supported epoch is January 1, 1980 to January 17, 2038.
.PP
See the file pod/perlport.pod for more information about the OpenVOS
port of Perl.
.SH "TEST STATUS"
.IX Header "TEST STATUS"
A number of the perl self-tests fails for various reasons; generally
these are minor and due to subtle differences between common
POSIX-based environments and the OpenVOS \s-1POSIX\s0 environment.  Ensure
that you conduct sufficient testing of your code to guarantee that it
works properly in the OpenVOS environment.
.SH "SUPPORT STATUS"
.IX Header "SUPPORT STATUS"
I'm offering this port \*(L"as is\*(R".  You can ask me questions, but I
can't guarantee I'll be able to answer them.  There are some
excellent books available on the Perl language; consult a book
seller.
.PP
If you want a supported version of perl for OpenVOS, purchase the
OpenVOS \s-1GNU\s0 Tools product from Stratus Technologies, along with a
support contract (or from anyone else who will sell you support).
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Green (Paul.Green@stratus.com)
.SH "LAST UPDATE"
.IX Header "LAST UPDATE"
February 28, 2013
                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvos5.16.1                                0100644 0001750 0001750 00000024060 12566207427 022751  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVOS 1"
.TH PERLVOS 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvos \- Perl for Stratus VOS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This file contains notes for building perl on the Stratus \s-1VOS\s0
operating system.  Perl is a scripting or macro language that is
popular on many systems.  See perlbook for a number of good
books on Perl.
.PP
These are instructions for building Perl from source.  This version of
Perl is not supported on \s-1VOS\s0 Release 14.2 or earlier releases.  If you
have a Continuum platform running \s-1VOS\s0 Release 14.3 through 14.7,
download Perl from the Stratus Anonymous \s-1FTP\s0 site at
ftp://ftp.stratus.com/pub/vos/posix/ga/continuum/continuum.html.  If
you have a V Series platform running \s-1VOS\s0 Release 15.0 or later, or if
you have a V Series platform running OpenVOS Release 17.0 or later,
download Perl from
ftp://ftp.stratus.com/pub/vos/posix/ga/v\-series/v\-series.html.  The
perl distribution files on the Stratus anonymous \s-1FTP\s0 site are stored
in a format called a \*(L"bundled file\*(R".  Instructions for unbundling the
Perl distribution file are at
ftp://ftp.stratus.com/pub/vos/utility/utility.html.
.PP
If you are running \s-1VOS\s0 Release 14.4.1 or later, you can obtain a
pre-compiled, supported copy of perl by purchasing Release 2.0.1
(or later) of the \s-1VOS\s0 \s-1GNU\s0 C/\*(C+ and \s-1GNU\s0 Tools product from
Stratus Technologies.
.SH "BUILDING PERL FOR VOS"
.IX Header "BUILDING PERL FOR VOS"
To build perl from its source code on the Stratus Continuum
platform, you must be have \s-1VOS\s0 Release 14.5.0 or later, the \s-1STCP\s0
product, and the \s-1GNU\s0 C/\*(C+ and \s-1GNU\s0 Tools, Release 2.0.1 or
later.  On the V Series platform you must have \s-1VOS\s0 Release
15.0.0 or later, and any version of the \s-1GNU\s0 C/\*(C+ and \s-1GNU\s0 Tools
product.
.PP
To build full perl using the supplied Configure script and
makefiles, change to the \*(L"vos\*(R" subdirectory and type the command
\&\*(L"compile_full_perl\*(R" or \*(L"start_process compile_full_perl\*(R".  This
will configure, build, and test perl.
.SH "INSTALLING PERL IN VOS"
.IX Header "INSTALLING PERL IN VOS"
.IP "1." 4
If you have built perl using the Configure script, ensure that
you have modify and default write permission to \f(CW\*(C`>system>ported\*(C'\fR and all subdirectories.  Then type
.Sp
.Vb 1
\&     gmake install
.Ve
.IP "2." 4
While there are currently no architecture-specific extensions or
modules distributed with perl, the following directories can be
used to hold such files (replace the string \s-1VERSION\s0 by the
appropriate version number):
.Sp
.Vb 3
\&     >system>ported>lib>perl5>VERSION>7100
\&     >system>ported>lib>perl5>VERSION>8000
\&     >system>ported>lib>perl5>VERSION>i786
.Ve
.IP "3." 4
Site-specific perl extensions and modules can be installed in one of
two places.  Put architecture-independent files into:
.Sp
.Vb 1
\&     >system>ported>lib>perl5>site_perl>VERSION
.Ve
.Sp
Put site-specific architecture-dependent files into one of the
following directories:
.Sp
.Vb 3
\&     >system>ported>lib>perl5>site_perl>VERSION>7100
\&     >system>ported>lib>perl5>site_perl>VERSION>8000
\&     >system>ported>lib>perl5>site_perl>VERSION>i786
.Ve
.IP "4." 4
You can examine the \f(CW@INC\fR variable from within a perl program
to see the order in which Perl searches these directories.
.SH "USING PERL IN VOS"
.IX Header "USING PERL IN VOS"
.SS "Restrictions of Perl on \s-1VOS\s0"
.IX Subsection "Restrictions of Perl on VOS"
This port of Perl version 5 to \s-1VOS\s0 prefers Unix-style,
slash-separated pathnames over VOS-style greater-than-separated
pathnames.  VOS-style pathnames should work in most contexts, but
if you have trouble, replace all greater-than characters by slash
characters.  Because the slash character is used as a pathname
delimiter, Perl cannot process \s-1VOS\s0 pathnames containing a slash
character in a directory or file name; these must be renamed.
.PP
This port of Perl also uses Unix-epoch date values internally.
As long as you are dealing with \s-1ASCII\s0 character string
representations of dates, this should not be an issue.  The
supported epoch is January 1, 1980 to January 17, 2038.
.PP
See the file pod/perlport.pod for more information about the \s-1VOS\s0
port of Perl.
.SS "Handling of underflow and overflow"
.IX Subsection "Handling of underflow and overflow"
Prior to \s-1VOS\s0 Release 14.7.0, \s-1VOS\s0 does not support automatically
mapping overflowed floating-point values to +infinity, nor
automatically mapping underflowed floating-point values to zero,
unlike many other platforms.  The Perl pack function has been
modified to perform such mapping in software on \s-1VOS\s0.  Performing
other floating-point computations that underflow or overflow
will probably result in \s-1SIGFPE\s0.  Don't push your luck.
.PP
As of \s-1VOS\s0 Release 14.7.0 or later, the \s-1VOS\s0 \s-1POSIX\s0 runtime sets up
the PA-RISC and \s-1IA\-32\s0 hardware floating-point status register so
that the overflow and underflow exceptions do not trap, but
instead automatically convert the result to infinity or zero, as
appropriate.  As of this writing, there are still floating-point
operations that can trap, for example, subtracting two infinite
values.  This is recorded as suggestion posix\-1022, which has
been fixed in \s-1VOS\s0 Release 15.2 and higher.
.SH "TEST STATUS"
.IX Header "TEST STATUS"
When Perl 5.9.0 is built using the native build process on \s-1VOS\s0
Release 14.7.0 and \s-1GNU\s0 \*(C+/GNU Tools 2.0.2a, all but nine
attempted tests either pass or result in \s-1TODO\s0 (ignored)
failures.  The tests that fail are:
.PP
t/io/dup, test 2
t/io/tell, test 28
t/op/pack, test 0
ext/B/t/bytecode, test 1
ext/Devel/Peek/t/Peek, test 1
ext/Encode/t/enc_module, test 1
ext/IO/t/io_dup, test 2
lib/ExtUtils/t/MM_Unix, test 94
lib/Net/ing/t/450_service, test 8
.SH "SUPPORT STATUS"
.IX Header "SUPPORT STATUS"
I'm offering this port \*(L"as is\*(R".  You can ask me questions, but I
can't guarantee I'll be able to answer them.  There are some
excellent books available on the Perl language; consult a book
seller.
.PP
If you want a supported version of perl for \s-1VOS\s0, purchase the
\&\s-1VOS\s0 \s-1GNU\s0 C/\*(C+ and \s-1GNU\s0 Tools Release 2.0.1 (or later) product from
Stratus Technologies, along with a support contract (or from
anyone else who will sell you support).
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Green (Paul.Green@stratus.com)
.SH "LAST UPDATE"
.IX Header "LAST UPDATE"
October 6, 2010
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlvos5.18.1                                0100644 0001750 0001750 00000017600 12566207450 022751  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLVOS 1"
.TH PERLVOS 1 "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlvos \- Perl for Stratus OpenVOS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This file contains notes for building perl on the Stratus OpenVOS
operating system.  Perl is a scripting or macro language that is
popular on many systems.  See perlbook for a number of good books
on Perl.
.PP
These are instructions for building Perl from source.  This version of
Perl requires the dynamic linking support that is found in OpenVOS
Release 17.1 and thus is not supported on OpenVOS Release 17.0 or
earlier releases.
.PP
If you are running \s-1VOS\s0 Release 14.4.1 or later, you can obtain a
pre-compiled, supported copy of perl by purchasing the \s-1GNU\s0 Tools
product from Stratus Technologies.
.SH "BUILDING PERL FOR OPENVOS"
.IX Header "BUILDING PERL FOR OPENVOS"
To build perl from its source code on the Stratus V Series platform
you must have OpenVOS Release 17.1.0 or later, \s-1GNU\s0 Tools Release
3.5 or later, and the C/POSIX Runtime Libraries.
.PP
Follow the normal instructions for building perl; e.g, enter bash, run
the Configure script, then use \*(L"gmake\*(R" to build perl.
.SH "INSTALLING PERL IN OPENVOS"
.IX Header "INSTALLING PERL IN OPENVOS"
.IP "1." 4
After you have built perl using the Configure script, ensure that you
have modify and default write permission to \f(CW\*(C`>system>ported\*(C'\fR and
all subdirectories.  Then type
.Sp
.Vb 1
\&     gmake install
.Ve
.IP "2." 4
While there are currently no architecture-specific extensions or
modules distributed with perl, the following directories can be
used to hold such files (replace the string \s-1VERSION\s0 by the
appropriate version number):
.Sp
.Vb 1
\&     >system>ported>lib>perl5>VERSION>i786
.Ve
.IP "3." 4
Site-specific perl extensions and modules can be installed in one of
two places.  Put architecture-independent files into:
.Sp
.Vb 1
\&     >system>ported>lib>perl5>site_perl>VERSION
.Ve
.Sp
Put site-specific architecture-dependent files into one of the
following directories:
.Sp
.Vb 1
\&     >system>ported>lib>perl5>site_perl>VERSION>i786
.Ve
.IP "4." 4
You can examine the \f(CW@INC\fR variable from within a perl program
to see the order in which Perl searches these directories.
.SH "USING PERL IN OPENVOS"
.IX Header "USING PERL IN OPENVOS"
.SS "Restrictions of Perl on OpenVOS"
.IX Subsection "Restrictions of Perl on OpenVOS"
This port of Perl version 5 prefers Unix-style, slash-separated
pathnames over OpenVOS-style greater-than-separated pathnames.
OpenVOS-style pathnames should work in most contexts, but if you have
trouble, replace all greater-than characters by slash characters.
Because the slash character is used as a pathname delimiter, Perl
cannot process OpenVOS pathnames containing a slash character in a
directory or file name; these must be renamed.
.PP
This port of Perl also uses Unix-epoch date values internally.
As long as you are dealing with \s-1ASCII\s0 character string
representations of dates, this should not be an issue.  The
supported epoch is January 1, 1980 to January 17, 2038.
.PP
See the file pod/perlport.pod for more information about the OpenVOS
port of Perl.
.SH "TEST STATUS"
.IX Header "TEST STATUS"
A number of the perl self-tests fails for various reasons; generally
these are minor and due to subtle differences between common
POSIX-based environments and the OpenVOS \s-1POSIX\s0 environment.  Ensure
that you conduct sufficient testing of your code to guarantee that it
works properly in the OpenVOS environment.
.SH "SUPPORT STATUS"
.IX Header "SUPPORT STATUS"
I'm offering this port \*(L"as is\*(R".  You can ask me questions, but I
can't guarantee I'll be able to answer them.  There are some
excellent books available on the Perl language; consult a book
seller.
.PP
If you want a supported version of perl for OpenVOS, purchase the
OpenVOS \s-1GNU\s0 Tools product from Stratus Technologies, along with a
support contract (or from anyone else who will sell you support).
.SH "AUTHOR"
.IX Header "AUTHOR"
Paul Green (Paul.Green@stratus.com)
.SH "LAST UPDATE"
.IX Header "LAST UPDATE"
February 28, 2013
                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlwin32.1                                  0100644 0001750 0001750 00000126272 12566207450 022576  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLWIN32 1"
.TH PERLWIN32 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlwin32 \- Perl under Windows
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
These are instructions for building Perl under Windows 2000 and later.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Before you start, you should glance through the \s-1README\s0 file
found in the top-level directory to which the Perl distribution
was extracted.  Make sure you read and understand the terms under
which this software is being distributed.
.PP
Also make sure you read \*(L"\s-1BUGS AND CAVEATS\*(R"\s0 below for the
known limitations of this port.
.PP
The \s-1INSTALL\s0 file in the perl top-level has much information that is
only relevant to people building Perl on Unix-like systems.  In
particular, you can safely ignore any information that talks about
\&\*(L"Configure\*(R".
.PP
You may also want to look at one other option for building a perl that
will work on Windows: the \s-1README\s0.cygwin file, which give a different
set of rules to build a perl for Windows.  This method will probably
enable you to build a more Unix-compatible perl, but you will also
need to download and use various other build-time and run-time support
software described in that file.
.PP
This set of instructions is meant to describe a so-called \*(L"native\*(R"
port of Perl to the Windows platform.  This includes both 32\-bit and
64\-bit Windows operating systems.  The resulting Perl requires no
additional software to run (other than what came with your operating
system).  Currently, this port is capable of using one of the
following compilers on the Intel x86 architecture:
.PP
.Vb 3
\&      Microsoft Visual C++    version 6.0 or later
\&      Gcc by mingw.org        gcc version 3.2 or later
\&      Gcc by mingw\-w64.sf.net gcc version 4.4.3 or later
.Ve
.PP
Note that the last two of these are actually competing projects both
delivering complete gcc toolchain for \s-1MS\s0 Windows:
.IP "<http://mingw.org>" 4
.IX Item "<http://mingw.org>"
Delivers gcc toolchain targeting 32\-bit Windows platform.
.IP "<http://mingw\-w64.sf.net>" 4
.IX Item "<http://mingw-w64.sf.net>"
Delivers gcc toolchain targeting both 64\-bit Windows and 32\-bit Windows
platforms (despite the project name \*(L"mingw\-w64\*(R" they are not only 64\-bit
oriented). They deliver the native gcc compilers and cross-compilers
that are also supported by perl's makefile.
.PP
The Microsoft Visual \*(C+ compilers are also now being given away free. They are
available as \*(L"Visual \*(C+ Toolkit 2003\*(R" or \*(L"Visual \*(C+ 2005/2008/2010/2012 Express
Edition\*(R" (and also as part of the \*(L".NET Framework \s-1SDK\*(R"\s0) and are the same
compilers that ship with \*(L"Visual \*(C+ .NET 2003 Professional\*(R" or \*(L"Visual \*(C+
2005/2008/2010/2012 Professional\*(R" respectively.
.PP
This port can also be built on \s-1IA64/AMD64\s0 using:
.PP
.Vb 2
\&      Microsoft Platform SDK    Nov 2001 (64\-bit compiler and tools)
\&      MinGW64 compiler (gcc version 4.4.3 or later)
.Ve
.PP
The Windows \s-1SDK\s0 can be downloaded from <http://www.microsoft.com/>.
The MinGW64 compiler is available at <http://sourceforge.net/projects/mingw\-w64>.
The latter is actually a cross-compiler targeting Win64. There's also a trimmed
down compiler (no java, or gfortran) suitable for building perl available at:
<http://strawberryperl.com/package/kmx/64_gcctoolchain/>
.PP
\&\s-1NOTE:\s0 If you're using a 32\-bit compiler to build perl on a 64\-bit Windows
operating system, then you should set the \s-1WIN64\s0 environment variable to \*(L"undef\*(R".
Also, the trimmed down compiler only passes tests when \s-1USE_ITHREADS\s0 *= define
(as opposed to undef) and when the \s-1CFG\s0 *= Debug line is commented out.
.PP
This port fully supports MakeMaker (the set of modules that
is used to build extensions to perl).  Therefore, you should be
able to build and install most extensions found in the \s-1CPAN\s0 sites.
See \*(L"Usage Hints for Perl on Windows\*(R" below for general hints about this.
.SS "Setting Up Perl on Windows"
.IX Subsection "Setting Up Perl on Windows"
.IP "Make" 4
.IX Item "Make"
You need a \*(L"make\*(R" program to build the sources.  If you are using
Visual \*(C+ or the Windows \s-1SDK\s0 tools, nmake will work.  Builds using
the gcc need dmake.
.Sp
dmake is a freely available make that has very nice macro features
and parallelability.
.Sp
A port of dmake for Windows is available from:
.Sp
<http://search.cpan.org/dist/dmake/>
.Sp
Fetch and install dmake somewhere on your path.
.IP "Command Shell" 4
.IX Item "Command Shell"
Use the default \*(L"cmd\*(R" shell that comes with Windows.  Some versions of the
popular 4DOS/NT shell have incompatibilities that may cause you trouble.
If the build fails under that shell, try building again with the cmd
shell.
.Sp
Make sure the path to the build directory does not contain spaces.  The
build usually works in this circumstance, but some tests will fail.
.IP "Microsoft Visual \*(C+" 4
.IX Item "Microsoft Visual "
The nmake that comes with Visual \*(C+ will suffice for building.
You will need to run the \s-1VCVARS32.BAT\s0 file, usually found somewhere
like C:\eProgram Files\eMicrosoft Visual Studio\eVC98\eBin.
This will set your build environment.
.Sp
You can also use dmake to build using Visual \*(C+; provided, however,
you set \s-1OSRELEASE\s0 to \*(L"microsft\*(R" (or whatever the directory name
under which the Visual C dmake configuration lives) in your environment
and edit win32/config.vc to change \*(L"make=nmake\*(R" into \*(L"make=dmake\*(R".  The
latter step is only essential if you want to use dmake as your default
make for building extensions using MakeMaker.
.IP "Microsoft Visual \*(C+ 2008/2010/2012 Express Edition" 4
.IX Item "Microsoft Visual 2008/2010/2012 Express Edition"
These free versions of Visual \*(C+ 2008/2010/2012 Professional contain the same
compilers and linkers that ship with the full versions, and also contain
everything necessary to build Perl, rather than requiring a separate download
of the Windows \s-1SDK\s0 like previous versions did.
.Sp
These packages can be downloaded by searching in the Download Center at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)
.Sp
Install Visual \*(C+ 2008/2010/2012 Express, then setup your environment using, e.g.
.Sp
.Vb 1
\&        C:\eProgram Files\eMicrosoft Visual Studio 11.0\eCommon7\eTools\evsvars32.bat
.Ve
.Sp
(assuming the default installation location was chosen).
.Sp
Perl should now build using the win32/Makefile.  You will need to edit that
file to set \s-1CCTYPE\s0 to \s-1MSVC90FREE\s0 or \s-1MSVC100FREE\s0 first.
.IP "Microsoft Visual \*(C+ 2005 Express Edition" 4
.IX Item "Microsoft Visual 2005 Express Edition"
This free version of Visual \*(C+ 2005 Professional contains the same compiler
and linker that ship with the full version, but doesn't contain everything
necessary to build Perl.
.Sp
You will also need to download the \*(L"Windows \s-1SDK\*(R" \s0(the \*(L"Core \s-1SDK\*(R"\s0 and \*(L"\s-1MDAC
SDK\*(R"\s0 components are required) for more header files and libraries.
.Sp
These packages can both be downloaded by searching in the Download Center at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)
.Sp
Try to obtain the latest version of the Windows \s-1SDK. \s0 Sometimes these packages
contain a particular Windows \s-1OS\s0 version in their name, but actually work on
other \s-1OS\s0 versions too.  For example, the \*(L"Windows Server 2003 R2 Platform \s-1SDK\*(R"\s0
also runs on Windows \s-1XP SP2\s0 and Windows 2000.
.Sp
Install Visual \*(C+ 2005 first, then the Platform \s-1SDK. \s0 Setup your environment
as follows (assuming default installation locations were chosen):
.Sp
.Vb 1
\&        SET PlatformSDKDir=C:\eProgram Files\eMicrosoft Platform SDK
\&
\&        SET PATH=%SystemRoot%\esystem32;%SystemRoot%;C:\eProgram Files\eMicrosoft Visual Studio 8\eCommon7\eIDE;C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eBIN;C:\eProgram Files\eMicrosoft Visual Studio 8\eCommon7\eTools;C:\eProgram Files\eMicrosoft Visual Studio 8\eSDK\ev2.0\ebin;C:\eWINDOWS\eMicrosoft.NET\eFramework\ev2.0.50727;C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eVCPackages;%PlatformSDKDir%\eBin
\&
\&        SET INCLUDE=C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eINCLUDE;%PlatformSDKDir%\einclude
\&
\&        SET LIB=C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eLIB;C:\eProgram Files\eMicrosoft Visual Studio 8\eSDK\ev2.0\elib;%PlatformSDKDir%\elib
\&
\&        SET LIBPATH=C:\eWINDOWS\eMicrosoft.NET\eFramework\ev2.0.50727
.Ve
.Sp
(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into \*(L"C:\eProgram Files\eMicrosoft \s-1SDK\*(R",\s0
while the latest versions install into version-specific locations such as
\&\*(L"C:\eProgram Files\eMicrosoft Platform \s-1SDK\s0 for Windows Server 2003 R2\*(R".)
.Sp
Perl should now build using the win32/Makefile.  You will need to edit that
file to set
.Sp
.Vb 1
\&        CCTYPE = MSVC80FREE
.Ve
.Sp
and to set \s-1CCHOME, CCINCDIR\s0 and \s-1CCLIBDIR\s0 as per the environment setup above.
.IP "Microsoft Visual \*(C+ Toolkit 2003" 4
.IX Item "Microsoft Visual Toolkit 2003"
This free toolkit contains the same compiler and linker that ship with
Visual \*(C+ .NET 2003 Professional, but doesn't contain everything
necessary to build Perl.
.Sp
You will also need to download the \*(L"Platform \s-1SDK\*(R" \s0(the \*(L"Core \s-1SDK\*(R"\s0 and \*(L"\s-1MDAC
SDK\*(R"\s0 components are required) for header files, libraries and rc.exe, and
\&\*(L".NET Framework \s-1SDK\*(R"\s0 for more libraries and nmake.exe.  Note that the latter
(which also includes the free compiler and linker) requires the \*(L".NET
Framework Redistributable\*(R" to be installed first.  This can be downloaded and
installed separately, but is included in the \*(L"Visual \*(C+ Toolkit 2003\*(R" anyway.
.Sp
These packages can all be downloaded by searching in the Download Center at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)
.Sp
Try to obtain the latest version of the Windows \s-1SDK. \s0 Sometimes these packages
contain a particular Windows \s-1OS\s0 version in their name, but actually work on
other \s-1OS\s0 versions too.  For example, the \*(L"Windows Server 2003 R2 Platform \s-1SDK\*(R"\s0
also runs on Windows \s-1XP SP2\s0 and Windows 2000.
.Sp
Install the Toolkit first, then the Platform \s-1SDK,\s0 then the .NET Framework \s-1SDK.\s0
Setup your environment as follows (assuming default installation locations
were chosen):
.Sp
.Vb 1
\&        SET PlatformSDKDir=C:\eProgram Files\eMicrosoft Platform SDK
\&
\&        SET PATH=%SystemRoot%\esystem32;%SystemRoot%;C:\eProgram Files\eMicrosoft Visual C++ Toolkit 2003\ebin;%PlatformSDKDir%\eBin;C:\eProgram Files\eMicrosoft.NET\eSDK\ev1.1\eBin
\&
\&        SET INCLUDE=C:\eProgram Files\eMicrosoft Visual C++ Toolkit 2003\einclude;%PlatformSDKDir%\einclude;C:\eProgram Files\eMicrosoft Visual Studio .NET 2003\eVc7\einclude
\&
\&        SET LIB=C:\eProgram Files\eMicrosoft Visual C++ Toolkit 2003\elib;%PlatformSDKDir%\elib;C:\eProgram Files\eMicrosoft Visual Studio .NET 2003\eVc7\elib
.Ve
.Sp
(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into \*(L"C:\eProgram Files\eMicrosoft \s-1SDK\*(R",\s0
while the latest versions install into version-specific locations such as
\&\*(L"C:\eProgram Files\eMicrosoft Platform \s-1SDK\s0 for Windows Server 2003 R2\*(R".)
.Sp
Several required files will still be missing:
.RS 4
.IP "\(bu" 4
cvtres.exe is required by link.exe when using a .res file.  It is actually
installed by the .NET Framework \s-1SDK,\s0 but into a location such as the
following:
.Sp
.Vb 1
\&        C:\eWINDOWS\eMicrosoft.NET\eFramework\ev1.1.4322
.Ve
.Sp
Copy it from there to \f(CW%PlatformSDKDir\fR%\eBin
.IP "\(bu" 4
lib.exe is normally used to build libraries, but link.exe with the /lib
option also works, so change win32/config.vc to use it instead:
.Sp
Change the line reading:
.Sp
.Vb 1
\&        ar=\*(Aqlib\*(Aq
.Ve
.Sp
to:
.Sp
.Vb 1
\&        ar=\*(Aqlink /lib\*(Aq
.Ve
.Sp
It may also be useful to create a batch file called lib.bat in
C:\eProgram Files\eMicrosoft Visual \*(C+ Toolkit 2003\ebin containing:
.Sp
.Vb 2
\&        @echo off
\&        link /lib %*
.Ve
.Sp
for the benefit of any naughty C extension modules that you might want to build
later which explicitly reference \*(L"lib\*(R" rather than taking their value from
\&\f(CW$Config\fR{ar}.
.IP "\(bu" 4
setargv.obj is required to build perlglob.exe (and perl.exe if the \s-1USE_SETARGV\s0
option is enabled).  The Platform \s-1SDK\s0 supplies this object file in source form
in \f(CW%PlatformSDKDir\fR%\esrc\ecrt.  Copy setargv.c, cruntime.h and
internal.h from there to some temporary location and build setargv.obj using
.Sp
.Vb 1
\&        cl.exe /c /I. /D_CRTBLD setargv.c
.Ve
.Sp
Then copy setargv.obj to \f(CW%PlatformSDKDir\fR%\elib
.Sp
Alternatively, if you don't need perlglob.exe and don't need to enable the
\&\s-1USE_SETARGV\s0 option then you can safely just remove all mention of $(\s-1GLOBEXE\s0)
from win32/Makefile and setargv.obj won't be required anyway.
.RE
.RS 4
.Sp
Perl should now build using the win32/Makefile.  You will need to edit that
file to set
.Sp
.Vb 1
\&        CCTYPE = MSVC70FREE
.Ve
.Sp
and to set \s-1CCHOME, CCINCDIR\s0 and \s-1CCLIBDIR\s0 as per the environment setup above.
.RE
.IP "Microsoft Platform \s-1SDK\s0 64\-bit Compiler" 4
.IX Item "Microsoft Platform SDK 64-bit Compiler"
The nmake that comes with the Platform \s-1SDK\s0 will suffice for building
Perl.  Make sure you are building within one of the \*(L"Build Environment\*(R"
shells available after you install the Platform \s-1SDK\s0 from the Start Menu.
.IP "MinGW release 3 with gcc" 4
.IX Item "MinGW release 3 with gcc"
Perl can be compiled with gcc from MinGW release 3 and later (using gcc 3.2.x
and later).  It can be downloaded here:
.Sp
<http://www.mingw.org/>
.Sp
You also need dmake.  See \*(L"Make\*(R" above on how to get it.
.SS "Building"
.IX Subsection "Building"
.IP "\(bu" 4
Make sure you are in the \*(L"win32\*(R" subdirectory under the perl toplevel.
This directory contains a \*(L"Makefile\*(R" that will work with
versions of nmake that come with Visual \*(C+ or the Windows \s-1SDK,\s0 and
a dmake \*(L"makefile.mk\*(R" that will work for all supported compilers.  The
defaults in the dmake makefile are setup to build using MinGW/gcc.
.IP "\(bu" 4
Edit the makefile.mk (or Makefile, if you're using nmake) and change
the values of \s-1INST_DRV\s0 and \s-1INST_TOP.  \s0 You can also enable various
build flags.  These are explained in the makefiles.
.Sp
Note that it is generally not a good idea to try to build a perl with
\&\s-1INST_DRV\s0 and \s-1INST_TOP\s0 set to a path that already exists from a previous
build.  In particular, this may cause problems with the
lib/ExtUtils/t/Embed.t test, which attempts to build a test program and
may end up building against the installed perl's lib/CORE directory rather
than the one being tested.
.Sp
You will have to make sure that \s-1CCTYPE\s0 is set correctly and that
\&\s-1CCHOME\s0 points to wherever you installed your compiler.
.Sp
If building with the cross-compiler provided by
mingw\-w64.sourceforge.net you'll need to uncomment the line that sets
\&\s-1GCCCROSS\s0 in the makefile.mk. Do this only if it's the cross-compiler \- ie
only if the bin folder doesn't contain a gcc.exe. (The cross-compiler
does not provide a gcc.exe, g++.exe, ar.exe, etc. Instead, all of these
executables are prefixed with 'x86_64\-w64\-mingw32\-'.)
.Sp
The default value for \s-1CCHOME\s0 in the makefiles for Visual \*(C+
may not be correct for some versions.  Make sure the default exists
and is valid.
.Sp
You may also need to comment out the \f(CW\*(C`DELAYLOAD = ...\*(C'\fR line in the
Makefile if you're using \s-1VC++ 6.0\s0 without the latest service pack and
the linker reports an internal error.
.Sp
If you want build some core extensions statically into perl's dll, specify
them in the \s-1STATIC_EXT\s0 macro.
.Sp
Be sure to read the instructions near the top of the makefiles carefully.
.IP "\(bu" 4
Type \*(L"dmake\*(R" (or \*(L"nmake\*(R" if you are using that make).
.Sp
This should build everything.  Specifically, it will create perl.exe,
perl518.dll at the perl toplevel, and various other extension dll's
under the lib\eauto directory.  If the build fails for any reason, make
sure you have done the previous steps correctly.
.SS "Testing Perl on Windows"
.IX Subsection "Testing Perl on Windows"
Type \*(L"dmake test\*(R" (or \*(L"nmake test\*(R").  This will run most of the tests from
the testsuite (many tests will be skipped).
.PP
There should be no test failures.
.PP
Some test failures may occur if you use a command shell other than the
native \*(L"cmd.exe\*(R", or if you are building from a path that contains
spaces.  So don't do that.
.PP
If you are running the tests from a emacs shell window, you may see
failures in op/stat.t.  Run \*(L"dmake test-notty\*(R" in that case.
.PP
If you run the tests on a \s-1FAT\s0 partition, you may see some failures for
\&\f(CW\*(C`link()\*(C'\fR related tests (\fIop/write.t\fR, \fIop/stat.t\fR ...). Testing on
\&\s-1NTFS\s0 avoids these errors.
.PP
Furthermore, you should make sure that during \f(CW\*(C`make test\*(C'\fR you do not
have any \s-1GNU\s0 tool packages in your path: some toolkits like Unixutils
include some tools (\f(CW\*(C`type\*(C'\fR for instance) which override the Windows
ones and makes tests fail. Remove them from your path while testing to
avoid these errors.
.PP
Please report any other failures as described under \*(L"\s-1BUGS AND CAVEATS\*(R"\s0.
.SS "Installation of Perl on Windows"
.IX Subsection "Installation of Perl on Windows"
Type \*(L"dmake install\*(R" (or \*(L"nmake install\*(R").  This will put the newly
built perl and the libraries under whatever \f(CW\*(C`INST_TOP\*(C'\fR points to in the
Makefile.  It will also install the pod documentation under
\&\f(CW\*(C`$INST_TOP\e$INST_VER\elib\epod\*(C'\fR and \s-1HTML\s0 versions of the same under
\&\f(CW\*(C`$INST_TOP\e$INST_VER\elib\epod\ehtml\*(C'\fR.
.PP
To use the Perl you just installed you will need to add a new entry to
your \s-1PATH\s0 environment variable: \f(CW\*(C`$INST_TOP\ebin\*(C'\fR, e.g.
.PP
.Vb 1
\&    set PATH=c:\eperl\ebin;%PATH%
.Ve
.PP
If you opted to uncomment \f(CW\*(C`INST_VER\*(C'\fR and \f(CW\*(C`INST_ARCH\*(C'\fR in the makefile
then the installation structure is a little more complicated and you will
need to add two new \s-1PATH\s0 components instead: \f(CW\*(C`$INST_TOP\e$INST_VER\ebin\*(C'\fR and
\&\f(CW\*(C`$INST_TOP\e$INST_VER\ebin\e$ARCHNAME\*(C'\fR, e.g.
.PP
.Vb 1
\&    set PATH=c:\eperl\e5.6.0\ebin;c:\eperl\e5.6.0\ebin\eMSWin32\-x86;%PATH%
.Ve
.SS "Usage Hints for Perl on Windows"
.IX Subsection "Usage Hints for Perl on Windows"
.IP "Environment Variables" 4
.IX Item "Environment Variables"
The installation paths that you set during the build get compiled
into perl, so you don't have to do anything additional to start
using that perl (except add its location to your \s-1PATH\s0 variable).
.Sp
If you put extensions in unusual places, you can set \s-1PERL5LIB\s0
to a list of paths separated by semicolons where you want perl
to look for libraries.  Look for descriptions of other environment
variables you can set in perlrun.
.Sp
You can also control the shell that perl uses to run \fIsystem()\fR and
backtick commands via \s-1PERL5SHELL. \s0 See perlrun.
.Sp
Perl does not depend on the registry, but it can look up certain default
values if you choose to put them there.  Perl attempts to read entries from
\&\f(CW\*(C`HKEY_CURRENT_USER\eSoftware\ePerl\*(C'\fR and \f(CW\*(C`HKEY_LOCAL_MACHINE\eSoftware\ePerl\*(C'\fR.
Entries in the former override entries in the latter.  One or more of the
following entries (of type \s-1REG_SZ\s0 or \s-1REG_EXPAND_SZ\s0) may be set:
.Sp
.Vb 7
\&    lib\-$]              version\-specific standard library path to add to @INC
\&    lib                 standard library path to add to @INC
\&    sitelib\-$]          version\-specific site library path to add to @INC
\&    sitelib             site library path to add to @INC
\&    vendorlib\-$]        version\-specific vendor library path to add to @INC
\&    vendorlib           vendor library path to add to @INC
\&    PERL*               fallback for all %ENV lookups that begin with "PERL"
.Ve
.Sp
Note the \f(CW$]\fR in the above is not literal.  Substitute whatever version
of perl you want to honor that entry, e.g. \f(CW5.6.0\fR.  Paths must be
separated with semicolons, as usual on Windows.
.IP "File Globbing" 4
.IX Item "File Globbing"
By default, perl handles file globbing using the File::Glob extension,
which provides portable globbing.
.Sp
If you want perl to use globbing that emulates the quirks of \s-1DOS\s0
filename conventions, you might want to consider using File::DosGlob
to override the internal \fIglob()\fR implementation.  See File::DosGlob for
details.
.IP "Using perl from the command line" 4
.IX Item "Using perl from the command line"
If you are accustomed to using perl from various command-line
shells found in \s-1UNIX\s0 environments, you will be less than pleased
with what Windows offers by way of a command shell.
.Sp
The crucial thing to understand about the Windows environment is that
the command line you type in is processed twice before Perl sees it.
First, your command shell (usually \s-1CMD.EXE\s0) preprocesses the command
line, to handle redirection, environment variable expansion, and
location of the executable to run. Then, the perl executable splits
the remaining command line into individual arguments, using the
C runtime library upon which Perl was built.
.Sp
It is particularly important to note that neither the shell nor the C
runtime do any wildcard expansions of command-line arguments (so
wildcards need not be quoted).  Also, the quoting behaviours of the
shell and the C runtime are rudimentary at best (and may, if you are
using a non-standard shell, be inconsistent).  The only (useful) quote
character is the double quote (").  It can be used to protect spaces
and other special characters in arguments.
.Sp
The Windows documentation describes the shell parsing rules here:
<http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en\-us/cmd.mspx?mfr=true>
and the C runtime parsing rules here:
<http://msdn.microsoft.com/en\-us/library/17w5ykft%28v=VS.100%29.aspx>.
.Sp
Here are some further observations based on experiments: The C runtime
breaks arguments at spaces and passes them to programs in argc/argv.
Double quotes can be used to prevent arguments with spaces in them from
being split up.  You can put a double quote in an argument by escaping
it with a backslash and enclosing the whole argument within double quotes.
The backslash and the pair of double quotes surrounding the argument will
be stripped by the C runtime.
.Sp
The file redirection characters \*(L"<\*(R", \*(L">\*(R", and \*(L"|\*(R" can be quoted by
double quotes (although there are suggestions that this may not always
be true).  Single quotes are not treated as quotes by the shell or
the C runtime, they don't get stripped by the shell (just to make
this type of quoting completely useless).  The caret \*(L"^\*(R" has also
been observed to behave as a quoting character, but this appears
to be a shell feature, and the caret is not stripped from the command
line, so Perl still sees it (and the C runtime phase does not treat
the caret as a quote character).
.Sp
Here are some examples of usage of the \*(L"cmd\*(R" shell:
.Sp
This prints two doublequotes:
.Sp
.Vb 1
\&    perl \-e "print \*(Aq\e"\e"\*(Aq "
.Ve
.Sp
This does the same:
.Sp
.Vb 1
\&    perl \-e "print \e"\e\e\e"\e\e\e"\e" "
.Ve
.Sp
This prints \*(L"bar\*(R" and writes \*(L"foo\*(R" to the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" > blurch
.Ve
.Sp
This prints \*(L"foo\*(R" (\*(L"bar\*(R" disappears into nowhereland):
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2> nul
.Ve
.Sp
This prints \*(L"bar\*(R" and writes \*(L"foo\*(R" into the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 1> blurch
.Ve
.Sp
This pipes \*(L"foo\*(R" to the \*(L"less\*(R" pager and prints \*(L"bar\*(R" on the console:
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" | less
.Ve
.Sp
This pipes \*(L"foo\enbar\en\*(R" to the less pager:
.Sp
.Vb 1
\&    perl \-le "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2>&1 | less
.Ve
.Sp
This pipes \*(L"foo\*(R" to the pager and writes \*(L"bar\*(R" in the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2> blurch | less
.Ve
.Sp
Discovering the usefulness of the \*(L"command.com\*(R" shell on Windows 9x
is left as an exercise to the reader :)
.Sp
One particularly pernicious problem with the 4NT command shell for
Windows is that it (nearly) always treats a % character as indicating
that environment variable expansion is needed.  Under this shell, it is
therefore important to always double any % characters which you want
Perl to see (for example, for hash variables), even when they are
quoted.
.IP "Building Extensions" 4
.IX Item "Building Extensions"
The Comprehensive Perl Archive Network (\s-1CPAN\s0) offers a wealth
of extensions, some of which require a C compiler to build.
Look in <http://www.cpan.org/> for more information on \s-1CPAN.\s0
.Sp
Note that not all of the extensions available from \s-1CPAN\s0 may work
in the Windows environment; you should check the information at
<http://testers.cpan.org/> before investing too much effort into
porting modules that don't readily build.
.Sp
Most extensions (whether they require a C compiler or not) can
be built, tested and installed with the standard mantra:
.Sp
.Vb 4
\&    perl Makefile.PL
\&    $MAKE
\&    $MAKE test
\&    $MAKE install
.Ve
.Sp
where \f(CW$MAKE\fR is whatever 'make' program you have configured perl to
use.  Use \*(L"perl \-V:make\*(R" to find out what this is.  Some extensions
may not provide a testsuite (so \*(L"$MAKE test\*(R" may not do anything or
fail), but most serious ones do.
.Sp
It is important that you use a supported 'make' program, and
ensure Config.pm knows about it.  If you don't have nmake, you can
either get dmake from the location mentioned earlier or get an
old version of nmake reportedly available from:
.Sp
<http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN\-US/nmake15.exe>
.Sp
Another option is to use the make written in Perl, available from
\&\s-1CPAN.\s0
.Sp
<http://www.cpan.org/modules/by\-module/Make/>
.Sp
You may also use dmake.  See \*(L"Make\*(R" above on how to get it.
.Sp
Note that MakeMaker actually emits makefiles with different syntax
depending on what 'make' it thinks you are using.  Therefore, it is
important that one of the following values appears in Config.pm:
.Sp
.Vb 4
\&    make=\*(Aqnmake\*(Aq        # MakeMaker emits nmake syntax
\&    make=\*(Aqdmake\*(Aq        # MakeMaker emits dmake syntax
\&    any other value     # MakeMaker emits generic make syntax
\&                            (e.g GNU make, or Perl make)
.Ve
.Sp
If the value doesn't match the 'make' program you want to use,
edit Config.pm to fix it.
.Sp
If a module implements XSUBs, you will need one of the supported
C compilers.  You must make sure you have set up the environment for
the compiler for command-line compilation.
.Sp
If a module does not build for some reason, look carefully for
why it failed, and report problems to the module author.  If
it looks like the extension building support is at fault, report
that with full details of how the build failed using the perlbug
utility.
.IP "Command-line Wildcard Expansion" 4
.IX Item "Command-line Wildcard Expansion"
The default command shells on \s-1DOS\s0 descendant operating systems (such
as they are) usually do not expand wildcard arguments supplied to
programs.  They consider it the application's job to handle that.
This is commonly achieved by linking the application (in our case,
perl) with startup code that the C runtime libraries usually provide.
However, doing that results in incompatible perl versions (since the
behavior of the argv expansion code differs depending on the
compiler, and it is even buggy on some compilers).  Besides, it may
be a source of frustration if you use such a perl binary with an
alternate shell that *does* expand wildcards.
.Sp
Instead, the following solution works rather well. The nice things
about it are 1) you can start using it right away; 2) it is more
powerful, because it will do the right thing with a pattern like
*/*/*.c; 3) you can decide whether you do/don't want to use it; and
4) you can extend the method to add any customizations (or even
entirely different kinds of wildcard expansion).
.Sp
.Vb 10
\&        C:\e> copy con c:\eperl\elib\eWild.pm
\&        # Wild.pm \- emulate shell @ARGV expansion on shells that don\*(Aqt
\&        use File::DosGlob;
\&        @ARGV = map {
\&                      my @g = File::DosGlob::glob($_) if /[*?]/;
\&                      @g ? @g : $_;
\&                    } @ARGV;
\&        1;
\&        ^Z
\&        C:\e> set PERL5OPT=\-MWild
\&        C:\e> perl \-le "for (@ARGV) { print }" */*/perl*.c
\&        p4view/perl/perl.c
\&        p4view/perl/perlio.c
\&        p4view/perl/perly.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
.Ve
.Sp
Note there are two distinct steps there: 1) You'll have to create
Wild.pm and put it in your perl lib directory. 2) You'll need to
set the \s-1PERL5OPT\s0 environment variable.  If you want argv expansion
to be the default, just set \s-1PERL5OPT\s0 in your default startup
environment.
.Sp
If you are using the Visual C compiler, you can get the C runtime's
command line wildcard expansion built into perl binary.  The resulting
binary will always expand unquoted command lines, which may not be
what you want if you use a shell that does that for you.  The expansion
done is also somewhat less powerful than the approach suggested above.
.IP "Notes on 64\-bit Windows" 4
.IX Item "Notes on 64-bit Windows"
Windows .NET Server supports the \s-1LLP64\s0 data model on the Intel Itanium
architecture.
.Sp
The \s-1LLP64\s0 data model is different from the \s-1LP64\s0 data model that is the
norm on 64\-bit Unix platforms.  In the former, \f(CW\*(C`int\*(C'\fR and \f(CW\*(C`long\*(C'\fR are
both 32\-bit data types, while pointers are 64 bits wide.  In addition,
there is a separate 64\-bit wide integral type, \f(CW\*(C`_\|_int64\*(C'\fR.  In contrast,
the \s-1LP64\s0 data model that is pervasive on Unix platforms provides \f(CW\*(C`int\*(C'\fR
as the 32\-bit type, while both the \f(CW\*(C`long\*(C'\fR type and pointers are of
64\-bit precision.  Note that both models provide for 64\-bits of
addressability.
.Sp
64\-bit Windows running on Itanium is capable of running 32\-bit x86
binaries transparently.  This means that you could use a 32\-bit build
of Perl on a 64\-bit system.  Given this, why would one want to build
a 64\-bit build of Perl?  Here are some reasons why you would bother:
.RS 4
.IP "\(bu" 4
A 64\-bit native application will run much more efficiently on
Itanium hardware.
.IP "\(bu" 4
There is no 2GB limit on process size.
.IP "\(bu" 4
Perl automatically provides large file support when built under
64\-bit Windows.
.IP "\(bu" 4
Embedding Perl inside a 64\-bit application.
.RE
.RS 4
.RE
.SS "Running Perl Scripts"
.IX Subsection "Running Perl Scripts"
Perl scripts on \s-1UNIX\s0 use the \*(L"#!\*(R" (a.k.a \*(L"shebang\*(R") line to
indicate to the \s-1OS\s0 that it should execute the file using perl.
Windows has no comparable means to indicate arbitrary files are
executables.
.PP
Instead, all available methods to execute plain text files on
Windows rely on the file \*(L"extension\*(R".  There are three methods
to use this to execute perl scripts:
.IP "1." 8
There is a facility called \*(L"file extension associations\*(R".  This can be
manipulated via the two commands \*(L"assoc\*(R" and \*(L"ftype\*(R" that come
standard with Windows.  Type \*(L"ftype /?\*(R" for a complete example of how
to set this up for perl scripts (Say what?  You thought Windows
wasn't perl-ready? :).
.IP "2." 8
Since file associations don't work everywhere, and there are
reportedly bugs with file associations where it does work, the
old method of wrapping the perl script to make it look like a
regular batch file to the \s-1OS,\s0 may be used.  The install process
makes available the \*(L"pl2bat.bat\*(R" script which can be used to wrap
perl scripts into batch files.  For example:
.Sp
.Vb 1
\&        pl2bat foo.pl
.Ve
.Sp
will create the file \*(L"\s-1FOO.BAT\*(R". \s0 Note \*(L"pl2bat\*(R" strips any
\&.pl suffix and adds a .bat suffix to the generated file.
.Sp
If you use the 4DOS/NT or similar command shell, note that
\&\*(L"pl2bat\*(R" uses the \*(L"%*\*(R" variable in the generated batch file to
refer to all the command line arguments, so you may need to make
sure that construct works in batch files.  As of this writing,
4DOS/NT users will need a \*(L"ParameterChar = *\*(R" statement in their
4NT.INI file or will need to execute \*(L"setdos /p*\*(R" in the 4DOS/NT
startup file to enable this to work.
.IP "3." 8
Using \*(L"pl2bat\*(R" has a few problems:  the file name gets changed,
so scripts that rely on \f(CW$0\fR to find what they must do may not
run properly; running \*(L"pl2bat\*(R" replicates the contents of the
original script, and so this process can be maintenance intensive
if the originals get updated often.  A different approach that
avoids both problems is possible.
.Sp
A script called \*(L"runperl.bat\*(R" is available that can be copied
to any filename (along with the .bat suffix).  For example,
if you call it \*(L"foo.bat\*(R", it will run the file \*(L"foo\*(R" when it is
executed.  Since you can run batch files on Windows platforms simply
by typing the name (without the extension), this effectively
runs the file \*(L"foo\*(R", when you type either \*(L"foo\*(R" or \*(L"foo.bat\*(R".
With this method, \*(L"foo.bat\*(R" can even be in a different location
than the file \*(L"foo\*(R", as long as \*(L"foo\*(R" is available somewhere on
the \s-1PATH. \s0 If your scripts are on a filesystem that allows symbolic
links, you can even avoid copying \*(L"runperl.bat\*(R".
.Sp
Here's a diversion:  copy \*(L"runperl.bat\*(R" to \*(L"runperl\*(R", and type
\&\*(L"runperl\*(R".  Explain the observed behavior, or lack thereof. :)
Hint: .gnidnats llits er'uoy fi ,\*(L"lrepnur\*(R" eteled :tniH
.SS "Miscellaneous Things"
.IX Subsection "Miscellaneous Things"
A full set of \s-1HTML\s0 documentation is installed, so you should be
able to use it if you have a web browser installed on your
system.
.PP
\&\f(CW\*(C`perldoc\*(C'\fR is also a useful tool for browsing information contained
in the documentation, especially in conjunction with a pager
like \f(CW\*(C`less\*(C'\fR (recent versions of which have Windows support).  You may
have to set the \s-1PAGER\s0 environment variable to use a specific pager.
\&\*(L"perldoc \-f foo\*(R" will print information about the perl operator
\&\*(L"foo\*(R".
.PP
One common mistake when using this port with a \s-1GUI\s0 library like \f(CW\*(C`Tk\*(C'\fR
is assuming that Perl's normal behavior of opening a command-line
window will go away.  This isn't the case.  If you want to start a copy
of \f(CW\*(C`perl\*(C'\fR without opening a command-line window, use the \f(CW\*(C`wperl\*(C'\fR
executable built during the installation process.  Usage is exactly
the same as normal \f(CW\*(C`perl\*(C'\fR on Windows, except that options like \f(CW\*(C`\-h\*(C'\fR
don't work (since they need a command-line window to print to).
.PP
If you find bugs in perl, you can run \f(CW\*(C`perlbug\*(C'\fR to create a
bug report (you may have to send it manually if \f(CW\*(C`perlbug\*(C'\fR cannot
find a mailer on your system).
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Norton AntiVirus interferes with the build process, particularly if
set to \*(L"AutoProtect, All Files, when Opened\*(R". Unlike large applications
the perl build process opens and modifies a lot of files. Having the
the AntiVirus scan each and every one slows build the process significantly.
Worse, with PERLIO=stdio the build process fails with peculiar messages
as the virus checker interacts badly with miniperl.exe writing configure
files (it seems to either catch file part written and treat it as suspicious,
or virus checker may have it \*(L"locked\*(R" in a way which inhibits miniperl
updating it). The build does complete with
.PP
.Vb 1
\&   set PERLIO=perlio
.Ve
.PP
but that may be just luck. Other AntiVirus software may have similar issues.
.PP
Some of the built-in functions do not act exactly as documented in
perlfunc, and a few are not implemented at all.  To avoid
surprises, particularly if you have had prior exposure to Perl
in other operating environments or if you intend to write code
that will be portable to other environments, see perlport
for a reasonably definitive list of these differences.
.PP
Not all extensions available from \s-1CPAN\s0 may build or work properly
in the Windows environment.  See \*(L"Building Extensions\*(R".
.PP
Most \f(CW\*(C`socket()\*(C'\fR related calls are supported, but they may not
behave as on Unix platforms.  See perlport for the full list.
.PP
Signal handling may not behave as on Unix platforms (where it
doesn't exactly \*(L"behave\*(R", either :).  For instance, calling \f(CW\*(C`die()\*(C'\fR
or \f(CW\*(C`exit()\*(C'\fR from signal handlers will cause an exception, since most
implementations of \f(CW\*(C`signal()\*(C'\fR on Windows are severely crippled.
Thus, signals may work only for simple things like setting a flag
variable in the handler.  Using signals under this port should
currently be considered unsupported.
.PP
Please send detailed descriptions of any problems and solutions that
you may find to <\fIperlbug@perl.org\fR>, along with the output
produced by \f(CW\*(C`perl \-V\*(C'\fR.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The use of a camel with the topic of Perl is a trademark
of O'Reilly and Associates, Inc. Used with permission.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "Gary Ng <71564.1743@CompuServe.COM>" 4
.IX Item "Gary Ng <71564.1743@CompuServe.COM>"
.PD 0
.IP "Gurusamy Sarathy <gsar@activestate.com>" 4
.IX Item "Gurusamy Sarathy <gsar@activestate.com>"
.IP "Nick Ing-Simmons <nick@ing\-simmons.net>" 4
.IX Item "Nick Ing-Simmons <nick@ing-simmons.net>"
.IP "Jan Dubois <jand@activestate.com>" 4
.IX Item "Jan Dubois <jand@activestate.com>"
.IP "Steve Hay <steve.m.hay@googlemail.com>" 4
.IX Item "Steve Hay <steve.m.hay@googlemail.com>"
.PD
.PP
This document is maintained by Jan Dubois.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl
.SH "HISTORY"
.IX Header "HISTORY"
This port was originally contributed by Gary Ng around 5.003_24,
and borrowed from the Hip Communications port that was available
at the time.  Various people have made numerous and sundry hacks
since then.
.PP
GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).
.PP
Support for \s-1PERL_OBJECT\s0 was added in 5.005 (ActiveState Tool Corp).
.PP
Support for \fIfork()\fR emulation was added in 5.6 (ActiveState Tool Corp).
.PP
Win9x support was added in 5.6 (Benjamin Stuhl).
.PP
Support for 64\-bit Windows added in 5.8 (ActiveState Corp).
.PP
Last updated: 02 January 2012
                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlwin325.16.1                              0100644 0001750 0001750 00000126622 12566207427 023113  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLWIN32 1"
.TH PERLWIN32 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlwin32 \- Perl under Windows
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
These are instructions for building Perl under Windows 2000 and later.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Before you start, you should glance through the \s-1README\s0 file
found in the top-level directory to which the Perl distribution
was extracted.  Make sure you read and understand the terms under
which this software is being distributed.
.PP
Also make sure you read \*(L"\s-1BUGS\s0 \s-1AND\s0 \s-1CAVEATS\s0\*(R" below for the
known limitations of this port.
.PP
The \s-1INSTALL\s0 file in the perl top-level has much information that is
only relevant to people building Perl on Unix-like systems.  In
particular, you can safely ignore any information that talks about
\&\*(L"Configure\*(R".
.PP
You may also want to look at one other option for building a perl that
will work on Windows: the \s-1README\s0.cygwin file, which give a different
set of rules to build a perl for Windows.  This method will probably
enable you to build a more Unix-compatible perl, but you will also
need to download and use various other build-time and run-time support
software described in that file.
.PP
This set of instructions is meant to describe a so-called \*(L"native\*(R"
port of Perl to the Windows platform.  This includes both 32\-bit and
64\-bit Windows operating systems.  The resulting Perl requires no
additional software to run (other than what came with your operating
system).  Currently, this port is capable of using one of the
following compilers on the Intel x86 architecture:
.PP
.Vb 3
\&      Microsoft Visual C++    version 6.0 or later
\&      Gcc by mingw.org        gcc version 3.2 or later
\&      Gcc by mingw\-w64.sf.net gcc version 4.4.3 or later
.Ve
.PP
Note that the last two of these are actually competing projects both
delivering complete gcc toolchain for \s-1MS\s0 Windows:
.IP "<http://mingw.org>" 4
.IX Item "<http://mingw.org>"
Delivers gcc toolchain targeting 32\-bit Windows platform.
.IP "http://mingw\-w64.sf.net <http://mingw-w64.sf.net>" 4
.IX Item "http://mingw-w64.sf.net <http://mingw-w64.sf.net>"
Delivers gcc toolchain targeting both 64\-bit Windows and 32\-bit Windows
platforms (despite the project name \*(L"mingw\-w64\*(R" they are not only 64\-bit
oriented). They deliver the native gcc compilers and cross-compilers
that are also supported by perl's makefile.
.PP
The Microsoft Visual \*(C+ compilers are also now being given away free. They are
available as \*(L"Visual \*(C+ Toolkit 2003\*(R" or \*(L"Visual \*(C+ 2005/2008/2010 Express
Edition\*(R" (and also as part of the \*(L".NET Framework \s-1SDK\s0\*(R") and are the same
compilers that ship with \*(L"Visual \*(C+ .NET 2003 Professional\*(R" or \*(L"Visual \*(C+
2005/2008/2010 Professional\*(R" respectively.
.PP
This port can also be built on \s-1IA64/AMD64\s0 using:
.PP
.Vb 2
\&      Microsoft Platform SDK    Nov 2001 (64\-bit compiler and tools)
\&      MinGW64 compiler (gcc version 4.4.3 or later)
.Ve
.PP
The Windows \s-1SDK\s0 can be downloaded from <http://www.microsoft.com/>.
The MinGW64 compiler is available at http://sourceforge.net/projects/mingw\-w64 <http://sourceforge.net/projects/mingw-w64>.
The latter is actually a cross-compiler targeting Win64. There's also a trimmed
down compiler (no java, or gfortran) suitable for building perl available at:
<http://strawberryperl.com/package/kmx/64_gcctoolchain/>
.PP
\&\s-1NOTE:\s0 If you're using a 32\-bit compiler to build perl on a 64\-bit Windows
operating system, then you should set the \s-1WIN64\s0 environment variable to \*(L"undef\*(R".
Also, the trimmed down compiler only passes tests when \s-1USE_ITHREADS\s0 *= define
(as opposed to undef) and when the \s-1CFG\s0 *= Debug line is commented out.
.PP
This port fully supports MakeMaker (the set of modules that
is used to build extensions to perl).  Therefore, you should be
able to build and install most extensions found in the \s-1CPAN\s0 sites.
See \*(L"Usage Hints for Perl on Windows\*(R" below for general hints about this.
.SS "Setting Up Perl on Windows"
.IX Subsection "Setting Up Perl on Windows"
.IP "Make" 4
.IX Item "Make"
You need a \*(L"make\*(R" program to build the sources.  If you are using
Visual \*(C+ or the Windows \s-1SDK\s0 tools, nmake will work.  Builds using
the gcc need dmake.
.Sp
dmake is a freely available make that has very nice macro features
and parallelability.
.Sp
A port of dmake for Windows is available from:
.Sp
<http://search.cpan.org/dist/dmake/>
.Sp
Fetch and install dmake somewhere on your path.
.IP "Command Shell" 4
.IX Item "Command Shell"
Use the default \*(L"cmd\*(R" shell that comes with Windows.  Some versions of the
popular 4DOS/NT shell have incompatibilities that may cause you trouble.
If the build fails under that shell, try building again with the cmd
shell.
.Sp
Make sure the path to the build directory does not contain spaces.  The
build usually works in this circumstance, but some tests will fail.
.IP "Microsoft Visual \*(C+" 4
.IX Item "Microsoft Visual "
The nmake that comes with Visual \*(C+ will suffice for building.
You will need to run the \s-1VCVARS32\s0.BAT file, usually found somewhere
like C:\eProgram Files\eMicrosoft Visual Studio\eVC98\eBin.
This will set your build environment.
.Sp
You can also use dmake to build using Visual \*(C+; provided, however,
you set \s-1OSRELEASE\s0 to \*(L"microsft\*(R" (or whatever the directory name
under which the Visual C dmake configuration lives) in your environment
and edit win32/config.vc to change \*(L"make=nmake\*(R" into \*(L"make=dmake\*(R".  The
latter step is only essential if you want to use dmake as your default
make for building extensions using MakeMaker.
.IP "Microsoft Visual \*(C+ 2008/2010 Express Edition" 4
.IX Item "Microsoft Visual  2008/2010 Express Edition"
These free versions of Visual \*(C+ 2008/2010 Professional contain the same
compilers and linkers that ship with the full versions, and also contain
everything necessary to build Perl, rather than requiring a separate download
of the Windows \s-1SDK\s0 like previous versions did.
.Sp
These packages can be downloaded by searching in the Download Center at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)
.Sp
Install Visual \*(C+ 2008/2010 Express, then setup your environment using, e.g.
.Sp
.Vb 1
\&        C:\eProgram Files\eMicrosoft Visual Studio 10.0\eCommon7\eTools\evsvars32.bat
.Ve
.Sp
(assuming the default installation location was chosen).
.Sp
Perl should now build using the win32/Makefile.  You will need to edit that
file to set \s-1CCTYPE\s0 to \s-1MSVC90FREE\s0 or \s-1MSVC100FREE\s0 first.
.IP "Microsoft Visual \*(C+ 2005 Express Edition" 4
.IX Item "Microsoft Visual  2005 Express Edition"
This free version of Visual \*(C+ 2005 Professional contains the same compiler
and linker that ship with the full version, but doesn't contain everything
necessary to build Perl.
.Sp
You will also need to download the \*(L"Windows \s-1SDK\s0\*(R" (the \*(L"Core \s-1SDK\s0\*(R" and \*(L"\s-1MDAC\s0
\&\s-1SDK\s0\*(R" components are required) for more header files and libraries.
.Sp
These packages can both be downloaded by searching in the Download Center at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)
.Sp
Try to obtain the latest version of the Windows \s-1SDK\s0.  Sometimes these packages
contain a particular Windows \s-1OS\s0 version in their name, but actually work on
other \s-1OS\s0 versions too.  For example, the \*(L"Windows Server 2003 R2 Platform \s-1SDK\s0\*(R"
also runs on Windows \s-1XP\s0 \s-1SP2\s0 and Windows 2000.
.Sp
Install Visual \*(C+ 2005 first, then the Platform \s-1SDK\s0.  Setup your environment
as follows (assuming default installation locations were chosen):
.Sp
.Vb 1
\&        SET PlatformSDKDir=C:\eProgram Files\eMicrosoft Platform SDK
\&
\&        SET PATH=%SystemRoot%\esystem32;%SystemRoot%;C:\eProgram Files\eMicrosoft Visual Studio 8\eCommon7\eIDE;C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eBIN;C:\eProgram Files\eMicrosoft Visual Studio 8\eCommon7\eTools;C:\eProgram Files\eMicrosoft Visual Studio 8\eSDK\ev2.0\ebin;C:\eWINDOWS\eMicrosoft.NET\eFramework\ev2.0.50727;C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eVCPackages;%PlatformSDKDir%\eBin
\&
\&        SET INCLUDE=C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eINCLUDE;%PlatformSDKDir%\einclude
\&
\&        SET LIB=C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eLIB;C:\eProgram Files\eMicrosoft Visual Studio 8\eSDK\ev2.0\elib;%PlatformSDKDir%\elib
\&
\&        SET LIBPATH=C:\eWINDOWS\eMicrosoft.NET\eFramework\ev2.0.50727
.Ve
.Sp
(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into \*(L"C:\eProgram Files\eMicrosoft \s-1SDK\s0\*(R",
while the latest versions install into version-specific locations such as
\&\*(L"C:\eProgram Files\eMicrosoft Platform \s-1SDK\s0 for Windows Server 2003 R2\*(R".)
.Sp
Perl should now build using the win32/Makefile.  You will need to edit that
file to set
.Sp
.Vb 1
\&        CCTYPE = MSVC80FREE
.Ve
.Sp
and to set \s-1CCHOME\s0, \s-1CCINCDIR\s0 and \s-1CCLIBDIR\s0 as per the environment setup above.
.IP "Microsoft Visual \*(C+ Toolkit 2003" 4
.IX Item "Microsoft Visual  Toolkit 2003"
This free toolkit contains the same compiler and linker that ship with
Visual \*(C+ .NET 2003 Professional, but doesn't contain everything
necessary to build Perl.
.Sp
You will also need to download the \*(L"Platform \s-1SDK\s0\*(R" (the \*(L"Core \s-1SDK\s0\*(R" and \*(L"\s-1MDAC\s0
\&\s-1SDK\s0\*(R" components are required) for header files, libraries and rc.exe, and
\&\*(L".NET Framework \s-1SDK\s0\*(R" for more libraries and nmake.exe.  Note that the latter
(which also includes the free compiler and linker) requires the \*(L".NET
Framework Redistributable\*(R" to be installed first.  This can be downloaded and
installed separately, but is included in the \*(L"Visual \*(C+ Toolkit 2003\*(R" anyway.
.Sp
These packages can all be downloaded by searching in the Download Center at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)
.Sp
Try to obtain the latest version of the Windows \s-1SDK\s0.  Sometimes these packages
contain a particular Windows \s-1OS\s0 version in their name, but actually work on
other \s-1OS\s0 versions too.  For example, the \*(L"Windows Server 2003 R2 Platform \s-1SDK\s0\*(R"
also runs on Windows \s-1XP\s0 \s-1SP2\s0 and Windows 2000.
.Sp
Install the Toolkit first, then the Platform \s-1SDK\s0, then the .NET Framework \s-1SDK\s0.
Setup your environment as follows (assuming default installation locations
were chosen):
.Sp
.Vb 1
\&        SET PlatformSDKDir=C:\eProgram Files\eMicrosoft Platform SDK
\&
\&        SET PATH=%SystemRoot%\esystem32;%SystemRoot%;C:\eProgram Files\eMicrosoft Visual C++ Toolkit 2003\ebin;%PlatformSDKDir%\eBin;C:\eProgram Files\eMicrosoft.NET\eSDK\ev1.1\eBin
\&
\&        SET INCLUDE=C:\eProgram Files\eMicrosoft Visual C++ Toolkit 2003\einclude;%PlatformSDKDir%\einclude;C:\eProgram Files\eMicrosoft Visual Studio .NET 2003\eVc7\einclude
\&
\&        SET LIB=C:\eProgram Files\eMicrosoft Visual C++ Toolkit 2003\elib;%PlatformSDKDir%\elib;C:\eProgram Files\eMicrosoft Visual Studio .NET 2003\eVc7\elib
.Ve
.Sp
(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into \*(L"C:\eProgram Files\eMicrosoft \s-1SDK\s0\*(R",
while the latest versions install into version-specific locations such as
\&\*(L"C:\eProgram Files\eMicrosoft Platform \s-1SDK\s0 for Windows Server 2003 R2\*(R".)
.Sp
Several required files will still be missing:
.RS 4
.IP "\(bu" 4
cvtres.exe is required by link.exe when using a .res file.  It is actually
installed by the .NET Framework \s-1SDK\s0, but into a location such as the
following:
.Sp
.Vb 1
\&        C:\eWINDOWS\eMicrosoft.NET\eFramework\ev1.1.4322
.Ve
.Sp
Copy it from there to \f(CW%PlatformSDKDir\fR%\eBin
.IP "\(bu" 4
lib.exe is normally used to build libraries, but link.exe with the /lib
option also works, so change win32/config.vc to use it instead:
.Sp
Change the line reading:
.Sp
.Vb 1
\&        ar=\*(Aqlib\*(Aq
.Ve
.Sp
to:
.Sp
.Vb 1
\&        ar=\*(Aqlink /lib\*(Aq
.Ve
.Sp
It may also be useful to create a batch file called lib.bat in
C:\eProgram Files\eMicrosoft Visual \*(C+ Toolkit 2003\ebin containing:
.Sp
.Vb 2
\&        @echo off
\&        link /lib %*
.Ve
.Sp
for the benefit of any naughty C extension modules that you might want to build
later which explicitly reference \*(L"lib\*(R" rather than taking their value from
\&\f(CW$Config\fR{ar}.
.IP "\(bu" 4
setargv.obj is required to build perlglob.exe (and perl.exe if the \s-1USE_SETARGV\s0
option is enabled).  The Platform \s-1SDK\s0 supplies this object file in source form
in \f(CW%PlatformSDKDir\fR%\esrc\ecrt.  Copy setargv.c, cruntime.h and
internal.h from there to some temporary location and build setargv.obj using
.Sp
.Vb 1
\&        cl.exe /c /I. /D_CRTBLD setargv.c
.Ve
.Sp
Then copy setargv.obj to \f(CW%PlatformSDKDir\fR%\elib
.Sp
Alternatively, if you don't need perlglob.exe and don't need to enable the
\&\s-1USE_SETARGV\s0 option then you can safely just remove all mention of $(\s-1GLOBEXE\s0)
from win32/Makefile and setargv.obj won't be required anyway.
.RE
.RS 4
.Sp
Perl should now build using the win32/Makefile.  You will need to edit that
file to set
.Sp
.Vb 1
\&        CCTYPE = MSVC70FREE
.Ve
.Sp
and to set \s-1CCHOME\s0, \s-1CCINCDIR\s0 and \s-1CCLIBDIR\s0 as per the environment setup above.
.RE
.IP "Microsoft Platform \s-1SDK\s0 64\-bit Compiler" 4
.IX Item "Microsoft Platform SDK 64-bit Compiler"
The nmake that comes with the Platform \s-1SDK\s0 will suffice for building
Perl.  Make sure you are building within one of the \*(L"Build Environment\*(R"
shells available after you install the Platform \s-1SDK\s0 from the Start Menu.
.IP "MinGW release 3 with gcc" 4
.IX Item "MinGW release 3 with gcc"
Perl can be compiled with gcc from MinGW release 3 and later (using gcc 3.2.x
and later).  It can be downloaded here:
.Sp
<http://www.mingw.org/>
.Sp
You also need dmake.  See \*(L"Make\*(R" above on how to get it.
.SS "Building"
.IX Subsection "Building"
.IP "\(bu" 4
Make sure you are in the \*(L"win32\*(R" subdirectory under the perl toplevel.
This directory contains a \*(L"Makefile\*(R" that will work with
versions of nmake that come with Visual \*(C+ or the Windows \s-1SDK\s0, and
a dmake \*(L"makefile.mk\*(R" that will work for all supported compilers.  The
defaults in the dmake makefile are setup to build using MinGW/gcc.
.IP "\(bu" 4
Edit the makefile.mk (or Makefile, if you're using nmake) and change
the values of \s-1INST_DRV\s0 and \s-1INST_TOP\s0.   You can also enable various
build flags.  These are explained in the makefiles.
.Sp
Note that it is generally not a good idea to try to build a perl with
\&\s-1INST_DRV\s0 and \s-1INST_TOP\s0 set to a path that already exists from a previous
build.  In particular, this may cause problems with the
lib/ExtUtils/t/Embed.t test, which attempts to build a test program and
may end up building against the installed perl's lib/CORE directory rather
than the one being tested.
.Sp
You will have to make sure that \s-1CCTYPE\s0 is set correctly and that
\&\s-1CCHOME\s0 points to wherever you installed your compiler.
.Sp
If building with the cross-compiler provided by
mingw\-w64.sourceforge.net you'll need to uncomment the line that sets
\&\s-1GCCCROSS\s0 in the makefile.mk. Do this only if it's the cross-compiler \- ie
only if the bin folder doesn't contain a gcc.exe. (The cross-compiler
does not provide a gcc.exe, g++.exe, ar.exe, etc. Instead, all of these
executables are prefixed with 'x86_64\-w64\-mingw32\-'.)
.Sp
The default value for \s-1CCHOME\s0 in the makefiles for Visual \*(C+
may not be correct for some versions.  Make sure the default exists
and is valid.
.Sp
You may also need to comment out the \f(CW\*(C`DELAYLOAD = ...\*(C'\fR line in the
Makefile if you're using \s-1VC++\s0 6.0 without the latest service pack and
the linker reports an internal error.
.Sp
If you want build some core extensions statically into perl's dll, specify
them in the \s-1STATIC_EXT\s0 macro.
.Sp
Be sure to read the instructions near the top of the makefiles carefully.
.IP "\(bu" 4
Type \*(L"dmake\*(R" (or \*(L"nmake\*(R" if you are using that make).
.Sp
This should build everything.  Specifically, it will create perl.exe,
perl516.dll at the perl toplevel, and various other extension dll's
under the lib\eauto directory.  If the build fails for any reason, make
sure you have done the previous steps correctly.
.SS "Testing Perl on Windows"
.IX Subsection "Testing Perl on Windows"
Type \*(L"dmake test\*(R" (or \*(L"nmake test\*(R").  This will run most of the tests from
the testsuite (many tests will be skipped).
.PP
There should be no test failures.
.PP
Some test failures may occur if you use a command shell other than the
native \*(L"cmd.exe\*(R", or if you are building from a path that contains
spaces.  So don't do that.
.PP
If you are running the tests from a emacs shell window, you may see
failures in op/stat.t.  Run \*(L"dmake test-notty\*(R" in that case.
.PP
If you run the tests on a \s-1FAT\s0 partition, you may see some failures for
\&\f(CW\*(C`link()\*(C'\fR related tests (\fIop/write.t\fR, \fIop/stat.t\fR ...). Testing on
\&\s-1NTFS\s0 avoids these errors.
.PP
Furthermore, you should make sure that during \f(CW\*(C`make test\*(C'\fR you do not
have any \s-1GNU\s0 tool packages in your path: some toolkits like Unixutils
include some tools (\f(CW\*(C`type\*(C'\fR for instance) which override the Windows
ones and makes tests fail. Remove them from your path while testing to
avoid these errors.
.PP
Please report any other failures as described under \*(L"\s-1BUGS\s0 \s-1AND\s0 \s-1CAVEATS\s0\*(R".
.SS "Installation of Perl on Windows"
.IX Subsection "Installation of Perl on Windows"
Type \*(L"dmake install\*(R" (or \*(L"nmake install\*(R").  This will put the newly
built perl and the libraries under whatever \f(CW\*(C`INST_TOP\*(C'\fR points to in the
Makefile.  It will also install the pod documentation under
\&\f(CW\*(C`$INST_TOP\e$INST_VER\elib\epod\*(C'\fR and \s-1HTML\s0 versions of the same under
\&\f(CW\*(C`$INST_TOP\e$INST_VER\elib\epod\ehtml\*(C'\fR.
.PP
To use the Perl you just installed you will need to add a new entry to
your \s-1PATH\s0 environment variable: \f(CW\*(C`$INST_TOP\ebin\*(C'\fR, e.g.
.PP
.Vb 1
\&    set PATH=c:\eperl\ebin;%PATH%
.Ve
.PP
If you opted to uncomment \f(CW\*(C`INST_VER\*(C'\fR and \f(CW\*(C`INST_ARCH\*(C'\fR in the makefile
then the installation structure is a little more complicated and you will
need to add two new \s-1PATH\s0 components instead: \f(CW\*(C`$INST_TOP\e$INST_VER\ebin\*(C'\fR and
\&\f(CW\*(C`$INST_TOP\e$INST_VER\ebin\e$ARCHNAME\*(C'\fR, e.g.
.PP
.Vb 1
\&    set PATH=c:\eperl\e5.6.0\ebin;c:\eperl\e5.6.0\ebin\eMSWin32\-x86;%PATH%
.Ve
.SS "Usage Hints for Perl on Windows"
.IX Subsection "Usage Hints for Perl on Windows"
.IP "Environment Variables" 4
.IX Item "Environment Variables"
The installation paths that you set during the build get compiled
into perl, so you don't have to do anything additional to start
using that perl (except add its location to your \s-1PATH\s0 variable).
.Sp
If you put extensions in unusual places, you can set \s-1PERL5LIB\s0
to a list of paths separated by semicolons where you want perl
to look for libraries.  Look for descriptions of other environment
variables you can set in perlrun.
.Sp
You can also control the shell that perl uses to run \fIsystem()\fR and
backtick commands via \s-1PERL5SHELL\s0.  See perlrun.
.Sp
Perl does not depend on the registry, but it can look up certain default
values if you choose to put them there.  Perl attempts to read entries from
\&\f(CW\*(C`HKEY_CURRENT_USER\eSoftware\ePerl\*(C'\fR and \f(CW\*(C`HKEY_LOCAL_MACHINE\eSoftware\ePerl\*(C'\fR.
Entries in the former override entries in the latter.  One or more of the
following entries (of type \s-1REG_SZ\s0 or \s-1REG_EXPAND_SZ\s0) may be set:
.Sp
.Vb 7
\&    lib\-$]              version\-specific standard library path to add to @INC
\&    lib                 standard library path to add to @INC
\&    sitelib\-$]          version\-specific site library path to add to @INC
\&    sitelib             site library path to add to @INC
\&    vendorlib\-$]        version\-specific vendor library path to add to @INC
\&    vendorlib           vendor library path to add to @INC
\&    PERL*               fallback for all %ENV lookups that begin with "PERL"
.Ve
.Sp
Note the \f(CW$]\fR in the above is not literal.  Substitute whatever version
of perl you want to honor that entry, e.g. \f(CW5.6.0\fR.  Paths must be
separated with semicolons, as usual on Windows.
.IP "File Globbing" 4
.IX Item "File Globbing"
By default, perl handles file globbing using the File::Glob extension,
which provides portable globbing.
.Sp
If you want perl to use globbing that emulates the quirks of \s-1DOS\s0
filename conventions, you might want to consider using File::DosGlob
to override the internal \fIglob()\fR implementation.  See File::DosGlob for
details.
.IP "Using perl from the command line" 4
.IX Item "Using perl from the command line"
If you are accustomed to using perl from various command-line
shells found in \s-1UNIX\s0 environments, you will be less than pleased
with what Windows offers by way of a command shell.
.Sp
The crucial thing to understand about the Windows environment is that
the command line you type in is processed twice before Perl sees it.
First, your command shell (usually \s-1CMD\s0.EXE) preprocesses the command
line, to handle redirection, environment variable expansion, and
location of the executable to run. Then, the perl executable splits
the remaining command line into individual arguments, using the
C runtime library upon which Perl was built.
.Sp
It is particularly important to note that neither the shell nor the C
runtime do any wildcard expansions of command-line arguments (so
wildcards need not be quoted).  Also, the quoting behaviours of the
shell and the C runtime are rudimentary at best (and may, if you are
using a non-standard shell, be inconsistent).  The only (useful) quote
character is the double quote (").  It can be used to protect spaces
and other special characters in arguments.
.Sp
The Windows documentation describes the shell parsing rules here:
http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en\-us/cmd.mspx?mfr=true <http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en-us/cmd.mspx?mfr=true>
and the C runtime parsing rules here:
http://msdn.microsoft.com/en\-us/library/17w5ykft%28v=VS.100%29.aspx <http://msdn.microsoft.com/en-us/library/17w5ykft%28v=VS.100%29.aspx>.
.Sp
Here are some further observations based on experiments: The C runtime
breaks arguments at spaces and passes them to programs in argc/argv.
Double quotes can be used to prevent arguments with spaces in them from
being split up.  You can put a double quote in an argument by escaping
it with a backslash and enclosing the whole argument within double quotes.
The backslash and the pair of double quotes surrounding the argument will
be stripped by the C runtime.
.Sp
The file redirection characters \*(L"<\*(R", \*(L">\*(R", and \*(L"|\*(R" can be quoted by
double quotes (although there are suggestions that this may not always
be true).  Single quotes are not treated as quotes by the shell or
the C runtime, they don't get stripped by the shell (just to make
this type of quoting completely useless).  The caret \*(L"^\*(R" has also
been observed to behave as a quoting character, but this appears
to be a shell feature, and the caret is not stripped from the command
line, so Perl still sees it (and the C runtime phase does not treat
the caret as a quote character).
.Sp
Here are some examples of usage of the \*(L"cmd\*(R" shell:
.Sp
This prints two doublequotes:
.Sp
.Vb 1
\&    perl \-e "print \*(Aq\e"\e"\*(Aq "
.Ve
.Sp
This does the same:
.Sp
.Vb 1
\&    perl \-e "print \e"\e\e\e"\e\e\e"\e" "
.Ve
.Sp
This prints \*(L"bar\*(R" and writes \*(L"foo\*(R" to the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" > blurch
.Ve
.Sp
This prints \*(L"foo\*(R" (\*(L"bar\*(R" disappears into nowhereland):
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2> nul
.Ve
.Sp
This prints \*(L"bar\*(R" and writes \*(L"foo\*(R" into the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 1> blurch
.Ve
.Sp
This pipes \*(L"foo\*(R" to the \*(L"less\*(R" pager and prints \*(L"bar\*(R" on the console:
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" | less
.Ve
.Sp
This pipes \*(L"foo\enbar\en\*(R" to the less pager:
.Sp
.Vb 1
\&    perl \-le "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2>&1 | less
.Ve
.Sp
This pipes \*(L"foo\*(R" to the pager and writes \*(L"bar\*(R" in the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2> blurch | less
.Ve
.Sp
Discovering the usefulness of the \*(L"command.com\*(R" shell on Windows 9x
is left as an exercise to the reader :)
.Sp
One particularly pernicious problem with the 4NT command shell for
Windows is that it (nearly) always treats a % character as indicating
that environment variable expansion is needed.  Under this shell, it is
therefore important to always double any % characters which you want
Perl to see (for example, for hash variables), even when they are
quoted.
.IP "Building Extensions" 4
.IX Item "Building Extensions"
The Comprehensive Perl Archive Network (\s-1CPAN\s0) offers a wealth
of extensions, some of which require a C compiler to build.
Look in <http://www.cpan.org/> for more information on \s-1CPAN\s0.
.Sp
Note that not all of the extensions available from \s-1CPAN\s0 may work
in the Windows environment; you should check the information at
<http://testers.cpan.org/> before investing too much effort into
porting modules that don't readily build.
.Sp
Most extensions (whether they require a C compiler or not) can
be built, tested and installed with the standard mantra:
.Sp
.Vb 4
\&    perl Makefile.PL
\&    $MAKE
\&    $MAKE test
\&    $MAKE install
.Ve
.Sp
where \f(CW$MAKE\fR is whatever 'make' program you have configured perl to
use.  Use \*(L"perl \-V:make\*(R" to find out what this is.  Some extensions
may not provide a testsuite (so \*(L"$MAKE test\*(R" may not do anything or
fail), but most serious ones do.
.Sp
It is important that you use a supported 'make' program, and
ensure Config.pm knows about it.  If you don't have nmake, you can
either get dmake from the location mentioned earlier or get an
old version of nmake reportedly available from:
.Sp
http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN\-US/nmake15.exe <http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN-US/nmake15.exe>
.Sp
Another option is to use the make written in Perl, available from
\&\s-1CPAN\s0.
.Sp
http://www.cpan.org/modules/by\-module/Make/ <http://www.cpan.org/modules/by-module/Make/>
.Sp
You may also use dmake.  See \*(L"Make\*(R" above on how to get it.
.Sp
Note that MakeMaker actually emits makefiles with different syntax
depending on what 'make' it thinks you are using.  Therefore, it is
important that one of the following values appears in Config.pm:
.Sp
.Vb 4
\&    make=\*(Aqnmake\*(Aq        # MakeMaker emits nmake syntax
\&    make=\*(Aqdmake\*(Aq        # MakeMaker emits dmake syntax
\&    any other value     # MakeMaker emits generic make syntax
\&                            (e.g GNU make, or Perl make)
.Ve
.Sp
If the value doesn't match the 'make' program you want to use,
edit Config.pm to fix it.
.Sp
If a module implements XSUBs, you will need one of the supported
C compilers.  You must make sure you have set up the environment for
the compiler for command-line compilation.
.Sp
If a module does not build for some reason, look carefully for
why it failed, and report problems to the module author.  If
it looks like the extension building support is at fault, report
that with full details of how the build failed using the perlbug
utility.
.IP "Command-line Wildcard Expansion" 4
.IX Item "Command-line Wildcard Expansion"
The default command shells on \s-1DOS\s0 descendant operating systems (such
as they are) usually do not expand wildcard arguments supplied to
programs.  They consider it the application's job to handle that.
This is commonly achieved by linking the application (in our case,
perl) with startup code that the C runtime libraries usually provide.
However, doing that results in incompatible perl versions (since the
behavior of the argv expansion code differs depending on the
compiler, and it is even buggy on some compilers).  Besides, it may
be a source of frustration if you use such a perl binary with an
alternate shell that *does* expand wildcards.
.Sp
Instead, the following solution works rather well. The nice things
about it are 1) you can start using it right away; 2) it is more
powerful, because it will do the right thing with a pattern like
*/*/*.c; 3) you can decide whether you do/don't want to use it; and
4) you can extend the method to add any customizations (or even
entirely different kinds of wildcard expansion).
.Sp
.Vb 10
\&        C:\e> copy con c:\eperl\elib\eWild.pm
\&        # Wild.pm \- emulate shell @ARGV expansion on shells that don\*(Aqt
\&        use File::DosGlob;
\&        @ARGV = map {
\&                      my @g = File::DosGlob::glob($_) if /[*?]/;
\&                      @g ? @g : $_;
\&                    } @ARGV;
\&        1;
\&        ^Z
\&        C:\e> set PERL5OPT=\-MWild
\&        C:\e> perl \-le "for (@ARGV) { print }" */*/perl*.c
\&        p4view/perl/perl.c
\&        p4view/perl/perlio.c
\&        p4view/perl/perly.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
.Ve
.Sp
Note there are two distinct steps there: 1) You'll have to create
Wild.pm and put it in your perl lib directory. 2) You'll need to
set the \s-1PERL5OPT\s0 environment variable.  If you want argv expansion
to be the default, just set \s-1PERL5OPT\s0 in your default startup
environment.
.Sp
If you are using the Visual C compiler, you can get the C runtime's
command line wildcard expansion built into perl binary.  The resulting
binary will always expand unquoted command lines, which may not be
what you want if you use a shell that does that for you.  The expansion
done is also somewhat less powerful than the approach suggested above.
.IP "Notes on 64\-bit Windows" 4
.IX Item "Notes on 64-bit Windows"
Windows .NET Server supports the \s-1LLP64\s0 data model on the Intel Itanium
architecture.
.Sp
The \s-1LLP64\s0 data model is different from the \s-1LP64\s0 data model that is the
norm on 64\-bit Unix platforms.  In the former, \f(CW\*(C`int\*(C'\fR and \f(CW\*(C`long\*(C'\fR are
both 32\-bit data types, while pointers are 64 bits wide.  In addition,
there is a separate 64\-bit wide integral type, \f(CW\*(C`_\|_int64\*(C'\fR.  In contrast,
the \s-1LP64\s0 data model that is pervasive on Unix platforms provides \f(CW\*(C`int\*(C'\fR
as the 32\-bit type, while both the \f(CW\*(C`long\*(C'\fR type and pointers are of
64\-bit precision.  Note that both models provide for 64\-bits of
addressability.
.Sp
64\-bit Windows running on Itanium is capable of running 32\-bit x86
binaries transparently.  This means that you could use a 32\-bit build
of Perl on a 64\-bit system.  Given this, why would one want to build
a 64\-bit build of Perl?  Here are some reasons why you would bother:
.RS 4
.IP "\(bu" 4
A 64\-bit native application will run much more efficiently on
Itanium hardware.
.IP "\(bu" 4
There is no 2GB limit on process size.
.IP "\(bu" 4
Perl automatically provides large file support when built under
64\-bit Windows.
.IP "\(bu" 4
Embedding Perl inside a 64\-bit application.
.RE
.RS 4
.RE
.SS "Running Perl Scripts"
.IX Subsection "Running Perl Scripts"
Perl scripts on \s-1UNIX\s0 use the \*(L"#!\*(R" (a.k.a \*(L"shebang\*(R") line to
indicate to the \s-1OS\s0 that it should execute the file using perl.
Windows has no comparable means to indicate arbitrary files are
executables.
.PP
Instead, all available methods to execute plain text files on
Windows rely on the file \*(L"extension\*(R".  There are three methods
to use this to execute perl scripts:
.IP "1." 8
There is a facility called \*(L"file extension associations\*(R".  This can be
manipulated via the two commands \*(L"assoc\*(R" and \*(L"ftype\*(R" that come
standard with Windows.  Type \*(L"ftype /?\*(R" for a complete example of how
to set this up for perl scripts (Say what?  You thought Windows
wasn't perl-ready? :).
.IP "2." 8
Since file associations don't work everywhere, and there are
reportedly bugs with file associations where it does work, the
old method of wrapping the perl script to make it look like a
regular batch file to the \s-1OS\s0, may be used.  The install process
makes available the \*(L"pl2bat.bat\*(R" script which can be used to wrap
perl scripts into batch files.  For example:
.Sp
.Vb 1
\&        pl2bat foo.pl
.Ve
.Sp
will create the file \*(L"\s-1FOO\s0.BAT\*(R".  Note \*(L"pl2bat\*(R" strips any
\&.pl suffix and adds a .bat suffix to the generated file.
.Sp
If you use the 4DOS/NT or similar command shell, note that
\&\*(L"pl2bat\*(R" uses the \*(L"%*\*(R" variable in the generated batch file to
refer to all the command line arguments, so you may need to make
sure that construct works in batch files.  As of this writing,
4DOS/NT users will need a \*(L"ParameterChar = *\*(R" statement in their
4NT.INI file or will need to execute \*(L"setdos /p*\*(R" in the 4DOS/NT
startup file to enable this to work.
.IP "3." 8
Using \*(L"pl2bat\*(R" has a few problems:  the file name gets changed,
so scripts that rely on \f(CW$0\fR to find what they must do may not
run properly; running \*(L"pl2bat\*(R" replicates the contents of the
original script, and so this process can be maintenance intensive
if the originals get updated often.  A different approach that
avoids both problems is possible.
.Sp
A script called \*(L"runperl.bat\*(R" is available that can be copied
to any filename (along with the .bat suffix).  For example,
if you call it \*(L"foo.bat\*(R", it will run the file \*(L"foo\*(R" when it is
executed.  Since you can run batch files on Windows platforms simply
by typing the name (without the extension), this effectively
runs the file \*(L"foo\*(R", when you type either \*(L"foo\*(R" or \*(L"foo.bat\*(R".
With this method, \*(L"foo.bat\*(R" can even be in a different location
than the file \*(L"foo\*(R", as long as \*(L"foo\*(R" is available somewhere on
the \s-1PATH\s0.  If your scripts are on a filesystem that allows symbolic
links, you can even avoid copying \*(L"runperl.bat\*(R".
.Sp
Here's a diversion:  copy \*(L"runperl.bat\*(R" to \*(L"runperl\*(R", and type
\&\*(L"runperl\*(R".  Explain the observed behavior, or lack thereof. :)
Hint: .gnidnats llits er'uoy fi ,\*(L"lrepnur\*(R" eteled :tniH
.SS "Miscellaneous Things"
.IX Subsection "Miscellaneous Things"
A full set of \s-1HTML\s0 documentation is installed, so you should be
able to use it if you have a web browser installed on your
system.
.PP
\&\f(CW\*(C`perldoc\*(C'\fR is also a useful tool for browsing information contained
in the documentation, especially in conjunction with a pager
like \f(CW\*(C`less\*(C'\fR (recent versions of which have Windows support).  You may
have to set the \s-1PAGER\s0 environment variable to use a specific pager.
\&\*(L"perldoc \-f foo\*(R" will print information about the perl operator
\&\*(L"foo\*(R".
.PP
One common mistake when using this port with a \s-1GUI\s0 library like \f(CW\*(C`Tk\*(C'\fR
is assuming that Perl's normal behavior of opening a command-line
window will go away.  This isn't the case.  If you want to start a copy
of \f(CW\*(C`perl\*(C'\fR without opening a command-line window, use the \f(CW\*(C`wperl\*(C'\fR
executable built during the installation process.  Usage is exactly
the same as normal \f(CW\*(C`perl\*(C'\fR on Windows, except that options like \f(CW\*(C`\-h\*(C'\fR
don't work (since they need a command-line window to print to).
.PP
If you find bugs in perl, you can run \f(CW\*(C`perlbug\*(C'\fR to create a
bug report (you may have to send it manually if \f(CW\*(C`perlbug\*(C'\fR cannot
find a mailer on your system).
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Norton AntiVirus interferes with the build process, particularly if
set to \*(L"AutoProtect, All Files, when Opened\*(R". Unlike large applications
the perl build process opens and modifies a lot of files. Having the
the AntiVirus scan each and every one slows build the process significantly.
Worse, with PERLIO=stdio the build process fails with peculiar messages
as the virus checker interacts badly with miniperl.exe writing configure
files (it seems to either catch file part written and treat it as suspicious,
or virus checker may have it \*(L"locked\*(R" in a way which inhibits miniperl
updating it). The build does complete with
.PP
.Vb 1
\&   set PERLIO=perlio
.Ve
.PP
but that may be just luck. Other AntiVirus software may have similar issues.
.PP
Some of the built-in functions do not act exactly as documented in
perlfunc, and a few are not implemented at all.  To avoid
surprises, particularly if you have had prior exposure to Perl
in other operating environments or if you intend to write code
that will be portable to other environments, see perlport
for a reasonably definitive list of these differences.
.PP
Not all extensions available from \s-1CPAN\s0 may build or work properly
in the Windows environment.  See \*(L"Building Extensions\*(R".
.PP
Most \f(CW\*(C`socket()\*(C'\fR related calls are supported, but they may not
behave as on Unix platforms.  See perlport for the full list.
.PP
Signal handling may not behave as on Unix platforms (where it
doesn't exactly \*(L"behave\*(R", either :).  For instance, calling \f(CW\*(C`die()\*(C'\fR
or \f(CW\*(C`exit()\*(C'\fR from signal handlers will cause an exception, since most
implementations of \f(CW\*(C`signal()\*(C'\fR on Windows are severely crippled.
Thus, signals may work only for simple things like setting a flag
variable in the handler.  Using signals under this port should
currently be considered unsupported.
.PP
Please send detailed descriptions of any problems and solutions that
you may find to <\fIperlbug@perl.org\fR>, along with the output
produced by \f(CW\*(C`perl \-V\*(C'\fR.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The use of a camel with the topic of Perl is a trademark
of O'Reilly and Associates, Inc. Used with permission.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "Gary Ng <71564.1743@CompuServe.COM>" 4
.IX Item "Gary Ng <71564.1743@CompuServe.COM>"
.PD 0
.IP "Gurusamy Sarathy <gsar@activestate.com>" 4
.IX Item "Gurusamy Sarathy <gsar@activestate.com>"
.IP "Nick Ing-Simmons <nick@ing\-simmons.net>" 4
.IX Item "Nick Ing-Simmons <nick@ing-simmons.net>"
.IP "Jan Dubois <jand@activestate.com>" 4
.IX Item "Jan Dubois <jand@activestate.com>"
.IP "Steve Hay <steve.m.hay@googlemail.com>" 4
.IX Item "Steve Hay <steve.m.hay@googlemail.com>"
.PD
.PP
This document is maintained by Jan Dubois.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl
.SH "HISTORY"
.IX Header "HISTORY"
This port was originally contributed by Gary Ng around 5.003_24,
and borrowed from the Hip Communications port that was available
at the time.  Various people have made numerous and sundry hacks
since then.
.PP
GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).
.PP
Support for \s-1PERL_OBJECT\s0 was added in 5.005 (ActiveState Tool Corp).
.PP
Support for \fIfork()\fR emulation was added in 5.6 (ActiveState Tool Corp).
.PP
Win9x support was added in 5.6 (Benjamin Stuhl).
.PP
Support for 64\-bit Windows added in 5.8 (ActiveState Corp).
.PP
Last updated: 10 September 2011
                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlwin325.18.1                              0100644 0001750 0001750 00000126272 12566207450 023112  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLWIN32 1"
.TH PERLWIN32 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlwin32 \- Perl under Windows
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
These are instructions for building Perl under Windows 2000 and later.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Before you start, you should glance through the \s-1README\s0 file
found in the top-level directory to which the Perl distribution
was extracted.  Make sure you read and understand the terms under
which this software is being distributed.
.PP
Also make sure you read \*(L"\s-1BUGS AND CAVEATS\*(R"\s0 below for the
known limitations of this port.
.PP
The \s-1INSTALL\s0 file in the perl top-level has much information that is
only relevant to people building Perl on Unix-like systems.  In
particular, you can safely ignore any information that talks about
\&\*(L"Configure\*(R".
.PP
You may also want to look at one other option for building a perl that
will work on Windows: the \s-1README\s0.cygwin file, which give a different
set of rules to build a perl for Windows.  This method will probably
enable you to build a more Unix-compatible perl, but you will also
need to download and use various other build-time and run-time support
software described in that file.
.PP
This set of instructions is meant to describe a so-called \*(L"native\*(R"
port of Perl to the Windows platform.  This includes both 32\-bit and
64\-bit Windows operating systems.  The resulting Perl requires no
additional software to run (other than what came with your operating
system).  Currently, this port is capable of using one of the
following compilers on the Intel x86 architecture:
.PP
.Vb 3
\&      Microsoft Visual C++    version 6.0 or later
\&      Gcc by mingw.org        gcc version 3.2 or later
\&      Gcc by mingw\-w64.sf.net gcc version 4.4.3 or later
.Ve
.PP
Note that the last two of these are actually competing projects both
delivering complete gcc toolchain for \s-1MS\s0 Windows:
.IP "<http://mingw.org>" 4
.IX Item "<http://mingw.org>"
Delivers gcc toolchain targeting 32\-bit Windows platform.
.IP "<http://mingw\-w64.sf.net>" 4
.IX Item "<http://mingw-w64.sf.net>"
Delivers gcc toolchain targeting both 64\-bit Windows and 32\-bit Windows
platforms (despite the project name \*(L"mingw\-w64\*(R" they are not only 64\-bit
oriented). They deliver the native gcc compilers and cross-compilers
that are also supported by perl's makefile.
.PP
The Microsoft Visual \*(C+ compilers are also now being given away free. They are
available as \*(L"Visual \*(C+ Toolkit 2003\*(R" or \*(L"Visual \*(C+ 2005/2008/2010/2012 Express
Edition\*(R" (and also as part of the \*(L".NET Framework \s-1SDK\*(R"\s0) and are the same
compilers that ship with \*(L"Visual \*(C+ .NET 2003 Professional\*(R" or \*(L"Visual \*(C+
2005/2008/2010/2012 Professional\*(R" respectively.
.PP
This port can also be built on \s-1IA64/AMD64\s0 using:
.PP
.Vb 2
\&      Microsoft Platform SDK    Nov 2001 (64\-bit compiler and tools)
\&      MinGW64 compiler (gcc version 4.4.3 or later)
.Ve
.PP
The Windows \s-1SDK\s0 can be downloaded from <http://www.microsoft.com/>.
The MinGW64 compiler is available at <http://sourceforge.net/projects/mingw\-w64>.
The latter is actually a cross-compiler targeting Win64. There's also a trimmed
down compiler (no java, or gfortran) suitable for building perl available at:
<http://strawberryperl.com/package/kmx/64_gcctoolchain/>
.PP
\&\s-1NOTE:\s0 If you're using a 32\-bit compiler to build perl on a 64\-bit Windows
operating system, then you should set the \s-1WIN64\s0 environment variable to \*(L"undef\*(R".
Also, the trimmed down compiler only passes tests when \s-1USE_ITHREADS\s0 *= define
(as opposed to undef) and when the \s-1CFG\s0 *= Debug line is commented out.
.PP
This port fully supports MakeMaker (the set of modules that
is used to build extensions to perl).  Therefore, you should be
able to build and install most extensions found in the \s-1CPAN\s0 sites.
See \*(L"Usage Hints for Perl on Windows\*(R" below for general hints about this.
.SS "Setting Up Perl on Windows"
.IX Subsection "Setting Up Perl on Windows"
.IP "Make" 4
.IX Item "Make"
You need a \*(L"make\*(R" program to build the sources.  If you are using
Visual \*(C+ or the Windows \s-1SDK\s0 tools, nmake will work.  Builds using
the gcc need dmake.
.Sp
dmake is a freely available make that has very nice macro features
and parallelability.
.Sp
A port of dmake for Windows is available from:
.Sp
<http://search.cpan.org/dist/dmake/>
.Sp
Fetch and install dmake somewhere on your path.
.IP "Command Shell" 4
.IX Item "Command Shell"
Use the default \*(L"cmd\*(R" shell that comes with Windows.  Some versions of the
popular 4DOS/NT shell have incompatibilities that may cause you trouble.
If the build fails under that shell, try building again with the cmd
shell.
.Sp
Make sure the path to the build directory does not contain spaces.  The
build usually works in this circumstance, but some tests will fail.
.IP "Microsoft Visual \*(C+" 4
.IX Item "Microsoft Visual "
The nmake that comes with Visual \*(C+ will suffice for building.
You will need to run the \s-1VCVARS32.BAT\s0 file, usually found somewhere
like C:\eProgram Files\eMicrosoft Visual Studio\eVC98\eBin.
This will set your build environment.
.Sp
You can also use dmake to build using Visual \*(C+; provided, however,
you set \s-1OSRELEASE\s0 to \*(L"microsft\*(R" (or whatever the directory name
under which the Visual C dmake configuration lives) in your environment
and edit win32/config.vc to change \*(L"make=nmake\*(R" into \*(L"make=dmake\*(R".  The
latter step is only essential if you want to use dmake as your default
make for building extensions using MakeMaker.
.IP "Microsoft Visual \*(C+ 2008/2010/2012 Express Edition" 4
.IX Item "Microsoft Visual 2008/2010/2012 Express Edition"
These free versions of Visual \*(C+ 2008/2010/2012 Professional contain the same
compilers and linkers that ship with the full versions, and also contain
everything necessary to build Perl, rather than requiring a separate download
of the Windows \s-1SDK\s0 like previous versions did.
.Sp
These packages can be downloaded by searching in the Download Center at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)
.Sp
Install Visual \*(C+ 2008/2010/2012 Express, then setup your environment using, e.g.
.Sp
.Vb 1
\&        C:\eProgram Files\eMicrosoft Visual Studio 11.0\eCommon7\eTools\evsvars32.bat
.Ve
.Sp
(assuming the default installation location was chosen).
.Sp
Perl should now build using the win32/Makefile.  You will need to edit that
file to set \s-1CCTYPE\s0 to \s-1MSVC90FREE\s0 or \s-1MSVC100FREE\s0 first.
.IP "Microsoft Visual \*(C+ 2005 Express Edition" 4
.IX Item "Microsoft Visual 2005 Express Edition"
This free version of Visual \*(C+ 2005 Professional contains the same compiler
and linker that ship with the full version, but doesn't contain everything
necessary to build Perl.
.Sp
You will also need to download the \*(L"Windows \s-1SDK\*(R" \s0(the \*(L"Core \s-1SDK\*(R"\s0 and \*(L"\s-1MDAC
SDK\*(R"\s0 components are required) for more header files and libraries.
.Sp
These packages can both be downloaded by searching in the Download Center at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)
.Sp
Try to obtain the latest version of the Windows \s-1SDK. \s0 Sometimes these packages
contain a particular Windows \s-1OS\s0 version in their name, but actually work on
other \s-1OS\s0 versions too.  For example, the \*(L"Windows Server 2003 R2 Platform \s-1SDK\*(R"\s0
also runs on Windows \s-1XP SP2\s0 and Windows 2000.
.Sp
Install Visual \*(C+ 2005 first, then the Platform \s-1SDK. \s0 Setup your environment
as follows (assuming default installation locations were chosen):
.Sp
.Vb 1
\&        SET PlatformSDKDir=C:\eProgram Files\eMicrosoft Platform SDK
\&
\&        SET PATH=%SystemRoot%\esystem32;%SystemRoot%;C:\eProgram Files\eMicrosoft Visual Studio 8\eCommon7\eIDE;C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eBIN;C:\eProgram Files\eMicrosoft Visual Studio 8\eCommon7\eTools;C:\eProgram Files\eMicrosoft Visual Studio 8\eSDK\ev2.0\ebin;C:\eWINDOWS\eMicrosoft.NET\eFramework\ev2.0.50727;C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eVCPackages;%PlatformSDKDir%\eBin
\&
\&        SET INCLUDE=C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eINCLUDE;%PlatformSDKDir%\einclude
\&
\&        SET LIB=C:\eProgram Files\eMicrosoft Visual Studio 8\eVC\eLIB;C:\eProgram Files\eMicrosoft Visual Studio 8\eSDK\ev2.0\elib;%PlatformSDKDir%\elib
\&
\&        SET LIBPATH=C:\eWINDOWS\eMicrosoft.NET\eFramework\ev2.0.50727
.Ve
.Sp
(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into \*(L"C:\eProgram Files\eMicrosoft \s-1SDK\*(R",\s0
while the latest versions install into version-specific locations such as
\&\*(L"C:\eProgram Files\eMicrosoft Platform \s-1SDK\s0 for Windows Server 2003 R2\*(R".)
.Sp
Perl should now build using the win32/Makefile.  You will need to edit that
file to set
.Sp
.Vb 1
\&        CCTYPE = MSVC80FREE
.Ve
.Sp
and to set \s-1CCHOME, CCINCDIR\s0 and \s-1CCLIBDIR\s0 as per the environment setup above.
.IP "Microsoft Visual \*(C+ Toolkit 2003" 4
.IX Item "Microsoft Visual Toolkit 2003"
This free toolkit contains the same compiler and linker that ship with
Visual \*(C+ .NET 2003 Professional, but doesn't contain everything
necessary to build Perl.
.Sp
You will also need to download the \*(L"Platform \s-1SDK\*(R" \s0(the \*(L"Core \s-1SDK\*(R"\s0 and \*(L"\s-1MDAC
SDK\*(R"\s0 components are required) for header files, libraries and rc.exe, and
\&\*(L".NET Framework \s-1SDK\*(R"\s0 for more libraries and nmake.exe.  Note that the latter
(which also includes the free compiler and linker) requires the \*(L".NET
Framework Redistributable\*(R" to be installed first.  This can be downloaded and
installed separately, but is included in the \*(L"Visual \*(C+ Toolkit 2003\*(R" anyway.
.Sp
These packages can all be downloaded by searching in the Download Center at
<http://www.microsoft.com/downloads/search.aspx?displaylang=en>.  (Providing exact
links to these packages has proven a pointless task because the links keep on
changing so often.)
.Sp
Try to obtain the latest version of the Windows \s-1SDK. \s0 Sometimes these packages
contain a particular Windows \s-1OS\s0 version in their name, but actually work on
other \s-1OS\s0 versions too.  For example, the \*(L"Windows Server 2003 R2 Platform \s-1SDK\*(R"\s0
also runs on Windows \s-1XP SP2\s0 and Windows 2000.
.Sp
Install the Toolkit first, then the Platform \s-1SDK,\s0 then the .NET Framework \s-1SDK.\s0
Setup your environment as follows (assuming default installation locations
were chosen):
.Sp
.Vb 1
\&        SET PlatformSDKDir=C:\eProgram Files\eMicrosoft Platform SDK
\&
\&        SET PATH=%SystemRoot%\esystem32;%SystemRoot%;C:\eProgram Files\eMicrosoft Visual C++ Toolkit 2003\ebin;%PlatformSDKDir%\eBin;C:\eProgram Files\eMicrosoft.NET\eSDK\ev1.1\eBin
\&
\&        SET INCLUDE=C:\eProgram Files\eMicrosoft Visual C++ Toolkit 2003\einclude;%PlatformSDKDir%\einclude;C:\eProgram Files\eMicrosoft Visual Studio .NET 2003\eVc7\einclude
\&
\&        SET LIB=C:\eProgram Files\eMicrosoft Visual C++ Toolkit 2003\elib;%PlatformSDKDir%\elib;C:\eProgram Files\eMicrosoft Visual Studio .NET 2003\eVc7\elib
.Ve
.Sp
(The PlatformSDKDir might need to be set differently depending on which version
you are using. Earlier versions installed into \*(L"C:\eProgram Files\eMicrosoft \s-1SDK\*(R",\s0
while the latest versions install into version-specific locations such as
\&\*(L"C:\eProgram Files\eMicrosoft Platform \s-1SDK\s0 for Windows Server 2003 R2\*(R".)
.Sp
Several required files will still be missing:
.RS 4
.IP "\(bu" 4
cvtres.exe is required by link.exe when using a .res file.  It is actually
installed by the .NET Framework \s-1SDK,\s0 but into a location such as the
following:
.Sp
.Vb 1
\&        C:\eWINDOWS\eMicrosoft.NET\eFramework\ev1.1.4322
.Ve
.Sp
Copy it from there to \f(CW%PlatformSDKDir\fR%\eBin
.IP "\(bu" 4
lib.exe is normally used to build libraries, but link.exe with the /lib
option also works, so change win32/config.vc to use it instead:
.Sp
Change the line reading:
.Sp
.Vb 1
\&        ar=\*(Aqlib\*(Aq
.Ve
.Sp
to:
.Sp
.Vb 1
\&        ar=\*(Aqlink /lib\*(Aq
.Ve
.Sp
It may also be useful to create a batch file called lib.bat in
C:\eProgram Files\eMicrosoft Visual \*(C+ Toolkit 2003\ebin containing:
.Sp
.Vb 2
\&        @echo off
\&        link /lib %*
.Ve
.Sp
for the benefit of any naughty C extension modules that you might want to build
later which explicitly reference \*(L"lib\*(R" rather than taking their value from
\&\f(CW$Config\fR{ar}.
.IP "\(bu" 4
setargv.obj is required to build perlglob.exe (and perl.exe if the \s-1USE_SETARGV\s0
option is enabled).  The Platform \s-1SDK\s0 supplies this object file in source form
in \f(CW%PlatformSDKDir\fR%\esrc\ecrt.  Copy setargv.c, cruntime.h and
internal.h from there to some temporary location and build setargv.obj using
.Sp
.Vb 1
\&        cl.exe /c /I. /D_CRTBLD setargv.c
.Ve
.Sp
Then copy setargv.obj to \f(CW%PlatformSDKDir\fR%\elib
.Sp
Alternatively, if you don't need perlglob.exe and don't need to enable the
\&\s-1USE_SETARGV\s0 option then you can safely just remove all mention of $(\s-1GLOBEXE\s0)
from win32/Makefile and setargv.obj won't be required anyway.
.RE
.RS 4
.Sp
Perl should now build using the win32/Makefile.  You will need to edit that
file to set
.Sp
.Vb 1
\&        CCTYPE = MSVC70FREE
.Ve
.Sp
and to set \s-1CCHOME, CCINCDIR\s0 and \s-1CCLIBDIR\s0 as per the environment setup above.
.RE
.IP "Microsoft Platform \s-1SDK\s0 64\-bit Compiler" 4
.IX Item "Microsoft Platform SDK 64-bit Compiler"
The nmake that comes with the Platform \s-1SDK\s0 will suffice for building
Perl.  Make sure you are building within one of the \*(L"Build Environment\*(R"
shells available after you install the Platform \s-1SDK\s0 from the Start Menu.
.IP "MinGW release 3 with gcc" 4
.IX Item "MinGW release 3 with gcc"
Perl can be compiled with gcc from MinGW release 3 and later (using gcc 3.2.x
and later).  It can be downloaded here:
.Sp
<http://www.mingw.org/>
.Sp
You also need dmake.  See \*(L"Make\*(R" above on how to get it.
.SS "Building"
.IX Subsection "Building"
.IP "\(bu" 4
Make sure you are in the \*(L"win32\*(R" subdirectory under the perl toplevel.
This directory contains a \*(L"Makefile\*(R" that will work with
versions of nmake that come with Visual \*(C+ or the Windows \s-1SDK,\s0 and
a dmake \*(L"makefile.mk\*(R" that will work for all supported compilers.  The
defaults in the dmake makefile are setup to build using MinGW/gcc.
.IP "\(bu" 4
Edit the makefile.mk (or Makefile, if you're using nmake) and change
the values of \s-1INST_DRV\s0 and \s-1INST_TOP.  \s0 You can also enable various
build flags.  These are explained in the makefiles.
.Sp
Note that it is generally not a good idea to try to build a perl with
\&\s-1INST_DRV\s0 and \s-1INST_TOP\s0 set to a path that already exists from a previous
build.  In particular, this may cause problems with the
lib/ExtUtils/t/Embed.t test, which attempts to build a test program and
may end up building against the installed perl's lib/CORE directory rather
than the one being tested.
.Sp
You will have to make sure that \s-1CCTYPE\s0 is set correctly and that
\&\s-1CCHOME\s0 points to wherever you installed your compiler.
.Sp
If building with the cross-compiler provided by
mingw\-w64.sourceforge.net you'll need to uncomment the line that sets
\&\s-1GCCCROSS\s0 in the makefile.mk. Do this only if it's the cross-compiler \- ie
only if the bin folder doesn't contain a gcc.exe. (The cross-compiler
does not provide a gcc.exe, g++.exe, ar.exe, etc. Instead, all of these
executables are prefixed with 'x86_64\-w64\-mingw32\-'.)
.Sp
The default value for \s-1CCHOME\s0 in the makefiles for Visual \*(C+
may not be correct for some versions.  Make sure the default exists
and is valid.
.Sp
You may also need to comment out the \f(CW\*(C`DELAYLOAD = ...\*(C'\fR line in the
Makefile if you're using \s-1VC++ 6.0\s0 without the latest service pack and
the linker reports an internal error.
.Sp
If you want build some core extensions statically into perl's dll, specify
them in the \s-1STATIC_EXT\s0 macro.
.Sp
Be sure to read the instructions near the top of the makefiles carefully.
.IP "\(bu" 4
Type \*(L"dmake\*(R" (or \*(L"nmake\*(R" if you are using that make).
.Sp
This should build everything.  Specifically, it will create perl.exe,
perl518.dll at the perl toplevel, and various other extension dll's
under the lib\eauto directory.  If the build fails for any reason, make
sure you have done the previous steps correctly.
.SS "Testing Perl on Windows"
.IX Subsection "Testing Perl on Windows"
Type \*(L"dmake test\*(R" (or \*(L"nmake test\*(R").  This will run most of the tests from
the testsuite (many tests will be skipped).
.PP
There should be no test failures.
.PP
Some test failures may occur if you use a command shell other than the
native \*(L"cmd.exe\*(R", or if you are building from a path that contains
spaces.  So don't do that.
.PP
If you are running the tests from a emacs shell window, you may see
failures in op/stat.t.  Run \*(L"dmake test-notty\*(R" in that case.
.PP
If you run the tests on a \s-1FAT\s0 partition, you may see some failures for
\&\f(CW\*(C`link()\*(C'\fR related tests (\fIop/write.t\fR, \fIop/stat.t\fR ...). Testing on
\&\s-1NTFS\s0 avoids these errors.
.PP
Furthermore, you should make sure that during \f(CW\*(C`make test\*(C'\fR you do not
have any \s-1GNU\s0 tool packages in your path: some toolkits like Unixutils
include some tools (\f(CW\*(C`type\*(C'\fR for instance) which override the Windows
ones and makes tests fail. Remove them from your path while testing to
avoid these errors.
.PP
Please report any other failures as described under \*(L"\s-1BUGS AND CAVEATS\*(R"\s0.
.SS "Installation of Perl on Windows"
.IX Subsection "Installation of Perl on Windows"
Type \*(L"dmake install\*(R" (or \*(L"nmake install\*(R").  This will put the newly
built perl and the libraries under whatever \f(CW\*(C`INST_TOP\*(C'\fR points to in the
Makefile.  It will also install the pod documentation under
\&\f(CW\*(C`$INST_TOP\e$INST_VER\elib\epod\*(C'\fR and \s-1HTML\s0 versions of the same under
\&\f(CW\*(C`$INST_TOP\e$INST_VER\elib\epod\ehtml\*(C'\fR.
.PP
To use the Perl you just installed you will need to add a new entry to
your \s-1PATH\s0 environment variable: \f(CW\*(C`$INST_TOP\ebin\*(C'\fR, e.g.
.PP
.Vb 1
\&    set PATH=c:\eperl\ebin;%PATH%
.Ve
.PP
If you opted to uncomment \f(CW\*(C`INST_VER\*(C'\fR and \f(CW\*(C`INST_ARCH\*(C'\fR in the makefile
then the installation structure is a little more complicated and you will
need to add two new \s-1PATH\s0 components instead: \f(CW\*(C`$INST_TOP\e$INST_VER\ebin\*(C'\fR and
\&\f(CW\*(C`$INST_TOP\e$INST_VER\ebin\e$ARCHNAME\*(C'\fR, e.g.
.PP
.Vb 1
\&    set PATH=c:\eperl\e5.6.0\ebin;c:\eperl\e5.6.0\ebin\eMSWin32\-x86;%PATH%
.Ve
.SS "Usage Hints for Perl on Windows"
.IX Subsection "Usage Hints for Perl on Windows"
.IP "Environment Variables" 4
.IX Item "Environment Variables"
The installation paths that you set during the build get compiled
into perl, so you don't have to do anything additional to start
using that perl (except add its location to your \s-1PATH\s0 variable).
.Sp
If you put extensions in unusual places, you can set \s-1PERL5LIB\s0
to a list of paths separated by semicolons where you want perl
to look for libraries.  Look for descriptions of other environment
variables you can set in perlrun.
.Sp
You can also control the shell that perl uses to run \fIsystem()\fR and
backtick commands via \s-1PERL5SHELL. \s0 See perlrun.
.Sp
Perl does not depend on the registry, but it can look up certain default
values if you choose to put them there.  Perl attempts to read entries from
\&\f(CW\*(C`HKEY_CURRENT_USER\eSoftware\ePerl\*(C'\fR and \f(CW\*(C`HKEY_LOCAL_MACHINE\eSoftware\ePerl\*(C'\fR.
Entries in the former override entries in the latter.  One or more of the
following entries (of type \s-1REG_SZ\s0 or \s-1REG_EXPAND_SZ\s0) may be set:
.Sp
.Vb 7
\&    lib\-$]              version\-specific standard library path to add to @INC
\&    lib                 standard library path to add to @INC
\&    sitelib\-$]          version\-specific site library path to add to @INC
\&    sitelib             site library path to add to @INC
\&    vendorlib\-$]        version\-specific vendor library path to add to @INC
\&    vendorlib           vendor library path to add to @INC
\&    PERL*               fallback for all %ENV lookups that begin with "PERL"
.Ve
.Sp
Note the \f(CW$]\fR in the above is not literal.  Substitute whatever version
of perl you want to honor that entry, e.g. \f(CW5.6.0\fR.  Paths must be
separated with semicolons, as usual on Windows.
.IP "File Globbing" 4
.IX Item "File Globbing"
By default, perl handles file globbing using the File::Glob extension,
which provides portable globbing.
.Sp
If you want perl to use globbing that emulates the quirks of \s-1DOS\s0
filename conventions, you might want to consider using File::DosGlob
to override the internal \fIglob()\fR implementation.  See File::DosGlob for
details.
.IP "Using perl from the command line" 4
.IX Item "Using perl from the command line"
If you are accustomed to using perl from various command-line
shells found in \s-1UNIX\s0 environments, you will be less than pleased
with what Windows offers by way of a command shell.
.Sp
The crucial thing to understand about the Windows environment is that
the command line you type in is processed twice before Perl sees it.
First, your command shell (usually \s-1CMD.EXE\s0) preprocesses the command
line, to handle redirection, environment variable expansion, and
location of the executable to run. Then, the perl executable splits
the remaining command line into individual arguments, using the
C runtime library upon which Perl was built.
.Sp
It is particularly important to note that neither the shell nor the C
runtime do any wildcard expansions of command-line arguments (so
wildcards need not be quoted).  Also, the quoting behaviours of the
shell and the C runtime are rudimentary at best (and may, if you are
using a non-standard shell, be inconsistent).  The only (useful) quote
character is the double quote (").  It can be used to protect spaces
and other special characters in arguments.
.Sp
The Windows documentation describes the shell parsing rules here:
<http://www.microsoft.com/resources/documentation/windows/xp/all/proddocs/en\-us/cmd.mspx?mfr=true>
and the C runtime parsing rules here:
<http://msdn.microsoft.com/en\-us/library/17w5ykft%28v=VS.100%29.aspx>.
.Sp
Here are some further observations based on experiments: The C runtime
breaks arguments at spaces and passes them to programs in argc/argv.
Double quotes can be used to prevent arguments with spaces in them from
being split up.  You can put a double quote in an argument by escaping
it with a backslash and enclosing the whole argument within double quotes.
The backslash and the pair of double quotes surrounding the argument will
be stripped by the C runtime.
.Sp
The file redirection characters \*(L"<\*(R", \*(L">\*(R", and \*(L"|\*(R" can be quoted by
double quotes (although there are suggestions that this may not always
be true).  Single quotes are not treated as quotes by the shell or
the C runtime, they don't get stripped by the shell (just to make
this type of quoting completely useless).  The caret \*(L"^\*(R" has also
been observed to behave as a quoting character, but this appears
to be a shell feature, and the caret is not stripped from the command
line, so Perl still sees it (and the C runtime phase does not treat
the caret as a quote character).
.Sp
Here are some examples of usage of the \*(L"cmd\*(R" shell:
.Sp
This prints two doublequotes:
.Sp
.Vb 1
\&    perl \-e "print \*(Aq\e"\e"\*(Aq "
.Ve
.Sp
This does the same:
.Sp
.Vb 1
\&    perl \-e "print \e"\e\e\e"\e\e\e"\e" "
.Ve
.Sp
This prints \*(L"bar\*(R" and writes \*(L"foo\*(R" to the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" > blurch
.Ve
.Sp
This prints \*(L"foo\*(R" (\*(L"bar\*(R" disappears into nowhereland):
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2> nul
.Ve
.Sp
This prints \*(L"bar\*(R" and writes \*(L"foo\*(R" into the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 1> blurch
.Ve
.Sp
This pipes \*(L"foo\*(R" to the \*(L"less\*(R" pager and prints \*(L"bar\*(R" on the console:
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" | less
.Ve
.Sp
This pipes \*(L"foo\enbar\en\*(R" to the less pager:
.Sp
.Vb 1
\&    perl \-le "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2>&1 | less
.Ve
.Sp
This pipes \*(L"foo\*(R" to the pager and writes \*(L"bar\*(R" in the file \*(L"blurch\*(R":
.Sp
.Vb 1
\&    perl \-e "print \*(Aqfoo\*(Aq; print STDERR \*(Aqbar\*(Aq" 2> blurch | less
.Ve
.Sp
Discovering the usefulness of the \*(L"command.com\*(R" shell on Windows 9x
is left as an exercise to the reader :)
.Sp
One particularly pernicious problem with the 4NT command shell for
Windows is that it (nearly) always treats a % character as indicating
that environment variable expansion is needed.  Under this shell, it is
therefore important to always double any % characters which you want
Perl to see (for example, for hash variables), even when they are
quoted.
.IP "Building Extensions" 4
.IX Item "Building Extensions"
The Comprehensive Perl Archive Network (\s-1CPAN\s0) offers a wealth
of extensions, some of which require a C compiler to build.
Look in <http://www.cpan.org/> for more information on \s-1CPAN.\s0
.Sp
Note that not all of the extensions available from \s-1CPAN\s0 may work
in the Windows environment; you should check the information at
<http://testers.cpan.org/> before investing too much effort into
porting modules that don't readily build.
.Sp
Most extensions (whether they require a C compiler or not) can
be built, tested and installed with the standard mantra:
.Sp
.Vb 4
\&    perl Makefile.PL
\&    $MAKE
\&    $MAKE test
\&    $MAKE install
.Ve
.Sp
where \f(CW$MAKE\fR is whatever 'make' program you have configured perl to
use.  Use \*(L"perl \-V:make\*(R" to find out what this is.  Some extensions
may not provide a testsuite (so \*(L"$MAKE test\*(R" may not do anything or
fail), but most serious ones do.
.Sp
It is important that you use a supported 'make' program, and
ensure Config.pm knows about it.  If you don't have nmake, you can
either get dmake from the location mentioned earlier or get an
old version of nmake reportedly available from:
.Sp
<http://download.microsoft.com/download/vc15/Patch/1.52/W95/EN\-US/nmake15.exe>
.Sp
Another option is to use the make written in Perl, available from
\&\s-1CPAN.\s0
.Sp
<http://www.cpan.org/modules/by\-module/Make/>
.Sp
You may also use dmake.  See \*(L"Make\*(R" above on how to get it.
.Sp
Note that MakeMaker actually emits makefiles with different syntax
depending on what 'make' it thinks you are using.  Therefore, it is
important that one of the following values appears in Config.pm:
.Sp
.Vb 4
\&    make=\*(Aqnmake\*(Aq        # MakeMaker emits nmake syntax
\&    make=\*(Aqdmake\*(Aq        # MakeMaker emits dmake syntax
\&    any other value     # MakeMaker emits generic make syntax
\&                            (e.g GNU make, or Perl make)
.Ve
.Sp
If the value doesn't match the 'make' program you want to use,
edit Config.pm to fix it.
.Sp
If a module implements XSUBs, you will need one of the supported
C compilers.  You must make sure you have set up the environment for
the compiler for command-line compilation.
.Sp
If a module does not build for some reason, look carefully for
why it failed, and report problems to the module author.  If
it looks like the extension building support is at fault, report
that with full details of how the build failed using the perlbug
utility.
.IP "Command-line Wildcard Expansion" 4
.IX Item "Command-line Wildcard Expansion"
The default command shells on \s-1DOS\s0 descendant operating systems (such
as they are) usually do not expand wildcard arguments supplied to
programs.  They consider it the application's job to handle that.
This is commonly achieved by linking the application (in our case,
perl) with startup code that the C runtime libraries usually provide.
However, doing that results in incompatible perl versions (since the
behavior of the argv expansion code differs depending on the
compiler, and it is even buggy on some compilers).  Besides, it may
be a source of frustration if you use such a perl binary with an
alternate shell that *does* expand wildcards.
.Sp
Instead, the following solution works rather well. The nice things
about it are 1) you can start using it right away; 2) it is more
powerful, because it will do the right thing with a pattern like
*/*/*.c; 3) you can decide whether you do/don't want to use it; and
4) you can extend the method to add any customizations (or even
entirely different kinds of wildcard expansion).
.Sp
.Vb 10
\&        C:\e> copy con c:\eperl\elib\eWild.pm
\&        # Wild.pm \- emulate shell @ARGV expansion on shells that don\*(Aqt
\&        use File::DosGlob;
\&        @ARGV = map {
\&                      my @g = File::DosGlob::glob($_) if /[*?]/;
\&                      @g ? @g : $_;
\&                    } @ARGV;
\&        1;
\&        ^Z
\&        C:\e> set PERL5OPT=\-MWild
\&        C:\e> perl \-le "for (@ARGV) { print }" */*/perl*.c
\&        p4view/perl/perl.c
\&        p4view/perl/perlio.c
\&        p4view/perl/perly.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
\&        perl5.005/win32/perlglob.c
\&        perl5.005/win32/perllib.c
.Ve
.Sp
Note there are two distinct steps there: 1) You'll have to create
Wild.pm and put it in your perl lib directory. 2) You'll need to
set the \s-1PERL5OPT\s0 environment variable.  If you want argv expansion
to be the default, just set \s-1PERL5OPT\s0 in your default startup
environment.
.Sp
If you are using the Visual C compiler, you can get the C runtime's
command line wildcard expansion built into perl binary.  The resulting
binary will always expand unquoted command lines, which may not be
what you want if you use a shell that does that for you.  The expansion
done is also somewhat less powerful than the approach suggested above.
.IP "Notes on 64\-bit Windows" 4
.IX Item "Notes on 64-bit Windows"
Windows .NET Server supports the \s-1LLP64\s0 data model on the Intel Itanium
architecture.
.Sp
The \s-1LLP64\s0 data model is different from the \s-1LP64\s0 data model that is the
norm on 64\-bit Unix platforms.  In the former, \f(CW\*(C`int\*(C'\fR and \f(CW\*(C`long\*(C'\fR are
both 32\-bit data types, while pointers are 64 bits wide.  In addition,
there is a separate 64\-bit wide integral type, \f(CW\*(C`_\|_int64\*(C'\fR.  In contrast,
the \s-1LP64\s0 data model that is pervasive on Unix platforms provides \f(CW\*(C`int\*(C'\fR
as the 32\-bit type, while both the \f(CW\*(C`long\*(C'\fR type and pointers are of
64\-bit precision.  Note that both models provide for 64\-bits of
addressability.
.Sp
64\-bit Windows running on Itanium is capable of running 32\-bit x86
binaries transparently.  This means that you could use a 32\-bit build
of Perl on a 64\-bit system.  Given this, why would one want to build
a 64\-bit build of Perl?  Here are some reasons why you would bother:
.RS 4
.IP "\(bu" 4
A 64\-bit native application will run much more efficiently on
Itanium hardware.
.IP "\(bu" 4
There is no 2GB limit on process size.
.IP "\(bu" 4
Perl automatically provides large file support when built under
64\-bit Windows.
.IP "\(bu" 4
Embedding Perl inside a 64\-bit application.
.RE
.RS 4
.RE
.SS "Running Perl Scripts"
.IX Subsection "Running Perl Scripts"
Perl scripts on \s-1UNIX\s0 use the \*(L"#!\*(R" (a.k.a \*(L"shebang\*(R") line to
indicate to the \s-1OS\s0 that it should execute the file using perl.
Windows has no comparable means to indicate arbitrary files are
executables.
.PP
Instead, all available methods to execute plain text files on
Windows rely on the file \*(L"extension\*(R".  There are three methods
to use this to execute perl scripts:
.IP "1." 8
There is a facility called \*(L"file extension associations\*(R".  This can be
manipulated via the two commands \*(L"assoc\*(R" and \*(L"ftype\*(R" that come
standard with Windows.  Type \*(L"ftype /?\*(R" for a complete example of how
to set this up for perl scripts (Say what?  You thought Windows
wasn't perl-ready? :).
.IP "2." 8
Since file associations don't work everywhere, and there are
reportedly bugs with file associations where it does work, the
old method of wrapping the perl script to make it look like a
regular batch file to the \s-1OS,\s0 may be used.  The install process
makes available the \*(L"pl2bat.bat\*(R" script which can be used to wrap
perl scripts into batch files.  For example:
.Sp
.Vb 1
\&        pl2bat foo.pl
.Ve
.Sp
will create the file \*(L"\s-1FOO.BAT\*(R". \s0 Note \*(L"pl2bat\*(R" strips any
\&.pl suffix and adds a .bat suffix to the generated file.
.Sp
If you use the 4DOS/NT or similar command shell, note that
\&\*(L"pl2bat\*(R" uses the \*(L"%*\*(R" variable in the generated batch file to
refer to all the command line arguments, so you may need to make
sure that construct works in batch files.  As of this writing,
4DOS/NT users will need a \*(L"ParameterChar = *\*(R" statement in their
4NT.INI file or will need to execute \*(L"setdos /p*\*(R" in the 4DOS/NT
startup file to enable this to work.
.IP "3." 8
Using \*(L"pl2bat\*(R" has a few problems:  the file name gets changed,
so scripts that rely on \f(CW$0\fR to find what they must do may not
run properly; running \*(L"pl2bat\*(R" replicates the contents of the
original script, and so this process can be maintenance intensive
if the originals get updated often.  A different approach that
avoids both problems is possible.
.Sp
A script called \*(L"runperl.bat\*(R" is available that can be copied
to any filename (along with the .bat suffix).  For example,
if you call it \*(L"foo.bat\*(R", it will run the file \*(L"foo\*(R" when it is
executed.  Since you can run batch files on Windows platforms simply
by typing the name (without the extension), this effectively
runs the file \*(L"foo\*(R", when you type either \*(L"foo\*(R" or \*(L"foo.bat\*(R".
With this method, \*(L"foo.bat\*(R" can even be in a different location
than the file \*(L"foo\*(R", as long as \*(L"foo\*(R" is available somewhere on
the \s-1PATH. \s0 If your scripts are on a filesystem that allows symbolic
links, you can even avoid copying \*(L"runperl.bat\*(R".
.Sp
Here's a diversion:  copy \*(L"runperl.bat\*(R" to \*(L"runperl\*(R", and type
\&\*(L"runperl\*(R".  Explain the observed behavior, or lack thereof. :)
Hint: .gnidnats llits er'uoy fi ,\*(L"lrepnur\*(R" eteled :tniH
.SS "Miscellaneous Things"
.IX Subsection "Miscellaneous Things"
A full set of \s-1HTML\s0 documentation is installed, so you should be
able to use it if you have a web browser installed on your
system.
.PP
\&\f(CW\*(C`perldoc\*(C'\fR is also a useful tool for browsing information contained
in the documentation, especially in conjunction with a pager
like \f(CW\*(C`less\*(C'\fR (recent versions of which have Windows support).  You may
have to set the \s-1PAGER\s0 environment variable to use a specific pager.
\&\*(L"perldoc \-f foo\*(R" will print information about the perl operator
\&\*(L"foo\*(R".
.PP
One common mistake when using this port with a \s-1GUI\s0 library like \f(CW\*(C`Tk\*(C'\fR
is assuming that Perl's normal behavior of opening a command-line
window will go away.  This isn't the case.  If you want to start a copy
of \f(CW\*(C`perl\*(C'\fR without opening a command-line window, use the \f(CW\*(C`wperl\*(C'\fR
executable built during the installation process.  Usage is exactly
the same as normal \f(CW\*(C`perl\*(C'\fR on Windows, except that options like \f(CW\*(C`\-h\*(C'\fR
don't work (since they need a command-line window to print to).
.PP
If you find bugs in perl, you can run \f(CW\*(C`perlbug\*(C'\fR to create a
bug report (you may have to send it manually if \f(CW\*(C`perlbug\*(C'\fR cannot
find a mailer on your system).
.SH "BUGS AND CAVEATS"
.IX Header "BUGS AND CAVEATS"
Norton AntiVirus interferes with the build process, particularly if
set to \*(L"AutoProtect, All Files, when Opened\*(R". Unlike large applications
the perl build process opens and modifies a lot of files. Having the
the AntiVirus scan each and every one slows build the process significantly.
Worse, with PERLIO=stdio the build process fails with peculiar messages
as the virus checker interacts badly with miniperl.exe writing configure
files (it seems to either catch file part written and treat it as suspicious,
or virus checker may have it \*(L"locked\*(R" in a way which inhibits miniperl
updating it). The build does complete with
.PP
.Vb 1
\&   set PERLIO=perlio
.Ve
.PP
but that may be just luck. Other AntiVirus software may have similar issues.
.PP
Some of the built-in functions do not act exactly as documented in
perlfunc, and a few are not implemented at all.  To avoid
surprises, particularly if you have had prior exposure to Perl
in other operating environments or if you intend to write code
that will be portable to other environments, see perlport
for a reasonably definitive list of these differences.
.PP
Not all extensions available from \s-1CPAN\s0 may build or work properly
in the Windows environment.  See \*(L"Building Extensions\*(R".
.PP
Most \f(CW\*(C`socket()\*(C'\fR related calls are supported, but they may not
behave as on Unix platforms.  See perlport for the full list.
.PP
Signal handling may not behave as on Unix platforms (where it
doesn't exactly \*(L"behave\*(R", either :).  For instance, calling \f(CW\*(C`die()\*(C'\fR
or \f(CW\*(C`exit()\*(C'\fR from signal handlers will cause an exception, since most
implementations of \f(CW\*(C`signal()\*(C'\fR on Windows are severely crippled.
Thus, signals may work only for simple things like setting a flag
variable in the handler.  Using signals under this port should
currently be considered unsupported.
.PP
Please send detailed descriptions of any problems and solutions that
you may find to <\fIperlbug@perl.org\fR>, along with the output
produced by \f(CW\*(C`perl \-V\*(C'\fR.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
The use of a camel with the topic of Perl is a trademark
of O'Reilly and Associates, Inc. Used with permission.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "Gary Ng <71564.1743@CompuServe.COM>" 4
.IX Item "Gary Ng <71564.1743@CompuServe.COM>"
.PD 0
.IP "Gurusamy Sarathy <gsar@activestate.com>" 4
.IX Item "Gurusamy Sarathy <gsar@activestate.com>"
.IP "Nick Ing-Simmons <nick@ing\-simmons.net>" 4
.IX Item "Nick Ing-Simmons <nick@ing-simmons.net>"
.IP "Jan Dubois <jand@activestate.com>" 4
.IX Item "Jan Dubois <jand@activestate.com>"
.IP "Steve Hay <steve.m.hay@googlemail.com>" 4
.IX Item "Steve Hay <steve.m.hay@googlemail.com>"
.PD
.PP
This document is maintained by Jan Dubois.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl
.SH "HISTORY"
.IX Header "HISTORY"
This port was originally contributed by Gary Ng around 5.003_24,
and borrowed from the Hip Communications port that was available
at the time.  Various people have made numerous and sundry hacks
since then.
.PP
GCC/mingw32 support was added in 5.005 (Nick Ing-Simmons).
.PP
Support for \s-1PERL_OBJECT\s0 was added in 5.005 (ActiveState Tool Corp).
.PP
Support for \fIfork()\fR emulation was added in 5.6 (ActiveState Tool Corp).
.PP
Win9x support was added in 5.6 (Benjamin Stuhl).
.PP
Support for 64\-bit Windows added in 5.8 (ActiveState Corp).
.PP
Last updated: 02 January 2012
                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlxs.1                                     0100644 0001750 0001750 00000262560 12566207450 022267  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLXS 1"
.TH PERLXS 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlxs \- XS language reference manual
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Introduction"
.IX Subsection "Introduction"
\&\s-1XS\s0 is an interface description file format used to create an extension
interface between Perl and C code (or a C library) which one wishes
to use with Perl.  The \s-1XS\s0 interface is combined with the library to
create a new library which can then be either dynamically loaded
or statically linked into perl.  The \s-1XS\s0 interface description is
written in the \s-1XS\s0 language and is the core component of the Perl
extension interface.
.PP
An \fB\s-1XSUB\s0\fR forms the basic unit of the \s-1XS\s0 interface.  After compilation
by the \fBxsubpp\fR compiler, each \s-1XSUB\s0 amounts to a C function definition
which will provide the glue between Perl calling conventions and C
calling conventions.
.PP
The glue code pulls the arguments from the Perl stack, converts these
Perl values to the formats expected by a C function, call this C function,
transfers the return values of the C function back to Perl.
Return values here may be a conventional C return value or any C
function arguments that may serve as output parameters.  These return
values may be passed back to Perl either by putting them on the
Perl stack, or by modifying the arguments supplied from the Perl side.
.PP
The above is a somewhat simplified view of what really happens.  Since
Perl allows more flexible calling conventions than C, XSUBs may do much
more in practice, such as checking input parameters for validity,
throwing exceptions (or returning undef/empty list) if the return value
from the C function indicates failure, calling different C functions
based on numbers and types of the arguments, providing an object-oriented
interface, etc.
.PP
Of course, one could write such glue code directly in C.  However, this
would be a tedious task, especially if one needs to write glue for
multiple C functions, and/or one is not familiar enough with the Perl
stack discipline and other such arcana.  \s-1XS\s0 comes to the rescue here:
instead of writing this glue C code in long-hand, one can write
a more concise short-hand \fIdescription\fR of what should be done by
the glue, and let the \s-1XS\s0 compiler \fBxsubpp\fR handle the rest.
.PP
The \s-1XS\s0 language allows one to describe the mapping between how the C
routine is used, and how the corresponding Perl routine is used.  It
also allows creation of Perl routines which are directly translated to
C code and which are not related to a pre-existing C function.  In cases
when the C interface coincides with the Perl interface, the \s-1XSUB\s0
declaration is almost identical to a declaration of a C function (in K&R
style).  In such circumstances, there is another tool called \f(CW\*(C`h2xs\*(C'\fR
that is able to translate an entire C header file into a corresponding
\&\s-1XS\s0 file that will provide glue to the functions/macros described in
the header file.
.PP
The \s-1XS\s0 compiler is called \fBxsubpp\fR.  This compiler creates
the constructs necessary to let an \s-1XSUB\s0 manipulate Perl values, and
creates the glue necessary to let Perl call the \s-1XSUB. \s0 The compiler
uses \fBtypemaps\fR to determine how to map C function parameters
and output values to Perl values and back.  The default typemap
(which comes with Perl) handles many common C types.  A supplementary
typemap may also be needed to handle any special structures and types
for the library being linked. For more information on typemaps,
see perlxstypemap.
.PP
A file in \s-1XS\s0 format starts with a C language section which goes until the
first \f(CW\*(C`MODULE =\*(C'\fR directive.  Other \s-1XS\s0 directives and \s-1XSUB\s0 definitions
may follow this line.  The \*(L"language\*(R" used in this part of the file
is usually referred to as the \s-1XS\s0 language.  \fBxsubpp\fR recognizes and
skips \s-1POD \s0(see perlpod) in both the C and \s-1XS\s0 language sections, which
allows the \s-1XS\s0 file to contain embedded documentation.
.PP
See perlxstut for a tutorial on the whole extension creation process.
.PP
Note: For some extensions, Dave Beazley's \s-1SWIG\s0 system may provide a
significantly more convenient mechanism for creating the extension
glue code.  See <http://www.swig.org/> for more information.
.SS "On The Road"
.IX Subsection "On The Road"
Many of the examples which follow will concentrate on creating an interface
between Perl and the \s-1ONC+ RPC\s0 bind library functions.  The \fIrpcb_gettime()\fR
function is used to demonstrate many features of the \s-1XS\s0 language.  This
function has two parameters; the first is an input parameter and the second
is an output parameter.  The function also returns a status value.
.PP
.Vb 1
\&        bool_t rpcb_gettime(const char *host, time_t *timep);
.Ve
.PP
From C this function will be called with the following
statements.
.PP
.Vb 4
\&     #include <rpc/rpc.h>
\&     bool_t status;
\&     time_t timep;
\&     status = rpcb_gettime( "localhost", &timep );
.Ve
.PP
If an \s-1XSUB\s0 is created to offer a direct translation between this function
and Perl, then this \s-1XSUB\s0 will be used from Perl with the following code.
The \f(CW$status\fR and \f(CW$timep\fR variables will contain the output of the function.
.PP
.Vb 2
\&     use RPC;
\&     $status = rpcb_gettime( "localhost", $timep );
.Ve
.PP
The following \s-1XS\s0 file shows an \s-1XS\s0 subroutine, or \s-1XSUB,\s0 which
demonstrates one possible interface to the \fIrpcb_gettime()\fR
function.  This \s-1XSUB\s0 represents a direct translation between
C and Perl and so preserves the interface even from Perl.
This \s-1XSUB\s0 will be invoked from Perl with the usage shown
above.  Note that the first three #include statements, for
\&\f(CW\*(C`EXTERN.h\*(C'\fR, \f(CW\*(C`perl.h\*(C'\fR, and \f(CW\*(C`XSUB.h\*(C'\fR, will always be present at the
beginning of an \s-1XS\s0 file.  This approach and others will be
expanded later in this document.
.PP
.Vb 4
\&     #include "EXTERN.h"
\&     #include "perl.h"
\&     #include "XSUB.h"
\&     #include <rpc/rpc.h>
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.PP
Any extension to Perl, including those containing XSUBs,
should have a Perl module to serve as the bootstrap which
pulls the extension into Perl.  This module will export the
extension's functions and variables to the Perl program and
will cause the extension's XSUBs to be linked into Perl.
The following module will be used for most of the examples
in this document and should be used from Perl with the \f(CW\*(C`use\*(C'\fR
command as shown earlier.  Perl modules are explained in
more detail later in this document.
.PP
.Vb 1
\&     package RPC;
\&
\&     require Exporter;
\&     require DynaLoader;
\&     @ISA = qw(Exporter DynaLoader);
\&     @EXPORT = qw( rpcb_gettime );
\&
\&     bootstrap RPC;
\&     1;
.Ve
.PP
Throughout this document a variety of interfaces to the \fIrpcb_gettime()\fR
\&\s-1XSUB\s0 will be explored.  The XSUBs will take their parameters in different
orders or will take different numbers of parameters.  In each case the
\&\s-1XSUB\s0 is an abstraction between Perl and the real C \fIrpcb_gettime()\fR
function, and the \s-1XSUB\s0 must always ensure that the real \fIrpcb_gettime()\fR
function is called with the correct parameters.  This abstraction will
allow the programmer to create a more Perl-like interface to the C
function.
.SS "The Anatomy of an \s-1XSUB\s0"
.IX Subsection "The Anatomy of an XSUB"
The simplest XSUBs consist of 3 parts: a description of the return
value, the name of the \s-1XSUB\s0 routine and the names of its arguments,
and a description of types or formats of the arguments.
.PP
The following \s-1XSUB\s0 allows a Perl program to access a C library function
called \fIsin()\fR.  The \s-1XSUB\s0 will imitate the C function which takes a single
argument and returns a single value.
.PP
.Vb 3
\&     double
\&     sin(x)
\&       double x
.Ve
.PP
Optionally, one can merge the description of types and the list of
argument names, rewriting this as
.PP
.Vb 2
\&     double
\&     sin(double x)
.Ve
.PP
This makes this \s-1XSUB\s0 look similar to an \s-1ANSI C\s0 declaration.  An optional
semicolon is allowed after the argument list, as in
.PP
.Vb 2
\&     double
\&     sin(double x);
.Ve
.PP
Parameters with C pointer types can have different semantic: C functions
with similar declarations
.PP
.Vb 2
\&     bool string_looks_as_a_number(char *s);
\&     bool make_char_uppercase(char *c);
.Ve
.PP
are used in absolutely incompatible manner.  Parameters to these functions
could be described \fBxsubpp\fR like this:
.PP
.Vb 2
\&     char *  s
\&     char    &c
.Ve
.PP
Both these \s-1XS\s0 declarations correspond to the \f(CW\*(C`char*\*(C'\fR C type, but they have
different semantics, see \*(L"The & Unary Operator\*(R".
.PP
It is convenient to think that the indirection operator
\&\f(CW\*(C`*\*(C'\fR should be considered as a part of the type and the address operator \f(CW\*(C`&\*(C'\fR
should be considered part of the variable.  See perlxstypemap
for more info about handling qualifiers and unary operators in C types.
.PP
The function name and the return type must be placed on
separate lines and should be flush left-adjusted.
.PP
.Vb 1
\&  INCORRECT                        CORRECT
\&
\&  double sin(x)                    double
\&    double x                       sin(x)
\&                                     double x
.Ve
.PP
The rest of the function description may be indented or left-adjusted. The
following example shows a function with its body left-adjusted.  Most
examples in this document will indent the body for better readability.
.PP
.Vb 1
\&  CORRECT
\&
\&  double
\&  sin(x)
\&  double x
.Ve
.PP
More complicated XSUBs may contain many other sections.  Each section of
an \s-1XSUB\s0 starts with the corresponding keyword, such as \s-1INIT:\s0 or \s-1CLEANUP:.\s0
However, the first two lines of an \s-1XSUB\s0 always contain the same data:
descriptions of the return type and the names of the function and its
parameters.  Whatever immediately follows these is considered to be
an \s-1INPUT:\s0 section unless explicitly marked with another keyword.
(See \*(L"The \s-1INPUT:\s0 Keyword\*(R".)
.PP
An \s-1XSUB\s0 section continues until another section-start keyword is found.
.SS "The Argument Stack"
.IX Subsection "The Argument Stack"
The Perl argument stack is used to store the values which are
sent as parameters to the \s-1XSUB\s0 and to store the \s-1XSUB\s0's
return value(s).  In reality all Perl functions (including non-XSUB
ones) keep their values on this stack all the same time, each limited
to its own range of positions on the stack.  In this document the
first position on that stack which belongs to the active
function will be referred to as position 0 for that function.
.PP
XSUBs refer to their stack arguments with the macro \fB\s-1ST\s0(x)\fR, where \fIx\fR
refers to a position in this \s-1XSUB\s0's part of the stack.  Position 0 for that
function would be known to the \s-1XSUB\s0 as \s-1\fIST\s0\fR\|(0).  The \s-1XSUB\s0's incoming
parameters and outgoing return values always begin at \s-1\fIST\s0\fR\|(0).  For many
simple cases the \fBxsubpp\fR compiler will generate the code necessary to
handle the argument stack by embedding code fragments found in the
typemaps.  In more complex cases the programmer must supply the code.
.SS "The \s-1RETVAL\s0 Variable"
.IX Subsection "The RETVAL Variable"
The \s-1RETVAL\s0 variable is a special C variable that is declared automatically
for you.  The C type of \s-1RETVAL\s0 matches the return type of the C library
function.  The \fBxsubpp\fR compiler will declare this variable in each \s-1XSUB\s0
with non\-\f(CW\*(C`void\*(C'\fR return type.  By default the generated C function
will use \s-1RETVAL\s0 to hold the return value of the C library function being
called.  In simple cases the value of \s-1RETVAL\s0 will be placed in \s-1\fIST\s0\fR\|(0) of
the argument stack where it can be received by Perl as the return value
of the \s-1XSUB.\s0
.PP
If the \s-1XSUB\s0 has a return type of \f(CW\*(C`void\*(C'\fR then the compiler will
not declare a \s-1RETVAL\s0 variable for that function.  When using
a \s-1PPCODE:\s0 section no manipulation of the \s-1RETVAL\s0 variable is required, the
section may use direct stack manipulation to place output values on the stack.
.PP
If \s-1PPCODE:\s0 directive is not used, \f(CW\*(C`void\*(C'\fR return value should be used
only for subroutines which do not return a value, \fIeven if\fR \s-1CODE:\s0
directive is used which sets \s-1\fIST\s0\fR\|(0) explicitly.
.PP
Older versions of this document recommended to use \f(CW\*(C`void\*(C'\fR return
value in such cases. It was discovered that this could lead to
segfaults in cases when \s-1XSUB\s0 was \fItruly\fR \f(CW\*(C`void\*(C'\fR. This practice is
now deprecated, and may be not supported at some future version. Use
the return value \f(CW\*(C`SV *\*(C'\fR in such cases. (Currently \f(CW\*(C`xsubpp\*(C'\fR contains
some heuristic code which tries to disambiguate between \*(L"truly-void\*(R"
and \*(L"old-practice-declared-as-void\*(R" functions. Hence your code is at
mercy of this heuristics unless you use \f(CW\*(C`SV *\*(C'\fR as return value.)
.SS "Returning SVs, AVs and HVs through \s-1RETVAL\s0"
.IX Subsection "Returning SVs, AVs and HVs through RETVAL"
When you're using \s-1RETVAL\s0 to return an \f(CW\*(C`SV *\*(C'\fR, there's some magic
going on behind the scenes that should be mentioned. When you're
manipulating the argument stack using the \s-1ST\s0(x) macro, for example,
you usually have to pay special attention to reference counts. (For
more about reference counts, see perlguts.) To make your life
easier, the typemap file automatically makes \f(CW\*(C`RETVAL\*(C'\fR mortal when
you're returning an \f(CW\*(C`SV *\*(C'\fR. Thus, the following two XSUBs are more
or less equivalent:
.PP
.Vb 6
\&  void
\&  alpha()
\&      PPCODE:
\&          ST(0) = newSVpv("Hello World",0);
\&          sv_2mortal(ST(0));
\&          XSRETURN(1);
\&
\&  SV *
\&  beta()
\&      CODE:
\&          RETVAL = newSVpv("Hello World",0);
\&      OUTPUT:
\&          RETVAL
.Ve
.PP
This is quite useful as it usually improves readability. While
this works fine for an \f(CW\*(C`SV *\*(C'\fR, it's unfortunately not as easy
to have \f(CW\*(C`AV *\*(C'\fR or \f(CW\*(C`HV *\*(C'\fR as a return value. You \fIshould\fR be
able to write:
.PP
.Vb 7
\&  AV *
\&  array()
\&      CODE:
\&          RETVAL = newAV();
\&          /* do something with RETVAL */
\&      OUTPUT:
\&          RETVAL
.Ve
.PP
But due to an unfixable bug (fixing it would break lots of existing
\&\s-1CPAN\s0 modules) in the typemap file, the reference count of the \f(CW\*(C`AV *\*(C'\fR
is not properly decremented. Thus, the above \s-1XSUB\s0 would leak memory
whenever it is being called. The same problem exists for \f(CW\*(C`HV *\*(C'\fR,
\&\f(CW\*(C`CV *\*(C'\fR, and \f(CW\*(C`SVREF\*(C'\fR (which indicates a scalar reference, not
a general \f(CW\*(C`SV *\*(C'\fR).
In \s-1XS\s0 code on perls starting with perl 5.16, you can override the
typemaps for any of these types with a version that has proper
handling of refcounts. In your \f(CW\*(C`TYPEMAP\*(C'\fR section, do
.PP
.Vb 1
\&  AV*   T_AVREF_REFCOUNT_FIXED
.Ve
.PP
to get the repaired variant. For backward compatibility with older
versions of perl, you can instead decrement the reference count
manually when you're returning one of the aforementioned
types using \f(CW\*(C`sv_2mortal\*(C'\fR:
.PP
.Vb 8
\&  AV *
\&  array()
\&      CODE:
\&          RETVAL = newAV();
\&          sv_2mortal((SV*)RETVAL);
\&          /* do something with RETVAL */
\&      OUTPUT:
\&          RETVAL
.Ve
.PP
Remember that you don't have to do this for an \f(CW\*(C`SV *\*(C'\fR. The reference
documentation for all core typemaps can be found in perlxstypemap.
.SS "The \s-1MODULE\s0 Keyword"
.IX Subsection "The MODULE Keyword"
The \s-1MODULE\s0 keyword is used to start the \s-1XS\s0 code and to specify the package
of the functions which are being defined.  All text preceding the first
\&\s-1MODULE\s0 keyword is considered C code and is passed through to the output with
\&\s-1POD\s0 stripped, but otherwise untouched.  Every \s-1XS\s0 module will have a
bootstrap function which is used to hook the XSUBs into Perl.  The package
name of this bootstrap function will match the value of the last \s-1MODULE\s0
statement in the \s-1XS\s0 source files.  The value of \s-1MODULE\s0 should always remain
constant within the same \s-1XS\s0 file, though this is not required.
.PP
The following example will start the \s-1XS\s0 code and will place
all functions in a package named \s-1RPC.\s0
.PP
.Vb 1
\&     MODULE = RPC
.Ve
.SS "The \s-1PACKAGE\s0 Keyword"
.IX Subsection "The PACKAGE Keyword"
When functions within an \s-1XS\s0 source file must be separated into packages
the \s-1PACKAGE\s0 keyword should be used.  This keyword is used with the \s-1MODULE\s0
keyword and must follow immediately after it when used.
.PP
.Vb 1
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     [ XS code in package RPC ]
\&
\&     MODULE = RPC  PACKAGE = RPCB
\&
\&     [ XS code in package RPCB ]
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     [ XS code in package RPC ]
.Ve
.PP
The same package name can be used more than once, allowing for
non-contiguous code. This is useful if you have a stronger ordering
principle than package names.
.PP
Although this keyword is optional and in some cases provides redundant
information it should always be used.  This keyword will ensure that the
XSUBs appear in the desired package.
.SS "The \s-1PREFIX\s0 Keyword"
.IX Subsection "The PREFIX Keyword"
The \s-1PREFIX\s0 keyword designates prefixes which should be
removed from the Perl function names.  If the C function is
\&\f(CW\*(C`rpcb_gettime()\*(C'\fR and the \s-1PREFIX\s0 value is \f(CW\*(C`rpcb_\*(C'\fR then Perl will
see this function as \f(CW\*(C`gettime()\*(C'\fR.
.PP
This keyword should follow the \s-1PACKAGE\s0 keyword when used.
If \s-1PACKAGE\s0 is not used then \s-1PREFIX\s0 should follow the \s-1MODULE\s0
keyword.
.PP
.Vb 1
\&     MODULE = RPC  PREFIX = rpc_
\&
\&     MODULE = RPC  PACKAGE = RPCB  PREFIX = rpcb_
.Ve
.SS "The \s-1OUTPUT:\s0 Keyword"
.IX Subsection "The OUTPUT: Keyword"
The \s-1OUTPUT:\s0 keyword indicates that certain function parameters should be
updated (new values made visible to Perl) when the \s-1XSUB\s0 terminates or that
certain values should be returned to the calling Perl function.  For
simple functions which have no \s-1CODE:\s0 or \s-1PPCODE:\s0 section,
such as the \fIsin()\fR function above, the \s-1RETVAL\s0 variable is
automatically designated as an output value.  For more complex functions
the \fBxsubpp\fR compiler will need help to determine which variables are output
variables.
.PP
This keyword will normally be used to complement the \s-1CODE: \s0 keyword.
The \s-1RETVAL\s0 variable is not recognized as an output variable when the
\&\s-1CODE:\s0 keyword is present.  The \s-1OUTPUT: \s0 keyword is used in this
situation to tell the compiler that \s-1RETVAL\s0 really is an output
variable.
.PP
The \s-1OUTPUT:\s0 keyword can also be used to indicate that function parameters
are output variables.  This may be necessary when a parameter has been
modified within the function and the programmer would like the update to
be seen by Perl.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.PP
The \s-1OUTPUT:\s0 keyword will also allow an output parameter to
be mapped to a matching piece of code rather than to a
typemap.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep sv_setnv(ST(1), (double)timep);
.Ve
.PP
\&\fBxsubpp\fR emits an automatic \f(CW\*(C`SvSETMAGIC()\*(C'\fR for all parameters in the
\&\s-1OUTPUT\s0 section of the \s-1XSUB,\s0 except \s-1RETVAL. \s0 This is the usually desired
behavior, as it takes care of properly invoking 'set' magic on output
parameters (needed for hash or array element parameters that must be
created if they didn't exist).  If for some reason, this behavior is
not desired, the \s-1OUTPUT\s0 section may contain a \f(CW\*(C`SETMAGIC: DISABLE\*(C'\fR line
to disable it for the remainder of the parameters in the \s-1OUTPUT\s0 section.
Likewise,  \f(CW\*(C`SETMAGIC: ENABLE\*(C'\fR can be used to reenable it for the
remainder of the \s-1OUTPUT\s0 section.  See perlguts for more details
about 'set' magic.
.SS "The \s-1NO_OUTPUT\s0 Keyword"
.IX Subsection "The NO_OUTPUT Keyword"
The \s-1NO_OUTPUT\s0 can be placed as the first token of the \s-1XSUB. \s0 This keyword
indicates that while the C subroutine we provide an interface to has
a non\-\f(CW\*(C`void\*(C'\fR return type, the return value of this C subroutine should not
be returned from the generated Perl subroutine.
.PP
With this keyword present \*(L"The \s-1RETVAL\s0 Variable\*(R" is created, and in the
generated call to the subroutine this variable is assigned to, but the value
of this variable is not going to be used in the auto-generated code.
.PP
This keyword makes sense only if \f(CW\*(C`RETVAL\*(C'\fR is going to be accessed by the
user-supplied code.  It is especially useful to make a function interface
more Perl-like, especially when the C return value is just an error condition
indicator.  For example,
.PP
.Vb 5
\&  NO_OUTPUT int
\&  delete_file(char *name)
\&    POSTCALL:
\&      if (RETVAL != 0)
\&          croak("Error %d while deleting file \*(Aq%s\*(Aq", RETVAL, name);
.Ve
.PP
Here the generated \s-1XS\s0 function returns nothing on success, and will \fIdie()\fR
with a meaningful error message on error.
.SS "The \s-1CODE:\s0 Keyword"
.IX Subsection "The CODE: Keyword"
This keyword is used in more complicated XSUBs which require
special handling for the C function.  The \s-1RETVAL\s0 variable is
still declared, but it will not be returned unless it is specified
in the \s-1OUTPUT:\s0 section.
.PP
The following \s-1XSUB\s0 is for a C function which requires special handling of
its parameters.  The Perl usage is given first.
.PP
.Vb 1
\&     $status = rpcb_gettime( "localhost", $timep );
.Ve
.PP
The \s-1XSUB\s0 follows.
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t timep
\&        CODE:
\&               RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The \s-1INIT:\s0 Keyword"
.IX Subsection "The INIT: Keyword"
The \s-1INIT:\s0 keyword allows initialization to be inserted into the \s-1XSUB\s0 before
the compiler generates the call to the C function.  Unlike the \s-1CODE:\s0 keyword
above, this keyword does not affect the way the compiler handles \s-1RETVAL.\s0
.PP
.Vb 8
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        INIT:
\&          printf("# Host is %s\en", host );
\&        OUTPUT:
\&          timep
.Ve
.PP
Another use for the \s-1INIT:\s0 section is to check for preconditions before
making a call to the C function:
.PP
.Vb 9
\&    long long
\&    lldiv(a,b)
\&        long long a
\&        long long b
\&      INIT:
\&        if (a == 0 && b == 0)
\&            XSRETURN_UNDEF;
\&        if (b == 0)
\&            croak("lldiv: cannot divide by 0");
.Ve
.SS "The \s-1NO_INIT\s0 Keyword"
.IX Subsection "The NO_INIT Keyword"
The \s-1NO_INIT\s0 keyword is used to indicate that a function
parameter is being used only as an output value.  The \fBxsubpp\fR
compiler will normally generate code to read the values of
all function parameters from the argument stack and assign
them to C variables upon entry to the function.  \s-1NO_INIT\s0
will tell the compiler that some parameters will be used for
output rather than for input and that they will be handled
before the function terminates.
.PP
The following example shows a variation of the \fIrpcb_gettime()\fR function.
This function uses the timep variable only as an output variable and does
not care about its initial contents.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep = NO_INIT
\&        OUTPUT:
\&          timep
.Ve
.SS "The \s-1TYPEMAP:\s0 Keyword"
.IX Subsection "The TYPEMAP: Keyword"
Starting with Perl 5.16, you can embed typemaps into your \s-1XS\s0 code
instead of or in addition to typemaps in a separate file.  Multiple
such embedded typemaps will be processed in order of appearance in
the \s-1XS\s0 code and like local typemap files take precendence over the
default typemap, the embedded typemaps may overwrite previous
definitions of \s-1TYPEMAP, INPUT,\s0 and \s-1OUTPUT\s0 stanzas.  The syntax for
embedded typemaps is
.PP
.Vb 3
\&      TYPEMAP: <<HERE
\&      ... your typemap code here ...
\&      HERE
.Ve
.PP
where the \f(CW\*(C`TYPEMAP\*(C'\fR keyword must appear in the first column of a
new line.
.PP
Refer to perlxstypemap for details on writing typemaps.
.SS "Initializing Function Parameters"
.IX Subsection "Initializing Function Parameters"
C function parameters are normally initialized with their values from
the argument stack (which in turn contains the parameters that were
passed to the \s-1XSUB\s0 from Perl).  The typemaps contain the
code segments which are used to translate the Perl values to
the C parameters.  The programmer, however, is allowed to
override the typemaps and supply alternate (or additional)
initialization code.  Initialization code starts with the first
\&\f(CW\*(C`=\*(C'\fR, \f(CW\*(C`;\*(C'\fR or \f(CW\*(C`+\*(C'\fR on a line in the \s-1INPUT:\s0 section.  The only
exception happens if this \f(CW\*(C`;\*(C'\fR terminates the line, then this \f(CW\*(C`;\*(C'\fR
is quietly ignored.
.PP
The following code demonstrates how to supply initialization code for
function parameters.  The initialization code is eval'ed within double
quotes by the compiler before it is added to the output so anything
which should be interpreted literally [mainly \f(CW\*(C`$\*(C'\fR, \f(CW\*(C`@\*(C'\fR, or \f(CW\*(C`\e\e\*(C'\fR]
must be protected with backslashes.  The variables \f(CW$var\fR, \f(CW$arg\fR,
and \f(CW$type\fR can be used as in typemaps.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host = (char *)SvPV_nolen($arg);
\&          time_t &timep = 0;
\&        OUTPUT:
\&          timep
.Ve
.PP
This should not be used to supply default values for parameters.  One
would normally use this when a function parameter must be processed by
another library function before it can be used.  Default parameters are
covered in the next section.
.PP
If the initialization begins with \f(CW\*(C`=\*(C'\fR, then it is output in
the declaration for the input variable, replacing the initialization
supplied by the typemap.  If the initialization
begins with \f(CW\*(C`;\*(C'\fR or \f(CW\*(C`+\*(C'\fR, then it is performed after
all of the input variables have been declared.  In the \f(CW\*(C`;\*(C'\fR
case the initialization normally supplied by the typemap is not performed.
For the \f(CW\*(C`+\*(C'\fR case, the declaration for the variable will include the
initialization from the typemap.  A global
variable, \f(CW%v\fR, is available for the truly rare case where
information from one initialization is needed in another
initialization.
.PP
Here's a truly obscure example:
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          time_t &timep; /* \e$v{timep}=@{[$v{timep}=$arg]} */
\&          char *host + SvOK($v{timep}) ? SvPV_nolen($arg) : NULL;
\&        OUTPUT:
\&          timep
.Ve
.PP
The construct \f(CW\*(C`\e$v{timep}=@{[$v{timep}=$arg]}\*(C'\fR used in the above
example has a two-fold purpose: first, when this line is processed by
\&\fBxsubpp\fR, the Perl snippet \f(CW\*(C`$v{timep}=$arg\*(C'\fR is evaluated.  Second,
the text of the evaluated snippet is output into the generated C file
(inside a C comment)!  During the processing of \f(CW\*(C`char *host\*(C'\fR line,
\&\f(CW$arg\fR will evaluate to \f(CWST(0)\fR, and \f(CW$v{timep}\fR will evaluate to
\&\f(CWST(1)\fR.
.SS "Default Parameter Values"
.IX Subsection "Default Parameter Values"
Default values for \s-1XSUB\s0 arguments can be specified by placing an
assignment statement in the parameter list.  The default value may
be a number, a string or the special string \f(CW\*(C`NO_INIT\*(C'\fR.  Defaults should
always be used on the right-most parameters only.
.PP
To allow the \s-1XSUB\s0 for \fIrpcb_gettime()\fR to have a default host
value the parameters to the \s-1XSUB\s0 could be rearranged.  The
\&\s-1XSUB\s0 will then call the real \fIrpcb_gettime()\fR function with
the parameters in the correct order.  This \s-1XSUB\s0 can be called
from Perl with either of the following statements:
.PP
.Vb 1
\&     $status = rpcb_gettime( $timep, $host );
\&
\&     $status = rpcb_gettime( $timep );
.Ve
.PP
The \s-1XSUB\s0 will look like the code  which  follows.   A  \s-1CODE:\s0
block  is used to call the real \fIrpcb_gettime()\fR function with
the parameters in the correct order for that function.
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(timep,host="localhost")
\&          char *host
\&          time_t timep = NO_INIT
\&        CODE:
\&               RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The \s-1PREINIT:\s0 Keyword"
.IX Subsection "The PREINIT: Keyword"
The \s-1PREINIT:\s0 keyword allows extra variables to be declared immediately
before or after the declarations of the parameters from the \s-1INPUT:\s0 section
are emitted.
.PP
If a variable is declared inside a \s-1CODE:\s0 section it will follow any typemap
code that is emitted for the input parameters.  This may result in the
declaration ending up after C code, which is C syntax error.  Similar
errors may happen with an explicit \f(CW\*(C`;\*(C'\fR\-type or \f(CW\*(C`+\*(C'\fR\-type initialization of
parameters is used (see \*(L"Initializing Function Parameters\*(R").  Declaring
these variables in an \s-1INIT:\s0 section will not help.
.PP
In such cases, to force an additional variable to be declared together
with declarations of other variables, place the declaration into a
\&\s-1PREINIT:\s0 section.  The \s-1PREINIT:\s0 keyword may be used one or more times
within an \s-1XSUB.\s0
.PP
The following examples are equivalent, but if the code is using complex
typemaps then the first example is safer.
.PP
.Vb 10
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&        PREINIT:
\&          char *host = "localhost";
\&        CODE:
\&          RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
For this particular case an \s-1INIT:\s0 keyword would generate the
same C code as the \s-1PREINIT:\s0 keyword.  Another correct, but error-prone example:
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&        CODE:
\&          char *host = "localhost";
\&          RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
Another way to declare \f(CW\*(C`host\*(C'\fR is to use a C block in the \s-1CODE:\s0 section:
.PP
.Vb 11
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&        CODE:
\&          {
\&            char *host = "localhost";
\&            RETVAL = rpcb_gettime( host, &timep );
\&          }
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
The ability to put additional declarations before the typemap entries are
processed is very handy in the cases when typemap conversions manipulate
some global state:
.PP
.Vb 8
\&    MyObject
\&    mutate(o)
\&        PREINIT:
\&            MyState st = global_state;
\&        INPUT:
\&            MyObject o;
\&        CLEANUP:
\&            reset_to(global_state, st);
.Ve
.PP
Here we suppose that conversion to \f(CW\*(C`MyObject\*(C'\fR in the \s-1INPUT:\s0 section and from
MyObject when processing \s-1RETVAL\s0 will modify a global variable \f(CW\*(C`global_state\*(C'\fR.
After these conversions are performed, we restore the old value of
\&\f(CW\*(C`global_state\*(C'\fR (to avoid memory leaks, for example).
.PP
There is another way to trade clarity for compactness: \s-1INPUT\s0 sections allow
declaration of C variables which do not appear in the parameter list of
a subroutine.  Thus the above code for \fImutate()\fR can be rewritten as
.PP
.Vb 6
\&    MyObject
\&    mutate(o)
\&          MyState st = global_state;
\&          MyObject o;
\&        CLEANUP:
\&          reset_to(global_state, st);
.Ve
.PP
and the code for \fIrpcb_gettime()\fR can be rewritten as
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&          char *host = "localhost";
\&        C_ARGS:
\&          host, &timep
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The \s-1SCOPE:\s0 Keyword"
.IX Subsection "The SCOPE: Keyword"
The \s-1SCOPE:\s0 keyword allows scoping to be enabled for a particular \s-1XSUB.\s0 If
enabled, the \s-1XSUB\s0 will invoke \s-1ENTER\s0 and \s-1LEAVE\s0 automatically.
.PP
To support potentially complex type mappings, if a typemap entry used
by an \s-1XSUB\s0 contains a comment like \f(CW\*(C`/*scope*/\*(C'\fR then scoping will
be automatically enabled for that \s-1XSUB.\s0
.PP
To enable scoping:
.PP
.Vb 1
\&    SCOPE: ENABLE
.Ve
.PP
To disable scoping:
.PP
.Vb 1
\&    SCOPE: DISABLE
.Ve
.SS "The \s-1INPUT:\s0 Keyword"
.IX Subsection "The INPUT: Keyword"
The \s-1XSUB\s0's parameters are usually evaluated immediately after entering the
\&\s-1XSUB. \s0 The \s-1INPUT:\s0 keyword can be used to force those parameters to be
evaluated a little later.  The \s-1INPUT:\s0 keyword can be used multiple times
within an \s-1XSUB\s0 and can be used to list one or more input variables.  This
keyword is used with the \s-1PREINIT:\s0 keyword.
.PP
The following example shows how the input parameter \f(CW\*(C`timep\*(C'\fR can be
evaluated late, after a \s-1PREINIT.\s0
.PP
.Vb 10
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&        PREINIT:
\&          time_t tt;
\&        INPUT:
\&          time_t timep
\&        CODE:
\&               RETVAL = rpcb_gettime( host, &tt );
\&               timep = tt;
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
The next example shows each input parameter evaluated late.
.PP
.Vb 10
\&    bool_t
\&    rpcb_gettime(host,timep)
\&        PREINIT:
\&          time_t tt;
\&        INPUT:
\&          char *host
\&        PREINIT:
\&          char *h;
\&        INPUT:
\&          time_t timep
\&        CODE:
\&               h = host;
\&               RETVAL = rpcb_gettime( h, &tt );
\&               timep = tt;
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
Since \s-1INPUT\s0 sections allow declaration of C variables which do not appear
in the parameter list of a subroutine, this may be shortened to:
.PP
.Vb 12
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          time_t tt;
\&          char *host;
\&          char *h = host;
\&          time_t timep;
\&        CODE:
\&          RETVAL = rpcb_gettime( h, &tt );
\&          timep = tt;
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
(We used our knowledge that input conversion for \f(CW\*(C`char *\*(C'\fR is a \*(L"simple\*(R" one,
thus \f(CW\*(C`host\*(C'\fR is initialized on the declaration line, and our assignment
\&\f(CW\*(C`h = host\*(C'\fR is not performed too early.  Otherwise one would need to have the
assignment \f(CW\*(C`h = host\*(C'\fR in a \s-1CODE:\s0 or \s-1INIT:\s0 section.)
.SS "The \s-1IN/OUTLIST/IN_OUTLIST/OUT/IN_OUT\s0 Keywords"
.IX Subsection "The IN/OUTLIST/IN_OUTLIST/OUT/IN_OUT Keywords"
In the list of parameters for an \s-1XSUB,\s0 one can precede parameter names
by the \f(CW\*(C`IN\*(C'\fR/\f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR keywords.
\&\f(CW\*(C`IN\*(C'\fR keyword is the default, the other keywords indicate how the Perl
interface should differ from the C interface.
.PP
Parameters preceded by \f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR
keywords are considered to be used by the C subroutine \fIvia
pointers\fR.  \f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR keywords indicate that the C subroutine
does not inspect the memory pointed by this parameter, but will write
through this pointer to provide additional return values.
.PP
Parameters preceded by \f(CW\*(C`OUTLIST\*(C'\fR keyword do not appear in the usage
signature of the generated Perl function.
.PP
Parameters preceded by \f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR \fIdo\fR appear as
parameters to the Perl function.  With the exception of
\&\f(CW\*(C`OUT\*(C'\fR\-parameters, these parameters are converted to the corresponding
C type, then pointers to these data are given as arguments to the C
function.  It is expected that the C function will write through these
pointers.
.PP
The return list of the generated Perl function consists of the C return value
from the function (unless the \s-1XSUB\s0 is of \f(CW\*(C`void\*(C'\fR return type or
\&\f(CW\*(C`The NO_OUTPUT Keyword\*(C'\fR was used) followed by all the \f(CW\*(C`OUTLIST\*(C'\fR
and \f(CW\*(C`IN_OUTLIST\*(C'\fR parameters (in the order of appearance).  On the
return from the \s-1XSUB\s0 the \f(CW\*(C`IN_OUT\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR Perl parameter will be
modified to have the values written by the C function.
.PP
For example, an \s-1XSUB\s0
.PP
.Vb 5
\&  void
\&  day_month(OUTLIST day, IN unix_time, OUTLIST month)
\&    int day
\&    int unix_time
\&    int month
.Ve
.PP
should be used from Perl as
.PP
.Vb 1
\&  my ($day, $month) = day_month(time);
.Ve
.PP
The C signature of the corresponding function should be
.PP
.Vb 1
\&  void day_month(int *day, int unix_time, int *month);
.Ve
.PP
The \f(CW\*(C`IN\*(C'\fR/\f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR keywords can be
mixed with ANSI-style declarations, as in
.PP
.Vb 2
\&  void
\&  day_month(OUTLIST int day, int unix_time, OUTLIST int month)
.Ve
.PP
(here the optional \f(CW\*(C`IN\*(C'\fR keyword is omitted).
.PP
The \f(CW\*(C`IN_OUT\*(C'\fR parameters are identical with parameters introduced with
\&\*(L"The & Unary Operator\*(R" and put into the \f(CW\*(C`OUTPUT:\*(C'\fR section (see
\&\*(L"The \s-1OUTPUT:\s0 Keyword\*(R").  The \f(CW\*(C`IN_OUTLIST\*(C'\fR parameters are very similar,
the only difference being that the value C function writes through the
pointer would not modify the Perl parameter, but is put in the output
list.
.PP
The \f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR parameter differ from \f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR
parameters only by the initial value of the Perl parameter not
being read (and not being given to the C function \- which gets some
garbage instead).  For example, the same C function as above can be
interfaced with as
.PP
.Vb 1
\&  void day_month(OUT int day, int unix_time, OUT int month);
.Ve
.PP
or
.PP
.Vb 8
\&  void
\&  day_month(day, unix_time, month)
\&      int &day = NO_INIT
\&      int  unix_time
\&      int &month = NO_INIT
\&    OUTPUT:
\&      day
\&      month
.Ve
.PP
However, the generated Perl function is called in very C\-ish style:
.PP
.Vb 2
\&  my ($day, $month);
\&  day_month($day, time, $month);
.Ve
.ie n .SS "The ""length(NAME)"" Keyword"
.el .SS "The \f(CWlength(NAME)\fP Keyword"
.IX Subsection "The length(NAME) Keyword"
If one of the input arguments to the C function is the length of a string
argument \f(CW\*(C`NAME\*(C'\fR, one can substitute the name of the length-argument by
\&\f(CW\*(C`length(NAME)\*(C'\fR in the \s-1XSUB\s0 declaration.  This argument must be omitted when
the generated Perl function is called.  E.g.,
.PP
.Vb 9
\&  void
\&  dump_chars(char *s, short l)
\&  {
\&    short n = 0;
\&    while (n < l) {
\&        printf("s[%d] = \e"\e\e%#03o\e"\en", n, (int)s[n]);
\&        n++;
\&    }
\&  }
\&
\&  MODULE = x            PACKAGE = x
\&
\&  void dump_chars(char *s, short length(s))
.Ve
.PP
should be called as \f(CW\*(C`dump_chars($string)\*(C'\fR.
.PP
This directive is supported with ANSI-type function declarations only.
.SS "Variable-length Parameter Lists"
.IX Subsection "Variable-length Parameter Lists"
XSUBs can have variable-length parameter lists by specifying an ellipsis
\&\f(CW\*(C`(...)\*(C'\fR in the parameter list.  This use of the ellipsis is similar to that
found in \s-1ANSI C. \s0 The programmer is able to determine the number of
arguments passed to the \s-1XSUB\s0 by examining the \f(CW\*(C`items\*(C'\fR variable which the
\&\fBxsubpp\fR compiler supplies for all XSUBs.  By using this mechanism one can
create an \s-1XSUB\s0 which accepts a list of parameters of unknown length.
.PP
The \fIhost\fR parameter for the \fIrpcb_gettime()\fR \s-1XSUB\s0 can be
optional so the ellipsis can be used to indicate that the
\&\s-1XSUB\s0 will take a variable number of parameters.  Perl should
be able to call this \s-1XSUB\s0 with either of the following statements.
.PP
.Vb 1
\&     $status = rpcb_gettime( $timep, $host );
\&
\&     $status = rpcb_gettime( $timep );
.Ve
.PP
The \s-1XS\s0 code, with ellipsis, follows.
.PP
.Vb 12
\&     bool_t
\&     rpcb_gettime(timep, ...)
\&          time_t timep = NO_INIT
\&        PREINIT:
\&          char *host = "localhost";
\&        CODE:
\&          if( items > 1 )
\&               host = (char *)SvPV_nolen(ST(1));
\&          RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The C_ARGS: Keyword"
.IX Subsection "The C_ARGS: Keyword"
The C_ARGS: keyword allows creating of \s-1XSUBS\s0 which have different
calling sequence from Perl than from C, without a need to write
\&\s-1CODE:\s0 or \s-1PPCODE:\s0 section.  The contents of the C_ARGS: paragraph is
put as the argument to the called C function without any change.
.PP
For example, suppose that a C function is declared as
.PP
.Vb 1
\&    symbolic nth_derivative(int n, symbolic function, int flags);
.Ve
.PP
and that the default flags are kept in a global C variable
\&\f(CW\*(C`default_flags\*(C'\fR.  Suppose that you want to create an interface which
is called as
.PP
.Vb 1
\&    $second_deriv = $function\->nth_derivative(2);
.Ve
.PP
To do this, declare the \s-1XSUB\s0 as
.PP
.Vb 6
\&    symbolic
\&    nth_derivative(function, n)
\&        symbolic        function
\&        int             n
\&      C_ARGS:
\&        n, function, default_flags
.Ve
.SS "The \s-1PPCODE:\s0 Keyword"
.IX Subsection "The PPCODE: Keyword"
The \s-1PPCODE:\s0 keyword is an alternate form of the \s-1CODE:\s0 keyword and is used
to tell the \fBxsubpp\fR compiler that the programmer is supplying the code to
control the argument stack for the XSUBs return values.  Occasionally one
will want an \s-1XSUB\s0 to return a list of values rather than a single value.
In these cases one must use \s-1PPCODE:\s0 and then explicitly push the list of
values on the stack.  The \s-1PPCODE:\s0 and \s-1CODE: \s0 keywords should not be used
together within the same \s-1XSUB.\s0
.PP
The actual difference between \s-1PPCODE:\s0 and \s-1CODE:\s0 sections is in the
initialization of \f(CW\*(C`SP\*(C'\fR macro (which stands for the \fIcurrent\fR Perl
stack pointer), and in the handling of data on the stack when returning
from an \s-1XSUB. \s0 In \s-1CODE:\s0 sections \s-1SP\s0 preserves the value which was on
entry to the \s-1XSUB: SP\s0 is on the function pointer (which follows the
last parameter).  In \s-1PPCODE:\s0 sections \s-1SP\s0 is moved backward to the
beginning of the parameter list, which allows \f(CW\*(C`PUSH*()\*(C'\fR macros
to place output values in the place Perl expects them to be when
the \s-1XSUB\s0 returns back to Perl.
.PP
The generated trailer for a \s-1CODE:\s0 section ensures that the number of return
values Perl will see is either 0 or 1 (depending on the \f(CW\*(C`void\*(C'\fRness of the
return value of the C function, and heuristics mentioned in
\&\*(L"The \s-1RETVAL\s0 Variable\*(R").  The trailer generated for a \s-1PPCODE:\s0 section
is based on the number of return values and on the number of times
\&\f(CW\*(C`SP\*(C'\fR was updated by \f(CW\*(C`[X]PUSH*()\*(C'\fR macros.
.PP
Note that macros \f(CWST(i)\fR, \f(CW\*(C`XST_m*()\*(C'\fR and \f(CW\*(C`XSRETURN*()\*(C'\fR work equally
well in \s-1CODE:\s0 sections and \s-1PPCODE:\s0 sections.
.PP
The following \s-1XSUB\s0 will call the C \fIrpcb_gettime()\fR function
and will return its two output values, timep and status, to
Perl as a single list.
.PP
.Vb 11
\&     void
\&     rpcb_gettime(host)
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&          bool_t  status;
\&        PPCODE:
\&          status = rpcb_gettime( host, &timep );
\&          EXTEND(SP, 2);
\&          PUSHs(sv_2mortal(newSViv(status)));
\&          PUSHs(sv_2mortal(newSViv(timep)));
.Ve
.PP
Notice that the programmer must supply the C code necessary
to have the real \fIrpcb_gettime()\fR function called and to have
the return values properly placed on the argument stack.
.PP
The \f(CW\*(C`void\*(C'\fR return type for this function tells the \fBxsubpp\fR compiler that
the \s-1RETVAL\s0 variable is not needed or used and that it should not be created.
In most scenarios the void return type should be used with the \s-1PPCODE:\s0
directive.
.PP
The \s-1\fIEXTEND\s0()\fR macro is used to make room on the argument
stack for 2 return values.  The \s-1PPCODE:\s0 directive causes the
\&\fBxsubpp\fR compiler to create a stack pointer available as \f(CW\*(C`SP\*(C'\fR, and it
is this pointer which is being used in the \s-1\fIEXTEND\s0()\fR macro.
The values are then pushed onto the stack with the \fIPUSHs()\fR
macro.
.PP
Now the \fIrpcb_gettime()\fR function can be used from Perl with
the following statement.
.PP
.Vb 1
\&     ($status, $timep) = rpcb_gettime("localhost");
.Ve
.PP
When handling output parameters with a \s-1PPCODE\s0 section, be sure to handle
\&'set' magic properly.  See perlguts for details about 'set' magic.
.SS "Returning Undef And Empty Lists"
.IX Subsection "Returning Undef And Empty Lists"
Occasionally the programmer will want to return simply
\&\f(CW\*(C`undef\*(C'\fR or an empty list if a function fails rather than a
separate status value.  The \fIrpcb_gettime()\fR function offers
just this situation.  If the function succeeds we would like
to have it return the time and if it fails we would like to
have undef returned.  In the following Perl code the value
of \f(CW$timep\fR will either be undef or it will be a valid time.
.PP
.Vb 1
\&     $timep = rpcb_gettime( "localhost" );
.Ve
.PP
The following \s-1XSUB\s0 uses the \f(CW\*(C`SV *\*(C'\fR return type as a mnemonic only,
and uses a \s-1CODE:\s0 block to indicate to the compiler
that the programmer has supplied all the necessary code.  The
\&\fIsv_newmortal()\fR call will initialize the return value to undef, making that
the default return value.
.PP
.Vb 10
\&     SV *
\&     rpcb_gettime(host)
\&          char *  host
\&        PREINIT:
\&          time_t  timep;
\&          bool_t x;
\&        CODE:
\&          ST(0) = sv_newmortal();
\&          if( rpcb_gettime( host, &timep ) )
\&               sv_setnv( ST(0), (double)timep);
.Ve
.PP
The next example demonstrates how one would place an explicit undef in the
return value, should the need arise.
.PP
.Vb 10
\&     SV *
\&     rpcb_gettime(host)
\&          char *  host
\&        PREINIT:
\&          time_t  timep;
\&          bool_t x;
\&        CODE:
\&          if( rpcb_gettime( host, &timep ) ){
\&               ST(0) = sv_newmortal();
\&               sv_setnv( ST(0), (double)timep);
\&          }
\&          else{
\&               ST(0) = &PL_sv_undef;
\&          }
.Ve
.PP
To return an empty list one must use a \s-1PPCODE:\s0 block and
then not push return values on the stack.
.PP
.Vb 12
\&     void
\&     rpcb_gettime(host)
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&        PPCODE:
\&          if( rpcb_gettime( host, &timep ) )
\&               PUSHs(sv_2mortal(newSViv(timep)));
\&          else{
\&              /* Nothing pushed on stack, so an empty
\&               * list is implicitly returned. */
\&          }
.Ve
.PP
Some people may be inclined to include an explicit \f(CW\*(C`return\*(C'\fR in the above
\&\s-1XSUB,\s0 rather than letting control fall through to the end.  In those
situations \f(CW\*(C`XSRETURN_EMPTY\*(C'\fR should be used, instead.  This will ensure that
the \s-1XSUB\s0 stack is properly adjusted.  Consult perlapi for other
\&\f(CW\*(C`XSRETURN\*(C'\fR macros.
.PP
Since \f(CW\*(C`XSRETURN_*\*(C'\fR macros can be used with \s-1CODE\s0 blocks as well, one can
rewrite this example as:
.PP
.Vb 11
\&     int
\&     rpcb_gettime(host)
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&        CODE:
\&          RETVAL = rpcb_gettime( host, &timep );
\&          if (RETVAL == 0)
\&                XSRETURN_UNDEF;
\&        OUTPUT:
\&          RETVAL
.Ve
.PP
In fact, one can put this check into a \s-1POSTCALL:\s0 section as well.  Together
with \s-1PREINIT:\s0 simplifications, this leads to:
.PP
.Vb 7
\&     int
\&     rpcb_gettime(host)
\&          char *host
\&          time_t  timep;
\&        POSTCALL:
\&          if (RETVAL == 0)
\&                XSRETURN_UNDEF;
.Ve
.SS "The \s-1REQUIRE:\s0 Keyword"
.IX Subsection "The REQUIRE: Keyword"
The \s-1REQUIRE:\s0 keyword is used to indicate the minimum version of the
\&\fBxsubpp\fR compiler needed to compile the \s-1XS\s0 module.  An \s-1XS\s0 module which
contains the following statement will compile with only \fBxsubpp\fR version
1.922 or greater:
.PP
.Vb 1
\&        REQUIRE: 1.922
.Ve
.SS "The \s-1CLEANUP:\s0 Keyword"
.IX Subsection "The CLEANUP: Keyword"
This keyword can be used when an \s-1XSUB\s0 requires special cleanup procedures
before it terminates.  When the \s-1CLEANUP: \s0 keyword is used it must follow
any \s-1CODE:, PPCODE:,\s0 or \s-1OUTPUT:\s0 blocks which are present in the \s-1XSUB. \s0 The
code specified for the cleanup block will be added as the last statements
in the \s-1XSUB.\s0
.SS "The \s-1POSTCALL:\s0 Keyword"
.IX Subsection "The POSTCALL: Keyword"
This keyword can be used when an \s-1XSUB\s0 requires special procedures
executed after the C subroutine call is performed.  When the \s-1POSTCALL:\s0
keyword is used it must precede \s-1OUTPUT:\s0 and \s-1CLEANUP:\s0 blocks which are
present in the \s-1XSUB.\s0
.PP
See examples in \*(L"The \s-1NO_OUTPUT\s0 Keyword\*(R" and \*(L"Returning Undef And Empty Lists\*(R".
.PP
The \s-1POSTCALL:\s0 block does not make a lot of sense when the C subroutine
call is supplied by user by providing either \s-1CODE:\s0 or \s-1PPCODE:\s0 section.
.SS "The \s-1BOOT:\s0 Keyword"
.IX Subsection "The BOOT: Keyword"
The \s-1BOOT:\s0 keyword is used to add code to the extension's bootstrap
function.  The bootstrap function is generated by the \fBxsubpp\fR compiler and
normally holds the statements necessary to register any XSUBs with Perl.
With the \s-1BOOT:\s0 keyword the programmer can tell the compiler to add extra
statements to the bootstrap function.
.PP
This keyword may be used any time after the first \s-1MODULE\s0 keyword and should
appear on a line by itself.  The first blank line after the keyword will
terminate the code block.
.PP
.Vb 4
\&     BOOT:
\&     # The following message will be printed when the
\&     # bootstrap function executes.
\&     printf("Hello from the bootstrap!\en");
.Ve
.SS "The \s-1VERSIONCHECK:\s0 Keyword"
.IX Subsection "The VERSIONCHECK: Keyword"
The \s-1VERSIONCHECK:\s0 keyword corresponds to \fBxsubpp\fR's \f(CW\*(C`\-versioncheck\*(C'\fR and
\&\f(CW\*(C`\-noversioncheck\*(C'\fR options.  This keyword overrides the command line
options.  Version checking is enabled by default.  When version checking is
enabled the \s-1XS\s0 module will attempt to verify that its version matches the
version of the \s-1PM\s0 module.
.PP
To enable version checking:
.PP
.Vb 1
\&    VERSIONCHECK: ENABLE
.Ve
.PP
To disable version checking:
.PP
.Vb 1
\&    VERSIONCHECK: DISABLE
.Ve
.PP
Note that if the version of the \s-1PM\s0 module is an \s-1NV \s0(a floating point
number), it will be stringified with a possible loss of precision
(currently chopping to nine decimal places) so that it may not match
the version of the \s-1XS\s0 module anymore. Quoting the \f(CW$VERSION\fR declaration
to make it a string is recommended if long version numbers are used.
.SS "The \s-1PROTOTYPES:\s0 Keyword"
.IX Subsection "The PROTOTYPES: Keyword"
The \s-1PROTOTYPES:\s0 keyword corresponds to \fBxsubpp\fR's \f(CW\*(C`\-prototypes\*(C'\fR and
\&\f(CW\*(C`\-noprototypes\*(C'\fR options.  This keyword overrides the command line options.
Prototypes are enabled by default.  When prototypes are enabled XSUBs will
be given Perl prototypes.  This keyword may be used multiple times in an \s-1XS\s0
module to enable and disable prototypes for different parts of the module.
.PP
To enable prototypes:
.PP
.Vb 1
\&    PROTOTYPES: ENABLE
.Ve
.PP
To disable prototypes:
.PP
.Vb 1
\&    PROTOTYPES: DISABLE
.Ve
.SS "The \s-1PROTOTYPE:\s0 Keyword"
.IX Subsection "The PROTOTYPE: Keyword"
This keyword is similar to the \s-1PROTOTYPES:\s0 keyword above but can be used to
force \fBxsubpp\fR to use a specific prototype for the \s-1XSUB. \s0 This keyword
overrides all other prototype options and keywords but affects only the
current \s-1XSUB. \s0 Consult \*(L"Prototypes\*(R" in perlsub for information about Perl
prototypes.
.PP
.Vb 10
\&    bool_t
\&    rpcb_gettime(timep, ...)
\&          time_t timep = NO_INIT
\&        PROTOTYPE: $;$
\&        PREINIT:
\&          char *host = "localhost";
\&        CODE:
\&                  if( items > 1 )
\&                       host = (char *)SvPV_nolen(ST(1));
\&                  RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
If the prototypes are enabled, you can disable it locally for a given
\&\s-1XSUB\s0 as in the following example:
.PP
.Vb 4
\&    void
\&    rpcb_gettime_noproto()
\&        PROTOTYPE: DISABLE
\&    ...
.Ve
.SS "The \s-1ALIAS:\s0 Keyword"
.IX Subsection "The ALIAS: Keyword"
The \s-1ALIAS:\s0 keyword allows an \s-1XSUB\s0 to have two or more unique Perl names
and to know which of those names was used when it was invoked.  The Perl
names may be fully-qualified with package names.  Each alias is given an
index.  The compiler will setup a variable called \f(CW\*(C`ix\*(C'\fR which contain the
index of the alias which was used.  When the \s-1XSUB\s0 is called with its
declared name \f(CW\*(C`ix\*(C'\fR will be 0.
.PP
The following example will create aliases \f(CW\*(C`FOO::gettime()\*(C'\fR and
\&\f(CW\*(C`BAR::getit()\*(C'\fR for this function.
.PP
.Vb 11
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        ALIAS:
\&            FOO::gettime = 1
\&            BAR::getit = 2
\&        INIT:
\&          printf("# ix = %d\en", ix );
\&        OUTPUT:
\&          timep
.Ve
.SS "The \s-1OVERLOAD:\s0 Keyword"
.IX Subsection "The OVERLOAD: Keyword"
Instead of writing an overloaded interface using pure Perl, you
can also use the \s-1OVERLOAD\s0 keyword to define additional Perl names
for your functions (like the \s-1ALIAS:\s0 keyword above).  However, the
overloaded functions must be defined with three parameters (except
for the \fInomethod()\fR function which needs four parameters).  If any
function has the \s-1OVERLOAD:\s0 keyword, several additional lines
will be defined in the c file generated by xsubpp in order to
register with the overload magic.
.PP
Since blessed objects are actually stored as \s-1RV\s0's, it is useful
to use the typemap features to preprocess parameters and extract
the actual \s-1SV\s0 stored within the blessed \s-1RV. \s0 See the sample for
T_PTROBJ_SPECIAL below.
.PP
To use the \s-1OVERLOAD:\s0 keyword, create an \s-1XS\s0 function which takes
three input parameters ( or use the c style '...' definition) like
this:
.PP
.Vb 7
\&    SV *
\&    cmp (lobj, robj, swap)
\&    My_Module_obj    lobj
\&    My_Module_obj    robj
\&    IV               swap
\&    OVERLOAD: cmp <=>
\&    { /* function defined here */}
.Ve
.PP
In this case, the function will overload both of the three way
comparison operators.  For all overload operations using non-alpha
characters, you must type the parameter without quoting, separating
multiple overloads with whitespace.  Note that "\*(L" (the stringify
overload) should be entered as \e\*(R"\e" (i.e. escaped).
.SS "The \s-1FALLBACK:\s0 Keyword"
.IX Subsection "The FALLBACK: Keyword"
In addition to the \s-1OVERLOAD\s0 keyword, if you need to control how
Perl autogenerates missing overloaded operators, you can set the
\&\s-1FALLBACK\s0 keyword in the module header section, like this:
.PP
.Vb 1
\&    MODULE = RPC  PACKAGE = RPC
\&
\&    FALLBACK: TRUE
\&    ...
.Ve
.PP
where \s-1FALLBACK\s0 can take any of the three values \s-1TRUE, FALSE,\s0 or
\&\s-1UNDEF. \s0 If you do not set any \s-1FALLBACK\s0 value when using \s-1OVERLOAD,\s0
it defaults to \s-1UNDEF.  FALLBACK\s0 is not used except when one or
more functions using \s-1OVERLOAD\s0 have been defined.  Please see
\&\*(L"fallback\*(R" in overload for more details.
.SS "The \s-1INTERFACE:\s0 Keyword"
.IX Subsection "The INTERFACE: Keyword"
This keyword declares the current \s-1XSUB\s0 as a keeper of the given
calling signature.  If some text follows this keyword, it is
considered as a list of functions which have this signature, and
should be attached to the current \s-1XSUB.\s0
.PP
For example, if you have 4 C functions \fImultiply()\fR, \fIdivide()\fR, \fIadd()\fR,
\&\fIsubtract()\fR all having the signature:
.PP
.Vb 1
\&    symbolic f(symbolic, symbolic);
.Ve
.PP
you can make them all to use the same \s-1XSUB\s0 using this:
.PP
.Vb 7
\&    symbolic
\&    interface_s_ss(arg1, arg2)
\&        symbolic        arg1
\&        symbolic        arg2
\&    INTERFACE:
\&        multiply divide
\&        add subtract
.Ve
.PP
(This is the complete \s-1XSUB\s0 code for 4 Perl functions!)  Four generated
Perl function share names with corresponding C functions.
.PP
The advantage of this approach comparing to \s-1ALIAS:\s0 keyword is that there
is no need to code a switch statement, each Perl function (which shares
the same \s-1XSUB\s0) knows which C function it should call.  Additionally, one
can attach an extra function \fIremainder()\fR at runtime by using
.PP
.Vb 3
\&    CV *mycv = newXSproto("Symbolic::remainder",
\&                          XS_Symbolic_interface_s_ss, _\|_FILE_\|_, "$$");
\&    XSINTERFACE_FUNC_SET(mycv, remainder);
.Ve
.PP
say, from another \s-1XSUB.  \s0(This example supposes that there was no
\&\s-1INTERFACE_MACRO:\s0 section, otherwise one needs to use something else instead of
\&\f(CW\*(C`XSINTERFACE_FUNC_SET\*(C'\fR, see the next section.)
.SS "The \s-1INTERFACE_MACRO:\s0 Keyword"
.IX Subsection "The INTERFACE_MACRO: Keyword"
This keyword allows one to define an \s-1INTERFACE\s0 using a different way
to extract a function pointer from an \s-1XSUB. \s0 The text which follows
this keyword should give the name of macros which would extract/set a
function pointer.  The extractor macro is given return type, \f(CW\*(C`CV*\*(C'\fR,
and \f(CW\*(C`XSANY.any_dptr\*(C'\fR for this \f(CW\*(C`CV*\*(C'\fR.  The setter macro is given cv,
and the function pointer.
.PP
The default value is \f(CW\*(C`XSINTERFACE_FUNC\*(C'\fR and \f(CW\*(C`XSINTERFACE_FUNC_SET\*(C'\fR.
An \s-1INTERFACE\s0 keyword with an empty list of functions can be omitted if
\&\s-1INTERFACE_MACRO\s0 keyword is used.
.PP
Suppose that in the previous example functions pointers for
\&\fImultiply()\fR, \fIdivide()\fR, \fIadd()\fR, \fIsubtract()\fR are kept in a global C array
\&\f(CW\*(C`fp[]\*(C'\fR with offsets being \f(CW\*(C`multiply_off\*(C'\fR, \f(CW\*(C`divide_off\*(C'\fR, \f(CW\*(C`add_off\*(C'\fR,
\&\f(CW\*(C`subtract_off\*(C'\fR.  Then one can use
.PP
.Vb 4
\&    #define XSINTERFACE_FUNC_BYOFFSET(ret,cv,f) \e
\&        ((XSINTERFACE_CVT_ANON(ret))fp[CvXSUBANY(cv).any_i32])
\&    #define XSINTERFACE_FUNC_BYOFFSET_set(cv,f) \e
\&        CvXSUBANY(cv).any_i32 = CAT2( f, _off )
.Ve
.PP
in C section,
.PP
.Vb 10
\&    symbolic
\&    interface_s_ss(arg1, arg2)
\&        symbolic        arg1
\&        symbolic        arg2
\&      INTERFACE_MACRO:
\&        XSINTERFACE_FUNC_BYOFFSET
\&        XSINTERFACE_FUNC_BYOFFSET_set
\&      INTERFACE:
\&        multiply divide
\&        add subtract
.Ve
.PP
in \s-1XSUB\s0 section.
.SS "The \s-1INCLUDE:\s0 Keyword"
.IX Subsection "The INCLUDE: Keyword"
This keyword can be used to pull other files into the \s-1XS\s0 module.  The other
files may have \s-1XS\s0 code.  \s-1INCLUDE:\s0 can also be used to run a command to
generate the \s-1XS\s0 code to be pulled into the module.
.PP
The file \fIRpcb1.xsh\fR contains our \f(CW\*(C`rpcb_gettime()\*(C'\fR function:
.PP
.Vb 6
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.PP
The \s-1XS\s0 module can use \s-1INCLUDE:\s0 to pull that file into it.
.PP
.Vb 1
\&    INCLUDE: Rpcb1.xsh
.Ve
.PP
If the parameters to the \s-1INCLUDE:\s0 keyword are followed by a pipe (\f(CW\*(C`|\*(C'\fR) then
the compiler will interpret the parameters as a command. This feature is
mildly deprecated in favour of the \f(CW\*(C`INCLUDE_COMMAND:\*(C'\fR directive, as documented
below.
.PP
.Vb 1
\&    INCLUDE: cat Rpcb1.xsh |
.Ve
.PP
Do not use this to run perl: \f(CW\*(C`INCLUDE: perl |\*(C'\fR will run the perl that
happens to be the first in your path and not necessarily the same perl that is
used to run \f(CW\*(C`xsubpp\*(C'\fR. See \*(L"The \s-1INCLUDE_COMMAND:\s0 Keyword\*(R".
.SS "The \s-1INCLUDE_COMMAND:\s0 Keyword"
.IX Subsection "The INCLUDE_COMMAND: Keyword"
Runs the supplied command and includes its output into the current \s-1XS\s0
document. \f(CW\*(C`INCLUDE_COMMAND\*(C'\fR assigns special meaning to the \f(CW$^X\fR token
in that it runs the same perl interpreter that is running \f(CW\*(C`xsubpp\*(C'\fR:
.PP
.Vb 1
\&    INCLUDE_COMMAND: cat Rpcb1.xsh
\&
\&    INCLUDE_COMMAND: $^X \-e ...
.Ve
.SS "The \s-1CASE:\s0 Keyword"
.IX Subsection "The CASE: Keyword"
The \s-1CASE:\s0 keyword allows an \s-1XSUB\s0 to have multiple distinct parts with each
part acting as a virtual \s-1XSUB.  CASE:\s0 is greedy and if it is used then all
other \s-1XS\s0 keywords must be contained within a \s-1CASE:. \s0 This means nothing may
precede the first \s-1CASE:\s0 in the \s-1XSUB\s0 and anything following the last \s-1CASE:\s0 is
included in that case.
.PP
A \s-1CASE:\s0 might switch via a parameter of the \s-1XSUB,\s0 via the \f(CW\*(C`ix\*(C'\fR \s-1ALIAS:\s0
variable (see \*(L"The \s-1ALIAS:\s0 Keyword\*(R"), or maybe via the \f(CW\*(C`items\*(C'\fR variable
(see \*(L"Variable-length Parameter Lists\*(R").  The last \s-1CASE:\s0 becomes the
\&\fBdefault\fR case if it is not associated with a conditional.  The following
example shows \s-1CASE\s0 switched via \f(CW\*(C`ix\*(C'\fR with a function \f(CW\*(C`rpcb_gettime()\*(C'\fR
having an alias \f(CW\*(C`x_gettime()\*(C'\fR.  When the function is called as
\&\f(CW\*(C`rpcb_gettime()\*(C'\fR its parameters are the usual \f(CW\*(C`(char *host, time_t *timep)\*(C'\fR,
but when the function is called as \f(CW\*(C`x_gettime()\*(C'\fR its parameters are
reversed, \f(CW\*(C`(time_t *timep, char *host)\*(C'\fR.
.PP
.Vb 10
\&    long
\&    rpcb_gettime(a,b)
\&      CASE: ix == 1
\&        ALIAS:
\&          x_gettime = 1
\&        INPUT:
\&          # \*(Aqa\*(Aq is timep, \*(Aqb\*(Aq is host
\&          char *b
\&          time_t a = NO_INIT
\&        CODE:
\&               RETVAL = rpcb_gettime( b, &a );
\&        OUTPUT:
\&          a
\&          RETVAL
\&      CASE:
\&          # \*(Aqa\*(Aq is host, \*(Aqb\*(Aq is timep
\&          char *a
\&          time_t &b = NO_INIT
\&        OUTPUT:
\&          b
\&          RETVAL
.Ve
.PP
That function can be called with either of the following statements.  Note
the different argument lists.
.PP
.Vb 1
\&        $status = rpcb_gettime( $host, $timep );
\&
\&        $status = x_gettime( $timep, $host );
.Ve
.SS "The \s-1EXPORT_XSUB_SYMBOLS:\s0 Keyword"
.IX Subsection "The EXPORT_XSUB_SYMBOLS: Keyword"
The \s-1EXPORT_XSUB_SYMBOLS:\s0 keyword is likely something you will never need.
In perl versions earlier than 5.16.0, this keyword does nothing. Starting
with 5.16, \s-1XSUB\s0 symbols are no longer exported by default. That is, they
are \f(CW\*(C`static\*(C'\fR functions. If you include
.PP
.Vb 1
\&  EXPORT_XSUB_SYMBOLS: ENABLE
.Ve
.PP
in your \s-1XS\s0 code, the XSUBs following this line will not be declared \f(CW\*(C`static\*(C'\fR.
You can later disable this with
.PP
.Vb 1
\&  EXPORT_XSUB_SYMBOLS: DISABLE
.Ve
.PP
which, again, is the default that you should probably never change.
You cannot use this keyword on versions of perl before 5.16 to make
XSUBs \f(CW\*(C`static\*(C'\fR.
.SS "The & Unary Operator"
.IX Subsection "The & Unary Operator"
The \f(CW\*(C`&\*(C'\fR unary operator in the \s-1INPUT:\s0 section is used to tell \fBxsubpp\fR
that it should convert a Perl value to/from C using the C type to the left
of \f(CW\*(C`&\*(C'\fR, but provide a pointer to this value when the C function is called.
.PP
This is useful to avoid a \s-1CODE:\s0 block for a C function which takes a parameter
by reference.  Typically, the parameter should be not a pointer type (an
\&\f(CW\*(C`int\*(C'\fR or \f(CW\*(C`long\*(C'\fR but not an \f(CW\*(C`int*\*(C'\fR or \f(CW\*(C`long*\*(C'\fR).
.PP
The following \s-1XSUB\s0 will generate incorrect C code.  The \fBxsubpp\fR compiler will
turn this into code which calls \f(CW\*(C`rpcb_gettime()\*(C'\fR with parameters \f(CW\*(C`(char
*host, time_t timep)\*(C'\fR, but the real \f(CW\*(C`rpcb_gettime()\*(C'\fR wants the \f(CW\*(C`timep\*(C'\fR
parameter to be of type \f(CW\*(C`time_t*\*(C'\fR rather than \f(CW\*(C`time_t\*(C'\fR.
.PP
.Vb 6
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t timep
\&        OUTPUT:
\&          timep
.Ve
.PP
That problem is corrected by using the \f(CW\*(C`&\*(C'\fR operator.  The \fBxsubpp\fR compiler
will now turn this into code which calls \f(CW\*(C`rpcb_gettime()\*(C'\fR correctly with
parameters \f(CW\*(C`(char *host, time_t *timep)\*(C'\fR.  It does this by carrying the
\&\f(CW\*(C`&\*(C'\fR through, so the function call looks like \f(CW\*(C`rpcb_gettime(host, &timep)\*(C'\fR.
.PP
.Vb 6
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.SS "Inserting \s-1POD,\s0 Comments and C Preprocessor Directives"
.IX Subsection "Inserting POD, Comments and C Preprocessor Directives"
C preprocessor directives are allowed within \s-1BOOT:, PREINIT: INIT:, CODE:,
PPCODE:, POSTCALL:,\s0 and \s-1CLEANUP:\s0 blocks, as well as outside the functions.
Comments are allowed anywhere after the \s-1MODULE\s0 keyword.  The compiler will
pass the preprocessor directives through untouched and will remove the
commented lines. \s-1POD\s0 documentation is allowed at any point, both in the
C and \s-1XS\s0 language sections. \s-1POD\s0 must be terminated with a \f(CW\*(C`=cut\*(C'\fR command;
\&\f(CW\*(C`xsubpp\*(C'\fR will exit with an error if it does not. It is very unlikely that
human generated C code will be mistaken for \s-1POD,\s0 as most indenting styles
result in whitespace in front of any line starting with \f(CW\*(C`=\*(C'\fR. Machine
generated \s-1XS\s0 files may fall into this trap unless care is taken to
ensure that a space breaks the sequence \*(L"\en=\*(R".
.PP
Comments can be added to XSUBs by placing a \f(CW\*(C`#\*(C'\fR as the first
non-whitespace of a line.  Care should be taken to avoid making the
comment look like a C preprocessor directive, lest it be interpreted as
such.  The simplest way to prevent this is to put whitespace in front of
the \f(CW\*(C`#\*(C'\fR.
.PP
If you use preprocessor directives to choose one of two
versions of a function, use
.PP
.Vb 3
\&    #if ... version1
\&    #else /* ... version2  */
\&    #endif
.Ve
.PP
and not
.PP
.Vb 4
\&    #if ... version1
\&    #endif
\&    #if ... version2
\&    #endif
.Ve
.PP
because otherwise \fBxsubpp\fR will believe that you made a duplicate
definition of the function.  Also, put a blank line before the
#else/#endif so it will not be seen as part of the function body.
.SS "Using \s-1XS\s0 With \*(C+"
.IX Subsection "Using XS With "
If an \s-1XSUB\s0 name contains \f(CW\*(C`::\*(C'\fR, it is considered to be a \*(C+ method.
The generated Perl function will assume that
its first argument is an object pointer.  The object pointer
will be stored in a variable called \s-1THIS. \s0 The object should
have been created by \*(C+ with the \fInew()\fR function and should
be blessed by Perl with the \fIsv_setref_pv()\fR macro.  The
blessing of the object by Perl can be handled by a typemap.  An example
typemap is shown at the end of this section.
.PP
If the return type of the \s-1XSUB\s0 includes \f(CW\*(C`static\*(C'\fR, the method is considered
to be a static method.  It will call the \*(C+
function using the \fIclass::method()\fR syntax.  If the method is not static
the function will be called using the \s-1THIS\-\s0>\fImethod()\fR syntax.
.PP
The next examples will use the following \*(C+ class.
.PP
.Vb 6
\&     class color {
\&          public:
\&          color();
\&          ~color();
\&          int blue();
\&          void set_blue( int );
\&
\&          private:
\&          int c_blue;
\&     };
.Ve
.PP
The XSUBs for the \fIblue()\fR and \fIset_blue()\fR methods are defined with the class
name but the parameter for the object (\s-1THIS,\s0 or \*(L"self\*(R") is implicit and is
not listed.
.PP
.Vb 2
\&     int
\&     color::blue()
\&
\&     void
\&     color::set_blue( val )
\&          int val
.Ve
.PP
Both Perl functions will expect an object as the first parameter.  In the
generated \*(C+ code the object is called \f(CW\*(C`THIS\*(C'\fR, and the method call will
be performed on this object.  So in the \*(C+ code the \fIblue()\fR and \fIset_blue()\fR
methods will be called as this:
.PP
.Vb 1
\&     RETVAL = THIS\->blue();
\&
\&     THIS\->set_blue( val );
.Ve
.PP
You could also write a single get/set method using an optional argument:
.PP
.Vb 10
\&     int
\&     color::blue( val = NO_INIT )
\&         int val
\&         PROTOTYPE $;$
\&         CODE:
\&             if (items > 1)
\&                 THIS\->set_blue( val );
\&             RETVAL = THIS\->blue();
\&         OUTPUT:
\&             RETVAL
.Ve
.PP
If the function's name is \fB\s-1DESTROY\s0\fR then the \*(C+ \f(CW\*(C`delete\*(C'\fR function will be
called and \f(CW\*(C`THIS\*(C'\fR will be given as its parameter.  The generated \*(C+ code for
.PP
.Vb 2
\&     void
\&     color::DESTROY()
.Ve
.PP
will look like this:
.PP
.Vb 1
\&     color *THIS = ...; // Initialized as in typemap
\&
\&     delete THIS;
.Ve
.PP
If the function's name is \fBnew\fR then the \*(C+ \f(CW\*(C`new\*(C'\fR function will be called
to create a dynamic \*(C+ object.  The \s-1XSUB\s0 will expect the class name, which
will be kept in a variable called \f(CW\*(C`CLASS\*(C'\fR, to be given as the first
argument.
.PP
.Vb 2
\&     color *
\&     color::new()
.Ve
.PP
The generated \*(C+ code will call \f(CW\*(C`new\*(C'\fR.
.PP
.Vb 1
\&     RETVAL = new color();
.Ve
.PP
The following is an example of a typemap that could be used for this \*(C+
example.
.PP
.Vb 2
\&    TYPEMAP
\&    color *             O_OBJECT
\&
\&    OUTPUT
\&    # The Perl object is blessed into \*(AqCLASS\*(Aq, which should be a
\&    # char* having the name of the package for the blessing.
\&    O_OBJECT
\&        sv_setref_pv( $arg, CLASS, (void*)$var );
\&
\&    INPUT
\&    O_OBJECT
\&        if( sv_isobject($arg) && (SvTYPE(SvRV($arg)) == SVt_PVMG) )
\&                $var = ($type)SvIV((SV*)SvRV( $arg ));
\&        else{
\&                warn( \e"${Package}::$func_name() \-\- $var is not a blessed SV reference\e" );
\&                XSRETURN_UNDEF;
\&        }
.Ve
.SS "Interface Strategy"
.IX Subsection "Interface Strategy"
When designing an interface between Perl and a C library a straight
translation from C to \s-1XS \s0(such as created by \f(CW\*(C`h2xs \-x\*(C'\fR) is often sufficient.
However, sometimes the interface will look
very C\-like and occasionally nonintuitive, especially when the C function
modifies one of its parameters, or returns failure inband (as in \*(L"negative
return values mean failure\*(R").  In cases where the programmer wishes to
create a more Perl-like interface the following strategy may help to
identify the more critical parts of the interface.
.PP
Identify the C functions with input/output or output parameters.  The XSUBs for
these functions may be able to return lists to Perl.
.PP
Identify the C functions which use some inband info as an indication
of failure.  They may be
candidates to return undef or an empty list in case of failure.  If the
failure may be detected without a call to the C function, you may want to use
an \s-1INIT:\s0 section to report the failure.  For failures detectable after the C
function returns one may want to use a \s-1POSTCALL:\s0 section to process the
failure.  In more complicated cases use \s-1CODE:\s0 or \s-1PPCODE:\s0 sections.
.PP
If many functions use the same failure indication based on the return value,
you may want to create a special typedef to handle this situation.  Put
.PP
.Vb 1
\&  typedef int negative_is_failure;
.Ve
.PP
near the beginning of \s-1XS\s0 file, and create an \s-1OUTPUT\s0 typemap entry
for \f(CW\*(C`negative_is_failure\*(C'\fR which converts negative values to \f(CW\*(C`undef\*(C'\fR, or
maybe \fIcroak()\fRs.  After this the return value of type \f(CW\*(C`negative_is_failure\*(C'\fR
will create more Perl-like interface.
.PP
Identify which values are used by only the C and \s-1XSUB\s0 functions
themselves, say, when a parameter to a function should be a contents of a
global variable.  If Perl does not need to access the contents of the value
then it may not be necessary to provide a translation for that value
from C to Perl.
.PP
Identify the pointers in the C function parameter lists and return
values.  Some pointers may be used to implement input/output or
output parameters, they can be handled in \s-1XS\s0 with the \f(CW\*(C`&\*(C'\fR unary operator,
and, possibly, using the \s-1NO_INIT\s0 keyword.
Some others will require handling of types like \f(CW\*(C`int *\*(C'\fR, and one needs
to decide what a useful Perl translation will do in such a case.  When
the semantic is clear, it is advisable to put the translation into a typemap
file.
.PP
Identify the structures used by the C functions.  In many
cases it may be helpful to use the T_PTROBJ typemap for
these structures so they can be manipulated by Perl as
blessed objects.  (This is handled automatically by \f(CW\*(C`h2xs \-x\*(C'\fR.)
.PP
If the same C type is used in several different contexts which require
different translations, \f(CW\*(C`typedef\*(C'\fR several new types mapped to this C type,
and create separate \fItypemap\fR entries for these new types.  Use these
types in declarations of return type and parameters to XSUBs.
.SS "Perl Objects And C Structures"
.IX Subsection "Perl Objects And C Structures"
When dealing with C structures one should select either
\&\fBT_PTROBJ\fR or \fBT_PTRREF\fR for the \s-1XS\s0 type.  Both types are
designed to handle pointers to complex objects.  The
T_PTRREF type will allow the Perl object to be unblessed
while the T_PTROBJ type requires that the object be blessed.
By using T_PTROBJ one can achieve a form of type-checking
because the \s-1XSUB\s0 will attempt to verify that the Perl object
is of the expected type.
.PP
The following \s-1XS\s0 code shows the \fIgetnetconfigent()\fR function which is used
with \s-1ONC+ TIRPC. \s0 The \fIgetnetconfigent()\fR function will return a pointer to a
C structure and has the C prototype shown below.  The example will
demonstrate how the C pointer will become a Perl reference.  Perl will
consider this reference to be a pointer to a blessed object and will
attempt to call a destructor for the object.  A destructor will be
provided in the \s-1XS\s0 source to free the memory used by \fIgetnetconfigent()\fR.
Destructors in \s-1XS\s0 can be created by specifying an \s-1XSUB\s0 function whose name
ends with the word \fB\s-1DESTROY\s0\fR.  \s-1XS\s0 destructors can be used to free memory
which may have been malloc'd by another \s-1XSUB.\s0
.PP
.Vb 1
\&     struct netconfig *getnetconfigent(const char *netid);
.Ve
.PP
A \f(CW\*(C`typedef\*(C'\fR will be created for \f(CW\*(C`struct netconfig\*(C'\fR.  The Perl
object will be blessed in a class matching the name of the C
type, with the tag \f(CW\*(C`Ptr\*(C'\fR appended, and the name should not
have embedded spaces if it will be a Perl package name.  The
destructor will be placed in a class corresponding to the
class of the object and the \s-1PREFIX\s0 keyword will be used to
trim the name to the word \s-1DESTROY\s0 as Perl will expect.
.PP
.Vb 1
\&     typedef struct netconfig Netconfig;
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     Netconfig *
\&     getnetconfigent(netid)
\&          char *netid
\&
\&     MODULE = RPC  PACKAGE = NetconfigPtr  PREFIX = rpcb_
\&
\&     void
\&     rpcb_DESTROY(netconf)
\&          Netconfig *netconf
\&        CODE:
\&          printf("Now in NetconfigPtr::DESTROY\en");
\&          free( netconf );
.Ve
.PP
This example requires the following typemap entry.  Consult
perlxstypemap for more information about adding new typemaps
for an extension.
.PP
.Vb 2
\&     TYPEMAP
\&     Netconfig *  T_PTROBJ
.Ve
.PP
This example will be used with the following Perl statements.
.PP
.Vb 2
\&     use RPC;
\&     $netconf = getnetconfigent("udp");
.Ve
.PP
When Perl destroys the object referenced by \f(CW$netconf\fR it will send the
object to the supplied \s-1XSUB DESTROY\s0 function.  Perl cannot determine, and
does not care, that this object is a C struct and not a Perl object.  In
this sense, there is no difference between the object created by the
\&\fIgetnetconfigent()\fR \s-1XSUB\s0 and an object created by a normal Perl subroutine.
.SS "Safely Storing Static Data in \s-1XS\s0"
.IX Subsection "Safely Storing Static Data in XS"
Starting with Perl 5.8, a macro framework has been defined to allow
static data to be safely stored in \s-1XS\s0 modules that will be accessed from
a multi-threaded Perl.
.PP
Although primarily designed for use with multi-threaded Perl, the macros
have been designed so that they will work with non-threaded Perl as well.
.PP
It is therefore strongly recommended that these macros be used by all
\&\s-1XS\s0 modules that make use of static data.
.PP
The easiest way to get a template set of macros to use is by specifying
the \f(CW\*(C`\-g\*(C'\fR (\f(CW\*(C`\-\-global\*(C'\fR) option with h2xs (see h2xs).
.PP
Below is an example module that makes use of the macros.
.PP
.Vb 3
\&    #include "EXTERN.h"
\&    #include "perl.h"
\&    #include "XSUB.h"
\&
\&    /* Global Data */
\&
\&    #define MY_CXT_KEY "BlindMice::_guts" XS_VERSION
\&
\&    typedef struct {
\&        int count;
\&        char name[3][100];
\&    } my_cxt_t;
\&
\&    START_MY_CXT
\&
\&    MODULE = BlindMice           PACKAGE = BlindMice
\&
\&    BOOT:
\&    {
\&        MY_CXT_INIT;
\&        MY_CXT.count = 0;
\&        strcpy(MY_CXT.name[0], "None");
\&        strcpy(MY_CXT.name[1], "None");
\&        strcpy(MY_CXT.name[2], "None");
\&    }
\&
\&    int
\&    newMouse(char * name)
\&        char * name;
\&        PREINIT:
\&          dMY_CXT;
\&        CODE:
\&          if (MY_CXT.count >= 3) {
\&              warn("Already have 3 blind mice");
\&              RETVAL = 0;
\&          }
\&          else {
\&              RETVAL = ++ MY_CXT.count;
\&              strcpy(MY_CXT.name[MY_CXT.count \- 1], name);
\&          }
\&
\&    char *
\&    get_mouse_name(index)
\&      int index
\&      CODE:
\&        dMY_CXT;
\&        RETVAL = MY_CXT.lives ++;
\&        if (index > MY_CXT.count)
\&          croak("There are only 3 blind mice.");
\&        else
\&          RETVAL = newSVpv(MY_CXT.name[index \- 1]);
\&
\&    void
\&    CLONE(...)
\&        CODE:
\&        MY_CXT_CLONE;
.Ve
.PP
\&\fB\s-1REFERENCE\s0\fR
.IP "\s-1MY_CXT_KEY\s0" 5
.IX Item "MY_CXT_KEY"
This macro is used to define a unique key to refer to the static data
for an \s-1XS\s0 module. The suggested naming scheme, as used by h2xs, is to
use a string that consists of the module name, the string \*(L"::_guts\*(R"
and the module version number.
.Sp
.Vb 1
\&    #define MY_CXT_KEY "MyModule::_guts" XS_VERSION
.Ve
.IP "typedef my_cxt_t" 5
.IX Item "typedef my_cxt_t"
This struct typedef \fImust\fR always be called \f(CW\*(C`my_cxt_t\*(C'\fR. The other
\&\f(CW\*(C`CXT*\*(C'\fR macros assume the existence of the \f(CW\*(C`my_cxt_t\*(C'\fR typedef name.
.Sp
Declare a typedef named \f(CW\*(C`my_cxt_t\*(C'\fR that is a structure that contains
all the data that needs to be interpreter-local.
.Sp
.Vb 3
\&    typedef struct {
\&        int some_value;
\&    } my_cxt_t;
.Ve
.IP "\s-1START_MY_CXT\s0" 5
.IX Item "START_MY_CXT"
Always place the \s-1START_MY_CXT\s0 macro directly after the declaration
of \f(CW\*(C`my_cxt_t\*(C'\fR.
.IP "\s-1MY_CXT_INIT\s0" 5
.IX Item "MY_CXT_INIT"
The \s-1MY_CXT_INIT\s0 macro initialises storage for the \f(CW\*(C`my_cxt_t\*(C'\fR struct.
.Sp
It \fImust\fR be called exactly once, typically in a \s-1BOOT:\s0 section. If you
are maintaining multiple interpreters, it should be called once in each
interpreter instance, except for interpreters cloned from existing ones.
(But see \*(L"\s-1MY_CXT_CLONE\*(R"\s0 below.)
.IP "dMY_CXT" 5
.IX Item "dMY_CXT"
Use the dMY_CXT macro (a declaration) in all the functions that access
\&\s-1MY_CXT.\s0
.IP "\s-1MY_CXT\s0" 5
.IX Item "MY_CXT"
Use the \s-1MY_CXT\s0 macro to access members of the \f(CW\*(C`my_cxt_t\*(C'\fR struct. For
example, if \f(CW\*(C`my_cxt_t\*(C'\fR is
.Sp
.Vb 3
\&    typedef struct {
\&        int index;
\&    } my_cxt_t;
.Ve
.Sp
then use this to access the \f(CW\*(C`index\*(C'\fR member
.Sp
.Vb 2
\&    dMY_CXT;
\&    MY_CXT.index = 2;
.Ve
.IP "aMY_CXT/pMY_CXT" 5
.IX Item "aMY_CXT/pMY_CXT"
\&\f(CW\*(C`dMY_CXT\*(C'\fR may be quite expensive to calculate, and to avoid the overhead
of invoking it in each function it is possible to pass the declaration
onto other functions using the \f(CW\*(C`aMY_CXT\*(C'\fR/\f(CW\*(C`pMY_CXT\*(C'\fR macros, eg
.Sp
.Vb 5
\&    void sub1() {
\&        dMY_CXT;
\&        MY_CXT.index = 1;
\&        sub2(aMY_CXT);
\&    }
\&
\&    void sub2(pMY_CXT) {
\&        MY_CXT.index = 2;
\&    }
.Ve
.Sp
Analogously to \f(CW\*(C`pTHX\*(C'\fR, there are equivalent forms for when the macro is the
first or last in multiple arguments, where an underscore represents a
comma, i.e.  \f(CW\*(C`_aMY_CXT\*(C'\fR, \f(CW\*(C`aMY_CXT_\*(C'\fR, \f(CW\*(C`_pMY_CXT\*(C'\fR and \f(CW\*(C`pMY_CXT_\*(C'\fR.
.IP "\s-1MY_CXT_CLONE\s0" 5
.IX Item "MY_CXT_CLONE"
By default, when a new interpreter is created as a copy of an existing one
(eg via \f(CW\*(C`threads\->create()\*(C'\fR), both interpreters share the same physical
my_cxt_t structure. Calling \f(CW\*(C`MY_CXT_CLONE\*(C'\fR (typically via the package's
\&\f(CW\*(C`CLONE()\*(C'\fR function), causes a byte-for-byte copy of the structure to be
taken, and any future dMY_CXT will cause the copy to be accessed instead.
.IP "\s-1MY_CXT_INIT_INTERP\s0(my_perl)" 5
.IX Item "MY_CXT_INIT_INTERP(my_perl)"
.PD 0
.IP "dMY_CXT_INTERP(my_perl)" 5
.IX Item "dMY_CXT_INTERP(my_perl)"
.PD
These are versions of the macros which take an explicit interpreter as an
argument.
.PP
Note that these macros will only work together within the \fIsame\fR source
file; that is, a dMY_CTX in one source file will access a different structure
than a dMY_CTX in another source file.
.SS "Thread-aware system interfaces"
.IX Subsection "Thread-aware system interfaces"
Starting from Perl 5.8, in C/\*(C+ level Perl knows how to wrap
system/library interfaces that have thread-aware versions
(e.g. \fIgetpwent_r()\fR) into frontend macros (e.g. \fIgetpwent()\fR) that
correctly handle the multithreaded interaction with the Perl
interpreter.  This will happen transparently, the only thing
you need to do is to instantiate a Perl interpreter.
.PP
This wrapping happens always when compiling Perl core source
(\s-1PERL_CORE\s0 is defined) or the Perl core extensions (\s-1PERL_EXT\s0 is
defined).  When compiling \s-1XS\s0 code outside of Perl core the wrapping
does not take place.  Note, however, that intermixing the _r\-forms
(as Perl compiled for multithreaded operation will do) and the _r\-less
forms is neither well-defined (inconsistent results, data corruption,
or even crashes become more likely), nor is it very portable.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
File \f(CW\*(C`RPC.xs\*(C'\fR: Interface to some \s-1ONC+ RPC\s0 bind library functions.
.PP
.Vb 3
\&     #include "EXTERN.h"
\&     #include "perl.h"
\&     #include "XSUB.h"
\&
\&     #include <rpc/rpc.h>
\&
\&     typedef struct netconfig Netconfig;
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     SV *
\&     rpcb_gettime(host="localhost")
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&        CODE:
\&          ST(0) = sv_newmortal();
\&          if( rpcb_gettime( host, &timep ) )
\&               sv_setnv( ST(0), (double)timep );
\&
\&     Netconfig *
\&     getnetconfigent(netid="udp")
\&          char *netid
\&
\&     MODULE = RPC  PACKAGE = NetconfigPtr  PREFIX = rpcb_
\&
\&     void
\&     rpcb_DESTROY(netconf)
\&          Netconfig *netconf
\&        CODE:
\&          printf("NetconfigPtr::DESTROY\en");
\&          free( netconf );
.Ve
.PP
File \f(CW\*(C`typemap\*(C'\fR: Custom typemap for \s-1RPC\s0.xs. (cf. perlxstypemap)
.PP
.Vb 2
\&     TYPEMAP
\&     Netconfig *  T_PTROBJ
.Ve
.PP
File \f(CW\*(C`RPC.pm\*(C'\fR: Perl module for the \s-1RPC\s0 extension.
.PP
.Vb 1
\&     package RPC;
\&
\&     require Exporter;
\&     require DynaLoader;
\&     @ISA = qw(Exporter DynaLoader);
\&     @EXPORT = qw(rpcb_gettime getnetconfigent);
\&
\&     bootstrap RPC;
\&     1;
.Ve
.PP
File \f(CW\*(C`rpctest.pl\*(C'\fR: Perl test program for the \s-1RPC\s0 extension.
.PP
.Vb 1
\&     use RPC;
\&
\&     $netconf = getnetconfigent();
\&     $a = rpcb_gettime();
\&     print "time = $a\en";
\&     print "netconf = $netconf\en";
\&
\&     $netconf = getnetconfigent("tcp");
\&     $a = rpcb_gettime("poplar");
\&     print "time = $a\en";
\&     print "netconf = $netconf\en";
.Ve
.SH "XS VERSION"
.IX Header "XS VERSION"
This document covers features supported by \f(CW\*(C`ExtUtils::ParseXS\*(C'\fR
(also known as \f(CW\*(C`xsubpp\*(C'\fR) 3.13_01.
.SH "AUTHOR"
.IX Header "AUTHOR"
Originally written by Dean Roehrich <\fIroehrich@cray.com\fR>.
.PP
Maintained since 1996 by The Perl Porters <\fIperlbug@perl.org\fR>.
                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlxs5.16.1                                 0100644 0001750 0001750 00000262412 12566207427 022601  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLXS 1"
.TH PERLXS 1 "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlxs \- XS language reference manual
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Introduction"
.IX Subsection "Introduction"
\&\s-1XS\s0 is an interface description file format used to create an extension
interface between Perl and C code (or a C library) which one wishes
to use with Perl.  The \s-1XS\s0 interface is combined with the library to
create a new library which can then be either dynamically loaded
or statically linked into perl.  The \s-1XS\s0 interface description is
written in the \s-1XS\s0 language and is the core component of the Perl
extension interface.
.PP
An \fB\s-1XSUB\s0\fR forms the basic unit of the \s-1XS\s0 interface.  After compilation
by the \fBxsubpp\fR compiler, each \s-1XSUB\s0 amounts to a C function definition
which will provide the glue between Perl calling conventions and C
calling conventions.
.PP
The glue code pulls the arguments from the Perl stack, converts these
Perl values to the formats expected by a C function, call this C function,
transfers the return values of the C function back to Perl.
Return values here may be a conventional C return value or any C
function arguments that may serve as output parameters.  These return
values may be passed back to Perl either by putting them on the
Perl stack, or by modifying the arguments supplied from the Perl side.
.PP
The above is a somewhat simplified view of what really happens.  Since
Perl allows more flexible calling conventions than C, XSUBs may do much
more in practice, such as checking input parameters for validity,
throwing exceptions (or returning undef/empty list) if the return value
from the C function indicates failure, calling different C functions
based on numbers and types of the arguments, providing an object-oriented
interface, etc.
.PP
Of course, one could write such glue code directly in C.  However, this
would be a tedious task, especially if one needs to write glue for
multiple C functions, and/or one is not familiar enough with the Perl
stack discipline and other such arcana.  \s-1XS\s0 comes to the rescue here:
instead of writing this glue C code in long-hand, one can write
a more concise short-hand \fIdescription\fR of what should be done by
the glue, and let the \s-1XS\s0 compiler \fBxsubpp\fR handle the rest.
.PP
The \s-1XS\s0 language allows one to describe the mapping between how the C
routine is used, and how the corresponding Perl routine is used.  It
also allows creation of Perl routines which are directly translated to
C code and which are not related to a pre-existing C function.  In cases
when the C interface coincides with the Perl interface, the \s-1XSUB\s0
declaration is almost identical to a declaration of a C function (in K&R
style).  In such circumstances, there is another tool called \f(CW\*(C`h2xs\*(C'\fR
that is able to translate an entire C header file into a corresponding
\&\s-1XS\s0 file that will provide glue to the functions/macros described in
the header file.
.PP
The \s-1XS\s0 compiler is called \fBxsubpp\fR.  This compiler creates
the constructs necessary to let an \s-1XSUB\s0 manipulate Perl values, and
creates the glue necessary to let Perl call the \s-1XSUB\s0.  The compiler
uses \fBtypemaps\fR to determine how to map C function parameters
and output values to Perl values and back.  The default typemap
(which comes with Perl) handles many common C types.  A supplementary
typemap may also be needed to handle any special structures and types
for the library being linked. For more information on typemaps,
see perlxstypemap.
.PP
A file in \s-1XS\s0 format starts with a C language section which goes until the
first \f(CW\*(C`MODULE =\*(C'\fR directive.  Other \s-1XS\s0 directives and \s-1XSUB\s0 definitions
may follow this line.  The \*(L"language\*(R" used in this part of the file
is usually referred to as the \s-1XS\s0 language.  \fBxsubpp\fR recognizes and
skips \s-1POD\s0 (see perlpod) in both the C and \s-1XS\s0 language sections, which
allows the \s-1XS\s0 file to contain embedded documentation.
.PP
See perlxstut for a tutorial on the whole extension creation process.
.PP
Note: For some extensions, Dave Beazley's \s-1SWIG\s0 system may provide a
significantly more convenient mechanism for creating the extension
glue code.  See <http://www.swig.org/> for more information.
.SS "On The Road"
.IX Subsection "On The Road"
Many of the examples which follow will concentrate on creating an interface
between Perl and the \s-1ONC+\s0 \s-1RPC\s0 bind library functions.  The \fIrpcb_gettime()\fR
function is used to demonstrate many features of the \s-1XS\s0 language.  This
function has two parameters; the first is an input parameter and the second
is an output parameter.  The function also returns a status value.
.PP
.Vb 1
\&        bool_t rpcb_gettime(const char *host, time_t *timep);
.Ve
.PP
From C this function will be called with the following
statements.
.PP
.Vb 4
\&     #include <rpc/rpc.h>
\&     bool_t status;
\&     time_t timep;
\&     status = rpcb_gettime( "localhost", &timep );
.Ve
.PP
If an \s-1XSUB\s0 is created to offer a direct translation between this function
and Perl, then this \s-1XSUB\s0 will be used from Perl with the following code.
The \f(CW$status\fR and \f(CW$timep\fR variables will contain the output of the function.
.PP
.Vb 2
\&     use RPC;
\&     $status = rpcb_gettime( "localhost", $timep );
.Ve
.PP
The following \s-1XS\s0 file shows an \s-1XS\s0 subroutine, or \s-1XSUB\s0, which
demonstrates one possible interface to the \fIrpcb_gettime()\fR
function.  This \s-1XSUB\s0 represents a direct translation between
C and Perl and so preserves the interface even from Perl.
This \s-1XSUB\s0 will be invoked from Perl with the usage shown
above.  Note that the first three #include statements, for
\&\f(CW\*(C`EXTERN.h\*(C'\fR, \f(CW\*(C`perl.h\*(C'\fR, and \f(CW\*(C`XSUB.h\*(C'\fR, will always be present at the
beginning of an \s-1XS\s0 file.  This approach and others will be
expanded later in this document.
.PP
.Vb 4
\&     #include "EXTERN.h"
\&     #include "perl.h"
\&     #include "XSUB.h"
\&     #include <rpc/rpc.h>
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.PP
Any extension to Perl, including those containing XSUBs,
should have a Perl module to serve as the bootstrap which
pulls the extension into Perl.  This module will export the
extension's functions and variables to the Perl program and
will cause the extension's XSUBs to be linked into Perl.
The following module will be used for most of the examples
in this document and should be used from Perl with the \f(CW\*(C`use\*(C'\fR
command as shown earlier.  Perl modules are explained in
more detail later in this document.
.PP
.Vb 1
\&     package RPC;
\&
\&     require Exporter;
\&     require DynaLoader;
\&     @ISA = qw(Exporter DynaLoader);
\&     @EXPORT = qw( rpcb_gettime );
\&
\&     bootstrap RPC;
\&     1;
.Ve
.PP
Throughout this document a variety of interfaces to the \fIrpcb_gettime()\fR
\&\s-1XSUB\s0 will be explored.  The XSUBs will take their parameters in different
orders or will take different numbers of parameters.  In each case the
\&\s-1XSUB\s0 is an abstraction between Perl and the real C \fIrpcb_gettime()\fR
function, and the \s-1XSUB\s0 must always ensure that the real \fIrpcb_gettime()\fR
function is called with the correct parameters.  This abstraction will
allow the programmer to create a more Perl-like interface to the C
function.
.SS "The Anatomy of an \s-1XSUB\s0"
.IX Subsection "The Anatomy of an XSUB"
The simplest XSUBs consist of 3 parts: a description of the return
value, the name of the \s-1XSUB\s0 routine and the names of its arguments,
and a description of types or formats of the arguments.
.PP
The following \s-1XSUB\s0 allows a Perl program to access a C library function
called \fIsin()\fR.  The \s-1XSUB\s0 will imitate the C function which takes a single
argument and returns a single value.
.PP
.Vb 3
\&     double
\&     sin(x)
\&       double x
.Ve
.PP
Optionally, one can merge the description of types and the list of
argument names, rewriting this as
.PP
.Vb 2
\&     double
\&     sin(double x)
.Ve
.PP
This makes this \s-1XSUB\s0 look similar to an \s-1ANSI\s0 C declaration.  An optional
semicolon is allowed after the argument list, as in
.PP
.Vb 2
\&     double
\&     sin(double x);
.Ve
.PP
Parameters with C pointer types can have different semantic: C functions
with similar declarations
.PP
.Vb 2
\&     bool string_looks_as_a_number(char *s);
\&     bool make_char_uppercase(char *c);
.Ve
.PP
are used in absolutely incompatible manner.  Parameters to these functions
could be described \fBxsubpp\fR like this:
.PP
.Vb 2
\&     char *  s
\&     char    &c
.Ve
.PP
Both these \s-1XS\s0 declarations correspond to the \f(CW\*(C`char*\*(C'\fR C type, but they have
different semantics, see \*(L"The & Unary Operator\*(R".
.PP
It is convenient to think that the indirection operator
\&\f(CW\*(C`*\*(C'\fR should be considered as a part of the type and the address operator \f(CW\*(C`&\*(C'\fR
should be considered part of the variable.  See perlxstypemap
for more info about handling qualifiers and unary operators in C types.
.PP
The function name and the return type must be placed on
separate lines and should be flush left-adjusted.
.PP
.Vb 1
\&  INCORRECT                        CORRECT
\&
\&  double sin(x)                    double
\&    double x                       sin(x)
\&                                     double x
.Ve
.PP
The rest of the function description may be indented or left-adjusted. The
following example shows a function with its body left-adjusted.  Most
examples in this document will indent the body for better readability.
.PP
.Vb 1
\&  CORRECT
\&
\&  double
\&  sin(x)
\&  double x
.Ve
.PP
More complicated XSUBs may contain many other sections.  Each section of
an \s-1XSUB\s0 starts with the corresponding keyword, such as \s-1INIT:\s0 or \s-1CLEANUP:\s0.
However, the first two lines of an \s-1XSUB\s0 always contain the same data:
descriptions of the return type and the names of the function and its
parameters.  Whatever immediately follows these is considered to be
an \s-1INPUT:\s0 section unless explicitly marked with another keyword.
(See \*(L"The \s-1INPUT:\s0 Keyword\*(R".)
.PP
An \s-1XSUB\s0 section continues until another section-start keyword is found.
.SS "The Argument Stack"
.IX Subsection "The Argument Stack"
The Perl argument stack is used to store the values which are
sent as parameters to the \s-1XSUB\s0 and to store the \s-1XSUB\s0's
return value(s).  In reality all Perl functions (including non-XSUB
ones) keep their values on this stack all the same time, each limited
to its own range of positions on the stack.  In this document the
first position on that stack which belongs to the active
function will be referred to as position 0 for that function.
.PP
XSUBs refer to their stack arguments with the macro \fB\s-1ST\s0(x)\fR, where \fIx\fR
refers to a position in this \s-1XSUB\s0's part of the stack.  Position 0 for that
function would be known to the \s-1XSUB\s0 as \s-1\fIST\s0\fR\|(0).  The \s-1XSUB\s0's incoming
parameters and outgoing return values always begin at \s-1\fIST\s0\fR\|(0).  For many
simple cases the \fBxsubpp\fR compiler will generate the code necessary to
handle the argument stack by embedding code fragments found in the
typemaps.  In more complex cases the programmer must supply the code.
.SS "The \s-1RETVAL\s0 Variable"
.IX Subsection "The RETVAL Variable"
The \s-1RETVAL\s0 variable is a special C variable that is declared automatically
for you.  The C type of \s-1RETVAL\s0 matches the return type of the C library
function.  The \fBxsubpp\fR compiler will declare this variable in each \s-1XSUB\s0
with non\-\f(CW\*(C`void\*(C'\fR return type.  By default the generated C function
will use \s-1RETVAL\s0 to hold the return value of the C library function being
called.  In simple cases the value of \s-1RETVAL\s0 will be placed in \s-1\fIST\s0\fR\|(0) of
the argument stack where it can be received by Perl as the return value
of the \s-1XSUB\s0.
.PP
If the \s-1XSUB\s0 has a return type of \f(CW\*(C`void\*(C'\fR then the compiler will
not declare a \s-1RETVAL\s0 variable for that function.  When using
a \s-1PPCODE:\s0 section no manipulation of the \s-1RETVAL\s0 variable is required, the
section may use direct stack manipulation to place output values on the stack.
.PP
If \s-1PPCODE:\s0 directive is not used, \f(CW\*(C`void\*(C'\fR return value should be used
only for subroutines which do not return a value, \fIeven if\fR \s-1CODE:\s0
directive is used which sets \s-1\fIST\s0\fR\|(0) explicitly.
.PP
Older versions of this document recommended to use \f(CW\*(C`void\*(C'\fR return
value in such cases. It was discovered that this could lead to
segfaults in cases when \s-1XSUB\s0 was \fItruly\fR \f(CW\*(C`void\*(C'\fR. This practice is
now deprecated, and may be not supported at some future version. Use
the return value \f(CW\*(C`SV *\*(C'\fR in such cases. (Currently \f(CW\*(C`xsubpp\*(C'\fR contains
some heuristic code which tries to disambiguate between \*(L"truly-void\*(R"
and \*(L"old-practice-declared-as-void\*(R" functions. Hence your code is at
mercy of this heuristics unless you use \f(CW\*(C`SV *\*(C'\fR as return value.)
.SS "Returning SVs, AVs and HVs through \s-1RETVAL\s0"
.IX Subsection "Returning SVs, AVs and HVs through RETVAL"
When you're using \s-1RETVAL\s0 to return an \f(CW\*(C`SV *\*(C'\fR, there's some magic
going on behind the scenes that should be mentioned. When you're
manipulating the argument stack using the \s-1ST\s0(x) macro, for example,
you usually have to pay special attention to reference counts. (For
more about reference counts, see perlguts.) To make your life
easier, the typemap file automatically makes \f(CW\*(C`RETVAL\*(C'\fR mortal when
you're returning an \f(CW\*(C`SV *\*(C'\fR. Thus, the following two XSUBs are more
or less equivalent:
.PP
.Vb 6
\&  void
\&  alpha()
\&      PPCODE:
\&          ST(0) = newSVpv("Hello World",0);
\&          sv_2mortal(ST(0));
\&          XSRETURN(1);
\&
\&  SV *
\&  beta()
\&      CODE:
\&          RETVAL = newSVpv("Hello World",0);
\&      OUTPUT:
\&          RETVAL
.Ve
.PP
This is quite useful as it usually improves readability. While
this works fine for an \f(CW\*(C`SV *\*(C'\fR, it's unfortunately not as easy
to have \f(CW\*(C`AV *\*(C'\fR or \f(CW\*(C`HV *\*(C'\fR as a return value. You \fIshould\fR be
able to write:
.PP
.Vb 7
\&  AV *
\&  array()
\&      CODE:
\&          RETVAL = newAV();
\&          /* do something with RETVAL */
\&      OUTPUT:
\&          RETVAL
.Ve
.PP
But due to an unfixable bug (fixing it would break lots of existing
\&\s-1CPAN\s0 modules) in the typemap file, the reference count of the \f(CW\*(C`AV *\*(C'\fR
is not properly decremented. Thus, the above \s-1XSUB\s0 would leak memory
whenever it is being called. The same problem exists for \f(CW\*(C`HV *\*(C'\fR,
\&\f(CW\*(C`CV *\*(C'\fR, and \f(CW\*(C`SVREF\*(C'\fR (which indicates a scalar reference, not
a general \f(CW\*(C`SV *\*(C'\fR).
In \s-1XS\s0 code on perls starting with perl 5.16, you can override the
typemaps for any of these types with a version that has proper
handling of refcounts. In your \f(CW\*(C`TYPEMAP\*(C'\fR section, do
.PP
.Vb 1
\&  AV*   T_AVREF_REFCOUNT_FIXED
.Ve
.PP
to get the repaired variant. For backward compatibility with older
versions of perl, you can instead decrement the reference count
manually when you're returning one of the aforementioned
types using \f(CW\*(C`sv_2mortal\*(C'\fR:
.PP
.Vb 8
\&  AV *
\&  array()
\&      CODE:
\&          RETVAL = newAV();
\&          sv_2mortal((SV*)RETVAL);
\&          /* do something with RETVAL */
\&      OUTPUT:
\&          RETVAL
.Ve
.PP
Remember that you don't have to do this for an \f(CW\*(C`SV *\*(C'\fR. The reference
documentation for all core typemaps can be found in perlxstypemap.
.SS "The \s-1MODULE\s0 Keyword"
.IX Subsection "The MODULE Keyword"
The \s-1MODULE\s0 keyword is used to start the \s-1XS\s0 code and to specify the package
of the functions which are being defined.  All text preceding the first
\&\s-1MODULE\s0 keyword is considered C code and is passed through to the output with
\&\s-1POD\s0 stripped, but otherwise untouched.  Every \s-1XS\s0 module will have a
bootstrap function which is used to hook the XSUBs into Perl.  The package
name of this bootstrap function will match the value of the last \s-1MODULE\s0
statement in the \s-1XS\s0 source files.  The value of \s-1MODULE\s0 should always remain
constant within the same \s-1XS\s0 file, though this is not required.
.PP
The following example will start the \s-1XS\s0 code and will place
all functions in a package named \s-1RPC\s0.
.PP
.Vb 1
\&     MODULE = RPC
.Ve
.SS "The \s-1PACKAGE\s0 Keyword"
.IX Subsection "The PACKAGE Keyword"
When functions within an \s-1XS\s0 source file must be separated into packages
the \s-1PACKAGE\s0 keyword should be used.  This keyword is used with the \s-1MODULE\s0
keyword and must follow immediately after it when used.
.PP
.Vb 1
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     [ XS code in package RPC ]
\&
\&     MODULE = RPC  PACKAGE = RPCB
\&
\&     [ XS code in package RPCB ]
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     [ XS code in package RPC ]
.Ve
.PP
The same package name can be used more than once, allowing for
non-contiguous code. This is useful if you have a stronger ordering
principle than package names.
.PP
Although this keyword is optional and in some cases provides redundant
information it should always be used.  This keyword will ensure that the
XSUBs appear in the desired package.
.SS "The \s-1PREFIX\s0 Keyword"
.IX Subsection "The PREFIX Keyword"
The \s-1PREFIX\s0 keyword designates prefixes which should be
removed from the Perl function names.  If the C function is
\&\f(CW\*(C`rpcb_gettime()\*(C'\fR and the \s-1PREFIX\s0 value is \f(CW\*(C`rpcb_\*(C'\fR then Perl will
see this function as \f(CW\*(C`gettime()\*(C'\fR.
.PP
This keyword should follow the \s-1PACKAGE\s0 keyword when used.
If \s-1PACKAGE\s0 is not used then \s-1PREFIX\s0 should follow the \s-1MODULE\s0
keyword.
.PP
.Vb 1
\&     MODULE = RPC  PREFIX = rpc_
\&
\&     MODULE = RPC  PACKAGE = RPCB  PREFIX = rpcb_
.Ve
.SS "The \s-1OUTPUT:\s0 Keyword"
.IX Subsection "The OUTPUT: Keyword"
The \s-1OUTPUT:\s0 keyword indicates that certain function parameters should be
updated (new values made visible to Perl) when the \s-1XSUB\s0 terminates or that
certain values should be returned to the calling Perl function.  For
simple functions which have no \s-1CODE:\s0 or \s-1PPCODE:\s0 section,
such as the \fIsin()\fR function above, the \s-1RETVAL\s0 variable is
automatically designated as an output value.  For more complex functions
the \fBxsubpp\fR compiler will need help to determine which variables are output
variables.
.PP
This keyword will normally be used to complement the \s-1CODE:\s0  keyword.
The \s-1RETVAL\s0 variable is not recognized as an output variable when the
\&\s-1CODE:\s0 keyword is present.  The \s-1OUTPUT:\s0  keyword is used in this
situation to tell the compiler that \s-1RETVAL\s0 really is an output
variable.
.PP
The \s-1OUTPUT:\s0 keyword can also be used to indicate that function parameters
are output variables.  This may be necessary when a parameter has been
modified within the function and the programmer would like the update to
be seen by Perl.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.PP
The \s-1OUTPUT:\s0 keyword will also allow an output parameter to
be mapped to a matching piece of code rather than to a
typemap.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep sv_setnv(ST(1), (double)timep);
.Ve
.PP
\&\fBxsubpp\fR emits an automatic \f(CW\*(C`SvSETMAGIC()\*(C'\fR for all parameters in the
\&\s-1OUTPUT\s0 section of the \s-1XSUB\s0, except \s-1RETVAL\s0.  This is the usually desired
behavior, as it takes care of properly invoking 'set' magic on output
parameters (needed for hash or array element parameters that must be
created if they didn't exist).  If for some reason, this behavior is
not desired, the \s-1OUTPUT\s0 section may contain a \f(CW\*(C`SETMAGIC: DISABLE\*(C'\fR line
to disable it for the remainder of the parameters in the \s-1OUTPUT\s0 section.
Likewise,  \f(CW\*(C`SETMAGIC: ENABLE\*(C'\fR can be used to reenable it for the
remainder of the \s-1OUTPUT\s0 section.  See perlguts for more details
about 'set' magic.
.SS "The \s-1NO_OUTPUT\s0 Keyword"
.IX Subsection "The NO_OUTPUT Keyword"
The \s-1NO_OUTPUT\s0 can be placed as the first token of the \s-1XSUB\s0.  This keyword
indicates that while the C subroutine we provide an interface to has
a non\-\f(CW\*(C`void\*(C'\fR return type, the return value of this C subroutine should not
be returned from the generated Perl subroutine.
.PP
With this keyword present \*(L"The \s-1RETVAL\s0 Variable\*(R" is created, and in the
generated call to the subroutine this variable is assigned to, but the value
of this variable is not going to be used in the auto-generated code.
.PP
This keyword makes sense only if \f(CW\*(C`RETVAL\*(C'\fR is going to be accessed by the
user-supplied code.  It is especially useful to make a function interface
more Perl-like, especially when the C return value is just an error condition
indicator.  For example,
.PP
.Vb 5
\&  NO_OUTPUT int
\&  delete_file(char *name)
\&    POSTCALL:
\&      if (RETVAL != 0)
\&          croak("Error %d while deleting file \*(Aq%s\*(Aq", RETVAL, name);
.Ve
.PP
Here the generated \s-1XS\s0 function returns nothing on success, and will \fIdie()\fR
with a meaningful error message on error.
.SS "The \s-1CODE:\s0 Keyword"
.IX Subsection "The CODE: Keyword"
This keyword is used in more complicated XSUBs which require
special handling for the C function.  The \s-1RETVAL\s0 variable is
still declared, but it will not be returned unless it is specified
in the \s-1OUTPUT:\s0 section.
.PP
The following \s-1XSUB\s0 is for a C function which requires special handling of
its parameters.  The Perl usage is given first.
.PP
.Vb 1
\&     $status = rpcb_gettime( "localhost", $timep );
.Ve
.PP
The \s-1XSUB\s0 follows.
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t timep
\&        CODE:
\&               RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The \s-1INIT:\s0 Keyword"
.IX Subsection "The INIT: Keyword"
The \s-1INIT:\s0 keyword allows initialization to be inserted into the \s-1XSUB\s0 before
the compiler generates the call to the C function.  Unlike the \s-1CODE:\s0 keyword
above, this keyword does not affect the way the compiler handles \s-1RETVAL\s0.
.PP
.Vb 8
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        INIT:
\&          printf("# Host is %s\en", host );
\&        OUTPUT:
\&          timep
.Ve
.PP
Another use for the \s-1INIT:\s0 section is to check for preconditions before
making a call to the C function:
.PP
.Vb 9
\&    long long
\&    lldiv(a,b)
\&        long long a
\&        long long b
\&      INIT:
\&        if (a == 0 && b == 0)
\&            XSRETURN_UNDEF;
\&        if (b == 0)
\&            croak("lldiv: cannot divide by 0");
.Ve
.SS "The \s-1NO_INIT\s0 Keyword"
.IX Subsection "The NO_INIT Keyword"
The \s-1NO_INIT\s0 keyword is used to indicate that a function
parameter is being used only as an output value.  The \fBxsubpp\fR
compiler will normally generate code to read the values of
all function parameters from the argument stack and assign
them to C variables upon entry to the function.  \s-1NO_INIT\s0
will tell the compiler that some parameters will be used for
output rather than for input and that they will be handled
before the function terminates.
.PP
The following example shows a variation of the \fIrpcb_gettime()\fR function.
This function uses the timep variable only as an output variable and does
not care about its initial contents.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep = NO_INIT
\&        OUTPUT:
\&          timep
.Ve
.SS "The \s-1TYPEMAP:\s0 Keyword"
.IX Subsection "The TYPEMAP: Keyword"
Starting with Perl 5.16, you can embed typemaps into your \s-1XS\s0 code
instead of or in addition to typemaps in a separate file.  Multiple
such embedded typemaps will be processed in order of appearance in
the \s-1XS\s0 code and like local typemap files take precendence over the
default typemap, the embedded typemaps may overwrite previous
definitions of \s-1TYPEMAP\s0, \s-1INPUT\s0, and \s-1OUTPUT\s0 stanzas.  The syntax for
embedded typemaps is
.PP
.Vb 3
\&      TYPEMAP: <<HERE
\&      ... your typemap code here ...
\&      HERE
.Ve
.PP
where the \f(CW\*(C`TYPEMAP\*(C'\fR keyword must appear in the first column of a
new line.
.PP
Refer to perlxstypemap for details on writing typemaps.
.SS "Initializing Function Parameters"
.IX Subsection "Initializing Function Parameters"
C function parameters are normally initialized with their values from
the argument stack (which in turn contains the parameters that were
passed to the \s-1XSUB\s0 from Perl).  The typemaps contain the
code segments which are used to translate the Perl values to
the C parameters.  The programmer, however, is allowed to
override the typemaps and supply alternate (or additional)
initialization code.  Initialization code starts with the first
\&\f(CW\*(C`=\*(C'\fR, \f(CW\*(C`;\*(C'\fR or \f(CW\*(C`+\*(C'\fR on a line in the \s-1INPUT:\s0 section.  The only
exception happens if this \f(CW\*(C`;\*(C'\fR terminates the line, then this \f(CW\*(C`;\*(C'\fR
is quietly ignored.
.PP
The following code demonstrates how to supply initialization code for
function parameters.  The initialization code is eval'ed within double
quotes by the compiler before it is added to the output so anything
which should be interpreted literally [mainly \f(CW\*(C`$\*(C'\fR, \f(CW\*(C`@\*(C'\fR, or \f(CW\*(C`\e\e\*(C'\fR]
must be protected with backslashes.  The variables \f(CW$var\fR, \f(CW$arg\fR,
and \f(CW$type\fR can be used as in typemaps.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host = (char *)SvPV_nolen($arg);
\&          time_t &timep = 0;
\&        OUTPUT:
\&          timep
.Ve
.PP
This should not be used to supply default values for parameters.  One
would normally use this when a function parameter must be processed by
another library function before it can be used.  Default parameters are
covered in the next section.
.PP
If the initialization begins with \f(CW\*(C`=\*(C'\fR, then it is output in
the declaration for the input variable, replacing the initialization
supplied by the typemap.  If the initialization
begins with \f(CW\*(C`;\*(C'\fR or \f(CW\*(C`+\*(C'\fR, then it is performed after
all of the input variables have been declared.  In the \f(CW\*(C`;\*(C'\fR
case the initialization normally supplied by the typemap is not performed.
For the \f(CW\*(C`+\*(C'\fR case, the declaration for the variable will include the
initialization from the typemap.  A global
variable, \f(CW%v\fR, is available for the truly rare case where
information from one initialization is needed in another
initialization.
.PP
Here's a truly obscure example:
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          time_t &timep; /* \e$v{timep}=@{[$v{timep}=$arg]} */
\&          char *host + SvOK($v{timep}) ? SvPV_nolen($arg) : NULL;
\&        OUTPUT:
\&          timep
.Ve
.PP
The construct \f(CW\*(C`\e$v{timep}=@{[$v{timep}=$arg]}\*(C'\fR used in the above
example has a two-fold purpose: first, when this line is processed by
\&\fBxsubpp\fR, the Perl snippet \f(CW\*(C`$v{timep}=$arg\*(C'\fR is evaluated.  Second,
the text of the evaluated snippet is output into the generated C file
(inside a C comment)!  During the processing of \f(CW\*(C`char *host\*(C'\fR line,
\&\f(CW$arg\fR will evaluate to \f(CWST(0)\fR, and \f(CW$v{timep}\fR will evaluate to
\&\f(CWST(1)\fR.
.SS "Default Parameter Values"
.IX Subsection "Default Parameter Values"
Default values for \s-1XSUB\s0 arguments can be specified by placing an
assignment statement in the parameter list.  The default value may
be a number, a string or the special string \f(CW\*(C`NO_INIT\*(C'\fR.  Defaults should
always be used on the right-most parameters only.
.PP
To allow the \s-1XSUB\s0 for \fIrpcb_gettime()\fR to have a default host
value the parameters to the \s-1XSUB\s0 could be rearranged.  The
\&\s-1XSUB\s0 will then call the real \fIrpcb_gettime()\fR function with
the parameters in the correct order.  This \s-1XSUB\s0 can be called
from Perl with either of the following statements:
.PP
.Vb 1
\&     $status = rpcb_gettime( $timep, $host );
\&
\&     $status = rpcb_gettime( $timep );
.Ve
.PP
The \s-1XSUB\s0 will look like the code  which  follows.   A  \s-1CODE:\s0
block  is used to call the real \fIrpcb_gettime()\fR function with
the parameters in the correct order for that function.
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(timep,host="localhost")
\&          char *host
\&          time_t timep = NO_INIT
\&        CODE:
\&               RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The \s-1PREINIT:\s0 Keyword"
.IX Subsection "The PREINIT: Keyword"
The \s-1PREINIT:\s0 keyword allows extra variables to be declared immediately
before or after the declarations of the parameters from the \s-1INPUT:\s0 section
are emitted.
.PP
If a variable is declared inside a \s-1CODE:\s0 section it will follow any typemap
code that is emitted for the input parameters.  This may result in the
declaration ending up after C code, which is C syntax error.  Similar
errors may happen with an explicit \f(CW\*(C`;\*(C'\fR\-type or \f(CW\*(C`+\*(C'\fR\-type initialization of
parameters is used (see \*(L"Initializing Function Parameters\*(R").  Declaring
these variables in an \s-1INIT:\s0 section will not help.
.PP
In such cases, to force an additional variable to be declared together
with declarations of other variables, place the declaration into a
\&\s-1PREINIT:\s0 section.  The \s-1PREINIT:\s0 keyword may be used one or more times
within an \s-1XSUB\s0.
.PP
The following examples are equivalent, but if the code is using complex
typemaps then the first example is safer.
.PP
.Vb 10
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&        PREINIT:
\&          char *host = "localhost";
\&        CODE:
\&          RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
For this particular case an \s-1INIT:\s0 keyword would generate the
same C code as the \s-1PREINIT:\s0 keyword.  Another correct, but error-prone example:
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&        CODE:
\&          char *host = "localhost";
\&          RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
Another way to declare \f(CW\*(C`host\*(C'\fR is to use a C block in the \s-1CODE:\s0 section:
.PP
.Vb 11
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&        CODE:
\&          {
\&            char *host = "localhost";
\&            RETVAL = rpcb_gettime( host, &timep );
\&          }
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
The ability to put additional declarations before the typemap entries are
processed is very handy in the cases when typemap conversions manipulate
some global state:
.PP
.Vb 8
\&    MyObject
\&    mutate(o)
\&        PREINIT:
\&            MyState st = global_state;
\&        INPUT:
\&            MyObject o;
\&        CLEANUP:
\&            reset_to(global_state, st);
.Ve
.PP
Here we suppose that conversion to \f(CW\*(C`MyObject\*(C'\fR in the \s-1INPUT:\s0 section and from
MyObject when processing \s-1RETVAL\s0 will modify a global variable \f(CW\*(C`global_state\*(C'\fR.
After these conversions are performed, we restore the old value of
\&\f(CW\*(C`global_state\*(C'\fR (to avoid memory leaks, for example).
.PP
There is another way to trade clarity for compactness: \s-1INPUT\s0 sections allow
declaration of C variables which do not appear in the parameter list of
a subroutine.  Thus the above code for \fImutate()\fR can be rewritten as
.PP
.Vb 6
\&    MyObject
\&    mutate(o)
\&          MyState st = global_state;
\&          MyObject o;
\&        CLEANUP:
\&          reset_to(global_state, st);
.Ve
.PP
and the code for \fIrpcb_gettime()\fR can be rewritten as
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&          char *host = "localhost";
\&        C_ARGS:
\&          host, &timep
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The \s-1SCOPE:\s0 Keyword"
.IX Subsection "The SCOPE: Keyword"
The \s-1SCOPE:\s0 keyword allows scoping to be enabled for a particular \s-1XSUB\s0. If
enabled, the \s-1XSUB\s0 will invoke \s-1ENTER\s0 and \s-1LEAVE\s0 automatically.
.PP
To support potentially complex type mappings, if a typemap entry used
by an \s-1XSUB\s0 contains a comment like \f(CW\*(C`/*scope*/\*(C'\fR then scoping will
be automatically enabled for that \s-1XSUB\s0.
.PP
To enable scoping:
.PP
.Vb 1
\&    SCOPE: ENABLE
.Ve
.PP
To disable scoping:
.PP
.Vb 1
\&    SCOPE: DISABLE
.Ve
.SS "The \s-1INPUT:\s0 Keyword"
.IX Subsection "The INPUT: Keyword"
The \s-1XSUB\s0's parameters are usually evaluated immediately after entering the
\&\s-1XSUB\s0.  The \s-1INPUT:\s0 keyword can be used to force those parameters to be
evaluated a little later.  The \s-1INPUT:\s0 keyword can be used multiple times
within an \s-1XSUB\s0 and can be used to list one or more input variables.  This
keyword is used with the \s-1PREINIT:\s0 keyword.
.PP
The following example shows how the input parameter \f(CW\*(C`timep\*(C'\fR can be
evaluated late, after a \s-1PREINIT\s0.
.PP
.Vb 10
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&        PREINIT:
\&          time_t tt;
\&        INPUT:
\&          time_t timep
\&        CODE:
\&               RETVAL = rpcb_gettime( host, &tt );
\&               timep = tt;
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
The next example shows each input parameter evaluated late.
.PP
.Vb 10
\&    bool_t
\&    rpcb_gettime(host,timep)
\&        PREINIT:
\&          time_t tt;
\&        INPUT:
\&          char *host
\&        PREINIT:
\&          char *h;
\&        INPUT:
\&          time_t timep
\&        CODE:
\&               h = host;
\&               RETVAL = rpcb_gettime( h, &tt );
\&               timep = tt;
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
Since \s-1INPUT\s0 sections allow declaration of C variables which do not appear
in the parameter list of a subroutine, this may be shortened to:
.PP
.Vb 12
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          time_t tt;
\&          char *host;
\&          char *h = host;
\&          time_t timep;
\&        CODE:
\&          RETVAL = rpcb_gettime( h, &tt );
\&          timep = tt;
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
(We used our knowledge that input conversion for \f(CW\*(C`char *\*(C'\fR is a \*(L"simple\*(R" one,
thus \f(CW\*(C`host\*(C'\fR is initialized on the declaration line, and our assignment
\&\f(CW\*(C`h = host\*(C'\fR is not performed too early.  Otherwise one would need to have the
assignment \f(CW\*(C`h = host\*(C'\fR in a \s-1CODE:\s0 or \s-1INIT:\s0 section.)
.SS "The \s-1IN/OUTLIST/IN_OUTLIST/OUT/IN_OUT\s0 Keywords"
.IX Subsection "The IN/OUTLIST/IN_OUTLIST/OUT/IN_OUT Keywords"
In the list of parameters for an \s-1XSUB\s0, one can precede parameter names
by the \f(CW\*(C`IN\*(C'\fR/\f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR keywords.
\&\f(CW\*(C`IN\*(C'\fR keyword is the default, the other keywords indicate how the Perl
interface should differ from the C interface.
.PP
Parameters preceded by \f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR
keywords are considered to be used by the C subroutine \fIvia
pointers\fR.  \f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR keywords indicate that the C subroutine
does not inspect the memory pointed by this parameter, but will write
through this pointer to provide additional return values.
.PP
Parameters preceded by \f(CW\*(C`OUTLIST\*(C'\fR keyword do not appear in the usage
signature of the generated Perl function.
.PP
Parameters preceded by \f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR \fIdo\fR appear as
parameters to the Perl function.  With the exception of
\&\f(CW\*(C`OUT\*(C'\fR\-parameters, these parameters are converted to the corresponding
C type, then pointers to these data are given as arguments to the C
function.  It is expected that the C function will write through these
pointers.
.PP
The return list of the generated Perl function consists of the C return value
from the function (unless the \s-1XSUB\s0 is of \f(CW\*(C`void\*(C'\fR return type or
\&\f(CW\*(C`The NO_OUTPUT Keyword\*(C'\fR was used) followed by all the \f(CW\*(C`OUTLIST\*(C'\fR
and \f(CW\*(C`IN_OUTLIST\*(C'\fR parameters (in the order of appearance).  On the
return from the \s-1XSUB\s0 the \f(CW\*(C`IN_OUT\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR Perl parameter will be
modified to have the values written by the C function.
.PP
For example, an \s-1XSUB\s0
.PP
.Vb 5
\&  void
\&  day_month(OUTLIST day, IN unix_time, OUTLIST month)
\&    int day
\&    int unix_time
\&    int month
.Ve
.PP
should be used from Perl as
.PP
.Vb 1
\&  my ($day, $month) = day_month(time);
.Ve
.PP
The C signature of the corresponding function should be
.PP
.Vb 1
\&  void day_month(int *day, int unix_time, int *month);
.Ve
.PP
The \f(CW\*(C`IN\*(C'\fR/\f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR keywords can be
mixed with ANSI-style declarations, as in
.PP
.Vb 2
\&  void
\&  day_month(OUTLIST int day, int unix_time, OUTLIST int month)
.Ve
.PP
(here the optional \f(CW\*(C`IN\*(C'\fR keyword is omitted).
.PP
The \f(CW\*(C`IN_OUT\*(C'\fR parameters are identical with parameters introduced with
\&\*(L"The & Unary Operator\*(R" and put into the \f(CW\*(C`OUTPUT:\*(C'\fR section (see
\&\*(L"The \s-1OUTPUT:\s0 Keyword\*(R").  The \f(CW\*(C`IN_OUTLIST\*(C'\fR parameters are very similar,
the only difference being that the value C function writes through the
pointer would not modify the Perl parameter, but is put in the output
list.
.PP
The \f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR parameter differ from \f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR
parameters only by the initial value of the Perl parameter not
being read (and not being given to the C function \- which gets some
garbage instead).  For example, the same C function as above can be
interfaced with as
.PP
.Vb 1
\&  void day_month(OUT int day, int unix_time, OUT int month);
.Ve
.PP
or
.PP
.Vb 8
\&  void
\&  day_month(day, unix_time, month)
\&      int &day = NO_INIT
\&      int  unix_time
\&      int &month = NO_INIT
\&    OUTPUT:
\&      day
\&      month
.Ve
.PP
However, the generated Perl function is called in very C\-ish style:
.PP
.Vb 2
\&  my ($day, $month);
\&  day_month($day, time, $month);
.Ve
.ie n .SS "The ""length(NAME)"" Keyword"
.el .SS "The \f(CWlength(NAME)\fP Keyword"
.IX Subsection "The length(NAME) Keyword"
If one of the input arguments to the C function is the length of a string
argument \f(CW\*(C`NAME\*(C'\fR, one can substitute the name of the length-argument by
\&\f(CW\*(C`length(NAME)\*(C'\fR in the \s-1XSUB\s0 declaration.  This argument must be omitted when
the generated Perl function is called.  E.g.,
.PP
.Vb 9
\&  void
\&  dump_chars(char *s, short l)
\&  {
\&    short n = 0;
\&    while (n < l) {
\&        printf("s[%d] = \e"\e\e%#03o\e"\en", n, (int)s[n]);
\&        n++;
\&    }
\&  }
\&
\&  MODULE = x            PACKAGE = x
\&
\&  void dump_chars(char *s, short length(s))
.Ve
.PP
should be called as \f(CW\*(C`dump_chars($string)\*(C'\fR.
.PP
This directive is supported with ANSI-type function declarations only.
.SS "Variable-length Parameter Lists"
.IX Subsection "Variable-length Parameter Lists"
XSUBs can have variable-length parameter lists by specifying an ellipsis
\&\f(CW\*(C`(...)\*(C'\fR in the parameter list.  This use of the ellipsis is similar to that
found in \s-1ANSI\s0 C.  The programmer is able to determine the number of
arguments passed to the \s-1XSUB\s0 by examining the \f(CW\*(C`items\*(C'\fR variable which the
\&\fBxsubpp\fR compiler supplies for all XSUBs.  By using this mechanism one can
create an \s-1XSUB\s0 which accepts a list of parameters of unknown length.
.PP
The \fIhost\fR parameter for the \fIrpcb_gettime()\fR \s-1XSUB\s0 can be
optional so the ellipsis can be used to indicate that the
\&\s-1XSUB\s0 will take a variable number of parameters.  Perl should
be able to call this \s-1XSUB\s0 with either of the following statements.
.PP
.Vb 1
\&     $status = rpcb_gettime( $timep, $host );
\&
\&     $status = rpcb_gettime( $timep );
.Ve
.PP
The \s-1XS\s0 code, with ellipsis, follows.
.PP
.Vb 12
\&     bool_t
\&     rpcb_gettime(timep, ...)
\&          time_t timep = NO_INIT
\&        PREINIT:
\&          char *host = "localhost";
\&        CODE:
\&          if( items > 1 )
\&               host = (char *)SvPV_nolen(ST(1));
\&          RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The C_ARGS: Keyword"
.IX Subsection "The C_ARGS: Keyword"
The C_ARGS: keyword allows creating of \s-1XSUBS\s0 which have different
calling sequence from Perl than from C, without a need to write
\&\s-1CODE:\s0 or \s-1PPCODE:\s0 section.  The contents of the C_ARGS: paragraph is
put as the argument to the called C function without any change.
.PP
For example, suppose that a C function is declared as
.PP
.Vb 1
\&    symbolic nth_derivative(int n, symbolic function, int flags);
.Ve
.PP
and that the default flags are kept in a global C variable
\&\f(CW\*(C`default_flags\*(C'\fR.  Suppose that you want to create an interface which
is called as
.PP
.Vb 1
\&    $second_deriv = $function\->nth_derivative(2);
.Ve
.PP
To do this, declare the \s-1XSUB\s0 as
.PP
.Vb 6
\&    symbolic
\&    nth_derivative(function, n)
\&        symbolic        function
\&        int             n
\&      C_ARGS:
\&        n, function, default_flags
.Ve
.SS "The \s-1PPCODE:\s0 Keyword"
.IX Subsection "The PPCODE: Keyword"
The \s-1PPCODE:\s0 keyword is an alternate form of the \s-1CODE:\s0 keyword and is used
to tell the \fBxsubpp\fR compiler that the programmer is supplying the code to
control the argument stack for the XSUBs return values.  Occasionally one
will want an \s-1XSUB\s0 to return a list of values rather than a single value.
In these cases one must use \s-1PPCODE:\s0 and then explicitly push the list of
values on the stack.  The \s-1PPCODE:\s0 and \s-1CODE:\s0  keywords should not be used
together within the same \s-1XSUB\s0.
.PP
The actual difference between \s-1PPCODE:\s0 and \s-1CODE:\s0 sections is in the
initialization of \f(CW\*(C`SP\*(C'\fR macro (which stands for the \fIcurrent\fR Perl
stack pointer), and in the handling of data on the stack when returning
from an \s-1XSUB\s0.  In \s-1CODE:\s0 sections \s-1SP\s0 preserves the value which was on
entry to the \s-1XSUB:\s0 \s-1SP\s0 is on the function pointer (which follows the
last parameter).  In \s-1PPCODE:\s0 sections \s-1SP\s0 is moved backward to the
beginning of the parameter list, which allows \f(CW\*(C`PUSH*()\*(C'\fR macros
to place output values in the place Perl expects them to be when
the \s-1XSUB\s0 returns back to Perl.
.PP
The generated trailer for a \s-1CODE:\s0 section ensures that the number of return
values Perl will see is either 0 or 1 (depending on the \f(CW\*(C`void\*(C'\fRness of the
return value of the C function, and heuristics mentioned in
\&\*(L"The \s-1RETVAL\s0 Variable\*(R").  The trailer generated for a \s-1PPCODE:\s0 section
is based on the number of return values and on the number of times
\&\f(CW\*(C`SP\*(C'\fR was updated by \f(CW\*(C`[X]PUSH*()\*(C'\fR macros.
.PP
Note that macros \f(CWST(i)\fR, \f(CW\*(C`XST_m*()\*(C'\fR and \f(CW\*(C`XSRETURN*()\*(C'\fR work equally
well in \s-1CODE:\s0 sections and \s-1PPCODE:\s0 sections.
.PP
The following \s-1XSUB\s0 will call the C \fIrpcb_gettime()\fR function
and will return its two output values, timep and status, to
Perl as a single list.
.PP
.Vb 11
\&     void
\&     rpcb_gettime(host)
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&          bool_t  status;
\&        PPCODE:
\&          status = rpcb_gettime( host, &timep );
\&          EXTEND(SP, 2);
\&          PUSHs(sv_2mortal(newSViv(status)));
\&          PUSHs(sv_2mortal(newSViv(timep)));
.Ve
.PP
Notice that the programmer must supply the C code necessary
to have the real \fIrpcb_gettime()\fR function called and to have
the return values properly placed on the argument stack.
.PP
The \f(CW\*(C`void\*(C'\fR return type for this function tells the \fBxsubpp\fR compiler that
the \s-1RETVAL\s0 variable is not needed or used and that it should not be created.
In most scenarios the void return type should be used with the \s-1PPCODE:\s0
directive.
.PP
The \s-1\fIEXTEND\s0()\fR macro is used to make room on the argument
stack for 2 return values.  The \s-1PPCODE:\s0 directive causes the
\&\fBxsubpp\fR compiler to create a stack pointer available as \f(CW\*(C`SP\*(C'\fR, and it
is this pointer which is being used in the \s-1\fIEXTEND\s0()\fR macro.
The values are then pushed onto the stack with the \fIPUSHs()\fR
macro.
.PP
Now the \fIrpcb_gettime()\fR function can be used from Perl with
the following statement.
.PP
.Vb 1
\&     ($status, $timep) = rpcb_gettime("localhost");
.Ve
.PP
When handling output parameters with a \s-1PPCODE\s0 section, be sure to handle
\&'set' magic properly.  See perlguts for details about 'set' magic.
.SS "Returning Undef And Empty Lists"
.IX Subsection "Returning Undef And Empty Lists"
Occasionally the programmer will want to return simply
\&\f(CW\*(C`undef\*(C'\fR or an empty list if a function fails rather than a
separate status value.  The \fIrpcb_gettime()\fR function offers
just this situation.  If the function succeeds we would like
to have it return the time and if it fails we would like to
have undef returned.  In the following Perl code the value
of \f(CW$timep\fR will either be undef or it will be a valid time.
.PP
.Vb 1
\&     $timep = rpcb_gettime( "localhost" );
.Ve
.PP
The following \s-1XSUB\s0 uses the \f(CW\*(C`SV *\*(C'\fR return type as a mnemonic only,
and uses a \s-1CODE:\s0 block to indicate to the compiler
that the programmer has supplied all the necessary code.  The
\&\fIsv_newmortal()\fR call will initialize the return value to undef, making that
the default return value.
.PP
.Vb 10
\&     SV *
\&     rpcb_gettime(host)
\&          char *  host
\&        PREINIT:
\&          time_t  timep;
\&          bool_t x;
\&        CODE:
\&          ST(0) = sv_newmortal();
\&          if( rpcb_gettime( host, &timep ) )
\&               sv_setnv( ST(0), (double)timep);
.Ve
.PP
The next example demonstrates how one would place an explicit undef in the
return value, should the need arise.
.PP
.Vb 10
\&     SV *
\&     rpcb_gettime(host)
\&          char *  host
\&        PREINIT:
\&          time_t  timep;
\&          bool_t x;
\&        CODE:
\&          if( rpcb_gettime( host, &timep ) ){
\&               ST(0) = sv_newmortal();
\&               sv_setnv( ST(0), (double)timep);
\&          }
\&          else{
\&               ST(0) = &PL_sv_undef;
\&          }
.Ve
.PP
To return an empty list one must use a \s-1PPCODE:\s0 block and
then not push return values on the stack.
.PP
.Vb 12
\&     void
\&     rpcb_gettime(host)
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&        PPCODE:
\&          if( rpcb_gettime( host, &timep ) )
\&               PUSHs(sv_2mortal(newSViv(timep)));
\&          else{
\&              /* Nothing pushed on stack, so an empty
\&               * list is implicitly returned. */
\&          }
.Ve
.PP
Some people may be inclined to include an explicit \f(CW\*(C`return\*(C'\fR in the above
\&\s-1XSUB\s0, rather than letting control fall through to the end.  In those
situations \f(CW\*(C`XSRETURN_EMPTY\*(C'\fR should be used, instead.  This will ensure that
the \s-1XSUB\s0 stack is properly adjusted.  Consult perlapi for other
\&\f(CW\*(C`XSRETURN\*(C'\fR macros.
.PP
Since \f(CW\*(C`XSRETURN_*\*(C'\fR macros can be used with \s-1CODE\s0 blocks as well, one can
rewrite this example as:
.PP
.Vb 11
\&     int
\&     rpcb_gettime(host)
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&        CODE:
\&          RETVAL = rpcb_gettime( host, &timep );
\&          if (RETVAL == 0)
\&                XSRETURN_UNDEF;
\&        OUTPUT:
\&          RETVAL
.Ve
.PP
In fact, one can put this check into a \s-1POSTCALL:\s0 section as well.  Together
with \s-1PREINIT:\s0 simplifications, this leads to:
.PP
.Vb 7
\&     int
\&     rpcb_gettime(host)
\&          char *host
\&          time_t  timep;
\&        POSTCALL:
\&          if (RETVAL == 0)
\&                XSRETURN_UNDEF;
.Ve
.SS "The \s-1REQUIRE:\s0 Keyword"
.IX Subsection "The REQUIRE: Keyword"
The \s-1REQUIRE:\s0 keyword is used to indicate the minimum version of the
\&\fBxsubpp\fR compiler needed to compile the \s-1XS\s0 module.  An \s-1XS\s0 module which
contains the following statement will compile with only \fBxsubpp\fR version
1.922 or greater:
.PP
.Vb 1
\&        REQUIRE: 1.922
.Ve
.SS "The \s-1CLEANUP:\s0 Keyword"
.IX Subsection "The CLEANUP: Keyword"
This keyword can be used when an \s-1XSUB\s0 requires special cleanup procedures
before it terminates.  When the \s-1CLEANUP:\s0  keyword is used it must follow
any \s-1CODE:\s0, \s-1PPCODE:\s0, or \s-1OUTPUT:\s0 blocks which are present in the \s-1XSUB\s0.  The
code specified for the cleanup block will be added as the last statements
in the \s-1XSUB\s0.
.SS "The \s-1POSTCALL:\s0 Keyword"
.IX Subsection "The POSTCALL: Keyword"
This keyword can be used when an \s-1XSUB\s0 requires special procedures
executed after the C subroutine call is performed.  When the \s-1POSTCALL:\s0
keyword is used it must precede \s-1OUTPUT:\s0 and \s-1CLEANUP:\s0 blocks which are
present in the \s-1XSUB\s0.
.PP
See examples in \*(L"The \s-1NO_OUTPUT\s0 Keyword\*(R" and \*(L"Returning Undef And Empty Lists\*(R".
.PP
The \s-1POSTCALL:\s0 block does not make a lot of sense when the C subroutine
call is supplied by user by providing either \s-1CODE:\s0 or \s-1PPCODE:\s0 section.
.SS "The \s-1BOOT:\s0 Keyword"
.IX Subsection "The BOOT: Keyword"
The \s-1BOOT:\s0 keyword is used to add code to the extension's bootstrap
function.  The bootstrap function is generated by the \fBxsubpp\fR compiler and
normally holds the statements necessary to register any XSUBs with Perl.
With the \s-1BOOT:\s0 keyword the programmer can tell the compiler to add extra
statements to the bootstrap function.
.PP
This keyword may be used any time after the first \s-1MODULE\s0 keyword and should
appear on a line by itself.  The first blank line after the keyword will
terminate the code block.
.PP
.Vb 4
\&     BOOT:
\&     # The following message will be printed when the
\&     # bootstrap function executes.
\&     printf("Hello from the bootstrap!\en");
.Ve
.SS "The \s-1VERSIONCHECK:\s0 Keyword"
.IX Subsection "The VERSIONCHECK: Keyword"
The \s-1VERSIONCHECK:\s0 keyword corresponds to \fBxsubpp\fR's \f(CW\*(C`\-versioncheck\*(C'\fR and
\&\f(CW\*(C`\-noversioncheck\*(C'\fR options.  This keyword overrides the command line
options.  Version checking is enabled by default.  When version checking is
enabled the \s-1XS\s0 module will attempt to verify that its version matches the
version of the \s-1PM\s0 module.
.PP
To enable version checking:
.PP
.Vb 1
\&    VERSIONCHECK: ENABLE
.Ve
.PP
To disable version checking:
.PP
.Vb 1
\&    VERSIONCHECK: DISABLE
.Ve
.PP
Note that if the version of the \s-1PM\s0 module is an \s-1NV\s0 (a floating point
number), it will be stringified with a possible loss of precision
(currently chopping to nine decimal places) so that it may not match
the version of the \s-1XS\s0 module anymore. Quoting the \f(CW$VERSION\fR declaration
to make it a string is recommended if long version numbers are used.
.SS "The \s-1PROTOTYPES:\s0 Keyword"
.IX Subsection "The PROTOTYPES: Keyword"
The \s-1PROTOTYPES:\s0 keyword corresponds to \fBxsubpp\fR's \f(CW\*(C`\-prototypes\*(C'\fR and
\&\f(CW\*(C`\-noprototypes\*(C'\fR options.  This keyword overrides the command line options.
Prototypes are enabled by default.  When prototypes are enabled XSUBs will
be given Perl prototypes.  This keyword may be used multiple times in an \s-1XS\s0
module to enable and disable prototypes for different parts of the module.
.PP
To enable prototypes:
.PP
.Vb 1
\&    PROTOTYPES: ENABLE
.Ve
.PP
To disable prototypes:
.PP
.Vb 1
\&    PROTOTYPES: DISABLE
.Ve
.SS "The \s-1PROTOTYPE:\s0 Keyword"
.IX Subsection "The PROTOTYPE: Keyword"
This keyword is similar to the \s-1PROTOTYPES:\s0 keyword above but can be used to
force \fBxsubpp\fR to use a specific prototype for the \s-1XSUB\s0.  This keyword
overrides all other prototype options and keywords but affects only the
current \s-1XSUB\s0.  Consult \*(L"Prototypes\*(R" in perlsub for information about Perl
prototypes.
.PP
.Vb 10
\&    bool_t
\&    rpcb_gettime(timep, ...)
\&          time_t timep = NO_INIT
\&        PROTOTYPE: $;$
\&        PREINIT:
\&          char *host = "localhost";
\&        CODE:
\&                  if( items > 1 )
\&                       host = (char *)SvPV_nolen(ST(1));
\&                  RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
If the prototypes are enabled, you can disable it locally for a given
\&\s-1XSUB\s0 as in the following example:
.PP
.Vb 4
\&    void
\&    rpcb_gettime_noproto()
\&        PROTOTYPE: DISABLE
\&    ...
.Ve
.SS "The \s-1ALIAS:\s0 Keyword"
.IX Subsection "The ALIAS: Keyword"
The \s-1ALIAS:\s0 keyword allows an \s-1XSUB\s0 to have two or more unique Perl names
and to know which of those names was used when it was invoked.  The Perl
names may be fully-qualified with package names.  Each alias is given an
index.  The compiler will setup a variable called \f(CW\*(C`ix\*(C'\fR which contain the
index of the alias which was used.  When the \s-1XSUB\s0 is called with its
declared name \f(CW\*(C`ix\*(C'\fR will be 0.
.PP
The following example will create aliases \f(CW\*(C`FOO::gettime()\*(C'\fR and
\&\f(CW\*(C`BAR::getit()\*(C'\fR for this function.
.PP
.Vb 11
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        ALIAS:
\&            FOO::gettime = 1
\&            BAR::getit = 2
\&        INIT:
\&          printf("# ix = %d\en", ix );
\&        OUTPUT:
\&          timep
.Ve
.SS "The \s-1OVERLOAD:\s0 Keyword"
.IX Subsection "The OVERLOAD: Keyword"
Instead of writing an overloaded interface using pure Perl, you
can also use the \s-1OVERLOAD\s0 keyword to define additional Perl names
for your functions (like the \s-1ALIAS:\s0 keyword above).  However, the
overloaded functions must be defined with three parameters (except
for the \fInomethod()\fR function which needs four parameters).  If any
function has the \s-1OVERLOAD:\s0 keyword, several additional lines
will be defined in the c file generated by xsubpp in order to
register with the overload magic.
.PP
Since blessed objects are actually stored as \s-1RV\s0's, it is useful
to use the typemap features to preprocess parameters and extract
the actual \s-1SV\s0 stored within the blessed \s-1RV\s0.  See the sample for
T_PTROBJ_SPECIAL below.
.PP
To use the \s-1OVERLOAD:\s0 keyword, create an \s-1XS\s0 function which takes
three input parameters ( or use the c style '...' definition) like
this:
.PP
.Vb 7
\&    SV *
\&    cmp (lobj, robj, swap)
\&    My_Module_obj    lobj
\&    My_Module_obj    robj
\&    IV               swap
\&    OVERLOAD: cmp <=>
\&    { /* function defined here */}
.Ve
.PP
In this case, the function will overload both of the three way
comparison operators.  For all overload operations using non-alpha
characters, you must type the parameter without quoting, separating
multiple overloads with whitespace.  Note that "\*(L" (the stringify
overload) should be entered as \e\*(R"\e" (i.e. escaped).
.SS "The \s-1FALLBACK:\s0 Keyword"
.IX Subsection "The FALLBACK: Keyword"
In addition to the \s-1OVERLOAD\s0 keyword, if you need to control how
Perl autogenerates missing overloaded operators, you can set the
\&\s-1FALLBACK\s0 keyword in the module header section, like this:
.PP
.Vb 1
\&    MODULE = RPC  PACKAGE = RPC
\&
\&    FALLBACK: TRUE
\&    ...
.Ve
.PP
where \s-1FALLBACK\s0 can take any of the three values \s-1TRUE\s0, \s-1FALSE\s0, or
\&\s-1UNDEF\s0.  If you do not set any \s-1FALLBACK\s0 value when using \s-1OVERLOAD\s0,
it defaults to \s-1UNDEF\s0.  \s-1FALLBACK\s0 is not used except when one or
more functions using \s-1OVERLOAD\s0 have been defined.  Please see
\&\*(L"fallback\*(R" in overload for more details.
.SS "The \s-1INTERFACE:\s0 Keyword"
.IX Subsection "The INTERFACE: Keyword"
This keyword declares the current \s-1XSUB\s0 as a keeper of the given
calling signature.  If some text follows this keyword, it is
considered as a list of functions which have this signature, and
should be attached to the current \s-1XSUB\s0.
.PP
For example, if you have 4 C functions \fImultiply()\fR, \fIdivide()\fR, \fIadd()\fR,
\&\fIsubtract()\fR all having the signature:
.PP
.Vb 1
\&    symbolic f(symbolic, symbolic);
.Ve
.PP
you can make them all to use the same \s-1XSUB\s0 using this:
.PP
.Vb 7
\&    symbolic
\&    interface_s_ss(arg1, arg2)
\&        symbolic        arg1
\&        symbolic        arg2
\&    INTERFACE:
\&        multiply divide
\&        add subtract
.Ve
.PP
(This is the complete \s-1XSUB\s0 code for 4 Perl functions!)  Four generated
Perl function share names with corresponding C functions.
.PP
The advantage of this approach comparing to \s-1ALIAS:\s0 keyword is that there
is no need to code a switch statement, each Perl function (which shares
the same \s-1XSUB\s0) knows which C function it should call.  Additionally, one
can attach an extra function \fIremainder()\fR at runtime by using
.PP
.Vb 3
\&    CV *mycv = newXSproto("Symbolic::remainder",
\&                          XS_Symbolic_interface_s_ss, _\|_FILE_\|_, "$$");
\&    XSINTERFACE_FUNC_SET(mycv, remainder);
.Ve
.PP
say, from another \s-1XSUB\s0.  (This example supposes that there was no
\&\s-1INTERFACE_MACRO:\s0 section, otherwise one needs to use something else instead of
\&\f(CW\*(C`XSINTERFACE_FUNC_SET\*(C'\fR, see the next section.)
.SS "The \s-1INTERFACE_MACRO:\s0 Keyword"
.IX Subsection "The INTERFACE_MACRO: Keyword"
This keyword allows one to define an \s-1INTERFACE\s0 using a different way
to extract a function pointer from an \s-1XSUB\s0.  The text which follows
this keyword should give the name of macros which would extract/set a
function pointer.  The extractor macro is given return type, \f(CW\*(C`CV*\*(C'\fR,
and \f(CW\*(C`XSANY.any_dptr\*(C'\fR for this \f(CW\*(C`CV*\*(C'\fR.  The setter macro is given cv,
and the function pointer.
.PP
The default value is \f(CW\*(C`XSINTERFACE_FUNC\*(C'\fR and \f(CW\*(C`XSINTERFACE_FUNC_SET\*(C'\fR.
An \s-1INTERFACE\s0 keyword with an empty list of functions can be omitted if
\&\s-1INTERFACE_MACRO\s0 keyword is used.
.PP
Suppose that in the previous example functions pointers for
\&\fImultiply()\fR, \fIdivide()\fR, \fIadd()\fR, \fIsubtract()\fR are kept in a global C array
\&\f(CW\*(C`fp[]\*(C'\fR with offsets being \f(CW\*(C`multiply_off\*(C'\fR, \f(CW\*(C`divide_off\*(C'\fR, \f(CW\*(C`add_off\*(C'\fR,
\&\f(CW\*(C`subtract_off\*(C'\fR.  Then one can use
.PP
.Vb 4
\&    #define XSINTERFACE_FUNC_BYOFFSET(ret,cv,f) \e
\&        ((XSINTERFACE_CVT_ANON(ret))fp[CvXSUBANY(cv).any_i32])
\&    #define XSINTERFACE_FUNC_BYOFFSET_set(cv,f) \e
\&        CvXSUBANY(cv).any_i32 = CAT2( f, _off )
.Ve
.PP
in C section,
.PP
.Vb 10
\&    symbolic
\&    interface_s_ss(arg1, arg2)
\&        symbolic        arg1
\&        symbolic        arg2
\&      INTERFACE_MACRO:
\&        XSINTERFACE_FUNC_BYOFFSET
\&        XSINTERFACE_FUNC_BYOFFSET_set
\&      INTERFACE:
\&        multiply divide
\&        add subtract
.Ve
.PP
in \s-1XSUB\s0 section.
.SS "The \s-1INCLUDE:\s0 Keyword"
.IX Subsection "The INCLUDE: Keyword"
This keyword can be used to pull other files into the \s-1XS\s0 module.  The other
files may have \s-1XS\s0 code.  \s-1INCLUDE:\s0 can also be used to run a command to
generate the \s-1XS\s0 code to be pulled into the module.
.PP
The file \fIRpcb1.xsh\fR contains our \f(CW\*(C`rpcb_gettime()\*(C'\fR function:
.PP
.Vb 6
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.PP
The \s-1XS\s0 module can use \s-1INCLUDE:\s0 to pull that file into it.
.PP
.Vb 1
\&    INCLUDE: Rpcb1.xsh
.Ve
.PP
If the parameters to the \s-1INCLUDE:\s0 keyword are followed by a pipe (\f(CW\*(C`|\*(C'\fR) then
the compiler will interpret the parameters as a command. This feature is
mildly deprecated in favour of the \f(CW\*(C`INCLUDE_COMMAND:\*(C'\fR directive, as documented
below.
.PP
.Vb 1
\&    INCLUDE: cat Rpcb1.xsh |
.Ve
.PP
Do not use this to run perl: \f(CW\*(C`INCLUDE: perl |\*(C'\fR will run the perl that
happens to be the first in your path and not necessarily the same perl that is
used to run \f(CW\*(C`xsubpp\*(C'\fR. See \*(L"The \s-1INCLUDE_COMMAND:\s0 Keyword\*(R".
.SS "The \s-1INCLUDE_COMMAND:\s0 Keyword"
.IX Subsection "The INCLUDE_COMMAND: Keyword"
Runs the supplied command and includes its output into the current \s-1XS\s0
document. \f(CW\*(C`INCLUDE_COMMAND\*(C'\fR assigns special meaning to the \f(CW$^X\fR token
in that it runs the same perl interpreter that is running \f(CW\*(C`xsubpp\*(C'\fR:
.PP
.Vb 1
\&    INCLUDE_COMMAND: cat Rpcb1.xsh
\&
\&    INCLUDE_COMMAND: $^X \-e ...
.Ve
.SS "The \s-1CASE:\s0 Keyword"
.IX Subsection "The CASE: Keyword"
The \s-1CASE:\s0 keyword allows an \s-1XSUB\s0 to have multiple distinct parts with each
part acting as a virtual \s-1XSUB\s0.  \s-1CASE:\s0 is greedy and if it is used then all
other \s-1XS\s0 keywords must be contained within a \s-1CASE:\s0.  This means nothing may
precede the first \s-1CASE:\s0 in the \s-1XSUB\s0 and anything following the last \s-1CASE:\s0 is
included in that case.
.PP
A \s-1CASE:\s0 might switch via a parameter of the \s-1XSUB\s0, via the \f(CW\*(C`ix\*(C'\fR \s-1ALIAS:\s0
variable (see \*(L"The \s-1ALIAS:\s0 Keyword\*(R"), or maybe via the \f(CW\*(C`items\*(C'\fR variable
(see \*(L"Variable-length Parameter Lists\*(R").  The last \s-1CASE:\s0 becomes the
\&\fBdefault\fR case if it is not associated with a conditional.  The following
example shows \s-1CASE\s0 switched via \f(CW\*(C`ix\*(C'\fR with a function \f(CW\*(C`rpcb_gettime()\*(C'\fR
having an alias \f(CW\*(C`x_gettime()\*(C'\fR.  When the function is called as
\&\f(CW\*(C`rpcb_gettime()\*(C'\fR its parameters are the usual \f(CW\*(C`(char *host, time_t *timep)\*(C'\fR,
but when the function is called as \f(CW\*(C`x_gettime()\*(C'\fR its parameters are
reversed, \f(CW\*(C`(time_t *timep, char *host)\*(C'\fR.
.PP
.Vb 10
\&    long
\&    rpcb_gettime(a,b)
\&      CASE: ix == 1
\&        ALIAS:
\&          x_gettime = 1
\&        INPUT:
\&          # \*(Aqa\*(Aq is timep, \*(Aqb\*(Aq is host
\&          char *b
\&          time_t a = NO_INIT
\&        CODE:
\&               RETVAL = rpcb_gettime( b, &a );
\&        OUTPUT:
\&          a
\&          RETVAL
\&      CASE:
\&          # \*(Aqa\*(Aq is host, \*(Aqb\*(Aq is timep
\&          char *a
\&          time_t &b = NO_INIT
\&        OUTPUT:
\&          b
\&          RETVAL
.Ve
.PP
That function can be called with either of the following statements.  Note
the different argument lists.
.PP
.Vb 1
\&        $status = rpcb_gettime( $host, $timep );
\&
\&        $status = x_gettime( $timep, $host );
.Ve
.SS "The \s-1EXPORT_XSUB_SYMBOLS:\s0 Keyword"
.IX Subsection "The EXPORT_XSUB_SYMBOLS: Keyword"
The \s-1EXPORT_XSUB_SYMBOLS:\s0 keyword is likely something you will never need.
In perl versions earlier than 5.16.0, this keyword does nothing. Starting
with 5.16, \s-1XSUB\s0 symbols are no longer exported by default. That is, they
are \f(CW\*(C`static\*(C'\fR functions. If you include
.PP
.Vb 1
\&  EXPORT_XSUB_SYMBOLS: ENABLE
.Ve
.PP
in your \s-1XS\s0 code, the XSUBs following this line will not be declared \f(CW\*(C`static\*(C'\fR.
You can later disable this with
.PP
.Vb 1
\&  EXPORT_XSUB_SYMBOLS: DISABLE
.Ve
.PP
which, again, is the default that you should probably never change.
You cannot use this keyword on versions of perl before 5.16 to make
XSUBs \f(CW\*(C`static\*(C'\fR.
.SS "The & Unary Operator"
.IX Subsection "The & Unary Operator"
The \f(CW\*(C`&\*(C'\fR unary operator in the \s-1INPUT:\s0 section is used to tell \fBxsubpp\fR
that it should convert a Perl value to/from C using the C type to the left
of \f(CW\*(C`&\*(C'\fR, but provide a pointer to this value when the C function is called.
.PP
This is useful to avoid a \s-1CODE:\s0 block for a C function which takes a parameter
by reference.  Typically, the parameter should be not a pointer type (an
\&\f(CW\*(C`int\*(C'\fR or \f(CW\*(C`long\*(C'\fR but not an \f(CW\*(C`int*\*(C'\fR or \f(CW\*(C`long*\*(C'\fR).
.PP
The following \s-1XSUB\s0 will generate incorrect C code.  The \fBxsubpp\fR compiler will
turn this into code which calls \f(CW\*(C`rpcb_gettime()\*(C'\fR with parameters \f(CW\*(C`(char
*host, time_t timep)\*(C'\fR, but the real \f(CW\*(C`rpcb_gettime()\*(C'\fR wants the \f(CW\*(C`timep\*(C'\fR
parameter to be of type \f(CW\*(C`time_t*\*(C'\fR rather than \f(CW\*(C`time_t\*(C'\fR.
.PP
.Vb 6
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t timep
\&        OUTPUT:
\&          timep
.Ve
.PP
That problem is corrected by using the \f(CW\*(C`&\*(C'\fR operator.  The \fBxsubpp\fR compiler
will now turn this into code which calls \f(CW\*(C`rpcb_gettime()\*(C'\fR correctly with
parameters \f(CW\*(C`(char *host, time_t *timep)\*(C'\fR.  It does this by carrying the
\&\f(CW\*(C`&\*(C'\fR through, so the function call looks like \f(CW\*(C`rpcb_gettime(host, &timep)\*(C'\fR.
.PP
.Vb 6
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.SS "Inserting \s-1POD\s0, Comments and C Preprocessor Directives"
.IX Subsection "Inserting POD, Comments and C Preprocessor Directives"
C preprocessor directives are allowed within \s-1BOOT:\s0, \s-1PREINIT:\s0 \s-1INIT:\s0, \s-1CODE:\s0,
\&\s-1PPCODE:\s0, \s-1POSTCALL:\s0, and \s-1CLEANUP:\s0 blocks, as well as outside the functions.
Comments are allowed anywhere after the \s-1MODULE\s0 keyword.  The compiler will
pass the preprocessor directives through untouched and will remove the
commented lines. \s-1POD\s0 documentation is allowed at any point, both in the
C and \s-1XS\s0 language sections. \s-1POD\s0 must be terminated with a \f(CW\*(C`=cut\*(C'\fR command;
\&\f(CW\*(C`xsubpp\*(C'\fR will exit with an error if it does not. It is very unlikely that
human generated C code will be mistaken for \s-1POD\s0, as most indenting styles
result in whitespace in front of any line starting with \f(CW\*(C`=\*(C'\fR. Machine
generated \s-1XS\s0 files may fall into this trap unless care is taken to
ensure that a space breaks the sequence \*(L"\en=\*(R".
.PP
Comments can be added to XSUBs by placing a \f(CW\*(C`#\*(C'\fR as the first
non-whitespace of a line.  Care should be taken to avoid making the
comment look like a C preprocessor directive, lest it be interpreted as
such.  The simplest way to prevent this is to put whitespace in front of
the \f(CW\*(C`#\*(C'\fR.
.PP
If you use preprocessor directives to choose one of two
versions of a function, use
.PP
.Vb 3
\&    #if ... version1
\&    #else /* ... version2  */
\&    #endif
.Ve
.PP
and not
.PP
.Vb 4
\&    #if ... version1
\&    #endif
\&    #if ... version2
\&    #endif
.Ve
.PP
because otherwise \fBxsubpp\fR will believe that you made a duplicate
definition of the function.  Also, put a blank line before the
#else/#endif so it will not be seen as part of the function body.
.SS "Using \s-1XS\s0 With \*(C+"
.IX Subsection "Using XS With "
If an \s-1XSUB\s0 name contains \f(CW\*(C`::\*(C'\fR, it is considered to be a \*(C+ method.
The generated Perl function will assume that
its first argument is an object pointer.  The object pointer
will be stored in a variable called \s-1THIS\s0.  The object should
have been created by \*(C+ with the \fInew()\fR function and should
be blessed by Perl with the \fIsv_setref_pv()\fR macro.  The
blessing of the object by Perl can be handled by a typemap.  An example
typemap is shown at the end of this section.
.PP
If the return type of the \s-1XSUB\s0 includes \f(CW\*(C`static\*(C'\fR, the method is considered
to be a static method.  It will call the \*(C+
function using the \fIclass::method()\fR syntax.  If the method is not static
the function will be called using the \s-1THIS\-\s0>\fImethod()\fR syntax.
.PP
The next examples will use the following \*(C+ class.
.PP
.Vb 6
\&     class color {
\&          public:
\&          color();
\&          ~color();
\&          int blue();
\&          void set_blue( int );
\&
\&          private:
\&          int c_blue;
\&     };
.Ve
.PP
The XSUBs for the \fIblue()\fR and \fIset_blue()\fR methods are defined with the class
name but the parameter for the object (\s-1THIS\s0, or \*(L"self\*(R") is implicit and is
not listed.
.PP
.Vb 2
\&     int
\&     color::blue()
\&
\&     void
\&     color::set_blue( val )
\&          int val
.Ve
.PP
Both Perl functions will expect an object as the first parameter.  In the
generated \*(C+ code the object is called \f(CW\*(C`THIS\*(C'\fR, and the method call will
be performed on this object.  So in the \*(C+ code the \fIblue()\fR and \fIset_blue()\fR
methods will be called as this:
.PP
.Vb 1
\&     RETVAL = THIS\->blue();
\&
\&     THIS\->set_blue( val );
.Ve
.PP
You could also write a single get/set method using an optional argument:
.PP
.Vb 10
\&     int
\&     color::blue( val = NO_INIT )
\&         int val
\&         PROTOTYPE $;$
\&         CODE:
\&             if (items > 1)
\&                 THIS\->set_blue( val );
\&             RETVAL = THIS\->blue();
\&         OUTPUT:
\&             RETVAL
.Ve
.PP
If the function's name is \fB\s-1DESTROY\s0\fR then the \*(C+ \f(CW\*(C`delete\*(C'\fR function will be
called and \f(CW\*(C`THIS\*(C'\fR will be given as its parameter.  The generated \*(C+ code for
.PP
.Vb 2
\&     void
\&     color::DESTROY()
.Ve
.PP
will look like this:
.PP
.Vb 1
\&     color *THIS = ...; // Initialized as in typemap
\&
\&     delete THIS;
.Ve
.PP
If the function's name is \fBnew\fR then the \*(C+ \f(CW\*(C`new\*(C'\fR function will be called
to create a dynamic \*(C+ object.  The \s-1XSUB\s0 will expect the class name, which
will be kept in a variable called \f(CW\*(C`CLASS\*(C'\fR, to be given as the first
argument.
.PP
.Vb 2
\&     color *
\&     color::new()
.Ve
.PP
The generated \*(C+ code will call \f(CW\*(C`new\*(C'\fR.
.PP
.Vb 1
\&     RETVAL = new color();
.Ve
.PP
The following is an example of a typemap that could be used for this \*(C+
example.
.PP
.Vb 2
\&    TYPEMAP
\&    color *             O_OBJECT
\&
\&    OUTPUT
\&    # The Perl object is blessed into \*(AqCLASS\*(Aq, which should be a
\&    # char* having the name of the package for the blessing.
\&    O_OBJECT
\&        sv_setref_pv( $arg, CLASS, (void*)$var );
\&
\&    INPUT
\&    O_OBJECT
\&        if( sv_isobject($arg) && (SvTYPE(SvRV($arg)) == SVt_PVMG) )
\&                $var = ($type)SvIV((SV*)SvRV( $arg ));
\&        else{
\&                warn( \e"${Package}::$func_name() \-\- $var is not a blessed SV reference\e" );
\&                XSRETURN_UNDEF;
\&        }
.Ve
.SS "Interface Strategy"
.IX Subsection "Interface Strategy"
When designing an interface between Perl and a C library a straight
translation from C to \s-1XS\s0 (such as created by \f(CW\*(C`h2xs \-x\*(C'\fR) is often sufficient.
However, sometimes the interface will look
very C\-like and occasionally nonintuitive, especially when the C function
modifies one of its parameters, or returns failure inband (as in \*(L"negative
return values mean failure\*(R").  In cases where the programmer wishes to
create a more Perl-like interface the following strategy may help to
identify the more critical parts of the interface.
.PP
Identify the C functions with input/output or output parameters.  The XSUBs for
these functions may be able to return lists to Perl.
.PP
Identify the C functions which use some inband info as an indication
of failure.  They may be
candidates to return undef or an empty list in case of failure.  If the
failure may be detected without a call to the C function, you may want to use
an \s-1INIT:\s0 section to report the failure.  For failures detectable after the C
function returns one may want to use a \s-1POSTCALL:\s0 section to process the
failure.  In more complicated cases use \s-1CODE:\s0 or \s-1PPCODE:\s0 sections.
.PP
If many functions use the same failure indication based on the return value,
you may want to create a special typedef to handle this situation.  Put
.PP
.Vb 1
\&  typedef int negative_is_failure;
.Ve
.PP
near the beginning of \s-1XS\s0 file, and create an \s-1OUTPUT\s0 typemap entry
for \f(CW\*(C`negative_is_failure\*(C'\fR which converts negative values to \f(CW\*(C`undef\*(C'\fR, or
maybe \fIcroak()\fRs.  After this the return value of type \f(CW\*(C`negative_is_failure\*(C'\fR
will create more Perl-like interface.
.PP
Identify which values are used by only the C and \s-1XSUB\s0 functions
themselves, say, when a parameter to a function should be a contents of a
global variable.  If Perl does not need to access the contents of the value
then it may not be necessary to provide a translation for that value
from C to Perl.
.PP
Identify the pointers in the C function parameter lists and return
values.  Some pointers may be used to implement input/output or
output parameters, they can be handled in \s-1XS\s0 with the \f(CW\*(C`&\*(C'\fR unary operator,
and, possibly, using the \s-1NO_INIT\s0 keyword.
Some others will require handling of types like \f(CW\*(C`int *\*(C'\fR, and one needs
to decide what a useful Perl translation will do in such a case.  When
the semantic is clear, it is advisable to put the translation into a typemap
file.
.PP
Identify the structures used by the C functions.  In many
cases it may be helpful to use the T_PTROBJ typemap for
these structures so they can be manipulated by Perl as
blessed objects.  (This is handled automatically by \f(CW\*(C`h2xs \-x\*(C'\fR.)
.PP
If the same C type is used in several different contexts which require
different translations, \f(CW\*(C`typedef\*(C'\fR several new types mapped to this C type,
and create separate \fItypemap\fR entries for these new types.  Use these
types in declarations of return type and parameters to XSUBs.
.SS "Perl Objects And C Structures"
.IX Subsection "Perl Objects And C Structures"
When dealing with C structures one should select either
\&\fBT_PTROBJ\fR or \fBT_PTRREF\fR for the \s-1XS\s0 type.  Both types are
designed to handle pointers to complex objects.  The
T_PTRREF type will allow the Perl object to be unblessed
while the T_PTROBJ type requires that the object be blessed.
By using T_PTROBJ one can achieve a form of type-checking
because the \s-1XSUB\s0 will attempt to verify that the Perl object
is of the expected type.
.PP
The following \s-1XS\s0 code shows the \fIgetnetconfigent()\fR function which is used
with \s-1ONC+\s0 \s-1TIRPC\s0.  The \fIgetnetconfigent()\fR function will return a pointer to a
C structure and has the C prototype shown below.  The example will
demonstrate how the C pointer will become a Perl reference.  Perl will
consider this reference to be a pointer to a blessed object and will
attempt to call a destructor for the object.  A destructor will be
provided in the \s-1XS\s0 source to free the memory used by \fIgetnetconfigent()\fR.
Destructors in \s-1XS\s0 can be created by specifying an \s-1XSUB\s0 function whose name
ends with the word \fB\s-1DESTROY\s0\fR.  \s-1XS\s0 destructors can be used to free memory
which may have been malloc'd by another \s-1XSUB\s0.
.PP
.Vb 1
\&     struct netconfig *getnetconfigent(const char *netid);
.Ve
.PP
A \f(CW\*(C`typedef\*(C'\fR will be created for \f(CW\*(C`struct netconfig\*(C'\fR.  The Perl
object will be blessed in a class matching the name of the C
type, with the tag \f(CW\*(C`Ptr\*(C'\fR appended, and the name should not
have embedded spaces if it will be a Perl package name.  The
destructor will be placed in a class corresponding to the
class of the object and the \s-1PREFIX\s0 keyword will be used to
trim the name to the word \s-1DESTROY\s0 as Perl will expect.
.PP
.Vb 1
\&     typedef struct netconfig Netconfig;
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     Netconfig *
\&     getnetconfigent(netid)
\&          char *netid
\&
\&     MODULE = RPC  PACKAGE = NetconfigPtr  PREFIX = rpcb_
\&
\&     void
\&     rpcb_DESTROY(netconf)
\&          Netconfig *netconf
\&        CODE:
\&          printf("Now in NetconfigPtr::DESTROY\en");
\&          free( netconf );
.Ve
.PP
This example requires the following typemap entry.  Consult
perlxstypemap for more information about adding new typemaps
for an extension.
.PP
.Vb 2
\&     TYPEMAP
\&     Netconfig *  T_PTROBJ
.Ve
.PP
This example will be used with the following Perl statements.
.PP
.Vb 2
\&     use RPC;
\&     $netconf = getnetconfigent("udp");
.Ve
.PP
When Perl destroys the object referenced by \f(CW$netconf\fR it will send the
object to the supplied \s-1XSUB\s0 \s-1DESTROY\s0 function.  Perl cannot determine, and
does not care, that this object is a C struct and not a Perl object.  In
this sense, there is no difference between the object created by the
\&\fIgetnetconfigent()\fR \s-1XSUB\s0 and an object created by a normal Perl subroutine.
.SS "Safely Storing Static Data in \s-1XS\s0"
.IX Subsection "Safely Storing Static Data in XS"
Starting with Perl 5.8, a macro framework has been defined to allow
static data to be safely stored in \s-1XS\s0 modules that will be accessed from
a multi-threaded Perl.
.PP
Although primarily designed for use with multi-threaded Perl, the macros
have been designed so that they will work with non-threaded Perl as well.
.PP
It is therefore strongly recommended that these macros be used by all
\&\s-1XS\s0 modules that make use of static data.
.PP
The easiest way to get a template set of macros to use is by specifying
the \f(CW\*(C`\-g\*(C'\fR (\f(CW\*(C`\-\-global\*(C'\fR) option with h2xs (see h2xs).
.PP
Below is an example module that makes use of the macros.
.PP
.Vb 3
\&    #include "EXTERN.h"
\&    #include "perl.h"
\&    #include "XSUB.h"
\&
\&    /* Global Data */
\&
\&    #define MY_CXT_KEY "BlindMice::_guts" XS_VERSION
\&
\&    typedef struct {
\&        int count;
\&        char name[3][100];
\&    } my_cxt_t;
\&
\&    START_MY_CXT
\&
\&    MODULE = BlindMice           PACKAGE = BlindMice
\&
\&    BOOT:
\&    {
\&        MY_CXT_INIT;
\&        MY_CXT.count = 0;
\&        strcpy(MY_CXT.name[0], "None");
\&        strcpy(MY_CXT.name[1], "None");
\&        strcpy(MY_CXT.name[2], "None");
\&    }
\&
\&    int
\&    newMouse(char * name)
\&        char * name;
\&        PREINIT:
\&          dMY_CXT;
\&        CODE:
\&          if (MY_CXT.count >= 3) {
\&              warn("Already have 3 blind mice");
\&              RETVAL = 0;
\&          }
\&          else {
\&              RETVAL = ++ MY_CXT.count;
\&              strcpy(MY_CXT.name[MY_CXT.count \- 1], name);
\&          }
\&
\&    char *
\&    get_mouse_name(index)
\&      int index
\&      CODE:
\&        dMY_CXT;
\&        RETVAL = MY_CXT.lives ++;
\&        if (index > MY_CXT.count)
\&          croak("There are only 3 blind mice.");
\&        else
\&          RETVAL = newSVpv(MY_CXT.name[index \- 1]);
\&
\&    void
\&    CLONE(...)
\&        CODE:
\&        MY_CXT_CLONE;
.Ve
.PP
\&\fB\s-1REFERENCE\s0\fR
.IP "\s-1MY_CXT_KEY\s0" 5
.IX Item "MY_CXT_KEY"
This macro is used to define a unique key to refer to the static data
for an \s-1XS\s0 module. The suggested naming scheme, as used by h2xs, is to
use a string that consists of the module name, the string \*(L"::_guts\*(R"
and the module version number.
.Sp
.Vb 1
\&    #define MY_CXT_KEY "MyModule::_guts" XS_VERSION
.Ve
.IP "typedef my_cxt_t" 5
.IX Item "typedef my_cxt_t"
This struct typedef \fImust\fR always be called \f(CW\*(C`my_cxt_t\*(C'\fR. The other
\&\f(CW\*(C`CXT*\*(C'\fR macros assume the existence of the \f(CW\*(C`my_cxt_t\*(C'\fR typedef name.
.Sp
Declare a typedef named \f(CW\*(C`my_cxt_t\*(C'\fR that is a structure that contains
all the data that needs to be interpreter-local.
.Sp
.Vb 3
\&    typedef struct {
\&        int some_value;
\&    } my_cxt_t;
.Ve
.IP "\s-1START_MY_CXT\s0" 5
.IX Item "START_MY_CXT"
Always place the \s-1START_MY_CXT\s0 macro directly after the declaration
of \f(CW\*(C`my_cxt_t\*(C'\fR.
.IP "\s-1MY_CXT_INIT\s0" 5
.IX Item "MY_CXT_INIT"
The \s-1MY_CXT_INIT\s0 macro initialises storage for the \f(CW\*(C`my_cxt_t\*(C'\fR struct.
.Sp
It \fImust\fR be called exactly once, typically in a \s-1BOOT:\s0 section. If you
are maintaining multiple interpreters, it should be called once in each
interpreter instance, except for interpreters cloned from existing ones.
(But see \*(L"\s-1MY_CXT_CLONE\s0\*(R" below.)
.IP "dMY_CXT" 5
.IX Item "dMY_CXT"
Use the dMY_CXT macro (a declaration) in all the functions that access
\&\s-1MY_CXT\s0.
.IP "\s-1MY_CXT\s0" 5
.IX Item "MY_CXT"
Use the \s-1MY_CXT\s0 macro to access members of the \f(CW\*(C`my_cxt_t\*(C'\fR struct. For
example, if \f(CW\*(C`my_cxt_t\*(C'\fR is
.Sp
.Vb 3
\&    typedef struct {
\&        int index;
\&    } my_cxt_t;
.Ve
.Sp
then use this to access the \f(CW\*(C`index\*(C'\fR member
.Sp
.Vb 2
\&    dMY_CXT;
\&    MY_CXT.index = 2;
.Ve
.IP "aMY_CXT/pMY_CXT" 5
.IX Item "aMY_CXT/pMY_CXT"
\&\f(CW\*(C`dMY_CXT\*(C'\fR may be quite expensive to calculate, and to avoid the overhead
of invoking it in each function it is possible to pass the declaration
onto other functions using the \f(CW\*(C`aMY_CXT\*(C'\fR/\f(CW\*(C`pMY_CXT\*(C'\fR macros, eg
.Sp
.Vb 5
\&    void sub1() {
\&        dMY_CXT;
\&        MY_CXT.index = 1;
\&        sub2(aMY_CXT);
\&    }
\&
\&    void sub2(pMY_CXT) {
\&        MY_CXT.index = 2;
\&    }
.Ve
.Sp
Analogously to \f(CW\*(C`pTHX\*(C'\fR, there are equivalent forms for when the macro is the
first or last in multiple arguments, where an underscore represents a
comma, i.e.  \f(CW\*(C`_aMY_CXT\*(C'\fR, \f(CW\*(C`aMY_CXT_\*(C'\fR, \f(CW\*(C`_pMY_CXT\*(C'\fR and \f(CW\*(C`pMY_CXT_\*(C'\fR.
.IP "\s-1MY_CXT_CLONE\s0" 5
.IX Item "MY_CXT_CLONE"
By default, when a new interpreter is created as a copy of an existing one
(eg via \f(CW\*(C`threads\->create()\*(C'\fR), both interpreters share the same physical
my_cxt_t structure. Calling \f(CW\*(C`MY_CXT_CLONE\*(C'\fR (typically via the package's
\&\f(CW\*(C`CLONE()\*(C'\fR function), causes a byte-for-byte copy of the structure to be
taken, and any future dMY_CXT will cause the copy to be accessed instead.
.IP "\s-1MY_CXT_INIT_INTERP\s0(my_perl)" 5
.IX Item "MY_CXT_INIT_INTERP(my_perl)"
.PD 0
.IP "dMY_CXT_INTERP(my_perl)" 5
.IX Item "dMY_CXT_INTERP(my_perl)"
.PD
These are versions of the macros which take an explicit interpreter as an
argument.
.PP
Note that these macros will only work together within the \fIsame\fR source
file; that is, a dMY_CTX in one source file will access a different structure
than a dMY_CTX in another source file.
.SS "Thread-aware system interfaces"
.IX Subsection "Thread-aware system interfaces"
Starting from Perl 5.8, in C/\*(C+ level Perl knows how to wrap
system/library interfaces that have thread-aware versions
(e.g. \fIgetpwent_r()\fR) into frontend macros (e.g. \fIgetpwent()\fR) that
correctly handle the multithreaded interaction with the Perl
interpreter.  This will happen transparently, the only thing
you need to do is to instantiate a Perl interpreter.
.PP
This wrapping happens always when compiling Perl core source
(\s-1PERL_CORE\s0 is defined) or the Perl core extensions (\s-1PERL_EXT\s0 is
defined).  When compiling \s-1XS\s0 code outside of Perl core the wrapping
does not take place.  Note, however, that intermixing the _r\-forms
(as Perl compiled for multithreaded operation will do) and the _r\-less
forms is neither well-defined (inconsistent results, data corruption,
or even crashes become more likely), nor is it very portable.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
File \f(CW\*(C`RPC.xs\*(C'\fR: Interface to some \s-1ONC+\s0 \s-1RPC\s0 bind library functions.
.PP
.Vb 3
\&     #include "EXTERN.h"
\&     #include "perl.h"
\&     #include "XSUB.h"
\&
\&     #include <rpc/rpc.h>
\&
\&     typedef struct netconfig Netconfig;
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     SV *
\&     rpcb_gettime(host="localhost")
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&        CODE:
\&          ST(0) = sv_newmortal();
\&          if( rpcb_gettime( host, &timep ) )
\&               sv_setnv( ST(0), (double)timep );
\&
\&     Netconfig *
\&     getnetconfigent(netid="udp")
\&          char *netid
\&
\&     MODULE = RPC  PACKAGE = NetconfigPtr  PREFIX = rpcb_
\&
\&     void
\&     rpcb_DESTROY(netconf)
\&          Netconfig *netconf
\&        CODE:
\&          printf("NetconfigPtr::DESTROY\en");
\&          free( netconf );
.Ve
.PP
File \f(CW\*(C`typemap\*(C'\fR: Custom typemap for \s-1RPC\s0.xs. (cf. perlxstypemap)
.PP
.Vb 2
\&     TYPEMAP
\&     Netconfig *  T_PTROBJ
.Ve
.PP
File \f(CW\*(C`RPC.pm\*(C'\fR: Perl module for the \s-1RPC\s0 extension.
.PP
.Vb 1
\&     package RPC;
\&
\&     require Exporter;
\&     require DynaLoader;
\&     @ISA = qw(Exporter DynaLoader);
\&     @EXPORT = qw(rpcb_gettime getnetconfigent);
\&
\&     bootstrap RPC;
\&     1;
.Ve
.PP
File \f(CW\*(C`rpctest.pl\*(C'\fR: Perl test program for the \s-1RPC\s0 extension.
.PP
.Vb 1
\&     use RPC;
\&
\&     $netconf = getnetconfigent();
\&     $a = rpcb_gettime();
\&     print "time = $a\en";
\&     print "netconf = $netconf\en";
\&
\&     $netconf = getnetconfigent("tcp");
\&     $a = rpcb_gettime("poplar");
\&     print "time = $a\en";
\&     print "netconf = $netconf\en";
.Ve
.SH "XS VERSION"
.IX Header "XS VERSION"
This document covers features supported by \f(CW\*(C`ExtUtils::ParseXS\*(C'\fR
(also known as \f(CW\*(C`xsubpp\*(C'\fR) 3.13_01.
.SH "AUTHOR"
.IX Header "AUTHOR"
Originally written by Dean Roehrich <\fIroehrich@cray.com\fR>.
.PP
Maintained since 1996 by The Perl Porters <\fIperlbug@perl.org\fR>.
                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlxs5.18.1                                 0100644 0001750 0001750 00000262560 12566207450 022603  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLXS 1"
.TH PERLXS 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlxs \- XS language reference manual
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SS "Introduction"
.IX Subsection "Introduction"
\&\s-1XS\s0 is an interface description file format used to create an extension
interface between Perl and C code (or a C library) which one wishes
to use with Perl.  The \s-1XS\s0 interface is combined with the library to
create a new library which can then be either dynamically loaded
or statically linked into perl.  The \s-1XS\s0 interface description is
written in the \s-1XS\s0 language and is the core component of the Perl
extension interface.
.PP
An \fB\s-1XSUB\s0\fR forms the basic unit of the \s-1XS\s0 interface.  After compilation
by the \fBxsubpp\fR compiler, each \s-1XSUB\s0 amounts to a C function definition
which will provide the glue between Perl calling conventions and C
calling conventions.
.PP
The glue code pulls the arguments from the Perl stack, converts these
Perl values to the formats expected by a C function, call this C function,
transfers the return values of the C function back to Perl.
Return values here may be a conventional C return value or any C
function arguments that may serve as output parameters.  These return
values may be passed back to Perl either by putting them on the
Perl stack, or by modifying the arguments supplied from the Perl side.
.PP
The above is a somewhat simplified view of what really happens.  Since
Perl allows more flexible calling conventions than C, XSUBs may do much
more in practice, such as checking input parameters for validity,
throwing exceptions (or returning undef/empty list) if the return value
from the C function indicates failure, calling different C functions
based on numbers and types of the arguments, providing an object-oriented
interface, etc.
.PP
Of course, one could write such glue code directly in C.  However, this
would be a tedious task, especially if one needs to write glue for
multiple C functions, and/or one is not familiar enough with the Perl
stack discipline and other such arcana.  \s-1XS\s0 comes to the rescue here:
instead of writing this glue C code in long-hand, one can write
a more concise short-hand \fIdescription\fR of what should be done by
the glue, and let the \s-1XS\s0 compiler \fBxsubpp\fR handle the rest.
.PP
The \s-1XS\s0 language allows one to describe the mapping between how the C
routine is used, and how the corresponding Perl routine is used.  It
also allows creation of Perl routines which are directly translated to
C code and which are not related to a pre-existing C function.  In cases
when the C interface coincides with the Perl interface, the \s-1XSUB\s0
declaration is almost identical to a declaration of a C function (in K&R
style).  In such circumstances, there is another tool called \f(CW\*(C`h2xs\*(C'\fR
that is able to translate an entire C header file into a corresponding
\&\s-1XS\s0 file that will provide glue to the functions/macros described in
the header file.
.PP
The \s-1XS\s0 compiler is called \fBxsubpp\fR.  This compiler creates
the constructs necessary to let an \s-1XSUB\s0 manipulate Perl values, and
creates the glue necessary to let Perl call the \s-1XSUB. \s0 The compiler
uses \fBtypemaps\fR to determine how to map C function parameters
and output values to Perl values and back.  The default typemap
(which comes with Perl) handles many common C types.  A supplementary
typemap may also be needed to handle any special structures and types
for the library being linked. For more information on typemaps,
see perlxstypemap.
.PP
A file in \s-1XS\s0 format starts with a C language section which goes until the
first \f(CW\*(C`MODULE =\*(C'\fR directive.  Other \s-1XS\s0 directives and \s-1XSUB\s0 definitions
may follow this line.  The \*(L"language\*(R" used in this part of the file
is usually referred to as the \s-1XS\s0 language.  \fBxsubpp\fR recognizes and
skips \s-1POD \s0(see perlpod) in both the C and \s-1XS\s0 language sections, which
allows the \s-1XS\s0 file to contain embedded documentation.
.PP
See perlxstut for a tutorial on the whole extension creation process.
.PP
Note: For some extensions, Dave Beazley's \s-1SWIG\s0 system may provide a
significantly more convenient mechanism for creating the extension
glue code.  See <http://www.swig.org/> for more information.
.SS "On The Road"
.IX Subsection "On The Road"
Many of the examples which follow will concentrate on creating an interface
between Perl and the \s-1ONC+ RPC\s0 bind library functions.  The \fIrpcb_gettime()\fR
function is used to demonstrate many features of the \s-1XS\s0 language.  This
function has two parameters; the first is an input parameter and the second
is an output parameter.  The function also returns a status value.
.PP
.Vb 1
\&        bool_t rpcb_gettime(const char *host, time_t *timep);
.Ve
.PP
From C this function will be called with the following
statements.
.PP
.Vb 4
\&     #include <rpc/rpc.h>
\&     bool_t status;
\&     time_t timep;
\&     status = rpcb_gettime( "localhost", &timep );
.Ve
.PP
If an \s-1XSUB\s0 is created to offer a direct translation between this function
and Perl, then this \s-1XSUB\s0 will be used from Perl with the following code.
The \f(CW$status\fR and \f(CW$timep\fR variables will contain the output of the function.
.PP
.Vb 2
\&     use RPC;
\&     $status = rpcb_gettime( "localhost", $timep );
.Ve
.PP
The following \s-1XS\s0 file shows an \s-1XS\s0 subroutine, or \s-1XSUB,\s0 which
demonstrates one possible interface to the \fIrpcb_gettime()\fR
function.  This \s-1XSUB\s0 represents a direct translation between
C and Perl and so preserves the interface even from Perl.
This \s-1XSUB\s0 will be invoked from Perl with the usage shown
above.  Note that the first three #include statements, for
\&\f(CW\*(C`EXTERN.h\*(C'\fR, \f(CW\*(C`perl.h\*(C'\fR, and \f(CW\*(C`XSUB.h\*(C'\fR, will always be present at the
beginning of an \s-1XS\s0 file.  This approach and others will be
expanded later in this document.
.PP
.Vb 4
\&     #include "EXTERN.h"
\&     #include "perl.h"
\&     #include "XSUB.h"
\&     #include <rpc/rpc.h>
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.PP
Any extension to Perl, including those containing XSUBs,
should have a Perl module to serve as the bootstrap which
pulls the extension into Perl.  This module will export the
extension's functions and variables to the Perl program and
will cause the extension's XSUBs to be linked into Perl.
The following module will be used for most of the examples
in this document and should be used from Perl with the \f(CW\*(C`use\*(C'\fR
command as shown earlier.  Perl modules are explained in
more detail later in this document.
.PP
.Vb 1
\&     package RPC;
\&
\&     require Exporter;
\&     require DynaLoader;
\&     @ISA = qw(Exporter DynaLoader);
\&     @EXPORT = qw( rpcb_gettime );
\&
\&     bootstrap RPC;
\&     1;
.Ve
.PP
Throughout this document a variety of interfaces to the \fIrpcb_gettime()\fR
\&\s-1XSUB\s0 will be explored.  The XSUBs will take their parameters in different
orders or will take different numbers of parameters.  In each case the
\&\s-1XSUB\s0 is an abstraction between Perl and the real C \fIrpcb_gettime()\fR
function, and the \s-1XSUB\s0 must always ensure that the real \fIrpcb_gettime()\fR
function is called with the correct parameters.  This abstraction will
allow the programmer to create a more Perl-like interface to the C
function.
.SS "The Anatomy of an \s-1XSUB\s0"
.IX Subsection "The Anatomy of an XSUB"
The simplest XSUBs consist of 3 parts: a description of the return
value, the name of the \s-1XSUB\s0 routine and the names of its arguments,
and a description of types or formats of the arguments.
.PP
The following \s-1XSUB\s0 allows a Perl program to access a C library function
called \fIsin()\fR.  The \s-1XSUB\s0 will imitate the C function which takes a single
argument and returns a single value.
.PP
.Vb 3
\&     double
\&     sin(x)
\&       double x
.Ve
.PP
Optionally, one can merge the description of types and the list of
argument names, rewriting this as
.PP
.Vb 2
\&     double
\&     sin(double x)
.Ve
.PP
This makes this \s-1XSUB\s0 look similar to an \s-1ANSI C\s0 declaration.  An optional
semicolon is allowed after the argument list, as in
.PP
.Vb 2
\&     double
\&     sin(double x);
.Ve
.PP
Parameters with C pointer types can have different semantic: C functions
with similar declarations
.PP
.Vb 2
\&     bool string_looks_as_a_number(char *s);
\&     bool make_char_uppercase(char *c);
.Ve
.PP
are used in absolutely incompatible manner.  Parameters to these functions
could be described \fBxsubpp\fR like this:
.PP
.Vb 2
\&     char *  s
\&     char    &c
.Ve
.PP
Both these \s-1XS\s0 declarations correspond to the \f(CW\*(C`char*\*(C'\fR C type, but they have
different semantics, see \*(L"The & Unary Operator\*(R".
.PP
It is convenient to think that the indirection operator
\&\f(CW\*(C`*\*(C'\fR should be considered as a part of the type and the address operator \f(CW\*(C`&\*(C'\fR
should be considered part of the variable.  See perlxstypemap
for more info about handling qualifiers and unary operators in C types.
.PP
The function name and the return type must be placed on
separate lines and should be flush left-adjusted.
.PP
.Vb 1
\&  INCORRECT                        CORRECT
\&
\&  double sin(x)                    double
\&    double x                       sin(x)
\&                                     double x
.Ve
.PP
The rest of the function description may be indented or left-adjusted. The
following example shows a function with its body left-adjusted.  Most
examples in this document will indent the body for better readability.
.PP
.Vb 1
\&  CORRECT
\&
\&  double
\&  sin(x)
\&  double x
.Ve
.PP
More complicated XSUBs may contain many other sections.  Each section of
an \s-1XSUB\s0 starts with the corresponding keyword, such as \s-1INIT:\s0 or \s-1CLEANUP:.\s0
However, the first two lines of an \s-1XSUB\s0 always contain the same data:
descriptions of the return type and the names of the function and its
parameters.  Whatever immediately follows these is considered to be
an \s-1INPUT:\s0 section unless explicitly marked with another keyword.
(See \*(L"The \s-1INPUT:\s0 Keyword\*(R".)
.PP
An \s-1XSUB\s0 section continues until another section-start keyword is found.
.SS "The Argument Stack"
.IX Subsection "The Argument Stack"
The Perl argument stack is used to store the values which are
sent as parameters to the \s-1XSUB\s0 and to store the \s-1XSUB\s0's
return value(s).  In reality all Perl functions (including non-XSUB
ones) keep their values on this stack all the same time, each limited
to its own range of positions on the stack.  In this document the
first position on that stack which belongs to the active
function will be referred to as position 0 for that function.
.PP
XSUBs refer to their stack arguments with the macro \fB\s-1ST\s0(x)\fR, where \fIx\fR
refers to a position in this \s-1XSUB\s0's part of the stack.  Position 0 for that
function would be known to the \s-1XSUB\s0 as \s-1\fIST\s0\fR\|(0).  The \s-1XSUB\s0's incoming
parameters and outgoing return values always begin at \s-1\fIST\s0\fR\|(0).  For many
simple cases the \fBxsubpp\fR compiler will generate the code necessary to
handle the argument stack by embedding code fragments found in the
typemaps.  In more complex cases the programmer must supply the code.
.SS "The \s-1RETVAL\s0 Variable"
.IX Subsection "The RETVAL Variable"
The \s-1RETVAL\s0 variable is a special C variable that is declared automatically
for you.  The C type of \s-1RETVAL\s0 matches the return type of the C library
function.  The \fBxsubpp\fR compiler will declare this variable in each \s-1XSUB\s0
with non\-\f(CW\*(C`void\*(C'\fR return type.  By default the generated C function
will use \s-1RETVAL\s0 to hold the return value of the C library function being
called.  In simple cases the value of \s-1RETVAL\s0 will be placed in \s-1\fIST\s0\fR\|(0) of
the argument stack where it can be received by Perl as the return value
of the \s-1XSUB.\s0
.PP
If the \s-1XSUB\s0 has a return type of \f(CW\*(C`void\*(C'\fR then the compiler will
not declare a \s-1RETVAL\s0 variable for that function.  When using
a \s-1PPCODE:\s0 section no manipulation of the \s-1RETVAL\s0 variable is required, the
section may use direct stack manipulation to place output values on the stack.
.PP
If \s-1PPCODE:\s0 directive is not used, \f(CW\*(C`void\*(C'\fR return value should be used
only for subroutines which do not return a value, \fIeven if\fR \s-1CODE:\s0
directive is used which sets \s-1\fIST\s0\fR\|(0) explicitly.
.PP
Older versions of this document recommended to use \f(CW\*(C`void\*(C'\fR return
value in such cases. It was discovered that this could lead to
segfaults in cases when \s-1XSUB\s0 was \fItruly\fR \f(CW\*(C`void\*(C'\fR. This practice is
now deprecated, and may be not supported at some future version. Use
the return value \f(CW\*(C`SV *\*(C'\fR in such cases. (Currently \f(CW\*(C`xsubpp\*(C'\fR contains
some heuristic code which tries to disambiguate between \*(L"truly-void\*(R"
and \*(L"old-practice-declared-as-void\*(R" functions. Hence your code is at
mercy of this heuristics unless you use \f(CW\*(C`SV *\*(C'\fR as return value.)
.SS "Returning SVs, AVs and HVs through \s-1RETVAL\s0"
.IX Subsection "Returning SVs, AVs and HVs through RETVAL"
When you're using \s-1RETVAL\s0 to return an \f(CW\*(C`SV *\*(C'\fR, there's some magic
going on behind the scenes that should be mentioned. When you're
manipulating the argument stack using the \s-1ST\s0(x) macro, for example,
you usually have to pay special attention to reference counts. (For
more about reference counts, see perlguts.) To make your life
easier, the typemap file automatically makes \f(CW\*(C`RETVAL\*(C'\fR mortal when
you're returning an \f(CW\*(C`SV *\*(C'\fR. Thus, the following two XSUBs are more
or less equivalent:
.PP
.Vb 6
\&  void
\&  alpha()
\&      PPCODE:
\&          ST(0) = newSVpv("Hello World",0);
\&          sv_2mortal(ST(0));
\&          XSRETURN(1);
\&
\&  SV *
\&  beta()
\&      CODE:
\&          RETVAL = newSVpv("Hello World",0);
\&      OUTPUT:
\&          RETVAL
.Ve
.PP
This is quite useful as it usually improves readability. While
this works fine for an \f(CW\*(C`SV *\*(C'\fR, it's unfortunately not as easy
to have \f(CW\*(C`AV *\*(C'\fR or \f(CW\*(C`HV *\*(C'\fR as a return value. You \fIshould\fR be
able to write:
.PP
.Vb 7
\&  AV *
\&  array()
\&      CODE:
\&          RETVAL = newAV();
\&          /* do something with RETVAL */
\&      OUTPUT:
\&          RETVAL
.Ve
.PP
But due to an unfixable bug (fixing it would break lots of existing
\&\s-1CPAN\s0 modules) in the typemap file, the reference count of the \f(CW\*(C`AV *\*(C'\fR
is not properly decremented. Thus, the above \s-1XSUB\s0 would leak memory
whenever it is being called. The same problem exists for \f(CW\*(C`HV *\*(C'\fR,
\&\f(CW\*(C`CV *\*(C'\fR, and \f(CW\*(C`SVREF\*(C'\fR (which indicates a scalar reference, not
a general \f(CW\*(C`SV *\*(C'\fR).
In \s-1XS\s0 code on perls starting with perl 5.16, you can override the
typemaps for any of these types with a version that has proper
handling of refcounts. In your \f(CW\*(C`TYPEMAP\*(C'\fR section, do
.PP
.Vb 1
\&  AV*   T_AVREF_REFCOUNT_FIXED
.Ve
.PP
to get the repaired variant. For backward compatibility with older
versions of perl, you can instead decrement the reference count
manually when you're returning one of the aforementioned
types using \f(CW\*(C`sv_2mortal\*(C'\fR:
.PP
.Vb 8
\&  AV *
\&  array()
\&      CODE:
\&          RETVAL = newAV();
\&          sv_2mortal((SV*)RETVAL);
\&          /* do something with RETVAL */
\&      OUTPUT:
\&          RETVAL
.Ve
.PP
Remember that you don't have to do this for an \f(CW\*(C`SV *\*(C'\fR. The reference
documentation for all core typemaps can be found in perlxstypemap.
.SS "The \s-1MODULE\s0 Keyword"
.IX Subsection "The MODULE Keyword"
The \s-1MODULE\s0 keyword is used to start the \s-1XS\s0 code and to specify the package
of the functions which are being defined.  All text preceding the first
\&\s-1MODULE\s0 keyword is considered C code and is passed through to the output with
\&\s-1POD\s0 stripped, but otherwise untouched.  Every \s-1XS\s0 module will have a
bootstrap function which is used to hook the XSUBs into Perl.  The package
name of this bootstrap function will match the value of the last \s-1MODULE\s0
statement in the \s-1XS\s0 source files.  The value of \s-1MODULE\s0 should always remain
constant within the same \s-1XS\s0 file, though this is not required.
.PP
The following example will start the \s-1XS\s0 code and will place
all functions in a package named \s-1RPC.\s0
.PP
.Vb 1
\&     MODULE = RPC
.Ve
.SS "The \s-1PACKAGE\s0 Keyword"
.IX Subsection "The PACKAGE Keyword"
When functions within an \s-1XS\s0 source file must be separated into packages
the \s-1PACKAGE\s0 keyword should be used.  This keyword is used with the \s-1MODULE\s0
keyword and must follow immediately after it when used.
.PP
.Vb 1
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     [ XS code in package RPC ]
\&
\&     MODULE = RPC  PACKAGE = RPCB
\&
\&     [ XS code in package RPCB ]
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     [ XS code in package RPC ]
.Ve
.PP
The same package name can be used more than once, allowing for
non-contiguous code. This is useful if you have a stronger ordering
principle than package names.
.PP
Although this keyword is optional and in some cases provides redundant
information it should always be used.  This keyword will ensure that the
XSUBs appear in the desired package.
.SS "The \s-1PREFIX\s0 Keyword"
.IX Subsection "The PREFIX Keyword"
The \s-1PREFIX\s0 keyword designates prefixes which should be
removed from the Perl function names.  If the C function is
\&\f(CW\*(C`rpcb_gettime()\*(C'\fR and the \s-1PREFIX\s0 value is \f(CW\*(C`rpcb_\*(C'\fR then Perl will
see this function as \f(CW\*(C`gettime()\*(C'\fR.
.PP
This keyword should follow the \s-1PACKAGE\s0 keyword when used.
If \s-1PACKAGE\s0 is not used then \s-1PREFIX\s0 should follow the \s-1MODULE\s0
keyword.
.PP
.Vb 1
\&     MODULE = RPC  PREFIX = rpc_
\&
\&     MODULE = RPC  PACKAGE = RPCB  PREFIX = rpcb_
.Ve
.SS "The \s-1OUTPUT:\s0 Keyword"
.IX Subsection "The OUTPUT: Keyword"
The \s-1OUTPUT:\s0 keyword indicates that certain function parameters should be
updated (new values made visible to Perl) when the \s-1XSUB\s0 terminates or that
certain values should be returned to the calling Perl function.  For
simple functions which have no \s-1CODE:\s0 or \s-1PPCODE:\s0 section,
such as the \fIsin()\fR function above, the \s-1RETVAL\s0 variable is
automatically designated as an output value.  For more complex functions
the \fBxsubpp\fR compiler will need help to determine which variables are output
variables.
.PP
This keyword will normally be used to complement the \s-1CODE: \s0 keyword.
The \s-1RETVAL\s0 variable is not recognized as an output variable when the
\&\s-1CODE:\s0 keyword is present.  The \s-1OUTPUT: \s0 keyword is used in this
situation to tell the compiler that \s-1RETVAL\s0 really is an output
variable.
.PP
The \s-1OUTPUT:\s0 keyword can also be used to indicate that function parameters
are output variables.  This may be necessary when a parameter has been
modified within the function and the programmer would like the update to
be seen by Perl.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.PP
The \s-1OUTPUT:\s0 keyword will also allow an output parameter to
be mapped to a matching piece of code rather than to a
typemap.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep sv_setnv(ST(1), (double)timep);
.Ve
.PP
\&\fBxsubpp\fR emits an automatic \f(CW\*(C`SvSETMAGIC()\*(C'\fR for all parameters in the
\&\s-1OUTPUT\s0 section of the \s-1XSUB,\s0 except \s-1RETVAL. \s0 This is the usually desired
behavior, as it takes care of properly invoking 'set' magic on output
parameters (needed for hash or array element parameters that must be
created if they didn't exist).  If for some reason, this behavior is
not desired, the \s-1OUTPUT\s0 section may contain a \f(CW\*(C`SETMAGIC: DISABLE\*(C'\fR line
to disable it for the remainder of the parameters in the \s-1OUTPUT\s0 section.
Likewise,  \f(CW\*(C`SETMAGIC: ENABLE\*(C'\fR can be used to reenable it for the
remainder of the \s-1OUTPUT\s0 section.  See perlguts for more details
about 'set' magic.
.SS "The \s-1NO_OUTPUT\s0 Keyword"
.IX Subsection "The NO_OUTPUT Keyword"
The \s-1NO_OUTPUT\s0 can be placed as the first token of the \s-1XSUB. \s0 This keyword
indicates that while the C subroutine we provide an interface to has
a non\-\f(CW\*(C`void\*(C'\fR return type, the return value of this C subroutine should not
be returned from the generated Perl subroutine.
.PP
With this keyword present \*(L"The \s-1RETVAL\s0 Variable\*(R" is created, and in the
generated call to the subroutine this variable is assigned to, but the value
of this variable is not going to be used in the auto-generated code.
.PP
This keyword makes sense only if \f(CW\*(C`RETVAL\*(C'\fR is going to be accessed by the
user-supplied code.  It is especially useful to make a function interface
more Perl-like, especially when the C return value is just an error condition
indicator.  For example,
.PP
.Vb 5
\&  NO_OUTPUT int
\&  delete_file(char *name)
\&    POSTCALL:
\&      if (RETVAL != 0)
\&          croak("Error %d while deleting file \*(Aq%s\*(Aq", RETVAL, name);
.Ve
.PP
Here the generated \s-1XS\s0 function returns nothing on success, and will \fIdie()\fR
with a meaningful error message on error.
.SS "The \s-1CODE:\s0 Keyword"
.IX Subsection "The CODE: Keyword"
This keyword is used in more complicated XSUBs which require
special handling for the C function.  The \s-1RETVAL\s0 variable is
still declared, but it will not be returned unless it is specified
in the \s-1OUTPUT:\s0 section.
.PP
The following \s-1XSUB\s0 is for a C function which requires special handling of
its parameters.  The Perl usage is given first.
.PP
.Vb 1
\&     $status = rpcb_gettime( "localhost", $timep );
.Ve
.PP
The \s-1XSUB\s0 follows.
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t timep
\&        CODE:
\&               RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The \s-1INIT:\s0 Keyword"
.IX Subsection "The INIT: Keyword"
The \s-1INIT:\s0 keyword allows initialization to be inserted into the \s-1XSUB\s0 before
the compiler generates the call to the C function.  Unlike the \s-1CODE:\s0 keyword
above, this keyword does not affect the way the compiler handles \s-1RETVAL.\s0
.PP
.Vb 8
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        INIT:
\&          printf("# Host is %s\en", host );
\&        OUTPUT:
\&          timep
.Ve
.PP
Another use for the \s-1INIT:\s0 section is to check for preconditions before
making a call to the C function:
.PP
.Vb 9
\&    long long
\&    lldiv(a,b)
\&        long long a
\&        long long b
\&      INIT:
\&        if (a == 0 && b == 0)
\&            XSRETURN_UNDEF;
\&        if (b == 0)
\&            croak("lldiv: cannot divide by 0");
.Ve
.SS "The \s-1NO_INIT\s0 Keyword"
.IX Subsection "The NO_INIT Keyword"
The \s-1NO_INIT\s0 keyword is used to indicate that a function
parameter is being used only as an output value.  The \fBxsubpp\fR
compiler will normally generate code to read the values of
all function parameters from the argument stack and assign
them to C variables upon entry to the function.  \s-1NO_INIT\s0
will tell the compiler that some parameters will be used for
output rather than for input and that they will be handled
before the function terminates.
.PP
The following example shows a variation of the \fIrpcb_gettime()\fR function.
This function uses the timep variable only as an output variable and does
not care about its initial contents.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep = NO_INIT
\&        OUTPUT:
\&          timep
.Ve
.SS "The \s-1TYPEMAP:\s0 Keyword"
.IX Subsection "The TYPEMAP: Keyword"
Starting with Perl 5.16, you can embed typemaps into your \s-1XS\s0 code
instead of or in addition to typemaps in a separate file.  Multiple
such embedded typemaps will be processed in order of appearance in
the \s-1XS\s0 code and like local typemap files take precendence over the
default typemap, the embedded typemaps may overwrite previous
definitions of \s-1TYPEMAP, INPUT,\s0 and \s-1OUTPUT\s0 stanzas.  The syntax for
embedded typemaps is
.PP
.Vb 3
\&      TYPEMAP: <<HERE
\&      ... your typemap code here ...
\&      HERE
.Ve
.PP
where the \f(CW\*(C`TYPEMAP\*(C'\fR keyword must appear in the first column of a
new line.
.PP
Refer to perlxstypemap for details on writing typemaps.
.SS "Initializing Function Parameters"
.IX Subsection "Initializing Function Parameters"
C function parameters are normally initialized with their values from
the argument stack (which in turn contains the parameters that were
passed to the \s-1XSUB\s0 from Perl).  The typemaps contain the
code segments which are used to translate the Perl values to
the C parameters.  The programmer, however, is allowed to
override the typemaps and supply alternate (or additional)
initialization code.  Initialization code starts with the first
\&\f(CW\*(C`=\*(C'\fR, \f(CW\*(C`;\*(C'\fR or \f(CW\*(C`+\*(C'\fR on a line in the \s-1INPUT:\s0 section.  The only
exception happens if this \f(CW\*(C`;\*(C'\fR terminates the line, then this \f(CW\*(C`;\*(C'\fR
is quietly ignored.
.PP
The following code demonstrates how to supply initialization code for
function parameters.  The initialization code is eval'ed within double
quotes by the compiler before it is added to the output so anything
which should be interpreted literally [mainly \f(CW\*(C`$\*(C'\fR, \f(CW\*(C`@\*(C'\fR, or \f(CW\*(C`\e\e\*(C'\fR]
must be protected with backslashes.  The variables \f(CW$var\fR, \f(CW$arg\fR,
and \f(CW$type\fR can be used as in typemaps.
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          char *host = (char *)SvPV_nolen($arg);
\&          time_t &timep = 0;
\&        OUTPUT:
\&          timep
.Ve
.PP
This should not be used to supply default values for parameters.  One
would normally use this when a function parameter must be processed by
another library function before it can be used.  Default parameters are
covered in the next section.
.PP
If the initialization begins with \f(CW\*(C`=\*(C'\fR, then it is output in
the declaration for the input variable, replacing the initialization
supplied by the typemap.  If the initialization
begins with \f(CW\*(C`;\*(C'\fR or \f(CW\*(C`+\*(C'\fR, then it is performed after
all of the input variables have been declared.  In the \f(CW\*(C`;\*(C'\fR
case the initialization normally supplied by the typemap is not performed.
For the \f(CW\*(C`+\*(C'\fR case, the declaration for the variable will include the
initialization from the typemap.  A global
variable, \f(CW%v\fR, is available for the truly rare case where
information from one initialization is needed in another
initialization.
.PP
Here's a truly obscure example:
.PP
.Vb 6
\&     bool_t
\&     rpcb_gettime(host,timep)
\&          time_t &timep; /* \e$v{timep}=@{[$v{timep}=$arg]} */
\&          char *host + SvOK($v{timep}) ? SvPV_nolen($arg) : NULL;
\&        OUTPUT:
\&          timep
.Ve
.PP
The construct \f(CW\*(C`\e$v{timep}=@{[$v{timep}=$arg]}\*(C'\fR used in the above
example has a two-fold purpose: first, when this line is processed by
\&\fBxsubpp\fR, the Perl snippet \f(CW\*(C`$v{timep}=$arg\*(C'\fR is evaluated.  Second,
the text of the evaluated snippet is output into the generated C file
(inside a C comment)!  During the processing of \f(CW\*(C`char *host\*(C'\fR line,
\&\f(CW$arg\fR will evaluate to \f(CWST(0)\fR, and \f(CW$v{timep}\fR will evaluate to
\&\f(CWST(1)\fR.
.SS "Default Parameter Values"
.IX Subsection "Default Parameter Values"
Default values for \s-1XSUB\s0 arguments can be specified by placing an
assignment statement in the parameter list.  The default value may
be a number, a string or the special string \f(CW\*(C`NO_INIT\*(C'\fR.  Defaults should
always be used on the right-most parameters only.
.PP
To allow the \s-1XSUB\s0 for \fIrpcb_gettime()\fR to have a default host
value the parameters to the \s-1XSUB\s0 could be rearranged.  The
\&\s-1XSUB\s0 will then call the real \fIrpcb_gettime()\fR function with
the parameters in the correct order.  This \s-1XSUB\s0 can be called
from Perl with either of the following statements:
.PP
.Vb 1
\&     $status = rpcb_gettime( $timep, $host );
\&
\&     $status = rpcb_gettime( $timep );
.Ve
.PP
The \s-1XSUB\s0 will look like the code  which  follows.   A  \s-1CODE:\s0
block  is used to call the real \fIrpcb_gettime()\fR function with
the parameters in the correct order for that function.
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(timep,host="localhost")
\&          char *host
\&          time_t timep = NO_INIT
\&        CODE:
\&               RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The \s-1PREINIT:\s0 Keyword"
.IX Subsection "The PREINIT: Keyword"
The \s-1PREINIT:\s0 keyword allows extra variables to be declared immediately
before or after the declarations of the parameters from the \s-1INPUT:\s0 section
are emitted.
.PP
If a variable is declared inside a \s-1CODE:\s0 section it will follow any typemap
code that is emitted for the input parameters.  This may result in the
declaration ending up after C code, which is C syntax error.  Similar
errors may happen with an explicit \f(CW\*(C`;\*(C'\fR\-type or \f(CW\*(C`+\*(C'\fR\-type initialization of
parameters is used (see \*(L"Initializing Function Parameters\*(R").  Declaring
these variables in an \s-1INIT:\s0 section will not help.
.PP
In such cases, to force an additional variable to be declared together
with declarations of other variables, place the declaration into a
\&\s-1PREINIT:\s0 section.  The \s-1PREINIT:\s0 keyword may be used one or more times
within an \s-1XSUB.\s0
.PP
The following examples are equivalent, but if the code is using complex
typemaps then the first example is safer.
.PP
.Vb 10
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&        PREINIT:
\&          char *host = "localhost";
\&        CODE:
\&          RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
For this particular case an \s-1INIT:\s0 keyword would generate the
same C code as the \s-1PREINIT:\s0 keyword.  Another correct, but error-prone example:
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&        CODE:
\&          char *host = "localhost";
\&          RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
Another way to declare \f(CW\*(C`host\*(C'\fR is to use a C block in the \s-1CODE:\s0 section:
.PP
.Vb 11
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&        CODE:
\&          {
\&            char *host = "localhost";
\&            RETVAL = rpcb_gettime( host, &timep );
\&          }
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
The ability to put additional declarations before the typemap entries are
processed is very handy in the cases when typemap conversions manipulate
some global state:
.PP
.Vb 8
\&    MyObject
\&    mutate(o)
\&        PREINIT:
\&            MyState st = global_state;
\&        INPUT:
\&            MyObject o;
\&        CLEANUP:
\&            reset_to(global_state, st);
.Ve
.PP
Here we suppose that conversion to \f(CW\*(C`MyObject\*(C'\fR in the \s-1INPUT:\s0 section and from
MyObject when processing \s-1RETVAL\s0 will modify a global variable \f(CW\*(C`global_state\*(C'\fR.
After these conversions are performed, we restore the old value of
\&\f(CW\*(C`global_state\*(C'\fR (to avoid memory leaks, for example).
.PP
There is another way to trade clarity for compactness: \s-1INPUT\s0 sections allow
declaration of C variables which do not appear in the parameter list of
a subroutine.  Thus the above code for \fImutate()\fR can be rewritten as
.PP
.Vb 6
\&    MyObject
\&    mutate(o)
\&          MyState st = global_state;
\&          MyObject o;
\&        CLEANUP:
\&          reset_to(global_state, st);
.Ve
.PP
and the code for \fIrpcb_gettime()\fR can be rewritten as
.PP
.Vb 9
\&     bool_t
\&     rpcb_gettime(timep)
\&          time_t timep = NO_INIT
\&          char *host = "localhost";
\&        C_ARGS:
\&          host, &timep
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The \s-1SCOPE:\s0 Keyword"
.IX Subsection "The SCOPE: Keyword"
The \s-1SCOPE:\s0 keyword allows scoping to be enabled for a particular \s-1XSUB.\s0 If
enabled, the \s-1XSUB\s0 will invoke \s-1ENTER\s0 and \s-1LEAVE\s0 automatically.
.PP
To support potentially complex type mappings, if a typemap entry used
by an \s-1XSUB\s0 contains a comment like \f(CW\*(C`/*scope*/\*(C'\fR then scoping will
be automatically enabled for that \s-1XSUB.\s0
.PP
To enable scoping:
.PP
.Vb 1
\&    SCOPE: ENABLE
.Ve
.PP
To disable scoping:
.PP
.Vb 1
\&    SCOPE: DISABLE
.Ve
.SS "The \s-1INPUT:\s0 Keyword"
.IX Subsection "The INPUT: Keyword"
The \s-1XSUB\s0's parameters are usually evaluated immediately after entering the
\&\s-1XSUB. \s0 The \s-1INPUT:\s0 keyword can be used to force those parameters to be
evaluated a little later.  The \s-1INPUT:\s0 keyword can be used multiple times
within an \s-1XSUB\s0 and can be used to list one or more input variables.  This
keyword is used with the \s-1PREINIT:\s0 keyword.
.PP
The following example shows how the input parameter \f(CW\*(C`timep\*(C'\fR can be
evaluated late, after a \s-1PREINIT.\s0
.PP
.Vb 10
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&        PREINIT:
\&          time_t tt;
\&        INPUT:
\&          time_t timep
\&        CODE:
\&               RETVAL = rpcb_gettime( host, &tt );
\&               timep = tt;
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
The next example shows each input parameter evaluated late.
.PP
.Vb 10
\&    bool_t
\&    rpcb_gettime(host,timep)
\&        PREINIT:
\&          time_t tt;
\&        INPUT:
\&          char *host
\&        PREINIT:
\&          char *h;
\&        INPUT:
\&          time_t timep
\&        CODE:
\&               h = host;
\&               RETVAL = rpcb_gettime( h, &tt );
\&               timep = tt;
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
Since \s-1INPUT\s0 sections allow declaration of C variables which do not appear
in the parameter list of a subroutine, this may be shortened to:
.PP
.Vb 12
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          time_t tt;
\&          char *host;
\&          char *h = host;
\&          time_t timep;
\&        CODE:
\&          RETVAL = rpcb_gettime( h, &tt );
\&          timep = tt;
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
(We used our knowledge that input conversion for \f(CW\*(C`char *\*(C'\fR is a \*(L"simple\*(R" one,
thus \f(CW\*(C`host\*(C'\fR is initialized on the declaration line, and our assignment
\&\f(CW\*(C`h = host\*(C'\fR is not performed too early.  Otherwise one would need to have the
assignment \f(CW\*(C`h = host\*(C'\fR in a \s-1CODE:\s0 or \s-1INIT:\s0 section.)
.SS "The \s-1IN/OUTLIST/IN_OUTLIST/OUT/IN_OUT\s0 Keywords"
.IX Subsection "The IN/OUTLIST/IN_OUTLIST/OUT/IN_OUT Keywords"
In the list of parameters for an \s-1XSUB,\s0 one can precede parameter names
by the \f(CW\*(C`IN\*(C'\fR/\f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR keywords.
\&\f(CW\*(C`IN\*(C'\fR keyword is the default, the other keywords indicate how the Perl
interface should differ from the C interface.
.PP
Parameters preceded by \f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR
keywords are considered to be used by the C subroutine \fIvia
pointers\fR.  \f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR keywords indicate that the C subroutine
does not inspect the memory pointed by this parameter, but will write
through this pointer to provide additional return values.
.PP
Parameters preceded by \f(CW\*(C`OUTLIST\*(C'\fR keyword do not appear in the usage
signature of the generated Perl function.
.PP
Parameters preceded by \f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR \fIdo\fR appear as
parameters to the Perl function.  With the exception of
\&\f(CW\*(C`OUT\*(C'\fR\-parameters, these parameters are converted to the corresponding
C type, then pointers to these data are given as arguments to the C
function.  It is expected that the C function will write through these
pointers.
.PP
The return list of the generated Perl function consists of the C return value
from the function (unless the \s-1XSUB\s0 is of \f(CW\*(C`void\*(C'\fR return type or
\&\f(CW\*(C`The NO_OUTPUT Keyword\*(C'\fR was used) followed by all the \f(CW\*(C`OUTLIST\*(C'\fR
and \f(CW\*(C`IN_OUTLIST\*(C'\fR parameters (in the order of appearance).  On the
return from the \s-1XSUB\s0 the \f(CW\*(C`IN_OUT\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR Perl parameter will be
modified to have the values written by the C function.
.PP
For example, an \s-1XSUB\s0
.PP
.Vb 5
\&  void
\&  day_month(OUTLIST day, IN unix_time, OUTLIST month)
\&    int day
\&    int unix_time
\&    int month
.Ve
.PP
should be used from Perl as
.PP
.Vb 1
\&  my ($day, $month) = day_month(time);
.Ve
.PP
The C signature of the corresponding function should be
.PP
.Vb 1
\&  void day_month(int *day, int unix_time, int *month);
.Ve
.PP
The \f(CW\*(C`IN\*(C'\fR/\f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR keywords can be
mixed with ANSI-style declarations, as in
.PP
.Vb 2
\&  void
\&  day_month(OUTLIST int day, int unix_time, OUTLIST int month)
.Ve
.PP
(here the optional \f(CW\*(C`IN\*(C'\fR keyword is omitted).
.PP
The \f(CW\*(C`IN_OUT\*(C'\fR parameters are identical with parameters introduced with
\&\*(L"The & Unary Operator\*(R" and put into the \f(CW\*(C`OUTPUT:\*(C'\fR section (see
\&\*(L"The \s-1OUTPUT:\s0 Keyword\*(R").  The \f(CW\*(C`IN_OUTLIST\*(C'\fR parameters are very similar,
the only difference being that the value C function writes through the
pointer would not modify the Perl parameter, but is put in the output
list.
.PP
The \f(CW\*(C`OUTLIST\*(C'\fR/\f(CW\*(C`OUT\*(C'\fR parameter differ from \f(CW\*(C`IN_OUTLIST\*(C'\fR/\f(CW\*(C`IN_OUT\*(C'\fR
parameters only by the initial value of the Perl parameter not
being read (and not being given to the C function \- which gets some
garbage instead).  For example, the same C function as above can be
interfaced with as
.PP
.Vb 1
\&  void day_month(OUT int day, int unix_time, OUT int month);
.Ve
.PP
or
.PP
.Vb 8
\&  void
\&  day_month(day, unix_time, month)
\&      int &day = NO_INIT
\&      int  unix_time
\&      int &month = NO_INIT
\&    OUTPUT:
\&      day
\&      month
.Ve
.PP
However, the generated Perl function is called in very C\-ish style:
.PP
.Vb 2
\&  my ($day, $month);
\&  day_month($day, time, $month);
.Ve
.ie n .SS "The ""length(NAME)"" Keyword"
.el .SS "The \f(CWlength(NAME)\fP Keyword"
.IX Subsection "The length(NAME) Keyword"
If one of the input arguments to the C function is the length of a string
argument \f(CW\*(C`NAME\*(C'\fR, one can substitute the name of the length-argument by
\&\f(CW\*(C`length(NAME)\*(C'\fR in the \s-1XSUB\s0 declaration.  This argument must be omitted when
the generated Perl function is called.  E.g.,
.PP
.Vb 9
\&  void
\&  dump_chars(char *s, short l)
\&  {
\&    short n = 0;
\&    while (n < l) {
\&        printf("s[%d] = \e"\e\e%#03o\e"\en", n, (int)s[n]);
\&        n++;
\&    }
\&  }
\&
\&  MODULE = x            PACKAGE = x
\&
\&  void dump_chars(char *s, short length(s))
.Ve
.PP
should be called as \f(CW\*(C`dump_chars($string)\*(C'\fR.
.PP
This directive is supported with ANSI-type function declarations only.
.SS "Variable-length Parameter Lists"
.IX Subsection "Variable-length Parameter Lists"
XSUBs can have variable-length parameter lists by specifying an ellipsis
\&\f(CW\*(C`(...)\*(C'\fR in the parameter list.  This use of the ellipsis is similar to that
found in \s-1ANSI C. \s0 The programmer is able to determine the number of
arguments passed to the \s-1XSUB\s0 by examining the \f(CW\*(C`items\*(C'\fR variable which the
\&\fBxsubpp\fR compiler supplies for all XSUBs.  By using this mechanism one can
create an \s-1XSUB\s0 which accepts a list of parameters of unknown length.
.PP
The \fIhost\fR parameter for the \fIrpcb_gettime()\fR \s-1XSUB\s0 can be
optional so the ellipsis can be used to indicate that the
\&\s-1XSUB\s0 will take a variable number of parameters.  Perl should
be able to call this \s-1XSUB\s0 with either of the following statements.
.PP
.Vb 1
\&     $status = rpcb_gettime( $timep, $host );
\&
\&     $status = rpcb_gettime( $timep );
.Ve
.PP
The \s-1XS\s0 code, with ellipsis, follows.
.PP
.Vb 12
\&     bool_t
\&     rpcb_gettime(timep, ...)
\&          time_t timep = NO_INIT
\&        PREINIT:
\&          char *host = "localhost";
\&        CODE:
\&          if( items > 1 )
\&               host = (char *)SvPV_nolen(ST(1));
\&          RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.SS "The C_ARGS: Keyword"
.IX Subsection "The C_ARGS: Keyword"
The C_ARGS: keyword allows creating of \s-1XSUBS\s0 which have different
calling sequence from Perl than from C, without a need to write
\&\s-1CODE:\s0 or \s-1PPCODE:\s0 section.  The contents of the C_ARGS: paragraph is
put as the argument to the called C function without any change.
.PP
For example, suppose that a C function is declared as
.PP
.Vb 1
\&    symbolic nth_derivative(int n, symbolic function, int flags);
.Ve
.PP
and that the default flags are kept in a global C variable
\&\f(CW\*(C`default_flags\*(C'\fR.  Suppose that you want to create an interface which
is called as
.PP
.Vb 1
\&    $second_deriv = $function\->nth_derivative(2);
.Ve
.PP
To do this, declare the \s-1XSUB\s0 as
.PP
.Vb 6
\&    symbolic
\&    nth_derivative(function, n)
\&        symbolic        function
\&        int             n
\&      C_ARGS:
\&        n, function, default_flags
.Ve
.SS "The \s-1PPCODE:\s0 Keyword"
.IX Subsection "The PPCODE: Keyword"
The \s-1PPCODE:\s0 keyword is an alternate form of the \s-1CODE:\s0 keyword and is used
to tell the \fBxsubpp\fR compiler that the programmer is supplying the code to
control the argument stack for the XSUBs return values.  Occasionally one
will want an \s-1XSUB\s0 to return a list of values rather than a single value.
In these cases one must use \s-1PPCODE:\s0 and then explicitly push the list of
values on the stack.  The \s-1PPCODE:\s0 and \s-1CODE: \s0 keywords should not be used
together within the same \s-1XSUB.\s0
.PP
The actual difference between \s-1PPCODE:\s0 and \s-1CODE:\s0 sections is in the
initialization of \f(CW\*(C`SP\*(C'\fR macro (which stands for the \fIcurrent\fR Perl
stack pointer), and in the handling of data on the stack when returning
from an \s-1XSUB. \s0 In \s-1CODE:\s0 sections \s-1SP\s0 preserves the value which was on
entry to the \s-1XSUB: SP\s0 is on the function pointer (which follows the
last parameter).  In \s-1PPCODE:\s0 sections \s-1SP\s0 is moved backward to the
beginning of the parameter list, which allows \f(CW\*(C`PUSH*()\*(C'\fR macros
to place output values in the place Perl expects them to be when
the \s-1XSUB\s0 returns back to Perl.
.PP
The generated trailer for a \s-1CODE:\s0 section ensures that the number of return
values Perl will see is either 0 or 1 (depending on the \f(CW\*(C`void\*(C'\fRness of the
return value of the C function, and heuristics mentioned in
\&\*(L"The \s-1RETVAL\s0 Variable\*(R").  The trailer generated for a \s-1PPCODE:\s0 section
is based on the number of return values and on the number of times
\&\f(CW\*(C`SP\*(C'\fR was updated by \f(CW\*(C`[X]PUSH*()\*(C'\fR macros.
.PP
Note that macros \f(CWST(i)\fR, \f(CW\*(C`XST_m*()\*(C'\fR and \f(CW\*(C`XSRETURN*()\*(C'\fR work equally
well in \s-1CODE:\s0 sections and \s-1PPCODE:\s0 sections.
.PP
The following \s-1XSUB\s0 will call the C \fIrpcb_gettime()\fR function
and will return its two output values, timep and status, to
Perl as a single list.
.PP
.Vb 11
\&     void
\&     rpcb_gettime(host)
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&          bool_t  status;
\&        PPCODE:
\&          status = rpcb_gettime( host, &timep );
\&          EXTEND(SP, 2);
\&          PUSHs(sv_2mortal(newSViv(status)));
\&          PUSHs(sv_2mortal(newSViv(timep)));
.Ve
.PP
Notice that the programmer must supply the C code necessary
to have the real \fIrpcb_gettime()\fR function called and to have
the return values properly placed on the argument stack.
.PP
The \f(CW\*(C`void\*(C'\fR return type for this function tells the \fBxsubpp\fR compiler that
the \s-1RETVAL\s0 variable is not needed or used and that it should not be created.
In most scenarios the void return type should be used with the \s-1PPCODE:\s0
directive.
.PP
The \s-1\fIEXTEND\s0()\fR macro is used to make room on the argument
stack for 2 return values.  The \s-1PPCODE:\s0 directive causes the
\&\fBxsubpp\fR compiler to create a stack pointer available as \f(CW\*(C`SP\*(C'\fR, and it
is this pointer which is being used in the \s-1\fIEXTEND\s0()\fR macro.
The values are then pushed onto the stack with the \fIPUSHs()\fR
macro.
.PP
Now the \fIrpcb_gettime()\fR function can be used from Perl with
the following statement.
.PP
.Vb 1
\&     ($status, $timep) = rpcb_gettime("localhost");
.Ve
.PP
When handling output parameters with a \s-1PPCODE\s0 section, be sure to handle
\&'set' magic properly.  See perlguts for details about 'set' magic.
.SS "Returning Undef And Empty Lists"
.IX Subsection "Returning Undef And Empty Lists"
Occasionally the programmer will want to return simply
\&\f(CW\*(C`undef\*(C'\fR or an empty list if a function fails rather than a
separate status value.  The \fIrpcb_gettime()\fR function offers
just this situation.  If the function succeeds we would like
to have it return the time and if it fails we would like to
have undef returned.  In the following Perl code the value
of \f(CW$timep\fR will either be undef or it will be a valid time.
.PP
.Vb 1
\&     $timep = rpcb_gettime( "localhost" );
.Ve
.PP
The following \s-1XSUB\s0 uses the \f(CW\*(C`SV *\*(C'\fR return type as a mnemonic only,
and uses a \s-1CODE:\s0 block to indicate to the compiler
that the programmer has supplied all the necessary code.  The
\&\fIsv_newmortal()\fR call will initialize the return value to undef, making that
the default return value.
.PP
.Vb 10
\&     SV *
\&     rpcb_gettime(host)
\&          char *  host
\&        PREINIT:
\&          time_t  timep;
\&          bool_t x;
\&        CODE:
\&          ST(0) = sv_newmortal();
\&          if( rpcb_gettime( host, &timep ) )
\&               sv_setnv( ST(0), (double)timep);
.Ve
.PP
The next example demonstrates how one would place an explicit undef in the
return value, should the need arise.
.PP
.Vb 10
\&     SV *
\&     rpcb_gettime(host)
\&          char *  host
\&        PREINIT:
\&          time_t  timep;
\&          bool_t x;
\&        CODE:
\&          if( rpcb_gettime( host, &timep ) ){
\&               ST(0) = sv_newmortal();
\&               sv_setnv( ST(0), (double)timep);
\&          }
\&          else{
\&               ST(0) = &PL_sv_undef;
\&          }
.Ve
.PP
To return an empty list one must use a \s-1PPCODE:\s0 block and
then not push return values on the stack.
.PP
.Vb 12
\&     void
\&     rpcb_gettime(host)
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&        PPCODE:
\&          if( rpcb_gettime( host, &timep ) )
\&               PUSHs(sv_2mortal(newSViv(timep)));
\&          else{
\&              /* Nothing pushed on stack, so an empty
\&               * list is implicitly returned. */
\&          }
.Ve
.PP
Some people may be inclined to include an explicit \f(CW\*(C`return\*(C'\fR in the above
\&\s-1XSUB,\s0 rather than letting control fall through to the end.  In those
situations \f(CW\*(C`XSRETURN_EMPTY\*(C'\fR should be used, instead.  This will ensure that
the \s-1XSUB\s0 stack is properly adjusted.  Consult perlapi for other
\&\f(CW\*(C`XSRETURN\*(C'\fR macros.
.PP
Since \f(CW\*(C`XSRETURN_*\*(C'\fR macros can be used with \s-1CODE\s0 blocks as well, one can
rewrite this example as:
.PP
.Vb 11
\&     int
\&     rpcb_gettime(host)
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&        CODE:
\&          RETVAL = rpcb_gettime( host, &timep );
\&          if (RETVAL == 0)
\&                XSRETURN_UNDEF;
\&        OUTPUT:
\&          RETVAL
.Ve
.PP
In fact, one can put this check into a \s-1POSTCALL:\s0 section as well.  Together
with \s-1PREINIT:\s0 simplifications, this leads to:
.PP
.Vb 7
\&     int
\&     rpcb_gettime(host)
\&          char *host
\&          time_t  timep;
\&        POSTCALL:
\&          if (RETVAL == 0)
\&                XSRETURN_UNDEF;
.Ve
.SS "The \s-1REQUIRE:\s0 Keyword"
.IX Subsection "The REQUIRE: Keyword"
The \s-1REQUIRE:\s0 keyword is used to indicate the minimum version of the
\&\fBxsubpp\fR compiler needed to compile the \s-1XS\s0 module.  An \s-1XS\s0 module which
contains the following statement will compile with only \fBxsubpp\fR version
1.922 or greater:
.PP
.Vb 1
\&        REQUIRE: 1.922
.Ve
.SS "The \s-1CLEANUP:\s0 Keyword"
.IX Subsection "The CLEANUP: Keyword"
This keyword can be used when an \s-1XSUB\s0 requires special cleanup procedures
before it terminates.  When the \s-1CLEANUP: \s0 keyword is used it must follow
any \s-1CODE:, PPCODE:,\s0 or \s-1OUTPUT:\s0 blocks which are present in the \s-1XSUB. \s0 The
code specified for the cleanup block will be added as the last statements
in the \s-1XSUB.\s0
.SS "The \s-1POSTCALL:\s0 Keyword"
.IX Subsection "The POSTCALL: Keyword"
This keyword can be used when an \s-1XSUB\s0 requires special procedures
executed after the C subroutine call is performed.  When the \s-1POSTCALL:\s0
keyword is used it must precede \s-1OUTPUT:\s0 and \s-1CLEANUP:\s0 blocks which are
present in the \s-1XSUB.\s0
.PP
See examples in \*(L"The \s-1NO_OUTPUT\s0 Keyword\*(R" and \*(L"Returning Undef And Empty Lists\*(R".
.PP
The \s-1POSTCALL:\s0 block does not make a lot of sense when the C subroutine
call is supplied by user by providing either \s-1CODE:\s0 or \s-1PPCODE:\s0 section.
.SS "The \s-1BOOT:\s0 Keyword"
.IX Subsection "The BOOT: Keyword"
The \s-1BOOT:\s0 keyword is used to add code to the extension's bootstrap
function.  The bootstrap function is generated by the \fBxsubpp\fR compiler and
normally holds the statements necessary to register any XSUBs with Perl.
With the \s-1BOOT:\s0 keyword the programmer can tell the compiler to add extra
statements to the bootstrap function.
.PP
This keyword may be used any time after the first \s-1MODULE\s0 keyword and should
appear on a line by itself.  The first blank line after the keyword will
terminate the code block.
.PP
.Vb 4
\&     BOOT:
\&     # The following message will be printed when the
\&     # bootstrap function executes.
\&     printf("Hello from the bootstrap!\en");
.Ve
.SS "The \s-1VERSIONCHECK:\s0 Keyword"
.IX Subsection "The VERSIONCHECK: Keyword"
The \s-1VERSIONCHECK:\s0 keyword corresponds to \fBxsubpp\fR's \f(CW\*(C`\-versioncheck\*(C'\fR and
\&\f(CW\*(C`\-noversioncheck\*(C'\fR options.  This keyword overrides the command line
options.  Version checking is enabled by default.  When version checking is
enabled the \s-1XS\s0 module will attempt to verify that its version matches the
version of the \s-1PM\s0 module.
.PP
To enable version checking:
.PP
.Vb 1
\&    VERSIONCHECK: ENABLE
.Ve
.PP
To disable version checking:
.PP
.Vb 1
\&    VERSIONCHECK: DISABLE
.Ve
.PP
Note that if the version of the \s-1PM\s0 module is an \s-1NV \s0(a floating point
number), it will be stringified with a possible loss of precision
(currently chopping to nine decimal places) so that it may not match
the version of the \s-1XS\s0 module anymore. Quoting the \f(CW$VERSION\fR declaration
to make it a string is recommended if long version numbers are used.
.SS "The \s-1PROTOTYPES:\s0 Keyword"
.IX Subsection "The PROTOTYPES: Keyword"
The \s-1PROTOTYPES:\s0 keyword corresponds to \fBxsubpp\fR's \f(CW\*(C`\-prototypes\*(C'\fR and
\&\f(CW\*(C`\-noprototypes\*(C'\fR options.  This keyword overrides the command line options.
Prototypes are enabled by default.  When prototypes are enabled XSUBs will
be given Perl prototypes.  This keyword may be used multiple times in an \s-1XS\s0
module to enable and disable prototypes for different parts of the module.
.PP
To enable prototypes:
.PP
.Vb 1
\&    PROTOTYPES: ENABLE
.Ve
.PP
To disable prototypes:
.PP
.Vb 1
\&    PROTOTYPES: DISABLE
.Ve
.SS "The \s-1PROTOTYPE:\s0 Keyword"
.IX Subsection "The PROTOTYPE: Keyword"
This keyword is similar to the \s-1PROTOTYPES:\s0 keyword above but can be used to
force \fBxsubpp\fR to use a specific prototype for the \s-1XSUB. \s0 This keyword
overrides all other prototype options and keywords but affects only the
current \s-1XSUB. \s0 Consult \*(L"Prototypes\*(R" in perlsub for information about Perl
prototypes.
.PP
.Vb 10
\&    bool_t
\&    rpcb_gettime(timep, ...)
\&          time_t timep = NO_INIT
\&        PROTOTYPE: $;$
\&        PREINIT:
\&          char *host = "localhost";
\&        CODE:
\&                  if( items > 1 )
\&                       host = (char *)SvPV_nolen(ST(1));
\&                  RETVAL = rpcb_gettime( host, &timep );
\&        OUTPUT:
\&          timep
\&          RETVAL
.Ve
.PP
If the prototypes are enabled, you can disable it locally for a given
\&\s-1XSUB\s0 as in the following example:
.PP
.Vb 4
\&    void
\&    rpcb_gettime_noproto()
\&        PROTOTYPE: DISABLE
\&    ...
.Ve
.SS "The \s-1ALIAS:\s0 Keyword"
.IX Subsection "The ALIAS: Keyword"
The \s-1ALIAS:\s0 keyword allows an \s-1XSUB\s0 to have two or more unique Perl names
and to know which of those names was used when it was invoked.  The Perl
names may be fully-qualified with package names.  Each alias is given an
index.  The compiler will setup a variable called \f(CW\*(C`ix\*(C'\fR which contain the
index of the alias which was used.  When the \s-1XSUB\s0 is called with its
declared name \f(CW\*(C`ix\*(C'\fR will be 0.
.PP
The following example will create aliases \f(CW\*(C`FOO::gettime()\*(C'\fR and
\&\f(CW\*(C`BAR::getit()\*(C'\fR for this function.
.PP
.Vb 11
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        ALIAS:
\&            FOO::gettime = 1
\&            BAR::getit = 2
\&        INIT:
\&          printf("# ix = %d\en", ix );
\&        OUTPUT:
\&          timep
.Ve
.SS "The \s-1OVERLOAD:\s0 Keyword"
.IX Subsection "The OVERLOAD: Keyword"
Instead of writing an overloaded interface using pure Perl, you
can also use the \s-1OVERLOAD\s0 keyword to define additional Perl names
for your functions (like the \s-1ALIAS:\s0 keyword above).  However, the
overloaded functions must be defined with three parameters (except
for the \fInomethod()\fR function which needs four parameters).  If any
function has the \s-1OVERLOAD:\s0 keyword, several additional lines
will be defined in the c file generated by xsubpp in order to
register with the overload magic.
.PP
Since blessed objects are actually stored as \s-1RV\s0's, it is useful
to use the typemap features to preprocess parameters and extract
the actual \s-1SV\s0 stored within the blessed \s-1RV. \s0 See the sample for
T_PTROBJ_SPECIAL below.
.PP
To use the \s-1OVERLOAD:\s0 keyword, create an \s-1XS\s0 function which takes
three input parameters ( or use the c style '...' definition) like
this:
.PP
.Vb 7
\&    SV *
\&    cmp (lobj, robj, swap)
\&    My_Module_obj    lobj
\&    My_Module_obj    robj
\&    IV               swap
\&    OVERLOAD: cmp <=>
\&    { /* function defined here */}
.Ve
.PP
In this case, the function will overload both of the three way
comparison operators.  For all overload operations using non-alpha
characters, you must type the parameter without quoting, separating
multiple overloads with whitespace.  Note that "\*(L" (the stringify
overload) should be entered as \e\*(R"\e" (i.e. escaped).
.SS "The \s-1FALLBACK:\s0 Keyword"
.IX Subsection "The FALLBACK: Keyword"
In addition to the \s-1OVERLOAD\s0 keyword, if you need to control how
Perl autogenerates missing overloaded operators, you can set the
\&\s-1FALLBACK\s0 keyword in the module header section, like this:
.PP
.Vb 1
\&    MODULE = RPC  PACKAGE = RPC
\&
\&    FALLBACK: TRUE
\&    ...
.Ve
.PP
where \s-1FALLBACK\s0 can take any of the three values \s-1TRUE, FALSE,\s0 or
\&\s-1UNDEF. \s0 If you do not set any \s-1FALLBACK\s0 value when using \s-1OVERLOAD,\s0
it defaults to \s-1UNDEF.  FALLBACK\s0 is not used except when one or
more functions using \s-1OVERLOAD\s0 have been defined.  Please see
\&\*(L"fallback\*(R" in overload for more details.
.SS "The \s-1INTERFACE:\s0 Keyword"
.IX Subsection "The INTERFACE: Keyword"
This keyword declares the current \s-1XSUB\s0 as a keeper of the given
calling signature.  If some text follows this keyword, it is
considered as a list of functions which have this signature, and
should be attached to the current \s-1XSUB.\s0
.PP
For example, if you have 4 C functions \fImultiply()\fR, \fIdivide()\fR, \fIadd()\fR,
\&\fIsubtract()\fR all having the signature:
.PP
.Vb 1
\&    symbolic f(symbolic, symbolic);
.Ve
.PP
you can make them all to use the same \s-1XSUB\s0 using this:
.PP
.Vb 7
\&    symbolic
\&    interface_s_ss(arg1, arg2)
\&        symbolic        arg1
\&        symbolic        arg2
\&    INTERFACE:
\&        multiply divide
\&        add subtract
.Ve
.PP
(This is the complete \s-1XSUB\s0 code for 4 Perl functions!)  Four generated
Perl function share names with corresponding C functions.
.PP
The advantage of this approach comparing to \s-1ALIAS:\s0 keyword is that there
is no need to code a switch statement, each Perl function (which shares
the same \s-1XSUB\s0) knows which C function it should call.  Additionally, one
can attach an extra function \fIremainder()\fR at runtime by using
.PP
.Vb 3
\&    CV *mycv = newXSproto("Symbolic::remainder",
\&                          XS_Symbolic_interface_s_ss, _\|_FILE_\|_, "$$");
\&    XSINTERFACE_FUNC_SET(mycv, remainder);
.Ve
.PP
say, from another \s-1XSUB.  \s0(This example supposes that there was no
\&\s-1INTERFACE_MACRO:\s0 section, otherwise one needs to use something else instead of
\&\f(CW\*(C`XSINTERFACE_FUNC_SET\*(C'\fR, see the next section.)
.SS "The \s-1INTERFACE_MACRO:\s0 Keyword"
.IX Subsection "The INTERFACE_MACRO: Keyword"
This keyword allows one to define an \s-1INTERFACE\s0 using a different way
to extract a function pointer from an \s-1XSUB. \s0 The text which follows
this keyword should give the name of macros which would extract/set a
function pointer.  The extractor macro is given return type, \f(CW\*(C`CV*\*(C'\fR,
and \f(CW\*(C`XSANY.any_dptr\*(C'\fR for this \f(CW\*(C`CV*\*(C'\fR.  The setter macro is given cv,
and the function pointer.
.PP
The default value is \f(CW\*(C`XSINTERFACE_FUNC\*(C'\fR and \f(CW\*(C`XSINTERFACE_FUNC_SET\*(C'\fR.
An \s-1INTERFACE\s0 keyword with an empty list of functions can be omitted if
\&\s-1INTERFACE_MACRO\s0 keyword is used.
.PP
Suppose that in the previous example functions pointers for
\&\fImultiply()\fR, \fIdivide()\fR, \fIadd()\fR, \fIsubtract()\fR are kept in a global C array
\&\f(CW\*(C`fp[]\*(C'\fR with offsets being \f(CW\*(C`multiply_off\*(C'\fR, \f(CW\*(C`divide_off\*(C'\fR, \f(CW\*(C`add_off\*(C'\fR,
\&\f(CW\*(C`subtract_off\*(C'\fR.  Then one can use
.PP
.Vb 4
\&    #define XSINTERFACE_FUNC_BYOFFSET(ret,cv,f) \e
\&        ((XSINTERFACE_CVT_ANON(ret))fp[CvXSUBANY(cv).any_i32])
\&    #define XSINTERFACE_FUNC_BYOFFSET_set(cv,f) \e
\&        CvXSUBANY(cv).any_i32 = CAT2( f, _off )
.Ve
.PP
in C section,
.PP
.Vb 10
\&    symbolic
\&    interface_s_ss(arg1, arg2)
\&        symbolic        arg1
\&        symbolic        arg2
\&      INTERFACE_MACRO:
\&        XSINTERFACE_FUNC_BYOFFSET
\&        XSINTERFACE_FUNC_BYOFFSET_set
\&      INTERFACE:
\&        multiply divide
\&        add subtract
.Ve
.PP
in \s-1XSUB\s0 section.
.SS "The \s-1INCLUDE:\s0 Keyword"
.IX Subsection "The INCLUDE: Keyword"
This keyword can be used to pull other files into the \s-1XS\s0 module.  The other
files may have \s-1XS\s0 code.  \s-1INCLUDE:\s0 can also be used to run a command to
generate the \s-1XS\s0 code to be pulled into the module.
.PP
The file \fIRpcb1.xsh\fR contains our \f(CW\*(C`rpcb_gettime()\*(C'\fR function:
.PP
.Vb 6
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.PP
The \s-1XS\s0 module can use \s-1INCLUDE:\s0 to pull that file into it.
.PP
.Vb 1
\&    INCLUDE: Rpcb1.xsh
.Ve
.PP
If the parameters to the \s-1INCLUDE:\s0 keyword are followed by a pipe (\f(CW\*(C`|\*(C'\fR) then
the compiler will interpret the parameters as a command. This feature is
mildly deprecated in favour of the \f(CW\*(C`INCLUDE_COMMAND:\*(C'\fR directive, as documented
below.
.PP
.Vb 1
\&    INCLUDE: cat Rpcb1.xsh |
.Ve
.PP
Do not use this to run perl: \f(CW\*(C`INCLUDE: perl |\*(C'\fR will run the perl that
happens to be the first in your path and not necessarily the same perl that is
used to run \f(CW\*(C`xsubpp\*(C'\fR. See \*(L"The \s-1INCLUDE_COMMAND:\s0 Keyword\*(R".
.SS "The \s-1INCLUDE_COMMAND:\s0 Keyword"
.IX Subsection "The INCLUDE_COMMAND: Keyword"
Runs the supplied command and includes its output into the current \s-1XS\s0
document. \f(CW\*(C`INCLUDE_COMMAND\*(C'\fR assigns special meaning to the \f(CW$^X\fR token
in that it runs the same perl interpreter that is running \f(CW\*(C`xsubpp\*(C'\fR:
.PP
.Vb 1
\&    INCLUDE_COMMAND: cat Rpcb1.xsh
\&
\&    INCLUDE_COMMAND: $^X \-e ...
.Ve
.SS "The \s-1CASE:\s0 Keyword"
.IX Subsection "The CASE: Keyword"
The \s-1CASE:\s0 keyword allows an \s-1XSUB\s0 to have multiple distinct parts with each
part acting as a virtual \s-1XSUB.  CASE:\s0 is greedy and if it is used then all
other \s-1XS\s0 keywords must be contained within a \s-1CASE:. \s0 This means nothing may
precede the first \s-1CASE:\s0 in the \s-1XSUB\s0 and anything following the last \s-1CASE:\s0 is
included in that case.
.PP
A \s-1CASE:\s0 might switch via a parameter of the \s-1XSUB,\s0 via the \f(CW\*(C`ix\*(C'\fR \s-1ALIAS:\s0
variable (see \*(L"The \s-1ALIAS:\s0 Keyword\*(R"), or maybe via the \f(CW\*(C`items\*(C'\fR variable
(see \*(L"Variable-length Parameter Lists\*(R").  The last \s-1CASE:\s0 becomes the
\&\fBdefault\fR case if it is not associated with a conditional.  The following
example shows \s-1CASE\s0 switched via \f(CW\*(C`ix\*(C'\fR with a function \f(CW\*(C`rpcb_gettime()\*(C'\fR
having an alias \f(CW\*(C`x_gettime()\*(C'\fR.  When the function is called as
\&\f(CW\*(C`rpcb_gettime()\*(C'\fR its parameters are the usual \f(CW\*(C`(char *host, time_t *timep)\*(C'\fR,
but when the function is called as \f(CW\*(C`x_gettime()\*(C'\fR its parameters are
reversed, \f(CW\*(C`(time_t *timep, char *host)\*(C'\fR.
.PP
.Vb 10
\&    long
\&    rpcb_gettime(a,b)
\&      CASE: ix == 1
\&        ALIAS:
\&          x_gettime = 1
\&        INPUT:
\&          # \*(Aqa\*(Aq is timep, \*(Aqb\*(Aq is host
\&          char *b
\&          time_t a = NO_INIT
\&        CODE:
\&               RETVAL = rpcb_gettime( b, &a );
\&        OUTPUT:
\&          a
\&          RETVAL
\&      CASE:
\&          # \*(Aqa\*(Aq is host, \*(Aqb\*(Aq is timep
\&          char *a
\&          time_t &b = NO_INIT
\&        OUTPUT:
\&          b
\&          RETVAL
.Ve
.PP
That function can be called with either of the following statements.  Note
the different argument lists.
.PP
.Vb 1
\&        $status = rpcb_gettime( $host, $timep );
\&
\&        $status = x_gettime( $timep, $host );
.Ve
.SS "The \s-1EXPORT_XSUB_SYMBOLS:\s0 Keyword"
.IX Subsection "The EXPORT_XSUB_SYMBOLS: Keyword"
The \s-1EXPORT_XSUB_SYMBOLS:\s0 keyword is likely something you will never need.
In perl versions earlier than 5.16.0, this keyword does nothing. Starting
with 5.16, \s-1XSUB\s0 symbols are no longer exported by default. That is, they
are \f(CW\*(C`static\*(C'\fR functions. If you include
.PP
.Vb 1
\&  EXPORT_XSUB_SYMBOLS: ENABLE
.Ve
.PP
in your \s-1XS\s0 code, the XSUBs following this line will not be declared \f(CW\*(C`static\*(C'\fR.
You can later disable this with
.PP
.Vb 1
\&  EXPORT_XSUB_SYMBOLS: DISABLE
.Ve
.PP
which, again, is the default that you should probably never change.
You cannot use this keyword on versions of perl before 5.16 to make
XSUBs \f(CW\*(C`static\*(C'\fR.
.SS "The & Unary Operator"
.IX Subsection "The & Unary Operator"
The \f(CW\*(C`&\*(C'\fR unary operator in the \s-1INPUT:\s0 section is used to tell \fBxsubpp\fR
that it should convert a Perl value to/from C using the C type to the left
of \f(CW\*(C`&\*(C'\fR, but provide a pointer to this value when the C function is called.
.PP
This is useful to avoid a \s-1CODE:\s0 block for a C function which takes a parameter
by reference.  Typically, the parameter should be not a pointer type (an
\&\f(CW\*(C`int\*(C'\fR or \f(CW\*(C`long\*(C'\fR but not an \f(CW\*(C`int*\*(C'\fR or \f(CW\*(C`long*\*(C'\fR).
.PP
The following \s-1XSUB\s0 will generate incorrect C code.  The \fBxsubpp\fR compiler will
turn this into code which calls \f(CW\*(C`rpcb_gettime()\*(C'\fR with parameters \f(CW\*(C`(char
*host, time_t timep)\*(C'\fR, but the real \f(CW\*(C`rpcb_gettime()\*(C'\fR wants the \f(CW\*(C`timep\*(C'\fR
parameter to be of type \f(CW\*(C`time_t*\*(C'\fR rather than \f(CW\*(C`time_t\*(C'\fR.
.PP
.Vb 6
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t timep
\&        OUTPUT:
\&          timep
.Ve
.PP
That problem is corrected by using the \f(CW\*(C`&\*(C'\fR operator.  The \fBxsubpp\fR compiler
will now turn this into code which calls \f(CW\*(C`rpcb_gettime()\*(C'\fR correctly with
parameters \f(CW\*(C`(char *host, time_t *timep)\*(C'\fR.  It does this by carrying the
\&\f(CW\*(C`&\*(C'\fR through, so the function call looks like \f(CW\*(C`rpcb_gettime(host, &timep)\*(C'\fR.
.PP
.Vb 6
\&    bool_t
\&    rpcb_gettime(host,timep)
\&          char *host
\&          time_t &timep
\&        OUTPUT:
\&          timep
.Ve
.SS "Inserting \s-1POD,\s0 Comments and C Preprocessor Directives"
.IX Subsection "Inserting POD, Comments and C Preprocessor Directives"
C preprocessor directives are allowed within \s-1BOOT:, PREINIT: INIT:, CODE:,
PPCODE:, POSTCALL:,\s0 and \s-1CLEANUP:\s0 blocks, as well as outside the functions.
Comments are allowed anywhere after the \s-1MODULE\s0 keyword.  The compiler will
pass the preprocessor directives through untouched and will remove the
commented lines. \s-1POD\s0 documentation is allowed at any point, both in the
C and \s-1XS\s0 language sections. \s-1POD\s0 must be terminated with a \f(CW\*(C`=cut\*(C'\fR command;
\&\f(CW\*(C`xsubpp\*(C'\fR will exit with an error if it does not. It is very unlikely that
human generated C code will be mistaken for \s-1POD,\s0 as most indenting styles
result in whitespace in front of any line starting with \f(CW\*(C`=\*(C'\fR. Machine
generated \s-1XS\s0 files may fall into this trap unless care is taken to
ensure that a space breaks the sequence \*(L"\en=\*(R".
.PP
Comments can be added to XSUBs by placing a \f(CW\*(C`#\*(C'\fR as the first
non-whitespace of a line.  Care should be taken to avoid making the
comment look like a C preprocessor directive, lest it be interpreted as
such.  The simplest way to prevent this is to put whitespace in front of
the \f(CW\*(C`#\*(C'\fR.
.PP
If you use preprocessor directives to choose one of two
versions of a function, use
.PP
.Vb 3
\&    #if ... version1
\&    #else /* ... version2  */
\&    #endif
.Ve
.PP
and not
.PP
.Vb 4
\&    #if ... version1
\&    #endif
\&    #if ... version2
\&    #endif
.Ve
.PP
because otherwise \fBxsubpp\fR will believe that you made a duplicate
definition of the function.  Also, put a blank line before the
#else/#endif so it will not be seen as part of the function body.
.SS "Using \s-1XS\s0 With \*(C+"
.IX Subsection "Using XS With "
If an \s-1XSUB\s0 name contains \f(CW\*(C`::\*(C'\fR, it is considered to be a \*(C+ method.
The generated Perl function will assume that
its first argument is an object pointer.  The object pointer
will be stored in a variable called \s-1THIS. \s0 The object should
have been created by \*(C+ with the \fInew()\fR function and should
be blessed by Perl with the \fIsv_setref_pv()\fR macro.  The
blessing of the object by Perl can be handled by a typemap.  An example
typemap is shown at the end of this section.
.PP
If the return type of the \s-1XSUB\s0 includes \f(CW\*(C`static\*(C'\fR, the method is considered
to be a static method.  It will call the \*(C+
function using the \fIclass::method()\fR syntax.  If the method is not static
the function will be called using the \s-1THIS\-\s0>\fImethod()\fR syntax.
.PP
The next examples will use the following \*(C+ class.
.PP
.Vb 6
\&     class color {
\&          public:
\&          color();
\&          ~color();
\&          int blue();
\&          void set_blue( int );
\&
\&          private:
\&          int c_blue;
\&     };
.Ve
.PP
The XSUBs for the \fIblue()\fR and \fIset_blue()\fR methods are defined with the class
name but the parameter for the object (\s-1THIS,\s0 or \*(L"self\*(R") is implicit and is
not listed.
.PP
.Vb 2
\&     int
\&     color::blue()
\&
\&     void
\&     color::set_blue( val )
\&          int val
.Ve
.PP
Both Perl functions will expect an object as the first parameter.  In the
generated \*(C+ code the object is called \f(CW\*(C`THIS\*(C'\fR, and the method call will
be performed on this object.  So in the \*(C+ code the \fIblue()\fR and \fIset_blue()\fR
methods will be called as this:
.PP
.Vb 1
\&     RETVAL = THIS\->blue();
\&
\&     THIS\->set_blue( val );
.Ve
.PP
You could also write a single get/set method using an optional argument:
.PP
.Vb 10
\&     int
\&     color::blue( val = NO_INIT )
\&         int val
\&         PROTOTYPE $;$
\&         CODE:
\&             if (items > 1)
\&                 THIS\->set_blue( val );
\&             RETVAL = THIS\->blue();
\&         OUTPUT:
\&             RETVAL
.Ve
.PP
If the function's name is \fB\s-1DESTROY\s0\fR then the \*(C+ \f(CW\*(C`delete\*(C'\fR function will be
called and \f(CW\*(C`THIS\*(C'\fR will be given as its parameter.  The generated \*(C+ code for
.PP
.Vb 2
\&     void
\&     color::DESTROY()
.Ve
.PP
will look like this:
.PP
.Vb 1
\&     color *THIS = ...; // Initialized as in typemap
\&
\&     delete THIS;
.Ve
.PP
If the function's name is \fBnew\fR then the \*(C+ \f(CW\*(C`new\*(C'\fR function will be called
to create a dynamic \*(C+ object.  The \s-1XSUB\s0 will expect the class name, which
will be kept in a variable called \f(CW\*(C`CLASS\*(C'\fR, to be given as the first
argument.
.PP
.Vb 2
\&     color *
\&     color::new()
.Ve
.PP
The generated \*(C+ code will call \f(CW\*(C`new\*(C'\fR.
.PP
.Vb 1
\&     RETVAL = new color();
.Ve
.PP
The following is an example of a typemap that could be used for this \*(C+
example.
.PP
.Vb 2
\&    TYPEMAP
\&    color *             O_OBJECT
\&
\&    OUTPUT
\&    # The Perl object is blessed into \*(AqCLASS\*(Aq, which should be a
\&    # char* having the name of the package for the blessing.
\&    O_OBJECT
\&        sv_setref_pv( $arg, CLASS, (void*)$var );
\&
\&    INPUT
\&    O_OBJECT
\&        if( sv_isobject($arg) && (SvTYPE(SvRV($arg)) == SVt_PVMG) )
\&                $var = ($type)SvIV((SV*)SvRV( $arg ));
\&        else{
\&                warn( \e"${Package}::$func_name() \-\- $var is not a blessed SV reference\e" );
\&                XSRETURN_UNDEF;
\&        }
.Ve
.SS "Interface Strategy"
.IX Subsection "Interface Strategy"
When designing an interface between Perl and a C library a straight
translation from C to \s-1XS \s0(such as created by \f(CW\*(C`h2xs \-x\*(C'\fR) is often sufficient.
However, sometimes the interface will look
very C\-like and occasionally nonintuitive, especially when the C function
modifies one of its parameters, or returns failure inband (as in \*(L"negative
return values mean failure\*(R").  In cases where the programmer wishes to
create a more Perl-like interface the following strategy may help to
identify the more critical parts of the interface.
.PP
Identify the C functions with input/output or output parameters.  The XSUBs for
these functions may be able to return lists to Perl.
.PP
Identify the C functions which use some inband info as an indication
of failure.  They may be
candidates to return undef or an empty list in case of failure.  If the
failure may be detected without a call to the C function, you may want to use
an \s-1INIT:\s0 section to report the failure.  For failures detectable after the C
function returns one may want to use a \s-1POSTCALL:\s0 section to process the
failure.  In more complicated cases use \s-1CODE:\s0 or \s-1PPCODE:\s0 sections.
.PP
If many functions use the same failure indication based on the return value,
you may want to create a special typedef to handle this situation.  Put
.PP
.Vb 1
\&  typedef int negative_is_failure;
.Ve
.PP
near the beginning of \s-1XS\s0 file, and create an \s-1OUTPUT\s0 typemap entry
for \f(CW\*(C`negative_is_failure\*(C'\fR which converts negative values to \f(CW\*(C`undef\*(C'\fR, or
maybe \fIcroak()\fRs.  After this the return value of type \f(CW\*(C`negative_is_failure\*(C'\fR
will create more Perl-like interface.
.PP
Identify which values are used by only the C and \s-1XSUB\s0 functions
themselves, say, when a parameter to a function should be a contents of a
global variable.  If Perl does not need to access the contents of the value
then it may not be necessary to provide a translation for that value
from C to Perl.
.PP
Identify the pointers in the C function parameter lists and return
values.  Some pointers may be used to implement input/output or
output parameters, they can be handled in \s-1XS\s0 with the \f(CW\*(C`&\*(C'\fR unary operator,
and, possibly, using the \s-1NO_INIT\s0 keyword.
Some others will require handling of types like \f(CW\*(C`int *\*(C'\fR, and one needs
to decide what a useful Perl translation will do in such a case.  When
the semantic is clear, it is advisable to put the translation into a typemap
file.
.PP
Identify the structures used by the C functions.  In many
cases it may be helpful to use the T_PTROBJ typemap for
these structures so they can be manipulated by Perl as
blessed objects.  (This is handled automatically by \f(CW\*(C`h2xs \-x\*(C'\fR.)
.PP
If the same C type is used in several different contexts which require
different translations, \f(CW\*(C`typedef\*(C'\fR several new types mapped to this C type,
and create separate \fItypemap\fR entries for these new types.  Use these
types in declarations of return type and parameters to XSUBs.
.SS "Perl Objects And C Structures"
.IX Subsection "Perl Objects And C Structures"
When dealing with C structures one should select either
\&\fBT_PTROBJ\fR or \fBT_PTRREF\fR for the \s-1XS\s0 type.  Both types are
designed to handle pointers to complex objects.  The
T_PTRREF type will allow the Perl object to be unblessed
while the T_PTROBJ type requires that the object be blessed.
By using T_PTROBJ one can achieve a form of type-checking
because the \s-1XSUB\s0 will attempt to verify that the Perl object
is of the expected type.
.PP
The following \s-1XS\s0 code shows the \fIgetnetconfigent()\fR function which is used
with \s-1ONC+ TIRPC. \s0 The \fIgetnetconfigent()\fR function will return a pointer to a
C structure and has the C prototype shown below.  The example will
demonstrate how the C pointer will become a Perl reference.  Perl will
consider this reference to be a pointer to a blessed object and will
attempt to call a destructor for the object.  A destructor will be
provided in the \s-1XS\s0 source to free the memory used by \fIgetnetconfigent()\fR.
Destructors in \s-1XS\s0 can be created by specifying an \s-1XSUB\s0 function whose name
ends with the word \fB\s-1DESTROY\s0\fR.  \s-1XS\s0 destructors can be used to free memory
which may have been malloc'd by another \s-1XSUB.\s0
.PP
.Vb 1
\&     struct netconfig *getnetconfigent(const char *netid);
.Ve
.PP
A \f(CW\*(C`typedef\*(C'\fR will be created for \f(CW\*(C`struct netconfig\*(C'\fR.  The Perl
object will be blessed in a class matching the name of the C
type, with the tag \f(CW\*(C`Ptr\*(C'\fR appended, and the name should not
have embedded spaces if it will be a Perl package name.  The
destructor will be placed in a class corresponding to the
class of the object and the \s-1PREFIX\s0 keyword will be used to
trim the name to the word \s-1DESTROY\s0 as Perl will expect.
.PP
.Vb 1
\&     typedef struct netconfig Netconfig;
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     Netconfig *
\&     getnetconfigent(netid)
\&          char *netid
\&
\&     MODULE = RPC  PACKAGE = NetconfigPtr  PREFIX = rpcb_
\&
\&     void
\&     rpcb_DESTROY(netconf)
\&          Netconfig *netconf
\&        CODE:
\&          printf("Now in NetconfigPtr::DESTROY\en");
\&          free( netconf );
.Ve
.PP
This example requires the following typemap entry.  Consult
perlxstypemap for more information about adding new typemaps
for an extension.
.PP
.Vb 2
\&     TYPEMAP
\&     Netconfig *  T_PTROBJ
.Ve
.PP
This example will be used with the following Perl statements.
.PP
.Vb 2
\&     use RPC;
\&     $netconf = getnetconfigent("udp");
.Ve
.PP
When Perl destroys the object referenced by \f(CW$netconf\fR it will send the
object to the supplied \s-1XSUB DESTROY\s0 function.  Perl cannot determine, and
does not care, that this object is a C struct and not a Perl object.  In
this sense, there is no difference between the object created by the
\&\fIgetnetconfigent()\fR \s-1XSUB\s0 and an object created by a normal Perl subroutine.
.SS "Safely Storing Static Data in \s-1XS\s0"
.IX Subsection "Safely Storing Static Data in XS"
Starting with Perl 5.8, a macro framework has been defined to allow
static data to be safely stored in \s-1XS\s0 modules that will be accessed from
a multi-threaded Perl.
.PP
Although primarily designed for use with multi-threaded Perl, the macros
have been designed so that they will work with non-threaded Perl as well.
.PP
It is therefore strongly recommended that these macros be used by all
\&\s-1XS\s0 modules that make use of static data.
.PP
The easiest way to get a template set of macros to use is by specifying
the \f(CW\*(C`\-g\*(C'\fR (\f(CW\*(C`\-\-global\*(C'\fR) option with h2xs (see h2xs).
.PP
Below is an example module that makes use of the macros.
.PP
.Vb 3
\&    #include "EXTERN.h"
\&    #include "perl.h"
\&    #include "XSUB.h"
\&
\&    /* Global Data */
\&
\&    #define MY_CXT_KEY "BlindMice::_guts" XS_VERSION
\&
\&    typedef struct {
\&        int count;
\&        char name[3][100];
\&    } my_cxt_t;
\&
\&    START_MY_CXT
\&
\&    MODULE = BlindMice           PACKAGE = BlindMice
\&
\&    BOOT:
\&    {
\&        MY_CXT_INIT;
\&        MY_CXT.count = 0;
\&        strcpy(MY_CXT.name[0], "None");
\&        strcpy(MY_CXT.name[1], "None");
\&        strcpy(MY_CXT.name[2], "None");
\&    }
\&
\&    int
\&    newMouse(char * name)
\&        char * name;
\&        PREINIT:
\&          dMY_CXT;
\&        CODE:
\&          if (MY_CXT.count >= 3) {
\&              warn("Already have 3 blind mice");
\&              RETVAL = 0;
\&          }
\&          else {
\&              RETVAL = ++ MY_CXT.count;
\&              strcpy(MY_CXT.name[MY_CXT.count \- 1], name);
\&          }
\&
\&    char *
\&    get_mouse_name(index)
\&      int index
\&      CODE:
\&        dMY_CXT;
\&        RETVAL = MY_CXT.lives ++;
\&        if (index > MY_CXT.count)
\&          croak("There are only 3 blind mice.");
\&        else
\&          RETVAL = newSVpv(MY_CXT.name[index \- 1]);
\&
\&    void
\&    CLONE(...)
\&        CODE:
\&        MY_CXT_CLONE;
.Ve
.PP
\&\fB\s-1REFERENCE\s0\fR
.IP "\s-1MY_CXT_KEY\s0" 5
.IX Item "MY_CXT_KEY"
This macro is used to define a unique key to refer to the static data
for an \s-1XS\s0 module. The suggested naming scheme, as used by h2xs, is to
use a string that consists of the module name, the string \*(L"::_guts\*(R"
and the module version number.
.Sp
.Vb 1
\&    #define MY_CXT_KEY "MyModule::_guts" XS_VERSION
.Ve
.IP "typedef my_cxt_t" 5
.IX Item "typedef my_cxt_t"
This struct typedef \fImust\fR always be called \f(CW\*(C`my_cxt_t\*(C'\fR. The other
\&\f(CW\*(C`CXT*\*(C'\fR macros assume the existence of the \f(CW\*(C`my_cxt_t\*(C'\fR typedef name.
.Sp
Declare a typedef named \f(CW\*(C`my_cxt_t\*(C'\fR that is a structure that contains
all the data that needs to be interpreter-local.
.Sp
.Vb 3
\&    typedef struct {
\&        int some_value;
\&    } my_cxt_t;
.Ve
.IP "\s-1START_MY_CXT\s0" 5
.IX Item "START_MY_CXT"
Always place the \s-1START_MY_CXT\s0 macro directly after the declaration
of \f(CW\*(C`my_cxt_t\*(C'\fR.
.IP "\s-1MY_CXT_INIT\s0" 5
.IX Item "MY_CXT_INIT"
The \s-1MY_CXT_INIT\s0 macro initialises storage for the \f(CW\*(C`my_cxt_t\*(C'\fR struct.
.Sp
It \fImust\fR be called exactly once, typically in a \s-1BOOT:\s0 section. If you
are maintaining multiple interpreters, it should be called once in each
interpreter instance, except for interpreters cloned from existing ones.
(But see \*(L"\s-1MY_CXT_CLONE\*(R"\s0 below.)
.IP "dMY_CXT" 5
.IX Item "dMY_CXT"
Use the dMY_CXT macro (a declaration) in all the functions that access
\&\s-1MY_CXT.\s0
.IP "\s-1MY_CXT\s0" 5
.IX Item "MY_CXT"
Use the \s-1MY_CXT\s0 macro to access members of the \f(CW\*(C`my_cxt_t\*(C'\fR struct. For
example, if \f(CW\*(C`my_cxt_t\*(C'\fR is
.Sp
.Vb 3
\&    typedef struct {
\&        int index;
\&    } my_cxt_t;
.Ve
.Sp
then use this to access the \f(CW\*(C`index\*(C'\fR member
.Sp
.Vb 2
\&    dMY_CXT;
\&    MY_CXT.index = 2;
.Ve
.IP "aMY_CXT/pMY_CXT" 5
.IX Item "aMY_CXT/pMY_CXT"
\&\f(CW\*(C`dMY_CXT\*(C'\fR may be quite expensive to calculate, and to avoid the overhead
of invoking it in each function it is possible to pass the declaration
onto other functions using the \f(CW\*(C`aMY_CXT\*(C'\fR/\f(CW\*(C`pMY_CXT\*(C'\fR macros, eg
.Sp
.Vb 5
\&    void sub1() {
\&        dMY_CXT;
\&        MY_CXT.index = 1;
\&        sub2(aMY_CXT);
\&    }
\&
\&    void sub2(pMY_CXT) {
\&        MY_CXT.index = 2;
\&    }
.Ve
.Sp
Analogously to \f(CW\*(C`pTHX\*(C'\fR, there are equivalent forms for when the macro is the
first or last in multiple arguments, where an underscore represents a
comma, i.e.  \f(CW\*(C`_aMY_CXT\*(C'\fR, \f(CW\*(C`aMY_CXT_\*(C'\fR, \f(CW\*(C`_pMY_CXT\*(C'\fR and \f(CW\*(C`pMY_CXT_\*(C'\fR.
.IP "\s-1MY_CXT_CLONE\s0" 5
.IX Item "MY_CXT_CLONE"
By default, when a new interpreter is created as a copy of an existing one
(eg via \f(CW\*(C`threads\->create()\*(C'\fR), both interpreters share the same physical
my_cxt_t structure. Calling \f(CW\*(C`MY_CXT_CLONE\*(C'\fR (typically via the package's
\&\f(CW\*(C`CLONE()\*(C'\fR function), causes a byte-for-byte copy of the structure to be
taken, and any future dMY_CXT will cause the copy to be accessed instead.
.IP "\s-1MY_CXT_INIT_INTERP\s0(my_perl)" 5
.IX Item "MY_CXT_INIT_INTERP(my_perl)"
.PD 0
.IP "dMY_CXT_INTERP(my_perl)" 5
.IX Item "dMY_CXT_INTERP(my_perl)"
.PD
These are versions of the macros which take an explicit interpreter as an
argument.
.PP
Note that these macros will only work together within the \fIsame\fR source
file; that is, a dMY_CTX in one source file will access a different structure
than a dMY_CTX in another source file.
.SS "Thread-aware system interfaces"
.IX Subsection "Thread-aware system interfaces"
Starting from Perl 5.8, in C/\*(C+ level Perl knows how to wrap
system/library interfaces that have thread-aware versions
(e.g. \fIgetpwent_r()\fR) into frontend macros (e.g. \fIgetpwent()\fR) that
correctly handle the multithreaded interaction with the Perl
interpreter.  This will happen transparently, the only thing
you need to do is to instantiate a Perl interpreter.
.PP
This wrapping happens always when compiling Perl core source
(\s-1PERL_CORE\s0 is defined) or the Perl core extensions (\s-1PERL_EXT\s0 is
defined).  When compiling \s-1XS\s0 code outside of Perl core the wrapping
does not take place.  Note, however, that intermixing the _r\-forms
(as Perl compiled for multithreaded operation will do) and the _r\-less
forms is neither well-defined (inconsistent results, data corruption,
or even crashes become more likely), nor is it very portable.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
File \f(CW\*(C`RPC.xs\*(C'\fR: Interface to some \s-1ONC+ RPC\s0 bind library functions.
.PP
.Vb 3
\&     #include "EXTERN.h"
\&     #include "perl.h"
\&     #include "XSUB.h"
\&
\&     #include <rpc/rpc.h>
\&
\&     typedef struct netconfig Netconfig;
\&
\&     MODULE = RPC  PACKAGE = RPC
\&
\&     SV *
\&     rpcb_gettime(host="localhost")
\&          char *host
\&        PREINIT:
\&          time_t  timep;
\&        CODE:
\&          ST(0) = sv_newmortal();
\&          if( rpcb_gettime( host, &timep ) )
\&               sv_setnv( ST(0), (double)timep );
\&
\&     Netconfig *
\&     getnetconfigent(netid="udp")
\&          char *netid
\&
\&     MODULE = RPC  PACKAGE = NetconfigPtr  PREFIX = rpcb_
\&
\&     void
\&     rpcb_DESTROY(netconf)
\&          Netconfig *netconf
\&        CODE:
\&          printf("NetconfigPtr::DESTROY\en");
\&          free( netconf );
.Ve
.PP
File \f(CW\*(C`typemap\*(C'\fR: Custom typemap for \s-1RPC\s0.xs. (cf. perlxstypemap)
.PP
.Vb 2
\&     TYPEMAP
\&     Netconfig *  T_PTROBJ
.Ve
.PP
File \f(CW\*(C`RPC.pm\*(C'\fR: Perl module for the \s-1RPC\s0 extension.
.PP
.Vb 1
\&     package RPC;
\&
\&     require Exporter;
\&     require DynaLoader;
\&     @ISA = qw(Exporter DynaLoader);
\&     @EXPORT = qw(rpcb_gettime getnetconfigent);
\&
\&     bootstrap RPC;
\&     1;
.Ve
.PP
File \f(CW\*(C`rpctest.pl\*(C'\fR: Perl test program for the \s-1RPC\s0 extension.
.PP
.Vb 1
\&     use RPC;
\&
\&     $netconf = getnetconfigent();
\&     $a = rpcb_gettime();
\&     print "time = $a\en";
\&     print "netconf = $netconf\en";
\&
\&     $netconf = getnetconfigent("tcp");
\&     $a = rpcb_gettime("poplar");
\&     print "time = $a\en";
\&     print "netconf = $netconf\en";
.Ve
.SH "XS VERSION"
.IX Header "XS VERSION"
This document covers features supported by \f(CW\*(C`ExtUtils::ParseXS\*(C'\fR
(also known as \f(CW\*(C`xsubpp\*(C'\fR) 3.13_01.
.SH "AUTHOR"
.IX Header "AUTHOR"
Originally written by Dean Roehrich <\fIroehrich@cray.com\fR>.
.PP
Maintained since 1996 by The Perl Porters <\fIperlbug@perl.org\fR>.
                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man1/perlxstut.1                                  0100644 0001750 0001750 00000172440 12566207450 023021  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLXSTUT 1"
.TH PERLXSTUT 1 "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
perlxstut \- Tutorial for writing XSUBs
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This tutorial will educate the reader on the steps involved in creating
a Perl extension.  The reader is assumed to have access to perlguts,
perlapi and perlxs.
.PP
This tutorial starts with very simple examples and becomes more complex,
with each new example adding new features.  Certain concepts may not be
completely explained until later in the tutorial in order to slowly ease
the reader into building extensions.
.PP
This tutorial was written from a Unix point of view.  Where I know them
to be otherwise different for other platforms (e.g. Win32), I will list
them.  If you find something that was missed, please let me know.
.SH "SPECIAL NOTES"
.IX Header "SPECIAL NOTES"
.SS "make"
.IX Subsection "make"
This tutorial assumes that the make program that Perl is configured to
use is called \f(CW\*(C`make\*(C'\fR.  Instead of running \*(L"make\*(R" in the examples that
follow, you may have to substitute whatever make program Perl has been
configured to use.  Running \fBperl \-V:make\fR should tell you what it is.
.SS "Version caveat"
.IX Subsection "Version caveat"
When writing a Perl extension for general consumption, one should expect that
the extension will be used with versions of Perl different from the
version available on your machine.  Since you are reading this document,
the version of Perl on your machine is probably 5.005 or later, but the users
of your extension may have more ancient versions.
.PP
To understand what kinds of incompatibilities one may expect, and in the rare
case that the version of Perl on your machine is older than this document,
see the section on \*(L"Troubleshooting these Examples\*(R" for more information.
.PP
If your extension uses some features of Perl which are not available on older
releases of Perl, your users would appreciate an early meaningful warning.
You would probably put this information into the \fI\s-1README\s0\fR file, but nowadays
installation of extensions may be performed automatically, guided by \fI\s-1CPAN\s0.pm\fR
module or other tools.
.PP
In MakeMaker-based installations, \fIMakefile.PL\fR provides the earliest
opportunity to perform version checks.  One can put something like this
in \fIMakefile.PL\fR for this purpose:
.PP
.Vb 7
\&    eval { require 5.007 }
\&        or die <<EOD;
\&    ############
\&    ### This module uses frobnication framework which is not available before
\&    ### version 5.007 of Perl.  Upgrade your Perl before installing Kara::Mba.
\&    ############
\&    EOD
.Ve
.SS "Dynamic Loading versus Static Loading"
.IX Subsection "Dynamic Loading versus Static Loading"
It is commonly thought that if a system does not have the capability to
dynamically load a library, you cannot build XSUBs.  This is incorrect.
You \fIcan\fR build them, but you must link the XSUBs subroutines with the
rest of Perl, creating a new executable.  This situation is similar to
Perl 4.
.PP
This tutorial can still be used on such a system.  The \s-1XSUB\s0 build mechanism
will check the system and build a dynamically-loadable library if possible,
or else a static library and then, optionally, a new statically-linked
executable with that static library linked in.
.PP
Should you wish to build a statically-linked executable on a system which
can dynamically load libraries, you may, in all the following examples,
where the command "\f(CW\*(C`make\*(C'\fR\*(L" with no arguments is executed, run the command
\&\*(R"\f(CW\*(C`make perl\*(C'\fR" instead.
.PP
If you have generated such a statically-linked executable by choice, then
instead of saying "\f(CW\*(C`make test\*(C'\fR\*(L", you should say \*(R"\f(CW\*(C`make test_static\*(C'\fR\*(L".
On systems that cannot build dynamically-loadable libraries at all, simply
saying \*(R"\f(CW\*(C`make test\*(C'\fR" is sufficient.
.SH "TUTORIAL"
.IX Header "TUTORIAL"
Now let's go on with the show!
.SS "\s-1EXAMPLE 1\s0"
.IX Subsection "EXAMPLE 1"
Our first extension will be very simple.  When we call the routine in the
extension, it will print out a well-known message and return.
.PP
Run "\f(CW\*(C`h2xs \-A \-n Mytest\*(C'\fR".  This creates a directory named Mytest,
possibly under ext/ if that directory exists in the current working
directory.  Several files will be created under the Mytest dir, including
\&\s-1MANIFEST,\s0 Makefile.PL, lib/Mytest.pm, Mytest.xs, t/Mytest.t, and Changes.
.PP
The \s-1MANIFEST\s0 file contains the names of all the files just created in the
Mytest directory.
.PP
The file Makefile.PL should look something like this:
.PP
.Vb 10
\&    use ExtUtils::MakeMaker;
\&    # See lib/ExtUtils/MakeMaker.pm for details of how to influence
\&    # the contents of the Makefile that is written.
\&    WriteMakefile(
\&        NAME         => \*(AqMytest\*(Aq,
\&        VERSION_FROM => \*(AqMytest.pm\*(Aq, # finds $VERSION
\&        LIBS         => [\*(Aq\*(Aq],   # e.g., \*(Aq\-lm\*(Aq
\&        DEFINE       => \*(Aq\*(Aq,     # e.g., \*(Aq\-DHAVE_SOMETHING\*(Aq
\&        INC          => \*(Aq\*(Aq,     # e.g., \*(Aq\-I/usr/include/other\*(Aq
\&    );
.Ve
.PP
The file Mytest.pm should start with something like this:
.PP
.Vb 1
\&    package Mytest;
\&
\&    use 5.008008;
\&    use strict;
\&    use warnings;
\&
\&    require Exporter;
\&
\&    our @ISA = qw(Exporter);
\&    our %EXPORT_TAGS = ( \*(Aqall\*(Aq => [ qw(
\&
\&    ) ] );
\&
\&    our @EXPORT_OK = ( @{ $EXPORT_TAGS{\*(Aqall\*(Aq} } );
\&
\&    our @EXPORT = qw(
\&
\&    );
\&
\&    our $VERSION = \*(Aq0.01\*(Aq;
\&
\&    require XSLoader;
\&    XSLoader::load(\*(AqMytest\*(Aq, $VERSION);
\&
\&    # Preloaded methods go here.
\&
\&    1;
\&    _\|_END_\|_
\&    # Below is the stub of documentation for your module. You better edit it!
.Ve
.PP
The rest of the .pm file contains sample code for providing documentation for
the extension.
.PP
Finally, the Mytest.xs file should look something like this:
.PP
.Vb 3
\&    #include "EXTERN.h"
\&    #include "perl.h"
\&    #include "XSUB.h"
\&
\&    #include "ppport.h"
\&
\&    MODULE = Mytest             PACKAGE = Mytest
.Ve
.PP
Let's edit the .xs file by adding this to the end of the file:
.PP
.Vb 4
\&    void
\&    hello()
\&        CODE:
\&            printf("Hello, world!\en");
.Ve
.PP
It is okay for the lines starting at the \*(L"\s-1CODE:\*(R"\s0 line to not be indented.
However, for readability purposes, it is suggested that you indent \s-1CODE:\s0
one level and the lines following one more level.
.PP
Now we'll run "\f(CW\*(C`perl Makefile.PL\*(C'\fR".  This will create a real Makefile,
which make needs.  Its output looks something like:
.PP
.Vb 5
\&    % perl Makefile.PL
\&    Checking if your kit is complete...
\&    Looks good
\&    Writing Makefile for Mytest
\&    %
.Ve
.PP
Now, running make will produce output that looks something like this (some
long lines have been shortened for clarity and some extraneous lines have
been deleted):
.PP
.Vb 10
\&    % make
\&    cp lib/Mytest.pm blib/lib/Mytest.pm
\&    perl xsubpp  \-typemap typemap  Mytest.xs > Mytest.xsc && mv Mytest.xsc Mytest.c
\&    Please specify prototyping behavior for Mytest.xs (see perlxs manual)
\&    cc \-c     Mytest.c
\&    Running Mkbootstrap for Mytest ()
\&    chmod 644 Mytest.bs
\&    rm \-f blib/arch/auto/Mytest/Mytest.so
\&    cc  \-shared \-L/usr/local/lib Mytest.o  \-o blib/arch/auto/Mytest/Mytest.so   \e
\&                \e
\&
\&    chmod 755 blib/arch/auto/Mytest/Mytest.so
\&    cp Mytest.bs blib/arch/auto/Mytest/Mytest.bs
\&    chmod 644 blib/arch/auto/Mytest/Mytest.bs
\&    Manifying blib/man3/Mytest.3pm
\&    %
.Ve
.PP
You can safely ignore the line about \*(L"prototyping behavior\*(R" \- it is
explained in \*(L"The \s-1PROTOTYPES:\s0 Keyword\*(R" in perlxs.
.PP
Perl has its own special way of easily writing test scripts, but for this
example only, we'll create our own test script.  Create a file called hello
that looks like this:
.PP
.Vb 1
\&    #! /opt/perl5/bin/perl
\&
\&    use ExtUtils::testlib;
\&
\&    use Mytest;
\&
\&    Mytest::hello();
.Ve
.PP
Now we make the script executable (\f(CW\*(C`chmod +x hello\*(C'\fR), run the script
and we should see the following output:
.PP
.Vb 3
\&    % ./hello
\&    Hello, world!
\&    %
.Ve
.SS "\s-1EXAMPLE 2\s0"
.IX Subsection "EXAMPLE 2"
Now let's add to our extension a subroutine that will take a single numeric
argument as input and return 1 if the number is even or 0 if the number
is odd.
.PP
Add the following to the end of Mytest.xs:
.PP
.Vb 7
\&    int
\&    is_even(input)
\&            int input
\&        CODE:
\&            RETVAL = (input % 2 == 0);
\&        OUTPUT:
\&            RETVAL
.Ve
.PP
There does not need to be whitespace at the start of the "\f(CW\*(C`int input\*(C'\fR\*(L"
line, but it is useful for improving readability.  Placing a semi-colon at
the end of that line is also optional.  Any amount and kind of whitespace
may be placed between the \*(R"\f(CW\*(C`int\*(C'\fR\*(L" and \*(R"\f(CW\*(C`input\*(C'\fR".
.PP
Now re-run make to rebuild our new shared library.
.PP
Now perform the same steps as before, generating a Makefile from the
Makefile.PL file, and running make.
.PP
In order to test that our extension works, we now need to look at the
file Mytest.t.  This file is set up to imitate the same kind of testing
structure that Perl itself has.  Within the test script, you perform a
number of tests to confirm the behavior of the extension, printing \*(L"ok\*(R"
when the test is correct, \*(L"not ok\*(R" when it is not.
.PP
.Vb 2
\&    use Test::More tests => 4;
\&    BEGIN { use_ok(\*(AqMytest\*(Aq) };
\&
\&    #########################
\&
\&    # Insert your test code below, the Test::More module is use()ed here so read
\&    # its man page ( perldoc Test::More ) for help writing this test script.
\&
\&    is(&Mytest::is_even(0), 1);
\&    is(&Mytest::is_even(1), 0);
\&    is(&Mytest::is_even(2), 1);
.Ve
.PP
We will be calling the test script through the command "\f(CW\*(C`make test\*(C'\fR".  You
should see output that looks something like this:
.PP
.Vb 6
\&    %make test
\&    PERL_DL_NONLAZY=1 /usr/bin/perl "\-MExtUtils::Command::MM" "\-e" "test_harness(0, \*(Aqblib/lib\*(Aq, \*(Aqblib/arch\*(Aq)" t/*.t
\&    t/Mytest....ok
\&    All tests successful.
\&    Files=1, Tests=4,  0 wallclock secs ( 0.03 cusr +  0.00 csys =  0.03 CPU)
\&    %
.Ve
.SS "What has gone on?"
.IX Subsection "What has gone on?"
The program h2xs is the starting point for creating extensions.  In later
examples we'll see how we can use h2xs to read header files and generate
templates to connect to C routines.
.PP
h2xs creates a number of files in the extension directory.  The file
Makefile.PL is a perl script which will generate a true Makefile to build
the extension.  We'll take a closer look at it later.
.PP
The .pm and .xs files contain the meat of the extension.  The .xs file holds
the C routines that make up the extension.  The .pm file contains routines
that tell Perl how to load your extension.
.PP
Generating the Makefile and running \f(CW\*(C`make\*(C'\fR created a directory called blib
(which stands for \*(L"build library\*(R") in the current working directory.  This
directory will contain the shared library that we will build.  Once we have
tested it, we can install it into its final location.
.PP
Invoking the test script via "\f(CW\*(C`make test\*(C'\fR" did something very important.
It invoked perl with all those \f(CW\*(C`\-I\*(C'\fR arguments so that it could find the
various files that are part of the extension.  It is \fIvery\fR important that
while you are still testing extensions that you use "\f(CW\*(C`make test\*(C'\fR\*(L".  If you
try to run the test script all by itself, you will get a fatal error.
Another reason it is important to use \*(R"\f(CW\*(C`make test\*(C'\fR\*(L" to run your test
script is that if you are testing an upgrade to an already-existing version,
using \*(R"\f(CW\*(C`make test\*(C'\fR" ensures that you will test your new extension, not the
already-existing version.
.PP
When Perl sees a \f(CW\*(C`use extension;\*(C'\fR, it searches for a file with the same name
as the \f(CW\*(C`use\*(C'\fR'd extension that has a .pm suffix.  If that file cannot be found,
Perl dies with a fatal error.  The default search path is contained in the
\&\f(CW@INC\fR array.
.PP
In our case, Mytest.pm tells perl that it will need the Exporter and Dynamic
Loader extensions.  It then sets the \f(CW@ISA\fR and \f(CW@EXPORT\fR arrays and the
\&\f(CW$VERSION\fR scalar; finally it tells perl to bootstrap the module.  Perl
will call its dynamic loader routine (if there is one) and load the shared
library.
.PP
The two arrays \f(CW@ISA\fR and \f(CW@EXPORT\fR are very important.  The \f(CW@ISA\fR
array contains a list of other packages in which to search for methods (or
subroutines) that do not exist in the current package.  This is usually
only important for object-oriented extensions (which we will talk about
much later), and so usually doesn't need to be modified.
.PP
The \f(CW@EXPORT\fR array tells Perl which of the extension's variables and
subroutines should be placed into the calling package's namespace.  Because
you don't know if the user has already used your variable and subroutine
names, it's vitally important to carefully select what to export.  Do \fInot\fR
export method or variable names \fIby default\fR without a good reason.
.PP
As a general rule, if the module is trying to be object-oriented then don't
export anything.  If it's just a collection of functions and variables, then
you can export them via another array, called \f(CW@EXPORT_OK\fR.  This array
does not automatically place its subroutine and variable names into the
namespace unless the user specifically requests that this be done.
.PP
See perlmod for more information.
.PP
The \f(CW$VERSION\fR variable is used to ensure that the .pm file and the shared
library are \*(L"in sync\*(R" with each other.  Any time you make changes to
the .pm or .xs files, you should increment the value of this variable.
.SS "Writing good test scripts"
.IX Subsection "Writing good test scripts"
The importance of writing good test scripts cannot be over-emphasized.  You
should closely follow the \*(L"ok/not ok\*(R" style that Perl itself uses, so that
it is very easy and unambiguous to determine the outcome of each test case.
When you find and fix a bug, make sure you add a test case for it.
.PP
By running "\f(CW\*(C`make test\*(C'\fR\*(L", you ensure that your Mytest.t script runs and uses
the correct version of your extension.  If you have many test cases,
save your test files in the \*(R"t\*(L" directory and use the suffix \*(R".t\*(L".
When you run \*(R"\f(CW\*(C`make test\*(C'\fR", all of these test files will be executed.
.SS "\s-1EXAMPLE 3\s0"
.IX Subsection "EXAMPLE 3"
Our third extension will take one argument as its input, round off that
value, and set the \fIargument\fR to the rounded value.
.PP
Add the following to the end of Mytest.xs:
.PP
.Vb 10
\&        void
\&        round(arg)
\&                double  arg
\&            CODE:
\&                if (arg > 0.0) {
\&                        arg = floor(arg + 0.5);
\&                } else if (arg < 0.0) {
\&                        arg = ceil(arg \- 0.5);
\&                } else {
\&                        arg = 0.0;
\&                }
\&            OUTPUT:
\&                arg
.Ve
.PP
Edit the Makefile.PL file so that the corresponding line looks like this:
.PP
.Vb 1
\&        \*(AqLIBS\*(Aq      => [\*(Aq\-lm\*(Aq],   # e.g., \*(Aq\-lm\*(Aq
.Ve
.PP
Generate the Makefile and run make.  Change the test number in Mytest.t to
\&\*(L"9\*(R" and add the following tests:
.PP
.Vb 5
\&        $i = \-1.5; &Mytest::round($i); is( $i, \-2.0 );
\&        $i = \-1.1; &Mytest::round($i); is( $i, \-1.0 );
\&        $i = 0.0; &Mytest::round($i);  is( $i,  0.0 );
\&        $i = 0.5; &Mytest::round($i);  is( $i,  1.0 );
\&        $i = 1.2; &My