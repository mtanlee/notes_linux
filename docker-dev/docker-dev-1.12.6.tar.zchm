b, __CLPK_real *__afb, __CLPK_integer *__ldafb,
        char *__equed, __CLPK_real *__s, __CLPK_real *__b,
        __CLPK_integer *__ldb, __CLPK_real *__x, __CLPK_integer *__ldx,
        __CLPK_real *__rcond, __CLPK_real *__ferr, __CLPK_real *__berr,
        __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spbtf2_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_real *__ab, __CLPK_integer *__ldab,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spbtrf_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_real *__ab, __CLPK_integer *__ldab,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spbtrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_integer *__nrhs, __CLPK_real *__ab, __CLPK_integer *__ldab,
        __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spftrf_(char *__transr, char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spftri_(char *__transr, char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spftrs_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_real *__a, __CLPK_real *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spocon_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__anorm, __CLPK_real *__rcond,
        __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spoequ_(__CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__s, __CLPK_real *__scond, __CLPK_real *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spoequb_(__CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__s, __CLPK_real *__scond, __CLPK_real *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sporfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__af,
        __CLPK_integer *__ldaf, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_real *__x, __CLPK_integer *__ldx, __CLPK_real *__ferr,
        __CLPK_real *__berr, __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sposv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sposvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__af, __CLPK_integer *__ldaf, char *__equed,
        __CLPK_real *__s, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_real *__x, __CLPK_integer *__ldx, __CLPK_real *__rcond,
        __CLPK_real *__ferr, __CLPK_real *__berr, __CLPK_real *__work,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spotf2_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spotrf_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spotri_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spotrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sppcon_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_real *__anorm, __CLPK_real *__rcond, __CLPK_real *__work,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sppequ_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_real *__s, __CLPK_real *__scond, __CLPK_real *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spprfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__ap, __CLPK_real *__afp, __CLPK_real *__b,
        __CLPK_integer *__ldb, __CLPK_real *__x, __CLPK_integer *__ldx,
        __CLPK_real *__ferr, __CLPK_real *__berr, __CLPK_real *__work,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sppsv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__ap, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sppsvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_real *__ap, __CLPK_real *__afp,
        char *__equed, __CLPK_real *__s, __CLPK_real *__b,
        __CLPK_integer *__ldb, __CLPK_real *__x, __CLPK_integer *__ldx,
        __CLPK_real *__rcond, __CLPK_real *__ferr, __CLPK_real *__berr,
        __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spptrf_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spptri_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spptrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__ap, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spstf2_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_integer *__piv, __CLPK_integer *__rank,
        __CLPK_real *__tol, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spstrf_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_integer *__piv, __CLPK_integer *__rank,
        __CLPK_real *__tol, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sptcon_(__CLPK_integer *__n, __CLPK_real *__d__, __CLPK_real *__e,
        __CLPK_real *__anorm, __CLPK_real *__rcond, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spteqr_(char *__compz, __CLPK_integer *__n, __CLPK_real *__d__,
        __CLPK_real *__e, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sptrfs_(__CLPK_integer *__n, __CLPK_integer *__nrhs, __CLPK_real *__d__,
        __CLPK_real *__e, __CLPK_real *__df, __CLPK_real *__ef,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__x,
        __CLPK_integer *__ldx, __CLPK_real *__ferr, __CLPK_real *__berr,
        __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sptsv_(__CLPK_integer *__n, __CLPK_integer *__nrhs, __CLPK_real *__d__,
        __CLPK_real *__e, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sptsvx_(char *__fact, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__d__, __CLPK_real *__e, __CLPK_real *__df,
        __CLPK_real *__ef, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_real *__x, __CLPK_integer *__ldx, __CLPK_real *__rcond,
        __CLPK_real *__ferr, __CLPK_real *__berr, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spttrf_(__CLPK_integer *__n, __CLPK_real *__d__, __CLPK_real *__e,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int spttrs_(__CLPK_integer *__n, __CLPK_integer *__nrhs, __CLPK_real *__d__,
        __CLPK_real *__e, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sptts2_(__CLPK_integer *__n, __CLPK_integer *__nrhs, __CLPK_real *__d__,
        __CLPK_real *__e, __CLPK_real *__b,
        __CLPK_integer *__ldb) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int srscl_(__CLPK_integer *__n, __CLPK_real *__sa, __CLPK_real *__sx,
        __CLPK_integer *__incx) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssbev_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_real *__ab, __CLPK_integer *__ldab,
        __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssbevd_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_real *__ab, __CLPK_integer *__ldab,
        __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssbevx_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_real *__ab, __CLPK_integer *__ldab,
        __CLPK_real *__q, __CLPK_integer *__ldq, __CLPK_real *__vl,
        __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_real *__abstol, __CLPK_integer *__m, __CLPK_real *__w,
        __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_real *__work,
        __CLPK_integer *__iwork, __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssbgst_(char *__vect, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__ka, __CLPK_integer *__kb, __CLPK_real *__ab,
        __CLPK_integer *__ldab, __CLPK_real *__bb, __CLPK_integer *__ldbb,
        __CLPK_real *__x, __CLPK_integer *__ldx, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssbgv_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__ka, __CLPK_integer *__kb, __CLPK_real *__ab,
        __CLPK_integer *__ldab, __CLPK_real *__bb, __CLPK_integer *__ldbb,
        __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssbgvd_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__ka, __CLPK_integer *__kb, __CLPK_real *__ab,
        __CLPK_integer *__ldab, __CLPK_real *__bb, __CLPK_integer *__ldbb,
        __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssbgvx_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__ka, __CLPK_integer *__kb, __CLPK_real *__ab,
        __CLPK_integer *__ldab, __CLPK_real *__bb, __CLPK_integer *__ldbb,
        __CLPK_real *__q, __CLPK_integer *__ldq, __CLPK_real *__vl,
        __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_real *__abstol, __CLPK_integer *__m, __CLPK_real *__w,
        __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_real *__work,
        __CLPK_integer *__iwork, __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssbtrd_(char *__vect, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_real *__ab, __CLPK_integer *__ldab,
        __CLPK_real *__d__, __CLPK_real *__e, __CLPK_real *__q,
        __CLPK_integer *__ldq, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssfrk_(char *__transr, char *__uplo, char *__trans, __CLPK_integer *__n,
        __CLPK_integer *__k, __CLPK_real *__alpha, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__beta,
        __CLPK_real *__c__) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int sspcon_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_integer *__ipiv, __CLPK_real *__anorm, __CLPK_real *__rcond,
        __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sspev_(char *__jobz, char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sspevd_(char *__jobz, char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sspevx_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n,
        __CLPK_real *__ap, __CLPK_real *__vl, __CLPK_real *__vu,
        __CLPK_integer *__il, __CLPK_integer *__iu, __CLPK_real *__abstol,
        __CLPK_integer *__m, __CLPK_real *__w, __CLPK_real *__z__,
        __CLPK_integer *__ldz, __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sspgst_(__CLPK_integer *__itype, char *__uplo, __CLPK_integer *__n,
        __CLPK_real *__ap, __CLPK_real *__bp,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sspgv_(__CLPK_integer *__itype, char *__jobz, char *__uplo,
        __CLPK_integer *__n, __CLPK_real *__ap, __CLPK_real *__bp,
        __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sspgvd_(__CLPK_integer *__itype, char *__jobz, char *__uplo,
        __CLPK_integer *__n, __CLPK_real *__ap, __CLPK_real *__bp,
        __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sspgvx_(__CLPK_integer *__itype, char *__jobz, char *__range, char *__uplo,
        __CLPK_integer *__n, __CLPK_real *__ap, __CLPK_real *__bp,
        __CLPK_real *__vl, __CLPK_real *__vu, __CLPK_integer *__il,
        __CLPK_integer *__iu, __CLPK_real *__abstol, __CLPK_integer *__m,
        __CLPK_real *__w, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work, __CLPK_integer *__iwork, __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssprfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__ap, __CLPK_real *__afp, __CLPK_integer *__ipiv,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__x,
        __CLPK_integer *__ldx, __CLPK_real *__ferr, __CLPK_real *__berr,
        __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sspsv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__ap, __CLPK_integer *__ipiv, __CLPK_real *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sspsvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_real *__ap, __CLPK_real *__afp,
        __CLPK_integer *__ipiv, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_real *__x, __CLPK_integer *__ldx, __CLPK_real *__rcond,
        __CLPK_real *__ferr, __CLPK_real *__berr, __CLPK_real *__work,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssptrd_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_real *__d__, __CLPK_real *__e, __CLPK_real *__tau,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssptrf_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssptri_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_integer *__ipiv, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssptrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__ap, __CLPK_integer *__ipiv, __CLPK_real *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sstebz_(char *__range, char *__order, __CLPK_integer *__n,
        __CLPK_real *__vl, __CLPK_real *__vu, __CLPK_integer *__il,
        __CLPK_integer *__iu, __CLPK_real *__abstol, __CLPK_real *__d__,
        __CLPK_real *__e, __CLPK_integer *__m, __CLPK_integer *__nsplit,
        __CLPK_real *__w, __CLPK_integer *__iblock, __CLPK_integer *__isplit,
        __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sstedc_(char *__compz, __CLPK_integer *__n, __CLPK_real *__d__,
        __CLPK_real *__e, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sstegr_(char *__jobz, char *__range, __CLPK_integer *__n,
        __CLPK_real *__d__, __CLPK_real *__e, __CLPK_real *__vl,
        __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_real *__abstol, __CLPK_integer *__m, __CLPK_real *__w,
        __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_integer *__isuppz,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sstein_(__CLPK_integer *__n, __CLPK_real *__d__, __CLPK_real *__e,
        __CLPK_integer *__m, __CLPK_real *__w, __CLPK_integer *__iblock,
        __CLPK_integer *__isplit, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work, __CLPK_integer *__iwork, __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sstemr_(char *__jobz, char *__range, __CLPK_integer *__n,
        __CLPK_real *__d__, __CLPK_real *__e, __CLPK_real *__vl,
        __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_integer *__m, __CLPK_real *__w, __CLPK_real *__z__,
        __CLPK_integer *__ldz, __CLPK_integer *__nzc, __CLPK_integer *__isuppz,
        __CLPK_logical *__tryrac, __CLPK_real *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__iwork, __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssteqr_(char *__compz, __CLPK_integer *__n, __CLPK_real *__d__,
        __CLPK_real *__e, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssterf_(__CLPK_integer *__n, __CLPK_real *__d__, __CLPK_real *__e,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sstev_(char *__jobz, __CLPK_integer *__n, __CLPK_real *__d__,
        __CLPK_real *__e, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sstevd_(char *__jobz, __CLPK_integer *__n, __CLPK_real *__d__,
        __CLPK_real *__e, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sstevr_(char *__jobz, char *__range, __CLPK_integer *__n,
        __CLPK_real *__d__, __CLPK_real *__e, __CLPK_real *__vl,
        __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_real *__abstol, __CLPK_integer *__m, __CLPK_real *__w,
        __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_integer *__isuppz,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int sstevx_(char *__jobz, char *__range, __CLPK_integer *__n,
        __CLPK_real *__d__, __CLPK_real *__e, __CLPK_real *__vl,
        __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_real *__abstol, __CLPK_integer *__m, __CLPK_real *__w,
        __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_real *__work,
        __CLPK_integer *__iwork, __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssycon_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_real *__anorm,
        __CLPK_real *__rcond, __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssyequb_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__s, __CLPK_real *__scond,
        __CLPK_real *__amax, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssyev_(char *__jobz, char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__w, __CLPK_real *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssyevd_(char *__jobz, char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__w, __CLPK_real *__work,
        __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssyevr_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__vl,
        __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_real *__abstol, __CLPK_integer *__m, __CLPK_real *__w,
        __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_integer *__isuppz,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssyevx_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__vl,
        __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_real *__abstol, __CLPK_integer *__m, __CLPK_real *__w,
        __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_real *__work,
        __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssygs2_(__CLPK_integer *__itype, char *__uplo, __CLPK_integer *__n,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssygst_(__CLPK_integer *__itype, char *__uplo, __CLPK_integer *__n,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssygv_(__CLPK_integer *__itype, char *__jobz, char *__uplo,
        __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__w,
        __CLPK_real *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssygvd_(__CLPK_integer *__itype, char *__jobz, char *__uplo,
        __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__w,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssygvx_(__CLPK_integer *__itype, char *__jobz, char *__range, char *__uplo,
        __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__vl,
        __CLPK_real *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_real *__abstol, __CLPK_integer *__m, __CLPK_real *__w,
        __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_real *__work,
        __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssyrfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__af,
        __CLPK_integer *__ldaf, __CLPK_integer *__ipiv, __CLPK_real *__b,
        __CLPK_integer *__ldb, __CLPK_real *__x, __CLPK_integer *__ldx,
        __CLPK_real *__ferr, __CLPK_real *__berr, __CLPK_real *__work,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssysv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssysvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__af, __CLPK_integer *__ldaf, __CLPK_integer *__ipiv,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__x,
        __CLPK_integer *__ldx, __CLPK_real *__rcond, __CLPK_real *__ferr,
        __CLPK_real *__berr, __CLPK_real *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssytd2_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__d__, __CLPK_real *__e,
        __CLPK_real *__tau,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssytf2_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssytrd_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__d__, __CLPK_real *__e,
        __CLPK_real *__tau, __CLPK_real *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssytrf_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_real *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssytri_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ssytrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stbcon_(char *__norm, char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_real *__ab, __CLPK_integer *__ldab,
        __CLPK_real *__rcond, __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stbrfs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_integer *__nrhs, __CLPK_real *__ab,
        __CLPK_integer *__ldab, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_real *__x, __CLPK_integer *__ldx, __CLPK_real *__ferr,
        __CLPK_real *__berr, __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stbtrs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_integer *__nrhs, __CLPK_real *__ab,
        __CLPK_integer *__ldab, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stfsm_(char *__transr, char *__side, char *__uplo, char *__trans,
        char *__diag, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_real *__alpha, __CLPK_real *__a, __CLPK_real *__b,
        __CLPK_integer *__ldb) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stftri_(char *__transr, char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_real *__a,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stfttp_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_real *__arf, __CLPK_real *__ap,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stfttr_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_real *__arf, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stgevc_(char *__side, char *__howmny, __CLPK_logical *__select,
        __CLPK_integer *__n, __CLPK_real *__s, __CLPK_integer *__lds,
        __CLPK_real *__p, __CLPK_integer *__ldp, __CLPK_real *__vl,
        __CLPK_integer *__ldvl, __CLPK_real *__vr, __CLPK_integer *__ldvr,
        __CLPK_integer *__mm, __CLPK_integer *__m, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stgex2_(__CLPK_logical *__wantq, __CLPK_logical *__wantz,
        __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__q,
        __CLPK_integer *__ldq, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_integer *__j1, __CLPK_integer *__n1, __CLPK_integer *__n2,
        __CLPK_real *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stgexc_(__CLPK_logical *__wantq, __CLPK_logical *__wantz,
        __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__q,
        __CLPK_integer *__ldq, __CLPK_real *__z__, __CLPK_integer *__ldz,
        __CLPK_integer *__ifst, __CLPK_integer *__ilst, __CLPK_real *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stgsen_(__CLPK_integer *__ijob, __CLPK_logical *__wantq,
        __CLPK_logical *__wantz, __CLPK_logical *__select, __CLPK_integer *__n,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__b,
        __CLPK_integer *__ldb, __CLPK_real *__alphar, __CLPK_real *__alphai,
        __CLPK_real *__beta, __CLPK_real *__q, __CLPK_integer *__ldq,
        __CLPK_real *__z__, __CLPK_integer *__ldz, __CLPK_integer *__m,
        __CLPK_real *__pl, __CLPK_real *__pr, __CLPK_real *__dif,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stgsja_(char *__jobu, char *__jobv, char *__jobq, __CLPK_integer *__m,
        __CLPK_integer *__p, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_integer *__l, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__tola,
        __CLPK_real *__tolb, __CLPK_real *__alpha, __CLPK_real *__beta,
        __CLPK_real *__u, __CLPK_integer *__ldu, __CLPK_real *__v,
        __CLPK_integer *__ldv, __CLPK_real *__q, __CLPK_integer *__ldq,
        __CLPK_real *__work, __CLPK_integer *__ncycle,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stgsna_(char *__job, char *__howmny, __CLPK_logical *__select,
        __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__vl,
        __CLPK_integer *__ldvl, __CLPK_real *__vr, __CLPK_integer *__ldvr,
        __CLPK_real *__s, __CLPK_real *__dif, __CLPK_integer *__mm,
        __CLPK_integer *__m, __CLPK_real *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stgsy2_(char *__trans, __CLPK_integer *__ijob, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__c__,
        __CLPK_integer *__ldc, __CLPK_real *__d__, __CLPK_integer *__ldd,
        __CLPK_real *__e, __CLPK_integer *__lde, __CLPK_real *__f,
        __CLPK_integer *__ldf, __CLPK_real *__scale, __CLPK_real *__rdsum,
        __CLPK_real *__rdscal, __CLPK_integer *__iwork, __CLPK_integer *__pq,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stgsyl_(char *__trans, __CLPK_integer *__ijob, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__c__,
        __CLPK_integer *__ldc, __CLPK_real *__d__, __CLPK_integer *__ldd,
        __CLPK_real *__e, __CLPK_integer *__lde, __CLPK_real *__f,
        __CLPK_integer *__ldf, __CLPK_real *__scale, __CLPK_real *__dif,
        __CLPK_real *__work, __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stpcon_(char *__norm, char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_real *__ap, __CLPK_real *__rcond, __CLPK_real *__work,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stprfs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_real *__ap, __CLPK_real *__b,
        __CLPK_integer *__ldb, __CLPK_real *__x, __CLPK_integer *__ldx,
        __CLPK_real *__ferr, __CLPK_real *__berr, __CLPK_real *__work,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stptri_(char *__uplo, char *__diag, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stptrs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_real *__ap, __CLPK_real *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stpttf_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_real *__ap, __CLPK_real *__arf,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stpttr_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__ap,
        __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strcon_(char *__norm, char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_real *__a, __CLPK_integer *__lda, __CLPK_real *__rcond,
        __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strevc_(char *__side, char *__howmny, __CLPK_logical *__select,
        __CLPK_integer *__n, __CLPK_real *__t, __CLPK_integer *__ldt,
        __CLPK_real *__vl, __CLPK_integer *__ldvl, __CLPK_real *__vr,
        __CLPK_integer *__ldvr, __CLPK_integer *__mm, __CLPK_integer *__m,
        __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strexc_(char *__compq, __CLPK_integer *__n, __CLPK_real *__t,
        __CLPK_integer *__ldt, __CLPK_real *__q, __CLPK_integer *__ldq,
        __CLPK_integer *__ifst, __CLPK_integer *__ilst, __CLPK_real *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strrfs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb, __CLPK_real *__x,
        __CLPK_integer *__ldx, __CLPK_real *__ferr, __CLPK_real *__berr,
        __CLPK_real *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strsen_(char *__job, char *__compq, __CLPK_logical *__select,
        __CLPK_integer *__n, __CLPK_real *__t, __CLPK_integer *__ldt,
        __CLPK_real *__q, __CLPK_integer *__ldq, __CLPK_real *__wr,
        __CLPK_real *__wi, __CLPK_integer *__m, __CLPK_real *__s,
        __CLPK_real *__sep, __CLPK_real *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__iwork, __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strsna_(char *__job, char *__howmny, __CLPK_logical *__select,
        __CLPK_integer *__n, __CLPK_real *__t, __CLPK_integer *__ldt,
        __CLPK_real *__vl, __CLPK_integer *__ldvl, __CLPK_real *__vr,
        __CLPK_integer *__ldvr, __CLPK_real *__s, __CLPK_real *__sep,
        __CLPK_integer *__mm, __CLPK_integer *__m, __CLPK_real *__work,
        __CLPK_integer *__ldwork, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strsyl_(char *__trana, char *__tranb, __CLPK_integer *__isgn,
        __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_real *__c__, __CLPK_integer *__ldc, __CLPK_real *__scale,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strti2_(char *__uplo, char *__diag, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strtri_(char *__uplo, char *__diag, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strtrs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_real *__a, __CLPK_integer *__lda,
        __CLPK_real *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strttf_(char *__transr, char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__arf,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int strttp_(char *__uplo, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__ap,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stzrqf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__tau,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int stzrzf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_real *__a,
        __CLPK_integer *__lda, __CLPK_real *__tau, __CLPK_real *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zbdsqr_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__ncvt,
        __CLPK_integer *__nru, __CLPK_integer *__ncc, __CLPK_doublereal *__d__,
        __CLPK_doublereal *__e, __CLPK_doublecomplex *__vt,
        __CLPK_integer *__ldvt, __CLPK_doublecomplex *__u,
        __CLPK_integer *__ldu, __CLPK_doublecomplex *__c__,
        __CLPK_integer *__ldc, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zcgesv_(__CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublecomplex *__work, __CLPK_complex *__swork,
        __CLPK_doublereal *__rwork, __CLPK_integer *__iter,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zcposv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublecomplex *__work, __CLPK_complex *__swork,
        __CLPK_doublereal *__rwork, __CLPK_integer *__iter,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zdrscl_(__CLPK_integer *__n, __CLPK_doublereal *__sa,
        __CLPK_doublecomplex *__sx,
        __CLPK_integer *__incx) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgbbrd_(char *__vect, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_integer *__ncc, __CLPK_integer *__kl, __CLPK_integer *__ku,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublereal *__d__, __CLPK_doublereal *__e,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublecomplex *__pt, __CLPK_integer *__ldpt,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgbcon_(char *__norm, __CLPK_integer *__n, __CLPK_integer *__kl,
        __CLPK_integer *__ku, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_integer *__ipiv,
        __CLPK_doublereal *__anorm, __CLPK_doublereal *__rcond,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgbequ_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__kl,
        __CLPK_integer *__ku, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublereal *__r__,
        __CLPK_doublereal *__c__, __CLPK_doublereal *__rowcnd,
        __CLPK_doublereal *__colcnd, __CLPK_doublereal *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgbequb_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__kl,
        __CLPK_integer *__ku, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublereal *__r__,
        __CLPK_doublereal *__c__, __CLPK_doublereal *__rowcnd,
        __CLPK_doublereal *__colcnd, __CLPK_doublereal *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgbrfs_(char *__trans, __CLPK_integer *__n, __CLPK_integer *__kl,
        __CLPK_integer *__ku, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublecomplex *__afb, __CLPK_integer *__ldafb,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgbsv_(__CLPK_integer *__n, __CLPK_integer *__kl, __CLPK_integer *__ku,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgbsvx_(char *__fact, char *__trans, __CLPK_integer *__n,
        __CLPK_integer *__kl, __CLPK_integer *__ku, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublecomplex *__afb, __CLPK_integer *__ldafb,
        __CLPK_integer *__ipiv, char *__equed, __CLPK_doublereal *__r__,
        __CLPK_doublereal *__c__, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgbtf2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__kl,
        __CLPK_integer *__ku, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgbtrf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__kl,
        __CLPK_integer *__ku, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgbtrs_(char *__trans, __CLPK_integer *__n, __CLPK_integer *__kl,
        __CLPK_integer *__ku, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgebak_(char *__job, char *__side, __CLPK_integer *__n,
        __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublereal *__scale, __CLPK_integer *__m,
        __CLPK_doublecomplex *__v, __CLPK_integer *__ldv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgebal_(char *__job, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublereal *__scale,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgebd2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__d__, __CLPK_doublereal *__e,
        __CLPK_doublecomplex *__tauq, __CLPK_doublecomplex *__taup,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgebrd_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__d__, __CLPK_doublereal *__e,
        __CLPK_doublecomplex *__tauq, __CLPK_doublecomplex *__taup,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgecon_(char *__norm, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__anorm,
        __CLPK_doublereal *__rcond, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeequ_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__r__,
        __CLPK_doublereal *__c__, __CLPK_doublereal *__rowcnd,
        __CLPK_doublereal *__colcnd, __CLPK_doublereal *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeequb_(__CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__r__, __CLPK_doublereal *__c__,
        __CLPK_doublereal *__rowcnd, __CLPK_doublereal *__colcnd,
        __CLPK_doublereal *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgees_(char *__jobvs, char *__sort, __CLPK_L_fp __select,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__sdim, __CLPK_doublecomplex *__w,
        __CLPK_doublecomplex *__vs, __CLPK_integer *__ldvs,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork, __CLPK_logical *__bwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeesx_(char *__jobvs, char *__sort, __CLPK_L_fp __select, char *__sense,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__sdim, __CLPK_doublecomplex *__w,
        __CLPK_doublecomplex *__vs, __CLPK_integer *__ldvs,
        __CLPK_doublereal *__rconde, __CLPK_doublereal *__rcondv,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork, __CLPK_logical *__bwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeev_(char *__jobvl, char *__jobvr, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__w, __CLPK_doublecomplex *__vl,
        __CLPK_integer *__ldvl, __CLPK_doublecomplex *__vr,
        __CLPK_integer *__ldvr, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeevx_(char *__balanc, char *__jobvl, char *__jobvr, char *__sense,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__w, __CLPK_doublecomplex *__vl,
        __CLPK_integer *__ldvl, __CLPK_doublecomplex *__vr,
        __CLPK_integer *__ldvr, __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublereal *__scale, __CLPK_doublereal *__abnrm,
        __CLPK_doublereal *__rconde, __CLPK_doublereal *__rcondv,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgegs_(char *__jobvsl, char *__jobvsr, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__alpha, __CLPK_doublecomplex *__beta,
        __CLPK_doublecomplex *__vsl, __CLPK_integer *__ldvsl,
        __CLPK_doublecomplex *__vsr, __CLPK_integer *__ldvsr,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgegv_(char *__jobvl, char *__jobvr, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__alpha, __CLPK_doublecomplex *__beta,
        __CLPK_doublecomplex *__vl, __CLPK_integer *__ldvl,
        __CLPK_doublecomplex *__vr, __CLPK_integer *__ldvr,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgehd2_(__CLPK_integer *__n, __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgehrd_(__CLPK_integer *__n, __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgelq2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgelqf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgels_(char *__trans, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgelsd_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublereal *__s, __CLPK_doublereal *__rcond,
        __CLPK_integer *__rank, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgelss_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublereal *__s, __CLPK_doublereal *__rcond,
        __CLPK_integer *__rank, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgelsx_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__jpvt, __CLPK_doublereal *__rcond,
        __CLPK_integer *__rank, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgelsy_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__jpvt, __CLPK_doublereal *__rcond,
        __CLPK_integer *__rank, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeql2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeqlf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeqp3_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__jpvt,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeqpf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__jpvt,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeqr2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgeqrf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgerfs_(char *__trans, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__af, __CLPK_integer *__ldaf,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgerq2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgerqf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgesc2_(__CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__rhs,
        __CLPK_integer *__ipiv, __CLPK_integer *__jpiv,
        __CLPK_doublereal *__scale) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgesdd_(char *__jobz, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__s, __CLPK_doublecomplex *__u,
        __CLPK_integer *__ldu, __CLPK_doublecomplex *__vt,
        __CLPK_integer *__ldvt, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgesv_(__CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgesvd_(char *__jobu, char *__jobvt, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__s, __CLPK_doublecomplex *__u,
        __CLPK_integer *__ldu, __CLPK_doublecomplex *__vt,
        __CLPK_integer *__ldvt, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgesvx_(char *__fact, char *__trans, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__af,
        __CLPK_integer *__ldaf, __CLPK_integer *__ipiv, char *__equed,
        __CLPK_doublereal *__r__, __CLPK_doublereal *__c__,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgetc2_(__CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv, __CLPK_integer *__jpiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgetf2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgetrf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgetri_(__CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgetrs_(char *__trans, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zggbak_(char *__job, char *__side, __CLPK_integer *__n,
        __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublereal *__lscale, __CLPK_doublereal *__rscale,
        __CLPK_integer *__m, __CLPK_doublecomplex *__v, __CLPK_integer *__ldv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zggbal_(char *__job, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublereal *__lscale, __CLPK_doublereal *__rscale,
        __CLPK_doublereal *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgges_(char *__jobvsl, char *__jobvsr, char *__sort, __CLPK_L_fp __selctg,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__sdim, __CLPK_doublecomplex *__alpha,
        __CLPK_doublecomplex *__beta, __CLPK_doublecomplex *__vsl,
        __CLPK_integer *__ldvsl, __CLPK_doublecomplex *__vsr,
        __CLPK_integer *__ldvsr, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_logical *__bwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zggesx_(char *__jobvsl, char *__jobvsr, char *__sort, __CLPK_L_fp __selctg,
        char *__sense, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__sdim, __CLPK_doublecomplex *__alpha,
        __CLPK_doublecomplex *__beta, __CLPK_doublecomplex *__vsl,
        __CLPK_integer *__ldvsl, __CLPK_doublecomplex *__vsr,
        __CLPK_integer *__ldvsr, __CLPK_doublereal *__rconde,
        __CLPK_doublereal *__rcondv, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__iwork, __CLPK_integer *__liwork,
        __CLPK_logical *__bwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zggev_(char *__jobvl, char *__jobvr, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__alpha, __CLPK_doublecomplex *__beta,
        __CLPK_doublecomplex *__vl, __CLPK_integer *__ldvl,
        __CLPK_doublecomplex *__vr, __CLPK_integer *__ldvr,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zggevx_(char *__balanc, char *__jobvl, char *__jobvr, char *__sense,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__alpha, __CLPK_doublecomplex *__beta,
        __CLPK_doublecomplex *__vl, __CLPK_integer *__ldvl,
        __CLPK_doublecomplex *__vr, __CLPK_integer *__ldvr,
        __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublereal *__lscale, __CLPK_doublereal *__rscale,
        __CLPK_doublereal *__abnrm, __CLPK_doublereal *__bbnrm,
        __CLPK_doublereal *__rconde, __CLPK_doublereal *__rcondv,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork, __CLPK_integer *__iwork,
        __CLPK_logical *__bwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zggglm_(__CLPK_integer *__n, __CLPK_integer *__m, __CLPK_integer *__p,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__d__, __CLPK_doublecomplex *__x,
        __CLPK_doublecomplex *__y, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgghrd_(char *__compq, char *__compz, __CLPK_integer *__n,
        __CLPK_integer *__ilo, __CLPK_integer *__ihi, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgglse_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__p,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__c__, __CLPK_doublecomplex *__d__,
        __CLPK_doublecomplex *__x, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zggqrf_(__CLPK_integer *__n, __CLPK_integer *__m, __CLPK_integer *__p,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__taua, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__taub,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zggrqf_(__CLPK_integer *__m, __CLPK_integer *__p, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__taua, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__taub,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zggsvd_(char *__jobu, char *__jobv, char *__jobq, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__p, __CLPK_integer *__k,
        __CLPK_integer *__l, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublereal *__alpha, __CLPK_doublereal *__beta,
        __CLPK_doublecomplex *__u, __CLPK_integer *__ldu,
        __CLPK_doublecomplex *__v, __CLPK_integer *__ldv,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zggsvp_(char *__jobu, char *__jobv, char *__jobq, __CLPK_integer *__m,
        __CLPK_integer *__p, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublereal *__tola, __CLPK_doublereal *__tolb,
        __CLPK_integer *__k, __CLPK_integer *__l, __CLPK_doublecomplex *__u,
        __CLPK_integer *__ldu, __CLPK_doublecomplex *__v, __CLPK_integer *__ldv,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_integer *__iwork, __CLPK_doublereal *__rwork,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgtcon_(char *__norm, __CLPK_integer *__n, __CLPK_doublecomplex *__dl,
        __CLPK_doublecomplex *__d__, __CLPK_doublecomplex *__du,
        __CLPK_doublecomplex *__du2, __CLPK_integer *__ipiv,
        __CLPK_doublereal *__anorm, __CLPK_doublereal *__rcond,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgtrfs_(char *__trans, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__dl, __CLPK_doublecomplex *__d__,
        __CLPK_doublecomplex *__du, __CLPK_doublecomplex *__dlf,
        __CLPK_doublecomplex *__df, __CLPK_doublecomplex *__duf,
        __CLPK_doublecomplex *__du2, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgtsv_(__CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__dl, __CLPK_doublecomplex *__d__,
        __CLPK_doublecomplex *__du, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgtsvx_(char *__fact, char *__trans, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__dl,
        __CLPK_doublecomplex *__d__, __CLPK_doublecomplex *__du,
        __CLPK_doublecomplex *__dlf, __CLPK_doublecomplex *__df,
        __CLPK_doublecomplex *__duf, __CLPK_doublecomplex *__du2,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgttrf_(__CLPK_integer *__n, __CLPK_doublecomplex *__dl,
        __CLPK_doublecomplex *__d__, __CLPK_doublecomplex *__du,
        __CLPK_doublecomplex *__du2, __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgttrs_(char *__trans, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__dl, __CLPK_doublecomplex *__d__,
        __CLPK_doublecomplex *__du, __CLPK_doublecomplex *__du2,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zgtts2_(__CLPK_integer *__itrans, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__dl,
        __CLPK_doublecomplex *__d__, __CLPK_doublecomplex *__du,
        __CLPK_doublecomplex *__du2, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhbev_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhbevd_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork, __CLPK_integer *__lrwork,
        __CLPK_integer *__iwork, __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhbevx_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublecomplex *__q,
        __CLPK_integer *__ldq, __CLPK_doublereal *__vl, __CLPK_doublereal *__vu,
        __CLPK_integer *__il, __CLPK_integer *__iu, __CLPK_doublereal *__abstol,
        __CLPK_integer *__m, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__iwork, __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhbgst_(char *__vect, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__ka, __CLPK_integer *__kb, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublecomplex *__bb,
        __CLPK_integer *__ldbb, __CLPK_doublecomplex *__x,
        __CLPK_integer *__ldx, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhbgv_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__ka, __CLPK_integer *__kb, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublecomplex *__bb,
        __CLPK_integer *__ldbb, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhbgvd_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__ka, __CLPK_integer *__kb, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublecomplex *__bb,
        __CLPK_integer *__ldbb, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork, __CLPK_integer *__lrwork,
        __CLPK_integer *__iwork, __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhbgvx_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__ka, __CLPK_integer *__kb, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublecomplex *__bb,
        __CLPK_integer *__ldbb, __CLPK_doublecomplex *__q,
        __CLPK_integer *__ldq, __CLPK_doublereal *__vl, __CLPK_doublereal *__vu,
        __CLPK_integer *__il, __CLPK_integer *__iu, __CLPK_doublereal *__abstol,
        __CLPK_integer *__m, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__iwork, __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhbtrd_(char *__vect, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublereal *__d__,
        __CLPK_doublereal *__e, __CLPK_doublecomplex *__q,
        __CLPK_integer *__ldq, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhecon_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_doublereal *__anorm, __CLPK_doublereal *__rcond,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zheequb_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__s,
        __CLPK_doublereal *__scond, __CLPK_doublereal *__amax,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zheev_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__w, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zheevd_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__w, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__lrwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zheevr_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__vl, __CLPK_doublereal *__vu, __CLPK_integer *__il,
        __CLPK_integer *__iu, __CLPK_doublereal *__abstol, __CLPK_integer *__m,
        __CLPK_doublereal *__w, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_integer *__isuppz,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork, __CLPK_integer *__lrwork,
        __CLPK_integer *__iwork, __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zheevx_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__vl, __CLPK_doublereal *__vu, __CLPK_integer *__il,
        __CLPK_integer *__iu, __CLPK_doublereal *__abstol, __CLPK_integer *__m,
        __CLPK_doublereal *__w, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__iwork, __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhegs2_(__CLPK_integer *__itype, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhegst_(__CLPK_integer *__itype, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhegv_(__CLPK_integer *__itype, char *__jobz, char *__uplo,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublereal *__w, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhegvd_(__CLPK_integer *__itype, char *__jobz, char *__uplo,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublereal *__w, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__lrwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhegvx_(__CLPK_integer *__itype, char *__jobz, char *__range, char *__uplo,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublereal *__vl, __CLPK_doublereal *__vu, __CLPK_integer *__il,
        __CLPK_integer *__iu, __CLPK_doublereal *__abstol, __CLPK_integer *__m,
        __CLPK_doublereal *__w, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__iwork, __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zherfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__af, __CLPK_integer *__ldaf,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhesv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhesvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__af,
        __CLPK_integer *__ldaf, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhetd2_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__d__, __CLPK_doublereal *__e,
        __CLPK_doublecomplex *__tau,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhetf2_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhetrd_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__d__, __CLPK_doublereal *__e,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhetrf_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhetri_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhetrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhfrk_(char *__transr, char *__uplo, char *__trans, __CLPK_integer *__n,
        __CLPK_integer *__k, __CLPK_doublereal *__alpha,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__beta,
        __CLPK_doublecomplex *__c__) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhgeqz_(char *__job, char *__compq, char *__compz, __CLPK_integer *__n,
        __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublecomplex *__h__, __CLPK_integer *__ldh,
        __CLPK_doublecomplex *__t, __CLPK_integer *__ldt,
        __CLPK_doublecomplex *__alpha, __CLPK_doublecomplex *__beta,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhpcon_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_integer *__ipiv, __CLPK_doublereal *__anorm,
        __CLPK_doublereal *__rcond, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhpev_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__ap, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhpevd_(char *__jobz, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__ap, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork, __CLPK_integer *__lrwork,
        __CLPK_integer *__iwork, __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhpevx_(char *__jobz, char *__range, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__ap, __CLPK_doublereal *__vl,
        __CLPK_doublereal *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_doublereal *__abstol, __CLPK_integer *__m,
        __CLPK_doublereal *__w, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork, __CLPK_integer *__iwork,
        __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhpgst_(__CLPK_integer *__itype, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__ap, __CLPK_doublecomplex *__bp,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhpgv_(__CLPK_integer *__itype, char *__jobz, char *__uplo,
        __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__bp, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhpgvd_(__CLPK_integer *__itype, char *__jobz, char *__uplo,
        __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__bp, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_doublereal *__rwork, __CLPK_integer *__lrwork,
        __CLPK_integer *__iwork, __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhpgvx_(__CLPK_integer *__itype, char *__jobz, char *__range, char *__uplo,
        __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__bp, __CLPK_doublereal *__vl,
        __CLPK_doublereal *__vu, __CLPK_integer *__il, __CLPK_integer *__iu,
        __CLPK_doublereal *__abstol, __CLPK_integer *__m,
        __CLPK_doublereal *__w, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork, __CLPK_integer *__iwork,
        __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhprfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ap, __CLPK_doublecomplex *__afp,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhpsv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ap, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhpsvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__afp, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhptrd_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublereal *__d__, __CLPK_doublereal *__e,
        __CLPK_doublecomplex *__tau,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhptrf_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhptri_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhptrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ap, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhsein_(char *__side, char *__eigsrc, char *__initv,
        __CLPK_logical *__select, __CLPK_integer *__n,
        __CLPK_doublecomplex *__h__, __CLPK_integer *__ldh,
        __CLPK_doublecomplex *__w, __CLPK_doublecomplex *__vl,
        __CLPK_integer *__ldvl, __CLPK_doublecomplex *__vr,
        __CLPK_integer *__ldvr, __CLPK_integer *__mm, __CLPK_integer *__m,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__ifaill, __CLPK_integer *__ifailr,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zhseqr_(char *__job, char *__compz, __CLPK_integer *__n,
        __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublecomplex *__h__, __CLPK_integer *__ldh,
        __CLPK_doublecomplex *__w, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlabrd_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__nb,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__d__, __CLPK_doublereal *__e,
        __CLPK_doublecomplex *__tauq, __CLPK_doublecomplex *__taup,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublecomplex *__y,
        __CLPK_integer *__ldy) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlacgv_(__CLPK_integer *__n, __CLPK_doublecomplex *__x,
        __CLPK_integer *__incx) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlacn2_(__CLPK_integer *__n, __CLPK_doublecomplex *__v,
        __CLPK_doublecomplex *__x, __CLPK_doublereal *__est,
        __CLPK_integer *__kase,
        __CLPK_integer *__isave) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlacon_(__CLPK_integer *__n, __CLPK_doublecomplex *__v,
        __CLPK_doublecomplex *__x, __CLPK_doublereal *__est,
        __CLPK_integer *__kase) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlacp2_(char *__uplo, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublereal *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlacpy_(char *__uplo, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlacrm_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublereal *__rwork) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlacrt_(__CLPK_integer *__n, __CLPK_doublecomplex *__cx,
        __CLPK_integer *__incx, __CLPK_doublecomplex *__cy,
        __CLPK_integer *__incy, __CLPK_doublecomplex *__c__,
        __CLPK_doublecomplex *__s) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

void zladiv_(__CLPK_doublecomplex *__ret_val, __CLPK_doublecomplex *__x,
        __CLPK_doublecomplex *__y) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaed0_(__CLPK_integer *__qsiz, __CLPK_integer *__n,
        __CLPK_doublereal *__d__, __CLPK_doublereal *__e,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublecomplex *__qstore, __CLPK_integer *__ldqs,
        __CLPK_doublereal *__rwork, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaed7_(__CLPK_integer *__n, __CLPK_integer *__cutpnt,
        __CLPK_integer *__qsiz, __CLPK_integer *__tlvls,
        __CLPK_integer *__curlvl, __CLPK_integer *__curpbm,
        __CLPK_doublereal *__d__, __CLPK_doublecomplex *__q,
        __CLPK_integer *__ldq, __CLPK_doublereal *__rho,
        __CLPK_integer *__indxq, __CLPK_doublereal *__qstore,
        __CLPK_integer *__qptr, __CLPK_integer *__prmptr,
        __CLPK_integer *__perm, __CLPK_integer *__givptr,
        __CLPK_integer *__givcol, __CLPK_doublereal *__givnum,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaed8_(__CLPK_integer *__k, __CLPK_integer *__n, __CLPK_integer *__qsiz,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublereal *__d__, __CLPK_doublereal *__rho,
        __CLPK_integer *__cutpnt, __CLPK_doublereal *__z__,
        __CLPK_doublereal *__dlamda, __CLPK_doublecomplex *__q2,
        __CLPK_integer *__ldq2, __CLPK_doublereal *__w, __CLPK_integer *__indxp,
        __CLPK_integer *__indx, __CLPK_integer *__indxq, __CLPK_integer *__perm,
        __CLPK_integer *__givptr, __CLPK_integer *__givcol,
        __CLPK_doublereal *__givnum,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaein_(__CLPK_logical *__rightv, __CLPK_logical *__noinit,
        __CLPK_integer *__n, __CLPK_doublecomplex *__h__, __CLPK_integer *__ldh,
        __CLPK_doublecomplex *__w, __CLPK_doublecomplex *__v,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublereal *__rwork, __CLPK_doublereal *__eps3,
        __CLPK_doublereal *__smlnum,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaesy_(__CLPK_doublecomplex *__a, __CLPK_doublecomplex *__b,
        __CLPK_doublecomplex *__c__, __CLPK_doublecomplex *__rt1,
        __CLPK_doublecomplex *__rt2, __CLPK_doublecomplex *__evscal,
        __CLPK_doublecomplex *__cs1,
        __CLPK_doublecomplex *__sn1) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaev2_(__CLPK_doublecomplex *__a, __CLPK_doublecomplex *__b,
        __CLPK_doublecomplex *__c__, __CLPK_doublereal *__rt1,
        __CLPK_doublereal *__rt2, __CLPK_doublereal *__cs1,
        __CLPK_doublecomplex *__sn1) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlag2c_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_complex *__sa, __CLPK_integer *__ldsa,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlags2_(__CLPK_logical *__upper, __CLPK_doublereal *__a1,
        __CLPK_doublecomplex *__a2, __CLPK_doublereal *__a3,
        __CLPK_doublereal *__b1, __CLPK_doublecomplex *__b2,
        __CLPK_doublereal *__b3, __CLPK_doublereal *__csu,
        __CLPK_doublecomplex *__snu, __CLPK_doublereal *__csv,
        __CLPK_doublecomplex *__snv, __CLPK_doublereal *__csq,
        __CLPK_doublecomplex *__snq) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlagtm_(char *__trans, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublereal *__alpha, __CLPK_doublecomplex *__dl,
        __CLPK_doublecomplex *__d__, __CLPK_doublecomplex *__du,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__beta, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlahef_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nb,
        __CLPK_integer *__kb, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__w,
        __CLPK_integer *__ldw,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlahqr_(__CLPK_logical *__wantt, __CLPK_logical *__wantz,
        __CLPK_integer *__n, __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublecomplex *__h__, __CLPK_integer *__ldh,
        __CLPK_doublecomplex *__w, __CLPK_integer *__iloz,
        __CLPK_integer *__ihiz, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlahr2_(__CLPK_integer *__n, __CLPK_integer *__k, __CLPK_integer *__nb,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__t,
        __CLPK_integer *__ldt, __CLPK_doublecomplex *__y,
        __CLPK_integer *__ldy) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlahrd_(__CLPK_integer *__n, __CLPK_integer *__k, __CLPK_integer *__nb,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__t,
        __CLPK_integer *__ldt, __CLPK_doublecomplex *__y,
        __CLPK_integer *__ldy) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaic1_(__CLPK_integer *__job, __CLPK_integer *__j,
        __CLPK_doublecomplex *__x, __CLPK_doublereal *__sest,
        __CLPK_doublecomplex *__w, __CLPK_doublecomplex *__gamma,
        __CLPK_doublereal *__sestpr, __CLPK_doublecomplex *__s,
        __CLPK_doublecomplex *__c__) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlals0_(__CLPK_integer *__icompq, __CLPK_integer *__nl,
        __CLPK_integer *__nr, __CLPK_integer *__sqre, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__bx, __CLPK_integer *__ldbx,
        __CLPK_integer *__perm, __CLPK_integer *__givptr,
        __CLPK_integer *__givcol, __CLPK_integer *__ldgcol,
        __CLPK_doublereal *__givnum, __CLPK_integer *__ldgnum,
        __CLPK_doublereal *__poles, __CLPK_doublereal *__difl,
        __CLPK_doublereal *__difr, __CLPK_doublereal *__z__,
        __CLPK_integer *__k, __CLPK_doublereal *__c__, __CLPK_doublereal *__s,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlalsa_(__CLPK_integer *__icompq, __CLPK_integer *__smlsiz,
        __CLPK_integer *__n, __CLPK_integer *__nrhs, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__bx,
        __CLPK_integer *__ldbx, __CLPK_doublereal *__u, __CLPK_integer *__ldu,
        __CLPK_doublereal *__vt, __CLPK_integer *__k, __CLPK_doublereal *__difl,
        __CLPK_doublereal *__difr, __CLPK_doublereal *__z__,
        __CLPK_doublereal *__poles, __CLPK_integer *__givptr,
        __CLPK_integer *__givcol, __CLPK_integer *__ldgcol,
        __CLPK_integer *__perm, __CLPK_doublereal *__givnum,
        __CLPK_doublereal *__c__, __CLPK_doublereal *__s,
        __CLPK_doublereal *__rwork, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlalsd_(char *__uplo, __CLPK_integer *__smlsiz, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublereal *__d__,
        __CLPK_doublereal *__e, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublereal *__rcond,
        __CLPK_integer *__rank, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlangb_(char *__norm, __CLPK_integer *__n,
        __CLPK_integer *__kl, __CLPK_integer *__ku, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlange_(char *__norm, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlangt_(char *__norm, __CLPK_integer *__n,
        __CLPK_doublecomplex *__dl, __CLPK_doublecomplex *__d__,
        __CLPK_doublecomplex *__du) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlanhb_(char *__norm, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__k, __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlanhe_(char *__norm, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlanhf_(char *__norm, char *__transr, char *__uplo,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlanhp_(char *__norm, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__ap,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlanhs_(char *__norm, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlanht_(char *__norm, __CLPK_integer *__n,
        __CLPK_doublereal *__d__,
        __CLPK_doublecomplex *__e) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlansb_(char *__norm, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__k, __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlansp_(char *__norm, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__ap,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlansy_(char *__norm, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlantb_(char *__norm, char *__uplo, char *__diag,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlantp_(char *__norm, char *__uplo, char *__diag,
        __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal zlantr_(char *__norm, char *__uplo, char *__diag,
        __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlapll_(__CLPK_integer *__n, __CLPK_doublecomplex *__x,
        __CLPK_integer *__incx, __CLPK_doublecomplex *__y,
        __CLPK_integer *__incy,
        __CLPK_doublereal *__ssmin) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlapmt_(__CLPK_logical *__forwrd, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_integer *__k) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int zlaqgb_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__kl,
        __CLPK_integer *__ku, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublereal *__r__,
        __CLPK_doublereal *__c__, __CLPK_doublereal *__rowcnd,
        __CLPK_doublereal *__colcnd, __CLPK_doublereal *__amax,
        char *__equed) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int zlaqge_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__r__,
        __CLPK_doublereal *__c__, __CLPK_doublereal *__rowcnd,
        __CLPK_doublereal *__colcnd, __CLPK_doublereal *__amax,
        char *__equed) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int zlaqhb_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublereal *__s, __CLPK_doublereal *__scond,
        __CLPK_doublereal *__amax,
        char *__equed) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int zlaqhe_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__s,
        __CLPK_doublereal *__scond, __CLPK_doublereal *__amax,
        char *__equed) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int zlaqhp_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublereal *__s, __CLPK_doublereal *__scond,
        __CLPK_doublereal *__amax,
        char *__equed) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int zlaqp2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__offset,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__jpvt, __CLPK_doublecomplex *__tau,
        __CLPK_doublereal *__vn1, __CLPK_doublereal *__vn2,
        __CLPK_doublecomplex *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaqps_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__offset,
        __CLPK_integer *__nb, __CLPK_integer *__kb, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__jpvt,
        __CLPK_doublecomplex *__tau, __CLPK_doublereal *__vn1,
        __CLPK_doublereal *__vn2, __CLPK_doublecomplex *__auxv,
        __CLPK_doublecomplex *__f,
        __CLPK_integer *__ldf) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaqr0_(__CLPK_logical *__wantt, __CLPK_logical *__wantz,
        __CLPK_integer *__n, __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublecomplex *__h__, __CLPK_integer *__ldh,
        __CLPK_doublecomplex *__w, __CLPK_integer *__iloz,
        __CLPK_integer *__ihiz, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaqr1_(__CLPK_integer *__n, __CLPK_doublecomplex *__h__,
        __CLPK_integer *__ldh, __CLPK_doublecomplex *__s1,
        __CLPK_doublecomplex *__s2,
        __CLPK_doublecomplex *__v) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaqr2_(__CLPK_logical *__wantt, __CLPK_logical *__wantz,
        __CLPK_integer *__n, __CLPK_integer *__ktop, __CLPK_integer *__kbot,
        __CLPK_integer *__nw, __CLPK_doublecomplex *__h__,
        __CLPK_integer *__ldh, __CLPK_integer *__iloz, __CLPK_integer *__ihiz,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_integer *__ns, __CLPK_integer *__nd, __CLPK_doublecomplex *__sh,
        __CLPK_doublecomplex *__v, __CLPK_integer *__ldv, __CLPK_integer *__nh,
        __CLPK_doublecomplex *__t, __CLPK_integer *__ldt, __CLPK_integer *__nv,
        __CLPK_doublecomplex *__wv, __CLPK_integer *__ldwv,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaqr3_(__CLPK_logical *__wantt, __CLPK_logical *__wantz,
        __CLPK_integer *__n, __CLPK_integer *__ktop, __CLPK_integer *__kbot,
        __CLPK_integer *__nw, __CLPK_doublecomplex *__h__,
        __CLPK_integer *__ldh, __CLPK_integer *__iloz, __CLPK_integer *__ihiz,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_integer *__ns, __CLPK_integer *__nd, __CLPK_doublecomplex *__sh,
        __CLPK_doublecomplex *__v, __CLPK_integer *__ldv, __CLPK_integer *__nh,
        __CLPK_doublecomplex *__t, __CLPK_integer *__ldt, __CLPK_integer *__nv,
        __CLPK_doublecomplex *__wv, __CLPK_integer *__ldwv,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaqr4_(__CLPK_logical *__wantt, __CLPK_logical *__wantz,
        __CLPK_integer *__n, __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublecomplex *__h__, __CLPK_integer *__ldh,
        __CLPK_doublecomplex *__w, __CLPK_integer *__iloz,
        __CLPK_integer *__ihiz, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaqr5_(__CLPK_logical *__wantt, __CLPK_logical *__wantz,
        __CLPK_integer *__kacc22, __CLPK_integer *__n, __CLPK_integer *__ktop,
        __CLPK_integer *__kbot, __CLPK_integer *__nshfts,
        __CLPK_doublecomplex *__s, __CLPK_doublecomplex *__h__,
        __CLPK_integer *__ldh, __CLPK_integer *__iloz, __CLPK_integer *__ihiz,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__v, __CLPK_integer *__ldv,
        __CLPK_doublecomplex *__u, __CLPK_integer *__ldu, __CLPK_integer *__nv,
        __CLPK_doublecomplex *__wv, __CLPK_integer *__ldwv,
        __CLPK_integer *__nh, __CLPK_doublecomplex *__wh,
        __CLPK_integer *__ldwh) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaqsb_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublereal *__s, __CLPK_doublereal *__scond,
        __CLPK_doublereal *__amax,
        char *__equed) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int zlaqsp_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublereal *__s, __CLPK_doublereal *__scond,
        __CLPK_doublereal *__amax,
        char *__equed) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int zlaqsy_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__s,
        __CLPK_doublereal *__scond, __CLPK_doublereal *__amax,
        char *__equed) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int zlar1v_(__CLPK_integer *__n, __CLPK_integer *__b1, __CLPK_integer *__bn,
        __CLPK_doublereal *__lambda, __CLPK_doublereal *__d__,
        __CLPK_doublereal *__l, __CLPK_doublereal *__ld,
        __CLPK_doublereal *__lld, __CLPK_doublereal *__pivmin,
        __CLPK_doublereal *__gaptol, __CLPK_doublecomplex *__z__,
        __CLPK_logical *__wantnc, __CLPK_integer *__negcnt,
        __CLPK_doublereal *__ztz, __CLPK_doublereal *__mingma,
        __CLPK_integer *__r__, __CLPK_integer *__isuppz,
        __CLPK_doublereal *__nrminv, __CLPK_doublereal *__resid,
        __CLPK_doublereal *__rqcorr,
        __CLPK_doublereal *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlar2v_(__CLPK_integer *__n, __CLPK_doublecomplex *__x,
        __CLPK_doublecomplex *__y, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__incx, __CLPK_doublereal *__c__,
        __CLPK_doublecomplex *__s,
        __CLPK_integer *__incc) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarcm_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublereal *__rwork) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarf_(char *__side, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublecomplex *__v, __CLPK_integer *__incv,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__c__,
        __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarfb_(char *__side, char *__trans, char *__direct, char *__storev,
        __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_doublecomplex *__v, __CLPK_integer *__ldv,
        __CLPK_doublecomplex *__t, __CLPK_integer *__ldt,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__ldwork) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarfg_(__CLPK_integer *__n, __CLPK_doublecomplex *__alpha,
        __CLPK_doublecomplex *__x, __CLPK_integer *__incx,
        __CLPK_doublecomplex *__tau) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarfp_(__CLPK_integer *__n, __CLPK_doublecomplex *__alpha,
        __CLPK_doublecomplex *__x, __CLPK_integer *__incx,
        __CLPK_doublecomplex *__tau) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarft_(char *__direct, char *__storev, __CLPK_integer *__n,
        __CLPK_integer *__k, __CLPK_doublecomplex *__v, __CLPK_integer *__ldv,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__t,
        __CLPK_integer *__ldt) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarfx_(char *__side, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublecomplex *__v, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlargv_(__CLPK_integer *__n, __CLPK_doublecomplex *__x,
        __CLPK_integer *__incx, __CLPK_doublecomplex *__y,
        __CLPK_integer *__incy, __CLPK_doublereal *__c__,
        __CLPK_integer *__incc) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarnv_(__CLPK_integer *__idist, __CLPK_integer *__iseed,
        __CLPK_integer *__n,
        __CLPK_doublecomplex *__x) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarrv_(__CLPK_integer *__n, __CLPK_doublereal *__vl,
        __CLPK_doublereal *__vu, __CLPK_doublereal *__d__,
        __CLPK_doublereal *__l, __CLPK_doublereal *__pivmin,
        __CLPK_integer *__isplit, __CLPK_integer *__m, __CLPK_integer *__dol,
        __CLPK_integer *__dou, __CLPK_doublereal *__minrgp,
        __CLPK_doublereal *__rtol1, __CLPK_doublereal *__rtol2,
        __CLPK_doublereal *__w, __CLPK_doublereal *__werr,
        __CLPK_doublereal *__wgap, __CLPK_integer *__iblock,
        __CLPK_integer *__indexw, __CLPK_doublereal *__gers,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_integer *__isuppz, __CLPK_doublereal *__work,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarscl2_(__CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublereal *__d__, __CLPK_doublecomplex *__x,
        __CLPK_integer *__ldx) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlartg_(__CLPK_doublecomplex *__f, __CLPK_doublecomplex *__g,
        __CLPK_doublereal *__cs, __CLPK_doublecomplex *__sn,
        __CLPK_doublecomplex *__r__) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlartv_(__CLPK_integer *__n, __CLPK_doublecomplex *__x,
        __CLPK_integer *__incx, __CLPK_doublecomplex *__y,
        __CLPK_integer *__incy, __CLPK_doublereal *__c__,
        __CLPK_doublecomplex *__s,
        __CLPK_integer *__incc) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarz_(char *__side, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_integer *__l, __CLPK_doublecomplex *__v, __CLPK_integer *__incv,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__c__,
        __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarzb_(char *__side, char *__trans, char *__direct, char *__storev,
        __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_integer *__l, __CLPK_doublecomplex *__v, __CLPK_integer *__ldv,
        __CLPK_doublecomplex *__t, __CLPK_integer *__ldt,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__ldwork) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlarzt_(char *__direct, char *__storev, __CLPK_integer *__n,
        __CLPK_integer *__k, __CLPK_doublecomplex *__v, __CLPK_integer *__ldv,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__t,
        __CLPK_integer *__ldt) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlascl_(char *__type__, __CLPK_integer *__kl, __CLPK_integer *__ku,
        __CLPK_doublereal *__cfrom, __CLPK_doublereal *__cto,
        __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlascl2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublereal *__d__,
        __CLPK_doublecomplex *__x,
        __CLPK_integer *__ldx) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaset_(char *__uplo, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublecomplex *__alpha, __CLPK_doublecomplex *__beta,
        __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlasr_(char *__side, char *__pivot, char *__direct, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_doublereal *__c__, __CLPK_doublereal *__s,
        __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlassq_(__CLPK_integer *__n, __CLPK_doublecomplex *__x,
        __CLPK_integer *__incx, __CLPK_doublereal *__scale,
        __CLPK_doublereal *__sumsq) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlaswp_(__CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__k1, __CLPK_integer *__k2,
        __CLPK_integer *__ipiv,
        __CLPK_integer *__incx) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlasyf_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nb,
        __CLPK_integer *__kb, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__w,
        __CLPK_integer *__ldw,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlat2c_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_complex *__sa, __CLPK_integer *__ldsa,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlatbs_(char *__uplo, char *__trans, char *__diag, char *__normin,
        __CLPK_integer *__n, __CLPK_integer *__kd, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublecomplex *__x,
        __CLPK_doublereal *__scale, __CLPK_doublereal *__cnorm,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlatdf_(__CLPK_integer *__ijob, __CLPK_integer *__n,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublecomplex *__rhs, __CLPK_doublereal *__rdsum,
        __CLPK_doublereal *__rdscal, __CLPK_integer *__ipiv,
        __CLPK_integer *__jpiv) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlatps_(char *__uplo, char *__trans, char *__diag, char *__normin,
        __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__x, __CLPK_doublereal *__scale,
        __CLPK_doublereal *__cnorm,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlatrd_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nb,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__e, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__w,
        __CLPK_integer *__ldw) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlatrs_(char *__uplo, char *__trans, char *__diag, char *__normin,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__x, __CLPK_doublereal *__scale,
        __CLPK_doublereal *__cnorm,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlatrz_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__l,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlatzm_(char *__side, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublecomplex *__v, __CLPK_integer *__incv,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__c1,
        __CLPK_doublecomplex *__c2, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlauu2_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zlauum_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpbcon_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublereal *__anorm, __CLPK_doublereal *__rcond,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpbequ_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublereal *__s, __CLPK_doublereal *__scond,
        __CLPK_doublereal *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpbrfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublecomplex *__afb,
        __CLPK_integer *__ldafb, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpbstf_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpbsv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpbsvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublecomplex *__afb, __CLPK_integer *__ldafb, char *__equed,
        __CLPK_doublereal *__s, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpbtf2_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpbtrf_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpbtrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__kd,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpftrf_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpftri_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpftrs_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__a,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpocon_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__anorm,
        __CLPK_doublereal *__rcond, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpoequ_(__CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__s,
        __CLPK_doublereal *__scond, __CLPK_doublereal *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpoequb_(__CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__s,
        __CLPK_doublereal *__scond, __CLPK_doublereal *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zporfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__af, __CLPK_integer *__ldaf,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zposv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zposvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__af,
        __CLPK_integer *__ldaf, char *__equed, __CLPK_doublereal *__s,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpotf2_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpotrf_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpotri_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpotrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zppcon_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublereal *__anorm, __CLPK_doublereal *__rcond,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zppequ_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublereal *__s, __CLPK_doublereal *__scond,
        __CLPK_doublereal *__amax,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpprfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ap, __CLPK_doublecomplex *__afp,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zppsv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ap, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zppsvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__afp, char *__equed, __CLPK_doublereal *__s,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpptrf_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpptri_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpptrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ap, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpstf2_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__piv, __CLPK_integer *__rank,
        __CLPK_doublereal *__tol, __CLPK_doublereal *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpstrf_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__piv, __CLPK_integer *__rank,
        __CLPK_doublereal *__tol, __CLPK_doublereal *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zptcon_(__CLPK_integer *__n, __CLPK_doublereal *__d__,
        __CLPK_doublecomplex *__e, __CLPK_doublereal *__anorm,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpteqr_(char *__compz, __CLPK_integer *__n, __CLPK_doublereal *__d__,
        __CLPK_doublereal *__e, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_doublereal *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zptrfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublereal *__d__, __CLPK_doublecomplex *__e,
        __CLPK_doublereal *__df, __CLPK_doublecomplex *__ef,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zptsv_(__CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublereal *__d__, __CLPK_doublecomplex *__e,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zptsvx_(char *__fact, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublereal *__d__, __CLPK_doublecomplex *__e,
        __CLPK_doublereal *__df, __CLPK_doublecomplex *__ef,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpttrf_(__CLPK_integer *__n, __CLPK_doublereal *__d__,
        __CLPK_doublecomplex *__e,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zpttrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublereal *__d__, __CLPK_doublecomplex *__e,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zptts2_(__CLPK_integer *__iuplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublereal *__d__,
        __CLPK_doublecomplex *__e, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zrot_(__CLPK_integer *__n, __CLPK_doublecomplex *__cx,
        __CLPK_integer *__incx, __CLPK_doublecomplex *__cy,
        __CLPK_integer *__incy, __CLPK_doublereal *__c__,
        __CLPK_doublecomplex *__s) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zspcon_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_integer *__ipiv, __CLPK_doublereal *__anorm,
        __CLPK_doublereal *__rcond, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zspmv_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__alpha,
        __CLPK_doublecomplex *__ap, __CLPK_doublecomplex *__x,
        __CLPK_integer *__incx, __CLPK_doublecomplex *__beta,
        __CLPK_doublecomplex *__y,
        __CLPK_integer *__incy) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zspr_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__alpha,
        __CLPK_doublecomplex *__x, __CLPK_integer *__incx,
        __CLPK_doublecomplex *__ap) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsprfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ap, __CLPK_doublecomplex *__afp,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zspsv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ap, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zspsvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__afp, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsptrf_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsptri_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsptrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ap, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zstedc_(char *__compz, __CLPK_integer *__n, __CLPK_doublereal *__d__,
        __CLPK_doublereal *__e, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__lrwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zstegr_(char *__jobz, char *__range, __CLPK_integer *__n,
        __CLPK_doublereal *__d__, __CLPK_doublereal *__e,
        __CLPK_doublereal *__vl, __CLPK_doublereal *__vu, __CLPK_integer *__il,
        __CLPK_integer *__iu, __CLPK_doublereal *__abstol, __CLPK_integer *__m,
        __CLPK_doublereal *__w, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_integer *__isuppz,
        __CLPK_doublereal *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__iwork, __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zstein_(__CLPK_integer *__n, __CLPK_doublereal *__d__,
        __CLPK_doublereal *__e, __CLPK_integer *__m, __CLPK_doublereal *__w,
        __CLPK_integer *__iblock, __CLPK_integer *__isplit,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_doublereal *__work, __CLPK_integer *__iwork,
        __CLPK_integer *__ifail,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zstemr_(char *__jobz, char *__range, __CLPK_integer *__n,
        __CLPK_doublereal *__d__, __CLPK_doublereal *__e,
        __CLPK_doublereal *__vl, __CLPK_doublereal *__vu, __CLPK_integer *__il,
        __CLPK_integer *__iu, __CLPK_integer *__m, __CLPK_doublereal *__w,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_integer *__nzc, __CLPK_integer *__isuppz,
        __CLPK_logical *__tryrac, __CLPK_doublereal *__work,
        __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsteqr_(char *__compz, __CLPK_integer *__n, __CLPK_doublereal *__d__,
        __CLPK_doublereal *__e, __CLPK_doublecomplex *__z__,
        __CLPK_integer *__ldz, __CLPK_doublereal *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsycon_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_doublereal *__anorm, __CLPK_doublereal *__rcond,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsyequb_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublereal *__s,
        __CLPK_doublereal *__scond, __CLPK_doublereal *__amax,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsymv_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__alpha,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__x, __CLPK_integer *__incx,
        __CLPK_doublecomplex *__beta, __CLPK_doublecomplex *__y,
        __CLPK_integer *__incy) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsyr_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__alpha,
        __CLPK_doublecomplex *__x, __CLPK_integer *__incx,
        __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsyrfs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__af, __CLPK_integer *__ldaf,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsysv_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsysvx_(char *__fact, char *__uplo, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__af,
        __CLPK_integer *__ldaf, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__rcond, __CLPK_doublereal *__ferr,
        __CLPK_doublereal *__berr, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsytf2_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsytrf_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsytri_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_integer *__ipiv,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zsytrs_(char *__uplo, __CLPK_integer *__n, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__ipiv, __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztbcon_(char *__norm, char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_doublecomplex *__ab,
        __CLPK_integer *__ldab, __CLPK_doublereal *__rcond,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztbrfs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztbtrs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__kd, __CLPK_integer *__nrhs,
        __CLPK_doublecomplex *__ab, __CLPK_integer *__ldab,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztfsm_(char *__transr, char *__side, char *__uplo, char *__trans,
        char *__diag, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_doublecomplex *__alpha, __CLPK_doublecomplex *__a,
        __CLPK_doublecomplex *__b,
        __CLPK_integer *__ldb) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztftri_(char *__transr, char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztfttp_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__arf, __CLPK_doublecomplex *__ap,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztfttr_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__arf, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztgevc_(char *__side, char *__howmny, __CLPK_logical *__select,
        __CLPK_integer *__n, __CLPK_doublecomplex *__s, __CLPK_integer *__lds,
        __CLPK_doublecomplex *__p, __CLPK_integer *__ldp,
        __CLPK_doublecomplex *__vl, __CLPK_integer *__ldvl,
        __CLPK_doublecomplex *__vr, __CLPK_integer *__ldvr,
        __CLPK_integer *__mm, __CLPK_integer *__m, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztgex2_(__CLPK_logical *__wantq, __CLPK_logical *__wantz,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_integer *__j1,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztgexc_(__CLPK_logical *__wantq, __CLPK_logical *__wantz,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz,
        __CLPK_integer *__ifst, __CLPK_integer *__ilst,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztgsen_(__CLPK_integer *__ijob, __CLPK_logical *__wantq,
        __CLPK_logical *__wantz, __CLPK_logical *__select, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__alpha, __CLPK_doublecomplex *__beta,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublecomplex *__z__, __CLPK_integer *__ldz, __CLPK_integer *__m,
        __CLPK_doublereal *__pl, __CLPK_doublereal *__pr,
        __CLPK_doublereal *__dif, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__liwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztgsja_(char *__jobu, char *__jobv, char *__jobq, __CLPK_integer *__m,
        __CLPK_integer *__p, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_integer *__l, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublereal *__tola, __CLPK_doublereal *__tolb,
        __CLPK_doublereal *__alpha, __CLPK_doublereal *__beta,
        __CLPK_doublecomplex *__u, __CLPK_integer *__ldu,
        __CLPK_doublecomplex *__v, __CLPK_integer *__ldv,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublecomplex *__work, __CLPK_integer *__ncycle,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztgsna_(char *__job, char *__howmny, __CLPK_logical *__select,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__vl, __CLPK_integer *__ldvl,
        __CLPK_doublecomplex *__vr, __CLPK_integer *__ldvr,
        __CLPK_doublereal *__s, __CLPK_doublereal *__dif, __CLPK_integer *__mm,
        __CLPK_integer *__m, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork, __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztgsy2_(char *__trans, __CLPK_integer *__ijob, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__d__, __CLPK_integer *__ldd,
        __CLPK_doublecomplex *__e, __CLPK_integer *__lde,
        __CLPK_doublecomplex *__f, __CLPK_integer *__ldf,
        __CLPK_doublereal *__scale, __CLPK_doublereal *__rdsum,
        __CLPK_doublereal *__rdscal,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztgsyl_(char *__trans, __CLPK_integer *__ijob, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__d__, __CLPK_integer *__ldd,
        __CLPK_doublecomplex *__e, __CLPK_integer *__lde,
        __CLPK_doublecomplex *__f, __CLPK_integer *__ldf,
        __CLPK_doublereal *__scale, __CLPK_doublereal *__dif,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__iwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztpcon_(char *__norm, char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_doublecomplex *__ap, __CLPK_doublereal *__rcond,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztprfs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztptri_(char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_doublecomplex *__ap,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztptrs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztpttf_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__ap, __CLPK_doublecomplex *__arf,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztpttr_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrcon_(char *__norm, char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublereal *__rcond, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrevc_(char *__side, char *__howmny, __CLPK_logical *__select,
        __CLPK_integer *__n, __CLPK_doublecomplex *__t, __CLPK_integer *__ldt,
        __CLPK_doublecomplex *__vl, __CLPK_integer *__ldvl,
        __CLPK_doublecomplex *__vr, __CLPK_integer *__ldvr,
        __CLPK_integer *__mm, __CLPK_integer *__m, __CLPK_doublecomplex *__work,
        __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrexc_(char *__compq, __CLPK_integer *__n, __CLPK_doublecomplex *__t,
        __CLPK_integer *__ldt, __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_integer *__ifst, __CLPK_integer *__ilst,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrrfs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__x, __CLPK_integer *__ldx,
        __CLPK_doublereal *__ferr, __CLPK_doublereal *__berr,
        __CLPK_doublecomplex *__work, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrsen_(char *__job, char *__compq, __CLPK_logical *__select,
        __CLPK_integer *__n, __CLPK_doublecomplex *__t, __CLPK_integer *__ldt,
        __CLPK_doublecomplex *__q, __CLPK_integer *__ldq,
        __CLPK_doublecomplex *__w, __CLPK_integer *__m, __CLPK_doublereal *__s,
        __CLPK_doublereal *__sep, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrsna_(char *__job, char *__howmny, __CLPK_logical *__select,
        __CLPK_integer *__n, __CLPK_doublecomplex *__t, __CLPK_integer *__ldt,
        __CLPK_doublecomplex *__vl, __CLPK_integer *__ldvl,
        __CLPK_doublecomplex *__vr, __CLPK_integer *__ldvr,
        __CLPK_doublereal *__s, __CLPK_doublereal *__sep, __CLPK_integer *__mm,
        __CLPK_integer *__m, __CLPK_doublecomplex *__work,
        __CLPK_integer *__ldwork, __CLPK_doublereal *__rwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrsyl_(char *__trana, char *__tranb, __CLPK_integer *__isgn,
        __CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublereal *__scale,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrti2_(char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrtri_(char *__uplo, char *__diag, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrtrs_(char *__uplo, char *__trans, char *__diag, __CLPK_integer *__n,
        __CLPK_integer *__nrhs, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__b, __CLPK_integer *__ldb,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrttf_(char *__transr, char *__uplo, __CLPK_integer *__n,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__arf,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztrttp_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__ap,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztzrqf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ztzrzf_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zung2l_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zung2r_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zungbr_(char *__vect, __CLPK_integer *__m, __CLPK_integer *__n,
        __CLPK_integer *__k, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunghr_(__CLPK_integer *__n, __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zungl2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunglq_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zungql_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zungqr_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zungr2_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zungrq_(__CLPK_integer *__m, __CLPK_integer *__n, __CLPK_integer *__k,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zungtr_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunm2l_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunm2r_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunmbr_(char *__vect, char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunmhr_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__ilo, __CLPK_integer *__ihi,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__c__,
        __CLPK_integer *__ldc, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunml2_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunmlq_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunmql_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunmqr_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunmr2_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunmr3_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_integer *__l,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__c__,
        __CLPK_integer *__ldc, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunmrq_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_doublecomplex *__a,
        __CLPK_integer *__lda, __CLPK_doublecomplex *__tau,
        __CLPK_doublecomplex *__c__, __CLPK_integer *__ldc,
        __CLPK_doublecomplex *__work, __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunmrz_(char *__side, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_integer *__k, __CLPK_integer *__l,
        __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__c__,
        __CLPK_integer *__ldc, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zunmtr_(char *__side, char *__uplo, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_doublecomplex *__a, __CLPK_integer *__lda,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__c__,
        __CLPK_integer *__ldc, __CLPK_doublecomplex *__work,
        __CLPK_integer *__lwork,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zupgtr_(char *__uplo, __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__q,
        __CLPK_integer *__ldq, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int zupmtr_(char *__side, char *__uplo, char *__trans, __CLPK_integer *__m,
        __CLPK_integer *__n, __CLPK_doublecomplex *__ap,
        __CLPK_doublecomplex *__tau, __CLPK_doublecomplex *__c__,
        __CLPK_integer *__ldc, __CLPK_doublecomplex *__work,
        __CLPK_integer *__info) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int dlamc1_(__CLPK_integer *__beta, __CLPK_integer *__t, __CLPK_logical *__rnd,
        __CLPK_logical *__ieee1) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int ilaver_(__CLPK_integer *__vers_major__, __CLPK_integer *__vers_minor__,
        __CLPK_integer *__vers_patch__) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal slamch_(char *__cmach) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int slamc1_(__CLPK_integer *__beta, __CLPK_integer *__t, __CLPK_logical *__rnd,
        __CLPK_logical *__ieee1) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int slamc2_(__CLPK_integer *__beta, __CLPK_integer *__t, __CLPK_logical *__rnd,
        __CLPK_real *__eps, __CLPK_integer *__emin, __CLPK_real *__rmin,
        __CLPK_integer *__emax,
        __CLPK_real *__rmax) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

__CLPK_doublereal slamc3_(__CLPK_real *__a,
        __CLPK_real *__b) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);

int slamc4_(__CLPK_integer *__emin, __CLPK_real *__start,
        __CLPK_integer *__base) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int slamc5_(__CLPK_integer *__beta, __CLPK_integer *__p, __CLPK_integer *__emin,
        __CLPK_logical *__ieee, __CLPK_integer *__emax,
        __CLPK_real *__rmax) __OSX_AVAILABLE_STARTING(__MAC_10_2,__IPHONE_4_0);


__CLPK_doublereal dlamch_(char *__cmach) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int dlamc1_(__CLPK_integer *__beta, __CLPK_integer *__t, __CLPK_logical *__rnd,
        __CLPK_logical *__ieee1) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int dlamc2_(__CLPK_integer *__beta, __CLPK_integer *__t, __CLPK_logical *__rnd,
        __CLPK_doublereal *__eps, __CLPK_integer *__emin,
        __CLPK_doublereal *__rmin, __CLPK_integer *__emax,
        __CLPK_doublereal *__rmax) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_doublereal dlamc3_(__CLPK_doublereal *__a,
        __CLPK_doublereal *__b) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int dlamc4_(__CLPK_integer *__emin, __CLPK_doublereal *__start,
        __CLPK_integer *__base) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

int dlamc5_(__CLPK_integer *__beta, __CLPK_integer *__p, __CLPK_integer *__emin,
        __CLPK_logical *__ieee, __CLPK_integer *__emax,
        __CLPK_doublereal *__rmax) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);

__CLPK_integer ilaenv_(__CLPK_integer *__ispec, char *__name__, char *__opts,
        __CLPK_integer *__n1, __CLPK_integer *__n2, __CLPK_integer *__n3,
        __CLPK_integer *__n4) __OSX_AVAILABLE_STARTING(__MAC_10_2,
        __IPHONE_4_0);


#ifdef __cplusplus
}
#endif
#endif /* __CLAPACK_H */
                                                                                                                                                                                                                                                                                                                                                                                                                  vBasicOps.h                                                                                         0100644 0001750 0001750 00000105030 12567451167 043233  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/Headers                           /*
     File:       vecLib/vBasicOps.h
 
     Contains:   Basic Algebraic Operations for AltiVec
 
     Version:    vecLib-563.3
 
     Copyright:  Copyright (c) 1999-2015 by Apple Inc. All rights reserved.
 
     Bugs:       For bug reports, consult the following page on
                 the World Wide Web:
 
                     http://developer.apple.com/bugreporter/
 
*/
#ifndef __VBASICOPS__
#define __VBASICOPS__

#include <stdint.h>

#include "vecLibTypes.h"

#include <Availability.h>

#if PRAGMA_ONCE
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif


#if !defined __has_feature
    #define __has_feature(f)    0
#endif
#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull begin")
#else
    #define __nullable
    #define __nonnull
#endif


#if defined(__ppc__) || defined(__ppc64__) || defined(__i386__) || defined(__x86_64__)
#if defined _AltiVecPIMLanguageExtensionsAreEnabled || defined __SSE2__

/*                                                                                  
  This section is a collection of algebraic functions that uses the AltiVec       
  instruction set, and is designed to facilitate vector processing in             
  mathematical programming. Following table indicates which functions are covered
  by AltiVec instruction set and which ones are performed by vBasicOps library:

Legend:
    H/W   = Hardware
    LIB  = vBasicOps Library
    NRel  = Next Release of vBasicOps Library
    N/A   = Not Applicable

+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
| Data Type/    | U8  | S8  | U16 | S16 | U32 | S32 | U64 | S64 | U128 | S128 |
| Function      |     |     |     |     |     |     |     |     |      |      |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
|    Add        | H/W | H/W | H/W | H/W | H/W | H/W | LIB | LIB | LIB  |  LIB |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
|    AddS       | H/W | H/W | H/W | H/W | H/W | H/W | LIB | LIB | LIB  | LIB  |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
|    Sub        | H/W | H/W | H/W | H/W | H/W | H/W | LIB | LIB | LIB  | LIB  |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
|    SubS       | H/W | H/W | H/W | H/W | H/W | H/W | LIB | LIB | LIB  | LIB  |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
|  Mul(Half)    | LIB | LIB | LIB | LIB | LIB | LIB | LIB | LIB | LIB  | LIB  |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
|Mul Even (Full)| H/W | H/W | H/W | H/W | LIB | LIB | LIB | LIB |  N/A |  N/A |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
|Mul Odd  (Full)| H/W | H/W | H/W | H/W | LIB | LIB | LIB | LIB |  N/A |  N/A |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
|    Divide     | LIB | LIB | LIB | LIB | LIB | LIB | LIB |NRel | LIB  | LIB  |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
|    Shift      | H/W | H/W | H/W | H/W | H/W | H/W | LIB | LIB | LIB  | LIB  |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+
|    Rotate     | H/W | H/W | H/W | H/W | H/W | H/W | LIB | LIB | LIB  | LIB  |
+---------------+-----+-----+-----+-----+-----+-----+-----+-----+------+------+



Following is a short description of functions in this section:
                                                                         
      Add:      It takes two vectors of data elements and adds each element         
                of the second vector to the corresponding element of the first      
                vector and puts the result in the associated data element of the    
                destination register.

      Subtract: It takes two vectors of data elements and subtracts each element    
                of the second vector from the corresponding element of the first    
                vector and puts the result in the associated data element of the    
                destination register.

      Multiply: It takes two vectors of data elements and multiplies each element   
                of the first vector by the corresponding element of the second      
                vector and puts the result in the associated data element of the    
                destination register. 

      Divide:   It takes two vectors of data elements and divides each element      
                of the first vector by the corresponding element of the second      
                vector and puts the result in the associated data element of the    
                destination register. A pointer is passed to the function to get   
                the remainder.

      Shift:    It takes a vector of two 64-bit data elements or one 128-bit
                data element and shifts it to right or left, in a logical or 
                algebraic manner, using a shift factor that is passed as an
                arguement to the function.

      Rotate:   It takes a vector of two 64-bit data elements or one 128-bit
                data element and rotates it to right or left, using a shift 
               factor that is passed as an arguement to the function.


   Following abbreviations are used in the names of functions in this section:   
                                                                                 
      v            Vector                                                        
      U            Unsigned                                                      
      S            Signed                                                        
      8            8-bit                                                         
      16           16-bit                                                        
      32           32-bit                                                        
      64           64-bit                                                        
      128          128-bit                                                       
      Add          Addition                                                      
      AddS         Addition with Saturation                                      
      Sub          Subtraction                                                   
      SubS         Subtraction with Saturation                                   
      Mul          Multiplication                                                
      Divide       Division                                                      
      Half         Half (multiplication, width of result is the same as width of 
                      operands)                                                  
      Full         Full (multiplication, width of result is twice width of each  
                      operand)                                                   
      Even         Multiplication is performed on EVEN data elements of vector   
                      (Please note that Big endian is used. So the left-most     
                      data element is labled as element 0)                       
      Odd          Multiplication is performed on ODD  data elements of vector.  
      A            Algebraic      
      LL           Logical Left     
      LR           Logical Right     
      Shift        Shift by one factor     
      Shift2       Shift by two factors( only apply to 64 bit operation )     
      Rotate       Rotate by one factor     
      Rotate2      Rotate by two factors( only apply to 64 bit operation )     
                                                                                 
*/

// There are certain routines (namely vS64Add and vU64Add) with 1
// instruction implementations. There is no point in having a function
// call occur and then return after executing 1 instruction. Thus we
// introduce this conditional define to allow for certain inline
// attributes to be defined.
#if defined __SSE2__

#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull end")
	#include <immintrin.h>
    _Pragma("clang assume_nonnull begin")
#else
	#include <immintrin.h>
#endif

#define __VBASICOPS_INLINE_ATTR__ __attribute__((__always_inline__, __nodebug__))
#endif // defined __SSE2__


/*
 *  vU8Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt8 
vU8Divide(
  vUInt8    vN,
  vUInt8    vD,
  vUInt8 * __nullable vRemainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS8Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt8 
vS8Divide(
  vSInt8    vN,
  vSInt8    vD,
  vSInt8 * __nullable vRemainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU16Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt16 
vU16Divide(
  vUInt16    vN,
  vUInt16    vD,
  vUInt16 * __nullable vRemainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS16Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt16 
vS16Divide(
  vSInt16    vN,
  vSInt16    vD,
  vSInt16 * __nullable vRemainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU32Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU32Divide(
  vUInt32    vN,
  vUInt32    vD,
  vUInt32 * __nullable vRemainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS32Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS32Divide(
  vSInt32    vN,
  vSInt32    vD,
  vSInt32 * __nullable vRemainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU64Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU64Divide(
  vUInt32    vN,
  vUInt32    vD,
  vUInt32 * __nullable vRemainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS64Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS64Divide(
  vSInt32    vN,
  vSInt32    vD,
  vSInt32 * __nullable vRemainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU128Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU128Divide(
  vUInt32    vN,
  vUInt32    vD,
  vUInt32 * __nullable vRemainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS128Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS128Divide(
  vSInt32    vN,
  vSInt32    vD,
  vSInt32 * __nullable vRemainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/*
 *  vU8HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt8 
vU8HalfMultiply(
  vUInt8   vA,
  vUInt8   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS8HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt8 
vS8HalfMultiply(
  vSInt8   vA,
  vSInt8   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU16HalfMultiply()
 *  
 *  Currently on Intel, we inline a one instruction implementation of vU16HalfMultiply.
 *  An implementation is also exported in the library for legacy applications.
 *
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
#if defined __SSE2__
static __inline__ vUInt16 __VBASICOPS_INLINE_ATTR__
vU16HalfMultiply(
  vUInt16   __vbasicops_vA,
  vUInt16   __vbasicops_vB) { return _mm_mullo_epi16(__vbasicops_vA, __vbasicops_vB); }
#else // defined __SSE2__
extern vUInt16 
vU16HalfMultiply(
  vUInt16   vA,
  vUInt16   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);
#endif // defined __SSE2__


/*
 *  vS16HalfMultiply()
 *  
 *  On Intel, this function has a one instruction implementation that we inline. An
 *  implementation is also available via an exported symbol in the library for legacy
 *  applications.
 *
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
#if defined __SSE2__
static __inline__ vSInt16 __VBASICOPS_INLINE_ATTR__
vS16HalfMultiply(
  vSInt16   __vbasicops_vA,
  vSInt16   __vbasicops_vB) { return _mm_mullo_epi16(__vbasicops_vA, __vbasicops_vB); }
#else // defined __SSE2__
extern vSInt16 
vS16HalfMultiply(
  vSInt16   vA,
  vSInt16   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);
#endif // defined __SSE2__


/*
 *  vU32HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU32HalfMultiply(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS32HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS32HalfMultiply(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU32FullMulEven()
 *  
 *  Currently we use a 3 instruction inlined implementation for vU32FullMulEven
 *  on Intel. Note that for legacy applications, there is still a compiled 
 *  implementation available in the library via an exported symbol.
 *
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
#if defined (__SSE2__)
static __inline__ vUInt32 __VBASICOPS_INLINE_ATTR__
vU32FullMulEven(
  vUInt32   __vbasicops_vA,
  vUInt32   __vbasicops_vB)
{
    __vbasicops_vA = _mm_srli_epi64(__vbasicops_vA, 32);
    __vbasicops_vB = _mm_srli_epi64(__vbasicops_vB, 32);
    return _mm_mul_epu32(__vbasicops_vA, __vbasicops_vB);
}
#else // defined __SSE2__
extern vUInt32 
vU32FullMulEven(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);
#endif // defined __SSE2__


/*
 *  vU32FullMulOdd()
 *  
 *  Currently on Intel, we inline a one instruction implementation of vU32FullMulOdd.
 *  An implementation is also exported in the library for legacy applications.
 *
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
#if defined __SSE2__
static __inline__ vUInt32 __VBASICOPS_INLINE_ATTR__
vU32FullMulOdd(
  vUInt32   __vbasicops_vA,
  vUInt32   __vbasicops_vB) { return _mm_mul_epu32(__vbasicops_vA, __vbasicops_vB); }
#else // defined __SSE2__
extern vUInt32 
vU32FullMulOdd(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);
#endif // defined __SSE2__


/*
 *  vS32FullMulEven()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS32FullMulEven(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS32FullMulOdd()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS32FullMulOdd(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU64FullMulEven()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU64FullMulEven(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU64FullMulOdd()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU64FullMulOdd(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU64HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU64HalfMultiply(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS64HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS64HalfMultiply(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS64FullMulEven()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS64FullMulEven(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS64FullMulOdd()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS64FullMulOdd(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU128HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU128HalfMultiply(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS128HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS128HalfMultiply(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/*
 *  vU64Sub()
 *  
 *  When SSE2 code generation is enabled on Intel architectures,
 *  vU64Sub has a single instruction implementation provided by an
 *  inlined function. On other architectures, the extern declaration
 *  will be provided and on all architectures, an exported vU64Sub
 *  routine is provided. This ensures that legacy applications are
 *  supported on Intel.
 *
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
#if defined __SSE2__
static __inline__ vUInt32 __VBASICOPS_INLINE_ATTR__
vU64Sub(
  vUInt32   __vbasicops_vA,
  vUInt32   __vbasicops_vB) { return _mm_sub_epi64(__vbasicops_vA, __vbasicops_vB); }
#else
extern vUInt32 
vU64Sub(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);
#endif


/*
 *  vU64SubS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU64SubS(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU128Sub()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU128Sub(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU128SubS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU128SubS(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS64Sub()
 *
 *  When SSE2 code generation is enabled on Intel architectures,
 *  vS64Sub has a single instruction implementation provided by an
 *  inlined function. On other architectures, the extern declaration
 *  will be provided and on all architectures, an exported vS64Sub
 *  routine is provided. This ensures that legacy applications are
 *  supported on Intel.
 *
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
#if defined __SSE2__
static __inline__ vSInt32 __VBASICOPS_INLINE_ATTR__
vS64Sub(
  vSInt32   __vbasicops_vA,
  vSInt32   __vbasicops_vB) { return _mm_sub_epi64(__vbasicops_vA, __vbasicops_vB); }
#else
extern vSInt32 
vS64Sub(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);
#endif


/*
 *  vS128Sub()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS128Sub(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS64SubS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS64SubS(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS128SubS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS128SubS(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/*
 *  vU64Add()
 *  
 *  When SSE2 code generation is enabled on Intel architectures, single-instruction
 *  implementations of vU64Add is inlined instead of making an external function call. 
 * 
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
#if defined (__SSE2__)
static __inline__ vUInt32 __VBASICOPS_INLINE_ATTR__
vU64Add(
  vUInt32   __vbasicops_vA,
  vUInt32   __vbasicops_vB) { return _mm_add_epi64(__vbasicops_vA, __vbasicops_vB); }
#else
extern vUInt32
vU64Add(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);
#endif

/*
 *  vU64AddS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU64AddS(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU128Add()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU128Add(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU128AddS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vU128AddS(
  vUInt32   vA,
  vUInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS64Add()
 *
 *  When SSE2 code generation is enabled on Intel architectures, single-instruction
 *  implementations of vS64Add is inlined instead of making an external function call. 
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
#if defined __SSE2__
static __inline__ vSInt32 __VBASICOPS_INLINE_ATTR__
vS64Add(
  vSInt32   __vbasicops_vA,
  vSInt32   __vbasicops_vB) { return _mm_add_epi64(__vbasicops_vA, __vbasicops_vB); }
#else // defined __SSE2__
extern vSInt32 
vS64Add(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);
#endif // defined __SSE2__


/*
 *  vS64AddS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS64AddS(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS128Add()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS128Add(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS128AddS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vSInt32 
vS128AddS(
  vSInt32   vA,
  vSInt32   vB) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/*
 *  vU64Neg()
 */  
extern vUInt32 
vU64Neg (
  vUInt32   vA) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS64Neg()
 */  
extern vSInt32 
vS64Neg (
  vSInt32   vA) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_NA);


/*
 *  vU1284Neg()
 */  
extern vUInt32 
vU128Neg (
  vUInt32   vA) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_NA);


/*
 *  vS1284Neg()
 */  
extern vSInt32 
vS128Neg (
  vSInt32   vA) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_NA);



/*
 *  vLL64Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
#if defined (__SSE2__)
static __inline__ vUInt32 __VBASICOPS_INLINE_ATTR__
vLL64Shift(
  vUInt32   __vbasicops_vA,
  vUInt8    __vbasicops_vShiftFactor)
{
    return _mm_sll_epi64(__vbasicops_vA,
                         _mm_and_si128(__vbasicops_vShiftFactor, _mm_cvtsi32_si128( 0x3F )));
}
#else
extern vUInt32 
vLL64Shift(
  vUInt32   vA,
  vUInt8    vShiftFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);
#endif

/*
 *  vA64Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vA64Shift(
  vUInt32   vA,
  vUInt8    vShiftFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vLR64Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
#if defined (__SSE2__)
static __inline__ vUInt32 __VBASICOPS_INLINE_ATTR__
vLR64Shift(
    vUInt32   __vbasicops_vA,
    vUInt8    __vbasicops_vShiftFactor)
{
    return _mm_srl_epi64(__vbasicops_vA,
                         _mm_and_si128(__vbasicops_vShiftFactor, _mm_cvtsi32_si128( 0x3F )));
}
#else
extern vUInt32 
vLR64Shift(
  vUInt32   vA,
  vUInt8    vShiftFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);
#endif

/*
 *  vLL64Shift2()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vLL64Shift2(
  vUInt32   vA,
  vUInt8    vShiftFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vA64Shift2()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vA64Shift2(
  vUInt32   vA,
  vUInt8    vShiftFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vLR64Shift2()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vLR64Shift2(
  vUInt32   vA,
  vUInt8    vShiftFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vLL128Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vLL128Shift(
  vUInt32   vA,
  vUInt8    vShiftFactor) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_NA);


/*
 *  vLR128Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vLR128Shift(
  vUInt32   vA,
  vUInt8    vShiftFactor) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_NA);


/*
 *  vA128Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vA128Shift(
  vUInt32   vA,
  vUInt8    vShiftFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/*
 *  vL64Rotate()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vL64Rotate(
  vUInt32   vA,
  vUInt8    vRotateFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vR64Rotate()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vR64Rotate(
  vUInt32   vA,
  vUInt8    vRotateFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vL64Rotate2()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vL64Rotate2(
  vUInt32   vA,
  vUInt8    vRotateFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vR64Rotate2()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vR64Rotate2(
  vUInt32   vA,
  vUInt8    vRotateFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vL128Rotate()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vL128Rotate(
  vUInt32   vA,
  vUInt8    vRotateFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vR128Rotate()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern vUInt32 
vR128Rotate(
  vUInt32   vA,
  vUInt8    vRotateFactor) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


#endif  // defined _AltiVecPIMLanguageExtensionsAreEnabled || defined __SSE2__

#endif  /* defined(__ppc__) || defined(__ppc64__) || defined(__i386__) || defined(__x86_64__) */


#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull end")
#endif


#ifdef __cplusplus
}
#endif

#endif /* __VBASICOPS__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        vBigNum.h                                                                                           0100644 0001750 0001750 00000150136 12567451167 042720  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/Headers                           /*
     File:       vecLib/vBigNum.h
 
     Contains:   Algebraic and logical operations on large operands.
 
     Version:    vecLib-563.3
 
     Copyright:  Copyright (c) 1999-2015 by Apple Inc. All rights reserved.
 
     Bugs:       For bug reports, consult the following page on
                 the World Wide Web:
 
                     http://developer.apple.com/bugreporter/
 
*/
#ifndef __VBIGNUM__
#define __VBIGNUM__

#include <stdint.h>
/*
#ifndef __VECLIBTYPES__
#include <vecLib/vecLibTypes.h>
#endif

*/
#include "vecLibTypes.h"

#include <Availability.h>

#if PRAGMA_ONCE
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif


#if !defined __has_feature
    #define __has_feature(f)    0
#endif
#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull begin")
#else
    #define __nullable
    #define __nonnull
#endif


#pragma options align=power

#if defined(__ppc__) || defined(__ppc64__) || defined(__i386__) || defined(__x86_64__)
/************************************************************************************
*                                                                                   *
*  This library provides a set of subroutines for basic algebraic and some logical  *
*  operations performed on operands with the following sizes:                       *
*                                                                                   *
*            128 - bits                                                             *
*            256 - bits                                                             *
*            512 - bits                                                             *
*           1024 - bits                                                             *
*                                                                                   *
*  Following basic and algebraic operations are included:                           *
*                                                                                   *
*            Addition                                                               *
*            Subtraction                                                            *
*            Multiplication                                                         *
*            Division                                                               *
*            Mod                                                                    *
*            Shift Right                                                            *
*            Shift Right Arithmatic                                                 *
*            Shift Left                                                             *
*            Rotate Right                                                           *
*            Rotate Left                                                            *
*                                                                                   *
*                                                                                   *
************************************************************************************/
/***********************************************************************************
*   Following abbreviations are used in the names of functions in this library:    *
*                                                                                  *
*      v            Vector                                                         *
*      U            Unsigned                                                       *
*      S            Signed                                                         *
*      128          128  - bit                                                     *
*      256          256  - bit                                                     *
*      512          512  - bit                                                     *
*      1024         1024 - bit                                                     *
*      Add          Addition, modular arithmetic                                   *
*      AddS         Addition with Saturation                                       *
*      Sub          Subtraction, modular arithmetic                                *
*      SubS         Subtraction with Saturation                                    *
*      Multiply     Multiplication                                                 *
*      Divide       Division                                                       *
*      Half         Half (multiplication, width of result is the same as width of  *
*                      operands)                                                   *                         
*      Full         Full (multiplication, width of result is twice width of each   *
*                      operand)                                                    *
*                                                                                  *
*      Mod          Modular operation                                              *
*      Neg          Negate a number                                                *
*      A            Algebraic                                                      *
*      LL           Logical Left                                                   *
*      LR           Logical Right                                                  *
*      Shift        Shift                                                          *
*      Rotate       Rotation                                                       *
*                                                                                  *
***********************************************************************************/
/************************************************************************************
*                                                                                   *
*  A few explanations for the choices made in naming, passing arguments, and        *
*  various functions.                                                               *
*                                                                                   *
*      1) Names for the functions are made compatible with the names used in the    *
*      vBasicOps library. The format of the names are the same and include a        *
*      designation to show a vector operation, then a symbol for the type of data   *
*      (signed or unsigned), followed by the size of operands, then the operation   *
*      performed.                                                                   *
*                                                                                   *
*      2) Note that the logical and arithmetic shiftLeft operation are the same.    *
*                                                                                   *
*      3) Rotate operation is performed on unsigned and signed numbers.             *
*                                                                                   *
************************************************************************************/

/************************************************************************************
*                                                                                   *
*  Following are a set of structures for vector data types and scalar data types    *
*                                                                                   *
************************************************************************************/
#if defined _AltiVecPIMLanguageExtensionsAreEnabled
union vU128 {
  vUInt32             v;
  struct {
    vUInt32             v1;
  }                       vs;
  struct {
    uint32_t            MSW;
    uint32_t            d2;
    uint32_t            d3;
    uint32_t            LSW;
  }                       s;
};
typedef union vU128                     vU128;
union vS128 {
  vUInt32             v;
  struct {
    vUInt32             v1;
  }                       vs;
  struct {
    int32_t             MSW;
    uint32_t            d2;
    uint32_t            d3;
    uint32_t            LSW;
  }                       s;
};
typedef union vS128                     vS128;
union vU256 {
  vUInt32             v[2];
  struct {
    vUInt32             v1;
    vUInt32             v2;
  }                       vs;
  struct {
    uint32_t            MSW;
    uint32_t            d2;
    uint32_t            d3;
    uint32_t            d4;
    uint32_t            d5;
    uint32_t            d6;
    uint32_t            d7;
    uint32_t            LSW;
  }                       s;
};
typedef union vU256                     vU256;
union vS256 {
  vUInt32             v[2];
  struct {
    vUInt32             v1;
    vUInt32             v2;
  }                       vs;
  struct {
    int32_t             MSW;
    uint32_t            d2;
    uint32_t            d3;
    uint32_t            d4;
    uint32_t            d5;
    uint32_t            d6;
    uint32_t            d7;
    uint32_t            LSW;
  }                       s;
};
typedef union vS256                     vS256;
union vU512 {
  vUInt32             v[4];
  struct {
    vUInt32             v1;
    vUInt32             v2;
    vUInt32             v3;
    vUInt32             v4;
  }                       vs;
  struct {
    uint32_t            MSW;
    uint32_t            d2;
    uint32_t            d3;
    uint32_t            d4;
    uint32_t            d5;
    uint32_t            d6;
    uint32_t            d7;
    uint32_t            d8;
    uint32_t            d9;
    uint32_t            d10;
    uint32_t            d11;
    uint32_t            d12;
    uint32_t            d13;
    uint32_t            d14;
    uint32_t            d15;
    uint32_t            LSW;
  }                       s;
};
typedef union vU512                     vU512;
union vS512 {
  vUInt32             v[4];
  struct {
    vUInt32             v1;
    vUInt32             v2;
    vUInt32             v3;
    vUInt32             v4;
  }                       vs;
  struct {
    int32_t             MSW;
    uint32_t            d2;
    uint32_t            d3;
    uint32_t            d4;
    uint32_t            d5;
    uint32_t            d6;
    uint32_t            d7;
    uint32_t            d8;
    uint32_t            d9;
    uint32_t            d10;
    uint32_t            d11;
    uint32_t            d12;
    uint32_t            d13;
    uint32_t            d14;
    uint32_t            d15;
    uint32_t            LSW;
  }                       s;
};
typedef union vS512                     vS512;
union vU1024 {
  vUInt32             v[8];
  struct {
    vUInt32             v1;
    vUInt32             v2;
    vUInt32             v3;
    vUInt32             v4;
    vUInt32             v5;
    vUInt32             v6;
    vUInt32             v7;
    vUInt32             v8;
  }                       vs;
  struct {
    uint32_t            MSW;
    uint32_t            d2;
    uint32_t            d3;
    uint32_t            d4;
    uint32_t            d5;
    uint32_t            d6;
    uint32_t            d7;
    uint32_t            d8;
    uint32_t            d9;
    uint32_t            d10;
    uint32_t            d11;
    uint32_t            d12;
    uint32_t            d13;
    uint32_t            d14;
    uint32_t            d15;
    uint32_t            d16;
    uint32_t            d17;
    uint32_t            d18;
    uint32_t            d19;
    uint32_t            d20;
    uint32_t            d21;
    uint32_t            d22;
    uint32_t            d23;
    uint32_t            d24;
    uint32_t            d25;
    uint32_t            d26;
    uint32_t            d27;
    uint32_t            d28;
    uint32_t            d29;
    uint32_t            d30;
    uint32_t            d31;
    uint32_t            LSW;
  }                       s;
};
typedef union vU1024                    vU1024;
union vS1024 {
  vUInt32             v[8];
  struct {
    vUInt32             v1;
    vUInt32             v2;
    vUInt32             v3;
    vUInt32             v4;
    vUInt32             v5;
    vUInt32             v6;
    vUInt32             v7;
    vUInt32             v8;
  }                       vs;
  struct {
    int32_t             MSW;
    uint32_t            d2;
    uint32_t            d3;
    uint32_t            d4;
    uint32_t            d5;
    uint32_t            d6;
    uint32_t            d7;
    uint32_t            d8;
    uint32_t            d9;
    uint32_t            d10;
    uint32_t            d11;
    uint32_t            d12;
    uint32_t            d13;
    uint32_t            d14;
    uint32_t            d15;
    uint32_t            d16;
    uint32_t            d17;
    uint32_t            d18;
    uint32_t            d19;
    uint32_t            d20;
    uint32_t            d21;
    uint32_t            d22;
    uint32_t            d23;
    uint32_t            d24;
    uint32_t            d25;
    uint32_t            d26;
    uint32_t            d27;
    uint32_t            d28;
    uint32_t            d29;
    uint32_t            d30;
    uint32_t            d31;
    uint32_t            LSW;
  }                       s;
};
typedef union vS1024                    vS1024;
#elif (defined(__i386__) || defined(__x86_64__)) && defined(__SSE2__)
union vU128 {
  vUInt32             v;
  struct {
    vUInt32             v1;
  }                       vs;
  struct {
    uint32_t            LSW;                  /*MSW;*/
    uint32_t            d3;                   /*d2;*/
    uint32_t            d2;                   /*d3;*/
    uint32_t            MSW;                  /*LSW;*/
  }                       s;
};
typedef union vU128                     vU128;
union vS128 {
  vUInt32             v;
  struct {
    vUInt32             v1;
  }                       vs;
  struct {
    int32_t             LSW;                  /*MSW;*/
    uint32_t            d3;                   /*d2;*/
    uint32_t            d2;                   /*d3;*/
    uint32_t            MSW;                  /*LSW;*/
  }                       s;
};
typedef union vS128                     vS128;
union vU256 {
  vUInt32             v[2];
  struct {
    vUInt32             v2;
    vUInt32             v1;
  }                       vs;
  struct {
    uint32_t            LSW;                  /*MSW;*/
    uint32_t            d7;                   /*d2;*/
    uint32_t            d6;                   /*d3;*/
    uint32_t            d5;                   /*d4;*/
    uint32_t            d4;                   /*d5;*/
    uint32_t            d3;                   /*d6;*/
    uint32_t            d2;                   /*d7;*/
    uint32_t            MSW;                  /*LSW;*/
  }                       s;
};
typedef union vU256                     vU256;
union vS256 {
  vUInt32             v[2];
  struct {
    vUInt32             v2;
    vUInt32             v1;
  }                       vs;
  struct {
    int32_t             LSW;                  /*MSW;*/
    uint32_t            d7;                   /*d2;*/
    uint32_t            d6;                   /*d3;*/
    uint32_t            d5;                   /*d4;*/
    uint32_t            d4;                   /*d5;*/
    uint32_t            d3;                   /*d6;*/
    uint32_t            d2;                   /*d7;*/
    uint32_t            MSW;                  /*LSW;*/
  }                       s;
};
typedef union vS256                     vS256;
union vU512 {
  vUInt32             v[4];
  struct {
    vUInt32             v4;
    vUInt32             v3;
    vUInt32             v2;
    vUInt32             v1;
  }                       vs;
  struct {
    uint32_t            LSW;                  /*MSB;*/
    uint32_t            d15;                  /*d2;*/
    uint32_t            d14;                  /*d3;*/
    uint32_t            d13;                  /*d4;*/
    uint32_t            d12;                  /*d5;*/
    uint32_t            d11;                  /*d6;*/
    uint32_t            d10;                  /*d7;*/
    uint32_t            d9;                   /*d8;*/
    uint32_t            d8;                   /*d9;*/
    uint32_t            d7;                   /*d10;*/
    uint32_t            d6;                   /*d11;*/
    uint32_t            d5;                   /*d12;*/
    uint32_t            d4;                   /*d13;*/
    uint32_t            d3;                   /*d14;*/
    uint32_t            d2;                   /*d15;*/
    uint32_t            MSW;                  /*LSB;*/
  }                       s;
};
typedef union vU512                     vU512;
union vS512 {
  vUInt32             v[4];
  struct {
    vUInt32             v4;
    vUInt32             v3;
    vUInt32             v2;
    vUInt32             v1;
  }                       vs;
  struct {
    int32_t             LSW;                  /*MSW;*/
    uint32_t            d15;                  /*d2;*/
    uint32_t            d14;                  /*d3;*/
    uint32_t            d13;                  /*d4;*/
    uint32_t            d12;                  /*d5;*/
    uint32_t            d11;                  /*d6;*/
    uint32_t            d10;                  /*d7;*/
    uint32_t            d9;                   /*d8;*/
    uint32_t            d8;                   /*d9;*/
    uint32_t            d7;                   /*d10;*/
    uint32_t            d6;                   /*d11;*/
    uint32_t            d5;                   /*d12;*/
    uint32_t            d4;                   /*d13;*/
    uint32_t            d3;                   /*d14;*/
    uint32_t            d2;                   /*d15;*/
    uint32_t            MSW;                  /*LSW;*/
  }                       s;
};
typedef union vS512                     vS512;
union vU1024 {
  vUInt32             v[8];
  struct {
    vUInt32             v8;
    vUInt32             v7;
    vUInt32             v6;
    vUInt32             v5;
    vUInt32             v4;
    vUInt32             v3;
    vUInt32             v2;
    vUInt32             v1;
  }                       vs;
  struct {
    uint32_t            LSW;                  /*MSW;*/
    uint32_t            d31;                  /*d2;*/
    uint32_t            d30;                  /*d3;*/
    uint32_t            d29;                  /*d4;*/
    uint32_t            d28;                  /*d5;*/
    uint32_t            d27;                  /*d6;*/
    uint32_t            d26;                  /*d7;*/
    uint32_t            d25;                  /*d8;*/
    uint32_t            d24;                  /*d9;*/
    uint32_t            d23;                  /*d10;*/
    uint32_t            d22;                  /*d11;*/
    uint32_t            d21;                  /*d12;*/
    uint32_t            d20;                  /*d13;*/
    uint32_t            d19;                  /*d14;*/
    uint32_t            d18;                  /*d15;*/
    uint32_t            d17;                  /*d16;*/
    uint32_t            d16;                  /*d17;*/
    uint32_t            d15;                  /*d18;*/
    uint32_t            d14;                  /*d19;*/
    uint32_t            d13;                  /*d20;*/
    uint32_t            d12;                  /*d21;*/
    uint32_t            d11;                  /*d22;*/
    uint32_t            d10;                  /*d23;*/
    uint32_t            d9;                   /*d24;*/
    uint32_t            d8;                   /*d25;*/
    uint32_t            d7;                   /*d26;*/
    uint32_t            d6;                   /*d27;*/
    uint32_t            d5;                   /*d28;*/
    uint32_t            d4;                   /*d29;*/
    uint32_t            d3;                   /*d30;*/
    uint32_t            d2;                   /*d31;*/
    uint32_t            MSW;                  /*LSW;*/
  }                       s;
};
typedef union vU1024                    vU1024;
union vS1024 {
  vUInt32             v[8];
  struct {
    vUInt32             v8;
    vUInt32             v7;
    vUInt32             v6;
    vUInt32             v5;
    vUInt32             v4;
    vUInt32             v3;
    vUInt32             v2;
    vUInt32             v1;
  }                       vs;
  struct {
    int32_t             LSW;                  /*MSW;*/
    uint32_t            d31;                  /*d2;*/
    uint32_t            d30;                  /*d3;*/
    uint32_t            d29;                  /*d4;*/
    uint32_t            d28;                  /*d5;*/
    uint32_t            d27;                  /*d6;*/
    uint32_t            d26;                  /*d7;*/
    uint32_t            d25;                  /*d8;*/
    uint32_t            d24;                  /*d9;*/
    uint32_t            d23;                  /*d10;*/
    uint32_t            d22;                  /*d11;*/
    uint32_t            d21;                  /*d12;*/
    uint32_t            d20;                  /*d13;*/
    uint32_t            d19;                  /*d14;*/
    uint32_t            d18;                  /*d15;*/
    uint32_t            d17;                  /*d16;*/
    uint32_t            d16;                  /*d17;*/
    uint32_t            d15;                  /*d18;*/
    uint32_t            d14;                  /*d19;*/
    uint32_t            d13;                  /*d20;*/
    uint32_t            d12;                  /*d21;*/
    uint32_t            d11;                  /*d22;*/
    uint32_t            d10;                  /*d23;*/
    uint32_t            d9;                   /*d24;*/
    uint32_t            d8;                   /*d25;*/
    uint32_t            d7;                   /*d26;*/
    uint32_t            d6;                   /*d27;*/
    uint32_t            d5;                   /*d28;*/
    uint32_t            d4;                   /*d29;*/
    uint32_t            d3;                   /*d30;*/
    uint32_t            d2;                   /*d31;*/
    uint32_t            MSW;                  /*LSW;*/
  }                       s;
};
typedef union vS1024                    vS1024;
#endif  /*  */

#if defined _AltiVecPIMLanguageExtensionsAreEnabled || defined __SSE2__
/************************************************************************************
*                                                                                   *
*                                Division operations                                *
*                                                                                   *
************************************************************************************/
/*
 *  vU256Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU256Divide(
  const vU256       *numerator,
  const vU256       *divisor,
  vU256             *result,
  vU256 * __nullable remainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS256Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS256Divide(
  const vS256       *numerator,
  const vS256       *divisor,
  vS256             *result,
  vS256 * __nullable remainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU512Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU512Divide(
  const vU512       *numerator,
  const vU512       *divisor,
  vU512             *result,
  vU512 * __nullable remainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS512Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS512Divide(
  const vS512       *numerator,
  const vS512       *divisor,
  vS512             *result,
  vS512 * __nullable remainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU1024Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU1024Divide(
  const vU1024       *numerator,
  const vU1024       *divisor,
  vU1024             *result,
  vU1024 * __nullable remainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS1024Divide()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS1024Divide(
  const vS1024       *numerator,
  const vS1024       *divisor,
  vS1024             *result,
  vS1024 * __nullable remainder)
    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/************************************************************************************
*                                                                                   *
*                              Multiply operations                                  *
*                                                                                   *
************************************************************************************/

/*
 *  vU128FullMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU128FullMultiply(
  const vU128 *  a,
  const vU128 *  b,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS128FullMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS128FullMultiply(
  const vS128 *  a,
  const vS128 *  b,
  vS256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU256FullMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU256FullMultiply(
  const vU256 *  a,
  const vU256 *  b,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS256FullMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS256FullMultiply(
  const vS256 *  a,
  const vS256 *  b,
  vS512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU512FullMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU512FullMultiply(
  const vU512 *  a,
  const vU512 *  b,
  vU1024 *       result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS512FullMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS512FullMultiply(
  const vS512 *  a,
  const vS512 *  b,
  vS1024 *       result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU256HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU256HalfMultiply(
  const vU256 *  a,
  const vU256 *  b,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS256HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS256HalfMultiply(
  const vS256 *  a,
  const vS256 *  b,
  vS256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU512HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU512HalfMultiply(
  const vU512 *  a,
  const vU512 *  b,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS512HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS512HalfMultiply(
  const vS512 *  a,
  const vS512 *  b,
  vS512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU1024HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU1024HalfMultiply(
  const vU1024 *  a,
  const vU1024 *  b,
  vU1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS1024HalfMultiply()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS1024HalfMultiply(
  const vS1024 *  a,
  const vS1024 *  b,
  vS1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/************************************************************************************
*                                                                                   *
*                             Subtraction operations                                *
*                                                                                   *
************************************************************************************/

/*
 *  vU256Sub()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU256Sub(
  const vU256 *  a,
  const vU256 *  b,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS256Sub()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS256Sub(
  const vS256 *  a,
  const vS256 *  b,
  vS256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU256SubS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU256SubS(
  const vU256 *  a,
  const vU256 *  b,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS256SubS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS256SubS(
  const vS256 *  a,
  const vS256 *  b,
  vS256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU512Sub()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU512Sub(
  const vU512 *  a,
  const vU512 *  b,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS512Sub()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS512Sub(
  const vS512 *  a,
  const vS512 *  b,
  vS512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU512SubS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU512SubS(
  const vU512 *  a,
  const vU512 *  b,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS512SubS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS512SubS(
  const vS512 *  a,
  const vS512 *  b,
  vS512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU1024Sub()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU1024Sub(
  const vU1024 *  a,
  const vU1024 *  b,
  vU1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS1024Sub()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS1024Sub(
  const vS1024 *  a,
  const vS1024 *  b,
  vS1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU1024SubS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU1024SubS(
  const vU1024 *  a,
  const vU1024 *  b,
  vU1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS1024SubS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS1024SubS(
  const vS1024 *  a,
  const vS1024 *  b,
  vS1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/************************************************************************************
*                                                                                   *
*                                Negate operations                                  *
*                                                                                   *
************************************************************************************/

/*
 *  vU256Neg()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU256Neg(
  const vU256 *  a,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS256Neg()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS256Neg(
  const vS256 *  a,
  vS256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU512Neg()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU512Neg(
  const vU512 *  a,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS512Neg()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS512Neg(
  const vS512 *  a,
  vS512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU1024Neg()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU1024Neg(
  const vU1024 *  a,
  vU1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS1024Neg()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS1024Neg(
  const vS1024 *  a,
  vS1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/************************************************************************************
*                                                                                   *
*                                Addition operations                                *
*                                                                                   *
************************************************************************************/

/*
 *  vU256Add()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU256Add(
  const vU256 *  a,
  const vU256 *  b,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS256Add()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS256Add(
  const vS256 *  a,
  const vS256 *  b,
  vS256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU256AddS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU256AddS(
  const vU256 *  a,
  const vU256 *  b,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS256AddS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS256AddS(
  const vS256 *  a,
  const vS256 *  b,
  vS256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU512Add()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU512Add(
  const vU512 *  a,
  const vU512 *  b,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS512Add()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS512Add(
  const vS512 *  a,
  const vS512 *  b,
  vS512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU512AddS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU512AddS(
  const vU512 *  a,
  const vU512 *  b,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS512AddS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS512AddS(
  const vS512 *  a,
  const vS512 *  b,
  vS512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU1024Add()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU1024Add(
  const vU1024 *  a,
  const vU1024 *  b,
  vU1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS1024Add()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS1024Add(
  const vS1024 *  a,
  const vS1024 *  b,
  vS1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU1024AddS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU1024AddS(
  const vU1024 *  a,
  const vU1024 *  b,
  vU1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS1024AddS()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS1024AddS(
  const vS1024 *  a,
  const vS1024 *  b,
  vS1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/************************************************************************************
*                                                                                   *
*                                   Mod operations                                  *
*                                                                                   *
************************************************************************************/

/*
 *  vU256Mod()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU256Mod(
  const vU256 *  numerator,
  const vU256 *  divisor,
  vU256 *        remainder) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS256Mod()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS256Mod(
  const vS256 *  numerator,
  const vS256 *  divisor,
  vS256 *        remainder) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU512Mod()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU512Mod(
  const vU512 *  numerator,
  const vU512 *  divisor,
  vU512 *        remainder) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS512Mod()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS512Mod(
  const vS512 *  numerator,
  const vS512 *  divisor,
  vS512 *        remainder) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vU1024Mod()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vU1024Mod(
  const vU1024 *  numerator,
  const vU1024 *  divisor,
  vU1024 *        remainder) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vS1024Mod()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vS1024Mod(
  const vS1024 *  numerator,
  const vS1024 *  divisor,
  vS1024 *        remainder) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/************************************************************************************
*                                                                                   *
*                                Shift operations                                   *
*                                                                                   *
************************************************************************************/

/*
 *  vLL256Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vLL256Shift(
  const vU256 *  a,
  uint32_t       shiftAmount,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vLL512Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vLL512Shift(
  const vU512 *  a,
  uint32_t       shiftAmount,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vLL1024Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vLL1024Shift(
  const vU1024 *  a,
  uint32_t        shiftAmount,
  vU1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vLR256Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vLR256Shift(
  const vU256 *  a,
  uint32_t       shiftAmount,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vLR512Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vLR512Shift(
  const vU512 *  a,
  uint32_t       shiftAmount,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vLR1024Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vLR1024Shift(
  const vU1024 *  a,
  uint32_t        shiftAmount,
  vU1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vA256Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vA256Shift(
  const vS256 *  a,
  uint32_t       shiftAmount,
  vS256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vA512Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vA512Shift(
  const vS512 *  a,
  uint32_t       shiftAmount,
  vS512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vA1024Shift()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vA1024Shift(
  const vS1024 *  a,
  uint32_t        shiftAmount,
  vS1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/************************************************************************************
*                                                                                   *
*                                  Rotate operations                                *
*                                                                                   *
************************************************************************************/

/*
 *  vL256Rotate()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vL256Rotate(
  const vU256 *  a,
  uint32_t       rotateAmount,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vL512Rotate()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vL512Rotate(
  const vU512 *  a,
  uint32_t       rotateAmount,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vL1024Rotate()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vL1024Rotate(
  const vU1024 *  a,
  uint32_t        rotateAmount,
  vU1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vR256Rotate()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vR256Rotate(
  const vU256 *  a,
  uint32_t       rotateAmount,
  vU256 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vR512Rotate()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vR512Rotate(
  const vU512 *  a,
  uint32_t       rotateAmount,
  vU512 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


/*
 *  vR1024Rotate()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vR1024Rotate(
  const vU1024 *  a,
  uint32_t        rotateAmount,
  vU1024 *        result) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


#endif  // defined _AltiVecPIMLanguageExtensionsAreEnabled || defined __SSE2__

#endif  /* defined(__ppc__) || defined(__ppc64__) || defined(__i386__) || defined(__x86_64__) */


#pragma options align=reset

#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull end")
#endif

#ifdef __cplusplus
}
#endif

#endif /* __VBIGNUM__ */

                                                                                                                                                                                                                                                                                                                                                                                                                                  vDSP.h                                                                                              0100644 0001750 0001750 00001136526 12567451167 042175  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/Headers                           /*
    File:       vecLib/vDSP.h

    Contains:   AltiVec DSP Interfaces

    Version:    vecLib-563.3

    Copyright:  Copyright (c) 2000-2015 by Apple Inc. All rights reserved.

    For vDSP documentation, search for "vDSP" at <http://developer.apple.com>
    or search for one of the routine names below.

    Some documentation for vDSP routines is provided below.

    To report bugs, please use <http://developer.apple.com/bugreporter>.
*/
#ifndef __VDSP__
#define __VDSP__


// Tell compiler this file is idempotent (no need to process it more than once).
#if PRAGMA_ONCE
    #pragma once
#endif


/*  Documentation conventions:

        Many of the routines below are documented with C-like pseudocode that
        describes what they do.  For example, vDSP_vadd is declared with:

            extern void vDSP_vadd(
                const float *__A,
                vDSP_Stride  __IA,
                const float *__B,
                vDSP_Stride  __IB,
                float       *__C,
                vDSP_Stride  __IC,
                vDSP_Length  __N)
                    __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);

        and is described with:

            for (n = 0; n < N; ++n)
                C[n] = A[n] + B[n];

        The pseudocode uses two important simplifications:

            Names are shortened.

                The prefix "__" is removed.  This prefix is used in this
                header file so that Apple parameter names do not conflict with
                other developer macro names that might be used in source files
                that include this header, as when a program might use "#define
                N 1024" to set a preprocessor macro "N" to expand to "1024".

            Vectors are simplified by omitting strides.

                The parameters A and IA (with the prefix omitted) represent a
                vector with its elements at memory locations A[i*IA], for
                appropriate values of i.  In the pseudocode, the stride IA
                is omitted; the vector is treated as a simple mathematical
                vector with elements A[i].

                This default map is assumed for all vDSP routines unless stated
                otherwise.  An array without a stride parameter has unit
                stride.  Some routines have more complicated maps.  These are
                documented with each routine.

    Default maps:

        These default maps are used unless documented otherwise for a routine.
        For real vectors:

            Pseudocode:     Memory:
            C[n]            C[n*IC]

        For complex vectors:

            Pseudocode:     Memory:
            C[n]            C->realp[n*IC] + i * C->imagp[n*IC]

        Observe that C[n] in the pseudocode is a complex number, with a real
        component and an imaginary component.


    Pseudocode:

        The pseudo-code used to describe routines is largely C with some
        additions:

            e, pi, and i are the usual mathematical constants, approximately
            2.71828182845, 3.1415926535, and sqrt(-1).

            "**" is exponentiation.  3**4 is 81.

            Re and Im are the real and imaginary parts of a complex number.
            Re(3+4*i) is 3, and Im(3+4*i) is 4.

            sum(f(j), 0 <= j < N) is the sum of f(j) evaluated for each integer
            j from 0 (inclusive) to N (exclusive).  sum(j**2, 0 <= j < 4) is
            0 + 1 + 4 + 9 = 14.  Multiple dimensions may be used.  Thus,
            sum(f(j, k), 0 <= j < M, 0 <= k < N) is the sum of f(j, k)
            evaluated for each pair of integers (j, k) satisfying the
            constraints.

            conj(z) is the complex conjugate of z (the imaginary part is
            negated).

            |x| is the absolute value of x.

   Exactness, IEEE 754 conformance:

        vDSP routines are not expected to produce results identical to the
        pseudo-code in the descriptions, because vDSP routines are free to
        rearrange calculations for better performance.  These rearrangements
        are mathematical identities, so they would produce identical results
        if exact arithmetic were used.  However, floating-point arithmetic
        is approximate, and the rounding errors will often be different when
        operations are rearranged.

        Generally, vDSP routines are not expected to conform to IEEE 754.
        Notably, results may be not correctly rounded to the last bit even for
        elementary operations, and operations involving infinities and NaNs may
        be handled differently than IEEE 754 specifies.

    Const:

        vDSP does not modify the contents of input arrays (including input
        scalars passed by address).  If the specification of a routine does not
        state that it alters the memory that a parameter points to, then the
        routine does not alter that memory through that parameter.  (It may of
        course alter the same memory if it is also pointed to by an output
        parameter.  Such in-place operation is permitted for some vDSP routines
        and not for others.)

        Unfortunately, C semantics make it impractical to add "const" to
        pointers inside structs, because such structs are type-incompatible
        with structs containing pointers that are not const.  Thus, vDSP
        routines with complex parameters accept those parameters via
        DSPSplitComplex and DSPDoubleSplitComplex structs (among other types)
        and not via const versions of those structures.

    Strides:

        (Note:  This section introduces strides.  For an issue using strides
        with complex data, see "Complex strides" below.)

        Many vDSP routines use strides, which specify that the vector operated
        on is embedded in a larger array in memory.  Consider an array A of
        1024 elements.  Then:

            Passing a vDSP routine:     Says to operate on:

            Address A and stride 1      Each element A[j]

            Address A and stride 2      Every other element, A[j*2]

            Address A+1 and stride 2    Every other element, starting
                                        with A[1], so A[j*2+1]

        Strides may be used to operate on columns of multi-dimensional arrays.
        For example, consider a 32*64 element array, A[32][64].  Then passing
        address A+13 and stride 64 instructs vDSP to operate on the elements of
        column 13.

        When strides are used, generally there is some accompanying parameter
        that specifies the length of the operation.  This length is typically
        the number of elements to be processed, not the number in the larger
        array.  (Some vDSP routines have interactions between parameters so
        that the length may specify some number of output elements but requires
        a different numbe of input elements.  This is documented with each
        routine.)

    Complex strides:

        Strides with complex data (interleaved complex data, not split
        complex data) are complicated by a legacy issue.  Originally, complex
        data was regarded as an array of individual elements, so that memory
        containing values to represent complex numbers 2 + 3i, 4 + 5i, 6 + 7i,
        and so on, contained individual floating-point elements:

            A[0] A[1] A[2] A[3] A[4] A[5]…
             2    3    4    5    6    7  …

        This arrangement was said to have a stride of two, indicating that a
        new complex number starts every two elements.  In the modern view, we
        would regard this as an array of struct with a stride of one struct.
        Unfortunately, the vDSP interface is bound by requirements of backward
        compatibility and must retain the original use.

        Adding to this issue, a parameter is declared as a pointer to DSPComplex
        or DSPDoubleComplex (both structures of two floating-point elements),
        but its stride is still passed as a stride of floating-point elements.
        This means that, in C, to refer to complex element i of a vector C with
        stride IC, you must divide the stride by 2, using C[i*IC/2].
        Essentially, the floating-point element stride passed to the vDSP
        routine, IA, should be twice the complex-number struct stride.
*/


// For i386, translate new names to legacy names.
#if defined __i386__ && !defined __vDSP_TRANSLATE__
#include <vecLib/vDSP_translate.h>
#endif


#include <Availability.h>
#include <stdint.h>
#include <stdbool.h>


#ifdef __cplusplus
extern "C" {
#endif


#if !defined __has_feature
    #define __has_feature(f)    0
#endif
#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull begin")
#else
    #define __nullable
    #define __nonnull
#endif


/*  The following is reproduced from CFAvailability.h to provide
    Swift-compatibility enum declarations.  CFAvailability.h itself is not
    included to creating a dependency on it in the kernel version of vDSP.h,
    which cannot include CoreFoundation headers.
*/
#define __CF_ENUM_GET_MACRO(_1, _2, NAME, ...) NAME
#if (__cplusplus && __cplusplus >= 201103L && (__has_extension(cxx_strong_enums) || __has_feature(objc_fixed_enum))) || (!__cplusplus && __has_feature(objc_fixed_enum))
#define __CF_NAMED_ENUM(_type, _name)     enum _name : _type _name; enum _name : _type
#define __CF_ANON_ENUM(_type)             enum : _type
#else
#define __CF_NAMED_ENUM(_type, _name) _type _name; enum
#define __CF_ANON_ENUM(_type) enum
#endif
#define CF_ENUM(...) __CF_ENUM_GET_MACRO(__VA_ARGS__, __CF_NAMED_ENUM, __CF_ANON_ENUM)(__VA_ARGS__)


#pragma options align=power


/*  These symbols describe the vecLib version associated with this header.

    vDSP_Version0 is a major version number.
    vDSP_Version1 is a minor version number.
*/
#define vDSP_Version0   563
#define vDSP_Version1   3


/*  Define types:

        vDSP_Length for numbers of elements in arrays and for indices of
        elements in arrays.  (It is also used for the base-two logarithm of
        numbers of elements, although a much smaller type is suitable for
        that.)

        vDSP_Stride for differences of indices of elements (which of course
        includes strides).
*/
typedef unsigned long vDSP_Length;
typedef long          vDSP_Stride;

/*  A DSPComplex or DSPDoubleComplex is a pair of float or double values that
    together represent a complex value.
*/
typedef struct DSPComplex {
    float  real;
    float  imag;
} DSPComplex;
typedef struct DSPDoubleComplex {
    double real;
    double imag;
} DSPDoubleComplex;


/*  A DSPSplitComplex or DSPDoubleSplitComplex is a structure containing
    two pointers, each to an array of float or double.  These represent arrays
    of complex values, with the real components of the values stored in one
    array and the imaginary components of the values stored in a separate
    array.
*/
typedef struct DSPSplitComplex {
    float  * __nonnull realp;
    float  * __nonnull imagp;
} DSPSplitComplex;
typedef struct DSPDoubleSplitComplex {
    double * __nonnull realp;
    double * __nonnull imagp;
} DSPDoubleSplitComplex;


/*  The following statements declare a few simple types and constants used by
    various vDSP routines.
*/
typedef int FFTDirection;
typedef int FFTRadix;
enum {
    kFFTDirection_Forward         = +1,
    kFFTDirection_Inverse         = -1
};
enum {
    kFFTRadix2                    = 0,
    kFFTRadix3                    = 1,
    kFFTRadix5                    = 2
};
enum {
    vDSP_HALF_WINDOW              = 1,
    vDSP_HANN_DENORM              = 0,
    vDSP_HANN_NORM                = 2
};
    

/*  The following types define 24-bit data.
*/
typedef struct { uint8_t bytes[3]; } vDSP_uint24; // Unsigned 24-bit integer.
typedef struct { uint8_t bytes[3]; } vDSP_int24;  // Signed 24-bit integer.


/*  The following types are pointers to structures that contain data used
    inside vDSP routines to assist FFT and biquad filter operations.  The
    contents of these structures may change from release to release, so
    applications should manipulate the values only via the corresponding vDSP
    setup and destroy routines.
*/
typedef struct OpaqueFFTSetup           *FFTSetup;
typedef struct OpaqueFFTSetupD          *FFTSetupD;
typedef struct vDSP_biquad_SetupStruct  *vDSP_biquad_Setup;
typedef struct vDSP_biquad_SetupStructD *vDSP_biquad_SetupD;

    
/*  vDSP_biquadm_Setup or vDSP_biquadm_SetupD is a pointer to a filter object
    to be used with a multi-channel cascaded biquad IIR.  This object carries
    internal state which may be modified by any routine which uses it.  Upon
    creation, the state is initialized such that all delay elements are zero.
 
    Each filter object should only be used in a single thread at a time.
*/
typedef struct vDSP_biquadm_SetupStruct  *vDSP_biquadm_Setup;
typedef struct vDSP_biquadm_SetupStructD *vDSP_biquadm_SetupD;


/*  vDSP_create_fftsetup and vDSP_create_ffsetupD allocate memory and prepare
    constants used by single- and double-precision FFT routines, respectively.

    vDSP_destroy_fftsetup and vDSP_destroy_fftsetupD free the memory.  They
    may be passed a null pointer, in which case they have no effect.
*/
extern __nullable FFTSetup vDSP_create_fftsetup(
    vDSP_Length __Log2n,
    FFTRadix    __Radix)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);

extern void vDSP_destroy_fftsetup(__nullable FFTSetup __setup)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);

extern __nullable FFTSetupD vDSP_create_fftsetupD(
    vDSP_Length __Log2n,
    FFTRadix    __Radix)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);

extern void vDSP_destroy_fftsetupD(__nullable FFTSetupD __setup)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);


/*  vDSP_biquad_CreateSetup allocates memory and prepares the coefficients for
    processing a cascaded biquad IIR filter.

    vDSP_biquad_DestroySetup frees the memory allocated by
    vDSP_biquad_CreateSetup.
*/
extern __nullable vDSP_biquad_Setup vDSP_biquad_CreateSetup(
    const double *__Coefficients,
    vDSP_Length   __M)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern __nullable vDSP_biquad_SetupD vDSP_biquad_CreateSetupD(
    const double *__Coefficients,
    vDSP_Length   __M)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);

extern void vDSP_biquad_DestroySetup (
    __nullable vDSP_biquad_Setup __setup)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern void vDSP_biquad_DestroySetupD(
    __nullable vDSP_biquad_SetupD __setup)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);


/*  vDSP_biquadm_CreateSetup (for float) or vDSP_biquadm_CreateSetupD (for
    double) allocates memory and prepares the coefficients for processing a
    multi-channel cascaded biquad IIR filter.  Delay values are set to zero.

    Unlike some other setup objects in vDSP, a vDSP_biquadm_Setup or
    vDSP_biquadm_SetupD contains data that is modified during a vDSP_biquadm or
    vDSP_biquadmD call, and it therefore may not be used more than once
    simultaneously, as in multiple threads.
 
    vDSP_biquadm_DestroySetup (for single) or vDSP_biquadm_DestroySetupD (for
    double) frees the memory allocated by the corresponding create-setup
    routine.
*/
extern __nullable vDSP_biquadm_Setup vDSP_biquadm_CreateSetup(
    const double *__coeffs,
    vDSP_Length   __M,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
extern __nullable vDSP_biquadm_SetupD vDSP_biquadm_CreateSetupD(
    const double *__coeffs,
    vDSP_Length   __M,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
extern void vDSP_biquadm_DestroySetup(
    vDSP_biquadm_Setup __setup)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
extern void vDSP_biquadm_DestroySetupD(
    vDSP_biquadm_SetupD __setup)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);

/*  vDSP_biquadm_CopyState (for float) or vDSP_biquadm_CopyStateD (for double)
    copies the current state between two biquadm setup objects.  The two
    objects must have been created with the same number of channels and
    sections.
 
    vDSP_biquadm_ResetState (for float) or vDSP_biquadm_ResetStateD (for
    double) sets the delay values of a biquadm setup object to zero.
*/
extern void vDSP_biquadm_CopyState(
    vDSP_biquadm_Setup                     __dest,
    const struct vDSP_biquadm_SetupStruct *__src)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
extern void vDSP_biquadm_CopyStateD(
    vDSP_biquadm_SetupD                     __dest,
    const struct vDSP_biquadm_SetupStructD *__src)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
extern void vDSP_biquadm_ResetState(vDSP_biquadm_Setup __setup)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
extern void vDSP_biquadm_ResetStateD(vDSP_biquadm_SetupD __setup)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);

/*
    vDSP_biquadm_SetCoefficientsDouble will
    update the filter coefficients within a valid vDSP_biquadm_Setup object.
 */
    
extern void vDSP_biquadm_SetCoefficientsDouble(
    vDSP_biquadm_Setup                  __setup,
    const double                       *__coeffs,
    vDSP_Length                         __start_sec,
    vDSP_Length                         __start_chn,
    vDSP_Length                         __nsec,
    vDSP_Length                         __nchn)
    __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_9_0);
    
/*
    vDSP_biquadm_SetTargetsDouble will
    set the target coefficients within a valid vDSP_biquadm_Setup object.
 */
    
extern void vDSP_biquadm_SetTargetsDouble(
    vDSP_biquadm_Setup                  __setup,
    const double                       *__targets,
    float                               __interp_rate,
    float                               __interp_threshold,
    vDSP_Length                         __start_sec,
    vDSP_Length                         __start_chn,
    vDSP_Length                         __nsec,
    vDSP_Length                         __nchn)
    __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_9_0);
    
/*
    vDSP_biquadm_SetCoefficientsSingle will
    update the filter coefficients within a valid vDSP_biquadm_Setup object.
 
    Coefficients are specified in single precision.
 */
    
extern void vDSP_biquadm_SetCoefficientsSingle(
    vDSP_biquadm_Setup                  __setup,
    const float                         *__coeffs,
    vDSP_Length                         __start_sec,
    vDSP_Length                         __start_chn,
    vDSP_Length                         __nsec,
    vDSP_Length                         __nchn)
    __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_9_0);
    
/*
    vDSP_biquadm_SetTargetsSingle will
    set the target coefficients within a valid vDSP_biquadm_Setup object.
    The target values are specified in single precision.
 */
    
extern void vDSP_biquadm_SetTargetsSingle(
    vDSP_biquadm_Setup                  __setup,
    const float                        *__targets,
    float                               __interp_rate,
    float                               __interp_threshold,
    vDSP_Length                         __start_sec,
    vDSP_Length                         __start_chn,
    vDSP_Length                         __nsec,
    vDSP_Length                         __nchn)
    __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_9_0);
/*
    vDSP_biquadm_SetActiveFilters will set the overall active/inactive filter
    state of a valid vDSP_biquadm_Setup object.
 */
extern void vDSP_biquadm_SetActiveFilters(
    vDSP_biquadm_Setup                  __setup,
    const bool                         *__filter_states)
    __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_9_0);

// Convert a complex array to a complex-split array.
extern void vDSP_ctoz(
    const DSPComplex      *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__Z,
    vDSP_Stride            __IZ,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_ctozD(
    const DSPDoubleComplex      *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__Z,
    vDSP_Stride                  __IZ,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Map:

            Pseudocode:     Memory:
            C[n]            C[n*IC/2].real + i * C[n*IC/2].imag
            Z[n]            Z->realp[n*IZ] + i * Z->imagp[n*IZ]

        These compute:

            for (n = 0; n < N; ++n)
                Z[n] = C[n];
    */


//  Convert a complex-split array to a complex array.
extern void vDSP_ztoc(
    const DSPSplitComplex *__Z,
    vDSP_Stride            __IZ,
    DSPComplex            *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_ztocD(
    const DSPDoubleSplitComplex *__Z,
    vDSP_Stride                  __IZ,
    DSPDoubleComplex            *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Map:

            Pseudocode:     Memory:
            Z[n]            Z->realp[n*IZ] + i * Z->imagp[n*IZ]
            C[n]            C[n*IC/2].real + i * C[n*IC/2].imag

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = Z[n];
    */



/*  In-place complex Discrete Fourier Transform routines, with and without
    temporary memory.  We suggest you use the DFT routines instead of these.
*/
extern void vDSP_fft_zip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft_zipD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fft_zipt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft_ziptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N = 1 << Log2N;

        scale = 0 < Direction ? 1 : 1./N;

        // Define a complex vector, h:
        for (j = 0; j < N; ++j)
            h[j] = C->realp[j*IC] + i * C->imagp[j*IC];

        // Perform Discrete Fourier Transform.
        for (k = 0; k < N; ++k)
            H[k] = scale * sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

        // Store result.
        for (k = 0; k < N; ++k)
        {
            C->realp[k*IC] = Re(H[k]);
            C->imagp[k*IC] = Im(H[k]);
        }

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain the lesser of 16,384
        bytes or N * sizeof *C->realp bytes and is preferably 16-byte aligned
        or better.
    */


/*  Out-of-place complex Discrete Fourier Transform routines, with and without
    temporary memory.  We suggest you use the DFT routines instead of these.
*/
extern void vDSP_fft_zop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft_zopt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft_zopD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fft_zoptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N = 1 << Log2N;

        scale = 0 < Direction ? 1 : 1./N;

        // Define a complex vector, h:
        for (j = 0; j < N; ++j)
            h[j] = A->realp[j*IA] + i * A->imagp[j*IA];

        // Perform Discrete Fourier Transform.
        for (k = 0; k < N; ++k)
            H[k] = scale * sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

        // Store result.
        for (k = 0; k < N; ++k)
        {
            C->realp[k*IC] = Re(H[k]);
            C->imagp[k*IC] = Im(H[k]);
        }

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain the lesser of 16,384
        bytes or N * sizeof *C->realp bytes and is preferably 16-byte aligned
        or better.
    */


/*  In-place real-to-complex Discrete Fourier Transform routines, with and
    without temporary memory.  We suggest you use the DFT routines instead of
    these.
*/
extern void vDSP_fft_zrip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft_zripD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fft_zript(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft_zriptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N = 1 << Log2N;

        If Direction is +1, a real-to-complex transform is performed, taking
        input from a real vector that has been coerced into the complex
        structure:

            scale = 2;

            // Define a real vector, h:
            for (j = 0; j < N/2; ++j)
            {
                h[2*j + 0] = C->realp[j*IC];
                h[2*j + 1] = C->imagp[j*IC];
            }

            // Perform Discrete Fourier Transform.
            for (k = 0; k < N; ++k)
                H[k] = scale *
                    sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

            // Pack DC and Nyquist components into C->realp[0] and C->imagp[0].
            C->realp[0*IC] = Re(H[ 0 ]).
            C->imagp[0*IC] = Re(H[N/2]).

            // Store regular components:
            for (k = 1; k < N/2; ++k)
            {
                C->realp[k*IC] = Re(H[k]);
                C->imagp[k*IC] = Im(H[k]);
            }

            Note that, for N/2 < k < N, H[k] is not stored.  However, since
            the input is a real vector, the output has symmetry that allows the
            unstored elements to be derived from the stored elements:  H[k] =
            conj(H(N-k)).  This symmetry also implies the DC and Nyquist
            components are real, so their imaginary parts are zero.

        If Direction is -1, a complex-to-real inverse transform is performed,
        producing a real output vector coerced into the complex structure:

            scale = 1./N;

            // Define a complex vector, h:
            h[ 0 ] = C->realp[0*IC];
            h[N/2] = C->imagp[0*IC];
            for (j = 1; j < N/2; ++j)
            {
                h[ j ] = C->realp[j*IC] + i * C->imagp[j*IC];
                h[N-j] = conj(h[j]);
            }

            // Perform Discrete Fourier Transform.
            for (k = 0; k < N; ++k)
                H[k] = scale *
                    sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

            // Coerce real results into complex structure:
            for (k = 0; k < N/2; ++k)
            {
                C->realp[k*IC] = H[2*k+0];
                C->imagp[k*IC] = H[2*k+1];
            }

            Note that, mathematically, the symmetry in the input vector compels
            every H[k] to be real, so there are no imaginary components to be
            stored.

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain N/2 * sizeof *C->realp
        bytes and is preferably 16-byte aligned or better.
    */


/*  Out-of-place real-to-complex Discrete Fourier Transform routines, with and
    without temporary memory.  We suggest you use the DFT routines instead of
    these.
*/
extern void vDSP_fft_zrop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft_zropD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fft_zropt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft_zroptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N = 1 << Log2N;

        If Direction is +1, a real-to-complex transform is performed, taking
        input from a real vector that has been coerced into the complex
        structure:

            scale = 2;

            // Define a real vector, h:
            for (j = 0; j < N/2; ++j)
            {
                h[2*j + 0] = A->realp[j*IA];
                h[2*j + 1] = A->imagp[j*IA];
            }

            // Perform Discrete Fourier Transform.
            for (k = 0; k < N; ++k)
                H[k] = scale *
                    sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

            // Pack DC and Nyquist components into C->realp[0] and C->imagp[0].
            C->realp[0*IC] = Re(H[ 0 ]).
            C->imagp[0*IC] = Re(H[N/2]).

            // Store regular components:
            for (k = 1; k < N/2; ++k)
            {
                C->realp[k*IC] = Re(H[k]);
                C->imagp[k*IC] = Im(H[k]);
            }

            Note that, for N/2 < k < N, H[k] is not stored.  However, since
            the input is a real vector, the output has symmetry that allows the
            unstored elements to be derived from the stored elements:  H[k] =
            conj(H(N-k)).  This symmetry also implies the DC and Nyquist
            components are real, so their imaginary parts are zero.

        If Direction is -1, a complex-to-real inverse transform is performed,
        producing a real output vector coerced into the complex structure:

            scale = 1./N;

            // Define a complex vector, h:
            h[ 0 ] = A->realp[0*IA];
            h[N/2] = A->imagp[0*IA];
            for (j = 1; j < N/2; ++j)
            {
                h[ j ] = A->realp[j*IA] + i * A->imagp[j*IA];
                h[N-j] = conj(h[j]);
            }

            // Perform Discrete Fourier Transform.
            for (k = 0; k < N; ++k)
                H[k] = scale *
                    sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

            // Coerce real results into complex structure:
            for (k = 0; k < N/2; ++k)
            {
                C->realp[k*IC] = H[2*k+0];
                C->imagp[k*IC] = H[2*k+1];
            }

            Note that, mathematically, the symmetry in the input vector compels
            every H[k] to be real, so there are no imaginary components to be
            stored.

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain N/2 * sizeof *C->realp
        bytes and is preferably 16-byte aligned or better.
    */


/*  In-place two-dimensional complex Discrete Fourier Transform routines, with
    and without temporary memory.
*/
extern void vDSP_fft2d_zip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft2d_zipD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fft2d_zipt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC1,
    vDSP_Stride            __IC0,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft2d_ziptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N0 = 1 << Log2N0;
        N1 = 1 << Log2N1;

        if (IC1 == 0) IC1 = IC0*N0;

        scale = 0 < Direction ? 1 : 1. / (N1*N0);

        // Define a complex matrix, h:
        for (j1 = 0; j1 < N1; ++j1)
        for (j0 = 0; j0 < N0; ++j0)
            h[j1][j0] = C->realp[j1*IC1 + j0*IC0]
                  + i * C->imagp[j1*IC1 + j0*IC0];

        // Perform Discrete Fourier Transform.
        for (k1 = 0; k1 < N1; ++k1)
        for (k0 = 0; k0 < N0; ++k0)
            H[k1][k0] = scale * sum(sum(h[j1][j0]
                * e**(-Direction*2*pi*i*j0*k0/N0), 0 <= j0 < N0)
                * e**(-Direction*2*pi*i*j1*k1/N1), 0 <= j1 < N1);

        // Store result.
        for (k1 = 0; k1 < N1; ++k1)
        for (k0 = 0; k0 < N0; ++k0)
        {
            C->realp[k1*IC1 + k0*IC0] = Re(H[k1][k0]);
            C->imagp[k1*IC1 + k0*IC0] = Im(H[k1][k0]);
        }

        Note that the 0 and 1 dimensions are separate and identical, except
        that IC1 is set to a default, IC0*N0, if it is zero.  If IC1 is not
        zero, then the IC0 and N0 arguments may be swapped with the IC1 and N1
        arguments without affecting the results.

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain the lesser of 16,384
        bytes or N1*N0 * sizeof *C->realp bytes and is preferably 16-byte
        aligned or better.
    */


/*  Out-of-place two-dimensional complex Discrete Fourier Transform routines,
    with and without temporary memory.
*/
extern void vDSP_fft2d_zop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA0,
    vDSP_Stride            __IA1,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft2d_zopD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA0,
    vDSP_Stride                  __IA1,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fft2d_zopt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA0,
    vDSP_Stride            __IA1,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft2d_zoptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA0,
    vDSP_Stride                  __IA1,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N0 = 1 << Log2N0;
        N1 = 1 << Log2N1;

        if (IA1 == 0) IA1 = IA0*N0;
        if (IC1 == 0) IC1 = IC0*N0;

        scale = 0 < Direction ? 1 : 1. / (N1*N0);

        // Define a complex matrix, h:
        for (j1 = 0; j1 < N1; ++j1)
        for (j0 = 0; j0 < N0; ++j0)
            h[j1][j0] = A->realp[j1*IA1 + j0*IA0]
                  + i * A->imagp[j1*IA1 + j0*IA0];

        // Perform Discrete Fourier Transform.
        for (k1 = 0; k1 < N1; ++k1)
        for (k0 = 0; k0 < N0; ++k0)
            H[k1][k0] = scale * sum(sum(h[j1][j0]
                * e**(-Direction*2*pi*i*j0*k0/N0), 0 <= j0 < N0)
                * e**(-Direction*2*pi*i*j1*k1/N1), 0 <= j1 < N1);

        // Store result.
        for (k1 = 0; k1 < N1; ++k1)
        for (k0 = 0; k0 < N0; ++k0)
        {
            C->realp[k1*IC1 + k0*IC0] = Re(H[k1][k0]);
            C->imagp[k1*IC1 + k0*IC0] = Im(H[k1][k0]);
        }

        Note that the 0 and 1 dimensions are separate and identical, except
        that IA1 or IC1 are set to defaults, IA0*N0 or IC0*N0, if either is
        zero.  If neither is zero, then the IA0, IC0, and N0 arguments may be
        swapped with the IA1, IC1 and N1 arguments without affecting the
        results.

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain the lesser of 16,384
        bytes or N1*N0 * sizeof *C->realp bytes and is preferably 16-byte
        aligned or better.
    */


/*  In-place two-dimensional real-to-complex Discrete Fourier Transform
    routines, with and without temporary memory.
*/
extern void vDSP_fft2d_zrip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft2d_zripD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __flag)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fft2d_zript(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft2d_zriptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __flag)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N0 = 1 << Log2N0;
        N1 = 1 << Log2N1;

        if (IC1 == 0) IC1 = IC0*N0/2;

        If Direction is +1, a real-to-complex transform is performed, taking
        input from a real vector that has been coerced into the complex
        structure:

            scale = 2;

            // Define a real matrix, h:
            for (j1 = 0; j1 < N1  ; ++j1)
            for (j0 = 0; j0 < N0/2; ++j0)
            {
                h[j1][2*j0+0] = C->realp[j1*IC1 + j0*IC0]
                          + i * C->imagp[j1*IC1 + j0*IC0];
                h[j1][2*j0+1] = C->realp[j1*IC1 + j0*IC0]
                          + i * C->imagp[j1*IC1 + j0*IC0];
            }

            // Perform Discrete Fourier Transform.
            for (k1 = 0; k1 < N1; ++k1)
            for (k0 = 0; k0 < N0; ++k0)
                H[k1][k0] = scale * sum(sum(h[j1][j0]
                    * e**(-Direction*2*pi*i*j0*k0/N0), 0 <= j0 < N0)
                    * e**(-Direction*2*pi*i*j1*k1/N1), 0 <= j1 < N1);

            // Pack special pure-real elements into output matrix:
            C->realp[0*IC1][0*IC0] = H[0   ][0   ].
            C->imagp[0*IC1][0*IC0] = H[0   ][N0/2]
            C->realp[1*IC1][0*IC0] = H[N1/2][0   ].
            C->imagp[1*IC1][0*IC0] = H[N1/2][N0/2]

            // Pack two vectors into output matrix "vertically":
            // (This awkward format is due to a legacy implementation.)
            for (k1 = 1; k1 < N1/2; ++k1)
            {
                C->realp[(2*k1+0)*IC1][0*IC0] = Re(H[k1][0   ]);
                C->realp[(2*k1+1)*IC1][0*IC0] = Im(H[k1][0   ]);
                C->imagp[(2*k1+0)*IC1][0*IC0] = Re(H[k1][N0/2]);
                C->imagp[(2*k1+1)*IC1][0*IC0] = Im(H[k1][N0/2]);
            }

            // Store regular elements:
            for (k1 = 0; k1 < N1  ; ++k1)
            for (k0 = 1; k0 < N0/2; ++k0)
            {
                C->realp[k1*IC1 + k0*IC0] = Re(H[k1][k0]);
                C->imagp[k1*IC1 + k0*IC0] = Im(H[k1][k0]);
            }

            Many elements of H are not stored.  However, since the input is a
            real matrix, H has symmetry that makes all the unstored elements of
            H functions of the stored elements of H.  So the data stored in C
            has complete information about the transform result.

        If Direction is -1, a complex-to-real inverse transform is performed,
        producing a real output vector coerced into the complex structure:

            scale = 1. / (N1*N0);

            // Define a complex matrix, h, in multiple steps:

            // Unpack the special elements:
            h[0   ][0   ] = C->realp[0*IC1][0*IC0];
            h[0   ][N0/2] = C->imagp[0*IC1][0*IC0];
            h[N1/2][0   ] = C->realp[1*IC1][0*IC0];
            h[N1/2][N0/2] = C->imagp[1*IC1][0*IC0];

            // Unpack the two vectors from "vertical" storage:
            for (j1 = 1; j1 < N1/2; ++j1)
            {
                h[j1][0   ] = C->realp[(2*j1+0)*IC1][0*IC0]
                        + i * C->realp[(2*j1+1)*IC1][0*IC0]
                h[j1][N0/2] = C->imagp[(2*j1+0)*IC1][0*IC0]
                        + i * C->imagp[(2*j1+1)*IC1][0*IC0]
            }

            // Take regular elements:
            for (j1 = 0; j1 < N1  ; ++j1)
            for (j0 = 1; j0 < N0/2; ++j0)
            {
                h[j1][j0   ] = C->realp[j1*IC1 + j0*IC0]
                         + i * C->imagp[j1*IC1 + j0*IC0];
                h[j1][N0-j0] = conj(h[j1][j0]);
            }

            // Perform Discrete Fourier Transform.
            for (k1 = 0; k1 < N1; ++k1)
            for (k0 = 0; k0 < N0; ++k0)
                H[k1][k0] = scale * sum(sum(h[j1][j0]
                    * e**(-Direction*2*pi*i*j0*k0/N0), 0 <= j0 < N0)
                    * e**(-Direction*2*pi*i*j1*k1/N1), 0 <= j1 < N1);

            // Store result.
            for (k1 = 0; k1 < N1  ; ++k1)
            for (k0 = 0; k0 < N0/2; ++k0)
            {
                C->realp[k1*IC1 + k0*IC0] = Re(H[k1][2*k0+0]);
                C->imagp[k1*IC1 + k0*IC0] = Im(H[k1][2*k0+1]);
            }

        Unlike the two-dimensional complex transform, the dimensions are not
        symmetric in this real-to-complex transform.

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain space for the greater
        of N1 or N0/2 floating-point elements.  The addresses are preferably
        16-byte aligned or better.
    */


/*  Out-of-place two-dimensional real-to-complex Discrete Fourier Transform
    routines, with and without temporary memory.
*/
extern void vDSP_fft2d_zrop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA0,
    vDSP_Stride            __IA1,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft2d_zropt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA0,
    vDSP_Stride            __IA1,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_fft2d_zropD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA0,
    vDSP_Stride                  __IA1,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fft2d_zroptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA0,
    vDSP_Stride                  __IA1,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N0 = 1 << Log2N0;
        N1 = 1 << Log2N1;

        if (IA1 == 0) IA1 = IA0*N0/2;
        if (IC1 == 0) IC1 = IC0*N0/2;

        If Direction is +1, a real-to-complex transform is performed, taking
        input from a real vector that has been coerced into the complex
        structure:

            scale = 2;

            // Define a real matrix, h:
            for (j1 = 0; j1 < N1  ; ++j1)
            for (j0 = 0; j0 < N0/2; ++j0)
            {
                h[j1][2*j0+0] = A->realp[j1*IA1 + j0*IA0]
                          + i * A->imagp[j1*IA1 + j0*IA0];
                h[j1][2*j0+1] = A->realp[j1*IA1 + j0*IA0]
                          + i * A->imagp[j1*IA1 + j0*IA0];
            }

            // Perform Discrete Fourier Transform.
            for (k1 = 0; k1 < N1; ++k1)
            for (k0 = 0; k0 < N0; ++k0)
                H[k1][k0] = scale * sum(sum(h[j1][j0]
                    * e**(-Direction*2*pi*i*j0*k0/N0), 0 <= j0 < N0)
                    * e**(-Direction*2*pi*i*j1*k1/N1), 0 <= j1 < N1);

            // Pack special pure-real elements into output matrix:
            C->realp[0*IC1][0*IC0] = H[0   ][0   ].
            C->imagp[0*IC1][0*IC0] = H[0   ][N0/2]
            C->realp[1*IC1][0*IC0] = H[N1/2][0   ].
            C->imagp[1*IC1][0*IC0] = H[N1/2][N0/2]

            // Pack two vectors into output matrix "vertically":
            // (This awkward format is due to a legacy implementation.)
            for (k1 = 1; k1 < N1/2; ++k1)
            {
                C->realp[(2*k1+0)*IC1][0*IC0] = Re(H[k1][0   ]);
                C->realp[(2*k1+1)*IC1][0*IC0] = Im(H[k1][0   ]);
                C->imagp[(2*k1+0)*IC1][0*IC0] = Re(H[k1][N0/2]);
                C->imagp[(2*k1+1)*IC1][0*IC0] = Im(H[k1][N0/2]);
            }

            // Store regular elements:
            for (k1 = 0; k1 < N1  ; ++k1)
            for (k0 = 1; k0 < N0/2; ++k0)
            {
                C->realp[k1*IC1 + k0*IC0] = Re(H[k1][k0]);
                C->imagp[k1*IC1 + k0*IC0] = Im(H[k1][k0]);
            }

            Many elements of H are not stored.  However, since the input is a
            real matrix, H has symmetry that makes all the unstored elements of
            H functions of the stored elements of H.  So the data stored in C
            has complete information about the transform result.

        If Direction is -1, a complex-to-real inverse transform is performed,
        producing a real output vector coerced into the complex structure:

            scale = 1. / (N1*N0);

            // Define a complex matrix, h, in multiple steps:

            // Unpack the special elements:
            h[0   ][0   ] = A->realp[0*IA1][0*IA0];
            h[0   ][N0/2] = A->imagp[0*IA1][0*IA0];
            h[N1/2][0   ] = A->realp[1*IA1][0*IA0];
            h[N1/2][N0/2] = A->imagp[1*IA1][0*IA0];

            // Unpack the two vectors from "vertical" storage:
            for (j1 = 1; j1 < N1/2; ++j1)
            {
                h[j1][0   ] = A->realp[(2*j1+0)*IA1][0*IA0]
                        + i * A->realp[(2*j1+1)*IA1][0*IA0]
                h[j1][N0/2] = A->imagp[(2*j1+0)*IA1][0*IA0]
                        + i * A->imagp[(2*j1+1)*IA1][0*IA0]
            }

            // Take regular elements:
            for (j1 = 0; j1 < N1  ; ++j1)
            for (j0 = 1; j0 < N0/2; ++j0)
            {
                h[j1][j0   ] = A->realp[j1*IA1 + j0*IA0]
                         + i * A->imagp[j1*IA1 + j0*IA0];
                h[j1][N0-j0] = conj(h[j1][j0]);
            }

            // Perform Discrete Fourier Transform.
            for (k1 = 0; k1 < N1; ++k1)
            for (k0 = 0; k0 < N0; ++k0)
                H[k1][k0] = scale * sum(sum(h[j1][j0]
                    * e**(-Direction*2*pi*i*j0*k0/N0), 0 <= j0 < N0)
                    * e**(-Direction*2*pi*i*j1*k1/N1), 0 <= j1 < N1);

            // Store result.
            for (k1 = 0; k1 < N1  ; ++k1)
            for (k0 = 0; k0 < N0/2; ++k0)
            {
                C->realp[k1*IC1 + k0*IC0] = Re(H[k1][2*k0+0]);
                C->imagp[k1*IC1 + k0*IC0] = Im(H[k1][2*k0+1]);
            }

        Unlike the two-dimensional complex transform, the dimensions are not
        symmetric in this real-to-complex transform.

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain space for the greater
        of N1 or N0/2 floating-point elements.  The addresses are preferably
        16-byte aligned or better.
    */


/*  In-place multiple complex Discrete Fourier Transform routines, with and
    without temporary memory.
*/
extern void vDSP_fftm_zip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IM,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zipD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IM,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zipt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IM,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_ziptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IM,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N = 1 << Log2N;

        scale = 0 < Direction ? 1 : 1./N;

        // Repeat M times:
        for (m = 0; m < M; ++m)
        {

            // Define a complex vector, h:
            for (j = 0; j < N; ++j)
                h[j] = C->realp[m*IM + j*IC] + i * C->imagp[m*IM + j*IC];

            // Perform Discrete Fourier Transform.
            for (k = 0; k < N; ++k)
                H[k] = scale * sum(h[j]
                    * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

            // Store result.
            for (k = 0; k < N; ++k)
            {
                C->realp[m*IM + k*IC] = Re(H[k]);
                C->imagp[m*IM + k*IC] = Im(H[k]);
            }

        }

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain space for N
        floating-point elements and is preferably 16-byte aligned or better.
    */


/*  Out-of-place multiple complex Discrete Fourier Transform routines, with and
    without temporary memory.
*/
extern void vDSP_fftm_zop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    vDSP_Stride            __IMA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IMC,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zopD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    vDSP_Stride                  __IMA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IMC,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zopt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    vDSP_Stride            __IMA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IMC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zoptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    vDSP_Stride                  __IMA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IMC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N = 1 << Log2N;

        scale = 0 < Direction ? 1 : 1./N;

        // Repeat M times:
        for (m = 0; m < M; ++m)
        {

            // Define a complex vector, h:
            for (j = 0; j < N; ++j)
                h[j] = A->realp[m*IMA + j*IA] + i * A->imagp[m*IMA + j*IA];

            // Perform Discrete Fourier Transform.
            for (k = 0; k < N; ++k)
                H[k] = scale * sum(h[j]
                    * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

            // Store result.
            for (k = 0; k < N; ++k)
            {
                C->realp[m*IM + k*IC] = Re(H[k]);
                C->imagp[m*IM + k*IC] = Im(H[k]);
            }

        }

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain space for N
        floating-point elements and is preferably 16-byte aligned or better.
    */


/*  In-place multiple real-to-complex Discrete Fourier Transform routines, with
    and without temporary memory.  We suggest you use the DFT routines instead
    of these.
*/
extern void vDSP_fftm_zrip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IM,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zripD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IM,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zript(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IM,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zriptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IM,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N = 1 << Log2N;

        // Repeat M times:
        for (m = 0; m < M; ++m)
        {

            If Direction is +1, a real-to-complex transform is performed,
            taking input from a real vector that has been coerced into the
            complex structure:

                scale = 2;

                // Define a real vector, h:
                for (j = 0; j < N/2; ++j)
                {
                    h[2*j + 0] = C->realp[m*IM + j*IC];
                    h[2*j + 1] = C->imagp[m*IM + j*IC];
                }

                // Perform Discrete Fourier Transform.
                for (k = 0; k < N; ++k)
                    H[k] = scale *
                        sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

                // Pack DC and Nyquist components into initial elements.
                C->realp[m*IM + 0*IC] = Re(H[ 0 ]).
                C->imagp[m*IM + 0*IC] = Re(H[N/2]).

                // Store regular components:
                for (k = 1; k < N/2; ++k)
                {
                    C->realp[m*IM + k*IC] = Re(H[k]);
                    C->imagp[m*IM + k*IC] = Im(H[k]);
                }

                Note that, for N/2 < k < N, H[k] is not stored.  However, since
                the input is a real vector, the output has symmetry that allows
                the unstored elements to be derived from the stored elements:
                H[k] = conj(H(N-k)).  This symmetry also implies the DC and
                Nyquist components are real, so their imaginary parts are zero.

            If Direction is -1, a complex-to-real inverse transform is
            performed, producing a real output vector coerced into the complex
            structure:

                scale = 1./N;

                // Define a complex vector, h:
                h[ 0 ] = C->realp[m*IM + 0*IC];
                h[N/2] = C->imagp[m*IM + 0*IC];
                for (j = 1; j < N/2; ++j)
                {
                    h[ j ] = C->realp[m*IM + j*IC] + i * C->imagp[m*IM + j*IC];
                    h[N-j] = conj(h[j]);
                }

                // Perform Discrete Fourier Transform.
                for (k = 0; k < N; ++k)
                    H[k] = scale *
                        sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

                // Coerce real results into complex structure:
                for (k = 0; k < N/2; ++k)
                {
                    C->realp[m*IM + k*IC] = H[2*k+0];
                    C->imagp[m*IM + k*IC] = H[2*k+1];
                }

                Note that, mathematically, the symmetry in the input vector
                compels every H[k] to be real, so there are no imaginary
                components to be stored.

        }

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain space for N/2
        floating-point elements and is preferably 16-byte aligned or better.
    */



/*  Out-of-place multiple real-to-complex Discrete Fourier Transform routines,
    with and without temporary memory.  We suggest you use the DFT routines
    instead of these.
*/
extern void vDSP_fftm_zrop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    vDSP_Stride            __IMA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IMC,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zropt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    vDSP_Stride            __IMA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IMC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zropD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    vDSP_Stride                  __IMA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IMC,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_fftm_zroptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    vDSP_Stride                  __IMA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IMC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        N = 1 << Log2N;

        // Repeat M times:
        for (m = 0; m < M; ++m)
        {

            If Direction is +1, a real-to-complex transform is performed,
            taking input from a real vector that has been coerced into the
            complex structure:

                scale = 2;

                // Define a real vector, h:
                for (j = 0; j < N/2; ++j)
                {
                    h[2*j + 0] = A->realp[m*IMA + j*IA];
                    h[2*j + 1] = A->imagp[m*IMA + j*IA];
                }

                // Perform Discrete Fourier Transform.
                for (k = 0; k < N; ++k)
                    H[k] = scale *
                        sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

                // Pack DC and Nyquist components into initial elements.
                C->realp[m*IMC + 0*IC] = Re(H[ 0 ]).
                C->imagp[m*IMC + 0*IC] = Re(H[N/2]).

                // Store regular components:
                for (k = 1; k < N/2; ++k)
                {
                    C->realp[m*IMC + k*IC] = Re(H[k]);
                    C->imagp[m*IMC + k*IC] = Im(H[k]);
                }

                Note that, for N/2 < k < N, H[k] is not stored.  However, since
                the input is a real vector, the output has symmetry that allows
                the unstored elements to be derived from the stored elements:
                H[k] = conj(H(N-k)).  This symmetry also implies the DC and
                Nyquist components are real, so their imaginary parts are zero.

            If Direction is -1, a complex-to-real inverse transform is
            performed, producing a real output vector coerced into the complex
            structure:

                scale = 1./N;

                // Define a complex vector, h:
                h[ 0 ] = A->realp[m*IMA + 0*IA];
                h[N/2] = A->imagp[m*IMA + 0*IA];
                for (j = 1; j < N/2; ++j)
                {
                    h[ j ] = A->realp[m*IMA + j*IA]
                       + i * A->imagp[m*IMA + j*IA];
                    h[N-j] = conj(h[j]);
                }

                // Perform Discrete Fourier Transform.
                for (k = 0; k < N; ++k)
                    H[k] = scale *
                        sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

                // Coerce real results into complex structure:
                for (k = 0; k < N/2; ++k)
                {
                    C->realp[m*IMC + k*IC] = H[2*k+0];
                    C->imagp[m*IMC + k*IC] = H[2*k+1];
                }

                Note that, mathematically, the symmetry in the input vector
                compels every H[k] to be real, so there are no imaginary
                components to be stored.

        }

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.

        The temporary buffer versions perform the same operation but are
        permitted to use the temporary buffer for improved performance.  Each
        of Buffer->realp and Buffer->imagp must contain space for N/2
        floating-point elements and is preferably 16-byte aligned or better.
    */


/*  Non-power-of-two out-of-place complex Discrete Fourier Transform routines.
    We suggest you use the DFT routines instead of these.
*/
extern void vDSP_fft3_zop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_9_0);
extern void vDSP_fft3_zopD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_9_0);
extern void vDSP_fft5_zop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_9_0);
extern void vDSP_fft5_zopD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_9_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        p = 3 or 5, as shown in the routine name.

        N = p << Log2N;

        scale = 0 < Direction ? 1 : 1./N;

        // Define a complex vector, h:
        for (j = 0; j < N; ++j)
            h[j] = A->realp[j*IA] + i * A->imagp[j*IA];

        // Perform Discrete Fourier Transform.
        for (k = 0; k < N; ++k)
            H[k] = scale * sum(h[j] * e**(-Direction*2*pi*i*j*k/N), 0 <= j < N);

        // Store result.
        for (k = 0; k < N; ++k)
        {
            C->realp[k*IC] = Re(H[k]);
            C->imagp[k*IC] = Im(H[k]);
        }

        Setup must have been properly created by a call to vDSP_create_fftsetup
        (for single precision) or vDSP_create_fftsetupD (for double precision)
        and not subsequently destroyed.

        Direction must be +1 or -1.
    */


/*  Cascade biquadratic IIR filters.
*/
extern void vDSP_biquad(
    const struct vDSP_biquad_SetupStruct *__Setup,
    float       *__Delay,
    const float *__X, vDSP_Stride __IX,
    float       *__Y, vDSP_Stride __IY,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern void vDSP_biquadD(
    const struct vDSP_biquad_SetupStructD *__Setup,
    double       *__Delay,
    const double *__X, vDSP_Stride __IX,
    double       *__Y, vDSP_Stride __IY,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
    /*  Maps:

            For this routine, strides are shown explicitly; the default maps
            are not used.

        These compute:

        S, B0, B1, B2, A1, and A2 are determined by Setup.
        S is the number of sections.

        X provides the bulk of the input signal.  Delay provides prior state
        data for S biquadratic filters.  The filters are applied to the data in
        turn.  The output of the final filter is stored in Y, and the final
        state data of the filters are stored in Delay.

        // Initialize the first row of a matrix x with data from X:
        for (n = 0; n < N; ++n)
            x[0][n ] = X[n*IX];

        // Initialize the "past" information, elements -2 and -1, from Delay:
        for (s = 0; s <= S; ++s)
        {
            x[s][-2] = Delay[2*s+0];
            x[s][-1] = Delay[2*s+1];
        }

        // Apply each filter:
        for (s = 1; s <= S; ++s)
            for (n = 0; n < N; ++n)
                x[s][n] =
                    + B0[s] * x[s-1][n-0]
                    + B1[s] * x[s-1][n-1]
                    + B2[s] * x[s-1][n-2]
                    - A1[s] * x[s  ][n-1]
                    - A2[s] * x[s  ][n-2];

        // Save the updated state data from the end of each row:
        for (s = 0; s <= S; ++s)
        {
            Delay[2*s+0] = x[s][N-2];
            Delay[2*s+1] = x[s][N-1];
        }

        // Store the results of the final filter:
        for (n = 0; n < N; ++n)
            Y[n*IY] = x[S][n];
    */


/*  vDSP_biquadm (for float) or vDSP_biquadmD (for double) applies a
    multi-channel biquadm IIR filter created with vDSP_biquadm_CreateSetup or
    vDSP_biquadm_CreateSetupD, respectively.
 */
extern void vDSP_biquadm(
    vDSP_biquadm_Setup       __Setup,
    const float * __nonnull * __nonnull __X, vDSP_Stride __IX,
    float       * __nonnull * __nonnull __Y, vDSP_Stride __IY,
    vDSP_Length              __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
extern void vDSP_biquadmD(
     vDSP_biquadm_SetupD       __Setup,
     const double * __nonnull * __nonnull __X, vDSP_Stride __IX,
     double       * __nonnull * __nonnull __Y, vDSP_Stride __IY,
     vDSP_Length               __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
    /*  These routines perform the same function as M calls to vDSP_biquad or
        vDSP_biquadD, where M, the delay values, and the biquad setups are
        derived from the biquadm setup:

            for (m = 0; m < M; ++M)
                vDSP_biquad(
                    setup derived from vDSP_biquadm setup,
                    delays derived from vDSP_biquadm setup,
                    X[m], IX,
                    Y[m], IY,
                    N);
    */


/*  Convolution and correlation.
*/
extern void vDSP_conv(
    const float *__A,  // Input signal.
    vDSP_Stride  __IA,
    const float *__F,  // Filter.
    vDSP_Stride  __IF,
    float       *__C,  // Output signal.
    vDSP_Stride  __IC,
    vDSP_Length  __N,  // Output length.
    vDSP_Length  __P)  // Filter length.
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_convD(
    const double *__A, // Input signal.
    vDSP_Stride   __IA,
    const double *__F, // Filter
    vDSP_Stride   __IF,
    double       *__C, // Output signal.
    vDSP_Stride   __IC,
    vDSP_Length   __N, // Output length.
    vDSP_Length   __P) // Filter length.
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_zconv(
    const DSPSplitComplex *__A,  // Input signal.
    vDSP_Stride            __IA,
    const DSPSplitComplex *__F,  // Filter.
    vDSP_Stride            __IF,
    const DSPSplitComplex *__C,  // Output signal.
    vDSP_Stride            __IC,
    vDSP_Length            __N,  // Output length.
    vDSP_Length            __P)  // Filter length.
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zconvD(
    const DSPDoubleSplitComplex *__A,    // Input signal.
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__F,    // Filter.
    vDSP_Stride                  __IF,
    const DSPDoubleSplitComplex *__C,    // Output signal.
    vDSP_Stride                  __IC,
    vDSP_Length                  __N,    // Output length.
    vDSP_Length                  __P)    // Filter length.
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = sum(A[n+p] * F[p], 0 <= p < P);

        Commonly, this is called correlation if IF is positive and convolution
        if IF is negative.
    */


/*  3*3 and 5*5 convolutions.
*/
extern void vDSP_f3x3(
    const float *__A,
    vDSP_Length  __NR,
    vDSP_Length  __NC,
    const float *__F,
    float       *__C)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_f3x3D(
    const double *__A,
    vDSP_Length   __NR,
    vDSP_Length   __NC,
    const double *__F,
    double       *__C)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_f5x5(
    const float *__A,
    vDSP_Length  __NR,
    vDSP_Length  __NC,
    const float *__F,
    float       *__C)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_f5x5D(
    const double *__A,
    vDSP_Length   __NR,
    vDSP_Length   __NC,
    const double *__F,
    double       *__C)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            This routine does not have strides.

            A and C are regarded as two-dimensional matrices with dimensions
            [NR][NC].  F is regarded as a two-dimensional matrix with
            dimensions [P][P]:

            Pseudocode:     Memory:
            A[j][k]         A[j*NC + k]
            C[j][k]         C[j*NC + k]
            F[j][k]         F[j*P  + k]

        These compute:

            P = 3 or 5, according to the routine name.

            Below, "P/2" is evaluated using integer arithmetic, so it is 1 or 2
            (not 1.5 or 2.5).

            for (r = P/2; r < NR-P/2; ++r)
            for (c = P/2; c < NC-P/2; ++c)
                C[r][c] = sum(A[r+j][c+k] * F[j+P/2][k+P/2],
                    -P/2 <= j < P/2, -P/2 <= k < P/2);

            All other elements of C (a border of P/2 elements around all four
            sides) are set to zero.
    */


/*  Two-dimensional (image) convolution.
*/
extern void vDSP_imgfir(
    const float *__A,  // Input.
    vDSP_Length  __NR, // Number of image rows.
    vDSP_Length  __NC, // Number of image columns.
    const float *__F,  // Filter.
    float       *__C,  // Output.
    vDSP_Length  __P,  // Number of filter rows.
    vDSP_Length  __Q)  // Number of filter columns.
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_imgfirD(
    const double *__A,  // Input.
    vDSP_Length   __NR, // Number of image rows.
    vDSP_Length   __NC, // Number of image columns.
    const double *__F,  // Filter.
    double       *__C,  // Output.
    vDSP_Length   __P,  // Number of filter rows.
    vDSP_Length   __Q)  // Number of filter columns.
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            This routine does not have strides.

            A and C are regarded as two-dimensional matrices with dimensions
            [NR][NC].  F is regarded as a two-dimensional matrix with
            dimensions [P][Q].

            A and C are regarded as two-dimensional matrices with dimensions
            [NR][NC].  F is regarded as a two-dimensional matrix with
            dimensions [P][P]:

            Pseudocode:     Memory:
            A[j][k]         A[j*NC + k]
            C[j][k]         C[j*NC + k]
            F[j][k]         F[j*Q  + k]

        These compute:

            P and Q must be odd.  "P/2" and "Q/2" are evaluated with integer
            arithmetic, so, if P is 3, P/2 is 1, not 1.5.

            for (r = P/2; r < NR-P/2; ++r)
            for (c = Q/2; c < NC-Q/2; ++c)
                C[r][c] = sum(A[r+j][c+k] * F[j+P/2][k+Q/2],
                    -P/2 <= j < P/2, -Q/2 <= k < Q/2);

            All other elements of C (borders of P/2 elements at the top and
            bottom and Q/2 elements at the left and right) are set to zero.
    */


extern void vDSP_mtrans(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __M,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_mtransD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __M,
    vDSP_Length   __N)
            __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            A is regarded as a two-dimensional matrix with dimemnsions
            [N][M] and stride IA.  C is regarded as a two-dimensional matrix
            with dimemnsions [M][N] and stride IC:

            Pseudocode:     Memory:
            A[n][m]         A[(n*M + m)*IA]
            C[m][n]         C[(m*N + n)*IC]

        These compute:

            for (m = 0; m < M; ++m)
            for (n = 0; n < N; ++n)
                C[m][n] = A[n][m];
    */


/*  Matrix multiply.
*/
extern void vDSP_mmul(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __M,
    vDSP_Length  __N,
    vDSP_Length  __P)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_mmulD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __M,
    vDSP_Length   __N,
    vDSP_Length   __P)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            A is regarded as a two-dimensional matrix with dimemnsions [M][P]
            and stride IA.  B is regarded as a two-dimensional matrix with
            dimemnsions [P][N] and stride IB.  C is regarded as a
            two-dimensional matrix with dimemnsions [M][N] and stride IC.

            Pseudocode:     Memory:
            A[m][p]         A[(m*P+p)*IA]
            B[p][n]         B[(p*N+n)*IB]
            C[m][n]         C[(m*N+n)*IC]

        These compute:

            for (m = 0; m < M; ++m)
            for (n = 0; n < N; ++n)
                C[m][n] = sum(A[m][p] * B[p][n], 0 <= p < P);
    */


/*  Split-complex matrix multiply and add.
*/
extern void vDSP_zmma(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    vDSP_Length            __M,
    vDSP_Length            __N,
    vDSP_Length            __P)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_zmmaD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    vDSP_Length                  __M,
    vDSP_Length                  __N,
    vDSP_Length                  __P)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            Pseudocode:     Memory:
            A[m][p]         A->realp[(m*P+p)*IA] + i * A->imagp[(m*P+p)*IA].
            B[p][n]         B->realp[(p*N+n)*IB] + i * B->imagp[(p*N+n)*IB].
            C[m][n]         C->realp[(m*N+n)*IC] + i * C->imagp[(m*N+n)*IC].
            D[m][n]         D->realp[(m*N+n)*ID] + i * D->imagp[(m*N+n)*ID].

        These compute:

            for (m = 0; m < M; ++m)
            for (n = 0; n < N; ++n)
                D[m][n] = sum(A[m][p] * B[p][n], 0 <= p < P) + C[m][n];
    */


/*  Split-complex matrix multiply and subtract.
*/
extern void vDSP_zmms(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    vDSP_Length            __M,
    vDSP_Length            __N,
    vDSP_Length            __P)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_zmmsD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    vDSP_Length                  __M,
    vDSP_Length                  __N,
    vDSP_Length                  __P)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            Pseudocode:     Memory:
            A[m][p]         A->realp[(m*P+p)*IA] + i * A->imagp[(m*P+p)*IA].
            B[p][n]         B->realp[(p*N+n)*IB] + i * B->imagp[(p*N+n)*IB].
            C[m][n]         C->realp[(m*N+n)*IC] + i * C->imagp[(m*N+n)*IC].
            D[m][n]         D->realp[(m*N+n)*ID] + i * D->imagp[(m*N+n)*ID].

        These compute:

            for (m = 0; m < M; ++m)
            for (n = 0; n < N; ++n)
                D[m][n] = sum(A[m][p] * B[p][n], 0 <= p < P) - C[m][n];
    */


// Vector multiply, multiply, add, and add.
extern void vDSP_zvmmaa(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    const DSPSplitComplex *__E,
    vDSP_Stride            __IE,
    const DSPSplitComplex *__F,
    vDSP_Stride            __IF,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
extern void vDSP_zvmmaaD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    const DSPDoubleSplitComplex *__E,
    vDSP_Stride                  __IE,
    const DSPDoubleSplitComplex *__F,
    vDSP_Stride                  __IF,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                F[n] = A[n] * B[n] + C[n] * D[n] + E[n];
    */


/*  Split-complex matrix multiply and reverse subtract.
*/
extern void vDSP_zmsm(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    vDSP_Length            __M,
    vDSP_Length            __N,
    vDSP_Length            __P)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_zmsmD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    vDSP_Length                  __M,
    vDSP_Length                  __N,
    vDSP_Length                  __P)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            Pseudocode:     Memory:
            A[m][p]         A->realp[(m*P+p)*IA] + i * A->imagp[(m*P+p)*IA].
            B[p][n]         B->realp[(p*N+n)*IB] + i * B->imagp[(p*N+n)*IB].
            C[m][n]         C->realp[(m*N+n)*IC] + i * C->imagp[(m*N+n)*IC].
            D[m][n]         D->realp[(m*N+n)*ID] + i * D->imagp[(m*N+n)*ID].

        These compute:

            for (m = 0; m < M; ++m)
            for (n = 0; n < N; ++n)
                D[m][n] = C[m][n] - sum(A[m][p] * B[p][n], 0 <= p < P);
    */


/*  Split-complex matrix multiply.
*/
extern void vDSP_zmmul(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __M,
    vDSP_Length            __N,
    vDSP_Length            __P)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_zmmulD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __M,
    vDSP_Length                  __N,
    vDSP_Length                  __P)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:

            Pseudocode:     Memory:
            A[m][p]         A->realp[(m*P+p)*IA] + i * A->imagp[(m*P+p)*IA].
            B[p][n]         B->realp[(p*N+n)*IB] + i * B->imagp[(p*N+n)*IB].
            C[m][n]         C->realp[(m*N+n)*IC] + i * C->imagp[(m*N+n)*IC].

        These compute:

            for (m = 0; m < M; ++m)
            for (n = 0; n < N; ++n)
                C[m][n] = sum(A[m][p] * B[p][n], 0 <= p < P);
    */


// Vector add.
extern void vDSP_vadd(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_vaddD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_vaddi(
    const int   *__A,
    vDSP_Stride  __IA,
    const int   *__B,
    vDSP_Stride  __IB,
    int         *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
extern void vDSP_zvadd(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zvaddD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_zrvadd(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const float           *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zrvaddD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const double                *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] + B[n];
    */


// Vector subtract.
extern void vDSP_vsub(
    const float *__B,  // Caution:  A and B are swapped!
    vDSP_Stride  __IB,
    const float *__A,  // Caution:  A and B are swapped!
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_vsubD(
    const double *__B, // Caution:  A and B are swapped!
    vDSP_Stride   __IB,
    const double *__A, // Caution:  A and B are swapped!
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_zvsub(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zvsubD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] - B[n];
    */


// Vector multiply.
extern void vDSP_vmul(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_vmulD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_zrvmul(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const float           *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zrvmulD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const double                *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] * B[n];
    */


// Vector divide.
extern void vDSP_vdiv(
    const float *__B,  // Caution:  A and B are swapped!
    vDSP_Stride  __IB,
    const float *__A,  // Caution:  A and B are swapped!
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vdivD(
    const double *__B, // Caution:  A and B are swapped!
    vDSP_Stride   __IB,
    const double *__A, // Caution:  A and B are swapped!
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vdivi(
    const int   *__B,  // Caution:  A and B are swapped!
    vDSP_Stride  __IB,
    const int   *__A,  // Caution:  A and B are swapped!
    vDSP_Stride  __IA,
    int         *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvdiv(
    const DSPSplitComplex *__B,    // Caution:  A and B are swapped!
    vDSP_Stride            __IB,
    const DSPSplitComplex *__A,    // Caution:  A and B are swapped!
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvdivD(
    const DSPDoubleSplitComplex *__B,  // Caution:  A and B are swapped!
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__A,  // Caution:  A and B are swapped!
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zrvdiv(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const float           *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zrvdivD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const double                *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] / B[n];
    */


// Vector-scalar multiply.
extern void vDSP_vsmul(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_vsmulD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] * B[0];
    */


// Vector square.
extern void vDSP_vsq(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_vsqD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n]**2;
    */



// Vector signed square.
extern void vDSP_vssq(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_vssqD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] * |A[n]|;
    */


// Euclidean distance, squared.
extern void vDSP_distancesq(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_5_0);
extern void vDSP_distancesqD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum((A[n] - B[n]) ** 2, 0 <= n < N);
    */


// Dot product.
extern void vDSP_dotpr(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_dotprD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_zdotpr(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zdotprD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
extern void vDSP_zrdotpr(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const float           *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zrdotprD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const double                *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum(A[n] * B[n], 0 <= n < N);
    */


// Vector add and multiply.
extern void vDSP_vam(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_vamD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    double       *__D,
    vDSP_Stride   __IDD,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                D[n] = (A[n] + B[n]) * C[n];
    */


// Vector multiply and add.
extern void vDSP_vma(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vmaD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvma(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
extern void vDSP_zvmaD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                D[n] = A[n] * B[n] + C[n];
    */


// Complex multiplication with optional conjugation.
extern void vDSP_zvmul(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N,
    int                    __Conjugate)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zvmulD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N,
    int                          __Conjugate)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            If Conjugate is +1:

                for (n = 0; n < N; ++n)
                    C[n] = A[n] * B[n];

            If Conjugate is -1:

                for (n = 0; n < N; ++n)
                    C[n] = conj(A[n]) * B[n];
    */


// Complex-split inner (conjugate) dot product.
extern void vDSP_zidotpr(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zidotprD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum(conj(A[n]) * B[n], 0 <= n < N);
    */


// Complex-split conjugate multiply and add.
extern void vDSP_zvcma(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zvcmaD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                D[n] = conj(A[n]) * B[n] + C[n];
    */


// Subtract real from complex-split.
extern void vDSP_zrvsub(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const float           *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_4_0);
extern void vDSP_zrvsubD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const double                *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] - B[n];
    */


// Vector convert between double precision and single precision.
extern void vDSP_vdpsp(
    const double *__A,
    vDSP_Stride   __IA,
    float        *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vspdp(
    const float *__A,
    vDSP_Stride  __IA,
    double      *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n];
    */


// Vector absolute value.
extern void vDSP_vabs(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vabsD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vabsi(
    const int   *__A,
    vDSP_Stride  __IA,
    int         *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvabs(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    float                 *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvabsD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    double                      *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = |A[n]|;
    */


// Vector bit-wise equivalence, NOT (A XOR B).
extern void vDSP_veqvi(
    const int   *__A,
    vDSP_Stride  __IA,
    const int   *__B,
    vDSP_Stride  __IB,
    int         *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = ~(A[n] ^ B[n]);
    */


// Vector fill.
extern void vDSP_vfill(
    const float *__A,
    float       *__C,
    vDSP_Stride  __IA,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfillD(
    const double *__A,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfilli(
    const int   *__A,
    int         *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvfill(
    const DSPSplitComplex *__A,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvfillD(
    const DSPDoubleSplitComplex *__A,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[0];
    */


// Vector-scalar add.
extern void vDSP_vsadd(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsaddD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsaddi(
    const int   *__A,
    vDSP_Stride  __IA,
    const int   *__B,
    int         *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] + B[0];
    */


// Vector-scalar divide.
extern void vDSP_vsdiv(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsdivD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsdivi(
    const int   *__A,
    vDSP_Stride  __IA,
    const int   *__B,
    int         *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] / B[0];
    */


// Complex-split accumulating autospectrum.
extern void vDSP_zaspec(
    const DSPSplitComplex *__A,
    float                 *__C,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zaspecD(
    const DSPDoubleSplitComplex *__A,
    double                      *__C,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:

            No strides are used; arrays map directly to memory.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] += |A[n]| ** 2;
    */


// Create Blackman window.
extern void vDSP_blkman_window(
    float       *__C,
    vDSP_Length  __N,
    int          __Flag)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_blkman_windowD(
    double      *__C,
    vDSP_Length  __N,
    int          __Flag)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:

            No strides are used; the array maps directly to memory.

        These compute:

            If Flag & vDSP_HALF_WINDOW:
                Length = (N+1)/2;
            Else
                Length = N;

            for (n = 0; n < Length; ++n)
            {
                angle = 2*pi*n/N;
                C[n] = .42 - .5 * cos(angle) + .08 * cos(2*angle);
            }
    */


// Coherence function.
extern void vDSP_zcoher(
    const float           *__A,
    const float           *__B,
    const DSPSplitComplex *__C,
    float                 *__D,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zcoherD(
    const double                *__A,
    const double                *__B,
    const DSPDoubleSplitComplex *__C,
    double                      *__D,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:

            No strides are used; arrays map directly to memory.

        These compute:

            for (n = 0; n < N; ++n)
                D[n] = |C[n]| ** 2 / (A[n] * B[n]);
    */


// Anti-aliasing down-sample with real filter.
extern void vDSP_desamp(
    const float *__A,   // Input signal.
    vDSP_Stride  __DF,  // Decimation Factor.
    const float *__F,   // Filter.
    float       *__C,   // Output.
    vDSP_Length  __N,   // Output length.
    vDSP_Length  __P)   // Filter length.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_desampD(
    const double *__A,  // Input signal.
    vDSP_Stride   __DF, // Decimation Factor.
    const double *__F,  // Filter.
    double       *__C,  // Output.
    vDSP_Length   __N,  // Output length.
    vDSP_Length   __P)  // Filter length.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zrdesamp(
    const DSPSplitComplex *__A,  // Input signal.
    vDSP_Stride            __DF, // Decimation Factor.
    const float           *__F,  // Filter.
    const DSPSplitComplex *__C,  // Output.
    vDSP_Length            __N,  // Output length.
    vDSP_Length            __P)  // Filter length.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zrdesampD(
    const DSPDoubleSplitComplex *__A,    // Input signal.
    vDSP_Stride                  __DF,   // Decimation Factor.
    const double                *__F,    // Filter.
    const DSPDoubleSplitComplex *__C,    // Output.
    vDSP_Length                  __N,    // Output length.
    vDSP_Length                  __P)    // Filter length.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:

            No strides are used; arrays map directly to memory.  DF specifies
            the decimation factor.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = sum(A[n*DF+p] * F[p], 0 <= p < P);
    */


// Transfer function, B/A.
extern void vDSP_ztrans(
    const float           *__A,
    const DSPSplitComplex *__B,
    const DSPSplitComplex *__C,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_ztransD(
    const double                *__A,
    const DSPDoubleSplitComplex *__B,
    const DSPDoubleSplitComplex *__C,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:

            No strides are used; arrays map directly to memory.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = B[n] / A[n];
    */


// Accumulating cross-spectrum.
extern void vDSP_zcspec(
    const DSPSplitComplex *__A,
    const DSPSplitComplex *__B,
    const DSPSplitComplex *__C,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zcspecD(
    const DSPDoubleSplitComplex *__A,
    const DSPDoubleSplitComplex *__B,
    const DSPDoubleSplitComplex *__C,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:

            No strides are used; arrays map directly to memory.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] += conj(A[n]) * B[n];
    */


// Vector conjugate and multiply.
extern void vDSP_zvcmul(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvcmulD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __iC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = conj(A[n]) * B[n];
    */


// Vector conjugate.
extern void vDSP_zvconj(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvconjD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = conj(A[n]);
    */


// Vector multiply with scalar.
extern void vDSP_zvzsml(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvzsmlD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] * B[0];
    */


// Vector magnitudes squared.
extern void vDSP_zvmags(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    float                 *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvmagsD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    double                      *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = |A[n]| ** 2;
    */


// Vector magnitudes square and add.
extern void vDSP_zvmgsa(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const float           *__B,
    vDSP_Stride            __IB,
    float                 *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvmgsaD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const double                *__B,
    vDSP_Stride                  __IB,
    double                      *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = |A[n]| ** 2 + B[n];
    */


// Complex-split vector move.
extern void vDSP_zvmov(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvmovD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n];
    */


// Vector negate.
extern void vDSP_zvneg(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvnegD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = -A[n];
    */


// Vector phasea.
extern void vDSP_zvphas(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    float                 *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvphasD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    double                      *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = atan2(Im(A[n]), Re(A[n]));
    */


// Vector multiply by scalar and add.
extern void vDSP_zvsma(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    vDSP_Length            __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_zvsmaD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                D[n] = A[n] * B[0] + C[n];
    */


// Difference equation, 2 poles, 2 zeros.
extern void vDSP_deq22(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_deq22D(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 2; n < N+2; ++n)   // Note outputs start with C[2].
                C[n] =
                    + A[n-0]*B[0]
                    + A[n-1]*B[1]
                    + A[n-2]*B[2]
                    - C[n-1]*B[3]
                    - C[n-2]*B[4];
    */


// Create Hamming window.
extern void vDSP_hamm_window(
    float       *__C,
    vDSP_Length  __N,
    int          __Flag)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_hamm_windowD(
    double      *__C,
    vDSP_Length  __N,
    int          __Flag)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:

            No strides are used; the array maps directly to memory.

        These compute:

            If Flag & vDSP_HALF_WINDOW:
                Length = (N+1)/2;
            Else
                Length = N;

            for (n = 0; n < Length; ++n)
                C[n] = .54 - .46 * cos(2*pi*n/N);
    */


// Create Hanning window.
extern void vDSP_hann_window(
    float       *__C,
    vDSP_Length  __N,
    int          __Flag)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_hann_windowD(
    double      *__C,
    vDSP_Length  __N,
    int          __Flag)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:

            No strides are used; the array maps directly to memory.

        These compute:

            If Flag & vDSP_HALF_WINDOW:
                Length = (N+1)/2;
            Else
                Length = N;

            If Flag & vDSP_HANN_NORM:
                W = .8165;
            Else
                W = .5;

            for (n = 0; n < Length; ++n)
                C[n] = W * (1 - cos(2*pi*n/N));
    */


// Maximum magnitude of vector.
extern void vDSP_maxmgv(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_maxmgvD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        C[0] is set to the greatest value of |A[n]| for 0 <= n < N.
    */


// Maximum magnitude of vector.
extern void vDSP_maxmgvi(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length *__I,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_maxmgviD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length  *__I,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        C[0] is set to the greatest value of |A[n]| for 0 <= n < N.
        I[0] is set to the least i*IA such that |A[i]| has the value in C[0].
    */


// Maximum value of vector.
extern void vDSP_maxv(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_maxvD(
    const double *__A,
    vDSP_Stride   __I,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        C[0] is set to the greatest value of A[n] for 0 <= n < N.
    */


// Maximum value of vector, with index.
extern void vDSP_maxvi(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length *__I,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_maxviD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length  *__I,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        C[0] is set to the greatest value of A[n] for 0 <= n < N.
        I[0] is set to the least i*IA such that A[i] has the value in C[0].
    */


// Mean magnitude of vector.
extern void vDSP_meamgv(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_meamgvD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum(|A[n]|, 0 <= n < N) / N;
    */


// Mean of vector.
extern void vDSP_meanv(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_meanvD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum(A[n], 0 <= n < N) / N;
    */


// Mean square of vector.
extern void vDSP_measqv(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_measqvD(
    const double *__A,
    vDSP_Stride   __I,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum(A[n]**2, 0 <= n < N) / N;
    */


// Minimum magnitude of vector.
extern void vDSP_minmgv(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_minmgvD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        C[0] is set to the least value of |A[n]| for 0 <= n < N.
    */


// Minimum magnitude of vector, with index.
extern void vDSP_minmgvi(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length *__I,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_minmgviD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length  *__I,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        C[0] is set to the least value of |A[n]| for 0 <= n < N.
        I[0] is set to the least i*IA such that |A[i]| has the value in C[0].
    */


// Minimum value of vector.
extern void vDSP_minv(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_minvD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        C[0] is set to the least value of A[n] for 0 <= n < N.
    */


// Minimum value of vector, with index.
extern void vDSP_minvi(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length *__I,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_minviD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length  *__I,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        C[0] is set to the least value of A[n] for 0 <= n < N.
        I[0] is set to the least i*IA such that A[i] has the value in C[0].
    */


// Matrix move.
extern void vDSP_mmov(
    const float *__A,
    float       *__C,
    vDSP_Length  __M,
    vDSP_Length  __N,
    vDSP_Length  __TA,
    vDSP_Length  __TC)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_mmovD(
    const double *__A,
    double       *__C,
    vDSP_Length   __M,
    vDSP_Length   __N,
    vDSP_Length   __TA,
    vDSP_Length   __TC)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:

            This routine does not have strides.

            A is regarded as a two-dimensional matrix with dimensions [N][TA].
            C is regarded as a two-dimensional matrix with dimensions [N][TC].

        These compute:

            for (n = 0; n < N; ++n)
            for (m = 0; m < M; ++m)
                C[n][m] = A[n][m];
    */


// Mean of signed squares of vector.
extern void vDSP_mvessq(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_mvessqD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum(A[n] * |A[n]|, 0 <= n < N) / N;
    */


// Find zero crossing.
extern void vDSP_nzcros(
    const float *__A,
    vDSP_Stride  __IA,
    vDSP_Length  __B,
    vDSP_Length *__C,
    vDSP_Length *__D,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_nzcrosD(
    const double *__A,
    vDSP_Stride   __IA,
    vDSP_Length   __B,
    vDSP_Length  *__C,
    vDSP_Length  *__D,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        Let S be the number of times the sign bit changes in the sequence A[0],
        A[1],... A[N-1].

        If B <= S:
            D[0] is set to B.
            C[0] is set to n*IA, where the B-th sign bit change occurs between
            elements A[n-1] and A[n].
        Else:
            D[0] is set to S.
            C[0] is set to 0.
    */


// Convert rectangular to polar.
extern void vDSP_polar(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_polarD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  Strides are shown explicitly in pseudocode.

        These compute:

            for (n = 0; n < N; ++n)
            {
                x = A[n*IA+0];
                y = A[n*IA+1];
                C[n*IC+0] = sqrt(x**2 + y**2);
                C[n*IC+1] = atan2(y, x);
            }
    */


// Convert polar to rectangular.
extern void vDSP_rect(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_rectD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  Strides are shown explicitly in pseudocode.

        These compute:

            for (n = 0; n < N; ++n)
            {
                r     = A[n*IA+0];
                theta = A[n*IA+1];
                C[n*IC+0] = r * cos(theta);
                C[n*IC+1] = r * sin(theta);
            }
    */


// Root-mean-square of vector.
extern void vDSP_rmsqv(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_rmsqvD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sqrt(sum(A[n] ** 2, 0 <= n < N) / N);
    */


// Scalar-vector divide.
extern void vDSP_svdiv(
    const float *__A,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_svdivD(
    const double *__A,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[0] / B[n];

        When A[0] is not zero or NaN and B[n] is zero, C[n] is set to an
        infinity.
    */


// Sum of vector elements.
extern void vDSP_sve(
    const float *__A,
    vDSP_Stride  __I,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_sveD(
    const double *__A,
    vDSP_Stride   __I,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum(A[n], 0 <= n < N);
    */


// Sum of vector elements magnitudes.
extern void vDSP_svemg(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_svemgD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum(|A[n]|, 0 <= n < N);
    */


// Sum of vector elements' squares.
extern void vDSP_svesq(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_svesqD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum(A[n] ** 2, 0 <= n < N);
    */


// Sum of vector elements and sum of vector elements' squares.
extern void vDSP_sve_svesq(
    const float  *__A,
    vDSP_Stride   __IA,
    float        *__Sum,
    float        *__SumOfSquares,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0);
extern void vDSP_sve_svesqD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__Sum,
    double       *__SumOfSquares,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0);
    /*  Maps:  The default maps are used.

        These compute:

            Sum[0]          = sum(A[n],      0 <= n < N);
            SumOfSquares[0] = sum(A[n] ** 2, 0 <= n < N);
    */


/*  Compute mean and standard deviation and then calculate new elements to have
    a zero mean and a unit standard deviation.

    For iOS 9.0 and later or OS X 10.11 and later, the production of new
    elements may be omitted by passing NULL for C.
*/
#if (defined __IPHONE_OS_VERSION_MIN_REQUIRED && __IPHONE_OS_VERSION_MIN_REQUIRED < 90000) || \
     (defined __MAC_OS_X_VERSION_MIN_REQUIRED && __MAC_OS_X_VERSION_MIN_REQUIRED < 101100)
    extern void vDSP_normalize(
        const float  *__A,
        vDSP_Stride   __IA,
        float        *__C,
        vDSP_Stride   __IC,
        float        *__Mean,
        float        *__StandardDeviation,
        vDSP_Length   __N)
            __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0);
    extern void vDSP_normalizeD(
        const double *__A,
        vDSP_Stride   __IA,
        double       *__C,
        vDSP_Stride   __IC,
        double       *__Mean,
        double       *__StandardDeviation,
        vDSP_Length   __N)
            __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0);
#else
    extern void vDSP_normalize(
        const float       *__A,
        vDSP_Stride        __IA,
        float * __nullable __C,
        vDSP_Stride        __IC,
        float             *__Mean,
        float             *__StandardDeviation,
        vDSP_Length        __N)
            __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0);
    extern void vDSP_normalizeD(
        const double       *__A,
        vDSP_Stride         __IA,
        double * __nullable __C,
        vDSP_Stride         __IC,
        double             *__Mean,
        double             *__StandardDeviation,
        vDSP_Length         __N)
            __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_6_0);
#endif
    /*  Maps:  The default maps are used.

        These compute:

            // Calculate mean and standard deviation.
            m = sum(A[n], 0 <= n < N) / N;
            d = sqrt(sum(A[n]**2, 0 <= n < N) / N - m**2);

            if (C)
            {
                // Normalize.
                for (n = 0; n < N; ++n)
                    C[n] = (A[n] - m) / d;
            }
    */


// Sum of vector elements' signed squares.
extern void vDSP_svs(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_svsD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            C[0] = sum(A[n] * |A[n]|, 0 <= n < N);
    */


// Vector add, add, and multiply.
extern void vDSP_vaam(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    const float *__D,
    vDSP_Stride  __ID,
    float       *__E,
    vDSP_Stride  __IE,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vaamD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    const double *__D,
    vDSP_Stride   __ID,
    double       *__E,
    vDSP_Stride   __IE,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                E[n] = (A[n] + B[n]) * (C[n] + D[n]);
    */


// Vector add, subtract, and multiply.
extern void vDSP_vasbm(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    const float *__D,
    vDSP_Stride  __ID,
    float       *__E,
    vDSP_Stride  __IE,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vasbmD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    const double *__D,
    vDSP_Stride   __ID,
    double       *__E,
    vDSP_Stride   __IE,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                E[n] = (A[n] + B[n]) * (C[n] - D[n]);
    */


// Vector add and scalar multiply.
extern void vDSP_vasm(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vasmD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                D[n] = (A[n] + B[n]) * C[0];
    */


// Vector linear average.
extern void vDSP_vavlin(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vavlinD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = (C[n]*B[0] + A[n]) / (B[0] + 1);
    */


// Vector clip.
extern void vDSP_vclip(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    const float *__C,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vclipD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    const double *__C,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
            {
                D[n] = A[n];
                if (D[n] < B[0]) D[n] = B[0];
                if (C[0] < D[n]) D[n] = C[0];
            }
    */


// Vector clip and count.
extern void vDSP_vclipc(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    const float *__C,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N,
    vDSP_Length *__NLow,
    vDSP_Length *__NHigh)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vclipcD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    const double *__C,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N,
    vDSP_Length  *__NLow,
    vDSP_Length  *__NHigh)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            NLow[0]  = 0;
            NHigh[0] = 0;
            for (n = 0; n < N; ++n)
            {
                D[n] = A[n];
                if (D[n] < B[0]) { D[n] = B[0]; ++NLow[0];  }
                if (C[0] < D[n]) { D[n] = C[0]; ++NHigh[0]; }
            }
    */


// Vector clear.
extern void vDSP_vclr(
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vclrD(
    double      *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = 0;
    */


// Vector compress.
extern void vDSP_vcmprs(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vcmprsD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            p = 0;
            for (n = 0; n < N; ++n)
                if (B[n] != 0)
                    C[p++] = A[n];
    */


// Vector convert to decibels, power, or amplitude.
extern void vDSP_vdbcon(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N,
    unsigned int __F)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vdbconD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N,
    unsigned int  __F)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            If Flag is 1:
                alpha = 20;
            If Flag is 0:
                alpha = 10;

            for (n = 0; n < N; ++n)
                C[n] = alpha * log10(A[n] / B[0]);
    */


// Vector distance.
extern void vDSP_vdist(
    const float *__A,
    vDSP_Stride  __I,
    const float *__B,
    vDSP_Stride  __J,
    float       *__C,
    vDSP_Stride  __K,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vdistD(
    const double *__A,
    vDSP_Stride   __I,
    const double *__B,
    vDSP_Stride   __J,
    double       *__C,
    vDSP_Stride   __K,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = sqrt(A[n]**2 + B[n]**2);
    */


// Vector envelope.
extern void vDSP_venvlp(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_venvlpD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
            {
                if (D[n] < B[n] || A[n] < D[n]) D[n] = C[n];
                else D[n] = 0;
            }
    */


// Vector convert to integer, round toward zero.
extern void vDSP_vfix8(
    const float *__A,
    vDSP_Stride  __IA,
    char        *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfix8D(
    const double *__A,
    vDSP_Stride   __IA,
    char         *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfix16(
    const float *__A,
    vDSP_Stride  __IA,
    short       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfix16D(
    const double *__A,
    vDSP_Stride   __IA,
    short        *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfix32(
    const float *__A,
    vDSP_Stride  __IA,
    int         *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfix32D(
    const double *__A,
    vDSP_Stride   __IA,
    int          *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixu8(
    const float   *__A,
    vDSP_Stride    __IA,
    unsigned char *__C,
    vDSP_Stride    __IC,
    vDSP_Length    __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixu8D(
    const double  *__A,
    vDSP_Stride    __IA,
    unsigned char *__C,
    vDSP_Stride    __IC,
    vDSP_Length    __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixu16(
    const float    *__A,
    vDSP_Stride     __IA,
    unsigned short *__C,
    vDSP_Stride     __IC,
    vDSP_Length     __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixu16D(
    const double   *__A,
    vDSP_Stride     __IA,
    unsigned short *__C,
    vDSP_Stride     __IC,
    vDSP_Length     __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixu32(
    const float  *__A,
    vDSP_Stride   __IA,
    unsigned int *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixu32D(
    const double *__A,
    vDSP_Stride   __IA,
    unsigned int *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = trunc(A[n]);
    */


/*  Vector convert single precision to 24-bit integer with pre-scaling.
    The scaled value is rounded toward zero.
*/
extern void vDSP_vsmfixu24(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_uint24 *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
    
/*  Vector convert single precision to 24-bit unsigned integer with pre-scaling.
    The scaled value is rounded toward zero.
*/
extern void vDSP_vsmfix24(
   const float *__A,
   vDSP_Stride  __IA,
   const float *__B,
   vDSP_int24  *__C,
   vDSP_Stride  __IC,
   vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
    /*  Maps:  The default maps are used.
    
        These compute:
    
            for (n = 0; n < N; ++n)
                C[n] = trunc(A[n] * B[0]);
    
        Note: Values outside the representable range are clamped to the largest
        or smallest representable values of the destination type.
    */

    
// Vector convert 24-bit integer to single-precision float.
extern void vDSP_vfltu24(
   const vDSP_uint24 *__A,
   vDSP_Stride        __IA,
   float             *__C,
   vDSP_Stride        __IC,
   vDSP_Length        __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
extern void vDSP_vflt24(
  const vDSP_int24 *__A,
  vDSP_Stride       __IA,
  float            *__C,
  vDSP_Stride       __IC,
  vDSP_Length       __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
    /*  Maps:  The default maps are used.
    
        These compute:
    
            for (n = 0; n < N; ++n)
                C[n] = A[n];
    */

    
// Vector convert 24-bit integer to single-precision float and scale.
extern void vDSP_vfltsmu24(
     const vDSP_uint24 *__A,
     vDSP_Stride        __IA,
     const float       *__B,
     float             *__C,
     vDSP_Stride        __IC,
     vDSP_Length        __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
extern void vDSP_vfltsm24(
    const vDSP_int24 *__A,
    vDSP_Stride       __IA,
    const float      *__B,
    float            *__C,
    vDSP_Stride       __IC,
    vDSP_Length       __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);
    /*  Maps:  The default maps are used.
    
        These compute:
    
            for (n = 0; n < N; ++n)
                C[n] = B[0] * (float)A[n];
    */
        

// Vector convert to integer, round to nearest.
extern void vDSP_vfixr8(
    const float *__A,
    vDSP_Stride  __IA,
    char        *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixr8D(
    const double *__A,
    vDSP_Stride   __IA,
    char         *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixr16(
    const float *__A,
    vDSP_Stride  __IA,
    short       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixr16D(
    const double *__A,
    vDSP_Stride   __IA,
    short        *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixr32(
    const float *__A,
    vDSP_Stride  __IA,
    int         *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixr32D(
    const double *__A,
    vDSP_Stride   __IA,
    int          *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixru8(
    const float   *__A,
    vDSP_Stride    __IA,
    unsigned char *__C,
    vDSP_Stride    __IC,
    vDSP_Length    __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixru8D(
    const double  *__A,
    vDSP_Stride    __IA,
    unsigned char *__C,
    vDSP_Stride    __IC,
    vDSP_Length    __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixru16(
    const float    *__A,
    vDSP_Stride     __IA,
    unsigned short *__C,
    vDSP_Stride     __IC,
    vDSP_Length     __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixru16D(
    const double   *__A,
    vDSP_Stride     __IA,
    unsigned short *__C,
    vDSP_Stride     __IC,
    vDSP_Length     __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixru32(
    const float  *__A,
    vDSP_Stride   __IA,
    unsigned int *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfixru32D(
    const double *__A,
    vDSP_Stride   __IA,
    unsigned int *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = rint(A[n]);

        Note:  It is expected that the global rounding mode be the default,
        round-to-nearest.  It is unspecified whether ties round up or down.
    */


// Vector convert to floating-point from integer.
extern void vDSP_vflt8(
    const char  *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vflt8D(
    const char  *__A,
    vDSP_Stride  __IA,
    double      *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vflt16(
    const short *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vflt16D(
    const short *__A,
    vDSP_Stride  __IA,
    double      *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vflt32(
    const int   *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vflt32D(
    const int   *__A,
    vDSP_Stride  __IA,
    double      *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfltu8(
    const unsigned char *__A,
    vDSP_Stride          __IA,
    float               *__C,
    vDSP_Stride          __IC,
    vDSP_Length          __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfltu8D(
    const unsigned char *__A,
    vDSP_Stride          __IA,
    double              *__C,
    vDSP_Stride          __IC,
    vDSP_Length          __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfltu16(
    const unsigned short *__A,
    vDSP_Stride           __IA,
    float                *__C,
    vDSP_Stride           __IC,
    vDSP_Length           __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfltu16D(
    const unsigned short *__A,
    vDSP_Stride           __IA,
    double               *__C,
    vDSP_Stride           __IC,
    vDSP_Length           __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfltu32(
    const unsigned int *__A,
    vDSP_Stride         __IA,
    float              *__C,
    vDSP_Stride         __IC,
    vDSP_Length         __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfltu32D(
    const unsigned int *__A,
    vDSP_Stride         __IA,
    double             *__C,
    vDSP_Stride         __IC,
    vDSP_Length         __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n];
    */


// Vector fraction part (subtract integer toward zero).
extern void vDSP_vfrac(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vfracD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] - trunc(A[n]);
    */


// Vector gather.
extern void vDSP_vgathr(
    const float       *__A,
    const vDSP_Length *__B,
    vDSP_Stride        __IB,
    float             *__C,
    vDSP_Stride        __IC,
    vDSP_Length        __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vgathrD(
    const double      *__A,
    const vDSP_Length *__B,
    vDSP_Stride        __IB,
    double            *__C,
    vDSP_Stride        __IC,
    vDSP_Length        __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.  Note that A has unit stride.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[B[n] - 1];
    */


// Vector gather, absolute pointers.
extern void vDSP_vgathra(
    const float * __nonnull * __nonnull __A,
    vDSP_Stride                         __IA,
    float                              *__C,
    vDSP_Stride                         __IC,
    vDSP_Length                         __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vgathraD(
    const double * __nonnull * __nonnull __A,
    vDSP_Stride                          __IA,
    double                              *__C,
    vDSP_Stride                          __IC,
    vDSP_Length                          __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = *A[n];
    */


// Vector generate tapered ramp.
extern void vDSP_vgen(
    const float *__A,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vgenD(
    const double *__A,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[0] + (B[0] - A[0]) * n/(N-1);
    */


// Vector generate by extrapolation and interpolation.
extern void vDSP_vgenp(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N,
    vDSP_Length  __M)  // Length of A and of B.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vgenpD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N,
    vDSP_Length   __M)  // Length of A and of B.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                If n <= B[0],  then C[n] = A[0].
                If B[M-1] < n, then C[n] = A[M-1].
                Otherwise:
                    Let m be such that B[m] < n <= B[m+1].
                    C[n] = A[m] + (A[m+1]-A[m]) * (n-B[m]) / (B[m+1]-B[m]).

         The elements of B are expected to be in increasing order.
    */


// Vector inverted clip.
extern void vDSP_viclip(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    const float *__C,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_viclipD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    const double *__C,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
            {
                if (A[n] <= B[0] || C[0] <= A[n])
                    D[n] = A[n];
                else
                    if (A[n] < 0)
                        D[n] = B[0];
                    else
                        D[n] = C[0];
            }

        It is expected that B[0] <= 0 <= C[0].
    */


// Vector index, C[i] = A[truncate[B[i]].
extern void vDSP_vindex(
    const float *__A,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vindexD(
    const double *__A,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[trunc(B[n])];
    */


// Vector interpolation between vectors.
extern void vDSP_vintb(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vintbD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                D[n] = A[n] + C[0] * (B[n] - A[n]);
    */


// Vector test limit.
extern void vDSP_vlim(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    const float *__C,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vlimD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    const double *__C,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                if (B[0] <= A[n])
                    D[n] = +C[0];
                else
                    D[n] = -C[0];
    */


// Vector linear interpolation.
extern void vDSP_vlint(
    const float *__A,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N,
    vDSP_Length  __M)  // Nominal length of A, but not used.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vlintD(
    const double *__A,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N,
    vDSP_Length   __M)  // Nominal length of A, but not used.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
            {
                b = trunc(B[n]);
                a = B[n] - b;
                C[n] = A[b] + a * (A[b+1] - A[b]);
            }
    */


// Vector maxima.
extern void vDSP_vmax(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vmaxD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = B[n] <= A[n] ? A[n] : B[n];
    */


// Vector maximum magnitude.
extern void vDSP_vmaxmg(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vmaxmgD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = |B[n]| <= |A[n]| ? |A[n]| : |B[n]|;
    */


// Vector sliding window maxima.
extern void vDSP_vswmax(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N,
    vDSP_Length  __WindowLength)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
extern void vDSP_vswmaxD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length  __N,
    vDSP_Length  __WindowLength)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
    /*  Maps:  The default maps are used.

        These compute the maximum value within a window to the input vector.
        A maximum is calculated for each window position:

            for (n = 0; n < N; ++n)
                C[n] = the greatest value of A[w] for n <= w < n+WindowLength.

        A must contain N+WindowLength-1 elements, and C must contain space for
        N+WindowLength-1 elements.  Although only N outputs are provided in C,
        the additional elements may be used for intermediate computation.

        A and C may not overlap.

        WindowLength must be positive (zero is not supported).
    */


// Vector minima.
extern void vDSP_vmin(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vminD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] <= B[n] ? A[n] : B[n];
    */


// Vector minimum magnitude.
extern void vDSP_vminmg(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vminmgD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.

        These compute:

            for (n = 0; n < N; ++n)
                C[n] = |A[n]| <= |B[n]| ? |A[n]| : |B[n]|;
    */


// Vector multiply, multiply, and add.
extern void vDSP_vmma(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    const float *__D,
    vDSP_Stride  __ID,
    float       *__E,
    vDSP_Stride  __IE,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vmmaD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    const double *__D,
    vDSP_Stride   __ID,
    double       *__E,
    vDSP_Stride   __IE,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                E[n] = A[n]*B[n] + C[n]*D[n];
    */


// Vector multiply, multiply, and subtract.
extern void vDSP_vmmsb(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    const float *__D,
    vDSP_Stride  __ID,
    float       *__E,
    vDSP_Stride  __IE,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vmmsbD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    const double *__D,
    vDSP_Stride   __ID,
    double       *__E,
    vDSP_Stride   __IE,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                E[n] = A[n]*B[n] - C[n]*D[n];
    */


// Vector multiply and scalar add.
extern void vDSP_vmsa(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vmsaD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                D[n] = A[n]*B[n] + C[0];
    */


// Vector multiply and subtract.
extern void vDSP_vmsb(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vmsbD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                D[n] = A[n]*B[n] - C[n];
    */


// Vector negative absolute value.
extern void vDSP_vnabs(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vnabsD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                C[n] = -|A[n]|;
    */


// Vector negate.
extern void vDSP_vneg(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vnegD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                C[n] = -A[n];
    */


// Vector polynomial.
extern void vDSP_vpoly(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N,
    vDSP_Length  __P)  // P is the polynomial degree.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vpolyD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N,
    vDSP_Length   __P)  // P is the polynomial degree.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                C[n] = sum(A[P-p] * B[n]**p, 0 <= p <= P);
    */


// Vector Pythagoras.
extern void vDSP_vpythg(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    const float *__D,
    vDSP_Stride  __ID,
    float       *__E,
    vDSP_Stride  __IE,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vpythgD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    const double *__D,
    vDSP_Stride   __ID,
    double       *__E,
    vDSP_Stride   __IE,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                E[n] = sqrt((A[n]-C[n])**2 + (B[n]-D[n])**2);
    */


// Vector quadratic interpolation.
extern void vDSP_vqint(
    const float *__A,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N,
    vDSP_Length  __M)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vqintD(
    const double *__A,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N,
    vDSP_Length   __M)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
            {
                b = max(trunc(B[n]), 1);
                a = B[n] - b;
                C[n] = (A[b-1]*(a**2-a) + A[b]*(2-2*a**2) + A[b+1]*(a**2+a))
                    / 2;
            }
    */


// Vector build ramp.
extern void vDSP_vramp(
    const float *__A,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vrampD(
    const double *__A,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[0] + n*B[0];
    */


// Vector running sum integration.
extern void vDSP_vrsum(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__S,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vrsumD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__S,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                C[n] = S[0] * sum(A[j], 0 < j <= n);

        Observe that C[0] is set to 0, and A[0] is not used.
    */


// Vector reverse order, in-place.
extern void vDSP_vrvrs(
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vrvrsD(
    double      *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            Let A contain a copy of C.
            for (n = 0; n < N; ++n)
                C[n] = A[N-1-n];
    */


// Vector subtract and multiply.
extern void vDSP_vsbm(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsbmD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                D[n] = (A[n] - B[n]) * C[n];
    */


// Vector subtract, subtract, and multiply.
extern void vDSP_vsbsbm(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    const float *__D,
    vDSP_Stride  __ID,
    float       *__E,
    vDSP_Stride  __IE,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsbsbmD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    const double *__D,
    vDSP_Stride   __ID,
    double       *__E,
    vDSP_Stride   __IE,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                C[n] = (A[n] - B[n]) * (C[n] - D[n]);
    */


// Vector subtract and scalar multiply.
extern void vDSP_vsbsm(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsbsmD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                D[n] = (A[n] - B[n]) * C[0];
    */


// Vector Simpson integration.
extern void vDSP_vsimps(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsimpsD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            C[0] = 0;
            C[1] = B[0] * (A[0] + A[1])/2;
            for (n = 2; n < N; ++n)
                C[n] = C[n-2] + B[0] * (A[n-2] + 4*A[n-1] + A[n])/3;
    */


// Vector-scalar multiply and vector add.
extern void vDSP_vsma(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    const float *__C,
    vDSP_Stride  __IC,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsmaD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    const double *__C,
    vDSP_Stride   __IC,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                D[n] = A[n]*B[0] + C[n];
    */


// Vector-scalar multiply and scalar add.
extern void vDSP_vsmsa(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    const float *__C,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsmsaD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    const double *__C,
    double       *__ID,
    vDSP_Stride   __L,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                D[n] = A[n]*B[0] + C[0];
    */


// Vector scalar multiply and vector subtract.
extern void vDSP_vsmsb(
    const float *__A,
    vDSP_Stride  __I,
    const float *__B,
    const float *__C,
    vDSP_Stride  __K,
    float       *__D,
    vDSP_Stride  __L,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsmsbD(
    const double *__A,
    vDSP_Stride   __I,
    const double *__B,
    const double *__C,
    vDSP_Stride   __K,
    double       *__D,
    vDSP_Stride   __L,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                D[n] = A[n]*B[0] - C[n];
    */


// Vector-scalar multiply, vector-scalar multiply and vector add.
extern void vDSP_vsmsma(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    const float *__C,
    vDSP_Stride  __IC,
    const float *__D,
    float       *__E,
    vDSP_Stride  __IE,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern void vDSP_vsmsmaD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    const double *__C,
    vDSP_Stride   __IC,
    const double *__D,
    double       *__E,
    vDSP_Stride   __IE,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
    /*  Maps:  The default maps are used.
        
        This computes:

            for (n = 0; n < N; ++n)
                E[n] = A[n]*B[0] + C[n]*D[0];
    */


// Vector sort, in-place.
extern void vDSP_vsort(
    float       *__C,
    vDSP_Length  __N,
    int          __Order)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsortD(
    double      *__C,
    vDSP_Length  __N,
    int          __Order)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  If Order is +1, C is sorted in ascending order.
        If Order is -1, C is sorted in descending order.
    */


// Vector sort indices, in-place.
extern void vDSP_vsorti(
    const float *__C,
    vDSP_Length *__I,
    vDSP_Length * __nullable __Temporary,
    vDSP_Length  __N,
    int          __Order)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vsortiD(
    const double *__C,
    vDSP_Length  *__I,
    vDSP_Length  * __nullable __Temporary,
    vDSP_Length   __N,
    int           __Order)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  No strides are used; arrays map directly to memory.

        I contains indices into C.
        
        If Order is +1, I is sorted so that C[I[n]] increases, for 0 <= n < N.
        If Order is -1, I is sorted so that C[I[n]] decreases, for 0 <= n < N.

        Temporary is not used.  NULL should be passed for it.
    */


// Vector swap.
extern void vDSP_vswap(
    float       *__A,
    vDSP_Stride  __IA,
    float       *__B,
    vDSP_Stride  __IB,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vswapD(
    double      *__A,
    vDSP_Stride  __IA,
    double      *__B,
    vDSP_Stride  __IB,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                A[n] is swapped with B[n].
    */


// Vector sliding window sum.
extern void vDSP_vswsum(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N,
    vDSP_Length  __P) // Length of window.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vswsumD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N,
    vDSP_Length   __P) // Length of window.
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                C[n] = sum(A[n+p], 0 <= p < P);

        Note that A must contain N+P-1 elements.
    */


// Vector table lookup and interpolation.
extern void vDSP_vtabi(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__S1,
    const float *__S2,
    const float *__C,
    vDSP_Length  __M,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vtabiD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__S1,
    const double *__S2,
    const double *__C,
    vDSP_Length   __M,
    double       *__ID,
    vDSP_Stride   __L,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
            {
                p = S1[0] * A[n] + S2[0];
                if (p < 0)
                    D[n] = C[0];
                else if (p < M-1)
                {
                    q = trunc(p);
                    r = p-q;
                    D[n] = (1-r)*C[q] + r*C[q+1];
                }
                else
                    D[n] = C[M-1];
            }
    */


// Vector threshold.
extern void vDSP_vthr(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vthrD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                if (B[0] <= A[n])
                    C[n] = A[n];
                else
                    C[n] = B[0];
    */


// Vector threshold with zero fill.
extern void vDSP_vthres(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vthresD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                if (B[0] <= A[n])
                    C[n] = A[n];
                else
                    C[n] = 0;
    */


// Vector threshold with signed constant.
extern void vDSP_vthrsc(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    const float *__C,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vthrscD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    const double *__C,
    double       *__D,
    vDSP_Stride   __ID,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                if (B[0] <= A[n])
                    D[n] = +C[0];
                else
                    D[n] = -C[0];
    */


// Vector tapered merge.
extern void vDSP_vtmerg(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vtmergD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            for (n = 0; n < N; ++n)
                C[n] = A[n] + (B[n] - A[n]) * n/(N-1);
    */


// Vector trapezoidal integration.
extern void vDSP_vtrapz(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_vtrapzD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
    /*  Maps:  The default maps are used.
        
        These compute:

            C[0] = 0;
            for (n = 1; n < N; ++n)
                C[n] = C[n-1] + B[0] * (A[n-1] + A[n])/2;
    */


// Wiener Levinson.
extern void vDSP_wiener(
    vDSP_Length  __L,
    const float *__A,
    const float *__C,
    float       *__F,
    float       *__P,
    int          __Flag,
    int         *__Error)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);
extern void vDSP_wienerD(
    vDSP_Length   __L,
    const double *__A,
    const double *__C,
    double       *__F,
    double       *__P,
    int           __Flag,
    int          *__Error)
        __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_4_0);


/*  vDSP_FFT16_copv and vDSP_FFT32_copv perform 16- and 32-element FFTs on
    interleaved complex unit-stride vector-block-aligned data.

    Parameters:

        float *Output

            Pointer to space for output data (interleaved complex).  This
            address must be vector-block aligned.

        const float *Input

            Pointer to input data (interleaved complex).  This address must be
            vector-block aligned.

        FFT_Direction Direction

            Transform direction, FFT_FORWARD or FFT_INVERSE.

    These routines calculate:

        For 0 <= k < N,

            H[k] = sum(1**(S * j*k/N) * h[j], 0 <= j < N),

    where:

        N is 16 or 32, as specified by the routine name,

        h[j] is Input[2*j+0] + i * Input[2*j+1] at routine entry,

        H[j] is Output[2*j+0] + i * Output[2*j+1] at routine exit,

        S is -1 if Direction is FFT_FORWARD and +1 if Direction is FFT_INVERSE,
        and

        1**x is e**(2*pi*i*x).

    Input and Output may be equal but may not otherwise overlap.
*/
void vDSP_FFT16_copv(float *__Output, const float *__Input,
    FFTDirection __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);
void vDSP_FFT32_copv(float *__Output, const float *__Input,
    FFTDirection __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_FFT16_zopv and vDSP_FFT32_zopv perform 16- and 32-element FFTs on
    separated complex unit-stride vector-block-aligned data.

    Parameters:

        float *Or, float *Oi

            Pointers to space for real and imaginary output data.  These
            addresses must be vector-block aligned.

        const float *Ir, *Ii

            Pointers to real and imaginary input data.  These addresses must be
            vector-block aligned.

        FFT_Direction Direction

            Transform direction, FFT_FORWARD or FFT_INVERSE.

    These routines calculate:

        For 0 <= k < N,

            H[k] = sum(1**(S * j*k/N) * h[j], 0 <= j < N),

    where:

        N is 16 or 32, as specified by the routine name,

        h[j] is Ir[j] + i * Ii[j] at routine entry,

        H[j] is Or[j] + i * Oi[j] at routine exit,

        S is -1 if Direction is FFT_FORWARD and +1 if Direction is FFT_INVERSE,
        and

        1**x is e**(2*pi*i*x).

    Or may equal Ir or Ii, and Oi may equal Ii or Ir, but the ararys may not
    otherwise overlap.
*/
void vDSP_FFT16_zopv(
          float *__Or,       float *__Oi,
    const float *__Ir, const float *__Ii,
    FFTDirection __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);
void vDSP_FFT32_zopv(
          float *__Or,       float *__Oi,
    const float *__Ir, const float *__Ii,
    FFTDirection __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  How to use the Discrete Fourier Transform (DFT) and Discrete Cosine
    Transform (DCT) interfaces.

    There are three steps to performing a DFT or DCT:

        Call a setup routine (e.g., vDSP_DFT_zop_CreateSetup) to get a setup
        object.

            This is a preparation step to be done when a program is starting or
            is starting some new phase (e.g., when a communication channel is
            opened).  It should never be done during real-time processing.  The
            setup routine is slow and is called only once to prepare data that
            can be used many times.

        Call an execution routine (e.g., vDSP_DFT_Execute or vDSP_DCT_Execute)
        to perform a DFT or DCT, and pass it the setup object.

            The execution routine is fast (for selected cases) and is generally
            called many times.

        Call a destroy routine (e.g., vDSP_DFT_DestroySetup) to release the
        memory held by the setup object.

            This is done when a program is ending or is ending some phase.
            After calling a destroy routine, the setup data is no longer valid
            and should not be used.

    Discussion:

        The current sequences of setup, execution, destroy routines are:

            For single-precision (float):

                vDSP_DFT_zop_CreateSetup,
                vDSP_DFT_Execute,
                vDSP_DFT_DestroySetup.

                vDSP_DFT_zrop_CreateSetup,
                vDSP_DFT_Execute,
                vDSP_DFT_DestroySetup.

                vDSP_DCT_CreateSetup,
                vDSP_DCT_Execute,
                vDSP_DFT_DestroySetup.

                vDSP_DFT_CreateSetup,
                vDSP_DFT_zop,
                vDSP_DFT_DestroySetup.

            For double-precision (double):

                vDSP_DFT_zop_CreateSetupD,
                vDSP_DFT_ExecuteD,
                vDSP_DFT_DestroySetupD.

                vDSP_DFT_zrop_CreateSetupD,
                vDSP_DFT_ExecuteD,
                vDSP_DFT_DestroySetupD.

        Sharing DFT and DCT setups:

            Any setup returned by a DFT or DCT setup routine may be passed as
            input to any DFT or DCT setup routine for the same precision (float
            or double), in the parameter named Previous.  (This allows the
            setups to share data, avoiding unnecessary duplication of some
            setup data.)  Setup routines may be executed in any order.  Passing
            any setup of a group of setups sharing data will result in a new
            setup sharing data with all of the group.

            When calling an execution routine, each setup can be used only with
            its intended execution routine.  Thus the setup returned by
            vDSP_DFT_CreateSetup can only be used with vDSP_DFT_zop and not
            with vDSP_DFT_Execute.

            vDSP_DFT_DestroySetup is used to destroy any single-precision DFT
            or DCT setup.  vDSP_DFT_DestroySetupD is used to destroy any
            double-precision DFT or DCT setup.

        History:

            vDSP_DFT_CreateSetup and vDSP_DFT_zop are the original vDSP DFT
            routines.  vDSP_DFT_zop_CreateSetup, vDSP_DFT_zrop_CreateSetup, and
            vDSP_DFT_Execute are newer, more specialized DFT routines.  These
            newer routines do not have stride parameters (stride is one) and
            incorporate the direction parameter into the setup.  This reduces
            the number of arguments passed to the execution routine, which
            receives only the setup and four address parameters.  Additionally,
            the complex-to-complex DFT (zop) and real-to-complex DFT (zrop) use
            the same execution routine (the setup indicates which function to
            perform).

            We recommend you use vDSP_DFT_zop_CreateSetup,
            vDPS_DFT_zrop_CreateSetup, and vDSP_DFT_Execute, and that you not
            use vDSP_DFT_CreateSetup and vDSP_DFT_zop.

    Multithreading:

        Never call a setup or destroy routine in a thread when any DFT or DCT
        routine (setup, execution, or destroy) that shares setup data may be
        executing.  (This applies not just to multiple threads but also to
        calling DFT or DCT routines in signal handlers.)

        Multiple DFT or DCT execution routines may be called simultaneously.
        (Their access to the setup data is read-only.)

        If you need to call setup and/or destroy routines while other DFT or
        DCT routines might be executing, you can either use Grand Central
        Dispatch or locks (costs time) to avoid simultaneous execution or you
        can create separate setup objects for them (costs memory).
*/


/*  A vDSP_DFT_Setup object is a pointer to a structure whose definition is
    unpubilshed.
*/
typedef struct vDSP_DFT_SetupStruct  *vDSP_DFT_Setup;
typedef struct vDSP_DFT_SetupStructD *vDSP_DFT_SetupD;


// DFT direction may be specified as vDSP_DFT_FORWARD or vDSP_DFT_INVERSE.
typedef CF_ENUM(int, vDSP_DFT_Direction)
    { vDSP_DFT_FORWARD = +1, vDSP_DFT_INVERSE = -1 };


/*  vDSP_DFT_CreateSetup is a DFT setup routine.  It creates a setup object
    for use with the vDSP_DFT_zop execution routine.  We recommend you use
    vDSP_DFT_zop_CreateSetup instead of this routine.

    Parameters:

        vDSP_DFT_Setup Previous

            Previous is either zero or a previous DFT or DCT setup.  If a
            previous setup is passed, the new setup will share data with the
            previous setup, if feasible (and with any other setups the previous
            setup shares with).  If zero is passed, the routine will allocate
            and initialize new memory.

        vDSP_Length Length

            Length is the number of complex elements to be transformed.

    Return value:

        Zero is returned if memory is unavailable.

    The returned setup object may be used only with vDSP_DFT_zop for the length
    given during setup.  Unlike previous vDSP FFT routines, the setup may not
    be used to execute transforms with shorter lengths.

    Do not call this routine while any DFT routine sharing setup data might be
    executing.
*/
__nullable vDSP_DFT_Setup vDSP_DFT_CreateSetup(
    __nullable vDSP_DFT_Setup __Previous,
    vDSP_Length               __Length)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_DFT_zop_CreateSetup is a DFT setup routine.  It creates a setup object
    for use with the vDSP_DFT_Execute execution routine, to perform a
    complex-to-complex DFT.

    Parameters:

        vDSP_DFT_Setup Previous

            Previous is either zero or a previous DFT or DCT setup.  If a
            previous setup is passed, the new setup will share data with the
            previous setup, if feasible (and with any other setups the previous
            setup shares with).  If zero is passed, the routine will allocate
            and initialize new memory.

        vDSP_Length Length

            Length is the number of complex elements to be transformed.

        vDSP_DFT_Direction Direction

            Transform direction, vDSP_DFT_FORWARD or vDSP_DFT_INVERSE.

    Return value:

        Zero is returned if memory is unavailable or if there is no
        implementation for the requested case.  Currently, the implemented
        cases are:

            Length = 2**n.

            Length = f * 2**n, where f is 3, 5, or 15 and 3 <= n.

        Additionally, it is recommended that the array addresses (passed to
        vDSP_DFT_Execute) be 16-byte aligned.  For other cases, performance may
        be slightly or greatly worse, depending on transform length and
        processor model.

    Function:

        When vDSP_DFT_Execute is called with a setup returned from this
        routine, it calculates:

            For 0 <= k < N,

                H[k] = sum(1**(S * j*k/N) * h[j], 0 <= j < N),

        where:

            N is the length given in the setup;

            h is the array of complex numbers specified by Ir and Ii when
            vDSP_DFT_Execute is called:

                for 0 <= j < N,
                    h[j] = Ir[j] + i * Ii[j];

            H is the array of complex numbers specified by Or and Oi when
            vDSP_DFT_Execute returns:

                for 0 <= k < N,
                    H[k] = Or[k] + i * Oi[k];

            S is -1 if Direction is vDSP_DFT_FORWARD and +1 if Direction is
            vDSP_DFT_INVERSE; and

            1**x is e**(2*pi*i*x).

    Performance:

        Performance is good when the array addresses (passed to
        vDSP_DFT_Execute) are 16-byte aligned.  Other alignments are supported,
        but performance may be significantly worse in some cases, depending on
        the processor model or the transform length (because different
        algorithms are used for different forms of transform length).

    In-Place Operation:

        Or may equal Ir and Oi may equal Ii (in the call to vDSP_DFT_Execute).
        Otherwise, no overlap of Or, Oi, Ir, and Ii is supported.

    The returned setup object may be used only with vDSP_DFT_Execute for the
    length given during setup.  Unlike previous vDSP FFT routines, the setup
    may not be used to execute transforms with shorter lengths.

    Do not call this routine while any DFT or DCT routine sharing setup data
    might be executing.
*/
__nullable vDSP_DFT_Setup vDSP_DFT_zop_CreateSetup(
    __nullable vDSP_DFT_Setup __Previous,
    vDSP_Length               __Length,
    vDSP_DFT_Direction        __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_0);
__nullable vDSP_DFT_SetupD vDSP_DFT_zop_CreateSetupD(
    __nullable vDSP_DFT_SetupD __Previous,
    vDSP_Length                __Length,
    vDSP_DFT_Direction         __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);

/*  vDSP_DFT_zrop_CreateSetup and vDSP_DFT_zrop_CreateSetupD are DFT setup
    routines.  Each creates a setup object for use with the corresponding
    execution routine, vDSP_DFT_Execute or vDSP_DFT_ExecuteD, to perform a
    real-to-complex DFT or a complex-to-real DFT.  Documentation below is
    written for vDSP_DFT_zrop_CreateSetup.  vDSP_DFT_CreateSetupD behaves the
    same way, with corresponding changes of the types, objects, and routines to
    the double-precision versions.

    Parameters:

        vDSP_DFT_Setup Previous

            Previous is either zero or a previous DFT or DCT setup.  If a
            previous setup is passed, the new setup will share data with the
            previous setup, if feasible (and with any other setups the previous
            setup shares with).  If zero is passed, the routine will allocate
            and initialize new memory.

        vDSP_Length Length

            Length is the number of real elements to be transformed (in a a
            forward, real-to-complex transform) or produced (in a reverse,
            complex-to-real transform).  Length must be even.

        vDSP_DFT_Direction Direction

            Transform direction, vDSP_DFT_FORWARD or vDSP_DFT_INVERSE.

    Return value:

        Zero is returned if memory is unavailable or if there is no
        implementation for the requested case.  Currently, the implemented
        cases are:

            Length = 2**n.

            Length = f * 2**n, where f is 3, 5, or 15 and 4 <= n.

        Additionally, it is recommended that the array addresses (passed to
        vDSP_DFT_Execute) be 16-byte aligned.  For other cases, performance may
        be slightly or greatly worse, depending on transform length and
        processor model.

    Function:

        When vDSP_DFT_Execute is called with a setup returned from this
        routine, it calculates:

            For 0 <= k < N,

                H[k] = C * sum(1**(S * j*k/N) * h[j], 0 <= j < N),

        where:

            N is the Length given in the setup;

            h is the array of numbers specified by Ir and Ii when
            vDSP_DFT_Execute is called (see "Data Layout" below);

            H is the array of numbers specified by Or and Oi when
            vDSP_DFT_Execute returns (see "Data Layout" below);

            C is 2 if Direction is vDSP_DFT_FORWARD and 1 if Direction is
            vDSP_DFT_INVERSE;

            S is -1 if Direction is vDSP_DFT_FORWARD and +1 if Direction is
            vDSP_DFT_INVERSE; and

            1**x is e**(2*pi*i*x).

        Data Layout:

            If Direction is vDSP_DFT_FORWARD, then:

                h is an array of real numbers, with its even-index elements
                stored in Ir and its odd-index elements stored in Ii:

                    For 0 <= j < N/2,
                        h[2*j+0] = Ir[j], and
                        h[2*j+1] = Ii[j].

                H is an array of complex numbers, stored in Or and Oi:

                    H[0  ] = Or[0].  (H[0  ] is pure real.)
                    H[N/2] = Oi[0].  (H[N/2] is pure real.)
                    For 1 < k < N/2,
                        H[k] = Or[k] + i * Oi[k].

                For N/2 < k < N, H[k] is not explicitly stored in memory but is
                known because it necessarily equals the conjugate of H[N-k],
                which is stored as described above.

            If Direction is vDSP_DFT_INVERSE, then the layouts of the input and
            output arrays are swapped.  Ir and Ii describe an input array with
            complex elements laid out as described above for Or and Oi.  When
            vDSP_DFT_Execute returns, Or and Oi contain a pure real array, with
            its even-index elements stored in Or and its odd-index elements in
            Oi.

    Performance:

        Performance is good when the array addresses (passed to
        vDSP_DFT_Execute) are 16-byte aligned.  Other alignments are supported,
        but performance may be significantly worse in some cases, depending on
        the processor model or the transform length (because different
        algorithms are used for different forms of transform length).

    In-Place Operation:

        Or may equal Ir and Oi may equal Ii (in the call to vDSP_DFT_Execute).
        Otherwise, no overlap of Or, Oi, Ir, and Ii is supported.

    The returned setup object may be used only with vDSP_DFT_Execute for the
    length given during setup.  Unlike previous vDSP FFT routines, the setup
    may not be used to execute transforms with shorter lengths.

    Do not call this routine while any DFT routine sharing setup data might be
    executing.
*/
__nullable vDSP_DFT_Setup vDSP_DFT_zrop_CreateSetup(
    __nullable vDSP_DFT_Setup __Previous,
    vDSP_Length __Length, vDSP_DFT_Direction __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_0);
__nullable vDSP_DFT_SetupD vDSP_DFT_zrop_CreateSetupD(
    __nullable vDSP_DFT_SetupD __Previous,
    vDSP_Length __Length, vDSP_DFT_Direction __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);


/*  vDSP_DFT_DestroySetup and vDSP_DFT_DestroySetupD are DFT destroy routines.
    They release the memory used by a setup object.  Documentation below is
    written for vDSP_DFT_DestroySetup.  vDSP_DFT_DestroySetupD behaves the same
    way, with corresponding changes of the types, objects, and routines to the
    double-precision versions.

    Parameters:

        vDSP_DFT_Setup Setup

            Setup is the setup object to be released.  The object may have
            been previously allocated with any DFT or DCT setup routine, such
            as vDSP_DFT_zop_CreateSetup, vDSP_DFT_zrop_CreateSetup, or
            vDSP_DCT_CreateSetup.

            Setup may be a null pointer, in which case the call has no effect.

    Destroying a setup with shared data is safe; it will release only memory
    not needed by other undestroyed setups.  Memory (and the data it contains)
    is freed only when all setup objects using it have been destroyed.

    Do not call this routine while any DFT or DCT routine sharing setup data
    might be executing.
*/
void vDSP_DFT_DestroySetup(__nullable vDSP_DFT_Setup __Setup)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);
void vDSP_DFT_DestroySetupD(__nullable vDSP_DFT_SetupD __Setup)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);


/*  vDSP_DFT_zop is a DFT execution routine.  It performs a DFT, with the aid
    of previously created setup data.

    Parameters:

        vDSP_DFT_Setup Setup

            A setup object returned by a previous call to
            vDSP_DFT_zop_CreateSetup.

        const float *Ir
        const float *Ii

            Pointers to real and imaginary components of input data.

        vDSP_Stride Is

            The number of physical elements from one logical input element to
            the next.

        float *Or
        float *Oi

            Pointers to space for real and imaginary components of output
            data.

            The input and output arrays may not overlap except as specified
            in "In-Place Operation", below.

        vDSP_Stride Os

            The number of physical elements from one logical output element to
            the next.

        vDSP_DFT_Direction Direction

            Transform direction, vDSP_DFT_FORWARD or vDSP_DFT_INVERSE.

    Observe there is no separate length parameter.  The length is passed via
    the setup object.

    Performance:

        Performance is good for these cases:

            All addresses are 16-byte aligned, all strides are one, and the
            length is f * 2**n, where f is 3, 5, or 15 and 3 <= n.

        Performance is extremely slow for all other cases.

    In-Place Operation:

        For cases where the length is f * 2**n, where f is 3, 5, or 15 and 3 <=
        n, Or may equal Ir and Oi may equal Ii.  Otherwise, no overlap of Or,
        Oi, Ir, and Ii is supported.

    This routine calculates:

        For 0 <= k < N,

            H[k] = sum(1**(S * j*k/N) * h[j], 0 <= j < N),

    where:

        N is the length given in the setup,

        h is the array of complex numbers specified by Ir, Ii, and Is at
        routine entry:

            h[j] = Ir[j*Is] + i * Ii[j*Is],
            for 0 <= j < N,

        H is the array of complex numbers stored as specified by Or, Oi, and Os
        at routine exit:

            H[k] = Or[k*Os] + i * Oi[k*Os],
            for 0 <= k < N,

        S is -1 if Direction is vDSP_DFT_FORWARD and +1 if Direction is
        vDSP_DFT_INVERSE, and

        1**x is e**(2*pi*i*x).

    Do not call this routine while any DFT setup or destroy routine sharing
    setup data might be executing.
*/
void vDSP_DFT_zop(
    const struct vDSP_DFT_SetupStruct *__Setup,
    const float *__Ir, const float *__Ii, vDSP_Stride __Is,
          float *__Or,       float *__Oi, vDSP_Stride __Os,
    vDSP_DFT_Direction __Direction)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_DFT_Execute and vDSP_DFT_ExecuteD are DFT execution routines.  They
    perform a DFT, with the aid of previously created setup data.
    Documentation below is written for vDSP_DFT_Execute.  vDSP_DFT_ExecuteD
    behaves the same way, with corresponding changes of the types, objects, and
    routines to the double-precision versions.

    Parameters:

        vDSP_DFT_Setup Setup

            A setup object returned by a previous call to
            vDSP_DFT_zop_CreateSetup or vDSP_DFT_zrop_CreateSetup.

        const float *Ir
        const float *Ii

            Pointers to input data.

        float *Or
        float *Oi

            Pointers to output data.

            The input and output arrays may not overlap except as specified
            in "In-Place Operation", below.

    Performance and In-Place Operation:

        See notes for the setup routine for the operation being executed.

    Function:

        The function performed by this routine is determined by the setup
        passed to it.  The documentation for the routine used to create the
        setup describes the function.

        Note that different numbers of elements are required when this routine
        is called, depending on the setup used:

            When the setup is from vDSP_zop_CreateSetup, each array (Ir, Ii,
            Or, and Oi) must have Length elements.

            When the setup is from vDSP_zrop_CreateSetup, each array (Ir, Ii,
            Or, and Oi) must have Length/2 elements.

    Do not call this routine while any DFT setup or destroy routine sharing
    setup data might be executing.
*/
void vDSP_DFT_Execute(
    const struct vDSP_DFT_SetupStruct *__Setup,
    const float *__Ir,  const float *__Ii,
          float *__Or,        float *__Oi)
        __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_4_0);
void vDSP_DFT_ExecuteD(
    const struct vDSP_DFT_SetupStructD *__Setup,
    const double *__Ir,  const double *__Ii,
          double *__Or,        double *__Oi)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_7_0);


/*  vDSP_DCT_CreateSetup is a DCT setup routine.  It creates a setup object
    for use with the vDSP_DCT_Execute routine.  See additional information
    above, at "How to use the Discrete Fourier Transform (DFT) and Discrete
    Cosine Transform (DCT) interfaces."

    Parameters:

        vDSP_DFT_Setup Previous

            Previous is either zero or a previous DFT or DCT setup.  If a
            previous setup is passed, the new setup will share data with the
            previous setup, if feasible (and with any other setups the
            previous setup shares with).  If zero is passed, the routine
            will allocate and initialize new memory.

        vDSP_Length Length

            Length is the number of real elements to be transformed.

        vDSP_DCT_Type Type

            Type specifies which DCT variant to perform.  At present, the
            supported DCT types are II and III (which are mutual inverses, up
            to scaling) and IV (which is its own inverse).  These are specified
            with symbol names vDSP_DCT_II, vDSP_DCT_III, and vDSP_DCT_IV.

    Return value:

        Zero is returned if memory is unavailable or if there is no
        implementation for the requested case.  Currently, the implemented
        cases are:

            Length = f * 2**n, where f is 1, 3, 5, or 15 and 4 <= n.

    Function:

        When vDSP_DCT_Execute is called with a setup returned from this
        routine, it calculates:

            If Type is vDSP_DCT_II:

                For 0 <= k < N,

                    Or[k] = sum(Ir[j] * cos(k * (j+1/2) * pi / N, 0 <= j < N).

            If Type is vDSP_DCT_III

                For 0 <= k < N,

                    Or[k] = Ir[0]/2
                        + sum(Ir[j] * cos((k+1/2) * j * pi / N), 1 <= j < N).

            If Type is vDSP_DCT_IV:

                For 0 <= k < N,

                    Or[k] = sum(Ir[j] * cos((k+1/2) * (j+1/2) * pi / N, 0 <= j < N).

            Where:

                N is the length given in the setup,

                h is the array of real numbers passed to vDSP_DCT_Execute in
                Input, and

                H is the array of real numbers stored by vDSP_DCT_Execute in
                the array passed to it in Output.

     Performance:

        Performance is good when the array addresses (passed to
        vDSP_DFT_Execute) are 16-byte aligned.  Other alignments are supported,
        but performance may be significantly worse in some cases, depending on
        the processor model or the transform length (because different
        algorithms are used for different forms of transform length).

    In-Place Operation:

        Output may equal Input (in the call the vDSP_DCT_Execute).  Otherwise,
        no overlap is permitted between the two buffers.

    The returned setup object may be used only with vDSP_DCT_Execute for the
    length given during setup.

    Do not call this routine while any DFT or DCT routine sharing setup data
    might be executing.
*/
typedef CF_ENUM(int, vDSP_DCT_Type)
{
    vDSP_DCT_II  = 2,
    vDSP_DCT_III = 3,
    vDSP_DCT_IV  = 4
};

__nullable vDSP_DFT_Setup vDSP_DCT_CreateSetup(
    __nullable vDSP_DFT_Setup __Previous,
    vDSP_Length               __Length,
    vDSP_DCT_Type             __Type)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);


/*  vDSP_DCT_Execute is a DCT execution routine.  It performs a DCT, with the
    aid of previously created setup data.  See additional information above, at
    "How to use the Discrete Fourier Transform (DFT) and Discrete Cosine
    Transform (DCT) interfaces."

    Parameters:

        vDSP_DFT_Setup Setup

            A setup object returned by a previous call to vDSP_DCT_CreateSetup.

        const float *Input

            Pointer to the input buffer.

        float *Output

            Pointer to the output buffer.

        Observe there are no separate length or type parameters.  They are
        specified at the time that the Setup is created.

        Because the DCT is real-to-real, the parameters for vDSP_DCT_Execute
        are different from those used for a DFT.
*/
void vDSP_DCT_Execute(
    const struct vDSP_DFT_SetupStruct *__Setup,
    const float                       *__Input,
    float                             *__Output)
        __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);


/*  vDSP_dotpr2, vector single-precision stereo dot product.

    Function:

        This routine calculates the dot product of A0 with B and the dot
        product of A1 with B.  This is functionally equivalent to calculating
        two dot products but might execute faster.

        In pseudocode, the operation is:

            sum0 = 0;
            sum1 = 0;
            for (i = 0; i < Length; ++i)
            {
                sum0 += A0[i*A0Stride] * B[i*BStride];
                sum1 += A1[i*A1Stride] * B[i*BStride];
            }
            *C0 = sum0;
            *C1 = sum1;

    Input:

        const float *A0, vDSP_Stride A0Stride.

            Starting address and stride for input vector A0.

        const float *A1, vDSP_Stride A1Stride.

            Starting address and stride for input vector A1.

        const float *B,  vDSP_Stride BStride.

            Starting address and stride for input vector B.

        float *C0.

            Address for dot product of A0 and B.

        float *C1.

            Address for dot product of A1 and B.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to *C0 and *C1.
*/
void vDSP_dotpr2(
    const float *__A0, vDSP_Stride __A0Stride,
    const float *__A1, vDSP_Stride __A1Stride,
    const float *__B,  vDSP_Stride __BStride,
    float *__C0,
    float *__C1,
    vDSP_Length __Length)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_dotpr2D, vector double-precision stereo dot product.

    Function:

        This routine calculates the dot product of A0 with B and the dot
        product of A1 with B.  This is functionally equivalent to calculating
        two dot products but might execute faster.

        In pseudocode, the operation is:

            sum0 = 0;
            sum1 = 0;
            for (i = 0; i < Length; ++i)
            {
                sum0 += A0[i*A0Stride] * B[i*BStride];
                sum1 += A1[i*A1Stride] * B[i*BStride];
            }
            *C0 = sum0;
            *C1 = sum1;

    Input:

        const double *A0, vDSP_Stride A0Stride.

            Starting address and stride for input vector A0.

        const double *A1, vDSP_Stride A1Stride.

            Starting address and stride for input vector A1.

        const double *B,  vDSP_Stride BStride.

            Starting address and stride for input vector B.

        double *C0.

            Address for dot product of A0 and B.

        double *C1.

            Address for dot product of A1 and B.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to *C0 and *C1.
*/
void vDSP_dotpr2D(
    const double *__A0, vDSP_Stride __A0Stride,
    const double *__A1, vDSP_Stride __A1Stride,
    const double *__B,  vDSP_Stride __BStride,
    double *__C0,
    double *__C1,
    vDSP_Length __Length)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);


/*  vDSP_dotpr_s1_15, vector integer 1.15 format dot product.

    Function:

        This routine calculates the dot product of A with B.

        In pseudocode, the operation is:

            sum = 0;
            for (i = 0; i < N; ++i)
            {
                sum0 += A[i*AStride] * B[i*BStride];
            }
            *C = sum;

    The elements are fixed-point numbers, each with one sign bit and 15
    fraction bits.  Where the value of the short int is normally x, it is
    x/32768 for the purposes of this routine.

    Input:

        const short int *A, vDSP_Stride AStride.

            Starting address and stride for input vector A.

        const short int *B,  vDSP_Stride BStride.

            Starting address and stride for input vector B.

        short int *C.

            Address for dot product of A and B.

        vDSP_Length N.

            Number of elements in each vector.

    Output:

        The result is written to *C.
*/
void vDSP_dotpr_s1_15(
    const short int *__A, vDSP_Stride __AStride,
    const short int *__B, vDSP_Stride __BStride,
    short int *__C,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_dotpr2_s1_15, vector integer 1.15 format stereo dot product.

    Function:

        This routine calculates the dot product of A0 with B and the dot
        product of A1 with B.  This is functionally equivalent to calculating
        two dot products but might execute faster.

        In pseudocode, the operation is:

            sum0 = 0;
            sum1 = 0;
            for (i = 0; i < N; ++i)
            {
                sum0 += A0[i*A0Stride] * B[i*BStride];
                sum1 += A1[i*A1Stride] * B[i*BStride];
            }
            *C0 = sum0;
            *C1 = sum1;

    The elements are fixed-point numbers, each with one sign bit and 15
    fraction bits.  Where the value of the short int is normally x, it is
    x/32768 for the purposes of this routine.

    Input:

        const short int *A0, vDSP_Stride A0Stride.

            Starting address and stride for input vector A0.

        const short int *A1, vDSP_Stride A1Stride.

            Starting address and stride for input vector A1.

        const short int *B,  vDSP_Stride BStride.

            Starting address and stride for input vector B.

        short int *C0.

            Address for dot product of A0 and B.

        short int *C1.

            Address for dot product of A1 and B.

        vDSP_Length N.

            Number of elements in each vector.

    Output:

        The results are written to *C0 and *C1.
*/
void vDSP_dotpr2_s1_15(
    const short int *__A0, vDSP_Stride __A0Stride,
    const short int *__A1, vDSP_Stride __A1Stride,
    const short int *__B,  vDSP_Stride __BStride,
    short int *__C0,
    short int *__C1,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_dotpr_s8_24, vector integer 8.24 format dot product.

    Function:

        This routine calculates the dot product of A with B.

        In pseudocode, the operation is:

            sum = 0;
            for (i = 0; i < N; ++i)
            {
                sum0 += A[i*AStride] * B[i*BStride];
            }
            *C = sum;

    The elements are fixed-point numbers, each with eight integer bits
    (including sign) and 24 fraction bits.  Where the value of the int is
    normally x, it is x/16777216 for the purposes of this routine.

    Input:

        const int *A, vDSP_Stride AStride.

            Starting address and stride for input vector A.

        const int *B,  vDSP_Stride BStride.

            Starting address and stride for input vector B.

        int *C.

            Address for dot product of A and B.

        vDSP_Length N.

            Number of elements in each vector.

    Output:

        The result is written to *C.
*/
void vDSP_dotpr_s8_24(
    const int *__A, vDSP_Stride __AStride,
    const int *__B, vDSP_Stride __BStride,
    int *__C,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_dotpr2_s8_24, vector integer 8.24 format stereo dot product.

    Function:

        This routine calculates the dot product of A0 with B and the dot
        product of A1 with B.  This is functionally equivalent to calculating
        two dot products but might execute faster.

        In pseudocode, the operation is:

            sum0 = 0;
            sum1 = 0;
            for (i = 0; i < N; ++i)
            {
                sum0 += A0[i*A0Stride] * B[i*BStride];
                sum1 += A1[i*A1Stride] * B[i*BStride];
            }
            *C0 = sum0;
            *C1 = sum1;

    The elements are fixed-point numbers, each with eight integer bits
    (including sign) and 24 fraction bits.  Where the value of the int is
    normally x, it is x/16777216 for the purposes of this routine.

    Input:

        const int *A0, vDSP_Stride A0Stride.

            Starting address and stride for input vector A0.

        const int *A1, vDSP_Stride A1Stride.

            Starting address and stride for input vector A1.

        const int *B,  vDSP_Stride BStride.

            Starting address and stride for input vector B.

        int *C0.

            Address for dot product of A0 and B.

        int *C1.

            Address for dot product of A1 and B.

        vDSP_Length N.

            Number of elements in each vector.

    Output:

        The results are written to *C0 and *C1.
*/
void vDSP_dotpr2_s8_24(
    const int *__A0, vDSP_Stride __A0Stride,
    const int *__A1, vDSP_Stride __A1Stride,
    const int *__B,  vDSP_Stride __BStride,
    int *__C0,
    int *__C1,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vaddsub, vector single-precision add and subtract.

    Adds vector I0 to vector I1 and leaves the result in vector O0.
    Subtracts vector I0 from vector I1 and leaves the result in vector O1.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            float i1 = I1[i*I1S], i0 = I0[i*I0S];
            O0[i*O0S] = i1 + i0;
            O1[i*O1S] = i1 - i0;
        }

    Input:

        const float *I0, const float *I1, vDSP_Stride I0S, vDSP_Stride I1S.

            Starting addresses of both inputs and strides for the input vectors.

        float *O0, float *O1, vDSP_Stride O0S, vDSP_Stride O1S.

            Starting addresses of both outputs and strides for the output vectors.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O0 and O1.

    In-Place Operation:

        Either of O0 and/or O1 may equal I0 and/or I1, but O0 may not equal
        O1.  Otherwise, no overlap is permitted between any of the buffers.
*/
void vDSP_vaddsub(
    const float *__I0, vDSP_Stride __I0S,
    const float *__I1, vDSP_Stride __I1S,
          float *__O0, vDSP_Stride __O0S,
          float *__O1, vDSP_Stride __O1S,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);


/*  vDSP_vaddsubD, vector double-precision add and subtract.

    Adds vector I0 to vector I1 and leaves the result in vector O0.
    Subtracts vector I0 from vector I1 and leaves the result in vector O1.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            double i1 = I1[i*I1S], i0 = I0[i*I0S];
            O0[i*O0S] = i1 + i0;
            O1[i*O1S] = i1 - i0;
        }

    Input:

        const double *I0, const double *I1, vDSP_Stride I0S, vDSP_Stride I1S.

            Starting addresses of both inputs and strides for the input vectors.

        double *O0, double *O1, vDSP_Stride O0S, vDSP_Stride O1S.

            Starting addresses of both outputs and strides for the output vectors.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O0 and O1.

    In-Place Operation:

        Either of O0 and/or O1 may equal I0 and/or I1, but O0 may not equal
        O1.  Otherwise, no overlap is permitted between any of the buffers.
*/
void vDSP_vaddsubD(
    const double *__I0, vDSP_Stride __I0S,
    const double *__I1, vDSP_Stride __I1S,
          double *__O0, vDSP_Stride __O0S,
          double *__O1, vDSP_Stride __O1S,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);


/*  vDSP_vrampmul, vector single-precision vramp and multiply.

    This routine puts into O the product of I and a ramp function with initial
    value *Start and slope *Step.  *Start is updated to continue the ramp
    in a consecutive call.  To continue the ramp smoothly, the new value of
    *Step includes rounding errors accumulated during the routine rather than
    being calculated directly as *Start + N * *Step.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O[i*OS] = *Start * I[i*IS];
            *Start += *Step;
        }

    Input:

        const float *I, vDSP_Stride IS.

            Starting address and stride for the input vector.

        float *Start.

            Starting value for the ramp.

        const float *Step.

            Value of the step for the ramp.

        float *O, vDSP_Stride OS.

            Starting address and stride for the output vector.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmul(
    const float *__I, vDSP_Stride __IS,
    float *__Start,
    const float *__Step,
    float *__O, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmulD, vector double-precision vramp and multiply.

    This routine puts into O the product of I and a ramp function with initial
    value *Start and slope *Step.  *Start is updated to continue the ramp
    in a consecutive call.  To continue the ramp smoothly, the new value of
    *Step includes rounding errors accumulated during the routine rather than
    being calculated directly as *Start + N * *Step.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O[i*OS] = *Start * I[i*IS];
            *Start += *Step;
        }

    Input:

        const double *I, vDSP_Stride IS.

            Starting address and stride for the input vector.

        double *Start.

            Starting value for the ramp.

        const double *Step.

            Value of the step for the ramp.

        double *O, vDSP_Stride OS.

            Starting address and stride for the output vector.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmulD(
    const double *__I, vDSP_Stride __IS,
    double *__Start,
    const double *__Step,
    double *__O, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);


/*  vDSP_vrampmuladd, vector single-precision vramp, multiply and add.

    This routine adds to O the product of I and a ramp function with initial
    value *Start and slope *Step.  *Start is updated to continue the ramp in a
    consecutive call.  To continue the ramp smoothly, the new value of *Step
    includes rounding errors accumulated during the routine rather than being
    calculated directly as *Start + N * *Step.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O[i*OS] += *Start * I[i*IS];
            *Start += *Step;
        }

    Input:

        const float *I, vDSP_Stride IS.

            Starting address and stride for the input vector.

        float *Start.

            Starting value for the ramp.

        const float *Step.

            Value of the step for the ramp.

        float *O, vDSP_Stride OS.

            Starting address and stride for the output vector.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are added to O.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmuladd(
    const float *__I, vDSP_Stride __IS,
    float *__Start,
    const float *__Step,
    float *__O, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmuladdD, vector double-precision vramp, multiply and add.

    This routine adds to O the product of I and a ramp function with initial
    value *Start and slope *Step.  *Start is updated to continue the ramp in a
    consecutive call.  To continue the ramp smoothly, the new value of *Step
    includes rounding errors accumulated during the routine rather than being
    calculated directly as *Start + N * *Step.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O[i*OS] += *Start * I[i*IS];
            *Start += *Step;
        }

    Input:

        const double *I, vDSP_Stride IS.

            Starting address and stride for the input vector.

        double *Start.

            Starting value for the ramp.

        const double *Step.

            Value of the step for the ramp.

        double *O, vDSP_Stride OS.

            Starting address and stride for the output vector.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are added to O.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmuladdD(
    const double *__I, vDSP_Stride __IS,
          double *__Start,
    const double *__Step,
          double *__O, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);


/*  vDSP_vrampmul2, stereo vector single-precision vramp and multiply.

    This routine:

        Puts into O0 the product of I0 and a ramp function with initial value
        *Start and slope *Step.

        Puts into O1 the product of I1 and a ramp function with initial value
        *Start and slope *Step.

    *Start is updated to continue the ramp in a consecutive call.  To continue
    the ramp smoothly, the new value of *Step includes rounding errors
    accumulated during the routine rather than being calculated directly as
    *Start + N * *Step.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O0[i*OS] = *Start * I0[i*IS];
            O1[i*OS] = *Start * I1[i*IS];
            *Start += *Step;
        }

    Input:

        const float *I0, const float *I1, vDSP_Stride IS.

            Starting addresses of both inputs and stride for the input vectors.

        float *Start.

            Starting value for the ramp.

        const float *Step.

            Value of the step for the ramp.

        float *O0, float *O1, vDSP_Stride OS.

            Starting addresses of both outputs and stride for the output vectors.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O0 and O1.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmul2(
    const float *__I0, const float *__I1, vDSP_Stride __IS,
    float *__Start,
    const float *__Step,
    float *__O0, float *__O1, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmul2D, stereo vector double-precision vramp and multiply.

    This routine:

        Puts into O0 the product of I0 and a ramp function with initial value
        *Start and slope *Step.

        Puts into O1 the product of I1 and a ramp function with initial value
        *Start and slope *Step.

    *Start is updated to continue the ramp in a consecutive call.  To continue
    the ramp smoothly, the new value of *Step includes rounding errors
    accumulated during the routine rather than being calculated directly as
    *Start + N * *Step.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O0[i*OS] = *Start * I0[i*IS];
            O1[i*OS] = *Start * I1[i*IS];
            *Start += *Step;
        }

    Input:

        const double *I0, const double *I1, vDSP_Stride IS.

            Starting addresses of both inputs and stride for the input vectors.

        double *Start.

            Starting value for the ramp.

        const double *Step.

            Value of the step for the ramp.

        double *O0, double *O1, vDSP_Stride OS.

            Starting addresses of both outputs and stride for the output vectors.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O0 and O1.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmul2D(
    const double *__I0, const double *__I1, vDSP_Stride __IS,
          double *__Start,
    const double *__Step,
          double *__O0, double *__O1, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);


/*  vDSP_vrampmuladd2, stereo vector single-precision vramp, multiply and add.

    This routine:

        Adds to O0 the product of I0 and a ramp function with initial value
        *Start and slope *Step.

        Adds to O1 the product of I1 and a ramp function with initial value
        *Start and slope *Step.

    *Start is updated to continue the ramp in a consecutive call.  To continue
    the ramp smoothly, the new value of *Step includes rounding errors
    accumulated during the routine rather than being calculated directly as
    *Start + N * *Step.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O0[i*OS] += *Start * I0[i*IS];
            O1[i*OS] += *Start * I1[i*IS];
            *Start += *Step;
        }

    Input:

        const float *I0, const float *I1, vDSP_Stride IS.

            Starting addresses of both inputs and stride for the input vectors.

        float *Start.

            Starting value for the ramp.

        const float *Step.

            Value of the step for the ramp.

        float *O0, float *O1, vDSP_Stride OS.

            Starting addresses of both outputs and stride for the output vectors.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O0 and O1.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmuladd2(
    const float *__I0, const float *__I1, vDSP_Stride __IS,
    float *__Start,
    const float *__Step,
    float *__O0, float *__O1, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmuladd2D, stereo vector double-precision vramp, multiply and add.

    This routine:

        Adds to O0 the product of I0 and a ramp function with initial value
        *Start and slope *Step.

        Adds to O1 the product of I1 and a ramp function with initial value
        *Start and slope *Step.

    *Start is updated to continue the ramp in a consecutive call.  To continue
    the ramp smoothly, the new value of *Step includes rounding errors
    accumulated during the routine rather than being calculated directly as
    *Start + N * *Step.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O0[i*OS] += *Start * I0[i*IS];
            O1[i*OS] += *Start * I1[i*IS];
            *Start += *Step;
        }

    Input:

        const double *I0, const double *I1, vDSP_Stride IS.

            Starting addresses of both inputs and stride for the input vectors.

        double *Start.

            Starting value for the ramp.

        const double *Step.

            Value of the step for the ramp.

        double *O0, double *O1, vDSP_Stride OS.

            Starting addresses of both outputs and stride for the output vectors.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O0 and O1.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmuladd2D(
    const double *__I0, const double *__I1, vDSP_Stride __IS,
    double *__Start,
    const double *__Step,
    double *__O0, double *__O1, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);


/*  vDSP_vrampmul_s1_15, vector integer 1.15 format vramp and multiply.

    This routine puts into O the product of I and a ramp function with initial
    value *Start and slope *Step.  *Start is updated to continue the ramp
    in a consecutive call.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O[i*OS] = *Start * I[i*IS];
            *Start += *Step;
        }

    The elements are fixed-point numbers, each with one sign bit and 15
    fraction bits.  Where the value of the short int is normally x, it is
    x/32768 for the purposes of this routine.

    Input:

        const short int *I, vDSP_Stride IS.

            Starting address and stride for the input vector.

        short int *Start.

            Starting value for the ramp.

        const short int *Step.

            Value of the step for the ramp.

        short int *O, vDSP_Stride OS.

            Starting address and stride for the output vector.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmul_s1_15(
    const short int *__I, vDSP_Stride __IS,
    short int *__Start,
    const short int *__Step,
    short int *__O, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmuladd_s1_15, vector integer 1.15 format vramp, multiply and add.

    This routine adds to O the product of I and a ramp function with initial
    value *Start and slope *Step.  *Start is updated to continue the ramp in a
    consecutive call.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O[i*OS] += *Start * I[i*IS];
            *Start += *Step;
        }

    The elements are fixed-point numbers, each with one sign bit and 15
    fraction bits.  Where the value of the short int is normally x, it is
    x/32768 for the purposes of this routine.

    Input:

        const short int *I, vDSP_Stride IS.

            Starting address and stride for the input vector.

        short int *Start.

            Starting value for the ramp.

        const short int *Step.

            Value of the step for the ramp.

        short int *O, vDSP_Stride OS.

            Starting address and stride for the output vector.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are added to O.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmuladd_s1_15(
    const short int *__I, vDSP_Stride __IS,
    short int *__Start,
    const short int *__Step,
    short int *__O, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmul2_s1_15, stereo vector integer 1.15 format vramp and multiply.

    This routine:

        Puts into O0 the product of I0 and a ramp function with initial value
        *Start and slope *Step.

        Puts into O1 the product of I1 and a ramp function with initial value
        *Start and slope *Step.

    *Start is updated to continue the ramp in a consecutive call.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O0[i*OS] = *Start * I0[i*IS];
            O1[i*OS] = *Start * I1[i*IS];
            *Start += *Step;
        }

    The elements are fixed-point numbers, each with one sign bit and 15
    fraction bits.  Where the value of the short int is normally x, it is
    x/32768 for the purposes of this routine.

    Input:

        const short int *I0, const short int *I1, vDSP_Stride IS.

            Starting addresses of both inputs and stride for the input vectors.

        short int *Start.

            Starting value for the ramp.

        const short int *Step.

            Value of the step for the ramp.

        short int *O0, short int *O1, vDSP_Stride OS.

            Starting addresses of both outputs and stride for the output
            vectors.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O0 and O1.

        On return, *Start contains initial *Start + N * *Step.

*/
void vDSP_vrampmul2_s1_15(
    const short int *__I0, const short int *__I1, vDSP_Stride __IS,
    short int *__Start,
    const short int *__Step,
    short int *__O0, short int *__O1, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmuladd2_s1_15, stereo vector integer 1.15 format vramp, multiply
    and add.

    This routine:

        Adds to O0 the product of I0 and a ramp function with initial value
        *Start and slope *Step.

        Adds to O1 the product of I1 and a ramp function with initial value
        *Start and slope *Step.

    *Start is updated to continue the ramp in a consecutive call.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O0[i*OS] += *Start * I0[i*IS];
            O1[i*OS] += *Start * I1[i*IS];
            *Start += *Step;
        }

    The elements are fixed-point numbers, each with one sign bit and 15
    fraction bits.  Where the value of the short int is normally x, it is
    x/32768 for the purposes of this routine.

    Input:

        const short int *I0, const short int *I1, vDSP_Stride IS.

            Starting addresses of both inputs and stride for the input vectors.

        short int *Start.

            Starting value for the ramp.

        const short int *Step.

            Value of the step for the ramp.

        short int *O0, short int *O1, vDSP_Stride OS.

            Starting addresses of both outputs and stride for the output
            vectors.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are added to O0 and O1.

        On return, *Start contains initial *Start + N * *Step.

*/
void vDSP_vrampmuladd2_s1_15(
    const short int *__I0, const short int *__I1, vDSP_Stride __IS,
    short int *__Start,
    const short int *__Step,
    short int *__O0, short int *__O1, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmul_s8_24, vector integer 8.24 format vramp and multiply.

    This routine puts into O the product of I and a ramp function with initial
    value *Start and slope *Step.  *Start is updated to continue the ramp
    in a consecutive call.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O[i*OS] = *Start * I[i*IS];
            *Start += *Step;
        }

    The elements are fixed-point numbers, each with eight integer bits
    (including sign) and 24 fraction bits.  Where the value of the int is
    normally x, it is x/16777216 for the purposes of this routine.

    Input:

        const int *I, vDSP_Stride IS.

            Starting address and stride for the input vector.

        int *Start.

            Starting value for the ramp.

        const int *Step.

            Value of the step for the ramp.

        int *O, vDSP_Stride OS.

            Starting address and stride for the output vector.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmul_s8_24(
    const int *__I, vDSP_Stride __IS,
    int *__Start,
    const int *__Step,
    int *__O, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmuladd_s8_24, vector integer 8.24 format vramp, multiply and add.

    This routine adds to O the product of I and a ramp function with initial
    value *Start and slope *Step.  *Start is updated to continue the ramp in a
    consecutive call.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O[i*OS] += *Start * I[i*IS];
            *Start += *Step;
        }

    The elements are fixed-point numbers, each with eight integer bits
    (including sign) and 24 fraction bits.  Where the value of the int is
    normally x, it is x/16777216 for the purposes of this routine.

    Input:

        const int *I, vDSP_Stride IS.

            Starting address and stride for the input vector.

        int *Start.

            Starting value for the ramp.

        const int *Step.

            Value of the step for the ramp.

        int *O, vDSP_Stride OS.

            Starting address and stride for the output vector.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are added to O.

        On return, *Start contains initial *Start + N * *Step.
*/
void vDSP_vrampmuladd_s8_24(
    const int *__I, vDSP_Stride __IS,
    int *__Start,
    const int *__Step,
    int *__O, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmul2_s8_24, stereo vector integer 8.24 format vramp and multiply.

    This routine:

        Puts into O0 the product of I0 and a ramp function with initial value
        *Start and slope *Step.

        Puts into O1 the product of I1 and a ramp function with initial value
        *Start and slope *Step.

    *Start is updated to continue the ramp in a consecutive call.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O0[i*OS] = *Start * I0[i*IS];
            O1[i*OS] = *Start * I1[i*IS];
            *Start += *Step;
        }

    The elements are fixed-point numbers, each with eight integer bits
    (including sign) and 24 fraction bits.  Where the value of the int is
    normally x, it is x/16777216 for the purposes of this routine.

    Input:

        const int *I0, const int *I1, vDSP_Stride IS.

            Starting addresses of both inputs and stride for the input vectors.

        int *Start.

            Starting value for the ramp.

        const int *Step.

            Value of the step for the ramp.

        int *O0, int *O1, vDSP_Stride OS.

            Starting addresses of both outputs and stride for the output
            vectors.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O0 and O1.

        On return, *Start contains initial *Start + N * *Step.

*/
void vDSP_vrampmul2_s8_24(
    const int *__I0, const int *__I1, vDSP_Stride __IS,
    int *__Start,
    const int *__Step,
    int *__O0, int *__O1, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  vDSP_vrampmuladd2_s8_24, stereo vector integer 8.24 format vramp, multiply
    and add.

    This routine:

        Adds to O0 the product of I0 and a ramp function with initial value
        *Start and slope *Step.

        Adds to O1 the product of I1 and a ramp function with initial value
        *Start and slope *Step.

    *Start is updated to continue the ramp in a consecutive call.

    This routine calculates:

        for (i = 0; i < N; ++i)
        {
            O0[i*OS] += *Start * I0[i*IS];
            O1[i*OS] += *Start * I1[i*IS];
            *Start += *Step;
        }

    The elements are fixed-point numbers, each with eight integer bits
    (including sign) and 24 fraction bits.  Where the value of the int is
    normally x, it is x/16777216 for the purposes of this routine.

    Input:

        const int *I0, const int *I1, vDSP_Stride IS.

            Starting addresses of both inputs and stride for the input vectors.

        int *Start.

            Starting value for the ramp.

        const int *Step.

            Value of the step for the ramp.

        int *O0, int *O1, vDSP_Stride OS.

            Starting addresses of both outputs and stride for the output
            vectors.

        vDSP_Length Length.

            Number of elements in each vector.

    Output:

        The results are written to O0 and O1.

        On return, *Start contains initial *Start + N * *Step.

*/
void vDSP_vrampmuladd2_s8_24(
    const int *__I0, const int *__I1, vDSP_Stride __IS,
    int *__Start,
    const int *__Step,
    int *__O0, int *__O1, vDSP_Stride __OS,
    vDSP_Length __N)
        __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_4_0);


/*  When compiling for i386 on OS X 10.11 or later, the old vDSP routine names
    are deprecated.
*/
#if defined vDSP_DeprecateTranslations

extern FFTSetup create_fftsetup(
    vDSP_Length __Log2n,
    FFTRadix    __Radix)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void destroy_fftsetup(FFTSetup __setup)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void ctoz(
    const DSPComplex      *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__Z,
    vDSP_Stride            __IZ,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void ztoc(
    const DSPSplitComplex *__Z,
    vDSP_Stride            __IZ,
    DSPComplex            *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zipt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zopt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zrip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zript(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zrop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zropt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zipt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC1,
    vDSP_Stride            __IC0,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA0,
    vDSP_Stride            __IA1,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zopt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA0,
    vDSP_Stride            __IA1,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zrip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zript(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zrop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA0,
    vDSP_Stride            __IA1,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zropt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA0,
    vDSP_Stride            __IA1,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC0,
    vDSP_Stride            __IC1,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N0,
    vDSP_Length            __Log2N1,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft3_zop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_9_0);
extern void fft5_zop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __Log2N,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_9_0);
extern void fftm_zop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    vDSP_Stride            __IMA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IMC,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zopt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    vDSP_Stride            __IMA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IMC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IM,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zipt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IM,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zrop(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    vDSP_Stride            __IMA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IMC,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zropt(
    FFTSetup               __Setup,
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    vDSP_Stride            __IMA,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IMC,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zrip(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IM,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zript(
    FFTSetup               __Setup,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Stride            __IM,
    const DSPSplitComplex *__Buffer,
    vDSP_Length            __Log2N,
    vDSP_Length            __M,
    FFTDirection           __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void f3x3(
    const float *__A,
    vDSP_Length  __NR,
    vDSP_Length  __NC,
    const float *__F,
    float       *__C)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void f5x5(
    const float *__A,
    vDSP_Length  __NR,
    vDSP_Length  __NC,
    const float *__F,
    float       *__C)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void conv(
    const float *__A,  // Input signal.
    vDSP_Stride  __IA,
    const float *__F,  // Filter.
    vDSP_Stride  __IF,
    float       *__C,  // Output signal.
    vDSP_Stride  __IC,
    vDSP_Length  __N,  // Output length.
    vDSP_Length  __P)  // Filter length.
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void dotpr(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Length  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void imgfir(
    const float *__A,  // Input.
    vDSP_Length  __NR, // Number of image rows.
    vDSP_Length  __NC, // Number of image columns.
    const float *__F,  // Filter.
    float       *__C,  // Output.
    vDSP_Length  __P,  // Number of filter rows.
    vDSP_Length  __Q)  // Number of filter columns.
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void mtrans(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __M,
    vDSP_Length  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void mmul(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __M,
    vDSP_Length  __N,
    vDSP_Length  __P)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vadd(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vsub(
    const float *__B,  // Caution:  A and B are swapped!
    vDSP_Stride  __IB,
    const float *__A,  // Caution:  A and B are swapped!
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vmul(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vsmul(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vam(
    const float *__A,
    vDSP_Stride  __IA,
    const float *__B,
    vDSP_Stride  __IB,
    const float *__C,
    vDSP_Stride  __IC,
    float       *__D,
    vDSP_Stride  __ID,
    vDSP_Length  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vsq(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vssq(
    const float *__A,
    vDSP_Stride  __IA,
    float       *__C,
    vDSP_Stride  __IC,
    vDSP_Length  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zvadd(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zvsub(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zdotpr(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zconv(
    const DSPSplitComplex *__A,  // Input signal.
    vDSP_Stride            __IA,
    const DSPSplitComplex *__F,  // Filter.
    vDSP_Stride            __IF,
    const DSPSplitComplex *__C,  // Output signal.
    vDSP_Stride            __IC,
    vDSP_Length            __N,  // Output length.
    vDSP_Length            __P)  // Filter length.
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zvcma(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zvmul(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N,
    int                    __Conjugate)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zidotpr(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zmma(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    vDSP_Length            __M,
    vDSP_Length            __N,
    vDSP_Length            __P)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zmms(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    vDSP_Length            __M,
    vDSP_Length            __N,
    vDSP_Length            __P)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zmsm(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    const DSPSplitComplex *__D,
    vDSP_Stride            __ID,
    vDSP_Length            __M,
    vDSP_Length            __N,
    vDSP_Length            __P)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zmmul(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const DSPSplitComplex *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __M,
    vDSP_Length            __N,
    vDSP_Length            __P)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zrvadd(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const float           *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zrvmul(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const float           *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zrvsub(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const float           *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Stride            __IC,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zrdotpr(
    const DSPSplitComplex *__A,
    vDSP_Stride            __IA,
    const float           *__B,
    vDSP_Stride            __IB,
    const DSPSplitComplex *__C,
    vDSP_Length            __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zipD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_ziptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zopD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zoptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zripD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zriptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zropD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft_zroptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zipD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_ziptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zopD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA0,
    vDSP_Stride                  __IA1,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zoptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA0,
    vDSP_Stride                  __IA1,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zripD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __flag)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zriptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __flag)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zropD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA0,
    vDSP_Stride                  __IA1,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft2d_zroptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA0,
    vDSP_Stride                  __IA1,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC0,
    vDSP_Stride                  __IC1,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N0,
    vDSP_Length                  __Log2N1,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zipD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IM,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_ziptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IM,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zopD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    vDSP_Stride                  __IMA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IMC,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zoptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    vDSP_Stride                  __IMA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IMC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zripD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IM,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zriptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IM,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zropD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    vDSP_Stride                  __IMA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IMC,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fftm_zroptD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    vDSP_Stride                  __IMA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Stride                  __IMC,
    const DSPDoubleSplitComplex *__Buffer,
    vDSP_Length                  __Log2N,
    vDSP_Length                  __M,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void fft3_zopD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_9_0);
extern void fft5_zopD(
    FFTSetupD                    __Setup,
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __Log2N,
    FFTDirection                 __Direction)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_9_0);
extern void ctozD(
    const DSPDoubleComplex      *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__Z,
    vDSP_Stride                  __IZ,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void ztocD(
    const DSPDoubleSplitComplex *__Z,
    vDSP_Stride                  __IZ,
    DSPDoubleComplex            *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vsmulD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern FFTSetupD create_fftsetupD(
    vDSP_Length __Log2n,
    FFTRadix    __Radix)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void destroy_fftsetupD(FFTSetupD __setup)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void f3x3D(
    const double *__A,
    vDSP_Length   __NR,
    vDSP_Length   __NC,
    const double *__F,
    double       *__C)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void f5x5D(
    const double *__A,
    vDSP_Length   __NR,
    vDSP_Length   __NC,
    const double *__F,
    double       *__C)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void convD(
    const double *__A, // Input signal.
    vDSP_Stride   __IA,
    const double *__F, // Filter
    vDSP_Stride   __IF,
    double       *__C, // Output signal.
    vDSP_Stride   __IC,
    vDSP_Length   __N, // Output length.
    vDSP_Length   __P) // Filter length.
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void dotprD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Length   __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void imgfirD(
    const double *__A,  // Input.
    vDSP_Length   __NR, // Number of image rows.
    vDSP_Length   __NC, // Number of image columns.
    const double *__F,  // Filter.
    double       *__C,  // Output.
    vDSP_Length   __P,  // Number of filter rows.
    vDSP_Length   __Q)  // Number of filter columns.
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void mtransD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __M,
    vDSP_Length   __N)
            __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void mmulD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __M,
    vDSP_Length   __N,
    vDSP_Length   __P)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vaddD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vsubD(
    const double *__B, // Caution:  A and B are swapped!
    vDSP_Stride   __IB,
    const double *__A, // Caution:  A and B are swapped!
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vmulD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vamD(
    const double *__A,
    vDSP_Stride   __IA,
    const double *__B,
    vDSP_Stride   __IB,
    const double *__C,
    vDSP_Stride   __IC,
    double       *__D,
    vDSP_Stride   __IDD,
    vDSP_Length   __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vsqD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void vssqD(
    const double *__A,
    vDSP_Stride   __IA,
    double       *__C,
    vDSP_Stride   __IC,
    vDSP_Length   __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zvaddD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zvsubD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zdotprD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zconvD(
    const DSPDoubleSplitComplex *__A,    // Input signal.
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__F,    // Filter.
    vDSP_Stride                  __IF,
    const DSPDoubleSplitComplex *__C,    // Output signal.
    vDSP_Stride                  __IC,
    vDSP_Length                  __N,    // Output length.
    vDSP_Length                  __P)    // Filter length.
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zvcmaD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zvmulD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N,
    int                          __Conjugate)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zidotprD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zmmaD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    vDSP_Length                  __M,
    vDSP_Length                  __N,
    vDSP_Length                  __P)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zmmsD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    vDSP_Length                  __M,
    vDSP_Length                  __N,
    vDSP_Length                  __P)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zmsmD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    const DSPDoubleSplitComplex *__D,
    vDSP_Stride                  __ID,
    vDSP_Length                  __M,
    vDSP_Length                  __N,
    vDSP_Length                  __P)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zmmulD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const DSPDoubleSplitComplex *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __M,
    vDSP_Length                  __N,
    vDSP_Length                  __P)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zrvaddD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const double                *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zrvmulD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const double                *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zrvsubD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const double                *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Stride                  __IC,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);
extern void zrdotprD(
    const DSPDoubleSplitComplex *__A,
    vDSP_Stride                  __IA,
    const double                *__B,
    vDSP_Stride                  __IB,
    const DSPDoubleSplitComplex *__C,
    vDSP_Length                  __N)
        __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_4_0, __IPHONE_NA);

#endif  //  #if defined vDSP_DeprecateTranslations


#ifndef USE_NON_APPLE_STANDARD_DATATYPES
#define USE_NON_APPLE_STANDARD_DATATYPES 1
#endif  /* !defined(USE_NON_APPLE_STANDARD_DATATYPES) */

#if USE_NON_APPLE_STANDARD_DATATYPES
enum {
    FFT_FORWARD = kFFTDirection_Forward,
    FFT_INVERSE = kFFTDirection_Inverse
};

enum {
    FFT_RADIX2  = kFFTRadix2,
    FFT_RADIX3  = kFFTRadix3,
    FFT_RADIX5  = kFFTRadix5
};

typedef DSPComplex                      COMPLEX;
typedef DSPSplitComplex                 COMPLEX_SPLIT;
typedef DSPDoubleComplex                DOUBLE_COMPLEX;
typedef DSPDoubleSplitComplex           DOUBLE_COMPLEX_SPLIT;
#endif  /* USE_NON_APPLE_STANDARD_DATATYPES */


#pragma options align=reset


#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull end")
#endif


#ifdef __cplusplus
}
#endif


#endif // __VDSP__
                                                                                                                                                                          vDSP_translate.h                                                                                    0100644 0001750 0001750 00000011202 12567451167 044230  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/Headers                           /*
     File:       vecLib/vDSP_translate.h
 
     Contains:   Master include for vecLib framework
 
     Version:    vecLib-563.3
 
     Copyright:  Copyright (c) 2000-2015 by Apple Inc. All rights reserved.
 
     Bugs:       For bug reports, consult the following page on
                 the World Wide Web:
 
                     http://developer.apple.com/bugreporter/
 
*/
#ifndef __VDSP_TRANSLATE__
#define __VDSP_TRANSLATE__



#include <Availability.h>

#if PRAGMA_ONCE
#pragma once
#endif

#if defined __MAC_OS_X_VERSION_MIN_REQUIRED && __MAC_OS_X_VERSION_MIN_REQUIRED < __MAC_10_11

/*	When compiling for an OS X target earlier than 10.11, the legacy translates
	are defined.
*/
#define vDSP_create_fftsetup create_fftsetup
#define vDSP_destroy_fftsetup destroy_fftsetup
#define vDSP_ctoz ctoz
#define vDSP_ztoc ztoc
#define vDSP_fft_zip fft_zip
#define vDSP_fft_zipt fft_zipt
#define vDSP_fft_zop fft_zop
#define vDSP_fft_zopt fft_zopt
#define vDSP_fft_zrip fft_zrip
#define vDSP_fft_zript fft_zript
#define vDSP_fft_zrop fft_zrop
#define vDSP_fft_zropt fft_zropt
#define vDSP_fft2d_zip fft2d_zip
#define vDSP_fft2d_zipt fft2d_zipt
#define vDSP_fft2d_zop fft2d_zop
#define vDSP_fft2d_zopt fft2d_zopt
#define vDSP_fft2d_zrip fft2d_zrip
#define vDSP_fft2d_zript fft2d_zript
#define vDSP_fft2d_zrop fft2d_zrop
#define vDSP_fft2d_zropt fft2d_zropt
#define vDSP_fft3_zop fft3_zop
#define vDSP_fft5_zop fft5_zop
#define vDSP_fft_cip fft_cip
#define vDSP_fft_cipt fft_cipt
#define vDSP_fft_cop fft_cop
#define vDSP_fft_copt fft_copt
#define vDSP_fftm_zop fftm_zop
#define vDSP_fftm_zopt fftm_zopt
#define vDSP_fftm_zip fftm_zip
#define vDSP_fftm_zipt fftm_zipt
#define vDSP_fftm_zrop fftm_zrop
#define vDSP_fftm_zropt fftm_zropt
#define vDSP_fftm_zrip fftm_zrip
#define vDSP_fftm_zript fftm_zript
#define vDSP_f3x3 f3x3
#define vDSP_f5x5 f5x5
#define vDSP_conv conv
#define vDSP_dotpr dotpr
#define vDSP_imgfir imgfir
#define vDSP_mtrans mtrans
#define vDSP_mmul mmul
#define vDSP_vadd vadd
#define vDSP_vsub vsub
#define vDSP_vmul vmul
#define vDSP_vsmul vsmul
#define vDSP_vam vam
#define vDSP_vsq vsq
#define vDSP_vssq vssq
#define vDSP_zvadd zvadd
#define vDSP_zvsub zvsub
#define vDSP_zdotpr zdotpr
#define vDSP_zconv zconv
#define vDSP_zvcma zvcma
#define vDSP_zvmul zvmul
#define vDSP_zidotpr zidotpr
#define vDSP_zmma zmma
#define vDSP_zmms zmms
#define vDSP_zmsm zmsm
#define vDSP_zmmul zmmul
#define vDSP_zrvadd zrvadd
#define vDSP_zrvmul zrvmul
#define vDSP_zrvsub zrvsub
#define vDSP_zrdotpr zrdotpr
#define vDSP_fft_zipD fft_zipD
#define vDSP_fft_ziptD fft_ziptD
#define vDSP_fft_zopD fft_zopD
#define vDSP_fft_zoptD fft_zoptD
#define vDSP_fft_zripD fft_zripD
#define vDSP_fft_zriptD fft_zriptD
#define vDSP_fft_zropD fft_zropD
#define vDSP_fft_zroptD fft_zroptD
#define vDSP_fft2d_zipD fft2d_zipD
#define vDSP_fft2d_ziptD fft2d_ziptD
#define vDSP_fft2d_zopD fft2d_zopD
#define vDSP_fft2d_zoptD fft2d_zoptD
#define vDSP_fft2d_zripD fft2d_zripD
#define vDSP_fft2d_zriptD fft2d_zriptD
#define vDSP_fft2d_zropD fft2d_zropD
#define vDSP_fft2d_zroptD fft2d_zroptD
#define vDSP_fftm_zipD fftm_zipD
#define vDSP_fftm_ziptD fftm_ziptD
#define vDSP_fftm_zopD fftm_zopD
#define vDSP_fftm_zoptD fftm_zoptD
#define vDSP_fftm_zripD fftm_zripD
#define vDSP_fftm_zriptD fftm_zriptD
#define vDSP_fftm_zropD fftm_zropD
#define vDSP_fftm_zroptD fftm_zroptD
#define vDSP_fft3_zopD fft3_zopD
#define vDSP_fft5_zopD fft5_zopD
#define vDSP_ctozD ctozD
#define vDSP_ztocD ztocD
#define vDSP_vsmulD vsmulD
#define vDSP_create_fftsetupD create_fftsetupD
#define vDSP_destroy_fftsetupD destroy_fftsetupD
#define vDSP_f3x3D f3x3D
#define vDSP_f5x5D f5x5D
#define vDSP_convD convD
#define vDSP_dotprD dotprD
#define vDSP_imgfirD imgfirD
#define vDSP_mtransD mtransD
#define vDSP_mmulD mmulD
#define vDSP_vaddD vaddD
#define vDSP_vsubD vsubD
#define vDSP_vmulD vmulD
#define vDSP_vamD vamD
#define vDSP_vsqD vsqD
#define vDSP_vssqD vssqD
#define vDSP_zvaddD zvaddD
#define vDSP_zvsubD zvsubD
#define vDSP_zdotprD zdotprD
#define vDSP_zconvD zconvD
#define vDSP_zvcmaD zvcmaD
#define vDSP_zvmulD zvmulD
#define vDSP_zidotprD zidotprD
#define vDSP_zmmaD zmmaD
#define vDSP_zmmsD zmmsD
#define vDSP_zmsmD zmsmD
#define vDSP_zmmulD zmmulD
#define vDSP_zrvaddD zrvaddD
#define vDSP_zrvmulD zrvmulD
#define vDSP_zrvsubD zrvsubD
#define vDSP_zrdotprD zrdotprD

#else	//	#if __MAC_OS_X_VERSION_MIN_REQUIRED < __MAC_10_11

/*	When compiling for OS X 10.11 or later, the legacy translates are not
	defined, and the old names are marked deprecated.  To do this, we define
	a symbol telling vDSP.h to make such declarations.
*/
#define	vDSP_DeprecateTranslations


#endif	//	#if __MAC_OS_X_VERSION_MIN_REQUIRED < __MAC_10_11


#endif /* __VDSP_TRANSLATE__ */

                                                                                                                                                                                                                                                                                                                                                                                              vForce.h                                                                                            0100644 0001750 0001750 00000057156 12567451167 042605  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/Headers                           /*
vForce.h (from vecLib-563.3)
Copyright (c) 1999-2015 by Apple Inc. All rights reserved.

@APPLE_LICENSE_HEADER_START@

This file contains Original Code and/or Modifications of Original Code
as defined in and that are subject to the Apple Public Source License
Version 2.0 (the 'License'). You may not use this file except in
compliance with the License. Please obtain a copy of the License at
http://www.opensource.apple.com/apsl/ and read it before using this
file.

The Original Code and all software distributed under the License are
distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, QUIET ENJOYMENT OR NON-INFRINGEMENT.
Please see the License for the specific language governing rights and
limitations under the License.

@APPLE_LICENSE_HEADER_END@
*/

#ifndef __VFORCE_H
#define __VFORCE_H

#ifdef __cplusplus
	#include <ciso646>	// Get library version.
	#if	defined _LIBCPP_VERSION
		// When using libc++, include <complex>.
		#include <complex>
	#else
		// When not using libc++, try using definition as given in C++ 98.
		namespace std
		{
			template<class T> class complex;
			template<> class complex<float>;
			template<> class complex<double>;
		}
	#endif
	typedef std::complex<float> __float_complex_t;
	typedef std::complex<double> __double_complex_t;
#else
	typedef _Complex float __float_complex_t;
	typedef _Complex double __double_complex_t;
#endif

#include <math.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <Availability.h>


#if !defined __has_feature
    #define __has_feature(f)    0
#endif
#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull begin")
#else
    #define __nullable
    #define __nonnull
#endif



/* Set y[i] to the reciprocal of x[i], for i=0,..,n-1 */
void vvrecf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 
void vvrec (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 

/* Set z[i] to y[i]/x[i], for i=0,..,n-1 */
void vvdivf (float * /* z */, const float * /* y */, const float * /* x */, const int *  /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 
void vvdiv (double * /* z */, const double * /* y */, const double * /* x */, const int *  /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 

/* Set y[i] to the square root of x[i], for i=0,..,n-1 */
void vvsqrtf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 
void vvsqrt (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 

/* Set y[i] to the cube root of x[i], for i=0,..,n-1 */
void vvcbrtf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
void vvcbrt (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_8_0);
    
/* Set y[i] to the reciprocal of the square root of x[i], for i=0,..,n-1 */
void vvrsqrtf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 
void vvrsqrt (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 

/* Set y[i] to the exponential function of x[i], for i=0,..,n-1 */
void vvexpf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 
void vvexp (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 

/* Set y[i] to the base-e exponential of x , minus 1 accurately even
   for very small values of x[i], for i=0,..,n-1 */
void vvexpm1f (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_5_0); 
/*
 vvexpm1
 
 This routine computes the base-e exponential of the double precision
 floating point numbers in the input array, minus 1 and store the double
 precision results to the output array. Results are accurate even for very
 small input values.
 
 Parameters:
 
 x: Input array filled with double precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvexpm1 (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 
	
/* Set y[i] to the natural logarithm of x[i], for i=0,..,n-1 */
void vvlogf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 
void vvlog (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 

/* Set y[i] to the base 10 logarithm of x[i], for i=0,..,n-1 */
void vvlog10f (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 
void vvlog10 (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 

/* Set y[i] to the value of log(1+x[i]) accurately even for very small
   values of x[i], for i=0,..,n-1 */
void vvlog1pf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_5_0); 
/*
 vvlog1p
 
 Given double-precision arrray x[] and y[] with *n element each,
 this routine sets y[i] to the value of log(1+x[i]) for each i
 in 0 <= i < *n accurately even for very small values of x[i].
 
 Parameters:
 
 x: Input array filled with double precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvlog1p (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0);
	
/* Set y[i] to the the exponent of x[i], represented as a floating-
     point number, for i=0,..,n-1 */
void vvlogbf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_5_0); 
/*
 vvlogb
 
 Given double-precision arrray x[] and y[] with *n element each,
 this routine sets y[i] to the exponent of x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with double precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvlogb (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0);
	
/*
 vvfabf
 
 Given single-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the absolute value of x[i] for each i in
 0 <= i < *n.
 
 This function is deprecated in Mac OS X 10.7 and later to keep function name
 consistent with Libm. Use vvfabsf instead.
 
 Parameters:
 
 x: Input array filled with single precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvfabf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_7, __IPHONE_NA, __IPHONE_NA);
/*
 vvfabsf
 
 Given single-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the absolute value of x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with single precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvfabsf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 
/*
 vvfabs
 
 Given double-precision arrray x[] and y[] with *n element each,
 this routine sets y[i] to the absolute value of x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with double precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvfabs (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0);
	
/* Set z[i] to x[i] ** y[i], for i=0,..,n-1 */
void vvpowf (float * /* z */, const float * /* y */, const float * /* x */, const int *  /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 
void vvpow (double * /* z */, const double * /* y */, const double * /* x */, const int *  /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0); 

/* Set z[i] to pow(x[i],y) for i=0,..,n-1 */
void vvpowsf (float * /* z */, const float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
void vvpows (double * /* z */, const double * /* y */, const double * /* x */, const int * /* n */)__OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);

/* Set y[i] to the sine of x[i], for i=0,..,n-1 */
void vvsinf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvsin (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the cosine of x[i], for i=0,..,n-1 */
void vvcosf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvcos (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the tangent of x[i], for i=0,..,n-1 */
void vvtanf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvtan (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the arcsine of x[i], for i=0,..,n-1 */
void vvasinf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvasin (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the arccosine of x[i], for i=0,..,n-1 */
void vvacosf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvacos (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the arctangent of x[i], for i=0,..,n-1 */
void vvatanf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvatan (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set z[i] to the arctangent of y[i]/x[i], for i=0,..,n-1 */
void vvatan2f (float * /* z */, const float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvatan2 (double * /* z */, const double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set z[i] to the sine of x[i] and y[i] to the cosine of x[i], for i=0,..,n-1 */
void vvsincosf (float * /* z */, float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvsincos (double * /* z */, double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set the real part of C[i] to the cosine of x[i] and the imaginary part of C[i] to the 
   sine of x[i], for i=0,..,n-1 */
void vvcosisinf (__float_complex_t * /* C */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvcosisin (__double_complex_t * /* C */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the hyperbolic sine of x[i], for i=0,..,n-1 */
void vvsinhf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvsinh (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the hyperbolic cosine of x[i], for i=0,..,n-1 */
void vvcoshf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvcosh (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the hyperbolic tangent of x[i], for i=0,..,n-1 */
void vvtanhf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvtanh (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the inverse hyperbolic sine of x[i], for i=0,..,n-1 */
void vvasinhf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvasinh (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the inverse hyperbolic  cosine of x[i], for i=0,..,n-1 */
void vvacoshf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvacosh (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the inverse hyperbolic  tangent of x[i], for i=0,..,n-1 */
void vvatanhf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvatanh (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the integer truncation of x[i], for i=0,..,n-1 */
void vvintf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvint (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the nearest integer to x[i], for i=0,..,n-1 */
void vvnintf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvnint (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the ceiling of x[i], for i=0,..,n-1 */
void vvceilf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvceil (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set y[i] to the floor of x[i], for i=0,..,n-1 */
void vvfloorf (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);
void vvfloor (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_5_0);

/* Set z[i] to the floating-point remainder of y[i]/x[i], for
   i=0,..,n-1 */
void vvfmodf (float * /* z */, const float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_5_0);
/*
 vvfmod
 
 Given double-precision array x[], y[], and z[] with *n element each,
 this routine sets z[i] to the remainder of y[i] when divided by x[i]
 for each i in 0 <= i < *n.
 
 Specifically, the function returns the value y-k*x, for some integer k
 such that, if x is non-zero, the result has the same sign as y and
 magnitude less than the magnitude of x.
 
 Parameters:
 
 z: Output array, same size as input array
 y: Numerator array filled with double precision floating point numbers
 x: Denominator array filled with double precision floating point numbers
 n: number of floating point elements specified by *n
 
 */
void vvfmod (double * /* z */, const double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0);
	
/* Set z[i] to the value r such that r = y[i] - N*x[i], where N is the
     integer nearest the exact value of y[i]/x[i].  If there are two
     integers closest to y[i]/x[i], N shall be the even one. If r is
     zero, it is given the same sign as y[i], for i=0,..,n-1 */
void vvremainderf (float * /* z */, const float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_5_0);
/*
 vvremainder
 
 Given double-precision array x[], y[], and z[] with *n element each,
 this routine sets z[i] to the value r such that r = y[i] - N*x[i], where N
 is the integer nearest the exact value of y[i] divided by x[i], for each
 i in 0 <= i < *n.  If there are two integers closest to y[i]/x[i],
 N shall be the even one. If r is zero, it is given the same sign as y[i].
 
 Parameters:
 
 z: Output array, same size as input array
 y: Numerator array filled with double precision floating point numbers
 x: Denominator array filled with double precision floating point numbers
 n: number of floating point elements specified by *n
 
 */
void vvremainder (double * /* z */, const double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0);
	
/* Set z[i] to y[i] with its sign changed to x[i]'s, for i=0,..,n-1 */
void vvcopysignf (float * /* z */, const float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_5_0);
/*
 vvcopysign
 
 Given double-precision array x[], y[], and z[] with *n element each,
 this routine sets z[i] to y[i] with its sign changed to x[i]'s sign
 for each i in 0 <= i < *n.
 
 Parameters:
 
 z: Output array, same size as input array
 y: Magnitude array filled with double precision floating point numbers
 x: Sign array filled with double precision floating point numbers
 n: number of floating point elements specified by *n
 
 */
void vvcopysign (double * /* z */, const double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0);
	
/* Set z[i] to the next machine representable number from y[i] in
     direction x[i], for i=0,..,n-1 */
void vvnextafterf (float * /* z */, const float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_5_0);
/*
 vvnextafter
 
 Given double-precision array x[], y[], and z[] with *n element each,
 this routine sets z[i] to the next machine representable number from y[i]
 in the direction toward x[i] for each i in 0 <= i < *n.
 
 Parameters:
 
 z: Output array, same size as input array
 y: Current value array filled with double precision floating point numbers
 x: Direction array filled with double precision floating point numbers
 n: number of floating point elements specified by *n
 
 */
void vvnextafter (double * /* z */, const double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0);
	
/*
 vvlog2f
 
 Given single-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the base 2 logarithm of x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with single precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvlog2f (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 
/*
 vvlog2
 
 Given double-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the base 2 logarithm of x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with double precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvlog2 (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 

/*
 vvexp2f
 
 Given single-precision array x[] and y[] with *n element each,
 This routine sets y[i] to the base 2 exponential function of x[i],
 ie. y[i]=2^x[i], for each i in 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with single precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvexp2f (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 
/*
 vvexp2
 
 Given double-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the base 2 exponential function of x[i],
 ie. y[i]=2^x[i], for each i in 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with double precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvexp2 (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 

/*
 vvsinpif
 
 Given single-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the sine of pi * x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with single precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvsinpif (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 
/*
 vvsinpi
 
 Given double-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the sine of pi * x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with double precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvsinpi (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 

/*
 vvcospif
 
 Given single-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the cosine of pi * x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with single precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvcospif (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 
/*
 vvcospi
 
 Given double-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the cosine of pi * x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with double precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvcospi (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 

/*
 vvtanpif
 
 Given single-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the tangent of pi * x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with single precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvtanpif (float * /* y */, const float * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 
/*
 vvtanpi
 
 Given double-precision array x[] and y[] with *n element each,
 this routine sets y[i] to the tangent of pi * x[i] for each i in
 0 <= i < *n.
 
 Parameters:
 
 x: Input array filled with double precision floating point numbers
 y: Output array, same size as input array
 n: number of floating point elements specified by *n
 
 */
void vvtanpi (double * /* y */, const double * /* x */, const int * /* n */) __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_5_0); 

#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull end")
#endif
	
#ifdef __cplusplus
}
#endif
#endif /* __VFORCE_H */
                                                                                                                                                                                                                                                                                                                                                                                                                  vecLib.h                                                                                            0100644 0001750 0001750 00000002302 12567451167 042544  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/Headers                           /*
     File:       vecLib/vecLib.h
 
     Contains:   Master include for vecLib framework
 
     Version:    vecLib-563.3
 
     Copyright:  Copyright (c) 2000-2015 by Apple Inc. All rights reserved.
 
     Bugs:       For bug reports, consult the following page on
                 the World Wide Web:
 
                     http://developer.apple.com/bugreporter/
 
*/
#ifndef __VECLIB__
#define __VECLIB__


#ifndef __VECLIBTYPES__
#include <vecLib/vecLibTypes.h>
#endif

#ifndef __VBASICOPS__
#include <vecLib/vBasicOps.h>
#endif

#ifndef __VBIGNUM__
#include <vecLib/vBigNum.h>
#endif

#ifndef __VECTOROPS__
#include <vecLib/vectorOps.h>
#endif

#ifndef __VFP__
#include <vecLib/vfp.h>
#endif

#ifndef __VDSP__
#include <vecLib/vDSP.h>
#endif

#if defined __ppc__ || defined __i386__
#ifndef __VDSP_TRANSLATE__
#include <vecLib/vDSP_translate.h>
#endif
#endif

#ifndef CBLAS_H	
#include <vecLib/cblas.h>
#endif

#ifndef __CLAPACK_H
#include <vecLib/clapack.h>
#endif

#ifndef __LINEAR_ALGEBRA_PUBLIC_HEADER__
#include <vecLib/LinearAlgebra/LinearAlgebra.h>
#endif

#ifndef __SPARSE_HEADER__
#include <vecLib/Sparse/Sparse.h>
#endif

#ifndef __VFORCE_H
#include <vecLib/vForce.h>
#endif


#endif /* __VECLIB__ */
                                                                                                                                                                                                                                                                                                                              vecLibTypes.h                                                                                       0100644 0001750 0001750 00000021244 12567451167 043577  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/Headers                           /*
     File:       vecLib/vecLibTypes.h
 
     Contains:   Master include for vecLib framework
 
     Version:    vecLib-563.3
 
     Copyright:  Copyright (c) 2000-2015 by Apple Inc. All rights reserved.
 
     Bugs:       For bug reports, consult the following page on
                 the World Wide Web:
 
                     http://developer.apple.com/bugreporter/
 
*/
#ifndef __VECLIBTYPES__
#define __VECLIBTYPES__


#include <Availability.h>

#if PRAGMA_ONCE
#pragma once
#endif


#pragma options align=power

#if defined(__ppc__) || defined(__ppc64__)


/*
    The goal of the following preprocessor statements is to define the
    preprocessor symbol _AltiVecPIMLanguageExtensionsAreEnabled if and only if
    the AltiVec high-level language programming interface is enabled.  We
    designed the statements to accommodate some non-Apple compilers but cannot
    assure behavior with non-Apple products.

    Apple GCC version 3.3 and earlier versions defined the preprocessor symbol
    __VEC__ if and only if the AltiVec programming interface were enabled.
    Later versions define __VEC__ when the AltiVec instruction set is enabled
    (and thus available for the compiler's assembly code generation) even if
    the programming interface is not enabled (and thus not available at the
    source code level).  This occurs, for example, when -maltivec is specified
    but neither -faltivec is specified nor <altivec.h> is included.

    Due to this change, code that formerly used __VEC__ to select source code
    with or without use of the AltiVec programming interface should now use
    _AltiVecPIMLanguageExtensionsAreEnabled.

    For more information about the interface, see AltiVec Technology
    Programming Interface Manual (ALTIVECPIM/D 6/1999 Rev. 0, published by
    Motorola Inc. [now Freescale, Inc.]).
 */

#if			defined _ALTIVEC_H \
		||	(defined __APPLE_CC__ && __APPLE_ALTIVEC__) \
		|| 	(!defined __GNUC__ && defined __VEC__)
	#define _AltiVecPIMLanguageExtensionsAreEnabled
#endif

#if defined _AltiVecPIMLanguageExtensionsAreEnabled
	typedef __vector unsigned char            vUInt8;
	typedef __vector signed char              vSInt8;
	typedef __vector unsigned short           vUInt16;
	typedef __vector signed short             vSInt16;
	typedef __vector unsigned int             vUInt32;
	typedef __vector signed int               vSInt32;
	typedef __vector float                    vFloat;
	typedef __vector bool int                 vBool32;

    /* 
     * GCC allows us to create a vDouble type, even on AltiVec which has no double precision vector 
     * instructions (apart from boolean operations which are type agnostic). You can use standard 
     * operators: +-* etc. with the vDouble type. GCC will use scalar code on PowerPC to do the work. 
     * The type is provided for developers interested in writing shared Intel-PowerPC code. 
     */
    #if defined(__GNUC__) && ! defined( __XLC__ )
        #if defined(__GNUC_MINOR__) && (((__GNUC__ == 3) && (__GNUC_MINOR__ <= 3)) || (__GNUC__ < 3))
        #else
            #define __VECLIBTYPES_VDOUBLE__ 1
            typedef double vDouble         __attribute__ ((__vector_size__ (16)));
        #endif
    #endif

#endif	/* defined _AltiVecPIMLanguageExtensionsAreEnabled */

#elif defined(__i386__) || defined(__x86_64__)
#ifdef __SSE__
#if defined(__GNUC__)
#include <xmmintrin.h>
typedef float                   vFloat          __attribute__ ((__vector_size__ (16)));
#else /* not __GNUC__ */
#include <xmmintrin.h>
typedef __m128                          vFloat;
#endif /* __GNUC__ */
#endif  /* defined(__SSE__) */

#ifdef __SSE2__
    #define __VECLIBTYPES_VDOUBLE__ 1
    
    #if defined(__GNUC__)
        #if defined(__GNUC_MINOR__) && (((__GNUC__ == 3) && (__GNUC_MINOR__ <= 3)) || (__GNUC__ < 3))
            #include <xmmintrin.h>
            typedef __m128i vUInt8;
            typedef __m128i vSInt8;
            typedef __m128i vUInt16;
            typedef __m128i vSInt16;
            typedef __m128i vUInt32;
            typedef __m128i vSInt32;
            typedef __m128i vBool32;
            typedef __m128i vUInt64;
            typedef __m128i vSInt64;
            typedef __m128d vDouble;
        #else /* gcc-3.5 or later */
            #include <emmintrin.h>
            typedef unsigned char           vUInt8          __attribute__ ((__vector_size__ (16)));
            typedef char                    vSInt8          __attribute__ ((__vector_size__ (16)));
            typedef unsigned short          vUInt16         __attribute__ ((__vector_size__ (16)));
            typedef short                   vSInt16         __attribute__ ((__vector_size__ (16)));
            typedef unsigned int            vUInt32         __attribute__ ((__vector_size__ (16)));
            typedef int                     vSInt32         __attribute__ ((__vector_size__ (16)));
            typedef unsigned int            vBool32         __attribute__ ((__vector_size__ (16)));
            typedef unsigned long long      vUInt64         __attribute__ ((__vector_size__ (16)));
            typedef long long               vSInt64         __attribute__ ((__vector_size__ (16)));
            typedef double                  vDouble         __attribute__ ((__vector_size__ (16)));
        #endif /* __GNUC__ <= 3.3 */
    #else /* not __GNUC__ */
        #include <emmintrin.h>
        typedef __m128i                         vUInt8;
        typedef __m128i                         vSInt8;
        typedef __m128i                         vUInt16;
        typedef __m128i                         vSInt16;
        typedef __m128i                         vUInt32;
        typedef __m128i                         vSInt32;
        typedef __m128i                         vBool32;
        typedef __m128i                         vUInt64;
        typedef __m128i                         vSInt64;
        typedef __m128d                         vDouble;
    #endif /* __GNUC__ */
#endif  /* defined(__SSE2__) */

#elif defined __arm__ && defined __ARM_NEON__

	#if !defined ARM_NEON_GCC_COMPATIBILITY  

		#define ARM_NEON_GCC_COMPATIBILITY

		#if \
			defined __ARM_NEON_H && \
			defined __GNUC__ && \
			! defined __clang__ && \
			! defined SQUELCH_VECLIB_WARNINGS_ABOUT_BROKEN_NEON_TYPES

			/*	GCC decided to make neon vector types using something other
				than basic C types as the underlying element by default. This
				prevents the below types from being used with the functions in
				arm_neon.h.  GCC did put in a workaround, however.  Define
				ARM_NEON_GCC_COMPATIBILITY before including arm_neon.h and then
				everything will start working as designed. You are getting this
				warning  because some other header included arm_neon.h without
				defining ARM_NEON_GCC_COMPATIBILITY before we arrived here. 

				#define SQUELCH_VECLIB_WARNINGS_ABOUT_BROKEN_NEON_TYPES to silence this warning
			*/
			#warning "arm_neon.h was included without #define ARM_NEON_GCC_COMPATIBILITY.  Vector types defined in vecLibTypes.h, such as vUInt8, might not work with NEON intrinsics."

		#endif

	#endif	/* !defined ARM_NEON_GCC_COMPATIBILITY */

	#include <arm_neon.h>
	typedef unsigned char  vUInt8  __attribute__((__vector_size__(16), __aligned__(16)));
	typedef signed char    vSInt8  __attribute__((__vector_size__(16), __aligned__(16)));
	typedef unsigned short vUInt16 __attribute__((__vector_size__(16), __aligned__(16)));
	typedef signed short   vSInt16 __attribute__((__vector_size__(16), __aligned__(16)));
	typedef unsigned int   vUInt32 __attribute__((__vector_size__(16), __aligned__(16)));
	typedef signed int     vSInt32 __attribute__((__vector_size__(16), __aligned__(16)));
	typedef float          vFloat  __attribute__((__vector_size__(16), __aligned__(16)));
	typedef double         vDouble __attribute__((__vector_size__(16), __aligned__(16)));
	typedef unsigned int   vBool32 __attribute__((__vector_size__(16), __aligned__(16)));

#else

	typedef unsigned char       vUInt8  __attribute__((__vector_size__(16)));
	typedef signed char         vSInt8  __attribute__((__vector_size__(16)));
	typedef unsigned short      vUInt16 __attribute__((__vector_size__(16)));
	typedef signed short        vSInt16 __attribute__((__vector_size__(16)));
	typedef unsigned int        vUInt32 __attribute__((__vector_size__(16)));
	typedef signed int          vSInt32 __attribute__((__vector_size__(16)));
    typedef long long           vSInt64 __attribute__((__vector_size__(16)));
    typedef unsigned long long  vUInt64 __attribute__((__vector_size__(16)));
	typedef float               vFloat  __attribute__((__vector_size__(16)));
	typedef double              vDouble __attribute__((__vector_size__(16)));
	typedef unsigned int        vBool32 __attribute__((__vector_size__(16)));

#endif


#pragma options align=reset


#endif /* __VECLIBTYPES__ */
                                                                                                                                                                                                                                                                                                                                                            vectorOps.h                                                                                         0100644 0001750 0001750 00000106227 12567451167 043337  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/Headers                           /*
     File:       vecLib/vectorOps.h
 
     Contains:   vector and matrix functions for AltiVec
 
     Version:    vecLib-563.3
 
     Copyright:  Copyright (c) 1999-2015 by Apple Inc. All rights reserved.
 
     Bugs:       For bug reports, consult the following page on
                 the World Wide Web:
 
                     http://developer.apple.com/bugreporter/
 
*/
#ifndef __VECTOROPS__
#define __VECTOROPS__

#include <stdint.h>
/*
#ifndef __VECLIBTYPES__
#include <vecLib/vecLibTypes.h>
#endif

*/
#include "vecLibTypes.h"

#include <Availability.h>

#if PRAGMA_ONCE
#pragma once
#endif

#ifdef __cplusplus
extern "C" {
#endif


#if !defined __has_feature
    #define __has_feature(f)    0
#endif
#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull begin")
#else
    #define __nullable
    #define __nonnull
#endif


/*
-------------------------------------------------------------------------------------
                                                                                                                                                                  
 This section is a collection of Basic Linear Algebra Subprograms (BLAS), which   
 use AltiVec technology for their implementations. The functions are grouped into 
 three categories (called levels), as follows:                                    
                                                                                  
    1) Vector-scalar linear algebra subprograms                                   
    2) Matrix-vector linear algebra subprograms                                   
    3) Matrix operations                                                          
                                                                                  
 Following is a list of subprograms and a short description of each one.          
-------------------------------------------------------------------------------------
*/
#if defined _AltiVecPIMLanguageExtensionsAreEnabled || defined __SSE__
/*
-------------------------------------------------------------------------------------
     Level 1
-------------------------------------------------------------------------------------
*/
/**************************************************
  vIsamax finds the position of the first vector
  element having the largest magnitude.         
     count  length of vector x (count is a      
            multiple of 4)                      
     x      array of floats                     
**************************************************/
/*
 *  vIsamax()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern int32_t 
vIsamax(
  int32_t        count,
  const vFloat   *x) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/**************************************************
  vIsamin finds the position of the first vector
  element having minimum absolute value.        
     count  length of vector x (count is a      
            multiple of 4)                      
     x      array of floats                     
**************************************************/
/*
 *  vIsamin()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern int32_t 
vIsamin(
  int32_t        count,
  const vFloat   *x) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/**************************************************
  vIsmax finds the position of the first vector 
  element having maximum value.                 
     count  length of vector x (count is a      
            multiple of 4)                      
     x      array of floats                     
**************************************************/
/*
 *  vIsmax()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern int32_t 
vIsmax(
  int32_t        count,
  const vFloat   *x) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/**************************************************
  vIsmin finds the position of the first vector 
  element having minimum value.                 
     count  length of vector x (count is a      
            multiple of 4)                      
     x      array of floats                     
**************************************************/
/*
 *  vIsmin()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern int32_t 
vIsmin(
  int32_t        count,
  const vFloat   *x) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/**************************************************
  vSasum finds the sum of the magnitudes of the 
  elements in a vector.                         
     count  length of vector x (count is a      
            multiple of 4)                      
     x      array of floats                     
**************************************************/
/*
 *  vSasum()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern float 
vSasum(
  int32_t        count,
  const vFloat   *x) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/**************************************************
  vSsum is the vector version of sasum but without  
  the absolute value. It takes the value of each
  element of the array and adds them together.      
            multiple of 4)                      
     x      array of floats                     
**************************************************/
/*
 *  vSsum()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern float 
vSsum(
  int32_t        count,
  const vFloat   *x) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/**************************************************
  vSaxpy multiplies a vector x, by a scalar and 
  adds it to a vector y and stores the result in y
     n      number of floats in x (n is a       
            multiple of 4)                      
     alpha  scalar number is single-precision   
            floating-point                      
     x      array of vFloats              
     y      array of vFloats, where the   
            the result is stored                
**************************************************/
/*
 *  vSaxpy()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSaxpy(
  int32_t        n,
  float          alpha,
  const vFloat   *x,
  vFloat         *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
  vScopy copies a vector x, into another vector y.  
     n      mumber of floats in x and y (n is a 
            multiple of 4)                      
     x      array of vFloats              
     y      array of vFloats              
*************************************************************/
/*
 *  vScopy()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vScopy(
  int32_t        n,
  const vFloat   *x,
  vFloat         *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/*************************************************************
 vSdot finds the dot product of two vectors.      
    n       mumber of floats in x and y (n is a 
                multiple of 4)                      
    x       array of vFloats              
    y       array of vFloats              
*************************************************************/
/*
 *  vSdot()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern float 
vSdot(
  int32_t        n,
  const vFloat   *x,
  const vFloat   *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);



/*************************************************************
 vSnaxpy computes saxpy "n" times.               
   n            number of saxpyV computations to be 
                performed and the number of elements
                in vector A (n is a multiple of 4)  
   m            number of floats in each vector x(i)
                or y(i)                             
   a            array of vFloats containing   
                scalars a(i)                        
   x            matrix containing arrays of vector- 
                floats x(i)                         
   y            matrix containing vectors y(i)      
*************************************************************/
/*
 *  vSnaxpy()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSnaxpy(
  int32_t        n,
  int32_t        m,
  const vFloat   *a,
  const vFloat   *x,
  vFloat         *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSndot computes the dot products "n" times.     
    n       number of dot product computations  
            to be performed and the number of   
                elements in vector S                
    m       number of elements in vectors x(i)  
                and y(i) for each dot product       
                computation (m is a multiple of 4)  
    s       array of floats. Depending on the   
                value of "isw" different computations/
                are performed and the results are   
                stored in the array S               
    isw     indicates the type of computation   
                to perform.                         
                if isw=1, S(i) <--   x(i)   y(i)    
                if isw=2, S(i) <-- - x(i)   y(i)    
                if isw=3, S(i) <-- S(i) + x(i)   y(i)/
                if isw=4, S(i) <-- S(i) - x(i)   y(i)/
    x       matrix containing arrays x(i)       
    y       matrix containing arrays y(i)       
*************************************************************/
/*
 *  vSndot()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSndot(
  int32_t        n,
  int32_t        m,
  float          *s,
  int32_t        isw,
  const vFloat   *x,
  const vFloat   *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSnrm2 finds the Euclidean length of a vector   
 with scaling of input to avoid destructive      
 underflow and overflow.                         
    count   length of vector (multiple of 4)    
    x       array of vFloats              
*************************************************************/
/*
 *  vSnrm2()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern float 
vSnrm2(
  int32_t        count,
  const vFloat   *x) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSnorm2 finds the Euclidean length of a vector  
 with no scaling of input.                       
    count   length of vector (multiple of 4)    
    x       array of vFloats              
*************************************************************/
/*
 *  vSnorm2()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern float 
vSnorm2(
  int32_t        count,
  const vFloat   *x) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSrot applies a plane rotation.                 
    n       number of points to be rotated, also
                number of elements in x and y (n is 
                a multiple of 4)                    
    x       array of vFloats. It is a     
                vector of length n, containing x(i) 
                coordinates of points to be rotated 
    y       array of vFloats. It is a     
                vector of length n, containing y(i) 
                coordinates of points to be rotated 
    c       cosine of angle of rotation         
    s       sine of angle of rotation           
*************************************************************/
/*
 *  vSrot()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSrot(
  int32_t   n,
  vFloat    *x,
  vFloat    *y,
  float     c,
  float     s) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSscal multiplies a vector x, by a scalar and   
 stores the result in the vector x.              
    n       number of floats in x (n is a       
                multiple of 4)                      
    alpha   scalar number is single-precision   
                floating-point                      
    x       array of vFloats              
*************************************************************/
/*
 *  vSscal()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSscal(
  int32_t   n,
  float     alpha,
  vFloat    *x) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSswap interchanges the elements of vectors x   
 and y                                           
    n       number of floats in x and y (n is a 
                multiple of 4)                      
    x       array of vFloats              
    y       array of vFloats              
*************************************************************/
/*
 *  vSswap()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSswap(
  int32_t   n,
  vFloat    *x,
  vFloat    *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSyax multiplies a vector x, by a scalar and    
 stores the result in a vector y.                
    n       number of floats in x (n is a       
                multiple of 4)                      
    alpha   scalar number is single-precision   
                floating-point                      
    x       array of vFloats              
    y       array of vFloats              
*************************************************************/
/*
 *  vSyax()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSyax(
  int32_t        n,
  float          alpha,
  const vFloat   *x,
  vFloat         *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSzaxpy multiplies a vector x, by a scalar and  
 adds it to a vector y and stores the result in  
 vector Z.                                       
    n       number of floats in x (n is a       
                multiple of 4)                      
    alpha   scalar number is single-precision   
                floating-point                      
    x       array of vFloats              
    y       array of vFloats              
    Z       array of vFloats, where the   
                is stored                           
*************************************************************/
/*
 *  vSzaxpy()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSzaxpy(
  int32_t        n,
  float          alpha,
  const vFloat   *x,
  const vFloat   *y,
  vFloat         *z) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);





/*
-------------------------------------------------------------------------------------
     Level 2
-------------------------------------------------------------------------------------
*/
/*************************************************************
 vSgemv multiplies an array of vFloats y by
 a  scalar beta, and takes the result and adds it
 to the product of a scalar alpha multiplied by  
 a matrix A multiplied by a vector x. The above  
 result is stored in array y. Futhermore, the    
 same function also performs the above calculation/
 with the transpose of matrix A, instead of      
 matrix A. In this function argument "forma"     
 distinguishes between the above two cases.      
    forma   indicates the form of matrix A to   
                use in the computation, where:      
                If forma = "n", Matrix A is used    
                If forma = "T", Transpose of Matrix 
                 A is used                          
    m       number of rows in matrix A and      
                depending on value of forma         
                if forma = "n", it is the length of 
                 vector y                           
                if forma = "T", it is the length of 
                 vector x. m is a multiple of 4     
    n       number of columns in matrix A and   
                depending on value of forma         
                if forma = "n", it is the length of 
                 vector x                           
                if forma = "T", it is the length of 
                 vector y. m is a multiple of 4     
    alpha   is a scaling constant               
    A       is an m by n matrix. Its elements   
                are vFloats                   
    x       is an array of vFloats        
    beta        is a scaling constant               
    y       is an array of vFloats        
*************************************************************/
/*
 *  vSgemv()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSgemv(
  char           forma,
  int32_t        m,
  int32_t        n,
  float          alpha,
  const vFloat   *a,
  const vFloat   *x,
  float          beta,
  vFloat         *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);





/*************************************************************
 vSgemx adds an array of vFloats y to the  
 product of an scalar alpha by a mtrix A         
 multiplied by an array of vFloats x. It   
 then stores the result in the vector y.         
    m       number of rows in matrix A and      
                the length of vector y. m is a      
            multiple of 4                       
    n       number of columns in matrix A and   
                the length of vector x. m is a      
            multiple of 4                       
    alpha   is a scaling constant               
    a       is an m by n matrix. Its elements   
                are vFloats                   
    x       is an array of vFloats        
    y       is an array of vFloats        
*************************************************************/
/*
 *  vSgemx()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSgemx(
  int32_t        m,
  int32_t        n,
  float          alpha,
  const vFloat   *a,
  const vFloat   *x,
  vFloat         *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSgemtx takes the transpose of a mtrix A and    
 multiplies it by an array x. It then multiplies 
 the result by a scalar alpha. Finally adds the  
 above result to an array y and stores the result
 in array y.                                     
    m       number of rows in matrix A and      
                the length of vector x. m is a      
            multiple of 4                       
    n       number of columns in matrix A and   
                the length of vector y. m is a      
            multiple of 4                       
    alpha   is a scaling constant               
    a       is an m by n matrix. Its elements   
                are vFloats                   
    x       is an array of vFloats        
    y       is an array of vFloats        
*************************************************************/
/*
 *  vSgemtx()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSgemtx(
  int32_t        m,
  int32_t        n,
  float          alpha,
  const vFloat   *a,
  const vFloat   *x,
  vFloat         *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*
-------------------------------------------------------------------------------------
     Level 3
-------------------------------------------------------------------------------------
*/


/*************************************************************
 vSgeadd performs matrix addition for general    
 matrices or their transposes.                   
    height  height of the matrix (it is multiple
                of 4)                               
    width   width of the matrix (it is multiple 
                of 4)                               
    A       matrix A, and depending on forma:   
                if forma='N', A is used in  the     
                computation, and A has m rows and   
                n columns                           
                if forma='T', A(T) is used in the   
                computation, and A has n rows and   
                m columns                           
    forma   indicates the form of matrix A to   
                use in the computation, where:      
                if forma='N', A is used in  the     
                computation                         
                if forma='T', A(T) is used in  the  
                computation                         
    b       matrix b, and depending on formb:   
                if formb='N', b is used in  the     
                computation, and b has m rows and   
                n columns                           
                if formb='T', b(T) is used in the   
                computation, and b has n rows and   
                m columns                           
    formb   indicates the form of matrix b to   
                use in the computation, where:      
                if forma='N', b is used in  the     
                computation                         
                if forma='T', b(T) is used in  the  
                computation                         
    c       is an m by n matrix c, containing   
                the reults of the computation       
*************************************************************/
/*
 *  vSgeadd()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSgeadd(
  int32_t        height,
  int32_t        width,
  const vFloat   *a,
  char           forma,
  const vFloat   *b,
  char           formb,
  vFloat         *c) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSgesub performs matrix subtraction for general 
 matrices or their transposes.                   
    height  height of the matrix (it is multiple
                of 4)                               
    width   width of the matrix (it is multiple 
                of 4)                               
    A       matrix A, and depending on forma:   
                if forma='N', A is used in  the     
                computation, and A has m rows and   
                n columns                           
                if forma='T', A(T) is used in the   
                computation, and A has n rows and   
                m columns                           
    forma   indicates the form of matrix A to   
                use in the computation, where:      
                if forma='N', A is used in  the     
                computation                         
                if forma='T', A(T) is used in  the  
                computation                         
    b       matrix b, and depending on formb:   
                if formb='N', b is used in  the     
                computation, and b has m rows and   
                n columns                           
                if formb='T', b(T) is used in the   
                computation, and b has n rows and   
                m columns                           
    formb   indicates the form of matrix b to   
                use in the computation, where:      
                if forma='N', b is used in  the     
                computation                         
                if forma='T', b(T) is used in  the  
                computation                         
    c       is an m by n matrix c, containing   
                the reults of the computation       
*************************************************************/
/*
 *  vSgesub()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSgesub(
  int32_t        height,
  int32_t        width,
  const vFloat   *a,
  char           forma,
  const vFloat   *b,
  char           formb,
  vFloat         *c) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSgemul performs matrix multiplication for      
 general matrices or their transposes.           
    l       height of the matrix A (it is       
                multiple of 4)                      
    m       width of  matrix A  (it is multiple 
                of 4)                               
    n       width of  matrix b  (it is multiple 
                of 4)                               
    A       matrix A, and depending on forma:   
                if forma='N', A is used in  the     
                computation, and A has l rows and   
                m columns                           
                if forma='T', A(T) is used in the   
                computation, and A has m rows and   
                l columns                           
    forma   indicates the form of matrix A to   
                use in the computation, where:      
                if forma='N', A is used in  the     
                computation                         
                if forma='T', A(T) is used in  the  
                computation                         
    b       matrix b, and depending on formb:   
                if formb='N', b is used in  the     
                computation, and b has m rows and   
                n columns                           
                if formb='T', b(T) is used in the   
                computation, and b has n rows and   
                m columns                           
    formb   indicates the form of matrix b to   
                use in the computation, where:      
                if forma='N', b is used in  the     
                computation                         
                if forma='T', b(T) is used in  the  
                computation                         
    matrix  is the matrix containing the     
                results of the computation           
*************************************************************/
/*
 *  vSgemul()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSgemul(
  int32_t        l,
  int32_t        m,
  int32_t        n,
  const vFloat   *a,
  char           forma,
  const vFloat   *b,
  char           formb,
  vFloat         *matrix) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);




/*************************************************************
 vSgemm performs combined matrix multiplication  
 and addition for general matrices or their transposes.                                     
    l       number of rows in matrix c (it is   
                multiple of 4)                      
    m       has the following meaning:          
                if forma='N', it is the number of   
                columns in matrix A                 
                if forma='T', it is the number of   
                rows in matrix A. In addition       
                if formb='N', it is the number of   
                rows in matrix b                    
                if formb='T', it is the number of   
                columns in matrix b                 
    n       columns in  matrix c                
    A       matrix A, and depending on forma:   
                if forma='N', A is used in  the     
                computation, and A has l rows and   
                m columns                           
                if forma='T', A(T) is used in the   
                computation, and A has m rows and   
                l columns                           
    forma   indicates the form of matrix A to   
                use in the computation, where:      
                if forma='N', A is used in  the     
                computation                         
                if forma='T', A(T) is used in  the  
                computation                         
    b       matrix b, and depending on formb:   
                if formb='N', b is used in  the     
                computation, and b has m rows and   
                n columns                           
                if formb='T', b(T) is used in the   
                computation, and b has n rows and   
                m columns                           
    formb   indicates the form of matrix b to   
                use in the computation, where:      
                if forma='N', b is used in  the     
                computation                         
                if forma='T', b(T) is used in  the  
                computation                         
    alpha   is a scalar                         
    beta        is a scalar                         
    matrix      is the l by n matrix          
*************************************************************/
/*
 *  vSgemm()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSgemm(
  int32_t        l,
  int32_t        m,
  int32_t        n,
  const vFloat   *a,
  char           forma,
  const vFloat   *b,
  char           formb,
  vFloat         *c,
  float          alpha,
  float          beta,
  vFloat         *matrix) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);





/*************************************************************
 vSgetmi performs general matrix transpose (in place).                                         
    size        is the number of rows and columns   
                in matrix x                         
*************************************************************/
/*
 *  vSgetmi()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSgetmi(
  int32_t   size,
  vFloat    *x) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);





/*************************************************************
 vSgetmo performs general matrix transpose (out-of-place).                                      
    height  is the height of the matrix         
    width   is the width of the matrix          
    x       array of vFloats              
    y       array of vFloats              
*************************************************************/
/*
 *  vSgetmo()
 *  
 *  Availability:
 *    Mac OS X:         in version 10.0 and later in vecLib.framework
 *    CarbonLib:        not in Carbon, but vecLib is compatible with CarbonLib
 *    Non-Carbon CFM:   in vecLib 1.0 and later
 */
extern void 
vSgetmo(
  int32_t        height,
  int32_t        width,
  const vFloat   *x,
  vFloat         *y) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);





/*
	vsGevv puts the outer product of vectors A and B into matrix M.

	Input:

		l is the number of elements in A and the number of rows in M.
		n is the number of elements in B and the number of columns in N.
		A is a vector of L floating-point numbers.
		B is a vector of M floating-point numbers.
		M is an array with space for L*N floating-point numbers.

	Output:

		For 0 <= i < l and 0 <= j < n, C[i*n + j] = A[i] * B[j].

	Note:

		In the comments above, array elements are floating-point objects, in
		spite of the fact that the arrays are passed to the routine as pointers
		to vFloat.  For example, if A contains four floating-point numbers, l
		is 4, even though A contains only one vFloat object.

	Availability:

		Mac OS X:        In version 10.0 and later in vecLib.framework.
		CarbonLib:       Not in Carbon, but vecLib is compatible with CarbonLib.
		Non-Carbon CFM:  In vecLib 1.0 and later.
*/
extern void 
vSgevv(
  int32_t        l,
  int32_t        n,
  const vFloat   *A,
  const vFloat   *B,
  vFloat         *M) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);


#endif	// defined _AltiVecPIMLanguageExtensionsAreEnabled || defined __SSE__


#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull end")
#endif
 

#ifdef __cplusplus
}
#endif

#endif /* __VECTOROPS__ */

                                                                                                                                                                                                                                                                                                                                                                         vfp.h                                                                                               0100644 0001750 0001750 00000033066 12567451167 042146  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/Headers                           /*  vfp.h (from vecLib-563.3)
 *  Copyright (c) 1999-2015 by Apple Inc. All rights reserved.
 *
 *  Overview:
 *  vfp.h provides math library operations for SIMD vectors.  These functions
 *  are intended for use as replacements for calls to the system math library
 *  in hand-vectorized code.
 *
 *  If you are not writing vector code, but are looking for high-performance
 *  math library operations, consult vForce.h instead, which provides math
 *  library operations on arrays of floating-point data.
 *
 *  Compatibility:
 *  These routines operate on SIMD vectors, and are compatible with the types
 *  declared in the headers for both SSE (Intel) and NEON (ARM) intrinsics.
 *
 *  Bugs:
 *  For bug reports or feature requests use
 *  http://developer.apple.com/bugreporter/
 */

#ifndef __VFP__
#define __VFP__
#if defined __SSE2__ || defined __ARM_NEON__

#include "vecLibTypes.h"
#include <stdint.h>
#include <Availability.h>

#ifdef __cplusplus
extern "C" {
#endif

/*  Rounding Functions
 *
 *  Each lane of the result vector contains the value in the corresponding
 *  lane of the input vector rounded to an integral value in the specified
 *  direction:
 *
 *     Function         Rounding Direction
 *     --------         ------------------------
 *     vceilf           toward +infinity
 *     vfloorf          toward -infinity
 *     vtruncf          toward zero
 *     vnintf           to nearest, ties to even
 *
 *  When SSE4.1 code generation is enabled on Intel architectures, single-
 *  instruction implementations of these operations are inlined instead of
 *  making an external function call.                                         */

#if defined __SSE4_1__
#include <immintrin.h>
#define __VFP_INLINE_ATTR__ __attribute__((__always_inline__, __nodebug__))
static __inline__ vFloat __VFP_INLINE_ATTR__  vceilf(vFloat __vfp_a) { return _mm_ceil_ps(__vfp_a); }
static __inline__ vFloat __VFP_INLINE_ATTR__ vfloorf(vFloat __vfp_a) { return _mm_floor_ps(__vfp_a); }
static __inline__ vFloat __VFP_INLINE_ATTR__ vtruncf(vFloat __vfp_a) { return _mm_round_ps(__vfp_a, _MM_FROUND_TRUNC); }
static __inline__ vFloat __VFP_INLINE_ATTR__  vnintf(vFloat __vfp_a) { return _mm_round_ps(__vfp_a, _MM_FROUND_NINT); }
#else
extern vFloat  vceilf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_6_0);
extern vFloat vfloorf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_6_0);
extern vFloat vtruncf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern vFloat  vnintf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_6_0);
/*  The legacy name vintf is not available on iOS.  Use vtruncf instead.      */
extern vFloat   vintf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_NA);
#endif


#if !defined __has_feature
    #define __has_feature(f)    0
#endif
#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull begin")
#else
    #define __nullable
    #define __nonnull
#endif


/*  Exponential and Logarithmic Functions
 *
 *  Each lane of the result contains the result of the specified operation
 *  applied to the corresponding lane of the input vector:
 *
 *      Function        Lanewise Operation
 *      --------        ----------------------------
 *      vexpf           base-e exponential function.
 *      vexp2f          base-two exponential function.
 *      vexpm1f         e**x - 1, computed in such a way as to be more
 *                      accurate than calling vexpf and then subtracting 1
 *                      when the argument is close to zero.
 *      vlogf           natural logarithm.
 *      vlog2f          base-two logarithm.
 *      vlog10f         base-ten logarithm.
 *      vlog1pf         natural logarithm of (1+x), computed in such a way as
 *                      to be more accurate than adding 1 and calling vlogf
 *                      when the argument is close to zero.                   */
 
extern vFloat   vexpf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat  vexp2f(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern vFloat vexpm1f(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat   vlogf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat  vlog2f(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern vFloat vlog10f(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_6_0);
extern vFloat vlog1pf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
 
/*  Scaling Functions
 *
 *  These functions can be used to efficiently rescale floating-point
 *  computations when necessary:
 *
 *      Function        Lanewise Operation
 *      --------        ----------------------------
 *      vlogbf          extracts the exponent of its argument as a signed
 *                      integral value.  Subnormal arguments are treated as
 *                      though they were first normalized.  Thus:
 *                          1 <= x * 2**(-logbf(x)) < 2
 *      vscalbf         efficiently computes x * 2**n, where x is the first
 *                      argument and n is the second.                         */

extern vFloat  vlogbf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat vscalbf(vFloat, vSInt32) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);

/*  Power Functions
 *  
 *  vpowf raises the first argument to the power specified by the second
 *  argument, and returns the result.  Edge cases are as specified for the
 *  pow( ) function in the math library.  vipowf also raises the first
 *  argument to the power specified by the second argument, but the second
 *  argument to vipowf is an integer, not a floating-point number.            */

extern vFloat  vpowf(vFloat, vFloat)  __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat vipowf(vFloat, vSInt32) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);

/*  Trigonometric and Hyperbolic Functions
 *
 *  These functions compute lanewise trigonometric and hyperbolic functions
 *  and their inverses.  All inputs to the trigonometric functions, and 
 *  results from their inverses, are interpreted as angles measured in radians.
 *
 *      Function        Result
 *      --------        ----------------------------
 *      vsinf           sine of the argument.
 *      vcosf           cosine of the argument.
 *      vsincosf        returns the cosine of the first argument, and stores
 *                      the sine of the first argument to the destination
 *                      specified by the second argument.  This address must
 *                      be a valid pointer and must be 16-byte aligned.
 *      vtanf           tangent of the argument.
 *
 *      vsinpif         sine of the argument multiplied by pi.
 *      vcospif         cosine of the argument multiplied by pi.
 *      vtanpif         tangent of the argument multiplied by pi.
 *
 *      vasinf          arcsine of the argument, in the range [-pi/2, pi/2].
 *      vacosf          arccosine of the argument, in the range [0, pi].
 *      vatanf          arctangent of the argument, in the range [-pi/2, pi/2].
 *      vatan2f         arctangent of the first argument divided by the
 *                      second argument, using the sign of both arguments to
 *                      determine in which quadrant the result lies.  The
 *                      result is in the range [-pi, pi], and is the signed
 *                      angle from the positive x axis to the point
 *                          (second argument, first argument).
 *
 *      vsinhf          hyperbolic sine of the argument.
 *      vcoshf          hyperbolic cosine of the argument.
 *      vtanhf          hyperbolic tangent of the argument.
 *
 *      vasinhf         inverse hyperbolic sine of the argument.
 *      vacoshf         inverse hyperbolic cosine of the argument.
 *      vatanhf         inverse hyperbolic tangent of the argument.           */

extern vFloat    vsinf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat    vcosf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat vsincosf(vFloat, vFloat *) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_6_0);
extern vFloat    vtanf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat  vsinpif(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern vFloat  vcospif(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern vFloat  vtanpif(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern vFloat   vasinf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat   vacosf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat   vatanf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat  vatan2f(vFloat, vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat   vsinhf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat   vcoshf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat   vtanhf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat  vasinhf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat  vacoshf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat  vatanhf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);

/*  Arithmetic Functions
 *
 *  vrecf, vsqrtf, and vrsqrtf provide lane-wise reciprocal, square-root, and
 *  reciprocal square-root operations, respectively.  Each lane in the result
 *  of vdivf contains the corresponding lane of the first argument divided by
 *  the corresponding lane of the second argument.                            */

extern vFloat   vrecf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_6_0);
extern vFloat  vsqrtf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat vrsqrtf(vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat   vdivf(vFloat, vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);

/*  Remainder Functions
 *
 *  These functions compute various forms of the remainder from division of the
 *  first argument by the second argument.  If we call the first argument x and
 *  the second argument y, then the behavior of these functions is as follows:
 *
 *  vfmodf returns the value r = x - qy, where q is an integer such that r has
 *  the same sign as x and satisfies |r| < |y|, if y is not zero.
 *
 *  vremainderf performs the remainder operation defined in the IEEE-754
 *  standard.  It returns the value r = x - qy, where q is the integer value
 *  closest to the exact value of x/y.  If there are two integers closest to
 *  x/y, then the one which is even is used.  Thus, |r| <= |y|/2.
 *
 *  vremquof returns the same remainder as vremainderf, and also stores the
 *  7 low-order bits of q to the address pointed to by the third argument.
 *  This must be a valid pointer, and must have 16-byte alignment.            */

extern vFloat      vfmodf(vFloat, vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat vremainderf(vFloat, vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat    vremquof(vFloat, vFloat, vUInt32 *) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);

/*  Floating-point Utility Functions
 *
 *  These functions provide vector versions of common utility operations
 *  for working with floating-point data:
 *
 *      Function        Lanewise Operation
 *      --------        ----------------------------
 *      vfabsf          absolute value
 *      vcopysignf      returns a floating-point value with the magnitude of
 *                      the first operand and the sign of the second operand.
 *      vsignbitf       non-zero if and only if the signbit of the argument is
 *                      set.  (Note that this applies to NaNs, zeros, and 
 *                      infinities as well, and so is not the same as x < 0.)
 *      vnextafterf     returns the floating-point value adjacent to the
 *                      first operand in the direction of the second operand.
 *      vclassifyf      returns the value of the FP_xxxx macro (defined in
 *                      <math.h>) corresponding to the "class" of the argument.
 *                      e.g. if the argument is infinity, the result is
 *                      FP_INFINITE; if the argument is zero, the result is
 *                      FP_ZERO.  Consult <math.h> for further details.       */

extern vFloat       vfabsf(vFloat)         __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_6_0);
extern vFloat   vcopysignf(vFloat, vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vUInt32   vsignbitf(vFloat)         __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vFloat  vnextafterf(vFloat, vFloat) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
extern vUInt32  vclassifyf(vFloat)         __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);
/*  The legacy name vfabf is not available on iOS.  Use vfabsf instead.       */
extern vFloat        vfabf(vFloat)         __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_NA);

/*  Generalized Table Lookup
 *
 *  This function provides a gather operation (table lookup).  Each lane of the
 *  result vector contains the value found in a table at index specified by
 *  the corresponding lane of the first argument.  The table base address is
 *  specified by the second argument.  Note please that the indices are
 *  *signed* 32-bit integers.                                                 */

extern vUInt32 vtablelookup(vSInt32, uint32_t *) __OSX_AVAILABLE_STARTING(__MAC_10_0, __IPHONE_6_0);

#if __has_feature(assume_nonnull)
    _Pragma("clang assume_nonnull end")
#endif

#ifdef __cplusplus
}
#endif
#endif /* defined __SSE2__ || defined __ARM_NEON__ */
#endif /* __VFP__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                                          libBLAS.tbd                                                                                         0100644 0001750 0001750 00000030267 12571375060 041522  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A                                   ---
archs:           [ i386, x86_64, x86_64h ]
platform:        macosx
install-name:    /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
exports:         
  - archs:           [ i386, x86_64, x86_64h ]
    symbols:         [ _APL_dgemm, _APL_dgemm_LU, _APL_dgemm_QR, _APL_dtrsm, 
                       _APL_sgemm, _APL_sgemm_LU, _APL_sgemm_QR, _APL_strsm, 
                       _APPLE_NTHREADS, _ATLU_DestroyThreadMemory, _CAXPY, 
                       _CAXPY_, _CCOPY, _CCOPY_, _CDOTC, _CDOTC_, _CDOTU, 
                       _CDOTU_, _CGBMV, _CGBMV_, _CGEMM, _CGEMM_, _CGEMV, 
                       _CGEMV_, _CGERC, _CGERC_, _CGERU, _CGERU_, _CHBMV, 
                       _CHBMV_, _CHEMM, _CHEMM_, _CHEMV, _CHEMV_, _CHER, 
                       _CHER2, _CHER2K, _CHER2K_, _CHER2_, _CHERK, _CHERK_, 
                       _CHER_, _CHPMV, _CHPMV_, _CHPR, _CHPR2, _CHPR2_, 
                       _CHPR_, _CROTG, _CROTG_, _CSCAL, _CSCAL_, _CSROT, 
                       _CSROT_, _CSSCAL, _CSSCAL_, _CSWAP, _CSWAP_, _CSYMM, 
                       _CSYMM_, _CSYR2K, _CSYR2K_, _CSYRK, _CSYRK_, _CTBMV, 
                       _CTBMV_, _CTBSV, _CTBSV_, _CTPMV, _CTPMV_, _CTPSV, 
                       _CTPSV_, _CTRMM, _CTRMM_, _CTRMV, _CTRMV_, _CTRSM, 
                       _CTRSM_, _CTRSV, _CTRSV_, _DASUM, _DASUM_, _DAXPY, 
                       _DAXPY_, _DCABS1, _DCABS1_, _DCOPY, _DCOPY_, _DDOT, 
                       _DDOT_, _DGBMV, _DGBMV_, _DGEMM, _DGEMM_, _DGEMV, 
                       _DGEMV_, _DGER, _DGER_, _DNRM2, _DNRM2_, _DROT, 
                       _DROTG, _DROTG_, _DROTM, _DROTMG, _DROTMG_, _DROTM_, 
                       _DROT_, _DSBMV, _DSBMV_, _DSCAL, _DSCAL_, _DSDOT, 
                       _DSDOT_, _DSPMV, _DSPMV_, _DSPR, _DSPR2, _DSPR2_, 
                       _DSPR_, _DSWAP, _DSWAP_, _DSYMM, _DSYMM_, _DSYMV, 
                       _DSYMV_, _DSYR, _DSYR2, _DSYR2K, _DSYR2K_, _DSYR2_, 
                       _DSYRK, _DSYRK_, _DSYR_, _DTBMV, _DTBMV_, _DTBSV, 
                       _DTBSV_, _DTPMV, _DTPMV_, _DTPSV, _DTPSV_, _DTRMM, 
                       _DTRMM_, _DTRMV, _DTRMV_, _DTRSM, _DTRSM_, _DTRSV, 
                       _DTRSV_, _DZASUM, _DZASUM_, _DZNRM2, _DZNRM2_, _ICAMAX, 
                       _ICAMAX_, _IDAMAX, _IDAMAX_, _ISAMAX, _ISAMAX_, 
                       _IZAMAX, _IZAMAX_, _SASUM, _SASUM_, _SAXPY, _SAXPY_, 
                       _SCASUM, _SCASUM_, _SCNRM2, _SCNRM2_, _SCOPY, _SCOPY_, 
                       _SDOT, _SDOT_, _SDSDOT, _SDSDOT_, _SGBMV, _SGBMV_, 
                       _SGEMM, _SGEMM_, _SGEMV, _SGEMV_, _SGER, _SGER_, 
                       _SNRM2, _SNRM2_, _SROT, _SROTG, _SROTG_, _SROTM, 
                       _SROTMG, _SROTMG_, _SROTM_, _SROT_, _SSBMV, _SSBMV_, 
                       _SSCAL, _SSCAL_, _SSPMV, _SSPMV_, _SSPR, _SSPR2, 
                       _SSPR2_, _SSPR_, _SSWAP, _SSWAP_, _SSYMM, _SSYMM_, 
                       _SSYMV, _SSYMV_, _SSYR, _SSYR2, _SSYR2K, _SSYR2K_, 
                       _SSYR2_, _SSYRK, _SSYRK_, _SSYR_, _STBMV, _STBMV_, 
                       _STBSV, _STBSV_, _STPMV, _STPMV_, _STPSV, _STPSV_, 
                       _STRMM, _STRMM_, _STRMV, _STRMV_, _STRSM, _STRSM_, 
                       _STRSV, _STRSV_, _SetBLASParamErrorProc, _XERBLA, 
                       _XERBLA_, _ZAXPY, _ZAXPY_, _ZCOPY, _ZCOPY_, _ZDOTC, 
                       _ZDOTC_, _ZDOTU, _ZDOTU_, _ZDROT, _ZDROT_, _ZDSCAL, 
                       _ZDSCAL_, _ZGBMV, _ZGBMV_, _ZGEMM, _ZGEMM_, _ZGEMV, 
                       _ZGEMV_, _ZGERC, _ZGERC_, _ZGERU, _ZGERU_, _ZHBMV, 
                       _ZHBMV_, _ZHEMM, _ZHEMM_, _ZHEMV, _ZHEMV_, _ZHER, 
                       _ZHER2, _ZHER2K, _ZHER2K_, _ZHER2_, _ZHERK, _ZHERK_, 
                       _ZHER_, _ZHPMV, _ZHPMV_, _ZHPR, _ZHPR2, _ZHPR2_, 
                       _ZHPR_, _ZROTG, _ZROTG_, _ZSCAL, _ZSCAL_, _ZSWAP, 
                       _ZSWAP_, _ZSYMM, _ZSYMM_, _ZSYR2K, _ZSYR2K_, _ZSYRK, 
                       _ZSYRK_, _ZTBMV, _ZTBMV_, _ZTBSV, _ZTBSV_, _ZTPMV, 
                       _ZTPMV_, _ZTPSV, _ZTPSV_, _ZTRMM, _ZTRMM_, _ZTRMV, 
                       _ZTRMV_, _ZTRSM, _ZTRSM_, _ZTRSV, _ZTRSV_, _appleblas_dgeadd, 
                       _appleblas_sgeadd, _catlas_caxpby, _catlas_cset, 
                       _catlas_daxpby, _catlas_dset, _catlas_saxpby, _catlas_sset, 
                       _catlas_zaxpby, _catlas_zset, _caxpy, _caxpy_, _cblas_caxpy, 
                       _cblas_ccopy, _cblas_cdotc_sub, _cblas_cdotu_sub, 
                       _cblas_cgbmv, _cblas_cgemm, _cblas_cgemv, _cblas_cgerc, 
                       _cblas_cgeru, _cblas_chbmv, _cblas_chemm, _cblas_chemv, 
                       _cblas_cher, _cblas_cher2, _cblas_cher2k, _cblas_cherk, 
                       _cblas_chpmv, _cblas_chpr, _cblas_chpr2, _cblas_crotg, 
                       _cblas_cscal, _cblas_csrot, _cblas_csscal, _cblas_cswap, 
                       _cblas_csymm, _cblas_csyr2k, _cblas_csyrk, _cblas_ctbmv, 
                       _cblas_ctbsv, _cblas_ctpmv, _cblas_ctpsv, _cblas_ctrmm, 
                       _cblas_ctrmv, _cblas_ctrsm, _cblas_ctrsv, _cblas_dasum, 
                       _cblas_daxpy, _cblas_dcopy, _cblas_ddot, _cblas_dgbmv, 
                       _cblas_dgemm, _cblas_dgemv, _cblas_dger, _cblas_dnrm2, 
                       _cblas_drot, _cblas_drotg, _cblas_drotm, _cblas_drotmg, 
                       _cblas_dsbmv, _cblas_dscal, _cblas_dsdot, _cblas_dspmv, 
                       _cblas_dspr, _cblas_dspr2, _cblas_dswap, _cblas_dsymm, 
                       _cblas_dsymv, _cblas_dsyr, _cblas_dsyr2, _cblas_dsyr2k, 
                       _cblas_dsyrk, _cblas_dtbmv, _cblas_dtbsv, _cblas_dtpmv, 
                       _cblas_dtpsv, _cblas_dtrmm, _cblas_dtrmv, _cblas_dtrsm, 
                       _cblas_dtrsv, _cblas_dzasum, _cblas_dznrm2, _cblas_errprn, 
                       _cblas_icamax, _cblas_idamax, _cblas_isamax, _cblas_izamax, 
                       _cblas_sasum, _cblas_saxpy, _cblas_scasum, _cblas_scnrm2, 
                       _cblas_scopy, _cblas_sdot, _cblas_sdsdot, _cblas_sgbmv, 
                       _cblas_sgemm, _cblas_sgemv, _cblas_sger, _cblas_snrm2, 
                       _cblas_srot, _cblas_srotg, _cblas_srotm, _cblas_srotmg, 
                       _cblas_ssbmv, _cblas_sscal, _cblas_sspmv, _cblas_sspr, 
                       _cblas_sspr2, _cblas_sswap, _cblas_ssymm, _cblas_ssymv, 
                       _cblas_ssyr, _cblas_ssyr2, _cblas_ssyr2k, _cblas_ssyrk, 
                       _cblas_stbmv, _cblas_stbsv, _cblas_stpmv, _cblas_stpsv, 
                       _cblas_strmm, _cblas_strmv, _cblas_strsm, _cblas_strsv, 
                       _cblas_xerbla, _cblas_zaxpy, _cblas_zcopy, _cblas_zdotc_sub, 
                       _cblas_zdotu_sub, _cblas_zdrot, _cblas_zdscal, _cblas_zgbmv, 
                       _cblas_zgemm, _cblas_zgemv, _cblas_zgerc, _cblas_zgeru, 
                       _cblas_zhbmv, _cblas_zhemm, _cblas_zhemv, _cblas_zher, 
                       _cblas_zher2, _cblas_zher2k, _cblas_zherk, _cblas_zhpmv, 
                       _cblas_zhpr, _cblas_zhpr2, _cblas_zrotg, _cblas_zscal, 
                       _cblas_zswap, _cblas_zsymm, _cblas_zsyr2k, _cblas_zsyrk, 
                       _cblas_ztbmv, _cblas_ztbsv, _cblas_ztpmv, _cblas_ztpsv, 
                       _cblas_ztrmm, _cblas_ztrmv, _cblas_ztrsm, _cblas_ztrsv, 
                       _ccopy, _ccopy_, _cdotc, _cdotc_, _cdotu, _cdotu_, 
                       _cgbmv, _cgbmv_, _cgemm, _cgemm_, _cgemv, _cgemv_, 
                       _cgerc, _cgerc_, _cgeru, _cgeru_, _chbmv, _chbmv_, 
                       _chemm, _chemm_, _chemv, _chemv_, _cher, _cher2, 
                       _cher2_, _cher2k, _cher2k_, _cher_, _cherk, _cherk_, 
                       _chpmv, _chpmv_, _chpr, _chpr2, _chpr2_, _chpr_, 
                       _crotg, _crotg_, _cscal, _cscal_, _csrot, _csrot_, 
                       _csscal, _csscal_, _cswap, _cswap_, _csymm, _csymm_, 
                       _csyr2k, _csyr2k_, _csyrk, _csyrk_, _ctbmv, _ctbmv_, 
                       _ctbsv, _ctbsv_, _ctpmv, _ctpmv_, _ctpsv, _ctpsv_, 
                       _ctrmm, _ctrmm_, _ctrmv, _ctrmv_, _ctrsm, _ctrsm_, 
                       _ctrsv, _ctrsv_, _dasum, _dasum_, _daxpy, _daxpy_, 
                       _dcabs1, _dcabs1_, _dcopy, _dcopy_, _ddot, _ddot_, 
                       _dgbmv, _dgbmv_, _dgeCopy, _dgePack_A_NoTran, _dgePack_A_Tran, 
                       _dgePack_B_NoTran, _dgePack_B_Tran, _dgeSetZero, 
                       _dgemm, _dgemm_, _dgemv, _dgemv_, _dger, _dger_, 
                       _dnrm2, _dnrm2_, _double_general_add, _double_general_add_scalar, 
                       _double_general_elementwise_product, _double_general_permute_cols, 
                       _double_general_permute_rows, _double_general_product_scalar, 
                       _double_general_splat, _double_general_sub_scalar, 
                       _double_general_transpose, _double_inner_product_scalar, 
                       _double_outer_product_scalar, _drot, _drot_, _drotg, 
                       _drotg_, _drotm, _drotm_, _drotmg, _drotmg_, _dsbmv, 
                       _dsbmv_, _dscal, _dscal_, _dsdot, _dsdot_, _dspmv, 
                       _dspmv_, _dspr, _dspr2, _dspr2_, _dspr_, _dswap, 
                       _dswap_, _dsymm, _dsymm_, _dsymv, _dsymv_, _dsyr, 
                       _dsyr2, _dsyr2_, _dsyr2k, _dsyr2k_, _dsyr_, _dsyrk, 
                       _dsyrk_, _dtbmv, _dtbmv_, _dtbsv, _dtbsv_, _dtpmv, 
                       _dtpmv_, _dtpsv, _dtpsv_, _dtrCopyLower, _dtrSetZeroLower, 
                       _dtrmm, _dtrmm_, _dtrmv, _dtrmv_, _dtrsm, _dtrsm_, 
                       _dtrsv, _dtrsv_, _dzasum, _dzasum_, _dznrm2, _dznrm2_, 
                       _float_general_add, _float_general_add_scalar, _float_general_elementwise_product, 
                       _float_general_permute_cols, _float_general_permute_rows, 
                       _float_general_product_scalar, _float_general_splat, 
                       _float_general_sub_scalar, _float_general_transpose, 
                       _float_inner_product_scalar, _float_outer_product_scalar, 
                       _getHardwareInfo, _icamax, _icamax_, _idamax, _idamax_, 
                       _isamax, _isamax_, _izamax, _izamax_, _lsame_, _sasum, 
                       _sasum_, _saxpy, _saxpy_, _scasum, _scasum_, _scnrm2, 
                       _scnrm2_, _scopy, _scopy_, _sdot, _sdot_, _sdsdot, 
                       _sdsdot_, _sgbmv, _sgbmv_, _sgeCopy, _sgePack_A_NoTran, 
                       _sgePack_A_Tran, _sgePack_B_NoTran, _sgePack_B_Tran, 
                       _sgeSetZero, _sgemm, _sgemm_, _sgemv, _sgemv_, _sger, 
                       _sger_, _snrm2, _snrm2_, _srot, _srot_, _srotg, 
                       _srotg_, _srotm, _srotm_, _srotmg, _srotmg_, _ssbmv, 
                       _ssbmv_, _sscal, _sscal_, _sspmv, _sspmv_, _sspr, 
                       _sspr2, _sspr2_, _sspr_, _sswap, _sswap_, _ssymm, 
                       _ssymm_, _ssymv, _ssymv_, _ssyr, _ssyr2, _ssyr2_, 
                       _ssyr2k, _ssyr2k_, _ssyr_, _ssyrk, _ssyrk_, _stbmv, 
                       _stbmv_, _stbsv, _stbsv_, _stpmv, _stpmv_, _stpsv, 
                       _stpsv_, _strCopyLower, _strSetZeroLower, _strmm, 
                       _strmm_, _strmv, _strmv_, _strsm, _strsm_, _strsv, 
                       _strsv_, _xerbla, _xerbla_, _xerbla_array__, _zaxpy, 
                       _zaxpy_, _zcopy, _zcopy_, _zdotc, _zdotc_, _zdotu, 
                       _zdotu_, _zdrot, _zdrot_, _zdscal, _zdscal_, _zgbmv, 
                       _zgbmv_, _zgemm, _zgemm_, _zgemv, _zgemv_, _zgerc, 
                       _zgerc_, _zgeru, _zgeru_, _zhbmv, _zhbmv_, _zhemm, 
                       _zhemm_, _zhemv, _zhemv_, _zher, _zher2, _zher2_, 
                       _zher2k, _zher2k_, _zher_, _zherk, _zherk_, _zhpmv, 
                       _zhpmv_, _zhpr, _zhpr2, _zhpr2_, _zhpr_, _zrotg, 
                       _zrotg_, _zscal, _zscal_, _zswap, _zswap_, _zsymm, 
                       _zsymm_, _zsyr2k, _zsyr2k_, _zsyrk, _zsyrk_, _ztbmv, 
                       _ztbmv_, _ztbsv, _ztbsv_, _ztpmv, _ztpmv_, _ztpsv, 
                       _ztpsv_, _ztrmm, _ztrmm_, _ztrmv, _ztrmv_, _ztrsm, 
                       _ztrsm_, _ztrsv, _ztrsv_ ]
...
                                                                                                                                                                                                                                                                                                                                         libLAPACK.tbd                                                                                       0100644 0001750 0001750 00000234035 12571375060 041733  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A                                   ---
archs:           [ i386, x86_64, x86_64h ]
platform:        macosx
install-name:    /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib
exports:         
  - archs:           [ i386, x86_64, x86_64h ]
    symbols:         [ _CBDSQR, _CBDSQR_, _CGBBRD, _CGBBRD_, _CGBCON, _CGBCON_, 
                       _CGBEQU, _CGBEQUB, _CGBEQUB_, _CGBEQU_, _CGBRFS, 
                       _CGBRFS_, _CGBSV, _CGBSVX, _CGBSVX_, _CGBSV_, _CGBTF2, 
                       _CGBTF2_, _CGBTRF, _CGBTRF_, _CGBTRS, _CGBTRS_, 
                       _CGEBAK, _CGEBAK_, _CGEBAL, _CGEBAL_, _CGEBD2, _CGEBD2_, 
                       _CGEBRD, _CGEBRD_, _CGECON, _CGECON_, _CGEEQU, _CGEEQUB, 
                       _CGEEQUB_, _CGEEQU_, _CGEES, _CGEESX, _CGEESX_, 
                       _CGEES_, _CGEEV, _CGEEVX, _CGEEVX_, _CGEEV_, _CGEGS, 
                       _CGEGS_, _CGEGV, _CGEGV_, _CGEHD2, _CGEHD2_, _CGEHRD, 
                       _CGEHRD_, _CGELQ2, _CGELQ2_, _CGELQF, _CGELQF_, 
                       _CGELS, _CGELSD, _CGELSD_, _CGELSS, _CGELSS_, _CGELSX, 
                       _CGELSX_, _CGELSY, _CGELSY_, _CGELS_, _CGEQL2, _CGEQL2_, 
                       _CGEQLF, _CGEQLF_, _CGEQP3, _CGEQP3_, _CGEQPF, _CGEQPF_, 
                       _CGEQR2, _CGEQR2_, _CGEQRF, _CGEQRF_, _CGERFS, _CGERFS_, 
                       _CGERQ2, _CGERQ2_, _CGERQF, _CGERQF_, _CGESC2, _CGESC2_, 
                       _CGESDD, _CGESDD_, _CGESV, _CGESVD, _CGESVD_, _CGESVX, 
                       _CGESVX_, _CGESV_, _CGETC2, _CGETC2_, _CGETF2, _CGETF2_, 
                       _CGETRF, _CGETRF_, _CGETRI, _CGETRI_, _CGETRS, _CGETRS_, 
                       _CGGBAK, _CGGBAK_, _CGGBAL, _CGGBAL_, _CGGES, _CGGESX, 
                       _CGGESX_, _CGGES_, _CGGEV, _CGGEVX, _CGGEVX_, _CGGEV_, 
                       _CGGGLM, _CGGGLM_, _CGGHRD, _CGGHRD_, _CGGLSE, _CGGLSE_, 
                       _CGGQRF, _CGGQRF_, _CGGRQF, _CGGRQF_, _CGGSVD, _CGGSVD_, 
                       _CGGSVP, _CGGSVP_, _CGTCON, _CGTCON_, _CGTRFS, _CGTRFS_, 
                       _CGTSV, _CGTSVX, _CGTSVX_, _CGTSV_, _CGTTRF, _CGTTRF_, 
                       _CGTTRS, _CGTTRS_, _CGTTS2, _CGTTS2_, _CHBEV, _CHBEVD, 
                       _CHBEVD_, _CHBEVX, _CHBEVX_, _CHBEV_, _CHBGST, _CHBGST_, 
                       _CHBGV, _CHBGVD, _CHBGVD_, _CHBGVX, _CHBGVX_, _CHBGV_, 
                       _CHBTRD, _CHBTRD_, _CHECON, _CHECON_, _CHEEQUB, 
                       _CHEEQUB_, _CHEEV, _CHEEVD, _CHEEVD_, _CHEEVR, _CHEEVR_, 
                       _CHEEVX, _CHEEVX_, _CHEEV_, _CHEGS2, _CHEGS2_, _CHEGST, 
                       _CHEGST_, _CHEGV, _CHEGVD, _CHEGVD_, _CHEGVX, _CHEGVX_, 
                       _CHEGV_, _CHERFS, _CHERFS_, _CHESV, _CHESVX, _CHESVX_, 
                       _CHESV_, _CHETD2, _CHETD2_, _CHETF2, _CHETF2_, _CHETRD, 
                       _CHETRD_, _CHETRF, _CHETRF_, _CHETRI, _CHETRI_, 
                       _CHETRS, _CHETRS_, _CHFRK, _CHFRK_, _CHGEQZ, _CHGEQZ_, 
                       _CHLA_TRANSTYPE__, _CHPCON, _CHPCON_, _CHPEV, _CHPEVD, 
                       _CHPEVD_, _CHPEVX, _CHPEVX_, _CHPEV_, _CHPGST, _CHPGST_, 
                       _CHPGV, _CHPGVD, _CHPGVD_, _CHPGVX, _CHPGVX_, _CHPGV_, 
                       _CHPRFS, _CHPRFS_, _CHPSV, _CHPSVX, _CHPSVX_, _CHPSV_, 
                       _CHPTRD, _CHPTRD_, _CHPTRF, _CHPTRF_, _CHPTRI, _CHPTRI_, 
                       _CHPTRS, _CHPTRS_, _CHSEIN, _CHSEIN_, _CHSEQR, _CHSEQR_, 
                       _CLABRD, _CLABRD_, _CLACGV, _CLACGV_, _CLACN2, _CLACN2_, 
                       _CLACON, _CLACON_, _CLACP2, _CLACP2_, _CLACPY, _CLACPY_, 
                       _CLACRM, _CLACRM_, _CLACRT, _CLACRT_, _CLADIV, _CLADIV_, 
                       _CLAED0, _CLAED0_, _CLAED7, _CLAED7_, _CLAED8, _CLAED8_, 
                       _CLAEIN, _CLAEIN_, _CLAESY, _CLAESY_, _CLAEV2, _CLAEV2_, 
                       _CLAG2Z, _CLAG2Z_, _CLAGS2, _CLAGS2_, _CLAGTM, _CLAGTM_, 
                       _CLAHEF, _CLAHEF_, _CLAHQR, _CLAHQR_, _CLAHR2, _CLAHR2_, 
                       _CLAHRD, _CLAHRD_, _CLAIC1, _CLAIC1_, _CLALS0, _CLALS0_, 
                       _CLALSA, _CLALSA_, _CLALSD, _CLALSD_, _CLANGB, _CLANGB_, 
                       _CLANGE, _CLANGE_, _CLANGT, _CLANGT_, _CLANHB, _CLANHB_, 
                       _CLANHE, _CLANHE_, _CLANHF, _CLANHF_, _CLANHP, _CLANHP_, 
                       _CLANHS, _CLANHS_, _CLANHT, _CLANHT_, _CLANSB, _CLANSB_, 
                       _CLANSP, _CLANSP_, _CLANSY, _CLANSY_, _CLANTB, _CLANTB_, 
                       _CLANTP, _CLANTP_, _CLANTR, _CLANTR_, _CLAPLL, _CLAPLL_, 
                       _CLAPMT, _CLAPMT_, _CLAQGB, _CLAQGB_, _CLAQGE, _CLAQGE_, 
                       _CLAQHB, _CLAQHB_, _CLAQHE, _CLAQHE_, _CLAQHP, _CLAQHP_, 
                       _CLAQP2, _CLAQP2_, _CLAQPS, _CLAQPS_, _CLAQR0, _CLAQR0_, 
                       _CLAQR1, _CLAQR1_, _CLAQR2, _CLAQR2_, _CLAQR3, _CLAQR3_, 
                       _CLAQR4, _CLAQR4_, _CLAQR5, _CLAQR5_, _CLAQSB, _CLAQSB_, 
                       _CLAQSP, _CLAQSP_, _CLAQSY, _CLAQSY_, _CLAR1V, _CLAR1V_, 
                       _CLAR2V, _CLAR2V_, _CLARCM, _CLARCM_, _CLARF, _CLARFB, 
                       _CLARFB_, _CLARFG, _CLARFG_, _CLARFP, _CLARFP_, 
                       _CLARFT, _CLARFT_, _CLARFX, _CLARFX_, _CLARF_, _CLARGV, 
                       _CLARGV_, _CLARNV, _CLARNV_, _CLARRV, _CLARRV_, 
                       _CLARSCL2, _CLARSCL2_, _CLARTG, _CLARTG_, _CLARTV, 
                       _CLARTV_, _CLARZ, _CLARZB, _CLARZB_, _CLARZT, _CLARZT_, 
                       _CLARZ_, _CLASCL, _CLASCL2, _CLASCL2_, _CLASCL_, 
                       _CLASET, _CLASET_, _CLASR, _CLASR_, _CLASSQ, _CLASSQ_, 
                       _CLASWP, _CLASWP_, _CLASYF, _CLASYF_, _CLATBS, _CLATBS_, 
                       _CLATDF, _CLATDF_, _CLATPS, _CLATPS_, _CLATRD, _CLATRD_, 
                       _CLATRS, _CLATRS_, _CLATRZ, _CLATRZ_, _CLATZM, _CLATZM_, 
                       _CLAUU2, _CLAUU2_, _CLAUUM, _CLAUUM_, _CPBCON, _CPBCON_, 
                       _CPBEQU, _CPBEQU_, _CPBRFS, _CPBRFS_, _CPBSTF, _CPBSTF_, 
                       _CPBSV, _CPBSVX, _CPBSVX_, _CPBSV_, _CPBTF2, _CPBTF2_, 
                       _CPBTRF, _CPBTRF_, _CPBTRS, _CPBTRS_, _CPFTRF, _CPFTRF_, 
                       _CPFTRI, _CPFTRI_, _CPFTRS, _CPFTRS_, _CPOCON, _CPOCON_, 
                       _CPOEQU, _CPOEQUB, _CPOEQUB_, _CPOEQU_, _CPORFS, 
                       _CPORFS_, _CPOSV, _CPOSVX, _CPOSVX_, _CPOSV_, _CPOTF2, 
                       _CPOTF2_, _CPOTRF, _CPOTRF_, _CPOTRI, _CPOTRI_, 
                       _CPOTRS, _CPOTRS_, _CPPCON, _CPPCON_, _CPPEQU, _CPPEQU_, 
                       _CPPRFS, _CPPRFS_, _CPPSV, _CPPSVX, _CPPSVX_, _CPPSV_, 
                       _CPPTRF, _CPPTRF_, _CPPTRI, _CPPTRI_, _CPPTRS, _CPPTRS_, 
                       _CPSTF2, _CPSTF2_, _CPSTRF, _CPSTRF_, _CPTCON, _CPTCON_, 
                       _CPTEQR, _CPTEQR_, _CPTRFS, _CPTRFS_, _CPTSV, _CPTSVX, 
                       _CPTSVX_, _CPTSV_, _CPTTRF, _CPTTRF_, _CPTTRS, _CPTTRS_, 
                       _CPTTS2, _CPTTS2_, _CROT, _CROT_, _CSPCON, _CSPCON_, 
                       _CSPMV, _CSPMV_, _CSPR, _CSPRFS, _CSPRFS_, _CSPR_, 
                       _CSPSV, _CSPSVX, _CSPSVX_, _CSPSV_, _CSPTRF, _CSPTRF_, 
                       _CSPTRI, _CSPTRI_, _CSPTRS, _CSPTRS_, _CSRSCL, _CSRSCL_, 
                       _CSTEDC, _CSTEDC_, _CSTEGR, _CSTEGR_, _CSTEIN, _CSTEIN_, 
                       _CSTEMR, _CSTEMR_, _CSTEQR, _CSTEQR_, _CSYCON, _CSYCON_, 
                       _CSYEQUB, _CSYEQUB_, _CSYMV, _CSYMV_, _CSYR, _CSYRFS, 
                       _CSYRFS_, _CSYR_, _CSYSV, _CSYSVX, _CSYSVX_, _CSYSV_, 
                       _CSYTF2, _CSYTF2_, _CSYTRF, _CSYTRF_, _CSYTRI, _CSYTRI_, 
                       _CSYTRS, _CSYTRS_, _CTBCON, _CTBCON_, _CTBRFS, _CTBRFS_, 
                       _CTBTRS, _CTBTRS_, _CTFSM, _CTFSM_, _CTFTRI, _CTFTRI_, 
                       _CTFTTP, _CTFTTP_, _CTFTTR, _CTFTTR_, _CTGEVC, _CTGEVC_, 
                       _CTGEX2, _CTGEX2_, _CTGEXC, _CTGEXC_, _CTGSEN, _CTGSEN_, 
                       _CTGSJA, _CTGSJA_, _CTGSNA, _CTGSNA_, _CTGSY2, _CTGSY2_, 
                       _CTGSYL, _CTGSYL_, _CTPCON, _CTPCON_, _CTPRFS, _CTPRFS_, 
                       _CTPTRI, _CTPTRI_, _CTPTRS, _CTPTRS_, _CTPTTF, _CTPTTF_, 
                       _CTPTTR, _CTPTTR_, _CTRCON, _CTRCON_, _CTREVC, _CTREVC_, 
                       _CTREXC, _CTREXC_, _CTRRFS, _CTRRFS_, _CTRSEN, _CTRSEN_, 
                       _CTRSNA, _CTRSNA_, _CTRSYL, _CTRSYL_, _CTRTI2, _CTRTI2_, 
                       _CTRTRI, _CTRTRI_, _CTRTRS, _CTRTRS_, _CTRTTF, _CTRTTF_, 
                       _CTRTTP, _CTRTTP_, _CTZRQF, _CTZRQF_, _CTZRZF, _CTZRZF_, 
                       _CUNG2L, _CUNG2L_, _CUNG2R, _CUNG2R_, _CUNGBR, _CUNGBR_, 
                       _CUNGHR, _CUNGHR_, _CUNGL2, _CUNGL2_, _CUNGLQ, _CUNGLQ_, 
                       _CUNGQL, _CUNGQL_, _CUNGQR, _CUNGQR_, _CUNGR2, _CUNGR2_, 
                       _CUNGRQ, _CUNGRQ_, _CUNGTR, _CUNGTR_, _CUNM2L, _CUNM2L_, 
                       _CUNM2R, _CUNM2R_, _CUNMBR, _CUNMBR_, _CUNMHR, _CUNMHR_, 
                       _CUNML2, _CUNML2_, _CUNMLQ, _CUNMLQ_, _CUNMQL, _CUNMQL_, 
                       _CUNMQR, _CUNMQR_, _CUNMR2, _CUNMR2_, _CUNMR3, _CUNMR3_, 
                       _CUNMRQ, _CUNMRQ_, _CUNMRZ, _CUNMRZ_, _CUNMTR, _CUNMTR_, 
                       _CUPGTR, _CUPGTR_, _CUPMTR, _CUPMTR_, _DBDSDC, _DBDSDC_, 
                       _DBDSQR, _DBDSQR_, _DDISNA, _DDISNA_, _DGBBRD, _DGBBRD_, 
                       _DGBCON, _DGBCON_, _DGBEQU, _DGBEQUB, _DGBEQUB_, 
                       _DGBEQU_, _DGBRFS, _DGBRFS_, _DGBSV, _DGBSVX, _DGBSVX_, 
                       _DGBSV_, _DGBTF2, _DGBTF2_, _DGBTRF, _DGBTRF_, _DGBTRS, 
                       _DGBTRS_, _DGEBAK, _DGEBAK_, _DGEBAL, _DGEBAL_, 
                       _DGEBD2, _DGEBD2_, _DGEBRD, _DGEBRD_, _DGECON, _DGECON_, 
                       _DGEEQU, _DGEEQUB, _DGEEQUB_, _DGEEQU_, _DGEES, 
                       _DGEESX, _DGEESX_, _DGEES_, _DGEEV, _DGEEVX, _DGEEVX_, 
                       _DGEEV_, _DGEGS, _DGEGS_, _DGEGV, _DGEGV_, _DGEHD2, 
                       _DGEHD2_, _DGEHRD, _DGEHRD_, _DGEJSV, _DGEJSV_, 
                       _DGELQ2, _DGELQ2_, _DGELQF, _DGELQF_, _DGELS, _DGELSD, 
                       _DGELSD_, _DGELSS, _DGELSS_, _DGELSX, _DGELSX_, 
                       _DGELSY, _DGELSY_, _DGELS_, _DGEQL2, _DGEQL2_, _DGEQLF, 
                       _DGEQLF_, _DGEQP3, _DGEQP3_, _DGEQPF, _DGEQPF_, 
                       _DGEQR2, _DGEQR2_, _DGEQRF, _DGEQRF_, _DGERFS, _DGERFS_, 
                       _DGERQ2, _DGERQ2_, _DGERQF, _DGERQF_, _DGESC2, _DGESC2_, 
                       _DGESDD, _DGESDD_, _DGESV, _DGESVD, _DGESVD_, _DGESVJ, 
                       _DGESVJ_, _DGESVX, _DGESVX_, _DGESV_, _DGETC2, _DGETC2_, 
                       _DGETF2, _DGETF2_, _DGETRF, _DGETRF_, _DGETRI, _DGETRI_, 
                       _DGETRS, _DGETRS_, _DGGBAK, _DGGBAK_, _DGGBAL, _DGGBAL_, 
                       _DGGES, _DGGESX, _DGGESX_, _DGGES_, _DGGEV, _DGGEVX, 
                       _DGGEVX_, _DGGEV_, _DGGGLM, _DGGGLM_, _DGGHRD, _DGGHRD_, 
                       _DGGLSE, _DGGLSE_, _DGGQRF, _DGGQRF_, _DGGRQF, _DGGRQF_, 
                       _DGGSVD, _DGGSVD_, _DGGSVP, _DGGSVP_, _DGSVJ0, _DGSVJ0_, 
                       _DGSVJ1, _DGSVJ1_, _DGTCON, _DGTCON_, _DGTRFS, _DGTRFS_, 
                       _DGTSV, _DGTSVX, _DGTSVX_, _DGTSV_, _DGTTRF, _DGTTRF_, 
                       _DGTTRS, _DGTTRS_, _DGTTS2, _DGTTS2_, _DHGEQZ, _DHGEQZ_, 
                       _DHSEIN, _DHSEIN_, _DHSEQR, _DHSEQR_, _DISNAN, _DISNAN_, 
                       _DLABAD, _DLABAD_, _DLABRD, _DLABRD_, _DLACN2, _DLACN2_, 
                       _DLACON, _DLACON_, _DLACPY, _DLACPY_, _DLADIV, _DLADIV_, 
                       _DLAE2, _DLAE2_, _DLAEBZ, _DLAEBZ_, _DLAED0, _DLAED0_, 
                       _DLAED1, _DLAED1_, _DLAED2, _DLAED2_, _DLAED3, _DLAED3_, 
                       _DLAED4, _DLAED4_, _DLAED5, _DLAED5_, _DLAED6, _DLAED6_, 
                       _DLAED7, _DLAED7_, _DLAED8, _DLAED8_, _DLAED9, _DLAED9_, 
                       _DLAEDA, _DLAEDA_, _DLAEIN, _DLAEIN_, _DLAEV2, _DLAEV2_, 
                       _DLAEXC, _DLAEXC_, _DLAG2, _DLAG2S, _DLAG2S_, _DLAG2_, 
                       _DLAGS2, _DLAGS2_, _DLAGTF, _DLAGTF_, _DLAGTM, _DLAGTM_, 
                       _DLAGTS, _DLAGTS_, _DLAGV2, _DLAGV2_, _DLAHQR, _DLAHQR_, 
                       _DLAHR2, _DLAHR2_, _DLAHRD, _DLAHRD_, _DLAIC1, _DLAIC1_, 
                       _DLAISNAN, _DLAISNAN_, _DLALN2, _DLALN2_, _DLALS0, 
                       _DLALS0_, _DLALSA, _DLALSA_, _DLALSD, _DLALSD_, 
                       _DLAMC1, _DLAMC1_, _DLAMC2, _DLAMC2_, _DLAMC3, _DLAMC3_, 
                       _DLAMC4, _DLAMC4_, _DLAMC5, _DLAMC5_, _DLAMCH, _DLAMCH_, 
                       _DLAMRG, _DLAMRG_, _DLANEG, _DLANEG_, _DLANGB, _DLANGB_, 
                       _DLANGE, _DLANGE_, _DLANGT, _DLANGT_, _DLANHS, _DLANHS_, 
                       _DLANSB, _DLANSB_, _DLANSF, _DLANSF_, _DLANSP, _DLANSP_, 
                       _DLANST, _DLANST_, _DLANSY, _DLANSY_, _DLANTB, _DLANTB_, 
                       _DLANTP, _DLANTP_, _DLANTR, _DLANTR_, _DLANV2, _DLANV2_, 
                       _DLAPLL, _DLAPLL_, _DLAPMT, _DLAPMT_, _DLAPY2, _DLAPY2_, 
                       _DLAPY3, _DLAPY3_, _DLAQGB, _DLAQGB_, _DLAQGE, _DLAQGE_, 
                       _DLAQP2, _DLAQP2_, _DLAQPS, _DLAQPS_, _DLAQR0, _DLAQR0_, 
                       _DLAQR1, _DLAQR1_, _DLAQR2, _DLAQR2_, _DLAQR3, _DLAQR3_, 
                       _DLAQR4, _DLAQR4_, _DLAQR5, _DLAQR5_, _DLAQSB, _DLAQSB_, 
                       _DLAQSP, _DLAQSP_, _DLAQSY, _DLAQSY_, _DLAQTR, _DLAQTR_, 
                       _DLAR1V, _DLAR1V_, _DLAR2V, _DLAR2V_, _DLARF, _DLARFB, 
                       _DLARFB_, _DLARFG, _DLARFG_, _DLARFP, _DLARFP_, 
                       _DLARFT, _DLARFT_, _DLARFX, _DLARFX_, _DLARF_, _DLARGV, 
                       _DLARGV_, _DLARNV, _DLARNV_, _DLARRA, _DLARRA_, 
                       _DLARRB, _DLARRB_, _DLARRC, _DLARRC_, _DLARRD, _DLARRD_, 
                       _DLARRE, _DLARRE_, _DLARRF, _DLARRF_, _DLARRJ, _DLARRJ_, 
                       _DLARRK, _DLARRK_, _DLARRR, _DLARRR_, _DLARRV, _DLARRV_, 
                       _DLARSCL2, _DLARSCL2_, _DLARTG, _DLARTG_, _DLARTV, 
                       _DLARTV_, _DLARUV, _DLARUV_, _DLARZ, _DLARZB, _DLARZB_, 
                       _DLARZT, _DLARZT_, _DLARZ_, _DLAS2, _DLAS2_, _DLASCL, 
                       _DLASCL2, _DLASCL2_, _DLASCL_, _DLASD0, _DLASD0_, 
                       _DLASD1, _DLASD1_, _DLASD2, _DLASD2_, _DLASD3, _DLASD3_, 
                       _DLASD4, _DLASD4_, _DLASD5, _DLASD5_, _DLASD6, _DLASD6_, 
                       _DLASD7, _DLASD7_, _DLASD8, _DLASD8_, _DLASD9, _DLASD9_, 
                       _DLASDA, _DLASDA_, _DLASDQ, _DLASDQ_, _DLASDT, _DLASDT_, 
                       _DLASET, _DLASET_, _DLASQ1, _DLASQ1_, _DLASQ2, _DLASQ2_, 
                       _DLASQ3, _DLASQ3_, _DLASQ4, _DLASQ4_, _DLASQ5, _DLASQ5_, 
                       _DLASQ6, _DLASQ6_, _DLASR, _DLASRT, _DLASRT_, _DLASR_, 
                       _DLASSQ, _DLASSQ_, _DLASV2, _DLASV2_, _DLASWP, _DLASWP_, 
                       _DLASY2, _DLASY2_, _DLASYF, _DLASYF_, _DLAT2S, _DLAT2S_, 
                       _DLATBS, _DLATBS_, _DLATDF, _DLATDF_, _DLATPS, _DLATPS_, 
                       _DLATRD, _DLATRD_, _DLATRS, _DLATRS_, _DLATRZ, _DLATRZ_, 
                       _DLATZM, _DLATZM_, _DLAUU2, _DLAUU2_, _DLAUUM, _DLAUUM_, 
                       _DOPGTR, _DOPGTR_, _DOPMTR, _DOPMTR_, _DORG2L, _DORG2L_, 
                       _DORG2R, _DORG2R_, _DORGBR, _DORGBR_, _DORGHR, _DORGHR_, 
                       _DORGL2, _DORGL2_, _DORGLQ, _DORGLQ_, _DORGQL, _DORGQL_, 
                       _DORGQR, _DORGQR_, _DORGR2, _DORGR2_, _DORGRQ, _DORGRQ_, 
                       _DORGTR, _DORGTR_, _DORM2L, _DORM2L_, _DORM2R, _DORM2R_, 
                       _DORMBR, _DORMBR_, _DORMHR, _DORMHR_, _DORML2, _DORML2_, 
                       _DORMLQ, _DORMLQ_, _DORMQL, _DORMQL_, _DORMQR, _DORMQR_, 
                       _DORMR2, _DORMR2_, _DORMR3, _DORMR3_, _DORMRQ, _DORMRQ_, 
                       _DORMRZ, _DORMRZ_, _DORMTR, _DORMTR_, _DPBCON, _DPBCON_, 
                       _DPBEQU, _DPBEQU_, _DPBRFS, _DPBRFS_, _DPBSTF, _DPBSTF_, 
                       _DPBSV, _DPBSVX, _DPBSVX_, _DPBSV_, _DPBTF2, _DPBTF2_, 
                       _DPBTRF, _DPBTRF_, _DPBTRS, _DPBTRS_, _DPFTRF, _DPFTRF_, 
                       _DPFTRI, _DPFTRI_, _DPFTRS, _DPFTRS_, _DPOCON, _DPOCON_, 
                       _DPOEQU, _DPOEQUB, _DPOEQUB_, _DPOEQU_, _DPORFS, 
                       _DPORFS_, _DPOSV, _DPOSVX, _DPOSVX_, _DPOSV_, _DPOTF2, 
                       _DPOTF2_, _DPOTRF, _DPOTRF_, _DPOTRI, _DPOTRI_, 
                       _DPOTRS, _DPOTRS_, _DPPCON, _DPPCON_, _DPPEQU, _DPPEQU_, 
                       _DPPRFS, _DPPRFS_, _DPPSV, _DPPSVX, _DPPSVX_, _DPPSV_, 
                       _DPPTRF, _DPPTRF_, _DPPTRI, _DPPTRI_, _DPPTRS, _DPPTRS_, 
                       _DPSTF2, _DPSTF2_, _DPSTRF, _DPSTRF_, _DPTCON, _DPTCON_, 
                       _DPTEQR, _DPTEQR_, _DPTRFS, _DPTRFS_, _DPTSV, _DPTSVX, 
                       _DPTSVX_, _DPTSV_, _DPTTRF, _DPTTRF_, _DPTTRS, _DPTTRS_, 
                       _DPTTS2, _DPTTS2_, _DRSCL, _DRSCL_, _DSBEV, _DSBEVD, 
                       _DSBEVD_, _DSBEVX, _DSBEVX_, _DSBEV_, _DSBGST, _DSBGST_, 
                       _DSBGV, _DSBGVD, _DSBGVD_, _DSBGVX, _DSBGVX_, _DSBGV_, 
                       _DSBTRD, _DSBTRD_, _DSFRK, _DSFRK_, _DSGESV, _DSGESV_, 
                       _DSPCON, _DSPCON_, _DSPEV, _DSPEVD, _DSPEVD_, _DSPEVX, 
                       _DSPEVX_, _DSPEV_, _DSPGST, _DSPGST_, _DSPGV, _DSPGVD, 
                       _DSPGVD_, _DSPGVX, _DSPGVX_, _DSPGV_, _DSPOSV, _DSPOSV_, 
                       _DSPRFS, _DSPRFS_, _DSPSV, _DSPSVX, _DSPSVX_, _DSPSV_, 
                       _DSPTRD, _DSPTRD_, _DSPTRF, _DSPTRF_, _DSPTRI, _DSPTRI_, 
                       _DSPTRS, _DSPTRS_, _DSTEBZ, _DSTEBZ_, _DSTEDC, _DSTEDC_, 
                       _DSTEGR, _DSTEGR_, _DSTEIN, _DSTEIN_, _DSTEMR, _DSTEMR_, 
                       _DSTEQR, _DSTEQR_, _DSTERF, _DSTERF_, _DSTEV, _DSTEVD, 
                       _DSTEVD_, _DSTEVR, _DSTEVR_, _DSTEVX, _DSTEVX_, 
                       _DSTEV_, _DSYCON, _DSYCON_, _DSYEQUB, _DSYEQUB_, 
                       _DSYEV, _DSYEVD, _DSYEVD_, _DSYEVR, _DSYEVR_, _DSYEVX, 
                       _DSYEVX_, _DSYEV_, _DSYGS2, _DSYGS2_, _DSYGST, _DSYGST_, 
                       _DSYGV, _DSYGVD, _DSYGVD_, _DSYGVX, _DSYGVX_, _DSYGV_, 
                       _DSYRFS, _DSYRFS_, _DSYSV, _DSYSVX, _DSYSVX_, _DSYSV_, 
                       _DSYTD2, _DSYTD2_, _DSYTF2, _DSYTF2_, _DSYTRD, _DSYTRD_, 
                       _DSYTRF, _DSYTRF_, _DSYTRI, _DSYTRI_, _DSYTRS, _DSYTRS_, 
                       _DTBCON, _DTBCON_, _DTBRFS, _DTBRFS_, _DTBTRS, _DTBTRS_, 
                       _DTFSM, _DTFSM_, _DTFTRI, _DTFTRI_, _DTFTTP, _DTFTTP_, 
                       _DTFTTR, _DTFTTR_, _DTGEVC, _DTGEVC_, _DTGEX2, _DTGEX2_, 
                       _DTGEXC, _DTGEXC_, _DTGSEN, _DTGSEN_, _DTGSJA, _DTGSJA_, 
                       _DTGSNA, _DTGSNA_, _DTGSY2, _DTGSY2_, _DTGSYL, _DTGSYL_, 
                       _DTPCON, _DTPCON_, _DTPRFS, _DTPRFS_, _DTPTRI, _DTPTRI_, 
                       _DTPTRS, _DTPTRS_, _DTPTTF, _DTPTTF_, _DTPTTR, _DTPTTR_, 
                       _DTRCON, _DTRCON_, _DTREVC, _DTREVC_, _DTREXC, _DTREXC_, 
                       _DTRRFS, _DTRRFS_, _DTRSEN, _DTRSEN_, _DTRSNA, _DTRSNA_, 
                       _DTRSYL, _DTRSYL_, _DTRTI2, _DTRTI2_, _DTRTRI, _DTRTRI_, 
                       _DTRTRS, _DTRTRS_, _DTRTTF, _DTRTTF_, _DTRTTP, _DTRTTP_, 
                       _DTZRQF, _DTZRQF_, _DTZRZF, _DTZRZF_, _DZSUM1, _DZSUM1_, 
                       _ICMAX1, _ICMAX1_, _IEEECK, _IEEECK_, _ILACLC, _ILACLC_, 
                       _ILACLR, _ILACLR_, _ILADIAG, _ILADIAG_, _ILADLC, 
                       _ILADLC_, _ILADLR, _ILADLR_, _ILAENV, _ILAENV_, 
                       _ILAPREC, _ILAPREC_, _ILASLC, _ILASLC_, _ILASLR, 
                       _ILASLR_, _ILATRANS, _ILATRANS_, _ILAUPLO, _ILAUPLO_, 
                       _ILAVER, _ILAVER_, _ILAZLC, _ILAZLC_, _ILAZLR, _ILAZLR_, 
                       _IPARMQ, _IPARMQ_, _IZMAX1, _IZMAX1_, _LSAMEN, _LSAMEN_, 
                       _SBDSDC, _SBDSDC_, _SBDSQR, _SBDSQR_, _SCSUM1, _SCSUM1_, 
                       _SDISNA, _SDISNA_, _SGBBRD, _SGBBRD_, _SGBCON, _SGBCON_, 
                       _SGBEQU, _SGBEQUB, _SGBEQUB_, _SGBEQU_, _SGBRFS, 
                       _SGBRFS_, _SGBSV, _SGBSVX, _SGBSVX_, _SGBSV_, _SGBTF2, 
                       _SGBTF2_, _SGBTRF, _SGBTRF_, _SGBTRS, _SGBTRS_, 
                       _SGEBAK, _SGEBAK_, _SGEBAL, _SGEBAL_, _SGEBD2, _SGEBD2_, 
                       _SGEBRD, _SGEBRD_, _SGECON, _SGECON_, _SGEEQU, _SGEEQUB, 
                       _SGEEQUB_, _SGEEQU_, _SGEES, _SGEESX, _SGEESX_, 
                       _SGEES_, _SGEEV, _SGEEVX, _SGEEVX_, _SGEEV_, _SGEGS, 
                       _SGEGS_, _SGEGV, _SGEGV_, _SGEHD2, _SGEHD2_, _SGEHRD, 
                       _SGEHRD_, _SGEJSV, _SGEJSV_, _SGELQ2, _SGELQ2_, 
                       _SGELQF, _SGELQF_, _SGELS, _SGELSD, _SGELSD_, _SGELSS, 
                       _SGELSS_, _SGELSX, _SGELSX_, _SGELSY, _SGELSY_, 
                       _SGELS_, _SGEQL2, _SGEQL2_, _SGEQLF, _SGEQLF_, _SGEQP3, 
                       _SGEQP3_, _SGEQPF, _SGEQPF_, _SGEQR2, _SGEQR2_, 
                       _SGEQRF, _SGEQRF_, _SGERFS, _SGERFS_, _SGERQ2, _SGERQ2_, 
                       _SGERQF, _SGERQF_, _SGESC2, _SGESC2_, _SGESDD, _SGESDD_, 
                       _SGESV, _SGESVD, _SGESVD_, _SGESVJ, _SGESVJ_, _SGESVX, 
                       _SGESVX_, _SGESV_, _SGETC2, _SGETC2_, _SGETF2, _SGETF2_, 
                       _SGETRF, _SGETRF_, _SGETRI, _SGETRI_, _SGETRS, _SGETRS_, 
                       _SGGBAK, _SGGBAK_, _SGGBAL, _SGGBAL_, _SGGES, _SGGESX, 
                       _SGGESX_, _SGGES_, _SGGEV, _SGGEVX, _SGGEVX_, _SGGEV_, 
                       _SGGGLM, _SGGGLM_, _SGGHRD, _SGGHRD_, _SGGLSE, _SGGLSE_, 
                       _SGGQRF, _SGGQRF_, _SGGRQF, _SGGRQF_, _SGGSVD, _SGGSVD_, 
                       _SGGSVP, _SGGSVP_, _SGSVJ0, _SGSVJ0_, _SGSVJ1, _SGSVJ1_, 
                       _SGTCON, _SGTCON_, _SGTRFS, _SGTRFS_, _SGTSV, _SGTSVX, 
                       _SGTSVX_, _SGTSV_, _SGTTRF, _SGTTRF_, _SGTTRS, _SGTTRS_, 
                       _SGTTS2, _SGTTS2_, _SHGEQZ, _SHGEQZ_, _SHSEIN, _SHSEIN_, 
                       _SHSEQR, _SHSEQR_, _SISNAN, _SISNAN_, _SLABAD, _SLABAD_, 
                       _SLABRD, _SLABRD_, _SLACN2, _SLACN2_, _SLACON, _SLACON_, 
                       _SLACPY, _SLACPY_, _SLADIV, _SLADIV_, _SLAE2, _SLAE2_, 
                       _SLAEBZ, _SLAEBZ_, _SLAED0, _SLAED0_, _SLAED1, _SLAED1_, 
                       _SLAED2, _SLAED2_, _SLAED3, _SLAED3_, _SLAED4, _SLAED4_, 
                       _SLAED5, _SLAED5_, _SLAED6, _SLAED6_, _SLAED7, _SLAED7_, 
                       _SLAED8, _SLAED8_, _SLAED9, _SLAED9_, _SLAEDA, _SLAEDA_, 
                       _SLAEIN, _SLAEIN_, _SLAEV2, _SLAEV2_, _SLAEXC, _SLAEXC_, 
                       _SLAG2, _SLAG2D, _SLAG2D_, _SLAG2_, _SLAGS2, _SLAGS2_, 
                       _SLAGTF, _SLAGTF_, _SLAGTM, _SLAGTM_, _SLAGTS, _SLAGTS_, 
                       _SLAGV2, _SLAGV2_, _SLAHQR, _SLAHQR_, _SLAHR2, _SLAHR2_, 
                       _SLAHRD, _SLAHRD_, _SLAIC1, _SLAIC1_, _SLAISNAN, 
                       _SLAISNAN_, _SLALN2, _SLALN2_, _SLALS0, _SLALS0_, 
                       _SLALSA, _SLALSA_, _SLALSD, _SLALSD_, _SLAMC1, _SLAMC1_, 
                       _SLAMC2, _SLAMC2_, _SLAMC3, _SLAMC3_, _SLAMC4, _SLAMC4_, 
                       _SLAMC5, _SLAMC5_, _SLAMCH, _SLAMCH_, _SLAMRG, _SLAMRG_, 
                       _SLANEG, _SLANEG_, _SLANGB, _SLANGB_, _SLANGE, _SLANGE_, 
                       _SLANGT, _SLANGT_, _SLANHS, _SLANHS_, _SLANSB, _SLANSB_, 
                       _SLANSF, _SLANSF_, _SLANSP, _SLANSP_, _SLANST, _SLANST_, 
                       _SLANSY, _SLANSY_, _SLANTB, _SLANTB_, _SLANTP, _SLANTP_, 
                       _SLANTR, _SLANTR_, _SLANV2, _SLANV2_, _SLAPLL, _SLAPLL_, 
                       _SLAPMT, _SLAPMT_, _SLAPY2, _SLAPY2_, _SLAPY3, _SLAPY3_, 
                       _SLAQGB, _SLAQGB_, _SLAQGE, _SLAQGE_, _SLAQP2, _SLAQP2_, 
                       _SLAQPS, _SLAQPS_, _SLAQR0, _SLAQR0_, _SLAQR1, _SLAQR1_, 
                       _SLAQR2, _SLAQR2_, _SLAQR3, _SLAQR3_, _SLAQR4, _SLAQR4_, 
                       _SLAQR5, _SLAQR5_, _SLAQSB, _SLAQSB_, _SLAQSP, _SLAQSP_, 
                       _SLAQSY, _SLAQSY_, _SLAQTR, _SLAQTR_, _SLAR1V, _SLAR1V_, 
                       _SLAR2V, _SLAR2V_, _SLARF, _SLARFB, _SLARFB_, _SLARFG, 
                       _SLARFG_, _SLARFP, _SLARFP_, _SLARFT, _SLARFT_, 
                       _SLARFX, _SLARFX_, _SLARF_, _SLARGV, _SLARGV_, _SLARNV, 
                       _SLARNV_, _SLARRA, _SLARRA_, _SLARRB, _SLARRB_, 
                       _SLARRC, _SLARRC_, _SLARRD, _SLARRD_, _SLARRE, _SLARRE_, 
                       _SLARRF, _SLARRF_, _SLARRJ, _SLARRJ_, _SLARRK, _SLARRK_, 
                       _SLARRR, _SLARRR_, _SLARRV, _SLARRV_, _SLARSCL2, 
                       _SLARSCL2_, _SLARTG, _SLARTG_, _SLARTV, _SLARTV_, 
                       _SLARUV, _SLARUV_, _SLARZ, _SLARZB, _SLARZB_, _SLARZT, 
                       _SLARZT_, _SLARZ_, _SLAS2, _SLAS2_, _SLASCL, _SLASCL2, 
                       _SLASCL2_, _SLASCL_, _SLASD0, _SLASD0_, _SLASD1, 
                       _SLASD1_, _SLASD2, _SLASD2_, _SLASD3, _SLASD3_, 
                       _SLASD4, _SLASD4_, _SLASD5, _SLASD5_, _SLASD6, _SLASD6_, 
                       _SLASD7, _SLASD7_, _SLASD8, _SLASD8_, _SLASD9, _SLASD9_, 
                       _SLASDA, _SLASDA_, _SLASDQ, _SLASDQ_, _SLASDT, _SLASDT_, 
                       _SLASET, _SLASET_, _SLASQ1, _SLASQ1_, _SLASQ2, _SLASQ2_, 
                       _SLASQ3, _SLASQ3_, _SLASQ4, _SLASQ4_, _SLASQ5, _SLASQ5_, 
                       _SLASQ6, _SLASQ6_, _SLASR, _SLASRT, _SLASRT_, _SLASR_, 
                       _SLASSQ, _SLASSQ_, _SLASV2, _SLASV2_, _SLASWP, _SLASWP_, 
                       _SLASY2, _SLASY2_, _SLASYF, _SLASYF_, _SLATBS, _SLATBS_, 
                       _SLATDF, _SLATDF_, _SLATPS, _SLATPS_, _SLATRD, _SLATRD_, 
                       _SLATRS, _SLATRS_, _SLATRZ, _SLATRZ_, _SLATZM, _SLATZM_, 
                       _SLAUU2, _SLAUU2_, _SLAUUM, _SLAUUM_, _SMAXLOC, 
                       _SMAXLOC_, _SOPGTR, _SOPGTR_, _SOPMTR, _SOPMTR_, 
                       _SORG2L, _SORG2L_, _SORG2R, _SORG2R_, _SORGBR, _SORGBR_, 
                       _SORGHR, _SORGHR_, _SORGL2, _SORGL2_, _SORGLQ, _SORGLQ_, 
                       _SORGQL, _SORGQL_, _SORGQR, _SORGQR_, _SORGR2, _SORGR2_, 
                       _SORGRQ, _SORGRQ_, _SORGTR, _SORGTR_, _SORM2L, _SORM2L_, 
                       _SORM2R, _SORM2R_, _SORMBR, _SORMBR_, _SORMHR, _SORMHR_, 
                       _SORML2, _SORML2_, _SORMLQ, _SORMLQ_, _SORMQL, _SORMQL_, 
                       _SORMQR, _SORMQR_, _SORMR2, _SORMR2_, _SORMR3, _SORMR3_, 
                       _SORMRQ, _SORMRQ_, _SORMRZ, _SORMRZ_, _SORMTR, _SORMTR_, 
                       _SPBCON, _SPBCON_, _SPBEQU, _SPBEQU_, _SPBRFS, _SPBRFS_, 
                       _SPBSTF, _SPBSTF_, _SPBSV, _SPBSVX, _SPBSVX_, _SPBSV_, 
                       _SPBTF2, _SPBTF2_, _SPBTRF, _SPBTRF_, _SPBTRS, _SPBTRS_, 
                       _SPFTRF, _SPFTRF_, _SPFTRI, _SPFTRI_, _SPFTRS, _SPFTRS_, 
                       _SPOCON, _SPOCON_, _SPOEQU, _SPOEQUB, _SPOEQUB_, 
                       _SPOEQU_, _SPORFS, _SPORFS_, _SPOSV, _SPOSVX, _SPOSVX_, 
                       _SPOSV_, _SPOTF2, _SPOTF2_, _SPOTRF, _SPOTRF_, _SPOTRI, 
                       _SPOTRI_, _SPOTRS, _SPOTRS_, _SPPCON, _SPPCON_, 
                       _SPPEQU, _SPPEQU_, _SPPRFS, _SPPRFS_, _SPPSV, _SPPSVX, 
                       _SPPSVX_, _SPPSV_, _SPPTRF, _SPPTRF_, _SPPTRI, _SPPTRI_, 
                       _SPPTRS, _SPPTRS_, _SPSTF2, _SPSTF2_, _SPSTRF, _SPSTRF_, 
                       _SPTCON, _SPTCON_, _SPTEQR, _SPTEQR_, _SPTRFS, _SPTRFS_, 
                       _SPTSV, _SPTSVX, _SPTSVX_, _SPTSV_, _SPTTRF, _SPTTRF_, 
                       _SPTTRS, _SPTTRS_, _SPTTS2, _SPTTS2_, _SRSCL, _SRSCL_, 
                       _SSBEV, _SSBEVD, _SSBEVD_, _SSBEVX, _SSBEVX_, _SSBEV_, 
                       _SSBGST, _SSBGST_, _SSBGV, _SSBGVD, _SSBGVD_, _SSBGVX, 
                       _SSBGVX_, _SSBGV_, _SSBTRD, _SSBTRD_, _SSFRK, _SSFRK_, 
                       _SSPCON, _SSPCON_, _SSPEV, _SSPEVD, _SSPEVD_, _SSPEVX, 
                       _SSPEVX_, _SSPEV_, _SSPGST, _SSPGST_, _SSPGV, _SSPGVD, 
                       _SSPGVD_, _SSPGVX, _SSPGVX_, _SSPGV_, _SSPRFS, _SSPRFS_, 
                       _SSPSV, _SSPSVX, _SSPSVX_, _SSPSV_, _SSPTRD, _SSPTRD_, 
                       _SSPTRF, _SSPTRF_, _SSPTRI, _SSPTRI_, _SSPTRS, _SSPTRS_, 
                       _SSTEBZ, _SSTEBZ_, _SSTEDC, _SSTEDC_, _SSTEGR, _SSTEGR_, 
                       _SSTEIN, _SSTEIN_, _SSTEMR, _SSTEMR_, _SSTEQR, _SSTEQR_, 
                       _SSTERF, _SSTERF_, _SSTEV, _SSTEVD, _SSTEVD_, _SSTEVR, 
                       _SSTEVR_, _SSTEVX, _SSTEVX_, _SSTEV_, _SSYCON, _SSYCON_, 
                       _SSYEQUB, _SSYEQUB_, _SSYEV, _SSYEVD, _SSYEVD_, 
                       _SSYEVR, _SSYEVR_, _SSYEVX, _SSYEVX_, _SSYEV_, _SSYGS2, 
                       _SSYGS2_, _SSYGST, _SSYGST_, _SSYGV, _SSYGVD, _SSYGVD_, 
                       _SSYGVX, _SSYGVX_, _SSYGV_, _SSYRFS, _SSYRFS_, _SSYSV, 
                       _SSYSVX, _SSYSVX_, _SSYSV_, _SSYTD2, _SSYTD2_, _SSYTF2, 
                       _SSYTF2_, _SSYTRD, _SSYTRD_, _SSYTRF, _SSYTRF_, 
                       _SSYTRI, _SSYTRI_, _SSYTRS, _SSYTRS_, _STBCON, _STBCON_, 
                       _STBRFS, _STBRFS_, _STBTRS, _STBTRS_, _STFSM, _STFSM_, 
                       _STFTRI, _STFTRI_, _STFTTP, _STFTTP_, _STFTTR, _STFTTR_, 
                       _STGEVC, _STGEVC_, _STGEX2, _STGEX2_, _STGEXC, _STGEXC_, 
                       _STGSEN, _STGSEN_, _STGSJA, _STGSJA_, _STGSNA, _STGSNA_, 
                       _STGSY2, _STGSY2_, _STGSYL, _STGSYL_, _STPCON, _STPCON_, 
                       _STPRFS, _STPRFS_, _STPTRI, _STPTRI_, _STPTRS, _STPTRS_, 
                       _STPTTF, _STPTTF_, _STPTTR, _STPTTR_, _STRCON, _STRCON_, 
                       _STREVC, _STREVC_, _STREXC, _STREXC_, _STRRFS, _STRRFS_, 
                       _STRSEN, _STRSEN_, _STRSNA, _STRSNA_, _STRSYL, _STRSYL_, 
                       _STRTI2, _STRTI2_, _STRTRI, _STRTRI_, _STRTRS, _STRTRS_, 
                       _STRTTF, _STRTTF_, _STRTTP, _STRTTP_, _STZRQF, _STZRQF_, 
                       _STZRZF, _STZRZF_, _ZBDSQR, _ZBDSQR_, _ZCGESV, _ZCGESV_, 
                       _ZCPOSV, _ZCPOSV_, _ZDRSCL, _ZDRSCL_, _ZGBBRD, _ZGBBRD_, 
                       _ZGBCON, _ZGBCON_, _ZGBEQU, _ZGBEQUB, _ZGBEQUB_, 
                       _ZGBEQU_, _ZGBRFS, _ZGBRFS_, _ZGBSV, _ZGBSVX, _ZGBSVX_, 
                       _ZGBSV_, _ZGBTF2, _ZGBTF2_, _ZGBTRF, _ZGBTRF_, _ZGBTRS, 
                       _ZGBTRS_, _ZGEBAK, _ZGEBAK_, _ZGEBAL, _ZGEBAL_, 
                       _ZGEBD2, _ZGEBD2_, _ZGEBRD, _ZGEBRD_, _ZGECON, _ZGECON_, 
                       _ZGEEQU, _ZGEEQUB, _ZGEEQUB_, _ZGEEQU_, _ZGEES, 
                       _ZGEESX, _ZGEESX_, _ZGEES_, _ZGEEV, _ZGEEVX, _ZGEEVX_, 
                       _ZGEEV_, _ZGEGS, _ZGEGS_, _ZGEGV, _ZGEGV_, _ZGEHD2, 
                       _ZGEHD2_, _ZGEHRD, _ZGEHRD_, _ZGELQ2, _ZGELQ2_, 
                       _ZGELQF, _ZGELQF_, _ZGELS, _ZGELSD, _ZGELSD_, _ZGELSS, 
                       _ZGELSS_, _ZGELSX, _ZGELSX_, _ZGELSY, _ZGELSY_, 
                       _ZGELS_, _ZGEQL2, _ZGEQL2_, _ZGEQLF, _ZGEQLF_, _ZGEQP3, 
                       _ZGEQP3_, _ZGEQPF, _ZGEQPF_, _ZGEQR2, _ZGEQR2_, 
                       _ZGEQRF, _ZGEQRF_, _ZGERFS, _ZGERFS_, _ZGERQ2, _ZGERQ2_, 
                       _ZGERQF, _ZGERQF_, _ZGESC2, _ZGESC2_, _ZGESDD, _ZGESDD_, 
                       _ZGESV, _ZGESVD, _ZGESVD_, _ZGESVX, _ZGESVX_, _ZGESV_, 
                       _ZGETC2, _ZGETC2_, _ZGETF2, _ZGETF2_, _ZGETRF, _ZGETRF_, 
                       _ZGETRI, _ZGETRI_, _ZGETRS, _ZGETRS_, _ZGGBAK, _ZGGBAK_, 
                       _ZGGBAL, _ZGGBAL_, _ZGGES, _ZGGESX, _ZGGESX_, _ZGGES_, 
                       _ZGGEV, _ZGGEVX, _ZGGEVX_, _ZGGEV_, _ZGGGLM, _ZGGGLM_, 
                       _ZGGHRD, _ZGGHRD_, _ZGGLSE, _ZGGLSE_, _ZGGQRF, _ZGGQRF_, 
                       _ZGGRQF, _ZGGRQF_, _ZGGSVD, _ZGGSVD_, _ZGGSVP, _ZGGSVP_, 
                       _ZGTCON, _ZGTCON_, _ZGTRFS, _ZGTRFS_, _ZGTSV, _ZGTSVX, 
                       _ZGTSVX_, _ZGTSV_, _ZGTTRF, _ZGTTRF_, _ZGTTRS, _ZGTTRS_, 
                       _ZGTTS2, _ZGTTS2_, _ZHBEV, _ZHBEVD, _ZHBEVD_, _ZHBEVX, 
                       _ZHBEVX_, _ZHBEV_, _ZHBGST, _ZHBGST_, _ZHBGV, _ZHBGVD, 
                       _ZHBGVD_, _ZHBGVX, _ZHBGVX_, _ZHBGV_, _ZHBTRD, _ZHBTRD_, 
                       _ZHECON, _ZHECON_, _ZHEEQUB, _ZHEEQUB_, _ZHEEV, 
                       _ZHEEVD, _ZHEEVD_, _ZHEEVR, _ZHEEVR_, _ZHEEVX, _ZHEEVX_, 
                       _ZHEEV_, _ZHEGS2, _ZHEGS2_, _ZHEGST, _ZHEGST_, _ZHEGV, 
                       _ZHEGVD, _ZHEGVD_, _ZHEGVX, _ZHEGVX_, _ZHEGV_, _ZHERFS, 
                       _ZHERFS_, _ZHESV, _ZHESVX, _ZHESVX_, _ZHESV_, _ZHETD2, 
                       _ZHETD2_, _ZHETF2, _ZHETF2_, _ZHETRD, _ZHETRD_, 
                       _ZHETRF, _ZHETRF_, _ZHETRI, _ZHETRI_, _ZHETRS, _ZHETRS_, 
                       _ZHFRK, _ZHFRK_, _ZHGEQZ, _ZHGEQZ_, _ZHPCON, _ZHPCON_, 
                       _ZHPEV, _ZHPEVD, _ZHPEVD_, _ZHPEVX, _ZHPEVX_, _ZHPEV_, 
                       _ZHPGST, _ZHPGST_, _ZHPGV, _ZHPGVD, _ZHPGVD_, _ZHPGVX, 
                       _ZHPGVX_, _ZHPGV_, _ZHPRFS, _ZHPRFS_, _ZHPSV, _ZHPSVX, 
                       _ZHPSVX_, _ZHPSV_, _ZHPTRD, _ZHPTRD_, _ZHPTRF, _ZHPTRF_, 
                       _ZHPTRI, _ZHPTRI_, _ZHPTRS, _ZHPTRS_, _ZHSEIN, _ZHSEIN_, 
                       _ZHSEQR, _ZHSEQR_, _ZLABRD, _ZLABRD_, _ZLACGV, _ZLACGV_, 
                       _ZLACN2, _ZLACN2_, _ZLACON, _ZLACON_, _ZLACP2, _ZLACP2_, 
                       _ZLACPY, _ZLACPY_, _ZLACRM, _ZLACRM_, _ZLACRT, _ZLACRT_, 
                       _ZLADIV, _ZLADIV_, _ZLAED0, _ZLAED0_, _ZLAED7, _ZLAED7_, 
                       _ZLAED8, _ZLAED8_, _ZLAEIN, _ZLAEIN_, _ZLAESY, _ZLAESY_, 
                       _ZLAEV2, _ZLAEV2_, _ZLAG2C, _ZLAG2C_, _ZLAGS2, _ZLAGS2_, 
                       _ZLAGTM, _ZLAGTM_, _ZLAHEF, _ZLAHEF_, _ZLAHQR, _ZLAHQR_, 
                       _ZLAHR2, _ZLAHR2_, _ZLAHRD, _ZLAHRD_, _ZLAIC1, _ZLAIC1_, 
                       _ZLALS0, _ZLALS0_, _ZLALSA, _ZLALSA_, _ZLALSD, _ZLALSD_, 
                       _ZLANGB, _ZLANGB_, _ZLANGE, _ZLANGE_, _ZLANGT, _ZLANGT_, 
                       _ZLANHB, _ZLANHB_, _ZLANHE, _ZLANHE_, _ZLANHF, _ZLANHF_, 
                       _ZLANHP, _ZLANHP_, _ZLANHS, _ZLANHS_, _ZLANHT, _ZLANHT_, 
                       _ZLANSB, _ZLANSB_, _ZLANSP, _ZLANSP_, _ZLANSY, _ZLANSY_, 
                       _ZLANTB, _ZLANTB_, _ZLANTP, _ZLANTP_, _ZLANTR, _ZLANTR_, 
                       _ZLAPLL, _ZLAPLL_, _ZLAPMT, _ZLAPMT_, _ZLAQGB, _ZLAQGB_, 
                       _ZLAQGE, _ZLAQGE_, _ZLAQHB, _ZLAQHB_, _ZLAQHE, _ZLAQHE_, 
                       _ZLAQHP, _ZLAQHP_, _ZLAQP2, _ZLAQP2_, _ZLAQPS, _ZLAQPS_, 
                       _ZLAQR0, _ZLAQR0_, _ZLAQR1, _ZLAQR1_, _ZLAQR2, _ZLAQR2_, 
                       _ZLAQR3, _ZLAQR3_, _ZLAQR4, _ZLAQR4_, _ZLAQR5, _ZLAQR5_, 
                       _ZLAQSB, _ZLAQSB_, _ZLAQSP, _ZLAQSP_, _ZLAQSY, _ZLAQSY_, 
                       _ZLAR1V, _ZLAR1V_, _ZLAR2V, _ZLAR2V_, _ZLARCM, _ZLARCM_, 
                       _ZLARF, _ZLARFB, _ZLARFB_, _ZLARFG, _ZLARFG_, _ZLARFP, 
                       _ZLARFP_, _ZLARFT, _ZLARFT_, _ZLARFX, _ZLARFX_, 
                       _ZLARF_, _ZLARGV, _ZLARGV_, _ZLARNV, _ZLARNV_, _ZLARRV, 
                       _ZLARRV_, _ZLARSCL2, _ZLARSCL2_, _ZLARTG, _ZLARTG_, 
                       _ZLARTV, _ZLARTV_, _ZLARZ, _ZLARZB, _ZLARZB_, _ZLARZT, 
                       _ZLARZT_, _ZLARZ_, _ZLASCL, _ZLASCL2, _ZLASCL2_, 
                       _ZLASCL_, _ZLASET, _ZLASET_, _ZLASR, _ZLASR_, _ZLASSQ, 
                       _ZLASSQ_, _ZLASWP, _ZLASWP_, _ZLASYF, _ZLASYF_, 
                       _ZLAT2C, _ZLAT2C_, _ZLATBS, _ZLATBS_, _ZLATDF, _ZLATDF_, 
                       _ZLATPS, _ZLATPS_, _ZLATRD, _ZLATRD_, _ZLATRS, _ZLATRS_, 
                       _ZLATRZ, _ZLATRZ_, _ZLATZM, _ZLATZM_, _ZLAUU2, _ZLAUU2_, 
                       _ZLAUUM, _ZLAUUM_, _ZPBCON, _ZPBCON_, _ZPBEQU, _ZPBEQU_, 
                       _ZPBRFS, _ZPBRFS_, _ZPBSTF, _ZPBSTF_, _ZPBSV, _ZPBSVX, 
                       _ZPBSVX_, _ZPBSV_, _ZPBTF2, _ZPBTF2_, _ZPBTRF, _ZPBTRF_, 
                       _ZPBTRS, _ZPBTRS_, _ZPFTRF, _ZPFTRF_, _ZPFTRI, _ZPFTRI_, 
                       _ZPFTRS, _ZPFTRS_, _ZPOCON, _ZPOCON_, _ZPOEQU, _ZPOEQUB, 
                       _ZPOEQUB_, _ZPOEQU_, _ZPORFS, _ZPORFS_, _ZPOSV, 
                       _ZPOSVX, _ZPOSVX_, _ZPOSV_, _ZPOTF2, _ZPOTF2_, _ZPOTRF, 
                       _ZPOTRF_, _ZPOTRI, _ZPOTRI_, _ZPOTRS, _ZPOTRS_, 
                       _ZPPCON, _ZPPCON_, _ZPPEQU, _ZPPEQU_, _ZPPRFS, _ZPPRFS_, 
                       _ZPPSV, _ZPPSVX, _ZPPSVX_, _ZPPSV_, _ZPPTRF, _ZPPTRF_, 
                       _ZPPTRI, _ZPPTRI_, _ZPPTRS, _ZPPTRS_, _ZPSTF2, _ZPSTF2_, 
                       _ZPSTRF, _ZPSTRF_, _ZPTCON, _ZPTCON_, _ZPTEQR, _ZPTEQR_, 
                       _ZPTRFS, _ZPTRFS_, _ZPTSV, _ZPTSVX, _ZPTSVX_, _ZPTSV_, 
                       _ZPTTRF, _ZPTTRF_, _ZPTTRS, _ZPTTRS_, _ZPTTS2, _ZPTTS2_, 
                       _ZROT, _ZROT_, _ZSPCON, _ZSPCON_, _ZSPMV, _ZSPMV_, 
                       _ZSPR, _ZSPRFS, _ZSPRFS_, _ZSPR_, _ZSPSV, _ZSPSVX, 
                       _ZSPSVX_, _ZSPSV_, _ZSPTRF, _ZSPTRF_, _ZSPTRI, _ZSPTRI_, 
                       _ZSPTRS, _ZSPTRS_, _ZSTEDC, _ZSTEDC_, _ZSTEGR, _ZSTEGR_, 
                       _ZSTEIN, _ZSTEIN_, _ZSTEMR, _ZSTEMR_, _ZSTEQR, _ZSTEQR_, 
                       _ZSYCON, _ZSYCON_, _ZSYEQUB, _ZSYEQUB_, _ZSYMV, 
                       _ZSYMV_, _ZSYR, _ZSYRFS, _ZSYRFS_, _ZSYR_, _ZSYSV, 
                       _ZSYSVX, _ZSYSVX_, _ZSYSV_, _ZSYTF2, _ZSYTF2_, _ZSYTRF, 
                       _ZSYTRF_, _ZSYTRI, _ZSYTRI_, _ZSYTRS, _ZSYTRS_, 
                       _ZTBCON, _ZTBCON_, _ZTBRFS, _ZTBRFS_, _ZTBTRS, _ZTBTRS_, 
                       _ZTFSM, _ZTFSM_, _ZTFTRI, _ZTFTRI_, _ZTFTTP, _ZTFTTP_, 
                       _ZTFTTR, _ZTFTTR_, _ZTGEVC, _ZTGEVC_, _ZTGEX2, _ZTGEX2_, 
                       _ZTGEXC, _ZTGEXC_, _ZTGSEN, _ZTGSEN_, _ZTGSJA, _ZTGSJA_, 
                       _ZTGSNA, _ZTGSNA_, _ZTGSY2, _ZTGSY2_, _ZTGSYL, _ZTGSYL_, 
                       _ZTPCON, _ZTPCON_, _ZTPRFS, _ZTPRFS_, _ZTPTRI, _ZTPTRI_, 
                       _ZTPTRS, _ZTPTRS_, _ZTPTTF, _ZTPTTF_, _ZTPTTR, _ZTPTTR_, 
                       _ZTRCON, _ZTRCON_, _ZTREVC, _ZTREVC_, _ZTREXC, _ZTREXC_, 
                       _ZTRRFS, _ZTRRFS_, _ZTRSEN, _ZTRSEN_, _ZTRSNA, _ZTRSNA_, 
                       _ZTRSYL, _ZTRSYL_, _ZTRTI2, _ZTRTI2_, _ZTRTRI, _ZTRTRI_, 
                       _ZTRTRS, _ZTRTRS_, _ZTRTTF, _ZTRTTF_, _ZTRTTP, _ZTRTTP_, 
                       _ZTZRQF, _ZTZRQF_, _ZTZRZF, _ZTZRZF_, _ZUNG2L, _ZUNG2L_, 
                       _ZUNG2R, _ZUNG2R_, _ZUNGBR, _ZUNGBR_, _ZUNGHR, _ZUNGHR_, 
                       _ZUNGL2, _ZUNGL2_, _ZUNGLQ, _ZUNGLQ_, _ZUNGQL, _ZUNGQL_, 
                       _ZUNGQR, _ZUNGQR_, _ZUNGR2, _ZUNGR2_, _ZUNGRQ, _ZUNGRQ_, 
                       _ZUNGTR, _ZUNGTR_, _ZUNM2L, _ZUNM2L_, _ZUNM2R, _ZUNM2R_, 
                       _ZUNMBR, _ZUNMBR_, _ZUNMHR, _ZUNMHR_, _ZUNML2, _ZUNML2_, 
                       _ZUNMLQ, _ZUNMLQ_, _ZUNMQL, _ZUNMQL_, _ZUNMQR, _ZUNMQR_, 
                       _ZUNMR2, _ZUNMR2_, _ZUNMR3, _ZUNMR3_, _ZUNMRQ, _ZUNMRQ_, 
                       _ZUNMRZ, _ZUNMRZ_, _ZUNMTR, _ZUNMTR_, _ZUPGTR, _ZUPGTR_, 
                       _ZUPMTR, _ZUPMTR_, _cbdsqr, _cbdsqr_, _cgbbrd, _cgbbrd_, 
                       _cgbcon, _cgbcon_, _cgbequ, _cgbequ_, _cgbequb, 
                       _cgbequb_, _cgbrfs, _cgbrfs_, _cgbsv, _cgbsv_, _cgbsvx, 
                       _cgbsvx_, _cgbtf2, _cgbtf2_, _cgbtrf, _cgbtrf_, 
                       _cgbtrs, _cgbtrs_, _cgebak, _cgebak_, _cgebal, _cgebal_, 
                       _cgebd2, _cgebd2_, _cgebrd, _cgebrd_, _cgecon, _cgecon_, 
                       _cgeequ, _cgeequ_, _cgeequb, _cgeequb_, _cgees, 
                       _cgees_, _cgeesx, _cgeesx_, _cgeev, _cgeev_, _cgeevx, 
                       _cgeevx_, _cgegs, _cgegs_, _cgegv, _cgegv_, _cgehd2, 
                       _cgehd2_, _cgehrd, _cgehrd_, _cgelq2, _cgelq2_, 
                       _cgelqf, _cgelqf_, _cgels, _cgels_, _cgelsd, _cgelsd_, 
                       _cgelss, _cgelss_, _cgelsx, _cgelsx_, _cgelsy, _cgelsy_, 
                       _cgeql2, _cgeql2_, _cgeqlf, _cgeqlf_, _cgeqp3, _cgeqp3_, 
                       _cgeqpf, _cgeqpf_, _cgeqr2, _cgeqr2_, _cgeqrf, _cgeqrf_, 
                       _cgerfs, _cgerfs_, _cgerq2, _cgerq2_, _cgerqf, _cgerqf_, 
                       _cgesc2, _cgesc2_, _cgesdd, _cgesdd_, _cgesv, _cgesv_, 
                       _cgesvd, _cgesvd_, _cgesvx, _cgesvx_, _cgetc2, _cgetc2_, 
                       _cgetf2, _cgetf2_, _cgetrf, _cgetrf_, _cgetri, _cgetri_, 
                       _cgetrs, _cgetrs_, _cggbak, _cggbak_, _cggbal, _cggbal_, 
                       _cgges, _cgges_, _cggesx, _cggesx_, _cggev, _cggev_, 
                       _cggevx, _cggevx_, _cggglm, _cggglm_, _cgghrd, _cgghrd_, 
                       _cgglse, _cgglse_, _cggqrf, _cggqrf_, _cggrqf, _cggrqf_, 
                       _cggsvd, _cggsvd_, _cggsvp, _cggsvp_, _cgtcon, _cgtcon_, 
                       _cgtrfs, _cgtrfs_, _cgtsv, _cgtsv_, _cgtsvx, _cgtsvx_, 
                       _cgttrf, _cgttrf_, _cgttrs, _cgttrs_, _cgtts2, _cgtts2_, 
                       _chbev, _chbev_, _chbevd, _chbevd_, _chbevx, _chbevx_, 
                       _chbgst, _chbgst_, _chbgv, _chbgv_, _chbgvd, _chbgvd_, 
                       _chbgvx, _chbgvx_, _chbtrd, _chbtrd_, _checon, _checon_, 
                       _cheequb, _cheequb_, _cheev, _cheev_, _cheevd, _cheevd_, 
                       _cheevr, _cheevr_, _cheevx, _cheevx_, _chegs2, _chegs2_, 
                       _chegst, _chegst_, _chegv, _chegv_, _chegvd, _chegvd_, 
                       _chegvx, _chegvx_, _cherfs, _cherfs_, _chesv, _chesv_, 
                       _chesvx, _chesvx_, _chetd2, _chetd2_, _chetf2, _chetf2_, 
                       _chetrd, _chetrd_, _chetrf, _chetrf_, _chetri, _chetri_, 
                       _chetrs, _chetrs_, _chfrk, _chfrk_, _chgeqz, _chgeqz_, 
                       _chla_transtype__, _chpcon, _chpcon_, _chpev, _chpev_, 
                       _chpevd, _chpevd_, _chpevx, _chpevx_, _chpgst, _chpgst_, 
                       _chpgv, _chpgv_, _chpgvd, _chpgvd_, _chpgvx, _chpgvx_, 
                       _chprfs, _chprfs_, _chpsv, _chpsv_, _chpsvx, _chpsvx_, 
                       _chptrd, _chptrd_, _chptrf, _chptrf_, _chptri, _chptri_, 
                       _chptrs, _chptrs_, _chsein, _chsein_, _chseqr, _chseqr_, 
                       _clabrd, _clabrd_, _clacgv, _clacgv_, _clacn2, _clacn2_, 
                       _clacon, _clacon_, _clacp2, _clacp2_, _clacpy, _clacpy_, 
                       _clacrm, _clacrm_, _clacrt, _clacrt_, _cladiv, _cladiv_, 
                       _claed0, _claed0_, _claed7, _claed7_, _claed8, _claed8_, 
                       _claein, _claein_, _claesy, _claesy_, _claev2, _claev2_, 
                       _clag2z, _clag2z_, _clags2, _clags2_, _clagtm, _clagtm_, 
                       _clahef, _clahef_, _clahqr, _clahqr_, _clahr2, _clahr2_, 
                       _clahrd, _clahrd_, _claic1, _claic1_, _clals0, _clals0_, 
                       _clalsa, _clalsa_, _clalsd, _clalsd_, _clangb, _clangb_, 
                       _clange, _clange_, _clangt, _clangt_, _clanhb, _clanhb_, 
                       _clanhe, _clanhe_, _clanhf, _clanhf_, _clanhp, _clanhp_, 
                       _clanhs, _clanhs_, _clanht, _clanht_, _clansb, _clansb_, 
                       _clansp, _clansp_, _clansy, _clansy_, _clantb, _clantb_, 
                       _clantp, _clantp_, _clantr, _clantr_, _clapll, _clapll_, 
                       _clapmt, _clapmt_, _claqgb, _claqgb_, _claqge, _claqge_, 
                       _claqhb, _claqhb_, _claqhe, _claqhe_, _claqhp, _claqhp_, 
                       _claqp2, _claqp2_, _claqps, _claqps_, _claqr0, _claqr0_, 
                       _claqr1, _claqr1_, _claqr2, _claqr2_, _claqr3, _claqr3_, 
                       _claqr4, _claqr4_, _claqr5, _claqr5_, _claqsb, _claqsb_, 
                       _claqsp, _claqsp_, _claqsy, _claqsy_, _clar1v, _clar1v_, 
                       _clar2v, _clar2v_, _clarcm, _clarcm_, _clarf, _clarf_, 
                       _clarfb, _clarfb_, _clarfg, _clarfg_, _clarfp, _clarfp_, 
                       _clarft, _clarft_, _clarfx, _clarfx_, _clargv, _clargv_, 
                       _clarnv, _clarnv_, _clarrv, _clarrv_, _clarscl2, 
                       _clarscl2_, _clartg, _clartg_, _clartv, _clartv_, 
                       _clarz, _clarz_, _clarzb, _clarzb_, _clarzt, _clarzt_, 
                       _clascl, _clascl2, _clascl2_, _clascl_, _claset, 
                       _claset_, _clasr, _clasr_, _classq, _classq_, _claswp, 
                       _claswp_, _clasyf, _clasyf_, _clatbs, _clatbs_, 
                       _clatdf, _clatdf_, _clatps, _clatps_, _clatrd, _clatrd_, 
                       _clatrs, _clatrs_, _clatrz, _clatrz_, _clatzm, _clatzm_, 
                       _clauu2, _clauu2_, _clauum, _clauum_, _cpbcon, _cpbcon_, 
                       _cpbequ, _cpbequ_, _cpbrfs, _cpbrfs_, _cpbstf, _cpbstf_, 
                       _cpbsv, _cpbsv_, _cpbsvx, _cpbsvx_, _cpbtf2, _cpbtf2_, 
                       _cpbtrf, _cpbtrf_, _cpbtrs, _cpbtrs_, _cpftrf, _cpftrf_, 
                       _cpftri, _cpftri_, _cpftrs, _cpftrs_, _cpocon, _cpocon_, 
                       _cpoequ, _cpoequ_, _cpoequb, _cpoequb_, _cporfs, 
                       _cporfs_, _cposv, _cposv_, _cposvx, _cposvx_, _cpotf2, 
                       _cpotf2_, _cpotrf, _cpotrf_, _cpotri, _cpotri_, 
                       _cpotrs, _cpotrs_, _cppcon, _cppcon_, _cppequ, _cppequ_, 
                       _cpprfs, _cpprfs_, _cppsv, _cppsv_, _cppsvx, _cppsvx_, 
                       _cpptrf, _cpptrf_, _cpptri, _cpptri_, _cpptrs, _cpptrs_, 
                       _cpstf2, _cpstf2_, _cpstrf, _cpstrf_, _cptcon, _cptcon_, 
                       _cpteqr, _cpteqr_, _cptrfs, _cptrfs_, _cptsv, _cptsv_, 
                       _cptsvx, _cptsvx_, _cpttrf, _cpttrf_, _cpttrs, _cpttrs_, 
                       _cptts2, _cptts2_, _crot, _crot_, _cspcon, _cspcon_, 
                       _cspmv, _cspmv_, _cspr, _cspr_, _csprfs, _csprfs_, 
                       _cspsv, _cspsv_, _cspsvx, _cspsvx_, _csptrf, _csptrf_, 
                       _csptri, _csptri_, _csptrs, _csptrs_, _csrscl, _csrscl_, 
                       _cstedc, _cstedc_, _cstegr, _cstegr_, _cstein, _cstein_, 
                       _cstemr, _cstemr_, _csteqr, _csteqr_, _csycon, _csycon_, 
                       _csyequb, _csyequb_, _csymv, _csymv_, _csyr, _csyr_, 
                       _csyrfs, _csyrfs_, _csysv, _csysv_, _csysvx, _csysvx_, 
                       _csytf2, _csytf2_, _csytrf, _csytrf_, _csytri, _csytri_, 
                       _csytrs, _csytrs_, _ctbcon, _ctbcon_, _ctbrfs, _ctbrfs_, 
                       _ctbtrs, _ctbtrs_, _ctfsm, _ctfsm_, _ctftri, _ctftri_, 
                       _ctfttp, _ctfttp_, _ctfttr, _ctfttr_, _ctgevc, _ctgevc_, 
                       _ctgex2, _ctgex2_, _ctgexc, _ctgexc_, _ctgsen, _ctgsen_, 
                       _ctgsja, _ctgsja_, _ctgsna, _ctgsna_, _ctgsy2, _ctgsy2_, 
                       _ctgsyl, _ctgsyl_, _ctpcon, _ctpcon_, _ctprfs, _ctprfs_, 
                       _ctptri, _ctptri_, _ctptrs, _ctptrs_, _ctpttf, _ctpttf_, 
                       _ctpttr, _ctpttr_, _ctrcon, _ctrcon_, _ctrevc, _ctrevc_, 
                       _ctrexc, _ctrexc_, _ctrrfs, _ctrrfs_, _ctrsen, _ctrsen_, 
                       _ctrsna, _ctrsna_, _ctrsyl, _ctrsyl_, _ctrti2, _ctrti2_, 
                       _ctrtri, _ctrtri_, _ctrtrs, _ctrtrs_, _ctrttf, _ctrttf_, 
                       _ctrttp, _ctrttp_, _ctzrqf, _ctzrqf_, _ctzrzf, _ctzrzf_, 
                       _cung2l, _cung2l_, _cung2r, _cung2r_, _cungbr, _cungbr_, 
                       _cunghr, _cunghr_, _cungl2, _cungl2_, _cunglq, _cunglq_, 
                       _cungql, _cungql_, _cungqr, _cungqr_, _cungr2, _cungr2_, 
                       _cungrq, _cungrq_, _cungtr, _cungtr_, _cunm2l, _cunm2l_, 
                       _cunm2r, _cunm2r_, _cunmbr, _cunmbr_, _cunmhr, _cunmhr_, 
                       _cunml2, _cunml2_, _cunmlq, _cunmlq_, _cunmql, _cunmql_, 
                       _cunmqr, _cunmqr_, _cunmr2, _cunmr2_, _cunmr3, _cunmr3_, 
                       _cunmrq, _cunmrq_, _cunmrz, _cunmrz_, _cunmtr, _cunmtr_, 
                       _cupgtr, _cupgtr_, _cupmtr, _cupmtr_, _dbdsdc, _dbdsdc_, 
                       _dbdsqr, _dbdsqr_, _ddisna, _ddisna_, _dgbbrd, _dgbbrd_, 
                       _dgbcon, _dgbcon_, _dgbequ, _dgbequ_, _dgbequb, 
                       _dgbequb_, _dgbrfs, _dgbrfs_, _dgbsv, _dgbsv_, _dgbsvx, 
                       _dgbsvx_, _dgbtf2, _dgbtf2_, _dgbtrf, _dgbtrf_, 
                       _dgbtrs, _dgbtrs_, _dgebak, _dgebak_, _dgebal, _dgebal_, 
                       _dgebd2, _dgebd2_, _dgebrd, _dgebrd_, _dgecon, _dgecon_, 
                       _dgeequ, _dgeequ_, _dgeequb, _dgeequb_, _dgees, 
                       _dgees_, _dgeesx, _dgeesx_, _dgeev, _dgeev_, _dgeevx, 
                       _dgeevx_, _dgegs, _dgegs_, _dgegv, _dgegv_, _dgehd2, 
                       _dgehd2_, _dgehrd, _dgehrd_, _dgejsv, _dgejsv_, 
                       _dgelq2, _dgelq2_, _dgelqf, _dgelqf_, _dgels, _dgels_, 
                       _dgelsd, _dgelsd_, _dgelss, _dgelss_, _dgelsx, _dgelsx_, 
                       _dgelsy, _dgelsy_, _dgeql2, _dgeql2_, _dgeqlf, _dgeqlf_, 
                       _dgeqp3, _dgeqp3_, _dgeqpf, _dgeqpf_, _dgeqr2, _dgeqr2_, 
                       _dgeqrf, _dgeqrf_, _dgerfs, _dgerfs_, _dgerq2, _dgerq2_, 
                       _dgerqf, _dgerqf_, _dgesc2, _dgesc2_, _dgesdd, _dgesdd_, 
                       _dgesv, _dgesv_, _dgesvd, _dgesvd_, _dgesvj, _dgesvj_, 
                       _dgesvx, _dgesvx_, _dgetc2, _dgetc2_, _dgetf2, _dgetf2_, 
                       _dgetrf, _dgetrf_, _dgetri, _dgetri_, _dgetrs, _dgetrs_, 
                       _dggbak, _dggbak_, _dggbal, _dggbal_, _dgges, _dgges_, 
                       _dggesx, _dggesx_, _dggev, _dggev_, _dggevx, _dggevx_, 
                       _dggglm, _dggglm_, _dgghrd, _dgghrd_, _dgglse, _dgglse_, 
                       _dggqrf, _dggqrf_, _dggrqf, _dggrqf_, _dggsvd, _dggsvd_, 
                       _dggsvp, _dggsvp_, _dgsvj0, _dgsvj0_, _dgsvj1, _dgsvj1_, 
                       _dgtcon, _dgtcon_, _dgtrfs, _dgtrfs_, _dgtsv, _dgtsv_, 
                       _dgtsvx, _dgtsvx_, _dgttrf, _dgttrf_, _dgttrs, _dgttrs_, 
                       _dgtts2, _dgtts2_, _dhgeqz, _dhgeqz_, _dhsein, _dhsein_, 
                       _dhseqr, _dhseqr_, _disnan, _disnan_, _dlabad, _dlabad_, 
                       _dlabrd, _dlabrd_, _dlacn2, _dlacn2_, _dlacon, _dlacon_, 
                       _dlacpy, _dlacpy_, _dladiv, _dladiv_, _dlae2, _dlae2_, 
                       _dlaebz, _dlaebz_, _dlaed0, _dlaed0_, _dlaed1, _dlaed1_, 
                       _dlaed2, _dlaed2_, _dlaed3, _dlaed3_, _dlaed4, _dlaed4_, 
                       _dlaed5, _dlaed5_, _dlaed6, _dlaed6_, _dlaed7, _dlaed7_, 
                       _dlaed8, _dlaed8_, _dlaed9, _dlaed9_, _dlaeda, _dlaeda_, 
                       _dlaein, _dlaein_, _dlaev2, _dlaev2_, _dlaexc, _dlaexc_, 
                       _dlag2, _dlag2_, _dlag2s, _dlag2s_, _dlags2, _dlags2_, 
                       _dlagtf, _dlagtf_, _dlagtm, _dlagtm_, _dlagts, _dlagts_, 
                       _dlagv2, _dlagv2_, _dlahqr, _dlahqr_, _dlahr2, _dlahr2_, 
                       _dlahrd, _dlahrd_, _dlaic1, _dlaic1_, _dlaisnan, 
                       _dlaisnan_, _dlaln2, _dlaln2_, _dlals0, _dlals0_, 
                       _dlalsa, _dlalsa_, _dlalsd, _dlalsd_, _dlamc1, _dlamc1_, 
                       _dlamc2, _dlamc2_, _dlamc3, _dlamc3_, _dlamc4, _dlamc4_, 
                       _dlamc5, _dlamc5_, _dlamch, _dlamch_, _dlamrg, _dlamrg_, 
                       _dlaneg, _dlaneg_, _dlangb, _dlangb_, _dlange, _dlange_, 
                       _dlangt, _dlangt_, _dlanhs, _dlanhs_, _dlansb, _dlansb_, 
                       _dlansf, _dlansf_, _dlansp, _dlansp_, _dlanst, _dlanst_, 
                       _dlansy, _dlansy_, _dlantb, _dlantb_, _dlantp, _dlantp_, 
                       _dlantr, _dlantr_, _dlanv2, _dlanv2_, _dlapll, _dlapll_, 
                       _dlapmt, _dlapmt_, _dlapy2, _dlapy2_, _dlapy3, _dlapy3_, 
                       _dlaqgb, _dlaqgb_, _dlaqge, _dlaqge_, _dlaqp2, _dlaqp2_, 
                       _dlaqps, _dlaqps_, _dlaqr0, _dlaqr0_, _dlaqr1, _dlaqr1_, 
                       _dlaqr2, _dlaqr2_, _dlaqr3, _dlaqr3_, _dlaqr4, _dlaqr4_, 
                       _dlaqr5, _dlaqr5_, _dlaqsb, _dlaqsb_, _dlaqsp, _dlaqsp_, 
                       _dlaqsy, _dlaqsy_, _dlaqtr, _dlaqtr_, _dlar1v, _dlar1v_, 
                       _dlar2v, _dlar2v_, _dlarf, _dlarf_, _dlarfb, _dlarfb_, 
                       _dlarfg, _dlarfg_, _dlarfp, _dlarfp_, _dlarft, _dlarft_, 
                       _dlarfx, _dlarfx_, _dlargv, _dlargv_, _dlarnv, _dlarnv_, 
                       _dlarra, _dlarra_, _dlarrb, _dlarrb_, _dlarrc, _dlarrc_, 
                       _dlarrd, _dlarrd_, _dlarre, _dlarre_, _dlarrf, _dlarrf_, 
                       _dlarrj, _dlarrj_, _dlarrk, _dlarrk_, _dlarrr, _dlarrr_, 
                       _dlarrv, _dlarrv_, _dlarscl2, _dlarscl2_, _dlartg, 
                       _dlartg_, _dlartv, _dlartv_, _dlaruv, _dlaruv_, 
                       _dlarz, _dlarz_, _dlarzb, _dlarzb_, _dlarzt, _dlarzt_, 
                       _dlas2, _dlas2_, _dlascl, _dlascl2, _dlascl2_, _dlascl_, 
                       _dlasd0, _dlasd0_, _dlasd1, _dlasd1_, _dlasd2, _dlasd2_, 
                       _dlasd3, _dlasd3_, _dlasd4, _dlasd4_, _dlasd5, _dlasd5_, 
                       _dlasd6, _dlasd6_, _dlasd7, _dlasd7_, _dlasd8, _dlasd8_, 
                       _dlasd9, _dlasd9_, _dlasda, _dlasda_, _dlasdq, _dlasdq_, 
                       _dlasdt, _dlasdt_, _dlaset, _dlaset_, _dlasq1, _dlasq1_, 
                       _dlasq2, _dlasq2_, _dlasq3, _dlasq3_, _dlasq4, _dlasq4_, 
                       _dlasq5, _dlasq5_, _dlasq6, _dlasq6_, _dlasr, _dlasr_, 
                       _dlasrt, _dlasrt_, _dlassq, _dlassq_, _dlasv2, _dlasv2_, 
                       _dlaswp, _dlaswp_, _dlasy2, _dlasy2_, _dlasyf, _dlasyf_, 
                       _dlat2s, _dlat2s_, _dlatbs, _dlatbs_, _dlatdf, _dlatdf_, 
                       _dlatps, _dlatps_, _dlatrd, _dlatrd_, _dlatrs, _dlatrs_, 
                       _dlatrz, _dlatrz_, _dlatzm, _dlatzm_, _dlauu2, _dlauu2_, 
                       _dlauum, _dlauum_, _dopgtr, _dopgtr_, _dopmtr, _dopmtr_, 
                       _dorg2l, _dorg2l_, _dorg2r, _dorg2r_, _dorgbr, _dorgbr_, 
                       _dorghr, _dorghr_, _dorgl2, _dorgl2_, _dorglq, _dorglq_, 
                       _dorgql, _dorgql_, _dorgqr, _dorgqr_, _dorgr2, _dorgr2_, 
                       _dorgrq, _dorgrq_, _dorgtr, _dorgtr_, _dorm2l, _dorm2l_, 
                       _dorm2r, _dorm2r_, _dormbr, _dormbr_, _dormhr, _dormhr_, 
                       _dorml2, _dorml2_, _dormlq, _dormlq_, _dormql, _dormql_, 
                       _dormqr, _dormqr_, _dormr2, _dormr2_, _dormr3, _dormr3_, 
                       _dormrq, _dormrq_, _dormrz, _dormrz_, _dormtr, _dormtr_, 
                       _dpbcon, _dpbcon_, _dpbequ, _dpbequ_, _dpbrfs, _dpbrfs_, 
                       _dpbstf, _dpbstf_, _dpbsv, _dpbsv_, _dpbsvx, _dpbsvx_, 
                       _dpbtf2, _dpbtf2_, _dpbtrf, _dpbtrf_, _dpbtrs, _dpbtrs_, 
                       _dpftrf, _dpftrf_, _dpftri, _dpftri_, _dpftrs, _dpftrs_, 
                       _dpocon, _dpocon_, _dpoequ, _dpoequ_, _dpoequb, 
                       _dpoequb_, _dporfs, _dporfs_, _dposv, _dposv_, _dposvx, 
                       _dposvx_, _dpotf2, _dpotf2_, _dpotrf, _dpotrf_, 
                       _dpotri, _dpotri_, _dpotrs, _dpotrs_, _dppcon, _dppcon_, 
                       _dppequ, _dppequ_, _dpprfs, _dpprfs_, _dppsv, _dppsv_, 
                       _dppsvx, _dppsvx_, _dpptrf, _dpptrf_, _dpptri, _dpptri_, 
                       _dpptrs, _dpptrs_, _dpstf2, _dpstf2_, _dpstrf, _dpstrf_, 
                       _dptcon, _dptcon_, _dpteqr, _dpteqr_, _dptrfs, _dptrfs_, 
                       _dptsv, _dptsv_, _dptsvx, _dptsvx_, _dpttrf, _dpttrf_, 
                       _dpttrs, _dpttrs_, _dptts2, _dptts2_, _drscl, _drscl_, 
                       _dsbev, _dsbev_, _dsbevd, _dsbevd_, _dsbevx, _dsbevx_, 
                       _dsbgst, _dsbgst_, _dsbgv, _dsbgv_, _dsbgvd, _dsbgvd_, 
                       _dsbgvx, _dsbgvx_, _dsbtrd, _dsbtrd_, _dsfrk, _dsfrk_, 
                       _dsgesv, _dsgesv_, _dspcon, _dspcon_, _dspev, _dspev_, 
                       _dspevd, _dspevd_, _dspevx, _dspevx_, _dspgst, _dspgst_, 
                       _dspgv, _dspgv_, _dspgvd, _dspgvd_, _dspgvx, _dspgvx_, 
                       _dsposv, _dsposv_, _dsprfs, _dsprfs_, _dspsv, _dspsv_, 
                       _dspsvx, _dspsvx_, _dsptrd, _dsptrd_, _dsptrf, _dsptrf_, 
                       _dsptri, _dsptri_, _dsptrs, _dsptrs_, _dstebz, _dstebz_, 
                       _dstedc, _dstedc_, _dstegr, _dstegr_, _dstein, _dstein_, 
                       _dstemr, _dstemr_, _dsteqr, _dsteqr_, _dsterf, _dsterf_, 
                       _dstev, _dstev_, _dstevd, _dstevd_, _dstevr, _dstevr_, 
                       _dstevx, _dstevx_, _dsycon, _dsycon_, _dsyequb, 
                       _dsyequb_, _dsyev, _dsyev_, _dsyevd, _dsyevd_, _dsyevr, 
                       _dsyevr_, _dsyevx, _dsyevx_, _dsygs2, _dsygs2_, 
                       _dsygst, _dsygst_, _dsygv, _dsygv_, _dsygvd, _dsygvd_, 
                       _dsygvx, _dsygvx_, _dsyrfs, _dsyrfs_, _dsysv, _dsysv_, 
                       _dsysvx, _dsysvx_, _dsytd2, _dsytd2_, _dsytf2, _dsytf2_, 
                       _dsytrd, _dsytrd_, _dsytrf, _dsytrf_, _dsytri, _dsytri_, 
                       _dsytrs, _dsytrs_, _dtbcon, _dtbcon_, _dtbrfs, _dtbrfs_, 
                       _dtbtrs, _dtbtrs_, _dtfsm, _dtfsm_, _dtftri, _dtftri_, 
                       _dtfttp, _dtfttp_, _dtfttr, _dtfttr_, _dtgevc, _dtgevc_, 
                       _dtgex2, _dtgex2_, _dtgexc, _dtgexc_, _dtgsen, _dtgsen_, 
                       _dtgsja, _dtgsja_, _dtgsna, _dtgsna_, _dtgsy2, _dtgsy2_, 
                       _dtgsyl, _dtgsyl_, _dtpcon, _dtpcon_, _dtprfs, _dtprfs_, 
                       _dtptri, _dtptri_, _dtptrs, _dtptrs_, _dtpttf, _dtpttf_, 
                       _dtpttr, _dtpttr_, _dtrcon, _dtrcon_, _dtrevc, _dtrevc_, 
                       _dtrexc, _dtrexc_, _dtrrfs, _dtrrfs_, _dtrsen, _dtrsen_, 
                       _dtrsna, _dtrsna_, _dtrsyl, _dtrsyl_, _dtrti2, _dtrti2_, 
                       _dtrtri, _dtrtri_, _dtrtrs, _dtrtrs_, _dtrttf, _dtrttf_, 
                       _dtrttp, _dtrttp_, _dtzrqf, _dtzrqf_, _dtzrzf, _dtzrzf_, 
                       _dzsum1, _dzsum1_, _icmax1, _icmax1_, _ieeeck, _ieeeck_, 
                       _ilaclc, _ilaclc_, _ilaclr, _ilaclr_, _iladiag, 
                       _iladiag_, _iladlc, _iladlc_, _iladlr, _iladlr_, 
                       _ilaenv, _ilaenv_, _ilaprec, _ilaprec_, _ilaslc, 
                       _ilaslc_, _ilaslr, _ilaslr_, _ilatrans, _ilatrans_, 
                       _ilauplo, _ilauplo_, _ilaver, _ilaver_, _ilazlc, 
                       _ilazlc_, _ilazlr, _ilazlr_, _iparmq, _iparmq_, 
                       _izmax1, _izmax1_, _lsamen, _lsamen_, _sbdsdc, _sbdsdc_, 
                       _sbdsqr, _sbdsqr_, _scsum1, _scsum1_, _sdisna, _sdisna_, 
                       _sgbbrd, _sgbbrd_, _sgbcon, _sgbcon_, _sgbequ, _sgbequ_, 
                       _sgbequb, _sgbequb_, _sgbrfs, _sgbrfs_, _sgbsv, 
                       _sgbsv_, _sgbsvx, _sgbsvx_, _sgbtf2, _sgbtf2_, _sgbtrf, 
                       _sgbtrf_, _sgbtrs, _sgbtrs_, _sgebak, _sgebak_, 
                       _sgebal, _sgebal_, _sgebd2, _sgebd2_, _sgebrd, _sgebrd_, 
                       _sgecon, _sgecon_, _sgeequ, _sgeequ_, _sgeequb, 
                       _sgeequb_, _sgees, _sgees_, _sgeesx, _sgeesx_, _sgeev, 
                       _sgeev_, _sgeevx, _sgeevx_, _sgegs, _sgegs_, _sgegv, 
                       _sgegv_, _sgehd2, _sgehd2_, _sgehrd, _sgehrd_, _sgejsv, 
                       _sgejsv_, _sgelq2, _sgelq2_, _sgelqf, _sgelqf_, 
                       _sgels, _sgels_, _sgelsd, _sgelsd_, _sgelss, _sgelss_, 
                       _sgelsx, _sgelsx_, _sgelsy, _sgelsy_, _sgeql2, _sgeql2_, 
                       _sgeqlf, _sgeqlf_, _sgeqp3, _sgeqp3_, _sgeqpf, _sgeqpf_, 
                       _sgeqr2, _sgeqr2_, _sgeqrf, _sgeqrf_, _sgerfs, _sgerfs_, 
                       _sgerq2, _sgerq2_, _sgerqf, _sgerqf_, _sgesc2, _sgesc2_, 
                       _sgesdd, _sgesdd_, _sgesv, _sgesv_, _sgesvd, _sgesvd_, 
                       _sgesvj, _sgesvj_, _sgesvx, _sgesvx_, _sgetc2, _sgetc2_, 
                       _sgetf2, _sgetf2_, _sgetrf, _sgetrf_, _sgetri, _sgetri_, 
                       _sgetrs, _sgetrs_, _sggbak, _sggbak_, _sggbal, _sggbal_, 
                       _sgges, _sgges_, _sggesx, _sggesx_, _sggev, _sggev_, 
                       _sggevx, _sggevx_, _sggglm, _sggglm_, _sgghrd, _sgghrd_, 
                       _sgglse, _sgglse_, _sggqrf, _sggqrf_, _sggrqf, _sggrqf_, 
                       _sggsvd, _sggsvd_, _sggsvp, _sggsvp_, _sgsvj0, _sgsvj0_, 
                       _sgsvj1, _sgsvj1_, _sgtcon, _sgtcon_, _sgtrfs, _sgtrfs_, 
                       _sgtsv, _sgtsv_, _sgtsvx, _sgtsvx_, _sgttrf, _sgttrf_, 
                       _sgttrs, _sgttrs_, _sgtts2, _sgtts2_, _shgeqz, _shgeqz_, 
                       _shsein, _shsein_, _shseqr, _shseqr_, _sisnan, _sisnan_, 
                       _slabad, _slabad_, _slabrd, _slabrd_, _slacn2, _slacn2_, 
                       _slacon, _slacon_, _slacpy, _slacpy_, _sladiv, _sladiv_, 
                       _slae2, _slae2_, _slaebz, _slaebz_, _slaed0, _slaed0_, 
                       _slaed1, _slaed1_, _slaed2, _slaed2_, _slaed3, _slaed3_, 
                       _slaed4, _slaed4_, _slaed5, _slaed5_, _slaed6, _slaed6_, 
                       _slaed7, _slaed7_, _slaed8, _slaed8_, _slaed9, _slaed9_, 
                       _slaeda, _slaeda_, _slaein, _slaein_, _slaev2, _slaev2_, 
                       _slaexc, _slaexc_, _slag2, _slag2_, _slag2d, _slag2d_, 
                       _slags2, _slags2_, _slagtf, _slagtf_, _slagtm, _slagtm_, 
                       _slagts, _slagts_, _slagv2, _slagv2_, _slahqr, _slahqr_, 
                       _slahr2, _slahr2_, _slahrd, _slahrd_, _slaic1, _slaic1_, 
                       _slaisnan, _slaisnan_, _slaln2, _slaln2_, _slals0, 
                       _slals0_, _slalsa, _slalsa_, _slalsd, _slalsd_, 
                       _slamc1, _slamc1_, _slamc2, _slamc2_, _slamc3, _slamc3_, 
                       _slamc4, _slamc4_, _slamc5, _slamc5_, _slamch, _slamch_, 
                       _slamrg, _slamrg_, _slaneg, _slaneg_, _slangb, _slangb_, 
                       _slange, _slange_, _slangt, _slangt_, _slanhs, _slanhs_, 
                       _slansb, _slansb_, _slansf, _slansf_, _slansp, _slansp_, 
                       _slanst, _slanst_, _slansy, _slansy_, _slantb, _slantb_, 
                       _slantp, _slantp_, _slantr, _slantr_, _slanv2, _slanv2_, 
                       _slapll, _slapll_, _slapmt, _slapmt_, _slapy2, _slapy2_, 
                       _slapy3, _slapy3_, _slaqgb, _slaqgb_, _slaqge, _slaqge_, 
                       _slaqp2, _slaqp2_, _slaqps, _slaqps_, _slaqr0, _slaqr0_, 
                       _slaqr1, _slaqr1_, _slaqr2, _slaqr2_, _slaqr3, _slaqr3_, 
                       _slaqr4, _slaqr4_, _slaqr5, _slaqr5_, _slaqsb, _slaqsb_, 
                       _slaqsp, _slaqsp_, _slaqsy, _slaqsy_, _slaqtr, _slaqtr_, 
                       _slar1v, _slar1v_, _slar2v, _slar2v_, _slarf, _slarf_, 
                       _slarfb, _slarfb_, _slarfg, _slarfg_, _slarfp, _slarfp_, 
                       _slarft, _slarft_, _slarfx, _slarfx_, _slargv, _slargv_, 
                       _slarnv, _slarnv_, _slarra, _slarra_, _slarrb, _slarrb_, 
                       _slarrc, _slarrc_, _slarrd, _slarrd_, _slarre, _slarre_, 
                       _slarrf, _slarrf_, _slarrj, _slarrj_, _slarrk, _slarrk_, 
                       _slarrr, _slarrr_, _slarrv, _slarrv_, _slarscl2, 
                       _slarscl2_, _slartg, _slartg_, _slartv, _slartv_, 
                       _slaruv, _slaruv_, _slarz, _slarz_, _slarzb, _slarzb_, 
                       _slarzt, _slarzt_, _slas2, _slas2_, _slascl, _slascl2, 
                       _slascl2_, _slascl_, _slasd0, _slasd0_, _slasd1, 
                       _slasd1_, _slasd2, _slasd2_, _slasd3, _slasd3_, 
                       _slasd4, _slasd4_, _slasd5, _slasd5_, _slasd6, _slasd6_, 
                       _slasd7, _slasd7_, _slasd8, _slasd8_, _slasd9, _slasd9_, 
                       _slasda, _slasda_, _slasdq, _slasdq_, _slasdt, _slasdt_, 
                       _slaset, _slaset_, _slasq1, _slasq1_, _slasq2, _slasq2_, 
                       _slasq3, _slasq3_, _slasq4, _slasq4_, _slasq5, _slasq5_, 
                       _slasq6, _slasq6_, _slasr, _slasr_, _slasrt, _slasrt_, 
                       _slassq, _slassq_, _slasv2, _slasv2_, _slaswp, _slaswp_, 
                       _slasy2, _slasy2_, _slasyf, _slasyf_, _slatbs, _slatbs_, 
                       _slatdf, _slatdf_, _slatps, _slatps_, _slatrd, _slatrd_, 
                       _slatrs, _slatrs_, _slatrz, _slatrz_, _slatzm, _slatzm_, 
                       _slauu2, _slauu2_, _slauum, _slauum_, _smaxloc, 
                       _smaxloc_, _sopgtr, _sopgtr_, _sopmtr, _sopmtr_, 
                       _sorg2l, _sorg2l_, _sorg2r, _sorg2r_, _sorgbr, _sorgbr_, 
                       _sorghr, _sorghr_, _sorgl2, _sorgl2_, _sorglq, _sorglq_, 
                       _sorgql, _sorgql_, _sorgqr, _sorgqr_, _sorgr2, _sorgr2_, 
                       _sorgrq, _sorgrq_, _sorgtr, _sorgtr_, _sorm2l, _sorm2l_, 
                       _sorm2r, _sorm2r_, _sormbr, _sormbr_, _sormhr, _sormhr_, 
                       _sorml2, _sorml2_, _sormlq, _sormlq_, _sormql, _sormql_, 
                       _sormqr, _sormqr_, _sormr2, _sormr2_, _sormr3, _sormr3_, 
                       _sormrq, _sormrq_, _sormrz, _sormrz_, _sormtr, _sormtr_, 
                       _spbcon, _spbcon_, _spbequ, _spbequ_, _spbrfs, _spbrfs_, 
                       _spbstf, _spbstf_, _spbsv, _spbsv_, _spbsvx, _spbsvx_, 
                       _spbtf2, _spbtf2_, _spbtrf, _spbtrf_, _spbtrs, _spbtrs_, 
                       _spftrf, _spftrf_, _spftri, _spftri_, _spftrs, _spftrs_, 
                       _spocon, _spocon_, _spoequ, _spoequ_, _spoequb, 
                       _spoequb_, _sporfs, _sporfs_, _sposv, _sposv_, _sposvx, 
                       _sposvx_, _spotf2, _spotf2_, _spotrf, _spotrf_, 
                       _spotri, _spotri_, _spotrs, _spotrs_, _sppcon, _sppcon_, 
                       _sppequ, _sppequ_, _spprfs, _spprfs_, _sppsv, _sppsv_, 
                       _sppsvx, _sppsvx_, _spptrf, _spptrf_, _spptri, _spptri_, 
                       _spptrs, _spptrs_, _spstf2, _spstf2_, _spstrf, _spstrf_, 
                       _sptcon, _sptcon_, _spteqr, _spteqr_, _sptrfs, _sptrfs_, 
                       _sptsv, _sptsv_, _sptsvx, _sptsvx_, _spttrf, _spttrf_, 
                       _spttrs, _spttrs_, _sptts2, _sptts2_, _srscl, _srscl_, 
                       _ssbev, _ssbev_, _ssbevd, _ssbevd_, _ssbevx, _ssbevx_, 
                       _ssbgst, _ssbgst_, _ssbgv, _ssbgv_, _ssbgvd, _ssbgvd_, 
                       _ssbgvx, _ssbgvx_, _ssbtrd, _ssbtrd_, _ssfrk, _ssfrk_, 
                       _sspcon, _sspcon_, _sspev, _sspev_, _sspevd, _sspevd_, 
                       _sspevx, _sspevx_, _sspgst, _sspgst_, _sspgv, _sspgv_, 
                       _sspgvd, _sspgvd_, _sspgvx, _sspgvx_, _ssprfs, _ssprfs_, 
                       _sspsv, _sspsv_, _sspsvx, _sspsvx_, _ssptrd, _ssptrd_, 
                       _ssptrf, _ssptrf_, _ssptri, _ssptri_, _ssptrs, _ssptrs_, 
                       _sstebz, _sstebz_, _sstedc, _sstedc_, _sstegr, _sstegr_, 
                       _sstein, _sstein_, _sstemr, _sstemr_, _ssteqr, _ssteqr_, 
                       _ssterf, _ssterf_, _sstev, _sstev_, _sstevd, _sstevd_, 
                       _sstevr, _sstevr_, _sstevx, _sstevx_, _ssycon, _ssycon_, 
                       _ssyequb, _ssyequb_, _ssyev, _ssyev_, _ssyevd, _ssyevd_, 
                       _ssyevr, _ssyevr_, _ssyevx, _ssyevx_, _ssygs2, _ssygs2_, 
                       _ssygst, _ssygst_, _ssygv, _ssygv_, _ssygvd, _ssygvd_, 
                       _ssygvx, _ssygvx_, _ssyrfs, _ssyrfs_, _ssysv, _ssysv_, 
                       _ssysvx, _ssysvx_, _ssytd2, _ssytd2_, _ssytf2, _ssytf2_, 
                       _ssytrd, _ssytrd_, _ssytrf, _ssytrf_, _ssytri, _ssytri_, 
                       _ssytrs, _ssytrs_, _stbcon, _stbcon_, _stbrfs, _stbrfs_, 
                       _stbtrs, _stbtrs_, _stfsm, _stfsm_, _stftri, _stftri_, 
                       _stfttp, _stfttp_, _stfttr, _stfttr_, _stgevc, _stgevc_, 
                       _stgex2, _stgex2_, _stgexc, _stgexc_, _stgsen, _stgsen_, 
                       _stgsja, _stgsja_, _stgsna, _stgsna_, _stgsy2, _stgsy2_, 
                       _stgsyl, _stgsyl_, _stpcon, _stpcon_, _stprfs, _stprfs_, 
                       _stptri, _stptri_, _stptrs, _stptrs_, _stpttf, _stpttf_, 
                       _stpttr, _stpttr_, _strcon, _strcon_, _strevc, _strevc_, 
                       _strexc, _strexc_, _strrfs, _strrfs_, _strsen, _strsen_, 
                       _strsna, _strsna_, _strsyl, _strsyl_, _strti2, _strti2_, 
                       _strtri, _strtri_, _strtrs, _strtrs_, _strttf, _strttf_, 
                       _strttp, _strttp_, _stzrqf, _stzrqf_, _stzrzf, _stzrzf_, 
                       _zbdsqr, _zbdsqr_, _zcgesv, _zcgesv_, _zcposv, _zcposv_, 
                       _zdrscl, _zdrscl_, _zgbbrd, _zgbbrd_, _zgbcon, _zgbcon_, 
                       _zgbequ, _zgbequ_, _zgbequb, _zgbequb_, _zgbrfs, 
                       _zgbrfs_, _zgbsv, _zgbsv_, _zgbsvx, _zgbsvx_, _zgbtf2, 
                       _zgbtf2_, _zgbtrf, _zgbtrf_, _zgbtrs, _zgbtrs_, 
                       _zgebak, _zgebak_, _zgebal, _zgebal_, _zgebd2, _zgebd2_, 
                       _zgebrd, _zgebrd_, _zgecon, _zgecon_, _zgeequ, _zgeequ_, 
                       _zgeequb, _zgeequb_, _zgees, _zgees_, _zgeesx, _zgeesx_, 
                       _zgeev, _zgeev_, _zgeevx, _zgeevx_, _zgegs, _zgegs_, 
                       _zgegv, _zgegv_, _zgehd2, _zgehd2_, _zgehrd, _zgehrd_, 
                       _zgelq2, _zgelq2_, _zgelqf, _zgelqf_, _zgels, _zgels_, 
                       _zgelsd, _zgelsd_, _zgelss, _zgelss_, _zgelsx, _zgelsx_, 
                       _zgelsy, _zgelsy_, _zgeql2, _zgeql2_, _zgeqlf, _zgeqlf_, 
                       _zgeqp3, _zgeqp3_, _zgeqpf, _zgeqpf_, _zgeqr2, _zgeqr2_, 
                       _zgeqrf, _zgeqrf_, _zgerfs, _zgerfs_, _zgerq2, _zgerq2_, 
                       _zgerqf, _zgerqf_, _zgesc2, _zgesc2_, _zgesdd, _zgesdd_, 
                       _zgesv, _zgesv_, _zgesvd, _zgesvd_, _zgesvx, _zgesvx_, 
                       _zgetc2, _zgetc2_, _zgetf2, _zgetf2_, _zgetrf, _zgetrf_, 
                       _zgetri, _zgetri_, _zgetrs, _zgetrs_, _zggbak, _zggbak_, 
                       _zggbal, _zggbal_, _zgges, _zgges_, _zggesx, _zggesx_, 
                       _zggev, _zggev_, _zggevx, _zggevx_, _zggglm, _zggglm_, 
                       _zgghrd, _zgghrd_, _zgglse, _zgglse_, _zggqrf, _zggqrf_, 
                       _zggrqf, _zggrqf_, _zggsvd, _zggsvd_, _zggsvp, _zggsvp_, 
                       _zgtcon, _zgtcon_, _zgtrfs, _zgtrfs_, _zgtsv, _zgtsv_, 
                       _zgtsvx, _zgtsvx_, _zgttrf, _zgttrf_, _zgttrs, _zgttrs_, 
                       _zgtts2, _zgtts2_, _zhbev, _zhbev_, _zhbevd, _zhbevd_, 
                       _zhbevx, _zhbevx_, _zhbgst, _zhbgst_, _zhbgv, _zhbgv_, 
                       _zhbgvd, _zhbgvd_, _zhbgvx, _zhbgvx_, _zhbtrd, _zhbtrd_, 
                       _zhecon, _zhecon_, _zheequb, _zheequb_, _zheev, 
                       _zheev_, _zheevd, _zheevd_, _zheevr, _zheevr_, _zheevx, 
                       _zheevx_, _zhegs2, _zhegs2_, _zhegst, _zhegst_, 
                       _zhegv, _zhegv_, _zhegvd, _zhegvd_, _zhegvx, _zhegvx_, 
                       _zherfs, _zherfs_, _zhesv, _zhesv_, _zhesvx, _zhesvx_, 
                       _zhetd2, _zhetd2_, _zhetf2, _zhetf2_, _zhetrd, _zhetrd_, 
                       _zhetrf, _zhetrf_, _zhetri, _zhetri_, _zhetrs, _zhetrs_, 
                       _zhfrk, _zhfrk_, _zhgeqz, _zhgeqz_, _zhpcon, _zhpcon_, 
                       _zhpev, _zhpev_, _zhpevd, _zhpevd_, _zhpevx, _zhpevx_, 
                       _zhpgst, _zhpgst_, _zhpgv, _zhpgv_, _zhpgvd, _zhpgvd_, 
                       _zhpgvx, _zhpgvx_, _zhprfs, _zhprfs_, _zhpsv, _zhpsv_, 
                       _zhpsvx, _zhpsvx_, _zhptrd, _zhptrd_, _zhptrf, _zhptrf_, 
                       _zhptri, _zhptri_, _zhptrs, _zhptrs_, _zhsein, _zhsein_, 
                       _zhseqr, _zhseqr_, _zlabrd, _zlabrd_, _zlacgv, _zlacgv_, 
                       _zlacn2, _zlacn2_, _zlacon, _zlacon_, _zlacp2, _zlacp2_, 
                       _zlacpy, _zlacpy_, _zlacrm, _zlacrm_, _zlacrt, _zlacrt_, 
                       _zladiv, _zladiv_, _zlaed0, _zlaed0_, _zlaed7, _zlaed7_, 
                       _zlaed8, _zlaed8_, _zlaein, _zlaein_, _zlaesy, _zlaesy_, 
                       _zlaev2, _zlaev2_, _zlag2c, _zlag2c_, _zlags2, _zlags2_, 
                       _zlagtm, _zlagtm_, _zlahef, _zlahef_, _zlahqr, _zlahqr_, 
                       _zlahr2, _zlahr2_, _zlahrd, _zlahrd_, _zlaic1, _zlaic1_, 
                       _zlals0, _zlals0_, _zlalsa, _zlalsa_, _zlalsd, _zlalsd_, 
                       _zlangb, _zlangb_, _zlange, _zlange_, _zlangt, _zlangt_, 
                       _zlanhb, _zlanhb_, _zlanhe, _zlanhe_, _zlanhf, _zlanhf_, 
                       _zlanhp, _zlanhp_, _zlanhs, _zlanhs_, _zlanht, _zlanht_, 
                       _zlansb, _zlansb_, _zlansp, _zlansp_, _zlansy, _zlansy_, 
                       _zlantb, _zlantb_, _zlantp, _zlantp_, _zlantr, _zlantr_, 
                       _zlapll, _zlapll_, _zlapmt, _zlapmt_, _zlaqgb, _zlaqgb_, 
                       _zlaqge, _zlaqge_, _zlaqhb, _zlaqhb_, _zlaqhe, _zlaqhe_, 
                       _zlaqhp, _zlaqhp_, _zlaqp2, _zlaqp2_, _zlaqps, _zlaqps_, 
                       _zlaqr0, _zlaqr0_, _zlaqr1, _zlaqr1_, _zlaqr2, _zlaqr2_, 
                       _zlaqr3, _zlaqr3_, _zlaqr4, _zlaqr4_, _zlaqr5, _zlaqr5_, 
                       _zlaqsb, _zlaqsb_, _zlaqsp, _zlaqsp_, _zlaqsy, _zlaqsy_, 
                       _zlar1v, _zlar1v_, _zlar2v, _zlar2v_, _zlarcm, _zlarcm_, 
                       _zlarf, _zlarf_, _zlarfb, _zlarfb_, _zlarfg, _zlarfg_, 
                       _zlarfp, _zlarfp_, _zlarft, _zlarft_, _zlarfx, _zlarfx_, 
                       _zlargv, _zlargv_, _zlarnv, _zlarnv_, _zlarrv, _zlarrv_, 
                       _zlarscl2, _zlarscl2_, _zlartg, _zlartg_, _zlartv, 
                       _zlartv_, _zlarz, _zlarz_, _zlarzb, _zlarzb_, _zlarzt, 
                       _zlarzt_, _zlascl, _zlascl2, _zlascl2_, _zlascl_, 
                       _zlaset, _zlaset_, _zlasr, _zlasr_, _zlassq, _zlassq_, 
                       _zlaswp, _zlaswp_, _zlasyf, _zlasyf_, _zlat2c, _zlat2c_, 
                       _zlatbs, _zlatbs_, _zlatdf, _zlatdf_, _zlatps, _zlatps_, 
                       _zlatrd, _zlatrd_, _zlatrs, _zlatrs_, _zlatrz, _zlatrz_, 
                       _zlatzm, _zlatzm_, _zlauu2, _zlauu2_, _zlauum, _zlauum_, 
                       _zpbcon, _zpbcon_, _zpbequ, _zpbequ_, _zpbrfs, _zpbrfs_, 
                       _zpbstf, _zpbstf_, _zpbsv, _zpbsv_, _zpbsvx, _zpbsvx_, 
                       _zpbtf2, _zpbtf2_, _zpbtrf, _zpbtrf_, _zpbtrs, _zpbtrs_, 
                       _zpftrf, _zpftrf_, _zpftri, _zpftri_, _zpftrs, _zpftrs_, 
                       _zpocon, _zpocon_, _zpoequ, _zpoequ_, _zpoequb, 
                       _zpoequb_, _zporfs, _zporfs_, _zposv, _zposv_, _zposvx, 
                       _zposvx_, _zpotf2, _zpotf2_, _zpotrf, _zpotrf_, 
                       _zpotri, _zpotri_, _zpotrs, _zpotrs_, _zppcon, _zppcon_, 
                       _zppequ, _zppequ_, _zpprfs, _zpprfs_, _zppsv, _zppsv_, 
                       _zppsvx, _zppsvx_, _zpptrf, _zpptrf_, _zpptri, _zpptri_, 
                       _zpptrs, _zpptrs_, _zpstf2, _zpstf2_, _zpstrf, _zpstrf_, 
                       _zptcon, _zptcon_, _zpteqr, _zpteqr_, _zptrfs, _zptrfs_, 
                       _zptsv, _zptsv_, _zptsvx, _zptsvx_, _zpttrf, _zpttrf_, 
                       _zpttrs, _zpttrs_, _zptts2, _zptts2_, _zrot, _zrot_, 
                       _zspcon, _zspcon_, _zspmv, _zspmv_, _zspr, _zspr_, 
                       _zsprfs, _zsprfs_, _zspsv, _zspsv_, _zspsvx, _zspsvx_, 
                       _zsptrf, _zsptrf_, _zsptri, _zsptri_, _zsptrs, _zsptrs_, 
                       _zstedc, _zstedc_, _zstegr, _zstegr_, _zstein, _zstein_, 
                       _zstemr, _zstemr_, _zsteqr, _zsteqr_, _zsycon, _zsycon_, 
                       _zsyequb, _zsyequb_, _zsymv, _zsymv_, _zsyr, _zsyr_, 
                       _zsyrfs, _zsyrfs_, _zsysv, _zsysv_, _zsysvx, _zsysvx_, 
                       _zsytf2, _zsytf2_, _zsytrf, _zsytrf_, _zsytri, _zsytri_, 
                       _zsytrs, _zsytrs_, _ztbcon, _ztbcon_, _ztbrfs, _ztbrfs_, 
                       _ztbtrs, _ztbtrs_, _ztfsm, _ztfsm_, _ztftri, _ztftri_, 
                       _ztfttp, _ztfttp_, _ztfttr, _ztfttr_, _ztgevc, _ztgevc_, 
                       _ztgex2, _ztgex2_, _ztgexc, _ztgexc_, _ztgsen, _ztgsen_, 
                       _ztgsja, _ztgsja_, _ztgsna, _ztgsna_, _ztgsy2, _ztgsy2_, 
                       _ztgsyl, _ztgsyl_, _ztpcon, _ztpcon_, _ztprfs, _ztprfs_, 
                       _ztptri, _ztptri_, _ztptrs, _ztptrs_, _ztpttf, _ztpttf_, 
                       _ztpttr, _ztpttr_, _ztrcon, _ztrcon_, _ztrevc, _ztrevc_, 
                       _ztrexc, _ztrexc_, _ztrrfs, _ztrrfs_, _ztrsen, _ztrsen_, 
                       _ztrsna, _ztrsna_, _ztrsyl, _ztrsyl_, _ztrti2, _ztrti2_, 
                       _ztrtri, _ztrtri_, _ztrtrs, _ztrtrs_, _ztrttf, _ztrttf_, 
                       _ztrttp, _ztrttp_, _ztzrqf, _ztzrqf_, _ztzrzf, _ztzrzf_, 
                       _zung2l, _zung2l_, _zung2r, _zung2r_, _zungbr, _zungbr_, 
                       _zunghr, _zunghr_, _zungl2, _zungl2_, _zunglq, _zunglq_, 
                       _zungql, _zungql_, _zungqr, _zungqr_, _zungr2, _zungr2_, 
                       _zungrq, _zungrq_, _zungtr, _zungtr_, _zunm2l, _zunm2l_, 
                       _zunm2r, _zunm2r_, _zunmbr, _zunmbr_, _zunmhr, _zunmhr_, 
                       _zunml2, _zunml2_, _zunmlq, _zunmlq_, _zunmql, _zunmql_, 
                       _zunmqr, _zunmqr_, _zunmr2, _zunmr2_, _zunmr3, _zunmr3_, 
                       _zunmrq, _zunmrq_, _zunmrz, _zunmrz_, _zunmtr, _zunmtr_, 
                       _zupgtr, _zupgtr_, _zupmtr, _zupmtr_ ]
...
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   libLinearAlgebra.tbd                                                                                0100644 0001750 0001750 00000003140 12602277360 043456  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A                                   ---
archs:           [ i386, x86_64 ]
platform:        macosx
install-name:    /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib
exports:         
  - archs:           [ i386, x86_64 ]
    allowed-clients: [ vecLib ]
    symbols:         [ _la_add_attributes, _la_diagonal_matrix_from_vector, 
                       _la_difference, _la_elementwise_product, _la_identity_matrix, 
                       _la_inner_product, _la_matrix_cols, _la_matrix_from_double_buffer, 
                       _la_matrix_from_double_buffer_nocopy, _la_matrix_from_float_buffer, 
                       _la_matrix_from_float_buffer_nocopy, _la_matrix_from_splat, 
                       _la_matrix_product, _la_matrix_rows, _la_matrix_slice, 
                       _la_matrix_to_double_buffer, _la_matrix_to_float_buffer, 
                       _la_norm_as_double, _la_norm_as_float, _la_normalized_vector, 
                       _la_outer_product, _la_release, _la_remove_attributes, 
                       _la_retain, _la_scale_with_double, _la_scale_with_float, 
                       _la_solve, _la_splat_from_double, _la_splat_from_float, 
                       _la_splat_from_matrix_element, _la_splat_from_vector_element, 
                       _la_status, _la_sum, _la_transpose, _la_vector_from_matrix_col, 
                       _la_vector_from_matrix_diagonal, _la_vector_from_matrix_row, 
                       _la_vector_from_splat, _la_vector_length, _la_vector_slice, 
                       _la_vector_to_double_buffer, _la_vector_to_float_buffer ]
...
                                                                                                                                                                                                                                                                                                                                                                                                                                libSparseBLAS.tbd                                                                                   0100644 0001750 0001750 00000006425 12571375060 042677  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A                                   ---
archs:           [ i386, x86_64, x86_64h ]
platform:        macosx
install-name:    /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib
exports:         
  - archs:           [ i386, x86_64, x86_64h ]
    symbols:         [ _sparse_commit, _sparse_elementwise_norm_double, 
                       _sparse_elementwise_norm_float, _sparse_extract_block_double, 
                       _sparse_extract_block_float, _sparse_extract_sparse_column_double, 
                       _sparse_extract_sparse_column_float, _sparse_extract_sparse_row_double, 
                       _sparse_extract_sparse_row_float, _sparse_get_block_dimension_for_col, 
                       _sparse_get_block_dimension_for_row, _sparse_get_matrix_nonzero_count, 
                       _sparse_get_matrix_nonzero_count_for_column, _sparse_get_matrix_nonzero_count_for_row, 
                       _sparse_get_matrix_number_of_columns, _sparse_get_matrix_number_of_rows, 
                       _sparse_get_matrix_property, _sparse_get_vector_nonzero_count_double, 
                       _sparse_get_vector_nonzero_count_float, _sparse_inner_product_dense_double, 
                       _sparse_inner_product_dense_float, _sparse_inner_product_sparse_double, 
                       _sparse_inner_product_sparse_float, _sparse_insert_block_double, 
                       _sparse_insert_block_float, _sparse_insert_col_double, 
                       _sparse_insert_col_float, _sparse_insert_entries_double, 
                       _sparse_insert_entries_float, _sparse_insert_entry_double, 
                       _sparse_insert_entry_float, _sparse_insert_row_double, 
                       _sparse_insert_row_float, _sparse_matrix_block_create_double, 
                       _sparse_matrix_block_create_float, _sparse_matrix_create_double, 
                       _sparse_matrix_create_float, _sparse_matrix_destroy, 
                       _sparse_matrix_product_dense_double, _sparse_matrix_product_dense_float, 
                       _sparse_matrix_trace_double, _sparse_matrix_trace_float, 
                       _sparse_matrix_triangular_solve_dense_double, _sparse_matrix_triangular_solve_dense_float, 
                       _sparse_matrix_variable_block_create_double, _sparse_matrix_variable_block_create_float, 
                       _sparse_matrix_vector_product_dense_double, _sparse_matrix_vector_product_dense_float, 
                       _sparse_operator_norm_double, _sparse_operator_norm_float, 
                       _sparse_outer_product_dense_double, _sparse_outer_product_dense_float, 
                       _sparse_pack_vector_double, _sparse_pack_vector_float, 
                       _sparse_permute_cols_double, _sparse_permute_cols_float, 
                       _sparse_permute_rows_double, _sparse_permute_rows_float, 
                       _sparse_set_matrix_property, _sparse_unpack_vector_double, 
                       _sparse_unpack_vector_float, _sparse_vector_add_with_scale_dense_double, 
                       _sparse_vector_add_with_scale_dense_float, _sparse_vector_norm_double, 
                       _sparse_vector_norm_float, _sparse_vector_triangular_solve_dense_double, 
                       _sparse_vector_triangular_solve_dense_float ]
...
                                                                                                                                                                                                                                           libvDSP.tbd                                                                                         0100644 0001750 0001750 00000030210 12571375060 041601  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A                                   ---
archs:           [ i386, x86_64, x86_64h ]
platform:        macosx
install-name:    /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib
current-version: 563.3
exports:         
  - archs:           [ i386 ]
    symbols:         [ _conv, _convD, _create_fftsetup, _create_fftsetupD, 
                       _ctoz, _ctozD, _destroy_fftsetup, _destroy_fftsetupD, 
                       _dotpr, _dotprD, _f3x3, _f3x3D, _f5x5, _f5x5D, _fft2d_zip, 
                       _fft2d_zipD, _fft2d_zipt, _fft2d_ziptD, _fft2d_zop, 
                       _fft2d_zopD, _fft2d_zopt, _fft2d_zoptD, _fft2d_zrip, 
                       _fft2d_zripD, _fft2d_zript, _fft2d_zriptD, _fft2d_zrop, 
                       _fft2d_zropD, _fft2d_zropt, _fft2d_zroptD, _fft3_zop, 
                       _fft3_zopD, _fft5_zop, _fft5_zopD, _fft_cip, _fft_cipt, 
                       _fft_cop, _fft_copt, _fft_zip, _fft_zipD, _fft_zipt, 
                       _fft_ziptD, _fft_zop, _fft_zopD, _fft_zopt, _fft_zoptD, 
                       _fft_zrip, _fft_zripD, _fft_zript, _fft_zriptD, 
                       _fft_zrop, _fft_zropD, _fft_zropt, _fft_zroptD, 
                       _fftm_zip, _fftm_zipD, _fftm_zipt, _fftm_ziptD, 
                       _fftm_zop, _fftm_zopD, _fftm_zopt, _fftm_zoptD, 
                       _fftm_zrip, _fftm_zripD, _fftm_zript, _fftm_zriptD, 
                       _fftm_zrop, _fftm_zropD, _fftm_zropt, _fftm_zroptD, 
                       _imgfir, _imgfirD, _mmul, _mmulD, _mtrans, _mtransD, 
                       _vadd, _vaddD, _vam, _vamD, _vmul, _vmulD, _vsmul, 
                       _vsmulD, _vsq, _vsqD, _vssq, _vssqD, _vsub, _vsubD, 
                       _zconv, _zconvD, _zdotpr, _zdotprD, _zidotpr, _zidotprD, 
                       _zmma, _zmmaD, _zmms, _zmmsD, _zmmul, _zmmulD, _zmsm, 
                       _zmsmD, _zrdotpr, _zrdotprD, _zrvadd, _zrvaddD, 
                       _zrvmul, _zrvmulD, _zrvsub, _zrvsubD, _ztoc, _ztocD, 
                       _zvadd, _zvaddD, _zvcma, _zvcmaD, _zvmul, _zvmulD, 
                       _zvsub, _zvsubD ]
  - archs:           [ i386, x86_64, x86_64h ]
    symbols:         [ _vDSP_DCT_CreateSetup, _vDSP_DCT_Execute, _vDSP_DFT_CreateSetup, 
                       _vDSP_DFT_DestroySetup, _vDSP_DFT_DestroySetupD, 
                       _vDSP_DFT_Execute, _vDSP_DFT_ExecuteD, _vDSP_DFT_zop, 
                       _vDSP_DFT_zop_CreateSetup, _vDSP_DFT_zop_CreateSetupD, 
                       _vDSP_DFT_zrop_CreateSetup, _vDSP_DFT_zrop_CreateSetupD, 
                       _vDSP_FFT16_copv, _vDSP_FFT16_zopv, _vDSP_FFT32_copv, 
                       _vDSP_FFT32_zopv, _vDSP_biquad, _vDSP_biquadD, _vDSP_biquad_CreateSetup, 
                       _vDSP_biquad_CreateSetupD, _vDSP_biquad_DestroySetup, 
                       _vDSP_biquad_DestroySetupD, _vDSP_biquadm, _vDSP_biquadmD, 
                       _vDSP_biquadm_CopyState, _vDSP_biquadm_CopyStateD, 
                       _vDSP_biquadm_CreateSetup, _vDSP_biquadm_CreateSetupD, 
                       _vDSP_biquadm_DestroySetup, _vDSP_biquadm_DestroySetupD, 
                       _vDSP_biquadm_ResetState, _vDSP_biquadm_ResetStateD, 
                       _vDSP_biquadm_SetActiveFilters, _vDSP_biquadm_SetCoefficientsDouble, 
                       _vDSP_biquadm_SetCoefficientsSingle, _vDSP_biquadm_SetTargetsDouble, 
                       _vDSP_biquadm_SetTargetsSingle, _vDSP_blkman_window, 
                       _vDSP_blkman_windowD, _vDSP_conv, _vDSP_convD, _vDSP_create_fftsetup, 
                       _vDSP_create_fftsetupD, _vDSP_ctoz, _vDSP_ctozD, 
                       _vDSP_deq22, _vDSP_deq22D, _vDSP_desamp, _vDSP_desampD, 
                       _vDSP_destroy_fftsetup, _vDSP_destroy_fftsetupD, 
                       _vDSP_distancesq, _vDSP_distancesqD, _vDSP_dotpr, 
                       _vDSP_dotpr2, _vDSP_dotpr2D, _vDSP_dotpr2_s1_15, 
                       _vDSP_dotpr2_s8_24, _vDSP_dotprD, _vDSP_dotpr_s1_15, 
                       _vDSP_dotpr_s8_24, _vDSP_f3x3, _vDSP_f3x3D, _vDSP_f5x5, 
                       _vDSP_f5x5D, _vDSP_fft2d_zip, _vDSP_fft2d_zipD, 
                       _vDSP_fft2d_zipt, _vDSP_fft2d_ziptD, _vDSP_fft2d_zop, 
                       _vDSP_fft2d_zopD, _vDSP_fft2d_zopt, _vDSP_fft2d_zoptD, 
                       _vDSP_fft2d_zrip, _vDSP_fft2d_zripD, _vDSP_fft2d_zript, 
                       _vDSP_fft2d_zriptD, _vDSP_fft2d_zrop, _vDSP_fft2d_zropD, 
                       _vDSP_fft2d_zropt, _vDSP_fft2d_zroptD, _vDSP_fft3_zop, 
                       _vDSP_fft3_zopD, _vDSP_fft5_zop, _vDSP_fft5_zopD, 
                       _vDSP_fft_zip, _vDSP_fft_zipD, _vDSP_fft_zipt, _vDSP_fft_ziptD, 
                       _vDSP_fft_zop, _vDSP_fft_zopD, _vDSP_fft_zopt, _vDSP_fft_zoptD, 
                       _vDSP_fft_zrip, _vDSP_fft_zripD, _vDSP_fft_zript, 
                       _vDSP_fft_zriptD, _vDSP_fft_zrop, _vDSP_fft_zropD, 
                       _vDSP_fft_zropt, _vDSP_fft_zroptD, _vDSP_fftm_zip, 
                       _vDSP_fftm_zipD, _vDSP_fftm_zipt, _vDSP_fftm_ziptD, 
                       _vDSP_fftm_zop, _vDSP_fftm_zopD, _vDSP_fftm_zopt, 
                       _vDSP_fftm_zoptD, _vDSP_fftm_zrip, _vDSP_fftm_zripD, 
                       _vDSP_fftm_zript, _vDSP_fftm_zriptD, _vDSP_fftm_zrop, 
                       _vDSP_fftm_zropD, _vDSP_fftm_zropt, _vDSP_fftm_zroptD, 
                       _vDSP_hamm_window, _vDSP_hamm_windowD, _vDSP_hann_window, 
                       _vDSP_hann_windowD, _vDSP_imgfir, _vDSP_imgfirD, 
                       _vDSP_maxmgv, _vDSP_maxmgvD, _vDSP_maxmgvi, _vDSP_maxmgviD, 
                       _vDSP_maxv, _vDSP_maxvD, _vDSP_maxvi, _vDSP_maxviD, 
                       _vDSP_meamgv, _vDSP_meamgvD, _vDSP_meanv, _vDSP_meanvD, 
                       _vDSP_measqv, _vDSP_measqvD, _vDSP_minmgv, _vDSP_minmgvD, 
                       _vDSP_minmgvi, _vDSP_minmgviD, _vDSP_minv, _vDSP_minvD, 
                       _vDSP_minvi, _vDSP_minviD, _vDSP_mmov, _vDSP_mmovD, 
                       _vDSP_mmul, _vDSP_mmulD, _vDSP_mtrans, _vDSP_mtransD, 
                       _vDSP_mvessq, _vDSP_mvessqD, _vDSP_normalize, _vDSP_normalizeD, 
                       _vDSP_nzcros, _vDSP_nzcrosD, _vDSP_polar, _vDSP_polarD, 
                       _vDSP_rect, _vDSP_rectD, _vDSP_rmsqv, _vDSP_rmsqvD, 
                       _vDSP_svdiv, _vDSP_svdivD, _vDSP_sve, _vDSP_sveD, 
                       _vDSP_sve_svesq, _vDSP_sve_svesqD, _vDSP_svemg, 
                       _vDSP_svemgD, _vDSP_svesq, _vDSP_svesqD, _vDSP_svs, 
                       _vDSP_svsD, _vDSP_vaam, _vDSP_vaamD, _vDSP_vabs, 
                       _vDSP_vabsD, _vDSP_vabsi, _vDSP_vadd, _vDSP_vaddD, 
                       _vDSP_vaddi, _vDSP_vaddsub, _vDSP_vaddsubD, _vDSP_vam, 
                       _vDSP_vamD, _vDSP_vasbm, _vDSP_vasbmD, _vDSP_vasm, 
                       _vDSP_vasmD, _vDSP_vavlin, _vDSP_vavlinD, _vDSP_vclip, 
                       _vDSP_vclipD, _vDSP_vclipc, _vDSP_vclipcD, _vDSP_vclr, 
                       _vDSP_vclrD, _vDSP_vcmprs, _vDSP_vcmprsD, _vDSP_vdbcon, 
                       _vDSP_vdbconD, _vDSP_vdist, _vDSP_vdistD, _vDSP_vdiv, 
                       _vDSP_vdivD, _vDSP_vdivi, _vDSP_vdpsp, _vDSP_venvlp, 
                       _vDSP_venvlpD, _vDSP_veqvi, _vDSP_vfill, _vDSP_vfillD, 
                       _vDSP_vfilli, _vDSP_vfix16, _vDSP_vfix16D, _vDSP_vfix32, 
                       _vDSP_vfix32D, _vDSP_vfix8, _vDSP_vfix8D, _vDSP_vfixr16, 
                       _vDSP_vfixr16D, _vDSP_vfixr32, _vDSP_vfixr32D, _vDSP_vfixr8, 
                       _vDSP_vfixr8D, _vDSP_vfixru16, _vDSP_vfixru16D, 
                       _vDSP_vfixru32, _vDSP_vfixru32D, _vDSP_vfixru8, 
                       _vDSP_vfixru8D, _vDSP_vfixu16, _vDSP_vfixu16D, _vDSP_vfixu32, 
                       _vDSP_vfixu32D, _vDSP_vfixu8, _vDSP_vfixu8D, _vDSP_vflt16, 
                       _vDSP_vflt16D, _vDSP_vflt24, _vDSP_vflt32, _vDSP_vflt32D, 
                       _vDSP_vflt8, _vDSP_vflt8D, _vDSP_vfltsm24, _vDSP_vfltsmu24, 
                       _vDSP_vfltu16, _vDSP_vfltu16D, _vDSP_vfltu24, _vDSP_vfltu32, 
                       _vDSP_vfltu32D, _vDSP_vfltu8, _vDSP_vfltu8D, _vDSP_vfrac, 
                       _vDSP_vfracD, _vDSP_vgathr, _vDSP_vgathrD, _vDSP_vgathra, 
                       _vDSP_vgathraD, _vDSP_vgen, _vDSP_vgenD, _vDSP_vgenp, 
                       _vDSP_vgenpD, _vDSP_viclip, _vDSP_viclipD, _vDSP_vindex, 
                       _vDSP_vindexD, _vDSP_vintb, _vDSP_vintbD, _vDSP_vlim, 
                       _vDSP_vlimD, _vDSP_vlint, _vDSP_vlintD, _vDSP_vma, 
                       _vDSP_vmaD, _vDSP_vmax, _vDSP_vmaxD, _vDSP_vmaxmg, 
                       _vDSP_vmaxmgD, _vDSP_vmin, _vDSP_vminD, _vDSP_vminmg, 
                       _vDSP_vminmgD, _vDSP_vmma, _vDSP_vmmaD, _vDSP_vmmsb, 
                       _vDSP_vmmsbD, _vDSP_vmsa, _vDSP_vmsaD, _vDSP_vmsb, 
                       _vDSP_vmsbD, _vDSP_vmul, _vDSP_vmulD, _vDSP_vnabs, 
                       _vDSP_vnabsD, _vDSP_vneg, _vDSP_vnegD, _vDSP_vpoly, 
                       _vDSP_vpolyD, _vDSP_vpythg, _vDSP_vpythgD, _vDSP_vqint, 
                       _vDSP_vqintD, _vDSP_vramp, _vDSP_vrampD, _vDSP_vrampmul, 
                       _vDSP_vrampmul2, _vDSP_vrampmul2D, _vDSP_vrampmul2_s1_15, 
                       _vDSP_vrampmul2_s8_24, _vDSP_vrampmulD, _vDSP_vrampmul_s1_15, 
                       _vDSP_vrampmul_s8_24, _vDSP_vrampmuladd, _vDSP_vrampmuladd2, 
                       _vDSP_vrampmuladd2D, _vDSP_vrampmuladd2_s1_15, _vDSP_vrampmuladd2_s8_24, 
                       _vDSP_vrampmuladdD, _vDSP_vrampmuladd_s1_15, _vDSP_vrampmuladd_s8_24, 
                       _vDSP_vrsum, _vDSP_vrsumD, _vDSP_vrvrs, _vDSP_vrvrsD, 
                       _vDSP_vsadd, _vDSP_vsaddD, _vDSP_vsaddi, _vDSP_vsbm, 
                       _vDSP_vsbmD, _vDSP_vsbsbm, _vDSP_vsbsbmD, _vDSP_vsbsm, 
                       _vDSP_vsbsmD, _vDSP_vsdiv, _vDSP_vsdivD, _vDSP_vsdivi, 
                       _vDSP_vsimps, _vDSP_vsimpsD, _vDSP_vsma, _vDSP_vsmaD, 
                       _vDSP_vsmfix24, _vDSP_vsmfixu24, _vDSP_vsmsa, _vDSP_vsmsaD, 
                       _vDSP_vsmsb, _vDSP_vsmsbD, _vDSP_vsmsma, _vDSP_vsmsmaD, 
                       _vDSP_vsmul, _vDSP_vsmulD, _vDSP_vsort, _vDSP_vsortD, 
                       _vDSP_vsorti, _vDSP_vsortiD, _vDSP_vspdp, _vDSP_vsq, 
                       _vDSP_vsqD, _vDSP_vssq, _vDSP_vssqD, _vDSP_vsub, 
                       _vDSP_vsubD, _vDSP_vswap, _vDSP_vswapD, _vDSP_vswmax, 
                       _vDSP_vswmaxD, _vDSP_vswsum, _vDSP_vswsumD, _vDSP_vtabi, 
                       _vDSP_vtabiD, _vDSP_vthr, _vDSP_vthrD, _vDSP_vthres, 
                       _vDSP_vthresD, _vDSP_vthrsc, _vDSP_vthrscD, _vDSP_vtmerg, 
                       _vDSP_vtmergD, _vDSP_vtrapz, _vDSP_vtrapzD, _vDSP_wiener, 
                       _vDSP_wienerD, _vDSP_zaspec, _vDSP_zaspecD, _vDSP_zcoher, 
                       _vDSP_zcoherD, _vDSP_zconv, _vDSP_zconvD, _vDSP_zcspec, 
                       _vDSP_zcspecD, _vDSP_zdotpr, _vDSP_zdotprD, _vDSP_zidotpr, 
                       _vDSP_zidotprD, _vDSP_zmma, _vDSP_zmmaD, _vDSP_zmms, 
                       _vDSP_zmmsD, _vDSP_zmmul, _vDSP_zmmulD, _vDSP_zmsm, 
                       _vDSP_zmsmD, _vDSP_zrdesamp, _vDSP_zrdesampD, _vDSP_zrdotpr, 
                       _vDSP_zrdotprD, _vDSP_zrvadd, _vDSP_zrvaddD, _vDSP_zrvdiv, 
                       _vDSP_zrvdivD, _vDSP_zrvmul, _vDSP_zrvmulD, _vDSP_zrvsub, 
                       _vDSP_zrvsubD, _vDSP_ztoc, _vDSP_ztocD, _vDSP_ztrans, 
                       _vDSP_ztransD, _vDSP_zvabs, _vDSP_zvabsD, _vDSP_zvadd, 
                       _vDSP_zvaddD, _vDSP_zvcma, _vDSP_zvcmaD, _vDSP_zvcmul, 
                       _vDSP_zvcmulD, _vDSP_zvconj, _vDSP_zvconjD, _vDSP_zvdiv, 
                       _vDSP_zvdivD, _vDSP_zvfill, _vDSP_zvfillD, _vDSP_zvma, 
                       _vDSP_zvmaD, _vDSP_zvmags, _vDSP_zvmagsD, _vDSP_zvmgsa, 
                       _vDSP_zvmgsaD, _vDSP_zvmmaa, _vDSP_zvmmaaD, _vDSP_zvmov, 
                       _vDSP_zvmovD, _vDSP_zvmul, _vDSP_zvmulD, _vDSP_zvneg, 
                       _vDSP_zvnegD, _vDSP_zvphas, _vDSP_zvphasD, _vDSP_zvsma, 
                       _vDSP_zvsmaD, _vDSP_zvsub, _vDSP_zvsubD, _vDSP_zvzsml, 
                       _vDSP_zvzsmlD ]
...
                                                                                                                                                                                                                                                                                                                                                                                        libvMisc.tbd                                                                                        0100644 0001750 0001750 00000024303 12571375060 042054  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A                                   ---
archs:           [ i386, x86_64, x86_64h ]
platform:        macosx
install-name:    /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib
current-version: 563.3
exports:         
  - archs:           [ i386, x86_64, x86_64h ]
    symbols:         [ _VVACOS, _VVACOSF, _VVACOSF_, _VVACOSH, _VVACOSHF, 
                       _VVACOSHF_, _VVACOSH_, _VVACOS_, _VVASIN, _VVASINF, 
                       _VVASINF_, _VVASINH, _VVASINHF, _VVASINHF_, _VVASINH_, 
                       _VVASIN_, _VVATAN, _VVATAN2, _VVATAN2F, _VVATAN2F_, 
                       _VVATAN2_, _VVATANF, _VVATANF_, _VVATANH, _VVATANHF, 
                       _VVATANHF_, _VVATANH_, _VVATAN_, _VVCBRT, _VVCBRTF, 
                       _VVCBRTF_, _VVCBRT_, _VVCEIL, _VVCEILF, _VVCEILF_, 
                       _VVCEIL_, _VVCOPYSIGN, _VVCOPYSIGNF, _VVCOPYSIGNF_, 
                       _VVCOPYSIGN_, _VVCOS, _VVCOSF, _VVCOSF_, _VVCOSH, 
                       _VVCOSHF, _VVCOSHF_, _VVCOSH_, _VVCOSISIN, _VVCOSISINF, 
                       _VVCOSISINF_, _VVCOSISIN_, _VVCOSPI, _VVCOSPIF, 
                       _VVCOSPIF_, _VVCOSPI_, _VVCOS_, _VVDIV, _VVDIVF, 
                       _VVDIVF_, _VVDIV_, _VVEXP, _VVEXP2, _VVEXP2F, _VVEXP2F_, 
                       _VVEXP2_, _VVEXPF, _VVEXPF_, _VVEXPM1, _VVEXPM1F, 
                       _VVEXPM1F_, _VVEXPM1_, _VVEXP_, _VVFABF, _VVFABF_, 
                       _VVFABS, _VVFABSF, _VVFABSF_, _VVFABS_, _VVFLOOR, 
                       _VVFLOORF, _VVFLOORF_, _VVFLOOR_, _VVFMOD, _VVFMODF, 
                       _VVFMODF_, _VVFMOD_, _VVINT, _VVINTF, _VVINTF_, 
                       _VVINT_, _VVLOG, _VVLOG10, _VVLOG10F, _VVLOG10F_, 
                       _VVLOG10_, _VVLOG1P, _VVLOG1PF, _VVLOG1PF_, _VVLOG1P_, 
                       _VVLOG2, _VVLOG2F, _VVLOG2F_, _VVLOG2_, _VVLOGB, 
                       _VVLOGBF, _VVLOGBF_, _VVLOGB_, _VVLOGF, _VVLOGF_, 
                       _VVLOG_, _VVNEXTAFTER, _VVNEXTAFTERF, _VVNEXTAFTERF_, 
                       _VVNEXTAFTER_, _VVNINT, _VVNINTF, _VVNINTF_, _VVNINT_, 
                       _VVPOW, _VVPOWF, _VVPOWF_, _VVPOWS, _VVPOWSF, _VVPOWSF_, 
                       _VVPOWS_, _VVPOW_, _VVREC, _VVRECF, _VVRECF_, _VVREC_, 
                       _VVREMAINDER, _VVREMAINDERF, _VVREMAINDERF_, _VVREMAINDER_, 
                       _VVRSQRT, _VVRSQRTF, _VVRSQRTF_, _VVRSQRT_, _VVSIN, 
                       _VVSINCOS, _VVSINCOSF, _VVSINCOSF_, _VVSINCOS_, 
                       _VVSINF, _VVSINF_, _VVSINH, _VVSINHF, _VVSINHF_, 
                       _VVSINH_, _VVSINPI, _VVSINPIF, _VVSINPIF_, _VVSINPI_, 
                       _VVSIN_, _VVSQRT, _VVSQRTF, _VVSQRTF_, _VVSQRT_, 
                       _VVTAN, _VVTANF, _VVTANF_, _VVTANH, _VVTANHF, _VVTANHF_, 
                       _VVTANH_, _VVTANPI, _VVTANPIF, _VVTANPIF_, _VVTANPI_, 
                       _VVTAN_, ___cblas_isamax, ___cblas_sasum, ___cblas_saxpy, 
                       ___cblas_sgemm, ___cblas_sgemv, ___cblas_srot, ___cblas_sscal, 
                       ___cblas_sswap, _dMultMatMat_16x16, _dMultMatMat_32x32, 
                       _dMultMatMat_4x4, _dMultMatMat_8x8, _dMultMatVec_16x16, 
                       _dMultMatVec_32x32, _dMultMatVec_4x4, _dMultMatVec_8x8, 
                       _dMultVecMat_16x16, _dMultVecMat_32x32, _dMultVecMat_4x4, 
                       _dMultVecMat_8x8, _gMacBLASScalarCalls, _gMacBLASVectorCalls, 
                       _sMultMatMat_16x16, _sMultMatMat_32x32, _sMultMatMat_4x4, 
                       _sMultMatMat_8x8, _sMultMatVec_16x16, _sMultMatVec_32x32, 
                       _sMultMatVec_4x4, _sMultMatVec_8x8, _sMultVecMat_16x16, 
                       _sMultVecMat_32x32, _sMultVecMat_4x4, _sMultVecMat_8x8, 
                       _vA1024Shift, _vA128Shift, _vA256Shift, _vA512Shift, 
                       _vA64Shift, _vA64Shift2, _vIsamax, _vIsamin, _vIsmax, 
                       _vIsmin, _vL1024Rotate, _vL128Rotate, _vL256Rotate, 
                       _vL512Rotate, _vL64Rotate, _vL64Rotate2, _vLL1024Shift, 
                       _vLL128Shift, _vLL256Shift, _vLL512Shift, _vLL64Shift, 
                       _vLL64Shift2, _vLR1024Shift, _vLR128Shift, _vLR256Shift, 
                       _vLR512Shift, _vLR64Shift, _vLR64Shift2, _vMultMatMat_16x16, 
                       _vMultMatMat_32x32, _vMultMatMat_4x4, _vMultMatMat_8x8, 
                       _vMultMatVec_16x16, _vMultMatVec_32x32, _vMultMatVec_4x4, 
                       _vMultMatVec_8x8, _vMultVecMat_16x16, _vMultVecMat_32x32, 
                       _vMultVecMat_4x4, _vMultVecMat_8x8, _vR1024Rotate, 
                       _vR128Rotate, _vR256Rotate, _vR512Rotate, _vR64Rotate, 
                       _vR64Rotate2, _vS1024Add, _vS1024AddS, _vS1024Divide, 
                       _vS1024HalfMultiply, _vS1024Mod, _vS1024Neg, _vS1024Sub, 
                       _vS1024SubS, _vS128Add, _vS128AddS, _vS128Divide, 
                       _vS128FullMultiply, _vS128HalfMultiply, _vS128Neg, 
                       _vS128Sub, _vS128SubS, _vS16Divide, _vS16HalfMultiply, 
                       _vS256Add, _vS256AddS, _vS256Divide, _vS256FullMultiply, 
                       _vS256HalfMultiply, _vS256Mod, _vS256Neg, _vS256Sub, 
                       _vS256SubS, _vS32Divide, _vS32FullMulEven, _vS32FullMulOdd, 
                       _vS32HalfMultiply, _vS512Add, _vS512AddS, _vS512Divide, 
                       _vS512FullMultiply, _vS512HalfMultiply, _vS512Mod, 
                       _vS512Neg, _vS512Sub, _vS512SubS, _vS64Add, _vS64AddS, 
                       _vS64Divide, _vS64FullMulEven, _vS64FullMulOdd, 
                       _vS64HalfMultiply, _vS64Neg, _vS64Sub, _vS64SubS, 
                       _vS8Divide, _vS8HalfMultiply, _vSasum, _vSaxpy, 
                       _vScopy, _vSdot, _vSgeadd, _vSgemm, _vSgemtx, _vSgemul, 
                       _vSgemv, _vSgemx, _vSgesub, _vSgetmi, _vSgetmo, 
                       _vSgevv, _vSnaxpy, _vSndot, _vSnorm2, _vSnrm2, _vSrot, 
                       _vSscal, _vSsum, _vSswap, _vSyax, _vSzaxpy, _vU1024Add, 
                       _vU1024AddS, _vU1024Divide, _vU1024HalfMultiply, 
                       _vU1024Mod, _vU1024Neg, _vU1024Sub, _vU1024SubS, 
                       _vU128Add, _vU128AddS, _vU128Divide, _vU128FullMultiply, 
                       _vU128HalfMultiply, _vU128Neg, _vU128Sub, _vU128SubS, 
                       _vU16Divide, _vU16HalfMultiply, _vU256Add, _vU256AddS, 
                       _vU256Divide, _vU256FullMultiply, _vU256HalfMultiply, 
                       _vU256Mod, _vU256Neg, _vU256Sub, _vU256SubS, _vU32Divide, 
                       _vU32FullMulEven, _vU32FullMulOdd, _vU32HalfMultiply, 
                       _vU512Add, _vU512AddS, _vU512Divide, _vU512FullMultiply, 
                       _vU512HalfMultiply, _vU512Mod, _vU512Neg, _vU512Sub, 
                       _vU512SubS, _vU64Add, _vU64AddS, _vU64Divide, _vU64FullMulEven, 
                       _vU64FullMulOdd, _vU64HalfMultiply, _vU64Neg, _vU64Sub, 
                       _vU64SubS, _vU8Divide, _vU8HalfMultiply, _vacosf, 
                       _vacoshf, _vasinf, _vasinhf, _vatan2f, _vatanf, 
                       _vatanhf, _vceilf, _vclassifyf, _vcopysignf, _vcosf, 
                       _vcoshf, _vcospif, _vdivf, _vec_sdot, _vexp2f, _vexpf, 
                       _vexpm1f, _vfabf, _vfabsf, _vfloorf, _vfmodf, _vintf, 
                       _vipowf, _vlog10f, _vlog1pf, _vlog2f, _vlogbf, _vlogf, 
                       _vnextafterf, _vnintf, _vpowf, _vrecf, _vremainderf, 
                       _vremquof, _vrsqrtf, _vscalbf, _vsignbitf, _vsincosf, 
                       _vsinf, _vsinhf, _vsinpif, _vsqrtf, _vtablelookup, 
                       _vtanf, _vtanhf, _vtanpif, _vtruncf, _vvacos, _vvacos_, 
                       _vvacosf, _vvacosf_, _vvacosh, _vvacosh_, _vvacoshf, 
                       _vvacoshf_, _vvasin, _vvasin_, _vvasinf, _vvasinf_, 
                       _vvasinh, _vvasinh_, _vvasinhf, _vvasinhf_, _vvatan, 
                       _vvatan2, _vvatan2_, _vvatan2f, _vvatan2f_, _vvatan_, 
                       _vvatanf, _vvatanf_, _vvatanh, _vvatanh_, _vvatanhf, 
                       _vvatanhf_, _vvcbrt, _vvcbrt_, _vvcbrtf, _vvcbrtf_, 
                       _vvceil, _vvceil_, _vvceilf, _vvceilf_, _vvcopysign, 
                       _vvcopysign_, _vvcopysignf, _vvcopysignf_, _vvcos, 
                       _vvcos_, _vvcosf, _vvcosf_, _vvcosh, _vvcosh_, _vvcoshf, 
                       _vvcoshf_, _vvcosisin, _vvcosisin_, _vvcosisinf, 
                       _vvcosisinf_, _vvcospi, _vvcospi_, _vvcospif, _vvcospif_, 
                       _vvdiv, _vvdiv_, _vvdivf, _vvdivf_, _vvexp, _vvexp2, 
                       _vvexp2_, _vvexp2f, _vvexp2f_, _vvexp_, _vvexpf, 
                       _vvexpf_, _vvexpm1, _vvexpm1_, _vvexpm1f, _vvexpm1f_, 
                       _vvfabf, _vvfabf_, _vvfabs, _vvfabs_, _vvfabsf, 
                       _vvfabsf_, _vvfloor, _vvfloor_, _vvfloorf, _vvfloorf_, 
                       _vvfmod, _vvfmod_, _vvfmodf, _vvfmodf_, _vvint, 
                       _vvint_, _vvintf, _vvintf_, _vvlog, _vvlog10, _vvlog10_, 
                       _vvlog10f, _vvlog10f_, _vvlog1p, _vvlog1p_, _vvlog1pf, 
                       _vvlog1pf_, _vvlog2, _vvlog2_, _vvlog2f, _vvlog2f_, 
                       _vvlog_, _vvlogb, _vvlogb_, _vvlogbf, _vvlogbf_, 
                       _vvlogf, _vvlogf_, _vvnextafter, _vvnextafter_, 
                       _vvnextafterf, _vvnextafterf_, _vvnint, _vvnint_, 
                       _vvnintf, _vvnintf_, _vvpow, _vvpow_, _vvpowf, _vvpowf_, 
                       _vvpows, _vvpows_, _vvpowsf, _vvpowsf_, _vvrec, 
                       _vvrec_, _vvrecf, _vvrecf_, _vvremainder, _vvremainder_, 
                       _vvremainderf, _vvremainderf_, _vvrsqrt, _vvrsqrt_, 
                       _vvrsqrtf, _vvrsqrtf_, _vvsin, _vvsin_, _vvsincos, 
                       _vvsincos_, _vvsincosf, _vvsincosf_, _vvsinf, _vvsinf_, 
                       _vvsinh, _vvsinh_, _vvsinhf, _vvsinhf_, _vvsinpi, 
                       _vvsinpi_, _vvsinpif, _vvsinpif_, _vvsqrt, _vvsqrt_, 
                       _vvsqrtf, _vvsqrtf_, _vvtan, _vvtan_, _vvtanf, _vvtanf_, 
                       _vvtanh, _vvtanh_, _vvtanhf, _vvtanhf_, _vvtanpi, 
                       _vvtanpi_, _vvtanpif, _vvtanpif_ ]
...
                                                                                                                                                                                                                                                                                                                             vecLib.tbd                                                                                          0100644 0001750 0001750 00000002145 12571375061 041511  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A                                   ---
archs:           [ i386, x86_64, x86_64h ]
platform:        macosx
install-name:    /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib
current-version: 563.3
exports:         
  - archs:           [ i386, x86_64, x86_64h ]
    re-exports:      [ /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib, 
                       /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib, 
                       /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLinearAlgebra.dylib, 
                       /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libSparseBLAS.dylib, 
                       /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib, 
                       /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib ]
...
                                                                                                                                                                                                                                                                                                                                                                                                                           Current                                                                                             0120777 0001750 0001750 00000000000 12620245063 041070  2A                                                                                                   ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions                                     vecLib.tbd                                                                                          0120777 0001750 0001750 00000000000 12620245063 044640  2Versions/Current/vecLib.tbd                                                                         ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework                                              Headers/                                                                                            0040755 0001750 0001750 00000000000 12612224736 031654  5                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A                                                                          Accelerate.h                                                                                        0100644 0001750 0001750 00000001114 12567451170 034052  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Headers                                                                  /*
     File:       Accelerate/Accelerate.h

     Contains:   Master include for all of Accelerate

     Version:    Accelerate-1

     Copyright:  Copyright (c) 2000-2015 by Apple Inc. All rights reserved.

     Bugs:       For bug reports, consult the following page on
                 the World Wide Web:

                     http://developer.apple.com/bugreporter/

*/
#ifndef __ACCELERATE__
#define __ACCELERATE__

#ifndef __VECLIB__
#include "../Frameworks/vecLib.framework/Headers/vecLib.h"
#endif

#ifndef VIMAGE_H
#include <vImage/vImage.h>
#endif

#endif /* __ACCELERATE__ */
                                                                                                                                                                                                                                                                                                                                                                                                                                                    Modules/                                                                                            0040755 0001750 0001750 00000000000 12612224736 031711  5                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A                                                                          module.modulemap                                                                                    0100644 0001750 0001750 00000000475 12567451170 035111  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/A/Modules                                                                  framework module Accelerate {
  umbrella header "Accelerate.h"
  export *
  module * { export * }

  framework module vImage [extern_c] {
    umbrella header "vImage.h"
    export *
    module * { export * }
  }
  framework module vecLib {
    umbrella header "vecLib.h"
    export *
    module * { export * }
  }
}

                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/Versions/Current 0120777 0001750 0001750 00000000000 12620245063 031637  2A                                                                                                   ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accelerate.framework/module.map       0100644 0001750 0001750 00000000475 12566173263 030365  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        framework module Accelerate {
  umbrella header "Accelerate.h"
  export *
  module * { export * }

  framework module vImage [extern_c] {
    umbrella header "vImage.h"
    export *
    module * { export * }
  }
  framework module vecLib {
    umbrella header "vecLib.h"
    export *
    module * { export * }
  }
}

                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/                   0040755 0001750 0001750 00000000000 12612224736 026117  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Accounts.tbd       0120777 0001750 0001750 00000000000 12620245063 036064  2Versions/Current/Accounts.tbd                                                                       ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Headers            0120777 0001750 0001750 00000000000 12620245063 034134  2Versions/Current/Headers                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Modules            0120777 0001750 0001750 00000000000 12620245063 034226  2Versions/Current/Modules                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/          0040755 0001750 0001750 00000000000 12612224736 027727  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/        0040755 0001750 0001750 00000000000 12612224736 030107  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        Accounts.tbd                                                                                        0100644 0001750 0001750 00000034003 12571375061 032301  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A                                                                            ---
archs:           [ x86_64 ]
platform:        macosx
install-name:    /System/Library/Frameworks/Accounts.framework/Versions/A/Accounts
current-version: 0.0
exports:         
  - archs:           [ x86_64 ]
    symbols:         [ _ACAccountCredentialsDidChangeNotification, _ACAccountPropertyAllowsInsecureAuthentication, 
                       _ACAccountPropertyAuthenticationScheme, _ACAccountPropertyAutodiscoverURL, 
                       _ACAccountPropertyConfigurationProfileIdentifier, 
                       _ACAccountPropertyDisableDynamicConfiguration, _ACAccountPropertyEWSExternalURL, 
                       _ACAccountPropertyEWSInternalURL, _ACAccountPropertyEWSRootFolderID, 
                       _ACAccountPropertyEmailAliases, _ACAccountPropertyEmailAliasesEditingURLString, 
                       _ACAccountPropertyFullName, _ACAccountPropertyHostname, 
                       _ACAccountPropertyIMAPHostname, _ACAccountPropertyIMAPPortNumber, 
                       _ACAccountPropertyIMAPRequiresSSL, _ACAccountPropertyIdentityEmailAddress, 
                       _ACAccountPropertyPortNumber, _ACAccountPropertyPreventRecentsSyncing, 
                       _ACAccountPropertySMTPHostname, _ACAccountPropertySMTPPortNumber, 
                       _ACAccountPropertySMTPRequiresSSL, _ACAccountPropertySSLEnabled, 
                       _ACAccountPropertySSLIsDirect, _ACAccountPropertySecCertificatePersistentRefs, 
                       _ACAccountPropertySecIdentityPersistentRef, _ACAccountPropertySendingAccountIdentifier, 
                       _ACAccountPropertyServerPath, _ACAccountPropertyUseMailDrop, 
                       _ACAccountStoreDidChangeNotification, _ACAccountTypeIdentifier126, 
                       _ACAccountTypeIdentifier163, _ACAccountTypeIdentifierAIM, 
                       _ACAccountTypeIdentifierAol, _ACAccountTypeIdentifierAppleAccount, 
                       _ACAccountTypeIdentifierAppleID, _ACAccountTypeIdentifierAppleIDAuthentication, 
                       _ACAccountTypeIdentifierBookmarkDAV, _ACAccountTypeIdentifierCalDAV, 
                       _ACAccountTypeIdentifierCardDAV, _ACAccountTypeIdentifierCloudKit, 
                       _ACAccountTypeIdentifierDeviceLocator, _ACAccountTypeIdentifierExchange, 
                       _ACAccountTypeIdentifierFaceTime, _ACAccountTypeIdentifierFacebook, 
                       _ACAccountTypeIdentifierFindMyFriends, _ACAccountTypeIdentifierFlickr, 
                       _ACAccountTypeIdentifierForASSAccountType, _ACAccountTypeIdentifierGameCenter, 
                       _ACAccountTypeIdentifierGmail, _ACAccountTypeIdentifierHolidayCalendar, 
                       _ACAccountTypeIdentifierHotmail, _ACAccountTypeIdentifierIDMS, 
                       _ACAccountTypeIdentifierIMAP, _ACAccountTypeIdentifierIMAPMail, 
                       _ACAccountTypeIdentifierIMAPNotes, _ACAccountTypeIdentifierIdentityServices, 
                       _ACAccountTypeIdentifierJabber, _ACAccountTypeIdentifierKerberosSSO, 
                       _ACAccountTypeIdentifierLDAP, _ACAccountTypeIdentifierLinkedIn, 
                       _ACAccountTypeIdentifierMadrid, _ACAccountTypeIdentifierOSXServer, 
                       _ACAccountTypeIdentifierOnMyDevice, _ACAccountTypeIdentifierPOP, 
                       _ACAccountTypeIdentifierQQ, _ACAccountTypeIdentifierSMTP, 
                       _ACAccountTypeIdentifierSinaWeibo, _ACAccountTypeIdentifierSubscribedCalendar, 
                       _ACAccountTypeIdentifierTencentWeibo, _ACAccountTypeIdentifierTudou, 
                       _ACAccountTypeIdentifierTwitter, _ACAccountTypeIdentifierVimeo, 
                       _ACAccountTypeIdentifierYahoo, _ACAccountTypeIdentifierYahooIM, 
                       _ACAccountTypeIdentifierYelp, _ACAccountTypeIdentifierYouku, 
                       _ACAccountTypeIdentifieriTunesStore, _ACAccountTypesDidChangeNotification, 
                       _ACAuthenticationSchemeAPOP, _ACAuthenticationSchemeAnyPlainText, 
                       _ACCloudKitContainerUserIDKey, _ACContinuationTokenKey, 
                       _ACCredentialTypeAppleIDAuthentication, _ACCredentialTypeHybrid, 
                       _ACCredentialTypeKerberos, _ACCredentialTypeOAuth, 
                       _ACCredentialTypeOAuth2, _ACCredentialTypePassword, 
                       _ACCredentialTypeToken, _ACCredentialTypeYahooXYMPKI, 
                       _ACDAccountStoreDidChangeNotification, _ACDGetAdamOrDisplayIDForPID, 
                       _ACDGetStoreOrBundleIDForPID, _ACDGetTeamIDForBundleURL, 
                       _ACDataclassForASSDataclass, _ACEmailAliasKeyColor, 
                       _ACEmailAliasKeyDisplayName, _ACEmailAliasKeyEmailAddress, 
                       _ACEmailAliasKeyEmailAddresses, _ACEmailAliasKeyIsDefault, 
                       _ACEmailAliasKeyIsEnabled, _ACEmailAliasKeyIsPrimary, 
                       _ACEnableAccountDiff, _ACErrorDomain, _ACErrorKeychainDomain, 
                       _ACFacebookAppIdKey, _ACFacebookAudienceEveryone, 
                       _ACFacebookAudienceFriends, _ACFacebookAudienceKey, 
                       _ACFacebookAudienceOnlyMe, _ACFacebookPermissionsKey, 
                       _ACFindMyFriendsAppTokenKey, _ACFindMyFriendsTokenKey, 
                       _ACFindMyiPhoneSiriTokenKey, _ACFindMyiPhoneTokenKey, 
                       _ACGetFileLoggingLevel, _ACGetSyslogOutputLevel, 
                       _ACGrandslamApplicationIdentifierKey, _ACGrandslamTokenIdentifierKey, 
                       _ACHSATokenKey, _ACHeartbeatTokenKey, _ACKeepPasswordsAround, 
                       _ACLinkedInAppIdKey, _ACLinkedInPermissionsKey, 
                       _ACLiverpoolContainerIdKey, _ACLogLevelKey, _ACMapsTokenKey, 
                       _ACOAuthTokenKey, _ACOAuthTokenNoSyncKey, _ACOAuthTokenNoSyncSeparator, 
                       _ACOAuthTokenSecretKey, _ACOutputLevelKey, _ACPasswordKey, 
                       _ACPasswordResetTokenKey, _ACPropertyKeyEnabledDataclasses, 
                       _ACPropertyKeyProvisionedDataclasses, _ACPurposeKey, 
                       _ACRawPasswordKey, _ACRemoteDeviceCommandAddAccount, 
                       _ACRemoteDeviceCommandDeleteAccount, _ACRemoteDeviceCommandDeleteAllAccounts, 
                       _ACRemoteDeviceCommandShowCredentialPrompt, _ACRemoteDeviceCommandUpdateAccount, 
                       _ACRemoteDeviceCommandUpdateAccountCredential, _ACSetFileLoggingLevel, 
                       _ACSetSyslogOutputLevel, _ACShouldSuppressPromptsKey, 
                       _ACTencentWeiboAppIdKey, _ACTencentWeiboClientConsumerKey, 
                       _ACTokenExpiryDateKey, _ACTokenKey, _ACYahooXYMPKICookieCrumbKey, 
                       _ACYahooXYMPKICookieTKey, _ACYahooXYMPKICookieYKey, 
                       _ACYahooXYMPKITokenKey, __ACLogInternal, __ACLogInternalV, 
                       _ac_dispatch_remote, _createACAccountWithASAccountProperties, 
                       _createACAccountWithASAccountPropertiesAndACAccountType, 
                       _kACAccountIdentifier, _kACAllowedSSLCertificatesKey, 
                       _kACDAllAccountsAccessEntitlement, _kACDAppleAccountsFullAccessEntitlement, 
                       _kACDAppleIDAuthenticationDefaultAccessEntitlement, 
                       _kACDApplicationIDFromPIDEntitlement, _kACDAuthenticationDialogHostEntitlement, 
                       _kACDBundleIDSpoofingEntitlement, _kACDConnectBeforeAccountMigrationDidFinishEntitlement, 
                       _kACDCustomClientAccessInfoEntitlement, _kACDFacebookAccountsDefaultAccessEntitlement, 
                       _kACDFlickrAccountsDefaultAccessEntitlement, _kACDIDMSAccountFullAccessEntitlement, 
                       _kACDInactiveAcccountsAccessEntitlement, _kACDLinkedInAccountsDefaultAccessEntitlement, 
                       _kACDOSXServerAccountsDefaultAccessEntitlement, 
                       _kACDShouldNotUseParentAccount, _kACDTencentWeiboAccountsDefaultAccessEntitlement, 
                       _kACDTudouAccountsDefaultAccessEntitlement, _kACDTwitterAccountsDefaultAccessEntitlement, 
                       _kACDVimeoAccountsDefaultAccessEntitlement, _kACDWeiboAccountsDefaultAccessEntitlement, 
                       _kACDYelpAccountsDefaultAccessEntitlement, _kACDYoukuAccountsDefaultAccessEntitlement, 
                       _kACDiscoverPropertiesDiscoverConnectionPropertiesKey, 
                       _kACDiscoverPropertiesForAccountCreationKey, _kACDiscoverPropertiesRefreshEmailAliasesKey, 
                       _kACDiscoverPropertiesRefreshEmailRulesKey, _kACDiscoverPropertiesShouldSaveKey, 
                       _kACIDServiceCommandAccountChanged, _kACIDServiceCommandAccountDeleted, 
                       _kACIDServiceCommandAuthenticateAccount, _kACIDServiceCommandNewAccount, 
                       _kACIDServiceCommandPromptUser, _kACRenewCredentialsAppleIDServiceTypeKey, 
                       _kACRenewCredentialsCallbackURLKey, _kACRenewCredentialsLoginURLKey, 
                       _kACRenewCredentialsProxiedAppBundleIDKey, _kACRenewCredentialsReasonStringKey, 
                       _kACRenewCredentialsServicesKey, _kACRenewCredentialsShouldAvoidUIKey, 
                       _kACRenewCredentialsShouldForceKey, _kACRenewCredentialsShouldPromptBeforeRenewKey, 
                       _kACVerifyCredentialsShouldSaveKey, _kASSASChangeAccountChangeTypeKey, 
                       _kASSASChangeAccountIdentifierKey, _kASSASChangeAccountOriginallyEnabledDataclassesKey, 
                       _kASSASChangeAccountTypeKey, _kASSAccountCalendarsWereMigrated, 
                       _kASSAccountChildAccounts, _kASSAccountClass, _kASSAccountDataclassBackup, 
                       _kASSAccountDataclassBookmarks, _kASSAccountDataclassCalendars, 
                       _kASSAccountDataclassContacts, _kASSAccountDataclassContactsSearch, 
                       _kASSAccountDataclassDeviceLocator, _kASSAccountDataclassKeyValue, 
                       _kASSAccountDataclassMail, _kASSAccountDataclassMediaStream, 
                       _kASSAccountDataclassNotes, _kASSAccountDataclassReminders, 
                       _kASSAccountDataclassSharedStreams, _kASSAccountDataclassShoebox, 
                       _kASSAccountDataclassUbiquity, _kASSAccountDeleteActionDeleteData, 
                       _kASSAccountDeleteActionMergeData, _kASSAccountDisplayName, 
                       _kASSAccountEnabledDataclasses, _kASSAccountIdentifier, 
                       _kASSAccountPreventRecentsSyncing, _kASSAccountProvisionedDataclasses, 
                       _kASSAccountShortTypeString, _kASSAccountSupportedDataclasses, 
                       _kASSAccountSyncIdentifier, _kASSAccountType, _kASSAccountTypeString, 
                       _kASSAccountUsername, _kASSAppleAccountType, _kASSBookmarkDAVAccountType, 
                       _kASSCalDAVAccountType, _kASSCalendarsAccountSubscribedCalendars, 
                       _kASSCardDAVAccountType, _kASSCastleIMAPAccountType, 
                       _kASSDataclassDisplaySwitch, _kASSDataclassRequiresUserConfirmation, 
                       _kASSDataclassSupportsMultipleStores, _kASSDataclassToggleActionDeleteLocalData, 
                       _kASSDataclassToggleActionDeleteSyncData, _kASSDataclassToggleActionKeepLocalData, 
                       _kASSDataclassToggleActionMergeLocalData, _kASSDataclassToggleActionMergeSyncData, 
                       _kASSDataclassToggleActionNone, _kASSExchangeAccountType, 
                       _kASSGmailAccountType, _kASSIMAPNotesAccountType, 
                       _kASSLDAPAccountType, _kASSMailAccountType, _kASSMobileMeAccountType, 
                       _kASSOnMyDeviceAccountType, _kASSPlistAccountsKey, 
                       _kASSPlistVersionKey, _kASSPropertiesDeleteAccountActions, 
                       _kASSPropertiesDisableDataclassActions, _kASSPropertiesEnableDataclassActions, 
                       _kASSPropertiesShowRemindersSeparately, _kASSPropertiesSupportedDataclasses, 
                       _kASSSMTPAccountType, _kASSSubscribedCalendarAccountType, 
                       _kASSYahooAccountType, _kAccountAuthenticationTypeAppleID, 
                       _kAccountAuthenticationTypeKerberos, _kAccountAuthenticationTypeNone, 
                       _kAccountAuthenticationTypeOAuth, _kAccountAuthenticationTypeParent, 
                       _kAccountDataclassAvailability, _kAccountDataclassBackToMyMac, 
                       _kAccountDataclassBackup, _kAccountDataclassBookmarks, 
                       _kAccountDataclassCKDatabaseService, _kAccountDataclassCKDeviceService, 
                       _kAccountDataclassCKShareService, _kAccountDataclassCalendars, 
                       _kAccountDataclassCloudPhotos, _kAccountDataclassContacts, 
                       _kAccountDataclassContactsSearch, _kAccountDataclassContent, 
                       _kAccountDataclassDeviceLocator, _kAccountDataclassKeyValue, 
                       _kAccountDataclassKeychainSync, _kAccountDataclassMail, 
                       _kAccountDataclassMediaStream, _kAccountDataclassMessages, 
                       _kAccountDataclassNetworkVPN, _kAccountDataclassNews, 
                       _kAccountDataclassNotes, _kAccountDataclassNotifications, 
                       _kAccountDataclassReminders, _kAccountDataclassServerDocuments, 
                       _kAccountDataclassShareLocation, _kAccountDataclassShareMenu, 
                       _kAccountDataclassSharedStreams, _kAccountDataclassShoebox, 
                       _kAccountDataclassSmartDefaults, _kAccountDataclassUbiquity, 
                       _serializeSecCertificates, _serializeSecTrust, _unserializeSecCertificates, 
                       _unserializeSecTrust ]
    objc-classes:    [ _ACAccount, _ACAccountCredential, _ACAccountStore, 
                       _ACAccountStoreClientSideListener, _ACAccountType, 
                       _ACCredentialItem, _ACDAccountStoreInterface, _ACDPropertyEncryption, 
                       _ACDataclassAction, _ACManagedDefaults, _ACOAuthSigner, 
                       _ACRemoteAccountStoreSession, _ACSystemConfigManager ]
...
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/Headers/0040755 0001750 0001750 00000000000 12612224736 031462  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        ACAccount.h                                                                                         0100644 0001750 0001750 00000004104 12566222267 033355  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/Headers                                                                    //
//  ACAccount.h
//  Accounts
//
//  Copyright (c) 2011-2012 Apple Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <Accounts/AccountsDefines.h>
@class ACAccountType, ACAccountCredential;

// The ACAccount class represents an account stored on the system.
// Accounts are created not bound to any store. Once an account is saved it belongs
// to the store it was saved into.

ACCOUNTS_CLASS_AVAILABLE(10_8, 5_0)
@interface ACAccount : NSObject

// Creates a new account object with a specified account type.
- (instancetype)initWithAccountType:(ACAccountType *)type NS_DESIGNATED_INITIALIZER;

// This identifier can be used to look up the account using [ACAccountStore accountWithIdentifier:].
@property (readonly, weak, NS_NONATOMIC_IOSONLY) NSString      *identifier;

// Accounts are stored with a particular account type. All available accounts of a particular type 
// can be looked up using [ACAccountStore accountsWithAccountType:]. When creating new accounts
// this property is required.
@property (strong, NS_NONATOMIC_IOSONLY)   ACAccountType       *accountType;

// A human readable description of the account.
// This property is only available to applications that have been granted access to the account by the user.
@property (copy, NS_NONATOMIC_IOSONLY)     NSString            *accountDescription;

// The username for the account. This property can be set and saved during account creation. The username is
// only available to applications that have been granted access to the account by the user.
@property (copy, NS_NONATOMIC_IOSONLY)     NSString            *username;

// For accounts that support it (currently only Facebook accounts), you can get the user's full name for display
// purposes without having to talk to the network.
@property (readonly, NS_NONATOMIC_IOSONLY)  NSString           *userFullName NS_AVAILABLE_IOS(NA);

// The credential for the account. This property can be set and saved during account creation. It is 
// inaccessible once the account has been saved.
@property (strong, NS_NONATOMIC_IOSONLY)   ACAccountCredential *credential;

@end
                                                                                                                                                                                                                                                                                                                                                                                                                                                            ACAccountCredential.h                                                                               0100644 0001750 0001750 00000002061 12566222256 035346  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/Headers                                                                    //
//  ACAccountCredential.h
//  Accounts
//
//  Copyright (c) 2011-2012 Apple Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <Accounts/AccountsDefines.h>

// An existing credential may be provided when creating an account.
// For example, to create a system Twitter account using an existing OAuth token/secret pair:
//
// 1. Create the new account instance.
// 2. Set the account type.
// 3. Create an ACAccountCredential using your existing OAuth token/secret and set the account's credential property.
// 4. Save the account.
//
// The account will be validated and saved as a system account.

ACCOUNTS_CLASS_AVAILABLE(10_8, 5_0)
@interface ACAccountCredential : NSObject

- (instancetype)initWithOAuthToken:(NSString *)token tokenSecret:(NSString *)secret;

- (instancetype)initWithOAuth2Token:(NSString *)token 
                       refreshToken:(NSString *)refreshToken
                         expiryDate:(NSDate *)expiryDate;

// This property is only valid for OAuth2 credentials
@property (copy, nonatomic) NSString *oauthToken;

@end
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ACAccountStore.h                                                                                    0100644 0001750 0001750 00000012344 12566222267 034377  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/Headers                                                                    //
//  ACAccountStore.h
//  Accounts
//
//  Copyright (c) 2011-2012 Apple Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <Accounts/AccountsDefines.h>

typedef NS_ENUM(NSInteger, ACAccountCredentialRenewResult) {
    ACAccountCredentialRenewResultRenewed,  // A new credential was obtained and is now associated with the account.
    ACAccountCredentialRenewResultRejected, // Renewal failed because of a user-initiated action.
    ACAccountCredentialRenewResultFailed,   // A non-user-initiated cancel of the prompt. 
};

typedef void(^ACAccountStoreSaveCompletionHandler)(BOOL success, NSError *error);
typedef void(^ACAccountStoreRemoveCompletionHandler)(BOOL success, NSError *error);
typedef void(^ACAccountStoreRequestAccessCompletionHandler)(BOOL granted, NSError *error);
typedef void(^ACAccountStoreCredentialRenewalHandler)(ACAccountCredentialRenewResult renewResult, NSError *error);

@class ACAccount, ACAccountType;

// The ACAccountStore class provides an interface for accessing and manipulating
// accounts. You must create an ACAccountStore object to retrieve, add and delete
// accounts from the Accounts database.
//
// IMPORTANT NOTE: You MUST keep the account store around for as long as you have
// any objects fetched from that store if you expect other 'sub-fetches' to work,
// most notably being fetching credentials. If you really just want to open the
// store to grab credentials, just be sure to grab the credential object and then
// you can release the owning account and store, e.g.

ACCOUNTS_CLASS_AVAILABLE(10_8, 5_0)
@interface ACAccountStore : NSObject

// An array of all the accounts in an account database
@property (readonly, weak, NS_NONATOMIC_IOSONLY) NSArray *accounts;

// Returns the account matching the given account identifier
- (ACAccount *)accountWithIdentifier:(NSString *)identifier;

// Returns the account type object matching the account type identifier. See
// ACAccountType.h for well known account type identifiers
- (ACAccountType *)accountTypeWithAccountTypeIdentifier:(NSString *)typeIdentifier;

// Returns the accounts matching a given account type.
- (NSArray *)accountsWithAccountType:(ACAccountType *)accountType;

// Saves the account to the account database. If the account is unauthenticated and the associated account
// type supports authentication, the system will attempt to authenticate with the credentials provided.
// Assuming a successful authentication, the account will be saved to the account store. The completion handler
// for this method is called on an arbitrary queue.
- (void)saveAccount:(ACAccount *)account withCompletionHandler:(ACAccountStoreSaveCompletionHandler)completionHandler;

// DEPRECATED: Please use requestAccessToAccountsWithType:options:completion: instead.
- (void)requestAccessToAccountsWithType:(ACAccountType *)accountType
                  withCompletionHandler:(ACAccountStoreRequestAccessCompletionHandler)handler NS_DEPRECATED(NA, NA, 5_0, NA);

// Obtains permission, if necessary, from the user to access protected properties, and utilize accounts
// of a particular type in protected operations, for example OAuth signing. The completion handler for 
// this method is called on an arbitrary queue.
// Certain account types (such as Facebook) require an options dictionary. A list of the required keys
// appears in ACAccountType.h. This method will throw an NSInvalidArgumentException if the options
// dictionary is not provided for such account types. Conversely, if the account type does not require
// an options dictionary, the options parameter must be nil.
- (void)requestAccessToAccountsWithType:(ACAccountType *)accountType
                                options:(NSDictionary *)options
                             completion:(ACAccountStoreRequestAccessCompletionHandler)completion;

// Call this if you discover that an ACAccount's credential is no longer valid.
// For Twitter and Sina Weibo accounts, this method will prompt the user to go to Settings to re-enter their password.
// For Facebook accounts, if your access token became invalid due to regular expiration, this method will obtain a new one.
// However, if the user has deauthorized your app, this renewal request will return ACAccountCredentialRenewResultRejected.
- (void)renewCredentialsForAccount:(ACAccount *)account completion:(ACAccountStoreCredentialRenewalHandler)completionHandler;

// Removes an account from the account store. The completion handler for this method is called on an arbitrary queue.
// This call will fail if you don't have sufficient rights to remove the account in question.
- (void)removeAccount:(ACAccount *)account withCompletionHandler:(ACAccountStoreRemoveCompletionHandler)completionHandler;

@end

// Notification name sent out when the database is changed by an external process, another account store
// in the same process or by calling saveAccount: or removeAccount: on a store you are managing. When this
// notification is received, you should consider all ACAccount instances you have to be invalid. Purge current
// instances of ACAccount and obtain new instances using the account store. You may need to deal with accounts
// being removed by an external process while you are using them.
ACCOUNTS_EXTERN NSString * const ACAccountStoreDidChangeNotification NS_AVAILABLE(10_8, 5_0);
                                                                                                                                                                                                                                                                                            ACAccountType.h                                                                                     0100644 0001750 0001750 00000006267 12566222267 034233  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/Headers                                                                    //
//  ACAccountType.h
//  Accounts
//
//  Copyright (c) 2011-2012 Apple Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <Accounts/AccountsDefines.h>

// The identifiers for supported system account types are listed here:
ACCOUNTS_EXTERN NSString * const ACAccountTypeIdentifierTwitter NS_AVAILABLE(10_8, 5_0);
ACCOUNTS_EXTERN NSString * const ACAccountTypeIdentifierFacebook NS_AVAILABLE(10_8, NA);
ACCOUNTS_EXTERN NSString * const ACAccountTypeIdentifierSinaWeibo NS_AVAILABLE(10_8, NA);
ACCOUNTS_EXTERN NSString * const ACAccountTypeIdentifierTencentWeibo NS_AVAILABLE(10_9, NA);
ACCOUNTS_EXTERN NSString * const ACAccountTypeIdentifierLinkedIn NS_AVAILABLE(10_9, NA);

// Options dictionary keys for Facebook access, for use with [ACAccountStore requestAccessToAccountsWithType:options:completion:]
ACCOUNTS_EXTERN NSString * const ACFacebookAppIdKey NS_AVAILABLE(10_8, NA);            // Your Facebook App ID, as it appears on the Facebook website.
ACCOUNTS_EXTERN NSString * const ACFacebookPermissionsKey NS_AVAILABLE(10_8, NA);      // An array of of the permissions you're requesting.
ACCOUNTS_EXTERN NSString * const ACFacebookAudienceKey NS_AVAILABLE(10_8, NA);         // Only required when posting permissions are requested.

// Options dictionary values for Facebook access, for use with [ACAccountStore requestAccessToAccountsWithType:options:completion:]
ACCOUNTS_EXTERN NSString * const ACFacebookAudienceEveryone NS_AVAILABLE(10_8, NA);    // Posts from your app are visible to everyone.
ACCOUNTS_EXTERN NSString * const ACFacebookAudienceFriends NS_AVAILABLE(10_8, NA);     // Posts are visible only to friends.
ACCOUNTS_EXTERN NSString * const ACFacebookAudienceOnlyMe NS_AVAILABLE(10_8, NA);      // Posts are visible to the user only.

// Options dictionary keys for LinkedIn access, for use with [ACAccountStore requestAccessToAccountsWithType:options:completion:]
ACCOUNTS_EXTERN NSString * const ACLinkedInAppIdKey NS_AVAILABLE(10_9, NA);           // Your LinkedIn App ID (or API Key), as it appears on the LinkedIn website.
ACCOUNTS_EXTERN NSString * const ACLinkedInPermissionsKey NS_AVAILABLE(10_9, NA);      // An array of of the LinkedIn permissions you're requesting.

ACCOUNTS_EXTERN NSString *const ACTencentWeiboAppIdKey NS_AVAILABLE(10_9, NA); //Tencent App ID

// Each account has an associated account type, containing information relevant to all the accounts of that type.
// ACAccountType objects are obtained by using the [ACAccountStore accountTypeWithIdentifier:] method
// or accessing the accountType property for a particular account object. They may also be used to find
// all the accounts of a particular type using [ACAccountStore accountsWithAccountType:]

ACCOUNTS_CLASS_AVAILABLE(10_8, 5_0)
@interface ACAccountType : NSObject

// A human readable description of the account type.
@property (readonly, nonatomic) NSString *accountTypeDescription;

// A unique identifier for the account type. Well known system account type identifiers are listed above.
@property (readonly, nonatomic) NSString *identifier;

// A boolean indicating whether the user has granted access to accounts of this type for your application.
@property (readonly, nonatomic) BOOL     accessGranted;

@end
                                                                                                                                                                                                                                                                                                                                         ACError.h                                                                                           0100644 0001750 0001750 00000004517 12566222256 033060  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/Headers                                                                    //
//  ACError.h
//  Accounts
//
//  Copyright (c) 2011-2012 Apple Inc. All rights reserved.
//

#import <Accounts/AccountsDefines.h>

ACCOUNTS_EXTERN NSString * const ACErrorDomain NS_AVAILABLE(10_8, 5_0);

typedef enum ACErrorCode {
    ACErrorUnknown = 1,
    ACErrorAccountMissingRequiredProperty,  // Account wasn't saved because it is missing a required property.
    ACErrorAccountAuthenticationFailed,     // Account wasn't saved because authentication of the supplied credential failed.
    ACErrorAccountTypeInvalid,              // Account wasn't saved because the account type is invalid.
    ACErrorAccountAlreadyExists,            // Account wasn't added because it already exists.
    ACErrorAccountNotFound,                 // Account wasn't deleted because it could not be found.
    ACErrorPermissionDenied,                // The operation didn't complete because the user denied permission.
    ACErrorAccessInfoInvalid,               // The client's access info dictionary has incorrect or missing values.
    ACErrorClientPermissionDenied,          // Your client does not have access to the requested data.
    ACErrorAccessDeniedByProtectionPolicy,  // Due to the current protection policy in effect, we couldn't fetch a credential
    ACErrorCredentialNotFound,              // Yo, I tried to find your credential, but it must have run off!
    ACErrorFetchCredentialFailed,           // Something bad happened on the way to the keychain
    ACErrorStoreCredentialFailed,           // Unable to store credential
    ACErrorRemoveCredentialFailed,          // Unable to remove credential
    ACErrorUpdatingNonexistentAccount,      // Account save failed because the account being updated has been removed.
    ACErrorInvalidClientBundleID,           // The client making the request does not have a valid bundle ID.
    ACErrorDeniedByPlugin,                  // A plugin prevented the expected action to occur.
    ACErrorCoreDataSaveFailed,              // Something broke below us when we tried to the CoreData store.
    ACErrorFailedSerializingAccountInfo,
    ACErrorInvalidCommand,
    ACErrorMissingTransportMessageID,
    ACErrorCredentialItemNotFound,          // Credential item wasn't saved because it could not be found.
    ACErrorCredentialItemNotExpired,        // Credential item wasn't removed because it has not yet expired.
} ACErrorCode;
                                                                                                                                                                                 Accounts.h                                                                                          0100644 0001750 0001750 00000000463 12566222256 033336  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/Headers                                                                    //
//  Accounts.h
//  Accounts
//
//  Copyright (c) 2011-2012 Apple Inc. All rights reserved.
//

#import <Accounts/AccountsDefines.h>
#import <Accounts/ACAccount.h>
#import <Accounts/ACAccountType.h>
#import <Accounts/ACAccountCredential.h>
#import <Accounts/ACAccountStore.h>
#import <Accounts/ACError.h>
                                                                                                                                                                                                             AccountsDefines.h                                                                                   0100644 0001750 0001750 00000000673 12566222256 034637  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/Headers                                                                    //
//  AccountsDefines.h
//  Accounts
//
//  Copyright (c) 2011-2012 Apple Inc. All rights reserved.
//


#ifdef __cplusplus
#define ACCOUNTS_EXTERN		extern "C" __attribute__((visibility ("default")))
#else
#define ACCOUNTS_EXTERN	        extern __attribute__((visibility ("default")))
#endif

#define ACCOUNTS_CLASS_AVAILABLE(_desktopIntro, _iphoneIntro) __attribute__((visibility("default"))) NS_CLASS_AVAILABLE(_desktopIntro, _iphoneIntro)
                                                                     osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/Modules/0040755 0001750 0001750 00000000000 12612224736 031517  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        module.modulemap                                                                                    0100644 0001750 0001750 00000000160 12566222267 034631  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/A/Modules                                                                    framework module Accounts [extern_c] {
    umbrella header "Accounts.h"
    export *
    module * { export * }
}                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/Accounts.framework/Versions/Current   0120777 0001750 0001750 00000000000 12620245063 031366  2A                                                                                                   ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/                0040755 0001750 0001750 00000000000 12612224736 026540  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/AddressBook.tbd 0120777 0001750 0001750 00000000000 12620245063 037547  2Versions/Current/AddressBook.tbd                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Headers         0120777 0001750 0001750 00000000000 12620245063 034555  2Versions/Current/Headers                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Modules         0120777 0001750 0001750 00000000000 12620245063 034647  2Versions/Current/Modules                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/       0040755 0001750 0001750 00000000000 12612224736 030350  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/     0040755 0001750 0001750 00000000000 12612224736 030530  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        AddressBook.tbd                                                                                     0100644 0001750 0001750 00000115423 12571375061 033351  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A                                                                         ---
archs:           [ i386, x86_64 ]
platform:        macosx
install-name:    /System/Library/Frameworks/AddressBook.framework/Versions/A/AddressBook
current-version: 1679.0
exports:         
  - archs:           [ x86_64 ]
    objc-classes:    [ _ABPersonPicker ]
  - archs:           [ i386, x86_64 ]
    re-exports:      [ /System/Library/PrivateFrameworks/ContactsPersistence.framework/Versions/A/ContactsPersistence, 
                       /usr/lib/libobjc.A.dylib ]
    symbols:         [ _ABACAccountPropertyAllowsInsecureAuthentication, 
                       _ABACAccountPropertyAutodiscoverURL, _ABACAccountPropertyEWSExternalURL, 
                       _ABACAccountPropertyEWSInternalURL, _ABACAccountPropertyEWSRootFolderID, 
                       _ABACAccountPropertyHostname, _ABACAccountPropertyPortNumber, 
                       _ABACAccountPropertySSLEnabled, _ABACAccountPropertyServerPath, 
                       _ABACAccountTypeIdentifierCardDAV, _ABACAccountTypeIdentifierExchange, 
                       _ABACAccountTypeIdentifierGmail, _ABACAccountTypeIdentifierLDAP, 
                       _ABACAccountTypeIdentifierYahoo, _ABAIMInstantVisible, 
                       _ABAccountACAccountIdentifierKey, _ABAccountACAccountTypeIdentifierKey, 
                       _ABAccountACParentAccountTypeIdentifierKey, _ABAccountAListPluginIdentifierKey, 
                       _ABAccountAutodiscoverDomainKey, _ABAccountAutodiscoverServerHostKey, 
                       _ABAccountAutodiscoverServerPathKey, _ABAccountAutodiscoverServerPortKey, 
                       _ABAccountAutodiscoverServerUseSSLKey, _ABAccountAutodiscoverURLKey, 
                       _ABAccountConfigurationDidChangeNotification, _ABAccountDescriptionKey, 
                       _ABAccountDisabledKey, _ABAccountEmailAddressKey, 
                       _ABAccountEnabledKey, _ABAccountExchangeRootFolderIdKey, 
                       _ABAccountExternalServerHostKey, _ABAccountExternalServerPathKey, 
                       _ABAccountExternalServerPortKey, _ABAccountExternalServerUseSSLKey, 
                       _ABAccountFullNameKey, _ABAccountIdentifierKey, 
                       _ABAccountLDAPSearchBaseKey, _ABAccountLDAPSearchScopeKey, 
                       _ABAccountLDAPUseAuthenticationKey, _ABAccountPasswordKey, 
                       _ABAccountRepositoryAccountsKey, _ABAccountRepositoryAllAccountsKey, 
                       _ABAccountRepositoryDidChangeNotification, _ABAccountSearchableKey, 
                       _ABAccountServerHostKey, _ABAccountServerPathKey, 
                       _ABAccountServerPortKey, _ABAccountServerUseSSLKey, 
                       _ABAccountStatusAlert, _ABAccountStatusAlertBadge, 
                       _ABAccountStatusDidChangeNotification, _ABAccountStatusOffline, 
                       _ABAccountStatusOfflineBadge, _ABAccountStatusStateKey, 
                       _ABAccountTypeKey, _ABAccountUserNameKey, _ABActivityAlertRingtoneKey, 
                       _ABActivityAlertSoundKey, _ABActivityAlertTextToneKey, 
                       _ABActivityAlertVibrationKey, _ABAddPropertiesAndTypes, 
                       _ABAddRecord, _ABAddressBookErrorDomain, _ABAddressesVisible, 
                       _ABAggregateComparator, _ABAuthenticationTypeIdentifier, 
                       _ABBaseLDAPSearchScopeType, _ABBeginLoadingImageDataForClient, 
                       _ABBirthDayVisible, _ABBuiltInLabelsAIMInstant, 
                       _ABBuiltInLabelsAddress, _ABBuiltInLabelsDates, 
                       _ABBuiltInLabelsEmail, _ABBuiltInLabelsICQInstant, 
                       _ABBuiltInLabelsInstantMessage, _ABBuiltInLabelsJabberInstant, 
                       _ABBuiltInLabelsMSNInstant, _ABBuiltInLabelsPhone, 
                       _ABBuiltInLabelsRelatedRecords, _ABBuiltInLabelsSocialProfile, 
                       _ABBuiltInLabelsURLs, _ABBuiltInLabelsYahooInstant, 
                       _ABCNAlternateBirthdayComponentsKey, _ABCNAnyLabel, 
                       _ABCNBirthdayComponentsKey, _ABCNCompanyNameKey, 
                       _ABCNContactFromABPerson, _ABCNContactIdentifierFromString, 
                       _ABCNContactIsKeyMultiValue, _ABCNDepartmentNameKey, 
                       _ABCNEmailAddressesKey, _ABCNFirstNameKey, _ABCNHomeLabel, 
                       _ABCNIdentifierKey, _ABCNInstantMessageAddressesKey, 
                       _ABCNJobTitleKey, _ABCNLabeledValueToIdentifier, 
                       _ABCNLabeledValueToLabel, _ABCNLabeledValueToValue, 
                       _ABCNLastNameKey, _ABCNMaidenNameKey, _ABCNMiddleNameKey, 
                       _ABCNNameSuffixKey, _ABCNNameTitleKey, _ABCNNicknameKey, 
                       _ABCNNoteKey, _ABCNOtherDateComponentsKey, _ABCNOtherLabel, 
                       _ABCNPhoneIPhoneLabel, _ABCNPhoneMobileLabel, _ABCNPhoneNumbersKey, 
                       _ABCNPhoneticFirstNameKey, _ABCNPhoneticLastNameKey, 
                       _ABCNPostalAddressesKey, _ABCNRelatedNamesKey, _ABCNSocialProfilesKey, 
                       _ABCNUrlAddressesKey, _ABCNWorkLabel, _ABCancelLoadingImageDataForTag, 
                       _ABCardDAVAccountType, _ABCardViewAlternateBirthdayComponentsKey, 
                       _ABCardViewBirthdayComponentsKey, _ABCardViewCompanyNameKey, 
                       _ABCardViewDepartmentNameKey, _ABCardViewDisplayStyleKey, 
                       _ABCardViewEmailAddressesKey, _ABCardViewFaceTimeActionsKey, 
                       _ABCardViewFirstNameKey, _ABCardViewInstantMessageAddressesKey, 
                       _ABCardViewJobTitleKey, _ABCardViewLastNameKey, 
                       _ABCardViewLinkIdentifierKey, _ABCardViewMaidenNameKey, 
                       _ABCardViewMiddleNameKey, _ABCardViewNameSuffixKey, 
                       _ABCardViewNameTitleKey, _ABCardViewNicknameKey, 
                       _ABCardViewNotesKey, _ABCardViewOtherDateComponentsKey, 
                       _ABCardViewPhoneNumbersKey, _ABCardViewPhoneticFirstNameKey, 
                       _ABCardViewPhoneticLastNameKey, _ABCardViewPhoneticMiddleNameKey, 
                       _ABCardViewPostalAddressesKey, _ABCardViewRelatedNamesKey, 
                       _ABCardViewRingToneKey, _ABCardViewSocialProfilesKey, 
                       _ABCardViewTextToneKey, _ABCardViewURLKey, _ABComparePeopleName, 
                       _ABComplement, _ABContactDeletionTracingMethodCutMenuItem, 
                       _ABContactDeletionTracingMethodDeleteKey, _ABContactDeletionTracingMethodDeleteMenuItem, 
                       _ABCopyArrayOfAllGroups, _ABCopyArrayOfAllPeople, 
                       _ABCopyArrayOfMatchingRecords, _ABCopyArrayOfPropertiesForRecordType, 
                       _ABCopyDefaultCountryCode, _ABCopyLocalizedPropertyOrLabel, 
                       _ABCopyRecordForUniqueId, _ABCopyRecordTypeFromUniqueId, 
                       _ABCreateComparatorContext, _ABCreateFormattedAddressFromDictionary, 
                       _ABDLog, _ABDatesVisible, _ABDebugLog, _ABDefaultAccountDidChangeNotification, 
                       _ABDefaultAccountIdentifierPrefKey, _ABDeleteRecordsCommandNameForRecords, 
                       _ABDepartmentVisible, _ABDestroyComparatorContext, 
                       _ABDistributedAccountConfigurationDidChangeNotification, 
                       _ABEmailsVisible, _ABEnglishLocalizedPropertyOrLabel, 
                       _ABExchangeAccountType, _ABExchangeAutodiscoverServerNameKey, 
                       _ABExchangeAutodiscoverServerPathKey, _ABExchangeAutodiscoverServerPortNumberKey, 
                       _ABExchangeAutodiscoverServerUseSSLKey, _ABExchangeEmailAddressKey, 
                       _ABExchangeExternalServerNameKey, _ABExchangeExternalServerPathKey, 
                       _ABExchangeExternalServerPortNumberKey, _ABExchangeExternalServerUseSSLKey, 
                       _ABExchangeFullNameKey, _ABExchangePortNumberKey, 
                       _ABExchangeRootFolderIdKey, _ABExchangeServerNameKey, 
                       _ABExchangeServerPathKey, _ABExchangeSourceNameKey, 
                       _ABExchangeUseSSLKey, _ABExchangeUserNameKey, _ABExpandedSelectionStringArrayType, 
                       _ABFetchImageDataForEmails, _ABFirstRepsonderChangedNotification, 
                       _ABFrameworkBundle, _ABGetMe, _ABGetSharedAddressBook, 
                       _ABGroupAddGroup, _ABGroupAddMember, _ABGroupCopyArrayOfAllMembers, 
                       _ABGroupCopyArrayOfAllSubgroups, _ABGroupCopyDistributionIdentifier, 
                       _ABGroupCopyParentGroups, _ABGroupCreate, _ABGroupCreateSearchElement, 
                       _ABGroupEntriesListDidChangeNotification, _ABGroupEntryIdentifier, 
                       _ABGroupRemoveGroup, _ABGroupRemoveMember, _ABGroupSetDistributionIdentifier, 
                       _ABGroupsUIDsPboardType, _ABHasUnsavedChanges, _ABHeaderGroupEntryIdentifier, 
                       _ABHomePageVisible, _ABHostNameIdentifier, _ABICQInstantVisible, 
                       _ABIdentity, _ABIgnoresSSLCertErrorsIdentifier, 
                       _ABImageDirectoryPathComponent, _ABImportFromAirDropKeyword, 
                       _ABInitialLabelsAIMInstant, _ABInitialLabelsAddress, 
                       _ABInitialLabelsDates, _ABInitialLabelsEmail, _ABInitialLabelsICQInstant, 
                       _ABInitialLabelsInstantMessage, _ABInitialLabelsJabberInstant, 
                       _ABInitialLabelsMSNInstant, _ABInitialLabelsPhone, 
                       _ABInitialLabelsRelatedRecords, _ABInitialLabelsURLs, 
                       _ABInitialLabelsYahooInstant, _ABInstantMessageAudioChatActionType, 
                       _ABInstantMessageTextChatActionType, _ABInstantMessageVideoChatActionType, 
                       _ABIsAccessGranted, _ABIsNotNull, _ABIsNull, _ABIsParagraphSeparator, 
                       _ABIsStringEmpty, _ABJSONStringFromObject, _ABJabberInstantVisible, 
                       _ABJobTitleVisible, _ABLDAPAccountType, _ABLDAPDisabled, 
                       _ABLDAPServerInfoKey, _ABLDAPServerTypeIdentifier, 
                       _ABLDAPServersKey, _ABLDAPUsername, _ABLocalAccountIdentifier, 
                       _ABLocalizedInteger, _ABLocalizedPropertyOrLabel, 
                       _ABLocalizedString, _ABMSNInstantVisible, _ABMaidenameVisible, 
                       _ABMailRecentsCoreDataDatabaseFileName, _ABMake, 
                       _ABMetadataDirectoryPathComponent, _ABMiddlenameVisible, 
                       _ABMigratedToAccountsFramework, _ABMultiValueAdd, 
                       _ABMultiValueCopyIdentifierAtIndex, _ABMultiValueCopyLabelAtIndex, 
                       _ABMultiValueCopyPrimaryIdentifier, _ABMultiValueCopyValueAtIndex, 
                       _ABMultiValueCount, _ABMultiValueCreate, _ABMultiValueCreateCopy, 
                       _ABMultiValueCreateMutable, _ABMultiValueCreateMutableCopy, 
                       _ABMultiValueIdentifiersErrorKey, _ABMultiValueIndexForIdentifier, 
                       _ABMultiValueInsert, _ABMultiValuePropertyType, 
                       _ABMultiValueRemove, _ABMultiValueReplaceLabel, 
                       _ABMultiValueReplaceValue, _ABMultiValueSetPrimaryIdentifier, 
                       _ABMutableCopyTransform, _ABNetworkConfigurationDidChangeNotification, 
                       _ABNicknameVisible, _ABObjectFromJSONString, _ABOneLevelLDAPSearchScopeType, 
                       _ABPathUtils_MakeCompletePath, _ABPeopleDictPboardType, 
                       _ABPeoplePickerDisplayedPropertyDidChangeNotification, 
                       _ABPeoplePickerDisplayedPropertyWillChangeNotification, 
                       _ABPeoplePickerGroupSelectionDidChangeNotification, 
                       _ABPeoplePickerNameSelectionDidChangeNotification, 
                       _ABPeoplePickerValueSelectionDidChangeNotification, 
                       _ABPeoplePickerValueSelectionDidImmediateChangeNotification, 
                       _ABPeopleUIDsPboardType, _ABPerfLog, _ABPerfLogFlags, 
                       _ABPersonCopyImageData, _ABPersonCopyParentGroups, 
                       _ABPersonCopyVCardRepresentation, _ABPersonCreate, 
                       _ABPersonCreateSearchElement, _ABPersonCreateWithVCardRepresentation, 
                       _ABPersonEntriesListDidChangeNotification, _ABPersonEntryBackingRecordIdentifiersTransform, 
                       _ABPersonListContactCellViewIdentifier, _ABPersonListCountCellViewIdentifier, 
                       _ABPersonListDefaultSectioningThreshold, _ABPersonListHeaderCellViewIdentifier, 
                       _ABPersonListNeverShowCount, _ABPersonListRowViewIdentifier, 
                       _ABPersonSetImageData, _ABPhoneFormat, _ABPhonesVisible, 
                       _ABPhoneticFieldsVisible, _ABPickerAddProperty, 
                       _ABPickerChangeAttributes, _ABPickerClearSearchField, 
                       _ABPickerCopyColumnTitle, _ABPickerCopyDisplayedProperty, 
                       _ABPickerCopyProperties, _ABPickerCopySelectedGroups, 
                       _ABPickerCopySelectedIdentifiers, _ABPickerCopySelectedRecords, 
                       _ABPickerCopySelectedValues, _ABPickerCreate, _ABPickerDeselectAll, 
                       _ABPickerDeselectGroup, _ABPickerDeselectIdentifier, 
                       _ABPickerDeselectRecord, _ABPickerEditInAddressBook, 
                       _ABPickerGetAttributes, _ABPickerGetDelegate, _ABPickerGetFrame, 
                       _ABPickerIsVisible, _ABPickerRemoveProperty, _ABPickerSelectGroup, 
                       _ABPickerSelectIdentifier, _ABPickerSelectInAddressBook, 
                       _ABPickerSelectRecord, _ABPickerSetColumnTitle, 
                       _ABPickerSetDelegate, _ABPickerSetDisplayedProperty, 
                       _ABPickerSetFrame, _ABPickerSetVisibility, _ABPointOfInterestAccountIdentifier, 
                       _ABPortIdentifier, _ABPostDatabaseResetNotificationWithExtraInfo, 
                       _ABPreferencesPrivateVCardFieldsEnabledKey, _ABPreferencesPrivateVCardFieldsKey, 
                       _ABPreferencesVersionKey, _ABPrimitiveConditionalLog, 
                       _ABRangeDividedIntoStridesOfLength, _ABRecordCopyRecordType, 
                       _ABRecordCopyUniqueId, _ABRecordCopyValue, _ABRecordCreateCopy, 
                       _ABRecordIsReadOnly, _ABRecordPersistentStoreURLTransform, 
                       _ABRecordRemoveValue, _ABRecordSetValue, _ABRecordToUniqueIdTransform, 
                       _ABRelatedRecordsVisible, _ABRemoveProperties, _ABRemoveRecord, 
                       _ABResultWithLock, _ABRunWithAutoreleasePool, _ABRunWithLock, 
                       _ABRunWithLocks, _ABSave, _ABScaleDownSizeToFitSize, 
                       _ABScheduledSyncPortName, _ABScopeIdentifier, _ABSearchBaseIdentifier, 
                       _ABSearchElementCreateWithConjunction, _ABSearchElementMatchesRecord, 
                       _ABSelectionStringArrayType, _ABSetMe, _ABSocialProfileEquivalentValues, 
                       _ABSocialProfileURLForUserIdentifier, _ABSocialProfileURLForUsername, 
                       _ABSourceManagedObjectContextDidSaveNotification, 
                       _ABSubtreeLDAPSearchScopeType, _ABSuffixVisible, 
                       _ABTemplateLayoutHasChanged, _ABTitleIdentifier, 
                       _ABTitleVisible, _ABTypeOfProperty, _ABUIDIdentifier, 
                       _ABURLsVisible, _ABUseSSLIdentifier, _ABUserInfoFromCoreDataUserInfo, 
                       _ABUserInfoWithMyProcessInfo, _ABVCardDisplayNameType, 
                       _ABValueIsNotNull, _ABWindowAppearanceChangedNotification, 
                       _ABYahooInstantVisible, _AB_LDAP_InvalidCredentialsNotification, 
                       _AccountACAccountIdentifierKey, _AccountACAccountTypeIdentifierKey, 
                       _AccountACParentAccountTypeIdentifierKey, _AccountAListPluginIdentifierKey, 
                       _AccountAutodiscoverDomainKey, _AccountAutodiscoverPortNumberKey, 
                       _AccountAutodiscoverServerHostKey, _AccountAutodiscoverServerPathKey, 
                       _AccountAutodiscoverServerURLKey, _AccountAutodiscoverUseSSLKey, 
                       _AccountDescriptionKey, _AccountEmailAddressKey, 
                       _AccountExternalPortNumberKey, _AccountExternalServerHostKey, 
                       _AccountExternalServerPathKey, _AccountExternalServerURLKey, 
                       _AccountExternalUseSSLKey, _AccountFullNameKey, 
                       _AccountPasswordKey, _AccountPortNumberKey, _AccountRootFolderIdKey, 
                       _AccountSearchBaseKey, _AccountSearchScopeKey, _AccountServerAddressKey, 
                       _AccountServerHostKey, _AccountServerPathKey, _AccountServerURLKey, 
                       _AccountUseLDAPAuthenticationKey, _AccountUseSSLKey, 
                       _AccountUserNameKey, _AutodiscoveryACAccountKey, 
                       _AutodiscoveryAutodiscoverURLKey, _AutodiscoveryEmailAddressKey, 
                       _AutodiscoveryErrorKey, _AutodiscoveryExternalURLKey, 
                       _AutodiscoveryFailingURLKey, _AutodiscoveryFullNameKey, 
                       _AutodiscoveryInternalURLKey, _AutodiscoveryPasswordKey, 
                       _AutodiscoveryServerAddressKey, _AutodiscoveryServerPortKey, 
                       _AutodiscoverySkipConnectionTest, _AutodiscoverySkipDiscovery, 
                       _AutodiscoveryStatusKey, _AutodiscoveryURLKey, _AutodiscoveryUseSSLKey, 
                       _AutodiscoveryUserNameAddressKey, _AutodiscoveryUserNameKey, 
                       _IAi386AccountDescriptionKey, _IAi386AccountTypeKey, 
                       _IAi386AddressBookServerAddressKey, _IAi386BrandIconImageDataKey, 
                       _IAi386BrandIconKey, _IAi386BrandNameKey, _IAi386BrandSupportsMigrationKey, 
                       _IAi386BrandUserFieldLabelKey, _IAi386CardDAVAccountType, 
                       _IAi386ExchangeAccountType, _IAi386UserNameKey, 
                       _PHXDistributedSourceAddedNotification, _PHXDistributedSourceChangedNotification, 
                       _PHXDistributedSourceRemovedNotification, _PHXDistributedSourcesInvalidatedNotification, 
                       _PHXSourceAddedExternallyNotification, _PHXSourceChangedExternallyNotification, 
                       _PHXSourceDisplayNameKey, _PHXSourceRemovedExternallyNotification, 
                       _PHXSourceUIDKey, _PHXSourcesInvalidatedExternallyNotification, 
                       _TestConnectionErrorKey, _TestConnectionExternalPathKey, 
                       _TestConnectionExternalPortNumberKey, _TestConnectionExternalSchemeKey, 
                       _TestConnectionExternalServerAddressKey, _TestConnectionLocalizedErrorMessageKey, 
                       _TestConnectionPasswordKey, _TestConnectionPathKey, 
                       _TestConnectionPortNumberKey, _TestConnectionRootFolderIdKey, 
                       _TestConnectionSchemeKey, _TestConnectionServerAddressKey, 
                       _TestConnectionStatusKey, _TestConnectionUseSSLKey, 
                       _TestConnectionUserNameKey, __ABDictionaryOfMetrics, 
                       __AB_IgnoreCertErrors_Lock, __AB_IgnoreCertErrors_Unlock, 
                       _ab_dispatch_concurrent, _ab_dispatch_interval_to_time, 
                       _ab_dispatch_main, _ab_dispatch_main_sync, _ab_once, 
                       _ab_set_current_queue_name_while_running_block, 
                       _kAB21vCardEncoding, _kABAIMHomeLabel, _kABAIMInstantProperty, 
                       _kABAIMInstantPropertyPriv, _kABAIMWorkLabel, _kABActivityAlertProperty, 
                       _kABActivityRingtoneProperty, _kABActivityTextToneProperty, 
                       _kABAddressBookDidResetPriv, _kABAddressBookPreferencesChangedPriv, 
                       _kABAddressBookWillResetPriv, _kABAddressCityKey, 
                       _kABAddressCountryCodeKey, _kABAddressCountryKey, 
                       _kABAddressDistributionListDictionaryKey, _kABAddressHomeLabel, 
                       _kABAddressProperty, _kABAddressRegionKey, _kABAddressSamaKey, 
                       _kABAddressStateKey, _kABAddressStreetKey, _kABAddressWorkLabel, 
                       _kABAddressZIPKey, _kABAlternateBirthdayComponentsProperty, 
                       _kABAlternateBirthdayLabel, _kABAnniversaryLabel, 
                       _kABAssistantLabel, _kABBirthdayComponentsProperty, 
                       _kABBirthdayLabel, _kABBirthdayProperty, _kABBrotherLabel, 
                       _kABCalendarURIsProperty, _kABCardDAVSourceClassName, 
                       _kABCardDAVUIDProperty, _kABChildLabel, _kABConverterBeginNotification, 
                       _kABConverterCurrentRecordKey, _kABConverterEndNotification, 
                       _kABConverterTitleKey, _kABConverterTotalRecordsKey, 
                       _kABConverterUpdateNotification, _kABCoreDataAbstractGroupEntityName, 
                       _kABCoreDataContactEntityName, _kABCoreDataCountryEntityName, 
                       _kABCoreDataGroupEntityName, _kABCoreDataMailRecentEntityName, 
                       _kABCoreDataMailRecentLastEmailDateEntityName, _kABCoreDataNoteEntityName, 
                       _kABCoreDataPostalAddressEntityName, _kABCoreDataRecordEntityName, 
                       _kABCoreDataSmartGroupEntityName, _kABCoreDataSocialProfileEntityName, 
                       _kABCoreDataSubscribedContactEntityName, _kABCoreDataSubscribedGroupEntityName, 
                       _kABCreationDateProperty, _kABDatabaseChangedExternallyNotification, 
                       _kABDatabaseChangedExternallyNotificationPriv, _kABDatabaseChangedNotification, 
                       _kABDatabaseChangedNotificationPriv, _kABDatabaseWillSaveNotification, 
                       _kABDefaultAddressCountryCodeKey, _kABDeletedRecords, 
                       _kABDeltasRecordUnchanged, _kABDepartmentProperty, 
                       _kABDistributedDatabaseChangedNotification, _kABDistributedDatabaseChangedNotificationPriv, 
                       _kABDontAutoMerge, _kABEmailDistributionListDictionaryKey, 
                       _kABEmailHomeLabel, _kABEmailProperty, _kABEmailWorkLabel, 
                       _kABEmptyLabelPlaceholderTag, _kABExchangeAddressHomeLabel, 
                       _kABExchangeAddressOtherLabel, _kABExchangeAddressWorkLabel, 
                       _kABExchangeAnniversaryLabel, _kABExchangeAssistantLabel, 
                       _kABExchangeBusinessHomePageLabel, _kABExchangeEmail1Label, 
                       _kABExchangeEmail2Label, _kABExchangeEmail3Label, 
                       _kABExchangeInstant1Label, _kABExchangeInstant2Label, 
                       _kABExchangeInstant3Label, _kABExchangeManagerLabel, 
                       _kABExchangePhoneAssistantLabel, _kABExchangePhoneCallbackLabel, 
                       _kABExchangePhoneCarLabel, _kABExchangePhoneHomeAlternateLabel, 
                       _kABExchangePhoneHomeFAXLabel, _kABExchangePhoneHomeLabel, 
                       _kABExchangePhoneISDNLabel, _kABExchangePhoneMainCorporateLabel, 
                       _kABExchangePhoneMobileLabel, _kABExchangePhoneOtherFAXLabel, 
                       _kABExchangePhoneOtherLabel, _kABExchangePhonePagerLabel, 
                       _kABExchangePhonePrimaryLabel, _kABExchangePhoneRadioLabel, 
                       _kABExchangePhoneTTYLabel, _kABExchangePhoneTelexLabel, 
                       _kABExchangePhoneWorkAlternateLabel, _kABExchangePhoneWorkFAXLabel, 
                       _kABExchangePhoneWorkLabel, _kABExchangeSourceClassName, 
                       _kABExchangeSpouseLabel, _kABFatherLabel, _kABFirstNamePhoneticProperty, 
                       _kABFirstNameProperty, _kABFriendLabel, _kABGroupClassKey, 
                       _kABGroupNameProperty, _kABGroupRecordType, _kABGroupsListChangedNotification, 
                       _kABGroupsSelectionChangedNotification, _kABHomeLabel, 
                       _kABHomePageLabel, _kABHomePageProperty, _kABICQHomeLabel, 
                       _kABICQInstantProperty, _kABICQInstantPropertyPriv, 
                       _kABICQWorkLabel, _kABImageInfoClipRectKey, _kABImageInfoImageTypeKey, 
                       _kABImageInfoUniqueIDKey, _kABImageProperty, _kABIndexVersionKey, 
                       _kABInsertedRecords, _kABInstantMessageProperty, 
                       _kABInstantMessageServiceAIM, _kABInstantMessageServiceFacebook, 
                       _kABInstantMessageServiceGaduGadu, _kABInstantMessageServiceGoogleTalk, 
                       _kABInstantMessageServiceICQ, _kABInstantMessageServiceJabber, 
                       _kABInstantMessageServiceKey, _kABInstantMessageServiceMSN, 
                       _kABInstantMessageServiceQQ, _kABInstantMessageServiceSkype, 
                       _kABInstantMessageServiceUnknown, _kABInstantMessageServiceYahoo, 
                       _kABInstantMessageUsernameKey, _kABIsPreferredForNameProperty, 
                       _kABIsPreferredForPhotoProperty, _kABJabberHomeLabel, 
                       _kABJabberInstantProperty, _kABJabberInstantPropertyPriv, 
                       _kABJabberWorkLabel, _kABJobTitleProperty, _kABLDAPSourceClassName, 
                       _kABLargeImageProperty, _kABLastImportShown, _kABLastNamePhoneticProperty, 
                       _kABLastNameProperty, _kABLayoutChangedNotification, 
                       _kABLinkIdProperty, _kABLinkedPeopleProperty, _kABLittleBrownBookWindowIdentifier, 
                       _kABLocalSourceClassName, _kABMSNHomeLabel, _kABMSNInstantProperty, 
                       _kABMSNInstantPropertyPriv, _kABMSNWorkLabel, _kABMaidenNameLabel, 
                       _kABMaidenNameProperty, _kABMailLastDatesProperty, 
                       _kABMainCleanWindowIdentifier, _kABMainWindowSearchTerm, 
                       _kABManagerLabel, _kABMembersDictionaryKey, _kABMembersListChangedNotification, 
                       _kABMembersSelectionChangedNotification, _kABMiddleNamePhoneticProperty, 
                       _kABMiddleNameProperty, _kABMobileMeLabel, _kABModificationDateProperty, 
                       _kABMotherLabel, _kABNameDisplayFirstNameFirst, 
                       _kABNameDisplayLastNameFirst, _kABNameSorting, _kABNicknameProperty, 
                       _kABNoteLabel, _kABNoteProperty, _kABOWAConnectionException, 
                       _kABOWAReadingException, _kABOrganizationProperty, 
                       _kABOtherDateComponentsProperty, _kABOtherDatesProperty, 
                       _kABOtherLabel, _kABParentGroupsProperty, _kABParentLabel, 
                       _kABPartnerLabel, _kABPersonFlags, _kABPersonRecordType, 
                       _kABPersonUIDProperty, _kABPhoneAssistantLabel, 
                       _kABPhoneCallbackLabel, _kABPhoneCarLabel, _kABPhoneCompanyMainLabel, 
                       _kABPhoneDistributionListDictionaryKey, _kABPhoneHomeFAXLabel, 
                       _kABPhoneHomeLabel, _kABPhoneISDNLabel, _kABPhoneMainLabel, 
                       _kABPhoneMobileLabel, _kABPhoneOtherFAXLabel, _kABPhoneOtherLabel, 
                       _kABPhonePagerLabel, _kABPhoneProperty, _kABPhoneRadioLabel, 
                       _kABPhoneTTYLabel, _kABPhoneTelexLabel, _kABPhoneWorkFAXLabel, 
                       _kABPhoneWorkLabel, _kABPhoneiPhoneLabel, _kABPhonemeDataProperty, 
                       _kABPreserveModificationDate, _kABPublishLabel, 
                       _kABReadSharingACLProperty, _kABReadWriteSharingACLProperty, 
                       _kABRelatedNamesProperty, _kABRemoteLocationProperty, 
                       _kABRestoreFromBackup, _kABSearchElementProperty, 
                       _kABSenderProcessID, _kABSenderProcessName, _kABSeparateWindowIdentifier, 
                       _kABSeparateWindowRestorationError, _kABSeparateWindowUID, 
                       _kABShowPointOfInterestSearch, _kABSisterLabel, 
                       _kABSmartGroupAnyGroupMembershipProperty, _kABSmartGroupFlagsProperty, 
                       _kABSmartGroupModifiedUIDsProperty, _kABSmartGroupRecordType, 
                       _kABSocialProfileDisplayNameKey, _kABSocialProfileProperty, 
                       _kABSocialProfileServiceFacebook, _kABSocialProfileServiceFlickr, 
                       _kABSocialProfileServiceKey, _kABSocialProfileServiceLinkedIn, 
                       _kABSocialProfileServiceMySpace, _kABSocialProfileServiceSinaWeibo, 
                       _kABSocialProfileServiceTencentWeibo, _kABSocialProfileServiceTwitter, 
                       _kABSocialProfileServiceYelp, _kABSocialProfileURLKey, 
                       _kABSocialProfileUserIdentifierKey, _kABSocialProfileUsernameKey, 
                       _kABSpouseLabel, _kABSubgroupsDictionaryKey, _kABSubscribeLabel, 
                       _kABSuffixProperty, _kABTitleProperty, _kABUIDProperty, 
                       _kABURLsProperty, _kABUnknownLabel, _kABUnknownYear, 
                       _kABUpdatedRecords, _kABUse21vCardFormat, _kABUserHasSelectedDefaultCountryCodeKey, 
                       _kABWorkLabel, _kABYahooHomeLabel, _kABYahooInstantProperty, 
                       _kABYahooInstantPropertyPriv, _kABYahooWorkLabel, 
                       _sABPersonIsPreferredForName, _sABPersonIsPreferredForPhoto, 
                       _sABRecordIsEditable, _sABRecordIsReadOnly ]
    objc-classes:    [ _ABACAccount, _ABACAccountStore, _ABACAccountType, 
                       _ABAPIAdapter, _ABAbstractAccountConfiguration, 
                       _ABAbstractGroupEntriesFactory, _ABAccount, _ABAccountComparer, 
                       _ABAccountComponents, _ABAccountComponentsValidationHelper, 
                       _ABAccountDescriptionBuilder, _ABAccountFactory, 
                       _ABAccountPersistence, _ABAccountRepository, _ABAccountSearchPolicy, 
                       _ABAccountStatus, _ABAccountsTracing, _ABActionAddressCopyMailingLabel, 
                       _ABActionAddressCopyMapURL, _ABActionAddressShowMap, 
                       _ABActionAutovalidator, _ABActionBeginChat, _ABActionDispatcher, 
                       _ABActionEmailSearchSpotlight, _ABActionEmailSendMessage, 
                       _ABActionEmailSendUpdate, _ABActionManager, _ABActionMenuItemFactory, 
                       _ABActionPhoneLargeType, _ABActionRelatedShowCard, 
                       _ABActionSocialProfileSendMessage, _ABActionSocialProfileViewPhotos, 
                       _ABActionSocialProfileViewProfile, _ABActionURLsOpenURL, 
                       _ABAddressBook, _ABAddressBookAPIAdapter, _ABAddressBookInitOptions, 
                       _ABAddressBookSummaryBuilder, _ABAddressBookURLFactory, 
                       _ABAddressFieldBuilder, _ABAddressKitBridge, _ABAlert, 
                       _ABAllGroup, _ABAlwaysEnabledAccountPersistence, 
                       _ABAppDeprecations, _ABApplicationServices, _ABBookAggregateUndoableCommandBuilder, 
                       _ABBookCommand, _ABBookCreateGroupCommand, _ABBookCreateGroupWithMembersCommand, 
                       _ABBookCreateSmartGroupCommand, _ABBookEditSmartGroupCommand, 
                       _ABBookGroupAddRecordsCommand, _ABBookGroupAddSubgroupsCommand, 
                       _ABBookGroupCopyCommand, _ABBookGroupCutCommand, 
                       _ABBookGroupDeleteCommand, _ABBookGroupImportCommand, 
                       _ABBookPastePeopleCommand, _ABBookRenameGroupCommand, 
                       _ABBookSearchField, _ABBookUndoableCommand, _ABBrowsingSearchConfiguration, 
                       _ABBuddyStatus, _ABCN, _ABCNAddressFormats, _ABCNContact, 
                       _ABCNContactDirectoryResultBuilder, _ABCNContactFetchRequest, 
                       _ABCNContactIdentifier, _ABCNContactNameOrderImpl, 
                       _ABCNContactPhotoStore, _ABCNContactStore, _ABCNDateComponentsEquivalence, 
                       _ABCNFetchRequest, _ABCNGroup, _ABCNGroupFetchRequest, 
                       _ABCNGroupIdentifier, _ABCNInstantMessageAddress, 
                       _ABCNLabeledValue, _ABCNMutableContact, _ABCNMutableGroup, 
                       _ABCNMutablePostalAddress, _ABCNPhoneDialer, _ABCNPostalAddress, 
                       _ABCNPredicate, _ABCNSaveRequest, _ABCNSocialProfile, 
                       _ABCNVCardSerialization, _ABCardActionProvider, 
                       _ABCardCollectionView, _ABCardView, _ABCardViewBirthdayProperty, 
                       _ABCardViewController, _ABCardViewHelpers, _ABCardViewImage, 
                       _ABCardViewImageLoading, _ABCardViewImageResult, 
                       _ABCardViewMaidenNameProperty, _ABCardViewNoteProperty, 
                       _ABCardViewNotificationHandler, _ABCardViewPostalAddressFormatter, 
                       _ABCardViewStyleProvider, _ABCardViewerController, 
                       _ABCertificatePanelController, _ABChoosingForwarder, 
                       _ABCollectionViewItemFactory, _ABColor, _ABCommand, 
                       _ABCommandExecutor, _ABCommunicationButtonsController, 
                       _ABConstraintsBuilder, _ABContactDeletionTracing, 
                       _ABContactSectionRules, _ABCopyOnWriteSet, _ABCoreDataDeprecations, 
                       _ABCountTableEntry, _ABCreatePersonCommand, _ABDAVQuery, 
                       _ABDBCache, _ABDateComponentsFormatter, _ABDateComponentsValueTransformer, 
                       _ABDateFormatter, _ABDateHelper, _ABDateProvider, 
                       _ABDebugUndoManager, _ABDefaultAccountHidingPolicy, 
                       _ABDefaultAccountPreference, _ABDefaultCustomizationPolicy, 
                       _ABDefaultGroupEntriesFactory, _ABDefaultSearchOnlyCustomizationPolicy, 
                       _ABDeleteGroupSheet, _ABDeleteRecordsCommandBuilder, 
                       _ABDistributionListController, _ABDropDownMenuUIAction, 
                       _ABEvent, _ABExchangeSetup, _ABFileUtilities, _ABGlobalReference, 
                       _ABGroup, _ABGroupContents, _ABGroupDragPasteboardData, 
                       _ABGroupDropDestination, _ABGroupDropPasteboardData, 
                       _ABGroupDropPasteboardDataCategorizer, _ABGroupDropScope, 
                       _ABGroupDropSource, _ABGroupEntriesAnalyzer, _ABGroupEntriesBuilder, 
                       _ABGroupEntriesList, _ABGroupEntriesResult, _ABGroupEntry, 
                       _ABGroupListAccessoryViewProvider, _ABGroupListActions, 
                       _ABGroupListCellViewStyle, _ABGroupListNotificationHandler, 
                       _ABGroupListResponder, _ABGroupListStyleProvider, 
                       _ABGroupPastePasteboardData, _ABHTTPUserAgent, _ABInMemoryAccountConfiguration, 
                       _ABInfo, _ABInstantMessageService, _ABInternetAccountsi386, 
                       _ABKVCMerger, _ABLDAPPersistenceBackend, _ABLabelsConstraint, 
                       _ABLargeTypeWindow, _ABLastImportGroup, _ABLegacyIMSearchElementTransformer, 
                       _ABLinkPeopleCommand, _ABLog, _ABMailRecent, _ABMainListOutlineView, 
                       _ABManagedObjectContext, _ABMeCommand, _ABMessageTracer, 
                       _ABMetadataAddOperation, _ABMetadataDeleteOperation, 
                       _ABMetadataMarkViewedOperation, _ABMetadataOperationController, 
                       _ABMetadataType, _ABMetadataValidateOperation, _ABMonogramFactory, 
                       _ABMonogramImageLoading, _ABMonogramOptions, _ABMultiDictionary, 
                       _ABMultiValue, _ABMultiValueAddressMerger, _ABMultiValueCoreDataWrapper, 
                       _ABMultiValueInstantMessageMerger, _ABMultiValueMerger, 
                       _ABMutableMultiDictionary, _ABMutableMultiValue, 
                       _ABMutablePackedImage, _ABNamesvCardFiles, _ABNetworkController, 
                       _ABNewGroupCommand, _ABNewPersonCommand, _ABPackedImage, 
                       _ABPasswordPanelController, _ABPasteboardWriteCommand, 
                       _ABPeoplePickerController, _ABPeoplePickerSubrowObject, 
                       _ABPeoplePickerView, _ABPeriodicTask, _ABPeriodicUITask, 
                       _ABPersistentStoreCoordinatorCache, _ABPerson, _ABPersonCell, 
                       _ABPersonContactConverter, _ABPersonDirectoryResultBuilder, 
                       _ABPersonEntriesFetcher, _ABPersonEntriesList, _ABPersonEntry, 
                       _ABPersonEntryFactory, _ABPersonInitials, _ABPersonListAttributedName, 
                       _ABPersonListHeadliner, _ABPersonListRowView, _ABPersonListSearchController, 
                       _ABPersonListUIReflector, _ABPersonMergingController, 
                       _ABPersonSearchConfiguration, _ABPersonSummaryBuilder, 
                       _ABPersonVCardParsedResultBuilderFactory, _ABPersonView, 
                       _ABPersonViewNotificationWatcher, _ABPersonViewStyleProvider, 
                       _ABPhoneFormatter, _ABProcessSharedLock, _ABPropertyHeaderCell, 
                       _ABPropertyListSerialization, _ABPropertySummaryBuilder, 
                       _ABPushNotificationCenter, _ABQuerySearchConfiguration, 
                       _ABReadOnlyPersistenceBackendDecorator, _ABRecord, 
                       _ABRecordConstraint, _ABRecordContext, _ABRecordCoreDataFactoryImpl, 
                       _ABRemotePersonView, _ABRemoveMembersCommand, _ABRemoveMembersCommandBuilder, 
                       _ABSafeDistributedNotificationCenter, _ABSafeNotificationCenter, 
                       _ABScrollView, _ABSearchController, _ABSearchElement, 
                       _ABSearchElementConjunction, _ABSearchElementHelper, 
                       _ABSearchElementMatch, _ABSearchElementOrderManager, 
                       _ABSearchElementTransformer, _ABSearchElementUIController, 
                       _ABSearchOperation, _ABSearchingGroupEntry, _ABSectionTableEntry, 
                       _ABSimilarRecordMerger, _ABSmartGroup, _ABSocialProfileURLParser, 
                       _ABSourceSyncPeriodicTaskScheduler, _ABStaticAccountCollection, 
                       _ABSubscribedGroup, _ABSubscribedPerson, _ABSubscription, 
                       _ABSuggestedEntriesFetcher, _ABSummaryOperation, 
                       _ABSyncManager, _ABTableHeaderView, _ABTargetedAccountFactory, 
                       _ABTelURLHelper, _ABTemplateCardCollectionView, 
                       _ABThrottlingLogger, _ABTimeMachineTempFileHelper, 
                       _ABTracedLog, _ABTrackingArea, _ABURL, _ABUndoManager, 
                       _ABUnlinkPeopleCommand, _ABUserDefaults, _ABVCardFileSerializer, 
                       _ABVCardFilenameExpander, _ABVCardParser, _ABVCardSharingTask, 
                       _ABView, _ABXMLParseNode, _ABZeroingWeakReference, 
                       _AKAggregateUndoableCommand, _AKAggregateUndoableCommandBuilder, 
                       _AKCardViewDataSource, _AKEditPropertyCommand, _AKSetMeCardCommand, 
                       _PHXSource, __ABPersonView ]
...
                                                                                                                                                                                                                                             Headers/                                                                                            0040755 0001750 0001750 00000000000 12612224736 032024  5                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A                                                                         ABActions.h                                                                                         0100644 0001750 0001750 00000004347 12567507026 034012  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABActions.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __ABACTIONS__
#define __ABACTIONS__

#if MAC_OS_X_VERSION_10_3 <= MAC_OS_X_VERSION_MAX_ALLOWED

#import <Foundation/Foundation.h>

@class ABPerson;

// ================================================================
//	Action Support
// ================================================================
// This API allows developers to populate Contacts.app's roll-over menus with custom
// entries. Your NSBundle must implement actionProperty:, titleForPerson:identifier: and
// performActionForPerson:identifier:.
//
// actionProperty: Return the ABProperty this action applies to. Only items with labels
// may have actions at this time. (emails, phones, birthdays, etc)
//
// titleForPerson:identifier: This method is passed a person and, if actionProperty: returned
// a multi-value property, an identifier. Simple actions will return a localized title.
// However, more complex actions may choose to tweak their title slightly based on the
// specific item the user has selected.
//
// shouldEnableActionForPerson:identifier: Return YES if your action should be enabled
// for the specific item the user has selected. This method is optional. Leaving it
// unimplemented will result in your action being enabled at all times.
//
// performActionForPerson:identifier: This method is called when the user chooses your
// action from the roll-over menu. It is passed the ABPerson and (if applicable) multi-
// value of the specific item rolled-over.
//
// Action plugins are stored in ~/Library/Address Book Plug-Ins or /Library/Address Book Plug-Ins

// The Principal class of the NSBundle is the object that is expected to implement the
// methods below.
// There can be only 1 Action plugin per bundle.

@interface NSObject (ABActionDelegate)
- (NSString *)actionProperty;
- (NSString *)titleForPerson:(ABPerson *)person identifier:(NSString *)identifier;
- (void)performActionForPerson:(ABPerson *)person identifier:(NSString *)identifier;

    // Optional. Your action will always be enabled in the absence of this method.
- (BOOL)shouldEnableActionForPerson:(ABPerson *)person identifier:(NSString *)identifier;
@end

#endif
#endif // __ABACTIONS__
                                                                                                                                                                                                                                                                                         ABActionsC.h                                                                                        0100644 0001750 0001750 00000005351 12567507026 034111  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABActionsC.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __ABACTIONSC__
#define __ABACTIONSC__

#if defined(__cplusplus)
extern "C" {
#endif

#include <AddressBook/ABAddressBookC.h>
#include <CoreFoundation/CoreFoundation.h>

// --------------------------------------------------------------------------------
//      Action Support
// --------------------------------------------------------------------------------
// This API allows developers to populate Contacts.app's roll-over menus with custom
// entries. Your CFBundle must implement a function named ABActionRegisterCallbacks which
// will return a pointer to an ABActionCallbacks struct. This struct should be filled out
// as follows:
//
// version: The version of this structure is 0.
//
// property: A pointer to a function that returns the AddressBook property this action applies
// to. Only items with labels may have actions at this time. (emails, phones, birthdays, etc)
//
// title: A pointer to a function which returns a copy of the title to be displayed. This function
// takes two parameters, the selected person and item identifier. The item identifier will be NULL
// for single value properties. AddressBook will release this string when it's done with it.
//
// enabled: A pointer to a function which returns YES if the action should be enabled for the
// passed ABPersonRef and item identifier. The item identifier will be NULL for single value
// properties. This field may be NULL. Actions with NULL enabled callbacks will always be enabled.
//
// selected. A pointer to a function which will be called when the user selects this action.
// It's passed an ABPersonRef and item identifier. The item identifier will be NULL for single
// value properties.
//
// Action plugins are stored in ~/Library/Address Book Plug-Ins or /Library/Address Book Plug-Ins
//
// There can be only 1 Action plugin per bundle.

typedef CFStringRef (*ABActionGetPropertyCallback) (void);
typedef CFStringRef (*ABActionCopyTitleCallback) (ABPersonRef person, CFStringRef identifier);
typedef Boolean (*ABActionEnabledCallback) (ABPersonRef person, CFStringRef identifier);
typedef void (*ABActionSelectedCallback) (ABPersonRef person, CFStringRef identifier);

typedef struct {
    CFIndex                         version;
    ABActionGetPropertyCallback     property;
    ABActionCopyTitleCallback       title;
    ABActionEnabledCallback         enabled;
    ABActionSelectedCallback        selected;
} ABActionCallbacks;

// Your CFBundle MUST include a function named ABActionRegisterCallbacks which returns a pointer
// to a filled out ABActionCallbacks struct:
//
// ABActionCallbacks* ABActionRegisterCallbacks(void);

#endif

#if defined(__cplusplus)
}
#endif

                                                                                                                                                                                                                                                                                       ABAddressBook.h                                                                                     0100644 0001750 0001750 00000015364 12567507025 034612  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABAddressBook.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __ABADDRESSBOOK__
#define __ABADDRESSBOOK__

#import <AddressBook/ABTypedefs.h>
#import <AddressBook/ABGlobals.h>

enum {
	ABAddRecordsError = 1001,
	ABRemoveRecordsError = 1002,
	ABPropertyValueValidationError = 1012,
	ABPropertyUnsupportedBySourceError = 1013,
	ABPropertyReadOnlyError = 1014
};

extern NSString *ABAddressBookErrorDomain AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;
extern NSString *ABMultiValueIdentifiersErrorKey AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;

@class ABRecord;
@class ABPerson;
@class ABGroup;
@class ABSearchElement;

// ================================================================
//      OpenURL support
// ================================================================
// An application can open the Contacts app and select (and edit) a specific
// person by using the -[NSWorkspace openURL:] API.
//
// To launch (or bring to front) the Contacts app and select a given person
//
// NSString *urlString = [NSString stringWithFormat:@"addressbook://%@", [aPerson uniqueId]];
// [[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString:urlString]];
//
// To launch (or bring to front) the Contacts app and edit a given person
//
// NSString *urlString = [NSString stringWithFormat:@"addressbook://%@?edit", [aPerson uniqueId]];
// [[NSWorkspace sharedWorkspace] openURL:[NSURL URLWithString:urlString]];

// ================================================================
//      ABAddressBook
// ================================================================

@interface ABAddressBook : NSObject
{
@private
    id                   _reserved8;
    
    void                *_reserved2 __unused;
    void                *_reserved3 __unused;
    id                   _reserved4;
    NSMutableDictionary *_tableSchemas;
    NSMutableDictionary *_reserved5 __unused;
    void                *_converterPort __unused;
    NSTimer             *_inactivityTimer;
    id                   _reserved;

    id                   _reserved1;
	
    void                *_reserved6 __unused;
    void                *_reserved7 __unused;

    struct __ABBookflags {
        unsigned int     hasUnsavedChanges:1;
        unsigned int     readOnly:1;
        unsigned int     importMe:1;
        unsigned int     needConversion:1; // only used for puma conversion
        unsigned int     cleanedUp:1;
        unsigned int     importTips:1;
        unsigned int     restoreFromMetaData:1;
        unsigned int     prefsNeedSync:1;
        unsigned int     waitingForReset:1;
        unsigned int     enforcesConstraints:1;
        unsigned int     tracksAllSources:1;
        unsigned int     _reserved:21;
    } _flags;
}

+ (ABAddressBook *)sharedAddressBook;
    // Returns the unique shared instance of ABAddressBook
    // Returns nil if the address book database cannot be initialized 

+ (ABAddressBook *)addressBook AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;
    // Returns a new instance of ABAddressBook
    // Instances of ABAddressBook and its records should only be used
    // on the thread where they were created.
    // Returns nil if the address book database cannot be initialized.

- (NSArray *)recordsMatchingSearchElement:(ABSearchElement *)search;
    // Returns an array of records matching the given search element
    // Raises if search is nil
    // Returns an empty array if no matches

- (BOOL)save;
    // Saves changes made since the last save
    // Return YES if successful (or there was no change)

- (BOOL)saveAndReturnError:(NSError **)error AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER;
    // Saves changes made since the last save
    // Return YES if successful (or there was no change)

- (BOOL)hasUnsavedChanges;
    // Returns YES if there are unsaved changes
    // The unsaved changes flag is automatically set when changes are made

- (ABPerson *)me;
    // Returns the person that represents the user
    // Returns nil if "me" was never set

- (void)setMe:(ABPerson *)moi;
    // Sets "Me" to moi.
    // Pass nil to clear "Me"

- (ABRecord *)recordForUniqueId:(NSString *)uniqueId;
    // Returns a record (ABPerson or ABGroup) matching a given unique ID
    // Raises if uniqueId is nil
    // Returns nil if the record could not be found

- (BOOL)addRecord:(ABRecord *)record error:(NSError**)error AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;
    // Adds a record (ABPerson or ABGroup) to the AddressBook database.
    // Raises if record is nil
    // Returns YES if the addition was successful
    // When returning NO, includes additional information in error when its given value is not nil
    // It is more efficient to use -[ABRecord initWithAddressBook:] where possible.

- (BOOL)addRecord:(ABRecord *)record;
    // Adds a record (ABPerson or ABGroup) to the AddressBook database.
    // It is more efficient to use -[ABRecord initWithAddressBook:] where possible.

- (BOOL)removeRecord:(ABRecord *)record error:(NSError **)error AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;
    //  Removes a record (ABPerson or ABGroup) from the AddressBook database
    //  Raises if record is nil
    //  Returns YES if the removal was successful
    //  When returning NO, includes additional information in error when its given value is not nil

- (BOOL)removeRecord:(ABRecord *)record;
    // Removes a record (ABPerson or ABGroup) from the AddressBook database
    // Raises if record is nil
    // Returns YES if the removal was successful

- (NSArray *)people;
    // Returns an array of all the people in the AddressBook database
    // Returns an empty array if the DB doesn't contain any people

- (NSArray *)groups;
    // Returns an array of all the groups in the AddressBook database
    // Returns an empty array if the DB doesn't contain any groups

- (NSString *)recordClassFromUniqueId:(NSString *)uniqueId AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    // Given a record uniqueId returns the record class name

- (NSAttributedString *)formattedAddressFromDictionary:(NSDictionary *)address AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    // Returns an attributed string containing the formatted address.
    // The string's attributes match address dictionary keys (kABAddressStreetKey for example).
    // Each attribute value contains the localized description of the key. (For example, the value
    // of a Canadian kABAddressZIPKey field would be Postal Code)

- (NSString *)defaultCountryCode AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    // Returns the default country code for records without specified codes.

- (NSInteger)defaultNameOrdering AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    // Returns the default name ordering defined by the user in the Contacts preferences.
    // Possible values: kABFirstNameFirst or kABLastNameFirst


@end

#endif // __ABADDRESSBOOK__
                                                                                                                                                                                                                                                                            ABAddressBookC.h                                                                                    0100644 0001750 0001750 00000024157 12567507025 034715  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABAddressBookC.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __ADDRESSBOOKC__
#define __ADDRESSBOOKC__

#if defined(__cplusplus)
extern "C" {
#endif

#include <CoreFoundation/CoreFoundation.h>
#include <AddressBook/ABTypedefs.h>
#include <AddressBook/ABGlobalsC.h>

typedef void                            *ABRecordRef;
typedef struct __ABPerson               *ABPersonRef;
typedef struct __ABGroup                *ABGroupRef;
typedef struct __ABSearchElementRef     *ABSearchElementRef;
typedef struct __ABAddressBookRef       *ABAddressBookRef;
typedef const struct __ABMultiValue     *ABMultiValueRef;
typedef struct __ABMultiValue           *ABMutableMultiValueRef;

// --------------------------------------------------------------------------------
//	LSOpenCFURLRef support
// --------------------------------------------------------------------------------
// An application can open the Contacts app and select (and edit) a specific
// person by using the LSOpenCFURLRef API.
//
// To launch (or bring to front) the Contacts app and select a given person
//
// CFStringRef uniqueId = ABRecordCopyUniqueId(aPerson);
// CFStringRef urlString = CFStringCreateWithFormat(NULL, CFSTR(addressbook://%@), uniqueId);
// CFURLRef urlRef = CFURLCreateWithString(NULL, urlString, NULL);
// LSOpenCFURLRef(urlRef, NULL);
// CFRelease(uniqueId);
// CFRelease(urlRef);
// CFRelease(urlString);
//
// To launch (or bring to front) the Contacts app and edit a given person
//
// CFStringRef uniqueId = ABRecordCopyUniqueId(aPerson);
// CFStringRef urlString = CFStringCreateWithFormat(NULL, CFSTR(addressbook://%@?edit), uniqueId);
// CFURLRef urlRef = CFURLCreateWithString(NULL, urlString, NULL);
// LSOpenCFURLRef(urlRef, NULL);
// CFRelease(uniqueId);
// CFRelease(urlRef);
// CFRelease(urlString);

// --------------------------------------------------------------------------------
//      AddressBook
// --------------------------------------------------------------------------------

    // --- There is only one Address Book
extern ABAddressBookRef ABGetSharedAddressBook(void);

    // --- Searching
extern CFArrayRef ABCopyArrayOfMatchingRecords(ABAddressBookRef addressBook, ABSearchElementRef search);

    // --- Saving
extern bool ABSave(ABAddressBookRef addressBook);
extern bool ABHasUnsavedChanges(ABAddressBookRef addressBook);

    // --- Me
extern ABPersonRef ABGetMe(ABAddressBookRef addressBook); // Not retain???
extern void ABSetMe(ABAddressBookRef addressBook, ABPersonRef moi);

    // Returns the record class Name for a particular uniqueId
extern CFStringRef ABCopyRecordTypeFromUniqueId(ABAddressBookRef addressBook, CFStringRef uniqueId) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

    // --- Properties
    // Property names must be unique for a record type
extern CFIndex ABAddPropertiesAndTypes(ABAddressBookRef addressBook, CFStringRef recordType, CFDictionaryRef propertiesAndTypes);
extern CFIndex ABRemoveProperties(ABAddressBookRef addressBook, CFStringRef recordType, CFArrayRef properties);
extern CFArrayRef ABCopyArrayOfPropertiesForRecordType(ABAddressBookRef addressBook, CFStringRef recordType);
extern ABPropertyType ABTypeOfProperty(ABAddressBookRef addressBook, CFStringRef recordType, CFStringRef property);

    // --- Records (Person, Group)
extern ABRecordRef ABCopyRecordForUniqueId(ABAddressBookRef addressBook, CFStringRef uniqueId);
extern bool ABAddRecord(ABAddressBookRef addressBook, ABRecordRef record);
extern bool ABRemoveRecord(ABAddressBookRef addressBook, ABRecordRef record);

    // --- People
extern CFArrayRef ABCopyArrayOfAllPeople(ABAddressBookRef addressBook);                  // Array of ABPerson

    // --- Groups
extern CFArrayRef ABCopyArrayOfAllGroups(ABAddressBookRef addressBook);                  // Array of ABGroup

// --------------------------------------------------------------------------------
//      ABRecord
// --------------------------------------------------------------------------------

extern ABRecordRef ABRecordCreateCopy(ABRecordRef record) AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;

extern CFStringRef ABRecordCopyRecordType(ABRecordRef record);

    // --- Property value
extern CFTypeRef ABRecordCopyValue(ABRecordRef record, CFStringRef property);
    // returns a CFDictionary for multi-value properties
extern bool ABRecordSetValue(ABRecordRef record, CFStringRef property, CFTypeRef value);
    // takes a CFDictionary for multi-value properties
extern bool ABRecordRemoveValue(ABRecordRef record, CFStringRef property);
   // is the record read only
extern bool ABRecordIsReadOnly(ABRecordRef record) AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;

    // ---- Unique ID access convenience
extern CFStringRef ABRecordCopyUniqueId(ABRecordRef record);

// --------------------------------------------------------------------------------
//      ABPerson
// --------------------------------------------------------------------------------

extern ABPersonRef ABPersonCreate(void);

extern ABPersonRef ABPersonCreateWithVCardRepresentation(CFDataRef vCard);
extern CFDataRef ABPersonCopyVCardRepresentation(ABPersonRef person);

extern CFArrayRef ABPersonCopyParentGroups(ABPersonRef person); // Groups this person belongs to

    // --- Search elements
extern ABSearchElementRef ABPersonCreateSearchElement(CFStringRef property, CFStringRef label, CFStringRef key, CFTypeRef value, ABSearchComparison comparison);

// --------------------------------------------------------------------------------
//      ABGroups
// --------------------------------------------------------------------------------

extern ABGroupRef ABGroupCreate(void);

    // --- Dealing with Persons
extern CFArrayRef ABGroupCopyArrayOfAllMembers(ABGroupRef group);
extern bool ABGroupAddMember(ABGroupRef group, ABPersonRef personToAdd);
extern bool ABGroupRemoveMember(ABGroupRef group, ABPersonRef personToRemove);

    // --- Dealing with Groups
extern CFArrayRef ABGroupCopyArrayOfAllSubgroups(ABGroupRef group);
extern bool ABGroupAddGroup(ABGroupRef group, ABGroupRef groupToAdd);
extern bool ABGroupRemoveGroup(ABGroupRef group, ABGroupRef groupToRemove);

    // --- Dealing with Parents
extern CFArrayRef ABGroupCopyParentGroups(ABGroupRef group);

    // --- Distribution list
extern bool ABGroupSetDistributionIdentifier(ABGroupRef group, ABPersonRef person, CFStringRef property, CFStringRef identifier);
extern CFStringRef ABGroupCopyDistributionIdentifier(ABGroupRef group, ABPersonRef person, CFStringRef property);

    // --- Search elements
extern ABSearchElementRef ABGroupCreateSearchElement(CFStringRef property, CFStringRef label, CFStringRef key, CFTypeRef value, ABSearchComparison comparison);

// --------------------------------------------------------------------------------
//      ABSearchElement
// --------------------------------------------------------------------------------

extern ABSearchElementRef ABSearchElementCreateWithConjunction(ABSearchConjunction conjunction, CFArrayRef childrenSearchElement);

extern bool ABSearchElementMatchesRecord(ABSearchElementRef searchElement, ABRecordRef record);

// --------------------------------------------------------------------------------
//      ABMultiValue
// --------------------------------------------------------------------------------

extern ABMultiValueRef ABMultiValueCreate(void);
extern CFIndex ABMultiValueCount(ABMultiValueRef multiValue);
extern CFTypeRef ABMultiValueCopyValueAtIndex(ABMultiValueRef multiValue, CFIndex index);
extern CFStringRef ABMultiValueCopyLabelAtIndex(ABMultiValueRef multiValue, CFIndex index);
extern CFStringRef ABMultiValueCopyPrimaryIdentifier(ABMultiValueRef multiValue);
extern CFIndex ABMultiValueIndexForIdentifier(ABMultiValueRef multiValue, CFStringRef identifier);
extern CFStringRef ABMultiValueCopyIdentifierAtIndex(ABMultiValueRef multiValue, CFIndex index);
extern ABPropertyType ABMultiValuePropertyType(ABMultiValueRef multiValue);
extern ABMultiValueRef ABMultiValueCreateCopy(ABMultiValueRef multiValue);

// --------------------------------------------------------------------------------
//      ABMutableMultiValue
// --------------------------------------------------------------------------------

extern ABMutableMultiValueRef ABMultiValueCreateMutable(void);
extern bool ABMultiValueAdd(ABMutableMultiValueRef multiValue, CFTypeRef value, CFStringRef label, CFStringRef *outIdentifier);
extern bool ABMultiValueInsert(ABMutableMultiValueRef multiValue, CFTypeRef value, CFStringRef label, CFIndex index, CFStringRef *outIdentifier);
extern bool ABMultiValueRemove(ABMutableMultiValueRef multiValue, CFIndex index);
extern bool ABMultiValueReplaceValue(ABMutableMultiValueRef multiValue, CFTypeRef value, CFIndex index);
extern bool ABMultiValueReplaceLabel(ABMutableMultiValueRef multiValue, CFStringRef label, CFIndex index);
extern bool ABMultiValueSetPrimaryIdentifier(ABMutableMultiValueRef multiValue, CFStringRef identifier);
extern ABMutableMultiValueRef ABMultiValueCreateMutableCopy(ABMultiValueRef multiValue);

// --------------------------------------------------------------------------------
//      Localization of properties or labels
// --------------------------------------------------------------------------------

extern CFStringRef ABCopyLocalizedPropertyOrLabel(CFStringRef labelOrProperty);

// --- Address formatting
extern CFStringRef ABCreateFormattedAddressFromDictionary(ABAddressBookRef addressBook, CFDictionaryRef address) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern CFStringRef ABCopyDefaultCountryCode(ABAddressBookRef addressBook) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

// --------------------------------------------------------------------------------
//      Person Image Loading
// --------------------------------------------------------------------------------

extern bool ABPersonSetImageData(ABPersonRef person, CFDataRef imageData);
extern CFDataRef ABPersonCopyImageData(ABPersonRef person);

typedef void (*ABImageClientCallback) (CFDataRef imageData, CFIndex tag, void* refcon);

extern CFIndex ABBeginLoadingImageDataForClient(ABPersonRef person, ABImageClientCallback callback, void* refcon);
extern void ABCancelLoadingImageDataForTag(CFIndex tag);

#if defined(__cplusplus)
}
#endif

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                 ABGlobals.h                                                                                         0100644 0001750 0001750 00000036764 12567507025 034004  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 /*
 *  ABGlobals.h
 *  AddressBook Framework
 *
 *  Copyright (c) 2003-2010 Apple Inc.  All rights reserved.
 *
 */

#ifndef __ABGLOBALS__
#define __ABGLOBALS__

#import <Foundation/Foundation.h>

// ================================================================
//      Global Table properties
// ================================================================

// ----- Properties common to all Records

extern NSString * const kABUIDProperty;                   // The UID property - kABStringProperty
extern NSString * const kABCreationDateProperty;          // Creation Date (when first saved) - kABDateProperty
extern NSString * const kABModificationDateProperty;      // Last saved date - kABDateProperty

// ----- Person specific properties

extern NSString * const kABFirstNameProperty;             // First name - kABStringProperty
extern NSString * const kABLastNameProperty;              // Last name - kABStringProperty

extern NSString * const kABFirstNamePhoneticProperty;     // First name Phonetic - kABStringProperty
extern NSString * const kABLastNamePhoneticProperty;      // Last name Phonetic - kABStringProperty

extern NSString * const kABNicknameProperty;              // kABStringProperty
extern NSString * const kABMaidenNameProperty;            // kABStringProperty

extern NSString * const kABBirthdayProperty;              // Birth date - kABDateProperty
extern NSString * const kABBirthdayComponentsProperty AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;  // Birth date - kABDateComponentsProperty
extern NSString * const kABAlternateBirthdayComponentsProperty; //Alternate non-Gregorian birth date - kABDateComponentsProperty

extern NSString * const kABOrganizationProperty;          // Company name - kABStringProperty

extern NSString * const kABJobTitleProperty;              // Job Title - kABStringProperty

// Deprecated in Mac OS 10.4. You should use kABURLsProperty.
extern NSString * const kABHomePageProperty;              // Home Web page - kABStringProperty

extern NSString * const kABURLsProperty AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;          // URLs - kABMultiStringProperty
        extern NSString * const kABHomePageLabel AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // Homepage URL
		
extern NSString * const kABCalendarURIsProperty AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // Calendar URIs - kABMultiStringProperty

extern NSString * const kABEmailProperty;                 // Email(s) - kABMultiStringProperty
        extern NSString * const kABEmailWorkLabel;        // Work email
        extern NSString * const kABEmailHomeLabel;        // Home email
        extern NSString * const kABEmailMobileMeLabel;    // MobileMe email

extern NSString * const kABAddressProperty;                // Street Addresses - kABMultiDictionaryProperty
    extern NSString * const kABAddressStreetKey;           // Street
    extern NSString * const kABAddressCityKey;             // City
    extern NSString * const kABAddressStateKey;            // State
    extern NSString * const kABAddressZIPKey;              // Zip
    extern NSString * const kABAddressCountryKey;          // Country
    extern NSString * const kABAddressCountryCodeKey;      // Country Code
        extern NSString * const kABAddressHomeLabel;       // Home Address
        extern NSString * const kABAddressWorkLabel;       // Work Address

/*
 * kABAddressCountryCodeKey code must be one of the following:
 * iso country codes
 *
 *    ae = United Arab Emirates
 *    ar = Argentina
 *    at = Austria
 *    au = Australia
 *    ba = Bosnia and Herzegovina
 *    be = Belgium
 *    bg = Bulgaria
 *    bh = Bahrain
 *    br = Brazil
 *    ca = Canada
 *    ch = Switzerland
 *    cn = China
 *    cs = Czech
 *    de = Germany
 *    dk = Denmark
 *    eg = Egypt
 *    es = Spain
 *    fi = Finland
 *    fr = France
 *    gr = Greece
 *    gl = Greenland
 *    hk = Hong Kong
 *    hr = Croatia
 *    hu = Hungary
 *    ie = Ireland
 *    il = Israel
 *    id = Indonesia
 *    in = India
 *    is = Iceland
 *    it = Italy
 *    ja = Japan
 *    jo = Jordan
 *    kr = South Korea
 *    kw = Kuwait
 *    lb = Lebanon
 *    lu = Luxembourg
 *    mk = Macedonia
 *    mx = Mexico
 *    nl = Netherlands
 *    no = Norway
 *    nz = New Zealand
 *    om = Oman
 *    pl = Poland
 *    pt = Portugal
 *    qa = Qatar
 *    ro = Romania
 *    ru = Russian Federation
 *    sa = Saudi Arabia
 *    se = Sweden
 *    sg = Singapore
 *    si = Slovenia
 *    sk = Slovakia
 *    sy = Syrian Arab Republic
 *    tw = Taiwan
 *    tr = Turkey
 *    ua = Ukraine
 *    uk = United Kingdom
 *    us = United States
 *    ye = Yemen
 *    yu = Serbia and Montenegro
 *    za = South Africa
 *
 */

extern NSString* const kABOtherDatesProperty       AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;       // Dates associated with this person - kABMultiDateProperty - (Person)
extern NSString* const kABOtherDateComponentsProperty AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;    // Dates associated with this person - kABMultiDateComponentsProperty - (Person)
       extern  NSString* const kABAnniversaryLabel AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

extern NSString* const kABRelatedNamesProperty     AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;       // names - kABMultiStringProperty
       extern  NSString* const kABFatherLabel      AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
       extern  NSString* const kABMotherLabel      AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
       extern  NSString* const kABParentLabel      AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
       extern  NSString* const kABBrotherLabel     AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
       extern  NSString* const kABSisterLabel      AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
       extern  NSString* const kABChildLabel       AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
       extern  NSString* const kABFriendLabel      AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
       extern  NSString* const kABSpouseLabel      AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
       extern  NSString* const kABPartnerLabel     AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
       extern  NSString* const kABAssistantLabel   AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
       extern  NSString* const kABManagerLabel     AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

extern NSString * const kABDepartmentProperty      AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;     // Department name - (Person)

extern NSString * const kABPersonFlags             AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;     // Various flags - kABIntegerProperty
    #define kABShowAsMask                           000007
    #define kABShowAsPerson                         000000
    #define kABShowAsCompany                        000001
	#define kABShowAsResource                       000002
	#define kABShowAsRoom                           000003

    #define kABNameOrderingMask                     000070
    #define kABDefaultNameOrdering                  000000
    #define kABFirstNameFirst                       000040
    #define kABLastNameFirst                        000020

extern NSString * const kABPhoneProperty;                  // Generic phone number - kABMultiStringProperty
		extern NSString * const kABPhoneWorkLabel;         // Work phone
		extern NSString * const kABPhoneHomeLabel;         // Home phone
		extern NSString * const kABPhoneiPhoneLabel;       // iPhone
		extern NSString * const kABPhoneMobileLabel;       // Cell phone
		extern NSString * const kABPhoneMainLabel;         // Main phone
		extern NSString * const kABPhoneHomeFAXLabel;      // FAX number
		extern NSString * const kABPhoneWorkFAXLabel;      // FAX number
		extern NSString * const kABPhonePagerLabel;        // Pager number

// Deprecated in Mac OS 10.7. You should use kABInstantMessageProperty.
extern NSString * const kABAIMInstantProperty						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;	// AIM Instant Messaging - kABMultiStringProperty
		extern NSString * const kABAIMWorkLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
		extern NSString * const kABAIMHomeLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
		extern NSString * const kABAIMMobileMeLabel					DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

// Deprecated in Mac OS 10.7. You should use kABInstantMessageProperty.
extern NSString * const kABJabberInstantProperty					DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;	// Jabber Instant Messaging - kABMultiStringProperty
		extern NSString * const kABJabberWorkLabel					DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
		extern NSString * const kABJabberHomeLabel					DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

// Deprecated in Mac OS 10.7. You should use kABInstantMessageProperty.
extern NSString * const kABMSNInstantProperty						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;	// MSN Instant Messaging  - kABMultiStringProperty
		extern NSString * const kABMSNWorkLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
		extern NSString * const kABMSNHomeLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

// Deprecated in Mac OS 10.7. You should use kABInstantMessageProperty.
extern NSString * const kABYahooInstantProperty						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;	// Yahoo Instant Messaging  - kABMultiStringProperty
		extern NSString * const kABYahooWorkLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
		extern NSString * const kABYahooHomeLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

// Deprecated in Mac OS 10.7. You should use kABInstantMessageProperty.
extern NSString * const kABICQInstantProperty						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;	// ICQ Instant Messaging  - kABMultiStringProperty
		extern NSString * const kABICQWorkLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
		extern NSString * const kABICQHomeLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

extern NSString * const kABInstantMessageProperty					AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER; // Instant Messaging - kABMultiDictionaryProperty
	extern NSString * const kABInstantMessageUsernameKey			AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// dictionary key for the instant messaging handle/username
	extern NSString * const kABInstantMessageServiceKey				AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// dictionary key for the service type, not guaranteed to be present; possible values follow
		extern NSString * const kABInstantMessageServiceAIM			AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// AIM
		extern NSString * const kABInstantMessageServiceFacebook	AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Facebook
		extern NSString * const kABInstantMessageServiceGaduGadu	AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Gadu-Gadu
		extern NSString * const kABInstantMessageServiceGoogleTalk	AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Google Talk
		extern NSString * const kABInstantMessageServiceICQ			AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// ICQ
		extern NSString * const kABInstantMessageServiceJabber		AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Jabber
		extern NSString * const kABInstantMessageServiceMSN			AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// MSN
		extern NSString * const kABInstantMessageServiceQQ			AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// QQ
		extern NSString * const kABInstantMessageServiceSkype		AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Skype
		extern NSString * const kABInstantMessageServiceYahoo		AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Yahoo!

extern NSString * const kABSocialProfileProperty                    AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;  // Social Profiles - kABMultiDictionaryProperty
    extern NSString * const kABSocialProfileURLKey                  AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;  // String representation of the profile URL
    extern NSString * const kABSocialProfileUsernameKey             AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;  // User-visible profile name
    extern NSString * const kABSocialProfileUserIdentifierKey       AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;  // Service-specific identifier
    extern NSString * const kABSocialProfileServiceKey              AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;  // Service name. Possible values follow.
        extern NSString * const kABSocialProfileServiceTwitter      AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;
        extern NSString * const kABSocialProfileServiceFacebook     AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;
        extern NSString * const kABSocialProfileServiceLinkedIn     AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;
        extern NSString * const kABSocialProfileServiceFlickr       AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;
        extern NSString * const kABSocialProfileServiceMySpace      AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;
        extern NSString * const kABSocialProfileServiceSinaWeibo    AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER;
        extern NSString * const kABSocialProfileServiceTencentWeibo AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER;
        extern NSString * const kABSocialProfileServiceYelp         AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER;

extern NSString * const kABNoteProperty;                   // Note - kABStringProperty

extern NSString * const kABMiddleNameProperty;             // kABStringProperty
extern NSString * const kABMiddleNamePhoneticProperty;     // kABStringProperty
extern NSString * const kABTitleProperty;                  // kABStringProperty "Sir" "Duke" "General" "Lord"
extern NSString * const kABSuffixProperty;                 // kABStringProperty "Sr." "Jr." "III"

// ----- Group Specific Properties

extern NSString * const kABGroupNameProperty;              // Name of the group - kABStringProperty

// ================================================================
//      Generic Labels
// ================================================================

    // All kABXXXXWorkLabel are equivalent to this label
extern NSString * const kABWorkLabel;

    // All kABXXXXHomeLabel are equivalent to this label
extern NSString * const kABHomeLabel;

    // Can be used with any multi-value property
extern NSString * const kABOtherLabel;

    // MobileMe - for AIM or email values
extern NSString * const kABMobileMeLabel AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;


// ================================================================
//      Notifications published when something changes
// ================================================================
// These notifications are not sent until [ABAddressBook sharedAddressBook]
// has been called somewhere

    // This process has changed the DB
extern NSString * const kABDatabaseChangedNotification;

    // Another process has changed the DB
extern NSString * const kABDatabaseChangedExternallyNotification;

    // The user info (dictionary) in the above notification will contain
    // the following 3 keys. Value for each keys is an array of
    // uniqueId of the Inserted/Updated/Deleted Records.
    // If all three values are nil assume that everything has changed (could be the case
    // when restoring from backup)
extern NSString * const kABInsertedRecords          AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern NSString * const kABUpdatedRecords           AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern NSString * const kABDeletedRecords           AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;


// ================================================================
//      Localization of property or label
// ================================================================

    // Returns the localized version of built in properties, labels or keys
    // Returns propertyOrLabel if not found (e.g. if not built in)
NSString *ABLocalizedPropertyOrLabel(NSString *propertyOrLabel);

#endif // __ABGLOBALS__

            ABGlobalsC.h                                                                                        0100644 0001750 0001750 00000032202 12567507025 034066  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 /*
 *  ABGlobalsC.h
 *  AddressBook Framework
 *
 *  Copyright (c) 2003-2010 Apple Inc.  All rights reserved.
 *
 */

#ifndef __ABGLOBALSC__
#define __ABGLOBALSC__

#ifndef __OBJC__

#include <CoreFoundation/CoreFoundation.h>

// NOTE: This header is for C programmers. For Objective-C use ABGlobals.h

// ================================================================
//      Global Table properties
// ================================================================

// ----- Properties common to all Records

extern CFStringRef const kABUIDProperty;                   // The UID property - kABStringProperty
extern CFStringRef const kABCreationDateProperty;          // Creation Date (when first saved) - kABDateProperty
extern CFStringRef const kABModificationDateProperty;      // Last saved date - kABDateProperty

// ----- Person specific properties

extern CFStringRef const kABFirstNameProperty;             // First name - kABStringProperty
extern CFStringRef const kABLastNameProperty;              // Last name - kABStringProperty

extern CFStringRef const kABFirstNamePhoneticProperty;     // First name Phonetic - kABStringProperty
extern CFStringRef const kABLastNamePhoneticProperty;      // Last name Phonetic - kABStringProperty

extern CFStringRef const kABNicknameProperty;                // kABStringProperty
extern CFStringRef const kABMaidenNameProperty;              // kABStringProperty

extern CFStringRef const kABBirthdayProperty;              // Birth date - kABDateProperty

extern CFStringRef const kABOrganizationProperty;          // Company name - kABStringProperty

extern CFStringRef const kABJobTitleProperty;              // Job Title - kABStringProperty

// Deprecated in Mac OS 10.4. You should use kABURLsProperty.
extern CFStringRef const kABHomePageProperty;              // Home Web page - kABStringProperty

extern CFStringRef const kABURLsProperty AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;  // URLs - kABMultiStringProperty
    extern CFStringRef const kABHomePageLabel AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER; // Homepage URL
	
extern CFStringRef const kABCalendarURIsProperty AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // Calendar URIs - kABMultiStringProperty

extern CFStringRef const kABEmailProperty;                 // Email(s) - kABMultiStringProperty
        extern CFStringRef const kABEmailWorkLabel;        // Work email
        extern CFStringRef const kABEmailHomeLabel;        // Home email

extern CFStringRef const kABAddressProperty;                // Street Addresses - kABMultiDictionaryProperty
    extern CFStringRef const kABAddressStreetKey;           // Street
    extern CFStringRef const kABAddressCityKey;             // City
    extern CFStringRef const kABAddressStateKey;            // State
    extern CFStringRef const kABAddressZIPKey;              // Zip
    extern CFStringRef const kABAddressCountryKey;          // Country
    extern CFStringRef const kABAddressCountryCodeKey;      // Country Code
        extern CFStringRef const kABAddressHomeLabel;       // Home Address
        extern CFStringRef const kABAddressWorkLabel;       // Work Address

/*
 * kABAddressCountryCodeKey code must be one of the following:
 * iso country codes
 *
 *    ar = Argentina
 *    at = Austria
 *    au = Australia
 *    ba = Bosnia and Herzegovina
 *    be = Belgium
 *    bg = Bulgaria
 *    bh = Bahrain
 *    br = Brazil
 *    ca = Canada
 *    ch = Switzerland
 *    cn = China
 *    cs = Czech
 *    de = Germany
 *    dk = Denmark
 *    eg = Egypt
 *    es = Spain
 *    fi = Finland
 *    fr = France
 *    gr = Greece
 *    gl = Greenland
 *    hk = Hong Kong
 *    hr = Croatia
 *    hu = Hungary
 *    ie = Ireland
 *    il = Israel
 *    id = Indonesia
 *    in = India
 *    is = Iceland
 *    it = Italy
 *    ja = Japan
 *    jo = Jordan
 *    kr = South Korea
 *    kw = Kuwait
 *    lb = Lebanon
 *    lu = Luxembourg
 *    mk = Macedonia
 *    mx = Mexico
 *    nl = Netherlands
 *    no = Norway
 *    nz = New Zealand
 *    om = Oman
 *    pl = Poland
 *    pt = Portugal
 *    qa = Qatar
 *    ro = Romania
 *    ru = Russian Federation
 *    sa = Saudi Arabia
 *    se = Sweden
 *    sg = Singapore
 *    si = Slovenia
 *    sk = Slovakia
 *    sy = Syrian Arab Republic
 *    tw = Taiwan
 *    tr = Turkey
 *    ua = Ukraine
 *    uk = United Kingdom
 *    us = United States
 *    ye = Yemen
 *    za = South Africa
 *
 */

extern  CFStringRef const kABOtherDatesProperty      AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;         // Dates associated with this person - kABMultiDateProperty - (Person)
    extern  CFStringRef const kABAnniversaryLabel    AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

extern  CFStringRef const kABRelatedNamesProperty    AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;         // names - kABMultiStringProperty
    extern  CFStringRef const kABFatherLabel         AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    extern  CFStringRef const kABMotherLabel         AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    extern  CFStringRef const kABParentLabel         AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    extern  CFStringRef const kABBrotherLabel        AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    extern  CFStringRef const kABSisterLabel         AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    extern  CFStringRef const kABChildLabel          AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    extern  CFStringRef const kABFriendLabel         AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    extern  CFStringRef const kABSpouseLabel         AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    extern  CFStringRef const kABPartnerLabel        AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    extern  CFStringRef const kABAssistantLabel      AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    extern  CFStringRef const kABManagerLabel        AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

extern CFStringRef const kABDepartmentProperty       AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;         // Department name - kABStringProperty - (Person)

extern CFStringRef const kABPersonFlags              AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;         // Various flags - kABIntegerProperty - (Person)
#define kABShowAsMask                           000007
#define kABShowAsPerson                         000000
#define kABShowAsCompany                        000001

#define kABNameOrderingMask                     000070
#define kABDefaultNameOrdering                  000000
#define kABFirstNameFirst                       000040
#define kABLastNameFirst                        000020

extern CFStringRef const kABPhoneProperty;                   // Generic phone number - kABMultiStringProperty
        extern CFStringRef const kABPhoneWorkLabel;          // Work phone
        extern CFStringRef const kABPhoneHomeLabel;          // Home phone
        extern CFStringRef const kABPhoneMobileLabel;        // Cell phone
        extern CFStringRef const kABPhoneMainLabel;          // Main phone
        extern CFStringRef const kABPhoneHomeFAXLabel;       // FAX number
        extern CFStringRef const kABPhoneWorkFAXLabel;       // FAX number
        extern CFStringRef const kABPhonePagerLabel;         // Pager number



// Deprecated in Mac OS 10.7. You should use kABInstantMessageProperty.
extern CFStringRef const kABAIMInstantProperty							DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;	// AIM Instant Messaging - kABMultiStringProperty
        extern CFStringRef const kABAIMWorkLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
        extern CFStringRef const kABAIMHomeLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

// Deprecated in Mac OS 10.7. You should use kABInstantMessageProperty.
extern CFStringRef const kABJabberInstantProperty						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;	// Jabber Instant Messaging - kABMultiStringProperty
        extern CFStringRef const kABJabberWorkLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
        extern CFStringRef const kABJabberHomeLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

// Deprecated in Mac OS 10.7. You should use kABInstantMessageProperty.
extern CFStringRef const kABMSNInstantProperty							DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;	// MSN Instant Messaging - kABMultiStringProperty
        extern CFStringRef const kABMSNWorkLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
        extern CFStringRef const kABMSNHomeLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

// Deprecated in Mac OS 10.7. You should use kABInstantMessageProperty.
extern CFStringRef const kABYahooInstantProperty						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;	// Yahoo Instant Messaging - kABMultiStringProperty
        extern CFStringRef const kABYahooWorkLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
        extern CFStringRef const kABYahooHomeLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

// Deprecated in Mac OS 10.7. You should use kABInstantMessageProperty.
extern CFStringRef const kABICQInstantProperty							DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;	// ICQ Instant Messaging - kABMultiStringProperty
        extern CFStringRef const kABICQWorkLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;
        extern CFStringRef const kABICQHomeLabel						DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER;

extern CFStringRef const kABInstantMessageProperty						AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;	// Instant Messaging - kABMultiDictionaryProperty
	extern CFStringRef const kABInstantMessageUsernameKey				AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// dictionary key for the instant messaging handle/username
	extern CFStringRef const kABInstantMessageServiceKey				AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// dictionary key for the service type; possible values follow
		extern CFStringRef const kABInstantMessageServiceAIM			AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// AIM
		extern CFStringRef const kABInstantMessageServiceFacebook		AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Facebook
		extern CFStringRef const kABInstantMessageServiceGaduGadu		AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Gadu-Gadu
		extern CFStringRef const kABInstantMessageServiceGoogleTalk	AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Google Talk
		extern CFStringRef const kABInstantMessageServiceICQ			AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// ICQ
		extern CFStringRef const kABInstantMessageServiceJabber		AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Jabber
		extern CFStringRef const kABInstantMessageServiceMSN			AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// MSN
		extern CFStringRef const kABInstantMessageServiceQQ				AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// QQ
		extern CFStringRef const kABInstantMessageServiceSkype			AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Skype
		extern CFStringRef const kABInstantMessageServiceYahoo			AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;		// Yahoo!

extern CFStringRef const kABNoteProperty;                    // Note (string)

extern CFStringRef const kABMiddleNameProperty;              // kABStringProperty
extern CFStringRef const kABMiddleNamePhoneticProperty;      // kABStringProperty
extern CFStringRef const kABTitleProperty;                   // kABStringProperty "Sir" "Duke" "General" "Lord"
extern CFStringRef const kABSuffixProperty;                  // kABStringProperty "Sr." "Jr." "III"

// ----- Group Specific Properties

extern CFStringRef const kABGroupNameProperty;               // Name of the group - kABStringProperty

// ================================================================
//      Generic Labels
// ================================================================

    // All kABXXXXWorkLabel are equivalent to this label
extern CFStringRef const kABWorkLabel;

    // All kABXXXXHomeLabel are equivalent to this label
extern CFStringRef const kABHomeLabel;

    // Can be used with any multi-value property
extern CFStringRef const kABOtherLabel;

    // MobileMe - for AIM or email values
extern CFStringRef const kABMobileMeLabel AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;


// ================================================================
//      RecordTypes
// ================================================================

    // Type of a ABPersonRef
extern CFStringRef const kABPersonRecordType;

    // Type of a ABGroupRef
extern CFStringRef const kABGroupRecordType;

// ================================================================
//      Notifications published when something changes
// ================================================================
// These notifications are not sent until ABGetSharedAddressBook()
// has been called somewhere

    // This process has changed the DB
extern CFStringRef const kABDatabaseChangedNotification;

    // Another process has changed the DB
extern CFStringRef const kABDatabaseChangedExternallyNotification;

    // The user info in the above notifications will contain
    // the following 3 keys, the values of the keys in the dictionary
    // will be the uniqueIds of the Inserted/Updated/Deleted Records
extern CFStringRef const kABInsertedRecords         AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern CFStringRef const kABUpdatedRecords          AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern CFStringRef const kABDeletedRecords          AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

#endif
#endif
                                                                                                                                                                                                                                                                                                                                                                                              ABGroup.h                                                                                           0100644 0001750 0001750 00000012120 12567507025 033471  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABGroup.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __ABGROUP__
#define __ABGROUP__

#import <AddressBook/ABRecord.h>
#import <AddressBook/ABTypedefs.h>

@class ABPerson;
@class ABSearchElement;

// ================================================================================
//      interface ABGroup
// ================================================================================
// ABGroup is a subclass of ABRecord. It represents a group of people or other groups
// No recursions allowed

@interface ABGroup : ABRecord
{
@private
    id _groupReserved1 __unused;
    id _groupReserved2 __unused;
}

- (NSArray *)members;
    // Returns an array of ABPerson.
    // Returns an empty array if this group doesn't contain any people

- (BOOL)addMember:(ABPerson *)person;
    // Adds person to this group. Does nothing if person is already part of this group (returns NO)
    // Raises if person is nil
    // Returns YES if successful

- (BOOL)removeMember:(ABPerson *)person;
    // Removes person from this group. Does nothing if person is not part of this group (returns NO)
    // Raises if person is nil
    // Returns YES if successful

- (NSArray *)subgroups;
    // Returns an array of ABGroup
    // Returns an empty array if this group doesn't contain any other groups

- (BOOL)addSubgroup:(ABGroup *)group;
    // Add group to this group. Does nothing if group is already part of this group (returns NO)
    // Recursions are not allowed (returns NO)
    // Raises if group is nil
    // Returns YES if successful

- (BOOL)removeSubgroup:(ABGroup *)group;
    // Removes group from this group. Does nothing if group is not part of this group (returns NO)
    // Raises if group is nil
    // Returns YES if successful

- (NSArray *)parentGroups;
    // Returns an array of ABGroup this group belongs to.
    // Returns an empty array if this group doesn't belong to any groups.

- (BOOL)setDistributionIdentifier:(NSString *)identifier forProperty:(NSString *)property person:(ABPerson *)person;
    // Allows groups to be used as distribution lists (mailing list in the case of the email property)
    // Example: For group "Football team" I want to use John's home email and Paul's work email
    // The default distribution identifier is the property's primary identifier
    // Use nil for the identifer to reset the distribution identifier to the default (e.g. primary)
    // Raises if property or person is nil
    // Returns YES if successful

- (NSString *)distributionIdentifierForProperty:(NSString *)property person:(ABPerson *)person;
    // Returns the distribution identifier for a given property and person. If not set then returns the property primary identifier
    // Raises if property or person is nil
    // Returns the distribution identifier or nil if not successful
@end


// ================================================================================
//      interface ABGroup(ABGroup_Properties)
// ================================================================================
// This section deals with adding/removing properties on groups

@interface ABGroup (ABGroup_Properties)

+ (NSInteger)addPropertiesAndTypes:(NSDictionary *)properties;
    // Add properties to all groups. The dictionary must be of the form:
    //          key: propety name
    //          value: property type
    // Property name must be unique
    // Returns the number of properties successfuly added (-1 if an error occured)

+ (NSInteger)removeProperties:(NSArray *)properties;
    // Removes properties from all groups
    // Returns the number of properties successfuly removed (-1 if an error occured)

+ (NSArray *)properties;
    // Returns an array of property names

+ (ABPropertyType)typeOfProperty:(NSString*)property;
    // Returns the type of a given property.
    // Returns kABErrorInProperty if the property is not known

@end

// ================================================================================
//      interface ABGroup(ABGroup_Searching)
// ================================================================================
// This section deals with creating search elements to search groups

@interface ABGroup (ABGroup_Searching)
+ (ABSearchElement *)searchElementForProperty:(NSString*)property
                                        label:(NSString*)label
                                          key:(NSString*)key
                                        value:(id)value
                                   comparison:(ABSearchComparison)comparison;
    // Returns a search element that will search on groups
    //          property: the name of the property to search on (cannot be nil)
    //          label: for multi-value properties an optional label (can be nil)
    //          key: for dictionary values an optional key (can be nil)
    //          value: value to match (can be nil)
    //          comparison: the type of search (see ABTypedefs.h)
    //
    // if the value is nil the only supported comparisons are kABEqual or kABNotEqual
    // Note: Support for nil values was added to Mac OS X version 10.2.4
@end

#endif // __ABGROUP__
                                                                                                                                                                                                                                                                                                                                                                                                                                                ABImageLoading.h                                                                                    0100644 0001750 0001750 00000002722 12567507025 034724  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABImageLoading.h
//  AddressBook
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __ABIMAGELOADING__
#define __ABIMAGELOADING__

#import <AddressBook/AddressBook.h>

@protocol ABImageClient <NSObject>
- (void)consumeImageData:(NSData *)data forTag:(NSInteger)tag;
    // data will be in an NSImage/QuickTime compatible format or nil if no image could be found.
    // This is always called on the main thread.
	// Use the tag returned by the -beginLoadingImageDataForClient: method
@end

@interface ABPerson (ABPersonImageAdditions)

- (BOOL)setImageData:(NSData *)data;
    // Set the image of a person to data. data should be in an NSImage/QuickTime compatible format.
    // Pass nil to clear the image.

- (NSData *)imageData;
    // Synchronously returns data containing an image for this person. Only does local
    // file system searches. Data will be in an NSImage/QuickTime compatible format.

- (NSInteger)beginLoadingImageDataForClient:(id<ABImageClient>)client;
    // Starts an asynchronous fetch for image data in all locations using all. Returns a non-zero tag for tracking.
    // The consumer will not be called back until after this method has returned.
    // Cancel with +[ABPerson cancelLoadingImageDataForTag:].

+ (void)cancelLoadingImageDataForTag:(NSInteger)tag;
    // Cancels an asynchronous fetch for a specific tag
    // Use the tag returned by the -beginLoadingImageDataForClient: method

@end

#endif // __ABIMAGELOADING__
                                              ABMultiValue.h                                                                                      0100644 0001750 0001750 00000010225 12567507025 034470  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABMultiValue.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __ABMULTIVALUE__
#define __ABMULTIVALUE__

#import <Foundation/Foundation.h>
#import <AddressBook/ABTypedefs.h>
#import <Foundation/NSEnumerator.h>

// ================================================================================
//	interface ABMutableMultiValue
// ================================================================================
// Represents values of type ABMultiXXXXXProperty. All values in an ABMultiValue must be of the same type
// (kABMultiStringProperty: all values must be strings....)
//
// In case your application needs to store away a reference to a specific value/label pair, use the identifier.
// Index won't work in this case because any client can add/remove/reorder a multivalue making your index
// point to the wrong pair. Identifiers are unique Ids.
//

@interface ABMultiValue : NSObject <NSCopying, NSMutableCopying, NSFastEnumeration>
{
@protected
    NSMutableArray      *_identifiers;
    NSMutableArray      *_labels;
    NSMutableArray      *_values;
    NSString            *_primaryIdentifier;
}

- (NSUInteger)count;
    // Returns the number of value/label pairs

- (id)valueAtIndex:(NSUInteger)index;
    // Returns a value at a given index
    // Raises if index is out of bounds

- (NSString *)labelAtIndex:(NSUInteger)index;
    // Returns a label at a given index
    // Raises if index is out of bounds

- (NSString *)identifierAtIndex:(NSUInteger)index;
    // Returns an identifier at a given index
    // Raises if index is out of bounds

- (NSUInteger)indexForIdentifier:(NSString *)identifier;
    // Returns the index of a given identifier
    // Returns NSNotFound if not found

- (NSString *)primaryIdentifier;
    // Identifier for the primary value

- (ABPropertyType)propertyType;
    // Type of this multivalue (kABMultiXXXXProperty)
    // Returns kABErrorInProperty if this multi-value is empty or not all values have
    // the same type.

#if MAC_OS_X_VERSION_10_5 <= MAC_OS_X_VERSION_MAX_ALLOWED
- (id)valueForIdentifier:(NSString*)identifier;
	//	Returns the value for a given identifier
	//	Returns nil if the identifier is not found
	
- (id)labelForIdentifier:(NSString*)identifier;
	//	Returns the value for a given identifier
	//	Returns nil if the identifier is not found

#endif
@end

// ================================================================================
//	interface ABMutableMultiValue
// ================================================================================
// Mutable variant of ABMultiValue

@interface ABMutableMultiValue : ABMultiValue

- (NSString *)addValue:(id)value withLabel:(NSString *)label;
    // Adds a value with its label
    // Returns the identifier if successful. nil otherwise
    // Raises if value or label are nil
    // Note: No type checking is made when adding a value. But trying to set a multivalue property
    // with a multivalue that doesn't have all its values of the same type will return an error

- (NSString *)insertValue:(id)value withLabel:(NSString *)label atIndex:(NSUInteger)index;
    // Insert a value/label pair at a given index
    // Returns the identifier if successful. nil otherwise
    // Raises if value or label are nil or the index is out of bounds
    // Note: No type checking is made when adding a value. But trying to set a multivalue property
    // with a multivalue that doesn't have all its values of the same type will return an error

- (BOOL)removeValueAndLabelAtIndex:(NSUInteger)index;
    // Removes a value/label pair at a given index
    // Raises if the index is out of bounds

- (BOOL)replaceValueAtIndex:(NSUInteger)index withValue:(id)value;
    // Replaces a value at a given index
    // Raises if the index is out of bounds or the value is nil

- (BOOL)replaceLabelAtIndex:(NSUInteger)index withLabel:(NSString*)label;
    // Replaces a label at a given index
    // Raises if the index is out of bounds or the label is nil

- (BOOL)setPrimaryIdentifier:(NSString *)identifier;
    // Sets the primary value given its identifier.
    // Raises if identifier is nil
    // Returns YES if successful

@end

#endif // __ABMULTIVALUE__
                                                                                                                                                                                                                                                                                                                                                                           ABPeoplePickerC.h                                                                                   0100644 0001750 0001750 00000016600 12567507026 035072  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABPeoplePickerC.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __PEOPLEPICKERC__
#define __PEOPLEPICKERC__

#if defined(__cplusplus)
extern "C" {
#endif

#include <CoreFoundation/CoreFoundation.h>
#include <AddressBook/ABAddressBookC.h>
#include <Carbon/Carbon.h>

typedef struct OpaqueABPicker*  ABPickerRef;

/*
 * Picker creation and manipulation
 */

// Creates an ABPickerRef. Release with CFRelease(). The window is created hidden. Call
// ABPickerSetVisibility() to show it.
extern ABPickerRef ABPickerCreate(void) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

// Change the structural frame of the window.
extern void ABPickerSetFrame(ABPickerRef inPicker, const HIRect *inFrame) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern void ABPickerGetFrame(ABPickerRef inPicker, HIRect *outFrame) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

extern void ABPickerSetVisibility(ABPickerRef inPicker, bool visible) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern bool ABPickerIsVisible(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

/*
 * Look and Feel
 */

enum
{
    // Choose the selection behavior for the value column. If multiple behaviors are selected,
    // the most restrictive behavior will be used. Defaults to kABPickerSingleValueSelection set
    // to TRUE.
    kABPickerSingleValueSelection   = 1 << 0, // Allow user to choose a single value for a person.
    kABPickerMultipleValueSelection = 1 << 1, // Allow user to choose multiple values for a person.

    // Allow the user to select entire groups in the group column. If false, at least one
    // person in the group will be selected. Defaults to FALSE.
    kABPickerAllowGroupSelection    = 1 << 2,

    // Allow the user to select more than one group/record at a time. Defaults to TRUE.
    kABPickerAllowMultipleSelection = 1 << 3
};

typedef OptionBits ABPickerAttributes;

extern ABPickerAttributes ABPickerGetAttributes(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern void ABPickerChangeAttributes(ABPickerRef inPicker, ABPickerAttributes inAttributesToSet, ABPickerAttributes inAttributesToClear) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

/*
 * Value column
 */

    // These methods control what data (if any) is shown in the values column. The column will only
    // display if an AB property is added. A popup button in the column header will be used if more
    // than one property is added. Titles for built in properties will localized automatically. A
    // list of AB properties can be found in <AddressBook/ABGlobals.h>.
extern void ABPickerAddProperty(ABPickerRef inPicker, CFStringRef inProperty) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern void ABPickerRemoveProperty(ABPickerRef inPicker, CFStringRef inProperty) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    // Returns an array of AB Properties as CFStringRefs.
extern CFArrayRef ABPickerCopyProperties(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

    // Localized titles for third party properties should be set with these methods.
extern void ABPickerSetColumnTitle(ABPickerRef inPicker, CFStringRef inTitle, CFStringRef inProperty) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern CFStringRef ABPickerCopyColumnTitle(ABPickerRef inPicker, CFStringRef inProperty) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

    // Display one of the properties added above in the values column.
extern void ABPickerSetDisplayedProperty(ABPickerRef inPicker, CFStringRef inProperty) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern CFStringRef ABPickerCopyDisplayedProperty(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

/*
 * Selection
 */

    // Returns group column selection as an array of ABGroupRef objects.
extern CFArrayRef ABPickerCopySelectedGroups(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

    // Returns names column selection as an array of ABGroupRef or ABPersonRef objects.
extern CFArrayRef ABPickerCopySelectedRecords(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

    // This method returns an array of selected multi-value identifiers. Returns nil if the displayed
    // property is a single value type.
extern CFArrayRef ABPickerCopySelectedIdentifiers(ABPickerRef inPicker, ABPersonRef inPerson) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

    // Returns an array containing CFStringRefs for each item selected in the values column.
extern CFArrayRef ABPickerCopySelectedValues(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

    // Select group/name/value programatically.
extern void ABPickerSelectGroup(ABPickerRef inPicker, ABGroupRef inGroup, bool inExtendSelection) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern void ABPickerSelectRecord(ABPickerRef inPicker, ABRecordRef inRecord, bool inExtendSelection) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
    // Individual values contained within an multi-value property can be selected with this method.
extern void ABPickerSelectIdentifier(ABPickerRef inPicker, ABPersonRef inPerson, CFStringRef inIdentifier, bool inExtendSelection) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

    // Remove selection
extern void ABPickerDeselectGroup(ABPickerRef inPicker, ABGroupRef inGroup) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern void ABPickerDeselectRecord(ABPickerRef inPicker, ABRecordRef inRecord) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern void ABPickerDeselectIdentifier(ABPickerRef inPicker, ABPersonRef inPerson, CFStringRef inIdentifier) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

extern void ABPickerDeselectAll(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

/*
 * Events and Actions
 *
 * Your delegate will be notified when the user changes the selection or displayed property of the picker.
 * Picker events have an event class of kEventClassABPeoplePicker and one of the kinds listed below. Picker
 * events contain an event parameter which contains the ABPickerRef. To obtain this:
 *
 * GetEventParameter(inEvent, kEventParamABPickerRef,
 *                   typeCFTypeRef, NULL, sizeof(ABPickerRef),
 *                   NULL, &outPickerRef);
 *
 */

enum {
    // Carbon Event class for People Picker
    kEventClassABPeoplePicker = 'abpp'
};

enum {
    // Carbon Event kinds for People Picker
    kEventABPeoplePickerGroupSelectionChanged     = 1,
    kEventABPeoplePickerNameSelectionChanged      = 2,
    kEventABPeoplePickerValueSelectionChanged     = 3,
    kEventABPeoplePickerDisplayedPropertyChanged  = 4,

    kEventABPeoplePickerGroupDoubleClicked        = 5,
    kEventABPeoplePickerNameDoubleClicked         = 6
};

enum {
    // Carbon Event parameter name
    kEventParamABPickerRef	=  'abpp'
};

    // Set the event handler for People Picker events.
extern void ABPickerSetDelegate(ABPickerRef inPicker, EventTargetRef inDelegate) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern EventTargetRef ABPickerGetDelegate(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

    // Clear the search field and reset the list of displayed names.
extern void ABPickerClearSearchField(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

    // Launch AddressBook and edit the current selection
extern void ABPickerEditInAddressBook(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern void ABPickerSelectInAddressBook(ABPickerRef inPicker) AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

#if defined(__cplusplus)
}
#endif

#endif

                                                                                                                                ABPeoplePickerView.h                                                                                0100644 0001750 0001750 00000012046 12567507026 035622  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABPeoplePickerView.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __ABPEOPLEPICKERVIEW__
#define __ABPEOPLEPICKERVIEW__

#import <Cocoa/Cocoa.h>

#if MAC_OS_X_VERSION_10_3 <= MAC_OS_X_VERSION_MAX_ALLOWED

typedef enum {
    ABNoValueSelection       = 0,
    ABSingleValueSelection   = 1,
    ABMultipleValueSelection = 2
} ABPeoplePickerSelectionBehavior;

@class ABRecord, ABPerson, ABGroup;


@interface ABPeoplePickerView : NSView {
@private
    id _reserved1 __unused;
    id _reserved2 __unused;
    id _reserved3 __unused;
    id _reserved4 __unused;
    id _reserved5 __unused;
    SEL    _reserved6 __unused;
    SEL    _reserved7 __unused;
    id _reserved8 __unused;
    id _reserved9 __unused;
    id _reserved10 __unused;
}

/*
 * Look and Feel
 */

// The accessory view is placed to the left of the search field. Setting to nil removes the view.
@property (nonatomic, retain) NSView* accessoryView;

// Modifies the selection behavior. Defaults to ABSingleValueSelection.
//
// ABNoValueSelection will not allow the user to select individual values.
// ABSingleValueSelection will allow the user to choose a single value for a person.
// ABMultipleValueSelection will allow the user to choose multiple values for a person.
@property (nonatomic, assign) ABPeoplePickerSelectionBehavior valueSelectionBehavior;

// Allow the user to select entire groups in the group column. If false, at least one
// person in the group will be selected. Defaults to NO.
@property (nonatomic, assign) BOOL allowsGroupSelection;

// Allow the user to select more than one group/record/value at a time. Defaults to NO.
@property (nonatomic, assign) BOOL allowsMultipleSelection;


/*
 * Value column
 */

// These methods control what data (if any) is shown in the values column. The column won't display
// if no properties are added. A popup button in the column header will be used if more than one property
// is added. Titles for built in properties will localized automatically.
- (void)addProperty:(NSString *)property;
- (void)removeProperty:(NSString *)property;
- (NSArray *)properties;

// Localized titles for third party properties should be set with these methods.
- (void)setColumnTitle:(NSString *)title forProperty:(NSString *)property;
- (NSString *)columnTitleForProperty:(NSString *)property;

// Display one of the properties added above.
@property (nonatomic, retain) NSString* displayedProperty;

/*
 * Persistence
 */

// Saves column positions and filter selection.
@property (nonatomic, retain) NSString* autosaveName;

/*
 * Selection
 */

// Returns group column selection as an array of ABGroup objects. An empty array will be
// returned if the All group is selected.
@property (readonly) NSArray* selectedGroups;

// Returns names column selection as an array of ABGroup or ABPerson objects. When unified contacts are selected,
// returns every ABPerson that owns a selected value.
@property (readonly) NSArray* selectedRecords;

// This method returns an array of selected multi-value identifiers. Returns nil if the displayed
// property is a single value type.
- (NSArray *)selectedIdentifiersForPerson:(ABPerson*)person;

// Select group/name/value programatically.
- (void)selectGroup:(ABGroup *)group byExtendingSelection:(BOOL)extend;
- (void)selectRecord:(ABRecord *)record byExtendingSelection:(BOOL)extend;
// Individual values contained within an multi-value property can be selected with this method.
- (void)selectIdentifier:(NSString *)identifier forPerson:(ABPerson *)person byExtendingSelection:(BOOL)extend;

// Remove selection
- (void)deselectGroup:(ABGroup *)group;
- (void)deselectRecord:(ABRecord *)record;
- (void)deselectIdentifier:(NSString *)identifier forPerson:(ABPerson *)person;

- (void)deselectAll:(id)sender;

/*
 * Actions
 */

// Clear the search field and reset the list of displayed names.
- (void)clearSearchField:(id)sender;

// Set target for various double click actions
@property (nonatomic, assign) id target;

// Provide an action to be invoked when the user double clicks on an item in the group column.
@property (nonatomic, assign) SEL groupDoubleAction;

// Provide an action to be invoked when the user double clicks on an item in the names column.
@property (nonatomic, assign) SEL nameDoubleAction;

@end

extern NSString * const ABPeoplePickerGroupSelectionDidChangeNotification    AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern NSString * const ABPeoplePickerNameSelectionDidChangeNotification     AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern NSString * const ABPeoplePickerValueSelectionDidChangeNotification    AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;
extern NSString * const ABPeoplePickerDisplayedPropertyDidChangeNotification AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER;

@interface ABPeoplePickerView (ABPeoplePickerConvenience)
// Returns an array of all items selected in the values column.
- (NSArray *)selectedValues;

// Launch AddressBook and edit the current selection
- (void)editInAddressBook:(id)sender;
- (void)selectInAddressBook:(id)sender;

@end

#endif

#endif // __ABPEOPLEPICKERVIEW__
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ABPerson.h                                                                                          0100644 0001750 0001750 00000007377 12567507025 033665  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABPerson.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __ABPERSON__
#define __ABPERSON__

#import <AddressBook/ABRecord.h>
#import <AddressBook/ABTypedefs.h>

@class ABSearchElement;

// ================================================================================
//      interface ABPerson
// ================================================================================
// ABPerson is a subclass of ABRecord and represents a person. See ABGlobals.h for
// a list of built-in properties.

@interface ABPerson : ABRecord

- (NSArray *)parentGroups;
    // Returns an array of ABGroup this person belongs to.
    // Returns an empty array if this person doesn't belong to any groups

- (NSArray *)linkedPeople AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER;
    // Returns an array of all linked people, including this person.
    // Returns an array of only this person if this person is not linked.

@end

// ================================================================================
//      interface ABPerson(ABPerson_Properties)
// ================================================================================
// This section deals with adding/removing properties on people

@interface ABPerson (ABPerson_Properties)

+ (NSInteger)addPropertiesAndTypes:(NSDictionary *)properties;
    // Adds properties to all people records. The dictionary must be of the form:
    //          key: property name
    //          value: property type
    // Property name must be unique
    // Returns the number of properties successfully added (-1 if an error occurred)

+ (NSInteger)removeProperties:(NSArray *)properties;
    // Removes properties from all people
    // Returns the number of properties successfully removed (-1 if an error occurred)

+ (NSArray *)properties;
    // Returns an array of property names

+ (ABPropertyType)typeOfProperty:(NSString*)property;
    // Returns the type of a given property.
    // Returns kABErrorInProperty if the property is not known
@end

// ================================================================================
//      interface ABPerson(ABPerson_Searching)
// ================================================================================
// This section deals with creating search elements to search groups

@interface ABPerson (ABPerson_Searching)
+ (ABSearchElement *)searchElementForProperty:(NSString*)property
                                        label:(NSString*)label
                                          key:(NSString*)key
                                        value:(id)value
                                   comparison:(ABSearchComparison)comparison;
    // Returns a search element that will search people
    //          property: the name of the property to search on (cannot be nil)
    //          label: for multi-value properties an optional label (can be nil)
    //          key: for dictionary values an optional key (can be nil)
    //          value: value to match (can be nil)
    //          comparison: the type of search (see ABTypedefs.h)
    //
    // if the value is nil then the only supported comparisons are kABEqual or kABNotEqual.
    // Note: Support for nil values was added to Mac OS X version 10.2.4
@end

// ================================================================================
//      interface ABPerson(ABPerson_vCard)
// ================================================================================
// This section deals with vCards

@interface ABPerson (ABPerson_vCard)
- (id)initWithVCardRepresentation:(NSData *)vCardData;
    // Create a person from a vCard
    // Returns nil if vCardData is nil or not a valid vCard

- (NSData *)vCardRepresentation;
    // Returns the vCard representation of a person
@end

#endif // __ABPERSON__
                                                                                                                                                                                                                                                                 ABPersonPicker.h                                                                                    0100644 0001750 0001750 00000002057 12567507026 035012  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  Copyright (c) 2012 Apple, Inc. All rights reserved.
//

#import <Cocoa/Cocoa.h>

#ifdef __x86_64__

@protocol ABPersonPickerDelegate;

/*!
 * @abstract ABPersonPicker is a popover-based person picker for choosing an ABPerson or ABPerson's value, such as a phone number or email address.
 */
OBJC_GC_UNAVAILABLE
@interface ABPersonPicker : NSObject

/*!
 * @abstract The ABPerson properties to display when a person is expanded.
 * @discussion If no properties are provided, the picker will select people instead of values.
 */
@property (copy) NSArray * properties;

/*!
 * @abstract The picker delegate to be notified when the user chooses a person or value.
 */
@property (assign) id<ABPersonPickerDelegate> delegate;

/*!
 * @abstract Shows the picker popover relative to a positioning rect for a view with a preferred edge. See NSPopover for more information.
 */
- (void)showRelativeToRect:(NSRect)positioningRect ofView:(NSView *)positioningView preferredEdge:(NSRectEdge)preferredEdge;

/*!
 * @abstract Closes the popover.
 */
- (void)close;

@end

#endif
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ABPersonPickerDelegate.h                                                                            0100644 0001750 0001750 00000002061 12567507026 036440  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  Copyright (c) 2012 Apple, Inc. All rights reserved.
//

#import <Foundation/Foundation.h>

@class ABPersonPicker;
@class ABPerson;

OBJC_GC_UNAVAILABLE
@protocol ABPersonPickerDelegate <NSObject>

/*!
 * @abstract Provides the ABPerson, property, and ABMultiValue identifier (if any) as chosen by the user.
 * @param picker The picker used to choose the person.
 * @param person The chosen person.
 * @param property The ABPerson property corresponding to the chosen value, e.g. kABEmailProperty.
 * @param identifier The ABMultiValue identifier. Will be nil if a non-ABMultiValue property was chosen, e.g. kABMaidenNameProperty.
 * @discussion If the person picker was used to select a person instead of a person's value, the property and identifier will be nil.
 */
- (void)personPicker:(ABPersonPicker *)picker didChoosePerson:(ABPerson *)person property:(NSString *)property identifier:(NSString *)identifier;

@optional

/*!
 * @abstract Notifies the delegate when the contact picker has closed.
 */
- (void)personPickerDidClose:(ABPersonPicker *)picker;

@end
                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ABPersonView.h                                                                                      0100644 0001750 0001750 00000003223 12567507025 034502  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABPersonView.h
//  AddressBook Framework
//
//  Copyright 2009-2014 Apple, Inc. All rights reserved.
//

#ifndef __ABPERSONVIEW__
#define __ABPERSONVIEW__

#import <Cocoa/Cocoa.h>

#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7

#import <AddressBook/ABPerson.h>

// ================================================================================
//	interface ABPersonView
// ================================================================================
// ABPersonView provides a view for displaying and editing ABPerson objects in your
// user interface.


@interface ABPersonView : NSView {
@private
	ABAddressBook *_addressBook;
    id _styleProvider;
    id _adapter;
    id _remoteView;
	id _reserved1 __unused;
    id _reserved2 __unused;
    id _reserved3 __unused;
    id _reserved4 __unused;
}

@property (assign) BOOL editing;
// A Boolean value that determines whether the receiver is in editing mode.
// When YES, ABPersonView includes additional controls to manipulate person properties.

@property (readwrite, retain) ABPerson *person;
// An ABPerson record for display.
// Raises if person originates from ABAddressBook's +sharedAddressBook.
// Person must be exist in an ABAddressBook created and manipulated on the main thread only.
// When person is nil, displays an empty selection state. 

@property (assign) BOOL shouldShowLinkedPeople AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER;
// Indicates whether the view should include information for linked contacts in addition to the set contact.
// If YES, information is included from linked contacts. If NO, only the information on this person is shown.

@end

#endif

#endif // __ABPERSONVIEW__
                                                                                                                                                                                                                                                                                                                                                                             ABRecord.h                                                                                          0100644 0001750 0001750 00000006162 12567507025 033624  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABRecord.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#ifndef __ABRECORD__
#define __ABRECORD__

#import <Foundation/Foundation.h>

@class ABAddressBook;


// ================================================================================
//	interface ABRecord
// ================================================================================
// ABRecord represents a row in the AddressBook database

@interface ABRecord : NSObject
{
@private
	id		_databaseImpl;
	id   _reserved1;
	id   _reserved2;
	id   _reserved3;
// pre leopard:
/*
    NSString            *_UIDString;
    NSMutableDictionary *_changedProperties;
    NSMutableDictionary *_temporaryCache;
    unsigned int         _hash;
*/
}

- (id)init;
	// on Mac OS X 10.5 and later equivalent to initWithAddressBook:[ABAddressBook addressBook]

- (id)initWithAddressBook:(ABAddressBook *)addressBook AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER; // designated initializer
	// Initializes the ABRecord within the given AddressBook.
	// (Prior to 10.7, contacts will be stored locally.)

- (id)valueForProperty:(NSString *)property;
    // Returns the value of a given property. The type of the value depends on the property type.
    // The retuned object is immutable (NSString not NSMutableString, ABMultiValue not ABMutableMultiValue, etc..)
    // Raises if property is nil

- (BOOL)setValue:(id)value forProperty:(NSString *)property error:(NSError**)error AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER;
    // Set the value of a given property. The type of the value must match the property type.
    // Raises if property is nil or value not of the correct type
    // Returns YES if the value was set successfully
    // When returning NO, includes additional information in error when its given value is not nil

- (BOOL)setValue:(id)value forProperty:(NSString *)property;
    // Set the value of a given property. The type of the value must match the property type.
    // Raises if property is nil or value not of the correct type
    // Returns YES if the value was set successfully

- (BOOL)removeValueForProperty:(NSString *)property;
    // Remove the value of a given property. Subsequent calls to -valueForProperty on the same
    // property will return nil.
    // Raises if property is nil
    // Returns YES if the value was removed successfully

- (BOOL)isReadOnly AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER;
    // Returns whether or not the record is read only.

@end

// ================================================================================
//	interface ABRecord(ABRecord_Convenience)
// ================================================================================

@interface ABRecord(ABRecord_Convenience)

@property (readonly, copy) NSString * uniqueId;
    // Convenience method to return the unique ID of a record.
    // Equivalent to -valueForProperty:kABUIDProperty

@property (readonly, copy) NSString * displayName AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER;
    // Returns a formatted name suitable for displaying to the user.
    // The return value is only defined for ABPerson and ABGroup.

@end

#endif // __ABRECORD__
                                                                                                                                                                                                                                                                                                                                                                                                              ABSearchElement.h                                                                                   0100644 0001750 0001750 00000002206 12567507025 035120  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  ABSearchElement.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2014 Apple Inc.  All rights reserved.
//

#ifndef __ABSEARCHELEMENT__
#define __ABSEARCHELEMENT__

#import <Foundation/Foundation.h>

#import <AddressBook/ABTypedefs.h>
#import <AddressBook/ABGlobals.h>

@class ABRecord;

// ================================================================================
//	interface ABSearchElement : NSObject
// ================================================================================
// Use -[ABPerson searchElementForProperty:...] and -[ABGroup searchElementForProperty:...] to create
// search elements on ABPerson and ABGroup.

@interface ABSearchElement : NSObject

+ (ABSearchElement *)searchElementForConjunction:(ABSearchConjunction)conjuction children:(NSArray *)children;
    // Creates a search element combining several sub search elements.
    // conjunction can be kABSearchAnd or kABSearchOr.
    // Raises if children is nil or empty

- (BOOL)matchesRecord:(ABRecord *)record;
    // Given a record returns YES if this record matches the search element
    // Raises if record is nil
@end

#endif // __ABSEARCHELEMENT__
                                                                                                                                                                                                                                                                                                                                                                                          ABTypedefs.h                                                                                        0100644 0001750 0001750 00000005706 12567507025 034174  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 /*
 *  ABTypedefs.h
 *  AddressBook Framework
 *
 *  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
 *
 */

#ifndef __ABTYPEDEFS__
#define __ABTYPEDEFS__

#include <CoreFoundation/CoreFoundation.h>

// These typedefs are CFIndexes rather then NSIntegers because
// they're used in the C API as well as the Obj-C one.

// ================================================================
//      Property Type
// ================================================================

#define kABMultiValueMask        0x100

enum _ABPropertyType {
    kABErrorInProperty           = 0x0,
    kABStringProperty            = 0x1,
    kABIntegerProperty           = 0x2,
    kABRealProperty              = 0x3,
    kABDateProperty              = 0x4,
    kABArrayProperty             = 0x5,
    kABDictionaryProperty        = 0x6,
    kABDataProperty              = 0x7,
#if MAC_OS_X_VERSION_10_7 <= MAC_OS_X_VERSION_MAX_ALLOWED
	kABDateComponentsProperty    = 0x8,
#endif
    kABMultiStringProperty       = kABMultiValueMask | kABStringProperty,
    kABMultiIntegerProperty      = kABMultiValueMask | kABIntegerProperty,
    kABMultiRealProperty         = kABMultiValueMask | kABRealProperty,
    kABMultiDateProperty         = kABMultiValueMask | kABDateProperty,
    kABMultiArrayProperty        = kABMultiValueMask | kABArrayProperty,
    kABMultiDictionaryProperty   = kABMultiValueMask | kABDictionaryProperty,
    kABMultiDataProperty         = kABMultiValueMask | kABDataProperty,
#if MAC_OS_X_VERSION_10_7 <= MAC_OS_X_VERSION_MAX_ALLOWED
	kABMultiDateComponentsProperty = kABMultiValueMask | kABDateComponentsProperty
#endif
};
typedef CFIndex ABPropertyType;

// ================================================================
//      Search APIs
// ================================================================

enum _ABSearchComparison {
        kABEqual,
        kABNotEqual,
        kABLessThan,
        kABLessThanOrEqual,
        kABGreaterThan,
        kABGreaterThanOrEqual,

        kABEqualCaseInsensitive,
        kABContainsSubString,
        kABContainsSubStringCaseInsensitive,
        kABPrefixMatch,
        kABPrefixMatchCaseInsensitive,
#if MAC_OS_X_VERSION_10_3 <= MAC_OS_X_VERSION_MAX_ALLOWED
        kABBitsInBitFieldMatch,
#endif
#if MAC_OS_X_VERSION_10_4 <= MAC_OS_X_VERSION_MAX_ALLOWED
        kABDoesNotContainSubString,
        kABDoesNotContainSubStringCaseInsensitive,
        kABNotEqualCaseInsensitive,
        kABSuffixMatch,
        kABSuffixMatchCaseInsensitive,
        kABWithinIntervalAroundToday,
        kABWithinIntervalAroundTodayYearless,
        kABNotWithinIntervalAroundToday,
        kABNotWithinIntervalAroundTodayYearless,
        kABWithinIntervalFromToday,
        kABWithinIntervalFromTodayYearless,
        kABNotWithinIntervalFromToday,
        kABNotWithinIntervalFromTodayYearless
#endif
};
typedef CFIndex ABSearchComparison;

enum _ABSearchConjunction {
        kABSearchAnd,
        kABSearchOr
};
typedef CFIndex ABSearchConjunction;


#endif
                                                          AddressBook.h                                                                                       0100644 0001750 0001750 00000001300 12567507025 034370  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  AddressBook.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#if __OBJC__

#if defined(__cplusplus)
extern "C" {
#endif

    #import <AddressBook/ABTypedefs.h>
    #import <AddressBook/ABGlobals.h>
    #import <AddressBook/ABAddressBook.h>
    #import <AddressBook/ABRecord.h>
    #import <AddressBook/ABGroup.h>
    #import <AddressBook/ABPerson.h>
    #import <AddressBook/ABImageLoading.h>
    #import <AddressBook/ABSearchElement.h>
    #import <AddressBook/ABMultiValue.h>
#if defined(__cplusplus)
}
#endif
#else
    #include <AddressBook/ABTypedefs.h>
    #include <AddressBook/ABGlobalsC.h>
    #include <AddressBook/ABAddressBookC.h>
#endif

                                                                                                                                                                                                                                                                                                                                AddressBookUI.h                                                                                     0100644 0001750 0001750 00000000763 12567507026 034643  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Headers                                                                 //
//  AddressBookUI.h
//  AddressBook Framework
//
//  Copyright (c) 2003-2007 Apple Inc.  All rights reserved.
//

#if __OBJC__
#if defined(__cplusplus)
extern "C" {
#endif
    #import <AddressBook/ABPeoplePickerView.h>
#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
    #import <AddressBook/ABPersonView.h>
#endif
    #import <AddressBook/ABActions.h>
#if defined(__cplusplus)
}
#endif
#else
    #include <AddressBook/ABPeoplePickerC.h>
    #include <AddressBook/ABActionsC.h>
#endif

             Modules/                                                                                            0040755 0001750 0001750 00000000000 12612224736 032061  5                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A                                                                         module.modulemap                                                                                    0100644 0001750 0001750 00000003266 12567507307 035266  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/A/Modules                                                                 framework module AddressBook [extern_c] {
  umbrella header "AddressBook.h"

  export *
  module * { export * }

  module ABTypedefs {
    header "ABTypedefs.h"
    export *
  }

  module ObjectiveC {
    requires objc
    export *

    explicit module ABActions {
      header "ABActions.h"
      export *
    }

    module ABAddressBook {
      header "ABAddressBook.h"
      export *
    }

    module ABGlobals {
        header "ABGlobals.h"
        export *
    }

    module ABRecord {
      header "ABRecord.h"
      export *
    }

    module ABGroup {
      header "ABGroup.h"
      export *
    }

    module ABPerson {
      header "ABPerson.h"
      export *
    }

    explicit module ABPeoplePickerView {
      header "ABPeoplePickerView.h"
      export *
    }

    explicit module ABPersonView {
      header "ABPersonView.h"
      export *
    }

    module ABImageLoading {
      header "ABImageLoading.h"
      export *
    }

    explicit module ABPersonPicker {
      header "ABPersonPicker.h"
      export *
    }

    explicit module ABPersonPickerDelegate {
      header "ABPersonPickerDelegate.h"
      export *
    }

    module ABSearchElement {
      header "ABSearchElement.h"
      export *
    }

    module ABMultiValue {
      header "ABMultiValue.h"
      export *
    }
  }

  module C {
    explicit module ABActions {
      header "ABActionsC.h"
      export *
    }

    module ABAddressBook {
      header "ABAddressBookC.h"
      export *
    }

    module ABGlobals {
      header "ABGlobalsC.h"
      export *
    }

    explicit module ABPeoplePicker {
      header "ABPeoplePickerC.h"
      export *
    }
  }

  module UI {
    header "AddressBookUI.h"
    export *
  }
}

                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/Versions/Current0120777 0001750 0001750 00000000000 12620245063 032007  2A                                                                                                   ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AddressBook.framework/module.map      0100644 0001750 0001750 00000003155 12566173264 030534  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        framework module AddressBook [extern_c] {
  umbrella header "AddressBook.h"

  export *
  module * { export * }

  module ABTypedefs {
    header "ABTypedefs.h"
    export *
  }

  
  module ObjectiveC {
    requires objc
    export *

    explicit module ABActions {
      header "ABActions.h"
      export *
    }

    module ABAddressBook {
      header "ABAddressBook.h"
      export *
    }

    module ABRecord {
      header "ABRecord.h"
      export *
    }

    module ABGroup {
      header "ABGroup.h"
      export *
    }

    module ABPerson {
      header "ABPerson.h"
      export *
    }

    explicit module ABPeoplePickerView {
      header "ABPeoplePickerView.h"
      export *
    }

    explicit module ABPersonView {
      header "ABPersonView.h"
      export *
    }

    module ABImageLoading {
      header "ABImageLoading.h"
      export *
    }

    explicit module ABPersonPicker {
      header "ABPersonPicker.h"
      export *
    }

    explicit module ABPersonPickerDelegate {
      header "ABPersonPickerDelegate.h"
      export *
    }

    module ABSearchElement {
      header "ABSearchElement.h"
      export *
    }

    module ABMultiValue {
      header "ABMultiValue.h"
      export *
    }
  }

  module C {
    explicit module ABActions {
      header "ABActionsC.h"
      export *
    }

    module ABAddressBook {
      header "ABAddressBookC.h"
      export *
    }

    module ABGlobals {
      header "ABGlobalsC.h"
      export *
    }

    explicit module ABPeoplePicker {
      header "ABPeoplePickerC.h"
      export *
    }
  }

  module UI {
    header "AddressBookUI.h"
    export *
  }
}

                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AppKit.framework/                     0040755 0001750 0001750 00000000000 12612224737 025531  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AppKit.framework/AppKit.tbd           0120777 0001750 0001750 00000000000 12620245063 034517  2Versions/Current/AppKit.tbd                                                                         ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AppKit.framework/Headers              0120777 0001750 0001750 00000000000 12620245063 033545  2Versions/Current/Headers                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AppKit.framework/Modules              0120777 0001750 0001750 00000000000 12620245063 033637  2Versions/Current/Modules                                                                            ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AppKit.framework/Versions/            0040755 0001750 0001750 00000000000 12612224737 027341  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AppKit.framework/Versions/C/          0040755 0001750 0001750 00000000000 12612224737 027523  5                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/System/Library/Frameworks/AppKit.framework/Versions/C/AppKit.tbd0100644 0001750 0001750 00001064235 12571375061 031417  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        ---
archs:           [ i386, x86_64 ]
platform:        macosx
install-name:    /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit
current-version: 1404.0
compatibility-version: 45.0
exports:         
  - archs:           [ i386 ]
    symbols:         [ '$ld$add$os10.4$.objc_class_name_NSFileWrapper', 
                       '$ld$add$os10.4$.objc_class_name_NSLayoutConstraint', 
                       '$ld$add$os10.4$__NSDictionaryOfVariableBindings', 
                       '$ld$add$os10.5$.objc_class_name_NSFileWrapper', 
                       '$ld$add$os10.5$.objc_class_name_NSLayoutConstraint', 
                       '$ld$add$os10.6$.objc_class_name_NSFileWrapper', 
                       '$ld$add$os10.6$.objc_class_name_NSLayoutConstraint', 
                       '$ld$add$os10.7$.objc_class_name_NSLayoutConstraint', 
                       _DPSAllocUserObjectLock, _DPSArg1ExceptionUserInfo, 
                       _DPSCantConnectException, _DPSConnectionClosedException, 
                       _DPSContextExceptionInfo, _DPSDefineUserObject, 
                       _DPSGetCurrentContext, _DPSHostName, _DPSInvalidContextException, 
                       _DPSInvalidFDException, _DPSInvalidPortException, 
                       _DPSInvalidTEException, _DPSNameFromTypeAndIndex, 
                       _DPSNameTooLongException, _DPSNextUserObject, _DPSOutOfMemoryException, 
                       _DPSPostscriptErrorException, _DPSReadException, 
                       _DPSResultTagCheckException, _DPSResultTypeCheckException, 
                       _DPSSelectException, _DPSUndefineUserObject, _DPSWriteException, 
                       _DPSgrestore, _DPSgsave, _NSAFMAscender, _NSAFMBlockCountHandle, 
                       _NSAFMBoundsHandle, _NSAFMBoxPointers, _NSAFMCapHeight, 
                       _NSAFMCharWidth, _NSAFMCharacterSet, _NSAFMCharacters, 
                       _NSAFMDescender, _NSAFMEncodingBlockname, _NSAFMEncodingScheme, 
                       _NSAFMEscChar, _NSAFMFamilyName, _NSAFMFontName, 
                       _NSAFMFormatVersion, _NSAFMFullName, _NSAFMGlyphBoundingBoxHandle, 
                       _NSAFMIsBaseFont, _NSAFMIsFixedPitch, _NSAFMIsFixedV, 
                       _NSAFMIsScreenFont, _NSAFMItalicAngle, _NSAFMMappingScheme, 
                       _NSAFMMetricsSets, _NSAFMMiscFields, _NSAFMNameArray, 
                       _NSAFMNameToEncodingArray, _NSAFMNextFontClassification, 
                       _NSAFMNotClassified, _NSAFMNotice, _NSAFMPanoseNumber, 
                       _NSAFMScreenFontSize, _NSAFMUnderlinePosition, _NSAFMUnderlineThickness, 
                       _NSAFMVVectorX, _NSAFMVVectorY, _NSAFMVersion, _NSAFMWeight, 
                       _NSAFMXHeight, _NSAccessibilityCarbonControlViewParentPropertyTag, 
                       _NSAppleMenuCustomItemNameKey, _NSAppleMenuDomainExtension, 
                       _NSAppleMenuDomainName, _NSAppleMenuDynamicSubmenuDomainKey, 
                       _NSAppleMenuDynamicSubmenuKeyKey, _NSAppleMenuItemDictionaries, 
                       _NSAppleMenuItemImageKey, _NSAppleMenuItemNameKey, 
                       _NSAppleMenuItemPathKey, _NSAppleMenuItemPositionPreferenceKey, 
                       _NSAppleMenuItemRemainAtEnd, _NSAppleMenuItemTypeDynamicSubmenu, 
                       _NSAppleMenuItemTypeFileSystemObject, _NSAppleMenuItemTypeItemReference, 
                       _NSAppleMenuItemTypeKey, _NSAppleMenuItemTypeReference, 
                       _NSAppleMenuItemTypeSeparator, _NSAppleMenuItemUniqueIdentifierKey, 
                       _NSAppleMenuItemsBundleExtension, _NSAppleMenuItemsFileExtension, 
                       _NSAppleMenuItemsFilename, _NSAppleMenuItemsKey, 
                       _NSAppleMenuItemsStringsTableExtension, _NSAppleMenuItemsStringsTableName, 
                       _NSAppleMenuLibraryDirectory, _NSAppleMenuLockFilename, 
                       _NSAppleMenuOpenWithApplicationKey, _NSAppleMenuReferenceItems, 
                       _NSAppleMenuReferenceItemsByIdentifier, _NSAppleMenuReferenceItemsKey, 
                       _NSAppleMenuSubmenuKey, _NSAppleMenuTitle, _NSBasicGlyphMetricsBlockname, 
                       _NSComposedGlyphMetricsBlockname, _NSCurrentCharInCanonicalStringBuffer, 
                       _NSDPSRunLoopMode, _NSDoubleNonspacingPlacementMetricsBlockname, 
                       _NSGeneralizedNonspacingPlacementMetricsBlockname, 
                       _NSGlyphGeneratorSetCoversCharacter, _NSInitCanonicalStringBuffer, 
                       _NSIsAtEndOfCanonicalStringBuffer, _NSKerningPairMetricsBlockname, 
                       _NSNextCharInCanonicalStringBuffer, _NSPairPositionMetricsBlockname, 
                       _NSTextFontInfo, _NSTrackKerningRecordBlockname, 
                       _NSUngetCharInCanonicalStringBuffer, _NXContainsRect, 
                       _NXDivideRect, _NXEmptyRect, _NXEqualRect, _NXInsetRect, 
                       _NXIntegralRect, _NXIntersectionRect, _NXIntersectsRect, 
                       _NXMouseInRect, _NXOffsetRect, _NXPointInRect, _NXSetRect, 
                       _NXUnionRect, _PSFlush, _PSFontDirectory, _PSGlobalFontDirectory, 
                       _PSISOLatin1Encoding, _PSSharedFontDirectory, _PSStandardEncoding, 
                       _PSWait, _PSabs, _PSadd, _PSadjustcursor, _PSadjustmouse, 
                       _PSaload, _PSalphaimage, _PSanchorsearch, _PSand, 
                       _PSarc, _PSarcn, _PSarct, _PSarcto, _PSarray, _PSashow, 
                       _PSastore, _PSatan, _PSawidthshow, _PSbanddevice, 
                       _PSbasetocurrent, _PSbasetoscreen, _PSbegin, _PSbind, 
                       _PSbitshift, _PSbuttondown, _PSbytesavailable, _PScachestatus, 
                       _PSceiling, _PScharpath, _PSclear, _PScleardictstack, 
                       _PScleartomark, _PScleartrackingrect, _PSclip, _PSclippath, 
                       _PSclosefile, _PSclosepath, _PScolorimage, _PScomposite, 
                       _PScompositerect, _PSconcat, _PScondition, _PScopy, 
                       _PScopypage, _PScos, _PScount, _PScountdictstack, 
                       _PScountexecstack, _PScountframebuffers, _PScountscreenlist, 
                       _PScounttomark, _PScountwindowlist, _PScshow, _PScurrentactiveapp, 
                       _PScurrentalpha, _PScurrentblackgeneration, _PScurrentcacheparams, 
                       _PScurrentcmykcolor, _PScurrentcolor, _PScurrentcolorrendering, 
                       _PScurrentcolorscreen, _PScurrentcolorspace, _PScurrentcolortransfer, 
                       _PScurrentcontext, _PScurrentdash, _PScurrentdefaultdepthlimit, 
                       _PScurrentdeviceinfo, _PScurrentdevparams, _PScurrentdict, 
                       _PScurrenteventmask, _PScurrentfile, _PScurrentflat, 
                       _PScurrentfont, _PScurrentframebuffertransfer, _PScurrentglobal, 
                       _PScurrentgray, _PScurrentgstate, _PScurrenthalftone, 
                       _PScurrenthalftonephase, _PScurrenthsbcolor, _PScurrentlinecap, 
                       _PScurrentlinejoin, _PScurrentlinewidth, _PScurrentmatrix, 
                       _PScurrentmiterlimit, _PScurrentmouse, _PScurrentobjectformat, 
                       _PScurrentoverprint, _PScurrentowner, _PScurrentpacking, 
                       _PScurrentpagedevice, _PScurrentpoint, _PScurrentrgbcolor, 
                       _PScurrentrusage, _PScurrentscreen, _PScurrentshared, 
                       _PScurrentshowpageprocedure, _PScurrentstrokeadjust, 
                       _PScurrentsystemparams, _PScurrenttobase, _PScurrenttoscreen, 
                       _PScurrenttransfer, _PScurrentundercolorremoval, 
                       _PScurrentuser, _PScurrentuserparams, _PScurrentwaitcursorenabled, 
                       _PScurrentwindow, _PScurrentwindowalpha, _PScurrentwindowbounds, 
                       _PScurrentwindowdepth, _PScurrentwindowdepthlimit, 
                       _PScurrentwindowlevel, _PScurrentwriteblock, _PScurveto, 
                       _PScvi, _PScvlit, _PScvn, _PScvr, _PScvrs, _PScvs, 
                       _PScvx, _PSdef, _PSdefaultmatrix, _PSdefinefont, 
                       _PSdefineresource, _PSdefineusername, _PSdefineuserobject, 
                       _PSdeletefile, _PSdetach, _PSdeviceinfo, _PSdict, 
                       _PSdictstack, _PSdissolve, _PSdiv, _PSdtransform, 
                       _PSdumpwindow, _PSdumpwindows, _PSdup, _PSecho, 
                       _PSend, _PSeoclip, _PSeofill, _PSeoviewclip, _PSeq, 
                       _PSequals, _PSequalsequals, _PSerasepage, _PSerrordict, 
                       _PSexch, _PSexec, _PSexecform, _PSexecstack, _PSexecuserobject, 
                       _PSexecuteonly, _PSexit, _PSexp, _PSfalse, _PSfile, 
                       _PSfilenameforall, _PSfileposition, _PSfill, _PSfilter, 
                       _PSfindencoding, _PSfindfont, _PSfindresource, _PSfindwindow, 
                       _PSflattenpath, _PSfloor, _PSflush, _PSflushgraphics, 
                       _PSfor, _PSforall, _PSfork, _PSframebuffer, _PSframedevice, 
                       _PSfrontwindow, _PSgcheck, _PSge, _PSget, _PSgetboolean, 
                       _PSgetchararray, _PSgetfloat, _PSgetfloatarray, 
                       _PSgetint, _PSgetintarray, _PSgetinterval, _PSgetstring, 
                       _PSglobaldict, _PSglyphshow, _PSgrestore, _PSgrestoreall, 
                       _PSgsave, _PSgstate, _PSgt, _PShidecursor, _PShideinstance, 
                       _PSidentmatrix, _PSidiv, _PSidtransform, _PSif, 
                       _PSifelse, _PSimage, _PSimagemask, _PSindex, _PSineofill, 
                       _PSinfill, _PSinitclip, _PSiniteventtimes, _PSinitgraphics, 
                       _PSinitmatrix, _PSinitviewclip, _PSinstroke, _PSinueofill, 
                       _PSinufill, _PSinustroke, _PSinvertmatrix, _PSitransform, 
                       _PSjoin, _PSknown, _PSkshow, _PSlanguagelevel, _PSle, 
                       _PSleftbracket, _PSleftleft, _PSlength, _PSlineto, 
                       _PSln, _PSload, _PSlock, _PSlog, _PSloop, _PSlt, 
                       _PSmachportdevice, _PSmakefont, _PSmakepattern, 
                       _PSmark, _PSmatrix, _PSmaxlength, _PSmod, _PSmonitor, 
                       _PSmoveto, _PSmovewindow, _PSmul, _PSne, _PSneg, 
                       _PSnewinstance, _PSnewpath, _PSnextrelease, _PSnoaccess, 
                       _PSnot, _PSnotify, _PSnull, _PSnulldevice, _PSobscurecursor, 
                       _PSor, _PSorderwindow, _PSosname, _PSostype, _PSpackedarray, 
                       _PSpathbbox, _PSpathforall, _PSplacewindow, _PSplaysound, 
                       _PSpop, _PSposteventbycontext, _PSprint, _PSprinteventtimes, 
                       _PSprintobject, _PSproduct, _PSprompt, _PSpstack, 
                       _PSput, _PSputinterval, _PSquit, _PSrand, _PSrcheck, 
                       _PSrcurveto, _PSread, _PSreadhexstring, _PSreadimage, 
                       _PSreadline, _PSreadonly, _PSreadstring, _PSrealtime, 
                       _PSrectclip, _PSrectfill, _PSrectstroke, _PSrectviewclip, 
                       _PSrenamefile, _PSrenderbands, _PSrepeat, _PSresetfile, 
                       _PSresourceforall, _PSresourcestatus, _PSrestore, 
                       _PSrevealcursor, _PSreversepath, _PSrevision, _PSrightbracket, 
                       _PSrightbuttondown, _PSrightright, _PSrightstilldown, 
                       _PSrlineto, _PSrmoveto, _PSroll, _PSrootfont, _PSrotate, 
                       _PSround, _PSrrand, _PSrun, _PSsave, _PSscale, _PSscheck, 
                       _PSscreenlist, _PSscreentobase, _PSscreentocurrent, 
                       _PSsearch, _PSselectfont, _PSsendboolean, _PSsendchararray, 
                       _PSsendfloat, _PSsendfloatarray, _PSsendint, _PSsendstring, 
                       _PSserialnumber, _PSsetactiveapp, _PSsetalpha, _PSsetautofill, 
                       _PSsetbbox, _PSsetblackgeneration, _PSsetcachedevice, 
                       _PSsetcachelimit, _PSsetcacheparams, _PSsetcharwidth, 
                       _PSsetcmykcolor, _PSsetcolor, _PSsetcolorrendering, 
                       _PSsetcolorscreen, _PSsetcolorspace, _PSsetcolortransfer, 
                       _PSsetcursor, _PSsetdash, _PSsetdefaultdepthlimit, 
                       _PSsetdevparams, _PSseteventmask, _PSsetexposurecolor, 
                       _PSsetfileposition, _PSsetflat, _PSsetflushexposures, 
                       _PSsetfont, _PSsetframebuffertransfer, _PSsetglobal, 
                       _PSsetgray, _PSsetgstate, _PSsethalftone, _PSsethalftonephase, 
                       _PSsethsbcolor, _PSsetinstance, _PSsetlinecap, _PSsetlinejoin, 
                       _PSsetlinewidth, _PSsetmatrix, _PSsetmiterlimit, 
                       _PSsetmouse, _PSsetobjectformat, _PSsetoverprint, 
                       _PSsetowner, _PSsetpacking, _PSsetpagedevice, _PSsetpattern, 
                       _PSsetrgbcolor, _PSsetscreen, _PSsetsendexposed, 
                       _PSsetshared, _PSsetshowpageprocedure, _PSsetstrokeadjust, 
                       _PSsetsystemparams, _PSsettrackingrect, _PSsettransfer, 
                       _PSsetucacheparams, _PSsetundercolorremoval, _PSsetuserparams, 
                       _PSsetvmthreshold, _PSsetwaitcursorenabled, _PSsetwindowdepthlimit, 
                       _PSsetwindowdict, _PSsetwindowlevel, _PSsetwindowtype, 
                       _PSsetwriteblock, _PSshareddict, _PSshow, _PSshowcursor, 
                       _PSshowpage, _PSsin, _PSsizeimage, _PSsqrt, _PSsrand, 
                       _PSstack, _PSstart, _PSstartjob, _PSstatus, _PSstatusdict, 
                       _PSstilldown, _PSstop, _PSstopped, _PSstore, _PSstring, 
                       _PSstringwidth, _PSstroke, _PSstrokepath, _PSsub, 
                       _PSsystemdict, _PStermwindow, _PStoken, _PStransform, 
                       _PStranslate, _PStrue, _PStruncate, _PStype, _PSuappend, 
                       _PSucache, _PSueofill, _PSufill, _PSundef, _PSundefinefont, 
                       _PSundefineresource, _PSundefineuserobject, _PSupath, 
                       _PSuserdict, _PSuserobject, _PSusertime, _PSustroke, 
                       _PSustrokepath, _PSversion, _PSviewclip, _PSviewclippath, 
                       _PSvmreclaim, _PSvmstatus, _PSwait, _PSwcheck, _PSwhere, 
                       _PSwidthshow, _PSwindow, _PSwindowdevice, _PSwindowdeviceround, 
                       _PSwindowlist, _PSwrite, _PSwritehexstring, _PSwriteobject, 
                       _PSwritestring, _PSwtranslation, _PSxcheck, _PSxor, 
                       _PSxshow, _PSxyshow, _PSyield, _PSyshow, __DPSCMYKAdjust, 
                       __DPSConvertMaskToEventTypeList, __DPSEventQ, __DPSEventTracingOn, 
                       __DPSEventsTraced, __DPSInAwaitReturnValues, __DPSLastEvent, 
                       __DPSLastNameIndex, __DPSNextEvent, __DPSOutputContexts, 
                       __DPSPmonFiller, __DPSSetEventsTraced, __DPSTraceMessages, 
                       __DPSTracking, __DPSUnused1, __DPSUnused2, __DPSUnused3, 
                       __NSAccessibilityChildrenOfCarbonElement, __NSAccessibilityReparentCarbonControl, 
                       __NSAddMenuBarItems, __NSAdjustForNoMenuBar, __NSAppKitWinOrderingLock, 
                       __NSAppKitWinOrderingUnlock, __NSCanCreateEightBitMeshedBitmap, 
                       __NSCheckForMenuCancelEvent, __NSCreateAppKitServicesMenu, 
                       __NSCreateCarbonMenuBar, __NSCreateEightBitMeshedBitmap, 
                       __NSCreateImageRefFromJPEGData, __NSDeallocateAppContext, 
                       __NSEnterFullScreenTransitionForCarbonWindow, __NSExitFullScreenTransitionForCarbonWindow, 
                       __NSFlushCacheWindow, __NSFont_flippedMatrix, __NSFont_identityMatrix, 
                       __NSFullScreenDisplayChangedForMissionControlMoveOfCarbonWindow, 
                       __NSFullScreenForCarbonWindowDisplayChanged, __NSFullScreenWindowTransitionState, 
                       __NSHandleCarbonMenuEvent, __NSHandleCarbonMenuKeyboardUI, 
                       __NSHighlightCarbonMenu, __NSInitializeAppContext, 
                       __NSIsMenuBarVisible, __NSMenuBarHeight, __NSMovieFromValue, 
                       __NSNavCompleteSave, __NSNavCreateAskDiscardChangesDialog, 
                       __NSNavCreateAskReviewDocumentsDialog, __NSNavCreateAskSaveChangesDialog, 
                       __NSNavCreateChooseFileDialog, __NSNavCreateChooseFolderDialog, 
                       __NSNavCreateChooseObjectDialog, __NSNavCreateChooseVolumeDialog, 
                       __NSNavCreateGetFileDialog, __NSNavCreateNewFolderDialog, 
                       __NSNavCreatePutFileDialog, __NSNavCustomControl, 
                       __NSNavDialogDispose, __NSNavDialogGetReply, __NSNavDialogGetSaveFileExtensionHidden, 
                       __NSNavDialogGetSaveFileName, __NSNavDialogGetUserAction, 
                       __NSNavDialogGetWindow, __NSNavDialogRun, __NSNavDialogSetFilterTypeIdentifiers, 
                       __NSNavDialogSetSaveFileExtensionHidden, __NSNavDialogSetSaveFileName, 
                       __NSNavDisposeReply, __NSNavGetDefaultDialogCreationOptions, 
                       __NSNewDataOnImage, __NSPlaceWindow, __NSRemoveMenuBarItems, 
                       __NSRulebookPropertyTableAtIndex, __NSScrollViewRubberbandingForScrollView, 
                       __NSSetAppleMenuEnabled, __NSSetCursor, __NSSetMenuBarVisible, 
                       __NSShapeWindowForTearOffMenu, __NSTempDir, __NSTrailingAccentForLatinA, 
                       __NSUnhighlightCarbonMenu, __NSUpdateMenuRefWithAddedMenuItem, 
                       __NSUpdateMenuRefWithChangedDelegate, __NSUpdateMenuRefWithChangedMenuItem, 
                       __NSUpdateMenuRefWithRemovedMenuItem, __NSValidateBitmapParams, 
                       __NS_ClearMovieSelection, __NS_CloseMovieFile, __NS_CopyMovieSelection, 
                       __NS_CutMovieSelection, __NS_DataHSetMacOSFileType, 
                       __NS_DisposeMovie, __NS_DisposeMovieController, 
                       __NS_DisposeMovieEditState, __NS_EnterMovies, __NS_GetGraphicsImporterForDataRef, 
                       __NS_GetMediaHandlerDescription, __NS_GetMovieBox, 
                       __NS_GetMovieDisplayClipRgn, __NS_GetMovieDuration, 
                       __NS_GetMovieGWorld, __NS_GetMovieIndTrack, __NS_GetMovieIndTrackType, 
                       __NS_GetMovieNaturalBoundsRect, __NS_GetMoviePosterTime, 
                       __NS_GetMoviePreferredRate, __NS_GetMoviePreferredVolume, 
                       __NS_GetMovieRate, __NS_GetMovieSelection, __NS_GetMovieTime, 
                       __NS_GetMovieTimeBase, __NS_GetMovieTimeScale, __NS_GetMovieTrackCount, 
                       __NS_GetMovieUserData, __NS_GetMovieVolume, __NS_GetMoviesError, 
                       __NS_GetTrackMedia, __NS_GetUserDataItem, __NS_GoToBeginningOfMovie, 
                       __NS_GoToEndOfMovie, __NS_GraphicsExportDoExport, 
                       __NS_GraphicsExportSetInputGraphicsImporter, __NS_GraphicsExportSetOutputHandle, 
                       __NS_HasMovieChanged, __NS_MCActivate, __NS_MCClear, 
                       __NS_MCCopy, __NS_MCCut, __NS_MCDoAction, __NS_MCDraw, 
                       __NS_MCEnableEditing, __NS_MCGetClip, __NS_MCGetControllerBoundsRect, 
                       __NS_MCGetControllerInfo, __NS_MCGetControllerPort, 
                       __NS_MCIdle, __NS_MCIsControllerAttached, __NS_MCIsPlayerEvent, 
                       __NS_MCPaste, __NS_MCSetClip, __NS_MCSetControllerAttached, 
                       __NS_MCSetControllerBoundsRect, __NS_MCSetControllerPort, 
                       __NS_MCSetVisible, __NS_MCUndo, __NS_MoviesTask, 
                       __NS_NewMovieController, __NS_NewMovieEditState, 
                       __NS_NewMovieFromDataRef, __NS_NewMovieFromFile, 
                       __NS_NewMovieFromHandle, __NS_NewMovieFromScrap, 
                       __NS_OpenADataHandler, __NS_OpenMovieFile, __NS_PasteMovieSelection, 
                       __NS_PrePrerollMovie, __NS_PrerollMovie, __NS_PutMovieIntoHandle, 
                       __NS_PutMovieOnScrap, __NS_QTAudioContextCreateForAudioDevice, 
                       __NS_QTGetMovieProperty, __NS_QTGetMoviePropertyInfo, 
                       __NS_QTGetTimeUntilNextTask, __NS_QTInstallNextTaskNeededSoonerCallback, 
                       __NS_QTNewGWorld, __NS_QTSetMovieProperty, __NS_QTUninstallNextTaskNeededSoonerCallback, 
                       __NS_SetMovieActive, __NS_SetMovieAudioContext, 
                       __NS_SetMovieBox, __NS_SetMovieCoverProcs, __NS_SetMovieDisplayClipRgn, 
                       __NS_SetMovieGWorld, __NS_SetMoviePlayHints, __NS_SetMovieRate, 
                       __NS_SetMovieSelection, __NS_SetMovieTime, __NS_SetMovieVisualContext, 
                       __NS_SetMovieVolume, __NS_SetTimeBaseFlags, __NS_StartMovie, 
                       __NS_StopMovie, __NS_UpdateMovie, __NS_UseMovieEditState, 
                       __NXActivateNextApp, __NXActivateSelf, __NXAllocateImageCache, 
                       __NXAppZone, __NXBlockWindowOrdering, __NXCanInitImageFromPasteboard, 
                       __NXCanResetSecurityLevel, __NXClearTrackingRect, 
                       __NXClearTrackingRects, __NXCompositeFromGlobalWin, 
                       __NXCoverRect, __NXCreateWindow, __NXDeactivateSelf, 
                       __NXDefaultScreenRect, __NXDefaultWindowDepthLimit, 
                       __NXDefineAndSetFont, __NXDefineAndSetFontWithFlipIdentMatrix, 
                       __NXDefineAndSetFontWithIdentMatrix, __NXDisableUpdate, 
                       __NXDiscardCursorRect, __NXDoDeferredWindowOrdering, 
                       __NXDoMouseUpWindowOrdering, __NXEditTextCell, __NXEnableIEEEInvalidFPTrap, 
                       __NXExecDetached, __NXExecDetachedNoNXHost, __NXFindSharedKitImage, 
                       __NXFinishActivation, __NXFlushGraphics, __NXFocus, 
                       __NXFreeImageCache, __NXGetButtonParam, __NXGetCMYKAdjustParamsFromPostScript, 
                       __NXGetCellParam, __NXGetDepthLimitOfCurrentWindow, 
                       __NXGetFocus, __NXGetIconFrame, __NXGetPackagesVersion, 
                       __NXGetScreenInfo, __NXGetWinAndOrigin, __NXHSBToRGB, 
                       __NXHideOtherApps, __NXHostName, __NXIndexToCursorRect, 
                       __NXInitGState, __NXInitImageFromPasteboard, __NXIsActiveApp, 
                       __NXIsBackgroundOnly, __NXIsHiddenOnLaunch, __NXLayoutRectForScreen, 
                       __NXLayoutWindowInScreen, __NXLayoutWindowRect, 
                       __NXLoadNib, __NXLoadNibPanel, __NXLoadNibPanelInZone, 
                       __NXLoadWindowPackages, __NXMagnifyColors, __NXMakeEightBitMeshed, 
                       __NXMakeWindowVisible, __NXMoveWindow, __NXNullifyGState, 
                       __NXOrderKeyAndMain, __NXOrderPanelIfActive, __NXPSEndCustom, 
                       __NXPSStartCopyingCustom, __NXPSStartDrawingCustom, 
                       __NXPSgetwindowbelow, __NXPSscreenlist, __NXPackImage, 
                       __NXPackOneImagePlane, __NXPlaceWindow, __NXPureConvertSize, 
                       __NXRGBToHSB, __NXRGBToWhite, __NXReadWindowSizeLimits, 
                       __NXReenableUpdate, __NXRemoveAlpha, __NXReorderWindows, 
                       __NXResetCursorState, __NXResetOtherWindows, __NXResizeImageCache, 
                       __NXRestoreSharedWindows, __NXSafeOrderFront, __NXSafeOrderFrontDuringOpenFile, 
                       __NXSafeOrderMainBelowKey, __NXSaveSharedWindows, 
                       __NXScroll, __NXSelectFontNS, __NXSelectFontNSM, 
                       __NXSendFileToPS, __NXSendWindowNotification, __NXSetAvoidsActivation, 
                       __NXSetButtonParam, __NXSetCalibratedGray, __NXSetCalibratedRGB, 
                       __NXSetCellParam, __NXSetCursorRect, __NXSetCursorRectEnabled, 
                       __NXSetDepthLimitFromDepthName, __NXSetEventMask, 
                       __NXSetGrayUsingPattern, __NXSetHidesOnDeactivate, 
                       __NXSetOtherWindows, __NXSetPreventsActivation, 
                       __NXSetTrackingRect, __NXSetupPriorities, __NXSharedKitImagesWindow, 
                       __NXShowAllWindows, __NXTermWindow, __NXUpdateMiniaturizeParams, 
                       __NXValidateBitmapParams, __NXVisibleRectForAllScreens, 
                       __NXVisibleRectForScreen, __NXWriteWindowSizeLimits, 
                       __NXstringxyshow, __PScomposite, __PScreatepattern, 
                       __PSreleasepattern, __PSsetlasteventsenttime, __PSsetpattern, 
                       __PSstartwaitcursortimer, __cDebugWarnOnce, __debugWarnOnce, 
                       __initThreadSupport, __runningOnAppKitThread, __validatedStateForMenuFormRepresentation, 
                       __wrapRunLoopWithAutoreleasePoolHandler, _flMatrix, 
                       _idMatrix, _wbSkinFillBitmap_withGradientForKey_ ]
    objc-classes:    [ _NSAccessibilityAttributeAccessorInfo, _NSAccessibilityColorButtonMockUIElement, 
                       _NSAccessibilityWeakReferenceContainer, _NSAppearanceAuxiliary, 
                       _NSAppleMenuController, _NSAppleMenuItemRepresentedObject, 
                       _NSApplicationBundlePresenter, _NSAquaAppearance, 
                       _NSAquaMavericksAppearance, _NSAquaUserInterfaceTheme, 
                       _NSAutounbinderBinding, _NSAutounbinderObservance, 
                       _NSBackgroundColorView, _NSBetterbox, _NSBlockedOn15995015Layer, 
                       _NSBuiltinAppearance, _NSButtonTextField, _NSButtonTextFieldCell, 
                       _NSCALayerGraphicsContext, _NSCGLSurface, _NSCGSFence, 
                       _NSCGSFont, _NSCGSMutableWindowCornerMask, _NSCGSSpace, 
                       _NSCGSWindow, _NSCGSWindowBackdrop, _NSCGSWindowBackingStore, 
                       _NSCGSWindowBuffer, _NSCGSWindowCornerMask, _NSCGSWindowLayerSurface, 
                       _NSCGSWindowOpenGLSurface, _NSCGSWindowSurface, 
                       _NSCachedTableCellView, _NSCachedTableRowView, _NSCandidateTextCell, 
                       _NSCandidateTextField, _NSCarbonMenuImplExtraVars, 
                       _NSCellMouseTrackingInfo, _NSCellView, _NSCharacterProperty, 
                       _NSCollectionViewChildProxy, _NSCollectionViewDropTargetGapIndicator, 
                       _NSCollectionViewLayoutAccessibility, _NSCollectionViewLayoutSectionAccessibility, 
                       _NSCollectionViewMouseSession, _NSColorPickerGridView, 
                       _NSColorPickerGridViewController, _NSColorPickerImagePopupButton, 
                       _NSColorPickerMatrixView, _NSColorPickerPencilView, 
                       _NSColorPickerPencils, _NSColorPickerSelectingTextField, 
                       _NSColorPopoverController, _NSColoredPencil, _NSCompositeAppearance, 
                       _NSConcurrentEventMonitor, _NSContentAppearance, 
                       _NSCorrectionPanel, _NSCorrectionShadowView, _NSCorrectionSubPanel, 
                       _NSCorrectionTextFieldContainer, _NSCorrectionTextView, 
                       _NSCorrectionTypedTextHighlightView, _NSCrossfadeView, 
                       _NSDPSContext, _NSDPSServerContext, _NSDataDetectionIndicatorMenu, 
                       _NSDesktopImageView, _NSDictationManager, _NSDimingView, 
                       _NSDisplayCycle, _NSDisplayCycleObserver, _NSDisplayLink, 
                       _NSDockConnection, _NSDocumentConflictPanelController, 
                       _NSDocumentControllerMainThreadUnblockerEntry, _NSDocumentControllerMoreIVars, 
                       _NSDocumentControllerOpening, _NSDocumentControllerPersistentRestoration, 
                       _NSDocumentControllerSubMenuDelegate, _NSDocumentMoreIVars, 
                       _NSDocumentNonModalAlertViewController, _NSDocumentRevisionsAuxiliaryWindow, 
                       _NSDocumentRevisionsButtonAppearance, _NSDocumentRevisionsController, 
                       _NSDocumentRevisionsNonLocalVersionPlaceholderView, 
                       _NSDocumentRevisionsPlaceholderView, _NSDocumentRevisionsRevertProgressOverlayWindow, 
                       _NSDocumentRevisionsStackItem, _NSDocumentRevisionsStackLayer, 
                       _NSDocumentRevisionsView, _NSDocumentRevisionsWindow, 
                       _NSDocumentRevisionsWindowTransformAnimation, _NSDocumentRevisionsWindowTransformAnimationGroup, 
                       _NSDocumentTitlebarPopoverViewController, _NSDraggingDestinationView, 
                       _NSExitFullScreenStatusItem, _NSFacetImageRep, _NSFakePopoverBackgroundView, 
                       _NSFindPatternAttachment, _NSFindPatternAttachmentCell, 
                       _NSFindPatternComboBox, _NSFindPatternFieldEditor, 
                       _NSFindPatternSearchField, _NSFindPatternTextField, 
                       _NSFontOptions, _NSFontPanelColorWell, _NSFontSmoothingButton, 
                       _NSGestureRecognizerTarget, _NSHIPresentationInstance, 
                       _NSIBSortedEncodingMutableSet, _NSImageViewContainerView, 
                       _NSImmediateActionToQuickLookPresentationAdaptor, 
                       _NSLanguage, _NSLayerContentsFacet, _NSLayerContentsProvider, 
                       _NSLayerDrawDelegate, _NSLegacyScrollerImp, _NSLimitedMenuViewWindow, 
                       _NSMagnifierWindowContentViewLegacy, _NSMagnifierWindowContentViewLoupe, 
                       _NSMenuArrowView, _NSMenuHighlightView, _NSMenuPanel, 
                       _NSMenuScrollView, _NSMenuView, _NSMovieView, _NSMultiProxyDelegate, 
                       _NSMutableRangeArray, _NSNavAskPanel, _NSNavCustomView, 
                       _NSNavMenuItem, _NSNavOpenPanel, _NSNavSavePanel, 
                       _NSOVTrackingAreaOwner, _NSOVWrapperButton, _NSOpenAndSavePanelContentView, 
                       _NSOutlineButtonCell, _NSOutlineViewStaticItemData, 
                       _NSOverdrawableTileLayer, _NSOverlayScrollerImp, 
                       _NSPathControlAuxiliary, _NSPersistentUIBucket, 
                       _NSPersistentUIPreservedStateDirectory, _NSPersistentUIRecord, 
                       _NSPersistentUIUnarchiver, _NSPersistentUIWindowInfo, 
                       _NSPersistentUIWindowRestoration, _NSPopoverToolbar, 
                       _NSProgressiveLayer, _NSQuickDrawPort, _NSQuickDrawView, 
                       _NSRegularLegacyScrollerImp, _NSRegularOverlayScrollerImp, 
                       _NSRolloveringImageTextAttachmentCell, _NSRowClipView, 
                       _NSRulebook, _NSRulebookCharacterSet, _NSRulebookSetObject, 
                       _NSSavePanelAlertStyleContentView, _NSScreenDisplayLink, 
                       _NSScreenLayout, _NSScrollViewMirrorView, _NSScrollingBehavior, 
                       _NSScrollingBehaviorConcurrentVBL, _NSScrollingBehaviorLegacy, 
                       _NSScrollingConcurrentData, _NSSegmentItemLabelCell, 
                       _NSSegmentItemLabelView, _NSSegmentItemView, _NSSimpleHorizontalTypesetter, 
                       _NSSmallLegacyScrollerImp, _NSSmallOverlayScrollerImp, 
                       _NSSnapshotBitmapGraphicsContext, _NSSourceListBackgroundView, 
                       _NSSplitDividerView, _NSSplitViewDividerDragParams, 
                       _NSSplitViewVariables, _NSSpringAnimation, _NSStackViewContainer, 
                       _NSStatusItemReplicant, _NSStatusItemReplicantView, 
                       _NSStoryboardScene, _NSStoryboardSeguePresentedControllerCenter, 
                       _NSStringMeasurementCacheKey, _NSSubrectImageRep, 
                       _NSTSMInputContext, _NSTabViewButtons, _NSTabViewControllerToolbarUIProvider, 
                       _NSTableAssociation, _NSTableBackgroundView, _NSTableColumnDragInfo, 
                       _NSTableDeleteScanLineView, _NSTableDragInfo, _NSTableHeaderData, 
                       _NSTableOptions, _NSTableOptionsPanel, _NSTableOverlappingColumnClipHelper, 
                       _NSTableRowAndCellTracker, _NSTableRowData, _NSTableRowViewSpringAnimation, 
                       _NSTableSwipeData, _NSTableUpdateData, _NSTableUpdateDeleteItem, 
                       _NSTableUpdateInsertItem, _NSTableUpdateItem2, _NSTableUpdateMoveItem, 
                       _NSTableViewActionButton, _NSTableViewActionButtonCell, 
                       _NSTableViewDropFeedbackData, _NSTearOffFrame, _NSTextDragInfo, 
                       _NSTextFieldAuxiliary, _NSTextFinderAsyncSearch, 
                       _NSTextFinderBarSearchField, _NSTextFinderBarSearchFieldCell, 
                       _NSTextFinderBarTextField, _NSTextFinderBarTextFieldCell, 
                       _NSTextFinderIndicatorManager, _NSTextLayer, _NSTextPlaceholderInternalVars, 
                       _NSTextRulerOptions, _NSTextViewAttachmentEditCompletionAnimation, 
                       _NSTexturedComboBox, _NSTexturedComboBoxCell, _NSThemeAutosaveButton, 
                       _NSThemeAutosaveButtonCell, _NSThemeFrameBackgroundDelegate, 
                       _NSThemeFrameTitleTextField, _NSThemeTearOffFrame, 
                       _NSTileLayer, _NSTileScrollingInfoLayer, _NSTitleTextFieldCell, 
                       _NSTitlebarAccessoryClipView, _NSTitlebarContainerView, 
                       _NSTitlebarFloatingWindow, _NSTitlebarThemeFrame, 
                       _NSTitlebarView, _NSTitlebarViewController, _NSToolbarBaselineView, 
                       _NSToolbarFullScreenContentView, _NSToolbarFullScreenResetableAnimation, 
                       _NSToolbarFullScreenWindow, _NSToolbarFullScreenWindowManager, 
                       _NSToolbarSidebarItem, _NSTrackingAreaReservedIVars, 
                       _NSTrackpadFeedbackPerformer, _NSTrackpadHapticFeedbackPerformer, 
                       _NSTypeSelectBackgroundView, _NSTypeSelectPanel, 
                       _NSUnavailableLanguagePlaceholder, _NSVibrantDarkAppearance, 
                       _NSVibrantLightAppearance, _NSVibrantSplitDividerView, 
                       _NSViewControllerModalWindowTransition, _NSViewControllerPopoverTransition, 
                       _NSViewControllerSheetTransition, _NSViewControllerUtilityWindowTransition, 
                       _NSViewControllerWindowTransition, _NSViewMultiClipDrawingHelper, 
                       _NSWeakAutounbinderBinding, _NSWindowAnchorInfo, 
                       _NSWindowBackdrop, _NSWindowBatchOrdering, _NSWindowControllerMoreIVars, 
                       _NSWindowLayout, _NSWindowScaleAnimation, _NSWorkspaceApplicationKVOHelper, 
                       _NSWrapperCellView, __NS1DVelocityFilterIvars, __NSAcceleratorButtonHelper, 
                       __NSAlertContentView, __NSAlignmentFeedbackFilterImpl, 
                       __NSAlignmentFeedbackFilterPreparedContext, __NSAnimationBlockDelegate, 
                       __NSAppCentricAccessoryViewSeparatorBox, __NSAppKitARCSafeWeakReference, 
                       __NSAutomaticFocusRingState, __NSBackingLayer, __NSBackingLayerContents, 
                       __NSBarTextFinder, __NSBlockDeallocationHook, __NSButtonAnimationView, 
                       __NSButtonCellAux, __NSCGLSurface, __NSCGLSurfaceNonAtomicLayerContents, 
                       __NSCGSMutableWindowCornerMask, __NSCGSSpace, __NSCGSTransaction, 
                       __NSCGSWindow, __NSCGSWindowBackdrop, __NSCGSWindowBackingStore, 
                       __NSCGSWindowBuffer, __NSCGSWindowCornerMask, __NSCGSWindowLayerSurface, 
                       __NSCGSWindowLocallyRenderedLayerSurface, __NSCGSWindowOpenGLSurface, 
                       __NSCGSWindowOrdering, __NSCanvasBackgroundView, 
                       __NSCarbonWindowFullScreenTransition, __NSCellTrackingData, 
                       __NSClickGestureRecognizerAuxiliary, __NSClipViewBackingLayer, 
                       __NSClipViewOverhangView, __NSCloudSharingPanelWindow, 
                       __NSCollectionViewCachedSectionInfo, __NSCollectionViewDataSourceAdapter, 
                       __NSCollectionViewDropReceiver, __NSConstraintIndicatorView, 
                       __NSCornerView, __NSDatePickerArrowCell, __NSDatePickerCalendarLocale, 
                       __NSDictionaryControllerKeyValuePair, __NSDictionaryKeyProphylactic, 
                       __NSDisplayFadeAndCaptureAnimation, __NSDistanceIndicatorView, 
                       __NSDocumentActivity, __NSDocumentConflict, __NSDocumentConflictImageView, 
                       __NSDocumentConflictNonTableView, __NSDocumentConflictTableCellView, 
                       __NSDocumentFileAccess, __NSDocumentRevisionsCache, 
                       __NSDocumentRevisionsLoadingOperation, __NSDocumentRevisionsUniversalDelegate, 
                       __NSDocumentSerializationObject, __NSDocumentSerializationSemaphore, 
                       __NSFITagEditorView, __NSFindIndicatorOverlayView, 
                       __NSFindIndicatorView, __NSFindPanelTextFinder, 
                       __NSFullScreenTileDividerWindow, __NSFullScreenTileDividerWindowContentView, 
                       __NSFullScreenTileOverlayLayer, __NSFullScreenTileOverlayWindow, 
                       __NSFullScreenTileOverlayWindowContentView, __NSFullScreenTileResizeCrossfadeOverlayLayer, 
                       __NSFullScreenTileResizeCrossfadeOverlayWindow, 
                       __NSFullScreenTileResizeCrossfadeOverlayWindowContentView, 
                       __NSFullScreenTileResizeCrossfadeWindowProxyLayer, 
                       __NSFullScreenTileWindowProxyLayer, __NSFullScreenTransition, 
                       __NSFullScreenTransitionOverlayWindow, __NSFullScreenTransitionOverlayWindowContentView, 
                       __NSFullScreenUnbufferedWindow, __NSFullScreenUnbufferedWindowContentView, 
                       __NSFullScreenView, __NSFullScreenWindow, __NSFullyBakedAXMutableAttributedString, 
                       __NSGestureRecognizerAuxiliary, __NSGestureRecognizerDelayedEvent, 
                       __NSGestureRecognizerFailureMap, __NSGlobalTextFinder, 
                       __NSIdleTimer, __NSImageLayerContents, __NSImageTypeData, 
                       __NSIndicatorViewGroup, __NSLayoutManagerRulerHelper, 
                       __NSLinearMaskBackingLayer, __NSLinearMaskBackingLayerContents, 
                       __NSLinearMaskLayer, __NSLinearMaskTileLayer, __NSMagnifierWindow, 
                       __NSMenuActionController, __NSMirrorDocumentView, 
                       __NSMovieUndoOperation, __NSMovieViewPlugin, __NSOVRowEntry, 
                       __NSObjectAnimator, __NSObjectAnimator_NSSplitViewItem, 
                       __NSOpenGLViewBackingLayer, __NSOutlineViewAnimator, 
                       __NSOutlineViewReserved, __NSPageControllerAnimator, 
                       __NSPageControllerImageView, __NSPageControllerPrivateData, 
                       __NSPageControllerTransitionView, __NSPageControllerView, 
                       __NSPanGestureRecognizerAuxiliary, __NSPopoverFramePrivateData, 
                       __NSPopoverPrivateData, __NSPopoverToolbarPrivateData, 
                       __NSPopoverToolbarSeparatorView, __NSPopoverToolbarView, 
                       __NSPopoverTransitionView, __NSPopoverWindow, __NSProgressIndicatorBackingLayer, 
                       __NSProxyLabelCell, __NSQDCGSContext, __NSRecentDocumentInfo, 
                       __NSSavePanelPrefixWatchingTagSetter, __NSSavePanelTagEditorContainer, 
                       __NSSavePanelTagEditorLabel, __NSSavePanelTagSetter, 
                       __NSScreenAux, __NSScreenSharedInfo, __NSScrollViewFloatingDebugView, 
                       __NSScrollViewFloatingSubviewsContainerView, __NSScrollingConcurrentConstantData, 
                       __NSScrollingConcurrentEventMonitor, __NSScrollingConcurrentEventVBLPreprocessFilter, 
                       __NSScrollingConcurrentMainThreadSynchronizer, __NSScrollingConcurrentMomentumAnimation, 
                       __NSScrollingConcurrentPageAlignmentAnimation, __NSScrollingConcurrentRubberbandSnapAnimation, 
                       __NSScrollingConcurrent