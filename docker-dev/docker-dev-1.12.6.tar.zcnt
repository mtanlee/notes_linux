ng the \f(CW$dbh\fR attributes to be initialized during before/after
other attributes.
.Sp
\&\f(CW\*(C`DBI::DBD::SqlEngine\*(C'\fR initializes following attributes:
.Sp
.Vb 4
\&  $dbh\->{sql_init_order} = {
\&       0 => [qw( Profile RaiseError PrintError AutoCommit )],
\&      90 => [ "sql_meta", $dbh\->{$drv_pfx_meta} ? $dbh\->{$drv_pfx_meta} : () ]
\&  }
.Ve
.Sp
The default priority of not listed attribute keys is \f(CW50\fR. It is well
known that a lot of attributes needed to be set before some table settings
are initialized. For example, for \s-1DBD::DBM\s0, when using
.Sp
.Vb 11
\&  my $dbh = DBI\->connect( "dbi:DBM:", undef, undef, {
\&      f_dir => "/path/to/dbm/databases",
\&      dbm_type => "BerkeleyDB",
\&      dbm_mldbm => "JSON", # use MLDBM::Serializer::JSON
\&      dbm_tables => {
\&          quick => {
\&              dbm_type => "GDBM_File",
\&              dbm_MLDBM => "FreezeThaw"
\&          }
\&      }
\&  });
.Ve
.Sp
This defines a known table \f(CW\*(C`quick\*(C'\fR which uses the GDBM_File backend and
FreezeThaw as serializer instead of the overall default BerkeleyDB and
\&\s-1JSON\s0. \fBBut\fR all files containing the table data have to be searched in
\&\f(CW\*(C`$dbh\->{f_dir}\*(C'\fR, which requires \f(CW\*(C`$dbh\->{f_dir}\*(C'\fR must be initialized
before \f(CW\*(C`$dbh\->{sql_meta}\->{quick}\*(C'\fR is initialized by
\&\f(CW\*(C`bootstrap_table_meta\*(C'\fR method of \*(L"DBI::DBD::SqlEngine::Table\*(R" to get
\&\f(CW\*(C`$dbh\->{sql_meta}\->{quick}\->{f_dir}\*(C'\fR being initialized properly.
.IP "sql_init_phase" 4
.IX Item "sql_init_phase"
This attribute is only set during the initialization steps of the \s-1DBI\s0
Database Driver. It contains the value of the currently run initialization
phase. Currently supported phases are \fIphase 0\fR and \fIphase 1\fR. This
attribute is set in \f(CW\*(C`init_default_attributes\*(C'\fR and removed in \f(CW\*(C`init_done\*(C'\fR.
.IP "sql_engine_in_gofer" 4
.IX Item "sql_engine_in_gofer"
This value has a true value in case of this driver is operated via
DBD::Gofer. The impact of being operated via Gofer is a read-only
driver (not read-only databases!), so you cannot modify any attributes
later \- neither any table settings. \fBBut\fR you won't get an error in
cases you modify table attributes, so please carefully watch
\&\f(CW\*(C`sql_engine_in_gofer\*(C'\fR.
.IP "sql_table_source" 4
.IX Item "sql_table_source"
Names a class which is responsible for delivering \fIdata sources\fR and
\&\fIavailable tables\fR (Database Driver related). \fIdata sources\fR here
refers to \*(L"data_sources\*(R" in \s-1DBI\s0, not \f(CW\*(C`sql_data_source\*(C'\fR.
.Sp
See \*(L"DBI::DBD::SqlEngine::TableSource\*(R" for details.
.IP "sql_data_source" 4
.IX Item "sql_data_source"
Name a class which is responsible for handling table resources open
and completing table names requested via \s-1SQL\s0 statements.
.Sp
See \*(L"DBI::DBD::SqlEngine::DataSource\*(R" for details.
.IP "sql_dialect" 4
.IX Item "sql_dialect"
Controls the dialect understood by SQL::Parser. Possible values (delivery
state of SQL::Statement):
.Sp
.Vb 3
\&  * ANSI
\&  * CSV
\&  * AnyData
.Ve
.Sp
Defaults to \*(L"\s-1CSV\*(R". \s0 Because an SQL::Parser is instantiated only once and
SQL::Parser doesn't allow to modify the dialect once instantiated,
it's strongly recommended to set this flag before any statement is
executed (best place is connect attribute hash).
.SS "DBI::DBD::SqlEngine::st"
.IX Subsection "DBI::DBD::SqlEngine::st"
Contains the methods to deal with prepared statement handles:
.IP "bind_param" 4
.IX Item "bind_param"
Common routine to bind placeholders to a statement for execution. It
is dangerous to override this method without detailed knowledge about
the DBI::DBD::SqlEngine internal storage structure.
.IP "execute" 4
.IX Item "execute"
Executes a previously prepared statement (with placeholders, if any).
.IP "finish" 4
.IX Item "finish"
Finishes a statement handle, discards all buffered results. The prepared
statement is not discarded so the statement can be executed again.
.IP "fetch" 4
.IX Item "fetch"
Fetches the next row from the result-set. This method may be rewritten
in a later version and if it's overridden in a derived class, the
derived implementation should not rely on the storage details.
.IP "fetchrow_arrayref" 4
.IX Item "fetchrow_arrayref"
Alias for \f(CW\*(C`fetch\*(C'\fR.
.IP "\s-1FETCH\s0" 4
.IX Item "FETCH"
Fetches statement handle attributes. Supported attributes (for full overview
see \*(L"Statement Handle Attributes\*(R" in \s-1DBI\s0) are \f(CW\*(C`NAME\*(C'\fR, \f(CW\*(C`TYPE\*(C'\fR, \f(CW\*(C`PRECISION\*(C'\fR
and \f(CW\*(C`NULLABLE\*(C'\fR. Each column is returned as \f(CW\*(C`NULLABLE\*(C'\fR which might be wrong
depending on the derived backend storage.  If the statement handle has
private attributes, they can be fetched using this method, too. \fBNote\fR that
statement attributes are not associated with any table used in this statement.
.Sp
This method usually requires extending in a derived implementation.
See \s-1DBD::CSV\s0 or \s-1DBD::DBM\s0 for some example.
.IP "\s-1STORE\s0" 4
.IX Item "STORE"
Allows storing of statement private attributes. No special handling is
currently implemented here.
.IP "rows" 4
.IX Item "rows"
Returns the number of rows affected by the last execute. This method might
return \f(CW\*(C`undef\*(C'\fR.
.SS "DBI::DBD::SqlEngine::TableSource"
.IX Subsection "DBI::DBD::SqlEngine::TableSource"
Provides data sources and table information on database driver and database
handle level.
.PP
.Vb 1
\&  package DBI::DBD::SqlEngine::TableSource;
\&
\&  sub data_sources ($;$)
\&  {
\&    my ( $class, $drh, $attrs ) = @_;
\&    ...
\&  }
\&
\&  sub avail_tables
\&  {
\&    my ( $class, $drh ) = @_;
\&    ...
\&  }
.Ve
.PP
The \f(CW\*(C`data_sources\*(C'\fR method is called when the user invokes any of the
following:
.PP
.Vb 2
\&  @ary = DBI\->data_sources($driver);
\&  @ary = DBI\->data_sources($driver, \e%attr);
\&  
\&  @ary = $dbh\->data_sources();
\&  @ary = $dbh\->data_sources(\e%attr);
.Ve
.PP
The \f(CW\*(C`avail_tables\*(C'\fR method is called when the user invokes any of the
following:
.PP
.Vb 1
\&  @names = $dbh\->tables( $catalog, $schema, $table, $type );
\&  
\&  $sth = $dbh\->table_info( $catalog, $schema, $table, $type );
\&  $sth = $dbh\->table_info( $catalog, $schema, $table, $type, \e%attr );
\&
\&  $dbh\->func( "list_tables" );
.Ve
.PP
Every time where an \f(CW\*(C`\e%attr\*(C'\fR argument can be specified, this \f(CW\*(C`\e%attr\*(C'\fR
object's \f(CW\*(C`sql_table_source\*(C'\fR attribute is preferred over the \f(CW$dbh\fR
attribute or the driver default.
.SS "DBI::DBD::SqlEngine::DataSource"
.IX Subsection "DBI::DBD::SqlEngine::DataSource"
Provides base functionality for dealing with tables. It is primarily
designed for allowing transparent access to files on disk or already
opened (file\-)streams (e.g. for \s-1DBD::CSV\s0).
.PP
Derived classes shall be restricted to similar functionality, too (e.g.
opening streams from an archive, transparently compress/uncompress
log files before parsing them,
.PP
.Vb 1
\&  package DBI::DBD::SqlEngine::DataSource;
\&
\&  sub complete_table_name ($$;$)
\&  {
\&    my ( $self, $meta, $table, $respect_case ) = @_;
\&    ...
\&  }
.Ve
.PP
The method \f(CW\*(C`complete_table_name\*(C'\fR is called when first setting up the
\&\fImeta information\fR for a table:
.PP
.Vb 1
\&  "SELECT user.id, user.name, user.shell FROM user WHERE ..."
.Ve
.PP
results in opening the table \f(CW\*(C`user\*(C'\fR. First step of the table open
process is completing the name. Let's imagine you're having a \s-1DBD::CSV\s0
handle with following settings:
.PP
.Vb 3
\&  $dbh\->{sql_identifier_case} = SQL_IC_LOWER;
\&  $dbh\->{f_ext} = \*(Aq.lst\*(Aq;
\&  $dbh\->{f_dir} = \*(Aq/data/web/adrmgr\*(Aq;
.Ve
.PP
Those settings will result in looking for files matching
\&\f(CW\*(C`[Uu][Ss][Ee][Rr](\e.lst)?$\*(C'\fR in \f(CW\*(C`/data/web/adrmgr/\*(C'\fR. The scanning of the
directory \f(CW\*(C`/data/web/adrmgr/\*(C'\fR and the pattern match check will be done
in \f(CW\*(C`DBD::File::DataSource::File\*(C'\fR by the \f(CW\*(C`complete_table_name\*(C'\fR method.
.PP
If you intend to provide other sources of data streams than files, in
addition to provide an appropriate \f(CW\*(C`complete_table_name\*(C'\fR method, a method
to open the resource is required:
.PP
.Vb 1
\&  package DBI::DBD::SqlEngine::DataSource;
\&
\&  sub open_data ($)
\&  {
\&    my ( $self, $meta, $attrs, $flags ) = @_;
\&    ...
\&  }
.Ve
.PP
After the method \f(CW\*(C`open_data\*(C'\fR has been run successfully, the table's meta
information are in a state which allows the table's data accessor methods
will be able to fetch/store row information. Implementation details heavily
depends on the table implementation, whereby the most famous is surely
DBD::File::Table.
.SS "DBI::DBD::SqlEngine::Statement"
.IX Subsection "DBI::DBD::SqlEngine::Statement"
Derives from DBI::SQL::Nano::Statement for unified naming when deriving
new drivers. No additional feature is provided from here.
.SS "DBI::DBD::SqlEngine::Table"
.IX Subsection "DBI::DBD::SqlEngine::Table"
Derives from DBI::SQL::Nano::Table for unified naming when deriving
new drivers.
.PP
You should consult the documentation of \f(CW\*(C`SQL::Eval::Table\*(C'\fR (see
SQL::Eval) to get more information about the abstract methods of the
table's base class you have to override and a description of the table
meta information expected by the \s-1SQL\s0 engines.
.IP "bootstrap_table_meta" 4
.IX Item "bootstrap_table_meta"
Initializes a table meta structure. Can be safely overridden in a
derived class, as long as the \f(CW\*(C`SUPER\*(C'\fR method is called at the end
of the overridden method.
.Sp
It copies the following attributes from the database into the table meta data
\&\f(CW\*(C`$dbh\->{ReadOnly}\*(C'\fR into \f(CW\*(C`$meta\->{readonly}\*(C'\fR, \f(CW\*(C`sql_identifier_case\*(C'\fR
and \f(CW\*(C`sql_data_source\*(C'\fR and makes them sticky to the table.
.Sp
This method should be called before you attempt to map between file
name and table name to ensure the correct directory, extension etc. are
used.
.IP "init_table_meta" 4
.IX Item "init_table_meta"
Initializes more attributes of the table meta data \- usually more
expensive ones (e.g. those which require class instantiations) \- when
the file name and the table name could mapped.
.IP "get_table_meta" 4
.IX Item "get_table_meta"
Returns the table meta data. If there are none for the required table,
a new one is initialized. When after bootstrapping a new \fItable_meta\fR
and completing the table name a
mapping can be established between an existing \fItable_meta\fR and the
new bootstrapped one, the already existing is used and a mapping
shortcut between the recent used table name and the already known
table name is hold in \f(CW\*(C`$dbh\->{sql_meta_map}\*(C'\fR.  When it fails,
nothing is returned. On success, the name of the table and the meta data
structure is returned.
.IP "get_table_meta_attr" 4
.IX Item "get_table_meta_attr"
Returns a single attribute from the table meta data. If the attribute
name appears in \f(CW%compat_map\fR, the attribute name is updated from
there.
.IP "set_table_meta_attr" 4
.IX Item "set_table_meta_attr"
Sets a single attribute in the table meta data. If the attribute
name appears in \f(CW%compat_map\fR, the attribute name is updated from
there.
.IP "table_meta_attr_changed" 4
.IX Item "table_meta_attr_changed"
Called when an attribute of the meta data is modified.
.Sp
If the modified attribute requires to reset a calculated attribute, the
calculated attribute is reset (deleted from meta data structure) and
the \fIinitialized\fR flag is removed, too. The decision is made based on
\&\f(CW%register_reset_on_modify\fR.
.IP "register_reset_on_modify" 4
.IX Item "register_reset_on_modify"
Allows \f(CW\*(C`set_table_meta_attr\*(C'\fR to reset meta attributes when special
attributes are modified. For DBD::File, modifying one of \f(CW\*(C`f_file\*(C'\fR, \f(CW\*(C`f_dir\*(C'\fR,
\&\f(CW\*(C`f_ext\*(C'\fR or \f(CW\*(C`f_lockfile\*(C'\fR will reset \f(CW\*(C`f_fqfn\*(C'\fR. \s-1DBD::DBM\s0 extends the
list for \f(CW\*(C`dbm_type\*(C'\fR and \f(CW\*(C`dbm_mldbm\*(C'\fR to reset the value of \f(CW\*(C`dbm_tietype\*(C'\fR.
.Sp
If your \s-1DBD\s0 has calculated values in the meta data area, then call
\&\f(CW\*(C`register_reset_on_modify\*(C'\fR:
.Sp
.Vb 2
\&    my %reset_on_modify = ( "xxx_foo" => "xxx_bar" );
\&    _\|_PACKAGE_\|_\->register_reset_on_modify( \e%reset_on_modify );
.Ve
.IP "register_compat_map" 4
.IX Item "register_compat_map"
Allows \f(CW\*(C`get_table_meta_attr\*(C'\fR and \f(CW\*(C`set_table_meta_attr\*(C'\fR to update the
attribute name to the current favored one:
.Sp
.Vb 3
\&    # from DBD::DBM
\&    my %compat_map = ( "dbm_ext" => "f_ext" );
\&    _\|_PACKAGE_\|_\->register_compat_map( \e%compat_map );
.Ve
.IP "open_data" 4
.IX Item "open_data"
Called to open the table's data storage. This is silently forwarded
to \f(CW\*(C`$meta\->{sql_data_source}\->open_data()\*(C'\fR.
.Sp
After this is done, a derived class might add more steps in an overridden
\&\f(CW\*(C`open_file\*(C'\fR method.
.IP "new" 4
.IX Item "new"
Instantiates the table. This is done in 3 steps:
.Sp
.Vb 3
\& 1. get the table meta data
\& 2. open the data file
\& 3. bless the table data structure using inherited constructor new
.Ve
.Sp
It is not recommended to override the constructor of the table class.
Find a reasonable place to add you extensions in one of the above four
methods.
.SH "AUTHOR"
.IX Header "AUTHOR"
The module DBI::DBD::SqlEngine is currently maintained by
.PP
H.Merijn Brand < h.m.brand at xs4all.nl > and
Jens Rehsack  < rehsack at googlemail.com >
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by H.Merijn Brand & Jens Rehsack
.PP
All rights reserved.
.PP
You may freely distribute and/or modify this module under the terms of
either the \s-1GNU\s0 General Public License (\s-1GPL\s0) or the Artistic License, as
specified in the Perl \s-1README\s0 file.
                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::DBD::SqlEngine::HowTo.3pm               0100644 0001750 0001750 00000040475 12566241601 025541  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::DBD::SqlEngine::HowTo 3"
.TH DBI::DBD::SqlEngine::HowTo 3 "2013-04-04" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::DBD::SqlEngine::HowTo \- Guide to create DBI::DBD::SqlEngine based driver
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  perldoc DBI::DBD::SqlEngine::HowTo
\&  perldoc DBI
\&  perldoc DBI::DBD
\&  perldoc DBI::DBD::SqlEngine::Developers
\&  perldoc SQL::Eval
\&  perldoc DBI::DBD::SqlEngine
\&  perldoc DBI::DBD::SqlEngine::HowTo
\&  perldoc SQL::Statement::Embed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides a step-by-step guide, how to create a new
\&\f(CW\*(C`DBI::DBD::SqlEngine\*(C'\fR based \s-1DBD.\s0 It expects that you carefully read the
\&\s-1DBI\s0 documentation and that you're familiar with \s-1DBI::DBD\s0 and had
read and understood DBD::ExampleP.
.PP
This document addresses experienced developers who are really sure that
they need to invest time when writing a new \s-1DBI\s0 Driver. Writing a \s-1DBI\s0
Driver is neither a weekend project nor an easy job for hobby coders
after work. Expect one or two man-month of time for the first start.
.PP
Those who are still reading, should be able to sing the rules of
\&\*(L"\s-1CREATING A NEW DRIVER\*(R"\s0 in \s-1DBI::DBD\s0.
.SH "CREATING DRIVER CLASSES"
.IX Header "CREATING DRIVER CLASSES"
Do you have an entry in \s-1DBI\s0's \s-1DBD\s0 registry? For this guide, a prefix of
\&\f(CW\*(C`foo_\*(C'\fR is assumed.
.SS "Sample Skeleton"
.IX Subsection "Sample Skeleton"
.Vb 1
\&    package DBD::Foo;
\&
\&    use strict;
\&    use warnings;
\&    use vars qw($VERSION);
\&    use base qw(DBI::DBD::SqlEngine);
\&
\&    use DBI ();
\&
\&    $VERSION = "0.001";
\&
\&    package DBD::Foo::dr;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::dr);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::db;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::db);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::st;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::st);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::Statement;
\&
\&    use vars qw(@ISA);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::Statement);
\&
\&    package DBD::Foo::Table;
\&
\&    use vars qw(@ISA);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::Table);
\&
\&    1;
.Ve
.PP
Tiny, eh? And all you have now is a \s-1DBD\s0 named foo which will is able to
deal with temporary tables, as long as you use SQL::Statement. In
DBI::SQL::Nano environments, this \s-1DBD\s0 can do nothing.
.SS "Deal with own attributes"
.IX Subsection "Deal with own attributes"
Before we start doing usable stuff with our \s-1DBI\s0 driver, we need to think
about what we want to do and how we want to do it.
.PP
Do we need tunable knobs accessible by users? Do we need status
information? All this is handled in attributes of the database handles (be
careful when your \s-1DBD\s0 is running \*(L"behind\*(R" a DBD::Gofer proxy).
.PP
How come the attributes into the \s-1DBD\s0 and how are they fetchable by the
user? Good question, but you should know because you've read the \s-1DBI\s0
documentation.
.PP
\&\f(CW\*(C`DBI::DBD::SqlEngine::db::FETCH\*(C'\fR and \f(CW\*(C`DBI::DBD::SqlEngine::db::STORE\*(C'\fR
taking care for you \- all they need to know is which attribute names
are valid and mutable or immutable. Tell them by adding
\&\f(CW\*(C`init_valid_attributes\*(C'\fR to your db class:
.PP
.Vb 3
\&    sub init_valid_attributes
\&    {
\&        my $dbh = $_[0];
\&
\&        $dbh\->SUPER::init_valid_attributes ();
\&
\&        $dbh\->{foo_valid_attrs} = {
\&            foo_version         => 1,   # contains version of this driver
\&            foo_valid_attrs     => 1,   # contains the valid attributes of foo drivers
\&            foo_readonly_attrs  => 1,   # contains immutable attributes of foo drivers
\&            foo_bar             => 1,   # contains the bar attribute
\&            foo_baz             => 1,   # contains the baz attribute
\&            foo_manager         => 1,   # contains the manager of the driver instance
\&            foo_manager_type    => 1,   # contains the manager class of the driver instance
\&        };
\&        $dbh\->{foo_readonly_attrs} = {
\&            foo_version         => 1,   # ensure no\-one modifies the driver version
\&            foo_valid_attrs     => 1,   # do not permit to add more valid attributes ...
\&            foo_readonly_attrs  => 1,   # ... or make the immutable mutable
\&            foo_manager         => 1,   # manager is set internally only
\&        };
\&
\&        return $dbh;
\&    }
.Ve
.PP
Woooho \- but now the user cannot assign new managers? This is intended,
overwrite \f(CW\*(C`STORE\*(C'\fR to handle it!
.PP
.Vb 3
\&    sub STORE ($$$)
\&    {
\&        my ( $dbh, $attrib, $value ) = @_;
\&
\&        $dbh\->SUPER::STORE( $attrib, $value );
\&
\&        # we\*(Aqre still alive, so no exception is thrown ...
\&        # by DBI::DBD::SqlEngine::db::STORE
\&        if ( $attrib eq "foo_manager_type" )
\&        {
\&            $dbh\->{foo_manager} = $dbh\->{foo_manager_type}\->new();
\&            # ... probably correct some states based on the new
\&            # foo_manager_type \- see DBD::Sys for an example
\&        }
\&    }
.Ve
.PP
But ... my driver runs without a manager until someone first assignes
a \f(CW\*(C`foo_manager_type\*(C'\fR. Well, no \- there're two places where you can
initialize defaults:
.PP
.Vb 3
\&    sub init_default_attributes
\&    {
\&        my ($dbh, $phase) = @_;
\&
\&        $dbh\->SUPER::init_default_attributes($phase);
\&
\&        if( 0 == $phase )
\&        {
\&            # init all attributes which have no knowledge about
\&            # user settings from DSN or the attribute hash
\&            $dbh\->{foo_manager_type} = "DBD::Foo::Manager";
\&        }
\&        elsif( 1 == $phase )
\&        {
\&            # init phase with more knowledge from DSN or attribute
\&            # hash
\&            $dbh\->{foo_manager} = $dbh\->{foo_manager_type}\->new();
\&        }
\&
\&        return $dbh;
\&    }
.Ve
.PP
So far we can prevent the users to use our database driver as data
storage for anything and everything. We care only about the real important
stuff for peace on earth and alike attributes. But in fact, the driver
still can't do anything. It can do less than nothing \- meanwhile it's
not a stupid storage area anymore.
.SS "User comfort"
.IX Subsection "User comfort"
\&\f(CW\*(C`DBI::DBD::SqlEngine\*(C'\fR since \f(CW0.05\fR consolidates all persistent meta data
of a table into a single structure stored in \f(CW\*(C`$dbh\->{sql_meta}\*(C'\fR. While
DBI::DBD::SqlEngine provides only readonly access to this structure,
modifications are still allowed.
.PP
Primarily DBI::DBD::SqlEngine provides access via the setters
\&\f(CW\*(C`get_sql_engine_meta\*(C'\fR, \f(CW\*(C`get_single_table_meta\*(C'\fR, \f(CW\*(C`set_single_table_meta\*(C'\fR,
\&\f(CW\*(C`set_sql_engine_meta\*(C'\fR and \f(CW\*(C`clear_sql_engine_meta\*(C'\fR. Those methods are
easily accessible by the users via the \f(CW\*(C`$dbh\->func ()\*(C'\fR interface
provided by \s-1DBI.\s0 Well, many users don't feel comfortize when calling
.PP
.Vb 2
\&    # don\*(Aqt require extension for tables cars
\&    $dbh\->func ("cars", "f_ext", ".csv", "set_sql_engine_meta");
.Ve
.PP
DBI::DBD::SqlEngine will inject a method into your driver to increase the
user comfort to allow:
.PP
.Vb 2
\&    # don\*(Aqt require extension for tables cars
\&    $dbh\->foo_set_meta ("cars", "f_ext", ".csv");
.Ve
.PP
Better, but here and there users likes to do:
.PP
.Vb 2
\&    # don\*(Aqt require extension for tables cars
\&    $dbh\->{foo_tables}\->{cars}\->{f_ext} = ".csv";
.Ve
.PP
This interface is provided when derived \s-1DBD\s0's define following in
\&\f(CW\*(C`init_valid_attributes\*(C'\fR (re-capture \*(L"Deal with own attributes\*(R"):
.PP
.Vb 3
\&    sub init_valid_attributes
\&    {
\&        my $dbh = $_[0];
\&
\&        $dbh\->SUPER::init_valid_attributes ();
\&
\&        $dbh\->{foo_valid_attrs} = {
\&            foo_version         => 1,   # contains version of this driver
\&            foo_valid_attrs     => 1,   # contains the valid attributes of foo drivers
\&            foo_readonly_attrs  => 1,   # contains immutable attributes of foo drivers
\&            foo_bar             => 1,   # contains the bar attribute
\&            foo_baz             => 1,   # contains the baz attribute
\&            foo_manager         => 1,   # contains the manager of the driver instance
\&            foo_manager_type    => 1,   # contains the manager class of the driver instance
\&            foo_meta            => 1,   # contains the public interface to modify table meta attributes
\&        };
\&        $dbh\->{foo_readonly_attrs} = {
\&            foo_version         => 1,   # ensure no\-one modifies the driver version
\&            foo_valid_attrs     => 1,   # do not permit to add more valid attributes ...
\&            foo_readonly_attrs  => 1,   # ... or make the immutable mutable
\&            foo_manager         => 1,   # manager is set internally only
\&            foo_meta            => 1,   # ensure public interface to modify table meta attributes are immutable
\&        };
\&
\&        $dbh\->{foo_meta} = "foo_tables";
\&
\&        return $dbh;
\&    }
.Ve
.PP
This provides a tied hash in \f(CW\*(C`$dbh\->{foo_tables}\*(C'\fR and a tied hash for
each table's meta data in \f(CW\*(C`$dbh\->{foo_tables}\->{$table_name}\*(C'\fR.
Modifications on the table meta attributes are done using the table
methods:
.PP
.Vb 2
\&    sub get_table_meta_attr { ... }
\&    sub set_table_meta_attr { ... }
.Ve
.PP
Both methods can adjust the attribute name for compatibility reasons, e.g.
when former versions of the \s-1DBD\s0 allowed different names to be used for the
same flag:
.PP
.Vb 5
\&    my %compat_map = (
\&                       abc => \*(Aqfoo_abc\*(Aq,
\&                       xyz => \*(Aqfoo_xyz\*(Aq,
\&                     );
\&    _\|_PACKAGE_\|_\->register_compat_map( \e%compat_map );
.Ve
.PP
If any user modification on a meta attribute needs reinitialization of
the meta structure (in case of \f(CW\*(C`DBI::DBD::SqlEngine\*(C'\fR these are the attributes
\&\f(CW\*(C`f_file\*(C'\fR, \f(CW\*(C`f_dir\*(C'\fR, \f(CW\*(C`f_ext\*(C'\fR and \f(CW\*(C`f_lockfile\*(C'\fR), inform DBI::DBD::SqlEngine by
doing
.PP
.Vb 5
\&    my %reset_on_modify = (
\&                            foo_xyz => "foo_bar",
\&                            foo_abc => "foo_bar",
\&                          );
\&    _\|_PACKAGE_\|_\->register_reset_on_modify( \e%reset_on_modify );
.Ve
.PP
The next access to the table meta data will force DBI::DBD::SqlEngine to re-do the
entire meta initialization process.
.PP
Any further action which needs to be taken can handled in
\&\f(CW\*(C`table_meta_attr_changed\*(C'\fR:
.PP
.Vb 6
\&    sub table_meta_attr_changed
\&    {
\&        my ($class, $meta, $attrib, $value) = @_;
\&        ...
\&        $class\->SUPER::table_meta_attr_changed ($meta, $attrib, $value);
\&    }
.Ve
.PP
This is done before the new value is set in \f(CW$meta\fR, so the attribute
changed handler can act depending on the old value.
.SS "Dealing with Tables"
.IX Subsection "Dealing with Tables"
Let's put some life into it \- it's going to be time for it.
.PP
This is a good point where a quick side step to SQL::Statement::Embed
will help to shorten the next paragraph. The documentation in
SQL::Statement::Embed regarding embedding in own \s-1DBD\s0's works pretty
fine with SQL::Statement and DBI::SQL::Nano.
.PP
Second look should go to DBI::DBD::SqlEngine::Developers to get a
picture over the driver part of the table \s-1API.\s0 Usually there isn't much
to do for an easy driver.
.SS "Testing"
.IX Subsection "Testing"
Now you should have your first own \s-1DBD.\s0 Was easy, wasn't it?  But does
it work well? Prove it by writing tests and remember to use
dbd_edit_mm_attribs from \s-1DBI::DBD\s0 to ensure testing even rare cases.
.SH "AUTHOR"
.IX Header "AUTHOR"
This guide is written by Jens Rehsack. DBI::DBD::SqlEngine is written by
Jens Rehsack using code from DBD::File originally written by Jochen
Wiedmann and Jeff Zucker.
.PP
The module DBI::DBD::SqlEngine is currently maintained by
.PP
H.Merijn Brand < h.m.brand at xs4all.nl > and
Jens Rehsack  < rehsack at googlemail.com >
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by H.Merijn Brand & Jens Rehsack
.PP
All rights reserved.
.PP
You may freely distribute and/or modify this module under the terms of
either the \s-1GNU\s0 General Public License (\s-1GPL\s0) or the Artistic License, as
specified in the Perl \s-1README\s0 file.
                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::DBD::SqlEngine::HowTo5.16.3pm           0100644 0001750 0001750 00000026402 12566241577 026061  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::DBD::SqlEngine::HowTo 3"
.TH DBI::DBD::SqlEngine::HowTo 3 "2010-08-30" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::DBD::SqlEngine::HowTo \- Guide to create DBI::DBD::SqlEngine based driver
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  perldoc DBI::DBD::SqlEngine::HowTo
\&  perldoc DBI
\&  perldoc DBI::DBD
\&  perldoc DBI::DBD::SqlEngine::Developers
\&  perldoc SQL::Eval
\&  perldoc DBI::DBD::SqlEngine
\&  perldoc DBI::DBD::SqlEngine::HowTo
\&  perldoc SQL::Statement::Embed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides a step-by-step guide, how to create a new
\&\f(CW\*(C`DBI::DBD::SqlEngine\*(C'\fR based \s-1DBD\s0. It expects that you carefully read the
\&\s-1DBI\s0 documentation and that you're familiar with \s-1DBI::DBD\s0 and had
read and understood DBD::ExampleP.
.PP
This document addresses experienced developers who are really sure that
they need to invest time when writing a new \s-1DBI\s0 Driver. Writing a \s-1DBI\s0
Driver is neither a weekend project nor an easy job for hobby coders
after work. Expect one or two man-month of time for the first start.
.PP
Those who are still reading, should be able to sing the rules of
\&\*(L"\s-1CREATING\s0 A \s-1NEW\s0 \s-1DRIVER\s0\*(R" in \s-1DBI::DBD\s0.
.SH "CREATING DRIVER CLASSES"
.IX Header "CREATING DRIVER CLASSES"
Do you have an entry in \s-1DBI\s0's \s-1DBD\s0 registry? For this guide, a prefix of
\&\f(CW\*(C`foo_\*(C'\fR is assumed.
.SS "Sample Skeleton"
.IX Subsection "Sample Skeleton"
.Vb 1
\&    package DBD::Foo;
\&
\&    use strict;
\&    use warnings;
\&    use vars qw($VERSION);
\&    use base qw(DBI::DBD::SqlEngine);
\&
\&    use DBI ();
\&
\&    $VERSION = "0.001";
\&
\&    package DBD::Foo::dr;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::dr);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::db;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::db);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::st;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::st);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::Statement;
\&
\&    use vars qw(@ISA);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::Statement);
\&
\&    package DBD::Foo::Table;
\&
\&    use vars qw(@ISA);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::Table);
\&
\&    1;
.Ve
.PP
Tiny, eh? And all you have now is a \s-1DBD\s0 named foo which will is able to
deal with temporary tables, as long as you use SQL::Statement. In
DBI::SQL::Nano environments, this \s-1DBD\s0 can do nothing.
.SS "Deal with own attributes"
.IX Subsection "Deal with own attributes"
Before we start doing usable stuff with our \s-1DBI\s0 driver, we need to think
about what we want to do and how we want to do it.
.PP
Do we need tunable knobs accessible by users? Do we need status
information? All this is handled in attributes of the database handles (be
careful when your \s-1DBD\s0 is running \*(L"behind\*(R" a DBD::Gofer proxy).
.PP
How come the attributes into the \s-1DBD\s0 and how are they fetchable by the
user? Good question, but you should know because you've read the \s-1DBI\s0
documentation.
.PP
\&\f(CW\*(C`DBI::DBD::SqlEngine::db::FETCH\*(C'\fR and \f(CW\*(C`DBI::DBD::SqlEngine::db::STORE\*(C'\fR
taking care for you \- all they need to know is which attribute names
are valid and mutable or immutable. Tell them by adding
\&\f(CW\*(C`init_valid_attributes\*(C'\fR to your db class:
.PP
.Vb 3
\&    sub init_valid_attributes
\&    {
\&        my $dbh = $_[0];
\&
\&        $dbh\->SUPER::init_valid_attributes ();
\&
\&        $dbh\->{foo_valid_attrs} = {
\&            foo_version         => 1,   # contains version of this driver
\&            foo_valid_attrs     => 1,   # contains the valid attributes of foo drivers
\&            foo_readonly_attrs  => 1,   # contains immutable attributes of foo drivers
\&            foo_bar             => 1,   # contains the bar attribute
\&            foo_baz             => 1,   # contains the baz attribute
\&            foo_manager         => 1,   # contains the manager of the driver instance
\&            foo_manager_type    => 1,   # contains the manager class of the driver instance
\&        };
\&        $dbh\->{foo_readonly_attrs} = {
\&            foo_version         => 1,   # ensure no\-one modifies the driver version
\&            foo_valid_attrs     => 1,   # do not permit to add more valid attributes ...
\&            foo_readonly_attrs  => 1,   # ... or make the immutable mutable
\&            foo_manager         => 1,   # manager is set internally only
\&        };
\&
\&        return $dbh;
\&    }
.Ve
.PP
Woooho \- but now the user cannot assign new managers? This is intended,
overwrite \f(CW\*(C`STORE\*(C'\fR to handle it!
.PP
.Vb 3
\&    sub STORE ($$$)
\&    {
\&        my ( $dbh, $attrib, $value ) = @_;
\&
\&        $dbh\->SUPER::STORE( $attrib, $value );
\&
\&        # we\*(Aqre still alive, so no exception is thrown ...
\&        # by DBI::DBD::SqlEngine::db::STORE
\&        if ( $attrib eq "foo_manager_type" )
\&        {
\&            $dbh\->{foo_manager} = $dbh\->{foo_manager_type}\->new();
\&            # ... probably correct some states based on the new
\&            # foo_manager_type \- see DBD::Sys for an example
\&        }
\&    }
.Ve
.PP
But ... my driver runs without a manager until someone first assignes
a \f(CW\*(C`foo_manager_type\*(C'\fR. Well, no \- there're two places where you can
initialize defaults:
.PP
.Vb 3
\&    sub init_default_attributes
\&    {
\&        my ($dbh, $phase) = @_;
\&
\&        $dbh\->SUPER::init_default_attributes($phase);
\&
\&        if( 0 == $phase )
\&        {
\&            # init all attributes which have no knowledge about
\&            # user settings from DSN or the attribute hash
\&            $dbh\->{foo_manager_type} = "DBD::Foo::Manager";
\&        }
\&        elsif( 1 == $phase )
\&        {
\&            # init phase with more knowledge from DSN or attribute
\&            # hash
\&            $dbh\->{foo_manager} = $dbh\->{foo_manager_type}\->new();
\&        }
\&
\&        return $dbh;
\&    }
.Ve
.PP
So far we can prevent the users to use our database driver as data
storage for anything and everything. We care only about the real important
stuff for peace on earth and alike attributes. But in fact, the driver
still can't do anything. It can do less than nothing \- meanwhile it's
not a stupid storage area anymore.
.SS "Dealing with Tables"
.IX Subsection "Dealing with Tables"
Let's put some life into it \- it's going to be time for it.
.PP
This is a good point where a quick side step to SQL::Statement::Embed
will help to shorten the next paragraph. The documentation in
SQL::Statement::Embed regarding embedding in own \s-1DBD\s0's works pretty
fine with SQL::Statement and DBI::SQL::Nano.
.SS "Testing"
.IX Subsection "Testing"
Now you should have your first own \s-1DBD\s0. Was easy, wasn't it?  But does
it work well? Prove it by writing tests and remember to use
dbd_edit_mm_attribs from \s-1DBI::DBD\s0 to ensure testing even rare cases.
.SH "AUTHOR"
.IX Header "AUTHOR"
This guide is written by Jens Rehsack. DBI::DBD::SqlEngine is written by
Jens Rehsack using code from DBD::File originally written by Jochen
Wiedmann and Jeff Zucker.
.PP
The module DBI::DBD::SqlEngine is currently maintained by
.PP
H.Merijn Brand < h.m.brand at xs4all.nl > and
Jens Rehsack  < rehsack at googlemail.com >
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by H.Merijn Brand & Jens Rehsack
.PP
All rights reserved.
.PP
You may freely distribute and/or modify this module under the terms of
either the \s-1GNU\s0 General Public License (\s-1GPL\s0) or the Artistic License, as
specified in the Perl \s-1README\s0 file.
                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::DBD::SqlEngine::HowTo5.18.3pm           0100644 0001750 0001750 00000040475 12566241601 026055  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::DBD::SqlEngine::HowTo 3"
.TH DBI::DBD::SqlEngine::HowTo 3 "2013-04-04" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::DBD::SqlEngine::HowTo \- Guide to create DBI::DBD::SqlEngine based driver
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 8
\&  perldoc DBI::DBD::SqlEngine::HowTo
\&  perldoc DBI
\&  perldoc DBI::DBD
\&  perldoc DBI::DBD::SqlEngine::Developers
\&  perldoc SQL::Eval
\&  perldoc DBI::DBD::SqlEngine
\&  perldoc DBI::DBD::SqlEngine::HowTo
\&  perldoc SQL::Statement::Embed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document provides a step-by-step guide, how to create a new
\&\f(CW\*(C`DBI::DBD::SqlEngine\*(C'\fR based \s-1DBD.\s0 It expects that you carefully read the
\&\s-1DBI\s0 documentation and that you're familiar with \s-1DBI::DBD\s0 and had
read and understood DBD::ExampleP.
.PP
This document addresses experienced developers who are really sure that
they need to invest time when writing a new \s-1DBI\s0 Driver. Writing a \s-1DBI\s0
Driver is neither a weekend project nor an easy job for hobby coders
after work. Expect one or two man-month of time for the first start.
.PP
Those who are still reading, should be able to sing the rules of
\&\*(L"\s-1CREATING A NEW DRIVER\*(R"\s0 in \s-1DBI::DBD\s0.
.SH "CREATING DRIVER CLASSES"
.IX Header "CREATING DRIVER CLASSES"
Do you have an entry in \s-1DBI\s0's \s-1DBD\s0 registry? For this guide, a prefix of
\&\f(CW\*(C`foo_\*(C'\fR is assumed.
.SS "Sample Skeleton"
.IX Subsection "Sample Skeleton"
.Vb 1
\&    package DBD::Foo;
\&
\&    use strict;
\&    use warnings;
\&    use vars qw($VERSION);
\&    use base qw(DBI::DBD::SqlEngine);
\&
\&    use DBI ();
\&
\&    $VERSION = "0.001";
\&
\&    package DBD::Foo::dr;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::dr);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::db;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::db);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::st;
\&
\&    use vars qw(@ISA $imp_data_size);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::st);
\&    $imp_data_size = 0;
\&
\&    package DBD::Foo::Statement;
\&
\&    use vars qw(@ISA);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::Statement);
\&
\&    package DBD::Foo::Table;
\&
\&    use vars qw(@ISA);
\&
\&    @ISA = qw(DBI::DBD::SqlEngine::Table);
\&
\&    1;
.Ve
.PP
Tiny, eh? And all you have now is a \s-1DBD\s0 named foo which will is able to
deal with temporary tables, as long as you use SQL::Statement. In
DBI::SQL::Nano environments, this \s-1DBD\s0 can do nothing.
.SS "Deal with own attributes"
.IX Subsection "Deal with own attributes"
Before we start doing usable stuff with our \s-1DBI\s0 driver, we need to think
about what we want to do and how we want to do it.
.PP
Do we need tunable knobs accessible by users? Do we need status
information? All this is handled in attributes of the database handles (be
careful when your \s-1DBD\s0 is running \*(L"behind\*(R" a DBD::Gofer proxy).
.PP
How come the attributes into the \s-1DBD\s0 and how are they fetchable by the
user? Good question, but you should know because you've read the \s-1DBI\s0
documentation.
.PP
\&\f(CW\*(C`DBI::DBD::SqlEngine::db::FETCH\*(C'\fR and \f(CW\*(C`DBI::DBD::SqlEngine::db::STORE\*(C'\fR
taking care for you \- all they need to know is which attribute names
are valid and mutable or immutable. Tell them by adding
\&\f(CW\*(C`init_valid_attributes\*(C'\fR to your db class:
.PP
.Vb 3
\&    sub init_valid_attributes
\&    {
\&        my $dbh = $_[0];
\&
\&        $dbh\->SUPER::init_valid_attributes ();
\&
\&        $dbh\->{foo_valid_attrs} = {
\&            foo_version         => 1,   # contains version of this driver
\&            foo_valid_attrs     => 1,   # contains the valid attributes of foo drivers
\&            foo_readonly_attrs  => 1,   # contains immutable attributes of foo drivers
\&            foo_bar             => 1,   # contains the bar attribute
\&            foo_baz             => 1,   # contains the baz attribute
\&            foo_manager         => 1,   # contains the manager of the driver instance
\&            foo_manager_type    => 1,   # contains the manager class of the driver instance
\&        };
\&        $dbh\->{foo_readonly_attrs} = {
\&            foo_version         => 1,   # ensure no\-one modifies the driver version
\&            foo_valid_attrs     => 1,   # do not permit to add more valid attributes ...
\&            foo_readonly_attrs  => 1,   # ... or make the immutable mutable
\&            foo_manager         => 1,   # manager is set internally only
\&        };
\&
\&        return $dbh;
\&    }
.Ve
.PP
Woooho \- but now the user cannot assign new managers? This is intended,
overwrite \f(CW\*(C`STORE\*(C'\fR to handle it!
.PP
.Vb 3
\&    sub STORE ($$$)
\&    {
\&        my ( $dbh, $attrib, $value ) = @_;
\&
\&        $dbh\->SUPER::STORE( $attrib, $value );
\&
\&        # we\*(Aqre still alive, so no exception is thrown ...
\&        # by DBI::DBD::SqlEngine::db::STORE
\&        if ( $attrib eq "foo_manager_type" )
\&        {
\&            $dbh\->{foo_manager} = $dbh\->{foo_manager_type}\->new();
\&            # ... probably correct some states based on the new
\&            # foo_manager_type \- see DBD::Sys for an example
\&        }
\&    }
.Ve
.PP
But ... my driver runs without a manager until someone first assignes
a \f(CW\*(C`foo_manager_type\*(C'\fR. Well, no \- there're two places where you can
initialize defaults:
.PP
.Vb 3
\&    sub init_default_attributes
\&    {
\&        my ($dbh, $phase) = @_;
\&
\&        $dbh\->SUPER::init_default_attributes($phase);
\&
\&        if( 0 == $phase )
\&        {
\&            # init all attributes which have no knowledge about
\&            # user settings from DSN or the attribute hash
\&            $dbh\->{foo_manager_type} = "DBD::Foo::Manager";
\&        }
\&        elsif( 1 == $phase )
\&        {
\&            # init phase with more knowledge from DSN or attribute
\&            # hash
\&            $dbh\->{foo_manager} = $dbh\->{foo_manager_type}\->new();
\&        }
\&
\&        return $dbh;
\&    }
.Ve
.PP
So far we can prevent the users to use our database driver as data
storage for anything and everything. We care only about the real important
stuff for peace on earth and alike attributes. But in fact, the driver
still can't do anything. It can do less than nothing \- meanwhile it's
not a stupid storage area anymore.
.SS "User comfort"
.IX Subsection "User comfort"
\&\f(CW\*(C`DBI::DBD::SqlEngine\*(C'\fR since \f(CW0.05\fR consolidates all persistent meta data
of a table into a single structure stored in \f(CW\*(C`$dbh\->{sql_meta}\*(C'\fR. While
DBI::DBD::SqlEngine provides only readonly access to this structure,
modifications are still allowed.
.PP
Primarily DBI::DBD::SqlEngine provides access via the setters
\&\f(CW\*(C`get_sql_engine_meta\*(C'\fR, \f(CW\*(C`get_single_table_meta\*(C'\fR, \f(CW\*(C`set_single_table_meta\*(C'\fR,
\&\f(CW\*(C`set_sql_engine_meta\*(C'\fR and \f(CW\*(C`clear_sql_engine_meta\*(C'\fR. Those methods are
easily accessible by the users via the \f(CW\*(C`$dbh\->func ()\*(C'\fR interface
provided by \s-1DBI.\s0 Well, many users don't feel comfortize when calling
.PP
.Vb 2
\&    # don\*(Aqt require extension for tables cars
\&    $dbh\->func ("cars", "f_ext", ".csv", "set_sql_engine_meta");
.Ve
.PP
DBI::DBD::SqlEngine will inject a method into your driver to increase the
user comfort to allow:
.PP
.Vb 2
\&    # don\*(Aqt require extension for tables cars
\&    $dbh\->foo_set_meta ("cars", "f_ext", ".csv");
.Ve
.PP
Better, but here and there users likes to do:
.PP
.Vb 2
\&    # don\*(Aqt require extension for tables cars
\&    $dbh\->{foo_tables}\->{cars}\->{f_ext} = ".csv";
.Ve
.PP
This interface is provided when derived \s-1DBD\s0's define following in
\&\f(CW\*(C`init_valid_attributes\*(C'\fR (re-capture \*(L"Deal with own attributes\*(R"):
.PP
.Vb 3
\&    sub init_valid_attributes
\&    {
\&        my $dbh = $_[0];
\&
\&        $dbh\->SUPER::init_valid_attributes ();
\&
\&        $dbh\->{foo_valid_attrs} = {
\&            foo_version         => 1,   # contains version of this driver
\&            foo_valid_attrs     => 1,   # contains the valid attributes of foo drivers
\&            foo_readonly_attrs  => 1,   # contains immutable attributes of foo drivers
\&            foo_bar             => 1,   # contains the bar attribute
\&            foo_baz             => 1,   # contains the baz attribute
\&            foo_manager         => 1,   # contains the manager of the driver instance
\&            foo_manager_type    => 1,   # contains the manager class of the driver instance
\&            foo_meta            => 1,   # contains the public interface to modify table meta attributes
\&        };
\&        $dbh\->{foo_readonly_attrs} = {
\&            foo_version         => 1,   # ensure no\-one modifies the driver version
\&            foo_valid_attrs     => 1,   # do not permit to add more valid attributes ...
\&            foo_readonly_attrs  => 1,   # ... or make the immutable mutable
\&            foo_manager         => 1,   # manager is set internally only
\&            foo_meta            => 1,   # ensure public interface to modify table meta attributes are immutable
\&        };
\&
\&        $dbh\->{foo_meta} = "foo_tables";
\&
\&        return $dbh;
\&    }
.Ve
.PP
This provides a tied hash in \f(CW\*(C`$dbh\->{foo_tables}\*(C'\fR and a tied hash for
each table's meta data in \f(CW\*(C`$dbh\->{foo_tables}\->{$table_name}\*(C'\fR.
Modifications on the table meta attributes are done using the table
methods:
.PP
.Vb 2
\&    sub get_table_meta_attr { ... }
\&    sub set_table_meta_attr { ... }
.Ve
.PP
Both methods can adjust the attribute name for compatibility reasons, e.g.
when former versions of the \s-1DBD\s0 allowed different names to be used for the
same flag:
.PP
.Vb 5
\&    my %compat_map = (
\&                       abc => \*(Aqfoo_abc\*(Aq,
\&                       xyz => \*(Aqfoo_xyz\*(Aq,
\&                     );
\&    _\|_PACKAGE_\|_\->register_compat_map( \e%compat_map );
.Ve
.PP
If any user modification on a meta attribute needs reinitialization of
the meta structure (in case of \f(CW\*(C`DBI::DBD::SqlEngine\*(C'\fR these are the attributes
\&\f(CW\*(C`f_file\*(C'\fR, \f(CW\*(C`f_dir\*(C'\fR, \f(CW\*(C`f_ext\*(C'\fR and \f(CW\*(C`f_lockfile\*(C'\fR), inform DBI::DBD::SqlEngine by
doing
.PP
.Vb 5
\&    my %reset_on_modify = (
\&                            foo_xyz => "foo_bar",
\&                            foo_abc => "foo_bar",
\&                          );
\&    _\|_PACKAGE_\|_\->register_reset_on_modify( \e%reset_on_modify );
.Ve
.PP
The next access to the table meta data will force DBI::DBD::SqlEngine to re-do the
entire meta initialization process.
.PP
Any further action which needs to be taken can handled in
\&\f(CW\*(C`table_meta_attr_changed\*(C'\fR:
.PP
.Vb 6
\&    sub table_meta_attr_changed
\&    {
\&        my ($class, $meta, $attrib, $value) = @_;
\&        ...
\&        $class\->SUPER::table_meta_attr_changed ($meta, $attrib, $value);
\&    }
.Ve
.PP
This is done before the new value is set in \f(CW$meta\fR, so the attribute
changed handler can act depending on the old value.
.SS "Dealing with Tables"
.IX Subsection "Dealing with Tables"
Let's put some life into it \- it's going to be time for it.
.PP
This is a good point where a quick side step to SQL::Statement::Embed
will help to shorten the next paragraph. The documentation in
SQL::Statement::Embed regarding embedding in own \s-1DBD\s0's works pretty
fine with SQL::Statement and DBI::SQL::Nano.
.PP
Second look should go to DBI::DBD::SqlEngine::Developers to get a
picture over the driver part of the table \s-1API.\s0 Usually there isn't much
to do for an easy driver.
.SS "Testing"
.IX Subsection "Testing"
Now you should have your first own \s-1DBD.\s0 Was easy, wasn't it?  But does
it work well? Prove it by writing tests and remember to use
dbd_edit_mm_attribs from \s-1DBI::DBD\s0 to ensure testing even rare cases.
.SH "AUTHOR"
.IX Header "AUTHOR"
This guide is written by Jens Rehsack. DBI::DBD::SqlEngine is written by
Jens Rehsack using code from DBD::File originally written by Jochen
Wiedmann and Jeff Zucker.
.PP
The module DBI::DBD::SqlEngine is currently maintained by
.PP
H.Merijn Brand < h.m.brand at xs4all.nl > and
Jens Rehsack  < rehsack at googlemail.com >
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2010 by H.Merijn Brand & Jens Rehsack
.PP
All rights reserved.
.PP
You may freely distribute and/or modify this module under the terms of
either the \s-1GNU\s0 General Public License (\s-1GPL\s0) or the Artistic License, as
specified in the Perl \s-1README\s0 file.
                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::FAQ.3pm                                 0100644 0001750 0001750 00000127513 12566241601 022417  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::FAQ 3"
.TH DBI::FAQ 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::FAQ \-\- The Frequently Asked Questions for the Perl5 Database Interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    perldoc DBI::FAQ
.Ve
.SH "VERSION"
.IX Header "VERSION"
This document is currently at version \fI0.38\fR, as of \fIFebruary 8th, 2000\fR.
.PP
That's \fBvery\fR old. A newer \s-1FAQ\s0 can be found at <http://faq.dbi\-support.com/>
.PP
Neither this document nor that web site are actively maintained.
Volunteers are welcome.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document serves to answer the most frequently asked questions on both
the \s-1DBI\s0 Mailing Lists and personally to members of the \s-1DBI\s0 development team.
.SH "Basic Information & Information Sources"
.IX Header "Basic Information & Information Sources"
.SS "1.1 What is \s-1DBI,\s0 DBperl, Oraperl and *perl?"
.IX Subsection "1.1 What is DBI, DBperl, Oraperl and *perl?"
To quote Tim Bunce, the architect and author of \s-1DBI:\s0
.PP
.Vb 4
\&      DBI is a database access Application Programming Interface (API)
\&      for the Perl Language. The DBI API Specification defines a set
\&      of functions, variables and conventions that provide a consistent
\&      database interface independent of the actual database being used.
.Ve
.PP
In simple language, the \s-1DBI\s0 interface allows users to access multiple database
types transparently. So, if you connecting to an Oracle, Informix, mSQL, Sybase
or whatever database, you don't need to know the underlying mechanics of the
3GL layer. The \s-1API\s0 defined by \s-1DBI\s0 will work on \fIall\fR these database types.
.PP
A similar benefit is gained by the ability to connect to two \fIdifferent\fR
databases of different vendor within the one perl script, \fIie\fR, I want
to read data from an Oracle database and insert it back into an Informix
database all within one program. The \s-1DBI\s0 layer allows you to do this simply
and powerfully.
.PP
\&\fIDBperl\fR is the old name for the interface specification. It's usually
now used to denote perl\fI4\fR modules on database interfacing, such as,
\&\fIoraperl\fR, \fIisqlperl\fR, \fIingperl\fR and so on. These interfaces
didn't have a standard \s-1API\s0 and are generally \fInot\fR supported.
.PP
Here's a list of DBperl modules, their corresponding \s-1DBI\s0 counterparts and
support information. \fIPlease note\fR, the author's listed here generally
\&\fIdo not\fR maintain the \s-1DBI\s0 module for the same database. These email
addresses are unverified and should only be used for queries concerning the
perl4 modules listed below. \s-1DBI\s0 driver queries should be directed to the
\&\fIdbi-users\fR mailing list.
.PP
.Vb 10
\&    Module Name Database Required   Author          DBI
\&    \-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-   \-\-\-\-\-\-          \-\-\-
\&    Sybperl     Sybase              Michael Peppler DBD::Sybase
\&                                    <mpeppler@itf.ch>
\&    Oraperl     Oracle 6 & 7        Kevin Stock     DBD::Oracle
\&                                    <dbi\-users@perl.org>
\&    Ingperl     Ingres              Tim Bunce &     DBD::Ingres
\&                                    Ted Lemon
\&                                    <dbi\-users@perl.org>
\&    Interperl   Interbase           Buzz Moschetti  DBD::Interbase
\&                                    <buzz@bear.com>
\&    Uniperl     Unify 5.0           Rick Wargo      None
\&                                    <rickers@coe.drexel.edu>
\&    Pgperl      Postgres            Igor Metz       DBD::Pg
\&                                    <metz@iam.unibe.ch>
\&    Btreeperl   NDBM                John Conover    SDBM?
\&                                    <john@johncon.com>
\&    Ctreeperl   C\-Tree              John Conover    None
\&                                    <john@johncon.com>
\&    Cisamperl   Informix C\-ISAM     Mathias Koerber None
\&                                    <mathias@unicorn.swi.com.sg>
\&    Duaperl     X.500 Directory     Eric Douglas    None
\&                User Agent
.Ve
.PP
However, some \s-1DBI\s0 modules have DBperl emulation layers, so, \fIDBD::Oracle\fR
comes with an Oraperl emulation layer, which allows you to run legacy oraperl
scripts without modification. The emulation layer translates the oraperl \s-1API\s0
calls into \s-1DBI\s0 calls and executes them through the \s-1DBI\s0 switch.
.PP
Here's a table of emulation layer information:
.PP
.Vb 8
\&    Module                  Emulation Layer     Status
\&    \-\-\-\-\-\-          \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-     \-\-\-\-\-\-
\&    DBD::Oracle     Oraperl             Complete
\&    DBD::Informix   Isqlperl            Under development
\&    DBD::Ingres     Ingperl             Complete?
\&    DBD::Sybase     Sybperl             Working? ( Needs verification )
\&    DBD::mSQL       Msqlperl            Experimentally released with
\&                                        DBD::mSQL\-0.61
.Ve
.PP
The \fIMsqlperl\fR emulation is a special case. \fIMsqlperl\fR is a perl5 driver
for \fImSQL\fR databases, but does not conform to the \s-1DBI\s0 Specification. It's
use is being deprecated in favour of \fIDBD::mSQL\fR. \fIMsqlperl\fR may be downloaded
from \s-1CPAN \s0\fIvia\fR:
.PP
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Msqlperl
.Ve
.SS "1.2. Where can I get it from?"
.IX Subsection "1.2. Where can I get it from?"
The Comprehensive Perl Archive Network
resources should be used for retrieving up-to-date versions of the \s-1DBI\s0
and drivers. \s-1CPAN\s0 may be accessed \fIvia\fR Tom Christiansen's splendid
\&\fI\s-1CPAN\s0 multiplexer\fR program located at:
.PP
.Vb 1
\&    http://www.perl.com/CPAN/
.Ve
.PP
For more specific version information and exact URLs of drivers, please see
the \s-1DBI\s0 drivers list and the \s-1DBI\s0 module pages which can be found on:
.PP
.Vb 1
\&    http://dbi.perl.org/
.Ve
.PP
This list is automatically generated on a nightly basis from \s-1CPAN\s0 and should
be up-to-date.
.SS "1.3. Where can I get more information?"
.IX Subsection "1.3. Where can I get more information?"
There are a few information sources on \s-1DBI.\s0
.ie n .IP "\fI""Programming the Perl \s-1DBI""\s0\fR" 4
.el .IP "\fI``Programming the Perl \s-1DBI''\s0\fR" 4
.IX Item "Programming the Perl DBI"
\&\*(L"Programming the Perl \s-1DBI\*(R"\s0 is the \fIofficial\fR book on the \s-1DBI\s0 written by
Alligator Descartes and Tim Bunce and published by O'Reilly & Associates.
The book was released on February 9th, 2000.
.Sp
The table of contents is:
.Sp
.Vb 10
\&    Preface
\&    1. Introduction
\&        From Mainframes to Workstations
\&        Perl
\&        DBI in the Real World
\&        A Historical Interlude and Standing Stones
\&    2. Basic Non\-DBI Databases
\&        Storage Managers and Layers
\&        Query Languages and Data Functions
\&        Standing Stones and the Sample Database
\&        Flat\-File Databases
\&        Putting Complex Data into Flat Files
\&        Concurrent Database Access and Locking
\&        DBM Files and the Berkeley Database Manager
\&        The MLDBM Module
\&        Summary
\&    3. SQL and Relational Databases
\&        The Relational Database Methodology
\&        Datatypes and NULL Values
\&        Querying Data
\&        Modifying Data Within Tables
\&        Creating and Destroying Tables
\&    4. Programming with the DBI
\&        DBI Architecture
\&        Handles
\&        Data Source Names
\&        Connection and Disconnection
\&        Error Handling
\&        Utility Methods and Functions
\&    5. Interacting with the Database
\&        Issuing Simple Queries
\&        Executing Non\-SELECT Statements
\&        Binding Parameters to Statements
\&        Binding Output Columns
\&        do() Versus prepare()
\&        Atomic and Batch Fetching
\&    6. Advanced DBI
\&        Handle Attributes and Metadata
\&        Handling LONG/LOB Data
\&        Transactions, Locking, and Isolation
\&    7. ODBC and the DBI
\&        ODBC \-\- Embraced and Extended
\&        DBI \-\- Thrashed and Mutated
\&        The Nuts and Bolts of ODBC
\&        ODBC from Perl
\&        The Marriage of DBI and ODBC
\&        Questions and Choices
\&        Moving Between Win32::ODBC and the DBI
\&        And What About ADO?
\&    8. DBI Shell and Database Proxying
\&        dbish \-\- The DBI Shell
\&        Database Proxying
\&    A. DBI Specification
\&    B. Driver and Database Characteristics
\&    C. ASLaN Sacred Site Charter
\&    Index
.Ve
.Sp
The book should be available from all good bookshops and can be ordered online
either <I>via</I> O'Reilly & Associates
.Sp
.Vb 1
\&    http://www.oreilly.com/catalog/perldbi
.Ve
.Sp
or Amazon
.Sp
.Vb 1
\&    http://www.amazon.com/exec/obidos/ASIN/1565926994/dbi
.Ve
.IP "\fI\s-1POD\s0 documentation\fR" 4
.IX Item "POD documentation"
\&\fI\s-1POD\s0\fRs are chunks of documentation usually embedded within perl programs
that document the code ``\fIin place\fR'', providing a useful resource for
programmers and users of modules. \s-1POD\s0 for \s-1DBI\s0 and drivers is beginning to
become more commonplace, and documentation for these modules can be read
with the \f(CW\*(C`perldoc\*(C'\fR program included with Perl.
.RS 4
.IP "The \s-1DBI\s0 Specification" 4
.IX Item "The DBI Specification"
The \s-1POD\s0 for the \s-1DBI\s0 Specification can be read with the:
.Sp
.Vb 1
\&    perldoc DBI
.Ve
.Sp
command. The Specification also forms Appendix A of \*(L"Programming the Perl
\&\s-1DBI\*(R".\s0
.IP "Oraperl" 4
.IX Item "Oraperl"
Users of the Oraperl emulation layer bundled with \fIDBD::Oracle\fR, may read
up on how to program with the Oraperl interface by typing:
.Sp
.Vb 1
\&    perldoc Oraperl
.Ve
.Sp
This will produce an updated copy of the original oraperl man page written by
Kevin Stock for perl4. The oraperl \s-1API\s0 is fully listed and described there.
.IP "Drivers" 4
.IX Item "Drivers"
Users of the \s-1DBD\s0 modules may read about some of the private functions
and quirks of that driver by typing:
.Sp
.Vb 1
\&    perldoc <driver>
.Ve
.Sp
For example, the \fIDBD::mSQL\fR driver is bundled with driver-specific
documentation that can be accessed by typing
.Sp
.Vb 1
\&    perldoc DBD::mSQL
.Ve
.IP "Frequently Asked Questions" 4
.IX Item "Frequently Asked Questions"
This document, the \fIFrequently Asked Questions\fR is also available as \s-1POD\s0
documentation! You can read this on your own system by typing:
.Sp
.Vb 1
\&    perldoc DBI::FAQ
.Ve
.Sp
This may be more convenient to persons not permanently, or conveniently,
connected to the Internet. The \fI\s-1DBI::FAQ\s0\fR module should be downloaded and
installed for the more up-to-date version.
.Sp
The version of \fI\s-1DBI::FAQ\s0\fR shipped with the \f(CW\*(C`DBI\*(C'\fR module may be slightly out
of date.
.IP "\s-1POD\s0 in general" 4
.IX Item "POD in general"
Information on writing \s-1POD,\s0 and on the philosophy of \s-1POD\s0 in general, can be
read by typing:
.Sp
.Vb 1
\&    perldoc perlpod
.Ve
.Sp
Users with the Tk module installed may be interested to learn there is a
Tk-based \s-1POD\s0 reader available called \f(CW\*(C`tkpod\*(C'\fR, which formats \s-1POD\s0 in a convenient
and readable way. This is available \fIvia\fR \s-1CPAN\s0 as the module called
\&\fITk::POD\fR and is highly recommended.
.RE
.RS 4
.RE
.IP "\fIDriver and Database Characteristics\fR" 4
.IX Item "Driver and Database Characteristics"
The driver summaries that were produced for Appendix B of \*(L"Programming the
Perl \s-1DBI\*(R"\s0 are available online at:
.Sp
.Vb 1
\&    http://dbi.perl.org/
.Ve
.Sp
in the driver information table. These summaries contain standardised
information on each driver and database which should aid you in selecting
a database to use. It will also inform you quickly of any issues within
drivers or whether a driver is not fully compliant with the \s-1DBI\s0 Specification.
.IP "\fIRambles, Tidbits and Observations\fR" 4
.IX Item "Rambles, Tidbits and Observations"
.Vb 1
\&    http://dbi.perl.org/tidbits
.Ve
.Sp
There are a series of occasional rambles from various people on the
\&\s-1DBI\s0 mailing lists who, in an attempt to clear up a simple point, end up
drafting fairly comprehensive documents. These are quite often varying in
quality, but do provide some insights into the workings of the interfaces.
.IP "\fIArticles\fR" 4
.IX Item "Articles"
A list of articles discussing the \s-1DBI\s0 can be found on the \s-1DBI WWW\s0 page at:
.Sp
.Vb 1
\&    http://dbi.perl.org/
.Ve
.Sp
These articles are of varying quality and age, from the original Perl Journal
article written by Alligator and Tim, to more recent debacles published online
from about.com.
.IP "\fI\s-1README\s0 files\fR" 4
.IX Item "README files"
The \fI\s-1README\s0\fR files included with each driver occasionally contains
some useful information ( no, really! ) that may be pertinent to the user.
Please read them. It makes our worthless existences more bearable. These
can all be read from the main \s-1DBI WWW\s0 page at:
.Sp
.Vb 1
\&    http://dbi.perl.org/
.Ve
.IP "\fIMailing Lists\fR" 4
.IX Item "Mailing Lists"
There are three mailing lists for \s-1DBI:\s0
.Sp
.Vb 3
\&    dbi\-announce@perl.org     \-\- for announcements, very low traffic
\&    dbi\-users@perl.org        \-\- general user support
\&    dbi\-dev@perl.org          \-\- for driver developers (no user support)
.Ve
.Sp
For information on how to subscribe, set digest mode etc, and unsubscribe,
send an email message (the content will be ignored) to:
.Sp
.Vb 3
\&    dbi\-announce\-help@perl.org
\&    dbi\-users\-help@perl.org
\&    dbi\-dev\-help@perl.org
.Ve
.IP "\fIMailing List Archives\fR" 4
.IX Item "Mailing List Archives"
.RS 4
.PD 0
.IP "\fI\s-1US\s0 Mailing List Archives\fR" 4
.IX Item "US Mailing List Archives"
.PD
.Vb 1
\&    http://outside.organic.com/mail\-archives/dbi\-users/
.Ve
.Sp
Searchable hypermail archives of the three mailing lists, and some of the
much older traffic have been set up for users to browse.
.IP "\fIEuropean Mailing List Archives\fR" 4
.IX Item "European Mailing List Archives"
.Vb 1
\&    http://www.rosat.mpe\-garching.mpg.de/mailing\-lists/PerlDB\-Interest
.Ve
.Sp
As per the \s-1US\s0 archive above.
.RE
.RS 4
.RE
.SH "Compilation Problems"
.IX Header "Compilation Problems"
.ie n .SS "2.1. Compilation problems or ""It fails the test!"""
.el .SS "2.1. Compilation problems or ``It fails the test!''"
.IX Subsection "2.1. Compilation problems or It fails the test!"
First off, consult the \s-1README\s0 for that driver in case there is useful
information about the problem. It may be a known problem for your given
architecture and operating system or database. You can check the \s-1README\s0
files for each driver in advance online at:
.PP
.Vb 1
\&    http://dbi.perl.org/
.Ve
.PP
If it's a known problem, you'll probably have to wait till it gets fixed. If
you're \fIreally\fR needing it fixed, try the following:
.IP "\fIAttempt to fix it yourself\fR" 4
.IX Item "Attempt to fix it yourself"
This technique is generally \fInot\fR recommended to the faint-hearted.
If you do think you have managed to fix it, then, send a patch file
( context diff ) to the author with an explanation of:
.RS 4
.IP "\(bu" 4
What the problem was, and test cases, if possible.
.IP "\(bu" 4
What you needed to do to fix it. Please make sure you mention everything.
.IP "\(bu" 4
Platform information, database version, perl version, module version and
\&\s-1DBI\s0 version.
.RE
.RS 4
.RE
.IP "\fIEmail the author\fR Do \fI\s-1NOT\s0\fR whinge!" 4
.IX Item "Email the author Do NOT whinge!"
Please email the address listed in the \s-1WWW\s0 pages for whichever driver you
are having problems with. Do \fInot\fR directly email the author at a
known address unless it corresponds with the one listed.
.Sp
We tend to have real jobs to do, and we do read the mailing lists for
problems. Besides, we may not have access to <\fIinsert your
favourite brain-damaged platform here\fR> and couldn't be of any
assistance anyway! Apologies for sounding harsh, but that's the way of it!
.Sp
However, you might catch one of these creative genii at 3am when we're
doing this sort of stuff anyway, and get a patch within 5 minutes. The
atmosphere in the \s-1DBI\s0 circle is that we \fIdo\fR appreciate the users'
problems, since we work in similar environments.
.Sp
If you are planning to email the author, please furnish as much information
as possible, \fIie\fR:
.RS 4
.IP "\(bu" 4
\&\fI\s-1ALL\s0\fR the information asked for in the \s-1README\s0 file in
the problematic module. And we mean \fI\s-1ALL\s0\fR of it. We don't
put lines like that in documentation for the good of our health, or
to meet obscure \s-1README\s0 file standards of length.
.IP "\(bu" 4
If you have a core dump, try the \fIDevel::CoreStack\fR module for
generating a stack trace from the core dump. Send us that too.
\&\fIDevel::CoreStack\fR can be found on \s-1CPAN\s0 at:
.Sp
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Devel::CoreStack
.Ve
.IP "\(bu" 4
Module versions, perl version, test cases, operating system versions
and \fIany other pertinent information\fR.
.RE
.RS 4
.Sp
Remember, the more information you send us, the quicker we can track
problems down. If you send us no useful information, expect nothing back.
.Sp
Finally, please be aware that some authors, including Tim Bunce, specifically
request that you do \fInot\fR mail them directly. Please respect their wishes and
use the email addresses listed in the appropriate module \f(CW\*(C`README\*(C'\fR file.
.RE
.IP "\fIEmail the dbi-users Mailing List\fR" 4
.IX Item "Email the dbi-users Mailing List"
It's usually a fairly intelligent idea to \fIcc\fR the mailing list
anyway with problems. The authors all read the lists, so you lose nothing
by mailing there.
.SH "Platform and Driver Issues"
.IX Header "Platform and Driver Issues"
.SS "3.1 What's the difference between \s-1ODBC\s0 and \s-1DBI\s0?"
.IX Subsection "3.1 What's the difference between ODBC and DBI?"
In terms of architecture \- not much: Both define programming
interfaces. Both allow multiple drivers to be loaded to do the
actual work.
.PP
In terms of ease of use \- much: The \s-1DBI\s0 is a 'high level' interface
that, like Perl itself, strives to make the simple things easy while
still making the hard things possible. The \s-1ODBC\s0 is a 'low level'
interface. All nuts-bolts-knobs-and-dials.
.PP
Now there's an \s-1ODBC\s0 driver for the \s-1DBI \s0(\s-1DBD::ODBC\s0) the \*(L"What's the
difference\*(R" question is more usefully rephrased as:
.PP
Chapter 7 of \*(L"Programming the Perl \s-1DBI\*(R"\s0 covers this topic in far more
detail and should be consulted.
.SS "3.2 What's the difference between Win32::ODBC and \s-1DBD::ODBC\s0?"
.IX Subsection "3.2 What's the difference between Win32::ODBC and DBD::ODBC?"
The \s-1DBI,\s0 and thus \s-1DBD::ODBC,\s0 has a different philosophy from the
Win32::ODBC module:
.PP
The Win32::ODBC module is a 'thin' layer over the low-level \s-1ODBC API.\s0
The \s-1DBI\s0 defines a simpler 'higher level' interface.
.PP
The Win32::ODBC module gives you access to more of the \s-1ODBC API.\s0
The \s-1DBI\s0 and \s-1DBD::ODBC\s0 give you access to only the essentials.
(But, unlike Win32::ODBC, the \s-1DBI\s0 and \s-1DBD::ODBC\s0 do support parameter
binding and multiple prepared statements which reduces the load on
the database server and can dramatically increase performance.)
.PP
The Win32::ODBC module only works on Win32 systems.
The \s-1DBI\s0 and \s-1DBD::ODBC\s0 are very portable and work on Win32 and Unix.
.PP
The \s-1DBI\s0 and \s-1DBD::ODBC\s0 modules are supplied as a standard part of the
Perl 5.004 binary distribution for Win32 (they don't work with the
older, non-standard, ActiveState port).
.PP
Scripts written with the \s-1DBI\s0 and \s-1DBD::ODBC\s0 are faster than Win32::ODBC
on Win32 and are trivially portable to other supported database types.
.PP
The \s-1DBI\s0 offers optional automatic printing or \fIdie()\fRing on errors which
makes applications simpler and more robust.
.PP
The current \s-1DBD::ODBC\s0 driver version 0.16 is new and not yet fully stable.
A new release is due soon [relative to the date of the next \s-1TPJ\s0 issue :\-]
and will be much improved and offer more \s-1ODBC\s0 functionality.
.PP
To summarise: The Win32::ODBC module is your best choice if you need
access to more of the \s-1ODBC API\s0 than the \s-1DBI\s0 gives you. Otherwise, the
\&\s-1DBI\s0 and \s-1DBD::ODBC\s0 combination may be your best bet.
.PP
Chapter 7 of \*(L"Programming the Perl \s-1DBI\*(R"\s0 covers this topic in far more
detail and should be consulted.
.SS "3.3 Is \s-1DBI\s0 supported under Windows 95 / \s-1NT\s0 platforms?"
.IX Subsection "3.3 Is DBI supported under Windows 95 / NT platforms?"
Finally, yes! Jeff Urlwin has been working diligently on building
\&\fI\s-1DBI\s0\fR and \fI\s-1DBD::ODBC\s0\fR under these platforms, and, with the
advent of a stabler perl and a port of \fIMakeMaker\fR, the project has
come on by great leaps and bounds.
.PP
The \fI\s-1DBI\s0\fR and \fIDBD::Oracle\fR Win32 ports are now a standard part of \s-1DBI,\s0
so, downloading \fI\s-1DBI\s0\fR of version higher than \fI0.81\fR should work fine as
should using the most recent \fIDBD::Oracle\fR version.
.SS "3.4 Can I access Microsoft Access or SQL-Server databases with \s-1DBI\s0?"
.IX Subsection "3.4 Can I access Microsoft Access or SQL-Server databases with DBI?"
Yes, use the \fI\s-1DBD::ODBC\s0\fR driver.
.SS "3.5 Is there a \s-1DBD\s0 for <\fIinsert favourite database here\fP>?"
.IX Subsection "3.5 Is there a DBD for <insert favourite database here>?"
First check if a driver is available on \s-1CPAN\s0 by searching for the name of the
database (including common abbreviations and aliases).
.PP
Here's a general query that'll match all distributions:
.PP
.Vb 1
\&    http://search.cpan.org/search?query=DBD&mode=dist
.Ve
.PP
If you can't find a driver that way, you could check if the database supports
\&\s-1ODBC\s0 drivers. If so then you could probably use the \s-1DBD::ODBC\s0 driver:
.PP
.Vb 1
\&    http://search.cpan.org/dist/DBD\-ODBC/
.Ve
.PP
If not, then try asking on the dbi-users mailing list.
.SS "3.6 What's \s-1DBM\s0? And why should I use \s-1DBI\s0 instead?"
.IX Subsection "3.6 What's DBM? And why should I use DBI instead?"
Extracted from ``\fI\s-1DBI \-\s0 The Database Interface for Perl 5\fR'':
.PP
.Vb 3
\&    \`\`UNIX was originally blessed with simple file\-based \`\`databases\*(Aq\*(Aq, namely
\&    the dbm system. dbm lets you store data in files, and retrieve
\&    that data quickly. However, it also has serious drawbacks.
\&
\&        File Locking
\&
\&        The dbm systems did not allow particularly robust file locking
\&        capabilities, nor any capability for correcting problems arising through
\&        simultaneous writes [ to the database ].
\&
\&        Arbitrary Data Structures
\&
\&        The dbm systems only allows a single fixed data structure:
\&        key\-value pairs. That value could be a complex object, such as a
\&        [ C ] struct, but the key had to be unique. This was a large
\&        limitation on the usefulness of dbm systems.
\&
\&    However, dbm systems still provide a useful function for users with
\&    simple datasets and limited resources, since they are fast, robust and
\&    extremely well\-tested. Perl modules to access dbm systems have now
\&    been integrated into the core Perl distribution via the
\&    AnyDBM_File module.\*(Aq\*(Aq
.Ve
.PP
To sum up, \s-1DBM\s0 is a perfectly satisfactory solution for essentially read-only
databases, or small and simple datasets. However, for more
scalable dataset handling, not to mention robust transactional locking,
users are recommended to use a more powerful database engine \fIvia\fR \fI\s-1DBI\s0\fR.
.PP
Chapter 2 of \*(L"Programming the Perl \s-1DBI\*(R"\s0 discusses \s-1DBM\s0 files in detail.
.SS "3.7 What database do you recommend me using?"
.IX Subsection "3.7 What database do you recommend me using?"
This is a particularly thorny area in which an objective answer is difficult
to come by, since each dataset, proposed usage and system configuration
differs from person to person.
.PP
From the current author's point of view, if the dataset is relatively
small, being tables of less than 1 million rows, and less than 1000 tables
in a given database, then \fImSQL\fR is a perfectly acceptable solution
to your problem. This database is extremely cheap, is wonderfully robust
and has excellent support. More information is available on the Hughes
Technology \s-1WWW\s0 site at:
.PP
.Vb 1
\&    http://www.hughes.com.au
.Ve
.PP
You may also wish to look at MySQL which is a more powerful database engine
that has a similar feel to mSQL.
.PP
.Vb 1
\&    http://www.tcx.se
.Ve
.PP
If the dataset is larger than 1 million row tables or 1000 tables, or if you
have either more money, or larger machines, I would recommend \fIOracle \s-1RDBMS\s0\fR.
Oracle's \s-1WWW\s0 site is an excellent source of more information.
.PP
.Vb 1
\&    http://www.oracle.com
.Ve
.PP
\&\fIInformix\fR is another high-end \s-1RDBMS\s0 that is worth considering. There are
several differences between Oracle and Informix which are too complex for
this document to detail. Information on Informix can be found on their
\&\s-1WWW\s0 site at:
.PP
.Vb 1
\&    http://www.informix.com
.Ve
.PP
In the case of \s-1WWW\s0 fronted applications, \fImSQL\fR may be a better option
due to slow connection times between a \s-1CGI\s0 script and the Oracle \s-1RDBMS\s0 and
also the amount of resource each Oracle connection will consume. \fImSQL\fR
is lighter resource-wise and faster.
.PP
These views are not necessarily representative of anyone else's opinions,
and do not reflect any corporate sponsorship or views. They are provided
\&\fIas-is\fR.
.SS "3.8 Is <\fIinsert feature here\fP> supported in \s-1DBI\s0?"
.IX Subsection "3.8 Is <insert feature here> supported in DBI?"
Given that we're making the assumption that the feature you have requested
is a non-standard database-specific feature, then the answer will be \fIno\fR.
.PP
\&\s-1DBI\s0 reflects a \fIgeneric\fR \s-1API\s0 that will work for most databases, and has
no database-specific functionality.
.PP
However, driver authors may, if they so desire, include hooks to database-specific
functionality through the \f(CW\*(C`func()\*(C'\fR method defined in the \s-1DBI API.\s0
Script developers should note that use of functionality provided \fIvia\fR
the \f(CW\*(C`func()\*(C'\fR methods is very unlikely to be portable across databases.
.SH "Programming Questions"
.IX Header "Programming Questions"
.SS "4.1 Is \s-1DBI\s0 any use for \s-1CGI\s0 programming?"
.IX Subsection "4.1 Is DBI any use for CGI programming?"
In a word, yes! \s-1DBI\s0 is hugely useful for \s-1CGI\s0 programming! In fact, I would
tentatively say that \s-1CGI\s0 programming is one of two top uses for \s-1DBI.\s0
.PP
\&\s-1DBI\s0 confers the ability to \s-1CGI\s0 programmers to power WWW-fronted databases
to their users, which provides users with vast quantities of ordered
data to play with. \s-1DBI\s0 also provides the possibility that, if a site is
receiving far too much traffic than their database server can cope with, they
can upgrade the database server behind the scenes with no alterations to
the \s-1CGI\s0 scripts.
.SS "4.2 How do I get faster connection times with DBD::Oracle and \s-1CGI\s0?"
.IX Subsection "4.2 How do I get faster connection times with DBD::Oracle and CGI?"
.Vb 1
\&    Contributed by John D. Groenveld
.Ve
.PP
The Apache \f(CW\*(C`httpd\*(C'\fR maintains a pool of \f(CW\*(C`httpd\*(C'\fR children to service client
requests.
.PP
Using the Apache \fImod_perl\fR module by \fIDoug MacEachern\fR, the perl
interpreter is embedded with the \f(CW\*(C`httpd\*(C'\fR children. The \s-1CGI, DBI,\s0 and your
other favorite modules can be loaded at the startup of each child. These
modules will not be reloaded unless changed on disk.
.PP
For more information on Apache, see the Apache Project's \s-1WWW\s0 site:
.PP
.Vb 1
\&    http://www.apache.org
.Ve
.PP
The \fImod_perl\fR module can be downloaded from \s-1CPAN \s0\fIvia\fR:
.PP
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Apache
.Ve
.SS "4.3 How do I get persistent connections with \s-1DBI\s0 and \s-1CGI\s0?"
.IX Subsection "4.3 How do I get persistent connections with DBI and CGI?"
.Vb 1
\&    Contributed by John D. Groenveld
.Ve
.PP
Using Edmund Mergl's \fIApache::DBI\fR module, database logins are stored in a
hash with each of these \f(CW\*(C`httpd\*(C'\fR child. If your application is based on a
single database user, this connection can be started with each child.
Currently, database connections cannot be shared between \f(CW\*(C`httpd\*(C'\fR children.
.PP
\&\fIApache::DBI\fR can be downloaded from \s-1CPAN \s0\fIvia\fR:
.PP
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Apache::DBI
.Ve
.ie n .SS "4.4 ``When I run a perl script from the command line, it works, but, when I run it under the ""httpd"", it fails!'' Why?"
.el .SS "4.4 ``When I run a perl script from the command line, it works, but, when I run it under the \f(CWhttpd\fP, it fails!'' Why?"
.IX Subsection "4.4 ``When I run a perl script from the command line, it works, but, when I run it under the httpd, it fails!'' Why?"
Basically, a good chance this is occurring is due to the fact that the user
that you ran it from the command line as has a correctly configured set of
environment variables, in the case of \fIDBD::Oracle\fR, variables like
\&\f(CW\*(C`ORACLE_HOME\*(C'\fR, \f(CW\*(C`ORACLE_SID\*(C'\fR or \f(CW\*(C`TWO_TASK\*(C'\fR.
.PP
The \f(CW\*(C`httpd\*(C'\fR process usually runs under the user id of \f(CW\*(C`nobody\*(C'\fR,
which implies there is no configured environment. Any scripts attempting to
execute in this situation will correctly fail.
.PP
One way to solve this problem is to set the environment for your database in a
\&\f(CW\*(C`BEGIN { }\*(C'\fR block at the top of your script. Another technique is to configure
your \s-1WWW\s0 server to pass-through certain environment variables to your \s-1CGI\s0
scripts.
.PP
Similarly, you should check your \f(CW\*(C`httpd\*(C'\fR error logfile for any clues,
as well as the ``Idiot's Guide To Solving Perl / \s-1CGI\s0 Problems'' and
``Perl \s-1CGI\s0 Programming \s-1FAQ\s0'' for further information. It is
unlikely the problem is DBI-related.
.PP
The ``Idiot's Guide To Solving Perl / \s-1CGI\s0 Problems'' can be located at:
.PP
.Vb 1
\&    http://www.perl.com/perl/faq/index.html
.Ve
.PP
as can the ``Perl \s-1CGI\s0 Programming \s-1FAQ\s0''. Read \fI\s-1BOTH\s0\fR these documents
carefully!
.ie n .SS "4.5 How do I get the number of rows returned from a ""SELECT"" statement?"
.el .SS "4.5 How do I get the number of rows returned from a \f(CWSELECT\fP statement?"
.IX Subsection "4.5 How do I get the number of rows returned from a SELECT statement?"
Count them. Read the \s-1DBI\s0 docs for the \f(CW\*(C`rows()\*(C'\fR method.
.SH "Miscellaneous Questions"
.IX Header "Miscellaneous Questions"
.SS "5.1 Can I do multi-threading with \s-1DBI\s0?"
.IX Subsection "5.1 Can I do multi-threading with DBI?"
Perl version 5.005 and later can be built to support multi-threading.
The \s-1DBI,\s0 as of version 1.02, does not yet support multi-threading
so it would be unsafe to let more than one thread enter the \s-1DBI\s0 at
the same time.
.PP
It is expected that some future version of the \s-1DBI\s0 will at least be
thread-safe (but not thread-hot) by automatically blocking threads
entering the \s-1DBI\s0 while it's already in use.
.SS "5.2 How do I handle \s-1BLOB\s0 data with \s-1DBI\s0?"
.IX Subsection "5.2 How do I handle BLOB data with DBI?"
Handling \s-1BLOB\s0 data with the \s-1DBI\s0 is very straight-forward. \s-1BLOB\s0 columns are
specified in a \s-1SELECT\s0 statement as per normal columns. However, you also
need to specify a maximum \s-1BLOB\s0 size that the <I>database handle</I> can
fetch using the \f(CW\*(C`LongReadLen\*(C'\fR attribute.
.PP
For example:
.PP
.Vb 3
\&    ### $dbh is a connected database handle
\&    $sth = $dbh\->prepare( "SELECT blob_column FROM blobby_table" );
\&    $sth\->execute;
.Ve
.PP
would fail.
.PP
.Vb 3
\&    ### $dbh is a connected database handle
\&    ### Set the maximum BLOB size...
\&    $dbh\->{LongReadLen} = 16384;        ### 16Kb...Not much of a BLOB!
\&
\&    $sth = $dbh\->prepare( "..." );
.Ve
.PP
would succeed <I>provided no column values were larger than the specified
value</I>.
.PP
If the \s-1BLOB\s0 data is longer than the value of \f(CW\*(C`LongReadLen\*(C'\fR, then an
error will occur. However, the \s-1DBI\s0 provides an additional piece of
functionality that will automatically truncate the fetched \s-1BLOB\s0 to the
size of \f(CW\*(C`LongReadLen\*(C'\fR if it is longer. This does not cause an error to
occur, but may make your fetched \s-1BLOB\s0 data useless.
.PP
This behaviour is regulated by the \f(CW\*(C`LongTruncOk\*(C'\fR attribute which is
set to a false value by default ( thus making overlong \s-1BLOB\s0 fetches fail ).
.PP
.Vb 3
\&    ### Set BLOB handling such that it\*(Aqs 16Kb and can be truncated
\&    $dbh\->{LongReadLen} = 16384;
\&    $dbh\->{LongTruncOk} = 1;
.Ve
.PP
Truncation of \s-1BLOB\s0 data may not be a big deal in cases where the \s-1BLOB\s0
contains run-length encoded data, but data containing checksums at the end,
for example, a \s-1ZIP\s0 file, would be rendered useless.
.SS "5.3 How can I invoke stored procedures with \s-1DBI\s0?"
.IX Subsection "5.3 How can I invoke stored procedures with DBI?"
The \s-1DBI\s0 does not define a database-independent way of calling stored procedures.
.PP
However, most database that support them also provide a way to call
them from \s-1SQL\s0 statements \- and the \s-1DBI\s0 certainly supports that.
.PP
So, assuming that you have created a stored procedure within the target
database, \fIeg\fR, an Oracle database, you can use \f(CW$dbh\fR\->\f(CW\*(C`do()\*(C'\fR to
immediately execute the procedure. For example,
.PP
.Vb 1
\&    $dbh\->do( "BEGIN someProcedure; END;" );   # Oracle\-specific
.Ve
.PP
You should also be able to \f(CW\*(C`prepare\*(C'\fR and \f(CW\*(C`execute\*(C'\fR, which is
the recommended way if you'll be calling the procedure often.
.SS "5.4 How can I get return values from stored procedures with \s-1DBI\s0?"
.IX Subsection "5.4 How can I get return values from stored procedures with DBI?"
.Vb 1
\&    Contributed by Jeff Urlwin
\&
\&    $sth = $dbh\->prepare( "BEGIN foo(:1, :2, :3); END;" );
\&    $sth\->bind_param(1, $a);
\&    $sth\->bind_param_inout(2, \e$path, 2000);
\&    $sth\->bind_param_inout(3, \e$success, 2000);
\&    $sth\->execute;
.Ve
.PP
Remember to perform error checking, though! ( Or use the \f(CW\*(C`RaiseError\*(C'\fR
attribute ).
.SS "5.5 How can I create or drop a database with \s-1DBI\s0?"
.IX Subsection "5.5 How can I create or drop a database with DBI?"
Database creation and deletion are concepts that are entirely too abstract
to be adequately supported by \s-1DBI.\s0 For example, Oracle does not support the
concept of dropping a database at all! Also, in Oracle, the database
\&\fIserver\fR essentially \fIis\fR the database, whereas in mSQL, the
server process runs happily without any databases created in it. The
problem is too disparate to attack in a worthwhile way.
.PP
Some drivers, therefore, support database creation and deletion through
the private \f(CW\*(C`func()\*(C'\fR methods. You should check the documentation for
the drivers you are using to see if they support this mechanism.
.ie n .SS "5.6 How can I ""commit"" or ""rollback"" a statement with \s-1DBI\s0?"
.el .SS "5.6 How can I \f(CWcommit\fP or \f(CWrollback\fP a statement with \s-1DBI\s0?"
.IX Subsection "5.6 How can I commit or rollback a statement with DBI?"
See the \f(CW\*(C`commit()\*(C'\fR and \f(CW\*(C`rollback()\*(C'\fR methods in the \s-1DBI\s0 Specification.
.PP
Chapter 6 of \*(L"Programming the Perl \s-1DBI\*(R"\s0 discusses transaction handling within
the context of \s-1DBI\s0 in more detail.
.ie n .SS "5.7 How are ""NULL"" values handled by \s-1DBI\s0?"
.el .SS "5.7 How are \f(CWNULL\fP values handled by \s-1DBI\s0?"
.IX Subsection "5.7 How are NULL values handled by DBI?"
\&\f(CW\*(C`NULL\*(C'\fR values in \s-1DBI\s0 are specified to be treated as the value \f(CW\*(C`undef\*(C'\fR.
\&\f(CW\*(C`NULL\*(C'\fRs can be inserted into databases as \f(CW\*(C`NULL\*(C'\fR, for example:
.PP
.Vb 1
\&    $rv = $dbh\->do( "INSERT INTO table VALUES( NULL )" );
.Ve
.PP
but when queried back, the \f(CW\*(C`NULL\*(C'\fRs should be tested against \f(CW\*(C`undef\*(C'\fR.
This is standard across all drivers.
.ie n .SS "5.8 What are these ""func()"" methods all about?"
.el .SS "5.8 What are these \f(CWfunc()\fP methods all about?"
.IX Subsection "5.8 What are these func() methods all about?"
The \f(CW\*(C`func()\*(C'\fR method is defined within \s-1DBI\s0 as being an entry point
for database-specific functionality, \fIeg\fR, the ability to create or
drop databases. Invoking these driver-specific methods is simple, for example,
to invoke a \f(CW\*(C`createDatabase\*(C'\fR method that has one argument, we would
write:
.PP
.Vb 1
\&    $rv =$dbh\->func( \*(Aqargument\*(Aq, \*(AqcreateDatabase\*(Aq );
.Ve
.PP
Software developers should note that the \f(CW\*(C`func()\*(C'\fR methods are
non-portable between databases.
.SS "5.9 Is \s-1DBI\s0 Year 2000 Compliant?"
.IX Subsection "5.9 Is DBI Year 2000 Compliant?"
\&\s-1DBI\s0 has no knowledge of understanding of what dates are. Therefore, \s-1DBI\s0
itself does not have a Year 2000 problem. Individual drivers may use date
handling code internally and therefore be potentially susceptible to the
Year 2000 problem, but this is unlikely.
.PP
You may also wish to read the ``Does Perl have a Year 2000 problem?'' section
of the Perl \s-1FAQ\s0 at:
.PP
.Vb 1
\&    http://www.perl.com/CPAN/doc/FAQs/FAQ/PerlFAQ.html
.Ve
.SH "Support and Training"
.IX Header "Support and Training"
The Perl5 Database Interface is \fI\s-1FREE\s0\fR software. \s-1IT COMES WITHOUT WARRANTY
OF ANY KIND.\s0 See the \s-1DBI README\s0 for more details.
.PP
However, some organizations are providing either technical support or
training programs on \s-1DBI.\s0 The present author has no knowledge as
to the quality of these services. The links are included for reference
purposes only and should not be regarded as recommendations in any way.
\&\fICaveat emptor\fR.
.SS "Commercial Support"
.IX Subsection "Commercial Support"
.IP "The Perl Clinic" 4
.IX Item "The Perl Clinic"
The Perl Clinic provides commercial support for \fIPerl\fR and Perl
related problems, including the \fI\s-1DBI\s0\fR and its drivers.  Support is
provided by the company with whom Tim Bunce, author of \fI\s-1DBI\s0\fR and
\&\fIDBD::Oracle\fR, works and ActiveState. For more information on their
services, please see:
.Sp
.Vb 1
\&    http://www.perlclinic.com
.Ve
.SS "Training"
.IX Subsection "Training"
.IP "Westlake Solutions" 4
.IX Item "Westlake Solutions"
A hands-on class for experienced Perl \s-1CGI\s0 developers that teaches
how to write database-connected \s-1CGI\s0 scripts using Perl and \s-1DBI\s0.pm.  This
course, along with four other courses on \s-1CGI\s0 scripting with Perl, is
taught in Washington, \s-1DC\s0; Arlington, Virginia; and on-site worldwide upon
request.
.Sp
See:
.Sp
.Vb 1
\&    http://www.westlake.com/training
.Ve
.Sp
for more details.
.SH "Other References"
.IX Header "Other References"
In this section, we present some miscellaneous \s-1WWW\s0 links that may be of
some interest to \s-1DBI\s0 users. These are not verified and may result in
unknown sites or missing documents.
.PP
.Vb 3
\&    http://www\-ccs.cs.umass.edu/db.html
\&    http://www.odmg.org/odmg93/updates_dbarry.html
\&    http://www.jcc.com/sql_stnd.html
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Alligator Descartes.
Portions are Copyright their original stated authors.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This document is Copyright (c)1994\-2000 Alligator Descartes, with portions
Copyright (c)1994\-2000 their original authors. This module is released under
the 'Artistic' license which you can find in the perl distribution.
.PP
This document is Copyright (c)1997\-2000 Alligator Descartes. All rights reserved.
Permission to distribute this document, in full or in part, via email,
Usenet, ftp archives or http is granted providing that no charges are involved,
reasonable attempt is made to use the most current version and all credits
and copyright notices are retained ( the \fI\s-1AUTHOR\s0\fR and \fI\s-1COPYRIGHT\s0\fR sections ).
Requests for other distribution rights, including incorporation into
commercial products, such as books, magazine articles or CD-ROMs should be
made to Alligator Descartes.
                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::FAQ5.16.3pm                             0100644 0001750 0001750 00000127424 12566241577 022746  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::FAQ 3"
.TH DBI::FAQ 3 "2011-09-14" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::FAQ \-\- The Frequently Asked Questions for the Perl5 Database Interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    perldoc DBI::FAQ
.Ve
.SH "VERSION"
.IX Header "VERSION"
This document is currently at version \fI0.38\fR, as of \fIFebruary 8th, 2000\fR.
.PP
That's \fBvery\fR old. A newer \s-1FAQ\s0 can be found at http://faq.dbi\-support.com/ <http://faq.dbi-support.com/>
.PP
Neither this document nor that web site are actively maintained.
Volunteers are welcome.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document serves to answer the most frequently asked questions on both
the \s-1DBI\s0 Mailing Lists and personally to members of the \s-1DBI\s0 development team.
.SH "Basic Information & Information Sources"
.IX Header "Basic Information & Information Sources"
.SS "1.1 What is \s-1DBI\s0, DBperl, Oraperl and *perl?"
.IX Subsection "1.1 What is DBI, DBperl, Oraperl and *perl?"
To quote Tim Bunce, the architect and author of \s-1DBI:\s0
.PP
.Vb 4
\&      DBI is a database access Application Programming Interface (API)
\&      for the Perl Language. The DBI API Specification defines a set
\&      of functions, variables and conventions that provide a consistent
\&      database interface independent of the actual database being used.
.Ve
.PP
In simple language, the \s-1DBI\s0 interface allows users to access multiple database
types transparently. So, if you connecting to an Oracle, Informix, mSQL, Sybase
or whatever database, you don't need to know the underlying mechanics of the
3GL layer. The \s-1API\s0 defined by \s-1DBI\s0 will work on \fIall\fR these database types.
.PP
A similar benefit is gained by the ability to connect to two \fIdifferent\fR
databases of different vendor within the one perl script, \fIie\fR, I want
to read data from an Oracle database and insert it back into an Informix
database all within one program. The \s-1DBI\s0 layer allows you to do this simply
and powerfully.
.PP
\&\fIDBperl\fR is the old name for the interface specification. It's usually
now used to denote perl\fI4\fR modules on database interfacing, such as,
\&\fIoraperl\fR, \fIisqlperl\fR, \fIingperl\fR and so on. These interfaces
didn't have a standard \s-1API\s0 and are generally \fInot\fR supported.
.PP
Here's a list of DBperl modules, their corresponding \s-1DBI\s0 counterparts and
support information. \fIPlease note\fR, the author's listed here generally
\&\fIdo not\fR maintain the \s-1DBI\s0 module for the same database. These email
addresses are unverified and should only be used for queries concerning the
perl4 modules listed below. \s-1DBI\s0 driver queries should be directed to the
\&\fIdbi-users\fR mailing list.
.PP
.Vb 10
\&    Module Name Database Required   Author          DBI
\&    \-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-   \-\-\-\-\-\-          \-\-\-
\&    Sybperl     Sybase              Michael Peppler DBD::Sybase
\&                                    <mpeppler@itf.ch>
\&    Oraperl     Oracle 6 & 7        Kevin Stock     DBD::Oracle
\&                                    <dbi\-users@perl.org>
\&    Ingperl     Ingres              Tim Bunce &     DBD::Ingres
\&                                    Ted Lemon
\&                                    <dbi\-users@perl.org>
\&    Interperl   Interbase           Buzz Moschetti  DBD::Interbase
\&                                    <buzz@bear.com>
\&    Uniperl     Unify 5.0           Rick Wargo      None
\&                                    <rickers@coe.drexel.edu>
\&    Pgperl      Postgres            Igor Metz       DBD::Pg
\&                                    <metz@iam.unibe.ch>
\&    Btreeperl   NDBM                John Conover    SDBM?
\&                                    <john@johncon.com>
\&    Ctreeperl   C\-Tree              John Conover    None
\&                                    <john@johncon.com>
\&    Cisamperl   Informix C\-ISAM     Mathias Koerber None
\&                                    <mathias@unicorn.swi.com.sg>
\&    Duaperl     X.500 Directory     Eric Douglas    None
\&                User Agent
.Ve
.PP
However, some \s-1DBI\s0 modules have DBperl emulation layers, so, \fIDBD::Oracle\fR
comes with an Oraperl emulation layer, which allows you to run legacy oraperl
scripts without modification. The emulation layer translates the oraperl \s-1API\s0
calls into \s-1DBI\s0 calls and executes them through the \s-1DBI\s0 switch.
.PP
Here's a table of emulation layer information:
.PP
.Vb 8
\&    Module                  Emulation Layer     Status
\&    \-\-\-\-\-\-          \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-     \-\-\-\-\-\-
\&    DBD::Oracle     Oraperl             Complete
\&    DBD::Informix   Isqlperl            Under development
\&    DBD::Ingres     Ingperl             Complete?
\&    DBD::Sybase     Sybperl             Working? ( Needs verification )
\&    DBD::mSQL       Msqlperl            Experimentally released with 
\&                                        DBD::mSQL\-0.61
.Ve
.PP
The \fIMsqlperl\fR emulation is a special case. \fIMsqlperl\fR is a perl5 driver
for \fImSQL\fR databases, but does not conform to the \s-1DBI\s0 Specification. It's
use is being deprecated in favour of \fIDBD::mSQL\fR. \fIMsqlperl\fR may be downloaded
from \s-1CPAN\s0 \fIvia\fR:
.PP
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Msqlperl
.Ve
.SS "1.2. Where can I get it from?"
.IX Subsection "1.2. Where can I get it from?"
The Comprehensive Perl Archive Network
resources should be used for retrieving up-to-date versions of the \s-1DBI\s0
and drivers. \s-1CPAN\s0 may be accessed \fIvia\fR Tom Christiansen's splendid 
\&\fI\s-1CPAN\s0 multiplexer\fR program located at:
.PP
.Vb 1
\&    http://www.perl.com/CPAN/
.Ve
.PP
For more specific version information and exact URLs of drivers, please see
the \s-1DBI\s0 drivers list and the \s-1DBI\s0 module pages which can be found on:
.PP
.Vb 1
\&    http://dbi.perl.org/
.Ve
.PP
This list is automatically generated on a nightly basis from \s-1CPAN\s0 and should
be up-to-date.
.SS "1.3. Where can I get more information?"
.IX Subsection "1.3. Where can I get more information?"
There are a few information sources on \s-1DBI\s0.
.ie n .IP "\fI""Programming the Perl \s-1DBI\s0""\fR" 4
.el .IP "\fI``Programming the Perl \s-1DBI\s0''\fR" 4
.IX Item "Programming the Perl DBI"
\&\*(L"Programming the Perl \s-1DBI\s0\*(R" is the \fIofficial\fR book on the \s-1DBI\s0 written by
Alligator Descartes and Tim Bunce and published by O'Reilly & Associates.
The book was released on February 9th, 2000.
.Sp
The table of contents is:
.Sp
.Vb 10
\&    Preface
\&    1. Introduction
\&        From Mainframes to Workstations
\&        Perl
\&        DBI in the Real World
\&        A Historical Interlude and Standing Stones
\&    2. Basic Non\-DBI Databases
\&        Storage Managers and Layers
\&        Query Languages and Data Functions
\&        Standing Stones and the Sample Database
\&        Flat\-File Databases
\&        Putting Complex Data into Flat Files
\&        Concurrent Database Access and Locking
\&        DBM Files and the Berkeley Database Manager
\&        The MLDBM Module
\&        Summary
\&    3. SQL and Relational Databases
\&        The Relational Database Methodology
\&        Datatypes and NULL Values
\&        Querying Data
\&        Modifying Data Within Tables
\&        Creating and Destroying Tables
\&    4. Programming with the DBI
\&        DBI Architecture
\&        Handles
\&        Data Source Names
\&        Connection and Disconnection
\&        Error Handling
\&        Utility Methods and Functions
\&    5. Interacting with the Database
\&        Issuing Simple Queries
\&        Executing Non\-SELECT Statements
\&        Binding Parameters to Statements
\&        Binding Output Columns
\&        do() Versus prepare()
\&        Atomic and Batch Fetching
\&    6. Advanced DBI
\&        Handle Attributes and Metadata
\&        Handling LONG/LOB Data
\&        Transactions, Locking, and Isolation
\&    7. ODBC and the DBI
\&        ODBC \-\- Embraced and Extended
\&        DBI \-\- Thrashed and Mutated
\&        The Nuts and Bolts of ODBC
\&        ODBC from Perl
\&        The Marriage of DBI and ODBC
\&        Questions and Choices
\&        Moving Between Win32::ODBC and the DBI
\&        And What About ADO?
\&    8. DBI Shell and Database Proxying
\&        dbish \-\- The DBI Shell
\&        Database Proxying
\&    A. DBI Specification
\&    B. Driver and Database Characteristics
\&    C. ASLaN Sacred Site Charter
\&    Index
.Ve
.Sp
The book should be available from all good bookshops and can be ordered online
either <I>via</I> O'Reilly & Associates
.Sp
.Vb 1
\&    http://www.oreilly.com/catalog/perldbi
.Ve
.Sp
or Amazon
.Sp
.Vb 1
\&    http://www.amazon.com/exec/obidos/ASIN/1565926994/dbi
.Ve
.IP "\fI\s-1POD\s0 documentation\fR" 4
.IX Item "POD documentation"
\&\fI\s-1POD\s0\fRs are chunks of documentation usually embedded within perl programs
that document the code ``\fIin place\fR'', providing a useful resource for
programmers and users of modules. \s-1POD\s0 for \s-1DBI\s0 and drivers is beginning to 
become more commonplace, and documentation for these modules can be read
with the \f(CW\*(C`perldoc\*(C'\fR program included with Perl.
.RS 4
.IP "The \s-1DBI\s0 Specification" 4
.IX Item "The DBI Specification"
The \s-1POD\s0 for the \s-1DBI\s0 Specification can be read with the:
.Sp
.Vb 1
\&    perldoc DBI
.Ve
.Sp
command. The Specification also forms Appendix A of \*(L"Programming the Perl
\&\s-1DBI\s0\*(R".
.IP "Oraperl" 4
.IX Item "Oraperl"
Users of the Oraperl emulation layer bundled with \fIDBD::Oracle\fR, may read
up on how to program with the Oraperl interface by typing:
.Sp
.Vb 1
\&    perldoc Oraperl
.Ve
.Sp
This will produce an updated copy of the original oraperl man page written by
Kevin Stock for perl4. The oraperl \s-1API\s0 is fully listed and described there.
.IP "Drivers" 4
.IX Item "Drivers"
Users of the \s-1DBD\s0 modules may read about some of the private functions
and quirks of that driver by typing:
.Sp
.Vb 1
\&    perldoc <driver>
.Ve
.Sp
For example, the \fIDBD::mSQL\fR driver is bundled with driver-specific 
documentation that can be accessed by typing
.Sp
.Vb 1
\&    perldoc DBD::mSQL
.Ve
.IP "Frequently Asked Questions" 4
.IX Item "Frequently Asked Questions"
This document, the \fIFrequently Asked Questions\fR is also available as \s-1POD\s0
documentation! You can read this on your own system by typing:
.Sp
.Vb 1
\&    perldoc DBI::FAQ
.Ve
.Sp
This may be more convenient to persons not permanently, or conveniently,
connected to the Internet. The \fI\s-1DBI::FAQ\s0\fR module should be downloaded and
installed for the more up-to-date version.
.Sp
The version of \fI\s-1DBI::FAQ\s0\fR shipped with the \f(CW\*(C`DBI\*(C'\fR module may be slightly out
of date.
.IP "\s-1POD\s0 in general" 4
.IX Item "POD in general"
Information on writing \s-1POD\s0, and on the philosophy of \s-1POD\s0 in general, can be
read by typing:
.Sp
.Vb 1
\&    perldoc perlpod
.Ve
.Sp
Users with the Tk module installed may be interested to learn there is a
Tk-based \s-1POD\s0 reader available called \f(CW\*(C`tkpod\*(C'\fR, which formats \s-1POD\s0 in a convenient
and readable way. This is available \fIvia\fR \s-1CPAN\s0 as the module called 
\&\fITk::POD\fR and is highly recommended.
.RE
.RS 4
.RE
.IP "\fIDriver and Database Characteristics\fR" 4
.IX Item "Driver and Database Characteristics"
The driver summaries that were produced for Appendix B of \*(L"Programming the
Perl \s-1DBI\s0\*(R" are available online at:
.Sp
.Vb 1
\&    http://dbi.perl.org/
.Ve
.Sp
in the driver information table. These summaries contain standardised
information on each driver and database which should aid you in selecting
a database to use. It will also inform you quickly of any issues within
drivers or whether a driver is not fully compliant with the \s-1DBI\s0 Specification.
.IP "\fIRambles, Tidbits and Observations\fR" 4
.IX Item "Rambles, Tidbits and Observations"
.Vb 1
\&    http://dbi.perl.org/tidbits
.Ve
.Sp
There are a series of occasional rambles from various people on the
\&\s-1DBI\s0 mailing lists who, in an attempt to clear up a simple point, end up
drafting fairly comprehensive documents. These are quite often varying in
quality, but do provide some insights into the workings of the interfaces.
.IP "\fIArticles\fR" 4
.IX Item "Articles"
A list of articles discussing the \s-1DBI\s0 can be found on the \s-1DBI\s0 \s-1WWW\s0 page at:
.Sp
.Vb 1
\&    http://dbi.perl.org/
.Ve
.Sp
These articles are of varying quality and age, from the original Perl Journal
article written by Alligator and Tim, to more recent debacles published online
from about.com.
.IP "\fI\s-1README\s0 files\fR" 4
.IX Item "README files"
The \fI\s-1README\s0\fR files included with each driver occasionally contains 
some useful information ( no, really! ) that may be pertinent to the user.
Please read them. It makes our worthless existences more bearable. These
can all be read from the main \s-1DBI\s0 \s-1WWW\s0 page at:
.Sp
.Vb 1
\&    http://dbi.perl.org/
.Ve
.IP "\fIMailing Lists\fR" 4
.IX Item "Mailing Lists"
There are three mailing lists for \s-1DBI:\s0
.Sp
.Vb 3
\&    dbi\-announce@perl.org     \-\- for announcements, very low traffic
\&    dbi\-users@perl.org        \-\- general user support
\&    dbi\-dev@perl.org          \-\- for driver developers (no user support)
.Ve
.Sp
For information on how to subscribe, set digest mode etc, and unsubscribe,
send an email message (the content will be ignored) to:
.Sp
.Vb 3
\&    dbi\-announce\-help@perl.org
\&    dbi\-users\-help@perl.org
\&    dbi\-dev\-help@perl.org
.Ve
.IP "\fIMailing List Archives\fR" 4
.IX Item "Mailing List Archives"
.RS 4
.PD 0
.IP "\fI\s-1US\s0 Mailing List Archives\fR" 4
.IX Item "US Mailing List Archives"
.PD
.Vb 1
\&    http://outside.organic.com/mail\-archives/dbi\-users/
.Ve
.Sp
Searchable hypermail archives of the three mailing lists, and some of the
much older traffic have been set up for users to browse.
.IP "\fIEuropean Mailing List Archives\fR" 4
.IX Item "European Mailing List Archives"
.Vb 1
\&    http://www.rosat.mpe\-garching.mpg.de/mailing\-lists/PerlDB\-Interest
.Ve
.Sp
As per the \s-1US\s0 archive above.
.RE
.RS 4
.RE
.SH "Compilation Problems"
.IX Header "Compilation Problems"
.ie n .SS "2.1. Compilation problems or ""It fails the test!"""
.el .SS "2.1. Compilation problems or ``It fails the test!''"
.IX Subsection "2.1. Compilation problems or It fails the test!"
First off, consult the \s-1README\s0 for that driver in case there is useful 
information about the problem. It may be a known problem for your given 
architecture and operating system or database. You can check the \s-1README\s0
files for each driver in advance online at:
.PP
.Vb 1
\&    http://dbi.perl.org/
.Ve
.PP
If it's a known problem, you'll probably have to wait till it gets fixed. If 
you're \fIreally\fR needing it fixed, try the following:
.IP "\fIAttempt to fix it yourself\fR" 4
.IX Item "Attempt to fix it yourself"
This technique is generally \fInot\fR recommended to the faint-hearted.
If you do think you have managed to fix it, then, send a patch file
( context diff ) to the author with an explanation of:
.RS 4
.IP "\(bu" 4
What the problem was, and test cases, if possible.
.IP "\(bu" 4
What you needed to do to fix it. Please make sure you mention everything.
.IP "\(bu" 4
Platform information, database version, perl version, module version and 
\&\s-1DBI\s0 version.
.RE
.RS 4
.RE
.IP "\fIEmail the author\fR Do \fI\s-1NOT\s0\fR whinge!" 4
.IX Item "Email the author Do NOT whinge!"
Please email the address listed in the \s-1WWW\s0 pages for whichever driver you
are having problems with. Do \fInot\fR directly email the author at a
known address unless it corresponds with the one listed.
.Sp
We tend to have real jobs to do, and we do read the mailing lists for
problems. Besides, we may not have access to <\fIinsert your
favourite brain-damaged platform here\fR> and couldn't be of any
assistance anyway! Apologies for sounding harsh, but that's the way of it!
.Sp
However, you might catch one of these creative genii at 3am when we're
doing this sort of stuff anyway, and get a patch within 5 minutes. The
atmosphere in the \s-1DBI\s0 circle is that we \fIdo\fR appreciate the users'
problems, since we work in similar environments.
.Sp
If you are planning to email the author, please furnish as much information
as possible, \fIie\fR:
.RS 4
.IP "\(bu" 4
\&\fI\s-1ALL\s0\fR the information asked for in the \s-1README\s0 file in
the problematic module. And we mean \fI\s-1ALL\s0\fR of it. We don't
put lines like that in documentation for the good of our health, or
to meet obscure \s-1README\s0 file standards of length.
.IP "\(bu" 4
If you have a core dump, try the \fIDevel::CoreStack\fR module for
generating a stack trace from the core dump. Send us that too.
\&\fIDevel::CoreStack\fR can be found on \s-1CPAN\s0 at:
.Sp
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Devel::CoreStack
.Ve
.IP "\(bu" 4
Module versions, perl version, test cases, operating system versions
and \fIany other pertinent information\fR.
.RE
.RS 4
.Sp
Remember, the more information you send us, the quicker we can track 
problems down. If you send us no useful information, expect nothing back.
.Sp
Finally, please be aware that some authors, including Tim Bunce, specifically
request that you do \fInot\fR mail them directly. Please respect their wishes and
use the email addresses listed in the appropriate module \f(CW\*(C`README\*(C'\fR file.
.RE
.IP "\fIEmail the dbi-users Mailing List\fR" 4
.IX Item "Email the dbi-users Mailing List"
It's usually a fairly intelligent idea to \fIcc\fR the mailing list
anyway with problems. The authors all read the lists, so you lose nothing
by mailing there.
.SH "Platform and Driver Issues"
.IX Header "Platform and Driver Issues"
.SS "3.1 What's the difference between \s-1ODBC\s0 and \s-1DBI\s0?"
.IX Subsection "3.1 What's the difference between ODBC and DBI?"
In terms of architecture \- not much: Both define programming
interfaces. Both allow multiple drivers to be loaded to do the
actual work.
.PP
In terms of ease of use \- much: The \s-1DBI\s0 is a 'high level' interface
that, like Perl itself, strives to make the simple things easy while
still making the hard things possible. The \s-1ODBC\s0 is a 'low level'
interface. All nuts-bolts-knobs-and-dials.
.PP
Now there's an \s-1ODBC\s0 driver for the \s-1DBI\s0 (\s-1DBD::ODBC\s0) the \*(L"What's the
difference\*(R" question is more usefully rephrased as:
.PP
Chapter 7 of \*(L"Programming the Perl \s-1DBI\s0\*(R" covers this topic in far more
detail and should be consulted.
.SS "3.2 What's the difference between Win32::ODBC and \s-1DBD::ODBC\s0?"
.IX Subsection "3.2 What's the difference between Win32::ODBC and DBD::ODBC?"
The \s-1DBI\s0, and thus \s-1DBD::ODBC\s0, has a different philosophy from the
Win32::ODBC module:
.PP
The Win32::ODBC module is a 'thin' layer over the low-level \s-1ODBC\s0 \s-1API\s0.
The \s-1DBI\s0 defines a simpler 'higher level' interface.
.PP
The Win32::ODBC module gives you access to more of the \s-1ODBC\s0 \s-1API\s0.
The \s-1DBI\s0 and \s-1DBD::ODBC\s0 give you access to only the essentials.
(But, unlike Win32::ODBC, the \s-1DBI\s0 and \s-1DBD::ODBC\s0 do support parameter
binding and multiple prepared statements which reduces the load on
the database server and can dramatically increase performance.)
.PP
The Win32::ODBC module only works on Win32 systems.
The \s-1DBI\s0 and \s-1DBD::ODBC\s0 are very portable and work on Win32 and Unix.
.PP
The \s-1DBI\s0 and \s-1DBD::ODBC\s0 modules are supplied as a standard part of the
Perl 5.004 binary distribution for Win32 (they don't work with the
older, non-standard, ActiveState port).
.PP
Scripts written with the \s-1DBI\s0 and \s-1DBD::ODBC\s0 are faster than Win32::ODBC
on Win32 and are trivially portable to other supported database types.
.PP
The \s-1DBI\s0 offers optional automatic printing or \fIdie()\fRing on errors which
makes applications simpler and more robust.
.PP
The current \s-1DBD::ODBC\s0 driver version 0.16 is new and not yet fully stable.
A new release is due soon [relative to the date of the next \s-1TPJ\s0 issue :\-]
and will be much improved and offer more \s-1ODBC\s0 functionality.
.PP
To summarise: The Win32::ODBC module is your best choice if you need
access to more of the \s-1ODBC\s0 \s-1API\s0 than the \s-1DBI\s0 gives you. Otherwise, the
\&\s-1DBI\s0 and \s-1DBD::ODBC\s0 combination may be your best bet.
.PP
Chapter 7 of \*(L"Programming the Perl \s-1DBI\s0\*(R" covers this topic in far more
detail and should be consulted.
.SS "3.3 Is \s-1DBI\s0 supported under Windows 95 / \s-1NT\s0 platforms?"
.IX Subsection "3.3 Is DBI supported under Windows 95 / NT platforms?"
Finally, yes! Jeff Urlwin has been working diligently on building
\&\fI\s-1DBI\s0\fR and \fI\s-1DBD::ODBC\s0\fR under these platforms, and, with the
advent of a stabler perl and a port of \fIMakeMaker\fR, the project has
come on by great leaps and bounds.
.PP
The \fI\s-1DBI\s0\fR and \fIDBD::Oracle\fR Win32 ports are now a standard part of \s-1DBI\s0,
so, downloading \fI\s-1DBI\s0\fR of version higher than \fI0.81\fR should work fine as 
should using the most recent \fIDBD::Oracle\fR version.
.SS "3.4 Can I access Microsoft Access or SQL-Server databases with \s-1DBI\s0?"
.IX Subsection "3.4 Can I access Microsoft Access or SQL-Server databases with DBI?"
Yes, use the \fI\s-1DBD::ODBC\s0\fR driver.
.SS "3.5 Is there a \s-1DBD\s0 for <\fIinsert favourite database here\fP>?"
.IX Subsection "3.5 Is there a DBD for <insert favourite database here>?"
First check if a driver is available on \s-1CPAN\s0 by searching for the name of the
database (including common abbreviations and aliases).
.PP
Here's a general query that'll match all distributions:
.PP
.Vb 1
\&    http://search.cpan.org/search?query=DBD&mode=dist
.Ve
.PP
If you can't find a driver that way, you could check if the database supports
\&\s-1ODBC\s0 drivers. If so then you could probably use the \s-1DBD::ODBC\s0 driver:
.PP
.Vb 1
\&    http://search.cpan.org/dist/DBD\-ODBC/
.Ve
.PP
If not, then try asking on the dbi-users mailing list.
.SS "3.6 What's \s-1DBM\s0? And why should I use \s-1DBI\s0 instead?"
.IX Subsection "3.6 What's DBM? And why should I use DBI instead?"
Extracted from ``\fI\s-1DBI\s0 \- The Database Interface for Perl 5\fR'':
.PP
.Vb 3
\&    \`\`UNIX was originally blessed with simple file\-based \`\`databases\*(Aq\*(Aq, namely
\&    the dbm system. dbm lets you store data in files, and retrieve
\&    that data quickly. However, it also has serious drawbacks.
\&
\&        File Locking
\&
\&        The dbm systems did not allow particularly robust file locking
\&        capabilities, nor any capability for correcting problems arising through
\&        simultaneous writes [ to the database ].
\&
\&        Arbitrary Data Structures
\&
\&        The dbm systems only allows a single fixed data structure:
\&        key\-value pairs. That value could be a complex object, such as a
\&        [ C ] struct, but the key had to be unique. This was a large
\&        limitation on the usefulness of dbm systems.
\&
\&    However, dbm systems still provide a useful function for users with
\&    simple datasets and limited resources, since they are fast, robust and 
\&    extremely well\-tested. Perl modules to access dbm systems have now
\&    been integrated into the core Perl distribution via the
\&    AnyDBM_File module.\*(Aq\*(Aq
.Ve
.PP
To sum up, \s-1DBM\s0 is a perfectly satisfactory solution for essentially read-only
databases, or small and simple datasets. However, for more 
scaleable dataset handling, not to mention robust transactional locking, 
users are recommended to use a more powerful database engine \fIvia\fR \fI\s-1DBI\s0\fR.
.PP
Chapter 2 of \*(L"Programming the Perl \s-1DBI\s0\*(R" discusses \s-1DBM\s0 files in detail.
.SS "3.7 What database do you recommend me using?"
.IX Subsection "3.7 What database do you recommend me using?"
This is a particularly thorny area in which an objective answer is difficult
to come by, since each dataset, proposed usage and system configuration
differs from person to person.
.PP
From the current author's point of view, if the dataset is relatively
small, being tables of less than 1 million rows, and less than 1000 tables
in a given database, then \fImSQL\fR is a perfectly acceptable solution
to your problem. This database is extremely cheap, is wonderfully robust
and has excellent support. More information is available on the Hughes
Technology \s-1WWW\s0 site at:
.PP
.Vb 1
\&    http://www.hughes.com.au
.Ve
.PP
You may also wish to look at MySQL which is a more powerful database engine
that has a similar feel to mSQL.
.PP
.Vb 1
\&    http://www.tcx.se
.Ve
.PP
If the dataset is larger than 1 million row tables or 1000 tables, or if you
have either more money, or larger machines, I would recommend \fIOracle \s-1RDBMS\s0\fR.
Oracle's \s-1WWW\s0 site is an excellent source of more information.
.PP
.Vb 1
\&    http://www.oracle.com
.Ve
.PP
\&\fIInformix\fR is another high-end \s-1RDBMS\s0 that is worth considering. There are
several differences between Oracle and Informix which are too complex for
this document to detail. Information on Informix can be found on their
\&\s-1WWW\s0 site at:
.PP
.Vb 1
\&    http://www.informix.com
.Ve
.PP
In the case of \s-1WWW\s0 fronted applications, \fImSQL\fR may be a better option
due to slow connection times between a \s-1CGI\s0 script and the Oracle \s-1RDBMS\s0 and
also the amount of resource each Oracle connection will consume. \fImSQL\fR
is lighter resource-wise and faster.
.PP
These views are not necessarily representative of anyone else's opinions,
and do not reflect any corporate sponsorship or views. They are provided
\&\fIas-is\fR.
.SS "3.8 Is <\fIinsert feature here\fP> supported in \s-1DBI\s0?"
.IX Subsection "3.8 Is <insert feature here> supported in DBI?"
Given that we're making the assumption that the feature you have requested
is a non-standard database-specific feature, then the answer will be \fIno\fR.
.PP
\&\s-1DBI\s0 reflects a \fIgeneric\fR \s-1API\s0 that will work for most databases, and has
no database-specific functionality.
.PP
However, driver authors may, if they so desire, include hooks to database-specific
functionality through the \f(CW\*(C`func()\*(C'\fR method defined in the \s-1DBI\s0 \s-1API\s0.
Script developers should note that use of functionality provided \fIvia\fR
the \f(CW\*(C`func()\*(C'\fR methods is very unlikely to be portable across databases.
.SH "Programming Questions"
.IX Header "Programming Questions"
.SS "4.1 Is \s-1DBI\s0 any use for \s-1CGI\s0 programming?"
.IX Subsection "4.1 Is DBI any use for CGI programming?"
In a word, yes! \s-1DBI\s0 is hugely useful for \s-1CGI\s0 programming! In fact, I would
tentatively say that \s-1CGI\s0 programming is one of two top uses for \s-1DBI\s0.
.PP
\&\s-1DBI\s0 confers the ability to \s-1CGI\s0 programmers to power WWW-fronted databases
to their users, which provides users with vast quantities of ordered
data to play with. \s-1DBI\s0 also provides the possibility that, if a site is
receiving far too much traffic than their database server can cope with, they
can upgrade the database server behind the scenes with no alterations to
the \s-1CGI\s0 scripts.
.SS "4.2 How do I get faster connection times with DBD::Oracle and \s-1CGI\s0?"
.IX Subsection "4.2 How do I get faster connection times with DBD::Oracle and CGI?"
.Vb 1
\&    Contributed by John D. Groenveld
.Ve
.PP
The Apache \f(CW\*(C`httpd\*(C'\fR maintains a pool of \f(CW\*(C`httpd\*(C'\fR children to service client 
requests.
.PP
Using the Apache \fImod_perl\fR module by \fIDoug MacEachern\fR, the perl 
interpreter is embedded with the \f(CW\*(C`httpd\*(C'\fR children. The \s-1CGI\s0, \s-1DBI\s0, and your 
other favorite modules can be loaded at the startup of each child. These 
modules will not be reloaded unless changed on disk.
.PP
For more information on Apache, see the Apache Project's \s-1WWW\s0 site:
.PP
.Vb 1
\&    http://www.apache.org
.Ve
.PP
The \fImod_perl\fR module can be downloaded from \s-1CPAN\s0 \fIvia\fR:
.PP
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Apache
.Ve
.SS "4.3 How do I get persistent connections with \s-1DBI\s0 and \s-1CGI\s0?"
.IX Subsection "4.3 How do I get persistent connections with DBI and CGI?"
.Vb 1
\&    Contributed by John D. Groenveld
.Ve
.PP
Using Edmund Mergl's \fIApache::DBI\fR module, database logins are stored in a 
hash with each of these \f(CW\*(C`httpd\*(C'\fR child. If your application is based on a 
single database user, this connection can be started with each child. 
Currently, database connections cannot be shared between \f(CW\*(C`httpd\*(C'\fR children.
.PP
\&\fIApache::DBI\fR can be downloaded from \s-1CPAN\s0 \fIvia\fR:
.PP
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Apache::DBI
.Ve
.ie n .SS "4.4 ``When I run a perl script from the command line, it works, but, when I run it under the ""httpd"", it fails!'' Why?"
.el .SS "4.4 ``When I run a perl script from the command line, it works, but, when I run it under the \f(CWhttpd\fP, it fails!'' Why?"
.IX Subsection "4.4 ``When I run a perl script from the command line, it works, but, when I run it under the httpd, it fails!'' Why?"
Basically, a good chance this is occurring is due to the fact that the user
that you ran it from the command line as has a correctly configured set of
environment variables, in the case of \fIDBD::Oracle\fR, variables like
\&\f(CW\*(C`ORACLE_HOME\*(C'\fR, \f(CW\*(C`ORACLE_SID\*(C'\fR or \f(CW\*(C`TWO_TASK\*(C'\fR.
.PP
The \f(CW\*(C`httpd\*(C'\fR process usually runs under the user id of \f(CW\*(C`nobody\*(C'\fR,
which implies there is no configured environment. Any scripts attempting to
execute in this situation will correctly fail.
.PP
One way to solve this problem is to set the environment for your database in a
\&\f(CW\*(C`BEGIN { }\*(C'\fR block at the top of your script. Another technique is to configure
your \s-1WWW\s0 server to pass-through certain environment variables to your \s-1CGI\s0 
scripts.
.PP
Similarly, you should check your \f(CW\*(C`httpd\*(C'\fR error logfile for any clues,
as well as the ``Idiot's Guide To Solving Perl / \s-1CGI\s0 Problems'' and
``Perl \s-1CGI\s0 Programming \s-1FAQ\s0'' for further information. It is
unlikely the problem is DBI-related.
.PP
The ``Idiot's Guide To Solving Perl / \s-1CGI\s0 Problems'' can be located at:
.PP
.Vb 1
\&    http://www.perl.com/perl/faq/index.html
.Ve
.PP
as can the ``Perl \s-1CGI\s0 Programming \s-1FAQ\s0''. Read \fI\s-1BOTH\s0\fR these documents 
carefully!
.ie n .SS "4.5 How do I get the number of rows returned from a ""SELECT"" statement?"
.el .SS "4.5 How do I get the number of rows returned from a \f(CWSELECT\fP statement?"
.IX Subsection "4.5 How do I get the number of rows returned from a SELECT statement?"
Count them. Read the \s-1DBI\s0 docs for the \f(CW\*(C`rows()\*(C'\fR method.
.SH "Miscellaneous Questions"
.IX Header "Miscellaneous Questions"
.SS "5.1 Can I do multi-threading with \s-1DBI\s0?"
.IX Subsection "5.1 Can I do multi-threading with DBI?"
Perl version 5.005 and later can be built to support multi-threading.
The \s-1DBI\s0, as of version 1.02, does not yet support multi-threading
so it would be unsafe to let more than one thread enter the \s-1DBI\s0 at
the same time.
.PP
It is expected that some future version of the \s-1DBI\s0 will at least be
thread-safe (but not thread-hot) by automatically blocking threads
intering the \s-1DBI\s0 while it's already in use.
.SS "5.2 How do I handle \s-1BLOB\s0 data with \s-1DBI\s0?"
.IX Subsection "5.2 How do I handle BLOB data with DBI?"
Handling \s-1BLOB\s0 data with the \s-1DBI\s0 is very straight-forward. \s-1BLOB\s0 columns are
specified in a \s-1SELECT\s0 statement as per normal columns. However, you also
need to specify a maximum \s-1BLOB\s0 size that the <I>database handle</I> can
fetch using the \f(CW\*(C`LongReadLen\*(C'\fR attribute.
.PP
For example:
.PP
.Vb 3
\&    ### $dbh is a connected database handle
\&    $sth = $dbh\->prepare( "SELECT blob_column FROM blobby_table" );
\&    $sth\->execute;
.Ve
.PP
would fail.
.PP
.Vb 3
\&    ### $dbh is a connected database handle
\&    ### Set the maximum BLOB size...
\&    $dbh\->{LongReadLen} = 16384;        ### 16Kb...Not much of a BLOB!
\&
\&    $sth = $dbh\->prepare( "..." );
.Ve
.PP
would succeed <I>provided no column values were larger than the specified
value</I>.
.PP
If the \s-1BLOB\s0 data is longer than the value of \f(CW\*(C`LongReadLen\*(C'\fR, then an
error will occur. However, the \s-1DBI\s0 provides an additional piece of
functionality that will automatically truncate the fetched \s-1BLOB\s0 to the
size of \f(CW\*(C`LongReadLen\*(C'\fR if it is longer. This does not cause an error to
occur, but may make your fetched \s-1BLOB\s0 data useless.
.PP
This behaviour is regulated by the \f(CW\*(C`LongTruncOk\*(C'\fR attribute which is 
defaultly set to a false value ( thus making overlong \s-1BLOB\s0 fetches fail ).
.PP
.Vb 3
\&    ### Set BLOB handling such that it\*(Aqs 16Kb and can be truncated
\&    $dbh\->{LongReadLen} = 16384;
\&    $dbh\->{LongTruncOk} = 1;
.Ve
.PP
Truncation of \s-1BLOB\s0 data may not be a big deal in cases where the \s-1BLOB\s0
contains run-length encoded data, but data containing checksums at the end,
for example, a \s-1ZIP\s0 file, would be rendered useless.
.SS "5.3 How can I invoke stored procedures with \s-1DBI\s0?"
.IX Subsection "5.3 How can I invoke stored procedures with DBI?"
The \s-1DBI\s0 does not define a database-independent way of calling stored procedures.
.PP
However, most database that support them also provide a way to call
them from \s-1SQL\s0 statements \- and the \s-1DBI\s0 certainly supports that.
.PP
So, assuming that you have created a stored procedure within the target
database, \fIeg\fR, an Oracle database, you can use \f(CW$dbh\fR\->\f(CW\*(C`do()\*(C'\fR to
immediately execute the procedure. For example,
.PP
.Vb 1
\&    $dbh\->do( "BEGIN someProcedure; END;" );   # Oracle\-specific
.Ve
.PP
You should also be able to \f(CW\*(C`prepare\*(C'\fR and \f(CW\*(C`execute\*(C'\fR, which is
the recommended way if you'll be calling the procedure often.
.SS "5.4 How can I get return values from stored procedures with \s-1DBI\s0?"
.IX Subsection "5.4 How can I get return values from stored procedures with DBI?"
.Vb 1
\&    Contributed by Jeff Urlwin
\&
\&    $sth = $dbh\->prepare( "BEGIN foo(:1, :2, :3); END;" );
\&    $sth\->bind_param(1, $a);
\&    $sth\->bind_param_inout(2, \e$path, 2000);
\&    $sth\->bind_param_inout(3, \e$success, 2000);
\&    $sth\->execute;
.Ve
.PP
Remember to perform error checking, though! ( Or use the \f(CW\*(C`RaiseError\*(C'\fR
attribute ).
.SS "5.5 How can I create or drop a database with \s-1DBI\s0?"
.IX Subsection "5.5 How can I create or drop a database with DBI?"
Database creation and deletion are concepts that are entirely too abstract
to be adequately supported by \s-1DBI\s0. For example, Oracle does not support the
concept of dropping a database at all! Also, in Oracle, the database
\&\fIserver\fR essentially \fIis\fR the database, whereas in mSQL, the
server process runs happily without any databases created in it. The
problem is too disparate to attack in a worthwhile way.
.PP
Some drivers, therefore, support database creation and deletion through
the private \f(CW\*(C`func()\*(C'\fR methods. You should check the documentation for
the drivers you are using to see if they support this mechanism.
.ie n .SS "5.6 How can I ""commit"" or ""rollback"" a statement with \s-1DBI\s0?"
.el .SS "5.6 How can I \f(CWcommit\fP or \f(CWrollback\fP a statement with \s-1DBI\s0?"
.IX Subsection "5.6 How can I commit or rollback a statement with DBI?"
See the \f(CW\*(C`commit()\*(C'\fR and \f(CW\*(C`rollback()\*(C'\fR methods in the \s-1DBI\s0 Specification.
.PP
Chapter 6 of \*(L"Programming the Perl \s-1DBI\s0\*(R" discusses transaction handling within
the context of \s-1DBI\s0 in more detail.
.ie n .SS "5.7 How are ""NULL"" values handled by \s-1DBI\s0?"
.el .SS "5.7 How are \f(CWNULL\fP values handled by \s-1DBI\s0?"
.IX Subsection "5.7 How are NULL values handled by DBI?"
\&\f(CW\*(C`NULL\*(C'\fR values in \s-1DBI\s0 are specified to be treated as the value \f(CW\*(C`undef\*(C'\fR.
\&\f(CW\*(C`NULL\*(C'\fRs can be inserted into databases as \f(CW\*(C`NULL\*(C'\fR, for example:
.PP
.Vb 1
\&    $rv = $dbh\->do( "INSERT INTO table VALUES( NULL )" );
.Ve
.PP
but when queried back, the \f(CW\*(C`NULL\*(C'\fRs should be tested against \f(CW\*(C`undef\*(C'\fR.
This is standard across all drivers.
.ie n .SS "5.8 What are these ""func()"" methods all about?"
.el .SS "5.8 What are these \f(CWfunc()\fP methods all about?"
.IX Subsection "5.8 What are these func() methods all about?"
The \f(CW\*(C`func()\*(C'\fR method is defined within \s-1DBI\s0 as being an entry point
for database-specific functionality, \fIeg\fR, the ability to create or
drop databases. Invoking these driver-specific methods is simple, for example,
to invoke a \f(CW\*(C`createDatabase\*(C'\fR method that has one argument, we would
write:
.PP
.Vb 1
\&    $rv =$dbh\->func( \*(Aqargument\*(Aq, \*(AqcreateDatabase\*(Aq );
.Ve
.PP
Software developers should note that the \f(CW\*(C`func()\*(C'\fR methods are
non-portable between databases.
.SS "5.9 Is \s-1DBI\s0 Year 2000 Compliant?"
.IX Subsection "5.9 Is DBI Year 2000 Compliant?"
\&\s-1DBI\s0 has no knowledge of understanding of what dates are. Therefore, \s-1DBI\s0
itself does not have a Year 2000 problem. Individual drivers may use date
handling code internally and therefore be potentially susceptible to the
Year 2000 problem, but this is unlikely.
.PP
You may also wish to read the ``Does Perl have a Year 2000 problem?'' section
of the Perl \s-1FAQ\s0 at:
.PP
.Vb 1
\&    http://www.perl.com/CPAN/doc/FAQs/FAQ/PerlFAQ.html
.Ve
.SH "Support and Training"
.IX Header "Support and Training"
The Perl5 Database Interface is \fI\s-1FREE\s0\fR software. \s-1IT\s0 \s-1COMES\s0 \s-1WITHOUT\s0 \s-1WARRANTY\s0
\&\s-1OF\s0 \s-1ANY\s0 \s-1KIND\s0. See the \s-1DBI\s0 \s-1README\s0 for more details.
.PP
However, some organizations are providing either technical support or
training programs on \s-1DBI\s0. The present author has no knowledge as
to the quality of these services. The links are included for reference
purposes only and should not be regarded as recommendations in any way.
\&\fICaveat emptor\fR.
.SS "Commercial Support"
.IX Subsection "Commercial Support"
.IP "The Perl Clinic" 4
.IX Item "The Perl Clinic"
The Perl Clinic provides commercial support for \fIPerl\fR and Perl
related problems, including the \fI\s-1DBI\s0\fR and its drivers.  Support is
provided by the company with whom Tim Bunce, author of \fI\s-1DBI\s0\fR and
\&\fIDBD::Oracle\fR, works and ActiveState. For more information on their
services, please see:
.Sp
.Vb 1
\&    http://www.perlclinic.com
.Ve
.SS "Training"
.IX Subsection "Training"
.IP "Westlake Solutions" 4
.IX Item "Westlake Solutions"
A hands-on class for experienced Perl \s-1CGI\s0 developers that teaches
how to write database-connected \s-1CGI\s0 scripts using Perl and \s-1DBI\s0.pm.  This
course, along with four other courses on \s-1CGI\s0 scripting with Perl, is
taught in Washington, \s-1DC\s0; Arlington, Virginia; and on-site worldwide upon
request.
.Sp
See:
.Sp
.Vb 1
\&    http://www.westlake.com/training
.Ve
.Sp
for more details.
.SH "Other References"
.IX Header "Other References"
In this section, we present some miscellaneous \s-1WWW\s0 links that may be of
some interest to \s-1DBI\s0 users. These are not verified and may result in
unknown sites or missing documents.
.PP
.Vb 3
\&    http://www\-ccs.cs.umass.edu/db.html
\&    http://www.odmg.org/odmg93/updates_dbarry.html
\&    http://www.jcc.com/sql_stnd.html
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Alligator Descartes.
Portions are Copyright their original stated authors.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This document is Copyright (c)1994\-2000 Alligator Descartes, with portions
Copyright (c)1994\-2000 their original authors. This module is released under
the 'Artistic' license which you can find in the perl distribution.
.PP
This document is Copyright (c)1997\-2000 Alligator Descartes. All rights reserved.
Permission to distribute this document, in full or in part, via email,
Usenet, ftp archives or http is granted providing that no charges are involved,
reasonable attempt is made to use the most current version and all credits
and copyright notices are retained ( the \fI\s-1AUTHOR\s0\fR and \fI\s-1COPYRIGHT\s0\fR sections ).
Requests for other distribution rights, including incorporation into 
commercial products, such as books, magazine articles or CD-ROMs should be
made to Alligator Descartes.
                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::FAQ5.18.3pm                             0100644 0001750 0001750 00000127513 12566241601 022733  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::FAQ 3"
.TH DBI::FAQ 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::FAQ \-\- The Frequently Asked Questions for the Perl5 Database Interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    perldoc DBI::FAQ
.Ve
.SH "VERSION"
.IX Header "VERSION"
This document is currently at version \fI0.38\fR, as of \fIFebruary 8th, 2000\fR.
.PP
That's \fBvery\fR old. A newer \s-1FAQ\s0 can be found at <http://faq.dbi\-support.com/>
.PP
Neither this document nor that web site are actively maintained.
Volunteers are welcome.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This document serves to answer the most frequently asked questions on both
the \s-1DBI\s0 Mailing Lists and personally to members of the \s-1DBI\s0 development team.
.SH "Basic Information & Information Sources"
.IX Header "Basic Information & Information Sources"
.SS "1.1 What is \s-1DBI,\s0 DBperl, Oraperl and *perl?"
.IX Subsection "1.1 What is DBI, DBperl, Oraperl and *perl?"
To quote Tim Bunce, the architect and author of \s-1DBI:\s0
.PP
.Vb 4
\&      DBI is a database access Application Programming Interface (API)
\&      for the Perl Language. The DBI API Specification defines a set
\&      of functions, variables and conventions that provide a consistent
\&      database interface independent of the actual database being used.
.Ve
.PP
In simple language, the \s-1DBI\s0 interface allows users to access multiple database
types transparently. So, if you connecting to an Oracle, Informix, mSQL, Sybase
or whatever database, you don't need to know the underlying mechanics of the
3GL layer. The \s-1API\s0 defined by \s-1DBI\s0 will work on \fIall\fR these database types.
.PP
A similar benefit is gained by the ability to connect to two \fIdifferent\fR
databases of different vendor within the one perl script, \fIie\fR, I want
to read data from an Oracle database and insert it back into an Informix
database all within one program. The \s-1DBI\s0 layer allows you to do this simply
and powerfully.
.PP
\&\fIDBperl\fR is the old name for the interface specification. It's usually
now used to denote perl\fI4\fR modules on database interfacing, such as,
\&\fIoraperl\fR, \fIisqlperl\fR, \fIingperl\fR and so on. These interfaces
didn't have a standard \s-1API\s0 and are generally \fInot\fR supported.
.PP
Here's a list of DBperl modules, their corresponding \s-1DBI\s0 counterparts and
support information. \fIPlease note\fR, the author's listed here generally
\&\fIdo not\fR maintain the \s-1DBI\s0 module for the same database. These email
addresses are unverified and should only be used for queries concerning the
perl4 modules listed below. \s-1DBI\s0 driver queries should be directed to the
\&\fIdbi-users\fR mailing list.
.PP
.Vb 10
\&    Module Name Database Required   Author          DBI
\&    \-\-\-\-\-\-\-\-\-\-\- \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-   \-\-\-\-\-\-          \-\-\-
\&    Sybperl     Sybase              Michael Peppler DBD::Sybase
\&                                    <mpeppler@itf.ch>
\&    Oraperl     Oracle 6 & 7        Kevin Stock     DBD::Oracle
\&                                    <dbi\-users@perl.org>
\&    Ingperl     Ingres              Tim Bunce &     DBD::Ingres
\&                                    Ted Lemon
\&                                    <dbi\-users@perl.org>
\&    Interperl   Interbase           Buzz Moschetti  DBD::Interbase
\&                                    <buzz@bear.com>
\&    Uniperl     Unify 5.0           Rick Wargo      None
\&                                    <rickers@coe.drexel.edu>
\&    Pgperl      Postgres            Igor Metz       DBD::Pg
\&                                    <metz@iam.unibe.ch>
\&    Btreeperl   NDBM                John Conover    SDBM?
\&                                    <john@johncon.com>
\&    Ctreeperl   C\-Tree              John Conover    None
\&                                    <john@johncon.com>
\&    Cisamperl   Informix C\-ISAM     Mathias Koerber None
\&                                    <mathias@unicorn.swi.com.sg>
\&    Duaperl     X.500 Directory     Eric Douglas    None
\&                User Agent
.Ve
.PP
However, some \s-1DBI\s0 modules have DBperl emulation layers, so, \fIDBD::Oracle\fR
comes with an Oraperl emulation layer, which allows you to run legacy oraperl
scripts without modification. The emulation layer translates the oraperl \s-1API\s0
calls into \s-1DBI\s0 calls and executes them through the \s-1DBI\s0 switch.
.PP
Here's a table of emulation layer information:
.PP
.Vb 8
\&    Module                  Emulation Layer     Status
\&    \-\-\-\-\-\-          \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-     \-\-\-\-\-\-
\&    DBD::Oracle     Oraperl             Complete
\&    DBD::Informix   Isqlperl            Under development
\&    DBD::Ingres     Ingperl             Complete?
\&    DBD::Sybase     Sybperl             Working? ( Needs verification )
\&    DBD::mSQL       Msqlperl            Experimentally released with
\&                                        DBD::mSQL\-0.61
.Ve
.PP
The \fIMsqlperl\fR emulation is a special case. \fIMsqlperl\fR is a perl5 driver
for \fImSQL\fR databases, but does not conform to the \s-1DBI\s0 Specification. It's
use is being deprecated in favour of \fIDBD::mSQL\fR. \fIMsqlperl\fR may be downloaded
from \s-1CPAN \s0\fIvia\fR:
.PP
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Msqlperl
.Ve
.SS "1.2. Where can I get it from?"
.IX Subsection "1.2. Where can I get it from?"
The Comprehensive Perl Archive Network
resources should be used for retrieving up-to-date versions of the \s-1DBI\s0
and drivers. \s-1CPAN\s0 may be accessed \fIvia\fR Tom Christiansen's splendid
\&\fI\s-1CPAN\s0 multiplexer\fR program located at:
.PP
.Vb 1
\&    http://www.perl.com/CPAN/
.Ve
.PP
For more specific version information and exact URLs of drivers, please see
the \s-1DBI\s0 drivers list and the \s-1DBI\s0 module pages which can be found on:
.PP
.Vb 1
\&    http://dbi.perl.org/
.Ve
.PP
This list is automatically generated on a nightly basis from \s-1CPAN\s0 and should
be up-to-date.
.SS "1.3. Where can I get more information?"
.IX Subsection "1.3. Where can I get more information?"
There are a few information sources on \s-1DBI.\s0
.ie n .IP "\fI""Programming the Perl \s-1DBI""\s0\fR" 4
.el .IP "\fI``Programming the Perl \s-1DBI''\s0\fR" 4
.IX Item "Programming the Perl DBI"
\&\*(L"Programming the Perl \s-1DBI\*(R"\s0 is the \fIofficial\fR book on the \s-1DBI\s0 written by
Alligator Descartes and Tim Bunce and published by O'Reilly & Associates.
The book was released on February 9th, 2000.
.Sp
The table of contents is:
.Sp
.Vb 10
\&    Preface
\&    1. Introduction
\&        From Mainframes to Workstations
\&        Perl
\&        DBI in the Real World
\&        A Historical Interlude and Standing Stones
\&    2. Basic Non\-DBI Databases
\&        Storage Managers and Layers
\&        Query Languages and Data Functions
\&        Standing Stones and the Sample Database
\&        Flat\-File Databases
\&        Putting Complex Data into Flat Files
\&        Concurrent Database Access and Locking
\&        DBM Files and the Berkeley Database Manager
\&        The MLDBM Module
\&        Summary
\&    3. SQL and Relational Databases
\&        The Relational Database Methodology
\&        Datatypes and NULL Values
\&        Querying Data
\&        Modifying Data Within Tables
\&        Creating and Destroying Tables
\&    4. Programming with the DBI
\&        DBI Architecture
\&        Handles
\&        Data Source Names
\&        Connection and Disconnection
\&        Error Handling
\&        Utility Methods and Functions
\&    5. Interacting with the Database
\&        Issuing Simple Queries
\&        Executing Non\-SELECT Statements
\&        Binding Parameters to Statements
\&        Binding Output Columns
\&        do() Versus prepare()
\&        Atomic and Batch Fetching
\&    6. Advanced DBI
\&        Handle Attributes and Metadata
\&        Handling LONG/LOB Data
\&        Transactions, Locking, and Isolation
\&    7. ODBC and the DBI
\&        ODBC \-\- Embraced and Extended
\&        DBI \-\- Thrashed and Mutated
\&        The Nuts and Bolts of ODBC
\&        ODBC from Perl
\&        The Marriage of DBI and ODBC
\&        Questions and Choices
\&        Moving Between Win32::ODBC and the DBI
\&        And What About ADO?
\&    8. DBI Shell and Database Proxying
\&        dbish \-\- The DBI Shell
\&        Database Proxying
\&    A. DBI Specification
\&    B. Driver and Database Characteristics
\&    C. ASLaN Sacred Site Charter
\&    Index
.Ve
.Sp
The book should be available from all good bookshops and can be ordered online
either <I>via</I> O'Reilly & Associates
.Sp
.Vb 1
\&    http://www.oreilly.com/catalog/perldbi
.Ve
.Sp
or Amazon
.Sp
.Vb 1
\&    http://www.amazon.com/exec/obidos/ASIN/1565926994/dbi
.Ve
.IP "\fI\s-1POD\s0 documentation\fR" 4
.IX Item "POD documentation"
\&\fI\s-1POD\s0\fRs are chunks of documentation usually embedded within perl programs
that document the code ``\fIin place\fR'', providing a useful resource for
programmers and users of modules. \s-1POD\s0 for \s-1DBI\s0 and drivers is beginning to
become more commonplace, and documentation for these modules can be read
with the \f(CW\*(C`perldoc\*(C'\fR program included with Perl.
.RS 4
.IP "The \s-1DBI\s0 Specification" 4
.IX Item "The DBI Specification"
The \s-1POD\s0 for the \s-1DBI\s0 Specification can be read with the:
.Sp
.Vb 1
\&    perldoc DBI
.Ve
.Sp
command. The Specification also forms Appendix A of \*(L"Programming the Perl
\&\s-1DBI\*(R".\s0
.IP "Oraperl" 4
.IX Item "Oraperl"
Users of the Oraperl emulation layer bundled with \fIDBD::Oracle\fR, may read
up on how to program with the Oraperl interface by typing:
.Sp
.Vb 1
\&    perldoc Oraperl
.Ve
.Sp
This will produce an updated copy of the original oraperl man page written by
Kevin Stock for perl4. The oraperl \s-1API\s0 is fully listed and described there.
.IP "Drivers" 4
.IX Item "Drivers"
Users of the \s-1DBD\s0 modules may read about some of the private functions
and quirks of that driver by typing:
.Sp
.Vb 1
\&    perldoc <driver>
.Ve
.Sp
For example, the \fIDBD::mSQL\fR driver is bundled with driver-specific
documentation that can be accessed by typing
.Sp
.Vb 1
\&    perldoc DBD::mSQL
.Ve
.IP "Frequently Asked Questions" 4
.IX Item "Frequently Asked Questions"
This document, the \fIFrequently Asked Questions\fR is also available as \s-1POD\s0
documentation! You can read this on your own system by typing:
.Sp
.Vb 1
\&    perldoc DBI::FAQ
.Ve
.Sp
This may be more convenient to persons not permanently, or conveniently,
connected to the Internet. The \fI\s-1DBI::FAQ\s0\fR module should be downloaded and
installed for the more up-to-date version.
.Sp
The version of \fI\s-1DBI::FAQ\s0\fR shipped with the \f(CW\*(C`DBI\*(C'\fR module may be slightly out
of date.
.IP "\s-1POD\s0 in general" 4
.IX Item "POD in general"
Information on writing \s-1POD,\s0 and on the philosophy of \s-1POD\s0 in general, can be
read by typing:
.Sp
.Vb 1
\&    perldoc perlpod
.Ve
.Sp
Users with the Tk module installed may be interested to learn there is a
Tk-based \s-1POD\s0 reader available called \f(CW\*(C`tkpod\*(C'\fR, which formats \s-1POD\s0 in a convenient
and readable way. This is available \fIvia\fR \s-1CPAN\s0 as the module called
\&\fITk::POD\fR and is highly recommended.
.RE
.RS 4
.RE
.IP "\fIDriver and Database Characteristics\fR" 4
.IX Item "Driver and Database Characteristics"
The driver summaries that were produced for Appendix B of \*(L"Programming the
Perl \s-1DBI\*(R"\s0 are available online at:
.Sp
.Vb 1
\&    http://dbi.perl.org/
.Ve
.Sp
in the driver information table. These summaries contain standardised
information on each driver and database which should aid you in selecting
a database to use. It will also inform you quickly of any issues within
drivers or whether a driver is not fully compliant with the \s-1DBI\s0 Specification.
.IP "\fIRambles, Tidbits and Observations\fR" 4
.IX Item "Rambles, Tidbits and Observations"
.Vb 1
\&    http://dbi.perl.org/tidbits
.Ve
.Sp
There are a series of occasional rambles from various people on the
\&\s-1DBI\s0 mailing lists who, in an attempt to clear up a simple point, end up
drafting fairly comprehensive documents. These are quite often varying in
quality, but do provide some insights into the workings of the interfaces.
.IP "\fIArticles\fR" 4
.IX Item "Articles"
A list of articles discussing the \s-1DBI\s0 can be found on the \s-1DBI WWW\s0 page at:
.Sp
.Vb 1
\&    http://dbi.perl.org/
.Ve
.Sp
These articles are of varying quality and age, from the original Perl Journal
article written by Alligator and Tim, to more recent debacles published online
from about.com.
.IP "\fI\s-1README\s0 files\fR" 4
.IX Item "README files"
The \fI\s-1README\s0\fR files included with each driver occasionally contains
some useful information ( no, really! ) that may be pertinent to the user.
Please read them. It makes our worthless existences more bearable. These
can all be read from the main \s-1DBI WWW\s0 page at:
.Sp
.Vb 1
\&    http://dbi.perl.org/
.Ve
.IP "\fIMailing Lists\fR" 4
.IX Item "Mailing Lists"
There are three mailing lists for \s-1DBI:\s0
.Sp
.Vb 3
\&    dbi\-announce@perl.org     \-\- for announcements, very low traffic
\&    dbi\-users@perl.org        \-\- general user support
\&    dbi\-dev@perl.org          \-\- for driver developers (no user support)
.Ve
.Sp
For information on how to subscribe, set digest mode etc, and unsubscribe,
send an email message (the content will be ignored) to:
.Sp
.Vb 3
\&    dbi\-announce\-help@perl.org
\&    dbi\-users\-help@perl.org
\&    dbi\-dev\-help@perl.org
.Ve
.IP "\fIMailing List Archives\fR" 4
.IX Item "Mailing List Archives"
.RS 4
.PD 0
.IP "\fI\s-1US\s0 Mailing List Archives\fR" 4
.IX Item "US Mailing List Archives"
.PD
.Vb 1
\&    http://outside.organic.com/mail\-archives/dbi\-users/
.Ve
.Sp
Searchable hypermail archives of the three mailing lists, and some of the
much older traffic have been set up for users to browse.
.IP "\fIEuropean Mailing List Archives\fR" 4
.IX Item "European Mailing List Archives"
.Vb 1
\&    http://www.rosat.mpe\-garching.mpg.de/mailing\-lists/PerlDB\-Interest
.Ve
.Sp
As per the \s-1US\s0 archive above.
.RE
.RS 4
.RE
.SH "Compilation Problems"
.IX Header "Compilation Problems"
.ie n .SS "2.1. Compilation problems or ""It fails the test!"""
.el .SS "2.1. Compilation problems or ``It fails the test!''"
.IX Subsection "2.1. Compilation problems or It fails the test!"
First off, consult the \s-1README\s0 for that driver in case there is useful
information about the problem. It may be a known problem for your given
architecture and operating system or database. You can check the \s-1README\s0
files for each driver in advance online at:
.PP
.Vb 1
\&    http://dbi.perl.org/
.Ve
.PP
If it's a known problem, you'll probably have to wait till it gets fixed. If
you're \fIreally\fR needing it fixed, try the following:
.IP "\fIAttempt to fix it yourself\fR" 4
.IX Item "Attempt to fix it yourself"
This technique is generally \fInot\fR recommended to the faint-hearted.
If you do think you have managed to fix it, then, send a patch file
( context diff ) to the author with an explanation of:
.RS 4
.IP "\(bu" 4
What the problem was, and test cases, if possible.
.IP "\(bu" 4
What you needed to do to fix it. Please make sure you mention everything.
.IP "\(bu" 4
Platform information, database version, perl version, module version and
\&\s-1DBI\s0 version.
.RE
.RS 4
.RE
.IP "\fIEmail the author\fR Do \fI\s-1NOT\s0\fR whinge!" 4
.IX Item "Email the author Do NOT whinge!"
Please email the address listed in the \s-1WWW\s0 pages for whichever driver you
are having problems with. Do \fInot\fR directly email the author at a
known address unless it corresponds with the one listed.
.Sp
We tend to have real jobs to do, and we do read the mailing lists for
problems. Besides, we may not have access to <\fIinsert your
favourite brain-damaged platform here\fR> and couldn't be of any
assistance anyway! Apologies for sounding harsh, but that's the way of it!
.Sp
However, you might catch one of these creative genii at 3am when we're
doing this sort of stuff anyway, and get a patch within 5 minutes. The
atmosphere in the \s-1DBI\s0 circle is that we \fIdo\fR appreciate the users'
problems, since we work in similar environments.
.Sp
If you are planning to email the author, please furnish as much information
as possible, \fIie\fR:
.RS 4
.IP "\(bu" 4
\&\fI\s-1ALL\s0\fR the information asked for in the \s-1README\s0 file in
the problematic module. And we mean \fI\s-1ALL\s0\fR of it. We don't
put lines like that in documentation for the good of our health, or
to meet obscure \s-1README\s0 file standards of length.
.IP "\(bu" 4
If you have a core dump, try the \fIDevel::CoreStack\fR module for
generating a stack trace from the core dump. Send us that too.
\&\fIDevel::CoreStack\fR can be found on \s-1CPAN\s0 at:
.Sp
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Devel::CoreStack
.Ve
.IP "\(bu" 4
Module versions, perl version, test cases, operating system versions
and \fIany other pertinent information\fR.
.RE
.RS 4
.Sp
Remember, the more information you send us, the quicker we can track
problems down. If you send us no useful information, expect nothing back.
.Sp
Finally, please be aware that some authors, including Tim Bunce, specifically
request that you do \fInot\fR mail them directly. Please respect their wishes and
use the email addresses listed in the appropriate module \f(CW\*(C`README\*(C'\fR file.
.RE
.IP "\fIEmail the dbi-users Mailing List\fR" 4
.IX Item "Email the dbi-users Mailing List"
It's usually a fairly intelligent idea to \fIcc\fR the mailing list
anyway with problems. The authors all read the lists, so you lose nothing
by mailing there.
.SH "Platform and Driver Issues"
.IX Header "Platform and Driver Issues"
.SS "3.1 What's the difference between \s-1ODBC\s0 and \s-1DBI\s0?"
.IX Subsection "3.1 What's the difference between ODBC and DBI?"
In terms of architecture \- not much: Both define programming
interfaces. Both allow multiple drivers to be loaded to do the
actual work.
.PP
In terms of ease of use \- much: The \s-1DBI\s0 is a 'high level' interface
that, like Perl itself, strives to make the simple things easy while
still making the hard things possible. The \s-1ODBC\s0 is a 'low level'
interface. All nuts-bolts-knobs-and-dials.
.PP
Now there's an \s-1ODBC\s0 driver for the \s-1DBI \s0(\s-1DBD::ODBC\s0) the \*(L"What's the
difference\*(R" question is more usefully rephrased as:
.PP
Chapter 7 of \*(L"Programming the Perl \s-1DBI\*(R"\s0 covers this topic in far more
detail and should be consulted.
.SS "3.2 What's the difference between Win32::ODBC and \s-1DBD::ODBC\s0?"
.IX Subsection "3.2 What's the difference between Win32::ODBC and DBD::ODBC?"
The \s-1DBI,\s0 and thus \s-1DBD::ODBC,\s0 has a different philosophy from the
Win32::ODBC module:
.PP
The Win32::ODBC module is a 'thin' layer over the low-level \s-1ODBC API.\s0
The \s-1DBI\s0 defines a simpler 'higher level' interface.
.PP
The Win32::ODBC module gives you access to more of the \s-1ODBC API.\s0
The \s-1DBI\s0 and \s-1DBD::ODBC\s0 give you access to only the essentials.
(But, unlike Win32::ODBC, the \s-1DBI\s0 and \s-1DBD::ODBC\s0 do support parameter
binding and multiple prepared statements which reduces the load on
the database server and can dramatically increase performance.)
.PP
The Win32::ODBC module only works on Win32 systems.
The \s-1DBI\s0 and \s-1DBD::ODBC\s0 are very portable and work on Win32 and Unix.
.PP
The \s-1DBI\s0 and \s-1DBD::ODBC\s0 modules are supplied as a standard part of the
Perl 5.004 binary distribution for Win32 (they don't work with the
older, non-standard, ActiveState port).
.PP
Scripts written with the \s-1DBI\s0 and \s-1DBD::ODBC\s0 are faster than Win32::ODBC
on Win32 and are trivially portable to other supported database types.
.PP
The \s-1DBI\s0 offers optional automatic printing or \fIdie()\fRing on errors which
makes applications simpler and more robust.
.PP
The current \s-1DBD::ODBC\s0 driver version 0.16 is new and not yet fully stable.
A new release is due soon [relative to the date of the next \s-1TPJ\s0 issue :\-]
and will be much improved and offer more \s-1ODBC\s0 functionality.
.PP
To summarise: The Win32::ODBC module is your best choice if you need
access to more of the \s-1ODBC API\s0 than the \s-1DBI\s0 gives you. Otherwise, the
\&\s-1DBI\s0 and \s-1DBD::ODBC\s0 combination may be your best bet.
.PP
Chapter 7 of \*(L"Programming the Perl \s-1DBI\*(R"\s0 covers this topic in far more
detail and should be consulted.
.SS "3.3 Is \s-1DBI\s0 supported under Windows 95 / \s-1NT\s0 platforms?"
.IX Subsection "3.3 Is DBI supported under Windows 95 / NT platforms?"
Finally, yes! Jeff Urlwin has been working diligently on building
\&\fI\s-1DBI\s0\fR and \fI\s-1DBD::ODBC\s0\fR under these platforms, and, with the
advent of a stabler perl and a port of \fIMakeMaker\fR, the project has
come on by great leaps and bounds.
.PP
The \fI\s-1DBI\s0\fR and \fIDBD::Oracle\fR Win32 ports are now a standard part of \s-1DBI,\s0
so, downloading \fI\s-1DBI\s0\fR of version higher than \fI0.81\fR should work fine as
should using the most recent \fIDBD::Oracle\fR version.
.SS "3.4 Can I access Microsoft Access or SQL-Server databases with \s-1DBI\s0?"
.IX Subsection "3.4 Can I access Microsoft Access or SQL-Server databases with DBI?"
Yes, use the \fI\s-1DBD::ODBC\s0\fR driver.
.SS "3.5 Is there a \s-1DBD\s0 for <\fIinsert favourite database here\fP>?"
.IX Subsection "3.5 Is there a DBD for <insert favourite database here>?"
First check if a driver is available on \s-1CPAN\s0 by searching for the name of the
database (including common abbreviations and aliases).
.PP
Here's a general query that'll match all distributions:
.PP
.Vb 1
\&    http://search.cpan.org/search?query=DBD&mode=dist
.Ve
.PP
If you can't find a driver that way, you could check if the database supports
\&\s-1ODBC\s0 drivers. If so then you could probably use the \s-1DBD::ODBC\s0 driver:
.PP
.Vb 1
\&    http://search.cpan.org/dist/DBD\-ODBC/
.Ve
.PP
If not, then try asking on the dbi-users mailing list.
.SS "3.6 What's \s-1DBM\s0? And why should I use \s-1DBI\s0 instead?"
.IX Subsection "3.6 What's DBM? And why should I use DBI instead?"
Extracted from ``\fI\s-1DBI \-\s0 The Database Interface for Perl 5\fR'':
.PP
.Vb 3
\&    \`\`UNIX was originally blessed with simple file\-based \`\`databases\*(Aq\*(Aq, namely
\&    the dbm system. dbm lets you store data in files, and retrieve
\&    that data quickly. However, it also has serious drawbacks.
\&
\&        File Locking
\&
\&        The dbm systems did not allow particularly robust file locking
\&        capabilities, nor any capability for correcting problems arising through
\&        simultaneous writes [ to the database ].
\&
\&        Arbitrary Data Structures
\&
\&        The dbm systems only allows a single fixed data structure:
\&        key\-value pairs. That value could be a complex object, such as a
\&        [ C ] struct, but the key had to be unique. This was a large
\&        limitation on the usefulness of dbm systems.
\&
\&    However, dbm systems still provide a useful function for users with
\&    simple datasets and limited resources, since they are fast, robust and
\&    extremely well\-tested. Perl modules to access dbm systems have now
\&    been integrated into the core Perl distribution via the
\&    AnyDBM_File module.\*(Aq\*(Aq
.Ve
.PP
To sum up, \s-1DBM\s0 is a perfectly satisfactory solution for essentially read-only
databases, or small and simple datasets. However, for more
scalable dataset handling, not to mention robust transactional locking,
users are recommended to use a more powerful database engine \fIvia\fR \fI\s-1DBI\s0\fR.
.PP
Chapter 2 of \*(L"Programming the Perl \s-1DBI\*(R"\s0 discusses \s-1DBM\s0 files in detail.
.SS "3.7 What database do you recommend me using?"
.IX Subsection "3.7 What database do you recommend me using?"
This is a particularly thorny area in which an objective answer is difficult
to come by, since each dataset, proposed usage and system configuration
differs from person to person.
.PP
From the current author's point of view, if the dataset is relatively
small, being tables of less than 1 million rows, and less than 1000 tables
in a given database, then \fImSQL\fR is a perfectly acceptable solution
to your problem. This database is extremely cheap, is wonderfully robust
and has excellent support. More information is available on the Hughes
Technology \s-1WWW\s0 site at:
.PP
.Vb 1
\&    http://www.hughes.com.au
.Ve
.PP
You may also wish to look at MySQL which is a more powerful database engine
that has a similar feel to mSQL.
.PP
.Vb 1
\&    http://www.tcx.se
.Ve
.PP
If the dataset is larger than 1 million row tables or 1000 tables, or if you
have either more money, or larger machines, I would recommend \fIOracle \s-1RDBMS\s0\fR.
Oracle's \s-1WWW\s0 site is an excellent source of more information.
.PP
.Vb 1
\&    http://www.oracle.com
.Ve
.PP
\&\fIInformix\fR is another high-end \s-1RDBMS\s0 that is worth considering. There are
several differences between Oracle and Informix which are too complex for
this document to detail. Information on Informix can be found on their
\&\s-1WWW\s0 site at:
.PP
.Vb 1
\&    http://www.informix.com
.Ve
.PP
In the case of \s-1WWW\s0 fronted applications, \fImSQL\fR may be a better option
due to slow connection times between a \s-1CGI\s0 script and the Oracle \s-1RDBMS\s0 and
also the amount of resource each Oracle connection will consume. \fImSQL\fR
is lighter resource-wise and faster.
.PP
These views are not necessarily representative of anyone else's opinions,
and do not reflect any corporate sponsorship or views. They are provided
\&\fIas-is\fR.
.SS "3.8 Is <\fIinsert feature here\fP> supported in \s-1DBI\s0?"
.IX Subsection "3.8 Is <insert feature here> supported in DBI?"
Given that we're making the assumption that the feature you have requested
is a non-standard database-specific feature, then the answer will be \fIno\fR.
.PP
\&\s-1DBI\s0 reflects a \fIgeneric\fR \s-1API\s0 that will work for most databases, and has
no database-specific functionality.
.PP
However, driver authors may, if they so desire, include hooks to database-specific
functionality through the \f(CW\*(C`func()\*(C'\fR method defined in the \s-1DBI API.\s0
Script developers should note that use of functionality provided \fIvia\fR
the \f(CW\*(C`func()\*(C'\fR methods is very unlikely to be portable across databases.
.SH "Programming Questions"
.IX Header "Programming Questions"
.SS "4.1 Is \s-1DBI\s0 any use for \s-1CGI\s0 programming?"
.IX Subsection "4.1 Is DBI any use for CGI programming?"
In a word, yes! \s-1DBI\s0 is hugely useful for \s-1CGI\s0 programming! In fact, I would
tentatively say that \s-1CGI\s0 programming is one of two top uses for \s-1DBI.\s0
.PP
\&\s-1DBI\s0 confers the ability to \s-1CGI\s0 programmers to power WWW-fronted databases
to their users, which provides users with vast quantities of ordered
data to play with. \s-1DBI\s0 also provides the possibility that, if a site is
receiving far too much traffic than their database server can cope with, they
can upgrade the database server behind the scenes with no alterations to
the \s-1CGI\s0 scripts.
.SS "4.2 How do I get faster connection times with DBD::Oracle and \s-1CGI\s0?"
.IX Subsection "4.2 How do I get faster connection times with DBD::Oracle and CGI?"
.Vb 1
\&    Contributed by John D. Groenveld
.Ve
.PP
The Apache \f(CW\*(C`httpd\*(C'\fR maintains a pool of \f(CW\*(C`httpd\*(C'\fR children to service client
requests.
.PP
Using the Apache \fImod_perl\fR module by \fIDoug MacEachern\fR, the perl
interpreter is embedded with the \f(CW\*(C`httpd\*(C'\fR children. The \s-1CGI, DBI,\s0 and your
other favorite modules can be loaded at the startup of each child. These
modules will not be reloaded unless changed on disk.
.PP
For more information on Apache, see the Apache Project's \s-1WWW\s0 site:
.PP
.Vb 1
\&    http://www.apache.org
.Ve
.PP
The \fImod_perl\fR module can be downloaded from \s-1CPAN \s0\fIvia\fR:
.PP
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Apache
.Ve
.SS "4.3 How do I get persistent connections with \s-1DBI\s0 and \s-1CGI\s0?"
.IX Subsection "4.3 How do I get persistent connections with DBI and CGI?"
.Vb 1
\&    Contributed by John D. Groenveld
.Ve
.PP
Using Edmund Mergl's \fIApache::DBI\fR module, database logins are stored in a
hash with each of these \f(CW\*(C`httpd\*(C'\fR child. If your application is based on a
single database user, this connection can be started with each child.
Currently, database connections cannot be shared between \f(CW\*(C`httpd\*(C'\fR children.
.PP
\&\fIApache::DBI\fR can be downloaded from \s-1CPAN \s0\fIvia\fR:
.PP
.Vb 1
\&    http://www.perl.com/cgi\-bin/cpan_mod?module=Apache::DBI
.Ve
.ie n .SS "4.4 ``When I run a perl script from the command line, it works, but, when I run it under the ""httpd"", it fails!'' Why?"
.el .SS "4.4 ``When I run a perl script from the command line, it works, but, when I run it under the \f(CWhttpd\fP, it fails!'' Why?"
.IX Subsection "4.4 ``When I run a perl script from the command line, it works, but, when I run it under the httpd, it fails!'' Why?"
Basically, a good chance this is occurring is due to the fact that the user
that you ran it from the command line as has a correctly configured set of
environment variables, in the case of \fIDBD::Oracle\fR, variables like
\&\f(CW\*(C`ORACLE_HOME\*(C'\fR, \f(CW\*(C`ORACLE_SID\*(C'\fR or \f(CW\*(C`TWO_TASK\*(C'\fR.
.PP
The \f(CW\*(C`httpd\*(C'\fR process usually runs under the user id of \f(CW\*(C`nobody\*(C'\fR,
which implies there is no configured environment. Any scripts attempting to
execute in this situation will correctly fail.
.PP
One way to solve this problem is to set the environment for your database in a
\&\f(CW\*(C`BEGIN { }\*(C'\fR block at the top of your script. Another technique is to configure
your \s-1WWW\s0 server to pass-through certain environment variables to your \s-1CGI\s0
scripts.
.PP
Similarly, you should check your \f(CW\*(C`httpd\*(C'\fR error logfile for any clues,
as well as the ``Idiot's Guide To Solving Perl / \s-1CGI\s0 Problems'' and
``Perl \s-1CGI\s0 Programming \s-1FAQ\s0'' for further information. It is
unlikely the problem is DBI-related.
.PP
The ``Idiot's Guide To Solving Perl / \s-1CGI\s0 Problems'' can be located at:
.PP
.Vb 1
\&    http://www.perl.com/perl/faq/index.html
.Ve
.PP
as can the ``Perl \s-1CGI\s0 Programming \s-1FAQ\s0''. Read \fI\s-1BOTH\s0\fR these documents
carefully!
.ie n .SS "4.5 How do I get the number of rows returned from a ""SELECT"" statement?"
.el .SS "4.5 How do I get the number of rows returned from a \f(CWSELECT\fP statement?"
.IX Subsection "4.5 How do I get the number of rows returned from a SELECT statement?"
Count them. Read the \s-1DBI\s0 docs for the \f(CW\*(C`rows()\*(C'\fR method.
.SH "Miscellaneous Questions"
.IX Header "Miscellaneous Questions"
.SS "5.1 Can I do multi-threading with \s-1DBI\s0?"
.IX Subsection "5.1 Can I do multi-threading with DBI?"
Perl version 5.005 and later can be built to support multi-threading.
The \s-1DBI,\s0 as of version 1.02, does not yet support multi-threading
so it would be unsafe to let more than one thread enter the \s-1DBI\s0 at
the same time.
.PP
It is expected that some future version of the \s-1DBI\s0 will at least be
thread-safe (but not thread-hot) by automatically blocking threads
entering the \s-1DBI\s0 while it's already in use.
.SS "5.2 How do I handle \s-1BLOB\s0 data with \s-1DBI\s0?"
.IX Subsection "5.2 How do I handle BLOB data with DBI?"
Handling \s-1BLOB\s0 data with the \s-1DBI\s0 is very straight-forward. \s-1BLOB\s0 columns are
specified in a \s-1SELECT\s0 statement as per normal columns. However, you also
need to specify a maximum \s-1BLOB\s0 size that the <I>database handle</I> can
fetch using the \f(CW\*(C`LongReadLen\*(C'\fR attribute.
.PP
For example:
.PP
.Vb 3
\&    ### $dbh is a connected database handle
\&    $sth = $dbh\->prepare( "SELECT blob_column FROM blobby_table" );
\&    $sth\->execute;
.Ve
.PP
would fail.
.PP
.Vb 3
\&    ### $dbh is a connected database handle
\&    ### Set the maximum BLOB size...
\&    $dbh\->{LongReadLen} = 16384;        ### 16Kb...Not much of a BLOB!
\&
\&    $sth = $dbh\->prepare( "..." );
.Ve
.PP
would succeed <I>provided no column values were larger than the specified
value</I>.
.PP
If the \s-1BLOB\s0 data is longer than the value of \f(CW\*(C`LongReadLen\*(C'\fR, then an
error will occur. However, the \s-1DBI\s0 provides an additional piece of
functionality that will automatically truncate the fetched \s-1BLOB\s0 to the
size of \f(CW\*(C`LongReadLen\*(C'\fR if it is longer. This does not cause an error to
occur, but may make your fetched \s-1BLOB\s0 data useless.
.PP
This behaviour is regulated by the \f(CW\*(C`LongTruncOk\*(C'\fR attribute which is
set to a false value by default ( thus making overlong \s-1BLOB\s0 fetches fail ).
.PP
.Vb 3
\&    ### Set BLOB handling such that it\*(Aqs 16Kb and can be truncated
\&    $dbh\->{LongReadLen} = 16384;
\&    $dbh\->{LongTruncOk} = 1;
.Ve
.PP
Truncation of \s-1BLOB\s0 data may not be a big deal in cases where the \s-1BLOB\s0
contains run-length encoded data, but data containing checksums at the end,
for example, a \s-1ZIP\s0 file, would be rendered useless.
.SS "5.3 How can I invoke stored procedures with \s-1DBI\s0?"
.IX Subsection "5.3 How can I invoke stored procedures with DBI?"
The \s-1DBI\s0 does not define a database-independent way of calling stored procedures.
.PP
However, most database that support them also provide a way to call
them from \s-1SQL\s0 statements \- and the \s-1DBI\s0 certainly supports that.
.PP
So, assuming that you have created a stored procedure within the target
database, \fIeg\fR, an Oracle database, you can use \f(CW$dbh\fR\->\f(CW\*(C`do()\*(C'\fR to
immediately execute the procedure. For example,
.PP
.Vb 1
\&    $dbh\->do( "BEGIN someProcedure; END;" );   # Oracle\-specific
.Ve
.PP
You should also be able to \f(CW\*(C`prepare\*(C'\fR and \f(CW\*(C`execute\*(C'\fR, which is
the recommended way if you'll be calling the procedure often.
.SS "5.4 How can I get return values from stored procedures with \s-1DBI\s0?"
.IX Subsection "5.4 How can I get return values from stored procedures with DBI?"
.Vb 1
\&    Contributed by Jeff Urlwin
\&
\&    $sth = $dbh\->prepare( "BEGIN foo(:1, :2, :3); END;" );
\&    $sth\->bind_param(1, $a);
\&    $sth\->bind_param_inout(2, \e$path, 2000);
\&    $sth\->bind_param_inout(3, \e$success, 2000);
\&    $sth\->execute;
.Ve
.PP
Remember to perform error checking, though! ( Or use the \f(CW\*(C`RaiseError\*(C'\fR
attribute ).
.SS "5.5 How can I create or drop a database with \s-1DBI\s0?"
.IX Subsection "5.5 How can I create or drop a database with DBI?"
Database creation and deletion are concepts that are entirely too abstract
to be adequately supported by \s-1DBI.\s0 For example, Oracle does not support the
concept of dropping a database at all! Also, in Oracle, the database
\&\fIserver\fR essentially \fIis\fR the database, whereas in mSQL, the
server process runs happily without any databases created in it. The
problem is too disparate to attack in a worthwhile way.
.PP
Some drivers, therefore, support database creation and deletion through
the private \f(CW\*(C`func()\*(C'\fR methods. You should check the documentation for
the drivers you are using to see if they support this mechanism.
.ie n .SS "5.6 How can I ""commit"" or ""rollback"" a statement with \s-1DBI\s0?"
.el .SS "5.6 How can I \f(CWcommit\fP or \f(CWrollback\fP a statement with \s-1DBI\s0?"
.IX Subsection "5.6 How can I commit or rollback a statement with DBI?"
See the \f(CW\*(C`commit()\*(C'\fR and \f(CW\*(C`rollback()\*(C'\fR methods in the \s-1DBI\s0 Specification.
.PP
Chapter 6 of \*(L"Programming the Perl \s-1DBI\*(R"\s0 discusses transaction handling within
the context of \s-1DBI\s0 in more detail.
.ie n .SS "5.7 How are ""NULL"" values handled by \s-1DBI\s0?"
.el .SS "5.7 How are \f(CWNULL\fP values handled by \s-1DBI\s0?"
.IX Subsection "5.7 How are NULL values handled by DBI?"
\&\f(CW\*(C`NULL\*(C'\fR values in \s-1DBI\s0 are specified to be treated as the value \f(CW\*(C`undef\*(C'\fR.
\&\f(CW\*(C`NULL\*(C'\fRs can be inserted into databases as \f(CW\*(C`NULL\*(C'\fR, for example:
.PP
.Vb 1
\&    $rv = $dbh\->do( "INSERT INTO table VALUES( NULL )" );
.Ve
.PP
but when queried back, the \f(CW\*(C`NULL\*(C'\fRs should be tested against \f(CW\*(C`undef\*(C'\fR.
This is standard across all drivers.
.ie n .SS "5.8 What are these ""func()"" methods all about?"
.el .SS "5.8 What are these \f(CWfunc()\fP methods all about?"
.IX Subsection "5.8 What are these func() methods all about?"
The \f(CW\*(C`func()\*(C'\fR method is defined within \s-1DBI\s0 as being an entry point
for database-specific functionality, \fIeg\fR, the ability to create or
drop databases. Invoking these driver-specific methods is simple, for example,
to invoke a \f(CW\*(C`createDatabase\*(C'\fR method that has one argument, we would
write:
.PP
.Vb 1
\&    $rv =$dbh\->func( \*(Aqargument\*(Aq, \*(AqcreateDatabase\*(Aq );
.Ve
.PP
Software developers should note that the \f(CW\*(C`func()\*(C'\fR methods are
non-portable between databases.
.SS "5.9 Is \s-1DBI\s0 Year 2000 Compliant?"
.IX Subsection "5.9 Is DBI Year 2000 Compliant?"
\&\s-1DBI\s0 has no knowledge of understanding of what dates are. Therefore, \s-1DBI\s0
itself does not have a Year 2000 problem. Individual drivers may use date
handling code internally and therefore be potentially susceptible to the
Year 2000 problem, but this is unlikely.
.PP
You may also wish to read the ``Does Perl have a Year 2000 problem?'' section
of the Perl \s-1FAQ\s0 at:
.PP
.Vb 1
\&    http://www.perl.com/CPAN/doc/FAQs/FAQ/PerlFAQ.html
.Ve
.SH "Support and Training"
.IX Header "Support and Training"
The Perl5 Database Interface is \fI\s-1FREE\s0\fR software. \s-1IT COMES WITHOUT WARRANTY
OF ANY KIND.\s0 See the \s-1DBI README\s0 for more details.
.PP
However, some organizations are providing either technical support or
training programs on \s-1DBI.\s0 The present author has no knowledge as
to the quality of these services. The links are included for reference
purposes only and should not be regarded as recommendations in any way.
\&\fICaveat emptor\fR.
.SS "Commercial Support"
.IX Subsection "Commercial Support"
.IP "The Perl Clinic" 4
.IX Item "The Perl Clinic"
The Perl Clinic provides commercial support for \fIPerl\fR and Perl
related problems, including the \fI\s-1DBI\s0\fR and its drivers.  Support is
provided by the company with whom Tim Bunce, author of \fI\s-1DBI\s0\fR and
\&\fIDBD::Oracle\fR, works and ActiveState. For more information on their
services, please see:
.Sp
.Vb 1
\&    http://www.perlclinic.com
.Ve
.SS "Training"
.IX Subsection "Training"
.IP "Westlake Solutions" 4
.IX Item "Westlake Solutions"
A hands-on class for experienced Perl \s-1CGI\s0 developers that teaches
how to write database-connected \s-1CGI\s0 scripts using Perl and \s-1DBI\s0.pm.  This
course, along with four other courses on \s-1CGI\s0 scripting with Perl, is
taught in Washington, \s-1DC\s0; Arlington, Virginia; and on-site worldwide upon
request.
.Sp
See:
.Sp
.Vb 1
\&    http://www.westlake.com/training
.Ve
.Sp
for more details.
.SH "Other References"
.IX Header "Other References"
In this section, we present some miscellaneous \s-1WWW\s0 links that may be of
some interest to \s-1DBI\s0 users. These are not verified and may result in
unknown sites or missing documents.
.PP
.Vb 3
\&    http://www\-ccs.cs.umass.edu/db.html
\&    http://www.odmg.org/odmg93/updates_dbarry.html
\&    http://www.jcc.com/sql_stnd.html
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Alligator Descartes.
Portions are Copyright their original stated authors.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
This document is Copyright (c)1994\-2000 Alligator Descartes, with portions
Copyright (c)1994\-2000 their original authors. This module is released under
the 'Artistic' license which you can find in the perl distribution.
.PP
This document is Copyright (c)1997\-2000 Alligator Descartes. All rights reserved.
Permission to distribute this document, in full or in part, via email,
Usenet, ftp archives or http is granted providing that no charges are involved,
reasonable attempt is made to use the most current version and all credits
and copyright notices are retained ( the \fI\s-1AUTHOR\s0\fR and \fI\s-1COPYRIGHT\s0\fR sections ).
Requests for other distribution rights, including incorporation into
commercial products, such as books, magazine articles or CD-ROMs should be
made to Alligator Descartes.
                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Execute.3pm                      0100644 0001750 0001750 00000026406 12566241601 024560  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Execute 3"
.TH DBI::Gofer::Execute 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Execute \- Executes Gofer requests and returns Gofer responses
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $executor = DBI::Gofer::Execute\->new( { ...config... });
\&
\&  $response = $executor\->execute_request( $request );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Accepts a DBI::Gofer::Request object, executes the requested \s-1DBI\s0 method calls,
and returns a DBI::Gofer::Response object.
.PP
Any error, including any internal 'fatal' errors are caught and converted into
a DBI::Gofer::Response object.
.PP
This module is usually invoked by a 'server\-side' Gofer transport module.
They usually have names in the "\f(CW\*(C`DBI::Gofer::Transport::*\*(C'\fR" namespace.
Examples include: DBI::Gofer::Transport::stream and DBI::Gofer::Transport::mod_perl.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.SS "check_request_sub"
.IX Subsection "check_request_sub"
If defined, it must be a reference to a subroutine that will 'check' the request.
It is passed the request object and the executor as its only arguments.
.PP
The subroutine can either return the original request object or die with a
suitable error message (which will be turned into a Gofer response).
.PP
It can also construct and return a new request that should be executed instead
of the original request.
.SS "check_response_sub"
.IX Subsection "check_response_sub"
If defined, it must be a reference to a subroutine that will 'check' the response.
It is passed the response object, the executor, and the request object.
The sub may alter the response object and return undef, or return a new response object.
.PP
This mechanism can be used to, for example, terminate the service if specific
database errors are seen.
.SS "forced_connect_dsn"
.IX Subsection "forced_connect_dsn"
If set, this \s-1DSN\s0 is always used instead of the one in the request.
.SS "default_connect_dsn"
.IX Subsection "default_connect_dsn"
If set, this \s-1DSN\s0 is used if \f(CW\*(C`forced_connect_dsn\*(C'\fR is not set and the request does not contain a \s-1DSN\s0 itself.
.SS "forced_connect_attributes"
.IX Subsection "forced_connect_attributes"
A reference to a hash of \fIconnect()\fR attributes. Individual attributes in
\&\f(CW\*(C`forced_connect_attributes\*(C'\fR will take precedence over corresponding attributes
in the request.
.SS "default_connect_attributes"
.IX Subsection "default_connect_attributes"
A reference to a hash of \fIconnect()\fR attributes. Individual attributes in the
request take precedence over corresponding attributes in \f(CW\*(C`default_connect_attributes\*(C'\fR.
.SS "max_cached_dbh_per_drh"
.IX Subsection "max_cached_dbh_per_drh"
If set, the loaded drivers will be checked to ensure they don't have more than
this number of cached connections. There is no default value. This limit is not
enforced for every request.
.SS "max_cached_sth_per_dbh"
.IX Subsection "max_cached_sth_per_dbh"
If set, all the cached statement handles will be cleared once the number of
cached statement handles rises above this limit. The default is 1000.
.SS "forced_single_resultset"
.IX Subsection "forced_single_resultset"
If true, then only the first result set will be fetched and returned in the response.
.SS "forced_response_attributes"
.IX Subsection "forced_response_attributes"
A reference to a data structure that can specify extra attributes to be returned in responses.
.PP
.Vb 6
\&  forced_response_attributes => {
\&      DriverName => {
\&          dbh => [ qw(dbh_attrib_name) ],
\&          sth => [ qw(sth_attrib_name) ],
\&      },
\&  },
.Ve
.PP
This can be useful in cases where the driver has not implemented the
\&\fIprivate_attribute_info()\fR method and DBI::Gofer::Execute's own fallback list of
private attributes doesn't include the driver or attributes you need.
.SS "track_recent"
.IX Subsection "track_recent"
If set, specifies the number of recent requests and responses that should be
kept by the \fIupdate_stats()\fR method for diagnostics. See DBI::Gofer::Transport::mod_perl.
.PP
Note that this setting can significantly increase memory use. Use with caution.
.SS "forced_gofer_random"
.IX Subsection "forced_gofer_random"
Enable forced random failures and/or delays for testing. See \*(L"\s-1DBI_GOFER_RANDOM\*(R"\s0 below.
.SH "DRIVER-SPECIFIC ISSUES"
.IX Header "DRIVER-SPECIFIC ISSUES"
Gofer needs to know about any driver-private attributes that should have their
values sent back to the client.
.PP
If the driver doesn't support \fIprivate_attribute_info()\fR method, and very few do,
then the module fallsback to using some hard-coded details, if available, for
the driver being used. Currently hard-coded details are available for the
mysql, Pg, Sybase, and SQLite drivers.
.SH "TESTING"
.IX Header "TESTING"
DBD::Gofer, DBD::Execute and related packages are well tested by executing the
\&\s-1DBI\s0 test suite with \s-1DBI_AUTOPROXY\s0 configured to route all \s-1DBI\s0 calls via DBD::Gofer.
.PP
Because Gofer includes timeout and 'retry on error' mechanisms there is a need
for some way to trigger delays and/or errors. This can be done via the
\&\f(CW\*(C`forced_gofer_random\*(C'\fR configuration item, or else the \s-1DBI_GOFER_RANDOM\s0 environment
variable.
.SS "\s-1DBI_GOFER_RANDOM\s0"
.IX Subsection "DBI_GOFER_RANDOM"
The value of the \f(CW\*(C`forced_gofer_random\*(C'\fR configuration item (or else the
\&\s-1DBI_GOFER_RANDOM\s0 environment variable) is treated as a series of tokens
separated by commas.
.PP
The tokens can be one of three types:
.IP "fail=R%" 4
.IX Item "fail=R%"
Set the current failure rate to R where R is a percentage.
The value R can be floating point, e.g., \f(CW\*(C`fail=0.05%\*(C'\fR.
Negative values for R have special meaning, see below.
.IP "err=N" 4
.IX Item "err=N"
Sets the current failure err value to N (instead of the \s-1DBI\s0's default 'standard
err value' of 2000000000). This is useful when you want to simulate a
specific error.
.IP "delayN=R%" 4
.IX Item "delayN=R%"
Set the current random delay rate to R where R is a percentage, and set the
current delay duration to N seconds. The values of R and N can be floating point,
e.g., \f(CW\*(C`delay0.5=0.2%\*(C'\fR.  Negative values for R have special meaning, see below.
.Sp
If R is an odd number (R % 2 == 1) then a message is logged via \fIwarn()\fR which
will be returned to, and echoed at, the client.
.IP "methodname" 4
.IX Item "methodname"
Applies the current fail, err, and delay values to the named method.
If neither a fail nor delay have been set yet then a warning is generated.
.PP
For example:
.PP
.Vb 3
\&  $executor = DBI::Gofer::Execute\->new( {
\&    forced_gofer_random => "fail=0.01%,do,delay60=1%,execute",
\&  });
.Ve
.PP
will cause the \fIdo()\fR method to fail for 0.01% of calls, and the \fIexecute()\fR method to
fail 0.01% of calls and be delayed by 60 seconds on 1% of calls.
.PP
If the percentage value (\f(CW\*(C`R\*(C'\fR) is negative then instead of the failures being
triggered randomly (via the \fIrand()\fR function) they are triggered via a sequence
number. In other words "\f(CW\*(C`fail=\-20%\*(C'\fR" will mean every fifth call will fail.
Each method has a distinct sequence number.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Execute5.16.3pm                  0100644 0001750 0001750 00000026065 12566241600 025072  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Execute 3"
.TH DBI::Gofer::Execute 3 "2010-12-21" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Execute \- Executes Gofer requests and returns Gofer responses
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $executor = DBI::Gofer::Execute\->new( { ...config... });
\&
\&  $response = $executor\->execute_request( $request );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Accepts a DBI::Gofer::Request object, executes the requested \s-1DBI\s0 method calls,
and returns a DBI::Gofer::Response object.
.PP
Any error, including any internal 'fatal' errors are caught and converted into
a DBI::Gofer::Response object.
.PP
This module is usually invoked by a 'server\-side' Gofer transport module.
They usually have names in the "\f(CW\*(C`DBI::Gofer::Transport::*\*(C'\fR" namespace.
Examples include: DBI::Gofer::Transport::stream and DBI::Gofer::Transport::mod_perl.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.SS "check_request_sub"
.IX Subsection "check_request_sub"
If defined, it must be a reference to a subroutine that will 'check' the request.
It is passed the request object and the executor as its only arguments.
.PP
The subroutine can either return the original request object or die with a
suitable error message (which will be turned into a Gofer response).
.PP
It can also construct and return a new request that should be executed instead
of the original request.
.SS "check_response_sub"
.IX Subsection "check_response_sub"
If defined, it must be a reference to a subroutine that will 'check' the response.
It is passed the response object, the executor, and the request object.
The sub may alter the response object and return undef, or return a new response object.
.PP
This mechanism can be used to, for example, terminate the service if specific
database errors are seen.
.SS "forced_connect_dsn"
.IX Subsection "forced_connect_dsn"
If set, this \s-1DSN\s0 is always used instead of the one in the request.
.SS "default_connect_dsn"
.IX Subsection "default_connect_dsn"
If set, this \s-1DSN\s0 is used if \f(CW\*(C`forced_connect_dsn\*(C'\fR is not set and the request does not contain a \s-1DSN\s0 itself.
.SS "forced_connect_attributes"
.IX Subsection "forced_connect_attributes"
A reference to a hash of \fIconnect()\fR attributes. Individual attributes in
\&\f(CW\*(C`forced_connect_attributes\*(C'\fR will take precedence over corresponding attributes
in the request.
.SS "default_connect_attributes"
.IX Subsection "default_connect_attributes"
A reference to a hash of \fIconnect()\fR attributes. Individual attributes in the
request take precedence over corresponding attributes in \f(CW\*(C`default_connect_attributes\*(C'\fR.
.SS "max_cached_dbh_per_drh"
.IX Subsection "max_cached_dbh_per_drh"
If set, the loaded drivers will be checked to ensure they don't have more than
this number of cached connections. There is no default value. This limit is not
enforced for every request.
.SS "max_cached_sth_per_dbh"
.IX Subsection "max_cached_sth_per_dbh"
If set, all the cached statement handles will be cleared once the number of
cached statement handles rises above this limit. The default is 1000.
.SS "forced_single_resultset"
.IX Subsection "forced_single_resultset"
If true, then only the first result set will be fetched and returned in the response.
.SS "forced_response_attributes"
.IX Subsection "forced_response_attributes"
A reference to a data structure that can specify extra attributes to be returned in responses.
.PP
.Vb 6
\&  forced_response_attributes => {
\&      DriverName => {
\&          dbh => [ qw(dbh_attrib_name) ],
\&          sth => [ qw(sth_attrib_name) ],
\&      },
\&  },
.Ve
.PP
This can be useful in cases where the driver has not implemented the
\&\fIprivate_attribute_info()\fR method and DBI::Gofer::Execute's own fallback list of
private attributes doesn't include the driver or attributes you need.
.SS "track_recent"
.IX Subsection "track_recent"
If set, specifies the number of recent requests and responses that should be
kept by the \fIupdate_stats()\fR method for diagnostics. See DBI::Gofer::Transport::mod_perl.
.PP
Note that this setting can significantly increase memory use. Use with caution.
.SS "forced_gofer_random"
.IX Subsection "forced_gofer_random"
Enable forced random failures and/or delays for testing. See \*(L"\s-1DBI_GOFER_RANDOM\s0\*(R" below.
.SH "DRIVER-SPECIFIC ISSUES"
.IX Header "DRIVER-SPECIFIC ISSUES"
Gofer needs to know about any driver-private attributes that should have their
values sent back to the client.
.PP
If the driver doesn't support \fIprivate_attribute_info()\fR method, and very few do,
then the module fallsback to using some hard-coded details, if available, for
the driver being used. Currently hard-coded details are available for the
mysql, Pg, Sybase, and SQLite drivers.
.SH "TESTING"
.IX Header "TESTING"
DBD::Gofer, DBD::Execute and related packages are well tested by executing the
\&\s-1DBI\s0 test suite with \s-1DBI_AUTOPROXY\s0 configured to route all \s-1DBI\s0 calls via DBD::Gofer.
.PP
Because Gofer includes timeout and 'retry on error' mechanisms there is a need
for some way to trigger delays and/or errors. This can be done via the
\&\f(CW\*(C`forced_gofer_random\*(C'\fR configuration item, or else the \s-1DBI_GOFER_RANDOM\s0 environment
variable.
.SS "\s-1DBI_GOFER_RANDOM\s0"
.IX Subsection "DBI_GOFER_RANDOM"
The value of the \f(CW\*(C`forced_gofer_random\*(C'\fR configuration item (or else the
\&\s-1DBI_GOFER_RANDOM\s0 environment variable) is treated as a series of tokens
separated by commas.
.PP
The tokens can be one of three types:
.IP "fail=R%" 4
.IX Item "fail=R%"
Set the current failure rate to R where R is a percentage.
The value R can be floating point, e.g., \f(CW\*(C`fail=0.05%\*(C'\fR.
Negative values for R have special meaning, see below.
.IP "err=N" 4
.IX Item "err=N"
Sets the current failure err value to N (instead of the \s-1DBI\s0's default 'standard
err value' of 2000000000). This is useful when you want to simulate a
specific error.
.IP "delayN=R%" 4
.IX Item "delayN=R%"
Set the current random delay rate to R where R is a percentage, and set the
current delay duration to N seconds. The values of R and N can be floating point,
e.g., \f(CW\*(C`delay0.5=0.2%\*(C'\fR.  Negative values for R have special meaning, see below.
.Sp
If R is an odd number (R % 2 == 1) then a message is logged via \fIwarn()\fR which
will be returned to, and echoed at, the client.
.IP "methodname" 4
.IX Item "methodname"
Applies the current fail, err, and delay values to the named method.
If neither a fail nor delay have been set yet then a warning is generated.
.PP
For example:
.PP
.Vb 3
\&  $executor = DBI::Gofer::Execute\->new( {
\&    forced_gofer_random => "fail=0.01%,do,delay60=1%,execute",
\&  });
.Ve
.PP
will cause the \fIdo()\fR method to fail for 0.01% of calls, and the \fIexecute()\fR method to
fail 0.01% of calls and be delayed by 60 seconds on 1% of calls.
.PP
If the percentage value (\f(CW\*(C`R\*(C'\fR) is negative then instead of the failures being
triggered randomly (via the \fIrand()\fR function) they are triggered via a sequence
number. In other words "\f(CW\*(C`fail=\-20%\*(C'\fR" will mean every fifth call will fail.
Each method has a distinct sequence number.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Execute5.18.3pm                  0100644 0001750 0001750 00000026406 12566241601 025074  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Execute 3"
.TH DBI::Gofer::Execute 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Execute \- Executes Gofer requests and returns Gofer responses
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $executor = DBI::Gofer::Execute\->new( { ...config... });
\&
\&  $response = $executor\->execute_request( $request );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Accepts a DBI::Gofer::Request object, executes the requested \s-1DBI\s0 method calls,
and returns a DBI::Gofer::Response object.
.PP
Any error, including any internal 'fatal' errors are caught and converted into
a DBI::Gofer::Response object.
.PP
This module is usually invoked by a 'server\-side' Gofer transport module.
They usually have names in the "\f(CW\*(C`DBI::Gofer::Transport::*\*(C'\fR" namespace.
Examples include: DBI::Gofer::Transport::stream and DBI::Gofer::Transport::mod_perl.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
.SS "check_request_sub"
.IX Subsection "check_request_sub"
If defined, it must be a reference to a subroutine that will 'check' the request.
It is passed the request object and the executor as its only arguments.
.PP
The subroutine can either return the original request object or die with a
suitable error message (which will be turned into a Gofer response).
.PP
It can also construct and return a new request that should be executed instead
of the original request.
.SS "check_response_sub"
.IX Subsection "check_response_sub"
If defined, it must be a reference to a subroutine that will 'check' the response.
It is passed the response object, the executor, and the request object.
The sub may alter the response object and return undef, or return a new response object.
.PP
This mechanism can be used to, for example, terminate the service if specific
database errors are seen.
.SS "forced_connect_dsn"
.IX Subsection "forced_connect_dsn"
If set, this \s-1DSN\s0 is always used instead of the one in the request.
.SS "default_connect_dsn"
.IX Subsection "default_connect_dsn"
If set, this \s-1DSN\s0 is used if \f(CW\*(C`forced_connect_dsn\*(C'\fR is not set and the request does not contain a \s-1DSN\s0 itself.
.SS "forced_connect_attributes"
.IX Subsection "forced_connect_attributes"
A reference to a hash of \fIconnect()\fR attributes. Individual attributes in
\&\f(CW\*(C`forced_connect_attributes\*(C'\fR will take precedence over corresponding attributes
in the request.
.SS "default_connect_attributes"
.IX Subsection "default_connect_attributes"
A reference to a hash of \fIconnect()\fR attributes. Individual attributes in the
request take precedence over corresponding attributes in \f(CW\*(C`default_connect_attributes\*(C'\fR.
.SS "max_cached_dbh_per_drh"
.IX Subsection "max_cached_dbh_per_drh"
If set, the loaded drivers will be checked to ensure they don't have more than
this number of cached connections. There is no default value. This limit is not
enforced for every request.
.SS "max_cached_sth_per_dbh"
.IX Subsection "max_cached_sth_per_dbh"
If set, all the cached statement handles will be cleared once the number of
cached statement handles rises above this limit. The default is 1000.
.SS "forced_single_resultset"
.IX Subsection "forced_single_resultset"
If true, then only the first result set will be fetched and returned in the response.
.SS "forced_response_attributes"
.IX Subsection "forced_response_attributes"
A reference to a data structure that can specify extra attributes to be returned in responses.
.PP
.Vb 6
\&  forced_response_attributes => {
\&      DriverName => {
\&          dbh => [ qw(dbh_attrib_name) ],
\&          sth => [ qw(sth_attrib_name) ],
\&      },
\&  },
.Ve
.PP
This can be useful in cases where the driver has not implemented the
\&\fIprivate_attribute_info()\fR method and DBI::Gofer::Execute's own fallback list of
private attributes doesn't include the driver or attributes you need.
.SS "track_recent"
.IX Subsection "track_recent"
If set, specifies the number of recent requests and responses that should be
kept by the \fIupdate_stats()\fR method for diagnostics. See DBI::Gofer::Transport::mod_perl.
.PP
Note that this setting can significantly increase memory use. Use with caution.
.SS "forced_gofer_random"
.IX Subsection "forced_gofer_random"
Enable forced random failures and/or delays for testing. See \*(L"\s-1DBI_GOFER_RANDOM\*(R"\s0 below.
.SH "DRIVER-SPECIFIC ISSUES"
.IX Header "DRIVER-SPECIFIC ISSUES"
Gofer needs to know about any driver-private attributes that should have their
values sent back to the client.
.PP
If the driver doesn't support \fIprivate_attribute_info()\fR method, and very few do,
then the module fallsback to using some hard-coded details, if available, for
the driver being used. Currently hard-coded details are available for the
mysql, Pg, Sybase, and SQLite drivers.
.SH "TESTING"
.IX Header "TESTING"
DBD::Gofer, DBD::Execute and related packages are well tested by executing the
\&\s-1DBI\s0 test suite with \s-1DBI_AUTOPROXY\s0 configured to route all \s-1DBI\s0 calls via DBD::Gofer.
.PP
Because Gofer includes timeout and 'retry on error' mechanisms there is a need
for some way to trigger delays and/or errors. This can be done via the
\&\f(CW\*(C`forced_gofer_random\*(C'\fR configuration item, or else the \s-1DBI_GOFER_RANDOM\s0 environment
variable.
.SS "\s-1DBI_GOFER_RANDOM\s0"
.IX Subsection "DBI_GOFER_RANDOM"
The value of the \f(CW\*(C`forced_gofer_random\*(C'\fR configuration item (or else the
\&\s-1DBI_GOFER_RANDOM\s0 environment variable) is treated as a series of tokens
separated by commas.
.PP
The tokens can be one of three types:
.IP "fail=R%" 4
.IX Item "fail=R%"
Set the current failure rate to R where R is a percentage.
The value R can be floating point, e.g., \f(CW\*(C`fail=0.05%\*(C'\fR.
Negative values for R have special meaning, see below.
.IP "err=N" 4
.IX Item "err=N"
Sets the current failure err value to N (instead of the \s-1DBI\s0's default 'standard
err value' of 2000000000). This is useful when you want to simulate a
specific error.
.IP "delayN=R%" 4
.IX Item "delayN=R%"
Set the current random delay rate to R where R is a percentage, and set the
current delay duration to N seconds. The values of R and N can be floating point,
e.g., \f(CW\*(C`delay0.5=0.2%\*(C'\fR.  Negative values for R have special meaning, see below.
.Sp
If R is an odd number (R % 2 == 1) then a message is logged via \fIwarn()\fR which
will be returned to, and echoed at, the client.
.IP "methodname" 4
.IX Item "methodname"
Applies the current fail, err, and delay values to the named method.
If neither a fail nor delay have been set yet then a warning is generated.
.PP
For example:
.PP
.Vb 3
\&  $executor = DBI::Gofer::Execute\->new( {
\&    forced_gofer_random => "fail=0.01%,do,delay60=1%,execute",
\&  });
.Ve
.PP
will cause the \fIdo()\fR method to fail for 0.01% of calls, and the \fIexecute()\fR method to
fail 0.01% of calls and be delayed by 60 seconds on 1% of calls.
.PP
If the percentage value (\f(CW\*(C`R\*(C'\fR) is negative then instead of the failures being
triggered randomly (via the \fIrand()\fR function) they are triggered via a sequence
number. In other words "\f(CW\*(C`fail=\-20%\*(C'\fR" will mean every fifth call will fail.
Each method has a distinct sequence number.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Request.3pm                      0100644 0001750 0001750 00000010644 12566241601 024603  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Request 3"
.TH DBI::Gofer::Request 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Request \- Encapsulate a request from DBD::Gofer to DBI::Gofer::Execute
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an internal class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Request5.16.3pm                  0100644 0001750 0001750 00000010323 12566241577 025123  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Request 3"
.TH DBI::Gofer::Request 3 "2009-02-24" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Request \- Encapsulate a request from DBD::Gofer to DBI::Gofer::Execute
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an internal class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Request5.18.3pm                  0100644 0001750 0001750 00000010644 12566241601 025117  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Request 3"
.TH DBI::Gofer::Request 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Request \- Encapsulate a request from DBD::Gofer to DBI::Gofer::Execute
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an internal class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Response.3pm                     0100644 0001750 0001750 00000010650 12566241601 024746  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Response 3"
.TH DBI::Gofer::Response 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Response \- Encapsulate a response from DBI::Gofer::Execute to DBD::Gofer
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an internal class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Response5.16.3pm                 0100644 0001750 0001750 00000010327 12566241577 025275  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Response 3"
.TH DBI::Gofer::Response 3 "2008-07-22" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Response \- Encapsulate a response from DBI::Gofer::Execute to DBD::Gofer
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an internal class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Response5.18.3pm                 0100644 0001750 0001750 00000010650 12566241601 025262  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Response 3"
.TH DBI::Gofer::Response 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Response \- Encapsulate a response from DBI::Gofer::Execute to DBD::Gofer
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an internal class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Serializer::Base.3pm             0100644 0001750 0001750 00000011146 12566241600 026240  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Serializer::Base 3"
.TH DBI::Gofer::Serializer::Base 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Serializer::Base \- base class for Gofer serialization
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $serializer = $serializer_class\->new();
\&
\&    $string = $serializer\->serialize( $data );
\&    ($string, $deserializer_class) = $serializer\->serialize( $data );
\&
\&    $data = $serializer\->deserialize( $string );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBI::Gofer::Serializer::* classes implement a very minimal subset of the Data::Serializer \s-1API.\s0
.PP
Gofer serializers are expected to be very fast and are not required to deal
with anything other than non-blessed references to arrays and hashes, and plain scalars.
                                                                                                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Serializer::Base5.16.3pm         0100644 0001750 0001750 00000010625 12566241600 026553  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Serializer::Base 3"
.TH DBI::Gofer::Serializer::Base 3 "2007-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Serializer::Base \- base class for Gofer serialization
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $serializer = $serializer_class\->new();
\&
\&    $string = $serializer\->serialize( $data );
\&    ($string, $deserializer_class) = $serializer\->serialize( $data );
\&
\&    $data = $serializer\->deserialize( $string );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBI::Gofer::Serializer::* classes implement a very minimal subset of the Data::Serializer \s-1API\s0.
.PP
Gofer serializers are expected to be very fast and are not required to deal
with anything other than non-blessed references to arrays and hashes, and plain scalars.
                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Serializer::Base5.18.3pm         0100644 0001750 0001750 00000011146 12566241600 026554  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Serializer::Base 3"
.TH DBI::Gofer::Serializer::Base 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Serializer::Base \- base class for Gofer serialization
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $serializer = $serializer_class\->new();
\&
\&    $string = $serializer\->serialize( $data );
\&    ($string, $deserializer_class) = $serializer\->serialize( $data );
\&
\&    $data = $serializer\->deserialize( $string );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBI::Gofer::Serializer::* classes implement a very minimal subset of the Data::Serializer \s-1API.\s0
.PP
Gofer serializers are expected to be very fast and are not required to deal
with anything other than non-blessed references to arrays and hashes, and plain scalars.
                                                                                                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Serializer::DataDumper.3pm       0100644 0001750 0001750 00000010645 12566241601 027420  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Serializer::DataDumper 3"
.TH DBI::Gofer::Serializer::DataDumper 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Serializer::DataDumper \- Gofer serialization using DataDumper
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $serializer = DBI::Gofer::Serializer::DataDumper\->new();
\&
\&    $string = $serializer\->serialize( $data );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Uses DataDumper to serialize. Deserialization is not supported.
The output of this class is only meant for human consumption.
.PP
See also DBI::Gofer::Serializer::Base.
                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Serializer::DataDumper5.16.3pm   0100644 0001750 0001750 00000010324 12566241577 027740  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Serializer::DataDumper 3"
.TH DBI::Gofer::Serializer::DataDumper 3 "2007-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Serializer::DataDumper \- Gofer serialization using DataDumper
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $serializer = DBI::Gofer::Serializer::DataDumper\->new();
\&
\&    $string = $serializer\->serialize( $data );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Uses DataDumper to serialize. Deserialization is not supported.
The output of this class is only meant for human consumption.
.PP
See also DBI::Gofer::Serializer::Base.
                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Serializer::DataDumper5.18.3pm   0100644 0001750 0001750 00000010645 12566241601 027734  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Serializer::DataDumper 3"
.TH DBI::Gofer::Serializer::DataDumper 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Serializer::DataDumper \- Gofer serialization using DataDumper
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $serializer = DBI::Gofer::Serializer::DataDumper\->new();
\&
\&    $string = $serializer\->serialize( $data );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Uses DataDumper to serialize. Deserialization is not supported.
The output of this class is only meant for human consumption.
.PP
See also DBI::Gofer::Serializer::Base.
                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Serializer::Storable.3pm         0100644 0001750 0001750 00000011244 12566241601 027141  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Serializer::Storable 3"
.TH DBI::Gofer::Serializer::Storable 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Serializer::Storable \- Gofer serialization using Storable
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $serializer = DBI::Gofer::Serializer::Storable\->new();
\&
\&    $string = $serializer\->serialize( $data );
\&    ($string, $deserializer_class) = $serializer\->serialize( $data );
\&
\&    $data = $serializer\->deserialize( $string );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Uses \fIStorable::nfreeze()\fR to serialize and \fIStorable::thaw()\fR to deserialize.
.PP
The \fIserialize()\fR method sets local \f(CW$Storable::forgive_me\fR = 1; so it doesn't
croak if it encounters any data types that can't be serialized, such as code refs.
.PP
See also DBI::Gofer::Serializer::Base.
                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Serializer::Storable5.16.3pm     0100644 0001750 0001750 00000010723 12566241577 027470  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Serializer::Storable 3"
.TH DBI::Gofer::Serializer::Storable 3 "2007-09-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Serializer::Storable \- Gofer serialization using Storable
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $serializer = DBI::Gofer::Serializer::Storable\->new();
\&
\&    $string = $serializer\->serialize( $data );
\&    ($string, $deserializer_class) = $serializer\->serialize( $data );
\&
\&    $data = $serializer\->deserialize( $string );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Uses \fIStorable::nfreeze()\fR to serialize and \fIStorable::thaw()\fR to deserialize.
.PP
The \fIserialize()\fR method sets local \f(CW$Storable::forgive_me\fR = 1; so it doesn't
croak if it encounters any data types that can't be serialized, such as code refs.
.PP
See also DBI::Gofer::Serializer::Base.
                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Serializer::Storable5.18.3pm     0100644 0001750 0001750 00000011244 12566241601 027455  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Serializer::Storable 3"
.TH DBI::Gofer::Serializer::Storable 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Serializer::Storable \- Gofer serialization using Storable
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $serializer = DBI::Gofer::Serializer::Storable\->new();
\&
\&    $string = $serializer\->serialize( $data );
\&    ($string, $deserializer_class) = $serializer\->serialize( $data );
\&
\&    $data = $serializer\->deserialize( $string );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Uses \fIStorable::nfreeze()\fR to serialize and \fIStorable::thaw()\fR to deserialize.
.PP
The \fIserialize()\fR method sets local \f(CW$Storable::forgive_me\fR = 1; so it doesn't
croak if it encounters any data types that can't be serialized, such as code refs.
.PP
See also DBI::Gofer::Serializer::Base.
                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Transport::Base.3pm              0100644 0001750 0001750 00000011065 12566241602 026125  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Transport::Base 3"
.TH DBI::Gofer::Transport::Base 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Transport::Base \- Base class for Gofer transports
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for server-side Gofer transports.
.PP
It's also the base class for the client-side base class DBD::Gofer::Transport::Base.
.PP
This is an internal class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Transport::Base5.16.3pm          0100644 0001750 0001750 00000010544 12566241577 026453  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Transport::Base 3"
.TH DBI::Gofer::Transport::Base 3 "2009-02-24" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Transport::Base \- Base class for Gofer transports
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for server-side Gofer transports.
.PP
It's also the base class for the client-side base class DBD::Gofer::Transport::Base.
.PP
This is an internal class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Transport::Base5.18.3pm          0100644 0001750 0001750 00000011065 12566241602 026441  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Transport::Base 3"
.TH DBI::Gofer::Transport::Base 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Transport::Base \- Base class for Gofer transports
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for server-side Gofer transports.
.PP
It's also the base class for the client-side base class DBD::Gofer::Transport::Base.
.PP
This is an internal class.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Transport::pipeone.3pm           0100644 0001750 0001750 00000010671 12566241601 026713  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Transport::pipeone 3"
.TH DBI::Gofer::Transport::pipeone 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Transport::pipeone \- DBD::Gofer server\-side transport for pipeone
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBD::Gofer::Transport::pipeone.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Transport::pipeone5.16.3pm       0100644 0001750 0001750 00000010350 12566241600 027216  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Transport::pipeone 3"
.TH DBI::Gofer::Transport::pipeone 3 "2009-02-24" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Transport::pipeone \- DBD::Gofer server\-side transport for pipeone
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBD::Gofer::Transport::pipeone.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Transport::pipeone5.18.3pm       0100644 0001750 0001750 00000010671 12566241601 027227  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Transport::pipeone 3"
.TH DBI::Gofer::Transport::pipeone 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Transport::pipeone \- DBD::Gofer server\-side transport for pipeone
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBD::Gofer::Transport::pipeone.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Transport::stream.3pm            0100644 0001750 0001750 00000010664 12566241601 026551  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Transport::stream 3"
.TH DBI::Gofer::Transport::stream 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Transport::stream \- DBD::Gofer server\-side transport for stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBD::Gofer::Transport::stream.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Transport::stream5.16.3pm        0100644 0001750 0001750 00000010343 12566241577 027071  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Transport::stream 3"
.TH DBI::Gofer::Transport::stream 3 "2009-02-24" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Transport::stream \- DBD::Gofer server\-side transport for stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBD::Gofer::Transport::stream.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Gofer::Transport::stream5.18.3pm        0100644 0001750 0001750 00000010664 12566241601 027065  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Gofer::Transport::stream 3"
.TH DBI::Gofer::Transport::stream 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Gofer::Transport::stream \- DBD::Gofer server\-side transport for stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBD::Gofer::Transport::stream.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tim Bunce, <http://www.tim.bunce.name>
.SH "LICENCE AND COPYRIGHT"
.IX Header "LICENCE AND COPYRIGHT"
Copyright (c) 2007, Tim Bunce, Ireland. All rights reserved.
.PP
This module is free software; you can redistribute it and/or
modify it under the same terms as Perl itself. See perlartistic.
                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Profile.3pm                             0100644 0001750 0001750 00000075313 12566241600 023407  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Profile 3"
.TH DBI::Profile 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Profile \- Performance profiling and benchmarking for the DBI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The easiest way to enable \s-1DBI\s0 profiling is to set the \s-1DBI_PROFILE\s0
environment variable to 2 and then run your code as usual:
.PP
.Vb 1
\&  DBI_PROFILE=2 prog.pl
.Ve
.PP
This will profile your program and then output a textual summary
grouped by query when the program exits.  You can also enable profiling by
setting the Profile attribute of any \s-1DBI\s0 handle:
.PP
.Vb 1
\&  $dbh\->{Profile} = 2;
.Ve
.PP
Then the summary will be printed when the handle is destroyed.
.PP
Many other values apart from are possible \- see \*(L"\s-1ENABLING A PROFILE\*(R"\s0 below.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The DBI::Profile module provides a simple interface to collect and
report performance and benchmarking data from the \s-1DBI.\s0
.PP
For a more elaborate interface, suitable for larger programs, see
DBI::ProfileDumper and dbiprof.
For Apache/mod_perl applications see
DBI::ProfileDumper::Apache.
.SH "OVERVIEW"
.IX Header "OVERVIEW"
Performance data collection for the \s-1DBI\s0 is built around several
concepts which are important to understand clearly.
.IP "Method Dispatch" 4
.IX Item "Method Dispatch"
Every method call on a \s-1DBI\s0 handle passes through a single 'dispatch'
function which manages all the common aspects of \s-1DBI\s0 method calls,
such as handling the RaiseError attribute.
.IP "Data Collection" 4
.IX Item "Data Collection"
If profiling is enabled for a handle then the dispatch code takes
a high-resolution timestamp soon after it is entered. Then, after
calling the appropriate method and just before returning, it takes
another high-resolution timestamp and calls a function to record
the information.  That function is passed the two timestamps
plus the \s-1DBI\s0 handle and the name of the method that was called.
That data about a single \s-1DBI\s0 method call is called a \fIprofile sample\fR.
.IP "Data Filtering" 4
.IX Item "Data Filtering"
If the method call was invoked by the \s-1DBI\s0 or by a driver then the call is
ignored for profiling because the time spent will be accounted for by the
original 'outermost' call for your code.
.Sp
For example, the calls that the \fIselectrow_arrayref()\fR method makes
to \fIprepare()\fR and \fIexecute()\fR etc. are not counted individually
because the time spent in those methods is going to be allocated
to the \fIselectrow_arrayref()\fR method when it returns. If this was not
done then it would be very easy to double count time spent inside
the \s-1DBI.\s0
.IP "Data Storage Tree" 4
.IX Item "Data Storage Tree"
The profile data is accumulated as 'leaves on a tree'. The 'path' through the
branches of the tree to a particular leaf is determined dynamically for each sample.
This is a key feature of \s-1DBI\s0 profiling.
.Sp
For each profiled method call the \s-1DBI\s0 walks along the Path and uses each value
in the Path to step into and grow the Data tree.
.Sp
For example, if the Path is
.Sp
.Vb 1
\&  [ \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq, \*(Aqbaz\*(Aq ]
.Ve
.Sp
then the new profile sample data will be \fImerged\fR into the tree at
.Sp
.Vb 1
\&  $h\->{Profile}\->{Data}\->{foo}\->{bar}\->{baz}
.Ve
.Sp
But it's not very useful to merge all the call data into one leaf node (except
to get an overall 'time spent inside the \s-1DBI\s0' total).  It's more common to want
the Path to include dynamic values such as the current statement text and/or
the name of the method called to show what the time spent inside the \s-1DBI\s0 was for.
.Sp
The Path can contain some 'magic cookie' values that are automatically replaced
by corresponding dynamic values when they're used. These magic cookies always
start with a punctuation character.
.Sp
For example a value of '\f(CW\*(C`!MethodName\*(C'\fR' in the Path causes the corresponding
entry in the Data to be the name of the method that was called.
For example, if the Path was:
.Sp
.Vb 1
\&  [ \*(Aqfoo\*(Aq, \*(Aq!MethodName\*(Aq, \*(Aqbar\*(Aq ]
.Ve
.Sp
and the \fIselectall_arrayref()\fR method was called, then the profile sample data
for that call will be merged into the tree at:
.Sp
.Vb 1
\&  $h\->{Profile}\->{Data}\->{foo}\->{selectall_arrayref}\->{bar}
.Ve
.IP "Profile Data" 4
.IX Item "Profile Data"
Profile data is stored at the 'leaves' of the tree as references
to an array of numeric values. For example:
.Sp
.Vb 9
\&  [
\&    106,                  # 0: count of samples at this node
\&    0.0312958955764771,   # 1: total duration
\&    0.000490069389343262, # 2: first duration
\&    0.000176072120666504, # 3: shortest duration
\&    0.00140702724456787,  # 4: longest duration
\&    1023115819.83019,     # 5: time of first sample
\&    1023115819.86576,     # 6: time of last sample
\&  ]
.Ve
.Sp
After the first sample, later samples always update elements 0, 1, and 6, and
may update 3 or 4 depending on the duration of the sampled call.
.SH "ENABLING A PROFILE"
.IX Header "ENABLING A PROFILE"
Profiling is enabled for a handle by assigning to the Profile
attribute. For example:
.PP
.Vb 1
\&  $h\->{Profile} = DBI::Profile\->new();
.Ve
.PP
The Profile attribute holds a blessed reference to a hash object
that contains the profile data and attributes relating to it.
.PP
The class the Profile object is blessed into is expected to
provide at least a \s-1DESTROY\s0 method which will dump the profile data
to the \s-1DBI\s0 trace file handle (\s-1STDERR\s0 by default).
.PP
All these examples have the same effect as each other:
.PP
.Vb 5
\&  $h\->{Profile} = 0;
\&  $h\->{Profile} = "/DBI::Profile";
\&  $h\->{Profile} = DBI::Profile\->new();
\&  $h\->{Profile} = {};
\&  $h\->{Profile} = { Path => [] };
.Ve
.PP
Similarly, these examples have the same effect as each other:
.PP
.Vb 4
\&  $h\->{Profile} = 6;
\&  $h\->{Profile} = "6/DBI::Profile";
\&  $h\->{Profile} = "!Statement:!MethodName/DBI::Profile";
\&  $h\->{Profile} = { Path => [ \*(Aq!Statement\*(Aq, \*(Aq!MethodName\*(Aq ] };
.Ve
.PP
If a non-blessed hash reference is given then the DBI::Profile
module is automatically \f(CW\*(C`require\*(C'\fR'd and the reference is blessed
into that class.
.PP
If a string is given then it is processed like this:
.PP
.Vb 1
\&    ($path, $module, $args) = split /\e//, $string, 3
\&
\&    @path = split /:/, $path
\&    @args = split /:/, $args
\&
\&    eval "require $module" if $module
\&    $module ||= "DBI::Profile"
\&
\&    $module\->new( Path => \e@Path, @args )
.Ve
.PP
So the first value is used to select the Path to be used (see below).
The second value, if present, is used as the name of a module which
will be loaded and it's \f(CW\*(C`new\*(C'\fR method called. If not present it
defaults to DBI::Profile. Any other values are passed as arguments
to the \f(CW\*(C`new\*(C'\fR method. For example: "\f(CW\*(C`2/DBIx::OtherProfile/Foo:42\*(C'\fR".
.PP
Numbers can be used as a shorthand way to enable common Path values.
The simplest way to explain how the values are interpreted is to show the code:
.PP
.Vb 5
\&    push @Path, "DBI"           if $path_elem & 0x01;
\&    push @Path, "!Statement"    if $path_elem & 0x02;
\&    push @Path, "!MethodName"   if $path_elem & 0x04;
\&    push @Path, "!MethodClass"  if $path_elem & 0x08;
\&    push @Path, "!Caller2"      if $path_elem & 0x10;
.Ve
.PP
So \*(L"2\*(R" is the same as \*(L"!Statement\*(R" and \*(L"6\*(R" (2+4) is the same as
\&\*(L"!Statement:!Method\*(R".  Those are the two most commonly used values.  Using a
negative number will reverse the path. Thus \*(L"\-6\*(R" will group by method name then
statement.
.PP
The splitting and parsing of string values assigned to the Profile
attribute may seem a little odd, but there's a good reason for it.
Remember that attributes can be embedded in the Data Source Name
string which can be passed in to a script as a parameter. For
example:
.PP
.Vb 2
\&    dbi:DriverName(Profile=>2):dbname
\&    dbi:DriverName(Profile=>{Username}:!Statement/MyProfiler/Foo:42):dbname
.Ve
.PP
And also, if the \f(CW\*(C`DBI_PROFILE\*(C'\fR environment variable is set then
The \s-1DBI\s0 arranges for every driver handle to share the same profile
object. When perl exits a single profile summary will be generated
that reflects (as nearly as practical) the total use of the \s-1DBI\s0 by
the application.
.SH "THE PROFILE OBJECT"
.IX Header "THE PROFILE OBJECT"
The \s-1DBI\s0 core expects the Profile attribute value to be a hash
reference and if the following values don't exist it will create
them as needed:
.SS "Data"
.IX Subsection "Data"
A reference to a hash containing the collected profile data.
.SS "Path"
.IX Subsection "Path"
The Path value is a reference to an array. Each element controls the
value to use at the corresponding level of the profile Data tree.
.PP
If the value of Path is anything other than an array reference,
it is treated as if it was:
.PP
.Vb 1
\&        [ \*(Aq!Statement\*(Aq ]
.Ve
.PP
The elements of Path array can be one of the following types:
.PP
\fISpecial Constant\fR
.IX Subsection "Special Constant"
.PP
\&\fB!Statement\fR
.PP
Use the current Statement text. Typically that's the value of the Statement
attribute for the handle the method was called with. Some methods, like
\&\fIcommit()\fR and \fIrollback()\fR, are unrelated to a particular statement. For those
methods !Statement records an empty string.
.PP
For statement handles this is always simply the string that was
given to \fIprepare()\fR when the handle was created.  For database handles
this is the statement that was last prepared or executed on that
database handle. That can lead to a little 'fuzzyness' because, for
example, calls to the \fIquote()\fR method to build a new statement will
typically be associated with the previous statement. In practice
this isn't a significant issue and the dynamic Path mechanism can
be used to setup your own rules.
.PP
\&\fB!MethodName\fR
.PP
Use the name of the \s-1DBI\s0 method that the profile sample relates to.
.PP
\&\fB!MethodClass\fR
.PP
Use the fully qualified name of the \s-1DBI\s0 method, including
the package, that the profile sample relates to. This shows you
where the method was implemented. For example:
.PP
.Vb 4
\&  \*(AqDBD::_::db::selectrow_arrayref\*(Aq =>
\&      0.022902s
\&  \*(AqDBD::mysql::db::selectrow_arrayref\*(Aq =>
\&      2.244521s / 99 = 0.022445s avg (first 0.022813s, min 0.022051s, max 0.028932s)
.Ve
.PP
The \*(L"DBD::_::db::selectrow_arrayref\*(R" shows that the driver has
inherited the selectrow_arrayref method provided by the \s-1DBI.\s0
.PP
But you'll note that there is only one call to
DBD::_::db::selectrow_arrayref but another 99 to
DBD::mysql::db::selectrow_arrayref. Currently the first
call doesn't record the true location. That may change.
.PP
\&\fB!Caller\fR
.PP
Use a string showing the filename and line number of the code calling the method.
.PP
\&\fB!Caller2\fR
.PP
Use a string showing the filename and line number of the code calling the
method, as for !Caller, but also include filename and line number of the code
that called that. Calls from \s-1DBI::\s0 and \s-1DBD::\s0 packages are skipped.
.PP
\&\fB!File\fR
.PP
Same as !Caller above except that only the filename is included, not the line number.
.PP
\&\fB!File2\fR
.PP
Same as !Caller2 above except that only the filenames are included, not the line number.
.PP
\&\fB!Time\fR
.PP
Use the current value of \fItime()\fR. Rarely used. See the more useful \f(CW\*(C`!Time~N\*(C'\fR below.
.PP
\&\fB!Time~N\fR
.PP
Where \f(CW\*(C`N\*(C'\fR is an integer. Use the current value of \fItime()\fR but with reduced precision.
The value used is determined in this way:
.PP
.Vb 1
\&    int( time() / N ) * N
.Ve
.PP
This is a useful way to segregate a profile into time slots. For example:
.PP
.Vb 1
\&    [ \*(Aq!Time~60\*(Aq, \*(Aq!Statement\*(Aq ]
.Ve
.PP
\fICode Reference\fR
.IX Subsection "Code Reference"
.PP
The subroutine is passed the handle it was called on and the \s-1DBI\s0 method name.
The current Statement is in \f(CW$_\fR. The statement string should not be modified,
so most subs start with \f(CW\*(C`local $_ = $_;\*(C'\fR.
.PP
The list of values it returns is used at that point in the Profile Path.
.PP
The sub can 'veto' (reject) a profile sample by including a reference to undef
in the returned list. That can be useful when you want to only profile
statements that match a certain pattern, or only profile certain methods.
.PP
\fISubroutine Specifier\fR
.IX Subsection "Subroutine Specifier"
.PP
A Path element that begins with '\f(CW\*(C`&\*(C'\fR' is treated as the name of a subroutine
in the DBI::ProfileSubs namespace and replaced with the corresponding code reference.
.PP
Currently this only works when the Path is specified by the \f(CW\*(C`DBI_PROFILE\*(C'\fR
environment variable.
.PP
Also, currently, the only subroutine in the DBI::ProfileSubs namespace is
\&\f(CW\*(Aq&norm_std_n3\*(Aq\fR. That's a very handy subroutine when profiling code that
doesn't use placeholders. See DBI::ProfileSubs for more information.
.PP
\fIAttribute Specifier\fR
.IX Subsection "Attribute Specifier"
.PP
A string enclosed in braces, such as '\f(CW\*(C`{Username}\*(C'\fR', specifies that the current
value of the corresponding database handle attribute should be used at that
point in the Path.
.PP
\fIReference to a Scalar\fR
.IX Subsection "Reference to a Scalar"
.PP
Specifies that the current value of the referenced scalar be used at that point
in the Path.  This provides an efficient way to get 'contextual' values into
your profile.
.PP
\fIOther Values\fR
.IX Subsection "Other Values"
.PP
Any other values are stringified and used literally.
.PP
(References, and values that begin with punctuation characters are reserved.)
.SH "REPORTING"
.IX Header "REPORTING"
.SS "Report Format"
.IX Subsection "Report Format"
The current accumulated profile data can be formatted and output using
.PP
.Vb 1
\&    print $h\->{Profile}\->format;
.Ve
.PP
To discard the profile data and start collecting fresh data
you can do:
.PP
.Vb 1
\&    $h\->{Profile}\->{Data} = undef;
.Ve
.PP
The default results format looks like this:
.PP
.Vb 5
\&  DBI::Profile: 0.001015s 42.7% (5 calls) programname @ YYYY\-MM\-DD HH:MM:SS
\&  \*(Aq\*(Aq =>
\&      0.000024s / 2 = 0.000012s avg (first 0.000015s, min 0.000009s, max 0.000015s)
\&  \*(AqSELECT mode,size,name FROM table\*(Aq =>
\&      0.000991s / 3 = 0.000330s avg (first 0.000678s, min 0.000009s, max 0.000678s)
.Ve
.PP
Which shows the total time spent inside the \s-1DBI,\s0 with a count of
the total number of method calls and the name of the script being
run, then a formatted version of the profile data tree.
.PP
If the results are being formatted when the perl process is exiting
(which is usually the case when the \s-1DBI_PROFILE\s0 environment variable
is used) then the percentage of time the process spent inside the
\&\s-1DBI\s0 is also shown. If the process is not exiting then the percentage is
calculated using the time between the first and last call to the \s-1DBI.\s0
.PP
In the example above the paths in the tree are only one level deep and
use the Statement text as the value (that's the default behaviour).
.PP
The merged profile data at the 'leaves' of the tree are presented
as total time spent, count, average time spent (which is simply total
time divided by the count), then the time spent on the first call,
the time spent on the fastest call, and finally the time spent on
the slowest call.
.PP
The 'avg', 'first', 'min' and 'max' times are not particularly
useful when the profile data path only contains the statement text.
Here's an extract of a more detailed example using both statement
text and method name in the path:
.PP
.Vb 5
\&  \*(AqSELECT mode,size,name FROM table\*(Aq =>
\&      \*(AqFETCH\*(Aq =>
\&          0.000076s
\&      \*(Aqfetchrow_hashref\*(Aq =>
\&          0.036203s / 108 = 0.000335s avg (first 0.000490s, min 0.000152s, max 0.002786s)
.Ve
.PP
Here you can see the 'avg', 'first', 'min' and 'max' for the
108 calls to \fIfetchrow_hashref()\fR become rather more interesting.
Also the data for \s-1FETCH\s0 just shows a time value because it was only
called once.
.PP
Currently the profile data is output sorted by branch names. That
may change in a later version so the leaf nodes are sorted by total
time per leaf node.
.SS "Report Destination"
.IX Subsection "Report Destination"
The default method of reporting is for the \s-1DESTROY\s0 method of the
Profile object to format the results and write them using:
.PP
.Vb 1
\&    DBI\->trace_msg($results, 0);  # see $ON_DESTROY_DUMP below
.Ve
.PP
to write them to the \s-1DBI\s0 \fItrace()\fR filehandle (which defaults to
\&\s-1STDERR\s0). To direct the \s-1DBI\s0 trace filehandle to write to a file
without enabling tracing the \fItrace()\fR method can be called with a
trace level of 0. For example:
.PP
.Vb 1
\&    DBI\->trace(0, $filename);
.Ve
.PP
The same effect can be achieved without changing the code by
setting the \f(CW\*(C`DBI_TRACE\*(C'\fR environment variable to \f(CW\*(C`0=filename\*(C'\fR.
.PP
The \f(CW$DBI::Profile::ON_DESTROY_DUMP\fR variable holds a code ref
that's called to perform the output of the formatted results.
The default value is:
.PP
.Vb 1
\&  $ON_DESTROY_DUMP = sub { DBI\->trace_msg($results, 0) };
.Ve
.PP
Apart from making it easy to send the dump elsewhere, it can also
be useful as a simple way to disable dumping results.
.SH "CHILD HANDLES"
.IX Header "CHILD HANDLES"
Child handles inherit a reference to the Profile attribute value
of their parent.  So if profiling is enabled for a database handle
then by default the statement handles created from it all contribute
to the same merged profile data tree.
.SH "PROFILE OBJECT METHODS"
.IX Header "PROFILE OBJECT METHODS"
.SS "format"
.IX Subsection "format"
See \*(L"\s-1REPORTING\*(R"\s0.
.SS "as_node_path_list"
.IX Subsection "as_node_path_list"
.Vb 2
\&  @ary = $dbh\->{Profile}\->as_node_path_list();
\&  @ary = $dbh\->{Profile}\->as_node_path_list($node, $path);
.Ve
.PP
Returns the collected data ($dbh\->{Profile}{Data}) restructured into a list of
array refs, one for each leaf node in the Data tree. This 'flat' structure is
often much simpler for applications to work with.
.PP
The first element of each array ref is a reference to the leaf node.
The remaining elements are the 'path' through the data tree to that node.
.PP
For example, given a data tree like this:
.PP
.Vb 3
\&    {key1a}{key2a}[node1]
\&    {key1a}{key2b}[node2]
\&    {key1b}{key2a}{key3a}[node3]
.Ve
.PP
The \fIas_node_path_list()\fR method  will return this list:
.PP
.Vb 3
\&    [ [node1], \*(Aqkey1a\*(Aq, \*(Aqkey2a\*(Aq ]
\&    [ [node2], \*(Aqkey1a\*(Aq, \*(Aqkey2b\*(Aq ]
\&    [ [node3], \*(Aqkey1b\*(Aq, \*(Aqkey2a\*(Aq, \*(Aqkey3a\*(Aq ]
.Ve
.PP
The nodes are ordered by key, depth-first.
.PP
The \f(CW$node\fR argument can be used to focus on a sub-tree.
If not specified it defaults to \f(CW$dbh\fR\->{Profile}{Data}.
.PP
The \f(CW$path\fR argument can be used to specify a list of path elements that will be
added to each element of the returned list. If not specified it defaults to a
ref to an empty array.
.SS "as_text"
.IX Subsection "as_text"
.Vb 8
\&  @txt = $dbh\->{Profile}\->as_text();
\&  $txt = $dbh\->{Profile}\->as_text({
\&      node      => undef,
\&      path      => [],
\&      separator => " > ",
\&      format    => \*(Aq%1$s: %11$fs / %10$d = %2$fs avg (first %12$fs, min %13$fs, max %14$fs)\*(Aq."\en";
\&      sortsub   => sub { ... },
\&  );
.Ve
.PP
Returns the collected data ($dbh\->{Profile}{Data}) reformatted into a list of formatted strings.
In scalar context the list is returned as a single concatenated string.
.PP
A hashref can be used to pass in arguments, the default values are shown in the example above.
.PP
The \f(CW\*(C`node\*(C'\fR and <path> arguments are passed to \fIas_node_path_list()\fR.
.PP
The \f(CW\*(C`separator\*(C'\fR argument is used to join the elements of the path for each leaf node.
.PP
The \f(CW\*(C`sortsub\*(C'\fR argument is used to pass in a ref to a sub that will order the list.
The subroutine will be passed a reference to the array returned by
\&\fIas_node_path_list()\fR and should sort the contents of the array in place.
The return value from the sub is ignored. For example, to sort the nodes by the
second level key you could use:
.PP
.Vb 1
\&  sortsub => sub { my $ary=shift; @$ary = sort { $a\->[2] cmp $b\->[2] } @$ary }
.Ve
.PP
The \f(CW\*(C`format\*(C'\fR argument is a \f(CW\*(C`sprintf\*(C'\fR format string that specifies the format
to use for each leaf node.  It uses the explicit format parameter index
mechanism to specify which of the arguments should appear where in the string.
The arguments to sprintf are:
.PP
.Vb 10
\&     1:  path to node, joined with the separator
\&     2:  average duration (total duration/count)
\&         (3 thru 9 are currently unused)
\&    10:  count
\&    11:  total duration
\&    12:  first duration
\&    13:  smallest duration
\&    14:  largest duration
\&    15:  time of first call
\&    16:  time of first call
.Ve
.SH "CUSTOM DATA MANIPULATION"
.IX Header "CUSTOM DATA MANIPULATION"
Recall that \f(CW\*(C`$h\->{Profile}\->{Data}\*(C'\fR is a reference to the collected data.
Either to a 'leaf' array (when the Path is empty, i.e., \s-1DBI_PROFILE\s0 env var is 1),
or a reference to hash containing values that are either further hash
references or leaf array references.
.PP
Sometimes it's useful to be able to summarise some or all of the collected data.
The \fIdbi_profile_merge_nodes()\fR function can be used to merge leaf node values.
.SS "dbi_profile_merge_nodes"
.IX Subsection "dbi_profile_merge_nodes"
.Vb 1
\&  use DBI qw(dbi_profile_merge_nodes);
\&
\&  $time_in_dbi = dbi_profile_merge_nodes(my $totals=[], @$leaves);
.Ve
.PP
Merges profile data node. Given a reference to a destination array, and zero or
more references to profile data, merges the profile data into the destination array.
For example:
.PP
.Vb 5
\&  $time_in_dbi = dbi_profile_merge_nodes(
\&      my $totals=[],
\&      [ 10, 0.51, 0.11, 0.01, 0.22, 1023110000, 1023110010 ],
\&      [ 15, 0.42, 0.12, 0.02, 0.23, 1023110005, 1023110009 ],
\&  );
.Ve
.PP
\&\f(CW$totals\fR will then contain
.PP
.Vb 1
\&  [ 25, 0.93, 0.11, 0.01, 0.23, 1023110000, 1023110010 ]
.Ve
.PP
and \f(CW$time_in_dbi\fR will be 0.93;
.PP
The second argument need not be just leaf nodes. If given a reference to a hash
then the hash is recursively searched for leaf nodes and all those found
are merged.
.PP
For example, to get the time spent 'inside' the \s-1DBI\s0 during an http request,
your logging code run at the end of the request (i.e. mod_perl LogHandler)
could use:
.PP
.Vb 5
\&  my $time_in_dbi = 0;
\&  if (my $Profile = $dbh\->{Profile}) { # if DBI profiling is enabled
\&      $time_in_dbi = dbi_profile_merge_nodes(my $total=[], $Profile\->{Data});
\&      $Profile\->{Data} = {}; # reset the profile data
\&  }
.Ve
.PP
If profiling has been enabled then \f(CW$time_in_dbi\fR will hold the time spent inside
the \s-1DBI\s0 for that handle (and any other handles that share the same profile data)
since the last request.
.PP
Prior to \s-1DBI 1.56\s0 the \fIdbi_profile_merge_nodes()\fR function was called \fIdbi_profile_merge()\fR.
That name still exists as an alias.
.SH "CUSTOM DATA COLLECTION"
.IX Header "CUSTOM DATA COLLECTION"
.SS "Using The Path Attribute"
.IX Subsection "Using The Path Attribute"
.Vb 6
\&  XXX example to be added later using a selectall_arrayref call
\&  XXX nested inside a fetch loop where the first column of the
\&  XXX outer loop is bound to the profile Path using
\&  XXX bind_column(1, \e${ $dbh\->{Profile}\->{Path}\->[0] })
\&  XXX so you end up with separate profiles for each loop
\&  XXX (patches welcome to add this to the docs :)
.Ve
.SS "Adding Your Own Samples"
.IX Subsection "Adding Your Own Samples"
The \fIdbi_profile()\fR function can be used to add extra sample data
into the profile data tree. For example:
.PP
.Vb 2
\&    use DBI;
\&    use DBI::Profile (dbi_profile dbi_time);
\&
\&    my $t1 = dbi_time(); # floating point high\-resolution time
\&
\&    ... execute code you want to profile here ...
\&
\&    my $t2 = dbi_time();
\&    dbi_profile($h, $statement, $method, $t1, $t2);
.Ve
.PP
The \f(CW$h\fR parameter is the handle the extra profile sample should be
associated with. The \f(CW$statement\fR parameter is the string to use where
the Path specifies !Statement. If \f(CW$statement\fR is undef
then \f(CW$h\fR\->{Statement} will be used. Similarly \f(CW$method\fR is the string
to use if the Path specifies !MethodName. There is no
default value for \f(CW$method\fR.
.PP
The \f(CW$h\fR\->{Profile}{Path} attribute is processed by \fIdbi_profile()\fR in
the usual way.
.PP
The \f(CW$h\fR parameter is usually a \s-1DBI\s0 handle but it can also be a reference to a
hash, in which case the \fIdbi_profile()\fR acts on each defined value in the hash.
This is an efficient way to update multiple profiles with a single sample,
and is used by the DashProfiler module.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Alternate profile modules must subclass DBI::Profile to help ensure
they work with future versions of the \s-1DBI.\s0
.SH "CAVEATS"
.IX Header "CAVEATS"
Applications which generate many different statement strings
(typically because they don't use placeholders) and profile with
!Statement in the Path (the default) will consume memory
in the Profile Data structure for each statement. Use a code ref
in the Path to return an edited (simplified) form of the statement.
.PP
If a method throws an exception itself (not via RaiseError) then
it won't be counted in the profile.
.PP
If a HandleError subroutine throws an exception (rather than returning
0 and letting RaiseError do it) then the method call won't be counted
in the profile.
.PP
Time spent in \s-1DESTROY\s0 is added to the profile of the parent handle.
.PP
Time spent in \s-1DBI\-\s0>*() methods is not counted. The time spent in
the driver connect method, \f(CW$drh\fR\->\fIconnect()\fR, when it's called by
\&\s-1DBI\-\s0>connect is counted if the \s-1DBI_PROFILE\s0 environment variable is set.
.PP
Time spent fetching tied variables, \f(CW$DBI::errstr\fR, is counted.
.PP
Time spent in \s-1FETCH\s0 for \f(CW$h\fR\->{Profile} is not counted, so getting the profile
data doesn't alter it.
.PP
DBI::PurePerl does not support profiling (though it could in theory).
.PP
For asynchronous queries, time spent while the query is running on the
backend is not counted.
.PP
A few platforms don't support the \fIgettimeofday()\fR high resolution
time function used by the \s-1DBI \s0(and available via the \fIdbi_time()\fR function).
In which case you'll get integer resolution time which is mostly useless.
.PP
On Windows platforms the \fIdbi_time()\fR function is limited to millisecond
resolution. Which isn't sufficiently fine for our needs, but still
much better than integer resolution. This limited resolution means
that fast method calls will often register as taking 0 time. And
timings in general will have much more 'jitter' depending on where
within the 'current millisecond' the start and end timing was taken.
.PP
This documentation could be more clear. Probably needs to be reordered
to start with several examples and build from there.  Trying to
explain the concepts first seems painful and to lead to just as
many forward references.  (Patches welcome!)
                                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Profile5.16.3pm                         0100644 0001750 0001750 00000075007 12566241600 023721  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Profile 3"
.TH DBI::Profile 3 "2012-01-02" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Profile \- Performance profiling and benchmarking for the DBI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The easiest way to enable \s-1DBI\s0 profiling is to set the \s-1DBI_PROFILE\s0
environment variable to 2 and then run your code as usual:
.PP
.Vb 1
\&  DBI_PROFILE=2 prog.pl
.Ve
.PP
This will profile your program and then output a textual summary
grouped by query when the program exits.  You can also enable profiling by
setting the Profile attribute of any \s-1DBI\s0 handle:
.PP
.Vb 1
\&  $dbh\->{Profile} = 2;
.Ve
.PP
Then the summary will be printed when the handle is destroyed.
.PP
Many other values apart from are possible \- see \*(L"\s-1ENABLING\s0 A \s-1PROFILE\s0\*(R" below.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The DBI::Profile module provides a simple interface to collect and
report performance and benchmarking data from the \s-1DBI\s0.
.PP
For a more elaborate interface, suitable for larger programs, see
DBI::ProfileDumper and dbiprof.
For Apache/mod_perl applications see
DBI::ProfileDumper::Apache.
.SH "OVERVIEW"
.IX Header "OVERVIEW"
Performance data collection for the \s-1DBI\s0 is built around several
concepts which are important to understand clearly.
.IP "Method Dispatch" 4
.IX Item "Method Dispatch"
Every method call on a \s-1DBI\s0 handle passes through a single 'dispatch'
function which manages all the common aspects of \s-1DBI\s0 method calls,
such as handling the RaiseError attribute.
.IP "Data Collection" 4
.IX Item "Data Collection"
If profiling is enabled for a handle then the dispatch code takes
a high-resolution timestamp soon after it is entered. Then, after
calling the appropriate method and just before returning, it takes
another high-resolution timestamp and calls a function to record
the information.  That function is passed the two timestamps
plus the \s-1DBI\s0 handle and the name of the method that was called.
That data about a single \s-1DBI\s0 method call is called a \fIprofile sample\fR.
.IP "Data Filtering" 4
.IX Item "Data Filtering"
If the method call was invoked by the \s-1DBI\s0 or by a driver then the call is
ignored for profiling because the time spent will be accounted for by the
original 'outermost' call for your code.
.Sp
For example, the calls that the \fIselectrow_arrayref()\fR method makes
to \fIprepare()\fR and \fIexecute()\fR etc. are not counted individually
because the time spent in those methods is going to be allocated
to the \fIselectrow_arrayref()\fR method when it returns. If this was not
done then it would be very easy to double count time spent inside
the \s-1DBI\s0.
.IP "Data Storage Tree" 4
.IX Item "Data Storage Tree"
The profile data is accumulated as 'leaves on a tree'. The 'path' through the
branches of the tree to a particular leaf is determined dynamically for each sample.
This is a key feature of \s-1DBI\s0 profiling.
.Sp
For each profiled method call the \s-1DBI\s0 walks along the Path and uses each value
in the Path to step into and grow the Data tree.
.Sp
For example, if the Path is
.Sp
.Vb 1
\&  [ \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq, \*(Aqbaz\*(Aq ]
.Ve
.Sp
then the new profile sample data will be \fImerged\fR into the tree at
.Sp
.Vb 1
\&  $h\->{Profile}\->{Data}\->{foo}\->{bar}\->{baz}
.Ve
.Sp
But it's not very useful to merge all the call data into one leaf node (except
to get an overall 'time spent inside the \s-1DBI\s0' total).  It's more common to want
the Path to include dynamic values such as the current statement text and/or
the name of the method called to show what the time spent inside the \s-1DBI\s0 was for.
.Sp
The Path can contain some 'magic cookie' values that are automatically replaced
by corresponding dynamic values when they're used. These magic cookies always
start with a punctuation character.
.Sp
For example a value of '\f(CW\*(C`!MethodName\*(C'\fR' in the Path causes the corresponding
entry in the Data to be the name of the method that was called.
For example, if the Path was:
.Sp
.Vb 1
\&  [ \*(Aqfoo\*(Aq, \*(Aq!MethodName\*(Aq, \*(Aqbar\*(Aq ]
.Ve
.Sp
and the \fIselectall_arrayref()\fR method was called, then the profile sample data
for that call will be merged into the tree at:
.Sp
.Vb 1
\&  $h\->{Profile}\->{Data}\->{foo}\->{selectall_arrayref}\->{bar}
.Ve
.IP "Profile Data" 4
.IX Item "Profile Data"
Profile data is stored at the 'leaves' of the tree as references
to an array of numeric values. For example:
.Sp
.Vb 9
\&  [
\&    106,                  # 0: count of samples at this node
\&    0.0312958955764771,   # 1: total duration
\&    0.000490069389343262, # 2: first duration
\&    0.000176072120666504, # 3: shortest duration
\&    0.00140702724456787,  # 4: longest duration
\&    1023115819.83019,     # 5: time of first sample
\&    1023115819.86576,     # 6: time of last sample
\&  ]
.Ve
.Sp
After the first sample, later samples always update elements 0, 1, and 6, and
may update 3 or 4 depending on the duration of the sampled call.
.SH "ENABLING A PROFILE"
.IX Header "ENABLING A PROFILE"
Profiling is enabled for a handle by assigning to the Profile
attribute. For example:
.PP
.Vb 1
\&  $h\->{Profile} = DBI::Profile\->new();
.Ve
.PP
The Profile attribute holds a blessed reference to a hash object
that contains the profile data and attributes relating to it.
.PP
The class the Profile object is blessed into is expected to
provide at least a \s-1DESTROY\s0 method which will dump the profile data
to the \s-1DBI\s0 trace file handle (\s-1STDERR\s0 by default).
.PP
All these examples have the same effect as each other:
.PP
.Vb 5
\&  $h\->{Profile} = 0;
\&  $h\->{Profile} = "/DBI::Profile";
\&  $h\->{Profile} = DBI::Profile\->new();
\&  $h\->{Profile} = {};
\&  $h\->{Profile} = { Path => [] };
.Ve
.PP
Similarly, these examples have the same effect as each other:
.PP
.Vb 4
\&  $h\->{Profile} = 6;
\&  $h\->{Profile} = "6/DBI::Profile";
\&  $h\->{Profile} = "!Statement:!MethodName/DBI::Profile";
\&  $h\->{Profile} = { Path => [ \*(Aq!Statement\*(Aq, \*(Aq!MethodName\*(Aq ] };
.Ve
.PP
If a non-blessed hash reference is given then the DBI::Profile
module is automatically \f(CW\*(C`require\*(C'\fR'd and the reference is blessed
into that class.
.PP
If a string is given then it is processed like this:
.PP
.Vb 1
\&    ($path, $module, $args) = split /\e//, $string, 3
\&
\&    @path = split /:/, $path
\&    @args = split /:/, $args
\&
\&    eval "require $module" if $module
\&    $module ||= "DBI::Profile"
\&
\&    $module\->new( Path => \e@Path, @args )
.Ve
.PP
So the first value is used to select the Path to be used (see below).
The second value, if present, is used as the name of a module which
will be loaded and it's \f(CW\*(C`new\*(C'\fR method called. If not present it
defaults to DBI::Profile. Any other values are passed as arguments
to the \f(CW\*(C`new\*(C'\fR method. For example: "\f(CW\*(C`2/DBIx::OtherProfile/Foo:42\*(C'\fR".
.PP
Numbers can be used as a shorthand way to enable common Path values.
The simplest way to explain how the values are interpreted is to show the code:
.PP
.Vb 5
\&    push @Path, "DBI"           if $path_elem & 0x01;
\&    push @Path, "!Statement"    if $path_elem & 0x02;
\&    push @Path, "!MethodName"   if $path_elem & 0x04;
\&    push @Path, "!MethodClass"  if $path_elem & 0x08;
\&    push @Path, "!Caller2"      if $path_elem & 0x10;
.Ve
.PP
So \*(L"2\*(R" is the same as \*(L"!Statement\*(R" and \*(L"6\*(R" (2+4) is the same as
\&\*(L"!Statement:!Method\*(R".  Those are the two most commonly used values.  Using a
negative number will reverse the path. Thus \*(L"\-6\*(R" will group by method name then
statement.
.PP
The splitting and parsing of string values assigned to the Profile
attribute may seem a little odd, but there's a good reason for it.
Remember that attributes can be embedded in the Data Source Name
string which can be passed in to a script as a parameter. For
example:
.PP
.Vb 2
\&    dbi:DriverName(Profile=>2):dbname
\&    dbi:DriverName(Profile=>{Username}:!Statement/MyProfiler/Foo:42):dbname
.Ve
.PP
And also, if the \f(CW\*(C`DBI_PROFILE\*(C'\fR environment variable is set then
The \s-1DBI\s0 arranges for every driver handle to share the same profile
object. When perl exits a single profile summary will be generated
that reflects (as nearly as practical) the total use of the \s-1DBI\s0 by
the application.
.SH "THE PROFILE OBJECT"
.IX Header "THE PROFILE OBJECT"
The \s-1DBI\s0 core expects the Profile attribute value to be a hash
reference and if the following values don't exist it will create
them as needed:
.SS "Data"
.IX Subsection "Data"
A reference to a hash containing the collected profile data.
.SS "Path"
.IX Subsection "Path"
The Path value is a reference to an array. Each element controls the
value to use at the corresponding level of the profile Data tree.
.PP
If the value of Path is anything other than an array reference,
it is treated as if it was:
.PP
.Vb 1
\&        [ \*(Aq!Statement\*(Aq ]
.Ve
.PP
The elements of Path array can be one of the following types:
.PP
\fISpecial Constant\fR
.IX Subsection "Special Constant"
.PP
\&\fB!Statement\fR
.PP
Use the current Statement text. Typically that's the value of the Statement
attribute for the handle the method was called with. Some methods, like
\&\fIcommit()\fR and \fIrollback()\fR, are unrelated to a particular statement. For those
methods !Statement records an empty string.
.PP
For statement handles this is always simply the string that was
given to \fIprepare()\fR when the handle was created.  For database handles
this is the statement that was last prepared or executed on that
database handle. That can lead to a little 'fuzzyness' because, for
example, calls to the \fIquote()\fR method to build a new statement will
typically be associated with the previous statement. In practice
this isn't a significant issue and the dynamic Path mechanism can
be used to setup your own rules.
.PP
\&\fB!MethodName\fR
.PP
Use the name of the \s-1DBI\s0 method that the profile sample relates to.
.PP
\&\fB!MethodClass\fR
.PP
Use the fully qualified name of the \s-1DBI\s0 method, including
the package, that the profile sample relates to. This shows you
where the method was implemented. For example:
.PP
.Vb 4
\&  \*(AqDBD::_::db::selectrow_arrayref\*(Aq =>
\&      0.022902s
\&  \*(AqDBD::mysql::db::selectrow_arrayref\*(Aq =>
\&      2.244521s / 99 = 0.022445s avg (first 0.022813s, min 0.022051s, max 0.028932s)
.Ve
.PP
The \*(L"DBD::_::db::selectrow_arrayref\*(R" shows that the driver has
inherited the selectrow_arrayref method provided by the \s-1DBI\s0.
.PP
But you'll note that there is only one call to
DBD::_::db::selectrow_arrayref but another 99 to
DBD::mysql::db::selectrow_arrayref. Currently the first
call doesn't record the true location. That may change.
.PP
\&\fB!Caller\fR
.PP
Use a string showing the filename and line number of the code calling the method.
.PP
\&\fB!Caller2\fR
.PP
Use a string showing the filename and line number of the code calling the
method, as for !Caller, but also include filename and line number of the code
that called that. Calls from \s-1DBI::\s0 and \s-1DBD::\s0 packages are skipped.
.PP
\&\fB!File\fR
.PP
Same as !Caller above except that only the filename is included, not the line number.
.PP
\&\fB!File2\fR
.PP
Same as !Caller2 above except that only the filenames are included, not the line number.
.PP
\&\fB!Time\fR
.PP
Use the current value of \fItime()\fR. Rarely used. See the more useful \f(CW\*(C`!Time~N\*(C'\fR below.
.PP
\&\fB!Time~N\fR
.PP
Where \f(CW\*(C`N\*(C'\fR is an integer. Use the current value of \fItime()\fR but with reduced precision.
The value used is determined in this way:
.PP
.Vb 1
\&    int( time() / N ) * N
.Ve
.PP
This is a useful way to segregate a profile into time slots. For example:
.PP
.Vb 1
\&    [ \*(Aq!Time~60\*(Aq, \*(Aq!Statement\*(Aq ]
.Ve
.PP
\fICode Reference\fR
.IX Subsection "Code Reference"
.PP
The subroutine is passed the handle it was called on and the \s-1DBI\s0 method name.
The current Statement is in \f(CW$_\fR. The statement string should not be modified,
so most subs start with \f(CW\*(C`local $_ = $_;\*(C'\fR.
.PP
The list of values it returns is used at that point in the Profile Path.
.PP
The sub can 'veto' (reject) a profile sample by including a reference to undef
in the returned list. That can be useful when you want to only profile
statements that match a certain pattern, or only profile certain methods.
.PP
\fISubroutine Specifier\fR
.IX Subsection "Subroutine Specifier"
.PP
A Path element that begins with '\f(CW\*(C`&\*(C'\fR' is treated as the name of a subroutine
in the DBI::ProfileSubs namespace and replaced with the corresponding code reference.
.PP
Currently this only works when the Path is specified by the \f(CW\*(C`DBI_PROFILE\*(C'\fR
environment variable.
.PP
Also, currently, the only subroutine in the DBI::ProfileSubs namespace is
\&\f(CW\*(Aq&norm_std_n3\*(Aq\fR. That's a very handy subroutine when profiling code that
doesn't use placeholders. See DBI::ProfileSubs for more information.
.PP
\fIAttribute Specifier\fR
.IX Subsection "Attribute Specifier"
.PP
A string enclosed in braces, such as '\f(CW\*(C`{Username}\*(C'\fR', specifies that the current
value of the corresponding database handle attribute should be used at that
point in the Path.
.PP
\fIReference to a Scalar\fR
.IX Subsection "Reference to a Scalar"
.PP
Specifies that the current value of the referenced scalar be used at that point
in the Path.  This provides an efficient way to get 'contextual' values into
your profile.
.PP
\fIOther Values\fR
.IX Subsection "Other Values"
.PP
Any other values are stringified and used literally.
.PP
(References, and values that begin with punctuation characters are reserved.)
.SH "REPORTING"
.IX Header "REPORTING"
.SS "Report Format"
.IX Subsection "Report Format"
The current accumulated profile data can be formatted and output using
.PP
.Vb 1
\&    print $h\->{Profile}\->format;
.Ve
.PP
To discard the profile data and start collecting fresh data
you can do:
.PP
.Vb 1
\&    $h\->{Profile}\->{Data} = undef;
.Ve
.PP
The default results format looks like this:
.PP
.Vb 5
\&  DBI::Profile: 0.001015s 42.7% (5 calls) programname @ YYYY\-MM\-DD HH:MM:SS
\&  \*(Aq\*(Aq =>
\&      0.000024s / 2 = 0.000012s avg (first 0.000015s, min 0.000009s, max 0.000015s)
\&  \*(AqSELECT mode,size,name FROM table\*(Aq =>
\&      0.000991s / 3 = 0.000330s avg (first 0.000678s, min 0.000009s, max 0.000678s)
.Ve
.PP
Which shows the total time spent inside the \s-1DBI\s0, with a count of
the total number of method calls and the name of the script being
run, then a formatted version of the profile data tree.
.PP
If the results are being formatted when the perl process is exiting
(which is usually the case when the \s-1DBI_PROFILE\s0 environment variable
is used) then the percentage of time the process spent inside the
\&\s-1DBI\s0 is also shown. If the process is not exiting then the percentage is
calculated using the time between the first and last call to the \s-1DBI\s0.
.PP
In the example above the paths in the tree are only one level deep and
use the Statement text as the value (that's the default behaviour).
.PP
The merged profile data at the 'leaves' of the tree are presented
as total time spent, count, average time spent (which is simply total
time divided by the count), then the time spent on the first call,
the time spent on the fastest call, and finally the time spent on
the slowest call.
.PP
The 'avg', 'first', 'min' and 'max' times are not particularly
useful when the profile data path only contains the statement text.
Here's an extract of a more detailed example using both statement
text and method name in the path:
.PP
.Vb 5
\&  \*(AqSELECT mode,size,name FROM table\*(Aq =>
\&      \*(AqFETCH\*(Aq =>
\&          0.000076s
\&      \*(Aqfetchrow_hashref\*(Aq =>
\&          0.036203s / 108 = 0.000335s avg (first 0.000490s, min 0.000152s, max 0.002786s)
.Ve
.PP
Here you can see the 'avg', 'first', 'min' and 'max' for the
108 calls to \fIfetchrow_hashref()\fR become rather more interesting.
Also the data for \s-1FETCH\s0 just shows a time value because it was only
called once.
.PP
Currently the profile data is output sorted by branch names. That
may change in a later version so the leaf nodes are sorted by total
time per leaf node.
.SS "Report Destination"
.IX Subsection "Report Destination"
The default method of reporting is for the \s-1DESTROY\s0 method of the
Profile object to format the results and write them using:
.PP
.Vb 1
\&    DBI\->trace_msg($results, 0);  # see $ON_DESTROY_DUMP below
.Ve
.PP
to write them to the \s-1DBI\s0 \fItrace()\fR filehandle (which defaults to
\&\s-1STDERR\s0). To direct the \s-1DBI\s0 trace filehandle to write to a file
without enabling tracing the \fItrace()\fR method can be called with a
trace level of 0. For example:
.PP
.Vb 1
\&    DBI\->trace(0, $filename);
.Ve
.PP
The same effect can be achieved without changing the code by
setting the \f(CW\*(C`DBI_TRACE\*(C'\fR environment variable to \f(CW\*(C`0=filename\*(C'\fR.
.PP
The \f(CW$DBI::Profile::ON_DESTROY_DUMP\fR variable holds a code ref
that's called to perform the output of the formatted results.
The default value is:
.PP
.Vb 1
\&  $ON_DESTROY_DUMP = sub { DBI\->trace_msg($results, 0) };
.Ve
.PP
Apart from making it easy to send the dump elsewhere, it can also
be useful as a simple way to disable dumping results.
.SH "CHILD HANDLES"
.IX Header "CHILD HANDLES"
Child handles inherit a reference to the Profile attribute value
of their parent.  So if profiling is enabled for a database handle
then by default the statement handles created from it all contribute
to the same merged profile data tree.
.SH "PROFILE OBJECT METHODS"
.IX Header "PROFILE OBJECT METHODS"
.SS "format"
.IX Subsection "format"
See \*(L"\s-1REPORTING\s0\*(R".
.SS "as_node_path_list"
.IX Subsection "as_node_path_list"
.Vb 2
\&  @ary = $dbh\->{Profile}\->as_node_path_list();
\&  @ary = $dbh\->{Profile}\->as_node_path_list($node, $path);
.Ve
.PP
Returns the collected data ($dbh\->{Profile}{Data}) restructured into a list of
array refs, one for each leaf node in the Data tree. This 'flat' structure is
often much simpler for applications to work with.
.PP
The first element of each array ref is a reference to the leaf node.
The remaining elements are the 'path' through the data tree to that node.
.PP
For example, given a data tree like this:
.PP
.Vb 3
\&    {key1a}{key2a}[node1]
\&    {key1a}{key2b}[node2]
\&    {key1b}{key2a}{key3a}[node3]
.Ve
.PP
The \fIas_node_path_list()\fR method  will return this list:
.PP
.Vb 3
\&    [ [node1], \*(Aqkey1a\*(Aq, \*(Aqkey2a\*(Aq ]
\&    [ [node2], \*(Aqkey1a\*(Aq, \*(Aqkey2b\*(Aq ]
\&    [ [node3], \*(Aqkey1b\*(Aq, \*(Aqkey2a\*(Aq, \*(Aqkey3a\*(Aq ]
.Ve
.PP
The nodes are ordered by key, depth-first.
.PP
The \f(CW$node\fR argument can be used to focus on a sub-tree.
If not specified it defaults to \f(CW$dbh\fR\->{Profile}{Data}.
.PP
The \f(CW$path\fR argument can be used to specify a list of path elements that will be
added to each element of the returned list. If not specified it defaults to a a
ref to an empty array.
.SS "as_text"
.IX Subsection "as_text"
.Vb 8
\&  @txt = $dbh\->{Profile}\->as_text();
\&  $txt = $dbh\->{Profile}\->as_text({
\&      node      => undef,
\&      path      => [],
\&      separator => " > ",
\&      format    => \*(Aq%1$s: %11$fs / %10$d = %2$fs avg (first %12$fs, min %13$fs, max %14$fs)\*(Aq."\en";
\&      sortsub   => sub { ... },
\&  );
.Ve
.PP
Returns the collected data ($dbh\->{Profile}{Data}) reformatted into a list of formatted strings.
In scalar context the list is returned as a single concatenated string.
.PP
A hashref can be used to pass in arguments, the default values are shown in the example above.
.PP
The \f(CW\*(C`node\*(C'\fR and <path> arguments are passed to \fIas_node_path_list()\fR.
.PP
The \f(CW\*(C`separator\*(C'\fR argument is used to join the elements of the path for each leaf node.
.PP
The \f(CW\*(C`sortsub\*(C'\fR argument is used to pass in a ref to a sub that will order the list.
The subroutine will be passed a reference to the array returned by
\&\fIas_node_path_list()\fR and should sort the contents of the array in place.
The return value from the sub is ignored. For example, to sort the nodes by the
second level key you could use:
.PP
.Vb 1
\&  sortsub => sub { my $ary=shift; @$ary = sort { $a\->[2] cmp $b\->[2] } @$ary }
.Ve
.PP
The \f(CW\*(C`format\*(C'\fR argument is a \f(CW\*(C`sprintf\*(C'\fR format string that specifies the format
to use for each leaf node.  It uses the explicit format parameter index
mechanism to specify which of the arguments should appear where in the string.
The arguments to sprintf are:
.PP
.Vb 10
\&     1:  path to node, joined with the separator
\&     2:  average duration (total duration/count)
\&         (3 thru 9 are currently unused)
\&    10:  count
\&    11:  total duration
\&    12:  first duration
\&    13:  smallest duration
\&    14:  largest duration
\&    15:  time of first call
\&    16:  time of first call
.Ve
.SH "CUSTOM DATA MANIPULATION"
.IX Header "CUSTOM DATA MANIPULATION"
Recall that \f(CW\*(C`$h\->{Profile}\->{Data}\*(C'\fR is a reference to the collected data.
Either to a 'leaf' array (when the Path is empty, i.e., \s-1DBI_PROFILE\s0 env var is 1),
or a reference to hash containing values that are either further hash
references or leaf array references.
.PP
Sometimes it's useful to be able to summarise some or all of the collected data.
The \fIdbi_profile_merge_nodes()\fR function can be used to merge leaf node values.
.SS "dbi_profile_merge_nodes"
.IX Subsection "dbi_profile_merge_nodes"
.Vb 1
\&  use DBI qw(dbi_profile_merge_nodes);
\&
\&  $time_in_dbi = dbi_profile_merge_nodes(my $totals=[], @$leaves);
.Ve
.PP
Merges profile data node. Given a reference to a destination array, and zero or
more references to profile data, merges the profile data into the destination array.
For example:
.PP
.Vb 5
\&  $time_in_dbi = dbi_profile_merge_nodes(
\&      my $totals=[],
\&      [ 10, 0.51, 0.11, 0.01, 0.22, 1023110000, 1023110010 ],
\&      [ 15, 0.42, 0.12, 0.02, 0.23, 1023110005, 1023110009 ],
\&  );
.Ve
.PP
\&\f(CW$totals\fR will then contain
.PP
.Vb 1
\&  [ 25, 0.93, 0.11, 0.01, 0.23, 1023110000, 1023110010 ]
.Ve
.PP
and \f(CW$time_in_dbi\fR will be 0.93;
.PP
The second argument need not be just leaf nodes. If given a reference to a hash
then the hash is recursively searched for for leaf nodes and all those found
are merged.
.PP
For example, to get the time spent 'inside' the \s-1DBI\s0 during an http request,
your logging code run at the end of the request (i.e. mod_perl LogHandler)
could use:
.PP
.Vb 5
\&  my $time_in_dbi = 0;
\&  if (my $Profile = $dbh\->{Profile}) { # if DBI profiling is enabled
\&      $time_in_dbi = dbi_profile_merge_nodes(my $total=[], $Profile\->{Data});
\&      $Profile\->{Data} = {}; # reset the profile data
\&  }
.Ve
.PP
If profiling has been enabled then \f(CW$time_in_dbi\fR will hold the time spent inside
the \s-1DBI\s0 for that handle (and any other handles that share the same profile data)
since the last request.
.PP
Prior to \s-1DBI\s0 1.56 the \fIdbi_profile_merge_nodes()\fR function was called \fIdbi_profile_merge()\fR.
That name still exists as an alias.
.SH "CUSTOM DATA COLLECTION"
.IX Header "CUSTOM DATA COLLECTION"
.SS "Using The Path Attribute"
.IX Subsection "Using The Path Attribute"
.Vb 6
\&  XXX example to be added later using a selectall_arrayref call
\&  XXX nested inside a fetch loop where the first column of the
\&  XXX outer loop is bound to the profile Path using
\&  XXX bind_column(1, \e${ $dbh\->{Profile}\->{Path}\->[0] })
\&  XXX so you end up with separate profiles for each loop
\&  XXX (patches welcome to add this to the docs :)
.Ve
.SS "Adding Your Own Samples"
.IX Subsection "Adding Your Own Samples"
The \fIdbi_profile()\fR function can be used to add extra sample data
into the profile data tree. For example:
.PP
.Vb 2
\&    use DBI;
\&    use DBI::Profile (dbi_profile dbi_time);
\&
\&    my $t1 = dbi_time(); # floating point high\-resolution time
\&
\&    ... execute code you want to profile here ...
\&
\&    my $t2 = dbi_time();
\&    dbi_profile($h, $statement, $method, $t1, $t2);
.Ve
.PP
The \f(CW$h\fR parameter is the handle the extra profile sample should be
associated with. The \f(CW$statement\fR parameter is the string to use where
the Path specifies !Statement. If \f(CW$statement\fR is undef
then \f(CW$h\fR\->{Statement} will be used. Similarly \f(CW$method\fR is the string
to use if the Path specifies !MethodName. There is no
default value for \f(CW$method\fR.
.PP
The \f(CW$h\fR\->{Profile}{Path} attribute is processed by \fIdbi_profile()\fR in
the usual way.
.PP
The \f(CW$h\fR parameter is usually a \s-1DBI\s0 handle but it can also be a reference to a
hash, in which case the \fIdbi_profile()\fR acts on each defined value in the hash.
This is an efficient way to update multiple profiles with a single sample,
and is used by the DashProfiler module.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Alternate profile modules must subclass DBI::Profile to help ensure
they work with future versions of the \s-1DBI\s0.
.SH "CAVEATS"
.IX Header "CAVEATS"
Applications which generate many different statement strings
(typically because they don't use placeholders) and profile with
!Statement in the Path (the default) will consume memory
in the Profile Data structure for each statement. Use a code ref
in the Path to return an edited (simplified) form of the statement.
.PP
If a method throws an exception itself (not via RaiseError) then
it won't be counted in the profile.
.PP
If a HandleError subroutine throws an exception (rather than returning
0 and letting RaiseError do it) then the method call won't be counted
in the profile.
.PP
Time spent in \s-1DESTROY\s0 is added to the profile of the parent handle.
.PP
Time spent in \s-1DBI\-\s0>*() methods is not counted. The time spent in
the driver connect method, \f(CW$drh\fR\->\fIconnect()\fR, when it's called by
\&\s-1DBI\-\s0>connect is counted if the \s-1DBI_PROFILE\s0 environment variable is set.
.PP
Time spent fetching tied variables, \f(CW$DBI::errstr\fR, is counted.
.PP
Time spent in \s-1FETCH\s0 for \f(CW$h\fR\->{Profile} is not counted, so getting the profile
data doesn't alter it.
.PP
DBI::PurePerl does not support profiling (though it could in theory).
.PP
For asynchronous queries, time spent while the query is running on the
backend is not counted.
.PP
A few platforms don't support the \fIgettimeofday()\fR high resolution
time function used by the \s-1DBI\s0 (and available via the \fIdbi_time()\fR function).
In which case you'll get integer resolution time which is mostly useless.
.PP
On Windows platforms the \fIdbi_time()\fR function is limited to millisecond
resolution. Which isn't sufficiently fine for our needs, but still
much better than integer resolution. This limited resolution means
that fast method calls will often register as taking 0 time. And
timings in general will have much more 'jitter' depending on where
within the 'current millisecond' the start and and timing was taken.
.PP
This documentation could be more clear. Probably needs to be reordered
to start with several examples and build from there.  Trying to
explain the concepts first seems painful and to lead to just as
many forward references.  (Patches welcome!)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Profile5.18.3pm                         0100644 0001750 0001750 00000075313 12566241600 023723  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Profile 3"
.TH DBI::Profile 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Profile \- Performance profiling and benchmarking for the DBI
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The easiest way to enable \s-1DBI\s0 profiling is to set the \s-1DBI_PROFILE\s0
environment variable to 2 and then run your code as usual:
.PP
.Vb 1
\&  DBI_PROFILE=2 prog.pl
.Ve
.PP
This will profile your program and then output a textual summary
grouped by query when the program exits.  You can also enable profiling by
setting the Profile attribute of any \s-1DBI\s0 handle:
.PP
.Vb 1
\&  $dbh\->{Profile} = 2;
.Ve
.PP
Then the summary will be printed when the handle is destroyed.
.PP
Many other values apart from are possible \- see \*(L"\s-1ENABLING A PROFILE\*(R"\s0 below.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The DBI::Profile module provides a simple interface to collect and
report performance and benchmarking data from the \s-1DBI.\s0
.PP
For a more elaborate interface, suitable for larger programs, see
DBI::ProfileDumper and dbiprof.
For Apache/mod_perl applications see
DBI::ProfileDumper::Apache.
.SH "OVERVIEW"
.IX Header "OVERVIEW"
Performance data collection for the \s-1DBI\s0 is built around several
concepts which are important to understand clearly.
.IP "Method Dispatch" 4
.IX Item "Method Dispatch"
Every method call on a \s-1DBI\s0 handle passes through a single 'dispatch'
function which manages all the common aspects of \s-1DBI\s0 method calls,
such as handling the RaiseError attribute.
.IP "Data Collection" 4
.IX Item "Data Collection"
If profiling is enabled for a handle then the dispatch code takes
a high-resolution timestamp soon after it is entered. Then, after
calling the appropriate method and just before returning, it takes
another high-resolution timestamp and calls a function to record
the information.  That function is passed the two timestamps
plus the \s-1DBI\s0 handle and the name of the method that was called.
That data about a single \s-1DBI\s0 method call is called a \fIprofile sample\fR.
.IP "Data Filtering" 4
.IX Item "Data Filtering"
If the method call was invoked by the \s-1DBI\s0 or by a driver then the call is
ignored for profiling because the time spent will be accounted for by the
original 'outermost' call for your code.
.Sp
For example, the calls that the \fIselectrow_arrayref()\fR method makes
to \fIprepare()\fR and \fIexecute()\fR etc. are not counted individually
because the time spent in those methods is going to be allocated
to the \fIselectrow_arrayref()\fR method when it returns. If this was not
done then it would be very easy to double count time spent inside
the \s-1DBI.\s0
.IP "Data Storage Tree" 4
.IX Item "Data Storage Tree"
The profile data is accumulated as 'leaves on a tree'. The 'path' through the
branches of the tree to a particular leaf is determined dynamically for each sample.
This is a key feature of \s-1DBI\s0 profiling.
.Sp
For each profiled method call the \s-1DBI\s0 walks along the Path and uses each value
in the Path to step into and grow the Data tree.
.Sp
For example, if the Path is
.Sp
.Vb 1
\&  [ \*(Aqfoo\*(Aq, \*(Aqbar\*(Aq, \*(Aqbaz\*(Aq ]
.Ve
.Sp
then the new profile sample data will be \fImerged\fR into the tree at
.Sp
.Vb 1
\&  $h\->{Profile}\->{Data}\->{foo}\->{bar}\->{baz}
.Ve
.Sp
But it's not very useful to merge all the call data into one leaf node (except
to get an overall 'time spent inside the \s-1DBI\s0' total).  It's more common to want
the Path to include dynamic values such as the current statement text and/or
the name of the method called to show what the time spent inside the \s-1DBI\s0 was for.
.Sp
The Path can contain some 'magic cookie' values that are automatically replaced
by corresponding dynamic values when they're used. These magic cookies always
start with a punctuation character.
.Sp
For example a value of '\f(CW\*(C`!MethodName\*(C'\fR' in the Path causes the corresponding
entry in the Data to be the name of the method that was called.
For example, if the Path was:
.Sp
.Vb 1
\&  [ \*(Aqfoo\*(Aq, \*(Aq!MethodName\*(Aq, \*(Aqbar\*(Aq ]
.Ve
.Sp
and the \fIselectall_arrayref()\fR method was called, then the profile sample data
for that call will be merged into the tree at:
.Sp
.Vb 1
\&  $h\->{Profile}\->{Data}\->{foo}\->{selectall_arrayref}\->{bar}
.Ve
.IP "Profile Data" 4
.IX Item "Profile Data"
Profile data is stored at the 'leaves' of the tree as references
to an array of numeric values. For example:
.Sp
.Vb 9
\&  [
\&    106,                  # 0: count of samples at this node
\&    0.0312958955764771,   # 1: total duration
\&    0.000490069389343262, # 2: first duration
\&    0.000176072120666504, # 3: shortest duration
\&    0.00140702724456787,  # 4: longest duration
\&    1023115819.83019,     # 5: time of first sample
\&    1023115819.86576,     # 6: time of last sample
\&  ]
.Ve
.Sp
After the first sample, later samples always update elements 0, 1, and 6, and
may update 3 or 4 depending on the duration of the sampled call.
.SH "ENABLING A PROFILE"
.IX Header "ENABLING A PROFILE"
Profiling is enabled for a handle by assigning to the Profile
attribute. For example:
.PP
.Vb 1
\&  $h\->{Profile} = DBI::Profile\->new();
.Ve
.PP
The Profile attribute holds a blessed reference to a hash object
that contains the profile data and attributes relating to it.
.PP
The class the Profile object is blessed into is expected to
provide at least a \s-1DESTROY\s0 method which will dump the profile data
to the \s-1DBI\s0 trace file handle (\s-1STDERR\s0 by default).
.PP
All these examples have the same effect as each other:
.PP
.Vb 5
\&  $h\->{Profile} = 0;
\&  $h\->{Profile} = "/DBI::Profile";
\&  $h\->{Profile} = DBI::Profile\->new();
\&  $h\->{Profile} = {};
\&  $h\->{Profile} = { Path => [] };
.Ve
.PP
Similarly, these examples have the same effect as each other:
.PP
.Vb 4
\&  $h\->{Profile} = 6;
\&  $h\->{Profile} = "6/DBI::Profile";
\&  $h\->{Profile} = "!Statement:!MethodName/DBI::Profile";
\&  $h\->{Profile} = { Path => [ \*(Aq!Statement\*(Aq, \*(Aq!MethodName\*(Aq ] };
.Ve
.PP
If a non-blessed hash reference is given then the DBI::Profile
module is automatically \f(CW\*(C`require\*(C'\fR'd and the reference is blessed
into that class.
.PP
If a string is given then it is processed like this:
.PP
.Vb 1
\&    ($path, $module, $args) = split /\e//, $string, 3
\&
\&    @path = split /:/, $path
\&    @args = split /:/, $args
\&
\&    eval "require $module" if $module
\&    $module ||= "DBI::Profile"
\&
\&    $module\->new( Path => \e@Path, @args )
.Ve
.PP
So the first value is used to select the Path to be used (see below).
The second value, if present, is used as the name of a module which
will be loaded and it's \f(CW\*(C`new\*(C'\fR method called. If not present it
defaults to DBI::Profile. Any other values are passed as arguments
to the \f(CW\*(C`new\*(C'\fR method. For example: "\f(CW\*(C`2/DBIx::OtherProfile/Foo:42\*(C'\fR".
.PP
Numbers can be used as a shorthand way to enable common Path values.
The simplest way to explain how the values are interpreted is to show the code:
.PP
.Vb 5
\&    push @Path, "DBI"           if $path_elem & 0x01;
\&    push @Path, "!Statement"    if $path_elem & 0x02;
\&    push @Path, "!MethodName"   if $path_elem & 0x04;
\&    push @Path, "!MethodClass"  if $path_elem & 0x08;
\&    push @Path, "!Caller2"      if $path_elem & 0x10;
.Ve
.PP
So \*(L"2\*(R" is the same as \*(L"!Statement\*(R" and \*(L"6\*(R" (2+4) is the same as
\&\*(L"!Statement:!Method\*(R".  Those are the two most commonly used values.  Using a
negative number will reverse the path. Thus \*(L"\-6\*(R" will group by method name then
statement.
.PP
The splitting and parsing of string values assigned to the Profile
attribute may seem a little odd, but there's a good reason for it.
Remember that attributes can be embedded in the Data Source Name
string which can be passed in to a script as a parameter. For
example:
.PP
.Vb 2
\&    dbi:DriverName(Profile=>2):dbname
\&    dbi:DriverName(Profile=>{Username}:!Statement/MyProfiler/Foo:42):dbname
.Ve
.PP
And also, if the \f(CW\*(C`DBI_PROFILE\*(C'\fR environment variable is set then
The \s-1DBI\s0 arranges for every driver handle to share the same profile
object. When perl exits a single profile summary will be generated
that reflects (as nearly as practical) the total use of the \s-1DBI\s0 by
the application.
.SH "THE PROFILE OBJECT"
.IX Header "THE PROFILE OBJECT"
The \s-1DBI\s0 core expects the Profile attribute value to be a hash
reference and if the following values don't exist it will create
them as needed:
.SS "Data"
.IX Subsection "Data"
A reference to a hash containing the collected profile data.
.SS "Path"
.IX Subsection "Path"
The Path value is a reference to an array. Each element controls the
value to use at the corresponding level of the profile Data tree.
.PP
If the value of Path is anything other than an array reference,
it is treated as if it was:
.PP
.Vb 1
\&        [ \*(Aq!Statement\*(Aq ]
.Ve
.PP
The elements of Path array can be one of the following types:
.PP
\fISpecial Constant\fR
.IX Subsection "Special Constant"
.PP
\&\fB!Statement\fR
.PP
Use the current Statement text. Typically that's the value of the Statement
attribute for the handle the method was called with. Some methods, like
\&\fIcommit()\fR and \fIrollback()\fR, are unrelated to a particular statement. For those
methods !Statement records an empty string.
.PP
For statement handles this is always simply the string that was
given to \fIprepare()\fR when the handle was created.  For database handles
this is the statement that was last prepared or executed on that
database handle. That can lead to a little 'fuzzyness' because, for
example, calls to the \fIquote()\fR method to build a new statement will
typically be associated with the previous statement. In practice
this isn't a significant issue and the dynamic Path mechanism can
be used to setup your own rules.
.PP
\&\fB!MethodName\fR
.PP
Use the name of the \s-1DBI\s0 method that the profile sample relates to.
.PP
\&\fB!MethodClass\fR
.PP
Use the fully qualified name of the \s-1DBI\s0 method, including
the package, that the profile sample relates to. This shows you
where the method was implemented. For example:
.PP
.Vb 4
\&  \*(AqDBD::_::db::selectrow_arrayref\*(Aq =>
\&      0.022902s
\&  \*(AqDBD::mysql::db::selectrow_arrayref\*(Aq =>
\&      2.244521s / 99 = 0.022445s avg (first 0.022813s, min 0.022051s, max 0.028932s)
.Ve
.PP
The \*(L"DBD::_::db::selectrow_arrayref\*(R" shows that the driver has
inherited the selectrow_arrayref method provided by the \s-1DBI.\s0
.PP
But you'll note that there is only one call to
DBD::_::db::selectrow_arrayref but another 99 to
DBD::mysql::db::selectrow_arrayref. Currently the first
call doesn't record the true location. That may change.
.PP
\&\fB!Caller\fR
.PP
Use a string showing the filename and line number of the code calling the method.
.PP
\&\fB!Caller2\fR
.PP
Use a string showing the filename and line number of the code calling the
method, as for !Caller, but also include filename and line number of the code
that called that. Calls from \s-1DBI::\s0 and \s-1DBD::\s0 packages are skipped.
.PP
\&\fB!File\fR
.PP
Same as !Caller above except that only the filename is included, not the line number.
.PP
\&\fB!File2\fR
.PP
Same as !Caller2 above except that only the filenames are included, not the line number.
.PP
\&\fB!Time\fR
.PP
Use the current value of \fItime()\fR. Rarely used. See the more useful \f(CW\*(C`!Time~N\*(C'\fR below.
.PP
\&\fB!Time~N\fR
.PP
Where \f(CW\*(C`N\*(C'\fR is an integer. Use the current value of \fItime()\fR but with reduced precision.
The value used is determined in this way:
.PP
.Vb 1
\&    int( time() / N ) * N
.Ve
.PP
This is a useful way to segregate a profile into time slots. For example:
.PP
.Vb 1
\&    [ \*(Aq!Time~60\*(Aq, \*(Aq!Statement\*(Aq ]
.Ve
.PP
\fICode Reference\fR
.IX Subsection "Code Reference"
.PP
The subroutine is passed the handle it was called on and the \s-1DBI\s0 method name.
The current Statement is in \f(CW$_\fR. The statement string should not be modified,
so most subs start with \f(CW\*(C`local $_ = $_;\*(C'\fR.
.PP
The list of values it returns is used at that point in the Profile Path.
.PP
The sub can 'veto' (reject) a profile sample by including a reference to undef
in the returned list. That can be useful when you want to only profile
statements that match a certain pattern, or only profile certain methods.
.PP
\fISubroutine Specifier\fR
.IX Subsection "Subroutine Specifier"
.PP
A Path element that begins with '\f(CW\*(C`&\*(C'\fR' is treated as the name of a subroutine
in the DBI::ProfileSubs namespace and replaced with the corresponding code reference.
.PP
Currently this only works when the Path is specified by the \f(CW\*(C`DBI_PROFILE\*(C'\fR
environment variable.
.PP
Also, currently, the only subroutine in the DBI::ProfileSubs namespace is
\&\f(CW\*(Aq&norm_std_n3\*(Aq\fR. That's a very handy subroutine when profiling code that
doesn't use placeholders. See DBI::ProfileSubs for more information.
.PP
\fIAttribute Specifier\fR
.IX Subsection "Attribute Specifier"
.PP
A string enclosed in braces, such as '\f(CW\*(C`{Username}\*(C'\fR', specifies that the current
value of the corresponding database handle attribute should be used at that
point in the Path.
.PP
\fIReference to a Scalar\fR
.IX Subsection "Reference to a Scalar"
.PP
Specifies that the current value of the referenced scalar be used at that point
in the Path.  This provides an efficient way to get 'contextual' values into
your profile.
.PP
\fIOther Values\fR
.IX Subsection "Other Values"
.PP
Any other values are stringified and used literally.
.PP
(References, and values that begin with punctuation characters are reserved.)
.SH "REPORTING"
.IX Header "REPORTING"
.SS "Report Format"
.IX Subsection "Report Format"
The current accumulated profile data can be formatted and output using
.PP
.Vb 1
\&    print $h\->{Profile}\->format;
.Ve
.PP
To discard the profile data and start collecting fresh data
you can do:
.PP
.Vb 1
\&    $h\->{Profile}\->{Data} = undef;
.Ve
.PP
The default results format looks like this:
.PP
.Vb 5
\&  DBI::Profile: 0.001015s 42.7% (5 calls) programname @ YYYY\-MM\-DD HH:MM:SS
\&  \*(Aq\*(Aq =>
\&      0.000024s / 2 = 0.000012s avg (first 0.000015s, min 0.000009s, max 0.000015s)
\&  \*(AqSELECT mode,size,name FROM table\*(Aq =>
\&      0.000991s / 3 = 0.000330s avg (first 0.000678s, min 0.000009s, max 0.000678s)
.Ve
.PP
Which shows the total time spent inside the \s-1DBI,\s0 with a count of
the total number of method calls and the name of the script being
run, then a formatted version of the profile data tree.
.PP
If the results are being formatted when the perl process is exiting
(which is usually the case when the \s-1DBI_PROFILE\s0 environment variable
is used) then the percentage of time the process spent inside the
\&\s-1DBI\s0 is also shown. If the process is not exiting then the percentage is
calculated using the time between the first and last call to the \s-1DBI.\s0
.PP
In the example above the paths in the tree are only one level deep and
use the Statement text as the value (that's the default behaviour).
.PP
The merged profile data at the 'leaves' of the tree are presented
as total time spent, count, average time spent (which is simply total
time divided by the count), then the time spent on the first call,
the time spent on the fastest call, and finally the time spent on
the slowest call.
.PP
The 'avg', 'first', 'min' and 'max' times are not particularly
useful when the profile data path only contains the statement text.
Here's an extract of a more detailed example using both statement
text and method name in the path:
.PP
.Vb 5
\&  \*(AqSELECT mode,size,name FROM table\*(Aq =>
\&      \*(AqFETCH\*(Aq =>
\&          0.000076s
\&      \*(Aqfetchrow_hashref\*(Aq =>
\&          0.036203s / 108 = 0.000335s avg (first 0.000490s, min 0.000152s, max 0.002786s)
.Ve
.PP
Here you can see the 'avg', 'first', 'min' and 'max' for the
108 calls to \fIfetchrow_hashref()\fR become rather more interesting.
Also the data for \s-1FETCH\s0 just shows a time value because it was only
called once.
.PP
Currently the profile data is output sorted by branch names. That
may change in a later version so the leaf nodes are sorted by total
time per leaf node.
.SS "Report Destination"
.IX Subsection "Report Destination"
The default method of reporting is for the \s-1DESTROY\s0 method of the
Profile object to format the results and write them using:
.PP
.Vb 1
\&    DBI\->trace_msg($results, 0);  # see $ON_DESTROY_DUMP below
.Ve
.PP
to write them to the \s-1DBI\s0 \fItrace()\fR filehandle (which defaults to
\&\s-1STDERR\s0). To direct the \s-1DBI\s0 trace filehandle to write to a file
without enabling tracing the \fItrace()\fR method can be called with a
trace level of 0. For example:
.PP
.Vb 1
\&    DBI\->trace(0, $filename);
.Ve
.PP
The same effect can be achieved without changing the code by
setting the \f(CW\*(C`DBI_TRACE\*(C'\fR environment variable to \f(CW\*(C`0=filename\*(C'\fR.
.PP
The \f(CW$DBI::Profile::ON_DESTROY_DUMP\fR variable holds a code ref
that's called to perform the output of the formatted results.
The default value is:
.PP
.Vb 1
\&  $ON_DESTROY_DUMP = sub { DBI\->trace_msg($results, 0) };
.Ve
.PP
Apart from making it easy to send the dump elsewhere, it can also
be useful as a simple way to disable dumping results.
.SH "CHILD HANDLES"
.IX Header "CHILD HANDLES"
Child handles inherit a reference to the Profile attribute value
of their parent.  So if profiling is enabled for a database handle
then by default the statement handles created from it all contribute
to the same merged profile data tree.
.SH "PROFILE OBJECT METHODS"
.IX Header "PROFILE OBJECT METHODS"
.SS "format"
.IX Subsection "format"
See \*(L"\s-1REPORTING\*(R"\s0.
.SS "as_node_path_list"
.IX Subsection "as_node_path_list"
.Vb 2
\&  @ary = $dbh\->{Profile}\->as_node_path_list();
\&  @ary = $dbh\->{Profile}\->as_node_path_list($node, $path);
.Ve
.PP
Returns the collected data ($dbh\->{Profile}{Data}) restructured into a list of
array refs, one for each leaf node in the Data tree. This 'flat' structure is
often much simpler for applications to work with.
.PP
The first element of each array ref is a reference to the leaf node.
The remaining elements are the 'path' through the data tree to that node.
.PP
For example, given a data tree like this:
.PP
.Vb 3
\&    {key1a}{key2a}[node1]
\&    {key1a}{key2b}[node2]
\&    {key1b}{key2a}{key3a}[node3]
.Ve
.PP
The \fIas_node_path_list()\fR method  will return this list:
.PP
.Vb 3
\&    [ [node1], \*(Aqkey1a\*(Aq, \*(Aqkey2a\*(Aq ]
\&    [ [node2], \*(Aqkey1a\*(Aq, \*(Aqkey2b\*(Aq ]
\&    [ [node3], \*(Aqkey1b\*(Aq, \*(Aqkey2a\*(Aq, \*(Aqkey3a\*(Aq ]
.Ve
.PP
The nodes are ordered by key, depth-first.
.PP
The \f(CW$node\fR argument can be used to focus on a sub-tree.
If not specified it defaults to \f(CW$dbh\fR\->{Profile}{Data}.
.PP
The \f(CW$path\fR argument can be used to specify a list of path elements that will be
added to each element of the returned list. If not specified it defaults to a
ref to an empty array.
.SS "as_text"
.IX Subsection "as_text"
.Vb 8
\&  @txt = $dbh\->{Profile}\->as_text();
\&  $txt = $dbh\->{Profile}\->as_text({
\&      node      => undef,
\&      path      => [],
\&      separator => " > ",
\&      format    => \*(Aq%1$s: %11$fs / %10$d = %2$fs avg (first %12$fs, min %13$fs, max %14$fs)\*(Aq."\en";
\&      sortsub   => sub { ... },
\&  );
.Ve
.PP
Returns the collected data ($dbh\->{Profile}{Data}) reformatted into a list of formatted strings.
In scalar context the list is returned as a single concatenated string.
.PP
A hashref can be used to pass in arguments, the default values are shown in the example above.
.PP
The \f(CW\*(C`node\*(C'\fR and <path> arguments are passed to \fIas_node_path_list()\fR.
.PP
The \f(CW\*(C`separator\*(C'\fR argument is used to join the elements of the path for each leaf node.
.PP
The \f(CW\*(C`sortsub\*(C'\fR argument is used to pass in a ref to a sub that will order the list.
The subroutine will be passed a reference to the array returned by
\&\fIas_node_path_list()\fR and should sort the contents of the array in place.
The return value from the sub is ignored. For example, to sort the nodes by the
second level key you could use:
.PP
.Vb 1
\&  sortsub => sub { my $ary=shift; @$ary = sort { $a\->[2] cmp $b\->[2] } @$ary }
.Ve
.PP
The \f(CW\*(C`format\*(C'\fR argument is a \f(CW\*(C`sprintf\*(C'\fR format string that specifies the format
to use for each leaf node.  It uses the explicit format parameter index
mechanism to specify which of the arguments should appear where in the string.
The arguments to sprintf are:
.PP
.Vb 10
\&     1:  path to node, joined with the separator
\&     2:  average duration (total duration/count)
\&         (3 thru 9 are currently unused)
\&    10:  count
\&    11:  total duration
\&    12:  first duration
\&    13:  smallest duration
\&    14:  largest duration
\&    15:  time of first call
\&    16:  time of first call
.Ve
.SH "CUSTOM DATA MANIPULATION"
.IX Header "CUSTOM DATA MANIPULATION"
Recall that \f(CW\*(C`$h\->{Profile}\->{Data}\*(C'\fR is a reference to the collected data.
Either to a 'leaf' array (when the Path is empty, i.e., \s-1DBI_PROFILE\s0 env var is 1),
or a reference to hash containing values that are either further hash
references or leaf array references.
.PP
Sometimes it's useful to be able to summarise some or all of the collected data.
The \fIdbi_profile_merge_nodes()\fR function can be used to merge leaf node values.
.SS "dbi_profile_merge_nodes"
.IX Subsection "dbi_profile_merge_nodes"
.Vb 1
\&  use DBI qw(dbi_profile_merge_nodes);
\&
\&  $time_in_dbi = dbi_profile_merge_nodes(my $totals=[], @$leaves);
.Ve
.PP
Merges profile data node. Given a reference to a destination array, and zero or
more references to profile data, merges the profile data into the destination array.
For example:
.PP
.Vb 5
\&  $time_in_dbi = dbi_profile_merge_nodes(
\&      my $totals=[],
\&      [ 10, 0.51, 0.11, 0.01, 0.22, 1023110000, 1023110010 ],
\&      [ 15, 0.42, 0.12, 0.02, 0.23, 1023110005, 1023110009 ],
\&  );
.Ve
.PP
\&\f(CW$totals\fR will then contain
.PP
.Vb 1
\&  [ 25, 0.93, 0.11, 0.01, 0.23, 1023110000, 1023110010 ]
.Ve
.PP
and \f(CW$time_in_dbi\fR will be 0.93;
.PP
The second argument need not be just leaf nodes. If given a reference to a hash
then the hash is recursively searched for leaf nodes and all those found
are merged.
.PP
For example, to get the time spent 'inside' the \s-1DBI\s0 during an http request,
your logging code run at the end of the request (i.e. mod_perl LogHandler)
could use:
.PP
.Vb 5
\&  my $time_in_dbi = 0;
\&  if (my $Profile = $dbh\->{Profile}) { # if DBI profiling is enabled
\&      $time_in_dbi = dbi_profile_merge_nodes(my $total=[], $Profile\->{Data});
\&      $Profile\->{Data} = {}; # reset the profile data
\&  }
.Ve
.PP
If profiling has been enabled then \f(CW$time_in_dbi\fR will hold the time spent inside
the \s-1DBI\s0 for that handle (and any other handles that share the same profile data)
since the last request.
.PP
Prior to \s-1DBI 1.56\s0 the \fIdbi_profile_merge_nodes()\fR function was called \fIdbi_profile_merge()\fR.
That name still exists as an alias.
.SH "CUSTOM DATA COLLECTION"
.IX Header "CUSTOM DATA COLLECTION"
.SS "Using The Path Attribute"
.IX Subsection "Using The Path Attribute"
.Vb 6
\&  XXX example to be added later using a selectall_arrayref call
\&  XXX nested inside a fetch loop where the first column of the
\&  XXX outer loop is bound to the profile Path using
\&  XXX bind_column(1, \e${ $dbh\->{Profile}\->{Path}\->[0] })
\&  XXX so you end up with separate profiles for each loop
\&  XXX (patches welcome to add this to the docs :)
.Ve
.SS "Adding Your Own Samples"
.IX Subsection "Adding Your Own Samples"
The \fIdbi_profile()\fR function can be used to add extra sample data
into the profile data tree. For example:
.PP
.Vb 2
\&    use DBI;
\&    use DBI::Profile (dbi_profile dbi_time);
\&
\&    my $t1 = dbi_time(); # floating point high\-resolution time
\&
\&    ... execute code you want to profile here ...
\&
\&    my $t2 = dbi_time();
\&    dbi_profile($h, $statement, $method, $t1, $t2);
.Ve
.PP
The \f(CW$h\fR parameter is the handle the extra profile sample should be
associated with. The \f(CW$statement\fR parameter is the string to use where
the Path specifies !Statement. If \f(CW$statement\fR is undef
then \f(CW$h\fR\->{Statement} will be used. Similarly \f(CW$method\fR is the string
to use if the Path specifies !MethodName. There is no
default value for \f(CW$method\fR.
.PP
The \f(CW$h\fR\->{Profile}{Path} attribute is processed by \fIdbi_profile()\fR in
the usual way.
.PP
The \f(CW$h\fR parameter is usually a \s-1DBI\s0 handle but it can also be a reference to a
hash, in which case the \fIdbi_profile()\fR acts on each defined value in the hash.
This is an efficient way to update multiple profiles with a single sample,
and is used by the DashProfiler module.
.SH "SUBCLASSING"
.IX Header "SUBCLASSING"
Alternate profile modules must subclass DBI::Profile to help ensure
they work with future versions of the \s-1DBI.\s0
.SH "CAVEATS"
.IX Header "CAVEATS"
Applications which generate many different statement strings
(typically because they don't use placeholders) and profile with
!Statement in the Path (the default) will consume memory
in the Profile Data structure for each statement. Use a code ref
in the Path to return an edited (simplified) form of the statement.
.PP
If a method throws an exception itself (not via RaiseError) then
it won't be counted in the profile.
.PP
If a HandleError subroutine throws an exception (rather than returning
0 and letting RaiseError do it) then the method call won't be counted
in the profile.
.PP
Time spent in \s-1DESTROY\s0 is added to the profile of the parent handle.
.PP
Time spent in \s-1DBI\-\s0>*() methods is not counted. The time spent in
the driver connect method, \f(CW$drh\fR\->\fIconnect()\fR, when it's called by
\&\s-1DBI\-\s0>connect is counted if the \s-1DBI_PROFILE\s0 environment variable is set.
.PP
Time spent fetching tied variables, \f(CW$DBI::errstr\fR, is counted.
.PP
Time spent in \s-1FETCH\s0 for \f(CW$h\fR\->{Profile} is not counted, so getting the profile
data doesn't alter it.
.PP
DBI::PurePerl does not support profiling (though it could in theory).
.PP
For asynchronous queries, time spent while the query is running on the
backend is not counted.
.PP
A few platforms don't support the \fIgettimeofday()\fR high resolution
time function used by the \s-1DBI \s0(and available via the \fIdbi_time()\fR function).
In which case you'll get integer resolution time which is mostly useless.
.PP
On Windows platforms the \fIdbi_time()\fR function is limited to millisecond
resolution. Which isn't sufficiently fine for our needs, but still
much better than integer resolution. This limited resolution means
that fast method calls will often register as taking 0 time. And
timings in general will have much more 'jitter' depending on where
within the 'current millisecond' the start and end timing was taken.
.PP
This documentation could be more clear. Probably needs to be reordered
to start with several examples and build from there.  Trying to
explain the concepts first seems painful and to lead to just as
many forward references.  (Patches welcome!)
                                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileData.3pm                         0100644 0001750 0001750 00000035416 12566241601 024202  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileData 3"
.TH DBI::ProfileData 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileData \- manipulate DBI::ProfileDumper data dumps
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The easiest way to use this module is through the dbiprof frontend
(see dbiprof for details):
.PP
.Vb 1
\&  dbiprof \-\-number 15 \-\-sort count
.Ve
.PP
This module can also be used to roll your own profile analysis:
.PP
.Vb 2
\&  # load data from dbi.prof
\&  $prof = DBI::ProfileData\->new(File => "dbi.prof");
\&
\&  # get a count of the records (unique paths) in the data set
\&  $count = $prof\->count();
\&
\&  # sort by longest overall time
\&  $prof\->sort(field => "longest");
\&
\&  # sort by longest overall time, least to greatest
\&  $prof\->sort(field => "longest", reverse => 1);
\&
\&  # exclude records with key2 eq \*(Aqdisconnect\*(Aq
\&  $prof\->exclude(key2 => \*(Aqdisconnect\*(Aq);
\&
\&  # exclude records with key1 matching /^UPDATE/i
\&  $prof\->exclude(key1 => qr/^UPDATE/i);
\&
\&  # remove all records except those where key1 matches /^SELECT/i
\&  $prof\->match(key1 => qr/^SELECT/i);
\&
\&  # produce a formatted report with the given number of items
\&  $report = $prof\->report(number => 10);
\&
\&  # clone the profile data set
\&  $clone = $prof\->clone();
\&
\&  # get access to hash of header values
\&  $header = $prof\->header();
\&
\&  # get access to sorted array of nodes
\&  $nodes = $prof\->nodes();
\&
\&  # format a single node in the same style as report()
\&  $text = $prof\->format($nodes\->[0]);
\&
\&  # get access to Data hash in DBI::Profile format
\&  $Data = $prof\->Data();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module offers the ability to read, manipulate and format
DBI::ProfileDumper profile data.
.PP
Conceptually, a profile consists of a series of records, or nodes,
each of each has a set of statistics and set of keys.  Each record
must have a unique set of keys, but there is no requirement that every
record have the same number of keys.
.SH "METHODS"
.IX Header "METHODS"
The following methods are supported by DBI::ProfileData objects.
.ie n .SS "$prof = DBI::ProfileData\->new(File => ""dbi.prof"")"
.el .SS "\f(CW$prof\fP = DBI::ProfileData\->new(File => ``dbi.prof'')"
.IX Subsection "$prof = DBI::ProfileData->new(File => dbi.prof)"
.ie n .SS "$prof = DBI::ProfileData\->new(File => ""dbi.prof"", Filter => sub { ... })"
.el .SS "\f(CW$prof\fP = DBI::ProfileData\->new(File => ``dbi.prof'', Filter => sub { ... })"
.IX Subsection "$prof = DBI::ProfileData->new(File => dbi.prof, Filter => sub { ... })"
.ie n .SS "$prof = DBI::ProfileData\->new(Files => [ ""dbi.prof.1"", ""dbi.prof.2"" ])"
.el .SS "\f(CW$prof\fP = DBI::ProfileData\->new(Files => [ ``dbi.prof.1'', ``dbi.prof.2'' ])"
.IX Subsection "$prof = DBI::ProfileData->new(Files => [ dbi.prof.1, dbi.prof.2 ])"
Creates a new DBI::ProfileData object.  Takes either a single file
through the File option or a list of Files in an array ref.  If
multiple files are specified then the header data from the first file
is used.
.PP
\fIFiles\fR
.IX Subsection "Files"
.PP
Reference to an array of file names to read.
.PP
\fIFile\fR
.IX Subsection "File"
.PP
Name of file to read. Takes precedence over \f(CW\*(C`Files\*(C'\fR.
.PP
\fIDeleteFiles\fR
.IX Subsection "DeleteFiles"
.PP
If true, the files are deleted after being read.
.PP
Actually the files are renamed with a C.deleteme> suffix before being read,
and then, after reading all the files, they're all deleted together.
.PP
The files are locked while being read which, combined with the rename, makes it
safe to 'consume' files that are still being generated by DBI::ProfileDumper.
.PP
\fIFilter\fR
.IX Subsection "Filter"
.PP
The \f(CW\*(C`Filter\*(C'\fR parameter can be used to supply a code reference that can
manipulate the profile data as it is being read. This is most useful for
editing \s-1SQL\s0 statements so that slightly different statements in the raw data
will be merged and aggregated in the loaded data. For example:
.PP
.Vb 4
\&  Filter => sub {
\&      my ($path_ref, $data_ref) = @_;
\&      s/foo = \*(Aq.*?\*(Aq/foo = \*(Aq...\*(Aq/ for @$path_ref;
\&  }
.Ve
.PP
Here's an example that performs some normalization on the \s-1SQL.\s0 It converts all
numbers to \f(CW\*(C`N\*(C'\fR and all quoted strings to \f(CW\*(C`S\*(C'\fR.  It can also convert digits to
N within names. Finally, it summarizes long \*(L"\s-1IN \s0(...)\*(R" clauses.
.PP
It's aggressive and simplistic, but it's often sufficient, and serves as an
example that you can tailor to suit your own needs:
.PP
.Vb 12
\&  Filter => sub {
\&      my ($path_ref, $data_ref) = @_;
\&      local $_ = $path_ref\->[0]; # whichever element contains the SQL Statement
\&      s/\eb\ed+\eb/N/g;             # 42 \-> N
\&      s/\eb0x[0\-9A\-Fa\-f]+\eb/N/g;  # 0xFE \-> N
\&      s/\*(Aq.*?\*(Aq/\*(AqS\*(Aq/g;             # single quoted strings (doesn\*(Aqt handle escapes)
\&      s/".*?"/"S"/g;             # double quoted strings (doesn\*(Aqt handle escapes)
\&      # convert names like log_20001231 into log_NNNNNNNN, controlled by $opt{n}
\&      s/([a\-z_]+)(\ed{$opt{n},})/$1.(\*(AqN\*(Aq x length($2))/ieg if $opt{n};
\&      # abbreviate massive "in (...)" statements and similar
\&      s!(([NS],){100,})!sprintf("$2,{repeated %d times}",length($1)/2)!eg;
\&  }
.Ve
.PP
It's often better to perform this kinds of normalization in the \s-1DBI\s0 while the
data is being collected, to avoid too much memory being used by storing profile
data for many different \s-1SQL\s0 statement. See DBI::Profile.
.ie n .SS "$copy = $prof\->\fIclone()\fP;"
.el .SS "\f(CW$copy\fP = \f(CW$prof\fP\->\fIclone()\fP;"
.IX Subsection "$copy = $prof->clone();"
Clone a profile data set creating a new object.
.ie n .SS "$header = $prof\->\fIheader()\fP;"
.el .SS "\f(CW$header\fP = \f(CW$prof\fP\->\fIheader()\fP;"
.IX Subsection "$header = $prof->header();"
Returns a reference to a hash of header values.  These are the key
value pairs included in the header section of the DBI::ProfileDumper
data format.  For example:
.PP
.Vb 4
\&  $header = {
\&    Path    => [ \*(Aq!Statement\*(Aq, \*(Aq!MethodName\*(Aq ],
\&    Program => \*(Aqt/42profile_data.t\*(Aq,
\&  };
.Ve
.PP
Note that modifying this hash will modify the header data stored
inside the profile object.
.ie n .SS "$nodes = $prof\->\fInodes()\fP"
.el .SS "\f(CW$nodes\fP = \f(CW$prof\fP\->\fInodes()\fP"
.IX Subsection "$nodes = $prof->nodes()"
Returns a reference the sorted nodes array.  Each element in the array
is a single record in the data set.  The first seven elements are the
same as the elements provided by DBI::Profile.  After that each key is
in a separate element.  For example:
.PP
.Vb 10
\& $nodes = [
\&            [
\&              2,                      # 0, count
\&              0.0312958955764771,     # 1, total duration
\&              0.000490069389343262,   # 2, first duration
\&              0.000176072120666504,   # 3, shortest duration
\&              0.00140702724456787,    # 4, longest duration
\&              1023115819.83019,       # 5, time of first event
\&              1023115819.86576,       # 6, time of last event
\&              \*(AqSELECT foo FROM bar\*(Aq   # 7, key1
\&              \*(Aqexecute\*(Aq               # 8, key2
\&                                      # 6+N, keyN
\&            ],
\&                                      # ...
\&          ];
.Ve
.PP
Note that modifying this array will modify the node data stored inside
the profile object.
.ie n .SS "$count = $prof\->\fIcount()\fP"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->\fIcount()\fP"
.IX Subsection "$count = $prof->count()"
Returns the number of items in the profile data set.
.ie n .SS "$prof\->sort(field => ""field"")"
.el .SS "\f(CW$prof\fP\->sort(field => ``field'')"
.IX Subsection "$prof->sort(field => field)"
.ie n .SS "$prof\->sort(field => ""field"", reverse => 1)"
.el .SS "\f(CW$prof\fP\->sort(field => ``field'', reverse => 1)"
.IX Subsection "$prof->sort(field => field, reverse => 1)"
Sorts data by the given field.  Available fields are:
.PP
.Vb 4
\&  longest
\&  total
\&  count
\&  shortest
.Ve
.PP
The default sort is greatest to smallest, which is the opposite of the
normal Perl meaning.  This, however, matches the expected behavior of
the dbiprof frontend.
.ie n .SS "$count = $prof\->exclude(key2 => ""disconnect"")"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->exclude(key2 => ``disconnect'')"
.IX Subsection "$count = $prof->exclude(key2 => disconnect)"
.ie n .SS "$count = $prof\->exclude(key2 => ""disconnect"", case_sensitive => 1)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->exclude(key2 => ``disconnect'', case_sensitive => 1)"
.IX Subsection "$count = $prof->exclude(key2 => disconnect, case_sensitive => 1)"
.ie n .SS "$count = $prof\->exclude(key1 => qr/^SELECT/i)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->exclude(key1 => qr/^SELECT/i)"
.IX Subsection "$count = $prof->exclude(key1 => qr/^SELECT/i)"
Removes records from the data set that match the given string or
regular expression.  This method modifies the data in a permanent
fashion \- use \fIclone()\fR first to maintain the original data after
\&\fIexclude()\fR.  Returns the number of nodes left in the profile data set.
.ie n .SS "$count = $prof\->match(key2 => ""disconnect"")"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->match(key2 => ``disconnect'')"
.IX Subsection "$count = $prof->match(key2 => disconnect)"
.ie n .SS "$count = $prof\->match(key2 => ""disconnect"", case_sensitive => 1)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->match(key2 => ``disconnect'', case_sensitive => 1)"
.IX Subsection "$count = $prof->match(key2 => disconnect, case_sensitive => 1)"
.ie n .SS "$count = $prof\->match(key1 => qr/^SELECT/i)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->match(key1 => qr/^SELECT/i)"
.IX Subsection "$count = $prof->match(key1 => qr/^SELECT/i)"
Removes records from the data set that do not match the given string
or regular expression.  This method modifies the data in a permanent
fashion \- use \fIclone()\fR first to maintain the original data after
\&\fImatch()\fR.  Returns the number of nodes left in the profile data set.
.ie n .SS "$Data = $prof\->\fIData()\fP"
.el .SS "\f(CW$Data\fP = \f(CW$prof\fP\->\fIData()\fP"
.IX Subsection "$Data = $prof->Data()"
Returns the same Data hash structure as seen in DBI::Profile.  This
structure is not sorted.  The \fInodes()\fR structure probably makes more
sense for most analysis.
.ie n .SS "$text = $prof\->format($nodes\->[0])"
.el .SS "\f(CW$text\fP = \f(CW$prof\fP\->format($nodes\->[0])"
.IX Subsection "$text = $prof->format($nodes->[0])"
Formats a single node into a human-readable block of text.
.ie n .SS "$text = $prof\->report(number => 10)"
.el .SS "\f(CW$text\fP = \f(CW$prof\fP\->report(number => 10)"
.IX Subsection "$text = $prof->report(number => 10)"
Produces a report with the given number of items.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sam Tregar <sam@tregar.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2002 Sam Tregar
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.
                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileData5.16.3pm                     0100644 0001750 0001750 00000035100 12566241600 024501  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileData 3"
.TH DBI::ProfileData 3 "2007-09-27" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileData \- manipulate DBI::ProfileDumper data dumps
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The easiest way to use this module is through the dbiprof frontend
(see dbiprof for details):
.PP
.Vb 1
\&  dbiprof \-\-number 15 \-\-sort count
.Ve
.PP
This module can also be used to roll your own profile analysis:
.PP
.Vb 2
\&  # load data from dbi.prof
\&  $prof = DBI::ProfileData\->new(File => "dbi.prof");
\&
\&  # get a count of the records (unique paths) in the data set
\&  $count = $prof\->count();
\&
\&  # sort by longest overall time
\&  $prof\->sort(field => "longest");
\&
\&  # sort by longest overall time, least to greatest
\&  $prof\->sort(field => "longest", reverse => 1);
\&
\&  # exclude records with key2 eq \*(Aqdisconnect\*(Aq
\&  $prof\->exclude(key2 => \*(Aqdisconnect\*(Aq);
\&
\&  # exclude records with key1 matching /^UPDATE/i
\&  $prof\->exclude(key1 => qr/^UPDATE/i);
\&
\&  # remove all records except those where key1 matches /^SELECT/i
\&  $prof\->match(key1 => qr/^SELECT/i);
\&
\&  # produce a formatted report with the given number of items
\&  $report = $prof\->report(number => 10); 
\&
\&  # clone the profile data set
\&  $clone = $prof\->clone();
\&
\&  # get access to hash of header values
\&  $header = $prof\->header();
\&
\&  # get access to sorted array of nodes
\&  $nodes = $prof\->nodes();
\&
\&  # format a single node in the same style as report()
\&  $text = $prof\->format($nodes\->[0]);
\&
\&  # get access to Data hash in DBI::Profile format
\&  $Data = $prof\->Data();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module offers the ability to read, manipulate and format
DBI::ProfileDumper profile data.
.PP
Conceptually, a profile consists of a series of records, or nodes,
each of each has a set of statistics and set of keys.  Each record
must have a unique set of keys, but there is no requirement that every
record have the same number of keys.
.SH "METHODS"
.IX Header "METHODS"
The following methods are supported by DBI::ProfileData objects.
.ie n .SS "$prof = DBI::ProfileData\->new(File => ""dbi.prof"")"
.el .SS "\f(CW$prof\fP = DBI::ProfileData\->new(File => ``dbi.prof'')"
.IX Subsection "$prof = DBI::ProfileData->new(File => dbi.prof)"
.ie n .SS "$prof = DBI::ProfileData\->new(File => ""dbi.prof"", Filter => sub { ... })"
.el .SS "\f(CW$prof\fP = DBI::ProfileData\->new(File => ``dbi.prof'', Filter => sub { ... })"
.IX Subsection "$prof = DBI::ProfileData->new(File => dbi.prof, Filter => sub { ... })"
.ie n .SS "$prof = DBI::ProfileData\->new(Files => [ ""dbi.prof.1"", ""dbi.prof.2"" ])"
.el .SS "\f(CW$prof\fP = DBI::ProfileData\->new(Files => [ ``dbi.prof.1'', ``dbi.prof.2'' ])"
.IX Subsection "$prof = DBI::ProfileData->new(Files => [ dbi.prof.1, dbi.prof.2 ])"
Creates a a new DBI::ProfileData object.  Takes either a single file
through the File option or a list of Files in an array ref.  If
multiple files are specified then the header data from the first file
is used.
.PP
\fIFiles\fR
.IX Subsection "Files"
.PP
Reference to an array of file names to read.
.PP
\fIFile\fR
.IX Subsection "File"
.PP
Name of file to read. Takes precedence over \f(CW\*(C`Files\*(C'\fR.
.PP
\fIDeleteFiles\fR
.IX Subsection "DeleteFiles"
.PP
If true, the files are deleted after being read.
.PP
Actually the files are renamed with a C.deleteme> suffix before being read,
and then, after reading all the files, they're all deleted together.
.PP
The files are locked while being read which, combined with the rename, makes it
safe to 'consume' files that are still being generated by DBI::ProfileDumper.
.PP
\fIFilter\fR
.IX Subsection "Filter"
.PP
The \f(CW\*(C`Filter\*(C'\fR parameter can be used to supply a code reference that can
manipulate the profile data as it is being read. This is most useful for
editing \s-1SQL\s0 statements so that slightly different statements in the raw data
will be merged and aggregated in the loaded data. For example:
.PP
.Vb 4
\&  Filter => sub {
\&      my ($path_ref, $data_ref) = @_;
\&      s/foo = \*(Aq.*?\*(Aq/foo = \*(Aq...\*(Aq/ for @$path_ref;
\&  }
.Ve
.PP
Here's an example that performs some normalization on the \s-1SQL\s0. It converts all
numbers to \f(CW\*(C`N\*(C'\fR and all quoted strings to \f(CW\*(C`S\*(C'\fR.  It can also convert digits to
N within names. Finally, it summarizes long \*(L"\s-1IN\s0 (...)\*(R" clauses.
.PP
It's aggressive and simplistic, but it's often sufficient, and serves as an
example that you can tailor to suit your own needs:
.PP
.Vb 12
\&  Filter => sub {
\&      my ($path_ref, $data_ref) = @_;
\&      local $_ = $path_ref\->[0]; # whichever element contains the SQL Statement
\&      s/\eb\ed+\eb/N/g;             # 42 \-> N
\&      s/\eb0x[0\-9A\-Fa\-f]+\eb/N/g;  # 0xFE \-> N
\&      s/\*(Aq.*?\*(Aq/\*(AqS\*(Aq/g;             # single quoted strings (doesn\*(Aqt handle escapes)
\&      s/".*?"/"S"/g;             # double quoted strings (doesn\*(Aqt handle escapes)
\&      # convert names like log_20001231 into log_NNNNNNNN, controlled by $opt{n}
\&      s/([a\-z_]+)(\ed{$opt{n},})/$1.(\*(AqN\*(Aq x length($2))/ieg if $opt{n};
\&      # abbreviate massive "in (...)" statements and similar
\&      s!(([NS],){100,})!sprintf("$2,{repeated %d times}",length($1)/2)!eg;
\&  }
.Ve
.PP
It's often better to perform this kinds of normalization in the \s-1DBI\s0 while the
data is being collected, to avoid too much memory being used by storing profile
data for many different \s-1SQL\s0 statement. See DBI::Profile.
.ie n .SS "$copy = $prof\->\fIclone()\fP;"
.el .SS "\f(CW$copy\fP = \f(CW$prof\fP\->\fIclone()\fP;"
.IX Subsection "$copy = $prof->clone();"
Clone a profile data set creating a new object.
.ie n .SS "$header = $prof\->\fIheader()\fP;"
.el .SS "\f(CW$header\fP = \f(CW$prof\fP\->\fIheader()\fP;"
.IX Subsection "$header = $prof->header();"
Returns a reference to a hash of header values.  These are the key
value pairs included in the header section of the DBI::ProfileDumper
data format.  For example:
.PP
.Vb 4
\&  $header = {
\&    Path    => [ \*(Aq!Statement\*(Aq, \*(Aq!MethodName\*(Aq ],
\&    Program => \*(Aqt/42profile_data.t\*(Aq,
\&  };
.Ve
.PP
Note that modifying this hash will modify the header data stored
inside the profile object.
.ie n .SS "$nodes = $prof\->\fInodes()\fP"
.el .SS "\f(CW$nodes\fP = \f(CW$prof\fP\->\fInodes()\fP"
.IX Subsection "$nodes = $prof->nodes()"
Returns a reference the sorted nodes array.  Each element in the array
is a single record in the data set.  The first seven elements are the
same as the elements provided by DBI::Profile.  After that each key is
in a separate element.  For example:
.PP
.Vb 10
\& $nodes = [
\&            [
\&              2,                      # 0, count
\&              0.0312958955764771,     # 1, total duration
\&              0.000490069389343262,   # 2, first duration
\&              0.000176072120666504,   # 3, shortest duration
\&              0.00140702724456787,    # 4, longest duration
\&              1023115819.83019,       # 5, time of first event
\&              1023115819.86576,       # 6, time of last event
\&              \*(AqSELECT foo FROM bar\*(Aq   # 7, key1
\&              \*(Aqexecute\*(Aq               # 8, key2
\&                                      # 6+N, keyN
\&            ],
\&                                      # ...
\&          ];
.Ve
.PP
Note that modifying this array will modify the node data stored inside
the profile object.
.ie n .SS "$count = $prof\->\fIcount()\fP"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->\fIcount()\fP"
.IX Subsection "$count = $prof->count()"
Returns the number of items in the profile data set.
.ie n .SS "$prof\->sort(field => ""field"")"
.el .SS "\f(CW$prof\fP\->sort(field => ``field'')"
.IX Subsection "$prof->sort(field => field)"
.ie n .SS "$prof\->sort(field => ""field"", reverse => 1)"
.el .SS "\f(CW$prof\fP\->sort(field => ``field'', reverse => 1)"
.IX Subsection "$prof->sort(field => field, reverse => 1)"
Sorts data by the given field.  Available fields are:
.PP
.Vb 4
\&  longest
\&  total
\&  count
\&  shortest
.Ve
.PP
The default sort is greatest to smallest, which is the opposite of the
normal Perl meaning.  This, however, matches the expected behavior of
the dbiprof frontend.
.ie n .SS "$count = $prof\->exclude(key2 => ""disconnect"")"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->exclude(key2 => ``disconnect'')"
.IX Subsection "$count = $prof->exclude(key2 => disconnect)"
.ie n .SS "$count = $prof\->exclude(key2 => ""disconnect"", case_sensitive => 1)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->exclude(key2 => ``disconnect'', case_sensitive => 1)"
.IX Subsection "$count = $prof->exclude(key2 => disconnect, case_sensitive => 1)"
.ie n .SS "$count = $prof\->exclude(key1 => qr/^SELECT/i)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->exclude(key1 => qr/^SELECT/i)"
.IX Subsection "$count = $prof->exclude(key1 => qr/^SELECT/i)"
Removes records from the data set that match the given string or
regular expression.  This method modifies the data in a permanent
fashion \- use \fIclone()\fR first to maintain the original data after
\&\fIexclude()\fR.  Returns the number of nodes left in the profile data set.
.ie n .SS "$count = $prof\->match(key2 => ""disconnect"")"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->match(key2 => ``disconnect'')"
.IX Subsection "$count = $prof->match(key2 => disconnect)"
.ie n .SS "$count = $prof\->match(key2 => ""disconnect"", case_sensitive => 1)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->match(key2 => ``disconnect'', case_sensitive => 1)"
.IX Subsection "$count = $prof->match(key2 => disconnect, case_sensitive => 1)"
.ie n .SS "$count = $prof\->match(key1 => qr/^SELECT/i)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->match(key1 => qr/^SELECT/i)"
.IX Subsection "$count = $prof->match(key1 => qr/^SELECT/i)"
Removes records from the data set that do not match the given string
or regular expression.  This method modifies the data in a permanent
fashion \- use \fIclone()\fR first to maintain the original data after
\&\fImatch()\fR.  Returns the number of nodes left in the profile data set.
.ie n .SS "$Data = $prof\->\fIData()\fP"
.el .SS "\f(CW$Data\fP = \f(CW$prof\fP\->\fIData()\fP"
.IX Subsection "$Data = $prof->Data()"
Returns the same Data hash structure as seen in DBI::Profile.  This
structure is not sorted.  The \fInodes()\fR structure probably makes more
sense for most analysis.
.ie n .SS "$text = $prof\->format($nodes\->[0])"
.el .SS "\f(CW$text\fP = \f(CW$prof\fP\->format($nodes\->[0])"
.IX Subsection "$text = $prof->format($nodes->[0])"
Formats a single node into a human-readable block of text.
.ie n .SS "$text = $prof\->report(number => 10)"
.el .SS "\f(CW$text\fP = \f(CW$prof\fP\->report(number => 10)"
.IX Subsection "$text = $prof->report(number => 10)"
Produces a report with the given number of items.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sam Tregar <sam@tregar.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2002 Sam Tregar
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileData5.18.3pm                     0100644 0001750 0001750 00000035416 12566241601 024516  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileData 3"
.TH DBI::ProfileData 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileData \- manipulate DBI::ProfileDumper data dumps
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
The easiest way to use this module is through the dbiprof frontend
(see dbiprof for details):
.PP
.Vb 1
\&  dbiprof \-\-number 15 \-\-sort count
.Ve
.PP
This module can also be used to roll your own profile analysis:
.PP
.Vb 2
\&  # load data from dbi.prof
\&  $prof = DBI::ProfileData\->new(File => "dbi.prof");
\&
\&  # get a count of the records (unique paths) in the data set
\&  $count = $prof\->count();
\&
\&  # sort by longest overall time
\&  $prof\->sort(field => "longest");
\&
\&  # sort by longest overall time, least to greatest
\&  $prof\->sort(field => "longest", reverse => 1);
\&
\&  # exclude records with key2 eq \*(Aqdisconnect\*(Aq
\&  $prof\->exclude(key2 => \*(Aqdisconnect\*(Aq);
\&
\&  # exclude records with key1 matching /^UPDATE/i
\&  $prof\->exclude(key1 => qr/^UPDATE/i);
\&
\&  # remove all records except those where key1 matches /^SELECT/i
\&  $prof\->match(key1 => qr/^SELECT/i);
\&
\&  # produce a formatted report with the given number of items
\&  $report = $prof\->report(number => 10);
\&
\&  # clone the profile data set
\&  $clone = $prof\->clone();
\&
\&  # get access to hash of header values
\&  $header = $prof\->header();
\&
\&  # get access to sorted array of nodes
\&  $nodes = $prof\->nodes();
\&
\&  # format a single node in the same style as report()
\&  $text = $prof\->format($nodes\->[0]);
\&
\&  # get access to Data hash in DBI::Profile format
\&  $Data = $prof\->Data();
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module offers the ability to read, manipulate and format
DBI::ProfileDumper profile data.
.PP
Conceptually, a profile consists of a series of records, or nodes,
each of each has a set of statistics and set of keys.  Each record
must have a unique set of keys, but there is no requirement that every
record have the same number of keys.
.SH "METHODS"
.IX Header "METHODS"
The following methods are supported by DBI::ProfileData objects.
.ie n .SS "$prof = DBI::ProfileData\->new(File => ""dbi.prof"")"
.el .SS "\f(CW$prof\fP = DBI::ProfileData\->new(File => ``dbi.prof'')"
.IX Subsection "$prof = DBI::ProfileData->new(File => dbi.prof)"
.ie n .SS "$prof = DBI::ProfileData\->new(File => ""dbi.prof"", Filter => sub { ... })"
.el .SS "\f(CW$prof\fP = DBI::ProfileData\->new(File => ``dbi.prof'', Filter => sub { ... })"
.IX Subsection "$prof = DBI::ProfileData->new(File => dbi.prof, Filter => sub { ... })"
.ie n .SS "$prof = DBI::ProfileData\->new(Files => [ ""dbi.prof.1"", ""dbi.prof.2"" ])"
.el .SS "\f(CW$prof\fP = DBI::ProfileData\->new(Files => [ ``dbi.prof.1'', ``dbi.prof.2'' ])"
.IX Subsection "$prof = DBI::ProfileData->new(Files => [ dbi.prof.1, dbi.prof.2 ])"
Creates a new DBI::ProfileData object.  Takes either a single file
through the File option or a list of Files in an array ref.  If
multiple files are specified then the header data from the first file
is used.
.PP
\fIFiles\fR
.IX Subsection "Files"
.PP
Reference to an array of file names to read.
.PP
\fIFile\fR
.IX Subsection "File"
.PP
Name of file to read. Takes precedence over \f(CW\*(C`Files\*(C'\fR.
.PP
\fIDeleteFiles\fR
.IX Subsection "DeleteFiles"
.PP
If true, the files are deleted after being read.
.PP
Actually the files are renamed with a C.deleteme> suffix before being read,
and then, after reading all the files, they're all deleted together.
.PP
The files are locked while being read which, combined with the rename, makes it
safe to 'consume' files that are still being generated by DBI::ProfileDumper.
.PP
\fIFilter\fR
.IX Subsection "Filter"
.PP
The \f(CW\*(C`Filter\*(C'\fR parameter can be used to supply a code reference that can
manipulate the profile data as it is being read. This is most useful for
editing \s-1SQL\s0 statements so that slightly different statements in the raw data
will be merged and aggregated in the loaded data. For example:
.PP
.Vb 4
\&  Filter => sub {
\&      my ($path_ref, $data_ref) = @_;
\&      s/foo = \*(Aq.*?\*(Aq/foo = \*(Aq...\*(Aq/ for @$path_ref;
\&  }
.Ve
.PP
Here's an example that performs some normalization on the \s-1SQL.\s0 It converts all
numbers to \f(CW\*(C`N\*(C'\fR and all quoted strings to \f(CW\*(C`S\*(C'\fR.  It can also convert digits to
N within names. Finally, it summarizes long \*(L"\s-1IN \s0(...)\*(R" clauses.
.PP
It's aggressive and simplistic, but it's often sufficient, and serves as an
example that you can tailor to suit your own needs:
.PP
.Vb 12
\&  Filter => sub {
\&      my ($path_ref, $data_ref) = @_;
\&      local $_ = $path_ref\->[0]; # whichever element contains the SQL Statement
\&      s/\eb\ed+\eb/N/g;             # 42 \-> N
\&      s/\eb0x[0\-9A\-Fa\-f]+\eb/N/g;  # 0xFE \-> N
\&      s/\*(Aq.*?\*(Aq/\*(AqS\*(Aq/g;             # single quoted strings (doesn\*(Aqt handle escapes)
\&      s/".*?"/"S"/g;             # double quoted strings (doesn\*(Aqt handle escapes)
\&      # convert names like log_20001231 into log_NNNNNNNN, controlled by $opt{n}
\&      s/([a\-z_]+)(\ed{$opt{n},})/$1.(\*(AqN\*(Aq x length($2))/ieg if $opt{n};
\&      # abbreviate massive "in (...)" statements and similar
\&      s!(([NS],){100,})!sprintf("$2,{repeated %d times}",length($1)/2)!eg;
\&  }
.Ve
.PP
It's often better to perform this kinds of normalization in the \s-1DBI\s0 while the
data is being collected, to avoid too much memory being used by storing profile
data for many different \s-1SQL\s0 statement. See DBI::Profile.
.ie n .SS "$copy = $prof\->\fIclone()\fP;"
.el .SS "\f(CW$copy\fP = \f(CW$prof\fP\->\fIclone()\fP;"
.IX Subsection "$copy = $prof->clone();"
Clone a profile data set creating a new object.
.ie n .SS "$header = $prof\->\fIheader()\fP;"
.el .SS "\f(CW$header\fP = \f(CW$prof\fP\->\fIheader()\fP;"
.IX Subsection "$header = $prof->header();"
Returns a reference to a hash of header values.  These are the key
value pairs included in the header section of the DBI::ProfileDumper
data format.  For example:
.PP
.Vb 4
\&  $header = {
\&    Path    => [ \*(Aq!Statement\*(Aq, \*(Aq!MethodName\*(Aq ],
\&    Program => \*(Aqt/42profile_data.t\*(Aq,
\&  };
.Ve
.PP
Note that modifying this hash will modify the header data stored
inside the profile object.
.ie n .SS "$nodes = $prof\->\fInodes()\fP"
.el .SS "\f(CW$nodes\fP = \f(CW$prof\fP\->\fInodes()\fP"
.IX Subsection "$nodes = $prof->nodes()"
Returns a reference the sorted nodes array.  Each element in the array
is a single record in the data set.  The first seven elements are the
same as the elements provided by DBI::Profile.  After that each key is
in a separate element.  For example:
.PP
.Vb 10
\& $nodes = [
\&            [
\&              2,                      # 0, count
\&              0.0312958955764771,     # 1, total duration
\&              0.000490069389343262,   # 2, first duration
\&              0.000176072120666504,   # 3, shortest duration
\&              0.00140702724456787,    # 4, longest duration
\&              1023115819.83019,       # 5, time of first event
\&              1023115819.86576,       # 6, time of last event
\&              \*(AqSELECT foo FROM bar\*(Aq   # 7, key1
\&              \*(Aqexecute\*(Aq               # 8, key2
\&                                      # 6+N, keyN
\&            ],
\&                                      # ...
\&          ];
.Ve
.PP
Note that modifying this array will modify the node data stored inside
the profile object.
.ie n .SS "$count = $prof\->\fIcount()\fP"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->\fIcount()\fP"
.IX Subsection "$count = $prof->count()"
Returns the number of items in the profile data set.
.ie n .SS "$prof\->sort(field => ""field"")"
.el .SS "\f(CW$prof\fP\->sort(field => ``field'')"
.IX Subsection "$prof->sort(field => field)"
.ie n .SS "$prof\->sort(field => ""field"", reverse => 1)"
.el .SS "\f(CW$prof\fP\->sort(field => ``field'', reverse => 1)"
.IX Subsection "$prof->sort(field => field, reverse => 1)"
Sorts data by the given field.  Available fields are:
.PP
.Vb 4
\&  longest
\&  total
\&  count
\&  shortest
.Ve
.PP
The default sort is greatest to smallest, which is the opposite of the
normal Perl meaning.  This, however, matches the expected behavior of
the dbiprof frontend.
.ie n .SS "$count = $prof\->exclude(key2 => ""disconnect"")"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->exclude(key2 => ``disconnect'')"
.IX Subsection "$count = $prof->exclude(key2 => disconnect)"
.ie n .SS "$count = $prof\->exclude(key2 => ""disconnect"", case_sensitive => 1)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->exclude(key2 => ``disconnect'', case_sensitive => 1)"
.IX Subsection "$count = $prof->exclude(key2 => disconnect, case_sensitive => 1)"
.ie n .SS "$count = $prof\->exclude(key1 => qr/^SELECT/i)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->exclude(key1 => qr/^SELECT/i)"
.IX Subsection "$count = $prof->exclude(key1 => qr/^SELECT/i)"
Removes records from the data set that match the given string or
regular expression.  This method modifies the data in a permanent
fashion \- use \fIclone()\fR first to maintain the original data after
\&\fIexclude()\fR.  Returns the number of nodes left in the profile data set.
.ie n .SS "$count = $prof\->match(key2 => ""disconnect"")"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->match(key2 => ``disconnect'')"
.IX Subsection "$count = $prof->match(key2 => disconnect)"
.ie n .SS "$count = $prof\->match(key2 => ""disconnect"", case_sensitive => 1)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->match(key2 => ``disconnect'', case_sensitive => 1)"
.IX Subsection "$count = $prof->match(key2 => disconnect, case_sensitive => 1)"
.ie n .SS "$count = $prof\->match(key1 => qr/^SELECT/i)"
.el .SS "\f(CW$count\fP = \f(CW$prof\fP\->match(key1 => qr/^SELECT/i)"
.IX Subsection "$count = $prof->match(key1 => qr/^SELECT/i)"
Removes records from the data set that do not match the given string
or regular expression.  This method modifies the data in a permanent
fashion \- use \fIclone()\fR first to maintain the original data after
\&\fImatch()\fR.  Returns the number of nodes left in the profile data set.
.ie n .SS "$Data = $prof\->\fIData()\fP"
.el .SS "\f(CW$Data\fP = \f(CW$prof\fP\->\fIData()\fP"
.IX Subsection "$Data = $prof->Data()"
Returns the same Data hash structure as seen in DBI::Profile.  This
structure is not sorted.  The \fInodes()\fR structure probably makes more
sense for most analysis.
.ie n .SS "$text = $prof\->format($nodes\->[0])"
.el .SS "\f(CW$text\fP = \f(CW$prof\fP\->format($nodes\->[0])"
.IX Subsection "$text = $prof->format($nodes->[0])"
Formats a single node into a human-readable block of text.
.ie n .SS "$text = $prof\->report(number => 10)"
.el .SS "\f(CW$text\fP = \f(CW$prof\fP\->report(number => 10)"
.IX Subsection "$text = $prof->report(number => 10)"
Produces a report with the given number of items.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sam Tregar <sam@tregar.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2002 Sam Tregar
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.
                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileDumper.3pm                       0100644 0001750 0001750 00000024161 12566241600 024557  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileDumper 3"
.TH DBI::ProfileDumper 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileDumper \- profile DBI usage and output data to a file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To profile an existing program using DBI::ProfileDumper, set the
\&\s-1DBI_PROFILE\s0 environment variable and run your program as usual.  For
example, using bash:
.PP
.Vb 1
\&  DBI_PROFILE=2/DBI::ProfileDumper program.pl
.Ve
.PP
Then analyze the generated file (\fIdbi.prof\fR) with dbiprof:
.PP
.Vb 1
\&  dbiprof
.Ve
.PP
You can also activate DBI::ProfileDumper from within your code:
.PP
.Vb 1
\&  use DBI;
\&
\&  # profile with default path (2) and output file (dbi.prof)
\&  $dbh\->{Profile} = "!Statement/DBI::ProfileDumper";
\&
\&  # same thing, spelled out
\&  $dbh\->{Profile} = "!Statement/DBI::ProfileDumper/File:dbi.prof";
\&
\&  # another way to say it
\&  use DBI::ProfileDumper;
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&                        Path => [ \*(Aq!Statement\*(Aq ],
\&                        File => \*(Aqdbi.prof\*(Aq );
\&
\&  # using a custom path
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&      Path => [ "foo", "bar" ],
\&      File => \*(Aqdbi.prof\*(Aq,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBI::ProfileDumper is a subclass of DBI::Profile which
dumps profile data to disk instead of printing a summary to your
screen.  You can then use dbiprof to analyze the data in
a number of interesting ways, or you can roll your own analysis using
DBI::ProfileData.
.PP
\&\fB\s-1NOTE:\s0\fR For Apache/mod_perl applications, use
DBI::ProfileDumper::Apache.
.SH "USAGE"
.IX Header "USAGE"
One way to use this module is just to enable it in your \f(CW$dbh\fR:
.PP
.Vb 1
\&  $dbh\->{Profile} = "1/DBI::ProfileDumper";
.Ve
.PP
This will write out profile data by statement into a file called
\&\fIdbi.prof\fR.  If you want to modify either of these properties, you
can construct the DBI::ProfileDumper object yourself:
.PP
.Vb 5
\&  use DBI::ProfileDumper;
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&      Path => [ \*(Aq!Statement\*(Aq ],
\&      File => \*(Aqdbi.prof\*(Aq
\&  );
.Ve
.PP
The \f(CW\*(C`Path\*(C'\fR option takes the same values as in
DBI::Profile.  The \f(CW\*(C`File\*(C'\fR option gives the name of the
file where results will be collected.  If it already exists it will be
overwritten.
.PP
You can also activate this module by setting the \s-1DBI_PROFILE\s0
environment variable:
.PP
.Vb 1
\&  $ENV{DBI_PROFILE} = "!Statement/DBI::ProfileDumper";
.Ve
.PP
This will cause all \s-1DBI\s0 handles to share the same profiling object.
.SH "METHODS"
.IX Header "METHODS"
The following methods are available to be called using the profile
object.  You can get access to the profile object from the Profile key
in any \s-1DBI\s0 handle:
.PP
.Vb 1
\&  my $profile = $dbh\->{Profile};
.Ve
.SS "flush_to_disk"
.IX Subsection "flush_to_disk"
.Vb 1
\&  $profile\->flush_to_disk()
.Ve
.PP
Flushes all collected profile data to disk and empties the Data hash.  Returns
the filename written to.  If no profile data has been collected then the file is
not written and \fIflush_to_disk()\fR returns undef.
.PP
The file is locked while it's being written. A process 'consuming' the files
while they're being written to, should rename the file first, then lock it,
then read it, then close and delete it. The \f(CW\*(C`DeleteFiles\*(C'\fR option to
DBI::ProfileData does the right thing.
.PP
This method may be called multiple times during a program run.
.SS "empty"
.IX Subsection "empty"
.Vb 1
\&  $profile\->empty()
.Ve
.PP
Clears the Data hash without writing to disk.
.SS "filename"
.IX Subsection "filename"
.Vb 1
\&  $filename = $profile\->filename();
.Ve
.PP
Get or set the filename.
.PP
The filename can be specified as a \s-1CODE\s0 reference, in which case the referenced
code should return the filename to be used. The code will be called with the
profile object as its first argument.
.SH "DATA FORMAT"
.IX Header "DATA FORMAT"
The data format written by DBI::ProfileDumper starts with a header
containing the version number of the module used to generate it.  Then
a block of variable declarations describes the profile.  After two
newlines, the profile data forms the body of the file.  For example:
.PP
.Vb 3
\&  DBI::ProfileDumper 2.003762
\&  Path = [ \*(Aq!Statement\*(Aq, \*(Aq!MethodName\*(Aq ]
\&  Program = t/42profile_data.t
\&
\&  + 1 SELECT name FROM users WHERE id = ?
\&  + 2 prepare
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 2 execute
\&  1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 2 fetchrow_hashref
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 1 UPDATE users SET name = ? WHERE id = ?
\&  + 2 prepare
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 2 execute
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
.Ve
.PP
The lines beginning with \f(CW\*(C`+\*(C'\fR signs signify keys.  The number after
the \f(CW\*(C`+\*(C'\fR sign shows the nesting level of the key.  Lines beginning
with \f(CW\*(C`=\*(C'\fR are the actual profile data, in the same order as
in DBI::Profile.
.PP
Note that the same path may be present multiple times in the data file
since \f(CW\*(C`format()\*(C'\fR may be called more than once.  When read by
DBI::ProfileData the data points will be merged to produce a single
data set for each distinct path.
.PP
The key strings are transformed in three ways.  First, all backslashes
are doubled.  Then all newlines and carriage-returns are transformed
into \f(CW\*(C`\en\*(C'\fR and \f(CW\*(C`\er\*(C'\fR respectively.  Finally, any \s-1NULL\s0 bytes (\f(CW\*(C`\e0\*(C'\fR)
are entirely removed.  When DBI::ProfileData reads the file the first
two transformations will be reversed, but \s-1NULL\s0 bytes will not be
restored.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sam Tregar <sam@tregar.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2002 Sam Tregar
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.
                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileDumper5.16.3pm                   0100644 0001750 0001750 00000023637 12566241600 025100  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileDumper 3"
.TH DBI::ProfileDumper 3 "2012-05-30" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileDumper \- profile DBI usage and output data to a file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To profile an existing program using DBI::ProfileDumper, set the
\&\s-1DBI_PROFILE\s0 environment variable and run your program as usual.  For
example, using bash:
.PP
.Vb 1
\&  DBI_PROFILE=2/DBI::ProfileDumper program.pl
.Ve
.PP
Then analyze the generated file (\fIdbi.prof\fR) with dbiprof:
.PP
.Vb 1
\&  dbiprof
.Ve
.PP
You can also activate DBI::ProfileDumper from within your code:
.PP
.Vb 1
\&  use DBI;
\&
\&  # profile with default path (2) and output file (dbi.prof)
\&  $dbh\->{Profile} = "!Statement/DBI::ProfileDumper";
\&
\&  # same thing, spelled out
\&  $dbh\->{Profile} = "!Statement/DBI::ProfileDumper/File:dbi.prof";
\&
\&  # another way to say it
\&  use DBI::ProfileDumper;
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&                        Path => [ \*(Aq!Statement\*(Aq ],
\&                        File => \*(Aqdbi.prof\*(Aq );
\&
\&  # using a custom path
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&      Path => [ "foo", "bar" ],
\&      File => \*(Aqdbi.prof\*(Aq,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBI::ProfileDumper is a subclass of DBI::Profile which
dumps profile data to disk instead of printing a summary to your
screen.  You can then use dbiprof to analyze the data in
a number of interesting ways, or you can roll your own analysis using
DBI::ProfileData.
.PP
\&\fB\s-1NOTE:\s0\fR For Apache/mod_perl applications, use
DBI::ProfileDumper::Apache.
.SH "USAGE"
.IX Header "USAGE"
One way to use this module is just to enable it in your \f(CW$dbh\fR:
.PP
.Vb 1
\&  $dbh\->{Profile} = "1/DBI::ProfileDumper";
.Ve
.PP
This will write out profile data by statement into a file called
\&\fIdbi.prof\fR.  If you want to modify either of these properties, you
can construct the DBI::ProfileDumper object yourself:
.PP
.Vb 5
\&  use DBI::ProfileDumper;
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&      Path => [ \*(Aq!Statement\*(Aq ],
\&      File => \*(Aqdbi.prof\*(Aq
\&  );
.Ve
.PP
The \f(CW\*(C`Path\*(C'\fR option takes the same values as in
DBI::Profile.  The \f(CW\*(C`File\*(C'\fR option gives the name of the
file where results will be collected.  If it already exists it will be
overwritten.
.PP
You can also activate this module by setting the \s-1DBI_PROFILE\s0
environment variable:
.PP
.Vb 1
\&  $ENV{DBI_PROFILE} = "!Statement/DBI::ProfileDumper";
.Ve
.PP
This will cause all \s-1DBI\s0 handles to share the same profiling object.
.SH "METHODS"
.IX Header "METHODS"
The following methods are available to be called using the profile
object.  You can get access to the profile object from the Profile key
in any \s-1DBI\s0 handle:
.PP
.Vb 1
\&  my $profile = $dbh\->{Profile};
.Ve
.SS "flush_to_disk"
.IX Subsection "flush_to_disk"
.Vb 1
\&  $profile\->flush_to_disk()
.Ve
.PP
Flushes all collected profile data to disk and empties the Data hash.  Returns
the filename writen to.  If no profile data has been collected then the file is
not written and \fIflush_to_disk()\fR returns undef.
.PP
The file is locked while it's being written. A process 'consuming' the files
while they're being written to, should rename the file first, then lock it,
then read it, then close and delete it. The \f(CW\*(C`DeleteFiles\*(C'\fR option to
DBI::ProfileData does the right thing.
.PP
This method may be called multiple times during a program run.
.SS "empty"
.IX Subsection "empty"
.Vb 1
\&  $profile\->empty()
.Ve
.PP
Clears the Data hash without writing to disk.
.SS "filename"
.IX Subsection "filename"
.Vb 1
\&  $filename = $profile\->filename();
.Ve
.PP
Get or set the filename.
.PP
The filename can be specified as a \s-1CODE\s0 reference, in which case the referenced
code should return the filename to be used. The code will be called with the
profile object as its first argument.
.SH "DATA FORMAT"
.IX Header "DATA FORMAT"
The data format written by DBI::ProfileDumper starts with a header
containing the version number of the module used to generate it.  Then
a block of variable declarations describes the profile.  After two
newlines, the profile data forms the body of the file.  For example:
.PP
.Vb 3
\&  DBI::ProfileDumper 2.003762
\&  Path = [ \*(Aq!Statement\*(Aq, \*(Aq!MethodName\*(Aq ]
\&  Program = t/42profile_data.t
\&
\&  + 1 SELECT name FROM users WHERE id = ?
\&  + 2 prepare
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 2 execute
\&  1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 2 fetchrow_hashref
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 1 UPDATE users SET name = ? WHERE id = ?
\&  + 2 prepare
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 2 execute
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
.Ve
.PP
The lines beginning with \f(CW\*(C`+\*(C'\fR signs signify keys.  The number after
the \f(CW\*(C`+\*(C'\fR sign shows the nesting level of the key.  Lines beginning
with \f(CW\*(C`=\*(C'\fR are the actual profile data, in the same order as
in DBI::Profile.
.PP
Note that the same path may be present multiple times in the data file
since \f(CW\*(C`format()\*(C'\fR may be called more than once.  When read by
DBI::ProfileData the data points will be merged to produce a single
data set for each distinct path.
.PP
The key strings are transformed in three ways.  First, all backslashes
are doubled.  Then all newlines and carriage-returns are transformed
into \f(CW\*(C`\en\*(C'\fR and \f(CW\*(C`\er\*(C'\fR respectively.  Finally, any \s-1NULL\s0 bytes (\f(CW\*(C`\e0\*(C'\fR)
are entirely removed.  When DBI::ProfileData reads the file the first
two transformations will be reversed, but \s-1NULL\s0 bytes will not be
restored.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sam Tregar <sam@tregar.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2002 Sam Tregar
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.
                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileDumper5.18.3pm                   0100644 0001750 0001750 00000024161 12566241600 025073  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileDumper 3"
.TH DBI::ProfileDumper 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileDumper \- profile DBI usage and output data to a file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
To profile an existing program using DBI::ProfileDumper, set the
\&\s-1DBI_PROFILE\s0 environment variable and run your program as usual.  For
example, using bash:
.PP
.Vb 1
\&  DBI_PROFILE=2/DBI::ProfileDumper program.pl
.Ve
.PP
Then analyze the generated file (\fIdbi.prof\fR) with dbiprof:
.PP
.Vb 1
\&  dbiprof
.Ve
.PP
You can also activate DBI::ProfileDumper from within your code:
.PP
.Vb 1
\&  use DBI;
\&
\&  # profile with default path (2) and output file (dbi.prof)
\&  $dbh\->{Profile} = "!Statement/DBI::ProfileDumper";
\&
\&  # same thing, spelled out
\&  $dbh\->{Profile} = "!Statement/DBI::ProfileDumper/File:dbi.prof";
\&
\&  # another way to say it
\&  use DBI::ProfileDumper;
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&                        Path => [ \*(Aq!Statement\*(Aq ],
\&                        File => \*(Aqdbi.prof\*(Aq );
\&
\&  # using a custom path
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&      Path => [ "foo", "bar" ],
\&      File => \*(Aqdbi.prof\*(Aq,
\&  );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBI::ProfileDumper is a subclass of DBI::Profile which
dumps profile data to disk instead of printing a summary to your
screen.  You can then use dbiprof to analyze the data in
a number of interesting ways, or you can roll your own analysis using
DBI::ProfileData.
.PP
\&\fB\s-1NOTE:\s0\fR For Apache/mod_perl applications, use
DBI::ProfileDumper::Apache.
.SH "USAGE"
.IX Header "USAGE"
One way to use this module is just to enable it in your \f(CW$dbh\fR:
.PP
.Vb 1
\&  $dbh\->{Profile} = "1/DBI::ProfileDumper";
.Ve
.PP
This will write out profile data by statement into a file called
\&\fIdbi.prof\fR.  If you want to modify either of these properties, you
can construct the DBI::ProfileDumper object yourself:
.PP
.Vb 5
\&  use DBI::ProfileDumper;
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&      Path => [ \*(Aq!Statement\*(Aq ],
\&      File => \*(Aqdbi.prof\*(Aq
\&  );
.Ve
.PP
The \f(CW\*(C`Path\*(C'\fR option takes the same values as in
DBI::Profile.  The \f(CW\*(C`File\*(C'\fR option gives the name of the
file where results will be collected.  If it already exists it will be
overwritten.
.PP
You can also activate this module by setting the \s-1DBI_PROFILE\s0
environment variable:
.PP
.Vb 1
\&  $ENV{DBI_PROFILE} = "!Statement/DBI::ProfileDumper";
.Ve
.PP
This will cause all \s-1DBI\s0 handles to share the same profiling object.
.SH "METHODS"
.IX Header "METHODS"
The following methods are available to be called using the profile
object.  You can get access to the profile object from the Profile key
in any \s-1DBI\s0 handle:
.PP
.Vb 1
\&  my $profile = $dbh\->{Profile};
.Ve
.SS "flush_to_disk"
.IX Subsection "flush_to_disk"
.Vb 1
\&  $profile\->flush_to_disk()
.Ve
.PP
Flushes all collected profile data to disk and empties the Data hash.  Returns
the filename written to.  If no profile data has been collected then the file is
not written and \fIflush_to_disk()\fR returns undef.
.PP
The file is locked while it's being written. A process 'consuming' the files
while they're being written to, should rename the file first, then lock it,
then read it, then close and delete it. The \f(CW\*(C`DeleteFiles\*(C'\fR option to
DBI::ProfileData does the right thing.
.PP
This method may be called multiple times during a program run.
.SS "empty"
.IX Subsection "empty"
.Vb 1
\&  $profile\->empty()
.Ve
.PP
Clears the Data hash without writing to disk.
.SS "filename"
.IX Subsection "filename"
.Vb 1
\&  $filename = $profile\->filename();
.Ve
.PP
Get or set the filename.
.PP
The filename can be specified as a \s-1CODE\s0 reference, in which case the referenced
code should return the filename to be used. The code will be called with the
profile object as its first argument.
.SH "DATA FORMAT"
.IX Header "DATA FORMAT"
The data format written by DBI::ProfileDumper starts with a header
containing the version number of the module used to generate it.  Then
a block of variable declarations describes the profile.  After two
newlines, the profile data forms the body of the file.  For example:
.PP
.Vb 3
\&  DBI::ProfileDumper 2.003762
\&  Path = [ \*(Aq!Statement\*(Aq, \*(Aq!MethodName\*(Aq ]
\&  Program = t/42profile_data.t
\&
\&  + 1 SELECT name FROM users WHERE id = ?
\&  + 2 prepare
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 2 execute
\&  1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 2 fetchrow_hashref
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 1 UPDATE users SET name = ? WHERE id = ?
\&  + 2 prepare
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
\&  + 2 execute
\&  = 1 0.0312958955764771 0.000490069389343262 0.000176072120666504 0.00140702724456787 1023115819.83019 1023115819.86576
.Ve
.PP
The lines beginning with \f(CW\*(C`+\*(C'\fR signs signify keys.  The number after
the \f(CW\*(C`+\*(C'\fR sign shows the nesting level of the key.  Lines beginning
with \f(CW\*(C`=\*(C'\fR are the actual profile data, in the same order as
in DBI::Profile.
.PP
Note that the same path may be present multiple times in the data file
since \f(CW\*(C`format()\*(C'\fR may be called more than once.  When read by
DBI::ProfileData the data points will be merged to produce a single
data set for each distinct path.
.PP
The key strings are transformed in three ways.  First, all backslashes
are doubled.  Then all newlines and carriage-returns are transformed
into \f(CW\*(C`\en\*(C'\fR and \f(CW\*(C`\er\*(C'\fR respectively.  Finally, any \s-1NULL\s0 bytes (\f(CW\*(C`\e0\*(C'\fR)
are entirely removed.  When DBI::ProfileData reads the file the first
two transformations will be reversed, but \s-1NULL\s0 bytes will not be
restored.
.SH "AUTHOR"
.IX Header "AUTHOR"
Sam Tregar <sam@tregar.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2002 Sam Tregar
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.
                                                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileDumper::Apache.3pm               0100644 0001750 0001750 00000023437 12566241601 026053  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileDumper::Apache 3"
.TH DBI::ProfileDumper::Apache 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileDumper::Apache \- capture DBI profiling data from Apache/mod_perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Add this line to your \fIhttpd.conf\fR:
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE 2/DBI::ProfileDumper::Apache
.Ve
.PP
(If you're using mod_perl2, see \*(L"When using mod_perl2\*(R" for some additional notes.)
.PP
Then restart your server.  Access the code you wish to test using a
web browser, then shutdown your server.  This will create a set of
\&\fIdbi.prof.*\fR files in your Apache log directory.
.PP
Get a profiling report with dbiprof:
.PP
.Vb 1
\&  dbiprof /path/to/your/apache/logs/dbi.prof.*
.Ve
.PP
When you're ready to perform another profiling run, delete the old files and start again.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module interfaces DBI::ProfileDumper to Apache/mod_perl.  Using
this module you can collect profiling data from mod_perl applications.
It works by creating a DBI::ProfileDumper data file for each Apache
process.  These files are created in your Apache log directory.  You
can then use the dbiprof utility to analyze the profile files.
.SH "USAGE"
.IX Header "USAGE"
.SS "\s-1LOADING THE MODULE\s0"
.IX Subsection "LOADING THE MODULE"
The easiest way to use this module is just to set the \s-1DBI_PROFILE\s0
environment variable in your \fIhttpd.conf\fR:
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE 2/DBI::ProfileDumper::Apache
.Ve
.PP
The \s-1DBI\s0 will look after loading and using the module when the first \s-1DBI\s0 handle
is created.
.PP
It's also possible to use this module by setting the Profile attribute
of any \s-1DBI\s0 handle:
.PP
.Vb 1
\&  $dbh\->{Profile} = "2/DBI::ProfileDumper::Apache";
.Ve
.PP
See DBI::ProfileDumper for more possibilities, and DBI::Profile for full
details of the \s-1DBI\s0's profiling mechanism.
.SS "\s-1WRITING PROFILE DATA\s0"
.IX Subsection "WRITING PROFILE DATA"
The profile data files will be written to your Apache log directory by default.
.PP
The user that the httpd processes run as will need write access to the
directory.  So, for example, if you're running the child httpds as user 'nobody'
and using chronolog to write to the logs directory, then you'll need to change
the default.
.PP
You can change the destination directory either by specifying a \f(CW\*(C`Dir\*(C'\fR value
when creating the profile (like \f(CW\*(C`File\*(C'\fR in the DBI::ProfileDumper docs),
or you can use the \f(CW\*(C`DBI_PROFILE_APACHE_LOG_DIR\*(C'\fR env var to change that. For example:
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE_APACHE_LOG_DIR /server_root/logs
.Ve
.PP
\fIWhen using mod_perl2\fR
.IX Subsection "When using mod_perl2"
.PP
Under mod_perl2 you'll need to either set the \f(CW\*(C`DBI_PROFILE_APACHE_LOG_DIR\*(C'\fR env var,
or enable the mod_perl2 \f(CW\*(C`GlobalRequest\*(C'\fR option, like this:
.PP
.Vb 1
\&  PerlOptions +GlobalRequest
.Ve
.PP
to the global config section you're about test with DBI::ProfileDumper::Apache.
If you don't do one of those then you'll see messages in your error_log similar to:
.PP
.Vb 2
\&  DBI::ProfileDumper::Apache on_destroy failed: Global $r object is not available. Set:
\&    PerlOptions +GlobalRequest in httpd.conf at ..../DBI/ProfileDumper/Apache.pm line 144
.Ve
.PP
\fINaming the files\fR
.IX Subsection "Naming the files"
.PP
The default file name is inherited from DBI::ProfileDumper via the
\&\fIfilename()\fR method, but DBI::ProfileDumper::Apache appends the parent pid and
the current pid, separated by dots, to that name.
.PP
\fISilencing the log\fR
.IX Subsection "Silencing the log"
.PP
By default a message is written to \s-1STDERR \s0(i.e., the apache error_log file)
when \fIflush_to_disk()\fR is called (either explicitly, or implicitly via \s-1DESTROY\s0).
.PP
That's usually very useful. If you don't want the log message you can silence
it by setting the \f(CW\*(C`Quiet\*(C'\fR attribute true.
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE 2/DBI::ProfileDumper::Apache/Quiet:1
\&
\&  $dbh\->{Profile} = "!Statement/DBI::ProfileDumper/Quiet:1";
\&
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&      Path => [ \*(Aq!Statement\*(Aq ]
\&      Quiet => 1
\&  );
.Ve
.SS "\s-1GATHERING PROFILE DATA\s0"
.IX Subsection "GATHERING PROFILE DATA"
Once you have the module loaded, use your application as you normally
would.  Stop the webserver when your tests are complete.  Profile data
files will be produced when Apache exits and you'll see something like
this in your error_log:
.PP
.Vb 1
\&  DBI::ProfileDumper::Apache writing to /usr/local/apache/logs/dbi.prof.2604.2619
.Ve
.PP
Now you can use dbiprof to examine the data:
.PP
.Vb 1
\&  dbiprof /usr/local/apache/logs/dbi.prof.2604.*
.Ve
.PP
By passing dbiprof a list of all generated files, dbiprof will
automatically merge them into one result set.  You can also pass
dbiprof sorting and querying options, see dbiprof for details.
.SS "\s-1CLEANING UP\s0"
.IX Subsection "CLEANING UP"
Once you've made some code changes, you're ready to start again.
First, delete the old profile data files:
.PP
.Vb 1
\&  rm /usr/local/apache/logs/dbi.prof.*
.Ve
.PP
Then restart your server and get back to work.
.SH "OTHER ISSUES"
.IX Header "OTHER ISSUES"
.SS "Memory usage"
.IX Subsection "Memory usage"
DBI::Profile can use a lot of memory for very active applications because it
collects profiling data in memory for each distinct query run.
Calling \f(CW\*(C`flush_to_disk()\*(C'\fR will write the current data to disk and free the
memory it's using. For example:
.PP
.Vb 1
\&  $dbh\->{Profile}\->flush_to_disk() if $dbh\->{Profile};
.Ve
.PP
or, rather than flush every time, you could flush less often:
.PP
.Vb 2
\&  $dbh\->{Profile}\->flush_to_disk()
\&    if $dbh\->{Profile} and ++$i % 100;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Sam Tregar <sam@tregar.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2002 Sam Tregar
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.
                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileDumper::Apache5.16.3pm           0100644 0001750 0001750 00000023177 12566241577 026402  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileDumper::Apache 3"
.TH DBI::ProfileDumper::Apache 3 "2010-06-08" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileDumper::Apache \- capture DBI profiling data from Apache/mod_perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Add this line to your \fIhttpd.conf\fR:
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE 2/DBI::ProfileDumper::Apache
.Ve
.PP
(If you're using mod_perl2, see \*(L"When using mod_perl2\*(R" for some additional notes.)
.PP
Then restart your server.  Access the code you wish to test using a
web browser, then shutdown your server.  This will create a set of
\&\fIdbi.prof.*\fR files in your Apache log directory.
.PP
Get a profiling report with dbiprof:
.PP
.Vb 1
\&  dbiprof /path/to/your/apache/logs/dbi.prof.*
.Ve
.PP
When you're ready to perform another profiling run, delete the old files and start again.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module interfaces DBI::ProfileDumper to Apache/mod_perl.  Using
this module you can collect profiling data from mod_perl applications.
It works by creating a DBI::ProfileDumper data file for each Apache
process.  These files are created in your Apache log directory.  You
can then use the dbiprof utility to analyze the profile files.
.SH "USAGE"
.IX Header "USAGE"
.SS "\s-1LOADING\s0 \s-1THE\s0 \s-1MODULE\s0"
.IX Subsection "LOADING THE MODULE"
The easiest way to use this module is just to set the \s-1DBI_PROFILE\s0
environment variable in your \fIhttpd.conf\fR:
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE 2/DBI::ProfileDumper::Apache
.Ve
.PP
The \s-1DBI\s0 will look after loading and using the module when the first \s-1DBI\s0 handle
is created.
.PP
It's also possible to use this module by setting the Profile attribute
of any \s-1DBI\s0 handle:
.PP
.Vb 1
\&  $dbh\->{Profile} = "2/DBI::ProfileDumper::Apache";
.Ve
.PP
See DBI::ProfileDumper for more possibilities, and DBI::Profile for full
details of the \s-1DBI\s0's profiling mechanism.
.SS "\s-1WRITING\s0 \s-1PROFILE\s0 \s-1DATA\s0"
.IX Subsection "WRITING PROFILE DATA"
The profile data files will be written to your Apache log directory by default.
.PP
The user that the httpd processes run as will need write access to the
directory.  So, for example, if you're running the child httpds as user 'nobody'
and using chronolog to write to the logs directory, then you'll need to change
the default.
.PP
You can change the destination directory either by specifying a \f(CW\*(C`Dir\*(C'\fR value
when creating the profile (like \f(CW\*(C`File\*(C'\fR in the DBI::ProfileDumper docs),
or you can use the \f(CW\*(C`DBI_PROFILE_APACHE_LOG_DIR\*(C'\fR env var to change that. For example:
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE_APACHE_LOG_DIR /server_root/logs
.Ve
.PP
\fIWhen using mod_perl2\fR
.IX Subsection "When using mod_perl2"
.PP
Under mod_perl2 you'll need to either set the \f(CW\*(C`DBI_PROFILE_APACHE_LOG_DIR\*(C'\fR env var,
or enable the mod_perl2 \f(CW\*(C`GlobalRequest\*(C'\fR option, like this:
.PP
.Vb 1
\&  PerlOptions +GlobalRequest
.Ve
.PP
to the global config section you're about test with DBI::ProfileDumper::Apache.
If you don't do one of those then you'll see messages in your error_log similar to:
.PP
.Vb 2
\&  DBI::ProfileDumper::Apache on_destroy failed: Global $r object is not available. Set:
\&    PerlOptions +GlobalRequest in httpd.conf at ..../DBI/ProfileDumper/Apache.pm line 144
.Ve
.PP
\fINaming the files\fR
.IX Subsection "Naming the files"
.PP
The default file name is inherited from DBI::ProfileDumper via the
\&\fIfilename()\fR method, but DBI::ProfileDumper::Apache appends the parent pid and
the current pid, separated by dots, to that name.
.PP
\fISilencing the log\fR
.IX Subsection "Silencing the log"
.PP
By default a message is written to \s-1STDERR\s0 (i.e., the apache error_log file)
when \fIflush_to_disk()\fR is called (either explicitly, or implicitly via \s-1DESTROY\s0).
.PP
That's usually very useful. If you don't want the log message you can silence
it by setting the \f(CW\*(C`Quiet\*(C'\fR attribute true.
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE 2/DBI::ProfileDumper::Apache/Quiet:1
\&
\&  $dbh\->{Profile} = "!Statement/DBI::ProfileDumper/Quiet:1";
\&
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&      Path => [ \*(Aq!Statement\*(Aq ]
\&      Quiet => 1
\&  );
.Ve
.SS "\s-1GATHERING\s0 \s-1PROFILE\s0 \s-1DATA\s0"
.IX Subsection "GATHERING PROFILE DATA"
Once you have the module loaded, use your application as you normally
would.  Stop the webserver when your tests are complete.  Profile data
files will be produced when Apache exits and you'll see something like
this in your error_log:
.PP
.Vb 1
\&  DBI::ProfileDumper::Apache writing to /usr/local/apache/logs/dbi.prof.2604.2619
.Ve
.PP
Now you can use dbiprof to examine the data:
.PP
.Vb 1
\&  dbiprof /usr/local/apache/logs/dbi.prof.2604.*
.Ve
.PP
By passing dbiprof a list of all generated files, dbiprof will
automatically merge them into one result set.  You can also pass
dbiprof sorting and querying options, see dbiprof for details.
.SS "\s-1CLEANING\s0 \s-1UP\s0"
.IX Subsection "CLEANING UP"
Once you've made some code changes, you're ready to start again.
First, delete the old profile data files:
.PP
.Vb 1
\&  rm /usr/local/apache/logs/dbi.prof.*
.Ve
.PP
Then restart your server and get back to work.
.SH "OTHER ISSUES"
.IX Header "OTHER ISSUES"
.SS "Memory usage"
.IX Subsection "Memory usage"
DBI::Profile can use a lot of memory for very active applications because it
collects profiling data in memory for each distinct query run.
Calling \f(CW\*(C`flush_to_disk()\*(C'\fR will write the current data to disk and free the
memory it's using. For example:
.PP
.Vb 1
\&  $dbh\->{Profile}\->flush_to_disk() if $dbh\->{Profile};
.Ve
.PP
or, rather than flush every time, you could flush less often:
.PP
.Vb 2
\&  $dbh\->{Profile}\->flush_to_disk()
\&    if $dbh\->{Profile} and ++$i % 100;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Sam Tregar <sam@tregar.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2002 Sam Tregar
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.
                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileDumper::Apache5.18.3pm           0100644 0001750 0001750 00000023437 12566241601 026367  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileDumper::Apache 3"
.TH DBI::ProfileDumper::Apache 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileDumper::Apache \- capture DBI profiling data from Apache/mod_perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Add this line to your \fIhttpd.conf\fR:
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE 2/DBI::ProfileDumper::Apache
.Ve
.PP
(If you're using mod_perl2, see \*(L"When using mod_perl2\*(R" for some additional notes.)
.PP
Then restart your server.  Access the code you wish to test using a
web browser, then shutdown your server.  This will create a set of
\&\fIdbi.prof.*\fR files in your Apache log directory.
.PP
Get a profiling report with dbiprof:
.PP
.Vb 1
\&  dbiprof /path/to/your/apache/logs/dbi.prof.*
.Ve
.PP
When you're ready to perform another profiling run, delete the old files and start again.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module interfaces DBI::ProfileDumper to Apache/mod_perl.  Using
this module you can collect profiling data from mod_perl applications.
It works by creating a DBI::ProfileDumper data file for each Apache
process.  These files are created in your Apache log directory.  You
can then use the dbiprof utility to analyze the profile files.
.SH "USAGE"
.IX Header "USAGE"
.SS "\s-1LOADING THE MODULE\s0"
.IX Subsection "LOADING THE MODULE"
The easiest way to use this module is just to set the \s-1DBI_PROFILE\s0
environment variable in your \fIhttpd.conf\fR:
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE 2/DBI::ProfileDumper::Apache
.Ve
.PP
The \s-1DBI\s0 will look after loading and using the module when the first \s-1DBI\s0 handle
is created.
.PP
It's also possible to use this module by setting the Profile attribute
of any \s-1DBI\s0 handle:
.PP
.Vb 1
\&  $dbh\->{Profile} = "2/DBI::ProfileDumper::Apache";
.Ve
.PP
See DBI::ProfileDumper for more possibilities, and DBI::Profile for full
details of the \s-1DBI\s0's profiling mechanism.
.SS "\s-1WRITING PROFILE DATA\s0"
.IX Subsection "WRITING PROFILE DATA"
The profile data files will be written to your Apache log directory by default.
.PP
The user that the httpd processes run as will need write access to the
directory.  So, for example, if you're running the child httpds as user 'nobody'
and using chronolog to write to the logs directory, then you'll need to change
the default.
.PP
You can change the destination directory either by specifying a \f(CW\*(C`Dir\*(C'\fR value
when creating the profile (like \f(CW\*(C`File\*(C'\fR in the DBI::ProfileDumper docs),
or you can use the \f(CW\*(C`DBI_PROFILE_APACHE_LOG_DIR\*(C'\fR env var to change that. For example:
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE_APACHE_LOG_DIR /server_root/logs
.Ve
.PP
\fIWhen using mod_perl2\fR
.IX Subsection "When using mod_perl2"
.PP
Under mod_perl2 you'll need to either set the \f(CW\*(C`DBI_PROFILE_APACHE_LOG_DIR\*(C'\fR env var,
or enable the mod_perl2 \f(CW\*(C`GlobalRequest\*(C'\fR option, like this:
.PP
.Vb 1
\&  PerlOptions +GlobalRequest
.Ve
.PP
to the global config section you're about test with DBI::ProfileDumper::Apache.
If you don't do one of those then you'll see messages in your error_log similar to:
.PP
.Vb 2
\&  DBI::ProfileDumper::Apache on_destroy failed: Global $r object is not available. Set:
\&    PerlOptions +GlobalRequest in httpd.conf at ..../DBI/ProfileDumper/Apache.pm line 144
.Ve
.PP
\fINaming the files\fR
.IX Subsection "Naming the files"
.PP
The default file name is inherited from DBI::ProfileDumper via the
\&\fIfilename()\fR method, but DBI::ProfileDumper::Apache appends the parent pid and
the current pid, separated by dots, to that name.
.PP
\fISilencing the log\fR
.IX Subsection "Silencing the log"
.PP
By default a message is written to \s-1STDERR \s0(i.e., the apache error_log file)
when \fIflush_to_disk()\fR is called (either explicitly, or implicitly via \s-1DESTROY\s0).
.PP
That's usually very useful. If you don't want the log message you can silence
it by setting the \f(CW\*(C`Quiet\*(C'\fR attribute true.
.PP
.Vb 1
\&  PerlSetEnv DBI_PROFILE 2/DBI::ProfileDumper::Apache/Quiet:1
\&
\&  $dbh\->{Profile} = "!Statement/DBI::ProfileDumper/Quiet:1";
\&
\&  $dbh\->{Profile} = DBI::ProfileDumper\->new(
\&      Path => [ \*(Aq!Statement\*(Aq ]
\&      Quiet => 1
\&  );
.Ve
.SS "\s-1GATHERING PROFILE DATA\s0"
.IX Subsection "GATHERING PROFILE DATA"
Once you have the module loaded, use your application as you normally
would.  Stop the webserver when your tests are complete.  Profile data
files will be produced when Apache exits and you'll see something like
this in your error_log:
.PP
.Vb 1
\&  DBI::ProfileDumper::Apache writing to /usr/local/apache/logs/dbi.prof.2604.2619
.Ve
.PP
Now you can use dbiprof to examine the data:
.PP
.Vb 1
\&  dbiprof /usr/local/apache/logs/dbi.prof.2604.*
.Ve
.PP
By passing dbiprof a list of all generated files, dbiprof will
automatically merge them into one result set.  You can also pass
dbiprof sorting and querying options, see dbiprof for details.
.SS "\s-1CLEANING UP\s0"
.IX Subsection "CLEANING UP"
Once you've made some code changes, you're ready to start again.
First, delete the old profile data files:
.PP
.Vb 1
\&  rm /usr/local/apache/logs/dbi.prof.*
.Ve
.PP
Then restart your server and get back to work.
.SH "OTHER ISSUES"
.IX Header "OTHER ISSUES"
.SS "Memory usage"
.IX Subsection "Memory usage"
DBI::Profile can use a lot of memory for very active applications because it
collects profiling data in memory for each distinct query run.
Calling \f(CW\*(C`flush_to_disk()\*(C'\fR will write the current data to disk and free the
memory it's using. For example:
.PP
.Vb 1
\&  $dbh\->{Profile}\->flush_to_disk() if $dbh\->{Profile};
.Ve
.PP
or, rather than flush every time, you could flush less often:
.PP
.Vb 2
\&  $dbh\->{Profile}\->flush_to_disk()
\&    if $dbh\->{Profile} and ++$i % 100;
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Sam Tregar <sam@tregar.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2002 Sam Tregar
.PP
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl 5 itself.
                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileSubs.3pm                         0100644 0001750 0001750 00000010320 12566241601 024230  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileSubs 3"
.TH DBI::ProfileSubs 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileSubs \- Subroutines for dynamic profile Path
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  DBI_PROFILE=\*(Aq&norm_std_n3\*(Aq prog.pl
.Ve
.PP
This is new and still experimental.
.SH "TO DO"
.IX Header "TO DO"
Define come kind of naming convention for the subs.
                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileSubs5.16.3pm                     0100644 0001750 0001750 00000007777 12566241577 024604  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileSubs 3"
.TH DBI::ProfileSubs 3 "2007-04-11" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileSubs \- Subroutines for dynamic profile Path
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  DBI_PROFILE=\*(Aq&norm_std_n3\*(Aq prog.pl
.Ve
.PP
This is new and still experimental.
.SH "TO DO"
.IX Header "TO DO"
Define come kind of naming convention for the subs.
 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProfileSubs5.18.3pm                     0100644 0001750 0001750 00000010320 12566241601 024544  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProfileSubs 3"
.TH DBI::ProfileSubs 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProfileSubs \- Subroutines for dynamic profile Path
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  DBI_PROFILE=\*(Aq&norm_std_n3\*(Aq prog.pl
.Ve
.PP
This is new and still experimental.
.SH "TO DO"
.IX Header "TO DO"
Define come kind of naming convention for the subs.
                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProxyServer.3pm                         0100644 0001750 0001750 00000061104 12566241600 024310  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProxyServer 3"
.TH DBI::ProxyServer 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProxyServer \- a server for the DBD::Proxy driver
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use DBI::ProxyServer;
\&    DBI::ProxyServer::main(@ARGV);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBI::Proxy Server is a module for implementing a proxy for the \s-1DBI\s0 proxy
driver, DBD::Proxy. It allows access to databases over the network if the
\&\s-1DBMS\s0 does not offer networked operations. But the proxy server might be
useful for you, even if you have a \s-1DBMS\s0 with integrated network
functionality: It can be used as a \s-1DBI\s0 proxy in a firewalled environment.
.PP
DBI::ProxyServer runs as a daemon on the machine with the \s-1DBMS\s0 or on the
firewall. The client connects to the agent using the \s-1DBI\s0 driver DBD::Proxy,
thus in the exactly same way than using DBD::mysql, DBD::mSQL or any other
\&\s-1DBI\s0 driver.
.PP
The agent is implemented as a RPC::PlServer application. Thus you have
access to all the possibilities of this module, in particular encryption
and a similar configuration file. DBI::ProxyServer adds the possibility of
query restrictions: You can define a set of queries that a client may
execute and restrict access to those. (Requires a \s-1DBI\s0 driver that supports
parameter binding.) See \*(L"\s-1CONFIGURATION FILE\*(R"\s0.
.PP
The provided driver script, dbiproxy, may either be used as it is or
used as the basis for a local version modified to meet your needs.
.SH "OPTIONS"
.IX Header "OPTIONS"
When calling the \fIDBI::ProxyServer::main()\fR function, you supply an
array of options. These options are parsed by the Getopt::Long module.
The ProxyServer inherits all of RPC::PlServer's and hence Net::Daemon's
options and option handling, in particular the ability to read
options from either the command line or a config file. See
RPC::PlServer. See Net::Daemon. Available options include
.IP "\fIchroot\fR (\fB\-\-chroot=dir\fR)" 4
.IX Item "chroot (--chroot=dir)"
(\s-1UNIX\s0 only)  After doing a \fIbind()\fR, change root directory to the given
directory by doing a \fIchroot()\fR. This is useful for security, but it
restricts the environment a lot. For example, you need to load \s-1DBI\s0
drivers in the config file or you have to create hard links to Unix
sockets, if your drivers are using them. For example, with MySQL, a
config file might contain the following lines:
.Sp
.Vb 9
\&    my $rootdir = \*(Aq/var/dbiproxy\*(Aq;
\&    my $unixsockdir = \*(Aq/tmp\*(Aq;
\&    my $unixsockfile = \*(Aqmysql.sock\*(Aq;
\&    foreach $dir ($rootdir, "$rootdir$unixsockdir") {
\&        mkdir 0755, $dir;
\&    }
\&    link("$unixsockdir/$unixsockfile",
\&         "$rootdir$unixsockdir/$unixsockfile");
\&    require DBD::mysql;
\&
\&    {
\&        \*(Aqchroot\*(Aq => $rootdir,
\&        ...
\&    }
.Ve
.Sp
If you don't know \fIchroot()\fR, think of an \s-1FTP\s0 server where you can see a
certain directory tree only after logging in. See also the \-\-group and
\&\-\-user options.
.IP "\fIclients\fR" 4
.IX Item "clients"
An array ref with a list of clients. Clients are hash refs, the attributes
\&\fIaccept\fR (0 for denying access and 1 for permitting) and \fImask\fR, a Perl
regular expression for the clients \s-1IP\s0 number or its host name.
.IP "\fIconfigfile\fR (\fB\-\-configfile=file\fR)" 4
.IX Item "configfile (--configfile=file)"
Config files are assumed to return a single hash ref that overrides the
arguments of the new method. However, command line arguments in turn take
precedence over the config file. See the \*(L"\s-1CONFIGURATION FILE\*(R"\s0 section
below for details on the config file.
.IP "\fIdebug\fR (\fB\-\-debug\fR)" 4
.IX Item "debug (--debug)"
Turn debugging mode on. Mainly this asserts that logging messages of
level \*(L"debug\*(R" are created.
.IP "\fIfacility\fR (\fB\-\-facility=mode\fR)" 4
.IX Item "facility (--facility=mode)"
(\s-1UNIX\s0 only) Facility to use for Sys::Syslog. The default is
\&\fBdaemon\fR.
.IP "\fIgroup\fR (\fB\-\-group=gid\fR)" 4
.IX Item "group (--group=gid)"
After doing a \fIbind()\fR, change the real and effective \s-1GID\s0 to the given.
This is useful, if you want your server to bind to a privileged port
(<1024), but don't want the server to execute as root. See also
the \-\-user option.
.Sp
\&\s-1GID\s0's can be passed as group names or numeric values.
.IP "\fIlocaladdr\fR (\fB\-\-localaddr=ip\fR)" 4
.IX Item "localaddr (--localaddr=ip)"
By default a daemon is listening to any \s-1IP\s0 number that a machine
has. This attribute allows to restrict the server to the given
\&\s-1IP\s0 number.
.IP "\fIlocalport\fR (\fB\-\-localport=port\fR)" 4
.IX Item "localport (--localport=port)"
This attribute sets the port on which the daemon is listening. It
must be given somehow, as there's no default.
.IP "\fIlogfile\fR (\fB\-\-logfile=file\fR)" 4
.IX Item "logfile (--logfile=file)"
Be default logging messages will be written to the syslog (Unix) or
to the event log (Windows \s-1NT\s0). On other operating systems you need to
specify a log file. The special value \*(L"\s-1STDERR\*(R"\s0 forces logging to
stderr. See Net::Daemon::Log for details.
.IP "\fImode\fR (\fB\-\-mode=modename\fR)" 4
.IX Item "mode (--mode=modename)"
The server can run in three different modes, depending on the environment.
.Sp
If you are running Perl 5.005 and did compile it for threads, then the
server will create a new thread for each connection. The thread will
execute the server's \fIRun()\fR method and then terminate. This mode is the
default, you can force it with \*(L"\-\-mode=threads\*(R".
.Sp
If threads are not available, but you have a working \fIfork()\fR, then the
server will behave similar by creating a new process for each connection.
This mode will be used automatically in the absence of threads or if
you use the \*(L"\-\-mode=fork\*(R" option.
.Sp
Finally there's a single-connection mode: If the server has accepted a
connection, he will enter the \fIRun()\fR method. No other connections are
accepted until the \fIRun()\fR method returns (if the client disconnects).
This operation mode is useful if you have neither threads nor \fIfork()\fR,
for example on the Macintosh. For debugging purposes you can force this
mode with \*(L"\-\-mode=single\*(R".
.IP "\fIpidfile\fR (\fB\-\-pidfile=file\fR)" 4
.IX Item "pidfile (--pidfile=file)"
(\s-1UNIX\s0 only) If this option is present, a \s-1PID\s0 file will be created at the
given location. Default is to not create a pidfile.
.IP "\fIuser\fR (\fB\-\-user=uid\fR)" 4
.IX Item "user (--user=uid)"
After doing a \fIbind()\fR, change the real and effective \s-1UID\s0 to the given.
This is useful, if you want your server to bind to a privileged port
(<1024), but don't want the server to execute as root. See also
the \-\-group and the \-\-chroot options.
.Sp
\&\s-1UID\s0's can be passed as group names or numeric values.
.IP "\fIversion\fR (\fB\-\-version\fR)" 4
.IX Item "version (--version)"
Suppresses startup of the server; instead the version string will
be printed and the program exits immediately.
.SH "SHUTDOWN"
.IX Header "SHUTDOWN"
DBI::ProxyServer is built on RPC::PlServer which is, in turn, built on Net::Daemon.
.PP
You should refer to Net::Daemon for how to shutdown the server, except that
you can't because it's not currently documented there (as of v0.43).
The bottom-line is that it seems that there's no support for graceful shutdown.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
The configuration file is just that of \fIRPC::PlServer\fR or \fINet::Daemon\fR
with some additional attributes in the client list.
.PP
The config file is a Perl script. At the top of the file you may include
arbitrary Perl source, for example load drivers at the start (useful
to enhance performance), prepare a chroot environment and so on.
.PP
The important thing is that you finally return a hash ref of option
name/value pairs. The possible options are listed above.
.PP
All possibilities of Net::Daemon and RPC::PlServer apply, in particular
.IP "Host and/or User dependent access control" 4
.IX Item "Host and/or User dependent access control"
.PD 0
.IP "Host and/or User dependent encryption" 4
.IX Item "Host and/or User dependent encryption"
.IP "Changing \s-1UID\s0 and/or \s-1GID\s0 after binding to the port" 4
.IX Item "Changing UID and/or GID after binding to the port"
.IP "Running in a \fIchroot()\fR environment" 4
.IX Item "Running in a chroot() environment"
.PD
.PP
Additionally the server offers you query restrictions. Suggest the
following client list:
.PP
.Vb 10
\&    \*(Aqclients\*(Aq => [
\&        { \*(Aqmask\*(Aq => \*(Aq^admin\e.company\e.com$\*(Aq,
\&          \*(Aqaccept\*(Aq => 1,
\&          \*(Aqusers\*(Aq => [ \*(Aqroot\*(Aq, \*(Aqwwwrun\*(Aq ],
\&        },
\&        {
\&          \*(Aqmask\*(Aq => \*(Aq^admin\e.company\e.com$\*(Aq,
\&          \*(Aqaccept\*(Aq => 1,
\&          \*(Aqusers\*(Aq => [ \*(Aqroot\*(Aq, \*(Aqwwwrun\*(Aq ],
\&          \*(Aqsql\*(Aq => {
\&               \*(Aqselect\*(Aq => \*(AqSELECT * FROM foo\*(Aq,
\&               \*(Aqinsert\*(Aq => \*(AqINSERT INTO foo VALUES (?, ?, ?)\*(Aq
\&               }
\&        }
.Ve
.PP
then only the users root and wwwrun may connect from admin.company.com,
executing arbitrary queries, but only wwwrun may connect from other
hosts and is restricted to
.PP
.Vb 1
\&    $sth\->prepare("select");
.Ve
.PP
or
.PP
.Vb 1
\&    $sth\->prepare("insert");
.Ve
.PP
which in fact are \*(L"\s-1SELECT\s0 * \s-1FROM\s0 foo\*(R" or \*(L"\s-1INSERT INTO\s0 foo \s-1VALUES \s0(?, ?, ?)\*(R".
.SH "Proxyserver Configuration file (bigger example)"
.IX Header "Proxyserver Configuration file (bigger example)"
This section tells you how to restrict a DBI-Proxy: Not every user from
every workstation shall be able to execute every query.
.PP
There is a perl program \*(L"dbiproxy\*(R" which runs on a machine which is able
to connect to all the databases we wish to reach. All Perl-DBD-drivers must
be installed on this machine. You can also reach databases for which drivers 
are not available on the machine where you run the program querying the 
database, e.g. ask MS-Access-database from Linux.
.PP
Create a configuration file \*(L"proxy_oracle.cfg\*(R" at the dbproxy-server:
.PP
.Vb 8
\&    {
\&        # This shall run in a shell or a DOS\-window 
\&        # facility => \*(Aqdaemon\*(Aq,
\&        pidfile => \*(Aqyour_dbiproxy.pid\*(Aq,
\&        logfile => 1,
\&        debug => 0,
\&        mode => \*(Aqsingle\*(Aq,
\&        localport => \*(Aq12400\*(Aq,
\&
\&        # Access control, the first match in this list wins!
\&        # So the order is important
\&        clients => [
\&                # hint to organize:
\&                # the most specialized rules for single machines/users are 1st
\&                # then the denying rules
\&                # then the rules about whole networks
\&
\&                # rule: internal_webserver
\&                # desc: to get statistical information
\&                {
\&                        # this IP\-address only is meant
\&                        mask => \*(Aq^10\e.95\e.81\e.243$\*(Aq,
\&                        # accept (not defer) connections like this
\&                        accept => 1,
\&                        # only users from this list 
\&                        # are allowed to log on
\&                        users => [ \*(Aqinformationdesk\*(Aq ],
\&                        # only this statistical query is allowed
\&                        # to get results for a web\-query
\&                        sql => {
\&                                alive => \*(Aqselect count(*) from dual\*(Aq,
\&                                statistic_area => \*(Aqselect count(*) from e01admin.e01e203 where geb_bezei like ?\*(Aq,
\&                        }
\&                },
\&
\&                # rule: internal_bad_guy_1
\&                {
\&                        mask => \*(Aq^10\e.95\e.81\e.1$\*(Aq,
\&                        accept => 0,
\&                },
\&
\&                # rule: employee_workplace
\&                # desc: get detailed information
\&                {
\&                        # any IP\-address is meant here
\&                        mask => \*(Aq^10\e.95\e.81\e.(\ed+)$\*(Aq,
\&                        # accept (not defer) connections like this
\&                        accept => 1,
\&                        # only users from this list 
\&                        # are allowed to log on
\&                        users => [ \*(Aqinformationdesk\*(Aq, \*(Aqlippmann\*(Aq ],
\&                        # all these queries are allowed:
\&                        sql => {
\&                                search_city => \*(Aqselect ort_nr, plz, ort from e01admin.e01e200 where plz like ?\*(Aq,
\&                                search_area => \*(Aqselect gebiettyp, geb_bezei from e01admin.e01e203 where geb_bezei like ? or geb_bezei like ?\*(Aq,
\&                        }
\&                },
\&
\&                # rule: internal_bad_guy_2 
\&                # This does NOT work, because rule "employee_workplace" hits
\&                # with its ip\-address\-mask of the whole network
\&                {
\&                        # don\*(Aqt accept connection from this ip\-address
\&                        mask => \*(Aq^10\e.95\e.81\e.5$\*(Aq,
\&                        accept => 0,
\&                }
\&        ]
\&    }
.Ve
.PP
Start the proxyserver like this:
.PP
.Vb 3
\&        rem well\-set Oracle_home needed for Oracle
\&        set ORACLE_HOME=d:\eoracle\eora81
\&        dbiproxy \-\-configfile proxy_oracle.cfg
.Ve
.SS "Testing the connection from a remote machine"
.IX Subsection "Testing the connection from a remote machine"
Call a program \*(L"dbish\*(R" from your commandline. I take the machine from rule \*(L"internal_webserver\*(R"
.PP
.Vb 1
\&        dbish "dbi:Proxy:hostname=oracle.zdf;port=12400;dsn=dbi:Oracle:e01" informationdesk xxx
.Ve
.PP
There will be a shell-prompt:
.PP
.Vb 1
\&        informationdesk@dbi...> alive
\&
\&        Current statement buffer (enter \*(Aq/\*(Aq...):
\&        alive
\&
\&        informationdesk@dbi...> /
\&        COUNT(*)
\&        \*(Aq1\*(Aq
\&        [1 rows of 1 fields returned]
.Ve
.SS "Testing the connection with a perl-script"
.IX Subsection "Testing the connection with a perl-script"
Create a perl-script like this:
.PP
.Vb 2
\&        # file: oratest.pl
\&        # call me like this: perl oratest.pl user password
\&
\&        use strict;
\&        use DBI;
\&
\&        my $user = shift || die "Usage: $0 user password";
\&        my $pass = shift || die "Usage: $0 user password";
\&        my $config = {
\&                dsn_at_proxy => "dbi:Oracle:e01",
\&                proxy => "hostname=oechsle.zdf;port=12400",
\&        };
\&        my $dsn = sprintf "dbi:Proxy:%s;dsn=%s",
\&                $config\->{proxy},
\&                $config\->{dsn_at_proxy};
\&
\&        my $dbh = DBI\->connect( $dsn, $user, $pass )
\&                || die "connect did not work: $DBI::errstr";
\&
\&        my $sql = "search_city";
\&        printf "%s\en%s\en%s\en", "="x40, $sql, "="x40;
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(Aq905%\*(Aq);
\&        &show_result ($cur);
\&
\&        my $sql = "search_area";
\&        printf "%s\en%s\en%s\en", "="x40, $sql, "="x40;
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(AqPfarr%\*(Aq);
\&        $cur\->bind_param(2,\*(AqBronnamberg%\*(Aq);
\&        &show_result ($cur);
\&
\&        my $sql = "statistic_area";
\&        printf "%s\en%s\en%s\en", "="x40, $sql, "="x40;
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(AqPfarr%\*(Aq);
\&        &show_result ($cur);
\&
\&        $dbh\->disconnect;
\&        exit;
\&
\&
\&        sub show_result {
\&                my $cur = shift;
\&                unless ($cur\->execute()) {
\&                        print "Could not execute\en"; 
\&                        return; 
\&                }
\&
\&                my $rownum = 0;
\&                while (my @row = $cur\->fetchrow_array()) {
\&                        printf "Row is: %s\en", join(", ",@row);
\&                        if ($rownum++ > 5) {
\&                                print "... and so on\en";
\&                                last;
\&                        }       
\&                }
\&                $cur\->finish;
\&        }
.Ve
.PP
The result
.PP
.Vb 10
\&        C:\e>perl oratest.pl informationdesk xxx
\&        ========================================
\&        search_city
\&        ========================================
\&        Row is: 3322, 9050, Chemnitz
\&        Row is: 3678, 9051, Chemnitz
\&        Row is: 10447, 9051, Chemnitz
\&        Row is: 12128, 9051, Chemnitz
\&        Row is: 10954, 90513, Zirndorf
\&        Row is: 5808, 90513, Zirndorf
\&        Row is: 5715, 90513, Zirndorf
\&        ... and so on
\&        ========================================
\&        search_area
\&        ========================================
\&        Row is: 101, Bronnamberg
\&        Row is: 400, Pfarramt Zirndorf
\&        Row is: 400, Pfarramt Rosstal
\&        Row is: 400, Pfarramt Oberasbach
\&        Row is: 401, Pfarramt Zirndorf
\&        Row is: 401, Pfarramt Rosstal
\&        ========================================
\&        statistic_area
\&        ========================================
\&        DBD::Proxy::st execute failed: Server returned error: Failed to execute method CallMethod: Unknown SQL query: statistic_area at E:/Perl/site/lib/DBI/ProxyServer.pm line 258.
\&        Could not execute
.Ve
.SS "How the configuration works"
.IX Subsection "How the configuration works"
The most important section to control access to your dbi-proxy is \*(L"client=>\*(R"
in the file \*(L"proxy_oracle.cfg\*(R":
.PP
Controlling which person at which machine is allowed to access
.IP "\(bu" 4
\&\*(L"mask\*(R" is a perl regular expression against the plain ip-address of the machine which wishes to connect _or_ the reverse-lookup from a nameserver.
.IP "\(bu" 4
\&\*(L"accept\*(R" tells the dbiproxy-server whether ip-adresse like in \*(L"mask\*(R" are allowed to connect or not (0/1)
.IP "\(bu" 4
\&\*(L"users\*(R" is a reference to a list of usernames which must be matched, this is \s-1NOT\s0 a regular expression.
.PP
Controlling which SQL-statements are allowed
.PP
You can put every SQL-statement you like in simply omitting \*(L"sql => ...\*(R", but the more important thing is to restrict the connection so that only allowed queries are possible.
.PP
If you include an sql-section in your config-file like this:
.PP
.Vb 4
\&        sql => {
\&                alive => \*(Aqselect count(*) from dual\*(Aq,
\&                statistic_area => \*(Aqselect count(*) from e01admin.e01e203 where geb_bezei like ?\*(Aq,
\&        }
.Ve
.PP
The user is allowed to put two queries against the dbi-proxy. The queries are _not_ \*(L"select count(*)...\*(R", the queries are \*(L"alive\*(R" and \*(L"statistic_area\*(R"! These keywords are replaced by the real query. So you can run a query for \*(L"alive\*(R":
.PP
.Vb 3
\&        my $sql = "alive";
\&        my $cur = $dbh\->prepare($sql);
\&        ...
.Ve
.PP
The flexibility is that you can put parameters in the where-part of the query so the query are not static. Simply replace a value in the where-part of the query through a question mark and bind it as a parameter to the query.
.PP
.Vb 5
\&        my $sql = "statistic_area";
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(Aq905%\*(Aq);
\&        # A second parameter would be called like this:
\&        # $cur\->bind_param(2,\*(Aq98%\*(Aq);
.Ve
.PP
The result is this query:
.PP
.Vb 2
\&        select count(*) from e01admin.e01e203 
\&        where geb_bezei like \*(Aq905%\*(Aq
.Ve
.PP
Don't try to put parameters into the sql-query like this:
.PP
.Vb 7
\&        # Does not work like you think.
\&        # Only the first word of the query is parsed,
\&        # so it\*(Aqs changed to "statistic_area", the rest is omitted.
\&        # You _have_ to work with $cur\->bind_param.
\&        my $sql = "statistic_area 905%";
\&        my $cur = $dbh\->prepare($sql);
\&        ...
.Ve
.SS "Problems"
.IX Subsection "Problems"
.IP "\(bu" 4
I don't know how to restrict users to special databases.
.IP "\(bu" 4
I don't know how to pass query-parameters via dbish
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 4
\&    Copyright (c) 1997    Jochen Wiedmann
\&                          Am Eisteich 9
\&                          72555 Metzingen
\&                          Germany
\&
\&                          Email: joe@ispsoft.de
\&                          Phone: +49 7123 14881
.Ve
.PP
The DBI::ProxyServer module is free software; you can redistribute it
and/or modify it under the same terms as Perl itself. In particular
permission is granted to Tim Bunce for distributing this as a part of
the \s-1DBI.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
dbiproxy, DBD::Proxy, \s-1DBI\s0, RPC::PlServer,
RPC::PlClient, Net::Daemon, Net::Daemon::Log,
Sys::Syslog, Win32::EventLog, syslog
                                                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProxyServer5.16.3pm                     0100644 0001750 0001750 00000060607 12566241600 024631  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProxyServer 3"
.TH DBI::ProxyServer 3 "2012-01-02" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProxyServer \- a server for the DBD::Proxy driver
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use DBI::ProxyServer;
\&    DBI::ProxyServer::main(@ARGV);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBI::Proxy Server is a module for implementing a proxy for the \s-1DBI\s0 proxy
driver, DBD::Proxy. It allows access to databases over the network if the
\&\s-1DBMS\s0 does not offer networked operations. But the proxy server might be
useful for you, even if you have a \s-1DBMS\s0 with integrated network
functionality: It can be used as a \s-1DBI\s0 proxy in a firewalled environment.
.PP
DBI::ProxyServer runs as a daemon on the machine with the \s-1DBMS\s0 or on the
firewall. The client connects to the agent using the \s-1DBI\s0 driver DBD::Proxy,
thus in the exactly same way than using DBD::mysql, DBD::mSQL or any other
\&\s-1DBI\s0 driver.
.PP
The agent is implemented as a RPC::PlServer application. Thus you have
access to all the possibilities of this module, in particular encryption
and a similar configuration file. DBI::ProxyServer adds the possibility of
query restrictions: You can define a set of queries that a client may
execute and restrict access to those. (Requires a \s-1DBI\s0 driver that supports
parameter binding.) See \*(L"\s-1CONFIGURATION\s0 \s-1FILE\s0\*(R".
.PP
The provided driver script, dbiproxy, may either be used as it is or
used as the basis for a local version modified to meet your needs.
.SH "OPTIONS"
.IX Header "OPTIONS"
When calling the \fIDBI::ProxyServer::main()\fR function, you supply an
array of options. These options are parsed by the Getopt::Long module.
The ProxyServer inherits all of RPC::PlServer's and hence Net::Daemon's
options and option handling, in particular the ability to read
options from either the command line or a config file. See
RPC::PlServer. See Net::Daemon. Available options include
.IP "\fIchroot\fR (\fB\-\-chroot=dir\fR)" 4
.IX Item "chroot (--chroot=dir)"
(\s-1UNIX\s0 only)  After doing a \fIbind()\fR, change root directory to the given
directory by doing a \fIchroot()\fR. This is useful for security, but it
restricts the environment a lot. For example, you need to load \s-1DBI\s0
drivers in the config file or you have to create hard links to Unix
sockets, if your drivers are using them. For example, with MySQL, a
config file might contain the following lines:
.Sp
.Vb 9
\&    my $rootdir = \*(Aq/var/dbiproxy\*(Aq;
\&    my $unixsockdir = \*(Aq/tmp\*(Aq;
\&    my $unixsockfile = \*(Aqmysql.sock\*(Aq;
\&    foreach $dir ($rootdir, "$rootdir$unixsockdir") {
\&        mkdir 0755, $dir;
\&    }
\&    link("$unixsockdir/$unixsockfile",
\&         "$rootdir$unixsockdir/$unixsockfile");
\&    require DBD::mysql;
\&
\&    {
\&        \*(Aqchroot\*(Aq => $rootdir,
\&        ...
\&    }
.Ve
.Sp
If you don't know \fIchroot()\fR, think of an \s-1FTP\s0 server where you can see a
certain directory tree only after logging in. See also the \-\-group and
\&\-\-user options.
.IP "\fIclients\fR" 4
.IX Item "clients"
An array ref with a list of clients. Clients are hash refs, the attributes
\&\fIaccept\fR (0 for denying access and 1 for permitting) and \fImask\fR, a Perl
regular expression for the clients \s-1IP\s0 number or its host name.
.IP "\fIconfigfile\fR (\fB\-\-configfile=file\fR)" 4
.IX Item "configfile (--configfile=file)"
Config files are assumed to return a single hash ref that overrides the
arguments of the new method. However, command line arguments in turn take
precedence over the config file. See the \*(L"\s-1CONFIGURATION\s0 \s-1FILE\s0\*(R" section
below for details on the config file.
.IP "\fIdebug\fR (\fB\-\-debug\fR)" 4
.IX Item "debug (--debug)"
Turn debugging mode on. Mainly this asserts that logging messages of
level \*(L"debug\*(R" are created.
.IP "\fIfacility\fR (\fB\-\-facility=mode\fR)" 4
.IX Item "facility (--facility=mode)"
(\s-1UNIX\s0 only) Facility to use for Sys::Syslog. The default is
\&\fBdaemon\fR.
.IP "\fIgroup\fR (\fB\-\-group=gid\fR)" 4
.IX Item "group (--group=gid)"
After doing a \fIbind()\fR, change the real and effective \s-1GID\s0 to the given.
This is useful, if you want your server to bind to a privileged port
(<1024), but don't want the server to execute as root. See also
the \-\-user option.
.Sp
\&\s-1GID\s0's can be passed as group names or numeric values.
.IP "\fIlocaladdr\fR (\fB\-\-localaddr=ip\fR)" 4
.IX Item "localaddr (--localaddr=ip)"
By default a daemon is listening to any \s-1IP\s0 number that a machine
has. This attribute allows to restrict the server to the given
\&\s-1IP\s0 number.
.IP "\fIlocalport\fR (\fB\-\-localport=port\fR)" 4
.IX Item "localport (--localport=port)"
This attribute sets the port on which the daemon is listening. It
must be given somehow, as there's no default.
.IP "\fIlogfile\fR (\fB\-\-logfile=file\fR)" 4
.IX Item "logfile (--logfile=file)"
Be default logging messages will be written to the syslog (Unix) or
to the event log (Windows \s-1NT\s0). On other operating systems you need to
specify a log file. The special value \*(L"\s-1STDERR\s0\*(R" forces logging to
stderr. See Net::Daemon::Log for details.
.IP "\fImode\fR (\fB\-\-mode=modename\fR)" 4
.IX Item "mode (--mode=modename)"
The server can run in three different modes, depending on the environment.
.Sp
If you are running Perl 5.005 and did compile it for threads, then the
server will create a new thread for each connection. The thread will
execute the server's \fIRun()\fR method and then terminate. This mode is the
default, you can force it with \*(L"\-\-mode=threads\*(R".
.Sp
If threads are not available, but you have a working \fIfork()\fR, then the
server will behave similar by creating a new process for each connection.
This mode will be used automatically in the absence of threads or if
you use the \*(L"\-\-mode=fork\*(R" option.
.Sp
Finally there's a single-connection mode: If the server has accepted a
connection, he will enter the \fIRun()\fR method. No other connections are
accepted until the \fIRun()\fR method returns (if the client disconnects).
This operation mode is useful if you have neither threads nor \fIfork()\fR,
for example on the Macintosh. For debugging purposes you can force this
mode with \*(L"\-\-mode=single\*(R".
.IP "\fIpidfile\fR (\fB\-\-pidfile=file\fR)" 4
.IX Item "pidfile (--pidfile=file)"
(\s-1UNIX\s0 only) If this option is present, a \s-1PID\s0 file will be created at the
given location. Default is to not create a pidfile.
.IP "\fIuser\fR (\fB\-\-user=uid\fR)" 4
.IX Item "user (--user=uid)"
After doing a \fIbind()\fR, change the real and effective \s-1UID\s0 to the given.
This is useful, if you want your server to bind to a privileged port
(<1024), but don't want the server to execute as root. See also
the \-\-group and the \-\-chroot options.
.Sp
\&\s-1UID\s0's can be passed as group names or numeric values.
.IP "\fIversion\fR (\fB\-\-version\fR)" 4
.IX Item "version (--version)"
Suppresses startup of the server; instead the version string will
be printed and the program exits immediately.
.SH "SHUTDOWN"
.IX Header "SHUTDOWN"
DBI::ProxyServer is built on RPC::PlServer which is, in turn, built on Net::Daemon.
.PP
You should refer to Net::Daemon for how to shutdown the server, except that
you can't because it's not currently documented there (as of v0.43).
The bottom-line is that it seems that there's no support for graceful shutdown.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
The configuration file is just that of \fIRPC::PlServer\fR or \fINet::Daemon\fR
with some additional attributes in the client list.
.PP
The config file is a Perl script. At the top of the file you may include
arbitrary Perl source, for example load drivers at the start (useful
to enhance performance), prepare a chroot environment and so on.
.PP
The important thing is that you finally return a hash ref of option
name/value pairs. The possible options are listed above.
.PP
All possibilities of Net::Daemon and RPC::PlServer apply, in particular
.IP "Host and/or User dependent access control" 4
.IX Item "Host and/or User dependent access control"
.PD 0
.IP "Host and/or User dependent encryption" 4
.IX Item "Host and/or User dependent encryption"
.IP "Changing \s-1UID\s0 and/or \s-1GID\s0 after binding to the port" 4
.IX Item "Changing UID and/or GID after binding to the port"
.IP "Running in a \fIchroot()\fR environment" 4
.IX Item "Running in a chroot() environment"
.PD
.PP
Additionally the server offers you query restrictions. Suggest the
following client list:
.PP
.Vb 10
\&    \*(Aqclients\*(Aq => [
\&        { \*(Aqmask\*(Aq => \*(Aq^admin\e.company\e.com$\*(Aq,
\&          \*(Aqaccept\*(Aq => 1,
\&          \*(Aqusers\*(Aq => [ \*(Aqroot\*(Aq, \*(Aqwwwrun\*(Aq ],
\&        },
\&        {
\&          \*(Aqmask\*(Aq => \*(Aq^admin\e.company\e.com$\*(Aq,
\&          \*(Aqaccept\*(Aq => 1,
\&          \*(Aqusers\*(Aq => [ \*(Aqroot\*(Aq, \*(Aqwwwrun\*(Aq ],
\&          \*(Aqsql\*(Aq => {
\&               \*(Aqselect\*(Aq => \*(AqSELECT * FROM foo\*(Aq,
\&               \*(Aqinsert\*(Aq => \*(AqINSERT INTO foo VALUES (?, ?, ?)\*(Aq
\&               }
\&        }
.Ve
.PP
then only the users root and wwwrun may connect from admin.company.com,
executing arbitrary queries, but only wwwrun may connect from other
hosts and is restricted to
.PP
.Vb 1
\&    $sth\->prepare("select");
.Ve
.PP
or
.PP
.Vb 1
\&    $sth\->prepare("insert");
.Ve
.PP
which in fact are \*(L"\s-1SELECT\s0 * \s-1FROM\s0 foo\*(R" or \*(L"\s-1INSERT\s0 \s-1INTO\s0 foo \s-1VALUES\s0 (?, ?, ?)\*(R".
.SH "Proxyserver Configuration file (bigger example)"
.IX Header "Proxyserver Configuration file (bigger example)"
This section tells you how to restrict a DBI-Proxy: Not every user from
every workstation shall be able to execute every query.
.PP
There is a perl program \*(L"dbiproxy\*(R" which runs on a machine which is able
to connect to all the databases we wish to reach. All Perl-DBD-drivers must
be installed on this machine. You can also reach databases for which drivers 
are not available on the machine where you run the program querying the 
database, e.g. ask MS-Access-database from Linux.
.PP
Create a configuration file \*(L"proxy_oracle.cfg\*(R" at the dbproxy-server:
.PP
.Vb 8
\&    {
\&        # This shall run in a shell or a DOS\-window 
\&        # facility => \*(Aqdaemon\*(Aq,
\&        pidfile => \*(Aqyour_dbiproxy.pid\*(Aq,
\&        logfile => 1,
\&        debug => 0,
\&        mode => \*(Aqsingle\*(Aq,
\&        localport => \*(Aq12400\*(Aq,
\&
\&        # Access control, the first match in this list wins!
\&        # So the order is important
\&        clients => [
\&                # hint to organize:
\&                # the most specialized rules for single machines/users are 1st
\&                # then the denying rules
\&                # the the rules about whole networks
\&
\&                # rule: internal_webserver
\&                # desc: to get statistical information
\&                {
\&                        # this IP\-address only is meant
\&                        mask => \*(Aq^10\e.95\e.81\e.243$\*(Aq,
\&                        # accept (not defer) connections like this
\&                        accept => 1,
\&                        # only users from this list 
\&                        # are allowed to log on
\&                        users => [ \*(Aqinformationdesk\*(Aq ],
\&                        # only this statistical query is allowed
\&                        # to get results for a web\-query
\&                        sql => {
\&                                alive => \*(Aqselect count(*) from dual\*(Aq,
\&                                statistic_area => \*(Aqselect count(*) from e01admin.e01e203 where geb_bezei like ?\*(Aq,
\&                        }
\&                },
\&
\&                # rule: internal_bad_guy_1
\&                {
\&                        mask => \*(Aq^10\e.95\e.81\e.1$\*(Aq,
\&                        accept => 0,
\&                },
\&
\&                # rule: employee_workplace
\&                # desc: get detailled information
\&                {
\&                        # any IP\-address is meant here
\&                        mask => \*(Aq^10\e.95\e.81\e.(\ed+)$\*(Aq,
\&                        # accept (not defer) connections like this
\&                        accept => 1,
\&                        # only users from this list 
\&                        # are allowed to log on
\&                        users => [ \*(Aqinformationdesk\*(Aq, \*(Aqlippmann\*(Aq ],
\&                        # all these queries are allowed:
\&                        sql => {
\&                                search_city => \*(Aqselect ort_nr, plz, ort from e01admin.e01e200 where plz like ?\*(Aq,
\&                                search_area => \*(Aqselect gebiettyp, geb_bezei from e01admin.e01e203 where geb_bezei like ? or geb_bezei like ?\*(Aq,
\&                        }
\&                },
\&
\&                # rule: internal_bad_guy_2 
\&                # This does NOT work, because rule "employee_workplace" hits
\&                # with its ip\-address\-mask of the whole network
\&                {
\&                        # don\*(Aqt accept connection from this ip\-address
\&                        mask => \*(Aq^10\e.95\e.81\e.5$\*(Aq,
\&                        accept => 0,
\&                }
\&        ]
\&    }
.Ve
.PP
Start the proxyserver like this:
.PP
.Vb 3
\&        rem well\-set Oracle_home needed for Oracle
\&        set ORACLE_HOME=d:\eoracle\eora81
\&        dbiproxy \-\-configfile proxy_oracle.cfg
.Ve
.SS "Testing the connection from a remote machine"
.IX Subsection "Testing the connection from a remote machine"
Call a program \*(L"dbish\*(R" from your commandline. I take the machine from rule \*(L"internal_webserver\*(R"
.PP
.Vb 1
\&        dbish "dbi:Proxy:hostname=oracle.zdf;port=12400;dsn=dbi:Oracle:e01" informationdesk xxx
.Ve
.PP
There will be a shell-prompt:
.PP
.Vb 1
\&        informationdesk@dbi...> alive
\&
\&        Current statement buffer (enter \*(Aq/\*(Aq...):
\&        alive
\&
\&        informationdesk@dbi...> /
\&        COUNT(*)
\&        \*(Aq1\*(Aq
\&        [1 rows of 1 fields returned]
.Ve
.SS "Testing the connection with a perl-script"
.IX Subsection "Testing the connection with a perl-script"
Create a perl-script like this:
.PP
.Vb 2
\&        # file: oratest.pl
\&        # call me like this: perl oratest.pl user password
\&
\&        use strict;
\&        use DBI;
\&
\&        my $user = shift || die "Usage: $0 user password";
\&        my $pass = shift || die "Usage: $0 user password";
\&        my $config = {
\&                dsn_at_proxy => "dbi:Oracle:e01",
\&                proxy => "hostname=oechsle.zdf;port=12400",
\&        };
\&        my $dsn = sprintf "dbi:Proxy:%s;dsn=%s",
\&                $config\->{proxy},
\&                $config\->{dsn_at_proxy};
\&
\&        my $dbh = DBI\->connect( $dsn, $user, $pass )
\&                || die "connect did not work: $DBI::errstr";
\&
\&        my $sql = "search_city";
\&        printf "%s\en%s\en%s\en", "="x40, $sql, "="x40;
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(Aq905%\*(Aq);
\&        &show_result ($cur);
\&
\&        my $sql = "search_area";
\&        printf "%s\en%s\en%s\en", "="x40, $sql, "="x40;
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(AqPfarr%\*(Aq);
\&        $cur\->bind_param(2,\*(AqBronnamberg%\*(Aq);
\&        &show_result ($cur);
\&
\&        my $sql = "statistic_area";
\&        printf "%s\en%s\en%s\en", "="x40, $sql, "="x40;
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(AqPfarr%\*(Aq);
\&        &show_result ($cur);
\&
\&        $dbh\->disconnect;
\&        exit;
\&
\&
\&        sub show_result {
\&                my $cur = shift;
\&                unless ($cur\->execute()) {
\&                        print "Could not execute\en"; 
\&                        return; 
\&                }
\&
\&                my $rownum = 0;
\&                while (my @row = $cur\->fetchrow_array()) {
\&                        printf "Row is: %s\en", join(", ",@row);
\&                        if ($rownum++ > 5) {
\&                                print "... and so on\en";
\&                                last;
\&                        }       
\&                }
\&                $cur\->finish;
\&        }
.Ve
.PP
The result
.PP
.Vb 10
\&        C:\e>perl oratest.pl informationdesk xxx
\&        ========================================
\&        search_city
\&        ========================================
\&        Row is: 3322, 9050, Chemnitz
\&        Row is: 3678, 9051, Chemnitz
\&        Row is: 10447, 9051, Chemnitz
\&        Row is: 12128, 9051, Chemnitz
\&        Row is: 10954, 90513, Zirndorf
\&        Row is: 5808, 90513, Zirndorf
\&        Row is: 5715, 90513, Zirndorf
\&        ... and so on
\&        ========================================
\&        search_area
\&        ========================================
\&        Row is: 101, Bronnamberg
\&        Row is: 400, Pfarramt Zirndorf
\&        Row is: 400, Pfarramt Rosstal
\&        Row is: 400, Pfarramt Oberasbach
\&        Row is: 401, Pfarramt Zirndorf
\&        Row is: 401, Pfarramt Rosstal
\&        ========================================
\&        statistic_area
\&        ========================================
\&        DBD::Proxy::st execute failed: Server returned error: Failed to execute method CallMethod: Unknown SQL query: statistic_area at E:/Perl/site/lib/DBI/ProxyServer.pm line 258.
\&        Could not execute
.Ve
.SS "How the configuration works"
.IX Subsection "How the configuration works"
The most important section to control access to your dbi-proxy is \*(L"client=>\*(R"
in the file \*(L"proxy_oracle.cfg\*(R":
.PP
Controlling which person at which machine is allowed to access
.IP "\(bu" 4
\&\*(L"mask\*(R" is a perl regular expression against the plain ip-address of the machine which wishes to connect _or_ the reverse-lookup from a nameserver.
.IP "\(bu" 4
\&\*(L"accept\*(R" tells the dbiproxy-server wether ip-adresse like in \*(L"mask\*(R" are allowed to connect or not (0/1)
.IP "\(bu" 4
\&\*(L"users\*(R" is a reference to a list of usernames which must be matched, this is \s-1NOT\s0 a regular expression.
.PP
Controlling which SQL-statements are allowed
.PP
You can put every SQL-statement you like in simply ommiting \*(L"sql => ...\*(R", but the more important thing is to restrict the connection so that only allowed queries are possible.
.PP
If you include an sql-section in your config-file like this:
.PP
.Vb 4
\&        sql => {
\&                alive => \*(Aqselect count(*) from dual\*(Aq,
\&                statistic_area => \*(Aqselect count(*) from e01admin.e01e203 where geb_bezei like ?\*(Aq,
\&        }
.Ve
.PP
The user is allowed to put two queries against the dbi-proxy. The queries are _not_ \*(L"select count(*)...\*(R", the queries are \*(L"alive\*(R" and \*(L"statistic_area\*(R"! These keywords are replaced by the real query. So you can run a query for \*(L"alive\*(R":
.PP
.Vb 3
\&        my $sql = "alive";
\&        my $cur = $dbh\->prepare($sql);
\&        ...
.Ve
.PP
The flexibility is that you can put parameters in the where-part of the query so the query are not static. Simply replace a value in the where-part of the query through a question mark and bind it as a parameter to the query.
.PP
.Vb 5
\&        my $sql = "statistic_area";
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(Aq905%\*(Aq);
\&        # A second parameter would be called like this:
\&        # $cur\->bind_param(2,\*(Aq98%\*(Aq);
.Ve
.PP
The result is this query:
.PP
.Vb 2
\&        select count(*) from e01admin.e01e203 
\&        where geb_bezei like \*(Aq905%\*(Aq
.Ve
.PP
Don't try to put parameters into the sql-query like this:
.PP
.Vb 7
\&        # Does not work like you think.
\&        # Only the first word of the query is parsed,
\&        # so it\*(Aqs changed to "statistic_area", the rest is omitted.
\&        # You _have_ to work with $cur\->bind_param.
\&        my $sql = "statistic_area 905%";
\&        my $cur = $dbh\->prepare($sql);
\&        ...
.Ve
.SS "Problems"
.IX Subsection "Problems"
.IP "\(bu" 4
I don't know how to restrict users to special databases.
.IP "\(bu" 4
I don't know how to pass query-parameters via dbish
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 4
\&    Copyright (c) 1997    Jochen Wiedmann
\&                          Am Eisteich 9
\&                          72555 Metzingen
\&                          Germany
\&
\&                          Email: joe@ispsoft.de
\&                          Phone: +49 7123 14881
.Ve
.PP
The DBI::ProxyServer module is free software; you can redistribute it
and/or modify it under the same terms as Perl itself. In particular
permission is granted to Tim Bunce for distributing this as a part of
the \s-1DBI\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
dbiproxy, DBD::Proxy, \s-1DBI\s0, RPC::PlServer,
RPC::PlClient, Net::Daemon, Net::Daemon::Log,
Sys::Syslog, Win32::EventLog, syslog
                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::ProxyServer5.18.3pm                     0100644 0001750 0001750 00000061104 12566241600 024624  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::ProxyServer 3"
.TH DBI::ProxyServer 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::ProxyServer \- a server for the DBD::Proxy driver
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use DBI::ProxyServer;
\&    DBI::ProxyServer::main(@ARGV);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBI::Proxy Server is a module for implementing a proxy for the \s-1DBI\s0 proxy
driver, DBD::Proxy. It allows access to databases over the network if the
\&\s-1DBMS\s0 does not offer networked operations. But the proxy server might be
useful for you, even if you have a \s-1DBMS\s0 with integrated network
functionality: It can be used as a \s-1DBI\s0 proxy in a firewalled environment.
.PP
DBI::ProxyServer runs as a daemon on the machine with the \s-1DBMS\s0 or on the
firewall. The client connects to the agent using the \s-1DBI\s0 driver DBD::Proxy,
thus in the exactly same way than using DBD::mysql, DBD::mSQL or any other
\&\s-1DBI\s0 driver.
.PP
The agent is implemented as a RPC::PlServer application. Thus you have
access to all the possibilities of this module, in particular encryption
and a similar configuration file. DBI::ProxyServer adds the possibility of
query restrictions: You can define a set of queries that a client may
execute and restrict access to those. (Requires a \s-1DBI\s0 driver that supports
parameter binding.) See \*(L"\s-1CONFIGURATION FILE\*(R"\s0.
.PP
The provided driver script, dbiproxy, may either be used as it is or
used as the basis for a local version modified to meet your needs.
.SH "OPTIONS"
.IX Header "OPTIONS"
When calling the \fIDBI::ProxyServer::main()\fR function, you supply an
array of options. These options are parsed by the Getopt::Long module.
The ProxyServer inherits all of RPC::PlServer's and hence Net::Daemon's
options and option handling, in particular the ability to read
options from either the command line or a config file. See
RPC::PlServer. See Net::Daemon. Available options include
.IP "\fIchroot\fR (\fB\-\-chroot=dir\fR)" 4
.IX Item "chroot (--chroot=dir)"
(\s-1UNIX\s0 only)  After doing a \fIbind()\fR, change root directory to the given
directory by doing a \fIchroot()\fR. This is useful for security, but it
restricts the environment a lot. For example, you need to load \s-1DBI\s0
drivers in the config file or you have to create hard links to Unix
sockets, if your drivers are using them. For example, with MySQL, a
config file might contain the following lines:
.Sp
.Vb 9
\&    my $rootdir = \*(Aq/var/dbiproxy\*(Aq;
\&    my $unixsockdir = \*(Aq/tmp\*(Aq;
\&    my $unixsockfile = \*(Aqmysql.sock\*(Aq;
\&    foreach $dir ($rootdir, "$rootdir$unixsockdir") {
\&        mkdir 0755, $dir;
\&    }
\&    link("$unixsockdir/$unixsockfile",
\&         "$rootdir$unixsockdir/$unixsockfile");
\&    require DBD::mysql;
\&
\&    {
\&        \*(Aqchroot\*(Aq => $rootdir,
\&        ...
\&    }
.Ve
.Sp
If you don't know \fIchroot()\fR, think of an \s-1FTP\s0 server where you can see a
certain directory tree only after logging in. See also the \-\-group and
\&\-\-user options.
.IP "\fIclients\fR" 4
.IX Item "clients"
An array ref with a list of clients. Clients are hash refs, the attributes
\&\fIaccept\fR (0 for denying access and 1 for permitting) and \fImask\fR, a Perl
regular expression for the clients \s-1IP\s0 number or its host name.
.IP "\fIconfigfile\fR (\fB\-\-configfile=file\fR)" 4
.IX Item "configfile (--configfile=file)"
Config files are assumed to return a single hash ref that overrides the
arguments of the new method. However, command line arguments in turn take
precedence over the config file. See the \*(L"\s-1CONFIGURATION FILE\*(R"\s0 section
below for details on the config file.
.IP "\fIdebug\fR (\fB\-\-debug\fR)" 4
.IX Item "debug (--debug)"
Turn debugging mode on. Mainly this asserts that logging messages of
level \*(L"debug\*(R" are created.
.IP "\fIfacility\fR (\fB\-\-facility=mode\fR)" 4
.IX Item "facility (--facility=mode)"
(\s-1UNIX\s0 only) Facility to use for Sys::Syslog. The default is
\&\fBdaemon\fR.
.IP "\fIgroup\fR (\fB\-\-group=gid\fR)" 4
.IX Item "group (--group=gid)"
After doing a \fIbind()\fR, change the real and effective \s-1GID\s0 to the given.
This is useful, if you want your server to bind to a privileged port
(<1024), but don't want the server to execute as root. See also
the \-\-user option.
.Sp
\&\s-1GID\s0's can be passed as group names or numeric values.
.IP "\fIlocaladdr\fR (\fB\-\-localaddr=ip\fR)" 4
.IX Item "localaddr (--localaddr=ip)"
By default a daemon is listening to any \s-1IP\s0 number that a machine
has. This attribute allows to restrict the server to the given
\&\s-1IP\s0 number.
.IP "\fIlocalport\fR (\fB\-\-localport=port\fR)" 4
.IX Item "localport (--localport=port)"
This attribute sets the port on which the daemon is listening. It
must be given somehow, as there's no default.
.IP "\fIlogfile\fR (\fB\-\-logfile=file\fR)" 4
.IX Item "logfile (--logfile=file)"
Be default logging messages will be written to the syslog (Unix) or
to the event log (Windows \s-1NT\s0). On other operating systems you need to
specify a log file. The special value \*(L"\s-1STDERR\*(R"\s0 forces logging to
stderr. See Net::Daemon::Log for details.
.IP "\fImode\fR (\fB\-\-mode=modename\fR)" 4
.IX Item "mode (--mode=modename)"
The server can run in three different modes, depending on the environment.
.Sp
If you are running Perl 5.005 and did compile it for threads, then the
server will create a new thread for each connection. The thread will
execute the server's \fIRun()\fR method and then terminate. This mode is the
default, you can force it with \*(L"\-\-mode=threads\*(R".
.Sp
If threads are not available, but you have a working \fIfork()\fR, then the
server will behave similar by creating a new process for each connection.
This mode will be used automatically in the absence of threads or if
you use the \*(L"\-\-mode=fork\*(R" option.
.Sp
Finally there's a single-connection mode: If the server has accepted a
connection, he will enter the \fIRun()\fR method. No other connections are
accepted until the \fIRun()\fR method returns (if the client disconnects).
This operation mode is useful if you have neither threads nor \fIfork()\fR,
for example on the Macintosh. For debugging purposes you can force this
mode with \*(L"\-\-mode=single\*(R".
.IP "\fIpidfile\fR (\fB\-\-pidfile=file\fR)" 4
.IX Item "pidfile (--pidfile=file)"
(\s-1UNIX\s0 only) If this option is present, a \s-1PID\s0 file will be created at the
given location. Default is to not create a pidfile.
.IP "\fIuser\fR (\fB\-\-user=uid\fR)" 4
.IX Item "user (--user=uid)"
After doing a \fIbind()\fR, change the real and effective \s-1UID\s0 to the given.
This is useful, if you want your server to bind to a privileged port
(<1024), but don't want the server to execute as root. See also
the \-\-group and the \-\-chroot options.
.Sp
\&\s-1UID\s0's can be passed as group names or numeric values.
.IP "\fIversion\fR (\fB\-\-version\fR)" 4
.IX Item "version (--version)"
Suppresses startup of the server; instead the version string will
be printed and the program exits immediately.
.SH "SHUTDOWN"
.IX Header "SHUTDOWN"
DBI::ProxyServer is built on RPC::PlServer which is, in turn, built on Net::Daemon.
.PP
You should refer to Net::Daemon for how to shutdown the server, except that
you can't because it's not currently documented there (as of v0.43).
The bottom-line is that it seems that there's no support for graceful shutdown.
.SH "CONFIGURATION FILE"
.IX Header "CONFIGURATION FILE"
The configuration file is just that of \fIRPC::PlServer\fR or \fINet::Daemon\fR
with some additional attributes in the client list.
.PP
The config file is a Perl script. At the top of the file you may include
arbitrary Perl source, for example load drivers at the start (useful
to enhance performance), prepare a chroot environment and so on.
.PP
The important thing is that you finally return a hash ref of option
name/value pairs. The possible options are listed above.
.PP
All possibilities of Net::Daemon and RPC::PlServer apply, in particular
.IP "Host and/or User dependent access control" 4
.IX Item "Host and/or User dependent access control"
.PD 0
.IP "Host and/or User dependent encryption" 4
.IX Item "Host and/or User dependent encryption"
.IP "Changing \s-1UID\s0 and/or \s-1GID\s0 after binding to the port" 4
.IX Item "Changing UID and/or GID after binding to the port"
.IP "Running in a \fIchroot()\fR environment" 4
.IX Item "Running in a chroot() environment"
.PD
.PP
Additionally the server offers you query restrictions. Suggest the
following client list:
.PP
.Vb 10
\&    \*(Aqclients\*(Aq => [
\&        { \*(Aqmask\*(Aq => \*(Aq^admin\e.company\e.com$\*(Aq,
\&          \*(Aqaccept\*(Aq => 1,
\&          \*(Aqusers\*(Aq => [ \*(Aqroot\*(Aq, \*(Aqwwwrun\*(Aq ],
\&        },
\&        {
\&          \*(Aqmask\*(Aq => \*(Aq^admin\e.company\e.com$\*(Aq,
\&          \*(Aqaccept\*(Aq => 1,
\&          \*(Aqusers\*(Aq => [ \*(Aqroot\*(Aq, \*(Aqwwwrun\*(Aq ],
\&          \*(Aqsql\*(Aq => {
\&               \*(Aqselect\*(Aq => \*(AqSELECT * FROM foo\*(Aq,
\&               \*(Aqinsert\*(Aq => \*(AqINSERT INTO foo VALUES (?, ?, ?)\*(Aq
\&               }
\&        }
.Ve
.PP
then only the users root and wwwrun may connect from admin.company.com,
executing arbitrary queries, but only wwwrun may connect from other
hosts and is restricted to
.PP
.Vb 1
\&    $sth\->prepare("select");
.Ve
.PP
or
.PP
.Vb 1
\&    $sth\->prepare("insert");
.Ve
.PP
which in fact are \*(L"\s-1SELECT\s0 * \s-1FROM\s0 foo\*(R" or \*(L"\s-1INSERT INTO\s0 foo \s-1VALUES \s0(?, ?, ?)\*(R".
.SH "Proxyserver Configuration file (bigger example)"
.IX Header "Proxyserver Configuration file (bigger example)"
This section tells you how to restrict a DBI-Proxy: Not every user from
every workstation shall be able to execute every query.
.PP
There is a perl program \*(L"dbiproxy\*(R" which runs on a machine which is able
to connect to all the databases we wish to reach. All Perl-DBD-drivers must
be installed on this machine. You can also reach databases for which drivers 
are not available on the machine where you run the program querying the 
database, e.g. ask MS-Access-database from Linux.
.PP
Create a configuration file \*(L"proxy_oracle.cfg\*(R" at the dbproxy-server:
.PP
.Vb 8
\&    {
\&        # This shall run in a shell or a DOS\-window 
\&        # facility => \*(Aqdaemon\*(Aq,
\&        pidfile => \*(Aqyour_dbiproxy.pid\*(Aq,
\&        logfile => 1,
\&        debug => 0,
\&        mode => \*(Aqsingle\*(Aq,
\&        localport => \*(Aq12400\*(Aq,
\&
\&        # Access control, the first match in this list wins!
\&        # So the order is important
\&        clients => [
\&                # hint to organize:
\&                # the most specialized rules for single machines/users are 1st
\&                # then the denying rules
\&                # then the rules about whole networks
\&
\&                # rule: internal_webserver
\&                # desc: to get statistical information
\&                {
\&                        # this IP\-address only is meant
\&                        mask => \*(Aq^10\e.95\e.81\e.243$\*(Aq,
\&                        # accept (not defer) connections like this
\&                        accept => 1,
\&                        # only users from this list 
\&                        # are allowed to log on
\&                        users => [ \*(Aqinformationdesk\*(Aq ],
\&                        # only this statistical query is allowed
\&                        # to get results for a web\-query
\&                        sql => {
\&                                alive => \*(Aqselect count(*) from dual\*(Aq,
\&                                statistic_area => \*(Aqselect count(*) from e01admin.e01e203 where geb_bezei like ?\*(Aq,
\&                        }
\&                },
\&
\&                # rule: internal_bad_guy_1
\&                {
\&                        mask => \*(Aq^10\e.95\e.81\e.1$\*(Aq,
\&                        accept => 0,
\&                },
\&
\&                # rule: employee_workplace
\&                # desc: get detailed information
\&                {
\&                        # any IP\-address is meant here
\&                        mask => \*(Aq^10\e.95\e.81\e.(\ed+)$\*(Aq,
\&                        # accept (not defer) connections like this
\&                        accept => 1,
\&                        # only users from this list 
\&                        # are allowed to log on
\&                        users => [ \*(Aqinformationdesk\*(Aq, \*(Aqlippmann\*(Aq ],
\&                        # all these queries are allowed:
\&                        sql => {
\&                                search_city => \*(Aqselect ort_nr, plz, ort from e01admin.e01e200 where plz like ?\*(Aq,
\&                                search_area => \*(Aqselect gebiettyp, geb_bezei from e01admin.e01e203 where geb_bezei like ? or geb_bezei like ?\*(Aq,
\&                        }
\&                },
\&
\&                # rule: internal_bad_guy_2 
\&                # This does NOT work, because rule "employee_workplace" hits
\&                # with its ip\-address\-mask of the whole network
\&                {
\&                        # don\*(Aqt accept connection from this ip\-address
\&                        mask => \*(Aq^10\e.95\e.81\e.5$\*(Aq,
\&                        accept => 0,
\&                }
\&        ]
\&    }
.Ve
.PP
Start the proxyserver like this:
.PP
.Vb 3
\&        rem well\-set Oracle_home needed for Oracle
\&        set ORACLE_HOME=d:\eoracle\eora81
\&        dbiproxy \-\-configfile proxy_oracle.cfg
.Ve
.SS "Testing the connection from a remote machine"
.IX Subsection "Testing the connection from a remote machine"
Call a program \*(L"dbish\*(R" from your commandline. I take the machine from rule \*(L"internal_webserver\*(R"
.PP
.Vb 1
\&        dbish "dbi:Proxy:hostname=oracle.zdf;port=12400;dsn=dbi:Oracle:e01" informationdesk xxx
.Ve
.PP
There will be a shell-prompt:
.PP
.Vb 1
\&        informationdesk@dbi...> alive
\&
\&        Current statement buffer (enter \*(Aq/\*(Aq...):
\&        alive
\&
\&        informationdesk@dbi...> /
\&        COUNT(*)
\&        \*(Aq1\*(Aq
\&        [1 rows of 1 fields returned]
.Ve
.SS "Testing the connection with a perl-script"
.IX Subsection "Testing the connection with a perl-script"
Create a perl-script like this:
.PP
.Vb 2
\&        # file: oratest.pl
\&        # call me like this: perl oratest.pl user password
\&
\&        use strict;
\&        use DBI;
\&
\&        my $user = shift || die "Usage: $0 user password";
\&        my $pass = shift || die "Usage: $0 user password";
\&        my $config = {
\&                dsn_at_proxy => "dbi:Oracle:e01",
\&                proxy => "hostname=oechsle.zdf;port=12400",
\&        };
\&        my $dsn = sprintf "dbi:Proxy:%s;dsn=%s",
\&                $config\->{proxy},
\&                $config\->{dsn_at_proxy};
\&
\&        my $dbh = DBI\->connect( $dsn, $user, $pass )
\&                || die "connect did not work: $DBI::errstr";
\&
\&        my $sql = "search_city";
\&        printf "%s\en%s\en%s\en", "="x40, $sql, "="x40;
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(Aq905%\*(Aq);
\&        &show_result ($cur);
\&
\&        my $sql = "search_area";
\&        printf "%s\en%s\en%s\en", "="x40, $sql, "="x40;
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(AqPfarr%\*(Aq);
\&        $cur\->bind_param(2,\*(AqBronnamberg%\*(Aq);
\&        &show_result ($cur);
\&
\&        my $sql = "statistic_area";
\&        printf "%s\en%s\en%s\en", "="x40, $sql, "="x40;
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(AqPfarr%\*(Aq);
\&        &show_result ($cur);
\&
\&        $dbh\->disconnect;
\&        exit;
\&
\&
\&        sub show_result {
\&                my $cur = shift;
\&                unless ($cur\->execute()) {
\&                        print "Could not execute\en"; 
\&                        return; 
\&                }
\&
\&                my $rownum = 0;
\&                while (my @row = $cur\->fetchrow_array()) {
\&                        printf "Row is: %s\en", join(", ",@row);
\&                        if ($rownum++ > 5) {
\&                                print "... and so on\en";
\&                                last;
\&                        }       
\&                }
\&                $cur\->finish;
\&        }
.Ve
.PP
The result
.PP
.Vb 10
\&        C:\e>perl oratest.pl informationdesk xxx
\&        ========================================
\&        search_city
\&        ========================================
\&        Row is: 3322, 9050, Chemnitz
\&        Row is: 3678, 9051, Chemnitz
\&        Row is: 10447, 9051, Chemnitz
\&        Row is: 12128, 9051, Chemnitz
\&        Row is: 10954, 90513, Zirndorf
\&        Row is: 5808, 90513, Zirndorf
\&        Row is: 5715, 90513, Zirndorf
\&        ... and so on
\&        ========================================
\&        search_area
\&        ========================================
\&        Row is: 101, Bronnamberg
\&        Row is: 400, Pfarramt Zirndorf
\&        Row is: 400, Pfarramt Rosstal
\&        Row is: 400, Pfarramt Oberasbach
\&        Row is: 401, Pfarramt Zirndorf
\&        Row is: 401, Pfarramt Rosstal
\&        ========================================
\&        statistic_area
\&        ========================================
\&        DBD::Proxy::st execute failed: Server returned error: Failed to execute method CallMethod: Unknown SQL query: statistic_area at E:/Perl/site/lib/DBI/ProxyServer.pm line 258.
\&        Could not execute
.Ve
.SS "How the configuration works"
.IX Subsection "How the configuration works"
The most important section to control access to your dbi-proxy is \*(L"client=>\*(R"
in the file \*(L"proxy_oracle.cfg\*(R":
.PP
Controlling which person at which machine is allowed to access
.IP "\(bu" 4
\&\*(L"mask\*(R" is a perl regular expression against the plain ip-address of the machine which wishes to connect _or_ the reverse-lookup from a nameserver.
.IP "\(bu" 4
\&\*(L"accept\*(R" tells the dbiproxy-server whether ip-adresse like in \*(L"mask\*(R" are allowed to connect or not (0/1)
.IP "\(bu" 4
\&\*(L"users\*(R" is a reference to a list of usernames which must be matched, this is \s-1NOT\s0 a regular expression.
.PP
Controlling which SQL-statements are allowed
.PP
You can put every SQL-statement you like in simply omitting \*(L"sql => ...\*(R", but the more important thing is to restrict the connection so that only allowed queries are possible.
.PP
If you include an sql-section in your config-file like this:
.PP
.Vb 4
\&        sql => {
\&                alive => \*(Aqselect count(*) from dual\*(Aq,
\&                statistic_area => \*(Aqselect count(*) from e01admin.e01e203 where geb_bezei like ?\*(Aq,
\&        }
.Ve
.PP
The user is allowed to put two queries against the dbi-proxy. The queries are _not_ \*(L"select count(*)...\*(R", the queries are \*(L"alive\*(R" and \*(L"statistic_area\*(R"! These keywords are replaced by the real query. So you can run a query for \*(L"alive\*(R":
.PP
.Vb 3
\&        my $sql = "alive";
\&        my $cur = $dbh\->prepare($sql);
\&        ...
.Ve
.PP
The flexibility is that you can put parameters in the where-part of the query so the query are not static. Simply replace a value in the where-part of the query through a question mark and bind it as a parameter to the query.
.PP
.Vb 5
\&        my $sql = "statistic_area";
\&        my $cur = $dbh\->prepare($sql);
\&        $cur\->bind_param(1,\*(Aq905%\*(Aq);
\&        # A second parameter would be called like this:
\&        # $cur\->bind_param(2,\*(Aq98%\*(Aq);
.Ve
.PP
The result is this query:
.PP
.Vb 2
\&        select count(*) from e01admin.e01e203 
\&        where geb_bezei like \*(Aq905%\*(Aq
.Ve
.PP
Don't try to put parameters into the sql-query like this:
.PP
.Vb 7
\&        # Does not work like you think.
\&        # Only the first word of the query is parsed,
\&        # so it\*(Aqs changed to "statistic_area", the rest is omitted.
\&        # You _have_ to work with $cur\->bind_param.
\&        my $sql = "statistic_area 905%";
\&        my $cur = $dbh\->prepare($sql);
\&        ...
.Ve
.SS "Problems"
.IX Subsection "Problems"
.IP "\(bu" 4
I don't know how to restrict users to special databases.
.IP "\(bu" 4
I don't know how to pass query-parameters via dbish
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 4
\&    Copyright (c) 1997    Jochen Wiedmann
\&                          Am Eisteich 9
\&                          72555 Metzingen
\&                          Germany
\&
\&                          Email: joe@ispsoft.de
\&                          Phone: +49 7123 14881
.Ve
.PP
The DBI::ProxyServer module is free software; you can redistribute it
and/or modify it under the same terms as Perl itself. In particular
permission is granted to Tim Bunce for distributing this as a part of
the \s-1DBI.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
dbiproxy, DBD::Proxy, \s-1DBI\s0, RPC::PlServer,
RPC::PlClient, Net::Daemon, Net::Daemon::Log,
Sys::Syslog, Win32::EventLog, syslog
                                                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::PurePerl.3pm                            0100644 0001750 0001750 00000023306 12566241600 023540  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::PurePerl 3"
.TH DBI::PurePerl 3 "2013-11-14" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::PurePerl \-\- a DBI emulation using pure perl (no C/XS compilation required)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& BEGIN { $ENV{DBI_PUREPERL} = 2 }
\& use DBI;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a pure perl emulation of the \s-1DBI\s0 internals.  In almost all
cases you will be better off using standard \s-1DBI\s0 since the portions
of the standard version written in C make it *much* faster.
.PP
However, if you are in a situation where it isn't possible to install
a compiled version of standard \s-1DBI,\s0 and you're using pure-perl \s-1DBD\s0
drivers, then this module allows you to use most common features
of \s-1DBI\s0 without needing any changes in your scripts.
.SH "EXPERIMENTAL STATUS"
.IX Header "EXPERIMENTAL STATUS"
DBI::PurePerl is new so please treat it as experimental pending
more extensive testing.  So far it has passed all tests with \s-1DBD::CSV,\s0
DBD::AnyData, DBD::XBase, DBD::Sprite, DBD::mysqlPP.  Please send
bug reports to Jeff Zucker at <jeff@vpservices.com> with a cc to
<dbi\-dev@perl.org>.
.SH "USAGE"
.IX Header "USAGE"
The usage is the same as for standard \s-1DBI\s0 with the exception
that you need to set the environment variable \s-1DBI_PUREPERL\s0 if
you want to use the PurePerl version.
.PP
.Vb 2
\& DBI_PUREPERL == 0 (the default) Always use compiled DBI, die
\&                   if it isn\*(Aqt properly compiled & installed
\&
\& DBI_PUREPERL == 1 Use compiled DBI if it is properly compiled
\&                   & installed, otherwise use PurePerl
\&
\& DBI_PUREPERL == 2 Always use PurePerl
.Ve
.PP
You may set the environment variable in your shell (e.g. with
set or setenv or export, etc) or else set it in your script like
this:
.PP
.Vb 1
\& BEGIN { $ENV{DBI_PUREPERL}=2 }
.Ve
.PP
before you \f(CW\*(C`use DBI;\*(C'\fR.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
In most situations simply install \s-1DBI \s0(see the \s-1DBI\s0 pod for details).
.PP
In the situation in which you can not install \s-1DBI\s0 itself, you
may manually copy \s-1DBI\s0.pm and PurePerl.pm into the appropriate
directories.
.PP
For example:
.PP
.Vb 2
\& cp DBI.pm      /usr/jdoe/mylibs/.
\& cp PurePerl.pm /usr/jdoe/mylibs/DBI/.
.Ve
.PP
Then add this to the top of scripts:
.PP
.Vb 4
\& BEGIN {
\&   $ENV{DBI_PUREPERL} = 1;      # or =2
\&   unshift @INC, \*(Aq/usr/jdoe/mylibs\*(Aq;
\& }
.Ve
.PP
(Or should we perhaps patch Makefile.PL so that if \s-1DBI_PUREPERL\s0
is set to 2 prior to make, the normal compile process is skipped
and the files are installed automatically?)
.SH "DIFFERENCES BETWEEN DBI AND DBI::PurePerl"
.IX Header "DIFFERENCES BETWEEN DBI AND DBI::PurePerl"
.SS "Attributes"
.IX Subsection "Attributes"
Boolean attributes still return boolean values but the actual values
used may be different, i.e., 0 or undef instead of an empty string.
.PP
Some handle attributes are either not supported or have very limited
functionality:
.PP
.Vb 7
\&  ActiveKids
\&  InactiveDestroy
\&  AutoInactiveDestroy
\&  Kids
\&  Taint
\&  TaintIn
\&  TaintOut
.Ve
.PP
(and probably others)
.SS "Tracing"
.IX Subsection "Tracing"
Trace functionality is more limited and the code to handle tracing is
only embedded into DBI:PurePerl if the \s-1DBI_TRACE\s0 environment variable
is defined.  To enable total tracing you can set the \s-1DBI_TRACE\s0
environment variable as usual.  But to enable individual handle
tracing using the \fItrace()\fR method you also need to set the \s-1DBI_TRACE\s0
environment variable, but set it to 0.
.SS "Parameter Usage Checking"
.IX Subsection "Parameter Usage Checking"
The \s-1DBI\s0 does some basic parameter count checking on method calls.
DBI::PurePerl doesn't.
.SS "Speed"
.IX Subsection "Speed"
DBI::PurePerl is slower. Although, with some drivers in some
contexts this may not be very significant for you.
.PP
By way of example... the test.pl script in the \s-1DBI\s0 source
distribution has a simple benchmark that just does:
.PP
.Vb 3
\&    my $null_dbh = DBI\->connect(\*(Aqdbi:NullP:\*(Aq,\*(Aq\*(Aq,\*(Aq\*(Aq);
\&    my $i = 10_000;
\&    $null_dbh\->prepare(\*(Aq\*(Aq) while $i\-\-;
.Ve
.PP
In other words just prepares a statement, creating and destroying
a statement handle, over and over again.  Using the real \s-1DBI\s0 this
runs at ~4550 handles per second whereas DBI::PurePerl manages
~2800 per second on the same machine (not too bad really).
.SS "May not fully support \fIhash()\fP"
.IX Subsection "May not fully support hash()"
If you want to use type 1 hash, i.e., \f(CW\*(C`hash($string,1)\*(C'\fR with
DBI::PurePerl, you'll need version 1.56 or higher of Math::BigInt
(available on \s-1CPAN\s0).
.SS "Doesn't support \fIpreparse()\fP"
.IX Subsection "Doesn't support preparse()"
The \s-1DBI\-\s0>\fIpreparse()\fR method isn't supported in DBI::PurePerl.
.SS "Doesn't support DBD::Proxy"
.IX Subsection "Doesn't support DBD::Proxy"
There's a subtle problem somewhere I've not been able to identify.
DBI::ProxyServer seem to work fine with DBI::PurePerl but DBD::Proxy
does not work 100% (which is sad because that would be far more useful :)
Try re-enabling t/80proxy.t for DBI::PurePerl to see if the problem
that remains will affect you're usage.
.SS "Others"
.IX Subsection "Others"
.Vb 1
\&  can() \- doesn\*(Aqt have any special behaviour
.Ve
.PP
Please let us know if you find any other differences between \s-1DBI\s0
and DBI::PurePerl.
.SH "AUTHORS"
.IX Header "AUTHORS"
Tim Bunce and Jeff Zucker.
.PP
Tim provided the direction and basis for the code.  The original
idea for the module and most of the brute force porting from C to
Perl was by Jeff. Tim then reworked some core parts to boost the
performance and accuracy of the emulation. Thanks also to Randal
Schwartz and John Tobey for patches.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002  Tim Bunce  Ireland.
.PP
See \s-1COPYRIGHT\s0 section in \s-1DBI\s0.pm for usage and distribution rights.
                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::PurePerl5.16.3pm                        0100644 0001750 0001750 00000022765 12566241600 024062  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::PurePerl 3"
.TH DBI::PurePerl 3 "2010-07-26" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::PurePerl \-\- a DBI emulation using pure perl (no C/XS compilation required)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& BEGIN { $ENV{DBI_PUREPERL} = 2 }
\& use DBI;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a pure perl emulation of the \s-1DBI\s0 internals.  In almost all
cases you will be better off using standard \s-1DBI\s0 since the portions
of the standard version written in C make it *much* faster.
.PP
However, if you are in a situation where it isn't possible to install
a compiled version of standard \s-1DBI\s0, and you're using pure-perl \s-1DBD\s0
drivers, then this module allows you to use most common features
of \s-1DBI\s0 without needing any changes in your scripts.
.SH "EXPERIMENTAL STATUS"
.IX Header "EXPERIMENTAL STATUS"
DBI::PurePerl is new so please treat it as experimental pending
more extensive testing.  So far it has passed all tests with \s-1DBD::CSV\s0,
DBD::AnyData, DBD::XBase, DBD::Sprite, DBD::mysqlPP.  Please send
bug reports to Jeff Zucker at <jeff@vpservices.com> with a cc to
<dbi\-dev@perl.org>.
.SH "USAGE"
.IX Header "USAGE"
The usage is the same as for standard \s-1DBI\s0 with the exception
that you need to set the environment variable \s-1DBI_PUREPERL\s0 if
you want to use the PurePerl version.
.PP
.Vb 2
\& DBI_PUREPERL == 0 (the default) Always use compiled DBI, die
\&                   if it isn\*(Aqt properly compiled & installed
\&
\& DBI_PUREPERL == 1 Use compiled DBI if it is properly compiled
\&                   & installed, otherwise use PurePerl
\&
\& DBI_PUREPERL == 2 Always use PurePerl
.Ve
.PP
You may set the enviornment variable in your shell (e.g. with
set or setenv or export, etc) or else set it in your script like
this:
.PP
.Vb 1
\& BEGIN { $ENV{DBI_PUREPERL}=2 }
.Ve
.PP
before you \f(CW\*(C`use DBI;\*(C'\fR.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
In most situations simply install \s-1DBI\s0 (see the \s-1DBI\s0 pod for details).
.PP
In the situation in which you can not install \s-1DBI\s0 itself, you
may manually copy \s-1DBI\s0.pm and PurePerl.pm into the appropriate
directories.
.PP
For example:
.PP
.Vb 2
\& cp DBI.pm      /usr/jdoe/mylibs/.
\& cp PurePerl.pm /usr/jdoe/mylibs/DBI/.
.Ve
.PP
Then add this to the top of scripts:
.PP
.Vb 4
\& BEGIN {
\&   $ENV{DBI_PUREPERL} = 1;      # or =2
\&   unshift @INC, \*(Aq/usr/jdoe/mylibs\*(Aq;
\& }
.Ve
.PP
(Or should we perhaps patch Makefile.PL so that if \s-1DBI_PUREPERL\s0
is set to 2 prior to make, the normal compile process is skipped
and the files are installed automatically?)
.SH "DIFFERENCES BETWEEN DBI AND DBI::PurePerl"
.IX Header "DIFFERENCES BETWEEN DBI AND DBI::PurePerl"
.SS "Attributes"
.IX Subsection "Attributes"
Boolean attributes still return boolean values but the actual values
used may be different, i.e., 0 or undef instead of an empty string.
.PP
Some handle attributes are either not supported or have very limited
functionality:
.PP
.Vb 7
\&  ActiveKids
\&  InactiveDestroy
\&  AutoInactiveDestroy
\&  Kids
\&  Taint
\&  TaintIn
\&  TaintOut
.Ve
.PP
(and probably others)
.SS "Tracing"
.IX Subsection "Tracing"
Trace functionality is more limited and the code to handle tracing is
only embedded into DBI:PurePerl if the \s-1DBI_TRACE\s0 environment variable
is defined.  To enable total tracing you can set the \s-1DBI_TRACE\s0
environment variable as usual.  But to enable individual handle
tracing using the \fItrace()\fR method you also need to set the \s-1DBI_TRACE\s0
environment variable, but set it to 0.
.SS "Parameter Usage Checking"
.IX Subsection "Parameter Usage Checking"
The \s-1DBI\s0 does some basic parameter count checking on method calls.
DBI::PurePerl doesn't.
.SS "Speed"
.IX Subsection "Speed"
DBI::PurePerl is slower. Although, with some drivers in some
contexts this may not be very significant for you.
.PP
By way of example... the test.pl script in the \s-1DBI\s0 source
distribution has a simple benchmark that just does:
.PP
.Vb 3
\&    my $null_dbh = DBI\->connect(\*(Aqdbi:NullP:\*(Aq,\*(Aq\*(Aq,\*(Aq\*(Aq);
\&    my $i = 10_000;
\&    $null_dbh\->prepare(\*(Aq\*(Aq) while $i\-\-;
.Ve
.PP
In other words just prepares a statement, creating and destroying
a statement handle, over and over again.  Using the real \s-1DBI\s0 this
runs at ~4550 handles per second whereas DBI::PurePerl manages
~2800 per second on the same machine (not too bad really).
.SS "May not fully support \fIhash()\fP"
.IX Subsection "May not fully support hash()"
If you want to use type 1 hash, i.e., \f(CW\*(C`hash($string,1)\*(C'\fR with
DBI::PurePerl, you'll need version 1.56 or higher of Math::BigInt
(available on \s-1CPAN\s0).
.SS "Doesn't support \fIpreparse()\fP"
.IX Subsection "Doesn't support preparse()"
The \s-1DBI\-\s0>\fIpreparse()\fR method isn't supported in DBI::PurePerl.
.SS "Doesn't support DBD::Proxy"
.IX Subsection "Doesn't support DBD::Proxy"
There's a subtle problem somewhere I've not been able to identify.
DBI::ProxyServer seem to work fine with DBI::PurePerl but DBD::Proxy
does not work 100% (which is sad because that would be far more useful :)
Try re-enabling t/80proxy.t for DBI::PurePerl to see if the problem
that remains will affect you're usage.
.SS "Others"
.IX Subsection "Others"
.Vb 1
\&  can() \- doesn\*(Aqt have any special behaviour
.Ve
.PP
Please let us know if you find any other differences between \s-1DBI\s0
and DBI::PurePerl.
.SH "AUTHORS"
.IX Header "AUTHORS"
Tim Bunce and Jeff Zucker.
.PP
Tim provided the direction and basis for the code.  The original
idea for the module and most of the brute force porting from C to
Perl was by Jeff. Tim then reworked some core parts to boost the
performance and accuracy of the emulation. Thanks also to Randal
Schwartz and John Tobey for patches.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002  Tim Bunce  Ireland.
.PP
See \s-1COPYRIGHT\s0 section in \s-1DBI\s0.pm for usage and distribution rights.
           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::PurePerl5.18.3pm                        0100644 0001750 0001750 00000023306 12566241600 024054  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::PurePerl 3"
.TH DBI::PurePerl 3 "2013-11-14" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::PurePerl \-\- a DBI emulation using pure perl (no C/XS compilation required)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& BEGIN { $ENV{DBI_PUREPERL} = 2 }
\& use DBI;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a pure perl emulation of the \s-1DBI\s0 internals.  In almost all
cases you will be better off using standard \s-1DBI\s0 since the portions
of the standard version written in C make it *much* faster.
.PP
However, if you are in a situation where it isn't possible to install
a compiled version of standard \s-1DBI,\s0 and you're using pure-perl \s-1DBD\s0
drivers, then this module allows you to use most common features
of \s-1DBI\s0 without needing any changes in your scripts.
.SH "EXPERIMENTAL STATUS"
.IX Header "EXPERIMENTAL STATUS"
DBI::PurePerl is new so please treat it as experimental pending
more extensive testing.  So far it has passed all tests with \s-1DBD::CSV,\s0
DBD::AnyData, DBD::XBase, DBD::Sprite, DBD::mysqlPP.  Please send
bug reports to Jeff Zucker at <jeff@vpservices.com> with a cc to
<dbi\-dev@perl.org>.
.SH "USAGE"
.IX Header "USAGE"
The usage is the same as for standard \s-1DBI\s0 with the exception
that you need to set the environment variable \s-1DBI_PUREPERL\s0 if
you want to use the PurePerl version.
.PP
.Vb 2
\& DBI_PUREPERL == 0 (the default) Always use compiled DBI, die
\&                   if it isn\*(Aqt properly compiled & installed
\&
\& DBI_PUREPERL == 1 Use compiled DBI if it is properly compiled
\&                   & installed, otherwise use PurePerl
\&
\& DBI_PUREPERL == 2 Always use PurePerl
.Ve
.PP
You may set the environment variable in your shell (e.g. with
set or setenv or export, etc) or else set it in your script like
this:
.PP
.Vb 1
\& BEGIN { $ENV{DBI_PUREPERL}=2 }
.Ve
.PP
before you \f(CW\*(C`use DBI;\*(C'\fR.
.SH "INSTALLATION"
.IX Header "INSTALLATION"
In most situations simply install \s-1DBI \s0(see the \s-1DBI\s0 pod for details).
.PP
In the situation in which you can not install \s-1DBI\s0 itself, you
may manually copy \s-1DBI\s0.pm and PurePerl.pm into the appropriate
directories.
.PP
For example:
.PP
.Vb 2
\& cp DBI.pm      /usr/jdoe/mylibs/.
\& cp PurePerl.pm /usr/jdoe/mylibs/DBI/.
.Ve
.PP
Then add this to the top of scripts:
.PP
.Vb 4
\& BEGIN {
\&   $ENV{DBI_PUREPERL} = 1;      # or =2
\&   unshift @INC, \*(Aq/usr/jdoe/mylibs\*(Aq;
\& }
.Ve
.PP
(Or should we perhaps patch Makefile.PL so that if \s-1DBI_PUREPERL\s0
is set to 2 prior to make, the normal compile process is skipped
and the files are installed automatically?)
.SH "DIFFERENCES BETWEEN DBI AND DBI::PurePerl"
.IX Header "DIFFERENCES BETWEEN DBI AND DBI::PurePerl"
.SS "Attributes"
.IX Subsection "Attributes"
Boolean attributes still return boolean values but the actual values
used may be different, i.e., 0 or undef instead of an empty string.
.PP
Some handle attributes are either not supported or have very limited
functionality:
.PP
.Vb 7
\&  ActiveKids
\&  InactiveDestroy
\&  AutoInactiveDestroy
\&  Kids
\&  Taint
\&  TaintIn
\&  TaintOut
.Ve
.PP
(and probably others)
.SS "Tracing"
.IX Subsection "Tracing"
Trace functionality is more limited and the code to handle tracing is
only embedded into DBI:PurePerl if the \s-1DBI_TRACE\s0 environment variable
is defined.  To enable total tracing you can set the \s-1DBI_TRACE\s0
environment variable as usual.  But to enable individual handle
tracing using the \fItrace()\fR method you also need to set the \s-1DBI_TRACE\s0
environment variable, but set it to 0.
.SS "Parameter Usage Checking"
.IX Subsection "Parameter Usage Checking"
The \s-1DBI\s0 does some basic parameter count checking on method calls.
DBI::PurePerl doesn't.
.SS "Speed"
.IX Subsection "Speed"
DBI::PurePerl is slower. Although, with some drivers in some
contexts this may not be very significant for you.
.PP
By way of example... the test.pl script in the \s-1DBI\s0 source
distribution has a simple benchmark that just does:
.PP
.Vb 3
\&    my $null_dbh = DBI\->connect(\*(Aqdbi:NullP:\*(Aq,\*(Aq\*(Aq,\*(Aq\*(Aq);
\&    my $i = 10_000;
\&    $null_dbh\->prepare(\*(Aq\*(Aq) while $i\-\-;
.Ve
.PP
In other words just prepares a statement, creating and destroying
a statement handle, over and over again.  Using the real \s-1DBI\s0 this
runs at ~4550 handles per second whereas DBI::PurePerl manages
~2800 per second on the same machine (not too bad really).
.SS "May not fully support \fIhash()\fP"
.IX Subsection "May not fully support hash()"
If you want to use type 1 hash, i.e., \f(CW\*(C`hash($string,1)\*(C'\fR with
DBI::PurePerl, you'll need version 1.56 or higher of Math::BigInt
(available on \s-1CPAN\s0).
.SS "Doesn't support \fIpreparse()\fP"
.IX Subsection "Doesn't support preparse()"
The \s-1DBI\-\s0>\fIpreparse()\fR method isn't supported in DBI::PurePerl.
.SS "Doesn't support DBD::Proxy"
.IX Subsection "Doesn't support DBD::Proxy"
There's a subtle problem somewhere I've not been able to identify.
DBI::ProxyServer seem to work fine with DBI::PurePerl but DBD::Proxy
does not work 100% (which is sad because that would be far more useful :)
Try re-enabling t/80proxy.t for DBI::PurePerl to see if the problem
that remains will affect you're usage.
.SS "Others"
.IX Subsection "Others"
.Vb 1
\&  can() \- doesn\*(Aqt have any special behaviour
.Ve
.PP
Please let us know if you find any other differences between \s-1DBI\s0
and DBI::PurePerl.
.SH "AUTHORS"
.IX Header "AUTHORS"
Tim Bunce and Jeff Zucker.
.PP
Tim provided the direction and basis for the code.  The original
idea for the module and most of the brute force porting from C to
Perl was by Jeff. Tim then reworked some core parts to boost the
performance and accuracy of the emulation. Thanks also to Randal
Schwartz and John Tobey for patches.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2002  Tim Bunce  Ireland.
.PP
See \s-1COPYRIGHT\s0 section in \s-1DBI\s0.pm for usage and distribution rights.
                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::SQL::Nano.3pm                           0100644 0001750 0001750 00000027443 12566241601 023450  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::SQL::Nano 3"
.TH DBI::SQL::Nano 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::SQL::Nano \- a very tiny SQL engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& BEGIN { $ENV{DBI_SQL_NANO}=1 } # forces use of Nano rather than SQL::Statement
\& use DBI::SQL::Nano;
\& use Data::Dumper;
\& my $stmt = DBI::SQL::Nano::Statement\->new(
\&     "SELECT bar,baz FROM foo WHERE qux = 1"
\& ) or die "Couldn\*(Aqt parse";
\& print Dumper $stmt;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`DBI::SQL::Nano\*(C'\fR is meant as a \fIvery\fR minimal \s-1SQL\s0 engine for use in
situations where SQL::Statement is not available. In most situations you are
better off installing SQL::Statement although DBI::SQL::Nano may be faster
for some \fBvery\fR simple tasks.
.PP
DBI::SQL::Nano, like SQL::Statement is primarily intended to provide a \s-1SQL\s0
engine for use with some pure perl DBDs including \s-1DBD::DBM\s0, \s-1DBD::CSV\s0,
DBD::AnyData, and DBD::Excel. It is not of much use in and of itself.
You can dump out the structure of a parsed \s-1SQL\s0 statement, but that is about
it.
.SH "USAGE"
.IX Header "USAGE"
.SS "Setting the \s-1DBI_SQL_NANO\s0 flag"
.IX Subsection "Setting the DBI_SQL_NANO flag"
By default, when a \f(CW\*(C`DBD\*(C'\fR uses \f(CW\*(C`DBI::SQL::Nano\*(C'\fR, the module will
look to see if \f(CW\*(C`SQL::Statement\*(C'\fR is installed. If it is, SQL::Statement
objects are used.  If SQL::Statement is not available, DBI::SQL::Nano
objects are used.
.PP
In some cases, you may wish to use DBI::SQL::Nano objects even if
SQL::Statement is available.  To force usage of DBI::SQL::Nano objects
regardless of the availability of SQL::Statement, set the environment
variable \s-1DBI_SQL_NANO\s0 to 1.
.PP
You can set the environment variable in your shell prior to running your
script (with \s-1SET\s0 or \s-1EXPORT\s0 or whatever), or else you can set it in your
script by putting this at the top of the script:
.PP
.Vb 1
\& BEGIN { $ENV{DBI_SQL_NANO} = 1 }
.Ve
.SS "Supported \s-1SQL\s0 syntax"
.IX Subsection "Supported SQL syntax"
.Vb 2
\& Here\*(Aqs a pseudo\-BNF.  Square brackets [] indicate optional items;
\& Angle brackets <> indicate items defined elsewhere in the BNF.
\&
\&  statement ::=
\&      DROP TABLE [IF EXISTS] <table_name>
\&    | CREATE TABLE <table_name> <col_def_list>
\&    | INSERT INTO <table_name> [<insert_col_list>] VALUES <val_list>
\&    | DELETE FROM <table_name> [<where_clause>]
\&    | UPDATE <table_name> SET <set_clause> <where_clause>
\&    | SELECT <select_col_list> FROM <table_name> [<where_clause>]
\&                                                 [<order_clause>]
\&
\&  the optional IF EXISTS clause ::=
\&    * similar to MySQL \- prevents errors when trying to drop
\&      a table that doesn\*(Aqt exist
\&
\&  identifiers ::=
\&    * table and column names should be valid SQL identifiers
\&    * especially avoid using spaces and commas in identifiers
\&    * note: there is no error checking for invalid names, some
\&      will be accepted, others will cause parse failures
\&
\&  table_name ::=
\&    * only one table (no multiple table operations)
\&    * see identifier for valid table names
\&
\&  col_def_list ::=
\&    * a parens delimited, comma\-separated list of column names
\&    * see identifier for valid column names
\&    * column types and column constraints may be included but are ignored
\&      e.g. these are all the same:
\&        (id,phrase)
\&        (id INT, phrase VARCHAR(40))
\&        (id INT PRIMARY KEY, phrase VARCHAR(40) NOT NULL)
\&    * you are *strongly* advised to put in column types even though
\&      they are ignored ... it increases portability
\&
\&  insert_col_list ::=
\&    * a parens delimited, comma\-separated list of column names
\&    * as in standard SQL, this is optional
\&
\&  select_col_list ::=
\&    * a comma\-separated list of column names
\&    * or an asterisk denoting all columns
\&
\&  val_list ::=
\&    * a parens delimited, comma\-separated list of values which can be:
\&       * placeholders (an unquoted question mark)
\&       * numbers (unquoted numbers)
\&       * column names (unquoted strings)
\&       * nulls (unquoted word NULL)
\&       * strings (delimited with single quote marks);
\&       * note: leading and trailing percent mark (%) and underscore (_)
\&         can be used as wildcards in quoted strings for use with
\&         the LIKE and CLIKE operators
\&       * note: escaped single quotation marks within strings are not
\&         supported, neither are embedded commas, use placeholders instead
\&
\&  set_clause ::=
\&    * a comma\-separated list of column = value pairs
\&    * see val_list for acceptable value formats
\&
\&  where_clause ::=
\&    * a single "column/value <op> column/value" predicate, optionally
\&      preceded by "NOT"
\&    * note: multiple predicates combined with ORs or ANDs are not supported
\&    * see val_list for acceptable value formats
\&    * op may be one of:
\&         < > >= <= = <> LIKE CLIKE IS
\&    * CLIKE is a case insensitive LIKE
\&
\&  order_clause ::= column_name [ASC|DESC]
\&    * a single column optional ORDER BY clause is supported
\&    * as in standard SQL, if neither ASC (ascending) nor
\&      DESC (descending) is specified, ASC becomes the default
.Ve
.SH "TABLES"
.IX Header "TABLES"
DBI::SQL::Nano::Statement operates on exactly one table. This table will be
opened by inherit from DBI::SQL::Nano::Statement and implements the
\&\f(CW\*(C`open_table\*(C'\fR method.
.PP
.Vb 5
\&  sub open_table ($$$$$)
\&  {
\&      ...
\&      return Your::Table\->new( \e%attributes );
\&  }
.Ve
.PP
DBI::SQL::Nano::Statement_ expects a rudimentary interface is implemented by
the table object, as well as SQL::Statement expects.
.PP
.Vb 1
\&  package Your::Table;
\&
\&  use vars qw(@ISA);
\&  @ISA = qw(DBI::SQL::Nano::Table);
\&
\&  sub drop ($$)        { ... }
\&  sub fetch_row ($$$)  { ... }
\&  sub push_row ($$$)   { ... }
\&  sub push_names ($$$) { ... }
\&  sub truncate ($$)    { ... }
\&  sub seek ($$$$)      { ... }
.Ve
.PP
The base class interfaces are provided by DBI::SQL::Nano::Table_ in case of
relying on DBI::SQL::Nano or SQL::Eval::Table (see SQL::Eval for details)
otherwise.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
There are no known bugs in DBI::SQL::Nano::Statement. If you find a one
and want to report, please see \s-1DBI\s0 for how to report bugs.
.PP
DBI::SQL::Nano::Statement is designed to provide a minimal subset for
executing \s-1SQL\s0 statements.
.PP
The most important limitation might be the restriction on one table per
statement. This implies, that no JOINs are supported and there cannot be
any foreign key relation between tables.
.PP
The where clause evaluation of DBI::SQL::Nano::Statement is very slow
(SQL::Statement uses a precompiled evaluation).
.PP
\&\s-1INSERT\s0 can handle only one row per statement. To insert multiple rows,
use placeholders as explained in \s-1DBI.\s0
.PP
The DBI::SQL::Nano parser is very limited and does not support any
additional syntax such as brackets, comments, functions, aggregations
etc.
.PP
In contrast to SQL::Statement, temporary tables are not supported.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Tim Bunce provided the original idea for this module, helped me out of the
tangled trap of namespaces, and provided help and advice all along the way.
Although I wrote it from the ground up, it is based on Jochen Wiedmann's
original design of SQL::Statement, so much of the credit for the \s-1API\s0 goes
to him.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
This module is originally written by Jeff Zucker < jzucker \s-1AT\s0 cpan.org >
.PP
This module is currently maintained by Jens Rehsack < jrehsack \s-1AT\s0 cpan.org >
.PP
Copyright (C) 2010 by Jens Rehsack, all rights reserved.
Copyright (C) 2004 by Jeff Zucker, all rights reserved.
.PP
You may freely distribute and/or modify this module under the terms of
either the \s-1GNU\s0 General Public License (\s-1GPL\s0) or the Artistic License,
as specified in the Perl \s-1README\s0 file.
                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::SQL::Nano5.16.3pm                       0100644 0001750 0001750 00000027122 12566241577 023770  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::SQL::Nano 3"
.TH DBI::SQL::Nano 3 "2010-12-21" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::SQL::Nano \- a very tiny SQL engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& BEGIN { $ENV{DBI_SQL_NANO}=1 } # forces use of Nano rather than SQL::Statement
\& use DBI::SQL::Nano;
\& use Data::Dumper;
\& my $stmt = DBI::SQL::Nano::Statement\->new(
\&     "SELECT bar,baz FROM foo WHERE qux = 1"
\& ) or die "Couldn\*(Aqt parse";
\& print Dumper $stmt;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`DBI::SQL::Nano\*(C'\fR is meant as a \fIvery\fR minimal \s-1SQL\s0 engine for use in
situations where SQL::Statement is not available. In most situations you are
better off installing SQL::Statement although DBI::SQL::Nano may be faster
for some \fBvery\fR simple tasks.
.PP
DBI::SQL::Nano, like SQL::Statement is primarily intended to provide a \s-1SQL\s0
engine for use with some pure perl DBDs including \s-1DBD::DBM\s0, \s-1DBD::CSV\s0,
DBD::AnyData, and DBD::Excel. It is not of much use in and of itself.
You can dump out the structure of a parsed \s-1SQL\s0 statement, but that is about
it.
.SH "USAGE"
.IX Header "USAGE"
.SS "Setting the \s-1DBI_SQL_NANO\s0 flag"
.IX Subsection "Setting the DBI_SQL_NANO flag"
By default, when a \f(CW\*(C`DBD\*(C'\fR uses \f(CW\*(C`DBI::SQL::Nano\*(C'\fR, the module will
look to see if \f(CW\*(C`SQL::Statement\*(C'\fR is installed. If it is, SQL::Statement
objects are used.  If SQL::Statement is not available, DBI::SQL::Nano
objects are used.
.PP
In some cases, you may wish to use DBI::SQL::Nano objects even if
SQL::Statement is available.  To force usage of DBI::SQL::Nano objects
regardless of the availability of SQL::Statement, set the environment
variable \s-1DBI_SQL_NANO\s0 to 1.
.PP
You can set the environment variable in your shell prior to running your
script (with \s-1SET\s0 or \s-1EXPORT\s0 or whatever), or else you can set it in your
script by putting this at the top of the script:
.PP
.Vb 1
\& BEGIN { $ENV{DBI_SQL_NANO} = 1 }
.Ve
.SS "Supported \s-1SQL\s0 syntax"
.IX Subsection "Supported SQL syntax"
.Vb 2
\& Here\*(Aqs a pseudo\-BNF.  Square brackets [] indicate optional items;
\& Angle brackets <> indicate items defined elsewhere in the BNF.
\&
\&  statement ::=
\&      DROP TABLE [IF EXISTS] <table_name>
\&    | CREATE TABLE <table_name> <col_def_list>
\&    | INSERT INTO <table_name> [<insert_col_list>] VALUES <val_list>
\&    | DELETE FROM <table_name> [<where_clause>]
\&    | UPDATE <table_name> SET <set_clause> <where_clause>
\&    | SELECT <select_col_list> FROM <table_name> [<where_clause>]
\&                                                 [<order_clause>]
\&
\&  the optional IF EXISTS clause ::=
\&    * similar to MySQL \- prevents errors when trying to drop
\&      a table that doesn\*(Aqt exist
\&
\&  identifiers ::=
\&    * table and column names should be valid SQL identifiers
\&    * especially avoid using spaces and commas in identifiers
\&    * note: there is no error checking for invalid names, some
\&      will be accepted, others will cause parse failures
\&
\&  table_name ::=
\&    * only one table (no multiple table operations)
\&    * see identifier for valid table names
\&
\&  col_def_list ::=
\&    * a parens delimited, comma\-separated list of column names
\&    * see identifier for valid column names
\&    * column types and column constraints may be included but are ignored
\&      e.g. these are all the same:
\&        (id,phrase)
\&        (id INT, phrase VARCHAR(40))
\&        (id INT PRIMARY KEY, phrase VARCHAR(40) NOT NULL)
\&    * you are *strongly* advised to put in column types even though
\&      they are ignored ... it increases portability
\&
\&  insert_col_list ::=
\&    * a parens delimited, comma\-separated list of column names
\&    * as in standard SQL, this is optional
\&
\&  select_col_list ::=
\&    * a comma\-separated list of column names
\&    * or an asterisk denoting all columns
\&
\&  val_list ::=
\&    * a parens delimited, comma\-separated list of values which can be:
\&       * placeholders (an unquoted question mark)
\&       * numbers (unquoted numbers)
\&       * column names (unquoted strings)
\&       * nulls (unquoted word NULL)
\&       * strings (delimited with single quote marks);
\&       * note: leading and trailing percent mark (%) and underscore (_)
\&         can be used as wildcards in quoted strings for use with
\&         the LIKE and CLIKE operators
\&       * note: escaped single quotation marks within strings are not
\&         supported, neither are embedded commas, use placeholders instead
\&
\&  set_clause ::=
\&    * a comma\-separated list of column = value pairs
\&    * see val_list for acceptable value formats
\&
\&  where_clause ::=
\&    * a single "column/value <op> column/value" predicate, optionally
\&      preceded by "NOT"
\&    * note: multiple predicates combined with ORs or ANDs are not supported
\&    * see val_list for acceptable value formats
\&    * op may be one of:
\&         < > >= <= = <> LIKE CLIKE IS
\&    * CLIKE is a case insensitive LIKE
\&
\&  order_clause ::= column_name [ASC|DESC]
\&    * a single column optional ORDER BY clause is supported
\&    * as in standard SQL, if neither ASC (ascending) nor
\&      DESC (descending) is specified, ASC becomes the default
.Ve
.SH "TABLES"
.IX Header "TABLES"
DBI::SQL::Nano::Statement operates on exactly one table. This table will be
opened by inherit from DBI::SQL::Nano::Statement and implements the
\&\f(CW\*(C`open_table\*(C'\fR method.
.PP
.Vb 5
\&  sub open_table ($$$$$)
\&  {
\&      ...
\&      return Your::Table\->new( \e%attributes );
\&  }
.Ve
.PP
DBI::SQL::Nano::Statement_ expects a rudimentary interface is implemented by
the table object, as well as SQL::Statement expects.
.PP
.Vb 1
\&  package Your::Table;
\&
\&  use vars qw(@ISA);
\&  @ISA = qw(DBI::SQL::Nano::Table);
\&
\&  sub drop ($$)        { ... }
\&  sub fetch_row ($$$)  { ... }
\&  sub push_row ($$$)   { ... }
\&  sub push_names ($$$) { ... }
\&  sub truncate ($$)    { ... }
\&  sub seek ($$$$)      { ... }
.Ve
.PP
The base class interfaces are provided by DBI::SQL::Nano::Table_ in case of
relying on DBI::SQL::Nano or SQL::Eval::Table (see SQL::Eval for details)
otherwise.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
There are no known bugs in DBI::SQL::Nano::Statement. If you find a one
and want to report, please see \s-1DBI\s0 for how to report bugs.
.PP
DBI::SQL::Nano::Statement is designed to provide a minimal subset for
executing \s-1SQL\s0 statements.
.PP
The most important limitation might be the restriction on one table per
statement. This implies, that no JOINs are supported and there cannot be
any foreign key relation between tables.
.PP
The where clause evaluation of DBI::SQL::Nano::Statement is very slow
(SQL::Statement uses a precompiled evaluation).
.PP
\&\s-1INSERT\s0 can handle only one row per statement. To insert multiple rows,
use placeholders as explained in \s-1DBI\s0.
.PP
The DBI::SQL::Nano parser is very limited and does not support any
additional syntax such as brackets, comments, functions, aggregations
etc.
.PP
In contrast to SQL::Statement, temporary tables are not supported.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Tim Bunce provided the original idea for this module, helped me out of the
tangled trap of namespaces, and provided help and advice all along the way.
Although I wrote it from the ground up, it is based on Jochen Wiedmann's
original design of SQL::Statement, so much of the credit for the \s-1API\s0 goes
to him.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
This module is originally written by Jeff Zucker < jzucker \s-1AT\s0 cpan.org >
.PP
This module is currently maintained by Jens Rehsack < jrehsack \s-1AT\s0 cpan.org >
.PP
Copyright (C) 2010 by Jens Rehsack, all rights reserved.
Copyright (C) 2004 by Jeff Zucker, all rights reserved.
.PP
You may freely distribute and/or modify this module under the terms of
either the \s-1GNU\s0 General Public License (\s-1GPL\s0) or the Artistic License,
as specified in the Perl \s-1README\s0 file.
                                                                                                                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::SQL::Nano5.18.3pm                       0100644 0001750 0001750 00000027443 12566241601 023764  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::SQL::Nano 3"
.TH DBI::SQL::Nano 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::SQL::Nano \- a very tiny SQL engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\& BEGIN { $ENV{DBI_SQL_NANO}=1 } # forces use of Nano rather than SQL::Statement
\& use DBI::SQL::Nano;
\& use Data::Dumper;
\& my $stmt = DBI::SQL::Nano::Statement\->new(
\&     "SELECT bar,baz FROM foo WHERE qux = 1"
\& ) or die "Couldn\*(Aqt parse";
\& print Dumper $stmt;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`DBI::SQL::Nano\*(C'\fR is meant as a \fIvery\fR minimal \s-1SQL\s0 engine for use in
situations where SQL::Statement is not available. In most situations you are
better off installing SQL::Statement although DBI::SQL::Nano may be faster
for some \fBvery\fR simple tasks.
.PP
DBI::SQL::Nano, like SQL::Statement is primarily intended to provide a \s-1SQL\s0
engine for use with some pure perl DBDs including \s-1DBD::DBM\s0, \s-1DBD::CSV\s0,
DBD::AnyData, and DBD::Excel. It is not of much use in and of itself.
You can dump out the structure of a parsed \s-1SQL\s0 statement, but that is about
it.
.SH "USAGE"
.IX Header "USAGE"
.SS "Setting the \s-1DBI_SQL_NANO\s0 flag"
.IX Subsection "Setting the DBI_SQL_NANO flag"
By default, when a \f(CW\*(C`DBD\*(C'\fR uses \f(CW\*(C`DBI::SQL::Nano\*(C'\fR, the module will
look to see if \f(CW\*(C`SQL::Statement\*(C'\fR is installed. If it is, SQL::Statement
objects are used.  If SQL::Statement is not available, DBI::SQL::Nano
objects are used.
.PP
In some cases, you may wish to use DBI::SQL::Nano objects even if
SQL::Statement is available.  To force usage of DBI::SQL::Nano objects
regardless of the availability of SQL::Statement, set the environment
variable \s-1DBI_SQL_NANO\s0 to 1.
.PP
You can set the environment variable in your shell prior to running your
script (with \s-1SET\s0 or \s-1EXPORT\s0 or whatever), or else you can set it in your
script by putting this at the top of the script:
.PP
.Vb 1
\& BEGIN { $ENV{DBI_SQL_NANO} = 1 }
.Ve
.SS "Supported \s-1SQL\s0 syntax"
.IX Subsection "Supported SQL syntax"
.Vb 2
\& Here\*(Aqs a pseudo\-BNF.  Square brackets [] indicate optional items;
\& Angle brackets <> indicate items defined elsewhere in the BNF.
\&
\&  statement ::=
\&      DROP TABLE [IF EXISTS] <table_name>
\&    | CREATE TABLE <table_name> <col_def_list>
\&    | INSERT INTO <table_name> [<insert_col_list>] VALUES <val_list>
\&    | DELETE FROM <table_name> [<where_clause>]
\&    | UPDATE <table_name> SET <set_clause> <where_clause>
\&    | SELECT <select_col_list> FROM <table_name> [<where_clause>]
\&                                                 [<order_clause>]
\&
\&  the optional IF EXISTS clause ::=
\&    * similar to MySQL \- prevents errors when trying to drop
\&      a table that doesn\*(Aqt exist
\&
\&  identifiers ::=
\&    * table and column names should be valid SQL identifiers
\&    * especially avoid using spaces and commas in identifiers
\&    * note: there is no error checking for invalid names, some
\&      will be accepted, others will cause parse failures
\&
\&  table_name ::=
\&    * only one table (no multiple table operations)
\&    * see identifier for valid table names
\&
\&  col_def_list ::=
\&    * a parens delimited, comma\-separated list of column names
\&    * see identifier for valid column names
\&    * column types and column constraints may be included but are ignored
\&      e.g. these are all the same:
\&        (id,phrase)
\&        (id INT, phrase VARCHAR(40))
\&        (id INT PRIMARY KEY, phrase VARCHAR(40) NOT NULL)
\&    * you are *strongly* advised to put in column types even though
\&      they are ignored ... it increases portability
\&
\&  insert_col_list ::=
\&    * a parens delimited, comma\-separated list of column names
\&    * as in standard SQL, this is optional
\&
\&  select_col_list ::=
\&    * a comma\-separated list of column names
\&    * or an asterisk denoting all columns
\&
\&  val_list ::=
\&    * a parens delimited, comma\-separated list of values which can be:
\&       * placeholders (an unquoted question mark)
\&       * numbers (unquoted numbers)
\&       * column names (unquoted strings)
\&       * nulls (unquoted word NULL)
\&       * strings (delimited with single quote marks);
\&       * note: leading and trailing percent mark (%) and underscore (_)
\&         can be used as wildcards in quoted strings for use with
\&         the LIKE and CLIKE operators
\&       * note: escaped single quotation marks within strings are not
\&         supported, neither are embedded commas, use placeholders instead
\&
\&  set_clause ::=
\&    * a comma\-separated list of column = value pairs
\&    * see val_list for acceptable value formats
\&
\&  where_clause ::=
\&    * a single "column/value <op> column/value" predicate, optionally
\&      preceded by "NOT"
\&    * note: multiple predicates combined with ORs or ANDs are not supported
\&    * see val_list for acceptable value formats
\&    * op may be one of:
\&         < > >= <= = <> LIKE CLIKE IS
\&    * CLIKE is a case insensitive LIKE
\&
\&  order_clause ::= column_name [ASC|DESC]
\&    * a single column optional ORDER BY clause is supported
\&    * as in standard SQL, if neither ASC (ascending) nor
\&      DESC (descending) is specified, ASC becomes the default
.Ve
.SH "TABLES"
.IX Header "TABLES"
DBI::SQL::Nano::Statement operates on exactly one table. This table will be
opened by inherit from DBI::SQL::Nano::Statement and implements the
\&\f(CW\*(C`open_table\*(C'\fR method.
.PP
.Vb 5
\&  sub open_table ($$$$$)
\&  {
\&      ...
\&      return Your::Table\->new( \e%attributes );
\&  }
.Ve
.PP
DBI::SQL::Nano::Statement_ expects a rudimentary interface is implemented by
the table object, as well as SQL::Statement expects.
.PP
.Vb 1
\&  package Your::Table;
\&
\&  use vars qw(@ISA);
\&  @ISA = qw(DBI::SQL::Nano::Table);
\&
\&  sub drop ($$)        { ... }
\&  sub fetch_row ($$$)  { ... }
\&  sub push_row ($$$)   { ... }
\&  sub push_names ($$$) { ... }
\&  sub truncate ($$)    { ... }
\&  sub seek ($$$$)      { ... }
.Ve
.PP
The base class interfaces are provided by DBI::SQL::Nano::Table_ in case of
relying on DBI::SQL::Nano or SQL::Eval::Table (see SQL::Eval for details)
otherwise.
.SH "BUGS AND LIMITATIONS"
.IX Header "BUGS AND LIMITATIONS"
There are no known bugs in DBI::SQL::Nano::Statement. If you find a one
and want to report, please see \s-1DBI\s0 for how to report bugs.
.PP
DBI::SQL::Nano::Statement is designed to provide a minimal subset for
executing \s-1SQL\s0 statements.
.PP
The most important limitation might be the restriction on one table per
statement. This implies, that no JOINs are supported and there cannot be
any foreign key relation between tables.
.PP
The where clause evaluation of DBI::SQL::Nano::Statement is very slow
(SQL::Statement uses a precompiled evaluation).
.PP
\&\s-1INSERT\s0 can handle only one row per statement. To insert multiple rows,
use placeholders as explained in \s-1DBI.\s0
.PP
The DBI::SQL::Nano parser is very limited and does not support any
additional syntax such as brackets, comments, functions, aggregations
etc.
.PP
In contrast to SQL::Statement, temporary tables are not supported.
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Tim Bunce provided the original idea for this module, helped me out of the
tangled trap of namespaces, and provided help and advice all along the way.
Although I wrote it from the ground up, it is based on Jochen Wiedmann's
original design of SQL::Statement, so much of the credit for the \s-1API\s0 goes
to him.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
This module is originally written by Jeff Zucker < jzucker \s-1AT\s0 cpan.org >
.PP
This module is currently maintained by Jens Rehsack < jrehsack \s-1AT\s0 cpan.org >
.PP
Copyright (C) 2010 by Jens Rehsack, all rights reserved.
Copyright (C) 2004 by Jeff Zucker, all rights reserved.
.PP
You may freely distribute and/or modify this module under the terms of
either the \s-1GNU\s0 General Public License (\s-1GPL\s0) or the Artistic License,
as specified in the Perl \s-1README\s0 file.
                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Util::CacheMemory.3pm                   0100644 0001750 0001750 00000012177 12566241601 025225  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Util::CacheMemory 3"
.TH DBI::Util::CacheMemory 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Util::CacheMemory \- a very fast but very minimal subset of Cache::Memory
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Like Cache::Memory (part of the Cache distribution) but doesn't support any fancy features.
.PP
This module aims to be a very fast compatible strict sub-set for simple cases,
such as basic client-side caching for DBD::Gofer.
.PP
Like Cache::Memory, and other caches in the Cache and Cache::Cache
distributions, the data will remain in the cache until cleared, it expires,
or the process dies. The cache object simply going out of scope will \fInot\fR
destroy the data.
.SH "METHODS WITH CHANGES"
.IX Header "METHODS WITH CHANGES"
.SS "new"
.IX Subsection "new"
All options except \f(CW\*(C`namespace\*(C'\fR are ignored.
.SS "set"
.IX Subsection "set"
Doesn't support expiry.
.SS "purge"
.IX Subsection "purge"
Same as \fIclear()\fR \- deletes everything in the namespace.
.SH "METHODS WITHOUT CHANGES"
.IX Header "METHODS WITHOUT CHANGES"
.IP "clear" 4
.IX Item "clear"
.PD 0
.IP "count" 4
.IX Item "count"
.IP "exists" 4
.IX Item "exists"
.IP "remove" 4
.IX Item "remove"
.PD
.SH "UNSUPPORTED METHODS"
.IX Header "UNSUPPORTED METHODS"
If it's not listed above, it's not supported.
                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Util::CacheMemory5.16.3pm               0100644 0001750 0001750 00000011656 12566241577 025554  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Util::CacheMemory 3"
.TH DBI::Util::CacheMemory 3 "2007-11-26" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Util::CacheMemory \- a very fast but very minimal subset of Cache::Memory
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Like Cache::Memory (part of the Cache distribution) but doesn't support any fancy features.
.PP
This module aims to be a very fast compatible strict sub-set for simple cases,
such as basic client-side caching for DBD::Gofer.
.PP
Like Cache::Memory, and other caches in the Cache and Cache::Cache
distributions, the data will remain in the cache until cleared, it expires,
or the process dies. The cache object simply going out of scope will \fInot\fR
destroy the data.
.SH "METHODS WITH CHANGES"
.IX Header "METHODS WITH CHANGES"
.SS "new"
.IX Subsection "new"
All options except \f(CW\*(C`namespace\*(C'\fR are ignored.
.SS "set"
.IX Subsection "set"
Doesn't support expiry.
.SS "purge"
.IX Subsection "purge"
Same as \fIclear()\fR \- deletes everything in the namespace.
.SH "METHODS WITHOUT CHANGES"
.IX Header "METHODS WITHOUT CHANGES"
.IP "clear" 4
.IX Item "clear"
.PD 0
.IP "count" 4
.IX Item "count"
.IP "exists" 4
.IX Item "exists"
.IP "remove" 4
.IX Item "remove"
.PD
.SH "UNSUPPORTED METHODS"
.IX Header "UNSUPPORTED METHODS"
If it's not listed above, it's not supported.
                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::Util::CacheMemory5.18.3pm               0100644 0001750 0001750 00000012177 12566241601 025541  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::Util::CacheMemory 3"
.TH DBI::Util::CacheMemory 3 "2013-06-24" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::Util::CacheMemory \- a very fast but very minimal subset of Cache::Memory
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Like Cache::Memory (part of the Cache distribution) but doesn't support any fancy features.
.PP
This module aims to be a very fast compatible strict sub-set for simple cases,
such as basic client-side caching for DBD::Gofer.
.PP
Like Cache::Memory, and other caches in the Cache and Cache::Cache
distributions, the data will remain in the cache until cleared, it expires,
or the process dies. The cache object simply going out of scope will \fInot\fR
destroy the data.
.SH "METHODS WITH CHANGES"
.IX Header "METHODS WITH CHANGES"
.SS "new"
.IX Subsection "new"
All options except \f(CW\*(C`namespace\*(C'\fR are ignored.
.SS "set"
.IX Subsection "set"
Doesn't support expiry.
.SS "purge"
.IX Subsection "purge"
Same as \fIclear()\fR \- deletes everything in the namespace.
.SH "METHODS WITHOUT CHANGES"
.IX Header "METHODS WITHOUT CHANGES"
.IP "clear" 4
.IX Item "clear"
.PD 0
.IP "count" 4
.IX Item "count"
.IP "exists" 4
.IX Item "exists"
.IP "remove" 4
.IX Item "remove"
.PD
.SH "UNSUPPORTED METHODS"
.IX Header "UNSUPPORTED METHODS"
If it's not listed above, it's not supported.
                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::W32ODBC.3pm                             0100644 0001750 0001750 00000011350 12566241601 023002  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::W32ODBC 3"
.TH DBI::W32ODBC 3 "2013-05-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::W32ODBC \- An experimental DBI emulation layer for Win32::ODBC
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DBI::W32ODBC;
\&
\&  # apart from the line above everything is just the same as with
\&  # the real DBI when using a basic driver with few features.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an experimental pure perl \s-1DBI\s0 emulation layer for Win32::ODBC
.PP
If you can improve this code I'd be interested in hearing about it. If
you are having trouble using it please respect the fact that it's very
experimental. Ideally fix it yourself and send me the details.
.SS "Some Things Not Yet Implemented"
.IX Subsection "Some Things Not Yet Implemented"
.Vb 2
\&        Most attributes including PrintError & RaiseError.
\&        type_info and table_info
.Ve
.PP
Volunteers welcome!
                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::W32ODBC5.16.3pm                         0100644 0001750 0001750 00000011027 12566241600 023314  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::W32ODBC 3"
.TH DBI::W32ODBC 3 "2007-01-24" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::W32ODBC \- An experimental DBI emulation layer for Win32::ODBC
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DBI::W32ODBC;
\&
\&  # apart from the line above everything is just the same as with
\&  # the real DBI when using a basic driver with few features.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an experimental pure perl \s-1DBI\s0 emulation layer for Win32::ODBC
.PP
If you can improve this code I'd be interested in hearing about it. If
you are having trouble using it please respect the fact that it's very
experimental. Ideally fix it yourself and send me the details.
.SS "Some Things Not Yet Implemented"
.IX Subsection "Some Things Not Yet Implemented"
.Vb 2
\&        Most attributes including PrintError & RaiseError.
\&        type_info and table_info
.Ve
.PP
Volunteers welcome!
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBI::W32ODBC5.18.3pm                         0100644 0001750 0001750 00000011350 12566241601 023316  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBI::W32ODBC 3"
.TH DBI::W32ODBC 3 "2013-05-23" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBI::W32ODBC \- An experimental DBI emulation layer for Win32::ODBC
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use DBI::W32ODBC;
\&
\&  # apart from the line above everything is just the same as with
\&  # the real DBI when using a basic driver with few features.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an experimental pure perl \s-1DBI\s0 emulation layer for Win32::ODBC
.PP
If you can improve this code I'd be interested in hearing about it. If
you are having trouble using it please respect the fact that it's very
experimental. Ideally fix it yourself and send me the details.
.SS "Some Things Not Yet Implemented"
.IX Subsection "Some Things Not Yet Implemented"
.Vb 2
\&        Most attributes including PrintError & RaiseError.
\&        type_info and table_info
.Ve
.PP
Volunteers welcome!
                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class.3pm                              0100644 0001750 0001750 00000044100 12566242400 023231  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class 3"
.TH DBIx::Class 3 "2014-01-30" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class \- Extensible and flexible object <\-> relational mapper.
.SH "WHERE TO START READING"
.IX Header "WHERE TO START READING"
See DBIx::Class::Manual::DocMap for an overview of the exhaustive documentation.
To get the most out of DBIx::Class with the least confusion it is strongly
recommended to read (at the very least) the
Manuals in the order presented there.
.SH "HOW TO GET HELP"
.IX Header "HOW TO GET HELP"
Due to the complexity of its problem domain, DBIx::Class is a relatively
complex framework. After you start using DBIx::Class questions will inevitably
arise. If you are stuck with a problem or have doubts about a particular
approach do not hesitate to contact the community with your questions. The
list below is sorted by \*(L"fastest response time\*(R":
.IP "\(bu" 4
\&\s-1IRC:\s0 irc.perl.org#dbix\-class
.IP "\(bu" 4
Mailing list: <http://lists.scsys.co.uk/mailman/listinfo/dbix\-class>
.IP "\(bu" 4
\&\s-1RT\s0 Bug Tracker: <https://rt.cpan.org/NoAuth/Bugs.html?Dist=DBIx\-Class>
.IP "\(bu" 4
Twitter: <https://www.twitter.com/dbix_class>
.IP "\(bu" 4
Web Site: <http://www.dbix\-class.org/>
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
For the very impatient: DBIx::Class::Manual::QuickStart
.PP
This code in the next step can be generated automatically from an existing
database, see dbicdump from the distribution \f(CW\*(C`DBIx\-Class\-Schema\-Loader\*(C'\fR.
.SS "Schema classes preparation"
.IX Subsection "Schema classes preparation"
Create a schema class called \fIMyApp/Schema.pm\fR:
.PP
.Vb 2
\&  package MyApp::Schema;
\&  use base qw/DBIx::Class::Schema/;
\&
\&  _\|_PACKAGE_\|_\->load_namespaces();
\&
\&  1;
.Ve
.PP
Create a result class to represent artists, who have many CDs, in
\&\fIMyApp/Schema/Result/Artist.pm\fR:
.PP
See DBIx::Class::ResultSource for docs on defining result classes.
.PP
.Vb 2
\&  package MyApp::Schema::Result::Artist;
\&  use base qw/DBIx::Class::Core/;
\&
\&  _\|_PACKAGE_\|_\->table(\*(Aqartist\*(Aq);
\&  _\|_PACKAGE_\|_\->add_columns(qw/ artistid name /);
\&  _\|_PACKAGE_\|_\->set_primary_key(\*(Aqartistid\*(Aq);
\&  _\|_PACKAGE_\|_\->has_many(cds => \*(AqMyApp::Schema::Result::CD\*(Aq, \*(Aqartistid\*(Aq);
\&
\&  1;
.Ve
.PP
A result class to represent a \s-1CD,\s0 which belongs to an artist, in
\&\fIMyApp/Schema/Result/CD.pm\fR:
.PP
.Vb 2
\&  package MyApp::Schema::Result::CD;
\&  use base qw/DBIx::Class::Core/;
\&
\&  _\|_PACKAGE_\|_\->load_components(qw/InflateColumn::DateTime/);
\&  _\|_PACKAGE_\|_\->table(\*(Aqcd\*(Aq);
\&  _\|_PACKAGE_\|_\->add_columns(qw/ cdid artistid title year /);
\&  _\|_PACKAGE_\|_\->set_primary_key(\*(Aqcdid\*(Aq);
\&  _\|_PACKAGE_\|_\->belongs_to(artist => \*(AqMyApp::Schema::Result::Artist\*(Aq, \*(Aqartistid\*(Aq);
\&
\&  1;
.Ve
.SS "\s-1API\s0 usage"
.IX Subsection "API usage"
Then you can use these classes in your application's code:
.PP
.Vb 3
\&  # Connect to your database.
\&  use MyApp::Schema;
\&  my $schema = MyApp::Schema\->connect($dbi_dsn, $user, $pass, \e%dbi_params);
\&
\&  # Query for all artists and put them in an array,
\&  # or retrieve them as a result set object.
\&  # $schema\->resultset returns a DBIx::Class::ResultSet
\&  my @all_artists = $schema\->resultset(\*(AqArtist\*(Aq)\->all;
\&  my $all_artists_rs = $schema\->resultset(\*(AqArtist\*(Aq);
\&
\&  # Output all artists names
\&  # $artist here is a DBIx::Class::Row, which has accessors
\&  # for all its columns. Rows are also subclasses of your Result class.
\&  foreach $artist (@all_artists) {
\&    print $artist\->name, "\en";
\&  }
\&
\&  # Create a result set to search for artists.
\&  # This does not query the DB.
\&  my $johns_rs = $schema\->resultset(\*(AqArtist\*(Aq)\->search(
\&    # Build your WHERE using an SQL::Abstract structure:
\&    { name => { like => \*(AqJohn%\*(Aq } }
\&  );
\&
\&  # Execute a joined query to get the cds.
\&  my @all_john_cds = $johns_rs\->search_related(\*(Aqcds\*(Aq)\->all;
\&
\&  # Fetch the next available row.
\&  my $first_john = $johns_rs\->next;
\&
\&  # Specify ORDER BY on the query.
\&  my $first_john_cds_by_title_rs = $first_john\->cds(
\&    undef,
\&    { order_by => \*(Aqtitle\*(Aq }
\&  );
\&
\&  # Create a result set that will fetch the artist data
\&  # at the same time as it fetches CDs, using only one query.
\&  my $millennium_cds_rs = $schema\->resultset(\*(AqCD\*(Aq)\->search(
\&    { year => 2000 },
\&    { prefetch => \*(Aqartist\*(Aq }
\&  );
\&
\&  my $cd = $millennium_cds_rs\->next; # SELECT ... FROM cds JOIN artists ...
\&  my $cd_artist_name = $cd\->artist\->name; # Already has the data so no 2nd query
\&
\&  # new() makes a Result object but doesnt insert it into the DB.
\&  # create() is the same as new() then insert().
\&  my $new_cd = $schema\->resultset(\*(AqCD\*(Aq)\->new({ title => \*(AqSpoon\*(Aq });
\&  $new_cd\->artist($cd\->artist);
\&  $new_cd\->insert; # Auto\-increment primary key filled in after INSERT
\&  $new_cd\->title(\*(AqFork\*(Aq);
\&
\&  $schema\->txn_do(sub { $new_cd\->update }); # Runs the update in a transaction
\&
\&  # change the year of all the millennium CDs at once
\&  $millennium_cds_rs\->update({ year => 2002 });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an \s-1SQL\s0 to \s-1OO\s0 mapper with an object \s-1API\s0 inspired by Class::DBI
(with a compatibility layer as a springboard for porting) and a resultset \s-1API\s0
that allows abstract encapsulation of database operations. It aims to make
representing queries in your code as perl-ish as possible while still
providing access to as many of the capabilities of the database as possible,
including retrieving related records from multiple tables in a single query,
\&\f(CW\*(C`JOIN\*(C'\fR, \f(CW\*(C`LEFT JOIN\*(C'\fR, \f(CW\*(C`COUNT\*(C'\fR, \f(CW\*(C`DISTINCT\*(C'\fR, \f(CW\*(C`GROUP BY\*(C'\fR, \f(CW\*(C`ORDER BY\*(C'\fR and
\&\f(CW\*(C`HAVING\*(C'\fR support.
.PP
DBIx::Class can handle multi-column primary and foreign keys, complex
queries and database-level paging, and does its best to only query the
database in order to return something you've directly asked for. If a
resultset is used as an iterator it only fetches rows off the statement
handle as requested in order to minimise memory usage. It has auto-increment
support for SQLite, MySQL, PostgreSQL, Oracle, \s-1SQL\s0 Server and \s-1DB2\s0 and is
known to be used in production on at least the first four, and is fork\-
and thread-safe out of the box (although
your \s-1DBD\s0 may not be).
.PP
This project is still under rapid development, so large new features may be
marked \fBexperimental\fR \- such APIs are still usable but may have edge bugs.
Failing test cases are \fIalways\fR welcome and point releases are put out rapidly
as bugs are found and fixed.
.PP
We do our best to maintain full backwards compatibility for published
APIs, since DBIx::Class is used in production in many organisations,
and even backwards incompatible changes to non-published APIs will be fixed
if they're reported and doing so doesn't cost the codebase anything.
.PP
The test suite is quite substantial, and several developer releases
are generally made to \s-1CPAN\s0 before the branch for the next release is
merged back to trunk for a major release.
.SH "HOW TO CONTRIBUTE"
.IX Header "HOW TO CONTRIBUTE"
Contributions are always welcome, in all usable forms (we especially
welcome documentation improvements). The delivery methods include git\-
or unified-diff formatted patches, GitHub pull requests, or plain bug
reports either via \s-1RT\s0 or the Mailing list. Contributors are generally
granted full access to the official repository after their first patch
passes successful review.
.PP
This project is maintained in a git repository. The code and related tools are
accessible at the following locations:
.IP "\(bu" 4
Official repo: <git://git.shadowcat.co.uk/dbsrgits/DBIx\-Class.git>
.IP "\(bu" 4
Official gitweb: <http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=dbsrgits/DBIx\-Class.git>
.IP "\(bu" 4
GitHub mirror: <https://github.com/dbsrgits/DBIx\-Class>
.IP "\(bu" 4
Authorized committers: <ssh://dbsrgits@git.shadowcat.co.uk/DBIx\-Class.git>
.IP "\(bu" 4
Travis-CI log: <https://travis\-ci.org/dbsrgits/dbix\-class/builds>
.SH "AUTHOR"
.IX Header "AUTHOR"
mst: Matt S. Trout <mst@shadowcatsystems.co.uk>
.PP
(I mostly consider myself \*(L"project founder\*(R" these days but the \s-1AUTHOR\s0 heading
is traditional :)
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
abraxxa: Alexander Hartmaier <abraxxa@cpan.org>
.PP
acca: Alexander Kuznetsov <acca@cpan.org>
.PP
aherzog: Adam Herzog <adam@herzogdesigns.com>
.PP
Alexander Keusch <cpan@keusch.at>
.PP
alexrj: Alessandro Ranellucci <aar@cpan.org>
.PP
alnewkirk: Al Newkirk <we@ana.im>
.PP
amiri: Amiri Barksdale <amiri@metalabel.com>
.PP
amoore: Andrew Moore <amoore@cpan.org>
.PP
andrewalker: Andre Walker <andre@andrewalker.net>
.PP
andyg: Andy Grundman <andy@hybridized.org>
.PP
ank: Andres Kievsky
.PP
arc: Aaron Crane <arc@cpan.org>
.PP
arcanez: Justin Hunter <justin.d.hunter@gmail.com>
.PP
ash: Ash Berlin <ash@cpan.org>
.PP
bert: Norbert Csongra\*'di <bert@cpan.org>
.PP
blblack: Brandon L. Black <blblack@gmail.com>
.PP
bluefeet: Aran Deltac <bluefeet@cpan.org>
.PP
bphillips: Brian Phillips <bphillips@cpan.org>
.PP
boghead: Bryan Beeley <cpan@beeley.org>
.PP
brd: Brad Davis <brd@FreeBSD.org>
.PP
bricas: Brian Cassidy <bricas@cpan.org>
.PP
brunov: Bruno Vecchi <vecchi.b@gmail.com>
.PP
caelum: Rafael Kitover <rkitover@cpan.org>
.PP
caldrin: Maik Hentsche <maik.hentsche@amd.com>
.PP
castaway: Jess Robinson
.PP
claco: Christopher H. Laco
.PP
clkao: \s-1CL\s0 Kao
.PP
da5id: David Jack Olrik <djo@cpan.org>
.PP
dariusj: Darius Jokilehto <dariusjokilehto@yahoo.co.uk>
.PP
davewood: David Schmidt <davewood@gmx.at>
.PP
daxim: Lars \s-1DXXXXXX XXX\s0 <daxim@cpan.org>
.PP
debolaz: Anders Nor Berle <berle@cpan.org>
.PP
dew: Dan Thomas <dan@godders.org>
.PP
dkubb: Dan Kubb <dan.kubb\-cpan@onautopilot.com>
.PP
dnm: Justin Wheeler <jwheeler@datademons.com>
.PP
dpetrov: Dimitar Petrov <mitakaa@gmail.com>
.PP
dwc: Daniel Westermann-Clark <danieltwc@cpan.org>
.PP
dyfrgi: Michael Leuchtenburg <michael@slashhome.org>
.PP
edenc: Eden Cardim <edencardim@gmail.com>
.PP
ether: Karen Etheridge <ether@cpan.org>
.PP
felliott: Fitz Elliott <fitz.elliott@gmail.com>
.PP
freetime: Bill Moseley <moseley@hank.org>
.PP
frew: Arthur Axel \*(L"fREW\*(R" Schmidt <frioux@gmail.com>
.PP
goraxe: Gordon Irving <goraxe@cpan.org>
.PP
gphat: Cory G Watson <gphat@cpan.org>
.PP
Grant Street Group <http://www.grantstreet.com/>
.PP
groditi: Guillermo Roditi <groditi@cpan.org>
.PP
Haarg: Graham Knop <haarg@haarg.org>
.PP
hobbs: Andrew Rodland <arodland@cpan.org>
.PP
ilmari: Dagfinn Ilmari Mannsa\*oker <ilmari@ilmari.org>
.PP
initself: Mike Baas <mike@initselftech.com>
.PP
ironcamel: Naveed Massjouni <naveedm9@gmail.com>
.PP
jawnsy: Jonathan Yu <jawnsy@cpan.org>
.PP
jasonmay: Jason May <jason.a.may@gmail.com>
.PP
jesper: Jesper Krogh
.PP
jgoulah: John Goulah <jgoulah@cpan.org>
.PP
jguenther: Justin Guenther <jguenther@cpan.org>
.PP
jhannah: Jay Hannah <jay@jays.net>
.PP
jmac: Jason McIntosh <jmac@appleseed\-sc.com>
.PP
jnapiorkowski: John Napiorkowski <jjn1056@yahoo.com>
.PP
jon: Jon Schutz <jjschutz@cpan.org>
.PP
jshirley: J. Shirley <jshirley@gmail.com>
.PP
kaare: Kaare Rasmussen
.PP
konobi: Scott McWhirter
.PP
littlesavage: Alexey Illarionov <littlesavage@orionet.ru>
.PP
lukes: Luke Saunders <luke.saunders@gmail.com>
.PP
marcus: Marcus Ramberg <mramberg@cpan.org>
.PP
mattlaw: Matt Lawrence
.PP
mattp: Matt Phillips <mattp@cpan.org>
.PP
michaelr: Michael Reddick <michael.reddick@gmail.com>
.PP
milki: Jonathan Chu <milki@rescomp.berkeley.edu>
.PP
mithaldu: Christian Walde <walde.christian@gmail.com>
.PP
mjemmeson: Michael Jemmeson <michael.jemmeson@gmail.com>
.PP
mstratman: Mark A. Stratman <stratman@gmail.com>
.PP
ned: Neil de Carteret
.PP
nigel: Nigel Metheringham <nigelm@cpan.org>
.PP
ningu: David Kamholz <dkamholz@cpan.org>
.PP
Nniuq: Ron \*(L"Quinn\*(R" Straight" <quinnfazigu@gmail.org>
.PP
norbi: Norbert Buchmuller <norbi@nix.hu>
.PP
nuba: Nuba Princigalli <nuba@cpan.org>
.PP
Numa: Dan Sully <daniel@cpan.org>
.PP
ovid: Curtis \*(L"Ovid\*(R" Poe <ovid@cpan.org>
.PP
oyse: O\*/ystein Torget <oystein.torget@dnv.com>
.PP
paulm: Paul Makepeace
.PP
penguin: K J Cheetham
.PP
perigrin: Chris Prather <chris@prather.org>
.PP
peter: Peter Collingbourne <peter@pcc.me.uk>
.PP
Peter Siklo\*'si <einon@einon.hu>
.PP
Peter Valdemar Mo\*/rch <peter@morch.com>
.PP
phaylon: Robert Sedlacek <phaylon@dunkelheit.at>
.PP
plu: Johannes Plunien <plu@cpan.org>
.PP
Possum: Daniel LeWarne <possum@cpan.org>
.PP
quicksilver: Jules Bean
.PP
rafl: Florian Ragwitz <rafl@debian.org>
.PP
rainboxx: Matthias Dietrich <perl@rb.ly>
.PP
rbo: Robert Bohne <rbo@cpan.org>
.PP
rbuels: Robert Buels <rmb32@cornell.edu>
.PP
rdj: Ryan D Johnson <ryan@innerfence.com>
.PP
ribasushi: Peter Rabbitson <ribasushi@cpan.org>
.PP
rjbs: Ricardo Signes <rjbs@cpan.org>
.PP
robkinyon: Rob Kinyon <rkinyon@cpan.org>
.PP
Robert Olson <bob@rdolson.org>
.PP
moltar: Roman Filippov <romanf@cpan.org>
.PP
Sadrak: Felix Antonius Wilhelm Ostmann <sadrak@cpan.org>
.PP
sc_: Just Another Perl Hacker
.PP
scotty: Scotty Allen <scotty@scottyallen.com>
.PP
semifor: Marc Mims <marc@questright.com>
.PP
SineSwiper: Brendan Byrd <bbyrd@cpan.org>
.PP
solomon: Jared Johnson <jaredj@nmgi.com>
.PP
spb: Stephen Bennett <stephen@freenode.net>
.PP
Squeeks <squeek@cpan.org>
.PP
sszabo: Stephan Szabo <sszabo@bigpanda.com>
.PP
talexb: Alex Beamish <talexb@gmail.com>
.PP
tamias: Ronald J Kimball <rjk@tamias.net>
.PP
teejay : Aaron Trevena <teejay@cpan.org>
.PP
Todd Lipcon
.PP
Tom Hukins
.PP
tonvoon: Ton Voon <tonvoon@cpan.org>
.PP
triode: Pete Gamache <gamache@cpan.org>
.PP
typester: Daisuke Murase <typester@cpan.org>
.PP
victori: Victor Igumnov <victori@cpan.org>
.PP
wdh: Will Hawes
.PP
wesm: Wes Malone <wes@mitsi.com>
.PP
willert: Sebastian Willert <willert@cpan.org>
.PP
wreis: Wallace Reis <wreis@cpan.org>
.PP
xenoterracide: Caleb Cushing <xenoterracide@gmail.com>
.PP
yrlnry: Mark Jason Dominus <mjd@plover.com>
.PP
zamolxes: Bogdan Lucaciu <bogdan@wiz.ro>
.PP
Zefram: Andrew Main <zefram@fysh.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 \- 2011 the DBIx::Class \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class5.16.3pm                          0100644 0001750 0001750 00000037647 12566242363 023575  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class 3"
.TH DBIx::Class 3 "2012-10-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class \- Extensible and flexible object <\-> relational mapper.
.SH "GETTING HELP/SUPPORT"
.IX Header "GETTING HELP/SUPPORT"
The community can be found via:
.IP "\(bu" 4
Web Site: http://www.dbix\-class.org/ <http://www.dbix-class.org/>
.IP "\(bu" 4
\&\s-1IRC:\s0 irc.perl.org#dbix\-class
.IP "\(bu" 4
Mailing list: http://lists.scsys.co.uk/mailman/listinfo/dbix\-class <http://lists.scsys.co.uk/mailman/listinfo/dbix-class>
.IP "\(bu" 4
\&\s-1RT\s0 Bug Tracker: https://rt.cpan.org/Dist/Display.html?Queue=DBIx\-Class <https://rt.cpan.org/Dist/Display.html?Queue=DBIx-Class>
.IP "\(bu" 4
gitweb: http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=dbsrgits/DBIx\-Class.git <http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=dbsrgits/DBIx-Class.git>
.IP "\(bu" 4
git: git://git.shadowcat.co.uk/dbsrgits/DBIx\-Class.git <git://git.shadowcat.co.uk/dbsrgits/DBIx-Class.git>
.IP "\(bu" 4
twitter <http://www.twitter.com/dbix_class>
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Create a schema class called MyApp/Schema.pm:
.PP
.Vb 2
\&  package MyApp::Schema;
\&  use base qw/DBIx::Class::Schema/;
\&
\&  _\|_PACKAGE_\|_\->load_namespaces();
\&
\&  1;
.Ve
.PP
Create a result class to represent artists, who have many CDs, in
MyApp/Schema/Result/Artist.pm:
.PP
See DBIx::Class::ResultSource for docs on defining result classes.
.PP
.Vb 2
\&  package MyApp::Schema::Result::Artist;
\&  use base qw/DBIx::Class::Core/;
\&
\&  _\|_PACKAGE_\|_\->table(\*(Aqartist\*(Aq);
\&  _\|_PACKAGE_\|_\->add_columns(qw/ artistid name /);
\&  _\|_PACKAGE_\|_\->set_primary_key(\*(Aqartistid\*(Aq);
\&  _\|_PACKAGE_\|_\->has_many(cds => \*(AqMyApp::Schema::Result::CD\*(Aq, \*(Aqartistid\*(Aq);
\&
\&  1;
.Ve
.PP
A result class to represent a \s-1CD\s0, which belongs to an artist, in
MyApp/Schema/Result/CD.pm:
.PP
.Vb 2
\&  package MyApp::Schema::Result::CD;
\&  use base qw/DBIx::Class::Core/;
\&
\&  _\|_PACKAGE_\|_\->load_components(qw/InflateColumn::DateTime/);
\&  _\|_PACKAGE_\|_\->table(\*(Aqcd\*(Aq);
\&  _\|_PACKAGE_\|_\->add_columns(qw/ cdid artistid title year /);
\&  _\|_PACKAGE_\|_\->set_primary_key(\*(Aqcdid\*(Aq);
\&  _\|_PACKAGE_\|_\->belongs_to(artist => \*(AqMyApp::Schema::Result::Artist\*(Aq, \*(Aqartistid\*(Aq);
\&
\&  1;
.Ve
.PP
Then you can use these classes in your application's code:
.PP
.Vb 3
\&  # Connect to your database.
\&  use MyApp::Schema;
\&  my $schema = MyApp::Schema\->connect($dbi_dsn, $user, $pass, \e%dbi_params);
\&
\&  # Query for all artists and put them in an array,
\&  # or retrieve them as a result set object.
\&  # $schema\->resultset returns a DBIx::Class::ResultSet
\&  my @all_artists = $schema\->resultset(\*(AqArtist\*(Aq)\->all;
\&  my $all_artists_rs = $schema\->resultset(\*(AqArtist\*(Aq);
\&
\&  # Output all artists names
\&  # $artist here is a DBIx::Class::Row, which has accessors
\&  # for all its columns. Rows are also subclasses of your Result class.
\&  foreach $artist (@all_artists) {
\&    print $artist\->name, "\en";
\&  }
\&
\&  # Create a result set to search for artists.
\&  # This does not query the DB.
\&  my $johns_rs = $schema\->resultset(\*(AqArtist\*(Aq)\->search(
\&    # Build your WHERE using an SQL::Abstract structure:
\&    { name => { like => \*(AqJohn%\*(Aq } }
\&  );
\&
\&  # Execute a joined query to get the cds.
\&  my @all_john_cds = $johns_rs\->search_related(\*(Aqcds\*(Aq)\->all;
\&
\&  # Fetch the next available row.
\&  my $first_john = $johns_rs\->next;
\&
\&  # Specify ORDER BY on the query.
\&  my $first_john_cds_by_title_rs = $first_john\->cds(
\&    undef,
\&    { order_by => \*(Aqtitle\*(Aq }
\&  );
\&
\&  # Create a result set that will fetch the artist data
\&  # at the same time as it fetches CDs, using only one query.
\&  my $millennium_cds_rs = $schema\->resultset(\*(AqCD\*(Aq)\->search(
\&    { year => 2000 },
\&    { prefetch => \*(Aqartist\*(Aq }
\&  );
\&
\&  my $cd = $millennium_cds_rs\->next; # SELECT ... FROM cds JOIN artists ...
\&  my $cd_artist_name = $cd\->artist\->name; # Already has the data so no 2nd query
\&
\&  # new() makes a DBIx::Class::Row object but doesnt insert it into the DB.
\&  # create() is the same as new() then insert().
\&  my $new_cd = $schema\->resultset(\*(AqCD\*(Aq)\->new({ title => \*(AqSpoon\*(Aq });
\&  $new_cd\->artist($cd\->artist);
\&  $new_cd\->insert; # Auto\-increment primary key filled in after INSERT
\&  $new_cd\->title(\*(AqFork\*(Aq);
\&
\&  $schema\->txn_do(sub { $new_cd\->update }); # Runs the update in a transaction
\&
\&  # change the year of all the millennium CDs at once
\&  $millennium_cds_rs\->update({ year => 2002 });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an \s-1SQL\s0 to \s-1OO\s0 mapper with an object \s-1API\s0 inspired by Class::DBI
(with a compatibility layer as a springboard for porting) and a resultset \s-1API\s0
that allows abstract encapsulation of database operations. It aims to make
representing queries in your code as perl-ish as possible while still
providing access to as many of the capabilities of the database as possible,
including retrieving related records from multiple tables in a single query,
\&\s-1JOIN\s0, \s-1LEFT\s0 \s-1JOIN\s0, \s-1COUNT\s0, \s-1DISTINCT\s0, \s-1GROUP\s0 \s-1BY\s0, \s-1ORDER\s0 \s-1BY\s0 and \s-1HAVING\s0 support.
.PP
DBIx::Class can handle multi-column primary and foreign keys, complex
queries and database-level paging, and does its best to only query the
database in order to return something you've directly asked for. If a
resultset is used as an iterator it only fetches rows off the statement
handle as requested in order to minimise memory usage. It has auto-increment
support for SQLite, MySQL, PostgreSQL, Oracle, \s-1SQL\s0 Server and \s-1DB2\s0 and is
known to be used in production on at least the first four, and is fork\-
and thread-safe out of the box (although
your \s-1DBD\s0 may not be).
.PP
This project is still under rapid development, so large new features may be
marked \s-1EXPERIMENTAL\s0 \- such APIs are still usable but may have edge bugs.
Failing test cases are *always* welcome and point releases are put out rapidly
as bugs are found and fixed.
.PP
We do our best to maintain full backwards compatibility for published
APIs, since DBIx::Class is used in production in many organisations,
and even backwards incompatible changes to non-published APIs will be fixed
if they're reported and doing so doesn't cost the codebase anything.
.PP
The test suite is quite substantial, and several developer releases
are generally made to \s-1CPAN\s0 before the branch for the next release is
merged back to trunk for a major release.
.SH "WHERE TO GO NEXT"
.IX Header "WHERE TO GO NEXT"
DBIx::Class::Manual::DocMap lists each task you might want help on, and
the modules where you will find documentation.
.SH "AUTHOR"
.IX Header "AUTHOR"
mst: Matt S. Trout <mst@shadowcatsystems.co.uk>
.PP
(I mostly consider myself \*(L"project founder\*(R" these days but the \s-1AUTHOR\s0 heading
is traditional :)
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
abraxxa: Alexander Hartmaier <abraxxa@cpan.org>
.PP
acca: Alexander Kuznetsov <acca@cpan.org>
.PP
aherzog: Adam Herzog <adam@herzogdesigns.com>
.PP
Alexander Keusch <cpan@keusch.at>
.PP
alnewkirk: Al Newkirk <we@ana.im>
.PP
amiri: Amiri Barksdale <amiri@metalabel.com>
.PP
amoore: Andrew Moore <amoore@cpan.org>
.PP
andyg: Andy Grundman <andy@hybridized.org>
.PP
ank: Andres Kievsky
.PP
arc: Aaron Crane <arc@cpan.org>
.PP
arcanez: Justin Hunter <justin.d.hunter@gmail.com>
.PP
ash: Ash Berlin <ash@cpan.org>
.PP
bert: Norbert Csongradi <bert@cpan.org>
.PP
blblack: Brandon L. Black <blblack@gmail.com>
.PP
bluefeet: Aran Deltac <bluefeet@cpan.org>
.PP
bphillips: Brian Phillips <bphillips@cpan.org>
.PP
boghead: Bryan Beeley <cpan@beeley.org>
.PP
brd: Brad Davis <brd@FreeBSD.org>
.PP
bricas: Brian Cassidy <bricas@cpan.org>
.PP
brunov: Bruno Vecchi <vecchi.b@gmail.com>
.PP
caelum: Rafael Kitover <rkitover@cpan.org>
.PP
caldrin: Maik Hentsche <maik.hentsche@amd.com>
.PP
castaway: Jess Robinson
.PP
claco: Christopher H. Laco
.PP
clkao: \s-1CL\s0 Kao
.PP
da5id: David Jack Olrik <djo@cpan.org>
.PP
debolaz: Anders Nor Berle <berle@cpan.org>
.PP
dew: Dan Thomas <dan@godders.org>
.PP
dkubb: Dan Kubb <dan.kubb\-cpan@onautopilot.com>
.PP
dnm: Justin Wheeler <jwheeler@datademons.com>
.PP
dpetrov: Dimitar Petrov <mitakaa@gmail.com>
.PP
dwc: Daniel Westermann-Clark <danieltwc@cpan.org>
.PP
dyfrgi: Michael Leuchtenburg <michael@slashhome.org>
.PP
edenc: Eden Cardim <edencardim@gmail.com>
.PP
felliott: Fitz Elliott <fitz.elliott@gmail.com>
.PP
freetime: Bill Moseley <moseley@hank.org>
.PP
frew: Arthur Axel \*(L"fREW\*(R" Schmidt <frioux@gmail.com>
.PP
goraxe: Gordon Irving <goraxe@cpan.org>
.PP
gphat: Cory G Watson <gphat@cpan.org>
.PP
Grant Street Group <http://www.grantstreet.com/>
.PP
groditi: Guillermo Roditi <groditi@cpan.org>
.PP
Haarg: Graham Knop <haarg@haarg.org>
.PP
hobbs: Andrew Rodland <arodland@cpan.org>
.PP
ilmari: Dagfinn Ilmari Mannsa\*oker <ilmari@ilmari.org>
.PP
initself: Mike Baas <mike@initselftech.com>
.PP
ironcamel: Naveed Massjouni <naveedm9@gmail.com>
.PP
jawnsy: Jonathan Yu <jawnsy@cpan.org>
.PP
jasonmay: Jason May <jason.a.may@gmail.com>
.PP
jesper: Jesper Krogh
.PP
jgoulah: John Goulah <jgoulah@cpan.org>
.PP
jguenther: Justin Guenther <jguenther@cpan.org>
.PP
jhannah: Jay Hannah <jay@jays.net>
.PP
jnapiorkowski: John Napiorkowski <jjn1056@yahoo.com>
.PP
jon: Jon Schutz <jjschutz@cpan.org>
.PP
jshirley: J. Shirley <jshirley@gmail.com>
.PP
kaare: Kaare Rasmussen
.PP
konobi: Scott McWhirter
.PP
littlesavage: Alexey Illarionov <littlesavage@orionet.ru>
.PP
lukes: Luke Saunders <luke.saunders@gmail.com>
.PP
marcus: Marcus Ramberg <mramberg@cpan.org>
.PP
mattlaw: Matt Lawrence
.PP
mattp: Matt Phillips <mattp@cpan.org>
.PP
michaelr: Michael Reddick <michael.reddick@gmail.com>
.PP
milki: Jonathan Chu <milki@rescomp.berkeley.edu>
.PP
mstratman: Mark A. Stratman <stratman@gmail.com>
.PP
ned: Neil de Carteret
.PP
nigel: Nigel Metheringham <nigelm@cpan.org>
.PP
ningu: David Kamholz <dkamholz@cpan.org>
.PP
Nniuq: Ron \*(L"Quinn\*(R" Straight" <quinnfazigu@gmail.org>
.PP
norbi: Norbert Buchmuller <norbi@nix.hu>
.PP
nuba: Nuba Princigalli <nuba@cpan.org>
.PP
Numa: Dan Sully <daniel@cpan.org>
.PP
ovid: Curtis \*(L"Ovid\*(R" Poe <ovid@cpan.org>
.PP
oyse: O\*/ystein Torget <oystein.torget@dnv.com>
.PP
paulm: Paul Makepeace
.PP
penguin: K J Cheetham
.PP
perigrin: Chris Prather <chris@prather.org>
.PP
peter: Peter Collingbourne <peter@pcc.me.uk>
.PP
Peter Valdemar Mo\*/rch <peter@morch.com>
.PP
phaylon: Robert Sedlacek <phaylon@dunkelheit.at>
.PP
plu: Johannes Plunien <plu@cpan.org>
.PP
Possum: Daniel LeWarne <possum@cpan.org>
.PP
quicksilver: Jules Bean
.PP
rafl: Florian Ragwitz <rafl@debian.org>
.PP
rainboxx: Matthias Dietrich <perl@rb.ly>
.PP
rbo: Robert Bohne <rbo@cpan.org>
.PP
rbuels: Robert Buels <rmb32@cornell.edu>
.PP
rdj: Ryan D Johnson <ryan@innerfence.com>
.PP
ribasushi: Peter Rabbitson <ribasushi@cpan.org>
.PP
rjbs: Ricardo Signes <rjbs@cpan.org>
.PP
robkinyon: Rob Kinyon <rkinyon@cpan.org>
.PP
Robert Olson <bob@rdolson.org>
.PP
Roman: Roman Filippov <romanf@cpan.org>
.PP
Sadrak: Felix Antonius Wilhelm Ostmann <sadrak@cpan.org>
.PP
sc_: Just Another Perl Hacker
.PP
scotty: Scotty Allen <scotty@scottyallen.com>
.PP
semifor: Marc Mims <marc@questright.com>
.PP
SineSwiper: Brendan Byrd <bbyrd@cpan.org>
.PP
solomon: Jared Johnson <jaredj@nmgi.com>
.PP
spb: Stephen Bennett <stephen@freenode.net>
.PP
Squeeks <squeek@cpan.org>
.PP
sszabo: Stephan Szabo <sszabo@bigpanda.com>
.PP
talexb: Alex Beamish <talexb@gmail.com>
.PP
tamias: Ronald J Kimball <rjk@tamias.net>
.PP
teejay : Aaron Trevena <teejay@cpan.org>
.PP
Todd Lipcon
.PP
Tom Hukins
.PP
tonvoon: Ton Voon <tonvoon@cpan.org>
.PP
triode: Pete Gamache <gamache@cpan.org>
.PP
typester: Daisuke Murase <typester@cpan.org>
.PP
victori: Victor Igumnov <victori@cpan.org>
.PP
wdh: Will Hawes
.PP
wesm: Wes Malone <wes@mitsi.com>
.PP
willert: Sebastian Willert <willert@cpan.org>
.PP
wreis: Wallace Reis <wreis@cpan.org>
.PP
xenoterracide: Caleb Cushing <xenoterracide@gmail.com>
.PP
yrlnry: Mark Jason Dominus <mjd@plover.com>
.PP
zamolxes: Bogdan Lucaciu <bogdan@wiz.ro>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 \- 2011 the DBIx::Class \*(L"\s-1AUTHOR\s0\*(R" and \*(L"\s-1CONTRIBUTORS\s0\*(R"
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class5.18.3pm                          0100644 0001750 0001750 00000044100 12566242400 023545  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class 3"
.TH DBIx::Class 3 "2014-01-30" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class \- Extensible and flexible object <\-> relational mapper.
.SH "WHERE TO START READING"
.IX Header "WHERE TO START READING"
See DBIx::Class::Manual::DocMap for an overview of the exhaustive documentation.
To get the most out of DBIx::Class with the least confusion it is strongly
recommended to read (at the very least) the
Manuals in the order presented there.
.SH "HOW TO GET HELP"
.IX Header "HOW TO GET HELP"
Due to the complexity of its problem domain, DBIx::Class is a relatively
complex framework. After you start using DBIx::Class questions will inevitably
arise. If you are stuck with a problem or have doubts about a particular
approach do not hesitate to contact the community with your questions. The
list below is sorted by \*(L"fastest response time\*(R":
.IP "\(bu" 4
\&\s-1IRC:\s0 irc.perl.org#dbix\-class
.IP "\(bu" 4
Mailing list: <http://lists.scsys.co.uk/mailman/listinfo/dbix\-class>
.IP "\(bu" 4
\&\s-1RT\s0 Bug Tracker: <https://rt.cpan.org/NoAuth/Bugs.html?Dist=DBIx\-Class>
.IP "\(bu" 4
Twitter: <https://www.twitter.com/dbix_class>
.IP "\(bu" 4
Web Site: <http://www.dbix\-class.org/>
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
For the very impatient: DBIx::Class::Manual::QuickStart
.PP
This code in the next step can be generated automatically from an existing
database, see dbicdump from the distribution \f(CW\*(C`DBIx\-Class\-Schema\-Loader\*(C'\fR.
.SS "Schema classes preparation"
.IX Subsection "Schema classes preparation"
Create a schema class called \fIMyApp/Schema.pm\fR:
.PP
.Vb 2
\&  package MyApp::Schema;
\&  use base qw/DBIx::Class::Schema/;
\&
\&  _\|_PACKAGE_\|_\->load_namespaces();
\&
\&  1;
.Ve
.PP
Create a result class to represent artists, who have many CDs, in
\&\fIMyApp/Schema/Result/Artist.pm\fR:
.PP
See DBIx::Class::ResultSource for docs on defining result classes.
.PP
.Vb 2
\&  package MyApp::Schema::Result::Artist;
\&  use base qw/DBIx::Class::Core/;
\&
\&  _\|_PACKAGE_\|_\->table(\*(Aqartist\*(Aq);
\&  _\|_PACKAGE_\|_\->add_columns(qw/ artistid name /);
\&  _\|_PACKAGE_\|_\->set_primary_key(\*(Aqartistid\*(Aq);
\&  _\|_PACKAGE_\|_\->has_many(cds => \*(AqMyApp::Schema::Result::CD\*(Aq, \*(Aqartistid\*(Aq);
\&
\&  1;
.Ve
.PP
A result class to represent a \s-1CD,\s0 which belongs to an artist, in
\&\fIMyApp/Schema/Result/CD.pm\fR:
.PP
.Vb 2
\&  package MyApp::Schema::Result::CD;
\&  use base qw/DBIx::Class::Core/;
\&
\&  _\|_PACKAGE_\|_\->load_components(qw/InflateColumn::DateTime/);
\&  _\|_PACKAGE_\|_\->table(\*(Aqcd\*(Aq);
\&  _\|_PACKAGE_\|_\->add_columns(qw/ cdid artistid title year /);
\&  _\|_PACKAGE_\|_\->set_primary_key(\*(Aqcdid\*(Aq);
\&  _\|_PACKAGE_\|_\->belongs_to(artist => \*(AqMyApp::Schema::Result::Artist\*(Aq, \*(Aqartistid\*(Aq);
\&
\&  1;
.Ve
.SS "\s-1API\s0 usage"
.IX Subsection "API usage"
Then you can use these classes in your application's code:
.PP
.Vb 3
\&  # Connect to your database.
\&  use MyApp::Schema;
\&  my $schema = MyApp::Schema\->connect($dbi_dsn, $user, $pass, \e%dbi_params);
\&
\&  # Query for all artists and put them in an array,
\&  # or retrieve them as a result set object.
\&  # $schema\->resultset returns a DBIx::Class::ResultSet
\&  my @all_artists = $schema\->resultset(\*(AqArtist\*(Aq)\->all;
\&  my $all_artists_rs = $schema\->resultset(\*(AqArtist\*(Aq);
\&
\&  # Output all artists names
\&  # $artist here is a DBIx::Class::Row, which has accessors
\&  # for all its columns. Rows are also subclasses of your Result class.
\&  foreach $artist (@all_artists) {
\&    print $artist\->name, "\en";
\&  }
\&
\&  # Create a result set to search for artists.
\&  # This does not query the DB.
\&  my $johns_rs = $schema\->resultset(\*(AqArtist\*(Aq)\->search(
\&    # Build your WHERE using an SQL::Abstract structure:
\&    { name => { like => \*(AqJohn%\*(Aq } }
\&  );
\&
\&  # Execute a joined query to get the cds.
\&  my @all_john_cds = $johns_rs\->search_related(\*(Aqcds\*(Aq)\->all;
\&
\&  # Fetch the next available row.
\&  my $first_john = $johns_rs\->next;
\&
\&  # Specify ORDER BY on the query.
\&  my $first_john_cds_by_title_rs = $first_john\->cds(
\&    undef,
\&    { order_by => \*(Aqtitle\*(Aq }
\&  );
\&
\&  # Create a result set that will fetch the artist data
\&  # at the same time as it fetches CDs, using only one query.
\&  my $millennium_cds_rs = $schema\->resultset(\*(AqCD\*(Aq)\->search(
\&    { year => 2000 },
\&    { prefetch => \*(Aqartist\*(Aq }
\&  );
\&
\&  my $cd = $millennium_cds_rs\->next; # SELECT ... FROM cds JOIN artists ...
\&  my $cd_artist_name = $cd\->artist\->name; # Already has the data so no 2nd query
\&
\&  # new() makes a Result object but doesnt insert it into the DB.
\&  # create() is the same as new() then insert().
\&  my $new_cd = $schema\->resultset(\*(AqCD\*(Aq)\->new({ title => \*(AqSpoon\*(Aq });
\&  $new_cd\->artist($cd\->artist);
\&  $new_cd\->insert; # Auto\-increment primary key filled in after INSERT
\&  $new_cd\->title(\*(AqFork\*(Aq);
\&
\&  $schema\->txn_do(sub { $new_cd\->update }); # Runs the update in a transaction
\&
\&  # change the year of all the millennium CDs at once
\&  $millennium_cds_rs\->update({ year => 2002 });
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an \s-1SQL\s0 to \s-1OO\s0 mapper with an object \s-1API\s0 inspired by Class::DBI
(with a compatibility layer as a springboard for porting) and a resultset \s-1API\s0
that allows abstract encapsulation of database operations. It aims to make
representing queries in your code as perl-ish as possible while still
providing access to as many of the capabilities of the database as possible,
including retrieving related records from multiple tables in a single query,
\&\f(CW\*(C`JOIN\*(C'\fR, \f(CW\*(C`LEFT JOIN\*(C'\fR, \f(CW\*(C`COUNT\*(C'\fR, \f(CW\*(C`DISTINCT\*(C'\fR, \f(CW\*(C`GROUP BY\*(C'\fR, \f(CW\*(C`ORDER BY\*(C'\fR and
\&\f(CW\*(C`HAVING\*(C'\fR support.
.PP
DBIx::Class can handle multi-column primary and foreign keys, complex
queries and database-level paging, and does its best to only query the
database in order to return something you've directly asked for. If a
resultset is used as an iterator it only fetches rows off the statement
handle as requested in order to minimise memory usage. It has auto-increment
support for SQLite, MySQL, PostgreSQL, Oracle, \s-1SQL\s0 Server and \s-1DB2\s0 and is
known to be used in production on at least the first four, and is fork\-
and thread-safe out of the box (although
your \s-1DBD\s0 may not be).
.PP
This project is still under rapid development, so large new features may be
marked \fBexperimental\fR \- such APIs are still usable but may have edge bugs.
Failing test cases are \fIalways\fR welcome and point releases are put out rapidly
as bugs are found and fixed.
.PP
We do our best to maintain full backwards compatibility for published
APIs, since DBIx::Class is used in production in many organisations,
and even backwards incompatible changes to non-published APIs will be fixed
if they're reported and doing so doesn't cost the codebase anything.
.PP
The test suite is quite substantial, and several developer releases
are generally made to \s-1CPAN\s0 before the branch for the next release is
merged back to trunk for a major release.
.SH "HOW TO CONTRIBUTE"
.IX Header "HOW TO CONTRIBUTE"
Contributions are always welcome, in all usable forms (we especially
welcome documentation improvements). The delivery methods include git\-
or unified-diff formatted patches, GitHub pull requests, or plain bug
reports either via \s-1RT\s0 or the Mailing list. Contributors are generally
granted full access to the official repository after their first patch
passes successful review.
.PP
This project is maintained in a git repository. The code and related tools are
accessible at the following locations:
.IP "\(bu" 4
Official repo: <git://git.shadowcat.co.uk/dbsrgits/DBIx\-Class.git>
.IP "\(bu" 4
Official gitweb: <http://git.shadowcat.co.uk/gitweb/gitweb.cgi?p=dbsrgits/DBIx\-Class.git>
.IP "\(bu" 4
GitHub mirror: <https://github.com/dbsrgits/DBIx\-Class>
.IP "\(bu" 4
Authorized committers: <ssh://dbsrgits@git.shadowcat.co.uk/DBIx\-Class.git>
.IP "\(bu" 4
Travis-CI log: <https://travis\-ci.org/dbsrgits/dbix\-class/builds>
.SH "AUTHOR"
.IX Header "AUTHOR"
mst: Matt S. Trout <mst@shadowcatsystems.co.uk>
.PP
(I mostly consider myself \*(L"project founder\*(R" these days but the \s-1AUTHOR\s0 heading
is traditional :)
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
abraxxa: Alexander Hartmaier <abraxxa@cpan.org>
.PP
acca: Alexander Kuznetsov <acca@cpan.org>
.PP
aherzog: Adam Herzog <adam@herzogdesigns.com>
.PP
Alexander Keusch <cpan@keusch.at>
.PP
alexrj: Alessandro Ranellucci <aar@cpan.org>
.PP
alnewkirk: Al Newkirk <we@ana.im>
.PP
amiri: Amiri Barksdale <amiri@metalabel.com>
.PP
amoore: Andrew Moore <amoore@cpan.org>
.PP
andrewalker: Andre Walker <andre@andrewalker.net>
.PP
andyg: Andy Grundman <andy@hybridized.org>
.PP
ank: Andres Kievsky
.PP
arc: Aaron Crane <arc@cpan.org>
.PP
arcanez: Justin Hunter <justin.d.hunter@gmail.com>
.PP
ash: Ash Berlin <ash@cpan.org>
.PP
bert: Norbert Csongra\*'di <bert@cpan.org>
.PP
blblack: Brandon L. Black <blblack@gmail.com>
.PP
bluefeet: Aran Deltac <bluefeet@cpan.org>
.PP
bphillips: Brian Phillips <bphillips@cpan.org>
.PP
boghead: Bryan Beeley <cpan@beeley.org>
.PP
brd: Brad Davis <brd@FreeBSD.org>
.PP
bricas: Brian Cassidy <bricas@cpan.org>
.PP
brunov: Bruno Vecchi <vecchi.b@gmail.com>
.PP
caelum: Rafael Kitover <rkitover@cpan.org>
.PP
caldrin: Maik Hentsche <maik.hentsche@amd.com>
.PP
castaway: Jess Robinson
.PP
claco: Christopher H. Laco
.PP
clkao: \s-1CL\s0 Kao
.PP
da5id: David Jack Olrik <djo@cpan.org>
.PP
dariusj: Darius Jokilehto <dariusjokilehto@yahoo.co.uk>
.PP
davewood: David Schmidt <davewood@gmx.at>
.PP
daxim: Lars \s-1DXXXXXX XXX\s0 <daxim@cpan.org>
.PP
debolaz: Anders Nor Berle <berle@cpan.org>
.PP
dew: Dan Thomas <dan@godders.org>
.PP
dkubb: Dan Kubb <dan.kubb\-cpan@onautopilot.com>
.PP
dnm: Justin Wheeler <jwheeler@datademons.com>
.PP
dpetrov: Dimitar Petrov <mitakaa@gmail.com>
.PP
dwc: Daniel Westermann-Clark <danieltwc@cpan.org>
.PP
dyfrgi: Michael Leuchtenburg <michael@slashhome.org>
.PP
edenc: Eden Cardim <edencardim@gmail.com>
.PP
ether: Karen Etheridge <ether@cpan.org>
.PP
felliott: Fitz Elliott <fitz.elliott@gmail.com>
.PP
freetime: Bill Moseley <moseley@hank.org>
.PP
frew: Arthur Axel \*(L"fREW\*(R" Schmidt <frioux@gmail.com>
.PP
goraxe: Gordon Irving <goraxe@cpan.org>
.PP
gphat: Cory G Watson <gphat@cpan.org>
.PP
Grant Street Group <http://www.grantstreet.com/>
.PP
groditi: Guillermo Roditi <groditi@cpan.org>
.PP
Haarg: Graham Knop <haarg@haarg.org>
.PP
hobbs: Andrew Rodland <arodland@cpan.org>
.PP
ilmari: Dagfinn Ilmari Mannsa\*oker <ilmari@ilmari.org>
.PP
initself: Mike Baas <mike@initselftech.com>
.PP
ironcamel: Naveed Massjouni <naveedm9@gmail.com>
.PP
jawnsy: Jonathan Yu <jawnsy@cpan.org>
.PP
jasonmay: Jason May <jason.a.may@gmail.com>
.PP
jesper: Jesper Krogh
.PP
jgoulah: John Goulah <jgoulah@cpan.org>
.PP
jguenther: Justin Guenther <jguenther@cpan.org>
.PP
jhannah: Jay Hannah <jay@jays.net>
.PP
jmac: Jason McIntosh <jmac@appleseed\-sc.com>
.PP
jnapiorkowski: John Napiorkowski <jjn1056@yahoo.com>
.PP
jon: Jon Schutz <jjschutz@cpan.org>
.PP
jshirley: J. Shirley <jshirley@gmail.com>
.PP
kaare: Kaare Rasmussen
.PP
konobi: Scott McWhirter
.PP
littlesavage: Alexey Illarionov <littlesavage@orionet.ru>
.PP
lukes: Luke Saunders <luke.saunders@gmail.com>
.PP
marcus: Marcus Ramberg <mramberg@cpan.org>
.PP
mattlaw: Matt Lawrence
.PP
mattp: Matt Phillips <mattp@cpan.org>
.PP
michaelr: Michael Reddick <michael.reddick@gmail.com>
.PP
milki: Jonathan Chu <milki@rescomp.berkeley.edu>
.PP
mithaldu: Christian Walde <walde.christian@gmail.com>
.PP
mjemmeson: Michael Jemmeson <michael.jemmeson@gmail.com>
.PP
mstratman: Mark A. Stratman <stratman@gmail.com>
.PP
ned: Neil de Carteret
.PP
nigel: Nigel Metheringham <nigelm@cpan.org>
.PP
ningu: David Kamholz <dkamholz@cpan.org>
.PP
Nniuq: Ron \*(L"Quinn\*(R" Straight" <quinnfazigu@gmail.org>
.PP
norbi: Norbert Buchmuller <norbi@nix.hu>
.PP
nuba: Nuba Princigalli <nuba@cpan.org>
.PP
Numa: Dan Sully <daniel@cpan.org>
.PP
ovid: Curtis \*(L"Ovid\*(R" Poe <ovid@cpan.org>
.PP
oyse: O\*/ystein Torget <oystein.torget@dnv.com>
.PP
paulm: Paul Makepeace
.PP
penguin: K J Cheetham
.PP
perigrin: Chris Prather <chris@prather.org>
.PP
peter: Peter Collingbourne <peter@pcc.me.uk>
.PP
Peter Siklo\*'si <einon@einon.hu>
.PP
Peter Valdemar Mo\*/rch <peter@morch.com>
.PP
phaylon: Robert Sedlacek <phaylon@dunkelheit.at>
.PP
plu: Johannes Plunien <plu@cpan.org>
.PP
Possum: Daniel LeWarne <possum@cpan.org>
.PP
quicksilver: Jules Bean
.PP
rafl: Florian Ragwitz <rafl@debian.org>
.PP
rainboxx: Matthias Dietrich <perl@rb.ly>
.PP
rbo: Robert Bohne <rbo@cpan.org>
.PP
rbuels: Robert Buels <rmb32@cornell.edu>
.PP
rdj: Ryan D Johnson <ryan@innerfence.com>
.PP
ribasushi: Peter Rabbitson <ribasushi@cpan.org>
.PP
rjbs: Ricardo Signes <rjbs@cpan.org>
.PP
robkinyon: Rob Kinyon <rkinyon@cpan.org>
.PP
Robert Olson <bob@rdolson.org>
.PP
moltar: Roman Filippov <romanf@cpan.org>
.PP
Sadrak: Felix Antonius Wilhelm Ostmann <sadrak@cpan.org>
.PP
sc_: Just Another Perl Hacker
.PP
scotty: Scotty Allen <scotty@scottyallen.com>
.PP
semifor: Marc Mims <marc@questright.com>
.PP
SineSwiper: Brendan Byrd <bbyrd@cpan.org>
.PP
solomon: Jared Johnson <jaredj@nmgi.com>
.PP
spb: Stephen Bennett <stephen@freenode.net>
.PP
Squeeks <squeek@cpan.org>
.PP
sszabo: Stephan Szabo <sszabo@bigpanda.com>
.PP
talexb: Alex Beamish <talexb@gmail.com>
.PP
tamias: Ronald J Kimball <rjk@tamias.net>
.PP
teejay : Aaron Trevena <teejay@cpan.org>
.PP
Todd Lipcon
.PP
Tom Hukins
.PP
tonvoon: Ton Voon <tonvoon@cpan.org>
.PP
triode: Pete Gamache <gamache@cpan.org>
.PP
typester: Daisuke Murase <typester@cpan.org>
.PP
victori: Victor Igumnov <victori@cpan.org>
.PP
wdh: Will Hawes
.PP
wesm: Wes Malone <wes@mitsi.com>
.PP
willert: Sebastian Willert <willert@cpan.org>
.PP
wreis: Wallace Reis <wreis@cpan.org>
.PP
xenoterracide: Caleb Cushing <xenoterracide@gmail.com>
.PP
yrlnry: Mark Jason Dominus <mjd@plover.com>
.PP
zamolxes: Bogdan Lucaciu <bogdan@wiz.ro>
.PP
Zefram: Andrew Main <zefram@fysh.org>
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2005 \- 2011 the DBIx::Class \*(L"\s-1AUTHOR\*(R"\s0 and \*(L"\s-1CONTRIBUTORS\*(R"\s0
as listed above.
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software and may be distributed under the same terms
as perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::AccessorGroup.3pm               0100644 0001750 0001750 00000010620 12566242377 026132  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::AccessorGroup 3"
.TH DBIx::Class::AccessorGroup 3 "2013-12-16" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::AccessorGroup \- See Class::Accessor::Grouped
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class now exists in its own right on \s-1CPAN\s0 as Class::Accessor::Grouped
.SH "AUTHOR AND CONTRIBUTORS"
.IX Header "AUTHOR AND CONTRIBUTORS"
See \s-1AUTHOR\s0 and \s-1CONTRIBUTORS\s0 in DBIx::Class
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::AccessorGroup5.16.3pm           0100644 0001750 0001750 00000010221 12566242362 026433  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::AccessorGroup 3"
.TH DBIx::Class::AccessorGroup 3 "2012-10-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::AccessorGroup \- See Class::Accessor::Grouped
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class now exists in its own right on \s-1CPAN\s0 as Class::Accessor::Grouped
.SH "AUTHORS"
.IX Header "AUTHORS"
Matt S. Trout <mst@shadowcatsystems.co.uk>
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::AccessorGroup5.18.3pm           0100644 0001750 0001750 00000010620 12566242377 026446  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::AccessorGroup 3"
.TH DBIx::Class::AccessorGroup 3 "2013-12-16" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::AccessorGroup \- See Class::Accessor::Grouped
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class now exists in its own right on \s-1CPAN\s0 as Class::Accessor::Grouped
.SH "AUTHOR AND CONTRIBUTORS"
.IX Header "AUTHOR AND CONTRIBUTORS"
See \s-1AUTHOR\s0 and \s-1CONTRIBUTORS\s0 in DBIx::Class
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::Admin.3pm                       0100644 0001750 0001750 00000024413 12566242400 024373  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Admin 3"
.TH DBIx::Class::Admin 3 "2014-01-08" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Admin \- Administration object for schemas
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $ dbicadmin \-\-help
\&
\&  $ dbicadmin \-\-schema=MyApp::Schema \e
\&    \-\-connect=\*(Aq["dbi:SQLite:my.db", "", ""]\*(Aq \e
\&    \-\-deploy
\&
\&  $ dbicadmin \-\-schema=MyApp::Schema \-\-class=Employee \e
\&    \-\-connect=\*(Aq["dbi:SQLite:my.db", "", ""]\*(Aq \e
\&    \-\-op=update \-\-set=\*(Aq{ "name": "New_Employee" }\*(Aq
\&
\&  use DBIx::Class::Admin;
\&
\&  # ddl manipulation
\&  my $admin = DBIx::Class::Admin\->new(
\&    schema_class=> \*(AqMY::Schema\*(Aq,
\&    sql_dir=> $sql_dir,
\&    connect_info => { dsn => $dsn, user => $user, password => $pass },
\&  );
\&
\&  # create SQLite sql
\&  $admin\->create(\*(AqSQLite\*(Aq);
\&
\&  # create SQL diff for an upgrade
\&  $admin\->create(\*(AqSQLite\*(Aq, {} , "1.0");
\&
\&  # upgrade a database
\&  $admin\->upgrade();
\&
\&  # install a version for an unversioned schema
\&  $admin\->install("3.0");
.Ve
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
The Admin interface has additional requirements not currently part of
DBIx::Class. See DBIx::Class::Optional::Dependencies for more details.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "schema_class"
.IX Subsection "schema_class"
the class of the schema to load
.SS "schema"
.IX Subsection "schema"
A pre-connected schema object can be provided for manipulation
.SS "resultset"
.IX Subsection "resultset"
a resultset from the schema to operate on
.SS "where"
.IX Subsection "where"
a hash ref or json string to be used for identifying data to manipulate
.SS "set"
.IX Subsection "set"
a hash ref or json string to be used for inserting or updating data
.SS "attrs"
.IX Subsection "attrs"
a hash ref or json string to be used for passing additional info to the \->search call
.SS "connect_info"
.IX Subsection "connect_info"
connect_info the arguments to provide to the connect call of the schema_class
.SS "config_file"
.IX Subsection "config_file"
config_file provide a config_file to read connect_info from, if this is provided
config_stanze should also be provided to locate where the connect_info is in the config
The config file should be in a format readable by Config::Any.
.SS "config_stanza"
.IX Subsection "config_stanza"
config_stanza for use with config_file should be a '::' delimited 'path' to the connection information
designed for use with catalyst config files
.SS "config"
.IX Subsection "config"
Instead of loading from a file the configuration can be provided directly as a hash ref.  Please note
config_stanza will still be required.
.SS "sql_dir"
.IX Subsection "sql_dir"
The location where sql ddl files should be created or found for an upgrade.
.SS "sql_type"
.IX Subsection "sql_type"
The type of sql dialect to use for creating sql files from schema
.SS "version"
.IX Subsection "version"
Used for install, the version which will be 'installed' in the schema
.SS "preversion"
.IX Subsection "preversion"
Previous version of the schema to create an upgrade diff for, the full sql for that version of the sql must be in the sql_dir
.SS "force"
.IX Subsection "force"
Try and force certain operations.
.SS "quiet"
.IX Subsection "quiet"
Be less verbose about actions
.SS "trace"
.IX Subsection "trace"
Toggle DBIx::Class debug output
.SH "METHODS"
.IX Header "METHODS"
.SS "create"
.IX Subsection "create"
.ie n .IP "Arguments: $sqlt_type, \e%sqlt_args, $preversion" 4
.el .IP "Arguments: \f(CW$sqlt_type\fR, \e%sqlt_args, \f(CW$preversion\fR" 4
.IX Item "Arguments: $sqlt_type, %sqlt_args, $preversion"
.PP
\&\f(CW\*(C`create\*(C'\fR will generate sql for the supplied schema_class in sql_dir. The
flavour of sql to generate can be controlled by supplying a sqlt_type which
should be a SQL::Translator name.
.PP
Arguments for SQL::Translator can be supplied in the sqlt_args hashref.
.PP
Optional preversion can be supplied to generate a diff to be used by upgrade.
.SS "upgrade"
.IX Subsection "upgrade"
.IP "Arguments: <none>" 4
.IX Item "Arguments: <none>"
.PP
upgrade will attempt to upgrade the connected database to the same version as the schema_class.
\&\fB\s-1MAKE SURE YOU BACKUP YOUR DB FIRST\s0\fR
.SS "install"
.IX Subsection "install"
.ie n .IP "Arguments: $version" 4
.el .IP "Arguments: \f(CW$version\fR" 4
.IX Item "Arguments: $version"
.PP
install is here to help when you want to move to DBIx::Class::Schema::Versioned and have an existing
database.  install will take a version and add the version tracking tables and 'install' the version.  No
further ddl modification takes place.  Setting the force attribute to a true value will allow overriding of
already versioned databases.
.SS "deploy"
.IX Subsection "deploy"
.ie n .IP "Arguments: $args" 4
.el .IP "Arguments: \f(CW$args\fR" 4
.IX Item "Arguments: $args"
.PP
deploy will create the schema at the connected database.  \f(CW$args\fR are passed straight to
\&\*(L"deploy\*(R" in DBIx::Class::Schema.
.SS "insert"
.IX Subsection "insert"
.ie n .IP "Arguments: $rs, $set" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$set\fR" 4
.IX Item "Arguments: $rs, $set"
.PP
insert takes the name of a resultset from the schema_class and a hashref of data to insert
into that resultset
.SS "update"
.IX Subsection "update"
.ie n .IP "Arguments: $rs, $set, $where" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$set\fR, \f(CW$where\fR" 4
.IX Item "Arguments: $rs, $set, $where"
.PP
update takes the name of a resultset from the schema_class, a hashref of data to update and
a where hash used to form the search for the rows to update.
.SS "delete"
.IX Subsection "delete"
.ie n .IP "Arguments: $rs, $where, $attrs" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$where\fR, \f(CW$attrs\fR" 4
.IX Item "Arguments: $rs, $where, $attrs"
.PP
delete takes the name of a resultset from the schema_class, a where hashref and a attrs to pass to \->search.
The found data is deleted and cannot be recovered.
.SS "select"
.IX Subsection "select"
.ie n .IP "Arguments: $rs, $where, $attrs" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$where\fR, \f(CW$attrs\fR" 4
.IX Item "Arguments: $rs, $where, $attrs"
.PP
select takes the name of a resultset from the schema_class, a where hashref and a attrs to pass to \->search.
The found data is returned in a array ref where the first row will be the columns list.
.SH "AUTHOR"
.IX Header "AUTHOR"
See \*(L"\s-1CONTRIBUTORS\*(R"\s0 in DBIx::Class.
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself
                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::Admin5.16.3pm                   0100644 0001750 0001750 00000024144 12566242362 024715  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Admin 3"
.TH DBIx::Class::Admin 3 "2012-08-16" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Admin \- Administration object for schemas
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $ dbicadmin \-\-help
\&
\&  $ dbicadmin \-\-schema=MyApp::Schema \e
\&    \-\-connect=\*(Aq["dbi:SQLite:my.db", "", ""]\*(Aq \e
\&    \-\-deploy
\&
\&  $ dbicadmin \-\-schema=MyApp::Schema \-\-class=Employee \e
\&    \-\-connect=\*(Aq["dbi:SQLite:my.db", "", ""]\*(Aq \e
\&    \-\-op=update \-\-set=\*(Aq{ "name": "New_Employee" }\*(Aq
\&
\&  use DBIx::Class::Admin;
\&
\&  # ddl manipulation
\&  my $admin = DBIx::Class::Admin\->new(
\&    schema_class=> \*(AqMY::Schema\*(Aq,
\&    sql_dir=> $sql_dir,
\&    connect_info => { dsn => $dsn, user => $user, password => $pass },
\&  );
\&
\&  # create SQLite sql
\&  $admin\->create(\*(AqSQLite\*(Aq);
\&
\&  # create SQL diff for an upgrade
\&  $admin\->create(\*(AqSQLite\*(Aq, {} , "1.0");
\&
\&  # upgrade a database
\&  $admin\->upgrade();
\&
\&  # install a version for an unversioned schema
\&  $admin\->install("3.0");
.Ve
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
The Admin interface has additional requirements not currently part of
DBIx::Class. See DBIx::Class::Optional::Dependencies for more details.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "schema_class"
.IX Subsection "schema_class"
the class of the schema to load
.SS "schema"
.IX Subsection "schema"
A pre-connected schema object can be provided for manipulation
.SS "resultset"
.IX Subsection "resultset"
a resultset from the schema to operate on
.SS "where"
.IX Subsection "where"
a hash ref or json string to be used for identifying data to manipulate
.SS "set"
.IX Subsection "set"
a hash ref or json string to be used for inserting or updating data
.SS "attrs"
.IX Subsection "attrs"
a hash ref or json string to be used for passing additional info to the \->search call
.SS "connect_info"
.IX Subsection "connect_info"
connect_info the arguments to provide to the connect call of the schema_class
.SS "config_file"
.IX Subsection "config_file"
config_file provide a config_file to read connect_info from, if this is provided
config_stanze should also be provided to locate where the connect_info is in the config
The config file should be in a format readable by Config::Any.
.SS "config_stanza"
.IX Subsection "config_stanza"
config_stanza for use with config_file should be a '::' delimited 'path' to the connection information
designed for use with catalyst config files
.SS "config"
.IX Subsection "config"
Instead of loading from a file the configuration can be provided directly as a hash ref.  Please note
config_stanza will still be required.
.SS "sql_dir"
.IX Subsection "sql_dir"
The location where sql ddl files should be created or found for an upgrade.
.SS "sql_type"
.IX Subsection "sql_type"
The type of sql dialect to use for creating sql files from schema
.SS "version"
.IX Subsection "version"
Used for install, the version which will be 'installed' in the schema
.SS "preversion"
.IX Subsection "preversion"
Previous version of the schema to create an upgrade diff for, the full sql for that version of the sql must be in the sql_dir
.SS "force"
.IX Subsection "force"
Try and force certain operations.
.SS "quiet"
.IX Subsection "quiet"
Be less verbose about actions
.SS "trace"
.IX Subsection "trace"
Toggle DBIx::Class debug output
.SH "METHODS"
.IX Header "METHODS"
.SS "create"
.IX Subsection "create"
.ie n .IP "Arguments: $sqlt_type, \e%sqlt_args, $preversion" 4
.el .IP "Arguments: \f(CW$sqlt_type\fR, \e%sqlt_args, \f(CW$preversion\fR" 4
.IX Item "Arguments: $sqlt_type, %sqlt_args, $preversion"
.PP
\&\f(CW\*(C`create\*(C'\fR will generate sql for the supplied schema_class in sql_dir. The
flavour of sql to generate can be controlled by supplying a sqlt_type which
should be a SQL::Translator name.
.PP
Arguments for SQL::Translator can be supplied in the sqlt_args hashref.
.PP
Optional preversion can be supplied to generate a diff to be used by upgrade.
.SS "upgrade"
.IX Subsection "upgrade"
.IP "Arguments: <none>" 4
.IX Item "Arguments: <none>"
.PP
upgrade will attempt to upgrade the connected database to the same version as the schema_class.
\&\fB\s-1MAKE\s0 \s-1SURE\s0 \s-1YOU\s0 \s-1BACKUP\s0 \s-1YOUR\s0 \s-1DB\s0 \s-1FIRST\s0\fR
.SS "install"
.IX Subsection "install"
.ie n .IP "Arguments: $version" 4
.el .IP "Arguments: \f(CW$version\fR" 4
.IX Item "Arguments: $version"
.PP
install is here to help when you want to move to DBIx::Class::Schema::Versioned and have an existing
database.  install will take a version and add the version tracking tables and 'install' the version.  No
further ddl modification takes place.  Setting the force attribute to a true value will allow overriding of
already versioned databases.
.SS "deploy"
.IX Subsection "deploy"
.ie n .IP "Arguments: $args" 4
.el .IP "Arguments: \f(CW$args\fR" 4
.IX Item "Arguments: $args"
.PP
deploy will create the schema at the connected database.  \f(CW$args\fR are passed straight to
\&\*(L"deploy\*(R" in DBIx::Class::Schema.
.SS "insert"
.IX Subsection "insert"
.ie n .IP "Arguments: $rs, $set" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$set\fR" 4
.IX Item "Arguments: $rs, $set"
.PP
insert takes the name of a resultset from the schema_class and a hashref of data to insert
into that resultset
.SS "update"
.IX Subsection "update"
.ie n .IP "Arguments: $rs, $set, $where" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$set\fR, \f(CW$where\fR" 4
.IX Item "Arguments: $rs, $set, $where"
.PP
update takes the name of a resultset from the schema_class, a hashref of data to update and
a where hash used to form the search for the rows to update.
.SS "delete"
.IX Subsection "delete"
.ie n .IP "Arguments: $rs, $where, $attrs" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$where\fR, \f(CW$attrs\fR" 4
.IX Item "Arguments: $rs, $where, $attrs"
.PP
delete takes the name of a resultset from the schema_class, a where hashref and a attrs to pass to \->search.
The found data is deleted and cannot be recovered.
.SS "select"
.IX Subsection "select"
.ie n .IP "Arguments: $rs, $where, $attrs" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$where\fR, \f(CW$attrs\fR" 4
.IX Item "Arguments: $rs, $where, $attrs"
.PP
select takes the name of a resultset from the schema_class, a where hashref and a attrs to pass to \->search.
The found data is returned in a array ref where the first row will be the columns list.
.SH "AUTHOR"
.IX Header "AUTHOR"
See \*(L"\s-1CONTRIBUTORS\s0\*(R" in DBIx::Class.
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself
                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::Admin5.18.3pm                   0100644 0001750 0001750 00000024413 12566242400 024707  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Admin 3"
.TH DBIx::Class::Admin 3 "2014-01-08" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Admin \- Administration object for schemas
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  $ dbicadmin \-\-help
\&
\&  $ dbicadmin \-\-schema=MyApp::Schema \e
\&    \-\-connect=\*(Aq["dbi:SQLite:my.db", "", ""]\*(Aq \e
\&    \-\-deploy
\&
\&  $ dbicadmin \-\-schema=MyApp::Schema \-\-class=Employee \e
\&    \-\-connect=\*(Aq["dbi:SQLite:my.db", "", ""]\*(Aq \e
\&    \-\-op=update \-\-set=\*(Aq{ "name": "New_Employee" }\*(Aq
\&
\&  use DBIx::Class::Admin;
\&
\&  # ddl manipulation
\&  my $admin = DBIx::Class::Admin\->new(
\&    schema_class=> \*(AqMY::Schema\*(Aq,
\&    sql_dir=> $sql_dir,
\&    connect_info => { dsn => $dsn, user => $user, password => $pass },
\&  );
\&
\&  # create SQLite sql
\&  $admin\->create(\*(AqSQLite\*(Aq);
\&
\&  # create SQL diff for an upgrade
\&  $admin\->create(\*(AqSQLite\*(Aq, {} , "1.0");
\&
\&  # upgrade a database
\&  $admin\->upgrade();
\&
\&  # install a version for an unversioned schema
\&  $admin\->install("3.0");
.Ve
.SH "REQUIREMENTS"
.IX Header "REQUIREMENTS"
The Admin interface has additional requirements not currently part of
DBIx::Class. See DBIx::Class::Optional::Dependencies for more details.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "schema_class"
.IX Subsection "schema_class"
the class of the schema to load
.SS "schema"
.IX Subsection "schema"
A pre-connected schema object can be provided for manipulation
.SS "resultset"
.IX Subsection "resultset"
a resultset from the schema to operate on
.SS "where"
.IX Subsection "where"
a hash ref or json string to be used for identifying data to manipulate
.SS "set"
.IX Subsection "set"
a hash ref or json string to be used for inserting or updating data
.SS "attrs"
.IX Subsection "attrs"
a hash ref or json string to be used for passing additional info to the \->search call
.SS "connect_info"
.IX Subsection "connect_info"
connect_info the arguments to provide to the connect call of the schema_class
.SS "config_file"
.IX Subsection "config_file"
config_file provide a config_file to read connect_info from, if this is provided
config_stanze should also be provided to locate where the connect_info is in the config
The config file should be in a format readable by Config::Any.
.SS "config_stanza"
.IX Subsection "config_stanza"
config_stanza for use with config_file should be a '::' delimited 'path' to the connection information
designed for use with catalyst config files
.SS "config"
.IX Subsection "config"
Instead of loading from a file the configuration can be provided directly as a hash ref.  Please note
config_stanza will still be required.
.SS "sql_dir"
.IX Subsection "sql_dir"
The location where sql ddl files should be created or found for an upgrade.
.SS "sql_type"
.IX Subsection "sql_type"
The type of sql dialect to use for creating sql files from schema
.SS "version"
.IX Subsection "version"
Used for install, the version which will be 'installed' in the schema
.SS "preversion"
.IX Subsection "preversion"
Previous version of the schema to create an upgrade diff for, the full sql for that version of the sql must be in the sql_dir
.SS "force"
.IX Subsection "force"
Try and force certain operations.
.SS "quiet"
.IX Subsection "quiet"
Be less verbose about actions
.SS "trace"
.IX Subsection "trace"
Toggle DBIx::Class debug output
.SH "METHODS"
.IX Header "METHODS"
.SS "create"
.IX Subsection "create"
.ie n .IP "Arguments: $sqlt_type, \e%sqlt_args, $preversion" 4
.el .IP "Arguments: \f(CW$sqlt_type\fR, \e%sqlt_args, \f(CW$preversion\fR" 4
.IX Item "Arguments: $sqlt_type, %sqlt_args, $preversion"
.PP
\&\f(CW\*(C`create\*(C'\fR will generate sql for the supplied schema_class in sql_dir. The
flavour of sql to generate can be controlled by supplying a sqlt_type which
should be a SQL::Translator name.
.PP
Arguments for SQL::Translator can be supplied in the sqlt_args hashref.
.PP
Optional preversion can be supplied to generate a diff to be used by upgrade.
.SS "upgrade"
.IX Subsection "upgrade"
.IP "Arguments: <none>" 4
.IX Item "Arguments: <none>"
.PP
upgrade will attempt to upgrade the connected database to the same version as the schema_class.
\&\fB\s-1MAKE SURE YOU BACKUP YOUR DB FIRST\s0\fR
.SS "install"
.IX Subsection "install"
.ie n .IP "Arguments: $version" 4
.el .IP "Arguments: \f(CW$version\fR" 4
.IX Item "Arguments: $version"
.PP
install is here to help when you want to move to DBIx::Class::Schema::Versioned and have an existing
database.  install will take a version and add the version tracking tables and 'install' the version.  No
further ddl modification takes place.  Setting the force attribute to a true value will allow overriding of
already versioned databases.
.SS "deploy"
.IX Subsection "deploy"
.ie n .IP "Arguments: $args" 4
.el .IP "Arguments: \f(CW$args\fR" 4
.IX Item "Arguments: $args"
.PP
deploy will create the schema at the connected database.  \f(CW$args\fR are passed straight to
\&\*(L"deploy\*(R" in DBIx::Class::Schema.
.SS "insert"
.IX Subsection "insert"
.ie n .IP "Arguments: $rs, $set" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$set\fR" 4
.IX Item "Arguments: $rs, $set"
.PP
insert takes the name of a resultset from the schema_class and a hashref of data to insert
into that resultset
.SS "update"
.IX Subsection "update"
.ie n .IP "Arguments: $rs, $set, $where" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$set\fR, \f(CW$where\fR" 4
.IX Item "Arguments: $rs, $set, $where"
.PP
update takes the name of a resultset from the schema_class, a hashref of data to update and
a where hash used to form the search for the rows to update.
.SS "delete"
.IX Subsection "delete"
.ie n .IP "Arguments: $rs, $where, $attrs" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$where\fR, \f(CW$attrs\fR" 4
.IX Item "Arguments: $rs, $where, $attrs"
.PP
delete takes the name of a resultset from the schema_class, a where hashref and a attrs to pass to \->search.
The found data is deleted and cannot be recovered.
.SS "select"
.IX Subsection "select"
.ie n .IP "Arguments: $rs, $where, $attrs" 4
.el .IP "Arguments: \f(CW$rs\fR, \f(CW$where\fR, \f(CW$attrs\fR" 4
.IX Item "Arguments: $rs, $where, $attrs"
.PP
select takes the name of a resultset from the schema_class, a where hashref and a attrs to pass to \->search.
The found data is returned in a array ref where the first row will be the columns list.
.SH "AUTHOR"
.IX Header "AUTHOR"
See \*(L"\s-1CONTRIBUTORS\*(R"\s0 in DBIx::Class.
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself
                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat.3pm                  0100644 0001750 0001750 00000020312 12566242400 025202  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat 3"
.TH DBIx::Class::CDBICompat 3 "2013-12-16" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat \- Class::DBI Compatibility layer.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package My::CDBI;
\&  use base qw/DBIx::Class::CDBICompat/;
\&
\&  ...continue as Class::DBI...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::Class features a fully featured compatibility layer with Class::DBI
and some common plugins to ease transition for existing \s-1CDBI\s0 users.
.PP
This is not a wrapper or subclass of DBIx::Class but rather a series of plugins.  The result being that even though you're using the Class::DBI emulation layer you are still getting DBIx::Class objects.  You can use all DBIx::Class features and methods via CDBICompat.  This allows you to take advantage of DBIx::Class features without having to rewrite your \s-1CDBI\s0 code.
.SS "Plugins"
.IX Subsection "Plugins"
CDBICompat is good enough that many \s-1CDBI\s0 plugins will work with CDBICompat, but many of the plugin features are better done with DBIx::Class methods.
.PP
\fIClass::DBI::AbstractSearch\fR
.IX Subsection "Class::DBI::AbstractSearch"
.PP
\&\f(CW\*(C`search_where()\*(C'\fR is fully emulated using \s-1DBIC\s0's search.  Aside from emulation there's no reason to use \f(CW\*(C`search_where()\*(C'\fR.
.PP
\fIClass::DBI::Plugin::NoCache\fR
.IX Subsection "Class::DBI::Plugin::NoCache"
.PP
\&\f(CW\*(C`nocache\*(C'\fR is fully emulated.
.PP
\fIClass::DBI::Sweet\fR
.IX Subsection "Class::DBI::Sweet"
.PP
The features of CDBI::Sweet are better done using \s-1DBIC\s0 methods which are almost exactly the same.  It even uses Data::Page.
.PP
\fIClass::DBI::Plugin::DeepAbstractSearch\fR
.IX Subsection "Class::DBI::Plugin::DeepAbstractSearch"
.PP
This plugin will work, but it is more efficiently done using \s-1DBIC\s0's native search facilities.  The major difference is that \s-1DBIC\s0 will not infer the join for you, you have to tell it the join tables.
.SS "Choosing Features"
.IX Subsection "Choosing Features"
In fact, this class is just a recipe containing all the features emulated.
If you like, you can choose which features to emulate by building your
own class and loading it like this:
.PP
.Vb 2
\&  package My::DB;
\&  _\|_PACKAGE_\|_\->load_own_components(qw/CDBICompat/);
.Ve
.PP
this will automatically load the features included in My::DB::CDBICompat,
provided it looks something like this:
.PP
.Vb 8
\&  package My::DB::CDBICompat;
\&  _\|_PACKAGE_\|_\->load_components(qw/
\&    CDBICompat::ColumnGroups
\&    CDBICompat::Retrieve
\&    CDBICompat::HasA
\&    CDBICompat::HasMany
\&    CDBICompat::MightHave
\&  /);
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.SS "Unimplemented"
.IX Subsection "Unimplemented"
The following methods and classes are not emulated, maybe in the future.
.IP "Class::DBI::Query" 4
.IX Item "Class::DBI::Query"
Deprecated in Class::DBI.
.IP "Class::DBI::Column" 4
.IX Item "Class::DBI::Column"
Not documented in Class::DBI.  CDBICompat's \fIcolumns()\fR returns a plain string, not an object.
.IP "\fIdata_type()\fR" 4
.IX Item "data_type()"
Undocumented \s-1CDBI\s0 method.
.SS "Limited Support"
.IX Subsection "Limited Support"
The following elements of Class::DBI have limited support.
.IP "Class::DBI::Relationship" 4
.IX Item "Class::DBI::Relationship"
The semi-documented Class::DBI::Relationship objects returned by \f(CW\*(C`meta_info($type, $col)\*(C'\fR are mostly emulated except for their \f(CW\*(C`args\*(C'\fR method.
.IP "Relationships" 4
.IX Item "Relationships"
Relationships between tables (has_a, has_many...) must be declared after all tables in the relationship have been declared.  Thus the usual \s-1CDBI\s0 idiom of declaring columns and relationships for each class together will not work.  They must instead be done like so:
.Sp
.Vb 2
\&    package Foo;
\&    use base qw(Class::DBI);
\&
\&    Foo\->table("foo");
\&    Foo\->columns( All => qw(this that bar) );
\&
\&    package Bar;
\&    use base qw(Class::DBI);
\&
\&    Bar\->table("bar");
\&    Bar\->columns( All => qw(up down) );
\&
\&    # Now that Foo and Bar are declared it is safe to declare a
\&    # relationship between them
\&    Foo\->has_a( bar => "Bar" );
.Ve
.SH "AUTHOR AND CONTRIBUTORS"
.IX Header "AUTHOR AND CONTRIBUTORS"
See \s-1AUTHOR\s0 and \s-1CONTRIBUTORS\s0 in DBIx::Class
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat5.16.3pm              0100644 0001750 0001750 00000017713 12566242362 025536  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat 3"
.TH DBIx::Class::CDBICompat 3 "2012-10-18" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat \- Class::DBI Compatibility layer.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package My::CDBI;
\&  use base qw/DBIx::Class::CDBICompat/;
\&
\&  ...continue as Class::DBI...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::Class features a fully featured compatibility layer with Class::DBI
and some common plugins to ease transition for existing \s-1CDBI\s0 users.
.PP
This is not a wrapper or subclass of DBIx::Class but rather a series of plugins.  The result being that even though you're using the Class::DBI emulation layer you are still getting DBIx::Class objects.  You can use all DBIx::Class features and methods via CDBICompat.  This allows you to take advantage of DBIx::Class features without having to rewrite your \s-1CDBI\s0 code.
.SS "Plugins"
.IX Subsection "Plugins"
CDBICompat is good enough that many \s-1CDBI\s0 plugins will work with CDBICompat, but many of the plugin features are better done with DBIx::Class methods.
.PP
\fIClass::DBI::AbstractSearch\fR
.IX Subsection "Class::DBI::AbstractSearch"
.PP
\&\f(CW\*(C`search_where()\*(C'\fR is fully emulated using \s-1DBIC\s0's search.  Aside from emulation there's no reason to use \f(CW\*(C`search_where()\*(C'\fR.
.PP
\fIClass::DBI::Plugin::NoCache\fR
.IX Subsection "Class::DBI::Plugin::NoCache"
.PP
\&\f(CW\*(C`nocache\*(C'\fR is fully emulated.
.PP
\fIClass::DBI::Sweet\fR
.IX Subsection "Class::DBI::Sweet"
.PP
The features of CDBI::Sweet are better done using \s-1DBIC\s0 methods which are almost exactly the same.  It even uses Data::Page.
.PP
\fIClass::DBI::Plugin::DeepAbstractSearch\fR
.IX Subsection "Class::DBI::Plugin::DeepAbstractSearch"
.PP
This plugin will work, but it is more efficiently done using \s-1DBIC\s0's native search facilities.  The major difference is that \s-1DBIC\s0 will not infer the join for you, you have to tell it the join tables.
.SS "Choosing Features"
.IX Subsection "Choosing Features"
In fact, this class is just a recipe containing all the features emulated.
If you like, you can choose which features to emulate by building your
own class and loading it like this:
.PP
.Vb 2
\&  package My::DB;
\&  _\|_PACKAGE_\|_\->load_own_components(qw/CDBICompat/);
.Ve
.PP
this will automatically load the features included in My::DB::CDBICompat,
provided it looks something like this:
.PP
.Vb 8
\&  package My::DB::CDBICompat;
\&  _\|_PACKAGE_\|_\->load_components(qw/
\&    CDBICompat::ColumnGroups
\&    CDBICompat::Retrieve
\&    CDBICompat::HasA
\&    CDBICompat::HasMany
\&    CDBICompat::MightHave
\&  /);
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.SS "Unimplemented"
.IX Subsection "Unimplemented"
The following methods and classes are not emulated, maybe in the future.
.IP "Class::DBI::Query" 4
.IX Item "Class::DBI::Query"
Deprecated in Class::DBI.
.IP "Class::DBI::Column" 4
.IX Item "Class::DBI::Column"
Not documented in Class::DBI.  CDBICompat's \fIcolumns()\fR returns a plain string, not an object.
.IP "\fIdata_type()\fR" 4
.IX Item "data_type()"
Undocumented \s-1CDBI\s0 method.
.SS "Limited Support"
.IX Subsection "Limited Support"
The following elements of Class::DBI have limited support.
.IP "Class::DBI::Relationship" 4
.IX Item "Class::DBI::Relationship"
The semi-documented Class::DBI::Relationship objects returned by \f(CW\*(C`meta_info($type, $col)\*(C'\fR are mostly emulated except for their \f(CW\*(C`args\*(C'\fR method.
.IP "Relationships" 4
.IX Item "Relationships"
Relationships between tables (has_a, has_many...) must be declared after all tables in the relationship have been declared.  Thus the usual \s-1CDBI\s0 idiom of declaring columns and relationships for each class together will not work.  They must instead be done like so:
.Sp
.Vb 2
\&    package Foo;
\&    use base qw(Class::DBI);
\&
\&    Foo\->table("foo");
\&    Foo\->columns( All => qw(this that bar) );
\&
\&    package Bar;
\&    use base qw(Class::DBI);
\&
\&    Bar\->table("bar");
\&    Bar\->columns( All => qw(up down) );
\&
\&    # Now that Foo and Bar are declared it is safe to declare a
\&    # relationship between them
\&    Foo\->has_a( bar => "Bar" );
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
Matt S. Trout <mst@shadowcatsystems.co.uk>
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat5.18.3pm              0100644 0001750 0001750 00000020312 12566242400 025516  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat 3"
.TH DBIx::Class::CDBICompat 3 "2013-12-16" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat \- Class::DBI Compatibility layer.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  package My::CDBI;
\&  use base qw/DBIx::Class::CDBICompat/;
\&
\&  ...continue as Class::DBI...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
DBIx::Class features a fully featured compatibility layer with Class::DBI
and some common plugins to ease transition for existing \s-1CDBI\s0 users.
.PP
This is not a wrapper or subclass of DBIx::Class but rather a series of plugins.  The result being that even though you're using the Class::DBI emulation layer you are still getting DBIx::Class objects.  You can use all DBIx::Class features and methods via CDBICompat.  This allows you to take advantage of DBIx::Class features without having to rewrite your \s-1CDBI\s0 code.
.SS "Plugins"
.IX Subsection "Plugins"
CDBICompat is good enough that many \s-1CDBI\s0 plugins will work with CDBICompat, but many of the plugin features are better done with DBIx::Class methods.
.PP
\fIClass::DBI::AbstractSearch\fR
.IX Subsection "Class::DBI::AbstractSearch"
.PP
\&\f(CW\*(C`search_where()\*(C'\fR is fully emulated using \s-1DBIC\s0's search.  Aside from emulation there's no reason to use \f(CW\*(C`search_where()\*(C'\fR.
.PP
\fIClass::DBI::Plugin::NoCache\fR
.IX Subsection "Class::DBI::Plugin::NoCache"
.PP
\&\f(CW\*(C`nocache\*(C'\fR is fully emulated.
.PP
\fIClass::DBI::Sweet\fR
.IX Subsection "Class::DBI::Sweet"
.PP
The features of CDBI::Sweet are better done using \s-1DBIC\s0 methods which are almost exactly the same.  It even uses Data::Page.
.PP
\fIClass::DBI::Plugin::DeepAbstractSearch\fR
.IX Subsection "Class::DBI::Plugin::DeepAbstractSearch"
.PP
This plugin will work, but it is more efficiently done using \s-1DBIC\s0's native search facilities.  The major difference is that \s-1DBIC\s0 will not infer the join for you, you have to tell it the join tables.
.SS "Choosing Features"
.IX Subsection "Choosing Features"
In fact, this class is just a recipe containing all the features emulated.
If you like, you can choose which features to emulate by building your
own class and loading it like this:
.PP
.Vb 2
\&  package My::DB;
\&  _\|_PACKAGE_\|_\->load_own_components(qw/CDBICompat/);
.Ve
.PP
this will automatically load the features included in My::DB::CDBICompat,
provided it looks something like this:
.PP
.Vb 8
\&  package My::DB::CDBICompat;
\&  _\|_PACKAGE_\|_\->load_components(qw/
\&    CDBICompat::ColumnGroups
\&    CDBICompat::Retrieve
\&    CDBICompat::HasA
\&    CDBICompat::HasMany
\&    CDBICompat::MightHave
\&  /);
.Ve
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
.SS "Unimplemented"
.IX Subsection "Unimplemented"
The following methods and classes are not emulated, maybe in the future.
.IP "Class::DBI::Query" 4
.IX Item "Class::DBI::Query"
Deprecated in Class::DBI.
.IP "Class::DBI::Column" 4
.IX Item "Class::DBI::Column"
Not documented in Class::DBI.  CDBICompat's \fIcolumns()\fR returns a plain string, not an object.
.IP "\fIdata_type()\fR" 4
.IX Item "data_type()"
Undocumented \s-1CDBI\s0 method.
.SS "Limited Support"
.IX Subsection "Limited Support"
The following elements of Class::DBI have limited support.
.IP "Class::DBI::Relationship" 4
.IX Item "Class::DBI::Relationship"
The semi-documented Class::DBI::Relationship objects returned by \f(CW\*(C`meta_info($type, $col)\*(C'\fR are mostly emulated except for their \f(CW\*(C`args\*(C'\fR method.
.IP "Relationships" 4
.IX Item "Relationships"
Relationships between tables (has_a, has_many...) must be declared after all tables in the relationship have been declared.  Thus the usual \s-1CDBI\s0 idiom of declaring columns and relationships for each class together will not work.  They must instead be done like so:
.Sp
.Vb 2
\&    package Foo;
\&    use base qw(Class::DBI);
\&
\&    Foo\->table("foo");
\&    Foo\->columns( All => qw(this that bar) );
\&
\&    package Bar;
\&    use base qw(Class::DBI);
\&
\&    Bar\->table("bar");
\&    Bar\->columns( All => qw(up down) );
\&
\&    # Now that Foo and Bar are declared it is safe to declare a
\&    # relationship between them
\&    Foo\->has_a( bar => "Bar" );
.Ve
.SH "AUTHOR AND CONTRIBUTORS"
.IX Header "AUTHOR AND CONTRIBUTORS"
See \s-1AUTHOR\s0 and \s-1CONTRIBUTORS\s0 in DBIx::Class
.SH "LICENSE"
.IX Header "LICENSE"
You may distribute this code under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::AbstractSearch.3pm  0100644 0001750 0001750 00000010342 12566242400 030202  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::AbstractSearch 3"
.TH DBIx::Class::CDBICompat::AbstractSearch 3 "2013-07-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::AbstractSearch \- Emulates Class::DBI::AbstractSearch
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates Class::DBI::AbstractSearch.
                                                                                                                                                                                                                                                                                              DBIx::Class::CDBICompat::AbstractSearch5.16.3pm                                                     0100644 0001750 0001750 00000010021 12566242362 030436  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3                                                                                                                 .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::AbstractSearch 3"
.TH DBIx::Class::CDBICompat::AbstractSearch 3 "2011-05-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::AbstractSearch \- Emulates Class::DBI::AbstractSearch
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates Class::DBI::AbstractSearch.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               DBIx::Class::CDBICompat::AbstractSearch5.18.3pm                                                     0100644 0001750 0001750 00000010342 12566242400 030437  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3                                                                                                                 .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::AbstractSearch 3"
.TH DBIx::Class::CDBICompat::AbstractSearch 3 "2013-07-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::AbstractSearch \- Emulates Class::DBI::AbstractSearch
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates Class::DBI::AbstractSearch.
                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::ColumnsAsHash.3pm   0100644 0001750 0001750 00000011173 12566242400 030024  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::ColumnsAsHash 3"
.TH DBIx::Class::CDBICompat::ColumnsAsHash 3 "2014-01-05" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::ColumnsAsHash \- Emulates the behavior of Class::DBI where the object can be accessed as a hash of columns.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates the \fIundocumented\fR behavior of Class::DBI where the object can be accessed as a hash of columns.  This is often used as a performance hack.
.PP
.Vb 1
\&    my $column = $result\->{column};
.Ve
.SS "Differences from Class::DBI"
.IX Subsection "Differences from Class::DBI"
If \f(CW\*(C`DBIC_CDBICOMPAT_HASH_WARN\*(C'\fR is true it will warn when a column is accessed as a hash key.
                                                                                                                                                                                                                                                                                                                                                                                                     DBIx::Class::CDBICompat::ColumnsAsHash5.16.3pm                                                      0100644 0001750 0001750 00000010646 12566242363 030273  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3                                                                                                                 .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::ColumnsAsHash 3"
.TH DBIx::Class::CDBICompat::ColumnsAsHash 3 "2011-05-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::ColumnsAsHash \- Emulates the behavior of Class::DBI where the object can be accessed as a hash of columns.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates the \fIundocumnted\fR behavior of Class::DBI where the object can be accessed as a hash of columns.  This is often used as a performance hack.
.PP
.Vb 1
\&    my $column = $row\->{column};
.Ve
.SS "Differences from Class::DBI"
.IX Subsection "Differences from Class::DBI"
If \f(CW\*(C`DBIC_CDBICOMPAT_HASH_WARN\*(C'\fR is true it will warn when a column is accessed as a hash key.
                                                                                          DBIx::Class::CDBICompat::ColumnsAsHash5.18.3pm                                                      0100644 0001750 0001750 00000011173 12566242400 030261  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3                                                                                                                 .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::ColumnsAsHash 3"
.TH DBIx::Class::CDBICompat::ColumnsAsHash 3 "2014-01-05" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::ColumnsAsHash \- Emulates the behavior of Class::DBI where the object can be accessed as a hash of columns.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates the \fIundocumented\fR behavior of Class::DBI where the object can be accessed as a hash of columns.  This is often used as a performance hack.
.PP
.Vb 1
\&    my $column = $result\->{column};
.Ve
.SS "Differences from Class::DBI"
.IX Subsection "Differences from Class::DBI"
If \f(CW\*(C`DBIC_CDBICOMPAT_HASH_WARN\*(C'\fR is true it will warn when a column is accessed as a hash key.
                                                                                                                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::Copy.3pm            0100644 0001750 0001750 00000010330 12566242400 026220  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Copy 3"
.TH DBIx::Class::CDBICompat::Copy 3 "2013-07-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Copy \- Emulates Class::DBI\->copy($new_id)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates \f(CW\*(C`<Class::DBI\-\*(C'\fRcopy($new_id)>>.
                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::Copy5.16.3pm        0100644 0001750 0001750 00000010007 12566242361 026541  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Copy 3"
.TH DBIx::Class::CDBICompat::Copy 3 "2011-05-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Copy \- Emulates Class::DBI\->copy($new_id)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates \f(CW\*(C`<Class::DBI\-\*(C'\fRcopy($new_id)>>.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::Copy5.18.3pm        0100644 0001750 0001750 00000010330 12566242400 026534  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Copy 3"
.TH DBIx::Class::CDBICompat::Copy 3 "2013-07-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Copy \- Emulates Class::DBI\->copy($new_id)
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates \f(CW\*(C`<Class::DBI\-\*(C'\fRcopy($new_id)>>.
                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::Iterator.3pm        0100644 0001750 0001750 00000010761 12566242400 027107  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Iterator 3"
.TH DBIx::Class::CDBICompat::Iterator 3 "2013-12-16" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Iterator \- Emulates the extra behaviors of the Class::DBI search iterator.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates the extra behaviors of the Class::DBI search iterator.
.SS "Differences from DBIx::Class result set"
.IX Subsection "Differences from DBIx::Class result set"
The \s-1CDBI\s0 iterator returns true if there were any results, false otherwise.  The \s-1DBIC\s0 result set always returns true.
               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::Iterator5.16.3pm    0100644 0001750 0001750 00000010440 12566242362 027422  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Iterator 3"
.TH DBIx::Class::CDBICompat::Iterator 3 "2011-05-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Iterator \- Emulates the extra behaviors of the Class::DBI search iterator.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates the extra behaviors of the Class::DBI search iterator.
.SS "Differences from DBIx::Class result set"
.IX Subsection "Differences from DBIx::Class result set"
The \s-1CDBI\s0 iterator returns true if there were any results, false otherwise.  The \s-1DBIC\s0 result set always returns true.
                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::Iterator5.18.3pm    0100644 0001750 0001750 00000010761 12566242400 027423  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Iterator 3"
.TH DBIx::Class::CDBICompat::Iterator 3 "2013-12-16" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Iterator \- Emulates the extra behaviors of the Class::DBI search iterator.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
See DBIx::Class::CDBICompat for usage directions.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulates the extra behaviors of the Class::DBI search iterator.
.SS "Differences from DBIx::Class result set"
.IX Subsection "Differences from DBIx::Class result set"
The \s-1CDBI\s0 iterator returns true if there were any results, false otherwise.  The \s-1DBIC\s0 result set always returns true.
               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::NoObjectIndex.3pm   0100644 0001750 0001750 00000010640 12566242400 030005  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::NoObjectIndex 3"
.TH DBIx::Class::CDBICompat::NoObjectIndex 3 "2013-07-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::NoObjectIndex \- Defines empty methods for object indexing. They do nothing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    Part of CDBICompat
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Defines empty methods for object indexing.  They do nothing.
.PP
Using NoObjectIndex instead of LiveObjectIndex and \fInocache\fR\|(1) is a little
faster because it removes code from the object insert and retrieve chains.
                                                                                                DBIx::Class::CDBICompat::NoObjectIndex5.16.3pm                                                      0100644 0001750 0001750 00000010317 12566242362 030250  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3                                                                                                                 .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::NoObjectIndex 3"
.TH DBIx::Class::CDBICompat::NoObjectIndex 3 "2011-05-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::NoObjectIndex \- Defines empty methods for object indexing. They do nothing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    Part of CDBICompat
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Defines empty methods for object indexing.  They do nothing.
.PP
Using NoObjectIndex instead of LiveObjectIndex and \fInocache\fR\|(1) is a little
faster because it removes code from the object insert and retrieve chains.
                                                                                                                                                                                                                                                                                                                 DBIx::Class::CDBICompat::NoObjectIndex5.18.3pm                                                      0100644 0001750 0001750 00000010640 12566242400 030242  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3                                                                                                                 .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::NoObjectIndex 3"
.TH DBIx::Class::CDBICompat::NoObjectIndex 3 "2013-07-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::NoObjectIndex \- Defines empty methods for object indexing. They do nothing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    Part of CDBICompat
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Defines empty methods for object indexing.  They do nothing.
.PP
Using NoObjectIndex instead of LiveObjectIndex and \fInocache\fR\|(1) is a little
faster because it removes code from the object insert and retrieve chains.
                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::Relationship.3pm    0100644 0001750 0001750 00000010333 12566242400 027752  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Relationship 3"
.TH DBIx::Class::CDBICompat::Relationship 3 "2013-07-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Relationship \- Emulate the Class::DBI::Relationship object returned from meta_info()
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulate the Class::DBI::Relationship object returned from \f(CW\*(C`meta_info()\*(C'\fR.
                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::Relationship5.16.3pm0100644 0001750 0001750 00000010012 12566242363 030266  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Relationship 3"
.TH DBIx::Class::CDBICompat::Relationship 3 "2011-05-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Relationship \- Emulate the Class::DBI::Relationship object returned from meta_info()
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulate the Class::DBI::Relationship object returned from \f(CW\*(C`meta_info()\*(C'\fR.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::Relationship5.18.3pm0100644 0001750 0001750 00000010333 12566242400 030266  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Relationship 3"
.TH DBIx::Class::CDBICompat::Relationship 3 "2013-07-12" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Relationship \- Emulate the Class::DBI::Relationship object returned from meta_info()
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulate the Class::DBI::Relationship object returned from \f(CW\*(C`meta_info()\*(C'\fR.
                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::Relationships.3pm   0100644 0001750 0001750 00000010364 12566242377 030156  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Relationships 3"
.TH DBIx::Class::CDBICompat::Relationships 3 "2013-10-05" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Relationships \- Emulate has_a(), has_many(), might_have() and meta_info()
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulate \f(CW\*(C`has_a\*(C'\fR, \f(CW\*(C`has_many\*(C'\fR, \f(CW\*(C`might_have\*(C'\fR and \f(CW\*(C`meta_info\*(C'\fR.
                                                                                                                                                                                                                                                                            DBIx::Class::CDBICompat::Relationships5.16.3pm                                                      0100644 0001750 0001750 00000010043 12566242362 030375  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3                                                                                                                 .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Relationships 3"
.TH DBIx::Class::CDBICompat::Relationships 3 "2011-05-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Relationships \- Emulate has_a(), has_many(), might_have() and meta_info()
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulate \f(CW\*(C`has_a\*(C'\fR, \f(CW\*(C`has_many\*(C'\fR, \f(CW\*(C`might_have\*(C'\fR and \f(CW\*(C`meta_info\*(C'\fR.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             DBIx::Class::CDBICompat::Relationships5.18.3pm                                                      0100644 0001750 0001750 00000010364 12566242377 030413  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3                                                                                                                 .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::Relationships 3"
.TH DBIx::Class::CDBICompat::Relationships 3 "2013-10-05" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::Relationships \- Emulate has_a(), has_many(), might_have() and meta_info()
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Emulate \f(CW\*(C`has_a\*(C'\fR, \f(CW\*(C`has_many\*(C'\fR, \f(CW\*(C`might_have\*(C'\fR and \f(CW\*(C`meta_info\*(C'\fR.
                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::CDBICompat::SQLTransformer.3pm  0100644 0001750 0001750 00000010347 12566242377 030215  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::SQLTransformer 3"
.TH DBIx::Class::CDBICompat::SQLTransformer 3 "2013-04-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::SQLTransformer \- Transform SQL
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a copy of Class::DBI::SQL::Transformer from Class::DBI 3.0.17.
It is here so we can be compatible with Class::DBI without having it
installed.
                                                                                                                                                                                                                                                                                         DBIx::Class::CDBICompat::SQLTransformer5.16.3pm                                                     0100644 0001750 0001750 00000010026 12566242363 030435  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3                                                                                                                 .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::SQLTransformer 3"
.TH DBIx::Class::CDBICompat::SQLTransformer 3 "2011-05-23" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::SQLTransformer \- Transform SQL
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a copy of Class::DBI::SQL::Transformer from Class::DBI 3.0.17.
It is here so we can be compatible with Class::DBI without having it
installed.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          DBIx::Class::CDBICompat::SQLTransformer5.18.3pm                                                     0100644 0001750 0001750 00000010347 12566242377 030452  0                                                                                                    ustar 00                                                                0000000 0000000 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3                                                                                                                 .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::CDBICompat::SQLTransformer 3"
.TH DBIx::Class::CDBICompat::SQLTransformer 3 "2013-04-03" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::CDBICompat::SQLTransformer \- Transform SQL
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a copy of Class::DBI::SQL::Transformer from Class::DBI 3.0.17.
It is here so we can be compatible with Class::DBI without having it
installed.
                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::Carp.3pm                        0100644 0001750 0001750 00000014036 12566242400 024230  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Carp 3"
.TH DBIx::Class::Carp 3 "2013-12-16" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Carp \- Provides advanced Carp::Clan\-like warning functions for DBIx::Class internals
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Documentation is lacking on purpose \- this an experiment not yet fit for
mass consumption. If you use this do not count on any kind of stability,
in fact don't even count on this module's continuing existence (it has
been noindexed for a reason).
.PP
In addition to the classic interface:
.PP
.Vb 1
\&  use DBIx::Class::Carp \*(Aq^DBIx::Class\*(Aq
.Ve
.PP
this module also supports a class-data based way to specify the exclusion
regex. A message is only carped from a callsite that matches neither the
closed over string, nor the value of \*(L"_skip_namespace_frames\*(R" as declared
on any callframe already skipped due to the same mechanism. This is to ensure
that intermediate callsites can declare their own additional skip-namespaces.
.SH "CLASS ATTRIBUTES"
.IX Header "CLASS ATTRIBUTES"
.SS "_skip_namespace_frames"
.IX Subsection "_skip_namespace_frames"
A classdata attribute holding the stringified regex matching callsites that
should be skipped by the carp methods below. An empty string \f(CW\*(C`q{}\*(C'\fR is treated
like no setting/\f(CW\*(C`undef\*(C'\fR (the distinction is necessary due to semantics of the
class data accessors provided by Class::Accessor::Grouped)
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
This module export the following 3 functions. Only warning related \f(CW\*(C`carp*\*(C'\fR
is being handled here, for \f(CW\*(C`croak\*(C'\fR\-ing you must use
\&\*(L"throw_exception\*(R" in DBIx::Class::Schema or DBIx::Class::Exception.
.SS "carp"
.IX Subsection "carp"
Carps message with the file/line of the first callsite not matching
\&\*(L"_skip_namespace_frames\*(R" nor the closed-over arguments to
\&\f(CW\*(C`use DBIx::Class::Carp\*(C'\fR.
.SS "carp_unique"
.IX Subsection "carp_unique"
Like \*(L"carp\*(R" but warns once for every distinct callsite (subject to the
same ruleset as \*(L"carp\*(R").
.SS "carp_once"
.IX Subsection "carp_once"
Like \*(L"carp\*(R" but warns only once for the life of the perl interpreter
(regardless of callsite).
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::Carp5.16.3pm                    0100644 0001750 0001750 00000013515 12566242362 024552  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Carp 3"
.TH DBIx::Class::Carp 3 "2012-08-16" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Carp \- Provides advanced Carp::Clan\-like warning functions for DBIx::Class internals
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Documentation is lacking on purpose \- this an experiment not yet fit for
mass consumption. If you use this do not count on any kind of stability,
in fact don't even count on this module's continuing existence (it has
been noindexed for a reason).
.PP
In addition to the classic interface:
.PP
.Vb 1
\&  use DBIx::Class::Carp \*(Aq^DBIx::Class\*(Aq
.Ve
.PP
this module also supports a class-data based way to specify the exclusion
regex. A message is only carped from a callsite that matches neither the
closed over string, nor the value of \*(L"_skip_namespace_frames\*(R" as declared
on any callframe already skipped due to the same mechanism. This is to ensure
that intermediate callsites can declare their own additional skip-namespaces.
.SH "CLASS ATTRIBUTES"
.IX Header "CLASS ATTRIBUTES"
.SS "_skip_namespace_frames"
.IX Subsection "_skip_namespace_frames"
A classdata attribute holding the stringified regex matching callsites that
should be skipped by the carp methods below. An empty string \f(CW\*(C`q{}\*(C'\fR is treated
like no setting/\f(CW\*(C`undef\*(C'\fR (the distinction is necessary due to semantics of the
class data accessors provided by Class::Accessor::Grouped)
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
This module export the following 3 functions. Only warning related \f(CW\*(C`carp*\*(C'\fR
is being handled here, for \f(CW\*(C`croak\*(C'\fR\-ing you must use
\&\*(L"throw_exception\*(R" in DBIx::Class::Schema or DBIx::Class::Exception.
.SS "carp"
.IX Subsection "carp"
Carps message with the file/line of the first callsite not matching
\&\*(L"_skip_namespace_frames\*(R" nor the closed-over arguments to
\&\f(CW\*(C`use DBIx::Class::Carp\*(C'\fR.
.SS "carp_unique"
.IX Subsection "carp_unique"
Like \*(L"carp\*(R" but warns once for every distinct callsite (subject to the
same ruleset as \*(L"carp\*(R").
.SS "carp_once"
.IX Subsection "carp_once"
Like \*(L"carp\*(R" but warns only once for the life of the perl interpreter
(regardless of callsite).
                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::Carp5.18.3pm                    0100644 0001750 0001750 00000014036 12566242400 024544  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "DBIx::Class::Carp 3"
.TH DBIx::Class::Carp 3 "2013-12-16" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
DBIx::Class::Carp \- Provides advanced Carp::Clan\-like warning functions for DBIx::Class internals
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Documentation is lacking on purpose \- this an experiment not yet fit for
mass consumption. If you use this do not count on any kind of stability,
in fact don't even count on this module's continuing existence (it has
been noindexed for a reason).
.PP
In addition to the classic interface:
.PP
.Vb 1
\&  use DBIx::Class::Carp \*(Aq^DBIx::Class\*(Aq
.Ve
.PP
this module also supports a class-data based way to specify the exclusion
regex. A message is only carped from a callsite that matches neither the
closed over string, nor the value of \*(L"_skip_namespace_frames\*(R" as declared
on any callframe already skipped due to the same mechanism. This is to ensure
that intermediate callsites can declare their own additional skip-namespaces.
.SH "CLASS ATTRIBUTES"
.IX Header "CLASS ATTRIBUTES"
.SS "_skip_namespace_frames"
.IX Subsection "_skip_namespace_frames"
A classdata attribute holding the stringified regex matching callsites that
should be skipped by the carp methods below. An empty string \f(CW\*(C`q{}\*(C'\fR is treated
like no setting/\f(CW\*(C`undef\*(C'\fR (the distinction is necessary due to semantics of the
class data accessors provided by Class::Accessor::Grouped)
.SH "EXPORTED FUNCTIONS"
.IX Header "EXPORTED FUNCTIONS"
This module export the following 3 functions. Only warning related \f(CW\*(C`carp*\*(C'\fR
is being handled here, for \f(CW\*(C`croak\*(C'\fR\-ing you must use
\&\*(L"throw_exception\*(R" in DBIx::Class::Schema or DBIx::Class::Exception.
.SS "carp"
.IX Subsection "carp"
Carps message with the file/line of the first callsite not matching
\&\*(L"_skip_namespace_frames\*(R" nor the closed-over arguments to
\&\f(CW\*(C`use DBIx::Class::Carp\*(C'\fR.
.SS "carp_unique"
.IX Subsection "carp_unique"
Like \*(L"carp\*(R" but warns once for every distinct callsite (subject to the
same ruleset as \*(L"carp\*(R").
.SS "carp_once"
.IX Subsection "carp_once"
Like \*(L"carp\*(R" but warns only once for the life of the perl interpreter
(regardless of callsite).
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/DBIx::Class::Core.3pm                        0100644 0001750 0001750 00000012322 12566242377 024244  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(