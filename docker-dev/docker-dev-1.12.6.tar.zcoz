\er?$';
.Sp
.Vb 1
\&  $telnet\->expect(10,\*(Aq\-re\*(Aq,$match);
.Ve
.Sp
\&\fINew more Tcl/Expect\-like interface:\fR
.Sp
It's now possible to expect on more than one connection at a time by
specifying '\f(CW\*(C`\-i\*(C'\fR' and a single Expect object or a ref to an array
containing Expect objects, e.g.
.Sp
.Vb 4
\& expect($timeout,
\&        \*(Aq\-i\*(Aq, $exp1, @patterns_1,
\&        \*(Aq\-i\*(Aq, [ $exp2, $exp3 ], @patterns_2_3,
\&       )
.Ve
.Sp
Furthermore, patterns can now be specified as array refs containing
[$regexp, sub { ...}, \f(CW@optional_subprams\fR] . When the pattern matches,
the subroutine is called with parameters ($matched_expect_obj,
\&\f(CW@optional_subparms\fR). The subroutine can return the symbol
`exp_continue' to continue the expect matching with timeout starting
anew or return the symbol `exp_continue_timeout' for continuing expect
without resetting the timeout count.
.Sp
.Vb 8
\& $exp\->expect($timeout,
\&              [ qr/username: /i, sub { my $self = shift;
\&                                       $self\->send("$username\en");
\&                                       exp_continue; }],
\&              [ qr/password: /i, sub { my $self = shift;
\&                                       $self\->send("$password\en");
\&                                       exp_continue; }],
\&              $shell_prompt);
.Ve
.Sp
`expect' is now exported by default.
.ie n .IP "$object\->\fIexp_before()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_before()\fR \fIor\fR" 4
.IX Item "$object->exp_before() or"
.PD 0
.ie n .IP "$object\->\fIbefore()\fR" 4
.el .IP "\f(CW$object\fR\->\fIbefore()\fR" 4
.IX Item "$object->before()"
.PD
\&\fIbefore()\fR returns the 'before' part of the last \fIexpect()\fR call. If the last
\&\fIexpect()\fR call didn't match anything, \fIexp_before()\fR will return the entire
output of the object accumulated before the \fIexpect()\fR call finished.
.Sp
Note that this is something different than Tcl Expects \fIbefore()\fR!!
.ie n .IP "$object\->\fIexp_after()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_after()\fR \fIor\fR" 4
.IX Item "$object->exp_after() or"
.PD 0
.ie n .IP "$object\->\fIafter()\fR" 4
.el .IP "\f(CW$object\fR\->\fIafter()\fR" 4
.IX Item "$object->after()"
.PD
returns the 'after' part of the last \fIexpect()\fR call. If the last
\&\fIexpect()\fR call didn't match anything, \fIexp_after()\fR will return \fIundef()\fR.
.ie n .IP "$object\->\fIexp_match()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_match()\fR \fIor\fR" 4
.IX Item "$object->exp_match() or"
.PD 0
.ie n .IP "$object\->\fImatch()\fR" 4
.el .IP "\f(CW$object\fR\->\fImatch()\fR" 4
.IX Item "$object->match()"
.PD
returns the string matched by the last \fIexpect()\fR call, undef if
no string was matched.
.ie n .IP "$object\->\fIexp_match_number()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_match_number()\fR \fIor\fR" 4
.IX Item "$object->exp_match_number() or"
.PD 0
.ie n .IP "$object\->\fImatch_number()\fR" 4
.el .IP "\f(CW$object\fR\->\fImatch_number()\fR" 4
.IX Item "$object->match_number()"
.PD
\&\fIexp_match_number()\fR returns the number of the pattern matched by the last
\&\fIexpect()\fR call. Keep in mind that the first pattern in a list of patterns is 1,
not 0. Returns undef if no pattern was matched.
.ie n .IP "$object\->\fIexp_matchlist()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_matchlist()\fR \fIor\fR" 4
.IX Item "$object->exp_matchlist() or"
.PD 0
.ie n .IP "$object\->\fImatchlist()\fR" 4
.el .IP "\f(CW$object\fR\->\fImatchlist()\fR" 4
.IX Item "$object->matchlist()"
.PD
\&\fIexp_matchlist()\fR returns a list of matched substrings from the brackets
() inside the regexp that last matched. ($object\->matchlist)[0]
thus corresponds to \f(CW$1\fR, ($object\->matchlist)[1] to \f(CW$2\fR, etc.
.ie n .IP "$object\->\fIexp_error()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_error()\fR \fIor\fR" 4
.IX Item "$object->exp_error() or"
.PD 0
.ie n .IP "$object\->\fIerror()\fR" 4
.el .IP "\f(CW$object\fR\->\fIerror()\fR" 4
.IX Item "$object->error()"
.PD
\&\fIexp_error()\fR returns the error generated by the last \fIexpect()\fR call if
no pattern was matched. It is typically useful to examine the value returned by
\&\fIbefore()\fR to find out what the output of the object was in determining
why it didn't match any of the patterns.
.ie n .IP "$object\->\fIclear_accum()\fR" 4
.el .IP "\f(CW$object\fR\->\fIclear_accum()\fR" 4
.IX Item "$object->clear_accum()"
Clear the contents of the accumulator for \f(CW$object\fR. This gets rid of
any residual contents of a handle after \fIexpect()\fR or \fIsend_slow()\fR such
that the next \fIexpect()\fR call will only see new data from \f(CW$object\fR. The
contents of the accumulator are returned.
.ie n .IP "$object\->set_accum($value)" 4
.el .IP "\f(CW$object\fR\->set_accum($value)" 4
.IX Item "$object->set_accum($value)"
Sets the content of the accumulator for \f(CW$object\fR to \f(CW$value\fR. The
previous content of the accumulator is returned.
.ie n .IP "$object\->\fIexp_command()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_command()\fR \fIor\fR" 4
.IX Item "$object->exp_command() or"
.PD 0
.ie n .IP "$object\->\fIcommand()\fR" 4
.el .IP "\f(CW$object\fR\->\fIcommand()\fR" 4
.IX Item "$object->command()"
.PD
\&\fIexp_command()\fR returns the string that was used to spawn the command. Helpful
for debugging and for reused patternmatch subroutines.
.ie n .IP "$object\->\fIexp_exitstatus()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_exitstatus()\fR \fIor\fR" 4
.IX Item "$object->exp_exitstatus() or"
.PD 0
.ie n .IP "$object\->\fIexitstatus()\fR" 4
.el .IP "\f(CW$object\fR\->\fIexitstatus()\fR" 4
.IX Item "$object->exitstatus()"
.PD
Returns the exit status of \f(CW$object\fR (if it already exited).
.ie n .IP "$object\->\fIexp_pty_handle()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_pty_handle()\fR \fIor\fR" 4
.IX Item "$object->exp_pty_handle() or"
.PD 0
.ie n .IP "$object\->\fIpty_handle()\fR" 4
.el .IP "\f(CW$object\fR\->\fIpty_handle()\fR" 4
.IX Item "$object->pty_handle()"
.PD
Returns a string representation of the attached pty, for example:
`spawn \fIid\fR\|(5)' (pty has fileno 5), `handle \fIid\fR\|(7)' (pty was initialized
from fileno 7) or `\s-1STDIN\s0'. Useful for debugging.
.ie n .IP "$object\->restart_timeout_upon_receive(0 | 1)" 4
.el .IP "\f(CW$object\fR\->restart_timeout_upon_receive(0 | 1)" 4
.IX Item "$object->restart_timeout_upon_receive(0 | 1)"
If this is set to 1, the expect timeout is retriggered whenever something
is received from the spawned command.  This allows to perform some
aliveness testing and still expect for patterns.
.Sp
.Vb 5
\&    $exp\->restart_timeout_upon_receive(1);
\&    $exp\->expect($timeout,
\&                 [ timeout => \e&report_timeout ],
\&                 [ qr/pattern/ => \e&handle_pattern],
\&                );
.Ve
.Sp
Now the timeout isn't triggered if the command produces any kind of output,
i.e. is still alive, but you can act upon patterns in the output.
.ie n .IP "$object\->notransfer(1 | 0)" 4
.el .IP "\f(CW$object\fR\->notransfer(1 | 0)" 4
.IX Item "$object->notransfer(1 | 0)"
Do not truncate the content of the accumulator after a match.
Normally, the accumulator is set to the remains that come after the
matched string.  Note that this setting is per object and not per
pattern, so if you want to have normal acting patterns that truncate
the accumulator, you have to add a
.Sp
.Vb 1
\&    $exp\->set_accum($exp\->after);
.Ve
.Sp
to their callback, e.g.
.Sp
.Vb 12
\&    $exp\->notransfer(1);
\&    $exp\->expect($timeout,
\&                 # accumulator not truncated, pattern1 will match again
\&                 [ "pattern1" => sub { my $self = shift;
\&                                       ...
\&                                     } ],
\&                 # accumulator truncated, pattern2 will not match again
\&                 [ "pattern2" => sub { my $self = shift;
\&                                       ...
\&                                       $self\->set_accum($self\->after());
\&                                     } ],
\&                );
.Ve
.Sp
This is only a temporary fix until I can rewrite the pattern matching
part so it can take that additional \-notransfer argument.
.IP "Expect::interconnect(@objects);" 4
.IX Item "Expect::interconnect(@objects);"
Read from \f(CW@objects\fR and print to their \f(CW@listen_groups\fR until an escape sequence
is matched from one of \f(CW@objects\fR and the associated function returns 0 or undef.
The special escape sequence '\s-1EOF\s0' is matched when an object's handle returns
an end of file. Note that it is not necessary to include objects that only
accept data in \f(CW@objects\fR since the escape sequence is _read_ from an object.
Further note that the listen_group for a write-only object is always empty.
Why would you want to have objects listening to \s-1STDOUT \s0(for example)?
By default every member of \f(CW@objects\fR _as well as every member of its listen
group_ will be set to 'raw \-echo' for the duration of interconnection. 
Setting \f(CW$object\fR\->\fImanual_stty()\fR will stop this behavior per object.
The original tty settings will be restored as interconnect exits.
.Sp
For a generic way to interconnect processes, take a look at IPC::Run.
.IP "Expect::test_handles(@objects)" 4
.IX Item "Expect::test_handles(@objects)"
Given a set of objects determines which objects' handles have data ready
to be read. \fBReturns an array\fR who's members are positions in \f(CW@objects\fR that
have ready handles. Returns undef if there are no such handles ready.
.IP "Expect::version($version_requested or undef);" 4
.IX Item "Expect::version($version_requested or undef);"
Returns current version of Expect. As of .99 earlier versions are not
supported. Too many things were changed to make versioning possible.
.ie n .IP "$object\->interact( ""\e*FILEHANDLE, $escape_sequence"")" 4
.el .IP "\f(CW$object\fR\->interact( \f(CW\e*FILEHANDLE, $escape_sequence\fR)" 4
.IX Item "$object->interact( *FILEHANDLE, $escape_sequence)"
\&\fIinteract()\fR is essentially a macro for calling \fIinterconnect()\fR for
connecting 2 processes together. \e*FILEHANDLE defaults to \e*STDIN and 
\&\f(CW$escape_sequence\fR defaults to undef. Interaction ceases when \f(CW$escape_sequence\fR
is read from \fB\s-1FILEHANDLE\s0\fR, not \f(CW$object\fR. \f(CW$object\fR's listen group will 
consist solely of \e*FILEHANDLE for the duration of the interaction.
\&\e*FILEHANDLE will not be echoed on \s-1STDOUT. \s0
.ie n .IP "$object\->log_group(0 | 1 | undef)" 4
.el .IP "\f(CW$object\fR\->log_group(0 | 1 | undef)" 4
.IX Item "$object->log_group(0 | 1 | undef)"
Set/unset logging of \f(CW$object\fR to its 'listen group'. If set all objects
in the listen group will have output from \f(CW$object\fR printed to them during
\&\f(CW$object\fR\->\fIexpect()\fR, \f(CW$object\fR\->\fIsend_slow()\fR, and \f(CW\*(C`Expect::interconnect($object
, ...)\*(C'\fR. Default value is on. During creation of \f(CW$object\fR the setting will
match the value of \f(CW$Expect::Log_Group\fR, normally 1.
.ie n .IP "$object\->log_user(0 | 1 | undef) \fIor\fR" 4
.el .IP "\f(CW$object\fR\->log_user(0 | 1 | undef) \fIor\fR" 4
.IX Item "$object->log_user(0 | 1 | undef) or"
.PD 0
.ie n .IP "$object\->log_stdout(0 | 1 | undef)" 4
.el .IP "\f(CW$object\fR\->log_stdout(0 | 1 | undef)" 4
.IX Item "$object->log_stdout(0 | 1 | undef)"
.PD
Set/unset logging of object's handle to \s-1STDOUT.\s0 This corresponds to Tcl's
log_user variable. Returns current setting if called without parameters.
Default setting is off for initialized handles.  When a process object is
created (not a filehandle initialized with exp_init) the log_stdout setting
will match the value of \f(CW$Expect::Log_Stdout\fR variable, normally 1.
If/when you initialize \s-1STDIN\s0 it is usually associated with a tty which
will by default echo to \s-1STDOUT\s0 anyway, so be careful or you will have
multiple echoes.
.ie n .IP "$object\->log_file(""filename"" | $filehandle | \e&coderef | undef)" 4
.el .IP "\f(CW$object\fR\->log_file(``filename'' | \f(CW$filehandle\fR | \e&coderef | undef)" 4
.IX Item "$object->log_file(filename | $filehandle | &coderef | undef)"
Log session to a file.  All characters send to or received from the
spawned process are written to the file.  Normally appends to the
logfile, but you can pass an additional mode of \*(L"w\*(R" to truncate the
file upon \fIopen()\fR:
.Sp
.Vb 1
\&  $object\->log_file("filename", "w");
.Ve
.Sp
Returns the logfilehandle.
.Sp
If called with an undef value, stops logging and closes logfile:
.Sp
.Vb 1
\&  $object\->log_file(undef);
.Ve
.Sp
If called without argument, returns the logfilehandle:
.Sp
.Vb 1
\&  $fh = $object\->log_file();
.Ve
.Sp
Can be set to a code ref, which will be called instead of printing
to the logfile:
.Sp
.Vb 1
\&  $object\->log_file(\e&myloggerfunc);
.Ve
.ie n .IP "$object\->print_log_file(@strings)" 4
.el .IP "\f(CW$object\fR\->print_log_file(@strings)" 4
.IX Item "$object->print_log_file(@strings)"
Prints to logfile (if opened) or calls the logfile hook function.
This allows the user to add arbitraty text to the logfile.  Note that
this could also be done as \f(CW$object\fR\->log_file\->\fIprint()\fR but would only
work for log files, not code hooks.
.ie n .IP "$object\->set_seq($sequence, \e&function, \e@function_parameters)" 4
.el .IP "\f(CW$object\fR\->set_seq($sequence, \e&function, \e@function_parameters)" 4
.IX Item "$object->set_seq($sequence, &function, @function_parameters)"
During Expect\->\fIinterconnect()\fR if \f(CW$sequence\fR is read from \f(CW$object\fR &function
will be executed with parameters \f(CW@function_parameters\fR. It is \fB_highly
recommended_\fR that the escape sequence be a single character since the 
likelihood is great that the sequence will be broken into to separate reads
from the \f(CW$object\fR's handle, making it impossible to strip \f(CW$sequence\fR from
getting printed to \f(CW$object\fR's listen group. \e&function should be something
like 'main::control_w_function' and \f(CW@function_parameters\fR should be an
array defined by the caller, passed by reference to \fIset_seq()\fR.
Your function should return a non-zero value if execution of \fIinterconnect()\fR
is to resume after the function returns, zero or undefined if \fIinterconnect()\fR
should return after your function returns.
The special sequence '\s-1EOF\s0' matches the end of file being reached by \f(CW$object\fR.
See \fIinterconnect()\fR for details.
.ie n .IP "$object\->set_group(@listener_objects)" 4
.el .IP "\f(CW$object\fR\->set_group(@listener_objects)" 4
.IX Item "$object->set_group(@listener_objects)"
\&\f(CW@listener_objects\fR is the list of objects that should have their handles 
printed to by \f(CW$object\fR when Expect::interconnect, \f(CW$object\fR\->\fIexpect()\fR or
\&\f(CW$object\fR\->\fIsend_slow()\fR are called. Calling w/out parameters will return
the current list of the listener objects.
.ie n .IP "$object\->manual_stty(0 | 1 | undef)" 4
.el .IP "\f(CW$object\fR\->manual_stty(0 | 1 | undef)" 4
.IX Item "$object->manual_stty(0 | 1 | undef)"
Sets/unsets whether or not Expect should make reasonable guesses as to 
when and how to set tty parameters for \f(CW$object\fR. Will match
\&\f(CW$Expect::Manual_Stty\fR value (normally 0) when \f(CW$object\fR is created. If called
without parameters \fImanual_stty()\fR will return the current manual_stty setting.
.ie n .IP "$object\->match_max($maximum_buffer_length | undef) \fIor\fR" 4
.el .IP "\f(CW$object\fR\->match_max($maximum_buffer_length | undef) \fIor\fR" 4
.IX Item "$object->match_max($maximum_buffer_length | undef) or"
.PD 0
.ie n .IP "$object\->max_accum($maximum_buffer_length | undef)" 4
.el .IP "\f(CW$object\fR\->max_accum($maximum_buffer_length | undef)" 4
.IX Item "$object->max_accum($maximum_buffer_length | undef)"
.PD
Set the maximum accumulator size for object. This is useful if you think
that the accumulator will grow out of hand during \fIexpect()\fR calls. Since
the buffer will be matched by every match_pattern it may get slow if the
buffer gets too large. Returns current value if called without parameters.
Not defined by default.
.ie n .IP "$object\->notransfer(0 | 1)" 4
.el .IP "\f(CW$object\fR\->notransfer(0 | 1)" 4
.IX Item "$object->notransfer(0 | 1)"
If set, matched strings will not be deleted from the accumulator.
Returns current value if called without parameters.  False by default.
.ie n .IP "$object\->\fIexp_pid()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_pid()\fR \fIor\fR" 4
.IX Item "$object->exp_pid() or"
.PD 0
.ie n .IP "$object\->\fIpid()\fR" 4
.el .IP "\f(CW$object\fR\->\fIpid()\fR" 4
.IX Item "$object->pid()"
.PD
Return pid of \f(CW$object\fR, if one exists. Initialized filehandles will not have
pids (of course).
.ie n .IP "$object\->send_slow($delay, @strings);" 4
.el .IP "\f(CW$object\fR\->send_slow($delay, \f(CW@strings\fR);" 4
.IX Item "$object->send_slow($delay, @strings);"
print each character from each string of \f(CW@strings\fR one at a time with \f(CW$delay\fR
seconds before each character. This is handy for devices such as modems
that can be annoying if you send them data too fast. After each character
\&\f(CW$object\fR will be checked to determine whether or not it has any new data ready
and if so update the accumulator for future \fIexpect()\fR calls and print the 
output to \s-1STDOUT\s0 and \f(CW@listen_group\fR if log_stdout and log_group are
appropriately set.
.SS "Configurable Package Variables:"
.IX Subsection "Configurable Package Variables:"
.ie n .IP "$Expect::Debug" 4
.el .IP "\f(CW$Expect::Debug\fR" 4
.IX Item "$Expect::Debug"
Defaults to 0. Newly created objects have a \f(CW$object\fR\->\fIdebug()\fR value
of \f(CW$Expect::Debug\fR. See \f(CW$object\fR\->\fIdebug()\fR;
.ie n .IP "$Expect::Do_Soft_Close" 4
.el .IP "\f(CW$Expect::Do_Soft_Close\fR" 4
.IX Item "$Expect::Do_Soft_Close"
Defaults to 0. When destroying objects, soft_close may take up to half
a minute to shut everything down.  From now on, only hard_close will
be called, which is less polite but still gives the process a chance
to terminate properly.  Set this to '1' for old behaviour.
.ie n .IP "$Expect::Exp_Internal" 4
.el .IP "\f(CW$Expect::Exp_Internal\fR" 4
.IX Item "$Expect::Exp_Internal"
Defaults to 0. Newly created objects have a \f(CW$object\fR\->\fIexp_internal()\fR
value of \f(CW$Expect::Exp_Internal\fR. See \f(CW$object\fR\->\fIexp_internal()\fR.
.ie n .IP "$Expect::IgnoreEintr" 4
.el .IP "\f(CW$Expect::IgnoreEintr\fR" 4
.IX Item "$Expect::IgnoreEintr"
Defaults to 0. If set to 1, when waiting for new data, Expect will
ignore \s-1EINTR\s0 errors and restart the \fIselect()\fR call instead.
.ie n .IP "$Expect::Log_Group" 4
.el .IP "\f(CW$Expect::Log_Group\fR" 4
.IX Item "$Expect::Log_Group"
Defaults to 1. Newly created objects have a \f(CW$object\fR\->\fIlog_group()\fR
value of \f(CW$Expect::Log_Group\fR. See \f(CW$object\fR\->\fIlog_group()\fR.
.ie n .IP "$Expect::Log_Stdout" 4
.el .IP "\f(CW$Expect::Log_Stdout\fR" 4
.IX Item "$Expect::Log_Stdout"
Defaults to 1 for spawned commands, 0 for file handles
attached with \fIexp_init()\fR. Newly created objects have a
\&\f(CW$object\fR\->\fIlog_stdout()\fR value of \f(CW$Expect::Log_Stdout\fR. See
\&\f(CW$object\fR\->\fIlog_stdout()\fR.
.ie n .IP "$Expect::Manual_Stty" 4
.el .IP "\f(CW$Expect::Manual_Stty\fR" 4
.IX Item "$Expect::Manual_Stty"
Defaults to 0. Newly created objects have a \f(CW$object\fR\->\fImanual_stty()\fR
value of \f(CW$Expect::Manual_Stty\fR. See \f(CW$object\fR\->\fImanual_stty()\fR.
.ie n .IP "$Expect::Multiline_Matching" 4
.el .IP "\f(CW$Expect::Multiline_Matching\fR" 4
.IX Item "$Expect::Multiline_Matching"
.Vb 6
\&        Defaults to 1. Affects whether or not expect() uses the /m flag for
\&doing regular expression matching. If set to 1 /m is used.
\&        This makes a difference when you are trying to match ^ and $. If
\&you have this on you can match lines in the middle of a page of output
\&using ^ and $ instead of it matching the beginning and end of the entire
\&expression. I think this is handy.
.Ve
.SH "CONTRIBUTIONS"
.IX Header "CONTRIBUTIONS"
Lee Eakin <leakin@japh.itg.ti.com> has ported the kibitz script
from Tcl/Expect to Perl/Expect.
.PP
Jeff Carr <jcarr@linuxmachines.com> provided a simple example of how
handle terminal window resize events (transmitted via the \s-1WINCH\s0
signal) in a ssh session.
.PP
You can find both scripts in the examples/ subdir.  Thanks to both!
.PP
Historical notes:
.PP
There are still a few lines of code dating back to the inspirational
Comm.pl and Chat.pl modules without which this would not have been possible.
Kudos to Eric Arnold <Eric.Arnold@Sun.com> and Randal 'Nuke your \s-1NT\s0 box with
one line of perl code' Schwartz<merlyn@stonehenge.com> for making these
available to the perl public.
.PP
As of .98 I think all the old code is toast. No way could this have been done
without it though. Special thanks to Graham Barr for helping make sense of
the IO::Handle stuff as well as providing the highly recommended IO::Tty 
module.
.SH "REFERENCES"
.IX Header "REFERENCES"
Mark Rogaski <rogaski@att.com> wrote:
.PP
\&\*(L"I figured that you'd like to know that Expect.pm has been very 
useful to \s-1AT&T\s0 Labs over the past couple of years (since I first talked to 
Austin about design decisions). We use Expect.pm for managing 
the switches in our network via the telnet interface, and such automation 
has significantly increased our reliability. So, you can honestly say that 
one of the largest digital networks in existence (\s-1AT&T\s0 Frame Relay) uses 
Expect.pm quite extensively.\*(R"
.SH "FAQ \- Frequently Asked Questions"
.IX Header "FAQ - Frequently Asked Questions"
This is a growing collection of things that might help.
Please send you questions that are not answered here to
RGiersig@cpan.org
.SS "What systems does Expect run on?"
.IX Subsection "What systems does Expect run on?"
Expect itself doesn't have real system dependencies, but the underlying
IO::Tty needs pseudoterminals. IO::Stty uses \s-1POSIX\s0.pm and Fcntl.pm.
.PP
I have used it on Solaris, Linux and \s-1AIX,\s0 others report *BSD and \s-1OSF\s0
as working.  Generally, any modern \s-1POSIX\s0 Unix should do, but there
are exceptions to every rule.  Feedback is appreciated.
.PP
See IO::Tty for a list of verified systems.
.SS "Can I use this module with ActivePerl on Windows?"
.IX Subsection "Can I use this module with ActivePerl on Windows?"
Up to now, the answer was 'No', but this has changed.
.PP
You still cannot use ActivePerl, but if you use the Cygwin environment
(http://sources.redhat.com), which brings its own perl, and have
the latest IO::Tty (v0.05 or later) installed, it should work (feedback
appreciated).
.SS "The examples in the tutorial don't work!"
.IX Subsection "The examples in the tutorial don't work!"
The tutorial is hopelessly out of date and needs a serious overhaul.
I appologize for this, I have concentrated my efforts mainly on the
functionality.  Volunteers welcomed.
.SS "How can I find out what Expect is doing?"
.IX Subsection "How can I find out what Expect is doing?"
If you set
.PP
.Vb 1
\&  $Expect::Exp_Internal = 1;
.Ve
.PP
Expect will tell you very verbosely what it is receiving and sending,
what matching it is trying and what it found.  You can do this on a
per-command base with
.PP
.Vb 1
\&  $exp\->exp_internal(1);
.Ve
.PP
You can also set
.PP
.Vb 1
\&  $Expect::Debug = 1;  # or 2, 3 for more verbose output
.Ve
.PP
or
.PP
.Vb 1
\&  $exp\->debug(1);
.Ve
.PP
which gives you even more output.
.SS "I am seeing the output of the command I spawned.  Can I turn that off?"
.IX Subsection "I am seeing the output of the command I spawned. Can I turn that off?"
Yes, just set
.PP
.Vb 1
\&  $Expect::Log_Stdout = 0;
.Ve
.PP
to globally disable it or
.PP
.Vb 1
\&   $exp\->log_stdout(0);
.Ve
.PP
for just that command.  'log_user' is provided as an alias so
Tcl/Expect user get a \s-1DWIM\s0 experience... :\-)
.SS "No, I mean that when I send some text to the spawned process, it gets echoed back and I have to deal with it in the next expect."
.IX Subsection "No, I mean that when I send some text to the spawned process, it gets echoed back and I have to deal with it in the next expect."
This is caused by the pty, which has probably 'echo' enabled.  A
solution would be to set the pty to raw mode, which in general is
cleaner for communication between two programs (no more unexpected
character translations).  Unfortunately this would break a lot of old
code that sends \*(L"\er\*(R" to the program instead of \*(L"\en\*(R" (translating this
is also handled by the pty), so I won't add this to Expect just like that.
But feel free to experiment with \f(CW\*(C`$exp\->raw_pty(1)\*(C'\fR.
.SS "How do I send control characters to a process?"
.IX Subsection "How do I send control characters to a process?"
A: You can send any characters to a process with the print command. To
represent a control character in Perl, use \ec followed by the letter. For
example, control-G can be represented with \*(L"\ecG\*(R" . Note that this will not
work if you single-quote your string. So, to send control-C to a process in
\&\f(CW$exp\fR, do:
.PP
.Vb 1
\&  print $exp "\ecC";
.Ve
.PP
Or, if you prefer:
.PP
.Vb 1
\&  $exp\->send("\ecC");
.Ve
.PP
The ability to include control characters in a string like this is provided
by Perl, not by Expect.pm . Trying to learn Expect.pm without a thorough
grounding in Perl can be very daunting. We suggest you look into some of
the excellent Perl learning material, such as the books _Programming Perl_
and _Learning Perl_ by O'Reilly, as well as the extensive online Perl
documentation available through the perldoc command.
.SS "My script fails from time to time without any obvious reason.  It seems that I am sometimes loosing output from the spawned program."
.IX Subsection "My script fails from time to time without any obvious reason. It seems that I am sometimes loosing output from the spawned program."
You could be exiting too fast without giving the spawned program
enough time to finish.  Try adding \f(CW$exp\fR\->\fIsoft_close()\fR to terminate the
program gracefully or do an \fIexpect()\fR for 'eof'.
.PP
Alternatively, try adding a 'sleep 1' after you \fIspawn()\fR the program.
It could be that pty creation on your system is just slow (but this is
rather improbable if you are using the latest IO-Tty).
.SS "I want to automate password entry for su/ssh/scp/rsh/..."
.IX Subsection "I want to automate password entry for su/ssh/scp/rsh/..."
You shouldn't use Expect for this.  Putting passwords, especially 
root passwords, into scripts in clear text can mean severe security 
problems.  I strongly recommend using other means.  For 'su', consider 
switching to 'sudo', which gives you root access on a per-command and 
per-user basis without the need to enter passwords.  'ssh'/'scp' can be 
set up with \s-1RSA\s0 authentication without passwords.  'rsh' can use 
the .rhost mechanism, but I'd strongly suggest to switch to 'ssh'; to 
mention 'rsh' and 'security' in the same sentence makes an oxymoron.
.PP
It will work for 'telnet', though, and there are valid uses for it,
but you still might want to consider using 'ssh', as keeping cleartext
passwords around is very insecure.
.SS "I want to use Expect to automate [anything with a buzzword]..."
.IX Subsection "I want to use Expect to automate [anything with a buzzword]..."
Are you sure there is no other, easier way?  As a rule of thumb,
Expect is useful for automating things that expect to talk to a human,
where no formal standard applies.  For other tasks that do follow a
well-defined protocol, there are often better-suited modules that
already can handle those protocols.  Don't try to do \s-1HTTP\s0 requests by
spawning telnet to port 80, use \s-1LWP\s0 instead.  To automate \s-1FTP,\s0 take a
look at Net::FTP or \f(CW\*(C`ncftp\*(C'\fR (http://www.ncftp.org).  You don't use
a screwdriver to hammer in your nails either, or do you?
.SS "Is it possible to use threads with Expect?"
.IX Subsection "Is it possible to use threads with Expect?"
Basically yes, with one restriction: you must \fIspawn()\fR your programs in
the main thread and then pass the Expect objects to the handling
threads. The reason is that \fIspawn()\fR uses \fIfork()\fR, and perlthrtut:
.PP
.Vb 1
\&  "Thinking of mixing fork() and threads?  Please lie down and wait until the feeling passes."
.Ve
.SS "I want to log the whole session to a file."
.IX Subsection "I want to log the whole session to a file."
Use
.PP
.Vb 1
\&  $exp\->log_file("filename");
.Ve
.PP
or
.PP
.Vb 1
\&  $exp\->log_file($filehandle);
.Ve
.PP
or even
.PP
.Vb 1
\&  $exp\->log_file(\e&log_procedure);
.Ve
.PP
for maximum flexibility.
.PP
Note that the logfile is appended to by default, but you can
specify an optional mode \*(L"w\*(R" to truncate the logfile:
.PP
.Vb 1
\&  $exp\->log_file("filename", "w");
.Ve
.PP
To stop logging, just call it with a false argument:
.PP
.Vb 1
\&  $exp\->log_file(undef);
.Ve
.SS "How can I turn off multi-line matching for my regexps?"
.IX Subsection "How can I turn off multi-line matching for my regexps?"
To globally unset multi-line matching for all regexps:
.PP
.Vb 1
\&  $Expect::Multiline_Matching = 0;
.Ve
.PP
You can do that on a per-regexp basis by stating \f(CW\*(C`(?\-m)\*(C'\fR inside the regexp
(you need perl5.00503 or later for that).
.SS "How can I expect on multiple spawned commands?"
.IX Subsection "How can I expect on multiple spawned commands?"
You can use the \fB\-i\fR parameter to specify a single object or a list
of Expect objects.  All following patterns will be evaluated against
that list.
.PP
You can specify \fB\-i\fR multiple times to create groups of objects
and patterns to match against within the same expect statement.
.PP
This works just like in Tcl/Expect.
.PP
See the source example below.
.SS "I seem to have problems with ptys!"
.IX Subsection "I seem to have problems with ptys!"
Well, pty handling is really a black magic, as it is extremely system
dependend.  I have extensively revised IO-Tty, so these problems
should be gone.
.PP
If your system is listed in the \*(L"verified\*(R" list of IO::Tty, you
probably have some non-standard setup, e.g. you compiled your
Linux-kernel yourself and disabled ptys.  Please ask your friendly
sysadmin for help.
.PP
If your system is not listed, unpack the latest version of IO::Tty,
do a 'perl Makefile.PL; make; make test; uname \f(CW\*(C`\-a\*(C'\fR' and send me the
results and I'll see what I can deduce from that.
.SS "I just want to read the output of a process without \fIexpect()\fPing anything. How can I do this?"
.IX Subsection "I just want to read the output of a process without expect()ing anything. How can I do this?"
[ Are you sure you need Expect for this?  How about \fIqx()\fR or open(\*(L"prog|\*(R")? ]
.PP
By using expect without any patterns to match.
.PP
.Vb 3
\&  $process\->expect(undef); # Forever until EOF
\&  $process\->expect($timeout); # For a few seconds
\&  $process\->expect(0); # Is there anything ready on the handle now?
.Ve
.SS "Ok, so now how do I get what was read on the handle?"
.IX Subsection "Ok, so now how do I get what was read on the handle?"
.Vb 1
\&  $read = $process\->before();
.Ve
.SS "Where's IO::Pty?"
.IX Subsection "Where's IO::Pty?"
Find it on \s-1CPAN\s0 as IO-Tty, which provides both.
.SS "How come when I automate the passwd program to change passwords for me passwd dies before changing the password sometimes/every time?"
.IX Subsection "How come when I automate the passwd program to change passwords for me passwd dies before changing the password sometimes/every time?"
What's happening is you are closing the handle before passwd exits.
When you close the handle to a process, it is sent a signal (\s-1SIGPIPE\s0?)
telling it that \s-1STDOUT\s0 has gone away. The default behavior for
processes is to die in this circumstance. Two ways you can make this
not happen are:
.PP
.Vb 1
\&  $process\->soft_close();
.Ve
.PP
This will wait 15 seconds for a process to come up with an \s-1EOF\s0 by
itself before killing it.
.PP
.Vb 1
\&  $process\->expect(undef);
.Ve
.PP
This will wait forever for the process to match an empty set of
patterns. It will return when the process hits an \s-1EOF.\s0
.PP
As a rule, you should always \fIexpect()\fR the result of your transaction
before you continue with processing.
.SS "How come when I try to make a logfile with \fIlog_file()\fP or \fIset_group()\fP it doesn't print anything after the last time I run \fIexpect()\fP?"
.IX Subsection "How come when I try to make a logfile with log_file() or set_group() it doesn't print anything after the last time I run expect()?"
Output is only printed to the logfile/group when Expect reads from the
process, during \fIexpect()\fR, \fIsend_slow()\fR and \fIinterconnect()\fR.
One way you can force this is to make use of
.PP
.Vb 1
\&  $process\->expect(undef);
.Ve
.PP
and
.PP
.Vb 1
\&  $process\->expect(0);
.Ve
.PP
which will make \fIexpect()\fR run with an empty pattern set forever or just
for an instant to capture the output of \f(CW$process\fR. The output is
available in the accumulator, so you can grab it using
\&\f(CW$process\fR\->\fIbefore()\fR.
.SS "I seem to have problems with terminal settings, double echoing, etc."
.IX Subsection "I seem to have problems with terminal settings, double echoing, etc."
Tty settings are a major pain to keep track of. If you find unexpected
behavior such as double-echoing or a frozen session, doublecheck the
documentation for default settings. When in doubt, handle them
yourself using \f(CW$exp\fR\->\fIstty()\fR and \fImanual_stty()\fR functions.  As of .98
you shouldn't have to worry about stty settings getting fouled unless
you use interconnect or intentionally change them (like doing \-echo to
get a password).
.PP
If you foul up your terminal's tty settings, kill any hung processes
and enter 'stty sane' at a shell prompt. This should make your
terminal manageable again.
.PP
Note that IO::Tty returns ptys with your systems default setting
regarding echoing, \s-1CRLF\s0 translation etc. and Expect does not change
them.  I have considered setting the ptys to 'raw' without any
translation whatsoever, but this would break a lot of existing things,
as '\er' translation would not work anymore.  On the other hand, a raw
pty works much like a pipe and is more \s-1WYGIWYE \s0(what you get is what
you expect), so I suggest you set it to 'raw' by yourself:
.PP
.Vb 3
\&  $exp = new Expect;
\&  $exp\->raw_pty(1);
\&  $exp\->spawn(...);
.Ve
.PP
To disable echo:
.PP
.Vb 1
\&  $exp\->slave\->stty(qw(\-echo));
.Ve
.SS "I'm spawning a telnet/ssh session and then let the user interact with it.  But screen-oriented applications on the other side don't work properly."
.IX Subsection "I'm spawning a telnet/ssh session and then let the user interact with it. But screen-oriented applications on the other side don't work properly."
You have to set the terminal screen size for that.  Luckily, IO::Pty
already has a method for that, so modify your code to look like this:
.PP
.Vb 3
\&  my $exp = new Expect;
\&  $exp\->slave\->clone_winsize_from(\e*STDIN);
\&  $exp\->spawn("telnet somehost);
.Ve
.PP
Also, some applications need the \s-1TERM\s0 shell variable set so they know
how to move the cursor across the screen.  When logging in, the remote
shell sends a query (Ctrl-Z I think) and expects the terminal to
answer with a string, e.g. 'xterm'.  If you really want to go that way
(be aware, madness lies at its end), you can handle that and send back
the value in \f(CW$ENV\fR{\s-1TERM\s0}.  This is only a hand-waving explanation,
please figure out the details by yourself.
.SS "I set the terminal size as explained above, but if I resize the window, the application does not notice this."
.IX Subsection "I set the terminal size as explained above, but if I resize the window, the application does not notice this."
You have to catch the signal \s-1WINCH \s0(\*(L"window size changed\*(R"), change the
terminal size and propagate the signal to the spawned application:
.PP
.Vb 4
\&  my $exp = new Expect;
\&  $exp\->slave\->clone_winsize_from(\e*STDIN);
\&  $exp\->spawn("ssh somehost);
\&  $SIG{WINCH} = \e&winch;
\&  
\&  sub winch {
\&    $exp\->slave\->clone_winsize_from(\e*STDIN);
\&    kill WINCH => $exp\->pid if $exp\->pid;
\&    $SIG{WINCH} = \e&winch;
\&  }
\&
\&  $exp\->interact();
.Ve
.PP
There is an example file ssh.pl in the examples/ subdir that shows how
this works with ssh. Please note that I do strongly object against
using Expect to automate ssh login, as there are better way to do that
(see ssh-keygen).
.SS "I noticed that the test uses a string that resembles, but not exactly matches, a well-known sentence that contains every character.  What does that mean?"
.IX Subsection "I noticed that the test uses a string that resembles, but not exactly matches, a well-known sentence that contains every character. What does that mean?"
That means you are anal-retentive. :\-)  [Gotcha there!]
.ie n .SS "I get a ""Could not assign a pty"" error when running as a non-root user on an \s-1IRIX\s0 box?"
.el .SS "I get a ``Could not assign a pty'' error when running as a non-root user on an \s-1IRIX\s0 box?"
.IX Subsection "I get a Could not assign a pty error when running as a non-root user on an IRIX box?"
The \s-1OS\s0 may not be configured to grant additional pty's (pseudo terminals)
to non-root users.  /usr/sbin/mkpts should be 4755, not 700 for this
to work.  I don't know about security implications if you do this.
.SS "How come I don't notice when the spawned process closes its stdin/out/err??"
.IX Subsection "How come I don't notice when the spawned process closes its stdin/out/err??"
You are probably on one of the systems where the master doesn't get an
\&\s-1EOF\s0 when the slave closes stdin/out/err.
.PP
One possible solution is when you spawn a process, follow it with a
unique string that would indicate the process is finished.
.PP
.Vb 1
\&  $process = Expect\->spawn(\*(Aqtelnet somehost; echo _\|_\|_\|_END_\|_\|_\|_\*(Aq);
.Ve
.PP
And then \f(CW$process\fR\->expect($timeout,'_\|_\|_\|_END_\|_\|_\|_','other','patterns');
.SH "Source Examples"
.IX Header "Source Examples"
.SS "How to automate login"
.IX Subsection "How to automate login"
.Vb 3
\&  my $telnet = new Net::Telnet ("remotehost") # see Net::Telnet
\&    or die "Cannot telnet to remotehost: $!\en";;
\&  my $exp = Expect\->exp_init($telnet);
\&
\&  # deprecated use of spawned telnet command
\&  # my $exp = Expect\->spawn("telnet localhost")
\&  #   or die "Cannot spawn telnet: $!\en";;
\&
\&  my $spawn_ok;
\&  $exp\->expect($timeout,
\&               [
\&                qr\*(Aqlogin: $\*(Aq,
\&                sub {
\&                  $spawn_ok = 1;
\&                  my $fh = shift;
\&                  $fh\->send("$username\en");
\&                  exp_continue;
\&                }
\&               ],
\&               [
\&                \*(AqPassword: $\*(Aq,
\&                sub {
\&                  my $fh = shift;
\&                  print $fh "$password\en";
\&                  exp_continue;
\&                }
\&               ],
\&               [
\&                eof =>
\&                sub {
\&                  if ($spawn_ok) {
\&                    die "ERROR: premature EOF in login.\en";
\&                  } else {
\&                    die "ERROR: could not spawn telnet.\en";
\&                  }
\&                }
\&               ],
\&               [
\&                timeout =>
\&                sub {
\&                  die "No login.\en";
\&                }
\&               ],
\&               \*(Aq\-re\*(Aq, qr\*(Aq[#>:] $\*(Aq, #\*(Aq wait for shell prompt, then exit expect
\&              );
.Ve
.SS "How to expect on multiple spawned commands"
.IX Subsection "How to expect on multiple spawned commands"
.Vb 3
\&  foreach my $cmd (@list_of_commands) {
\&    push @commands, Expect\->spawn($cmd);
\&  }
\&
\&  expect($timeout,
\&         \*(Aq\-i\*(Aq, \e@commands,
\&         [
\&          qr"pattern",          # find this pattern in output of all commands
\&          sub {
\&            my $obj = shift;    # object that matched
\&            print $obj "something\en";
\&            exp_continue;       # we don\*(Aqt want to terminate the expect call
\&          }
\&         ],
\&         \*(Aq\-i\*(Aq, $some_other_command,
\&         [
\&          "some other pattern",
\&          sub {
\&            my ($obj, $parmref) = @_;
\&            # ...
\&
\&            # now we exit the expect command
\&          },
\&          \e$parm
\&         ],
\&        );
.Ve
.SS "How to propagate terminal sizes"
.IX Subsection "How to propagate terminal sizes"
.Vb 4
\&  my $exp = new Expect;
\&  $exp\->slave\->clone_winsize_from(\e*STDIN);
\&  $exp\->spawn("ssh somehost);
\&  $SIG{WINCH} = \e&winch;
\&  
\&  sub winch {
\&    $exp\->slave\->clone_winsize_from(\e*STDIN);
\&    kill WINCH => $exp\->pid if $exp\->pid;
\&    $SIG{WINCH} = \e&winch;
\&  }
\&
\&  $exp\->interact();
.Ve
.SH "HOMEPAGE"
.IX Header "HOMEPAGE"
http://sourceforge.net/projects/expectperl/
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
There are two mailing lists available, expectperl-announce and
expectperl-discuss, at
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-announce
.Ve
.PP
and
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-discuss
.Ve
.SH "BUG TRACKING"
.IX Header "BUG TRACKING"
You can use the \s-1CPAN\s0 Request Tracker http://rt.cpan.org/ and submit
new bugs under
.PP
.Vb 1
\&  http://rt.cpan.org/Ticket/Create.html?Queue=Expect
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
(c) 1997 Austin Schutz <\fIASchutz@users.sourceforge.net\fR> (retired)
.PP
\&\fIexpect()\fR interface & functionality enhancements (c) 1999\-2006 Roland Giersig.
.PP
This module is now maintained by Roland Giersig <\fIRGiersig@cpan.org\fR>
.SH "LICENSE"
.IX Header "LICENSE"
This module can be used under the same terms as Perl.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\s-1THIS SOFTWARE IS PROVIDED\s0 ``\s-1AS IS\s0'' \s-1AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \s0(\s-1INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS
OF USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT \s0(\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.\s0
.PP
In other words: Use at your own risk.  Provided as is.  Your mileage
may vary.  Read the source, Luke!
.PP
And finally, just to be sure:
.PP
Any Use of This Product, in Any Manner Whatsoever, Will Increase the
Amount of Disorder in the Universe. Although No Liability Is Implied
Herein, the Consumer Is Warned That This Process Will Ultimately Lead
to the Heat Death of the Universe.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 653:" 4
.IX Item "Around line 653:"
\&'=item' outside of any '=over'
.IP "Around line 702:" 4
.IX Item "Around line 702:"
You forgot a '=back' before '=head1'
                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Expect5.16.3pm                               0100644 0001750 0001750 00000171237 12566241776 023066  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Expect 3"
.TH Expect 3 "2007-07-19" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Expect.pm \- Expect for Perl
.SH "VERSION"
.IX Header "VERSION"
1.21
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Expect;
\&
\&  # create an Expect object by spawning another process
\&  my $exp = Expect\->spawn($command, @params)
\&    or die "Cannot spawn $command: $!\en";
\&
\&  # or by using an already opened filehandle (e.g. from Net::Telnet)
\&  my $exp = Expect\->exp_init(\e*FILEHANDLE);
\&
\&  # if you prefer the OO mindset:
\&  my $exp = new Expect;
\&  $exp\->raw_pty(1);  
\&  $exp\->spawn($command, @parameters)
\&    or die "Cannot spawn $command: $!\en";
\&
\&  # send some string there:
\&  $exp\->send("string\en");
\&
\&  # or, for the filehandle mindset:
\&  print $exp "string\en";
\&
\&  # then do some pattern matching with either the simple interface
\&  $patidx = $exp\->expect($timeout, @match_patterns);
\&
\&  # or multi\-match on several spawned commands with callbacks,
\&  # just like the Tcl version
\&  $exp\->expect($timeout,
\&               [ qr/regex1/ => sub { my $exp = shift;
\&                                     $exp\->send("response\en");
\&                                     exp_continue; } ],
\&               [ "regexp2" , \e&callback, @cbparms ],
\&              );
\&
\&  # if no longer needed, do a soft_close to nicely shut down the command
\&  $exp\->soft_close();
\&
\&  # or be less patient with
\&  $exp\->hard_close();
.Ve
.PP
Expect.pm is built to either spawn a process or take an existing filehandle
and interact with it such that normally interactive tasks can be done
without operator assistance. This concept makes more sense if you are 
already familiar with the versatile Tcl version of Expect.
The public functions that make up Expect.pm are:
.PP
.Vb 10
\&  Expect\->new()
\&  Expect::interconnect(@objects_to_be_read_from)
\&  Expect::test_handles($timeout, @objects_to_test)
\&  Expect::version($version_requested | undef);
\&  $object\->spawn(@command)
\&  $object\->clear_accum()
\&  $object\->set_accum($value)
\&  $object\->debug($debug_level)
\&  $object\->exp_internal(0 | 1)
\&  $object\->notransfer(0 | 1)
\&  $object\->raw_pty(0 | 1)
\&  $object\->stty(@stty_modes) # See the IO::Stty docs
\&  $object\->slave()
\&  $object\->before();
\&  $object\->match();
\&  $object\->after();
\&  $object\->matchlist();
\&  $object\->match_number();
\&  $object\->error();
\&  $object\->command();
\&  $object\->exitstatus();
\&  $object\->pty_handle();
\&  $object\->do_soft_close();
\&  $object\->restart_timeout_upon_receive(0 | 1);
\&  $object\->interact($other_object, $escape_sequence)
\&  $object\->log_group(0 | 1 | undef)
\&  $object\->log_user(0 | 1 | undef)
\&  $object\->log_file("filename" | $filehandle | \e&coderef | undef)
\&  $object\->manual_stty(0 | 1 | undef)
\&  $object\->match_max($max_buffersize or undef)
\&  $object\->pid();
\&  $object\->send_slow($delay, @strings_to_send)
\&  $object\->set_group(@listen_group_objects | undef)
\&  $object\->set_seq($sequence,\e&function,\e@parameters);
.Ve
.PP
There are several configurable package variables that affect the behavior of Expect. They are:
.PP
.Vb 8
\&  $Expect::Debug;
\&  $Expect::Exp_Internal;
\&  $Expect::IgnoreEintr;
\&  $Expect::Log_Group;
\&  $Expect::Log_Stdout;
\&  $Expect::Manual_Stty;
\&  $Expect::Multiline_Matching;
\&  $Expect::Do_Soft_Close;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Expect module is a successor of Comm.pl and a descendent of Chat.pl. It
more closely ressembles the Tcl Expect language than its predecessors. It
does not contain any of the networking code found in Comm.pl. I suspect this
would be obsolete anyway given the advent of IO::Socket and external tools
such as netcat.
.PP
Expect.pm is an attempt to have more of a \fIswitch()\fR & case feeling to make 
decision processing more fluid.  Three separate types of debugging have 
been implemented to make code production easier.
.PP
It is possible to interconnect multiple file handles (and processes) much
like Tcl's Expect. An attempt was made to enable all the features of Tcl's
Expect without forcing Tcl on the victim programmer :\-) .
.PP
Please, before you consider using Expect, read the FAQs about
\&\*(L"I want to automate password entry for su/ssh/scp/rsh/...\*(R" and
\&\*(L"I want to use Expect to automate [anything with a buzzword]...\*(R"
.SH "USAGE"
.IX Header "USAGE"
.IP "new Expect ()" 4
.IX Item "new Expect ()"
Creates a new Expect object, i.e. a pty.  You can change parameters on
it before actually spawning a command.  This is important if you want
to modify the terminal settings for the slave.  See \fIslave()\fR below.
The object returned is actually a reblessed IO::Pty filehandle, so see
there for additional methods.
.IP "Expect\->exp_init(\e*FILEHANDLE) \fIor\fR" 4
.IX Item "Expect->exp_init(*FILEHANDLE) or"
.PD 0
.IP "Expect\->init(\e*FILEHANDLE)" 4
.IX Item "Expect->init(*FILEHANDLE)"
.PD
Initializes \f(CW$new_handle_object\fR for use with other Expect functions. It must
be passed a \fB_reference_\fR to \s-1FILEHANDLE\s0 if you want it to work properly. 
IO::File objects are preferable. Returns a reference to the newly created
object.
.Sp
You can use only real filehandles, certain tied filehandles
(e.g. Net::SSH2) that lack a \fIfileno()\fR will not work. Net::Telnet
objects can be used but have been reported to work only for certain
hosts. \s-1YMMV\s0.
.ie n .IP "Expect\->spawn($command, @parameters) \fIor\fR" 4
.el .IP "Expect\->spawn($command, \f(CW@parameters\fR) \fIor\fR" 4
.IX Item "Expect->spawn($command, @parameters) or"
.PD 0
.ie n .IP "$object\->spawn($command, @parameters) \fIor\fR" 4
.el .IP "\f(CW$object\fR\->spawn($command, \f(CW@parameters\fR) \fIor\fR" 4
.IX Item "$object->spawn($command, @parameters) or"
.ie n .IP "new Expect ($command, @parameters)" 4
.el .IP "new Expect ($command, \f(CW@parameters\fR)" 4
.IX Item "new Expect ($command, @parameters)"
.PD
Forks and execs \f(CW$command\fR. Returns an Expect object upon success or
\&\f(CW\*(C`undef\*(C'\fR if the fork was unsuccessful or the command could not be
found.  \fIspawn()\fR passes its parameters unchanged to Perls \fIexec()\fR, so
look there for detailed semantics.
.Sp
Note that if spawn cannot \fIexec()\fR the given command, the Expect object
is still valid and the next \fIexpect()\fR will see \*(L"Cannot exec\*(R", so you
can use that for error handling.
.Sp
Also note that you cannot reuse an object with an already spawned
command, even if that command has exited.  Sorry, but you have to
allocate a new object...
.ie n .IP "$object\->debug(0 | 1 | 2 | 3 | undef)" 4
.el .IP "\f(CW$object\fR\->debug(0 | 1 | 2 | 3 | undef)" 4
.IX Item "$object->debug(0 | 1 | 2 | 3 | undef)"
Sets debug level for \f(CW$object\fR. 1 refers to general debugging
information, 2 refers to verbose debugging and 0 refers to no
debugging. If you call \fIdebug()\fR with no parameters it will return the
current debugging level.  When the object is created the debugging
level will match that \f(CW$Expect::Debug\fR, normally 0.
.Sp
The '3' setting is new with 1.05, and adds the additional
functionality of having the _full_ accumulated buffer printed every
time data is read from an Expect object. This was implemented by
request. I recommend against using this unless you think you need it
as it can create quite a quantity of output under some circumstances..
.ie n .IP "$object\->exp_internal(1 | 0)" 4
.el .IP "\f(CW$object\fR\->exp_internal(1 | 0)" 4
.IX Item "$object->exp_internal(1 | 0)"
Sets/unsets 'exp_internal' debugging. This is similar in nature to its Tcl
counterpart. It is extremely valuable when debugging \fIexpect()\fR sequences.
When the object is created the exp_internal setting will match the value of
\&\f(CW$Expect::Exp_Internal\fR, normally 0. Returns the current setting if called
without parameters. It is highly recommended that you make use of the
debugging features lest you have angry code.
.ie n .IP "$object\->raw_pty(1 | 0)" 4
.el .IP "\f(CW$object\fR\->raw_pty(1 | 0)" 4
.IX Item "$object->raw_pty(1 | 0)"
Set pty to raw mode before spawning.  This disables echoing, \s-1CR\-\s0>\s-1LF\s0
translation and an ugly hack for broken Solaris TTYs (which send
<space><backspace> to slow things down) and thus gives a more
pipe-like behaviour (which is important if you want to transfer binary
content).  Note that this must be set \fIbefore\fR spawning the program.
.ie n .IP "$object\->stty(qw(mode1 mode2...))" 4
.el .IP "\f(CW$object\fR\->stty(qw(mode1 mode2...))" 4
.IX Item "$object->stty(qw(mode1 mode2...))"
Sets the tty mode for \f(CW$object\fR's associated terminal to the given
modes.  Note that on many systems the master side of the pty is not a
tty, so you have to modify the slave pty instead, see next item.  This
needs IO::Stty installed, which is no longer required.
.ie n .IP "$object\->\fIslave()\fR" 4
.el .IP "\f(CW$object\fR\->\fIslave()\fR" 4
.IX Item "$object->slave()"
Returns a filehandle to the slave part of the pty.  Very useful in modifying
the terminal settings:
.Sp
.Vb 1
\&  $object\->slave\->stty(qw(raw \-echo));
.Ve
.Sp
Typical values are 'sane', 'raw', and 'raw \-echo'.  Note that I
recommend setting the terminal to 'raw' or 'raw \-echo', as this avoids
a lot of hassle and gives pipe-like (i.e. transparent) behaviour
(without the buffering issue).
.ie n .IP "$object\->print(@strings) \fIor\fR" 4
.el .IP "\f(CW$object\fR\->print(@strings) \fIor\fR" 4
.IX Item "$object->print(@strings) or"
.PD 0
.ie n .IP "$object\->send(@strings)" 4
.el .IP "\f(CW$object\fR\->send(@strings)" 4
.IX Item "$object->send(@strings)"
.PD
Sends the given strings to the spawned command.  Note that the strings
are not logged in the logfile (see print_log_file) but will probably
be echoed back by the pty, depending on pty settings (default is echo)
and thus end up there anyway.  This must also be taken into account
when \fIexpect()\fRing for an answer: the next string will be the command
just sent.  I suggest setting the pty to raw, which disables echo and
makes the pty transparently act like a bidirectional pipe.
.ie n .IP "$object\->expect($timeout, @match_patterns)" 4
.el .IP "\f(CW$object\fR\->expect($timeout, \f(CW@match_patterns\fR)" 4
.IX Item "$object->expect($timeout, @match_patterns)"
or, more like Tcl/Expect,
.Sp
.Vb 11
\&  expect($timeout, 
\&         \*(Aq\-i\*(Aq, [ $obj1, $obj2, ... ], 
\&               [ $re_pattern, sub { ...; exp_continue; }, @subparms, ],
\&               [ \*(Aqeof\*(Aq, sub { ... } ],
\&               [ \*(Aqtimeout\*(Aq, sub { ... }, \e$subparm1 ],
\&         \*(Aq\-i\*(Aq, [ $objn, ...],
\&               \*(Aq\-ex\*(Aq, $exact_pattern, sub { ... },
\&               $exact_pattern, sub { ...; exp_continue_timeout; },
\&               \*(Aq\-re\*(Aq, $re_pattern, sub { ... },
\&         \*(Aq\-i\*(Aq, \e@object_list, @pattern_list,
\&         ...);
.Ve
.Sp
\&\fISimple interface:\fR
.Sp
Given \f(CW$timeout\fR in seconds Expect will wait for \f(CW$object\fR's handle to produce
one of the match_patterns, which are matched exactly by default. If you 
want a regexp match, prefix the pattern with '\-re'.
.Sp
Due to o/s limitations \f(CW$timeout\fR should be a round number. If \f(CW$timeout\fR 
is 0 Expect will check one time to see if \f(CW$object\fR's handle contains 
any of the match_patterns. If \f(CW$timeout\fR is undef Expect
will wait forever for a pattern to match.
.Sp
If called in a scalar context, \fIexpect()\fR will return the position of
the matched pattern within \f(CW$match_patterns\fR, or undef if no pattern was
matched. This is a position starting from 1, so if you want to know
which of an array of \f(CW@matched_patterns\fR matched you should subtract one
from the return value.
.Sp
If called in an array context \fIexpect()\fR will return
($matched_pattern_position, \f(CW$error\fR, \f(CW$successfully_matching_string\fR,
\&\f(CW$before_match\fR, and \f(CW$after_match\fR).
.Sp
\&\f(CW$matched_pattern_position\fR will contain the value that would have been
returned if \fIexpect()\fR had been called in a scalar context. \f(CW$error\fR is
the error that occurred that caused \fIexpect()\fR to return. \f(CW$error\fR will
contain a number followed by a string equivalent expressing the nature
of the error. Possible values are undef, indicating no error,
\&'1:TIMEOUT' indicating that \f(CW$timeout\fR seconds had elapsed without a
match, '2:EOF' indicating an eof was read from \f(CW$object\fR, '3: spawn
id($fileno) died' indicating that the process exited before matching
and '4:$!' indicating whatever error was set in \f(CW$ERRNO\fR during the last
read on \f(CW$object\fR's handle or during \fIselect()\fR. All handles indicated by
set_group plus \s-1STDOUT\s0 will have all data to come out of \f(CW$object\fR
printed to them during \fIexpect()\fR if log_group and log_stdout are set.
.Sp
Changed from older versions is the regular expression handling. By
default now all strings passed to \fIexpect()\fR are treated as literals. To
match a regular expression pass '\-re' as a parameter in front of the
pattern you want to match as a regexp.
.Sp
Example:
.Sp
.Vb 1
\&  $object\->expect(15, \*(Aqmatch me exactly\*(Aq,\*(Aq\-re\*(Aq,\*(Aqmatch\es+me\es+exactly\*(Aq);
.Ve
.Sp
This change makes it possible to match literals and regular expressions
in the same \fIexpect()\fR call.
.Sp
Also new is multiline matching. ^ will now match the beginning of
lines. Unfortunately, because perl doesn't use $/ in determining where 
lines break using $ to find the end of a line frequently doesn't work. This
is because your terminal is returning \*(L"\er\en\*(R" at the end of every line. One
way to check for a pattern at the end of a line would be to use \er?$ instead
of $.
.Sp
Example: Spawning telnet to a host, you might look for the escape
character.  telnet would return to you \*(L"\er\enEscape character is
\&'^]'.\er\en\*(R". To find this you might use \f(CW$match\fR='^Escape char.*\e.\er?$';
.Sp
.Vb 1
\&  $telnet\->expect(10,\*(Aq\-re\*(Aq,$match);
.Ve
.Sp
\&\fINew more Tcl/Expect\-like interface:\fR
.Sp
It's now possible to expect on more than one connection at a time by
specifying '\f(CW\*(C`\-i\*(C'\fR' and a single Expect object or a ref to an array
containing Expect objects, e.g.
.Sp
.Vb 4
\& expect($timeout,
\&        \*(Aq\-i\*(Aq, $exp1, @patterns_1,
\&        \*(Aq\-i\*(Aq, [ $exp2, $exp3 ], @patterns_2_3,
\&       )
.Ve
.Sp
Furthermore, patterns can now be specified as array refs containing
[$regexp, sub { ...}, \f(CW@optional_subprams\fR] . When the pattern matches,
the subroutine is called with parameters ($matched_expect_obj,
\&\f(CW@optional_subparms\fR). The subroutine can return the symbol
`exp_continue' to continue the expect matching with timeout starting
anew or return the symbol `exp_continue_timeout' for continuing expect
without resetting the timeout count.
.Sp
.Vb 8
\& $exp\->expect($timeout,
\&              [ qr/username: /i, sub { my $self = shift;
\&                                       $self\->send("$username\en");
\&                                       exp_continue; }],
\&              [ qr/password: /i, sub { my $self = shift;
\&                                       $self\->send("$password\en");
\&                                       exp_continue; }],
\&              $shell_prompt);
.Ve
.Sp
`expect' is now exported by default.
.ie n .IP "$object\->\fIexp_before()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_before()\fR \fIor\fR" 4
.IX Item "$object->exp_before() or"
.PD 0
.ie n .IP "$object\->\fIbefore()\fR" 4
.el .IP "\f(CW$object\fR\->\fIbefore()\fR" 4
.IX Item "$object->before()"
.PD
\&\fIbefore()\fR returns the 'before' part of the last \fIexpect()\fR call. If the last
\&\fIexpect()\fR call didn't match anything, \fIexp_before()\fR will return the entire
output of the object accumulated before the \fIexpect()\fR call finished.
.Sp
Note that this is something different than Tcl Expects \fIbefore()\fR!!
.ie n .IP "$object\->\fIexp_after()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_after()\fR \fIor\fR" 4
.IX Item "$object->exp_after() or"
.PD 0
.ie n .IP "$object\->\fIafter()\fR" 4
.el .IP "\f(CW$object\fR\->\fIafter()\fR" 4
.IX Item "$object->after()"
.PD
returns the 'after' part of the last \fIexpect()\fR call. If the last
\&\fIexpect()\fR call didn't match anything, \fIexp_after()\fR will return \fIundef()\fR.
.ie n .IP "$object\->\fIexp_match()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_match()\fR \fIor\fR" 4
.IX Item "$object->exp_match() or"
.PD 0
.ie n .IP "$object\->\fImatch()\fR" 4
.el .IP "\f(CW$object\fR\->\fImatch()\fR" 4
.IX Item "$object->match()"
.PD
returns the string matched by the last \fIexpect()\fR call, undef if
no string was matched.
.ie n .IP "$object\->\fIexp_match_number()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_match_number()\fR \fIor\fR" 4
.IX Item "$object->exp_match_number() or"
.PD 0
.ie n .IP "$object\->\fImatch_number()\fR" 4
.el .IP "\f(CW$object\fR\->\fImatch_number()\fR" 4
.IX Item "$object->match_number()"
.PD
\&\fIexp_match_number()\fR returns the number of the pattern matched by the last
\&\fIexpect()\fR call. Keep in mind that the first pattern in a list of patterns is 1,
not 0. Returns undef if no pattern was matched.
.ie n .IP "$object\->\fIexp_matchlist()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_matchlist()\fR \fIor\fR" 4
.IX Item "$object->exp_matchlist() or"
.PD 0
.ie n .IP "$object\->\fImatchlist()\fR" 4
.el .IP "\f(CW$object\fR\->\fImatchlist()\fR" 4
.IX Item "$object->matchlist()"
.PD
\&\fIexp_matchlist()\fR returns a list of matched substrings from the brackets
() inside the regexp that last matched. ($object\->matchlist)[0]
thus corresponds to \f(CW$1\fR, ($object\->matchlist)[1] to \f(CW$2\fR, etc.
.ie n .IP "$object\->\fIexp_error()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_error()\fR \fIor\fR" 4
.IX Item "$object->exp_error() or"
.PD 0
.ie n .IP "$object\->\fIerror()\fR" 4
.el .IP "\f(CW$object\fR\->\fIerror()\fR" 4
.IX Item "$object->error()"
.PD
\&\fIexp_error()\fR returns the error generated by the last \fIexpect()\fR call if
no pattern was matched. It is typically useful to examine the value returned by
\&\fIbefore()\fR to find out what the output of the object was in determining
why it didn't match any of the patterns.
.ie n .IP "$object\->\fIclear_accum()\fR" 4
.el .IP "\f(CW$object\fR\->\fIclear_accum()\fR" 4
.IX Item "$object->clear_accum()"
Clear the contents of the accumulator for \f(CW$object\fR. This gets rid of
any residual contents of a handle after \fIexpect()\fR or \fIsend_slow()\fR such
that the next \fIexpect()\fR call will only see new data from \f(CW$object\fR. The
contents of the accumulator are returned.
.ie n .IP "$object\->set_accum($value)" 4
.el .IP "\f(CW$object\fR\->set_accum($value)" 4
.IX Item "$object->set_accum($value)"
Sets the content of the accumulator for \f(CW$object\fR to \f(CW$value\fR. The
previous content of the accumulator is returned.
.ie n .IP "$object\->\fIexp_command()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_command()\fR \fIor\fR" 4
.IX Item "$object->exp_command() or"
.PD 0
.ie n .IP "$object\->\fIcommand()\fR" 4
.el .IP "\f(CW$object\fR\->\fIcommand()\fR" 4
.IX Item "$object->command()"
.PD
\&\fIexp_command()\fR returns the string that was used to spawn the command. Helpful
for debugging and for reused patternmatch subroutines.
.ie n .IP "$object\->\fIexp_exitstatus()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_exitstatus()\fR \fIor\fR" 4
.IX Item "$object->exp_exitstatus() or"
.PD 0
.ie n .IP "$object\->\fIexitstatus()\fR" 4
.el .IP "\f(CW$object\fR\->\fIexitstatus()\fR" 4
.IX Item "$object->exitstatus()"
.PD
Returns the exit status of \f(CW$object\fR (if it already exited).
.ie n .IP "$object\->\fIexp_pty_handle()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_pty_handle()\fR \fIor\fR" 4
.IX Item "$object->exp_pty_handle() or"
.PD 0
.ie n .IP "$object\->\fIpty_handle()\fR" 4
.el .IP "\f(CW$object\fR\->\fIpty_handle()\fR" 4
.IX Item "$object->pty_handle()"
.PD
Returns a string representation of the attached pty, for example:
`spawn \fIid\fR\|(5)' (pty has fileno 5), `handle \fIid\fR\|(7)' (pty was initialized
from fileno 7) or `\s-1STDIN\s0'. Useful for debugging.
.ie n .IP "$object\->restart_timeout_upon_receive(0 | 1)" 4
.el .IP "\f(CW$object\fR\->restart_timeout_upon_receive(0 | 1)" 4
.IX Item "$object->restart_timeout_upon_receive(0 | 1)"
If this is set to 1, the expect timeout is retriggered whenever something
is received from the spawned command.  This allows to perform some
aliveness testing and still expect for patterns.
.Sp
.Vb 5
\&    $exp\->restart_timeout_upon_receive(1);
\&    $exp\->expect($timeout,
\&                 [ timeout => \e&report_timeout ],
\&                 [ qr/pattern/ => \e&handle_pattern],
\&                );
.Ve
.Sp
Now the timeout isn't triggered if the command produces any kind of output,
i.e. is still alive, but you can act upon patterns in the output.
.ie n .IP "$object\->notransfer(1 | 0)" 4
.el .IP "\f(CW$object\fR\->notransfer(1 | 0)" 4
.IX Item "$object->notransfer(1 | 0)"
Do not truncate the content of the accumulator after a match.
Normally, the accumulator is set to the remains that come after the
matched string.  Note that this setting is per object and not per
pattern, so if you want to have normal acting patterns that truncate
the accumulator, you have to add a
.Sp
.Vb 1
\&    $exp\->set_accum($exp\->after);
.Ve
.Sp
to their callback, e.g.
.Sp
.Vb 12
\&    $exp\->notransfer(1);
\&    $exp\->expect($timeout,
\&                 # accumulator not truncated, pattern1 will match again
\&                 [ "pattern1" => sub { my $self = shift;
\&                                       ...
\&                                     } ],
\&                 # accumulator truncated, pattern2 will not match again
\&                 [ "pattern2" => sub { my $self = shift;
\&                                       ...
\&                                       $self\->set_accum($self\->after());
\&                                     } ],
\&                );
.Ve
.Sp
This is only a temporary fix until I can rewrite the pattern matching
part so it can take that additional \-notransfer argument.
.IP "Expect::interconnect(@objects);" 4
.IX Item "Expect::interconnect(@objects);"
Read from \f(CW@objects\fR and print to their \f(CW@listen_groups\fR until an escape sequence
is matched from one of \f(CW@objects\fR and the associated function returns 0 or undef.
The special escape sequence '\s-1EOF\s0' is matched when an object's handle returns
an end of file. Note that it is not necessary to include objects that only
accept data in \f(CW@objects\fR since the escape sequence is _read_ from an object.
Further note that the listen_group for a write-only object is always empty.
Why would you want to have objects listening to \s-1STDOUT\s0 (for example)?
By default every member of \f(CW@objects\fR _as well as every member of its listen
group_ will be set to 'raw \-echo' for the duration of interconnection. 
Setting \f(CW$object\fR\->\fImanual_stty()\fR will stop this behavior per object.
The original tty settings will be restored as interconnect exits.
.Sp
For a generic way to interconnect processes, take a look at IPC::Run.
.IP "Expect::test_handles(@objects)" 4
.IX Item "Expect::test_handles(@objects)"
Given a set of objects determines which objects' handles have data ready
to be read. \fBReturns an array\fR who's members are positions in \f(CW@objects\fR that
have ready handles. Returns undef if there are no such handles ready.
.IP "Expect::version($version_requested or undef);" 4
.IX Item "Expect::version($version_requested or undef);"
Returns current version of Expect. As of .99 earlier versions are not
supported. Too many things were changed to make versioning possible.
.ie n .IP "$object\->interact( ""\e*FILEHANDLE, $escape_sequence"")" 4
.el .IP "\f(CW$object\fR\->interact( \f(CW\e*FILEHANDLE, $escape_sequence\fR)" 4
.IX Item "$object->interact( *FILEHANDLE, $escape_sequence)"
\&\fIinteract()\fR is essentially a macro for calling \fIinterconnect()\fR for
connecting 2 processes together. \e*FILEHANDLE defaults to \e*STDIN and 
\&\f(CW$escape_sequence\fR defaults to undef. Interaction ceases when \f(CW$escape_sequence\fR
is read from \fB\s-1FILEHANDLE\s0\fR, not \f(CW$object\fR. \f(CW$object\fR's listen group will 
consist solely of \e*FILEHANDLE for the duration of the interaction.
\&\e*FILEHANDLE will not be echoed on \s-1STDOUT\s0.
.ie n .IP "$object\->log_group(0 | 1 | undef)" 4
.el .IP "\f(CW$object\fR\->log_group(0 | 1 | undef)" 4
.IX Item "$object->log_group(0 | 1 | undef)"
Set/unset logging of \f(CW$object\fR to its 'listen group'. If set all objects
in the listen group will have output from \f(CW$object\fR printed to them during
\&\f(CW$object\fR\->\fIexpect()\fR, \f(CW$object\fR\->\fIsend_slow()\fR, and \f(CW\*(C`Expect::interconnect($object
, ...)\*(C'\fR. Default value is on. During creation of \f(CW$object\fR the setting will
match the value of \f(CW$Expect::Log_Group\fR, normally 1.
.ie n .IP "$object\->log_user(0 | 1 | undef) \fIor\fR" 4
.el .IP "\f(CW$object\fR\->log_user(0 | 1 | undef) \fIor\fR" 4
.IX Item "$object->log_user(0 | 1 | undef) or"
.PD 0
.ie n .IP "$object\->log_stdout(0 | 1 | undef)" 4
.el .IP "\f(CW$object\fR\->log_stdout(0 | 1 | undef)" 4
.IX Item "$object->log_stdout(0 | 1 | undef)"
.PD
Set/unset logging of object's handle to \s-1STDOUT\s0. This corresponds to Tcl's
log_user variable. Returns current setting if called without parameters.
Default setting is off for initialized handles.  When a process object is
created (not a filehandle initialized with exp_init) the log_stdout setting
will match the value of \f(CW$Expect::Log_Stdout\fR variable, normally 1.
If/when you initialize \s-1STDIN\s0 it is usually associated with a tty which
will by default echo to \s-1STDOUT\s0 anyway, so be careful or you will have
multiple echoes.
.ie n .IP "$object\->log_file(""filename"" | $filehandle | \e&coderef | undef)" 4
.el .IP "\f(CW$object\fR\->log_file(``filename'' | \f(CW$filehandle\fR | \e&coderef | undef)" 4
.IX Item "$object->log_file(filename | $filehandle | &coderef | undef)"
Log session to a file.  All characters send to or received from the
spawned process are written to the file.  Normally appends to the
logfile, but you can pass an additional mode of \*(L"w\*(R" to truncate the
file upon \fIopen()\fR:
.Sp
.Vb 1
\&  $object\->log_file("filename", "w");
.Ve
.Sp
Returns the logfilehandle.
.Sp
If called with an undef value, stops logging and closes logfile:
.Sp
.Vb 1
\&  $object\->log_file(undef);
.Ve
.Sp
If called without argument, returns the logfilehandle:
.Sp
.Vb 1
\&  $fh = $object\->log_file();
.Ve
.Sp
Can be set to a code ref, which will be called instead of printing
to the logfile:
.Sp
.Vb 1
\&  $object\->log_file(\e&myloggerfunc);
.Ve
.ie n .IP "$object\->print_log_file(@strings)" 4
.el .IP "\f(CW$object\fR\->print_log_file(@strings)" 4
.IX Item "$object->print_log_file(@strings)"
Prints to logfile (if opened) or calls the logfile hook function.
This allows the user to add arbitraty text to the logfile.  Note that
this could also be done as \f(CW$object\fR\->log_file\->\fIprint()\fR but would only
work for log files, not code hooks.
.ie n .IP "$object\->set_seq($sequence, \e&function, \e@function_parameters)" 4
.el .IP "\f(CW$object\fR\->set_seq($sequence, \e&function, \e@function_parameters)" 4
.IX Item "$object->set_seq($sequence, &function, @function_parameters)"
During Expect\->\fIinterconnect()\fR if \f(CW$sequence\fR is read from \f(CW$object\fR &function
will be executed with parameters \f(CW@function_parameters\fR. It is \fB_highly
recommended_\fR that the escape sequence be a single character since the 
likelihood is great that the sequence will be broken into to separate reads
from the \f(CW$object\fR's handle, making it impossible to strip \f(CW$sequence\fR from
getting printed to \f(CW$object\fR's listen group. \e&function should be something
like 'main::control_w_function' and \f(CW@function_parameters\fR should be an
array defined by the caller, passed by reference to \fIset_seq()\fR.
Your function should return a non-zero value if execution of \fIinterconnect()\fR
is to resume after the function returns, zero or undefined if \fIinterconnect()\fR
should return after your function returns.
The special sequence '\s-1EOF\s0' matches the end of file being reached by \f(CW$object\fR.
See \fIinterconnect()\fR for details.
.ie n .IP "$object\->set_group(@listener_objects)" 4
.el .IP "\f(CW$object\fR\->set_group(@listener_objects)" 4
.IX Item "$object->set_group(@listener_objects)"
\&\f(CW@listener_objects\fR is the list of objects that should have their handles 
printed to by \f(CW$object\fR when Expect::interconnect, \f(CW$object\fR\->\fIexpect()\fR or
\&\f(CW$object\fR\->\fIsend_slow()\fR are called. Calling w/out parameters will return
the current list of the listener objects.
.ie n .IP "$object\->manual_stty(0 | 1 | undef)" 4
.el .IP "\f(CW$object\fR\->manual_stty(0 | 1 | undef)" 4
.IX Item "$object->manual_stty(0 | 1 | undef)"
Sets/unsets whether or not Expect should make reasonable guesses as to 
when and how to set tty parameters for \f(CW$object\fR. Will match
\&\f(CW$Expect::Manual_Stty\fR value (normally 0) when \f(CW$object\fR is created. If called
without parameters \fImanual_stty()\fR will return the current manual_stty setting.
.ie n .IP "$object\->match_max($maximum_buffer_length | undef) \fIor\fR" 4
.el .IP "\f(CW$object\fR\->match_max($maximum_buffer_length | undef) \fIor\fR" 4
.IX Item "$object->match_max($maximum_buffer_length | undef) or"
.PD 0
.ie n .IP "$object\->max_accum($maximum_buffer_length | undef)" 4
.el .IP "\f(CW$object\fR\->max_accum($maximum_buffer_length | undef)" 4
.IX Item "$object->max_accum($maximum_buffer_length | undef)"
.PD
Set the maximum accumulator size for object. This is useful if you think
that the accumulator will grow out of hand during \fIexpect()\fR calls. Since
the buffer will be matched by every match_pattern it may get slow if the
buffer gets too large. Returns current value if called without parameters.
Not defined by default.
.ie n .IP "$object\->notransfer(0 | 1)" 4
.el .IP "\f(CW$object\fR\->notransfer(0 | 1)" 4
.IX Item "$object->notransfer(0 | 1)"
If set, matched strings will not be deleted from the accumulator.
Returns current value if called without parameters.  False by default.
.ie n .IP "$object\->\fIexp_pid()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_pid()\fR \fIor\fR" 4
.IX Item "$object->exp_pid() or"
.PD 0
.ie n .IP "$object\->\fIpid()\fR" 4
.el .IP "\f(CW$object\fR\->\fIpid()\fR" 4
.IX Item "$object->pid()"
.PD
Return pid of \f(CW$object\fR, if one exists. Initialized filehandles will not have
pids (of course).
.ie n .IP "$object\->send_slow($delay, @strings);" 4
.el .IP "\f(CW$object\fR\->send_slow($delay, \f(CW@strings\fR);" 4
.IX Item "$object->send_slow($delay, @strings);"
print each character from each string of \f(CW@strings\fR one at a time with \f(CW$delay\fR
seconds before each character. This is handy for devices such as modems
that can be annoying if you send them data too fast. After each character
\&\f(CW$object\fR will be checked to determine whether or not it has any new data ready
and if so update the accumulator for future \fIexpect()\fR calls and print the 
output to \s-1STDOUT\s0 and \f(CW@listen_group\fR if log_stdout and log_group are
appropriately set.
.SS "Configurable Package Variables:"
.IX Subsection "Configurable Package Variables:"
.ie n .IP "$Expect::Debug" 4
.el .IP "\f(CW$Expect::Debug\fR" 4
.IX Item "$Expect::Debug"
Defaults to 0. Newly created objects have a \f(CW$object\fR\->\fIdebug()\fR value
of \f(CW$Expect::Debug\fR. See \f(CW$object\fR\->\fIdebug()\fR;
.ie n .IP "$Expect::Do_Soft_Close" 4
.el .IP "\f(CW$Expect::Do_Soft_Close\fR" 4
.IX Item "$Expect::Do_Soft_Close"
Defaults to 0. When destroying objects, soft_close may take up to half
a minute to shut everything down.  From now on, only hard_close will
be called, which is less polite but still gives the process a chance
to terminate properly.  Set this to '1' for old behaviour.
.ie n .IP "$Expect::Exp_Internal" 4
.el .IP "\f(CW$Expect::Exp_Internal\fR" 4
.IX Item "$Expect::Exp_Internal"
Defaults to 0. Newly created objects have a \f(CW$object\fR\->\fIexp_internal()\fR
value of \f(CW$Expect::Exp_Internal\fR. See \f(CW$object\fR\->\fIexp_internal()\fR.
.ie n .IP "$Expect::IgnoreEintr" 4
.el .IP "\f(CW$Expect::IgnoreEintr\fR" 4
.IX Item "$Expect::IgnoreEintr"
Defaults to 0. If set to 1, when waiting for new data, Expect will
ignore \s-1EINTR\s0 errors and restart the \fIselect()\fR call instead.
.ie n .IP "$Expect::Log_Group" 4
.el .IP "\f(CW$Expect::Log_Group\fR" 4
.IX Item "$Expect::Log_Group"
Defaults to 1. Newly created objects have a \f(CW$object\fR\->\fIlog_group()\fR
value of \f(CW$Expect::Log_Group\fR. See \f(CW$object\fR\->\fIlog_group()\fR.
.ie n .IP "$Expect::Log_Stdout" 4
.el .IP "\f(CW$Expect::Log_Stdout\fR" 4
.IX Item "$Expect::Log_Stdout"
Defaults to 1 for spawned commands, 0 for file handles
attached with \fIexp_init()\fR. Newly created objects have a
\&\f(CW$object\fR\->\fIlog_stdout()\fR value of \f(CW$Expect::Log_Stdout\fR. See
\&\f(CW$object\fR\->\fIlog_stdout()\fR.
.ie n .IP "$Expect::Manual_Stty" 4
.el .IP "\f(CW$Expect::Manual_Stty\fR" 4
.IX Item "$Expect::Manual_Stty"
Defaults to 0. Newly created objects have a \f(CW$object\fR\->\fImanual_stty()\fR
value of \f(CW$Expect::Manual_Stty\fR. See \f(CW$object\fR\->\fImanual_stty()\fR.
.ie n .IP "$Expect::Multiline_Matching" 4
.el .IP "\f(CW$Expect::Multiline_Matching\fR" 4
.IX Item "$Expect::Multiline_Matching"
.Vb 6
\&        Defaults to 1. Affects whether or not expect() uses the /m flag for
\&doing regular expression matching. If set to 1 /m is used.
\&        This makes a difference when you are trying to match ^ and $. If
\&you have this on you can match lines in the middle of a page of output
\&using ^ and $ instead of it matching the beginning and end of the entire
\&expression. I think this is handy.
.Ve
.SH "CONTRIBUTIONS"
.IX Header "CONTRIBUTIONS"
Lee Eakin <leakin@japh.itg.ti.com> has ported the kibitz script
from Tcl/Expect to Perl/Expect.
.PP
Jeff Carr <jcarr@linuxmachines.com> provided a simple example of how
handle terminal window resize events (transmitted via the \s-1WINCH\s0
signal) in a ssh session.
.PP
You can find both scripts in the examples/ subdir.  Thanks to both!
.PP
Historical notes:
.PP
There are still a few lines of code dating back to the inspirational
Comm.pl and Chat.pl modules without which this would not have been possible.
Kudos to Eric Arnold <Eric.Arnold@Sun.com> and Randal 'Nuke your \s-1NT\s0 box with
one line of perl code' Schwartz<merlyn@stonehenge.com> for making these
available to the perl public.
.PP
As of .98 I think all the old code is toast. No way could this have been done
without it though. Special thanks to Graham Barr for helping make sense of
the IO::Handle stuff as well as providing the highly recommended IO::Tty 
module.
.SH "REFERENCES"
.IX Header "REFERENCES"
Mark Rogaski <rogaski@att.com> wrote:
.PP
\&\*(L"I figured that you'd like to know that Expect.pm has been very 
useful to \s-1AT&T\s0 Labs over the past couple of years (since I first talked to 
Austin about design decisions). We use Expect.pm for managing 
the switches in our network via the telnet interface, and such automation 
has significantly increased our reliability. So, you can honestly say that 
one of the largest digital networks in existence (\s-1AT&T\s0 Frame Relay) uses 
Expect.pm quite extensively.\*(R"
.SH "FAQ \- Frequently Asked Questions"
.IX Header "FAQ - Frequently Asked Questions"
This is a growing collection of things that might help.
Please send you questions that are not answered here to
RGiersig@cpan.org
.SS "What systems does Expect run on?"
.IX Subsection "What systems does Expect run on?"
Expect itself doesn't have real system dependencies, but the underlying
IO::Tty needs pseudoterminals. IO::Stty uses \s-1POSIX\s0.pm and Fcntl.pm.
.PP
I have used it on Solaris, Linux and \s-1AIX\s0, others report *BSD and \s-1OSF\s0
as working.  Generally, any modern \s-1POSIX\s0 Unix should do, but there
are exceptions to every rule.  Feedback is appreciated.
.PP
See IO::Tty for a list of verified systems.
.SS "Can I use this module with ActivePerl on Windows?"
.IX Subsection "Can I use this module with ActivePerl on Windows?"
Up to now, the answer was 'No', but this has changed.
.PP
You still cannot use ActivePerl, but if you use the Cygwin environment
(http://sources.redhat.com), which brings its own perl, and have
the latest IO::Tty (v0.05 or later) installed, it should work (feedback
appreciated).
.SS "The examples in the tutorial don't work!"
.IX Subsection "The examples in the tutorial don't work!"
The tutorial is hopelessly out of date and needs a serious overhaul.
I appologize for this, I have concentrated my efforts mainly on the
functionality.  Volunteers welcomed.
.SS "How can I find out what Expect is doing?"
.IX Subsection "How can I find out what Expect is doing?"
If you set
.PP
.Vb 1
\&  $Expect::Exp_Internal = 1;
.Ve
.PP
Expect will tell you very verbosely what it is receiving and sending,
what matching it is trying and what it found.  You can do this on a
per-command base with
.PP
.Vb 1
\&  $exp\->exp_internal(1);
.Ve
.PP
You can also set
.PP
.Vb 1
\&  $Expect::Debug = 1;  # or 2, 3 for more verbose output
.Ve
.PP
or
.PP
.Vb 1
\&  $exp\->debug(1);
.Ve
.PP
which gives you even more output.
.SS "I am seeing the output of the command I spawned.  Can I turn that off?"
.IX Subsection "I am seeing the output of the command I spawned.  Can I turn that off?"
Yes, just set
.PP
.Vb 1
\&  $Expect::Log_Stdout = 0;
.Ve
.PP
to globally disable it or
.PP
.Vb 1
\&   $exp\->log_stdout(0);
.Ve
.PP
for just that command.  'log_user' is provided as an alias so
Tcl/Expect user get a \s-1DWIM\s0 experience... :\-)
.SS "No, I mean that when I send some text to the spawned process, it gets echoed back and I have to deal with it in the next expect."
.IX Subsection "No, I mean that when I send some text to the spawned process, it gets echoed back and I have to deal with it in the next expect."
This is caused by the pty, which has probably 'echo' enabled.  A
solution would be to set the pty to raw mode, which in general is
cleaner for communication between two programs (no more unexpected
character translations).  Unfortunately this would break a lot of old
code that sends \*(L"\er\*(R" to the program instead of \*(L"\en\*(R" (translating this
is also handled by the pty), so I won't add this to Expect just like that.
But feel free to experiment with \f(CW\*(C`$exp\->raw_pty(1)\*(C'\fR.
.SS "How do I send control characters to a process?"
.IX Subsection "How do I send control characters to a process?"
A: You can send any characters to a process with the print command. To
represent a control character in Perl, use \ec followed by the letter. For
example, control-G can be represented with \*(L"\ecG\*(R" . Note that this will not
work if you single-quote your string. So, to send control-C to a process in
\&\f(CW$exp\fR, do:
.PP
.Vb 1
\&  print $exp "\ecC";
.Ve
.PP
Or, if you prefer:
.PP
.Vb 1
\&  $exp\->send("\ecC");
.Ve
.PP
The ability to include control characters in a string like this is provided
by Perl, not by Expect.pm . Trying to learn Expect.pm without a thorough
grounding in Perl can be very daunting. We suggest you look into some of
the excellent Perl learning material, such as the books _Programming Perl_
and _Learning Perl_ by O'Reilly, as well as the extensive online Perl
documentation available through the perldoc command.
.SS "My script fails from time to time without any obvious reason.  It seems that I am sometimes loosing output from the spawned program."
.IX Subsection "My script fails from time to time without any obvious reason.  It seems that I am sometimes loosing output from the spawned program."
You could be exiting too fast without giving the spawned program
enough time to finish.  Try adding \f(CW$exp\fR\->\fIsoft_close()\fR to terminate the
program gracefully or do an \fIexpect()\fR for 'eof'.
.PP
Alternatively, try adding a 'sleep 1' after you \fIspawn()\fR the program.
It could be that pty creation on your system is just slow (but this is
rather improbable if you are using the latest IO-Tty).
.SS "I want to automate password entry for su/ssh/scp/rsh/..."
.IX Subsection "I want to automate password entry for su/ssh/scp/rsh/..."
You shouldn't use Expect for this.  Putting passwords, especially 
root passwords, into scripts in clear text can mean severe security 
problems.  I strongly recommend using other means.  For 'su', consider 
switching to 'sudo', which gives you root access on a per-command and 
per-user basis without the need to enter passwords.  'ssh'/'scp' can be 
set up with \s-1RSA\s0 authentication without passwords.  'rsh' can use 
the .rhost mechanism, but I'd strongly suggest to switch to 'ssh'; to 
mention 'rsh' and 'security' in the same sentence makes an oxymoron.
.PP
It will work for 'telnet', though, and there are valid uses for it,
but you still might want to consider using 'ssh', as keeping cleartext
passwords around is very insecure.
.SS "I want to use Expect to automate [anything with a buzzword]..."
.IX Subsection "I want to use Expect to automate [anything with a buzzword]..."
Are you sure there is no other, easier way?  As a rule of thumb,
Expect is useful for automating things that expect to talk to a human,
where no formal standard applies.  For other tasks that do follow a
well-defined protocol, there are often better-suited modules that
already can handle those protocols.  Don't try to do \s-1HTTP\s0 requests by
spawning telnet to port 80, use \s-1LWP\s0 instead.  To automate \s-1FTP\s0, take a
look at Net::FTP or \f(CW\*(C`ncftp\*(C'\fR (http://www.ncftp.org).  You don't use
a screwdriver to hammer in your nails either, or do you?
.SS "Is it possible to use threads with Expect?"
.IX Subsection "Is it possible to use threads with Expect?"
Basically yes, with one restriction: you must \fIspawn()\fR your programs in
the main thread and then pass the Expect objects to the handling
threads. The reason is that \fIspawn()\fR uses \fIfork()\fR, and perlthrtut:
.PP
.Vb 1
\&  "Thinking of mixing fork() and threads?  Please lie down and wait until the feeling passes."
.Ve
.SS "I want to log the whole session to a file."
.IX Subsection "I want to log the whole session to a file."
Use
.PP
.Vb 1
\&  $exp\->log_file("filename");
.Ve
.PP
or
.PP
.Vb 1
\&  $exp\->log_file($filehandle);
.Ve
.PP
or even
.PP
.Vb 1
\&  $exp\->log_file(\e&log_procedure);
.Ve
.PP
for maximum flexibility.
.PP
Note that the logfile is appended to by default, but you can
specify an optional mode \*(L"w\*(R" to truncate the logfile:
.PP
.Vb 1
\&  $exp\->log_file("filename", "w");
.Ve
.PP
To stop logging, just call it with a false argument:
.PP
.Vb 1
\&  $exp\->log_file(undef);
.Ve
.SS "How can I turn off multi-line matching for my regexps?"
.IX Subsection "How can I turn off multi-line matching for my regexps?"
To globally unset multi-line matching for all regexps:
.PP
.Vb 1
\&  $Expect::Multiline_Matching = 0;
.Ve
.PP
You can do that on a per-regexp basis by stating \f(CW\*(C`(?\-m)\*(C'\fR inside the regexp
(you need perl5.00503 or later for that).
.SS "How can I expect on multiple spawned commands?"
.IX Subsection "How can I expect on multiple spawned commands?"
You can use the \fB\-i\fR parameter to specify a single object or a list
of Expect objects.  All following patterns will be evaluated against
that list.
.PP
You can specify \fB\-i\fR multiple times to create groups of objects
and patterns to match against within the same expect statement.
.PP
This works just like in Tcl/Expect.
.PP
See the source example below.
.SS "I seem to have problems with ptys!"
.IX Subsection "I seem to have problems with ptys!"
Well, pty handling is really a black magic, as it is extremely system
dependend.  I have extensively revised IO-Tty, so these problems
should be gone.
.PP
If your system is listed in the \*(L"verified\*(R" list of IO::Tty, you
probably have some non-standard setup, e.g. you compiled your
Linux-kernel yourself and disabled ptys.  Please ask your friendly
sysadmin for help.
.PP
If your system is not listed, unpack the latest version of IO::Tty,
do a 'perl Makefile.PL; make; make test; uname \f(CW\*(C`\-a\*(C'\fR' and send me the
results and I'll see what I can deduce from that.
.SS "I just want to read the output of a process without \fIexpect()\fPing anything. How can I do this?"
.IX Subsection "I just want to read the output of a process without expect()ing anything. How can I do this?"
[ Are you sure you need Expect for this?  How about \fIqx()\fR or open(\*(L"prog|\*(R")? ]
.PP
By using expect without any patterns to match.
.PP
.Vb 3
\&  $process\->expect(undef); # Forever until EOF
\&  $process\->expect($timeout); # For a few seconds
\&  $process\->expect(0); # Is there anything ready on the handle now?
.Ve
.SS "Ok, so now how do I get what was read on the handle?"
.IX Subsection "Ok, so now how do I get what was read on the handle?"
.Vb 1
\&  $read = $process\->before();
.Ve
.SS "Where's IO::Pty?"
.IX Subsection "Where's IO::Pty?"
Find it on \s-1CPAN\s0 as IO-Tty, which provides both.
.SS "How come when I automate the passwd program to change passwords for me passwd dies before changing the password sometimes/every time?"
.IX Subsection "How come when I automate the passwd program to change passwords for me passwd dies before changing the password sometimes/every time?"
What's happening is you are closing the handle before passwd exits.
When you close the handle to a process, it is sent a signal (\s-1SIGPIPE\s0?)
telling it that \s-1STDOUT\s0 has gone away. The default behavior for
processes is to die in this circumstance. Two ways you can make this
not happen are:
.PP
.Vb 1
\&  $process\->soft_close();
.Ve
.PP
This will wait 15 seconds for a process to come up with an \s-1EOF\s0 by
itself before killing it.
.PP
.Vb 1
\&  $process\->expect(undef);
.Ve
.PP
This will wait forever for the process to match an empty set of
patterns. It will return when the process hits an \s-1EOF\s0.
.PP
As a rule, you should always \fIexpect()\fR the result of your transaction
before you continue with processing.
.SS "How come when I try to make a logfile with \fIlog_file()\fP or \fIset_group()\fP it doesn't print anything after the last time I run \fIexpect()\fP?"
.IX Subsection "How come when I try to make a logfile with log_file() or set_group() it doesn't print anything after the last time I run expect()?"
Output is only printed to the logfile/group when Expect reads from the
process, during \fIexpect()\fR, \fIsend_slow()\fR and \fIinterconnect()\fR.
One way you can force this is to make use of
.PP
.Vb 1
\&  $process\->expect(undef);
.Ve
.PP
and
.PP
.Vb 1
\&  $process\->expect(0);
.Ve
.PP
which will make \fIexpect()\fR run with an empty pattern set forever or just
for an instant to capture the output of \f(CW$process\fR. The output is
available in the accumulator, so you can grab it using
\&\f(CW$process\fR\->\fIbefore()\fR.
.SS "I seem to have problems with terminal settings, double echoing, etc."
.IX Subsection "I seem to have problems with terminal settings, double echoing, etc."
Tty settings are a major pain to keep track of. If you find unexpected
behavior such as double-echoing or a frozen session, doublecheck the
documentation for default settings. When in doubt, handle them
yourself using \f(CW$exp\fR\->\fIstty()\fR and \fImanual_stty()\fR functions.  As of .98
you shouldn't have to worry about stty settings getting fouled unless
you use interconnect or intentionally change them (like doing \-echo to
get a password).
.PP
If you foul up your terminal's tty settings, kill any hung processes
and enter 'stty sane' at a shell prompt. This should make your
terminal manageable again.
.PP
Note that IO::Tty returns ptys with your systems default setting
regarding echoing, \s-1CRLF\s0 translation etc. and Expect does not change
them.  I have considered setting the ptys to 'raw' without any
translation whatsoever, but this would break a lot of existing things,
as '\er' translation would not work anymore.  On the other hand, a raw
pty works much like a pipe and is more \s-1WYGIWYE\s0 (what you get is what
you expect), so I suggest you set it to 'raw' by yourself:
.PP
.Vb 3
\&  $exp = new Expect;
\&  $exp\->raw_pty(1);
\&  $exp\->spawn(...);
.Ve
.PP
To disable echo:
.PP
.Vb 1
\&  $exp\->slave\->stty(qw(\-echo));
.Ve
.SS "I'm spawning a telnet/ssh session and then let the user interact with it.  But screen-oriented applications on the other side don't work properly."
.IX Subsection "I'm spawning a telnet/ssh session and then let the user interact with it.  But screen-oriented applications on the other side don't work properly."
You have to set the terminal screen size for that.  Luckily, IO::Pty
already has a method for that, so modify your code to look like this:
.PP
.Vb 3
\&  my $exp = new Expect;
\&  $exp\->slave\->clone_winsize_from(\e*STDIN);
\&  $exp\->spawn("telnet somehost);
.Ve
.PP
Also, some applications need the \s-1TERM\s0 shell variable set so they know
how to move the cursor across the screen.  When logging in, the remote
shell sends a query (Ctrl-Z I think) and expects the terminal to
answer with a string, e.g. 'xterm'.  If you really want to go that way
(be aware, madness lies at its end), you can handle that and send back
the value in \f(CW$ENV\fR{\s-1TERM\s0}.  This is only a hand-waving explanation,
please figure out the details by yourself.
.SS "I set the terminal size as explained above, but if I resize the window, the application does not notice this."
.IX Subsection "I set the terminal size as explained above, but if I resize the window, the application does not notice this."
You have to catch the signal \s-1WINCH\s0 (\*(L"window size changed\*(R"), change the
terminal size and propagate the signal to the spawned application:
.PP
.Vb 4
\&  my $exp = new Expect;
\&  $exp\->slave\->clone_winsize_from(\e*STDIN);
\&  $exp\->spawn("ssh somehost);
\&  $SIG{WINCH} = \e&winch;
\&  
\&  sub winch {
\&    $exp\->slave\->clone_winsize_from(\e*STDIN);
\&    kill WINCH => $exp\->pid if $exp\->pid;
\&    $SIG{WINCH} = \e&winch;
\&  }
\&
\&  $exp\->interact();
.Ve
.PP
There is an example file ssh.pl in the examples/ subdir that shows how
this works with ssh. Please note that I do strongly object against
using Expect to automate ssh login, as there are better way to do that
(see ssh-keygen).
.SS "I noticed that the test uses a string that resembles, but not exactly matches, a well-known sentence that contains every character.  What does that mean?"
.IX Subsection "I noticed that the test uses a string that resembles, but not exactly matches, a well-known sentence that contains every character.  What does that mean?"
That means you are anal-retentive. :\-)  [Gotcha there!]
.ie n .SS "I get a ""Could not assign a pty"" error when running as a non-root user on an \s-1IRIX\s0 box?"
.el .SS "I get a ``Could not assign a pty'' error when running as a non-root user on an \s-1IRIX\s0 box?"
.IX Subsection "I get a Could not assign a pty error when running as a non-root user on an IRIX box?"
The \s-1OS\s0 may not be configured to grant additional pty's (pseudo terminals)
to non-root users.  /usr/sbin/mkpts should be 4755, not 700 for this
to work.  I don't know about security implications if you do this.
.SS "How come I don't notice when the spawned process closes its stdin/out/err??"
.IX Subsection "How come I don't notice when the spawned process closes its stdin/out/err??"
You are probably on one of the systems where the master doesn't get an
\&\s-1EOF\s0 when the slave closes stdin/out/err.
.PP
One possible solution is when you spawn a process, follow it with a
unique string that would indicate the process is finished.
.PP
.Vb 1
\&  $process = Expect\->spawn(\*(Aqtelnet somehost; echo _\|_\|_\|_END_\|_\|_\|_\*(Aq);
.Ve
.PP
And then \f(CW$process\fR\->expect($timeout,'_\|_\|_\|_END_\|_\|_\|_','other','patterns');
.SH "Source Examples"
.IX Header "Source Examples"
.SS "How to automate login"
.IX Subsection "How to automate login"
.Vb 3
\&  my $telnet = new Net::Telnet ("remotehost") # see Net::Telnet
\&    or die "Cannot telnet to remotehost: $!\en";;
\&  my $exp = Expect\->exp_init($telnet);
\&
\&  # deprecated use of spawned telnet command
\&  # my $exp = Expect\->spawn("telnet localhost")
\&  #   or die "Cannot spawn telnet: $!\en";;
\&
\&  my $spawn_ok;
\&  $exp\->expect($timeout,
\&               [
\&                qr\*(Aqlogin: $\*(Aq,
\&                sub {
\&                  $spawn_ok = 1;
\&                  my $fh = shift;
\&                  $fh\->send("$username\en");
\&                  exp_continue;
\&                }
\&               ],
\&               [
\&                \*(AqPassword: $\*(Aq,
\&                sub {
\&                  my $fh = shift;
\&                  print $fh "$password\en";
\&                  exp_continue;
\&                }
\&               ],
\&               [
\&                eof =>
\&                sub {
\&                  if ($spawn_ok) {
\&                    die "ERROR: premature EOF in login.\en";
\&                  } else {
\&                    die "ERROR: could not spawn telnet.\en";
\&                  }
\&                }
\&               ],
\&               [
\&                timeout =>
\&                sub {
\&                  die "No login.\en";
\&                }
\&               ],
\&               \*(Aq\-re\*(Aq, qr\*(Aq[#>:] $\*(Aq, #\*(Aq wait for shell prompt, then exit expect
\&              );
.Ve
.SS "How to expect on multiple spawned commands"
.IX Subsection "How to expect on multiple spawned commands"
.Vb 3
\&  foreach my $cmd (@list_of_commands) {
\&    push @commands, Expect\->spawn($cmd);
\&  }
\&
\&  expect($timeout,
\&         \*(Aq\-i\*(Aq, \e@commands,
\&         [
\&          qr"pattern",          # find this pattern in output of all commands
\&          sub {
\&            my $obj = shift;    # object that matched
\&            print $obj "something\en";
\&            exp_continue;       # we don\*(Aqt want to terminate the expect call
\&          }
\&         ],
\&         \*(Aq\-i\*(Aq, $some_other_command,
\&         [
\&          "some other pattern",
\&          sub {
\&            my ($obj, $parmref) = @_;
\&            # ...
\&
\&            # now we exit the expect command
\&          },
\&          \e$parm
\&         ],
\&        );
.Ve
.SS "How to propagate terminal sizes"
.IX Subsection "How to propagate terminal sizes"
.Vb 4
\&  my $exp = new Expect;
\&  $exp\->slave\->clone_winsize_from(\e*STDIN);
\&  $exp\->spawn("ssh somehost);
\&  $SIG{WINCH} = \e&winch;
\&  
\&  sub winch {
\&    $exp\->slave\->clone_winsize_from(\e*STDIN);
\&    kill WINCH => $exp\->pid if $exp\->pid;
\&    $SIG{WINCH} = \e&winch;
\&  }
\&
\&  $exp\->interact();
.Ve
.SH "HOMEPAGE"
.IX Header "HOMEPAGE"
http://sourceforge.net/projects/expectperl/
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
There are two mailing lists available, expectperl-announce and
expectperl-discuss, at
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-announce
.Ve
.PP
and
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-discuss
.Ve
.SH "BUG TRACKING"
.IX Header "BUG TRACKING"
You can use the \s-1CPAN\s0 Request Tracker http://rt.cpan.org/ and submit
new bugs under
.PP
.Vb 1
\&  http://rt.cpan.org/Ticket/Create.html?Queue=Expect
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
(c) 1997 Austin Schutz <\fIASchutz@users.sourceforge.net\fR> (retired)
.PP
\&\fIexpect()\fR interface & functionality enhancements (c) 1999\-2006 Roland Giersig.
.PP
This module is now maintained by Roland Giersig <\fIRGiersig@cpan.org\fR>
.SH "LICENSE"
.IX Header "LICENSE"
This module can be used under the same terms as Perl.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\s-1THIS\s0 \s-1SOFTWARE\s0 \s-1IS\s0 \s-1PROVIDED\s0 ``\s-1AS\s0 \s-1IS\s0'' \s-1AND\s0 \s-1ANY\s0 \s-1EXPRESS\s0 \s-1OR\s0 \s-1IMPLIED\s0
\&\s-1WARRANTIES\s0, \s-1INCLUDING\s0, \s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1THE\s0 \s-1IMPLIED\s0 \s-1WARRANTIES\s0 \s-1OF\s0
\&\s-1MERCHANTABILITY\s0 \s-1AND\s0 \s-1FITNESS\s0 \s-1FOR\s0 A \s-1PARTICULAR\s0 \s-1PURPOSE\s0 \s-1ARE\s0 \s-1DISCLAIMED\s0.
\&\s-1IN\s0 \s-1NO\s0 \s-1EVENT\s0 \s-1SHALL\s0 \s-1THE\s0 \s-1AUTHORS\s0 \s-1BE\s0 \s-1LIABLE\s0 \s-1FOR\s0 \s-1ANY\s0 \s-1DIRECT\s0, \s-1INDIRECT\s0,
\&\s-1INCIDENTAL\s0, \s-1SPECIAL\s0, \s-1EXEMPLARY\s0, \s-1OR\s0 \s-1CONSEQUENTIAL\s0 \s-1DAMAGES\s0 (\s-1INCLUDING\s0,
\&\s-1BUT\s0 \s-1NOT\s0 \s-1LIMITED\s0 \s-1TO\s0, \s-1PROCUREMENT\s0 \s-1OF\s0 \s-1SUBSTITUTE\s0 \s-1GOODS\s0 \s-1OR\s0 \s-1SERVICES\s0; \s-1LOSS\s0
\&\s-1OF\s0 \s-1USE\s0, \s-1DATA\s0, \s-1OR\s0 \s-1PROFITS\s0; \s-1OR\s0 \s-1BUSINESS\s0 \s-1INTERRUPTION\s0) \s-1HOWEVER\s0 \s-1CAUSED\s0 \s-1AND\s0
\&\s-1ON\s0 \s-1ANY\s0 \s-1THEORY\s0 \s-1OF\s0 \s-1LIABILITY\s0, \s-1WHETHER\s0 \s-1IN\s0 \s-1CONTRACT\s0, \s-1STRICT\s0 \s-1LIABILITY\s0, \s-1OR\s0
\&\s-1TORT\s0 (\s-1INCLUDING\s0 \s-1NEGLIGENCE\s0 \s-1OR\s0 \s-1OTHERWISE\s0) \s-1ARISING\s0 \s-1IN\s0 \s-1ANY\s0 \s-1WAY\s0 \s-1OUT\s0 \s-1OF\s0 \s-1THE\s0
\&\s-1USE\s0 \s-1OF\s0 \s-1THIS\s0 \s-1SOFTWARE\s0, \s-1EVEN\s0 \s-1IF\s0 \s-1ADVISED\s0 \s-1OF\s0 \s-1THE\s0 \s-1POSSIBILITY\s0 \s-1OF\s0 \s-1SUCH\s0
\&\s-1DAMAGE\s0.
.PP
In other words: Use at your own risk.  Provided as is.  Your mileage
may vary.  Read the source, Luke!
.PP
And finally, just to be sure:
.PP
Any Use of This Product, in Any Manner Whatsoever, Will Increase the
Amount of Disorder in the Universe. Although No Liability Is Implied
Herein, the Consumer Is Warned That This Process Will Ultimately Lead
to the Heat Death of the Universe.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 653:" 4
.IX Item "Around line 653:"
\&'=item' outside of any '=over'
.IP "Around line 702:" 4
.IX Item "Around line 702:"
You forgot a '=back' before '=head1'
                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Expect5.18.3pm                               0100644 0001750 0001750 00000170262 12566242000 023042  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Expect 3"
.TH Expect 3 "2007-07-19" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Expect.pm \- Expect for Perl
.SH "VERSION"
.IX Header "VERSION"
1.21
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Expect;
\&
\&  # create an Expect object by spawning another process
\&  my $exp = Expect\->spawn($command, @params)
\&    or die "Cannot spawn $command: $!\en";
\&
\&  # or by using an already opened filehandle (e.g. from Net::Telnet)
\&  my $exp = Expect\->exp_init(\e*FILEHANDLE);
\&
\&  # if you prefer the OO mindset:
\&  my $exp = new Expect;
\&  $exp\->raw_pty(1);  
\&  $exp\->spawn($command, @parameters)
\&    or die "Cannot spawn $command: $!\en";
\&
\&  # send some string there:
\&  $exp\->send("string\en");
\&
\&  # or, for the filehandle mindset:
\&  print $exp "string\en";
\&
\&  # then do some pattern matching with either the simple interface
\&  $patidx = $exp\->expect($timeout, @match_patterns);
\&
\&  # or multi\-match on several spawned commands with callbacks,
\&  # just like the Tcl version
\&  $exp\->expect($timeout,
\&               [ qr/regex1/ => sub { my $exp = shift;
\&                                     $exp\->send("response\en");
\&                                     exp_continue; } ],
\&               [ "regexp2" , \e&callback, @cbparms ],
\&              );
\&
\&  # if no longer needed, do a soft_close to nicely shut down the command
\&  $exp\->soft_close();
\&
\&  # or be less patient with
\&  $exp\->hard_close();
.Ve
.PP
Expect.pm is built to either spawn a process or take an existing filehandle
and interact with it such that normally interactive tasks can be done
without operator assistance. This concept makes more sense if you are 
already familiar with the versatile Tcl version of Expect.
The public functions that make up Expect.pm are:
.PP
.Vb 10
\&  Expect\->new()
\&  Expect::interconnect(@objects_to_be_read_from)
\&  Expect::test_handles($timeout, @objects_to_test)
\&  Expect::version($version_requested | undef);
\&  $object\->spawn(@command)
\&  $object\->clear_accum()
\&  $object\->set_accum($value)
\&  $object\->debug($debug_level)
\&  $object\->exp_internal(0 | 1)
\&  $object\->notransfer(0 | 1)
\&  $object\->raw_pty(0 | 1)
\&  $object\->stty(@stty_modes) # See the IO::Stty docs
\&  $object\->slave()
\&  $object\->before();
\&  $object\->match();
\&  $object\->after();
\&  $object\->matchlist();
\&  $object\->match_number();
\&  $object\->error();
\&  $object\->command();
\&  $object\->exitstatus();
\&  $object\->pty_handle();
\&  $object\->do_soft_close();
\&  $object\->restart_timeout_upon_receive(0 | 1);
\&  $object\->interact($other_object, $escape_sequence)
\&  $object\->log_group(0 | 1 | undef)
\&  $object\->log_user(0 | 1 | undef)
\&  $object\->log_file("filename" | $filehandle | \e&coderef | undef)
\&  $object\->manual_stty(0 | 1 | undef)
\&  $object\->match_max($max_buffersize or undef)
\&  $object\->pid();
\&  $object\->send_slow($delay, @strings_to_send)
\&  $object\->set_group(@listen_group_objects | undef)
\&  $object\->set_seq($sequence,\e&function,\e@parameters);
.Ve
.PP
There are several configurable package variables that affect the behavior of Expect. They are:
.PP
.Vb 8
\&  $Expect::Debug;
\&  $Expect::Exp_Internal;
\&  $Expect::IgnoreEintr;
\&  $Expect::Log_Group;
\&  $Expect::Log_Stdout;
\&  $Expect::Manual_Stty;
\&  $Expect::Multiline_Matching;
\&  $Expect::Do_Soft_Close;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Expect module is a successor of Comm.pl and a descendent of Chat.pl. It
more closely ressembles the Tcl Expect language than its predecessors. It
does not contain any of the networking code found in Comm.pl. I suspect this
would be obsolete anyway given the advent of IO::Socket and external tools
such as netcat.
.PP
Expect.pm is an attempt to have more of a \fIswitch()\fR & case feeling to make 
decision processing more fluid.  Three separate types of debugging have 
been implemented to make code production easier.
.PP
It is possible to interconnect multiple file handles (and processes) much
like Tcl's Expect. An attempt was made to enable all the features of Tcl's
Expect without forcing Tcl on the victim programmer :\-) .
.PP
Please, before you consider using Expect, read the FAQs about
\&\*(L"I want to automate password entry for su/ssh/scp/rsh/...\*(R" and
\&\*(L"I want to use Expect to automate [anything with a buzzword]...\*(R"
.SH "USAGE"
.IX Header "USAGE"
.IP "new Expect ()" 4
.IX Item "new Expect ()"
Creates a new Expect object, i.e. a pty.  You can change parameters on
it before actually spawning a command.  This is important if you want
to modify the terminal settings for the slave.  See \fIslave()\fR below.
The object returned is actually a reblessed IO::Pty filehandle, so see
there for additional methods.
.IP "Expect\->exp_init(\e*FILEHANDLE) \fIor\fR" 4
.IX Item "Expect->exp_init(*FILEHANDLE) or"
.PD 0
.IP "Expect\->init(\e*FILEHANDLE)" 4
.IX Item "Expect->init(*FILEHANDLE)"
.PD
Initializes \f(CW$new_handle_object\fR for use with other Expect functions. It must
be passed a \fB_reference_\fR to \s-1FILEHANDLE\s0 if you want it to work properly. 
IO::File objects are preferable. Returns a reference to the newly created
object.
.Sp
You can use only real filehandles, certain tied filehandles
(e.g. Net::SSH2) that lack a \fIfileno()\fR will not work. Net::Telnet
objects can be used but have been reported to work only for certain
hosts. \s-1YMMV.\s0
.ie n .IP "Expect\->spawn($command, @parameters) \fIor\fR" 4
.el .IP "Expect\->spawn($command, \f(CW@parameters\fR) \fIor\fR" 4
.IX Item "Expect->spawn($command, @parameters) or"
.PD 0
.ie n .IP "$object\->spawn($command, @parameters) \fIor\fR" 4
.el .IP "\f(CW$object\fR\->spawn($command, \f(CW@parameters\fR) \fIor\fR" 4
.IX Item "$object->spawn($command, @parameters) or"
.ie n .IP "new Expect ($command, @parameters)" 4
.el .IP "new Expect ($command, \f(CW@parameters\fR)" 4
.IX Item "new Expect ($command, @parameters)"
.PD
Forks and execs \f(CW$command\fR. Returns an Expect object upon success or
\&\f(CW\*(C`undef\*(C'\fR if the fork was unsuccessful or the command could not be
found.  \fIspawn()\fR passes its parameters unchanged to Perls \fIexec()\fR, so
look there for detailed semantics.
.Sp
Note that if spawn cannot \fIexec()\fR the given command, the Expect object
is still valid and the next \fIexpect()\fR will see \*(L"Cannot exec\*(R", so you
can use that for error handling.
.Sp
Also note that you cannot reuse an object with an already spawned
command, even if that command has exited.  Sorry, but you have to
allocate a new object...
.ie n .IP "$object\->debug(0 | 1 | 2 | 3 | undef)" 4
.el .IP "\f(CW$object\fR\->debug(0 | 1 | 2 | 3 | undef)" 4
.IX Item "$object->debug(0 | 1 | 2 | 3 | undef)"
Sets debug level for \f(CW$object\fR. 1 refers to general debugging
information, 2 refers to verbose debugging and 0 refers to no
debugging. If you call \fIdebug()\fR with no parameters it will return the
current debugging level.  When the object is created the debugging
level will match that \f(CW$Expect::Debug\fR, normally 0.
.Sp
The '3' setting is new with 1.05, and adds the additional
functionality of having the _full_ accumulated buffer printed every
time data is read from an Expect object. This was implemented by
request. I recommend against using this unless you think you need it
as it can create quite a quantity of output under some circumstances..
.ie n .IP "$object\->exp_internal(1 | 0)" 4
.el .IP "\f(CW$object\fR\->exp_internal(1 | 0)" 4
.IX Item "$object->exp_internal(1 | 0)"
Sets/unsets 'exp_internal' debugging. This is similar in nature to its Tcl
counterpart. It is extremely valuable when debugging \fIexpect()\fR sequences.
When the object is created the exp_internal setting will match the value of
\&\f(CW$Expect::Exp_Internal\fR, normally 0. Returns the current setting if called
without parameters. It is highly recommended that you make use of the
debugging features lest you have angry code.
.ie n .IP "$object\->raw_pty(1 | 0)" 4
.el .IP "\f(CW$object\fR\->raw_pty(1 | 0)" 4
.IX Item "$object->raw_pty(1 | 0)"
Set pty to raw mode before spawning.  This disables echoing, \s-1CR\-\s0>\s-1LF\s0
translation and an ugly hack for broken Solaris TTYs (which send
<space><backspace> to slow things down) and thus gives a more
pipe-like behaviour (which is important if you want to transfer binary
content).  Note that this must be set \fIbefore\fR spawning the program.
.ie n .IP "$object\->stty(qw(mode1 mode2...))" 4
.el .IP "\f(CW$object\fR\->stty(qw(mode1 mode2...))" 4
.IX Item "$object->stty(qw(mode1 mode2...))"
Sets the tty mode for \f(CW$object\fR's associated terminal to the given
modes.  Note that on many systems the master side of the pty is not a
tty, so you have to modify the slave pty instead, see next item.  This
needs IO::Stty installed, which is no longer required.
.ie n .IP "$object\->\fIslave()\fR" 4
.el .IP "\f(CW$object\fR\->\fIslave()\fR" 4
.IX Item "$object->slave()"
Returns a filehandle to the slave part of the pty.  Very useful in modifying
the terminal settings:
.Sp
.Vb 1
\&  $object\->slave\->stty(qw(raw \-echo));
.Ve
.Sp
Typical values are 'sane', 'raw', and 'raw \-echo'.  Note that I
recommend setting the terminal to 'raw' or 'raw \-echo', as this avoids
a lot of hassle and gives pipe-like (i.e. transparent) behaviour
(without the buffering issue).
.ie n .IP "$object\->print(@strings) \fIor\fR" 4
.el .IP "\f(CW$object\fR\->print(@strings) \fIor\fR" 4
.IX Item "$object->print(@strings) or"
.PD 0
.ie n .IP "$object\->send(@strings)" 4
.el .IP "\f(CW$object\fR\->send(@strings)" 4
.IX Item "$object->send(@strings)"
.PD
Sends the given strings to the spawned command.  Note that the strings
are not logged in the logfile (see print_log_file) but will probably
be echoed back by the pty, depending on pty settings (default is echo)
and thus end up there anyway.  This must also be taken into account
when \fIexpect()\fRing for an answer: the next string will be the command
just sent.  I suggest setting the pty to raw, which disables echo and
makes the pty transparently act like a bidirectional pipe.
.ie n .IP "$object\->expect($timeout, @match_patterns)" 4
.el .IP "\f(CW$object\fR\->expect($timeout, \f(CW@match_patterns\fR)" 4
.IX Item "$object->expect($timeout, @match_patterns)"
or, more like Tcl/Expect,
.Sp
.Vb 11
\&  expect($timeout, 
\&         \*(Aq\-i\*(Aq, [ $obj1, $obj2, ... ], 
\&               [ $re_pattern, sub { ...; exp_continue; }, @subparms, ],
\&               [ \*(Aqeof\*(Aq, sub { ... } ],
\&               [ \*(Aqtimeout\*(Aq, sub { ... }, \e$subparm1 ],
\&         \*(Aq\-i\*(Aq, [ $objn, ...],
\&               \*(Aq\-ex\*(Aq, $exact_pattern, sub { ... },
\&               $exact_pattern, sub { ...; exp_continue_timeout; },
\&               \*(Aq\-re\*(Aq, $re_pattern, sub { ... },
\&         \*(Aq\-i\*(Aq, \e@object_list, @pattern_list,
\&         ...);
.Ve
.Sp
\&\fISimple interface:\fR
.Sp
Given \f(CW$timeout\fR in seconds Expect will wait for \f(CW$object\fR's handle to produce
one of the match_patterns, which are matched exactly by default. If you 
want a regexp match, prefix the pattern with '\-re'.
.Sp
Due to o/s limitations \f(CW$timeout\fR should be a round number. If \f(CW$timeout\fR 
is 0 Expect will check one time to see if \f(CW$object\fR's handle contains 
any of the match_patterns. If \f(CW$timeout\fR is undef Expect
will wait forever for a pattern to match.
.Sp
If called in a scalar context, \fIexpect()\fR will return the position of
the matched pattern within \f(CW$match_patterns\fR, or undef if no pattern was
matched. This is a position starting from 1, so if you want to know
which of an array of \f(CW@matched_patterns\fR matched you should subtract one
from the return value.
.Sp
If called in an array context \fIexpect()\fR will return
($matched_pattern_position, \f(CW$error\fR, \f(CW$successfully_matching_string\fR,
\&\f(CW$before_match\fR, and \f(CW$after_match\fR).
.Sp
\&\f(CW$matched_pattern_position\fR will contain the value that would have been
returned if \fIexpect()\fR had been called in a scalar context. \f(CW$error\fR is
the error that occurred that caused \fIexpect()\fR to return. \f(CW$error\fR will
contain a number followed by a string equivalent expressing the nature
of the error. Possible values are undef, indicating no error,
\&'1:TIMEOUT' indicating that \f(CW$timeout\fR seconds had elapsed without a
match, '2:EOF' indicating an eof was read from \f(CW$object\fR, '3: spawn
id($fileno) died' indicating that the process exited before matching
and '4:$!' indicating whatever error was set in \f(CW$ERRNO\fR during the last
read on \f(CW$object\fR's handle or during \fIselect()\fR. All handles indicated by
set_group plus \s-1STDOUT\s0 will have all data to come out of \f(CW$object\fR
printed to them during \fIexpect()\fR if log_group and log_stdout are set.
.Sp
Changed from older versions is the regular expression handling. By
default now all strings passed to \fIexpect()\fR are treated as literals. To
match a regular expression pass '\-re' as a parameter in front of the
pattern you want to match as a regexp.
.Sp
Example:
.Sp
.Vb 1
\&  $object\->expect(15, \*(Aqmatch me exactly\*(Aq,\*(Aq\-re\*(Aq,\*(Aqmatch\es+me\es+exactly\*(Aq);
.Ve
.Sp
This change makes it possible to match literals and regular expressions
in the same \fIexpect()\fR call.
.Sp
Also new is multiline matching. ^ will now match the beginning of
lines. Unfortunately, because perl doesn't use $/ in determining where 
lines break using $ to find the end of a line frequently doesn't work. This
is because your terminal is returning \*(L"\er\en\*(R" at the end of every line. One
way to check for a pattern at the end of a line would be to use \er?$ instead
of $.
.Sp
Example: Spawning telnet to a host, you might look for the escape
character.  telnet would return to you \*(L"\er\enEscape character is
\&'^]'.\er\en\*(R". To find this you might use \f(CW$match\fR='^Escape char.*\e.\er?$';
.Sp
.Vb 1
\&  $telnet\->expect(10,\*(Aq\-re\*(Aq,$match);
.Ve
.Sp
\&\fINew more Tcl/Expect\-like interface:\fR
.Sp
It's now possible to expect on more than one connection at a time by
specifying '\f(CW\*(C`\-i\*(C'\fR' and a single Expect object or a ref to an array
containing Expect objects, e.g.
.Sp
.Vb 4
\& expect($timeout,
\&        \*(Aq\-i\*(Aq, $exp1, @patterns_1,
\&        \*(Aq\-i\*(Aq, [ $exp2, $exp3 ], @patterns_2_3,
\&       )
.Ve
.Sp
Furthermore, patterns can now be specified as array refs containing
[$regexp, sub { ...}, \f(CW@optional_subprams\fR] . When the pattern matches,
the subroutine is called with parameters ($matched_expect_obj,
\&\f(CW@optional_subparms\fR). The subroutine can return the symbol
`exp_continue' to continue the expect matching with timeout starting
anew or return the symbol `exp_continue_timeout' for continuing expect
without resetting the timeout count.
.Sp
.Vb 8
\& $exp\->expect($timeout,
\&              [ qr/username: /i, sub { my $self = shift;
\&                                       $self\->send("$username\en");
\&                                       exp_continue; }],
\&              [ qr/password: /i, sub { my $self = shift;
\&                                       $self\->send("$password\en");
\&                                       exp_continue; }],
\&              $shell_prompt);
.Ve
.Sp
`expect' is now exported by default.
.ie n .IP "$object\->\fIexp_before()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_before()\fR \fIor\fR" 4
.IX Item "$object->exp_before() or"
.PD 0
.ie n .IP "$object\->\fIbefore()\fR" 4
.el .IP "\f(CW$object\fR\->\fIbefore()\fR" 4
.IX Item "$object->before()"
.PD
\&\fIbefore()\fR returns the 'before' part of the last \fIexpect()\fR call. If the last
\&\fIexpect()\fR call didn't match anything, \fIexp_before()\fR will return the entire
output of the object accumulated before the \fIexpect()\fR call finished.
.Sp
Note that this is something different than Tcl Expects \fIbefore()\fR!!
.ie n .IP "$object\->\fIexp_after()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_after()\fR \fIor\fR" 4
.IX Item "$object->exp_after() or"
.PD 0
.ie n .IP "$object\->\fIafter()\fR" 4
.el .IP "\f(CW$object\fR\->\fIafter()\fR" 4
.IX Item "$object->after()"
.PD
returns the 'after' part of the last \fIexpect()\fR call. If the last
\&\fIexpect()\fR call didn't match anything, \fIexp_after()\fR will return \fIundef()\fR.
.ie n .IP "$object\->\fIexp_match()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_match()\fR \fIor\fR" 4
.IX Item "$object->exp_match() or"
.PD 0
.ie n .IP "$object\->\fImatch()\fR" 4
.el .IP "\f(CW$object\fR\->\fImatch()\fR" 4
.IX Item "$object->match()"
.PD
returns the string matched by the last \fIexpect()\fR call, undef if
no string was matched.
.ie n .IP "$object\->\fIexp_match_number()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_match_number()\fR \fIor\fR" 4
.IX Item "$object->exp_match_number() or"
.PD 0
.ie n .IP "$object\->\fImatch_number()\fR" 4
.el .IP "\f(CW$object\fR\->\fImatch_number()\fR" 4
.IX Item "$object->match_number()"
.PD
\&\fIexp_match_number()\fR returns the number of the pattern matched by the last
\&\fIexpect()\fR call. Keep in mind that the first pattern in a list of patterns is 1,
not 0. Returns undef if no pattern was matched.
.ie n .IP "$object\->\fIexp_matchlist()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_matchlist()\fR \fIor\fR" 4
.IX Item "$object->exp_matchlist() or"
.PD 0
.ie n .IP "$object\->\fImatchlist()\fR" 4
.el .IP "\f(CW$object\fR\->\fImatchlist()\fR" 4
.IX Item "$object->matchlist()"
.PD
\&\fIexp_matchlist()\fR returns a list of matched substrings from the brackets
() inside the regexp that last matched. ($object\->matchlist)[0]
thus corresponds to \f(CW$1\fR, ($object\->matchlist)[1] to \f(CW$2\fR, etc.
.ie n .IP "$object\->\fIexp_error()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_error()\fR \fIor\fR" 4
.IX Item "$object->exp_error() or"
.PD 0
.ie n .IP "$object\->\fIerror()\fR" 4
.el .IP "\f(CW$object\fR\->\fIerror()\fR" 4
.IX Item "$object->error()"
.PD
\&\fIexp_error()\fR returns the error generated by the last \fIexpect()\fR call if
no pattern was matched. It is typically useful to examine the value returned by
\&\fIbefore()\fR to find out what the output of the object was in determining
why it didn't match any of the patterns.
.ie n .IP "$object\->\fIclear_accum()\fR" 4
.el .IP "\f(CW$object\fR\->\fIclear_accum()\fR" 4
.IX Item "$object->clear_accum()"
Clear the contents of the accumulator for \f(CW$object\fR. This gets rid of
any residual contents of a handle after \fIexpect()\fR or \fIsend_slow()\fR such
that the next \fIexpect()\fR call will only see new data from \f(CW$object\fR. The
contents of the accumulator are returned.
.ie n .IP "$object\->set_accum($value)" 4
.el .IP "\f(CW$object\fR\->set_accum($value)" 4
.IX Item "$object->set_accum($value)"
Sets the content of the accumulator for \f(CW$object\fR to \f(CW$value\fR. The
previous content of the accumulator is returned.
.ie n .IP "$object\->\fIexp_command()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_command()\fR \fIor\fR" 4
.IX Item "$object->exp_command() or"
.PD 0
.ie n .IP "$object\->\fIcommand()\fR" 4
.el .IP "\f(CW$object\fR\->\fIcommand()\fR" 4
.IX Item "$object->command()"
.PD
\&\fIexp_command()\fR returns the string that was used to spawn the command. Helpful
for debugging and for reused patternmatch subroutines.
.ie n .IP "$object\->\fIexp_exitstatus()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_exitstatus()\fR \fIor\fR" 4
.IX Item "$object->exp_exitstatus() or"
.PD 0
.ie n .IP "$object\->\fIexitstatus()\fR" 4
.el .IP "\f(CW$object\fR\->\fIexitstatus()\fR" 4
.IX Item "$object->exitstatus()"
.PD
Returns the exit status of \f(CW$object\fR (if it already exited).
.ie n .IP "$object\->\fIexp_pty_handle()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_pty_handle()\fR \fIor\fR" 4
.IX Item "$object->exp_pty_handle() or"
.PD 0
.ie n .IP "$object\->\fIpty_handle()\fR" 4
.el .IP "\f(CW$object\fR\->\fIpty_handle()\fR" 4
.IX Item "$object->pty_handle()"
.PD
Returns a string representation of the attached pty, for example:
`spawn \fIid\fR\|(5)' (pty has fileno 5), `handle \fIid\fR\|(7)' (pty was initialized
from fileno 7) or `\s-1STDIN\s0'. Useful for debugging.
.ie n .IP "$object\->restart_timeout_upon_receive(0 | 1)" 4
.el .IP "\f(CW$object\fR\->restart_timeout_upon_receive(0 | 1)" 4
.IX Item "$object->restart_timeout_upon_receive(0 | 1)"
If this is set to 1, the expect timeout is retriggered whenever something
is received from the spawned command.  This allows to perform some
aliveness testing and still expect for patterns.
.Sp
.Vb 5
\&    $exp\->restart_timeout_upon_receive(1);
\&    $exp\->expect($timeout,
\&                 [ timeout => \e&report_timeout ],
\&                 [ qr/pattern/ => \e&handle_pattern],
\&                );
.Ve
.Sp
Now the timeout isn't triggered if the command produces any kind of output,
i.e. is still alive, but you can act upon patterns in the output.
.ie n .IP "$object\->notransfer(1 | 0)" 4
.el .IP "\f(CW$object\fR\->notransfer(1 | 0)" 4
.IX Item "$object->notransfer(1 | 0)"
Do not truncate the content of the accumulator after a match.
Normally, the accumulator is set to the remains that come after the
matched string.  Note that this setting is per object and not per
pattern, so if you want to have normal acting patterns that truncate
the accumulator, you have to add a
.Sp
.Vb 1
\&    $exp\->set_accum($exp\->after);
.Ve
.Sp
to their callback, e.g.
.Sp
.Vb 12
\&    $exp\->notransfer(1);
\&    $exp\->expect($timeout,
\&                 # accumulator not truncated, pattern1 will match again
\&                 [ "pattern1" => sub { my $self = shift;
\&                                       ...
\&                                     } ],
\&                 # accumulator truncated, pattern2 will not match again
\&                 [ "pattern2" => sub { my $self = shift;
\&                                       ...
\&                                       $self\->set_accum($self\->after());
\&                                     } ],
\&                );
.Ve
.Sp
This is only a temporary fix until I can rewrite the pattern matching
part so it can take that additional \-notransfer argument.
.IP "Expect::interconnect(@objects);" 4
.IX Item "Expect::interconnect(@objects);"
Read from \f(CW@objects\fR and print to their \f(CW@listen_groups\fR until an escape sequence
is matched from one of \f(CW@objects\fR and the associated function returns 0 or undef.
The special escape sequence '\s-1EOF\s0' is matched when an object's handle returns
an end of file. Note that it is not necessary to include objects that only
accept data in \f(CW@objects\fR since the escape sequence is _read_ from an object.
Further note that the listen_group for a write-only object is always empty.
Why would you want to have objects listening to \s-1STDOUT \s0(for example)?
By default every member of \f(CW@objects\fR _as well as every member of its listen
group_ will be set to 'raw \-echo' for the duration of interconnection. 
Setting \f(CW$object\fR\->\fImanual_stty()\fR will stop this behavior per object.
The original tty settings will be restored as interconnect exits.
.Sp
For a generic way to interconnect processes, take a look at IPC::Run.
.IP "Expect::test_handles(@objects)" 4
.IX Item "Expect::test_handles(@objects)"
Given a set of objects determines which objects' handles have data ready
to be read. \fBReturns an array\fR who's members are positions in \f(CW@objects\fR that
have ready handles. Returns undef if there are no such handles ready.
.IP "Expect::version($version_requested or undef);" 4
.IX Item "Expect::version($version_requested or undef);"
Returns current version of Expect. As of .99 earlier versions are not
supported. Too many things were changed to make versioning possible.
.ie n .IP "$object\->interact( ""\e*FILEHANDLE, $escape_sequence"")" 4
.el .IP "\f(CW$object\fR\->interact( \f(CW\e*FILEHANDLE, $escape_sequence\fR)" 4
.IX Item "$object->interact( *FILEHANDLE, $escape_sequence)"
\&\fIinteract()\fR is essentially a macro for calling \fIinterconnect()\fR for
connecting 2 processes together. \e*FILEHANDLE defaults to \e*STDIN and 
\&\f(CW$escape_sequence\fR defaults to undef. Interaction ceases when \f(CW$escape_sequence\fR
is read from \fB\s-1FILEHANDLE\s0\fR, not \f(CW$object\fR. \f(CW$object\fR's listen group will 
consist solely of \e*FILEHANDLE for the duration of the interaction.
\&\e*FILEHANDLE will not be echoed on \s-1STDOUT. \s0
.ie n .IP "$object\->log_group(0 | 1 | undef)" 4
.el .IP "\f(CW$object\fR\->log_group(0 | 1 | undef)" 4
.IX Item "$object->log_group(0 | 1 | undef)"
Set/unset logging of \f(CW$object\fR to its 'listen group'. If set all objects
in the listen group will have output from \f(CW$object\fR printed to them during
\&\f(CW$object\fR\->\fIexpect()\fR, \f(CW$object\fR\->\fIsend_slow()\fR, and \f(CW\*(C`Expect::interconnect($object
, ...)\*(C'\fR. Default value is on. During creation of \f(CW$object\fR the setting will
match the value of \f(CW$Expect::Log_Group\fR, normally 1.
.ie n .IP "$object\->log_user(0 | 1 | undef) \fIor\fR" 4
.el .IP "\f(CW$object\fR\->log_user(0 | 1 | undef) \fIor\fR" 4
.IX Item "$object->log_user(0 | 1 | undef) or"
.PD 0
.ie n .IP "$object\->log_stdout(0 | 1 | undef)" 4
.el .IP "\f(CW$object\fR\->log_stdout(0 | 1 | undef)" 4
.IX Item "$object->log_stdout(0 | 1 | undef)"
.PD
Set/unset logging of object's handle to \s-1STDOUT.\s0 This corresponds to Tcl's
log_user variable. Returns current setting if called without parameters.
Default setting is off for initialized handles.  When a process object is
created (not a filehandle initialized with exp_init) the log_stdout setting
will match the value of \f(CW$Expect::Log_Stdout\fR variable, normally 1.
If/when you initialize \s-1STDIN\s0 it is usually associated with a tty which
will by default echo to \s-1STDOUT\s0 anyway, so be careful or you will have
multiple echoes.
.ie n .IP "$object\->log_file(""filename"" | $filehandle | \e&coderef | undef)" 4
.el .IP "\f(CW$object\fR\->log_file(``filename'' | \f(CW$filehandle\fR | \e&coderef | undef)" 4
.IX Item "$object->log_file(filename | $filehandle | &coderef | undef)"
Log session to a file.  All characters send to or received from the
spawned process are written to the file.  Normally appends to the
logfile, but you can pass an additional mode of \*(L"w\*(R" to truncate the
file upon \fIopen()\fR:
.Sp
.Vb 1
\&  $object\->log_file("filename", "w");
.Ve
.Sp
Returns the logfilehandle.
.Sp
If called with an undef value, stops logging and closes logfile:
.Sp
.Vb 1
\&  $object\->log_file(undef);
.Ve
.Sp
If called without argument, returns the logfilehandle:
.Sp
.Vb 1
\&  $fh = $object\->log_file();
.Ve
.Sp
Can be set to a code ref, which will be called instead of printing
to the logfile:
.Sp
.Vb 1
\&  $object\->log_file(\e&myloggerfunc);
.Ve
.ie n .IP "$object\->print_log_file(@strings)" 4
.el .IP "\f(CW$object\fR\->print_log_file(@strings)" 4
.IX Item "$object->print_log_file(@strings)"
Prints to logfile (if opened) or calls the logfile hook function.
This allows the user to add arbitraty text to the logfile.  Note that
this could also be done as \f(CW$object\fR\->log_file\->\fIprint()\fR but would only
work for log files, not code hooks.
.ie n .IP "$object\->set_seq($sequence, \e&function, \e@function_parameters)" 4
.el .IP "\f(CW$object\fR\->set_seq($sequence, \e&function, \e@function_parameters)" 4
.IX Item "$object->set_seq($sequence, &function, @function_parameters)"
During Expect\->\fIinterconnect()\fR if \f(CW$sequence\fR is read from \f(CW$object\fR &function
will be executed with parameters \f(CW@function_parameters\fR. It is \fB_highly
recommended_\fR that the escape sequence be a single character since the 
likelihood is great that the sequence will be broken into to separate reads
from the \f(CW$object\fR's handle, making it impossible to strip \f(CW$sequence\fR from
getting printed to \f(CW$object\fR's listen group. \e&function should be something
like 'main::control_w_function' and \f(CW@function_parameters\fR should be an
array defined by the caller, passed by reference to \fIset_seq()\fR.
Your function should return a non-zero value if execution of \fIinterconnect()\fR
is to resume after the function returns, zero or undefined if \fIinterconnect()\fR
should return after your function returns.
The special sequence '\s-1EOF\s0' matches the end of file being reached by \f(CW$object\fR.
See \fIinterconnect()\fR for details.
.ie n .IP "$object\->set_group(@listener_objects)" 4
.el .IP "\f(CW$object\fR\->set_group(@listener_objects)" 4
.IX Item "$object->set_group(@listener_objects)"
\&\f(CW@listener_objects\fR is the list of objects that should have their handles 
printed to by \f(CW$object\fR when Expect::interconnect, \f(CW$object\fR\->\fIexpect()\fR or
\&\f(CW$object\fR\->\fIsend_slow()\fR are called. Calling w/out parameters will return
the current list of the listener objects.
.ie n .IP "$object\->manual_stty(0 | 1 | undef)" 4
.el .IP "\f(CW$object\fR\->manual_stty(0 | 1 | undef)" 4
.IX Item "$object->manual_stty(0 | 1 | undef)"
Sets/unsets whether or not Expect should make reasonable guesses as to 
when and how to set tty parameters for \f(CW$object\fR. Will match
\&\f(CW$Expect::Manual_Stty\fR value (normally 0) when \f(CW$object\fR is created. If called
without parameters \fImanual_stty()\fR will return the current manual_stty setting.
.ie n .IP "$object\->match_max($maximum_buffer_length | undef) \fIor\fR" 4
.el .IP "\f(CW$object\fR\->match_max($maximum_buffer_length | undef) \fIor\fR" 4
.IX Item "$object->match_max($maximum_buffer_length | undef) or"
.PD 0
.ie n .IP "$object\->max_accum($maximum_buffer_length | undef)" 4
.el .IP "\f(CW$object\fR\->max_accum($maximum_buffer_length | undef)" 4
.IX Item "$object->max_accum($maximum_buffer_length | undef)"
.PD
Set the maximum accumulator size for object. This is useful if you think
that the accumulator will grow out of hand during \fIexpect()\fR calls. Since
the buffer will be matched by every match_pattern it may get slow if the
buffer gets too large. Returns current value if called without parameters.
Not defined by default.
.ie n .IP "$object\->notransfer(0 | 1)" 4
.el .IP "\f(CW$object\fR\->notransfer(0 | 1)" 4
.IX Item "$object->notransfer(0 | 1)"
If set, matched strings will not be deleted from the accumulator.
Returns current value if called without parameters.  False by default.
.ie n .IP "$object\->\fIexp_pid()\fR \fIor\fR" 4
.el .IP "\f(CW$object\fR\->\fIexp_pid()\fR \fIor\fR" 4
.IX Item "$object->exp_pid() or"
.PD 0
.ie n .IP "$object\->\fIpid()\fR" 4
.el .IP "\f(CW$object\fR\->\fIpid()\fR" 4
.IX Item "$object->pid()"
.PD
Return pid of \f(CW$object\fR, if one exists. Initialized filehandles will not have
pids (of course).
.ie n .IP "$object\->send_slow($delay, @strings);" 4
.el .IP "\f(CW$object\fR\->send_slow($delay, \f(CW@strings\fR);" 4
.IX Item "$object->send_slow($delay, @strings);"
print each character from each string of \f(CW@strings\fR one at a time with \f(CW$delay\fR
seconds before each character. This is handy for devices such as modems
that can be annoying if you send them data too fast. After each character
\&\f(CW$object\fR will be checked to determine whether or not it has any new data ready
and if so update the accumulator for future \fIexpect()\fR calls and print the 
output to \s-1STDOUT\s0 and \f(CW@listen_group\fR if log_stdout and log_group are
appropriately set.
.SS "Configurable Package Variables:"
.IX Subsection "Configurable Package Variables:"
.ie n .IP "$Expect::Debug" 4
.el .IP "\f(CW$Expect::Debug\fR" 4
.IX Item "$Expect::Debug"
Defaults to 0. Newly created objects have a \f(CW$object\fR\->\fIdebug()\fR value
of \f(CW$Expect::Debug\fR. See \f(CW$object\fR\->\fIdebug()\fR;
.ie n .IP "$Expect::Do_Soft_Close" 4
.el .IP "\f(CW$Expect::Do_Soft_Close\fR" 4
.IX Item "$Expect::Do_Soft_Close"
Defaults to 0. When destroying objects, soft_close may take up to half
a minute to shut everything down.  From now on, only hard_close will
be called, which is less polite but still gives the process a chance
to terminate properly.  Set this to '1' for old behaviour.
.ie n .IP "$Expect::Exp_Internal" 4
.el .IP "\f(CW$Expect::Exp_Internal\fR" 4
.IX Item "$Expect::Exp_Internal"
Defaults to 0. Newly created objects have a \f(CW$object\fR\->\fIexp_internal()\fR
value of \f(CW$Expect::Exp_Internal\fR. See \f(CW$object\fR\->\fIexp_internal()\fR.
.ie n .IP "$Expect::IgnoreEintr" 4
.el .IP "\f(CW$Expect::IgnoreEintr\fR" 4
.IX Item "$Expect::IgnoreEintr"
Defaults to 0. If set to 1, when waiting for new data, Expect will
ignore \s-1EINTR\s0 errors and restart the \fIselect()\fR call instead.
.ie n .IP "$Expect::Log_Group" 4
.el .IP "\f(CW$Expect::Log_Group\fR" 4
.IX Item "$Expect::Log_Group"
Defaults to 1. Newly created objects have a \f(CW$object\fR\->\fIlog_group()\fR
value of \f(CW$Expect::Log_Group\fR. See \f(CW$object\fR\->\fIlog_group()\fR.
.ie n .IP "$Expect::Log_Stdout" 4
.el .IP "\f(CW$Expect::Log_Stdout\fR" 4
.IX Item "$Expect::Log_Stdout"
Defaults to 1 for spawned commands, 0 for file handles
attached with \fIexp_init()\fR. Newly created objects have a
\&\f(CW$object\fR\->\fIlog_stdout()\fR value of \f(CW$Expect::Log_Stdout\fR. See
\&\f(CW$object\fR\->\fIlog_stdout()\fR.
.ie n .IP "$Expect::Manual_Stty" 4
.el .IP "\f(CW$Expect::Manual_Stty\fR" 4
.IX Item "$Expect::Manual_Stty"
Defaults to 0. Newly created objects have a \f(CW$object\fR\->\fImanual_stty()\fR
value of \f(CW$Expect::Manual_Stty\fR. See \f(CW$object\fR\->\fImanual_stty()\fR.
.ie n .IP "$Expect::Multiline_Matching" 4
.el .IP "\f(CW$Expect::Multiline_Matching\fR" 4
.IX Item "$Expect::Multiline_Matching"
.Vb 6
\&        Defaults to 1. Affects whether or not expect() uses the /m flag for
\&doing regular expression matching. If set to 1 /m is used.
\&        This makes a difference when you are trying to match ^ and $. If
\&you have this on you can match lines in the middle of a page of output
\&using ^ and $ instead of it matching the beginning and end of the entire
\&expression. I think this is handy.
.Ve
.SH "CONTRIBUTIONS"
.IX Header "CONTRIBUTIONS"
Lee Eakin <leakin@japh.itg.ti.com> has ported the kibitz script
from Tcl/Expect to Perl/Expect.
.PP
Jeff Carr <jcarr@linuxmachines.com> provided a simple example of how
handle terminal window resize events (transmitted via the \s-1WINCH\s0
signal) in a ssh session.
.PP
You can find both scripts in the examples/ subdir.  Thanks to both!
.PP
Historical notes:
.PP
There are still a few lines of code dating back to the inspirational
Comm.pl and Chat.pl modules without which this would not have been possible.
Kudos to Eric Arnold <Eric.Arnold@Sun.com> and Randal 'Nuke your \s-1NT\s0 box with
one line of perl code' Schwartz<merlyn@stonehenge.com> for making these
available to the perl public.
.PP
As of .98 I think all the old code is toast. No way could this have been done
without it though. Special thanks to Graham Barr for helping make sense of
the IO::Handle stuff as well as providing the highly recommended IO::Tty 
module.
.SH "REFERENCES"
.IX Header "REFERENCES"
Mark Rogaski <rogaski@att.com> wrote:
.PP
\&\*(L"I figured that you'd like to know that Expect.pm has been very 
useful to \s-1AT&T\s0 Labs over the past couple of years (since I first talked to 
Austin about design decisions). We use Expect.pm for managing 
the switches in our network via the telnet interface, and such automation 
has significantly increased our reliability. So, you can honestly say that 
one of the largest digital networks in existence (\s-1AT&T\s0 Frame Relay) uses 
Expect.pm quite extensively.\*(R"
.SH "FAQ \- Frequently Asked Questions"
.IX Header "FAQ - Frequently Asked Questions"
This is a growing collection of things that might help.
Please send you questions that are not answered here to
RGiersig@cpan.org
.SS "What systems does Expect run on?"
.IX Subsection "What systems does Expect run on?"
Expect itself doesn't have real system dependencies, but the underlying
IO::Tty needs pseudoterminals. IO::Stty uses \s-1POSIX\s0.pm and Fcntl.pm.
.PP
I have used it on Solaris, Linux and \s-1AIX,\s0 others report *BSD and \s-1OSF\s0
as working.  Generally, any modern \s-1POSIX\s0 Unix should do, but there
are exceptions to every rule.  Feedback is appreciated.
.PP
See IO::Tty for a list of verified systems.
.SS "Can I use this module with ActivePerl on Windows?"
.IX Subsection "Can I use this module with ActivePerl on Windows?"
Up to now, the answer was 'No', but this has changed.
.PP
You still cannot use ActivePerl, but if you use the Cygwin environment
(http://sources.redhat.com), which brings its own perl, and have
the latest IO::Tty (v0.05 or later) installed, it should work (feedback
appreciated).
.SS "The examples in the tutorial don't work!"
.IX Subsection "The examples in the tutorial don't work!"
The tutorial is hopelessly out of date and needs a serious overhaul.
I appologize for this, I have concentrated my efforts mainly on the
functionality.  Volunteers welcomed.
.SS "How can I find out what Expect is doing?"
.IX Subsection "How can I find out what Expect is doing?"
If you set
.PP
.Vb 1
\&  $Expect::Exp_Internal = 1;
.Ve
.PP
Expect will tell you very verbosely what it is receiving and sending,
what matching it is trying and what it found.  You can do this on a
per-command base with
.PP
.Vb 1
\&  $exp\->exp_internal(1);
.Ve
.PP
You can also set
.PP
.Vb 1
\&  $Expect::Debug = 1;  # or 2, 3 for more verbose output
.Ve
.PP
or
.PP
.Vb 1
\&  $exp\->debug(1);
.Ve
.PP
which gives you even more output.
.SS "I am seeing the output of the command I spawned.  Can I turn that off?"
.IX Subsection "I am seeing the output of the command I spawned. Can I turn that off?"
Yes, just set
.PP
.Vb 1
\&  $Expect::Log_Stdout = 0;
.Ve
.PP
to globally disable it or
.PP
.Vb 1
\&   $exp\->log_stdout(0);
.Ve
.PP
for just that command.  'log_user' is provided as an alias so
Tcl/Expect user get a \s-1DWIM\s0 experience... :\-)
.SS "No, I mean that when I send some text to the spawned process, it gets echoed back and I have to deal with it in the next expect."
.IX Subsection "No, I mean that when I send some text to the spawned process, it gets echoed back and I have to deal with it in the next expect."
This is caused by the pty, which has probably 'echo' enabled.  A
solution would be to set the pty to raw mode, which in general is
cleaner for communication between two programs (no more unexpected
character translations).  Unfortunately this would break a lot of old
code that sends \*(L"\er\*(R" to the program instead of \*(L"\en\*(R" (translating this
is also handled by the pty), so I won't add this to Expect just like that.
But feel free to experiment with \f(CW\*(C`$exp\->raw_pty(1)\*(C'\fR.
.SS "How do I send control characters to a process?"
.IX Subsection "How do I send control characters to a process?"
A: You can send any characters to a process with the print command. To
represent a control character in Perl, use \ec followed by the letter. For
example, control-G can be represented with \*(L"\ecG\*(R" . Note that this will not
work if you single-quote your string. So, to send control-C to a process in
\&\f(CW$exp\fR, do:
.PP
.Vb 1
\&  print $exp "\ecC";
.Ve
.PP
Or, if you prefer:
.PP
.Vb 1
\&  $exp\->send("\ecC");
.Ve
.PP
The ability to include control characters in a string like this is provided
by Perl, not by Expect.pm . Trying to learn Expect.pm without a thorough
grounding in Perl can be very daunting. We suggest you look into some of
the excellent Perl learning material, such as the books _Programming Perl_
and _Learning Perl_ by O'Reilly, as well as the extensive online Perl
documentation available through the perldoc command.
.SS "My script fails from time to time without any obvious reason.  It seems that I am sometimes loosing output from the spawned program."
.IX Subsection "My script fails from time to time without any obvious reason. It seems that I am sometimes loosing output from the spawned program."
You could be exiting too fast without giving the spawned program
enough time to finish.  Try adding \f(CW$exp\fR\->\fIsoft_close()\fR to terminate the
program gracefully or do an \fIexpect()\fR for 'eof'.
.PP
Alternatively, try adding a 'sleep 1' after you \fIspawn()\fR the program.
It could be that pty creation on your system is just slow (but this is
rather improbable if you are using the latest IO-Tty).
.SS "I want to automate password entry for su/ssh/scp/rsh/..."
.IX Subsection "I want to automate password entry for su/ssh/scp/rsh/..."
You shouldn't use Expect for this.  Putting passwords, especially 
root passwords, into scripts in clear text can mean severe security 
problems.  I strongly recommend using other means.  For 'su', consider 
switching to 'sudo', which gives you root access on a per-command and 
per-user basis without the need to enter passwords.  'ssh'/'scp' can be 
set up with \s-1RSA\s0 authentication without passwords.  'rsh' can use 
the .rhost mechanism, but I'd strongly suggest to switch to 'ssh'; to 
mention 'rsh' and 'security' in the same sentence makes an oxymoron.
.PP
It will work for 'telnet', though, and there are valid uses for it,
but you still might want to consider using 'ssh', as keeping cleartext
passwords around is very insecure.
.SS "I want to use Expect to automate [anything with a buzzword]..."
.IX Subsection "I want to use Expect to automate [anything with a buzzword]..."
Are you sure there is no other, easier way?  As a rule of thumb,
Expect is useful for automating things that expect to talk to a human,
where no formal standard applies.  For other tasks that do follow a
well-defined protocol, there are often better-suited modules that
already can handle those protocols.  Don't try to do \s-1HTTP\s0 requests by
spawning telnet to port 80, use \s-1LWP\s0 instead.  To automate \s-1FTP,\s0 take a
look at Net::FTP or \f(CW\*(C`ncftp\*(C'\fR (http://www.ncftp.org).  You don't use
a screwdriver to hammer in your nails either, or do you?
.SS "Is it possible to use threads with Expect?"
.IX Subsection "Is it possible to use threads with Expect?"
Basically yes, with one restriction: you must \fIspawn()\fR your programs in
the main thread and then pass the Expect objects to the handling
threads. The reason is that \fIspawn()\fR uses \fIfork()\fR, and perlthrtut:
.PP
.Vb 1
\&  "Thinking of mixing fork() and threads?  Please lie down and wait until the feeling passes."
.Ve
.SS "I want to log the whole session to a file."
.IX Subsection "I want to log the whole session to a file."
Use
.PP
.Vb 1
\&  $exp\->log_file("filename");
.Ve
.PP
or
.PP
.Vb 1
\&  $exp\->log_file($filehandle);
.Ve
.PP
or even
.PP
.Vb 1
\&  $exp\->log_file(\e&log_procedure);
.Ve
.PP
for maximum flexibility.
.PP
Note that the logfile is appended to by default, but you can
specify an optional mode \*(L"w\*(R" to truncate the logfile:
.PP
.Vb 1
\&  $exp\->log_file("filename", "w");
.Ve
.PP
To stop logging, just call it with a false argument:
.PP
.Vb 1
\&  $exp\->log_file(undef);
.Ve
.SS "How can I turn off multi-line matching for my regexps?"
.IX Subsection "How can I turn off multi-line matching for my regexps?"
To globally unset multi-line matching for all regexps:
.PP
.Vb 1
\&  $Expect::Multiline_Matching = 0;
.Ve
.PP
You can do that on a per-regexp basis by stating \f(CW\*(C`(?\-m)\*(C'\fR inside the regexp
(you need perl5.00503 or later for that).
.SS "How can I expect on multiple spawned commands?"
.IX Subsection "How can I expect on multiple spawned commands?"
You can use the \fB\-i\fR parameter to specify a single object or a list
of Expect objects.  All following patterns will be evaluated against
that list.
.PP
You can specify \fB\-i\fR multiple times to create groups of objects
and patterns to match against within the same expect statement.
.PP
This works just like in Tcl/Expect.
.PP
See the source example below.
.SS "I seem to have problems with ptys!"
.IX Subsection "I seem to have problems with ptys!"
Well, pty handling is really a black magic, as it is extremely system
dependend.  I have extensively revised IO-Tty, so these problems
should be gone.
.PP
If your system is listed in the \*(L"verified\*(R" list of IO::Tty, you
probably have some non-standard setup, e.g. you compiled your
Linux-kernel yourself and disabled ptys.  Please ask your friendly
sysadmin for help.
.PP
If your system is not listed, unpack the latest version of IO::Tty,
do a 'perl Makefile.PL; make; make test; uname \f(CW\*(C`\-a\*(C'\fR' and send me the
results and I'll see what I can deduce from that.
.SS "I just want to read the output of a process without \fIexpect()\fPing anything. How can I do this?"
.IX Subsection "I just want to read the output of a process without expect()ing anything. How can I do this?"
[ Are you sure you need Expect for this?  How about \fIqx()\fR or open(\*(L"prog|\*(R")? ]
.PP
By using expect without any patterns to match.
.PP
.Vb 3
\&  $process\->expect(undef); # Forever until EOF
\&  $process\->expect($timeout); # For a few seconds
\&  $process\->expect(0); # Is there anything ready on the handle now?
.Ve
.SS "Ok, so now how do I get what was read on the handle?"
.IX Subsection "Ok, so now how do I get what was read on the handle?"
.Vb 1
\&  $read = $process\->before();
.Ve
.SS "Where's IO::Pty?"
.IX Subsection "Where's IO::Pty?"
Find it on \s-1CPAN\s0 as IO-Tty, which provides both.
.SS "How come when I automate the passwd program to change passwords for me passwd dies before changing the password sometimes/every time?"
.IX Subsection "How come when I automate the passwd program to change passwords for me passwd dies before changing the password sometimes/every time?"
What's happening is you are closing the handle before passwd exits.
When you close the handle to a process, it is sent a signal (\s-1SIGPIPE\s0?)
telling it that \s-1STDOUT\s0 has gone away. The default behavior for
processes is to die in this circumstance. Two ways you can make this
not happen are:
.PP
.Vb 1
\&  $process\->soft_close();
.Ve
.PP
This will wait 15 seconds for a process to come up with an \s-1EOF\s0 by
itself before killing it.
.PP
.Vb 1
\&  $process\->expect(undef);
.Ve
.PP
This will wait forever for the process to match an empty set of
patterns. It will return when the process hits an \s-1EOF.\s0
.PP
As a rule, you should always \fIexpect()\fR the result of your transaction
before you continue with processing.
.SS "How come when I try to make a logfile with \fIlog_file()\fP or \fIset_group()\fP it doesn't print anything after the last time I run \fIexpect()\fP?"
.IX Subsection "How come when I try to make a logfile with log_file() or set_group() it doesn't print anything after the last time I run expect()?"
Output is only printed to the logfile/group when Expect reads from the
process, during \fIexpect()\fR, \fIsend_slow()\fR and \fIinterconnect()\fR.
One way you can force this is to make use of
.PP
.Vb 1
\&  $process\->expect(undef);
.Ve
.PP
and
.PP
.Vb 1
\&  $process\->expect(0);
.Ve
.PP
which will make \fIexpect()\fR run with an empty pattern set forever or just
for an instant to capture the output of \f(CW$process\fR. The output is
available in the accumulator, so you can grab it using
\&\f(CW$process\fR\->\fIbefore()\fR.
.SS "I seem to have problems with terminal settings, double echoing, etc."
.IX Subsection "I seem to have problems with terminal settings, double echoing, etc."
Tty settings are a major pain to keep track of. If you find unexpected
behavior such as double-echoing or a frozen session, doublecheck the
documentation for default settings. When in doubt, handle them
yourself using \f(CW$exp\fR\->\fIstty()\fR and \fImanual_stty()\fR functions.  As of .98
you shouldn't have to worry about stty settings getting fouled unless
you use interconnect or intentionally change them (like doing \-echo to
get a password).
.PP
If you foul up your terminal's tty settings, kill any hung processes
and enter 'stty sane' at a shell prompt. This should make your
terminal manageable again.
.PP
Note that IO::Tty returns ptys with your systems default setting
regarding echoing, \s-1CRLF\s0 translation etc. and Expect does not change
them.  I have considered setting the ptys to 'raw' without any
translation whatsoever, but this would break a lot of existing things,
as '\er' translation would not work anymore.  On the other hand, a raw
pty works much like a pipe and is more \s-1WYGIWYE \s0(what you get is what
you expect), so I suggest you set it to 'raw' by yourself:
.PP
.Vb 3
\&  $exp = new Expect;
\&  $exp\->raw_pty(1);
\&  $exp\->spawn(...);
.Ve
.PP
To disable echo:
.PP
.Vb 1
\&  $exp\->slave\->stty(qw(\-echo));
.Ve
.SS "I'm spawning a telnet/ssh session and then let the user interact with it.  But screen-oriented applications on the other side don't work properly."
.IX Subsection "I'm spawning a telnet/ssh session and then let the user interact with it. But screen-oriented applications on the other side don't work properly."
You have to set the terminal screen size for that.  Luckily, IO::Pty
already has a method for that, so modify your code to look like this:
.PP
.Vb 3
\&  my $exp = new Expect;
\&  $exp\->slave\->clone_winsize_from(\e*STDIN);
\&  $exp\->spawn("telnet somehost);
.Ve
.PP
Also, some applications need the \s-1TERM\s0 shell variable set so they know
how to move the cursor across the screen.  When logging in, the remote
shell sends a query (Ctrl-Z I think) and expects the terminal to
answer with a string, e.g. 'xterm'.  If you really want to go that way
(be aware, madness lies at its end), you can handle that and send back
the value in \f(CW$ENV\fR{\s-1TERM\s0}.  This is only a hand-waving explanation,
please figure out the details by yourself.
.SS "I set the terminal size as explained above, but if I resize the window, the application does not notice this."
.IX Subsection "I set the terminal size as explained above, but if I resize the window, the application does not notice this."
You have to catch the signal \s-1WINCH \s0(\*(L"window size changed\*(R"), change the
terminal size and propagate the signal to the spawned application:
.PP
.Vb 4
\&  my $exp = new Expect;
\&  $exp\->slave\->clone_winsize_from(\e*STDIN);
\&  $exp\->spawn("ssh somehost);
\&  $SIG{WINCH} = \e&winch;
\&  
\&  sub winch {
\&    $exp\->slave\->clone_winsize_from(\e*STDIN);
\&    kill WINCH => $exp\->pid if $exp\->pid;
\&    $SIG{WINCH} = \e&winch;
\&  }
\&
\&  $exp\->interact();
.Ve
.PP
There is an example file ssh.pl in the examples/ subdir that shows how
this works with ssh. Please note that I do strongly object against
using Expect to automate ssh login, as there are better way to do that
(see ssh-keygen).
.SS "I noticed that the test uses a string that resembles, but not exactly matches, a well-known sentence that contains every character.  What does that mean?"
.IX Subsection "I noticed that the test uses a string that resembles, but not exactly matches, a well-known sentence that contains every character. What does that mean?"
That means you are anal-retentive. :\-)  [Gotcha there!]
.ie n .SS "I get a ""Could not assign a pty"" error when running as a non-root user on an \s-1IRIX\s0 box?"
.el .SS "I get a ``Could not assign a pty'' error when running as a non-root user on an \s-1IRIX\s0 box?"
.IX Subsection "I get a Could not assign a pty error when running as a non-root user on an IRIX box?"
The \s-1OS\s0 may not be configured to grant additional pty's (pseudo terminals)
to non-root users.  /usr/sbin/mkpts should be 4755, not 700 for this
to work.  I don't know about security implications if you do this.
.SS "How come I don't notice when the spawned process closes its stdin/out/err??"
.IX Subsection "How come I don't notice when the spawned process closes its stdin/out/err??"
You are probably on one of the systems where the master doesn't get an
\&\s-1EOF\s0 when the slave closes stdin/out/err.
.PP
One possible solution is when you spawn a process, follow it with a
unique string that would indicate the process is finished.
.PP
.Vb 1
\&  $process = Expect\->spawn(\*(Aqtelnet somehost; echo _\|_\|_\|_END_\|_\|_\|_\*(Aq);
.Ve
.PP
And then \f(CW$process\fR\->expect($timeout,'_\|_\|_\|_END_\|_\|_\|_','other','patterns');
.SH "Source Examples"
.IX Header "Source Examples"
.SS "How to automate login"
.IX Subsection "How to automate login"
.Vb 3
\&  my $telnet = new Net::Telnet ("remotehost") # see Net::Telnet
\&    or die "Cannot telnet to remotehost: $!\en";;
\&  my $exp = Expect\->exp_init($telnet);
\&
\&  # deprecated use of spawned telnet command
\&  # my $exp = Expect\->spawn("telnet localhost")
\&  #   or die "Cannot spawn telnet: $!\en";;
\&
\&  my $spawn_ok;
\&  $exp\->expect($timeout,
\&               [
\&                qr\*(Aqlogin: $\*(Aq,
\&                sub {
\&                  $spawn_ok = 1;
\&                  my $fh = shift;
\&                  $fh\->send("$username\en");
\&                  exp_continue;
\&                }
\&               ],
\&               [
\&                \*(AqPassword: $\*(Aq,
\&                sub {
\&                  my $fh = shift;
\&                  print $fh "$password\en";
\&                  exp_continue;
\&                }
\&               ],
\&               [
\&                eof =>
\&                sub {
\&                  if ($spawn_ok) {
\&                    die "ERROR: premature EOF in login.\en";
\&                  } else {
\&                    die "ERROR: could not spawn telnet.\en";
\&                  }
\&                }
\&               ],
\&               [
\&                timeout =>
\&                sub {
\&                  die "No login.\en";
\&                }
\&               ],
\&               \*(Aq\-re\*(Aq, qr\*(Aq[#>:] $\*(Aq, #\*(Aq wait for shell prompt, then exit expect
\&              );
.Ve
.SS "How to expect on multiple spawned commands"
.IX Subsection "How to expect on multiple spawned commands"
.Vb 3
\&  foreach my $cmd (@list_of_commands) {
\&    push @commands, Expect\->spawn($cmd);
\&  }
\&
\&  expect($timeout,
\&         \*(Aq\-i\*(Aq, \e@commands,
\&         [
\&          qr"pattern",          # find this pattern in output of all commands
\&          sub {
\&            my $obj = shift;    # object that matched
\&            print $obj "something\en";
\&            exp_continue;       # we don\*(Aqt want to terminate the expect call
\&          }
\&         ],
\&         \*(Aq\-i\*(Aq, $some_other_command,
\&         [
\&          "some other pattern",
\&          sub {
\&            my ($obj, $parmref) = @_;
\&            # ...
\&
\&            # now we exit the expect command
\&          },
\&          \e$parm
\&         ],
\&        );
.Ve
.SS "How to propagate terminal sizes"
.IX Subsection "How to propagate terminal sizes"
.Vb 4
\&  my $exp = new Expect;
\&  $exp\->slave\->clone_winsize_from(\e*STDIN);
\&  $exp\->spawn("ssh somehost);
\&  $SIG{WINCH} = \e&winch;
\&  
\&  sub winch {
\&    $exp\->slave\->clone_winsize_from(\e*STDIN);
\&    kill WINCH => $exp\->pid if $exp\->pid;
\&    $SIG{WINCH} = \e&winch;
\&  }
\&
\&  $exp\->interact();
.Ve
.SH "HOMEPAGE"
.IX Header "HOMEPAGE"
http://sourceforge.net/projects/expectperl/
.SH "MAILING LISTS"
.IX Header "MAILING LISTS"
There are two mailing lists available, expectperl-announce and
expectperl-discuss, at
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-announce
.Ve
.PP
and
.PP
.Vb 1
\&  http://lists.sourceforge.net/lists/listinfo/expectperl\-discuss
.Ve
.SH "BUG TRACKING"
.IX Header "BUG TRACKING"
You can use the \s-1CPAN\s0 Request Tracker http://rt.cpan.org/ and submit
new bugs under
.PP
.Vb 1
\&  http://rt.cpan.org/Ticket/Create.html?Queue=Expect
.Ve
.SH "AUTHORS"
.IX Header "AUTHORS"
(c) 1997 Austin Schutz <\fIASchutz@users.sourceforge.net\fR> (retired)
.PP
\&\fIexpect()\fR interface & functionality enhancements (c) 1999\-2006 Roland Giersig.
.PP
This module is now maintained by Roland Giersig <\fIRGiersig@cpan.org\fR>
.SH "LICENSE"
.IX Header "LICENSE"
This module can be used under the same terms as Perl.
.SH "DISCLAIMER"
.IX Header "DISCLAIMER"
\&\s-1THIS SOFTWARE IS PROVIDED\s0 ``\s-1AS IS\s0'' \s-1AND ANY EXPRESS OR IMPLIED
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY DIRECT, INDIRECT,
INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES \s0(\s-1INCLUDING,
BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES\s0; \s-1LOSS
OF USE, DATA, OR PROFITS\s0; \s-1OR BUSINESS INTERRUPTION\s0) \s-1HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT \s0(\s-1INCLUDING NEGLIGENCE OR OTHERWISE\s0) \s-1ARISING IN ANY WAY OUT OF THE
USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
DAMAGE.\s0
.PP
In other words: Use at your own risk.  Provided as is.  Your mileage
may vary.  Read the source, Luke!
.PP
And finally, just to be sure:
.PP
Any Use of This Product, in Any Manner Whatsoever, Will Increase the
Amount of Disorder in the Universe. Although No Liability Is Implied
Herein, the Consumer Is Warned That This Process Will Ultimately Lead
to the Heat Death of the Universe.
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 653:" 4
.IX Item "Around line 653:"
\&'=item' outside of any '=over'
.IP "Around line 702:" 4
.IX Item "Around line 702:"
You forgot a '=back' before '=head1'
                                                                                                                                                                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Exporter.3pm                                 0100644 0001750 0001750 00000055276 12566207454 023133  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Exporter 3pm"
.TH Exporter 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Exporter \- Implements default import method for modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In module \fIYourModule.pm\fR:
.PP
.Vb 4
\&  package YourModule;
\&  require Exporter;
\&  @ISA = qw(Exporter);
\&  @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
.Ve
.PP
or
.PP
.Vb 3
\&  package YourModule;
\&  use Exporter \*(Aqimport\*(Aq; # gives you Exporter\*(Aqs import() method directly
\&  @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
.Ve
.PP
In other files which wish to use \f(CW\*(C`YourModule\*(C'\fR:
.PP
.Vb 2
\&  use YourModule qw(frobnicate);      # import listed symbols
\&  frobnicate ($left, $right)          # calls YourModule::frobnicate
.Ve
.PP
Take a look at \*(L"Good Practices\*(R" for some variants
you will like to use in modern Perl code.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Exporter module implements an \f(CW\*(C`import\*(C'\fR method which allows a module
to export functions and variables to its users' namespaces.  Many modules
use Exporter rather than implementing their own \f(CW\*(C`import\*(C'\fR method because
Exporter provides a highly flexible interface, with an implementation optimised
for the common case.
.PP
Perl automatically calls the \f(CW\*(C`import\*(C'\fR method when processing a
\&\f(CW\*(C`use\*(C'\fR statement for a module.  Modules and \f(CW\*(C`use\*(C'\fR are documented
in perlfunc and perlmod.  Understanding the concept of
modules and how the \f(CW\*(C`use\*(C'\fR statement operates is important to
understanding the Exporter.
.SS "How to Export"
.IX Subsection "How to Export"
The arrays \f(CW@EXPORT\fR and \f(CW@EXPORT_OK\fR in a module hold lists of
symbols that are going to be exported into the users name space by
default, or which they can request to be exported, respectively.  The
symbols can represent functions, scalars, arrays, hashes, or typeglobs.
The symbols must be given by full name with the exception that the
ampersand in front of a function is optional, e.g.
.PP
.Vb 2
\&    @EXPORT    = qw(afunc $scalar @array);   # afunc is a function
\&    @EXPORT_OK = qw(&bfunc %hash *typeglob); # explicit prefix on &bfunc
.Ve
.PP
If you are only exporting function names it is recommended to omit the
ampersand, as the implementation is faster this way.
.SS "Selecting What to Export"
.IX Subsection "Selecting What to Export"
Do \fBnot\fR export method names!
.PP
Do \fBnot\fR export anything else by default without a good reason!
.PP
Exports pollute the namespace of the module user.  If you must export
try to use \f(CW@EXPORT_OK\fR in preference to \f(CW@EXPORT\fR and avoid short or
common symbol names to reduce the risk of name clashes.
.PP
Generally anything not exported is still accessible from outside the
module using the \f(CW\*(C`YourModule::item_name\*(C'\fR (or \f(CW\*(C`$blessed_ref\->method\*(C'\fR)
syntax.  By convention you can use a leading underscore on names to
informally indicate that they are 'internal' and not for public use.
.PP
(It is actually possible to get private functions by saying:
.PP
.Vb 3
\&  my $subref = sub { ... };
\&  $subref\->(@args);            # Call it as a function
\&  $obj\->$subref(@args);        # Use it as a method
.Ve
.PP
However if you use them for methods it is up to you to figure out
how to make inheritance work.)
.PP
As a general rule, if the module is trying to be object oriented
then export nothing.  If it's just a collection of functions then
\&\f(CW@EXPORT_OK\fR anything but use \f(CW@EXPORT\fR with caution.  For function and
method names use barewords in preference to names prefixed with
ampersands for the export lists.
.PP
Other module design guidelines can be found in perlmod.
.SS "How to Import"
.IX Subsection "How to Import"
In other files which wish to use your module there are three basic ways for
them to load your module and import its symbols:
.ie n .IP """use YourModule;""" 4
.el .IP "\f(CWuse YourModule;\fR" 4
.IX Item "use YourModule;"
This imports all the symbols from YourModule's \f(CW@EXPORT\fR into the namespace
of the \f(CW\*(C`use\*(C'\fR statement.
.ie n .IP """use YourModule ();""" 4
.el .IP "\f(CWuse YourModule ();\fR" 4
.IX Item "use YourModule ();"
This causes perl to load your module but does not import any symbols.
.ie n .IP """use YourModule qw(...);""" 4
.el .IP "\f(CWuse YourModule qw(...);\fR" 4
.IX Item "use YourModule qw(...);"
This imports only the symbols listed by the caller into their namespace.
All listed symbols must be in your \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR, else an error
occurs.  The advanced export features of Exporter are accessed like this,
but with list entries that are syntactically distinct from symbol names.
.PP
Unless you want to use its advanced features, this is probably all you
need to know to use Exporter.
.SH "Advanced Features"
.IX Header "Advanced Features"
.SS "Specialised Import Lists"
.IX Subsection "Specialised Import Lists"
If any of the entries in an import list begins with !, : or / then
the list is treated as a series of specifications which either add to
or delete from the list of names to import.  They are processed left to
right. Specifications are in the form:
.PP
.Vb 4
\&    [!]name         This name only
\&    [!]:DEFAULT     All names in @EXPORT
\&    [!]:tag         All names in $EXPORT_TAGS{tag} anonymous list
\&    [!]/pattern/    All names in @EXPORT and @EXPORT_OK which match
.Ve
.PP
A leading ! indicates that matching names should be deleted from the
list of names to import.  If the first specification is a deletion it
is treated as though preceded by :DEFAULT.  If you just want to import
extra names in addition to the default set you will still need to
include :DEFAULT explicitly.
.PP
e.g., \fIModule.pm\fR defines:
.PP
.Vb 3
\&    @EXPORT      = qw(A1 A2 A3 A4 A5);
\&    @EXPORT_OK   = qw(B1 B2 B3 B4 B5);
\&    %EXPORT_TAGS = (T1 => [qw(A1 A2 B1 B2)], T2 => [qw(A1 A2 B3 B4)]);
.Ve
.PP
Note that you cannot use tags in \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR.
.PP
Names in \s-1EXPORT_TAGS\s0 must also appear in \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR.
.PP
An application using Module can say something like:
.PP
.Vb 1
\&    use Module qw(:DEFAULT :T2 !B3 A3);
.Ve
.PP
Other examples include:
.PP
.Vb 2
\&    use Socket qw(!/^[AP]F_/ !SOMAXCONN !SOL_SOCKET);
\&    use POSIX  qw(:errno_h :termios_h !TCSADRAIN !/^EXIT/);
.Ve
.PP
Remember that most patterns (using //) will need to be anchored
with a leading ^, e.g., \f(CW\*(C`/^EXIT/\*(C'\fR rather than \f(CW\*(C`/EXIT/\*(C'\fR.
.PP
You can say \f(CW\*(C`BEGIN { $Exporter::Verbose=1 }\*(C'\fR to see how the
specifications are being processed and what is actually being imported
into modules.
.SS "Exporting Without Using Exporter's import Method"
.IX Subsection "Exporting Without Using Exporter's import Method"
Exporter has a special method, 'export_to_level' which is used in situations
where you can't directly call Exporter's
import method.  The export_to_level
method looks like:
.PP
.Vb 3
\&    MyPackage\->export_to_level(
\&        $where_to_export, $package, @what_to_export
\&    );
.Ve
.PP
where \f(CW$where_to_export\fR is an integer telling how far up the calling stack
to export your symbols, and \f(CW@what_to_export\fR is an array telling what
symbols *to* export (usually this is \f(CW@_\fR).  The \f(CW$package\fR argument is
currently unused.
.PP
For example, suppose that you have a module, A, which already has an
import function:
.PP
.Vb 1
\&    package A;
\&
\&    @ISA = qw(Exporter);
\&    @EXPORT_OK = qw ($b);
\&
\&    sub import
\&    {
\&        $A::b = 1;     # not a very useful import method
\&    }
.Ve
.PP
and you want to Export symbol \f(CW$A::b\fR back to the module that called 
package A.  Since Exporter relies on the import method to work, via 
inheritance, as it stands \fIExporter::import()\fR will never get called. 
Instead, say the following:
.PP
.Vb 3
\&    package A;
\&    @ISA = qw(Exporter);
\&    @EXPORT_OK = qw ($b);
\&
\&    sub import
\&    {
\&        $A::b = 1;
\&        A\->export_to_level(1, @_);
\&    }
.Ve
.PP
This will export the symbols one level 'above' the current package \- ie: to 
the program or module that used package A.
.PP
Note: Be careful not to modify \f(CW@_\fR at all before you call export_to_level
\&\- or people using your package will get very unexplained results!
.SS "Exporting Without Inheriting from Exporter"
.IX Subsection "Exporting Without Inheriting from Exporter"
By including Exporter in your \f(CW@ISA\fR you inherit an Exporter's \fIimport()\fR method
but you also inherit several other helper methods which you probably don't
want.  To avoid this you can do
.PP
.Vb 2
\&  package YourModule;
\&  use Exporter qw( import );
.Ve
.PP
which will export Exporter's own \fIimport()\fR method into YourModule.
Everything will work as before but you won't need to include Exporter in
\&\f(CW@YourModule::ISA\fR.
.PP
Note: This feature was introduced in version 5.57
of Exporter, released with perl 5.8.3.
.SS "Module Version Checking"
.IX Subsection "Module Version Checking"
The Exporter module will convert an attempt to import a number from a
module into a call to \f(CW\*(C`$module_name\->VERSION($value)\*(C'\fR.  This can
be used to validate that the version of the module being used is
greater than or equal to the required version.
.PP
For historical reasons, Exporter supplies a \f(CW\*(C`require_version\*(C'\fR method that
simply delegates to \f(CW\*(C`VERSION\*(C'\fR.  Originally, before \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR
existed, Exporter would call \f(CW\*(C`require_version\*(C'\fR.
.PP
Since the \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR method treats the \f(CW$VERSION\fR number as
a simple numeric value it will regard version 1.10 as lower than
1.9.  For this reason it is strongly recommended that you use numbers
with at least two decimal places, e.g., 1.09.
.SS "Managing Unknown Symbols"
.IX Subsection "Managing Unknown Symbols"
In some situations you may want to prevent certain symbols from being
exported.  Typically this applies to extensions which have functions
or constants that may not exist on some systems.
.PP
The names of any symbols that cannot be exported should be listed
in the \f(CW@EXPORT_FAIL\fR array.
.PP
If a module attempts to import any of these symbols the Exporter
will give the module an opportunity to handle the situation before
generating an error.  The Exporter will call an export_fail method
with a list of the failed symbols:
.PP
.Vb 1
\&  @failed_symbols = $module_name\->export_fail(@failed_symbols);
.Ve
.PP
If the \f(CW\*(C`export_fail\*(C'\fR method returns an empty list then no error is
recorded and all the requested symbols are exported.  If the returned
list is not empty then an error is generated for each symbol and the
export fails.  The Exporter provides a default \f(CW\*(C`export_fail\*(C'\fR method which
simply returns the list unchanged.
.PP
Uses for the \f(CW\*(C`export_fail\*(C'\fR method include giving better error messages
for some symbols and performing lazy architectural checks (put more
symbols into \f(CW@EXPORT_FAIL\fR by default and then take them out if someone
actually tries to use them and an expensive check shows that they are
usable on that platform).
.SS "Tag Handling Utility Functions"
.IX Subsection "Tag Handling Utility Functions"
Since the symbols listed within \f(CW%EXPORT_TAGS\fR must also appear in either
\&\f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR, two utility functions are provided which allow
you to easily add tagged sets of symbols to \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR:
.PP
.Vb 1
\&  %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);
\&
\&  Exporter::export_tags(\*(Aqfoo\*(Aq);     # add aa, bb and cc to @EXPORT
\&  Exporter::export_ok_tags(\*(Aqbar\*(Aq);  # add aa, cc and dd to @EXPORT_OK
.Ve
.PP
Any names which are not tags are added to \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR
unchanged but will trigger a warning (with \f(CW\*(C`\-w\*(C'\fR) to avoid misspelt tags
names being silently added to \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR.  Future versions
may make this a fatal error.
.SS "Generating Combined Tags"
.IX Subsection "Generating Combined Tags"
If several symbol categories exist in \f(CW%EXPORT_TAGS\fR, it's usually
useful to create the utility \*(L":all\*(R" to simplify \*(L"use\*(R" statements.
.PP
The simplest way to do this is:
.PP
.Vb 1
\&  %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);
\&
\&  # add all the other ":class" tags to the ":all" class,
\&  # deleting duplicates
\&  {
\&    my %seen;
\&
\&    push @{$EXPORT_TAGS{all}},
\&      grep {!$seen{$_}++} @{$EXPORT_TAGS{$_}} foreach keys %EXPORT_TAGS;
\&  }
.Ve
.PP
\&\fI\s-1CGI\s0.pm\fR creates an \*(L":all\*(R" tag which contains some (but not really
all) of its categories.  That could be done with one small
change:
.PP
.Vb 4
\&  # add some of the other ":class" tags to the ":all" class,
\&  # deleting duplicates
\&  {
\&    my %seen;
\&
\&    push @{$EXPORT_TAGS{all}},
\&      grep {!$seen{$_}++} @{$EXPORT_TAGS{$_}}
\&        foreach qw/html2 html3 netscape form cgi internal/;
\&  }
.Ve
.PP
Note that the tag names in \f(CW%EXPORT_TAGS\fR don't have the leading ':'.
.ie n .SS """AUTOLOAD""ed Constants"
.el .SS "\f(CWAUTOLOAD\fPed Constants"
.IX Subsection "AUTOLOADed Constants"
Many modules make use of \f(CW\*(C`AUTOLOAD\*(C'\fRing for constant subroutines to
avoid having to compile and waste memory on rarely used values (see
perlsub for details on constant subroutines).  Calls to such
constant subroutines are not optimized away at compile time because
they can't be checked at compile time for constancy.
.PP
Even if a prototype is available at compile time, the body of the
subroutine is not (it hasn't been \f(CW\*(C`AUTOLOAD\*(C'\fRed yet).  perl needs to
examine both the \f(CW\*(C`()\*(C'\fR prototype and the body of a subroutine at
compile time to detect that it can safely replace calls to that
subroutine with the constant value.
.PP
A workaround for this is to call the constants once in a \f(CW\*(C`BEGIN\*(C'\fR block:
.PP
.Vb 1
\&   package My ;
\&
\&   use Socket ;
\&
\&   foo( SO_LINGER );  ## SO_LINGER NOT optimized away; called at runtime
\&   BEGIN { SO_LINGER }
\&   foo( SO_LINGER );  ## SO_LINGER optimized away at compile time.
.Ve
.PP
This forces the \f(CW\*(C`AUTOLOAD\*(C'\fR for \f(CW\*(C`SO_LINGER\*(C'\fR to take place before
\&\s-1SO_LINGER\s0 is encountered later in \f(CW\*(C`My\*(C'\fR package.
.PP
If you are writing a package that \f(CW\*(C`AUTOLOAD\*(C'\fRs, consider forcing
an \f(CW\*(C`AUTOLOAD\*(C'\fR for any constants explicitly imported by other packages
or which are usually used when your package is \f(CW\*(C`use\*(C'\fRd.
.SH "Good Practices"
.IX Header "Good Practices"
.ie n .SS "Declaring @EXPORT_OK and Friends"
.el .SS "Declaring \f(CW@EXPORT_OK\fP and Friends"
.IX Subsection "Declaring @EXPORT_OK and Friends"
When using \f(CW\*(C`Exporter\*(C'\fR with the standard \f(CW\*(C`strict\*(C'\fR and \f(CW\*(C`warnings\*(C'\fR
pragmas, the \f(CW\*(C`our\*(C'\fR keyword is needed to declare the package
variables \f(CW@EXPORT_OK\fR, \f(CW@EXPORT\fR, \f(CW@ISA\fR, etc.
.PP
.Vb 2
\&  our @ISA = qw(Exporter);
\&  our @EXPORT_OK = qw(munge frobnicate);
.Ve
.PP
If backward compatibility for Perls under 5.6 is important,
one must write instead a \f(CW\*(C`use vars\*(C'\fR statement.
.PP
.Vb 3
\&  use vars qw(@ISA @EXPORT_OK);
\&  @ISA = qw(Exporter);
\&  @EXPORT_OK = qw(munge frobnicate);
.Ve
.SS "Playing Safe"
.IX Subsection "Playing Safe"
There are some caveats with the use of runtime statements
like \f(CW\*(C`require Exporter\*(C'\fR and the assignment to package
variables, which can very subtle for the unaware programmer.
This may happen for instance with mutually recursive
modules, which are affected by the time the relevant
constructions are executed.
.PP
The ideal (but a bit ugly) way to never have to think
about that is to use \f(CW\*(C`BEGIN\*(C'\fR blocks.  So the first part
of the \*(L"\s-1SYNOPSIS\*(R"\s0 code could be rewritten as:
.PP
.Vb 1
\&  package YourModule;
\&
\&  use strict;
\&  use warnings;
\&
\&  our (@ISA, @EXPORT_OK);
\&  BEGIN {
\&     require Exporter;
\&     @ISA = qw(Exporter);
\&     @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
\&  }
.Ve
.PP
The \f(CW\*(C`BEGIN\*(C'\fR will assure that the loading of \fIExporter.pm\fR
and the assignments to \f(CW@ISA\fR and \f(CW@EXPORT_OK\fR happen
immediately, leaving no room for something to get awry
or just plain wrong.
.PP
With respect to loading \f(CW\*(C`Exporter\*(C'\fR and inheriting, there
are alternatives with the use of modules like \f(CW\*(C`base\*(C'\fR and \f(CW\*(C`parent\*(C'\fR.
.PP
.Vb 3
\&  use base qw( Exporter );
\&  # or
\&  use parent qw( Exporter );
.Ve
.PP
Any of these statements are nice replacements for
\&\f(CW\*(C`BEGIN { require Exporter; @ISA = qw(Exporter); }\*(C'\fR
with the same compile-time effect.  The basic difference
is that \f(CW\*(C`base\*(C'\fR code interacts with declared \f(CW\*(C`fields\*(C'\fR
while \f(CW\*(C`parent\*(C'\fR is a streamlined version of the older
\&\f(CW\*(C`base\*(C'\fR code to just establish the IS-A relationship.
.PP
For more details, see the documentation and code of
base and parent.
.PP
Another thorough remedy to that runtime
vs. compile-time trap is to use Exporter::Easy,
which is a wrapper of Exporter that allows all
boilerplate code at a single gulp in the
use statement.
.PP
.Vb 5
\&   use Exporter::Easy (
\&       OK => [ qw(munge frobnicate) ],
\&   );
\&   # @ISA setup is automatic
\&   # all assignments happen at compile time
.Ve
.SS "What Not to Export"
.IX Subsection "What Not to Export"
You have been warned already in \*(L"Selecting What to Export\*(R"
to not export:
.IP "\(bu" 4
method names (because you don't need to
and that's likely to not do what you want),
.IP "\(bu" 4
anything by default (because you don't want to surprise your users...
badly)
.IP "\(bu" 4
anything you don't need to (because less is more)
.PP
There's one more item to add to this list.  Do \fBnot\fR
export variable names.  Just because \f(CW\*(C`Exporter\*(C'\fR lets you
do that, it does not mean you should.
.PP
.Vb 1
\&  @EXPORT_OK = qw( $svar @avar %hvar ); # DON\*(AqT!
.Ve
.PP
Exporting variables is not a good idea.  They can
change under the hood, provoking horrible
effects at-a-distance, that are too hard to track
and to fix.  Trust me: they are not worth it.
.PP
To provide the capability to set/get class-wide
settings, it is best instead to provide accessors
as subroutines or class methods instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`Exporter\*(C'\fR is definitely not the only module with
symbol exporter capabilities.  At \s-1CPAN,\s0 you may find
a bunch of them.  Some are lighter.  Some
provide improved APIs and features.  Peek the one
that fits your needs.  The following is
a sample list of such modules.
.PP
.Vb 6
\&    Exporter::Easy
\&    Exporter::Lite
\&    Exporter::Renaming
\&    Exporter::Tidy
\&    Sub::Exporter / Sub::Installer
\&    Perl6::Export / Perl6::Export::Attrs
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software.  You can redistribute it
and/or modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Exporter5.16.3pm                             0100644 0001750 0001750 00000054502 12566207433 023431  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Exporter 3pm"
.TH Exporter 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Exporter \- Implements default import method for modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In module \fIYourModule.pm\fR:
.PP
.Vb 4
\&  package YourModule;
\&  require Exporter;
\&  @ISA = qw(Exporter);
\&  @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
.Ve
.PP
or
.PP
.Vb 3
\&  package YourModule;
\&  use Exporter \*(Aqimport\*(Aq; # gives you Exporter\*(Aqs import() method directly
\&  @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
.Ve
.PP
In other files which wish to use \f(CW\*(C`YourModule\*(C'\fR:
.PP
.Vb 2
\&  use YourModule qw(frobnicate);      # import listed symbols
\&  frobnicate ($left, $right)          # calls YourModule::frobnicate
.Ve
.PP
Take a look at \*(L"Good Practices\*(R" for some variants
you will like to use in modern Perl code.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Exporter module implements an \f(CW\*(C`import\*(C'\fR method which allows a module
to export functions and variables to its users' namespaces. Many modules
use Exporter rather than implementing their own \f(CW\*(C`import\*(C'\fR method because
Exporter provides a highly flexible interface, with an implementation optimised
for the common case.
.PP
Perl automatically calls the \f(CW\*(C`import\*(C'\fR method when processing a
\&\f(CW\*(C`use\*(C'\fR statement for a module. Modules and \f(CW\*(C`use\*(C'\fR are documented
in perlfunc and perlmod. Understanding the concept of
modules and how the \f(CW\*(C`use\*(C'\fR statement operates is important to
understanding the Exporter.
.SS "How to Export"
.IX Subsection "How to Export"
The arrays \f(CW@EXPORT\fR and \f(CW@EXPORT_OK\fR in a module hold lists of
symbols that are going to be exported into the users name space by
default, or which they can request to be exported, respectively.  The
symbols can represent functions, scalars, arrays, hashes, or typeglobs.
The symbols must be given by full name with the exception that the
ampersand in front of a function is optional, e.g.
.PP
.Vb 2
\&    @EXPORT    = qw(afunc $scalar @array);   # afunc is a function
\&    @EXPORT_OK = qw(&bfunc %hash *typeglob); # explicit prefix on &bfunc
.Ve
.PP
If you are only exporting function names it is recommended to omit the
ampersand, as the implementation is faster this way.
.SS "Selecting What To Export"
.IX Subsection "Selecting What To Export"
Do \fBnot\fR export method names!
.PP
Do \fBnot\fR export anything else by default without a good reason!
.PP
Exports pollute the namespace of the module user.  If you must export
try to use \f(CW@EXPORT_OK\fR in preference to \f(CW@EXPORT\fR and avoid short or
common symbol names to reduce the risk of name clashes.
.PP
Generally anything not exported is still accessible from outside the
module using the \f(CW\*(C`YourModule::item_name\*(C'\fR (or \f(CW\*(C`$blessed_ref\->method\*(C'\fR)
syntax.  By convention you can use a leading underscore on names to
informally indicate that they are 'internal' and not for public use.
.PP
(It is actually possible to get private functions by saying:
.PP
.Vb 3
\&  my $subref = sub { ... };
\&  $subref\->(@args);            # Call it as a function
\&  $obj\->$subref(@args);        # Use it as a method
.Ve
.PP
However if you use them for methods it is up to you to figure out
how to make inheritance work.)
.PP
As a general rule, if the module is trying to be object oriented
then export nothing. If it's just a collection of functions then
\&\f(CW@EXPORT_OK\fR anything but use \f(CW@EXPORT\fR with caution. For function and
method names use barewords in preference to names prefixed with
ampersands for the export lists.
.PP
Other module design guidelines can be found in perlmod.
.SS "How to Import"
.IX Subsection "How to Import"
In other files which wish to use your module there are three basic ways for
them to load your module and import its symbols:
.ie n .IP """use YourModule;""" 4
.el .IP "\f(CWuse YourModule;\fR" 4
.IX Item "use YourModule;"
This imports all the symbols from YourModule's \f(CW@EXPORT\fR into the namespace
of the \f(CW\*(C`use\*(C'\fR statement.
.ie n .IP """use YourModule ();""" 4
.el .IP "\f(CWuse YourModule ();\fR" 4
.IX Item "use YourModule ();"
This causes perl to load your module but does not import any symbols.
.ie n .IP """use YourModule qw(...);""" 4
.el .IP "\f(CWuse YourModule qw(...);\fR" 4
.IX Item "use YourModule qw(...);"
This imports only the symbols listed by the caller into their namespace.
All listed symbols must be in your \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR, else an error
occurs. The advanced export features of Exporter are accessed like this,
but with list entries that are syntactically distinct from symbol names.
.PP
Unless you want to use its advanced features, this is probably all you
need to know to use Exporter.
.SH "Advanced features"
.IX Header "Advanced features"
.SS "Specialised Import Lists"
.IX Subsection "Specialised Import Lists"
If any of the entries in an import list begins with !, : or / then
the list is treated as a series of specifications which either add to
or delete from the list of names to import. They are processed left to
right. Specifications are in the form:
.PP
.Vb 4
\&    [!]name         This name only
\&    [!]:DEFAULT     All names in @EXPORT
\&    [!]:tag         All names in $EXPORT_TAGS{tag} anonymous list
\&    [!]/pattern/    All names in @EXPORT and @EXPORT_OK which match
.Ve
.PP
A leading ! indicates that matching names should be deleted from the
list of names to import.  If the first specification is a deletion it
is treated as though preceded by :DEFAULT. If you just want to import
extra names in addition to the default set you will still need to
include :DEFAULT explicitly.
.PP
e.g., \fIModule.pm\fR defines:
.PP
.Vb 3
\&    @EXPORT      = qw(A1 A2 A3 A4 A5);
\&    @EXPORT_OK   = qw(B1 B2 B3 B4 B5);
\&    %EXPORT_TAGS = (T1 => [qw(A1 A2 B1 B2)], T2 => [qw(A1 A2 B3 B4)]);
\&
\&    Note that you cannot use tags in @EXPORT or @EXPORT_OK.
\&    Names in EXPORT_TAGS must also appear in @EXPORT or @EXPORT_OK.
.Ve
.PP
An application using Module can say something like:
.PP
.Vb 1
\&    use Module qw(:DEFAULT :T2 !B3 A3);
.Ve
.PP
Other examples include:
.PP
.Vb 2
\&    use Socket qw(!/^[AP]F_/ !SOMAXCONN !SOL_SOCKET);
\&    use POSIX  qw(:errno_h :termios_h !TCSADRAIN !/^EXIT/);
.Ve
.PP
Remember that most patterns (using //) will need to be anchored
with a leading ^, e.g., \f(CW\*(C`/^EXIT/\*(C'\fR rather than \f(CW\*(C`/EXIT/\*(C'\fR.
.PP
You can say \f(CW\*(C`BEGIN { $Exporter::Verbose=1 }\*(C'\fR to see how the
specifications are being processed and what is actually being imported
into modules.
.SS "Exporting without using Exporter's import method"
.IX Subsection "Exporting without using Exporter's import method"
Exporter has a special method, 'export_to_level' which is used in situations
where you can't directly call Exporter's import method. The export_to_level
method looks like:
.PP
.Vb 1
\&    MyPackage\->export_to_level($where_to_export, $package, @what_to_export);
.Ve
.PP
where \f(CW$where_to_export\fR is an integer telling how far up the calling stack
to export your symbols, and \f(CW@what_to_export\fR is an array telling what
symbols *to* export (usually this is \f(CW@_\fR).  The \f(CW$package\fR argument is
currently unused.
.PP
For example, suppose that you have a module, A, which already has an
import function:
.PP
.Vb 1
\&    package A;
\&
\&    @ISA = qw(Exporter);
\&    @EXPORT_OK = qw ($b);
\&
\&    sub import
\&    {
\&        $A::b = 1;     # not a very useful import method
\&    }
.Ve
.PP
and you want to Export symbol \f(CW$A::b\fR back to the module that called 
package A. Since Exporter relies on the import method to work, via 
inheritance, as it stands \fIExporter::import()\fR will never get called. 
Instead, say the following:
.PP
.Vb 3
\&    package A;
\&    @ISA = qw(Exporter);
\&    @EXPORT_OK = qw ($b);
\&
\&    sub import
\&    {
\&        $A::b = 1;
\&        A\->export_to_level(1, @_);
\&    }
.Ve
.PP
This will export the symbols one level 'above' the current package \- ie: to 
the program or module that used package A.
.PP
Note: Be careful not to modify \f(CW@_\fR at all before you call export_to_level
\&\- or people using your package will get very unexplained results!
.SS "Exporting without inheriting from Exporter"
.IX Subsection "Exporting without inheriting from Exporter"
By including Exporter in your \f(CW@ISA\fR you inherit an Exporter's \fIimport()\fR method
but you also inherit several other helper methods which you probably don't
want. To avoid this you can do
.PP
.Vb 2
\&  package YourModule;
\&  use Exporter qw( import );
.Ve
.PP
which will export Exporter's own \fIimport()\fR method into YourModule.
Everything will work as before but you won't need to include Exporter in
\&\f(CW@YourModule::ISA\fR.
.PP
Note: This feature was introduced in version 5.57
of Exporter, released with perl 5.8.3.
.SS "Module Version Checking"
.IX Subsection "Module Version Checking"
The Exporter module will convert an attempt to import a number from a
module into a call to \f(CW\*(C`$module_name\->require_version($value)\*(C'\fR. This can
be used to validate that the version of the module being used is
greater than or equal to the required version.
.PP
The Exporter module supplies a default \f(CW\*(C`require_version\*(C'\fR method which
checks the value of \f(CW$VERSION\fR in the exporting module.
.PP
Since the default \f(CW\*(C`require_version\*(C'\fR method treats the \f(CW$VERSION\fR number as
a simple numeric value it will regard version 1.10 as lower than
1.9. For this reason it is strongly recommended that you use numbers
with at least two decimal places, e.g., 1.09.
.SS "Managing Unknown Symbols"
.IX Subsection "Managing Unknown Symbols"
In some situations you may want to prevent certain symbols from being
exported. Typically this applies to extensions which have functions
or constants that may not exist on some systems.
.PP
The names of any symbols that cannot be exported should be listed
in the \f(CW@EXPORT_FAIL\fR array.
.PP
If a module attempts to import any of these symbols the Exporter
will give the module an opportunity to handle the situation before
generating an error. The Exporter will call an export_fail method
with a list of the failed symbols:
.PP
.Vb 1
\&  @failed_symbols = $module_name\->export_fail(@failed_symbols);
.Ve
.PP
If the \f(CW\*(C`export_fail\*(C'\fR method returns an empty list then no error is
recorded and all the requested symbols are exported. If the returned
list is not empty then an error is generated for each symbol and the
export fails. The Exporter provides a default \f(CW\*(C`export_fail\*(C'\fR method which
simply returns the list unchanged.
.PP
Uses for the \f(CW\*(C`export_fail\*(C'\fR method include giving better error messages
for some symbols and performing lazy architectural checks (put more
symbols into \f(CW@EXPORT_FAIL\fR by default and then take them out if someone
actually tries to use them and an expensive check shows that they are
usable on that platform).
.SS "Tag Handling Utility Functions"
.IX Subsection "Tag Handling Utility Functions"
Since the symbols listed within \f(CW%EXPORT_TAGS\fR must also appear in either
\&\f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR, two utility functions are provided which allow
you to easily add tagged sets of symbols to \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR:
.PP
.Vb 1
\&  %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);
\&
\&  Exporter::export_tags(\*(Aqfoo\*(Aq);     # add aa, bb and cc to @EXPORT
\&  Exporter::export_ok_tags(\*(Aqbar\*(Aq);  # add aa, cc and dd to @EXPORT_OK
.Ve
.PP
Any names which are not tags are added to \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR
unchanged but will trigger a warning (with \f(CW\*(C`\-w\*(C'\fR) to avoid misspelt tags
names being silently added to \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR. Future versions
may make this a fatal error.
.SS "Generating combined tags"
.IX Subsection "Generating combined tags"
If several symbol categories exist in \f(CW%EXPORT_TAGS\fR, it's usually
useful to create the utility \*(L":all\*(R" to simplify \*(L"use\*(R" statements.
.PP
The simplest way to do this is:
.PP
.Vb 1
\&  %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);
\&
\&  # add all the other ":class" tags to the ":all" class,
\&  # deleting duplicates
\&  {
\&    my %seen;
\&
\&    push @{$EXPORT_TAGS{all}},
\&      grep {!$seen{$_}++} @{$EXPORT_TAGS{$_}} foreach keys %EXPORT_TAGS;
\&  }
.Ve
.PP
\&\fI\s-1CGI\s0.pm\fR creates an \*(L":all\*(R" tag which contains some (but not really
all) of its categories.  That could be done with one small
change:
.PP
.Vb 4
\&  # add some of the other ":class" tags to the ":all" class,
\&  # deleting duplicates
\&  {
\&    my %seen;
\&
\&    push @{$EXPORT_TAGS{all}},
\&      grep {!$seen{$_}++} @{$EXPORT_TAGS{$_}}
\&        foreach qw/html2 html3 netscape form cgi internal/;
\&  }
.Ve
.PP
Note that the tag names in \f(CW%EXPORT_TAGS\fR don't have the leading ':'.
.ie n .SS """AUTOLOAD""ed Constants"
.el .SS "\f(CWAUTOLOAD\fPed Constants"
.IX Subsection "AUTOLOADed Constants"
Many modules make use of \f(CW\*(C`AUTOLOAD\*(C'\fRing for constant subroutines to
avoid having to compile and waste memory on rarely used values (see
perlsub for details on constant subroutines).  Calls to such
constant subroutines are not optimized away at compile time because
they can't be checked at compile time for constancy.
.PP
Even if a prototype is available at compile time, the body of the
subroutine is not (it hasn't been \f(CW\*(C`AUTOLOAD\*(C'\fRed yet). perl needs to
examine both the \f(CW\*(C`()\*(C'\fR prototype and the body of a subroutine at
compile time to detect that it can safely replace calls to that
subroutine with the constant value.
.PP
A workaround for this is to call the constants once in a \f(CW\*(C`BEGIN\*(C'\fR block:
.PP
.Vb 1
\&   package My ;
\&
\&   use Socket ;
\&
\&   foo( SO_LINGER );     ## SO_LINGER NOT optimized away; called at runtime
\&   BEGIN { SO_LINGER }
\&   foo( SO_LINGER );     ## SO_LINGER optimized away at compile time.
.Ve
.PP
This forces the \f(CW\*(C`AUTOLOAD\*(C'\fR for \f(CW\*(C`SO_LINGER\*(C'\fR to take place before
\&\s-1SO_LINGER\s0 is encountered later in \f(CW\*(C`My\*(C'\fR package.
.PP
If you are writing a package that \f(CW\*(C`AUTOLOAD\*(C'\fRs, consider forcing
an \f(CW\*(C`AUTOLOAD\*(C'\fR for any constants explicitly imported by other packages
or which are usually used when your package is \f(CW\*(C`use\*(C'\fRd.
.SH "Good Practices"
.IX Header "Good Practices"
.ie n .SS "Declaring @EXPORT_OK and Friends"
.el .SS "Declaring \f(CW@EXPORT_OK\fP and Friends"
.IX Subsection "Declaring @EXPORT_OK and Friends"
When using \f(CW\*(C`Exporter\*(C'\fR with the standard \f(CW\*(C`strict\*(C'\fR and \f(CW\*(C`warnings\*(C'\fR
pragmas, the \f(CW\*(C`our\*(C'\fR keyword is needed to declare the package
variables \f(CW@EXPORT_OK\fR, \f(CW@EXPORT\fR, \f(CW@ISA\fR, etc.
.PP
.Vb 2
\&  our @ISA = qw(Exporter);
\&  our @EXPORT_OK = qw(munge frobnicate);
.Ve
.PP
If backward compatibility for Perls under 5.6 is important,
one must write instead a \f(CW\*(C`use vars\*(C'\fR statement.
.PP
.Vb 3
\&  use vars qw(@ISA @EXPORT_OK);
\&  @ISA = qw(Exporter);
\&  @EXPORT_OK = qw(munge frobnicate);
.Ve
.SS "Playing Safe"
.IX Subsection "Playing Safe"
There are some caveats with the use of runtime statements
like \f(CW\*(C`require Exporter\*(C'\fR and the assignment to package
variables, which can very subtle for the unaware programmer.
This may happen for instance with mutually recursive
modules, which are affected by the time the relevant
constructions are executed.
.PP
The ideal (but a bit ugly) way to never have to think
about that is to use \f(CW\*(C`BEGIN\*(C'\fR blocks. So the first part
of the \*(L"\s-1SYNOPSIS\s0\*(R" code could be rewritten as:
.PP
.Vb 1
\&  package YourModule;
\&
\&  use strict;
\&  use warnings;
\&
\&  our (@ISA, @EXPORT_OK);
\&  BEGIN {
\&     require Exporter;
\&     @ISA = qw(Exporter);
\&     @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
\&  }
.Ve
.PP
The \f(CW\*(C`BEGIN\*(C'\fR will assure that the loading of \fIExporter.pm\fR
and the assignments to \f(CW@ISA\fR and \f(CW@EXPORT_OK\fR happen
immediately, leaving no room for something to get awry
or just plain wrong.
.PP
With respect to loading \f(CW\*(C`Exporter\*(C'\fR and inheriting, there
are alternatives with the use of modules like \f(CW\*(C`base\*(C'\fR and \f(CW\*(C`parent\*(C'\fR.
.PP
.Vb 3
\&  use base qw( Exporter );
\&  # or
\&  use parent qw( Exporter );
.Ve
.PP
Any of these statements are nice replacements for
\&\f(CW\*(C`BEGIN { require Exporter; @ISA = qw(Exporter); }\*(C'\fR
with the same compile-time effect. The basic difference
is that \f(CW\*(C`base\*(C'\fR code interacts with declared \f(CW\*(C`fields\*(C'\fR
while \f(CW\*(C`parent\*(C'\fR is a streamlined version of the older
\&\f(CW\*(C`base\*(C'\fR code to just establish the IS-A relationship.
.PP
For more details, see the documentation and code of
base and parent.
.PP
Another thorough remedy to that runtime vs. 
compile-time trap is to use Exporter::Easy,
which is a wrapper of Exporter that allows all
boilerplate code at a single gulp in the
use statement.
.PP
.Vb 5
\&   use Exporter::Easy (
\&       OK => [ qw(munge frobnicate) ],
\&   );
\&   # @ISA setup is automatic
\&   # all assignments happen at compile time
.Ve
.SS "What not to Export"
.IX Subsection "What not to Export"
You have been warned already in \*(L"Selecting What To Export\*(R"
to not export:
.IP "\(bu" 4
method names (because you don't need to
and that's likely to not do what you want),
.IP "\(bu" 4
anything by default (because you don't want to surprise your users...
badly)
.IP "\(bu" 4
anything you don't need to (because less is more)
.PP
There's one more item to add to this list. Do \fBnot\fR
export variable names. Just because \f(CW\*(C`Exporter\*(C'\fR lets you
do that, it does not mean you should.
.PP
.Vb 1
\&  @EXPORT_OK = qw( $svar @avar %hvar ); # DON\*(AqT!
.Ve
.PP
Exporting variables is not a good idea. They can
change under the hood, provoking horrible
effects at-a-distance, that are too hard to track
and to fix. Trust me: they are not worth it.
.PP
To provide the capability to set/get class-wide
settings, it is best instead to provide accessors
as subroutines or class methods instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`Exporter\*(C'\fR is definitely not the only module with
symbol exporter capabilities. At \s-1CPAN\s0, you may find
a bunch of them. Some are lighter. Some
provide improved APIs and features. Peek the one
that fits your needs. The following is
a sample list of such modules.
.PP
.Vb 6
\&    Exporter::Easy
\&    Exporter::Lite
\&    Exporter::Renaming
\&    Exporter::Tidy
\&    Sub::Exporter / Sub::Installer
\&    Perl6::Export / Perl6::Export::Attrs
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software. You can redistribute it
and/or modify it under the same terms as Perl itself.
                                                                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Exporter5.18.3pm                             0100644 0001750 0001750 00000055276 12566207454 023447  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Exporter 3pm"
.TH Exporter 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Exporter \- Implements default import method for modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
In module \fIYourModule.pm\fR:
.PP
.Vb 4
\&  package YourModule;
\&  require Exporter;
\&  @ISA = qw(Exporter);
\&  @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
.Ve
.PP
or
.PP
.Vb 3
\&  package YourModule;
\&  use Exporter \*(Aqimport\*(Aq; # gives you Exporter\*(Aqs import() method directly
\&  @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
.Ve
.PP
In other files which wish to use \f(CW\*(C`YourModule\*(C'\fR:
.PP
.Vb 2
\&  use YourModule qw(frobnicate);      # import listed symbols
\&  frobnicate ($left, $right)          # calls YourModule::frobnicate
.Ve
.PP
Take a look at \*(L"Good Practices\*(R" for some variants
you will like to use in modern Perl code.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The Exporter module implements an \f(CW\*(C`import\*(C'\fR method which allows a module
to export functions and variables to its users' namespaces.  Many modules
use Exporter rather than implementing their own \f(CW\*(C`import\*(C'\fR method because
Exporter provides a highly flexible interface, with an implementation optimised
for the common case.
.PP
Perl automatically calls the \f(CW\*(C`import\*(C'\fR method when processing a
\&\f(CW\*(C`use\*(C'\fR statement for a module.  Modules and \f(CW\*(C`use\*(C'\fR are documented
in perlfunc and perlmod.  Understanding the concept of
modules and how the \f(CW\*(C`use\*(C'\fR statement operates is important to
understanding the Exporter.
.SS "How to Export"
.IX Subsection "How to Export"
The arrays \f(CW@EXPORT\fR and \f(CW@EXPORT_OK\fR in a module hold lists of
symbols that are going to be exported into the users name space by
default, or which they can request to be exported, respectively.  The
symbols can represent functions, scalars, arrays, hashes, or typeglobs.
The symbols must be given by full name with the exception that the
ampersand in front of a function is optional, e.g.
.PP
.Vb 2
\&    @EXPORT    = qw(afunc $scalar @array);   # afunc is a function
\&    @EXPORT_OK = qw(&bfunc %hash *typeglob); # explicit prefix on &bfunc
.Ve
.PP
If you are only exporting function names it is recommended to omit the
ampersand, as the implementation is faster this way.
.SS "Selecting What to Export"
.IX Subsection "Selecting What to Export"
Do \fBnot\fR export method names!
.PP
Do \fBnot\fR export anything else by default without a good reason!
.PP
Exports pollute the namespace of the module user.  If you must export
try to use \f(CW@EXPORT_OK\fR in preference to \f(CW@EXPORT\fR and avoid short or
common symbol names to reduce the risk of name clashes.
.PP
Generally anything not exported is still accessible from outside the
module using the \f(CW\*(C`YourModule::item_name\*(C'\fR (or \f(CW\*(C`$blessed_ref\->method\*(C'\fR)
syntax.  By convention you can use a leading underscore on names to
informally indicate that they are 'internal' and not for public use.
.PP
(It is actually possible to get private functions by saying:
.PP
.Vb 3
\&  my $subref = sub { ... };
\&  $subref\->(@args);            # Call it as a function
\&  $obj\->$subref(@args);        # Use it as a method
.Ve
.PP
However if you use them for methods it is up to you to figure out
how to make inheritance work.)
.PP
As a general rule, if the module is trying to be object oriented
then export nothing.  If it's just a collection of functions then
\&\f(CW@EXPORT_OK\fR anything but use \f(CW@EXPORT\fR with caution.  For function and
method names use barewords in preference to names prefixed with
ampersands for the export lists.
.PP
Other module design guidelines can be found in perlmod.
.SS "How to Import"
.IX Subsection "How to Import"
In other files which wish to use your module there are three basic ways for
them to load your module and import its symbols:
.ie n .IP """use YourModule;""" 4
.el .IP "\f(CWuse YourModule;\fR" 4
.IX Item "use YourModule;"
This imports all the symbols from YourModule's \f(CW@EXPORT\fR into the namespace
of the \f(CW\*(C`use\*(C'\fR statement.
.ie n .IP """use YourModule ();""" 4
.el .IP "\f(CWuse YourModule ();\fR" 4
.IX Item "use YourModule ();"
This causes perl to load your module but does not import any symbols.
.ie n .IP """use YourModule qw(...);""" 4
.el .IP "\f(CWuse YourModule qw(...);\fR" 4
.IX Item "use YourModule qw(...);"
This imports only the symbols listed by the caller into their namespace.
All listed symbols must be in your \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR, else an error
occurs.  The advanced export features of Exporter are accessed like this,
but with list entries that are syntactically distinct from symbol names.
.PP
Unless you want to use its advanced features, this is probably all you
need to know to use Exporter.
.SH "Advanced Features"
.IX Header "Advanced Features"
.SS "Specialised Import Lists"
.IX Subsection "Specialised Import Lists"
If any of the entries in an import list begins with !, : or / then
the list is treated as a series of specifications which either add to
or delete from the list of names to import.  They are processed left to
right. Specifications are in the form:
.PP
.Vb 4
\&    [!]name         This name only
\&    [!]:DEFAULT     All names in @EXPORT
\&    [!]:tag         All names in $EXPORT_TAGS{tag} anonymous list
\&    [!]/pattern/    All names in @EXPORT and @EXPORT_OK which match
.Ve
.PP
A leading ! indicates that matching names should be deleted from the
list of names to import.  If the first specification is a deletion it
is treated as though preceded by :DEFAULT.  If you just want to import
extra names in addition to the default set you will still need to
include :DEFAULT explicitly.
.PP
e.g., \fIModule.pm\fR defines:
.PP
.Vb 3
\&    @EXPORT      = qw(A1 A2 A3 A4 A5);
\&    @EXPORT_OK   = qw(B1 B2 B3 B4 B5);
\&    %EXPORT_TAGS = (T1 => [qw(A1 A2 B1 B2)], T2 => [qw(A1 A2 B3 B4)]);
.Ve
.PP
Note that you cannot use tags in \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR.
.PP
Names in \s-1EXPORT_TAGS\s0 must also appear in \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR.
.PP
An application using Module can say something like:
.PP
.Vb 1
\&    use Module qw(:DEFAULT :T2 !B3 A3);
.Ve
.PP
Other examples include:
.PP
.Vb 2
\&    use Socket qw(!/^[AP]F_/ !SOMAXCONN !SOL_SOCKET);
\&    use POSIX  qw(:errno_h :termios_h !TCSADRAIN !/^EXIT/);
.Ve
.PP
Remember that most patterns (using //) will need to be anchored
with a leading ^, e.g., \f(CW\*(C`/^EXIT/\*(C'\fR rather than \f(CW\*(C`/EXIT/\*(C'\fR.
.PP
You can say \f(CW\*(C`BEGIN { $Exporter::Verbose=1 }\*(C'\fR to see how the
specifications are being processed and what is actually being imported
into modules.
.SS "Exporting Without Using Exporter's import Method"
.IX Subsection "Exporting Without Using Exporter's import Method"
Exporter has a special method, 'export_to_level' which is used in situations
where you can't directly call Exporter's
import method.  The export_to_level
method looks like:
.PP
.Vb 3
\&    MyPackage\->export_to_level(
\&        $where_to_export, $package, @what_to_export
\&    );
.Ve
.PP
where \f(CW$where_to_export\fR is an integer telling how far up the calling stack
to export your symbols, and \f(CW@what_to_export\fR is an array telling what
symbols *to* export (usually this is \f(CW@_\fR).  The \f(CW$package\fR argument is
currently unused.
.PP
For example, suppose that you have a module, A, which already has an
import function:
.PP
.Vb 1
\&    package A;
\&
\&    @ISA = qw(Exporter);
\&    @EXPORT_OK = qw ($b);
\&
\&    sub import
\&    {
\&        $A::b = 1;     # not a very useful import method
\&    }
.Ve
.PP
and you want to Export symbol \f(CW$A::b\fR back to the module that called 
package A.  Since Exporter relies on the import method to work, via 
inheritance, as it stands \fIExporter::import()\fR will never get called. 
Instead, say the following:
.PP
.Vb 3
\&    package A;
\&    @ISA = qw(Exporter);
\&    @EXPORT_OK = qw ($b);
\&
\&    sub import
\&    {
\&        $A::b = 1;
\&        A\->export_to_level(1, @_);
\&    }
.Ve
.PP
This will export the symbols one level 'above' the current package \- ie: to 
the program or module that used package A.
.PP
Note: Be careful not to modify \f(CW@_\fR at all before you call export_to_level
\&\- or people using your package will get very unexplained results!
.SS "Exporting Without Inheriting from Exporter"
.IX Subsection "Exporting Without Inheriting from Exporter"
By including Exporter in your \f(CW@ISA\fR you inherit an Exporter's \fIimport()\fR method
but you also inherit several other helper methods which you probably don't
want.  To avoid this you can do
.PP
.Vb 2
\&  package YourModule;
\&  use Exporter qw( import );
.Ve
.PP
which will export Exporter's own \fIimport()\fR method into YourModule.
Everything will work as before but you won't need to include Exporter in
\&\f(CW@YourModule::ISA\fR.
.PP
Note: This feature was introduced in version 5.57
of Exporter, released with perl 5.8.3.
.SS "Module Version Checking"
.IX Subsection "Module Version Checking"
The Exporter module will convert an attempt to import a number from a
module into a call to \f(CW\*(C`$module_name\->VERSION($value)\*(C'\fR.  This can
be used to validate that the version of the module being used is
greater than or equal to the required version.
.PP
For historical reasons, Exporter supplies a \f(CW\*(C`require_version\*(C'\fR method that
simply delegates to \f(CW\*(C`VERSION\*(C'\fR.  Originally, before \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR
existed, Exporter would call \f(CW\*(C`require_version\*(C'\fR.
.PP
Since the \f(CW\*(C`UNIVERSAL::VERSION\*(C'\fR method treats the \f(CW$VERSION\fR number as
a simple numeric value it will regard version 1.10 as lower than
1.9.  For this reason it is strongly recommended that you use numbers
with at least two decimal places, e.g., 1.09.
.SS "Managing Unknown Symbols"
.IX Subsection "Managing Unknown Symbols"
In some situations you may want to prevent certain symbols from being
exported.  Typically this applies to extensions which have functions
or constants that may not exist on some systems.
.PP
The names of any symbols that cannot be exported should be listed
in the \f(CW@EXPORT_FAIL\fR array.
.PP
If a module attempts to import any of these symbols the Exporter
will give the module an opportunity to handle the situation before
generating an error.  The Exporter will call an export_fail method
with a list of the failed symbols:
.PP
.Vb 1
\&  @failed_symbols = $module_name\->export_fail(@failed_symbols);
.Ve
.PP
If the \f(CW\*(C`export_fail\*(C'\fR method returns an empty list then no error is
recorded and all the requested symbols are exported.  If the returned
list is not empty then an error is generated for each symbol and the
export fails.  The Exporter provides a default \f(CW\*(C`export_fail\*(C'\fR method which
simply returns the list unchanged.
.PP
Uses for the \f(CW\*(C`export_fail\*(C'\fR method include giving better error messages
for some symbols and performing lazy architectural checks (put more
symbols into \f(CW@EXPORT_FAIL\fR by default and then take them out if someone
actually tries to use them and an expensive check shows that they are
usable on that platform).
.SS "Tag Handling Utility Functions"
.IX Subsection "Tag Handling Utility Functions"
Since the symbols listed within \f(CW%EXPORT_TAGS\fR must also appear in either
\&\f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR, two utility functions are provided which allow
you to easily add tagged sets of symbols to \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR:
.PP
.Vb 1
\&  %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);
\&
\&  Exporter::export_tags(\*(Aqfoo\*(Aq);     # add aa, bb and cc to @EXPORT
\&  Exporter::export_ok_tags(\*(Aqbar\*(Aq);  # add aa, cc and dd to @EXPORT_OK
.Ve
.PP
Any names which are not tags are added to \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR
unchanged but will trigger a warning (with \f(CW\*(C`\-w\*(C'\fR) to avoid misspelt tags
names being silently added to \f(CW@EXPORT\fR or \f(CW@EXPORT_OK\fR.  Future versions
may make this a fatal error.
.SS "Generating Combined Tags"
.IX Subsection "Generating Combined Tags"
If several symbol categories exist in \f(CW%EXPORT_TAGS\fR, it's usually
useful to create the utility \*(L":all\*(R" to simplify \*(L"use\*(R" statements.
.PP
The simplest way to do this is:
.PP
.Vb 1
\&  %EXPORT_TAGS = (foo => [qw(aa bb cc)], bar => [qw(aa cc dd)]);
\&
\&  # add all the other ":class" tags to the ":all" class,
\&  # deleting duplicates
\&  {
\&    my %seen;
\&
\&    push @{$EXPORT_TAGS{all}},
\&      grep {!$seen{$_}++} @{$EXPORT_TAGS{$_}} foreach keys %EXPORT_TAGS;
\&  }
.Ve
.PP
\&\fI\s-1CGI\s0.pm\fR creates an \*(L":all\*(R" tag which contains some (but not really
all) of its categories.  That could be done with one small
change:
.PP
.Vb 4
\&  # add some of the other ":class" tags to the ":all" class,
\&  # deleting duplicates
\&  {
\&    my %seen;
\&
\&    push @{$EXPORT_TAGS{all}},
\&      grep {!$seen{$_}++} @{$EXPORT_TAGS{$_}}
\&        foreach qw/html2 html3 netscape form cgi internal/;
\&  }
.Ve
.PP
Note that the tag names in \f(CW%EXPORT_TAGS\fR don't have the leading ':'.
.ie n .SS """AUTOLOAD""ed Constants"
.el .SS "\f(CWAUTOLOAD\fPed Constants"
.IX Subsection "AUTOLOADed Constants"
Many modules make use of \f(CW\*(C`AUTOLOAD\*(C'\fRing for constant subroutines to
avoid having to compile and waste memory on rarely used values (see
perlsub for details on constant subroutines).  Calls to such
constant subroutines are not optimized away at compile time because
they can't be checked at compile time for constancy.
.PP
Even if a prototype is available at compile time, the body of the
subroutine is not (it hasn't been \f(CW\*(C`AUTOLOAD\*(C'\fRed yet).  perl needs to
examine both the \f(CW\*(C`()\*(C'\fR prototype and the body of a subroutine at
compile time to detect that it can safely replace calls to that
subroutine with the constant value.
.PP
A workaround for this is to call the constants once in a \f(CW\*(C`BEGIN\*(C'\fR block:
.PP
.Vb 1
\&   package My ;
\&
\&   use Socket ;
\&
\&   foo( SO_LINGER );  ## SO_LINGER NOT optimized away; called at runtime
\&   BEGIN { SO_LINGER }
\&   foo( SO_LINGER );  ## SO_LINGER optimized away at compile time.
.Ve
.PP
This forces the \f(CW\*(C`AUTOLOAD\*(C'\fR for \f(CW\*(C`SO_LINGER\*(C'\fR to take place before
\&\s-1SO_LINGER\s0 is encountered later in \f(CW\*(C`My\*(C'\fR package.
.PP
If you are writing a package that \f(CW\*(C`AUTOLOAD\*(C'\fRs, consider forcing
an \f(CW\*(C`AUTOLOAD\*(C'\fR for any constants explicitly imported by other packages
or which are usually used when your package is \f(CW\*(C`use\*(C'\fRd.
.SH "Good Practices"
.IX Header "Good Practices"
.ie n .SS "Declaring @EXPORT_OK and Friends"
.el .SS "Declaring \f(CW@EXPORT_OK\fP and Friends"
.IX Subsection "Declaring @EXPORT_OK and Friends"
When using \f(CW\*(C`Exporter\*(C'\fR with the standard \f(CW\*(C`strict\*(C'\fR and \f(CW\*(C`warnings\*(C'\fR
pragmas, the \f(CW\*(C`our\*(C'\fR keyword is needed to declare the package
variables \f(CW@EXPORT_OK\fR, \f(CW@EXPORT\fR, \f(CW@ISA\fR, etc.
.PP
.Vb 2
\&  our @ISA = qw(Exporter);
\&  our @EXPORT_OK = qw(munge frobnicate);
.Ve
.PP
If backward compatibility for Perls under 5.6 is important,
one must write instead a \f(CW\*(C`use vars\*(C'\fR statement.
.PP
.Vb 3
\&  use vars qw(@ISA @EXPORT_OK);
\&  @ISA = qw(Exporter);
\&  @EXPORT_OK = qw(munge frobnicate);
.Ve
.SS "Playing Safe"
.IX Subsection "Playing Safe"
There are some caveats with the use of runtime statements
like \f(CW\*(C`require Exporter\*(C'\fR and the assignment to package
variables, which can very subtle for the unaware programmer.
This may happen for instance with mutually recursive
modules, which are affected by the time the relevant
constructions are executed.
.PP
The ideal (but a bit ugly) way to never have to think
about that is to use \f(CW\*(C`BEGIN\*(C'\fR blocks.  So the first part
of the \*(L"\s-1SYNOPSIS\*(R"\s0 code could be rewritten as:
.PP
.Vb 1
\&  package YourModule;
\&
\&  use strict;
\&  use warnings;
\&
\&  our (@ISA, @EXPORT_OK);
\&  BEGIN {
\&     require Exporter;
\&     @ISA = qw(Exporter);
\&     @EXPORT_OK = qw(munge frobnicate);  # symbols to export on request
\&  }
.Ve
.PP
The \f(CW\*(C`BEGIN\*(C'\fR will assure that the loading of \fIExporter.pm\fR
and the assignments to \f(CW@ISA\fR and \f(CW@EXPORT_OK\fR happen
immediately, leaving no room for something to get awry
or just plain wrong.
.PP
With respect to loading \f(CW\*(C`Exporter\*(C'\fR and inheriting, there
are alternatives with the use of modules like \f(CW\*(C`base\*(C'\fR and \f(CW\*(C`parent\*(C'\fR.
.PP
.Vb 3
\&  use base qw( Exporter );
\&  # or
\&  use parent qw( Exporter );
.Ve
.PP
Any of these statements are nice replacements for
\&\f(CW\*(C`BEGIN { require Exporter; @ISA = qw(Exporter); }\*(C'\fR
with the same compile-time effect.  The basic difference
is that \f(CW\*(C`base\*(C'\fR code interacts with declared \f(CW\*(C`fields\*(C'\fR
while \f(CW\*(C`parent\*(C'\fR is a streamlined version of the older
\&\f(CW\*(C`base\*(C'\fR code to just establish the IS-A relationship.
.PP
For more details, see the documentation and code of
base and parent.
.PP
Another thorough remedy to that runtime
vs. compile-time trap is to use Exporter::Easy,
which is a wrapper of Exporter that allows all
boilerplate code at a single gulp in the
use statement.
.PP
.Vb 5
\&   use Exporter::Easy (
\&       OK => [ qw(munge frobnicate) ],
\&   );
\&   # @ISA setup is automatic
\&   # all assignments happen at compile time
.Ve
.SS "What Not to Export"
.IX Subsection "What Not to Export"
You have been warned already in \*(L"Selecting What to Export\*(R"
to not export:
.IP "\(bu" 4
method names (because you don't need to
and that's likely to not do what you want),
.IP "\(bu" 4
anything by default (because you don't want to surprise your users...
badly)
.IP "\(bu" 4
anything you don't need to (because less is more)
.PP
There's one more item to add to this list.  Do \fBnot\fR
export variable names.  Just because \f(CW\*(C`Exporter\*(C'\fR lets you
do that, it does not mean you should.
.PP
.Vb 1
\&  @EXPORT_OK = qw( $svar @avar %hvar ); # DON\*(AqT!
.Ve
.PP
Exporting variables is not a good idea.  They can
change under the hood, provoking horrible
effects at-a-distance, that are too hard to track
and to fix.  Trust me: they are not worth it.
.PP
To provide the capability to set/get class-wide
settings, it is best instead to provide accessors
as subroutines or class methods instead.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\f(CW\*(C`Exporter\*(C'\fR is definitely not the only module with
symbol exporter capabilities.  At \s-1CPAN,\s0 you may find
a bunch of them.  Some are lighter.  Some
provide improved APIs and features.  Peek the one
that fits your needs.  The following is
a sample list of such modules.
.PP
.Vb 6
\&    Exporter::Easy
\&    Exporter::Lite
\&    Exporter::Renaming
\&    Exporter::Tidy
\&    Sub::Exporter / Sub::Installer
\&    Perl6::Export / Perl6::Export::Attrs
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software.  You can redistribute it
and/or modify it under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Exporter::Heavy.3pm                          0100644 0001750 0001750 00000010144 12566207454 024275  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Exporter::Heavy 3pm"
.TH Exporter::Heavy 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Exporter::Heavy \- Exporter guts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
(internal use only)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
No user-serviceable parts inside.
                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Exporter::Heavy5.16.3pm                      0100644 0001750 0001750 00000007623 12566207433 024614  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Exporter::Heavy 3pm"
.TH Exporter::Heavy 3pm "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Exporter::Heavy \- Exporter guts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
(internal use only)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
No user-serviceable parts inside.
                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/Exporter::Heavy5.18.3pm                      0100644 0001750 0001750 00000010144 12566207454 024611  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Exporter::Heavy 3pm"
.TH Exporter::Heavy 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Exporter::Heavy \- Exporter guts
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
(internal use only)
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
No user-serviceable parts inside.
                                                                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::CBuilder.3pm                       0100644 0001750 0001750 00000032640 12566207454 024670  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::CBuilder 3pm"
.TH ExtUtils::CBuilder 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::CBuilder \- Compile and link C code for Perl modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use ExtUtils::CBuilder;
\&
\&  my $b = ExtUtils::CBuilder\->new(%options);
\&  $obj_file = $b\->compile(source => \*(AqMyModule.c\*(Aq);
\&  $lib_file = $b\->link(objects => $obj_file);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can build the C portions of Perl modules by invoking the
appropriate compilers and linkers in a cross-platform manner.  It was
motivated by the \f(CW\*(C`Module::Build\*(C'\fR project, but may be useful for other
purposes as well.  However, it is \fInot\fR intended as a general
cross-platform interface to all your C building needs.  That would
have been a much more ambitious goal!
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
Returns a new \f(CW\*(C`ExtUtils::CBuilder\*(C'\fR object.  A \f(CW\*(C`config\*(C'\fR parameter
lets you override \f(CW\*(C`Config.pm\*(C'\fR settings for all operations performed
by the object, as in the following example:
.Sp
.Vb 3
\&  # Use a different compiler than Config.pm says
\&  my $b = ExtUtils::CBuilder\->new( config =>
\&                                   { ld => \*(Aqgcc\*(Aq } );
.Ve
.Sp
A \f(CW\*(C`quiet\*(C'\fR parameter tells \f(CW\*(C`CBuilder\*(C'\fR to not print its \f(CW\*(C`system()\*(C'\fR
commands before executing them:
.Sp
.Vb 2
\&  # Be quieter than normal
\&  my $b = ExtUtils::CBuilder\->new( quiet => 1 );
.Ve
.IP "have_compiler" 4
.IX Item "have_compiler"
Returns true if the current system has a working C compiler and
linker, false otherwise.  To determine this, we actually compile and
link a sample C library.  The sample will be compiled in the system
tempdir or, if that fails for some reason, in the current directory.
.IP "have_cplusplus" 4
.IX Item "have_cplusplus"
Just like have_compiler but for \*(C+ instead of C.
.IP "compile" 4
.IX Item "compile"
Compiles a C source file and produces an object file.  The name of the
object file is returned.  The source file is specified in a \f(CW\*(C`source\*(C'\fR
parameter, which is required; the other parameters listed below are
optional.
.RS 4
.ie n .IP """object_file""" 4
.el .IP "\f(CWobject_file\fR" 4
.IX Item "object_file"
Specifies the name of the output file to create.  Otherwise the
\&\f(CW\*(C`object_file()\*(C'\fR method will be consulted, passing it the name of the
\&\f(CW\*(C`source\*(C'\fR file.
.ie n .IP """include_dirs""" 4
.el .IP "\f(CWinclude_dirs\fR" 4
.IX Item "include_dirs"
Specifies any additional directories in which to search for header
files.  May be given as a string indicating a single directory, or as
a list reference indicating multiple directories.
.ie n .IP """extra_compiler_flags""" 4
.el .IP "\f(CWextra_compiler_flags\fR" 4
.IX Item "extra_compiler_flags"
Specifies any additional arguments to pass to the compiler.  Should be
given as a list reference containing the arguments individually, or if
this is not possible, as a string containing all the arguments
together.
.ie n .IP """C++""" 4
.el .IP "\f(CWC++\fR" 4
.IX Item "C++"
Specifies that the source file is a \*(C+ source file and sets appropriate
compiler flags
.RE
.RS 4
.Sp
The operation of this method is also affected by the
\&\f(CW\*(C`archlibexp\*(C'\fR, \f(CW\*(C`cccdlflags\*(C'\fR, \f(CW\*(C`ccflags\*(C'\fR, \f(CW\*(C`optimize\*(C'\fR, and \f(CW\*(C`cc\*(C'\fR
entries in \f(CW\*(C`Config.pm\*(C'\fR.
.RE
.IP "link" 4
.IX Item "link"
Invokes the linker to produce a library file from object files.  In
scalar context, the name of the library file is returned.  In list
context, the library file and any temporary files created are
returned.  A required \f(CW\*(C`objects\*(C'\fR parameter contains the name of the
object files to process, either in a string (for one object file) or
list reference (for one or more files).  The following parameters are
optional:
.RS 4
.IP "lib_file" 4
.IX Item "lib_file"
Specifies the name of the output library file to create.  Otherwise
the \f(CW\*(C`lib_file()\*(C'\fR method will be consulted, passing it the name of
the first entry in \f(CW\*(C`objects\*(C'\fR.
.IP "module_name" 4
.IX Item "module_name"
Specifies the name of the Perl module that will be created by linking.
On platforms that need to do prelinking (Win32, \s-1OS/2,\s0 etc.) this is a
required parameter.
.IP "extra_linker_flags" 4
.IX Item "extra_linker_flags"
Any additional flags you wish to pass to the linker.
.RE
.RS 4
.Sp
On platforms where \f(CW\*(C`need_prelink()\*(C'\fR returns true, \f(CW\*(C`prelink()\*(C'\fR
will be called automatically.
.Sp
The operation of this method is also affected by the \f(CW\*(C`lddlflags\*(C'\fR,
\&\f(CW\*(C`shrpenv\*(C'\fR, and \f(CW\*(C`ld\*(C'\fR entries in \f(CW\*(C`Config.pm\*(C'\fR.
.RE
.IP "link_executable" 4
.IX Item "link_executable"
Invokes the linker to produce an executable file from object files.  In
scalar context, the name of the executable file is returned.  In list
context, the executable file and any temporary files created are
returned.  A required \f(CW\*(C`objects\*(C'\fR parameter contains the name of the
object files to process, either in a string (for one object file) or
list reference (for one or more files).  The optional parameters are
the same as \f(CW\*(C`link\*(C'\fR with exception for
.RS 4
.IP "exe_file" 4
.IX Item "exe_file"
Specifies the name of the output executable file to create.  Otherwise
the \f(CW\*(C`exe_file()\*(C'\fR method will be consulted, passing it the name of the
first entry in \f(CW\*(C`objects\*(C'\fR.
.RE
.RS 4
.RE
.IP "object_file" 4
.IX Item "object_file"
.Vb 1
\& my $object_file = $b\->object_file($source_file);
.Ve
.Sp
Converts the name of a C source file to the most natural name of an
output object file to create from it.  For instance, on Unix the
source file \fIfoo.c\fR would result in the object file \fIfoo.o\fR.
.IP "lib_file" 4
.IX Item "lib_file"
.Vb 1
\& my $lib_file = $b\->lib_file($object_file);
.Ve
.Sp
Converts the name of an object file to the most natural name of a
output library file to create from it.  For instance, on Mac \s-1OS X\s0 the
object file \fIfoo.o\fR would result in the library file \fIfoo.bundle\fR.
.IP "exe_file" 4
.IX Item "exe_file"
.Vb 1
\& my $exe_file = $b\->exe_file($object_file);
.Ve
.Sp
Converts the name of an object file to the most natural name of an
executable file to create from it.  For instance, on Mac \s-1OS X\s0 the
object file \fIfoo.o\fR would result in the executable file \fIfoo\fR, and
on Windows it would result in \fIfoo.exe\fR.
.IP "prelink" 4
.IX Item "prelink"
On certain platforms like Win32, \s-1OS/2, VMS,\s0 and \s-1AIX,\s0 it is necessary
to perform some actions before invoking the linker.  The
\&\f(CW\*(C`ExtUtils::Mksymlists\*(C'\fR module does this, writing files used by the
linker during the creation of shared libraries for dynamic extensions.
The names of any files written will be returned as a list.
.Sp
Several parameters correspond to \f(CW\*(C`ExtUtils::Mksymlists::Mksymlists()\*(C'\fR
options, as follows:
.Sp
.Vb 10
\&    Mksymlists()   prelink()          type
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    NAME        |  dl_name          | string (required)
\&    DLBASE      |  dl_base          | string
\&    FILE        |  dl_file          | string
\&    DL_VARS     |  dl_vars          | array reference
\&    DL_FUNCS    |  dl_funcs         | hash reference
\&    FUNCLIST    |  dl_func_list     | array reference
\&    IMPORTS     |  dl_imports       | hash reference
\&    VERSION     |  dl_version       | string
.Ve
.Sp
Please see the documentation for \f(CW\*(C`ExtUtils::Mksymlists\*(C'\fR for the
details of what these parameters do.
.IP "need_prelink" 4
.IX Item "need_prelink"
Returns true on platforms where \f(CW\*(C`prelink()\*(C'\fR should be called
during linking, and false otherwise.
.IP "extra_link_args_after_prelink" 4
.IX Item "extra_link_args_after_prelink"
Returns list of extra arguments to give to the link command; the arguments
are the same as for \fIprelink()\fR, with addition of array reference to the
results of \fIprelink()\fR; this reference is indexed by key \f(CW\*(C`prelink_res\*(C'\fR.
.SH "TO DO"
.IX Header "TO DO"
Currently this has only been tested on Unix and doesn't contain any of
the Windows-specific code from the \f(CW\*(C`Module::Build\*(C'\fR project.  I'll do
that next.
.SH "HISTORY"
.IX Header "HISTORY"
This module is an outgrowth of the \f(CW\*(C`Module::Build\*(C'\fR project, to which
there have been many contributors.  Notably, Randy W. Sims submitted
lots of code to support 3 compilers on Windows and helped with various
other platform-specific issues.  Ilya Zakharevich has contributed
fixes for \s-1OS/2\s0; John E. Malmberg and Peter Prymmer have done likewise
for \s-1VMS.\s0
.SH "SUPPORT"
.IX Header "SUPPORT"
ExtUtils::CBuilder is maintained as part of the Perl 5 core.  Please
submit any bug reports via the \fIperlbug\fR tool included with Perl 5.
Bug reports will be included in the Perl 5 ticket system at
<http://rt.perl.org>.
.PP
The Perl 5 source code is available at <http://perl5.git.perl.org/perl.git>
and ExtUtils-CBuilder may be found in the \fIdist/ExtUtils\-CBuilder\fR directory
of the repository.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams, kwilliams@cpan.org
.PP
Additional contributions by The Perl 5 Porters.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2005 Ken Williams.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIModule::Build\fR\|(3)
                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::CBuilder5.16.3pm                   0100644 0001750 0001750 00000032326 12566207433 025200  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::CBuilder 3pm"
.TH ExtUtils::CBuilder 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::CBuilder \- Compile and link C code for Perl modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use ExtUtils::CBuilder;
\&
\&  my $b = ExtUtils::CBuilder\->new(%options);
\&  $obj_file = $b\->compile(source => \*(AqMyModule.c\*(Aq);
\&  $lib_file = $b\->link(objects => $obj_file);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can build the C portions of Perl modules by invoking the
appropriate compilers and linkers in a cross-platform manner.  It was
motivated by the \f(CW\*(C`Module::Build\*(C'\fR project, but may be useful for other
purposes as well.  However, it is \fInot\fR intended as a general
cross-platform interface to all your C building needs.  That would
have been a much more ambitious goal!
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
Returns a new \f(CW\*(C`ExtUtils::CBuilder\*(C'\fR object.  A \f(CW\*(C`config\*(C'\fR parameter
lets you override \f(CW\*(C`Config.pm\*(C'\fR settings for all operations performed
by the object, as in the following example:
.Sp
.Vb 3
\&  # Use a different compiler than Config.pm says
\&  my $b = ExtUtils::CBuilder\->new( config =>
\&                                   { ld => \*(Aqgcc\*(Aq } );
.Ve
.Sp
A \f(CW\*(C`quiet\*(C'\fR parameter tells \f(CW\*(C`CBuilder\*(C'\fR to not print its \f(CW\*(C`system()\*(C'\fR
commands before executing them:
.Sp
.Vb 2
\&  # Be quieter than normal
\&  my $b = ExtUtils::CBuilder\->new( quiet => 1 );
.Ve
.IP "have_compiler" 4
.IX Item "have_compiler"
Returns true if the current system has a working C compiler and
linker, false otherwise.  To determine this, we actually compile and
link a sample C library.  The sample will be compiled in the system
tempdir or, if that fails for some reason, in the current directory.
.IP "have_cplusplus" 4
.IX Item "have_cplusplus"
Just like have_compiler but for \*(C+ instead of C.
.IP "compile" 4
.IX Item "compile"
Compiles a C source file and produces an object file.  The name of the
object file is returned.  The source file is specified in a \f(CW\*(C`source\*(C'\fR
parameter, which is required; the other parameters listed below are
optional.
.RS 4
.ie n .IP """object_file""" 4
.el .IP "\f(CWobject_file\fR" 4
.IX Item "object_file"
Specifies the name of the output file to create.  Otherwise the
\&\f(CW\*(C`object_file()\*(C'\fR method will be consulted, passing it the name of the
\&\f(CW\*(C`source\*(C'\fR file.
.ie n .IP """include_dirs""" 4
.el .IP "\f(CWinclude_dirs\fR" 4
.IX Item "include_dirs"
Specifies any additional directories in which to search for header
files.  May be given as a string indicating a single directory, or as
a list reference indicating multiple directories.
.ie n .IP """extra_compiler_flags""" 4
.el .IP "\f(CWextra_compiler_flags\fR" 4
.IX Item "extra_compiler_flags"
Specifies any additional arguments to pass to the compiler.  Should be
given as a list reference containing the arguments individually, or if
this is not possible, as a string containing all the arguments
together.
.ie n .IP """C++""" 4
.el .IP "\f(CWC++\fR" 4
.IX Item "C++"
Specifies that the source file is a \*(C+ source file and sets appropriate
compiler flags
.RE
.RS 4
.Sp
The operation of this method is also affected by the
\&\f(CW\*(C`archlibexp\*(C'\fR, \f(CW\*(C`cccdlflags\*(C'\fR, \f(CW\*(C`ccflags\*(C'\fR, \f(CW\*(C`optimize\*(C'\fR, and \f(CW\*(C`cc\*(C'\fR
entries in \f(CW\*(C`Config.pm\*(C'\fR.
.RE
.IP "link" 4
.IX Item "link"
Invokes the linker to produce a library file from object files.  In
scalar context, the name of the library file is returned.  In list
context, the library file and any temporary files created are
returned.  A required \f(CW\*(C`objects\*(C'\fR parameter contains the name of the
object files to process, either in a string (for one object file) or
list reference (for one or more files).  The following parameters are
optional:
.RS 4
.IP "lib_file" 4
.IX Item "lib_file"
Specifies the name of the output library file to create.  Otherwise
the \f(CW\*(C`lib_file()\*(C'\fR method will be consulted, passing it the name of
the first entry in \f(CW\*(C`objects\*(C'\fR.
.IP "module_name" 4
.IX Item "module_name"
Specifies the name of the Perl module that will be created by linking.
On platforms that need to do prelinking (Win32, \s-1OS/2\s0, etc.) this is a
required parameter.
.IP "extra_linker_flags" 4
.IX Item "extra_linker_flags"
Any additional flags you wish to pass to the linker.
.RE
.RS 4
.Sp
On platforms where \f(CW\*(C`need_prelink()\*(C'\fR returns true, \f(CW\*(C`prelink()\*(C'\fR
will be called automatically.
.Sp
The operation of this method is also affected by the \f(CW\*(C`lddlflags\*(C'\fR,
\&\f(CW\*(C`shrpenv\*(C'\fR, and \f(CW\*(C`ld\*(C'\fR entries in \f(CW\*(C`Config.pm\*(C'\fR.
.RE
.IP "link_executable" 4
.IX Item "link_executable"
Invokes the linker to produce an executable file from object files.  In
scalar context, the name of the executable file is returned.  In list
context, the executable file and any temporary files created are
returned.  A required \f(CW\*(C`objects\*(C'\fR parameter contains the name of the
object files to process, either in a string (for one object file) or
list reference (for one or more files).  The optional parameters are
the same as \f(CW\*(C`link\*(C'\fR with exception for
.RS 4
.IP "exe_file" 4
.IX Item "exe_file"
Specifies the name of the output executable file to create.  Otherwise
the \f(CW\*(C`exe_file()\*(C'\fR method will be consulted, passing it the name of the
first entry in \f(CW\*(C`objects\*(C'\fR.
.RE
.RS 4
.RE
.IP "object_file" 4
.IX Item "object_file"
.Vb 1
\& my $object_file = $b\->object_file($source_file);
.Ve
.Sp
Converts the name of a C source file to the most natural name of an
output object file to create from it.  For instance, on Unix the
source file \fIfoo.c\fR would result in the object file \fIfoo.o\fR.
.IP "lib_file" 4
.IX Item "lib_file"
.Vb 1
\& my $lib_file = $b\->lib_file($object_file);
.Ve
.Sp
Converts the name of an object file to the most natural name of a
output library file to create from it.  For instance, on Mac \s-1OS\s0 X the
object file \fIfoo.o\fR would result in the library file \fIfoo.bundle\fR.
.IP "exe_file" 4
.IX Item "exe_file"
.Vb 1
\& my $exe_file = $b\->exe_file($object_file);
.Ve
.Sp
Converts the name of an object file to the most natural name of an
executable file to create from it.  For instance, on Mac \s-1OS\s0 X the
object file \fIfoo.o\fR would result in the executable file \fIfoo\fR, and
on Windows it would result in \fIfoo.exe\fR.
.IP "prelink" 4
.IX Item "prelink"
On certain platforms like Win32, \s-1OS/2\s0, \s-1VMS\s0, and \s-1AIX\s0, it is necessary
to perform some actions before invoking the linker.  The
\&\f(CW\*(C`ExtUtils::Mksymlists\*(C'\fR module does this, writing files used by the
linker during the creation of shared libraries for dynamic extensions.
The names of any files written will be returned as a list.
.Sp
Several parameters correspond to \f(CW\*(C`ExtUtils::Mksymlists::Mksymlists()\*(C'\fR
options, as follows:
.Sp
.Vb 10
\&    Mksymlists()   prelink()          type
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    NAME        |  dl_name          | string (required)
\&    DLBASE      |  dl_base          | string
\&    FILE        |  dl_file          | string
\&    DL_VARS     |  dl_vars          | array reference
\&    DL_FUNCS    |  dl_funcs         | hash reference
\&    FUNCLIST    |  dl_func_list     | array reference
\&    IMPORTS     |  dl_imports       | hash reference
\&    VERSION     |  dl_version       | string
.Ve
.Sp
Please see the documentation for \f(CW\*(C`ExtUtils::Mksymlists\*(C'\fR for the
details of what these parameters do.
.IP "need_prelink" 4
.IX Item "need_prelink"
Returns true on platforms where \f(CW\*(C`prelink()\*(C'\fR should be called
during linking, and false otherwise.
.IP "extra_link_args_after_prelink" 4
.IX Item "extra_link_args_after_prelink"
Returns list of extra arguments to give to the link command; the arguments
are the same as for \fIprelink()\fR, with addition of array reference to the
results of \fIprelink()\fR; this reference is indexed by key \f(CW\*(C`prelink_res\*(C'\fR.
.SH "TO DO"
.IX Header "TO DO"
Currently this has only been tested on Unix and doesn't contain any of
the Windows-specific code from the \f(CW\*(C`Module::Build\*(C'\fR project.  I'll do
that next.
.SH "HISTORY"
.IX Header "HISTORY"
This module is an outgrowth of the \f(CW\*(C`Module::Build\*(C'\fR project, to which
there have been many contributors.  Notably, Randy W. Sims submitted
lots of code to support 3 compilers on Windows and helped with various
other platform-specific issues.  Ilya Zakharevich has contributed
fixes for \s-1OS/2\s0; John E. Malmberg and Peter Prymmer have done likewise
for \s-1VMS\s0.
.SH "SUPPORT"
.IX Header "SUPPORT"
ExtUtils::CBuilder is maintained as part of the Perl 5 core.  Please
submit any bug reports via the \fIperlbug\fR tool included with Perl 5.
Bug reports will be included in the Perl 5 ticket system at
<http://rt.perl.org>.
.PP
The Perl 5 source code is available at <http://perl5.git.perl.org/perl.git>
and ExtUtils-CBuilder may be found in the \fIdist/ExtUtils\-CBuilder\fR directory
of the repository.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams, kwilliams@cpan.org
.PP
Additional contributions by The Perl 5 Porters.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2005 Ken Williams.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIModule::Build\fR\|(3)
                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::CBuilder5.18.3pm                   0100644 0001750 0001750 00000032640 12566207454 025204  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::CBuilder 3pm"
.TH ExtUtils::CBuilder 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::CBuilder \- Compile and link C code for Perl modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use ExtUtils::CBuilder;
\&
\&  my $b = ExtUtils::CBuilder\->new(%options);
\&  $obj_file = $b\->compile(source => \*(AqMyModule.c\*(Aq);
\&  $lib_file = $b\->link(objects => $obj_file);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can build the C portions of Perl modules by invoking the
appropriate compilers and linkers in a cross-platform manner.  It was
motivated by the \f(CW\*(C`Module::Build\*(C'\fR project, but may be useful for other
purposes as well.  However, it is \fInot\fR intended as a general
cross-platform interface to all your C building needs.  That would
have been a much more ambitious goal!
.SH "METHODS"
.IX Header "METHODS"
.IP "new" 4
.IX Item "new"
Returns a new \f(CW\*(C`ExtUtils::CBuilder\*(C'\fR object.  A \f(CW\*(C`config\*(C'\fR parameter
lets you override \f(CW\*(C`Config.pm\*(C'\fR settings for all operations performed
by the object, as in the following example:
.Sp
.Vb 3
\&  # Use a different compiler than Config.pm says
\&  my $b = ExtUtils::CBuilder\->new( config =>
\&                                   { ld => \*(Aqgcc\*(Aq } );
.Ve
.Sp
A \f(CW\*(C`quiet\*(C'\fR parameter tells \f(CW\*(C`CBuilder\*(C'\fR to not print its \f(CW\*(C`system()\*(C'\fR
commands before executing them:
.Sp
.Vb 2
\&  # Be quieter than normal
\&  my $b = ExtUtils::CBuilder\->new( quiet => 1 );
.Ve
.IP "have_compiler" 4
.IX Item "have_compiler"
Returns true if the current system has a working C compiler and
linker, false otherwise.  To determine this, we actually compile and
link a sample C library.  The sample will be compiled in the system
tempdir or, if that fails for some reason, in the current directory.
.IP "have_cplusplus" 4
.IX Item "have_cplusplus"
Just like have_compiler but for \*(C+ instead of C.
.IP "compile" 4
.IX Item "compile"
Compiles a C source file and produces an object file.  The name of the
object file is returned.  The source file is specified in a \f(CW\*(C`source\*(C'\fR
parameter, which is required; the other parameters listed below are
optional.
.RS 4
.ie n .IP """object_file""" 4
.el .IP "\f(CWobject_file\fR" 4
.IX Item "object_file"
Specifies the name of the output file to create.  Otherwise the
\&\f(CW\*(C`object_file()\*(C'\fR method will be consulted, passing it the name of the
\&\f(CW\*(C`source\*(C'\fR file.
.ie n .IP """include_dirs""" 4
.el .IP "\f(CWinclude_dirs\fR" 4
.IX Item "include_dirs"
Specifies any additional directories in which to search for header
files.  May be given as a string indicating a single directory, or as
a list reference indicating multiple directories.
.ie n .IP """extra_compiler_flags""" 4
.el .IP "\f(CWextra_compiler_flags\fR" 4
.IX Item "extra_compiler_flags"
Specifies any additional arguments to pass to the compiler.  Should be
given as a list reference containing the arguments individually, or if
this is not possible, as a string containing all the arguments
together.
.ie n .IP """C++""" 4
.el .IP "\f(CWC++\fR" 4
.IX Item "C++"
Specifies that the source file is a \*(C+ source file and sets appropriate
compiler flags
.RE
.RS 4
.Sp
The operation of this method is also affected by the
\&\f(CW\*(C`archlibexp\*(C'\fR, \f(CW\*(C`cccdlflags\*(C'\fR, \f(CW\*(C`ccflags\*(C'\fR, \f(CW\*(C`optimize\*(C'\fR, and \f(CW\*(C`cc\*(C'\fR
entries in \f(CW\*(C`Config.pm\*(C'\fR.
.RE
.IP "link" 4
.IX Item "link"
Invokes the linker to produce a library file from object files.  In
scalar context, the name of the library file is returned.  In list
context, the library file and any temporary files created are
returned.  A required \f(CW\*(C`objects\*(C'\fR parameter contains the name of the
object files to process, either in a string (for one object file) or
list reference (for one or more files).  The following parameters are
optional:
.RS 4
.IP "lib_file" 4
.IX Item "lib_file"
Specifies the name of the output library file to create.  Otherwise
the \f(CW\*(C`lib_file()\*(C'\fR method will be consulted, passing it the name of
the first entry in \f(CW\*(C`objects\*(C'\fR.
.IP "module_name" 4
.IX Item "module_name"
Specifies the name of the Perl module that will be created by linking.
On platforms that need to do prelinking (Win32, \s-1OS/2,\s0 etc.) this is a
required parameter.
.IP "extra_linker_flags" 4
.IX Item "extra_linker_flags"
Any additional flags you wish to pass to the linker.
.RE
.RS 4
.Sp
On platforms where \f(CW\*(C`need_prelink()\*(C'\fR returns true, \f(CW\*(C`prelink()\*(C'\fR
will be called automatically.
.Sp
The operation of this method is also affected by the \f(CW\*(C`lddlflags\*(C'\fR,
\&\f(CW\*(C`shrpenv\*(C'\fR, and \f(CW\*(C`ld\*(C'\fR entries in \f(CW\*(C`Config.pm\*(C'\fR.
.RE
.IP "link_executable" 4
.IX Item "link_executable"
Invokes the linker to produce an executable file from object files.  In
scalar context, the name of the executable file is returned.  In list
context, the executable file and any temporary files created are
returned.  A required \f(CW\*(C`objects\*(C'\fR parameter contains the name of the
object files to process, either in a string (for one object file) or
list reference (for one or more files).  The optional parameters are
the same as \f(CW\*(C`link\*(C'\fR with exception for
.RS 4
.IP "exe_file" 4
.IX Item "exe_file"
Specifies the name of the output executable file to create.  Otherwise
the \f(CW\*(C`exe_file()\*(C'\fR method will be consulted, passing it the name of the
first entry in \f(CW\*(C`objects\*(C'\fR.
.RE
.RS 4
.RE
.IP "object_file" 4
.IX Item "object_file"
.Vb 1
\& my $object_file = $b\->object_file($source_file);
.Ve
.Sp
Converts the name of a C source file to the most natural name of an
output object file to create from it.  For instance, on Unix the
source file \fIfoo.c\fR would result in the object file \fIfoo.o\fR.
.IP "lib_file" 4
.IX Item "lib_file"
.Vb 1
\& my $lib_file = $b\->lib_file($object_file);
.Ve
.Sp
Converts the name of an object file to the most natural name of a
output library file to create from it.  For instance, on Mac \s-1OS X\s0 the
object file \fIfoo.o\fR would result in the library file \fIfoo.bundle\fR.
.IP "exe_file" 4
.IX Item "exe_file"
.Vb 1
\& my $exe_file = $b\->exe_file($object_file);
.Ve
.Sp
Converts the name of an object file to the most natural name of an
executable file to create from it.  For instance, on Mac \s-1OS X\s0 the
object file \fIfoo.o\fR would result in the executable file \fIfoo\fR, and
on Windows it would result in \fIfoo.exe\fR.
.IP "prelink" 4
.IX Item "prelink"
On certain platforms like Win32, \s-1OS/2, VMS,\s0 and \s-1AIX,\s0 it is necessary
to perform some actions before invoking the linker.  The
\&\f(CW\*(C`ExtUtils::Mksymlists\*(C'\fR module does this, writing files used by the
linker during the creation of shared libraries for dynamic extensions.
The names of any files written will be returned as a list.
.Sp
Several parameters correspond to \f(CW\*(C`ExtUtils::Mksymlists::Mksymlists()\*(C'\fR
options, as follows:
.Sp
.Vb 10
\&    Mksymlists()   prelink()          type
\&   \-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-|\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&    NAME        |  dl_name          | string (required)
\&    DLBASE      |  dl_base          | string
\&    FILE        |  dl_file          | string
\&    DL_VARS     |  dl_vars          | array reference
\&    DL_FUNCS    |  dl_funcs         | hash reference
\&    FUNCLIST    |  dl_func_list     | array reference
\&    IMPORTS     |  dl_imports       | hash reference
\&    VERSION     |  dl_version       | string
.Ve
.Sp
Please see the documentation for \f(CW\*(C`ExtUtils::Mksymlists\*(C'\fR for the
details of what these parameters do.
.IP "need_prelink" 4
.IX Item "need_prelink"
Returns true on platforms where \f(CW\*(C`prelink()\*(C'\fR should be called
during linking, and false otherwise.
.IP "extra_link_args_after_prelink" 4
.IX Item "extra_link_args_after_prelink"
Returns list of extra arguments to give to the link command; the arguments
are the same as for \fIprelink()\fR, with addition of array reference to the
results of \fIprelink()\fR; this reference is indexed by key \f(CW\*(C`prelink_res\*(C'\fR.
.SH "TO DO"
.IX Header "TO DO"
Currently this has only been tested on Unix and doesn't contain any of
the Windows-specific code from the \f(CW\*(C`Module::Build\*(C'\fR project.  I'll do
that next.
.SH "HISTORY"
.IX Header "HISTORY"
This module is an outgrowth of the \f(CW\*(C`Module::Build\*(C'\fR project, to which
there have been many contributors.  Notably, Randy W. Sims submitted
lots of code to support 3 compilers on Windows and helped with various
other platform-specific issues.  Ilya Zakharevich has contributed
fixes for \s-1OS/2\s0; John E. Malmberg and Peter Prymmer have done likewise
for \s-1VMS.\s0
.SH "SUPPORT"
.IX Header "SUPPORT"
ExtUtils::CBuilder is maintained as part of the Perl 5 core.  Please
submit any bug reports via the \fIperlbug\fR tool included with Perl 5.
Bug reports will be included in the Perl 5 ticket system at
<http://rt.perl.org>.
.PP
The Perl 5 source code is available at <http://perl5.git.perl.org/perl.git>
and ExtUtils-CBuilder may be found in the \fIdist/ExtUtils\-CBuilder\fR directory
of the repository.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams, kwilliams@cpan.org
.PP
Additional contributions by The Perl 5 Porters.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright (c) 2003\-2005 Ken Williams.  All rights reserved.
.PP
This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIModule::Build\fR\|(3)
                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::CBuilder::Platform::Windows.3pm    0100644 0001750 0001750 00000011472 12566207454 030320  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::CBuilder::Platform::Windows 3pm"
.TH ExtUtils::CBuilder::Platform::Windows 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::CBuilder::Platform::Windows \- Builder class for Windows platforms
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the Windows-specific parts of ExtUtils::CBuilder.
Most of the Windows-specific stuff has to do with compiling and
linking C code.  Currently we support the 3 compilers perl itself
supports: \s-1MSVC, BCC,\s0 and \s-1GCC.\s0
.PP
This module inherits from \f(CW\*(C`ExtUtils::CBuilder::Base\*(C'\fR, so any functionality
not implemented here will be implemented there.  The interfaces are
defined by the ExtUtils::CBuilder documentation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams <ken@mathforum.org>
.PP
Most of the code here was written by Randy W. Sims <RandyS@ThePierianSpring.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIExtUtils::CBuilder\fR\|(3), \fIExtUtils::MakeMaker\fR\|(3)
                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::CBuilder::Platform::Windows5.16.3pm0100644 0001750 0001750 00000011160 12566207433 030621  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::CBuilder::Platform::Windows 3pm"
.TH ExtUtils::CBuilder::Platform::Windows 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::CBuilder::Platform::Windows \- Builder class for Windows platforms
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the Windows-specific parts of ExtUtils::CBuilder.
Most of the Windows-specific stuff has to do with compiling and
linking C code.  Currently we support the 3 compilers perl itself
supports: \s-1MSVC\s0, \s-1BCC\s0, and \s-1GCC\s0.
.PP
This module inherits from \f(CW\*(C`ExtUtils::CBuilder::Base\*(C'\fR, so any functionality
not implemented here will be implemented there.  The interfaces are
defined by the ExtUtils::CBuilder documentation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams <ken@mathforum.org>
.PP
Most of the code here was written by Randy W. Sims <RandyS@ThePierianSpring.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIExtUtils::CBuilder\fR\|(3), \fIExtUtils::MakeMaker\fR\|(3)
                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::CBuilder::Platform::Windows5.18.3pm0100644 0001750 0001750 00000011472 12566207454 030634  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::CBuilder::Platform::Windows 3pm"
.TH ExtUtils::CBuilder::Platform::Windows 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::CBuilder::Platform::Windows \- Builder class for Windows platforms
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module implements the Windows-specific parts of ExtUtils::CBuilder.
Most of the Windows-specific stuff has to do with compiling and
linking C code.  Currently we support the 3 compilers perl itself
supports: \s-1MSVC, BCC,\s0 and \s-1GCC.\s0
.PP
This module inherits from \f(CW\*(C`ExtUtils::CBuilder::Base\*(C'\fR, so any functionality
not implemented here will be implemented there.  The interfaces are
defined by the ExtUtils::CBuilder documentation.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken Williams <ken@mathforum.org>
.PP
Most of the code here was written by Randy W. Sims <RandyS@ThePierianSpring.org>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIExtUtils::CBuilder\fR\|(3), \fIExtUtils::MakeMaker\fR\|(3)
                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Command.3pm                        0100644 0001750 0001750 00000017103 12566207454 024552  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Command 3pm"
.TH ExtUtils::Command 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Command \- utilities to replace common UNIX commands in Makefiles etc.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 12
\&  perl \-MExtUtils::Command \-e cat files... > destination
\&  perl \-MExtUtils::Command \-e mv source... destination
\&  perl \-MExtUtils::Command \-e cp source... destination
\&  perl \-MExtUtils::Command \-e touch files...
\&  perl \-MExtUtils::Command \-e rm_f files...
\&  perl \-MExtUtils::Command \-e rm_rf directories...
\&  perl \-MExtUtils::Command \-e mkpath directories...
\&  perl \-MExtUtils::Command \-e eqtime source destination
\&  perl \-MExtUtils::Command \-e test_f file
\&  perl \-MExtUtils::Command \-e test_d directory
\&  perl \-MExtUtils::Command \-e chmod mode files...
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module is used to replace common \s-1UNIX\s0 commands.  In all cases the
functions work from \f(CW@ARGV\fR rather than taking arguments.  This makes
them easier to deal with in Makefiles.  Call them like this:
.PP
.Vb 1
\&  perl \-MExtUtils::Command \-e some_command some files to work on
.Ve
.PP
and \fI\s-1NOT\s0\fR like this:
.PP
.Vb 1
\&  perl \-MExtUtils::Command \-e \*(Aqsome_command qw(some files to work on)\*(Aq
.Ve
.PP
For that use Shell::Command.
.PP
Filenames with * and ? will be glob expanded.
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
.IP "cat" 4
.IX Item "cat"
.Vb 1
\&    cat file ...
.Ve
.Sp
Concatenates all files mentioned on command line to \s-1STDOUT.\s0
.IP "eqtime" 4
.IX Item "eqtime"
.Vb 1
\&    eqtime source destination
.Ve
.Sp
Sets modified time of destination to that of source.
.IP "rm_rf" 4
.IX Item "rm_rf"
.Vb 1
\&    rm_rf files or directories ...
.Ve
.Sp
Removes files and directories \- recursively (even if readonly)
.IP "rm_f" 4
.IX Item "rm_f"
.Vb 1
\&    rm_f file ...
.Ve
.Sp
Removes files (even if readonly)
.IP "touch" 4
.IX Item "touch"
.Vb 1
\&    touch file ...
.Ve
.Sp
Makes files exist, with current timestamp
.IP "mv" 4
.IX Item "mv"
.Vb 2
\&    mv source_file destination_file
\&    mv source_file source_file destination_dir
.Ve
.Sp
Moves source to destination.  Multiple sources are allowed if
destination is an existing directory.
.Sp
Returns true if all moves succeeded, false otherwise.
.IP "cp" 4
.IX Item "cp"
.Vb 2
\&    cp source_file destination_file
\&    cp source_file source_file destination_dir
.Ve
.Sp
Copies sources to the destination.  Multiple sources are allowed if
destination is an existing directory.
.Sp
Returns true if all copies succeeded, false otherwise.
.IP "chmod" 4
.IX Item "chmod"
.Vb 1
\&    chmod mode files ...
.Ve
.Sp
Sets \s-1UNIX\s0 like permissions 'mode' on all the files.  e.g. 0666
.IP "mkpath" 4
.IX Item "mkpath"
.Vb 1
\&    mkpath directory ...
.Ve
.Sp
Creates directories, including any parent directories.
.IP "test_f" 4
.IX Item "test_f"
.Vb 1
\&    test_f file
.Ve
.Sp
Tests if a file exists.  \fIExits\fR with 0 if it does, 1 if it does not (ie.
shell's idea of true and false).
.IP "test_d" 4
.IX Item "test_d"
.Vb 1
\&    test_d directory
.Ve
.Sp
Tests if a directory exists.  \fIExits\fR with 0 if it does, 1 if it does
not (ie. shell's idea of true and false).
.IP "dos2unix" 4
.IX Item "dos2unix"
.Vb 1
\&    dos2unix files or dirs ...
.Ve
.Sp
Converts \s-1DOS\s0 and \s-1OS/2\s0 linefeeds to Unix style recursively.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Shell::Command which is these same functions but take arguments normally.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nick Ing-Simmons \f(CW\*(C`ni\-s@cpan.org\*(C'\fR
.PP
Maintained by Michael G Schwern \f(CW\*(C`schwern@pobox.com\*(C'\fR within the
ExtUtils-MakeMaker package and, as a separate \s-1CPAN\s0 package, by
Randy Kobes \f(CW\*(C`r.kobes@uwinnipeg.ca\*(C'\fR.
                                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Command5.16.3pm                    0100644 0001750 0001750 00000016562 12566207433 025071  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Command 3pm"
.TH ExtUtils::Command 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Command \- utilities to replace common UNIX commands in Makefiles etc.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 12
\&  perl \-MExtUtils::Command \-e cat files... > destination
\&  perl \-MExtUtils::Command \-e mv source... destination
\&  perl \-MExtUtils::Command \-e cp source... destination
\&  perl \-MExtUtils::Command \-e touch files...
\&  perl \-MExtUtils::Command \-e rm_f files...
\&  perl \-MExtUtils::Command \-e rm_rf directories...
\&  perl \-MExtUtils::Command \-e mkpath directories...
\&  perl \-MExtUtils::Command \-e eqtime source destination
\&  perl \-MExtUtils::Command \-e test_f file
\&  perl \-MExtUtils::Command \-e test_d directory
\&  perl \-MExtUtils::Command \-e chmod mode files...
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module is used to replace common \s-1UNIX\s0 commands.  In all cases the
functions work from \f(CW@ARGV\fR rather than taking arguments.  This makes
them easier to deal with in Makefiles.  Call them like this:
.PP
.Vb 1
\&  perl \-MExtUtils::Command \-e some_command some files to work on
.Ve
.PP
and \fI\s-1NOT\s0\fR like this:
.PP
.Vb 1
\&  perl \-MExtUtils::Command \-e \*(Aqsome_command qw(some files to work on)\*(Aq
.Ve
.PP
For that use Shell::Command.
.PP
Filenames with * and ? will be glob expanded.
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
.IP "cat" 4
.IX Item "cat"
.Vb 1
\&    cat file ...
.Ve
.Sp
Concatenates all files mentioned on command line to \s-1STDOUT\s0.
.IP "eqtime" 4
.IX Item "eqtime"
.Vb 1
\&    eqtime source destination
.Ve
.Sp
Sets modified time of destination to that of source.
.IP "rm_rf" 4
.IX Item "rm_rf"
.Vb 1
\&    rm_rf files or directories ...
.Ve
.Sp
Removes files and directories \- recursively (even if readonly)
.IP "rm_f" 4
.IX Item "rm_f"
.Vb 1
\&    rm_f file ...
.Ve
.Sp
Removes files (even if readonly)
.IP "touch" 4
.IX Item "touch"
.Vb 1
\&    touch file ...
.Ve
.Sp
Makes files exist, with current timestamp
.IP "mv" 4
.IX Item "mv"
.Vb 2
\&    mv source_file destination_file
\&    mv source_file source_file destination_dir
.Ve
.Sp
Moves source to destination.  Multiple sources are allowed if
destination is an existing directory.
.Sp
Returns true if all moves succeeded, false otherwise.
.IP "cp" 4
.IX Item "cp"
.Vb 2
\&    cp source_file destination_file
\&    cp source_file source_file destination_dir
.Ve
.Sp
Copies sources to the destination.  Multiple sources are allowed if
destination is an existing directory.
.Sp
Returns true if all copies succeeded, false otherwise.
.IP "chmod" 4
.IX Item "chmod"
.Vb 1
\&    chmod mode files ...
.Ve
.Sp
Sets \s-1UNIX\s0 like permissions 'mode' on all the files.  e.g. 0666
.IP "mkpath" 4
.IX Item "mkpath"
.Vb 1
\&    mkpath directory ...
.Ve
.Sp
Creates directories, including any parent directories.
.IP "test_f" 4
.IX Item "test_f"
.Vb 1
\&    test_f file
.Ve
.Sp
Tests if a file exists.  \fIExits\fR with 0 if it does, 1 if it does not (ie.
shell's idea of true and false).
.IP "test_d" 4
.IX Item "test_d"
.Vb 1
\&    test_d directory
.Ve
.Sp
Tests if a directory exists.  \fIExits\fR with 0 if it does, 1 if it does
not (ie. shell's idea of true and false).
.IP "dos2unix" 4
.IX Item "dos2unix"
.Vb 1
\&    dos2unix files or dirs ...
.Ve
.Sp
Converts \s-1DOS\s0 and \s-1OS/2\s0 linefeeds to Unix style recursively.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Shell::Command which is these same functions but take arguments normally.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nick Ing-Simmons \f(CW\*(C`ni\-s@cpan.org\*(C'\fR
.PP
Maintained by Michael G Schwern \f(CW\*(C`schwern@pobox.com\*(C'\fR within the
ExtUtils-MakeMaker package and, as a separate \s-1CPAN\s0 package, by
Randy Kobes \f(CW\*(C`r.kobes@uwinnipeg.ca\*(C'\fR.
                                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Command5.18.3pm                    0100644 0001750 0001750 00000017103 12566207454 025066  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Command 3pm"
.TH ExtUtils::Command 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Command \- utilities to replace common UNIX commands in Makefiles etc.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 12
\&  perl \-MExtUtils::Command \-e cat files... > destination
\&  perl \-MExtUtils::Command \-e mv source... destination
\&  perl \-MExtUtils::Command \-e cp source... destination
\&  perl \-MExtUtils::Command \-e touch files...
\&  perl \-MExtUtils::Command \-e rm_f files...
\&  perl \-MExtUtils::Command \-e rm_rf directories...
\&  perl \-MExtUtils::Command \-e mkpath directories...
\&  perl \-MExtUtils::Command \-e eqtime source destination
\&  perl \-MExtUtils::Command \-e test_f file
\&  perl \-MExtUtils::Command \-e test_d directory
\&  perl \-MExtUtils::Command \-e chmod mode files...
\&  ...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module is used to replace common \s-1UNIX\s0 commands.  In all cases the
functions work from \f(CW@ARGV\fR rather than taking arguments.  This makes
them easier to deal with in Makefiles.  Call them like this:
.PP
.Vb 1
\&  perl \-MExtUtils::Command \-e some_command some files to work on
.Ve
.PP
and \fI\s-1NOT\s0\fR like this:
.PP
.Vb 1
\&  perl \-MExtUtils::Command \-e \*(Aqsome_command qw(some files to work on)\*(Aq
.Ve
.PP
For that use Shell::Command.
.PP
Filenames with * and ? will be glob expanded.
.SS "\s-1FUNCTIONS\s0"
.IX Subsection "FUNCTIONS"
.IP "cat" 4
.IX Item "cat"
.Vb 1
\&    cat file ...
.Ve
.Sp
Concatenates all files mentioned on command line to \s-1STDOUT.\s0
.IP "eqtime" 4
.IX Item "eqtime"
.Vb 1
\&    eqtime source destination
.Ve
.Sp
Sets modified time of destination to that of source.
.IP "rm_rf" 4
.IX Item "rm_rf"
.Vb 1
\&    rm_rf files or directories ...
.Ve
.Sp
Removes files and directories \- recursively (even if readonly)
.IP "rm_f" 4
.IX Item "rm_f"
.Vb 1
\&    rm_f file ...
.Ve
.Sp
Removes files (even if readonly)
.IP "touch" 4
.IX Item "touch"
.Vb 1
\&    touch file ...
.Ve
.Sp
Makes files exist, with current timestamp
.IP "mv" 4
.IX Item "mv"
.Vb 2
\&    mv source_file destination_file
\&    mv source_file source_file destination_dir
.Ve
.Sp
Moves source to destination.  Multiple sources are allowed if
destination is an existing directory.
.Sp
Returns true if all moves succeeded, false otherwise.
.IP "cp" 4
.IX Item "cp"
.Vb 2
\&    cp source_file destination_file
\&    cp source_file source_file destination_dir
.Ve
.Sp
Copies sources to the destination.  Multiple sources are allowed if
destination is an existing directory.
.Sp
Returns true if all copies succeeded, false otherwise.
.IP "chmod" 4
.IX Item "chmod"
.Vb 1
\&    chmod mode files ...
.Ve
.Sp
Sets \s-1UNIX\s0 like permissions 'mode' on all the files.  e.g. 0666
.IP "mkpath" 4
.IX Item "mkpath"
.Vb 1
\&    mkpath directory ...
.Ve
.Sp
Creates directories, including any parent directories.
.IP "test_f" 4
.IX Item "test_f"
.Vb 1
\&    test_f file
.Ve
.Sp
Tests if a file exists.  \fIExits\fR with 0 if it does, 1 if it does not (ie.
shell's idea of true and false).
.IP "test_d" 4
.IX Item "test_d"
.Vb 1
\&    test_d directory
.Ve
.Sp
Tests if a directory exists.  \fIExits\fR with 0 if it does, 1 if it does
not (ie. shell's idea of true and false).
.IP "dos2unix" 4
.IX Item "dos2unix"
.Vb 1
\&    dos2unix files or dirs ...
.Ve
.Sp
Converts \s-1DOS\s0 and \s-1OS/2\s0 linefeeds to Unix style recursively.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Shell::Command which is these same functions but take arguments normally.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nick Ing-Simmons \f(CW\*(C`ni\-s@cpan.org\*(C'\fR
.PP
Maintained by Michael G Schwern \f(CW\*(C`schwern@pobox.com\*(C'\fR within the
ExtUtils-MakeMaker package and, as a separate \s-1CPAN\s0 package, by
Randy Kobes \f(CW\*(C`r.kobes@uwinnipeg.ca\*(C'\fR.
                                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Command::MM.3pm                    0100644 0001750 0001750 00000015567 12566207454 025204  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Command::MM 3pm"
.TH ExtUtils::Command::MM 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Command::MM \- Commands for the MM's to use in Makefiles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  perl "\-MExtUtils::Command::MM" \-e "function" "\-\-" arguments...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1FOR INTERNAL USE ONLY\s0!\fR  The interface is not stable.
.PP
ExtUtils::Command::MM encapsulates code which would otherwise have to
be done with large \*(L"one\*(R" liners.
.PP
Any $(\s-1FOO\s0) used in the examples are make variables, not Perl.
.IP "\fBtest_harness\fR" 4
.IX Item "test_harness"
.Vb 1
\&  test_harness($verbose, @test_libs);
.Ve
.Sp
Runs the tests on \f(CW@ARGV\fR via Test::Harness passing through the \f(CW$verbose\fR
flag.  Any \f(CW@test_libs\fR will be unshifted onto the test's \f(CW@INC\fR.
.Sp
\&\f(CW@test_libs\fR are run in alphabetical order.
.IP "\fBpod2man\fR" 4
.IX Item "pod2man"
.Vb 5
\&  pod2man( \*(Aq\-\-option=value\*(Aq,
\&           $podfile1 => $manpage1,
\&           $podfile2 => $manpage2,
\&           ...
\&         );
\&
\&  # or args on @ARGV
.Ve
.Sp
\&\fIpod2man()\fR is a function performing most of the duties of the pod2man
program.  Its arguments are exactly the same as pod2man as of 5.8.0
with the addition of:
.Sp
.Vb 1
\&    \-\-perm_rw   octal permission to set the resulting manpage to
.Ve
.Sp
And the removal of:
.Sp
.Vb 2
\&    \-\-verbose/\-v
\&    \-\-help/\-h
.Ve
.Sp
If no arguments are given to pod2man it will read from \f(CW@ARGV\fR.
.Sp
If Pod::Man is unavailable, this function will warn and return undef.
.IP "\fBwarn_if_old_packlist\fR" 4
.IX Item "warn_if_old_packlist"
.Vb 1
\&  perl "\-MExtUtils::Command::MM" \-e warn_if_old_packlist <somefile>
.Ve
.Sp
Displays a warning that an old packlist file was found.  Reads the
filename from \f(CW@ARGV\fR.
.IP "\fBperllocal_install\fR" 4
.IX Item "perllocal_install"
.Vb 2
\&    perl "\-MExtUtils::Command::MM" \-e perllocal_install 
\&        <type> <module name> <key> <value> ...
\&
\&    # VMS only, key|value pairs come on STDIN
\&    perl "\-MExtUtils::Command::MM" \-e perllocal_install
\&        <type> <module name> < <key>|<value> ...
.Ve
.Sp
Prints a fragment of \s-1POD\s0 suitable for appending to perllocal.pod.
Arguments are read from \f(CW@ARGV\fR.
.Sp
\&'type' is the type of what you're installing.  Usually 'Module'.
.Sp
\&'module name' is simply the name of your module.  (Foo::Bar)
.Sp
Key/value pairs are extra information about the module.  Fields include:
.Sp
.Vb 5
\&    installed into      which directory your module was out into
\&    LINKTYPE            dynamic or static linking
\&    VERSION             module version number
\&    EXE_FILES           any executables installed in a space seperated 
\&                        list
.Ve
.IP "\fBuninstall\fR" 4
.IX Item "uninstall"
.Vb 1
\&    perl "\-MExtUtils::Command::MM" \-e uninstall <packlist>
.Ve
.Sp
A wrapper around \fIExtUtils::Install::uninstall()\fR.  Warns that
uninstallation is deprecated and doesn't actually perform the
uninstallation.
                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Command::MM5.16.3pm                0100644 0001750 0001750 00000015273 12566207433 025505  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Command::MM 3pm"
.TH ExtUtils::Command::MM 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Command::MM \- Commands for the MM's to use in Makefiles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  perl "\-MExtUtils::Command::MM" \-e "function" "\-\-" arguments...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1FOR\s0 \s-1INTERNAL\s0 \s-1USE\s0 \s-1ONLY\s0!\fR  The interface is not stable.
.PP
ExtUtils::Command::MM encapsulates code which would otherwise have to
be done with large \*(L"one\*(R" liners.
.PP
Any $(\s-1FOO\s0) used in the examples are make variables, not Perl.
.IP "\fBtest_harness\fR" 4
.IX Item "test_harness"
.Vb 1
\&  test_harness($verbose, @test_libs);
.Ve
.Sp
Runs the tests on \f(CW@ARGV\fR via Test::Harness passing through the \f(CW$verbose\fR
flag.  Any \f(CW@test_libs\fR will be unshifted onto the test's \f(CW@INC\fR.
.Sp
\&\f(CW@test_libs\fR are run in alphabetical order.
.IP "\fBpod2man\fR" 4
.IX Item "pod2man"
.Vb 5
\&  pod2man( \*(Aq\-\-option=value\*(Aq,
\&           $podfile1 => $manpage1,
\&           $podfile2 => $manpage2,
\&           ...
\&         );
\&
\&  # or args on @ARGV
.Ve
.Sp
\&\fIpod2man()\fR is a function performing most of the duties of the pod2man
program.  Its arguments are exactly the same as pod2man as of 5.8.0
with the addition of:
.Sp
.Vb 1
\&    \-\-perm_rw   octal permission to set the resulting manpage to
.Ve
.Sp
And the removal of:
.Sp
.Vb 2
\&    \-\-verbose/\-v
\&    \-\-help/\-h
.Ve
.Sp
If no arguments are given to pod2man it will read from \f(CW@ARGV\fR.
.Sp
If Pod::Man is unavailable, this function will warn and return undef.
.IP "\fBwarn_if_old_packlist\fR" 4
.IX Item "warn_if_old_packlist"
.Vb 1
\&  perl "\-MExtUtils::Command::MM" \-e warn_if_old_packlist <somefile>
.Ve
.Sp
Displays a warning that an old packlist file was found.  Reads the
filename from \f(CW@ARGV\fR.
.IP "\fBperllocal_install\fR" 4
.IX Item "perllocal_install"
.Vb 2
\&    perl "\-MExtUtils::Command::MM" \-e perllocal_install 
\&        <type> <module name> <key> <value> ...
\&
\&    # VMS only, key|value pairs come on STDIN
\&    perl "\-MExtUtils::Command::MM" \-e perllocal_install
\&        <type> <module name> < <key>|<value> ...
.Ve
.Sp
Prints a fragment of \s-1POD\s0 suitable for appending to perllocal.pod.
Arguments are read from \f(CW@ARGV\fR.
.Sp
\&'type' is the type of what you're installing.  Usually 'Module'.
.Sp
\&'module name' is simply the name of your module.  (Foo::Bar)
.Sp
Key/value pairs are extra information about the module.  Fields include:
.Sp
.Vb 5
\&    installed into      which directory your module was out into
\&    LINKTYPE            dynamic or static linking
\&    VERSION             module version number
\&    EXE_FILES           any executables installed in a space seperated 
\&                        list
.Ve
.IP "\fBuninstall\fR" 4
.IX Item "uninstall"
.Vb 1
\&    perl "\-MExtUtils::Command::MM" \-e uninstall <packlist>
.Ve
.Sp
A wrapper around \fIExtUtils::Install::uninstall()\fR.  Warns that
uninstallation is deprecated and doesn't actually perform the
uninstallation.
                                                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Command::MM5.18.3pm                0100644 0001750 0001750 00000015567 12566207454 025520  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Command::MM 3pm"
.TH ExtUtils::Command::MM 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Command::MM \- Commands for the MM's to use in Makefiles
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  perl "\-MExtUtils::Command::MM" \-e "function" "\-\-" arguments...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1FOR INTERNAL USE ONLY\s0!\fR  The interface is not stable.
.PP
ExtUtils::Command::MM encapsulates code which would otherwise have to
be done with large \*(L"one\*(R" liners.
.PP
Any $(\s-1FOO\s0) used in the examples are make variables, not Perl.
.IP "\fBtest_harness\fR" 4
.IX Item "test_harness"
.Vb 1
\&  test_harness($verbose, @test_libs);
.Ve
.Sp
Runs the tests on \f(CW@ARGV\fR via Test::Harness passing through the \f(CW$verbose\fR
flag.  Any \f(CW@test_libs\fR will be unshifted onto the test's \f(CW@INC\fR.
.Sp
\&\f(CW@test_libs\fR are run in alphabetical order.
.IP "\fBpod2man\fR" 4
.IX Item "pod2man"
.Vb 5
\&  pod2man( \*(Aq\-\-option=value\*(Aq,
\&           $podfile1 => $manpage1,
\&           $podfile2 => $manpage2,
\&           ...
\&         );
\&
\&  # or args on @ARGV
.Ve
.Sp
\&\fIpod2man()\fR is a function performing most of the duties of the pod2man
program.  Its arguments are exactly the same as pod2man as of 5.8.0
with the addition of:
.Sp
.Vb 1
\&    \-\-perm_rw   octal permission to set the resulting manpage to
.Ve
.Sp
And the removal of:
.Sp
.Vb 2
\&    \-\-verbose/\-v
\&    \-\-help/\-h
.Ve
.Sp
If no arguments are given to pod2man it will read from \f(CW@ARGV\fR.
.Sp
If Pod::Man is unavailable, this function will warn and return undef.
.IP "\fBwarn_if_old_packlist\fR" 4
.IX Item "warn_if_old_packlist"
.Vb 1
\&  perl "\-MExtUtils::Command::MM" \-e warn_if_old_packlist <somefile>
.Ve
.Sp
Displays a warning that an old packlist file was found.  Reads the
filename from \f(CW@ARGV\fR.
.IP "\fBperllocal_install\fR" 4
.IX Item "perllocal_install"
.Vb 2
\&    perl "\-MExtUtils::Command::MM" \-e perllocal_install 
\&        <type> <module name> <key> <value> ...
\&
\&    # VMS only, key|value pairs come on STDIN
\&    perl "\-MExtUtils::Command::MM" \-e perllocal_install
\&        <type> <module name> < <key>|<value> ...
.Ve
.Sp
Prints a fragment of \s-1POD\s0 suitable for appending to perllocal.pod.
Arguments are read from \f(CW@ARGV\fR.
.Sp
\&'type' is the type of what you're installing.  Usually 'Module'.
.Sp
\&'module name' is simply the name of your module.  (Foo::Bar)
.Sp
Key/value pairs are extra information about the module.  Fields include:
.Sp
.Vb 5
\&    installed into      which directory your module was out into
\&    LINKTYPE            dynamic or static linking
\&    VERSION             module version number
\&    EXE_FILES           any executables installed in a space seperated 
\&                        list
.Ve
.IP "\fBuninstall\fR" 4
.IX Item "uninstall"
.Vb 1
\&    perl "\-MExtUtils::Command::MM" \-e uninstall <packlist>
.Ve
.Sp
A wrapper around \fIExtUtils::Install::uninstall()\fR.  Warns that
uninstallation is deprecated and doesn't actually perform the
uninstallation.
                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Config.3pm                         0100644 0001750 0001750 00000013410 12566242347 024376  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Config 3"
.TH ExtUtils::Config 3 "2012-10-17" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Config \- A wrapper for perl's configuration
.SH "VERSION"
.IX Header "VERSION"
version 0.007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my $config = ExtUtils::Config\->new();
\& $config\->set(\*(Aqinstallsitelib\*(Aq, "$ENV{HOME}/lib");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Config is an abstraction around the \f(CW%Config\fR hash.
.SH "METHODS"
.IX Header "METHODS"
.SS "new(\e%config)"
.IX Subsection "new(%config)"
Create a new ExtUtils::Config object. The values in \f(CW\*(C`\e%config\*(C'\fR are used to initialize the object.
.SS "get($key)"
.IX Subsection "get($key)"
Get the value of \f(CW$key\fR. If not overriden it will return the value in \f(CW%Config\fR.
.SS "exists($key)"
.IX Subsection "exists($key)"
Tests for the existence of \f(CW$key\fR.
.ie n .SS "set($key, $value)"
.el .SS "set($key, \f(CW$value\fP)"
.IX Subsection "set($key, $value)"
Set/override the value of \f(CW$key\fR to \f(CW$value\fR.
.SS "clear($key)"
.IX Subsection "clear($key)"
Reset the value of \f(CW$key\fR to its original value.
.SS "\fIvalues_set()\fP"
.IX Subsection "values_set()"
Get a hashref of all overridden values.
.SS "\fIall_config()\fP"
.IX Subsection "all_config()"
Get a hashref of the complete configuration, including overrides.
.SS "\fIclone()\fP"
.IX Subsection "clone()"
Clone the current configuration object.
.SS "\fIserialize()\fP"
.IX Subsection "serialize()"
This method serializes the object to some kind of string.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Config5.18.3pm                     0100644 0001750 0001750 00000013410 12566242347 024712  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Config 3"
.TH ExtUtils::Config 3 "2012-10-17" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Config \- A wrapper for perl's configuration
.SH "VERSION"
.IX Header "VERSION"
version 0.007
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& my $config = ExtUtils::Config\->new();
\& $config\->set(\*(Aqinstallsitelib\*(Aq, "$ENV{HOME}/lib");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Config is an abstraction around the \f(CW%Config\fR hash.
.SH "METHODS"
.IX Header "METHODS"
.SS "new(\e%config)"
.IX Subsection "new(%config)"
Create a new ExtUtils::Config object. The values in \f(CW\*(C`\e%config\*(C'\fR are used to initialize the object.
.SS "get($key)"
.IX Subsection "get($key)"
Get the value of \f(CW$key\fR. If not overriden it will return the value in \f(CW%Config\fR.
.SS "exists($key)"
.IX Subsection "exists($key)"
Tests for the existence of \f(CW$key\fR.
.ie n .SS "set($key, $value)"
.el .SS "set($key, \f(CW$value\fP)"
.IX Subsection "set($key, $value)"
Set/override the value of \f(CW$key\fR to \f(CW$value\fR.
.SS "clear($key)"
.IX Subsection "clear($key)"
Reset the value of \f(CW$key\fR to its original value.
.SS "\fIvalues_set()\fP"
.IX Subsection "values_set()"
Get a hashref of all overridden values.
.SS "\fIall_config()\fP"
.IX Subsection "all_config()"
Get a hashref of the complete configuration, including overrides.
.SS "\fIclone()\fP"
.IX Subsection "clone()"
Clone the current configuration object.
.SS "\fIserialize()\fP"
.IX Subsection "serialize()"
This method serializes the object to some kind of string.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2006 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant.3pm                       0100644 0001750 0001750 00000026574 12566207454 025001  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant 3pm"
.TH ExtUtils::Constant 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant \- generate XS code to import C header constants
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    use ExtUtils::Constant qw (WriteConstants);
\&    WriteConstants(
\&        NAME => \*(AqFoo\*(Aq,
\&        NAMES => [qw(FOO BAR BAZ)],
\&    );
\&    # Generates wrapper code to make the values of the constants FOO BAR BAZ
\&    #  available to perl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant facilitates generating C and \s-1XS\s0 wrapper code to allow
perl modules to \s-1AUTOLOAD\s0 constants defined in C library header files.
It is principally used by the \f(CW\*(C`h2xs\*(C'\fR utility, on which this code is based.
It doesn't contain the routines to scan header files to extract these
constants.
.SH "USAGE"
.IX Header "USAGE"
Generally one only needs to call the \f(CW\*(C`WriteConstants\*(C'\fR function, and then
.PP
.Vb 1
\&    #include "const\-c.inc"
.Ve
.PP
in the C section of \f(CW\*(C`Foo.xs\*(C'\fR
.PP
.Vb 1
\&    INCLUDE: const\-xs.inc
.Ve
.PP
in the \s-1XS\s0 section of \f(CW\*(C`Foo.xs\*(C'\fR.
.PP
For greater flexibility use \f(CW\*(C`constant_types()\*(C'\fR, \f(CW\*(C`C_constant\*(C'\fR and
\&\f(CW\*(C`XS_constant\*(C'\fR, with which \f(CW\*(C`WriteConstants\*(C'\fR is implemented.
.PP
Currently this module understands the following types. h2xs may only know
a subset. The sizes of the numeric types are chosen by the \f(CW\*(C`Configure\*(C'\fR
script at compile time.
.IP "\s-1IV\s0" 4
.IX Item "IV"
signed integer, at least 32 bits.
.IP "\s-1UV\s0" 4
.IX Item "UV"
unsigned integer, the same size as \fI\s-1IV\s0\fR
.IP "\s-1NV\s0" 4
.IX Item "NV"
floating point type, probably \f(CW\*(C`double\*(C'\fR, possibly \f(CW\*(C`long double\*(C'\fR
.IP "\s-1PV\s0" 4
.IX Item "PV"
\&\s-1NUL\s0 terminated string, length will be determined with \f(CW\*(C`strlen\*(C'\fR
.IP "\s-1PVN\s0" 4
.IX Item "PVN"
A fixed length thing, given as a [pointer, length] pair. If you know the
length of a string at compile time you may use this instead of \fI\s-1PV\s0\fR
.IP "\s-1SV\s0" 4
.IX Item "SV"
A \fBmortal\fR \s-1SV.\s0
.IP "\s-1YES\s0" 4
.IX Item "YES"
Truth.  (\f(CW\*(C`PL_sv_yes\*(C'\fR)  The value is not needed (and ignored).
.IP "\s-1NO\s0" 4
.IX Item "NO"
Defined Falsehood.  (\f(CW\*(C`PL_sv_no\*(C'\fR)  The value is not needed (and ignored).
.IP "\s-1UNDEF\s0" 4
.IX Item "UNDEF"
\&\f(CW\*(C`undef\*(C'\fR.  The value of the macro is not needed.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "constant_types" 4
.IX Item "constant_types"
A function returning a single scalar with \f(CW\*(C`#define\*(C'\fR definitions for the
constants used internally between the generated C and \s-1XS\s0 functions.
.IP "XS_constant \s-1PACKAGE, TYPES, XS_SUBNAME, C_SUBNAME\s0" 4
.IX Item "XS_constant PACKAGE, TYPES, XS_SUBNAME, C_SUBNAME"
A function to generate the \s-1XS\s0 code to implement the perl subroutine
\&\fI\s-1PACKAGE\s0\fR::constant used by \fI\s-1PACKAGE\s0\fR::AUTOLOAD to load constants.
This \s-1XS\s0 code is a wrapper around a C subroutine usually generated by
\&\f(CW\*(C`C_constant\*(C'\fR, and usually named \f(CW\*(C`constant\*(C'\fR.
.Sp
\&\fI\s-1TYPES\s0\fR should be given either as a comma separated list of types that the
C subroutine \f(CW\*(C`constant\*(C'\fR will generate or as a reference to a hash. It should
be the same list of types as \f(CW\*(C`C_constant\*(C'\fR was given.
[Otherwise \f(CW\*(C`XS_constant\*(C'\fR and \f(CW\*(C`C_constant\*(C'\fR may have different ideas about
the number of parameters passed to the C function \f(CW\*(C`constant\*(C'\fR]
.Sp
You can call the perl visible subroutine something other than \f(CW\*(C`constant\*(C'\fR if
you give the parameter \fI\s-1XS_SUBNAME\s0\fR. The C subroutine it calls defaults to
the name of the perl visible subroutine, unless you give the parameter
\&\fIC_SUBNAME\fR.
.IP "autoload \s-1PACKAGE, VERSION, AUTOLOADER\s0" 4
.IX Item "autoload PACKAGE, VERSION, AUTOLOADER"
A function to generate the \s-1AUTOLOAD\s0 subroutine for the module \fI\s-1PACKAGE\s0\fR
\&\fI\s-1VERSION\s0\fR is the perl version the code should be backwards compatible with.
It defaults to the version of perl running the subroutine.  If \fI\s-1AUTOLOADER\s0\fR
is true, the \s-1AUTOLOAD\s0 subroutine falls back on AutoLoader::AUTOLOAD for all
names that the \fIconstant()\fR routine doesn't recognise.
.IP "WriteMakefileSnippet" 4
.IX Item "WriteMakefileSnippet"
WriteMakefileSnippet \s-1ATTRIBUTE\s0 => \s-1VALUE\s0 [, ...]
.Sp
A function to generate perl code for Makefile.PL that will regenerate
the constant subroutines.  Parameters are named as passed to \f(CW\*(C`WriteConstants\*(C'\fR,
with the addition of \f(CW\*(C`INDENT\*(C'\fR to specify the number of leading spaces
(default 2).
.Sp
Currently only \f(CW\*(C`INDENT\*(C'\fR, \f(CW\*(C`NAME\*(C'\fR, \f(CW\*(C`DEFAULT_TYPE\*(C'\fR, \f(CW\*(C`NAMES\*(C'\fR, \f(CW\*(C`C_FILE\*(C'\fR and
\&\f(CW\*(C`XS_FILE\*(C'\fR are recognised.
.IP "WriteConstants \s-1ATTRIBUTE\s0 => \s-1VALUE\s0 [, ...]" 4
.IX Item "WriteConstants ATTRIBUTE => VALUE [, ...]"
Writes a file of C code and a file of \s-1XS\s0 code which you should \f(CW\*(C`#include\*(C'\fR
and \f(CW\*(C`INCLUDE\*(C'\fR in the C and \s-1XS\s0 sections respectively of your module's \s-1XS\s0
code.  You probably want to do this in your \f(CW\*(C`Makefile.PL\*(C'\fR, so that you can
easily edit the list of constants without touching the rest of your module.
The attributes supported are
.RS 4
.IP "\s-1NAME\s0" 4
.IX Item "NAME"
Name of the module.  This must be specified
.IP "\s-1DEFAULT_TYPE\s0" 4
.IX Item "DEFAULT_TYPE"
The default type for the constants.  If not specified \f(CW\*(C`IV\*(C'\fR is assumed.
.IP "\s-1BREAKOUT_AT\s0" 4
.IX Item "BREAKOUT_AT"
The names of the constants are grouped by length.  Generate child subroutines
for each group with this number or more names in.
.IP "\s-1NAMES\s0" 4
.IX Item "NAMES"
An array of constants' names, either scalars containing names, or hashrefs
as detailed in \*(L"C_constant\*(R".
.IP "\s-1PROXYSUBS\s0" 4
.IX Item "PROXYSUBS"
If true, uses proxy subs. See ExtUtils::Constant::ProxySubs.
.IP "C_FH" 4
.IX Item "C_FH"
A filehandle to write the C code to.  If not given, then \fIC_FILE\fR is opened
for writing.
.IP "C_FILE" 4
.IX Item "C_FILE"
The name of the file to write containing the C code.  The default is
\&\f(CW\*(C`const\-c.inc\*(C'\fR.  The \f(CW\*(C`\-\*(C'\fR in the name ensures that the file can't be
mistaken for anything related to a legitimate perl package name, and
not naming the file \f(CW\*(C`.c\*(C'\fR avoids having to override Makefile.PL's
\&\f(CW\*(C`.xs\*(C'\fR to \f(CW\*(C`.c\*(C'\fR rules.
.IP "\s-1XS_FH\s0" 4
.IX Item "XS_FH"
A filehandle to write the \s-1XS\s0 code to.  If not given, then \fI\s-1XS_FILE\s0\fR is opened
for writing.
.IP "\s-1XS_FILE\s0" 4
.IX Item "XS_FILE"
The name of the file to write containing the \s-1XS\s0 code.  The default is
\&\f(CW\*(C`const\-xs.inc\*(C'\fR.
.IP "\s-1XS_SUBNAME\s0" 4
.IX Item "XS_SUBNAME"
The perl visible name of the \s-1XS\s0 subroutine generated which will return the
constants. The default is \f(CW\*(C`constant\*(C'\fR.
.IP "C_SUBNAME" 4
.IX Item "C_SUBNAME"
The name of the C subroutine generated which will return the constants.
The default is \fI\s-1XS_SUBNAME\s0\fR.  Child subroutines have \f(CW\*(C`_\*(C'\fR and the name
length appended, so constants with 10 character names would be in
\&\f(CW\*(C`constant_10\*(C'\fR with the default \fI\s-1XS_SUBNAME\s0\fR.
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant5.16.3pm                   0100644 0001750 0001750 00000026307 12566207433 025302  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant 3pm"
.TH ExtUtils::Constant 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant \- generate XS code to import C header constants
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    use ExtUtils::Constant qw (WriteConstants);
\&    WriteConstants(
\&        NAME => \*(AqFoo\*(Aq,
\&        NAMES => [qw(FOO BAR BAZ)],
\&    );
\&    # Generates wrapper code to make the values of the constants FOO BAR BAZ
\&    #  available to perl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant facilitates generating C and \s-1XS\s0 wrapper code to allow
perl modules to \s-1AUTOLOAD\s0 constants defined in C library header files.
It is principally used by the \f(CW\*(C`h2xs\*(C'\fR utility, on which this code is based.
It doesn't contain the routines to scan header files to extract these
constants.
.SH "USAGE"
.IX Header "USAGE"
Generally one only needs to call the \f(CW\*(C`WriteConstants\*(C'\fR function, and then
.PP
.Vb 1
\&    #include "const\-c.inc"
.Ve
.PP
in the C section of \f(CW\*(C`Foo.xs\*(C'\fR
.PP
.Vb 1
\&    INCLUDE: const\-xs.inc
.Ve
.PP
in the \s-1XS\s0 section of \f(CW\*(C`Foo.xs\*(C'\fR.
.PP
For greater flexibility use \f(CW\*(C`constant_types()\*(C'\fR, \f(CW\*(C`C_constant\*(C'\fR and
\&\f(CW\*(C`XS_constant\*(C'\fR, with which \f(CW\*(C`WriteConstants\*(C'\fR is implemented.
.PP
Currently this module understands the following types. h2xs may only know
a subset. The sizes of the numeric types are chosen by the \f(CW\*(C`Configure\*(C'\fR
script at compile time.
.IP "\s-1IV\s0" 4
.IX Item "IV"
signed integer, at least 32 bits.
.IP "\s-1UV\s0" 4
.IX Item "UV"
unsigned integer, the same size as \fI\s-1IV\s0\fR
.IP "\s-1NV\s0" 4
.IX Item "NV"
floating point type, probably \f(CW\*(C`double\*(C'\fR, possibly \f(CW\*(C`long double\*(C'\fR
.IP "\s-1PV\s0" 4
.IX Item "PV"
\&\s-1NUL\s0 terminated string, length will be determined with \f(CW\*(C`strlen\*(C'\fR
.IP "\s-1PVN\s0" 4
.IX Item "PVN"
A fixed length thing, given as a [pointer, length] pair. If you know the
length of a string at compile time you may use this instead of \fI\s-1PV\s0\fR
.IP "\s-1SV\s0" 4
.IX Item "SV"
A \fBmortal\fR \s-1SV\s0.
.IP "\s-1YES\s0" 4
.IX Item "YES"
Truth.  (\f(CW\*(C`PL_sv_yes\*(C'\fR)  The value is not needed (and ignored).
.IP "\s-1NO\s0" 4
.IX Item "NO"
Defined Falsehood.  (\f(CW\*(C`PL_sv_no\*(C'\fR)  The value is not needed (and ignored).
.IP "\s-1UNDEF\s0" 4
.IX Item "UNDEF"
\&\f(CW\*(C`undef\*(C'\fR.  The value of the macro is not needed.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "constant_types" 4
.IX Item "constant_types"
A function returning a single scalar with \f(CW\*(C`#define\*(C'\fR definitions for the
constants used internally between the generated C and \s-1XS\s0 functions.
.IP "XS_constant \s-1PACKAGE\s0, \s-1TYPES\s0, \s-1XS_SUBNAME\s0, C_SUBNAME" 4
.IX Item "XS_constant PACKAGE, TYPES, XS_SUBNAME, C_SUBNAME"
A function to generate the \s-1XS\s0 code to implement the perl subroutine
\&\fI\s-1PACKAGE\s0\fR::constant used by \fI\s-1PACKAGE\s0\fR::AUTOLOAD to load constants.
This \s-1XS\s0 code is a wrapper around a C subroutine usually generated by
\&\f(CW\*(C`C_constant\*(C'\fR, and usually named \f(CW\*(C`constant\*(C'\fR.
.Sp
\&\fI\s-1TYPES\s0\fR should be given either as a comma separated list of types that the
C subroutine \f(CW\*(C`constant\*(C'\fR will generate or as a reference to a hash. It should
be the same list of types as \f(CW\*(C`C_constant\*(C'\fR was given.
[Otherwise \f(CW\*(C`XS_constant\*(C'\fR and \f(CW\*(C`C_constant\*(C'\fR may have different ideas about
the number of parameters passed to the C function \f(CW\*(C`constant\*(C'\fR]
.Sp
You can call the perl visible subroutine something other than \f(CW\*(C`constant\*(C'\fR if
you give the parameter \fI\s-1XS_SUBNAME\s0\fR. The C subroutine it calls defaults to
the name of the perl visible subroutine, unless you give the parameter
\&\fIC_SUBNAME\fR.
.IP "autoload \s-1PACKAGE\s0, \s-1VERSION\s0, \s-1AUTOLOADER\s0" 4
.IX Item "autoload PACKAGE, VERSION, AUTOLOADER"
A function to generate the \s-1AUTOLOAD\s0 subroutine for the module \fI\s-1PACKAGE\s0\fR
\&\fI\s-1VERSION\s0\fR is the perl version the code should be backwards compatible with.
It defaults to the version of perl running the subroutine.  If \fI\s-1AUTOLOADER\s0\fR
is true, the \s-1AUTOLOAD\s0 subroutine falls back on AutoLoader::AUTOLOAD for all
names that the \fIconstant()\fR routine doesn't recognise.
.IP "WriteMakefileSnippet" 4
.IX Item "WriteMakefileSnippet"
WriteMakefileSnippet \s-1ATTRIBUTE\s0 => \s-1VALUE\s0 [, ...]
.Sp
A function to generate perl code for Makefile.PL that will regenerate
the constant subroutines.  Parameters are named as passed to \f(CW\*(C`WriteConstants\*(C'\fR,
with the addition of \f(CW\*(C`INDENT\*(C'\fR to specify the number of leading spaces
(default 2).
.Sp
Currently only \f(CW\*(C`INDENT\*(C'\fR, \f(CW\*(C`NAME\*(C'\fR, \f(CW\*(C`DEFAULT_TYPE\*(C'\fR, \f(CW\*(C`NAMES\*(C'\fR, \f(CW\*(C`C_FILE\*(C'\fR and
\&\f(CW\*(C`XS_FILE\*(C'\fR are recognised.
.IP "WriteConstants \s-1ATTRIBUTE\s0 => \s-1VALUE\s0 [, ...]" 4
.IX Item "WriteConstants ATTRIBUTE => VALUE [, ...]"
Writes a file of C code and a file of \s-1XS\s0 code which you should \f(CW\*(C`#include\*(C'\fR
and \f(CW\*(C`INCLUDE\*(C'\fR in the C and \s-1XS\s0 sections respectively of your module's \s-1XS\s0
code.  You probably want to do this in your \f(CW\*(C`Makefile.PL\*(C'\fR, so that you can
easily edit the list of constants without touching the rest of your module.
The attributes supported are
.RS 4
.IP "\s-1NAME\s0" 4
.IX Item "NAME"
Name of the module.  This must be specified
.IP "\s-1DEFAULT_TYPE\s0" 4
.IX Item "DEFAULT_TYPE"
The default type for the constants.  If not specified \f(CW\*(C`IV\*(C'\fR is assumed.
.IP "\s-1BREAKOUT_AT\s0" 4
.IX Item "BREAKOUT_AT"
The names of the constants are grouped by length.  Generate child subroutines
for each group with this number or more names in.
.IP "\s-1NAMES\s0" 4
.IX Item "NAMES"
An array of constants' names, either scalars containing names, or hashrefs
as detailed in \*(L"C_constant\*(R".
.IP "\s-1PROXYSUBS\s0" 4
.IX Item "PROXYSUBS"
If true, uses proxy subs. See ExtUtils::Constant::ProxySubs.
.IP "C_FH" 4
.IX Item "C_FH"
A filehandle to write the C code to.  If not given, then \fIC_FILE\fR is opened
for writing.
.IP "C_FILE" 4
.IX Item "C_FILE"
The name of the file to write containing the C code.  The default is
\&\f(CW\*(C`const\-c.inc\*(C'\fR.  The \f(CW\*(C`\-\*(C'\fR in the name ensures that the file can't be
mistaken for anything related to a legitimate perl package name, and
not naming the file \f(CW\*(C`.c\*(C'\fR avoids having to override Makefile.PL's
\&\f(CW\*(C`.xs\*(C'\fR to \f(CW\*(C`.c\*(C'\fR rules.
.IP "\s-1XS_FH\s0" 4
.IX Item "XS_FH"
A filehandle to write the \s-1XS\s0 code to.  If not given, then \fI\s-1XS_FILE\s0\fR is opened
for writing.
.IP "\s-1XS_FILE\s0" 4
.IX Item "XS_FILE"
The name of the file to write containing the \s-1XS\s0 code.  The default is
\&\f(CW\*(C`const\-xs.inc\*(C'\fR.
.IP "\s-1XS_SUBNAME\s0" 4
.IX Item "XS_SUBNAME"
The perl visible name of the \s-1XS\s0 subroutine generated which will return the
constants. The default is \f(CW\*(C`constant\*(C'\fR.
.IP "C_SUBNAME" 4
.IX Item "C_SUBNAME"
The name of the C subroutine generated which will return the constants.
The default is \fI\s-1XS_SUBNAME\s0\fR.  Child subroutines have \f(CW\*(C`_\*(C'\fR and the name
length appended, so constants with 10 character names would be in
\&\f(CW\*(C`constant_10\*(C'\fR with the default \fI\s-1XS_SUBNAME\s0\fR.
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                                                                                                                                                                                                                                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant5.18.3pm                   0100644 0001750 0001750 00000026574 12566207454 025315  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant 3pm"
.TH ExtUtils::Constant 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant \- generate XS code to import C header constants
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&    use ExtUtils::Constant qw (WriteConstants);
\&    WriteConstants(
\&        NAME => \*(AqFoo\*(Aq,
\&        NAMES => [qw(FOO BAR BAZ)],
\&    );
\&    # Generates wrapper code to make the values of the constants FOO BAR BAZ
\&    #  available to perl
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant facilitates generating C and \s-1XS\s0 wrapper code to allow
perl modules to \s-1AUTOLOAD\s0 constants defined in C library header files.
It is principally used by the \f(CW\*(C`h2xs\*(C'\fR utility, on which this code is based.
It doesn't contain the routines to scan header files to extract these
constants.
.SH "USAGE"
.IX Header "USAGE"
Generally one only needs to call the \f(CW\*(C`WriteConstants\*(C'\fR function, and then
.PP
.Vb 1
\&    #include "const\-c.inc"
.Ve
.PP
in the C section of \f(CW\*(C`Foo.xs\*(C'\fR
.PP
.Vb 1
\&    INCLUDE: const\-xs.inc
.Ve
.PP
in the \s-1XS\s0 section of \f(CW\*(C`Foo.xs\*(C'\fR.
.PP
For greater flexibility use \f(CW\*(C`constant_types()\*(C'\fR, \f(CW\*(C`C_constant\*(C'\fR and
\&\f(CW\*(C`XS_constant\*(C'\fR, with which \f(CW\*(C`WriteConstants\*(C'\fR is implemented.
.PP
Currently this module understands the following types. h2xs may only know
a subset. The sizes of the numeric types are chosen by the \f(CW\*(C`Configure\*(C'\fR
script at compile time.
.IP "\s-1IV\s0" 4
.IX Item "IV"
signed integer, at least 32 bits.
.IP "\s-1UV\s0" 4
.IX Item "UV"
unsigned integer, the same size as \fI\s-1IV\s0\fR
.IP "\s-1NV\s0" 4
.IX Item "NV"
floating point type, probably \f(CW\*(C`double\*(C'\fR, possibly \f(CW\*(C`long double\*(C'\fR
.IP "\s-1PV\s0" 4
.IX Item "PV"
\&\s-1NUL\s0 terminated string, length will be determined with \f(CW\*(C`strlen\*(C'\fR
.IP "\s-1PVN\s0" 4
.IX Item "PVN"
A fixed length thing, given as a [pointer, length] pair. If you know the
length of a string at compile time you may use this instead of \fI\s-1PV\s0\fR
.IP "\s-1SV\s0" 4
.IX Item "SV"
A \fBmortal\fR \s-1SV.\s0
.IP "\s-1YES\s0" 4
.IX Item "YES"
Truth.  (\f(CW\*(C`PL_sv_yes\*(C'\fR)  The value is not needed (and ignored).
.IP "\s-1NO\s0" 4
.IX Item "NO"
Defined Falsehood.  (\f(CW\*(C`PL_sv_no\*(C'\fR)  The value is not needed (and ignored).
.IP "\s-1UNDEF\s0" 4
.IX Item "UNDEF"
\&\f(CW\*(C`undef\*(C'\fR.  The value of the macro is not needed.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "constant_types" 4
.IX Item "constant_types"
A function returning a single scalar with \f(CW\*(C`#define\*(C'\fR definitions for the
constants used internally between the generated C and \s-1XS\s0 functions.
.IP "XS_constant \s-1PACKAGE, TYPES, XS_SUBNAME, C_SUBNAME\s0" 4
.IX Item "XS_constant PACKAGE, TYPES, XS_SUBNAME, C_SUBNAME"
A function to generate the \s-1XS\s0 code to implement the perl subroutine
\&\fI\s-1PACKAGE\s0\fR::constant used by \fI\s-1PACKAGE\s0\fR::AUTOLOAD to load constants.
This \s-1XS\s0 code is a wrapper around a C subroutine usually generated by
\&\f(CW\*(C`C_constant\*(C'\fR, and usually named \f(CW\*(C`constant\*(C'\fR.
.Sp
\&\fI\s-1TYPES\s0\fR should be given either as a comma separated list of types that the
C subroutine \f(CW\*(C`constant\*(C'\fR will generate or as a reference to a hash. It should
be the same list of types as \f(CW\*(C`C_constant\*(C'\fR was given.
[Otherwise \f(CW\*(C`XS_constant\*(C'\fR and \f(CW\*(C`C_constant\*(C'\fR may have different ideas about
the number of parameters passed to the C function \f(CW\*(C`constant\*(C'\fR]
.Sp
You can call the perl visible subroutine something other than \f(CW\*(C`constant\*(C'\fR if
you give the parameter \fI\s-1XS_SUBNAME\s0\fR. The C subroutine it calls defaults to
the name of the perl visible subroutine, unless you give the parameter
\&\fIC_SUBNAME\fR.
.IP "autoload \s-1PACKAGE, VERSION, AUTOLOADER\s0" 4
.IX Item "autoload PACKAGE, VERSION, AUTOLOADER"
A function to generate the \s-1AUTOLOAD\s0 subroutine for the module \fI\s-1PACKAGE\s0\fR
\&\fI\s-1VERSION\s0\fR is the perl version the code should be backwards compatible with.
It defaults to the version of perl running the subroutine.  If \fI\s-1AUTOLOADER\s0\fR
is true, the \s-1AUTOLOAD\s0 subroutine falls back on AutoLoader::AUTOLOAD for all
names that the \fIconstant()\fR routine doesn't recognise.
.IP "WriteMakefileSnippet" 4
.IX Item "WriteMakefileSnippet"
WriteMakefileSnippet \s-1ATTRIBUTE\s0 => \s-1VALUE\s0 [, ...]
.Sp
A function to generate perl code for Makefile.PL that will regenerate
the constant subroutines.  Parameters are named as passed to \f(CW\*(C`WriteConstants\*(C'\fR,
with the addition of \f(CW\*(C`INDENT\*(C'\fR to specify the number of leading spaces
(default 2).
.Sp
Currently only \f(CW\*(C`INDENT\*(C'\fR, \f(CW\*(C`NAME\*(C'\fR, \f(CW\*(C`DEFAULT_TYPE\*(C'\fR, \f(CW\*(C`NAMES\*(C'\fR, \f(CW\*(C`C_FILE\*(C'\fR and
\&\f(CW\*(C`XS_FILE\*(C'\fR are recognised.
.IP "WriteConstants \s-1ATTRIBUTE\s0 => \s-1VALUE\s0 [, ...]" 4
.IX Item "WriteConstants ATTRIBUTE => VALUE [, ...]"
Writes a file of C code and a file of \s-1XS\s0 code which you should \f(CW\*(C`#include\*(C'\fR
and \f(CW\*(C`INCLUDE\*(C'\fR in the C and \s-1XS\s0 sections respectively of your module's \s-1XS\s0
code.  You probably want to do this in your \f(CW\*(C`Makefile.PL\*(C'\fR, so that you can
easily edit the list of constants without touching the rest of your module.
The attributes supported are
.RS 4
.IP "\s-1NAME\s0" 4
.IX Item "NAME"
Name of the module.  This must be specified
.IP "\s-1DEFAULT_TYPE\s0" 4
.IX Item "DEFAULT_TYPE"
The default type for the constants.  If not specified \f(CW\*(C`IV\*(C'\fR is assumed.
.IP "\s-1BREAKOUT_AT\s0" 4
.IX Item "BREAKOUT_AT"
The names of the constants are grouped by length.  Generate child subroutines
for each group with this number or more names in.
.IP "\s-1NAMES\s0" 4
.IX Item "NAMES"
An array of constants' names, either scalars containing names, or hashrefs
as detailed in \*(L"C_constant\*(R".
.IP "\s-1PROXYSUBS\s0" 4
.IX Item "PROXYSUBS"
If true, uses proxy subs. See ExtUtils::Constant::ProxySubs.
.IP "C_FH" 4
.IX Item "C_FH"
A filehandle to write the C code to.  If not given, then \fIC_FILE\fR is opened
for writing.
.IP "C_FILE" 4
.IX Item "C_FILE"
The name of the file to write containing the C code.  The default is
\&\f(CW\*(C`const\-c.inc\*(C'\fR.  The \f(CW\*(C`\-\*(C'\fR in the name ensures that the file can't be
mistaken for anything related to a legitimate perl package name, and
not naming the file \f(CW\*(C`.c\*(C'\fR avoids having to override Makefile.PL's
\&\f(CW\*(C`.xs\*(C'\fR to \f(CW\*(C`.c\*(C'\fR rules.
.IP "\s-1XS_FH\s0" 4
.IX Item "XS_FH"
A filehandle to write the \s-1XS\s0 code to.  If not given, then \fI\s-1XS_FILE\s0\fR is opened
for writing.
.IP "\s-1XS_FILE\s0" 4
.IX Item "XS_FILE"
The name of the file to write containing the \s-1XS\s0 code.  The default is
\&\f(CW\*(C`const\-xs.inc\*(C'\fR.
.IP "\s-1XS_SUBNAME\s0" 4
.IX Item "XS_SUBNAME"
The perl visible name of the \s-1XS\s0 subroutine generated which will return the
constants. The default is \f(CW\*(C`constant\*(C'\fR.
.IP "C_SUBNAME" 4
.IX Item "C_SUBNAME"
The name of the C subroutine generated which will return the constants.
The default is \fI\s-1XS_SUBNAME\s0\fR.  Child subroutines have \f(CW\*(C`_\*(C'\fR and the name
length appended, so constants with 10 character names would be in
\&\f(CW\*(C`constant_10\*(C'\fR with the default \fI\s-1XS_SUBNAME\s0\fR.
.RE
.RS 4
.RE
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant::Base.3pm                 0100644 0001750 0001750 00000032667 12566207454 025760  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant::Base 3pm"
.TH ExtUtils::Constant::Base 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant::Base \- base class for ExtUtils::Constant objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    require ExtUtils::Constant::Base;
\&    @ISA = \*(AqExtUtils::Constant::Base\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant::Base provides a base implementation of methods to
generate C code to give fast constant value lookup by named string. Currently
it's mostly used ExtUtils::Constant::XS, which generates the lookup code
for the \fIconstant()\fR subroutine found in many \s-1XS\s0 modules.
.SH "USAGE"
.IX Header "USAGE"
ExtUtils::Constant::Base exports no subroutines. The following methods are
available
.IP "header" 4
.IX Item "header"
A method returning a scalar containing definitions needed, typically for a
C header file.
.IP "memEQ_clause args_hashref" 4
.IX Item "memEQ_clause args_hashref"
A method to return a suitable C \f(CW\*(C`if\*(C'\fR statement to check whether \fIname\fR
is equal to the C variable \f(CW\*(C`name\*(C'\fR. If \fIchecked_at\fR is defined, then it
is used to avoid \f(CW\*(C`memEQ\*(C'\fR for short names, or to generate a comment to
highlight the position of the character in the \f(CW\*(C`switch\*(C'\fR statement.
.Sp
If i<checked_at> is a reference to a scalar, then instead it gives
the characters pre-checked at the beginning, (and the number of chars by
which the C variable name has been advanced. These need to be chopped from
the front of \fIname\fR).
.IP "dump_names arg_hashref, \s-1ITEM...\s0" 4
.IX Item "dump_names arg_hashref, ITEM..."
An internal function to generate the embedded perl code that will regenerate
the constant subroutines.  \fIdefault_type\fR, \fItypes\fR and \fI\s-1ITEM\s0\fRs are the
same as for C_constant.  \fIindent\fR is treated as number of spaces to indent
by.  If \f(CW\*(C`declare_types\*(C'\fR is true a \f(CW$types\fR is always declared in the perl
code generated, if defined and false never declared, and if undefined \f(CW$types\fR
is only declared if the values in \fItypes\fR as passed in cannot be inferred from
\&\fIdefault_types\fR and the \fI\s-1ITEM\s0\fRs.
.IP "assign arg_hashref, \s-1VALUE...\s0" 4
.IX Item "assign arg_hashref, VALUE..."
A method to return a suitable assignment clause. If \fItype\fR is aggregate
(eg \fI\s-1PVN\s0\fR expects both pointer and length) then there should be multiple
\&\fI\s-1VALUE\s0\fRs for the components. \fIpre\fR and \fIpost\fR if defined give snippets
of C code to proceed and follow the assignment. \fIpre\fR will be at the start
of a block, so variables may be defined in it.
.IP "return_clause arg_hashref, \s-1ITEM\s0" 4
.IX Item "return_clause arg_hashref, ITEM"
A method to return a suitable \f(CW\*(C`#ifdef\*(C'\fR clause. \fI\s-1ITEM\s0\fR is a hashref
(as passed to \f(CW\*(C`C_constant\*(C'\fR and \f(CW\*(C`match_clause\*(C'\fR. \fIindent\fR is the number
of spaces to indent, defaulting to 6.
.IP "switch_clause arg_hashref, \s-1NAMELEN, ITEMHASH, ITEM...\s0" 4
.IX Item "switch_clause arg_hashref, NAMELEN, ITEMHASH, ITEM..."
An internal method to generate a suitable \f(CW\*(C`switch\*(C'\fR clause, called by
\&\f(CW\*(C`C_constant\*(C'\fR \fI\s-1ITEM\s0\fRs are in the hash ref format as given in the description
of \f(CW\*(C`C_constant\*(C'\fR, and must all have the names of the same length, given by
\&\fI\s-1NAMELEN\s0\fR.  \fI\s-1ITEMHASH\s0\fR is a reference to a hash, keyed by name, values being
the hashrefs in the \fI\s-1ITEM\s0\fR list.  (No parameters are modified, and there can
be keys in the \fI\s-1ITEMHASH\s0\fR that are not in the list of \fI\s-1ITEM\s0\fRs without
causing problems \- the hash is passed in to save generating it afresh for
each call).
.IP "params \s-1WHAT\s0" 4
.IX Item "params WHAT"
An \*(L"internal\*(R" method, subject to change, currently called to allow an
overriding class to cache information that will then be passed into all
the \f(CW\*(C`*param*\*(C'\fR calls. (Yes, having to read the source to make sense of this is
considered a known bug). \fI\s-1WHAT\s0\fR is be a hashref of types the constant
function will return. In ExtUtils::Constant::XS this method is used to
returns a hashref keyed \s-1IV NV PV SV\s0 to show which combination of pointers will
be needed in the C argument list generated by
C_constant_other_params_definition and C_constant_other_params
.IP "dogfood arg_hashref, \s-1ITEM...\s0" 4
.IX Item "dogfood arg_hashref, ITEM..."
An internal function to generate the embedded perl code that will regenerate
the constant subroutines.  Parameters are the same as for C_constant.
.Sp
Currently the base class does nothing and returns an empty string.
.IP "normalise_items args, default_type, seen_types, seen_items, \s-1ITEM...\s0" 4
.IX Item "normalise_items args, default_type, seen_types, seen_items, ITEM..."
Convert the items to a normalised form. For 8 bit and Unicode values converts
the item to an array of 1 or 2 items, both 8 bit and \s-1UTF\-8\s0 encoded.
.IP "C_constant arg_hashref, \s-1ITEM...\s0" 4
.IX Item "C_constant arg_hashref, ITEM..."
A function that returns a \fBlist\fR of C subroutine definitions that return
the value and type of constants when passed the name by the \s-1XS\s0 wrapper.
\&\fI\s-1ITEM...\s0\fR gives a list of constant names. Each can either be a string,
which is taken as a C macro name, or a reference to a hash with the following
keys
.RS 4
.IP "name" 8
.IX Item "name"
The name of the constant, as seen by the perl code.
.IP "type" 8
.IX Item "type"
The type of the constant (\fI\s-1IV\s0\fR, \fI\s-1NV\s0\fR etc)
.IP "value" 8
.IX Item "value"
A C expression for the value of the constant, or a list of C expressions if
the type is aggregate. This defaults to the \fIname\fR if not given.
.IP "macro" 8
.IX Item "macro"
The C pre-processor macro to use in the \f(CW\*(C`#ifdef\*(C'\fR. This defaults to the
\&\fIname\fR, and is mainly used if \fIvalue\fR is an \f(CW\*(C`enum\*(C'\fR. If a reference an
array is passed then the first element is used in place of the \f(CW\*(C`#ifdef\*(C'\fR
line, and the second element in place of the \f(CW\*(C`#endif\*(C'\fR. This allows
pre-processor constructions such as
.Sp
.Vb 5
\&    #if defined (foo)
\&    #if !defined (bar)
\&    ...
\&    #endif
\&    #endif
.Ve
.Sp
to be used to determine if a constant is to be defined.
.Sp
A \*(L"macro\*(R" 1 signals that the constant is always defined, so the \f(CW\*(C`#if\*(C'\fR/\f(CW\*(C`#endif\*(C'\fR
test is omitted.
.IP "default" 8
.IX Item "default"
Default value to use (instead of \f(CW\*(C`croak\*(C'\fRing with \*(L"your vendor has not
defined...\*(R") to return if the macro isn't defined. Specify a reference to
an array with type followed by value(s).
.IP "pre" 8
.IX Item "pre"
C code to use before the assignment of the value of the constant. This allows
you to use temporary variables to extract a value from part of a \f(CW\*(C`struct\*(C'\fR
and return this as \fIvalue\fR. This C code is places at the start of a block,
so you can declare variables in it.
.IP "post" 8
.IX Item "post"
C code to place between the assignment of value (to a temporary) and the
return from the function. This allows you to clear up anything in \fIpre\fR.
Rarely needed.
.IP "def_pre" 8
.IX Item "def_pre"
.PD 0
.IP "def_post" 8
.IX Item "def_post"
.PD
Equivalents of \fIpre\fR and \fIpost\fR for the default value.
.IP "utf8" 8
.IX Item "utf8"
Generated internally. Is zero or undefined if name is 7 bit \s-1ASCII,
\&\s0\*(L"no\*(R" if the name is 8 bit (and so should only match if \fISvUTF8()\fR is false),
\&\*(L"yes\*(R" if the name is utf8 encoded.
.Sp
The internals automatically clone any name with characters 128\-255 but none
256+ (ie one that could be either in bytes or utf8) into a second entry
which is utf8 encoded.
.IP "weight" 8
.IX Item "weight"
Optional sorting weight for names, to determine the order of
linear testing when multiple names fall in the same case of a switch clause.
Higher comes earlier, undefined defaults to zero.
.RE
.RS 4
.Sp
In the argument hashref, \fIpackage\fR is the name of the package, and is only
used in comments inside the generated C code. \fIsubname\fR defaults to
\&\f(CW\*(C`constant\*(C'\fR if undefined.
.Sp
\&\fIdefault_type\fR is the type returned by \f(CW\*(C`ITEM\*(C'\fRs that don't specify their
type. It defaults to the value of \f(CW\*(C`default_type()\*(C'\fR. \fItypes\fR should be given
either as a comma separated list of types that the C subroutine \fIsubname\fR
will generate or as a reference to a hash. \fIdefault_type\fR will be added to
the list if not present, as will any types given in the list of \fI\s-1ITEM\s0\fRs. The
resultant list should be the same list of types that \f(CW\*(C`XS_constant\*(C'\fR is
given. [Otherwise \f(CW\*(C`XS_constant\*(C'\fR and \f(CW\*(C`C_constant\*(C'\fR may differ in the number of
parameters to the constant function. \fIindent\fR is currently unused and
ignored. In future it may be used to pass in information used to change the C
indentation style used.]  The best way to maintain consistency is to pass in a
hash reference and let this function update it.
.Sp
\&\fIbreakout\fR governs when child functions of \fIsubname\fR are generated.  If there
are \fIbreakout\fR or more \fI\s-1ITEM\s0\fRs with the same length of name, then the code
to switch between them is placed into a function named \fIsubname\fR_\fIlen\fR, for
example \f(CW\*(C`constant_5\*(C'\fR for names 5 characters long.  The default \fIbreakout\fR is
3.  A single \f(CW\*(C`ITEM\*(C'\fR is always inlined.
.RE
.SH "BUGS"
.IX Header "BUGS"
Not everything is documented yet.
.PP
Probably others.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant::Base5.16.3pm             0100644 0001750 0001750 00000032411 12566207433 026252  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant::Base 3pm"
.TH ExtUtils::Constant::Base 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant::Base \- base class for ExtUtils::Constant objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    require ExtUtils::Constant::Base;
\&    @ISA = \*(AqExtUtils::Constant::Base\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant::Base provides a base implementation of methods to
generate C code to give fast constant value lookup by named string. Currently
it's mostly used ExtUtils::Constant::XS, which generates the lookup code
for the \fIconstant()\fR subroutine found in many \s-1XS\s0 modules.
.SH "USAGE"
.IX Header "USAGE"
ExtUtils::Constant::Base exports no subroutines. The following methods are
available
.IP "header" 4
.IX Item "header"
A method returning a scalar containing definitions needed, typically for a
C header file.
.IP "memEQ_clause args_hashref" 4
.IX Item "memEQ_clause args_hashref"
A method to return a suitable C \f(CW\*(C`if\*(C'\fR statement to check whether \fIname\fR
is equal to the C variable \f(CW\*(C`name\*(C'\fR. If \fIchecked_at\fR is defined, then it
is used to avoid \f(CW\*(C`memEQ\*(C'\fR for short names, or to generate a comment to
highlight the position of the character in the \f(CW\*(C`switch\*(C'\fR statement.
.Sp
If i<checked_at> is a reference to a scalar, then instead it gives
the characters pre-checked at the beginning, (and the number of chars by
which the C variable name has been advanced. These need to be chopped from
the front of \fIname\fR).
.IP "dump_names arg_hashref, \s-1ITEM\s0..." 4
.IX Item "dump_names arg_hashref, ITEM..."
An internal function to generate the embedded perl code that will regenerate
the constant subroutines.  \fIdefault_type\fR, \fItypes\fR and \fI\s-1ITEM\s0\fRs are the
same as for C_constant.  \fIindent\fR is treated as number of spaces to indent
by.  If \f(CW\*(C`declare_types\*(C'\fR is true a \f(CW$types\fR is always declared in the perl
code generated, if defined and false never declared, and if undefined \f(CW$types\fR
is only declared if the values in \fItypes\fR as passed in cannot be inferred from
\&\fIdefault_types\fR and the \fI\s-1ITEM\s0\fRs.
.IP "assign arg_hashref, \s-1VALUE\s0..." 4
.IX Item "assign arg_hashref, VALUE..."
A method to return a suitable assignment clause. If \fItype\fR is aggregate
(eg \fI\s-1PVN\s0\fR expects both pointer and length) then there should be multiple
\&\fI\s-1VALUE\s0\fRs for the components. \fIpre\fR and \fIpost\fR if defined give snippets
of C code to proceed and follow the assignment. \fIpre\fR will be at the start
of a block, so variables may be defined in it.
.IP "return_clause arg_hashref, \s-1ITEM\s0" 4
.IX Item "return_clause arg_hashref, ITEM"
A method to return a suitable \f(CW\*(C`#ifdef\*(C'\fR clause. \fI\s-1ITEM\s0\fR is a hashref
(as passed to \f(CW\*(C`C_constant\*(C'\fR and \f(CW\*(C`match_clause\*(C'\fR. \fIindent\fR is the number
of spaces to indent, defaulting to 6.
.IP "switch_clause arg_hashref, \s-1NAMELEN\s0, \s-1ITEMHASH\s0, \s-1ITEM\s0..." 4
.IX Item "switch_clause arg_hashref, NAMELEN, ITEMHASH, ITEM..."
An internal method to generate a suitable \f(CW\*(C`switch\*(C'\fR clause, called by
\&\f(CW\*(C`C_constant\*(C'\fR \fI\s-1ITEM\s0\fRs are in the hash ref format as given in the description
of \f(CW\*(C`C_constant\*(C'\fR, and must all have the names of the same length, given by
\&\fI\s-1NAMELEN\s0\fR.  \fI\s-1ITEMHASH\s0\fR is a reference to a hash, keyed by name, values being
the hashrefs in the \fI\s-1ITEM\s0\fR list.  (No parameters are modified, and there can
be keys in the \fI\s-1ITEMHASH\s0\fR that are not in the list of \fI\s-1ITEM\s0\fRs without
causing problems \- the hash is passed in to save generating it afresh for
each call).
.IP "params \s-1WHAT\s0" 4
.IX Item "params WHAT"
An \*(L"internal\*(R" method, subject to change, currently called to allow an
overriding class to cache information that will then be passed into all
the \f(CW\*(C`*param*\*(C'\fR calls. (Yes, having to read the source to make sense of this is
considered a known bug). \fI\s-1WHAT\s0\fR is be a hashref of types the constant
function will return. In ExtUtils::Constant::XS this method is used to
returns a hashref keyed \s-1IV\s0 \s-1NV\s0 \s-1PV\s0 \s-1SV\s0 to show which combination of pointers will
be needed in the C argument list generated by
C_constant_other_params_definition and C_constant_other_params
.IP "dogfood arg_hashref, \s-1ITEM\s0..." 4
.IX Item "dogfood arg_hashref, ITEM..."
An internal function to generate the embedded perl code that will regenerate
the constant subroutines.  Parameters are the same as for C_constant.
.Sp
Currently the base class does nothing and returns an empty string.
.IP "normalise_items args, default_type, seen_types, seen_items, \s-1ITEM\s0..." 4
.IX Item "normalise_items args, default_type, seen_types, seen_items, ITEM..."
Convert the items to a normalised form. For 8 bit and Unicode values converts
the item to an array of 1 or 2 items, both 8 bit and \s-1UTF\-8\s0 encoded.
.IP "C_constant arg_hashref, \s-1ITEM\s0..." 4
.IX Item "C_constant arg_hashref, ITEM..."
A function that returns a \fBlist\fR of C subroutine definitions that return
the value and type of constants when passed the name by the \s-1XS\s0 wrapper.
\&\fI\s-1ITEM\s0...\fR gives a list of constant names. Each can either be a string,
which is taken as a C macro name, or a reference to a hash with the following
keys
.RS 4
.IP "name" 8
.IX Item "name"
The name of the constant, as seen by the perl code.
.IP "type" 8
.IX Item "type"
The type of the constant (\fI\s-1IV\s0\fR, \fI\s-1NV\s0\fR etc)
.IP "value" 8
.IX Item "value"
A C expression for the value of the constant, or a list of C expressions if
the type is aggregate. This defaults to the \fIname\fR if not given.
.IP "macro" 8
.IX Item "macro"
The C pre-processor macro to use in the \f(CW\*(C`#ifdef\*(C'\fR. This defaults to the
\&\fIname\fR, and is mainly used if \fIvalue\fR is an \f(CW\*(C`enum\*(C'\fR. If a reference an
array is passed then the first element is used in place of the \f(CW\*(C`#ifdef\*(C'\fR
line, and the second element in place of the \f(CW\*(C`#endif\*(C'\fR. This allows
pre-processor constructions such as
.Sp
.Vb 5
\&    #if defined (foo)
\&    #if !defined (bar)
\&    ...
\&    #endif
\&    #endif
.Ve
.Sp
to be used to determine if a constant is to be defined.
.Sp
A \*(L"macro\*(R" 1 signals that the constant is always defined, so the \f(CW\*(C`#if\*(C'\fR/\f(CW\*(C`#endif\*(C'\fR
test is omitted.
.IP "default" 8
.IX Item "default"
Default value to use (instead of \f(CW\*(C`croak\*(C'\fRing with \*(L"your vendor has not
defined...\*(R") to return if the macro isn't defined. Specify a reference to
an array with type followed by value(s).
.IP "pre" 8
.IX Item "pre"
C code to use before the assignment of the value of the constant. This allows
you to use temporary variables to extract a value from part of a \f(CW\*(C`struct\*(C'\fR
and return this as \fIvalue\fR. This C code is places at the start of a block,
so you can declare variables in it.
.IP "post" 8
.IX Item "post"
C code to place between the assignment of value (to a temporary) and the
return from the function. This allows you to clear up anything in \fIpre\fR.
Rarely needed.
.IP "def_pre" 8
.IX Item "def_pre"
.PD 0
.IP "def_post" 8
.IX Item "def_post"
.PD
Equivalents of \fIpre\fR and \fIpost\fR for the default value.
.IP "utf8" 8
.IX Item "utf8"
Generated internally. Is zero or undefined if name is 7 bit \s-1ASCII\s0,
\&\*(L"no\*(R" if the name is 8 bit (and so should only match if \fISvUTF8()\fR is false),
\&\*(L"yes\*(R" if the name is utf8 encoded.
.Sp
The internals automatically clone any name with characters 128\-255 but none
256+ (ie one that could be either in bytes or utf8) into a second entry
which is utf8 encoded.
.IP "weight" 8
.IX Item "weight"
Optional sorting weight for names, to determine the order of
linear testing when multiple names fall in the same case of a switch clause.
Higher comes earlier, undefined defaults to zero.
.RE
.RS 4
.Sp
In the argument hashref, \fIpackage\fR is the name of the package, and is only
used in comments inside the generated C code. \fIsubname\fR defaults to
\&\f(CW\*(C`constant\*(C'\fR if undefined.
.Sp
\&\fIdefault_type\fR is the type returned by \f(CW\*(C`ITEM\*(C'\fRs that don't specify their
type. It defaults to the value of \f(CW\*(C`default_type()\*(C'\fR. \fItypes\fR should be given
either as a comma separated list of types that the C subroutine \fIsubname\fR
will generate or as a reference to a hash. \fIdefault_type\fR will be added to
the list if not present, as will any types given in the list of \fI\s-1ITEM\s0\fRs. The
resultant list should be the same list of types that \f(CW\*(C`XS_constant\*(C'\fR is
given. [Otherwise \f(CW\*(C`XS_constant\*(C'\fR and \f(CW\*(C`C_constant\*(C'\fR may differ in the number of
parameters to the constant function. \fIindent\fR is currently unused and
ignored. In future it may be used to pass in information used to change the C
indentation style used.]  The best way to maintain consistency is to pass in a
hash reference and let this function update it.
.Sp
\&\fIbreakout\fR governs when child functions of \fIsubname\fR are generated.  If there
are \fIbreakout\fR or more \fI\s-1ITEM\s0\fRs with the same length of name, then the code
to switch between them is placed into a function named \fIsubname\fR_\fIlen\fR, for
example \f(CW\*(C`constant_5\*(C'\fR for names 5 characters long.  The default \fIbreakout\fR is
3.  A single \f(CW\*(C`ITEM\*(C'\fR is always inlined.
.RE
.SH "BUGS"
.IX Header "BUGS"
Not everything is documented yet.
.PP
Probably others.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant::Base5.18.3pm             0100644 0001750 0001750 00000032667 12566207454 026274  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant::Base 3pm"
.TH ExtUtils::Constant::Base 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant::Base \- base class for ExtUtils::Constant objects
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    require ExtUtils::Constant::Base;
\&    @ISA = \*(AqExtUtils::Constant::Base\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant::Base provides a base implementation of methods to
generate C code to give fast constant value lookup by named string. Currently
it's mostly used ExtUtils::Constant::XS, which generates the lookup code
for the \fIconstant()\fR subroutine found in many \s-1XS\s0 modules.
.SH "USAGE"
.IX Header "USAGE"
ExtUtils::Constant::Base exports no subroutines. The following methods are
available
.IP "header" 4
.IX Item "header"
A method returning a scalar containing definitions needed, typically for a
C header file.
.IP "memEQ_clause args_hashref" 4
.IX Item "memEQ_clause args_hashref"
A method to return a suitable C \f(CW\*(C`if\*(C'\fR statement to check whether \fIname\fR
is equal to the C variable \f(CW\*(C`name\*(C'\fR. If \fIchecked_at\fR is defined, then it
is used to avoid \f(CW\*(C`memEQ\*(C'\fR for short names, or to generate a comment to
highlight the position of the character in the \f(CW\*(C`switch\*(C'\fR statement.
.Sp
If i<checked_at> is a reference to a scalar, then instead it gives
the characters pre-checked at the beginning, (and the number of chars by
which the C variable name has been advanced. These need to be chopped from
the front of \fIname\fR).
.IP "dump_names arg_hashref, \s-1ITEM...\s0" 4
.IX Item "dump_names arg_hashref, ITEM..."
An internal function to generate the embedded perl code that will regenerate
the constant subroutines.  \fIdefault_type\fR, \fItypes\fR and \fI\s-1ITEM\s0\fRs are the
same as for C_constant.  \fIindent\fR is treated as number of spaces to indent
by.  If \f(CW\*(C`declare_types\*(C'\fR is true a \f(CW$types\fR is always declared in the perl
code generated, if defined and false never declared, and if undefined \f(CW$types\fR
is only declared if the values in \fItypes\fR as passed in cannot be inferred from
\&\fIdefault_types\fR and the \fI\s-1ITEM\s0\fRs.
.IP "assign arg_hashref, \s-1VALUE...\s0" 4
.IX Item "assign arg_hashref, VALUE..."
A method to return a suitable assignment clause. If \fItype\fR is aggregate
(eg \fI\s-1PVN\s0\fR expects both pointer and length) then there should be multiple
\&\fI\s-1VALUE\s0\fRs for the components. \fIpre\fR and \fIpost\fR if defined give snippets
of C code to proceed and follow the assignment. \fIpre\fR will be at the start
of a block, so variables may be defined in it.
.IP "return_clause arg_hashref, \s-1ITEM\s0" 4
.IX Item "return_clause arg_hashref, ITEM"
A method to return a suitable \f(CW\*(C`#ifdef\*(C'\fR clause. \fI\s-1ITEM\s0\fR is a hashref
(as passed to \f(CW\*(C`C_constant\*(C'\fR and \f(CW\*(C`match_clause\*(C'\fR. \fIindent\fR is the number
of spaces to indent, defaulting to 6.
.IP "switch_clause arg_hashref, \s-1NAMELEN, ITEMHASH, ITEM...\s0" 4
.IX Item "switch_clause arg_hashref, NAMELEN, ITEMHASH, ITEM..."
An internal method to generate a suitable \f(CW\*(C`switch\*(C'\fR clause, called by
\&\f(CW\*(C`C_constant\*(C'\fR \fI\s-1ITEM\s0\fRs are in the hash ref format as given in the description
of \f(CW\*(C`C_constant\*(C'\fR, and must all have the names of the same length, given by
\&\fI\s-1NAMELEN\s0\fR.  \fI\s-1ITEMHASH\s0\fR is a reference to a hash, keyed by name, values being
the hashrefs in the \fI\s-1ITEM\s0\fR list.  (No parameters are modified, and there can
be keys in the \fI\s-1ITEMHASH\s0\fR that are not in the list of \fI\s-1ITEM\s0\fRs without
causing problems \- the hash is passed in to save generating it afresh for
each call).
.IP "params \s-1WHAT\s0" 4
.IX Item "params WHAT"
An \*(L"internal\*(R" method, subject to change, currently called to allow an
overriding class to cache information that will then be passed into all
the \f(CW\*(C`*param*\*(C'\fR calls. (Yes, having to read the source to make sense of this is
considered a known bug). \fI\s-1WHAT\s0\fR is be a hashref of types the constant
function will return. In ExtUtils::Constant::XS this method is used to
returns a hashref keyed \s-1IV NV PV SV\s0 to show which combination of pointers will
be needed in the C argument list generated by
C_constant_other_params_definition and C_constant_other_params
.IP "dogfood arg_hashref, \s-1ITEM...\s0" 4
.IX Item "dogfood arg_hashref, ITEM..."
An internal function to generate the embedded perl code that will regenerate
the constant subroutines.  Parameters are the same as for C_constant.
.Sp
Currently the base class does nothing and returns an empty string.
.IP "normalise_items args, default_type, seen_types, seen_items, \s-1ITEM...\s0" 4
.IX Item "normalise_items args, default_type, seen_types, seen_items, ITEM..."
Convert the items to a normalised form. For 8 bit and Unicode values converts
the item to an array of 1 or 2 items, both 8 bit and \s-1UTF\-8\s0 encoded.
.IP "C_constant arg_hashref, \s-1ITEM...\s0" 4
.IX Item "C_constant arg_hashref, ITEM..."
A function that returns a \fBlist\fR of C subroutine definitions that return
the value and type of constants when passed the name by the \s-1XS\s0 wrapper.
\&\fI\s-1ITEM...\s0\fR gives a list of constant names. Each can either be a string,
which is taken as a C macro name, or a reference to a hash with the following
keys
.RS 4
.IP "name" 8
.IX Item "name"
The name of the constant, as seen by the perl code.
.IP "type" 8
.IX Item "type"
The type of the constant (\fI\s-1IV\s0\fR, \fI\s-1NV\s0\fR etc)
.IP "value" 8
.IX Item "value"
A C expression for the value of the constant, or a list of C expressions if
the type is aggregate. This defaults to the \fIname\fR if not given.
.IP "macro" 8
.IX Item "macro"
The C pre-processor macro to use in the \f(CW\*(C`#ifdef\*(C'\fR. This defaults to the
\&\fIname\fR, and is mainly used if \fIvalue\fR is an \f(CW\*(C`enum\*(C'\fR. If a reference an
array is passed then the first element is used in place of the \f(CW\*(C`#ifdef\*(C'\fR
line, and the second element in place of the \f(CW\*(C`#endif\*(C'\fR. This allows
pre-processor constructions such as
.Sp
.Vb 5
\&    #if defined (foo)
\&    #if !defined (bar)
\&    ...
\&    #endif
\&    #endif
.Ve
.Sp
to be used to determine if a constant is to be defined.
.Sp
A \*(L"macro\*(R" 1 signals that the constant is always defined, so the \f(CW\*(C`#if\*(C'\fR/\f(CW\*(C`#endif\*(C'\fR
test is omitted.
.IP "default" 8
.IX Item "default"
Default value to use (instead of \f(CW\*(C`croak\*(C'\fRing with \*(L"your vendor has not
defined...\*(R") to return if the macro isn't defined. Specify a reference to
an array with type followed by value(s).
.IP "pre" 8
.IX Item "pre"
C code to use before the assignment of the value of the constant. This allows
you to use temporary variables to extract a value from part of a \f(CW\*(C`struct\*(C'\fR
and return this as \fIvalue\fR. This C code is places at the start of a block,
so you can declare variables in it.
.IP "post" 8
.IX Item "post"
C code to place between the assignment of value (to a temporary) and the
return from the function. This allows you to clear up anything in \fIpre\fR.
Rarely needed.
.IP "def_pre" 8
.IX Item "def_pre"
.PD 0
.IP "def_post" 8
.IX Item "def_post"
.PD
Equivalents of \fIpre\fR and \fIpost\fR for the default value.
.IP "utf8" 8
.IX Item "utf8"
Generated internally. Is zero or undefined if name is 7 bit \s-1ASCII,
\&\s0\*(L"no\*(R" if the name is 8 bit (and so should only match if \fISvUTF8()\fR is false),
\&\*(L"yes\*(R" if the name is utf8 encoded.
.Sp
The internals automatically clone any name with characters 128\-255 but none
256+ (ie one that could be either in bytes or utf8) into a second entry
which is utf8 encoded.
.IP "weight" 8
.IX Item "weight"
Optional sorting weight for names, to determine the order of
linear testing when multiple names fall in the same case of a switch clause.
Higher comes earlier, undefined defaults to zero.
.RE
.RS 4
.Sp
In the argument hashref, \fIpackage\fR is the name of the package, and is only
used in comments inside the generated C code. \fIsubname\fR defaults to
\&\f(CW\*(C`constant\*(C'\fR if undefined.
.Sp
\&\fIdefault_type\fR is the type returned by \f(CW\*(C`ITEM\*(C'\fRs that don't specify their
type. It defaults to the value of \f(CW\*(C`default_type()\*(C'\fR. \fItypes\fR should be given
either as a comma separated list of types that the C subroutine \fIsubname\fR
will generate or as a reference to a hash. \fIdefault_type\fR will be added to
the list if not present, as will any types given in the list of \fI\s-1ITEM\s0\fRs. The
resultant list should be the same list of types that \f(CW\*(C`XS_constant\*(C'\fR is
given. [Otherwise \f(CW\*(C`XS_constant\*(C'\fR and \f(CW\*(C`C_constant\*(C'\fR may differ in the number of
parameters to the constant function. \fIindent\fR is currently unused and
ignored. In future it may be used to pass in information used to change the C
indentation style used.]  The best way to maintain consistency is to pass in a
hash reference and let this function update it.
.Sp
\&\fIbreakout\fR governs when child functions of \fIsubname\fR are generated.  If there
are \fIbreakout\fR or more \fI\s-1ITEM\s0\fRs with the same length of name, then the code
to switch between them is placed into a function named \fIsubname\fR_\fIlen\fR, for
example \f(CW\*(C`constant_5\*(C'\fR for names 5 characters long.  The default \fIbreakout\fR is
3.  A single \f(CW\*(C`ITEM\*(C'\fR is always inlined.
.RE
.SH "BUGS"
.IX Header "BUGS"
Not everything is documented yet.
.PP
Probably others.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                                         osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant::Utils.3pm                0100644 0001750 0001750 00000011701 12566207454 026170  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant::Utils 3pm"
.TH ExtUtils::Constant::Utils 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant::Utils \- helper functions for ExtUtils::Constant
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use ExtUtils::Constant::Utils qw (C_stringify);
\&    $C_code = C_stringify $stuff;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant::Utils packages up utility subroutines used by
ExtUtils::Constant, ExtUtils::Constant::Base and derived classes. All its
functions are explicitly exportable.
.SH "USAGE"
.IX Header "USAGE"
.IP "C_stringify \s-1NAME\s0" 4
.IX Item "C_stringify NAME"
A function which returns a 7 bit \s-1ASCII\s0 correctly \e escaped version of the
string passed suitable for C's "" or ''. It will die if passed Unicode
characters.
.IP "perl_stringify \s-1NAME\s0" 4
.IX Item "perl_stringify NAME"
A function which returns a 7 bit \s-1ASCII\s0 correctly \e escaped version of the
string passed suitable for a perl "" string.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant::Utils5.16.3pm            0100644 0001750 0001750 00000011360 12566207433 026500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant::Utils 3pm"
.TH ExtUtils::Constant::Utils 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant::Utils \- helper functions for ExtUtils::Constant
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use ExtUtils::Constant::Utils qw (C_stringify);
\&    $C_code = C_stringify $stuff;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant::Utils packages up utility subroutines used by
ExtUtils::Constant, ExtUtils::Constant::Base and derived classes. All its
functions are explicitly exportable.
.SH "USAGE"
.IX Header "USAGE"
.IP "C_stringify \s-1NAME\s0" 4
.IX Item "C_stringify NAME"
A function which returns a 7 bit \s-1ASCII\s0 correctly \e escaped version of the
string passed suitable for C's "" or ''. It will die if passed Unicode
characters.
.IP "perl_stringify \s-1NAME\s0" 4
.IX Item "perl_stringify NAME"
A function which returns a 7 bit \s-1ASCII\s0 correctly \e escaped version of the
string passed suitable for a perl "" string.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant::Utils5.18.3pm            0100644 0001750 0001750 00000011701 12566207454 026504  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant::Utils 3pm"
.TH ExtUtils::Constant::Utils 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant::Utils \- helper functions for ExtUtils::Constant
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use ExtUtils::Constant::Utils qw (C_stringify);
\&    $C_code = C_stringify $stuff;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant::Utils packages up utility subroutines used by
ExtUtils::Constant, ExtUtils::Constant::Base and derived classes. All its
functions are explicitly exportable.
.SH "USAGE"
.IX Header "USAGE"
.IP "C_stringify \s-1NAME\s0" 4
.IX Item "C_stringify NAME"
A function which returns a 7 bit \s-1ASCII\s0 correctly \e escaped version of the
string passed suitable for C's "" or ''. It will die if passed Unicode
characters.
.IP "perl_stringify \s-1NAME\s0" 4
.IX Item "perl_stringify NAME"
A function which returns a 7 bit \s-1ASCII\s0 correctly \e escaped version of the
string passed suitable for a perl "" string.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                               osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant::XS.3pm                   0100644 0001750 0001750 00000010715 12566207454 025426  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant::XS 3pm"
.TH ExtUtils::Constant::XS 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant::XS \- generate C code for XS modules' constants.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    require ExtUtils::Constant::XS;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant::XS overrides ExtUtils::Constant::Base to generate C
code for \s-1XS\s0 modules' constants.
.SH "BUGS"
.IX Header "BUGS"
Nothing is documented.
.PP
Probably others.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant::XS5.16.3pm               0100644 0001750 0001750 00000010374 12566207433 025736  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant::XS 3pm"
.TH ExtUtils::Constant::XS 3pm "2013-02-26" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant::XS \- generate C code for XS modules' constants.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    require ExtUtils::Constant::XS;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant::XS overrides ExtUtils::Constant::Base to generate C
code for \s-1XS\s0 modules' constants.
.SH "BUGS"
.IX Header "BUGS"
Nothing is documented.
.PP
Probably others.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Constant::XS5.18.3pm               0100644 0001750 0001750 00000010715 12566207454 025742  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Constant::XS 3pm"
.TH ExtUtils::Constant::XS 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Constant::XS \- generate C code for XS modules' constants.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    require ExtUtils::Constant::XS;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Constant::XS overrides ExtUtils::Constant::Base to generate C
code for \s-1XS\s0 modules' constants.
.SH "BUGS"
.IX Header "BUGS"
Nothing is documented.
.PP
Probably others.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nicholas Clark <nick@ccl4.org> based on the code in \f(CW\*(C`h2xs\*(C'\fR by Larry Wall and
others
                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Depends.3pm                        0100644 0001750 0001750 00000032060 12566242547 024557  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Depends 3"
.TH ExtUtils::Depends 3 "2013-09-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Depends \- Easily build XS extensions that depend on XS extensions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        use ExtUtils::Depends;
\&        $package = new ExtUtils::Depends (\*(Aqpkg::name\*(Aq, \*(Aqbase::package\*(Aq)
\&        # set the flags and libraries to compile and link the module
\&        $package\->set_inc("\-I/opt/blahblah");
\&        $package\->set_libs("\-lmylib");
\&        # add a .c and an .xs file to compile
\&        $package\->add_c(\*(Aqcode.c\*(Aq);
\&        $package\->add_xs(\*(Aqmodule\-code.xs\*(Aq);
\&        # add the typemaps to use
\&        $package\->add_typemaps("typemap");
\&        # install some extra data files and headers
\&        $package\->install (qw/foo.h data.txt/);
\&        # save the info
\&        $package\->save_config(\*(AqFiles.pm\*(Aq);
\&
\&        WriteMakefile(
\&                \*(AqNAME\*(Aq => \*(AqMymodule\*(Aq,
\&                $package\->get_makefile_vars()
\&        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module tries to make it easy to build Perl extensions that use
functions and typemaps provided by other perl extensions. This means
that a perl extension is treated like a shared library that provides
also a C and an \s-1XS\s0 interface besides the perl one.
.PP
This works as long as the base extension is loaded with the \s-1RTLD_GLOBAL\s0
flag (usually done with a
.PP
.Vb 1
\&        sub dl_load_flags {0x01}
.Ve
.PP
in the main .pm file) if you need to use functions defined in the module.
.PP
The basic scheme of operation is to collect information about a module
in the instance, and then store that data in the Perl library where it
may be retrieved later.  The object can also reformat this information
into the data structures required by ExtUtils::MakeMaker's WriteMakefile
function.
.PP
When creating a new Depends object, you give it a name, which is the name
of the module you are building.   You can also specify the names of modules
on which this module depends.  These dependencies will be loaded
automatically, and their typemaps, header files, etc merged with your new
object's stuff.  When you store the data for your object, the list of
dependencies are stored with it, so that another module depending on your
needn't know on exactly which modules yours depends.
.PP
For example:
.PP
.Vb 1
\&  Gtk2 depends on Glib
\&
\&  Gnome2::Canvas depends on Gtk2
\&
\&  ExtUtils::Depends\->new (\*(AqGnome2::Canvas\*(Aq, \*(AqGtk2\*(Aq);
\&     this command automatically brings in all the stuff needed
\&     for Glib, since Gtk2 depends on it.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$object = ExtUtils::Depends\->new($name, @deps)" 4
.el .IP "\f(CW$object\fR = ExtUtils::Depends\->new($name, \f(CW@deps\fR)" 4
.IX Item "$object = ExtUtils::Depends->new($name, @deps)"
Create a new depends object named \fI\f(CI$name\fI\fR.  Any modules listed in \fI\f(CI@deps\fI\fR
(which may be empty) are added as dependencies and their dependency
information is loaded.  An exception is raised if any dependency information
cannot be loaded.
.ie n .IP "$depends\->add_deps (@deps)" 4
.el .IP "\f(CW$depends\fR\->add_deps (@deps)" 4
.IX Item "$depends->add_deps (@deps)"
Add modules listed in \fI\f(CI@deps\fI\fR as dependencies.
.ie n .IP "(hashes) = $depends\->get_deps" 4
.el .IP "(hashes) = \f(CW$depends\fR\->get_deps" 4
.IX Item "(hashes) = $depends->get_deps"
Fetch information on the dependencies of \fI\f(CI$depends\fI\fR as a hash of hashes,
which are dependency information indexed by module name.  See \f(CW\*(C`load\*(C'\fR.
.ie n .IP "$depends\->set_inc (@newinc)" 4
.el .IP "\f(CW$depends\fR\->set_inc (@newinc)" 4
.IX Item "$depends->set_inc (@newinc)"
Add strings to the includes or cflags variables.
.ie n .IP "$depends\->set_libs (@newlibs)" 4
.el .IP "\f(CW$depends\fR\->set_libs (@newlibs)" 4
.IX Item "$depends->set_libs (@newlibs)"
Add strings to the libs (linker flags) variable.
.ie n .IP "$depends\->add_pm (%pm_files)" 4
.el .IP "\f(CW$depends\fR\->add_pm (%pm_files)" 4
.IX Item "$depends->add_pm (%pm_files)"
Add files to the hash to be passed through ExtUtils::WriteMakefile's
\&\s-1PM\s0 key.
.ie n .IP "$depends\->add_xs (@xs_files)" 4
.el .IP "\f(CW$depends\fR\->add_xs (@xs_files)" 4
.IX Item "$depends->add_xs (@xs_files)"
Add xs files to be compiled.
.ie n .IP "$depends\->add_c (@c_files)" 4
.el .IP "\f(CW$depends\fR\->add_c (@c_files)" 4
.IX Item "$depends->add_c (@c_files)"
Add C files to be compiled.
.ie n .IP "$depends\->add_typemaps (@typemaps)" 4
.el .IP "\f(CW$depends\fR\->add_typemaps (@typemaps)" 4
.IX Item "$depends->add_typemaps (@typemaps)"
Add typemap files to be used and installed.
.ie n .IP "$depends\->add_headers (list)" 4
.el .IP "\f(CW$depends\fR\->add_headers (list)" 4
.IX Item "$depends->add_headers (list)"
No-op, for backward compatibility.
.ie n .IP "$depends\->install (@files)" 4
.el .IP "\f(CW$depends\fR\->install (@files)" 4
.IX Item "$depends->install (@files)"
Install \fI\f(CI@files\fI\fR to the data directory for \fI\f(CI$depends\fI\fR.
.Sp
This actually works by adding them to the hash of pm files that gets
passed through WriteMakefile's \s-1PM\s0 key.
.ie n .IP "$depends\->save_config ($filename)" 4
.el .IP "\f(CW$depends\fR\->save_config ($filename)" 4
.IX Item "$depends->save_config ($filename)"
Save the important information from \fI\f(CI$depends\fI\fR to \fI\f(CI$filename\fI\fR, and
set it up to be installed as \fIname\fR::Install::Files.
.Sp
Note: the actual value of \fI\f(CI$filename\fI\fR seems to be irrelevant, but its
usage is kept for backward compatibility.
.ie n .IP "hash = $depends\->get_makefile_vars" 4
.el .IP "hash = \f(CW$depends\fR\->get_makefile_vars" 4
.IX Item "hash = $depends->get_makefile_vars"
Return the information in \fI\f(CI$depends\fI\fR in a format digestible by
WriteMakefile.
.Sp
This sets at least the following keys:
.Sp
.Vb 4
\&        INC
\&        LIBS
\&        TYPEMAPS
\&        PM
.Ve
.Sp
And these if there is data to fill them:
.Sp
.Vb 3
\&        clean
\&        OBJECT
\&        XS
.Ve
.IP "hashref = ExtUtils::Depends::load (name)" 4
.IX Item "hashref = ExtUtils::Depends::load (name)"
Load and return dependency information for \fIname\fR.  Croaks if no such
information can be found.  The information is returned as an anonymous
hash containing these keys:
.RS 4
.IP "instpath" 4
.IX Item "instpath"
The absolute path to the data install directory for this module.
.IP "typemaps" 4
.IX Item "typemaps"
List of absolute pathnames for this module's typemap files.
.IP "inc" 4
.IX Item "inc"
\&\s-1CFLAGS\s0 string for this module.
.IP "libs" 4
.IX Item "libs"
\&\s-1LIBS\s0 string for this module.
.IP "deps" 4
.IX Item "deps"
List of modules on which this one depends.  This key will not exist when
loading files created by old versions of ExtUtils::Depends.
.RE
.RS 4
.RE
.ie n .IP "$depends\->load_deps" 4
.el .IP "\f(CW$depends\fR\->load_deps" 4
.IX Item "$depends->load_deps"
Load \fI\f(CI$depends\fI\fR dependencies, by calling \f(CW\*(C`load\*(C'\fR on each dependency module.
This is usually done for you, and should only be needed if you want to call
\&\f(CW\*(C`get_deps\*(C'\fR after calling \f(CW\*(C`add_deps\*(C'\fR manually.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs/Feature Requests"
.IX Subsection "Bugs/Feature Requests"
Version 0.2 discards some of the more esoteric features provided by the
older versions.  As they were completely undocumented, and this module
has yet to reach 1.0, this may not exactly be a bug.
.PP
This module is tightly coupled to the ExtUtils::MakeMaker architecture.
.PP
You can submit new bugs/feature requests by using one of two bug trackers
(below).
.IP "\s-1CPAN\s0 Request Tracker" 4
.IX Item "CPAN Request Tracker"
You can submit bugs/feature requests via the web by going to
<https://rt.cpan.org/Public/Bug/Report.html?Queue=ExtUtils\-Depends> (requires
\&\s-1PAUSE ID\s0 or Bitcard), or by sending an e\-mail to
\&\*(L"bug-ExtUtils-Depends at rt.cpan.org\*(R".
.IP "Gnome.org Bugzilla" 4
.IX Item "Gnome.org Bugzilla"
Report bugs/feature requests to the 'gnome\-perl' product (requires login)
<http://bugzilla.gnome.org/enter_bug.cgi?product=gnome\-perl>
.PP
Patches that implement new features with test cases, and/or test cases that
exercise existing bugs are always welcome.
.PP
The Gtk-Perl mailing list is at \*(L"gtk-perl-list at gnome dot org\*(R".
.SS "Source Code"
.IX Subsection "Source Code"
The source code to ExtUtils::Depends is available at the Gnome.org Git repo
(<https://git.gnome.org/browse/perl\-ExtUtils\-Depends/>).  Create your own
copy of the Git repo with:
.PP
.Vb 2
\&  git clone git://git.gnome.org/perl\-ExtUtils\-Depends (Git protocol)
\&  git clone https://git.gnome.org/browse/perl\-ExtUtils\-Depends/ (HTTPS)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paolo Molaro <lupus at debian dot org> wrote the original version for
Gtk-Perl.  muppet <scott at asofyet dot org> rewrote the innards for
version 0.2, borrowing liberally from Paolo's code.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
The Gtk2 project, <http://gtk2\-perl.sf.net>/\*(L"gtk-perl-list at gnome dot org\*(R".
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Depends5.16.3pm                    0100644 0001750 0001750 00000027110 12566242537 025070  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Depends 3"
.TH ExtUtils::Depends 3 "2011-01-25" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Depends \- Easily build XS extensions that depend on XS extensions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        use ExtUtils::Depends;
\&        $package = new ExtUtils::Depends (\*(Aqpkg::name\*(Aq, \*(Aqbase::package\*(Aq)
\&        # set the flags and libraries to compile and link the module
\&        $package\->set_inc("\-I/opt/blahblah");
\&        $package\->set_libs("\-lmylib");
\&        # add a .c and an .xs file to compile
\&        $package\->add_c(\*(Aqcode.c\*(Aq);
\&        $package\->add_xs(\*(Aqmodule\-code.xs\*(Aq);
\&        # add the typemaps to use
\&        $package\->add_typemaps("typemap");
\&        # install some extra data files and headers
\&        $package\->install (qw/foo.h data.txt/);
\&        # save the info
\&        $package\->save_config(\*(AqFiles.pm\*(Aq);
\&
\&        WriteMakefile(
\&                \*(AqNAME\*(Aq => \*(AqMymodule\*(Aq,
\&                $package\->get_makefile_vars()
\&        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module tries to make it easy to build Perl extensions that use
functions and typemaps provided by other perl extensions. This means
that a perl extension is treated like a shared library that provides
also a C and an \s-1XS\s0 interface besides the perl one.
.PP
This works as long as the base extension is loaded with the \s-1RTLD_GLOBAL\s0
flag (usually done with a
.PP
.Vb 1
\&        sub dl_load_flags {0x01}
.Ve
.PP
in the main .pm file) if you need to use functions defined in the module.
.PP
The basic scheme of operation is to collect information about a module
in the instance, and then store that data in the Perl library where it
may be retrieved later.  The object can also reformat this information
into the data structures required by ExtUtils::MakeMaker's WriteMakefile
function.
.PP
When creating a new Depends object, you give it a name, which is the name
of the module you are building.   You can also specify the names of modules
on which this module depends.  These dependencies will be loaded
automatically, and their typemaps, header files, etc merged with your new
object's stuff.  When you store the data for your object, the list of
dependencies are stored with it, so that another module depending on your
needn't know on exactly which modules yours depends.
.PP
For example:
.PP
.Vb 1
\&  Gtk2 depends on Glib
\&
\&  Gnome2::Canvas depends on Gtk2
\&
\&  ExtUtils::Depends\->new (\*(AqGnome2::Canvas\*(Aq, \*(AqGtk2\*(Aq);
\&     this command automatically brings in all the stuff needed
\&     for Glib, since Gtk2 depends on it.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$object = ExtUtils::Depends\->new($name, @deps)" 4
.el .IP "\f(CW$object\fR = ExtUtils::Depends\->new($name, \f(CW@deps\fR)" 4
.IX Item "$object = ExtUtils::Depends->new($name, @deps)"
Create a new depends object named \fI\f(CI$name\fI\fR.  Any modules listed in \fI\f(CI@deps\fI\fR
(which may be empty) are added as dependencies and their dependency
information is loaded.  An exception is raised if any dependency information
cannot be loaded.
.ie n .IP "$depends\->add_deps (@deps)" 4
.el .IP "\f(CW$depends\fR\->add_deps (@deps)" 4
.IX Item "$depends->add_deps (@deps)"
Add modules listed in \fI\f(CI@deps\fI\fR as dependencies.
.ie n .IP "(hashes) = $depends\->get_deps" 4
.el .IP "(hashes) = \f(CW$depends\fR\->get_deps" 4
.IX Item "(hashes) = $depends->get_deps"
Fetch information on the dependencies of \fI\f(CI$depends\fI\fR as a hash of hashes,
which are dependency information indexed by module name.  See \f(CW\*(C`load\*(C'\fR.
.ie n .IP "$depends\->set_inc (@newinc)" 4
.el .IP "\f(CW$depends\fR\->set_inc (@newinc)" 4
.IX Item "$depends->set_inc (@newinc)"
Add strings to the includes or cflags variables.
.ie n .IP "$depends\->set_libs (@newlibs)" 4
.el .IP "\f(CW$depends\fR\->set_libs (@newlibs)" 4
.IX Item "$depends->set_libs (@newlibs)"
Add strings to the libs (linker flags) variable.
.ie n .IP "$depends\->add_pm (%pm_files)" 4
.el .IP "\f(CW$depends\fR\->add_pm (%pm_files)" 4
.IX Item "$depends->add_pm (%pm_files)"
Add files to the hash to be passed through ExtUtils::WriteMakefile's
\&\s-1PM\s0 key.
.ie n .IP "$depends\->add_xs (@xs_files)" 4
.el .IP "\f(CW$depends\fR\->add_xs (@xs_files)" 4
.IX Item "$depends->add_xs (@xs_files)"
Add xs files to be compiled.
.ie n .IP "$depends\->add_c (@c_files)" 4
.el .IP "\f(CW$depends\fR\->add_c (@c_files)" 4
.IX Item "$depends->add_c (@c_files)"
Add C files to be compiled.
.ie n .IP "$depends\->add_typemaps (@typemaps)" 4
.el .IP "\f(CW$depends\fR\->add_typemaps (@typemaps)" 4
.IX Item "$depends->add_typemaps (@typemaps)"
Add typemap files to be used and installed.
.ie n .IP "$depends\->add_headers (list)" 4
.el .IP "\f(CW$depends\fR\->add_headers (list)" 4
.IX Item "$depends->add_headers (list)"
No-op, for backward compatibility.
.ie n .IP "$depends\->install (@files)" 4
.el .IP "\f(CW$depends\fR\->install (@files)" 4
.IX Item "$depends->install (@files)"
Install \fI\f(CI@files\fI\fR to the data directory for \fI\f(CI$depends\fI\fR.
.Sp
This actually works by adding them to the hash of pm files that gets
passed through WriteMakefile's \s-1PM\s0 key.
.ie n .IP "$depends\->save_config ($filename)" 4
.el .IP "\f(CW$depends\fR\->save_config ($filename)" 4
.IX Item "$depends->save_config ($filename)"
Save the important information from \fI\f(CI$depends\fI\fR to \fI\f(CI$filename\fI\fR, and
set it up to be installed as \fIname\fR::Install::Files.
.Sp
Note: the actual value of \fI\f(CI$filename\fI\fR seems to be irrelevant, but its
usage is kept for backward compatibility.
.ie n .IP "hash = $depends\->get_makefile_vars" 4
.el .IP "hash = \f(CW$depends\fR\->get_makefile_vars" 4
.IX Item "hash = $depends->get_makefile_vars"
Return the information in \fI\f(CI$depends\fI\fR in a format digestible by
WriteMakefile.
.Sp
This sets at least the following keys:
.Sp
.Vb 4
\&        INC
\&        LIBS
\&        TYPEMAPS
\&        PM
.Ve
.Sp
And these if there is data to fill them:
.Sp
.Vb 3
\&        clean
\&        OBJECT
\&        XS
.Ve
.IP "hashref = ExtUtils::Depends::load (name)" 4
.IX Item "hashref = ExtUtils::Depends::load (name)"
Load and return dependency information for \fIname\fR.  Croaks if no such
information can be found.  The information is returned as an anonymous
hash containing these keys:
.RS 4
.IP "instpath" 4
.IX Item "instpath"
The absolute path to the data install directory for this module.
.IP "typemaps" 4
.IX Item "typemaps"
List of absolute pathnames for this module's typemap files.
.IP "inc" 4
.IX Item "inc"
\&\s-1CFLAGS\s0 string for this module.
.IP "libs" 4
.IX Item "libs"
\&\s-1LIBS\s0 string for this module.
.IP "deps" 4
.IX Item "deps"
List of modules on which this one depends.  This key will not exist when
loading files created by old versions of ExtUtils::Depends.
.RE
.RS 4
.RE
.ie n .IP "$depends\->load_deps" 4
.el .IP "\f(CW$depends\fR\->load_deps" 4
.IX Item "$depends->load_deps"
Load \fI\f(CI$depends\fI\fR dependencies, by calling \f(CW\*(C`load\*(C'\fR on each dependency module.
This is usually done for you, and should only be needed if you want to call
\&\f(CW\*(C`get_deps\*(C'\fR after calling \f(CW\*(C`add_deps\*(C'\fR manually.
.SH "BUGS"
.IX Header "BUGS"
Version 0.2 discards some of the more esoteric features provided by the
older versions.  As they were completely undocumented, and this module
has yet to reach 1.0, this may not exactly be a bug.
.PP
This module is tightly coupled to the ExtUtils::MakeMaker architecture.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paolo Molaro <lupus at debian dot org> wrote the original version for
Gtk-Perl.  muppet <scott at asofyet dot org> rewrote the innards for
version 0.2, borrowing liberally from Paolo's code.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
The Gtk2 project, http://gtk2\-perl.sf.net/
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Depends5.18.3pm                    0100644 0001750 0001750 00000032060 12566242547 025073  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Depends 3"
.TH ExtUtils::Depends 3 "2013-09-28" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Depends \- Easily build XS extensions that depend on XS extensions
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&        use ExtUtils::Depends;
\&        $package = new ExtUtils::Depends (\*(Aqpkg::name\*(Aq, \*(Aqbase::package\*(Aq)
\&        # set the flags and libraries to compile and link the module
\&        $package\->set_inc("\-I/opt/blahblah");
\&        $package\->set_libs("\-lmylib");
\&        # add a .c and an .xs file to compile
\&        $package\->add_c(\*(Aqcode.c\*(Aq);
\&        $package\->add_xs(\*(Aqmodule\-code.xs\*(Aq);
\&        # add the typemaps to use
\&        $package\->add_typemaps("typemap");
\&        # install some extra data files and headers
\&        $package\->install (qw/foo.h data.txt/);
\&        # save the info
\&        $package\->save_config(\*(AqFiles.pm\*(Aq);
\&
\&        WriteMakefile(
\&                \*(AqNAME\*(Aq => \*(AqMymodule\*(Aq,
\&                $package\->get_makefile_vars()
\&        );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module tries to make it easy to build Perl extensions that use
functions and typemaps provided by other perl extensions. This means
that a perl extension is treated like a shared library that provides
also a C and an \s-1XS\s0 interface besides the perl one.
.PP
This works as long as the base extension is loaded with the \s-1RTLD_GLOBAL\s0
flag (usually done with a
.PP
.Vb 1
\&        sub dl_load_flags {0x01}
.Ve
.PP
in the main .pm file) if you need to use functions defined in the module.
.PP
The basic scheme of operation is to collect information about a module
in the instance, and then store that data in the Perl library where it
may be retrieved later.  The object can also reformat this information
into the data structures required by ExtUtils::MakeMaker's WriteMakefile
function.
.PP
When creating a new Depends object, you give it a name, which is the name
of the module you are building.   You can also specify the names of modules
on which this module depends.  These dependencies will be loaded
automatically, and their typemaps, header files, etc merged with your new
object's stuff.  When you store the data for your object, the list of
dependencies are stored with it, so that another module depending on your
needn't know on exactly which modules yours depends.
.PP
For example:
.PP
.Vb 1
\&  Gtk2 depends on Glib
\&
\&  Gnome2::Canvas depends on Gtk2
\&
\&  ExtUtils::Depends\->new (\*(AqGnome2::Canvas\*(Aq, \*(AqGtk2\*(Aq);
\&     this command automatically brings in all the stuff needed
\&     for Glib, since Gtk2 depends on it.
.Ve
.SH "METHODS"
.IX Header "METHODS"
.ie n .IP "$object = ExtUtils::Depends\->new($name, @deps)" 4
.el .IP "\f(CW$object\fR = ExtUtils::Depends\->new($name, \f(CW@deps\fR)" 4
.IX Item "$object = ExtUtils::Depends->new($name, @deps)"
Create a new depends object named \fI\f(CI$name\fI\fR.  Any modules listed in \fI\f(CI@deps\fI\fR
(which may be empty) are added as dependencies and their dependency
information is loaded.  An exception is raised if any dependency information
cannot be loaded.
.ie n .IP "$depends\->add_deps (@deps)" 4
.el .IP "\f(CW$depends\fR\->add_deps (@deps)" 4
.IX Item "$depends->add_deps (@deps)"
Add modules listed in \fI\f(CI@deps\fI\fR as dependencies.
.ie n .IP "(hashes) = $depends\->get_deps" 4
.el .IP "(hashes) = \f(CW$depends\fR\->get_deps" 4
.IX Item "(hashes) = $depends->get_deps"
Fetch information on the dependencies of \fI\f(CI$depends\fI\fR as a hash of hashes,
which are dependency information indexed by module name.  See \f(CW\*(C`load\*(C'\fR.
.ie n .IP "$depends\->set_inc (@newinc)" 4
.el .IP "\f(CW$depends\fR\->set_inc (@newinc)" 4
.IX Item "$depends->set_inc (@newinc)"
Add strings to the includes or cflags variables.
.ie n .IP "$depends\->set_libs (@newlibs)" 4
.el .IP "\f(CW$depends\fR\->set_libs (@newlibs)" 4
.IX Item "$depends->set_libs (@newlibs)"
Add strings to the libs (linker flags) variable.
.ie n .IP "$depends\->add_pm (%pm_files)" 4
.el .IP "\f(CW$depends\fR\->add_pm (%pm_files)" 4
.IX Item "$depends->add_pm (%pm_files)"
Add files to the hash to be passed through ExtUtils::WriteMakefile's
\&\s-1PM\s0 key.
.ie n .IP "$depends\->add_xs (@xs_files)" 4
.el .IP "\f(CW$depends\fR\->add_xs (@xs_files)" 4
.IX Item "$depends->add_xs (@xs_files)"
Add xs files to be compiled.
.ie n .IP "$depends\->add_c (@c_files)" 4
.el .IP "\f(CW$depends\fR\->add_c (@c_files)" 4
.IX Item "$depends->add_c (@c_files)"
Add C files to be compiled.
.ie n .IP "$depends\->add_typemaps (@typemaps)" 4
.el .IP "\f(CW$depends\fR\->add_typemaps (@typemaps)" 4
.IX Item "$depends->add_typemaps (@typemaps)"
Add typemap files to be used and installed.
.ie n .IP "$depends\->add_headers (list)" 4
.el .IP "\f(CW$depends\fR\->add_headers (list)" 4
.IX Item "$depends->add_headers (list)"
No-op, for backward compatibility.
.ie n .IP "$depends\->install (@files)" 4
.el .IP "\f(CW$depends\fR\->install (@files)" 4
.IX Item "$depends->install (@files)"
Install \fI\f(CI@files\fI\fR to the data directory for \fI\f(CI$depends\fI\fR.
.Sp
This actually works by adding them to the hash of pm files that gets
passed through WriteMakefile's \s-1PM\s0 key.
.ie n .IP "$depends\->save_config ($filename)" 4
.el .IP "\f(CW$depends\fR\->save_config ($filename)" 4
.IX Item "$depends->save_config ($filename)"
Save the important information from \fI\f(CI$depends\fI\fR to \fI\f(CI$filename\fI\fR, and
set it up to be installed as \fIname\fR::Install::Files.
.Sp
Note: the actual value of \fI\f(CI$filename\fI\fR seems to be irrelevant, but its
usage is kept for backward compatibility.
.ie n .IP "hash = $depends\->get_makefile_vars" 4
.el .IP "hash = \f(CW$depends\fR\->get_makefile_vars" 4
.IX Item "hash = $depends->get_makefile_vars"
Return the information in \fI\f(CI$depends\fI\fR in a format digestible by
WriteMakefile.
.Sp
This sets at least the following keys:
.Sp
.Vb 4
\&        INC
\&        LIBS
\&        TYPEMAPS
\&        PM
.Ve
.Sp
And these if there is data to fill them:
.Sp
.Vb 3
\&        clean
\&        OBJECT
\&        XS
.Ve
.IP "hashref = ExtUtils::Depends::load (name)" 4
.IX Item "hashref = ExtUtils::Depends::load (name)"
Load and return dependency information for \fIname\fR.  Croaks if no such
information can be found.  The information is returned as an anonymous
hash containing these keys:
.RS 4
.IP "instpath" 4
.IX Item "instpath"
The absolute path to the data install directory for this module.
.IP "typemaps" 4
.IX Item "typemaps"
List of absolute pathnames for this module's typemap files.
.IP "inc" 4
.IX Item "inc"
\&\s-1CFLAGS\s0 string for this module.
.IP "libs" 4
.IX Item "libs"
\&\s-1LIBS\s0 string for this module.
.IP "deps" 4
.IX Item "deps"
List of modules on which this one depends.  This key will not exist when
loading files created by old versions of ExtUtils::Depends.
.RE
.RS 4
.RE
.ie n .IP "$depends\->load_deps" 4
.el .IP "\f(CW$depends\fR\->load_deps" 4
.IX Item "$depends->load_deps"
Load \fI\f(CI$depends\fI\fR dependencies, by calling \f(CW\*(C`load\*(C'\fR on each dependency module.
This is usually done for you, and should only be needed if you want to call
\&\f(CW\*(C`get_deps\*(C'\fR after calling \f(CW\*(C`add_deps\*(C'\fR manually.
.SH "SUPPORT"
.IX Header "SUPPORT"
.SS "Bugs/Feature Requests"
.IX Subsection "Bugs/Feature Requests"
Version 0.2 discards some of the more esoteric features provided by the
older versions.  As they were completely undocumented, and this module
has yet to reach 1.0, this may not exactly be a bug.
.PP
This module is tightly coupled to the ExtUtils::MakeMaker architecture.
.PP
You can submit new bugs/feature requests by using one of two bug trackers
(below).
.IP "\s-1CPAN\s0 Request Tracker" 4
.IX Item "CPAN Request Tracker"
You can submit bugs/feature requests via the web by going to
<https://rt.cpan.org/Public/Bug/Report.html?Queue=ExtUtils\-Depends> (requires
\&\s-1PAUSE ID\s0 or Bitcard), or by sending an e\-mail to
\&\*(L"bug-ExtUtils-Depends at rt.cpan.org\*(R".
.IP "Gnome.org Bugzilla" 4
.IX Item "Gnome.org Bugzilla"
Report bugs/feature requests to the 'gnome\-perl' product (requires login)
<http://bugzilla.gnome.org/enter_bug.cgi?product=gnome\-perl>
.PP
Patches that implement new features with test cases, and/or test cases that
exercise existing bugs are always welcome.
.PP
The Gtk-Perl mailing list is at \*(L"gtk-perl-list at gnome dot org\*(R".
.SS "Source Code"
.IX Subsection "Source Code"
The source code to ExtUtils::Depends is available at the Gnome.org Git repo
(<https://git.gnome.org/browse/perl\-ExtUtils\-Depends/>).  Create your own
copy of the Git repo with:
.PP
.Vb 2
\&  git clone git://git.gnome.org/perl\-ExtUtils\-Depends (Git protocol)
\&  git clone https://git.gnome.org/browse/perl\-ExtUtils\-Depends/ (HTTPS)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker.
.SH "AUTHOR"
.IX Header "AUTHOR"
Paolo Molaro <lupus at debian dot org> wrote the original version for
Gtk-Perl.  muppet <scott at asofyet dot org> rewrote the innards for
version 0.2, borrowing liberally from Paolo's code.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
The Gtk2 project, <http://gtk2\-perl.sf.net>/\*(L"gtk-perl-list at gnome dot org\*(R".
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you may redistribute it and/or modify it
under the same terms as Perl itself.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Embed.3pm                          0100644 0001750 0001750 00000025771 12566207454 024222  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Embed 3pm"
.TH ExtUtils::Embed 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Embed \- Utilities for embedding Perl in C/C++ applications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& perl \-MExtUtils::Embed \-e xsinit 
\& perl \-MExtUtils::Embed \-e ccopts 
\& perl \-MExtUtils::Embed \-e ldopts
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Embed provides utility functions for embedding a Perl interpreter
and extensions in your C/\*(C+ applications.  
Typically, an application \fBMakefile\fR will invoke ExtUtils::Embed
functions while building your application.
.ie n .SH "@EXPORT"
.el .SH "\f(CW@EXPORT\fP"
.IX Header "@EXPORT"
ExtUtils::Embed exports the following functions:
.PP
\&\fIxsinit()\fR, \fIldopts()\fR, \fIccopts()\fR, \fIperl_inc()\fR, \fIccflags()\fR, 
\&\fIccdlflags()\fR, \fIxsi_header()\fR, \fIxsi_protos()\fR, \fIxsi_body()\fR
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fIxsinit()\fR" 4
.IX Item "xsinit()"
Generate C/\*(C+ code for the \s-1XS\s0 initializer function.
.Sp
When invoked as \f(CW\*(C`\`perl \-MExtUtils::Embed \-e xsinit \-\-\`\*(C'\fR
the following options are recognized:
.Sp
\&\fB\-o\fR <output filename> (Defaults to \fBperlxsi.c\fR)
.Sp
\&\fB\-o \s-1STDOUT\s0\fR will print to \s-1STDOUT.\s0
.Sp
\&\fB\-std\fR (Write code for extensions that are linked with the current Perl.)
.Sp
Any additional arguments are expected to be names of modules
to generate code for.
.Sp
When invoked with parameters the following are accepted and optional:
.Sp
\&\f(CW\*(C`xsinit($filename,$std,[@modules])\*(C'\fR
.Sp
Where,
.Sp
\&\fB\f(CB$filename\fB\fR is equivalent to the \fB\-o\fR option.
.Sp
\&\fB\f(CB$std\fB\fR is boolean, equivalent to the \fB\-std\fR option.
.Sp
\&\fB[@modules]\fR is an array ref, same as additional arguments mentioned above.
.IP "Examples" 4
.IX Item "Examples"
.Vb 1
\& perl \-MExtUtils::Embed \-e xsinit \-\- \-o xsinit.c Socket
.Ve
.Sp
This will generate code with an \fBxs_init\fR function that glues the perl \fBSocket::bootstrap\fR function 
to the C \fBboot_Socket\fR function and writes it to a file named \fIxsinit.c\fR.
.Sp
Note that \fBDynaLoader\fR is a special case where it must call \fBboot_DynaLoader\fR directly.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e xsinit
.Ve
.Sp
This will generate code for linking with \fBDynaLoader\fR and 
each static extension found in \fB\f(CB$Config\fB{static_ext}\fR.
The code is written to the default file name \fBperlxsi.c\fR.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e xsinit \-\- \-o xsinit.c \-std DBI DBD::Oracle
.Ve
.Sp
Here, code is written for all the currently linked extensions along with code
for \fB\s-1DBI\s0\fR and \fBDBD::Oracle\fR.
.Sp
If you have a working \fBDynaLoader\fR then there is rarely any need to statically link in any 
other extensions.
.IP "\fIldopts()\fR" 4
.IX Item "ldopts()"
Output arguments for linking the Perl library and extensions to your
application.
.Sp
When invoked as \f(CW\*(C`\`perl \-MExtUtils::Embed \-e ldopts \-\-\`\*(C'\fR
the following options are recognized:
.Sp
\&\fB\-std\fR
.Sp
Output arguments for linking the Perl library and any extensions linked
with the current Perl.
.Sp
\&\fB\-I\fR <path1:path2>
.Sp
Search path for ModuleName.a archives.  
Default path is \fB\f(CB@INC\fB\fR.
Library archives are expected to be found as 
\&\fB/some/path/auto/ModuleName/ModuleName.a\fR
For example, when looking for \fBSocket.a\fR relative to a search path, 
we should find \fBauto/Socket/Socket.a\fR
.Sp
When looking for \fBDBD::Oracle\fR relative to a search path,
we should find \fBauto/DBD/Oracle/Oracle.a\fR
.Sp
Keep in mind that you can always supply \fB/my/own/path/ModuleName.a\fR
as an additional linker argument.
.Sp
\&\fB\-\-\fR  <list of linker args>
.Sp
Additional linker arguments to be considered.
.Sp
Any additional arguments found before the \fB\-\-\fR token 
are expected to be names of modules to generate code for.
.Sp
When invoked with parameters the following are accepted and optional:
.Sp
\&\f(CW\*(C`ldopts($std,[@modules],[@link_args],$path)\*(C'\fR
.Sp
Where:
.Sp
\&\fB\f(CB$std\fB\fR is boolean, equivalent to the \fB\-std\fR option.
.Sp
\&\fB[@modules]\fR is equivalent to additional arguments found before the \fB\-\-\fR token.
.Sp
\&\fB[@link_args]\fR is equivalent to arguments found after the \fB\-\-\fR token.
.Sp
\&\fB\f(CB$path\fB\fR is equivalent to the \fB\-I\fR option.
.Sp
In addition, when ldopts is called with parameters, it will return the argument string
rather than print it to \s-1STDOUT.\s0
.IP "Examples" 4
.IX Item "Examples"
.Vb 1
\& perl \-MExtUtils::Embed \-e ldopts
.Ve
.Sp
This will print arguments for linking with \fBlibperl\fR and
extensions found in \fB\f(CB$Config\fB{static_ext}\fR.  This includes libraries
found in \fB\f(CB$Config\fB{libs}\fR and the first ModuleName.a library
for each extension that is found by searching \fB\f(CB@INC\fB\fR or the path 
specified by the \fB\-I\fR option.  
In addition, when ModuleName.a is found, additional linker arguments
are picked up from the \fBextralibs.ld\fR file in the same directory.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e ldopts \-\- \-std Socket
.Ve
.Sp
This will do the same as the above example, along with printing additional arguments for linking with the \fBSocket\fR extension.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e ldopts \-\- \-std Msql \-\- \-L/usr/msql/lib \-lmsql
.Ve
.Sp
Any arguments after the second '\-\-' token are additional linker
arguments that will be examined for potential conflict.  If there is no
conflict, the additional arguments will be part of the output.
.IP "\fIperl_inc()\fR" 4
.IX Item "perl_inc()"
For including perl header files this function simply prints:
.Sp
.Vb 1
\& \-I$Config{archlibexp}/CORE
.Ve
.Sp
So, rather than having to say:
.Sp
.Vb 1
\& perl \-MConfig \-e \*(Aqprint "\-I$Config{archlibexp}/CORE"\*(Aq
.Ve
.Sp
Just say:
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e perl_inc
.Ve
.IP "\fIccflags()\fR, \fIccdlflags()\fR" 4
.IX Item "ccflags(), ccdlflags()"
These functions simply print \f(CW$Config\fR{ccflags} and \f(CW$Config\fR{ccdlflags}
.IP "\fIccopts()\fR" 4
.IX Item "ccopts()"
This function combines \fIperl_inc()\fR, \fIccflags()\fR and \fIccdlflags()\fR into one.
.IP "\fIxsi_header()\fR" 4
.IX Item "xsi_header()"
This function simply returns a string defining the same \fB\s-1EXTERN_C\s0\fR macro as
\&\fBperlmain.c\fR along with #including \fBperl.h\fR and \fB\s-1EXTERN\s0.h\fR.
.IP "xsi_protos(@modules)" 4
.IX Item "xsi_protos(@modules)"
This function returns a string of \fBboot_$ModuleName\fR prototypes for each \f(CW@modules\fR.
.IP "xsi_body(@modules)" 4
.IX Item "xsi_body(@modules)"
This function returns a string of calls to \fB\f(BInewXS()\fB\fR that glue the module \fBbootstrap\fR
function to \fBboot_ModuleName\fR for each \f(CW@modules\fR.
.Sp
\&\fB\f(BIxsinit()\fB\fR uses the xsi_* functions to generate most of its code.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
For examples on how to use \fBExtUtils::Embed\fR for building C/\*(C+ applications
with embedded perl, see perlembed.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlembed
.SH "AUTHOR"
.IX Header "AUTHOR"
Doug MacEachern <\fIdougm@osf.org\fR>
.PP
Based on ideas from Tim Bunce <\fITim.Bunce@ig.co.uk\fR> and
\&\fBminimod.pl\fR by Andreas Koenig <\fIk@anna.in\-berlin.de\fR> and Tim Bunce.
       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Embed5.16.3pm                      0100644 0001750 0001750 00000025450 12566207433 024523  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Embed 3pm"
.TH ExtUtils::Embed 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Embed \- Utilities for embedding Perl in C/C++ applications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& perl \-MExtUtils::Embed \-e xsinit 
\& perl \-MExtUtils::Embed \-e ccopts 
\& perl \-MExtUtils::Embed \-e ldopts
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Embed provides utility functions for embedding a Perl interpreter
and extensions in your C/\*(C+ applications.  
Typically, an application \fBMakefile\fR will invoke ExtUtils::Embed
functions while building your application.
.ie n .SH "@EXPORT"
.el .SH "\f(CW@EXPORT\fP"
.IX Header "@EXPORT"
ExtUtils::Embed exports the following functions:
.PP
\&\fIxsinit()\fR, \fIldopts()\fR, \fIccopts()\fR, \fIperl_inc()\fR, \fIccflags()\fR, 
\&\fIccdlflags()\fR, \fIxsi_header()\fR, \fIxsi_protos()\fR, \fIxsi_body()\fR
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fIxsinit()\fR" 4
.IX Item "xsinit()"
Generate C/\*(C+ code for the \s-1XS\s0 initializer function.
.Sp
When invoked as \f(CW\*(C`\`perl \-MExtUtils::Embed \-e xsinit \-\-\`\*(C'\fR
the following options are recognized:
.Sp
\&\fB\-o\fR <output filename> (Defaults to \fBperlxsi.c\fR)
.Sp
\&\fB\-o \s-1STDOUT\s0\fR will print to \s-1STDOUT\s0.
.Sp
\&\fB\-std\fR (Write code for extensions that are linked with the current Perl.)
.Sp
Any additional arguments are expected to be names of modules
to generate code for.
.Sp
When invoked with parameters the following are accepted and optional:
.Sp
\&\f(CW\*(C`xsinit($filename,$std,[@modules])\*(C'\fR
.Sp
Where,
.Sp
\&\fB\f(CB$filename\fB\fR is equivalent to the \fB\-o\fR option.
.Sp
\&\fB\f(CB$std\fB\fR is boolean, equivalent to the \fB\-std\fR option.
.Sp
\&\fB[@modules]\fR is an array ref, same as additional arguments mentioned above.
.IP "Examples" 4
.IX Item "Examples"
.Vb 1
\& perl \-MExtUtils::Embed \-e xsinit \-\- \-o xsinit.c Socket
.Ve
.Sp
This will generate code with an \fBxs_init\fR function that glues the perl \fBSocket::bootstrap\fR function 
to the C \fBboot_Socket\fR function and writes it to a file named \fIxsinit.c\fR.
.Sp
Note that \fBDynaLoader\fR is a special case where it must call \fBboot_DynaLoader\fR directly.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e xsinit
.Ve
.Sp
This will generate code for linking with \fBDynaLoader\fR and 
each static extension found in \fB\f(CB$Config\fB{static_ext}\fR.
The code is written to the default file name \fBperlxsi.c\fR.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e xsinit \-\- \-o xsinit.c \-std DBI DBD::Oracle
.Ve
.Sp
Here, code is written for all the currently linked extensions along with code
for \fB\s-1DBI\s0\fR and \fBDBD::Oracle\fR.
.Sp
If you have a working \fBDynaLoader\fR then there is rarely any need to statically link in any 
other extensions.
.IP "\fIldopts()\fR" 4
.IX Item "ldopts()"
Output arguments for linking the Perl library and extensions to your
application.
.Sp
When invoked as \f(CW\*(C`\`perl \-MExtUtils::Embed \-e ldopts \-\-\`\*(C'\fR
the following options are recognized:
.Sp
\&\fB\-std\fR
.Sp
Output arguments for linking the Perl library and any extensions linked
with the current Perl.
.Sp
\&\fB\-I\fR <path1:path2>
.Sp
Search path for ModuleName.a archives.  
Default path is \fB\f(CB@INC\fB\fR.
Library archives are expected to be found as 
\&\fB/some/path/auto/ModuleName/ModuleName.a\fR
For example, when looking for \fBSocket.a\fR relative to a search path, 
we should find \fBauto/Socket/Socket.a\fR
.Sp
When looking for \fBDBD::Oracle\fR relative to a search path,
we should find \fBauto/DBD/Oracle/Oracle.a\fR
.Sp
Keep in mind that you can always supply \fB/my/own/path/ModuleName.a\fR
as an additional linker argument.
.Sp
\&\fB\-\-\fR  <list of linker args>
.Sp
Additional linker arguments to be considered.
.Sp
Any additional arguments found before the \fB\-\-\fR token 
are expected to be names of modules to generate code for.
.Sp
When invoked with parameters the following are accepted and optional:
.Sp
\&\f(CW\*(C`ldopts($std,[@modules],[@link_args],$path)\*(C'\fR
.Sp
Where:
.Sp
\&\fB\f(CB$std\fB\fR is boolean, equivalent to the \fB\-std\fR option.
.Sp
\&\fB[@modules]\fR is equivalent to additional arguments found before the \fB\-\-\fR token.
.Sp
\&\fB[@link_args]\fR is equivalent to arguments found after the \fB\-\-\fR token.
.Sp
\&\fB\f(CB$path\fB\fR is equivalent to the \fB\-I\fR option.
.Sp
In addition, when ldopts is called with parameters, it will return the argument string
rather than print it to \s-1STDOUT\s0.
.IP "Examples" 4
.IX Item "Examples"
.Vb 1
\& perl \-MExtUtils::Embed \-e ldopts
.Ve
.Sp
This will print arguments for linking with \fBlibperl\fR and
extensions found in \fB\f(CB$Config\fB{static_ext}\fR.  This includes libraries
found in \fB\f(CB$Config\fB{libs}\fR and the first ModuleName.a library
for each extension that is found by searching \fB\f(CB@INC\fB\fR or the path 
specified by the \fB\-I\fR option.  
In addition, when ModuleName.a is found, additional linker arguments
are picked up from the \fBextralibs.ld\fR file in the same directory.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e ldopts \-\- \-std Socket
.Ve
.Sp
This will do the same as the above example, along with printing additional arguments for linking with the \fBSocket\fR extension.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e ldopts \-\- \-std Msql \-\- \-L/usr/msql/lib \-lmsql
.Ve
.Sp
Any arguments after the second '\-\-' token are additional linker
arguments that will be examined for potential conflict.  If there is no
conflict, the additional arguments will be part of the output.
.IP "\fIperl_inc()\fR" 4
.IX Item "perl_inc()"
For including perl header files this function simply prints:
.Sp
.Vb 1
\& \-I$Config{archlibexp}/CORE
.Ve
.Sp
So, rather than having to say:
.Sp
.Vb 1
\& perl \-MConfig \-e \*(Aqprint "\-I$Config{archlibexp}/CORE"\*(Aq
.Ve
.Sp
Just say:
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e perl_inc
.Ve
.IP "\fIccflags()\fR, \fIccdlflags()\fR" 4
.IX Item "ccflags(), ccdlflags()"
These functions simply print \f(CW$Config\fR{ccflags} and \f(CW$Config\fR{ccdlflags}
.IP "\fIccopts()\fR" 4
.IX Item "ccopts()"
This function combines \fIperl_inc()\fR, \fIccflags()\fR and \fIccdlflags()\fR into one.
.IP "\fIxsi_header()\fR" 4
.IX Item "xsi_header()"
This function simply returns a string defining the same \fB\s-1EXTERN_C\s0\fR macro as
\&\fBperlmain.c\fR along with #including \fBperl.h\fR and \fB\s-1EXTERN\s0.h\fR.
.IP "xsi_protos(@modules)" 4
.IX Item "xsi_protos(@modules)"
This function returns a string of \fBboot_$ModuleName\fR prototypes for each \f(CW@modules\fR.
.IP "xsi_body(@modules)" 4
.IX Item "xsi_body(@modules)"
This function returns a string of calls to \fB\f(BInewXS()\fB\fR that glue the module \fBbootstrap\fR
function to \fBboot_ModuleName\fR for each \f(CW@modules\fR.
.Sp
\&\fB\f(BIxsinit()\fB\fR uses the xsi_* functions to generate most of its code.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
For examples on how to use \fBExtUtils::Embed\fR for building C/\*(C+ applications
with embedded perl, see perlembed.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlembed
.SH "AUTHOR"
.IX Header "AUTHOR"
Doug MacEachern <\fIdougm@osf.org\fR>
.PP
Based on ideas from Tim Bunce <\fITim.Bunce@ig.co.uk\fR> and
\&\fBminimod.pl\fR by Andreas Koenig <\fIk@anna.in\-berlin.de\fR> and Tim Bunce.
                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Embed5.18.3pm                      0100644 0001750 0001750 00000025771 12566207454 024536  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Embed 3pm"
.TH ExtUtils::Embed 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Embed \- Utilities for embedding Perl in C/C++ applications
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\& perl \-MExtUtils::Embed \-e xsinit 
\& perl \-MExtUtils::Embed \-e ccopts 
\& perl \-MExtUtils::Embed \-e ldopts
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Embed provides utility functions for embedding a Perl interpreter
and extensions in your C/\*(C+ applications.  
Typically, an application \fBMakefile\fR will invoke ExtUtils::Embed
functions while building your application.
.ie n .SH "@EXPORT"
.el .SH "\f(CW@EXPORT\fP"
.IX Header "@EXPORT"
ExtUtils::Embed exports the following functions:
.PP
\&\fIxsinit()\fR, \fIldopts()\fR, \fIccopts()\fR, \fIperl_inc()\fR, \fIccflags()\fR, 
\&\fIccdlflags()\fR, \fIxsi_header()\fR, \fIxsi_protos()\fR, \fIxsi_body()\fR
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.IP "\fIxsinit()\fR" 4
.IX Item "xsinit()"
Generate C/\*(C+ code for the \s-1XS\s0 initializer function.
.Sp
When invoked as \f(CW\*(C`\`perl \-MExtUtils::Embed \-e xsinit \-\-\`\*(C'\fR
the following options are recognized:
.Sp
\&\fB\-o\fR <output filename> (Defaults to \fBperlxsi.c\fR)
.Sp
\&\fB\-o \s-1STDOUT\s0\fR will print to \s-1STDOUT.\s0
.Sp
\&\fB\-std\fR (Write code for extensions that are linked with the current Perl.)
.Sp
Any additional arguments are expected to be names of modules
to generate code for.
.Sp
When invoked with parameters the following are accepted and optional:
.Sp
\&\f(CW\*(C`xsinit($filename,$std,[@modules])\*(C'\fR
.Sp
Where,
.Sp
\&\fB\f(CB$filename\fB\fR is equivalent to the \fB\-o\fR option.
.Sp
\&\fB\f(CB$std\fB\fR is boolean, equivalent to the \fB\-std\fR option.
.Sp
\&\fB[@modules]\fR is an array ref, same as additional arguments mentioned above.
.IP "Examples" 4
.IX Item "Examples"
.Vb 1
\& perl \-MExtUtils::Embed \-e xsinit \-\- \-o xsinit.c Socket
.Ve
.Sp
This will generate code with an \fBxs_init\fR function that glues the perl \fBSocket::bootstrap\fR function 
to the C \fBboot_Socket\fR function and writes it to a file named \fIxsinit.c\fR.
.Sp
Note that \fBDynaLoader\fR is a special case where it must call \fBboot_DynaLoader\fR directly.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e xsinit
.Ve
.Sp
This will generate code for linking with \fBDynaLoader\fR and 
each static extension found in \fB\f(CB$Config\fB{static_ext}\fR.
The code is written to the default file name \fBperlxsi.c\fR.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e xsinit \-\- \-o xsinit.c \-std DBI DBD::Oracle
.Ve
.Sp
Here, code is written for all the currently linked extensions along with code
for \fB\s-1DBI\s0\fR and \fBDBD::Oracle\fR.
.Sp
If you have a working \fBDynaLoader\fR then there is rarely any need to statically link in any 
other extensions.
.IP "\fIldopts()\fR" 4
.IX Item "ldopts()"
Output arguments for linking the Perl library and extensions to your
application.
.Sp
When invoked as \f(CW\*(C`\`perl \-MExtUtils::Embed \-e ldopts \-\-\`\*(C'\fR
the following options are recognized:
.Sp
\&\fB\-std\fR
.Sp
Output arguments for linking the Perl library and any extensions linked
with the current Perl.
.Sp
\&\fB\-I\fR <path1:path2>
.Sp
Search path for ModuleName.a archives.  
Default path is \fB\f(CB@INC\fB\fR.
Library archives are expected to be found as 
\&\fB/some/path/auto/ModuleName/ModuleName.a\fR
For example, when looking for \fBSocket.a\fR relative to a search path, 
we should find \fBauto/Socket/Socket.a\fR
.Sp
When looking for \fBDBD::Oracle\fR relative to a search path,
we should find \fBauto/DBD/Oracle/Oracle.a\fR
.Sp
Keep in mind that you can always supply \fB/my/own/path/ModuleName.a\fR
as an additional linker argument.
.Sp
\&\fB\-\-\fR  <list of linker args>
.Sp
Additional linker arguments to be considered.
.Sp
Any additional arguments found before the \fB\-\-\fR token 
are expected to be names of modules to generate code for.
.Sp
When invoked with parameters the following are accepted and optional:
.Sp
\&\f(CW\*(C`ldopts($std,[@modules],[@link_args],$path)\*(C'\fR
.Sp
Where:
.Sp
\&\fB\f(CB$std\fB\fR is boolean, equivalent to the \fB\-std\fR option.
.Sp
\&\fB[@modules]\fR is equivalent to additional arguments found before the \fB\-\-\fR token.
.Sp
\&\fB[@link_args]\fR is equivalent to arguments found after the \fB\-\-\fR token.
.Sp
\&\fB\f(CB$path\fB\fR is equivalent to the \fB\-I\fR option.
.Sp
In addition, when ldopts is called with parameters, it will return the argument string
rather than print it to \s-1STDOUT.\s0
.IP "Examples" 4
.IX Item "Examples"
.Vb 1
\& perl \-MExtUtils::Embed \-e ldopts
.Ve
.Sp
This will print arguments for linking with \fBlibperl\fR and
extensions found in \fB\f(CB$Config\fB{static_ext}\fR.  This includes libraries
found in \fB\f(CB$Config\fB{libs}\fR and the first ModuleName.a library
for each extension that is found by searching \fB\f(CB@INC\fB\fR or the path 
specified by the \fB\-I\fR option.  
In addition, when ModuleName.a is found, additional linker arguments
are picked up from the \fBextralibs.ld\fR file in the same directory.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e ldopts \-\- \-std Socket
.Ve
.Sp
This will do the same as the above example, along with printing additional arguments for linking with the \fBSocket\fR extension.
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e ldopts \-\- \-std Msql \-\- \-L/usr/msql/lib \-lmsql
.Ve
.Sp
Any arguments after the second '\-\-' token are additional linker
arguments that will be examined for potential conflict.  If there is no
conflict, the additional arguments will be part of the output.
.IP "\fIperl_inc()\fR" 4
.IX Item "perl_inc()"
For including perl header files this function simply prints:
.Sp
.Vb 1
\& \-I$Config{archlibexp}/CORE
.Ve
.Sp
So, rather than having to say:
.Sp
.Vb 1
\& perl \-MConfig \-e \*(Aqprint "\-I$Config{archlibexp}/CORE"\*(Aq
.Ve
.Sp
Just say:
.Sp
.Vb 1
\& perl \-MExtUtils::Embed \-e perl_inc
.Ve
.IP "\fIccflags()\fR, \fIccdlflags()\fR" 4
.IX Item "ccflags(), ccdlflags()"
These functions simply print \f(CW$Config\fR{ccflags} and \f(CW$Config\fR{ccdlflags}
.IP "\fIccopts()\fR" 4
.IX Item "ccopts()"
This function combines \fIperl_inc()\fR, \fIccflags()\fR and \fIccdlflags()\fR into one.
.IP "\fIxsi_header()\fR" 4
.IX Item "xsi_header()"
This function simply returns a string defining the same \fB\s-1EXTERN_C\s0\fR macro as
\&\fBperlmain.c\fR along with #including \fBperl.h\fR and \fB\s-1EXTERN\s0.h\fR.
.IP "xsi_protos(@modules)" 4
.IX Item "xsi_protos(@modules)"
This function returns a string of \fBboot_$ModuleName\fR prototypes for each \f(CW@modules\fR.
.IP "xsi_body(@modules)" 4
.IX Item "xsi_body(@modules)"
This function returns a string of calls to \fB\f(BInewXS()\fB\fR that glue the module \fBbootstrap\fR
function to \fBboot_ModuleName\fR for each \f(CW@modules\fR.
.Sp
\&\fB\f(BIxsinit()\fB\fR uses the xsi_* functions to generate most of its code.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
For examples on how to use \fBExtUtils::Embed\fR for building C/\*(C+ applications
with embedded perl, see perlembed.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perlembed
.SH "AUTHOR"
.IX Header "AUTHOR"
Doug MacEachern <\fIdougm@osf.org\fR>
.PP
Based on ideas from Tim Bunce <\fITim.Bunce@ig.co.uk\fR> and
\&\fBminimod.pl\fR by Andreas Koenig <\fIk@anna.in\-berlin.de\fR> and Tim Bunce.
       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Helpers.3pm                        0100644 0001750 0001750 00000014314 12566242350 024571  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Helpers 3"
.TH ExtUtils::Helpers 3 "2013-05-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Helpers \- Various portability utilities for module builders
.SH "VERSION"
.IX Header "VERSION"
version 0.021
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::Helpers qw/build_script make_executable split_like_shell/;
\&
\& unshift @ARGV, split_like_shell($ENV{PROGRAM_OPTS});
\& write_script_to(\*(AqBuild\*(Aq);
\& make_executable(\*(AqBuild\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides various portable helper functions for module building modules.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "\fIbuild_script()\fP"
.IX Subsection "build_script()"
This function returns the appropriate name for the Build script on the local platform.
.SS "make_executable($filename)"
.IX Subsection "make_executable($filename)"
This makes a perl script executable.
.SS "split_like_shell($string)"
.IX Subsection "split_like_shell($string)"
This function splits a string the same way as the local platform does.
.SS "detildefy($path)"
.IX Subsection "detildefy($path)"
This function substitutes a tilde at the start of a path with the users homedir in an appropriate manner.
.SS "man1_pagename($filename)"
.IX Subsection "man1_pagename($filename)"
Returns the man page filename for a script.
.ie n .SS "man3_pagename($filename, $basedir)"
.el .SS "man3_pagename($filename, \f(CW$basedir\fP)"
.IX Subsection "man3_pagename($filename, $basedir)"
Returns the man page filename for a Perl library.
.ie n .SS "manify($input_filename, $output_file, $section, $opts)"
.el .SS "manify($input_filename, \f(CW$output_file\fP, \f(CW$section\fP, \f(CW$opts\fP)"
.IX Subsection "manify($input_filename, $output_file, $section, $opts)"
Create a manpage for the script in \f(CW$input_filename\fR as \f(CW$output_file\fR in section \f(CW$section\fR
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Olivier Mengue\*' and Christian Walde made \f(CW\*(C`make_executable\*(C'\fR work on Windows.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Helpers5.18.3pm                    0100644 0001750 0001750 00000014314 12566242350 025105  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Helpers 3"
.TH ExtUtils::Helpers 3 "2013-05-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Helpers \- Various portability utilities for module builders
.SH "VERSION"
.IX Header "VERSION"
version 0.021
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::Helpers qw/build_script make_executable split_like_shell/;
\&
\& unshift @ARGV, split_like_shell($ENV{PROGRAM_OPTS});
\& write_script_to(\*(AqBuild\*(Aq);
\& make_executable(\*(AqBuild\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides various portable helper functions for module building modules.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.SS "\fIbuild_script()\fP"
.IX Subsection "build_script()"
This function returns the appropriate name for the Build script on the local platform.
.SS "make_executable($filename)"
.IX Subsection "make_executable($filename)"
This makes a perl script executable.
.SS "split_like_shell($string)"
.IX Subsection "split_like_shell($string)"
This function splits a string the same way as the local platform does.
.SS "detildefy($path)"
.IX Subsection "detildefy($path)"
This function substitutes a tilde at the start of a path with the users homedir in an appropriate manner.
.SS "man1_pagename($filename)"
.IX Subsection "man1_pagename($filename)"
Returns the man page filename for a script.
.ie n .SS "man3_pagename($filename, $basedir)"
.el .SS "man3_pagename($filename, \f(CW$basedir\fP)"
.IX Subsection "man3_pagename($filename, $basedir)"
Returns the man page filename for a Perl library.
.ie n .SS "manify($input_filename, $output_file, $section, $opts)"
.el .SS "manify($input_filename, \f(CW$output_file\fP, \f(CW$section\fP, \f(CW$opts\fP)"
.IX Subsection "manify($input_filename, $output_file, $section, $opts)"
Create a manpage for the script in \f(CW$input_filename\fR as \f(CW$output_file\fR in section \f(CW$section\fR
.SH "ACKNOWLEDGEMENTS"
.IX Header "ACKNOWLEDGEMENTS"
Olivier Mengue\*' and Christian Walde made \f(CW\*(C`make_executable\*(C'\fR work on Windows.
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Helpers::Unix.3pm                  0100644 0001750 0001750 00000010702 12566242350 025616  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Helpers::Unix 3"
.TH ExtUtils::Helpers::Unix 3 "2013-05-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Helpers::Unix \- Unix specific helper bits
.SH "VERSION"
.IX Header "VERSION"
version 0.021
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Helpers::Unix5.18.3pm              0100644 0001750 0001750 00000010702 12566242350 026132  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Helpers::Unix 3"
.TH ExtUtils::Helpers::Unix 3 "2013-05-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Helpers::Unix \- Unix specific helper bits
.SH "VERSION"
.IX Header "VERSION"
version 0.021
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Helpers::VMS.3pm                   0100644 0001750 0001750 00000010676 12566242350 025352  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Helpers::VMS 3"
.TH ExtUtils::Helpers::VMS 3 "2013-05-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Helpers::VMS \- VMS specific helper bits
.SH "VERSION"
.IX Header "VERSION"
version 0.021
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Helpers::VMS5.18.3pm               0100644 0001750 0001750 00000010676 12566242350 025666  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Helpers::VMS 3"
.TH ExtUtils::Helpers::VMS 3 "2013-05-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Helpers::VMS \- VMS specific helper bits
.SH "VERSION"
.IX Header "VERSION"
version 0.021
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Helpers::Windows.3pm               0100644 0001750 0001750 00000010716 12566242350 026332  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Helpers::Windows 3"
.TH ExtUtils::Helpers::Windows 3 "2013-05-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Helpers::Windows \- Windows specific helper bits
.SH "VERSION"
.IX Header "VERSION"
version 0.021
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Helpers::Windows5.18.3pm           0100644 0001750 0001750 00000010716 12566242350 026646  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Helpers::Windows 3"
.TH ExtUtils::Helpers::Windows 3 "2013-05-06" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Helpers::Windows \- Windows specific helper bits
.SH "VERSION"
.IX Header "VERSION"
version 0.021
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2004 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Install.3pm                        0100644 0001750 0001750 00000034137 12566207454 024610  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Install 3pm"
.TH ExtUtils::Install 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Install \- install files from here to there
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use ExtUtils::Install;
\&
\&  install({ \*(Aqblib/lib\*(Aq => \*(Aqsome/install/dir\*(Aq } );
\&
\&  uninstall($packlist);
\&
\&  pm_to_blib({ \*(Aqlib/Foo/Bar.pm\*(Aq => \*(Aqblib/lib/Foo/Bar.pm\*(Aq });
.Ve
.SH "VERSION"
.IX Header "VERSION"
1.59
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handles the installing and uninstalling of perl modules, scripts, man
pages, etc...
.PP
Both \fIinstall()\fR and \fIuninstall()\fR are specific to the way
ExtUtils::MakeMaker handles the installation and deinstallation of
perl modules. They are not designed as general purpose tools.
.PP
On some operating systems such as Win32 installation may not be possible
until after a reboot has occured. This can have varying consequences:
removing an old \s-1DLL\s0 does not impact programs using the new one, but if
a new \s-1DLL\s0 cannot be installed properly until reboot then anything
depending on it must wait. The package variable
.PP
.Vb 1
\&  $ExtUtils::Install::MUST_REBOOT
.Ve
.PP
is used to store this status.
.PP
If this variable is true then such an operation has occured and
anything depending on this module cannot proceed until a reboot
has occured.
.PP
If this value is defined but false then such an operation has
ocurred, but should not impact later operations.
.SS "Functions"
.IX Subsection "Functions"
.IP "\fBinstall\fR" 4
.IX Item "install"
.Vb 4
\&    # deprecated forms
\&    install(\e%from_to);
\&    install(\e%from_to, $verbose, $dry_run, $uninstall_shadows,
\&                $skip, $always_copy, \e%result);
\&
\&    # recommended form as of 1.47
\&    install([
\&        from_to => \e%from_to,
\&        verbose => 1,
\&        dry_run => 0,
\&        uninstall_shadows => 1,
\&        skip => undef,
\&        always_copy => 1,
\&        result => \e%install_results,
\&    ]);
.Ve
.Sp
Copies each directory tree of \f(CW%from_to\fR to its corresponding value
preserving timestamps and permissions.
.Sp
There are two keys with a special meaning in the hash: \*(L"read\*(R" and
\&\*(L"write\*(R".  These contain packlist files.  After the copying is done,
\&\fIinstall()\fR will write the list of target files to \f(CW$from_to\fR{write}. If
\&\f(CW$from_to\fR{read} is given the contents of this file will be merged into
the written file. The read and the written file may be identical, but
on \s-1AFS\s0 it is quite likely that people are installing to a different
directory than the one where the files later appear.
.Sp
If \f(CW$verbose\fR is true, will print out each file removed.  Default is
false.  This is \*(L"make install VERBINST=1\*(R". \f(CW$verbose\fR values going
up to 5 show increasingly more diagnostics output.
.Sp
If \f(CW$dry_run\fR is true it will only print what it was going to do
without actually doing it.  Default is false.
.Sp
If \f(CW$uninstall_shadows\fR is true any differing versions throughout \f(CW@INC\fR
will be uninstalled.  This is \*(L"make install UNINST=1\*(R"
.Sp
As of 1.37_02 \fIinstall()\fR supports the use of a list of patterns to filter out
files that shouldn't be installed. If \f(CW$skip\fR is omitted or undefined then
install will try to read the list from \s-1INSTALL.SKIP\s0 in the \s-1CWD.\s0 This file is
a list of regular expressions and is just like the \s-1MANIFEST.SKIP\s0 file used
by ExtUtils::Manifest.
.Sp
A default site \s-1INSTALL.SKIP\s0 may be provided by setting then environment
variable \s-1EU_INSTALL_SITE_SKIPFILE,\s0 this will only be used when there isn't a
distribution specific \s-1INSTALL.SKIP.\s0 If the environment variable
\&\s-1EU_INSTALL_IGNORE_SKIP\s0 is true then no install file filtering will be
performed.
.Sp
If \f(CW$skip\fR is undefined then the skip file will be autodetected and used if it
is found. If \f(CW$skip\fR is a reference to an array then it is assumed the array
contains the list of patterns, if \f(CW$skip\fR is a true non reference it is
assumed to be the filename holding the list of patterns, any other value of
\&\f(CW$skip\fR is taken to mean that no install filtering should occur.
.Sp
\&\fBChanges As of Version 1.47\fR
.Sp
As of version 1.47 the following additions were made to the install interface.
Note that the new argument style and use of the \f(CW%result\fR hash is recommended.
.Sp
The \f(CW$always_copy\fR parameter which when true causes files to be updated
regardles as to whether they have changed, if it is defined but false then
copies are made only if the files have changed, if it is undefined then the
value of the environment variable \s-1EU_INSTALL_ALWAYS_COPY\s0 is used as default.
.Sp
The \f(CW%result\fR hash will be populated with the various keys/subhashes reflecting
the install. Currently these keys and their structure are:
.Sp
.Vb 3
\&    install             => { $target    => $source },
\&    install_fail        => { $target    => $source },
\&    install_unchanged   => { $target    => $source },
\&
\&    install_filtered    => { $source    => $pattern },
\&
\&    uninstall           => { $uninstalled => $source },
\&    uninstall_fail      => { $uninstalled => $source },
.Ve
.Sp
where \f(CW$source\fR is the filespec of the file being installed. \f(CW$target\fR is where
it is being installed to, and \f(CW$uninstalled\fR is any shadow file that is in \f(CW@INC\fR
or \f(CW$ENV{PERL5LIB}\fR or other standard locations, and \f(CW$pattern\fR is the pattern that
caused a source file to be skipped. In future more keys will be added, such as to
show created directories, however this requires changes in other modules and must
therefore wait.
.Sp
These keys will be populated before any exceptions are thrown should there be an
error.
.Sp
Note that all updates of the \f(CW%result\fR are additive, the hash will not be
cleared before use, thus allowing status results of many installs to be easily
aggregated.
.Sp
\&\fB\s-1NEW ARGUMENT STYLE\s0\fR
.Sp
If there is only one argument and it is a reference to an array then
the array is assumed to contain a list of key-value pairs specifying
the options. In this case the option \*(L"from_to\*(R" is mandatory. This style
means that you dont have to supply a cryptic list of arguments and can
use a self documenting argument list that is easier to understand.
.Sp
This is now the recommended interface to \fIinstall()\fR.
.Sp
\&\fB\s-1RETURN\s0\fR
.Sp
If all actions were successful install will return a hashref of the results
as described above for the \f(CW$result\fR parameter. If any action is a failure
then install will die, therefore it is recommended to pass in the \f(CW$result\fR
parameter instead of using the return value. If the result parameter is
provided then the returned hashref will be the passed in hashref.
.IP "\fBinstall_default\fR \fI\s-1DISCOURAGED\s0\fR" 4
.IX Item "install_default DISCOURAGED"
.Vb 2
\&    install_default();
\&    install_default($fullext);
.Ve
.Sp
Calls \fIinstall()\fR with arguments to copy a module from blib/ to the
default site installation location.
.Sp
\&\f(CW$fullext\fR is the name of the module converted to a directory
(ie. Foo::Bar would be Foo/Bar).  If \f(CW$fullext\fR is not specified, it
will attempt to read it from \f(CW@ARGV\fR.
.Sp
This is primarily useful for install scripts.
.Sp
\&\fB\s-1NOTE\s0\fR This function is not really useful because of the hard-coded
install location with no way to control site vs core vs vendor
directories and the strange way in which the module name is given.
Consider its use discouraged.
.IP "\fBuninstall\fR" 4
.IX Item "uninstall"
.Vb 2
\&    uninstall($packlist_file);
\&    uninstall($packlist_file, $verbose, $dont_execute);
.Ve
.Sp
Removes the files listed in a \f(CW$packlist_file\fR.
.Sp
If \f(CW$verbose\fR is true, will print out each file removed.  Default is
false.
.Sp
If \f(CW$dont_execute\fR is true it will only print what it was going to do
without actually doing it.  Default is false.
.IP "\fBpm_to_blib\fR" 4
.IX Item "pm_to_blib"
.Vb 2
\&    pm_to_blib(\e%from_to, $autosplit_dir);
\&    pm_to_blib(\e%from_to, $autosplit_dir, $filter_cmd);
.Ve
.Sp
Copies each key of \f(CW%from_to\fR to its corresponding value efficiently.
Filenames with the extension .pm are autosplit into the \f(CW$autosplit_dir\fR.
Any destination directories are created.
.Sp
\&\f(CW$filter_cmd\fR is an optional shell command to run each .pm file through
prior to splitting and copying.  Input is the contents of the module,
output the new module contents.
.Sp
You can have an environment variable \s-1PERL_INSTALL_ROOT\s0 set which will
be prepended as a directory to each installed file (and directory).
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1PERL_INSTALL_ROOT\s0\fR" 4
.IX Item "PERL_INSTALL_ROOT"
Will be prepended to each install path.
.IP "\fB\s-1EU_INSTALL_IGNORE_SKIP\s0\fR" 4
.IX Item "EU_INSTALL_IGNORE_SKIP"
Will prevent the automatic use of \s-1INSTALL.SKIP\s0 as the install skip file.
.IP "\fB\s-1EU_INSTALL_SITE_SKIPFILE\s0\fR" 4
.IX Item "EU_INSTALL_SITE_SKIPFILE"
If there is no \s-1INSTALL.SKIP\s0 file in the make directory then this value
can be used to provide a default.
.IP "\fB\s-1EU_INSTALL_ALWAYS_COPY\s0\fR" 4
.IX Item "EU_INSTALL_ALWAYS_COPY"
If this environment variable is true then normal install processes will
always overwrite older identical files during the install process.
.Sp
Note that the alias \s-1EU_ALWAYS_COPY\s0 will be supported if \s-1EU_INSTALL_ALWAYS_COPY\s0
is not defined until at least the 1.50 release. Please ensure you use the
correct \s-1EU_INSTALL_ALWAYS_COPY.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Original author lost in the mists of time.  Probably the same as Makemaker.
.PP
Production release currently maintained by demerphq \f(CW\*(C`yves at cpan.org\*(C'\fR,
extensive changes by Michael G. Schwern.
.PP
Send bug reports via http://rt.cpan.org/.  Please send your
generated Makefile along with your report.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 298:" 4
.IX Item "Around line 298:"
You forgot a '=back' before '=head2'
.IP "Around line 545:" 4
.IX Item "Around line 545:"
\&'=item' outside of any '=over'
                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Install5.16.3pm                    0100644 0001750 0001750 00000033634 12566207433 025120  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Install 3pm"
.TH ExtUtils::Install 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Install \- install files from here to there
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use ExtUtils::Install;
\&
\&  install({ \*(Aqblib/lib\*(Aq => \*(Aqsome/install/dir\*(Aq } );
\&
\&  uninstall($packlist);
\&
\&  pm_to_blib({ \*(Aqlib/Foo/Bar.pm\*(Aq => \*(Aqblib/lib/Foo/Bar.pm\*(Aq });
.Ve
.SH "VERSION"
.IX Header "VERSION"
1.58
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handles the installing and uninstalling of perl modules, scripts, man
pages, etc...
.PP
Both \fIinstall()\fR and \fIuninstall()\fR are specific to the way
ExtUtils::MakeMaker handles the installation and deinstallation of
perl modules. They are not designed as general purpose tools.
.PP
On some operating systems such as Win32 installation may not be possible
until after a reboot has occured. This can have varying consequences:
removing an old \s-1DLL\s0 does not impact programs using the new one, but if
a new \s-1DLL\s0 cannot be installed properly until reboot then anything
depending on it must wait. The package variable
.PP
.Vb 1
\&  $ExtUtils::Install::MUST_REBOOT
.Ve
.PP
is used to store this status.
.PP
If this variable is true then such an operation has occured and
anything depending on this module cannot proceed until a reboot
has occured.
.PP
If this value is defined but false then such an operation has
ocurred, but should not impact later operations.
.SS "Functions"
.IX Subsection "Functions"
.IP "\fBinstall\fR" 4
.IX Item "install"
.Vb 4
\&    # deprecated forms
\&    install(\e%from_to);
\&    install(\e%from_to, $verbose, $dry_run, $uninstall_shadows,
\&                $skip, $always_copy, \e%result);
\&
\&    # recommended form as of 1.47
\&    install([
\&        from_to => \e%from_to,
\&        verbose => 1,
\&        dry_run => 0,
\&        uninstall_shadows => 1,
\&        skip => undef,
\&        always_copy => 1,
\&        result => \e%install_results,
\&    ]);
.Ve
.Sp
Copies each directory tree of \f(CW%from_to\fR to its corresponding value
preserving timestamps and permissions.
.Sp
There are two keys with a special meaning in the hash: \*(L"read\*(R" and
\&\*(L"write\*(R".  These contain packlist files.  After the copying is done,
\&\fIinstall()\fR will write the list of target files to \f(CW$from_to\fR{write}. If
\&\f(CW$from_to\fR{read} is given the contents of this file will be merged into
the written file. The read and the written file may be identical, but
on \s-1AFS\s0 it is quite likely that people are installing to a different
directory than the one where the files later appear.
.Sp
If \f(CW$verbose\fR is true, will print out each file removed.  Default is
false.  This is \*(L"make install VERBINST=1\*(R". \f(CW$verbose\fR values going
up to 5 show increasingly more diagnostics output.
.Sp
If \f(CW$dry_run\fR is true it will only print what it was going to do
without actually doing it.  Default is false.
.Sp
If \f(CW$uninstall_shadows\fR is true any differing versions throughout \f(CW@INC\fR
will be uninstalled.  This is \*(L"make install UNINST=1\*(R"
.Sp
As of 1.37_02 \fIinstall()\fR supports the use of a list of patterns to filter out
files that shouldn't be installed. If \f(CW$skip\fR is omitted or undefined then
install will try to read the list from \s-1INSTALL\s0.SKIP in the \s-1CWD\s0. This file is
a list of regular expressions and is just like the \s-1MANIFEST\s0.SKIP file used
by ExtUtils::Manifest.
.Sp
A default site \s-1INSTALL\s0.SKIP may be provided by setting then environment
variable \s-1EU_INSTALL_SITE_SKIPFILE\s0, this will only be used when there isn't a
distribution specific \s-1INSTALL\s0.SKIP. If the environment variable
\&\s-1EU_INSTALL_IGNORE_SKIP\s0 is true then no install file filtering will be
performed.
.Sp
If \f(CW$skip\fR is undefined then the skip file will be autodetected and used if it
is found. If \f(CW$skip\fR is a reference to an array then it is assumed the array
contains the list of patterns, if \f(CW$skip\fR is a true non reference it is
assumed to be the filename holding the list of patterns, any other value of
\&\f(CW$skip\fR is taken to mean that no install filtering should occur.
.Sp
\&\fBChanges As of Version 1.47\fR
.Sp
As of version 1.47 the following additions were made to the install interface.
Note that the new argument style and use of the \f(CW%result\fR hash is recommended.
.Sp
The \f(CW$always_copy\fR parameter which when true causes files to be updated
regardles as to whether they have changed, if it is defined but false then
copies are made only if the files have changed, if it is undefined then the
value of the environment variable \s-1EU_INSTALL_ALWAYS_COPY\s0 is used as default.
.Sp
The \f(CW%result\fR hash will be populated with the various keys/subhashes reflecting
the install. Currently these keys and their structure are:
.Sp
.Vb 3
\&    install             => { $target    => $source },
\&    install_fail        => { $target    => $source },
\&    install_unchanged   => { $target    => $source },
\&
\&    install_filtered    => { $source    => $pattern },
\&
\&    uninstall           => { $uninstalled => $source },
\&    uninstall_fail      => { $uninstalled => $source },
.Ve
.Sp
where \f(CW$source\fR is the filespec of the file being installed. \f(CW$target\fR is where
it is being installed to, and \f(CW$uninstalled\fR is any shadow file that is in \f(CW@INC\fR
or \f(CW$ENV{PERL5LIB}\fR or other standard locations, and \f(CW$pattern\fR is the pattern that
caused a source file to be skipped. In future more keys will be added, such as to
show created directories, however this requires changes in other modules and must
therefore wait.
.Sp
These keys will be populated before any exceptions are thrown should there be an
error.
.Sp
Note that all updates of the \f(CW%result\fR are additive, the hash will not be
cleared before use, thus allowing status results of many installs to be easily
aggregated.
.Sp
\&\fB\s-1NEW\s0 \s-1ARGUMENT\s0 \s-1STYLE\s0\fR
.Sp
If there is only one argument and it is a reference to an array then
the array is assumed to contain a list of key-value pairs specifying
the options. In this case the option \*(L"from_to\*(R" is mandatory. This style
means that you dont have to supply a cryptic list of arguments and can
use a self documenting argument list that is easier to understand.
.Sp
This is now the recommended interface to \fIinstall()\fR.
.Sp
\&\fB\s-1RETURN\s0\fR
.Sp
If all actions were successful install will return a hashref of the results
as described above for the \f(CW$result\fR parameter. If any action is a failure
then install will die, therefore it is recommended to pass in the \f(CW$result\fR
parameter instead of using the return value. If the result parameter is
provided then the returned hashref will be the passed in hashref.
.IP "\fBinstall_default\fR \fI\s-1DISCOURAGED\s0\fR" 4
.IX Item "install_default DISCOURAGED"
.Vb 2
\&    install_default();
\&    install_default($fullext);
.Ve
.Sp
Calls \fIinstall()\fR with arguments to copy a module from blib/ to the
default site installation location.
.Sp
\&\f(CW$fullext\fR is the name of the module converted to a directory
(ie. Foo::Bar would be Foo/Bar).  If \f(CW$fullext\fR is not specified, it
will attempt to read it from \f(CW@ARGV\fR.
.Sp
This is primarily useful for install scripts.
.Sp
\&\fB\s-1NOTE\s0\fR This function is not really useful because of the hard-coded
install location with no way to control site vs core vs vendor
directories and the strange way in which the module name is given.
Consider its use discouraged.
.IP "\fBuninstall\fR" 4
.IX Item "uninstall"
.Vb 2
\&    uninstall($packlist_file);
\&    uninstall($packlist_file, $verbose, $dont_execute);
.Ve
.Sp
Removes the files listed in a \f(CW$packlist_file\fR.
.Sp
If \f(CW$verbose\fR is true, will print out each file removed.  Default is
false.
.Sp
If \f(CW$dont_execute\fR is true it will only print what it was going to do
without actually doing it.  Default is false.
.IP "\fBpm_to_blib\fR" 4
.IX Item "pm_to_blib"
.Vb 2
\&    pm_to_blib(\e%from_to, $autosplit_dir);
\&    pm_to_blib(\e%from_to, $autosplit_dir, $filter_cmd);
.Ve
.Sp
Copies each key of \f(CW%from_to\fR to its corresponding value efficiently.
Filenames with the extension .pm are autosplit into the \f(CW$autosplit_dir\fR.
Any destination directories are created.
.Sp
\&\f(CW$filter_cmd\fR is an optional shell command to run each .pm file through
prior to splitting and copying.  Input is the contents of the module,
output the new module contents.
.Sp
You can have an environment variable \s-1PERL_INSTALL_ROOT\s0 set which will
be prepended as a directory to each installed file (and directory).
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1PERL_INSTALL_ROOT\s0\fR" 4
.IX Item "PERL_INSTALL_ROOT"
Will be prepended to each install path.
.IP "\fB\s-1EU_INSTALL_IGNORE_SKIP\s0\fR" 4
.IX Item "EU_INSTALL_IGNORE_SKIP"
Will prevent the automatic use of \s-1INSTALL\s0.SKIP as the install skip file.
.IP "\fB\s-1EU_INSTALL_SITE_SKIPFILE\s0\fR" 4
.IX Item "EU_INSTALL_SITE_SKIPFILE"
If there is no \s-1INSTALL\s0.SKIP file in the make directory then this value
can be used to provide a default.
.IP "\fB\s-1EU_INSTALL_ALWAYS_COPY\s0\fR" 4
.IX Item "EU_INSTALL_ALWAYS_COPY"
If this environment variable is true then normal install processes will
always overwrite older identical files during the install process.
.Sp
Note that the alias \s-1EU_ALWAYS_COPY\s0 will be supported if \s-1EU_INSTALL_ALWAYS_COPY\s0
is not defined until at least the 1.50 release. Please ensure you use the
correct \s-1EU_INSTALL_ALWAYS_COPY\s0.
.SH "AUTHOR"
.IX Header "AUTHOR"
Original author lost in the mists of time.  Probably the same as Makemaker.
.PP
Production release currently maintained by demerphq \f(CW\*(C`yves at cpan.org\*(C'\fR,
extensive changes by Michael G. Schwern.
.PP
Send bug reports via http://rt.cpan.org/.  Please send your
generated Makefile along with your report.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 321:" 4
.IX Item "Around line 321:"
You forgot a '=back' before '=head2'
.IP "Around line 570:" 4
.IX Item "Around line 570:"
\&'=item' outside of any '=over'
                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Install5.18.3pm                    0100644 0001750 0001750 00000034137 12566207454 025124  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Install 3pm"
.TH ExtUtils::Install 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Install \- install files from here to there
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use ExtUtils::Install;
\&
\&  install({ \*(Aqblib/lib\*(Aq => \*(Aqsome/install/dir\*(Aq } );
\&
\&  uninstall($packlist);
\&
\&  pm_to_blib({ \*(Aqlib/Foo/Bar.pm\*(Aq => \*(Aqblib/lib/Foo/Bar.pm\*(Aq });
.Ve
.SH "VERSION"
.IX Header "VERSION"
1.59
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Handles the installing and uninstalling of perl modules, scripts, man
pages, etc...
.PP
Both \fIinstall()\fR and \fIuninstall()\fR are specific to the way
ExtUtils::MakeMaker handles the installation and deinstallation of
perl modules. They are not designed as general purpose tools.
.PP
On some operating systems such as Win32 installation may not be possible
until after a reboot has occured. This can have varying consequences:
removing an old \s-1DLL\s0 does not impact programs using the new one, but if
a new \s-1DLL\s0 cannot be installed properly until reboot then anything
depending on it must wait. The package variable
.PP
.Vb 1
\&  $ExtUtils::Install::MUST_REBOOT
.Ve
.PP
is used to store this status.
.PP
If this variable is true then such an operation has occured and
anything depending on this module cannot proceed until a reboot
has occured.
.PP
If this value is defined but false then such an operation has
ocurred, but should not impact later operations.
.SS "Functions"
.IX Subsection "Functions"
.IP "\fBinstall\fR" 4
.IX Item "install"
.Vb 4
\&    # deprecated forms
\&    install(\e%from_to);
\&    install(\e%from_to, $verbose, $dry_run, $uninstall_shadows,
\&                $skip, $always_copy, \e%result);
\&
\&    # recommended form as of 1.47
\&    install([
\&        from_to => \e%from_to,
\&        verbose => 1,
\&        dry_run => 0,
\&        uninstall_shadows => 1,
\&        skip => undef,
\&        always_copy => 1,
\&        result => \e%install_results,
\&    ]);
.Ve
.Sp
Copies each directory tree of \f(CW%from_to\fR to its corresponding value
preserving timestamps and permissions.
.Sp
There are two keys with a special meaning in the hash: \*(L"read\*(R" and
\&\*(L"write\*(R".  These contain packlist files.  After the copying is done,
\&\fIinstall()\fR will write the list of target files to \f(CW$from_to\fR{write}. If
\&\f(CW$from_to\fR{read} is given the contents of this file will be merged into
the written file. The read and the written file may be identical, but
on \s-1AFS\s0 it is quite likely that people are installing to a different
directory than the one where the files later appear.
.Sp
If \f(CW$verbose\fR is true, will print out each file removed.  Default is
false.  This is \*(L"make install VERBINST=1\*(R". \f(CW$verbose\fR values going
up to 5 show increasingly more diagnostics output.
.Sp
If \f(CW$dry_run\fR is true it will only print what it was going to do
without actually doing it.  Default is false.
.Sp
If \f(CW$uninstall_shadows\fR is true any differing versions throughout \f(CW@INC\fR
will be uninstalled.  This is \*(L"make install UNINST=1\*(R"
.Sp
As of 1.37_02 \fIinstall()\fR supports the use of a list of patterns to filter out
files that shouldn't be installed. If \f(CW$skip\fR is omitted or undefined then
install will try to read the list from \s-1INSTALL.SKIP\s0 in the \s-1CWD.\s0 This file is
a list of regular expressions and is just like the \s-1MANIFEST.SKIP\s0 file used
by ExtUtils::Manifest.
.Sp
A default site \s-1INSTALL.SKIP\s0 may be provided by setting then environment
variable \s-1EU_INSTALL_SITE_SKIPFILE,\s0 this will only be used when there isn't a
distribution specific \s-1INSTALL.SKIP.\s0 If the environment variable
\&\s-1EU_INSTALL_IGNORE_SKIP\s0 is true then no install file filtering will be
performed.
.Sp
If \f(CW$skip\fR is undefined then the skip file will be autodetected and used if it
is found. If \f(CW$skip\fR is a reference to an array then it is assumed the array
contains the list of patterns, if \f(CW$skip\fR is a true non reference it is
assumed to be the filename holding the list of patterns, any other value of
\&\f(CW$skip\fR is taken to mean that no install filtering should occur.
.Sp
\&\fBChanges As of Version 1.47\fR
.Sp
As of version 1.47 the following additions were made to the install interface.
Note that the new argument style and use of the \f(CW%result\fR hash is recommended.
.Sp
The \f(CW$always_copy\fR parameter which when true causes files to be updated
regardles as to whether they have changed, if it is defined but false then
copies are made only if the files have changed, if it is undefined then the
value of the environment variable \s-1EU_INSTALL_ALWAYS_COPY\s0 is used as default.
.Sp
The \f(CW%result\fR hash will be populated with the various keys/subhashes reflecting
the install. Currently these keys and their structure are:
.Sp
.Vb 3
\&    install             => { $target    => $source },
\&    install_fail        => { $target    => $source },
\&    install_unchanged   => { $target    => $source },
\&
\&    install_filtered    => { $source    => $pattern },
\&
\&    uninstall           => { $uninstalled => $source },
\&    uninstall_fail      => { $uninstalled => $source },
.Ve
.Sp
where \f(CW$source\fR is the filespec of the file being installed. \f(CW$target\fR is where
it is being installed to, and \f(CW$uninstalled\fR is any shadow file that is in \f(CW@INC\fR
or \f(CW$ENV{PERL5LIB}\fR or other standard locations, and \f(CW$pattern\fR is the pattern that
caused a source file to be skipped. In future more keys will be added, such as to
show created directories, however this requires changes in other modules and must
therefore wait.
.Sp
These keys will be populated before any exceptions are thrown should there be an
error.
.Sp
Note that all updates of the \f(CW%result\fR are additive, the hash will not be
cleared before use, thus allowing status results of many installs to be easily
aggregated.
.Sp
\&\fB\s-1NEW ARGUMENT STYLE\s0\fR
.Sp
If there is only one argument and it is a reference to an array then
the array is assumed to contain a list of key-value pairs specifying
the options. In this case the option \*(L"from_to\*(R" is mandatory. This style
means that you dont have to supply a cryptic list of arguments and can
use a self documenting argument list that is easier to understand.
.Sp
This is now the recommended interface to \fIinstall()\fR.
.Sp
\&\fB\s-1RETURN\s0\fR
.Sp
If all actions were successful install will return a hashref of the results
as described above for the \f(CW$result\fR parameter. If any action is a failure
then install will die, therefore it is recommended to pass in the \f(CW$result\fR
parameter instead of using the return value. If the result parameter is
provided then the returned hashref will be the passed in hashref.
.IP "\fBinstall_default\fR \fI\s-1DISCOURAGED\s0\fR" 4
.IX Item "install_default DISCOURAGED"
.Vb 2
\&    install_default();
\&    install_default($fullext);
.Ve
.Sp
Calls \fIinstall()\fR with arguments to copy a module from blib/ to the
default site installation location.
.Sp
\&\f(CW$fullext\fR is the name of the module converted to a directory
(ie. Foo::Bar would be Foo/Bar).  If \f(CW$fullext\fR is not specified, it
will attempt to read it from \f(CW@ARGV\fR.
.Sp
This is primarily useful for install scripts.
.Sp
\&\fB\s-1NOTE\s0\fR This function is not really useful because of the hard-coded
install location with no way to control site vs core vs vendor
directories and the strange way in which the module name is given.
Consider its use discouraged.
.IP "\fBuninstall\fR" 4
.IX Item "uninstall"
.Vb 2
\&    uninstall($packlist_file);
\&    uninstall($packlist_file, $verbose, $dont_execute);
.Ve
.Sp
Removes the files listed in a \f(CW$packlist_file\fR.
.Sp
If \f(CW$verbose\fR is true, will print out each file removed.  Default is
false.
.Sp
If \f(CW$dont_execute\fR is true it will only print what it was going to do
without actually doing it.  Default is false.
.IP "\fBpm_to_blib\fR" 4
.IX Item "pm_to_blib"
.Vb 2
\&    pm_to_blib(\e%from_to, $autosplit_dir);
\&    pm_to_blib(\e%from_to, $autosplit_dir, $filter_cmd);
.Ve
.Sp
Copies each key of \f(CW%from_to\fR to its corresponding value efficiently.
Filenames with the extension .pm are autosplit into the \f(CW$autosplit_dir\fR.
Any destination directories are created.
.Sp
\&\f(CW$filter_cmd\fR is an optional shell command to run each .pm file through
prior to splitting and copying.  Input is the contents of the module,
output the new module contents.
.Sp
You can have an environment variable \s-1PERL_INSTALL_ROOT\s0 set which will
be prepended as a directory to each installed file (and directory).
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
.IP "\fB\s-1PERL_INSTALL_ROOT\s0\fR" 4
.IX Item "PERL_INSTALL_ROOT"
Will be prepended to each install path.
.IP "\fB\s-1EU_INSTALL_IGNORE_SKIP\s0\fR" 4
.IX Item "EU_INSTALL_IGNORE_SKIP"
Will prevent the automatic use of \s-1INSTALL.SKIP\s0 as the install skip file.
.IP "\fB\s-1EU_INSTALL_SITE_SKIPFILE\s0\fR" 4
.IX Item "EU_INSTALL_SITE_SKIPFILE"
If there is no \s-1INSTALL.SKIP\s0 file in the make directory then this value
can be used to provide a default.
.IP "\fB\s-1EU_INSTALL_ALWAYS_COPY\s0\fR" 4
.IX Item "EU_INSTALL_ALWAYS_COPY"
If this environment variable is true then normal install processes will
always overwrite older identical files during the install process.
.Sp
Note that the alias \s-1EU_ALWAYS_COPY\s0 will be supported if \s-1EU_INSTALL_ALWAYS_COPY\s0
is not defined until at least the 1.50 release. Please ensure you use the
correct \s-1EU_INSTALL_ALWAYS_COPY.\s0
.SH "AUTHOR"
.IX Header "AUTHOR"
Original author lost in the mists of time.  Probably the same as Makemaker.
.PP
Production release currently maintained by demerphq \f(CW\*(C`yves at cpan.org\*(C'\fR,
extensive changes by Michael G. Schwern.
.PP
Send bug reports via http://rt.cpan.org/.  Please send your
generated Makefile along with your report.
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.
.PP
See <http://www.perl.com/perl/misc/Artistic.html>
.SH "POD ERRORS"
.IX Header "POD ERRORS"
Hey! \fBThe above document had some coding errors, which are explained below:\fR
.IP "Around line 298:" 4
.IX Item "Around line 298:"
You forgot a '=back' before '=head2'
.IP "Around line 545:" 4
.IX Item "Around line 545:"
\&'=item' outside of any '=over'
                                                                                                                                                                                                                                                                                                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::InstallPaths.3pm                   0100644 0001750 0001750 00000033575 12566242352 025611  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::InstallPaths 3"
.TH ExtUtils::InstallPaths 3 "2013-10-29" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::InstallPaths \- Build.PL install path logic made easy
.SH "VERSION"
.IX Header "VERSION"
version 0.010
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& use ExtUtils::InstallPaths;
\& use ExtUtils::Install \*(Aqinstall\*(Aq;
\& GetOptions(\emy %opt, \*(Aqinstall_base=s\*(Aq, \*(Aqinstall_path=s%\*(Aq, \*(Aqinstalldirs=s\*(Aq, \*(Aqdestdir=s\*(Aq, \*(Aqprefix=s\*(Aq, \*(Aquninst:1\*(Aq, \*(Aqverbose:1\*(Aq);
\& my $paths = ExtUtils::InstallPaths\->new(%opt, dist_name => $dist_name);
\& install($paths\->install_map, $opt{verbose}, 0, $opt{uninst});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module tries to make install path resolution as easy as possible.
.PP
When you want to install a module, it needs to figure out where to install things. The nutshell version of how this works is that default installation locations are determined from ExtUtils::Config, and they may be individually overridden by using the \f(CW\*(C`install_path\*(C'\fR attribute. An \f(CW\*(C`install_base\*(C'\fR attribute lets you specify an alternative installation root like \fI/home/foo\fR and \f(CW\*(C`prefix\*(C'\fR does something similar in a rather different (and more complicated) way. \f(CW\*(C`destdir\*(C'\fR lets you specify a temporary installation directory like \fI/tmp/install\fR in case you want to create bundled-up installable packages.
.PP
The following types are supported by default.
.IP "\(bu" 4
lib
.Sp
Usually pure-Perl module files ending in \fI.pm\fR or \fI.pod\fR.
.IP "\(bu" 4
arch
.Sp
\&\*(L"Architecture-dependent\*(R" module files, usually produced by compiling \s-1XS, \s0Inline, or similar code.
.IP "\(bu" 4
script
.Sp
Programs written in pure Perl.  In order to improve reuse, you may want to make these as small as possible \- put the code into modules whenever possible.
.IP "\(bu" 4
bin
.Sp
\&\*(L"Architecture-dependent\*(R" executable programs, i.e. compiled C code or something.  Pretty rare to see this in a perl distribution, but it happens.
.IP "\(bu" 4
bindoc
.Sp
Documentation for the stuff in \f(CW\*(C`script\*(C'\fR and \f(CW\*(C`bin\*(C'\fR.  Usually generated from the \s-1POD\s0 in those files.  Under Unix, these are manual pages belonging to the 'man1' category. Unless explicitly set, this is only available on platforms supporting manpages.
.IP "\(bu" 4
libdoc
.Sp
Documentation for the stuff in \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`arch\*(C'\fR.  This is usually generated from the \s-1POD\s0 in \fI.pm\fR and \fI.pod\fR files.  Under Unix, these are manual pages belonging to the 'man3' category. Unless explicitly set, this is only available on platforms supporting manpages.
.IP "\(bu" 4
binhtml
.Sp
This is the same as \f(CW\*(C`bindoc\*(C'\fR above, but applies to \s-1HTML\s0 documents. Unless explicitly set, this is only available when perl was configured to do so.
.IP "\(bu" 4
libhtml
.Sp
This is the same as \f(CW\*(C`libdoc\*(C'\fR above, but applies to \s-1HTML\s0 documents. Unless explicitly set, this is only available when perl was configured to do so.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "installdirs"
.IX Subsection "installdirs"
The default destinations for these installable things come from entries in your system's configuration. You can select from three different sets of default locations by setting the \f(CW\*(C`installdirs\*(C'\fR parameter as follows:
.PP
.Vb 2
\&                          \*(Aqinstalldirs\*(Aq set to:
\&                   core          site                vendor
\&
\&              uses the following defaults from ExtUtils::Config:
\&
\&  lib     => installprivlib  installsitelib      installvendorlib
\&  arch    => installarchlib  installsitearch     installvendorarch
\&  script  => installscript   installsitescript   installvendorscript
\&  bin     => installbin      installsitebin      installvendorbin
\&  bindoc  => installman1dir  installsiteman1dir  installvendorman1dir
\&  libdoc  => installman3dir  installsiteman3dir  installvendorman3dir
\&  binhtml => installhtml1dir installsitehtml1dir installvendorhtml1dir [*]
\&  libhtml => installhtml3dir installsitehtml3dir installvendorhtml3dir [*]
\&
\&  * Under some OS (eg. MSWin32) the destination for HTML documents is determined by the C<Config.pm> entry C<installhtmldir>.
.Ve
.PP
The default value of \f(CW\*(C`installdirs\*(C'\fR is \*(L"site\*(R".
.SS "install_base"
.IX Subsection "install_base"
You can also set the whole bunch of installation paths by supplying the \f(CW\*(C`install_base\*(C'\fR parameter to point to a directory on your system.  For instance, if you set \f(CW\*(C`install_base\*(C'\fR to \*(L"/home/ken\*(R" on a Linux system, you'll install as follows:
.PP
.Vb 8
\&  lib     => /home/ken/lib/perl5
\&  arch    => /home/ken/lib/perl5/i386\-linux
\&  script  => /home/ken/bin
\&  bin     => /home/ken/bin
\&  bindoc  => /home/ken/man/man1
\&  libdoc  => /home/ken/man/man3
\&  binhtml => /home/ken/html
\&  libhtml => /home/ken/html
.Ve
.SS "prefix"
.IX Subsection "prefix"
This sets a prefix, identical to ExtUtils::MakeMaker's \s-1PREFIX\s0 option. This does something similar to \f(CW\*(C`install_base\*(C'\fR in a much more complicated way.
.SS "\fIconfig()\fP"
.IX Subsection "config()"
The ExtUtils::Config object used for this object.
.SS "verbose"
.IX Subsection "verbose"
The verbosity of ExtUtils::InstallPaths. It defaults to 0
.SS "blib"
.IX Subsection "blib"
The location of the blib directory, it defaults to 'blib'.
.SS "create_packlist"
.IX Subsection "create_packlist"
Together with \f(CW\*(C`module_name\*(C'\fR this controls whether a packlist will be added; it defaults to 1.
.SS "dist_name"
.IX Subsection "dist_name"
The name of the current module.
.SS "module_name"
.IX Subsection "module_name"
The name of the main module of the package. This is required for packlist creation, but in the future it may be replaced by dist_name. It defaults to \f(CW\*(C`dist_name =~ s/\-/::/gr\*(C'\fR if dist_name is set.
.SS "destdir"
.IX Subsection "destdir"
If you want to install everything into a temporary directory first (for instance, if you want to create a directory tree that a package manager like \f(CW\*(C`rpm\*(C'\fR or \f(CW\*(C`dpkg\*(C'\fR could create a package from), you can use the \f(CW\*(C`destdir\*(C'\fR parameter. E.g. Setting \f(CW\*(C`destdir\*(C'\fR to \f(CW"/tmp/foo"\fR will effectively install to \*(L"/tmp/foo/$sitelib\*(R", \*(L"/tmp/foo/$sitearch\*(R", and the like, except that it will use \f(CW\*(C`File::Spec\*(C'\fR to make the pathnames work correctly on whatever platform you're installing on.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Create a new ExtUtils::InstallPaths object. \fBAll attributes are valid arguments\fR to the constructor, as well as this:
.IP "\(bu" 4
install_path
.Sp
This must be a hashref with the type as keys and the destination as values.
.IP "\(bu" 4
install_base_relpaths
.Sp
This must be a hashref with types as keys and a path relative to the install_base as value.
.IP "\(bu" 4
prefix_relpaths
.Sp
This must be a hashref any of these three keys: core, vendor, site. Each of the values mush be a hashref with types as keys and a path relative to the prefix as value. You probably want to make these three hashrefs identical.
.IP "\(bu" 4
original_prefix
.Sp
This must be a hashref with the legal installdirs values as keys and the prefix directories as values.
.IP "\(bu" 4
install_sets
.Sp
This mush be a hashref with the legal installdirs are keys, and the values being hashrefs with types as keys and locations as values.
.SS "\fIinstall_map()\fP"
.IX Subsection "install_map()"
Return a map suitable for use with ExtUtils::Install. \fBIn most cases, this is the only method you'll need\fR.
.SS "install_destination($type)"
.IX Subsection "install_destination($type)"
Returns the destination of a certain type.
.SS "\fIinstall_types()\fP"
.IX Subsection "install_types()"
Return a list of all supported install types in the current configuration.
.SS "is_default_installable($type)"
.IX Subsection "is_default_installable($type)"
Given a file type, will return true if the file type would normally be installed when neither install-base nor prefix has been set.  I.e. it will be true only if the path is set from the configuration object or set explicitly by the user via install_path.
.SS "install_path($type)"
.IX Subsection "install_path($type)"
Gets the install path for a certain type.
.ie n .SS "install_sets($installdirs, $type)"
.el .SS "install_sets($installdirs, \f(CW$type\fP)"
.IX Subsection "install_sets($installdirs, $type)"
Get the path for a certain \f(CW$type\fR with a certain \f(CW$installdirs\fR.
.ie n .SS "install_base_relpaths($type, $relpath)"
.el .SS "install_base_relpaths($type, \f(CW$relpath\fP)"
.IX Subsection "install_base_relpaths($type, $relpath)"
Get the relative paths for use with install_base for a certain type.
.ie n .SS "prefix_relative($installdirs, $type)"
.el .SS "prefix_relative($installdirs, \f(CW$type\fP)"
.IX Subsection "prefix_relative($installdirs, $type)"
Gets the path of a certain \f(CW$type\fR and \f(CW$installdirs\fR relative to the prefix.
.ie n .SS "prefix_relpaths($install_dirs, $type)"
.el .SS "prefix_relpaths($install_dirs, \f(CW$type\fP)"
.IX Subsection "prefix_relpaths($install_dirs, $type)"
Get the default relative path to use in case the config install paths cannot be prefixified. You do not want to use this to get any relative path, but may require it to set it for custom types.
.SS "original_prefix($installdirs)"
.IX Subsection "original_prefix($installdirs)"
Get the original prefix for a certain type of \f(CW$installdirs\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Build.PL spec <http://github.com/dagolden/cpan-api-buildpl/blob/master/lib/CPAN/API/BuildPL.pm>
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::InstallPaths5.18.3pm               0100644 0001750 0001750 00000033575 12566242352 026125  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::InstallPaths 3"
.TH ExtUtils::InstallPaths 3 "2013-10-29" "perl v5.18.2" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::InstallPaths \- Build.PL install path logic made easy
.SH "VERSION"
.IX Header "VERSION"
version 0.010
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\& use ExtUtils::InstallPaths;
\& use ExtUtils::Install \*(Aqinstall\*(Aq;
\& GetOptions(\emy %opt, \*(Aqinstall_base=s\*(Aq, \*(Aqinstall_path=s%\*(Aq, \*(Aqinstalldirs=s\*(Aq, \*(Aqdestdir=s\*(Aq, \*(Aqprefix=s\*(Aq, \*(Aquninst:1\*(Aq, \*(Aqverbose:1\*(Aq);
\& my $paths = ExtUtils::InstallPaths\->new(%opt, dist_name => $dist_name);
\& install($paths\->install_map, $opt{verbose}, 0, $opt{uninst});
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module tries to make install path resolution as easy as possible.
.PP
When you want to install a module, it needs to figure out where to install things. The nutshell version of how this works is that default installation locations are determined from ExtUtils::Config, and they may be individually overridden by using the \f(CW\*(C`install_path\*(C'\fR attribute. An \f(CW\*(C`install_base\*(C'\fR attribute lets you specify an alternative installation root like \fI/home/foo\fR and \f(CW\*(C`prefix\*(C'\fR does something similar in a rather different (and more complicated) way. \f(CW\*(C`destdir\*(C'\fR lets you specify a temporary installation directory like \fI/tmp/install\fR in case you want to create bundled-up installable packages.
.PP
The following types are supported by default.
.IP "\(bu" 4
lib
.Sp
Usually pure-Perl module files ending in \fI.pm\fR or \fI.pod\fR.
.IP "\(bu" 4
arch
.Sp
\&\*(L"Architecture-dependent\*(R" module files, usually produced by compiling \s-1XS, \s0Inline, or similar code.
.IP "\(bu" 4
script
.Sp
Programs written in pure Perl.  In order to improve reuse, you may want to make these as small as possible \- put the code into modules whenever possible.
.IP "\(bu" 4
bin
.Sp
\&\*(L"Architecture-dependent\*(R" executable programs, i.e. compiled C code or something.  Pretty rare to see this in a perl distribution, but it happens.
.IP "\(bu" 4
bindoc
.Sp
Documentation for the stuff in \f(CW\*(C`script\*(C'\fR and \f(CW\*(C`bin\*(C'\fR.  Usually generated from the \s-1POD\s0 in those files.  Under Unix, these are manual pages belonging to the 'man1' category. Unless explicitly set, this is only available on platforms supporting manpages.
.IP "\(bu" 4
libdoc
.Sp
Documentation for the stuff in \f(CW\*(C`lib\*(C'\fR and \f(CW\*(C`arch\*(C'\fR.  This is usually generated from the \s-1POD\s0 in \fI.pm\fR and \fI.pod\fR files.  Under Unix, these are manual pages belonging to the 'man3' category. Unless explicitly set, this is only available on platforms supporting manpages.
.IP "\(bu" 4
binhtml
.Sp
This is the same as \f(CW\*(C`bindoc\*(C'\fR above, but applies to \s-1HTML\s0 documents. Unless explicitly set, this is only available when perl was configured to do so.
.IP "\(bu" 4
libhtml
.Sp
This is the same as \f(CW\*(C`libdoc\*(C'\fR above, but applies to \s-1HTML\s0 documents. Unless explicitly set, this is only available when perl was configured to do so.
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.SS "installdirs"
.IX Subsection "installdirs"
The default destinations for these installable things come from entries in your system's configuration. You can select from three different sets of default locations by setting the \f(CW\*(C`installdirs\*(C'\fR parameter as follows:
.PP
.Vb 2
\&                          \*(Aqinstalldirs\*(Aq set to:
\&                   core          site                vendor
\&
\&              uses the following defaults from ExtUtils::Config:
\&
\&  lib     => installprivlib  installsitelib      installvendorlib
\&  arch    => installarchlib  installsitearch     installvendorarch
\&  script  => installscript   installsitescript   installvendorscript
\&  bin     => installbin      installsitebin      installvendorbin
\&  bindoc  => installman1dir  installsiteman1dir  installvendorman1dir
\&  libdoc  => installman3dir  installsiteman3dir  installvendorman3dir
\&  binhtml => installhtml1dir installsitehtml1dir installvendorhtml1dir [*]
\&  libhtml => installhtml3dir installsitehtml3dir installvendorhtml3dir [*]
\&
\&  * Under some OS (eg. MSWin32) the destination for HTML documents is determined by the C<Config.pm> entry C<installhtmldir>.
.Ve
.PP
The default value of \f(CW\*(C`installdirs\*(C'\fR is \*(L"site\*(R".
.SS "install_base"
.IX Subsection "install_base"
You can also set the whole bunch of installation paths by supplying the \f(CW\*(C`install_base\*(C'\fR parameter to point to a directory on your system.  For instance, if you set \f(CW\*(C`install_base\*(C'\fR to \*(L"/home/ken\*(R" on a Linux system, you'll install as follows:
.PP
.Vb 8
\&  lib     => /home/ken/lib/perl5
\&  arch    => /home/ken/lib/perl5/i386\-linux
\&  script  => /home/ken/bin
\&  bin     => /home/ken/bin
\&  bindoc  => /home/ken/man/man1
\&  libdoc  => /home/ken/man/man3
\&  binhtml => /home/ken/html
\&  libhtml => /home/ken/html
.Ve
.SS "prefix"
.IX Subsection "prefix"
This sets a prefix, identical to ExtUtils::MakeMaker's \s-1PREFIX\s0 option. This does something similar to \f(CW\*(C`install_base\*(C'\fR in a much more complicated way.
.SS "\fIconfig()\fP"
.IX Subsection "config()"
The ExtUtils::Config object used for this object.
.SS "verbose"
.IX Subsection "verbose"
The verbosity of ExtUtils::InstallPaths. It defaults to 0
.SS "blib"
.IX Subsection "blib"
The location of the blib directory, it defaults to 'blib'.
.SS "create_packlist"
.IX Subsection "create_packlist"
Together with \f(CW\*(C`module_name\*(C'\fR this controls whether a packlist will be added; it defaults to 1.
.SS "dist_name"
.IX Subsection "dist_name"
The name of the current module.
.SS "module_name"
.IX Subsection "module_name"
The name of the main module of the package. This is required for packlist creation, but in the future it may be replaced by dist_name. It defaults to \f(CW\*(C`dist_name =~ s/\-/::/gr\*(C'\fR if dist_name is set.
.SS "destdir"
.IX Subsection "destdir"
If you want to install everything into a temporary directory first (for instance, if you want to create a directory tree that a package manager like \f(CW\*(C`rpm\*(C'\fR or \f(CW\*(C`dpkg\*(C'\fR could create a package from), you can use the \f(CW\*(C`destdir\*(C'\fR parameter. E.g. Setting \f(CW\*(C`destdir\*(C'\fR to \f(CW"/tmp/foo"\fR will effectively install to \*(L"/tmp/foo/$sitelib\*(R", \*(L"/tmp/foo/$sitearch\*(R", and the like, except that it will use \f(CW\*(C`File::Spec\*(C'\fR to make the pathnames work correctly on whatever platform you're installing on.
.SH "METHODS"
.IX Header "METHODS"
.SS "new"
.IX Subsection "new"
Create a new ExtUtils::InstallPaths object. \fBAll attributes are valid arguments\fR to the constructor, as well as this:
.IP "\(bu" 4
install_path
.Sp
This must be a hashref with the type as keys and the destination as values.
.IP "\(bu" 4
install_base_relpaths
.Sp
This must be a hashref with types as keys and a path relative to the install_base as value.
.IP "\(bu" 4
prefix_relpaths
.Sp
This must be a hashref any of these three keys: core, vendor, site. Each of the values mush be a hashref with types as keys and a path relative to the prefix as value. You probably want to make these three hashrefs identical.
.IP "\(bu" 4
original_prefix
.Sp
This must be a hashref with the legal installdirs values as keys and the prefix directories as values.
.IP "\(bu" 4
install_sets
.Sp
This mush be a hashref with the legal installdirs are keys, and the values being hashrefs with types as keys and locations as values.
.SS "\fIinstall_map()\fP"
.IX Subsection "install_map()"
Return a map suitable for use with ExtUtils::Install. \fBIn most cases, this is the only method you'll need\fR.
.SS "install_destination($type)"
.IX Subsection "install_destination($type)"
Returns the destination of a certain type.
.SS "\fIinstall_types()\fP"
.IX Subsection "install_types()"
Return a list of all supported install types in the current configuration.
.SS "is_default_installable($type)"
.IX Subsection "is_default_installable($type)"
Given a file type, will return true if the file type would normally be installed when neither install-base nor prefix has been set.  I.e. it will be true only if the path is set from the configuration object or set explicitly by the user via install_path.
.SS "install_path($type)"
.IX Subsection "install_path($type)"
Gets the install path for a certain type.
.ie n .SS "install_sets($installdirs, $type)"
.el .SS "install_sets($installdirs, \f(CW$type\fP)"
.IX Subsection "install_sets($installdirs, $type)"
Get the path for a certain \f(CW$type\fR with a certain \f(CW$installdirs\fR.
.ie n .SS "install_base_relpaths($type, $relpath)"
.el .SS "install_base_relpaths($type, \f(CW$relpath\fP)"
.IX Subsection "install_base_relpaths($type, $relpath)"
Get the relative paths for use with install_base for a certain type.
.ie n .SS "prefix_relative($installdirs, $type)"
.el .SS "prefix_relative($installdirs, \f(CW$type\fP)"
.IX Subsection "prefix_relative($installdirs, $type)"
Gets the path of a certain \f(CW$type\fR and \f(CW$installdirs\fR relative to the prefix.
.ie n .SS "prefix_relpaths($install_dirs, $type)"
.el .SS "prefix_relpaths($install_dirs, \f(CW$type\fP)"
.IX Subsection "prefix_relpaths($install_dirs, $type)"
Get the default relative path to use in case the config install paths cannot be prefixified. You do not want to use this to get any relative path, but may require it to set it for custom types.
.SS "original_prefix($installdirs)"
.IX Subsection "original_prefix($installdirs)"
Get the original prefix for a certain type of \f(CW$installdirs\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.IP "\(bu" 4
Build.PL spec <http://github.com/dagolden/cpan-api-buildpl/blob/master/lib/CPAN/API/BuildPL.pm>
.SH "AUTHORS"
.IX Header "AUTHORS"
.IP "\(bu" 4
Ken Williams <kwilliams@cpan.org>
.IP "\(bu" 4
Leon Timmermans <leont@cpan.org>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2011 by Ken Williams, Leon Timmermans.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Installed.3pm                      0100644 0001750 0001750 00000024232 12566207454 025114  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Installed 3pm"
.TH ExtUtils::Installed 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Installed \- Inventory management of installed modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&   use ExtUtils::Installed;
\&   my ($inst) = ExtUtils::Installed\->new( skip_cwd => 1 );
\&   my (@modules) = $inst\->modules();
\&   my (@missing) = $inst\->validate("DBI");
\&   my $all_files = $inst\->files("DBI");
\&   my $files_below_usr_local = $inst\->files("DBI", "all", "/usr/local");
\&   my $all_dirs = $inst\->directories("DBI");
\&   my $dirs_below_usr_local = $inst\->directory_tree("DBI", "prog");
\&   my $packlist = $inst\->packlist("DBI");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Installed  provides a standard way to find out what core and module
files have been installed.  It uses the information stored in .packlist files
created during installation to provide this information.  In addition it
provides facilities to classify the installed files and to extract directory
information from the .packlist files.
.SH "USAGE"
.IX Header "USAGE"
The \fInew()\fR function searches for all the installed .packlists on the system, and
stores their contents. The .packlists can be queried with the functions
described below. Where it searches by default is determined by the settings found
in \f(CW%Config::Config\fR, and what the value is of the \s-1PERL5LIB\s0 environment variable.
.SH "METHODS"
.IX Header "METHODS"
Unless specified otherwise all method can be called as class methods, or as object
methods. If called as class methods then the \*(L"default\*(R" object will be used, and if
necessary created using the current processes \f(CW%Config\fR and \f(CW@INC\fR.  See the
\&'default' option to \fInew()\fR for details.
.IP "\fInew()\fR" 4
.IX Item "new()"
This takes optional named parameters. Without parameters, this
searches for all the installed .packlists on the system using
information from \f(CW%Config::Config\fR and the default module search
paths \f(CW@INC\fR. The packlists are read using the
ExtUtils::Packlist module.
.Sp
If the named parameter \f(CW\*(C`skip_cwd\*(C'\fR is true, the current directory \f(CW\*(C`.\*(C'\fR will
be stripped from \f(CW@INC\fR before searching for .packlists.  This keeps
ExtUtils::Installed from finding modules installed in other perls that
happen to be located below the current directory.
.Sp
If the named parameter \f(CW\*(C`config_override\*(C'\fR is specified,
it should be a reference to a hash which contains all information
usually found in \f(CW%Config::Config\fR. For example, you can obtain
the configuration information for a separate perl installation and
pass that in.
.Sp
.Vb 3
\&    my $yoda_cfg  = get_fake_config(\*(Aqyoda\*(Aq);
\&    my $yoda_inst =
\&               ExtUtils::Installed\->new(config_override=>$yoda_cfg);
.Ve
.Sp
Similarly, the parameter \f(CW\*(C`inc_override\*(C'\fR may be a reference to an
array which is used in place of the default module search paths
from \f(CW@INC\fR.
.Sp
.Vb 3
\&    use Config;
\&    my @dirs = split(/\eQ$Config{path_sep}\eE/, $ENV{PERL5LIB});
\&    my $p5libs = ExtUtils::Installed\->new(inc_override=>\e@dirs);
.Ve
.Sp
\&\fBNote\fR: You probably do not want to use these options alone, almost always
you will want to set both together.
.Sp
The parameter \f(CW\*(C`extra_libs\*(C'\fR can be used to specify \fBadditional\fR paths to
search for installed modules. For instance
.Sp
.Vb 2
\&    my $installed =
\&             ExtUtils::Installed\->new(extra_libs=>["/my/lib/path"]);
.Ve
.Sp
This should only be necessary if \fI/my/lib/path\fR is not in \s-1PERL5LIB.\s0
.Sp
Finally there is the 'default', and the related 'default_get' and 'default_set'
options. These options control the \*(L"default\*(R" object which is provided by the
class interface to the methods. Setting \f(CW\*(C`default_get\*(C'\fR to true tells the constructor
to return the default object if it is defined. Setting \f(CW\*(C`default_set\*(C'\fR to true tells
the constructor to make the default object the constructed object. Setting the
\&\f(CW\*(C`default\*(C'\fR option is like setting both to true. This is used primarily internally
and probably isn't interesting to any real user.
.IP "\fImodules()\fR" 4
.IX Item "modules()"
This returns a list of the names of all the installed modules.  The perl 'core'
is given the special name 'Perl'.
.IP "\fIfiles()\fR" 4
.IX Item "files()"
This takes one mandatory parameter, the name of a module.  It returns a list of
all the filenames from the package.  To obtain a list of core perl files, use
the module name 'Perl'.  Additional parameters are allowed.  The first is one
of the strings \*(L"prog\*(R", \*(L"doc\*(R" or \*(L"all\*(R", to select either just program files,
just manual files or all files.  The remaining parameters are a list of
directories. The filenames returned will be restricted to those under the
specified directories.
.IP "\fIdirectories()\fR" 4
.IX Item "directories()"
This takes one mandatory parameter, the name of a module.  It returns a list of
all the directories from the package.  Additional parameters are allowed.  The
first is one of the strings \*(L"prog\*(R", \*(L"doc\*(R" or \*(L"all\*(R", to select either just
program directories, just manual directories or all directories.  The remaining
parameters are a list of directories. The directories returned will be
restricted to those under the specified directories.  This method returns only
the leaf directories that contain files from the specified module.
.IP "\fIdirectory_tree()\fR" 4
.IX Item "directory_tree()"
This is identical in operation to \fIdirectories()\fR, except that it includes all the
intermediate directories back up to the specified directories.
.IP "\fIvalidate()\fR" 4
.IX Item "validate()"
This takes one mandatory parameter, the name of a module.  It checks that all
the files listed in the modules .packlist actually exist, and returns a list of
any missing files.  If an optional second argument which evaluates to true is
given any missing files will be removed from the .packlist
.IP "\fIpacklist()\fR" 4
.IX Item "packlist()"
This returns the ExtUtils::Packlist object for the specified module.
.IP "\fIversion()\fR" 4
.IX Item "version()"
This returns the version number for the specified module.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
See the example in ExtUtils::Packlist.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alan Burlison <Alan.Burlison@uk.sun.com>
                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Installed5.16.3pm                  0100644 0001750 0001750 00000023725 12566207433 025431  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Installed 3pm"
.TH ExtUtils::Installed 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Installed \- Inventory management of installed modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&   use ExtUtils::Installed;
\&   my ($inst) = ExtUtils::Installed\->new( skip_cwd => 1 );
\&   my (@modules) = $inst\->modules();
\&   my (@missing) = $inst\->validate("DBI");
\&   my $all_files = $inst\->files("DBI");
\&   my $files_below_usr_local = $inst\->files("DBI", "all", "/usr/local");
\&   my $all_dirs = $inst\->directories("DBI");
\&   my $dirs_below_usr_local = $inst\->directory_tree("DBI", "prog");
\&   my $packlist = $inst\->packlist("DBI");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Installed  provides a standard way to find out what core and module
files have been installed.  It uses the information stored in .packlist files
created during installation to provide this information.  In addition it
provides facilities to classify the installed files and to extract directory
information from the .packlist files.
.SH "USAGE"
.IX Header "USAGE"
The \fInew()\fR function searches for all the installed .packlists on the system, and
stores their contents. The .packlists can be queried with the functions
described below. Where it searches by default is determined by the settings found
in \f(CW%Config::Config\fR, and what the value is of the \s-1PERL5LIB\s0 environment variable.
.SH "METHODS"
.IX Header "METHODS"
Unless specified otherwise all method can be called as class methods, or as object
methods. If called as class methods then the \*(L"default\*(R" object will be used, and if
necessary created using the current processes \f(CW%Config\fR and \f(CW@INC\fR.  See the
\&'default' option to \fInew()\fR for details.
.IP "\fInew()\fR" 4
.IX Item "new()"
This takes optional named parameters. Without parameters, this
searches for all the installed .packlists on the system using
information from \f(CW%Config::Config\fR and the default module search
paths \f(CW@INC\fR. The packlists are read using the
ExtUtils::Packlist module.
.Sp
If the named parameter \f(CW\*(C`skip_cwd\*(C'\fR is true, the current directory \f(CW\*(C`.\*(C'\fR will
be stripped from \f(CW@INC\fR before searching for .packlists.  This keeps
ExtUtils::Installed from finding modules installed in other perls that
happen to be located below the current directory.
.Sp
If the named parameter \f(CW\*(C`config_override\*(C'\fR is specified,
it should be a reference to a hash which contains all information
usually found in \f(CW%Config::Config\fR. For example, you can obtain
the configuration information for a separate perl installation and
pass that in.
.Sp
.Vb 3
\&    my $yoda_cfg  = get_fake_config(\*(Aqyoda\*(Aq);
\&    my $yoda_inst =
\&               ExtUtils::Installed\->new(config_override=>$yoda_cfg);
.Ve
.Sp
Similarly, the parameter \f(CW\*(C`inc_override\*(C'\fR may be a reference to an
array which is used in place of the default module search paths
from \f(CW@INC\fR.
.Sp
.Vb 3
\&    use Config;
\&    my @dirs = split(/\eQ$Config{path_sep}\eE/, $ENV{PERL5LIB});
\&    my $p5libs = ExtUtils::Installed\->new(inc_override=>\e@dirs);
.Ve
.Sp
\&\fBNote\fR: You probably do not want to use these options alone, almost always
you will want to set both together.
.Sp
The parameter \f(CW\*(C`extra_libs\*(C'\fR can be used to specify \fBadditional\fR paths to
search for installed modules. For instance
.Sp
.Vb 2
\&    my $installed =
\&             ExtUtils::Installed\->new(extra_libs=>["/my/lib/path"]);
.Ve
.Sp
This should only be necessary if \f(CW\*(C`/my/lib/path\*(C'\fR is not in \s-1PERL5LIB\s0.
.Sp
Finally there is the 'default', and the related 'default_get' and 'default_set'
options. These options control the \*(L"default\*(R" object which is provided by the
class interface to the methods. Setting \f(CW\*(C`default_get\*(C'\fR to true tells the constructor
to return the default object if it is defined. Setting \f(CW\*(C`default_set\*(C'\fR to true tells
the constructor to make the default object the constructed object. Setting the
\&\f(CW\*(C`default\*(C'\fR option is like setting both to true. This is used primarily internally
and probably isn't interesting to any real user.
.IP "\fImodules()\fR" 4
.IX Item "modules()"
This returns a list of the names of all the installed modules.  The perl 'core'
is given the special name 'Perl'.
.IP "\fIfiles()\fR" 4
.IX Item "files()"
This takes one mandatory parameter, the name of a module.  It returns a list of
all the filenames from the package.  To obtain a list of core perl files, use
the module name 'Perl'.  Additional parameters are allowed.  The first is one
of the strings \*(L"prog\*(R", \*(L"doc\*(R" or \*(L"all\*(R", to select either just program files,
just manual files or all files.  The remaining parameters are a list of
directories. The filenames returned will be restricted to those under the
specified directories.
.IP "\fIdirectories()\fR" 4
.IX Item "directories()"
This takes one mandatory parameter, the name of a module.  It returns a list of
all the directories from the package.  Additional parameters are allowed.  The
first is one of the strings \*(L"prog\*(R", \*(L"doc\*(R" or \*(L"all\*(R", to select either just
program directories, just manual directories or all directories.  The remaining
parameters are a list of directories. The directories returned will be
restricted to those under the specified directories.  This method returns only
the leaf directories that contain files from the specified module.
.IP "\fIdirectory_tree()\fR" 4
.IX Item "directory_tree()"
This is identical in operation to \fIdirectories()\fR, except that it includes all the
intermediate directories back up to the specified directories.
.IP "\fIvalidate()\fR" 4
.IX Item "validate()"
This takes one mandatory parameter, the name of a module.  It checks that all
the files listed in the modules .packlist actually exist, and returns a list of
any missing files.  If an optional second argument which evaluates to true is
given any missing files will be removed from the .packlist
.IP "\fIpacklist()\fR" 4
.IX Item "packlist()"
This returns the ExtUtils::Packlist object for the specified module.
.IP "\fIversion()\fR" 4
.IX Item "version()"
This returns the version number for the specified module.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
See the example in ExtUtils::Packlist.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alan Burlison <Alan.Burlison@uk.sun.com>
                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Installed5.18.3pm                  0100644 0001750 0001750 00000024232 12566207454 025430  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Installed 3pm"
.TH ExtUtils::Installed 3pm "2013-11-04" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Installed \- Inventory management of installed modules
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 9
\&   use ExtUtils::Installed;
\&   my ($inst) = ExtUtils::Installed\->new( skip_cwd => 1 );
\&   my (@modules) = $inst\->modules();
\&   my (@missing) = $inst\->validate("DBI");
\&   my $all_files = $inst\->files("DBI");
\&   my $files_below_usr_local = $inst\->files("DBI", "all", "/usr/local");
\&   my $all_dirs = $inst\->directories("DBI");
\&   my $dirs_below_usr_local = $inst\->directory_tree("DBI", "prog");
\&   my $packlist = $inst\->packlist("DBI");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ExtUtils::Installed  provides a standard way to find out what core and module
files have been installed.  It uses the information stored in .packlist files
created during installation to provide this information.  In addition it
provides facilities to classify the installed files and to extract directory
information from the .packlist files.
.SH "USAGE"
.IX Header "USAGE"
The \fInew()\fR function searches for all the installed .packlists on the system, and
stores their contents. The .packlists can be queried with the functions
described below. Where it searches by default is determined by the settings found
in \f(CW%Config::Config\fR, and what the value is of the \s-1PERL5LIB\s0 environment variable.
.SH "METHODS"
.IX Header "METHODS"
Unless specified otherwise all method can be called as class methods, or as object
methods. If called as class methods then the \*(L"default\*(R" object will be used, and if
necessary created using the current processes \f(CW%Config\fR and \f(CW@INC\fR.  See the
\&'default' option to \fInew()\fR for details.
.IP "\fInew()\fR" 4
.IX Item "new()"
This takes optional named parameters. Without parameters, this
searches for all the installed .packlists on the system using
information from \f(CW%Config::Config\fR and the default module search
paths \f(CW@INC\fR. The packlists are read using the
ExtUtils::Packlist module.
.Sp
If the named parameter \f(CW\*(C`skip_cwd\*(C'\fR is true, the current directory \f(CW\*(C`.\*(C'\fR will
be stripped from \f(CW@INC\fR before searching for .packlists.  This keeps
ExtUtils::Installed from finding modules installed in other perls that
happen to be located below the current directory.
.Sp
If the named parameter \f(CW\*(C`config_override\*(C'\fR is specified,
it should be a reference to a hash which contains all information
usually found in \f(CW%Config::Config\fR. For example, you can obtain
the configuration information for a separate perl installation and
pass that in.
.Sp
.Vb 3
\&    my $yoda_cfg  = get_fake_config(\*(Aqyoda\*(Aq);
\&    my $yoda_inst =
\&               ExtUtils::Installed\->new(config_override=>$yoda_cfg);
.Ve
.Sp
Similarly, the parameter \f(CW\*(C`inc_override\*(C'\fR may be a reference to an
array which is used in place of the default module search paths
from \f(CW@INC\fR.
.Sp
.Vb 3
\&    use Config;
\&    my @dirs = split(/\eQ$Config{path_sep}\eE/, $ENV{PERL5LIB});
\&    my $p5libs = ExtUtils::Installed\->new(inc_override=>\e@dirs);
.Ve
.Sp
\&\fBNote\fR: You probably do not want to use these options alone, almost always
you will want to set both together.
.Sp
The parameter \f(CW\*(C`extra_libs\*(C'\fR can be used to specify \fBadditional\fR paths to
search for installed modules. For instance
.Sp
.Vb 2
\&    my $installed =
\&             ExtUtils::Installed\->new(extra_libs=>["/my/lib/path"]);
.Ve
.Sp
This should only be necessary if \fI/my/lib/path\fR is not in \s-1PERL5LIB.\s0
.Sp
Finally there is the 'default', and the related 'default_get' and 'default_set'
options. These options control the \*(L"default\*(R" object which is provided by the
class interface to the methods. Setting \f(CW\*(C`default_get\*(C'\fR to true tells the constructor
to return the default object if it is defined. Setting \f(CW\*(C`default_set\*(C'\fR to true tells
the constructor to make the default object the constructed object. Setting the
\&\f(CW\*(C`default\*(C'\fR option is like setting both to true. This is used primarily internally
and probably isn't interesting to any real user.
.IP "\fImodules()\fR" 4
.IX Item "modules()"
This returns a list of the names of all the installed modules.  The perl 'core'
is given the special name 'Perl'.
.IP "\fIfiles()\fR" 4
.IX Item "files()"
This takes one mandatory parameter, the name of a module.  It returns a list of
all the filenames from the package.  To obtain a list of core perl files, use
the module name 'Perl'.  Additional parameters are allowed.  The first is one
of the strings \*(L"prog\*(R", \*(L"doc\*(R" or \*(L"all\*(R", to select either just program files,
just manual files or all files.  The remaining parameters are a list of
directories. The filenames returned will be restricted to those under the
specified directories.
.IP "\fIdirectories()\fR" 4
.IX Item "directories()"
This takes one mandatory parameter, the name of a module.  It returns a list of
all the directories from the package.  Additional parameters are allowed.  The
first is one of the strings \*(L"prog\*(R", \*(L"doc\*(R" or \*(L"all\*(R", to select either just
program directories, just manual directories or all directories.  The remaining
parameters are a list of directories. The directories returned will be
restricted to those under the specified directories.  This method returns only
the leaf directories that contain files from the specified module.
.IP "\fIdirectory_tree()\fR" 4
.IX Item "directory_tree()"
This is identical in operation to \fIdirectories()\fR, except that it includes all the
intermediate directories back up to the specified directories.
.IP "\fIvalidate()\fR" 4
.IX Item "validate()"
This takes one mandatory parameter, the name of a module.  It checks that all
the files listed in the modules .packlist actually exist, and returns a list of
any missing files.  If an optional second argument which evaluates to true is
given any missing files will be removed from the .packlist
.IP "\fIpacklist()\fR" 4
.IX Item "packlist()"
This returns the ExtUtils::Packlist object for the specified module.
.IP "\fIversion()\fR" 4
.IX Item "version()"
This returns the version number for the specified module.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
See the example in ExtUtils::Packlist.
.SH "AUTHOR"
.IX Header "AUTHOR"
Alan Burlison <Alan.Burlison@uk.sun.com>
                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Liblist.3pm                        0100644 0001750 0001750 00000034224 12566207454 024601  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Liblist 3pm"
.TH ExtUtils::Liblist 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Liblist \- determine libraries to use and how to use them
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  require ExtUtils::Liblist;
\&
\&  $MM\->ext($potential_libs, $verbose, $need_names);
\&
\&  # Usually you can get away with:
\&  ExtUtils::Liblist\->ext($potential_libs, $verbose, $need_names)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This utility takes a list of libraries in the form \f(CW\*(C`\-llib1 \-llib2
\&\-llib3\*(C'\fR and returns lines suitable for inclusion in an extension
Makefile.  Extra library paths may be included with the form
\&\f(CW\*(C`\-L/another/path\*(C'\fR this will affect the searches for all subsequent
libraries.
.PP
It returns an array of four or five scalar values: \s-1EXTRALIBS,
BSLOADLIBS, LDLOADLIBS, LD_RUN_PATH,\s0 and, optionally, a reference to
the array of the filenames of actual libraries.  Some of these don't
mean anything unless on Unix.  See the details about those platform
specifics below.  The list of the filenames is returned only if
\&\f(CW$need_names\fR argument is true.
.PP
Dependent libraries can be linked in one of three ways:
.IP "\(bu" 2
For static extensions
.Sp
by the ld command when the perl binary is linked with the extension
library. See \s-1EXTRALIBS\s0 below.
.IP "\(bu" 2
For dynamic extensions at build/link time
.Sp
by the ld command when the shared object is built/linked. See
\&\s-1LDLOADLIBS\s0 below.
.IP "\(bu" 2
For dynamic extensions at load time
.Sp
by the DynaLoader when the shared object is loaded. See \s-1BSLOADLIBS\s0
below.
.SS "\s-1EXTRALIBS\s0"
.IX Subsection "EXTRALIBS"
List of libraries that need to be linked with when linking a perl
binary which includes this extension. Only those libraries that
actually exist are included.  These are written to a file and used
when linking perl.
.SS "\s-1LDLOADLIBS\s0 and \s-1LD_RUN_PATH\s0"
.IX Subsection "LDLOADLIBS and LD_RUN_PATH"
List of those libraries which can or must be linked into the shared
library when created using ld. These may be static or dynamic
libraries.  \s-1LD_RUN_PATH\s0 is a colon separated list of the directories
in \s-1LDLOADLIBS.\s0 It is passed as an environment variable to the process
that links the shared library.
.SS "\s-1BSLOADLIBS\s0"
.IX Subsection "BSLOADLIBS"
List of those libraries that are needed but can be linked in
dynamically at run time on this platform.  SunOS/Solaris does not need
this because ld records the information (from \s-1LDLOADLIBS\s0) into the
object file.  This list is used to create a .bs (bootstrap) file.
.SH "PORTABILITY"
.IX Header "PORTABILITY"
This module deals with a lot of system dependencies and has quite a
few architecture specific \f(CW\*(C`if\*(C'\fRs in the code.
.SS "\s-1VMS\s0 implementation"
.IX Subsection "VMS implementation"
The version of \fIext()\fR which is executed under \s-1VMS\s0 differs from the
Unix\-OS/2 version in several respects:
.IP "\(bu" 2
Input library and path specifications are accepted with or without the
\&\f(CW\*(C`\-l\*(C'\fR and \f(CW\*(C`\-L\*(C'\fR prefixes used by Unix linkers.  If neither prefix is
present, a token is considered a directory to search if it is in fact
a directory, and a library to search for otherwise.  Authors who wish
their extensions to be portable to Unix or \s-1OS/2\s0 should use the Unix
prefixes, since the Unix\-OS/2 version of \fIext()\fR requires them.
.IP "\(bu" 2
Wherever possible, shareable images are preferred to object libraries,
and object libraries to plain object files.  In accordance with \s-1VMS\s0
naming conventions, \fIext()\fR looks for files named \fIlib\fRshr and \fIlib\fRrtl;
it also looks for \fIlib\fRlib and lib\fIlib\fR to accommodate Unix conventions
used in some ported software.
.IP "\(bu" 2
For each library that is found, an appropriate directive for a linker options
file is generated.  The return values are space-separated strings of
these directives, rather than elements used on the linker command line.
.IP "\(bu" 2
\&\s-1LDLOADLIBS\s0 contains both the libraries found based on \f(CW$potential_libs\fR and
the CRTLs, if any, specified in Config.pm.  \s-1EXTRALIBS\s0 contains just those
libraries found based on \f(CW$potential_libs\fR.  \s-1BSLOADLIBS\s0 and \s-1LD_RUN_PATH\s0
are always empty.
.PP
In addition, an attempt is made to recognize several common Unix library
names, and filter them out or convert them to their \s-1VMS\s0 equivalents, as
appropriate.
.PP
In general, the \s-1VMS\s0 version of \fIext()\fR should properly handle input from
extensions originally designed for a Unix or \s-1VMS\s0 environment.  If you
encounter problems, or discover cases where the search could be improved,
please let us know.
.SS "Win32 implementation"
.IX Subsection "Win32 implementation"
The version of \fIext()\fR which is executed under Win32 differs from the
Unix\-OS/2 version in several respects:
.IP "\(bu" 2
If \f(CW$potential_libs\fR is empty, the return value will be empty.
Otherwise, the libraries specified by \f(CW$Config{perllibs}\fR (see Config.pm)
will be appended to the list of \f(CW$potential_libs\fR.  The libraries
will be searched for in the directories specified in \f(CW$potential_libs\fR,
\&\f(CW$Config{libpth}\fR, and in \f(CW\*(C`$Config{installarchlib}/CORE\*(C'\fR.
For each library that is found,  a space-separated list of fully qualified
library pathnames is generated.
.IP "\(bu" 2
Input library and path specifications are accepted with or without the
\&\f(CW\*(C`\-l\*(C'\fR and \f(CW\*(C`\-L\*(C'\fR prefixes used by Unix linkers.
.Sp
An entry of the form \f(CW\*(C`\-La:\efoo\*(C'\fR specifies the \f(CW\*(C`a:\efoo\*(C'\fR directory to look
for the libraries that follow.
.Sp
An entry of the form \f(CW\*(C`\-lfoo\*(C'\fR specifies the library \f(CW\*(C`foo\*(C'\fR, which may be
spelled differently depending on what kind of compiler you are using.  If
you are using \s-1GCC,\s0 it gets translated to \f(CW\*(C`libfoo.a\*(C'\fR, but for other win32
compilers, it becomes \f(CW\*(C`foo.lib\*(C'\fR.  If no files are found by those translated
names, one more attempt is made to find them using either \f(CW\*(C`foo.a\*(C'\fR or
\&\f(CW\*(C`libfoo.lib\*(C'\fR, depending on whether \s-1GCC\s0 or some other win32 compiler is
being used, respectively.
.Sp
If neither the \f(CW\*(C`\-L\*(C'\fR or \f(CW\*(C`\-l\*(C'\fR prefix is present in an entry, the entry is
considered a directory to search if it is in fact a directory, and a
library to search for otherwise.  The \f(CW$Config{lib_ext}\fR suffix will
be appended to any entries that are not directories and don't already have
the suffix.
.Sp
Note that the \f(CW\*(C`\-L\*(C'\fR and \f(CW\*(C`\-l\*(C'\fR prefixes are \fBnot required\fR, but authors
who wish their extensions to be portable to Unix or \s-1OS/2\s0 should use the
prefixes, since the Unix\-OS/2 version of \fIext()\fR requires them.
.IP "\(bu" 2
Entries cannot be plain object files, as many Win32 compilers will
not handle object files in the place of libraries.
.IP "\(bu" 2
Entries in \f(CW$potential_libs\fR beginning with a colon and followed by
alphanumeric characters are treated as flags.  Unknown flags will be ignored.
.Sp
An entry that matches \f(CW\*(C`/:nodefault/i\*(C'\fR disables the appending of default
libraries found in \f(CW$Config{perllibs}\fR (this should be only needed very rarely).
.Sp
An entry that matches \f(CW\*(C`/:nosearch/i\*(C'\fR disables all searching for
the libraries specified after it.  Translation of \f(CW\*(C`\-Lfoo\*(C'\fR and
\&\f(CW\*(C`\-lfoo\*(C'\fR still happens as appropriate (depending on compiler being used,
as reflected by \f(CW$Config{cc}\fR), but the entries are not verified to be
valid files or directories.
.Sp
An entry that matches \f(CW\*(C`/:search/i\*(C'\fR reenables searching for
the libraries specified after it.  You can put it at the end to
enable searching for default libraries specified by \f(CW$Config{perllibs}\fR.
.IP "\(bu" 2
The libraries specified may be a mixture of static libraries and
import libraries (to link with DLLs).  Since both kinds are used
pretty transparently on the Win32 platform, we do not attempt to
distinguish between them.
.IP "\(bu" 2
\&\s-1LDLOADLIBS\s0 and \s-1EXTRALIBS\s0 are always identical under Win32, and \s-1BSLOADLIBS\s0
and \s-1LD_RUN_PATH\s0 are always empty (this may change in future).
.IP "\(bu" 2
You must make sure that any paths and path components are properly
surrounded with double-quotes if they contain spaces. For example,
\&\f(CW$potential_libs\fR could be (literally):
.Sp
.Vb 1
\&        "\-Lc:\eProgram Files\evc\elib" msvcrt.lib "la test\efoo bar.lib"
.Ve
.Sp
Note how the first and last entries are protected by quotes in order
to protect the spaces.
.IP "\(bu" 2
Since this module is most often used only indirectly from extension
\&\f(CW\*(C`Makefile.PL\*(C'\fR files, here is an example \f(CW\*(C`Makefile.PL\*(C'\fR entry to add
a library to the build process for an extension:
.Sp
.Vb 1
\&        LIBS => [\*(Aq\-lgl\*(Aq]
.Ve
.Sp
When using \s-1GCC,\s0 that entry specifies that MakeMaker should first look
for \f(CW\*(C`libgl.a\*(C'\fR (followed by \f(CW\*(C`gl.a\*(C'\fR) in all the locations specified by
\&\f(CW$Config{libpth}\fR.
.Sp
When using a compiler other than \s-1GCC,\s0 the above entry will search for
\&\f(CW\*(C`gl.lib\*(C'\fR (followed by \f(CW\*(C`libgl.lib\*(C'\fR).
.Sp
If the library happens to be in a location not in \f(CW$Config{libpth}\fR,
you need:
.Sp
.Vb 1
\&        LIBS => [\*(Aq\-Lc:\egllibs \-lgl\*(Aq]
.Ve
.Sp
Here is a less often used example:
.Sp
.Vb 1
\&        LIBS => [\*(Aq\-lgl\*(Aq, \*(Aq:nosearch \-Ld:\emesalibs \-lmesa \-luser32\*(Aq]
.Ve
.Sp
This specifies a search for library \f(CW\*(C`gl\*(C'\fR as before.  If that search
fails to find the library, it looks at the next item in the list. The
\&\f(CW\*(C`:nosearch\*(C'\fR flag will prevent searching for the libraries that follow,
so it simply returns the value as \f(CW\*(C`\-Ld:\emesalibs \-lmesa \-luser32\*(C'\fR,
since \s-1GCC\s0 can use that value as is with its linker.
.Sp
When using the Visual C compiler, the second item is returned as
\&\f(CW\*(C`\-libpath:d:\emesalibs mesa.lib user32.lib\*(C'\fR.
.Sp
When using the Borland compiler, the second item is returned as
\&\f(CW\*(C`\-Ld:\emesalibs mesa.lib user32.lib\*(C'\fR, and MakeMaker takes care of
moving the \f(CW\*(C`\-Ld:\emesalibs\*(C'\fR to the correct place in the linker
command line.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Liblist5.16.3pm                    0100644 0001750 0001750 00000033732 12566207433 025113  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Liblist 3pm"
.TH ExtUtils::Liblist 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Liblist \- determine libraries to use and how to use them
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  require ExtUtils::Liblist;
\&
\&  $MM\->ext($potential_libs, $verbose, $need_names);
\&
\&  # Usually you can get away with:
\&  ExtUtils::Liblist\->ext($potential_libs, $verbose, $need_names)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This utility takes a list of libraries in the form \f(CW\*(C`\-llib1 \-llib2
\&\-llib3\*(C'\fR and returns lines suitable for inclusion in an extension
Makefile.  Extra library paths may be included with the form
\&\f(CW\*(C`\-L/another/path\*(C'\fR this will affect the searches for all subsequent
libraries.
.PP
It returns an array of four or five scalar values: \s-1EXTRALIBS\s0,
\&\s-1BSLOADLIBS\s0, \s-1LDLOADLIBS\s0, \s-1LD_RUN_PATH\s0, and, optionally, a reference to
the array of the filenames of actual libraries.  Some of these don't
mean anything unless on Unix.  See the details about those platform
specifics below.  The list of the filenames is returned only if
\&\f(CW$need_names\fR argument is true.
.PP
Dependent libraries can be linked in one of three ways:
.IP "\(bu" 2
For static extensions
.Sp
by the ld command when the perl binary is linked with the extension
library. See \s-1EXTRALIBS\s0 below.
.IP "\(bu" 2
For dynamic extensions at build/link time
.Sp
by the ld command when the shared object is built/linked. See
\&\s-1LDLOADLIBS\s0 below.
.IP "\(bu" 2
For dynamic extensions at load time
.Sp
by the DynaLoader when the shared object is loaded. See \s-1BSLOADLIBS\s0
below.
.SS "\s-1EXTRALIBS\s0"
.IX Subsection "EXTRALIBS"
List of libraries that need to be linked with when linking a perl
binary which includes this extension. Only those libraries that
actually exist are included.  These are written to a file and used
when linking perl.
.SS "\s-1LDLOADLIBS\s0 and \s-1LD_RUN_PATH\s0"
.IX Subsection "LDLOADLIBS and LD_RUN_PATH"
List of those libraries which can or must be linked into the shared
library when created using ld. These may be static or dynamic
libraries.  \s-1LD_RUN_PATH\s0 is a colon separated list of the directories
in \s-1LDLOADLIBS\s0. It is passed as an environment variable to the process
that links the shared library.
.SS "\s-1BSLOADLIBS\s0"
.IX Subsection "BSLOADLIBS"
List of those libraries that are needed but can be linked in
dynamically at run time on this platform.  SunOS/Solaris does not need
this because ld records the information (from \s-1LDLOADLIBS\s0) into the
object file.  This list is used to create a .bs (bootstrap) file.
.SH "PORTABILITY"
.IX Header "PORTABILITY"
This module deals with a lot of system dependencies and has quite a
few architecture specific \f(CW\*(C`if\*(C'\fRs in the code.
.SS "\s-1VMS\s0 implementation"
.IX Subsection "VMS implementation"
The version of \fIext()\fR which is executed under \s-1VMS\s0 differs from the
Unix\-OS/2 version in several respects:
.IP "\(bu" 2
Input library and path specifications are accepted with or without the
\&\f(CW\*(C`\-l\*(C'\fR and \f(CW\*(C`\-L\*(C'\fR prefixes used by Unix linkers.  If neither prefix is
present, a token is considered a directory to search if it is in fact
a directory, and a library to search for otherwise.  Authors who wish
their extensions to be portable to Unix or \s-1OS/2\s0 should use the Unix
prefixes, since the Unix\-OS/2 version of \fIext()\fR requires them.
.IP "\(bu" 2
Wherever possible, shareable images are preferred to object libraries,
and object libraries to plain object files.  In accordance with \s-1VMS\s0
naming conventions, \fIext()\fR looks for files named \fIlib\fRshr and \fIlib\fRrtl;
it also looks for \fIlib\fRlib and lib\fIlib\fR to accommodate Unix conventions
used in some ported software.
.IP "\(bu" 2
For each library that is found, an appropriate directive for a linker options
file is generated.  The return values are space-separated strings of
these directives, rather than elements used on the linker command line.
.IP "\(bu" 2
\&\s-1LDLOADLIBS\s0 contains both the libraries found based on \f(CW$potential_libs\fR and
the CRTLs, if any, specified in Config.pm.  \s-1EXTRALIBS\s0 contains just those
libraries found based on \f(CW$potential_libs\fR.  \s-1BSLOADLIBS\s0 and \s-1LD_RUN_PATH\s0
are always empty.
.PP
In addition, an attempt is made to recognize several common Unix library
names, and filter them out or convert them to their \s-1VMS\s0 equivalents, as
appropriate.
.PP
In general, the \s-1VMS\s0 version of \fIext()\fR should properly handle input from
extensions originally designed for a Unix or \s-1VMS\s0 environment.  If you
encounter problems, or discover cases where the search could be improved,
please let us know.
.SS "Win32 implementation"
.IX Subsection "Win32 implementation"
The version of \fIext()\fR which is executed under Win32 differs from the
Unix\-OS/2 version in several respects:
.IP "\(bu" 2
If \f(CW$potential_libs\fR is empty, the return value will be empty.
Otherwise, the libraries specified by \f(CW$Config{perllibs}\fR (see Config.pm)
will be appended to the list of \f(CW$potential_libs\fR.  The libraries
will be searched for in the directories specified in \f(CW$potential_libs\fR,
\&\f(CW$Config{libpth}\fR, and in \f(CW\*(C`$Config{installarchlib}/CORE\*(C'\fR.
For each library that is found,  a space-separated list of fully qualified
library pathnames is generated.
.IP "\(bu" 2
Input library and path specifications are accepted with or without the
\&\f(CW\*(C`\-l\*(C'\fR and \f(CW\*(C`\-L\*(C'\fR prefixes used by Unix linkers.
.Sp
An entry of the form \f(CW\*(C`\-La:\efoo\*(C'\fR specifies the \f(CW\*(C`a:\efoo\*(C'\fR directory to look
for the libraries that follow.
.Sp
An entry of the form \f(CW\*(C`\-lfoo\*(C'\fR specifies the library \f(CW\*(C`foo\*(C'\fR, which may be
spelled differently depending on what kind of compiler you are using.  If
you are using \s-1GCC\s0, it gets translated to \f(CW\*(C`libfoo.a\*(C'\fR, but for other win32
compilers, it becomes \f(CW\*(C`foo.lib\*(C'\fR.  If no files are found by those translated
names, one more attempt is made to find them using either \f(CW\*(C`foo.a\*(C'\fR or
\&\f(CW\*(C`libfoo.lib\*(C'\fR, depending on whether \s-1GCC\s0 or some other win32 compiler is
being used, respectively.
.Sp
If neither the \f(CW\*(C`\-L\*(C'\fR or \f(CW\*(C`\-l\*(C'\fR prefix is present in an entry, the entry is
considered a directory to search if it is in fact a directory, and a
library to search for otherwise.  The \f(CW$Config{lib_ext}\fR suffix will
be appended to any entries that are not directories and don't already have
the suffix.
.Sp
Note that the \f(CW\*(C`\-L\*(C'\fR and \f(CW\*(C`\-l\*(C'\fR prefixes are \fBnot required\fR, but authors
who wish their extensions to be portable to Unix or \s-1OS/2\s0 should use the
prefixes, since the Unix\-OS/2 version of \fIext()\fR requires them.
.IP "\(bu" 2
Entries cannot be plain object files, as many Win32 compilers will
not handle object files in the place of libraries.
.IP "\(bu" 2
Entries in \f(CW$potential_libs\fR beginning with a colon and followed by
alphanumeric characters are treated as flags.  Unknown flags will be ignored.
.Sp
An entry that matches \f(CW\*(C`/:nodefault/i\*(C'\fR disables the appending of default
libraries found in \f(CW$Config{perllibs}\fR (this should be only needed very rarely).
.Sp
An entry that matches \f(CW\*(C`/:nosearch/i\*(C'\fR disables all searching for
the libraries specified after it.  Translation of \f(CW\*(C`\-Lfoo\*(C'\fR and
\&\f(CW\*(C`\-lfoo\*(C'\fR still happens as appropriate (depending on compiler being used,
as reflected by \f(CW$Config{cc}\fR), but the entries are not verified to be
valid files or directories.
.Sp
An entry that matches \f(CW\*(C`/:search/i\*(C'\fR reenables searching for
the libraries specified after it.  You can put it at the end to
enable searching for default libraries specified by \f(CW$Config{perllibs}\fR.
.IP "\(bu" 2
The libraries specified may be a mixture of static libraries and
import libraries (to link with DLLs).  Since both kinds are used
pretty transparently on the Win32 platform, we do not attempt to
distinguish between them.
.IP "\(bu" 2
\&\s-1LDLOADLIBS\s0 and \s-1EXTRALIBS\s0 are always identical under Win32, and \s-1BSLOADLIBS\s0
and \s-1LD_RUN_PATH\s0 are always empty (this may change in future).
.IP "\(bu" 2
You must make sure that any paths and path components are properly
surrounded with double-quotes if they contain spaces. For example,
\&\f(CW$potential_libs\fR could be (literally):
.Sp
.Vb 1
\&        "\-Lc:\eProgram Files\evc\elib" msvcrt.lib "la test\efoo bar.lib"
.Ve
.Sp
Note how the first and last entries are protected by quotes in order
to protect the spaces.
.IP "\(bu" 2
Since this module is most often used only indirectly from extension
\&\f(CW\*(C`Makefile.PL\*(C'\fR files, here is an example \f(CW\*(C`Makefile.PL\*(C'\fR entry to add
a library to the build process for an extension:
.Sp
.Vb 1
\&        LIBS => [\*(Aq\-lgl\*(Aq]
.Ve
.Sp
When using \s-1GCC\s0, that entry specifies that MakeMaker should first look
for \f(CW\*(C`libgl.a\*(C'\fR (followed by \f(CW\*(C`gl.a\*(C'\fR) in all the locations specified by
\&\f(CW$Config{libpth}\fR.
.Sp
When using a compiler other than \s-1GCC\s0, the above entry will search for
\&\f(CW\*(C`gl.lib\*(C'\fR (followed by \f(CW\*(C`libgl.lib\*(C'\fR).
.Sp
If the library happens to be in a location not in \f(CW$Config{libpth}\fR,
you need:
.Sp
.Vb 1
\&        LIBS => [\*(Aq\-Lc:\egllibs \-lgl\*(Aq]
.Ve
.Sp
Here is a less often used example:
.Sp
.Vb 1
\&        LIBS => [\*(Aq\-lgl\*(Aq, \*(Aq:nosearch \-Ld:\emesalibs \-lmesa \-luser32\*(Aq]
.Ve
.Sp
This specifies a search for library \f(CW\*(C`gl\*(C'\fR as before.  If that search
fails to find the library, it looks at the next item in the list. The
\&\f(CW\*(C`:nosearch\*(C'\fR flag will prevent searching for the libraries that follow,
so it simply returns the value as \f(CW\*(C`\-Ld:\emesalibs \-lmesa \-luser32\*(C'\fR,
since \s-1GCC\s0 can use that value as is with its linker.
.Sp
When using the Visual C compiler, the second item is returned as
\&\f(CW\*(C`\-libpath:d:\emesalibs mesa.lib user32.lib\*(C'\fR.
.Sp
When using the Borland compiler, the second item is returned as
\&\f(CW\*(C`\-Ld:\emesalibs mesa.lib user32.lib\*(C'\fR, and MakeMaker takes care of
moving the \f(CW\*(C`\-Ld:\emesalibs\*(C'\fR to the correct place in the linker
command line.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker
                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::Liblist5.18.3pm                    0100644 0001750 0001750 00000034224 12566207454 025115  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::Liblist 3pm"
.TH ExtUtils::Liblist 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::Liblist \- determine libraries to use and how to use them
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  require ExtUtils::Liblist;
\&
\&  $MM\->ext($potential_libs, $verbose, $need_names);
\&
\&  # Usually you can get away with:
\&  ExtUtils::Liblist\->ext($potential_libs, $verbose, $need_names)
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This utility takes a list of libraries in the form \f(CW\*(C`\-llib1 \-llib2
\&\-llib3\*(C'\fR and returns lines suitable for inclusion in an extension
Makefile.  Extra library paths may be included with the form
\&\f(CW\*(C`\-L/another/path\*(C'\fR this will affect the searches for all subsequent
libraries.
.PP
It returns an array of four or five scalar values: \s-1EXTRALIBS,
BSLOADLIBS, LDLOADLIBS, LD_RUN_PATH,\s0 and, optionally, a reference to
the array of the filenames of actual libraries.  Some of these don't
mean anything unless on Unix.  See the details about those platform
specifics below.  The list of the filenames is returned only if
\&\f(CW$need_names\fR argument is true.
.PP
Dependent libraries can be linked in one of three ways:
.IP "\(bu" 2
For static extensions
.Sp
by the ld command when the perl binary is linked with the extension
library. See \s-1EXTRALIBS\s0 below.
.IP "\(bu" 2
For dynamic extensions at build/link time
.Sp
by the ld command when the shared object is built/linked. See
\&\s-1LDLOADLIBS\s0 below.
.IP "\(bu" 2
For dynamic extensions at load time
.Sp
by the DynaLoader when the shared object is loaded. See \s-1BSLOADLIBS\s0
below.
.SS "\s-1EXTRALIBS\s0"
.IX Subsection "EXTRALIBS"
List of libraries that need to be linked with when linking a perl
binary which includes this extension. Only those libraries that
actually exist are included.  These are written to a file and used
when linking perl.
.SS "\s-1LDLOADLIBS\s0 and \s-1LD_RUN_PATH\s0"
.IX Subsection "LDLOADLIBS and LD_RUN_PATH"
List of those libraries which can or must be linked into the shared
library when created using ld. These may be static or dynamic
libraries.  \s-1LD_RUN_PATH\s0 is a colon separated list of the directories
in \s-1LDLOADLIBS.\s0 It is passed as an environment variable to the process
that links the shared library.
.SS "\s-1BSLOADLIBS\s0"
.IX Subsection "BSLOADLIBS"
List of those libraries that are needed but can be linked in
dynamically at run time on this platform.  SunOS/Solaris does not need
this because ld records the information (from \s-1LDLOADLIBS\s0) into the
object file.  This list is used to create a .bs (bootstrap) file.
.SH "PORTABILITY"
.IX Header "PORTABILITY"
This module deals with a lot of system dependencies and has quite a
few architecture specific \f(CW\*(C`if\*(C'\fRs in the code.
.SS "\s-1VMS\s0 implementation"
.IX Subsection "VMS implementation"
The version of \fIext()\fR which is executed under \s-1VMS\s0 differs from the
Unix\-OS/2 version in several respects:
.IP "\(bu" 2
Input library and path specifications are accepted with or without the
\&\f(CW\*(C`\-l\*(C'\fR and \f(CW\*(C`\-L\*(C'\fR prefixes used by Unix linkers.  If neither prefix is
present, a token is considered a directory to search if it is in fact
a directory, and a library to search for otherwise.  Authors who wish
their extensions to be portable to Unix or \s-1OS/2\s0 should use the Unix
prefixes, since the Unix\-OS/2 version of \fIext()\fR requires them.
.IP "\(bu" 2
Wherever possible, shareable images are preferred to object libraries,
and object libraries to plain object files.  In accordance with \s-1VMS\s0
naming conventions, \fIext()\fR looks for files named \fIlib\fRshr and \fIlib\fRrtl;
it also looks for \fIlib\fRlib and lib\fIlib\fR to accommodate Unix conventions
used in some ported software.
.IP "\(bu" 2
For each library that is found, an appropriate directive for a linker options
file is generated.  The return values are space-separated strings of
these directives, rather than elements used on the linker command line.
.IP "\(bu" 2
\&\s-1LDLOADLIBS\s0 contains both the libraries found based on \f(CW$potential_libs\fR and
the CRTLs, if any, specified in Config.pm.  \s-1EXTRALIBS\s0 contains just those
libraries found based on \f(CW$potential_libs\fR.  \s-1BSLOADLIBS\s0 and \s-1LD_RUN_PATH\s0
are always empty.
.PP
In addition, an attempt is made to recognize several common Unix library
names, and filter them out or convert them to their \s-1VMS\s0 equivalents, as
appropriate.
.PP
In general, the \s-1VMS\s0 version of \fIext()\fR should properly handle input from
extensions originally designed for a Unix or \s-1VMS\s0 environment.  If you
encounter problems, or discover cases where the search could be improved,
please let us know.
.SS "Win32 implementation"
.IX Subsection "Win32 implementation"
The version of \fIext()\fR which is executed under Win32 differs from the
Unix\-OS/2 version in several respects:
.IP "\(bu" 2
If \f(CW$potential_libs\fR is empty, the return value will be empty.
Otherwise, the libraries specified by \f(CW$Config{perllibs}\fR (see Config.pm)
will be appended to the list of \f(CW$potential_libs\fR.  The libraries
will be searched for in the directories specified in \f(CW$potential_libs\fR,
\&\f(CW$Config{libpth}\fR, and in \f(CW\*(C`$Config{installarchlib}/CORE\*(C'\fR.
For each library that is found,  a space-separated list of fully qualified
library pathnames is generated.
.IP "\(bu" 2
Input library and path specifications are accepted with or without the
\&\f(CW\*(C`\-l\*(C'\fR and \f(CW\*(C`\-L\*(C'\fR prefixes used by Unix linkers.
.Sp
An entry of the form \f(CW\*(C`\-La:\efoo\*(C'\fR specifies the \f(CW\*(C`a:\efoo\*(C'\fR directory to look
for the libraries that follow.
.Sp
An entry of the form \f(CW\*(C`\-lfoo\*(C'\fR specifies the library \f(CW\*(C`foo\*(C'\fR, which may be
spelled differently depending on what kind of compiler you are using.  If
you are using \s-1GCC,\s0 it gets translated to \f(CW\*(C`libfoo.a\*(C'\fR, but for other win32
compilers, it becomes \f(CW\*(C`foo.lib\*(C'\fR.  If no files are found by those translated
names, one more attempt is made to find them using either \f(CW\*(C`foo.a\*(C'\fR or
\&\f(CW\*(C`libfoo.lib\*(C'\fR, depending on whether \s-1GCC\s0 or some other win32 compiler is
being used, respectively.
.Sp
If neither the \f(CW\*(C`\-L\*(C'\fR or \f(CW\*(C`\-l\*(C'\fR prefix is present in an entry, the entry is
considered a directory to search if it is in fact a directory, and a
library to search for otherwise.  The \f(CW$Config{lib_ext}\fR suffix will
be appended to any entries that are not directories and don't already have
the suffix.
.Sp
Note that the \f(CW\*(C`\-L\*(C'\fR and \f(CW\*(C`\-l\*(C'\fR prefixes are \fBnot required\fR, but authors
who wish their extensions to be portable to Unix or \s-1OS/2\s0 should use the
prefixes, since the Unix\-OS/2 version of \fIext()\fR requires them.
.IP "\(bu" 2
Entries cannot be plain object files, as many Win32 compilers will
not handle object files in the place of libraries.
.IP "\(bu" 2
Entries in \f(CW$potential_libs\fR beginning with a colon and followed by
alphanumeric characters are treated as flags.  Unknown flags will be ignored.
.Sp
An entry that matches \f(CW\*(C`/:nodefault/i\*(C'\fR disables the appending of default
libraries found in \f(CW$Config{perllibs}\fR (this should be only needed very rarely).
.Sp
An entry that matches \f(CW\*(C`/:nosearch/i\*(C'\fR disables all searching for
the libraries specified after it.  Translation of \f(CW\*(C`\-Lfoo\*(C'\fR and
\&\f(CW\*(C`\-lfoo\*(C'\fR still happens as appropriate (depending on compiler being used,
as reflected by \f(CW$Config{cc}\fR), but the entries are not verified to be
valid files or directories.
.Sp
An entry that matches \f(CW\*(C`/:search/i\*(C'\fR reenables searching for
the libraries specified after it.  You can put it at the end to
enable searching for default libraries specified by \f(CW$Config{perllibs}\fR.
.IP "\(bu" 2
The libraries specified may be a mixture of static libraries and
import libraries (to link with DLLs).  Since both kinds are used
pretty transparently on the Win32 platform, we do not attempt to
distinguish between them.
.IP "\(bu" 2
\&\s-1LDLOADLIBS\s0 and \s-1EXTRALIBS\s0 are always identical under Win32, and \s-1BSLOADLIBS\s0
and \s-1LD_RUN_PATH\s0 are always empty (this may change in future).
.IP "\(bu" 2
You must make sure that any paths and path components are properly
surrounded with double-quotes if they contain spaces. For example,
\&\f(CW$potential_libs\fR could be (literally):
.Sp
.Vb 1
\&        "\-Lc:\eProgram Files\evc\elib" msvcrt.lib "la test\efoo bar.lib"
.Ve
.Sp
Note how the first and last entries are protected by quotes in order
to protect the spaces.
.IP "\(bu" 2
Since this module is most often used only indirectly from extension
\&\f(CW\*(C`Makefile.PL\*(C'\fR files, here is an example \f(CW\*(C`Makefile.PL\*(C'\fR entry to add
a library to the build process for an extension:
.Sp
.Vb 1
\&        LIBS => [\*(Aq\-lgl\*(Aq]
.Ve
.Sp
When using \s-1GCC,\s0 that entry specifies that MakeMaker should first look
for \f(CW\*(C`libgl.a\*(C'\fR (followed by \f(CW\*(C`gl.a\*(C'\fR) in all the locations specified by
\&\f(CW$Config{libpth}\fR.
.Sp
When using a compiler other than \s-1GCC,\s0 the above entry will search for
\&\f(CW\*(C`gl.lib\*(C'\fR (followed by \f(CW\*(C`libgl.lib\*(C'\fR).
.Sp
If the library happens to be in a location not in \f(CW$Config{libpth}\fR,
you need:
.Sp
.Vb 1
\&        LIBS => [\*(Aq\-Lc:\egllibs \-lgl\*(Aq]
.Ve
.Sp
Here is a less often used example:
.Sp
.Vb 1
\&        LIBS => [\*(Aq\-lgl\*(Aq, \*(Aq:nosearch \-Ld:\emesalibs \-lmesa \-luser32\*(Aq]
.Ve
.Sp
This specifies a search for library \f(CW\*(C`gl\*(C'\fR as before.  If that search
fails to find the library, it looks at the next item in the list. The
\&\f(CW\*(C`:nosearch\*(C'\fR flag will prevent searching for the libraries that follow,
so it simply returns the value as \f(CW\*(C`\-Ld:\emesalibs \-lmesa \-luser32\*(C'\fR,
since \s-1GCC\s0 can use that value as is with its linker.
.Sp
When using the Visual C compiler, the second item is returned as
\&\f(CW\*(C`\-libpath:d:\emesalibs mesa.lib user32.lib\*(C'\fR.
.Sp
When using the Borland compiler, the second item is returned as
\&\f(CW\*(C`\-Ld:\emesalibs mesa.lib user32.lib\*(C'\fR, and MakeMaker takes care of
moving the \f(CW\*(C`\-Ld:\emesalibs\*(C'\fR to the correct place in the linker
command line.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM.3pm                             0100644 0001750 0001750 00000011032 12566207454 023500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM 3pm"
.TH ExtUtils::MM 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM \- OS adjusted ExtUtils::MakeMaker subclass
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  require ExtUtils::MM;
\&  my $mm = MM\->new(...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1FOR INTERNAL USE ONLY\s0\fR
.PP
ExtUtils::MM is a subclass of ExtUtils::MakeMaker which automatically
chooses the appropriate \s-1OS\s0 specific subclass for you
(ie. ExtUils::MM_Unix, etc...).
.PP
It also provides a convenient alias via the \s-1MM\s0 class (I didn't want
MakeMaker modules outside of ExtUtils/).
.PP
This class might turn out to be a temporary solution, but \s-1MM\s0 won't go
away.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM5.16.3pm                         0100644 0001750 0001750 00000010536 12566207433 024017  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM 3pm"
.TH ExtUtils::MM 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM \- OS adjusted ExtUtils::MakeMaker subclass
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  require ExtUtils::MM;
\&  my $mm = MM\->new(...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1FOR\s0 \s-1INTERNAL\s0 \s-1USE\s0 \s-1ONLY\s0\fR
.PP
ExtUtils::MM is a subclass of ExtUtils::MakeMaker which automatically
chooses the appropriate \s-1OS\s0 specific subclass for you
(ie. ExtUils::MM_Unix, etc...).
.PP
It also provides a convenient alias via the \s-1MM\s0 class (I didn't want
MakeMaker modules outside of ExtUtils/).
.PP
This class might turn out to be a temporary solution, but \s-1MM\s0 won't go
away.
                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM5.18.3pm                         0100644 0001750 0001750 00000011032 12566207454 024014  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM 3pm"
.TH ExtUtils::MM 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM \- OS adjusted ExtUtils::MakeMaker subclass
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  require ExtUtils::MM;
\&  my $mm = MM\->new(...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1FOR INTERNAL USE ONLY\s0\fR
.PP
ExtUtils::MM is a subclass of ExtUtils::MakeMaker which automatically
chooses the appropriate \s-1OS\s0 specific subclass for you
(ie. ExtUils::MM_Unix, etc...).
.PP
It also provides a convenient alias via the \s-1MM\s0 class (I didn't want
MakeMaker modules outside of ExtUtils/).
.PP
This class might turn out to be a temporary solution, but \s-1MM\s0 won't go
away.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_AIX.3pm                         0100644 0001750 0001750 00000011214 12566207454 024203  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_AIX 3pm"
.TH ExtUtils::MM_AIX 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_AIX \- AIX specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality for
\&\s-1AIX.\s0
.PP
Unless otherwise stated it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
\fIdlsyms\fR
.IX Subsection "dlsyms"
.PP
Define \s-1DL_FUNCS\s0 and \s-1DL_VARS\s0 and write the *.exp files.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_AIX5.16.3pm                     0100644 0001750 0001750 00000010673 12566207433 024522  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_AIX 3pm"
.TH ExtUtils::MM_AIX 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_AIX \- AIX specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality for
\&\s-1AIX\s0.
.PP
Unless otherwise stated it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
\fIdlsyms\fR
.IX Subsection "dlsyms"
.PP
Define \s-1DL_FUNCS\s0 and \s-1DL_VARS\s0 and write the *.exp files.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker
                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_AIX5.18.3pm                     0100644 0001750 0001750 00000011214 12566207454 024517  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_AIX 3pm"
.TH ExtUtils::MM_AIX 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_AIX \- AIX specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality for
\&\s-1AIX.\s0
.PP
Unless otherwise stated it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
\fIdlsyms\fR
.IX Subsection "dlsyms"
.PP
Define \s-1DL_FUNCS\s0 and \s-1DL_VARS\s0 and write the *.exp files.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                                                                                                                                    osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_Any.3pm                         0100644 0001750 0001750 00000066244 12566207454 024326  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_Any 3pm"
.TH ExtUtils::MM_Any 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_Any \- Platform\-agnostic MM methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  FOR INTERNAL USE ONLY!
\&
\&  package ExtUtils::MM_SomeOS;
\&
\&  # Temporarily, you have to subclass both.  Put MM_Any first.
\&  require ExtUtils::MM_Any;
\&  require ExtUtils::MM_Unix;
\&  @ISA = qw(ExtUtils::MM_Any ExtUtils::Unix);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1FOR INTERNAL USE ONLY\s0!\fR
.PP
ExtUtils::MM_Any is a superclass for the ExtUtils::MM_* set of
modules.  It contains methods which are either inherently
cross-platform or are written in a cross-platform manner.
.PP
Subclass off of ExtUtils::MM_Any \fIand\fR ExtUtils::MM_Unix.  This is a
temporary solution.
.PP
\&\fB\s-1THIS MAY BE TEMPORARY\s0!\fR
.SH "METHODS"
.IX Header "METHODS"
Any methods marked \fIAbstract\fR must be implemented by subclasses.
.SS "Cross-platform helper methods"
.IX Subsection "Cross-platform helper methods"
These are methods which help writing cross-platform code.
.PP
\fIos_flavor  \fIAbstract\fI\fR
.IX Subsection "os_flavor Abstract"
.PP
.Vb 1
\&    my @os_flavor = $mm\->os_flavor;
.Ve
.PP
\&\f(CW@os_flavor\fR is the style of operating system this is, usually
corresponding to the MM_*.pm file we're using.
.PP
The first element of \f(CW@os_flavor\fR is the major family (ie. Unix,
Windows, \s-1VMS, OS/2,\s0 etc...) and the rest are sub families.
.PP
Some examples:
.PP
.Vb 6
\&    Cygwin98       (\*(AqUnix\*(Aq,  \*(AqCygwin\*(Aq, \*(AqCygwin9x\*(Aq)
\&    Windows        (\*(AqWin32\*(Aq)
\&    Win98          (\*(AqWin32\*(Aq, \*(AqWin9x\*(Aq)
\&    Linux          (\*(AqUnix\*(Aq,  \*(AqLinux\*(Aq)
\&    MacOS X        (\*(AqUnix\*(Aq,  \*(AqDarwin\*(Aq, \*(AqMacOS\*(Aq, \*(AqMacOS X\*(Aq)
\&    OS/2           (\*(AqOS/2\*(Aq)
.Ve
.PP
This is used to write code for styles of operating system.  
See \fIos_flavor_is()\fR for use.
.PP
\fIos_flavor_is\fR
.IX Subsection "os_flavor_is"
.PP
.Vb 2
\&    my $is_this_flavor = $mm\->os_flavor_is($this_flavor);
\&    my $is_this_flavor = $mm\->os_flavor_is(@one_of_these_flavors);
.Ve
.PP
Checks to see if the current operating system is one of the given flavors.
.PP
This is useful for code like:
.PP
.Vb 6
\&    if( $mm\->os_flavor_is(\*(AqUnix\*(Aq) ) {
\&        $out = \`foo 2>&1\`;
\&    }
\&    else {
\&        $out = \`foo\`;
\&    }
.Ve
.PP
\fIcan_load_xs\fR
.IX Subsection "can_load_xs"
.PP
.Vb 1
\&    my $can_load_xs = $self\->can_load_xs;
.Ve
.PP
Returns true if we have the ability to load \s-1XS.\s0
.PP
This is important because miniperl, used to build \s-1XS\s0 modules in the
core, can not load \s-1XS.\s0
.PP
\fIsplit_command\fR
.IX Subsection "split_command"
.PP
.Vb 1
\&    my @cmds = $MM\->split_command($cmd, @args);
.Ve
.PP
Most \s-1OS\s0 have a maximum command length they can execute at once.  Large
modules can easily generate commands well past that limit.  Its
necessary to split long commands up into a series of shorter commands.
.PP
\&\f(CW\*(C`split_command\*(C'\fR will return a series of \f(CW@cmds\fR each processing part of
the args.  Collectively they will process all the arguments.  Each
individual line in \f(CW@cmds\fR will not be longer than the
\&\f(CW$self\fR\->max_exec_len being careful to take into account macro expansion.
.PP
\&\f(CW$cmd\fR should include any switches and repeated initial arguments.
.PP
If no \f(CW@args\fR are given, no \f(CW@cmds\fR will be returned.
.PP
Pairs of arguments will always be preserved in a single command, this
is a heuristic for things like pm_to_blib and pod2man which work on
pairs of arguments.  This makes things like this safe:
.PP
.Vb 1
\&    $self\->split_command($cmd, %pod2man);
.Ve
.PP
\fIecho\fR
.IX Subsection "echo"
.PP
.Vb 3
\&    my @commands = $MM\->echo($text);
\&    my @commands = $MM\->echo($text, $file);
\&    my @commands = $MM\->echo($text, $file, \e%opts);
.Ve
.PP
Generates a set of \f(CW@commands\fR which print the \f(CW$text\fR to a \f(CW$file\fR.
.PP
If \f(CW$file\fR is not given, output goes to \s-1STDOUT.\s0
.PP
If \f(CW$opts\fR{append} is true the \f(CW$file\fR will be appended to rather than
overwritten.  Default is to overwrite.
.PP
If \f(CW$opts\fR{allow_variables} is true, make variables of the form
\&\f(CW\*(C`$(...)\*(C'\fR will not be escaped.  Other \f(CW\*(C`$\*(C'\fR will.  Default is to escape
all \f(CW\*(C`$\*(C'\fR.
.PP
Example of use:
.PP
.Vb 1
\&    my $make = map "\et$_\en", $MM\->echo($text, $file);
.Ve
.PP
\fIwraplist\fR
.IX Subsection "wraplist"
.PP
.Vb 1
\&  my $args = $mm\->wraplist(@list);
.Ve
.PP
Takes an array of items and turns them into a well-formatted list of
arguments.  In most cases this is simply something like:
.PP
.Vb 3
\&    FOO \e
\&    BAR \e
\&    BAZ
.Ve
.PP
\fImaketext_filter\fR
.IX Subsection "maketext_filter"
.PP
.Vb 1
\&    my $filter_make_text = $mm\->maketext_filter($make_text);
.Ve
.PP
The text of the Makefile is run through this method before writing to
disk.  It allows systems a chance to make portability fixes to the
Makefile.
.PP
By default it does nothing.
.PP
This method is protected and not intended to be called outside of
MakeMaker.
.PP
\fIcd  \fIAbstract\fI\fR
.IX Subsection "cd Abstract"
.PP
.Vb 1
\&  my $subdir_cmd = $MM\->cd($subdir, @cmds);
.Ve
.PP
This will generate a make fragment which runs the \f(CW@cmds\fR in the given
\&\f(CW$dir\fR.  The rough equivalent to this, except cross platform.
.PP
.Vb 1
\&  cd $subdir && $cmd
.Ve
.PP
Currently \f(CW$dir\fR can only go down one level.  \*(L"foo\*(R" is fine.  \*(L"foo/bar\*(R" is
not.  \*(L"../foo\*(R" is right out.
.PP
The resulting \f(CW$subdir_cmd\fR has no leading tab nor trailing newline.  This
makes it easier to embed in a make string.  For example.
.PP
.Vb 6
\&      my $make = sprintf <<\*(AqCODE\*(Aq, $subdir_cmd;
\&  foo :
\&      $(ECHO) what
\&      %s
\&      $(ECHO) mouche
\&  CODE
.Ve
.PP
\fIoneliner  \fIAbstract\fI\fR
.IX Subsection "oneliner Abstract"
.PP
.Vb 2
\&  my $oneliner = $MM\->oneliner($perl_code);
\&  my $oneliner = $MM\->oneliner($perl_code, \e@switches);
.Ve
.PP
This will generate a perl one-liner safe for the particular platform
you're on based on the given \f(CW$perl_code\fR and \f(CW@switches\fR (a \-e is
assumed) suitable for using in a make target.  It will use the proper
shell quoting and escapes.
.PP
$(\s-1PERLRUN\s0) will be used as perl.
.PP
Any newlines in \f(CW$perl_code\fR will be escaped.  Leading and trailing
newlines will be stripped.  Makes this idiom much easier:
.PP
.Vb 4
\&    my $code = $MM\->oneliner(<<\*(AqCODE\*(Aq, [...switches...]);
\&some code here
\&another line here
\&CODE
.Ve
.PP
Usage might be something like:
.PP
.Vb 3
\&    # an echo emulation
\&    $oneliner = $MM\->oneliner(\*(Aqprint "Foo\en"\*(Aq);
\&    $make = \*(Aq$oneliner > somefile\*(Aq;
.Ve
.PP
All dollar signs must be doubled in the \f(CW$perl_code\fR if you expect them
to be interpreted normally, otherwise it will be considered a make
macro.  Also remember to quote make macros else it might be used as a
bareword.  For example:
.PP
.Vb 2
\&    # Assign the value of the $(VERSION_FROM) make macro to $vf.
\&    $oneliner = $MM\->oneliner(\*(Aq$$vf = "$(VERSION_FROM)"\*(Aq);
.Ve
.PP
Its currently very simple and may be expanded sometime in the figure
to include more flexible code and switches.
.PP
\fIquote_literal  \fIAbstract\fI\fR
.IX Subsection "quote_literal Abstract"
.PP
.Vb 2
\&    my $safe_text = $MM\->quote_literal($text);
\&    my $safe_text = $MM\->quote_literal($text, \e%options);
.Ve
.PP
This will quote \f(CW$text\fR so it is interpreted literally in the shell.
.PP
For example, on Unix this would escape any single-quotes in \f(CW$text\fR and
put single-quotes around the whole thing.
.PP
If \f(CW$options\fR{allow_variables} is true it will leave \f(CW\*(Aq$(FOO)\*(Aq\fR make
variables untouched.  If false they will be escaped like any other
\&\f(CW\*(C`$\*(C'\fR.  Defaults to true.
.PP
\fIescape_dollarsigns\fR
.IX Subsection "escape_dollarsigns"
.PP
.Vb 1
\&    my $escaped_text = $MM\->escape_dollarsigns($text);
.Ve
.PP
Escapes stray \f(CW\*(C`$\*(C'\fR so they are not interpreted as make variables.
.PP
It lets by \f(CW\*(C`$(...)\*(C'\fR.
.PP
\fIescape_all_dollarsigns\fR
.IX Subsection "escape_all_dollarsigns"
.PP
.Vb 1
\&    my $escaped_text = $MM\->escape_all_dollarsigns($text);
.Ve
.PP
Escapes all \f(CW\*(C`$\*(C'\fR so they are not interpreted as make variables.
.PP
\fIescape_newlines  \fIAbstract\fI\fR
.IX Subsection "escape_newlines Abstract"
.PP
.Vb 1
\&    my $escaped_text = $MM\->escape_newlines($text);
.Ve
.PP
Shell escapes newlines in \f(CW$text\fR.
.PP
\fImax_exec_len  \fIAbstract\fI\fR
.IX Subsection "max_exec_len Abstract"
.PP
.Vb 1
\&    my $max_exec_len = $MM\->max_exec_len;
.Ve
.PP
Calculates the maximum command size the \s-1OS\s0 can exec.  Effectively,
this is the max size of a shell command line.
.PP
\fImake\fR
.IX Subsection "make"
.PP
.Vb 1
\&    my $make = $MM\->make;
.Ve
.PP
Returns the make variant we're generating the Makefile for.  This attempts
to do some normalization on the information from \f(CW%Config\fR or the user.
.SS "Targets"
.IX Subsection "Targets"
These are methods which produce make targets.
.PP
\fIall_target\fR
.IX Subsection "all_target"
.PP
Generate the default target 'all'.
.PP
\fIblibdirs_target\fR
.IX Subsection "blibdirs_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->blibdirs_target;
.Ve
.PP
Creates the blibdirs target which creates all the directories we use
in blib/.
.PP
The blibdirs.ts target is deprecated.  Depend on blibdirs instead.
.PP
\fIclean (o)\fR
.IX Subsection "clean (o)"
.PP
Defines the clean target.
.PP
\fIclean_subdirs_target\fR
.IX Subsection "clean_subdirs_target"
.PP
.Vb 1
\&  my $make_frag = $MM\->clean_subdirs_target;
.Ve
.PP
Returns the clean_subdirs target.  This is used by the clean target to
call clean on any subdirectories which contain Makefiles.
.PP
\fIdir_target\fR
.IX Subsection "dir_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->dir_target(@directories);
.Ve
.PP
Generates targets to create the specified directories and set its
permission to \s-1PERM_DIR.\s0
.PP
Because depending on a directory to just ensure it exists doesn't work
too well (the modified time changes too often) \fIdir_target()\fR creates a
\&.exists file in the created directory.  It is this you should depend on.
For portability purposes you should use the $(\s-1DIRFILESEP\s0) macro rather
than a '/' to seperate the directory from the file.
.PP
.Vb 1
\&    yourdirectory$(DIRFILESEP).exists
.Ve
.PP
\fIdistdir\fR
.IX Subsection "distdir"
.PP
Defines the scratch directory target that will hold the distribution
before tar-ing (or shar-ing).
.PP
\fIdist_test\fR
.IX Subsection "dist_test"
.PP
Defines a target that produces the distribution in the
scratchdirectory, and runs 'perl Makefile.PL; make ;make test' in that
subdirectory.
.PP
\fIdynamic (o)\fR
.IX Subsection "dynamic (o)"
.PP
Defines the dynamic target.
.PP
\fImakemakerdflt_target\fR
.IX Subsection "makemakerdflt_target"
.PP
.Vb 1
\&  my $make_frag = $mm\->makemakerdflt_target
.Ve
.PP
Returns a make fragment with the makemakerdeflt_target specified.
This target is the first target in the Makefile, is the default target
and simply points off to 'all' just in case any make variant gets
confused or something gets snuck in before the real 'all' target.
.PP
\fImanifypods_target\fR
.IX Subsection "manifypods_target"
.PP
.Vb 1
\&  my $manifypods_target = $self\->manifypods_target;
.Ve
.PP
Generates the manifypods target.  This target generates man pages from
all \s-1POD\s0 files in \s-1MAN1PODS\s0 and \s-1MAN3PODS.\s0
.PP
\fImetafile_target\fR
.IX Subsection "metafile_target"
.PP
.Vb 1
\&    my $target = $mm\->metafile_target;
.Ve
.PP
Generate the metafile target.
.PP
Writes the file \s-1META\s0.yml \s-1YAML\s0 encoded meta-data about the module in
the distdir.  The format follows Module::Build's as closely as
possible.
.PP
\fImetafile_data\fR
.IX Subsection "metafile_data"
.PP
.Vb 1
\&    my @metadata_pairs = $mm\->metafile_data(\e%meta_add, \e%meta_merge);
.Ve
.PP
Returns the data which MakeMaker turns into the \s-1META\s0.yml file.
.PP
Values of \f(CW%meta_add\fR will overwrite any existing metadata in those
keys.  \f(CW%meta_merge\fR will be merged with them.
.PP
\fImetafile_file\fR
.IX Subsection "metafile_file"
.PP
.Vb 1
\&    my $meta_yml = $mm\->metafile_file(@metadata_pairs);
.Ve
.PP
Turns the \f(CW@metadata_pairs\fR into \s-1YAML.\s0
.PP
This method does not implement a complete \s-1YAML\s0 dumper, being limited
to dump a hash with values which are strings, undef's or nested hashes
and arrays of strings. No quoting/escaping is done.
.PP
\fIdistmeta_target\fR
.IX Subsection "distmeta_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->distmeta_target;
.Ve
.PP
Generates the distmeta target to add \s-1META\s0.yml to the \s-1MANIFEST\s0 in the
distdir.
.PP
\fImymeta\fR
.IX Subsection "mymeta"
.PP
.Vb 1
\&    my $mymeta = $mm\->mymeta;
.Ve
.PP
Generate \s-1MYMETA\s0 information as a hash either from an existing \s-1META\s0.yml
or from internal data.
.PP
\fIwrite_mymeta\fR
.IX Subsection "write_mymeta"
.PP
.Vb 1
\&    $self\->write_mymeta( $mymeta );
.Ve
.PP
Write \s-1MYMETA\s0 information to \s-1MYMETA\s0.yml.
.PP
This will probably be refactored into a more generic \s-1YAML\s0 dumping method.
.PP
\fIrealclean (o)\fR
.IX Subsection "realclean (o)"
.PP
Defines the realclean target.
.PP
\fIrealclean_subdirs_target\fR
.IX Subsection "realclean_subdirs_target"
.PP
.Vb 1
\&  my $make_frag = $MM\->realclean_subdirs_target;
.Ve
.PP
Returns the realclean_subdirs target.  This is used by the realclean
target to call realclean on any subdirectories which contain Makefiles.
.PP
\fIsignature_target\fR
.IX Subsection "signature_target"
.PP
.Vb 1
\&    my $target = $mm\->signature_target;
.Ve
.PP
Generate the signature target.
.PP
Writes the file \s-1SIGNATURE\s0 with \*(L"cpansign \-s\*(R".
.PP
\fIdistsignature_target\fR
.IX Subsection "distsignature_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->distsignature_target;
.Ve
.PP
Generates the distsignature target to add \s-1SIGNATURE\s0 to the \s-1MANIFEST\s0 in the
distdir.
.PP
\fIspecial_targets\fR
.IX Subsection "special_targets"
.PP
.Vb 1
\&  my $make_frag = $mm\->special_targets
.Ve
.PP
Returns a make fragment containing any targets which have special
meaning to make.  For example, .SUFFIXES and .PHONY.
.SS "Init methods"
.IX Subsection "Init methods"
Methods which help initialize the MakeMaker object and macros.
.PP
\fIinit_ABSTRACT\fR
.IX Subsection "init_ABSTRACT"
.PP
.Vb 1
\&    $mm\->init_ABSTRACT
.Ve
.PP
\fIinit_INST\fR
.IX Subsection "init_INST"
.PP
.Vb 1
\&    $mm\->init_INST;
.Ve
.PP
Called by init_main.  Sets up all INST_* variables except those related
to \s-1XS\s0 code.  Those are handled in init_xs.
.PP
\fIinit_INSTALL\fR
.IX Subsection "init_INSTALL"
.PP
.Vb 1
\&    $mm\->init_INSTALL;
.Ve
.PP
Called by init_main.  Sets up all INSTALL_* variables (except
\&\s-1INSTALLDIRS\s0) and *PREFIX.
.PP
\fIinit_INSTALL_from_PREFIX\fR
.IX Subsection "init_INSTALL_from_PREFIX"
.PP
.Vb 1
\&  $mm\->init_INSTALL_from_PREFIX;
.Ve
.PP
\fIinit_from_INSTALL_BASE\fR
.IX Subsection "init_from_INSTALL_BASE"
.PP
.Vb 1
\&    $mm\->init_from_INSTALL_BASE
.Ve
.PP
\fIinit_VERSION  \fIAbstract\fI\fR
.IX Subsection "init_VERSION Abstract"
.PP
.Vb 1
\&    $mm\->init_VERSION
.Ve
.PP
Initialize macros representing versions of MakeMaker and other tools
.PP
\&\s-1MAKEMAKER:\s0 path to the MakeMaker module.
.PP
\&\s-1MM_VERSION:\s0 ExtUtils::MakeMaker Version
.PP
\&\s-1MM_REVISION:\s0 ExtUtils::MakeMaker version control revision (for backwards 
             compat)
.PP
\&\s-1VERSION:\s0 version of your module
.PP
\&\s-1VERSION_MACRO:\s0 which macro represents the version (usually '\s-1VERSION\s0')
.PP
\&\s-1VERSION_SYM:\s0 like version but safe for use as an \s-1RCS\s0 revision number
.PP
\&\s-1DEFINE_VERSION: \-D\s0 line to set the module version when compiling
.PP
\&\s-1XS_VERSION:\s0 version in your .xs file.  Defaults to $(\s-1VERSION\s0)
.PP
\&\s-1XS_VERSION_MACRO:\s0 which macro represents the \s-1XS\s0 version.
.PP
\&\s-1XS_DEFINE_VERSION: \-D\s0 line to set the xs version when compiling.
.PP
Called by init_main.
.PP
\fIinit_tools\fR
.IX Subsection "init_tools"
.PP
.Vb 1
\&    $MM\->init_tools();
.Ve
.PP
Initializes the simple macro definitions used by \fItools_other()\fR and
places them in the \f(CW$MM\fR object.  These use conservative cross platform
versions and should be overridden with platform specific versions for
performance.
.PP
Defines at least these macros.
.PP
.Vb 1
\&  Macro             Description
\&
\&  NOOP              Do nothing
\&  NOECHO            Tell make not to display the command itself
\&
\&  SHELL             Program used to run shell commands
\&
\&  ECHO              Print text adding a newline on the end
\&  RM_F              Remove a file 
\&  RM_RF             Remove a directory          
\&  TOUCH             Update a file\*(Aqs timestamp   
\&  TEST_F            Test for a file\*(Aqs existence 
\&  CP                Copy a file                 
\&  MV                Move a file                 
\&  CHMOD             Change permissions on a file
\&  FALSE             Exit with non\-zero
\&  TRUE              Exit with zero
\&
\&  UMASK_NULL        Nullify umask
\&  DEV_NULL          Suppress all command output
.Ve
.PP
\fIinit_others\fR
.IX Subsection "init_others"
.PP
.Vb 1
\&    $MM\->init_others();
.Ve
.PP
Initializes the macro definitions having to do with compiling and
linking used by \fItools_other()\fR and places them in the \f(CW$MM\fR object.
.PP
If there is no description, its the same as the parameter to
\&\fIWriteMakefile()\fR documented in ExtUtils::MakeMaker.
.PP
\fItools_other\fR
.IX Subsection "tools_other"
.PP
.Vb 1
\&    my $make_frag = $MM\->tools_other;
.Ve
.PP
Returns a make fragment containing definitions for the macros \fIinit_others()\fR 
initializes.
.PP
\fIinit_DIRFILESEP  \fIAbstract\fI\fR
.IX Subsection "init_DIRFILESEP Abstract"
.PP
.Vb 2
\&  $MM\->init_DIRFILESEP;
\&  my $dirfilesep = $MM\->{DIRFILESEP};
.Ve
.PP
Initializes the \s-1DIRFILESEP\s0 macro which is the seperator between the
directory and filename in a filepath.  ie. / on Unix, \e on Win32 and
nothing on \s-1VMS.\s0
.PP
For example:
.PP
.Vb 2
\&    # instead of $(INST_ARCHAUTODIR)/extralibs.ld
\&    $(INST_ARCHAUTODIR)$(DIRFILESEP)extralibs.ld
.Ve
.PP
Something of a hack but it prevents a lot of code duplication between
MM_* variants.
.PP
Do not use this as a seperator between directories.  Some operating
systems use different seperators between subdirectories as between
directories and filenames (for example:  VOLUME:[dir1.dir2]file on \s-1VMS\s0).
.PP
\fIinit_linker  \fIAbstract\fI\fR
.IX Subsection "init_linker Abstract"
.PP
.Vb 1
\&    $mm\->init_linker;
.Ve
.PP
Initialize macros which have to do with linking.
.PP
\&\s-1PERL_ARCHIVE:\s0 path to libperl.a equivalent to be linked to dynamic
extensions.
.PP
\&\s-1PERL_ARCHIVE_AFTER:\s0 path to a library which should be put on the
linker command line \fIafter\fR the external libraries to be linked to
dynamic extensions.  This may be needed if the linker is one-pass, and
Perl includes some overrides for C \s-1RTL\s0 functions, such as \fImalloc()\fR.
.PP
\&\s-1EXPORT_LIST:\s0 name of a file that is passed to linker to define symbols
to be exported.
.PP
Some OSes do not need these in which case leave it blank.
.PP
\fIinit_platform\fR
.IX Subsection "init_platform"
.PP
.Vb 1
\&    $mm\->init_platform
.Ve
.PP
Initialize any macros which are for platform specific use only.
.PP
A typical one is the version number of your \s-1OS\s0 specific mocule.
(ie. MM_Unix_VERSION or \s-1MM_VMS_VERSION\s0).
.PP
\fIinit_MAKE\fR
.IX Subsection "init_MAKE"
.PP
.Vb 1
\&    $mm\->init_MAKE
.Ve
.PP
Initialize \s-1MAKE\s0 from either a \s-1MAKE\s0 environment variable or \f(CW$Config\fR{make}.
.SS "Tools"
.IX Subsection "Tools"
A grab bag of methods to generate specific macros and commands.
.PP
\fImanifypods\fR
.IX Subsection "manifypods"
.PP
Defines targets and routines to translate the pods into manpages and
put them into the INST_* directories.
.PP
\fIPOD2MAN_macro\fR
.IX Subsection "POD2MAN_macro"
.PP
.Vb 1
\&  my $pod2man_macro = $self\->POD2MAN_macro
.Ve
.PP
Returns a definition for the \s-1POD2MAN\s0 macro.  This is a program
which emulates the pod2man utility.  You can add more switches to the
command by simply appending them on the macro.
.PP
Typical usage:
.PP
.Vb 1
\&    $(POD2MAN) \-\-section=3 \-\-perm_rw=$(PERM_RW) podfile1 man_page1 ...
.Ve
.PP
\fItest_via_harness\fR
.IX Subsection "test_via_harness"
.PP
.Vb 1
\&  my $command = $mm\->test_via_harness($perl, $tests);
.Ve
.PP
Returns a \f(CW$command\fR line which runs the given set of \f(CW$tests\fR with
Test::Harness and the given \f(CW$perl\fR.
.PP
Used on the t/*.t files.
.PP
\fItest_via_script\fR
.IX Subsection "test_via_script"
.PP
.Vb 1
\&  my $command = $mm\->test_via_script($perl, $script);
.Ve
.PP
Returns a \f(CW$command\fR line which just runs a single test without
Test::Harness.  No checks are done on the results, they're just
printed.
.PP
Used for test.pl, since they don't always follow Test::Harness
formatting.
.PP
\fItool_autosplit\fR
.IX Subsection "tool_autosplit"
.PP
Defines a simple perl call that runs autosplit. May be deprecated by
pm_to_blib soon.
.PP
\fIarch_check\fR
.IX Subsection "arch_check"
.PP
.Vb 4
\&    my $arch_ok = $mm\->arch_check(
\&        $INC{"Config.pm"},
\&        File::Spec\->catfile($Config{archlibexp}, "Config.pm")
\&    );
.Ve
.PP
A sanity check that what Perl thinks the architecture is and what
Config thinks the architecture is are the same.  If they're not it
will return false and show a diagnostic message.
.PP
When building Perl it will always return true, as nothing is installed
yet.
.PP
The interface is a bit odd because this is the result of a
quick refactoring.  Don't rely on it.
.SS "File::Spec wrappers"
.IX Subsection "File::Spec wrappers"
ExtUtils::MM_Any is a subclass of File::Spec.  The methods noted here
override File::Spec.
.PP
\fIcatfile\fR
.IX Subsection "catfile"
.PP
File::Spec <= 0.83 has a bug where the file part of catfile is not
canonicalized.  This override fixes that bug.
.SS "Misc"
.IX Subsection "Misc"
Methods I can't really figure out where they should go yet.
.PP
\fIfind_tests\fR
.IX Subsection "find_tests"
.PP
.Vb 1
\&  my $test = $mm\->find_tests;
.Ve
.PP
Returns a string suitable for feeding to the shell to return all
tests in t/*.t.
.PP
\fIextra_clean_files\fR
.IX Subsection "extra_clean_files"
.PP
.Vb 1
\&    my @files_to_clean = $MM\->extra_clean_files;
.Ve
.PP
Returns a list of \s-1OS\s0 specific files to be removed in the clean target in
addition to the usual set.
.PP
\fIinstallvars\fR
.IX Subsection "installvars"
.PP
.Vb 1
\&    my @installvars = $mm\->installvars;
.Ve
.PP
A list of all the INSTALL* variables without the \s-1INSTALL\s0 prefix.  Useful
for iteration or building related variable sets.
.PP
\fIlibscan\fR
.IX Subsection "libscan"
.PP
.Vb 1
\&  my $wanted = $self\->libscan($path);
.Ve
.PP
Takes a path to a file or dir and returns an empty string if we don't
want to include this file in the library.  Otherwise it returns the
the \f(CW$path\fR unchanged.
.PP
Mainly used to exclude version control administrative directories from
installation.
.PP
\fIplatform_constants\fR
.IX Subsection "platform_constants"
.PP
.Vb 1
\&    my $make_frag = $mm\->platform_constants
.Ve
.PP
Returns a make fragment defining all the macros initialized in
\&\fIinit_platform()\fR rather than put them in \fIconstants()\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> and the denizens of
makemaker@perl.org with code from ExtUtils::MM_Unix and
ExtUtils::MM_Win32.
                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_Any5.16.3pm                     0100644 0001750 0001750 00000066015 12566207433 024631  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_Any 3pm"
.TH ExtUtils::MM_Any 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_Any \- Platform\-agnostic MM methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  FOR INTERNAL USE ONLY!
\&
\&  package ExtUtils::MM_SomeOS;
\&
\&  # Temporarily, you have to subclass both.  Put MM_Any first.
\&  require ExtUtils::MM_Any;
\&  require ExtUtils::MM_Unix;
\&  @ISA = qw(ExtUtils::MM_Any ExtUtils::Unix);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1FOR\s0 \s-1INTERNAL\s0 \s-1USE\s0 \s-1ONLY\s0!\fR
.PP
ExtUtils::MM_Any is a superclass for the ExtUtils::MM_* set of
modules.  It contains methods which are either inherently
cross-platform or are written in a cross-platform manner.
.PP
Subclass off of ExtUtils::MM_Any \fIand\fR ExtUtils::MM_Unix.  This is a
temporary solution.
.PP
\&\fB\s-1THIS\s0 \s-1MAY\s0 \s-1BE\s0 \s-1TEMPORARY\s0!\fR
.SH "METHODS"
.IX Header "METHODS"
Any methods marked \fIAbstract\fR must be implemented by subclasses.
.SS "Cross-platform helper methods"
.IX Subsection "Cross-platform helper methods"
These are methods which help writing cross-platform code.
.PP
\fIos_flavor  \fIAbstract\fI\fR
.IX Subsection "os_flavor  Abstract"
.PP
.Vb 1
\&    my @os_flavor = $mm\->os_flavor;
.Ve
.PP
\&\f(CW@os_flavor\fR is the style of operating system this is, usually
corresponding to the MM_*.pm file we're using.
.PP
The first element of \f(CW@os_flavor\fR is the major family (ie. Unix,
Windows, \s-1VMS\s0, \s-1OS/2\s0, etc...) and the rest are sub families.
.PP
Some examples:
.PP
.Vb 6
\&    Cygwin98       (\*(AqUnix\*(Aq,  \*(AqCygwin\*(Aq, \*(AqCygwin9x\*(Aq)
\&    Windows        (\*(AqWin32\*(Aq)
\&    Win98          (\*(AqWin32\*(Aq, \*(AqWin9x\*(Aq)
\&    Linux          (\*(AqUnix\*(Aq,  \*(AqLinux\*(Aq)
\&    MacOS X        (\*(AqUnix\*(Aq,  \*(AqDarwin\*(Aq, \*(AqMacOS\*(Aq, \*(AqMacOS X\*(Aq)
\&    OS/2           (\*(AqOS/2\*(Aq)
.Ve
.PP
This is used to write code for styles of operating system.  
See \fIos_flavor_is()\fR for use.
.PP
\fIos_flavor_is\fR
.IX Subsection "os_flavor_is"
.PP
.Vb 2
\&    my $is_this_flavor = $mm\->os_flavor_is($this_flavor);
\&    my $is_this_flavor = $mm\->os_flavor_is(@one_of_these_flavors);
.Ve
.PP
Checks to see if the current operating system is one of the given flavors.
.PP
This is useful for code like:
.PP
.Vb 6
\&    if( $mm\->os_flavor_is(\*(AqUnix\*(Aq) ) {
\&        $out = \`foo 2>&1\`;
\&    }
\&    else {
\&        $out = \`foo\`;
\&    }
.Ve
.PP
\fIcan_load_xs\fR
.IX Subsection "can_load_xs"
.PP
.Vb 1
\&    my $can_load_xs = $self\->can_load_xs;
.Ve
.PP
Returns true if we have the ability to load \s-1XS\s0.
.PP
This is important because miniperl, used to build \s-1XS\s0 modules in the
core, can not load \s-1XS\s0.
.PP
\fIsplit_command\fR
.IX Subsection "split_command"
.PP
.Vb 1
\&    my @cmds = $MM\->split_command($cmd, @args);
.Ve
.PP
Most \s-1OS\s0 have a maximum command length they can execute at once.  Large
modules can easily generate commands well past that limit.  Its
necessary to split long commands up into a series of shorter commands.
.PP
\&\f(CW\*(C`split_command\*(C'\fR will return a series of \f(CW@cmds\fR each processing part of
the args.  Collectively they will process all the arguments.  Each
individual line in \f(CW@cmds\fR will not be longer than the
\&\f(CW$self\fR\->max_exec_len being careful to take into account macro expansion.
.PP
\&\f(CW$cmd\fR should include any switches and repeated initial arguments.
.PP
If no \f(CW@args\fR are given, no \f(CW@cmds\fR will be returned.
.PP
Pairs of arguments will always be preserved in a single command, this
is a heuristic for things like pm_to_blib and pod2man which work on
pairs of arguments.  This makes things like this safe:
.PP
.Vb 1
\&    $self\->split_command($cmd, %pod2man);
.Ve
.PP
\fIecho\fR
.IX Subsection "echo"
.PP
.Vb 3
\&    my @commands = $MM\->echo($text);
\&    my @commands = $MM\->echo($text, $file);
\&    my @commands = $MM\->echo($text, $file, \e%opts);
.Ve
.PP
Generates a set of \f(CW@commands\fR which print the \f(CW$text\fR to a \f(CW$file\fR.
.PP
If \f(CW$file\fR is not given, output goes to \s-1STDOUT\s0.
.PP
If \f(CW$opts\fR{append} is true the \f(CW$file\fR will be appended to rather than
overwritten.  Default is to overwrite.
.PP
If \f(CW$opts\fR{allow_variables} is true, make variables of the form
\&\f(CW\*(C`$(...)\*(C'\fR will not be escaped.  Other \f(CW\*(C`$\*(C'\fR will.  Default is to escape
all \f(CW\*(C`$\*(C'\fR.
.PP
Example of use:
.PP
.Vb 1
\&    my $make = map "\et$_\en", $MM\->echo($text, $file);
.Ve
.PP
\fIwraplist\fR
.IX Subsection "wraplist"
.PP
.Vb 1
\&  my $args = $mm\->wraplist(@list);
.Ve
.PP
Takes an array of items and turns them into a well-formatted list of
arguments.  In most cases this is simply something like:
.PP
.Vb 3
\&    FOO \e
\&    BAR \e
\&    BAZ
.Ve
.PP
\fImaketext_filter\fR
.IX Subsection "maketext_filter"
.PP
.Vb 1
\&    my $filter_make_text = $mm\->maketext_filter($make_text);
.Ve
.PP
The text of the Makefile is run through this method before writing to
disk.  It allows systems a chance to make portability fixes to the
Makefile.
.PP
By default it does nothing.
.PP
This method is protected and not intended to be called outside of
MakeMaker.
.PP
\fIcd  \fIAbstract\fI\fR
.IX Subsection "cd  Abstract"
.PP
.Vb 1
\&  my $subdir_cmd = $MM\->cd($subdir, @cmds);
.Ve
.PP
This will generate a make fragment which runs the \f(CW@cmds\fR in the given
\&\f(CW$dir\fR.  The rough equivalent to this, except cross platform.
.PP
.Vb 1
\&  cd $subdir && $cmd
.Ve
.PP
Currently \f(CW$dir\fR can only go down one level.  \*(L"foo\*(R" is fine.  \*(L"foo/bar\*(R" is
not.  \*(L"../foo\*(R" is right out.
.PP
The resulting \f(CW$subdir_cmd\fR has no leading tab nor trailing newline.  This
makes it easier to embed in a make string.  For example.
.PP
.Vb 6
\&      my $make = sprintf <<\*(AqCODE\*(Aq, $subdir_cmd;
\&  foo :
\&      $(ECHO) what
\&      %s
\&      $(ECHO) mouche
\&  CODE
.Ve
.PP
\fIoneliner  \fIAbstract\fI\fR
.IX Subsection "oneliner  Abstract"
.PP
.Vb 2
\&  my $oneliner = $MM\->oneliner($perl_code);
\&  my $oneliner = $MM\->oneliner($perl_code, \e@switches);
.Ve
.PP
This will generate a perl one-liner safe for the particular platform
you're on based on the given \f(CW$perl_code\fR and \f(CW@switches\fR (a \-e is
assumed) suitable for using in a make target.  It will use the proper
shell quoting and escapes.
.PP
$(\s-1PERLRUN\s0) will be used as perl.
.PP
Any newlines in \f(CW$perl_code\fR will be escaped.  Leading and trailing
newlines will be stripped.  Makes this idiom much easier:
.PP
.Vb 4
\&    my $code = $MM\->oneliner(<<\*(AqCODE\*(Aq, [...switches...]);
\&some code here
\&another line here
\&CODE
.Ve
.PP
Usage might be something like:
.PP
.Vb 3
\&    # an echo emulation
\&    $oneliner = $MM\->oneliner(\*(Aqprint "Foo\en"\*(Aq);
\&    $make = \*(Aq$oneliner > somefile\*(Aq;
.Ve
.PP
All dollar signs must be doubled in the \f(CW$perl_code\fR if you expect them
to be interpreted normally, otherwise it will be considered a make
macro.  Also remember to quote make macros else it might be used as a
bareword.  For example:
.PP
.Vb 2
\&    # Assign the value of the $(VERSION_FROM) make macro to $vf.
\&    $oneliner = $MM\->oneliner(\*(Aq$$vf = "$(VERSION_FROM)"\*(Aq);
.Ve
.PP
Its currently very simple and may be expanded sometime in the figure
to include more flexible code and switches.
.PP
\fIquote_literal  \fIAbstract\fI\fR
.IX Subsection "quote_literal  Abstract"
.PP
.Vb 2
\&    my $safe_text = $MM\->quote_literal($text);
\&    my $safe_text = $MM\->quote_literal($text, \e%options);
.Ve
.PP
This will quote \f(CW$text\fR so it is interpreted literally in the shell.
.PP
For example, on Unix this would escape any single-quotes in \f(CW$text\fR and
put single-quotes around the whole thing.
.PP
If \f(CW$options\fR{allow_variables} is true it will leave \f(CW\*(Aq$(FOO)\*(Aq\fR make
variables untouched.  If false they will be escaped like any other
\&\f(CW\*(C`$\*(C'\fR.  Defaults to true.
.PP
\fIescape_dollarsigns\fR
.IX Subsection "escape_dollarsigns"
.PP
.Vb 1
\&    my $escaped_text = $MM\->escape_dollarsigns($text);
.Ve
.PP
Escapes stray \f(CW\*(C`$\*(C'\fR so they are not interpreted as make variables.
.PP
It lets by \f(CW\*(C`$(...)\*(C'\fR.
.PP
\fIescape_all_dollarsigns\fR
.IX Subsection "escape_all_dollarsigns"
.PP
.Vb 1
\&    my $escaped_text = $MM\->escape_all_dollarsigns($text);
.Ve
.PP
Escapes all \f(CW\*(C`$\*(C'\fR so they are not interpreted as make variables.
.PP
\fIescape_newlines  \fIAbstract\fI\fR
.IX Subsection "escape_newlines  Abstract"
.PP
.Vb 1
\&    my $escaped_text = $MM\->escape_newlines($text);
.Ve
.PP
Shell escapes newlines in \f(CW$text\fR.
.PP
\fImax_exec_len  \fIAbstract\fI\fR
.IX Subsection "max_exec_len  Abstract"
.PP
.Vb 1
\&    my $max_exec_len = $MM\->max_exec_len;
.Ve
.PP
Calculates the maximum command size the \s-1OS\s0 can exec.  Effectively,
this is the max size of a shell command line.
.PP
\fImake\fR
.IX Subsection "make"
.PP
.Vb 1
\&    my $make = $MM\->make;
.Ve
.PP
Returns the make variant we're generating the Makefile for.  This attempts
to do some normalization on the information from \f(CW%Config\fR or the user.
.SS "Targets"
.IX Subsection "Targets"
These are methods which produce make targets.
.PP
\fIall_target\fR
.IX Subsection "all_target"
.PP
Generate the default target 'all'.
.PP
\fIblibdirs_target\fR
.IX Subsection "blibdirs_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->blibdirs_target;
.Ve
.PP
Creates the blibdirs target which creates all the directories we use
in blib/.
.PP
The blibdirs.ts target is deprecated.  Depend on blibdirs instead.
.PP
\fIclean (o)\fR
.IX Subsection "clean (o)"
.PP
Defines the clean target.
.PP
\fIclean_subdirs_target\fR
.IX Subsection "clean_subdirs_target"
.PP
.Vb 1
\&  my $make_frag = $MM\->clean_subdirs_target;
.Ve
.PP
Returns the clean_subdirs target.  This is used by the clean target to
call clean on any subdirectories which contain Makefiles.
.PP
\fIdir_target\fR
.IX Subsection "dir_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->dir_target(@directories);
.Ve
.PP
Generates targets to create the specified directories and set its
permission to \s-1PERM_DIR\s0.
.PP
Because depending on a directory to just ensure it exists doesn't work
too well (the modified time changes too often) \fIdir_target()\fR creates a
\&.exists file in the created directory.  It is this you should depend on.
For portability purposes you should use the $(\s-1DIRFILESEP\s0) macro rather
than a '/' to seperate the directory from the file.
.PP
.Vb 1
\&    yourdirectory$(DIRFILESEP).exists
.Ve
.PP
\fIdistdir\fR
.IX Subsection "distdir"
.PP
Defines the scratch directory target that will hold the distribution
before tar-ing (or shar-ing).
.PP
\fIdist_test\fR
.IX Subsection "dist_test"
.PP
Defines a target that produces the distribution in the
scratchdirectory, and runs 'perl Makefile.PL; make ;make test' in that
subdirectory.
.PP
\fIdynamic (o)\fR
.IX Subsection "dynamic (o)"
.PP
Defines the dynamic target.
.PP
\fImakemakerdflt_target\fR
.IX Subsection "makemakerdflt_target"
.PP
.Vb 1
\&  my $make_frag = $mm\->makemakerdflt_target
.Ve
.PP
Returns a make fragment with the makemakerdeflt_target specified.
This target is the first target in the Makefile, is the default target
and simply points off to 'all' just in case any make variant gets
confused or something gets snuck in before the real 'all' target.
.PP
\fImanifypods_target\fR
.IX Subsection "manifypods_target"
.PP
.Vb 1
\&  my $manifypods_target = $self\->manifypods_target;
.Ve
.PP
Generates the manifypods target.  This target generates man pages from
all \s-1POD\s0 files in \s-1MAN1PODS\s0 and \s-1MAN3PODS\s0.
.PP
\fImetafile_target\fR
.IX Subsection "metafile_target"
.PP
.Vb 1
\&    my $target = $mm\->metafile_target;
.Ve
.PP
Generate the metafile target.
.PP
Writes the file \s-1META\s0.yml \s-1YAML\s0 encoded meta-data about the module in
the distdir.  The format follows Module::Build's as closely as
possible.
.PP
\fImetafile_data\fR
.IX Subsection "metafile_data"
.PP
.Vb 1
\&    my @metadata_pairs = $mm\->metafile_data(\e%meta_add, \e%meta_merge);
.Ve
.PP
Returns the data which MakeMaker turns into the \s-1META\s0.yml file.
.PP
Values of \f(CW%meta_add\fR will overwrite any existing metadata in those
keys.  \f(CW%meta_merge\fR will be merged with them.
.PP
\fImetafile_file\fR
.IX Subsection "metafile_file"
.PP
.Vb 1
\&    my $meta_yml = $mm\->metafile_file(@metadata_pairs);
.Ve
.PP
Turns the \f(CW@metadata_pairs\fR into \s-1YAML\s0.
.PP
This method does not implement a complete \s-1YAML\s0 dumper, being limited
to dump a hash with values which are strings, undef's or nested hashes
and arrays of strings. No quoting/escaping is done.
.PP
\fIdistmeta_target\fR
.IX Subsection "distmeta_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->distmeta_target;
.Ve
.PP
Generates the distmeta target to add \s-1META\s0.yml to the \s-1MANIFEST\s0 in the
distdir.
.PP
\fImymeta\fR
.IX Subsection "mymeta"
.PP
.Vb 1
\&    my $mymeta = $mm\->mymeta;
.Ve
.PP
Generate \s-1MYMETA\s0 information as a hash either from an existing \s-1META\s0.yml
or from internal data.
.PP
\fIwrite_mymeta\fR
.IX Subsection "write_mymeta"
.PP
.Vb 1
\&    $self\->write_mymeta( $mymeta );
.Ve
.PP
Write \s-1MYMETA\s0 information to \s-1MYMETA\s0.yml.
.PP
This will probably be refactored into a more generic \s-1YAML\s0 dumping method.
.PP
\fIrealclean (o)\fR
.IX Subsection "realclean (o)"
.PP
Defines the realclean target.
.PP
\fIrealclean_subdirs_target\fR
.IX Subsection "realclean_subdirs_target"
.PP
.Vb 1
\&  my $make_frag = $MM\->realclean_subdirs_target;
.Ve
.PP
Returns the realclean_subdirs target.  This is used by the realclean
target to call realclean on any subdirectories which contain Makefiles.
.PP
\fIsignature_target\fR
.IX Subsection "signature_target"
.PP
.Vb 1
\&    my $target = $mm\->signature_target;
.Ve
.PP
Generate the signature target.
.PP
Writes the file \s-1SIGNATURE\s0 with \*(L"cpansign \-s\*(R".
.PP
\fIdistsignature_target\fR
.IX Subsection "distsignature_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->distsignature_target;
.Ve
.PP
Generates the distsignature target to add \s-1SIGNATURE\s0 to the \s-1MANIFEST\s0 in the
distdir.
.PP
\fIspecial_targets\fR
.IX Subsection "special_targets"
.PP
.Vb 1
\&  my $make_frag = $mm\->special_targets
.Ve
.PP
Returns a make fragment containing any targets which have special
meaning to make.  For example, .SUFFIXES and .PHONY.
.SS "Init methods"
.IX Subsection "Init methods"
Methods which help initialize the MakeMaker object and macros.
.PP
\fIinit_ABSTRACT\fR
.IX Subsection "init_ABSTRACT"
.PP
.Vb 1
\&    $mm\->init_ABSTRACT
.Ve
.PP
\fIinit_INST\fR
.IX Subsection "init_INST"
.PP
.Vb 1
\&    $mm\->init_INST;
.Ve
.PP
Called by init_main.  Sets up all INST_* variables except those related
to \s-1XS\s0 code.  Those are handled in init_xs.
.PP
\fIinit_INSTALL\fR
.IX Subsection "init_INSTALL"
.PP
.Vb 1
\&    $mm\->init_INSTALL;
.Ve
.PP
Called by init_main.  Sets up all INSTALL_* variables (except
\&\s-1INSTALLDIRS\s0) and *PREFIX.
.PP
\fIinit_INSTALL_from_PREFIX\fR
.IX Subsection "init_INSTALL_from_PREFIX"
.PP
.Vb 1
\&  $mm\->init_INSTALL_from_PREFIX;
.Ve
.PP
\fIinit_from_INSTALL_BASE\fR
.IX Subsection "init_from_INSTALL_BASE"
.PP
.Vb 1
\&    $mm\->init_from_INSTALL_BASE
.Ve
.PP
\fIinit_VERSION  \fIAbstract\fI\fR
.IX Subsection "init_VERSION  Abstract"
.PP
.Vb 1
\&    $mm\->init_VERSION
.Ve
.PP
Initialize macros representing versions of MakeMaker and other tools
.PP
\&\s-1MAKEMAKER:\s0 path to the MakeMaker module.
.PP
\&\s-1MM_VERSION:\s0 ExtUtils::MakeMaker Version
.PP
\&\s-1MM_REVISION:\s0 ExtUtils::MakeMaker version control revision (for backwards 
             compat)
.PP
\&\s-1VERSION:\s0 version of your module
.PP
\&\s-1VERSION_MACRO:\s0 which macro represents the version (usually '\s-1VERSION\s0')
.PP
\&\s-1VERSION_SYM:\s0 like version but safe for use as an \s-1RCS\s0 revision number
.PP
\&\s-1DEFINE_VERSION:\s0 \-D line to set the module version when compiling
.PP
\&\s-1XS_VERSION:\s0 version in your .xs file.  Defaults to $(\s-1VERSION\s0)
.PP
\&\s-1XS_VERSION_MACRO:\s0 which macro represents the \s-1XS\s0 version.
.PP
\&\s-1XS_DEFINE_VERSION:\s0 \-D line to set the xs version when compiling.
.PP
Called by init_main.
.PP
\fIinit_tools\fR
.IX Subsection "init_tools"
.PP
.Vb 1
\&    $MM\->init_tools();
.Ve
.PP
Initializes the simple macro definitions used by \fItools_other()\fR and
places them in the \f(CW$MM\fR object.  These use conservative cross platform
versions and should be overridden with platform specific versions for
performance.
.PP
Defines at least these macros.
.PP
.Vb 1
\&  Macro             Description
\&
\&  NOOP              Do nothing
\&  NOECHO            Tell make not to display the command itself
\&
\&  SHELL             Program used to run shell commands
\&
\&  ECHO              Print text adding a newline on the end
\&  RM_F              Remove a file 
\&  RM_RF             Remove a directory          
\&  TOUCH             Update a file\*(Aqs timestamp   
\&  TEST_F            Test for a file\*(Aqs existence 
\&  CP                Copy a file                 
\&  MV                Move a file                 
\&  CHMOD             Change permissions on a file
\&  FALSE             Exit with non\-zero
\&  TRUE              Exit with zero
\&
\&  UMASK_NULL        Nullify umask
\&  DEV_NULL          Suppress all command output
.Ve
.PP
\fIinit_others\fR
.IX Subsection "init_others"
.PP
.Vb 1
\&    $MM\->init_others();
.Ve
.PP
Initializes the macro definitions having to do with compiling and
linking used by \fItools_other()\fR and places them in the \f(CW$MM\fR object.
.PP
If there is no description, its the same as the parameter to
\&\fIWriteMakefile()\fR documented in ExtUtils::MakeMaker.
.PP
\fItools_other\fR
.IX Subsection "tools_other"
.PP
.Vb 1
\&    my $make_frag = $MM\->tools_other;
.Ve
.PP
Returns a make fragment containing definitions for the macros \fIinit_others()\fR 
initializes.
.PP
\fIinit_DIRFILESEP  \fIAbstract\fI\fR
.IX Subsection "init_DIRFILESEP  Abstract"
.PP
.Vb 2
\&  $MM\->init_DIRFILESEP;
\&  my $dirfilesep = $MM\->{DIRFILESEP};
.Ve
.PP
Initializes the \s-1DIRFILESEP\s0 macro which is the seperator between the
directory and filename in a filepath.  ie. / on Unix, \e on Win32 and
nothing on \s-1VMS\s0.
.PP
For example:
.PP
.Vb 2
\&    # instead of $(INST_ARCHAUTODIR)/extralibs.ld
\&    $(INST_ARCHAUTODIR)$(DIRFILESEP)extralibs.ld
.Ve
.PP
Something of a hack but it prevents a lot of code duplication between
MM_* variants.
.PP
Do not use this as a seperator between directories.  Some operating
systems use different seperators between subdirectories as between
directories and filenames (for example:  VOLUME:[dir1.dir2]file on \s-1VMS\s0).
.PP
\fIinit_linker  \fIAbstract\fI\fR
.IX Subsection "init_linker  Abstract"
.PP
.Vb 1
\&    $mm\->init_linker;
.Ve
.PP
Initialize macros which have to do with linking.
.PP
\&\s-1PERL_ARCHIVE:\s0 path to libperl.a equivalent to be linked to dynamic
extensions.
.PP
\&\s-1PERL_ARCHIVE_AFTER:\s0 path to a library which should be put on the
linker command line \fIafter\fR the external libraries to be linked to
dynamic extensions.  This may be needed if the linker is one-pass, and
Perl includes some overrides for C \s-1RTL\s0 functions, such as \fImalloc()\fR.
.PP
\&\s-1EXPORT_LIST:\s0 name of a file that is passed to linker to define symbols
to be exported.
.PP
Some OSes do not need these in which case leave it blank.
.PP
\fIinit_platform\fR
.IX Subsection "init_platform"
.PP
.Vb 1
\&    $mm\->init_platform
.Ve
.PP
Initialize any macros which are for platform specific use only.
.PP
A typical one is the version number of your \s-1OS\s0 specific mocule.
(ie. MM_Unix_VERSION or \s-1MM_VMS_VERSION\s0).
.PP
\fIinit_MAKE\fR
.IX Subsection "init_MAKE"
.PP
.Vb 1
\&    $mm\->init_MAKE
.Ve
.PP
Initialize \s-1MAKE\s0 from either a \s-1MAKE\s0 environment variable or \f(CW$Config\fR{make}.
.SS "Tools"
.IX Subsection "Tools"
A grab bag of methods to generate specific macros and commands.
.PP
\fImanifypods\fR
.IX Subsection "manifypods"
.PP
Defines targets and routines to translate the pods into manpages and
put them into the INST_* directories.
.PP
\fIPOD2MAN_macro\fR
.IX Subsection "POD2MAN_macro"
.PP
.Vb 1
\&  my $pod2man_macro = $self\->POD2MAN_macro
.Ve
.PP
Returns a definition for the \s-1POD2MAN\s0 macro.  This is a program
which emulates the pod2man utility.  You can add more switches to the
command by simply appending them on the macro.
.PP
Typical usage:
.PP
.Vb 1
\&    $(POD2MAN) \-\-section=3 \-\-perm_rw=$(PERM_RW) podfile1 man_page1 ...
.Ve
.PP
\fItest_via_harness\fR
.IX Subsection "test_via_harness"
.PP
.Vb 1
\&  my $command = $mm\->test_via_harness($perl, $tests);
.Ve
.PP
Returns a \f(CW$command\fR line which runs the given set of \f(CW$tests\fR with
Test::Harness and the given \f(CW$perl\fR.
.PP
Used on the t/*.t files.
.PP
\fItest_via_script\fR
.IX Subsection "test_via_script"
.PP
.Vb 1
\&  my $command = $mm\->test_via_script($perl, $script);
.Ve
.PP
Returns a \f(CW$command\fR line which just runs a single test without
Test::Harness.  No checks are done on the results, they're just
printed.
.PP
Used for test.pl, since they don't always follow Test::Harness
formatting.
.PP
\fItool_autosplit\fR
.IX Subsection "tool_autosplit"
.PP
Defines a simple perl call that runs autosplit. May be deprecated by
pm_to_blib soon.
.PP
\fIarch_check\fR
.IX Subsection "arch_check"
.PP
.Vb 4
\&    my $arch_ok = $mm\->arch_check(
\&        $INC{"Config.pm"},
\&        File::Spec\->catfile($Config{archlibexp}, "Config.pm")
\&    );
.Ve
.PP
A sanity check that what Perl thinks the architecture is and what
Config thinks the architecture is are the same.  If they're not it
will return false and show a diagnostic message.
.PP
When building Perl it will always return true, as nothing is installed
yet.
.PP
The interface is a bit odd because this is the result of a
quick refactoring.  Don't rely on it.
.SS "File::Spec wrappers"
.IX Subsection "File::Spec wrappers"
ExtUtils::MM_Any is a subclass of File::Spec.  The methods noted here
override File::Spec.
.PP
\fIcatfile\fR
.IX Subsection "catfile"
.PP
File::Spec <= 0.83 has a bug where the file part of catfile is not
canonicalized.  This override fixes that bug.
.SS "Misc"
.IX Subsection "Misc"
Methods I can't really figure out where they should go yet.
.PP
\fIfind_tests\fR
.IX Subsection "find_tests"
.PP
.Vb 1
\&  my $test = $mm\->find_tests;
.Ve
.PP
Returns a string suitable for feeding to the shell to return all
tests in t/*.t.
.PP
\fIextra_clean_files\fR
.IX Subsection "extra_clean_files"
.PP
.Vb 1
\&    my @files_to_clean = $MM\->extra_clean_files;
.Ve
.PP
Returns a list of \s-1OS\s0 specific files to be removed in the clean target in
addition to the usual set.
.PP
\fIinstallvars\fR
.IX Subsection "installvars"
.PP
.Vb 1
\&    my @installvars = $mm\->installvars;
.Ve
.PP
A list of all the INSTALL* variables without the \s-1INSTALL\s0 prefix.  Useful
for iteration or building related variable sets.
.PP
\fIlibscan\fR
.IX Subsection "libscan"
.PP
.Vb 1
\&  my $wanted = $self\->libscan($path);
.Ve
.PP
Takes a path to a file or dir and returns an empty string if we don't
want to include this file in the library.  Otherwise it returns the
the \f(CW$path\fR unchanged.
.PP
Mainly used to exclude version control administrative directories from
installation.
.PP
\fIplatform_constants\fR
.IX Subsection "platform_constants"
.PP
.Vb 1
\&    my $make_frag = $mm\->platform_constants
.Ve
.PP
Returns a make fragment defining all the macros initialized in
\&\fIinit_platform()\fR rather than put them in \fIconstants()\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> and the denizens of
makemaker@perl.org with code from ExtUtils::MM_Unix and
ExtUtils::MM_Win32.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_Any5.18.3pm                     0100644 0001750 0001750 00000066244 12566207454 024642  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_Any 3pm"
.TH ExtUtils::MM_Any 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_Any \- Platform\-agnostic MM methods
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  FOR INTERNAL USE ONLY!
\&
\&  package ExtUtils::MM_SomeOS;
\&
\&  # Temporarily, you have to subclass both.  Put MM_Any first.
\&  require ExtUtils::MM_Any;
\&  require ExtUtils::MM_Unix;
\&  @ISA = qw(ExtUtils::MM_Any ExtUtils::Unix);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1FOR INTERNAL USE ONLY\s0!\fR
.PP
ExtUtils::MM_Any is a superclass for the ExtUtils::MM_* set of
modules.  It contains methods which are either inherently
cross-platform or are written in a cross-platform manner.
.PP
Subclass off of ExtUtils::MM_Any \fIand\fR ExtUtils::MM_Unix.  This is a
temporary solution.
.PP
\&\fB\s-1THIS MAY BE TEMPORARY\s0!\fR
.SH "METHODS"
.IX Header "METHODS"
Any methods marked \fIAbstract\fR must be implemented by subclasses.
.SS "Cross-platform helper methods"
.IX Subsection "Cross-platform helper methods"
These are methods which help writing cross-platform code.
.PP
\fIos_flavor  \fIAbstract\fI\fR
.IX Subsection "os_flavor Abstract"
.PP
.Vb 1
\&    my @os_flavor = $mm\->os_flavor;
.Ve
.PP
\&\f(CW@os_flavor\fR is the style of operating system this is, usually
corresponding to the MM_*.pm file we're using.
.PP
The first element of \f(CW@os_flavor\fR is the major family (ie. Unix,
Windows, \s-1VMS, OS/2,\s0 etc...) and the rest are sub families.
.PP
Some examples:
.PP
.Vb 6
\&    Cygwin98       (\*(AqUnix\*(Aq,  \*(AqCygwin\*(Aq, \*(AqCygwin9x\*(Aq)
\&    Windows        (\*(AqWin32\*(Aq)
\&    Win98          (\*(AqWin32\*(Aq, \*(AqWin9x\*(Aq)
\&    Linux          (\*(AqUnix\*(Aq,  \*(AqLinux\*(Aq)
\&    MacOS X        (\*(AqUnix\*(Aq,  \*(AqDarwin\*(Aq, \*(AqMacOS\*(Aq, \*(AqMacOS X\*(Aq)
\&    OS/2           (\*(AqOS/2\*(Aq)
.Ve
.PP
This is used to write code for styles of operating system.  
See \fIos_flavor_is()\fR for use.
.PP
\fIos_flavor_is\fR
.IX Subsection "os_flavor_is"
.PP
.Vb 2
\&    my $is_this_flavor = $mm\->os_flavor_is($this_flavor);
\&    my $is_this_flavor = $mm\->os_flavor_is(@one_of_these_flavors);
.Ve
.PP
Checks to see if the current operating system is one of the given flavors.
.PP
This is useful for code like:
.PP
.Vb 6
\&    if( $mm\->os_flavor_is(\*(AqUnix\*(Aq) ) {
\&        $out = \`foo 2>&1\`;
\&    }
\&    else {
\&        $out = \`foo\`;
\&    }
.Ve
.PP
\fIcan_load_xs\fR
.IX Subsection "can_load_xs"
.PP
.Vb 1
\&    my $can_load_xs = $self\->can_load_xs;
.Ve
.PP
Returns true if we have the ability to load \s-1XS.\s0
.PP
This is important because miniperl, used to build \s-1XS\s0 modules in the
core, can not load \s-1XS.\s0
.PP
\fIsplit_command\fR
.IX Subsection "split_command"
.PP
.Vb 1
\&    my @cmds = $MM\->split_command($cmd, @args);
.Ve
.PP
Most \s-1OS\s0 have a maximum command length they can execute at once.  Large
modules can easily generate commands well past that limit.  Its
necessary to split long commands up into a series of shorter commands.
.PP
\&\f(CW\*(C`split_command\*(C'\fR will return a series of \f(CW@cmds\fR each processing part of
the args.  Collectively they will process all the arguments.  Each
individual line in \f(CW@cmds\fR will not be longer than the
\&\f(CW$self\fR\->max_exec_len being careful to take into account macro expansion.
.PP
\&\f(CW$cmd\fR should include any switches and repeated initial arguments.
.PP
If no \f(CW@args\fR are given, no \f(CW@cmds\fR will be returned.
.PP
Pairs of arguments will always be preserved in a single command, this
is a heuristic for things like pm_to_blib and pod2man which work on
pairs of arguments.  This makes things like this safe:
.PP
.Vb 1
\&    $self\->split_command($cmd, %pod2man);
.Ve
.PP
\fIecho\fR
.IX Subsection "echo"
.PP
.Vb 3
\&    my @commands = $MM\->echo($text);
\&    my @commands = $MM\->echo($text, $file);
\&    my @commands = $MM\->echo($text, $file, \e%opts);
.Ve
.PP
Generates a set of \f(CW@commands\fR which print the \f(CW$text\fR to a \f(CW$file\fR.
.PP
If \f(CW$file\fR is not given, output goes to \s-1STDOUT.\s0
.PP
If \f(CW$opts\fR{append} is true the \f(CW$file\fR will be appended to rather than
overwritten.  Default is to overwrite.
.PP
If \f(CW$opts\fR{allow_variables} is true, make variables of the form
\&\f(CW\*(C`$(...)\*(C'\fR will not be escaped.  Other \f(CW\*(C`$\*(C'\fR will.  Default is to escape
all \f(CW\*(C`$\*(C'\fR.
.PP
Example of use:
.PP
.Vb 1
\&    my $make = map "\et$_\en", $MM\->echo($text, $file);
.Ve
.PP
\fIwraplist\fR
.IX Subsection "wraplist"
.PP
.Vb 1
\&  my $args = $mm\->wraplist(@list);
.Ve
.PP
Takes an array of items and turns them into a well-formatted list of
arguments.  In most cases this is simply something like:
.PP
.Vb 3
\&    FOO \e
\&    BAR \e
\&    BAZ
.Ve
.PP
\fImaketext_filter\fR
.IX Subsection "maketext_filter"
.PP
.Vb 1
\&    my $filter_make_text = $mm\->maketext_filter($make_text);
.Ve
.PP
The text of the Makefile is run through this method before writing to
disk.  It allows systems a chance to make portability fixes to the
Makefile.
.PP
By default it does nothing.
.PP
This method is protected and not intended to be called outside of
MakeMaker.
.PP
\fIcd  \fIAbstract\fI\fR
.IX Subsection "cd Abstract"
.PP
.Vb 1
\&  my $subdir_cmd = $MM\->cd($subdir, @cmds);
.Ve
.PP
This will generate a make fragment which runs the \f(CW@cmds\fR in the given
\&\f(CW$dir\fR.  The rough equivalent to this, except cross platform.
.PP
.Vb 1
\&  cd $subdir && $cmd
.Ve
.PP
Currently \f(CW$dir\fR can only go down one level.  \*(L"foo\*(R" is fine.  \*(L"foo/bar\*(R" is
not.  \*(L"../foo\*(R" is right out.
.PP
The resulting \f(CW$subdir_cmd\fR has no leading tab nor trailing newline.  This
makes it easier to embed in a make string.  For example.
.PP
.Vb 6
\&      my $make = sprintf <<\*(AqCODE\*(Aq, $subdir_cmd;
\&  foo :
\&      $(ECHO) what
\&      %s
\&      $(ECHO) mouche
\&  CODE
.Ve
.PP
\fIoneliner  \fIAbstract\fI\fR
.IX Subsection "oneliner Abstract"
.PP
.Vb 2
\&  my $oneliner = $MM\->oneliner($perl_code);
\&  my $oneliner = $MM\->oneliner($perl_code, \e@switches);
.Ve
.PP
This will generate a perl one-liner safe for the particular platform
you're on based on the given \f(CW$perl_code\fR and \f(CW@switches\fR (a \-e is
assumed) suitable for using in a make target.  It will use the proper
shell quoting and escapes.
.PP
$(\s-1PERLRUN\s0) will be used as perl.
.PP
Any newlines in \f(CW$perl_code\fR will be escaped.  Leading and trailing
newlines will be stripped.  Makes this idiom much easier:
.PP
.Vb 4
\&    my $code = $MM\->oneliner(<<\*(AqCODE\*(Aq, [...switches...]);
\&some code here
\&another line here
\&CODE
.Ve
.PP
Usage might be something like:
.PP
.Vb 3
\&    # an echo emulation
\&    $oneliner = $MM\->oneliner(\*(Aqprint "Foo\en"\*(Aq);
\&    $make = \*(Aq$oneliner > somefile\*(Aq;
.Ve
.PP
All dollar signs must be doubled in the \f(CW$perl_code\fR if you expect them
to be interpreted normally, otherwise it will be considered a make
macro.  Also remember to quote make macros else it might be used as a
bareword.  For example:
.PP
.Vb 2
\&    # Assign the value of the $(VERSION_FROM) make macro to $vf.
\&    $oneliner = $MM\->oneliner(\*(Aq$$vf = "$(VERSION_FROM)"\*(Aq);
.Ve
.PP
Its currently very simple and may be expanded sometime in the figure
to include more flexible code and switches.
.PP
\fIquote_literal  \fIAbstract\fI\fR
.IX Subsection "quote_literal Abstract"
.PP
.Vb 2
\&    my $safe_text = $MM\->quote_literal($text);
\&    my $safe_text = $MM\->quote_literal($text, \e%options);
.Ve
.PP
This will quote \f(CW$text\fR so it is interpreted literally in the shell.
.PP
For example, on Unix this would escape any single-quotes in \f(CW$text\fR and
put single-quotes around the whole thing.
.PP
If \f(CW$options\fR{allow_variables} is true it will leave \f(CW\*(Aq$(FOO)\*(Aq\fR make
variables untouched.  If false they will be escaped like any other
\&\f(CW\*(C`$\*(C'\fR.  Defaults to true.
.PP
\fIescape_dollarsigns\fR
.IX Subsection "escape_dollarsigns"
.PP
.Vb 1
\&    my $escaped_text = $MM\->escape_dollarsigns($text);
.Ve
.PP
Escapes stray \f(CW\*(C`$\*(C'\fR so they are not interpreted as make variables.
.PP
It lets by \f(CW\*(C`$(...)\*(C'\fR.
.PP
\fIescape_all_dollarsigns\fR
.IX Subsection "escape_all_dollarsigns"
.PP
.Vb 1
\&    my $escaped_text = $MM\->escape_all_dollarsigns($text);
.Ve
.PP
Escapes all \f(CW\*(C`$\*(C'\fR so they are not interpreted as make variables.
.PP
\fIescape_newlines  \fIAbstract\fI\fR
.IX Subsection "escape_newlines Abstract"
.PP
.Vb 1
\&    my $escaped_text = $MM\->escape_newlines($text);
.Ve
.PP
Shell escapes newlines in \f(CW$text\fR.
.PP
\fImax_exec_len  \fIAbstract\fI\fR
.IX Subsection "max_exec_len Abstract"
.PP
.Vb 1
\&    my $max_exec_len = $MM\->max_exec_len;
.Ve
.PP
Calculates the maximum command size the \s-1OS\s0 can exec.  Effectively,
this is the max size of a shell command line.
.PP
\fImake\fR
.IX Subsection "make"
.PP
.Vb 1
\&    my $make = $MM\->make;
.Ve
.PP
Returns the make variant we're generating the Makefile for.  This attempts
to do some normalization on the information from \f(CW%Config\fR or the user.
.SS "Targets"
.IX Subsection "Targets"
These are methods which produce make targets.
.PP
\fIall_target\fR
.IX Subsection "all_target"
.PP
Generate the default target 'all'.
.PP
\fIblibdirs_target\fR
.IX Subsection "blibdirs_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->blibdirs_target;
.Ve
.PP
Creates the blibdirs target which creates all the directories we use
in blib/.
.PP
The blibdirs.ts target is deprecated.  Depend on blibdirs instead.
.PP
\fIclean (o)\fR
.IX Subsection "clean (o)"
.PP
Defines the clean target.
.PP
\fIclean_subdirs_target\fR
.IX Subsection "clean_subdirs_target"
.PP
.Vb 1
\&  my $make_frag = $MM\->clean_subdirs_target;
.Ve
.PP
Returns the clean_subdirs target.  This is used by the clean target to
call clean on any subdirectories which contain Makefiles.
.PP
\fIdir_target\fR
.IX Subsection "dir_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->dir_target(@directories);
.Ve
.PP
Generates targets to create the specified directories and set its
permission to \s-1PERM_DIR.\s0
.PP
Because depending on a directory to just ensure it exists doesn't work
too well (the modified time changes too often) \fIdir_target()\fR creates a
\&.exists file in the created directory.  It is this you should depend on.
For portability purposes you should use the $(\s-1DIRFILESEP\s0) macro rather
than a '/' to seperate the directory from the file.
.PP
.Vb 1
\&    yourdirectory$(DIRFILESEP).exists
.Ve
.PP
\fIdistdir\fR
.IX Subsection "distdir"
.PP
Defines the scratch directory target that will hold the distribution
before tar-ing (or shar-ing).
.PP
\fIdist_test\fR
.IX Subsection "dist_test"
.PP
Defines a target that produces the distribution in the
scratchdirectory, and runs 'perl Makefile.PL; make ;make test' in that
subdirectory.
.PP
\fIdynamic (o)\fR
.IX Subsection "dynamic (o)"
.PP
Defines the dynamic target.
.PP
\fImakemakerdflt_target\fR
.IX Subsection "makemakerdflt_target"
.PP
.Vb 1
\&  my $make_frag = $mm\->makemakerdflt_target
.Ve
.PP
Returns a make fragment with the makemakerdeflt_target specified.
This target is the first target in the Makefile, is the default target
and simply points off to 'all' just in case any make variant gets
confused or something gets snuck in before the real 'all' target.
.PP
\fImanifypods_target\fR
.IX Subsection "manifypods_target"
.PP
.Vb 1
\&  my $manifypods_target = $self\->manifypods_target;
.Ve
.PP
Generates the manifypods target.  This target generates man pages from
all \s-1POD\s0 files in \s-1MAN1PODS\s0 and \s-1MAN3PODS.\s0
.PP
\fImetafile_target\fR
.IX Subsection "metafile_target"
.PP
.Vb 1
\&    my $target = $mm\->metafile_target;
.Ve
.PP
Generate the metafile target.
.PP
Writes the file \s-1META\s0.yml \s-1YAML\s0 encoded meta-data about the module in
the distdir.  The format follows Module::Build's as closely as
possible.
.PP
\fImetafile_data\fR
.IX Subsection "metafile_data"
.PP
.Vb 1
\&    my @metadata_pairs = $mm\->metafile_data(\e%meta_add, \e%meta_merge);
.Ve
.PP
Returns the data which MakeMaker turns into the \s-1META\s0.yml file.
.PP
Values of \f(CW%meta_add\fR will overwrite any existing metadata in those
keys.  \f(CW%meta_merge\fR will be merged with them.
.PP
\fImetafile_file\fR
.IX Subsection "metafile_file"
.PP
.Vb 1
\&    my $meta_yml = $mm\->metafile_file(@metadata_pairs);
.Ve
.PP
Turns the \f(CW@metadata_pairs\fR into \s-1YAML.\s0
.PP
This method does not implement a complete \s-1YAML\s0 dumper, being limited
to dump a hash with values which are strings, undef's or nested hashes
and arrays of strings. No quoting/escaping is done.
.PP
\fIdistmeta_target\fR
.IX Subsection "distmeta_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->distmeta_target;
.Ve
.PP
Generates the distmeta target to add \s-1META\s0.yml to the \s-1MANIFEST\s0 in the
distdir.
.PP
\fImymeta\fR
.IX Subsection "mymeta"
.PP
.Vb 1
\&    my $mymeta = $mm\->mymeta;
.Ve
.PP
Generate \s-1MYMETA\s0 information as a hash either from an existing \s-1META\s0.yml
or from internal data.
.PP
\fIwrite_mymeta\fR
.IX Subsection "write_mymeta"
.PP
.Vb 1
\&    $self\->write_mymeta( $mymeta );
.Ve
.PP
Write \s-1MYMETA\s0 information to \s-1MYMETA\s0.yml.
.PP
This will probably be refactored into a more generic \s-1YAML\s0 dumping method.
.PP
\fIrealclean (o)\fR
.IX Subsection "realclean (o)"
.PP
Defines the realclean target.
.PP
\fIrealclean_subdirs_target\fR
.IX Subsection "realclean_subdirs_target"
.PP
.Vb 1
\&  my $make_frag = $MM\->realclean_subdirs_target;
.Ve
.PP
Returns the realclean_subdirs target.  This is used by the realclean
target to call realclean on any subdirectories which contain Makefiles.
.PP
\fIsignature_target\fR
.IX Subsection "signature_target"
.PP
.Vb 1
\&    my $target = $mm\->signature_target;
.Ve
.PP
Generate the signature target.
.PP
Writes the file \s-1SIGNATURE\s0 with \*(L"cpansign \-s\*(R".
.PP
\fIdistsignature_target\fR
.IX Subsection "distsignature_target"
.PP
.Vb 1
\&    my $make_frag = $mm\->distsignature_target;
.Ve
.PP
Generates the distsignature target to add \s-1SIGNATURE\s0 to the \s-1MANIFEST\s0 in the
distdir.
.PP
\fIspecial_targets\fR
.IX Subsection "special_targets"
.PP
.Vb 1
\&  my $make_frag = $mm\->special_targets
.Ve
.PP
Returns a make fragment containing any targets which have special
meaning to make.  For example, .SUFFIXES and .PHONY.
.SS "Init methods"
.IX Subsection "Init methods"
Methods which help initialize the MakeMaker object and macros.
.PP
\fIinit_ABSTRACT\fR
.IX Subsection "init_ABSTRACT"
.PP
.Vb 1
\&    $mm\->init_ABSTRACT
.Ve
.PP
\fIinit_INST\fR
.IX Subsection "init_INST"
.PP
.Vb 1
\&    $mm\->init_INST;
.Ve
.PP
Called by init_main.  Sets up all INST_* variables except those related
to \s-1XS\s0 code.  Those are handled in init_xs.
.PP
\fIinit_INSTALL\fR
.IX Subsection "init_INSTALL"
.PP
.Vb 1
\&    $mm\->init_INSTALL;
.Ve
.PP
Called by init_main.  Sets up all INSTALL_* variables (except
\&\s-1INSTALLDIRS\s0) and *PREFIX.
.PP
\fIinit_INSTALL_from_PREFIX\fR
.IX Subsection "init_INSTALL_from_PREFIX"
.PP
.Vb 1
\&  $mm\->init_INSTALL_from_PREFIX;
.Ve
.PP
\fIinit_from_INSTALL_BASE\fR
.IX Subsection "init_from_INSTALL_BASE"
.PP
.Vb 1
\&    $mm\->init_from_INSTALL_BASE
.Ve
.PP
\fIinit_VERSION  \fIAbstract\fI\fR
.IX Subsection "init_VERSION Abstract"
.PP
.Vb 1
\&    $mm\->init_VERSION
.Ve
.PP
Initialize macros representing versions of MakeMaker and other tools
.PP
\&\s-1MAKEMAKER:\s0 path to the MakeMaker module.
.PP
\&\s-1MM_VERSION:\s0 ExtUtils::MakeMaker Version
.PP
\&\s-1MM_REVISION:\s0 ExtUtils::MakeMaker version control revision (for backwards 
             compat)
.PP
\&\s-1VERSION:\s0 version of your module
.PP
\&\s-1VERSION_MACRO:\s0 which macro represents the version (usually '\s-1VERSION\s0')
.PP
\&\s-1VERSION_SYM:\s0 like version but safe for use as an \s-1RCS\s0 revision number
.PP
\&\s-1DEFINE_VERSION: \-D\s0 line to set the module version when compiling
.PP
\&\s-1XS_VERSION:\s0 version in your .xs file.  Defaults to $(\s-1VERSION\s0)
.PP
\&\s-1XS_VERSION_MACRO:\s0 which macro represents the \s-1XS\s0 version.
.PP
\&\s-1XS_DEFINE_VERSION: \-D\s0 line to set the xs version when compiling.
.PP
Called by init_main.
.PP
\fIinit_tools\fR
.IX Subsection "init_tools"
.PP
.Vb 1
\&    $MM\->init_tools();
.Ve
.PP
Initializes the simple macro definitions used by \fItools_other()\fR and
places them in the \f(CW$MM\fR object.  These use conservative cross platform
versions and should be overridden with platform specific versions for
performance.
.PP
Defines at least these macros.
.PP
.Vb 1
\&  Macro             Description
\&
\&  NOOP              Do nothing
\&  NOECHO            Tell make not to display the command itself
\&
\&  SHELL             Program used to run shell commands
\&
\&  ECHO              Print text adding a newline on the end
\&  RM_F              Remove a file 
\&  RM_RF             Remove a directory          
\&  TOUCH             Update a file\*(Aqs timestamp   
\&  TEST_F            Test for a file\*(Aqs existence 
\&  CP                Copy a file                 
\&  MV                Move a file                 
\&  CHMOD             Change permissions on a file
\&  FALSE             Exit with non\-zero
\&  TRUE              Exit with zero
\&
\&  UMASK_NULL        Nullify umask
\&  DEV_NULL          Suppress all command output
.Ve
.PP
\fIinit_others\fR
.IX Subsection "init_others"
.PP
.Vb 1
\&    $MM\->init_others();
.Ve
.PP
Initializes the macro definitions having to do with compiling and
linking used by \fItools_other()\fR and places them in the \f(CW$MM\fR object.
.PP
If there is no description, its the same as the parameter to
\&\fIWriteMakefile()\fR documented in ExtUtils::MakeMaker.
.PP
\fItools_other\fR
.IX Subsection "tools_other"
.PP
.Vb 1
\&    my $make_frag = $MM\->tools_other;
.Ve
.PP
Returns a make fragment containing definitions for the macros \fIinit_others()\fR 
initializes.
.PP
\fIinit_DIRFILESEP  \fIAbstract\fI\fR
.IX Subsection "init_DIRFILESEP Abstract"
.PP
.Vb 2
\&  $MM\->init_DIRFILESEP;
\&  my $dirfilesep = $MM\->{DIRFILESEP};
.Ve
.PP
Initializes the \s-1DIRFILESEP\s0 macro which is the seperator between the
directory and filename in a filepath.  ie. / on Unix, \e on Win32 and
nothing on \s-1VMS.\s0
.PP
For example:
.PP
.Vb 2
\&    # instead of $(INST_ARCHAUTODIR)/extralibs.ld
\&    $(INST_ARCHAUTODIR)$(DIRFILESEP)extralibs.ld
.Ve
.PP
Something of a hack but it prevents a lot of code duplication between
MM_* variants.
.PP
Do not use this as a seperator between directories.  Some operating
systems use different seperators between subdirectories as between
directories and filenames (for example:  VOLUME:[dir1.dir2]file on \s-1VMS\s0).
.PP
\fIinit_linker  \fIAbstract\fI\fR
.IX Subsection "init_linker Abstract"
.PP
.Vb 1
\&    $mm\->init_linker;
.Ve
.PP
Initialize macros which have to do with linking.
.PP
\&\s-1PERL_ARCHIVE:\s0 path to libperl.a equivalent to be linked to dynamic
extensions.
.PP
\&\s-1PERL_ARCHIVE_AFTER:\s0 path to a library which should be put on the
linker command line \fIafter\fR the external libraries to be linked to
dynamic extensions.  This may be needed if the linker is one-pass, and
Perl includes some overrides for C \s-1RTL\s0 functions, such as \fImalloc()\fR.
.PP
\&\s-1EXPORT_LIST:\s0 name of a file that is passed to linker to define symbols
to be exported.
.PP
Some OSes do not need these in which case leave it blank.
.PP
\fIinit_platform\fR
.IX Subsection "init_platform"
.PP
.Vb 1
\&    $mm\->init_platform
.Ve
.PP
Initialize any macros which are for platform specific use only.
.PP
A typical one is the version number of your \s-1OS\s0 specific mocule.
(ie. MM_Unix_VERSION or \s-1MM_VMS_VERSION\s0).
.PP
\fIinit_MAKE\fR
.IX Subsection "init_MAKE"
.PP
.Vb 1
\&    $mm\->init_MAKE
.Ve
.PP
Initialize \s-1MAKE\s0 from either a \s-1MAKE\s0 environment variable or \f(CW$Config\fR{make}.
.SS "Tools"
.IX Subsection "Tools"
A grab bag of methods to generate specific macros and commands.
.PP
\fImanifypods\fR
.IX Subsection "manifypods"
.PP
Defines targets and routines to translate the pods into manpages and
put them into the INST_* directories.
.PP
\fIPOD2MAN_macro\fR
.IX Subsection "POD2MAN_macro"
.PP
.Vb 1
\&  my $pod2man_macro = $self\->POD2MAN_macro
.Ve
.PP
Returns a definition for the \s-1POD2MAN\s0 macro.  This is a program
which emulates the pod2man utility.  You can add more switches to the
command by simply appending them on the macro.
.PP
Typical usage:
.PP
.Vb 1
\&    $(POD2MAN) \-\-section=3 \-\-perm_rw=$(PERM_RW) podfile1 man_page1 ...
.Ve
.PP
\fItest_via_harness\fR
.IX Subsection "test_via_harness"
.PP
.Vb 1
\&  my $command = $mm\->test_via_harness($perl, $tests);
.Ve
.PP
Returns a \f(CW$command\fR line which runs the given set of \f(CW$tests\fR with
Test::Harness and the given \f(CW$perl\fR.
.PP
Used on the t/*.t files.
.PP
\fItest_via_script\fR
.IX Subsection "test_via_script"
.PP
.Vb 1
\&  my $command = $mm\->test_via_script($perl, $script);
.Ve
.PP
Returns a \f(CW$command\fR line which just runs a single test without
Test::Harness.  No checks are done on the results, they're just
printed.
.PP
Used for test.pl, since they don't always follow Test::Harness
formatting.
.PP
\fItool_autosplit\fR
.IX Subsection "tool_autosplit"
.PP
Defines a simple perl call that runs autosplit. May be deprecated by
pm_to_blib soon.
.PP
\fIarch_check\fR
.IX Subsection "arch_check"
.PP
.Vb 4
\&    my $arch_ok = $mm\->arch_check(
\&        $INC{"Config.pm"},
\&        File::Spec\->catfile($Config{archlibexp}, "Config.pm")
\&    );
.Ve
.PP
A sanity check that what Perl thinks the architecture is and what
Config thinks the architecture is are the same.  If they're not it
will return false and show a diagnostic message.
.PP
When building Perl it will always return true, as nothing is installed
yet.
.PP
The interface is a bit odd because this is the result of a
quick refactoring.  Don't rely on it.
.SS "File::Spec wrappers"
.IX Subsection "File::Spec wrappers"
ExtUtils::MM_Any is a subclass of File::Spec.  The methods noted here
override File::Spec.
.PP
\fIcatfile\fR
.IX Subsection "catfile"
.PP
File::Spec <= 0.83 has a bug where the file part of catfile is not
canonicalized.  This override fixes that bug.
.SS "Misc"
.IX Subsection "Misc"
Methods I can't really figure out where they should go yet.
.PP
\fIfind_tests\fR
.IX Subsection "find_tests"
.PP
.Vb 1
\&  my $test = $mm\->find_tests;
.Ve
.PP
Returns a string suitable for feeding to the shell to return all
tests in t/*.t.
.PP
\fIextra_clean_files\fR
.IX Subsection "extra_clean_files"
.PP
.Vb 1
\&    my @files_to_clean = $MM\->extra_clean_files;
.Ve
.PP
Returns a list of \s-1OS\s0 specific files to be removed in the clean target in
addition to the usual set.
.PP
\fIinstallvars\fR
.IX Subsection "installvars"
.PP
.Vb 1
\&    my @installvars = $mm\->installvars;
.Ve
.PP
A list of all the INSTALL* variables without the \s-1INSTALL\s0 prefix.  Useful
for iteration or building related variable sets.
.PP
\fIlibscan\fR
.IX Subsection "libscan"
.PP
.Vb 1
\&  my $wanted = $self\->libscan($path);
.Ve
.PP
Takes a path to a file or dir and returns an empty string if we don't
want to include this file in the library.  Otherwise it returns the
the \f(CW$path\fR unchanged.
.PP
Mainly used to exclude version control administrative directories from
installation.
.PP
\fIplatform_constants\fR
.IX Subsection "platform_constants"
.PP
.Vb 1
\&    my $make_frag = $mm\->platform_constants
.Ve
.PP
Returns a make fragment defining all the macros initialized in
\&\fIinit_platform()\fR rather than put them in \fIconstants()\fR.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> and the denizens of
makemaker@perl.org with code from ExtUtils::MM_Unix and
ExtUtils::MM_Win32.
                                                                                                                                                                                                                                                                                                                                                            osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_BeOS.3pm                        0100644 0001750 0001750 00000010773 12566207454 024363  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_BeOS 3pm"
.TH ExtUtils::MM_BeOS 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_BeOS \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_BeOS; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.IP "os_flavor" 4
.IX Item "os_flavor"
BeOS is BeOS.
.IP "init_linker" 4
.IX Item "init_linker"
libperl.a equivalent to be linked to dynamic extensions.
.PP
1;
_\|_END_\|_
     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_BeOS5.16.3pm                    0100644 0001750 0001750 00000010452 12566207433 024664  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_BeOS 3pm"
.TH ExtUtils::MM_BeOS 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_BeOS \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_BeOS; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.IP "os_flavor" 4
.IX Item "os_flavor"
BeOS is BeOS.
.IP "init_linker" 4
.IX Item "init_linker"
libperl.a equivalent to be linked to dynamic extensions.
.PP
1;
_\|_END_\|_
                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_BeOS5.18.3pm                    0100644 0001750 0001750 00000010773 12566207454 024677  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_BeOS 3pm"
.TH ExtUtils::MM_BeOS 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_BeOS \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_BeOS; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.IP "os_flavor" 4
.IX Item "os_flavor"
BeOS is BeOS.
.IP "init_linker" 4
.IX Item "init_linker"
libperl.a equivalent to be linked to dynamic extensions.
.PP
1;
_\|_END_\|_
     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_Cygwin.3pm                      0100644 0001750 0001750 00000012106 12566207454 025023  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_Cygwin 3pm"
.TH ExtUtils::MM_Cygwin 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_Cygwin \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_Cygwin; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided there.
.IP "os_flavor" 4
.IX Item "os_flavor"
We're Unix and Cygwin.
.IP "cflags" 4
.IX Item "cflags"
if configured for dynamic loading, triggers #define \s-1EXT\s0 in \s-1EXTERN\s0.h
.IP "replace_manpage_separator" 4
.IX Item "replace_manpage_separator"
replaces strings '::' with '.' in MAN*POD man page names
.IP "init_linker" 4
.IX Item "init_linker"
points to libperl.a
.IP "maybe_command" 4
.IX Item "maybe_command"
If our path begins with \fI/cygdrive/\fR then we use \f(CW\*(C`ExtUtils::MM_Win32\*(C'\fR
to determine if it may be a command.  Otherwise we use the tests
from \f(CW\*(C`ExtUtils::MM_Unix\*(C'\fR.
.IP "dynamic_lib" 4
.IX Item "dynamic_lib"
Use the default to produce the *.dll's.
But for new archdir dll's use the same rebase address if the old exists.
.IP "all_target" 4
.IX Item "all_target"
Build man pages, too
                                                                                                                                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_Cygwin5.16.3pm                  0100644 0001750 0001750 00000011565 12566207433 025342  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_Cygwin 3pm"
.TH ExtUtils::MM_Cygwin 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_Cygwin \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_Cygwin; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided there.
.IP "os_flavor" 4
.IX Item "os_flavor"
We're Unix and Cygwin.
.IP "cflags" 4
.IX Item "cflags"
if configured for dynamic loading, triggers #define \s-1EXT\s0 in \s-1EXTERN\s0.h
.IP "replace_manpage_separator" 4
.IX Item "replace_manpage_separator"
replaces strings '::' with '.' in MAN*POD man page names
.IP "init_linker" 4
.IX Item "init_linker"
points to libperl.a
.IP "maybe_command" 4
.IX Item "maybe_command"
If our path begins with \fI/cygdrive/\fR then we use \f(CW\*(C`ExtUtils::MM_Win32\*(C'\fR
to determine if it may be a command.  Otherwise we use the tests
from \f(CW\*(C`ExtUtils::MM_Unix\*(C'\fR.
.IP "dynamic_lib" 4
.IX Item "dynamic_lib"
Use the default to produce the *.dll's.
But for new archdir dll's use the same rebase address if the old exists.
.IP "all_target" 4
.IX Item "all_target"
Build man pages, too
                                                                                                                                           osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_Cygwin5.18.3pm                  0100644 0001750 0001750 00000012106 12566207454 025337  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_Cygwin 3pm"
.TH ExtUtils::MM_Cygwin 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_Cygwin \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_Cygwin; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided there.
.IP "os_flavor" 4
.IX Item "os_flavor"
We're Unix and Cygwin.
.IP "cflags" 4
.IX Item "cflags"
if configured for dynamic loading, triggers #define \s-1EXT\s0 in \s-1EXTERN\s0.h
.IP "replace_manpage_separator" 4
.IX Item "replace_manpage_separator"
replaces strings '::' with '.' in MAN*POD man page names
.IP "init_linker" 4
.IX Item "init_linker"
points to libperl.a
.IP "maybe_command" 4
.IX Item "maybe_command"
If our path begins with \fI/cygdrive/\fR then we use \f(CW\*(C`ExtUtils::MM_Win32\*(C'\fR
to determine if it may be a command.  Otherwise we use the tests
from \f(CW\*(C`ExtUtils::MM_Unix\*(C'\fR.
.IP "dynamic_lib" 4
.IX Item "dynamic_lib"
Use the default to produce the *.dll's.
But for new archdir dll's use the same rebase address if the old exists.
.IP "all_target" 4
.IX Item "all_target"
Build man pages, too
                                                                                                                                                                                                                                                                                                                                                                                                                                                          osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_DOS.3pm                         0100644 0001750 0001750 00000011332 12566207454 024210  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_DOS 3pm"
.TH ExtUtils::MM_DOS 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_DOS \- DOS specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality
for \s-1DOS.\s0
.PP
Unless otherwise stated, it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
.IP "os_flavor" 4
.IX Item "os_flavor"
.PD 0
.IP "\fBreplace_manpage_separator\fR" 4
.IX Item "replace_manpage_separator"
.PD
Generates Foo_\|_Bar.3 style man page names
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MM_Unix, ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_DOS5.16.3pm                     0100644 0001750 0001750 00000011011 12566207433 024511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_DOS 3pm"
.TH ExtUtils::MM_DOS 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_DOS \- DOS specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality
for \s-1DOS\s0.
.PP
Unless otherwise stated, it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
.IP "os_flavor" 4
.IX Item "os_flavor"
.PD 0
.IP "\fBreplace_manpage_separator\fR" 4
.IX Item "replace_manpage_separator"
.PD
Generates Foo_\|_Bar.3 style man page names
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MM_Unix, ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_DOS5.18.3pm                     0100644 0001750 0001750 00000011332 12566207454 024524  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_DOS 3pm"
.TH ExtUtils::MM_DOS 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_DOS \- DOS specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality
for \s-1DOS.\s0
.PP
Unless otherwise stated, it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
.IP "os_flavor" 4
.IX Item "os_flavor"
.PD 0
.IP "\fBreplace_manpage_separator\fR" 4
.IX Item "replace_manpage_separator"
.PD
Generates Foo_\|_Bar.3 style man page names
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MM_Unix, ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_Darwin.3pm                      0100644 0001750 0001750 00000010613 12566207454 025010  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_Darwin 3pm"
.TH ExtUtils::MM_Darwin 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_Darwin \- special behaviors for OS X
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    For internal MakeMaker use only
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for ExtUtils::MM_Any for documention on the
methods overridden here.
.SS "Overriden Methods"
.IX Subsection "Overriden Methods"
\fIinit_dist\fR
.IX Subsection "init_dist"
.PP
Turn off Apple tar's tendency to copy resource forks as \*(L"._foo\*(R" files.
                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_Darwin5.16.3pm                  0100644 0001750 0001750 00000010272 12566207433 025320  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_Darwin 3pm"
.TH ExtUtils::MM_Darwin 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_Darwin \- special behaviors for OS X
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    For internal MakeMaker use only
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for ExtUtils::MM_Any for documention on the
methods overridden here.
.SS "Overriden Methods"
.IX Subsection "Overriden Methods"
\fIinit_dist\fR
.IX Subsection "init_dist"
.PP
Turn off Apple tar's tendency to copy resource forks as \*(L"._foo\*(R" files.
                                                                                                                                                                                                                                                                                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_Darwin5.18.3pm                  0100644 0001750 0001750 00000010613 12566207454 025324  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_Darwin 3pm"
.TH ExtUtils::MM_Darwin 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_Darwin \- special behaviors for OS X
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    For internal MakeMaker use only
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for ExtUtils::MM_Any for documention on the
methods overridden here.
.SS "Overriden Methods"
.IX Subsection "Overriden Methods"
\fIinit_dist\fR
.IX Subsection "init_dist"
.PP
Turn off Apple tar's tendency to copy resource forks as \*(L"._foo\*(R" files.
                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_MacOS.3pm                       0100644 0001750 0001750 00000011557 12566207454 024536  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_MacOS 3pm"
.TH ExtUtils::MM_MacOS 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_MacOS \- once produced Makefiles for MacOS Classic
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # MM_MacOS no longer contains any code.  This is just a stub.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Once upon a time, MakeMaker could produce an approximation of a correct
Makefile on MacOS Classic (MacPerl).  Due to a lack of maintainers, this
fell out of sync with the rest of MakeMaker and hadn't worked in years.
Since there's little chance of it being repaired, MacOS Classic is fading
away, and the code was icky to begin with, the code has been deleted to
make maintenance easier.
.PP
Those interested in writing modules for MacPerl should use Module::Build
which works better than MakeMaker ever did.
.PP
Anyone interested in resurrecting this file should pull the old version
from the MakeMaker \s-1CVS\s0 repository and contact makemaker@perl.org, but we
really encourage you to work on Module::Build instead.
                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_MacOS5.16.3pm                   0100644 0001750 0001750 00000011236 12566207433 025037  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_MacOS 3pm"
.TH ExtUtils::MM_MacOS 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_MacOS \- once produced Makefiles for MacOS Classic
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # MM_MacOS no longer contains any code.  This is just a stub.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Once upon a time, MakeMaker could produce an approximation of a correct
Makefile on MacOS Classic (MacPerl).  Due to a lack of maintainers, this
fell out of sync with the rest of MakeMaker and hadn't worked in years.
Since there's little chance of it being repaired, MacOS Classic is fading
away, and the code was icky to begin with, the code has been deleted to
make maintenance easier.
.PP
Those interested in writing modules for MacPerl should use Module::Build
which works better than MakeMaker ever did.
.PP
Anyone interested in resurrecting this file should pull the old version
from the MakeMaker \s-1CVS\s0 repository and contact makemaker@perl.org, but we
really encourage you to work on Module::Build instead.
                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_MacOS5.18.3pm                   0100644 0001750 0001750 00000011557 12566207454 025052  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_MacOS 3pm"
.TH ExtUtils::MM_MacOS 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_MacOS \- once produced Makefiles for MacOS Classic
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # MM_MacOS no longer contains any code.  This is just a stub.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Once upon a time, MakeMaker could produce an approximation of a correct
Makefile on MacOS Classic (MacPerl).  Due to a lack of maintainers, this
fell out of sync with the rest of MakeMaker and hadn't worked in years.
Since there's little chance of it being repaired, MacOS Classic is fading
away, and the code was icky to begin with, the code has been deleted to
make maintenance easier.
.PP
Those interested in writing modules for MacPerl should use Module::Build
which works better than MakeMaker ever did.
.PP
Anyone interested in resurrecting this file should pull the old version
from the MakeMaker \s-1CVS\s0 repository and contact makemaker@perl.org, but we
really encourage you to work on Module::Build instead.
                                                                                                                                                 osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_NW5.3pm                         0100644 0001750 0001750 00000011616 12566207454 024201  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_NW5 3pm"
.TH ExtUtils::MM_NW5 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_NW5 \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_NW5; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.IP "os_flavor" 4
.IX Item "os_flavor"
We're Netware in addition to being Windows.
.IP "init_platform" 4
.IX Item "init_platform"
Add Netware macros.
.Sp
\&\s-1LIBPTH, BASE_IMPORT, NLM_VERSION, MPKTOOL, TOOLPATH, BOOT_SYMBOL,
NLM_SHORT_NAME, INCLUDE, PATH, MM_NW5_REVISION\s0
.IP "platform_constants" 4
.IX Item "platform_constants"
Add Netware macros initialized above to the Makefile.
.IP "const_cccmd" 4
.IX Item "const_cccmd"
.PD 0
.IP "static_lib" 4
.IX Item "static_lib"
.IP "dynamic_lib" 4
.IX Item "dynamic_lib"
.PD
Defines how to produce the *.so (or equivalent) files.
                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_NW55.16.3pm                     0100644 0001750 0001750 00000011376 12566207433 024513  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_NW5 3pm"
.TH ExtUtils::MM_NW5 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_NW5 \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_NW5; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.IP "os_flavor" 4
.IX Item "os_flavor"
We're Netware in addition to being Windows.
.IP "init_platform" 4
.IX Item "init_platform"
Add Netware macros.
.Sp
\&\s-1LIBPTH\s0, \s-1BASE_IMPORT\s0, \s-1NLM_VERSION\s0, \s-1MPKTOOL\s0, \s-1TOOLPATH\s0, \s-1BOOT_SYMBOL\s0,
\&\s-1NLM_SHORT_NAME\s0, \s-1INCLUDE\s0, \s-1PATH\s0, \s-1MM_NW5_REVISION\s0
.IP "platform_constants" 4
.IX Item "platform_constants"
Add Netware macros initialized above to the Makefile.
.IP "const_cccmd" 4
.IX Item "const_cccmd"
.PD 0
.IP "static_lib" 4
.IX Item "static_lib"
.IP "dynamic_lib" 4
.IX Item "dynamic_lib"
.PD
Defines how to produce the *.so (or equivalent) files.
                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_NW55.18.3pm                     0100644 0001750 0001750 00000011616 12566207454 024515  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_NW5 3pm"
.TH ExtUtils::MM_NW5 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_NW5 \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_NW5; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.IP "os_flavor" 4
.IX Item "os_flavor"
We're Netware in addition to being Windows.
.IP "init_platform" 4
.IX Item "init_platform"
Add Netware macros.
.Sp
\&\s-1LIBPTH, BASE_IMPORT, NLM_VERSION, MPKTOOL, TOOLPATH, BOOT_SYMBOL,
NLM_SHORT_NAME, INCLUDE, PATH, MM_NW5_REVISION\s0
.IP "platform_constants" 4
.IX Item "platform_constants"
Add Netware macros initialized above to the Makefile.
.IP "const_cccmd" 4
.IX Item "const_cccmd"
.PD 0
.IP "static_lib" 4
.IX Item "static_lib"
.IP "dynamic_lib" 4
.IX Item "dynamic_lib"
.PD
Defines how to produce the *.so (or equivalent) files.
                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_OS2.3pm                         0100644 0001750 0001750 00000011123 12566207454 024164  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_OS2 3pm"
.TH ExtUtils::MM_OS2 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_OS2 \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_OS2; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.SH "METHODS"
.IX Header "METHODS"
.IP "init_dist" 4
.IX Item "init_dist"
Define \s-1TO_UNIX\s0 to convert \s-1OS2\s0 linefeeds to Unix style.
.IP "init_linker" 4
.IX Item "init_linker"
.PD 0
.IP "os_flavor" 4
.IX Item "os_flavor"
.PD
\&\s-1OS/2\s0 is \s-1OS/2\s0
                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_OS25.16.3pm                     0100644 0001750 0001750 00000010602 12566207433 024474  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_OS2 3pm"
.TH ExtUtils::MM_OS2 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_OS2 \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_OS2; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.SH "METHODS"
.IX Header "METHODS"
.IP "init_dist" 4
.IX Item "init_dist"
Define \s-1TO_UNIX\s0 to convert \s-1OS2\s0 linefeeds to Unix style.
.IP "init_linker" 4
.IX Item "init_linker"
.PD 0
.IP "os_flavor" 4
.IX Item "os_flavor"
.PD
\&\s-1OS/2\s0 is \s-1OS/2\s0
                                                                                                                              osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_OS25.18.3pm                     0100644 0001750 0001750 00000011123 12566207454 024500  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_OS2 3pm"
.TH ExtUtils::MM_OS2 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_OS2 \- methods to override UN*X behaviour in ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use ExtUtils::MM_OS2; # Done internally by ExtUtils::MakeMaker if needed
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See ExtUtils::MM_Unix for a documentation of the methods provided
there. This package overrides the implementation of these methods, not
the semantics.
.SH "METHODS"
.IX Header "METHODS"
.IP "init_dist" 4
.IX Item "init_dist"
Define \s-1TO_UNIX\s0 to convert \s-1OS2\s0 linefeeds to Unix style.
.IP "init_linker" 4
.IX Item "init_linker"
.PD 0
.IP "os_flavor" 4
.IX Item "os_flavor"
.PD
\&\s-1OS/2\s0 is \s-1OS/2\s0
                                                                                                                                                                                                                                                                                                                                                                                                                                             osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_QNX.3pm                         0100644 0001750 0001750 00000011213 12566207454 024227  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_QNX 3pm"
.TH ExtUtils::MM_QNX 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_QNX \- QNX specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality for
\&\s-1QNX.\s0
.PP
Unless otherwise stated it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
\fIextra_clean_files\fR
.IX Subsection "extra_clean_files"
.PP
Add .err files corresponding to each .c file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_QNX5.16.3pm                     0100644 0001750 0001750 00000010672 12566207433 024546  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_QNX 3pm"
.TH ExtUtils::MM_QNX 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_QNX \- QNX specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality for
\&\s-1QNX\s0.
.PP
Unless otherwise stated it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
\fIextra_clean_files\fR
.IX Subsection "extra_clean_files"
.PP
Add .err files corresponding to each .c file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker
                                                                      osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_QNX5.18.3pm                     0100644 0001750 0001750 00000011213 12566207454 024543  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_QNX 3pm"
.TH ExtUtils::MM_QNX 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_QNX \- QNX specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality for
\&\s-1QNX.\s0
.PP
Unless otherwise stated it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
\fIextra_clean_files\fR
.IX Subsection "extra_clean_files"
.PP
Add .err files corresponding to each .c file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                                                                                                                                     osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_UWIN.3pm                        0100644 0001750 0001750 00000011370 12566207454 024347  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_UWIN 3pm"
.TH ExtUtils::MM_UWIN 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_UWIN \- U/WIN specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality for
the \s-1AT&T U/WIN UNIX\s0 on Windows environment.
.PP
Unless otherwise stated it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
.IP "os_flavor" 4
.IX Item "os_flavor"
In addition to being Unix, we're U/WIN.
.IP "\fBreplace_manpage_separator\fR" 4
.IX Item "replace_manpage_separator"
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MM_Win32, ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_UWIN5.16.3pm                    0100644 0001750 0001750 00000011056 12566207433 024657  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_UWIN 3pm"
.TH ExtUtils::MM_UWIN 3pm "2013-03-04" "perl v5.16.3" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_UWIN \- U/WIN specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality for
the \s-1AT&T\s0 U/WIN \s-1UNIX\s0 on Windows environment.
.PP
Unless otherwise stated it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
.IP "os_flavor" 4
.IX Item "os_flavor"
In addition to being Unix, we're U/WIN.
.IP "\fBreplace_manpage_separator\fR" 4
.IX Item "replace_manpage_separator"
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MM_Win32, ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_UWIN5.18.3pm                    0100644 0001750 0001750 00000011370 12566207454 024663  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_UWIN 3pm"
.TH ExtUtils::MM_UWIN 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_UWIN \- U/WIN specific subclass of ExtUtils::MM_Unix
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  Don\*(Aqt use this module directly.
\&  Use ExtUtils::MM and let it choose.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of ExtUtils::MM_Unix which contains functionality for
the \s-1AT&T U/WIN UNIX\s0 on Windows environment.
.PP
Unless otherwise stated it works just like ExtUtils::MM_Unix
.SS "Overridden methods"
.IX Subsection "Overridden methods"
.IP "os_flavor" 4
.IX Item "os_flavor"
In addition to being Unix, we're U/WIN.
.IP "\fBreplace_manpage_separator\fR" 4
.IX Item "replace_manpage_separator"
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael G Schwern <schwern@pobox.com> with code from ExtUtils::MM_Unix
.SH "SEE ALSO"
.IX Header "SEE ALSO"
ExtUtils::MM_Win32, ExtUtils::MakeMaker
                                                                                                                                                                                                                                                                        osxcross/target/SDK/MacOSX10.11.sdk/usr/share/man/man3/ExtUtils::MM_Unix.3pm                        0100644 0001750 0001750 00000052213 12566207454 024511  0                                                                                                    ustar 00                                                                0000000 0000000                                                                                                                                                                        .\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "ExtUtils::MM_Unix 3pm"
.TH ExtUtils::MM_Unix 3pm "2014-01-06" "perl v5.18.2" "Perl Programmers Reference Guide"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ExtUtils::MM_Unix \- methods used by ExtUtils::MakeMaker
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\f(CW\*(C`require ExtUtils::MM_Unix;\*(C'\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The methods provided by this package are designed to be used in
conjunction with ExtUtils::MakeMaker. When MakeMaker writes a
Makefile, it creates one or more objects that inherit their methods
from a package \f(CW\*(C`MM\*(C'\fR. \s-1MM\s0 itself doesn't provide any methods, but it
\&\s-1ISA\s0 ExtUtils::MM_Unix class. The inheritance tree of \s-1MM\s0 lets operating
specific packages take the responsibility for all the methods provided
by MM_Unix. We are trying to reduce the number of the necessary
overrides by defining rather primitive operations within
ExtUtils::MM_Unix.
.PP
If you are going to write a platform specific \s-1MM\s0 package, please try
to limit the necessary overrides to primitive methods, and if it is not
possible to do so, let's work out how to achieve that gain.
.PP
If you are overriding any of these methods in your Makefile.PL (in the
\&\s-1MY\s0 class), please report that to the makemaker mailing list. We are
trying to minimize the necessary method overrides and switch to data
driven Makefile.PLs wherever possible. In the long run less methods
will be overridable via the \s-1MY\s0 class.
.SH "METHODS"
.IX Header "METHODS"
The following description of methods is still under
development. Please refer to the code for not suitably documented
sections and complain loudly to the makemaker@perl.org mailing list.
Better yet, provide a patch.
.PP
Not all of the methods below are overridable in a
Makefile.PL. Overridable methods are marked as (o). All methods are
overridable by a platform specific MM_*.pm file.
.PP
Cross-platform methods are being moved into MM_Any.  If you can't find
something that used to be in here, look in MM_Any.
.SS "Methods"
.IX Subsection "Methods"
.IP "os_flavor" 4
.IX Item "os_flavor"
Simply says that we're Unix.
.IP "c_o (o)" 4
.IX Item "c_o (o)"
Defines the suffix rules to compile different flavors of C files to
object files.
.IP "cflags (o)" 4
.IX Item "cflags (o)"
Does very much the same as the cflags script in the perl
distribution. It doesn't return the whole compiler command line, but
initializes all of its parts. The const_cccmd method then actually
returns the definition of the \s-1CCCMD\s0 macro which uses these parts.
.IP "const_cccmd (o)" 4
.IX Item "const_cccmd (o)"
Returns the full compiler call for C programs and stores the
definition in \s-1CONST_CCCMD.\s0
.IP "const_config (o)" 4
.IX Item "const_config (o)"
Defines a couple of constants in the Makefile that are imported from
\&\f(CW%Config\fR.
.IP "const_loadlibs (o)" 4
.IX Item "const_loadlibs (o)"
Defines \s-1EXTRALIBS, LDLOADLIBS, BSLOADLIBS, LD_RUN_PATH.\s0 See
ExtUtils::Liblist for details.
.IP "constants (o)" 4
.IX Item "constants (o)"
.Vb 1
\&  my $make_frag = $mm\->constants;
.Ve
.Sp
Prints out macros for lots of constants.
.IP "depend (o)" 4
.IX Item "depend (o)"
Same as macro for the depend attribute.
.IP "init_DEST" 4
.IX Item "init_DEST"
.Vb 1
\&  $mm\->init_DEST
.Ve
.Sp
Defines the \s-1DESTDIR\s0 and DEST* variables paralleling the INSTALL*.
.IP "init_dist" 4
.IX Item "init_dist"
.Vb 1
\&  $mm\->init_dist;
.Ve
.Sp
Defines a lot of macros for distribution support.
.Sp
.Vb 1
\&  macro         description                     default
\&
\&  TAR           tar command to use              tar
\&  TARFLAGS      flags to pass to TAR            cvf
\&
\&  ZIP           zip command to use              zip
\&  ZIPFLAGS      flags to pass to ZIP            \-r
\&
\&  COMPRESS      compression command to          gzip \-\-best
\&                use for tarfiles
\&  SUFFIX        suffix to put on                .gz 
\&                compressed files
\&
\&  SHAR          shar command to use             shar
\&
\&  PREOP         extra commands to run before
\&                making the archive 
\&  POSTOP        extra commands to run after
\&                making the archive
\&
\&  TO_UNIX       a command to convert linefeeds
\&                to Unix style in your archive 
\&
\&  CI            command to checkin your         ci \-u
\&                sources to version control
\&  RCS_LABEL     command to label your sources   rcs \-Nv$(VERSION_SYM): \-q
\&                just after CI is run
\&
\&  DIST_CP       $how argument to manicopy()     best
\&                when the distdir is created
\&
\&  DIST_DEFAULT  default target to use to        tardist
\&                create a distribution
\&
\&  DISTVNAME     name of the resulting archive   $(DISTNAME)\-$(VERSION)
\&                (minus suffixes)
.Ve
.IP "dist (o)" 4
.IX Item "dist (o)"
.Vb 1
\&  my $dist_macros = $mm\->dist(%overrides);
.Ve
.Sp
Generates a make fragment defining all the macros initialized in
init_dist.
.Sp
\&\f(CW%overrides\fR can be used to override any of the above.
.IP "dist_basics (o)" 4
.IX Item "dist_basics (o)"
Defines the targets distclean, distcheck, skipcheck, manifest, veryclean.
.IP "dist_ci (o)" 4
.IX Item "dist_ci (o)"
Defines a check in target for \s-1RCS.\s0
.IP "dist_core (o)" 4
.IX Item "dist_core (o)"
.Vb 1
\&  my $dist_make_fragment = $MM\->dist_core;
.Ve
.Sp
Puts the targets necessary for 'make dist' together into one make
fragment.
.IP "\fBdist_target\fR" 4
.IX Item "dist_target"
.Vb 1
\&  my $make_frag = $MM\->dist_target;
.Ve
.Sp
Returns the 'dist' target to make an archive for distribution.  This
target simply checks to make sure the Makefile is up-to-date and
depends on $(\s-1DIST_DEFAULT\s0).
.IP "\fBtardist_target\fR" 4
.IX Item "tardist_target"
.Vb 1
\&  my $make_frag = $MM\->tardist_target;
.Ve
.Sp
Returns the 'tardist' target which is simply so 'make tardist' works.
The real work is done by the dynamically named \fItardistfile_target()\fR
method, tardist should have that as a dependency.
.IP "\fBzipdist_target\fR" 4
.IX Item "zipdist_target"
.Vb 1
\&  my $make_frag = $MM\->zipdist_target;
.Ve
.Sp
Returns the 'zipdist' target which is simply so 'make zipdist' works.
The real work is done by the dynamically named \fIzipdistfile_target()\fR
method, zipdist should have that as a dependency.
.IP "\fBtarfile_target\fR" 4
.IX Item "tarfile_target"
.Vb 1
\&  my $make_frag = $MM\->tarfile_target;
.Ve
.Sp
The name of this target is the name of the tarball generated by
tardist.  This target does the actual work of turning the distdir into
a tarball.
.IP "zipfile_target" 4
.IX Item "zipfile_target"
.Vb 1
\&  my $make_frag = $MM\->zipfile_target;
.Ve
.Sp
The name of this target is the name of the zip file generated by
zipdist.  This target does the actual work of turning the distdir into
a zip file.
.IP "uutardist_target" 4
.IX Item "uutardist_target"
.Vb 1
\&  my $make_frag = $MM\->uutardist_target;
.Ve
.Sp
Converts the tarfile into a uuencoded file
.IP "shdist_target" 4
.IX Item "shdist_target"
.Vb 1
\&  my $make_frag = $MM\->shdist_target;
.Ve
.Sp
Converts the distdir into a shell archive.
.IP "dlsyms (o)" 4
.IX Item "dlsyms (o)"
Used by some \s-1OS\s0' to define \s-1DL_FUNCS\s0 and \s-1DL_VARS\s0 and write the *.exp files.
.Sp
Normally just returns an empty string.
.IP "dynamic_bs (o)" 4
.IX Item "dynamic_bs (o)"
Defines targets for bootstrap files.
.IP "dynamic_lib (o)" 4
.IX Item "dynamic_lib (o)"
Defines how to produce the *.so (or equivalent) files.
.IP "exescan" 4
.IX Item "exescan"
Deprecated method. Use libscan instead.
.IP "extliblist" 4
.IX Item "extliblist"
Called by init_others, and calls ext ExtUtils::Liblist. See
ExtUtils::Liblist for details.
.IP "find_perl" 4
.IX Item "find_perl"
Finds the executables \s-1PERL\s0 and \s-1FULLPERL\s0
.IP "fixin" 4
.IX Item "fixin"
.Vb 1
\&  $mm\->fixin(@files);
.Ve
.Sp
Inserts the sharpbang or equivalent magic number to a set of \f(CW@files\fR.
.IP "force (o)" 4
.IX Item "force (o)"
Writes an empty \s-1FORCE:\s0 target.
.IP "guess_name" 4
.IX Item "guess_name"
Guess the name of this package by examining the working directory's
name. MakeMaker calls this only if the developer has not supplied a
\&\s-1NAME\s0 attribute.
.IP "has_link_code" 4
.IX Item "has_link_code"
Returns true if C, \s-1XS, MYEXTLIB\s0 or similar objects exist within this
object that need a compiler. Does not descend into subdirectories as
\&\fIneeds_linking()\fR does.
.IP "init_dirscan" 4
.IX Item "init_dirscan"
Scans the directory structure and initializes \s-1DIR, XS, XS_FILES,
C, C_FILES, O_FILES, H, H_FILES, PL_FILES, EXE_FILES.\s0
.Sp
Called by init_main.
.IP "init_MANPODS" 4
.IX Item "init_MANPODS"
Determines if man pages should be generated and initializes \s-1MAN1PODS\s0
and \s-1MAN3PODS\s0 as appropriate.
.IP "init_MAN1PODS" 4
.IX Item "init_MAN1PODS"
Initializes \s-1MAN1PODS\s0 from the list of \s-1EXE_FILES.\s0
.IP "init_MAN3PODS" 4
.IX Item "init_MAN3PODS"
Initializes \s-1MAN3PODS\s0 from the list of \s-1PM\s0 files.
.IP "init_PM" 4
.IX Item "init_PM"
Initializes \s-1PMLIBDIRS\s0 and \s-1PM\s0 from \s-1PMLIBDIRS.\s0
.IP "init_DIRFILESEP" 4
.IX Item "init_DIRFILESEP"
Using / for Unix.  Called by init_main.
.IP "init_main" 4
.IX Item "init_main"
Initializes \s-1AR, AR_STATIC_ARGS, BASEEXT, CONFIG, DISTNAME, DLBASE,
EXE_EXT, FULLEXT, FULLPERL, FULLPERLRUN, FULLPERLRUNINST,\s0 INST_*,
INSTALL*, \s-1INSTALLDIRS, LIB_EXT, LIBPERL_A, MAP_TARGET, NAME,
OBJ_EXT, PARENT_NAME, PERL, PERL_ARCHLIB, PERL_INC, PERL_LIB,
PERL_SRC, PERLRUN, PERLRUNINST, PREFIX, VERSION,
VERSION_SYM, XS_VERSION.\s0
.IP "init_tools" 4
.IX Item "init_tools"
Initializes tools to use their common (and faster) Unix commands.
.IP "init_linker" 4
.IX Item "init_linker"
Unix has no need of special linker flags.
.IP "init_PERL" 4
.IX Item "init_PERL"
.Vb 1
\&    $mm\->init_PERL;
.Ve
.Sp
Called by init_main.  Sets up \s-1ABSPERL, PERL, FULLPERL\s0 and all the
*PERLRUN* permutations.
.Sp
.Vb 2
\&    PERL is allowed to be miniperl
\&    FULLPERL must be a complete perl
\&
\&    ABSPERL is PERL converted to an absolute path
\&
\&    *PERLRUN contains everything necessary to run perl, find it\*(Aqs
\&         libraries, etc...
\&
\&    *PERLRUNINST is *PERLRUN + everything necessary to find the
\&         modules being built.
.Ve
.IP "init_platform" 4
.IX Item "init_platform"
.PD 0
.IP "platform_constants" 4
.IX Item "platform_constants"
.PD
Add MM